- title: __initial_text__
  contents:
  - "                   An Internet Attribute Certificate\n                      \
    \ Profile for Authorization\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a profile for the use of X.509 Attribute\n\
    \   Certificates in Internet Protocols.  Attribute certificates may be\n   used\
    \ in a wide range of applications and environments covering a\n   broad spectrum\
    \ of interoperability goals and a broader spectrum of\n   operational and assurance\
    \ requirements.  The goal of this document is\n   to establish a common baseline\
    \ for generic applications requiring\n   broad interoperability as well as limited\
    \ special purpose\n   requirements.  The profile places emphasis on attribute\
    \ certificate\n   support for Internet electronic mail, IPSec, and WWW security\n\
    \   applications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction.................................................\
    \  2\n       1.1  Delegation and AC chains...............................  4\n\
    \       1.2  Attribute Certificate Distribution (\"push\" vs. \"pull\").  4\n\
    \       1.3  Document Structure.....................................  6\n   2.\
    \ Terminology..................................................  6\n   3. Requirements.................................................\
    \  7\n   4. Attribute Certificate Profile................................  7\n\
    \       4.1  X.509 Attribute Certificate Definition.................  8\n    \
    \   4.2  Profile of Standard Fields............................. 10\n        \
    \   4.2.1  Version.......................................... 10\n           4.2.2\
    \  Holder........................................... 11\n           4.2.3  Issuer...........................................\
    \ 12\n           4.2.4  Signature........................................ 12\n\
    \           4.2.5  Serial Number.................................... 12\n    \
    \       4.2.6  Validity Period.................................. 13\n        \
    \   4.2.7  Attributes....................................... 13\n           4.2.8\
    \  Issuer Unique Identifier......................... 14\n           4.2.9  Extensions.......................................\
    \ 14\n       4.3  Extensions............................................. 14\n\
    \           4.3.1  Audit Identity................................... 14\n    \
    \       4.3.2  AC Targeting..................................... 15\n        \
    \   4.3.3  Authority Key Identifier......................... 17\n           4.3.4\
    \  Authority Information Access..................... 17\n           4.3.5  CRL\
    \ Distribution Points.......................... 17\n           4.3.6  No Revocation\
    \ Available.......................... 18\n       4.4  Attribute Types........................................\
    \ 18\n           4.4.1  Service Authentication Information............... 19\n\
    \           4.4.2  Access Identity.................................. 19\n    \
    \       4.4.3  Charging Identity................................ 20\n        \
    \   4.4.4  Group............................................ 20\n           4.4.5\
    \  Role............................................. 20\n           4.4.6  Clearance........................................\
    \ 21\n       4.5  Profile of AC issuer's PKC............................. 22\n\
    \   5. Attribute Certificate Validation............................. 23\n   6.\
    \ Revocation................................................... 24\n   7. Optional\
    \ Features............................................ 25\n       7.1  Attribute\
    \ Encryption................................... 25\n       7.2  Proxying...............................................\
    \ 27\n       7.3  Use of ObjectDigestInfo................................ 28\n\
    \       7.4  AA Controls............................................ 29\n   8.\
    \ Security Considerations...................................... 30\n   9. IANA\
    \ Considerations.......................................... 32\n   10. References..................................................\
    \ 32\n   Appendix A: Object Identifiers.................................. 34\n\
    \   Appendix B: ASN.1 Module........................................ 35\n   Author's\
    \ Addresses.............................................. 39\n   Acknowledgements................................................\
    \ 39\n   Full Copyright Statement........................................ 40\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119.\n   X.509 public key certificates (PKCs) [X.509-1997, X.509-2000,\n\
    \   PKIXPROF] bind an identity and a public key.  An attribute\n   certificate\
    \ (AC) is a structure similar to a PKC; the main difference\n   being that the\
    \ AC contains no public key.  An AC may contain\n   attributes that specify group\
    \ membership, role, security clearance,\n   or other authorization information\
    \ associated with the AC holder.\n   The syntax for the AC is defined in Recommendation\
    \ X.509, making the\n   term \"X.509 certificate\" ambiguous.\n   Some people\
    \ constantly confuse PKCs and ACs.  An analogy may make the\n   distinction clear.\
    \  A PKC can be considered to be like a passport: it\n   identifies the holder,\
    \ tends to last for a long time, and should not\n   be trivial to obtain.  An\
    \ AC is more like an entry visa: it is\n   typically issued by a different authority\
    \ and does not last for as\n   long a time.  As acquiring an entry visa typically\
    \ requires\n   presenting a passport, getting a visa can be a simpler process.\n\
    \   Authorization information may be placed in a PKC extension or placed\n   in\
    \ a separate attribute certificate (AC).  The placement of\n   authorization information\
    \ in PKCs is usually undesirable for two\n   reasons.  First, authorization information\
    \ often does not have the\n   same lifetime as the binding of the identity and\
    \ the public key.\n   When authorization information is placed in a PKC extension,\
    \ the\n   general result is the shortening of the PKC useful lifetime.  Second,\n\
    \   the PKC issuer is not usually authoritative for the authorization\n   information.\
    \  This results in additional steps for the PKC issuer to\n   obtain authorization\
    \ information from the authoritative source.\n   For these reasons, it is often\
    \ better to separate authorization\n   information from the PKC.  Yet, authorization\
    \ information also needs\n   to be bound to an identity.  An AC provides this\
    \ binding; it is\n   simply a digitally signed (or certified) identity and set\
    \ of\n   attributes.\n   An AC may be used with various security services, including\
    \ access\n   control, data origin authentication, and non-repudiation.\n   PKCs\
    \ can provide an identity to access control decision functions.\n   However, in\
    \ many contexts the identity is not the criterion that is\n   used for access\
    \ control decisions, rather the role or group-\n   membership of the accessor\
    \ is the criterion used.  Such access\n   control schemes are called role-based\
    \ access control.\n   When making an access control decision based on an AC, an\
    \ access\n   control decision function may need to ensure that the appropriate\
    \ AC\n   holder is the entity that has requested access.  One way in which the\n\
    \   linkage between the request or identity and the AC can be achieved is\n  \
    \ the inclusion of a reference to a PKC within the AC and the use of\n   the private\
    \ key corresponding to the PKC for authentication within\n   the access request.\n\
    \   ACs may also be used in the context of a data origin authentication\n   service\
    \ and a non-repudiation service.  In these contexts, the\n   attributes contained\
    \ in the AC provide additional information about\n   the signing entity.  This\
    \ information can be used to make sure that\n   the entity is authorized to sign\
    \ the data.  This kind of checking\n   depends either on the context in which\
    \ the data is exchanged or on\n   the data that has been digitally signed.\n"
- title: 1.1 Delegation and AC chains
  contents:
  - "1.1 Delegation and AC chains\n   The X.509 standard [X.509-2000] defines authorization\
    \ as the\n   \"conveyance of privilege from one entity that holds such privilege,\n\
    \   to another entity\".  An AC is one authorization mechanism.\n   An ordered\
    \ sequence of ACs could be used to verify the authenticity\n   of a privilege\
    \ asserter's privilege.  In this way, chains or paths of\n   ACs could be employed\
    \ to delegate authorization.\n   Since the administration and processing associated\
    \ with such AC\n   chains is complex and the use of ACs in the Internet today\
    \ is quite\n   limited, this specification does NOT RECOMMEND the use of AC chains.\n\
    \   Other (future) specifications may address the use of AC chains.  This\n  \
    \ specification deals with the simple cases, where one authority issues\n   all\
    \ of the ACs for a particular set of attributes.  However, this\n   simplification\
    \ does not preclude the use of several different\n   authorities, each of which\
    \ manages a different set of attributes.\n   For example, group membership may\
    \ be included in one AC issued by one\n   authority, and security clearance may\
    \ be included in another AC\n   issued by another authority.\n   This means that\
    \ conformant implementations are only REQUIRED to be\n   able to process a single\
    \ AC at a time.  Processing of more than one\n   AC, one after another, may be\
    \ necessary.  Note however, that\n   validation of an AC MAY require validation\
    \ of a chain of PKCs, as\n   specified in [PKIXPROF].\n"
- title: 1.2 Attribute Certificate Distribution ("push" vs. "pull")
  contents:
  - "1.2 Attribute Certificate Distribution (\"push\" vs. \"pull\")\n   As discussed\
    \ above, ACs provide a mechanism to securely provide\n   authorization information\
    \ to, for example, access control decision\n   functions.  However, there are\
    \ a number of possible communication\n   paths for ACs.\n   In some environments,\
    \ it is suitable for a client to \"push\" an AC to\n   a server.  This means that\
    \ no new connections between the client and\n   server are required.  It also\
    \ means that no search burden is imposed\n   on servers, which improves performance\
    \ and that the AC verifier is\n   only presented with what it \"needs to know.\"\
    \  The \"push\" model is\n   especially suitable in inter-domain cases where the\
    \ client's rights\n   should be assigned within the client's \"home\" domain.\n\
    \   In other cases, it is more suitable for a client to simply\n   authenticate\
    \ to the server and for the server to request or \"pull\"\n   the client's AC\
    \ from an AC issuer or a repository.  A major benefit\n   of the \"pull\" model\
    \ is that it can be implemented without changes to\n   the client or to the client-server\
    \ protocol.  The \"pull\" model is\n   especially suitable for inter-domain cases\
    \ where the client's rights\n   should be assigned within the server's domain,\
    \ rather than within the\n   client's domain.\n   There are a number of possible\
    \ exchanges involving three entities:\n   the client, the server, and the AC issuer.\
    \  In addition, a directory\n   service or other repository for AC retrieval MAY\
    \ be supported.\n   Figure 1 shows an abstract view of the exchanges that may\
    \ involve\n   ACs.  This profile does not specify a protocol for these exchanges.\n\
    \      +--------------+\n      |              |        Server Acquisition\n  \
    \    |  AC issuer   +----------------------------+\n      |              |   \
    \                         |\n      +--+-----------+                          \
    \  |\n         |                                        |\n         | Client \
    \                                |\n         | Acquisition                   \
    \         |\n         |                                        |\n      +--+-----------+\
    \                         +--+------------+\n      |              |       AC \"\
    push\"         |               |\n      |   Client     +-------------------------+\
    \    Server     |\n      |              | (part of app. protocol) |          \
    \     |\n      +--+-----------+                         +--+------------+\n  \
    \       |                                        |\n         | Client        \
    \                         | Server\n         | Lookup        +--------------+\
    \         | Lookup\n         |               |              |         |\n    \
    \     +---------------+  Repository  +---------+\n                         | \
    \             |\n                         +--------------+\n                 \
    \    Figure 1: AC Exchanges\n"
- title: 1.3 Document Structure
  contents:
  - "1.3 Document Structure\n   Section 2 defines some terminology.  Section 3 specifies\
    \ the\n   requirements that this profile is intended to meet.  Section 4\n   contains\
    \ the profile of the X.509 AC.  Section 5 specifies rules for\n   AC validation.\
    \  Section 6 specifies rules for AC revocation checks.\n   Section 7 specifies\
    \ optional features which MAY be supported;\n   however, support for these features\
    \ is not required for conformance\n   to this profile.  Finally, appendices contain\
    \ the list of OIDs\n   required to support this specification and an ASN.1 module.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   For simplicity, we use the terms client and server in this\n\
    \   specification.  This is not intended to indicate that ACs are only to\n  \
    \ be used in client-server environments.  For example, ACs may be used\n   in\
    \ the S/MIME v3 context, where the mail user agent would be both a\n   \"client\"\
    \ and a \"server\" in the sense the terms are used here.\n   Term          Meaning\n\
    \   AA            Attribute Authority, the entity that issues the\n          \
    \       AC, synonymous in this specification with \"AC\n                 issuer\"\
    \n   AC            Attribute Certificate\n   AC user       any entity that parses\
    \ or processes an AC\n   AC verifier   any entity that checks the validity of\
    \ an AC and\n                 then makes use of the result\n   AC issuer     the\
    \ entity which signs the AC, synonymous in this\n                 specification\
    \ with \"AA\"\n   AC holder     the entity indicated (perhaps indirectly) in the\n\
    \                 holder field of the AC\n   Client        the entity which is\
    \ requesting the action for\n                 which authorization checks are to\
    \ be made\n   Proxying      In this specification, Proxying is used to mean\n\
    \                 the situation where an application server acts as\n        \
    \         an application client on behalf of a user.\n                 Proxying\
    \ here does not mean granting of authority.\n   PKC           Public Key Certificate\
    \ - uses the type ASN.1\n                 Certificate defined in X.509 and profiled\
    \ in RFC\n                 2459.  This (non-standard) acronym is used in order\n\
    \                 to avoid confusion about the term \"X.509\n                \
    \ certificate\".\n   Server        the entity which requires that the authorization\n\
    \                 checks are made\n"
- title: 3. Requirements
  contents:
  - "3. Requirements\n   This AC profile meets the following requirements.\n   Time/Validity\
    \ requirements:\n   1. Support for short-lived as well as long-lived ACs.  Typical\n\
    \      short-lived validity periods might be measured in hours, as\n      opposed\
    \ to months for PKCs.  Short validity periods allow ACs to\n      be useful without\
    \ a revocation mechanism.\n   Attribute Types:\n   2. Issuers of ACs should be\
    \ able to define their own attribute types\n      for use within closed domains.\n\
    \   3. Some standard attribute types, which can be contained within ACs,\n   \
    \   should be defined.  Examples include \"access identity,\" \"group,\"\n   \
    \   \"role,\" \"clearance,\" \"audit identity,\" and \"charging identity.\"\n\
    \   4. Standard attribute types should be defined in a manner that\n      permits\
    \ an AC verifier to distinguish between uses of the same\n      attribute in different\
    \ domains.  For example, the \"Administrators\n      group\" as defined by Baltimore\
    \ and the \"Administrators group\" as\n      defined by SPYRUS should be easily\
    \ distinguished.\n   Targeting of ACs:\n   5. It should be possible to \"target\"\
    \ an AC at one, or a small number\n      of, servers.  This means that a trustworthy\
    \ non-target server will\n      reject the AC for authorization decisions.\n \
    \  Push vs. Pull\n   6. ACs should be defined so that they can either be \"pushed\"\
    \ by the\n      client to the server, or \"pulled\" by the server from a repository\n\
    \      or other network service, including an online AC issuer.\n"
- title: 4. Attribute Certificate Profile
  contents:
  - "4. Attribute Certificate Profile\n   ACs may be used in a wide range of applications\
    \ and environments\n   covering a broad spectrum of interoperability goals and\
    \ a broader\n   spectrum of operational and assurance requirements.  The goal\
    \ of this\n   document is to establish a common baseline for generic applications\n\
    \   requiring broad interoperability and limited special purpose\n   requirements.\
    \  In particular, the emphasis will be on supporting the\n   use of attribute\
    \ certificates for informal Internet electronic mail,\n   IPSec, and WWW applications.\n\
    \   This section presents a profile for ACs that will foster\n   interoperability.\
    \  This section also defines some private extensions\n   for the Internet community.\n\
    \   While the ISO/IEC/ITU documents use the 1993 (or later) version of\n   ASN.1,\
    \ this document uses the 1988 ASN.1 syntax, as has been done for\n   PKCs [PKIXPROF].\
    \  The encoded certificates and extensions from either\n   ASN.1 version are bit-wise\
    \ identical.\n   Where maximum lengths for fields are specified, these lengths\
    \ refer\n   to the DER encoding and do not include the ASN.1 tag or length\n \
    \  fields.\n   Conforming implementations MUST support the profile specified in\
    \ this\n   section.\n"
- title: 4.1 X.509 Attribute Certificate Definition
  contents:
  - "4.1 X.509 Attribute Certificate Definition\n   X.509 contains the definition\
    \ of an AC given below.  All types that\n   are not defined in this document can\
    \ be found in [PKIXPROF].\n            AttributeCertificate ::= SEQUENCE {\n \
    \                acinfo               AttributeCertificateInfo,\n            \
    \     signatureAlgorithm   AlgorithmIdentifier,\n                 signatureValue\
    \       BIT STRING\n            }\n            AttributeCertificateInfo ::= SEQUENCE\
    \ {\n                 version              AttCertVersion -- version is v2,\n\
    \                 holder               Holder,\n                 issuer      \
    \         AttCertIssuer,\n                 signature            AlgorithmIdentifier,\n\
    \                 serialNumber         CertificateSerialNumber,\n            \
    \     attrCertValidityPeriod   AttCertValidityPeriod,\n                 attributes\
    \           SEQUENCE OF Attribute,\n                 issuerUniqueID       UniqueIdentifier\
    \ OPTIONAL,\n                 extensions           Extensions OPTIONAL\n     \
    \       }\n            AttCertVersion ::= INTEGER { v2(1) }\n            Holder\
    \ ::= SEQUENCE {\n                  baseCertificateID   [0] IssuerSerial OPTIONAL,\n\
    \                           -- the issuer and serial number of\n             \
    \              -- the holder's Public Key Certificate\n                  entityName\
    \          [1] GeneralNames OPTIONAL,\n                           -- the name\
    \ of the claimant or role\n                  objectDigestInfo    [2] ObjectDigestInfo\
    \ OPTIONAL\n                           -- used to directly authenticate the holder,\n\
    \                           -- for example, an executable\n            }\n   \
    \         ObjectDigestInfo ::= SEQUENCE {\n                 digestedObjectType\
    \  ENUMERATED {\n                         publicKey            (0),\n        \
    \                 publicKeyCert        (1),\n                         otherObjectTypes\
    \     (2) },\n                                 -- otherObjectTypes MUST NOT\n\
    \                                 -- be used in this profile\n               \
    \  otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n                 digestAlgorithm\
    \     AlgorithmIdentifier,\n                 objectDigest        BIT STRING\n\
    \            }\n            AttCertIssuer ::= CHOICE {\n                 v1Form\
    \   GeneralNames,  -- MUST NOT be used in this\n                             \
    \            -- profile\n                 v2Form   [0] V2Form     -- v2 only\n\
    \            }\n            V2Form ::= SEQUENCE {\n                 issuerName\
    \            GeneralNames  OPTIONAL,\n                 baseCertificateID     [0]\
    \ IssuerSerial  OPTIONAL,\n                 objectDigestInfo      [1] ObjectDigestInfo\
    \  OPTIONAL\n                   -- issuerName MUST be present in this profile\n\
    \                   -- baseCertificateID and objectDigestInfo MUST NOT\n     \
    \              -- be present in this profile\n            }\n            IssuerSerial\
    \  ::=  SEQUENCE {\n                 issuer         GeneralNames,\n          \
    \       serial         CertificateSerialNumber,\n                 issuerUID  \
    \    UniqueIdentifier OPTIONAL\n            }\n            AttCertValidityPeriod\
    \  ::= SEQUENCE {\n                 notBeforeTime  GeneralizedTime,\n        \
    \         notAfterTime   GeneralizedTime\n            }\n   Although the Attribute\
    \ syntax is defined in [PKIXPROF], we repeat\n   the definition here for convenience.\n\
    \            Attribute ::= SEQUENCE {\n                  type      AttributeType,\n\
    \                  values    SET OF AttributeValue\n                    -- at\
    \ least one value is required\n            }\n            AttributeType ::= OBJECT\
    \ IDENTIFIER\n            AttributeValue ::= ANY DEFINED BY AttributeType\n  \
    \ Implementers should note that the DER encoding (see [X.509-\n   1988],[X.208-1988])\
    \ of the SET OF values requires ordering of the\n   encodings of the values. \
    \ Though this issue arises with respect to\n   distinguished names, and has to\
    \ be handled by [PKIXPROF]\n   implementations, it is much more significant in\
    \ this context, since\n   the inclusion of multiple values is much more common\
    \ in ACs.\n"
- title: 4.2 Profile of Standard Fields
  contents:
  - "4.2 Profile of Standard Fields\n   GeneralName offers great flexibility.  To\
    \ achieve interoperability,\n   in spite of this flexibility, this profile imposes\
    \ constraints on the\n   use of GeneralName.\n   Conforming implementations MUST\
    \ be able to support the dNSName,\n   directoryName, uniformResourceIdentifier,\
    \ and iPAddress options.\n   This is compatible with the GeneralName requirements\
    \ in [PKIXPROF]\n   (mainly in section 4.2.1.7).\n   Conforming implementations\
    \ MUST NOT use the x400Address,\n   ediPartyName, or registeredID options.\n \
    \  Conforming implementations MAY use the otherName option to convey\n   name\
    \ forms defined in Internet Standards.  For example, Kerberos\n   [KRB] format\
    \ names can be encoded into the otherName, using a\n   Kerberos 5 principal name\
    \ OID and a SEQUENCE of the Realm and the\n   PrincipalName.\n"
- title: 4.2.1   Version
  contents:
  - "4.2.1   Version\n   The version field MUST have the value of v2.  That is, the\
    \ version\n   field is present in the DER encoding.\n   Note: This version (v2)\
    \ is not backwards compatible with the previous\n   attribute certificate definition\
    \ (v1) from the 1997 X.509 standard\n   [X.509-1997], but is compatible with the\
    \ v2 definition from X.509\n   (2000) [X.509-2000].\n"
- title: 4.2.2   Holder
  contents:
  - "4.2.2   Holder\n   The Holder field is a SEQUENCE allowing three different (optional)\n\
    \   syntaxes: baseCertificateID, entityName and objectDigestInfo.  Where\n   only\
    \ one option is present, the meaning of the Holder field is clear.\n   However,\
    \ where more than one option is used, there is a potential for\n   confusion as\
    \ to which option is \"normative\", which is a \"hint\" etc.\n   Since the correct\
    \ position is not clear from [X.509-2000], this\n   specification RECOMMENDS that\
    \ only one of the options be used in any\n   given AC.\n   For any environment\
    \ where the AC is passed in an authenticated\n   message or session and where\
    \ the authentication is based on the use\n   of an X.509 PKC, the holder field\
    \ SHOULD use the baseCertificateID.\n   With the baseCertificateID option, the\
    \ holder's PKC serialNumber and\n   issuer MUST be identical to the AC holder\
    \ field.  The PKC issuer MUST\n   have a non-empty distinguished name which is\
    \ to be present as the\n   single value of the holder.baseCertificateID.issuer\
    \ construct in the\n   directoryName field.  The AC holder.baseCertificateID.issuerUID\
    \ field\n   MUST only be used if the holder's PKC contains an issuerUniqueID\n\
    \   field.  If both the AC holder.baseCertificateID.issuerUID and the PKC\n  \
    \ issuerUniqueID fields are present, the same value MUST be present in\n   both\
    \ fields.  Thus, the baseCertificateID is only usable with PKC\n   profiles (like\
    \ [PKIXPROF]) which mandate that the PKC issuer field\n   contain a non-empty\
    \ distinguished name value.\n   Note: An empty distinguished name is a distinguished\
    \ name where the\n   SEQUENCE OF relative distinguished names is of zero length.\
    \  In a DER\n   encoding, this has the value '3000'H.\n   If the holder field\
    \ uses the entityName option and the underlying\n   authentication is based on\
    \ a PKC, the entityName MUST be the same as\n   the PKC subject field or one of\
    \ the values of the PKC subjectAltName\n   field extension (if present).  Note\
    \ that [PKIXPROF] mandates that the\n   subjectAltName extension be present if\
    \ the PKC subject is an empty\n   distinguished name.  See the security considerations\
    \ section which\n   mentions some name collision problems that may arise when\
    \ using the\n   entityName option.\n   In any other case where the holder field\
    \ uses the entityName option,\n   only one name SHOULD be present.\n   Implementations\
    \ conforming to this profile are not required to\n   support the use of the objectDigest\
    \ field.  However, section 7.3\n   specifies how this optional feature MAY be\
    \ used.\n   Any protocol conforming to this profile SHOULD specify which AC\n\
    \   holder option is to be used and how this fits with the supported\n   authentication\
    \ schemes defined in that protocol.\n"
- title: 4.2.3   Issuer
  contents:
  - "4.2.3   Issuer\n   ACs conforming to this profile MUST use the v2Form choice,\
    \ which MUST\n   contain one and only one GeneralName in the issuerName, which\
    \ MUST\n   contain a non-empty distinguished name in the directoryName field.\n\
    \   This means that all AC issuers MUST have non-empty distinguished\n   names.\
    \  ACs conforming to this profile MUST omit the\n   baseCertificateID and objectDigestInfo\
    \ fields.\n   Part of the reason for the use of the v2Form containing only an\n\
    \   issuerName is that it means that the AC issuer does not have to know\n   which\
    \ PKC the AC verifier will use for it (the AC issuer).  Using the\n   baseCertificateID\
    \ field to reference the AC issuer would mean that\n   the AC verifier would have\
    \ to trust the PKC that the AC issuer chose\n   (for itself) at AC creation time.\n"
- title: 4.2.4   Signature
  contents:
  - "4.2.4   Signature\n   Contains the algorithm identifier used to validate the\
    \ AC signature.\n   This MUST be one of the signing algorithms defined in [PKIXALGS].\n\
    \   Conforming implementations MUST honor all MUST/SHOULD/MAY signing\n   algorithm\
    \ statements specified in [PKIXALGS].\n"
- title: 4.2.5   Serial Number
  contents:
  - "4.2.5   Serial Number\n   For any conforming AC, the issuer/serialNumber pair\
    \ MUST form a\n   unique combination, even if ACs are very short-lived.\n   AC\
    \ issuers MUST force the serialNumber to be a positive integer, that\n   is, the\
    \ sign bit in the DER encoding of the INTEGER value MUST be\n   zero - this can\
    \ be done by adding a leading (leftmost) '00'H octet if\n   necessary.  This removes\
    \ a potential ambiguity in mapping between a\n   string of octets and an integer\
    \ value.\n   Given the uniqueness and timing requirements above, serial numbers\n\
    \   can be expected to contain long integers.  AC users MUST be able to\n   handle\
    \ serialNumber values longer than 4 octets.  Conformant ACs MUST\n   NOT contain\
    \ serialNumber values longer than 20 octets.\n   There is no requirement that\
    \ the serial numbers used by any AC issuer\n   follow any particular ordering.\
    \  In particular, they need not be\n   monotonically increasing with time.  Each\
    \ AC issuer MUST ensure that\n   each AC that it issues contains a unique serial\
    \ number.\n"
- title: 4.2.6   Validity Period
  contents:
  - "4.2.6   Validity Period\n   The attrCertValidityPeriod (a.k.a. validity) field\
    \ specifies the\n   period for which the AC issuer certifies that the binding\
    \ between the\n   holder and the attributes fields will be valid.\n   The generalized\
    \ time type, GeneralizedTime, is a standard ASN.1 type\n   for variable precision\
    \ representation of time.  The GeneralizedTime\n   field can optionally include\
    \ a representation of the time\n   differential between the local time zone and\
    \ Greenwich Mean Time.\n   For the purposes of this profile, GeneralizedTime values\
    \ MUST be\n   expressed in Coordinated universal time (UTC) (also known as\n \
    \  Greenwich Mean Time or Zulu)) and MUST include seconds (i.e., times\n   are\
    \ YYYYMMDDHHMMSSZ), even when the number of seconds is zero.\n   GeneralizedTime\
    \ values MUST NOT include fractional seconds.\n   (Note: this is the same as specified\
    \ in [PKIXPROF], section\n   4.1.2.5.2.)\n   AC users MUST be able to handle an\
    \ AC which, at the time of\n   processing, has parts of its validity period or\
    \ all its validity\n   period in the past or in the future (a post-dated AC).\
    \  This is valid\n   for some applications, such as backup.\n"
- title: 4.2.7   Attributes
  contents:
  - "4.2.7   Attributes\n   The attributes field gives information about the AC holder.\
    \  When the\n   AC is used for authorization, this will often contain a set of\n\
    \   privileges.\n   The attributes field contains a SEQUENCE OF Attribute.  Each\n\
    \   Attribute MAY contain a SET OF values.  For a given AC, each\n   AttributeType\
    \ OBJECT IDENTIFIER in the sequence MUST be unique.  That\n   is, only one instance\
    \ of each attribute can occur in a single AC, but\n   each instance can be multi-valued.\n\
    \   AC users MUST be able to handle multiple values for all attribute\n   types.\n\
    \   An AC MUST contain at least one attribute.  That is, the SEQUENCE OF\n   Attributes\
    \ MUST NOT be of zero length.\n   Some standard attribute types are defined in\
    \ section 4.4.\n"
- title: 4.2.8   Issuer Unique Identifier
  contents:
  - "4.2.8   Issuer Unique Identifier\n   This field MUST NOT be used unless it is\
    \ also used in the AC issuer's\n   PKC, in which case it MUST be used.  Note that\
    \ [PKIXPROF] states that\n   this field SHOULD NOT be used by conforming CAs,\
    \ but that\n   applications SHOULD be able to parse PKCs containing the field.\n"
- title: 4.2.9   Extensions
  contents:
  - "4.2.9   Extensions\n   The extensions field generally gives information about\
    \ the AC as\n   opposed to information about the AC holder.\n   An AC that has\
    \ no extensions conforms to the profile; however,\n   section 4.3 defines the\
    \ extensions that MAY be used with this\n   profile, and whether or not they may\
    \ be marked critical.  If any\n   other critical extension is used, the AC does\
    \ not conform to this\n   profile.  However, if any other non-critical extension\
    \ is used, the\n   AC does conform to this profile.\n   The extensions defined\
    \ for ACs provide methods for associating\n   additional attributes with holders.\
    \  This profile also allows\n   communities to define private extensions to carry\
    \ information unique\n   to those communities.  Each extension in an AC may be\
    \ designated as\n   critical or non-critical.  An AC using system MUST reject\
    \ an AC if it\n   encounters a critical extension it does not recognize; however,\
    \ a\n   non-critical extension may be ignored if it is not recognized.\n   Section\
    \ 4.3 presents recommended extensions used within Internet ACs\n   and standard\
    \ locations for information.  Communities may elect to use\n   additional extensions;\
    \ however, caution should be exercised in\n   adopting any critical extensions\
    \ in ACs which might prevent use in a\n   general context.\n"
- title: 4.3 Extensions
  contents:
  - '4.3 Extensions

    '
- title: 4.3.1   Audit Identity
  contents:
  - "4.3.1   Audit Identity\n   In some circumstances, it is required (e.g. by data\
    \ protection/data\n   privacy legislation) that audit trails not contain records\
    \ which\n   directly identify individuals.  This circumstance may make the use\
    \ of\n   the AC holder field unsuitable for use in audit trails.\n   To allow\
    \ for such cases, an AC MAY contain an audit identity\n   extension.  Ideally\
    \ it SHOULD be infeasible to derive the AC holder's\n   identity from the audit\
    \ identity value without the cooperation of the\n   AC issuer.\n   The value of\
    \ the audit identity, along with the AC issuer/serial,\n   SHOULD then be used\
    \ for audit/logging purposes.  If the value of the\n   audit identity is suitably\
    \ chosen, a server/service administrator can\n   use audit trails to track the\
    \ behavior of an AC holder without being\n   able to identify the AC holder.\n\
    \   The server/service administrator in combination with the AC issuer\n   MUST\
    \ be able to identify the AC holder in cases where misbehavior is\n   detected.\
    \  This means that the AC issuer MUST be able to determine\n   the actual identity\
    \ of the AC holder from the audit identity.\n   Of course, auditing could be based\
    \ on the AC issuer/serial pair;\n   however, this method does not allow tracking\
    \ of the same AC holder\n   with multiple ACs.  Thus, an audit identity is only\
    \ useful if it\n   lasts for longer than the typical AC lifetime.  Auditing could\
    \ also\n   be based on the AC holder's PKC issuer/serial; however, this will\n\
    \   often allow the server/service administrator to identify the AC\n   holder.\n\
    \   As the AC verifier might otherwise use the AC holder or some other\n   identifying\
    \ value for audit purposes, this extension MUST be critical\n   when used.\n \
    \  Protocols that use ACs will often expose the identity of the AC\n   holder\
    \ in the bits on-the-wire.  In such cases, an opaque audit\n   identity does not\
    \ make use of the AC anonymous; it simply ensures\n   that the ensuing audit trails\
    \ do not contain identifying information.\n   The value of an audit identity MUST\
    \ be longer than zero octets.  The\n   value of an audit identity MUST NOT be\
    \ longer than 20 octets.\n      name           id-pe-ac-auditIdentity\n      OID\
    \            { id-pe 4 }\n      syntax         OCTET STRING\n      criticality\
    \    MUST be TRUE\n"
- title: 4.3.2   AC Targeting
  contents:
  - "4.3.2   AC Targeting\n   To target an AC, the target information extension, imported\
    \ from\n   [X.509-2000], MAY be used to specify a number of servers/services.\n\
    \   The intent is that the AC SHOULD only be usable at the specified\n   servers/services.\
    \  An (honest) AC verifier who is not amongst the\n   named servers/services MUST\
    \ reject the AC.\n   If this extension is not present, the AC is not targeted\
    \ and may be\n   accepted by any server.\n   In this profile, the targeting information\
    \ simply consists of a list\n   of named targets or groups.\n   The following\
    \ syntax is used to represent the targeting information:\n            Targets\
    \ ::= SEQUENCE OF Target\n            Target  ::= CHOICE {\n              targetName\
    \          [0] GeneralName,\n              targetGroup         [1] GeneralName,\n\
    \              targetCert          [2] TargetCert\n            }\n           \
    \ TargetCert  ::= SEQUENCE {\n              targetCertificate    IssuerSerial,\n\
    \              targetName           GeneralName OPTIONAL,\n              certDigestInfo\
    \       ObjectDigestInfo OPTIONAL\n            }\n   The targetCert CHOICE within\
    \ the Target structure is only present to\n   allow future compatibility with\
    \ [X.509-2000] and MUST NOT be used.\n   The targets check passes if the current\
    \ server (recipient) is one of\n   the targetName fields in the Targets SEQUENCE,\
    \ or if the current\n   server is a member of one of the targetGroup fields in\
    \ the Targets\n   SEQUENCE.  In this case, the current server is said to \"match\"\
    \ the\n   targeting extension.\n   How the membership of a target within a targetGroup\
    \ is determined is\n   not defined here.  It is assumed that any given target\
    \ \"knows\" the\n   names of the targetGroups to which it belongs or can otherwise\n\
    \   determine its membership.  For example, the targetGroup specifies a\n   DNS\
    \ domain, and the AC verifier knows the DNS domain to which it\n   belongs.  For\
    \ another example, the targetGroup specifies \"PRINTERS,\"\n   and the AC verifier\
    \ knows whether or not it is a printer or print\n   server.\n   Note: [X.509-2000]\
    \ defines the extension syntax as a \"SEQUENCE OF\n   Targets\".  Conforming AC\
    \ issuer implementations MUST only produce one\n   \"Targets\" element.  Confirming\
    \ AC users MUST be able to accept a\n   \"SEQUENCE OF Targets\".  If more than\
    \ one Targets element is found in\n   an AC, the extension MUST be treated as\
    \ if all Target elements had\n   been found within one Targets element.\n    \
    \  name           id-ce-targetInformation\n      OID            { id-ce 55 }\n\
    \      syntax         SEQUENCE OF Targets\n      criticality    MUST be TRUE\n"
- title: 4.3.3   Authority Key Identifier
  contents:
  - "4.3.3   Authority Key Identifier\n   The authorityKeyIdentifier extension, as\
    \ profiled in [PKIXPROF], MAY\n   be used to assist the AC verifier in checking\
    \ the signature of the\n   AC.  The [PKIXPROF] description should be read as if\
    \ \"CA\" meant \"AC\n   issuer.\"  As with PKCs, this extension SHOULD be included\
    \ in ACs.\n   Note: An AC, where the issuer field used the baseCertificateID\n\
    \   CHOICE, would not need an authorityKeyIdentifier extension, as it is\n   explicitly\
    \ linked to the key in the referred certificate.  However,\n   as this profile\
    \ states (in section 4.2.3), ACs MUST use the v2Form\n   with issuerName CHOICE,\
    \ this duplication does not arise.\n      name           id-ce-authorityKeyIdentifier\n\
    \      OID            { id-ce 35 }\n      syntax         AuthorityKeyIdentifier\n\
    \      criticality    MUST be FALSE\n"
- title: 4.3.4   Authority Information Access
  contents:
  - "4.3.4   Authority Information Access\n   The authorityInformationAccess extension,\
    \ as defined in [PKIXPROF],\n   MAY be used to assist the AC verifier in checking\
    \ the revocation\n   status of the AC.  Support for the id-ad-caIssuers accessMethod\
    \ is\n   NOT REQUIRED by this profile since AC chains are not expected.\n   The\
    \ following accessMethod is used to indicate that revocation status\n   checking\
    \ is provided for this AC, using the OCSP protocol defined in\n   [OCSP]:\n  \
    \    id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }\n   The accessLocation MUST\
    \ contain a URI, and the URI MUST contain an\n   HTTP URL [URL] that specifies\
    \ the location of an OCSP responder.  The\n   AC issuer MUST, of course, maintain\
    \ an OCSP responder at this\n   location.\n      name           id-ce-authorityInfoAccess\n\
    \      OID            { id-pe 1 }\n      syntax         AuthorityInfoAccessSyntax\n\
    \      criticality    MUST be FALSE\n"
- title: 4.3.5   CRL Distribution Points
  contents:
  - "4.3.5   CRL Distribution Points\n   The crlDistributionPoints extension, as profiled\
    \ in [PKIXPROF], MAY\n   be used to assist the AC verifier in checking the revocation\
    \ status\n   of the AC.  See section 6 for details on revocation.\n   If the crlDistributionPoints\
    \ extension is present, then exactly one\n   distribution point MUST be present.\
    \  The crlDistributionPoints\n   extension MUST use the DistributionPointName\
    \ option, which MUST\n   contain a fullName, which MUST contain a single name\
    \ form.  That name\n   MUST contain either a distinguished name or a URI.  The\
    \ URI MUST be\n   either an HTTP URL or an LDAP URL [URL].\n      name       \
    \    id-ce-cRLDistributionPoints\n      OID            { id-ce 31 }\n      syntax\
    \         CRLDistPointsSyntax\n      criticality    MUST be FALSE\n"
- title: 4.3.6   No Revocation Available
  contents:
  - "4.3.6   No Revocation Available\n   The noRevAvail extension, defined in [X.509-2000],\
    \ allows an AC\n   issuer to indicate that no revocation information will be made\n\
    \   available for this AC.\n   This extension MUST be non-critical.  An AC verifier\
    \ that does not\n   understand this extension might be able to find a revocation\
    \ list\n   from the AC issuer, but the revocation list will never include an\n\
    \   entry for the AC.\n      name           id-ce-noRevAvail\n      OID      \
    \      { id-ce 56 }\n      syntax         NULL (i.e. '0500'H is the DER encoding)\n\
    \      criticality    MUST be FALSE\n"
- title: 4.4 Attribute Types
  contents:
  - "4.4 Attribute Types\n   Some of the attribute types defined below make use of\
    \ the\n   IetfAttrSyntax type, also defined below.  The reasons for using this\n\
    \   type are:\n   1. It allows a separation between the AC issuer and the attribute\n\
    \      policy authority.  This is useful for situations where a single\n     \
    \ policy authority (e.g. an organization) allocates attribute\n      values, but\
    \ where multiple AC issuers are deployed for performance\n      or other reasons.\n\
    \   2. The syntaxes allowed for values are restricted to OCTET STRING,\n     \
    \ OBJECT IDENTIFIER, and UTF8String, which significantly reduces the\n      complexity\
    \ associated with matching more general syntaxes.  All\n      multi-valued attributes\
    \ using this syntax are restricted so that\n      each value MUST use the same\
    \ choice of value syntax.  For example,\n      AC issuers must not use one value\
    \ with an oid and a second value\n      with a string.\n               IetfAttrSyntax\
    \ ::= SEQUENCE {\n                    policyAuthority [0] GeneralNames    OPTIONAL,\n\
    \                    values          SEQUENCE OF CHOICE {\n                  \
    \                octets    OCTET STRING,\n                                  oid\
    \       OBJECT IDENTIFIER,\n                                  string    UTF8String\n\
    \                   }\n               }\n   In the descriptions below, each attribute\
    \ type is either tagged\n   \"Multiple Allowed\" or \"One Attribute value only;\
    \ multiple values\n   within the IetfAttrSyntax\".  This refers to the SET OF\n\
    \   AttributeValues; the AttributeType still only occurs once, as\n   specified\
    \ in section 4.2.7.\n"
- title: 4.4.1   Service Authentication Information
  contents:
  - "4.4.1   Service Authentication Information\n   The SvceAuthInfo attribute identifies\
    \ the AC holder to the\n   server/service by a name, and the attribute MAY include\
    \ optional\n   service specific authentication information.  Typically this will\n\
    \   contain a username/password pair for a \"legacy\" application.\n   This attribute\
    \ provides information that can be presented by the AC\n   verifier to be interpreted\
    \ and authenticated by a separate\n   application within the target system.  Note\
    \ that this is a different\n   use to that intended for the accessIdentity attribute\
    \ in 4.4.2 below.\n   This attribute type will typically be encrypted when the\
    \ authInfo\n   field contains sensitive information, such as a password.\n   \
    \   name      id-aca-authenticationInfo\n      OID       { id-aca 1 }\n      Syntax\
    \    SvceAuthInfo\n      values:   Multiple allowed\n           SvceAuthInfo ::=\
    \    SEQUENCE {\n                service   GeneralName,\n                ident\
    \     GeneralName,\n                authInfo  OCTET STRING OPTIONAL\n        \
    \   }\n"
- title: 4.4.2   Access Identity
  contents:
  - "4.4.2   Access Identity\n   The accessIdentity attribute identifies the AC holder\
    \ to the\n   server/service.  For this attribute the authInfo field MUST NOT be\n\
    \   present.\n   This attribute is intended to be used to provide information\
    \ about\n   the AC holder, that can be used by the AC verifier (or a larger\n\
    \   system of which the AC verifier is a component) to authorize the\n   actions\
    \ of the AC holder within the AC verifier's system.  Note that\n   this is a different\
    \ use to that intended for the svceAuthInfo\n   attribute described in 4.4.1 above.\n\
    \      name      id-aca-accessIdentity\n      OID       { id-aca 2 }\n      syntax\
    \    SvceAuthInfo\n      values:   Multiple allowed\n"
- title: 4.4.3   Charging Identity
  contents:
  - "4.4.3   Charging Identity\n   The chargingIdentity attribute identifies the AC\
    \ holder for charging\n   purposes.  In general, the charging identity will be\
    \ different from\n   other identities of the holder.  For example, the holder's\
    \ company\n   may be charged for service.\n      name      id-aca-chargingIdentity\n\
    \      OID       { id-aca 3 }\n      syntax    IetfAttrSyntax\n      values: \
    \  One Attribute value only; multiple values within the\n                IetfAttrSyntax\n"
- title: 4.4.4   Group
  contents:
  - "4.4.4   Group\n   The group attribute carries information about group memberships\
    \ of\n   the AC holder.\n      name      id-aca-group\n      OID       { id-aca\
    \ 4 }\n      syntax    IetfAttrSyntax\n      values:   One Attribute value only;\
    \ multiple values within the\n                IetfAttrSyntax\n"
- title: 4.4.5   Role
  contents:
  - "4.4.5   Role\n   The role attribute, specified in [X.509-2000], carries information\n\
    \   about role allocations of the AC holder.\n   The syntax used for this attribute\
    \ is:\n         RoleSyntax ::= SEQUENCE {\n                 roleAuthority   [0]\
    \ GeneralNames OPTIONAL,\n                 roleName        [1] GeneralName\n \
    \        }\n   The roleAuthority field MAY be used to specify the issuing authority\n\
    \   for the role specification certificate.  There is no requirement that\n  \
    \ a role specification certificate necessarily exists for the\n   roleAuthority.\
    \  This differs from [X.500-2000], where the\n   roleAuthority field is assumed\
    \ to name the issuer of a role\n   specification certificate.  For example, to\
    \ distinguish the\n   administrator role as defined by \"Baltimore\" from that\
    \ defined by\n   \"SPYRUS\", one could put the value \"urn:administrator\" in\
    \ the roleName\n   field and the value \"Baltimore\" or \"SPYRUS\" in the roleAuthority\n\
    \   field.\n   The roleName field MUST be present, and roleName MUST use the\n\
    \   uniformResourceIdentifier CHOICE of the GeneralName.\n      name      id-at-role\n\
    \      OID       { id-at 72 }\n      syntax    RoleSyntax\n      values:   Multiple\
    \ allowed\n"
- title: 4.4.6   Clearance
  contents:
  - "4.4.6   Clearance\n   The clearance attribute, specified in [X.501-1993], carries\
    \ clearance\n   (associated with security labeling) information about the AC holder.\n\
    \   The policyId field is used to identify the security policy to which\n   the\
    \ clearance relates.  The policyId indicates the semantics of the\n   classList\
    \ and securityCategories fields.\n   This specification includes the classList\
    \ field exactly as it is\n   specified in [X.501-1993].  Additional security classification\n\
    \   values, and their position in the classification hierarchy, may be\n   defined\
    \ by a security policy as a local matter or by bilateral\n   agreement.  The basic\
    \ security classification hierarchy is, in\n   ascending order: unmarked, unclassified,\
    \ restricted, confidential,\n   secret, and top-secret.\n   An organization can\
    \ develop its own security policy that defines\n   security classification values\
    \ and their meanings.  However, the BIT\n   STRING positions 0 through 5 are reserved\
    \ for the basic security\n   classification hierarchy.\n   If present, the SecurityCategory\
    \ field provides further authorization\n   information.  The security policy identified\
    \ by the policyId field\n   indicates the syntaxes that are allowed to be present\
    \ in the\n   securityCategories SET.  An OBJECT IDENTIFIER identifies each of\
    \ the\n   allowed syntaxes.  When one of these syntaxes is present in the\n  \
    \ securityCategories SET, the OBJECT IDENTIFIER associated with that\n   syntax\
    \ is carried in the SecurityCategory.type field.\n            Clearance  ::= \
    \ SEQUENCE {\n                 policyId  [0] OBJECT IDENTIFIER,\n            \
    \     classList [1] ClassList DEFAULT {unclassified},\n                 securityCategories\n\
    \                           [2] SET OF SecurityCategory OPTIONAL\n           \
    \ }\n            ClassList  ::=  BIT STRING {\n                 unmarked     \
    \  (0),\n                 unclassified   (1),\n                 restricted   \
    \  (2)\n                 confidential   (3),\n                 secret        \
    \ (4),\n                 topSecret      (5)\n            }\n            SecurityCategory\
    \ ::= SEQUENCE {\n                 type      [0]  IMPLICIT OBJECT IDENTIFIER,\n\
    \                 value     [1]  ANY DEFINED BY type\n            }\n        \
    \    -- This is the same as the original syntax which was defined\n          \
    \  -- using the MACRO construct, as follows:\n            -- SecurityCategory\
    \ ::= SEQUENCE {\n            --      type      [0]  IMPLICIT SECURITY-CATEGORY,\n\
    \            --      value     [1]  ANY DEFINED BY type\n            -- }\n  \
    \          --\n            -- SECURITY-CATEGORY MACRO  ::=\n            -- BEGIN\n\
    \            -- TYPE NOTATION ::= type | empty\n            -- VALUE NOTATION\
    \ ::= value (VALUE OBJECT IDENTIFIER)\n            -- END\n       name      {\
    \ id-at-clearance }\n       OID       { joint-iso-ccitt(2) ds(5) module(1)\n \
    \                  selected-attribute-types(5) clearance (55) }\n       syntax\
    \    Clearance - imported from [X.501-1993]\n       values    Multiple allowed\n"
- title: 4.5 Profile of AC issuer's PKC
  contents:
  - "4.5 Profile of AC issuer's PKC\n   The AC issuer's PKC MUST conform to [PKIXPROF],\
    \ and the keyUsage\n   extension in the PKC MUST NOT explicitly indicate that\
    \ the AC\n   issuer's public key cannot be used to validate a digital signature.\n\
    \   In order to avoid confusion regarding serial numbers and revocations,\n  \
    \ an AC issuer MUST NOT also be a PKC Issuer.  That is, an AC issuer\n   cannot\
    \ be a CA as well.  So, the AC issuer's PKC MUST NOT have a\n   basicConstraints\
    \ extension with the cA BOOLEAN set to TRUE.\n"
- title: 5. Attribute Certificate Validation
  contents:
  - "5. Attribute Certificate Validation\n   This section describes a basic set of\
    \ rules that all valid ACs MUST\n   satisfy.  Some additional checks are also\
    \ described which AC\n   verifiers MAY choose to implement.\n   To be valid an\
    \ AC MUST satisfy all of the following:\n   1. Where the holder uses a PKC to\
    \ authenticate to the AC verifier,\n      the AC holder's PKC MUST be found, and\
    \ the entire certification\n      path of that PKC MUST be verified in accordance\
    \ with [PKIXPROF].\n      As noted in the security considerations section, if\
    \ some other\n      authentication scheme is used, AC verifiers need to be very\n\
    \      careful mapping the identities (authenticated identity, holder\n      field)\
    \ involved.\n   2. The AC signature must be cryptographically correct, and the\
    \ AC\n      issuer's entire PKC certification path MUST be verified in\n     \
    \ accordance with [PKIXPROF].\n   3. The AC issuer's PKC MUST also conform to\
    \ the profile specified in\n      section 4.5 above.\n   4. The AC issuer MUST\
    \ be directly trusted as an AC issuer (by\n      configuration or otherwise).\n\
    \   5. The time for which the AC is being evaluated MUST be within the AC\n  \
    \    validity.  If the evaluation time is equal to either notBeforeTime\n    \
    \  or notAfterTime, then the AC is timely and this check succeeds.\n      Note\
    \ that in some applications, the evaluation time MAY not be the\n      same as\
    \ the current time.\n   6. The AC targeting check MUST pass as specified in section\
    \ 4.3.2.\n   7. If the AC contains an unsupported critical extension, the AC MUST\n\
    \      be rejected.\n   Support for an extension in this context means:\n   1.\
    \ The AC verifier MUST be able to parse the extension value.\n   2. Where the\
    \ extension value SHOULD cause the AC to be rejected, the\n      AC verifier MUST\
    \ reject the AC.\n   Additional Checks:\n   1. The AC MAY be rejected on the basis\
    \ of further AC verifier\n      configuration.  For example, an AC verifier may\
    \ be configured to\n      reject ACs which contain or lack certain attributes.\n\
    \   2. If the AC verifier provides an interface that allows applications\n   \
    \   to query the contents of the AC, then the AC verifier MAY filter\n      the\
    \ attributes from the AC on the basis of configured information.\n      For example,\
    \ an AC verifier might be configured not to return\n      certain attributes to\
    \ certain servers.\n"
- title: 6. Revocation
  contents:
  - "6. Revocation\n   In many environments, the validity period of an AC is less\
    \ than the\n   time required to issue and distribute revocation information.\n\
    \   Therefore, short-lived ACs typically do not require revocation\n   support.\
    \  However, long-lived ACs and environments where ACs enable\n   high value transactions\
    \ MAY require revocation support.\n   Two revocation schemes are defined, and\
    \ the AC issuer should elect\n   the one that is best suited to the environment\
    \ in which the AC will\n   be employed.\n   \"Never revoke\" scheme:\n      ACs\
    \ may be marked so that the relying party understands that no\n      revocation\
    \ status information will be made available.  The\n      noRevAvail extension\
    \ is defined in section 4.3.6, and the\n      noRevAvail extension MUST be present\
    \ in the AC to indicate use of\n      this scheme.\n      Where no noRevAvail\
    \ is present, the AC issuer is implicitly\n      stating that revocation status\
    \ checks are supported, and some\n      revocation method MUST be provided to\
    \ allow AC verifiers to\n      establish the revocation status of the AC.\n  \
    \ \"Pointer in AC\" scheme:\n      ACs may \"point\" to sources of revocation\
    \ status information, using\n      either an authorityInfoAccess extension or\
    \ a crlDistributionPoints\n      extension within the AC.\n   For AC users, the\
    \ \"never revoke\" scheme MUST be supported, and the\n   \"pointer in AC\" scheme\
    \ SHOULD be supported.  If only the \"never\n   revoke\" scheme is supported,\
    \ then all ACs that do not contain a\n   noRevAvail extension, MUST be rejected.\n\
    \   For AC issuers, the \"never revoke\" scheme MUST be supported.  If all\n \
    \  ACs that will ever be issued by that AC issuer, contains a noRevAvail\n   extension,\
    \ the \"pointer in AC\" scheme need not be supported.  If any\n   AC can be issued\
    \ that does not contain the noRevAvail extension, the\n   \"pointer in AC\" scheme\
    \ MUST be supported.\n   An AC MUST NOT contain both a noRevAvail and a \"pointer\
    \ in AC\".\n   An AC verifier MAY use any source for AC revocation status\n  \
    \ information.\n"
- title: 7. Optional Features
  contents:
  - "7. Optional Features\n   This section specifies features that MAY be implemented.\
    \  Conformance\n   to this profile does NOT require support for these features;\
    \ however,\n   if these features are offered, they MUST be offered as described\n\
    \   below.\n"
- title: 7.1 Attribute Encryption
  contents:
  - "7.1 Attribute Encryption\n   Where an AC will be carried in clear within an application\
    \ protocol\n   or where an AC contains some sensitive information like a legacy\n\
    \   application username/password, then encryption of AC attributes MAY\n   be\
    \ needed.\n   When a set of attributes are to be encrypted within an AC, the\n\
    \   Cryptographic Message Syntax, EnvelopedData structure [CMS] is used\n   to\
    \ carry the ciphertext and associated per-recipient keying\n   information.\n\
    \   This type of attribute encryption is targeted.  Before the AC is\n   signed,\
    \ the attributes are encrypted for a set of predetermined\n   recipients.\n  \
    \ The AC then contains the ciphertext inside its signed data.  The\n   EnvelopedData\
    \ (id-envelopedData) ContentType is used, and the content\n   field will contain\
    \ the EnvelopedData type.\n   The ciphertext is included in the AC as the value\
    \ of an encAttrs\n   attribute.  Only one encAttrs attribute can be present in\
    \ an AC;\n   however, the encAttrs attribute MAY be multi-valued, and each of\
    \ its\n   values will contain an independent EnvelopedData.\n   Each value can\
    \ contain a set of attributes (each possibly a multi-\n   valued attribute) encrypted\
    \ for a set of predetermined recipients.\n   The cleartext that is encrypted has\
    \ the type:\n      ACClearAttrs ::= SEQUENCE {\n           acIssuer  GeneralName,\n\
    \           acSerial  INTEGER,\n           attrs     SEQUENCE OF Attribute\n \
    \     }\n   The DER encoding of the ACClearAttrs structure is used as the\n  \
    \ encryptedContent field of the EnvelopedData.  The DER encoding MUST\n   be embedded\
    \ in an OCTET STRING.\n   The acIssuer and acSerial fields are present to prevent\
    \ ciphertext\n   stealing.  When an AC verifier has successfully decrypted an\n\
    \   encrypted attribute, it MUST then check that the AC issuer and\n   serialNumber\
    \ fields contain the same values.  This prevents a\n   malicious AC issuer from\
    \ copying ciphertext from another AC (without\n   knowing its corresponding plaintext).\n\
    \   The procedure for an AC issuer when encrypting attributes is\n   illustrated\
    \ by the following (any other procedure that gives the same\n   result MAY be\
    \ used):\n      1.   Identify the sets of attributes that are to be encrypted\
    \ for\n           each set of recipients.\n      2.   For each attribute set which\
    \ is to be encrypted:\n         2.1. Create an EnvelopedData structure for the\
    \ data for this\n              set of recipients.\n         2.2. Encode the ContentInfo\
    \ containing the EnvelopedData as a\n              value of the encAttrs attribute.\n\
    \         2.3. Ensure the cleartext attributes are not present in the\n      \
    \        to-be-signed AC.\n      3.   Add the encAttrs (with its multiple values)\
    \ to the AC.\n   Note that there may be more than one attribute of the same type\
    \ (the\n   same OBJECT IDENTIFIER) after decryption.  That is, an AC MAY contain\n\
    \   the same attribute type both in clear and in encrypted form (and\n   indeed\
    \ several times if the same recipient is associated with more\n   than one EnvelopedData).\
    \  One approach implementers may choose, would\n   be to merge attribute values\
    \ following decryption in order to re-\n   establish the \"once only\" constraint.\n\
    \      name      id-aca-encAttrs\n      OID       { id-aca 6}\n      Syntax  \
    \  ContentInfo\n      values    Multiple Allowed\n   If an AC contains attributes,\
    \ apparently encrypted for the AC\n   verifier, the decryption process MUST not\
    \ fail.  If decryption does\n   fail, the AC MUST be rejected.\n"
- title: 7.2 Proxying
  contents:
  - "7.2 Proxying\n   When a server acts as a client for another server on behalf\
    \ of the AC\n   holder, the server MAY need to proxy an AC.  Such proxying MAY\
    \ have\n   to be done under the AC issuer's control, so that not every AC is\n\
    \   proxiable and so that a given proxiable AC can be proxied in a\n   targeted\
    \ fashion.  Support for chains of proxies (with more than one\n   intermediate\
    \ server) MAY also be required.  Note that this does not\n   involve a chain of\
    \ ACs.\n   In order to meet this requirement we define another extension,\n  \
    \ ProxyInfo, similar to the targeting extension.\n   When this extension is present,\
    \ the AC verifier must check that the\n   entity from which the AC was received\
    \ was allowed to send it and that\n   the AC is allowed to be used by this verifier.\n\
    \   The proxying information consists of a set of proxy information, each\n  \
    \ of which is a set of targeting information.  If the verifier and the\n   sender\
    \ of the AC are both named in the same proxy set, the AC can\n   then be accepted\
    \ (the exact rule is given below).\n   The effect is that the AC holder can send\
    \ the AC to any valid target\n   which can then only proxy to targets which are\
    \ in one of the same\n   proxy sets as itself.\n   The following data structure\
    \ is used to represent the\n   targeting/proxying information.\n         ProxyInfo\
    \ ::= SEQUENCE OF Targets\n   As in the case of targeting, the targetCert CHOICE\
    \ MUST NOT be used.\n   A proxy check succeeds if either one of the conditions\
    \ below is met:\n   1. The identity of the sender, as established by the underlying\n\
    \      authentication service, matches the holder field of the AC, and\n     \
    \ the current server \"matches\" any one of the proxy sets.  Recall\n      that\
    \ \"matches\" is as defined section 4.3.2.\n   2. The identity of the sender,\
    \ as established by the underlying\n      authentication service, \"matches\"\
    \ one of the proxy sets (call it\n      set \"A\"), and the current server is\
    \ one of the targetName fields\n      in the set \"A\", or the current server\
    \ is a member of one of the\n      targetGroup fields in set \"A\".\n   When an\
    \ AC is proxied more than once, a number of targets will be on\n   the path from\
    \ the original client, which is normally, but not always,\n   the AC holder. \
    \ In such cases, prevention of AC \"stealing\" requires\n   that the AC verifier\
    \ MUST check that all targets on the path are\n   members of the same proxy set.\
    \  It is the responsibility of the AC-\n   using protocol to ensure that a trustworthy\
    \ list of targets on the\n   path is available to the AC verifier.\n      name\
    \           id-pe-ac-proxying\n      OID            { id-pe 10 }\n      syntax\
    \         ProxyInfo\n      criticality    MUST be TRUE\n"
- title: 7.3 Use of ObjectDigestInfo
  contents:
  - "7.3 Use of ObjectDigestInfo\n   In some environments, it may be required that\
    \ the AC is not linked\n   either to an identity (via entityName) or to a PKC\
    \ (via\n   baseCertificateID).  The objectDigestInfo CHOICE in the holder field\n\
    \   allows support for this requirement.\n   If the holder is identified with\
    \ the objectDigestInfo field, then the\n   AC version field MUST contain v2 (the\
    \ integer 1).\n   The idea is to link the AC to an object by placing a hash of\
    \ that\n   object into the holder field of the AC.  For example, this allows\n\
    \   production of ACs that are linked to public keys rather than names.\n   It\
    \ also allows production of ACs which contain privileges associated\n   with an\
    \ executable object such as a Java class.  However, this\n   profile only specifies\
    \ how to use a hash over a public key or PKC.\n   That is, conformant ACs MUST\
    \ NOT use the otherObjectTypes value for\n   the digestedObjectType.\n   To link\
    \ an AC to a public key, the hash must be calculated over the\n   representation\
    \ of that public key which would be present in a PKC,\n   specifically, the input\
    \ for the hash algorithm MUST be the DER\n   encoding of a SubjectPublicKeyInfo\
    \ representation of the key.  Note:\n   This includes the AlgorithmIdentifier\
    \ as well as the BIT STRING.  The\n   rules given in [PKIXPROF] for encoding keys\
    \ MUST be followed.  In\n   this case, the digestedObjectType MUST be publicKey\
    \ and the\n   otherObjectTypeID field MUST NOT be present.\n   Note that if the\
    \ public key value used as input to the hash function\n   has been extracted from\
    \ a PKC, it is possible that the\n   SubjectPublicKeyInfo from that PKC is NOT\
    \ the value which should be\n   hashed.  This can occur if DSA Dss-parms are inherited\
    \ as described\n   in section 7.3.3 of [PKIXPROF].  The correct input for hashing\
    \ in\n   this context will include the value of the parameters inherited from\n\
    \   the CA's PKC, and thus may differ from the SubjectPublicKeyInfo\n   present\
    \ in the PKC.\n   Implementations which support this feature MUST be able to handle\
    \ the\n   representations of public keys for the algorithms specified in\n   section\
    \ 7.3 of [PKIXPROF].  In this case, the digestedObjectType MUST\n   be publicKey\
    \ and the otherObjectTypeID field MUST NOT be present.\n   In order to link an\
    \ AC to a PKC via a digest, the digest MUST be\n   calculated over the DER encoding\
    \ of the entire PKC, including the\n   signature value.  In this case the digestedObjectType\
    \ MUST be\n   publicKeyCert and the otherObjectTypeID field MUST NOT be present.\n"
- title: 7.4 AA Controls
  contents:
  - "7.4 AA Controls\n   During AC validation a relying party has to answer the question:\
    \ is\n   this AC issuer trusted to issue ACs containing this attribute?  The\n\
    \   AAControls PKC extension MAY be used to help answer the question.\n   The\
    \ AAControls extension is intended to be used in CA and AC issuer\n   PKCs.\n\
    \         id-pe-aaControls OBJECT IDENTIFIER ::= { id-pe 6 }\n         AAControls\
    \ ::= SEQUENCE {\n            pathLenConstraint   INTEGER (0..MAX) OPTIONAL,\n\
    \            permittedAttrs      [0] AttrSpec OPTIONAL,\n            excludedAttrs\
    \       [1] AttrSpec OPTIONAL,\n            permitUnSpecified   BOOLEAN DEFAULT\
    \ TRUE\n         }\n         AttrSpec::= SEQUENCE OF OBJECT IDENTIFIER\n   The\
    \ AAControls extension is used as follows:\n   The pathLenConstraint, if present,\
    \ is interpreted as in [PKIXPROF].\n   It restricts the allowed distance between\
    \ the AA CA (a CA directly\n   trusted to include AAControls in its PKCs), and\
    \ the AC issuer.\n   The permittedAttrs field specifies a set of attribute types\
    \ that any\n   AC issuer below this AA CA is allowed to include in ACs.  If this\n\
    \   field is not present, it means that no attribute types are explicitly\n  \
    \ allowed.\n   The excludedAttrs field specifies a set of attribute types that\
    \ no AC\n   issuer is allowed to include in ACs.  If this field is not present,\n\
    \   it means that no attribute types are explicitly disallowed.\n   The permitUnSpecified\
    \ field specifies how to handle attribute types\n   which are not present in either\
    \ the permittedAttrs or excludedAttrs\n   fields.  TRUE (the default) means that\
    \ any unspecified attribute type\n   is allowed in ACs; FALSE means that no unspecified\
    \ attribute type is\n   allowed.\n   When AAControls are used, the following additional\
    \ checks on an AA's\n   PKC chain MUST all succeed for the AC to be valid:\n \
    \  1. Some CA on the ACs certificate path MUST be directly trusted to\n      issue\
    \ PKCs which precede the AC issuer in the certification path;\n      call this\
    \ CA the \"AA CA\".\n   2. All PKCs on the path from the AA CA, down to and including\
    \ the AC\n      issuer's PKC, MUST contain an AAControls extension; however, the\n\
    \      AA CA's PKC need not contain this extension.\n   3. Only those attributes\
    \ in the AC which are allowed, according to\n      all of the AAControls extension\
    \ values in all of the PKCs from the\n      AA CA to the AC issuer, may be used\
    \ for authorization decisions;\n      all other attributes MUST be ignored.  This\
    \ check MUST be applied\n      to the set of attributes following attribute decryption,\
    \ and the\n      id-aca-encAttrs type MUST also be checked.\n      name      \
    \     id-pe-aaControls\n      OID            { id-pe 6 }\n      syntax       \
    \  AAControls\n      criticality    MAY be TRUE\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   The protection afforded for private keys is a\
    \ critical factor in\n   maintaining security.  Failure of AC issuers to protect\
    \ their private\n   keys will permit an attacker to masquerade as them, potentially\n\
    \   generating false ACs or revocation status.  Existence of bogus ACs\n   and\
    \ revocation status will undermine confidence in the system.  If\n   the compromise\
    \ is detected, all ACs issued by the AC issuer MUST be\n   revoked.  Rebuilding\
    \ after such a compromise will be problematic, so\n   AC issuers are advised to\
    \ implement a combination of strong technical\n   measures (e.g., tamper-resistant\
    \ cryptographic modules) and\n   appropriate management procedures (e.g., separation\
    \ of duties) to\n   avoid such an incident.\n   Loss of an AC issuer's private\
    \ signing key may also be problematic.\n   The AC issuer would not be able to\
    \ produce revocation status or\n   perform AC renewal.  AC issuers are advised\
    \ to maintain secure backup\n   for signing keys.  The security of the key backup\
    \ procedures is a\n   critical factor in avoiding key compromise.\n   The availability\
    \ and freshness of revocation status will affect the\n   degree of assurance that\
    \ should be placed in a long-lived AC.  While\n   long-lived ACs expire naturally,\
    \ events may occur during its natural\n   lifetime which negate the binding between\
    \ the AC holder and the\n   attributes.  If revocation status is untimely or unavailable,\
    \ the\n   assurance associated with the binding is clearly reduced.\n   The binding\
    \ between an AC holder and attributes cannot be stronger\n   than the cryptographic\
    \ module implementation and algorithms used to\n   generate the signature.  Short\
    \ key lengths or weak hash algorithms\n   will limit the utility of an AC.  AC\
    \ issuers are encouraged to note\n   advances in cryptology so they can employ\
    \ strong cryptographic\n   techniques.\n   Inconsistent application of name comparison\
    \ rules may result in\n   acceptance of invalid targeted or proxied ACs, or rejection\
    \ of valid\n   ones.  The X.500 series of specifications defines rules for comparing\n\
    \   distinguished names.  These rules require comparison of strings\n   without\
    \ regard to case, character set, multi-character white space\n   substrings, or\
    \ leading and trailing white space.  This specification\n   and [PKIXPROF] relaxes\
    \ these requirements, requiring support for\n   binary comparison at a minimum.\n\
    \   AC issuers MUST encode the distinguished name in the AC\n   holder.entityName\
    \ field identically to the distinguished name in the\n   holder's PKC.  If different\
    \ encodings are used, implementations of\n   this specification may fail to recognize\
    \ that the AC and PKC belong\n   to the same entity.\n   If an attribute certificate\
    \ is tied to the holder's PKC using the\n   baseCertificateID component of the\
    \ Holder field and the PKI in use\n   includes a rogue CA with the same issuer\
    \ name specified in the\n   baseCertificateID component, this rogue CA could issue\
    \ a PKC to a\n   malicious party, using the same issuer name and serial number\
    \ as the\n   proper holder's PKC.  Then the malicious party could use this PKC\
    \ in\n   conjunction with the AC.  This scenario SHOULD be avoided by properly\n\
    \   managing and configuring the PKI so that there cannot be two CAs with\n  \
    \ the same name.  Another alternative is to tie ACs to PKCs using the\n   publicKeyCert\
    \ type in the ObjectDigestInfo field.  Failing this, AC\n   verifiers have to\
    \ establish (using other means) that the potential\n   collisions cannot actually\
    \ occur, for example, the CPSs of the CAs\n   involved may make it clear that\
    \ no such name collisions can occur.\n   Implementers MUST ensure that following\
    \ validation of an AC, only\n   attributes that the issuer is trusted to issue\
    \ are used in\n   authorization decisions.  Other attributes, which MAY be present\
    \ MUST\n   be ignored.  Given that the AA controls PKC extension is optional to\n\
    \   implement, AC verifiers MUST be provided with this information by\n   other\
    \ means.  Configuration information is a likely alternative\n   means.  This becomes\
    \ very important if an AC verifier trusts more\n   than one AC issuer.\n   There\
    \ is often a requirement to map between the authentication\n   supplied by a particular\
    \ security protocol (e.g. TLS, S/MIME) and the\n   AC holder's identity.  If the\
    \ authentication uses PKCs, then this\n   mapping is straightforward.  However,\
    \ it is envisaged that ACs will\n   also be used in environments where the holder\
    \ may be authenticated\n   using other means.  Implementers SHOULD be very careful\
    \ in mapping\n   the authenticated identity to the AC holder.\n"
- title: 9. IANA Considerations
  contents:
  - "9. IANA Considerations\n   Attributes and attribute certificate extensions are\
    \ identified by\n   object identifiers (OIDs).  Many of the OIDs used in this\
    \ document\n   are copied from X.509 [X.509-2000].  Other OIDs were assigned from\
    \ an\n   arc delegated by the IANA.  No further action by the IANA is\n   necessary\
    \ for this document or any anticipated updates.\n"
- title: 10. References
  contents:
  - "10. References\n   [CMC]        Myers, M., Liu, X., Schaad, J. and J. Weinstein,\n\
    \                \"Certificate Management Messages over CMS\", RFC 2797,\n   \
    \             April 2000.\n   [CMP]        Adams, C. and S. Farrell, \"Internet\
    \ X.509 Public Key\n                Infrastructure - Certificate Management Protocols\"\
    , RFC\n                2510, March 1999.\n   [CMS]        Housley, R., \"Cryptographic\
    \ Message Syntax\", RFC 2630,\n                June 1999.\n   [ESS]        Hoffman,\
    \ P., \"Enhanced Security Services for S/MIME\",\n                RFC 2634, June\
    \ 1999.\n   [KRB]        Kohl, J. and C. Neuman, \"The Kerberos Network\n    \
    \            Authentication Service (V5)\", RFC 1510, September 1993.\n   [LDAP]\
    \       Wahl, M., Howes, T. and S. Kille, \"Lightweight Directory\n          \
    \      Access Protocol (v3)\", RFC 2251, December 1997.\n   [OCSP]       Myers,\
    \ M., Ankney, R., Malpani, A., Galperin, S. and C.\n                Adams, \"\
    X.509 Internet Public Key Infrastructure -\n                Online Certificate\
    \ Status Protocol - OCSP\", RFC 2560,\n                June 1999.\n   [PKIXALGS]\
    \   Bassham, L., Polk, W. and R. Housley, \"Algorithms and\n                Identifiers\
    \ for the Internet X.509 Public Key\n                Infrastructure Certificate\
    \ and Certificate Revocation\n                Lists CRL Profile\", RFC 3279, April\
    \ 2002.\n   [PKIXPROF]   Housley, R., Polk, T, Ford, W. and Solo, D., \"Internet\n\
    \                X.509 Public Key Infrastructure Certificate and\n           \
    \     Certificate Revocation List (CRL) Profile\", RFC 3280,\n               \
    \ April 2002.\n   [RFC2026]    Bradner, S., \"The Internet Standards Process --\
    \ Revision\n                3\", BCP 9, RFC 2026, October 1996.\n   [RFC2119]\
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [URL]        Berners-Lee, T., Masinter\
    \ L. and M. McCahill, \"Uniform\n                Resource Locators (URL)\", RFC\
    \ 1738, December 1994.\n   [X.208-1988] CCITT Recommendation X.208: Specification\
    \ of Abstract\n                Syntax Notation One (ASN.1). 1988.\n   [X.209-88]\
    \   CCITT Recommendation X.209: Specification of Basic\n                Encoding\
    \ Rules for Abstract Syntax Notation One (ASN.1).\n                1988.\n   [X.501-88]\
    \   CCITT Recommendation X.501: The Directory - Models.\n                1988.\n\
    \   [X.501-1993] ITU-T Recommendation X.501 : Information Technology -\n     \
    \           Open Systems Interconnection - The Directory: Models,\n          \
    \      1993.\n   [X.509-1988] CCITT Recommendation X.509: The Directory -\n  \
    \              Authentication Framework.  1988.\n   [X.509-1997] ITU-T Recommendation\
    \ X.509: The Directory -\n                Authentication Framework.  1997.\n \
    \  [X.509-2000] ITU-T Recommendation X.509: The Directory - Public-Key\n     \
    \           and Attribute Certificate Frameworks.  2000\n"
- title: 'Appendix A: Object Identifiers'
  contents:
  - "Appendix A: Object Identifiers\n   This (normative) appendix lists the new object\
    \ identifiers which are\n   defined in this specification.  Some of these are\
    \ required only for\n   support of optional features and are not required for\
    \ conformance to\n   this profile.  This specification mandates support for OIDs\
    \ which\n   have arc elements with values that are less than 2^32, (i.e. they\n\
    \   MUST be between 0 and 4,294,967,295 inclusive) and SHOULD be less\n   than\
    \ 2^31 (i.e. less than or equal to 2,147,483,647).  This allows\n   each arc element\
    \ to be represented within a single 32 bit word.\n   Implementations MUST also\
    \ support OIDs where the length of the dotted\n   decimal (see [LDAP], section\
    \ 4.1.2) string representation can be up\n   to 100 bytes (inclusive).  Implementations\
    \ MUST be able to handle\n   OIDs with up to 20 elements (inclusive).  AA's SHOULD\
    \ NOT issue ACs\n   which contain OIDs that breach these requirements.\n   The\
    \ following OIDs are imported from [PKIXPROF]:\n      id-pkix OBJECT IDENTIFIER\
    \ ::= { iso(1) identified-organization(3)\n                dod(6) internet(1)\
    \ security(5) mechanisms(5) pkix(7) }\n      id-mod  OBJECT IDENTIFIER ::= { id-pkix\
    \ 0 }\n      id-pe   OBJECT IDENTIFIER ::= { id-pkix 1 }\n      id-ad   OBJECT\
    \ IDENTIFIER ::= { id-pkix 48 }\n      id-at   OBJECT IDENTIFIER ::= { joint-iso-ccitt(2)\
    \ ds(5) 4 }\n      id-ce   OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) ds(5) 29\
    \ }\n   The following new ASN.1 module OID is defined:\n      id-mod-attribute-cert\
    \        OBJECT IDENTIFIER ::= { id-mod 12 }\n   The following AC extension OIDs\
    \ are defined:\n      id-pe-ac-auditIdentity       OBJECT IDENTIFIER ::= { id-pe\
    \ 4 }\n      id-pe-ac-proxying            OBJECT IDENTIFIER ::= { id-pe 10 }\n\
    \      id-ce-targetInformation      OBJECT IDENTIFIER ::= { id-ce 55 }\n   The\
    \ following PKC extension OIDs are defined:\n      id-pe-aaControls          \
    \   OBJECT IDENTIFIER ::= { id-pe 6 }\n   The following attribute OIDs are defined:\n\
    \      id-aca                       OBJECT IDENTIFIER ::= { id-pkix 10 }\n   \
    \   id-aca-authenticationInfo    OBJECT IDENTIFIER ::= { id-aca 1 }\n      id-aca-accessIdentity\
    \        OBJECT IDENTIFIER ::= { id-aca 2 }\n      id-aca-chargingIdentity   \
    \   OBJECT IDENTIFIER ::= { id-aca 3 }\n      id-aca-group                 OBJECT\
    \ IDENTIFIER ::= { id-aca 4 }\n      id-aca-encAttrs              OBJECT IDENTIFIER\
    \ ::= { id-aca 6 }\n      id-at-role                   OBJECT IDENTIFIER ::= {\
    \ id-at 72 }\n      id-at-clearance              OBJECT IDENTIFIER ::=\n     \
    \             { joint-iso-ccitt(2) ds(5) module(1)\n                    selected-attribute-types(5)\
    \ clearance (55) }\n"
- title: 'Appendix B: ASN.1 Module'
  contents:
  - "Appendix B: ASN.1 Module\n   PKIXAttributeCertificate {iso(1) identified-organization(3)\
    \ dod(6)\n                internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \                id-mod-attribute-cert(12)}\n      DEFINITIONS IMPLICIT TAGS ::=\n\
    \      BEGIN\n      -- EXPORTS ALL --\n      IMPORTS\n            -- IMPORTed\
    \ module OIDs MAY change if [PKIXPROF] changes\n            -- PKIX Certificate\
    \ Extensions\n               Attribute, AlgorithmIdentifier, CertificateSerialNumber,\n\
    \               Extensions, UniqueIdentifier,\n               id-pkix, id-pe,\
    \ id-kp, id-ad, id-at\n               FROM PKIX1Explicit88 {iso(1) identified-organization(3)\n\
    \                        dod(6) internet(1) security(5) mechanisms(5)\n      \
    \                  pkix(7) id-mod(0) id-pkix1-explicit-88(1)}\n              \
    \ GeneralName, GeneralNames, id-ce\n               FROM PKIX1Implicit88 {iso(1)\
    \ identified-organization(3)\n                        dod(6) internet(1) security(5)\
    \ mechanisms(5)\n                        pkix(7) id-mod(0) id-pkix1-implicit-88(2)}\
    \ ;\n      id-pe-ac-auditIdentity       OBJECT IDENTIFIER ::= { id-pe 4 }\n  \
    \    id-pe-aaControls             OBJECT IDENTIFIER ::= { id-pe 6 }\n      id-pe-ac-proxying\
    \            OBJECT IDENTIFIER ::= { id-pe 10 }\n      id-ce-targetInformation\
    \      OBJECT IDENTIFIER ::= { id-ce 55 }\n      id-aca                      \
    \ OBJECT IDENTIFIER ::= { id-pkix 10 }\n      id-aca-authenticationInfo    OBJECT\
    \ IDENTIFIER ::= { id-aca 1 }\n      id-aca-accessIdentity        OBJECT IDENTIFIER\
    \ ::= { id-aca 2 }\n      id-aca-chargingIdentity      OBJECT IDENTIFIER ::= {\
    \ id-aca 3 }\n      id-aca-group                 OBJECT IDENTIFIER ::= { id-aca\
    \ 4 }\n      -- { id-aca 5 } is reserved\n      id-aca-encAttrs              OBJECT\
    \ IDENTIFIER ::= { id-aca 6 }\n      id-at-role                   OBJECT IDENTIFIER\
    \ ::= { id-at 72}\n      id-at-clearance              OBJECT IDENTIFIER ::=\n\
    \                  { joint-iso-ccitt(2) ds(5) module(1)\n                    selected-attribute-types(5)\
    \ clearance (55) }\n             -- Uncomment this if using a 1988 level ASN.1\
    \ compiler\n             -- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING\n\
    \             AttributeCertificate ::= SEQUENCE {\n                   acinfo \
    \              AttributeCertificateInfo,\n                   signatureAlgorithm\
    \   AlgorithmIdentifier,\n                   signatureValue       BIT STRING\n\
    \             }\n             AttributeCertificateInfo ::= SEQUENCE {\n      \
    \          version        AttCertVersion  -- version is v2,\n                holder\
    \         Holder,\n                issuer         AttCertIssuer,\n           \
    \     signature      AlgorithmIdentifier,\n                serialNumber   CertificateSerialNumber,\n\
    \                attrCertValidityPeriod   AttCertValidityPeriod,\n           \
    \     attributes     SEQUENCE OF Attribute,\n                issuerUniqueID UniqueIdentifier\
    \ OPTIONAL,\n                extensions     Extensions     OPTIONAL\n        \
    \     }\n             AttCertVersion ::= INTEGER { v2(1) }\n             Holder\
    \ ::= SEQUENCE {\n                   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\
    \                             -- the issuer and serial number of\n           \
    \                  -- the holder's Public Key Certificate\n                  \
    \ entityName          [1] GeneralNames OPTIONAL,\n                           \
    \  -- the name of the claimant or role\n                   objectDigestInfo  \
    \  [2] ObjectDigestInfo OPTIONAL\n                             -- used to directly\
    \ authenticate the\n                             -- holder, for example, an executable\n\
    \             }\n             ObjectDigestInfo    ::= SEQUENCE {\n           \
    \        digestedObjectType  ENUMERATED {\n                        publicKey \
    \           (0),\n                        publicKeyCert        (1),\n        \
    \                otherObjectTypes     (2) },\n                               \
    \ -- otherObjectTypes MUST NOT\n                                -- MUST NOT be\
    \ used in this profile\n                   otherObjectTypeID   OBJECT IDENTIFIER\
    \  OPTIONAL,\n                   digestAlgorithm     AlgorithmIdentifier,\n  \
    \                 objectDigest        BIT STRING\n             }\n           \
    \  AttCertIssuer ::= CHOICE {\n                   v1Form   GeneralNames,  -- MUST\
    \ NOT be used in this\n                                           -- profile\n\
    \                   v2Form   [0] V2Form     -- v2 only\n             }\n     \
    \        V2Form ::= SEQUENCE {\n                   issuerName            GeneralNames\
    \  OPTIONAL,\n                   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\
    \                   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n   \
    \                   -- issuerName MUST be present in this profile\n          \
    \            -- baseCertificateID and objectDigestInfo MUST\n                \
    \      -- NOT be present in this profile\n             }\n             IssuerSerial\
    \  ::=  SEQUENCE {\n                   issuer         GeneralNames,\n        \
    \           serial         CertificateSerialNumber,\n                   issuerUID\
    \      UniqueIdentifier OPTIONAL\n             }\n             AttCertValidityPeriod\
    \  ::= SEQUENCE {\n                   notBeforeTime  GeneralizedTime,\n      \
    \             notAfterTime   GeneralizedTime\n             }\n             Targets\
    \ ::= SEQUENCE OF Target\n             Target  ::= CHOICE {\n                \
    \   targetName     [0] GeneralName,\n                   targetGroup    [1] GeneralName,\n\
    \                   targetCert     [2] TargetCert\n             }\n          \
    \   TargetCert  ::= SEQUENCE {\n                   targetCertificate  IssuerSerial,\n\
    \                   targetName         GeneralName OPTIONAL,\n               \
    \    certDigestInfo     ObjectDigestInfo OPTIONAL\n             }\n          \
    \   IetfAttrSyntax ::= SEQUENCE {\n                  policyAuthority[0] GeneralNames\
    \    OPTIONAL,\n                  values         SEQUENCE OF CHOICE {\n      \
    \                           octets    OCTET STRING,\n                        \
    \         oid       OBJECT IDENTIFIER,\n                                 string\
    \    UTF8String\n                 }\n             }\n             SvceAuthInfo\
    \ ::=    SEQUENCE {\n                   service       GeneralName,\n         \
    \          ident         GeneralName,\n                   authInfo      OCTET\
    \ STRING OPTIONAL\n             }\n             RoleSyntax ::= SEQUENCE {\n  \
    \                 roleAuthority  [0] GeneralNames OPTIONAL,\n                \
    \   roleName       [1] GeneralName\n             }\n             Clearance  ::=\
    \  SEQUENCE {\n                   policyId       [0] OBJECT IDENTIFIER,\n    \
    \               classList      [1] ClassList DEFAULT {unclassified},\n       \
    \            securityCategories\n                                  [2] SET OF\
    \ SecurityCategory  OPTIONAL\n             }\n             ClassList  ::=  BIT\
    \ STRING {\n                   unmarked       (0),\n                   unclassified\
    \   (1),\n                   restricted     (2),\n                   confidential\
    \   (3),\n                   secret         (4),\n                   topSecret\
    \      (5)\n             }\n             SecurityCategory ::= SEQUENCE {\n   \
    \                type      [0]  IMPLICIT OBJECT IDENTIFIER,\n                \
    \   value     [1]  ANY DEFINED BY type\n             }\n             AAControls\
    \ ::= SEQUENCE {\n                   pathLenConstraint INTEGER (0..MAX) OPTIONAL,\n\
    \                   permittedAttrs    [0] AttrSpec OPTIONAL,\n               \
    \    excludedAttrs     [1] AttrSpec OPTIONAL,\n                   permitUnSpecified\
    \ BOOLEAN DEFAULT TRUE\n             }\n             AttrSpec::= SEQUENCE OF OBJECT\
    \ IDENTIFIER\n             ACClearAttrs ::= SEQUENCE {\n                   acIssuer\
    \          GeneralName,\n                   acSerial          INTEGER,\n     \
    \              attrs             SEQUENCE OF Attribute\n             }\n     \
    \        ProxyInfo ::= SEQUENCE OF Targets\n      END\n"
- title: Author's Addresses
  contents:
  - "Author's Addresses\n   Stephen Farrell\n   Baltimore Technologies\n   39/41 Parkgate\
    \ Street\n   Dublin 8\n   IRELAND\n   EMail: stephen.farrell@baltimore.ie\n  \
    \ Russell Housley\n   RSA Laboratories\n   918 Spring Knoll Drive\n   Herndon,\
    \ VA 20170\n   USA\n   EMail: rhousley@rsasecurity.com\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Russ Housley thanks the management at SPYRUS, who supported\
    \ the\n   development of this specification while he was employed at SPYRUS.\n\
    \   Russ Housley also thanks the management at RSA Laboratories, who\n   supported\
    \ the completion of the specification after a job change.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
