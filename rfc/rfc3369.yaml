- title: __initial_text__
  contents:
  - '                   Cryptographic Message Syntax (CMS)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Cryptographic Message Syntax (CMS).\
    \  This\n   syntax is used to digitally sign, digest, authenticate, or encrypt\n\
    \   arbitrary message content.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction ................................................\
    \  3\n   1.1  Changes Since RFC 2630 ......................................  3\n\
    \   1.2  Terminology .................................................  4\n  \
    \ 2.   General Overview ............................................  4\n   3.\
    \   General Syntax ..............................................  5\n   4.  \
    \ Data Content Type ...........................................  5\n   5.   Signed-data\
    \ Content Type ....................................  6\n   5.1  SignedData Type\
    \ .............................................  7\n   5.2  EncapsulatedContentInfo\
    \ Type ................................  9\n   5.2.1  Compatibility with PKCS\
    \ #7 ................................  9\n   5.3  SignerInfo Type .............................................\
    \ 11\n   5.4  Message Digest Calculation Process .......................... 13\n\
    \   5.5  Signature Generation Process ................................ 14\n  \
    \ 5.6  Signature Verification Process .............................. 14\n   6.\
    \   Enveloped-data Content Type ................................. 14\n   6.1 \
    \ EnvelopedData Type .......................................... 16\n   6.2  RecipientInfo\
    \ Type .......................................... 18\n   6.2.1  KeyTransRecipientInfo\
    \ Type ................................ 19\n   6.2.2  KeyAgreeRecipientInfo Type\
    \ ................................ 20\n   6.2.3  KEKRecipientInfo Type .....................................\
    \ 22\n   6.2.4  PasswordRecipientInfo Type ................................ 23\n\
    \   6.2.5  OtherRecipientInfo Type ................................... 24\n  \
    \ 6.3  Content-encryption Process .................................. 24\n   6.4\
    \  Key-encryption Process ...................................... 25\n   7.   Digested-data\
    \ Content Type .................................. 25\n   8.   Encrypted-data Content\
    \ Type ................................. 26\n   9.   Authenticated-data Content\
    \ Type ............................. 27\n   9.1  AuthenticatedData Type ......................................\
    \ 28\n   9.2  MAC Generation .............................................. 29\n\
    \   9.3  MAC Verification ............................................ 31\n  \
    \ 10.  Useful Types ................................................ 31\n   10.1\
    \  Algorithm Identifier Types ................................. 31\n   10.1.1\
    \  DigestAlgorithmIdentifier ................................ 31\n   10.1.2  SignatureAlgorithmIdentifier\
    \ ............................. 32\n   10.1.3  KeyEncryptionAlgorithmIdentifier\
    \ ......................... 32\n   10.1.4  ContentEncryptionAlgorithmIdentifier\
    \ ..................... 32\n   10.1.5  MessageAuthenticationCodeAlgorithm .......................\
    \ 32\n   10.1.6  KeyDerivationAlgorithmIdentifier ......................... 33\n\
    \   10.2  Other Useful Types ......................................... 33\n  \
    \ 10.2.1  CertificateRevocationLists ............................... 33\n   10.2.2\
    \  CertificateChoices ....................................... 33\n   10.2.3  CertificateSet\
    \ ........................................... 34\n   10.2.4  IssuerAndSerialNumber\
    \ .................................... 34\n   10.2.5  CMSVersion ...............................................\
    \ 35\n   10.2.6  UserKeyingMaterial ....................................... 35\n\
    \   10.2.7  OtherKeyAttribute ........................................ 35\n  \
    \ 11.  Useful Attributes ........................................... 35\n   11.1\
    \  Content Type ............................................... 36\n   11.2  Message\
    \ Digest ............................................. 36\n   11.3  Signing Time\
    \ ............................................... 37\n   11.4  Countersignature\
    \ ........................................... 39\n   12.  ASN.1 Modules ...............................................\
    \ 40\n   12.1  CMS ASN.1 Module ........................................... 40\n\
    \   12.2  Version 1 Attribute Certificate ASN.1 Module ............... 46\n  \
    \ 13.  References .................................................. 47\n   14.\
    \  Security Considerations ..................................... 48\n   15.  Acknowledgments\
    \ ............................................. 50\n   16.  Author Address ..............................................\
    \ 50\n   17.  Full Copyright Statement .................................... 51\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes the Cryptographic Message Syntax\
    \ (CMS).  This\n   syntax is used to digitally sign, digest, authenticate, or\
    \ encrypt\n   arbitrary message content.\n   The CMS describes an encapsulation\
    \ syntax for data protection.  It\n   supports digital signatures and encryption.\
    \  The syntax allows\n   multiple encapsulations; one encapsulation envelope can\
    \ be nested\n   inside another.  Likewise, one party can digitally sign some\n\
    \   previously encapsulated data.  It also allows arbitrary attributes,\n   such\
    \ as signing time, to be signed along with the message content,\n   and provides\
    \ for other attributes such as countersignatures to be\n   associated with a signature.\n\
    \   The CMS can support a variety of architectures for certificate-based\n   key\
    \ management, such as the one defined by the PKIX working group\n   [PROFILE].\n\
    \   The CMS values are generated using ASN.1 [X.208-88], using BER-\n   encoding\
    \ [X.209-88].  Values are typically represented as octet\n   strings.  While many\
    \ systems are capable of transmitting arbitrary\n   octet strings reliably, it\
    \ is well known that many electronic mail\n   systems are not.  This document\
    \ does not address mechanisms for\n   encoding octet strings for reliable transmission\
    \ in such\n   environments.\n   The CMS is derived from PKCS #7 version 1.5 as\
    \ specified in RFC 2315\n   [PKCS#7].  Wherever possible, backward compatibility\
    \ is preserved;\n   however, changes were necessary to accommodate version 1 attribute\n\
    \   certificate transfer, key agreement and symmetric key-encryption key\n   techniques\
    \ for key management.\n"
- title: 1.1  Changes Since RFC 2630
  contents:
  - "1.1  Changes Since RFC 2630\n   This document obsoletes RFC 2630 [OLDCMS] and\
    \ RFC 3211 [PWRI].\n   Password-based key management is included in the CMS specification,\n\
    \   and an extension mechanism to support new key management schemes\n   without\
    \ further changes to the CMS is specified.  Backward\n   compatibility with RFC\
    \ 2630 and RFC 3211 is preserved; however,\n   version 2 attribute certificate\
    \ transfer is added.  The use of\n   version 1 attribute certificates is deprecated.\n\
    \   S/MIME v2 signatures [OLDMSG], which are based on PKCS#7 version 1.5,\n  \
    \ are compatible with S/MIME v3 signatures [MSG], which are based on\n   RFC 2630.\
    \  However, there are some subtle compatibility issues with\n   signatures using\
    \ PKCS#7 version 1.5 and the CMS.  These issues are\n   discussed in section 5.2.1.\n\
    \   Specific cryptographic algorithms are not discussed in this document,\n  \
    \ but they were discussed in RFC 2630.  The discussion of specific\n   cryptographic\
    \ algorithms has been moved to a separate document\n   [CMSALG].  Separation of\
    \ the protocol and algorithm specifications\n   allows the IETF to update each\
    \ document independently.  This\n   specification does not require the implementation\
    \ of any particular\n   algorithms.  Rather, protocols that rely on the CMS are\
    \ expected to\n   choose appropriate algorithms for their environment.  The algorithms\n\
    \   may be selected from [CMSALG] or elsewhere.\n"
- title: 1.2  Terminology
  contents:
  - "1.2  Terminology\n   In this document, the key words MUST, MUST NOT, REQUIRED,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL are to be interpreted\
    \ as\n   described in [STDWORDS].\n"
- title: 2  General Overview
  contents:
  - "2  General Overview\n   The CMS is general enough to support many different content\
    \ types.\n   This document defines one protection content, ContentInfo.\n   ContentInfo\
    \ encapsulates a single identified content type, and the\n   identified type may\
    \ provide further encapsulation.  This document\n   defines six content types:\
    \ data, signed-data, enveloped-data,\n   digested-data, encrypted-data, and authenticated-data.\
    \  Additional\n   content types can be defined outside this document.\n   An implementation\
    \ that conforms to this specification MUST implement\n   the protection content,\
    \ ContentInfo, and MUST implement the data,\n   signed-data, and enveloped-data\
    \ content types.  The other content\n   types MAY be implemented.\n   As a general\
    \ design philosophy, each content type permits single pass\n   processing using\
    \ indefinite-length Basic Encoding Rules (BER)\n   encoding.  Single-pass operation\
    \ is especially helpful if content is\n   large, stored on tapes, or is \"piped\"\
    \ from another process.  Single-\n   pass operation has one significant drawback:\
    \ it is difficult to\n   perform encode operations using the Distinguished Encoding\
    \ Rules\n   (DER) [X.509-88] encoding in a single pass since the lengths of the\n\
    \   various components may not be known in advance.  However, signed\n   attributes\
    \ within the signed-data content type and authenticated\n   attributes within\
    \ the authenticated-data content type need to be\n   transmitted in DER form to\
    \ ensure that recipients can verify a\n   content that contains one or more unrecognized\
    \ attributes.  Signed\n   attributes and authenticated attributes are the only\
    \ data types used\n   in the CMS that require DER encoding.\n"
- title: 3  General Syntax
  contents:
  - "3  General Syntax\n   The following object identifier identifies the content\
    \ information\n   type:\n      id-ct-contentInfo OBJECT IDENTIFIER ::= { iso(1)\
    \ member-body(2)\n         us(840) rsadsi(113549) pkcs(1) pkcs9(9) smime(16) ct(1)\
    \ 6 }\n   The CMS associates a content type identifier with a content.  The\n\
    \   syntax MUST have ASN.1 type ContentInfo:\n      ContentInfo ::= SEQUENCE {\n\
    \        contentType ContentType,\n        content [0] EXPLICIT ANY DEFINED BY\
    \ contentType }\n      ContentType ::= OBJECT IDENTIFIER\n   The fields of ContentInfo\
    \ have the following meanings:\n      contentType indicates the type of the associated\
    \ content.  It is\n      an object identifier; it is a unique string of integers\
    \ assigned\n      by an authority that defines the content type.\n      content\
    \ is the associated content.  The type of content can be\n      determined uniquely\
    \ by contentType.  Content types for data,\n      signed-data, enveloped-data,\
    \ digested-data, encrypted-data, and\n      authenticated-data are defined in\
    \ this document.  If additional\n      content types are defined in other documents,\
    \ the ASN.1 type\n      defined SHOULD NOT be a CHOICE type.\n"
- title: 4  Data Content Type
  contents:
  - "4  Data Content Type\n   The following object identifier identifies the data\
    \ content type:\n      id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \         us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }\n   The data content type\
    \ is intended to refer to arbitrary octet\n   strings, such as ASCII text files;\
    \ the interpretation is left to the\n   application.  Such strings need not have\
    \ any internal structure\n   (although they could have their own ASN.1 definition\
    \ or other\n   structure).\n   S/MIME uses id-data to identify MIME encoded content.\
    \  The use of\n   this content identifier is specified in RFC 2311 for S/MIME\
    \ v2\n   [OLDMSG] and RFC 2633 for S/MIME v3 [MSG].\n   The data content type\
    \ is generally encapsulated in the signed-data,\n   enveloped-data, digested-data,\
    \ encrypted-data, or authenticated-data\n   content type.\n"
- title: 5.  Signed-data Content Type
  contents:
  - "5.  Signed-data Content Type\n   The signed-data content type consists of a content\
    \ of any type and\n   zero or more signature values.  Any number of signers in\
    \ parallel can\n   sign any type of content.\n   The typical application of the\
    \ signed-data content type represents\n   one signer's digital signature on content\
    \ of the data content type.\n   Another typical application disseminates certificates\
    \ and certificate\n   revocation lists (CRLs).\n   The process by which signed-data\
    \ is constructed involves the\n   following steps:\n      1.  For each signer,\
    \ a message digest, or hash value, is computed\n      on the content with a signer-specific\
    \ message-digest algorithm.\n      If the signer is signing any information other\
    \ than the content,\n      the message digest of the content and the other information\
    \ are\n      digested with the signer's message digest algorithm (see Section\n\
    \      5.4), and the result becomes the \"message digest.\"\n      2.  For each\
    \ signer, the message digest is digitally signed using\n      the signer's private\
    \ key.\n      3.  For each signer, the signature value and other signer-specific\n\
    \      information are collected into a SignerInfo value, as defined in\n    \
    \  Section 5.3.  Certificates and CRLs for each signer, and those not\n      corresponding\
    \ to any signer, are collected in this step.\n      4.  The message digest algorithms\
    \ for all the signers and the\n      SignerInfo values for all the signers are\
    \ collected together with\n      the content into a SignedData value, as defined\
    \ in Section 5.1.\n   A recipient independently computes the message digest. \
    \ This message\n   digest and the signer's public key are used to verify the signature\n\
    \   value.  The signer's public key is referenced either by an issuer\n   distinguished\
    \ name along with an issuer-specific serial number or by\n   a subject key identifier\
    \ that uniquely identifies the certificate\n   containing the public key.  The\
    \ signer's certificate can be included\n   in the SignedData certificates field.\n\
    \   This section is divided into six parts.  The first part describes the\n  \
    \ top-level type SignedData, the second part describes\n   EncapsulatedContentInfo,\
    \ the third part describes the per-signer\n   information type SignerInfo, and\
    \ the fourth, fifth, and sixth parts\n   describe the message digest calculation,\
    \ signature generation, and\n   signature verification processes, respectively.\n"
- title: 5.1  SignedData Type
  contents:
  - "5.1  SignedData Type\n   The following object identifier identifies the signed-data\
    \ content\n   type:\n      id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \         us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n   The signed-data content\
    \ type shall have ASN.1 type SignedData:\n      SignedData ::= SEQUENCE {\n  \
    \      version CMSVersion,\n        digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \        encapContentInfo EncapsulatedContentInfo,\n        certificates [0] IMPLICIT\
    \ CertificateSet OPTIONAL,\n        crls [1] IMPLICIT CertificateRevocationLists\
    \ OPTIONAL,\n        signerInfos SignerInfos }\n      DigestAlgorithmIdentifiers\
    \ ::= SET OF DigestAlgorithmIdentifier\n      SignerInfos ::= SET OF SignerInfo\n\
    \   The fields of type SignedData have the following meanings:\n      version\
    \ is the syntax version number.  The appropriate value\n      depends on certificates,\
    \ eContentType, and SignerInfo.  The\n      version MUST be assigned as follows:\n\
    \         IF (certificates is present) AND\n             (any version 2 attribute\
    \ certificates are present)\n         THEN version MUST be 4\n         ELSE\n\
    \             IF ((certificates is present) AND\n                (any version\
    \ 1 attribute certificates are present)) OR\n                (encapContentInfo\
    \ eContentType is other than id-data) OR\n                (any SignerInfo structures\
    \ are version 3)\n             THEN version MUST be 3\n             ELSE version\
    \ MUST be 1\n      digestAlgorithms is a collection of message digest algorithm\n\
    \      identifiers.  There MAY be any number of elements in the\n      collection,\
    \ including zero.  Each element identifies the message\n      digest algorithm,\
    \ along with any associated parameters, used by\n      one or more signer.  The\
    \ collection is intended to list the\n      message digest algorithms employed\
    \ by all of the signers, in any\n      order, to facilitate one-pass signature\
    \ verification.\n      Implementations MAY fail to validate signatures that use\
    \ a digest\n      algorithm that is not included in this set.  The message digesting\n\
    \      process is described in Section 5.4.\n      encapContentInfo is the signed\
    \ content, consisting of a content\n      type identifier and the content itself.\
    \  Details of the\n      EncapsulatedContentInfo type are discussed in section\
    \ 5.2.\n      certificates is a collection of certificates.  It is intended that\n\
    \      the set of certificates be sufficient to contain chains from a\n      recognized\
    \ \"root\" or \"top-level certification authority\" to all of\n      the signers\
    \ in the signerInfos field.  There may be more\n      certificates than necessary,\
    \ and there may be certificates\n      sufficient to contain chains from two or\
    \ more independent top-\n      level certification authorities.  There may also\
    \ be fewer\n      certificates than necessary, if it is expected that recipients\n\
    \      have an alternate means of obtaining necessary certificates (e.g.,\n  \
    \    from a previous set of certificates).  The signer's certificate\n      MAY\
    \ be included.  The use of version 1 attribute certificates is\n      strongly\
    \ discouraged.\n      crls is a collection of certificate revocation lists (CRLs).\
    \  It\n      is intended that the set contain information sufficient to\n    \
    \  determine whether or not the certificates in the certificates\n      field\
    \ are valid, but such correspondence is not necessary.  There\n      MAY be more\
    \ CRLs than necessary, and there MAY also be fewer CRLs\n      than necessary.\n\
    \      signerInfos is a collection of per-signer information.  There MAY\n   \
    \   be any number of elements in the collection, including zero.  The\n      details\
    \ of the SignerInfo type are discussed in section 5.3.\n      Since each signer\
    \ can employ a digital signature technique and\n      future specifications could\
    \ update the syntax, all implementations\n      MUST gracefully handle unimplemented\
    \ versions of SignerInfo.\n      Further, since all implementations will not support\
    \ every possible\n      signature algorithm, all implementations MUST gracefully\
    \ handle\n      unimplemented signature algorithms when they are encountered.\n"
- title: 5.2  EncapsulatedContentInfo Type
  contents:
  - "5.2  EncapsulatedContentInfo Type\n   The content is represented in the type\
    \ EncapsulatedContentInfo:\n      EncapsulatedContentInfo ::= SEQUENCE {\n   \
    \     eContentType ContentType,\n        eContent [0] EXPLICIT OCTET STRING OPTIONAL\
    \ }\n      ContentType ::= OBJECT IDENTIFIER\n   The fields of type EncapsulatedContentInfo\
    \ have the following\n   meanings:\n      eContentType is an object identifier.\
    \  The object identifier\n      uniquely specifies the content type.\n      eContent\
    \ is the content itself, carried as an octet string.  The\n      eContent need\
    \ not be DER encoded.\n   The optional omission of the eContent within the\n \
    \  EncapsulatedContentInfo field makes it possible to construct\n   \"external\
    \ signatures.\"  In the case of external signatures, the\n   content being signed\
    \ is absent from the EncapsulatedContentInfo value\n   included in the signed-data\
    \ content type.  If the eContent value\n   within EncapsulatedContentInfo is absent,\
    \ then the signatureValue is\n   calculated and the eContentType is assigned as\
    \ though the eContent\n   value was present.\n   In the degenerate case where\
    \ there are no signers, the\n   EncapsulatedContentInfo value being \"signed\"\
    \ is irrelevant.  In this\n   case, the content type within the EncapsulatedContentInfo\
    \ value being\n   \"signed\" MUST be id-data (as defined in section 4), and the\
    \ content\n   field of the EncapsulatedContentInfo value MUST be omitted.\n"
- title: '5.2.1  Compatibility with PKCS #7'
  contents:
  - "5.2.1  Compatibility with PKCS #7\n   This section contains a word of warning\
    \ to implementers that wish to\n   support both the CMS and PKCS #7 [PKCS#7] SignedData\
    \ content types.\n   Both the CMS and PKCS #7 identify the type of the encapsulated\n\
    \   content with an object identifier, but the ASN.1 type of the content\n   itself\
    \ is variable in PKCS #7 SignedData content type.\n   PKCS #7 defines content\
    \ as:\n      content [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL\n   The\
    \ CMS defines eContent as:\n      eContent [0] EXPLICIT OCTET STRING OPTIONAL\n\
    \   The CMS definition is much easier to use in most applications, and it\n  \
    \ is compatible with both S/MIME v2 and S/MIME v3.  S/MIME signed\n   messages\
    \ using the CMS and PKCS #7 are compatible because identical\n   signed message\
    \ formats are specified in RFC 2311 for S/MIME v2\n   [OLDMSG] and RFC 2633 for\
    \ S/MIME v3 [MSG].  S/MIME v2 encapsulates\n   the MIME content in a Data type\
    \ (that is, an OCTET STRING) carried in\n   the SignedData contentInfo content\
    \ ANY field, and S/MIME v3 carries\n   the MIME content in the SignedData encapContentInfo\
    \ eContent OCTET\n   STRING.  Therefore, in both S/MIME v2 and S/MIME v3, the\
    \ MIME content\n   is placed in an OCTET STRING and the message digest is computed\
    \ over\n   the identical portions of the content.  That is, the message digest\n\
    \   is computed over the octets comprising the value of the OCTET STRING,\n  \
    \ neither the tag nor length octets are included.\n   There are incompatibilities\
    \ between the CMS and PKCS #7 signedData\n   types when the encapsulated content\
    \ is not formatted using the Data\n   type.  For example, when an RFC 2634 [ESS]\
    \ signed receipt is\n   encapsulated in the CMS signedData type, then the Receipt\
    \ SEQUENCE is\n   encoded in the signedData encapContentInfo eContent OCTET STRING\
    \ and\n   the message digest is computed using the entire Receipt SEQUENCE\n \
    \  encoding (including tag, length and value octets).  However, if an\n   RFC\
    \ 2634 signed receipt is encapsulated in the PKCS #7 signedData\n   type, then\
    \ the Receipt SEQUENCE is DER encoded [X.509-88] in the\n   SignedData contentInfo\
    \ content ANY field (a SEQUENCE, not an OCTET\n   STRING).  Therefore, the message\
    \ digest is computed using only the\n   value octets of the Receipt SEQUENCE encoding.\n\
    \   The following strategy can be used to achieve backward compatibility\n   with\
    \ PKCS #7 when processing SignedData content types.  If the\n   implementation\
    \ is unable to ASN.1 decode the signedData type using\n   the CMS signedData encapContentInfo\
    \ eContent OCTET STRING syntax,\n   then the implementation MAY attempt to decode\
    \ the signedData type\n   using the PKCS #7 SignedData contentInfo content ANY\
    \ syntax and\n   compute the message digest accordingly.\n   The following strategy\
    \ can be used to achieve backward compatibility\n   with PKCS #7 when creating\
    \ a SignedData content type in which the\n   encapsulated content is not formatted\
    \ using the Data type.\n   Implementations MAY examine the value of the eContentType,\
    \ and then\n   adjust the expected DER encoding of eContent based on the object\n\
    \   identifier value.  For example, to support Microsoft AuthentiCode,\n   the\
    \ following information MAY be included:\n      eContentType Object Identifier\
    \ is set to { 1 3 6 1 4 1 311 2 1 4 }\n      eContent contains DER encoded AuthentiCode\
    \ signing information\n"
- title: 5.3  SignerInfo Type
  contents:
  - "5.3  SignerInfo Type\n   Per-signer information is represented in the type SignerInfo:\n\
    \      SignerInfo ::= SEQUENCE {\n        version CMSVersion,\n        sid SignerIdentifier,\n\
    \        digestAlgorithm DigestAlgorithmIdentifier,\n        signedAttrs [0] IMPLICIT\
    \ SignedAttributes OPTIONAL,\n        signatureAlgorithm SignatureAlgorithmIdentifier,\n\
    \        signature SignatureValue,\n        unsignedAttrs [1] IMPLICIT UnsignedAttributes\
    \ OPTIONAL }\n      SignerIdentifier ::= CHOICE {\n        issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n        subjectKeyIdentifier [0] SubjectKeyIdentifier\
    \ }\n      SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\n      UnsignedAttributes\
    \ ::= SET SIZE (1..MAX) OF Attribute\n      Attribute ::= SEQUENCE {\n       \
    \ attrType OBJECT IDENTIFIER,\n        attrValues SET OF AttributeValue }\n  \
    \    AttributeValue ::= ANY\n      SignatureValue ::= OCTET STRING\n   The fields\
    \ of type SignerInfo have the following meanings:\n      version is the syntax\
    \ version number.  If the SignerIdentifier is\n      the CHOICE issuerAndSerialNumber,\
    \ then the version MUST be 1.  If\n      the SignerIdentifier is subjectKeyIdentifier,\
    \ then the version\n      MUST be 3.\n      sid specifies the signer's certificate\
    \ (and thereby the signer's\n      public key).  The signer's public key is needed\
    \ by the recipient\n      to verify the signature.  SignerIdentifier provides\
    \ two\n      alternatives for specifying the signer's public key.  The\n     \
    \ issuerAndSerialNumber alternative identifies the signer's\n      certificate\
    \ by the issuer's distinguished name and the certificate\n      serial number;\
    \ the subjectKeyIdentifier identifies the signer's\n      certificate by the X.509\
    \ subjectKeyIdentifier extension value.\n      Implementations MUST support the\
    \ reception of the\n      issuerAndSerialNumber and subjectKeyIdentifier forms\
    \ of\n      SignerIdentifier.  When generating a SignerIdentifier,\n      implementations\
    \ MAY support one of the forms (either\n      issuerAndSerialNumber or subjectKeyIdentifier)\
    \ and always use it,\n      or implementations MAY arbitrarily mix the two forms.\n\
    \      digestAlgorithm identifies the message digest algorithm, and any\n    \
    \  associated parameters, used by the signer.  The message digest is\n      computed\
    \ on either the content being signed or the content\n      together with the signed\
    \ attributes using the process described in\n      section 5.4.  The message digest\
    \ algorithm SHOULD be among those\n      listed in the digestAlgorithms field\
    \ of the associated SignerData.\n      Implementations MAY fail to validate signatures\
    \ that use a digest\n      algorithm that is not included in the SignedData digestAlgorithms\n\
    \      set.\n      signedAttrs is a collection of attributes that are signed.\
    \  The\n      field is optional, but it MUST be present if the content type of\n\
    \      the EncapsulatedContentInfo value being signed is not id-data.\n      SignedAttributes\
    \ MUST be DER encoded, even if the rest of the\n      structure is BER encoded.\
    \  Useful attribute types, such as signing\n      time, are defined in Section\
    \ 11.  If the field is present, it MUST\n      contain, at a minimum, the following\
    \ two attributes:\n         A content-type attribute having as its value the content\
    \ type\n         of the EncapsulatedContentInfo value being signed.  Section\n\
    \         11.1 defines the content-type attribute.  However, the\n         content-type\
    \ attribute MUST NOT be used as part of a\n         countersignature unsigned\
    \ attribute as defined in section 11.4.\n         A message-digest attribute,\
    \ having as its value the message\n         digest of the content.  Section 11.2\
    \ defines the message-digest\n         attribute.\n      signatureAlgorithm identifies\
    \ the signature algorithm, and any\n      associated parameters, used by the signer\
    \ to generate the digital\n      signature.\n      signature is the result of\
    \ digital signature generation, using the\n      message digest and the signer's\
    \ private key.  The details of the\n      signature depend on the signature algorithm\
    \ employed.\n      unsignedAttrs is a collection of attributes that are not signed.\n\
    \      The field is optional.  Useful attribute types, such as\n      countersignatures,\
    \ are defined in Section 11.\n   The fields of type SignedAttribute and UnsignedAttribute\
    \ have the\n   following meanings:\n      attrType indicates the type of attribute.\
    \  It is an object\n      identifier.\n      attrValues is a set of values that\
    \ comprise the attribute.  The\n      type of each value in the set can be determined\
    \ uniquely by\n      attrType.  The attrType can impose restrictions on the number\
    \ of\n      items in the set.\n"
- title: 5.4  Message Digest Calculation Process
  contents:
  - "5.4  Message Digest Calculation Process\n   The message digest calculation process\
    \ computes a message digest on\n   either the content being signed or the content\
    \ together with the\n   signed attributes.  In either case, the initial input\
    \ to the message\n   digest calculation process is the \"value\" of the encapsulated\
    \ content\n   being signed.  Specifically, the initial input is the\n   encapContentInfo\
    \ eContent OCTET STRING to which the signing process\n   is applied.  Only the\
    \ octets comprising the value of the eContent\n   OCTET STRING are input to the\
    \ message digest algorithm, not the tag\n   or the length octets.\n   The result\
    \ of the message digest calculation process depends on\n   whether the signedAttrs\
    \ field is present.  When the field is absent,\n   the result is just the message\
    \ digest of the content as described\n   above.  When the field is present, however,\
    \ the result is the message\n   digest of the complete DER encoding of the SignedAttrs\
    \ value\n   contained in the signedAttrs field.  Since the SignedAttrs value,\n\
    \   when present, must contain the content-type and the message-digest\n   attributes,\
    \ those values are indirectly included in the result.  The\n   content-type attribute\
    \ MUST NOT be included in a countersignature\n   unsigned attribute as defined\
    \ in section 11.4.  A separate encoding\n   of the signedAttrs field is performed\
    \ for message digest calculation.\n   The IMPLICIT [0] tag in the signedAttrs\
    \ is not used for the DER\n   encoding, rather an EXPLICIT SET OF tag is used.\
    \  That is, the DER\n   encoding of the EXPLICIT SET OF tag, rather than of the\
    \ IMPLICIT [0]\n   tag, MUST be included in the message digest calculation along\
    \ with\n   the length and content octets of the SignedAttributes value.\n   When\
    \ the signedAttrs field is absent, only the octets comprising the\n   value of\
    \ the signedData encapContentInfo eContent OCTET STRING (e.g.,\n   the contents\
    \ of a file) are input to the message digest calculation.\n   This has the advantage\
    \ that the length of the content being signed\n   need not be known in advance\
    \ of the signature generation process.\n   Although the encapContentInfo eContent\
    \ OCTET STRING tag and length\n   octets are not included in the message digest\
    \ calculation, they are\n   protected by other means.  The length octets are protected\
    \ by the\n   nature of the message digest algorithm since it is computationally\n\
    \   infeasible to find any two distinct message contents of any length\n   that\
    \ have the same message digest.\n"
- title: 5.5  Signature Generation Process
  contents:
  - "5.5  Signature Generation Process\n   The input to the signature generation process\
    \ includes the result of\n   the message digest calculation process and the signer's\
    \ private key.\n   The details of the signature generation depend on the signature\n\
    \   algorithm employed.  The object identifier, along with any\n   parameters,\
    \ that specifies the signature algorithm employed by the\n   signer is carried\
    \ in the signatureAlgorithm field.  The signature\n   value generated by the signer\
    \ MUST be encoded as an OCTET STRING and\n   carried in the signature field.\n"
- title: 5.6  Signature Verification Process
  contents:
  - "5.6  Signature Verification Process\n   The input to the signature verification\
    \ process includes the result\n   of the message digest calculation process and\
    \ the signer's public\n   key.  The recipient MAY obtain the correct public key\
    \ for the signer\n   by any means, but the preferred method is from a certificate\
    \ obtained\n   from the SignedData certificates field.  The selection and validation\n\
    \   of the signer's public key MAY be based on certification path\n   validation\
    \ (see [PROFILE]) as well as other external context, but is\n   beyond the scope\
    \ of this document.  The details of the signature\n   verification depend on the\
    \ signature algorithm employed.\n   The recipient MUST NOT rely on any message\
    \ digest values computed by\n   the originator.  If the SignedData signerInfo\
    \ includes\n   signedAttributes, then the content message digest MUST be calculated\n\
    \   as described in section 5.4.  For the signature to be valid, the\n   message\
    \ digest value calculated by the recipient MUST be the same as\n   the value of\
    \ the messageDigest attribute included in the\n   signedAttributes of the SignedData\
    \ signerInfo.\n   If the SignedData signerInfo includes signedAttributes, then\
    \ the\n   content-type attribute value MUST match the SignedData\n   encapContentInfo\
    \ eContentType value.\n"
- title: 6.  Enveloped-data Content Type
  contents:
  - "6.  Enveloped-data Content Type\n   The enveloped-data content type consists\
    \ of an encrypted content of\n   any type and encrypted content-encryption keys\
    \ for one or more\n   recipients.  The combination of the encrypted content and\
    \ one\n   encrypted content-encryption key for a recipient is a \"digital\n  \
    \ envelope\" for that recipient.  Any type of content can be enveloped\n   for\
    \ an arbitrary number of recipients using any of the three key\n   management\
    \ techniques for each recipient.\n   The typical application of the enveloped-data\
    \ content type will\n   represent one or more recipients' digital envelopes on\
    \ content of the\n   data or signed-data content types.\n   Enveloped-data is\
    \ constructed by the following steps:\n      1.  A content-encryption key for\
    \ a particular content-encryption\n      algorithm is generated at random.\n \
    \     2.  The content-encryption key is encrypted for each recipient.\n      The\
    \ details of this encryption depend on the key management\n      algorithm used,\
    \ but four general techniques are supported:\n         key transport:  the content-encryption\
    \ key is encrypted in the\n         recipient's public key;\n         key agreement:\
    \  the recipient's public key and the sender's\n         private key are used\
    \ to generate a pairwise symmetric key, then\n         the content-encryption\
    \ key is encrypted in the pairwise\n         symmetric key;\n         symmetric\
    \ key-encryption keys:  the content-encryption key is\n         encrypted in a\
    \ previously distributed symmetric key-encryption\n         key; and\n       \
    \  passwords: the content-encryption key is encrypted in a key-\n         encryption\
    \ key that is derived from a password or other shared\n         secret value.\n\
    \      3.  For each recipient, the encrypted content-encryption key and\n    \
    \  other recipient-specific information are collected into a\n      RecipientInfo\
    \ value, defined in Section 6.2.\n      4.  The content is encrypted with the\
    \ content-encryption key.\n      Content encryption may require that the content\
    \ be padded to a\n      multiple of some block size; see Section 6.3.\n      5.\
    \  The RecipientInfo values for all the recipients are collected\n      together\
    \ with the encrypted content to form an EnvelopedData value\n      as defined\
    \ in Section 6.1.\n   A recipient opens the digital envelope by decrypting one\
    \ of the\n   encrypted content-encryption keys and then decrypting the encrypted\n\
    \   content with the recovered content-encryption key.\n   This section is divided\
    \ into four parts.  The first part describes\n   the top-level type EnvelopedData,\
    \ the second part describes the per-\n   recipient information type RecipientInfo,\
    \ and the third and fourth\n   parts describe the content-encryption and key-encryption\
    \ processes.\n"
- title: 6.1  EnvelopedData Type
  contents:
  - "6.1  EnvelopedData Type\n   The following object identifier identifies the enveloped-data\
    \ content\n   type:\n      id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }\n   The enveloped-data\
    \ content type shall have ASN.1 type EnvelopedData:\n      EnvelopedData ::= SEQUENCE\
    \ {\n         version CMSVersion,\n         originatorInfo [0] IMPLICIT OriginatorInfo\
    \ OPTIONAL,\n         recipientInfos RecipientInfos,\n         encryptedContentInfo\
    \ EncryptedContentInfo,\n         unprotectedAttrs [1] IMPLICIT UnprotectedAttributes\
    \ OPTIONAL }\n      OriginatorInfo ::= SEQUENCE {\n         certs [0] IMPLICIT\
    \ CertificateSet OPTIONAL,\n         crls [1] IMPLICIT CertificateRevocationLists\
    \ OPTIONAL }\n      RecipientInfos ::= SET SIZE (1..MAX) OF RecipientInfo\n  \
    \    EncryptedContentInfo ::= SEQUENCE {\n        contentType ContentType,\n \
    \       contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\n   \
    \     encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\n      EncryptedContent\
    \ ::= OCTET STRING\n      UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute\n\
    \   The fields of type EnvelopedData have the following meanings:\n      version\
    \ is the syntax version number.  The appropriate value\n      depends on originatorInfo,\
    \ RecipientInfo, and unprotectedAttrs.\n      The version MUST be assigned as\
    \ follows:\n         IF ((originatorInfo is present) AND\n             (any version\
    \ 2 attribute certificates are present)) OR\n            (any RecipientInfo structures\
    \ include pwri) OR\n            (any RecipientInfo structures include ori)\n \
    \        THEN version is 3\n         ELSE\n            IF (originatorInfo is present)\
    \ OR\n               (unprotectedAttrs is present) OR\n               (any RecipientInfo\
    \ structures are a version other than 0)\n            THEN version is 2\n    \
    \        ELSE version is 0\n      originatorInfo optionally provides information\
    \ about the\n      originator.  It is present only if required by the key management\n\
    \      algorithm.  It may contain certificates and CRLs:\n         certs is a\
    \ collection of certificates.  certs may contain\n         originator certificates\
    \ associated with several different key\n         management algorithms.  certs\
    \ may also contain attribute\n         certificates associated with the originator.\
    \  The certificates\n         contained in certs are intended to be sufficient\
    \ for all\n         recipients to build certification paths from a recognized\n\
    \         \"root\" or \"top-level certification authority.\"  However, certs\n\
    \         may contain more certificates than necessary, and there may be\n   \
    \      certificates sufficient to make certification paths from two or\n     \
    \    more independent top-level certification authorities.\n         Alternatively,\
    \ certs may contain fewer certificates than\n         necessary, if it is expected\
    \ that recipients have an alternate\n         means of obtaining necessary certificates\
    \ (e.g., from a\n         previous set of certificates).\n         crls is a collection\
    \ of CRLs.  It is intended that the set\n         contain information sufficient\
    \ to determine whether or not the\n         certificates in the certs field are\
    \ valid, but such\n         correspondence is not necessary.  There MAY be more\
    \ CRLs than\n         necessary, and there MAY also be fewer CRLs than necessary.\n\
    \      recipientInfos is a collection of per-recipient information.\n      There\
    \ MUST be at least one element in the collection.\n      encryptedContentInfo\
    \ is the encrypted content information.\n      unprotectedAttrs is a collection\
    \ of attributes that are not\n      encrypted.  The field is optional.  Useful\
    \ attribute types are\n      defined in Section 11.\n   The fields of type EncryptedContentInfo\
    \ have the following meanings:\n      contentType indicates the type of content.\n\
    \      contentEncryptionAlgorithm identifies the content-encryption\n      algorithm,\
    \ and any associated parameters, used to encrypt the\n      content.  The content-encryption\
    \ process is described in Section\n      6.3.  The same content-encryption algorithm\
    \ and content-encryption\n      key are used for all recipients.\n      encryptedContent\
    \ is the result of encrypting the content.  The\n      field is optional, and\
    \ if the field is not present, its intended\n      value must be supplied by other\
    \ means.\n   The recipientInfos field comes before the encryptedContentInfo field\n\
    \   so that an EnvelopedData value may be processed in a single pass.\n"
- title: 6.2  RecipientInfo Type
  contents:
  - "6.2  RecipientInfo Type\n   Per-recipient information is represented in the type\
    \ RecipientInfo.\n   RecipientInfo has a different format for each of the supported\
    \ key\n   management techniques.  Any of the key management techniques can be\n\
    \   used for each recipient of the same encrypted content.  In all cases,\n  \
    \ the encrypted content-encryption key is transferred to one or more\n   recipients.\n\
    \   Since all implementations will not support every possible key\n   management\
    \ algorithm, all implementations MUST gracefully handle\n   unimplemented algorithms\
    \ when they are encountered.  For example, if\n   a recipient receives a content-encryption\
    \ key encrypted in their RSA\n   public key using RSA-OAEP and the implementation\
    \ only supports RSA\n   PKCS #1 v1.5, then a graceful failure must be implemented.\n\
    \   Implementations MUST support key transport, key agreement, and\n   previously\
    \ distributed symmetric key-encryption keys, as represented\n   by ktri, kari,\
    \ and kekri, respectively.  Implementations MAY support\n   the password-based\
    \ key management as represented by pwri.\n   Implementations MAY support any other\
    \ key management technique as\n   represented by ori.  Since each recipient can\
    \ employ a different key\n   management technique and future specifications could\
    \ define\n   additional key management techniques, all implementations MUST\n\
    \   gracefully handle unimplemented alternatives within the RecipientInfo\n  \
    \ CHOICE, all implementations MUST gracefully handle unimplemented\n   versions\
    \ of otherwise supported alternatives within the RecipientInfo\n   CHOICE, and\
    \ all implementations MUST gracefully handle unimplemented\n   or unknown ori\
    \ alternatives.\n      RecipientInfo ::= CHOICE {\n        ktri KeyTransRecipientInfo,\n\
    \        kari [1] KeyAgreeRecipientInfo,\n        kekri [2] KEKRecipientInfo,\n\
    \        pwri [3] PasswordRecipientinfo,\n        ori [4] OtherRecipientInfo }\n\
    \      EncryptedKey ::= OCTET STRING\n"
- title: 6.2.1  KeyTransRecipientInfo Type
  contents:
  - "6.2.1  KeyTransRecipientInfo Type\n   Per-recipient information using key transport\
    \ is represented in the\n   type KeyTransRecipientInfo.  Each instance of KeyTransRecipientInfo\n\
    \   transfers the content-encryption key to one recipient.\n      KeyTransRecipientInfo\
    \ ::= SEQUENCE {\n        version CMSVersion,  -- always set to 0 or 2\n     \
    \   rid RecipientIdentifier,\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \        encryptedKey EncryptedKey }\n      RecipientIdentifier ::= CHOICE {\n\
    \        issuerAndSerialNumber IssuerAndSerialNumber,\n        subjectKeyIdentifier\
    \ [0] SubjectKeyIdentifier }\n   The fields of type KeyTransRecipientInfo have\
    \ the following meanings:\n      version is the syntax version number.  If the\
    \ RecipientIdentifier\n      is the CHOICE issuerAndSerialNumber, then the version\
    \ MUST be 0.\n      If the RecipientIdentifier is subjectKeyIdentifier, then the\n\
    \      version MUST be 2.\n      rid specifies the recipient's certificate or\
    \ key that was used by\n      the sender to protect the content-encryption key.\
    \  The\n      RecipientIdentifier provides two alternatives for specifying the\n\
    \      recipient's certificate, and thereby the recipient's public key.\n    \
    \  The recipient's certificate must contain a key transport public\n      key.\
    \  Therefore, a recipient X.509 version 3 certificate that\n      contains a key\
    \ usage extension MUST assert the keyEncipherment\n      bit.  The content-encryption\
    \ key is encrypted with the recipient's\n      public key.  The issuerAndSerialNumber\
    \ alternative identifies the\n      recipient's certificate by the issuer's distinguished\
    \ name and the\n      certificate serial number; the subjectKeyIdentifier identifies\
    \ the\n      recipient's certificate by the X.509 subjectKeyIdentifier\n     \
    \ extension value.  For recipient processing, implementations MUST\n      support\
    \ both of these alternatives for specifying the recipient's\n      certificate;\
    \ and for sender processing, implementations MUST\n      support at least one\
    \ of these alternatives.\n      keyEncryptionAlgorithm identifies the key-encryption\
    \ algorithm,\n      and any associated parameters, used to encrypt the content-\n\
    \      encryption key for the recipient.  The key-encryption process is\n    \
    \  described in Section 6.4.\n      encryptedKey is the result of encrypting the\
    \ content-encryption\n      key for the recipient.\n"
- title: 6.2.2  KeyAgreeRecipientInfo Type
  contents:
  - "6.2.2  KeyAgreeRecipientInfo Type\n   Recipient information using key agreement\
    \ is represented in the type\n   KeyAgreeRecipientInfo.  Each instance of KeyAgreeRecipientInfo\
    \ will\n   transfer the content-encryption key to one or more recipients that\n\
    \   use the same key agreement algorithm and domain parameters for that\n   algorithm.\n\
    \      KeyAgreeRecipientInfo ::= SEQUENCE {\n        version CMSVersion,  -- always\
    \ set to 3\n        originator [0] EXPLICIT OriginatorIdentifierOrKey,\n     \
    \   ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\n        keyEncryptionAlgorithm\
    \ KeyEncryptionAlgorithmIdentifier,\n        recipientEncryptedKeys RecipientEncryptedKeys\
    \ }\n      OriginatorIdentifierOrKey ::= CHOICE {\n        issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n        subjectKeyIdentifier [0] SubjectKeyIdentifier,\n\
    \        originatorKey [1] OriginatorPublicKey }\n      OriginatorPublicKey ::=\
    \ SEQUENCE {\n        algorithm AlgorithmIdentifier,\n        publicKey BIT STRING\
    \ }\n      RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey\n    \
    \  RecipientEncryptedKey ::= SEQUENCE {\n        rid KeyAgreeRecipientIdentifier,\n\
    \        encryptedKey EncryptedKey }\n      KeyAgreeRecipientIdentifier ::= CHOICE\
    \ {\n        issuerAndSerialNumber IssuerAndSerialNumber,\n        rKeyId [0]\
    \ IMPLICIT RecipientKeyIdentifier }\n      RecipientKeyIdentifier ::= SEQUENCE\
    \ {\n        subjectKeyIdentifier SubjectKeyIdentifier,\n        date GeneralizedTime\
    \ OPTIONAL,\n        other OtherKeyAttribute OPTIONAL }\n      SubjectKeyIdentifier\
    \ ::= OCTET STRING\n   The fields of type KeyAgreeRecipientInfo have the following\
    \ meanings:\n      version is the syntax version number.  It MUST always be 3.\n\
    \      originator is a CHOICE with three alternatives specifying the\n      sender's\
    \ key agreement public key.  The sender uses the\n      corresponding private\
    \ key and the recipient's public key to\n      generate a pairwise key.  The content-encryption\
    \ key is encrypted\n      in the pairwise key.  The issuerAndSerialNumber alternative\n\
    \      identifies the sender's certificate, and thereby the sender's\n      public\
    \ key, by the issuer's distinguished name and the certificate\n      serial number.\
    \  The subjectKeyIdentifier alternative identifies\n      the sender's certificate,\
    \ and thereby the sender's public key, by\n      the X.509 subjectKeyIdentifier\
    \ extension value.  The originatorKey\n      alternative includes the algorithm\
    \ identifier and sender's key\n      agreement public key.  This alternative permits\
    \ originator\n      anonymity since the public key is not certified.  Implementations\n\
    \      MUST support all three alternatives for specifying the sender's\n     \
    \ public key.\n      ukm is optional.  With some key agreement algorithms, the\
    \ sender\n      provides a User Keying Material (UKM) to ensure that a different\n\
    \      key is generated each time the same two parties generate a\n      pairwise\
    \ key.  Implementations MUST support recipient processing\n      of a KeyAgreeRecipientInfo\
    \ SEQUENCE that includes a ukm field.\n      Implementations that do not support\
    \ key agreement algorithms that\n      make use of UKMs MUST gracefully handle\
    \ the presence of UKMs.\n      keyEncryptionAlgorithm identifies the key-encryption\
    \ algorithm,\n      and any associated parameters, used to encrypt the content-\n\
    \      encryption key with the key-encryption key.  The key-encryption\n     \
    \ process is described in Section 6.4.\n      recipientEncryptedKeys includes\
    \ a recipient identifier and\n      encrypted key for one or more recipients.\
    \  The\n      KeyAgreeRecipientIdentifier is a CHOICE with two alternatives\n\
    \      specifying the recipient's certificate, and thereby the\n      recipient's\
    \ public key, that was used by the sender to generate a\n      pairwise key-encryption\
    \ key.  The recipient's certificate must\n      contain a key agreement public\
    \ key.  Therefore, a recipient X.509\n      version 3 certificate that contains\
    \ a key usage extension MUST\n      assert the keyAgreement bit.  The content-encryption\
    \ key is\n      encrypted in the pairwise key-encryption key.  The\n      issuerAndSerialNumber\
    \ alternative identifies the recipient's\n      certificate by the issuer's distinguished\
    \ name and the certificate\n      serial number; the RecipientKeyIdentifier is\
    \ described below.  The\n      encryptedKey is the result of encrypting the content-encryption\n\
    \      key in the pairwise key-encryption key generated using the key\n      agreement\
    \ algorithm.  Implementations MUST support both\n      alternatives for specifying\
    \ the recipient's certificate.\n   The fields of type RecipientKeyIdentifier have\
    \ the following\n   meanings:\n      subjectKeyIdentifier identifies the recipient's\
    \ certificate by the\n      X.509 subjectKeyIdentifier extension value.\n    \
    \  date is optional.  When present, the date specifies which of the\n      recipient's\
    \ previously distributed UKMs was used by the sender.\n      other is optional.\
    \  When present, this field contains additional\n      information used by the\
    \ recipient to locate the public keying\n      material used by the sender.\n"
- title: 6.2.3  KEKRecipientInfo Type
  contents:
  - "6.2.3  KEKRecipientInfo Type\n   Recipient information using previously distributed\
    \ symmetric keys is\n   represented in the type KEKRecipientInfo.  Each instance\
    \ of\n   KEKRecipientInfo will transfer the content-encryption key to one or\n\
    \   more recipients who have the previously distributed key-encryption\n   key.\n\
    \      KEKRecipientInfo ::= SEQUENCE {\n        version CMSVersion,  -- always\
    \ set to 4\n        kekid KEKIdentifier,\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \        encryptedKey EncryptedKey }\n      KEKIdentifier ::= SEQUENCE {\n   \
    \     keyIdentifier OCTET STRING,\n        date GeneralizedTime OPTIONAL,\n  \
    \      other OtherKeyAttribute OPTIONAL }\n   The fields of type KEKRecipientInfo\
    \ have the following meanings:\n      version is the syntax version number.  It\
    \ MUST always be 4.\n      kekid specifies a symmetric key-encryption key that\
    \ was previously\n      distributed to the sender and one or more recipients.\n\
    \      keyEncryptionAlgorithm identifies the key-encryption algorithm,\n     \
    \ and any associated parameters, used to encrypt the content-\n      encryption\
    \ key with the key-encryption key.  The key-encryption\n      process is described\
    \ in Section 6.4.\n      encryptedKey is the result of encrypting the content-encryption\n\
    \      key in the key-encryption key.\n   The fields of type KEKIdentifier have\
    \ the following meanings:\n      keyIdentifier identifies the key-encryption key\
    \ that was\n      previously distributed to the sender and one or more recipients.\n\
    \      date is optional.  When present, the date specifies a single key-\n   \
    \   encryption key from a set that was previously distributed.\n      other is\
    \ optional.  When present, this field contains additional\n      information used\
    \ by the recipient to determine the key-encryption\n      key used by the sender.\n"
- title: 6.2.4  PasswordRecipientInfo Type
  contents:
  - "6.2.4  PasswordRecipientInfo Type\n   Recipient information using a password\
    \ or shared secret value is\n   represented in the type PasswordRecipientInfo.\
    \  Each instance of\n   PasswordRecipientInfo will transfer the content-encryption\
    \ key to one\n   or more recipients who possess the password or shared secret\
    \ value.\n   The PasswordRecipientInfo Type is specified in RFC 3211 [PWRI]. \
    \ The\n   PasswordRecipientInfo structure is repeated here for completeness.\n\
    \      PasswordRecipientInfo ::= SEQUENCE {\n        version CMSVersion,   --\
    \ Always set to 0\n        keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier\n\
    \                                   OPTIONAL,\n        keyEncryptionAlgorithm\
    \ KeyEncryptionAlgorithmIdentifier,\n        encryptedKey EncryptedKey }\n   The\
    \ fields of type PasswordRecipientInfo have the following meanings:\n      version\
    \ is the syntax version number.  It MUST always be 0.\n      keyDerivationAlgorithm\
    \ identifies the key-derivation algorithm,\n      and any associated parameters,\
    \ used to derive the key-encryption\n      key from the password or shared secret\
    \ value.  If this field is\n      absent, the key-encryption key is supplied from\
    \ an external\n      source, for example a hardware crypto token such as a smart\
    \ card.\n      keyEncryptionAlgorithm identifies the encryption algorithm, and\n\
    \      any associated parameters, used to encrypt the content-encryption\n   \
    \   key with the key-encryption key.\n      encryptedKey is the result of encrypting\
    \ the content-encryption\n      key with the key-encryption key.\n"
- title: 6.2.5  OtherRecipientInfo Type
  contents:
  - "6.2.5  OtherRecipientInfo Type\n   Recipient information for additional key management\
    \ techniques are\n   represented in the type OtherRecipientInfo.  The OtherRecipientInfo\n\
    \   type allows key management techniques beyond key transport, key\n   agreement,\
    \ previously distributed symmetric key-encryption keys, and\n   password-based\
    \ key management to be specified in future documents.\n   An object identifier\
    \ uniquely identifies such key management\n   techniques.\n      OtherRecipientInfo\
    \ ::= SEQUENCE {\n        oriType OBJECT IDENTIFIER,\n        oriValue ANY DEFINED\
    \ BY oriType }\n   The fields of type OtherRecipientInfo have the following meanings:\n\
    \      oriType identifies the key management technique.\n      oriValue contains\
    \ the protocol data elements needed by a recipient\n      using the identified\
    \ key management technique.\n"
- title: 6.3  Content-encryption Process
  contents:
  - "6.3  Content-encryption Process\n   The content-encryption key for the desired\
    \ content-encryption\n   algorithm is randomly generated.  The data to be protected\
    \ is padded\n   as described below, then the padded data is encrypted using the\n\
    \   content-encryption key.  The encryption operation maps an arbitrary\n   string\
    \ of octets (the data) to another string of octets (the\n   ciphertext) under\
    \ control of a content-encryption key.  The encrypted\n   data is included in\
    \ the envelopedData encryptedContentInfo\n   encryptedContent OCTET STRING.\n\
    \   Some content-encryption algorithms assume the input length is a\n   multiple\
    \ of k octets, where k is greater than one.  For such\n   algorithms, the input\
    \ shall be padded at the trailing end with\n   k-(lth mod k) octets all having\
    \ value k-(lth mod k), where lth is\n   the length of the input.  In other words,\
    \ the input is padded at\n   the trailing end with one of the following strings:\n\
    \                     01 -- if lth mod k = k-1\n                  02 02 -- if\
    \ lth mod k = k-2\n                      .\n                      .\n        \
    \              .\n            k k ... k k -- if lth mod k = 0\n   The padding\
    \ can be removed unambiguously since all input is padded,\n   including input\
    \ values that are already a multiple of the block size,\n   and no padding string\
    \ is a suffix of another.  This padding method is\n   well defined if and only\
    \ if k is less than 256.\n"
- title: 6.4  Key-encryption Process
  contents:
  - "6.4  Key-encryption Process\n   The input to the key-encryption process -- the\
    \ value supplied to the\n   recipient's key-encryption algorithm -- is just the\
    \ \"value\" of the\n   content-encryption key.\n   Any of the aforementioned key\
    \ management techniques can be used for\n   each recipient of the same encrypted\
    \ content.\n"
- title: 7.  Digested-data Content Type
  contents:
  - "7.  Digested-data Content Type\n   The digested-data content type consists of\
    \ content of any type and a\n   message digest of the content.\n   Typically,\
    \ the digested-data content type is used to provide content\n   integrity, and\
    \ the result generally becomes an input to the\n   enveloped-data content type.\n\
    \   The following steps construct digested-data:\n      1.  A message digest is\
    \ computed on the content with a message-\n      digest algorithm.\n      2. \
    \ The message-digest algorithm and the message digest are\n      collected together\
    \ with the content into a DigestedData value.\n   A recipient verifies the message\
    \ digest by comparing the message\n   digest to an independently computed message\
    \ digest.\n   The following object identifier identifies the digested-data content\n\
    \   type:\n      id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 5 }\n   The digested-data content\
    \ type shall have ASN.1 type DigestedData:\n      DigestedData ::= SEQUENCE {\n\
    \        version CMSVersion,\n        digestAlgorithm DigestAlgorithmIdentifier,\n\
    \        encapContentInfo EncapsulatedContentInfo,\n        digest Digest }\n\
    \      Digest ::= OCTET STRING\n   The fields of type DigestedData have the following\
    \ meanings:\n      version is the syntax version number.  If the encapsulated\
    \ content\n      type is id-data, then the value of version MUST be 0; however,\
    \ if\n      the encapsulated content type is other than id-data, then the\n  \
    \    value of version MUST be 2.\n      digestAlgorithm identifies the message\
    \ digest algorithm, and any\n      associated parameters, under which the content\
    \ is digested.  The\n      message-digesting process is the same as in Section\
    \ 5.4 in the\n      case when there are no signed attributes.\n      encapContentInfo\
    \ is the content that is digested, as defined in\n      section 5.2.\n      digest\
    \ is the result of the message-digesting process.\n   The ordering of the digestAlgorithm\
    \ field, the encapContentInfo\n   field, and the digest field makes it possible\
    \ to process a\n   DigestedData value in a single pass.\n"
- title: 8.  Encrypted-data Content Type
  contents:
  - "8.  Encrypted-data Content Type\n   The encrypted-data content type consists\
    \ of encrypted content of any\n   type.  Unlike the enveloped-data content type,\
    \ the encrypted-data\n   content type has neither recipients nor encrypted content-encryption\n\
    \   keys.  Keys MUST be managed by other means.\n   The typical application of\
    \ the encrypted-data content type will be to\n   encrypt the content of the data\
    \ content type for local storage,\n   perhaps where the encryption key is derived\
    \ from a password.\n   The following object identifier identifies the encrypted-data\
    \ content\n   type:\n      id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }\n   The encrypted-data\
    \ content type shall have ASN.1 type EncryptedData:\n      EncryptedData ::= SEQUENCE\
    \ {\n        version CMSVersion,\n        encryptedContentInfo EncryptedContentInfo,\n\
    \        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\n   The\
    \ fields of type EncryptedData have the following meanings:\n      version is\
    \ the syntax version number.  If unprotectedAttrs is\n      present, then version\
    \ MUST be 2.  If unprotectedAttrs is absent,\n      then version MUST be 0.\n\
    \      encryptedContentInfo is the encrypted content information, as\n      defined\
    \ in Section 6.1.\n      unprotectedAttrs is a collection of attributes that are\
    \ not\n      encrypted.  The field is optional.  Useful attribute types are\n\
    \      defined in Section 11.\n"
- title: 9.  Authenticated-data Content Type
  contents:
  - "9.  Authenticated-data Content Type\n   The authenticated-data content type consists\
    \ of content of any type,\n   a message authentication code (MAC), and encrypted\
    \ authentication\n   keys for one or more recipients.  The combination of the\
    \ MAC and one\n   encrypted authentication key for a recipient is necessary for\
    \ that\n   recipient to verify the integrity of the content.  Any type of\n  \
    \ content can be integrity protected for an arbitrary number of\n   recipients.\n\
    \   The process by which authenticated-data is constructed involves the\n   following\
    \ steps:\n      1.  A message-authentication key for a particular message-\n \
    \     authentication algorithm is generated at random.\n      2.  The message-authentication\
    \ key is encrypted for each\n      recipient.  The details of this encryption\
    \ depend on the key\n      management algorithm used.\n      3.  For each recipient,\
    \ the encrypted message-authentication key\n      and other recipient-specific\
    \ information are collected into a\n      RecipientInfo value, defined in Section\
    \ 6.2.\n      4.  Using the message-authentication key, the originator computes\n\
    \      a MAC value on the content.  If the originator is authenticating\n    \
    \  any information in addition to the content (see Section 9.2), a\n      message\
    \ digest is calculated on the content, the message digest of\n      the content\
    \ and the other information are authenticated using the\n      message-authentication\
    \ key, and the result becomes the \"MAC\n      value.\"\n"
- title: 9.1  AuthenticatedData Type
  contents:
  - "9.1  AuthenticatedData Type\n   The following object identifier identifies the\
    \ authenticated-data\n   content type:\n      id-ct-authData OBJECT IDENTIFIER\
    \ ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\
    \ smime(16)\n          ct(1) 2 }\n   The authenticated-data content type shall\
    \ have ASN.1 type\n   AuthenticatedData:\n      AuthenticatedData ::= SEQUENCE\
    \ {\n        version CMSVersion,\n        originatorInfo [0] IMPLICIT OriginatorInfo\
    \ OPTIONAL,\n        recipientInfos RecipientInfos,\n        macAlgorithm MessageAuthenticationCodeAlgorithm,\n\
    \        digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,\n        encapContentInfo\
    \ EncapsulatedContentInfo,\n        authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,\n\
    \        mac MessageAuthenticationCode,\n        unauthAttrs [3] IMPLICIT UnauthAttributes\
    \ OPTIONAL }\n      AuthAttributes ::= SET SIZE (1..MAX) OF Attribute\n      UnauthAttributes\
    \ ::= SET SIZE (1..MAX) OF Attribute\n      MessageAuthenticationCode ::= OCTET\
    \ STRING\n   The fields of type AuthenticatedData have the following meanings:\n\
    \      version is the syntax version number.  The version MUST be\n      assigned\
    \ as follows:\n         IF ((originatorInfo is present) AND\n             (any\
    \ version 2 attribute certificates are present))\n         THEN version is 1\n\
    \         ELSE version is 0\n      originatorInfo optionally provides information\
    \ about the\n      originator.  It is present only if required by the key management\n\
    \      algorithm.  It MAY contain certificates, attribute certificates,\n    \
    \  and CRLs, as defined in Section 6.1.\n      recipientInfos is a collection\
    \ of per-recipient information, as\n      defined in Section 6.1.  There MUST\
    \ be at least one element in the\n      collection.\n      macAlgorithm is a message\
    \ authentication code (MAC) algorithm\n      identifier.  It identifies the MAC\
    \ algorithm, along with any\n      associated parameters, used by the originator.\
    \  Placement of the\n      macAlgorithm field facilitates one-pass processing\
    \ by the\n      recipient.\n      digestAlgorithm identifies the message digest\
    \ algorithm, and any\n      associated parameters, used to compute a message digest\
    \ on the\n      encapsulated content if authenticated attributes are present.\
    \  The\n      message digesting process is described in Section 9.2.  Placement\n\
    \      of the digestAlgorithm field facilitates one-pass processing by\n     \
    \ the recipient.  If the digestAlgorithm field is present, then the\n      authAttrs\
    \ field MUST also be present.\n      encapContentInfo is the content that is authenticated,\
    \ as defined\n      in section 5.2.\n      authAttrs is a collection of authenticated\
    \ attributes.  The\n      authAttrs structure is optional, but it MUST be present\
    \ if the\n      content type of the EncapsulatedContentInfo value being\n    \
    \  authenticated is not id-data.  If the authAttrs field is present,\n      then\
    \ the digestAlgorithm field MUST also be present.  The\n      AuthAttributes structure\
    \ MUST be DER encoded, even if the rest of\n      the structure is BER encoded.\
    \  Useful attribute types are defined\n      in Section 11.  If the authAttrs\
    \ field is present, it MUST\n      contain, at a minimum, the following two attributes:\n\
    \         A content-type attribute having as its value the content type\n    \
    \     of the EncapsulatedContentInfo value being authenticated.\n         Section\
    \ 11.1 defines the content-type attribute.\n         A message-digest attribute,\
    \ having as its value the message\n         digest of the content.  Section 11.2\
    \ defines the message-digest\n         attribute.\n      mac is the message authentication\
    \ code.\n      unauthAttrs is a collection of attributes that are not\n      authenticated.\
    \  The field is optional.  To date, no attributes\n      have been defined for\
    \ use as unauthenticated attributes, but other\n      useful attribute types are\
    \ defined in Section 11.\n"
- title: 9.2  MAC Generation
  contents:
  - "9.2  MAC Generation\n   The MAC calculation process computes a message authentication\
    \ code\n   (MAC) on either the content being authenticated or a message digest\n\
    \   of content being authenticated together with the originator's\n   authenticated\
    \ attributes.\n   If authAttrs field is absent, the input to the MAC calculation\n\
    \   process is the value of the encapContentInfo eContent OCTET STRING.\n   Only\
    \ the octets comprising the value of the eContent OCTET STRING are\n   input to\
    \ the MAC algorithm; the tag and the length octets are\n   omitted.  This has\
    \ the advantage that the length of the content being\n   authenticated need not\
    \ be known in advance of the MAC generation\n   process.\n   If authAttrs field\
    \ is present, the content-type attribute (as\n   described in Section 11.1) and\
    \ the message-digest attribute (as\n   described in section 11.2) MUST be included,\
    \ and the input to the MAC\n   calculation process is the DER encoding of authAttrs.\
    \  A separate\n   encoding of the authAttrs field is performed for message digest\n\
    \   calculation.  The IMPLICIT [2] tag in the authAttrs field is not used\n  \
    \ for the DER encoding, rather an EXPLICIT SET OF tag is used.  That\n   is, the\
    \ DER encoding of the SET OF tag, rather than of the IMPLICIT\n   [2] tag, is\
    \ to be included in the message digest calculation along\n   with the length and\
    \ content octets of the authAttrs value.\n   The message digest calculation process\
    \ computes a message digest on\n   the content being authenticated.  The initial\
    \ input to the message\n   digest calculation process is the \"value\" of the\
    \ encapsulated content\n   being authenticated.  Specifically, the input is the\
    \ encapContentInfo\n   eContent OCTET STRING to which the authentication process\
    \ is applied.\n   Only the octets comprising the value of the encapContentInfo\
    \ eContent\n   OCTET STRING are input to the message digest algorithm, not the\
    \ tag\n   or the length octets.  This has the advantage that the length of the\n\
    \   content being authenticated need not be known in advance.  Although\n   the\
    \ encapContentInfo eContent OCTET STRING tag and length octets are\n   not included\
    \ in the message digest calculation, they are still\n   protected by other means.\
    \  The length octets are protected by the\n   nature of the message digest algorithm\
    \ since it is computationally\n   infeasible to find any two distinct contents\
    \ of any length that have\n   the same message digest.\n   The input to the MAC\
    \ calculation process includes the MAC input data,\n   defined above, and an authentication\
    \ key conveyed in a recipientInfo\n   structure.  The details of MAC calculation\
    \ depend on the MAC\n   algorithm employed (e.g., HMAC).  The object identifier,\
    \ along with\n   any parameters, that specifies the MAC algorithm employed by\
    \ the\n   originator is carried in the macAlgorithm field.  The MAC value\n  \
    \ generated by the originator is encoded as an OCTET STRING and carried\n   in\
    \ the mac field.\n"
- title: 9.3  MAC Verification
  contents:
  - "9.3  MAC Verification\n   The input to the MAC verification process includes\
    \ the input data\n   (determined based on the presence or absence of the authAttrs\
    \ field,\n   as defined in 9.2), and the authentication key conveyed in\n   recipientInfo.\
    \  The details of the MAC verification process depend on\n   the MAC algorithm\
    \ employed.\n   The recipient MUST NOT rely on any MAC values or message digest\n\
    \   values computed by the originator.  The content is authenticated as\n   described\
    \ in section 9.2.  If the originator includes authenticated\n   attributes, then\
    \ the content of the authAttrs is authenticated as\n   described in section 9.2.\
    \  For authentication to succeed, the MAC\n   value calculated by the recipient\
    \ MUST be the same as the value of\n   the mac field.  Similarly, for authentication\
    \ to succeed when the\n   authAttrs field is present, the content message digest\
    \ value\n   calculated by the recipient MUST be the same as the message digest\n\
    \   value included in the authAttrs message-digest attribute.\n   If the AuthenticatedData\
    \ includes authAttrs, then the content-type\n   attribute value MUST match the\
    \ AuthenticatedData encapContentInfo\n   eContentType value.\n"
- title: 10.  Useful Types
  contents:
  - "10.  Useful Types\n   This section is divided into two parts.  The first part\
    \ defines\n   algorithm identifiers, and the second part defines other useful\n\
    \   types.\n"
- title: 10.1  Algorithm Identifier Types
  contents:
  - "10.1  Algorithm Identifier Types\n   All of the algorithm identifiers have the\
    \ same type:\n   AlgorithmIdentifier.  The definition of AlgorithmIdentifier is\
    \ taken\n   from X.509 [X.509-88].\n   There are many alternatives for each algorithm\
    \ type.\n"
- title: 10.1.1  DigestAlgorithmIdentifier
  contents:
  - "10.1.1  DigestAlgorithmIdentifier\n   The DigestAlgorithmIdentifier type identifies\
    \ a message-digest\n   algorithm.  Examples include SHA-1, MD2, and MD5.  A message-digest\n\
    \   algorithm maps an octet string (the content) to another octet string\n   (the\
    \ message digest).\n      DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.1.2  SignatureAlgorithmIdentifier
  contents:
  - "10.1.2  SignatureAlgorithmIdentifier\n   The SignatureAlgorithmIdentifier type\
    \ identifies a signature\n   algorithm.  Examples include RSA, DSA, and ECDSA.\
    \  A signature\n   algorithm supports signature generation and verification operations.\n\
    \   The signature generation operation uses the message digest and the\n   signer's\
    \ private key to generate a signature value.  The signature\n   verification operation\
    \ uses the message digest and the signer's\n   public key to determine whether\
    \ or not a signature value is valid.\n   Context determines which operation is\
    \ intended.\n      SignatureAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.1.3  KeyEncryptionAlgorithmIdentifier
  contents:
  - "10.1.3  KeyEncryptionAlgorithmIdentifier\n   The KeyEncryptionAlgorithmIdentifier\
    \ type identifies a key-encryption\n   algorithm used to encrypt a content-encryption\
    \ key.  The encryption\n   operation maps an octet string (the key) to another\
    \ octet string (the\n   encrypted key) under control of a key-encryption key.\
    \  The decryption\n   operation is the inverse of the encryption operation.  Context\n\
    \   determines which operation is intended.\n   The details of encryption and\
    \ decryption depend on the key management\n   algorithm used.  Key transport,\
    \ key agreement, previously distributed\n   symmetric key-encrypting keys, and\
    \ symmetric key-encrypting keys\n   derived from passwords are supported.\n  \
    \    KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.1.4  ContentEncryptionAlgorithmIdentifier
  contents:
  - "10.1.4  ContentEncryptionAlgorithmIdentifier\n   The ContentEncryptionAlgorithmIdentifier\
    \ type identifies a content-\n   encryption algorithm.  Examples include Triple-DES\
    \ and RC2.  A\n   content-encryption algorithm supports encryption and decryption\n\
    \   operations.  The encryption operation maps an octet string (the\n   plaintext)\
    \ to another octet string (the ciphertext) under control of\n   a content-encryption\
    \ key.  The decryption operation is the inverse of\n   the encryption operation.\
    \  Context determines which operation is\n   intended.\n      ContentEncryptionAlgorithmIdentifier\
    \ ::= AlgorithmIdentifier\n"
- title: 10.1.5  MessageAuthenticationCodeAlgorithm
  contents:
  - "10.1.5  MessageAuthenticationCodeAlgorithm\n   The MessageAuthenticationCodeAlgorithm\
    \ type identifies a message\n   authentication code (MAC) algorithm.  Examples\
    \ include DES-MAC and\n   HMAC-SHA-1.  A MAC algorithm supports generation and\
    \ verification\n   operations.  The MAC generation and verification operations\
    \ use the\n   same symmetric key.  Context determines which operation is intended.\n\
    \      MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier\n"
- title: 10.1.6  KeyDerivationAlgorithmIdentifier
  contents:
  - "10.1.6  KeyDerivationAlgorithmIdentifier\n   The KeyDerivationAlgorithmIdentifier\
    \ type is specified in RFC 3211\n   [PWRI].  The KeyDerivationAlgorithmIdentifier\
    \ definition is repeated\n   here for completeness.\n   Key derivation algorithms\
    \ convert a password or shared secret value\n   into a key-encryption key.\n \
    \     KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.2  Other Useful Types
  contents:
  - "10.2  Other Useful Types\n   This section defines types that are used other places\
    \ in the\n   document.  The types are not listed in any particular order.\n"
- title: 10.2.1  CertificateRevocationLists
  contents:
  - "10.2.1  CertificateRevocationLists\n   The CertificateRevocationLists type gives\
    \ a set of certificate\n   revocation lists (CRLs).  It is intended that the set\
    \ contain\n   information sufficient to determine whether the certificates and\n\
    \   attribute certificates with which the set is associated are revoked.\n   However,\
    \ there may be more CRLs than necessary or there MAY be fewer\n   CRLs than necessary.\n\
    \   The CertificateList may contain a CRL, an Authority Revocation List\n   (ARL),\
    \ a Delta CRL, or an Attribute Certificate Revocation List.  All\n   of these\
    \ lists share a common syntax.\n   CRLs are specified in X.509 [X.509-97], and\
    \ they are profiled for use\n   in the Internet in RFC 3280 [PROFILE].\n   The\
    \ definition of CertificateList is taken from X.509.\n      CertificateRevocationLists\
    \ ::= SET OF CertificateList\n"
- title: 10.2.2  CertificateChoices
  contents:
  - "10.2.2  CertificateChoices\n   The CertificateChoices type gives either a PKCS\
    \ #6 extended\n   certificate [PKCS#6], an X.509 certificate, a version 1 X.509\n\
    \   attribute certificate (ACv1) [X.509-97], or a version 2 X.509\n   attribute\
    \ certificate (ACv2) [X.509-00].  The PKCS #6 extended\n   certificate is obsolete.\
    \  The PKCS #6 certificate is included for\n   backward compatibility, and PKCS\
    \ #6 certificates SHOULD NOT be used.\n   The ACv1 is also obsolete.  ACv1 is\
    \ included for backward\n   compatibility, and ACv1 SHOULD NOT be used.  The Internet\
    \ profile of\n   X.509 certificates is specified in the \"Internet X.509 Public\
    \ Key\n   Infrastructure: Certificate and CRL Profile\" [PROFILE].  The Internet\n\
    \   profile of ACv2 is specified in the \"An Internet Attribute\n   Certificate\
    \ Profile for Authorization\" [ACPROFILE].\n   The definition of Certificate is\
    \ taken from X.509.\n   The definitions of AttributeCertificate are taken from\
    \ X.509-1997 and\n   X.509-2000.  The definition from X.509-1997 is assigned to\n\
    \   AttributeCertificateV1 (see section 12.2), and the definition from\n   X.509-2000\
    \ is assigned to AttributeCertificateV2.\n      CertificateChoices ::= CHOICE\
    \ {\n      certificate Certificate,\n      extendedCertificate [0] IMPLICIT ExtendedCertificate,\
    \  -- Obsolete\n      v1AttrCert [1] IMPLICIT AttributeCertificateV1,        --\
    \ Obsolete\n      v2AttrCert [2] IMPLICIT AttributeCertificateV2 }\n"
- title: 10.2.3  CertificateSet
  contents:
  - "10.2.3  CertificateSet\n   The CertificateSet type provides a set of certificates.\
    \  It is\n   intended that the set be sufficient to contain chains from a\n  \
    \ recognized \"root\" or \"top-level certification authority\" to all of\n   the\
    \ sender certificates with which the set is associated.  However,\n   there may\
    \ be more certificates than necessary, or there MAY be fewer\n   than necessary.\n\
    \   The precise meaning of a \"chain\" is outside the scope of this\n   document.\
    \  Some applications may impose upper limits on the length of\n   a chain; others\
    \ may enforce certain relationships between the\n   subjects and issuers of certificates\
    \ within a chain.\n      CertificateSet ::= SET OF CertificateChoices\n"
- title: 10.2.4  IssuerAndSerialNumber
  contents:
  - "10.2.4  IssuerAndSerialNumber\n   The IssuerAndSerialNumber type identifies a\
    \ certificate, and thereby\n   an entity and a public key, by the distinguished\
    \ name of the\n   certificate issuer and an issuer-specific certificate serial\
    \ number.\n   The definition of Name is taken from X.501 [X.501-88], and the\n\
    \   definition of CertificateSerialNumber is taken from X.509 [X.509-97].\n  \
    \    IssuerAndSerialNumber ::= SEQUENCE {\n        issuer Name,\n        serialNumber\
    \ CertificateSerialNumber }\n      CertificateSerialNumber ::= INTEGER\n"
- title: 10.2.5  CMSVersion
  contents:
  - "10.2.5  CMSVersion\n   The CMSVersion type gives a syntax version number, for\
    \ compatibility\n   with future revisions of this specification.\n      CMSVersion\
    \ ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }\n"
- title: 10.2.6  UserKeyingMaterial
  contents:
  - "10.2.6  UserKeyingMaterial\n   The UserKeyingMaterial type gives a syntax for\
    \ user keying material\n   (UKM).  Some key agreement algorithms require UKMs\
    \ to ensure that a\n   different key is generated each time the same two parties\
    \ generate a\n   pairwise key.  The sender provides a UKM for use with a specific\
    \ key\n   agreement algorithm.\n      UserKeyingMaterial ::= OCTET STRING\n"
- title: 10.2.7  OtherKeyAttribute
  contents:
  - "10.2.7  OtherKeyAttribute\n   The OtherKeyAttribute type gives a syntax for the\
    \ inclusion of other\n   key attributes that permit the recipient to select the\
    \ key used by\n   the sender.  The attribute object identifier must be registered\
    \ along\n   with the syntax of the attribute itself.  Use of this structure\n\
    \   should be avoided since it might impede interoperability.\n      OtherKeyAttribute\
    \ ::= SEQUENCE {\n        keyAttrId OBJECT IDENTIFIER,\n        keyAttr ANY DEFINED\
    \ BY keyAttrId OPTIONAL }\n"
- title: 11.  Useful Attributes
  contents:
  - "11.  Useful Attributes\n   This section defines attributes that may be used with\
    \ signed-data,\n   enveloped-data, encrypted-data, or authenticated-data.  The\
    \ syntax of\n   Attribute is compatible with X.501 [X.501-88] and RFC 3280 [PROFILE].\n\
    \   Some of the attributes defined in this section were originally\n   defined\
    \ in PKCS #9 [PKCS#9]; others were originally defined in a\n   previous version\
    \ of this specification [OLDCMS].  The attributes are\n   not listed in any particular\
    \ order.\n   Additional attributes are defined in many places, notably the S/MIME\n\
    \   Version 3 Message Specification [MSG] and the Enhanced Security\n   Services\
    \ for S/MIME [ESS], which also include recommendations on the\n   placement of\
    \ these attributes.\n"
- title: 11.1  Content Type
  contents:
  - "11.1  Content Type\n   The content-type attribute type specifies the content\
    \ type of the\n   ContentInfo within signed-data or authenticated-data.  The content-\n\
    \   type attribute type MUST be present whenever signed attributes are\n   present\
    \ in signed-data or authenticated attributes present in\n   authenticated-data.\
    \  The content-type attribute value MUST match the\n   encapContentInfo eContentType\
    \ value in the signed-data or\n   authenticated-data.\n   The content-type attribute\
    \ MUST be a signed attribute or an\n   authenticated attribute; it MUST NOT be\
    \ an unsigned attribute,\n   unauthenticated attribute, or unprotected attribute.\n\
    \   The following object identifier identifies the content-type\n   attribute:\n\
    \      id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n        \
    \  us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }\n   Content-type attribute values\
    \ have ASN.1 type ContentType:\n      ContentType ::= OBJECT IDENTIFIER\n   Even\
    \ though the syntax is defined as a SET OF AttributeValue, a\n   content-type\
    \ attribute MUST have a single attribute value; zero or\n   multiple instances\
    \ of AttributeValue are not permitted.\n   The SignedAttributes and AuthAttributes\
    \ syntaxes are each defined as\n   a SET OF Attributes.  The SignedAttributes\
    \ in a signerInfo MUST NOT\n   include multiple instances of the content-type\
    \ attribute.  Similarly,\n   the AuthAttributes in an AuthenticatedData MUST NOT\
    \ include multiple\n   instances of the content-type attribute.\n"
- title: 11.2  Message Digest
  contents:
  - "11.2  Message Digest\n   The message-digest attribute type specifies the message\
    \ digest of the\n   encapContentInfo eContent OCTET STRING being signed in signed-data\n\
    \   (see section 5.4) or authenticated in authenticated-data (see section\n  \
    \ 9.2).  For signed-data, the message digest is computed using the\n   signer's\
    \ message digest algorithm.  For authenticated-data, the\n   message digest is\
    \ computed using the originator's message digest\n   algorithm.\n   Within signed-data,\
    \ the message-digest signed attribute type MUST be\n   present when there are\
    \ any signed attributes present.  Within\n   authenticated-data, the message-digest\
    \ authenticated attribute type\n   MUST be present when there are any authenticated\
    \ attributes present.\n   The message-digest attribute MUST be a signed attribute\
    \ or an\n   authenticated attribute; it MUST NOT be an unsigned attribute,\n \
    \  unauthenticated attribute, or unprotected attribute.\n   The following object\
    \ identifier identifies the message-digest\n   attribute:\n      id-messageDigest\
    \ OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 4 }\n   Message-digest attribute values have ASN.1 type MessageDigest:\n\
    \      MessageDigest ::= OCTET STRING\n   A message-digest attribute MUST have\
    \ a single attribute value, even\n   though the syntax is defined as a SET OF\
    \ AttributeValue.  There MUST\n   NOT be zero or multiple instances of AttributeValue\
    \ present.\n   The SignedAttributes syntax and AuthAttributes syntax are each\n\
    \   defined as a SET OF Attributes.  The SignedAttributes in a signerInfo\n  \
    \ MUST include only one instance of the message-digest attribute.\n   Similarly,\
    \ the AuthAttributes in an AuthenticatedData MUST include\n   only one instance\
    \ of the message-digest attribute.\n"
- title: 11.3  Signing Time
  contents:
  - "11.3  Signing Time\n   The signing-time attribute type specifies the time at\
    \ which the\n   signer (purportedly) performed the signing process.  The signing-time\n\
    \   attribute type is intended for use in signed-data.\n   The signing-time attribute\
    \ MUST be a signed attribute or an\n   authenticated attribute; it MUST NOT be\
    \ an unsigned attribute,\n   unauthenticated attribute, or unprotected attribute.\n\
    \   The following object identifier identifies the signing-time\n   attribute:\n\
    \      id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n        \
    \  us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }\n   Signing-time attribute values\
    \ have ASN.1 type SigningTime:\n      SigningTime ::= Time\n      Time ::= CHOICE\
    \ {\n        utcTime          UTCTime,\n        generalizedTime  GeneralizedTime\
    \ }\n   Note: The definition of Time matches the one specified in the 1997\n \
    \  version of X.509 [X.509-97].\n   Dates between 1 January 1950 and 31 December\
    \ 2049 (inclusive) MUST be\n   encoded as UTCTime.  Any dates with year values\
    \ before 1950 or after\n   2049 MUST be encoded as GeneralizedTime.\n   UTCTime\
    \ values MUST be expressed in Greenwich Mean Time (Zulu) and\n   MUST include\
    \ seconds (i.e., times are YYMMDDHHMMSSZ), even where the\n   number of seconds\
    \ is zero.  Midnight (GMT) MUST be represented as\n   \"YYMMDD000000Z\".  Century\
    \ information is implicit, and the century\n   MUST be determined as follows:\n\
    \      Where YY is greater than or equal to 50, the year MUST be\n      interpreted\
    \ as 19YY; and\n      Where YY is less than 50, the year MUST be interpreted as\
    \ 20YY.\n   GeneralizedTime values MUST be expressed in Greenwich Mean Time\n\
    \   (Zulu) and MUST include seconds (i.e., times are YYYYMMDDHHMMSSZ),\n   even\
    \ where the number of seconds is zero.  GeneralizedTime values\n   MUST NOT include\
    \ fractional seconds.\n   A signing-time attribute MUST have a single attribute\
    \ value, even\n   though the syntax is defined as a SET OF AttributeValue.  There\
    \ MUST\n   NOT be zero or multiple instances of AttributeValue present.\n   The\
    \ SignedAttributes syntax and the AuthAttributes syntax are each\n   defined as\
    \ a SET OF Attributes.  The SignedAttributes in a signerInfo\n   MUST NOT include\
    \ multiple instances of the signing-time attribute.\n   Similarly, the AuthAttributes\
    \ in an AuthenticatedData MUST NOT\n   include multiple instances of the signing-time\
    \ attribute.\n   No requirement is imposed concerning the correctness of the signing\n\
    \   time, and acceptance of a purported signing time is a matter of a\n   recipient's\
    \ discretion.  It is expected, however, that some signers,\n   such as time-stamp\
    \ servers, will be trusted implicitly.\n"
- title: 11.4  Countersignature
  contents:
  - "11.4  Countersignature\n   The countersignature attribute type specifies one\
    \ or more signatures\n   on the contents octets of the DER encoding of the signatureValue\n\
    \   field of a SignerInfo value in signed-data.  Thus, the\n   countersignature\
    \ attribute type countersigns (signs in serial)\n   another signature.\n   The\
    \ countersignature attribute MUST be an unsigned attribute; it MUST\n   NOT be\
    \ a signed attribute, an authenticated attribute, an\n   unauthenticated attribute,\
    \ or an unprotected attribute.\n   The following object identifier identifies\
    \ the countersignature\n   attribute:\n      id-countersignature OBJECT IDENTIFIER\
    \ ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs9(9)\
    \ 6 }\n   Countersignature attribute values have ASN.1 type Countersignature:\n\
    \      Countersignature ::= SignerInfo\n   Countersignature values have the same\
    \ meaning as SignerInfo values\n   for ordinary signatures, except that:\n   \
    \   1.  The signedAttributes field MUST NOT contain a content-type\n      attribute;\
    \ there is no content type for countersignatures.\n      2.  The signedAttributes\
    \ field MUST contain a message-digest\n      attribute if it contains any other\
    \ attributes.\n      3.  The input to the message-digesting process is the contents\n\
    \      octets of the DER encoding of the signatureValue field of the\n      SignerInfo\
    \ value with which the attribute is associated.\n   A countersignature attribute\
    \ can have multiple attribute values.  The\n   syntax is defined as a SET OF AttributeValue,\
    \ and there MUST be one\n   or more instances of AttributeValue present.\n   The\
    \ UnsignedAttributes syntax is defined as a SET OF Attributes.  The\n   UnsignedAttributes\
    \ in a signerInfo may include multiple instances of\n   the countersignature attribute.\n\
    \   A countersignature, since it has type SignerInfo, can itself contain\n   a\
    \ countersignature attribute.  Thus, it is possible to construct an\n   arbitrarily\
    \ long series of countersignatures.\n"
- title: 12.  ASN.1 Modules
  contents:
  - "12.  ASN.1 Modules\n   Section 12.1 contains the ASN.1 module for the CMS, and\
    \ section 12.2\n   contains the ASN.1 module for the Version 1 Attribute Certificate.\n"
- title: 12.1  CMS ASN.1 Module
  contents:
  - "12.1  CMS ASN.1 Module\n   CryptographicMessageSyntax\n       { iso(1) member-body(2)\
    \ us(840) rsadsi(113549)\n         pkcs(1) pkcs-9(9) smime(16) modules(0) cms-2001(14)\
    \ }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS All\n   -- The\
    \ types and values defined in this module are exported for use\n   -- in the other\
    \ ASN.1 modules.  Other applications may use them for\n   -- their own purposes.\n\
    \   IMPORTS\n     -- Imports from RFC 3280 [PROFILE], Appendix A.1\n         \
    \  AlgorithmIdentifier, Certificate, CertificateList,\n           CertificateSerialNumber,\
    \ Name\n              FROM PKIX1Explicit88 { iso(1)\n                   identified-organization(3)\
    \ dod(6) internet(1)\n                   security(5) mechanisms(5) pkix(7) mod(0)\n\
    \                   pkix1-explicit(18) }\n     -- Imports from RFC 3281 [ACPROFILE],\
    \ Appendix B\n           AttributeCertificate\n              FROM PKIXAttributeCertificate\
    \ { iso(1)\n                   identified-organization(3) dod(6) internet(1)\n\
    \                   security(5) mechanisms(5) pkix(7) mod(0)\n               \
    \    attribute-cert(12) }\n     -- Imports from Appendix B of this document\n\
    \           AttributeCertificateV1\n              FROM AttributeCertificateVersion1\
    \ { iso(1) member-body(2)\n                   us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\
    \ smime(16)\n                   modules(0) v1AttrCert(15) } ;\n   -- Cryptographic\
    \ Message Syntax\n   ContentInfo ::= SEQUENCE {\n     contentType ContentType,\n\
    \     content [0] EXPLICIT ANY DEFINED BY contentType }\n   ContentType ::= OBJECT\
    \ IDENTIFIER\n   SignedData ::= SEQUENCE {\n     version CMSVersion,\n     digestAlgorithms\
    \ DigestAlgorithmIdentifiers,\n     encapContentInfo EncapsulatedContentInfo,\n\
    \     certificates [0] IMPLICIT CertificateSet OPTIONAL,\n     crls [1] IMPLICIT\
    \ CertificateRevocationLists OPTIONAL,\n     signerInfos SignerInfos }\n   DigestAlgorithmIdentifiers\
    \ ::= SET OF DigestAlgorithmIdentifier\n   SignerInfos ::= SET OF SignerInfo\n\
    \   EncapsulatedContentInfo ::= SEQUENCE {\n     eContentType ContentType,\n \
    \    eContent [0] EXPLICIT OCTET STRING OPTIONAL }\n   SignerInfo ::= SEQUENCE\
    \ {\n     version CMSVersion,\n     sid SignerIdentifier,\n     digestAlgorithm\
    \ DigestAlgorithmIdentifier,\n     signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\n\
    \     signatureAlgorithm SignatureAlgorithmIdentifier,\n     signature SignatureValue,\n\
    \     unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\n   SignerIdentifier\
    \ ::= CHOICE {\n     issuerAndSerialNumber IssuerAndSerialNumber,\n     subjectKeyIdentifier\
    \ [0] SubjectKeyIdentifier }\n   SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\n\
    \   UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\n   Attribute ::= SEQUENCE\
    \ {\n     attrType OBJECT IDENTIFIER,\n     attrValues SET OF AttributeValue }\n\
    \   AttributeValue ::= ANY\n   SignatureValue ::= OCTET STRING\n   EnvelopedData\
    \ ::= SEQUENCE {\n     version CMSVersion,\n     originatorInfo [0] IMPLICIT OriginatorInfo\
    \ OPTIONAL,\n     recipientInfos RecipientInfos,\n     encryptedContentInfo EncryptedContentInfo,\n\
    \     unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\n   OriginatorInfo\
    \ ::= SEQUENCE {\n     certs [0] IMPLICIT CertificateSet OPTIONAL,\n     crls\
    \ [1] IMPLICIT CertificateRevocationLists OPTIONAL }\n   RecipientInfos ::= SET\
    \ SIZE (1..MAX) OF RecipientInfo\n   EncryptedContentInfo ::= SEQUENCE {\n   \
    \  contentType ContentType,\n     contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\n\
    \     encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\n   EncryptedContent\
    \ ::= OCTET STRING\n   UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute\n\
    \   RecipientInfo ::= CHOICE {\n     ktri KeyTransRecipientInfo,\n     kari [1]\
    \ KeyAgreeRecipientInfo,\n     kekri [2] KEKRecipientInfo,\n     pwri [3] PasswordRecipientInfo,\n\
    \     ori [4] OtherRecipientInfo }\n   EncryptedKey ::= OCTET STRING\n   KeyTransRecipientInfo\
    \ ::= SEQUENCE {\n     version CMSVersion,  -- always set to 0 or 2\n     rid\
    \ RecipientIdentifier,\n     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \     encryptedKey EncryptedKey }\n   RecipientIdentifier ::= CHOICE {\n     issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n     subjectKeyIdentifier [0] SubjectKeyIdentifier }\n\
    \   KeyAgreeRecipientInfo ::= SEQUENCE {\n     version CMSVersion,  -- always\
    \ set to 3\n     originator [0] EXPLICIT OriginatorIdentifierOrKey,\n     ukm\
    \ [1] EXPLICIT UserKeyingMaterial OPTIONAL,\n     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \     recipientEncryptedKeys RecipientEncryptedKeys }\n   OriginatorIdentifierOrKey\
    \ ::= CHOICE {\n     issuerAndSerialNumber IssuerAndSerialNumber,\n     subjectKeyIdentifier\
    \ [0] SubjectKeyIdentifier,\n     originatorKey [1] OriginatorPublicKey }\n  \
    \ OriginatorPublicKey ::= SEQUENCE {\n     algorithm AlgorithmIdentifier,\n  \
    \   publicKey BIT STRING }\n   RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey\n\
    \   RecipientEncryptedKey ::= SEQUENCE {\n     rid KeyAgreeRecipientIdentifier,\n\
    \     encryptedKey EncryptedKey }\n   KeyAgreeRecipientIdentifier ::= CHOICE {\n\
    \     issuerAndSerialNumber IssuerAndSerialNumber,\n     rKeyId [0] IMPLICIT RecipientKeyIdentifier\
    \ }\n   RecipientKeyIdentifier ::= SEQUENCE {\n     subjectKeyIdentifier SubjectKeyIdentifier,\n\
    \     date GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n\
    \   SubjectKeyIdentifier ::= OCTET STRING\n   KEKRecipientInfo ::= SEQUENCE {\n\
    \     version CMSVersion,  -- always set to 4\n     kekid KEKIdentifier,\n   \
    \  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n     encryptedKey\
    \ EncryptedKey }\n   KEKIdentifier ::= SEQUENCE {\n     keyIdentifier OCTET STRING,\n\
    \     date GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n\
    \   PasswordRecipientInfo ::= SEQUENCE {\n     version CMSVersion,   -- always\
    \ set to 0\n     keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier\n\
    \                                OPTIONAL,\n     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \     encryptedKey EncryptedKey }\n   OtherRecipientInfo ::= SEQUENCE {\n    \
    \ oriType OBJECT IDENTIFIER,\n     oriValue ANY DEFINED BY oriType }\n   DigestedData\
    \ ::= SEQUENCE {\n     version CMSVersion,\n     digestAlgorithm DigestAlgorithmIdentifier,\n\
    \     encapContentInfo EncapsulatedContentInfo,\n     digest Digest }\n   Digest\
    \ ::= OCTET STRING\n   EncryptedData ::= SEQUENCE {\n     version CMSVersion,\n\
    \     encryptedContentInfo EncryptedContentInfo,\n     unprotectedAttrs [1] IMPLICIT\
    \ UnprotectedAttributes OPTIONAL }\n   AuthenticatedData ::= SEQUENCE {\n    \
    \ version CMSVersion,\n     originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\n\
    \     recipientInfos RecipientInfos,\n     macAlgorithm MessageAuthenticationCodeAlgorithm,\n\
    \     digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,\n     encapContentInfo\
    \ EncapsulatedContentInfo,\n     authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,\n\
    \     mac MessageAuthenticationCode,\n     unauthAttrs [3] IMPLICIT UnauthAttributes\
    \ OPTIONAL }\n   AuthAttributes ::= SET SIZE (1..MAX) OF Attribute\n   UnauthAttributes\
    \ ::= SET SIZE (1..MAX) OF Attribute\n   MessageAuthenticationCode ::= OCTET STRING\n\
    \   DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   SignatureAlgorithmIdentifier\
    \ ::= AlgorithmIdentifier\n   KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n\
    \   ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n   MessageAuthenticationCodeAlgorithm\
    \ ::= AlgorithmIdentifier\n   KeyDerivationAlgorithmIdentifier ::= AlgorithmIdentifier\n\
    \   CertificateRevocationLists ::= SET OF CertificateList\n   CertificateChoices\
    \ ::= CHOICE {\n     certificate Certificate,\n     extendedCertificate [0] IMPLICIT\
    \ ExtendedCertificate,  -- Obsolete\n     v1AttrCert [1] IMPLICIT AttributeCertificateV1,\
    \        -- Obsolete\n     v2AttrCert [2] IMPLICIT AttributeCertificateV2 }\n\
    \   AttributeCertificateV2 ::= AttributeCertificate\n   CertificateSet ::= SET\
    \ OF CertificateChoices\n   IssuerAndSerialNumber ::= SEQUENCE {\n     issuer\
    \ Name,\n     serialNumber CertificateSerialNumber }\n   CMSVersion ::= INTEGER\
    \  { v0(0), v1(1), v2(2), v3(3), v4(4) }\n   UserKeyingMaterial ::= OCTET STRING\n\
    \   OtherKeyAttribute ::= SEQUENCE {\n     keyAttrId OBJECT IDENTIFIER,\n    \
    \ keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\n   -- The CMS Attributes\n   MessageDigest\
    \ ::= OCTET STRING\n   SigningTime  ::= Time\n   Time ::= CHOICE {\n     utcTime\
    \ UTCTime,\n     generalTime GeneralizedTime }\n   Countersignature ::= SignerInfo\n\
    \   -- Attribute Object Identifiers\n   id-contentType OBJECT IDENTIFIER ::= {\
    \ iso(1) member-body(2)\n       us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }\n\
    \   id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n       us(840)\
    \ rsadsi(113549) pkcs(1) pkcs9(9) 4 }\n   id-signingTime OBJECT IDENTIFIER ::=\
    \ { iso(1) member-body(2)\n       us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5 }\n\
    \   id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n      \
    \ us(840) rsadsi(113549) pkcs(1) pkcs9(9) 6 }\n   -- Obsolete Extended Certificate\
    \ syntax from PKCS#6\n   ExtendedCertificateOrCertificate ::= CHOICE {\n     certificate\
    \ Certificate,\n     extendedCertificate [0] IMPLICIT ExtendedCertificate }\n\
    \   ExtendedCertificate ::= SEQUENCE {\n     extendedCertificateInfo ExtendedCertificateInfo,\n\
    \     signatureAlgorithm SignatureAlgorithmIdentifier,\n     signature Signature\
    \ }\n   ExtendedCertificateInfo ::= SEQUENCE {\n     version CMSVersion,\n   \
    \  certificate Certificate,\n     attributes UnauthAttributes }\n   Signature\
    \ ::= BIT STRING\n   END -- of CryptographicMessageSyntax\n"
- title: 12.2  Version 1 Attribute Certificate ASN.1 Module
  contents:
  - "12.2  Version 1 Attribute Certificate ASN.1 Module\n   AttributeCertificateVersion1\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549)\n         pkcs(1) pkcs-9(9)\
    \ smime(16) modules(0) v1AttrCert(15) }\n   DEFINITIONS IMPLICIT TAGS ::=\n  \
    \ BEGIN\n   -- EXPORTS All\n   IMPORTS\n     -- Imports from RFC 3280 [PROFILE],\
    \ Appendix A.1\n           AlgorithmIdentifier, Attribute, CertificateSerialNumber,\n\
    \           Extensions, UniqueIdentifier\n              FROM PKIX1Explicit88 {\
    \ iso(1)\n                   identified-organization(3) dod(6) internet(1)\n \
    \                  security(5) mechanisms(5) pkix(7) mod(0)\n                \
    \   pkix1-explicit(18) }\n     -- Imports from RFC 3280 [PROFILE], Appendix A.2\n\
    \           GeneralNames\n              FROM PKIX1Implicit88 { iso(1)\n      \
    \             identified-organization(3) dod(6) internet(1)\n                \
    \   security(5) mechanisms(5) pkix(7) mod(0)\n                   pkix1-implicit(19)\
    \ }\n     -- Imports from RFC 3281 [ACPROFILE], Appendix B\n           AttCertValidityPeriod,\
    \ IssuerSerial\n              FROM PKIXAttributeCertificate { iso(1)\n       \
    \            identified-organization(3) dod(6) internet(1)\n                 \
    \  security(5) mechanisms(5) pkix(7) mod(0)\n                   attribute-cert(12)\
    \ } ;\n   -- Definition extracted from X.509-1997 [X.509-97], but\n   -- different\
    \ type names are used to avoid collisions.\n   AttributeCertificateV1 ::= SEQUENCE\
    \ {\n     acInfo AttributeCertificateInfoV1,\n     signatureAlgorithm AlgorithmIdentifier,\n\
    \     signature BIT STRING }\n   AttributeCertificateInfoV1 ::= SEQUENCE {\n \
    \    version AttCertVersionV1 DEFAULT v1,\n     subject CHOICE {\n       baseCertificateID\
    \ [0] IssuerSerial,\n         -- associated with a Public Key Certificate\n  \
    \     subjectName [1] GeneralNames },\n         -- associated with a name\n  \
    \   issuer GeneralNames,\n     signature AlgorithmIdentifier,\n     serialNumber\
    \ CertificateSerialNumber,\n     attCertValidityPeriod AttCertValidityPeriod,\n\
    \     attributes SEQUENCE OF Attribute,\n     issuerUniqueID UniqueIdentifier\
    \ OPTIONAL,\n     extensions Extensions OPTIONAL }\n   AttCertVersionV1 ::= INTEGER\
    \ { v1(0) }\n   END -- of AttributeCertificateVersion1\n"
- title: 13.  References
  contents:
  - "13.  References\n   [ACPROFILE] Farrell, S. and R. Housley, \"An Internet Attribute\n\
    \               Certificate Profile for Authorization\", RFC 3281, April\n   \
    \            2002.\n   [CMSALG]    Housley, R., \"Cryptographic Message Syntax\
    \ (CMS)\n               Algorithms\", RFC 3269, August 2002.\n   [DSS]       National\
    \ Institute of Standards and Technology.  FIPS Pub\n               186: Digital\
    \ Signature Standard.  19 May 1994.\n   [ESS]       Hoffman, P., \"Enhanced Security\
    \ Services for S/MIME\", RFC\n               2634, June 1999.\n   [MSG]      \
    \ Ramsdell, B., \"S/MIME Version 3 Message Specification\",\n               RFC\
    \ 2633, June 1999.\n   [OLDCMS]    Housley, R., \"Cryptographic Message Syntax\"\
    , RFC 2630,\n               June 1999.\n   [OLDMSG]    Dusse, S., Hoffman, P.,\
    \ Ramsdell, B., Lundblade, L. and\n               L. Repka, \"S/MIME Version 2\
    \ Message Specification\", RFC\n               2311, March 1998.\n   [PROFILE]\
    \   Housley, R., Polk, W., Ford, W. and D. Solo, \"Internet\n               X.509\
    \ Public Key Infrastructure: Certificate and CRL\n               Profile\", RFC\
    \ 3280, April 2002.\n   [PKCS#6]    RSA Laboratories.  PKCS #6: Extended-Certificate\
    \ Syntax\n               Standard, Version 1.5.  November 1993.\n   [PKCS#7] \
    \   Kaliski, B., \"PKCS #7: Cryptographic Message Syntax,\n               Version\
    \ 1.5.\", RFC 2315, March 1998.\n   [PKCS#9]    RSA Laboratories.  PKCS #9: Selected\
    \ Attribute Types,\n               Version 1.1.  November 1993.\n   [PWRI]   \
    \   Gutmann, P., \"Password-based Encryption for S/MIME\", RFC\n             \
    \  3211, December 2001.\n   [RANDOM]    Eastlake, D., Crocker, S. and J. Schiller,\
    \ \"Randomness\n               Recommendations for Security\", RFC 1750, December\
    \ 1994.\n   [STDWORDS]  Bradner, S., \"Key Words for Use in RFCs to Indicate\n\
    \               Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [X.208-88]\
    \  CCITT.  Recommendation X.208: Specification of Abstract\n               Syntax\
    \ Notation One (ASN.1).  1988.\n   [X.209-88]  CCITT.  Recommendation X.209: Specification\
    \ of Basic\n               Encoding Rules for Abstract Syntax Notation One (ASN.1).\n\
    \               1988.\n   [X.501-88]  CCITT.  Recommendation X.501: The Directory\
    \ - Models.\n               1988.\n   [X.509-88]  CCITT.  Recommendation X.509:\
    \ The Directory -\n               Authentication Framework.  1988.\n   [X.509-97]\
    \  ITU-T.  Recommendation X.509: The Directory -\n               Authentication\
    \ Framework.  1997.\n   [X.509-00]  ITU-T.  Recommendation X.509: The Directory\
    \ -\n               Authentication Framework.  2000.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   The Cryptographic Message Syntax provides a\
    \ method for digitally\n   signing data, digesting data, encrypting data, and\
    \ authenticating\n   data.\n   Implementations must protect the signer's private\
    \ key.  Compromise of\n   the signer's private key permits masquerade.\n   Implementations\
    \ must protect the key management private key, the\n   key-encryption key, and\
    \ the content-encryption key.  Compromise of\n   the key management private key\
    \ or the key-encryption key may result\n   in the disclosure of all contents protected\
    \ with that key.\n   Similarly, compromise of the content-encryption key may result\
    \ in\n   disclosure of the associated encrypted content.\n   Implementations must\
    \ protect the key management private key and the\n   message-authentication key.\
    \  Compromise of the key management private\n   key permits masquerade of authenticated\
    \ data.  Similarly, compromise\n   of the message-authentication key may result\
    \ in undetectable\n   modification of the authenticated content.\n   The key management\
    \ technique employed to distribute message-\n   authentication keys must itself\
    \ provide data origin authentication,\n   otherwise the contents are delivered\
    \ with integrity from an unknown\n   source.  Neither RSA [PKCS#1, NEWPKCS#1]\
    \ nor Ephemeral-Static\n   Diffie-Hellman [DH-X9.42] provide the necessary data\
    \ origin\n   authentication.  Static-Static Diffie-Hellman [DH-X9.42] does provide\n\
    \   the necessary data origin authentication when both the originator and\n  \
    \ recipient public keys are bound to appropriate identities in X.509\n   certificates.\n\
    \   When more than two parties share the same message-authentication key,\n  \
    \ data origin authentication is not provided.  Any party that knows the\n   message-authentication\
    \ key can compute a valid MAC, therefore the\n   contents could originate from\
    \ any one of the parties.\n   Implementations must randomly generate content-encryption\
    \ keys,\n   message-authentication keys, initialization vectors (IVs), and\n \
    \  padding.  Also, the generation of public/private key pairs relies on\n   a\
    \ random numbers.  The use of inadequate pseudo-random number\n   generators (PRNGs)\
    \ to generate cryptographic keys can result in\n   little or no security.  An\
    \ attacker may find it much easier to\n   reproduce the PRNG environment that\
    \ produced the keys, searching the\n   resulting small set of possibilities, rather\
    \ than brute force\n   searching the whole key space.  The generation of quality\
    \ random\n   numbers is difficult.  RFC 1750 [RANDOM] offers important guidance\
    \ in\n   this area, and Appendix 3 of FIPS Pub 186 [DSS] provides one quality\n\
    \   PRNG technique.\n   When using key agreement algorithms or previously distributed\n\
    \   symmetric key-encryption keys, a key-encryption key is used to\n   encrypt\
    \ the content-encryption key.  If the key-encryption and\n   content-encryption\
    \ algorithms are different, the effective security\n   is determined by the weaker\
    \ of the two algorithms.  If, for example,\n   content is encrypted with Triple-DES\
    \ using a 168-bit Triple-DES\n   content-encryption key, and the content-encryption\
    \ key is wrapped\n   with RC2 using a 40-bit RC2 key-encryption key, then at most\
    \ 40 bits\n   of protection is provided.  A trivial search to determine the value\n\
    \   of the 40-bit RC2 key can recover the Triple-DES key, and then the\n   Triple-DES\
    \ key can be used to decrypt the content.  Therefore,\n   implementers must ensure\
    \ that key-encryption algorithms are as strong\n   or stronger than content-encryption\
    \ algorithms.\n   Implementers should be aware that cryptographic algorithms become\n\
    \   weaker with time.  As new cryptoanalysis techniques are developed and\n  \
    \ computing performance improves, the work factor to break a particular\n   cryptographic\
    \ algorithm will be reduced.  Therefore, cryptographic\n   algorithm implementations\
    \ should be modular, allowing new algorithms\n   to be readily inserted.  That\
    \ is, implementors should be prepared for\n   the set of algorithms that must\
    \ be supported to change over time.\n   The countersignature unsigned attribute\
    \ includes a digital signature\n   that is computed on the content signature value,\
    \ thus the\n   countersigning process need not know the original signed content.\n\
    \   This structure permits implementation efficiency advantages; however,\n  \
    \ this structure may also permit the countersigning of an inappropriate\n   signature\
    \ value.  Therefore, implementations that perform\n   countersignatures should\
    \ either verify the original signature value\n   prior to countersigning it (this\
    \ verification requires processing of\n   the original content), or implementations\
    \ should perform\n   countersigning in a context that ensures that only appropriate\n\
    \   signature values are countersigned.\n"
- title: 15.  Acknowledgments
  contents:
  - "15.  Acknowledgments\n   This document is the result of contributions from many\
    \ professionals.\n   I appreciate the hard work of all members of the IETF S/MIME\
    \ Working\n   Group.  I extend a special thanks to Rich Ankney, Simon Blake-Wilson,\n\
    \   Tim Dean, Steve Dusse, Carl Ellison, Peter Gutmann, Bob Jueneman,\n   Stephen\
    \ Henson, Paul Hoffman, Scott Hollenbeck, Don Johnson, Burt\n   Kaliski, John\
    \ Linn, John Pawling, Blake Ramsdell, Francois Rousseau,\n   Jim Schaad, and Dave\
    \ Solo for their efforts and support.\n"
- title: 16.  Authors' Address
  contents:
  - "16.  Authors' Address\n   Russell Housley\n   RSA Laboratories\n   918 Spring\
    \ Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: rhousley@rsasecurity.com\n"
- title: 17.  Full Copyright Statement
  contents:
  - "17.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
