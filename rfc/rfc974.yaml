- title: __initial_text__
  contents:
  - '                   MAIL ROUTING AND THE DOMAIN SYSTEM

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC presents a description of how mail systems on\
    \ the Internet\n   are expected to route messages based on information from the\
    \ domain\n   system described in RFCs 882, 883 and 973.  Distribution of this\
    \ memo\n   is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   The purpose of this memo is to explain how mailers are to decide\
    \ how\n   to route a message addressed to a given Internet domain name.  This\n\
    \   involves a discussion of how mailers interpret MX RRs, which are used\n  \
    \ for message routing.  Note that this memo makes no statement about\n   how mailers\
    \ are to deal with MB and MG RRs, which are used for\n   interpreting mailbox\
    \ names.\n   Under RFC-882 and RFC-883 certain assumptions about mail addresses\n\
    \   have been changed.  Up to now, one could usually assume that if a\n   message\
    \ was addressed to a mailbox, for example, at LOKI.BBN.COM,\n   that one could\
    \ just open an SMTP connection to LOKI.BBN.COM and pass\n   the message along.\
    \  This system broke down in certain situations,\n   such as for certain UUCP\
    \ and CSNET hosts which were not directly\n   attached to the Internet, but these\
    \ hosts could be handled as special\n   cases in configuration files (for example,\
    \ most mailers were set up\n   to automatically forward mail addressed to a CSNET\
    \ host to\n   CSNET-RELAY.ARPA).\n   Under domains, one cannot simply open a connection\
    \ to LOKI.BBN.COM,\n   but must instead ask the domain system where messages to\
    \ LOKI.BBN.COM\n   are to be delivered. And the domain system may direct a mailer\
    \ to\n   deliver messages to an entirely different host, such as SH.CS.NET.\n\
    \   Or, in a more complicated case, the mailer may learn that it has a\n   choice\
    \ of routes to LOKI.BBN.COM.  This memo is essentially a set of\n   guidelines\
    \ on how mailers should behave in this more complex world.\n   Readers are expected\
    \ to be familiar with RFCs 882, 883, and the\n   updates to them (e.g., RFC-973).\n"
- title: RFC 974                                                     January 1986
  contents:
  - 'RFC 974                                                     January 1986

    '
- title: Mail Routing and the Domain System
  contents:
  - 'Mail Routing and the Domain System

    '
- title: What the Domain Servers Know
  contents:
  - "What the Domain Servers Know\n   The domain servers store information as a series\
    \ of resource records\n   (RRs), each of which contains a particular piece of\
    \ information about\n   a given domain name (which is usually, but not always,\
    \ a host).  The\n   simplest way to think of a RR is as a typed pair of datum,\
    \ a domain\n   name matched with relevant data, and stored with some additional\
    \ type\n   information to help systems determine when the RR is relevant.  For\n\
    \   the purposes of message routing, the system stores RRs known as MX\n   RRs.\
    \ Each MX matches a domain name with two pieces of data, a\n   preference value\
    \ (an unsigned 16-bit integer), and the name of a\n   host.  The preference number\
    \ is used to indicate in what order the\n   mailer should attempt deliver to the\
    \ MX hosts, with the lowest\n   numbered MX being the one to try first.  Multiple\
    \ MXs with the same\n   preference are permitted and have the same priority.\n\
    \   In addition to mail information, the servers store certain other\n   types\
    \ of RR's which mailers may encounter or choose to use.  These\n   are: the canonical\
    \ name (CNAME) RR, which simply states that the\n   domain name queried for is\
    \ actually an alias for another domain name,\n   which is the proper, or canonical,\
    \ name; and the Well Known Service\n   (WKS) RR, which stores information about\
    \ network services (such as\n   SMTP) a given domain name supports.\n"
- title: General Routing Guidelines
  contents:
  - "General Routing Guidelines\n   Before delving into a detailed discussion of how\
    \ mailers are expected\n   to do mail routing, it would seem to make sense to\
    \ give a brief\n   overview of how this memo is approaching the problems that\
    \ routing\n   poses.\n   The first major principle is derived from the definition\
    \ of the\n   preference field in MX records, and is intended to prevent mail\n\
    \   looping.  If the mailer is on a host which is listed as an MX for the\n  \
    \ destination host, the mailer may only deliver to an MX which has a\n   lower\
    \ preference count than its own host.\n   It is also possible to cause mail looping\
    \ because routing information\n   is out of date or incomplete.  Out of date information\
    \ is only a\n   problem when domain tables are changed.  The changes will not\
    \ be\n   known to all affected hosts until their resolver caches time out.\n \
    \  There is no way to ensure that this will not happen short of\n   requiring\
    \ mailers and their resolvers to always send their queries to\n   an authoritative\
    \ server, and never use data stored in a cache.  This\n   is an impractical solution,\
    \ since eliminating resolver caching would\n   make mailing inordinately expensive.\
    \  What is more, the out-of-date\n   RR problem should not happen if, when a domain\
    \ table is changed,\n"
- title: RFC 974                                                     January 1986
  contents:
  - 'RFC 974                                                     January 1986

    '
- title: Mail Routing and the Domain System
  contents:
  - "Mail Routing and the Domain System\n   affected hosts (those in the list of MXs)\
    \ have their resolver caches\n   flushed. In other words, given proper precautions,\
    \ mail looping as a\n   result of domain information should be avoidable, without\
    \ requiring\n   mailers to query authoritative servers.  (The appropriate precaution\n\
    \   is to check with a host's administrator before adding that host to a\n   list\
    \ of MXs).\n   The incomplete data problem also requires some care when handling\n\
    \   domain queries.  If the answer section of a query is incomplete\n   critical\
    \ MX RRs may be left out.  This may result in mail looping, or\n   in a message\
    \ being mistakenly labelled undeliverable.  As a result,\n   mailers may only\
    \ accept responses from the domain system which have\n   complete answer sections.\
    \  Note that this entire problem can be\n   avoided by only using virtual circuits\
    \ for queries, but since this\n   situation is likely to be very rare and datagrams\
    \ are the preferred\n   way to interact with the domain system, implementors should\
    \ probably\n   just ensure that their mailer will repeat a query with virtual\n\
    \   circuits should the truncation bit ever be set.\n"
- title: Determining Where to Send a Message
  contents:
  - "Determining Where to Send a Message\n   The explanation of how mailers should\
    \ decide how to route a message\n   is discussed in terms of the problem of a\
    \ mailer on a host with\n   domain name LOCAL trying to deliver a message addressed\
    \ to the domain\n   name REMOTE. Both LOCAL and REMOTE are assumed to be syntactically\n\
    \   correct domain names.  Furthermore, LOCAL is assumed to be the\n   official\
    \ name for the host on which the mailer resides (i.e., it is\n   not a alias).\n"
- title: Issuing a Query
  contents:
  - "Issuing a Query\n   The first step for the mailer at LOCAL is to issue a query\
    \ for MX RRs\n   for REMOTE.  It is strongly urged that this step be taken every\
    \ time\n   a mailer attempts to send the message.  The hope is that changes in\n\
    \   the domain database will rapidly be used by mailers, and thus domain\n   administrators\
    \ will be able to re-route in-transit messages for\n   defective hosts by simply\
    \ changing their domain databases.\n   Certain responses to the query are considered\
    \ errors:\n      Getting no response to the query.  The domain server the mailer\n\
    \      queried never sends anything back.  (This is distinct from an\n      answer\
    \ which contains no answers to the query, which is not an\n      error).\n   \
    \   Getting a response in which the truncation field of the header is\n"
- title: RFC 974                                                     January 1986
  contents:
  - 'RFC 974                                                     January 1986

    '
- title: Mail Routing and the Domain System
  contents:
  - "Mail Routing and the Domain System\n      set.  (Recall discussion of incomplete\
    \ queries above).  Mailers\n      may not use responses of this type, and should\
    \ repeat the query\n      using virtual circuits instead of datagrams.\n     \
    \ Getting a response in which the response code is non-zero.\n   Mailers are expected\
    \ to do something reasonable in the face of an\n   error.  The behaviour for each\
    \ type of error is not specified here,\n   but implementors should note that different\
    \ types of errors should\n   probably be treated differently.  For example, a\
    \ response code of\n   \"non-existent domain\" should probably cause the message\
    \ to be\n   returned to the sender as invalid, while a response code of \"server\n\
    \   failure\" should probably cause the message to be retried later.\n   There\
    \ is one other special case.  If the response contains an answer\n   which is\
    \ a CNAME RR, it indicates that REMOTE is actually an alias\n   for some other\
    \ domain name. The query should be repeated with the\n   canonical domain name.\n\
    \   If the response does not contain an error response, and does not\n   contain\
    \ aliases, its answer section should be a (possibly zero\n   length) list of MX\
    \ RRs for domain name REMOTE (or REMOTE's true\n   domain name if REMOTE was a\
    \ alias).  The next section describes how\n   this list is interpreted.\n"
- title: Interpreting the List of MX RRs
  contents:
  - "Interpreting the List of MX RRs\n   NOTE: This section only discusses how mailers\
    \ choose which names to\n   try to deliver a message to, working from a list of\
    \ RR's.  It does\n   not discuss how the mailers actually make delivery.  Where\
    \ ever\n   delivering a message is mentioned, all that is meant is that the\n\
    \   mailer should do whatever it needs to do to transfer a message to a\n   remote\
    \ site, given a domain name for that site.  (For example, an\n   SMTP mailer will\
    \ try to get an address for the domain name, which\n   involves another query\
    \ to the domain system, and then, if it gets an\n   address, connect to the SMTP\
    \ TCP port).  The mechanics of actually\n   transferring the message over the\
    \ network to the address associated\n   with a given domain name is not within\
    \ the scope of this memo.\n   It is possible that the list of MXs in the response\
    \ to the query will\n   be empty.  This is a special case.  If the list is empty,\
    \ mailers\n   should treat it as if it contained one RR, an MX RR with a preference\n\
    \   value of 0, and a host name of REMOTE.  (I.e., REMOTE is its only\n   MX).\
    \  In addition, the mailer should do no further processing on the\n   list, but\
    \ should attempt to deliver the message to REMOTE.  The idea\n"
- title: RFC 974                                                     January 1986
  contents:
  - 'RFC 974                                                     January 1986

    '
- title: Mail Routing and the Domain System
  contents:
  - "Mail Routing and the Domain System\n   here is that if a domain fails to advertise\
    \ any information about a\n   particular name we will give it the benefit of the\
    \ doubt and attempt\n   delivery.\n   If the list is not empty, the mailer should\
    \ remove irrelevant RR's\n   from the list according to the following steps. \
    \ Note that the order\n   is significant.\n      For each MX, a WKS query should\
    \ be issued to see if the domain\n      name listed actually supports the mail\
    \ service desired.  MX RRs\n      which list domain names which do not support\
    \ the service should be\n      discarded.  This step is optional, but strongly\
    \ encouraged.\n      If the domain name LOCAL is listed as an MX RR, all MX RRs\
    \ with a\n      preference value greater than or equal to that of LOCAL's must\
    \ be\n      discarded.\n   After removing irrelevant RRs, the list can again be\
    \ empty.  This is\n   now an error condition and can occur in several ways.  The\
    \ simplest\n   case is that the WKS queries have discovered that none of the hosts\n\
    \   listed supports the mail service desired.  The message is thus deemed\n  \
    \ undeliverable, though extremely persistent mail systems might want to\n   try\
    \ a delivery to REMOTE's address (if it exists) before returning\n   the message.\
    \ Another, more dangerous, possibility is that the domain\n   system believes\
    \ that LOCAL is handling message for REMOTE, but the\n   mailer on LOCAL is not\
    \ set up to handle mail for REMOTE.  For\n   example, if the domain system lists\
    \ LOCAL as the only MX for REMOTE,\n   LOCAL will delete all the entries in the\
    \ list.  But LOCAL is\n   presumably querying the domain system because it didn't\
    \ know what to\n   do with a message addressed to REMOTE. Clearly something is\
    \ wrong.\n   How a mailer chooses to handle these situations is to some extent\n\
    \   implementation dependent, and is thus left to the implementor's\n   discretion.\n\
    \   If the list of MX RRs is not empty, the mailer should try to deliver\n   the\
    \ message to the MXs in order (lowest preference value tried\n   first).  The\
    \ mailer is required to attempt delivery to the lowest\n   valued MX.  Implementors\
    \ are encouraged to write mailers so that they\n   try the MXs in order until\
    \ one of the MXs accepts the message, or all\n   the MXs have been tried.  A somewhat\
    \ less demanding system, in which\n   a fixed number of MXs is tried, is also\
    \ reasonable.  Note that\n   multiple MXs may have the same preference value.\
    \  In this case, all\n   MXs at with a given value must be tried before any of\
    \ a higher value\n   are tried.  In addition, in the special case in which there\
    \ are\n   several MXs with the lowest preference value,  all of them should be\n\
    \   tried before a message is deemed undeliverable.\n"
- title: RFC 974                                                     January 1986
  contents:
  - 'RFC 974                                                     January 1986

    '
- title: Mail Routing and the Domain System
  contents:
  - 'Mail Routing and the Domain System

    '
- title: Minor Special Issues
  contents:
  - "Minor Special Issues\n   There are a couple of special issues left out of the\
    \ preceding\n   section because they complicated the discussion.  They are treated\n\
    \   here in no particular order.\n   Wildcard names, those containing the character\
    \ '*' in them, may be\n   used for mail routing.  There are likely to be servers\
    \ on the network\n   which simply state that any mail to a domain is to be routed\
    \ through\n   a relay. For example, at the time that this RFC is being written,\
    \ all\n   mail to hosts in the domain IL is routed through RELAY.CS.NET.  This\n\
    \   is done by creating a wildcard RR, which states that *.IL has an MX\n   of\
    \ RELAY.CS.NET.  This should be transparent to the mailer since the\n   domain\
    \ servers will hide this wildcard match. (If it matches *.IL\n   with HUJI.IL\
    \ for example, a domain server will return an RR\n   containing HUJI.IL, not *.IL).\
    \ If by some accident a mailer receives\n   an RR with a wildcard domain name\
    \ in its name or data section it\n   should discard the RR.\n   Note that the\
    \ algorithm to delete irrelevant RRs breaks if LOCAL has\n   a alias and the alias\
    \ is listed in the MX records for REMOTE.  (E.g.\n   REMOTE has an MX of ALIAS,\
    \ where ALIAS has a CNAME of LOCAL).  This\n   can be avoided if aliases are never\
    \ used in the data section of MX\n   RRs.\n   Implementors should understand that\
    \ the query and interpretation of\n   the query is only performed for REMOTE.\
    \  It is not repeated for the\n   MX RRs listed for REMOTE.  You cannot try to\
    \ support more extravagant\n   mail routing by building a chain of MXs.  (E.g.\
    \ UNIX.BBN.COM is an MX\n   for RELAY.CS.NET and RELAY.CS.NET is an MX for all\
    \ the hosts in .IL,\n   but this does not mean that UNIX.BBN.COM accepts any responsibility\n\
    \   for mail for .IL).\n   Finally, it should be noted that this is a standard\
    \ for routing on\n   the Internet.  Mailers serving hosts which lie on multiple\
    \ networks\n   will presumably have to make some decisions about which network\
    \ to\n   route through. This decision making is outside the scope of this\n  \
    \ memo, although mailers may well use the domain system to help them\n   decide.\
    \  However, once a mailer decides to deliver a message via the\n   Internet it\
    \ must apply these rules to route the message.\n"
- title: RFC 974                                                     January 1986
  contents:
  - 'RFC 974                                                     January 1986

    '
- title: Mail Routing and the Domain System
  contents:
  - 'Mail Routing and the Domain System

    '
- title: Examples
  contents:
  - "Examples\n   To illustrate the discussion above, here are three examples of how\n\
    \   mailers should route messages.  All examples work with the following\n   database:\n\
    \      A.EXAMPLE.ORG    IN    MX    10    A.EXAMPLE.ORG\n      A.EXAMPLE.ORG \
    \   IN    MX    15    B.EXAMPLE.ORG\n      A.EXAMPLE.ORG    IN    MX    20   \
    \ C.EXAMPLE.ORG\n      A.EXAMPLE.ORG    IN    WKS   10.0.0.1    TCP    SMTP\n\
    \      B.EXAMPLE.ORG    IN    MX    0      B.EXAMPLE.ORG\n      B.EXAMPLE.ORG\
    \    IN    MX    10     C.EXAMPLE.ORG\n      B.EXAMPLE.ORG    IN    WKS   10.0.0.2\
    \    TCP    SMTP\n      C.EXAMPLE.ORG    IN    MX    0     C.EXAMPLE.ORG\n   \
    \   C.EXAMPLE.ORG    IN    WKS   10.0.0.3    TCP    SMTP\n      D.EXAMPLE.ORG\
    \    IN    MX    0     D.EXAMPLE.ORG\n      D.EXAMPLE.ORG    IN    MX    0   \
    \  C.EXAMPLE.ORG\n      D.EXAMPLE.ORG    IN    WKS   10.0.0.4    TCP    SMTP\n\
    \   In the first example, an SMTP mailer on D.EXAMPLE.ORG is trying to\n   deliver\
    \ a message addressed to A.EXAMPLE.ORG. From the answer to its\n   query, it learns\
    \ that A.EXAMPLE.ORG has three MX RRs.  D.EXAMPLE.ORG\n   is not one of the MX\
    \ RRs and all three MXs support SMTP mail\n   (determined from the WKS entries),\
    \ so none of the MXs are eliminated.\n   The mailer is obliged to try to deliver\
    \ to A.EXAMPLE.ORG as the\n   lowest valued MX.  If it cannot reach A.EXAMPLE.ORG\
    \ it can (but is\n   not required to) try B.EXAMPLE.ORG. and if B.EXAMPLE.ORG\
    \ is not\n   responding, it can try C.EXAMPLE.ORG.\n   In the second example,\
    \ the mailer is on B.EXAMPLE.ORG, and is again\n   trying to deliver a message\
    \ addressed to A.EXAMPLE.ORG.  There are\n   once again three MX RRs for A.EXAMPLE.ORG,\
    \ but in this case the\n   mailer must discard the RRs for itself and C.EXAMPLE.ORG\
    \ (because the\n   MX RR for C.EXAMPLE.ORG has a higher preference value than\
    \ the RR for\n   B.EXAMPLE.ORG).  It is left only with the RR for A.EXAMPLE.ORG,\
    \ and\n   can only try delivery to A.EXAMPLE.ORG.\n   In the third example, consider\
    \ a mailer on A.EXAMPLE.ORG trying to\n   deliver a message to D.EXAMPLE.ORG.\
    \  In this case there are only two\n   MX RRs, both with the same preference value.\
    \  Either MX will accept\n   messages for D.EXAMPLE.ORG. The mailer should try\
    \ one MX first (which\n   one is up to the mailer, though D.EXAMPLE.ORG seems\
    \ most reasonable),\n   and if that delivery fails should try the other MX (e.g.\n\
    \   C.EXAMPLE.ORG).\n"
