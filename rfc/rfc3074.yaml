- contents:
  - '                      DHC Load Balancing Algorithm

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document proposes a method of algorithmic load balancing.  It\n
    \  enables multiple, cooperating servers to decide which one should\n   service
    a client, without exchanging any information beyond initial\n   configuration.\n
    \  The server selection is based on the servers hashing client Media\n   Access
    Control (MAC) addresses when multiple Dynamic Host\n   Configuration Protocol
    (DHCP) servers are available to service DHCP\n   clients.  The proposed technique
    provides for efficient server\n   selection when multiple DHCP servers offer services
    on a network\n   without requiring any changes to existing DHCP clients.  The
    same\n   method is proposed to select the target server of a forwarding agent\n
    \  such as a Bootstrap Protocol (BOOTP) relay.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   This protocol was originally devised to support a specific
    load\n   balancing optimization of the DHCP Failover Protocol [FAILOVR].  The\n
    \  authors later realized that it could be used to optimize the behavior\n   of
    cooperating DHCP servers and the BOOTP relay agents that forward\n   packets to
    them.  The proposal makes it possible to set up each\n   participating server
    to accept a preconfigured (approximate)\n   percentage of the client load.  This
    is done using a deterministic\n   hashing algorithm, that could easily be applied
    to other protocols\n   having similar characteristics.\n"
  title: 1.  Introduction
- contents:
  - "2. Terminology\n   This section discusses both the generic requirements terminology\n
    \  common to many IETF protocol specifications, and also terminology\n   introduced
    by this document.\n"
  - contents:
    - "2.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC 2119].\n"
    title: 2.1.  Requirements Terminology
  - contents:
    - "2.2. Load Balancing Terminology\n   This document introduces the following
      terms:\n   Service Delay, SD\n      A load balancing parameter, allowing delayed
      service of a client\n      by a server participating in the load-balancing scheme,
      instead of\n      ignoring the client.\n   Hash Bucket Assignments, HBA\n      A
      configuration directive that assigns a set of hash bucket values\n      to a
      server participating in the load-balancing scheme.\n   Server ID, SID\n      An
      identifier that can be used to designate one of the\n      participating Servers.
      \ In the context of DHCP, the SID is the IP\n      address or DNS name of the
      server.\n   Service Transaction, ST\n      A set of client-server exchanges
      that lead to a server providing\n      or denying some service to a client.
      \ Example: the DISCOVER/OFFER/\n      REQUEST/ACK message exchange between a
      DHCP server and client is a\n      service transaction.\n   Service Transaction
      ID, STID\n      An attribute of the individual client requests used for load-\n
      \     balancing.\n"
    title: 2.2. Load Balancing Terminology
  title: 2. Terminology
- contents:
  - "3.  Background and External Requirements\n   Because DHCP clients use UDP broadcasts
    to contact DHCP servers, a\n   client DHCPDISCOVER message may be received by
    more than one server.\n   All servers receiving such a broadcast may respond to
    the client,\n   letting the client choose which server it will use.\n   When a
    BOOTP relay agent is used, it typically forwards or\n   rebroadcasts client broadcasts
    to all configured servers, so a\n   similar inefficiency is present.\n   The optimization
    described allows a server to be chosen for each such\n   transaction by performing
    a \"serve\" / \"do not serve\" computation.  A\n   forwarding agent can perform
    the same computation to choose a\n   forwarding destination.\n   In either case,
    the choice of server can be computed, without the\n   participants having to negotiate
    who is to respond.\n   The approach is probabilistic in nature, because it is
    nearly\n   impossible to foresee which client will request service next.  For\n
    \  short periods of time, the actual percentage of clients served by a\n   given
    server will likely deviate from the desired percentage.  As the\n   number of
    requests grows, the actual percentage of the load being\n   handled by each server
    will approximate the configured percentage.\n"
  title: 3.  Background and External Requirements
- contents:
  - "4. Overview\n   DHCP servers MUST use the Client Identifier option as the STID
    if it\n   is present.  If no Client Identifier option is present, the hlen\n   field
    of the DHCP packet MUST be used as the length of the data to be\n   hashed, and
    the contents of the chaddr MUST be the data to be hashed.\n   At most the first
    sixteen bytes of the Client Identifier or chaddr\n   are used.\n   The proposal
    maps the STID into a hash value using the function in\n   section 6.  The resulting
    hash value can then be used to decide who\n   should respond to the request, or
    who the forwarding target should\n   be.\n   The provided hash function generates
    hash values 0 to 255, and yields\n   a fairly even hash bucket distribution for
    random STID-s, and also\n   for STID sequences that have some pattern.  Resource
    allocation is\n   accomplished by assigning a set of specific hash values to each\n
    \  participating server.\n   A server will only service a request if the STID
    hash of the request\n   matches one of its assigned hash values.\n   Any hash
    buckets not assigned to servers will result in some client\n   ST-s being entirely
    ignored.  (In some scenarios, this may be a\n   desirable outcome.)  STID-s need
    not be unique, but should have\n   sufficient variety to distribute load to each
    server.\n   HBA-s MAY be transmitted as messages, encapsulated in messages of\n
    \  some other protocol, e.g., e-mail, or DHCP Failover Protocol option.\n   DHCP
    server implementations may optionally be configurable to handle\n   a case where
    load balancing is being done but the server that is\n   supposed to respond is
    not available, or is out of suitable\n   addresses.\n   DHCP server implementations
    that provide this capability SHOULD set\n   the DS (Delayed Service) configuration
    parameter to the number of\n   seconds to wait after the client's first request
    has been sent before\n   responding to a client, where the hash would not normally
    permit the\n   client to be served.\n   A DHCP server providing this capability
    SHOULD use the value in the\n   secs field of the client request if its value
    is not zero.  Because\n   some clients may not correctly implement the secs field,
    a DHCP\n   server MAY keep track of the first instance of a client transaction\n
    \  to which it would not normally respond.  If the server receives a\n   request
    from a client that has the same transaction ID as a\n   previously recorded request,
    and if the secs field in the second\n   packet is zero, the DHCP server MAY use
    the elapsed time (seconds)\n   between the first and subsequent client request,
    instead of the secs\n   field.\n"
  title: 4. Overview
- contents:
  - '5. Operation

    '
  - contents:
    - "5.1 Configuration\n   The configuration step consists of assigning hash values
      to available\n   servers.  This is accomplished by providing one or more Hash
      Bucket\n   Assignments (HBA-s).  These may come from a configuration file, the\n
      \  Windows NT registry, EEPROM, etc.  Alternatively, the hash bucket\n   values
      could be assigned using some agreed upon algorithm.  E.g.,\n   \"Every odd value
      is serviced by server A and every even value is\n   serviced by server B\".\n"
    title: 5.1 Configuration
  - contents:
    - "5.2 HBA Intended for a Server\n   When configuring one specific server, an
      HBA in the form of a simple\n   bit map of 32 octet values SHOULD be used.\n
      \  The first octet in the HBA bitmap represents HBA values 0-7, the next\n   byte
      values 8-15, and so on, with the thirty-second octet\n   representing values
      248-255.  In each octet, the least significant\n   bit in that octet represents
      the smallest HBA value in that octet.\n   Each bit of the HBA is associated
      with one possible hash value.  If a\n   bit is set in the map, it means the
      recipient server MUST service\n   each client request, where the STID yields
      the corresponding hash\n   value.\n   For example, if a server is configured
      with an HBA of the following\n   32 octets:\n            FF FF FF FF FF FF 00
      00 ( 0   - 63 )\n            FF FF FF FF FF FF FF FF ( 64 - 127 )\n            00
      00 00 00 00 00 00 00 (128 - 191 )\n            00 00 00 00 00 00 00 00 (192
      - 255 )\n   then it MUST service any client requests where the STID hashes into\n
      \  the bucket values of 0 through 47 and 64 through 127.\n"
    title: 5.2 HBA Intended for a Server
  - contents:
    - "5.3 Delayed Service Parameter\n   The Delayed Service parameter is optional.\n
      \  If the parameter is not configured, the HBA sets up a strict Serve/Do\n   not
      serve policy.\n   If the parameter is configured, the server that is not supposed
      to\n   serve a specific request (based on the HBA and the STID hash), is\n   allowed
      to respond, after S seconds have elapsed since the client\n   first attempted
      to get service.  A server MAY use the secs field in\n   the BOOTP header for
      determining the time since the client has been\n   trying to get service, or
      it MAY track repeated requests some other\n   way.\n"
    title: 5.3 Delayed Service Parameter
  - contents:
    - "5.4 HBA Intended for a Forwarder\n   When configuring a forwarding agent, (e.g.,
      BOOTP relay) HBA-s\n   consisting of pairs of Server-ID / Hash Bucket values
      MAY be used.\n   Here, the Server ID (SID) designates the server responsible
      for the\n   specified Hash Bucket.  The forwarding agent forwards each client\n
      \  request, where the STID yields the specified hash value, to the\n   server
      designated by the SID.\n   The Server ID may be any unique server attribute,
      (e.g., IP address,\n   DNS name, etc.) that is meaningful in the context of
      the relay agent\n   operation.\n   A forwarder may be configured to forward
      a given packet to more than\n   one server.  For example, a BOOTP relay could
      be set up to split the\n   load between 2 primary-backup server pairs, each
      pair running the\n   DHCP Failover Protocol [FAILOVR].  In this case, a packet
      that is\n   intended for a server pair Will have to be forwarded to both the\n
      \  primary, and the secondary server of the pair.\n   A possible configuration
      file for a forwarding agent (e.g., BOOTP\n   relay) may look like this:\n   192.33.43.11
      192.33.43.12: 0..24;\n   192.33.43.13:  25..55;\n   192.33.43.15:  56..128;\n
      \  192.33.43.16: 129 130 131 200..202;\n   The above configuration consists
      of 4 HBA-s.  The first HBA example\n   reads: \"Any Client request, where the
      STID yields a hash value 0 to\n   24, will be forwarded to both server 192.33.43.11
      and 192.33.43.12\".\n   The 4th HBA example states: \"Any Client request, where
      the STID\n   yields a hash value 129,139,131,200,201 or 202, will be forwarded
      to\n   server 192.33.43.16.\n"
    title: 5.4 HBA Intended for a Forwarder
  title: 5. Operation
- contents:
  - "6.  Hash Function for Load Balancing\n   The following hash function is a C language
    implementation of the\n   algorithm known as \"Pearson's hash\".  The Pearson's
    hash algorithm\n   was originally published in [PEARSON].\n   The hash function
    is computationally inexpensive, requires an array\n   lookup and xor operation
    for each key byte.  To make this proposal\n   work, all interoperable implementations
    MUST use this hash function,\n   with the set of mixing table values given below:\n"
  - '/* A "mixing table" of 256 distinct values, in pseudo-random order. */

    '
  - 'unsigned char  loadb_mx_tbl[256] ={

    '
  - '251, 175, 119, 215, 81, 14, 79, 191, 103, 49, 181, 143, 186, 157,  0,

    '
  - '232, 31, 32, 55, 60, 152, 58, 17, 237, 174, 70, 160, 144, 220, 90, 57,

    '
  - '223, 59,  3, 18, 140, 111, 166, 203, 196, 134, 243, 124, 95, 222, 179,

    '
  - '197, 65, 180, 48, 36, 15, 107, 46, 233, 130, 165, 30, 123, 161, 209, 23,

    '
  - '97, 16, 40, 91, 219, 61, 100, 10, 210, 109, 250, 127, 22, 138, 29, 108,

    '
  - '244, 67, 207,  9, 178, 204, 74, 98, 126, 249, 167, 116, 34, 77, 193,

    '
  - '200, 121,  5, 20, 113, 71, 35, 128, 13, 182, 94, 25, 226, 227, 199, 75,

    '
  - '27, 41, 245, 230, 224, 43, 225, 177, 26, 155, 150, 212, 142, 218, 115,

    '
  - '241, 73, 88, 105, 39, 114, 62, 255, 192, 201, 145, 214, 168, 158, 221,

    '
  - '148, 154, 122, 12, 84, 82, 163, 44, 139, 228, 236, 205, 242, 217, 11,

    '
  - '187, 146, 159, 64, 86, 239, 195, 42, 106, 198, 118, 112, 184, 172, 87,

    '
  - '2, 173, 117, 176, 229, 247, 253, 137, 185, 99, 164, 102, 147, 45, 66,

    '
  - '231, 52, 141, 211, 194, 206, 246, 238, 56, 110, 78, 248, 63, 240, 189,

    '
  - '93, 92, 51, 53, 183, 19, 171, 72, 50, 33, 104, 101, 69, 8, 252, 83, 120,

    '
  - '76, 135, 85, 54, 202, 125, 188, 213, 96, 235, 136, 208, 162, 129, 190,

    '
  - '132, 156, 38, 47, 1, 7, 254, 24, 4, 216, 131, 89, 21, 28, 133, 37, 153,

    '
  - '149, 80, 170, 68, 6, 169, 234, 151

    '
  - '};

    '
  - "unsigned char loadb_p_hash(\n        const unsigned char *key,       /* The key
    to be hashed */\n        const int len )                 /* Key length in bytes
    \ */\n"
  - '{

    '
  - 'unsigned char hash  = len;

    '
  - "int i;\n        for (i=len ; i > 0 ;  )\n            hash = loadb_mx_tbl  [ hash
    ^ key[ --i ] ];\n        return( hash );\n"
  - '}

    '
  - "int accept_service_request(\n        const unsigned char HBA[32],    /* The hash
    bucket bitmap */\n        const unsigned char *key,       /* The service transaction
    id\n"
  - "*/\n        const int len  )                /* length of the above */\n"
  - '{

    '
  - 'unsigned char hash = loadb_p_hash(key,len);

    '
  - 'int index          = (hash >> 3) & 31;

    '
  - "int bitmask        = 1 << (hash & 7);\n        /* return 1 if we should service
    this transaction */\n        return((HBA[index] & bitmask) != 0);\n"
  - '}

    '
  title: 6.  Hash Function for Load Balancing
- contents:
  - "7.  Security Considerations\n   This proposal in and by itself provides no security,
    nor does it\n   impact existing security.  Servers using this algorithm are\n
    \  responsible for ensuring that if the contents of the HBA are\n   transmitted
    over the network as part of the process of configuring\n   any server, that message
    be secured against tampering, since\n   tampering with the HBA could result in
    denial of service for some or\n   all clients.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  References\n   [FAILOVR]  Kinnear, K,, Droms, R., Rabil, G., Dooley, M.,
    Kapur, A.,\n              Gonczi, S. and B. Volz, \"DHCP Failover Protocol\",
    Work in\n              Progress.\n   [PEARSON]  The Communications of the ACM
    \ Vol.33, No.  6 (June 1990),\n              pp. 677-680.\n   [RFC2131]  Droms,
    R., \"Dynamic Host Configuration Protocol\", RFC\n              2131, March 1997.\n
    \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
    Levels,\" BCP 14, RFC 2119, March 1997.\n"
  title: 8.  References
- contents:
  - "9.  Acknowledgements\n   Special thanks to Peter K. Pearson, the author of Pearson's
    hash who\n   has kindly granted his permission to use his algorithm, free of any\n
    \  encumbrances.\n   This proposal stems from the original idea of hashing MAC
    addresses\n   to a single bit by Ted Lemon, during a Failover Protocol discussion\n
    \  held at CISCO Systems in February, 1999.  Rob Stevens suggested the\n   potential
    use of this algorithm for purposes beyond those of the\n   Failover Protocol.\n
    \  Many thanks to Ralph Droms, Kim Kinnear, Mark Stapp, Glenn Waters,\n   Greg
    Rabil and Jack Wong for their comments during the ongoing\n   discussions.\n"
  title: 9.  Acknowledgements
- contents:
  - "10.  Authors' Addresses\n   Bernie Volz\n   Ericsson\n   959 Concord Street\n
    \  Framingham, MA  01701\n   Phone: +1-617-513-9060\n   EMail: bernie.volz@ericsson.com\n
    \  Steve Gonczi\n   Network Engines, Inc.\n   25 Dan Road Canton, MA 02021-2817\n
    \  Phone: 781-332-1165\n   EMail: steve.gonczi@networkengines.com\n   Ted Lemon\n
    \  950 Charter Street\n   Redwood City, CA 94043\n   EMail: ted.lemon@nominum.com\n
    \  Rob Stevens\n   Join Systems, Inc.\n   1032 Elwell Ct Ste 243 Palo Alto CA
    94203\n   Phone: (650)-968-4470\n   EMail: robs@join.com\n"
  title: 10.  Authors' Addresses
- contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 11.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
