- title: __initial_text__
  contents:
  - ' The Internet IP Security PKI Profile of IKEv1/ISAKMP, IKEv2, and PKIX

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Key Exchange (IKE) and Public Key Infrastructure for\n\
    \   X.509 (PKIX) certificate profile both provide frameworks that must be\n  \
    \ profiled for use in a given application.  This document provides a\n   profile\
    \ of IKE and PKIX that defines the requirements for using PKI\n   technology in\
    \ the context of IKE/IPsec.  The document complements\n   protocol specifications\
    \ such as IKEv1 and IKEv2, which assume the\n   existence of public key certificates\
    \ and related keying materials,\n   but which do not address PKI issues explicitly.\
    \  This document\n   addresses those issues.  The intended audience is implementers\
    \ of PKI\n   for IPsec.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terms and Definitions ...........................................4\n  \
    \ 3. Use of Certificates in RFC 2401 and IKEv1/ISAKMP ................5\n    \
    \  3.1. Identification Payload .....................................5\n      \
    \     3.1.1. ID_IPV4_ADDR and ID_IPV6_ADDR .......................7\n        \
    \   3.1.2. ID_FQDN .............................................9\n          \
    \ 3.1.3. ID_USER_FQDN .......................................10\n           3.1.4.\
    \ ID_IPV4_ADDR_SUBNET, ID_IPV6_ADDR_SUBNET,\n                  ID_IPV4_ADDR_RANGE,\
    \ ID_IPV6_ADDR_RANGE .............11\n           3.1.5. ID_DER_ASN1_DN .....................................11\n\
    \           3.1.6. ID_DER_ASN1_GN .....................................12\n  \
    \         3.1.7. ID_KEY_ID ..........................................12\n    \
    \       3.1.8. Selecting an Identity from a Certificate ...........12\n      \
    \     3.1.9. Subject for DN Only ................................12\n        \
    \   3.1.10. Binding Identity to Policy ........................13\n      3.2.\
    \ Certificate Request Payload ...............................13\n           3.2.1.\
    \ Certificate Type ...................................14\n           3.2.2. X.509\
    \ Certificate - Signature ......................14\n           3.2.3. Revocation\
    \ Lists (CRL and ARL) .....................14\n           3.2.4. PKCS #7 wrapped\
    \ X.509 certificate ..................15\n           3.2.5. Location of Certificate\
    \ Request Payloads ...........15\n           3.2.6. Presence or Absence of Certificate\
    \ Request\n                  Payloads ...........................................15\n\
    \           3.2.7. Certificate Requests ...............................15\n  \
    \         3.2.8. Robustness .........................................18\n    \
    \       3.2.9. Optimizations ......................................18\n      3.3.\
    \ Certificate Payload .......................................19\n           3.3.1.\
    \ Certificate Type ...................................20\n           3.3.2. X.509\
    \ Certificate - Signature ......................20\n           3.3.3. Revocation\
    \ Lists (CRL and ARL) .....................20\n           3.3.4. PKCS #7 Wrapped\
    \ X.509 Certificate ..................20\n           3.3.5. Location of Certificate\
    \ Payloads ...................21\n           3.3.6. Certificate Payloads Not Mandatory\
    \ .................21\n           3.3.7. Response to Multiple Certification\n\
    \                  Authority Proposals ................................21\n  \
    \         3.3.8. Using Local Keying Materials .......................21\n    \
    \       3.3.9. Multiple End-Entity Certificates ...................22\n      \
    \     3.3.10. Robustness ........................................22\n        \
    \   3.3.11. Optimizations .....................................23\n   4. Use of\
    \ Certificates in RFC 4301 and IKEv2 ......................24\n      4.1. Identification\
    \ Payload ....................................24\n      4.2. Certificate Request\
    \ Payload ...............................24\n           4.2.1. Revocation Lists\
    \ (CRL and ARL) .....................24\n      4.3. Certificate Payload .......................................25\n\
    \           4.3.1. IKEv2's Hash and URL of X.509 Certificate ..........25\n  \
    \         4.3.2. Location of Certificate Payloads ...................25\n    \
    \       4.3.3. Ordering of Certificate Payloads ...................25\n   5. Certificate\
    \ Profile for IKEv1/ISAKMP and IKEv2 .................26\n      5.1. X.509 Certificates\
    \ ........................................26\n           5.1.1. Versions ...........................................26\n\
    \           5.1.2. Subject ............................................26\n  \
    \         5.1.3. X.509 Certificate Extensions .......................27\n    \
    \  5.2. X.509 Certificate Revocation Lists ........................33\n      \
    \     5.2.1. Multiple Sources of Certificate Revocation\n                  Information\
    \ ........................................34\n           5.2.2. X.509 Certificate\
    \ Revocation List Extensions .......34\n      5.3. Strength of Signature Hashing\
    \ Algorithms ..................35\n   6. Configuration Data Exchange Conventions\
    \ ........................36\n      6.1. Certificates ..............................................36\n\
    \      6.2. CRLs and ARLs .............................................37\n  \
    \    6.3. Public Keys ...............................................37\n    \
    \  6.4. PKCS#10 Certificate Signing Requests ......................37\n   7. Security\
    \ Considerations ........................................37\n      7.1. Certificate\
    \ Request Payload ...............................37\n      7.2. IKEv1 Main Mode\
    \ ...........................................37\n      7.3. Disabling Certificate\
    \ Checks ..............................38\n   8. Acknowledgements ...............................................38\n\
    \   9. References .....................................................38\n  \
    \    9.1. Normative References ......................................38\n    \
    \  9.2. Informative References ....................................39\n   Appendix\
    \ A. The Possible Dangers of Delta CRLs ....................40\n   Appendix B.\
    \ More on Empty CERTREQs ................................40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IKE [1], ISAKMP [2], and IKEv2 [3] provide a secure key\
    \ exchange\n   mechanism for use with IPsec [4] [14].  In many cases, the peers\n\
    \   authenticate using digital certificates as specified in PKIX [5].\n   Unfortunately,\
    \ the combination of these standards leads to an\n   underspecified set of requirements\
    \ for the use of certificates in the\n   context of IPsec.\n   ISAKMP references\
    \ the PKIX certificate profile but, in many cases,\n   merely specifies the contents\
    \ of various messages without specifying\n   their syntax or semantics.  Meanwhile,\
    \ the PKIX certificate profile\n   provides a large set of certificate mechanisms\
    \ that are generally\n   applicable for Internet protocols, but little specific\
    \ guidance for\n   IPsec.  Given the numerous underspecified choices, interoperability\n\
    \   is hampered if all implementers do not make similar choices, or at\n   least\
    \ fail to account for implementations that have chosen\n   differently.\n   This\
    \ profile of the IKE and PKIX frameworks is intended to provide an\n   agreed-upon\
    \ standard for using PKI technology in the context of IPsec\n   by profiling the\
    \ PKIX framework for use with IKE and IPsec, and by\n   documenting the contents\
    \ of the relevant IKE payloads and further\n   specifying their semantics.\n \
    \  In addition to providing a profile of IKE and PKIX, this document\n   attempts\
    \ to incorporate lessons learned from recent experience with\n   both implementation\
    \ and deployment, as well as the current state of\n   related protocols and technologies.\n\
    \   Material from ISAKMP, IKEv1, IKEv2, or PKIX is not repeated here, and\n  \
    \ readers of this document are assumed to have read and understood\n   those documents.\
    \  The requirements and security aspects of those\n   documents are fully relevant\
    \ to this document as well.\n   This document is organized as follows.  Section\
    \ 2 defines special\n   terminology used in the rest of this document, Section\
    \ 3 provides the\n   profile of IKEv1/ISAKMP, Section 4 provides a profile of\
    \ IKEv2, and\n   Section 5 provides the profile of PKIX.  Section 6 covers conventions\n\
    \   for the out-of-band exchange of keying materials for configuration\n   purposes.\n"
- title: 2.  Terms and Definitions
  contents:
  - "2.  Terms and Definitions\n   Except for those terms that are defined immediately\
    \ below, all terms\n   used in this document are defined in either the PKIX [5],\
    \ ISAKMP [2],\n   IKEv1 [1], IKEv2 [3], or Domain of Interpretation (DOI) [6]\n\
    \   documents.\n   o  Peer source address: The source address in packets from\
    \ a peer.\n      This address may be different from any addresses asserted as\
    \ the\n      \"identity\" of the peer.\n   o  FQDN: Fully qualified domain name.\n\
    \   o  ID_USER_FQDN: IKEv2 renamed ID_USER_FQDN to ID_RFC822_ADDR.  Both\n   \
    \   are referred to as ID_USER_FQDN in this document.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in RFC 2119 [7].\n"
- title: 3.  Use of Certificates in RFC 2401 and IKEv1/ISAKMP
  contents:
  - '3.  Use of Certificates in RFC 2401 and IKEv1/ISAKMP

    '
- title: 3.1.  Identification Payload
  contents:
  - "3.1.  Identification Payload\n   The Identification (ID) Payload indicates the\
    \ identity claimed by the\n   sender.  The recipient can then use the ID as a\
    \ lookup key for policy\n   and for certificate lookup in whatever certificate\
    \ store or directory\n   that it has available.  Our primary concern in this section\
    \ is to\n   profile the ID payload so that it can be safely used to generate or\n\
    \   lookup policy.  IKE mandates the use of the ID payload in Phase 1.\n   The\
    \ DOI [6] defines the 11 types of Identification Data that can be\n   used and\
    \ specifies the syntax for these types.  These are discussed\n   below in detail.\n\
    \   The ID payload requirements in this document cover only the portion\n   of\
    \ the explicit policy checks that deal with the Identification\n   Payload specifically.\
    \  For instance, in the case where ID does not\n   contain an IP address, checks\
    \ such as verifying that the peer source\n   address is permitted by the relevant\
    \ policy are not addressed here,\n   as they are out of the scope of this document.\n\
    \   Implementations SHOULD populate ID with identity information that is\n   contained\
    \ within the end-entity certificate.  Populating ID with\n   identity information\
    \ from the end-entity certificate enables\n   recipients to use ID as a lookup\
    \ key to find the peer end-entity\n   certificate.  The only case where implementations\
    \ may populate ID\n   with information that is not contained in the end-entity\
    \ certificate\n   is when ID contains the peer source address (a single address,\
    \ not a\n   subnet or range).\n   Because implementations may use ID as a lookup\
    \ key to determine which\n   policy to use, all implementations MUST be especially\
    \ careful to\n   verify the truthfulness of the contents by verifying that they\n\
    \   correspond to some keying material demonstrably held by the peer.\n   Failure\
    \ to do so may result in the use of an inappropriate or\n   insecure policy. \
    \ The following sections describe the methods for\n   performing this binding.\n\
    \   The following table summarizes the binding of the Identification\n   Payload\
    \ to the contents of end-entity certificates and of identity\n   information to\
    \ policy.  Each ID type is covered more thoroughly in\n   the following sections.\n\
    \   ID type  | Support  | Correspond  | Cert     | SPD lookup\n            | for\
    \ send | PKIX Attrib | matching | rules\n   -------------------------------------------------------------------\n\
    \            |          |             |          |\n   IP*_ADDR | MUST [a] | SubjAltName\
    \ | MUST [b] | [c], [d]\n            |          | iPAddress   |          |\n \
    \           |          |             |          |\n   FQDN     | MUST [a] | SubjAltName\
    \ | MUST [b] | [c], [d]\n            |          | dNSName     |          |\n \
    \           |          |             |          |\n   USER_FQDN| MUST [a] | SubjAltName\
    \ | MUST [b] | [c], [d]\n            |          | rfc822Name  |          |\n \
    \           |          |             |          |\n   IP range | MUST NOT | n/a\
    \         | n/a      | n/a\n            |          |             |          |\n\
    \   DN       | MUST [a] | Entire      | MUST [b] | MUST support lookup\n     \
    \       |          | Subject,    |          | on any combination\n           \
    \ |          | bitwise     |          | of C, CN, O, or OU\n            |    \
    \      | compare     |          |\n            |          |             |    \
    \      |\n   GN       | MUST NOT | n/a         | n/a      | n/a\n            |\
    \          |             |          |\n   KEY_ID   | MUST NOT | n/a         |\
    \ n/a      | n/a\n            |          |             |          |\n   [a] =\
    \ Implementation MUST have the configuration option to send this\n         ID\
    \ type in the ID payload.  Whether or not the ID type is used\n         is a matter\
    \ of local configuration.\n   [b] = The ID in the ID payload MUST match the contents\
    \ of the\n         corresponding field (listed) in the certificate exactly, with\n\
    \         no other lookup.  The matched ID MAY be used for Security\n        \
    \ Policy Database (SPD) lookup, but is not required to be used\n         for this.\n\
    \   [c] = At a minimum, Implementation MUST be capable of being\n         configured\
    \ to perform exact matching of the ID payload contents\n         to an entry in\
    \ the local SPD.\n   [d] = In addition, the implementation MAY also be configurable\
    \ to\n         perform substring or wildcard matches of ID payload contents to\n\
    \         entries in the local SPD.  (More on this in Section 3.1.5.)\n   When\
    \ sending an IPV4_ADDR, IPV6_ADDR, FQDN, or USER_FQDN,\n   implementations MUST\
    \ be able to be configured to send the same string\n   as it appears in the corresponding\
    \ SubjectAltName extension.  This\n   document RECOMMENDS that deployers use this\
    \ configuration option.\n   All these ID types are treated the same: as strings\
    \ that can be\n   compared easily and quickly to a corresponding string in an\
    \ explicit\n   value in the certificate.  Of these types, FQDN and USER_FQDN are\n\
    \   RECOMMENDED over IP addresses (see discussion in Section 3.1.1).\n   When\
    \ sending a Distinguished Name (DN) as ID, implementations MUST\n   send the entire\
    \ DN in ID.  Also, implementations MUST support at\n   least the C, CN, O, and\
    \ OU attributes for SPD matching.  See Section\n   3.1.5 for more details about\
    \ DN, including SPD matching.\n   Recipients MUST be able to perform SPD matching\
    \ on the exact contents\n   of the ID, and this SHOULD be the default setting.\
    \  In addition,\n   implementations MAY use substrings or wildcards in local policy\n\
    \   configuration to do the SPD matching against the ID contents.  In\n   other\
    \ words, implementations MUST be able to do exact matches of ID\n   to SPD, but\
    \ MAY also be configurable to do substring or wildcard\n   matches of ID to SPD.\n"
- title: 3.1.1.  ID_IPV4_ADDR and ID_IPV6_ADDR
  contents:
  - "3.1.1.  ID_IPV4_ADDR and ID_IPV6_ADDR\n   Implementations MUST support at least\
    \ the ID_IPV4_ADDR or\n   ID_IPV6_ADDR ID type, depending on whether the implementation\n\
    \   supports IPv4, IPv6, or both.  These addresses MUST be encoded in\n   \"network\
    \ byte order\", as specified in IP [8]: The least significant\n   bit (LSB) of\
    \ each octet is the LSB of the corresponding byte in the\n   network address.\
    \  For the ID_IPV4_ADDR type, the payload MUST contain\n   exactly four octets\
    \ [8].  For the ID_IPV6_ADDR type, the payload MUST\n   contain exactly sixteen\
    \ octets [10].\n   Implementations SHOULD NOT populate ID payload with IP addresses\
    \ due\n   to interoperability issues such as problems with Network Address\n \
    \  Translator (NAT) traversal, and problems with IP verification\n   behavior.\n\
    \   Deployments may only want to consider using the IP address as ID if\n   all\
    \ of the following are true:\n   o  the peer's IP address is static, not dynamically\
    \ changing\n   o  the peer is NOT behind a NAT'ing device\n   o  the administrator\
    \ intends the implementation to verify that the\n      peer source address matches\
    \ the IP address in the ID received, and\n      that in the iPAddress field in\
    \ the peer certificate's\n      SubjectAltName extension.\n   Implementations\
    \ MUST be capable of verifying that the IP address\n   presented in ID matches\
    \ via bitwise comparison the IP address present\n   in the certificate's iPAddress\
    \ field of the SubjectAltName extension.\n   Implementations MUST perform this\
    \ verification by default.  When\n   comparing the contents of ID with the iPAddress\
    \ field in the\n   SubjectAltName extension for equality, binary comparison MUST\
    \ be\n   performed.  Note that certificates may contain multiple address\n   identity\
    \ types -- in which case, at least one must match the source\n   IP.  If the default\
    \ is enabled, then a mismatch between the two\n   addresses MUST be treated as\
    \ an error, and security association setup\n   MUST be aborted.  This event SHOULD\
    \ be auditable.  Implementations\n   MAY provide a configuration option to (i.e.,\
    \ local policy\n   configuration can enable) skip that verification step, but\
    \ that\n   option MUST be off by default.  We include the \"option-to-skip-\n\
    \   validation\" in order to permit better interoperability as current\n   implementations\
    \ vary greatly in how they behave on this topic.\n   In addition, implementations\
    \ MUST be capable of verifying that the\n   address contained in the ID is the\
    \ same as the address contained in\n   the IP header.  Implementations SHOULD\
    \ be able to check the address\n   in either the outermost or innermost IP header\
    \ and MAY provide a\n   configuration option for specifying which is to be checked.\
    \  If there\n   is no configuration option provided, an implementation SHOULD\
    \ check\n   the peer source address contained in the outermost header (as is the\n\
    \   practice of most of today's implementations).  If ID is one of the IP\n  \
    \ address types, then implementations MUST perform this verification by\n   default.\
    \  If this default is enabled, then a mismatch MUST be treated\n   as an error,\
    \ and security association setup MUST be aborted.  This\n   event SHOULD be auditable.\
    \  Implementations MAY provide a\n   configuration option to (i.e. local policy\
    \ configuration can enable)\n   skip that verification step, but that option MUST\
    \ be off by default.\n   We include the \"option-to-skip-validation\" in order\
    \ to permit better\n   interoperability, as current implementations vary greatly\
    \ in how they\n   behave on the topic of verification of source IP.\n   If the\
    \ default for both the verifications above are enabled, then, by\n   transitive\
    \ property, the implementation will also be verifying that\n   the peer source\
    \ IP address matches via a bitwise comparison the\n   contents of the iPAddress\
    \ field in the SubjectAltName extension in\n   the certificate.  In addition,\
    \ implementations MAY allow\n   administrators to configure a local policy that\
    \ explicitly requires\n   that the peer source IP address match via a bitwise\
    \ comparison the\n   contents of the iPAddress field in the SubjectAltName extension\
    \ in\n   the certificate.  Implementations SHOULD allow administrators to\n  \
    \ configure a local policy that skips this validation check.\n   Implementations\
    \ MAY support substring, wildcard, or regular\n   expression matching of the contents\
    \ of ID to look up the policy in\n   the SPD, and such would be a matter of local\
    \ security policy\n   configuration.\n   Implementations MAY use the IP address\
    \ found in the header of packets\n   received from the peer to look up the policy,\
    \ but such\n   implementations MUST still perform verification of the ID payload.\n\
    \   Although packet IP addresses are inherently untrustworthy and must\n   therefore\
    \ be independently verified, it is often useful to use the\n   apparent IP address\
    \ of the peer to locate a general class of policies\n   that will be used until\
    \ the mandatory identity-based policy lookup\n   can be performed.\n   For instance,\
    \ if the IP address of the peer is unrecognized, a VPN\n   gateway device might\
    \ load a general \"road warrior\" policy that\n   specifies a particular Certification\
    \ Authority (CA) that is trusted\n   to issue certificates that contain a valid\
    \ rfc822Name, which can be\n   used by that implementation to perform authorization\
    \ based on access\n   control lists (ACLs) after the peer's certificate has been\
    \ validated.\n   The rfc822Name can then be used to determine the policy that\
    \ provides\n   specific authorization to access resources (such as IP addresses,\n\
    \   ports, and so forth).\n   As another example, if the IP address of the peer\
    \ is recognized to be\n   a known peer VPN endpoint, policy may be determined\
    \ using that\n   address, but until the identity (address) is validated by validating\n\
    \   the peer certificate, the policy MUST NOT be used to authorize any\n   IPsec\
    \ traffic.\n"
- title: 3.1.2.  ID_FQDN
  contents:
  - "3.1.2.  ID_FQDN\n   Implementations MUST support the ID_FQDN ID type, generally\
    \ to\n   support host-based access control lists for hosts without fixed IP\n\
    \   addresses.  However, implementations SHOULD NOT use the DNS to map\n   the\
    \ FQDN to IP addresses for input into any policy decisions, unless\n   that mapping\
    \ is known to be secure, for example, if DNSSEC [11] were\n   employed for that\
    \ FQDN.\n   If ID contains an ID_FQDN, implementations MUST be capable of\n  \
    \ verifying that the identity contained in the ID payload matches\n   identity\
    \ information contained in the peer end-entity certificate, in\n   the dNSName\
    \ field in the SubjectAltName extension.  Implementations\n   MUST perform this\
    \ verification by default.  When comparing the\n   contents of ID with the dNSName\
    \ field in the SubjectAltName extension\n   for equality, case-insensitive string\
    \ comparison MUST be performed.\n   Note that case-insensitive string comparison\
    \ works on\n   internationalized domain names (IDNs) as well (See IDN [12]).\n\
    \   Substring, wildcard, or regular expression matching MUST NOT be\n   performed\
    \ for this comparison.  If this default is enabled, then a\n   mismatch MUST be\
    \ treated as an error, and security association setup\n   MUST be aborted.  This\
    \ event SHOULD be auditable.  Implementations\n   MAY provide a configuration\
    \ option to (i.e., local policy\n   configuration can enable) skip that verification\
    \ step, but that\n   option MUST be off by default.  We include the \"option-to-skip-\n\
    \   validation\" in order to permit better interoperability, as current\n   implementations\
    \ vary greatly in how they behave on this topic.\n   Implementations MAY support\
    \ substring, wildcard, or regular\n   expression matching of the contents of ID\
    \ to look up the policy in\n   the SPD, and such would be a matter of local security\
    \ policy\n   configuration.\n"
- title: 3.1.3.  ID_USER_FQDN
  contents:
  - "3.1.3.  ID_USER_FQDN\n   Implementations MUST support the ID_USER_FQDN ID type,\
    \ generally to\n   support user-based access control lists for users without fixed\
    \ IP\n   addresses.  However, implementations SHOULD NOT use the DNS to map\n\
    \   the FQDN portion to IP addresses for input into any policy decisions,\n  \
    \ unless that mapping is known to be secure, for example, if DNSSEC\n   [11] were\
    \ employed for that FQDN.\n   Implementations MUST be capable of verifying that\
    \ the identity\n   contained in the ID payload matches identity information contained\
    \ in\n   the peer end-entity certificate, in the rfc822Name field in the\n   SubjectAltName\
    \ extension.  Implementations MUST perform this\n   verification by default. \
    \ When comparing the contents of ID with the\n   rfc822Name field in the SubjectAltName\
    \ extension for equality, case-\n   insensitive string comparison MUST be performed.\
    \  Note that case-\n   insensitive string comparison works on internationalized\
    \ domain names\n   (IDNs) as well (See IDN [12]).  Substring, wildcard, or regular\n\
    \   expression matching MUST NOT be performed for this comparison.  If\n   this\
    \ default is enabled, then a mismatch MUST be treated as an error,\n   and security\
    \ association setup MUST be aborted.  This event SHOULD be\n   auditable.  Implementations\
    \ MAY provide a configuration option to\n   (i.e., local policy configuration\
    \ can enable) skip that verification\n   step, but that option MUST be off by\
    \ default.  We include the\n   \"option-to-skip-validation\" in order to permit\
    \ better\n   interoperability, as current implementations vary greatly in how\
    \ they\n   behave on this topic.\n   Implementations MAY support substring, wildcard,\
    \ or regular\n   expression matching of the contents of ID to look up policy in\
    \ the\n   SPD, and such would be a matter of local security policy\n   configuration.\n"
- title: 3.1.4.  ID_IPV4_ADDR_SUBNET, ID_IPV6_ADDR_SUBNET, ID_IPV4_ADDR_RANGE,
  contents:
  - "3.1.4.  ID_IPV4_ADDR_SUBNET, ID_IPV6_ADDR_SUBNET, ID_IPV4_ADDR_RANGE,\n     \
    \   ID_IPV6_ADDR_RANGE\n   Note that RFC 3779 [13] defines blocks of addresses\
    \ using the\n   certificate extension identified by:\n            id-pe-ipAddrBlock\
    \ OBJECT IDENTIFIER ::= { id-pe 7 }\n   although use of this extension in IKE\
    \ is considered experimental at\n   this time.\n"
- title: 3.1.5.  ID_DER_ASN1_DN
  contents:
  - "3.1.5.  ID_DER_ASN1_DN\n   Implementations MUST support receiving the ID_DER_ASN1_DN\
    \ ID type.\n   Implementations MUST be capable of generating this type, and the\n\
    \   decision to do so will be a matter of local security policy\n   configuration.\
    \  When generating this type, implementations MUST\n   populate the contents of\
    \ ID with the Subject field from the end-\n   entity certificate, and MUST do\
    \ so such that a binary comparison of\n   the two will succeed.  If there is not\
    \ a match, this MUST be treated\n   as an error, and security association setup\
    \ MUST be aborted.  This\n   event SHOULD be auditable.\n   Implementations MUST\
    \ NOT populate ID with the Subject from the end-\n   entity certificate if it\
    \ is empty, even though an empty certificate\n   Subject is explicitly allowed\
    \ in the \"Subject\" section of the PKIX\n   certificate profile.\n   Regarding\
    \ SPD matching, implementations MUST be able to perform\n   matching based on\
    \ a bitwise comparison of the entire DN in ID to its\n   entry in the SPD.  However,\
    \ operational experience has shown that\n   using the entire DN in local configuration\
    \ is difficult, especially\n   in large-scale deployments.  Therefore, implementations\
    \ also MUST be\n   able to perform SPD matches of any combination of one or more\
    \ of the\n   C, CN, O, OU attributes within Subject DN in the ID to the same in\n\
    \   the SPD.  Implementations MAY support matching using additional DN\n   attributes\
    \ in any combination, although interoperability is far from\n   certain and is\
    \ dubious.  Implementations MAY also support performing\n   substring, wildcard,\
    \ or regular expression matches for any of its\n   supported DN attributes from\
    \ ID, in any combination, to the SPD.\n   Such flexibility allows deployers to\
    \ create one SPD entry on the\n   gateway for an entire department of a company\
    \ (e.g., O=Foobar Inc.,\n   OU=Engineering) while still allowing them to draw\
    \ out other details\n   from the DN (e.g., CN=John Doe) for auditing purposes.\
    \  All the above\n   is a matter of local implementation and local policy definition\
    \ and\n   enforcement capability, not bits on the wire, but will have a great\n\
    \   impact on interoperability.\n"
- title: 3.1.6.  ID_DER_ASN1_GN
  contents:
  - "3.1.6.  ID_DER_ASN1_GN\n   Implementations MUST NOT generate this type, because\
    \ the recipient\n   will be unlikely to know how to use it.\n"
- title: 3.1.7.  ID_KEY_ID
  contents:
  - "3.1.7.  ID_KEY_ID\n   The ID_KEY_ID type used to specify pre-shared keys and\
    \ thus is out of\n   scope.\n"
- title: 3.1.8.  Selecting an Identity from a Certificate
  contents:
  - "3.1.8.  Selecting an Identity from a Certificate\n   Implementations MUST support\
    \ certificates that contain more than a\n   single identity, such as when the\
    \ Subject field and the\n   SubjectAltName extension are both populated, or the\
    \ SubjectAltName\n   extension contains multiple identities irrespective of whether\
    \ or not\n   the Subject is empty.  In many cases, a certificate will contain\
    \ an\n   identity, such as an IP address, in the SubjectAltName extension in\n\
    \   addition to a non-empty Subject.\n   Implementations should populate ID with\
    \ whichever identity is likely\n   to be named in the peer's policy.  In practice,\
    \ this generally means\n   FQDN, or USER_FQDN, but this information may also be\
    \ available to the\n   administrator through some out-of-band means.  In the absence\
    \ of such\n   out-of-band configuration information, the identity with which an\n\
    \   implementation chooses to populate the ID payload is a local matter.\n"
- title: 3.1.9.  Subject for DN Only
  contents:
  - "3.1.9.  Subject for DN Only\n   If an FQDN is intended to be processed as an\
    \ identity for the\n   purposes of ID matching, it MUST be placed in the dNSName\
    \ field of\n   the SubjectAltName extension.  Implementations MUST NOT populate\
    \ the\n   Subject with an FQDN in place of populating the dNSName field of the\n\
    \   SubjectAltName extension.\n   While nothing prevents an FQDN, USER_FQDN, or\
    \ IP address information\n   from appearing somewhere in the Subject contents,\
    \ such entries MUST\n   NOT be interpreted as identity information for the purposes\
    \ of\n   matching with ID or for policy lookup.\n"
- title: 3.1.10.  Binding Identity to Policy
  contents:
  - "3.1.10.  Binding Identity to Policy\n   In the presence of certificates that\
    \ contain multiple identities,\n   implementations should select the most appropriate\
    \ identity from the\n   certificate and populate the ID with that.  The recipient\
    \ MUST use\n   the identity sent as a first key when selecting the policy.  The\n\
    \   recipient MUST also use the most specific policy from that database\n   if\
    \ there are overlapping policies caused by wildcards (or the\n   implementation\
    \ can de-correlate the policy database so there will not\n   be overlapping entries,\
    \ or it can also forbid creation of overlapping\n   policies and leave the de-correlation\
    \ process to the administrator,\n   but, as this moves the problem to the administrator,\
    \ it is NOT\n   RECOMMENDED).\n   For example, imagine that an implementation\
    \ is configured with a\n   certificate that contains both a non-empty Subject\
    \ and a dNSName.\n   The sender's policy may specify which of those to use, and\
    \ it\n   indicates the policy to the other end by sending that ID.  If the\n \
    \  recipient has both a specific policy for the dNSName for this host\n   and\
    \ generic wildcard rule for some attributes present in the Subject\n   field,\
    \ it will match a different policy depending on which ID is\n   sent.  As the\
    \ sender knows why it wanted to connect the peer, it also\n   knows what identity\
    \ it should use to match the policy it needs to the\n   operation it tries to\
    \ perform; it is the only party who can select\n   the ID adequately.\n   In the\
    \ event that the policy cannot be found in the recipient's SPD\n   using the ID\
    \ sent, then the recipient MAY use the other identities in\n   the certificate\
    \ when attempting to match a suitable policy.  For\n   example, say the certificate\
    \ contains a non-empty Subject field, a\n   dNSName and an iPAddress.  If an iPAddress\
    \ is sent in ID but no\n   specific entry exists for the address in the policy\
    \ database, the\n   recipient MAY search in the policy database based on the Subject\
    \ or\n   the dNSName contained in the certificate.\n"
- title: 3.2.  Certificate Request Payload
  contents:
  - "3.2.  Certificate Request Payload\n   The Certificate Request (CERTREQ) Payload\
    \ allows an implementation to\n   request that a peer provide some set of certificates\
    \ or certificate\n   revocation lists (CRLs).  It is not clear from ISAKMP exactly\
    \ how\n   that set should be specified or how the peer should respond.  We\n \
    \  describe the semantics on both sides.\n"
- title: 3.2.1.  Certificate Type
  contents:
  - "3.2.1.  Certificate Type\n   The Certificate Type field identifies to the peer\
    \ the type of\n   certificate keying materials that are desired.  ISAKMP defines\
    \ 10\n   types of Certificate Data that can be requested and specifies the\n \
    \  syntax for these types.  For the purposes of this document, only the\n   following\
    \ types are relevant:\n      o  X.509 Certificate - Signature\n      o  Revocation\
    \ Lists (CRL and ARL)\n      o  PKCS #7 wrapped X.509 certificate\n   The use\
    \ of the other types are out of the scope of this document:\n      o  X.509 Certificate\
    \ - Key Exchange\n      o  PGP (Pretty Good Privacy) Certificate\n      o  DNS\
    \ Signed Key\n      o  Kerberos Tokens\n      o  SPKI (Simple Public Key Infrastructure)\
    \ Certificate\n      o  X.509 Certificate Attribute\n"
- title: 3.2.2.  X.509 Certificate - Signature
  contents:
  - "3.2.2.  X.509 Certificate - Signature\n   This type requests that the end-entity\
    \ certificate be a certificate\n   used for signing.\n"
- title: 3.2.3.  Revocation Lists (CRL and ARL)
  contents:
  - "3.2.3.  Revocation Lists (CRL and ARL)\n   ISAKMP does not support Certificate\
    \ Payload sizes over approximately\n   64K, which is too small for many CRLs,\
    \ and UDP fragmentation is\n   likely to occur at sizes much smaller than that.\
    \  Therefore, the\n   acquisition of revocation material is to be dealt with out-of-band\
    \ of\n   IKE.  For this and other reasons, implementations SHOULD NOT generate\n\
    \   CERTREQs where the Certificate Type is \"Certificate Revocation List\n   (CRL)\"\
    \ or \"Authority Revocation List (ARL)\".  Implementations that do\n   generate\
    \ such CERTREQs MUST NOT require the recipient to respond with\n   a CRL or ARL,\
    \ and MUST NOT fail when not receiving any.  Upon receipt\n   of such a CERTREQ,\
    \ implementations MAY ignore the request.\n   In lieu of exchanging revocation\
    \ lists in-band, a pointer to\n   revocation checking SHOULD be listed in either\
    \ the\n   CRLDistributionPoints (CDP) or the AuthorityInfoAccess (AIA)\n   certificate\
    \ extensions (see Section 5 for details).  Unless other\n   methods for obtaining\
    \ revocation information are available,\n   implementations SHOULD be able to\
    \ process these attributes, and from\n   them be able to identify cached revocation\
    \ material, or retrieve the\n   relevant revocation material from a URL, for validation\
    \ processing.\n   In addition, implementations MUST have the ability to configure\n\
    \   validation checking information for each certification authority.\n   Regardless\
    \ of the method (CDP, AIA, or static configuration), the\n   acquisition of revocation\
    \ material SHOULD occur out-of-band of IKE.\n   Note, however, that an inability\
    \ to access revocation status data\n   through out-of-band means provides a potential\
    \ security vulnerability\n   that could potentially be exploited by an attacker.\n"
- title: '3.2.4.  PKCS #7 wrapped X.509 certificate'
  contents:
  - "3.2.4.  PKCS #7 wrapped X.509 certificate\n   This ID type defines a particular\
    \ encoding (not a particular\n   certificate type); some current implementations\
    \ may ignore CERTREQs\n   they receive that contain this ID type, and the editors\
    \ are unaware\n   of any implementations that generate such CERTREQ messages.\n\
    \   Therefore, the use of this type is deprecated.  Implementations\n   SHOULD\
    \ NOT require CERTREQs that contain this Certificate Type.\n   Implementations\
    \ that receive CERTREQs that contain this ID type MAY\n   treat such payloads\
    \ as synonymous with \"X.509 Certificate -\n   Signature\".\n"
- title: 3.2.5.  Location of Certificate Request Payloads
  contents:
  - "3.2.5.  Location of Certificate Request Payloads\n   In IKEv1 Main Mode, the\
    \ CERTREQ payload MUST be in messages 4 and 5.\n"
- title: 3.2.6.  Presence or Absence of Certificate Request Payloads
  contents:
  - "3.2.6.  Presence or Absence of Certificate Request Payloads\n   When in-band\
    \ exchange of certificate keying materials is desired,\n   implementations MUST\
    \ inform the peer of this by sending at least one\n   CERTREQ.  In other words,\
    \ an implementation that does not send any\n   CERTREQs during an exchange SHOULD\
    \ NOT expect to receive any CERT\n   payloads.\n"
- title: 3.2.7.  Certificate Requests
  contents:
  - '3.2.7.  Certificate Requests

    '
- title: 3.2.7.1.  Specifying Certification Authorities
  contents:
  - "3.2.7.1.  Specifying Certification Authorities\n   When requesting in-band exchange\
    \ of keying materials, implementations\n   SHOULD generate CERTREQs for every\
    \ peer trust anchor that local\n   policy explicitly deems trusted during a given\
    \ exchange.\n   Implementations SHOULD populate the Certification Authority field\n\
    \   with the Subject field of the trust anchor, populated such that\n   binary\
    \ comparison of the Subject and the Certification Authority will\n   succeed.\n\
    \   Upon receipt of a CERTREQ, implementations MUST respond by sending at\n  \
    \ least the end-entity certificate corresponding to the Certification\n   Authority\
    \ listed in the CERTREQ unless local security policy\n   configuration specifies\
    \ that keying materials must be exchanged out-\n   of-band.  Implementations MAY\
    \ send certificates other than the end-\n   entity certificate (see Section 3.3\
    \ for discussion).\n   Note that, in the case where multiple end-entity certificates\
    \ may be\n   available that chain to different trust anchors, implementations\n\
    \   SHOULD resort to local heuristics to determine which trust anchor is\n   most\
    \ appropriate to use for generating the CERTREQ.  Such heuristics\n   are out\
    \ of the scope of this document.\n"
- title: 3.2.7.2.  Empty Certification Authority Field
  contents:
  - "3.2.7.2.  Empty Certification Authority Field\n   Implementations SHOULD generate\
    \ CERTREQs where the Certificate Type\n   is \"X.509 Certificate - Signature\"\
    \ and where the Certification\n   Authority field is not empty.  However, implementations\
    \ MAY generate\n   CERTREQs with an empty Certification Authority field under\
    \ special\n   conditions.  Although PKIX prohibits certificates with an empty\n\
    \   Issuer field, there does exist a use case where doing so is\n   appropriate,\
    \ and carries special meaning in the IKE context.  This\n   has become a convention\
    \ within the IKE interoperability tests and\n   usage space, and so its use is\
    \ specified, explained here for the sake\n   of interoperability.\n   USE CASE:\
    \ Consider the rare case where you have a gateway with\n   multiple policies for\
    \ a large number of IKE peers: some of these\n   peers are business partners,\
    \ some are remote-access employees, some\n   are teleworkers, some are branch\
    \ offices, and/or the gateway may be\n   simultaneously serving many customers\
    \ (e.g., Virtual Routers).  The\n   total number of certificates, and corresponding\
    \ trust anchors, is\n   very high -- say, hundreds.  Each of these policies is\
    \ configured\n   with one or more acceptable trust anchors, so that in total,\
    \ the\n   gateway has one hundred (100) trust anchors that could possibly used\n\
    \   to authenticate an incoming connection.  Assume that many of those\n   connections\
    \ originate from hosts/gateways with dynamically assigned\n   IP addresses, so\
    \ that the source IP of the IKE initiator is not known\n   to the gateway, nor\
    \ is the identity of the initiator (until it is\n   revealed in Main Mode message\
    \ 5).  In IKE main mode message 4, the\n   responder gateway will need to send\
    \ a CERTREQ to the initiator.\n   Given this example, the gateway will have no\
    \ idea which of the\n   hundred possible Certification Authorities to send in\
    \ the CERTREQ.\n   Sending all possible Certification Authorities will cause significant\n\
    \   processing delays, bandwidth consumption, and UDP fragmentation, so\n   this\
    \ tactic is ruled out.\n   In such a deployment, the responder gateway implementation\
    \ should be\n   able to do all it can to indicate a Certification Authority in\
    \ the\n   CERTREQ.  This means the responder SHOULD first check SPD to see if\n\
    \   it can match the source IP, and find some indication of which CA is\n   associated\
    \ with that IP.  If this fails (because the source IP is not\n   familiar, as\
    \ in the case above), then the responder SHOULD have a\n   configuration option\
    \ specifying which CAs are the default CAs to\n   indicate in CERTREQ during such\
    \ ambiguous connections (e.g., send\n   CERTREQ with these N CAs if there is an\
    \ unknown source IP).  If such\n   a fall-back is not configured or impractical\
    \ in a certain deployment\n   scenario, then the responder implementation SHOULD\
    \ have both of the\n   following configuration options:\n   o  send a CERTREQ\
    \ payload with an empty Certification Authority\n      field, or\n   o  terminate\
    \ the negotiation with an appropriate error message and\n      audit log entry.\n\
    \   Receiving a CERTREQ payload with an empty Certification Authority\n   field\
    \ indicates that the recipient should send all/any end-entity\n   certificates\
    \ it has, regardless of the trust anchor.  The initiator\n   should be aware of\
    \ what policy and which identity it will use, as it\n   initiated the connection\
    \ on a matched policy to begin with, and can\n   thus respond with the appropriate\
    \ certificate.\n   If, after sending an empty CERTREQ in Main Mode message 4,\
    \ a\n   responder receives a certificate in message 5 that chains to a trust\n\
    \   anchor that the responder either (a) does NOT support, or (b) was not\n  \
    \ configured for the policy (that policy was now able to be matched due\n   to\
    \ having the initiator's certificate present), this MUST be treated\n   as an\
    \ error, and security association setup MUST be aborted.  This\n   event SHOULD\
    \ be auditable.\n   Instead of sending an empty CERTREQ, the responder implementation\
    \ MAY\n   be configured to terminate the negotiation on the grounds of a\n   conflict\
    \ with locally configured security policy.\n   The decision of which to configure\
    \ is a matter of local security\n   policy; this document RECOMMENDS that both\
    \ options be presented to\n   administrators.\n   More examples and explanation\
    \ of this issue are included in \"More on\n   Empty CERTREQs\" (Appendix B).\n"
- title: 3.2.8.  Robustness
  contents:
  - '3.2.8.  Robustness

    '
- title: 3.2.8.1.  Unrecognized or Unsupported Certificate Types
  contents:
  - "3.2.8.1.  Unrecognized or Unsupported Certificate Types\n   Implementations MUST\
    \ be able to deal with receiving CERTREQs with\n   unsupported Certificate Types.\
    \  Absent any recognized and supported\n   CERTREQ types, implementations MAY\
    \ treat them as if they are of a\n   supported type with the Certification Authority\
    \ field left empty,\n   depending on local policy.  ISAKMP [2] Section 5.10, \"\
    Certificate\n   Request Payload Processing\", specifies additional processing.\n"
- title: 3.2.8.2.  Undecodable Certification Authority Fields
  contents:
  - "3.2.8.2.  Undecodable Certification Authority Fields\n   Implementations MUST\
    \ be able to deal with receiving CERTREQs with\n   undecodable Certification Authority\
    \ fields.  Implementations MAY\n   ignore such payloads, depending on local policy.\
    \  ISAKMP specifies\n   other actions which may be taken.\n"
- title: 3.2.8.3.  Ordering of Certificate Request Payloads
  contents:
  - "3.2.8.3.  Ordering of Certificate Request Payloads\n   Implementations MUST NOT\
    \ assume that CERTREQs are ordered in any way.\n"
- title: 3.2.9.  Optimizations
  contents:
  - '3.2.9.  Optimizations

    '
- title: 3.2.9.1.  Duplicate Certificate Request Payloads
  contents:
  - "3.2.9.1.  Duplicate Certificate Request Payloads\n   Implementations SHOULD NOT\
    \ send duplicate CERTREQs during an\n   exchange.\n"
- title: 3.2.9.2.  Name Lowest 'Common' Certification Authorities
  contents:
  - "3.2.9.2.  Name Lowest 'Common' Certification Authorities\n   When a peer's certificate\
    \ keying material has been cached, an\n   implementation can send a hint to the\
    \ peer to elide some of the\n   certificates the peer would normally include in\
    \ the response.  In\n   addition to the normal set of CERTREQs that are sent specifying\
    \ the\n   trust anchors, an implementation MAY send CERTREQs specifying the\n\
    \   relevant cached end-entity certificates.  When sending these hints,\n   it\
    \ is still necessary to send the normal set of trust anchor CERTREQs\n   because\
    \ the hints do not sufficiently convey all of the information\n   required by\
    \ the peer.  Specifically, either the peer may not support\n   this optimization\
    \ or there may be additional chains that could be\n   used in this context but\
    \ will not be if only the end-entity\n   certificate is specified.\n   No special\
    \ processing is required on the part of the recipient of\n   such a CERTREQ, and\
    \ the end-entity certificates will still be sent.\n   On the other hand, the recipient\
    \ MAY elect to elide certificates\n   based on receipt of such hints.\n   CERTREQs\
    \ must contain information that identifies a Certification\n   Authority certificate,\
    \ which results in the peer always sending at\n   least the end-entity certificate.\
    \  Always sending the end-entity\n   certificate allows implementations to determine\
    \ unambiguously when a\n   new certificate is being used by a peer (perhaps because\
    \ the previous\n   certificate has just expired), which may result in a failure\
    \ because\n   a new intermediate CA certificate might not be available to validate\n\
    \   the new end-entity certificate).  Implementations that implement this\n  \
    \ optimization MUST recognize when the end-entity certificate has\n   changed\
    \ and respond to it by not performing this optimization if the\n   exchange must\
    \ be retried so that any missing keying materials will be\n   sent during retry.\n"
- title: 3.2.9.3.  Example
  contents:
  - "3.2.9.3.  Example\n   Imagine that an IKEv1 implementation has previously received\
    \ and\n   cached the peer certificate chain TA->CA1->CA2->EE.  If, during a\n\
    \   subsequent exchange, this implementation sends a CERTREQ containing\n   the\
    \ Subject field in certificate TA, this implementation is\n   requesting that\
    \ the peer send at least three certificates: CA1, CA2,\n   and EE.  On the other\
    \ hand, if this implementation also sends a\n   CERTREQ containing the Subject\
    \ field of CA2, the implementation is\n   providing a hint that only one certificate\
    \ needs to be sent: EE.\n   Note that in this example, the fact that TA is a trust\
    \ anchor should\n   not be construed to imply that TA is a self-signed certificate.\n"
- title: 3.3.  Certificate Payload
  contents:
  - "3.3.  Certificate Payload\n   The Certificate (CERT) Payload allows the peer\
    \ to transmit a single\n   certificate or CRL.  Multiple certificates should be\
    \ transmitted in\n   multiple payloads.  For backwards-compatibility reasons,\n\
    \   implementations MAY send intermediate CA certificates in addition to\n   the\
    \ appropriate end-entity certificate(s), but SHOULD NOT send any\n   CRLs, ARLs,\
    \ or trust anchors.  Exchanging trust anchors and\n   especially CRLs and ARLs\
    \ in IKE would increase the likelihood of UDP\n   fragmentation, make the IKE\
    \ exchange more complex, and consume\n   additional network bandwidth.\n   Note,\
    \ however, that while the sender of the CERT payloads SHOULD NOT\n   send any\
    \ certificates it considers trust anchors, it's possible that\n   the recipient\
    \ may consider any given intermediate CA certificate to\n   be a trust anchor.\
    \  For instance, imagine the sender has the\n   certificate chain TA1->CA1->EE1\
    \ while the recipient has the\n   certificate chain TA2->EE2 where TA2=CA1.  The\
    \ sender is merely\n   including an intermediate CA certificate, while the recipient\n\
    \   receives a trust anchor.\n   However, not all certificate forms that are legal\
    \ in the PKIX\n   certificate profile make sense in the context of IPsec.  The\
    \ issue of\n   how to represent IKE-meaningful name-forms in a certificate is\n\
    \   especially problematic.  This document provides a profile for a\n   subset\
    \ of the PKIX certificate profile that makes sense for IKEv1/\n   ISAKMP.\n"
- title: 3.3.1.  Certificate Type
  contents:
  - "3.3.1.  Certificate Type\n   The Certificate Type field identifies to the peer\
    \ the type of\n   certificate keying materials that are included.  ISAKMP defines\
    \ 10\n   types of Certificate Data that can be sent and specifies the syntax\n\
    \   for these types.  For the purposes of this document, only the\n   following\
    \ types are relevant:\n      o  X.509 Certificate - Signature\n      o  Revocation\
    \ Lists (CRL and ARL)\n      o  PKCS #7 wrapped X.509 certificate\n   The use\
    \ of the other types are out of the scope of this document:\n      o  X.509 Certificate\
    \ - Key Exchange\n      o  PGP Certificate\n      o  DNS Signed Key\n      o \
    \ Kerberos Tokens\n      o  SPKI Certificate\n      o  X.509 Certificate Attribute\n"
- title: 3.3.2.  X.509 Certificate - Signature
  contents:
  - "3.3.2.  X.509 Certificate - Signature\n   This type specifies that Certificate\
    \ Data contains a certificate used\n   for signing.\n"
- title: 3.3.3.  Revocation Lists (CRL and ARL)
  contents:
  - "3.3.3.  Revocation Lists (CRL and ARL)\n   These types specify that Certificate\
    \ Data contains an X.509 CRL or\n   ARL.  These types SHOULD NOT be sent in IKE.\
    \  See Section 3.2.3 for\n   discussion.\n"
- title: '3.3.4.  PKCS #7 Wrapped X.509 Certificate'
  contents:
  - "3.3.4.  PKCS #7 Wrapped X.509 Certificate\n   This type defines a particular\
    \ encoding, not a particular certificate\n   type.  Implementations SHOULD NOT\
    \ generate CERTs that contain this\n   Certificate Type.  Implementations SHOULD\
    \ accept CERTs that contain\n   this Certificate Type because several implementations\
    \ are known to\n   generate them.  Note that those implementations sometimes include\n\
    \   entire certificate hierarchies inside a single CERT PKCS #7 payload,\n   which\
    \ violates the requirement specified in ISAKMP that this payload\n   contain a\
    \ single certificate.\n"
- title: 3.3.5.  Location of Certificate Payloads
  contents:
  - "3.3.5.  Location of Certificate Payloads\n   In IKEv1 Main Mode, the CERT payload\
    \ MUST be in messages 5 and 6.\n"
- title: 3.3.6.  Certificate Payloads Not Mandatory
  contents:
  - "3.3.6.  Certificate Payloads Not Mandatory\n   An implementation that does not\
    \ receive any CERTREQs during an\n   exchange SHOULD NOT send any CERT payloads,\
    \ except when explicitly\n   configured to proactively send CERT payloads in order\
    \ to interoperate\n   with non-compliant implementations that fail to send CERTREQs\
    \ even\n   when certificates are desired.  In this case, an implementation MAY\n\
    \   send the certificate chain (not including the trust anchor)\n   associated\
    \ with the end-entity certificate.  This MUST NOT be the\n   default behavior\
    \ of implementations.\n   Implementations whose local security policy configuration\
    \ expects\n   that a peer must receive certificates through out-of-band means\n\
    \   SHOULD ignore any CERTREQ messages that are received.  Such a\n   condition\
    \ has been known to occur due to non-compliant or buggy\n   implementations.\n\
    \   Implementations that receive CERTREQs from a peer that contain only\n   unrecognized\
    \ Certification Authorities MAY elect to terminate the\n   exchange, in order\
    \ to avoid unnecessary and potentially expensive\n   cryptographic processing,\
    \ denial-of-service (resource starvation)\n   attacks.\n"
- title: 3.3.7.  Response to Multiple Certification Authority Proposals
  contents:
  - "3.3.7.  Response to Multiple Certification Authority Proposals\n   In response\
    \ to multiple CERTREQs that contain different Certification\n   Authority identities,\
    \ implementations MAY respond using an end-entity\n   certificate which chains\
    \ to a CA that matches any of the identities\n   provided by the peer.\n"
- title: 3.3.8.  Using Local Keying Materials
  contents:
  - "3.3.8.  Using Local Keying Materials\n   Implementations MAY elect to skip parsing\
    \ or otherwise decoding a\n   given set of CERTs if those same keying materials\
    \ are available via\n   some preferable means, such as the case where certificates\
    \ from a\n   previous exchange have been cached.\n"
- title: 3.3.9.  Multiple End-Entity Certificates
  contents:
  - "3.3.9.  Multiple End-Entity Certificates\n   Implementations SHOULD NOT send\
    \ multiple end-entity certificates and\n   recipients SHOULD NOT be expected to\
    \ iterate over multiple end-entity\n   certificates.\n   If multiple end-entity\
    \ certificates are sent, they MUST have the same\n   public key; otherwise, the\
    \ responder does not know which key was used\n   in the Main Mode message 5.\n"
- title: 3.3.10.  Robustness
  contents:
  - '3.3.10.  Robustness

    '
- title: 3.3.10.1.  Unrecognized or Unsupported Certificate Types
  contents:
  - "3.3.10.1.  Unrecognized or Unsupported Certificate Types\n   Implementations\
    \ MUST be able to deal with receiving CERTs with\n   unrecognized or unsupported\
    \ Certificate Types.  Implementations MAY\n   discard such payloads, depending\
    \ on local policy.  ISAKMP [2] Section\n   5.10, \"Certificate Request Payload\
    \ Processing\", specifies additional\n   processing.\n"
- title: 3.3.10.2.  Undecodable Certificate Data Fields
  contents:
  - "3.3.10.2.  Undecodable Certificate Data Fields\n   Implementations MUST be able\
    \ to deal with receiving CERTs with\n   undecodable Certificate Data fields. \
    \ Implementations MAY discard\n   such payloads, depending on local policy.  ISAKMP\
    \ specifies other\n   actions that may be taken.\n"
- title: 3.3.10.3.  Ordering of Certificate Payloads
  contents:
  - "3.3.10.3.  Ordering of Certificate Payloads\n   Implementations MUST NOT assume\
    \ that CERTs are ordered in any way.\n"
- title: 3.3.10.4.  Duplicate Certificate Payloads
  contents:
  - "3.3.10.4.  Duplicate Certificate Payloads\n   Implementations MUST support receiving\
    \ multiple identical CERTs\n   during an exchange.\n"
- title: 3.3.10.5.  Irrelevant Certificates
  contents:
  - "3.3.10.5.  Irrelevant Certificates\n   Implementations MUST be prepared to receive\
    \ certificates and CRLs\n   that are not relevant to the current exchange.  Implementations\
    \ MAY\n   discard such extraneous certificates and CRLs.\n   Implementations MAY\
    \ send certificates that are irrelevant to an\n   exchange.  One reason for including\
    \ certificates that are irrelevant\n   to an exchange is to minimize the threat\
    \ of leaking identifying\n   information in exchanges where CERT is not encrypted\
    \ in IKEv1.  It\n   should be noted, however, that this probably provides rather\
    \ poor\n   protection against leaking the identity.\n   Another reason for including\
    \ certificates that seem irrelevant to an\n   exchange is that there may be two\
    \ chains from the Certification\n   Authority to the end entity, each of which\
    \ is only valid with certain\n   validation parameters (such as acceptable policies).\
    \  Since the end-\n   entity doesn't know which parameters the relying party is\
    \ using, it\n   should send the certificates needed for both chains (even if there's\n\
    \   only one CERTREQ).\n   Implementations SHOULD NOT send multiple end-entity\
    \ certificates and\n   recipients SHOULD NOT be expected to iterate over multiple\
    \ end-entity\n   certificates.\n"
- title: 3.3.11.  Optimizations
  contents:
  - '3.3.11.  Optimizations

    '
- title: 3.3.11.1.  Duplicate Certificate Payloads
  contents:
  - "3.3.11.1.  Duplicate Certificate Payloads\n   Implementations SHOULD NOT send\
    \ duplicate CERTs during an exchange.\n   Such payloads should be suppressed.\n"
- title: 3.3.11.2.  Send Lowest 'Common' Certificates
  contents:
  - "3.3.11.2.  Send Lowest 'Common' Certificates\n   When multiple CERTREQs are received\
    \ that specify certification\n   authorities within the end-entity certificate\
    \ chain, implementations\n   MAY send the shortest chain possible.  However, implementations\n\
    \   SHOULD always send the end-entity certificate.  See Section 3.2.9.2\n   for\
    \ more discussion of this optimization.\n"
- title: 3.3.11.3.  Ignore Duplicate Certificate Payloads
  contents:
  - "3.3.11.3.  Ignore Duplicate Certificate Payloads\n   Implementations MAY employ\
    \ local means to recognize CERTs that have\n   already been received and SHOULD\
    \ discard these duplicate CERTs.\n"
- title: 3.3.11.4.  Hash Payload
  contents:
  - "3.3.11.4.  Hash Payload\n   IKEv1 specifies the optional use of the Hash Payload\
    \ to carry a\n   pointer to a certificate in either of the Phase 1 public key\n\
    \   encryption modes.  This pointer is used by an implementation to\n   locate\
    \ the end-entity certificate that contains the public key that a\n   peer should\
    \ use for encrypting payloads during the exchange.\n   Implementations SHOULD\
    \ include this payload whenever the public\n   portion of the keypair has been\
    \ placed in a certificate.\n"
- title: 4.  Use of Certificates in RFC 4301 and IKEv2
  contents:
  - '4.  Use of Certificates in RFC 4301 and IKEv2

    '
- title: 4.1.  Identification Payload
  contents:
  - "4.1.  Identification Payload\n   The Peer Authorization Database (PAD) as described\
    \ in RFC 4301 [14]\n   describes the use of the ID payload in IKEv2 and provides\
    \ a formal\n   model for the binding of identity to policy in addition to providing\n\
    \   services that deal more specifically with the details of policy\n   enforcement,\
    \ which are generally out of scope of this document.  The\n   PAD is intended\
    \ to provide a link between the SPD and the security\n   association management\
    \ in protocols such as IKE.  See RFC 4301 [14],\n   Section 4.4.3 for more details.\n\
    \   Note that IKEv2 adds an optional IDr payload in the second exchange\n   that\
    \ the initiator may send to the responder in order to specify\n   which of the\
    \ responder's multiple identities should be used.  The\n   responder MAY choose\
    \ to send an IDr in the third exchange that\n   differs in type or content from\
    \ the initiator-generated IDr.  The\n   initiator MUST be able to receive a responder-generated\
    \ IDr that is a\n   different type from the one the initiator generated.\n"
- title: 4.2.  Certificate Request Payload
  contents:
  - '4.2.  Certificate Request Payload

    '
- title: 4.2.1.  Revocation Lists (CRL and ARL)
  contents:
  - "4.2.1.  Revocation Lists (CRL and ARL)\n   IKEv2 does not support Certificate\
    \ Payload sizes over approximately\n   64K.  See Section 3.2.3 for the problems\
    \ this can cause.\n"
- title: 4.2.1.1.  IKEv2's Hash and URL of X.509 certificate
  contents:
  - "4.2.1.1.  IKEv2's Hash and URL of X.509 certificate\n   This ID type defines\
    \ a request for the peer to send a hash and URL of\n   its X.509 certificate,\
    \ instead of the actual certificate itself.\n   This is a particularly useful\
    \ mechanism when the peer is a device\n   with little memory and lower bandwidth,\
    \ e.g., a mobile handset or\n   consumer electronics device.\n   If the IKEv2\
    \ implementation supports URL lookups, and prefers such a\n   URL to receiving\
    \ actual certificates, then the implementation will\n   want to send a notify\
    \ of type HTTP_CERT_LOOKUP_SUPPORTED.  From IKEv2\n   [3], Section 3.10.1, \"\
    This notification MAY be included in any\n   message that can include a CERTREQ\
    \ payload and indicates that the\n   sender is capable of looking up certificates\
    \ based on an HTTP-based\n   URL (and hence presumably would prefer to receive\
    \ certificate\n   specifications in that format)\".  If an HTTP_CERT_LOOKUP_SUPPORTED\n\
    \   notification is sent, the sender MUST support the http scheme.  See\n   Section\
    \ 4.3.1 for more discussion of HTTP_CERT_LOOKUP_SUPPORTED.\n"
- title: 4.2.1.2.  Location of Certificate Request Payloads
  contents:
  - "4.2.1.2.  Location of Certificate Request Payloads\n   In IKEv2, the CERTREQ\
    \ payload must be in messages 2 and 3.  Note that\n   in IKEv2, it is possible\
    \ to have one side authenticating with\n   certificates while the other side authenticates\
    \ with pre-shared keys.\n"
- title: 4.3.  Certificate Payload
  contents:
  - '4.3.  Certificate Payload

    '
- title: 4.3.1.  IKEv2's Hash and URL of X.509 Certificate
  contents:
  - "4.3.1.  IKEv2's Hash and URL of X.509 Certificate\n   This type specifies that\
    \ Certificate Data contains a hash and the URL\n   to a repository where an X.509\
    \ certificate can be retrieved.\n   An implementation that sends an HTTP_CERT_LOOKUP_SUPPORTED\n\
    \   notification MUST support the http scheme and MAY support the ftp\n   scheme,\
    \ and MUST NOT require any specific form of the url-path, and\n   it SHOULD support\
    \ having user-name, password, and port parts in the\n   URL.  The following are\
    \ examples of mandatory forms:\n   o  http://certs.example.com/certificate.cer\n\
    \   o  http://certs.example.com/certs/cert.pl?u=foo;a=pw;valid-to=+86400\n   o\
    \  http://certs.example.com/%0a/../foo/bar/zappa\n   while the following is an\
    \ example of a form that SHOULD be supported:\n   o  http://user:password@certs.example.com:8888/certificate.cer\n\
    \   FTP MAY be supported, and if it is, the following is an example of\n   the\
    \ ftp scheme that MUST be supported:\n   o  ftp://ftp.example.com/pub/certificate.cer\n"
- title: 4.3.2.  Location of Certificate Payloads
  contents:
  - "4.3.2.  Location of Certificate Payloads\n   In IKEv2, the CERT payload MUST\
    \ be in messages 3 and 4.  Note that in\n   IKEv2, it is possible to have one\
    \ side authenticating with\n   certificates while the other side authenticates\
    \ with pre-shared keys.\n"
- title: 4.3.3.  Ordering of Certificate Payloads
  contents:
  - "4.3.3.  Ordering of Certificate Payloads\n   For IKEv2, implementations MUST\
    \ NOT assume that any but the first\n   CERT is ordered in any way.  IKEv2 specifies\
    \ that the first CERT\n   contain an end-entity certificate that can be used to\
    \ authenticate\n   the peer.\n"
- title: 5.  Certificate Profile for IKEv1/ISAKMP and IKEv2
  contents:
  - "5.  Certificate Profile for IKEv1/ISAKMP and IKEv2\n   Except where specifically\
    \ stated in this document, implementations\n   MUST conform to the requirements\
    \ of the PKIX [5] certificate profile.\n"
- title: 5.1.  X.509 Certificates
  contents:
  - "5.1.  X.509 Certificates\n   Users deploying IKE and IPsec with certificates\
    \ have often had little\n   control over the capabilities of CAs available to\
    \ them.\n   Implementations of this specification may include configuration knobs\n\
    \   to disable checks required by this specification in order to permit\n   use\
    \ with inflexible and/or noncompliant CAs.  However, all checks on\n   certificates\
    \ exist for a specific reason involving the security of\n   the entire system.\
    \  Therefore, all checks MUST be enabled by default.\n   Administrators and users\
    \ ought to understand the security purpose for\n   the various checks, and be\
    \ clear on what security will be lost by\n   disabling the check.\n"
- title: 5.1.1.  Versions
  contents:
  - "5.1.1.  Versions\n   Although PKIX states that \"implementations SHOULD be prepared\
    \ to\n   accept any version certificate\", in practice, this profile requires\n\
    \   certain extensions that necessitate the use of Version 3 certificates\n  \
    \ for all but self-signed certificates used as trust anchors.\n   Implementations\
    \ that conform to this document MAY therefore reject\n   Version 1 and Version\
    \ 2 certificates in all other cases.\n"
- title: 5.1.2.  Subject
  contents:
  - "5.1.2.  Subject\n   Certification Authority implementations MUST be able to create\n\
    \   certificates with Subject fields with at least the following four\n   attributes:\
    \ CN, C, O, and OU.  Implementations MAY support other\n   Subject attributes\
    \ as well.  The contents of these attributes SHOULD\n   be configurable on a certificate-by-certificate\
    \ basis, as these\n   fields will likely be used by IKE implementations to match\
    \ SPD\n   policy.\n   See Section 3.1.5 for details on how IKE implementations\
    \ need to be\n   able to process Subject field attributes for SPD policy lookup.\n"
- title: 5.1.2.1.  Empty Subject Name
  contents:
  - "5.1.2.1.  Empty Subject Name\n   IKE Implementations MUST accept certificates\
    \ that contain an empty\n   Subject field, as specified in the PKIX certificate\
    \ profile.\n   Identity information in such certificates will be contained entirely\n\
    \   in the SubjectAltName extension.\n"
- title: 5.1.2.2.  Specifying Hosts and not FQDN in the Subject Name
  contents:
  - "5.1.2.2.  Specifying Hosts and not FQDN in the Subject Name\n   Implementations\
    \ that desire to place host names that are not intended\n   to be processed by\
    \ recipients as FQDNs (for instance \"Gateway\n   Router\") in the Subject MUST\
    \ use the commonName attribute.\n"
- title: 5.1.2.3.  EmailAddress
  contents:
  - "5.1.2.3.  EmailAddress\n   As specified in the PKIX certificate profile, implementations\
    \ MUST\n   NOT populate X.500 distinguished names with the emailAddress\n   attribute.\n"
- title: 5.1.3.  X.509 Certificate Extensions
  contents:
  - "5.1.3.  X.509 Certificate Extensions\n   Conforming IKE implementations MUST\
    \ recognize extensions that must or\n   may be marked critical according to this\
    \ specification.  These\n   extensions are: KeyUsage, SubjectAltName, and BasicConstraints.\n\
    \   Certification Authority implementations SHOULD generate certificates\n   such\
    \ that the extension criticality bits are set in accordance with\n   the PKIX\
    \ certificate profile and this document.  With respect to\n   compliance with\
    \ the PKIX certificate profile, IKE implementations\n   processing certificates\
    \ MAY ignore the value of the criticality bit\n   for extensions that are supported\
    \ by that implementation, but MUST\n   support the criticality bit for extensions\
    \ that are not supported by\n   that implementation.  That is, a relying party\
    \ SHOULD processes all\n   the extensions it is aware of whether the bit is true\
    \ or false -- the\n   bit says what happens when a relying party cannot process\
    \ an\n   extension.\n          implements    bit in cert     PKIX mandate    behavior\n\
    \          ------------------------------------------------------\n          yes\
    \           true            true            ok\n          yes           true \
    \           false           ok or reject\n          yes           false      \
    \     true            ok or reject\n          yes           false           false\
    \           ok\n          no            true            true            reject\n\
    \          no            true            false           reject\n          no\
    \            false           true            reject\n          no            false\
    \           false           ok\n"
- title: 5.1.3.1.  AuthorityKeyIdentifier and SubjectKeyIdentifier
  contents:
  - "5.1.3.1.  AuthorityKeyIdentifier and SubjectKeyIdentifier\n   Implementations\
    \ SHOULD NOT assume support for the\n   AuthorityKeyIdentifier or SubjectKeyIdentifier\
    \ extensions.  Thus,\n   Certification Authority implementations should not generate\n\
    \   certificate hierarchies that are overly complex to process in the\n   absence\
    \ of these extensions, such as those that require possibly\n   verifying a signature\
    \ against a large number of similarly named CA\n   certificates in order to find\
    \ the CA certificate that contains the\n   key that was used to generate the signature.\n"
- title: 5.1.3.2.  KeyUsage
  contents:
  - "5.1.3.2.  KeyUsage\n   IKE uses an end-entity certificate in the authentication\
    \ process.\n   The end-entity certificate may be used for multiple applications.\
    \  As\n   such, the CA can impose some constraints on the manner that a public\n\
    \   key ought to be used.  The KeyUsage (KU) and ExtendedKeyUsage (EKU)\n   extensions\
    \ apply in this situation.\n   Since we are talking about using the public key\
    \ to validate a\n   signature, if the KeyUsage extension is present, then at least\
    \ one of\n   the digitalSignature or the nonRepudiation bits in the KeyUsage\n\
    \   extension MUST be set (both can be set as well).  It is also fine if\n   other\
    \ KeyUsage bits are set.\n   A summary of the logic flow for peer cert validation\
    \ follows:\n   o  If no KU extension, continue.\n   o  If KU present and doesn't\
    \ mention digitalSignature or\n      nonRepudiation (both, in addition to other\
    \ KUs, is also fine),\n      reject cert.\n   o  If none of the above, continue.\n"
- title: 5.1.3.3.  PrivateKeyUsagePeriod
  contents:
  - "5.1.3.3.  PrivateKeyUsagePeriod\n   The PKIX certificate profile recommends against\
    \ the use of this\n   extension.  The PrivateKeyUsageExtension is intended to\
    \ be used when\n   signatures will need to be verified long past the time when\n\
    \   signatures using the private keypair may be generated.  Since IKE\n   security\
    \ associations (SAs) are short-lived relative to the intended\n   use of this\
    \ extension in addition to the fact that each signature is\n   validated only\
    \ a single time, the usefulness of this extension in the\n   context of IKE is\
    \ unclear.  Therefore, Certification Authority\n   implementations MUST NOT generate\
    \ certificates that contain the\n   PrivateKeyUsagePeriod extension.  If an IKE\
    \ implementation receives a\n   certificate with this set, it SHOULD ignore it.\n"
- title: 5.1.3.4.  CertificatePolicies
  contents:
  - "5.1.3.4.  CertificatePolicies\n   Many IKE implementations do not currently provide\
    \ support for the\n   CertificatePolicies extension.  Therefore, Certification\
    \ Authority\n   implementations that generate certificates that contain this\n\
    \   extension SHOULD NOT mark the extension as critical.  As is the case\n   with\
    \ all certificate extensions, a relying party receiving this\n   extension but\
    \ who can process the extension SHOULD NOT reject the\n   certificate because\
    \ it contains the extension.\n"
- title: 5.1.3.5.  PolicyMappings
  contents:
  - "5.1.3.5.  PolicyMappings\n   Many IKE implementations do not support the PolicyMappings\
    \ extension.\n   Therefore, implementations that generate certificates that contain\n\
    \   this extension SHOULD NOT mark the extension as critical.\n"
- title: 5.1.3.6.  SubjectAltName
  contents:
  - "5.1.3.6.  SubjectAltName\n   Deployments that intend to use an ID of FQDN, USER_FQDN,\
    \ IPV4_ADDR,\n   or IPV6_ADDR MUST issue certificates with the corresponding\n\
    \   SubjectAltName fields populated with the same data.  Implementations\n   SHOULD\
    \ generate only the following GeneralName choices in the\n   SubjectAltName extension,\
    \ as these choices map to legal IKEv1/ISAKMP/\n   IKEv2 Identification Payload\
    \ types: rfc822Name, dNSName, or\n   iPAddress.  Although it is possible to specify\
    \ any GeneralName choice\n   in the Identification Payload by using the ID_DER_ASN1_GN\
    \ ID type,\n   implementations SHOULD NOT assume support for such functionality,\
    \ and\n   SHOULD NOT generate certificates that do so.\n"
- title: 5.1.3.6.1.  dNSName
  contents:
  - "5.1.3.6.1.  dNSName\n   If the IKE ID type is FQDN, then this field MUST contain\
    \ a fully\n   qualified domain name.  If the IKE ID type is FQDN, then the dNSName\n\
    \   field MUST match its contents.  Implementations MUST NOT generate\n   names\
    \ that contain wildcards.  Implementations MAY treat certificates\n   that contain\
    \ wildcards in this field as syntactically invalid.\n   Although this field is\
    \ in the form of an FQDN, IKE implementations\n   SHOULD NOT assume that this\
    \ field contains an FQDN that will resolve\n   via the DNS, unless this is known\
    \ by way of some out-of-band\n   mechanism.  Such a mechanism is out of the scope\
    \ of this document.\n   Implementations SHOULD NOT treat the failure to resolve\
    \ as an error.\n"
- title: 5.1.3.6.2.  iPAddress
  contents:
  - "5.1.3.6.2.  iPAddress\n   If the IKE ID type is IPV4_ADDR or IPV6_ADDR, then\
    \ the iPAddress\n   field MUST match its contents.  Note that although PKIX permits\
    \ CIDR\n   [15] notation in the \"Name Constraints\" extension, the PKIX\n   certificate\
    \ profile explicitly prohibits using CIDR notation for\n   conveying identity\
    \ information.  In other words, the CIDR notation\n   MUST NOT be used in the\
    \ SubjectAltName extension.\n"
- title: 5.1.3.6.3.  rfc822Name
  contents:
  - "5.1.3.6.3.  rfc822Name\n   If the IKE ID type is USER_FQDN, then the rfc822Name\
    \ field MUST match\n   its contents.  Although this field is in the form of an\
    \ Internet mail\n   address, IKE implementations SHOULD NOT assume that this field\n\
    \   contains a valid email address, unless this is known by way of some\n   out-of-band\
    \ mechanism.  Such a mechanism is out of the scope of this\n   document.\n"
- title: 5.1.3.7.  IssuerAltName
  contents:
  - "5.1.3.7.  IssuerAltName\n   Certification Authority implementations SHOULD NOT\
    \ assume that other\n   implementations support the IssuerAltName extension, and\
    \ especially\n   should not assume that information contained in this extension\
    \ will\n   be displayed to end users.\n"
- title: 5.1.3.8.  SubjectDirectoryAttributes
  contents:
  - "5.1.3.8.  SubjectDirectoryAttributes\n   The SubjectDirectoryAttributes extension\
    \ is intended to convey\n   identification attributes of the subject.  IKE implementations\
    \ MAY\n   ignore this extension when it is marked non-critical, as the PKIX\n\
    \   certificate profile mandates.\n"
- title: 5.1.3.9.  BasicConstraints
  contents:
  - "5.1.3.9.  BasicConstraints\n   The PKIX certificate profile mandates that CA\
    \ certificates contain\n   this extension and that it be marked critical.  IKE\
    \ implementations\n   SHOULD reject CA certificates that do not contain this extension.\n\
    \   For backwards compatibility, implementations may accept such\n   certificates\
    \ if explicitly configured to do so, but the default for\n   this setting MUST\
    \ be to reject such certificates.\n"
- title: 5.1.3.10.  NameConstraints
  contents:
  - "5.1.3.10.  NameConstraints\n   Many IKE implementations do not support the NameConstraints\n\
    \   extension.  Since the PKIX certificate profile mandates that this\n   extension\
    \ be marked critical when present, Certification Authority\n   implementations\
    \ that are interested in maximal interoperability for\n   IKE SHOULD NOT generate\
    \ certificates that contain this extension.\n"
- title: 5.1.3.11.  PolicyConstraints
  contents:
  - "5.1.3.11.  PolicyConstraints\n   Many IKE implementations do not support the\
    \ PolicyConstraints\n   extension.  Since the PKIX certificate profile mandates\
    \ that this\n   extension be marked critical when present, Certification Authority\n\
    \   implementations that are interested in maximal interoperability for\n   IKE\
    \ SHOULD NOT generate certificates that contain this extension.\n"
- title: 5.1.3.12.  ExtendedKeyUsage
  contents:
  - "5.1.3.12.  ExtendedKeyUsage\n   The CA SHOULD NOT include the ExtendedKeyUsage\
    \ (EKU) extension in\n   certificates for use with IKE.  Note that there were\
    \ three IPsec-\n   related object identifiers in EKU that were assigned in 1999.\
    \  The\n   semantics of these values were never clearly defined.  The use of\n\
    \   these three EKU values in IKE/IPsec is obsolete and explicitly\n   deprecated\
    \ by this specification.  CAs SHOULD NOT issue certificates\n   for use in IKE\
    \ with them.  (For historical reference only, those\n   values were id-kp-ipsecEndSystem,\
    \ id-kp-ipsecTunnel, and id-kp-\n   ipsecUser.)\n   The CA SHOULD NOT mark the\
    \ EKU extension in certificates for use with\n   IKE and one or more other applications.\
    \  Nevertheless, this document\n   defines an ExtendedKeyUsage keyPurposeID that\
    \ MAY be used to limit a\n   certificate's use:\n   id-kp-ipsecIKE OBJECT IDENTIFIER\
    \ ::= { id-kp 17 }\n   where id-kp is defined in RFC 3280 [5].  If a certificate\
    \ is intended\n   to be used with both IKE and other applications, and one of\
    \ the other\n   applications requires use of an EKU value, then such certificates\n\
    \   MUST contain either the keyPurposeID id-kp-ipsecIKE or\n   anyExtendedKeyUsage\
    \ [5], as well as the keyPurposeID values\n   associated with the other applications.\
    \  Similarly, if a CA issues\n   multiple otherwise-similar certificates for multiple\
    \ applications\n   including IKE, and it is intended that the IKE certificate\
    \ NOT be\n   used with another application, the IKE certificate MAY contain an\
    \ EKU\n   extension listing a keyPurposeID of id-kp-ipsecIKE to discourage its\n\
    \   use with the other application.  Recall, however, that EKU extensions\n  \
    \ in certificates meant for use in IKE are NOT RECOMMENDED.\n   Conforming IKE\
    \ implementations are not required to support EKU.  If a\n   critical EKU extension\
    \ appears in a certificate and EKU is not\n   supported by the implementation,\
    \ then RFC 3280 requires that the\n   certificate be rejected.  Implementations\
    \ that do support EKU MUST\n   support the following logic for certificate validation:\n\
    \   o  If no EKU extension, continue.\n   o  If EKU present AND contains either\
    \ id-kp-ipsecIKE or\n      anyExtendedKeyUsage, continue.\n   o  Otherwise, reject\
    \ cert.\n"
- title: 5.1.3.13.  CRLDistributionPoints
  contents:
  - "5.1.3.13.  CRLDistributionPoints\n   Because this document deprecates the sending\
    \ of CRLs in-band, the use\n   of CRLDistributionPoints (CDP) becomes very important\
    \ if CRLs are\n   used for revocation checking (as opposed to, say, Online Certificate\n\
    \   Status Protocol - OCSP [16]).  The IPsec peer either needs to have a\n   URL\
    \ for a CRL written into its local configuration, or it needs to\n   learn it\
    \ from CDP.  Therefore, Certification Authority\n   implementations SHOULD issue\
    \ certificates with a populated CDP.\n   Failure to validate the CRLDistributionPoints/\n\
    \   IssuingDistributionPoint pair can result in CRL substitution where an\n  \
    \ entity knowingly substitutes a known good CRL from a different\n   distribution\
    \ point for the CRL that is supposed to be used, which\n   would show the entity\
    \ as revoked.  IKE implementations MUST support\n   validating that the contents\
    \ of CRLDistributionPoints match those of\n   the IssuingDistributionPoint to\
    \ prevent CRL substitution when the\n   issuing CA is using them.  At least one\
    \ CA is known to default to\n   this type of CRL use.  See Section 5.2.2.5 for\
    \ more information.\n   CDPs SHOULD be \"resolvable\".  Several non-compliant\
    \ Certification\n   Authority implementations are well known for including unresolvable\n\
    \   CDPs like http://localhost/path_to_CRL and http:///path_to_CRL that\n   are\
    \ equivalent to failing to include the CDP extension in the\n   certificate.\n\
    \   See the IETF IPR Web page for CRLDistributionPoints intellectual\n   property\
    \ rights (IPR) information.  Note that both the\n   CRLDistributionPoints and\
    \ IssuingDistributionPoint extensions are\n   RECOMMENDED but not REQUIRED by\
    \ the PKIX certificate profile, so\n   there is no requirement to license any\
    \ IPR.\n"
- title: 5.1.3.14.  InhibitAnyPolicy
  contents:
  - "5.1.3.14.  InhibitAnyPolicy\n   Many IKE implementations do not support the InhibitAnyPolicy\n\
    \   extension.  Since the PKIX certificate profile mandates that this\n   extension\
    \ be marked critical when present, Certification Authority\n   implementations\
    \ that are interested in maximal interoperability for\n   IKE SHOULD NOT generate\
    \ certificates that contain this extension.\n"
- title: 5.1.3.15.  FreshestCRL
  contents:
  - "5.1.3.15.  FreshestCRL\n   IKE implementations MUST NOT assume that the FreshestCRL\
    \ extension\n   will exist in peer certificates.  Note that most IKE implementations\n\
    \   do not support delta CRLs.\n"
- title: 5.1.3.16.  AuthorityInfoAccess
  contents:
  - "5.1.3.16.  AuthorityInfoAccess\n   The PKIX certificate profile defines the AuthorityInfoAccess\n\
    \   extension, which is used to indicate \"how to access CA information\n   and\
    \ services for the issuer of the certificate in which the extension\n   appears\"\
    .  Because this document deprecates the sending of CRLs in-\n   band, the use\
    \ of AuthorityInfoAccess (AIA) becomes very important if\n   OCSP [16] is to be\
    \ used for revocation checking (as opposed to CRLs).\n   The IPsec peer either\
    \ needs to have a URI for the OCSP query written\n   into its local configuration,\
    \ or it needs to learn it from AIA.\n   Therefore, implementations SHOULD support\
    \ this extension, especially\n   if OCSP will be used.\n"
- title: 5.1.3.17.  SubjectInfoAccess
  contents:
  - "5.1.3.17.  SubjectInfoAccess\n   The PKIX certificate profile defines the SubjectInfoAccess\n\
    \   certificate extension, which is used to indicate \"how to access\n   information\
    \ and services for the subject of the certificate in which\n   the extension appears\"\
    .  This extension has no known use in the\n   context of IPsec.  Conformant IKE\
    \ implementations SHOULD ignore this\n   extension when present.\n"
- title: 5.2.  X.509 Certificate Revocation Lists
  contents:
  - "5.2.  X.509 Certificate Revocation Lists\n   When validating certificates, IKE\
    \ implementations MUST make use of\n   certificate revocation information, and\
    \ SHOULD support such\n   revocation information in the form of CRLs, unless non-CRL\
    \ revocation\n   information is known to be the only method for transmitting this\n\
    \   information.  Deployments that intend to use CRLs for revocation\n   SHOULD\
    \ populate the CRLDistributionPoints extension.  Therefore,\n   Certification\
    \ Authority implementations MUST support issuing\n   certificates with this field\
    \ populated.  IKE implementations MAY\n   provide a configuration option to disable\
    \ use of certain types of\n   revocation information, but that option MUST be\
    \ off by default.  Such\n   an option is often valuable in lab testing environments.\n"
- title: 5.2.1.  Multiple Sources of Certificate Revocation Information
  contents:
  - "5.2.1.  Multiple Sources of Certificate Revocation Information\n   IKE implementations\
    \ that support multiple sources of obtaining\n   certificate revocation information\
    \ MUST act conservatively when the\n   information provided by these sources is\
    \ inconsistent: when a\n   certificate is reported as revoked by one trusted source,\
    \ the\n   certificate MUST be considered revoked.\n"
- title: 5.2.2.  X.509 Certificate Revocation List Extensions
  contents:
  - '5.2.2.  X.509 Certificate Revocation List Extensions

    '
- title: 5.2.2.1.  AuthorityKeyIdentifier
  contents:
  - "5.2.2.1.  AuthorityKeyIdentifier\n   Certification Authority implementations\
    \ SHOULD NOT assume that IKE\n   implementations support the AuthorityKeyIdentifier\
    \ extension, and\n   thus should not generate certificate hierarchies which are\
    \ overly\n   complex to process in the absence of this extension, such as those\n\
    \   that require possibly verifying a signature against a large number of\n  \
    \ similarly named CA certificates in order to find the CA certificate\n   which\
    \ contains the key that was used to generate the signature.\n"
- title: 5.2.2.2.  IssuerAltName
  contents:
  - "5.2.2.2.  IssuerAltName\n   Certification Authority implementations SHOULD NOT\
    \ assume that IKE\n   implementations support the IssuerAltName extension, and\
    \ especially\n   should not assume that information contained in this extension\
    \ will\n   be displayed to end users.\n"
- title: 5.2.2.3.  CRLNumber
  contents:
  - "5.2.2.3.  CRLNumber\n   As stated in the PKIX certificate profile, all issuers\
    \ MUST include\n   this extension in all CRLs.\n"
- title: 5.2.2.4.  DeltaCRLIndicator
  contents:
  - '5.2.2.4.  DeltaCRLIndicator

    '
- title: 5.2.2.4.1.  If Delta CRLs Are Unsupported
  contents:
  - "5.2.2.4.1.  If Delta CRLs Are Unsupported\n   IKE implementations that do not\
    \ support delta CRLs MUST reject CRLs\n   that contain the DeltaCRLIndicator (which\
    \ MUST be marked critical\n   according to the PKIX certificate profile) and MUST\
    \ make use of a\n   base CRL if it is available.  Such implementations MUST ensure\
    \ that a\n   delta CRL does not \"overwrite\" a base CRL, for instance, in the\n\
    \   keying material database.\n"
- title: 5.2.2.4.2.  Delta CRL Recommendations
  contents:
  - "5.2.2.4.2.  Delta CRL Recommendations\n   Since some IKE implementations that\
    \ do not support delta CRLs may\n   behave incorrectly or insecurely when presented\
    \ with delta CRLs,\n   administrators and deployers should consider whether issuing\
    \ delta\n   CRLs increases security before issuing such CRLs.  And, if all the\n\
    \   elements in the VPN and PKI systems do not adequately support Delta\n   CRLs,\
    \ then their use should be questioned.\n   The editors are aware of several implementations\
    \ that behave in an\n   incorrect or insecure manner when presented with delta\
    \ CRLs.  See\n   Appendix A for a description of the issue.  Therefore, this\n\
    \   specification RECOMMENDS NOT issuing delta CRLs at this time.  On the\n  \
    \ other hand, failure to issue delta CRLs may expose a larger window of\n   vulnerability\
    \ if a full CRL is not issued as often as delta CRLs\n   would be.  See the Security\
    \ Considerations section of the PKIX [5]\n   certificate profile for additional\
    \ discussion.  Implementers as well\n   as administrators are encouraged to consider\
    \ these issues.\n"
- title: 5.2.2.5.  IssuingDistributionPoint
  contents:
  - "5.2.2.5.  IssuingDistributionPoint\n   A CA that is using CRLDistributionPoints\
    \ may do so to provide many\n   \"small\" CRLs, each only valid for a particular\
    \ set of certificates\n   issued by that CA.  To associate a CRL with a certificate,\
    \ the CA\n   places the CRLDistributionPoints extension in the certificate, and\n\
    \   places the IssuingDistributionPoint in the CRL.  The\n   distributionPointName\
    \ field in the CRLDistributionPoints extension\n   MUST be identical to the distributionPoint\
    \ field in the\n   IssuingDistributionPoint extension.  At least one CA is known\
    \ to\n   default to this type of CRL use.  See Section 5.1.3.13 for more\n   information.\n"
- title: 5.2.2.6.  FreshestCRL
  contents:
  - "5.2.2.6.  FreshestCRL\n   Given the recommendations against Certification Authority\n\
    \   implementations generating delta CRLs, this specification RECOMMENDS\n   that\
    \ implementations do not populate CRLs with the FreshestCRL\n   extension, which\
    \ is used to obtain delta CRLs.\n"
- title: 5.3.  Strength of Signature Hashing Algorithms
  contents:
  - "5.3.  Strength of Signature Hashing Algorithms\n   At the time that this document\
    \ is being written, popular\n   certification authorities and CA software issue\
    \ certificates using\n   the RSA-with-SHA1 and RSA-with-MD5 signature algorithms.\n\
    \   Implementations MUST be able to validate certificates with either of\n   those\
    \ algorithms.\n   As described in [17], both the MD5 and SHA-1 hash algorithms\
    \ are\n   weaker than originally expected with respect to hash collisions.\n \
    \  Certificates that use these hash algorithms as part of their\n   signature\
    \ algorithms could conceivably be subject to an attack where\n   a CA issues a\
    \ certificate with a particular identity, and the\n   recipient of that certificate\
    \ can create a different valid\n   certificate with a different identity.  So\
    \ far, such an attack is\n   only theoretical, even with the weaknesses found\
    \ in the hash\n   algorithms.\n   Because of the recent attacks, there has been\
    \ a heightened interest\n   in having widespread deployment of additional signature\
    \ algorithms.\n   The algorithm that has been mentioned most often is RSA-with-SHA256,\n\
    \   two types of which are described in detail in [18].  It is widely\n   expected\
    \ that this signature algorithm will be much more resilient to\n   collision-based\
    \ attacks than the current RSA-with-SHA1 and RSA-with-\n   MD5, although no proof\
    \ of that has been shown.  There is active\n   discussion in the cryptographic\
    \ community of better hash functions\n   that could be used in signature algorithms.\n\
    \   In order to interoperate, all implementations need to be able to\n   validate\
    \ signatures for all algorithms that the implementations will\n   encounter. \
    \ Therefore, implementations SHOULD be able to use\n   signatures that use the\
    \ sha256WithRSAEncryption signature algorithm\n   (PKCS#1 version 1.5) as soon\
    \ as possible.  At the time that this\n   document is being written, there is\
    \ at least one CA that supports\n   generating certificates with sha256WithRSAEncryption\
    \ signature\n   algorithm, and it is expected that there will be significant\n\
    \   deployment of this algorithm by the end of 2007.\n"
- title: 6.  Configuration Data Exchange Conventions
  contents:
  - "6.  Configuration Data Exchange Conventions\n   Below, we present a common format\
    \ for exchanging configuration data.\n   Implementations MUST support these formats,\
    \ MUST support receiving\n   arbitrary whitespace at the beginning and end of\
    \ any line, MUST\n   support receiving arbitrary line lengths although they SHOULD\n\
    \   generate lines less than 76 characters, and MUST support receiving\n   the\
    \ following three line-termination disciplines: LF (US-ASCII 10),\n   CR (US-ASCII\
    \ 13), and CRLF.\n"
- title: 6.1.  Certificates
  contents:
  - "6.1.  Certificates\n   Certificates MUST be Base64 [19] encoded and appear between\
    \ the\n   following delimiters:\n            -----BEGIN CERTIFICATE-----\n   \
    \         -----END CERTIFICATE-----\n"
- title: 6.2.  CRLs and ARLs
  contents:
  - "6.2.  CRLs and ARLs\n   CRLs and ARLs MUST be Base64 encoded and appear between\
    \ the following\n   delimiters:\n            -----BEGIN CRL-----\n           \
    \ -----END CRL-----\n"
- title: 6.3.  Public Keys
  contents:
  - "6.3.  Public Keys\n   IKE implementations MUST support two forms of public keys:\n\
    \   certificates and so-called \"raw\" keys.  Certificates should be\n   transferred\
    \ in the same form as Section 6.1.  A raw key is only the\n   SubjectPublicKeyInfo\
    \ portion of the certificate, and MUST be Base64\n   encoded and appear between\
    \ the following delimiters:\n            -----BEGIN PUBLIC KEY-----\n        \
    \    -----END PUBLIC KEY-----\n"
- title: 6.4.  PKCS#10 Certificate Signing Requests
  contents:
  - "6.4.  PKCS#10 Certificate Signing Requests\n   A PKCS#10 [9] Certificate Signing\
    \ Request MUST be Base64 encoded and\n   appear between the following delimiters:\n\
    \            -----BEGIN CERTIFICATE REQUEST-----\n            -----END CERTIFICATE\
    \ REQUEST-----\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1.  Certificate Request Payload
  contents:
  - "7.1.  Certificate Request Payload\n   The Contents of CERTREQ are not encrypted\
    \ in IKE.  In some\n   environments, this may leak private information.  Administrators\
    \ in\n   some environments may wish to use the empty Certification Authority\n\
    \   option to prevent such information from leaking, at the cost of\n   performance.\n"
- title: 7.2.  IKEv1 Main Mode
  contents:
  - "7.2.  IKEv1 Main Mode\n   Certificates may be included in any message, and therefore\n\
    \   implementations may wish to respond with CERTs in a message that\n   offers\
    \ privacy protection in Main Mode messages 5 and 6.\n   Implementations may not\
    \ wish to respond with CERTs in the second\n   message, thereby violating the\
    \ identity protection feature of Main\n   Mode in IKEv1.\n"
- title: 7.3.  Disabling Certificate Checks
  contents:
  - "7.3.  Disabling Certificate Checks\n   It is important to note that anywhere\
    \ this document suggests\n   implementers provide users with the configuration\
    \ option to simplify,\n   modify, or disable a feature or verification step, there\
    \ may be\n   security consequences for doing so.  Deployment experience has shown\n\
    \   that such flexibility may be required in some environments, but\n   making\
    \ use of such flexibility can be inappropriate in others.  Such\n   configuration\
    \ options MUST default to \"enabled\" and it is appropriate\n   to provide warnings\
    \ to users when disabling such features.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The authors would like to acknowledge the expired document\
    \ \"A PKIX\n   Profile for IKE\" (July 2000) for providing valuable materials\
    \ for\n   this document.\n   The authors would like to especially thank Eric Rescorla,\
    \ one of its\n   original authors, in addition to Greg Carter, Steve Hanna, Russ\n\
    \   Housley, Charlie Kaufman, Tero Kivinen, Pekka Savola, Paul Hoffman,\n   and\
    \ Gregory Lebovitz for their valuable comments, some of which have\n   been incorporated\
    \ verbatim into this document.  Paul Knight performed\n   the arduous task of\
    \ converting the text to XML format.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]   Harkins, D. and D. Carrel, \"The Internet\
    \ Key Exchange (IKE)\",\n         RFC 2409, November 1998.\n   [2]   Maughan,\
    \ D., Schneider, M., and M. Schertler, \"Internet\n         Security Association\
    \ and Key Management Protocol (ISAKMP)\", RFC\n         2408, November 1998.\n\
    \   [3]   Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\", RFC\n     \
    \    4306, December 2005.\n   [4]   Kent, S. and R. Atkinson, \"Security Architecture\
    \ for the\n         Internet Protocol\", RFC 2401, November 1998.\n   [5]   Housley,\
    \ R., Polk, W., Ford, W., and D. Solo, \"Internet X.509\n         Public Key Infrastructure\
    \ Certificate and Certificate\n         Revocation List (CRL) Profile\", RFC 3280,\
    \ April 2002.\n   [6]   Piper, D., \"The Internet IP Security Domain of Interpretation\n\
    \         for ISAKMP\", RFC 2407, November 1998.\n   [7]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [8]   Postel, J., \"Internet Protocol\", STD 5, RFC 791,\
    \ September\n         1981.\n   [9]   Nystrom, M. and B. Kaliski, \"PKCS #10:\
    \ Certification Request\n         Syntax Specification Version 1.7\", RFC 2986,\
    \ November 2000.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [10]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6 (IPv6)\n         Specification\", RFC 2460, December 1998.\n\
    \   [11]  Arends, R., Austein, R., Larson, M., Massey, D., and S. Rose,\n    \
    \     \"DNS Security Introduction and Requirements\", RFC 4033, March\n      \
    \   2005.\n   [12]  Faltstrom, P., Hoffman, P., and A. Costello,\n         \"\
    Internationalizing Domain Names in Applications (IDNA)\", RFC\n         3490,\
    \ March 2003.\n   [13]  Lynn, C., Kent, S., and K. Seo, \"X.509 Extensions for\
    \ IP\n         Addresses and AS Identifiers\", RFC 3779, June 2004.\n   [14] \
    \ Kent, S. and K. Seo, \"Security Architecture for the Internet\n         Protocol\"\
    , RFC 4301, December 2005.\n   [15]  Fuller, V. and T. Li, \"Classless Inter-domain\
    \ Routing (CIDR):\n         The Internet Address Assignment and Aggregation Plan\"\
    , BCP 122,\n         RFC 4632, August 2006.\n   [16]  Myers, M., Ankney, R., Malpani,\
    \ A., Galperin, S., and C. Adams,\n         \"X.509 Internet Public Key Infrastructure\
    \ Online Certificate\n         Status Protocol - OCSP\", RFC 2560, June 1999.\n\
    \   [17]  Hoffman, P. and B. Schneier, \"Attacks on Cryptographic Hashes\n   \
    \      in Internet Protocols\", RFC 4270, November 2005.\n   [18]  Schaad, J.,\
    \ Kaliski, B., and R. Housley, \"Additional Algorithms\n         and Identifiers\
    \ for RSA Cryptography for use in the Internet\n         X.509 Public Key Infrastructure\
    \ Certificate and Certificate\n         Revocation List (CRL) Profile\", RFC 4055,\
    \ June 2005.\n   [19]  Josefsson, S., \"The Base16, Base32, and Base64 Data Encodings\"\
    ,\n         RFC 4648, October 2006.\n"
- title: Appendix A.  The Possible Dangers of Delta CRLs
  contents:
  - "Appendix A.  The Possible Dangers of Delta CRLs\n   The problem is that the CRL\
    \ processing algorithm is sometimes written\n   incorrectly with the assumption\
    \ that all CRLs are base CRLs and it is\n   assumed that CRLs will pass content\
    \ validity tests.  Specifically,\n   such implementations fail to check the certificate\
    \ against all\n   possible CRLs: if the first CRL that is obtained from the keying\n\
    \   material database fails to decode, no further revocation checks are\n   performed\
    \ for the relevant certificate.  This problem is compounded\n   by the fact that\
    \ implementations that do not understand delta CRLs\n   may fail to decode such\
    \ CRLs due to the critical DeltaCRLIndicator\n   extension.  The algorithm that\
    \ is implemented in this case is\n   approximately:\n   o  fetch newest CRL\n\
    \   o  check validity of CRL signature\n   o  if CRL signature is valid, then\n\
    \   o  if CRL does not contain unrecognized critical extensions and\n      certificate\
    \ is on CRL, then set certificate status to revoked\n   The authors note that\
    \ a number of PKI toolkits do not even provide a\n   method for obtaining anything\
    \ but the newest CRL, which in the\n   presence of delta CRLs may in fact be a\
    \ delta CRL, not a base CRL.\n   Note that the above algorithm is dangerous in\
    \ many ways.  See the\n   PKIX [5] certificate profile for the correct algorithm.\n"
- title: Appendix B.  More on Empty CERTREQs
  contents:
  - "Appendix B.  More on Empty CERTREQs\n   Sending empty certificate requests is\
    \ commonly used in\n   implementations, and in the IPsec interop meetings, vendors\
    \ have\n   generally agreed that it means that send all/any end-entity\n   certificates\
    \ you have (if multiple end-entity certificates are sent,\n   they must have same\
    \ public key, as otherwise, the other end does not\n   know which key was used).\
    \  For 99% of cases, the client has exactly\n   one certificate and public key,\
    \ so it really doesn't matter, but the\n   server might have multiple; thus, it\
    \ simply needs to say to the\n   client, use any certificate you have.  If we\
    \ are talking about\n   corporate VPNs, etc., even if the client has multiple\
    \ certificates or\n   keys, all of them would be usable when authenticating to\
    \ the server,\n   so the client can simply pick one.\n   If there is some real\
    \ difference on which certificate to use (like\n   ones giving different permissions),\
    \ then the client must be\n   configured anyway, or it might even ask the user\
    \ which one to use\n   (the user is the only one who knows whether he needs admin\n\
    \   privileges, thus needs to use admin cert, or if the normal email\n   privileges\
    \ are ok, thus uses email only cert).\n   In 99% of the cases, the client has\
    \ exactly one certificate, so it\n   will send it.  In 90% of the rest of the\
    \ cases, any of the\n   certificates is ok, as they are simply different certificates\
    \ from\n   the same CA, or from different CAs for the same corporate VPN, thus\n\
    \   any of them is ok.\n   Sending empty certificate requests has been agreed\
    \ there to mean\n   \"give me your cert, any cert\".\n   Justification:\n   o\
    \  Responder first does all it can to send a CERTREQ with a CA, check\n      for\
    \ IP match in SPD, have a default set of CAs to use in ambiguous\n      cases,\
    \ etc.\n   o  Sending empty CERTREQs is fairly common in implementations today,\n\
    \      and is generally accepted to mean \"send me a certificate, any\n      certificate\
    \ that works for you\".\n   o  Saves responder sending potentially hundreds of\
    \ certs, the\n      fragmentation problems that follow, etc.\n   o  In +90% of\
    \ use cases, Initiators have exactly one certificate.\n   o  In +90% of the remaining\
    \ use cases, the multiple certificates it\n      has are issued by the same CA.\n\
    \   o  In the remaining use case(s) -- if not all the others above -- the\n  \
    \    Initiator will be configured explicitly with which certificate to\n     \
    \ send, so responding to an empty CERTREQ is easy.\n   The following example shows\
    \ why initiators need to have sufficient\n   policy definition to know which certificate\
    \ to use for a given\n   connection it initiates.\n   EXAMPLE: Your client (initiator)\
    \ is configured with VPN policies for\n   gateways A and B (representing perhaps\
    \ corporate partners).\n   The policies for the two gateways look something like:\n\
    \         Acme Company policy (gateway A)\n            Engineering can access\
    \ 10.1.1.0\n                   Trusted CA: CA-A, Trusted Users: OU=Engineering\n\
    \            Partners can access 20.1.1.0\n                   Trusted CA: CA-B,\
    \ Trusted Users: OU=AcmePartners\n         Bizco Company policy (gateway B)\n\
    \           Sales can access 30.1.1.0\n                   Trusted CA: CA-C, Trusted\
    \ Users: OU=Sales\n           Partners can access 40.1.1.0\n                 \
    \  Trusted CA: CA-B, Trusted Users: OU=BizcoPartners\n   You are an employee of\
    \ Acme and you are issued the following\n   certificates:\n   o  From CA-A: CN=JoeUser,OU=Engineering\n\
    \   o  From CA-B: CN=JoePartner,OU=BizcoPartners\n   The client MUST be configured\
    \ locally to know which CA to use when\n   connecting to either gateway.  If your\
    \ client is not configured to\n   know the local credential to use for the remote\
    \ gateway, this\n   scenario will not work either.  If you attempt to connect\
    \ to Bizco,\n   everything will work... as you are presented with responding with\
    \ a\n   certificate signed by CA-B or CA-C... as you only have a certificate\n\
    \   from CA-B you are OK.  If you attempt to connect to Acme, you have an\n  \
    \ issue because you are presented with an ambiguous policy selection.\n   As the\
    \ initiator, you will be presented with certificate requests\n   from both CA-A\
    \ and CA-B.  You have certificates issued by both CAs,\n   but only one of the\
    \ certificates will be usable.  How does the client\n   know which certificate\
    \ it should present?  It must have sufficiently\n   clear local policy specifying\
    \ which one credential to present for the\n   connection it initiates.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Brian Korver\n   Network Resonance, Inc.\n   2483 E. Bayshore\
    \ Rd.\n   Palo Alto, CA  94303\n   US\n   Phone: +1 650 812 7705\n   EMail: briank@networkresonance.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
