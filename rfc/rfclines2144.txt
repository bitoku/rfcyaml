The CAST 128 Encryption Algorithm Status of this Memo
This memo provides information for the Internet community.
This memo does not specify an Internet standard of any kind.
Distribution of this memo is unlimited.
Abstract There is a need in the Internet community for an unencumbered encryption algorithm with a range of key sizes that can provide security for a variety of cryptographic applications and protocols.
This document describes an existing algorithm that can be used to satisfy this requirement.
Included are a description of the cipher and the key scheduling algorithm (Section 2), the s boxes (Appendix A), and a set of test vectors (Appendix B).
This document describes the CAST 128 encryption algorithm, a DES like Substitution Permutation Network (SPN) cryptosystem which appears to have good resistance to differential cryptanalysis, linear cryptanalysis, and related key cryptanalysis.
This cipher also possesses a number of other desirable cryptographic properties, including avalanche, Strict Avalanche Criterion (SAC), Bit Independence Criterion (BIC), no complementation property, and an absence of weak and semi weak keys.
It thus appears to be a good candidate for general purpose use throughout the Internet community wherever a cryptographically strong, freely available encryption algorithm is required.
Adams [Adams] discusses the CAST design procedure in some detail; analyses can also be obtained on line (see, for example, [Web1] or [Web2]).
Description of Algorithm CAST 128 belongs to the class of encryption algorithms known as Feistel ciphers; overall operation is thus similar to the Data Encryption Standard (DES).
The full encryption algorithm is given in the following four steps.
Compute 16 pairs of subkeys {Kmi, Kri} from K (see Sections 2.1 and 2.4).
(Split the plaintext into left and right 32 bit halves L0   m1...m32 and R0   m33...m64.)
(16 rounds) for i from 1 to 16, compute Li and Ri as follows:
Li   Ri 1; Ri   Li 1 ^ f(Ri 1,Kmi,Kri), where f is defined in Section 2.2 (f is of Type 1, Type 2, or Type 3, depending on i).
(Exchange final blocks L16, R16 and concatenate to form the ciphertext.)
Decryption is identical to the encryption algorithm given above, except that the rounds (and therefore the subkey pairs) are used in reverse order to compute (L0,R0) from (R16,L16).
See Appendix B for test vectors which can be used to verify correctness of an implementation of this algorithm.
Pairs of Round Keys CAST 128 uses a pair of subkeys per round:
a 32 bit quantity Km is used as a "masking" key and a 5 bit quantity Kr is used as a "rotation" key.
Three different round functions are used in CAST 128.
The rounds are as follows (where "D" is the data input to the f function and "Ia"
"Id" are the most significant byte through least significant byte of I, respectively).
S4[Id] Rounds 1, 4, 7, 10, 13, and 16 use f function Type 1.
Rounds 2, 5, 8, 11, and 14 use f function Type 2.
Rounds 3, 6, 9, 12, and 15 use f function Type 3. 2.3.
boxes S1, S2, S3, and S4 are round function s boxes; S5, S6, S7, and S8 are key schedule s  boxes.
Although 8 s boxes require a total of 8 KBytes of storage, note that only 4 KBytes are required during actual encryption / decryption since subkey generation is typically done prior to any data input.
See Appendix A for the contents of s boxes S1 S8.
Key Schedule Let the 128 bit key be x0x1x2x3x4x5x6x7x8x9xAxBxCxDxExF, where x0 represents the most significant byte and xF
represents the least significant byte.
zF be intermediate (temporary) bytes.
The subkeys are formed from the key x0x1x2x3x4x5x6x7x8x9xAxBxCxDxExF as follows.
S8[z2] ^ S7[z9] K4    S5[zE]
S6[xB] K9    S5[z3] ^ S6[z2]
K14   S5[xA] ^ S6[xB] ^
S6[x7] K15   S5[xC] ^ S6[xD] ^
[The remaining half is identical to what is given above, carrying on from the last created x0..xF to generate keys K17 K32.]
] K19   S5[zC] ^ S6[zD] ^ S7[z3] ^
S8[z2] ^ S7[z9] K20   S5[zE]
K22   S5[x1] ^ S6[x0] ^
S8[x9] ^ S7[x3] K24   S5[x5]
S6[x7] K31   S5[xC] ^ S6[xD]
for (i 1; i< 16; i )
For variable keysize operation, the specification is as follows:
For key sizes up to and including 80 bits (i.e., 40, 48, 56, 64, 72, and 80 bits), the algorithm is exactly as specified but uses 12 rounds instead of 16;
For key sizes greater than 80 bits, the algorithm uses the full 16 rounds; 3)
For key sizes less than 128 bits, the key is padded with zero bytes (in the rightmost, or least significant, positions) out to 128 bits (since the CAST 128 key schedule assumes an input key of 128 bits).
Note that although CAST 128 can support all 12 key sizes listed above, 40 bits, 64 bits, 80 bits, and 128 bits are the sizes that find utility in typical environments.
Therefore, it will likely be sufficient for most implementations to support some subset of only these four sizes.
In order to avoid confusion when variable keysize operation is used, the name CAST 128 is to be considered synonymous with the name CAST5; this allows a keysize to be appended without ambiguity.
Thus, for example, CAST 128 with a 40 bit key is to be referred to as CAST5 40; where a 128 bit key is explicitly intended, the name CAST5 128 should be used.
For those who may be using CAST in algorithm negotiation within a protocol, or in any other context which may require the use of OBJECT IDENTIFIERs, the following OIDs have been defined.
, in bits } Note:
The iv is optional and defaults to all zero.
On the encoding end, if an all zero iv is used, then it should absent from the Parameters.
On the decoding end, an absent iv should be interpreted as meaning all zeros.
This is encryption and decryption in CBC mode using the CAST 128 symmetric block cipher algorithm.
, in bits } Note: The IV is derived from the hashing procedure and therefore need not be included in Parameters.
This is password based encryption and decryption in CBC mode using MD5 and the CAST 128 symmetric block cipher .
#5 (which uses the DES cipher) for details of the PBE computation.
is a 12  or 16 round Feistel cipher that has a blocksize of 64 bits and a keysize of up to 128 bits; it uses rotation to provide intrinsic immunity to linear and differential attacks; it uses a mixture of XOR, addition and subtraction (modulo 2  32) in the round function; and it uses three variations of the round function itself throughout the cipher.
Finally, the 8x32 s boxes used in the round function each have a minimum nonlinearity of 74 and a maximum entry of 2 in the difference distribution table.
This cipher appears to have cryptographic strength in accordance with its keysize (128 bits) and has very good encryption / decryption performance:  3.3 MBytes/sec on a 150 MHz Pentium processor.
The CAST 128 cipher described in this document is available worldwide on a royalty free basis for commercial and non commercial uses.
This entire memo is about security since it describes an algorithm which is specifically intended for cryptographic purposes.
References [Adams] Adams, C., "Constructing Symmetric Ciphers using the CAST Design Procedure", Designs, Codes, and Cryptography (to appear).
[Web1] "Constructing Symmetric Ciphers using the CAST Design Procedure" (
identical to [Adams] but available on line) and "CAST Design Procedure Addendum",
[Web2] "CAST Encryption Algorithm Related Publications", http://adonis.ee.queensu.ca:8000/cast/cast.html. 6.
Author's Address Carlisle Adams Entrust Technologies 750 Heron Road, Ottawa, Canada,
Appendix A. S Boxes S Box S1 30fb40d4
9fa0ff0b 6beccd2f 3f258c7a 1e213f2f 9c004dd3 6003e540 cf9fc949
7a42206a 29f9d4d5 f61b1891 bb72275e aa508167 38901091 c6b505eb
548300d0 00322a3c bf64cddf ba57a68e 75c6372b 50afd341 a7c13275
2deaa3e2 9e204d02 c8bd25ac eadf55b3 d5bd9e98 e31231b2
d8710f69 aa51c90f aa786bf6 22513f1e aa51a79b 2ad344cc 7b5a41f0
e11f0abc bfc5fe4a a70aec10 ac39570a 3f04442f
c69dff09 c75b65f0 d9db40d8 ec0e7779 4744ead4
9675b3fd a3ac3755 d47c27af 51c85f4d 56907596 a5bb15e6 580304f0
5648f725 ff5e569d 0ced63d0 7c63b2cf 700b45e1 d5ea50f1 85a92872 af1fbda7 d4234870
9a56456e dc39200c 20c8c571 962bda1c e1e696ff
393f4380 fe61cf7a eec5207a 55889c94 72fc0651 ada7ef79 4e1d7235 d55a63ce
de0436ba 99c430ef 5f0c0794 18dcdb7d a1d6eff3
361e3084 e4eb573b 602f64a4 d63acd9c 1bbc4635 9e81032d
f46f6ffe a1ff3b1f 208cfb6a 8f458c74 d9e0a227 4ec73a34
20e74364 b45e1378 de18639b 881ca122 b96726d1 8049a7e8 22b7da7b 5e552d25
a1269859 ec645c44 52c877a9 cdff33a6 a02b1741
5eea29cb 145892f5 91584f7f 5483697b 2667a8cc 85196048 8c4bacea 833860d4
6c387e8a 0ae6d249 b284600c d835731d dcb1c647 ac4c56ea 3ebd81b3 230eabb0 6438bc87 f0b5b1fa 8f5ea2b3 fc184642 0a036b7a
4fb089bd 649da589 a345415e 5c038323 3e5d3bb9
7160a539 73bfbe70 83877605 4523ecf1 S Box S3
eb903dbf e810c907 47607fff 369fe44b 8c1fc644
b9afa820 fade82e0 a067268b 8272792e 553fb2c0 489ae22b d4ef9794 125e3fbc
1257a240 4e1a8302 bae07fff 528246e7 8e57140e 3373f7bf
579fc264 67094f31 f2bd3f5f 40fff7c1 1fb78dfc 8e6bd2c1 437be59b 99b03dbf b5dbc64b 638dc0e6
c5884a28 ccc36f71 b843c213 6c0743f1 8309893c 0feddd5f 2f7fe850
efbd7d9b a672597d ada840d8 45f54504 fa5d7403
0276e4b6 94fd6574 927985b2 8276dbcb 02778176
3dc2c0f8 8d1ab2ec 64380e51 68cc7bfb d90f2788 12490181 5de5ffd4 dd7ef86a 76a2e214 b9a40368 925d958f
285ba1c8 3c62f44f 35c0eaa5 e805d231 428929fb
a2e53f55 b9e6d4bc a2048016 97573833 d7207d67 de0f8f3d
60543a49 5727c148 2be98a1d 8ab41738 20e1be24 af96da0f
9db30420 1fb6e9de a7be7bef d273a298 4a4f7bdb
fa020ed1 7e287aff e60fb663 095f35a1 79ebf120
fd059d43 6497b7b1 f3641f63 241e4adf 28147f5f
1574ca16 df871b62 211c40b7 a51a9ef9 0014377b 041e8ac8 09114003
5bbfc92d d0ec3b25 b7801ab7 8d6d3b24 20c763ef c366a5fc 9c382880 0ace3205
9126b031 36cc6fdb c70b8b46 d9e66a48 56e55a79 026a4ceb
8b9b0f56 013988c3 b1c52fca b4be31cd d8782806 12a3a4e2
296b299e 492fc295 9266beab b5676e69 9bd3ddda df7e052f db25701c
6afce36c 0316cc04 8644213e b7dc59d0 7965291f ccd6fd43
1dd358f5 44dd9d44 1731167f 08fbf1fa e7f511cc d2051b00 735aba00
c539b9aa 4d79fe6a f2f3f763 68af8040 ed0c9e56
17af8975 32c7911c 89f89468 0d01e980 524755f4 03b63cc9 0cc844b2
0d26f3fd 9342ede7 04a5c284 636737b6 50f5b616 f24766e3
8eca36c1 136e05db fef18391 fb887a37 d6e7f7d4
fa02c3f6 407edac3 cbb3d550 1793084d b0d70eba 0ab378d5
49e92ff6 309e374f 2cb6356a 85808573 4991f840
b3cdcf72 6e5dd2f3 20936079 459b80a5 be60e2db a9c23101
1b5ad7a8 f61ed5ad 6cf6e479 20758184 d0cefa65 88f7be58 4a046826
5e76ffa8 b1534546 6d47de08 efe9e7d4 S Box S6
e2337f7c 95db08e7 016843b4 eced5cbc 325553ac
e1992863 c8f30c60 2e78ef3c d0d51932 cf0fec14 f7ca07d2 d0a82072
efe8c36e f890cdd9 80226dae c340a4a3 df7e9c09 a694a807 5b7c5ecc 221db3a6
53bddb65 e76ffbe7 e967fd78 0ba93563 8e342bc1 e8a11be9 4980740d c8087dfc 8de4bf99
a11101a0 7fd37975 da5a26c0 e81f994f 9528cd89 fd339fed b87834bf 5f04456d 22258698
157ec6f2 372b74af 692573e4 e9a9d848 f3160289 3a62ef1d
20951063 4576698d b6fad407 592af950 36f73523
7e432fd9 0c5ec241 8809286c f592d891 08a930f6
c266e96f 6fe4ac98 b173ecc0 bc60b42a 953498da fba1ae12
97c55b96 eaec991b 29935913 01fdb7f1 088e8dfa
3b4cbf9f 4a5de3ab e6051d35 a0e1d855 d36b4cf1 f544edeb b0e93524 bebb8fbd a2d762cf
7128a454 48392905 a65b1db8 851c97bd d675cf2f S Box S7 85e04019 332bf567
cd4181e9 e150210c e24ef1bd b168c381 fde4e789 5c79b0d8 1e8bfd43
356d1cf2 107789be b3b2e9ce 0502aa8f 0bc0351e 166bf52a
47bc2829 4725ba37 a66ad22b 7ad61f1e 0c5cbafa
f9583745 cf19df58 bec3f756 c06eba30 07211b24 45c28829
009b4fc3 aba68ced 9ac96f78 06a5b79a b2856e6e 1aec3ca9 be838688 0e0804e9
55f1be56 e7e5363b b3a1f25d f7debb85 61fe033c
16746233 3c034c28 da6d0c74 79aac56c 3ce4e1ad 51f0c802 98f8f35a 1626a49f
6e77a6a9 cb658b5c d45230c7 2bd1408b 60c03eb7 b9068d78 a33754f4 f430c87d c8a71302 b96d8c32
c2610aca 3d49a9cf bae3b9df b65f8de6 92aeaf64
74904698 4c2b0edd 4f757656 5d393378 a132234f 3d321c5d
c79f022f 3c997e7e 5e4f9504 3ffafbbd 76f7ad0e
b5229301 cfd2a87f 60aeb767 1814386b 30bcc33d 38a0c07d fd1606f2 c363519b
94e01be8 90716f4b 954b8aa3 S Box S8 e216300d bbddfffc
2a42931c 76e38111 b12def3a 37ddddfc de9adeb1 0a0cc32c
bb243a0f b4d137cf b44e79f0 049eedfd 0b15a15d
38129022 ce949ad4 b84769ad 965bd862 82f3d055
3b74ef2e 522fffb1 d24708cc 1c7e27cd a4eb215b 3cf1d2e2
9d17dee7 27eb35e6 c9aff67b 36baf5b8 09c467cd
4f9b12ea f215f225 a223736f 9fb4c428 25d04979 34c713f8 c4618187 ea7a6e98
c5068778 e580b3e6 4e68b8f4 c5c8b37e 0d809ea2 398feb7c 132a4f94 43b7950e
5715f6b7 ef3478dd f267616f c148cbe4 9052815e
e98ea084 5889e9e1 efd390fc dd07d35b db485694 38d7e5b2
c7eb8f37 2de705ca 8951570f df09822b bd691a6c
ba6e4ec0 99265164 1ee7230d 50b2ad80 eaee6801
8db2a283 ea8bf59e Appendix B. Test Vectors
This appendix provides test vectors for the CAST 128 cipher described this document.
In order to ensure that the algorithm is implemented correctly, the following test vectors can be used for verification (values given in hexadecimal notation).
67 89 AB CD EF ciphertext
23 8B 4F E5 84 7E 44 B2 80 bit
34 56 78 23 45   01
34 56 78 23 45 00 00 00 00 00
67 89 AB CD EF ciphertext    EB 6A 71 1A 2C 02 27 1B 40 bit
23 45 67 12 00 00 00 00 00 00 00 00 00 00
67 89 AB CD EF ciphertext    7A C8 16 D1 6E 9B 30 2E B.2.
Full Maintenance Test A maintenance test for CAST 128 has been defined to verify the correctness of implementations.
It is defined in pseudo code as follows, where a and b are 128 bit vectors,
aL and aR are the leftmost and rightmost halves of a, bL and bR are the leftmost and rightmost halves of b, and
encrypt(d,k) is the encryption in ECB mode of block d under key k. Initial
34 56 78 23 45 67 89 34
34 56 78 23 45 67 89 34
56 78 9A (hex) do 1,000,000 times { aL
a   EE A9 D0 A2 49 FD 3B A6 B3 43 6F B8 9D 6D CA 92
B2 C9 5E B0 0C
31 AD 71 80 AC 05 B8 E8 3D 69 6E (hex)
