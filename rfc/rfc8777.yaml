- title: __initial_text__
  contents:
  - '      DNS Reverse IP Automatic Multicast Tunneling (AMT) Discovery

    '
- title: Abstract
  contents:
  - "Abstract\n   This document updates RFC 7450, \"Automatic Multicast Tunneling\"\
    \ (or\n   AMT), by modifying the relay discovery process.  A new DNS resource\n\
    \   record named AMTRELAY is defined for publishing AMT relays for\n   source-specific\
    \ multicast channels.  The reverse IP DNS zone for a\n   multicast sender's IP\
    \ address is configured to use AMTRELAY resource\n   records to advertise a set\
    \ of AMT relays that can receive and forward\n   multicast traffic from that sender\
    \ over an AMT tunnel.  Other\n   extensions and clarifications to the relay discovery\
    \ process are also\n   defined.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8777.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Background\n     1.2.  Terminology\n\
    \       1.2.1.  Relays and Gateways\n       1.2.2.  Definitions\n       1.2.3.\
    \  Requirements Language\n   2.  Relay Discovery Overview\n     2.1.  Basic Mechanics\n\
    \     2.2.  Signaling and Discovery\n     2.3.  Example Deployments\n       2.3.1.\
    \  Example Receiving Networks\n       2.3.2.  Example Sending Networks\n   3.\
    \  Relay Discovery Operation\n     3.1.  Optimal Relay Selection\n       3.1.1.\
    \  Overview\n       3.1.2.  Preference Ordering\n       3.1.3.  Connecting to\
    \ Multiple Relays\n     3.2.  Happy Eyeballs\n       3.2.1.  Overview\n      \
    \ 3.2.2.  Algorithm Guidelines\n       3.2.3.  Connection Definition\n     3.3.\
    \  Guidelines for Restarting Discovery\n       3.3.1.  Overview\n       3.3.2.\
    \  Updates to Restarting Events\n       3.3.3.  Tunnel Stability\n       3.3.4.\
    \  Traffic Health\n       3.3.5.  Relay Loaded or Shutting Down\n       3.3.6.\
    \  Relay Discovery Messages vs. Restarting Discovery\n       3.3.7.  Independent\
    \ Discovery per Traffic Source\n     3.4.  DNS Configuration\n     3.5.  Waiting\
    \ for DNS Resolution\n   4.  AMTRELAY Resource Record Definition\n     4.1.  AMTRELAY\
    \ RRType\n     4.2.  AMTRELAY RData Format\n       4.2.1.  RData Format - Precedence\n\
    \       4.2.2.  RData Format - Discovery Optional (D-bit)\n       4.2.3.  RData\
    \ Format - Type\n       4.2.4.  RData Format - Relay\n     4.3.  AMTRELAY Record\
    \ Presentation Format\n       4.3.1.  Representation of AMTRELAY RRs\n       4.3.2.\
    \  Examples\n   5.  IANA Considerations\n   6.  Security Considerations\n    \
    \ 6.1.  Use of AMT\n     6.2.  Record-Spoofing\n     6.3.  Congestion\n   7. \
    \ References\n     7.1.  Normative References\n     7.2.  Informative References\n\
    \   Appendix A.  Unknown RRType Construction\n   Acknowledgements\n   Author's\
    \ Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines DNS Reverse IP AMT Discovery (DRIAD),\
    \ a\n   mechanism for AMT gateways to discover AMT relays that are capable of\n\
    \   forwarding multicast traffic from a known source IP address.\n   AMT (Automatic\
    \ Multicast Tunneling) is defined in [RFC7450] and\n   provides a method to transport\
    \ multicast traffic over a unicast\n   tunnel in order to traverse network segments\
    \ that are not multicast\n   capable.\n   Section 4.1.5 of [RFC7450] explains\
    \ that the relay selection process\n   for AMT is intended to be more flexible\
    \ than the particular discovery\n   method described in that document.  That section\
    \ further explains\n   that the selection process might need to depend on the\
    \ source of the\n   multicast traffic in some deployments, since a relay must\
    \ be able to\n   receive multicast traffic from the desired source in order to\
    \ forward\n   it.\n   Section 4.1.5 of [RFC7450] goes on to suggest DNS-based\
    \ queries as a\n   possible solution: DRIAD is DNS based.  This solution also\
    \ addresses\n   the relay discovery issues in the \"Disadvantages of this\n  \
    \ configuration\" lists in Sections 3.3 and 3.4 of [RFC8313].\n   The goal for\
    \ DRIAD is to enable multicast connectivity between\n   separate multicast-enabled\
    \ networks without preconfiguring any\n   peering arrangements between the networks\
    \ when neither the sending\n   nor the receiving network is connected to a multicast-enabled\n\
    \   backbone.\n   This document extends the relay discovery procedure described\
    \ in\n   Section 5.2.3.4 of [RFC7450].\n"
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   The reader is assumed to be familiar with the basic DNS\
    \ concepts\n   described in [RFC1034], [RFC1035], and the subsequent documents\
    \ that\n   update them, particularly [RFC2181].\n   The reader is also assumed\
    \ to be familiar with the concepts and\n   terminology regarding source-specific\
    \ multicast as described in\n   [RFC4607] and the use of Internet Group Management\
    \ Protocol Version 3\n   (IGMPv3) [RFC3376] and Multicast Listener Discovery Version\
    \ 2 (MLDv2)\n   [RFC3810] for group management of source-specific multicast channels,\n\
    \   as described in [RFC4604].\n   The reader should also be familiar with AMT,\
    \ particularly the\n   terminology listed in Sections 3.2 and 3.3 of [RFC7450].\n"
- title: 1.2.  Terminology
  contents:
  - '1.2.  Terminology

    '
- title: 1.2.1.  Relays and Gateways
  contents:
  - "1.2.1.  Relays and Gateways\n   When reading this document, it's especially helpful\
    \ to recall that\n   once an AMT tunnel is established, the relay receives native\n\
    \   multicast traffic and sends unicast tunnel-encapsulated traffic to\n   the\
    \ gateway.  The gateway receives the tunnel-encapsulated packets,\n   decapsulates\
    \ them, and forwards them as native multicast packets, as\n   illustrated in Figure\
    \ 1.\n     Multicast  +-----------+  Unicast  +-------------+  Multicast\n   \
    \ >---------> | AMT relay | >=======> | AMT gateway | >--------->\n          \
    \           Figure 1: AMT Tunnel Illustration\n"
- title: 1.2.2.  Definitions
  contents:
  - "1.2.2.  Definitions\n     |       Term | Definition                         \
    \             |\n     |      (S,G) | A source-specific multicast channel, as \
    \        |\n     |            | described in [RFC4607].  A pair of IP addresses\
    \ |\n     |            | with a source host IP and destination group IP. |\n \
    \    |       CMTS | Cable Modem Termination System                  |\n     |\
    \  discovery | A broker or load balancer for AMT relay         |\n     |     broker\
    \ | discovery, as mentioned in Section 4.2.1.1 of   |\n     |            | [RFC7450].\
    \                                      |\n     | downstream | Further from the\
    \ source of traffic, as          |\n     |            | described in [RFC7450].\
    \                         |\n     |       FQDN | Fully Qualified Domain Name,\
    \ as described in    |\n     |            | [RFC8499].                       \
    \               |\n     |    gateway | An AMT gateway, as described in [RFC7450].\
    \      |\n     |     L flag | The \"Limit\" flag described in Section 5.1.4.4\
    \   |\n     |            | of [RFC7450].                                   |\n\
    \     |        OLT | Optical Line Terminal                           |\n     |\
    \      relay | An AMT relay, as described in [RFC7450].        |\n     |     \
    \   RPF | Reverse Path Forwarding, as described in        |\n     |          \
    \  | [RFC5110].                                      |\n     |         RR | A\
    \ DNS Resource Record, as described in          |\n     |            | [RFC1034].\
    \                                      |\n     |     RRType | A DNS Resource Record\
    \ Type, as described in     |\n     |            | [RFC1034].                \
    \                      |\n     |        SSM | Source-specific multicast, as described\
    \ in      |\n     |            | [RFC4607].                                  \
    \    |\n     |   upstream | Closer to the source of traffic, as described   |\n\
    \     |            | in [RFC7450].                                   |\n     \
    \                      Table 1: Definitions\n"
- title: 1.2.3.  Requirements Language
  contents:
  - "1.2.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  Relay Discovery Overview
  contents:
  - '2.  Relay Discovery Overview

    '
- title: 2.1.  Basic Mechanics
  contents:
  - "2.1.  Basic Mechanics\n   The AMTRELAY resource record (RR) defined in this document\
    \ is used to\n   publish the IP address or domain name of a set of AMT relays\
    \ or\n   discovery brokers that can receive, encapsulate, and forward\n   multicast\
    \ traffic from a particular sender.\n   The sender is the owner of the RR and\
    \ configures the zone so that it\n   contains a set of RRs that provide the addresses\
    \ or domain names of\n   AMT relays (or discovery brokers that advertise relays)\
    \ that can\n   receive multicast IP traffic from that sender.\n   This enables\
    \ AMT gateways in remote networks to discover an AMT relay\n   that is capable\
    \ of forwarding traffic from the sender.  This, in\n   turn, enables those AMT\
    \ gateways to receive the multicast traffic\n   tunneled over a unicast AMT tunnel\
    \ from those relays and then pass\n   the multicast packets into networks or applications\
    \ that are using\n   the gateway to subscribe to traffic from that sender.\n \
    \  This mechanism only works for source-specific multicast (SSM)\n   channels.\
    \  The source address of the (S,G) is reversed and used as an\n   index into one\
    \ of the reverse mapping trees (in-addr.arpa for IPv4,\n   as described in Section\
    \ 3.5 of [RFC1035], or ip6.arpa for IPv6, as\n   described in Section 2.5 of [RFC3596]).\n\
    \   This mechanism should be treated as an extension of the AMT relay\n   discovery\
    \ procedure described in Section 5.2.3.4 of [RFC7450].  A\n   gateway that supports\
    \ this method of AMT relay discovery SHOULD use\n   this method whenever it's\
    \ performing the relay discovery procedure,\n   the source IP addresses for desired\
    \ (S,G)s are known to the gateway,\n   and conditions match the requirements outlined\
    \ in Section 3.1.\n   Some detailed example use cases are provided in Section\
    \ 2.3, and\n   other applicable example topologies appear in Sections 3.3, 3.4,\
    \ and\n   3.5 of [RFC8313].\n"
- title: 2.2.  Signaling and Discovery
  contents:
  - "2.2.  Signaling and Discovery\n   This section describes a typical example of\
    \ the end-to-end process\n   for signaling a receiver's join of an SSM channel\
    \ that relies on an\n   AMTRELAY RR.\n   The example in Figure 2 contains two\
    \ multicast-enabled networks that\n   are both connected to the internet with\
    \ non-multicast-capable links\n   and which have no direct association with each\
    \ other.\n   A content provider operates a sender, which is a source of multicast\n\
    \   traffic inside a multicast-capable network.\n   An end user who is a customer\
    \ of the content provider has a\n   multicast-capable Internet Service Provider\
    \ (ISP), which operates a\n   receiving network that uses an AMT gateway.  The\
    \ AMT gateway is DRIAD\n   capable.\n   The content provider provides the user\
    \ with a receiving application\n   that tries to subscribe to at least one (S,G).\
    \  This receiving\n   application could, for example, be a file transfer system\
    \ using File\n   Delivery over Unidirectional Transport (FLUTE) [RFC6726], a live\n\
    \   video stream using RTP [RFC3550], or any other application that might\n  \
    \ subscribe to an SSM channel.\n                     |    Sender     |\n     \
    \ |    |         |  2001:db8::a  |\n      |Data|                 |\n      |Flow|\
    \      Multicast  |\n     \\|    |/      Network   |\n        \\/           |\
    \   AMT relay   |\n                     | 2001:db8:c::f |\n                  \
    \           |\n                    Unicast\n                     Tunnel  |   \
    \     3: --> DNS Query: type=AMTRELAY,\n     Join/Leave       +-------------+\
    \         AMTRELAY=2001:db8:c::f\n      Signals         | AMT gateway |\n    \
    \     |        Multicast  |\n                   Network   |\n                \
    \      |   Receiver  |\n                      |  (end user) |\n              \
    \           Figure 2: DRIAD Messaging\n   In this simple example, the sender IP\
    \ is 2001:db8::a, which is\n   sending traffic to the group address ff3e::8000:d,\
    \ and the relay IP\n   is 2001:db8::c:f.\n   The content provider has previously\
    \ configured the DNS zone that\n   contains the reverse IP domain name for the\
    \ sender's IP address so\n   that it provides an AMTRELAY RR with the relay's\
    \ IP address (see\n   Section 4.3 for details about the AMTRELAY RR format and\
    \ semantics).\n   As described in Section 2.5 of [RFC3596], the reverse IP FQDN\
    \ of the\n   sender's address \"2001:db8::a\" is:\n    a.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.\n\
    \   The sequence of events depicted in Figure 2 is as follows:\n   1.  The end\
    \ user starts the app, which issues a join to the (S,G):\n       (2001:db8::a,\
    \ ff3e::8000:d).\n   2.  The join propagates with RPF through the receiver's multicast-\n\
    \       enabled network with PIM [RFC7761] or another multicast routing\n    \
    \   mechanism until the AMT gateway receives a signal to join the\n       (S,G).\n\
    \   3.  The AMT gateway performs a reverse DNS lookup for the AMTRELAY\n     \
    \  RRType by sending an AMTRELAY RRType query for the reverse IP\n       domain\
    \ name for the sender's source IP address (the S from the\n       (S,G)).\n  \
    \     The DNS resolver for the AMT gateway uses ordinary DNS recursive\n     \
    \  resolution until it has the authoritative result that the content\n       provider\
    \ configured, which informs the AMT gateway that the relay\n       address is\
    \ 2001:db8::c:f.\n   4.  The AMT gateway performs AMT handshakes with the AMT\
    \ relay as\n       described in Section 4 of [RFC7450], then forwards a membership\n\
    \       report to the relay, indicating subscription to the (S,G).\n   5.  The\
    \ relay propagates the join through its network toward the\n       sender and\
    \ then forwards the appropriate AMT-encapsulated traffic\n       to the gateway,\
    \ which decapsulates and forwards it as a native\n       multicast through its\
    \ downstream network to the end user.\n   In the case of an IPv4 (S,G), the only\
    \ difference in the AMT relay\n   discovery process is the use of the in-addr.arpa\
    \ reverse IP domain\n   name, as described in Section 3.5 of [RFC1035], instead\
    \ of the\n   in6.arpa domain name.  For example, if the (S,G) is (198.51.100.12,\n\
    \   232.252.0.2), the reverse IP FQDN for the AMTRELAY query would be\n   \"12.100.51.198.in-addr.arpa.\"\
    .\n   Note that the address family of the AMT tunnel is independent of the\n \
    \  address family for the multicast traffic.\n"
- title: 2.3.  Example Deployments
  contents:
  - '2.3.  Example Deployments

    '
- title: 2.3.1.  Example Receiving Networks
  contents:
  - '2.3.1.  Example Receiving Networks

    '
- title: 2.3.1.1.  Internet Service Provider
  contents:
  - "2.3.1.1.  Internet Service Provider\n   One example of a receiving network is\
    \ an Internet Service Provider\n   (ISP) that offers multicast ingest services\
    \ to its subscribers,\n   illustrated in Figure 3.\n   In the example network\
    \ below, subscribers can join (S,G)s with MLDv2\n   or IGMPv3 as described in\
    \ [RFC4604], and the AMT gateway in this ISP\n   can receive and forward multicast\
    \ traffic from one of the example\n   sending networks in Section 2.3.2 by discovering\
    \ the appropriate AMT\n   relays with a DNS lookup for the AMTRELAY RR with the\
    \ reverse IP of\n   the source in the (S,G).\n                        Internet\n\
    \              |  | Border |---| Border |    |   AMT   |     |\n             \
    \ |  | Router |   | Router |    | gateway |     |\n              |      | Agg\
    \ Routers | .. | Agg Routers |     |\n              | |Access Systems | .......\
    \ |Access Systems | |\n              | |(CMTS/OLT/etc.)|         |(CMTS/OLT/etc.)|\
    \ |\n                |_| |_| |_| |_| |_|      |_| |_| |_| |_| |_|\n          \
    \                     Subscribers\n                      Figure 3: Receiving ISP\
    \ Example\n"
- title: 2.3.1.2.  Small Office
  contents:
  - "2.3.1.2.  Small Office\n   Another example receiving network is a small branch\
    \ office that\n   regularly accesses some multicast content, illustrated in Figure\
    \ 4.\n   This office has desktop devices that need to receive some multicast\n\
    \   traffic, so an AMT gateway runs on a LAN with these devices to pull\n   traffic\
    \ in through a non-multicast next hop.\n   The office also hosts some mobile devices\
    \ that have AMT gateway\n   instances embedded inside apps in order to receive\
    \ multicast traffic\n   over their non-multicast wireless LAN.  (Note that the\
    \ \"Legacy\n   Router\" is a simplification that's meant to describe a variety\
    \ of\n   possible conditions; for example, it could be a device providing a\n\
    \   split-tunnel VPN as described in [RFC7359], deliberately excluding\n   multicast\
    \ traffic for a VPN tunnel, rather than a device that is\n   incapable of multicast\
    \ forwarding.)\n                     Internet\n                  (non-multicast)\n\
    \                         ^\n              |    | Modem+ | Wifi | - - - -  w/\
    \ embedded   |\n              |    | Router |  AP  |          AMT gateways  |\n\
    \              |     | Legacy Router  |                      |\n             \
    \ |     |   (unicast)    |                      |\n              | | Phones |\
    \ | ConfRm | | Desks  |   AMT   |  |\n              | | subnet | | subnet | |\
    \ subnet | gateway |  |\n                  Figure 4: Small Office (No Multicast\
    \ Up)\n   By adding an AMT relay to this office network as in Figure 5, it's\n\
    \   possible to make use of multicast services from the example\n   multicast-capable\
    \ ISP in Section 2.3.1.1.\n               Multicast-capable ISP\n            \
    \             ^\n              |    | Modem+ | Wifi | - - - -  w/ embedded   |\n\
    \              |    | Router |  AP  |          AMT gateways  |\n             \
    \ |          +---Wired LAN---|  AMT  |          |\n              |     | Legacy\
    \ Router  |                      |\n              |     |   (unicast)    |   \
    \                   |\n              | | Phones | | ConfRm | | Desks  |   AMT\
    \   |  |\n              | | subnet | | subnet | | subnet | gateway |  |\n    \
    \                   Figure 5: Small Office Example\n   When multicast-capable\
    \ networks are chained like this, with a network\n   like the one in Figure 5\
    \ receiving Internet services from a\n   multicast-capable network like the one\
    \ in Figure 3, it's important\n   for AMT gateways to reach the more local AMT\
    \ relay in order to avoid\n   accidentally tunneling multicast traffic from a\
    \ more distant AMT\n   relay with unicast and failing to utilize the multicast\
    \ transport\n   capabilities of the network in Figure 3.\n"
- title: 2.3.2.  Example Sending Networks
  contents:
  - '2.3.2.  Example Sending Networks

    '
- title: 2.3.2.1.  Sender-Controlled Relays
  contents:
  - "2.3.2.1.  Sender-Controlled Relays\n   When a sender network is also operating\
    \ AMT relays to distribute\n   multicast traffic, as in Figure 6, each address\
    \ could appear as an\n   AMTRELAY RR for the reverse IP of the sender.  Alternately,\
    \ one or\n   more domain names could appear in AMTRELAY RRs, and the AMT relay\n\
    \   addresses can be discovered by finding A or AAAA records from those\n   domain\
    \ names.\n                    | | Sender |   |  AMT  |  |  AMT  | |\n        \
    \                     Internet\n                          (non-multicast)\n  \
    \                     Figure 6: Small Office Example\n"
- title: 2.3.2.2.  Provider-Controlled Relays
  contents:
  - "2.3.2.2.  Provider-Controlled Relays\n   When an ISP offers a service to transmit\
    \ outbound multicast traffic\n   through a forwarding network, it might also offer\
    \ AMT relays in order\n   to reach receivers without multicast connectivity to\
    \ the forwarding\n   network, as in Figure 7.  In this case, it's recommended\
    \ that the ISP\n   also provide at least one domain name for the AMT relays for\
    \ use with\n   the AMTRELAY RR.\n   When the sender wishes to use the relays provided\
    \ by the ISP for\n   forwarding multicast traffic, an AMTRELAY RR should be configured\
    \ to\n   use the domain name provided by the ISP to allow for address\n   reassignment\
    \ of the relays without forcing the sender to reconfigure\n   the corresponding\
    \ AMTRELAY RRs.\n                      | Sender |\n              |           v\
    \                               |\n              |    | Agg Router |     |  AMT\
    \  | |  AMT  | |\n              | | Border |---| Border |                   |\n\
    \              | | Router |   | Router |                   |\n               \
    \     v            v\n                       Internet\n                    (non-multicast)\n\
    \                       Figure 7: Sending ISP Example\n"
- title: 3.  Relay Discovery Operation
  contents:
  - '3.  Relay Discovery Operation

    '
- title: 3.1.  Optimal Relay Selection
  contents:
  - '3.1.  Optimal Relay Selection

    '
- title: 3.1.1.  Overview
  contents:
  - "3.1.1.  Overview\n   The reverse source IP DNS query of an AMTRELAY RR is a good\
    \ way for a\n   gateway to discover a relay that is known to the sender.\n   However,\
    \ it is *not* necessarily a good way to discover the best\n   relay for that gateway\
    \ to use, because the RR will only provide\n   information about relays known\
    \ to the source.\n   If there is an upstream relay in a network that is topologically\n\
    \   closer to the gateway and is able to receive and forward multicast\n   traffic\
    \ from the sender, that relay is better for the gateway to use\n   since more\
    \ of the network path uses native multicast, allowing more\n   chances for packet\
    \ replication.  But since that relay is not known to\n   the sender, it won't\
    \ be advertised in the sender's reverse IP DNS\n   record.  An example network\
    \ that illustrates this scenario is\n   outlined in Figure 5 from Section 2.3.1.2.\n\
    \   It's only appropriate for an AMT gateway to discover an AMT relay by\n   querying\
    \ an AMTRELAY RR owned by a sender when all of these\n   conditions are met:\n\
    \   1.  The gateway needs to propagate a join of an (S,G) over AMT\n       because\
    \ in the gateway's network, no RPF next hop toward the\n       source can propagate\
    \ a native multicast join of the (S,G);\n   2.  The gateway is not already connected\
    \ to a relay that forwards\n       multicast traffic from the source of the (S,G);\n\
    \   3.  The gateway is not configured to use a particular IP address for\n   \
    \    AMT discovery, or a relay discovered with that IP is not able to\n      \
    \ forward traffic from the source of the (S,G);\n   4.  The gateway is not able\
    \ to find an upstream AMT relay with DNS-\n       based Service Discovery (DNS-SD)\
    \ [RFC6763] using \"_amt._udp\" as\n       the Service section of the queries,\
    \ or a relay discovered this\n       way is not able to forward traffic from the\
    \ source of the (S,G)\n       (as described in Section 3.3.4.1 and 3.3.5); and\n\
    \   5.  The gateway is not able to find an upstream AMT relay with the\n     \
    \  well-known anycast addresses from Section 7 of [RFC7450].\n   When all of the\
    \ above conditions are met, the gateway has no path\n   within its local network\
    \ that can receive multicast traffic from the\n   source IP of the (S,G).\n  \
    \ In this situation, the best way to find a relay that can forward the\n   required\
    \ traffic is to use information that comes from the operator\n   of the sender.\
    \  When the sender has configured an AMTRELAY RR,\n   gateways can use the DRIAD\
    \ mechanism defined in this document to\n   discover the relay information provided\
    \ by the sender.\n   Note that the above conditions are designed to prefer the\
    \ use of a\n   local AMT relay if one can be discovered.  However, note also that\n\
    \   the network upstream of the locally discovered relay would still need\n  \
    \ to receive traffic from the sender of the (S,G) in order to forward\n   it.\
    \  Therefore, unless the upstream network contains the sender or\n   has a multicast-capable\
    \ peering with a network that can forward\n   traffic from the sender, the upstream\
    \ network might still use AMT to\n   ingest the traffic from a network that can\
    \ receive traffic from the\n   sender.  If this is the case, the upstream AMT\
    \ gateway could still\n   rely on the AMTRELAY RR provided by the sender, even\
    \ though the\n   AMTRELAY RR is not directly used by gateways topologically closer\
    \ to\n   the receivers.  For a concrete example of such a situation, consider\n\
    \   the network in Figure 5 connected as one of the customers to the\n   network\
    \ in Figure 3.\n"
- title: 3.1.2.  Preference Ordering
  contents:
  - "3.1.2.  Preference Ordering\n   This section defines a preference ordering for\
    \ relay addresses during\n   the relay discovery process.  Gateways are encouraged\
    \ to implement a\n   Happy Eyeballs [RFC8305] algorithm to try candidate relays\n\
    \   concurrently (see Section 3.2), but even gateways that do not\n   implement\
    \ a Happy Eyeballs algorithm SHOULD use this ordering, except\n   as noted.\n\
    \   When establishing an AMT tunnel to forward multicast data, it's very\n   important\
    \ for the discovery process to prioritize network topology\n   considerations\
    \ ahead of address selection considerations in order to\n   gain the packet replication\
    \ benefits from using multicast instead of\n   unicast tunneling in the multicast-capable\
    \ portions of the network\n   path.\n   The intent of the advice and requirements\
    \ in this section is to\n   describe how a gateway should make use of the concurrency\
    \ provided by\n   a Happy Eyeballs algorithm to reduce the join latency while\
    \ still\n   prioritizing network efficiency considerations over address selection\n\
    \   considerations.\n   Section 4 of [RFC8305] requires a Happy Eyeballs algorithm\
    \ to sort\n   the addresses with the Destination Address Selection defined in\n\
    \   Section 6 of [RFC6724], but for the above reasons, that requirement\n   is\
    \ superseded in the AMT discovery use case by the following\n   considerations:\n\
    \   *  Prefer Local Relays\n      Figure 5 and Section 2.3.1.2 provide a motivating\
    \ example to\n      prefer DNS-SD [RFC6763] for discovery strictly ahead of using\
    \ the\n      AMTRELAY RR controlled by the sender for AMT discovery.\n      For\
    \ this reason, it's RECOMMENDED that AMT gateways by default\n      perform service\
    \ discovery using DNS Service Discovery (DNS-SD)\n      [RFC6763] for _amt._udp.<domain>\
    \ (with <domain> chosen as\n      described in Section 11 of [RFC6763]) and use\
    \ the AMT relays\n      discovered that way in preference to AMT relays discoverable\
    \ via\n      the mechanism defined in this document (DRIAD).\n   *  Prefer Relays\
    \ Managed by the Containing Network\n      When no local relay is discoverable\
    \ with DNS-SD, it still may be\n      the case that a relay local to the receiver\
    \ is operated by the\n      network providing transit services to the receiver.\n\
    \      In this case, when the network cannot make the relay discoverable\n   \
    \   via DNS-SD, the network SHOULD use the well-known anycast\n      addresses\
    \ from Section 7 of [RFC7450] to route discovery traffic\n      to the relay most\
    \ appropriate to the receiver's gateway.\n      Accordingly, the gateway SHOULD\
    \ by default discover a relay with\n      the well-known AMT anycast addresses\
    \ as the next-best option after\n      DNS-SD when searching for a local relay.\n\
    \   *  Let Sender Manage Relay Provisioning\n      A related motivating example\
    \ is provided by considering a sender\n      whose traffic can be forwarded by\
    \ relays in a sender-controlled\n      network like Figure 6 in Section 2.3.2.1\
    \ and by relays in a\n      provider-controlled network like Figure 7 in Section\
    \ 2.3.2.2, with\n      different cost and scalability profiles for the different\
    \ options.\n      In this example about the sending-side network, the precedence\n\
    \      field described in Section 4.2.1 is a critical method of control\n    \
    \  so that senders can provide the appropriate guidance to gateways\n      during\
    \ the discovery process in order to manage load and failover\n      scenarios\
    \ in a manner that operates well with the sender's\n      provisioning strategy\
    \ for horizontal scaling of AMT relays.\n      Therefore, after DNS-SD, the precedence\
    \ from the RR MUST be used\n      for sorting preference ahead of the Destination\
    \ Address Selection\n      ordering from Section 6 of [RFC6724] so that only relay\
    \ IPs with\n      the same precedence are directly compared according to the\n\
    \      Destination Address Selection ordering.\n   Accordingly, AMT gateways SHOULD\
    \ by default prefer relays in this\n   order:\n   1.  DNS-SD\n   2.  Anycast addresses\
    \ from Section 7 of [RFC7450]\n   3.  DRIAD\n   This default behavior MAY be overridden\
    \ by administrative\n   configuration where other behavior is more appropriate\
    \ for the\n   gateway within its network.\n   Among relay addresses that have\
    \ an equivalent preference as described\n   above, a Happy Eyeballs algorithm\
    \ for AMT SHOULD use the Destination\n   Address Selection defined in Section\
    \ 6 of [RFC6724].\n   Among relay addresses that still have an equivalent preference\
    \ after\n   the above orderings, a gateway SHOULD make a non-deterministic choice\n\
    \   (such as a pseudorandom selection) for relay preference ordering in\n   order\
    \ to support load balancing by DNS configurations that provide\n   many relay\
    \ options.\n   The gateway MAY introduce a bias in the non-deterministic choice\n\
    \   according to information that indicates expected benefits from\n   selecting\
    \ some relays in preference to others.  Details about the\n   structure and collection\
    \ of this information are out of scope for\n   this document but could, for example,\
    \ be obtained by out-of-band\n   methods or from a historical record about network\
    \ topology, timing\n   information, or the response to a probing mechanism.  A\
    \ gateway in\n   possession of such information MAY use it to prefer topologically\n\
    \   closer relays.\n   Within the above constraints, gateways MAY make use of\
    \ other\n   considerations from Section 4 of [RFC8305], such as the address\n\
    \   family interleaving strategies, to produce a final ordering of\n   candidate\
    \ relay addresses.\n   Note also that certain relay addresses might be excluded\
    \ from\n   consideration by the hold-down timers described in Section 3.3.4.1\
    \ or\n   3.3.5.  These relays constitute \"unusable destinations\" under Rule\
    \ 1\n   of the Destination Address Selection and are also not part of the\n  \
    \ superseding considerations described above.\n   The discovery and connection\
    \ process for the relay addresses in the\n   above described ordering MAY operate\
    \ in parallel, subject to delays\n   prescribed by the Happy Eyeballs requirements\
    \ described in Section 5\n   of [RFC8305] for successively launched concurrent\
    \ connection\n   attempts.\n"
- title: 3.1.3.  Connecting to Multiple Relays
  contents:
  - "3.1.3.  Connecting to Multiple Relays\n   In some deployments, it may be useful\
    \ for a gateway to connect to\n   multiple upstream relays and subscribe to the\
    \ same traffic in order\n   to support an active/active failover model.  A gateway\
    \ SHOULD NOT be\n   configured to do so without guaranteeing that adequate bandwidth\
    \ is\n   available.\n   A gateway configured to do this SHOULD still use the same\
    \ preference-\n   ordering logic from Section 3.1.2 for each connection.  (Note\
    \ that\n   this ordering allows for overriding by explicit administrative\n  \
    \ configuration where required.)\n"
- title: 3.2.  Happy Eyeballs
  contents:
  - '3.2.  Happy Eyeballs

    '
- title: 3.2.1.  Overview
  contents:
  - "3.2.1.  Overview\n   Often, multiple choices of relay will exist for a gateway\
    \ using DRIAD\n   for relay discovery.  Happy Eyeballs [RFC8305] provides a widely\n\
    \   deployed and generalizable strategy for probing multiple possible\n   connections\
    \ in parallel.  Therefore, it is RECOMMENDED that DRIAD-\n   capable gateways\
    \ implement a Happy Eyeballs algorithm to support fast\n   discovery of the most\
    \ preferred available relay by probing multiple\n   relays concurrently.\n   The\
    \ parallel discovery logic of a Happy Eyeballs algorithm serves to\n   reduce\
    \ join latency for the initial join of an SSM channel.  This\n   section and the\
    \ preference ordering of relays defined in\n   Section 3.1.2 together provide\
    \ guidance on use of a Happy Eyeballs\n   algorithm for the case of establishing\
    \ AMT connections.\n   Note that according to the definition in Section 3.2.3\
    \ of this\n   document, establishing the connection occurs before sending a\n\
    \   membership report.  As described in Section 5 of [RFC8305], only one\n   of\
    \ the successful connections will be used, and the others are all\n   canceled\
    \ or ignored.  In the context of an AMT connection, this means\n   the gateway\
    \ will send the membership reports that subscribe to\n   traffic only for the\
    \ chosen connection after the Happy Eyeballs\n   algorithm resolves.\n"
- title: 3.2.2.  Algorithm Guidelines
  contents:
  - "3.2.2.  Algorithm Guidelines\n   During the \"Initiation of asynchronous DNS\
    \ queries\" phase described\n   in Section 3 of [RFC8305], a gateway attempts\
    \ to resolve the domain\n   names listed in Section 3.1.  This consists of resolving\
    \ the SRV\n   queries for DNS-SD domains for the AMT service, as well as the\n\
    \   AMTRELAY query for the reverse IP domain defined in this document.\n   Each\
    \ of the SRV and AMTRELAY responses might contain:\n   *  one or more IP addresses\
    \ (as with type 1 or type 2 AMTRELAY\n      responses or when the SRV Additional\
    \ Data section of the SRV\n      response contains the address records for the\
    \ target, as urged by\n      [RFC2782]), or\n   *  only domain names (as with\
    \ type 3 responses from Section 4.2.3 or\n      an SRV response without an additional\
    \ data section).\n   When present, IP addresses in the initial response provide\
    \ resolved\n   destination address candidates for the \"Sorting of resolved\n\
    \   destination addresses\" phase described in Section 4 of [RFC8305]),\n   whereas\
    \ domain names without IP addresses in the initial response\n   result in another\
    \ set of queries for AAAA and A records, whose\n   responses provide the candidate\
    \ resolved destination addresses.\n   Since the SRV or AMTRELAY responses don't\
    \ have a bound on the count\n   of queries that might be generated aside from\
    \ the bounds imposed by\n   the DNS resolver, it's important for the gateway to\
    \ provide a rate\n   limit on the DNS queries.  The DNS query functionality is\
    \ expected to\n   follow ordinary standards and best practices for DNS clients.\
    \  A\n   gateway MAY use an existing DNS client implementation that does so\n\
    \   and MAY rely on that client's rate-limiting logic to avoid issuing\n   excessive\
    \ queries.  Otherwise, a gateway MUST provide a rate limit\n   for the DNS queries,\
    \ and its default settings SHOULD NOT permit more\n   than 10 queries for any\
    \ 100-millisecond period (though this MAY be\n   overridable by the administrative\
    \ configuration).\n   As the resolved IP addresses arrive, the Happy Eyeballs\
    \ algorithm\n   sorts them according to the requirements and recommendations given\
    \ in\n   Section 3.1.2 and attempts connections with the corresponding relays\n\
    \   under the algorithm restrictions and guidelines given in [RFC8305]\n   for\
    \ the \"Establishment of one connection, which cancels all other\n   attempts\"\
    \ phase.  As described in Section 3 of [RFC8305], DNS\n   resolution is treated\
    \ as asynchronous, and connection initiation does\n   not wait for lagging DNS\
    \ responses.\n"
- title: 3.2.3.  Connection Definition
  contents:
  - "3.2.3.  Connection Definition\n   Section 5 of [RFC8305] non-normatively describes\
    \ a successful\n   connection attempt as \"generally when the TCP handshake completes\"\
    .\n   There is no normative definition of a connection in the AMT\n   specification\
    \ [RFC7450], and there is no TCP connection involved in\n   an AMT tunnel.\n \
    \  However, the concept of an AMT connection in the context of a Happy\n   Eyeballs\
    \ algorithm is a useful one, and so this section provides the\n   following normative\
    \ definition:\n   *  An AMT connection is established successfully when the gateway\n\
    \      receives from a newly discovered relay a valid Membership Query\n     \
    \ message (Section 5.1.4 of [RFC7450]) that does not have the L flag\n      set.\n\
    \   See Section 3.3.5 of this document for further information about the\n   relevance\
    \ of the L flag to the establishment of a Happy Eyeballs\n   connection.  See\
    \ Section 3.3.4 for an overview of how to respond if\n   the connection does not\
    \ provide multicast connectivity to the source.\n   To \"cancel\" this kind of\
    \ AMT connection for the Happy Eyeballs\n   algorithm, a gateway that has not\
    \ sent a membership report with a\n   subscription would simply stop sending AMT\
    \ packets for that\n   connection.  A gateway only sends a membership report to\
    \ a connection\n   it has chosen as the most preferred available connection.\n"
- title: 3.3.  Guidelines for Restarting Discovery
  contents:
  - '3.3.  Guidelines for Restarting Discovery

    '
- title: 3.3.1.  Overview
  contents:
  - "3.3.1.  Overview\n   It's expected that gateways deployed in different environments\
    \ will\n   use a variety of heuristics to decide when it's appropriate to\n  \
    \ restart the relay discovery process in order to meet different\n   performance\
    \ goals (for example, to fulfill different kinds of service\n   level agreements).\n\
    \   In general, restarting the discovery process is always safe for the\n   gateway\
    \ and relay during any of the events listed in this section but\n   may cause\
    \ a disruption in the forwarded traffic if the discovery\n   process results in\
    \ choosing a different relay because this changes\n   the RPF forwarding tree\
    \ for the multicast traffic upstream of the\n   gateway.  This is likely to result\
    \ in some dropped or duplicated\n   packets from channels actively being tunneled\
    \ from the old relay to\n   the gateway.\n   The degree of impact on the traffic\
    \ from choosing a different relay\n   may depend on network conditions between\
    \ the gateway and the new\n   relay, as well as the network conditions and topology\
    \ between the\n   sender and the new relay, as this may cause the relay to propagate\
    \ a\n   new RPF join toward the sender.\n   Balancing the expected impact on the\
    \ tunneled traffic against likely\n   or observed problems with an existing connection\
    \ to the relay is the\n   goal of the heuristics that gateways use to determine\
    \ when to restart\n   the discovery process.\n   The non-normative advice in this\
    \ section should be treated as\n   guidelines to operators and implementors working\
    \ with AMT systems\n   that can use DRIAD as part of the relay discovery process.\n"
- title: 3.3.2.  Updates to Restarting Events
  contents:
  - "3.3.2.  Updates to Restarting Events\n   Section 5.2.3.4.1 of [RFC7450] lists\
    \ several events that may cause a\n   gateway to start or restart the discovery\
    \ procedure.\n   This document provides some updates and recommendations regarding\
    \ the\n   handling of these and similar events.  The first five events are\n \
    \  copied here and numbered for easier reference, and the remaining four\n   events\
    \ are newly added for consideration in this document:\n   1.  When a gateway pseudo-interface\
    \ is started (enabled).\n   2.  When the gateway wishes to report a group subscription\
    \ when none\n       currently exists.\n   3.  Before sending the next Request\
    \ message in a membership update\n       cycle.\n   4.  After the gateway fails\
    \ to receive a response to a Request\n       message.\n   5.  After the gateway\
    \ receives a Membership Query message with the L\n       flag set to 1.\n   6.\
    \  When the gateway wishes to report an (S,G) subscription with a\n       source\
    \ address that does not currently have other group\n       subscriptions.\n  \
    \ 7.  When there is a network change detected; for example, when a\n       gateway\
    \ is operating inside an end user device or application and\n       the device\
    \ joins a different network or when the domain portion\n       of a DNS-SD domain\
    \ name changes in response to a DHCP message or\n       administrative configuration.\n\
    \   8.  When substantial loss, persistent congestion, or network overload\n  \
    \     is detected in the stream of AMT packets from a relay.\n   9.  When the\
    \ gateway has reported one or more (S,G) subscriptions but\n       no traffic\
    \ is received from the source for some timeout (see\n       Section 3.3.4.1).\n\
    \   This list is not exhaustive, nor are any of the listed events\n   strictly\
    \ required to always force a restart of the discovery process.\n   Note that during\
    \ event #1, a gateway may use DNS-SD but does not have\n   sufficient information\
    \ to use DRIAD, since no source is known.\n"
- title: 3.3.3.  Tunnel Stability
  contents:
  - "3.3.3.  Tunnel Stability\n   In general, subscribers to active traffic flows\
    \ that are being\n   forwarded by an AMT gateway are less likely to experience\
    \ a\n   degradation in service (for example, from missing or duplicated\n   packets)\
    \ when the gateway continues using the same relay as long as\n   the relay is\
    \ not overloaded and the network conditions remain stable.\n   Therefore, gateways\
    \ SHOULD avoid performing a full restart of the\n   discovery process during routine\
    \ cases of event #3 (sending a new\n   Request message), since it occurs frequently\
    \ in normal operation.\n   However, see Sections 3.3.4, 3.3.6, and 3.3.4.3 for\
    \ more information\n   about exceptional cases when it may be appropriate to use\
    \ event #3.\n"
- title: 3.3.4.  Traffic Health
  contents:
  - '3.3.4.  Traffic Health

    '
- title: 3.3.4.1.  Absence of Traffic
  contents:
  - "3.3.4.1.  Absence of Traffic\n   If a gateway indicates one or more (S,G) subscriptions\
    \ in a\n   Membership Update message but no traffic for any of the (S,G)s is\n\
    \   received in a reasonable time, it's appropriate for the gateway to\n   restart\
    \ the discovery process.\n   If the gateway restarts the discovery process multiple\
    \ times\n   consecutively for this reason, the timeout period SHOULD be adjusted\n\
    \   to provide a random exponential back-off.\n   The RECOMMENDED timeout is a\
    \ random value in the range\n   [initial_timeout, MIN(initial_timeout * 2^retry_count,\n\
    \   maximum_timeout)], with a RECOMMENDED initial_timeout of 4 seconds\n   and\
    \ a RECOMMENDED maximum_timeout of 120 seconds (which is the\n   recommended minimum\
    \ NAT mapping timeout described in [RFC4787]).\n   Note that the recommended initial_timeout\
    \ is larger than the initial\n   timeout recommended in the similar algorithm\
    \ from Section 5.2.3.4.3\n   of [RFC7450].  This is to provide time for RPF Join\
    \ propagation in\n   the sending network.  Although the timeout values may be\n\
    \   administratively adjusted to support performance requirements,\n   operators\
    \ are advised to consider the possibility of join propagation\n   delays between\
    \ the sender and the relay when choosing an appropriate\n   timeout value.\n \
    \  Gateways restarting the discovery process because of an absence of\n   traffic\
    \ MUST use a hold-down timer that removes this relay from\n   consideration during\
    \ subsequent rounds of discovery while active.\n   The hold-down SHOULD last for\
    \ no less than 3 minutes and no more than\n   10 minutes.\n"
- title: 3.3.4.2.  Loss and Congestion
  contents:
  - "3.3.4.2.  Loss and Congestion\n   In some gateway deployments, it is also feasible\
    \ to monitor the\n   health of traffic flows through the gateway -- for example,\
    \ by\n   detecting the rate of packet loss by communicating out of band with\n\
    \   receivers or monitoring the packets of known protocols with sequence\n   numbers.\
    \  Where feasible, it's encouraged for gateways to use such\n   traffic health\
    \ information to trigger a restart of the discovery\n   process during event #3\
    \ (before sending a new Request message).\n   However, if a transient network\
    \ event that affects the tunneled\n   multicast stream -- as opposed to an event\
    \ that affects the tunnel\n   connection between the relay and gateway -- occurs,\
    \ poor health\n   detection could be triggered for many gateways simultaneously.\
    \  In\n   this situation, adding a random delay to avoid synchronized\n   rediscovery\
    \ by many gateways is recommended.\n   The span of the random portion of the delay\
    \ should be no less than 10\n   seconds by default but may be administratively\
    \ configured to support\n   different performance requirements.\n"
- title: 3.3.4.3.  Ancient Discovery Information
  contents:
  - "3.3.4.3.  Ancient Discovery Information\n   In most cases, a gateway actively\
    \ receiving healthy traffic from a\n   relay that has not indicated load with\
    \ the L flag should prefer to\n   remain connected to the same relay, as described\
    \ in Section 3.3.3.\n   However, a relay that appears healthy but has been forwarding\
    \ traffic\n   for days or weeks may have an increased chance of becoming unstable.\n\
    \   Gateways may benefit from restarting the discovery process during\n   event\
    \ #3 (before sending a Request message) after the expiration of a\n   long-term\
    \ timeout on the order of multiple hours or even days in some\n   deployments.\n\
    \   It may be beneficial for such timers to consider the amount of\n   traffic\
    \ currently being forwarded and to give a higher probability of\n   restarting\
    \ discovery during periods with an unusually low data rate\n   to reduce the impact\
    \ on active traffic while still avoiding relying\n   on the results of a very\
    \ old discovery.\n   Other issues may also be worth considering as part of this\
    \ heuristic;\n   for example, if the DNS expiry time of the record that was used\
    \ to\n   discover the current relay has not passed, the long-term timer might\n\
    \   be restarted without restarting the discovery process.\n"
- title: 3.3.5.  Relay Loaded or Shutting Down
  contents:
  - "3.3.5.  Relay Loaded or Shutting Down\n   The L flag (see Section 5.1.4.4 of\
    \ [RFC7450]) is the preferred\n   mechanism for a relay to signal overloading\
    \ or a graceful shutdown to\n   gateways.\n   A gateway that supports handling\
    \ of the L flag should generally\n   restart the discovery process when it processes\
    \ a Membership Query\n   packet with the L flag set.  If an L flag is received\
    \ while a\n   concurrent Happy Eyeballs discovery process is underway for multiple\n\
    \   candidate relays (Section 3.2), the relay sending the L flag SHOULD\n   NOT\
    \ be considered for the relay selection.\n   It is also RECOMMENDED that gateways\
    \ avoid choosing a relay that has\n   recently sent an L flag, with approximately\
    \ a 10-minute hold-down.\n   Gateways SHOULD treat this hold-down timer in the\
    \ same way as the\n   hold-down in Section 3.3.4.1 so that the relay is removed\
    \ from\n   consideration for subsequent short-term rounds of discovery.\n"
- title: 3.3.6.  Relay Discovery Messages vs. Restarting Discovery
  contents:
  - "3.3.6.  Relay Discovery Messages vs. Restarting Discovery\n   All AMT relays\
    \ are required by [RFC7450] to support handling of Relay\n   Discovery messages\
    \ (e.g., in Section 5.3.3.2 of [RFC7450]).\n   So a gateway with an existing connection\
    \ to a relay can send a Relay\n   Discovery message to the unicast address of\
    \ that AMT relay.  Under\n   stable conditions with an unloaded relay, it's expected\
    \ that the\n   relay will return its own unicast address in the Relay Advertisement\n\
    \   in response to such a Relay Discovery message.  Since this will not\n   result\
    \ in the gateway changing to another relay unless the relay\n   directs the gateway\
    \ away, this is a reasonable exception to the\n   advice against handling event\
    \ #3 described in Section 3.3.3.\n   This behavior is discouraged for gateways\
    \ that do support the L flag\n   to avoid sending unnecessary packets over the\
    \ network.\n   However, gateways that do not support the L flag may be able to\
    \ avoid\n   a disruption in the forwarded traffic by sending such Relay Discovery\n\
    \   messages regularly.  When a relay is under load or has started a\n   graceful\
    \ shutdown, it may respond with a different relay address,\n   which the gateway\
    \ can use to connect to a different relay.  This kind\n   of coordinated handoff\
    \ will likely result in a smaller disruption to\n   the traffic than if the relay\
    \ simply stops responding to Request\n   messages and stops forwarding traffic.\n\
    \   This style of Relay Discovery message (one sent to the unicast\n   address\
    \ of a relay that's already forwarding traffic to this gateway)\n   SHOULD NOT\
    \ be considered a full restart of the relay discovery\n   process.  It is RECOMMENDED\
    \ that gateways support the L flag, but for\n   gateways that do not support the\
    \ L flag, sending this message during\n   event #3 may help mitigate service degradation\
    \ when relays become\n   unstable.\n"
- title: 3.3.7.  Independent Discovery per Traffic Source
  contents:
  - "3.3.7.  Independent Discovery per Traffic Source\n   Relays discovered via the\
    \ AMTRELAY RR are source-specific relay\n   addresses and may use different pseudo-interfaces\
    \ from each other and\n   from relays discovered via DNS-SD or via a non-source-specific\n\
    \   address, as described in Section 4.1.2.1 of [RFC7450].\n   Restarting the\
    \ discovery process for one pseudo-interface does not\n   require restarting the\
    \ discovery process for other pseudo-interfaces.\n   Gateway heuristics about\
    \ restarting the discovery process should\n   operate independently for different\
    \ tunnels to relays when responding\n   to events that are specific to the different\
    \ tunnels.\n"
- title: 3.4.  DNS Configuration
  contents:
  - "3.4.  DNS Configuration\n   Often, an AMT gateway will only have access to the\
    \ source and group\n   IP addresses of the desired traffic and will not know any\
    \ other name\n   for the source of the traffic.  Because of this, typically, the\
    \ best\n   way of looking up AMTRELAY RRs will be by using the source IP address\n\
    \   as an index into one of the reverse mapping trees (in-addr.arpa for\n   IPv4,\
    \ as described in Section 3.5 of [RFC1035], or ip6.arpa for IPv6,\n   as described\
    \ in Section 2.5 of [RFC3596]).\n   Therefore, it is RECOMMENDED that AMTRELAY\
    \ RRs be added to reverse IP\n   zones as appropriate.  AMTRELAY records MAY also\
    \ appear in other\n   zones, since this may be necessary to perform delegation\
    \ from the\n   reverse zones (see, for example, Section 5.2 of [RFC2317]), but\
    \ the\n   use case enabled by this document requires a reverse IP mapping for\n\
    \   the source from an (S,G) in order to be useful to most AMT gateways.\n   This\
    \ document does not define semantics for the use of AMTRELAY\n   records obtained\
    \ in a way other than by a reverse IP lookup.\n   When performing the AMTRELAY\
    \ RR lookup, any CNAMEs or DNAMEs found\n   MUST be followed.  This is necessary\
    \ to support zone delegation.\n   Some examples outlining this need are described\
    \ in [RFC2317].\n   See Sections 4 and 4.3 for a detailed explanation of the contents\
    \ of\n   a DNS zone file.\n"
- title: 3.5.  Waiting for DNS Resolution
  contents:
  - "3.5.  Waiting for DNS Resolution\n   DNS query functionality is expected to follow\
    \ ordinary standards and\n   best practices for DNS clients.  A gateway MAY use\
    \ an existing DNS\n   client implementation that does so and MAY rely on that\
    \ client's\n   retry logic to determine the timeouts between retries.\n   Otherwise,\
    \ a gateway MAY resend a DNS query if it does not receive an\n   appropriate DNS\
    \ response within some timeout period.  If the gateway\n   retries multiple times,\
    \ the timeout period SHOULD be adjusted to\n   provide a random exponential back-off.\n\
    \   As with the waiting process for the Relay Advertisement message from\n   Section\
    \ 5.2.3.4.3 of [RFC7450], the RECOMMENDED timeout is a random\n   value in the\
    \ range [initial_timeout, MIN(initial_timeout *\n   2^retry_count, maximum_timeout)],\
    \ with a RECOMMENDED initial_timeout\n   of 1 second and a RECOMMENDED maximum_timeout\
    \ of 120 seconds.\n"
- title: 4.  AMTRELAY Resource Record Definition
  contents:
  - '4.  AMTRELAY Resource Record Definition

    '
- title: 4.1.  AMTRELAY RRType
  contents:
  - "4.1.  AMTRELAY RRType\n   The AMTRELAY RRType has the mnemonic AMTRELAY and type\
    \ code 260\n   (decimal).\n   The AMTRELAY RR is class independent.\n"
- title: 4.2.  AMTRELAY RData Format
  contents:
  - "4.2.  AMTRELAY RData Format\n   The AMTRELAY RData consists of an 8-bit precedence\
    \ field, a 1-bit\n   \"Discovery Optional\" field, a 7-bit type field, and a variable\
    \ length\n   relay field.\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   |   precedence  |D|    type     |                              \
    \ |\n"
- title: 4.2.1.  RData Format - Precedence
  contents:
  - "4.2.1.  RData Format - Precedence\n   This is an 8-bit precedence for this record.\
    \  It is interpreted in\n   the same way as the PREFERENCE field described in\
    \ Section 3.3.9 of\n   [RFC1035].\n   Relays listed in AMTRELAY records with a\
    \ lower value for precedence\n   are to be attempted first.\n"
- title: 4.2.2.  RData Format - Discovery Optional (D-bit)
  contents:
  - "4.2.2.  RData Format - Discovery Optional (D-bit)\n   The D-bit is a \"Discovery\
    \ Optional\" flag.\n   If the D-bit is set to 0, a gateway using this RR MUST\
    \ perform AMT\n   relay discovery as described in Section 4.2.1.1 of [RFC7450]\
    \ rather\n   than directly sending an AMT Request message to the relay.\n   That\
    \ is, the gateway MUST receive an AMT Relay Advertisement message\n   (Section\
    \ 5.1.2 of [RFC7450]) for an address before sending an AMT\n   Request message\
    \ (Section 5.1.3 of [RFC7450]) to that address.  Before\n   receiving the Relay\
    \ Advertisement message, this record has only\n   indicated that the address can\
    \ be used for AMT relay discovery, not\n   for a Request message.  This is necessary\
    \ for devices that are not\n   fully functional AMT relays but rather load balancers\
    \ or brokers, as\n   mentioned in Section 4.2.1.1 of [RFC7450].\n   If the D-bit\
    \ is set to 1, the gateway MAY send an AMT Request message\n   directly to the\
    \ discovered relay address without first sending an AMT\n   Discovery message.\n\
    \   This bit should be set according to advice from the AMT relay\n   operator.\
    \  The D-bit MUST be set to zero when no information is\n   available from the\
    \ AMT relay operator about its suitability.\n"
- title: 4.2.3.  RData Format - Type
  contents:
  - "4.2.3.  RData Format - Type\n   The type field indicates the format of the information\
    \ that is stored\n   in the relay field.\n   The following values are defined:\n\
    \   *  type = 0: The relay field is empty (0 bytes).\n   *  type = 1: The relay\
    \ field contains a 4-octet IPv4 address.\n   *  type = 2: The relay field contains\
    \ a 16-octet IPv6 address.\n   *  type = 3: The relay field contains a wire-encoded\
    \ domain name.\n      The wire-encoded format is self-describing, so the length\
    \ is\n      implicit.  The domain name MUST NOT be compressed (see Section 3.3\n\
    \      of [RFC1035] and Section 4 of [RFC3597]).\n   RRs with an undefined value\
    \ in the Type field SHOULD NOT be\n   considered by receiving gateways for AMT\
    \ relay discovery.\n"
- title: 4.2.4.  RData Format - Relay
  contents:
  - "4.2.4.  RData Format - Relay\n   The relay field is the address or domain name\
    \ of the AMT relay.  It\n   is formatted according to the type field.\n   When\
    \ the type field is 0, the length of the relay field is 0, and it\n   indicates\
    \ that no AMT relay should be used for multicast traffic from\n   this source.\n\
    \   When the type field is 1, the length of the relay field is 4 octets,\n   and\
    \ a 32-bit IPv4 address is present.  This is an IPv4 address as\n   described\
    \ in Section 3.4.1 of [RFC1035].  This is a 32-bit number in\n   network byte\
    \ order.\n   When the type field is 2, the length of the relay field is 16 octets,\n\
    \   and a 128-bit IPv6 address is present.  This is an IPv6 address as\n   described\
    \ in Section 2.2 of [RFC3596].  This is a 128-bit number in\n   network byte order.\n\
    \   When the type field is 3, the relay field is a normal wire-encoded\n   domain\
    \ name, as described in Section 3.3 of [RFC1035].  For the\n   reasons given in\
    \ Section 4 of [RFC3597], compression MUST NOT be\n   used.\n   For a type 3 record,\
    \ the D-bit and preference fields carry over to\n   all A or AAAA records for\
    \ the domain name.  There is no difference in\n   the result of the discovery\
    \ process when it's obtained by type 1 or\n   type 2 AMTRELAY records with identical\
    \ D-bit and preference fields\n   vs. when the result is obtained by a type 3\
    \ AMTRELAY record that\n   resolves to the same set of IPv4 and IPv6 addresses\
    \ via A and AAAA\n   lookups.\n"
- title: 4.3.  AMTRELAY Record Presentation Format
  contents:
  - '4.3.  AMTRELAY Record Presentation Format

    '
- title: 4.3.1.  Representation of AMTRELAY RRs
  contents:
  - "4.3.1.  Representation of AMTRELAY RRs\n   AMTRELAY RRs may appear in a zone\
    \ data master file.  The precedence,\n   D-bit, relay type, and relay fields are\
    \ REQUIRED.\n   If the relay type field is 0, the relay field MUST be \".\".\n\
    \   The presentation for the record is as follows:\n     IN AMTRELAY precedence\
    \ D-bit type relay\n"
- title: 4.3.2.  Examples
  contents:
  - "4.3.2.  Examples\n   In a DNS authoritative nameserver that understands the AMTRELAY\
    \ type,\n   the zone might contain a set of entries like this:\n       $ORIGIN\
    \ 100.51.198.in-addr.arpa.\n       12     IN AMTRELAY  10 0 1 203.0.113.15\n \
    \      12     IN AMTRELAY  10 0 2 2001:db8::15\n       12     IN AMTRELAY 128\
    \ 1 3 amtrelays.example.com.\n   This configuration advertises an IPv4 discovery\
    \ address, an IPv6\n   discovery address, and a domain name for AMT relays that\
    \ can receive\n   traffic from the source 198.51.100.12.  The IPv4 and IPv6 addresses\n\
    \   are configured with a D-bit of 0 (meaning discovery is mandatory, as\n   described\
    \ in Section 4.2.2) and a precedence 10 (meaning they're\n   preferred ahead of\
    \ the last entry, which has precedence 128).\n   For zone files in name servers\
    \ that don't support the AMTRELAY RRType\n   natively, it's possible to use the\
    \ format for unknown RR types, as\n   described in [RFC3597].  This approach would\
    \ replace the AMTRELAY\n   entries in the example above with the entries below:\n\
    \       10   IN TYPE260  \\# (\n              6  ; length\n              0a ;\
    \ precedence=10\n              01 ; D=0, relay type=1, an IPv4 address\n     \
    \         cb00710f ) ; 203.0.113.15\n       10   IN TYPE260  \\# (\n         \
    \     18 ; length\n              0a ; precedence=10\n              02 ; D=0, relay\
    \ type=2, an IPv6 address\n              20010db800000000000000000000000f ) ;\
    \ 2001:db8::15\n       10   IN TYPE260  \\# (\n              24 ; length\n   \
    \           80 ; precedence=128\n              83 ; D=1, relay type=3, a wire-encoded\
    \ domain name\n            09616d7472656c617973076578616d706c6503636f6d ) ; domain\
    \ name\n   See Appendix A for more details.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document updates the DNS \"Resource Record (RR)\
    \ TYPEs\" registry\n   by assigning type 260 to the AMTRELAY record.\n   This\
    \ document creates a new registry named \"AMTRELAY Resource Record\n   Parameters\"\
    \ with a subregistry for the \"Relay Type Field\".  The\n   initial values in\
    \ the subregistry are:\n   | Value | Description                           |\n\
    \   | 0     | No relay is present                   |\n   | 1     | A 4-byte IPv4\
    \ address is present      |\n   | 2     | A 16-byte IPv6 address is present  \
    \   |\n   | 3     | A wire-encoded domain name is present |\n   | 4-255 | Unassigned\
    \                            |\n      Table 2: Initial Contents of the \"Relay\
    \ Type\n                    Field\" Registry\n   Values 0, 1, 2, and 3 are further\
    \ explained in Sections 4.2.3 and\n   4.2.4.  Relay type numbers 4 through 255\
    \ can be assigned with a\n   policy of Specification Required (as described in\
    \ [RFC8126]).\n"
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  Use of AMT
  contents:
  - "6.1.  Use of AMT\n   This document defines a mechanism that enables a more widespread\
    \ and\n   automated use of AMT, even without access to a multicast backbone.\n\
    \   Operators of networks and applications that include a DRIAD-capable\n   AMT\
    \ gateway are advised to carefully consider the security\n   considerations in\
    \ Section 6 of [RFC7450].\n   AMT gateway operators also are encouraged to take\
    \ appropriate steps\n   to ensure the integrity of the data received via AMT,\
    \ for example, by\n   the opportunistic use of IPsec [RFC4301] to secure traffic\
    \ received\n   from AMT relays when IPSECKEY records [RFC4025] are available or\
    \ when\n   a trust relationship with the AMT relays can be otherwise established\n\
    \   and secured.\n   Note that AMT does not itself provide any integrity protection\
    \ for\n   Multicast Data packets (Section 5.1.6 of [RFC7450]), so absent\n   protections\
    \ like those mentioned above, even an off-path attacker who\n   discovers the\
    \ gateway IP, the relay IP, and the relay source port for\n   an active AMT connection\
    \ can inject multicast data packets for a\n   joined (S,G) into the data stream\
    \ if he can get data packets\n   delivered to the gateway IP that spoof the relay\
    \ as the source.\n"
- title: 6.2.  Record-Spoofing
  contents:
  - "6.2.  Record-Spoofing\n   The AMTRELAY resource record contains information that\
    \ SHOULD be\n   communicated to the DNS client without being modified.  The method\n\
    \   used to ensure the result was unmodified is up to the client.\n   There must\
    \ be a trust relationship between the end consumer of this\n   resource record\
    \ and the DNS server.  This relationship may be end-to-\n   end DNSSEC validation\
    \ or a secure connection to a trusted DNS server\n   that provides end-to-end\
    \ safety to prevent record-spoofing of the\n   response from the trusted server.\
    \  The connection to the trusted\n   server can use any secure channel, such as\
    \ with a TSIG [RFC2845] or\n   SIG(0) [RFC2931] channel, a secure local channel\
    \ on the host, DNS\n   over TLS [RFC7858], DNS over HTTPS [RFC8484], or some other\
    \ mechanism\n   that provides authentication of the RR.\n   If an AMT gateway\
    \ accepts a maliciously crafted AMTRELAY record, the\n   result could be a Denial\
    \ of Service or receivers processing multicast\n   traffic from a source under\
    \ the attacker's control.\n"
- title: 6.3.  Congestion
  contents:
  - "6.3.  Congestion\n   Multicast traffic, particularly interdomain multicast traffic,\n\
    \   carries some congestion risks, as described in Section 4 of\n   [RFC8085].\n\
    \   Application implementors and network operators that use AMT gateways\n   are\
    \ advised to take precautions, including monitoring of application\n   traffic\
    \ behavior, traffic authentication at ingest, rate-limiting of\n   multicast traffic,\
    \ and the use of circuit-breaker techniques such as\n   those described in Section\
    \ 3.1.10 of [RFC8085] and similar\n   protections at the network level in order\
    \ to ensure network health in\n   the event of misconfiguration, poorly written\
    \ applications that don't\n   follow UDP congestion control principles, or a deliberate\
    \ attack.\n   Section 4.1.4.2 of [RFC7450] and Section 6.1 of [RFC7450] provide\n\
    \   some further considerations and advice about mitigating congestion\n   risk.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034, November\
    \ 1987,\n              <https://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]\
    \  Mockapetris, P., \"Domain names - implementation and\n              specification\"\
    , STD 13, RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2181]\
    \  Elz, R. and R. Bush, \"Clarifications to the DNS\n              Specification\"\
    , RFC 2181, DOI 10.17487/RFC2181, July 1997,\n              <https://www.rfc-editor.org/info/rfc2181>.\n\
    \   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n   \
    \           specifying the location of services (DNS SRV)\", RFC 2782,\n     \
    \         DOI 10.17487/RFC2782, February 2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n\
    \   [RFC3376]  Cain, B., Deering, S., Kouvelas, I., Fenner, B., and A.\n     \
    \         Thyagarajan, \"Internet Group Management Protocol, Version\n       \
    \       3\", RFC 3376, DOI 10.17487/RFC3376, October 2002,\n              <https://www.rfc-editor.org/info/rfc3376>.\n\
    \   [RFC3596]  Thomson, S., Huitema, C., Ksinant, V., and M. Souissi,\n      \
    \        \"DNS Extensions to Support IP Version 6\", STD 88,\n              RFC\
    \ 3596, DOI 10.17487/RFC3596, October 2003,\n              <https://www.rfc-editor.org/info/rfc3596>.\n\
    \   [RFC3597]  Gustafsson, A., \"Handling of Unknown DNS Resource Record\n   \
    \           (RR) Types\", RFC 3597, DOI 10.17487/RFC3597, September\n        \
    \      2003, <https://www.rfc-editor.org/info/rfc3597>.\n   [RFC3810]  Vida, R.,\
    \ Ed. and L. Costa, Ed., \"Multicast Listener\n              Discovery Version\
    \ 2 (MLDv2) for IPv6\", RFC 3810,\n              DOI 10.17487/RFC3810, June 2004,\n\
    \              <https://www.rfc-editor.org/info/rfc3810>.\n   [RFC4604]  Holbrook,\
    \ H., Cain, B., and B. Haberman, \"Using Internet\n              Group Management\
    \ Protocol Version 3 (IGMPv3) and Multicast\n              Listener Discovery\
    \ Protocol Version 2 (MLDv2) for Source-\n              Specific Multicast\",\
    \ RFC 4604, DOI 10.17487/RFC4604,\n              August 2006, <https://www.rfc-editor.org/info/rfc4604>.\n\
    \   [RFC4607]  Holbrook, H. and B. Cain, \"Source-Specific Multicast for\n   \
    \           IP\", RFC 4607, DOI 10.17487/RFC4607, August 2006,\n             \
    \ <https://www.rfc-editor.org/info/rfc4607>.\n   [RFC6724]  Thaler, D., Ed., Draves,\
    \ R., Matsumoto, A., and T. Chown,\n              \"Default Address Selection\
    \ for Internet Protocol Version 6\n              (IPv6)\", RFC 6724, DOI 10.17487/RFC6724,\
    \ September 2012,\n              <https://www.rfc-editor.org/info/rfc6724>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <https://www.rfc-editor.org/info/rfc6763>.\n   [RFC7450]  Bumgardner, G., \"\
    Automatic Multicast Tunneling\", RFC 7450,\n              DOI 10.17487/RFC7450,\
    \ February 2015,\n              <https://www.rfc-editor.org/info/rfc7450>.\n \
    \  [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n      \
    \        Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n            \
    \  March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8305]  Schinazi, D. and T. Pauly, \"Happy Eyeballs Version 2:\n      \
    \        Better Connectivity Using Concurrency\", RFC 8305,\n              DOI\
    \ 10.17487/RFC8305, December 2017,\n              <https://www.rfc-editor.org/info/rfc8305>.\n\
    \   [RFC8499]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n           \
    \   Terminology\", BCP 219, RFC 8499, DOI 10.17487/RFC8499,\n              January\
    \ 2019, <https://www.rfc-editor.org/info/rfc8499>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC2317]  Eidnes, H., de Groot, G., and P.\
    \ Vixie, \"Classless IN-\n              ADDR.ARPA delegation\", BCP 20, RFC 2317,\n\
    \              DOI 10.17487/RFC2317, March 1998,\n              <https://www.rfc-editor.org/info/rfc2317>.\n\
    \   [RFC2845]  Vixie, P., Gudmundsson, O., Eastlake 3rd, D., and B.\n        \
    \      Wellington, \"Secret Key Transaction Authentication for DNS\n         \
    \     (TSIG)\", RFC 2845, DOI 10.17487/RFC2845, May 2000,\n              <https://www.rfc-editor.org/info/rfc2845>.\n\
    \   [RFC2931]  Eastlake 3rd, D., \"DNS Request and Transaction Signatures\n  \
    \            ( SIG(0)s )\", RFC 2931, DOI 10.17487/RFC2931, September\n      \
    \        2000, <https://www.rfc-editor.org/info/rfc2931>.\n   [RFC3550]  Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n              Applications\", STD 64, RFC 3550, DOI\
    \ 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC4025]  Richardson, M., \"A Method for Storing IPsec Keying\n         \
    \     Material in DNS\", RFC 4025, DOI 10.17487/RFC4025, March\n             \
    \ 2005, <https://www.rfc-editor.org/info/rfc4025>.\n   [RFC4301]  Kent, S. and\
    \ K. Seo, \"Security Architecture for the\n              Internet Protocol\",\
    \ RFC 4301, DOI 10.17487/RFC4301,\n              December 2005, <https://www.rfc-editor.org/info/rfc4301>.\n\
    \   [RFC4787]  Audet, F., Ed. and C. Jennings, \"Network Address\n           \
    \   Translation (NAT) Behavioral Requirements for Unicast\n              UDP\"\
    , BCP 127, RFC 4787, DOI 10.17487/RFC4787, January\n              2007, <https://www.rfc-editor.org/info/rfc4787>.\n\
    \   [RFC5110]  Savola, P., \"Overview of the Internet Multicast Routing\n    \
    \          Architecture\", RFC 5110, DOI 10.17487/RFC5110, January\n         \
    \     2008, <https://www.rfc-editor.org/info/rfc5110>.\n   [RFC6726]  Paila, T.,\
    \ Walsh, R., Luby, M., Roca, V., and R. Lehtonen,\n              \"FLUTE - File\
    \ Delivery over Unidirectional Transport\",\n              RFC 6726, DOI 10.17487/RFC6726,\
    \ November 2012,\n              <https://www.rfc-editor.org/info/rfc6726>.\n \
    \  [RFC7359]  Gont, F., \"Layer 3 Virtual Private Network (VPN) Tunnel\n     \
    \         Traffic Leakages in Dual-Stack Hosts/Networks\", RFC 7359,\n       \
    \       DOI 10.17487/RFC7359, August 2014,\n              <https://www.rfc-editor.org/info/rfc7359>.\n\
    \   [RFC7761]  Fenner, B., Handley, M., Holbrook, H., Kouvelas, I.,\n        \
    \      Parekh, R., Zhang, Z., and L. Zheng, \"Protocol Independent\n         \
    \     Multicast - Sparse Mode (PIM-SM): Protocol Specification\n             \
    \ (Revised)\", STD 83, RFC 7761, DOI 10.17487/RFC7761, March\n              2016,\
    \ <https://www.rfc-editor.org/info/rfc7761>.\n   [RFC7858]  Hu, Z., Zhu, L., Heidemann,\
    \ J., Mankin, A., Wessels, D.,\n              and P. Hoffman, \"Specification\
    \ for DNS over Transport\n              Layer Security (TLS)\", RFC 7858, DOI\
    \ 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8313]  Tarapore, P., Ed., Sayko, R., Shepherd, G., Eckert, T.,\n     \
    \         Ed., and R. Krishnan, \"Use of Multicast across Inter-\n           \
    \   domain Peering Points\", BCP 213, RFC 8313,\n              DOI 10.17487/RFC8313,\
    \ January 2018,\n              <https://www.rfc-editor.org/info/rfc8313>.\n  \
    \ [RFC8484]  Hoffman, P. and P. McManus, \"DNS Queries over HTTPS\n          \
    \    (DoH)\", RFC 8484, DOI 10.17487/RFC8484, October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n"
- title: Appendix A.  Unknown RRType Construction
  contents:
  - "Appendix A.  Unknown RRType Construction\n   In a DNS resolver that understands\
    \ the AMTRELAY type, the zone file\n   might contain this line:\n     IN AMTRELAY\
    \ 128 0 3 amtrelays.example.com.\n   In order to translate this example to appear\
    \ as an unknown RRType as\n   defined in [RFC3597], one could run the following\
    \ program:\n   <CODE BEGINS>\n     $ cat translate.py\n     #!/usr/bin/env python3\n\
    \     import sys\n     name=sys.argv[1]\n     wire=''\n     for dn in name.split('.'):\n\
    \       if len(dn) > 0:\n         wire += ('%02x' % len(dn))\n         wire +=\
    \ (''.join('%02x'%ord(x) for x in dn))\n     print(len(wire)//2) + 2\n     print(wire)\n\
    \     $ ./translate.py amtrelays.example.com\n     24\n     09616d7472656c617973076578616d706c6503636f6d\n\
    \   <CODE ENDS>\n   The length of the RData and the hex string for the domain\
    \ name\n   \"amtrelays.example.com\" are the outputs of this program.\n   The\
    \ length of the wire-encoded domain name is 22, so 2 was added to\n   that value\
    \ (1 for the precedence field and 1 for the combined D-bit\n   and relay type\
    \ fields) to get the full length 24 of the RData.  For\n   the 2 octets ahead\
    \ of the domain name, we encode the precedence,\n   D-bit, and relay type fields,\
    \ as described in Section 4.\n   This results in a zone file entry like this:\n\
    \     IN TYPE260  \\# ( 24 ; length\n             80 ; precedence = 128\n    \
    \         03 ; D-bit=0, relay type=3 (wire-encoded domain name)\n           09616d7472656c617973076578616d706c6503636f6d\
    \ ) ; domain name\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This specification was inspired by the previous work of\
    \ Doug Nortz,\n   Robert Sayko, David Segelstein, and Percy Tarapore, presented\
    \ in the\n   MBONED Working Group at IETF 93.\n   Thanks to Jeff Goldsmith, Toerless\
    \ Eckert, Mikael Abrahamsson, Lenny\n   Giuliano, Mark Andrews, Sandy Zheng, Kyle\
    \ Rose, Ben Kaduk, Bill\n   Atwood, Tim Chown, Christian Worm Mortensen, Warren\
    \ Kumari, Dan\n   Romanescu, Bernard Aboba, Carlos Pignataro, Niclas Comstedt,\
    \ Mirja\n   K\xFChlewind, Henning Rogge, Eric Vyncke, Barry Lieba, Roman Danyliw,\n\
    \   Alissa Cooper, Suresh Krishnan, Adam Roach, and Daniel Franke for\n   their\
    \ very helpful reviews and comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jake Holland\n   Akamai Technologies, Inc.\n   150 Broadway\n\
    \   Cambridge, MA 02144\n"
