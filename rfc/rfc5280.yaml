- title: __initial_text__
  contents:
  - "         Internet X.509 Public Key Infrastructure Certificate\n             and\
    \ Certificate Revocation List (CRL) Profile\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo profiles the X.509 v3 certificate and X.509 v2 certificate\n\
    \   revocation list (CRL) for use in the Internet.  An overview of this\n   approach\
    \ and model is provided as an introduction.  The X.509 v3\n   certificate format\
    \ is described in detail, with additional\n   information regarding the format\
    \ and semantics of Internet name\n   forms.  Standard certificate extensions are\
    \ described and two\n   Internet-specific extensions are defined.  A set of required\n\
    \   certificate extensions is specified.  The X.509 v2 CRL format is\n   described\
    \ in detail along with standard and Internet-specific\n   extensions.  An algorithm\
    \ for X.509 certification path validation is\n   described.  An ASN.1 module and\
    \ examples are provided in the\n   appendices.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Requirements and Assumptions ....................................6\n  \
    \    2.1. Communication and Topology .................................7\n    \
    \  2.2. Acceptability Criteria .....................................7\n      2.3.\
    \ User Expectations ..........................................7\n      2.4. Administrator\
    \ Expectations .................................8\n   3. Overview of Approach\
    \ ............................................8\n      3.1. X.509 Version 3 Certificate\
    \ ................................9\n      3.2. Certification Paths and Trust\
    \ .............................10\n      3.3. Revocation ................................................13\n\
    \      3.4. Operational Protocols .....................................14\n  \
    \    3.5. Management Protocols ......................................14\n   4.\
    \ Certificate and Certificate Extensions Profile .................16\n      4.1.\
    \ Basic Certificate Fields ..................................16\n           4.1.1.\
    \ Certificate Fields .................................17\n                  4.1.1.1.\
    \ tbsCertificate ............................18\n                  4.1.1.2. signatureAlgorithm\
    \ ........................18\n                  4.1.1.3. signatureValue ............................18\n\
    \           4.1.2. TBSCertificate .....................................18\n  \
    \                4.1.2.1. Version ...................................19\n    \
    \              4.1.2.2. Serial Number .............................19\n      \
    \            4.1.2.3. Signature .................................19\n        \
    \          4.1.2.4. Issuer ....................................20\n          \
    \        4.1.2.5. Validity ..................................22\n            \
    \               4.1.2.5.1. UTCTime ........................23\n              \
    \             4.1.2.5.2. GeneralizedTime ................23\n                \
    \  4.1.2.6. Subject ...................................23\n                  4.1.2.7.\
    \ Subject Public Key Info ...................25\n                  4.1.2.8. Unique\
    \ Identifiers ........................25\n                  4.1.2.9. Extensions\
    \ ................................26\n      4.2. Certificate Extensions ....................................26\n\
    \           4.2.1. Standard Extensions ................................27\n  \
    \                4.2.1.1. Authority Key Identifier ..................27\n    \
    \              4.2.1.2. Subject Key Identifier ....................28\n      \
    \            4.2.1.3. Key Usage .................................29\n        \
    \          4.2.1.4. Certificate Policies ......................32\n          \
    \        4.2.1.5. Policy Mappings ...........................35\n            \
    \      4.2.1.6. Subject Alternative Name ..................35\n              \
    \    4.2.1.7. Issuer Alternative Name ...................38\n                \
    \  4.2.1.8. Subject Directory Attributes ..............39\n                  4.2.1.9.\
    \ Basic Constraints .........................39\n                  4.2.1.10. Name\
    \ Constraints .........................40\n                  4.2.1.11. Policy\
    \ Constraints .......................43\n                  4.2.1.12. Extended\
    \ Key Usage .......................44\n                  4.2.1.13. CRL Distribution\
    \ Points ..................45\n                  4.2.1.14. Inhibit anyPolicy ........................48\n\
    \                  4.2.1.15. Freshest CRL (a.k.a. Delta CRL\n                \
    \            Distribution Point) ......................48\n           4.2.2. Private\
    \ Internet Extensions ........................49\n                  4.2.2.1. Authority\
    \ Information Access ..............49\n                  4.2.2.2. Subject Information\
    \ Access ................51\n   5. CRL and CRL Extensions Profile .................................54\n\
    \      5.1. CRL Fields ................................................55\n  \
    \         5.1.1. CertificateList Fields .............................56\n    \
    \              5.1.1.1. tbsCertList ...............................56\n      \
    \            5.1.1.2. signatureAlgorithm ........................57\n        \
    \          5.1.1.3. signatureValue ............................57\n          \
    \ 5.1.2. Certificate List \"To Be Signed\" ....................58\n          \
    \        5.1.2.1. Version ...................................58\n            \
    \      5.1.2.2. Signature .................................58\n              \
    \    5.1.2.3. Issuer Name ...............................58\n                \
    \  5.1.2.4. This Update ...............................58\n                  5.1.2.5.\
    \ Next Update ...............................59\n                  5.1.2.6. Revoked\
    \ Certificates ......................59\n                  5.1.2.7. Extensions\
    \ ................................60\n      5.2. CRL Extensions ............................................60\n\
    \           5.2.1. Authority Key Identifier ...........................60\n  \
    \         5.2.2. Issuer Alternative Name ............................60\n    \
    \       5.2.3. CRL Number .........................................61\n      \
    \     5.2.4. Delta CRL Indicator ................................62\n        \
    \   5.2.5. Issuing Distribution Point .........................65\n          \
    \ 5.2.6. Freshest CRL (a.k.a. Delta CRL Distribution\n                  Point)\
    \ .............................................67\n           5.2.7. Authority\
    \ Information Access .......................67\n      5.3. CRL Entry Extensions\
    \ ......................................69\n           5.3.1. Reason Code ........................................69\n\
    \           5.3.2. Invalidity Date ....................................70\n  \
    \         5.3.3. Certificate Issuer .................................70\n   6.\
    \ Certification Path Validation ..................................71\n      6.1.\
    \ Basic Path Validation .....................................72\n           6.1.1.\
    \ Inputs .............................................75\n           6.1.2. Initialization\
    \ .....................................77\n           6.1.3. Basic Certificate\
    \ Processing .......................80\n           6.1.4. Preparation for Certificate\
    \ i+1 ....................84\n           6.1.5. Wrap-Up Procedure ..................................87\n\
    \           6.1.6. Outputs ............................................89\n  \
    \    6.2. Using the Path Validation Algorithm .......................89\n    \
    \  6.3. CRL Validation ............................................90\n      \
    \     6.3.1. Revocation Inputs ..................................91\n        \
    \   6.3.2. Initialization and Revocation State Variables ......91\n          \
    \ 6.3.3. CRL Processing .....................................92\n   7. Processing\
    \ Rules for Internationalized Names ...................95\n      7.1. Internationalized\
    \ Names in Distinguished Names ............96\n      7.2. Internationalized Domain\
    \ Names in GeneralName .............97\n      7.3. Internationalized Domain Names\
    \ in Distinguished Names .....98\n      7.4. Internationalized Resource Identifiers\
    \ ....................98\n      7.5. Internationalized Electronic Mail Addresses\
    \ ..............100\n   8. Security Considerations .......................................100\n\
    \   9. IANA Considerations ...........................................105\n  \
    \ 10. Acknowledgments ..............................................105\n   11.\
    \ References ...................................................105\n      11.1.\
    \ Normative References ....................................105\n      11.2. Informative\
    \ References ..................................107\n   Appendix A.  Pseudo-ASN.1\
    \ Structures and OIDs ....................110\n      A.1. Explicitly Tagged Module,\
    \ 1988 Syntax ....................110\n      A.2. Implicitly Tagged Module, 1988\
    \ Syntax ....................125\n   Appendix B. ASN.1 Notes ..........................................133\n\
    \   Appendix C. Examples .............................................136\n  \
    \    C.1. RSA Self-Signed Certificate ..............................137\n    \
    \  C.2. End Entity Certificate Using RSA .........................140\n      C.3.\
    \ End Entity Certificate Using DSA .........................143\n      C.4. Certificate\
    \ Revocation List ..............................147\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification is one part of a family of standards\
    \ for the X.509\n   Public Key Infrastructure (PKI) for the Internet.\n   This\
    \ specification profiles the format and semantics of certificates\n   and certificate\
    \ revocation lists (CRLs) for the Internet PKI.\n   Procedures are described for\
    \ processing of certification paths in the\n   Internet environment.  Finally,\
    \ ASN.1 modules are provided in the\n   appendices for all data structures defined\
    \ or referenced.\n   Section 2 describes Internet PKI requirements and the assumptions\n\
    \   that affect the scope of this document.  Section 3 presents an\n   architectural\
    \ model and describes its relationship to previous IETF\n   and ISO/IEC/ITU-T\
    \ standards.  In particular, this document's\n   relationship with the IETF PEM\
    \ specifications and the ISO/IEC/ITU-T\n   X.509 documents is described.\n   Section\
    \ 4 profiles the X.509 version 3 certificate, and Section 5\n   profiles the X.509\
    \ version 2 CRL.  The profiles include the\n   identification of ISO/IEC/ITU-T\
    \ and ANSI extensions that may be\n   useful in the Internet PKI.  The profiles\
    \ are presented in the 1988\n   Abstract Syntax Notation One (ASN.1) rather than\
    \ the 1997 ASN.1\n   syntax used in the most recent ISO/IEC/ITU-T standards.\n\
    \   Section 6 includes certification path validation procedures.  These\n   procedures\
    \ are based upon the ISO/IEC/ITU-T definition.\n   Implementations are REQUIRED\
    \ to derive the same results but are not\n   required to use the specified procedures.\n\
    \   Procedures for identification and encoding of public key materials\n   and\
    \ digital signatures are defined in [RFC3279], [RFC4055], and\n   [RFC4491]. \
    \ Implementations of this specification are not required to\n   use any particular\
    \ cryptographic algorithms.  However, conforming\n   implementations that use\
    \ the algorithms identified in [RFC3279],\n   [RFC4055], and [RFC4491] MUST identify\
    \ and encode the public key\n   materials and digital signatures as described\
    \ in those\n   specifications.\n   Finally, three appendices are provided to aid\
    \ implementers.  Appendix\n   A contains all ASN.1 structures defined or referenced\
    \ within this\n   specification.  As above, the material is presented in the 1988\n\
    \   ASN.1.  Appendix B contains notes on less familiar features of the\n   ASN.1\
    \ notation used within this specification.  Appendix C contains\n   examples of\
    \ conforming certificates and a conforming CRL.\n   This specification obsoletes\
    \ [RFC3280].  Differences from RFC 3280\n   are summarized below:\n      * Enhanced\
    \ support for internationalized names is specified in\n        Section 7, with\
    \ rules for encoding and comparing\n        Internationalized Domain Names, Internationalized\
    \ Resource\n        Identifiers (IRIs), and distinguished names.  These rules\
    \ are\n        aligned with comparison rules established in current RFCs,\n  \
    \      including [RFC3490], [RFC3987], and [RFC4518].\n      * Sections 4.1.2.4\
    \ and 4.1.2.6 incorporate the conditions for\n        continued use of legacy\
    \ text encoding schemes that were\n        specified in [RFC4630].  Where in use\
    \ by an established PKI,\n        transition to UTF8String could cause denial\
    \ of service based on\n        name chaining failures or incorrect processing\
    \ of name\n        constraints.\n      * Section 4.2.1.4 in RFC 3280, which specified\
    \ the\n        privateKeyUsagePeriod certificate extension but deprecated its\n\
    \        use, was removed.  Use of this ISO standard extension is neither\n  \
    \      deprecated nor recommended for use in the Internet PKI.\n      * Section\
    \ 4.2.1.5 recommends marking the policy mappings extension\n        as critical.\
    \  RFC 3280 required that the policy mappings\n        extension be marked as\
    \ non-critical.\n      * Section 4.2.1.11 requires marking the policy constraints\n\
    \        extension as critical.  RFC 3280 permitted the policy\n        constraints\
    \ extension to be marked as critical or non-critical.\n      * The Authority Information\
    \ Access (AIA) CRL extension, as\n        specified in [RFC4325], was added as\
    \ Section 5.2.7.\n      * Sections 5.2 and 5.3 clarify the rules for handling\
    \ unrecognized\n        CRL extensions and CRL entry extensions, respectively.\n\
    \      * Section 5.3.2 in RFC 3280, which specified the\n        holdInstructionCode\
    \ CRL entry extension, was removed.\n      * The path validation algorithm specified\
    \ in Section 6 no longer\n        tracks the criticality of the certificate policies\
    \ extensions in\n        a chain of certificates.  In RFC 3280, this information\
    \ was\n        returned to a relying party.\n      * The Security Considerations\
    \ section addresses the risk of\n        circular dependencies arising from the\
    \ use of https or similar\n        schemes in the CRL distribution points, authority\
    \ information\n        access, or subject information access extensions.\n   \
    \   * The Security Considerations section addresses risks associated\n       \
    \ with name ambiguity.\n      * The Security Considerations section references\
    \ RFC 4210 for\n        procedures to signal changes in CA operations.\n   The\
    \ ASN.1 modules in Appendix A are unchanged from RFC 3280, except\n   that ub-emailaddress-length\
    \ was changed from 128 to 255 in order to\n   align with PKCS #9 [RFC2985].\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  Requirements and Assumptions
  contents:
  - "2.  Requirements and Assumptions\n   The goal of this specification is to develop\
    \ a profile to facilitate\n   the use of X.509 certificates within Internet applications\
    \ for those\n   communities wishing to make use of X.509 technology.  Such\n \
    \  applications may include WWW, electronic mail, user authentication,\n   and\
    \ IPsec.  In order to relieve some of the obstacles to using X.509\n   certificates,\
    \ this document defines a profile to promote the\n   development of certificate\
    \ management systems, development of\n   application tools, and interoperability\
    \ determined by policy.\n   Some communities will need to supplement, or possibly\
    \ replace, this\n   profile in order to meet the requirements of specialized application\n\
    \   domains or environments with additional authorization, assurance, or\n   operational\
    \ requirements.  However, for basic applications, common\n   representations of\
    \ frequently used attributes are defined so that\n   application developers can\
    \ obtain necessary information without\n   regard to the issuer of a particular\
    \ certificate or certificate\n   revocation list (CRL).\n   A certificate user\
    \ should review the certificate policy generated by\n   the certification authority\
    \ (CA) before relying on the authentication\n   or non-repudiation services associated\
    \ with the public key in a\n   particular certificate.  To this end, this standard\
    \ does not\n   prescribe legally binding rules or duties.\n   As supplemental\
    \ authorization and attribute management tools emerge,\n   such as attribute certificates,\
    \ it may be appropriate to limit the\n   authenticated attributes that are included\
    \ in a certificate.  These\n   other management tools may provide more appropriate\
    \ methods of\n   conveying many authenticated attributes.\n"
- title: 2.1.  Communication and Topology
  contents:
  - "2.1.  Communication and Topology\n   The users of certificates will operate in\
    \ a wide range of\n   environments with respect to their communication topology,\
    \ especially\n   users of secure electronic mail.  This profile supports users\
    \ without\n   high bandwidth, real-time IP connectivity, or high connection\n\
    \   availability.  In addition, the profile allows for the presence of\n   firewall\
    \ or other filtered communication.\n   This profile does not assume the deployment\
    \ of an X.500 directory\n   system [X.500] or a Lightweight Directory Access Protocol\
    \ (LDAP)\n   directory system [RFC4510].  The profile does not prohibit the use\
    \ of\n   an X.500 directory or an LDAP directory; however, any means of\n   distributing\
    \ certificates and certificate revocation lists (CRLs) may\n   be used.\n"
- title: 2.2.  Acceptability Criteria
  contents:
  - "2.2.  Acceptability Criteria\n   The goal of the Internet Public Key Infrastructure\
    \ (PKI) is to meet\n   the needs of deterministic, automated identification, authentication,\n\
    \   access control, and authorization functions.  Support for these\n   services\
    \ determines the attributes contained in the certificate as\n   well as the ancillary\
    \ control information in the certificate such as\n   policy data and certification\
    \ path constraints.\n"
- title: 2.3.  User Expectations
  contents:
  - "2.3.  User Expectations\n   Users of the Internet PKI are people and processes\
    \ who use client\n   software and are the subjects named in certificates.  These\
    \ uses\n   include readers and writers of electronic mail, the clients for WWW\n\
    \   browsers, WWW servers, and the key manager for IPsec within a router.\n  \
    \ This profile recognizes the limitations of the platforms these users\n   employ\
    \ and the limitations in sophistication and attentiveness of the\n   users themselves.\
    \  This manifests itself in minimal user\n   configuration responsibility (e.g.,\
    \ trusted CA keys, rules), explicit\n   platform usage constraints within the\
    \ certificate, certification path\n   constraints that shield the user from many\
    \ malicious actions, and\n   applications that sensibly automate validation functions.\n"
- title: 2.4.  Administrator Expectations
  contents:
  - "2.4.  Administrator Expectations\n   As with user expectations, the Internet\
    \ PKI profile is structured to\n   support the individuals who generally operate\
    \ CAs.  Providing\n   administrators with unbounded choices increases the chances\
    \ that a\n   subtle CA administrator mistake will result in broad compromise.\n\
    \   Also, unbounded choices greatly complicate the software that process\n   and\
    \ validate the certificates created by the CA.\n"
- title: 3.  Overview of Approach
  contents:
  - "3.  Overview of Approach\n   Following is a simplified view of the architectural\
    \ model assumed by\n   the Public-Key Infrastructure using X.509 (PKIX) specifications.\n\
    \   The components in this model are:\n   end entity: user of PKI certificates\
    \ and/or end user system that is\n               the subject of a certificate;\n\
    \   CA:         certification authority;\n   RA:         registration authority,\
    \ i.e., an optional system to which\n               a CA delegates certain management\
    \ functions;\n   CRL issuer: a system that generates and signs CRLs; and\n   repository:\
    \ a system or collection of distributed systems that stores\n               certificates\
    \ and CRLs and serves as a means of\n               distributing these certificates\
    \ and CRLs to end entities.\n   CAs are responsible for indicating the revocation\
    \ status of the\n   certificates that they issue.  Revocation status information\
    \ may be\n   provided using the Online Certificate Status Protocol (OCSP)\n  \
    \ [RFC2560], certificate revocation lists (CRLs), or some other\n   mechanism.\
    \  In general, when revocation status information is\n   provided using CRLs,\
    \ the CA is also the CRL issuer.  However, a CA\n   may delegate the responsibility\
    \ for issuing CRLs to a different\n   entity.\n   Note that an Attribute Authority\
    \ (AA) might also choose to delegate\n   the publication of CRLs to a CRL issuer.\n\
    \   +---+\n   | C |                       +------------+\n   | e | <-------------------->|\
    \ End entity |\n   | r |       Operational     +------------+\n   | t |      \
    \ transactions          ^\n   | i |      and management         |  Management\n\
    \   | f |       transactions          |  transactions        PKI\n   | i |   \
    \                          |                     users\n   | c |             \
    \                v\n   | a | =======================  +--+------------+  ==============\n\
    \   | t |                          ^               ^\n   | e |               \
    \           |               |         PKI\n   |   |                          v\
    \               |      management\n   | & |                       +------+   \
    \        |       entities\n   |   | <---------------------|  RA  |<----+     |\n\
    \   | C |  Publish certificate  +------+     |     |\n   | R |               \
    \                     |     |\n   | L |                                    | \
    \    |\n   |   |                                    v     v\n   | R |        \
    \                        +------------+\n   | e | <------------------------------|\
    \     CA     |\n   | p |   Publish certificate          +------------+\n   | o\
    \ |   Publish CRL                     ^      ^\n   | s |                     \
    \              |      |  Management\n   | i |                +------------+  \
    \   |      |  transactions\n   | t | <--------------| CRL Issuer |<----+     \
    \ |\n   | o |   Publish CRL  +------------+            v\n   | r |           \
    \                           +------+\n   | y |                               \
    \       |  CA  |\n   +---+                                      +------+\n   \
    \                   Figure 1. PKI Entities\n"
- title: 3.1.  X.509 Version 3 Certificate
  contents:
  - "3.1.  X.509 Version 3 Certificate\n   Users of a public key require confidence\
    \ that the associated private\n   key is owned by the correct remote subject (person\
    \ or system) with\n   which an encryption or digital signature mechanism will\
    \ be used.\n   This confidence is obtained through the use of public key\n   certificates,\
    \ which are data structures that bind public key values\n   to subjects.  The\
    \ binding is asserted by having a trusted CA\n   digitally sign each certificate.\
    \  The CA may base this assertion upon\n   technical means (a.k.a., proof of possession\
    \ through a challenge-\n   response protocol), presentation of the private key,\
    \ or on an\n   assertion by the subject.  A certificate has a limited valid\n\
    \   lifetime, which is indicated in its signed contents.  Because a\n   certificate's\
    \ signature and timeliness can be independently checked\n   by a certificate-using\
    \ client, certificates can be distributed via\n   untrusted communications and\
    \ server systems, and can be cached in\n   unsecured storage in certificate-using\
    \ systems.\n   ITU-T X.509 (formerly CCITT X.509) or ISO/IEC 9594-8, which was\
    \ first\n   published in 1988 as part of the X.500 directory recommendations,\n\
    \   defines a standard certificate format [X.509].  The certificate\n   format\
    \ in the 1988 standard is called the version 1 (v1) format.\n   When X.500 was\
    \ revised in 1993, two more fields were added, resulting\n   in the version 2\
    \ (v2) format.\n   The Internet Privacy Enhanced Mail (PEM) RFCs, published in\
    \ 1993,\n   include specifications for a public key infrastructure based on X.509\n\
    \   v1 certificates [RFC1422].  The experience gained in attempts to\n   deploy\
    \ RFC 1422 made it clear that the v1 and v2 certificate formats\n   were deficient\
    \ in several respects.  Most importantly, more fields\n   were needed to carry\
    \ information that PEM design and implementation\n   experience had proven necessary.\
    \  In response to these new\n   requirements, the ISO/IEC, ITU-T, and ANSI X9\
    \ developed the X.509\n   version 3 (v3) certificate format.  The v3 format extends\
    \ the v2\n   format by adding provision for additional extension fields.\n   Particular\
    \ extension field types may be specified in standards or may\n   be defined and\
    \ registered by any organization or community.  In June\n   1996, standardization\
    \ of the basic v3 format was completed [X.509].\n   ISO/IEC, ITU-T, and ANSI X9\
    \ have also developed standard extensions\n   for use in the v3 extensions field\
    \ [X.509][X9.55].  These extensions\n   can convey such data as additional subject\
    \ identification\n   information, key attribute information, policy information,\
    \ and\n   certification path constraints.\n   However, the ISO/IEC, ITU-T, and\
    \ ANSI X9 standard extensions are very\n   broad in their applicability.  In order\
    \ to develop interoperable\n   implementations of X.509 v3 systems for Internet\
    \ use, it is necessary\n   to specify a profile for use of the X.509 v3 extensions\
    \ tailored for\n   the Internet.  It is one goal of this document to specify a\
    \ profile\n   for Internet WWW, electronic mail, and IPsec applications.\n   Environments\
    \ with additional requirements may build on this profile\n   or may replace it.\n"
- title: 3.2.  Certification Paths and Trust
  contents:
  - "3.2.  Certification Paths and Trust\n   A user of a security service requiring\
    \ knowledge of a public key\n   generally needs to obtain and validate a certificate\
    \ containing the\n   required public key.  If the public key user does not already\
    \ hold an\n   assured copy of the public key of the CA that signed the certificate,\n\
    \   the CA's name, and related information (such as the validity period\n   or\
    \ name constraints), then it might need an additional certificate to\n   obtain\
    \ that public key.  In general, a chain of multiple certificates\n   may be needed,\
    \ comprising a certificate of the public key owner (the\n   end entity) signed\
    \ by one CA, and zero or more additional\n   certificates of CAs signed by other\
    \ CAs.  Such chains, called\n   certification paths, are required because a public\
    \ key user is only\n   initialized with a limited number of assured CA public\
    \ keys.\n   There are different ways in which CAs might be configured in order\n\
    \   for public key users to be able to find certification paths.  For\n   PEM,\
    \ RFC 1422 defined a rigid hierarchical structure of CAs.  There\n   are three\
    \ types of PEM certification authority:\n      (a)  Internet Policy Registration\
    \ Authority (IPRA):  This\n           authority, operated under the auspices of\
    \ the Internet\n           Society, acts as the root of the PEM certification\
    \ hierarchy\n           at level 1.  It issues certificates only for the next\
    \ level\n           of authorities, PCAs.  All certification paths start with\
    \ the\n           IPRA.\n      (b)  Policy Certification Authorities (PCAs): \
    \ PCAs are at level 2\n           of the hierarchy, each PCA being certified by\
    \ the IPRA.  A\n           PCA shall establish and publish a statement of its\
    \ policy\n           with respect to certifying users or subordinate certification\n\
    \           authorities.  Distinct PCAs aim to satisfy different user\n      \
    \     needs.  For example, one PCA (an organizational PCA) might\n           support\
    \ the general electronic mail needs of commercial\n           organizations, and\
    \ another PCA (a high-assurance PCA) might\n           have a more stringent policy\
    \ designed for satisfying legally\n           binding digital signature requirements.\n\
    \      (c)  Certification Authorities (CAs):  CAs are at level 3 of the\n    \
    \       hierarchy and can also be at lower levels.  Those at level 3\n       \
    \    are certified by PCAs.  CAs represent, for example,\n           particular\
    \ organizations, particular organizational units\n           (e.g., departments,\
    \ groups, sections), or particular\n           geographical areas.\n   RFC 1422\
    \ furthermore has a name subordination rule, which requires\n   that a CA can\
    \ only issue certificates for entities whose names are\n   subordinate (in the\
    \ X.500 naming tree) to the name of the CA itself.\n   The trust associated with\
    \ a PEM certification path is implied by the\n   PCA name.  The name subordination\
    \ rule ensures that CAs below the PCA\n   are sensibly constrained as to the set\
    \ of subordinate entities they\n   can certify (e.g., a CA for an organization\
    \ can only certify entities\n   in that organization's name tree).  Certificate\
    \ user systems are able\n   to mechanically check that the name subordination\
    \ rule has been\n   followed.\n   RFC 1422 uses the X.509 v1 certificate format.\
    \  The limitations of\n   X.509 v1 required imposition of several structural restrictions\
    \ to\n   clearly associate policy information or restrict the utility of\n   certificates.\
    \  These restrictions included:\n      (a)  a pure top-down hierarchy, with all\
    \ certification paths\n           starting from IPRA;\n      (b)  a naming subordination\
    \ rule restricting the names of a CA's\n           subjects; and\n      (c)  use\
    \ of the PCA concept, which requires knowledge of\n           individual PCAs\
    \ to be built into certificate chain\n           verification logic.  Knowledge\
    \ of individual PCAs was\n           required to determine if a chain could be\
    \ accepted.\n   With X.509 v3, most of the requirements addressed by RFC 1422\
    \ can be\n   addressed using certificate extensions, without a need to restrict\n\
    \   the CA structures used.  In particular, the certificate extensions\n   relating\
    \ to certificate policies obviate the need for PCAs and the\n   constraint extensions\
    \ obviate the need for the name subordination\n   rule.  As a result, this document\
    \ supports a more flexible\n   architecture, including:\n      (a)  Certification\
    \ paths start with a public key of a CA in a\n           user's own domain, or\
    \ with the public key of the top of a\n           hierarchy.  Starting with the\
    \ public key of a CA in a user's\n           own domain has certain advantages.\
    \  In some environments, the\n           local domain is the most trusted.\n \
    \     (b)  Name constraints may be imposed through explicit inclusion of\n   \
    \        a name constraints extension in a certificate, but are not\n        \
    \   required.\n      (c)  Policy extensions and policy mappings replace the PCA\n\
    \           concept, which permits a greater degree of automation.  The\n    \
    \       application can determine if the certification path is\n           acceptable\
    \ based on the contents of the certificates instead\n           of a priori knowledge\
    \ of PCAs.  This permits automation of\n           certification path processing.\n\
    \   X.509 v3 also includes an extension that identifies the subject of a\n   certificate\
    \ as being either a CA or an end entity, reducing the\n   reliance on out-of-band\
    \ information demanded in PEM.\n   This specification covers two classes of certificates:\
    \ CA\n   certificates and end entity certificates.  CA certificates may be\n \
    \  further divided into three classes: cross-certificates, self-issued\n   certificates,\
    \ and self-signed certificates.  Cross-certificates are\n   CA certificates in\
    \ which the issuer and subject are different\n   entities.  Cross-certificates\
    \ describe a trust relationship between\n   the two CAs.  Self-issued certificates\
    \ are CA certificates in which\n   the issuer and subject are the same entity.\
    \  Self-issued certificates\n   are generated to support changes in policy or\
    \ operations.  Self-\n   signed certificates are self-issued certificates where\
    \ the digital\n   signature may be verified by the public key bound into the\n\
    \   certificate.  Self-signed certificates are used to convey a public\n   key\
    \ for use to begin certification paths.  End entity certificates\n   are issued\
    \ to subjects that are not authorized to issue certificates.\n"
- title: 3.3.  Revocation
  contents:
  - "3.3.  Revocation\n   When a certificate is issued, it is expected to be in use\
    \ for its\n   entire validity period.  However, various circumstances may cause\
    \ a\n   certificate to become invalid prior to the expiration of the validity\n\
    \   period.  Such circumstances include change of name, change of\n   association\
    \ between subject and CA (e.g., an employee terminates\n   employment with an\
    \ organization), and compromise or suspected\n   compromise of the corresponding\
    \ private key.  Under such\n   circumstances, the CA needs to revoke the certificate.\n\
    \   X.509 defines one method of certificate revocation.  This method\n   involves\
    \ each CA periodically issuing a signed data structure called\n   a certificate\
    \ revocation list (CRL).  A CRL is a time-stamped list\n   identifying revoked\
    \ certificates that is signed by a CA or CRL issuer\n   and made freely available\
    \ in a public repository.  Each revoked\n   certificate is identified in a CRL\
    \ by its certificate serial number.\n   When a certificate-using system uses a\
    \ certificate (e.g., for\n   verifying a remote user's digital signature), that\
    \ system not only\n   checks the certificate signature and validity but also acquires\
    \ a\n   suitably recent CRL and checks that the certificate serial number is\n\
    \   not on that CRL.  The meaning of \"suitably recent\" may vary with\n   local\
    \ policy, but it usually means the most recently issued CRL.  A\n   new CRL is\
    \ issued on a regular periodic basis (e.g., hourly, daily,\n   or weekly).  An\
    \ entry is added to the CRL as part of the next update\n   following notification\
    \ of revocation.  An entry MUST NOT be removed\n   from the CRL until it appears\
    \ on one regularly scheduled CRL issued\n   beyond the revoked certificate's validity\
    \ period.\n   An advantage of this revocation method is that CRLs may be\n   distributed\
    \ by exactly the same means as certificates themselves,\n   namely, via untrusted\
    \ servers and untrusted communications.\n   One limitation of the CRL revocation\
    \ method, using untrusted\n   communications and servers, is that the time granularity\
    \ of\n   revocation is limited to the CRL issue period.  For example, if a\n \
    \  revocation is reported now, that revocation will not be reliably\n   notified\
    \ to certificate-using systems until all currently issued CRLs\n   are scheduled\
    \ to be updated -- this may be up to one hour, one day,\n   or one week depending\
    \ on the frequency that CRLs are issued.\n   As with the X.509 v3 certificate\
    \ format, in order to facilitate\n   interoperable implementations from multiple\
    \ vendors, the X.509 v2 CRL\n   format needs to be profiled for Internet use.\
    \  It is one goal of this\n   document to specify that profile.  However, this\
    \ profile does not\n   require the issuance of CRLs.  Message formats and protocols\n\
    \   supporting on-line revocation notification are defined in other PKIX\n   specifications.\
    \  On-line methods of revocation notification may be\n   applicable in some environments\
    \ as an alternative to the X.509 CRL.\n   On-line revocation checking may significantly\
    \ reduce the latency\n   between a revocation report and the distribution of the\
    \ information\n   to relying parties.  Once the CA accepts a revocation report\
    \ as\n   authentic and valid, any query to the on-line service will correctly\n\
    \   reflect the certificate validation impacts of the revocation.\n   However,\
    \ these methods impose new security requirements: the\n   certificate validator\
    \ needs to trust the on-line validation service\n   while the repository does\
    \ not need to be trusted.\n"
- title: 3.4.  Operational Protocols
  contents:
  - "3.4.  Operational Protocols\n   Operational protocols are required to deliver\
    \ certificates and CRLs\n   (or status information) to certificate-using client\
    \ systems.\n   Provisions are needed for a variety of different means of certificate\n\
    \   and CRL delivery, including distribution procedures based on LDAP,\n   HTTP,\
    \ FTP, and X.500.  Operational protocols supporting these\n   functions are defined\
    \ in other PKIX specifications.  These\n   specifications may include definitions\
    \ of message formats and\n   procedures for supporting all of the above operational\
    \ environments,\n   including definitions of or references to appropriate MIME\
    \ content\n   types.\n"
- title: 3.5.  Management Protocols
  contents:
  - "3.5.  Management Protocols\n   Management protocols are required to support on-line\
    \ interactions\n   between PKI user and management entities.  For example, a management\n\
    \   protocol might be used between a CA and a client system with which a\n   key\
    \ pair is associated, or between two CAs that cross-certify each\n   other.  The\
    \ set of functions that potentially need to be supported by\n   management protocols\
    \ include:\n      (a)  registration:  This is the process whereby a user first\
    \ makes\n           itself known to a CA (directly, or through an RA), prior to\n\
    \           that CA issuing a certificate or certificates for that user.\n   \
    \   (b)  initialization:  Before a client system can operate securely,\n     \
    \      it is necessary to install key materials that have the\n           appropriate\
    \ relationship with keys stored elsewhere in the\n           infrastructure. \
    \ For example, the client needs to be securely\n           initialized with the\
    \ public key and other assured information\n           of the trusted CA(s), to\
    \ be used in validating certificate\n           paths.\n           Furthermore,\
    \ a client typically needs to be initialized with\n           its own key pair(s).\n\
    \      (c)  certification:  This is the process in which a CA issues a\n     \
    \      certificate for a user's public key, and returns that\n           certificate\
    \ to the user's client system and/or posts that\n           certificate in a repository.\n\
    \      (d)  key pair recovery:  As an option, user client key materials\n    \
    \       (e.g., a user's private key used for encryption purposes) may\n      \
    \     be backed up by a CA or a key backup system.  If a user needs\n        \
    \   to recover these backed-up key materials (e.g., as a result\n           of\
    \ a forgotten password or a lost key chain file), an on-line\n           protocol\
    \ exchange may be needed to support such recovery.\n      (e)  key pair update:\
    \  All key pairs need to be updated regularly,\n           i.e., replaced with\
    \ a new key pair, and new certificates\n           issued.\n      (f)  revocation\
    \ request:  An authorized person advises a CA of an\n           abnormal situation\
    \ requiring certificate revocation.\n      (g)  cross-certification:  Two CAs\
    \ exchange information used in\n           establishing a cross-certificate. \
    \ A cross-certificate is a\n           certificate issued by one CA to another\
    \ CA that contains a CA\n           signature key used for issuing certificates.\n\
    \   Note that on-line protocols are not the only way of implementing the\n   above\
    \ functions.  For all functions, there are off-line methods of\n   achieving the\
    \ same result, and this specification does not mandate\n   use of on-line protocols.\
    \  For example, when hardware tokens are\n   used, many of the functions may be\
    \ achieved as part of the physical\n   token delivery.  Furthermore, some of the\
    \ above functions may be\n   combined into one protocol exchange.  In particular,\
    \ two or more of\n   the registration, initialization, and certification functions\
    \ can be\n   combined into one protocol exchange.\n   The PKIX series of specifications\
    \ defines a set of standard message\n   formats supporting the above functions.\
    \  The protocols for conveying\n   these messages in different environments (e.g.,\
    \ email, file transfer,\n   and WWW) are described in those specifications.\n"
- title: 4.  Certificate and Certificate Extensions Profile
  contents:
  - "4.  Certificate and Certificate Extensions Profile\n   This section presents\
    \ a profile for public key certificates that will\n   foster interoperability\
    \ and a reusable PKI.  This section is based\n   upon the X.509 v3 certificate\
    \ format and the standard certificate\n   extensions defined in [X.509].  The\
    \ ISO/IEC and ITU-T documents use\n   the 1997 version of ASN.1; while this document\
    \ uses the 1988 ASN.1\n   syntax, the encoded certificate and standard extensions\
    \ are\n   equivalent.  This section also defines private extensions required to\n\
    \   support a PKI for the Internet community.\n   Certificates may be used in\
    \ a wide range of applications and\n   environments covering a broad spectrum\
    \ of interoperability goals and\n   a broader spectrum of operational and assurance\
    \ requirements.  The\n   goal of this document is to establish a common baseline\
    \ for generic\n   applications requiring broad interoperability and limited special\n\
    \   purpose requirements.  In particular, the emphasis will be on\n   supporting\
    \ the use of X.509 v3 certificates for informal Internet\n   electronic mail,\
    \ IPsec, and WWW applications.\n"
- title: 4.1.  Basic Certificate Fields
  contents:
  - "4.1.  Basic Certificate Fields\n   The X.509 v3 certificate basic syntax is as\
    \ follows.  For signature\n   calculation, the data that is to be signed is encoded\
    \ using the ASN.1\n   distinguished encoding rules (DER) [X.690].  ASN.1 DER encoding\
    \ is a\n   tag, length, value encoding system for each element.\n   Certificate\
    \  ::=  SEQUENCE  {\n        tbsCertificate       TBSCertificate,\n        signatureAlgorithm\
    \   AlgorithmIdentifier,\n        signatureValue       BIT STRING  }\n   TBSCertificate\
    \  ::=  SEQUENCE  {\n        version         [0]  EXPLICIT Version DEFAULT v1,\n\
    \        serialNumber         CertificateSerialNumber,\n        signature    \
    \        AlgorithmIdentifier,\n        issuer               Name,\n        validity\
    \             Validity,\n        subject              Name,\n        subjectPublicKeyInfo\
    \ SubjectPublicKeyInfo,\n        issuerUniqueID  [1]  IMPLICIT UniqueIdentifier\
    \ OPTIONAL,\n                             -- If present, version MUST be v2 or\
    \ v3\n        subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n     \
    \                        -- If present, version MUST be v2 or v3\n        extensions\
    \      [3]  EXPLICIT Extensions OPTIONAL\n                             -- If present,\
    \ version MUST be v3\n        }\n   Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)\
    \  }\n   CertificateSerialNumber  ::=  INTEGER\n   Validity ::= SEQUENCE {\n \
    \       notBefore      Time,\n        notAfter       Time }\n   Time ::= CHOICE\
    \ {\n        utcTime        UTCTime,\n        generalTime    GeneralizedTime }\n\
    \   UniqueIdentifier  ::=  BIT STRING\n   SubjectPublicKeyInfo  ::=  SEQUENCE\
    \  {\n        algorithm            AlgorithmIdentifier,\n        subjectPublicKey\
    \     BIT STRING  }\n   Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\n\
    \   Extension  ::=  SEQUENCE  {\n        extnID      OBJECT IDENTIFIER,\n    \
    \    critical    BOOLEAN DEFAULT FALSE,\n        extnValue   OCTET STRING\n  \
    \                  -- contains the DER encoding of an ASN.1 value\n          \
    \          -- corresponding to the extension type identified\n               \
    \     -- by extnID\n        }\n   The following items describe the X.509 v3 certificate\
    \ for use in the\n   Internet.\n"
- title: 4.1.1.  Certificate Fields
  contents:
  - "4.1.1.  Certificate Fields\n   The Certificate is a SEQUENCE of three required\
    \ fields.  The fields\n   are described in detail in the following subsections.\n"
- title: 4.1.1.1.  tbsCertificate
  contents:
  - "4.1.1.1.  tbsCertificate\n   The field contains the names of the subject and\
    \ issuer, a public key\n   associated with the subject, a validity period, and\
    \ other associated\n   information.  The fields are described in detail in Section\
    \ 4.1.2;\n   the tbsCertificate usually includes extensions, which are described\n\
    \   in Section 4.2.\n"
- title: 4.1.1.2.  signatureAlgorithm
  contents:
  - "4.1.1.2.  signatureAlgorithm\n   The signatureAlgorithm field contains the identifier\
    \ for the\n   cryptographic algorithm used by the CA to sign this certificate.\n\
    \   [RFC3279], [RFC4055], and [RFC4491] list supported signature\n   algorithms,\
    \ but other signature algorithms MAY also be supported.\n   An algorithm identifier\
    \ is defined by the following ASN.1 structure:\n   AlgorithmIdentifier  ::=  SEQUENCE\
    \  {\n        algorithm               OBJECT IDENTIFIER,\n        parameters \
    \             ANY DEFINED BY algorithm OPTIONAL  }\n   The algorithm identifier\
    \ is used to identify a cryptographic\n   algorithm.  The OBJECT IDENTIFIER component\
    \ identifies the algorithm\n   (such as DSA with SHA-1).  The contents of the\
    \ optional parameters\n   field will vary according to the algorithm identified.\n\
    \   This field MUST contain the same algorithm identifier as the\n   signature\
    \ field in the sequence tbsCertificate (Section 4.1.2.3).\n"
- title: 4.1.1.3.  signatureValue
  contents:
  - "4.1.1.3.  signatureValue\n   The signatureValue field contains a digital signature\
    \ computed upon\n   the ASN.1 DER encoded tbsCertificate.  The ASN.1 DER encoded\n\
    \   tbsCertificate is used as the input to the signature function.  This\n   signature\
    \ value is encoded as a BIT STRING and included in the\n   signature field.  The\
    \ details of this process are specified for each\n   of the algorithms listed\
    \ in [RFC3279], [RFC4055], and [RFC4491].\n   By generating this signature, a\
    \ CA certifies the validity of the\n   information in the tbsCertificate field.\
    \  In particular, the CA\n   certifies the binding between the public key material\
    \ and the subject\n   of the certificate.\n"
- title: 4.1.2.  TBSCertificate
  contents:
  - "4.1.2.  TBSCertificate\n   The sequence TBSCertificate contains information associated\
    \ with the\n   subject of the certificate and the CA that issued it.  Every\n\
    \   TBSCertificate contains the names of the subject and issuer, a public\n  \
    \ key associated with the subject, a validity period, a version number,\n   and\
    \ a serial number; some MAY contain optional unique identifier\n   fields.  The\
    \ remainder of this section describes the syntax and\n   semantics of these fields.\
    \  A TBSCertificate usually includes\n   extensions.  Extensions for the Internet\
    \ PKI are described in Section\n   4.2.\n"
- title: 4.1.2.1.  Version
  contents:
  - "4.1.2.1.  Version\n   This field describes the version of the encoded certificate.\
    \  When\n   extensions are used, as expected in this profile, version MUST be\
    \ 3\n   (value is 2).  If no extensions are present, but a UniqueIdentifier\n\
    \   is present, the version SHOULD be 2 (value is 1); however, the\n   version\
    \ MAY be 3.  If only basic fields are present, the version\n   SHOULD be 1 (the\
    \ value is omitted from the certificate as the default\n   value); however, the\
    \ version MAY be 2 or 3.\n   Implementations SHOULD be prepared to accept any\
    \ version certificate.\n   At a minimum, conforming implementations MUST recognize\
    \ version 3\n   certificates.\n   Generation of version 2 certificates is not\
    \ expected by\n   implementations based on this profile.\n"
- title: 4.1.2.2.  Serial Number
  contents:
  - "4.1.2.2.  Serial Number\n   The serial number MUST be a positive integer assigned\
    \ by the CA to\n   each certificate.  It MUST be unique for each certificate issued\
    \ by a\n   given CA (i.e., the issuer name and serial number identify a unique\n\
    \   certificate).  CAs MUST force the serialNumber to be a non-negative\n   integer.\n\
    \   Given the uniqueness requirements above, serial numbers can be\n   expected\
    \ to contain long integers.  Certificate users MUST be able to\n   handle serialNumber\
    \ values up to 20 octets.  Conforming CAs MUST NOT\n   use serialNumber values\
    \ longer than 20 octets.\n   Note: Non-conforming CAs may issue certificates with\
    \ serial numbers\n   that are negative or zero.  Certificate users SHOULD be prepared\
    \ to\n   gracefully handle such certificates.\n"
- title: 4.1.2.3.  Signature
  contents:
  - "4.1.2.3.  Signature\n   This field contains the algorithm identifier for the\
    \ algorithm used\n   by the CA to sign the certificate.\n   This field MUST contain\
    \ the same algorithm identifier as the\n   signatureAlgorithm field in the sequence\
    \ Certificate (Section\n   4.1.1.2).  The contents of the optional parameters\
    \ field will vary\n   according to the algorithm identified.  [RFC3279], [RFC4055],\
    \ and\n   [RFC4491] list supported signature algorithms, but other signature\n\
    \   algorithms MAY also be supported.\n"
- title: 4.1.2.4.  Issuer
  contents:
  - "4.1.2.4.  Issuer\n   The issuer field identifies the entity that has signed and\
    \ issued the\n   certificate.  The issuer field MUST contain a non-empty distinguished\n\
    \   name (DN).  The issuer field is defined as the X.501 type Name\n   [X.501].\
    \  Name is defined by the following ASN.1 structures:\n   Name ::= CHOICE { --\
    \ only one possibility for now --\n     rdnSequence  RDNSequence }\n   RDNSequence\
    \ ::= SEQUENCE OF RelativeDistinguishedName\n   RelativeDistinguishedName ::=\n\
    \     SET SIZE (1..MAX) OF AttributeTypeAndValue\n   AttributeTypeAndValue ::=\
    \ SEQUENCE {\n     type     AttributeType,\n     value    AttributeValue }\n \
    \  AttributeType ::= OBJECT IDENTIFIER\n   AttributeValue ::= ANY -- DEFINED BY\
    \ AttributeType\n   DirectoryString ::= CHOICE {\n         teletexString     \
    \      TeletexString (SIZE (1..MAX)),\n         printableString         PrintableString\
    \ (SIZE (1..MAX)),\n         universalString         UniversalString (SIZE (1..MAX)),\n\
    \         utf8String              UTF8String (SIZE (1..MAX)),\n         bmpString\
    \               BMPString (SIZE (1..MAX)) }\n   The Name describes a hierarchical\
    \ name composed of attributes, such\n   as country name, and corresponding values,\
    \ such as US.  The type of\n   the component AttributeValue is determined by the\
    \ AttributeType; in\n   general it will be a DirectoryString.\n   The DirectoryString\
    \ type is defined as a choice of PrintableString,\n   TeletexString, BMPString,\
    \ UTF8String, and UniversalString.  CAs\n   conforming to this profile MUST use\
    \ either the PrintableString or\n   UTF8String encoding of DirectoryString, with\
    \ two exceptions.  When\n   CAs have previously issued certificates with issuer\
    \ fields with\n   attributes encoded using TeletexString, BMPString, or\n   UniversalString,\
    \ then the CA MAY continue to use these encodings of\n   the DirectoryString to\
    \ preserve backward compatibility.  Also, new\n   CAs that are added to a domain\
    \ where existing CAs issue certificates\n   with issuer fields with attributes\
    \ encoded using TeletexString,\n   BMPString, or UniversalString MAY encode attributes\
    \ that they share\n   with the existing CAs using the same encodings as the existing\
    \ CAs\n   use.\n   As noted above, distinguished names are composed of attributes.\
    \  This\n   specification does not restrict the set of attribute types that may\n\
    \   appear in names.  However, conforming implementations MUST be\n   prepared\
    \ to receive certificates with issuer names containing the set\n   of attribute\
    \ types defined below.  This specification RECOMMENDS\n   support for additional\
    \ attribute types.\n   Standard sets of attributes have been defined in the X.500\
    \ series of\n   specifications [X.520].  Implementations of this specification\
    \ MUST\n   be prepared to receive the following standard attribute types in\n\
    \   issuer and subject (Section 4.1.2.6) names:\n      * country,\n      * organization,\n\
    \      * organizational unit,\n      * distinguished name qualifier,\n      *\
    \ state or province name,\n      * common name (e.g., \"Susan Housley\"), and\n\
    \      * serial number.\n   In addition, implementations of this specification\
    \ SHOULD be prepared\n   to receive the following standard attribute types in\
    \ issuer and\n   subject names:\n      * locality,\n      * title,\n      * surname,\n\
    \      * given name,\n      * initials,\n      * pseudonym, and\n      * generation\
    \ qualifier (e.g., \"Jr.\", \"3rd\", or \"IV\").\n   The syntax and associated\
    \ object identifiers (OIDs) for these\n   attribute types are provided in the\
    \ ASN.1 modules in Appendix A.\n   In addition, implementations of this specification\
    \ MUST be prepared\n   to receive the domainComponent attribute, as defined in\
    \ [RFC4519].\n   The Domain Name System (DNS) provides a hierarchical resource\n\
    \   labeling system.  This attribute provides a convenient mechanism for\n   organizations\
    \ that wish to use DNs that parallel their DNS names.\n   This is not a replacement\
    \ for the dNSName component of the\n   alternative name extensions.  Implementations\
    \ are not required to\n   convert such names into DNS names.  The syntax and associated\
    \ OID for\n   this attribute type are provided in the ASN.1 modules in Appendix\
    \ A.\n   Rules for encoding internationalized domain names for use with the\n\
    \   domainComponent attribute type are specified in Section 7.3.\n   Certificate\
    \ users MUST be prepared to process the issuer\n   distinguished name and subject\
    \ distinguished name (Section 4.1.2.6)\n   fields to perform name chaining for\
    \ certification path validation\n   (Section 6).  Name chaining is performed by\
    \ matching the issuer\n   distinguished name in one certificate with the subject\
    \ name in a CA\n   certificate.  Rules for comparing distinguished names are specified\n\
    \   in Section 7.1.  If the names in the issuer and subject field in a\n   certificate\
    \ match according to the rules specified in Section 7.1,\n   then the certificate\
    \ is self-issued.\n"
- title: 4.1.2.5.  Validity
  contents:
  - "4.1.2.5.  Validity\n   The certificate validity period is the time interval during\
    \ which the\n   CA warrants that it will maintain information about the status\
    \ of the\n   certificate.  The field is represented as a SEQUENCE of two dates:\n\
    \   the date on which the certificate validity period begins (notBefore)\n   and\
    \ the date on which the certificate validity period ends\n   (notAfter).  Both\
    \ notBefore and notAfter may be encoded as UTCTime or\n   GeneralizedTime.\n \
    \  CAs conforming to this profile MUST always encode certificate\n   validity\
    \ dates through the year 2049 as UTCTime; certificate validity\n   dates in 2050\
    \ or later MUST be encoded as GeneralizedTime.\n   Conforming applications MUST\
    \ be able to process validity dates that\n   are encoded in either UTCTime or\
    \ GeneralizedTime.\n   The validity period for a certificate is the period of\
    \ time from\n   notBefore through notAfter, inclusive.\n   In some situations,\
    \ devices are given certificates for which no good\n   expiration date can be\
    \ assigned.  For example, a device could be\n   issued a certificate that binds\
    \ its model and serial number to its\n   public key; such a certificate is intended\
    \ to be used for the entire\n   lifetime of the device.\n   To indicate that a\
    \ certificate has no well-defined expiration date,\n   the notAfter SHOULD be\
    \ assigned the GeneralizedTime value of\n   99991231235959Z.\n   When the issuer\
    \ will not be able to maintain status information until\n   the notAfter date\
    \ (including when the notAfter date is\n   99991231235959Z), the issuer MUST ensure\
    \ that no valid certification\n   path exists for the certificate after maintenance\
    \ of status\n   information is terminated.  This may be accomplished by expiration\
    \ or\n   revocation of all CA certificates containing the public key used to\n\
    \   verify the signature on the certificate and discontinuing use of the\n   public\
    \ key used to verify the signature on the certificate as a trust\n   anchor.\n"
- title: 4.1.2.5.1.  UTCTime
  contents:
  - "4.1.2.5.1.  UTCTime\n   The universal time type, UTCTime, is a standard ASN.1\
    \ type intended\n   for representation of dates and time.  UTCTime specifies the\
    \ year\n   through the two low-order digits and time is specified to the\n   precision\
    \ of one minute or one second.  UTCTime includes either Z\n   (for Zulu, or Greenwich\
    \ Mean Time) or a time differential.\n   For the purposes of this profile, UTCTime\
    \ values MUST be expressed in\n   Greenwich Mean Time (Zulu) and MUST include\
    \ seconds (i.e., times are\n   YYMMDDHHMMSSZ), even where the number of seconds\
    \ is zero.  Conforming\n   systems MUST interpret the year field (YY) as follows:\n\
    \      Where YY is greater than or equal to 50, the year SHALL be\n      interpreted\
    \ as 19YY; and\n      Where YY is less than 50, the year SHALL be interpreted\
    \ as 20YY.\n"
- title: 4.1.2.5.2.  GeneralizedTime
  contents:
  - "4.1.2.5.2.  GeneralizedTime\n   The generalized time type, GeneralizedTime, is\
    \ a standard ASN.1 type\n   for variable precision representation of time.  Optionally,\
    \ the\n   GeneralizedTime field can include a representation of the time\n   differential\
    \ between local and Greenwich Mean Time.\n   For the purposes of this profile,\
    \ GeneralizedTime values MUST be\n   expressed in Greenwich Mean Time (Zulu) and\
    \ MUST include seconds\n   (i.e., times are YYYYMMDDHHMMSSZ), even where the number\
    \ of seconds\n   is zero.  GeneralizedTime values MUST NOT include fractional\
    \ seconds.\n"
- title: 4.1.2.6.  Subject
  contents:
  - "4.1.2.6.  Subject\n   The subject field identifies the entity associated with\
    \ the public\n   key stored in the subject public key field.  The subject name\
    \ MAY be\n   carried in the subject field and/or the subjectAltName extension.\
    \  If\n   the subject is a CA (e.g., the basic constraints extension, as\n   discussed\
    \ in Section 4.2.1.9, is present and the value of cA is\n   TRUE), then the subject\
    \ field MUST be populated with a non-empty\n   distinguished name matching the\
    \ contents of the issuer field (Section\n   4.1.2.4) in all certificates issued\
    \ by the subject CA.  If the\n   subject is a CRL issuer (e.g., the key usage\
    \ extension, as discussed\n   in Section 4.2.1.3, is present and the value of\
    \ cRLSign is TRUE),\n   then the subject field MUST be populated with a non-empty\n\
    \   distinguished name matching the contents of the issuer field (Section\n  \
    \ 5.1.2.3) in all CRLs issued by the subject CRL issuer.  If subject\n   naming\
    \ information is present only in the subjectAltName extension\n   (e.g., a key\
    \ bound only to an email address or URI), then the subject\n   name MUST be an\
    \ empty sequence and the subjectAltName extension MUST\n   be critical.\n   Where\
    \ it is non-empty, the subject field MUST contain an X.500\n   distinguished name\
    \ (DN).  The DN MUST be unique for each subject\n   entity certified by the one\
    \ CA as defined by the issuer field.  A CA\n   MAY issue more than one certificate\
    \ with the same DN to the same\n   subject entity.\n   The subject field is defined\
    \ as the X.501 type Name.  Implementation\n   requirements for this field are\
    \ those defined for the issuer field\n   (Section 4.1.2.4).  Implementations of\
    \ this specification MUST be\n   prepared to receive subject names containing\
    \ the attribute types\n   required for the issuer field.  Implementations of this\
    \ specification\n   SHOULD be prepared to receive subject names containing the\n\
    \   recommended attribute types for the issuer field.  The syntax and\n   associated\
    \ object identifiers (OIDs) for these attribute types are\n   provided in the\
    \ ASN.1 modules in Appendix A.  Implementations of this\n   specification MAY\
    \ use the comparison rules in Section 7.1 to process\n   unfamiliar attribute\
    \ types (i.e., for name chaining) whose attribute\n   values use one of the encoding\
    \ options from DirectoryString.  Binary\n   comparison should be used when unfamiliar\
    \ attribute types include\n   attribute values with encoding options other than\
    \ those found in\n   DirectoryString.  This allows implementations to process\
    \ certificates\n   with unfamiliar attributes in the subject name.\n   When encoding\
    \ attribute values of type DirectoryString, conforming\n   CAs MUST use PrintableString\
    \ or UTF8String encoding, with the\n   following exceptions:\n      (a)  When\
    \ the subject of the certificate is a CA, the subject\n           field MUST be\
    \ encoded in the same way as it is encoded in the\n           issuer field (Section\
    \ 4.1.2.4) in all certificates issued by\n           the subject CA.  Thus, if\
    \ the subject CA encodes attributes\n           in the issuer fields of certificates\
    \ that it issues using the\n           TeletexString, BMPString, or UniversalString\
    \ encodings, then\n           the subject field of certificates issued to that\
    \ CA MUST use\n           the same encoding.\n      (b)  When the subject of the\
    \ certificate is a CRL issuer, the\n           subject field MUST be encoded in\
    \ the same way as it is\n           encoded in the issuer field (Section 5.1.2.3)\
    \ in all CRLs\n           issued by the subject CRL issuer.\n      (c)  TeletexString,\
    \ BMPString, and UniversalString are included\n           for backward compatibility,\
    \ and SHOULD NOT be used for\n           certificates for new subjects.  However,\
    \ these types MAY be\n           used in certificates where the name was previously\n\
    \           established, including cases in which a new certificate is\n     \
    \      being issued to an existing subject or a certificate is being\n       \
    \    issued to a new subject where the attributes being encoded\n           have\
    \ been previously established in certificates issued to\n           other subjects.\
    \  Certificate users SHOULD be prepared to\n           receive certificates with\
    \ these types.\n   Legacy implementations exist where an electronic mail address\
    \ is\n   embedded in the subject distinguished name as an emailAddress\n   attribute\
    \ [RFC2985].  The attribute value for emailAddress is of type\n   IA5String to\
    \ permit inclusion of the character '@', which is not part\n   of the PrintableString\
    \ character set.  emailAddress attribute values\n   are not case-sensitive (e.g.,\
    \ \"subscriber@example.com\" is the same as\n   \"SUBSCRIBER@EXAMPLE.COM\").\n\
    \   Conforming implementations generating new certificates with\n   electronic\
    \ mail addresses MUST use the rfc822Name in the subject\n   alternative name extension\
    \ (Section 4.2.1.6) to describe such\n   identities.  Simultaneous inclusion of\
    \ the emailAddress attribute in\n   the subject distinguished name to support\
    \ legacy implementations is\n   deprecated but permitted.\n"
- title: 4.1.2.7.  Subject Public Key Info
  contents:
  - "4.1.2.7.  Subject Public Key Info\n   This field is used to carry the public\
    \ key and identify the algorithm\n   with which the key is used (e.g., RSA, DSA,\
    \ or Diffie-Hellman).  The\n   algorithm is identified using the AlgorithmIdentifier\
    \ structure\n   specified in Section 4.1.1.2.  The object identifiers for the\n\
    \   supported algorithms and the methods for encoding the public key\n   materials\
    \ (public key and parameters) are specified in [RFC3279],\n   [RFC4055], and [RFC4491].\n"
- title: 4.1.2.8.  Unique Identifiers
  contents:
  - "4.1.2.8.  Unique Identifiers\n   These fields MUST only appear if the version\
    \ is 2 or 3 (Section\n   4.1.2.1).  These fields MUST NOT appear if the version\
    \ is 1.  The\n   subject and issuer unique identifiers are present in the certificate\n\
    \   to handle the possibility of reuse of subject and/or issuer names\n   over\
    \ time.  This profile RECOMMENDS that names not be reused for\n   different entities\
    \ and that Internet certificates not make use of\n   unique identifiers.  CAs\
    \ conforming to this profile MUST NOT generate\n   certificates with unique identifiers.\
    \  Applications conforming to\n   this profile SHOULD be capable of parsing certificates\
    \ that include\n   unique identifiers, but there are no processing requirements\n\
    \   associated with the unique identifiers.\n"
- title: 4.1.2.9.  Extensions
  contents:
  - "4.1.2.9.  Extensions\n   This field MUST only appear if the version is 3 (Section\
    \ 4.1.2.1).\n   If present, this field is a SEQUENCE of one or more certificate\n\
    \   extensions.  The format and content of certificate extensions in the\n   Internet\
    \ PKI are defined in Section 4.2.\n"
- title: 4.2.  Certificate Extensions
  contents:
  - "4.2.  Certificate Extensions\n   The extensions defined for X.509 v3 certificates\
    \ provide methods for\n   associating additional attributes with users or public\
    \ keys and for\n   managing relationships between CAs.  The X.509 v3 certificate\
    \ format\n   also allows communities to define private extensions to carry\n \
    \  information unique to those communities.  Each extension in a\n   certificate\
    \ is designated as either critical or non-critical.  A\n   certificate-using system\
    \ MUST reject the certificate if it encounters\n   a critical extension it does\
    \ not recognize or a critical extension\n   that contains information that it\
    \ cannot process.  A non-critical\n   extension MAY be ignored if it is not recognized,\
    \ but MUST be\n   processed if it is recognized.  The following sections present\n\
    \   recommended extensions used within Internet certificates and standard\n  \
    \ locations for information.  Communities may elect to use additional\n   extensions;\
    \ however, caution ought to be exercised in adopting any\n   critical extensions\
    \ in certificates that might prevent use in a\n   general context.\n   Each extension\
    \ includes an OID and an ASN.1 structure.  When an\n   extension appears in a\
    \ certificate, the OID appears as the field\n   extnID and the corresponding ASN.1\
    \ DER encoded structure is the value\n   of the octet string extnValue.  A certificate\
    \ MUST NOT include more\n   than one instance of a particular extension.  For\
    \ example, a\n   certificate may contain only one authority key identifier extension\n\
    \   (Section 4.2.1.1).  An extension includes the boolean critical, with\n   a\
    \ default value of FALSE.  The text for each extension specifies the\n   acceptable\
    \ values for the critical field for CAs conforming to this\n   profile.\n   Conforming\
    \ CAs MUST support key identifiers (Sections 4.2.1.1 and\n   4.2.1.2), basic constraints\
    \ (Section 4.2.1.9), key usage (Section\n   4.2.1.3), and certificate policies\
    \ (Section 4.2.1.4) extensions.  If\n   the CA issues certificates with an empty\
    \ sequence for the subject\n   field, the CA MUST support the subject alternative\
    \ name extension\n   (Section 4.2.1.6).  Support for the remaining extensions\
    \ is OPTIONAL.\n   Conforming CAs MAY support extensions that are not identified\
    \ within\n   this specification; certificate issuers are cautioned that marking\n\
    \   such extensions as critical may inhibit interoperability.\n   At a minimum,\
    \ applications conforming to this profile MUST recognize\n   the following extensions:\
    \ key usage (Section 4.2.1.3), certificate\n   policies (Section 4.2.1.4), subject\
    \ alternative name (Section\n   4.2.1.6), basic constraints (Section 4.2.1.9),\
    \ name constraints\n   (Section 4.2.1.10), policy constraints (Section 4.2.1.11),\
    \ extended\n   key usage (Section 4.2.1.12), and inhibit anyPolicy (Section\n\
    \   4.2.1.14).\n   In addition, applications conforming to this profile SHOULD\
    \ recognize\n   the authority and subject key identifier (Sections 4.2.1.1 and\n\
    \   4.2.1.2) and policy mappings (Section 4.2.1.5) extensions.\n"
- title: 4.2.1.  Standard Extensions
  contents:
  - "4.2.1.  Standard Extensions\n   This section identifies standard certificate\
    \ extensions defined in\n   [X.509] for use in the Internet PKI.  Each extension\
    \ is associated\n   with an OID defined in [X.509].  These OIDs are members of\
    \ the id-ce\n   arc, which is defined by the following:\n   id-ce   OBJECT IDENTIFIER\
    \ ::=  { joint-iso-ccitt(2) ds(5) 29 }\n"
- title: 4.2.1.1.  Authority Key Identifier
  contents:
  - "4.2.1.1.  Authority Key Identifier\n   The authority key identifier extension\
    \ provides a means of\n   identifying the public key corresponding to the private\
    \ key used to\n   sign a certificate.  This extension is used where an issuer\
    \ has\n   multiple signing keys (either due to multiple concurrent key pairs or\n\
    \   due to changeover).  The identification MAY be based on either the\n   key\
    \ identifier (the subject key identifier in the issuer's\n   certificate) or the\
    \ issuer name and serial number.\n   The keyIdentifier field of the authorityKeyIdentifier\
    \ extension MUST\n   be included in all certificates generated by conforming CAs\
    \ to\n   facilitate certification path construction.  There is one exception;\n\
    \   where a CA distributes its public key in the form of a \"self-signed\"\n \
    \  certificate, the authority key identifier MAY be omitted.  The\n   signature\
    \ on a self-signed certificate is generated with the private\n   key associated\
    \ with the certificate's subject public key.  (This\n   proves that the issuer\
    \ possesses both the public and private keys.)\n   In this case, the subject and\
    \ authority key identifiers would be\n   identical, but only the subject key identifier\
    \ is needed for\n   certification path building.\n   The value of the keyIdentifier\
    \ field SHOULD be derived from the\n   public key used to verify the certificate's\
    \ signature or a method\n   that generates unique values.  Two common methods\
    \ for generating key\n   identifiers from the public key are described in Section\
    \ 4.2.1.2.\n   Where a key identifier has not been previously established, this\n\
    \   specification RECOMMENDS use of one of these methods for generating\n   keyIdentifiers\
    \ or use of a similar method that uses a different hash\n   algorithm.  Where\
    \ a key identifier has been previously established,\n   the CA SHOULD use the\
    \ previously established identifier.\n   This profile RECOMMENDS support for the\
    \ key identifier method by all\n   certificate users.\n   Conforming CAs MUST\
    \ mark this extension as non-critical.\n   id-ce-authorityKeyIdentifier OBJECT\
    \ IDENTIFIER ::=  { id-ce 35 }\n   AuthorityKeyIdentifier ::= SEQUENCE {\n   \
    \   keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n      authorityCertIssuer\
    \       [1] GeneralNames            OPTIONAL,\n      authorityCertSerialNumber\
    \ [2] CertificateSerialNumber OPTIONAL  }\n   KeyIdentifier ::= OCTET STRING\n"
- title: 4.2.1.2.  Subject Key Identifier
  contents:
  - "4.2.1.2.  Subject Key Identifier\n   The subject key identifier extension provides\
    \ a means of identifying\n   certificates that contain a particular public key.\n\
    \   To facilitate certification path construction, this extension MUST\n   appear\
    \ in all conforming CA certificates, that is, all certificates\n   including the\
    \ basic constraints extension (Section 4.2.1.9) where the\n   value of cA is TRUE.\
    \  In conforming CA certificates, the value of the\n   subject key identifier\
    \ MUST be the value placed in the key identifier\n   field of the authority key\
    \ identifier extension (Section 4.2.1.1) of\n   certificates issued by the subject\
    \ of this certificate.  Applications\n   are not required to verify that key identifiers\
    \ match when performing\n   certification path validation.\n   For CA certificates,\
    \ subject key identifiers SHOULD be derived from\n   the public key or a method\
    \ that generates unique values.  Two common\n   methods for generating key identifiers\
    \ from the public key are:\n      (1) The keyIdentifier is composed of the 160-bit\
    \ SHA-1 hash of the\n           value of the BIT STRING subjectPublicKey (excluding\
    \ the tag,\n           length, and number of unused bits).\n      (2) The keyIdentifier\
    \ is composed of a four-bit type field with\n           the value 0100 followed\
    \ by the least significant 60 bits of\n           the SHA-1 hash of the value\
    \ of the BIT STRING\n           subjectPublicKey (excluding the tag, length, and\
    \ number of\n           unused bits).\n   Other methods of generating unique numbers\
    \ are also acceptable.\n   For end entity certificates, the subject key identifier\
    \ extension\n   provides a means for identifying certificates containing the\n\
    \   particular public key used in an application.  Where an end entity\n   has\
    \ obtained multiple certificates, especially from multiple CAs, the\n   subject\
    \ key identifier provides a means to quickly identify the set\n   of certificates\
    \ containing a particular public key.  To assist\n   applications in identifying\
    \ the appropriate end entity certificate,\n   this extension SHOULD be included\
    \ in all end entity certificates.\n   For end entity certificates, subject key\
    \ identifiers SHOULD be\n   derived from the public key.  Two common methods for\
    \ generating key\n   identifiers from the public key are identified above.\n \
    \  Where a key identifier has not been previously established, this\n   specification\
    \ RECOMMENDS use of one of these methods for generating\n   keyIdentifiers or\
    \ use of a similar method that uses a different hash\n   algorithm.  Where a key\
    \ identifier has been previously established,\n   the CA SHOULD use the previously\
    \ established identifier.\n   Conforming CAs MUST mark this extension as non-critical.\n\
    \   id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }\n   SubjectKeyIdentifier\
    \ ::= KeyIdentifier\n"
- title: 4.2.1.3.  Key Usage
  contents:
  - "4.2.1.3.  Key Usage\n   The key usage extension defines the purpose (e.g., encipherment,\n\
    \   signature, certificate signing) of the key contained in the\n   certificate.\
    \  The usage restriction might be employed when a key that\n   could be used for\
    \ more than one operation is to be restricted.  For\n   example, when an RSA key\
    \ should be used only to verify signatures on\n   objects other than public key\
    \ certificates and CRLs, the\n   digitalSignature and/or nonRepudiation bits would\
    \ be asserted.\n   Likewise, when an RSA key should be used only for key management,\
    \ the\n   keyEncipherment bit would be asserted.\n   Conforming CAs MUST include\
    \ this extension in certificates that\n   contain public keys that are used to\
    \ validate digital signatures on\n   other public key certificates or CRLs.  When\
    \ present, conforming CAs\n   SHOULD mark this extension as critical.\n      id-ce-keyUsage\
    \ OBJECT IDENTIFIER ::=  { id-ce 15 }\n      KeyUsage ::= BIT STRING {\n     \
    \      digitalSignature        (0),\n           nonRepudiation          (1), --\
    \ recent editions of X.509 have\n                                -- renamed this\
    \ bit to contentCommitment\n           keyEncipherment         (2),\n        \
    \   dataEncipherment        (3),\n           keyAgreement            (4),\n  \
    \         keyCertSign             (5),\n           cRLSign                 (6),\n\
    \           encipherOnly            (7),\n           decipherOnly            (8)\
    \ }\n   Bits in the KeyUsage type are used as follows:\n      The digitalSignature\
    \ bit is asserted when the subject public key\n      is used for verifying digital\
    \ signatures, other than signatures on\n      certificates (bit 5) and CRLs (bit\
    \ 6), such as those used in an\n      entity authentication service, a data origin\
    \ authentication\n      service, and/or an integrity service.\n      The nonRepudiation\
    \ bit is asserted when the subject public key is\n      used to verify digital\
    \ signatures, other than signatures on\n      certificates (bit 5) and CRLs (bit\
    \ 6), used to provide a non-\n      repudiation service that protects against\
    \ the signing entity\n      falsely denying some action.  In the case of later\
    \ conflict, a\n      reliable third party may determine the authenticity of the\
    \ signed\n      data.  (Note that recent editions of X.509 have renamed the\n\
    \      nonRepudiation bit to contentCommitment.)\n      The keyEncipherment bit\
    \ is asserted when the subject public key is\n      used for enciphering private\
    \ or secret keys, i.e., for key\n      transport.  For example, this bit shall\
    \ be set when an RSA public\n      key is to be used for encrypting a symmetric\
    \ content-decryption\n      key or an asymmetric private key.\n      The dataEncipherment\
    \ bit is asserted when the subject public key\n      is used for directly enciphering\
    \ raw user data without the use of\n      an intermediate symmetric cipher.  Note\
    \ that the use of this bit\n      is extremely uncommon; almost all applications\
    \ use key transport\n      or key agreement to establish a symmetric key.\n  \
    \    The keyAgreement bit is asserted when the subject public key is\n      used\
    \ for key agreement.  For example, when a Diffie-Hellman key is\n      to be used\
    \ for key management, then this bit is set.\n      The keyCertSign bit is asserted\
    \ when the subject public key is\n      used for verifying signatures on public\
    \ key certificates.  If the\n      keyCertSign bit is asserted, then the cA bit\
    \ in the basic\n      constraints extension (Section 4.2.1.9) MUST also be asserted.\n\
    \      The cRLSign bit is asserted when the subject public key is used\n     \
    \ for verifying signatures on certificate revocation lists (e.g.,\n      CRLs,\
    \ delta CRLs, or ARLs).\n      The meaning of the encipherOnly bit is undefined\
    \ in the absence of\n      the keyAgreement bit.  When the encipherOnly bit is\
    \ asserted and\n      the keyAgreement bit is also set, the subject public key\
    \ may be\n      used only for enciphering data while performing key agreement.\n\
    \      The meaning of the decipherOnly bit is undefined in the absence of\n  \
    \    the keyAgreement bit.  When the decipherOnly bit is asserted and\n      the\
    \ keyAgreement bit is also set, the subject public key may be\n      used only\
    \ for deciphering data while performing key agreement.\n   If the keyUsage extension\
    \ is present, then the subject public key\n   MUST NOT be used to verify signatures\
    \ on certificates or CRLs unless\n   the corresponding keyCertSign or cRLSign\
    \ bit is set.  If the subject\n   public key is only to be used for verifying\
    \ signatures on\n   certificates and/or CRLs, then the digitalSignature and\n\
    \   nonRepudiation bits SHOULD NOT be set.  However, the digitalSignature\n  \
    \ and/or nonRepudiation bits MAY be set in addition to the keyCertSign\n   and/or\
    \ cRLSign bits if the subject public key is to be used to verify\n   signatures\
    \ on certificates and/or CRLs as well as other objects.\n   Combining the nonRepudiation\
    \ bit in the keyUsage certificate\n   extension with other keyUsage bits may have\
    \ security implications\n   depending on the context in which the certificate\
    \ is to be used.\n   Further distinctions between the digitalSignature and nonRepudiation\n\
    \   bits may be provided in specific certificate policies.\n   This profile does\
    \ not restrict the combinations of bits that may be\n   set in an instantiation\
    \ of the keyUsage extension.  However,\n   appropriate values for keyUsage extensions\
    \ for particular algorithms\n   are specified in [RFC3279], [RFC4055], and [RFC4491].\
    \  When the\n   keyUsage extension appears in a certificate, at least one of the\
    \ bits\n   MUST be set to 1.\n"
- title: 4.2.1.4.  Certificate Policies
  contents:
  - "4.2.1.4.  Certificate Policies\n   The certificate policies extension contains\
    \ a sequence of one or more\n   policy information terms, each of which consists\
    \ of an object\n   identifier (OID) and optional qualifiers.  Optional qualifiers,\
    \ which\n   MAY be present, are not expected to change the definition of the\n\
    \   policy.  A certificate policy OID MUST NOT appear more than once in a\n  \
    \ certificate policies extension.\n   In an end entity certificate, these policy\
    \ information terms indicate\n   the policy under which the certificate has been\
    \ issued and the\n   purposes for which the certificate may be used.  In a CA\
    \ certificate,\n   these policy information terms limit the set of policies for\n\
    \   certification paths that include this certificate.  When a CA does\n   not\
    \ wish to limit the set of policies for certification paths that\n   include this\
    \ certificate, it MAY assert the special policy anyPolicy,\n   with a value of\
    \ { 2 5 29 32 0 }.\n   Applications with specific policy requirements are expected\
    \ to have a\n   list of those policies that they will accept and to compare the\n\
    \   policy OIDs in the certificate to that list.  If this extension is\n   critical,\
    \ the path validation software MUST be able to interpret this\n   extension (including\
    \ the optional qualifier), or MUST reject the\n   certificate.\n   To promote\
    \ interoperability, this profile RECOMMENDS that policy\n   information terms\
    \ consist of only an OID.  Where an OID alone is\n   insufficient, this profile\
    \ strongly recommends that the use of\n   qualifiers be limited to those identified\
    \ in this section.  When\n   qualifiers are used with the special policy anyPolicy,\
    \ they MUST be\n   limited to the qualifiers identified in this section.  Only\
    \ those\n   qualifiers returned as a result of path validation are considered.\n\
    \   This specification defines two policy qualifier types for use by\n   certificate\
    \ policy writers and certificate issuers.  The qualifier\n   types are the CPS\
    \ Pointer and User Notice qualifiers.\n   The CPS Pointer qualifier contains a\
    \ pointer to a Certification\n   Practice Statement (CPS) published by the CA.\
    \  The pointer is in the\n   form of a URI.  Processing requirements for this\
    \ qualifier are a\n   local matter.  No action is mandated by this specification\
    \ regardless\n   of the criticality value asserted for the extension.\n   User\
    \ notice is intended for display to a relying party when a\n   certificate is\
    \ used.  Only user notices returned as a result of path\n   validation are intended\
    \ for display to the user.  If a notice is\n   duplicated, only one copy need\
    \ be displayed.  To prevent such\n   duplication, this qualifier SHOULD only be\
    \ present in end entity\n   certificates and CA certificates issued to other organizations.\n\
    \   The user notice has two optional fields: the noticeRef field and the\n   explicitText\
    \ field.  Conforming CAs SHOULD NOT use the noticeRef\n   option.\n      The noticeRef\
    \ field, if used, names an organization and\n      identifies, by number, a particular\
    \ textual statement prepared by\n      that organization.  For example, it might\
    \ identify the\n      organization \"CertsRUs\" and notice number 1.  In a typical\n\
    \      implementation, the application software will have a notice file\n    \
    \  containing the current set of notices for CertsRUs; the\n      application\
    \ will extract the notice text from the file and display\n      it.  Messages\
    \ MAY be multilingual, allowing the software to select\n      the particular language\
    \ message for its own environment.\n      An explicitText field includes the textual\
    \ statement directly in\n      the certificate.  The explicitText field is a string\
    \ with a\n      maximum size of 200 characters.  Conforming CAs SHOULD use the\n\
    \      UTF8String encoding for explicitText, but MAY use IA5String.\n      Conforming\
    \ CAs MUST NOT encode explicitText as VisibleString or\n      BMPString.  The\
    \ explicitText string SHOULD NOT include any control\n      characters (e.g.,\
    \ U+0000 to U+001F and U+007F to U+009F).  When\n      the UTF8String encoding\
    \ is used, all character sequences SHOULD be\n      normalized according to Unicode\
    \ normalization form C (NFC) [NFC].\n   If both the noticeRef and explicitText\
    \ options are included in the\n   one qualifier and if the application software\
    \ can locate the notice\n   text indicated by the noticeRef option, then that\
    \ text SHOULD be\n   displayed; otherwise, the explicitText string SHOULD be displayed.\n\
    \   Note: While the explicitText has a maximum size of 200 characters,\n   some\
    \ non-conforming CAs exceed this limit.  Therefore, certificate\n   users SHOULD\
    \ gracefully handle explicitText with more than 200\n   characters.\n   id-ce-certificatePolicies\
    \ OBJECT IDENTIFIER ::=  { id-ce 32 }\n   anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies\
    \ 0 }\n   certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\n\
    \   PolicyInformation ::= SEQUENCE {\n        policyIdentifier   CertPolicyId,\n\
    \        policyQualifiers   SEQUENCE SIZE (1..MAX) OF\n                      \
    \          PolicyQualifierInfo OPTIONAL }\n   CertPolicyId ::= OBJECT IDENTIFIER\n\
    \   PolicyQualifierInfo ::= SEQUENCE {\n        policyQualifierId  PolicyQualifierId,\n\
    \        qualifier          ANY DEFINED BY policyQualifierId }\n   -- policyQualifierIds\
    \ for Internet policy qualifiers\n   id-qt          OBJECT IDENTIFIER ::=  { id-pkix\
    \ 2 }\n   id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\n   id-qt-unotice\
    \  OBJECT IDENTIFIER ::=  { id-qt 2 }\n   PolicyQualifierId ::= OBJECT IDENTIFIER\
    \ ( id-qt-cps | id-qt-unotice )\n   Qualifier ::= CHOICE {\n        cPSuri   \
    \        CPSuri,\n        userNotice       UserNotice }\n   CPSuri ::= IA5String\n\
    \   UserNotice ::= SEQUENCE {\n        noticeRef        NoticeReference OPTIONAL,\n\
    \        explicitText     DisplayText OPTIONAL }\n   NoticeReference ::= SEQUENCE\
    \ {\n        organization     DisplayText,\n        noticeNumbers    SEQUENCE\
    \ OF INTEGER }\n   DisplayText ::= CHOICE {\n        ia5String        IA5String\
    \      (SIZE (1..200)),\n        visibleString    VisibleString  (SIZE (1..200)),\n\
    \        bmpString        BMPString      (SIZE (1..200)),\n        utf8String\
    \       UTF8String     (SIZE (1..200)) }\n"
- title: 4.2.1.5.  Policy Mappings
  contents:
  - "4.2.1.5.  Policy Mappings\n   This extension is used in CA certificates.  It\
    \ lists one or more\n   pairs of OIDs; each pair includes an issuerDomainPolicy\
    \ and a\n   subjectDomainPolicy.  The pairing indicates the issuing CA considers\n\
    \   its issuerDomainPolicy equivalent to the subject CA's\n   subjectDomainPolicy.\n\
    \   The issuing CA's users might accept an issuerDomainPolicy for certain\n  \
    \ applications.  The policy mapping defines the list of policies\n   associated\
    \ with the subject CA that may be accepted as comparable to\n   the issuerDomainPolicy.\n\
    \   Each issuerDomainPolicy named in the policy mappings extension SHOULD\n  \
    \ also be asserted in a certificate policies extension in the same\n   certificate.\
    \  Policies MUST NOT be mapped either to or from the\n   special value anyPolicy\
    \ (Section 4.2.1.4).\n   In general, certificate policies that appear in the\n\
    \   issuerDomainPolicy field of the policy mappings extension are not\n   considered\
    \ acceptable policies for inclusion in subsequent\n   certificates in the certification\
    \ path.  In some circumstances, a CA\n   may wish to map from one policy (p1)\
    \ to another (p2), but still wants\n   the issuerDomainPolicy (p1) to be considered\
    \ acceptable for inclusion\n   in subsequent certificates.  This may occur, for\
    \ example, if the CA\n   is in the process of transitioning from the use of policy\
    \ p1 to the\n   use of policy p2 and has valid certificates that were issued under\n\
    \   each of the policies.  A CA may indicate this by including two policy\n  \
    \ mappings in the CA certificates that it issues.  Each policy mapping\n   would\
    \ have an issuerDomainPolicy of p1; one policy mapping would have\n   a subjectDomainPolicy\
    \ of p1 and the other would have a\n   subjectDomainPolicy of p2.\n   This extension\
    \ MAY be supported by CAs and/or applications.\n   Conforming CAs SHOULD mark\
    \ this extension as critical.\n   id-ce-policyMappings OBJECT IDENTIFIER ::= \
    \ { id-ce 33 }\n   PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {\n \
    \       issuerDomainPolicy      CertPolicyId,\n        subjectDomainPolicy   \
    \  CertPolicyId }\n"
- title: 4.2.1.6.  Subject Alternative Name
  contents:
  - "4.2.1.6.  Subject Alternative Name\n   The subject alternative name extension\
    \ allows identities to be bound\n   to the subject of the certificate.  These\
    \ identities may be included\n   in addition to or in place of the identity in\
    \ the subject field of\n   the certificate.  Defined options include an Internet\
    \ electronic mail\n   address, a DNS name, an IP address, and a Uniform Resource\
    \ Identifier\n   (URI).  Other options exist, including completely local definitions.\n\
    \   Multiple name forms, and multiple instances of each name form, MAY be\n  \
    \ included.  Whenever such identities are to be bound into a\n   certificate,\
    \ the subject alternative name (or issuer alternative\n   name) extension MUST\
    \ be used; however, a DNS name MAY also be\n   represented in the subject field\
    \ using the domainComponent attribute\n   as described in Section 4.1.2.4.  Note\
    \ that where such names are\n   represented in the subject field implementations\
    \ are not required to\n   convert them into DNS names.\n   Because the subject\
    \ alternative name is considered to be definitively\n   bound to the public key,\
    \ all parts of the subject alternative name\n   MUST be verified by the CA.\n\
    \   Further, if the only subject identity included in the certificate is\n   an\
    \ alternative name form (e.g., an electronic mail address), then the\n   subject\
    \ distinguished name MUST be empty (an empty sequence), and the\n   subjectAltName\
    \ extension MUST be present.  If the subject field\n   contains an empty sequence,\
    \ then the issuing CA MUST include a\n   subjectAltName extension that is marked\
    \ as critical.  When including\n   the subjectAltName extension in a certificate\
    \ that has a non-empty\n   subject distinguished name, conforming CAs SHOULD mark\
    \ the\n   subjectAltName extension as non-critical.\n   When the subjectAltName\
    \ extension contains an Internet mail address,\n   the address MUST be stored\
    \ in the rfc822Name.  The format of an\n   rfc822Name is a \"Mailbox\" as defined\
    \ in Section 4.1.2 of [RFC2821].\n   A Mailbox has the form \"Local-part@Domain\"\
    .  Note that a Mailbox has\n   no phrase (such as a common name) before it, has\
    \ no comment (text\n   surrounded in parentheses) after it, and is not surrounded\
    \ by \"<\" and\n   \">\".  Rules for encoding Internet mail addresses that include\n\
    \   internationalized domain names are specified in Section 7.5.\n   When the\
    \ subjectAltName extension contains an iPAddress, the address\n   MUST be stored\
    \ in the octet string in \"network byte order\", as\n   specified in [RFC791].\
    \  The least significant bit (LSB) of each octet\n   is the LSB of the corresponding\
    \ byte in the network address.  For IP\n   version 4, as specified in [RFC791],\
    \ the octet string MUST contain\n   exactly four octets.  For IP version 6, as\
    \ specified in\n   [RFC2460], the octet string MUST contain exactly sixteen octets.\n\
    \   When the subjectAltName extension contains a domain name system\n   label,\
    \ the domain name MUST be stored in the dNSName (an IA5String).\n   The name MUST\
    \ be in the \"preferred name syntax\", as specified by\n   Section 3.5 of [RFC1034]\
    \ and as modified by Section 2.1 of\n   [RFC1123].  Note that while uppercase\
    \ and lowercase letters are\n   allowed in domain names, no significance is attached\
    \ to the case.  In\n   addition, while the string \" \" is a legal domain name,\
    \ subjectAltName\n   extensions with a dNSName of \" \" MUST NOT be used.  Finally,\
    \ the use\n   of the DNS representation for Internet mail addresses\n   (subscriber.example.com\
    \ instead of subscriber@example.com) MUST NOT\n   be used; such identities are\
    \ to be encoded as rfc822Name.  Rules for\n   encoding internationalized domain\
    \ names are specified in Section 7.2.\n   When the subjectAltName extension contains\
    \ a URI, the name MUST be\n   stored in the uniformResourceIdentifier (an IA5String).\
    \  The name\n   MUST NOT be a relative URI, and it MUST follow the URI syntax\
    \ and\n   encoding rules specified in [RFC3986].  The name MUST include both a\n\
    \   scheme (e.g., \"http\" or \"ftp\") and a scheme-specific-part.  URIs that\n\
    \   include an authority ([RFC3986], Section 3.2) MUST include a fully\n   qualified\
    \ domain name or IP address as the host.  Rules for encoding\n   Internationalized\
    \ Resource Identifiers (IRIs) are specified in\n   Section 7.4.\n   As specified\
    \ in [RFC3986], the scheme name is not case-sensitive\n   (e.g., \"http\" is equivalent\
    \ to \"HTTP\").  The host part, if present,\n   is also not case-sensitive, but\
    \ other components of the scheme-\n   specific-part may be case-sensitive.  Rules\
    \ for comparing URIs are\n   specified in Section 7.4.\n   When the subjectAltName\
    \ extension contains a DN in the directoryName,\n   the encoding rules are the\
    \ same as those specified for the issuer\n   field in Section 4.1.2.4.  The DN\
    \ MUST be unique for each subject\n   entity certified by the one CA as defined\
    \ by the issuer field.  A CA\n   MAY issue more than one certificate with the\
    \ same DN to the same\n   subject entity.\n   The subjectAltName MAY carry additional\
    \ name types through the use of\n   the otherName field.  The format and semantics\
    \ of the name are\n   indicated through the OBJECT IDENTIFIER in the type-id field.\
    \  The\n   name itself is conveyed as value field in otherName.  For example,\n\
    \   Kerberos [RFC4120] format names can be encoded into the otherName,\n   using\
    \ a Kerberos 5 principal name OID and a SEQUENCE of the Realm and\n   the PrincipalName.\n\
    \   Subject alternative names MAY be constrained in the same manner as\n   subject\
    \ distinguished names using the name constraints extension as\n   described in\
    \ Section 4.2.1.10.\n   If the subjectAltName extension is present, the sequence\
    \ MUST contain\n   at least one entry.  Unlike the subject field, conforming CAs\
    \ MUST\n   NOT issue certificates with subjectAltNames containing empty\n   GeneralName\
    \ fields.  For example, an rfc822Name is represented as an\n   IA5String.  While\
    \ an empty string is a valid IA5String, such an\n   rfc822Name is not permitted\
    \ by this profile.  The behavior of clients\n   that encounter such a certificate\
    \ when processing a certification\n   path is not defined by this profile.\n \
    \  Finally, the semantics of subject alternative names that include\n   wildcard\
    \ characters (e.g., as a placeholder for a set of names) are\n   not addressed\
    \ by this specification.  Applications with specific\n   requirements MAY use\
    \ such names, but they must define the semantics.\n   id-ce-subjectAltName OBJECT\
    \ IDENTIFIER ::=  { id-ce 17 }\n   SubjectAltName ::= GeneralNames\n   GeneralNames\
    \ ::= SEQUENCE SIZE (1..MAX) OF GeneralName\n   GeneralName ::= CHOICE {\n   \
    \     otherName                       [0]     OtherName,\n        rfc822Name \
    \                     [1]     IA5String,\n        dNSName                    \
    \     [2]     IA5String,\n        x400Address                     [3]     ORAddress,\n\
    \        directoryName                   [4]     Name,\n        ediPartyName \
    \                   [5]     EDIPartyName,\n        uniformResourceIdentifier \
    \      [6]     IA5String,\n        iPAddress                       [7]     OCTET\
    \ STRING,\n        registeredID                    [8]     OBJECT IDENTIFIER }\n\
    \   OtherName ::= SEQUENCE {\n        type-id    OBJECT IDENTIFIER,\n        value\
    \      [0] EXPLICIT ANY DEFINED BY type-id }\n   EDIPartyName ::= SEQUENCE {\n\
    \        nameAssigner            [0]     DirectoryString OPTIONAL,\n        partyName\
    \               [1]     DirectoryString }\n"
- title: 4.2.1.7.  Issuer Alternative Name
  contents:
  - "4.2.1.7.  Issuer Alternative Name\n   As with Section 4.2.1.6, this extension\
    \ is used to associate Internet\n   style identities with the certificate issuer.\
    \  Issuer alternative\n   name MUST be encoded as in 4.2.1.6.  Issuer alternative\
    \ names are not\n   processed as part of the certification path validation algorithm\
    \ in\n   Section 6.  (That is, issuer alternative names are not used in name\n\
    \   chaining and name constraints are not enforced.)\n   Where present, conforming\
    \ CAs SHOULD mark this extension as non-\n   critical.\n   id-ce-issuerAltName\
    \ OBJECT IDENTIFIER ::=  { id-ce 18 }\n   IssuerAltName ::= GeneralNames\n"
- title: 4.2.1.8.  Subject Directory Attributes
  contents:
  - "4.2.1.8.  Subject Directory Attributes\n   The subject directory attributes extension\
    \ is used to convey\n   identification attributes (e.g., nationality) of the subject.\
    \  The\n   extension is defined as a sequence of one or more attributes.\n   Conforming\
    \ CAs MUST mark this extension as non-critical.\n   id-ce-subjectDirectoryAttributes\
    \ OBJECT IDENTIFIER ::=  { id-ce 9 }\n   SubjectDirectoryAttributes ::= SEQUENCE\
    \ SIZE (1..MAX) OF Attribute\n"
- title: 4.2.1.9.  Basic Constraints
  contents:
  - "4.2.1.9.  Basic Constraints\n   The basic constraints extension identifies whether\
    \ the subject of the\n   certificate is a CA and the maximum depth of valid certification\n\
    \   paths that include this certificate.\n   The cA boolean indicates whether\
    \ the certified public key may be used\n   to verify certificate signatures. \
    \ If the cA boolean is not asserted,\n   then the keyCertSign bit in the key usage\
    \ extension MUST NOT be\n   asserted.  If the basic constraints extension is not\
    \ present in a\n   version 3 certificate, or the extension is present but the\
    \ cA boolean\n   is not asserted, then the certified public key MUST NOT be used\
    \ to\n   verify certificate signatures.\n   The pathLenConstraint field is meaningful\
    \ only if the cA boolean is\n   asserted and the key usage extension, if present,\
    \ asserts the\n   keyCertSign bit (Section 4.2.1.3).  In this case, it gives the\n\
    \   maximum number of non-self-issued intermediate certificates that may\n   follow\
    \ this certificate in a valid certification path.  (Note: The\n   last certificate\
    \ in the certification path is not an intermediate\n   certificate, and is not\
    \ included in this limit.  Usually, the last\n   certificate is an end entity\
    \ certificate, but it can be a CA\n   certificate.)  A pathLenConstraint of zero\
    \ indicates that no non-\n   self-issued intermediate CA certificates may follow\
    \ in a valid\n   certification path.  Where it appears, the pathLenConstraint\
    \ field\n   MUST be greater than or equal to zero.  Where pathLenConstraint does\n\
    \   not appear, no limit is imposed.\n   Conforming CAs MUST include this extension\
    \ in all CA certificates\n   that contain public keys used to validate digital\
    \ signatures on\n   certificates and MUST mark the extension as critical in such\n\
    \   certificates.  This extension MAY appear as a critical or non-\n   critical\
    \ extension in CA certificates that contain public keys used\n   exclusively for\
    \ purposes other than validating digital signatures on\n   certificates.  Such\
    \ CA certificates include ones that contain public\n   keys used exclusively for\
    \ validating digital signatures on CRLs and\n   ones that contain key management\
    \ public keys used with certificate\n   enrollment protocols.  This extension\
    \ MAY appear as a critical or\n   non-critical extension in end entity certificates.\n\
    \   CAs MUST NOT include the pathLenConstraint field unless the cA\n   boolean\
    \ is asserted and the key usage extension asserts the\n   keyCertSign bit.\n \
    \  id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }\n   BasicConstraints\
    \ ::= SEQUENCE {\n        cA                      BOOLEAN DEFAULT FALSE,\n   \
    \     pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\n"
- title: 4.2.1.10.  Name Constraints
  contents:
  - "4.2.1.10.  Name Constraints\n   The name constraints extension, which MUST be\
    \ used only in a CA\n   certificate, indicates a name space within which all subject\
    \ names in\n   subsequent certificates in a certification path MUST be located.\n\
    \   Restrictions apply to the subject distinguished name and apply to\n   subject\
    \ alternative names.  Restrictions apply only when the\n   specified name form\
    \ is present.  If no name of the type is in the\n   certificate, the certificate\
    \ is acceptable.\n   Name constraints are not applied to self-issued certificates\
    \ (unless\n   the certificate is the final certificate in the path).  (This could\n\
    \   prevent CAs that use name constraints from employing self-issued\n   certificates\
    \ to implement key rollover.)\n   Restrictions are defined in terms of permitted\
    \ or excluded name\n   subtrees.  Any name matching a restriction in the excludedSubtrees\n\
    \   field is invalid regardless of information appearing in the\n   permittedSubtrees.\
    \  Conforming CAs MUST mark this extension as\n   critical and SHOULD NOT impose\
    \ name constraints on the x400Address,\n   ediPartyName, or registeredID name\
    \ forms.  Conforming CAs MUST NOT\n   issue certificates where name constraints\
    \ is an empty sequence.  That\n   is, either the permittedSubtrees field or the\
    \ excludedSubtrees MUST\n   be present.\n   Applications conforming to this profile\
    \ MUST be able to process name\n   constraints that are imposed on the directoryName\
    \ name form and\n   SHOULD be able to process name constraints that are imposed\
    \ on the\n   rfc822Name, uniformResourceIdentifier, dNSName, and iPAddress name\n\
    \   forms.  If a name constraints extension that is marked as critical\n   imposes\
    \ constraints on a particular name form, and an instance of\n   that name form\
    \ appears in the subject field or subjectAltName\n   extension of a subsequent\
    \ certificate, then the application MUST\n   either process the constraint or\
    \ reject the certificate.\n   Within this profile, the minimum and maximum fields\
    \ are not used with\n   any name forms, thus, the minimum MUST be zero, and maximum\
    \ MUST be\n   absent.  However, if an application encounters a critical name\n\
    \   constraints extension that specifies other values for minimum or\n   maximum\
    \ for a name form that appears in a subsequent certificate, the\n   application\
    \ MUST either process these fields or reject the\n   certificate.\n   For URIs,\
    \ the constraint applies to the host part of the name.  The\n   constraint MUST\
    \ be specified as a fully qualified domain name and MAY\n   specify a host or\
    \ a domain.  Examples would be \"host.example.com\" and\n   \".example.com\".\
    \  When the constraint begins with a period, it MAY be\n   expanded with one or\
    \ more labels.  That is, the constraint\n   \".example.com\" is satisfied by both\
    \ host.example.com and\n   my.host.example.com.  However, the constraint \".example.com\"\
    \ is not\n   satisfied by \"example.com\".  When the constraint does not begin\
    \ with\n   a period, it specifies a host.  If a constraint is applied to the\n\
    \   uniformResourceIdentifier name form and a subsequent certificate\n   includes\
    \ a subjectAltName extension with a uniformResourceIdentifier\n   that does not\
    \ include an authority component with a host name\n   specified as a fully qualified\
    \ domain name (e.g., if the URI either\n   does not include an authority component\
    \ or includes an authority\n   component in which the host name is specified as\
    \ an IP address), then\n   the application MUST reject the certificate.\n   A\
    \ name constraint for Internet mail addresses MAY specify a\n   particular mailbox,\
    \ all addresses at a particular host, or all\n   mailboxes in a domain.  To indicate\
    \ a particular mailbox, the\n   constraint is the complete mail address.  For\
    \ example,\n   \"root@example.com\" indicates the root mailbox on the host\n \
    \  \"example.com\".  To indicate all Internet mail addresses on a\n   particular\
    \ host, the constraint is specified as the host name.  For\n   example, the constraint\
    \ \"example.com\" is satisfied by any mail\n   address at the host \"example.com\"\
    .  To specify any address within a\n   domain, the constraint is specified with\
    \ a leading period (as with\n   URIs).  For example, \".example.com\" indicates\
    \ all the Internet mail\n   addresses in the domain \"example.com\", but not Internet\
    \ mail\n   addresses on the host \"example.com\".\n   DNS name restrictions are\
    \ expressed as host.example.com.  Any DNS\n   name that can be constructed by\
    \ simply adding zero or more labels to\n   the left-hand side of the name satisfies\
    \ the name constraint.  For\n   example, www.host.example.com would satisfy the\
    \ constraint but\n   host1.example.com would not.\n   Legacy implementations exist\
    \ where an electronic mail address is\n   embedded in the subject distinguished\
    \ name in an attribute of type\n   emailAddress (Section 4.1.2.6).  When constraints\
    \ are imposed on the\n   rfc822Name name form, but the certificate does not include\
    \ a subject\n   alternative name, the rfc822Name constraint MUST be applied to\
    \ the\n   attribute of type emailAddress in the subject distinguished name.\n\
    \   The ASN.1 syntax for emailAddress and the corresponding OID are\n   supplied\
    \ in Appendix A.\n   Restrictions of the form directoryName MUST be applied to\
    \ the subject\n   field in the certificate (when the certificate includes a non-empty\n\
    \   subject field) and to any names of type directoryName in the\n   subjectAltName\
    \ extension.  Restrictions of the form x400Address MUST\n   be applied to any\
    \ names of type x400Address in the subjectAltName\n   extension.\n   When applying\
    \ restrictions of the form directoryName, an\n   implementation MUST compare DN\
    \ attributes.  At a minimum,\n   implementations MUST perform the DN comparison\
    \ rules specified in\n   Section 7.1.  CAs issuing certificates with a restriction\
    \ of the form\n   directoryName SHOULD NOT rely on implementation of the full\
    \ ISO DN\n   name comparison algorithm.  This implies name restrictions MUST be\n\
    \   stated identically to the encoding used in the subject field or\n   subjectAltName\
    \ extension.\n   The syntax of iPAddress MUST be as described in Section 4.2.1.6\
    \ with\n   the following additions specifically for name constraints.  For IPv4\n\
    \   addresses, the iPAddress field of GeneralName MUST contain eight (8)\n   octets,\
    \ encoded in the style of RFC 4632 (CIDR) to represent an\n   address range [RFC4632].\
    \  For IPv6 addresses, the iPAddress field\n   MUST contain 32 octets similarly\
    \ encoded.  For example, a name\n   constraint for \"class C\" subnet 192.0.2.0\
    \ is represented as the\n   octets C0 00 02 00 FF FF FF 00, representing the CIDR\
    \ notation\n   192.0.2.0/24 (mask 255.255.255.0).\n   Additional rules for encoding\
    \ and processing name constraints are\n   specified in Section 7.\n   The syntax\
    \ and semantics for name constraints for otherName,\n   ediPartyName, and registeredID\
    \ are not defined by this specification,\n   however, syntax and semantics for\
    \ name constraints for other name\n   forms may be specified in other documents.\n\
    \      id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }\n      NameConstraints\
    \ ::= SEQUENCE {\n           permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n\
    \           excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n     \
    \ GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n      GeneralSubtree\
    \ ::= SEQUENCE {\n           base                    GeneralName,\n          \
    \ minimum         [0]     BaseDistance DEFAULT 0,\n           maximum        \
    \ [1]     BaseDistance OPTIONAL }\n      BaseDistance ::= INTEGER (0..MAX)\n"
- title: 4.2.1.11.  Policy Constraints
  contents:
  - "4.2.1.11.  Policy Constraints\n   The policy constraints extension can be used\
    \ in certificates issued\n   to CAs.  The policy constraints extension constrains\
    \ path validation\n   in two ways.  It can be used to prohibit policy mapping\
    \ or require\n   that each certificate in a path contain an acceptable policy\n\
    \   identifier.\n   If the inhibitPolicyMapping field is present, the value indicates\
    \ the\n   number of additional certificates that may appear in the path before\n\
    \   policy mapping is no longer permitted.  For example, a value of one\n   indicates\
    \ that policy mapping may be processed in certificates issued\n   by the subject\
    \ of this certificate, but not in additional\n   certificates in the path.\n \
    \  If the requireExplicitPolicy field is present, the value of\n   requireExplicitPolicy\
    \ indicates the number of additional certificates\n   that may appear in the path\
    \ before an explicit policy is required for\n   the entire path.  When an explicit\
    \ policy is required, it is\n   necessary for all certificates in the path to\
    \ contain an acceptable\n   policy identifier in the certificate policies extension.\
    \  An\n   acceptable policy identifier is the identifier of a policy required\n\
    \   by the user of the certification path or the identifier of a policy\n   that\
    \ has been declared equivalent through policy mapping.\n   Conforming applications\
    \ MUST be able to process the\n   requireExplicitPolicy field and SHOULD be able\
    \ to process the\n   inhibitPolicyMapping field.  Applications that support the\n\
    \   inhibitPolicyMapping field MUST also implement support for the\n   policyMappings\
    \ extension.  If the policyConstraints extension is\n   marked as critical and\
    \ the inhibitPolicyMapping field is present,\n   applications that do not implement\
    \ support for the\n   inhibitPolicyMapping field MUST reject the certificate.\n\
    \   Conforming CAs MUST NOT issue certificates where policy constraints\n   is\
    \ an empty sequence.  That is, either the inhibitPolicyMapping field\n   or the\
    \ requireExplicitPolicy field MUST be present.  The behavior of\n   clients that\
    \ encounter an empty policy constraints field is not\n   addressed in this profile.\n\
    \   Conforming CAs MUST mark this extension as critical.\n   id-ce-policyConstraints\
    \ OBJECT IDENTIFIER ::=  { id-ce 36 }\n   PolicyConstraints ::= SEQUENCE {\n \
    \       requireExplicitPolicy           [0] SkipCerts OPTIONAL,\n        inhibitPolicyMapping\
    \            [1] SkipCerts OPTIONAL }\n   SkipCerts ::= INTEGER (0..MAX)\n"
- title: 4.2.1.12.  Extended Key Usage
  contents:
  - "4.2.1.12.  Extended Key Usage\n   This extension indicates one or more purposes\
    \ for which the certified\n   public key may be used, in addition to or in place\
    \ of the basic\n   purposes indicated in the key usage extension.  In general,\
    \ this\n   extension will appear only in end entity certificates.  This\n   extension\
    \ is defined as follows:\n   id-ce-extKeyUsage OBJECT IDENTIFIER ::= { id-ce 37\
    \ }\n   ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\n   KeyPurposeId\
    \ ::= OBJECT IDENTIFIER\n   Key purposes may be defined by any organization with\
    \ a need.  Object\n   identifiers used to identify key purposes MUST be assigned\
    \ in\n   accordance with IANA or ITU-T Recommendation X.660 [X.660].\n   This\
    \ extension MAY, at the option of the certificate issuer, be\n   either critical\
    \ or non-critical.\n   If the extension is present, then the certificate MUST\
    \ only be used\n   for one of the purposes indicated.  If multiple purposes are\n\
    \   indicated the application need not recognize all purposes indicated,\n   as\
    \ long as the intended purpose is present.  Certificate using\n   applications\
    \ MAY require that the extended key usage extension be\n   present and that a\
    \ particular purpose be indicated in order for the\n   certificate to be acceptable\
    \ to that application.\n   If a CA includes extended key usages to satisfy such\
    \ applications,\n   but does not wish to restrict usages of the key, the CA can\
    \ include\n   the special KeyPurposeId anyExtendedKeyUsage in addition to the\n\
    \   particular key purposes required by the applications.  Conforming CAs\n  \
    \ SHOULD NOT mark this extension as critical if the anyExtendedKeyUsage\n   KeyPurposeId\
    \ is present.  Applications that require the presence of a\n   particular purpose\
    \ MAY reject certificates that include the\n   anyExtendedKeyUsage OID but not\
    \ the particular OID expected for the\n   application.\n   If a certificate contains\
    \ both a key usage extension and an extended\n   key usage extension, then both\
    \ extensions MUST be processed\n   independently and the certificate MUST only\
    \ be used for a purpose\n   consistent with both extensions.  If there is no purpose\
    \ consistent\n   with both extensions, then the certificate MUST NOT be used for\
    \ any\n   purpose.\n   The following key usage purposes are defined:\n   anyExtendedKeyUsage\
    \ OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }\n   id-kp OBJECT IDENTIFIER ::=\
    \ { id-pkix 3 }\n   id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp\
    \ 1 }\n   -- TLS WWW server authentication\n   -- Key usage bits that may be consistent:\
    \ digitalSignature,\n   -- keyEncipherment or keyAgreement\n   id-kp-clientAuth\
    \             OBJECT IDENTIFIER ::= { id-kp 2 }\n   -- TLS WWW client authentication\n\
    \   -- Key usage bits that may be consistent: digitalSignature\n   -- and/or keyAgreement\n\
    \   id-kp-codeSigning             OBJECT IDENTIFIER ::= { id-kp 3 }\n   -- Signing\
    \ of downloadable executable code\n   -- Key usage bits that may be consistent:\
    \ digitalSignature\n   id-kp-emailProtection         OBJECT IDENTIFIER ::= { id-kp\
    \ 4 }\n   -- Email protection\n   -- Key usage bits that may be consistent: digitalSignature,\n\
    \   -- nonRepudiation, and/or (keyEncipherment or keyAgreement)\n   id-kp-timeStamping\
    \            OBJECT IDENTIFIER ::= { id-kp 8 }\n   -- Binding the hash of an object\
    \ to a time\n   -- Key usage bits that may be consistent: digitalSignature\n \
    \  -- and/or nonRepudiation\n   id-kp-OCSPSigning            OBJECT IDENTIFIER\
    \ ::= { id-kp 9 }\n   -- Signing OCSP responses\n   -- Key usage bits that may\
    \ be consistent: digitalSignature\n   -- and/or nonRepudiation\n"
- title: 4.2.1.13.  CRL Distribution Points
  contents:
  - "4.2.1.13.  CRL Distribution Points\n   The CRL distribution points extension\
    \ identifies how CRL information\n   is obtained.  The extension SHOULD be non-critical,\
    \ but this profile\n   RECOMMENDS support for this extension by CAs and applications.\n\
    \   Further discussion of CRL management is contained in Section 5.\n   The cRLDistributionPoints\
    \ extension is a SEQUENCE of\n   DistributionPoint.  A DistributionPoint consists\
    \ of three fields,\n   each of which is optional: distributionPoint, reasons,\
    \ and cRLIssuer.\n   While each of these fields is optional, a DistributionPoint\
    \ MUST NOT\n   consist of only the reasons field; either distributionPoint or\n\
    \   cRLIssuer MUST be present.  If the certificate issuer is not the CRL\n   issuer,\
    \ then the cRLIssuer field MUST be present and contain the Name\n   of the CRL\
    \ issuer.  If the certificate issuer is also the CRL issuer,\n   then conforming\
    \ CAs MUST omit the cRLIssuer field and MUST include\n   the distributionPoint\
    \ field.\n   When the distributionPoint field is present, it contains either a\n\
    \   SEQUENCE of general names or a single value, nameRelativeToCRLIssuer.\n  \
    \ If the DistributionPointName contains multiple values, each name\n   describes\
    \ a different mechanism to obtain the same CRL.  For example,\n   the same CRL\
    \ could be available for retrieval through both LDAP and\n   HTTP.\n   If the\
    \ distributionPoint field contains a directoryName, the entry\n   for that directoryName\
    \ contains the current CRL for the associated\n   reasons and the CRL is issued\
    \ by the associated cRLIssuer.  The CRL\n   may be stored in either the certificateRevocationList\
    \ or\n   authorityRevocationList attribute.  The CRL is to be obtained by the\n\
    \   application from whatever directory server is locally configured.\n   The\
    \ protocol the application uses to access the directory (e.g., DAP\n   or LDAP)\
    \ is a local matter.\n   If the DistributionPointName contains a general name\
    \ of type URI, the\n   following semantics MUST be assumed: the URI is a pointer\
    \ to the\n   current CRL for the associated reasons and will be issued by the\n\
    \   associated cRLIssuer.  When the HTTP or FTP URI scheme is used, the\n   URI\
    \ MUST point to a single DER encoded CRL as specified in\n   [RFC2585].  HTTP\
    \ server implementations accessed via the URI SHOULD\n   specify the media type\
    \ application/pkix-crl in the content-type\n   header field of the response. \
    \ When the LDAP URI scheme [RFC4516] is\n   used, the URI MUST include a <dn>\
    \ field containing the distinguished\n   name of the entry holding the CRL, MUST\
    \ include a single <attrdesc>\n   that contains an appropriate attribute description\
    \ for the attribute\n   that holds the CRL [RFC4523], and SHOULD include a <host>\n\
    \   (e.g., <ldap://ldap.example.com/cn=example%20CA,dc=example,dc=com?\n   certificateRevocationList;binary>).\
    \  Omitting the <host> (e.g.,\n   <ldap:///cn=CA,dc=example,dc=com?authorityRevocationList;binary>)\
    \ has\n   the effect of relying on whatever a priori knowledge the client might\n\
    \   have to contact an appropriate server.  When present,\n   DistributionPointName\
    \ SHOULD include at least one LDAP or HTTP URI.\n   If the DistributionPointName\
    \ contains the single value\n   nameRelativeToCRLIssuer, the value provides a\
    \ distinguished name\n   fragment.  The fragment is appended to the X.500 distinguished\
    \ name\n   of the CRL issuer to obtain the distribution point name.  If the\n\
    \   cRLIssuer field in the DistributionPoint is present, then the name\n   fragment\
    \ is appended to the distinguished name that it contains;\n   otherwise, the name\
    \ fragment is appended to the certificate issuer\n   distinguished name.  Conforming\
    \ CAs SHOULD NOT use\n   nameRelativeToCRLIssuer to specify distribution point\
    \ names.  The\n   DistributionPointName MUST NOT use the nameRelativeToCRLIssuer\n\
    \   alternative when cRLIssuer contains more than one distinguished name.\n  \
    \ If the DistributionPoint omits the reasons field, the CRL MUST\n   include revocation\
    \ information for all reasons.  This profile\n   RECOMMENDS against segmenting\
    \ CRLs by reason code.  When a conforming\n   CA includes a cRLDistributionPoints\
    \ extension in a certificate, it\n   MUST include at least one DistributionPoint\
    \ that points to a CRL that\n   covers the certificate for all reasons.\n   The\
    \ cRLIssuer identifies the entity that signs and issues the CRL.\n   If present,\
    \ the cRLIssuer MUST only contain the distinguished name\n   (DN) from the issuer\
    \ field of the CRL to which the DistributionPoint\n   is pointing.  The encoding\
    \ of the name in the cRLIssuer field MUST be\n   exactly the same as the encoding\
    \ in issuer field of the CRL.  If the\n   cRLIssuer field is included and the\
    \ DN in that field does not\n   correspond to an X.500 or LDAP directory entry\
    \ where CRL is located,\n   then conforming CAs MUST include the distributionPoint\
    \ field.\n   id-ce-cRLDistributionPoints OBJECT IDENTIFIER ::=  { id-ce 31 }\n\
    \   CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\n  \
    \ DistributionPoint ::= SEQUENCE {\n        distributionPoint       [0]     DistributionPointName\
    \ OPTIONAL,\n        reasons                 [1]     ReasonFlags OPTIONAL,\n \
    \       cRLIssuer               [2]     GeneralNames OPTIONAL }\n   DistributionPointName\
    \ ::= CHOICE {\n        fullName                [0]     GeneralNames,\n      \
    \  nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\n   ReasonFlags\
    \ ::= BIT STRING {\n        unused                  (0),\n        keyCompromise\
    \           (1),\n        cACompromise            (2),\n        affiliationChanged\
    \      (3),\n        superseded              (4),\n        cessationOfOperation\
    \    (5),\n        certificateHold         (6),\n        privilegeWithdrawn  \
    \    (7),\n        aACompromise            (8) }\n"
- title: 4.2.1.14.  Inhibit anyPolicy
  contents:
  - "4.2.1.14.  Inhibit anyPolicy\n   The inhibit anyPolicy extension can be used\
    \ in certificates issued to\n   CAs.  The inhibit anyPolicy extension indicates\
    \ that the special\n   anyPolicy OID, with the value { 2 5 29 32 0 }, is not considered\
    \ an\n   explicit match for other certificate policies except when it appears\n\
    \   in an intermediate self-issued CA certificate.  The value indicates\n   the\
    \ number of additional non-self-issued certificates that may appear\n   in the\
    \ path before anyPolicy is no longer permitted.  For example, a\n   value of one\
    \ indicates that anyPolicy may be processed in\n   certificates issued by the\
    \ subject of this certificate, but not in\n   additional certificates in the path.\n\
    \   Conforming CAs MUST mark this extension as critical.\n   id-ce-inhibitAnyPolicy\
    \ OBJECT IDENTIFIER ::=  { id-ce 54 }\n   InhibitAnyPolicy ::= SkipCerts\n   SkipCerts\
    \ ::= INTEGER (0..MAX)\n"
- title: 4.2.1.15.  Freshest CRL (a.k.a. Delta CRL Distribution Point)
  contents:
  - "4.2.1.15.  Freshest CRL (a.k.a. Delta CRL Distribution Point)\n   The freshest\
    \ CRL extension identifies how delta CRL information is\n   obtained.  The extension\
    \ MUST be marked as non-critical by conforming\n   CAs.  Further discussion of\
    \ CRL management is contained in Section 5.\n   The same syntax is used for this\
    \ extension and the\n   cRLDistributionPoints extension, and is described in Section\n\
    \   4.2.1.13.  The same conventions apply to both extensions.\n   id-ce-freshestCRL\
    \ OBJECT IDENTIFIER ::=  { id-ce 46 }\n   FreshestCRL ::= CRLDistributionPoints\n"
- title: 4.2.2.  Private Internet Extensions
  contents:
  - "4.2.2.  Private Internet Extensions\n   This section defines two extensions for\
    \ use in the Internet Public\n   Key Infrastructure.  These extensions may be\
    \ used to direct\n   applications to on-line information about the issuer or the\
    \ subject.\n   Each extension contains a sequence of access methods and access\n\
    \   locations.  The access method is an object identifier that indicates\n   the\
    \ type of information that is available.  The access location is a\n   GeneralName\
    \ that implicitly specifies the location and format of the\n   information and\
    \ the method for obtaining the information.\n   Object identifiers are defined\
    \ for the private extensions.  The\n   object identifiers associated with the\
    \ private extensions are defined\n   under the arc id-pe within the arc id-pkix.\
    \  Any future extensions\n   defined for the Internet PKI are also expected to\
    \ be defined under\n   the arc id-pe.\n      id-pkix  OBJECT IDENTIFIER  ::=\n\
    \               { iso(1) identified-organization(3) dod(6) internet(1)\n     \
    \                  security(5) mechanisms(5) pkix(7) }\n      id-pe  OBJECT IDENTIFIER\
    \  ::=  { id-pkix 1 }\n"
- title: 4.2.2.1.  Authority Information Access
  contents:
  - "4.2.2.1.  Authority Information Access\n   The authority information access extension\
    \ indicates how to access\n   information and services for the issuer of the certificate\
    \ in which\n   the extension appears.  Information and services may include on-line\n\
    \   validation services and CA policy data.  (The location of CRLs is not\n  \
    \ specified in this extension; that information is provided by the\n   cRLDistributionPoints\
    \ extension.)  This extension may be included in\n   end entity or CA certificates.\
    \  Conforming CAs MUST mark this\n   extension as non-critical.\n   id-pe-authorityInfoAccess\
    \ OBJECT IDENTIFIER ::= { id-pe 1 }\n   AuthorityInfoAccessSyntax  ::=\n     \
    \      SEQUENCE SIZE (1..MAX) OF AccessDescription\n   AccessDescription  ::=\
    \  SEQUENCE {\n           accessMethod          OBJECT IDENTIFIER,\n         \
    \  accessLocation        GeneralName  }\n   id-ad OBJECT IDENTIFIER ::= { id-pkix\
    \ 48 }\n   id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }\n   id-ad-ocsp OBJECT\
    \ IDENTIFIER ::= { id-ad 1 }\n   Each entry in the sequence AuthorityInfoAccessSyntax\
    \ describes the\n   format and location of additional information provided by\
    \ the issuer\n   of the certificate in which this extension appears.  The type\
    \ and\n   format of the information are specified by the accessMethod field;\n\
    \   the accessLocation field specifies the location of the information.\n   The\
    \ retrieval mechanism may be implied by the accessMethod or\n   specified by accessLocation.\n\
    \   This profile defines two accessMethod OIDs: id-ad-caIssuers and\n   id-ad-ocsp.\n\
    \   In a public key certificate, the id-ad-caIssuers OID is used when the\n  \
    \ additional information lists certificates that were issued to the CA\n   that\
    \ issued the certificate containing this extension.  The\n   referenced CA issuers\
    \ description is intended to aid certificate\n   users in the selection of a certification\
    \ path that terminates at a\n   point trusted by the certificate user.\n   When\
    \ id-ad-caIssuers appears as accessMethod, the accessLocation\n   field describes\
    \ the referenced description server and the access\n   protocol to obtain the\
    \ referenced description.  The accessLocation\n   field is defined as a GeneralName,\
    \ which can take several forms.\n   When the accessLocation is a directoryName,\
    \ the information is to be\n   obtained by the application from whatever directory\
    \ server is locally\n   configured.  The entry for the directoryName contains\
    \ CA certificates\n   in the crossCertificatePair and/or cACertificate attributes\
    \ as\n   specified in [RFC4523].  The protocol that application uses to access\n\
    \   the directory (e.g., DAP or LDAP) is a local matter.\n   Where the information\
    \ is available via LDAP, the accessLocation\n   SHOULD be a uniformResourceIdentifier.\
    \  The LDAP URI [RFC4516] MUST\n   include a <dn> field containing the distinguished\
    \ name of the entry\n   holding the certificates, MUST include an <attributes>\
    \ field that\n   lists appropriate attribute descriptions for the attributes that\
    \ hold\n   the DER encoded certificates or cross-certificate pairs [RFC4523],\n\
    \   and SHOULD include a <host> (e.g., <ldap://ldap.example.com/cn=CA,\n   dc=example,dc=com?cACertificate;binary,crossCertificatePair;binary>).\n\
    \   Omitting the <host> (e.g., <ldap:///cn=exampleCA,dc=example,dc=com?\n   cACertificate;binary>)\
    \ has the effect of relying on whatever a priori\n   knowledge the client might\
    \ have to contact an appropriate server.\n   Where the information is available\
    \ via HTTP or FTP, accessLocation\n   MUST be a uniformResourceIdentifier and\
    \ the URI MUST point to either\n   a single DER encoded certificate as specified\
    \ in [RFC2585] or a\n   collection of certificates in a BER or DER encoded \"\
    certs-only\" CMS\n   message as specified in [RFC2797].\n   Conforming applications\
    \ that support HTTP or FTP for accessing\n   certificates MUST be able to accept\
    \ individual DER encoded\n   certificates and SHOULD be able to accept \"certs-only\"\
    \ CMS messages.\n   HTTP server implementations accessed via the URI SHOULD specify\
    \ the\n   media type application/pkix-cert [RFC2585] in the content-type header\n\
    \   field of the response for a single DER encoded certificate and SHOULD\n  \
    \ specify the media type application/pkcs7-mime [RFC2797] in the\n   content-type\
    \ header field of the response for \"certs-only\" CMS\n   messages.  For FTP,\
    \ the name of a file that contains a single DER\n   encoded certificate SHOULD\
    \ have a suffix of \".cer\" [RFC2585] and the\n   name of a file that contains\
    \ a \"certs-only\" CMS message SHOULD have a\n   suffix of \".p7c\" [RFC2797].\
    \  Consuming clients may use the media type\n   or file extension as a hint to\
    \ the content, but should not depend\n   solely on the presence of the correct\
    \ media type or file extension in\n   the server response.\n   The semantics of\
    \ other id-ad-caIssuers accessLocation name forms are\n   not defined.\n   An\
    \ authorityInfoAccess extension may include multiple instances of\n   the id-ad-caIssuers\
    \ accessMethod.  The different instances may\n   specify different methods for\
    \ accessing the same information or may\n   point to different information.  When\
    \ the id-ad-caIssuers\n   accessMethod is used, at least one instance SHOULD specify\
    \ an\n   accessLocation that is an HTTP [RFC2616] or LDAP [RFC4516] URI.\n   The\
    \ id-ad-ocsp OID is used when revocation information for the\n   certificate containing\
    \ this extension is available using the Online\n   Certificate Status Protocol\
    \ (OCSP) [RFC2560].\n   When id-ad-ocsp appears as accessMethod, the accessLocation\
    \ field is\n   the location of the OCSP responder, using the conventions defined\
    \ in\n   [RFC2560].\n   Additional access descriptors may be defined in other\
    \ PKIX\n   specifications.\n"
- title: 4.2.2.2.  Subject Information Access
  contents:
  - "4.2.2.2.  Subject Information Access\n   The subject information access extension\
    \ indicates how to access\n   information and services for the subject of the\
    \ certificate in which\n   the extension appears.  When the subject is a CA, information\
    \ and\n   services may include certificate validation services and CA policy\n\
    \   data.  When the subject is an end entity, the information describes\n   the\
    \ type of services offered and how to access them.  In this case,\n   the contents\
    \ of this extension are defined in the protocol\n   specifications for the supported\
    \ services.  This extension may be\n   included in end entity or CA certificates.\
    \  Conforming CAs MUST mark\n   this extension as non-critical.\n   id-pe-subjectInfoAccess\
    \ OBJECT IDENTIFIER ::= { id-pe 11 }\n   SubjectInfoAccessSyntax  ::=\n      \
    \     SEQUENCE SIZE (1..MAX) OF AccessDescription\n   AccessDescription  ::= \
    \ SEQUENCE {\n           accessMethod          OBJECT IDENTIFIER,\n          \
    \ accessLocation        GeneralName  }\n   Each entry in the sequence SubjectInfoAccessSyntax\
    \ describes the\n   format and location of additional information provided by\
    \ the subject\n   of the certificate in which this extension appears.  The type\
    \ and\n   format of the information are specified by the accessMethod field;\n\
    \   the accessLocation field specifies the location of the information.\n   The\
    \ retrieval mechanism may be implied by the accessMethod or\n   specified by accessLocation.\n\
    \   This profile defines one access method to be used when the subject is\n  \
    \ a CA and one access method to be used when the subject is an end\n   entity.\
    \  Additional access methods may be defined in the future in\n   the protocol\
    \ specifications for other services.\n   The id-ad-caRepository OID is used when\
    \ the subject is a CA that\n   publishes certificates it issues in a repository.\
    \  The accessLocation\n   field is defined as a GeneralName, which can take several\
    \ forms.\n   When the accessLocation is a directoryName, the information is to\
    \ be\n   obtained by the application from whatever directory server is locally\n\
    \   configured.  When the extension is used to point to CA certificates,\n   the\
    \ entry for the directoryName contains CA certificates in the\n   crossCertificatePair\
    \ and/or cACertificate attributes as specified in\n   [RFC4523].  The protocol\
    \ the application uses to access the directory\n   (e.g., DAP or LDAP) is a local\
    \ matter.\n   Where the information is available via LDAP, the accessLocation\n\
    \   SHOULD be a uniformResourceIdentifier.  The LDAP URI [RFC4516] MUST\n   include\
    \ a <dn> field containing the distinguished name of the entry\n   holding the\
    \ certificates, MUST include an <attributes> field that\n   lists appropriate\
    \ attribute descriptions for the attributes that hold\n   the DER encoded certificates\
    \ or cross-certificate pairs [RFC4523],\n   and SHOULD include a <host> (e.g.,\
    \ <ldap://ldap.example.com/cn=CA,\n   dc=example,dc=com?cACertificate;binary,crossCertificatePair;binary>).\n\
    \   Omitting the <host> (e.g., <ldap:///cn=exampleCA,dc=example,dc=com?\n   cACertificate;binary>)\
    \ has the effect of relying on whatever a priori\n   knowledge the client might\
    \ have to contact an appropriate server.\n   Where the information is available\
    \ via HTTP or FTP, accessLocation\n   MUST be a uniformResourceIdentifier and\
    \ the URI MUST point to either\n   a single DER encoded certificate as specified\
    \ in [RFC2585] or a\n   collection of certificates in a BER or DER encoded \"\
    certs-only\" CMS\n   message as specified in [RFC2797].\n   Conforming applications\
    \ that support HTTP or FTP for accessing\n   certificates MUST be able to accept\
    \ individual DER encoded\n   certificates and SHOULD be able to accept \"certs-only\"\
    \ CMS messages.\n   HTTP server implementations accessed via the URI SHOULD specify\
    \ the\n   media type application/pkix-cert [RFC2585] in the content-type header\n\
    \   field of the response for a single DER encoded certificate and SHOULD\n  \
    \ specify the media type application/pkcs7-mime [RFC2797] in the\n   content-type\
    \ header field of the response for \"certs-only\" CMS\n   messages.  For FTP,\
    \ the name of a file that contains a single DER\n   encoded certificate SHOULD\
    \ have a suffix of \".cer\" [RFC2585] and the\n   name of a file that contains\
    \ a \"certs-only\" CMS message SHOULD have a\n   suffix of \".p7c\" [RFC2797].\
    \  Consuming clients may use the media type\n   or file extension as a hint to\
    \ the content, but should not depend\n   solely on the presence of the correct\
    \ media type or file extension in\n   the server response.\n   The semantics of\
    \ other id-ad-caRepository accessLocation name forms\n   are not defined.\n  \
    \ A subjectInfoAccess extension may include multiple instances of the\n   id-ad-caRepository\
    \ accessMethod.  The different instances may specify\n   different methods for\
    \ accessing the same information or may point to\n   different information.  When\
    \ the id-ad-caRepository accessMethod is\n   used, at least one instance SHOULD\
    \ specify an accessLocation that is\n   an HTTP [RFC2616] or LDAP [RFC4516] URI.\n\
    \   The id-ad-timeStamping OID is used when the subject offers\n   timestamping\
    \ services using the Time Stamp Protocol defined in\n   [RFC3161].  Where the\
    \ timestamping services are available via HTTP or\n   FTP, accessLocation MUST\
    \ be a uniformResourceIdentifier.  Where the\n   timestamping services are available\
    \ via electronic mail,\n   accessLocation MUST be an rfc822Name.  Where timestamping\
    \ services\n   are available using TCP/IP, the dNSName or iPAddress name forms\
    \ may\n   be used.  The semantics of other name forms of accessLocation (when\n\
    \   accessMethod is id-ad-timeStamping) are not defined by this\n   specification.\n\
    \   Additional access descriptors may be defined in other PKIX\n   specifications.\n\
    \   id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n   id-ad-caRepository OBJECT IDENTIFIER\
    \ ::= { id-ad 5 }\n   id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }\n"
- title: 5.  CRL and CRL Extensions Profile
  contents:
  - "5.  CRL and CRL Extensions Profile\n   As discussed above, one goal of this X.509\
    \ v2 CRL profile is to\n   foster the creation of an interoperable and reusable\
    \ Internet PKI.\n   To achieve this goal, guidelines for the use of extensions\
    \ are\n   specified, and some assumptions are made about the nature of\n   information\
    \ included in the CRL.\n   CRLs may be used in a wide range of applications and\
    \ environments\n   covering a broad spectrum of interoperability goals and an\
    \ even\n   broader spectrum of operational and assurance requirements.  This\n\
    \   profile establishes a common baseline for generic applications\n   requiring\
    \ broad interoperability.  The profile defines a set of\n   information that can\
    \ be expected in every CRL.  Also, the profile\n   defines common locations within\
    \ the CRL for frequently used\n   attributes as well as common representations\
    \ for these attributes.\n   CRL issuers issue CRLs.  The CRL issuer is either\
    \ the CA or an entity\n   that has been authorized by the CA to issue CRLs.  CAs\
    \ publish CRLs\n   to provide status information about the certificates they issued.\n\
    \   However, a CA may delegate this responsibility to another trusted\n   authority.\n\
    \   Each CRL has a particular scope.  The CRL scope is the set of\n   certificates\
    \ that could appear on a given CRL.  For example, the\n   scope could be \"all\
    \ certificates issued by CA X\", \"all CA\n   certificates issued by CA X\", \"\
    all certificates issued by CA X that\n   have been revoked for reasons of key\
    \ compromise and CA compromise\",\n   or a set of certificates based on arbitrary\
    \ local information, such\n   as \"all certificates issued to the NIST employees\
    \ located in\n   Boulder\".\n   A complete CRL lists all unexpired certificates,\
    \ within its scope,\n   that have been revoked for one of the revocation reasons\
    \ covered by\n   the CRL scope.  A full and complete CRL lists all unexpired\n\
    \   certificates issued by a CA that have been revoked for any reason.\n   (Note\
    \ that since CAs and CRL issuers are identified by name, the\n   scope of a CRL\
    \ is not affected by the key used to sign the CRL or the\n   key(s) used to sign\
    \ certificates.)\n   If the scope of the CRL includes one or more certificates\
    \ issued by\n   an entity other than the CRL issuer, then it is an indirect CRL.\
    \  The\n   scope of an indirect CRL may be limited to certificates issued by a\n\
    \   single CA or may include certificates issued by multiple CAs.  If the\n  \
    \ issuer of the indirect CRL is a CA, then the scope of the indirect\n   CRL MAY\
    \ also include certificates issued by the issuer of the CRL.\n   The CRL issuer\
    \ MAY also generate delta CRLs.  A delta CRL only lists\n   those certificates,\
    \ within its scope, whose revocation status has\n   changed since the issuance\
    \ of a referenced complete CRL.  The\n   referenced complete CRL is referred to\
    \ as a base CRL.  The scope of a\n   delta CRL MUST be the same as the base CRL\
    \ that it references.\n   This profile defines one private Internet CRL extension\
    \ but does not\n   define any private CRL entry extensions.\n   Environments with\
    \ additional or special purpose requirements may\n   build on this profile or\
    \ may replace it.\n   Conforming CAs are not required to issue CRLs if other revocation\
    \ or\n   certificate status mechanisms are provided.  When CRLs are issued,\n\
    \   the CRLs MUST be version 2 CRLs, include the date by which the next\n   CRL\
    \ will be issued in the nextUpdate field (Section 5.1.2.5), include\n   the CRL\
    \ number extension (Section 5.2.3), and include the authority\n   key identifier\
    \ extension (Section 5.2.1).  Conforming applications\n   that support CRLs are\
    \ REQUIRED to process both version 1 and version\n   2 complete CRLs that provide\
    \ revocation information for all\n   certificates issued by one CA.  Conforming\
    \ applications are not\n   required to support processing of delta CRLs, indirect\
    \ CRLs, or CRLs\n   with a scope other than all certificates issued by one CA.\n"
- title: 5.1.  CRL Fields
  contents:
  - "5.1.  CRL Fields\n   The X.509 v2 CRL syntax is as follows.  For signature calculation,\n\
    \   the data that is to be signed is ASN.1 DER encoded.  ASN.1 DER\n   encoding\
    \ is a tag, length, value encoding system for each element.\n   CertificateList\
    \  ::=  SEQUENCE  {\n        tbsCertList          TBSCertList,\n        signatureAlgorithm\
    \   AlgorithmIdentifier,\n        signatureValue       BIT STRING  }\n   TBSCertList\
    \  ::=  SEQUENCE  {\n        version                 Version OPTIONAL,\n     \
    \                                -- if present, MUST be v2\n        signature\
    \               AlgorithmIdentifier,\n        issuer                  Name,\n\
    \        thisUpdate              Time,\n        nextUpdate              Time OPTIONAL,\n\
    \        revokedCertificates     SEQUENCE OF SEQUENCE  {\n             userCertificate\
    \         CertificateSerialNumber,\n             revocationDate          Time,\n\
    \             crlEntryExtensions      Extensions OPTIONAL\n                  \
    \                    -- if present, version MUST be v2\n                     \
    \             }  OPTIONAL,\n        crlExtensions           [0]  EXPLICIT Extensions\
    \ OPTIONAL\n                                      -- if present, version MUST\
    \ be v2\n                                  }\n   -- Version, Time, CertificateSerialNumber,\
    \ and Extensions\n   -- are all defined in the ASN.1 in Section 4.1\n   -- AlgorithmIdentifier\
    \ is defined in Section 4.1.1.2\n   The following items describe the use of the\
    \ X.509 v2 CRL in the\n   Internet PKI.\n"
- title: 5.1.1.  CertificateList Fields
  contents:
  - "5.1.1.  CertificateList Fields\n   The CertificateList is a SEQUENCE of three\
    \ required fields.  The\n   fields are described in detail in the following subsections.\n"
- title: 5.1.1.1.  tbsCertList
  contents:
  - "5.1.1.1.  tbsCertList\n   The first field in the sequence is the tbsCertList.\
    \  This field is\n   itself a sequence containing the name of the issuer, issue\
    \ date,\n   issue date of the next list, the optional list of revoked\n   certificates,\
    \ and optional CRL extensions.  When there are no revoked\n   certificates, the\
    \ revoked certificates list is absent.  When one or\n   more certificates are\
    \ revoked, each entry on the revoked certificate\n   list is defined by a sequence\
    \ of user certificate serial number,\n   revocation date, and optional CRL entry\
    \ extensions.\n"
- title: 5.1.1.2.  signatureAlgorithm
  contents:
  - "5.1.1.2.  signatureAlgorithm\n   The signatureAlgorithm field contains the algorithm\
    \ identifier for\n   the algorithm used by the CRL issuer to sign the CertificateList.\n\
    \   The field is of type AlgorithmIdentifier, which is defined in Section\n  \
    \ 4.1.1.2.  [RFC3279], [RFC4055], and [RFC4491] list supported\n   algorithms\
    \ for this specification, but other signature algorithms MAY\n   also be supported.\n\
    \   This field MUST contain the same algorithm identifier as the\n   signature\
    \ field in the sequence tbsCertList (Section 5.1.2.2).\n"
- title: 5.1.1.3.  signatureValue
  contents:
  - "5.1.1.3.  signatureValue\n   The signatureValue field contains a digital signature\
    \ computed upon\n   the ASN.1 DER encoded tbsCertList.  The ASN.1 DER encoded\
    \ tbsCertList\n   is used as the input to the signature function.  This signature\
    \ value\n   is encoded as a BIT STRING and included in the CRL signatureValue\n\
    \   field.  The details of this process are specified for each of the\n   supported\
    \ algorithms in [RFC3279], [RFC4055], and [RFC4491].\n   CAs that are also CRL\
    \ issuers MAY use one private key to digitally\n   sign certificates and CRLs,\
    \ or MAY use separate private keys to\n   digitally sign certificates and CRLs.\
    \  When separate private keys are\n   employed, each of the public keys associated\
    \ with these private keys\n   is placed in a separate certificate, one with the\
    \ keyCertSign bit set\n   in the key usage extension, and one with the cRLSign\
    \ bit set in the\n   key usage extension (Section 4.2.1.3).  When separate private\
    \ keys\n   are employed, certificates issued by the CA contain one authority key\n\
    \   identifier, and the corresponding CRLs contain a different authority\n   key\
    \ identifier.  The use of separate CA certificates for validation\n   of certificate\
    \ signatures and CRL signatures can offer improved\n   security characteristics;\
    \ however, it imposes a burden on\n   applications, and it might limit interoperability.\
    \  Many applications\n   construct a certification path, and then validate the\
    \ certification\n   path (Section 6).  CRL checking in turn requires a separate\n\
    \   certification path to be constructed and validated for the CA's CRL\n   signature\
    \ validation certificate.  Applications that perform CRL\n   checking MUST support\
    \ certification path validation when certificates\n   and CRLs are digitally signed\
    \ with the same CA private key.  These\n   applications SHOULD support certification\
    \ path validation when\n   certificates and CRLs are digitally signed with different\
    \ CA private\n   keys.\n"
- title: 5.1.2.  Certificate List "To Be Signed"
  contents:
  - "5.1.2.  Certificate List \"To Be Signed\"\n   The certificate list to be signed,\
    \ or TBSCertList, is a sequence of\n   required and optional fields.  The required\
    \ fields identify the CRL\n   issuer, the algorithm used to sign the CRL, and\
    \ the date and time the\n   CRL was issued.\n   Optional fields include the date\
    \ and time by which the CRL issuer\n   will issue the next CRL, lists of revoked\
    \ certificates, and CRL\n   extensions.  The revoked certificate list is optional\
    \ to support the\n   case where a CA has not revoked any unexpired certificates\
    \ that it\n   has issued.  This profile requires conforming CRL issuers to include\n\
    \   the nextUpdate field and the CRL number and authority key identifier\n   CRL\
    \ extensions in all CRLs issued.\n"
- title: 5.1.2.1.  Version
  contents:
  - "5.1.2.1.  Version\n   This optional field describes the version of the encoded\
    \ CRL.  When\n   extensions are used, as required by this profile, this field\
    \ MUST be\n   present and MUST specify version 2 (the integer value is 1).\n"
- title: 5.1.2.2.  Signature
  contents:
  - "5.1.2.2.  Signature\n   This field contains the algorithm identifier for the\
    \ algorithm used\n   to sign the CRL.  [RFC3279], [RFC4055], and [RFC4491] list\
    \ OIDs for\n   the most popular signature algorithms used in the Internet PKI.\n\
    \   This field MUST contain the same algorithm identifier as the\n   signatureAlgorithm\
    \ field in the sequence CertificateList (Section\n   5.1.1.2).\n"
- title: 5.1.2.3.  Issuer Name
  contents:
  - "5.1.2.3.  Issuer Name\n   The issuer name identifies the entity that has signed\
    \ and issued the\n   CRL.  The issuer identity is carried in the issuer field.\n\
    \   Alternative name forms may also appear in the issuerAltName extension\n  \
    \ (Section 5.2.2).  The issuer field MUST contain a non-empty X.500\n   distinguished\
    \ name (DN).  The issuer field is defined as the X.501\n   type Name, and MUST\
    \ follow the encoding rules for the issuer name\n   field in the certificate (Section\
    \ 4.1.2.4).\n"
- title: 5.1.2.4.  This Update
  contents:
  - "5.1.2.4.  This Update\n   This field indicates the issue date of this CRL.  thisUpdate\
    \ may be\n   encoded as UTCTime or GeneralizedTime.\n   CRL issuers conforming\
    \ to this profile MUST encode thisUpdate as\n   UTCTime for dates through the\
    \ year 2049.  CRL issuers conforming to\n   this profile MUST encode thisUpdate\
    \ as GeneralizedTime for dates in\n   the year 2050 or later.  Conforming applications\
    \ MUST be able to\n   process dates that are encoded in either UTCTime or GeneralizedTime.\n\
    \   Where encoded as UTCTime, thisUpdate MUST be specified and\n   interpreted\
    \ as defined in Section 4.1.2.5.1.  Where encoded as\n   GeneralizedTime, thisUpdate\
    \ MUST be specified and interpreted as\n   defined in Section 4.1.2.5.2.\n"
- title: 5.1.2.5.  Next Update
  contents:
  - "5.1.2.5.  Next Update\n   This field indicates the date by which the next CRL\
    \ will be issued.\n   The next CRL could be issued before the indicated date,\
    \ but it will\n   not be issued any later than the indicated date.  CRL issuers\
    \ SHOULD\n   issue CRLs with a nextUpdate time equal to or later than all previous\n\
    \   CRLs.  nextUpdate may be encoded as UTCTime or GeneralizedTime.\n   Conforming\
    \ CRL issuers MUST include the nextUpdate field in all CRLs.\n   Note that the\
    \ ASN.1 syntax of TBSCertList describes this field as\n   OPTIONAL, which is consistent\
    \ with the ASN.1 structure defined in\n   [X.509].  The behavior of clients processing\
    \ CRLs that omit\n   nextUpdate is not specified by this profile.\n   CRL issuers\
    \ conforming to this profile MUST encode nextUpdate as\n   UTCTime for dates through\
    \ the year 2049.  CRL issuers conforming to\n   this profile MUST encode nextUpdate\
    \ as GeneralizedTime for dates in\n   the year 2050 or later.  Conforming applications\
    \ MUST be able to\n   process dates that are encoded in either UTCTime or GeneralizedTime.\n\
    \   Where encoded as UTCTime, nextUpdate MUST be specified and\n   interpreted\
    \ as defined in Section 4.1.2.5.1.  Where encoded as\n   GeneralizedTime, nextUpdate\
    \ MUST be specified and interpreted as\n   defined in Section 4.1.2.5.2.\n"
- title: 5.1.2.6.  Revoked Certificates
  contents:
  - "5.1.2.6.  Revoked Certificates\n   When there are no revoked certificates, the\
    \ revoked certificates list\n   MUST be absent.  Otherwise, revoked certificates\
    \ are listed by their\n   serial numbers.  Certificates revoked by the CA are\
    \ uniquely\n   identified by the certificate serial number.  The date on which\
    \ the\n   revocation occurred is specified.  The time for revocationDate MUST\n\
    \   be expressed as described in Section 5.1.2.4.  Additional information\n  \
    \ may be supplied in CRL entry extensions; CRL entry extensions are\n   discussed\
    \ in Section 5.3.\n"
- title: 5.1.2.7.  Extensions
  contents:
  - "5.1.2.7.  Extensions\n   This field may only appear if the version is 2 (Section\
    \ 5.1.2.1).  If\n   present, this field is a sequence of one or more CRL extensions.\
    \  CRL\n   extensions are discussed in Section 5.2.\n"
- title: 5.2.  CRL Extensions
  contents:
  - "5.2.  CRL Extensions\n   The extensions defined by ANSI X9, ISO/IEC, and ITU-T\
    \ for X.509 v2\n   CRLs [X.509] [X9.55] provide methods for associating additional\n\
    \   attributes with CRLs.  The X.509 v2 CRL format also allows\n   communities\
    \ to define private extensions to carry information unique\n   to those communities.\
    \  Each extension in a CRL may be designated as\n   critical or non-critical.\
    \  If a CRL contains a critical extension\n   that the application cannot process,\
    \ then the application MUST NOT\n   use that CRL to determine the status of certificates.\
    \  However,\n   applications may ignore unrecognized non-critical extensions.\
    \  The\n   following subsections present those extensions used within Internet\n\
    \   CRLs.  Communities may elect to include extensions in CRLs that are\n   not\
    \ defined in this specification.  However, caution should be\n   exercised in\
    \ adopting any critical extensions in CRLs that might be\n   used in a general\
    \ context.\n   Conforming CRL issuers are REQUIRED to include the authority key\n\
    \   identifier (Section 5.2.1) and the CRL number (Section 5.2.3)\n   extensions\
    \ in all CRLs issued.\n"
- title: 5.2.1.  Authority Key Identifier
  contents:
  - "5.2.1.  Authority Key Identifier\n   The authority key identifier extension provides\
    \ a means of\n   identifying the public key corresponding to the private key used\
    \ to\n   sign a CRL.  The identification can be based on either the key\n   identifier\
    \ (the subject key identifier in the CRL signer's\n   certificate) or the issuer\
    \ name and serial number.  This extension is\n   especially useful where an issuer\
    \ has more than one signing key,\n   either due to multiple concurrent key pairs\
    \ or due to changeover.\n   Conforming CRL issuers MUST use the key identifier\
    \ method, and MUST\n   include this extension in all CRLs issued.\n   The syntax\
    \ for this CRL extension is defined in Section 4.2.1.1.\n"
- title: 5.2.2.  Issuer Alternative Name
  contents:
  - "5.2.2.  Issuer Alternative Name\n   The issuer alternative name extension allows\
    \ additional identities to\n   be associated with the issuer of the CRL.  Defined\
    \ options include an\n   electronic mail address (rfc822Name), a DNS name, an\
    \ IP address, and\n   a URI.  Multiple instances of a name form and multiple name\
    \ forms may\n   be included.  Whenever such identities are used, the issuer\n\
    \   alternative name extension MUST be used; however, a DNS name MAY be\n   represented\
    \ in the issuer field using the domainComponent attribute\n   as described in\
    \ Section 4.1.2.4.\n   Conforming CRL issuers SHOULD mark the issuerAltName extension\
    \ as\n   non-critical.\n   The OID and syntax for this CRL extension are defined\
    \ in Section\n   4.2.1.7.\n"
- title: 5.2.3.  CRL Number
  contents:
  - "5.2.3.  CRL Number\n   The CRL number is a non-critical CRL extension that conveys\
    \ a\n   monotonically increasing sequence number for a given CRL scope and\n \
    \  CRL issuer.  This extension allows users to easily determine when a\n   particular\
    \ CRL supersedes another CRL.  CRL numbers also support the\n   identification\
    \ of complementary complete CRLs and delta CRLs.  CRL\n   issuers conforming to\
    \ this profile MUST include this extension in all\n   CRLs and MUST mark this\
    \ extension as non-critical.\n   If a CRL issuer generates delta CRLs in addition\
    \ to complete CRLs for\n   a given scope, the complete CRLs and delta CRLs MUST\
    \ share one\n   numbering sequence.  If a delta CRL and a complete CRL that cover\
    \ the\n   same scope are issued at the same time, they MUST have the same CRL\n\
    \   number and provide the same revocation information.  That is, the\n   combination\
    \ of the delta CRL and an acceptable complete CRL MUST\n   provide the same revocation\
    \ information as the simultaneously issued\n   complete CRL.\n   If a CRL issuer\
    \ generates two CRLs (two complete CRLs, two delta\n   CRLs, or a complete CRL\
    \ and a delta CRL) for the same scope at\n   different times, the two CRLs MUST\
    \ NOT have the same CRL number.\n   That is, if the this update field (Section\
    \ 5.1.2.4) in the two CRLs\n   are not identical, the CRL numbers MUST be different.\n\
    \   Given the requirements above, CRL numbers can be expected to contain\n   long\
    \ integers.  CRL verifiers MUST be able to handle CRLNumber values\n   up to 20\
    \ octets.  Conforming CRL issuers MUST NOT use CRLNumber\n   values longer than\
    \ 20 octets.\n   id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }\n   CRLNumber\
    \ ::= INTEGER (0..MAX)\n"
- title: 5.2.4.  Delta CRL Indicator
  contents:
  - "5.2.4.  Delta CRL Indicator\n   The delta CRL indicator is a critical CRL extension\
    \ that identifies a\n   CRL as being a delta CRL.  Delta CRLs contain updates\
    \ to revocation\n   information previously distributed, rather than all the information\n\
    \   that would appear in a complete CRL.  The use of delta CRLs can\n   significantly\
    \ reduce network load and processing time in some\n   environments.  Delta CRLs\
    \ are generally smaller than the CRLs they\n   update, so applications that obtain\
    \ delta CRLs consume less network\n   bandwidth than applications that obtain\
    \ the corresponding complete\n   CRLs.  Applications that store revocation information\
    \ in a format\n   other than the CRL structure can add new revocation information\
    \ to\n   the local database without reprocessing information.\n   The delta CRL\
    \ indicator extension contains the single value of type\n   BaseCRLNumber.  The\
    \ CRL number identifies the CRL, complete for a\n   given scope, that was used\
    \ as the starting point in the generation of\n   this delta CRL.  A conforming\
    \ CRL issuer MUST publish the referenced\n   base CRL as a complete CRL.  The\
    \ delta CRL contains all updates to\n   the revocation status for that same scope.\
    \  The combination of a\n   delta CRL plus the referenced base CRL is equivalent\
    \ to a complete\n   CRL, for the applicable scope, at the time of publication\
    \ of the\n   delta CRL.\n   When a conforming CRL issuer generates a delta CRL,\
    \ the delta CRL\n   MUST include a critical delta CRL indicator extension.\n \
    \  When a delta CRL is issued, it MUST cover the same set of reasons and\n   the\
    \ same set of certificates that were covered by the base CRL it\n   references.\
    \  That is, the scope of the delta CRL MUST be the same as\n   the scope of the\
    \ complete CRL referenced as the base.  The referenced\n   base CRL and the delta\
    \ CRL MUST omit the issuing distribution point\n   extension or contain identical\
    \ issuing distribution point extensions.\n   Further, the CRL issuer MUST use\
    \ the same private key to sign the\n   delta CRL and any complete CRL that it\
    \ can be used to update.\n   An application that supports delta CRLs can construct\
    \ a CRL that is\n   complete for a given scope by combining a delta CRL for that\
    \ scope\n   with either an issued CRL that is complete for that scope or a\n \
    \  locally constructed CRL that is complete for that scope.\n   When a delta CRL\
    \ is combined with a complete CRL or a locally\n   constructed CRL, the resulting\
    \ locally constructed CRL has the CRL\n   number specified in the CRL number extension\
    \ found in the delta CRL\n   used in its construction.  In addition, the resulting\
    \ locally\n   constructed CRL has the thisUpdate and nextUpdate times specified\
    \ in\n   the corresponding fields of the delta CRL used in its construction.\n\
    \   In addition, the locally constructed CRL inherits the issuing\n   distribution\
    \ point from the delta CRL.\n   A complete CRL and a delta CRL MAY be combined\
    \ if the following four\n   conditions are satisfied:\n      (a)  The complete\
    \ CRL and delta CRL have the same issuer.\n      (b)  The complete CRL and delta\
    \ CRL have the same scope.  The two\n           CRLs have the same scope if either\
    \ of the following\n           conditions are met:\n         (1)  The issuingDistributionPoint\
    \ extension is omitted from\n              both the complete CRL and the delta\
    \ CRL.\n         (2)  The issuingDistributionPoint extension is present in both\n\
    \              the complete CRL and the delta CRL, and the values for\n      \
    \        each of the fields in the extensions are the same in both\n         \
    \     CRLs.\n      (c)  The CRL number of the complete CRL is equal to or greater\n\
    \           than the BaseCRLNumber specified in the delta CRL.  That is,\n   \
    \        the complete CRL contains (at a minimum) all the revocation\n       \
    \    information held by the referenced base CRL.\n      (d)  The CRL number of\
    \ the complete CRL is less than the CRL\n           number of the delta CRL. \
    \ That is, the delta CRL follows the\n           complete CRL in the numbering\
    \ sequence.\n   CRL issuers MUST ensure that the combination of a delta CRL and\
    \ any\n   appropriate complete CRL accurately reflects the current revocation\n\
    \   status.  The CRL issuer MUST include an entry in the delta CRL for\n   each\
    \ certificate within the scope of the delta CRL whose status has\n   changed since\
    \ the generation of the referenced base CRL:\n      (a)  If the certificate is\
    \ revoked for a reason included in the\n           scope of the CRL, list the\
    \ certificate as revoked.\n      (b)  If the certificate is valid and was listed\
    \ on the referenced\n           base CRL or any subsequent CRL with reason code\n\
    \           certificateHold, and the reason code certificateHold is\n        \
    \   included in the scope of the CRL, list the certificate with\n           the\
    \ reason code removeFromCRL.\n      (c)  If the certificate is revoked for a reason\
    \ outside the scope\n           of the CRL, but the certificate was listed on\
    \ the referenced\n           base CRL or any subsequent CRL with a reason code\
    \ included in\n           the scope of this CRL, list the certificate as revoked\
    \ but\n           omit the reason code.\n      (d)  If the certificate is revoked\
    \ for a reason outside the scope\n           of the CRL and the certificate was\
    \ neither listed on the\n           referenced base CRL nor any subsequent CRL\
    \ with a reason code\n           included in the scope of this CRL, do not list\
    \ the\n           certificate on this CRL.\n   The status of a certificate is\
    \ considered to have changed if it is\n   revoked (for any revocation reason,\
    \ including certificateHold), if it\n   is released from hold, or if its revocation\
    \ reason changes.\n   It is appropriate to list a certificate with reason code\n\
    \   removeFromCRL on a delta CRL even if the certificate was not on hold\n   in\
    \ the referenced base CRL.  If the certificate was placed on hold in\n   any CRL\
    \ issued after the base but before this delta CRL and then\n   released from hold,\
    \ it MUST be listed on the delta CRL with\n   revocation reason removeFromCRL.\n\
    \   A CRL issuer MAY optionally list a certificate on a delta CRL with\n   reason\
    \ code removeFromCRL if the notAfter time specified in the\n   certificate precedes\
    \ the thisUpdate time specified in the delta CRL\n   and the certificate was listed\
    \ on the referenced base CRL or in any\n   CRL issued after the base but before\
    \ this delta CRL.\n   If a certificate revocation notice first appears on a delta\
    \ CRL, then\n   it is possible for the certificate validity period to expire before\n\
    \   the next complete CRL for the same scope is issued.  In this case,\n   the\
    \ revocation notice MUST be included in all subsequent delta CRLs\n   until the\
    \ revocation notice is included on at least one explicitly\n   issued complete\
    \ CRL for this scope.\n   An application that supports delta CRLs MUST be able\
    \ to construct a\n   current complete CRL by combining a previously issued complete\
    \ CRL\n   and the most current delta CRL.  An application that supports delta\n\
    \   CRLs MAY also be able to construct a current complete CRL by\n   combining\
    \ a previously locally constructed complete CRL and the\n   current delta CRL.\
    \  A delta CRL is considered to be the current one\n   if the current time is\
    \ between the times contained in the thisUpdate\n   and nextUpdate fields.  Under\
    \ some circumstances, the CRL issuer may\n   publish one or more delta CRLs before\
    \ the time indicated by the\n   nextUpdate field.  If more than one current delta\
    \ CRL for a given\n   scope is encountered, the application SHOULD consider the\
    \ one with\n   the latest value in thisUpdate to be the most current one.\n  \
    \ id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }\n   BaseCRLNumber\
    \ ::= CRLNumber\n"
- title: 5.2.5.  Issuing Distribution Point
  contents:
  - "5.2.5.  Issuing Distribution Point\n   The issuing distribution point is a critical\
    \ CRL extension that\n   identifies the CRL distribution point and scope for a\
    \ particular CRL,\n   and it indicates whether the CRL covers revocation for end\
    \ entity\n   certificates only, CA certificates only, attribute certificates only,\n\
    \   or a limited set of reason codes.  Although the extension is\n   critical,\
    \ conforming implementations are not required to support this\n   extension. \
    \ However, implementations that do not support this\n   extension MUST either\
    \ treat the status of any certificate not listed\n   on this CRL as unknown or\
    \ locate another CRL that does not contain\n   any unrecognized critical extensions.\n\
    \   The CRL is signed using the CRL issuer's private key.  CRL\n   distribution\
    \ points do not have their own key pairs.  If the CRL is\n   stored in the X.500\
    \ directory, it is stored in the directory entry\n   corresponding to the CRL\
    \ distribution point, which may be different\n   from the directory entry of the\
    \ CRL issuer.\n   The reason codes associated with a distribution point MUST be\n\
    \   specified in onlySomeReasons.  If onlySomeReasons does not appear,\n   the\
    \ distribution point MUST contain revocations for all reason codes.\n   CAs may\
    \ use CRL distribution points to partition the CRL on the basis\n   of compromise\
    \ and routine revocation.  In this case, the revocations\n   with reason code\
    \ keyCompromise (1), cACompromise (2), and\n   aACompromise (8) appear in one\
    \ distribution point, and the\n   revocations with other reason codes appear in\
    \ another distribution\n   point.\n   If a CRL includes an issuingDistributionPoint\
    \ extension with\n   onlySomeReasons present, then every certificate in the scope\
    \ of the\n   CRL that is revoked MUST be assigned a revocation reason other than\n\
    \   unspecified.  The assigned revocation reason is used to determine on\n   which\
    \ CRL(s) to list the revoked certificate, however, there is no\n   requirement\
    \ to include the reasonCode CRL entry extension in the\n   corresponding CRL entry.\n\
    \   The syntax and semantics for the distributionPoint field are the same\n  \
    \ as for the distributionPoint field in the cRLDistributionPoints\n   extension\
    \ (Section 4.2.1.13).  If the distributionPoint field is\n   present, then it\
    \ MUST include at least one of names from the\n   corresponding distributionPoint\
    \ field of the cRLDistributionPoints\n   extension of every certificate that is\
    \ within the scope of this CRL.\n   The identical encoding MUST be used in the\
    \ distributionPoint fields\n   of the certificate and the CRL.\n   If the distributionPoint\
    \ field is absent, the CRL MUST contain\n   entries for all revoked unexpired\
    \ certificates issued by the CRL\n   issuer, if any, within the scope of the CRL.\n\
    \   If the scope of the CRL only includes certificates issued by the CRL\n   issuer,\
    \ then the indirectCRL boolean MUST be set to FALSE.\n   Otherwise, if the scope\
    \ of the CRL includes certificates issued by\n   one or more authorities other\
    \ than the CRL issuer, the indirectCRL\n   boolean MUST be set to TRUE.  The authority\
    \ responsible for each\n   entry is indicated by the certificate issuer CRL entry\
    \ extension\n   (Section 5.3.3).\n   If the scope of the CRL only includes end\
    \ entity public key\n   certificates, then onlyContainsUserCerts MUST be set to\
    \ TRUE.  If the\n   scope of the CRL only includes CA certificates, then\n   onlyContainsCACerts\
    \ MUST be set to TRUE.  If either\n   onlyContainsUserCerts or onlyContainsCACerts\
    \ is set to TRUE, then the\n   scope of the CRL MUST NOT include any version 1\
    \ or version 2\n   certificates.  Conforming CRLs issuers MUST set the\n   onlyContainsAttributeCerts\
    \ boolean to FALSE.\n   Conforming CRLs issuers MUST NOT issue CRLs where the\
    \ DER encoding of\n   the issuing distribution point extension is an empty sequence.\
    \  That\n   is, if onlyContainsUserCerts, onlyContainsCACerts, indirectCRL, and\n\
    \   onlyContainsAttributeCerts are all FALSE, then either the\n   distributionPoint\
    \ field or the onlySomeReasons field MUST be present.\n   id-ce-issuingDistributionPoint\
    \ OBJECT IDENTIFIER ::= { id-ce 28 }\n   IssuingDistributionPoint ::= SEQUENCE\
    \ {\n        distributionPoint          [0] DistributionPointName OPTIONAL,\n\
    \        onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n        onlyContainsCACerts\
    \        [2] BOOLEAN DEFAULT FALSE,\n        onlySomeReasons            [3] ReasonFlags\
    \ OPTIONAL,\n        indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n \
    \       onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\n        -- at\
    \ most one of onlyContainsUserCerts, onlyContainsCACerts,\n        -- and onlyContainsAttributeCerts\
    \ may be set to TRUE.\n"
- title: 5.2.6.  Freshest CRL (a.k.a. Delta CRL Distribution Point)
  contents:
  - "5.2.6.  Freshest CRL (a.k.a. Delta CRL Distribution Point)\n   The freshest CRL\
    \ extension identifies how delta CRL information for\n   this complete CRL is\
    \ obtained.  Conforming CRL issuers MUST mark this\n   extension as non-critical.\
    \  This extension MUST NOT appear in delta\n   CRLs.\n   The same syntax is used\
    \ for this extension as the\n   cRLDistributionPoints certificate extension, and\
    \ is described in\n   Section 4.2.1.13.  However, only the distribution point\
    \ field is\n   meaningful in this context.  The reasons and cRLIssuer fields MUST\
    \ be\n   omitted from this CRL extension.\n   Each distribution point name provides\
    \ the location at which a delta\n   CRL for this complete CRL can be found.  The\
    \ scope of these delta\n   CRLs MUST be the same as the scope of this complete\
    \ CRL.  The\n   contents of this CRL extension are only used to locate delta CRLs;\n\
    \   the contents are not used to validate the CRL or the referenced delta\n  \
    \ CRLs.  The encoding conventions defined for distribution points in\n   Section\
    \ 4.2.1.13 apply to this extension.\n   id-ce-freshestCRL OBJECT IDENTIFIER ::=\
    \  { id-ce 46 }\n   FreshestCRL ::= CRLDistributionPoints\n"
- title: 5.2.7.  Authority Information Access
  contents:
  - "5.2.7.  Authority Information Access\n   This section defines the use of the\
    \ Authority Information Access\n   extension in a CRL.  The syntax and semantics\
    \ defined in Section\n   4.2.2.1 for the certificate extension are also used for\
    \ the CRL\n   extension.\n   This CRL extension MUST be marked as non-critical.\n\
    \   When present in a CRL, this extension MUST include at least one\n   AccessDescription\
    \ specifying id-ad-caIssuers as the accessMethod.\n   The id-ad-caIssuers OID\
    \ is used when the information available lists\n   certificates that can be used\
    \ to verify the signature on the CRL\n   (i.e., certificates that have a subject\
    \ name that matches the issuer\n   name on the CRL and that have a subject public\
    \ key that corresponds\n   to the private key used to sign the CRL).  Access method\
    \ types other\n   than id-ad-caIssuers MUST NOT be included.  At least one instance\
    \ of\n   AccessDescription SHOULD specify an accessLocation that is an HTTP\n\
    \   [RFC2616] or LDAP [RFC4516] URI.\n   Where the information is available via\
    \ HTTP or FTP, accessLocation\n   MUST be a uniformResourceIdentifier and the\
    \ URI MUST point to either\n   a single DER encoded certificate as specified in\
    \ [RFC2585] or a\n   collection of certificates in a BER or DER encoded \"certs-only\"\
    \ CMS\n   message as specified in [RFC2797].\n   Conforming applications that\
    \ support HTTP or FTP for accessing\n   certificates MUST be able to accept individual\
    \ DER encoded\n   certificates and SHOULD be able to accept \"certs-only\" CMS\
    \ messages.\n   HTTP server implementations accessed via the URI SHOULD specify\
    \ the\n   media type application/pkix-cert [RFC2585] in the content-type header\n\
    \   field of the response for a single DER encoded certificate and SHOULD\n  \
    \ specify the media type application/pkcs7-mime [RFC2797] in the\n   content-type\
    \ header field of the response for \"certs-only\" CMS\n   messages.  For FTP,\
    \ the name of a file that contains a single DER\n   encoded certificate SHOULD\
    \ have a suffix of \".cer\" [RFC2585] and the\n   name of a file that contains\
    \ a \"certs-only\" CMS message SHOULD have a\n   suffix of \".p7c\" [RFC2797].\
    \  Consuming clients may use the media type\n   or file extension as a hint to\
    \ the content, but should not depend\n   solely on the presence of the correct\
    \ media type or file extension in\n   the server response.\n   When the accessLocation\
    \ is a directoryName, the information is to be\n   obtained by the application\
    \ from whatever directory server is locally\n   configured.  When one CA public\
    \ key is used to validate signatures on\n   certificates and CRLs, the desired\
    \ CA certificate is stored in the\n   crossCertificatePair and/or cACertificate\
    \ attributes as specified in\n   [RFC4523].  When different public keys are used\
    \ to validate\n   signatures on certificates and CRLs, the desired certificate\
    \ is\n   stored in the userCertificate attribute as specified in [RFC4523].\n\
    \   Thus, implementations that support the directoryName form of\n   accessLocation\
    \ MUST be prepared to find the needed certificate in any\n   of these three attributes.\
    \  The protocol that an application uses to\n   access the directory (e.g., DAP\
    \ or LDAP) is a local matter.\n   Where the information is available via LDAP,\
    \ the accessLocation\n   SHOULD be a uniformResourceIdentifier.  The LDAP URI\
    \ [RFC4516] MUST\n   include a <dn> field containing the distinguished name of\
    \ the entry\n   holding the certificates, MUST include an <attributes> field that\n\
    \   lists appropriate attribute descriptions for the attributes that hold\n  \
    \ the DER encoded certificates or cross-certificate pairs [RFC4523],\n   and SHOULD\
    \ include a <host> (e.g., <ldap://ldap.example.com/cn=CA,\n   dc=example,dc=com?cACertificate;binary,crossCertificatePair;binary>).\n\
    \   Omitting the <host> (e.g., <ldap:///cn=exampleCA,dc=example,dc=com?\n   cACertificate;binary>)\
    \ has the effect of relying on whatever a priori\n   knowledge the client might\
    \ have to contact an appropriate server.\n"
- title: 5.3.  CRL Entry Extensions
  contents:
  - "5.3.  CRL Entry Extensions\n   The CRL entry extensions defined by ISO/IEC, ITU-T,\
    \ and ANSI X9 for\n   X.509 v2 CRLs provide methods for associating additional\
    \ attributes\n   with CRL entries [X.509] [X9.55].  The X.509 v2 CRL format also\n\
    \   allows communities to define private CRL entry extensions to carry\n   information\
    \ unique to those communities.  Each extension in a CRL\n   entry may be designated\
    \ as critical or non-critical.  If a CRL\n   contains a critical CRL entry extension\
    \ that the application cannot\n   process, then the application MUST NOT use that\
    \ CRL to determine the\n   status of any certificates.  However, applications\
    \ may ignore\n   unrecognized non-critical CRL entry extensions.\n   The following\
    \ subsections present recommended extensions used within\n   Internet CRL entries\
    \ and standard locations for information.\n   Communities may elect to use additional\
    \ CRL entry extensions;\n   however, caution should be exercised in adopting any\
    \ critical CRL\n   entry extensions in CRLs that might be used in a general context.\n\
    \   Support for the CRL entry extensions defined in this specification is\n  \
    \ optional for conforming CRL issuers and applications.  However, CRL\n   issuers\
    \ SHOULD include reason codes (Section 5.3.1) and invalidity\n   dates (Section\
    \ 5.3.2) whenever this information is available.\n"
- title: 5.3.1.  Reason Code
  contents:
  - "5.3.1.  Reason Code\n   The reasonCode is a non-critical CRL entry extension\
    \ that identifies\n   the reason for the certificate revocation.  CRL issuers\
    \ are strongly\n   encouraged to include meaningful reason codes in CRL entries;\n\
    \   however, the reason code CRL entry extension SHOULD be absent instead\n  \
    \ of using the unspecified (0) reasonCode value.\n   The removeFromCRL (8) reasonCode\
    \ value may only appear in delta CRLs\n   and indicates that a certificate is\
    \ to be removed from a CRL because\n   either the certificate expired or was removed\
    \ from hold.  All other\n   reason codes may appear in any CRL and indicate that\
    \ the specified\n   certificate should be considered revoked.\n   id-ce-cRLReasons\
    \ OBJECT IDENTIFIER ::= { id-ce 21 }\n   -- reasonCode ::= { CRLReason }\n   CRLReason\
    \ ::= ENUMERATED {\n        unspecified             (0),\n        keyCompromise\
    \           (1),\n        cACompromise            (2),\n        affiliationChanged\
    \      (3),\n        superseded              (4),\n        cessationOfOperation\
    \    (5),\n        certificateHold         (6),\n             -- value 7 is not\
    \ used\n        removeFromCRL           (8),\n        privilegeWithdrawn     \
    \ (9),\n        aACompromise           (10) }\n"
- title: 5.3.2.  Invalidity Date
  contents:
  - "5.3.2.  Invalidity Date\n   The invalidity date is a non-critical CRL entry extension\
    \ that\n   provides the date on which it is known or suspected that the private\n\
    \   key was compromised or that the certificate otherwise became invalid.\n  \
    \ This date may be earlier than the revocation date in the CRL entry,\n   which\
    \ is the date at which the CA processed the revocation.  When a\n   revocation\
    \ is first posted by a CRL issuer in a CRL, the invalidity\n   date may precede\
    \ the date of issue of earlier CRLs, but the\n   revocation date SHOULD NOT precede\
    \ the date of issue of earlier CRLs.\n   Whenever this information is available,\
    \ CRL issuers are strongly\n   encouraged to share it with CRL users.\n   The\
    \ GeneralizedTime values included in this field MUST be expressed\n   in Greenwich\
    \ Mean Time (Zulu), and MUST be specified and interpreted\n   as defined in Section\
    \ 4.1.2.5.2.\n   id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }\n   InvalidityDate\
    \ ::=  GeneralizedTime\n"
- title: 5.3.3.  Certificate Issuer
  contents:
  - "5.3.3.  Certificate Issuer\n   This CRL entry extension identifies the certificate\
    \ issuer associated\n   with an entry in an indirect CRL, that is, a CRL that\
    \ has the\n   indirectCRL indicator set in its issuing distribution point\n  \
    \ extension.  When present, the certificate issuer CRL entry extension\n   includes\
    \ one or more names from the issuer field and/or issuer\n   alternative name extension\
    \ of the certificate that corresponds to the\n   CRL entry.  If this extension\
    \ is not present on the first entry in an\n   indirect CRL, the certificate issuer\
    \ defaults to the CRL issuer.  On\n   subsequent entries in an indirect CRL, if\
    \ this extension is not\n   present, the certificate issuer for the entry is the\
    \ same as that for\n   the preceding entry.  This field is defined as follows:\n\
    \   id-ce-certificateIssuer   OBJECT IDENTIFIER ::= { id-ce 29 }\n   CertificateIssuer\
    \ ::=     GeneralNames\n   Conforming CRL issuers MUST include in this extension\
    \ the\n   distinguished name (DN) from the issuer field of the certificate that\n\
    \   corresponds to this CRL entry.  The encoding of the DN MUST be\n   identical\
    \ to the encoding used in the certificate.\n   CRL issuers MUST mark this extension\
    \ as critical since an\n   implementation that ignored this extension could not\
    \ correctly\n   attribute CRL entries to certificates.  This specification RECOMMENDS\n\
    \   that implementations recognize this extension.\n"
- title: 6.  Certification Path Validation
  contents:
  - "6.  Certification Path Validation\n   Certification path validation procedures\
    \ for the Internet PKI are\n   based on the algorithm supplied in [X.509].  Certification\
    \ path\n   processing verifies the binding between the subject distinguished\n\
    \   name and/or subject alternative name and subject public key.  The\n   binding\
    \ is limited by constraints that are specified in the\n   certificates that comprise\
    \ the path and inputs that are specified by\n   the relying party.  The basic\
    \ constraints and policy constraints\n   extensions allow the certification path\
    \ processing logic to automate\n   the decision making process.\n   This section\
    \ describes an algorithm for validating certification\n   paths.  Conforming implementations\
    \ of this specification are not\n   required to implement this algorithm, but\
    \ MUST provide functionality\n   equivalent to the external behavior resulting\
    \ from this procedure.\n   Any algorithm may be used by a particular implementation\
    \ so long as\n   it derives the correct result.\n   In Section 6.1, the text describes\
    \ basic path validation.  Valid\n   paths begin with certificates issued by a\
    \ trust anchor.  The\n   algorithm requires the public key of the CA, the CA's\
    \ name, and any\n   constraints upon the set of paths that may be validated using\
    \ this\n   key.\n   The selection of a trust anchor is a matter of policy: it\
    \ could be\n   the top CA in a hierarchical PKI, the CA that issued the verifier's\n\
    \   own certificate(s), or any other CA in a network PKI.  The path\n   validation\
    \ procedure is the same regardless of the choice of trust\n   anchor.  In addition,\
    \ different applications may rely on different\n   trust anchors, or may accept\
    \ paths that begin with any of a set of\n   trust anchors.\n   Section 6.2 describes\
    \ methods for using the path validation algorithm\n   in specific implementations.\n\
    \   Section 6.3 describes the steps necessary to determine if a\n   certificate\
    \ is revoked when CRLs are the revocation mechanism used by\n   the certificate\
    \ issuer.\n"
- title: 6.1.  Basic Path Validation
  contents:
  - "6.1.  Basic Path Validation\n   This text describes an algorithm for X.509 path\
    \ processing.  A\n   conforming implementation MUST include an X.509 path processing\n\
    \   procedure that is functionally equivalent to the external behavior of\n  \
    \ this algorithm.  However, support for some of the certificate\n   extensions\
    \ processed in this algorithm are OPTIONAL for compliant\n   implementations.\
    \  Clients that do not support these extensions MAY\n   omit the corresponding\
    \ steps in the path validation algorithm.\n   For example, clients are not required\
    \ to support the policy mappings\n   extension.  Clients that do not support this\
    \ extension MAY omit the\n   path validation steps where policy mappings are processed.\
    \  Note that\n   clients MUST reject the certificate if it contains an unsupported\n\
    \   critical extension.\n   While the certificate and CRL profiles specified in\
    \ Sections 4 and 5\n   of this document specify values for certificate and CRL\
    \ fields and\n   extensions that are considered to be appropriate for the Internet\n\
    \   PKI, the algorithm presented in this section is not limited to\n   accepting\
    \ certificates and CRLs that conform to these profiles.\n   Therefore, the algorithm\
    \ only includes checks to verify that the\n   certification path is valid according\
    \ to X.509 and does not include\n   checks to verify that the certificates and\
    \ CRLs conform to this\n   profile.  While the algorithm could be extended to\
    \ include checks for\n   conformance to the profiles in Sections 4 and 5, this\
    \ profile\n   RECOMMENDS against including such checks.\n   The algorithm presented\
    \ in this section validates the certificate\n   with respect to the current date\
    \ and time.  A conforming\n   implementation MAY also support validation with\
    \ respect to some point\n   in the past.  Note that mechanisms are not available\
    \ for validating a\n   certificate with respect to a time outside the certificate\
    \ validity\n   period.\n   The trust anchor is an input to the algorithm.  There\
    \ is no\n   requirement that the same trust anchor be used to validate all\n \
    \  certification paths.  Different trust anchors MAY be used to validate\n   different\
    \ paths, as discussed further in Section 6.2.\n   The primary goal of path validation\
    \ is to verify the binding between\n   a subject distinguished name or a subject\
    \ alternative name and\n   subject public key, as represented in the target certificate,\
    \ based\n   on the public key of the trust anchor.  In most cases, the target\n\
    \   certificate will be an end entity certificate, but the target\n   certificate\
    \ may be a CA certificate as long as the subject public key\n   is to be used\
    \ for a purpose other than verifying the signature on a\n   public key certificate.\
    \  Verifying the binding between the name and\n   subject public key requires\
    \ obtaining a sequence of certificates that\n   support that binding.  The procedure\
    \ performed to obtain this\n   sequence of certificates is outside the scope of\
    \ this specification.\n   To meet this goal, the path validation process verifies,\
    \ among other\n   things, that a prospective certification path (a sequence of\
    \ n\n   certificates) satisfies the following conditions:\n      (a)  for all\
    \ x in {1, ..., n-1}, the subject of certificate x is\n           the issuer of\
    \ certificate x+1;\n      (b)  certificate 1 is issued by the trust anchor;\n\
    \      (c)  certificate n is the certificate to be validated (i.e., the\n    \
    \       target certificate); and\n      (d)  for all x in {1, ..., n}, the certificate\
    \ was valid at the\n           time in question.\n   A certificate MUST NOT appear\
    \ more than once in a prospective\n   certification path.\n   When the trust anchor\
    \ is provided in the form of a self-signed\n   certificate, this self-signed certificate\
    \ is not included as part of\n   the prospective certification path.  Information\
    \ about trust anchors\n   is provided as inputs to the certification path validation\
    \ algorithm\n   (Section 6.1.1).\n   A particular certification path may not,\
    \ however, be appropriate for\n   all applications.  Therefore, an application\
    \ MAY augment this\n   algorithm to further limit the set of valid paths.  The\
    \ path\n   validation process also determines the set of certificate policies\n\
    \   that are valid for this path, based on the certificate policies\n   extension,\
    \ policy mappings extension, policy constraints extension,\n   and inhibit anyPolicy\
    \ extension.  To achieve this, the path\n   validation algorithm constructs a\
    \ valid policy tree.  If the set of\n   certificate policies that are valid for\
    \ this path is not empty, then\n   the result will be a valid policy tree of depth\
    \ n, otherwise the\n   result will be a null valid policy tree.\n   A certificate\
    \ is self-issued if the same DN appears in the subject\n   and issuer fields (the\
    \ two DNs are the same if they match according\n   to the rules specified in Section\
    \ 7.1).  In general, the issuer and\n   subject of the certificates that make\
    \ up a path are different for\n   each certificate.  However, a CA may issue a\
    \ certificate to itself to\n   support key rollover or changes in certificate\
    \ policies.  These\n   self-issued certificates are not counted when evaluating\
    \ path length\n   or name constraints.\n   This section presents the algorithm\
    \ in four basic steps: (1)\n   initialization, (2) basic certificate processing,\
    \ (3) preparation for\n   the next certificate, and (4) wrap-up.  Steps (1) and\
    \ (4) are\n   performed exactly once.  Step (2) is performed for all certificates\n\
    \   in the path.  Step (3) is performed for all certificates in the path\n   except\
    \ the final certificate.  Figure 2 provides a high-level\n   flowchart of this\
    \ algorithm.\n                           +-------+\n                         \
    \  | START |\n                           +-------+\n                         \
    \      |\n                               V\n                       +----------------+\n\
    \                       | Initialization |\n                       +----------------+\n\
    \                               |\n                               +<--------------------+\n\
    \                               |                     |\n                    \
    \           V                     |\n                       +----------------+\
    \            |\n                       |  Process Cert  |            |\n     \
    \                  +----------------+            |\n                         \
    \      |                     |\n                               V             \
    \        |\n                       +================+            |\n         \
    \              |  IF Last Cert  |            |\n                       |    in\
    \ Path     |            |\n                       +================+         \
    \   |\n                         |            |              |\n              \
    \      THEN |            | ELSE         |\n                         V        \
    \    V              |\n              +----------------+ +----------------+  |\n\
    \              |    Wrap up     | |  Prepare for   |  |\n              +----------------+\
    \ |   Next Cert    |  |\n                      |          +----------------+ \
    \ |\n                      V               |              |\n                \
    \  +-------+           +--------------+\n                  | STOP  |\n       \
    \           +-------+\n         Figure 2.  Certification Path Processing Flowchart\n"
- title: 6.1.1.  Inputs
  contents:
  - "6.1.1.  Inputs\n   This algorithm assumes that the following nine inputs are\
    \ provided to\n   the path processing logic:\n      (a)  a prospective certification\
    \ path of length n.\n      (b)  the current date/time.\n      (c)  user-initial-policy-set:\
    \  A set of certificate policy\n           identifiers naming the policies that\
    \ are acceptable to the\n           certificate user.  The user-initial-policy-set\
    \ contains the\n           special value any-policy if the user is not concerned\
    \ about\n           certificate policy.\n      (d)  trust anchor information,\
    \ describing a CA that serves as a\n           trust anchor for the certification\
    \ path.  The trust anchor\n           information includes:\n         (1)  the\
    \ trusted issuer name,\n         (2)  the trusted public key algorithm,\n    \
    \     (3)  the trusted public key, and\n         (4)  optionally, the trusted\
    \ public key parameters associated\n              with the public key.\n     \
    \ The trust anchor information may be provided to the path\n      processing procedure\
    \ in the form of a self-signed certificate.\n      When the trust anchor information\
    \ is provided in the form of a\n      certificate, the name in the subject field\
    \ is used as the trusted\n      issuer name and the contents of the subjectPublicKeyInfo\
    \ field is\n      used as the source of the trusted public key algorithm and the\n\
    \      trusted public key.  The trust anchor information is trusted\n      because\
    \ it was delivered to the path processing procedure by some\n      trustworthy\
    \ out-of-band procedure.  If the trusted public key\n      algorithm requires\
    \ parameters, then the parameters are provided\n      along with the trusted public\
    \ key.\n      (e)  initial-policy-mapping-inhibit, which indicates if policy\n\
    \           mapping is allowed in the certification path.\n      (f)  initial-explicit-policy,\
    \ which indicates if the path must be\n           valid for at least one of the\
    \ certificate policies in the\n           user-initial-policy-set.\n      (g)\
    \  initial-any-policy-inhibit, which indicates whether the\n           anyPolicy\
    \ OID should be processed if it is included in a\n           certificate.\n  \
    \    (h)  initial-permitted-subtrees, which indicates for each name\n        \
    \   type (e.g., X.500 distinguished names, email addresses, or IP\n          \
    \ addresses) a set of subtrees within which all subject names\n           in every\
    \ certificate in the certification path MUST fall.\n           The initial-permitted-subtrees\
    \ input includes a set for each\n           name type.  For each name type, the\
    \ set may consist of a\n           single subtree that includes all names of that\
    \ name type or\n           one or more subtrees that each specifies a subset of\
    \ the\n           names of that name type, or the set may be empty.  If the set\n\
    \           for a name type is empty, then the certification path will be\n  \
    \         considered invalid if any certificate in the certification\n       \
    \    path includes a name of that name type.\n      (i)  initial-excluded-subtrees,\
    \ which indicates for each name type\n           (e.g., X.500 distinguished names,\
    \ email addresses, or IP\n           addresses) a set of subtrees within which\
    \ no subject name in\n           any certificate in the certification path may\
    \ fall.  The\n           initial-excluded-subtrees input includes a set for each\
    \ name\n           type.  For each name type, the set may be empty or may\n  \
    \         consist of one or more subtrees that each specifies a subset\n     \
    \      of the names of that name type.  If the set for a name type\n         \
    \  is empty, then no names of that name type are excluded.\n   Conforming implementations\
    \ are not required to support the setting of\n   all of these inputs.  For example,\
    \ a conforming implementation may be\n   designed to validate all certification\
    \ paths using a value of FALSE\n   for initial-any-policy-inhibit.\n"
- title: 6.1.2.  Initialization
  contents:
  - "6.1.2.  Initialization\n   This initialization phase establishes eleven state\
    \ variables based\n   upon the nine inputs:\n      (a)  valid_policy_tree:  A\
    \ tree of certificate policies with their\n           optional qualifiers; each\
    \ of the leaves of the tree\n           represents a valid policy at this stage\
    \ in the certification\n           path validation.  If valid policies exist at\
    \ this stage in\n           the certification path validation, the depth of the\
    \ tree is\n           equal to the number of certificates in the chain that have\n\
    \           been processed.  If valid policies do not exist at this stage\n  \
    \         in the certification path validation, the tree is set to\n         \
    \  NULL.  Once the tree is set to NULL, policy processing\n           ceases.\n\
    \           Each node in the valid_policy_tree includes three data\n         \
    \  objects: the valid policy, a set of associated policy\n           qualifiers,\
    \ and a set of one or more expected policy values.\n           If the node is\
    \ at depth x, the components of the node have\n           the following semantics:\n\
    \         (1)  The valid_policy is a single policy OID representing a\n      \
    \        valid policy for the path of length x.\n         (2)  The qualifier_set\
    \ is a set of policy qualifiers associated\n              with the valid policy\
    \ in certificate x.\n         (3)  The expected_policy_set contains one or more\
    \ policy OIDs\n              that would satisfy this policy in the certificate\
    \ x+1.\n      The initial value of the valid_policy_tree is a single node with\n\
    \      valid_policy anyPolicy, an empty qualifier_set, and an\n      expected_policy_set\
    \ with the single value anyPolicy.  This node is\n      considered to be at depth\
    \ zero.\n      Figure 3 is a graphic representation of the initial state of the\n\
    \      valid_policy_tree.  Additional figures will use this format to\n      describe\
    \ changes in the valid_policy_tree during path processing.\n              +----------------+\n\
    \              |   anyPolicy    |   <---- valid_policy\n              +----------------+\n\
    \              |       {}       |   <---- qualifier_set\n              +----------------+\n\
    \              |  {anyPolicy}   |   <---- expected_policy_set\n              +----------------+\n\
    \      Figure 3.  Initial Value of the valid_policy_tree State Variable\n    \
    \  (b)  permitted_subtrees:  a set of root names for each name type\n        \
    \   (e.g., X.500 distinguished names, email addresses, or IP\n           addresses)\
    \ defining a set of subtrees within which all\n           subject names in subsequent\
    \ certificates in the certification\n           path MUST fall.  This variable\
    \ includes a set for each name\n           type, and the initial value is initial-permitted-subtrees.\n\
    \      (c)  excluded_subtrees:  a set of root names for each name type\n     \
    \      (e.g., X.500 distinguished names, email addresses, or IP\n           addresses)\
    \ defining a set of subtrees within which no subject\n           name in subsequent\
    \ certificates in the certification path may\n           fall.  This variable\
    \ includes a set for each name type, and\n           the initial value is initial-excluded-subtrees.\n\
    \      (d)  explicit_policy:  an integer that indicates if a non-NULL\n      \
    \     valid_policy_tree is required.  The integer indicates the\n           number\
    \ of non-self-issued certificates to be processed before\n           this requirement\
    \ is imposed.  Once set, this variable may be\n           decreased, but may not\
    \ be increased.  That is, if a\n           certificate in the path requires a\
    \ non-NULL\n           valid_policy_tree, a later certificate cannot remove this\n\
    \           requirement.  If initial-explicit-policy is set, then the\n      \
    \     initial value is 0, otherwise the initial value is n+1.\n      (e)  inhibit_anyPolicy:\
    \  an integer that indicates whether the\n           anyPolicy policy identifier\
    \ is considered a match.  The\n           integer indicates the number of non-self-issued\
    \ certificates\n           to be processed before the anyPolicy OID, if asserted\
    \ in a\n           certificate other than an intermediate self-issued\n      \
    \     certificate, is ignored.  Once set, this variable may be\n           decreased,\
    \ but may not be increased.  That is, if a\n           certificate in the path\
    \ inhibits processing of anyPolicy, a\n           later certificate cannot permit\
    \ it.  If initial-any-policy-\n           inhibit is set, then the initial value\
    \ is 0, otherwise the\n           initial value is n+1.\n      (f)  policy_mapping:\
    \  an integer that indicates if policy mapping\n           is permitted.  The\
    \ integer indicates the number of non-self-\n           issued certificates to\
    \ be processed before policy mapping is\n           inhibited.  Once set, this\
    \ variable may be decreased, but may\n           not be increased.  That is, if\
    \ a certificate in the path\n           specifies that policy mapping is not permitted,\
    \ it cannot be\n           overridden by a later certificate.  If initial-policy-\n\
    \           mapping-inhibit is set, then the initial value is 0,\n           otherwise\
    \ the initial value is n+1.\n      (g)  working_public_key_algorithm:  the digital\
    \ signature\n           algorithm used to verify the signature of a certificate.\
    \  The\n           working_public_key_algorithm is initialized from the trusted\n\
    \           public key algorithm provided in the trust anchor\n           information.\n\
    \      (h)  working_public_key:  the public key used to verify the\n         \
    \  signature of a certificate.  The working_public_key is\n           initialized\
    \ from the trusted public key provided in the trust\n           anchor information.\n\
    \      (i)  working_public_key_parameters:  parameters associated with\n     \
    \      the current public key that may be required to verify a\n           signature\
    \ (depending upon the algorithm).  The\n           working_public_key_parameters\
    \ variable is initialized from\n           the trusted public key parameters provided\
    \ in the trust\n           anchor information.\n      (j)  working_issuer_name:\
    \  the issuer distinguished name expected\n           in the next certificate\
    \ in the chain.  The\n           working_issuer_name is initialized to the trusted\
    \ issuer name\n           provided in the trust anchor information.\n      (k)\
    \  max_path_length:  this integer is initialized to n, is\n           decremented\
    \ for each non-self-issued certificate in the path,\n           and may be reduced\
    \ to the value in the path length constraint\n           field within the basic\
    \ constraints extension of a CA\n           certificate.\n   Upon completion of\
    \ the initialization steps, perform the basic\n   certificate processing steps\
    \ specified in 6.1.3.\n"
- title: 6.1.3.  Basic Certificate Processing
  contents:
  - "6.1.3.  Basic Certificate Processing\n   The basic path processing actions to\
    \ be performed for certificate i\n   (for all i in [1..n]) are listed below.\n\
    \      (a)  Verify the basic certificate information.  The certificate\n     \
    \      MUST satisfy each of the following:\n         (1)  The signature on the\
    \ certificate can be verified using\n              working_public_key_algorithm,\
    \ the working_public_key, and\n              the working_public_key_parameters.\n\
    \         (2)  The certificate validity period includes the current time.\n  \
    \       (3)  At the current time, the certificate is not revoked.  This\n    \
    \          may be determined by obtaining the appropriate CRL\n              (Section\
    \ 6.3), by status information, or by out-of-band\n              mechanisms.\n\
    \         (4)  The certificate issuer name is the working_issuer_name.\n     \
    \ (b)  If certificate i is self-issued and it is not the final\n           certificate\
    \ in the path, skip this step for certificate i.\n           Otherwise, verify\
    \ that the subject name is within one of the\n           permitted_subtrees for\
    \ X.500 distinguished names, and verify\n           that each of the alternative\
    \ names in the subjectAltName\n           extension (critical or non-critical)\
    \ is within one of the\n           permitted_subtrees for that name type.\n  \
    \    (c)  If certificate i is self-issued and it is not the final\n          \
    \ certificate in the path, skip this step for certificate i.\n           Otherwise,\
    \ verify that the subject name is not within any of\n           the excluded_subtrees\
    \ for X.500 distinguished names, and\n           verify that each of the alternative\
    \ names in the\n           subjectAltName extension (critical or non-critical)\
    \ is not\n           within any of the excluded_subtrees for that name type.\n\
    \      (d)  If the certificate policies extension is present in the\n        \
    \   certificate and the valid_policy_tree is not NULL, process\n           the\
    \ policy information by performing the following steps in\n           order:\n\
    \         (1)  For each policy P not equal to anyPolicy in the\n             \
    \ certificate policies extension, let P-OID denote the OID\n              for\
    \ policy P and P-Q denote the qualifier set for policy\n              P.  Perform\
    \ the following steps in order:\n            (i)   For each node of depth i-1\
    \ in the valid_policy_tree\n                  where P-OID is in the expected_policy_set,\
    \ create a\n                  child node as follows: set the valid_policy to P-OID,\n\
    \                  set the qualifier_set to P-Q, and set the\n               \
    \   expected_policy_set to\n                  {P-OID}.\n                  For\
    \ example, consider a valid_policy_tree with a node\n                  of depth\
    \ i-1 where the expected_policy_set is {Gold,\n                  White}.  Assume\
    \ the certificate policies Gold and\n                  Silver appear in the certificate\
    \ policies extension of\n                  certificate i.  The Gold policy is\
    \ matched, but the\n                  Silver policy is not.  This rule will generate\
    \ a child\n                  node of depth i for the Gold policy.  The result\
    \ is\n                  shown as Figure 4.\n                             +-----------------+\n\
    \                             |       Red       |\n                          \
    \   +-----------------+\n                             |       {}        |\n  \
    \                           +-----------------+   node of depth i-1\n        \
    \                     |  {Gold, White}  |\n                             +-----------------+\n\
    \                                      |\n                                   \
    \   |\n                                      |\n                             \
    \         V\n                             +-----------------+\n              \
    \               |      Gold       |\n                             +-----------------+\n\
    \                             |       {}        |\n                          \
    \   +-----------------+   node of depth i\n                             |    \
    \ {Gold}      |\n                             +-----------------+\n          \
    \          Figure 4.  Processing an Exact Match\n            (ii)  If there was\
    \ no match in step (i) and the\n                  valid_policy_tree includes a\
    \ node of depth i-1 with\n                  the valid_policy anyPolicy, generate\
    \ a child node with\n                  the following values: set the valid_policy\
    \ to P-OID,\n                  set the qualifier_set to P-Q, and set the\n   \
    \               expected_policy_set to  {P-OID}.\n                  For example,\
    \ consider a valid_policy_tree with a node\n                  of depth i-1 where\
    \ the valid_policy is anyPolicy.\n                  Assume the certificate policies\
    \ Gold and Silver appear\n                  in the certificate policies extension\
    \ of certificate\n                  i.  The Gold policy does not have a qualifier,\
    \ but the\n                  Silver policy has the qualifier Q-Silver.  If Gold\
    \ and\n                  Silver were not matched in (i) above, this rule will\n\
    \                  generate two child nodes of depth i, one for each\n       \
    \           policy.  The result is shown as Figure 5.\n                      \
    \             +-----------------+\n                                   |    anyPolicy\
    \    |\n                                   +-----------------+\n             \
    \                      |       {}        |\n                                 \
    \  +-----------------+ node of depth i-1\n                                   |\
    \   {anyPolicy}   |\n                                   +-----------------+\n\
    \                                      /           \\\n                      \
    \               /             \\\n                                    /      \
    \         \\\n                                   /                 \\\n      \
    \               +-----------------+          +-----------------+\n           \
    \          |      Gold       |          |     Silver      |\n                \
    \     +-----------------+          +-----------------+\n                     |\
    \       {}        |          |   {Q-Silver}    |\n                     +-----------------+\
    \ nodes of +-----------------+\n                     |     {Gold}      | depth\
    \ i  |    {Silver}     |\n                     +-----------------+          +-----------------+\n\
    \                  Figure 5.  Processing Unmatched Policies when a\n         \
    \         Leaf Node Specifies anyPolicy\n         (2)  If the certificate policies\
    \ extension includes the policy\n              anyPolicy with the qualifier set\
    \ AP-Q and either (a)\n              inhibit_anyPolicy is greater than 0 or (b)\
    \ i<n and the\n              certificate is self-issued, then:\n             \
    \ For each node in the valid_policy_tree of depth i-1, for\n              each\
    \ value in the expected_policy_set (including\n              anyPolicy) that does\
    \ not appear in a child node, create a\n              child node with the following\
    \ values: set the valid_policy\n              to the value from the expected_policy_set\
    \ in the parent\n              node, set the qualifier_set to AP-Q, and set the\n\
    \              expected_policy_set to the value in the valid_policy from\n   \
    \           this node.\n              For example, consider a valid_policy_tree\
    \ with a node of\n              depth i-1 where the expected_policy_set is {Gold,\
    \ Silver}.\n              Assume anyPolicy appears in the certificate policies\n\
    \              extension of certificate i with no policy qualifiers, but\n   \
    \           Gold and Silver do not appear.  This rule will generate\n        \
    \      two child nodes of depth i, one for each policy.  The\n              result\
    \ is shown below as Figure 6.\n                               +-----------------+\n\
    \                               |      Red        |\n                        \
    \       +-----------------+\n                               |       {}       \
    \ |\n                               +-----------------+ node of depth i-1\n  \
    \                             |  {Gold, Silver} |\n                          \
    \     +-----------------+\n                                  /           \\\n\
    \                                 /             \\\n                         \
    \       /               \\\n                               /                 \\\
    \n                 +-----------------+          +-----------------+\n        \
    \         |      Gold       |          |     Silver      |\n                 +-----------------+\
    \          +-----------------+\n                 |       {}        |         \
    \ |       {}        |\n                 +-----------------+ nodes of +-----------------+\n\
    \                 |     {Gold}      | depth i  |    {Silver}     |\n         \
    \        +-----------------+          +-----------------+\n              Figure\
    \ 6.  Processing Unmatched Policies When the\n              Certificate Policies\
    \ Extension Specifies anyPolicy\n         (3)  If there is a node in the valid_policy_tree\
    \ of depth i-1\n              or less without any child nodes, delete that node.\
    \  Repeat\n              this step until there are no nodes of depth i-1 or less\n\
    \              without children.\n              For example, consider the valid_policy_tree\
    \ shown in\n              Figure 7 below.  The two nodes at depth i-1 that are\n\
    \              marked with an 'X' have no children, and they are deleted.\n  \
    \            Applying this rule to the resulting tree will cause the\n       \
    \       node at depth i-2 that is marked with a 'Y' to be deleted.\n         \
    \     In the resulting tree, there are no nodes of depth i-1 or\n            \
    \  less without children, and this step is complete.\n      (e)  If the certificate\
    \ policies extension is not present, set the\n           valid_policy_tree to\
    \ NULL.\n      (f)  Verify that either explicit_policy is greater than 0 or the\n\
    \           valid_policy_tree is not equal to NULL;\n   If any of steps (a), (b),\
    \ (c), or (f) fails, the procedure\n   terminates, returning a failure indication\
    \ and an appropriate reason.\n   If i is not equal to n, continue by performing\
    \ the preparatory steps\n   listed in Section 6.1.4.  If i is equal to n, perform\
    \ the wrap-up\n   steps listed in Section 6.1.5.\n                           \
    \      +-----------+\n                                 |           | node of depth\
    \ i-3\n                                 +-----------+\n                      \
    \           /     |     \\\n                                /      |      \\\n\
    \                               /       |       \\\n                   +-----------+\
    \ +-----------+ +-----------+\n                   |           | |           |\
    \ |     Y     | nodes of\n                   +-----------+ +-----------+ +-----------+\
    \ depth i-2\n                   /   \\               |             |\n       \
    \           /     \\              |             |\n                 /       \\\
    \             |             |\n      +-----------+ +-----------+ +-----------+\
    \ +-----------+ nodes of\n      |           | |     X     | |           | |  \
    \  X      |  depth\n      +-----------+ +-----------+ +-----------+ +-----------+\
    \   i-1\n            |                      /    |    \\\n            |      \
    \               /     |     \\\n            |                    /      |    \
    \  \\\n      +-----------+ +-----------+ +-----------+ +-----------+ nodes of\n\
    \      |           | |           | |           | |           |  depth\n      +-----------+\
    \ +-----------+ +-----------+ +-----------+   i\n             Figure 7.  Pruning\
    \ the valid_policy_tree\n"
- title: 6.1.4.  Preparation for Certificate i+1
  contents:
  - "6.1.4.  Preparation for Certificate i+1\n      To prepare for processing of certificate\
    \ i+1, perform the\n      following steps for certificate i:\n      (a)  If a\
    \ policy mappings extension is present, verify that the\n           special value\
    \ anyPolicy does not appear as an\n           issuerDomainPolicy or a subjectDomainPolicy.\n\
    \      (b)  If a policy mappings extension is present, then for each\n       \
    \    issuerDomainPolicy ID-P in the policy mappings extension:\n         (1) \
    \ If the policy_mapping variable is greater than 0, for each\n              node\
    \ in the valid_policy_tree of depth i where ID-P is the\n              valid_policy,\
    \ set expected_policy_set to the set of\n              subjectDomainPolicy values\
    \ that are specified as\n              equivalent to ID-P by the policy mappings\
    \ extension.\n              If no node of depth i in the valid_policy_tree has\
    \ a\n              valid_policy of ID-P but there is a node of depth i with a\n\
    \              valid_policy of anyPolicy, then generate a child node of\n    \
    \          the node of depth i-1 that has a valid_policy of anyPolicy\n      \
    \        as follows:\n            (i)    set the valid_policy to ID-P;\n     \
    \       (ii)   set the qualifier_set to the qualifier set of the\n           \
    \        policy anyPolicy in the certificate policies\n                   extension\
    \ of certificate i; and\n            (iii)  set the expected_policy_set to the\
    \ set of\n                   subjectDomainPolicy values that are specified as\n\
    \                   equivalent to ID-P by the policy mappings extension.\n   \
    \      (2)  If the policy_mapping variable is equal to 0:\n            (i)   \
    \ delete each node of depth i in the valid_policy_tree\n                   where\
    \ ID-P is the valid_policy.\n            (ii)   If there is a node in the valid_policy_tree\
    \ of depth\n                   i-1 or less without any child nodes, delete that\n\
    \                   node.  Repeat this step until there are no nodes of\n    \
    \               depth i-1 or less without children.\n      (c)  Assign the certificate\
    \ subject name to working_issuer_name.\n      (d)  Assign the certificate subjectPublicKey\
    \ to\n           working_public_key.\n      (e)  If the subjectPublicKeyInfo field\
    \ of the certificate contains\n           an algorithm field with non-null parameters,\
    \ assign the\n           parameters to the working_public_key_parameters variable.\n\
    \           If the subjectPublicKeyInfo field of the certificate contains\n  \
    \         an algorithm field with null parameters or parameters are\n        \
    \   omitted, compare the certificate subjectPublicKey algorithm\n           to\
    \ the working_public_key_algorithm.  If the certificate\n           subjectPublicKey\
    \ algorithm and the\n           working_public_key_algorithm are different, set\
    \ the\n           working_public_key_parameters to null.\n      (f)  Assign the\
    \ certificate subjectPublicKey algorithm to the\n           working_public_key_algorithm\
    \ variable.\n      (g)  If a name constraints extension is included in the\n \
    \          certificate, modify the permitted_subtrees and\n           excluded_subtrees\
    \ state variables as follows:\n         (1)  If permittedSubtrees is present in\
    \ the certificate, set\n              the permitted_subtrees state variable to\
    \ the intersection\n              of its previous value and the value indicated\
    \ in the\n              extension field.  If permittedSubtrees does not include\
    \ a\n              particular name type, the permitted_subtrees state\n      \
    \        variable is unchanged for that name type.  For example,\n           \
    \   the intersection of example.com and foo.example.com is\n              foo.example.com.\
    \  And the intersection of example.com and\n              example.net is the empty\
    \ set.\n         (2)  If excludedSubtrees is present in the certificate, set the\n\
    \              excluded_subtrees state variable to the union of its\n        \
    \      previous value and the value indicated in the extension\n             \
    \ field.  If excludedSubtrees does not include a particular\n              name\
    \ type, the excluded_subtrees state variable is\n              unchanged for that\
    \ name type.  For example, the union of\n              the name spaces example.com\
    \ and foo.example.com is\n              example.com.  And the union of example.com\
    \ and example.net\n              is both name spaces.\n      (h)  If certificate\
    \ i is not self-issued:\n         (1)  If explicit_policy is not 0, decrement\
    \ explicit_policy by\n              1.\n         (2)  If policy_mapping is not\
    \ 0, decrement policy_mapping by 1.\n         (3)  If inhibit_anyPolicy is not\
    \ 0, decrement inhibit_anyPolicy\n              by 1.\n      (i)  If a policy\
    \ constraints extension is included in the\n           certificate, modify the\
    \ explicit_policy and policy_mapping\n           state variables as follows:\n\
    \         (1)  If requireExplicitPolicy is present and is less than\n        \
    \      explicit_policy, set explicit_policy to the value of\n              requireExplicitPolicy.\n\
    \         (2)  If inhibitPolicyMapping is present and is less than\n         \
    \     policy_mapping, set policy_mapping to the value of\n              inhibitPolicyMapping.\n\
    \      (j)  If the inhibitAnyPolicy extension is included in the\n           certificate\
    \ and is less than inhibit_anyPolicy, set\n           inhibit_anyPolicy to the\
    \ value of inhibitAnyPolicy.\n      (k)  If certificate i is a version 3 certificate,\
    \ verify that the\n           basicConstraints extension is present and that cA\
    \ is set to\n           TRUE.  (If certificate i is a version 1 or version 2\n\
    \           certificate, then the application MUST either verify that\n      \
    \     certificate i is a CA certificate through out-of-band means\n          \
    \ or reject the certificate.  Conforming implementations may\n           choose\
    \ to reject all version 1 and version 2 intermediate\n           certificates.)\n\
    \      (l)  If the certificate was not self-issued, verify that\n           max_path_length\
    \ is greater than zero and decrement\n           max_path_length by 1.\n     \
    \ (m)  If pathLenConstraint is present in the certificate and is\n           less\
    \ than max_path_length, set max_path_length to the value\n           of pathLenConstraint.\n\
    \      (n)  If a key usage extension is present, verify that the\n           keyCertSign\
    \ bit is set.\n      (o)  Recognize and process any other critical extension present\
    \ in\n           the certificate.  Process any other recognized non-critical\n\
    \           extension present in the certificate that is relevant to path\n  \
    \         processing.\n   If check (a), (k), (l), (n), or (o) fails, the procedure\
    \ terminates,\n   returning a failure indication and an appropriate reason.\n\
    \   If (a), (k), (l), (n), and (o) have completed successfully, increment\n  \
    \ i and perform the basic certificate processing specified in Section\n   6.1.3.\n"
- title: 6.1.5.  Wrap-Up Procedure
  contents:
  - "6.1.5.  Wrap-Up Procedure\n   To complete the processing of the target certificate,\
    \ perform the\n   following steps for certificate n:\n      (a)  If explicit_policy\
    \ is not 0, decrement explicit_policy by 1.\n      (b)  If a policy constraints\
    \ extension is included in the\n           certificate and requireExplicitPolicy\
    \ is present and has a\n           value of 0, set the explicit_policy state variable\
    \ to 0.\n      (c)  Assign the certificate subjectPublicKey to\n           working_public_key.\n\
    \      (d)  If the subjectPublicKeyInfo field of the certificate contains\n  \
    \         an algorithm field with non-null parameters, assign the\n          \
    \ parameters to the working_public_key_parameters variable.\n           If the\
    \ subjectPublicKeyInfo field of the certificate contains\n           an algorithm\
    \ field with null parameters or parameters are\n           omitted, compare the\
    \ certificate subjectPublicKey algorithm\n           to the working_public_key_algorithm.\
    \  If the certificate\n           subjectPublicKey algorithm and the\n       \
    \    working_public_key_algorithm are different, set the\n           working_public_key_parameters\
    \ to null.\n      (e)  Assign the certificate subjectPublicKey algorithm to the\n\
    \           working_public_key_algorithm variable.\n      (f)  Recognize and process\
    \ any other critical extension present in\n           the certificate n.  Process\
    \ any other recognized non-critical\n           extension present in certificate\
    \ n that is relevant to path\n           processing.\n      (g)  Calculate the\
    \ intersection of the valid_policy_tree and the\n           user-initial-policy-set,\
    \ as follows:\n         (i)    If the valid_policy_tree is NULL, the intersection\
    \ is\n                NULL.\n         (ii)   If the valid_policy_tree is not NULL\
    \ and the user-\n                initial-policy-set is any-policy, the intersection\
    \ is\n                the entire valid_policy_tree.\n         (iii)  If the valid_policy_tree\
    \ is not NULL and the user-\n                initial-policy-set is not any-policy,\
    \ calculate the\n                intersection of the valid_policy_tree and the\
    \ user-\n                initial-policy-set as follows:\n             1.  Determine\
    \ the set of policy nodes whose parent nodes\n                 have a valid_policy\
    \ of anyPolicy.  This is the\n                 valid_policy_node_set.\n      \
    \       2.  If the valid_policy of any node in the\n                 valid_policy_node_set\
    \ is not in the user-initial-\n                 policy-set and is not anyPolicy,\
    \ delete this node and\n                 all its children.\n             3.  If\
    \ the valid_policy_tree includes a node of depth n\n                 with the\
    \ valid_policy anyPolicy and the user-initial-\n                 policy-set is\
    \ not any-policy, perform the following\n                 steps:\n           \
    \    a.  Set P-Q to the qualifier_set in the node of depth n\n               \
    \    with valid_policy anyPolicy.\n               b.  For each P-OID in the user-initial-policy-set\
    \ that is\n                   not the valid_policy of a node in the\n        \
    \           valid_policy_node_set, create a child node whose\n               \
    \    parent is the node of depth n-1 with the valid_policy\n                 \
    \  anyPolicy.  Set the values in the child node as\n                   follows:\
    \ set the valid_policy to P-OID, set the\n                   qualifier_set to\
    \ P-Q, and set the expected_policy_set\n                   to {P-OID}.\n     \
    \          c.  Delete the node of depth n with the valid_policy\n            \
    \       anyPolicy.\n             4.  If there is a node in the valid_policy_tree\
    \ of depth\n                 n-1 or less without any child nodes, delete that\
    \ node.\n                 Repeat this step until there are no nodes of depth n-1\n\
    \                 or less without children.\n   If either (1) the value of explicit_policy\
    \ variable is greater than\n   zero or (2) the valid_policy_tree is not NULL,\
    \ then path processing\n   has succeeded.\n"
- title: 6.1.6.  Outputs
  contents:
  - "6.1.6.  Outputs\n   If path processing succeeds, the procedure terminates, returning\
    \ a\n   success indication together with final value of the\n   valid_policy_tree,\
    \ the working_public_key, the\n   working_public_key_algorithm, and the working_public_key_parameters.\n"
- title: 6.2.  Using the Path Validation Algorithm
  contents:
  - "6.2.  Using the Path Validation Algorithm\n   The path validation algorithm describes\
    \ the process of validating a\n   single certification path.  While each certification\
    \ path begins with\n   a specific trust anchor, there is no requirement that all\n\
    \   certification paths validated by a particular system share a single\n   trust\
    \ anchor.  The selection of one or more trusted CAs is a local\n   decision. \
    \ A system may provide any one of its trusted CAs as the\n   trust anchor for\
    \ a particular path.  The inputs to the path\n   validation algorithm may be different\
    \ for each path.  The inputs used\n   to process a path may reflect application-specific\
    \ requirements or\n   limitations in the trust accorded a particular trust anchor.\
    \  For\n   example, a trusted CA may only be trusted for a particular\n   certificate\
    \ policy.  This restriction can be expressed through the\n   inputs to the path\
    \ validation procedure.\n   An implementation MAY augment the algorithm presented\
    \ in Section 6.1\n   to further limit the set of valid certification paths that\
    \ begin with\n   a particular trust anchor.  For example, an implementation MAY\
    \ modify\n   the algorithm to apply a path length constraint to a specific trust\n\
    \   anchor during the initialization phase, or the application MAY\n   require\
    \ the presence of a particular alternative name form in the\n   target certificate,\
    \ or the application MAY impose requirements on\n   application-specific extensions.\
    \  Thus, the path validation algorithm\n   presented in Section 6.1 defines the\
    \ minimum conditions for a path to\n   be considered valid.\n   Where a CA distributes\
    \ self-signed certificates to specify trust\n   anchor information, certificate\
    \ extensions can be used to specify\n   recommended inputs to path validation.\
    \  For example, a policy\n   constraints extension could be included in the self-signed\n\
    \   certificate to indicate that paths beginning with this trust anchor\n   should\
    \ be trusted only for the specified policies.  Similarly, a name\n   constraints\
    \ extension could be included to indicate that paths\n   beginning with this trust\
    \ anchor should be trusted only for the\n   specified name spaces.  The path validation\
    \ algorithm presented in\n   Section 6.1 does not assume that trust anchor information\
    \ is provided\n   in self-signed certificates and does not specify processing\
    \ rules for\n   additional information included in such certificates.\n   Implementations\
    \ that use self-signed certificates to specify trust\n   anchor information are\
    \ free to process or ignore such information.\n"
- title: 6.3.  CRL Validation
  contents:
  - "6.3.  CRL Validation\n   This section describes the steps necessary to determine\
    \ if a\n   certificate is revoked when CRLs are the revocation mechanism used\
    \ by\n   the certificate issuer.  Conforming implementations that support CRLs\n\
    \   are not required to implement this algorithm, but they MUST be\n   functionally\
    \ equivalent to the external behavior resulting from this\n   procedure when processing\
    \ CRLs that are issued in conformance with\n   this profile.  Any algorithm may\
    \ be used by a particular\n   implementation so long as it derives the correct\
    \ result.\n   This algorithm assumes that all of the needed CRLs are available\
    \ in a\n   local cache.  Further, if the next update time of a CRL has passed,\n\
    \   the algorithm assumes a mechanism to fetch a current CRL and place it\n  \
    \ in the local CRL cache.\n   This algorithm defines a set of inputs, a set of\
    \ state variables, and\n   processing steps that are performed for each certificate\
    \ in the path.\n   The algorithm output is the revocation status of the certificate.\n"
- title: 6.3.1.  Revocation Inputs
  contents:
  - "6.3.1.  Revocation Inputs\n   To support revocation processing, the algorithm\
    \ requires two inputs:\n      (a)  certificate:  The algorithm requires the certificate\
    \ serial\n           number and issuer name to determine whether a certificate\
    \ is\n           on a particular CRL.  The basicConstraints extension is used\n\
    \           to determine whether the supplied certificate is associated\n    \
    \       with a CA or an end entity.  If present, the algorithm uses\n        \
    \   the cRLDistributionPoints and freshestCRL extensions to\n           determine\
    \ revocation status.\n      (b)  use-deltas:  This boolean input determines whether\
    \ delta CRLs\n           are applied to CRLs.\n"
- title: 6.3.2.  Initialization and Revocation State Variables
  contents:
  - "6.3.2.  Initialization and Revocation State Variables\n   To support CRL processing,\
    \ the algorithm requires the following state\n   variables:\n      (a)  reasons_mask:\
    \  This variable contains the set of revocation\n           reasons supported\
    \ by the CRLs and delta CRLs processed so\n           far.  The legal members\
    \ of the set are the possible\n           revocation reason values minus unspecified:\
    \ keyCompromise,\n           cACompromise, affiliationChanged, superseded,\n \
    \          cessationOfOperation, certificateHold, privilegeWithdrawn,\n      \
    \     and aACompromise.  The special value all-reasons is used to\n          \
    \ denote the set of all legal members.  This variable is\n           initialized\
    \ to the empty set.\n      (b)  cert_status:  This variable contains the status\
    \ of the\n           certificate.  This variable may be assigned one of the\n\
    \           following values: unspecified, keyCompromise, cACompromise,\n    \
    \       affiliationChanged, superseded, cessationOfOperation,\n           certificateHold,\
    \ removeFromCRL, privilegeWithdrawn,\n           aACompromise, the special value\
    \ UNREVOKED, or the special\n           value UNDETERMINED.  This variable is\
    \ initialized to the\n           special value UNREVOKED.\n      (c)  interim_reasons_mask:\
    \  This contains the set of revocation\n           reasons supported by the CRL\
    \ or delta CRL currently being\n           processed.\n   Note: In some environments,\
    \ it is not necessary to check all reason\n   codes.  For example, some environments\
    \ are only concerned with\n   cACompromise and keyCompromise for CA certificates.\
    \  This algorithm\n   checks all reason codes.  Additional processing and state\
    \ variables\n   may be necessary to limit the checking to a subset of the reason\n\
    \   codes.\n"
- title: 6.3.3.  CRL Processing
  contents:
  - "6.3.3.  CRL Processing\n   This algorithm begins by assuming that the certificate\
    \ is not\n   revoked.  The algorithm checks one or more CRLs until either the\n\
    \   certificate status is determined to be revoked or sufficient CRLs\n   have\
    \ been checked to cover all reason codes.\n   For each distribution point (DP)\
    \ in the certificate's CRL\n   distribution points extension, for each corresponding\
    \ CRL in the\n   local CRL cache, while ((reasons_mask is not all-reasons) and\n\
    \   (cert_status is UNREVOKED)) perform the following:\n      (a)  Update the\
    \ local CRL cache by obtaining a complete CRL, a\n           delta CRL, or both,\
    \ as required:\n         (1)  If the current time is after the value of the CRL\
    \ next\n              update field, then do one of the following:\n          \
    \  (i)   If use-deltas is set and either the certificate or the\n            \
    \      CRL contains the freshest CRL extension, obtain a\n                  delta\
    \ CRL with a next update value that is after the\n                  current time\
    \ and can be used to update the locally\n                  cached CRL as specified\
    \ in Section 5.2.4.\n            (ii)  Update the local CRL cache with a current\
    \ complete\n                  CRL, verify that the current time is before the\
    \ next\n                  update value in the new CRL, and continue processing\n\
    \                  with the new CRL.  If use-deltas is set and either the\n  \
    \                certificate or the CRL contains the freshest CRL\n          \
    \        extension, then obtain the current delta CRL that can\n             \
    \     be used to update the new locally cached complete CRL\n                \
    \  as specified in Section 5.2.4.\n         (2)  If the current time is before\
    \ the value of the next update\n              field, use-deltas is set, and either\
    \ the certificate or\n              the CRL contains the freshest CRL extension,\
    \ then obtain\n              the current delta CRL that can be used to update\
    \ the\n              locally cached complete CRL as specified in Section 5.2.4.\n\
    \      (b)  Verify the issuer and scope of the complete CRL as follows:\n    \
    \     (1)  If the DP includes cRLIssuer, then verify that the issuer\n       \
    \       field in the complete CRL matches cRLIssuer in the DP and\n          \
    \    that the complete CRL contains an issuing distribution\n              point\
    \ extension with the indirectCRL boolean asserted.\n              Otherwise, verify\
    \ that the CRL issuer matches the\n              certificate issuer.\n       \
    \  (2)  If the complete CRL includes an issuing distribution point\n         \
    \     (IDP) CRL extension, check the following:\n            (i)   If the distribution\
    \ point name is present in the IDP\n                  CRL extension and the distribution\
    \ field is present in\n                  the DP, then verify that one of the names\
    \ in the IDP\n                  matches one of the names in the DP.  If the\n\
    \                  distribution point name is present in the IDP CRL\n       \
    \           extension and the distribution field is omitted from\n           \
    \       the DP, then verify that one of the names in the IDP\n               \
    \   matches one of the names in the cRLIssuer field of the\n                 \
    \ DP.\n            (ii)  If the onlyContainsUserCerts boolean is asserted in\n\
    \                  the IDP CRL extension, verify that the certificate\n      \
    \            does not include the basic constraints extension with\n         \
    \         the cA boolean asserted.\n            (iii) If the onlyContainsCACerts\
    \ boolean is asserted in the\n                  IDP CRL extension, verify that\
    \ the certificate\n                  includes the basic constraints extension\
    \ with the cA\n                  boolean asserted.\n            (iv)  Verify that\
    \ the onlyContainsAttributeCerts boolean is\n                  not asserted.\n\
    \      (c)  If use-deltas is set, verify the issuer and scope of the\n       \
    \    delta CRL as follows:\n         (1)  Verify that the delta CRL issuer matches\
    \ the complete CRL\n              issuer.\n         (2)  If the complete CRL includes\
    \ an issuing distribution point\n              (IDP) CRL extension, verify that\
    \ the delta CRL contains a\n              matching IDP CRL extension.  If the\
    \ complete CRL omits an\n              IDP CRL extension, verify that the delta\
    \ CRL also omits an\n              IDP CRL extension.\n         (3)  Verify that\
    \ the delta CRL authority key identifier\n              extension matches the\
    \ complete CRL authority key\n              identifier extension.\n      (d) \
    \ Compute the interim_reasons_mask for this CRL as follows:\n         (1)  If\
    \ the issuing distribution point (IDP) CRL extension is\n              present\
    \ and includes onlySomeReasons and the DP includes\n              reasons, then\
    \ set interim_reasons_mask to the intersection\n              of reasons in the\
    \ DP and onlySomeReasons in the IDP CRL\n              extension.\n         (2)\
    \  If the IDP CRL extension includes onlySomeReasons but the\n              DP\
    \ omits reasons, then set interim_reasons_mask to the\n              value of\
    \ onlySomeReasons in the IDP CRL extension.\n         (3)  If the IDP CRL extension\
    \ is not present or omits\n              onlySomeReasons but the DP includes reasons,\
    \ then set\n              interim_reasons_mask to the value of DP reasons.\n \
    \        (4)  If the IDP CRL extension is not present or omits\n             \
    \ onlySomeReasons and the DP omits reasons, then set\n              interim_reasons_mask\
    \ to the special value all-reasons.\n      (e)  Verify that interim_reasons_mask\
    \ includes one or more reasons\n           that are not included in the reasons_mask.\n\
    \      (f)  Obtain and validate the certification path for the issuer of\n   \
    \        the complete CRL.  The trust anchor for the certification\n         \
    \  path MUST be the same as the trust anchor used to validate\n           the\
    \ target certificate.  If a key usage extension is present\n           in the\
    \ CRL issuer's certificate, verify that the cRLSign bit\n           is set.\n\
    \      (g)  Validate the signature on the complete CRL using the public\n    \
    \       key validated in step (f).\n      (h)  If use-deltas is set, then validate\
    \ the signature on the\n           delta CRL using the public key validated in\
    \ step (f).\n      (i)  If use-deltas is set, then search for the certificate\
    \ on the\n           delta CRL.  If an entry is found that matches the certificate\n\
    \           issuer and serial number as described in Section 5.3.3, then\n   \
    \        set the cert_status variable to the indicated reason as\n           follows:\n\
    \         (1)  If the reason code CRL entry extension is present, set the\n  \
    \            cert_status variable to the value of the reason code CRL\n      \
    \        entry extension.\n         (2)  If the reason code CRL entry extension\
    \ is not present, set\n              the cert_status variable to the value unspecified.\n\
    \      (j)  If (cert_status is UNREVOKED), then search for the\n           certificate\
    \ on the complete CRL.  If an entry is found that\n           matches the certificate\
    \ issuer and serial number as described\n           in Section 5.3.3, then set\
    \ the cert_status variable to the\n           indicated reason as described in\
    \ step (i).\n      (k)  If (cert_status is removeFromCRL), then set cert_status\
    \ to\n           UNREVOKED.\n      (l)  Set the reasons_mask state variable to\
    \ the union of its\n           previous value and the value of the interim_reasons_mask\n\
    \           state variable.\n   If ((reasons_mask is all-reasons) OR (cert_status\
    \ is not UNREVOKED)),\n   then the revocation status has been determined, so return\n\
    \   cert_status.\n   If the revocation status has not been determined, repeat\
    \ the process\n   above with any available CRLs not specified in a distribution\
    \ point\n   but issued by the certificate issuer.  For the processing of such\
    \ a\n   CRL, assume a DP with both the reasons and the cRLIssuer fields\n   omitted\
    \ and a distribution point name of the certificate issuer.\n   That is, the sequence\
    \ of names in fullName is generated from the\n   certificate issuer field as well\
    \ as the certificate issuerAltName\n   extension.  After processing such CRLs,\
    \ if the revocation status has\n   still not been determined, then return the\
    \ cert_status UNDETERMINED.\n"
- title: 7.  Processing Rules for Internationalized Names
  contents:
  - "7.  Processing Rules for Internationalized Names\n   Internationalized names\
    \ may be encountered in numerous certificate\n   and CRL fields and extensions,\
    \ including distinguished names,\n   internationalized domain names, electronic\
    \ mail addresses, and\n   Internationalized Resource Identifiers (IRIs).  Storage,\
    \ comparison,\n   and presentation of such names require special care.  Some characters\n\
    \   may be encoded in multiple ways.  The same names could be represented\n  \
    \ in multiple encodings (e.g., ASCII or UTF8).  This section\n   establishes conformance\
    \ requirements for storage or comparison of\n   each of these name forms.  Informative\
    \ guidance on presentation is\n   provided for some of these name forms.\n"
- title: 7.1.  Internationalized Names in Distinguished Names
  contents:
  - "7.1.  Internationalized Names in Distinguished Names\n   Representation of internationalized\
    \ names in distinguished names is\n   covered in Sections 4.1.2.4, Issuer Name,\
    \ and 4.1.2.6, Subject Name.\n   Standard naming attributes, such as common name,\
    \ employ the\n   DirectoryString type, which supports internationalized names\
    \ through\n   a variety of language encodings.  Conforming implementations MUST\n\
    \   support UTF8String and PrintableString.  RFC 3280 required only\n   binary\
    \ comparison of attribute values encoded in UTF8String, however,\n   this specification\
    \ requires a more comprehensive handling of\n   comparison.  Implementations may\
    \ encounter certificates and CRLs with\n   names encoded using TeletexString,\
    \ BMPString, or UniversalString, but\n   support for these is OPTIONAL.\n   Conforming\
    \ implementations MUST use the LDAP StringPrep profile\n   (including insignificant\
    \ space handling), as specified in [RFC4518],\n   as the basis for comparison\
    \ of distinguished name attributes encoded\n   in either PrintableString or UTF8String.\
    \  Conforming implementations\n   MUST support name comparisons using caseIgnoreMatch.\
    \  Support for\n   attribute types that use other equality matching rules is optional.\n\
    \   Before comparing names using the caseIgnoreMatch matching rule,\n   conforming\
    \ implementations MUST perform the six-step string\n   preparation algorithm described\
    \ in [RFC4518] for each attribute of\n   type DirectoryString, with the following\
    \ clarifications:\n      *  In step 2, Map, the mapping shall include case folding\
    \ as\n         specified in Appendix B.2 of [RFC3454].\n      *  In step 6, Insignificant\
    \ Character Removal, perform white space\n         compression as specified in\
    \ Section 2.6.1, Insignificant Space\n         Handling, of [RFC4518].\n   When\
    \ performing the string preparation algorithm, attributes MUST be\n   treated\
    \ as stored values.\n   Comparisons of domainComponent attributes MUST be performed\
    \ as\n   specified in Section 7.3.\n   Two naming attributes match if the attribute\
    \ types are the same and\n   the values of the attributes are an exact match after\
    \ processing with\n   the string preparation algorithm.  Two relative distinguished\
    \ names\n   RDN1 and RDN2 match if they have the same number of naming attributes\n\
    \   and for each naming attribute in RDN1 there is a matching naming\n   attribute\
    \ in RDN2.  Two distinguished names DN1 and DN2 match if they\n   have the same\
    \ number of RDNs, for each RDN in DN1 there is a matching\n   RDN in DN2, and\
    \ the matching RDNs appear in the same order in both\n   DNs.  A distinguished\
    \ name DN1 is within the subtree defined by the\n   distinguished name DN2 if\
    \ DN1 contains at least as many RDNs as DN2,\n   and DN1 and DN2 are a match when\
    \ trailing RDNs in DN1 are ignored.\n"
- title: 7.2.  Internationalized Domain Names in GeneralName
  contents:
  - "7.2.  Internationalized Domain Names in GeneralName\n   Internationalized Domain\
    \ Names (IDNs) may be included in certificates\n   and CRLs in the subjectAltName\
    \ and issuerAltName extensions, name\n   constraints extension, authority information\
    \ access extension,\n   subject information access extension, CRL distribution\
    \ points\n   extension, and issuing distribution point extension.  Each of these\n\
    \   extensions uses the GeneralName type; one choice in GeneralName is\n   the\
    \ dNSName field, which is defined as type IA5String.\n   IA5String is limited\
    \ to the set of ASCII characters.  To accommodate\n   internationalized domain\
    \ names in the current structure, conforming\n   implementations MUST convert\
    \ internationalized domain names to the\n   ASCII Compatible Encoding (ACE) format\
    \ as specified in Section 4 of\n   RFC 3490 before storage in the dNSName field.\
    \  Specifically,\n   conforming implementations MUST perform the conversion operation\n\
    \   specified in Section 4 of RFC 3490, with the following\n   clarifications:\n\
    \      *  in step 1, the domain name SHALL be considered a \"stored\n        \
    \ string\".  That is, the AllowUnassigned flag SHALL NOT be set;\n      *  in\
    \ step 3, set the flag called \"UseSTD3ASCIIRules\";\n      *  in step 4, process\
    \ each label with the \"ToASCII\" operation; and\n      *  in step 5, change all\
    \ label separators to U+002E (full stop).\n   When comparing DNS names for equality,\
    \ conforming implementations\n   MUST perform a case-insensitive exact match on\
    \ the entire DNS name.\n   When evaluating name constraints, conforming implementations\
    \ MUST\n   perform a case-insensitive exact match on a label-by-label basis. \
    \ As\n   noted in Section 4.2.1.10, any DNS name that may be constructed by\n\
    \   adding labels to the left-hand side of the domain name given as the\n   constraint\
    \ is considered to fall within the indicated subtree.\n   Implementations should\
    \ convert IDNs to Unicode before display.\n   Specifically, conforming implementations\
    \ should perform the\n   conversion operation specified in Section 4 of RFC 3490,\
    \ with the\n   following clarifications:\n      *  in step 1, the domain name\
    \ SHALL be considered a \"stored\n         string\".  That is, the AllowUnassigned\
    \ flag SHALL NOT be set;\n      *  in step 3, set the flag called \"UseSTD3ASCIIRules\"\
    ;\n      *  in step 4, process each label with the \"ToUnicode\" operation;\n\
    \         and\n      *  skip step 5.\n   Note:  Implementations MUST allow for\
    \ increased space requirements\n   for IDNs.  An IDN ACE label will begin with\
    \ the four additional\n   characters \"xn--\" and may require as many as five\
    \ ASCII characters to\n   specify a single international character.\n"
- title: 7.3.  Internationalized Domain Names in Distinguished Names
  contents:
  - "7.3.  Internationalized Domain Names in Distinguished Names\n   Domain Names\
    \ may also be represented as distinguished names using\n   domain components in\
    \ the subject field, the issuer field, the\n   subjectAltName extension, or the\
    \ issuerAltName extension.  As with\n   the dNSName in the GeneralName type, the\
    \ value of this attribute is\n   defined as an IA5String.  Each domainComponent\
    \ attribute represents a\n   single label.  To represent a label from an IDN in\
    \ the distinguished\n   name, the implementation MUST perform the \"ToASCII\"\
    \ label conversion\n   specified in Section 4.1 of RFC 3490.  The label SHALL\
    \ be considered\n   a \"stored string\".  That is, the AllowUnassigned flag SHALL\
    \ NOT be\n   set.\n   Conforming implementations shall perform a case-insensitive\
    \ exact\n   match when comparing domainComponent attributes in distinguished\n\
    \   names, as described in Section 7.2.\n   Implementations should convert ACE\
    \ labels to Unicode before display.\n   Specifically, conforming implementations\
    \ should perform the\n   \"ToUnicode\" conversion operation specified, as described\
    \ in Section\n   7.2, on each ACE label before displaying the name.\n"
- title: 7.4.  Internationalized Resource Identifiers
  contents:
  - "7.4.  Internationalized Resource Identifiers\n   Internationalized Resource Identifiers\
    \ (IRIs) are the\n   internationalized complement to the Uniform Resource Identifier\n\
    \   (URI).  IRIs are sequences of characters from Unicode, while URIs are\n  \
    \ sequences of characters from the ASCII character set.  [RFC3987]\n   defines\
    \ a mapping from IRIs to URIs.  While IRIs are not encoded\n   directly in any\
    \ certificate fields or extensions, their mapped URIs\n   may be included in certificates\
    \ and CRLs.  URIs may appear in the\n   subjectAltName and issuerAltName extensions,\
    \ name constraints\n   extension, authority information access extension, subject\n\
    \   information access extension, issuing distribution point extension,\n   and\
    \ CRL distribution points extension.  Each of these extensions uses\n   the GeneralName\
    \ type; URIs are encoded in the\n   uniformResourceIdentifier field in GeneralName,\
    \ which is defined as\n   type IA5String.\n   To accommodate IRIs in the current\
    \ structure, conforming\n   implementations MUST map IRIs to URIs as specified\
    \ in Section 3.1 of\n   [RFC3987], with the following clarifications:\n      *\
    \  in step 1, generate a UCS character sequence from the original\n         IRI\
    \ format normalizing according to the NFC as specified in\n         Variant b\
    \ (normalization according to NFC);\n      *  perform step 2 using the output\
    \ from step 1.\n   Implementations MUST NOT convert the ireg-name component before\n\
    \   performing step 2.\n   Before URIs may be compared, conforming implementations\
    \ MUST perform\n   a combination of the syntax-based and scheme-based normalization\n\
    \   techniques described in [RFC3987].  Specifically, conforming\n   implementations\
    \ MUST prepare URIs for comparison as follows:\n      *  Step 1: Where IRIs allow\
    \ the usage of IDNs, those names MUST be\n         converted to ASCII Compatible\
    \ Encoding as specified in Section\n         7.2 above.\n      *  Step 2: The\
    \ scheme and host are normalized to lowercase, as\n         described in Section\
    \ 5.3.2.1 of [RFC3987].\n      *  Step 3: Perform percent-encoding normalization,\
    \ as specified in\n         Section 5.3.2.3 of [RFC3987].\n      *  Step 4: Perform\
    \ path segment normalization, as specified in\n         Section 5.3.2.4 of [RFC3987].\n\
    \      *  Step 5: If recognized, the implementation MUST perform scheme-\n   \
    \      based normalization as specified in Section 5.3.3 of [RFC3987].\n   Conforming\
    \ implementations MUST recognize and perform scheme-based\n   normalization for\
    \ the following schemes: ldap, http, https, and ftp.\n   If the scheme is not\
    \ recognized, step 5 is omitted.\n   When comparing URIs for equivalence, conforming\
    \ implementations shall\n   perform a case-sensitive exact match.\n   Implementations\
    \ should convert URIs to Unicode before display.\n   Specifically, conforming\
    \ implementations should perform the\n   conversion operation specified in Section\
    \ 3.2 of [RFC3987].\n"
- title: 7.5.  Internationalized Electronic Mail Addresses
  contents:
  - "7.5.  Internationalized Electronic Mail Addresses\n   Electronic Mail addresses\
    \ may be included in certificates and CRLs in\n   the subjectAltName and issuerAltName\
    \ extensions, name constraints\n   extension, authority information access extension,\
    \ subject\n   information access extension, issuing distribution point extension,\n\
    \   or CRL distribution points extension.  Each of these extensions uses\n   the\
    \ GeneralName construct; GeneralName includes the rfc822Name\n   choice, which\
    \ is defined as type IA5String.  To accommodate email\n   addresses with internationalized\
    \ domain names using the current\n   structure, conforming implementations MUST\
    \ convert the addresses into\n   an ASCII representation.\n   Where the host-part\
    \ (the Domain of the Mailbox) contains an\n   internationalized name, the domain\
    \ name MUST be converted from an IDN\n   to the ASCII Compatible Encoding (ACE)\
    \ format as specified in Section\n   7.2.\n   Two email addresses are considered\
    \ to match if:\n      1)  the local-part of each name is an exact match, AND\n\
    \      2)  the host-part of each name matches using a case-insensitive\n     \
    \     ASCII comparison.\n   Implementations should convert the host-part of internationalized\n\
    \   email addresses specified in these extensions to Unicode before\n   display.\
    \  Specifically, conforming implementations should perform the\n   conversion\
    \ of the host-part of the Mailbox as described in Section\n   7.2.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The majority of this specification is devoted\
    \ to the format and\n   content of certificates and CRLs.  Since certificates\
    \ and CRLs are\n   digitally signed, no additional integrity service is necessary.\n\
    \   Neither certificates nor CRLs need be kept secret, and unrestricted\n   and\
    \ anonymous access to certificates and CRLs has no security\n   implications.\n\
    \   However, security factors outside the scope of this specification\n   will\
    \ affect the assurance provided to certificate users.  This\n   section highlights\
    \ critical issues to be considered by implementers,\n   administrators, and users.\n\
    \   The procedures performed by CAs and RAs to validate the binding of\n   the\
    \ subject's identity to their public key greatly affect the\n   assurance that\
    \ ought to be placed in the certificate.  Relying\n   parties might wish to review\
    \ the CA's certification practice\n   statement.  This is particularly important\
    \ when issuing certificates\n   to other CAs.\n   The use of a single key pair\
    \ for both signature and other purposes is\n   strongly discouraged.  Use of separate\
    \ key pairs for signature and\n   key management provides several benefits to\
    \ the users.  The\n   ramifications associated with loss or disclosure of a signature\
    \ key\n   are different from loss or disclosure of a key management key.  Using\n\
    \   separate key pairs permits a balanced and flexible response.\n   Similarly,\
    \ different validity periods or key lengths for each key\n   pair may be appropriate\
    \ in some application environments.\n   Unfortunately, some legacy applications\
    \ (e.g., Secure Sockets Layer\n   (SSL)) use a single key pair for signature and\
    \ key management.\n   The protection afforded private keys is a critical security\
    \ factor.\n   On a small scale, failure of users to protect their private keys\
    \ will\n   permit an attacker to masquerade as them or decrypt their personal\n\
    \   information.  On a larger scale, compromise of a CA's private signing\n  \
    \ key may have a catastrophic effect.  If an attacker obtains the\n   private\
    \ key unnoticed, the attacker may issue bogus certificates and\n   CRLs.  Existence\
    \ of bogus certificates and CRLs will undermine\n   confidence in the system.\
    \  If such a compromise is detected, all\n   certificates issued to the compromised\
    \ CA MUST be revoked, preventing\n   services between its users and users of other\
    \ CAs.  Rebuilding after\n   such a compromise will be problematic, so CAs are\
    \ advised to\n   implement a combination of strong technical measures (e.g., tamper-\n\
    \   resistant cryptographic modules) and appropriate management\n   procedures\
    \ (e.g., separation of duties) to avoid such an incident.\n   Loss of a CA's private\
    \ signing key may also be problematic.  The CA\n   would not be able to produce\
    \ CRLs or perform normal key rollover.\n   CAs SHOULD maintain secure backup for\
    \ signing keys.  The security of\n   the key backup procedures is a critical factor\
    \ in avoiding key\n   compromise.\n   The availability and freshness of revocation\
    \ information affects the\n   degree of assurance that ought to be placed in a\
    \ certificate.  While\n   certificates expire naturally, events may occur during\
    \ its natural\n   lifetime that negate the binding between the subject and public\
    \ key.\n   If revocation information is untimely or unavailable, the assurance\n\
    \   associated with the binding is clearly reduced.  Relying parties\n   might\
    \ not be able to process every critical extension that can appear\n   in a CRL.\
    \  CAs SHOULD take extra care when making revocation\n   information available\
    \ only through CRLs that contain critical\n   extensions, particularly if support\
    \ for those extensions is not\n   mandated by this profile.  For example, if revocation\
    \ information is\n   supplied using a combination of delta CRLs and full CRLs,\
    \ and the\n   delta CRLs are issued more frequently than the full CRLs, then\n\
    \   relying parties that cannot handle the critical extensions related to\n  \
    \ delta CRL processing will not be able to obtain the most recent\n   revocation\
    \ information.  Alternatively, if a full CRL is issued\n   whenever a delta CRL\
    \ is issued, then timely revocation information\n   will be available to all relying\
    \ parties.  Similarly, implementations\n   of the certification path validation\
    \ mechanism described in Section 6\n   that omit revocation checking provide less\
    \ assurance than those that\n   support it.\n   The certification path validation\
    \ algorithm depends on the certain\n   knowledge of the public keys (and other\
    \ information) about one or\n   more trusted CAs.  The decision to trust a CA\
    \ is an important\n   decision as it ultimately determines the trust afforded\
    \ a\n   certificate.  The authenticated distribution of trusted CA public\n  \
    \ keys (usually in the form of a \"self-signed\" certificate) is a\n   security\
    \ critical out-of-band process that is beyond the scope of\n   this specification.\n\
    \   In addition, where a key compromise or CA failure occurs for a\n   trusted\
    \ CA, the user will need to modify the information provided to\n   the path validation\
    \ routine.  Selection of too many trusted CAs makes\n   the trusted CA information\
    \ difficult to maintain.  On the other hand,\n   selection of only one trusted\
    \ CA could limit users to a closed\n   community of users.\n   The quality of\
    \ implementations that process certificates also affects\n   the degree of assurance\
    \ provided.  The path validation algorithm\n   described in Section 6 relies upon\
    \ the integrity of the trusted CA\n   information, and especially the integrity\
    \ of the public keys\n   associated with the trusted CAs.  By substituting public\
    \ keys for\n   which an attacker has the private key, an attacker could trick\
    \ the\n   user into accepting false certificates.\n   The binding between a key\
    \ and certificate subject cannot be stronger\n   than the cryptographic module\
    \ implementation and algorithms used to\n   generate the signature.  Short key\
    \ lengths or weak hash algorithms\n   will limit the utility of a certificate.\
    \  CAs are encouraged to note\n   advances in cryptology so they can employ strong\
    \ cryptographic\n   techniques.  In addition, CAs SHOULD decline to issue certificates\
    \ to\n   CAs or end entities that generate weak signatures.\n   Inconsistent application\
    \ of name comparison rules can result in\n   acceptance of invalid X.509 certification\
    \ paths or rejection of valid\n   ones.  The X.500 series of specifications defines\
    \ rules for comparing\n   distinguished names that require comparison of strings\
    \ without regard\n   to case, character set, multi-character white space substring,\
    \ or\n   leading and trailing white space.  This specification relaxes these\n\
    \   requirements, requiring support for binary comparison at a minimum.\n   CAs\
    \ MUST encode the distinguished name in the subject field of a CA\n   certificate\
    \ identically to the distinguished name in the issuer field\n   in certificates\
    \ issued by that CA.  If CAs use different encodings,\n   implementations might\
    \ fail to recognize name chains for paths that\n   include this certificate. \
    \ As a consequence, valid paths could be\n   rejected.\n   In addition, name constraints\
    \ for distinguished names MUST be stated\n   identically to the encoding used\
    \ in the subject field or\n   subjectAltName extension.  If not, then name constraints\
    \ stated as\n   excludedSubtrees will not match and invalid paths will be accepted\n\
    \   and name constraints expressed as permittedSubtrees will not match\n   and\
    \ valid paths will be rejected.  To avoid acceptance of invalid\n   paths, CAs\
    \ SHOULD state name constraints for distinguished names as\n   permittedSubtrees\
    \ wherever possible.\n   In general, using the nameConstraints extension to constrain\
    \ one name\n   form (e.g., DNS names) offers no protection against use of other\
    \ name\n   forms (e.g., electronic mail addresses).\n   While X.509 mandates that\
    \ names be unambiguous, there is a risk that\n   two unrelated authorities will\
    \ issue certificates and/or CRLs under\n   the same issuer name.  As a means of\
    \ reducing problems and security\n   issues related to issuer name collisions,\
    \ CA and CRL issuer names\n   SHOULD be formed in a way that reduces the likelihood\
    \ of name\n   collisions.  Implementers should take into account the possible\n\
    \   existence of multiple unrelated CAs and CRL issuers with the same\n   name.\
    \  At a minimum, implementations validating CRLs MUST ensure that\n   the certification\
    \ path of a certificate and the CRL issuer\n   certification path used to validate\
    \ the certificate terminate at the\n   same trust anchor.\n   While the local-part\
    \ of an electronic mail address is case sensitive\n   [RFC2821], emailAddress\
    \ attribute values are not case sensitive\n   [RFC2985].  As a result, there is\
    \ a risk that two different email\n   addresses will be treated as the same address\
    \ when the matching rule\n   for the emailAddress attribute is used, if the email\
    \ server exploits\n   the case sensitivity of mailbox local-parts.  Implementers\
    \ should not\n   include an email address in the emailAddress attribute if the\
    \ email\n   server that hosts the email address treats the local-part of email\n\
    \   addresses as case sensitive.\n   Implementers should be aware of risks involved\
    \ if the CRL\n   distribution points or authority information access extensions\
    \ of\n   corrupted certificates or CRLs contain links to malicious code.\n   Implementers\
    \ should always take the steps of validating the retrieved\n   data to ensure\
    \ that the data is properly formed.\n   When certificates include a cRLDistributionPoints\
    \ extension with an\n   https URI or similar scheme, circular dependencies can\
    \ be introduced.\n   The relying party is forced to perform an additional path\
    \ validation\n   in order to obtain the CRL required to complete the initial path\n\
    \   validation!  Circular conditions can also be created with an https\n   URI\
    \ (or similar scheme) in the authorityInfoAccess or\n   subjectInfoAccess extensions.\
    \  At worst, this situation can create\n   unresolvable dependencies.\n   CAs\
    \ SHOULD NOT include URIs that specify https, ldaps, or similar\n   schemes in\
    \ extensions.  CAs that include an https URI in one of these\n   extensions MUST\
    \ ensure that the server's certificate can be validated\n   without using the\
    \ information that is pointed to by the URI.  Relying\n   parties that choose\
    \ to validate the server's certificate when\n   obtaining information pointed\
    \ to by an https URI in the\n   cRLDistributionPoints, authorityInfoAccess, or\
    \ subjectInfoAccess\n   extensions MUST be prepared for the possibility that this\
    \ will result\n   in unbounded recursion.\n   Self-issued certificates provide\
    \ CAs with one automated mechanism to\n   indicate changes in the CA's operations.\
    \  In particular, self-issued\n   certificates may be used to implement a graceful\
    \ change-over from one\n   non-compromised CA key pair to the next.  Detailed\
    \ procedures for \"CA\n   key update\" are specified in [RFC4210], where the CA\
    \ protects its new\n   public key using its previous private key and vice versa\
    \ using two\n   self-issued certificates.  Conforming client implementations will\n\
    \   process the self-issued certificate and determine whether\n   certificates\
    \ issued under the new key may be trusted.  Self-issued\n   certificates MAY be\
    \ used to support other changes in CA operations,\n   such as additions to the\
    \ CA's policy set, using similar procedures.\n   Some legacy implementations support\
    \ names encoded in the ISO 8859-1\n   character set (Latin1String) [ISO8859] but\
    \ tag them as TeletexString.\n   TeletexString encodes a larger character set\
    \ than ISO 8859-1, but it\n   encodes some characters differently.  The name comparison\
    \ rules\n   specified in Section 7.1 assume that TeletexStrings are encoded as\n\
    \   described in the ASN.1 standard.  When comparing names encoded using\n   the\
    \ Latin1String character set, false positives and negatives are\n   possible.\n\
    \   When strings are mapped from internal representations to visual\n   representations,\
    \ sometimes two different strings will have the same\n   or similar visual representations.\
    \  This can happen for many\n   different reasons, including use of similar glyphs\
    \ and use of\n   composed characters (such as e + ' equaling U+00E9, the Korean\n\
    \   composed characters, and vowels above consonant clusters in certain\n   languages).\
    \  As a result of this situation, people doing visual\n   comparisons between\
    \ two different names may think they are the same\n   when in fact they are not.\
    \  Also, people may mistake one string for\n   another.  Issuers of certificates\
    \ and relying parties both need to be\n   aware of this situation.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   Extensions in certificates and CRLs are identified\
    \ using object\n   identifiers.  The objects are defined in an arc delegated by\
    \ IANA to\n   the PKIX Working Group.  No further action by IANA is necessary\
    \ for\n   this document or any anticipated updates.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   Warwick Ford participated with the authors in some of\
    \ the design team\n   meetings that directed development of this document.  The\
    \ design\n   team's efforts were guided by contributions from Matt Crawford, Tom\n\
    \   Gindin, Steve Hanna, Stephen Henson, Paul Hoffman, Takashi Ito, Denis\n  \
    \ Pinkas, and Wen-Cheng Wang.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC791]   Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791, September\n              1981.\n   [RFC1034]  Mockapetris, P.,\
    \ \"Domain Names - Concepts and Facilities\",\n              STD 13, RFC 1034,\
    \ November 1987.\n   [RFC1123]  Braden, R., Ed., \"Requirements for Internet Hosts\
    \ --\n              Application and Support\", STD 3, RFC 1123, October 1989.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC2585]  Housley, R. and P. Hoffman, \"Internet\
    \ X.509 Public Key\n              Infrastructure: Operational Protocols: FTP and\
    \ HTTP\", RFC\n              2585, May 1999.\n   [RFC2616]  Fielding, R., Gettys,\
    \ J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC2797]  Myers, M., Liu, X., Schaad, J., and J. Weinstein,\n           \
    \   \"Certificate Management Messages over CMS\", RFC 2797,\n              April\
    \ 2000.\n   [RFC2821]  Klensin, J., Ed., \"Simple Mail Transfer Protocol\", RFC\n\
    \              2821, April 2001.\n   [RFC3454]  Hoffman, P. and M. Blanchet, \"\
    Preparation of\n              Internationalized Strings (\"stringprep\")\", RFC\
    \ 3454,\n              December 2002.\n   [RFC3490]  Faltstrom, P., Hoffman, P.,\
    \ and A. Costello,\n              \"Internationalizing Domain Names in Applications\
    \ (IDNA)\",\n              RFC 3490, March 2003.\n   [RFC3629]  Yergeau, F., \"\
    UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter,\
    \ \"Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\
    \ RFC\n              3986, January 2005.\n   [RFC3987]  Duerst, M. and M. Suignard,\
    \ \"Internationalized Resource\n              Identifiers (IRIs)\", RFC 3987,\
    \ January 2005.\n   [RFC4516]  Smith, M., Ed., and T. Howes, \"Lightweight Directory\n\
    \              Access Protocol (LDAP): Uniform Resource Locator\", RFC\n     \
    \         4516, June 2006.\n   [RFC4518]  Zeilenga, K., \"Lightweight Directory\
    \ Access Protocol\n              (LDAP): Internationalized String Preparation\"\
    , RFC 4518,\n              June 2006.\n   [RFC4523]  Zeilenga, K., \"Lightweight\
    \ Directory Access Protocol\n              (LDAP) Schema Definitions for X.509\
    \ Certificates\", RFC\n              4523, June 2006.\n   [RFC4632]  Fuller, V.\
    \ and T. Li, \"Classless Inter-domain Routing\n              (CIDR): The Internet\
    \ Address Assignment and Aggregation\n              Plan\", BCP 122, RFC 4632,\
    \ August 2006.\n   [X.680]    ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-1:2002,\n\
    \              Information technology - Abstract Syntax Notation One\n       \
    \       (ASN.1):  Specification of basic notation.\n   [X.690]    ITU-T Recommendation\
    \ X.690 (2002) | ISO/IEC 8825-1:2002,\n              Information technology -\
    \ ASN.1 encoding rules:\n              Specification of Basic Encoding Rules (BER),\
    \ Canonical\n              Encoding Rules (CER) and Distinguished Encoding Rules\n\
    \              (DER).\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [ISO8859]  ISO/IEC 8859-1:1998.  Information\
    \ technology -- 8-bit\n              single-byte coded graphic character sets\
    \ -- Part 1: Latin\n              alphabet No. 1.\n   [ISO10646] ISO/IEC 10646:2003.\
    \  Information technology -- Universal\n              Multiple-Octet Coded Character\
    \ Set (UCS).\n   [NFC]      Davis, M. and M. Duerst, \"Unicode Standard Annex\
    \ #15:\n              Unicode Normalization Forms\", October 2006,\n         \
    \     <http://www.unicode.org/reports/tr15/>.\n   [RFC1422]  Kent, S., \"Privacy\
    \ Enhancement for Internet Electronic\n              Mail: Part II: Certificate-Based\
    \ Key Management\", RFC\n              1422, February 1993.\n   [RFC2277]  Alvestrand,\
    \ H., \"IETF Policy on Character Sets and\n              Languages\", BCP 18,\
    \ RFC 2277, January 1998.\n   [RFC2459]  Housley, R., Ford, W., Polk, W., and\
    \ D. Solo, \"Internet\n              X.509 Public Key Infrastructure Certificate\
    \ and CRL\n              Profile\", RFC 2459, January 1999.\n   [RFC2560]  Myers,\
    \ M., Ankney, R., Malpani, A., Galperin, S., and C.\n              Adams, \"X.509\
    \ Internet Public Key Infrastructure Online\n              Certificate Status\
    \ Protocol - OCSP\", RFC 2560, June 1999.\n   [RFC2985]  Nystrom, M. and B. Kaliski,\
    \ \"PKCS #9: Selected Object\n              Classes and Attribute Types Version\
    \ 2.0\", RFC 2985,\n              November 2000.\n   [RFC3161]  Adams, C., Cain,\
    \ P., Pinkas, D., and R. Zuccherato,\n              \"Internet X.509 Public Key\
    \ Infrastructure Time-Stamp\n              Protocol (TSP)\", RFC 3161, August\
    \ 2001.\n   [RFC3279]  Bassham, L., Polk, W., and R. Housley, \"Algorithms and\n\
    \              Identifiers for the Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 3279, April 2002.\n   [RFC3280]  Housley, R., Polk, W., Ford, W., and D.\
    \ Solo, \"Internet\n              X.509 Public Key Infrastructure Certificate\
    \ and\n              Certificate Revocation List (CRL) Profile\", RFC 3280,\n\
    \              April 2002.\n   [RFC4055]  Schaad, J., Kaliski, B., and R. Housley,\
    \ \"Additional\n              Algorithms and Identifiers for RSA Cryptography\
    \ for use in\n              the Internet X.509 Public Key Infrastructure Certificate\n\
    \              and Certificate Revocation List (CRL) Profile\", RFC 4055,\n  \
    \            June 2005.\n   [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K.\
    \ Raeburn, \"The\n              Kerberos Network Authentication Service (V5)\"\
    , RFC 4120,\n              July 2005.\n   [RFC4210]  Adams, C., Farrell, S., Kause,\
    \ T., and T. Mononen,\n              \"Internet X.509 Public Key Infrastructure\
    \ Certificate\n              Management Protocol (CMP)\", RFC 4210, September\
    \ 2005.\n   [RFC4325]  Santesson, S. and R. Housley, \"Internet X.509 Public Key\n\
    \              Infrastructure Authority Information Access Certificate\n     \
    \         Revocation List (CRL) Extension\", RFC 4325, December 2005.\n   [RFC4491]\
    \  Leontiev, S., Ed., and D. Shefanovski, Ed., \"Using the\n              GOST\
    \ R 34.10-94, GOST R 34.10-2001, and GOST R 34.11-94\n              Algorithms\
    \ with the Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and CRL Profile\", RFC 4491, May\n              2006.\n   [RFC4510]  Zeilenga,\
    \ K., Ed., \"Lightweight Directory Access Protocol\n              (LDAP): Technical\
    \ Specification Road Map\", RFC 4510, June\n              2006.\n   [RFC4512]\
    \  Zeilenga, K., Ed., \"Lightweight Directory Access Protocol\n              (LDAP):\
    \ Directory Information Models\", RFC 4512, June\n              2006.\n   [RFC4514]\
    \  Zeilenga, K., Ed., \"Lightweight Directory Access Protocol\n              (LDAP):\
    \ String Representation of Distinguished Names\", RFC\n              4514, June\
    \ 2006.\n   [RFC4519]  Sciberras, A., Ed., \"Lightweight Directory Access Protocol\n\
    \              (LDAP): Schema for User Applications\", RFC 4519, June\n      \
    \        2006.\n   [RFC4630]  Housley, R. and S. Santesson, \"Update to DirectoryString\n\
    \              Processing in the Internet X.509 Public Key Infrastructure\n  \
    \            Certificate and Certificate Revocation List (CRL)\n             \
    \ Profile\", RFC 4630, August 2006.\n   [X.500]    ITU-T Recommendation X.500\
    \ (2005) | ISO/IEC 9594-1:2005,\n              Information technology - Open Systems\
    \ Interconnection -\n              The Directory: Overview of concepts, models\
    \ and services.\n   [X.501]    ITU-T Recommendation X.501 (2005) | ISO/IEC 9594-2:2005,\n\
    \              Information technology - Open Systems Interconnection -\n     \
    \         The Directory: Models.\n   [X.509]    ITU-T Recommendation X.509 (2005)\
    \ | ISO/IEC 9594-8:2005,\n              Information technology - Open Systems\
    \ Interconnection -\n              The Directory: Public-key and attribute certificate\n\
    \              frameworks.\n   [X.520]    ITU-T Recommendation X.520 (2005) |\
    \ ISO/IEC 9594-6:2005,\n              Information technology - Open Systems Interconnection\
    \ -\n              The Directory: Selected attribute types.\n   [X.660]    ITU-T\
    \ Recommendation X.660 (2004) | ISO/IEC 9834-1:2005,\n              Information\
    \ technology - Open Systems Interconnection -\n              Procedures for the\
    \ operation of OSI Registration\n              Authorities: General procedures,\
    \ and top arcs of the ASN.1\n              Object Identifier tree.\n   [X.683]\
    \    ITU-T Recommendation X.683 (2002) | ISO/IEC 8824-4:2002,\n              Information\
    \ technology - Abstract Syntax Notation One\n              (ASN.1): Parameterization\
    \ of ASN.1 specifications.\n   [X9.55]    ANSI X9.55-1997, Public Key Cryptography\
    \ for the Financial\n              Services Industry: Extensions to Public Key\
    \ Certificates\n              and Certificate Revocation Lists, January 1997.\n"
- title: Appendix A.  Pseudo-ASN.1 Structures and OIDs
  contents:
  - "Appendix A.  Pseudo-ASN.1 Structures and OIDs\n   This appendix describes data\
    \ objects used by conforming PKI\n   components in an \"ASN.1-like\" syntax. \
    \ This syntax is a hybrid of the\n   1988 and 1993 ASN.1 syntaxes.  The 1988 ASN.1\
    \ syntax is augmented\n   with 1993 UNIVERSAL Types UniversalString, BMPString,\
    \ and UTF8String.\n   The ASN.1 syntax does not permit the inclusion of type statements\
    \ in\n   the ASN.1 module, and the 1993 ASN.1 standard does not permit use of\n\
    \   the new UNIVERSAL types in modules using the 1988 syntax.  As a\n   result,\
    \ this module does not conform to either version of the ASN.1\n   standard.\n\
    \   This appendix may be converted into 1988 ASN.1 by replacing the\n   definitions\
    \ for the UNIVERSAL Types with the 1988 catch-all \"ANY\".\n"
- title: A.1.  Explicitly Tagged Module, 1988 Syntax
  contents:
  - 'A.1.  Explicitly Tagged Module, 1988 Syntax

    '
- title: PKIX1Explicit88 { iso(1) identified-organization(3) dod(6) internet(1)
  contents:
  - "PKIX1Explicit88 { iso(1) identified-organization(3) dod(6) internet(1)\n  security(5)\
    \ mechanisms(5) pkix(7) id-mod(0) id-pkix1-explicit(18) }\n"
- title: DEFINITIONS EXPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS EXPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS ALL --
  contents:
  - '-- EXPORTS ALL --

    '
- title: -- IMPORTS NONE --
  contents:
  - '-- IMPORTS NONE --

    '
- title: -- UNIVERSAL Types defined in 1993 and 1998 ASN.1
  contents:
  - '-- UNIVERSAL Types defined in 1993 and 1998 ASN.1

    '
- title: -- and required by this specification
  contents:
  - '-- and required by this specification

    '
- title: UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING
  contents:
  - "UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING\n        -- UniversalString\
    \ is defined in ASN.1:1993\n"
- title: BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING
  contents:
  - "BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING\n      -- BMPString is the\
    \ subtype of UniversalString and models\n      -- the Basic Multilingual Plane\
    \ of ISO/IEC 10646\n"
- title: UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
  contents:
  - "UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING\n      -- The content of\
    \ this type conforms to RFC 3629.\n"
- title: -- PKIX specific OIDs
  contents:
  - '-- PKIX specific OIDs

    '
- title: id-pkix  OBJECT IDENTIFIER  ::=
  contents:
  - "id-pkix  OBJECT IDENTIFIER  ::=\n         { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n                    security(5) mechanisms(5) pkix(7) }\n"
- title: -- PKIX arcs
  contents:
  - '-- PKIX arcs

    '
- title: id-pe OBJECT IDENTIFIER ::= { id-pkix 1 }
  contents:
  - "id-pe OBJECT IDENTIFIER ::= { id-pkix 1 }\n        -- arc for private certificate\
    \ extensions\n"
- title: id-qt OBJECT IDENTIFIER ::= { id-pkix 2 }
  contents:
  - "id-qt OBJECT IDENTIFIER ::= { id-pkix 2 }\n        -- arc for policy qualifier\
    \ types\n"
- title: id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }
  contents:
  - "id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }\n        -- arc for extended key purpose\
    \ OIDS\n"
- title: id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
  contents:
  - "id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n        -- arc for access descriptors\n"
- title: -- policyQualifierIds for Internet policy qualifiers
  contents:
  - '-- policyQualifierIds for Internet policy qualifiers

    '
- title: id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
  contents:
  - "id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\n      -- OID for CPS qualifier\n"
- title: id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
  contents:
  - "id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\n      -- OID for user notice\
    \ qualifier\n"
- title: -- access descriptor definitions
  contents:
  - '-- access descriptor definitions

    '
- title: id-ad-ocsp         OBJECT IDENTIFIER ::= { id-ad 1 }
  contents:
  - 'id-ad-ocsp         OBJECT IDENTIFIER ::= { id-ad 1 }

    '
- title: id-ad-caIssuers    OBJECT IDENTIFIER ::= { id-ad 2 }
  contents:
  - 'id-ad-caIssuers    OBJECT IDENTIFIER ::= { id-ad 2 }

    '
- title: id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }
  contents:
  - 'id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }

    '
- title: id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }
  contents:
  - 'id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }

    '
- title: -- attribute data types
  contents:
  - '-- attribute data types

    '
- title: Attribute               ::= SEQUENCE {
  contents:
  - "Attribute               ::= SEQUENCE {\n      type             AttributeType,\n\
    \      values    SET OF AttributeValue }\n            -- at least one value is\
    \ required\n"
- title: AttributeType           ::= OBJECT IDENTIFIER
  contents:
  - 'AttributeType           ::= OBJECT IDENTIFIER

    '
- title: AttributeValue          ::= ANY -- DEFINED BY AttributeType
  contents:
  - 'AttributeValue          ::= ANY -- DEFINED BY AttributeType

    '
- title: AttributeTypeAndValue   ::= SEQUENCE {
  contents:
  - "AttributeTypeAndValue   ::= SEQUENCE {\n        type    AttributeType,\n    \
    \    value   AttributeValue }\n"
- title: '-- suggested naming attributes: Definition of the following'
  contents:
  - '-- suggested naming attributes: Definition of the following

    '
- title: --   information object set may be augmented to meet local
  contents:
  - '--   information object set may be augmented to meet local

    '
- title: --   requirements.  Note that deleting members of the set may
  contents:
  - '--   requirements.  Note that deleting members of the set may

    '
- title: --   prevent interoperability with conforming implementations.
  contents:
  - '--   prevent interoperability with conforming implementations.

    '
- title: '-- presented in pairs: the AttributeType followed by the'
  contents:
  - '-- presented in pairs: the AttributeType followed by the

    '
- title: --   type definition for the corresponding AttributeValue
  contents:
  - '--   type definition for the corresponding AttributeValue

    '
- title: -- Arc for standard naming attributes
  contents:
  - '-- Arc for standard naming attributes

    '
- title: id-at OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) ds(5) 4 }
  contents:
  - 'id-at OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) ds(5) 4 }

    '
- title: -- Naming attributes of type X520name
  contents:
  - '-- Naming attributes of type X520name

    '
- title: id-at-name                AttributeType ::= { id-at 41 }
  contents:
  - 'id-at-name                AttributeType ::= { id-at 41 }

    '
- title: id-at-surname             AttributeType ::= { id-at  4 }
  contents:
  - 'id-at-surname             AttributeType ::= { id-at  4 }

    '
- title: id-at-givenName           AttributeType ::= { id-at 42 }
  contents:
  - 'id-at-givenName           AttributeType ::= { id-at 42 }

    '
- title: id-at-initials            AttributeType ::= { id-at 43 }
  contents:
  - 'id-at-initials            AttributeType ::= { id-at 43 }

    '
- title: id-at-generationQualifier AttributeType ::= { id-at 44 }
  contents:
  - 'id-at-generationQualifier AttributeType ::= { id-at 44 }

    '
- title: '-- Naming attributes of type X520Name:'
  contents:
  - '-- Naming attributes of type X520Name:

    '
- title: --   X520name ::= DirectoryString (SIZE (1..ub-name))
  contents:
  - '--   X520name ::= DirectoryString (SIZE (1..ub-name))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520name ::= CHOICE {
  contents:
  - "X520name ::= CHOICE {\n      teletexString     TeletexString   (SIZE (1..ub-name)),\n\
    \      printableString   PrintableString (SIZE (1..ub-name)),\n      universalString\
    \   UniversalString (SIZE (1..ub-name)),\n      utf8String        UTF8String \
    \     (SIZE (1..ub-name)),\n      bmpString         BMPString       (SIZE (1..ub-name))\
    \ }\n"
- title: -- Naming attributes of type X520CommonName
  contents:
  - '-- Naming attributes of type X520CommonName

    '
- title: id-at-commonName        AttributeType ::= { id-at 3 }
  contents:
  - 'id-at-commonName        AttributeType ::= { id-at 3 }

    '
- title: '-- Naming attributes of type X520CommonName:'
  contents:
  - '-- Naming attributes of type X520CommonName:

    '
- title: --   X520CommonName ::= DirectoryName (SIZE (1..ub-common-name))
  contents:
  - '--   X520CommonName ::= DirectoryName (SIZE (1..ub-common-name))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520CommonName ::= CHOICE {
  contents:
  - "X520CommonName ::= CHOICE {\n      teletexString     TeletexString   (SIZE (1..ub-common-name)),\n\
    \      printableString   PrintableString (SIZE (1..ub-common-name)),\n      universalString\
    \   UniversalString (SIZE (1..ub-common-name)),\n      utf8String        UTF8String\
    \      (SIZE (1..ub-common-name)),\n      bmpString         BMPString       (SIZE\
    \ (1..ub-common-name)) }\n"
- title: -- Naming attributes of type X520LocalityName
  contents:
  - '-- Naming attributes of type X520LocalityName

    '
- title: id-at-localityName      AttributeType ::= { id-at 7 }
  contents:
  - 'id-at-localityName      AttributeType ::= { id-at 7 }

    '
- title: '-- Naming attributes of type X520LocalityName:'
  contents:
  - '-- Naming attributes of type X520LocalityName:

    '
- title: --   X520LocalityName ::= DirectoryName (SIZE (1..ub-locality-name))
  contents:
  - '--   X520LocalityName ::= DirectoryName (SIZE (1..ub-locality-name))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520LocalityName ::= CHOICE {
  contents:
  - "X520LocalityName ::= CHOICE {\n      teletexString     TeletexString   (SIZE\
    \ (1..ub-locality-name)),\n      printableString   PrintableString (SIZE (1..ub-locality-name)),\n\
    \      universalString   UniversalString (SIZE (1..ub-locality-name)),\n     \
    \ utf8String        UTF8String      (SIZE (1..ub-locality-name)),\n      bmpString\
    \         BMPString       (SIZE (1..ub-locality-name)) }\n"
- title: -- Naming attributes of type X520StateOrProvinceName
  contents:
  - '-- Naming attributes of type X520StateOrProvinceName

    '
- title: id-at-stateOrProvinceName AttributeType ::= { id-at 8 }
  contents:
  - 'id-at-stateOrProvinceName AttributeType ::= { id-at 8 }

    '
- title: '-- Naming attributes of type X520StateOrProvinceName:'
  contents:
  - '-- Naming attributes of type X520StateOrProvinceName:

    '
- title: --   X520StateOrProvinceName ::= DirectoryName (SIZE (1..ub-state-name))
  contents:
  - '--   X520StateOrProvinceName ::= DirectoryName (SIZE (1..ub-state-name))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520StateOrProvinceName ::= CHOICE {
  contents:
  - "X520StateOrProvinceName ::= CHOICE {\n      teletexString     TeletexString \
    \  (SIZE (1..ub-state-name)),\n      printableString   PrintableString (SIZE (1..ub-state-name)),\n\
    \      universalString   UniversalString (SIZE (1..ub-state-name)),\n      utf8String\
    \        UTF8String      (SIZE (1..ub-state-name)),\n      bmpString         BMPString\
    \       (SIZE (1..ub-state-name)) }\n"
- title: -- Naming attributes of type X520OrganizationName
  contents:
  - '-- Naming attributes of type X520OrganizationName

    '
- title: id-at-organizationName  AttributeType ::= { id-at 10 }
  contents:
  - 'id-at-organizationName  AttributeType ::= { id-at 10 }

    '
- title: '-- Naming attributes of type X520OrganizationName:'
  contents:
  - '-- Naming attributes of type X520OrganizationName:

    '
- title: --   X520OrganizationName ::=
  contents:
  - '--   X520OrganizationName ::=

    '
- title: --          DirectoryName (SIZE (1..ub-organization-name))
  contents:
  - '--          DirectoryName (SIZE (1..ub-organization-name))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520OrganizationName ::= CHOICE {
  contents:
  - "X520OrganizationName ::= CHOICE {\n      teletexString     TeletexString\n  \
    \                        (SIZE (1..ub-organization-name)),\n      printableString\
    \   PrintableString\n                          (SIZE (1..ub-organization-name)),\n\
    \      universalString   UniversalString\n                          (SIZE (1..ub-organization-name)),\n\
    \      utf8String        UTF8String\n                          (SIZE (1..ub-organization-name)),\n\
    \      bmpString         BMPString\n                          (SIZE (1..ub-organization-name))\
    \  }\n"
- title: -- Naming attributes of type X520OrganizationalUnitName
  contents:
  - '-- Naming attributes of type X520OrganizationalUnitName

    '
- title: id-at-organizationalUnitName AttributeType ::= { id-at 11 }
  contents:
  - 'id-at-organizationalUnitName AttributeType ::= { id-at 11 }

    '
- title: '-- Naming attributes of type X520OrganizationalUnitName:'
  contents:
  - '-- Naming attributes of type X520OrganizationalUnitName:

    '
- title: --   X520OrganizationalUnitName ::=
  contents:
  - '--   X520OrganizationalUnitName ::=

    '
- title: --          DirectoryName (SIZE (1..ub-organizational-unit-name))
  contents:
  - '--          DirectoryName (SIZE (1..ub-organizational-unit-name))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520OrganizationalUnitName ::= CHOICE {
  contents:
  - "X520OrganizationalUnitName ::= CHOICE {\n      teletexString     TeletexString\n\
    \                          (SIZE (1..ub-organizational-unit-name)),\n      printableString\
    \   PrintableString\n                          (SIZE (1..ub-organizational-unit-name)),\n\
    \      universalString   UniversalString\n                          (SIZE (1..ub-organizational-unit-name)),\n\
    \      utf8String        UTF8String\n                          (SIZE (1..ub-organizational-unit-name)),\n\
    \      bmpString         BMPString\n                          (SIZE (1..ub-organizational-unit-name))\
    \ }\n"
- title: -- Naming attributes of type X520Title
  contents:
  - '-- Naming attributes of type X520Title

    '
- title: id-at-title             AttributeType ::= { id-at 12 }
  contents:
  - 'id-at-title             AttributeType ::= { id-at 12 }

    '
- title: '-- Naming attributes of type X520Title:'
  contents:
  - '-- Naming attributes of type X520Title:

    '
- title: --   X520Title ::= DirectoryName (SIZE (1..ub-title))
  contents:
  - '--   X520Title ::= DirectoryName (SIZE (1..ub-title))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520Title ::= CHOICE {
  contents:
  - "X520Title ::= CHOICE {\n      teletexString     TeletexString   (SIZE (1..ub-title)),\n\
    \      printableString   PrintableString (SIZE (1..ub-title)),\n      universalString\
    \   UniversalString (SIZE (1..ub-title)),\n      utf8String        UTF8String\
    \      (SIZE (1..ub-title)),\n      bmpString         BMPString       (SIZE (1..ub-title))\
    \ }\n"
- title: -- Naming attributes of type X520dnQualifier
  contents:
  - '-- Naming attributes of type X520dnQualifier

    '
- title: id-at-dnQualifier       AttributeType ::= { id-at 46 }
  contents:
  - 'id-at-dnQualifier       AttributeType ::= { id-at 46 }

    '
- title: X520dnQualifier ::=     PrintableString
  contents:
  - 'X520dnQualifier ::=     PrintableString

    '
- title: -- Naming attributes of type X520countryName (digraph from IS 3166)
  contents:
  - '-- Naming attributes of type X520countryName (digraph from IS 3166)

    '
- title: id-at-countryName       AttributeType ::= { id-at 6 }
  contents:
  - 'id-at-countryName       AttributeType ::= { id-at 6 }

    '
- title: X520countryName ::=     PrintableString (SIZE (2))
  contents:
  - 'X520countryName ::=     PrintableString (SIZE (2))

    '
- title: -- Naming attributes of type X520SerialNumber
  contents:
  - '-- Naming attributes of type X520SerialNumber

    '
- title: id-at-serialNumber      AttributeType ::= { id-at 5 }
  contents:
  - 'id-at-serialNumber      AttributeType ::= { id-at 5 }

    '
- title: X520SerialNumber ::=    PrintableString (SIZE (1..ub-serial-number))
  contents:
  - 'X520SerialNumber ::=    PrintableString (SIZE (1..ub-serial-number))

    '
- title: -- Naming attributes of type X520Pseudonym
  contents:
  - '-- Naming attributes of type X520Pseudonym

    '
- title: id-at-pseudonym         AttributeType ::= { id-at 65 }
  contents:
  - 'id-at-pseudonym         AttributeType ::= { id-at 65 }

    '
- title: '-- Naming attributes of type X520Pseudonym:'
  contents:
  - '-- Naming attributes of type X520Pseudonym:

    '
- title: --   X520Pseudonym ::= DirectoryName (SIZE (1..ub-pseudonym))
  contents:
  - '--   X520Pseudonym ::= DirectoryName (SIZE (1..ub-pseudonym))

    '
- title: --
  contents:
  - '--

    '
- title: '-- Expanded to avoid parameterized type:'
  contents:
  - '-- Expanded to avoid parameterized type:

    '
- title: X520Pseudonym ::= CHOICE {
  contents:
  - "X520Pseudonym ::= CHOICE {\n   teletexString     TeletexString   (SIZE (1..ub-pseudonym)),\n\
    \   printableString   PrintableString (SIZE (1..ub-pseudonym)),\n   universalString\
    \   UniversalString (SIZE (1..ub-pseudonym)),\n   utf8String        UTF8String\
    \      (SIZE (1..ub-pseudonym)),\n   bmpString         BMPString       (SIZE (1..ub-pseudonym))\
    \ }\n"
- title: -- Naming attributes of type DomainComponent (from RFC 4519)
  contents:
  - '-- Naming attributes of type DomainComponent (from RFC 4519)

    '
- title: id-domainComponent   AttributeType ::= { 0 9 2342 19200300 100 1 25 }
  contents:
  - 'id-domainComponent   AttributeType ::= { 0 9 2342 19200300 100 1 25 }

    '
- title: DomainComponent ::=  IA5String
  contents:
  - 'DomainComponent ::=  IA5String

    '
- title: -- Legacy attributes
  contents:
  - '-- Legacy attributes

    '
- title: pkcs-9 OBJECT IDENTIFIER ::=
  contents:
  - "pkcs-9 OBJECT IDENTIFIER ::=\n       { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) 9 }\n"
- title: id-emailAddress      AttributeType ::= { pkcs-9 1 }
  contents:
  - 'id-emailAddress      AttributeType ::= { pkcs-9 1 }

    '
- title: EmailAddress ::=     IA5String (SIZE (1..ub-emailaddress-length))
  contents:
  - 'EmailAddress ::=     IA5String (SIZE (1..ub-emailaddress-length))

    '
- title: -- naming data types --
  contents:
  - '-- naming data types --

    '
- title: Name ::= CHOICE { -- only one possibility for now --
  contents:
  - "Name ::= CHOICE { -- only one possibility for now --\n      rdnSequence  RDNSequence\
    \ }\n"
- title: RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
  contents:
  - 'RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

    '
- title: DistinguishedName ::=   RDNSequence
  contents:
  - 'DistinguishedName ::=   RDNSequence

    '
- title: RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue
  contents:
  - 'RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue

    '
- title: -- Directory string type --
  contents:
  - '-- Directory string type --

    '
- title: DirectoryString ::= CHOICE {
  contents:
  - "DirectoryString ::= CHOICE {\n      teletexString       TeletexString   (SIZE\
    \ (1..MAX)),\n      printableString     PrintableString (SIZE (1..MAX)),\n   \
    \   universalString     UniversalString (SIZE (1..MAX)),\n      utf8String   \
    \       UTF8String      (SIZE (1..MAX)),\n      bmpString           BMPString\
    \       (SIZE (1..MAX)) }\n"
- title: -- certificate and CRL specific structures begin here
  contents:
  - '-- certificate and CRL specific structures begin here

    '
- title: Certificate  ::=  SEQUENCE  {
  contents:
  - "Certificate  ::=  SEQUENCE  {\n     tbsCertificate       TBSCertificate,\n  \
    \   signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING\
    \  }\n"
- title: TBSCertificate  ::=  SEQUENCE  {
  contents:
  - "TBSCertificate  ::=  SEQUENCE  {\n     version         [0]  Version DEFAULT v1,\n\
    \     serialNumber         CertificateSerialNumber,\n     signature          \
    \  AlgorithmIdentifier,\n     issuer               Name,\n     validity      \
    \       Validity,\n     subject              Name,\n     subjectPublicKeyInfo\
    \ SubjectPublicKeyInfo,\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n\
    \                          -- If present, version MUST be v2 or v3\n     subjectUniqueID\
    \ [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present,\
    \ version MUST be v2 or v3\n     extensions      [3]  Extensions OPTIONAL\n  \
    \                        -- If present, version MUST be v3 --  }\n"
- title: Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
  contents:
  - 'Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }

    '
- title: CertificateSerialNumber  ::=  INTEGER
  contents:
  - 'CertificateSerialNumber  ::=  INTEGER

    '
- title: Validity ::= SEQUENCE {
  contents:
  - "Validity ::= SEQUENCE {\n     notBefore      Time,\n     notAfter       Time\
    \  }\n"
- title: Time ::= CHOICE {
  contents:
  - "Time ::= CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime\
    \ }\n"
- title: UniqueIdentifier  ::=  BIT STRING
  contents:
  - 'UniqueIdentifier  ::=  BIT STRING

    '
- title: SubjectPublicKeyInfo  ::=  SEQUENCE  {
  contents:
  - "SubjectPublicKeyInfo  ::=  SEQUENCE  {\n     algorithm            AlgorithmIdentifier,\n\
    \     subjectPublicKey     BIT STRING  }\n"
- title: Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
  contents:
  - 'Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

    '
- title: Extension  ::=  SEQUENCE  {
  contents:
  - "Extension  ::=  SEQUENCE  {\n     extnID      OBJECT IDENTIFIER,\n     critical\
    \    BOOLEAN DEFAULT FALSE,\n     extnValue   OCTET STRING\n                 --\
    \ contains the DER encoding of an ASN.1 value\n                 -- corresponding\
    \ to the extension type identified\n                 -- by extnID\n     }\n"
- title: -- CRL structures
  contents:
  - '-- CRL structures

    '
- title: CertificateList  ::=  SEQUENCE  {
  contents:
  - "CertificateList  ::=  SEQUENCE  {\n     tbsCertList          TBSCertList,\n \
    \    signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT\
    \ STRING  }\n"
- title: TBSCertList  ::=  SEQUENCE  {
  contents:
  - "TBSCertList  ::=  SEQUENCE  {\n     version                 Version OPTIONAL,\n\
    \                                   -- if present, MUST be v2\n     signature\
    \               AlgorithmIdentifier,\n     issuer                  Name,\n   \
    \  thisUpdate              Time,\n     nextUpdate              Time OPTIONAL,\n\
    \     revokedCertificates     SEQUENCE OF SEQUENCE  {\n          userCertificate\
    \         CertificateSerialNumber,\n          revocationDate          Time,\n\
    \          crlEntryExtensions      Extensions OPTIONAL\n                     \
    \              -- if present, version MUST be v2\n                           \
    \    }  OPTIONAL,\n     crlExtensions           [0] Extensions OPTIONAL }\n  \
    \                                 -- if present, version MUST be v2\n"
- title: -- Version, Time, CertificateSerialNumber, and Extensions were
  contents:
  - '-- Version, Time, CertificateSerialNumber, and Extensions were

    '
- title: -- defined earlier for use in the certificate structure
  contents:
  - '-- defined earlier for use in the certificate structure

    '
- title: AlgorithmIdentifier  ::=  SEQUENCE  {
  contents:
  - "AlgorithmIdentifier  ::=  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n\
    \     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n         \
    \                       -- contains a value of the type\n                    \
    \            -- registered for use with the\n                                --\
    \ algorithm object identifier value\n"
- title: -- X.400 address syntax starts here
  contents:
  - '-- X.400 address syntax starts here

    '
- title: ORAddress ::= SEQUENCE {
  contents:
  - "ORAddress ::= SEQUENCE {\n   built-in-standard-attributes BuiltInStandardAttributes,\n\
    \   built-in-domain-defined-attributes\n                   BuiltInDomainDefinedAttributes\
    \ OPTIONAL,\n   -- see also teletex-domain-defined-attributes\n   extension-attributes\
    \ ExtensionAttributes OPTIONAL }\n"
- title: -- Built-in Standard Attributes
  contents:
  - '-- Built-in Standard Attributes

    '
- title: BuiltInStandardAttributes ::= SEQUENCE {
  contents:
  - "BuiltInStandardAttributes ::= SEQUENCE {\n   country-name                  CountryName\
    \ OPTIONAL,\n   administration-domain-name    AdministrationDomainName OPTIONAL,\n\
    \   network-address           [0] IMPLICIT NetworkAddress OPTIONAL,\n     -- see\
    \ also extended-network-address\n   terminal-identifier       [1] IMPLICIT TerminalIdentifier\
    \ OPTIONAL,\n   private-domain-name       [2] PrivateDomainName OPTIONAL,\n  \
    \ organization-name         [3] IMPLICIT OrganizationName OPTIONAL,\n     -- see\
    \ also teletex-organization-name\n   numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier\n\
    \                                 OPTIONAL,\n   personal-name             [5]\
    \ IMPLICIT PersonalName OPTIONAL,\n     -- see also teletex-personal-name\n  \
    \ organizational-unit-names [6] IMPLICIT OrganizationalUnitNames\n           \
    \                      OPTIONAL }\n     -- see also teletex-organizational-unit-names\n"
- title: CountryName ::= [APPLICATION 1] CHOICE {
  contents:
  - "CountryName ::= [APPLICATION 1] CHOICE {\n   x121-dcc-code         NumericString\n\
    \                           (SIZE (ub-country-name-numeric-length)),\n   iso-3166-alpha2-code\
    \  PrintableString\n                           (SIZE (ub-country-name-alpha-length))\
    \ }\n"
- title: AdministrationDomainName ::= [APPLICATION 2] CHOICE {
  contents:
  - "AdministrationDomainName ::= [APPLICATION 2] CHOICE {\n   numeric   NumericString\
    \   (SIZE (0..ub-domain-name-length)),\n   printable PrintableString (SIZE (0..ub-domain-name-length))\
    \ }\n"
- title: NetworkAddress ::= X121Address  -- see also extended-network-address
  contents:
  - 'NetworkAddress ::= X121Address  -- see also extended-network-address

    '
- title: X121Address ::= NumericString (SIZE (1..ub-x121-address-length))
  contents:
  - 'X121Address ::= NumericString (SIZE (1..ub-x121-address-length))

    '
- title: TerminalIdentifier ::= PrintableString (SIZE (1..ub-terminal-id-length))
  contents:
  - 'TerminalIdentifier ::= PrintableString (SIZE (1..ub-terminal-id-length))

    '
- title: PrivateDomainName ::= CHOICE {
  contents:
  - "PrivateDomainName ::= CHOICE {\n   numeric   NumericString   (SIZE (1..ub-domain-name-length)),\n\
    \   printable PrintableString (SIZE (1..ub-domain-name-length)) }\n"
- title: OrganizationName ::= PrintableString
  contents:
  - "OrganizationName ::= PrintableString\n                            (SIZE (1..ub-organization-name-length))\n\
    \  -- see also teletex-organization-name\n"
- title: NumericUserIdentifier ::= NumericString
  contents:
  - "NumericUserIdentifier ::= NumericString\n                            (SIZE (1..ub-numeric-user-id-length))\n"
- title: PersonalName ::= SET {
  contents:
  - "PersonalName ::= SET {\n   surname     [0] IMPLICIT PrintableString\n       \
    \             (SIZE (1..ub-surname-length)),\n   given-name  [1] IMPLICIT PrintableString\n\
    \                    (SIZE (1..ub-given-name-length)) OPTIONAL,\n   initials \
    \   [2] IMPLICIT PrintableString\n                    (SIZE (1..ub-initials-length))\
    \ OPTIONAL,\n   generation-qualifier [3] IMPLICIT PrintableString\n          \
    \          (SIZE (1..ub-generation-qualifier-length))\n                    OPTIONAL\
    \ }\n  -- see also teletex-personal-name\n"
- title: OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)
  contents:
  - "OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)\n    \
    \                         OF OrganizationalUnitName\n  -- see also teletex-organizational-unit-names\n"
- title: OrganizationalUnitName ::= PrintableString (SIZE
  contents:
  - "OrganizationalUnitName ::= PrintableString (SIZE\n                    (1..ub-organizational-unit-name-length))\n"
- title: -- Built-in Domain-defined Attributes
  contents:
  - '-- Built-in Domain-defined Attributes

    '
- title: BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE
  contents:
  - "BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE\n                    (1..ub-domain-defined-attributes)\
    \ OF\n                    BuiltInDomainDefinedAttribute\n"
- title: BuiltInDomainDefinedAttribute ::= SEQUENCE {
  contents:
  - "BuiltInDomainDefinedAttribute ::= SEQUENCE {\n   type PrintableString (SIZE\n\
    \                   (1..ub-domain-defined-attribute-type-length)),\n   value PrintableString\
    \ (SIZE\n                   (1..ub-domain-defined-attribute-value-length)) }\n"
- title: -- Extension Attributes
  contents:
  - '-- Extension Attributes

    '
- title: ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF
  contents:
  - "ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF\n          \
    \     ExtensionAttribute\n"
- title: ExtensionAttribute ::=  SEQUENCE {
  contents:
  - "ExtensionAttribute ::=  SEQUENCE {\n   extension-attribute-type [0] IMPLICIT\
    \ INTEGER\n                   (0..ub-extension-attributes),\n   extension-attribute-value\
    \ [1]\n                   ANY DEFINED BY extension-attribute-type }\n"
- title: -- Extension types and attribute values
  contents:
  - '-- Extension types and attribute values

    '
- title: common-name INTEGER ::= 1
  contents:
  - 'common-name INTEGER ::= 1

    '
- title: CommonName ::= PrintableString (SIZE (1..ub-common-name-length))
  contents:
  - 'CommonName ::= PrintableString (SIZE (1..ub-common-name-length))

    '
- title: teletex-common-name INTEGER ::= 2
  contents:
  - 'teletex-common-name INTEGER ::= 2

    '
- title: TeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))
  contents:
  - 'TeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))

    '
- title: teletex-organization-name INTEGER ::= 3
  contents:
  - 'teletex-organization-name INTEGER ::= 3

    '
- title: TeletexOrganizationName ::=
  contents:
  - "TeletexOrganizationName ::=\n                TeletexString (SIZE (1..ub-organization-name-length))\n"
- title: teletex-personal-name INTEGER ::= 4
  contents:
  - 'teletex-personal-name INTEGER ::= 4

    '
- title: TeletexPersonalName ::= SET {
  contents:
  - "TeletexPersonalName ::= SET {\n   surname     [0] IMPLICIT TeletexString\n  \
    \                  (SIZE (1..ub-surname-length)),\n   given-name  [1] IMPLICIT\
    \ TeletexString\n                    (SIZE (1..ub-given-name-length)) OPTIONAL,\n\
    \   initials    [2] IMPLICIT TeletexString\n                    (SIZE (1..ub-initials-length))\
    \ OPTIONAL,\n   generation-qualifier [3] IMPLICIT TeletexString\n            \
    \        (SIZE (1..ub-generation-qualifier-length))\n                    OPTIONAL\
    \ }\n"
- title: teletex-organizational-unit-names INTEGER ::= 5
  contents:
  - 'teletex-organizational-unit-names INTEGER ::= 5

    '
- title: TeletexOrganizationalUnitNames ::= SEQUENCE SIZE
  contents:
  - "TeletexOrganizationalUnitNames ::= SEQUENCE SIZE\n      (1..ub-organizational-units)\
    \ OF TeletexOrganizationalUnitName\n"
- title: TeletexOrganizationalUnitName ::= TeletexString
  contents:
  - "TeletexOrganizationalUnitName ::= TeletexString\n                  (SIZE (1..ub-organizational-unit-name-length))\n"
- title: pds-name INTEGER ::= 7
  contents:
  - 'pds-name INTEGER ::= 7

    '
- title: PDSName ::= PrintableString (SIZE (1..ub-pds-name-length))
  contents:
  - 'PDSName ::= PrintableString (SIZE (1..ub-pds-name-length))

    '
- title: physical-delivery-country-name INTEGER ::= 8
  contents:
  - 'physical-delivery-country-name INTEGER ::= 8

    '
- title: PhysicalDeliveryCountryName ::= CHOICE {
  contents:
  - "PhysicalDeliveryCountryName ::= CHOICE {\n   x121-dcc-code NumericString (SIZE\
    \ (ub-country-name-numeric-length)),\n   iso-3166-alpha2-code PrintableString\n\
    \                               (SIZE (ub-country-name-alpha-length)) }\n"
- title: postal-code INTEGER ::= 9
  contents:
  - 'postal-code INTEGER ::= 9

    '
- title: PostalCode ::= CHOICE {
  contents:
  - "PostalCode ::= CHOICE {\n   numeric-code   NumericString (SIZE (1..ub-postal-code-length)),\n\
    \   printable-code PrintableString (SIZE (1..ub-postal-code-length)) }\n"
- title: physical-delivery-office-name INTEGER ::= 10
  contents:
  - 'physical-delivery-office-name INTEGER ::= 10

    '
- title: PhysicalDeliveryOfficeName ::= PDSParameter
  contents:
  - 'PhysicalDeliveryOfficeName ::= PDSParameter

    '
- title: physical-delivery-office-number INTEGER ::= 11
  contents:
  - 'physical-delivery-office-number INTEGER ::= 11

    '
- title: PhysicalDeliveryOfficeNumber ::= PDSParameter
  contents:
  - 'PhysicalDeliveryOfficeNumber ::= PDSParameter

    '
- title: extension-OR-address-components INTEGER ::= 12
  contents:
  - 'extension-OR-address-components INTEGER ::= 12

    '
- title: ExtensionORAddressComponents ::= PDSParameter
  contents:
  - 'ExtensionORAddressComponents ::= PDSParameter

    '
- title: physical-delivery-personal-name INTEGER ::= 13
  contents:
  - 'physical-delivery-personal-name INTEGER ::= 13

    '
- title: PhysicalDeliveryPersonalName ::= PDSParameter
  contents:
  - 'PhysicalDeliveryPersonalName ::= PDSParameter

    '
- title: physical-delivery-organization-name INTEGER ::= 14
  contents:
  - 'physical-delivery-organization-name INTEGER ::= 14

    '
- title: PhysicalDeliveryOrganizationName ::= PDSParameter
  contents:
  - 'PhysicalDeliveryOrganizationName ::= PDSParameter

    '
- title: extension-physical-delivery-address-components INTEGER ::= 15
  contents:
  - 'extension-physical-delivery-address-components INTEGER ::= 15

    '
- title: ExtensionPhysicalDeliveryAddressComponents ::= PDSParameter
  contents:
  - 'ExtensionPhysicalDeliveryAddressComponents ::= PDSParameter

    '
- title: unformatted-postal-address INTEGER ::= 16
  contents:
  - 'unformatted-postal-address INTEGER ::= 16

    '
- title: UnformattedPostalAddress ::= SET {
  contents:
  - "UnformattedPostalAddress ::= SET {\n   printable-address SEQUENCE SIZE (1..ub-pds-physical-address-lines)\n\
    \        OF PrintableString (SIZE (1..ub-pds-parameter-length)) OPTIONAL,\n  \
    \ teletex-string TeletexString\n        (SIZE (1..ub-unformatted-address-length))\
    \ OPTIONAL }\n"
- title: street-address INTEGER ::= 17
  contents:
  - 'street-address INTEGER ::= 17

    '
- title: StreetAddress ::= PDSParameter
  contents:
  - 'StreetAddress ::= PDSParameter

    '
- title: post-office-box-address INTEGER ::= 18
  contents:
  - 'post-office-box-address INTEGER ::= 18

    '
- title: PostOfficeBoxAddress ::= PDSParameter
  contents:
  - 'PostOfficeBoxAddress ::= PDSParameter

    '
- title: poste-restante-address INTEGER ::= 19
  contents:
  - 'poste-restante-address INTEGER ::= 19

    '
- title: PosteRestanteAddress ::= PDSParameter
  contents:
  - 'PosteRestanteAddress ::= PDSParameter

    '
- title: unique-postal-name INTEGER ::= 20
  contents:
  - 'unique-postal-name INTEGER ::= 20

    '
- title: UniquePostalName ::= PDSParameter
  contents:
  - 'UniquePostalName ::= PDSParameter

    '
- title: local-postal-attributes INTEGER ::= 21
  contents:
  - 'local-postal-attributes INTEGER ::= 21

    '
- title: LocalPostalAttributes ::= PDSParameter
  contents:
  - 'LocalPostalAttributes ::= PDSParameter

    '
- title: PDSParameter ::= SET {
  contents:
  - "PDSParameter ::= SET {\n   printable-string PrintableString\n               \
    \ (SIZE(1..ub-pds-parameter-length)) OPTIONAL,\n   teletex-string TeletexString\n\
    \                (SIZE(1..ub-pds-parameter-length)) OPTIONAL }\n"
- title: extended-network-address INTEGER ::= 22
  contents:
  - 'extended-network-address INTEGER ::= 22

    '
- title: ExtendedNetworkAddress ::= CHOICE {
  contents:
  - "ExtendedNetworkAddress ::= CHOICE {\n   e163-4-address SEQUENCE {\n      number\
    \      [0] IMPLICIT NumericString\n                       (SIZE (1..ub-e163-4-number-length)),\n\
    \      sub-address [1] IMPLICIT NumericString\n                       (SIZE (1..ub-e163-4-sub-address-length))\n\
    \                       OPTIONAL },\n   psap-address   [0] IMPLICIT PresentationAddress\
    \ }\n"
- title: PresentationAddress ::= SEQUENCE {
  contents:
  - "PresentationAddress ::= SEQUENCE {\n    pSelector     [0] EXPLICIT OCTET STRING\
    \ OPTIONAL,\n    sSelector     [1] EXPLICIT OCTET STRING OPTIONAL,\n    tSelector\
    \     [2] EXPLICIT OCTET STRING OPTIONAL,\n    nAddresses    [3] EXPLICIT SET\
    \ SIZE (1..MAX) OF OCTET STRING }\n"
- title: terminal-type  INTEGER ::= 23
  contents:
  - 'terminal-type  INTEGER ::= 23

    '
- title: TerminalType ::= INTEGER {
  contents:
  - "TerminalType ::= INTEGER {\n   telex        (3),\n   teletex      (4),\n   g3-facsimile\
    \ (5),\n   g4-facsimile (6),\n   ia5-terminal (7),\n   videotex     (8) } (0..ub-integer-options)\n"
- title: -- Extension Domain-defined Attributes
  contents:
  - '-- Extension Domain-defined Attributes

    '
- title: teletex-domain-defined-attributes INTEGER ::= 6
  contents:
  - 'teletex-domain-defined-attributes INTEGER ::= 6

    '
- title: TeletexDomainDefinedAttributes ::= SEQUENCE SIZE
  contents:
  - "TeletexDomainDefinedAttributes ::= SEQUENCE SIZE\n   (1..ub-domain-defined-attributes)\
    \ OF TeletexDomainDefinedAttribute\n"
- title: TeletexDomainDefinedAttribute ::= SEQUENCE {
  contents:
  - "TeletexDomainDefinedAttribute ::= SEQUENCE {\n        type TeletexString\n  \
    \             (SIZE (1..ub-domain-defined-attribute-type-length)),\n        value\
    \ TeletexString\n               (SIZE (1..ub-domain-defined-attribute-value-length))\
    \ }\n"
- title: --  specifications of Upper Bounds MUST be regarded as mandatory
  contents:
  - '--  specifications of Upper Bounds MUST be regarded as mandatory

    '
- title: --  from Annex B of ITU-T X.411 Reference Definition of MTS Parameter
  contents:
  - '--  from Annex B of ITU-T X.411 Reference Definition of MTS Parameter

    '
- title: --  Upper Bounds
  contents:
  - '--  Upper Bounds

    '
- title: -- Upper Bounds
  contents:
  - '-- Upper Bounds

    '
- title: ub-name INTEGER ::= 32768
  contents:
  - 'ub-name INTEGER ::= 32768

    '
- title: ub-common-name INTEGER ::= 64
  contents:
  - 'ub-common-name INTEGER ::= 64

    '
- title: ub-locality-name INTEGER ::= 128
  contents:
  - 'ub-locality-name INTEGER ::= 128

    '
- title: ub-state-name INTEGER ::= 128
  contents:
  - 'ub-state-name INTEGER ::= 128

    '
- title: ub-organization-name INTEGER ::= 64
  contents:
  - 'ub-organization-name INTEGER ::= 64

    '
- title: ub-organizational-unit-name INTEGER ::= 64
  contents:
  - 'ub-organizational-unit-name INTEGER ::= 64

    '
- title: ub-title INTEGER ::= 64
  contents:
  - 'ub-title INTEGER ::= 64

    '
- title: ub-serial-number INTEGER ::= 64
  contents:
  - 'ub-serial-number INTEGER ::= 64

    '
- title: ub-match INTEGER ::= 128
  contents:
  - 'ub-match INTEGER ::= 128

    '
- title: ub-emailaddress-length INTEGER ::= 255
  contents:
  - 'ub-emailaddress-length INTEGER ::= 255

    '
- title: ub-common-name-length INTEGER ::= 64
  contents:
  - 'ub-common-name-length INTEGER ::= 64

    '
- title: ub-country-name-alpha-length INTEGER ::= 2
  contents:
  - 'ub-country-name-alpha-length INTEGER ::= 2

    '
- title: ub-country-name-numeric-length INTEGER ::= 3
  contents:
  - 'ub-country-name-numeric-length INTEGER ::= 3

    '
- title: ub-domain-defined-attributes INTEGER ::= 4
  contents:
  - 'ub-domain-defined-attributes INTEGER ::= 4

    '
- title: ub-domain-defined-attribute-type-length INTEGER ::= 8
  contents:
  - 'ub-domain-defined-attribute-type-length INTEGER ::= 8

    '
- title: ub-domain-defined-attribute-value-length INTEGER ::= 128
  contents:
  - 'ub-domain-defined-attribute-value-length INTEGER ::= 128

    '
- title: ub-domain-name-length INTEGER ::= 16
  contents:
  - 'ub-domain-name-length INTEGER ::= 16

    '
- title: ub-extension-attributes INTEGER ::= 256
  contents:
  - 'ub-extension-attributes INTEGER ::= 256

    '
- title: ub-e163-4-number-length INTEGER ::= 15
  contents:
  - 'ub-e163-4-number-length INTEGER ::= 15

    '
- title: ub-e163-4-sub-address-length INTEGER ::= 40
  contents:
  - 'ub-e163-4-sub-address-length INTEGER ::= 40

    '
- title: ub-generation-qualifier-length INTEGER ::= 3
  contents:
  - 'ub-generation-qualifier-length INTEGER ::= 3

    '
- title: ub-given-name-length INTEGER ::= 16
  contents:
  - 'ub-given-name-length INTEGER ::= 16

    '
- title: ub-initials-length INTEGER ::= 5
  contents:
  - 'ub-initials-length INTEGER ::= 5

    '
- title: ub-integer-options INTEGER ::= 256
  contents:
  - 'ub-integer-options INTEGER ::= 256

    '
- title: ub-numeric-user-id-length INTEGER ::= 32
  contents:
  - 'ub-numeric-user-id-length INTEGER ::= 32

    '
- title: ub-organization-name-length INTEGER ::= 64
  contents:
  - 'ub-organization-name-length INTEGER ::= 64

    '
- title: ub-organizational-unit-name-length INTEGER ::= 32
  contents:
  - 'ub-organizational-unit-name-length INTEGER ::= 32

    '
- title: ub-organizational-units INTEGER ::= 4
  contents:
  - 'ub-organizational-units INTEGER ::= 4

    '
- title: ub-pds-name-length INTEGER ::= 16
  contents:
  - 'ub-pds-name-length INTEGER ::= 16

    '
- title: ub-pds-parameter-length INTEGER ::= 30
  contents:
  - 'ub-pds-parameter-length INTEGER ::= 30

    '
- title: ub-pds-physical-address-lines INTEGER ::= 6
  contents:
  - 'ub-pds-physical-address-lines INTEGER ::= 6

    '
- title: ub-postal-code-length INTEGER ::= 16
  contents:
  - 'ub-postal-code-length INTEGER ::= 16

    '
- title: ub-pseudonym INTEGER ::= 128
  contents:
  - 'ub-pseudonym INTEGER ::= 128

    '
- title: ub-surname-length INTEGER ::= 40
  contents:
  - 'ub-surname-length INTEGER ::= 40

    '
- title: ub-terminal-id-length INTEGER ::= 24
  contents:
  - 'ub-terminal-id-length INTEGER ::= 24

    '
- title: ub-unformatted-address-length INTEGER ::= 180
  contents:
  - 'ub-unformatted-address-length INTEGER ::= 180

    '
- title: ub-x121-address-length INTEGER ::= 16
  contents:
  - 'ub-x121-address-length INTEGER ::= 16

    '
- title: -- Note - upper bounds on string types, such as TeletexString, are
  contents:
  - '-- Note - upper bounds on string types, such as TeletexString, are

    '
- title: -- measured in characters.  Excepting PrintableString or IA5String, a
  contents:
  - '-- measured in characters.  Excepting PrintableString or IA5String, a

    '
- title: -- significantly greater number of octets will be required to hold
  contents:
  - '-- significantly greater number of octets will be required to hold

    '
- title: -- such a value.  As a minimum, 16 octets, or twice the specified
  contents:
  - '-- such a value.  As a minimum, 16 octets, or twice the specified

    '
- title: -- upper bound, whichever is the larger, should be allowed for
  contents:
  - '-- upper bound, whichever is the larger, should be allowed for

    '
- title: -- TeletexString.  For UTF8String or UniversalString at least four
  contents:
  - '-- TeletexString.  For UTF8String or UniversalString at least four

    '
- title: -- times the upper bound should be allowed.
  contents:
  - '-- times the upper bound should be allowed.

    '
- title: END
  contents:
  - 'END

    '
- title: A.2.  Implicitly Tagged Module, 1988 Syntax
  contents:
  - 'A.2.  Implicitly Tagged Module, 1988 Syntax

    '
- title: PKIX1Implicit88 { iso(1) identified-organization(3) dod(6) internet(1)
  contents:
  - "PKIX1Implicit88 { iso(1) identified-organization(3) dod(6) internet(1)\n  security(5)\
    \ mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS ALL --
  contents:
  - '-- EXPORTS ALL --

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n      id-pe, id-kp, id-qt-unotice, id-qt-cps,\n      -- delete following\
    \ line if \"new\" types are supported --\n      BMPString, UTF8String,  -- end\
    \ \"new\" types --\n      ORAddress, Name, RelativeDistinguishedName,\n      CertificateSerialNumber,\
    \ Attribute, DirectoryString\n      FROM PKIX1Explicit88 { iso(1) identified-organization(3)\n\
    \            dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n          \
    \  id-mod(0) id-pkix1-explicit(18) };\n"
- title: -- ISO arc for standard certificate and CRL extensions
  contents:
  - '-- ISO arc for standard certificate and CRL extensions

    '
- title: id-ce OBJECT IDENTIFIER  ::=  {joint-iso-ccitt(2) ds(5) 29}
  contents:
  - 'id-ce OBJECT IDENTIFIER  ::=  {joint-iso-ccitt(2) ds(5) 29}

    '
- title: -- authority key identifier OID and syntax
  contents:
  - '-- authority key identifier OID and syntax

    '
- title: id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
  contents:
  - 'id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }

    '
- title: AuthorityKeyIdentifier ::= SEQUENCE {
  contents:
  - "AuthorityKeyIdentifier ::= SEQUENCE {\n    keyIdentifier             [0] KeyIdentifier\
    \            OPTIONAL,\n    authorityCertIssuer       [1] GeneralNames       \
    \      OPTIONAL,\n    authorityCertSerialNumber [2] CertificateSerialNumber  OPTIONAL\
    \ }\n    -- authorityCertIssuer and authorityCertSerialNumber MUST both\n    --\
    \ be present or both be absent\n"
- title: KeyIdentifier ::= OCTET STRING
  contents:
  - 'KeyIdentifier ::= OCTET STRING

    '
- title: -- subject key identifier OID and syntax
  contents:
  - '-- subject key identifier OID and syntax

    '
- title: id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }
  contents:
  - 'id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }

    '
- title: SubjectKeyIdentifier ::= KeyIdentifier
  contents:
  - 'SubjectKeyIdentifier ::= KeyIdentifier

    '
- title: -- key usage extension OID and syntax
  contents:
  - '-- key usage extension OID and syntax

    '
- title: id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
  contents:
  - 'id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }

    '
- title: KeyUsage ::= BIT STRING {
  contents:
  - "KeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation\
    \          (1),  -- recent editions of X.509 have\n                          \
    \      -- renamed this bit to contentCommitment\n     keyEncipherment        \
    \ (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n\
    \     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly\
    \            (7),\n     decipherOnly            (8) }\n"
- title: -- private key usage period extension OID and syntax
  contents:
  - '-- private key usage period extension OID and syntax

    '
- title: id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce 16 }
  contents:
  - 'id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce 16 }

    '
- title: PrivateKeyUsagePeriod ::= SEQUENCE {
  contents:
  - "PrivateKeyUsagePeriod ::= SEQUENCE {\n     notBefore       [0]     GeneralizedTime\
    \ OPTIONAL,\n     notAfter        [1]     GeneralizedTime OPTIONAL }\n     --\
    \ either notBefore or notAfter MUST be present\n"
- title: -- certificate policies extension OID and syntax
  contents:
  - '-- certificate policies extension OID and syntax

    '
- title: id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }
  contents:
  - 'id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }

    '
- title: anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies 0 }
  contents:
  - 'anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies 0 }

    '
- title: CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation
  contents:
  - 'CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation

    '
- title: PolicyInformation ::= SEQUENCE {
  contents:
  - "PolicyInformation ::= SEQUENCE {\n     policyIdentifier   CertPolicyId,\n   \
    \  policyQualifiers   SEQUENCE SIZE (1..MAX) OF\n             PolicyQualifierInfo\
    \ OPTIONAL }\n"
- title: CertPolicyId ::= OBJECT IDENTIFIER
  contents:
  - 'CertPolicyId ::= OBJECT IDENTIFIER

    '
- title: PolicyQualifierInfo ::= SEQUENCE {
  contents:
  - "PolicyQualifierInfo ::= SEQUENCE {\n     policyQualifierId  PolicyQualifierId,\n\
    \     qualifier          ANY DEFINED BY policyQualifierId }\n"
- title: -- Implementations that recognize additional policy qualifiers MUST
  contents:
  - '-- Implementations that recognize additional policy qualifiers MUST

    '
- title: -- augment the following definition for PolicyQualifierId
  contents:
  - '-- augment the following definition for PolicyQualifierId

    '
- title: PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
  contents:
  - 'PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )

    '
- title: -- CPS pointer qualifier
  contents:
  - '-- CPS pointer qualifier

    '
- title: CPSuri ::= IA5String
  contents:
  - 'CPSuri ::= IA5String

    '
- title: -- user notice qualifier
  contents:
  - '-- user notice qualifier

    '
- title: UserNotice ::= SEQUENCE {
  contents:
  - "UserNotice ::= SEQUENCE {\n     noticeRef        NoticeReference OPTIONAL,\n\
    \     explicitText     DisplayText OPTIONAL }\n"
- title: NoticeReference ::= SEQUENCE {
  contents:
  - "NoticeReference ::= SEQUENCE {\n     organization     DisplayText,\n     noticeNumbers\
    \    SEQUENCE OF INTEGER }\n"
- title: DisplayText ::= CHOICE {
  contents:
  - "DisplayText ::= CHOICE {\n     ia5String        IA5String      (SIZE (1..200)),\n\
    \     visibleString    VisibleString  (SIZE (1..200)),\n     bmpString       \
    \ BMPString      (SIZE (1..200)),\n     utf8String       UTF8String     (SIZE\
    \ (1..200)) }\n"
- title: -- policy mapping extension OID and syntax
  contents:
  - '-- policy mapping extension OID and syntax

    '
- title: id-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }
  contents:
  - 'id-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }

    '
- title: PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
  contents:
  - "PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {\n     issuerDomainPolicy\
    \      CertPolicyId,\n     subjectDomainPolicy     CertPolicyId }\n"
- title: -- subject alternative name extension OID and syntax
  contents:
  - '-- subject alternative name extension OID and syntax

    '
- title: id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }
  contents:
  - 'id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }

    '
- title: SubjectAltName ::= GeneralNames
  contents:
  - 'SubjectAltName ::= GeneralNames

    '
- title: GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
  contents:
  - 'GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName

    '
- title: GeneralName ::= CHOICE {
  contents:
  - "GeneralName ::= CHOICE {\n     otherName                 [0]  AnotherName,\n\
    \     rfc822Name                [1]  IA5String,\n     dNSName                \
    \   [2]  IA5String,\n     x400Address               [3]  ORAddress,\n     directoryName\
    \             [4]  Name,\n     ediPartyName              [5]  EDIPartyName,\n\
    \     uniformResourceIdentifier [6]  IA5String,\n     iPAddress              \
    \   [7]  OCTET STRING,\n     registeredID              [8]  OBJECT IDENTIFIER\
    \ }\n"
- title: -- AnotherName replaces OTHER-NAME ::= TYPE-IDENTIFIER, as
  contents:
  - '-- AnotherName replaces OTHER-NAME ::= TYPE-IDENTIFIER, as

    '
- title: -- TYPE-IDENTIFIER is not supported in the '88 ASN.1 syntax
  contents:
  - '-- TYPE-IDENTIFIER is not supported in the ''88 ASN.1 syntax

    '
- title: AnotherName ::= SEQUENCE {
  contents:
  - "AnotherName ::= SEQUENCE {\n     type-id    OBJECT IDENTIFIER,\n     value  \
    \    [0] EXPLICIT ANY DEFINED BY type-id }\n"
- title: EDIPartyName ::= SEQUENCE {
  contents:
  - "EDIPartyName ::= SEQUENCE {\n     nameAssigner              [0]  DirectoryString\
    \ OPTIONAL,\n     partyName                 [1]  DirectoryString }\n"
- title: -- issuer alternative name extension OID and syntax
  contents:
  - '-- issuer alternative name extension OID and syntax

    '
- title: id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }
  contents:
  - 'id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }

    '
- title: IssuerAltName ::= GeneralNames
  contents:
  - 'IssuerAltName ::= GeneralNames

    '
- title: id-ce-subjectDirectoryAttributes OBJECT IDENTIFIER ::=  { id-ce 9 }
  contents:
  - 'id-ce-subjectDirectoryAttributes OBJECT IDENTIFIER ::=  { id-ce 9 }

    '
- title: SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
  contents:
  - 'SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute

    '
- title: -- basic constraints extension OID and syntax
  contents:
  - '-- basic constraints extension OID and syntax

    '
- title: id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
  contents:
  - 'id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }

    '
- title: BasicConstraints ::= SEQUENCE {
  contents:
  - "BasicConstraints ::= SEQUENCE {\n     cA                      BOOLEAN DEFAULT\
    \ FALSE,\n     pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\n"
- title: -- name constraints extension OID and syntax
  contents:
  - '-- name constraints extension OID and syntax

    '
- title: id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }
  contents:
  - 'id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }

    '
- title: NameConstraints ::= SEQUENCE {
  contents:
  - "NameConstraints ::= SEQUENCE {\n     permittedSubtrees       [0]     GeneralSubtrees\
    \ OPTIONAL,\n     excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n"
- title: GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
  contents:
  - 'GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

    '
- title: GeneralSubtree ::= SEQUENCE {
  contents:
  - "GeneralSubtree ::= SEQUENCE {\n     base                    GeneralName,\n  \
    \   minimum         [0]     BaseDistance DEFAULT 0,\n     maximum         [1]\
    \     BaseDistance OPTIONAL }\n"
- title: BaseDistance ::= INTEGER (0..MAX)
  contents:
  - 'BaseDistance ::= INTEGER (0..MAX)

    '
- title: -- policy constraints extension OID and syntax
  contents:
  - '-- policy constraints extension OID and syntax

    '
- title: id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }
  contents:
  - 'id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }

    '
- title: PolicyConstraints ::= SEQUENCE {
  contents:
  - "PolicyConstraints ::= SEQUENCE {\n     requireExplicitPolicy   [0]     SkipCerts\
    \ OPTIONAL,\n     inhibitPolicyMapping    [1]     SkipCerts OPTIONAL }\n"
- title: SkipCerts ::= INTEGER (0..MAX)
  contents:
  - 'SkipCerts ::= INTEGER (0..MAX)

    '
- title: -- CRL distribution points extension OID and syntax
  contents:
  - '-- CRL distribution points extension OID and syntax

    '
- title: id-ce-cRLDistributionPoints     OBJECT IDENTIFIER  ::=  {id-ce 31}
  contents:
  - 'id-ce-cRLDistributionPoints     OBJECT IDENTIFIER  ::=  {id-ce 31}

    '
- title: CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint
  contents:
  - 'CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint

    '
- title: DistributionPoint ::= SEQUENCE {
  contents:
  - "DistributionPoint ::= SEQUENCE {\n     distributionPoint       [0]     DistributionPointName\
    \ OPTIONAL,\n     reasons                 [1]     ReasonFlags OPTIONAL,\n    \
    \ cRLIssuer               [2]     GeneralNames OPTIONAL }\n"
- title: DistributionPointName ::= CHOICE {
  contents:
  - "DistributionPointName ::= CHOICE {\n     fullName                [0]     GeneralNames,\n\
    \     nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\n"
- title: ReasonFlags ::= BIT STRING {
  contents:
  - "ReasonFlags ::= BIT STRING {\n     unused                  (0),\n     keyCompromise\
    \           (1),\n     cACompromise            (2),\n     affiliationChanged \
    \     (3),\n     superseded              (4),\n     cessationOfOperation    (5),\n\
    \     certificateHold         (6),\n     privilegeWithdrawn      (7),\n     aACompromise\
    \            (8) }\n"
- title: -- extended key usage extension OID and syntax
  contents:
  - '-- extended key usage extension OID and syntax

    '
- title: id-ce-extKeyUsage OBJECT IDENTIFIER ::= {id-ce 37}
  contents:
  - 'id-ce-extKeyUsage OBJECT IDENTIFIER ::= {id-ce 37}

    '
- title: ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
  contents:
  - 'ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

    '
- title: KeyPurposeId ::= OBJECT IDENTIFIER
  contents:
  - 'KeyPurposeId ::= OBJECT IDENTIFIER

    '
- title: -- permit unspecified key uses
  contents:
  - '-- permit unspecified key uses

    '
- title: anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }
  contents:
  - 'anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }

    '
- title: -- extended key purpose OIDs
  contents:
  - '-- extended key purpose OIDs

    '
- title: id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }
  contents:
  - 'id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }

    '
- title: id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }
  contents:
  - 'id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }

    '
- title: id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }
  contents:
  - 'id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }

    '
- title: id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }
  contents:
  - 'id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }

    '
- title: id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }
  contents:
  - 'id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }

    '
- title: id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
  contents:
  - 'id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }

    '
- title: -- inhibit any policy OID and syntax
  contents:
  - '-- inhibit any policy OID and syntax

    '
- title: id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=  { id-ce 54 }
  contents:
  - 'id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=  { id-ce 54 }

    '
- title: InhibitAnyPolicy ::= SkipCerts
  contents:
  - 'InhibitAnyPolicy ::= SkipCerts

    '
- title: -- freshest (delta)CRL extension OID and syntax
  contents:
  - '-- freshest (delta)CRL extension OID and syntax

    '
- title: id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }
  contents:
  - 'id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }

    '
- title: FreshestCRL ::= CRLDistributionPoints
  contents:
  - 'FreshestCRL ::= CRLDistributionPoints

    '
- title: -- authority info access
  contents:
  - '-- authority info access

    '
- title: id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
  contents:
  - 'id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }

    '
- title: AuthorityInfoAccessSyntax  ::=
  contents:
  - "AuthorityInfoAccessSyntax  ::=\n        SEQUENCE SIZE (1..MAX) OF AccessDescription\n"
- title: AccessDescription  ::=  SEQUENCE {
  contents:
  - "AccessDescription  ::=  SEQUENCE {\n        accessMethod          OBJECT IDENTIFIER,\n\
    \        accessLocation        GeneralName  }\n"
- title: -- subject info access
  contents:
  - '-- subject info access

    '
- title: id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }
  contents:
  - 'id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }

    '
- title: SubjectInfoAccessSyntax  ::=
  contents:
  - "SubjectInfoAccessSyntax  ::=\n        SEQUENCE SIZE (1..MAX) OF AccessDescription\n"
- title: -- CRL number extension OID and syntax
  contents:
  - '-- CRL number extension OID and syntax

    '
- title: id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }
  contents:
  - 'id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }

    '
- title: CRLNumber ::= INTEGER (0..MAX)
  contents:
  - 'CRLNumber ::= INTEGER (0..MAX)

    '
- title: -- issuing distribution point extension OID and syntax
  contents:
  - '-- issuing distribution point extension OID and syntax

    '
- title: id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= { id-ce 28 }
  contents:
  - 'id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= { id-ce 28 }

    '
- title: IssuingDistributionPoint ::= SEQUENCE {
  contents:
  - "IssuingDistributionPoint ::= SEQUENCE {\n     distributionPoint          [0]\
    \ DistributionPointName OPTIONAL,\n     onlyContainsUserCerts      [1] BOOLEAN\
    \ DEFAULT FALSE,\n     onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n\
    \     onlySomeReasons            [3] ReasonFlags OPTIONAL,\n     indirectCRL \
    \               [4] BOOLEAN DEFAULT FALSE,\n     onlyContainsAttributeCerts [5]\
    \ BOOLEAN DEFAULT FALSE }\n     -- at most one of onlyContainsUserCerts, onlyContainsCACerts,\n\
    \     -- and onlyContainsAttributeCerts may be set to TRUE.\n"
- title: id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }
  contents:
  - 'id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }

    '
- title: BaseCRLNumber ::= CRLNumber
  contents:
  - 'BaseCRLNumber ::= CRLNumber

    '
- title: -- reason code extension OID and syntax
  contents:
  - '-- reason code extension OID and syntax

    '
- title: id-ce-cRLReasons OBJECT IDENTIFIER ::= { id-ce 21 }
  contents:
  - 'id-ce-cRLReasons OBJECT IDENTIFIER ::= { id-ce 21 }

    '
- title: CRLReason ::= ENUMERATED {
  contents:
  - "CRLReason ::= ENUMERATED {\n     unspecified             (0),\n     keyCompromise\
    \           (1),\n     cACompromise            (2),\n     affiliationChanged \
    \     (3),\n     superseded              (4),\n     cessationOfOperation    (5),\n\
    \     certificateHold         (6),\n     removeFromCRL           (8),\n     privilegeWithdrawn\
    \      (9),\n     aACompromise           (10) }\n"
- title: -- certificate issuer CRL entry extension OID and syntax
  contents:
  - '-- certificate issuer CRL entry extension OID and syntax

    '
- title: id-ce-certificateIssuer OBJECT IDENTIFIER ::= { id-ce 29 }
  contents:
  - 'id-ce-certificateIssuer OBJECT IDENTIFIER ::= { id-ce 29 }

    '
- title: CertificateIssuer ::= GeneralNames
  contents:
  - 'CertificateIssuer ::= GeneralNames

    '
- title: -- hold instruction extension OID and syntax
  contents:
  - '-- hold instruction extension OID and syntax

    '
- title: id-ce-holdInstructionCode OBJECT IDENTIFIER ::= { id-ce 23 }
  contents:
  - 'id-ce-holdInstructionCode OBJECT IDENTIFIER ::= { id-ce 23 }

    '
- title: HoldInstructionCode ::= OBJECT IDENTIFIER
  contents:
  - 'HoldInstructionCode ::= OBJECT IDENTIFIER

    '
- title: -- ANSI x9 arc holdinstruction arc
  contents:
  - '-- ANSI x9 arc holdinstruction arc

    '
- title: holdInstruction OBJECT IDENTIFIER ::=
  contents:
  - "holdInstruction OBJECT IDENTIFIER ::=\n          {joint-iso-itu-t(2) member-body(2)\
    \ us(840) x9cm(10040) 2}\n"
- title: -- ANSI X9 holdinstructions
  contents:
  - '-- ANSI X9 holdinstructions

    '
- title: id-holdinstruction-none OBJECT IDENTIFIER  ::=
  contents:
  - "id-holdinstruction-none OBJECT IDENTIFIER  ::=\n                            \
    \          {holdInstruction 1} -- deprecated\n"
- title: id-holdinstruction-callissuer OBJECT IDENTIFIER ::= {holdInstruction 2}
  contents:
  - 'id-holdinstruction-callissuer OBJECT IDENTIFIER ::= {holdInstruction 2}

    '
- title: id-holdinstruction-reject OBJECT IDENTIFIER ::= {holdInstruction 3}
  contents:
  - 'id-holdinstruction-reject OBJECT IDENTIFIER ::= {holdInstruction 3}

    '
- title: -- invalidity date CRL entry extension OID and syntax
  contents:
  - '-- invalidity date CRL entry extension OID and syntax

    '
- title: id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }
  contents:
  - 'id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }

    '
- title: InvalidityDate ::=  GeneralizedTime
  contents:
  - 'InvalidityDate ::=  GeneralizedTime

    '
- title: END
  contents:
  - 'END

    '
- title: Appendix B.  ASN.1 Notes
  contents:
  - "Appendix B.  ASN.1 Notes\n   CAs MUST force the serialNumber to be a non-negative\
    \ integer, that\n   is, the sign bit in the DER encoding of the INTEGER value\
    \ MUST be\n   zero.  This can be done by adding a leading (leftmost) `00'H octet\
    \ if\n   necessary.  This removes a potential ambiguity in mapping between a\n\
    \   string of octets and an integer value.\n   As noted in Section 4.1.2.2, serial\
    \ numbers can be expected to\n   contain long integers.  Certificate users MUST\
    \ be able to handle\n   serialNumber values up to 20 octets in length.  Conforming\
    \ CAs MUST\n   NOT use serialNumber values longer than 20 octets.\n   As noted\
    \ in Section 5.2.3, CRL numbers can be expected to contain\n   long integers.\
    \  CRL validators MUST be able to handle cRLNumber\n   values up to 20 octets\
    \ in length.  Conforming CRL issuers MUST NOT\n   use cRLNumber values longer\
    \ than 20 octets.\n   The construct \"SEQUENCE SIZE (1..MAX) OF\" appears in several\
    \ ASN.1\n   constructs.  A valid ASN.1 sequence will have zero or more entries.\n\
    \   The SIZE (1..MAX) construct constrains the sequence to have at least\n   one\
    \ entry.  MAX indicates that the upper bound is unspecified.\n   Implementations\
    \ are free to choose an upper bound that suits their\n   environment.\n   The\
    \ character string type PrintableString supports a very basic Latin\n   character\
    \ set: the lowercase letters 'a' through 'z', uppercase\n   letters 'A' through\
    \ 'Z', the digits '0' through '9', eleven special\n   characters ' = ( ) + , -\
    \ . / : ? and space.\n   Implementers should note that the at sign ('@') and underscore\
    \ ('_')\n   characters are not supported by the ASN.1 type PrintableString.\n\
    \   These characters often appear in Internet addresses.  Such addresses\n   MUST\
    \ be encoded using an ASN.1 type that supports them.  They are\n   usually encoded\
    \ as IA5String in either the emailAddress attribute\n   within a distinguished\
    \ name or the rfc822Name field of GeneralName.\n   Conforming implementations\
    \ MUST NOT encode strings that include\n   either the at sign or underscore character\
    \ as PrintableString.\n   The character string type TeletexString is a superset\
    \ of\n   PrintableString.  TeletexString supports a fairly standard (ASCII-\n\
    \   like) Latin character set: Latin characters with non-spacing accents\n   and\
    \ Japanese characters.\n   Named bit lists are BIT STRINGs where the values have\
    \ been assigned\n   names.  This specification makes use of named bit lists in\
    \ the\n   definitions for the key usage, CRL distribution points, and freshest\n\
    \   CRL certificate extensions, as well as the freshest CRL and issuing\n   distribution\
    \ point CRL extensions.  When DER encoding a named bit\n   list, trailing zeros\
    \ MUST be omitted.  That is, the encoded value\n   ends with the last named bit\
    \ that is set to one.\n   The character string type UniversalString supports any\
    \ of the\n   characters allowed by [ISO10646].  ISO 10646 is the Universal\n \
    \  multiple-octet coded Character Set (UCS).\n   The character string type UTF8String\
    \ was introduced in the 1997\n   version of ASN.1, and UTF8String was added to\
    \ the list of choices for\n   DirectoryString in the 2001 version of [X.520].\
    \  UTF8String is a\n   universal type and has been assigned tag number 12.  The\
    \ content of\n   UTF8String was defined by RFC 2044 and updated in RFC 2279, which\
    \ was\n   updated in [RFC3629].\n   In anticipation of these changes, and in conformance\
    \ with IETF Best\n   Practices codified in [RFC2277], IETF Policy on Character\
    \ Sets and\n   Languages, this document includes UTF8String as a choice in\n \
    \  DirectoryString and in the userNotice certificate policy qualifier.\n   For\
    \ many of the attribute types defined in [X.520], the\n   AttributeValue uses\
    \ the DirectoryString type.  Of the attributes\n   specified in Appendix A, the\
    \ name, surname, givenName, initials,\n   generationQualifier, commonName, localityName,\
    \ stateOrProvinceName,\n   organizationName, organizationalUnitName, title, and\
    \ pseudonym\n   attributes all use the DirectoryString type.  X.520 uses a\n \
    \  parameterized type definition [X.683] of DirectoryString to specify\n   the\
    \ syntax for each of these attributes.  The parameter is used to\n   indicate\
    \ the maximum string length allowed for the attribute.  In\n   Appendix A, in\
    \ order to avoid the use of parameterized type\n   definitions, the DirectoryString\
    \ type is written in its expanded form\n   for the definition of each of these\
    \ attribute types.  So, the ASN.1\n   in Appendix A describes the syntax for each\
    \ of these attributes as\n   being a CHOICE of TeletexString, PrintableString,\
    \ UniversalString,\n   UTF8String, and BMPString, with the appropriate constraints\
    \ on the\n   string length applied to each of the types in the CHOICE, rather\
    \ than\n   using the ASN.1 type DirectoryString to describe the syntax.\n   Implementers\
    \ should note that the DER encoding of the SET OF values\n   requires ordering\
    \ of the encodings of the values.  In particular,\n   this issue arises with respect\
    \ to distinguished names.\n   Implementers should note that the DER encoding of\
    \ SET or SEQUENCE\n   components whose value is the DEFAULT omit the component\
    \ from the\n   encoded certificate or CRL.  For example, a BasicConstraints\n\
    \   extension whose cA value is FALSE would omit the cA boolean from the\n   encoded\
    \ certificate.\n   Object Identifiers (OIDs) are used throughout this specification\
    \ to\n   identify certificate policies, public key and signature algorithms,\n\
    \   certificate extensions, etc.  There is no maximum size for OIDs.\n   This\
    \ specification mandates support for OIDs that have arc elements\n   with values\
    \ that are less than 2^28, that is, they MUST be between 0\n   and 268,435,455,\
    \ inclusive.  This allows each arc element to be\n   represented within a single\
    \ 32-bit word.  Implementations MUST also\n   support OIDs where the length of\
    \ the dotted decimal (see Section 1.4\n   of [RFC4512]) string representation\
    \ can be up to 100 bytes\n   (inclusive).  Implementations MUST be able to handle\
    \ OIDs with up to\n   20 elements (inclusive).  CAs SHOULD NOT issue certificates\
    \ that\n   contain OIDs that exceed these requirements.  Likewise, CRL issuers\n\
    \   SHOULD NOT issue CRLs that contain OIDs that exceed these\n   requirements.\n\
    \   The content-specific rules for encoding GeneralName field values in\n   the\
    \ nameConstraints extension differ from rules that apply in other\n   extensions.\
    \  In all other certificate, CRL, and CRL entry extensions\n   specified in this\
    \ document the encoding rules conform to the rules\n   for the underlying type.\
    \  For example, values in the\n   uniformResourceIdentifier field must contain\
    \ a valid URI as specified\n   in [RFC3986].  The content-specific rules for encoding\
    \ values in the\n   nameConstraints extension are specified in Section 4.2.1.10,\
    \ and\n   these rules may not conform to the rules for the underlying type.\n\
    \   For example, when the uniformResourceIdentifier field appears in a\n   nameConstraints\
    \ extension, it must hold a DNS name (e.g.,\n   \"host.example.com\" or \".example.com\"\
    ) rather than a URI.\n   Implementors are warned that the X.500 standards community\
    \ has\n   developed a series of extensibility rules.  These rules determine\n\
    \   when an ASN.1 definition can be changed without assigning a new\n   Object\
    \ Identifier (OID).  For example, at least two extension\n   definitions included\
    \ in [RFC2459], the predecessor to this profile\n   document, have different ASN.1\
    \ definitions in this specification, but\n   the same OID is used.  If unknown\
    \ elements appear within an\n   extension, and the extension is not marked as\
    \ critical, those unknown\n   elements ought to be ignored, as follows:\n    \
    \  (a)  ignore all unknown bit name assignments within a bit string;\n      (b)\
    \  ignore all unknown named numbers in an ENUMERATED type or\n           INTEGER\
    \ type that is being used in the enumerated style,\n           provided the number\
    \ occurs as an optional element of a SET or\n           SEQUENCE; and\n      (c)\
    \  ignore all unknown elements in SETs, at the end of SEQUENCEs,\n           or\
    \ in CHOICEs where the CHOICE is itself an optional element\n           of a SET\
    \ or SEQUENCE.\n   If an extension containing unexpected values is marked as critical,\n\
    \   the implementation MUST reject the certificate or CRL containing the\n   unrecognized\
    \ extension.\n"
- title: Appendix C.  Examples
  contents:
  - "Appendix C.  Examples\n   This appendix contains four examples: three certificates\
    \ and a CRL.\n   The first two certificates and the CRL comprise a minimal\n \
    \  certification path.\n   Appendix C.1 contains an annotated hex dump of a \"\
    self-signed\"\n   certificate issued by a CA whose distinguished name is\n   cn=Example\
    \ CA,dc=example,dc=com.  The certificate contains an RSA\n   public key, and is\
    \ signed by the corresponding RSA private key.\n   Appendix C.2 contains an annotated\
    \ hex dump of an end entity\n   certificate.  The end entity certificate contains\
    \ an RSA public key,\n   and is signed by the private key corresponding to the\
    \ \"self-signed\"\n   certificate in Appendix C.1.\n   Appendix C.3 contains an\
    \ annotated hex dump of an end entity\n   certificate that contains a DSA public\
    \ key with parameters, and is\n   signed with DSA and SHA-1.  This certificate\
    \ is not part of the\n   minimal certification path.\n   Appendix C.4 contains\
    \ an annotated hex dump of a CRL.  The CRL is\n   issued by the CA whose distinguished\
    \ name is\n   cn=Example CA,dc=example,dc=com and the list of revoked certificates\n\
    \   includes the end entity certificate presented in Appendix C.2.\n   The certificates\
    \ were processed using Peter Gutmann's dumpasn1\n   utility to generate the output.\
    \  The source for the dumpasn1 utility\n   is available at <http://www.cs.auckland.ac.nz/~pgut001/dumpasn1.c>.\n\
    \   The binaries for the certificates and CRLs are available at\n   http://csrc.nist.gov/groups/ST/crypto_apps_infra/documents/pkixtools.\n\
    \   In places in this appendix where a distinguished name is specified\n   using\
    \ a string representation, the strings are formatted using the\n   rules specified\
    \ in [RFC4514].\n"
- title: C.1.  RSA Self-Signed Certificate
  contents:
  - "C.1.  RSA Self-Signed Certificate\n   This appendix contains an annotated hex\
    \ dump of a 578 byte version 3\n   certificate.  The certificate contains the\
    \ following information:\n   (a)  the serial number is 17;\n   (b)  the certificate\
    \ is signed with RSA and the SHA-1 hash algorithm;\n   (c)  the issuer's distinguished\
    \ name is\n        cn=Example CA,dc=example,dc=com;\n   (d)  the subject's distinguished\
    \ name is\n        cn=Example CA,dc=example,dc=com;\n   (e)  the certificate was\
    \ issued on April 30, 2004 and expired on\n        April 30, 2005;\n   (f)  the\
    \ certificate contains a 1024-bit RSA public key;\n   (g)  the certificate contains\
    \ a subject key identifier extension\n        generated using method (1) of Section\
    \ 4.2.1.2; and\n   (h)  the certificate is a CA certificate (as indicated through\
    \ the\n        basic constraints extension).\n   0  574: SEQUENCE {\n   4  423:\
    \   SEQUENCE {\n   8    3:     [0] {\n  10    1:       INTEGER 2\n         : \
    \      }\n  13    1:     INTEGER 17\n  16   13:     SEQUENCE {\n  18    9:   \
    \    OBJECT IDENTIFIER\n         :         sha1withRSAEncryption (1 2 840 113549\
    \ 1 1 5)\n  29    0:       NULL\n         :       }\n  31   67:     SEQUENCE {\n\
    \  33   19:       SET {\n  35   17:         SEQUENCE {\n  37   10:           OBJECT\
    \ IDENTIFIER\n         :             domainComponent (0 9 2342 19200300 100 1\
    \ 25)\n  49    3:           IA5String 'com'\n         :           }\n        \
    \ :         }\n  54   23:       SET {\n  56   21:         SEQUENCE {\n  58   10:\
    \           OBJECT IDENTIFIER\n         :             domainComponent (0 9 2342\
    \ 19200300 100 1 25)\n  70    7:           IA5String 'example'\n         :   \
    \        }\n         :         }\n  79   19:       SET {\n  81   17:         SEQUENCE\
    \ {\n  83    3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n  88   10: \
    \          PrintableString 'Example CA'\n         :           }\n         :  \
    \       }\n         :       }\n 100   30:     SEQUENCE {\n 102   13:       UTCTime\
    \ 30/04/2004 14:25:34 GMT\n 117   13:       UTCTime 30/04/2005 14:25:34 GMT\n\
    \         :       }\n 132   67:     SEQUENCE {\n 134   19:       SET {\n 136 \
    \  17:         SEQUENCE {\n 138   10:           OBJECT IDENTIFIER\n         :\
    \             domainComponent (0 9 2342 19200300 100 1 25)\n 150    3:       \
    \    IA5String 'com'\n         :           }\n         :         }\n 155   23:\
    \       SET {\n 157   21:         SEQUENCE {\n 159   10:           OBJECT IDENTIFIER\n\
    \         :             domainComponent (0 9 2342 19200300 100 1 25)\n 171   \
    \ 7:           IA5String 'example'\n         :           }\n         :       \
    \  }\n 180   19:       SET {\n 182   17:         SEQUENCE {\n 184    3:      \
    \     OBJECT IDENTIFIER commonName (2 5 4 3)\n 189   10:           PrintableString\
    \ 'Example CA'\n         :           }\n         :         }\n         :     \
    \  }\n 201  159:     SEQUENCE {\n 204   13:       SEQUENCE {\n 206    9:     \
    \    OBJECT IDENTIFIER\n         :           rsaEncryption (1 2 840 113549 1 1\
    \ 1)\n 217    0:         NULL\n         :         }\n 219  141:       BIT STRING,\
    \ encapsulates {\n 223  137:         SEQUENCE {\n 226  129:           INTEGER\n\
    \         :             00 C2 D7 97 6D 28 70 AA 5B CF 23 2E 80 70 39 EE\n    \
    \     :             DB 6F D5 2D D5 6A 4F 7A 34 2D F9 22 72 47 70 1D\n        \
    \ :             EF 80 E9 CA 30 8C 00 C4 9A 6E 5B 45 B4 6E A5 E6\n         :  \
    \           6C 94 0D FA 91 E9 40 FC 25 9D C7 B7 68 19 56 8F\n         :      \
    \       11 70 6A D7 F1 C9 11 4F 3A 7E 3F 99 8D 6E 76 A5\n         :          \
    \   74 5F 5E A4 55 53 E5 C7 68 36 53 C7 1D 3B 12 A6\n         :             85\
    \ FE BD 6E A1 CA DF 35 50 AC 08 D7 B9 B4 7E 5C\n         :             FE E2 A3\
    \ 2C D1 23 84 AA 98 C0 9B 66 18 9A 68 47\n         :             E9\n 358    3:\
    \           INTEGER 65537\n         :           }\n         :         }\n    \
    \     :       }\n 363   66:     [3] {\n 365   64:       SEQUENCE {\n 367   29:\
    \         SEQUENCE {\n 369    3:           OBJECT IDENTIFIER subjectKeyIdentifier\
    \ (2 5 29 14)\n 374   22:           OCTET STRING, encapsulates {\n 376   20: \
    \            OCTET STRING\n         :               08 68 AF 85 33 C8 39 4A 7A\
    \ F8 82 93 8E 70 6A 4A\n         :               20 84 2C 32\n         :     \
    \        }\n         :           }\n 398   14:         SEQUENCE {\n 400    3:\
    \           OBJECT IDENTIFIER keyUsage (2 5 29 15)\n 405    1:           BOOLEAN\
    \ TRUE\n 408    4:           OCTET STRING, encapsulates {\n 410    2:        \
    \     BIT STRING 1 unused bits\n         :               '0000011'B\n        \
    \ :             }\n         :           }\n 414   15:         SEQUENCE {\n 416\
    \    3:           OBJECT IDENTIFIER basicConstraints (2 5 29 19)\n 421    1: \
    \          BOOLEAN TRUE\n 424    5:           OCTET STRING, encapsulates {\n 426\
    \    3:             SEQUENCE {\n 428    1:               BOOLEAN TRUE\n      \
    \   :               }\n         :             }\n         :           }\n    \
    \     :         }\n         :       }\n         :     }\n 431   13:   SEQUENCE\
    \ {\n 433    9:     OBJECT IDENTIFIER\n         :         sha1withRSAEncryption\
    \ (1 2 840 113549 1 1 5)\n 444    0:     NULL\n         :     }\n 446  129:  \
    \ BIT STRING\n         :     6C F8 02 74 A6 61 E2 64 04 A6 54 0C 6C 72 13 AD\n\
    \         :     3C 47 FB F6 65 13 A9 85 90 33 EA 76 A3 26 D9 FC\n         :  \
    \   D1 0E 15 5F 28 B7 EF 93 BF 3C F3 E2 3E 7C B9 52\n         :     FC 16 6E 29\
    \ AA E1 F4 7A 6F D5 7F EF B3 95 CA F3\n         :     66 88 83 4E A1 35 45 84\
    \ CB BC 9B B8 C8 AD C5 5E\n         :     46 D9 0B 0E 8D 80 E1 33 2B DC BE 2B\
    \ 92 7E 4A 43\n         :     A9 6A EF 8A 63 61 B3 6E 47 38 BE E8 0D A3 67 5D\n\
    \         :     F3 FA 91 81 3C 92 BB C5 5F 25 25 EB 7C E7 D8 A1\n         :  \
    \ }\n"
- title: C.2.  End Entity Certificate Using RSA
  contents:
  - "C.2.  End Entity Certificate Using RSA\n   This appendix contains an annotated\
    \ hex dump of a 629-byte version 3\n   certificate.  The certificate contains\
    \ the following information:\n   (a)  the serial number is 18;\n   (b)  the certificate\
    \ is signed with RSA and the SHA-1 hash algorithm;\n   (c)  the issuer's distinguished\
    \ name is\n        cn=Example CA,dc=example,dc=com;\n   (d)  the subject's distinguished\
    \ name is\n        cn=End Entity,dc=example,dc=com;\n   (e)  the certificate was\
    \ valid from September 15, 2004 through March\n        15, 2005;\n   (f)  the\
    \ certificate contains a 1024-bit RSA public key;\n   (g)  the certificate is\
    \ an end entity certificate, as the basic\n        constraints extension is not\
    \ present;\n   (h)  the certificate contains an authority key identifier extension\n\
    \        matching the subject key identifier of the certificate in\n        appendix\
    \ C.1; and\n   (i)  the certificate includes one alternative name -- an electronic\n\
    \        mail address (rfc822Name) of \"end.entity@example.com\".\n   0  625:\
    \ SEQUENCE {\n   4  474:   SEQUENCE {\n   8    3:     [0] {\n  10    1:      \
    \ INTEGER 2\n         :       }\n  13    1:     INTEGER 18\n  16   13:     SEQUENCE\
    \ {\n  18    9:       OBJECT IDENTIFIER\n         :         sha1withRSAEncryption\
    \ (1 2 840 113549 1 1 5)\n  29    0:       NULL\n         :       }\n  31   67:\
    \     SEQUENCE {\n  33   19:       SET {\n  35   17:         SEQUENCE {\n  37\
    \   10:           OBJECT IDENTIFIER\n         :             domainComponent (0\
    \ 9 2342 19200300 100 1 25)\n  49    3:           IA5String 'com'\n         :\
    \           }\n         :         }\n  54   23:       SET {\n  56   21:      \
    \   SEQUENCE {\n  58   10:           OBJECT IDENTIFIER\n         :           \
    \  domainComponent (0 9 2342 19200300 100 1 25)\n  70    7:           IA5String\
    \ 'example'\n         :           }\n         :         }\n  79   19:       SET\
    \ {\n  81   17:         SEQUENCE {\n  83    3:           OBJECT IDENTIFIER commonName\
    \ (2 5 4 3)\n  88   10:           PrintableString 'Example CA'\n         :   \
    \        }\n         :         }\n         :       }\n 100   30:     SEQUENCE\
    \ {\n 102   13:       UTCTime 15/09/2004 11:48:21 GMT\n 117   13:       UTCTime\
    \ 15/03/2005 11:48:21 GMT\n         :       }\n 132   67:     SEQUENCE {\n 134\
    \   19:       SET {\n 136   17:         SEQUENCE {\n 138   10:           OBJECT\
    \ IDENTIFIER\n         :             domainComponent (0 9 2342 19200300 100 1\
    \ 25)\n 150    3:           IA5String 'com'\n         :           }\n        \
    \ :         }\n 155   23:       SET {\n 157   21:         SEQUENCE {\n 159   10:\
    \           OBJECT IDENTIFIER\n         :             domainComponent (0 9 2342\
    \ 19200300 100 1 25)\n 171    7:           IA5String 'example'\n         :   \
    \        }\n         :         }\n 180   19:       SET {\n 182   17:         SEQUENCE\
    \ {\n 184    3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n 189   10: \
    \          PrintableString 'End Entity'\n         :           }\n         :  \
    \       }\n         :       }\n 201  159:     SEQUENCE {\n 204   13:       SEQUENCE\
    \ {\n 206    9:         OBJECT IDENTIFIER\n         :           rsaEncryption\
    \ (1 2 840 113549 1 1 1)\n 217    0:         NULL\n         :         }\n 219\
    \  141:       BIT STRING, encapsulates {\n 223  137:         SEQUENCE {\n 226\
    \  129:           INTEGER\n         :             00 E1 6A E4 03 30 97 02 3C F4\
    \ 10 F3 B5 1E 4D 7F\n         :             14 7B F6 F5 D0 78 E9 A4 8A F0 A3 75\
    \ EC ED B6 56\n         :             96 7F 88 99 85 9A F2 3E 68 77 87 EB 9E D1\
    \ 9F C0\n         :             B4 17 DC AB 89 23 A4 1D 7E 16 23 4C 4F A8 4D F5\n\
    \         :             31 B8 7C AA E3 1A 49 09 F4 4B 26 DB 27 67 30 82\n    \
    \     :             12 01 4A E9 1A B6 C1 0C 53 8B 6C FC 2F 7A 43 EC\n        \
    \ :             33 36 7E 32 B2 7B D5 AA CF 01 14 C6 12 EC 13 F2\n         :  \
    \           2D 14 7A 8B 21 58 14 13 4C 46 A3 9A F2 16 95 FF\n         :      \
    \       23\n 358    3:           INTEGER 65537\n         :           }\n     \
    \    :         }\n         :       }\n 363  117:     [3] {\n 365  115:       SEQUENCE\
    \ {\n 367   33:         SEQUENCE {\n 369    3:           OBJECT IDENTIFIER subjectAltName\
    \ (2 5 29 17)\n 374   26:           OCTET STRING, encapsulates {\n 376   24: \
    \            SEQUENCE {\n 378   22:               [1] 'end.entity@example.com'\n\
    \         :               }\n         :             }\n         :           }\n\
    \ 402   29:         SEQUENCE {\n 404    3:           OBJECT IDENTIFIER subjectKeyIdentifier\
    \ (2 5 29 14)\n 409   22:           OCTET STRING, encapsulates {\n 411   20: \
    \            OCTET STRING\n         :               17 7B 92 30 FF 44 D6 66 E1\
    \ 90 10 22 6C 16 4F C0\n         :               8E 41 DD 6D\n         :     \
    \        }\n         :           }\n 433   31:         SEQUENCE {\n 435    3:\
    \           OBJECT IDENTIFIER\n         :             authorityKeyIdentifier (2\
    \ 5 29 35)\n 440   24:           OCTET STRING, encapsulates {\n 442   22:    \
    \         SEQUENCE {\n 444   20:               [0]\n         :               \
    \  08 68 AF 85 33 C8 39 4A 7A F8 82 93 8E 70 6A\n         :                 4A\
    \ 20 84 2C 32\n         :               }\n         :             }\n        \
    \ :           }\n 466   14:         SEQUENCE {\n 468    3:           OBJECT IDENTIFIER\
    \ keyUsage (2 5 29 15)\n 473    1:           BOOLEAN TRUE\n 476    4:        \
    \   OCTET STRING, encapsulates {\n 478    2:             BIT STRING 6 unused bits\n\
    \         :               '11'B\n         :             }\n         :        \
    \   }\n         :         }\n         :       }\n         :     }\n 482   13:\
    \   SEQUENCE {\n 484    9:     OBJECT IDENTIFIER\n         :         sha1withRSAEncryption\
    \ (1 2 840 113549 1 1 5)\n 495    0:     NULL\n         :     }\n 497  129:  \
    \ BIT STRING\n         :     00 20 28 34 5B 68 32 01 BB 0A 36 0E AD 71 C5 95\n\
    \         :     1A E1 04 CF AE AD C7 62 14 A4 1B 36 31 C0 E2 0C\n         :  \
    \   3D D9 1E C0 00 DC 10 A0 BA 85 6F 41 CB 62 7A B7\n         :     4C 63 81 26\
    \ 5E D2 80 45 5E 33 E7 70 45 3B 39 3B\n         :     26 4A 9C 3B F2 26 36 69\
    \ 08 79 BB FB 96 43 77 4B\n         :     61 8B A1 AB 91 64 E0 F3 37 61 3C 1A\
    \ A3 A4 C9 8A\n         :     B2 BF 73 D4 4D E4 58 E4 62 EA BC 20 74 92 86 0E\n\
    \         :     CE 84 60 76 E9 73 BB C7 85 D3 91 45 EA 62 5D CD\n         :  \
    \ }\n"
- title: C.3.  End Entity Certificate Using DSA
  contents:
  - "C.3.  End Entity Certificate Using DSA\n   This appendix contains an annotated\
    \ hex dump of a 914-byte version 3\n   certificate.  The certificate contains\
    \ the following information:\n   (a)  the serial number is 256;\n   (b)  the certificate\
    \ is signed with DSA and the SHA-1 hash algorithm;\n   (c)  the issuer's distinguished\
    \ name is cn=Example DSA\n        CA,dc=example,dc=com;\n   (d)  the subject's\
    \ distinguished name is cn=DSA End\n        Entity,dc=example,dc=com;\n   (e)\
    \  the certificate was issued on May 2, 2004 and expired on May 2,\n        2005;\n\
    \   (f)  the certificate contains a 1024-bit DSA public key with\n        parameters;\n\
    \   (g)  the certificate is an end entity certificate (not a CA\n        certificate);\n\
    \   (h)  the certificate includes a subject alternative name of\n        \"<http://www.example.com/users/DSAendentity.html>\"\
    \ and an issuer\n        alternative name of \"<http://www.example.com>\" -- both\
    \ are URLs;\n   (i)  the certificate includes an authority key identifier extension\n\
    \        and a certificate policies extension specifying the policy OID\n    \
    \    2.16.840.1.101.3.2.1.48.9; and\n   (j)  the certificate includes a critical\
    \ key usage extension\n        specifying that the public key is intended for\
    \ verification of\n        digital signatures.\n   0  910: SEQUENCE {\n   4  846:\
    \   SEQUENCE {\n   8    3:     [0] {\n  10    1:       INTEGER 2\n         : \
    \      }\n  13    2:     INTEGER 256\n  17    9:     SEQUENCE {\n  19    7:  \
    \     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)\n         :       }\n\
    \  28   71:     SEQUENCE {\n  30   19:       SET {\n  32   17:         SEQUENCE\
    \ {\n  34   10:           OBJECT IDENTIFIER\n         :             domainComponent\
    \ (0 9 2342 19200300 100 1 25)\n  46    3:           IA5String 'com'\n       \
    \  :           }\n         :         }\n  51   23:       SET {\n  53   21:   \
    \      SEQUENCE {\n  55   10:           OBJECT IDENTIFIER\n         :        \
    \     domainComponent (0 9 2342 19200300 100 1 25)\n  67    7:           IA5String\
    \ 'example'\n         :           }\n         :         }\n  76   23:       SET\
    \ {\n  78   21:         SEQUENCE {\n  80    3:           OBJECT IDENTIFIER commonName\
    \ (2 5 4 3)\n  85   14:           PrintableString 'Example DSA CA'\n         :\
    \           }\n         :         }\n         :       }\n 101   30:     SEQUENCE\
    \ {\n 103   13:       UTCTime 02/05/2004 16:47:38 GMT\n 118   13:       UTCTime\
    \ 02/05/2005 16:47:38 GMT\n         :       }\n 133   71:     SEQUENCE {\n 135\
    \   19:       SET {\n 137   17:         SEQUENCE {\n 139   10:           OBJECT\
    \ IDENTIFIER\n         :             domainComponent (0 9 2342 19200300 100 1\
    \ 25)\n 151    3:           IA5String 'com'\n         :           }\n        \
    \ :         }\n 156   23:       SET {\n 158   21:         SEQUENCE {\n 160   10:\
    \           OBJECT IDENTIFIER\n         :             domainComponent (0 9 2342\
    \ 19200300 100 1 25)\n 172    7:           IA5String 'example'\n         :   \
    \        }\n         :         }\n 181   23:       SET {\n 183   21:         SEQUENCE\
    \ {\n 185    3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n 190   14: \
    \          PrintableString 'DSA End Entity'\n         :           }\n        \
    \ :         }\n         :       }\n 206  439:     SEQUENCE {\n 210  300:     \
    \  SEQUENCE {\n 214    7:         OBJECT IDENTIFIER dsa (1 2 840 10040 4 1)\n\
    \ 223  287:         SEQUENCE {\n 227  129:           INTEGER\n         :     \
    \        00 B6 8B 0F 94 2B 9A CE A5 25 C6 F2 ED FC FB 95\n         :         \
    \    32 AC 01 12 33 B9 E0 1C AD 90 9B BC 48 54 9E F3\n         :             94\
    \ 77 3C 2C 71 35 55 E6 FE 4F 22 CB D5 D8 3E 89\n         :             93 33 4D\
    \ FC BD 4F 41 64 3E A2 98 70 EC 31 B4 50\n         :             DE EB F1 98 28\
    \ 0A C9 3E 44 B3 FD 22 97 96 83 D0\n         :             18 A3 E3 BD 35 5B FF\
    \ EE A3 21 72 6A 7B 96 DA B9\n         :             3F 1E 5A 90 AF 24 D6 20 F0\
    \ 0D 21 A7 D4 02 B9 1A\n         :             FC AC 21 FB 9E 94 9E 4B 42 45 9E\
    \ 6A B2 48 63 FE\n         :             43\n 359   21:           INTEGER\n  \
    \       :             00 B2 0D B0 B1 01 DF 0C 66 24 FC 13 92 BA 55 F7\n      \
    \   :             7D 57 74 81 E5\n 382  129:           INTEGER\n         :   \
    \          00 9A BF 46 B1 F5 3F 44 3D C9 A5 65 FB 91 C0 8E\n         :       \
    \      47 F1 0A C3 01 47 C2 44 42 36 A9 92 81 DE 57 C5\n         :           \
    \  E0 68 86 58 00 7B 1F F9 9B 77 A1 C5 10 A5 80 91\n         :             78\
    \ 51 51 3C F6 FC FC CC 46 C6 81 78 92 84 3D F4\n         :             93 3D 0C\
    \ 38 7E 1A 5B 99 4E AB 14 64 F6 0C 21 22\n         :             4E 28 08 9C 92\
    \ B9 66 9F 40 E8 95 F6 D5 31 2A EF\n         :             39 A2 62 C7 B2 6D 9E\
    \ 58 C4 3A A8 11 81 84 6D AF\n         :             F8 B4 19 B4 C2 11 AE D0 22\
    \ 3B AA 20 7F EE 1E 57\n         :             18\n         :           }\n  \
    \       :         }\n 514  132:       BIT STRING, encapsulates {\n 518  128: \
    \        INTEGER\n         :           30 B6 75 F7 7C 20 31 AE 38 BB 7E 0D 2B\
    \ AB A0 9C\n         :           4B DF 20 D5 24 13 3C CD 98 E5 5F 6C B7 C1 BA\
    \ 4A\n         :           BA A9 95 80 53 F0 0D 72 DC 33 37 F4 01 0B F5 04\n \
    \        :           1F 9D 2E 1F 62 D8 84 3A 9B 25 09 5A 2D C8 46 8E\n       \
    \  :           2B D4 F5 0D 3B C7 2D C6 6C B9 98 C1 25 3A 44 4E\n         :   \
    \        8E CA 95 61 35 7C CE 15 31 5C 23 13 1E A2 05 D1\n         :         \
    \  7A 24 1C CB D3 72 09 90 FF 9B 9D 28 C0 A1 0A EC\n         :           46 9F\
    \ 0D B8 D0 DC D0 18 A6 2B 5E F9 8F B5 95 BE\n         :         }\n         :\
    \       }\n 649  202:     [3] {\n 652  199:       SEQUENCE {\n 655   57:     \
    \    SEQUENCE {\n 657    3:           OBJECT IDENTIFIER subjectAltName (2 5 29\
    \ 17)\n 662   50:           OCTET STRING, encapsulates {\n 664   48:         \
    \    SEQUENCE {\n 666   46:               [6]\n         :                 'http://www.example.com/users/DSAendentity.'\n\
    \         :                 'html'\n         :               }\n         :   \
    \          }\n         :           }\n 714   33:         SEQUENCE {\n 716    3:\
    \           OBJECT IDENTIFIER issuerAltName (2 5 29 18)\n 721   26:          \
    \ OCTET STRING, encapsulates {\n 723   24:             SEQUENCE {\n 725   22:\
    \               [6] 'http://www.example.com'\n         :               }\n   \
    \      :             }\n         :           }\n 749   29:         SEQUENCE {\n\
    \ 751    3:           OBJECT IDENTIFIER subjectKeyIdentifier (2 5 29 14)\n 756\
    \   22:           OCTET STRING, encapsulates {\n 758   20:             OCTET STRING\n\
    \         :               DD 25 66 96 43 AB 78 11 43 44 FE 95 16 F9 D9 B6\n  \
    \       :               B7 02 66 8D\n         :             }\n         :    \
    \       }\n 780   31:         SEQUENCE {\n 782    3:           OBJECT IDENTIFIER\n\
    \         :             authorityKeyIdentifier (2 5 29 35)\n 787   24:       \
    \    OCTET STRING, encapsulates {\n 789   22:             SEQUENCE {\n 791   20:\
    \               [0]\n         :                 86 CA A5 22 81 62 EF AD 0A 89\
    \ BC AD 72 41 2C\n         :                 29 49 F4 86 56\n         :      \
    \         }\n         :             }\n         :           }\n 813   23:    \
    \     SEQUENCE {\n 815    3:           OBJECT IDENTIFIER certificatePolicies (2\
    \ 5 29 32)\n 820   16:           OCTET STRING, encapsulates {\n 822   14:    \
    \         SEQUENCE {\n 824   12:               SEQUENCE {\n 826   10:        \
    \         OBJECT IDENTIFIER '2 16 840 1 101 3 2 1 48 9'\n         :          \
    \       }\n         :               }\n         :             }\n         :  \
    \         }\n 838   14:         SEQUENCE {\n 840    3:           OBJECT IDENTIFIER\
    \ keyUsage (2 5 29 15)\n 845    1:           BOOLEAN TRUE\n 848    4:        \
    \   OCTET STRING, encapsulates {\n 850    2:             BIT STRING 7 unused bits\n\
    \         :               '1'B (bit 0)\n         :             }\n         : \
    \          }\n         :         }\n         :       }\n         :     }\n 854\
    \    9:   SEQUENCE {\n 856    7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040\
    \ 4 3)\n         :     }\n 865   47:   BIT STRING, encapsulates {\n 868   44:\
    \     SEQUENCE {\n 870   20:       INTEGER\n         :         65 57 07 34 DD\
    \ DC CA CC 5E F4 02 F4 56 42 2C 5E\n         :         E1 B3 3B 80\n 892   20:\
    \       INTEGER\n         :         60 F4 31 17 CA F4 CF FF EE F4 08 A7 D9 B2\
    \ 61 BE\n         :         B1 C3 DA BF\n         :       }\n         :     }\n\
    \         :   }\n"
- title: C.4.  Certificate Revocation List
  contents:
  - "C.4.  Certificate Revocation List\n   This appendix contains an annotated hex\
    \ dump of a version 2 CRL with\n   two extensions (cRLNumber and authorityKeyIdentifier).\
    \  The CRL was\n   issued by cn=Example CA,dc=example,dc=com on February 5, 2005;\
    \ the\n   next scheduled issuance was February 6, 2005.  The CRL includes one\n\
    \   revoked certificate: serial number 18, which was revoked on November\n   19,\
    \ 2004 due to keyCompromise.  The CRL itself is number 12, and it\n   was signed\
    \ with RSA and SHA-1.\n   0  352: SEQUENCE {\n   4  202:   SEQUENCE {\n   7  \
    \  1:     INTEGER 1\n  10   13:     SEQUENCE {\n  12    9:       OBJECT IDENTIFIER\n\
    \         :         sha1withRSAEncryption (1 2 840 113549 1 1 5)\n  23    0: \
    \      NULL\n         :       }\n  25   67:     SEQUENCE {\n  27   19:       SET\
    \ {\n  29   17:         SEQUENCE {\n  31   10:           OBJECT IDENTIFIER\n \
    \        :             domainComponent (0 9 2342 19200300 100 1 25)\n  43    3:\
    \           IA5String 'com'\n         :           }\n         :         }\n  48\
    \   23:       SET {\n  50   21:         SEQUENCE {\n  52   10:           OBJECT\
    \ IDENTIFIER\n         :             domainComponent (0 9 2342 19200300 100 1\
    \ 25)\n  64    7:           IA5String 'example'\n         :           }\n    \
    \     :         }\n  73   19:       SET {\n  75   17:         SEQUENCE {\n  77\
    \    3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n  82   10:         \
    \  PrintableString 'Example CA'\n         :           }\n         :         }\n\
    \         :       }\n  94   13:     UTCTime 05/02/2005 12:00:00 GMT\n 109   13:\
    \     UTCTime 06/02/2005 12:00:00 GMT\n 124   34:     SEQUENCE {\n 126   32: \
    \      SEQUENCE {\n 128    1:         INTEGER 18\n 131   13:         UTCTime 19/11/2004\
    \ 15:57:03 GMT\n 146   12:         SEQUENCE {\n 148   10:           SEQUENCE {\n\
    \ 150    3:             OBJECT IDENTIFIER cRLReason (2 5 29 21)\n 155    3:  \
    \           OCTET STRING, encapsulates {\n 157    1:               ENUMERATED\
    \ 1\n         :               }\n         :             }\n         :        \
    \   }\n         :         }\n         :       }\n 160   47:     [0] {\n 162  \
    \ 45:       SEQUENCE {\n 164   31:         SEQUENCE {\n 166    3:           OBJECT\
    \ IDENTIFIER\n         :             authorityKeyIdentifier (2 5 29 35)\n 171\
    \   24:           OCTET STRING, encapsulates {\n 173   22:             SEQUENCE\
    \ {\n 175   20:               [0]\n         :                 08 68 AF 85 33 C8\
    \ 39 4A 7A F8 82 93 8E 70 6A\n         :                 4A 20 84 2C 32\n    \
    \     :               }\n         :             }\n         :           }\n 197\
    \   10:         SEQUENCE {\n 199    3:           OBJECT IDENTIFIER cRLNumber (2\
    \ 5 29 20)\n 204    3:           OCTET STRING, encapsulates {\n 206    1:    \
    \         INTEGER 12\n         :             }\n         :           }\n     \
    \    :         }\n         :       }\n         :     }\n 209   13:   SEQUENCE\
    \ {\n 211    9:     OBJECT IDENTIFIER\n         :         sha1withRSAEncryption\
    \ (1 2 840 113549 1 1 5)\n 222    0:     NULL\n         :     }\n 224  129:  \
    \ BIT STRING\n         :     22 DC 18 7D F7 08 CE CC 75 D0 D0 6A 9B AD 10 F4\n\
    \         :     76 23 B4 81 6E B5 6D BE 0E FB 15 14 6C C8 17 6D\n         :  \
    \   1F EE 90 17 A2 6F 60 E4 BD AA 8C 55 DE 8E 84 6F\n         :     92 F8 9F 10\
    \ 12 27 AF 4A D4 2F 85 E2 36 44 7D AA\n         :     A3 4C 25 38 15 FF 00 FD\
    \ 3E 7E EE 3D 26 12 EB D8\n         :     E7 2B 62 E2 2B C3 46 80 EF 78 82 D1\
    \ 15 C6 D0 9C\n         :     72 6A CB CE 7A ED 67 99 8B 6E 70 81 7D 43 42 74\n\
    \         :     C1 A6 AF C1 55 17 A2 33 4C D6 06 98 2B A4 FC 2E\n         :  \
    \ }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Cooper\n   National Institute of Standards and Technology\n\
    \   100 Bureau Drive, Mail Stop 8930\n   Gaithersburg, MD 20899-8930\n   USA\n\
    \   EMail: david.cooper@nist.gov\n   Stefan Santesson\n   Microsoft\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   USA\n   EMail: stefans@microsoft.com\n   Stephen\
    \ Farrell\n   Distributed Systems Group\n   Computer Science Department\n   Trinity\
    \ College Dublin\n   Ireland\n   EMail: stephen.farrell@cs.tcd.ie\n   Sharon Boeyen\n\
    \   Entrust\n   1000 Innovation Drive\n   Ottawa, Ontario\n   Canada K2K 3E7\n\
    \   EMail: sharon.boeyen@entrust.com\n   Russell Housley\n   Vigil Security, LLC\n\
    \   918 Spring Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n\
    \   Tim Polk\n   National Institute of Standards and Technology\n   100 Bureau\
    \ Drive, Mail Stop 8930\n   Gaithersburg, MD 20899-8930\n   USA\n   EMail: wpolk@nist.gov\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
