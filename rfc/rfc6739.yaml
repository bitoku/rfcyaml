- title: __initial_text__
  contents:
  - "  Synchronizing Service Boundaries and <mapping> Elements Based on the\n    \
    \        Location-to-Service Translation (LoST) Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   The Location-to-Service Translation (LoST) protocol is an XML-based\n\
    \   protocol for mapping service identifiers and geodetic or civic\n   location\
    \ information to service URIs and service boundaries.  In\n   particular, it can\
    \ be used to determine the location-appropriate\n   Public Safety Answering Point\
    \ (PSAP) for emergency services.\n   The <mapping> element in the LoST protocol\
    \ specification encapsulates\n   information about service boundaries and circumscribes\
    \ the region\n   within which all locations map to the same service Uniform Resource\n\
    \   Identifier (URI) or set of URIs for a given service.\n   This document defines\
    \ an XML protocol to exchange these mappings\n   between two nodes.  This mechanism\
    \ is designed for the exchange of\n   authoritative <mapping> elements between\
    \ two entities.  Exchanging\n   cached <mapping> elements, i.e., non-authoritative\
    \ elements, is\n   possible but not envisioned.  Even though the <mapping> element\n\
    \   format is reused from the LoST specification, the mechanism in this\n   document\
    \ can be used without the LoST protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6739.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  A Motivating Example . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Querying for Mappings with a\n       <getMappingsRequest>/<getMappingsResponse>\
    \ Exchange  . . . . .  9\n     4.1.  Behavior of the LoST Sync Destination  .\
    \ . . . . . . . . .  9\n     4.2.  Behavior of the LoST Sync Source . . . . .\
    \ . . . . . . . . 10\n     4.3.  Examples . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 10\n   5.  Pushing Mappings via <pushMappings> and\n       <pushMappingsResponse>\
    \ . . . . . . . . . . . . . . . . . . . . 12\n     5.1.  Behavior of the LoST\
    \ Sync Source . . . . . . . . . . . . . 12\n     5.2.  Behavior of the LoST Sync\
    \ Destination  . . . . . . . . . . 13\n     5.3.  Example  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 14\n   6.  Transport  . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 16\n   7.  RELAX NG . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . 17\n   8.  Operational Considerations . . . . . .\
    \ . . . . . . . . . . . . 19\n   9.  Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . . 20\n   10. IANA Considerations  . . . . . . . . . . .\
    \ . . . . . . . . . . 21\n     10.1. Media Type Registration  . . . . . . . .\
    \ . . . . . . . . . 21\n     10.2. LoST Sync RELAX NG Schema Registration . .\
    \ . . . . . . . . 22\n     10.3. LoST Synchronization Namespace Registration \
    \ . . . . . . . 22\n   11. Acknowledgments  . . . . . . . . . . . . . . . . .\
    \ . . . . . . 23\n   12. References . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 24\n     12.1. Normative References . . . . . . . . . . . . . . .\
    \ . . . . 24\n     12.2. Informative References . . . . . . . . . . . . . . .\
    \ . . . 24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Since the early days of emergency services, there has been\
    \ a desire\n   to route emergency calls to Public Safety Answering Points (PSAPs)\n\
    \   that are nearest to the location of the emergency caller.  For this\n   purpose\
    \ each PSAP discloses one or more service boundaries so that\n   this information\
    \ can be used to select the appropriate PSAP and to\n   route the call to it.\
    \  RFC 5222 [RFC5222] defines this data structure\n   in the following way:\n\
    \      A service boundary circumscribes the region within which all\n      locations\
    \ map to the same service URI or set of URIs for a given\n      service.  A service\
    \ boundary may consist of several non-contiguous\n      geometric shapes.\n  \
    \ RFC 5222 [RFC5222] also specifies the data structure itself as the\n   <mapping>\
    \ element.\n   This document reuses this existing data structure and defines an\
    \ XML-\n   based protocol to exchange authoritative service boundaries between\n\
    \   two entities, namely, the LoST Sync source and the LoST Sync\n   destination.\
    \  This protocol can be used whether or not the LoST\n   protocol is used for\
    \ querying for service boundary information.\n   The rest of the document is structured\
    \ as follows.  Section 3 starts\n   with an example usage of the LoST protocol.\
    \  In Sections 4, 5, 6, and\n   7, we describe the protocol semantics, transport\
    \ considerations, and\n   the schema.  Finally, we conclude with operational,\
    \ security, and\n   IANA considerations in Sections 8, 9, and 10.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   This document reuses terminology introduced by the mapping\n\
    \   architecture document [RFC5582], such as 'coverage region', 'forest\n   guide',\
    \ 'mapping', and 'authoritative mapping server'.  This document\n   also uses\
    \ the term 'ESRP', defined in [RFC5012].\n   Throughout this document, we use\
    \ the terms 'LoST Sync source' and\n   'LoST Sync destination' to denote the protocol\
    \ endpoints of the\n   exchange.  The protocol is referred to as 'LoST Sync' within\
    \ the\n   text.\n"
- title: 3.  A Motivating Example
  contents:
  - "3.  A Motivating Example\n   The LoST Sync mechanism can, for example, be used\
    \ in the LoST\n   architecture, as specified in [RFC5582].  There, LoST servers\n\
    \   cooperate to provide an ubiquitous, globally scalable, and resilient\n   mapping\
    \ service.  In the LoST mapping architecture, LoST servers can\n   peer, i.e.,\
    \ have an ongoing data exchange relationship.  Peering\n   relationships are set\
    \ up manually, based on local policies.  A LoST\n   server may peer with any number\
    \ of other LoST servers.  Forest guides\n   peer with other forest guides; authoritative\
    \ mapping servers peer\n   with forest guides and other authoritative servers,\
    \ either in the\n   same cluster or above or below them in the tree.  Authoritative\n\
    \   mapping servers push coverage regions \"up\" the tree, i.e., from child\n\
    \   nodes to parent nodes.  The child informs the parent of the\n   geospatial\
    \ or civic region that it covers for a specific service.\n   Consider a hypothetical\
    \ deployment of LoST in two countries, for\n   example, Austria and Finland. \
    \ Austria, in our example, runs three\n   authoritative mapping servers labeled\
    \ as 'East', 'West', and\n   'Vienna', where the former two cover the entire country\
    \ except for\n   Vienna, which is covered by a separate LoST server.  There may\
    \ be\n   other caching LoST servers run by ISPs, universities, and Voice\n   Service\
    \ Providers (VSPs), but they are not relevant for this\n   illustration.  Finland,\
    \ on the other hand, decided to only deploy a\n   single LoST server that also\
    \ acts as a forest guide.  For this\n   simplistic illustration, we assume that\
    \ only one service is\n   available, namely 'urn:service:sos' since otherwise\
    \ the number of\n   stored mappings would have to be multiplied by the number\
    \ of used\n   services.\n   Figure 1 shows the example deployment.\n         \
    \             +---LoST-Sync-->\\\\     //<--LoST-Sync----+\n                 \
    \     |                 -----                  |\n                      |    \
    \                                    |\n                      \\/            \
    \                           \\/\n                    -----                   \
    \                  -----\n                  //     \\\\                      \
    \           //     \\\\\n                 /         \\                       \
    \        /         \\\n                |  Forest   |                         \
    \    |   Forest  |\n                |  Guide    |                            \
    \ |   Guide   |\n                |  Austria  |                             | \
    \  Finland\n                 \\         /                               \\   \
    \      /\n       +--------->\\\\     //<--------+                       \\\\ \
    \    //\n       |            -----           |                         -----\n\
    \       |             /\\             |                           |\n     LoST\
    \            |             LoST                     //------\\\\\n     Sync  \
    \         LoST           Sync                    |Co-Located|\n       |      \
    \      Sync            |                      |   LoST   |\n       \\/       \
    \     |              \\/                     | Server   |\n    //----\\\\    \
    \     \\/          //----\\\\                   \\\\------//\n   |  LoST  |  \
    \   //----\\\\      |  LoST  |\n   | Server |    |  LoST  |     | Server |\n \
    \  | 'East' |    | Server |     |'Vienna'|\n    \\\\----//     | 'West' |    \
    \  \\\\----//\n                  \\\\----//\n                     Figure 1: LoST\
    \ Deployment Example\n   The nodes are configured as follows:\n   Forest Guide\
    \ Austria:  This forest guide contains mappings for the\n      three authoritative\
    \ mapping servers (East, West, and Vienna)\n      describing the area for which\
    \ they are responsible.  Note that\n      each mapping contains a service URN,\
    \ and these mappings point to\n      LoST servers rather than to PSAPs or Emergency\
    \ Services Routing\n      Proxies (ESRPs).\n   LoST Server 'East':  This LoST\
    \ server contains all the mappings to\n      PSAPs covering the eastern part of\
    \ the country.\n      Additionally, the LoST server aggregates all the information\
    \ it\n      has and provides an abstracted view towards the forest guide\n   \
    \   indicating that it is responsible for a certain area (for a given\n      service\
    \ and for a given location profile).  For our example, the\n      structure of\
    \ a mapping is shown below:\n   <mapping\n       xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n       xmlns:gml=\"http://www.opengis.net/gml\"\n       expires=\"2009-01-01T01:44:33Z\"\
    \n       lastUpdated=\"2009-12-01T01:00:00Z\"\n       source=\"east-austria.lost-example.com\"\
    \n       sourceId=\"e8b05a41d8d1415b80f2cdbb96ccf109\">\n       <displayName xml:lang=\"\
    en\">LoST Server 'East'</displayName>\n       <service>urn:service:sos</service>\n\
    \       <serviceBoundary profile=\"geodetic-2d\">\n           <gml:Polygon srsName=\"\
    urn:ogc:def::crs:EPSG::4326\">\n               <gml:exterior>\n              \
    \     <gml:LinearRing>\n                       <gml:pos> ... </gml:pos>\n    \
    \                   ..... list of coordinates for\n                       boundary\
    \ of LoST server 'East'\n                       <gml:pos> ... </gml:pos>\n   \
    \                </gml:LinearRing>\n               </gml:exterior>\n         \
    \  </gml:Polygon>\n       </serviceBoundary>\n       <uri/>\n   </mapping>\n \
    \             Figure 2: Forest Guide Austria Mapping XML Snippet\n      Note that\
    \ the XML code snippet in Figure 2 serves illustrative\n      purposes only and\
    \ does not validate.  As can be seen in this\n      example, the <uri> element\
    \ is absent, and the 'source' attribute\n      identifies the LoST server, namely\
    \ \"east-austria.lost-\n      example.com\".\n      The mapping shown above is\
    \ what is the LoST server \"east-\n      austria.lost-example.com\" provides to\
    \ the Austrian forest guide.\n   LoST Server 'West':  This LoST server contains\
    \ all the mappings to\n      PSAPs covering the western half of the country.\n\
    \   LoST Server 'Vienna':  This LoST server contains all the mappings to\n   \
    \   PSAPs for the city of Vienna.\n   Forest Guide Finland:  In our example, we\
    \ assume that Finland deploys\n      a single ESRP for the entire country as their\
    \ IP-based emergency\n      services solution.  There is only a single LoST server,\
    \ and it is\n      co-located with the forest guide, as shown in Figure 1.  The\n\
    \      mapping data this forest guide (FG) then distributes via LoST Sync\n  \
    \    is shown in Figure 3.\n   <mapping xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n       expires=\"2007-01-01T01:44:33Z\"\n       lastUpdated=\"2006-11-01T01:00:00Z\"\
    \n       source=\"finland.lost-example.com\"\n       sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    >\n       <displayName xml:lang=\"en\">Finland ESRP</displayName>\n       <service>urn:service:sos</service>\n\
    \       <serviceBoundary profile=\"civic\">\n           <civicAddress\n      \
    \         xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\">\n       \
    \        <country>FI</country>\n           </civicAddress>\n       </serviceBoundary>\n\
    \       <uri/>\n   </mapping>\n              Figure 3: Forest Guide Finland Mapping\
    \ XML Snippet\n      An example mapping stored at the co-located LoST server is\
    \ shown\n      in Figure 4.\n   <mapping xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n       expires=\"2007-01-01T01:44:33Z\"\n       lastUpdated=\"2006-11-01T01:00:00Z\"\
    \n       source=\"finland.lost-example.com\"\n       sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    >\n       <displayName xml:lang=\"en\">Finland ESRP</displayName>\n       <service>urn:service:sos</service>\n\
    \       <serviceBoundary profile=\"civic\">\n           <civicAddress\n      \
    \         xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\">\n       \
    \        <country>FI</country>\n           </civicAddress>\n       </serviceBoundary>\n\
    \       <uri>sip:esrp@finland-example.com</uri>\n       <uri>xmpp:esrp@finland-example.com</uri>\n\
    \       <serviceNumber>112</serviceNumber>\n   </mapping>\n       Figure 4: Forest\
    \ Guide Finland / Co-Located LoST Server Mapping\n                           \
    \      XML Snippet\n   The LoST Sync mechanism described in this document can\
    \ be run between\n   the two forest guides.  That way, the three mappings stored\
    \ in the FG\n   Austria are sent to the FG Finland, and a single mapping in the\
    \ FG\n   Finland is sent to the FG Austria.  Additionally, the three Austrian\n\
    \   LoST servers could utilize LoST Sync to inform the Austrian FG about\n   their\
    \ boundaries.  These three authoritative mapping servers in\n   Austria would\
    \ be responsible for maintaining their own mapping\n   information.  Since the\
    \ amount of data being exchanged is small and\n   the expected rate of change\
    \ is low, the nodes are configured to\n   always exchange all their mapping information\
    \ whenever a change\n   happens.\n   This document defines two types of exchanges,\
    \ which are best\n   described by the exchange between two nodes as shown in Figures\
    \ 5 and\n   6.  The protocol exchange always runs between a LoST Sync source and\n\
    \   a LoST Sync destination.  Node A in the examples of Figures 5 and 6\n   has\
    \ mappings that Node B is going to retrieve.  Node A acts as the\n   source for\
    \ the data and Node B is the destination.\n   The <getMappingsRequest> request\
    \ allows a LoST Sync source to request\n   mappings from a LoST Sync destination.\n\
    \      +---------+                   +---------+\n      | Node B  |          \
    \         | Node A  |\n      | acting  |                   | acting  |\n     \
    \ | as      |                   | as      |\n      | LoST    |               \
    \    | LoST    |\n      | Sync    |                   | Sync    |\n      | Dest.\
    \   |                   | Source  |\n      +---------+                   +---------+\n\
    \          |                              |\n          |                     \
    \         |\n          |                              |\n          | <getMappingsRequest>\
    \         |\n          |----------------------------->|\n          |         \
    \                     |\n          | <getMappingsResponse>        |\n        \
    \  |<-----------------------------|\n          |                             \
    \ |\n          |                              |\n          |                 \
    \             |\n    Figure 5: Querying for Mappings with a <getMappingsRequest>\
    \ Message\n   Note that in the exchange illustrated in Figure 5, Node B is issuing\n\
    \   the first request and plays the role of the HTTPS client, and Node A\n   plays\
    \ the role of the HTTPS server.\n   In Figure 6, the <pushMappingsRequest> exchange\
    \ allows a LoST Sync\n   source to push mappings to a LoST Sync destination. \
    \ In this example,\n   we assume that Node A has been configured maintain state\
    \ about the\n   mappings it had pushed to Node B.\n   This document does not define\
    \ a publish/subscribe mechanism.  Such a\n   mechanism would allow Node B to tell\
    \ Node A what mappings it is\n   interested in.  This document also does not define\
    \ a mechanism for\n   nodes to find out to which other entities mappings have\
    \ to be pushed.\n       +---------+                   +---------+\n       | Node\
    \ A  |                   | Node B  |\n       | acting  |                   | acting\
    \  |\n       | as      |                   | as      |\n       | LoST    |   \
    \                | LoST    |\n       | Sync    |                   | Sync    |\n\
    \       | Source  |                   | Dest.   |\n       +---------+        \
    \           +---------+\n           |                              |\n       \
    \    |                              |\n           |                          \
    \    |\n           | <pushMappingsRequest>        |\n           |----------------------------->|\n\
    \           |                              |\n           | <pushMappingsResponse>\
    \       |\n           |<-----------------------------|\n           |         \
    \                     |\n           |                              |\n       \
    \    |                              |\n      Figure 6: Pushing Mappings with a\
    \ <pushMappingsRequest> Message\n   Node A issuing the first request in Figure\
    \ 6 plays the role of the\n   HTTPS client, and Node B plays the role of the HTTPS\
    \ server.\n"
- title: 4.  Querying for Mappings with a <getMappingsRequest>/
  contents:
  - "4.  Querying for Mappings with a <getMappingsRequest>/\n    <getMappingsResponse>\
    \ Exchange\n"
- title: 4.1.  Behavior of the LoST Sync Destination
  contents:
  - "4.1.  Behavior of the LoST Sync Destination\n   A LoST Sync destination has two\
    \ ways to retrieve <mapping> elements\n   from a LoST Sync source.\n   1.  When\
    \ the Lost Sync destination does not have any mappings, it\n       submits an\
    \ empty <getMappingsRequest> message, as shown in\n       Figure 7.  This indicates\
    \ that it wishes to retrieve all mappings\n       from the LoST Sync source. \
    \ Note that the request does not\n       propagate further to other nodes.\n \
    \  2.  In case a LoST Sync destination node has already obtained\n       mappings\
    \ in previous exchanges, then it may want to check whether\n       these mappings\
    \ have been updated in the meanwhile.  The policy\n       regarding when to poll\
    \ for updated mapping information is outside\n       the scope of this document.\
    \  The <getMappingsRequest> message\n       with one or more <exists> child element(s)\
    \ allows the source to\n       only return mappings that are missing at the destination\
    \ or have\n       been updated.\n   After issuing the <getMappingsRequest> message,\
    \ the LoST Sync\n   destination waits for the <getMappingsResponse> message. \
    \ In case of\n   a successful response, the LoST Sync destination stores the received\n\
    \   mappings and determines which mappings to update.\n"
- title: 4.2.  Behavior of the LoST Sync Source
  contents:
  - "4.2.  Behavior of the LoST Sync Source\n   When a LoST Sync source receives an\
    \ empty <getMappingsRequest>\n   message, then all locally available mappings\
    \ MUST be returned.\n   When a LoST Sync source receives a <getMappingsRequest>\
    \ message with\n   one or more <exists> child element(s), then it MUST consult\
    \ with the\n   local mapping database to determine whether any of the mappings\
    \ of\n   the client is stale and whether there are mappings locally that the\n\
    \   client does not yet have.  The former can be determined by finding\n   mappings\
    \ corresponding to the 'source' and 'sourceID' attributes\n   where a mapping\
    \ with a more recent 'lastUpdated' date exists.\n   Processing a <getMappingsRequest>\
    \ message MAY lead to a successful\n   response in the form of a <getMappingsResponse>\
    \ or an <errors>\n   message.  Only the <badRequest>, <forbidden>, <internalError>,\
    \ and\n   <serverTimeout> errors, defined in [RFC5222], are used by this\n   specification.\
    \  Neither the <redirect> nor the <warnings> messages\n   are reused by this message.\n"
- title: 4.3.  Examples
  contents:
  - "4.3.  Examples\n   The first example shows an empty <getMappingsRequest> message\
    \ that\n   would retrieve all locally stored mappings at the LoST Sync source.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <getMappingsRequest xmlns=\"\
    urn:ietf:params:xml:ns:lostsync1\"/>\n          Figure 7: Example of Empty <getMappingsRequest>\
    \ Message\n   A further example request is shown in Figure 8, and the corresponding\n\
    \   response is depicted in Figure 9.  In this example, the\n   <getMappingsRequest>\
    \ element contains information about the mapping\n   that is locally available\
    \ to the client inside the\n   <mapping-fingerprint> element (with\n   source=\"\
    authoritative.bar.example\",\n   sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    , and lastUpdated=\"2006-\n   11-01T01:00:00Z\").  The query asks for mappings\
    \ that are more recent\n   than the available one as well as any missing mapping.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <getMappingsRequest xmlns=\"\
    urn:ietf:params:xml:ns:lostsync1\">\n       <exists>\n           <mapping-fingerprint\
    \ source=\"authoritative.bar.example\"\n           sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    \n           lastUpdated=\"2006-11-01T01:00:00Z\">\n           </mapping-fingerprint>\n\
    \       </exists>\n   </getMappingsRequest>\n              Figure 8: Example <getMappingsRequest>\
    \ Message\n   The response to the above request is shown in Figure 9.  A more\n\
    \   recent mapping was available with the identification of\n   source=\"authoritative.bar.example\"\
    \ and\n   sourceId=\"7e3f40b098c711dbb6060800200c9a66\".  Only one missing\n \
    \  mapping, with source \"authoritative.foo.example\", was found and\n   returned.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <sync:getMappingsResponse\n\
    \      xmlns:sync=\"urn:ietf:params:xml:ns:lostsync1\"\n      xmlns=\"urn:ietf:params:xml:ns:lost1\"\
    \n      xmlns:gml=\"http://www.opengis.net/gml\">\n          <mapping source=\"\
    authoritative.bar.example\"\n              sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\
    \n              lastUpdated=\"2008-11-26T01:00:00Z\"\n              expires=\"\
    2009-12-26T01:00:00Z\">\n              <displayName xml:lang=\"en\">Leonia Police\
    \ Department\n              </displayName>\n              <service>urn:service:sos.police</service>\n\
    \              <serviceBoundary\n   profile=\"urn:ietf:params:lost:location-profile:basic-civic\"\
    >\n                  <civicAddress\n   xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\
    >\n                      <country>US</country>\n                      <A1>NJ</A1>\n\
    \                      <A3>Leonia</A3>\n                      <PC>07605</PC>\n\
    \                  </civicAddress>\n              </serviceBoundary>\n       \
    \       <uri>sip:police@leonianj2.example.org</uri>\n              <serviceNumber>911</serviceNumber>\n\
    \          </mapping>\n          <mapping expires=\"2009-01-01T01:44:33Z\"\n \
    \             lastUpdated=\"2008-11-01T01:00:00Z\"\n              source=\"authoritative.foo.example\"\
    \n              sourceId=\"7e3f40b098c711dbb606011111111111\">\n             \
    \ <displayName xml:lang=\"en\">New York City Police Department\n             \
    \ </displayName>\n              <service>urn:service:sos.police</service>\n  \
    \            <serviceBoundary profile=\"geodetic-2d\">\n                  <gml:Polygon\
    \ srsName=\"urn:ogc:def::crs:EPSG::4326\">\n                      <gml:exterior>\n\
    \                          <gml:LinearRing>\n                              <gml:pos>37.775\
    \ -122.4194</gml:pos>\n                              <gml:pos>37.555 -122.4194</gml:pos>\n\
    \                              <gml:pos>37.555 -122.4264</gml:pos>\n         \
    \                     <gml:pos>37.775 -122.4264</gml:pos>\n                  \
    \            <gml:pos>37.775 -122.4194</gml:pos>\n                          </gml:LinearRing>\n\
    \                      </gml:exterior>\n                  </gml:Polygon>\n   \
    \           </serviceBoundary>\n              <uri>sip:nypd@example.com</uri>\n\
    \              <uri>xmpp:nypd@example.com</uri>\n              <serviceNumber>911</serviceNumber>\n\
    \          </mapping>\n   </sync:getMappingsResponse>\n              Figure 9:\
    \ Example <getMappingsResponse> Message\n"
- title: 5.  Pushing Mappings via <pushMappings> and <pushMappingsResponse>
  contents:
  - '5.  Pushing Mappings via <pushMappings> and <pushMappingsResponse>

    '
- title: 5.1.  Behavior of the LoST Sync Source
  contents:
  - "5.1.  Behavior of the LoST Sync Source\n   When a LoST Sync source obtains new\
    \ information that is of interest\n   to its peers, it may push the new mappings\
    \ to its peers.\n   Configuration settings at both peers decide whether this\n\
    \   functionality is used and what mappings are pushed to which other\n   peers.\
    \  New mappings may arrive through various means, such as a\n   manual addition\
    \ to the local mapping database, or through the\n   interaction with other entities.\
    \  Deleting mappings may also trigger\n   a protocol interaction.\n   The LoST\
    \ Sync source SHOULD keep track of which LoST Sync destination\n   it has pushed\
    \ <mapping> elements to.  If it does not keep state\n   information, then it always\
    \ has to push the complete data set.  As\n   discussed in Section 5.1 of [RFC5222],\
    \ <mapping> elements are\n   identified by the 'source', 'sourceID', and 'lastUpdated'\
    \ attributes.\n   A mapping is considered the same if these three attributes match.\n\
    \   A <pushMappings> request sent by a LoST Sync source MUST contain one\n   or\
    \ more <mapping> elements.\n   To delete a mapping, the content of the mapping\
    \ is left empty, i.e.,\n   the <mapping> element only contains the 'source', 'sourceID',\n\
    \   'lastUpdated', and 'expires' attributes.  Figure 10 shows an example\n   request\
    \ where the mapping with the source=\"nj.us.example\",\n   sourceId=\"123\", lastUpdated=\"\
    2008-11-01T01:00:00Z\", and\n   expires=\"2008-11-01T01:00:00Z\" is requested\
    \ to be deleted.  Note that\n   the 'expires' attribute is required per the schema\
    \ definition but\n   will be ignored in processing the request on the receiving\
    \ side.  A\n   sync source may want to delete the mapping from its internal mapping\n\
    \   database but has to remember the peers to which it has distributed\n   this\
    \ update unless it has other ways to ensure that databases do not\n   get out\
    \ of sync.\n"
- title: 5.2.  Behavior of the LoST Sync Destination
  contents:
  - "5.2.  Behavior of the LoST Sync Destination\n   When a LoST Sync destination\
    \ receives a <pushMappingsRequest>\n   message, then the cache with the existing\
    \ mappings is inspected to\n   determine whether the received mapping should lead\
    \ to an update of an\n   already existing mapping, should create a new mapping\
    \ in the cache,\n   or should be discarded.\n   If a newly received mapping has\
    \ a more recent time in its\n   'lastUpdated' attribute, it MUST update an existing\
    \ mapping that has\n   matching 'source' and 'sourceID' attributes.\n   If the\
    \ received mapping does not match with any existing mapping\n   based on the 'source'\
    \ and 'sourceId', then it MUST be added to the\n   local cache as an independent\
    \ mapping.\n   If a <pushMappingsRequest> message with an empty <mapping> element\
    \ is\n   received, then a corresponding mapping has to be determined based on\n\
    \   the 'source' and the 'sourceID'.\n   If no mapping can be identified, then\
    \ an <errors> response MUST be\n   returned that contains the <notDeleted> child\
    \ element.  The\n   <notDeleted> element MAY contain a 'message' attribute with\
    \ an error\n   description used for debugging purposes.  The <notDeleted> element\n\
    \   MUST contain the <mapping> element(s) that caused the error.\n   The response\
    \ to a <pushMappingsRequest> request is a\n   <pushMappingsResponse> message.\
    \  With this specification, a\n   successful response message returns no additional\
    \ elements, whereas\n   an <errors> response is returned in the response message\
    \ if the\n   request failed.  Only the <badRequest>, <forbidden>, <internalError>,\n\
    \   or <serverTimeout> errors defined in Section 13.1 of [RFC5222] are\n   used.\
    \  The <redirect> and <warnings> messages are not used for this\n   query/response.\n\
    \   If the set of nodes that are synchronizing their data does not form a\n  \
    \ tree, it is possible that the same information arrives through\n   several other\
    \ nodes.  This is unavoidable but generally only imposes\n   a modest overhead.\
    \  (It would be possible to create a spanning tree\n   in the same fashion as\
    \ IP multicast, but the complexity does not seem\n   warranted, given the relatively\
    \ low volume of data.)\n"
- title: 5.3.  Example
  contents:
  - "5.3.  Example\n   An example is shown in Figure 10.  Imagine a LoST node that\
    \ obtained\n   two new mappings identified as follows:\n   o  source=\"authoritative.example\"\
    \n      sourceId=\"7e3f40b098c711dbb6060800200c9a66\"\n      lastUpdated=\"2008-11-26T01:00:00Z\"\
    \n   o  source=\"authoritative.example\"\n      sourceId=\"7e3f40b098c711dbb606011111111111\"\
    \n      lastUpdated=\"2008-11-01T01:00:00Z\"\n   These two mappings have to be\
    \ added to the peer's mapping database.\n   Additionally, the following mapping\
    \ has to be deleted:\n   o  source=\"nj.us.example\"\n      sourceId=\"123\"\n\
    \      lastUpdated=\"2008-11-01T01:00:00Z\"\n    <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n    <sync:pushMappings\n       xmlns:sync=\"urn:ietf:params:xml:ns:lostsync1\"\
    \n       xmlns=\"urn:ietf:params:xml:ns:lost1\"\n       xmlns:gml=\"http://www.opengis.net/gml\"\
    >\n          <mapping source=\"authoritative.example\"\n              sourceId=\"\
    7e3f40b098c711dbb6060800200c9a66\"\n              lastUpdated=\"2008-11-26T01:00:00Z\"\
    \n              expires=\"2009-12-26T01:00:00Z\">\n              <displayName\
    \ xml:lang=\"en\">Leonia Police Department\n              </displayName>\n   \
    \           <service>urn:service:sos.police</service>\n              <serviceBoundary\n\
    \       profile=\"urn:ietf:params:lost:location-profile:basic-civic\">\n     \
    \             <civicAddress\n       xmlns=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\
    >\n                      <country>US</country>\n                      <A1>NJ</A1>\n\
    \                      <A3>Leonia</A3>\n                      <PC>07605</PC>\n\
    \                  </civicAddress>\n              </serviceBoundary>\n       \
    \       <uri>sip:police@leonianj.example.org</uri>\n              <serviceNumber>911</serviceNumber>\n\
    \          </mapping>\n          <mapping expires=\"2009-01-01T01:44:33Z\"\n \
    \             lastUpdated=\"2008-11-01T01:00:00Z\"\n              source=\"authoritative.example\"\
    \n              sourceId=\"7e3f40b098c711dbb606011111111111\">\n             \
    \ <displayName xml:lang=\"en\">New York City Police Department\n             \
    \ </displayName>\n              <service>urn:service:sos.police</service>\n  \
    \            <serviceBoundary profile=\"geodetic-2d\">\n                  <gml:Polygon\
    \ srsName=\"urn:ogc:def::crs:EPSG::4326\">\n                      <gml:exterior>\n\
    \                          <gml:LinearRing>\n                              <gml:pos>37.775\
    \ -122.4194</gml:pos>\n                              <gml:pos>37.555 -122.4194</gml:pos>\n\
    \                              <gml:pos>37.555 -122.4264</gml:pos>\n         \
    \                     <gml:pos>37.775 -122.4264</gml:pos>\n                  \
    \            <gml:pos>37.775 -122.4194</gml:pos>\n                          </gml:LinearRing>\n\
    \                      </gml:exterior>\n                  </gml:Polygon>\n   \
    \           </serviceBoundary>\n              <uri>sip:nypd@example.com</uri>\n\
    \              <uri>xmpp:nypd@example.com</uri>\n              <serviceNumber>911</serviceNumber>\n\
    \          </mapping>\n          <mapping source=\"nj.us.example\"\n         \
    \     sourceId=\"123\"\n              lastUpdated=\"2008-11-01T01:00:00Z\"\n \
    \             expires=\"2008-11-01T01:00:00Z\"/>\n    </sync:pushMappings>\n \
    \            Figure 10: Example <pushMappingsRequest> Message\n   In response,\
    \ the peer performs the necessary operations and updates\n   its mapping database.\
    \  In particular, it will check whether the other\n   peer is authorized to perform\
    \ the update and whether the elements and\n   attributes contain values that it\
    \ understands.  In our example, a\n   positive response is returned as shown in\
    \ Figure 11.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <pushMappingsResponse\
    \ xmlns=\"urn:ietf:params:xml:ns:lostsync1\" />\n                 Figure 11: Example\
    \ <pushMappingsResponse>\n   In case a mapping could not be deleted as requested,\
    \ the following\n   error response might be returned instead.\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <errors xmlns=\"urn:ietf:params:xml:ns:lost1\"\n\
    \       xmlns:sync=\"urn:ietf:params:xml:ns:lostsync1\"\n       source=\"nodeA.example.com\"\
    >\n       <sync:notDeleted\n           message=\"Could not delete the indicated\
    \ mapping.\"\n           xml:lang=\"en\">\n           <mapping source=\"nj.us.example\"\
    \n               sourceId=\"123\"\n               lastUpdated=\"2008-11-01T01:00:00Z\"\
    \n               expires=\"2008-11-01T01:00:00Z\"/>\n       </sync:notDeleted>\n\
    \   </errors>\n                    Figure 12: Example <errors> Message\n"
- title: 6.  Transport
  contents:
  - "6.  Transport\n   LoST Sync needs an underlying protocol transport mechanism\
    \ to carry\n   requests and responses.  This document uses HTTPS as a transport\
    \ to\n   exchange XML documents.  No fallback to HTTP is provided.\n   When using\
    \ HTTP over Transport Layer Security (TLS) [RFC2818], LoST\n   Sync messages use\
    \ the POST method.  Requests MUST use the Cache-\n   Control response directive\
    \ \"no-cache\".\n   All LoST Sync responses, including those indicating a LoST\
    \ warning or\n   error, are carried in 2xx responses, typically 200 (OK). 3xx,\
    \ 4xx,\n   and 5xx HTTP response codes indicate that the request itself failed\n\
    \   or was redirected; these responses do not contain any LoST Sync XML\n   elements.\n"
- title: 7.  RELAX NG
  contents:
  - "7.  RELAX NG\n   Note: In order to avoid copying pattern definitions from the\
    \ LoST\n   Regular Language for XML Next Generation (RELAX NG) schema [RFC5222]\n\
    \   to this document, we include it as \"lost.rng\" (XML syntax) in the\n   RELAX\
    \ NG schema below.\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <grammar\
    \ ns=\"urn:ietf:params:xml:ns:lostsync1\"\n        xmlns=\"http://relaxng.org/ns/structure/1.0\"\
    \n        xmlns:a=\"http://relaxng.org/ns/compatibility/annotations/1.0\"\n  \
    \      datatypeLibrary=\"http://www.w3.org/2001/XMLSchema-datatypes\">\n     \
    \       <include href=\"lost.rng\"/>\n            <start combine=\"choice\">\n\
    \             <a:documentation> Location-to-Service Translation (LoST)\n     \
    \          Synchronization Protocol</a:documentation>\n                <choice>\n\
    \                    <ref name=\"pushMappings\"/>\n                    <ref name=\"\
    pushMappingsResponse\"/>\n                    <ref name=\"getMappingsRequest\"\
    />\n                    <ref name=\"getMappingsResponse\"/>\n                </choice>\n\
    \            </start>\n            <define name=\"pushMappings\">\n          \
    \      <element name=\"pushMappings\">\n                        <oneOrMore>\n\
    \                            <ref name=\"mapping\"/>\n                       \
    \ </oneOrMore>\n                    <ref name=\"extensionPoint\"/>\n         \
    \       </element>\n            </define>\n            <define name=\"pushMappingsResponse\"\
    >\n                <element name=\"pushMappingsResponse\">\n                 \
    \   <ref name=\"extensionPoint\"/>\n                </element>\n            </define>\n\
    \             <define name=\"getMappingsRequest\">\n                  <element\
    \ name=\"getMappingsRequest\">\n                    <choice>\n               \
    \          <ref name=\"exists\"></ref>\n                         <ref name=\"\
    extensionPoint\"/>\n                    </choice>\n                </element>\n\
    \            </define>\n             <define name=\"exists\">\n              \
    \    <element name=\"exists\">\n                       <oneOrMore>\n         \
    \                   <element name=\"mapping-fingerprint\">\n                 \
    \                <attribute name=\"source\">\n                               \
    \       <data type=\"token\"/>\n                                 </attribute>\n\
    \                                 <attribute name=\"sourceId\">\n            \
    \                          <data type=\"token\"/>\n                          \
    \       </attribute>\n                                 <attribute name=\"lastUpdated\"\
    >\n                                      <data type=\"dateTime\"/>\n         \
    \                        </attribute>\n                                 <ref name=\"\
    extensionPoint\"/>\n                            </element>\n                 \
    \      </oneOrMore>\n                  </element>\n             </define>\n  \
    \          <define name=\"getMappingsResponse\">\n                <element name=\"\
    getMappingsResponse\">\n                        <oneOrMore>\n                \
    \            <ref name=\"mapping\"/>\n                        </oneOrMore>\n \
    \                   <ref name=\"extensionPoint\"/>\n                </element>\n\
    \            </define>\n             <!-- error messages -->\n             <define\
    \ name=\"notDeleted\">\n                  <element name=\"notDeleted\">\n    \
    \                   <ref name=\"basicException\"/>\n                       <oneOrMore>\n\
    \                            <ref name=\"mapping\"/>\n                       </oneOrMore>\n\
    \                  </element>\n             </define>\n        </grammar>\n"
- title: 8.  Operational Considerations
  contents:
  - "8.  Operational Considerations\n   It is important to avoid loops when more than\
    \ two LoST servers use\n   the mechanism described in this document.  The example\
    \ shown in\n   Figure 13 with three LoST servers A, B, and C (each of them acts\
    \ as a\n   sync source and a sync destination) illustrates the challenge in more\n\
    \   detail.  A and B synchronize data between each other; the same is\n   true\
    \ for A and C, and B and C, respectively.\n                                  \
    \ A -------- B\n                                    \\        /\n            \
    \                         \\      /\n                                      \\\
    \    /\n                                       \\  /\n                       \
    \                 C\n             Figure 13: Synchronization Configuration Example\n\
    \   Now, imagine that server A adds a new mapping.  This mapping is\n   uniquely\
    \ identified by the combination of \"source\", \"sourceid\", and\n   \"last updated\"\
    .  Assume that A wants to push this new mapping to B\n   and C.  When B obtains\
    \ this new mapping, it determines that it has to\n   distribute it to its peer\
    \ C.  C also needs to distribute the mapping\n   to its peer B.  If the original\
    \ mapping with the \"source\",\n   \"sourceid\", and \"last updated\" is not modified\
    \ by either B or C, then\n   these two servers would recognize that they already\
    \ possess the\n   mapping and can ignore the update.\n   Implementations MUST\
    \ NOT modify mappings they receive.  An entity\n   acting maliciously would, however,\
    \ intentionally modify mappings or\n   inject bogus mappings.  To avoid the possibility\
    \ of an untrustworthy\n   member claiming a coverage region for which it is not\
    \ authorized,\n   authoritative mapping servers MUST sign mappings they distribute\n\
    \   using an XML digital signature [W3C.REC-xmldsig-core-20020212].  A\n   recipient\
    \ MUST verify that the signing entity is indeed authorized to\n   speak for that\
    \ region.  In many cases, this will require an out-of-\n   band agreement to be\
    \ in place to agree on specific entities to take\n   on this role.  Determining\
    \ who can speak for a particular region is\n   inherently difficult unless there\
    \ is a small set of authorizing\n   entities that participants in the mapping\
    \ architecture can trust.\n   Receiving systems should be particularly suspicious\
    \ if an existing\n   coverage region is replaced by a new one that contains a\
    \ different\n   value in the <uri> element.  When mappings are digitally signed,\
    \ they\n   cannot be modified by intermediate LoST servers.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document defines a protocol for exchange\
    \ of authoritative\n   mapping information between two entities.  Hence, the protocol\n\
    \   operations described in this document require authentication of\n   neighboring\
    \ nodes.\n   The LoST Sync client and servers MUST implement TLS and use TLS.\n\
    \   Which version(s) ought to be implemented will vary over time and\n   depend\
    \ on the widespread deployment and known security\n   vulnerabilities at the time\
    \ of implementation.  At the time of this\n   writing, TLS version 1.2 [RFC5246]\
    \ is the most recent version but has\n   very limited actual deployment and might\
    \ not be readily available in\n   implementation tool kits.  TLS version 1.0 [RFC2246]\
    \ is the most\n   widely deployed version and will give the broadest interoperability.\n\
    \   Mutual authentication between the LoST Sync source and the LoST Sync\n   destination\
    \ is not necessarily required in all deployments unless an\n   emergency service\
    \ authority wants to enforce access control prior to\n   the distribution of their\
    \ <mapping> elements.  This may, for example,\n   be the case when certain emergency\
    \ services networks distribute\n   internal mappings that are not meant for public\
    \ distribution.\n   An additional threat is caused by compromised or misconfigured\
    \ LoST\n   servers.  A denial of service could be the consequence of an injected\n\
    \   mapping.  If the mapping data contains a URL that does not exist,\n   then\
    \ emergency services for the indicated area are not reachable.  If\n   all mapping\
    \ data contains URLs that point to a single PSAP (rather\n   than a large number\
    \ of PSAPs), then this PSAP is likely to experience\n   overload conditions. \
    \ If the mapping data contains a URL that points\n   to a server controlled by\
    \ the adversary itself, then it might\n   impersonate PSAPs.\n   Section 8 discusses\
    \ this security threat and mandates signed\n   mappings.  For unusual changes\
    \ to the mapping database, approval by a\n   system administrator of the emergency\
    \ services infrastructure (or a\n   similar expert) may be required before any\
    \ mappings are installed.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  Media Type Registration
  contents:
  - "10.1.  Media Type Registration\n   This specification requests the registration\
    \ of a new media type\n   according to the procedures of RFC 4288 [RFC4288] and\
    \ guidelines in\n   RFC 3023 [RFC3023].\n   Type name:  application\n   Subtype\
    \ name:  lostsync+xml\n   Required parameters:  none\n   Optional parameters:\
    \  charset\n      Same as charset parameter of application/xml as specified in\
    \ RFC\n      3023 [RFC3023].\n   Encoding considerations:  Identical to those\
    \ of \"application/xml\" as\n      described in [RFC3023], Section 3.2.\n   Security\
    \ considerations:  This content type is designed to carry LoST\n      Synchronization\
    \ protocol payloads, and the security considerations\n      section of RFC 6739\
    \ is applicable.  In addition, as this media\n      type uses the \"+xml\" convention,\
    \ it shares the same security\n      considerations as described in [RFC3023],\
    \ Section 10.\n   Interoperability considerations:  None\n   Published specification:\
    \  RFC 6739\n   Applications that use this media type:  Emergency and Location-based\n\
    \      Systems\n   Additional information:\n      Magic number(s):  None\n   \
    \   File extension(s):  .lostsyncxml\n      Macintosh file type code(s):  'TEXT'\n\
    \   Person & email address to contact for further information:\n      Hannes Tschofenig\
    \ <Hannes.Tschofenig@gmx.net>\n   Intended usage:  LIMITED USE\n   Restrictions\
    \ on usage:  None\n   Author:  Hannes Tschofenig <Hannes.Tschofenig@gmx.net>\n\
    \   Change controller:\n      This specification is a work item of the IETF ECRIT\
    \ working group,\n      with mailing list address <ecrit@ietf.org>.\n   Change\
    \ controller:\n      The IESG <iesg@ietf.org>\n"
- title: 10.2.  LoST Sync RELAX NG Schema Registration
  contents:
  - "10.2.  LoST Sync RELAX NG Schema Registration\n   The schema defined in this\
    \ document has been registered under the XML\n   schema registry at\n   http://www.iana.org/assignments/xml-registry/schema.html\n\
    \   URI:  urn:ietf:params:xml:schema:lostsync1\n   Registrant Contact:  IETF ECRIT\
    \ Working Group, Hannes Tschofenig\n      (Hannes.Tschofenig@gmx.net).\n   RELAX\
    \ NG Schema:  The RELAX NG schema that has been registered is\n      contained\
    \ in Section 7.\n"
- title: 10.3.  LoST Synchronization Namespace Registration
  contents:
  - "10.3.  LoST Synchronization Namespace Registration\n   The namespace defined\
    \ in this document has been registered under the\n   XML namespace registry at\n\
    \   http://www.iana.org/assignments/xml-registry/ns.html\n   URI:  urn:ietf:params:xml:ns:lostsync1\n\
    \   Registrant Contact:  IETF ECRIT Working Group, Hannes Tschofenig\n      (Hannes.Tschofenig@gmx.net).\n\
    \   XML:\n   BEGIN\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD\
    \ XHTML Basic 1.0//EN\"\n     \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n   <html xmlns=\"http://www.w3.org/1999/xhtml\">\n   <head>\n     <meta http-equiv=\"\
    content-type\"\n           content=\"text/html;charset=iso-8859-1\"/>\n     <title>LoST\
    \ Synchronization Namespace</title>\n   </head>\n   <body>\n     <h1>Namespace\
    \ for LoST server synchronization</h1>\n     <h2>urn:ietf:params:xml:ns:lostsync1</h2>\n\
    \   <p>See <a href=\"[URL of published RFC]\">RFC 6739\n          </a>.</p>\n\
    \   </body>\n   </html>\n   END\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   Robins George, Cullen Jennings, Karl Heinz Wolf, Richard\
    \ Barnes,\n   Mayutan Arumaithurai, Alexander Mayrhofer, and Andrew Newton provided\n\
    \   helpful input.  Jari Urpalainen assisted with the RELAX NG schema.\n   We\
    \ would also like to thank our document shepherd Roger Marshall for\n   his help\
    \ with the document.\n   We would like to particularly thank Andrew Newton for\
    \ his timely and\n   valuable review of the XML-related content.\n   We would\
    \ like to thank Robert Sparks, Barry Leiba, Stephen Farrell,\n   Brian Haberman,\
    \ Pete Resnick, and Sean Turner for their AD reviews.\n   We would also like to\
    \ thank Bjoern Hoehrmann for his media type\n   review, Julian Reschke and Martin\
    \ Duerst for their applications area\n   reviews, and Wassim Haddad for his Gen-ART\
    \ review.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2246]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n              RFC 2246, January 1999.\n   [RFC2818]  Rescorla, E., \"HTTP Over\
    \ TLS\", RFC 2818, May 2000.\n   [RFC3023]  Murata, M., St. Laurent, S., and D.\
    \ Kohn, \"XML Media\n              Types\", RFC 3023, January 2001.\n   [RFC4288]\
    \  Freed, N. and J. Klensin, \"Media Type Specifications and\n              Registration\
    \ Procedures\", BCP 13, RFC 4288, December 2005.\n   [RFC5222]  Hardie, T., Newton,\
    \ A., Schulzrinne, H., and H.\n              Tschofenig, \"LoST: A Location-to-Service\
    \ Translation\n              Protocol\", RFC 5222, August 2008.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246, August 2008.\n   [W3C.REC-xmldsig-core-20020212]\n\
    \              Eastlake, D., Reagle, J., Solo, D., Hirsch, F., and T.\n      \
    \        Roessler, \"XML-Signature Syntax and Processing\", World\n          \
    \    Wide Web Consortium, Second Edition, REC-xmldsig-core-\n              20020212,\
    \ June 2008.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC5012]  Schulzrinne, H. and R. Marshall,\
    \ \"Requirements for\n              Emergency Context Resolution with Internet\
    \ Technologies\",\n              RFC 5012, January 2008.\n   [RFC5582]  Schulzrinne,\
    \ H., \"Location-to-URL Mapping Architecture and\n              Framework\", RFC\
    \ 5582, September 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Henning Schulzrinne\n   Columbia University\n   Department\
    \ of Computer Science\n   450 Computer Science Building\n   New York, NY  10027\n\
    \   USA\n   Phone: +1 212 939 7004\n   EMail: hgs+ecrit@cs.columbia.edu\n   URI:\
    \   http://www.cs.columbia.edu\n   Hannes Tschofenig\n   Nokia Siemens Networks\n\
    \   Linnoitustie 6\n   Espoo  02600\n   Finland\n   Phone: +358 (50) 4871445\n\
    \   EMail: Hannes.Tschofenig@gmx.net\n   URI:   http://www.tschofenig.priv.at\n"
