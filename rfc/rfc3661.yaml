- title: __initial_text__
  contents:
  - '        Media Gateway Control Protocol (MGCP) Return Code Usage

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides implementation guidelines for the use of\n\
    \   return codes in RFC 3435, Media Gateway Control Protocol (MGCP)\n   Version\
    \ 1.0.  Return codes in RFC 3435 do not cover all possible\n   specific situations\
    \ that may ever occur in a gateway.  That is not\n   possible and not necessary.\
    \  What is important is to ensure that the\n   Call Agent that receives a return\
    \ code behaves appropriately and\n   consistently for the given situation.  The\
    \ purpose of this document\n   is to provide implementation guidelines to ensure\
    \ that consistency.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n       1.2.  Document Organization . . . . . . . . . . . . .\
    \ . . . .   2\n   2.  Return Code Usage . . . . . . . . . . . . . . . . . . .\
    \ . . .   2\n       2.1.  Return Code Categories. . . . . . . . . . . . . . .\
    \ . .   2\n       2.2.  Return Code Situations and Categories . . . . . . . .\
    \ .   3\n       2.3.  Summary of Return Code Categories . . . . . . . . . . .\
    \  19\n   3.  Additional Guidelines . . . . . . . . . . . . . . . . . . . .  21\n\
    \       3.1.  Gateway Recommendations . . . . . . . . . . . . . . . .  21\n  \
    \     3.2.  Call Agent Recommendations. . . . . . . . . . . . . . .  21\n   4.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  22\n   5.  Acknowledgements.\
    \ . . . . . . . . . . . . . . . . . . . . . .  22\n   6.  Normative References.\
    \ . . . . . . . . . . . . . . . . . . . .  22\n   7.  Authors' Addresses. . .\
    \ . . . . . . . . . . . . . . . . . . .  23\n   8.  Full Copyright Statement.\
    \ . . . . . . . . . . . . . . . . . .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides implementation guidelines for the\
    \ use of\n   return codes in the Media Gateway Control Protocol MGCP 1.0 [1].\n\
    \   Return codes in [1] do not cover all possible specific situations\n   that\
    \ may ever occur in the gateway.  That is not possible and not\n   necessary.\
    \  What is important is to ensure that the Call Agent that\n   receives that return\
    \ code behaves appropriately and consistently for\n   the situation that occurred.\
    \  The solution described in this document\n   is to categorize return codes that\
    \ gateways return based on the\n   expected behavior for the Call Agents that\
    \ receive them.\n   Categorizing errors helps both Call Agent and gateway developers:\
    \ it\n   helps gateway developers choose an appropriate return code when a\n \
    \  specific one for the situation is not available; it also helps Call\n   Agent\
    \ developers ensure that there is consistent behavior for the\n   return code\
    \ that is received.\n"
- title: 1.2.  Document Organization
  contents:
  - "1.2.  Document Organization\n   In addition to categorizing return codes (section\
    \ 2.1), section 2.2\n   provides a consolidated list of return codes in terms\
    \ of \"situations\"\n   that may have triggered and the \"categories\" that they\
    \ fall under.\n   This provides some additional implementation guidelines for\
    \ the use\n   of these return codes.  Section 2.3 includes a summary of the return\n\
    \   codes and their categories.  Section 3 provides some additional\n   implementation\
    \ guidelines for Call Agent and gateway developers.\n"
- title: 2.  Return Code Usage
  contents:
  - '2.  Return Code Usage

    '
- title: 2.1.  Return Code Categories
  contents:
  - "2.1.  Return Code Categories\n   The following categorizes return codes from\
    \ gateways based on\n   expected Call Agent behavior.\n   Category normal: These\
    \ return codes are used in normal operation and\n      do not represent error\
    \ conditions.\n   Category none (specific errors requiring specific action): A\
    \ return\n      code associated with a specific situation in the gateway that\
    \ will\n      invoke a corresponding specific Call Agent behavior.  As such,\n\
    \      these return codes are not categorized into a common behavioral\n     \
    \ category.\n   Category \"Service Failure\": A category in which the endpoint\
    \ is\n      either out-of-service or the treatment by the Call Agent is\n    \
    \  expected to be the same as for an out-of-service endpoint.\n   Category \"\
    Provisioning Mismatch\": A situation where the gateway has\n      indicated that\
    \ it does not support what the Call Agent has asked\n      it to do.  This may\
    \ be caused by a lack of synchronization between\n      the provisioning of the\
    \ Call Agent and the gateway.  Note that\n      attempts should be made to weed\
    \ out these types of error\n      situations during integration testing.\n   Category\
    \ \"Temporary Failure\": The transient nature of this error is\n      such that\
    \ this particular call is likely to be permanently\n      affected but later calls\
    \ on the same endpoint may proceed\n      successfully.  Typically the situation\
    \ that caused this error is\n      not going to disappear unless there is some\
    \ change in state in the\n      gateway or network (e.g., more bandwidth becomes\
    \ available, more\n      CPU resources become available etc.).  This situation\
    \ is not\n      likely to change in a few 10's of milliseconds but could change\n\
    \      within some number of seconds or minutes later (as resources\n      become\
    \ free), i.e., within the time period that you might expect a\n      different\
    \ call to be tried on that endpoint.\n   Category \"State Mismatch\":  A case\
    \ where there is a state mismatch\n      between the Call Agent and the gateway\
    \ that can be resolved by the\n      Call Agent making a request that is more\
    \ appropriate to the\n      gateway state.  Although categorized with a common\
    \ category\n      indicator the behavior of the Call Agent will depend on the\n\
    \      situation (the type of state mismatch that has occurred as well as\n  \
    \    other state information, e.g., call state).\n   Category \"Remote Connection\
    \ Descriptor Error\": This indicates some\n      mismatch between the two gateways\
    \ involved in the call.  Note that\n      per RFC 2327, all gateways should ignore\
    \ SDP attributes that they\n      do not recognize (i.e., lack of recognition\
    \ of an SDP attribute\n      should not be the cause of an error indication).\n\
    \   The exact behavior of the Call Agent for the above categories may\n   depend\
    \ on the type of endpoint (analog, ISUP trunk, CAS trunk, etc.),\n   whether this\
    \ is the originating or terminating endpoint in the call\n   and possibly other\
    \ information related to call state.  This document\n   does not attempt to outline\
    \ the Call Agent behavior based on call\n   state.  Instead, it just recommends\
    \ that the Call Agent behavior be\n   consistent based on a combination of call\
    \ state and the specific\n   category of error received.\n"
- title: 2.2.  Return Code Situations and Categories
  contents:
  - "2.2.  Return Code Situations and Categories\n   This section describes return\
    \ codes in MGCP 1.0 [1] in terms of\n   \"situations\" that may have triggered\
    \ that return code and\n   \"categories\" to which the return code belongs.  The\
    \ purpose is to\n   provide developers additional guidelines for return code use.\n\
    \   Note that any indication that a response is valid for a\n   NotificationRequest\
    \ (RQNT) is also an indication that it is valid for\n   a connection handling\
    \ request, i.e., CreateConnection (CRCX),\n   ModifyConnection (MDCX), or DeleteConnection\
    \ (DLCX) with an\n   encapsulated RQNT.  The same holds for the EndpointConfiguration\n\
    \   (EPCF) command.\n   000 - Response acknowledgement\n        Response valid\
    \ for:    Confirmation of a final response after a\n        provisional response\
    \ (3-way handshake).\n        Situation:   If the final response that follows\
    \ a provisional\n        response contains an empty response acknowledgement parameter,\
    \ a\n        Response Acknowledgement is used to acknowledge the final\n     \
    \   response (section 3.5.6 of [1]).\n        Category:    normal.\n   100 - Transaction\
    \ in progress\n        Response valid for:    Any command that may result in a\
    \ long\n        transaction execution time, e.g., more than 200 ms.\n        Situation:\
    \   When a transaction is expected to take a processing\n        time that is\
    \ beyond the normal retry timer, the gateway will\n        return a provisional\
    \ response.  A final response will be\n        provided later, after the transaction\
    \ has completed.  Refer to\n        section 3.5.6 of [1].  An example of this\
    \ might be a\n        CreateConnection command using RSVP, where the time to create\n\
    \        the connection may be longer than usual because of the need to\n    \
    \    perform the network resource reservation.\n        Category:    normal.\n\
    \   101 - Transaction has been queued for execution\n        Response valid for:\
    \    Any command.\n        Situation:   As described in [1], Section 4.4.8, we\
    \ assume that\n        Call Agents and gateways conceptually maintain a queue\
    \ of\n        incoming transactions to be executed.  Associated with this\n  \
    \      transaction queue is a high-water and a low-water mark.  Once\n       \
    \ the queue length reaches the high-water mark, the entity should\n        start\
    \ issuing 101 provisional responses (transaction queued)\n        until the queue\
    \ length drops to the low-water mark.  This\n        applies to new transactions\
    \ as well as to retransmissions.  A\n        final response will be provided later,\
    \ after the transaction has\n        completed.  In this case, the Call Agent\
    \ should throttle back\n        its request rate for this gateway.\n        Category:\
    \    normal.\n   200 - Transaction executed normally\n        Response valid for:\
    \    Any command (including DeleteConnection).\n        Situation:   Normal response\
    \ as a result of successful\n        execution.  The 250 response code can be\
    \ used to acknowledge a\n        successful completion of a DeleteConnection command.\
    \  However, a\n        200 response code is also appropriate.\n        Category:\
    \    normal\n   250 - The connection was deleted\n        Response valid for:\
    \    DeleteConnection.\n        Situation:   Response to a successful DeleteConnection\
    \ command.\n        Category:   normal\n   400 - Unspecified transient error\n\
    \        Response valid for:    Any command.\n        Situation:   Unspecified\
    \ transient error.  A more specific error\n        code should be used if one\
    \ is available since this error code\n        provides very little information.\
    \  If used, some specific\n        commentary should be included to aid in debug.\n\
    \        Category:    \"Temporary Failure\".\n   401 - The phone is already off-hook\n\
    \        Response valid for:    NotificationRequest.\n        Situation:   This\
    \ is returned in response to a request for an\n        off-hook transition requested\
    \ event when the phone is already\n        off-hook.  It is also returned when\
    \ a request is made to\n        generate a signal that has an explicit on-hook\
    \ precondition in\n        the signal definition, such as the ringing signal (\"\
    rg\") in the\n        Line package [2].  It is also returned when requesting an\n\
    \        incoming off-hook/seizure indication for a Channel Associated\n     \
    \   Signaling (CAS) trunk when the incoming hook-state for that\n        trunk\
    \ is already off-hook.\n        Category: \"State Mismatch\".  If the Call Agent\
    \ makes the request\n        with a requested event indicating a different hook-state,\
    \ the\n        request should not result in this return code again.\n   402 -\
    \ The phone is already on-hook\n        Response valid for:    NotificationRequest.\n\
    \        Situation: This is returned in response to a request for an on-\n   \
    \     hook or hook-flash requested event when the phone is already\n        on-hook.\
    \  It is also returned when a request is made to generate\n        a signal that\
    \ has an explicit off-hook precondition in the\n        signal definition, such\
    \ as the dial tone (\"dl\") in the Line\n        package [2].  It is also returned\
    \ when requesting an incoming\n        on-hook indication for a CAS trunk when\
    \ the incoming hook-state\n        for that trunk is already on-hook.\n      \
    \  Category:    \"State Mismatch\".  If the Call Agent makes the\n        request\
    \ with a requested event indicating a different hook-\n        state, the request\
    \ should not result in this error again.\n   403 - Insufficient resources available\
    \ at this time\n        Response valid for:    Any command.\n        Situation:\
    \   This is returned if the request cannot be processed\n        due to a temporary\
    \ lack of gateway resources, such as CPU\n        utilization, DSP resources,\
    \ memory etc; however, the command may\n        succeed at a later time when resources\
    \ free up.  Note that lack\n        of network resources should not result in\
    \ this code (i.e.,\n        return code 404 would be more appropriate).\n    \
    \    Category:    \"Temporary Failure\".\n   404 - Insufficient bandwidth at this\
    \ time.\n        Response valid for:    CreateConnection, ModifyConnection.\n\
    \        Situation:   This is an indication that there is not enough\n       \
    \ bandwidth available to sustain the call.  It is as a result of\n        some\
    \ failed bandwidth check (could be RSVP or some other\n        mechanism).  It\
    \ is possible that the Call Agent could request a\n        codec requiring lower\
    \ bandwidth codec and have a successful\n        result.  Alternatively, it could\
    \ treat this as a \"Temporary\n        Failure\" for this codec.\n        Category:\
    \    \"Temporary Failure\".  Although categorized under\n        this general\
    \ category, note that the Call Agent could apply some\n        specific behavior\
    \ (try a lower bandwidth codec) depending on\n        policy.\n   405 - Endpoint\
    \ is restarting\n        Response valid for:    Any command.\n        Situation:\
    \   It may be returned to requests made when the\n        endpoint is in-service\
    \ and has initiated the restart procedures\n        (see [1], Section 4.4.6) but\
    \ the procedure has not yet\n        completed.  If the request is made at a later\
    \ time, it may be\n        \"successful\" but may not be appropriate (because\
    \ of possible\n        state mismatch).  The Call Agent should proceed after it\n\
    \        believes the restart procedure has completed.\n        Category:    \"\
    Temporary Failure\"\n   406 - Transaction Timeout\n        Response valid for:\
    \    Any command.\n        Situation:   The transaction took longer than expected\
    \ and has\n        been aborted.  An example might be a transaction where a\n\
    \        provisional response (100 response code) was returned.\n        Following\
    \ that, the gateway determined that the actual\n        transaction was taking\
    \ longer than should reasonably be expected\n        and as a result it aborted\
    \ the transaction and returned 406 as\n        the final response.\n        Category:\
    \    \"Temporary Failure\".  If this error code is\n        returned repeatedly,\
    \ it could indicate a more serious problem.\n   407 - Transaction aborted by some\
    \ external action.\n        Response valid for:    Any command.\n        Situation:\
    \   This is returned to indicate cancellation of a\n        pending request (see\
    \ [1] Section 4.4.4).  For example,\n        DeleteConnection is received while\
    \ processing a CreateConnection\n        or ModifyConnection.  Also, if either\
    \ a ModifyConnection,\n        NotificationRequest, or EndpointConfiguration command\
    \ is in\n        progress, and the same command is received with a different\n\
    \        transaction Id, 407 will be returned.\n        Category: none (specific\
    \ situation and behavior).\n   409 - Internal overload\n        Response valid\
    \ for:    Any command.\n        Situation: Gateway is overloaded (e.g., too many\
    \ requests per\n        second from the Call Agent) and is unable to process any\
    \ more\n        transactions at this time. In this case, the Call Agent SHOULD\n\
    \        throttle back its request rate for this gateway as described in\n   \
    \     [1], Section 4.4.8.\n        Category:    \"Temporary Failure\". Note that\
    \ although the Call\n        Agent behavior with respect to the call being set\
    \ up corresponds\n        to this general category, there is some specific Call\
    \ Agent\n        behavior implied as well (i.e., the Call Agent throttling back).\n\
    \   410 - No endpoint available\n        Response valid for: CreateConnection\
    \ using an \"any of\" wildcard.\n        Situation:   A CreateConnection request\
    \ was made with an \"any\n        of\" (\"$\") wildcard and no endpoint was available\
    \ to execute the\n        request. As described in [1], Section 2.3.5, when the\
    \ \"any of\"\n        wildcard is used with the CreateConnection command, the\
    \ endpoint\n        assigned MUST be in-service and MUST NOT already have any\n\
    \        connections on it.\n        Category: none (specific situation and behavior).\n\
    \   500 - Endpoint unknown\n        Response valid for:    Any command.\n    \
    \    Situation:   There is no endpoint matching the EndpointId\n        provided\
    \ with the command. This could be the result of a\n        provisioning mismatch\
    \ between the Call Agent and the gateway or\n        it could be because a card\
    \ was removed from the gateway so that\n        the endpoint is no longer available\
    \ (in which case a\n        RestartInProgress should be received, although the\
    \ Call Agent\n        cannot depend on this). Note that the endpoint is not just\
    \ out-\n        of-service (in which case 501 would be used); it is completely\n\
    \        unknown/unavailable to the MGCP.\n        Category:    \"Provisioning\
    \ Mismatch\".\n   501 - Endpoint is not ready or is out of service\n        Response\
    \ valid for:    Any command.\n        Situation:   This is returned if the endpoint\
    \ is in a permanent\n        \"not ready\" state. This includes maintenance states\
    \ such as\n        out-of-service. Note that an endpoint that has initiated the\n\
    \        restart procedure is in-service, and hence should not use this\n    \
    \    return code, even if the restart procedure has not yet completed\n      \
    \  (see [1], Section 4.4.5).\n        Category:    \"Service Failure\".\n   502\
    \ - Insufficient resources (permanent).\n        Response valid for:    Any command.\n\
    \        Situation:   This is returned when the endpoint does not have\n     \
    \   sufficient resources and future requests on this endpoint are\n        expected\
    \ to fail, meaning some resources dedicated to the\n        endpoint are broken\
    \ (e.g., return code 529 - \"hardware failure\"\n        might be a more specific\
    \ indication). For situations where\n        resources may become available in\
    \ the future (i.e., resources\n        are pooled and not available at the present\
    \ time), return code\n        403 should be used instead.\n        Category: \
    \   \"Service Failure\".\n   503 - \"All of\" wildcard too complicated.\n    \
    \    Response valid for:    Any command.\n        Situation:   This is returned\
    \ when the wildcard convention used\n        in the request is understood, but\
    \ the requested command cannot\n        be processed with the specified wildcarding.\
    \ An example of this\n        would be a NotificationRequest with a request such\
    \ that a\n        failure would make it too difficult to roll back the state of\n\
    \        all the endpoints to what they were prior to the request.\n        Category:\
    \ Normally treated as a \"Provisioning Mismatch\". Note\n        however, that\
    \ the Call Agent could treat it differently by\n        recovering with some specific\
    \ behavior (e.g., generate a number\n        of individual requests without wildcards\
    \ instead of a single one\n        with the wildcard).\n   504 - Unknown or unsupported\
    \ command.\n        Response valid for:    Any unknown command.\n        Situation:\
    \   A command was requested other than those specified\n        in the MGCP specification\
    \ [1], and the command is not supported.\n        Category:    \"Provisioning\
    \ Mismatch\".\n   505 - Unsupported remote connection descriptor.\n        Response\
    \ valid for: CreateConnection, ModifyConnection.\n        Situation:   One or\
    \ more mandatory parameters or values in the\n        RemoteConnectionDescriptor\
    \ are not supported by the gateway.\n        Note that, per [3], unsupported attribute\
    \ lines must be ignored\n        and hence should not result in any errors.\n\
    \        Category:    \"Remote Connection Descriptor Error\".\n   506 - Inability\
    \ to satisfy both local connection options and remote\n        connection descriptor\
    \ simultaneously.\n        Response valid for: CreateConnection, ModifyConnection.\n\
    \        Situation:   The LocalConnectionOptions and\n        RemoteConnectionDescriptor\
    \ contain one or more mandatory\n        parameters or values that conflict with\
    \ each other and/or cannot\n        be supported at the same time (except for\
    \ codec negotiation\n        failure - see error code 534).\n        Category:\
    \    \"Remote Connection Descriptor Error\".\n   507 - Unsupported Functionality.\
    \  Note that this error code SHOULD\n        only be used if there is no other\
    \ more specific error code for\n        the unsupported functionality.\n     \
    \   Response valid for:    Any command.\n        Situation:   Any situation where\
    \ a request from the Call Agent\n        is not supported by the gateway - beyond\
    \ the situations already\n        covered by other more specific return codes.\n\
    \        Category:    \"Provisioning Mismatch\".\n   508 - Unknown or unsupported\
    \ quarantine handling.\n        Response valid for:    NotificationRequest.\n\
    \        Situation:   The endpoint does not support or does not recognize\n  \
    \      the requested quarantine handling.\n        Category:    \"Provisioning\
    \ Mismatch\".\n   509 - Error in RemoteConnectionDescriptor\n        Response\
    \ valid for: CreateConnection, ModifyConnection.\n        Situation: There is\
    \ a syntax or semantic error in the Remote\n        Connection Descriptor.  For\
    \ example, there is no IP address for\n        an RTP media stream.\n        Category:\
    \ \"Remote Connection Descriptor Error\".\n   510 - Protocol error\n        Response\
    \ valid for:    Any command.\n        Situation:   Some unspecified protocol error\
    \ was detected.\n        Gateways should use this error as a last resort since\
    \ it\n        provides very little information.  If used, some specific\n    \
    \    commentary should be included to aid in debug.\n        Category:    \"Provisioning\
    \ Mismatch\".\n   511 - Unrecognized parameter extension.\n        Response valid\
    \ for:    Any command.\n        Situation:   It is returned if the requested command\
    \ contains an\n        unrecognized mandatory parameter extension (\"X+\").  In\
    \ MGCP 1.0,\n        this specifically refers to unrecognized parameters, since\
    \ other\n        error codes are available for unrecognized connection modes\n\
    \        (517), unrecognized packages (518), unrecognized local\n        connection\
    \ options (541), etc.\n        Category: \"Provisioning Mismatch\".\n   512 -\
    \ Gateway not equipped to detect one of the requested events.\n        Response\
    \ valid for:    NotificationRequest.\n        Situation:   A valid event was requested\
    \ however the gateway is\n        not equipped to detect this event (i.e., the\
    \ package is only\n        implemented partially).  Of course, such an implementation\
    \ would\n        not conform to [1].  Note that if an invalid event was\n    \
    \    requested, i.e., an event not defined in the relevant package,\n        then\
    \ error code 522 should be used.  Also note, that if the\n        package is unknown\
    \ or unsupported, then error code 518 should be\n        used.\n        Category:\
    \    \"Provisioning Mismatch\".\n   513 - gateway is not equipped to generate\
    \ one of the requested\n        signals.\n        Response valid for:    NotificationRequest.\n\
    \        Situation: A valid signal was requested, however the gateway is\n   \
    \     not equipped to generate this signal (i.e., the package is only\n      \
    \  implemented partially).  Of course, such an implementation would\n        not\
    \ conform to [1].  Note that if an invalid signal was\n        requested, i.e.,\
    \ a signal not defined in the relevant package,\n        then error code 522 should\
    \ be used.  Also note, that if the\n        package is unknown or unsupported,\
    \ then error code 518 should be\n        used.\n        Category:    \"Provisioning\
    \ Mismatch\".\n   514 - The gateway cannot send the specified announcement.\n\
    \        Response valid for:    NotificationRequest with a request for an\n  \
    \      announcement to be played.\n        Situation:   This is a specific situation\
    \ with respect to\n        playing announcements on an endpoint or connection\
    \ associated\n        with the endpoint.  Error code 538 could be used instead.\n\
    \        Category:    \"Provisioning Mismatch\".\n   515 - Incorrect connection-id.\n\
    \        Response valid for:    CreateConnection, ModifyConnection,\n        DeleteConnection,\
    \ NotificationRequest, AuditConnection.\n        Situation:   An unknown connection-id\
    \ has been specified.  It is\n        possible that the connection has already\
    \ been deleted.  It\n        should be noted that a connection-id can also supplied\
    \ with\n        events and signals (e.g., \"S: L/rt@connId\").  Note that a\n\
    \        mismatch between connection-id and call-id should use error code\n  \
    \      516.\n        Category:    \"State Mismatch\".\n   516 - Unknown or incorrect\
    \ call-id.\n        Response valid for: ModifyConnection, DeleteConnection.\n\
    \        Situation:   Unknown call-id, or the call-id supplied is\n        incorrect\
    \ (e.g., connection-id not associated with this call-\n        id).\n        Category:\
    \    \"State Mismatch\".\n   517 - Invalid or unsupported mode.\n        Response\
    \ valid for:    CreateConnection, ModifyConnection.\n        Situation:   This\
    \ is returned if the command specifies a\n        connection mode that the endpoint\
    \ does not support (note that\n        not all endpoints will support all modes).\
    \  Note that if the\n        unsupported mode is an extension connection mode,\
    \ error code 518\n        (unsupported package) should be used instead.\n    \
    \    Category:    \"Provisioning Mismatch\".\n   518 - Unsupported or unknown\
    \ package.\n        Response valid for:    Any command\n        Situation:   A\
    \ package name included in a request is not\n        supported (or unknown). \
    \ Note that the package name may be a\n        prefix to an event or other things\
    \ (e.g., a parameter) as\n        defined in [1].  Note that it is recommended\
    \ to include a\n        PackageList parameter with a list of supported packages\
    \ in the\n        response.\n        Category:    \"Provisioning Mismatch\".\n\
    \   519 - Endpoint does not have a digit map.\n        Response valid for: NotificationRequest.\n\
    \        Situation:   Request was made to detect digits based on a digit\n   \
    \     map and the gateway does not have a digit map.\n        Category:    \"\
    State Mismatch\".  The Call Agent needs to send\n        down a digit map in order\
    \ to continue with the call.\n   520 - Endpoint is restarting.\n        Situation:\
    \ This is normally a transient error in which error\n        code 405 SHOULD be\
    \ used.  Gateways SHOULD not use this error\n        code unless there is some\
    \ relevant situation that warrants the\n        category of \"Service Failure\"\
    .  Note that this was included in\n        [1] only to maintain backwards compatibility\
    \ with previous\n        releases of the MGCP specification.\n        Category:\
    \    If it is returned, this return code will be treated\n        as category\
    \ \"Service Failure\", i.e., as if this endpoint is\n        out-of-service.\n\
    \   521 - Endpoint re-directed to another Call Agent.\n        Response valid\
    \ for: RestartInProgress.\n        Situation:   A RestartInProgress command was\
    \ sent to the Call\n        Agent and the Call Agent returns this return code\
    \ along with a\n        NotifiedEntity parameter pointing to another Call Agent.\
    \  The\n        gateway then sends a new RestartInProgress command to the Call\n\
    \        Agent specified in the Notified Entity.\n        Category:    none (specific\
    \ situation and behavior).\n   522 - No such event or signal.\n        Response\
    \ valid for:    NotificationRequest.\n        Situation:   This is returned if\
    \ the requested event/signal name\n        is not registered with this package.\
    \  If on the other hand the\n        signal or event is part of the package but\
    \ is not supported by\n        the gateway, then return code 512 or 513 SHOULD\
    \ be provided\n        instead.  If the package is not supported, return code\
    \ 518\n        SHOULD be returned.\n        Category:    \"Provisioning Mismatch\"\
    .\n   523 - Unknown action or illegal combination of actions.\n        Response\
    \ valid for: NotificationRequest with one or more\n        requested events.\n\
    \        Situation:   Request was made with a requested event(s) that\n      \
    \  included an action or actions defined in [1] that are either\n        unknown,\
    \ unsupported or an illegal combination as indicated in\n        section 2.3.3\
    \ of [1].  Note that unsupported extension actions\n        should generate error\
    \ code 518 (unsupported package).\n        Category:    \"Provisioning Mismatch\"\
    .\n   524 - Internal inconsistency in Local Connection Options\n        Response\
    \ valid for:    CreateConnection, ModifyConnection.\n        Situation:   This\
    \ is returned if one or more of the\n        LocalConnectionOptions (LCO) parameters\
    \ are coded with values\n        that are not consistent with each other (e.g.,\
    \ other LCO\n        parameters inconsistent with the network type).\n       \
    \ Category:    \"Provisioning Mismatch\".\n   525 - Unknown extension in Local\
    \ Connection Options.\n        Response valid for: CreateConnection, ModifyConnection.\n\
    \        Situation: This is returned if the request contains a Local\n       \
    \ Connection Option with one or more unrecognized mandatory (\"x+\")\n       \
    \ extensions.  Note that unsupported package extensions should use\n        error\
    \ code 518 (unsupported package) instead.\n        Category: \"Provisioning Mismatch\"\
    .\n   526 - Insufficient bandwidth\n        Response valid for:    CreateConnection,\
    \ ModifyConnection.\n        Situation:   In most cases where there is insufficient\n\
    \        bandwidth, a 404 return code should be used.  526 would be used\n   \
    \     in cases where future requests are destined to fail.  An example\n     \
    \   might be a very restricted bandwidth case, where there is not\n        enough\
    \ bandwidth available for the codec requested even for a\n        single endpoint.\
    \  Making a request with the same codec in the\n        future will fail.  However,\
    \ making a request for some other\n        codec (with a higher degree of compression)\
    \ may pass.  For\n        cases, where the bandwidth is pooled over multiple endpoints\
    \ and\n        could free up at some future time (because an endpoint becomes\n\
    \        inactive), then 404 is more appropriate.\n        Category:    If it\
    \ is returned, this return code will be treated\n        as category \"Provisioning\
    \ Mismatch\", e.g., the codec was\n        incorrectly provisioned for the bandwidth\
    \ available.\n   527 - Missing RemoteConnectionDescriptor.\n        Response valid\
    \ for: CreateConnection, ModifyConnection,\n        NotificationRequest.\n   \
    \     Situation: This is returned if the connection has not yet\n        received\
    \ a RemoteConnectionDescriptor when one is required to\n        support the request.\
    \  This can for example happen if a\n        connection is attempted to be placed\
    \ in \"send/receive mode\", or\n        if a signal is applied on a connection.\n\
    \        Category:    \"Remote Connection Descriptor Error\" in the case\n   \
    \     where the other end did not provide a connection descriptor.\n        Alternatively,\
    \ if this is an initial request made by a Call\n        Agent (such there is no\
    \ remote connection descriptor), then this\n        is a \"State Mismatch\" problem.\n\
    \   528 -Incompatible protocol version\n        Response valid for:    Any command.\n\
    \        Situation:   A command was received with a protocol version that\n  \
    \      was not supported.\n        Category:    \"Provisioning Mismatch\".  This\
    \ could also be\n        treated as a \"State Mismatch\" problem if the there\
    \ is a recovery\n        mechanism (e.g., Call Agent recognizes the protocol version\n\
    \        mismatch and switches to the correct protocol version)\n   529 - Internal\
    \ Hardware Error.\n        Response valid for:    Any command.\n        Situation:\
    \ A hardware fault occurred during the execution of a\n        command such that\
    \ repeating this command will result in a\n        failure indication once again.\
    \  This is a slightly more specific\n        error code than error 502, although\
    \ more commentary should be\n        provided (for debug purposes) if possible.\n\
    \        Category: \"Service Failure\".\n   530 - CAS Signaling Protocol Error.\n\
    \        Response valid for:    NotificationRequest.\n        Situation:   This\
    \ is specific to Channel Associated Signaling\n        (CAS) interfaces.  A typical\
    \ example might be an attempt to\n        outpulse digits failed for some reason.\n\
    \        Category:    none (specific situation and behavior).\n   531 - Failure\
    \ of a grouping of trunks (e.g., facility failure)\n        Response valid for:\
    \    CreateConnection, ModifyConnection,\n        NotificationRequest.\n     \
    \   Situation:   Request made to an endpoint that has a failed trunk\n       \
    \ connection (e.g., T1 or E1 failed).  Note that an RSIP should\n        have\
    \ been sent as a result of the facility failure.  This is a\n        more specific\
    \ response than return code 501.\n        Category:    \"Service Failure\".\n\
    \   532 - Unsupported value(s) in Local Connection Options.\n        Response\
    \ valid for: CreateConnection, ModifyConnection.\n        Situation:   This is\
    \ returned if one or more of the\n        LocalConnectionOptions parameters are\
    \ coded with a value that\n        the gateway does not support.\n        Category:\
    \    \"Provisioning Mismatch\".\n   533 - Response too large\n        Response\
    \ valid for:    Any command.\n        Situation: This would only be likely to\
    \ occur in the case of an\n        audit where the maximum response packet size\
    \ would end up being\n        too large.\n        Category:    none (specific\
    \ situation and behavior).\n   534 - Codec negotiation failure\n        Response\
    \ valid for: CreateConnection, ModifyConnection.\n        Situation:   The intersection\
    \ between the list of codecs that\n        the gateway supports, the codecs allowed\
    \ by the local connection\n        options and the codecs supplied in the Remote\
    \ Connection\n        Descriptor (if provided) is empty.\n        Category:  \
    \  \"Provisioning Mismatch\" if the error resulted from\n        an empty approved\
    \ list of codes as described in [1], Section\n        2.6).  \"Remote Connection\
    \ Descriptor Error\" if the error\n        resulted from an empty negotiated list\
    \ of codecs, as described\n        in [1], Section 2.6.\n   535 - Packetization\
    \ period not supported\n        Response valid for:    CreateConnection, ModifyConnection.\n\
    \        Situation:   Normally this error should not be generated since\n    \
    \    if the gateway is unable to support the packetization period\n        specified\
    \ in the local connection options for the codec\n        indicated, it should\
    \ follow the behavior specified in [1] (which\n        is to pick an appropriate\
    \ value rather than failing the\n        request).\n        Category:    \"none\"\
    .\n   536 - Unknown or unsupported Restart Method\n        Response valid for:\
    \ RestartInProgress.\n        Situation:   This error is generated by the Call\
    \ Agent if it\n        receives a RestartInProgress command with an unsupported\
    \ restart\n        method.  Note that if the restart method is an extension restart\n\
    \        method, error code 518 (unsupported package) should be used\n       \
    \ instead.\n        Category:    \"Provisioning Mismatch\".\n   537 - Unknown\
    \ or unsupported digit map extension\n        Response valid for: NotificationRequest.\n\
    \        Situation:   Digit map letter in the digit map unknown or\n        unsupported.\
    \  Note that this code does apply to extension digit\n        map letters as well.\n\
    \        Category:    \"Provisioning Mismatch\".\n   538 - Event/signal parameter\
    \ error\n        Response valid for:    NotificationRequest.\n        Situation:\
    \   It is returned if the event/signal parameter is in\n        error or not supported.\
    \  If the event/signal or a package is not\n        supported, then one of 512,\
    \ 513, 518, or 522 should be used\n        instead.\n        Category:    \"Provisioning\
    \ Mismatch\".\n   539 - Invalid or unsupported command parameter\n        Response\
    \ valid for:    Any command.\n        Situation: This is returned if the command\
    \ contains an invalid\n        or unsupported parameter, which is neither a package\
    \ (which\n        would use return code 518) nor vendor specific extension (which\n\
    \        would use return code 511).  For example, if an endpoint does\n     \
    \   not support the BearerInformation parameter of the\n        EndpointConfiguration\
    \ command, this return code could be used.\n        Of course, such an implementation\
    \ would not conform to [1].\n        Category:    \"Provisioning Mismatch\".\n\
    \   540 - Per endpoint connection limit exceeded\n        Response valid for:\
    \ CreateConnection.\n        Situation:   A CreateConnection command was made,\
    \ but the\n        gateway cannot support any additional connections on that\n\
    \        endpoint.\n        Category:    \"State Mismatch\".\n   541 - Invalid\
    \ or unsupported Local Connection Options\n        Response valid for:    CreateConnection,\
    \ ModifyConnection.\n        Situation:   This is returned if the command contains\
    \ an invalid\n        or unsupported LocalConnectionOption, which is neither a\
    \ package\n        (which would use return code 518) nor vendor specific extension\n\
    \        (which would use return code 511).\n        Category: \"Provisioning\
    \ Mismatch\".\n"
- title: 2.3.  Summary of Return Code Categories
  contents:
  - "2.3.  Summary of Return Code Categories\n   A summary of the categories of the\
    \ various error codes is included in\n   the following table.  This information\
    \ is also repeated in the\n   detailed error descriptions in the next section.\n\
    \    ------------------------------------------------------------------\n   |\
    \  Category   | Return Codes                                       |\n   |-------------|----------------------------------------------------|\n\
    \   |   normal    | 000, 100, 101, 200, 250                            |\n   |-------------|----------------------------------------------------|\n\
    \   |    none     | 405, 407, 410, 510, 521, 530, 533, 535             |\n   |-------------|----------------------------------------------------|\n\
    \   | \"Service    | 501, 502, 520, 529, 531                            |\n  \
    \ |  Failure\"   |                                                    |\n   |-------------|----------------------------------------------------|\n\
    \   |\"Provisioning| 500, 503*, 504, 507, 508, 510, 511, 512, 513, 514, |\n  \
    \ | Mismatch\"   | 517, 518, 522, 523, 524, 525, 526, 528*, 532, 534*,|\n   |\
    \             | 536, 537, 538, 539, 541                            |\n   |-------------|----------------------------------------------------|\n\
    \   | \"Temporary  | 400, 403, 404*, 405, 406, 409                      |\n  \
    \ |  Failure\"   |                                                    |\n   |-------------|----------------------------------------------------|\n\
    \   | \"State      | 401, 402, 515, 516, 519, 540                       |\n  \
    \ |  Mismatch\"  |                                                    |\n   |-------------|----------------------------------------------------|\n\
    \   | \"Remote     | 505, 506, 509, 527*                                |\n  \
    \ |  Connection |                                                    |\n   | \
    \ Descriptor |                                                    |\n   |  Error\"\
    \     |                                                    |\n    ------------------------------------------------------------------\n\
    \   Notes:\n   *  404: may be treated as a \"Temporary Failure\", but specific\n\
    \      behavior is possible (e.g., trying an alternate codec with lower\n    \
    \  bandwidth requirement rather than failing this call).\n   *  503: rather than\
    \ treating this as a \"Provisioning Mismatch\", it is\n      possible for the\
    \ Call Agent to recover from this error.\n   *  527: See the detailed description\
    \ for this error code in section\n      2.2. This could be treated as a \"State\
    \ Mismatch\" depending on the\n      circumstances.\n   *  528: See the detailed\
    \ description for this error code in section\n      2.2. This could be treated\
    \ as a \"State Mismatch\" depending on the\n      circumstances.\n   *  534: See\
    \ the note on error code 534 in the detailed description\n      section (2.2)\
    \ of this document (may be treated as a \"Remote\n      Connection Descriptor\
    \ Error\" if no local connection options were\n      supplied).\n"
- title: 3.  Additional Guidelines
  contents:
  - "3.  Additional Guidelines\n   This section provides additional guidelines to\
    \ Gateway and Call Agent\n   developers.\n"
- title: 3.1. Gateway Recommendations
  contents:
  - "3.1. Gateway Recommendations\n   The following guidelines are recommended for\
    \ gateway implementations:\n   *  For uncategorized return codes (category \"\
    none\") that involve\n      specific situations, gateways should make sure they\
    \ do an accurate\n      mapping between the situation and the return code.\n \
    \  *  Also for category \"State Mismatch\", it is equally important that\n   \
    \   the situation (and state) is accurately mapped to the specific\n      error\
    \ code.\n   *  For situations similar to those involving return codes in \"Service\n\
    \      Failure\", Provisioning Mismatch\", \"Temporary Failure\" and \"Remote\n\
    \      Connection Descriptor Error\" categories, the gateway should make\n   \
    \   sure that it uses a return code in the correct category.\n   *  MGCP allows\
    \ additional commentary to be included with the return\n      code. It is important\
    \ that the gateway includes more specific\n      information concerning the situation\
    \ for debug purposes.\n   *  It is recommended that return codes 502, 520 and\
    \ 526 not be used\n      unless there is something that makes these permanent\
    \ situations.\n      As indicated in the detailed description of these return\
    \ codes,\n      403, 405 and 404 respectively are more appropriate in almost all\n\
    \      situations. If a gateway presently uses 502, 520 and 526 for\n      temporary\
    \ situations and expects to upgrade to 403, 405 and 404,\n      the gateway should\
    \ refrain from using 502, 520 and 526 for some\n      other use immediately after\
    \ the upgrade. This is to avoid problems\n      where a Call Agent is expected\
    \ to treat the same error code in two\n      different ways, e.g., 403 is a category\
    \ \"Temporary Failure\" which\n      requires a different Call Agent behavior\
    \ from 502 which is in\n      category \"Service Failure\".\n"
- title: 3.2.  Call Agent Recommendations
  contents:
  - "3.2.  Call Agent Recommendations\n   The following guidelines are recommended\
    \ for gateway implementations:\n   *  Call Agents should handle return codes they\
    \ do not recognize (or\n      do not expect) based on the first digit in the return\
    \ code as\n      outlined in [1].\n   *  For categories \"Service Failure\", \"\
    Provisioning Mismatch\",\n      \"Temporary Failure\", and \"Remote Connection\
    \ Descriptor Error\",\n      Call Agents are expected to treat return codes that\
    \ are within the\n      same category in the same way (i.e., make the same decision,\
    \ based\n      on the return code and other state information available to them).\n\
    \   *  Because there was little guidance given for return codes 502, 520\n   \
    \   and 526 in RFC 2705 [4], Call Agents may have to treat these as\n      403,\
    \ 405 and 404 respectively for gateways that have not been\n      updated according\
    \ to [1] and these recommendations. The gateway\n      implementer should be consulted\
    \ for information on the gateway\n      behavior for (now and in the future) for\
    \ these return codes (i.e.,\n      it may be that return codes 502, 520 and 526\
    \ are presently used\n      incorrectly but will be replaced with 403, 405 and\
    \ 404 in the\n      future).\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document merely provides a convenient way\
    \ to categorize MGCP\n   return codes in order to facilitate decisions related\
    \ to failure\n   conditions; it does not impact MGCP security in any way.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   Thanks also to Kevin Miller, Joe Stone, Flemming Andreasen,\
    \ Bob\n   Biskner for input contributions used in this document.\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [1]  Andreasen, F. and B. Foster, \"Media Gateway\
    \ Control Protocol\n        (MGCP) Version 1.0\", RFC 3435, January 2003.\n  \
    \ [2]  Foster, B. and F. Andreasen, \"Basic Media Gateway Control\n        Protocol\
    \ (MGCP) Packages\", RFC 3660, December 2003.\n   [3]  Handley, M. and V. Jacobson,\
    \ \"SDP: Session Description\n        Protocol\", RFC 2327, April 1998.\n   [4]\
    \  Arango, M., Dugan, A., Elliott, I., Huitema, C. and S. Pickett,\n        \"\
    Media Gateway Control Protocol (MGCP) Version 1.0\", RFC 2705,\n        October\
    \ 1999.\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n   C. Sivachelvan\n   Cisco Systems\n   2200 East President\
    \ George Bush Turnpike\n   Richardson, TX, 75082\n   EMail: chelliah@cisco.com\n\
    \   B. Foster\n   Cisco Systems\n   EMail: bfoster@cisco.com\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
