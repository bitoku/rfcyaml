- contents:
  - '                  An Echo Function for CLNP (ISO 8473)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo defines an echo function for the connection-less network\n
    \  layer protocol.  The mechanism that is mandated here is in the final\n   process
    of being standardized by ISO as \"Amendment X: Addition of an\n   Echo function
    to ISO 8473\" an integral part of Version 2 of ISO 8473.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   Section 1. Conventions .................................
    \   2\n   Section 2. Introduction ................................    2\n   Section
    3. The Generic Echo Function ...................    3\n   Section 3.1 The Echo-Request
    ...........................    3\n   Section 3.2 The Echo-Response ..........................
    \   3\n   Section 4. The Implementation Mechanism ................    4\n   Section
    4.1 The Echo-Request ...........................    4\n   Section 4.2 The Echo-Response
    ..........................    4\n   Section 5. Implementation Notes ........................
    \   4\n   Section 5.1 Discarding Packets .........................    4\n   Section
    5.2 Error Report Flag ..........................    4\n   Section 5.3 Use of the
    Lifetime Field ..................    5\n   Section 5.4 Echo-request function ......................
    \   5\n   Section 5.5 Echo-response function .....................    6\n   Section
    5.6 Use of the Priority Option .................    8\n   Section 5.7 Use of the
    Source Route Option .............    8\n   Section 5.8 Transmission of Multiple
    Echo-Requests .....    9\n   Section 6. Security Considerations .....................
    \   9\n   Section 7. Authors' Addresses ..........................    9\n   Section
    8. References ..................................    9\n"
  title: Table of Contents
- contents:
  - "1.  Conventions\n   The following language conventions are used in the items
    of\n   specification in this document:\n      o MUST, SHALL, or MANDATORY -- the
    item is an absolute\n        requirement of the specification.\n      o SHOULD
    or RECOMMENDED -- the item should generally be followed\n        for all but exceptional
    circumstances.\n      o MAY or OPTIONAL -- the item is truly optional and may
    be\n        followed or ignored according to the needs of the implementor.\n"
  title: 1.  Conventions
- contents:
  - "2.  Introduction\n   The OSI Connection-less network layer protocol (ISO 8473)
    defines a\n   means for transmitting and relaying data and error protocol data\n
    \  units, (PDUs) or preferably, packets through an OSI internet.\n   Unfortunately,
    the world that these packets travel through is\n   imperfect.  Gateways and links
    may fail.  This memo defines an echo\n   function to be used in the debugging
    and testing of the OSI network\n   layer.  Hosts and routers which support the
    OSI network layer MUST be\n   able to originate an echo packet as well as respond
    when an echo is\n   received.\n   Network management protocols can be used to
    determine the state of a\n   gateway or link.  However, since these protocols
    themselves utilize a\n   protocol that may experience packet loss, it cannot be
    guaranteed\n   that the network management applications can be utilized.  A simple\n
    \  mechanism in the network layer is required so that systems can be\n   probed
    to determine if the lowest levels of the networking software\n   are operating
    correctly.  This mechanism is not intended to compete\n   with or replace network
    management; rather it should be viewed as an\n   addition to the facilities offered
    by network management.\n   The code-path consideration requires that the echo
    path through a\n   system be identical (or very close) to the path used by normal
    data.\n   An echo path must succeed and fail in unison with the normal data\n
    \  path or else it will not provide a useful diagnostic tool.\n   Previous drafts
    describing an echo function for CLNP offered two\n   implementation alternatives
    (see RFC 1139).  Although backward\n   compatibility is an important consideration
    whenever a change is made\n   to a protocol, it is more important at this point
    that the echo\n   mechanisms used on the Internet interoperate.  For this reason,
    this\n   memo defines one implementation mechanism (consistent with one of the\n
    \  previous drafts).\n"
  title: 2.  Introduction
- contents:
  - "3.  The Generic Echo Function\n   The following section describes the echo function
    in a generic\n   fashion.  This memo defines an echo-request entity.  The function
    of\n   the echo-request entity is to accept an incoming echo-request packet,\n
    \  perform some processing, and generate an echo-response packet.  The\n   echo
    implementation may be thought of as an entity that coexists with\n   the network
    layer.  Subsequent sections will detail the\n   implementation mechanism.\n   For
    the purposes of this memo, the term \"ping\" shall be used to mean\n   the act
    of transmitting an echo-request packet to a remote system\n   (with the expectation
    that an echo-response packet will be sent back\n   to the transmitter).\n"
  title: 3.  The Generic Echo Function
- contents:
  - "3.1.  The Echo-Request\n   When a system decides to ping a remote system, an
    echo-request is\n   built.  All fields of the packet header are assigned normal
    values\n   (see implementation specific sections for more information).  The\n
    \  address of the system to be pinged is inserted as the destination\n   NSAP
    address.  The rules of segmentation defined for a data (DT)\n   packet also apply
    to the echo-request packet.\n   The echo-request is switched through the network
    toward its\n   destination.  (An echo packet must follow the same path as CLNP
    data\n   packet with the same options in the CLNP header.)  Upon reaching the\n
    \  destination system, the packet is processed according to normal\n   processing
    rules.  At the end of the input processing, the echo-\n   request packet is delivered
    to the echo-request entity.\n   The echo-request entity will build and dispatch
    the echo-response\n   packet.  This is a new packet.  Except as noted below, this
    second\n   packet is built using the normal construction procedures.  The\n   destination
    address of the echo-response packet is taken from the\n   source address of the
    echo-request packet.  Most options present in\n   the echo-request packet are
    copied into the echo-response packet (see\n   implementation notes for more information).\n"
  title: 3.1.  The Echo-Request
- contents:
  - "3.2.  The Echo-Response\n   The entire echo-request packet is included in the
    data portion of the\n   echo-response packet.  This includes the echo-request
    packet header\n   as well as any data that accompanies the echo-request packet.
    \ The\n   entire echo-request packet is included in the echo-response so that\n
    \  fields such as the echo-request lifetime may be examined when the\n   response
    is received.  After the echo-response packet is built, it is\n   transmitted toward
    the new destination (the original source of the\n   echo-request).  The rules
    of segmentation defined for a data packet\n   also apply to the echo-response
    packet.\n   The echo-response packet is relayed through the network toward its\n
    \  destination. (A echo response packet must follow the same path as a\n   CLNP
    data packet with the same options in the CLNP header.)  Upon\n   reaching its
    destination, it is processed by the packet input\n   function and delivered to
    the entity that created the echo-request.\n"
  title: 3.2.  The Echo-Response
- contents:
  - "4.  The Implementation Mechanism\n   The implementation mechanism defines two
    new 8473 packet types: ERQ\n   (echo-request) and ERP (echo-response).  With the
    exception of a new\n   type code, these packets will be identical to the date
    packet in\n   every respect.\n"
  title: 4.  The Implementation Mechanism
- contents:
  - "4.1.  The Echo-Request\n   The type code for the echo-request packet is decimal
    30.\n"
  title: 4.1.  The Echo-Request
- contents:
  - "4.2.  The Echo-Response\n   The type code for the echo-response packet is decimal
    31.\n"
  title: 4.2.  The Echo-Response
- contents:
  - "5.  Implementation Notes\n   The following notes are an integral part of memo.
    \ It is important\n   that implementors take heed of these points.\n"
  title: 5.  Implementation Notes
- contents:
  - "5.1.  Discarding Packets\n   The rules used for discarding a data packet (ISO
    8473, Section 6.9 -\n   Section 6.10) are applied when an echo-request or echo-response
    is\n   discarded.\n"
  title: 5.1.  Discarding Packets
- contents:
  - "5.2.  Error Report Flag\n   The error report flag may be set on the echo-request
    packet, the\n   echo-response packet, or both.  If an echo-request is discarded,
    the\n   associated error-report (ER) packet will be sent to the echo-request\n
    \  source address on the originating machine.  If an echo-response is\n   discarded,
    the associated error-report packet will be sent to the\n   echo-response source
    address.  In general, this will be the\n   destination address of the echo-request
    entity.  It should be noted\n   that the echo-request entity and the originator
    of the echo-request\n   packet are not required to process error-report packets.\n"
  title: 5.2.  Error Report Flag
- contents:
  - "5.3.  Use of the Lifetime Field\n   The lifetime field of the echo-request and
    echo-response packets\n   should be set to the value normally used for a data
    packet.  Note:\n   although this memo does not prohibit the generation of a packet
    with\n   a smaller-than-normal lifetime field, this memo explicitly does not\n
    \  attempt to define a mechanism for varying the lifetime field set in\n   the
    echo-response packet.  This memo recommends the lifetime value\n   that would
    under normal circumstances by used when sending a data\n   packet.\n"
  title: 5.3.  Use of the Lifetime Field
- contents:
  - "5.4.  Echo-request function\n   This function is invoked by system management
    to obtain information\n   about the dynamic state of the Network layer with respect
    to (a) the\n   reachability of specific network-entities, and (b) the\n   characteristics
    of the path or paths that can be created between\n   network-entities through
    the operation of Network layer routing\n   functions.  When invoked, the echo-request
    function causes an echo-\n   request (ERQ) packet to be created.  The echo-request
    packet shall be\n   constructed and processed by ISO 8473 network-entities in
    end systems\n   and intermediate systems in exactly the same way as the data packet,\n
    \  with the following caveats:\n      a) The information available to the packet
    composition function\n      (ISO 8473) consists of current state, local information,
    and\n      information supplied by system management.\n      b) The source and
    destination address fields of the echo-request\n      packet shall contain, respectively,
    a Network entity title (NET)\n      of the originating network-entity and a Network
    entity title of\n      the destination network-entity (which may be in either
    an end\n      system or an intermediate system).  NOTE: A Network entity title\n
    \     is syntactically indistinguishable from an NSAP address.  The\n      additional
    information in an NSAP address, if any, beyond that\n      which is present in
    a Network entity title, is relevant only to\n      the operation of the packet
    decomposition function in a\n      destination end system, and therefore is not
    needed for the\n      processing of an echo-request packet (from which no N-UNITDATA\n
    \     indication is ever produced).  The fact that the source and\n      destination
    address fields of the echo-request packet contain NETs\n      rather than NSAP
    addresses therefore does not affect the\n      processing of an echo-request packet
    by any network-entity.\n      c) When an echo-request packet has reached its destination,
    as\n      determined by the Header processing (call HEADER FORMAT Analysis\n      function
    in ISO 8473), the echo-response function shall handle\n      this Network Protocol
    Data Units (NPDU) instead of the packet\n      decomposition function.  In ISO
    8473, the packet decomposition\n      function is like a decomposing fish on the
    sea shore - it takes a\n      packet down to its bare bones and processes it.\n
    \     Also, it is up to each individual system whether or not handling\n      echo-request
    packets involves system management.  One example of\n      involving system management
    is the reporting reception of the echo\n      packets as some systems do with
    the ping packet.  Some systems\n      find this of value if they are being pinged
    to death.\n      d) The maximum length of the echo-request packet is equal to
    the\n      maximum length of the echo-response packet minus the maximum\n      length
    of the echo-response packet header.  This ensures that the\n      entire echo-request
    packet can be contained within the data field\n      of the echo-response packet
    (see ISO 8473).\n      e) The data part of the echo-request packet may, as a local\n
    \     matter, contain zero or more octets with any values that fit\n      within
    the echo-request packet. (see (d) above for maximum length\n      of the echo-request
    packet). If the first octet of data is binary\n      1000 0001, then an echo-response
    header is contained in the echo-\n      request packet.  The existence of this
    header insures that a\n      router can formulate a standard echo-response packet.\n
    \  Normally, the \"more segmentation\" flag in the encapsulated echo-\n   response
    packet header shall be zero, and the segmentation portion of\n   the encapsulated
    packet shall not be included.  The segmentation\n   length in the echo-response
    packet header shall be zero.\n   If the \"more segmentation\" flag is set in the
    encapsulated echo-\n   response packet header, then a segmentation length shall
    be filled in\n   and the segmentation part of the echo-response packet header
    will be\n   present in the echo-response header.  This same segmentation function\n
    \  shall be present in the echo-response sent by the router.\n   NOTE: However,
    this formulated echo-response is not required between\n   any two systems.  With
    a common format for an echo-request packet\n   used in an environment such as
    the Internet, the echo-response header\n   may not be needed, and may in fact
    be unnecessary overhead.\n"
  title: 5.4.  Echo-request function
- contents:
  - "5.5.  Echo-response function\n   This function is performed by a network-entity
    when it has received\n   an echo-request packet that has reached its destination,
    as\n   determined by the Header format analysis function (ISO 8473 clause\n   6.3)
    that is, an echo-request packet which contains, in its\n   destination address
    field, a Network entity title that identifies the\n   network-entity.  When invoked,
    the echo-response function causes an\n   echo-response (ERP) packet to be created.
    \ The echo-response packet\n   shall be constructed and processed by ISO 8473
    network-entities in\n   end systems and intermediate systems in exactly the same
    way as the\n   data packet, with the following caveats:\n      a) The information
    available to the packet composition function\n      consists of current state,
    local information, and information\n      contained in the corresponding echo-request
    packet.\n      b) The source address field of the echo-response packet shall\n
    \     contain the value of the destination address field of the\n      corresponding
    echo-request packet.  The destination address field\n      of the echo-response
    packet shall contain the value of the source\n      address field of the corresponding
    echo-request packet.\n      c) The echo-request packet, in its entirety, shall
    be placed into\n      the data part of the echo-response packet.  The data part
    of the\n      echo-response packet shall contain only the corresponding echo-\n
    \     request packet.\n      d) If the data part of the echo-request packet contains
    an echo-\n      response header, the packet composition function may, but is not\n
    \     required to, use some or all of the information contained therein\n      to
    select values for the fields of the echo-response packet\n      header.  In this
    case, however, the value of the lifetime field\n      contained in the echo-response
    packet header in the echo-request\n      packet data part must be used as the
    value of the lifetime field\n      in the echo-response packet.  The values of
    the segment length and\n      checksum fields shall be computed by the network-entity
    regardless\n      of the contents of those fields in the echo-response packet
    header\n      in the data part of the echo-request packet.\n      e) The options
    part of the echo-response packet may contain any\n      (or none) of the options
    described in ISO 8473 (but see Section\n      5.7 of this RFC).  The values for
    these options, if present, are\n      determined by the network-entity as a local
    matter.  They may be,\n      but are not required to be, either identical to or
    derived from\n      the corresponding options in the echo-request packet and/or
    the\n      echo-response packet header contained in the data part of the\n      echo-request
    packet (if present).  The source routing option in\n      the echo-response packet
    shall not be identical to (copied from)\n      the source routing option in the
    echo-request packet header.  If\n      the recording of route option in the echo-response
    packet is\n      identical to (copied from) the recording of route option in the\n
    \     echo-request packet header, the second octet of the parameter\n      value
    field shall be set to the value 3.\n      f) It is a local matter whether or not
    the destination network-\n      entity performs the lifetime control function
    on an echo-request\n      packet before performing the echo-response function.
    \ The\n      destination network-entity shall make the same decision in this\n
    \     regard that it would make, as a local matter, for a data packet in\n      accordance
    with ISO 8473.\n"
  title: 5.5.  Echo-response function
- contents:
  - "5.6.  Use of the Priority Option\n      The 8473 priority function indicates
    the relative priority of\n      packet.  0 is normal and 14 is the highest.  Packets
    with higher\n      values will be transmitted before lower values.  The specific\n
    \     action upon receiving a 8473 packet with the priority field set is\n      a
    \"LOCAL MATTER\".  These means, any two systems could do it\n      differently.\n
    \     Hopefully, in the future, Internet routers will handle this as a\n      priority
    queueing function.  Some implementors consider the\n      priority queueing function
    to be a cap.  For example, if a router\n      is congested, all those packets
    with priorities higher than 20,\n      will be allowed through, and those with
    priority less than 20 will\n      be dropped.\n      In short, the basic function
    of priority has wide latitude in the\n      ISO specification.  This wide latitude
    of implementation needs to\n      be narrowed for implementations within a common
    network\n      environment such as the Internet.  The 8473 priority function is\n
    \     rarely implemented in today's Internet.  The transmission of an\n      echo-request
    packet with a priority set may provided unexcepted\n      results until a more
    wide spread deployment of the priority\n      feature in 8473 capable routers
    and end systems.\n      However, if the priority function must be used it is the
    safest\n      value may be the value 0 - which indicates Normal priority.  It\n
    \     most likely this value will follow the 8473 pathways.\n      In the future,
    as the implementation of the priority function\n      further Internet documents
    will need to deal with its expected\n      use.\n"
  title: 5.6.  Use of the Priority Option
- contents:
  - "5.7.  Use of the Source Route Option\n      Use of the source route option in
    ISO 8473 may cause packets to\n      loop until their lifetime expires.  For this
    reason, this memo\n      recommends against the use of the source route option
    in either an\n      echo-request or echo-response packets.  If the source route
    option\n      is used to specify the route that the echo-request packet takes\n
    \     toward its destination, this memo does not recommend the use of an\n      automatically
    generated source route on the echo-response packet.\n"
  title: 5.7.  Use of the Source Route Option
- contents:
  - "5.8.  Transmission of Multiple Echo-Requests\n      The echo function may be
    utilized by more than one process on any\n      individual machine.  The mechanism
    by which multiple echo-requests\n      and echo-responses are correlated between
    multiple processes on a\n      single machine is a local matter and not defined
    by this memo.\n"
  title: 5.8.  Transmission of Multiple Echo-Requests
- contents:
  - "6.  Security Considerations\n      Security issues are not discussed in this
    memo.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Authors' Addresses\n      Susan K. Hares\n      MERIT/NSFNET\n      Internet
    Engineering\n      1075 Beal Avenue\n      Ann Arbor, MI 48109-2112\n      Phone:
    (313) 936-3000\n      EMail: skh@merit.edu\n      Cathy J. Wittbrodt\n      Stanford
    University/BARRNet\n      Networking Systems\n      Pine Hall 115\n      Stanford,
    CA 94305\n      Phone: (415) 725-5481\n      EMail: cjw@magnolia.Stanford.EDU\n"
  title: 7.  Authors' Addresses
- contents:
  - "8.  References\n   [1] ISO/IEC.  Protocol for Providing the Connectionless-mode
    Network\n       Service.  International Standard 8473, ISO/IEC JTC 1,\n       Switzerland,
    1986.\n   [2] Hagens, R., \"An Echo Function for ISO 8473\", RFC 1139, IETF-OSI\n
    \      Working Group, January 1990.\n   [3] ISO 8473-1993 Protocol for providing
    the connectionless-mode\n       network service, edition 2 (IS under preparation).\n"
  title: 8.  References
