- contents:
  - '          Diameter Agent Overload and the Peer Overload Report

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification documents an extension to the Diameter Overload\n
    \  Indication Conveyance (DOIC), a base solution for Diameter overload\n   defined
    in RFC 7683.  The extension defines the Peer Overload report\n   type.  The initial
    use case for the peer report is the handling of\n   occurrences of overload of
    a Diameter Agent.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8581.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Requirements Language . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  Terminology and Abbreviations . . . . . . . . . . . . . . .
    .   4\n   4.  Peer-Report Use Cases . . . . . . . . . . . . . . . . . . . .   5\n
    \    4.1.  Diameter Agent Overload Use Cases . . . . . . . . . . . .   5\n       4.1.1.
    \ Single Agent  . . . . . . . . . . . . . . . . . . . .   5\n       4.1.2.  Redundant
    Agents  . . . . . . . . . . . . . . . . . .   6\n       4.1.3.  Agent Chains  .
    . . . . . . . . . . . . . . . . . . .   7\n     4.2.  Diameter Endpoint Use Cases
    . . . . . . . . . . . . . . .   8\n       4.2.1.  Hop-by-Hop Abatement Algorithms
    . . . . . . . . . . .   8\n   5.  Interaction Between Host/Realm and Peer Overload
    Reports  . .   9\n   6.  Peer-Report Behavior  . . . . . . . . . . . . . . . .
    . . . .   9\n     6.1.  Capability Announcement . . . . . . . . . . . . . . .
    . .   9\n       6.1.1.  Reacting-Node Behavior  . . . . . . . . . . . . . . .
    \  9\n       6.1.2.  Reporting-Node Behavior . . . . . . . . . . . . . . .   9\n
    \    6.2.  Peer Overload Report Handling . . . . . . . . . . . . . .  10\n       6.2.1.
    \ Overload Control State  . . . . . . . . . . . . . . .  10\n       6.2.2.  Reporting-Node
    Maintenance of Peer-Report OCS . . . .  11\n       6.2.3.  Reacting-Node Maintenance
    of Peer-Report OCS  . . . .  12\n       6.2.4.  Peer-Report Reporting-Node Behavior
    . . . . . . . . .  13\n       6.2.5.  Peer-Report Reacting-Node Behavior  . .
    . . . . . . .  13\n   7.  Peer-Report AVPs  . . . . . . . . . . . . . . . . .
    . . . . .  14\n     7.1.  OC-Supported-Features AVP . . . . . . . . . . . . .
    . . .  14\n       7.1.1.  OC-Feature-Vector AVP . . . . . . . . . . . . . . .
    .  15\n       7.1.2.  OC-Peer-Algo AVP  . . . . . . . . . . . . . . . . . .  15\n
    \    7.2.  OC-OLR AVP  . . . . . . . . . . . . . . . . . . . . . . .  15\n       7.2.1.
    \ OC-Report-Type AVP  . . . . . . . . . . . . . . . . .  16\n     7.3.  SourceID
    AVP  . . . . . . . . . . . . . . . . . . . . . .  16\n     7.4.  Attribute-Value
    Pair Flag Rules . . . . . . . . . . . . .  16\n   8.  IANA Considerations . .
    . . . . . . . . . . . . . . . . . . .  17\n   9.  Security Considerations . .
    . . . . . . . . . . . . . . . . .  17\n   10. References  . . . . . . . . . .
    . . . . . . . . . . . . . . .  18\n     10.1.  Normative References . . . . .
    . . . . . . . . . . . . .  18\n     10.2.  Informative References . . . . . .
    . . . . . . . . . . .  18\n   Acknowledgements  . . . . . . . . . . . . . . .
    . . . . . . . . .  18\n   Author's Address  . . . . . . . . . . . . . . . . .
    . . . . . . .  19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification documents an extension to the Diameter
    Overload\n   Indication Conveyance (DOIC), a base solution for Diameter overload\n
    \  [RFC7683].  The extension defines the Peer Overload report type.  The\n   initial
    use case for the peer report is the handling of occurrences\n   of overload of
    a Diameter Agent.\n   This document defines the behavior of Diameter nodes when
    Diameter\n   Agents enter an overload condition and send an Overload report\n
    \  requesting a reduction of traffic.  It also defines a new Overload\n   report
    type, the Peer Overload report type, which is used for\n   handling agent overload
    conditions.  The Peer Overload report type is\n   defined in a generic fashion
    so that it can also be used for other\n   Diameter overload scenarios.\n   The
    base Diameter overload specification [RFC7683] addresses the\n   handling of overload
    when a Diameter endpoint (a Diameter Client or\n   Diameter Server as defined
    in [RFC6733]) becomes overloaded.\n   In the base specification, the goal is to
    handle abatement of the\n   overload occurrence as close to the source of the
    Diameter traffic as\n   feasible.  When possible, this is done at the originator
    of the\n   traffic, generally referred to as a Diameter Client.  A Diameter\n
    \  Agent might also handle the overload mitigation.  For instance, a\n   Diameter
    Agent might handle Diameter overload mitigation when it\n   knows that a Diameter
    Client does not support the DOIC extension.\n   This document extends the base
    Diameter endpoint overload\n   specification to address the case when Diameter
    Agents become\n   overloaded.  Just as is the case with other Diameter nodes,
    i.e.,\n   Diameter Clients and Diameter Servers, surges in Diameter traffic can\n
    \  cause a Diameter Agent to be asked to handle more Diameter traffic\n   than
    it was configured to handle.  For a more detailed discussion of\n   what can cause
    the overload of Diameter nodes, refer to the Diameter\n   overload requirements
    [RFC7068].\n   This document defines a new Overload report type to communicate\n
    \  occurrences of agent overload.  This report type works for the\n   Diameter
    overload loss abatement algorithm defined in [RFC7683] and\n   is expected to
    work for other overload abatement algorithms defined\n   in extensions to the
    DOIC solution.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n"
  title: 2.  Requirements Language
- contents:
  - "3.  Terminology and Abbreviations\n   AVP\n      Attribute-Value Pair\n   Diameter
    Node\n      A Diameter Client, Diameter Server, or Diameter Agent [RFC6733]\n
    \  Diameter Endpoint\n      A Diameter Client or Diameter Server [RFC6733]\n   Diameter
    Agent\n      A Diameter node that provides relay, proxy, redirect, or\n      translation
    services [RFC6733]\n   Reporting Node\n      A DOIC node that sends an Overload
    report in a Diameter answer\n      message\n   Reacting Node\n      A DOIC node
    that receives and acts on a DOIC Overload report\n   DOIC Node\n      A Diameter
    node that supports the DOIC solution defined in\n      [RFC7683]\n"
  title: 3.  Terminology and Abbreviations
- contents:
  - "4.  Peer-Report Use Cases\n   This section outlines representative use cases
    for the peer report\n   used to communicate agent overload.\n   There are two
    primary classes of use cases currently identified:\n   those involving the overload
    of agents, and those involving the\n   overload of Diameter endpoints.  In both
    cases, the goal is to use an\n   overload algorithm that controls traffic sent
    towards peers.\n"
  - contents:
    - "4.1.  Diameter Agent Overload Use Cases\n   The peer report needs to support
      the use cases described below.\n   In the figures in this section, elements
      labeled \"c\" are Diameter\n   Clients, elements labeled \"a\" are Diameter
      Agents, and elements\n   labeled \"s\" are Diameter Servers.\n"
    - contents:
      - "4.1.1.  Single Agent\n   This use case is illustrated in Figure 1.  In this
        case, the client\n   sends all traffic through the single agent.  If there
        is a failure in\n   the agent, then the client is unable to send Diameter
        traffic toward\n   the server.\n                              +-+    +-+    +-+\n
        \                             |c|----|a|----|s|\n                              +-+
        \   +-+    +-+\n                                 Figure 1\n   A more likely
        case for the use of agents is illustrated in Figure 2.\n   In this case, there
        are multiple servers behind the single agent.\n   The client sends all traffic
        through the agent, and the agent\n   determines how to distribute the traffic
        to the servers based on\n   local routing and load distribution policy.\n
        \                                           +-+\n                                          --|s|\n
        \                             +-+    +-+ /  +-+\n                              |c|----|a|-
        \  ...\n                              +-+    +-+ \\  +-+\n                                          --|s|\n
        \                                           +-+\n                                 Figure
        2\n   In both of these cases, the occurrence of overload in the single\n   agent
        must by handled by the client similarly to as if the client\n   were handling
        the overload of a directly connected server.  When the\n   agent becomes overloaded,
        it will insert an Overload report in answer\n   messages flowing to the client.
        \ This Overload report will contain a\n   requested reduction in the amount
        of traffic sent to the agent.  The\n   client will apply overload abatement
        behavior as defined in the base\n   Diameter overload specification [RFC7683]
        or in the extension\n   document that defines the indicated overload abatement
        algorithm.\n   This will result in the throttling of the abated traffic that
        would\n   have been sent to the agent, as there is no alternative route.  The\n
        \  client sends an appropriate error response to the originator of the\n   request.\n"
      title: 4.1.1.  Single Agent
    - contents:
      - "4.1.2.  Redundant Agents\n   Figure 3 and Figure 4 illustrate a second, and
        more likely, type of\n   deployment scenario involving agents.  In both of
        these cases, the\n   client has Diameter connections to two agents.\n   Figure
        3 illustrates a client that has a primary connection to one of\n   the agents
        (agent a1) and a secondary connection to the other agent\n   (agent a2).  In
        this scenario, under normal circumstances, the client\n   will use the primary
        connection for all traffic.  The secondary\n   connection is used when there
        is a failure scenario of some sort.\n                                     +--+
        \  +-+\n                                   --|a1|---|s|\n                              +-+
        /  +--+\\ /+-+\n                              |c|-        x\n                              +-+
        .  +--+/ \\+-+\n                                   ..|a2|---|s|\n                                     +--+
        \  +-+\n                                 Figure 3\n   The second case, in
        Figure 4, illustrates the case where the\n   connections to the agents are
        both actively used.  In this case, the\n   client will have local distribution
        policy to determine the traffic\n   sent through each client.\n                                     +--+
        \  +-+\n                                   --|a1|---|s|\n                              +-+
        /  +--+\\ /+-+\n                              |c|-        x\n                              +-+
        \\  +--+/ \\+-+\n                                   --|a2|---|s|\n                                     +--+
        \  +-+\n                                 Figure 4\n   In the case where one
        of the agents in the above scenarios become\n   overloaded, the client should
        reduce the amount of traffic sent to\n   the overloaded agent by the amount
        requested.  This traffic should\n   instead be routed through the non-overloaded
        agent.  For example,\n   assume that the overloaded agent requests a reduction
        of 10 percent.\n   The client should send 10 percent of the traffic that would
        have been\n   routed to the overloaded agent through the non-overloaded agent.\n
        \  When the client has both an active and a standby connection to the\n   two
        agents, then an alternative strategy for responding to an\n   Overload report
        from an agent is to change the standby connection to\n   active.  This will
        result in all traffic being routed through the new\n   active connection.\n
        \  In the case where both agents are reporting overload, the client may\n
        \  need to start decreasing the total traffic sent to the agents.  This\n
        \  would be done in a similar fashion as that discussed in\n   Section 4.1.1.
        \ The amount of traffic depends on the combined\n   reduction requested by
        the two agents.\n"
      title: 4.1.2.  Redundant Agents
    - contents:
      - "4.1.3.  Agent Chains\n   There are also deployment scenarios where there
        can be multiple\n   Diameter Agents between Diameter Clients and Diameter
        Servers.  An\n   example of this type of deployment is when there are Diameter
        Agents\n   between administrative domains.\n   Figure 5 illustrates one such
        network deployment case.  Note that\n   while this figure shows a maximum
        of two agents being involved in a\n   Diameter transaction, it is possible
        for more than two agents to be\n   in the path of a transaction.\n                                +---+
        \    +---+   +-+\n                              --|a11|-----|a21|---|s|\n
        \                        +-+ /  +---+ \\ / +---+\\ /+-+\n                         |c|-
        \         x        x\n                         +-+ \\  +---+ / \\ +---+/ \\+-+\n
        \                             --|a12|-----|a22|---|s|\n                                +---+
        \    +---+   +-+\n                                 Figure 5\n   The handling
        of overload for one or both agents, a11 or a12 in this\n   case, is equivalent
        to that discussed in Section 4.1.2.\n   The overload of agents a21 and a22
        must be handled by the previous-\n   hop agents.  As such, agents a11 and
        a12 must handle the overload\n   mitigation logic when receiving an Agent
        Overload report from agents\n   a21 and a22.\n   The handling of Peer Overload
        reports is similar to that discussed in\n   Section 4.1.2.  If the overload
        can be addressed using diversion,\n   then this approach should be taken.\n
        \  If both of the agents have requested a reduction in traffic, then the\n
        \  previous-hop agent must start throttling the appropriate number of\n   transactions.
        \ When throttling requests, an agent uses the same error\n   responses as
        defined in the base DOIC specification [RFC7683].\n"
      title: 4.1.3.  Agent Chains
    title: 4.1.  Diameter Agent Overload Use Cases
  - contents:
    - "4.2.  Diameter Endpoint Use Cases\n   This section outlines use cases for the
      Peer Overload report\n   involving Diameter Clients and Diameter Servers.\n"
    - contents:
      - "4.2.1.  Hop-by-Hop Abatement Algorithms\n   It is envisioned that abatement
        algorithms will be defined that will\n   support the option for Diameter endpoints
        to send peer reports.  For\n   instance, it is envisioned that one usage scenario
        for the rate\n   algorithm [RFC8582] will involve abatement being done on
        a hop-by-hop\n   basis.\n   This rate-deployment scenario would involve Diameter
        endpoints\n   generating peer reports and selecting the rate algorithm for\n
        \  abatement of overload conditions.\n"
      title: 4.2.1.  Hop-by-Hop Abatement Algorithms
    title: 4.2.  Diameter Endpoint Use Cases
  title: 4.  Peer-Report Use Cases
- contents:
  - "5.  Interaction Between Host/Realm and Peer Overload Reports\n   It is possible
    for both an agent and an endpoint in the path of a\n   transaction to be overloaded
    at the same time.  When this occurs,\n   Diameter entities need to handle multiple
    Overload reports.  In this\n   scenario, the reacting node should first handle
    the throttling of the\n   overloaded Host or Realm.  Any messages that survive
    throttling due\n   to Host or Realm reports should then go through abatement for
    the\n   Peer Overload report.  In this scenario, when doing abatement on the\n
    \  peer report, the reacting node SHOULD take into consideration the\n   number
    of messages already throttled by the handling of the host/\n   realm report abatement.\n
    \     Note: The goal is to avoid traffic oscillations that might result\n      from
    throttling of messages for both the host/realm Overload\n      reports and the
    PEER Overload reports.  This is especially a\n      concern if both reports indicate
    the loss abatement algorithm.\n"
  title: 5.  Interaction Between Host/Realm and Peer Overload Reports
- contents:
  - "6.  Peer-Report Behavior\n   This section defines the normative behavior associated
    with the Peer-\n   Report extension to the DOIC solution.\n"
  - contents:
    - '6.1.  Capability Announcement

      '
    - contents:
      - "6.1.1.  Reacting-Node Behavior\n   When sending a Diameter request, a DOIC
        node that supports the\n   OC_PEER_REPORT feature (as defined in Section 7.1.1)
        MUST include in\n   the OC-Supported-Features AVP an OC-Feature-Vector AVP
        with the\n   OC_PEER_REPORT bit set.\n   When sending a request, a DOIC node
        that supports the OC_PEER_REPORT\n   feature MUST include a SourceID AVP in
        the OC-Supported-Features AVP\n   with its own DiameterIdentity.\n   When
        a Diameter Agent relays a request that includes a SourceID AVP\n   in the
        OC-Supported-Features AVP, if the Diameter Agent supports the\n   OC_PEER_REPORT
        feature, then it MUST remove the received SourceID AVP\n   and replace it
        with a SourceID AVP containing its own\n   DiameterIdentity.\n"
      title: 6.1.1.  Reacting-Node Behavior
    - contents:
      - "6.1.2.  Reporting-Node Behavior\n   When receiving a request, a DOIC node
        that supports the\n   OC_PEER_REPORT feature MUST update transaction state
        with an\n   indication of whether or not the peer from which the request was\n
        \  received supports the OC_PEER_REPORT feature.\n      Note: The transaction
        state is used when the DOIC node is acting\n      as a peer-report reporting
        node and needs to send OC-OLR AVP\n      reports of type \"PEER-REPORT\" in
        answer messages.  The Peer\n      Overload reports are only included in answer
        messages being sent\n      to peers that support the OC_PEER_REPORT feature.\n
        \  The peer supports the OC_PEER_REPORT feature if the received request\n
        \  contains an OC-Supported-Features AVP with the OC-Feature-Vector with\n
        \  the OC_PEER_REPORT feature bit set and with a SourceID AVP with a\n   value
        that matches the DiameterIdentity of the peer from which the\n   request was
        received.\n   When an agent relays an answer message, a reporting node that\n
        \  supports the OC_PEER_REPORT feature MUST strip any SourceID AVP from\n
        \  the OC-Supported-Features AVP.\n   When sending an answer message, a reporting
        node that supports the\n   OC_PEER_REPORT feature MUST determine if the peer
        to which the answer\n   is to be sent supports the OC_PEER_REPORT feature.\n
        \  If the peer supports the OC_PEER_REPORT feature, then the reporting\n   node
        MUST indicate support for the feature in the OC-Supported-\n   Features AVP.\n
        \  If the peer supports the OC_PEER_REPORT feature, then the reporting\n   node
        MUST insert the SourceID AVP in the OC-Supported-Features AVP in\n   the answer
        message.\n   If the peer supports the OC_PEER_REPORT feature, then the reporting\n
        \  node MUST insert the OC-Peer-Algo AVP in the OC-Supported-Features\n   AVP.
        \ The OC-Peer-Algo AVP MUST indicate the overload abatement\n   algorithm
        that the reporting node wants the reacting nodes to use\n   should the reporting
        node send a Peer Overload report as a result of\n   becoming overloaded.\n"
      title: 6.1.2.  Reporting-Node Behavior
    title: 6.1.  Capability Announcement
  - contents:
    - "6.2.  Peer Overload Report Handling\n   This section defines the behavior for
      the handling of Overload\n   reports of type \"PEER-REPORT\".\n"
    - contents:
      - "6.2.1.  Overload Control State\n   This section describes the Overload Control
        State (OCS) that might be\n   maintained by both the peer-report reporting
        node and the peer-report\n   reacting node.\n   This is an extension of the
        OCS handling defined in [RFC7683].\n"
      - contents:
        - "6.2.1.1.  Reporting-Node Peer-Report OCS\n   A DOIC node that supports
          the OC_PEER_REPORT feature SHOULD maintain\n   Reporting-Node OCS, as defined
          in [RFC7683] and extended here.\n   If different abatement-specific contents
          are sent to each peer, then\n   the reporting node MUST maintain a separate
          reporting-node peer-\n   report OCS entry per peer, to which a Peer Overload
          report is sent.\n      Note: The rate-overload abatement algorithm allows
          for different\n      rates to be sent to each peer.\n"
        title: 6.2.1.1.  Reporting-Node Peer-Report OCS
      - contents:
        - "6.2.1.2.  Reacting-Node Peer-Report OCS\n   In addition to OCS maintained
          as defined in [RFC7683], a reacting\n   node that supports the OC_PEER_REPORT
          feature maintains the following\n   OCS per supported Diameter application:\n
          \     A peer-report OCS entry for each peer to which it sends requests\n
          \  A peer-report OCS entry is identified by both the Application-ID and\n
          \  the peer's DiameterIdentity.\n   The peer-report OCS entry includes the
          following information (the\n   actual information stored is an implementation
          decision):\n      Sequence number (as received in the OC-OLR AVP)\n      Time
          of expiry (derived from the OC-Validity-Duration AVP received\n      in
          the OC-OLR AVP and time of reception of the message carrying\n      the
          OC-OLR AVP)\n      Selected abatement algorithm (as received in the OC-Supported-\n
          \     Features AVP)\n      Input data that is specific to the abatement
          algorithm (as\n      received in the OC-OLR AVP, e.g., OC-Reduction-Percentage
          for the\n      loss abatement algorithm)\n"
        title: 6.2.1.2.  Reacting-Node Peer-Report OCS
      title: 6.2.1.  Overload Control State
    - contents:
      - "6.2.2.  Reporting-Node Maintenance of Peer-Report OCS\n   All rules for managing
        the reporting-node OCS entries defined in\n   [RFC7683] apply to the peer
        report.\n"
      title: 6.2.2.  Reporting-Node Maintenance of Peer-Report OCS
    - contents:
      - "6.2.3.  Reacting-Node Maintenance of Peer-Report OCS\n   When a reacting
        node receives an OC-OLR AVP with a report type of\n   \"PEER-REPORT\", it
        MUST determine if the report was generated by the\n   Diameter peer from which
        the report was received.\n   If a reacting node receives an OC-OLR AVP of
        type \"PEER-REPORT\" and\n   the SourceID matches the DiameterIdentity of
        the Diameter peer from\n   which the response message was received, then the
        report was\n   generated by a Diameter peer.\n   If a reacting node receives
        an OC-OLR AVP of type \"PEER-REPORT\" and\n   the SourceID does not match
        the DiameterIdentity of the Diameter peer\n   from which the response message
        was received, then the reacting node\n   MUST ignore the Overload report.\n
        \     Note: Under normal circumstances, a Diameter node will not add a\n      peer
        report when sending to a peer that does not support this\n      extension.
        \ This requirement is to handle the case where peer\n      reports are erroneously
        or maliciously inserted into response\n      messages.\n   If the peer report
        was received from a Diameter peer, then the\n   reacting node MUST determine
        if it is for an existing or new overload\n   condition.\n   The peer report
        is for an existing overload condition if the reacting\n   node has an OCS
        that matches the received peer report.  For a peer\n   report, this means
        it matches the Application-ID and the peer's\n   DiameterIdentity in an existing
        OCS entry.\n   If the peer report is for an existing overload condition, then
        it\n   MUST determine if the peer report is a retransmission or an update
        to\n   the existing OLR.\n   If the sequence number for the received peer
        report is greater than\n   the sequence number stored in the matching OCS
        entry, then the\n   reacting node MUST update the matching OCS entry.\n   If
        the sequence number for the received peer report is less than or\n   equal
        to the sequence number in the matching OCS entry, then the\n   reacting node
        MUST silently ignore the received peer report.  The\n   matching OCS MUST
        NOT be updated in this case.\n   If the received peer report is for a new
        overload condition, then the\n   reacting node MUST generate a new OCS entry
        for the overload\n   condition.\n   For a peer report, this means it creates
        an OCS entry with a\n   DiameterIdentity from the SourceID AVP in the received
        OC-OLR AVP.\n   If the received peer report contains a validity duration of
        zero\n   (\"0\"), then the reacting node MUST update the OCS entry as being\n
        \  expired.\n   The reacting node does not delete an OCS when receiving an
        answer\n   message that does not contain an OC-OLR AVP (i.e., the absence
        of OLR\n   means \"no change\").\n   The reacting node sets the abatement
        algorithm based on the OC-Peer-\n   Algo AVP in the received OC-Supported-Features
        AVP.\n"
      title: 6.2.3.  Reacting-Node Maintenance of Peer-Report OCS
    - contents:
      - "6.2.4.  Peer-Report Reporting-Node Behavior\n   When there is an existing
        reporting-node peer-report OCS entry, the\n   reporting node MUST include
        an OC-OLR AVP with a report type of\n   \"PEER-REPORT\" using the contents
        of the reporting-node peer-report\n   OCS entry in all answer messages sent
        by the reporting node to peers\n   that support the OC_PEER_REPORT feature.\n
        \     Note: The reporting node determines if a peer supports the\n      OC_PEER_REPORT
        feature based on the indication recorded in the\n      reporting node's transaction
        state.\n   The reporting node MUST include its DiameterIdentity in the SourceID\n
        \  AVP in the OC-OLR AVP.  This is used by DOIC nodes that support the\n   OC_PEER_REPORT
        feature to determine if the report was received from a\n   Diameter peer.\n
        \  The reporting agent must follow all other overload reporting-node\n   behaviors
        outlined in the DOIC specification.\n"
      title: 6.2.4.  Peer-Report Reporting-Node Behavior
    - contents:
      - "6.2.5.  Peer-Report Reacting-Node Behavior\n   A reacting node supporting
        this extension MUST support the receipt of\n   multiple Overload reports in
        a single message.  The message might\n   include a Host Overload report, a
        Realm Overload report, and/or a\n   Peer Overload report.\n   When a reacting
        node sends a request, it MUST determine if that\n   request matches an active
        OCS.\n   In all cases, if the reacting node is an agent, then it MUST strip\n
        \  the Peer-Report OC-OLR AVP from the message.\n   If the request matches
        an active OCS, then the reacting node MUST\n   apply abatement treatment to
        the request.  The abatement treatment\n   applied depends on the abatement
        algorithm indicated in the OCS.\n   For Peer Overload Reports, the preferred
        abatement treatment is\n   diversion.  As such, the reacting node SHOULD attempt
        to divert\n   requests identified as needing abatement to other peers.\n   If
        there is not sufficient capacity to divert abated traffic, then\n   the reacting
        node MUST throttle the necessary requests to fit within\n   the available
        capacity of the peers able to handle the requests.\n   If the abatement treatment
        results in throttling of the request and\n   if the reacting node is an agent,
        then the agent MUST send an\n   appropriate error response as defined in [RFC7683].\n
        \  In the case that the OCS entry validity duration expires or has a\n   validity
        duration of zero (\"0\"), meaning that if the reporting node\n   has explicitly
        signaled the end of the overload condition, then\n   abatement associated
        with the OCS entry MUST be ended in a controlled\n   fashion.\n"
      title: 6.2.5.  Peer-Report Reacting-Node Behavior
    title: 6.2.  Peer Overload Report Handling
  title: 6.  Peer-Report Behavior
- contents:
  - '7.  Peer-Report AVPs

    '
  - contents:
    - "7.1.  OC-Supported-Features AVP\n   This extension adds a new feature to the
      OC-Feature-Vector AVP.  This\n   feature indication shows support for handling
      of Peer Overload\n   reports.  Peer Overload reports are used by agents to indicate
      the\n   need for overload abatement handling by the agent's peer.\n   A supporting
      node must also include the SourceID AVP in the\n   OC-Supported-Features capability
      AVP.\n   This AVP contains the DiameterIdentity of the node that supports the\n
      \  OC_PEER_REPORT feature.  This AVP is used to determine if support for\n   the
      Peer Overload report is in an adjacent node.  The value of this\n   AVP should
      be the same Diameter identity used as part of the Diameter\n   Capabilities
      Exchange procedure defined in [RFC7683].\n   This extension also adds the OC-Peer-Algo
      AVP to the OC-Supported-\n   Features AVP.  This AVP is used by a reporting
      node to indicate the\n   abatement algorithm it will use for Peer Overload reports.\n
      \   OC-Supported-Features ::= < AVP Header: 621 >\n                              [
      OC-Feature-Vector ]\n                              [ SourceID ]\n                              [
      OC-Peer-Algo]\n                            * [ AVP ]\n"
    - contents:
      - "7.1.1.  OC-Feature-Vector AVP\n   The Peer-Report feature defines a new feature
        bit for the OC-Feature-\n   Vector AVP.\n   OC_PEER_REPORT (0x0000000000000010)\n
        \     When this flag is set by a DOIC node, it indicates that the DOIC\n      node
        supports the Peer Overload report type.\n"
      title: 7.1.1.  OC-Feature-Vector AVP
    - contents:
      - "7.1.2.  OC-Peer-Algo AVP\n   The OC-Peer-Algo AVP (AVP code 648) is of type
        Unsigned64 and\n   contains a 64-bit flags field of announced capabilities
        for a DOIC\n   node.  The value of zero (\"0\") is reserved.\n   Feature bits
        defined for the OC-Feature-Vector AVP and associated\n   with overload abatement
        algorithms are reused for this AVP.\n"
      title: 7.1.2.  OC-Peer-Algo AVP
    title: 7.1.  OC-Supported-Features AVP
  - contents:
    - "7.2.  OC-OLR AVP\n   This extension makes no changes to the OC_Sequence_Number
      or\n   OC_Validity_Duration AVPs in the OC-OLR AVP.  These AVPs can also be\n
      \  used in Peer Overload reports.\n   The OC_PEER_REPORT feature extends the
      base Diameter overload\n   specification by defining a new Overload report type
      of \"PEER-\n   REPORT\".  See Section 7.6 of [RFC7683] for a description of
      the\n   OC-Report-Type AVP.\n   The peer report MUST also include the Diameter
      identity of the agent\n   that generated the report.  This is necessary to handle
      the case\n   where there is a non-supporting agent between the reporting node
      and\n   the reacting node.  Without the indication of the agent that\n   generated
      the peer report, the reacting node could erroneously assume\n   that the report
      applied to the non-supporting node.  This could, in\n   turn, result in unnecessary
      traffic being either diverted or\n   throttled.\n   The SourceID AVP is used
      in the OC-OLR AVP to carry this\n   DiameterIdentity.\n      OC-OLR ::= < AVP
      Header: 623 >\n                 < OC-Sequence-Number >\n                 < OC-Report-Type
      >\n                 [ OC-Reduction-Percentage ]\n                 [ OC-Validity-Duration
      ]\n                 [ SourceID ]\n               * [ AVP ]\n"
    - contents:
      - "7.2.1.  OC-Report-Type AVP\n   The following new report type is defined for
        the OC-Report-Type AVP.\n   PEER_REPORT 2:  The overload treatment should
        apply to all requests\n      bound for the peer identified in the Overload
        report.  If the peer\n      identified in the peer report is not a peer to
        the reacting\n      endpoint, then the peer report should be stripped and
        not acted\n      upon.\n"
      title: 7.2.1.  OC-Report-Type AVP
    title: 7.2.  OC-OLR AVP
  - contents:
    - "7.3.  SourceID AVP\n   The SourceID AVP (AVP code 649) is of type DiameterIdentity
      and is\n   inserted by a Diameter node to indicate the source of the AVP in\n
      \  which it is a part.\n   In the case of peer reports, the SourceID AVP indicates
      the node that\n   supports this feature (in the OC-Supported-Features AVP) or
      the node\n   that generates an overload report with a report type of \"PEER-REPORT\"\n
      \  (in the OC-OLR AVP).\n   It contains the DiameterIdentity of the inserting
      node.  This is used\n   by other Diameter nodes to determine the node that inserted
      the\n   enclosing AVP that contains the SourceID AVP.\n"
    title: 7.3.  SourceID AVP
  - contents:
    - "7.4.  Attribute-Value Pair Flag Rules\n                                                             +---------+\n
      \                                                            |AVP flag |\n                                                             |rules
      \   |\n                                                             +----+----+\n
      \                            AVP   Section                   |    |MUST|\n     Attribute
      Name          Code  Defined Value Type        |MUST| NOT|\n    +--------------------------------------------------------+----+----+\n
      \   |OC-Peer-Algo            648    7.1.2  Unsigned64        |    | V  |\n    |SourceID
      \               649    7.3    DiameterIdentity  |    | V  |\n    +--------------------------------------------------------+----+----+\n"
    title: 7.4.  Attribute-Value Pair Flag Rules
  title: 7.  Peer-Report AVPs
- contents:
  - "8.  IANA Considerations\n   IANA has registered the following values in the \"Authentication,\n
    \  Authorization, and Accounting (AAA) Parameters\" registry:\n      Two new AVP
    codes are defined in Section 7.4.\n      Note that the values used for the OC-Peer-Algo
    AVP are a subset of\n      the \"OC-Feature-Vector AVP Values (code 622)\" registry.
    \ Only the\n      values in that registry that apply to overload abatement\n      algorithms
    apply to the OC-Peer-Algo AVP.\n      A new OC-Feature-Vector AVP value is defined
    in Section 7.1.1.\n      A new OC-Report-Type AVP value is defined in Section
    7.2.1.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   Agent overload is an extension to the base Diameter
    Overload\n   mechanism.  As such, all of the security considerations outlined
    in\n   [RFC7683] apply to the agent overload scenarios.\n   It is possible that
    the malicious insertion of an peer report could\n   have a bigger impact on a
    Diameter network as agents can be\n   concentration points in a Diameter network.
    \ Where an endpoint report\n   would impact the traffic sent to a single Diameter
    Server, for\n   example, a peer report could throttle all traffic to the Diameter\n
    \  network.\n   This impact is amplified in a Diameter agent that sits at the
    edge of\n   a Diameter network that serves as the entry point from all other\n
    \  Diameter networks.\n   The impacts of this attack, as well as the mitigation
    strategies, are\n   the same as those outlined in [RFC7683].\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC6733]  Fajardo, V., Ed., Arkko, J., Loughney,
      J., and G. Zorn,\n              Ed., \"Diameter Base Protocol\", RFC 6733,\n
      \             DOI 10.17487/RFC6733, October 2012,\n              <https://www.rfc-editor.org/info/rfc6733>.\n
      \  [RFC7683]  Korhonen, J., Ed., Donovan, S., Ed., Campbell, B., and L.\n              Morand,
      \"Diameter Overload Indication Conveyance\",\n              RFC 7683, DOI 10.17487/RFC7683,
      October 2015,\n              <https://www.rfc-editor.org/info/rfc7683>.\n   [RFC8582]
      \ Donovan, S., Ed. and E. Noel, \"Diameter Overload Rate\n              Control\",
      RFC 8582, DOI 10.17487/RFC8582, August 2019,\n              <https://www.rfc-editor.org/info/rfc8582>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC7068]  McMurry, E. and B. Campbell, \"Diameter Overload Control\n              Requirements\",
      RFC 7068, DOI 10.17487/RFC7068, November\n              2013, <https://www.rfc-editor.org/info/rfc7068>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Acknowledgements\n   The author would like to thank Adam Roach and Eric McMurry
    for the\n   work done in defining a comprehensive Diameter overload solution in\n
    \  draft-roach-dime-overload-ctrl-03.txt.\n   The author would also like to thank
    Ben Campbell for his insights and\n   review of early versions of this document.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Steve Donovan\n   Oracle\n   7460 Warren Parkway, Suite
    300\n   Frisco, Texas  75034\n   United States of America\n   Email: srdonovan@usdonovans.com\n"
  title: Author's Address
