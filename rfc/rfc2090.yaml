- title: __initial_text__
  contents:
  - '                         TFTP Multicast Option

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Trivial File Transfer Protocol [1] is a simple, lock-step, file\n\
    \   transfer protocol which allows a client to get or put a file onto a\n   remote\
    \ host.\n   This document describes a new TFTP option. This new option will allow\n\
    \   the multiple clients to receive the same file concurrently through\n   the\
    \ use of Multicast packets. The TFTP Option Extension mechanism is\n   described\
    \ in [2].\n   Often when similar computers are booting remotely they will each\n\
    \   download the same image file. By adding multicast into the TFTP\n   option\
    \  set,  two  or  more  computers  can  download  a  file\n   concurrently, thus\
    \ increasing network efficiency.\n   This document assumes that the reader is\
    \ familiar with the\n   terminology and notation of both [1] and [2].\n"
- title: Multicast Option Specification
  contents:
  - "Multicast Option Specification\n   The TFTP Read Request packet is modified to\
    \ include the multicast\n   option as follows:\n      |  opc=1 | filename | 0\
    \ | mode | 0 | multicast | 0 | 0 |\n   opc\n      The opcode field contains a\
    \ 1, for Read Requests, as defined\n      in [1].\n   filename\n      The name\
    \ of the file to be read, as defined in [1]. This is a\n      NULL-terminated\
    \ field.\n   mode\n      The mode of the file transfer: \"netascii\", \"octet\"\
    , or\n      \"mail\", as defined in [1]. This is a NULL-terminated field.\n  \
    \ multicast\n      Request  for  multicast  transmission  of  the  file  option,\n\
    \      \"multicast\" (case insensitive). This is a NULL-terminated\n      field.\
    \ The value for this option request is a string of zero\n      length.\n   If\
    \ the server is willing to accept the multicast option, it\n   sends an Option\
    \ Acknowledgment (OACK) to the client including\n   the multicast option, as defined\
    \ in [2]. The OACK to the client\n   will specify the multicast address and flag\
    \ to indicate whether\n   that client should send block acknowledgments (ACK).\n\
    \     +-------+-----------+---+-------~~-------+---+\n     |  opc  | multicast\
    \ | 0 | addr, port, mc | 0 |\n     +-------+-----------+---+-------~~-------+---+\n\
    \   opc\n      The  opcode  field  contains  the  number  6,  for  Option\n  \
    \    Acknowledgment, as defined in [2].\n   multicast\n      Acknowledges the\
    \ multicast option. This is a NULL-terminated\n      field.\n   addr\n      The\
    \ addr field contains the multicast IP address. This field\n      is terminated\
    \ with a comma.\n   port\n      The port field contains the destination port of\
    \ the multicast\n      packets. The use of Registered Port number 1758 (tftp-mcast)\n\
    \      is recommended. This field is terminated with a comma.\n   mc\n      This\
    \ field will be either 0 or 1, to tell the client whether\n      it is the master\
    \ client, that is, it is responsible for\n      sending ACKs to the server. This\
    \ is NULL-terminated field.\n"
- title: Data Transfer
  contents:
  - "Data Transfer\n   After the OACK is received by the client it will send an ACK\
    \ for\n   packet zero, as in [2]. With the multicast option being accepted this\n\
    \   ACK will indicate to the server that the client wants the first\n   packet.\
    \ In other words the ACKs may now be seen as a request for the\n   n+1th block\
    \ of data. This enables each a client to request any block\n   within the file\
    \ that it may be missing.\n   To manage the data transfer the server will maintain\
    \ a list of\n   clients. Typically the oldest client on the list, from here on\n\
    \   referred to as the Master Client, will be responsible for sending\n   ACKs.\
    \ When the master client is finished, the server will send\n   another OACK to\
    \ the next oldest client, telling it to start sending\n   ACKs. Upon receipt of\
    \ this OACK the new master client will send an\n   ACK for the block immediately\
    \ before the first block required to\n   complete its download.\n   Any subsequent\
    \ clients can start receiving blocks of a file during a\n   transfer and then\
    \ request any missing blocks when that client becomes\n   the master client. When\
    \ the current master client is finished, the\n   server will notify the next client\
    \ with an OACK making it the new\n   master client. The new master client can\
    \ start requesting  missed\n   packets.  Each  client  must  terminate  the transfer\
    \ by sending an\n   acknowledgment of the last packet or by sending an error message\
    \ to\n   server. This termination can occur even if the client is not the\n  \
    \ master client.\n   Any subsequent OACKs to a client may have an empty multicast\
    \ address\n   and port fields, since this information will already be held by\
    \ that\n   client. In the event a client fails to respond in a timely manner to\n\
    \   a OACK enabling it as the master client, the server shall select the\n   next\
    \ oldest client to be the master client. The server shall\n   reattempt to send\
    \ a OACK to the non- responding client when the new\n   master client is finished.\
    \ The server may cease communication with a\n   client after a reasonable number\
    \ of attempts.\n   Each transfer will be given a multicast address for use to\
    \ distribute\n   the data packets. Since there can be multiple servers on a given\n\
    \   network or a limited number of addresses available to a given server,\n  \
    \ it is possible that their might be more than one transfer using a\n   multicast\
    \ address. To ensure that a client only accepts the correct\n   packets, each\
    \ transfer must use a unique port on the server. The\n   source IP address and\
    \ port number will identify the data packets for\n   the transfer. Thus the server\
    \ must send the unicast OACK packet to\n   the client using the same port as will\
    \ be used for sending the\n   multicast data packets.\n   At any point if a client,\
    \ other than the master client, sends a ACK\n   to the server, the server will\
    \ respond with another OACK with the mc\n   field holding a value of zero. If\
    \ this client persists in sending\n   erroneous ACKs, the server may send an error\
    \ packet to the client,\n   discontinuing the file transfer for that client.\n\
    \   The server may also send unicast packets to a lone client to reduce\n   adverse\
    \ effects on other machines. As it is possible that machines\n   may be forced\
    \ to process many extraneous multicast packets when\n   attempting to receive\
    \ a single multicast address.\n"
- title: Example
  contents:
  - "Example\n           clients                                      server  message\n\
    \           ------------------------------------------------------------\n   \
    \ 1  C1  |1|afile|0|octet|0|multicast|0|0| ->                  RRQ\n    2    \
    \            C1 <- |6|multicast|224.100.100.100,1758,1|  OACK\n    3  C1  |4|0|\
    \ ->                                              ACK\n    4                 \
    \         M <- |3|1|1| 512 octets of data|  DATA\n    5  C1  |4|1| ->        \
    \                                      ACK\n    6                          M <-\
    \ |3|2|1| 512 octets of data|  DATA\n    7  C2  |1|afile|0|octet|0|multicast|0|0|\
    \ ->                  RRQ\n    8                C2 <- |6|multicast|224.100.100.100,1758,0|\
    \  OACK\n    9  C2  |4|0| ->                                              ACK\n\
    \   10  C1  |4|2| ->                                              ACK\n   11 \
    \                         M <- |3|3|1| 512 octets of data|  DATA\n   12  C3  |1|afile|0|octet|0|multicast|0|0|\
    \ ->                  RRQ\n   13                C3 <- |6|multicast|224.100.100.100,1758,0|\
    \  OACK\n   14  C1  |4|3| ->                                              ACK\n\
    \   15  C2  |4|0| ->                                              ACK\n   16 \
    \             M (except C2) <- |3|4|1| 512 octets of data|  DATA\n   17  C1  |4|4|\
    \ ->                                              ACK\n   18                 \
    \         M <- |3|5|1| 512 octets of data|  DATA\n   19  C1  |4|5| ->        \
    \                                      ACK\n   20                          M <-\
    \ |3|6|1| 100 octets of data|  DATA\n   21  C1  |4|6| ->                     \
    \                         ACK\n   22                                   C2 <- |6|multicast|,,1|\
    \  OACK\n   23  C2  |4|0| ->                                              ACK\n\
    \   24                          M <- |3|1|1| 512 octets of data|  DATA\n   25\
    \  C2  |4|1| ->                                              ACK\n   26      \
    \                    M <- |3|2|1| 512 octets of data|  DATA\n   27  C2  |4|3|\
    \ ->                                              ACK\n   28                 \
    \         M <- |3|4|1| 512 octets of data|  DATA\n   29  C2  |4|6| ->        \
    \                                      ACK\n   30                            \
    \       C3 <- |6|multicast|,,1|  OACK\n   31  C3  |4|2| ->                   \
    \                           ACK\n   32                          M <- |3|3|1| 512\
    \ octets of data|  DATA\n   33  C3  |4|6| ->                                 \
    \             ACK\n      Comments:\n         1  request from client 1\n      \
    \   2  option acknowledgment\n         3  acknowledgment for option acknowledgment,\n\
    \            or request for first block of data\n         4  first data packet\
    \ sent to the multicast address\n         7  request from client 2\n         8\
    \  option acknowledgment to client 2,\n            send no acknowledgments\n \
    \        9  OACK acknowledgment from client 2\n         15 OACK acknowledgment\
    \ from client 3\n         16 client 2 fails to receive a packet\n         21 client\
    \ 1 acknowledges receipt of the last block,\n            telling the server it\
    \ is done\n         23 option acknowledgment to client 2,\n            now the\
    \ master client\n         25 client 2 acknowledging with request for first block\n\
    \         27 client 2 acknowledges with request for missed block\n         29\
    \ client 2 signals it is finished\n         31 client 3 is master client and asks\
    \ for missing blocks\n         33 client 3 signals it is finished\n"
- title: Conclusion
  contents:
  - "Conclusion\n   With the use of the multicast and blocksize[3] options TFTP will\
    \ be\n   capable of fast and efficient downloads of data. Using TFTP with the\n\
    \   multicast option will maintain backward compatibility for both\n   clients\
    \ and servers.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1] Sollins, K., \"The TFTP Protocol (Revision 2)\", STD 33, RFC\n\
    \       1350, MIT, July 1992.\n   [2] Malkin, G., and A. Harkin, \"TFTP Option\
    \ Extension\", RFC\n       1782, Xylogics, Inc., Hewlett Packard Co., March 1995.\n\
    \   [3] Malkin, G., and A. Harkin, \"TFTP Blocksize Option\", RFC\n       1783,\
    \ Xylogics, Inc., Hewlett Packard Co., March 1995.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   A. Thomas Emberson\n   Lanworks Technologies, Inc.\n   2425\
    \ Skymark Avenue\n   Mississauga, Ontario\n   Canada L4W 4Y6\n   Phone: (905)\
    \ 238-5528\n   EMail: tom@lanworks.com\n"
