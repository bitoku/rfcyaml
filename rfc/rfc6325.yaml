- contents:
  - '        Routing Bridges (RBridges): Base Protocol Specification

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Routing Bridges (RBridges) provide optimal pair-wise forwarding\n
    \  without configuration, safe forwarding even during periods of\n   temporary
    loops, and support for multipathing of both unicast and\n   multicast traffic.
    \ They achieve these goals using IS-IS routing and\n   encapsulation of traffic
    with a header that includes a hop count.\n   RBridges are compatible with previous
    IEEE 802.1 customer bridges as\n   well as IPv4 and IPv6 routers and end nodes.
    \ They are as invisible\n   to current IP routers as bridges are and, like routers,
    they\n   terminate the bridge spanning tree protocol.\n   The design supports
    VLANs and the optimization of the distribution of\n   multi-destination frames
    based on VLAN ID and based on IP-derived\n   multicast groups.  It also allows
    unicast forwarding tables at\n   transit RBridges to be sized according to the
    number of RBridges\n   (rather than the number of end nodes), which allows their
    forwarding\n   tables to be substantially smaller than in conventional customer\n
    \  bridges.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6325.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................6\n
    \     1.1. Algorhyme V2, by Ray Perlner ...............................7\n      1.2.
    Normative Content and Precedence ...........................7\n      1.3. Terminology
    and Notation in This Document ..................7\n      1.4. Categories of Layer
    2 Frames ...............................8\n      1.5. Acronyms ...................................................9\n
    \  2. RBridges .......................................................11\n      2.1.
    General Overview ..........................................11\n      2.2. End-Station
    Addresses .....................................12\n      2.3. RBridge Encapsulation
    Architecture ........................13\n      2.4. Forwarding Overview .......................................15\n
    \          2.4.1. Known-Unicast ......................................16\n           2.4.2.
    Multi-Destination ..................................16\n      2.5. RBridges and
    VLANs ........................................17\n           2.5.1. Link VLAN
    Assumptions ..............................17\n      2.6. RBridges and IEEE 802.1
    Bridges ...........................18\n           2.6.1. RBridge Ports and 802.1
    Layering ...................18\n           2.6.2. Incremental Deployment .............................20\n
    \  3. Details of the TRILL Header ....................................20\n      3.1.
    TRILL Header Format .......................................20\n      3.2. Version
    (V) ...............................................21\n      3.3. Reserved (R)
    ..............................................21\n      3.4. Multi-destination
    (M) .....................................22\n      3.5. Op-Length .................................................22\n
    \     3.6. Hop Count .................................................22\n      3.7.
    RBridge Nicknames .........................................23\n           3.7.1.
    Egress RBridge Nickname ............................23\n           3.7.2. Ingress
    RBridge Nickname ...........................24\n           3.7.3. RBridge Nickname
    Selection .........................24\n      3.8. TRILL Header Options ......................................26\n
    \  4. Other RBridge Design Details ...................................27\n      4.1.
    Ethernet Data Encapsulation ...............................27\n           4.1.1.
    VLAN Tag Information ...............................30\n           4.1.2. Inner
    VLAN Tag .....................................31\n           4.1.3. Outer VLAN
    Tag .....................................31\n           4.1.4. Frame Check Sequence
    (FCS) .........................32\n      4.2. Link State Protocol (IS-IS) ...............................32\n
    \          4.2.1. IS-IS RBridge Identity .............................32\n           4.2.2.
    IS-IS Instances ....................................33\n           4.2.3. TRILL
    IS-IS Frames .................................33\n           4.2.4. TRILL Link
    Hellos, DRBs, and Appointed Forwarders ..34\n                  4.2.4.1. P2P Hello
    Links ...........................35\n                  4.2.4.2. Designated RBridge
    ........................35\n                  4.2.4.3. Appointed VLAN-x Forwarder
    ................36\n                  4.2.4.4. TRILL LSP Information .....................37\n
    \          4.2.5. The TRILL ESADI Protocol ...........................40\n                  4.2.5.1.
    TRILL ESADI Participation .................42\n                  4.2.5.2. TRILL
    ESADI Information ...................42\n           4.2.6. SPF, Forwarding, and
    Ambiguous Destinations ........43\n      4.3. Inter-RBridge Link MTU Size ...............................43\n
    \          4.3.1. Determining Campus-Wide TRILL IS-IS MTU Size .......44\n           4.3.2.
    Testing Link MTU Size ..............................44\n      4.4. TRILL-Hello
    Protocol ......................................45\n           4.4.1. TRILL-Hello
    Rationale ..............................45\n           4.4.2. TRILL-Hello Contents
    and Timing ....................46\n                  4.4.2.1. TRILL Neighbor List
    .......................48\n           4.4.3. TRILL MTU-Probe and TRILL Hello VLAN
    Tagging .......49\n           4.4.4. Multiple Ports on the Same Link ....................50\n
    \          4.4.5. VLAN Mapping within a Link .........................51\n      4.5.
    Distribution Trees ........................................52\n           4.5.1.
    Distribution Tree Calculation ......................54\n           4.5.2. Multi-Destination
    Frame Checks .....................55\n           4.5.3. Pruning the Distribution
    Tree ......................57\n           4.5.4. Tree Distribution Optimization
    .....................58\n           4.5.5. Forwarding Using a Distribution Tree
    ...............59\n      4.6. Frame Processing Behavior .................................60\n
    \          4.6.1. Receipt of a Native Frame ..........................60\n                  4.6.1.1.
    Native Unicast Case .......................60\n                  4.6.1.2. Native
    Multicast and Broadcast Frames .....61\n           4.6.2. Receipt of a TRILL Frame
    ...........................62\n                  4.6.2.1. TRILL Control Frames
    ......................63\n                  4.6.2.2. TRILL ESADI Frames ........................63\n
    \                 4.6.2.3. TRILL Data Frames .........................63\n                  4.6.2.4.
    Known Unicast TRILL Data Frames ...........63\n                  4.6.2.5. Multi-Destination
    TRILL Data Frames .......64\n           4.6.3. Receipt of a Layer 2 Control Frame
    .................65\n      4.7. IGMP, MLD, and MRD Learning ...............................66\n
    \     4.8. End-Station Address Details ...............................66\n           4.8.1.
    Learning End-Station Addresses .....................67\n           4.8.2. Learning
    Confidence Level Rationale ................68\n           4.8.3. Forgetting End-Station
    Addresses ...................69\n           4.8.4. Shared VLAN Learning ...............................70\n
    \     4.9. RBridge Ports .............................................71\n           4.9.1.
    RBridge Port Configuration .........................71\n           4.9.2. RBridge
    Port Structure .............................73\n           4.9.3. BPDU Handling
    ......................................76\n                  4.9.3.1. Receipt of
    BPDUs ..........................76\n                  4.9.3.2. Root Bridge Changes
    .......................76\n                  4.9.3.3. Transmission of BPDUs .....................77\n
    \          4.9.4. Dynamic VLAN Registration ..........................77\n   5.
    RBridge Parameters .............................................77\n      5.1.
    Per RBridge ...............................................78\n      5.2. Per
    Nickname Per RBridge ..................................79\n      5.3. Per Port
    Per RBridge ......................................79\n      5.4. Per VLAN Per
    RBridge ......................................80\n   6. Security Considerations
    ........................................80\n      6.1. VLAN Security Considerations
    ..............................81\n      6.2. BPDU/Hello Denial-of-Service Considerations
    ...............82\n   7. Assignment Considerations ......................................82\n
    \     7.1. IANA Considerations .......................................83\n      7.2.
    IEEE Registration Authority Considerations ................83\n   8. Normative
    References ...........................................83\n   9. Informative References
    .........................................85\n   Appendix A. Incremental Deployment
    Considerations .................87\n      A.1. Link Cost Determination ...................................87\n
    \     A.2. Appointed Forwarders and Bridged LANs .....................87\n      A.3.
    Wiring Closet Topology ....................................89\n           A.3.1.
    The RBridge Solution ...............................90\n           A.3.2. The
    VLAN Solution ..................................90\n           A.3.3. The Spanning
    Tree Solution .........................90\n           A.3.4. Comparison of Solutions
    ............................91\n   Appendix B. Trunk and Access Port Configuration
    ...................92\n   Appendix C. Multipathing ..........................................92\n
    \  Appendix D. Determination of VLAN and Priority ....................95\n   Appendix
    E. Support of IEEE 802.1Q-2005 Amendments ................95\n      E.1. Completed
    Amendments ......................................96\n      E.2. In-Process Amendments
    .....................................97\n   Appendix F. Acknowledgements ......................................98\n"
  title: Table of Contents
- contents:
  - "Table of Figures\n   Figure 1: Interconnected RBridges .................................14\n
    \  Figure 2: An Ethernet Encapsulated TRILL Frame ....................14\n   Figure
    3: A PPP Encapsulated TRILL Frame ..........................14\n   Figure 4: RBridge
    Port Model ......................................19\n   Figure 5: TRILL Header
    ............................................21\n   Figure 6: Options Area Initial
    Flags Octet ........................26\n   Figure 7: TRILL Data Encapsulation
    over Ethernet ..................29\n   Figure 8: VLAN Tag Information ....................................30\n
    \  Figure 9: TRILL IS-IS Frame Format ................................34\n   Figure
    10: TRILL ESADI Frame Format ...............................41\n   Figure 11:
    Detailed RBridge Port Model ............................74\n   Figure 12: Link
    Cost of a Bridged Link ............................87\n   Figure 13: Wiring Closet
    Topology .................................89\n   Figure 14: Multi-Destination
    Multipath ............................93\n   Figure 15: Known Unicast Multipath
    ................................94\n"
  title: Table of Figures
- contents:
  - "1.  Introduction\n   In traditional IPv4 and IPv6 networks, each subnet has a
    unique\n   prefix.  Therefore, a node in multiple subnets has multiple IP\n   addresses,
    typically one per interface.  This also means that when an\n   interface moves
    from one subnet to another, it changes its IP\n   address.  Administration of
    IP networks is complicated because IP\n   routers require per-port subnet address
    configuration.  Careful IP\n   address management is required to avoid creating
    subnets that are\n   sparsely populated, wasting addresses.\n   IEEE 802.1 bridges
    avoid these problems by transparently gluing many\n   physical links into what
    appears to IP to be a single LAN [802.1D].\n   However, 802.1 bridge forwarding
    using the spanning tree protocol has\n   some disadvantages:\n   o  The spanning
    tree protocol works by blocking ports, limiting the\n      number of forwarding
    links, and therefore creates bottlenecks by\n      concentrating traffic onto
    selected links.\n   o  Forwarding is not pair-wise shortest path, but is instead
    whatever\n      path remains after the spanning tree eliminates redundant paths.\n
    \  o  The Ethernet header does not contain a hop count (or Time to Live\n      (TTL))
    field.  This is dangerous when there are temporary loops\n      such as when spanning
    tree messages are lost or components such as\n      repeaters are added.\n   o
    \ VLANs can partition when the spanning tree reconfigures.\n   This document presents
    the design for RBridges (Routing Bridges\n   [RBridges]) that implement the TRILL
    protocol and are poetically\n   summarized below.  Rbridges combine the advantages
    of bridges and\n   routers and, as specified in this document, are the application
    of\n   link state routing to the VLAN-aware customer bridging problem.  With\n
    \  the exceptions discussed in this document, RBridges can incrementally\n   replace
    IEEE [802.1Q-2005] or [802.1D] customer bridges.\n   While RBridges can be applied
    to a variety of link protocols, this\n   specification focuses on IEEE [802.3]
    links.  Use with other link\n   types is expected to be covered in other documents.\n
    \  The TRILL protocol, as specified herein, is designed to be a Local\n   Area
    Network protocol and not designed with the goal of scaling\n   beyond the size
    of existing bridged LANs.  For further discussion of\n   the problem domain addressed
    by RBridges, see [RFC5556].\n"
  - contents:
    - "1.1.  Algorhyme V2, by Ray Perlner\n   I hope that we shall one day see\n   A
      graph more lovely than a tree.\n   A graph to boost efficiency\n   While still
      configuration-free.\n   A network where RBridges can\n   Route packets to their
      target LAN.\n   The paths they find, to our elation,\n   Are least cost paths
      to destination!\n   With packet hop counts we now see,\n   The network need
      not be loop-free!\n   RBridges work transparently,\n   Without a common spanning
      tree.\n"
    title: 1.1.  Algorhyme V2, by Ray Perlner
  - contents:
    - "1.2.  Normative Content and Precedence\n   The bulk of the normative material
      in this specification appears in\n   Sections 1 through 4.  In case of conflict
      between provisions in\n   these four sections, the provision in the higher numbered
      section\n   prevails.\n"
    title: 1.2.  Normative Content and Precedence
  - contents:
    - "1.3.  Terminology and Notation in This Document\n   The key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to
      be interpreted as described in [RFC2119].\n   \"TRILL\" is the protocol specified
      herein while an \"RBridge\" is a\n   device that implements that protocol.  The
      second letter in Rbridge\n   is case insensitive.  Both Rbridge and RBridge
      are correct.\n   In this document, the term \"link\", unless otherwise qualified,
      means\n   \"bridged LAN\", that is to say, the combination of one or more [802.3]\n
      \  links with zero or more bridges, hubs, repeaters, or the like.  The\n   term
      \"simple link\" or the like is used indicate a point-to-point or\n   multi-access
      link with no included bridges or RBridges.\n   In this document, the term \"port\",
      unless otherwise qualified,\n   includes physical, virtual [802.1AE], and pseudo
      [802.1X] ports.  The\n   term \"physical port\" or the like is used to indicate
      the physical\n   point of connection between an RBridge and a link.\n   A \"campus\"
      is to RBridges as a \"bridged LAN\" is to bridges.  An\n   RBridge campus consists
      of a network of RBridges, bridges, hubs,\n   repeaters, simple links, and the
      like and it is bounded by end\n   stations and routers.\n   The term \"spanning
      tree\" in this document includes both classic\n   spanning tree and rapid spanning
      tree (as in the Rapid Spanning Tree\n   Protocol).\n   This document uses hexadecimal
      notation for MAC addresses.  Two\n   hexadecimal digits represent each octet
      (that is, 8-bit byte), giving\n   the value of the octet as an unsigned integer.
      \ A hyphen separates\n   successive octets.  This document consistently uses
      IETF bit\n   ordering, although the physical order of bit transmission within
      an\n   octet on an IEEE [802.3] link is from the lowest order bit to the\n   highest
      order bit, the reverse of IETF ordering.\n"
    title: 1.3.  Terminology and Notation in This Document
  - contents:
    - "1.4.  Categories of Layer 2 Frames\n   In this document, Layer 2 frames are
      divided into five categories:\n   o  Layer 2 control frames (such as Bridge
      PDUs (BPDUs))\n   o  native frames (non-TRILL-encapsulated data frames)\n   o
      \ TRILL Data frames (TRILL-encapsulated data frames)\n   o  TRILL control frames\n
      \  o  TRILL other frames\n   The way these five types of frames are distinguished
      is as follows:\n   o  Layer 2 control frames are those with a multicast destination\n
      \     address in the range 01-80-C2-00-00-00 to 01-80-C2-00-00-0F or\n      equal
      to 01-80-C2-00-00-21.  RBridges MUST NOT encapsulate and\n      forward such
      frames, though they MAY, unless otherwise specified\n      in this document,
      perform the Layer 2 function (such as MAC-level\n      security) of the control
      frame.  Frames with a destination address\n      of 01-80-C2-00-00-00 (BPDU)
      or 01-80-C2-00-00-21 (VLAN\n      Registration Protocol) are called \"high-level
      control frames\" in\n      this document.  All other Layer 2 control frames
      are called \"low-\n      level control frames\".\n   o  Native frames are those
      that are not control frames and have an\n      Ethertype other than \"TRILL\"
      or \"L2-IS-IS\" and have a destination\n      MAC address that is not one of
      the 16 multicast addresses reserved\n      for TRILL.\n   o  TRILL Data frames
      have the Ethertype \"TRILL\".  In addition, TRILL\n      data frames, if multicast,
      have the multicast destination MAC\n      address \"All-RBridges\".\n   o  TRILL
      control frames have the Ethertype \"L2-IS-IS\".  In addition,\n      TRILL control
      frames, if multicast, have the multicast destination\n      MAC addresses of
      \"All-IS-IS-RBridges\".  (Note that ESADI frames\n      look on the outside
      like TRILL data and are so handled but, when\n      decapsulated, have the L2-IS-IS
      Ethertype.)\n   o  TRILL other frames are those with any of the 16 multicast\n
      \     destination addresses reserved for TRILL other than All-RBridges\n      and
      All-IS-IS-RBridges.  RBridges conformant to this specification\n      MUST discard
      TRILL other frames.\n"
    title: 1.4.  Categories of Layer 2 Frames
  - contents:
    - "1.5.  Acronyms\n   AllL1ISs - All Level 1 Intermediate Systems\n   AllL2ISs
      - All Level 2 Intermediate Systems\n   BPDU - Bridge PDU\n   CHbH - Critical
      Hop-by-Hop\n   CItE - Critical Ingress-to-Egress\n   CSNP - Complete Sequence
      Number PDU\n   DA - Destination Address\n   DR - Designated Router\n   DRB -
      Designated RBridge\n   EAP - Extensible Authentication Protocol\n   ECMP - Equal
      Cost Multipath\n   EISS - Extended Internal Sublayer Service\n   ESADI - End-Station
      Address Distribution Information\n   FCS - Frame Check Sequence\n   GARP - Generic
      Attribute Registration Protocol\n   GVRP - GARP VLAN Registration Protocol\n
      \  IEEE - Institute of Electrical and Electronics Engineers\n   IGMP - Internet
      Group Management Protocol\n   IP - Internet Protocol\n   IS-IS - Intermediate
      System to Intermediate System\n   ISS - Internal Sublayer Service\n   LAN -
      Local Area Network\n   LSP - Link State PDU\n   MAC - Media Access Control\n
      \  MLD - Multicast Listener Discovery\n   MRD - Multicast Router Discovery\n
      \  MTU - Maximum Transmission Unit\n   MVRP - Multiple VLAN Registration Protocol\n
      \  NSAP - Network Service Access Point\n   P2P - Point-to-point\n   PDU - Protocol
      Data Unit\n   PPP - Point-to-Point Protocol\n   RBridge - Routing Bridge\n   RPF
      - Reverse Path Forwarding\n   SA - Source Address\n   SNMP - Simple Network
      Management Protocol\n   SPF - Shortest Path First\n   TLV - Type, Length, Value\n
      \  TRILL - TRansparent Interconnection of Lots of Links\n   VLAN - Virtual Local
      Area Network\n   VRP - VLAN Registration Protocol\n"
    title: 1.5.  Acronyms
  title: 1.  Introduction
- contents:
  - "2.  RBridges\n   This section provides a high-level overview of RBridges, which\n
    \  implement the TRILL protocol, omitting some details.  Sections 3 and\n   4
    below provide more detailed specifications.\n   TRILL, as described in this document
    and with the exceptions\n   discussed herein, provides [802.1Q-2005] VLAN-aware
    customer bridging\n   service.  As described below, TRILL is layered above the
    ports of an\n   RBridge.\n   The RBridges specified by this document do not supply
    provider\n   [802.1ad] or provider backbone [802.1ah] bridging or the like.  The\n
    \  extension of TRILL to provide such provider services is left for\n   future
    work that will be separately documented.  However, provider or\n   provider backbone
    bridges may be used to interconnect parts of an\n   RBridge campus.\n"
  - contents:
    - "2.1.  General Overview\n   RBridges run a link state protocol amongst themselves.
      \ This gives\n   them enough information to compute pair-wise optimal paths
      for\n   unicast, and calculate distribution trees for delivery of frames\n   either
      to destinations whose location is unknown or to\n   multicast/broadcast groups
      [RBridges] [RP1999].\n   To mitigate temporary loop issues, RBridges forward
      based on a header\n   with a hop count.  RBridges also specify the next hop
      RBridge as the\n   frame destination when forwarding unicast frames across a
      shared-\n   media link, which avoids spawning additional copies of frames during\n
      \  a temporary loop.  A Reverse Path Forwarding Check and other checks\n   are
      performed on multi-destination frames to further control\n   potentially looping
      traffic (see Section 4.5.2).\n   The first RBridge that a unicast frame encounters
      in a campus, RB1,\n   encapsulates the received frame with a TRILL header that
      specifies\n   the last RBridge, RB2, where the frame is decapsulated.  RB1 is
      known\n   as the \"ingress RBridge\" and RB2 is known as the \"egress RBridge\".\n
      \  To save room in the TRILL header and simplify forwarding lookups, a\n   dynamic
      nickname acquisition protocol is run among the RBridges to\n   select 2-octet
      nicknames for RBridges, unique within the campus,\n   which are an abbreviation
      for the IS-IS ID of the RBridge.  The\n   2-octet nicknames are used to specify
      the ingress and egress RBridges\n   in the TRILL header.\n   Multipathing of
      multi-destination frames through alternative\n   distribution trees and ECMP
      (Equal Cost Multipath) of unicast frames\n   are supported (see Appendix C).\n
      \  Networks with a more mesh-like structure will benefit to a greater\n   extent
      from the multipathing and optimal paths provided by TRILL than\n   will more
      tree-like networks.\n   RBridges run a protocol on a link to elect a \"Designated
      RBridge\"\n   (DRB).  The TRILL-IS-IS election protocol on a link is a little\n
      \  different from the Layer 3 IS-IS [ISO10589] election protocol,\n   because
      in TRILL it is essential that only one RBridge be elected\n   DRB, whereas in
      Layer 3 IS-IS it is possible for multiple routers to\n   be elected Designated
      Router (also known as Designated Intermediate\n   System).  As with an IS-IS
      router, the DRB may give a pseudonode name\n   to the link, issue an LSP (Link
      State PDU) on behalf of the\n   pseudonode, and issues CSNPs (Complete Sequence
      Number PDUs) on the\n   link.  Additionally, the DRB has some TRILL-specific
      duties,\n   including specifying which VLAN will be the Designated VLAN used
      for\n   communication between RBridges on that link (see Section 4.2.4.2).\n
      \  The DRB either encapsulates/decapsulates all data traffic to/from the\n   link,
      or, for load splitting, delegates this responsibility, for one\n   or more VLANs,
      to other RBridges on the link.  There must at all\n   times be at most one RBridge
      on the link that\n   encapsulates/decapsulates traffic for a particular VLAN.
      \ We will\n   refer to the RBridge appointed to forward VLAN-x traffic on behalf
      of\n   the link as the \"appointed VLAN-x forwarder\" (see Section 4.2.4.3).\n
      \  (Section 2.5 discusses VLANs further.)\n   Rbridges SHOULD support SNMPv3
      [RFC3411].  The Rbridge MIB will be\n   specified in a separate document.  If
      IP service is available to an\n   RBridge, it SHOULD support SNMPv3 over UDP
      over IPv4 [RFC3417] and\n   IPv6 [RFC3419]; however, management can be used,
      within a campus,\n   even for an RBridge that lacks an IP or other Layer 3 transport
      stack\n   or which does not have a Layer 3 address, by transporting SNMP with\n
      \  Ethernet [RFC4789].\n"
    title: 2.1.  General Overview
  - contents:
    - "2.2.  End-Station Addresses\n   An RBridge, RB1, that is the VLAN-x forwarder
      on any of its links\n   MUST learn the location of VLAN-x end nodes, both on
      the links for\n   which it is VLAN-x forwarder and on other links in the campus.
      \ RB1\n   learns the port, VLAN, and Layer 2 (MAC) addresses of end nodes on\n
      \  links for which it is VLAN-x forwarder from the source address of\n   frames
      received, as bridges do (for example, see Section 8.7 of\n   [802.1Q-2005]),
      or through configuration or a Layer 2 explicit\n   registration protocol such
      as IEEE 802.11 association and\n   authentication.  RB1 learns the VLAN and
      Layer 2 address of distant\n   VLAN-x end nodes, and the corresponding RBridge
      to which they are\n   attached, by looking at the ingress RBridge nickname in
      the TRILL\n   header and the VLAN and source MAC address of the inner frame
      of\n   TRILL Data frames that it decapsulates.\n   Additionally, an RBridge
      that is the appointed VLAN-x forwarder on\n   one or more links MAY use the
      End-Station Address Distribution\n   Information (ESADI) protocol to announce
      some or all of the attached\n   VLAN-x end nodes on those links.\n   The ESADI
      protocol could be used to announce end nodes that have been\n   explicitly enrolled.
      \ Such information might be more authoritative\n   than that learned from data
      frames being decapsulated onto the link.\n   Also, the addresses enrolled and
      distributed in this way can be more\n   secure for two reasons: (1) the enrollment
      might be authenticated\n   (for example, by cryptographically based EAP methods
      via [802.1X]),\n   and (2) the ESADI protocol also supports cryptographic authentication\n
      \  of its messages [RFC5304] [RFC5310] for more secure transmission.\n   If
      an end station is unplugged from one RBridge and plugged into\n   another, then,
      depending on circumstances, frames addressed to that\n   end station can be
      black-holed.  That is, they can be sent just to\n   the older RBridge that the
      end station used to be connected to until\n   cached address information at
      some remote RBridge(s) times out,\n   possibly for a number of minutes or longer.
      \ With the ESADI protocol,\n   the link interruption from the unplugging can
      cause an immediate\n   update to be sent.\n   Even if the ESADI protocol is
      used to announce or learn attached end\n   nodes, RBridges MUST still learn
      from received native frames and\n   decapsulated TRILL Data frames unless configured
      not to do so.\n   Advertising end nodes using ESADI is optional, as is learning
      from\n   these announcements.\n   (See Section 4.8 for further end-station address
      details.)\n"
    title: 2.2.  End-Station Addresses
  - contents:
    - "2.3.  RBridge Encapsulation Architecture\n   The Layer 2 technology used to
      connect Rbridges may be either IEEE\n   [802.3] or some other link technology
      such as PPP [RFC1661].  This is\n   possible since the RBridge relay function
      is layered on top of the\n   Layer 2 technologies.  However, this document specifies
      only an IEEE\n   802.3 encapsulation.\n   Figure 1 shows two RBridges, RB1 and
      RB2, interconnected through an\n   Ethernet cloud.  The Ethernet cloud may include
      hubs, point-to-point\n   or shared media, IEEE 802.1D bridges, or 802.1Q bridges.\n
      \                              ------------\n                              /
      \           \\\n                 +-----+     /   Ethernet   \\    +-----+\n
      \                | RB1 |----<                >---| RB2 |\n                 +-----+
      \    \\    Cloud     /    +-----+\n                              \\            /\n
      \                              ------------\n                     Figure 1:
      Interconnected RBridges\n   Figure 2 shows the format of a TRILL data or ESADI
      frame traveling\n   through the Ethernet cloud between RB1 and RB2.\n                    +--------------------------------+\n
      \                   |     Outer Ethernet Header      |\n                    +--------------------------------+\n
      \                   |          TRILL Header          |\n                    +--------------------------------+\n
      \                   |     Inner Ethernet Header      |\n                    +--------------------------------+\n
      \                   |        Ethernet Payload        |\n                    +--------------------------------+\n
      \                   |         Ethernet FCS           |\n                    +--------------------------------+\n
      \             Figure 2: An Ethernet Encapsulated TRILL Frame\n   In the case
      of media different from Ethernet, the header specific to\n   that media replaces
      the outer Ethernet header.  For example, Figure 3\n   shows a TRILL encapsulation
      over PPP.\n                    +--------------------------------+\n                    |
      \          PPP Header           |\n                    +--------------------------------+\n
      \                   |          TRILL Header          |\n                    +--------------------------------+\n
      \                   |     Inner Ethernet Header      |\n                    +--------------------------------+\n
      \                   |        Ethernet Payload        |\n                    +--------------------------------+\n
      \                   |             PPP FCS            |\n                    +--------------------------------+\n
      \                Figure 3: A PPP Encapsulated TRILL Frame\n   The outer header
      is link-specific and, although this document\n   specifies only [802.3] links,
      other links are allowed.\n   In both cases, the inner Ethernet header and the
      Ethernet Payload\n   come from the original frame and are encapsulated with
      a TRILL header\n   as they travel between RBridges.  Use of a TRILL header offers
      the\n   following benefits:\n   1. loop mitigation through use of a hop count
      field;\n   2. elimination of the need for end-station VLAN and MAC address\n
      \     learning in transit RBridges;\n   3. direction of unicast frames towards
      the egress RBridge (this\n      enables unicast forwarding tables of transit
      RBridges to be sized\n      with the number of RBridges rather than the total
      number of end\n      nodes); and\n   4. provision of a separate VLAN tag for
      forwarding traffic between\n      RBridges, independent of the VLAN of the native
      frame.\n   When forwarding unicast frames between RBridges, the outer header
      has\n   the MAC destination address of the next hop Rbridge, to avoid frame\n
      \  duplication if the inter-RBridge link is multi-access.  This also\n   enables
      multipathing of unicast, since the transmitting RBridge can\n   specify the
      next hop.  Having the outer header specify the\n   transmitting RBridge as the
      source address ensures that any bridges\n   inside the Ethernet cloud will not
      get confused, as they might be if\n   multipathing is in use and they were to
      see the original source or\n   ingress RBridge in the outer header.\n"
    title: 2.3.  RBridge Encapsulation Architecture
  - contents:
    - "2.4.  Forwarding Overview\n   RBridges are true routers in the sense that,
      in the forwarding of a\n   frame by a transit RBridge, the outer Layer 2 header
      is replaced at\n   each hop with an appropriate Layer 2 header for the next
      hop, and a\n   hop count is decreased.  Despite these modifications of the outer\n
      \  Layer 2 header and the hop count in the TRILL header, the original\n   encapsulated
      frame is preserved, including the original frame's VLAN\n   tag.  See Section
      4.6 for more details.\n   From a forwarding standpoint, transit frames may be
      classified into\n   two categories: known-unicast and multi-destination.  Layer
      2 control\n   frames and TRILL control and TRILL other frames are not transit\n
      \  frames, are not forwarded by RBridges, and are not included in these\n   categories.\n"
    - contents:
      - "2.4.1.  Known-Unicast\n   These frames have a unicast inner MAC destination
        address\n   (Inner.MacDA) and are those for which the ingress RBridge knows
        the\n   egress RBridge for the destination MAC address in the frame's VLAN.\n
        \  Such frames are forwarded Rbridge hop by Rbridge hop to their egress\n
        \  Rbridge.\n"
      title: 2.4.1.  Known-Unicast
    - contents:
      - "2.4.2.  Multi-Destination\n   These are frames that must be delivered to
        multiple destinations.\n   Multi-destination frames include the following:\n
        \  1. unicast frames for which the location of the destination is\n      unknown:
        the Inner.MacDA is unicast, but the ingress RBridge does\n      not know its
        location in the frame's VLAN.\n   2. multicast frames for which the Layer
        2 destination address is\n      derived from an IP multicast address: the
        Inner.MacDA is\n      multicast, from the set of Layer 2 multicast addresses
        derived\n      from IPv4 [RFC1112] or IPv6 [RFC2464] multicast addresses.
        \ These\n      frames are handled somewhat differently in different subcases:\n
        \     2.1. IGMP [RFC3376] and MLD [RFC2710] multicast group membership\n           reports\n
        \     2.2. IGMP [RFC3376] and MLD [RFC2710] queries and MRD [RFC4286]\n           announcement
        messages\n      2.3. other IP-derived Layer 2 multicast frames\n   3. multicast
        frames for which the Layer 2 destination address is not\n      derived from
        an IP multicast address: the Inner.MacDA is\n      multicast, and not from
        the set of Layer 2 multicast addresses\n      derived from IPv4 or IPv6 multicast
        addresses.\n   4. broadcast frames: the Inner.MacDA is broadcast\n      (FF-FF-FF-FF-FF-FF).\n
        \  RBridges build distribution trees (see Section 4.5) and use these\n   trees
        for forwarding multi-destination frames.  Each distribution\n   tree reaches
        all RBridges in the campus, is shared across all VLANs,\n   and may be used
        for the distribution of a native frame that is in any\n   VLAN.  However,
        the distribution of any particular frame on a\n   distribution tree is pruned
        in different ways for different cases to\n   avoid unnecessary propagation
        of the frame.\n"
      title: 2.4.2.  Multi-Destination
    title: 2.4.  Forwarding Overview
  - contents:
    - "2.5.  RBridges and VLANs\n   A VLAN is a way to partition end nodes in a campus
      into different\n   Layer 2 communities [802.1Q-2005].  Use of VLANs requires\n
      \  configuration.  By default, the port of receipt determines the VLAN\n   of
      a frame sent by an end station.  End stations can also explicitly\n   insert
      this information in a frame.\n   IEEE [802.1Q-2005] bridges can be configured
      to support multiple\n   customer VLANs over a single simple link by inserting/removing
      a VLAN\n   tag in the frame.  VLAN tags used by TRILL have the same format as\n
      \  VLAN tags defined in IEEE [802.1Q-2005].  As shown in Figure 2, there\n   are
      two places where such tags may be present in a TRILL-encapsulated\n   frame
      sent over an IEEE [802.3] link: one in the outer header\n   (Outer.VLAN) and
      one in the inner header (Inner.VLAN).  Inner and\n   outer VLANs are further
      discussed in Section 4.1.\n   RBridges enforce delivery of a native frame originating
      in a\n   particular VLAN only to other links in the same VLAN; however, there\n
      \  are a few differences in the handling of VLANs between an RBridge\n   campus
      and an 802.1 bridged LAN as described below.\n   (See Section 4.2.4 for further
      discussion of TRILL IS-IS operation on\n   a link.)\n"
    - contents:
      - "2.5.1.  Link VLAN Assumptions\n   Certain configurations of bridges may cause
        partitions of a VLAN on a\n   link.  For such configurations, a frame sent
        by one RBridge to a\n   neighbor on that link might not arrive, if tagged
        with a VLAN that is\n   partitioned due to bridge configuration.\n   TRILL
        requires at least one VLAN per link that gives full\n   connectivity to all
        the RBridges on that link.  The default VLAN is\n   1, though RBridges may
        be configured to use a different VLAN.  The\n   DRB dictates to the other
        RBridges which VLAN to use.\n   Since there will be only one appointed forwarder
        for any VLAN, say,\n   VLAN-x, on a link, if bridges are configured to cause
        VLAN-x to be\n   partitioned on a link, some VLAN-x end nodes on that link
        may be\n   orphaned (unable to communicate with the rest of the campus).\n
        \  It is possible for bridge and port configuration to cause VLAN\n   mapping
        on a link (where a VLAN-x frame turns into a VLAN-y frame).\n   TRILL detects
        this by inserting a copy of the outer VLAN into TRILL-\n   Hello messages
        and checking it on receipt.  If detected, it takes\n   steps to ensure that
        there is at most a single appointed forwarder on\n   the link, to avoid possible
        frame duplication or loops (see Section\n   4.4.5).\n   TRILL behaves as conservatively
        as possible, avoiding loops rather\n   than avoiding partial connectivity.
        \ As a result, lack of\n   connectivity may result from bridge or port misconfiguration.\n"
      title: 2.5.1.  Link VLAN Assumptions
    title: 2.5.  RBridges and VLANs
  - contents:
    - "2.6.  RBridges and IEEE 802.1 Bridges\n   RBridge ports are, except as described
      below, layered on top of IEEE\n   [802.1Q-2005] port facilities.\n"
    - contents:
      - "2.6.1.  RBridge Ports and 802.1 Layering\n   RBridge ports make use of [802.1Q-2005]
        port VLAN and priority\n   processing.  In addition, they MAY implement other
        lower-level 802.1\n   protocols as well as protocols for the link in use,
        such as PAUSE\n   (Annex 31B of [802.3]), port-based access control [802.1X],
        MAC\n   security [802.1AE], or link aggregation [802.1AX].\n   However, RBridges
        do not use spanning tree and do not block ports as\n   spanning tree does.
        \ Figure 4 shows a high-level diagram of an\n   RBridge with one port connected
        to an IEEE 802.3 link.  Single lines\n   represent the flow of control information,
        double lines the flow of\n   both frames and control information.\n                          +-----------------------------------------\n
        \                         |                RBridge\n                          |\n
        \                         |     Forwarding Engine, IS-IS, etc.\n                          |
        Processing of native and TRILL frames\n                          |\n                          +----+---+--------++----------------------\n
        \                              |   |        ||         other ports...\n                 +-------------+
        \  |        ||\n                 |                 |        ||\n    +------------+-------------+
        \  |        ||\n    |         RBridge          |   |   +----++-------+ <-
        EISS\n    |                          |   |   |             |\n    | High-Level
        Control Frame |   |   | 802.1Q-2005 |\n    |  Processing (BPDU, VRP)  |   |
        \  |  Port VLAN  |\n    |                          |   |   |  & Priority |\n
        \   +-----------++-------------+   |   |  Processing |\n                ||
        \                |   |             |\n      +---------++-----------------+---+-------------+
        <-- ISS\n      |                                              |\n      |    802.1/802.3
        Low-Level Control Frame       |\n      |    Processing, Port/Link Control
        Logic       |\n      |                                              |\n      +-----------++---------------------------------+\n
        \                 ||\n                  ||        +------------+\n                  ||
        \       | 802.3 PHY  |\n                  |+--------+ (Physical  +---------
        802.3\n                  +---------+ Interface) +--------- Link\n                            |
        \           |\n                            +------------+\n                       Figure
        4: RBridge Port Model\n   The upper interface to the low-level port/link control
        logic\n   corresponds to the Internal Sublayer Service (ISS) in [802.1Q-2005].\n
        \  In RBridges, high-level control frames are processed above the ISS\n   interface.\n
        \  The upper interface to the port VLAN and priority processing\n   corresponds
        to the Extended Internal Sublayer Service (EISS) in\n   [802.1Q-2005].  In
        RBridges, native and TRILL frames are processed\n   above the EISS interface
        and are subject to port VLAN and priority\n   processing.\n"
      title: 2.6.1.  RBridge Ports and 802.1 Layering
    - contents:
      - "2.6.2.  Incremental Deployment\n   Because RBridges are compatible with IEEE
        [802.1Q-2005] customer\n   bridges, except as discussed in this document,
        a bridged LAN can be\n   upgraded by incrementally replacing such bridges
        with RBridges.\n   Bridges that have not yet been replaced are transparent
        to RBridge\n   traffic.  The physical links directly interconnected by such
        bridges,\n   together with the bridges themselves, constitute bridged LANs.
        \ These\n   bridged LANs appear to RBridges to be multi-access links.\n   If
        the bridges replaced by RBridges were default configuration\n   bridges, then
        their RBridge replacements will not require\n   configuration.\n   Because
        RBridges, as described in this document, only provide\n   customer services,
        they cannot replace provider bridges or provider\n   backbone bridges, just
        as a customer bridge can't replace a provider\n   bridge.  However, such provider
        devices can be part of the bridged\n   LAN between RBridges.  Extension of
        TRILL to support provider\n   services is left for future work and will be
        separately documented.\n   Of course, if the bridges replaced had any port
        level protocols\n   enabled, such as port-based access control [802.1X] or
        MAC security\n   [802.1AE], replacement RBridges would need the same port
        level\n   protocols enabled and similarly configured.  In addition, the\n
        \  replacement RBridges would have to support the same link type and\n   link
        level protocols as the replaced bridges.\n   An RBridge campus will work best
        if all IEEE [802.1D] and\n   [802.1Q-2005] bridges are replaced with RBridges,
        assuming the\n   RBridges have the same speed and capacity as the bridges.
        \ However,\n   there may be intermediate states, where only some bridges have
        been\n   replaced by RBridges, with inferior performance.\n   See Appendix
        A for further discussion of incremental deployment.\n"
      title: 2.6.2.  Incremental Deployment
    title: 2.6.  RBridges and IEEE 802.1 Bridges
  title: 2.  RBridges
- contents:
  - "3.  Details of the TRILL Header\n   This section specifies the TRILL header.
    \ Section 4 below provides\n   other RBridge design details.\n"
  - contents:
    - "3.1.  TRILL Header Format\n   The TRILL header is shown in Figure 5 and is
      independent of the data\n   link layer used.  When that layer is IEEE [802.3],
      it is prefixed\n   with the 16-bit TRILL Ethertype [RFC5342], making it 64-bit
      aligned.\n   If Op-Length is a multiple of 64 bits, then 64-bit alignment is\n
      \  normally maintained for the content of an encapsulated frame.\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  | V | R |M|Op-Length| Hop Count |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Egress RBridge Nickname     |  Ingress RBridge Nickname     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Options...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n                          Figure
      5: TRILL Header\n   The header contains the following fields that are described
      in the\n   sections referenced:\n   o  V (Version): 2-bit unsigned integer.
      \ See Section 3.2.\n   o  R (Reserved): 2 bits.  See Section 3.3.\n   o  M (Multi-destination):
      1 bit.  See Section 3.4.\n   o  Op-Length (Options Length): 5-bit unsigned integer.
      \ See Section\n      3.5.\n   o  Hop Count: 6-bit unsigned integer.  See Section
      3.6.\n   o  Egress RBridge Nickname: 16-bit identifier.  See Section 3.7.1.\n
      \  o  Ingress RBridge Nickname: 16-bit identifier.  See Section 3.7.2.\n   o
      \ Options: present if Op-Length is non-zero.  See Section 3.8.\n"
    title: 3.1.  TRILL Header Format
  - contents:
    - "3.2.  Version (V)\n   Version (V) is a 2-bit field.  Version zero of TRILL
      is specified in\n   this document.  An RBridge RB1 MUST check the V field in
      a received\n   TRILL-encapsulated frame.  If the V field has a value not recognized\n
      \  by RB1, then RB1 MUST silently discard the frame.  The allocation of\n   new
      TRILL Version numbers requires an IETF Standards Action.\n"
    title: 3.2.  Version (V)
  - contents:
    - "3.3.  Reserved (R)\n   The two R bits are reserved for future use in extensions
      to this\n   version zero of the TRILL protocol.  They MUST be set to zero when\n
      \  the TRILL header is added by an ingress RBridge, transparently copied\n   but
      otherwise ignored by transit RBridges, and ignored by egress\n   RBridges.  The
      allocation of reserved TRILL header bits requires an\n   IETF Standards Action.\n"
    title: 3.3.  Reserved (R)
  - contents:
    - "3.4.  Multi-destination (M)\n   The Multi-destination bit (see Section 2.4.2)
      indicates that the\n   frame is to be delivered to a class of destination end
      stations via a\n   distribution tree and that the egress RBridge nickname field\n
      \  specifies this tree.  In particular:\n   o  M = 0 (FALSE) - The egress RBridge
      nickname contains a nickname of\n      the egress Rbridge for a known unicast
      MAC address.\n   o  M = 1 (TRUE) - The egress RBridge nickname field contains
      a\n      nickname that specifies a distribution tree.  This nickname is\n      selected
      by the ingress RBridge for a TRILL Data frame or by the\n      source RBridge
      for a TRILL ESADI frame.\n"
    title: 3.4.  Multi-destination (M)
  - contents:
    - "3.5.  Op-Length\n   There are provisions to express in the TRILL header that
      a frame is\n   using an optional capability and to encode information into the\n
      \  header in connection with that capability.\n   The Op-Length header field
      gives the length of the TRILL header\n   options in units of 4 octets, which
      allows up to 124 octets of\n   options area.  If Op-Length is zero, there are
      no options present.\n   If options are present, they follow immediately after
      the Ingress\n   Rbridge Nickname field.\n   See Section 3.8 for more information
      on TRILL header options.\n"
    title: 3.5.  Op-Length
  - contents:
    - "3.6.  Hop Count\n   The Hop Count field is a 6-bit unsigned integer.  An Rbridge
      drops\n   frames received with a hop count of zero, otherwise it decrements
      the\n   hop count.  (This behavior is different from IPv4 and IPv6 in order\n
      \  to support the later addition of a traceroute-like facility that\n   would
      be able to get a hop count exceeded from an egress RBridge.)\n   For known unicast
      frames, the ingress RBridge SHOULD set the Hop\n   Count in excess of the number
      of RBridge hops it expects to the\n   egress RBridge to allow for alternate
      routing later in the path.\n   For multi-destination frames, the Hop Count SHOULD
      be set by the\n   ingress RBridge (or source RBridge for a TRILL ESADI frame)
      to at\n   least the expected number of hops to the most distant RBridge.  To\n
      \  accomplish this, RBridge RBn calculates, for each branch from RBn of\n   the
      specified distribution tree rooted at RBi, the maximum number of\n   hops in
      that branch.\n   Multi-destination frames are of particular danger because a
      loop\n   involving one or more distribution tree forks could result in the\n
      \  rapid generation of multiple copies of the frame, even with the\n   normal
      hop count mechanism.  It is for this reason that multi-\n   destination frames
      are subject to a stringent Reverse Path Forwarding\n   Check and other checks
      as described in Section 4.5.2.  As an optional\n   additional traffic control
      measure, when forwarding a multi-\n   destination frame onto a distribution
      tree branch, transit RBridge\n   RBm MAY decrease the hop count by more than
      1, unless decreasing the\n   hop count by more than 1 would result in a hop
      count insufficient to\n   reach all destinations in that branch of the tree
      rooted at RBi.\n   Using a hop count close or equal to the minimum needed on
      multi-\n   destination frames provides additional protection against problems\n
      \  with temporary loops when forwarding.\n   Although the RBridge MAY decrease
      the hop count of multi-destination\n   frames by more than 1, under the circumstances
      described above, the\n   RBridge forwarding a frame MUST decrease the hop count
      by at least 1,\n   and discards the frame if it cannot do so because the hop
      count is 0.\n   The option to decrease the hop count by more than 1 under the\n
      \  circumstances described above applies only to multi-destination\n   frames,
      not to known unicast frames.\n"
    title: 3.6.  Hop Count
  - contents:
    - "3.7.  RBridge Nicknames\n   Nicknames are 16-bit dynamically assigned quantities
      that act as\n   abbreviations for RBridges' IS-IS IDs to achieve a more compact\n
      \  encoding and can be used to specify potentially different trees with\n   the
      same root.  This assignment allows specifying up to 2**16\n   RBridges; however,
      the value 0x0000 is reserved to indicate that a\n   nickname is not specified,
      the values 0xFFC0 through 0xFFFE are\n   reserved for future specification,
      and the value 0xFFFF is\n   permanently reserved.  RBridges piggyback a nickname
      acquisition\n   protocol on the link state protocol (see Section 3.7.3) to acquire\n
      \  one or more nicknames unique within the campus.\n"
    - contents:
      - "3.7.1.  Egress RBridge Nickname\n   There are two cases for the contents
        of the egress RBridge nickname\n   field, depending on the M bit (see Section
        3.4).  The nickname is\n   filled in by the ingress RBridge for TRILL Data
        frames and by the\n   source RBridge for TRILL ESADI frames.\n   o  For known
        unicast TRILL Data frames, M == 0 and the egress RBridge\n      nickname field
        specifies the egress RBridge; that is, it specifies\n      the RBridge that
        needs to remove the TRILL encapsulation and\n      forward the native frame.
        \ Once the egress nickname field is set,\n      it MUST NOT be changed by
        any subsequent transit RBridge.\n   o  For multi-destination TRILL Data frames
        and for TRILL ESADI\n      frames, M == 1.  The egress RBridge nickname field
        contains a\n      nickname specifying the distribution tree selected to be
        used to\n      forward the frame.  This root nickname MUST NOT be changed
        by\n      transit RBridges.\n"
      title: 3.7.1.  Egress RBridge Nickname
    - contents:
      - "3.7.2.  Ingress RBridge Nickname\n   The ingress RBridge nickname is set
        to a nickname of the ingress\n   RBridge for TRILL Data frames and to a nickname
        of the source RBridge\n   for TRILL ESADI frames.  If the RBridge setting
        the ingress nickname\n   has multiple nicknames, it SHOULD use the same nickname
        in the\n   ingress field whenever it encapsulates a frame with any particular\n
        \  Inner.MacSA and Inner.VLAN value.  This simplifies end node learning.\n
        \  Once the ingress nickname field is set, it MUST NOT be changed by any\n
        \  subsequent transit RBridge.\n"
      title: 3.7.2.  Ingress RBridge Nickname
    - contents:
      - "3.7.3.  RBridge Nickname Selection\n   The nickname selection protocol is
        piggybacked on TRILL IS-IS as\n   follows:\n   o  The nickname or nicknames
        being used by an RBridge are carried in\n      an IS-IS TLV (type-length-value
        data element) along with a\n      priority of use value [RFC6326].  Each RBridge
        chooses its own\n      nickname or nicknames.\n   o  Nickname values MAY be
        configured.  An RBridge that has been\n      configured with one or more nickname
        values will have priority for\n      those nickname values over all Rbridges
        with non-configured\n      nicknames.\n   o  The nickname value 0x0000 and
        the values from 0xFFC0 through\n      0xFFFF are reserved and MUST NOT be
        selected by or configured for\n      an RBridge.  The value 0x0000 is used
        to indicate that a nickname\n      is not known.\n   o  The priority of use
        field reported with a nickname is an unsigned\n      8-bit value, where the
        most significant bit (0x80) indicates that\n      the nickname value was configured.
        \ The bottom 7 bits have the\n      default value 0x40, but MAY be configured
        to be some other value.\n      Additionally, an RBridge MAY increase its priority
        after holding a\n      nickname for some amount of time.  However, the most
        significant\n      bit of the priority MUST NOT be set unless the nickname
        value was\n      configured.\n   o  Once an RBridge has successfully acquired
        a nickname, it SHOULD\n      attempt to reuse it in the case of a reboot.\n
        \  o  Each RBridge is responsible for ensuring that its nickname or each\n
        \     of its nicknames is unique.  If RB1 chooses nickname x, and RB1\n      discovers,
        through receipt of an LSP for RB2 at any later time,\n      that RB2 has also
        chosen x, then the RBridge or pseudonode with\n      the numerically higher
        IS-IS ID (LAN ID) keeps the nickname, or if\n      there is a tie in priority,
        the RBridge with the numerically\n      higher IS-IS System ID keeps the nickname,
        and the other RBridge\n      MUST select a new nickname.  This can require
        an RBridge with a\n      configured nickname to select a replacement nickname.\n
        \  o  To minimize the probability of nickname collisions, an RBridge\n      selects
        a nickname randomly from the apparently available\n      nicknames, based
        on its copy of the link state.  This random\n      selection can be by the
        RBridge hashing some of its parameters,\n      e.g., SystemID, time and date,
        and other entropy sources, such as\n      those given in [RFC4086], each time
        or by the RBridge using such\n      hashing to create a seed and making any
        selections based on\n      pseudo-random numbers generated from that seed
        [RFC4086].  The\n      random numbers or seed and the algorithm used SHOULD
        make\n      uniformly distributed selections over the available nicknames.\n
        \     Convergence to a nickname-collision-free campus is accelerated by\n
        \     selecting new nicknames only from those that appear to be\n      available
        and by having the highest priority nickname involved in\n      a nickname
        conflict retain its value.  There is no reason for all\n      Rbridges to
        use the same algorithm for selecting nicknames.\n   o  If two RBridge campuses
        merge, then transient nickname collisions\n      are possible.  As soon as
        each RBridge receives the LSPs from the\n      other RBridges, the RBridges
        that need to change nicknames select\n      new nicknames that do not, to
        the best of their knowledge, collide\n      with any existing nicknames.  Some
        RBridges may need to change\n      nicknames more than once before the situation
        is resolved.\n   o  To minimize the probability of a new RBridge usurping
        a nickname\n      already in use, an RBridge SHOULD wait to acquire the link
        state\n      database from a neighbor before it announces any nicknames that\n
        \     were not configured.\n   o  An RBridge by default has only a single
        nickname but MAY be\n      configured to request multiple nicknames.  Each
        such nickname\n      would specify a shortest path tree with the RBridge as
        root but,\n      since the tree number is used in tiebreaking when there are\n
        \     multiple equal cost paths (see Section 4.5.1), the trees for the\n      different
        nicknames will likely utilize different links.  Because\n      of the potential
        tree computation load it imposes, this capability\n      to request multiple
        nicknames for an RBridge should be used\n      sparingly.  For example, it
        should be used at a few RBridges that,\n      because of campus topology,
        are particularly good places from\n      which to calculate multiple different
        shortest path distribution\n      trees.  Such trees need separate nicknames
        so traffic can be\n      multipathed across them.\n   o  If it is desired
        for a pseudonode to be a tree root, the DRB MAY\n      request one or more
        nicknames in the pseudonode LSP.\n   Every nickname in use in a campus identifies
        an RBridge (or\n   pseudonode) and every nickname designates a distribution
        tree rooted\n   at the RBridge (or pseudonode) it identifies.  However, only
        a\n   limited number of these potential distribution trees are actually\n
        \  computed by all the RBridges in a campus as discussed in Section 4.5.\n"
      title: 3.7.3.  RBridge Nickname Selection
    title: 3.7.  RBridge Nicknames
  - contents:
    - "3.8.  TRILL Header Options\n   All Rbridges MUST be able to skip the number
      of 4-octet chunks\n   indicated by the Op-Length field (see Section 3.5) in
      order to find\n   the inner frame, since RBridges must be able to find the destination\n
      \  MAC address and VLAN tag in the inner frame.  (Transit RBridges need\n   such
      information to filter VLANs, IP multicast, and the like.  Egress\n   Rbridges
      need to find the inner header to correctly decapsulate and\n   handle the inner
      frame.)\n   To ensure backward-compatible safe operation, when Op-Length is
      non-\n   zero indicating that options are present, the top two bits of the\n
      \  first octet of the options area are specified as follows:\n               +------+------+----+----+----+----+----+----+\n
      \              | CHbH | CItE |          Reserved           |\n               +------+------+----+----+----+----+----+----+\n
      \               Figure 6: Options Area Initial Flags Octet\n   If the CHbH (Critical
      Hop-by-Hop) bit is one, one or more critical\n   hop-by-hop options are present.
      \ Transit RBridges that do not support\n   all of the critical hop-by-hop options
      present, for example, an\n   RBridge that supported no options, MUST drop the
      frame.  If the CHbH\n   bit is zero, the frame is safe, from the point of view
      of options\n   processing, for a transit RBridge to forward, regardless of what\n
      \  options that RBridge does or does not support.  A transit RBridge\n   that
      supports none of the options present MUST transparently forward\n   the options
      area when it forwards a frame.\n   If the CItE (Critical Ingress-to-Egress)
      bit is one, one or more\n   critical ingress-to-egress options are present.
      \ If it is zero, no\n   such options are present.  If either CHbH or CItE is
      non-zero, egress\n   RBridges that don't support all critical options present,
      for\n   example, an RBridge that supports no options, MUST drop the frame.\n
      \  If both CHbH and CItE are zero, the frame is safe, from the point of\n   view
      of options, for any egress RBridge to process, regardless of\n   what options
      that RBridge does or does not support.\n   Options, including the meaning of
      the bits labeled as Reserved in\n   Figure 6, will be further specified in other
      documents and are\n   expected to include provisions for hop-by-hop and ingress-to-egress\n
      \  options as well as critical and non-critical options.\n   Note: Most RBridge
      implementations are expected to be optimized for\n      the simplest and most
      common cases of frame forwarding and\n      processing.  The inclusion of options
      may, and the inclusion of\n      complex or lengthy options likely will, cause
      frame processing\n      using a \"slow path\" with inferior performance to \"fast
      path\"\n      processing.  Limited slow path throughput may cause such frames
      to\n      be discarded.\n"
    title: 3.8.  TRILL Header Options
  title: 3.  Details of the TRILL Header
- contents:
  - "4.  Other RBridge Design Details\n   Section 3 above specifies the TRILL header,
    while this section\n   specifies other RBridge design details.\n"
  - contents:
    - "4.1.  Ethernet Data Encapsulation\n   TRILL data and ESADI frames in transit
      on Ethernet links are\n   encapsulated with an outer Ethernet header (see Figure
      2).  This\n   outer header looks, to a bridge on the path between two RBridges,\n
      \  like the header of a regular Ethernet frame; therefore, bridges\n   forward
      the frame as they normally would.  To enable RBridges to\n   distinguish such
      TRILL Data frames, a new TRILL Ethertype (see\n   Section 7.2) is used in the
      outer header.\n   Figure 7 details a TRILL Data frame with an outer VLAN tag
      traveling\n   on an Ethernet link as shown at the top of the figure, that is,\n
      \  between transit RBridges RB3 and RB4.  The native frame originated at\n   end
      station ESa, was encapsulated by ingress RBridge RB1, and will\n   ultimately
      be decapsulated by egress RBridge RB2 and delivered to\n   destination end station
      ESb.  The encapsulation shown has the\n   advantage, if TRILL options are absent
      or the length of such options\n   is a multiple of 64 bits, of aligning the
      original Ethernet frame at\n   a 64-bit boundary.\n   When a TRILL Data frame
      is carried over an Ethernet cloud, it has\n   three pairs of addresses:\n   o
      \ Outer Ethernet Header: Outer Destination MAC Address (Outer.MacDA)\n      and
      Outer Source MAC Address (Outer.MacSA): These addresses are\n      used to specify
      the next hop RBridge and the transmitting RBridge,\n      respectively.\n   o
      \ TRILL Header: Egress Nickname and Ingress Nickname.  These specify\n      nicknames
      of the egress and ingress RBridges, respectively, unless\n      the frame is
      multi-destination, in which case the Egress Nickname\n      specifies the distribution
      tree on which the frame is being sent.\n   o  Inner Ethernet Header: Inner Destination
      MAC Address (Inner.MacDA)\n      and Inner Source MAC Address (Inner.MacSA):
      These addresses are as\n      transmitted by the original end station, specifying,
      respectively,\n      the destination and source of the inner frame.\n   A TRILL
      Data frame also potentially has two VLAN tags, as discussed\n   in Sections
      4.1.2 and 4.1.3 below, that can carry two different VLAN\n   Identifiers and
      specify priority.\n   Flow:\n     +-----+  +-------+   +-------+       +-------+
      \  +-------+  +----+\n     | ESa +--+  RB1  +---+  RB3  +-------+  RB4  +---+
      \ RB2  +--+ESb |\n     +-----+  |ingress|   |transit|   ^   |transit|   |egress
      |  +----+\n              +-------+   +-------+   |   +-------+   +-------+\n
      \                                     |\n   Outer Ethernet Header:             |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
      \            Outer Destination MAC Address  (RB4)              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Outer Destination MAC Address | Outer Source MAC Address      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                Outer Source MAC Address  (RB3)                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |Ethertype = C-Tag [802.1Q-2005]| Outer.VLAN Tag Information    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  TRILL Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Ethertype = TRILL             | V | R |M|Op-Length| Hop Count |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Egress (RB2) Nickname         | Ingress (RB1) Nickname        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Inner Ethernet Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |             Inner Destination MAC Address  (ESb)              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Inner Destination MAC Address | Inner Source MAC Address      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                  Inner Source MAC Address  (ESa)              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |Ethertype = C-Tag [802.1Q-2005]| Inner.VLAN Tag Information    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Payload:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Ethertype of Original Payload |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n      |                                  Original
      Ethernet Payload    |\n      |                                                               |\n
      \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Frame
      Check Sequence:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |               New FCS (Frame Check Sequence)                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \            Figure 7: TRILL Data Encapsulation over Ethernet\n"
    - contents:
      - "4.1.1.  VLAN Tag Information\n   A \"VLAN Tag\" (formerly known as a Q-tag),
        also known as a \"C-tag\" for\n   customer tag, includes a VLAN ID and a priority
        field as shown in\n   Figure 8.  The \"VLAN ID\" may be zero, indicating that
        no VLAN is\n   specified, just a priority, although such frames are called
        \"priority\n   tagged\" rather than \"VLAN tagged\" [802.1Q-2005].\n   Use
        of [802.1ad] S-tags, also known as service tags, and use of\n   stacked tags,
        are beyond the scope of this document.\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \    | Priority  | C |                  VLAN ID                      |\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
        \                     Figure 8: VLAN Tag Information\n   As recommended in
        [802.1Q-2005], Rbridges SHOULD be implemented so as\n   to allow use of the
        full range of VLAN IDs from 0x001 through 0xFFE.\n   Rbridges MAY support
        a smaller number of simultaneously active VLAN\n   IDs.  VLAN ID zero is the
        null VLAN identifier and indicates that no\n   VLAN is specified while VLAN
        ID 0xFFF is reserved.\n   The VLAN ID 0xFFF MUST NOT be used.  Rbridges MUST
        discard any frame\n   they receive with an Outer.VLAN ID of 0xFFF.  Rbridges
        MUST discard\n   any frame for which they examine the Inner.VLAN ID and find
        it to be\n   0xFFF; such examination is required at all egress Rbridges that\n
        \  decapsulate a frame.\n   The \"C\" bit shown in Figure 8 is not used in
        the Inner.VLAN in TRILL.\n   It MUST be set to zero there by ingress RBridges,
        transparently\n   forwarded by transit RBridges, and is ignored by egress
        RBridges.\n   As specified in [802.1Q-2005], the priority field contains an\n
        \  unsigned value from 0 through 7 where 1 indicates the lowest\n   priority,
        7 the highest priority, and the default priority zero is\n   considered to
        be higher than priority 1 but lower than priority 2.\n   The [802.1ad] amendment
        to [802.1Q-2005] permits mapping some\n   adjacent pairs of priority levels
        into a single priority level with\n   and without drop eligibility.  Ongoing
        work in IEEE 802.1 (802.1az,\n   Appendix E) suggests the ability to configure
        \"priority groups\" that\n   have a certain guaranteed bandwidth.  RBridges
        ports MAY also\n   implement such options.  RBridges are not required to implement
        any\n   particular number of distinct priority levels but may treat one or\n
        \  more adjacent priority levels in the same fashion.\n   Frames with the
        same source address, destination address, VLAN, and\n   priority that are
        received on the same port as each other and are\n   transmitted on the same
        port MUST be transmitted in the order\n   received unless the RBridge classifies
        the frames into more fine-\n   grained flows, in which case this ordering
        requirement applies to\n   each such flow.  Frames in the same VLAN with the
        same priority and\n   received on the same port may be sent out different
        ports if\n   multipathing is in effect.  (See Appendix C.)\n   The C-Tag Ethertype
        [RFC5342] is 0x8100.\n"
      title: 4.1.1.  VLAN Tag Information
    - contents:
      - "4.1.2.  Inner VLAN Tag\n   The \"Inner VLAN Tag Information\" (Inner.VLAN)
        field contains the VLAN\n   tag information associated with the native frame
        when it was\n   ingressed or the VLAN tag information associated with a TRILL
        ESADI\n   frame when that frame was created.  When a TRILL frame passes through\n
        \  a transit RBridge, the Inner.VLAN MUST NOT be changed except when\n   VLAN
        mapping is being intentionally performed within that RBridge.\n   When a native
        frame arrives at an RBridge, the associated VLAN ID and\n   priority are determined
        as specified in [802.1Q-2005] (see Appendix D\n   and [802.1Q-2005], Section
        6.7).  If the RBridge is an appointed\n   forwarder for that VLAN and the
        delivery of the frame requires\n   transmission to one or more other links,
        this ingress RBridge forms a\n   TRILL Data frame with the associated VLAN
        ID and priority placed in\n   the Inner.VLAN information.\n   The VLAN ID
        is required at the ingress Rbridge as one element in\n   determining the appropriate
        egress Rbridge for a known unicast frame\n   and is needed at the ingress
        and every transit Rbridge for multi-\n   destination frames to correctly prune
        the distribution tree.\n"
      title: 4.1.2.  Inner VLAN Tag
    - contents:
      - "4.1.3.  Outer VLAN Tag\n   TRILL frames sent by an RBridge, except for some
        TRILL-Hello frames,\n   use an Outer.VLAN ID specified by the Designated RBridge
        (DRB) for\n   the link onto which they are being sent, referred to as the\n
        \  Designated VLAN.  For TRILL data and ESADI frames, the priority in\n   the
        Outer.VLAN tag SHOULD be set to the priority in the Inner.VLAN\n   tag.\n
        \  TRILL frames forwarded by a transit RBridge use the priority present\n
        \  in the Inner.VLAN of the frame as received.  TRILL Data frames are\n   sent
        with the priority associated with the corresponding native frame\n   when
        received (see Appendix D).  TRILL IS-IS frames SHOULD be sent\n   with priority
        7.\n   Whether an Outer.VLAN tag actually appears on the wire when a TRILL\n
        \  frame is sent depends on the configuration of the RBridge port\n   through
        which it is sent in the same way as the appearance of a VLAN\n   tag on a
        frame sent by an [802.1Q-2005] bridge depends on the\n   configuration of
        the bridge port (see Section 4.9.2).\n"
      title: 4.1.3.  Outer VLAN Tag
    - contents:
      - "4.1.4.  Frame Check Sequence (FCS)\n   Each Ethernet frame has a single Frame
        Check Sequence (FCS) that is\n   computed to cover the entire frame, for detecting
        frame corruption\n   due to bit errors on a link.  Thus, when a frame is encapsulated,
        the\n   original FCS is not included but is discarded.  Any received frame\n
        \  for which the FCS check fails SHOULD be discarded (this may not be\n   possible
        in the case of cut through forwarding).  The FCS normally\n   changes on encapsulation,
        decapsulation, and every TRILL hop due to\n   changes in the outer destination
        and source addresses, the\n   decrementing of the hop count, etc.\n   Although
        the FCS is normally calculated just before transmission, it\n   is desirable,
        when practical, for an FCS to accompany a frame within\n   an RBridge after
        receipt.  That FCS could then be dynamically updated\n   to account for changes
        to the frame during Rbridge processing and\n   used for transmission or checked
        against the FCS calculated for frame\n   transmission.  This optional, more
        continuous use of an FCS would be\n   helpful in detecting some internal RBridge
        failures such as memory\n   errors.\n"
      title: 4.1.4.  Frame Check Sequence (FCS)
    title: 4.1.  Ethernet Data Encapsulation
  - contents:
    - "4.2.  Link State Protocol (IS-IS)\n   TRILL uses an extension of IS-IS [ISO10589]
      [RFC1195] as its routing\n   protocol.  IS-IS has the following advantages:\n
      \  o  It runs directly over Layer 2, so therefore it may be run without\n      configuration
      (no IP addresses need to be assigned).\n   o  It is easy to extend by defining
      new TLV (type-length-value) data\n      elements and sub-elements for carrying
      TRILL information.\n   This section describes TRILL use of IS-IS, except for
      the TRILL-Hello\n   protocol, which is described in Section 4.4, and the MTU-probe
      and\n   MTU-ack messages that are described in Section 4.3.\n"
    - contents:
      - "4.2.1.  IS-IS RBridge Identity\n   Each RBridge has a unique 48-bit (6-octet)
        IS-IS System ID.  This ID\n   may be derived from any of the RBridge's unique
        MAC addresses.\n   A pseudonode is assigned a 7-octet ID by the DRB that created
        it, by\n   taking a 6-octet ID owned by the DRB, and appending another octet.\n
        \  The 6-octet ID used to form a pseudonode ID SHOULD be the DRB's ID\n   unless
        the DRB has to create IDs for pseudonodes for more than 255\n   links.  The
        only constraint for correct operation is that the 7-octet\n   ID be unique
        within the campus, and that the 7th octet be nonzero.\n   An RBridge has a
        7-octet ID consisting of its 6-octet system ID\n   concatenated with a zero
        octet.\n   In this document, we use the term \"IS-IS ID\" to refer to the
        7-octet\n   quantity that can be either the ID of an RBridge or a pseudonode.\n"
      title: 4.2.1.  IS-IS RBridge Identity
    - contents:
      - "4.2.2.  IS-IS Instances\n   TRILL implements a separate IS-IS instance from
        any used by Layer 3,\n   that is, different from the one used by routers.
        \ Layer 3 IS-IS\n   frames must be distinguished from TRILL IS-IS frames even
        when those\n   Layer 3 IS-IS frames are transiting an RBridge campus.\n   Layer
        3 IS-IS native frames have special multicast destination\n   addresses specified
        for that purpose, such as AllL1ISs or AllL2ISs.\n   When they are TRILL encapsulated,
        these multicast addresses appear as\n   the Inner.MacDA and the Outer.MacDA
        will be the All-RBridges\n   multicast address.\n   Within TRILL, there is
        an IS-IS instance across all Rbridges in the\n   campus as described in Section
        4.2.3.  This instance uses TRILL IS-IS\n   frames that are distinguished by
        having a different Ethertype\n   \"L2-IS-IS\".  Additionally, for TRILL IS-IS
        frames that are multicast,\n   there is a distinct multicast destination address
        of\n   All-IS-IS-RBridges.  TRILL IS-IS frames do not have a TRILL header.\n
        \  ESADI is a separate protocol from the IS-IS instance implemented by\n   all
        the RBridges.  There is a separate ESADI instance for each VLAN,\n   and ESADI
        frames are encapsulated just like TRILL Data frames.  After\n   the TRILL
        header, the ESADI frame has an inner Ethernet header with\n   the Inner.MacDA
        of \"All-ESADI-RBridges\" and the \"L2-IS-IS\" Ethertype\n   followed by the
        ESADI frame.\n"
      title: 4.2.2.  IS-IS Instances
    - contents:
      - "4.2.3.  TRILL IS-IS Frames\n   All Rbridges MUST participate in the TRILL
        IS-IS instance, which\n   constitutes a single Level 1 IS-IS area using the
        fixed area address\n   zero.  TRILL IS-IS frames are never forwarded by an
        RBridge but are\n   locally processed on receipt.  (Such processing may cause
        the RBridge\n   to send additional TRILL IS-IS frames.)\n   A TRILL IS-IS
        frame on an 802.3 link is structured as shown below.\n   All such frames are
        Ethertype encoded.  The RBridge port out of which\n   such a frame is sent
        will strip the outer VLAN tag if configured to\n   do so.\n   Outer Ethernet
        Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |             All-IS-IS-RBridges Multicast Address              |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | All-IS-IS-RBridges continued  | Source RBridge MAC Address    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |             Source RBridge MAC Address continued              |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |Ethertype = C-Tag [802.1Q-2005]| Outer.VLAN Tag Information    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |   L2-IS-IS Ethertype          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  IS-IS Payload:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | IS-IS Common Header, IS-IS PDU Specific Fields, IS-IS TLVs    |\n
        \  Frame Check Sequence:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                 FCS (Frame Check Sequence)                    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 9: TRILL IS-IS Frame Format\n   The VLAN specified
        in the Outer.VLAN information will be the\n   Designated VLAN for the link
        on which the frame is sent, except in\n   the case of some TRILL Hellos.\n"
      title: 4.2.3.  TRILL IS-IS Frames
    - contents:
      - "4.2.4.  TRILL Link Hellos, DRBs, and Appointed Forwarders\n   RBridges default
        to using TRILL Hellos unless, on a per-port basis,\n   they are configured
        to use P2P Hellos.  TRILL-Hello frames are\n   specified in Section 4.4.\n
        \  RBridges are normally configured to use P2P Hellos only when there\n   are
        exactly two of them on a link.  However, it can occur that\n   RBridges are
        misconfigured as to which type of hello to use.  This is\n   safe but may
        cause lack of RBridge-to-RBridge connectivity.  An\n   RBridge port configured
        to use P2P Hellos ignores TRILL Hellos, and\n   an RBridge port configured
        to use TRILL Hellos ignores P2P Hellos.\n   If any of the RBridge ports on
        a link is configured to use TRILL\n   Hellos, one of such RBridge ports using
        TRILL Hellos is elected DRB\n   (Designated RBridge) for the link.  This election
        is based on\n   configured priority (most significant field), and source MAC
        address,\n   as communicated by TRILL-Hello frames.  The DRB, as described
        in\n   Section 4.2.4.2, designates the VLAN to be used on the link for\n   inter-RBridge
        communication by the non-P2P RBridge ports and appoints\n   itself or other
        RBridges on the link as appointed forwarder (see\n   Section 4.2.4.3) for
        VLANs on the link.\n"
      - contents:
        - "4.2.4.1.  P2P Hello Links\n   RBridge ports can be configured to use IS-IS
          P2P Hellos.  This\n   implies that the port is a point-to-point link to
          another RBridge.\n   An RBridge MUST NOT provide any end-station (native
          frame) service on\n   a port configured to use P2P Hellos.\n   As with Layer
          3 IS-IS, such P2P ports do not participate in a DRB\n   election.  They
          send all frames VLAN tagged as being in the Desired\n   Designated VLAN
          configured for the port, although this tag may be\n   stripped if the port
          is so configured.  Since all traffic through the\n   port should be TRILL
          frames or Layer 2 control frames, such a port\n   cannot be an appointed
          forwarder.  RBridge P2P ports MUST use the\n   IS-IS three-way handshake
          [RFC5303] so that extended circuit IDs are\n   associated with the link
          for tie breaking purposes (see Section\n   4.5.2).\n   Even if all simple
          links in a network are physically point-to-point,\n   if some of the nodes
          are bridges, the bridged LANs that include those\n   bridges appear to be
          multi-access links to attached RBridges.  This\n   would necessitate using
          TRILL Hellos for proper operation in many\n   cases.\n   While it is safe
          to erroneously configure ports as P2P, this may\n   result in lack of connectivity.\n"
        title: 4.2.4.1.  P2P Hello Links
      - contents:
        - "4.2.4.2.  Designated RBridge\n   TRILL IS-IS elects one RBridge for each
          LAN link to be the Designated\n   RBridge (DRB), that is, to have special
          duties.  The Designated\n   RBridge:\n   o  Chooses, for the link, and announces
          in its TRILL Hellos, the\n      Designated VLAN ID to be used for inter-RBridge
          communication.\n      This VLAN is used for all TRILL-encapsulated data
          and ESADI frames\n      and TRILL IS-IS frames except some TRILL-Hello frames.\n
          \  o  If the link is represented in the IS-IS topology as a pseudonode,\n
          \     chooses a pseudonode ID and announces that in its TRILL Hellos and\n
          \     issues an LSP on behalf of the pseudonode.\n   o  Issues CSNPs.\n
          \  o  For each VLAN-x appearing on the link, chooses an RBridge on the\n
          \     link to be the appointed VLAN-x forwarder (the DRB MAY choose\n      itself
          to be the appointed VLAN-x forwarder for all or some of the\n      VLANs).\n
          \  o  Before appointing a VLAN-x forwarder (including appointing\n      itself),
          wait at least its Holding Time (to ensure it is the DRB).\n   o  If configured
          to send TRILL-Hello frames, continues to send them\n      on all its enabled
          VLANs that have been configured in the\n      Announcing VLANs set of the
          DRB, which defaults to all enabled\n      VLANs.\n"
        title: 4.2.4.2.  Designated RBridge
      - contents:
        - "4.2.4.3.  Appointed VLAN-x Forwarder\n   The appointed VLAN-x forwarder
          for a link is responsible for the\n   following points.  In connection with
          the loop avoidance points, when\n   an appointed forwarder for a port is
          \"inhibited\", it drops any native\n   frames it receives and does not transmit
          but instead drops any native\n   frames it decapsulates, in the VLAN for
          which it is appointed.\n   o  Loop avoidance:\n      -  Inhibiting itself
          for a time, configurable per port from zero\n         to 30 seconds, which
          defaults to 30 seconds, after it sees a\n         root bridge change on
          the link (see Section 4.9.3.2).\n      -  Inhibiting itself for VLAN-x,
          if it has received a Hello in\n         which the sender asserts that it
          is appointed forwarder and\n         that is either\n         +  received
          on VLAN-x (has VLAN-x as its Outer.VLAN) or\n         +  was originally
          sent on VLAN-x as indicated inside the body\n            of the Hello.\n
          \     -  Optionally, not decapsulating a frame from ingress RBridge RBm\n
          \        unless it has RBm's LSP, and the root bridge on the link it is\n
          \        about to forward onto is not listed in RBm's list of root\n         bridges
          for VLAN-x.  This is known as the \"decapsulation check\"\n         or \"root
          bridge collision check\".\n   o  Unless inhibited (see above), receiving
          VLAN-x native traffic from\n      the link and forwarding it as appropriate.\n
          \  o  Receiving VLAN-x traffic for the link and, unless inhibited,\n      transmitting
          it in native form after decapsulating it as\n      appropriate.\n   o  Learning
          the MAC address of local VLAN-x nodes by looking at the\n      source address
          of VLAN-x frames from the link.\n   o  Optionally learning the port of local
          VLAN-x nodes based on any\n      sort of Layer 2 registration protocols,
          such as IEEE 802.11\n      association and authentication.\n   o  Keeping
          track of the { egress RBridge, VLAN, MAC address } of\n      distant VLAN-x
          end nodes, learned by looking at the fields\n      { ingress RBridge, Inner.VLAN
          ID, Inner.MacSA } from VLAN-x frames\n      being received for decapsulation
          onto the link.\n   o  Optionally observe native IGMP [RFC3376], MLD [RFC2710],
          and MRD\n      [RFC4286] frames to learn the presence of local multicast\n
          \     listeners and multicast routers.\n   o  Optionally listening to TRILL
          ESADI messages for VLAN-x to learn\n      { egress RBridge, VLAN-x, MAC
          address } triplets and the\n      confidence level of such explicitly advertised
          end nodes.\n   o  Optionally advertising VLAN-x end nodes, on links for
          which it is\n      appointed VLAN-x forwarder, in ESADI messages.\n   o
          \ Sending TRILL-Hello frames on VLAN-x unless the Announcing VLANs\n      set
          for the port has been configured to disable them.\n   o  Listening to BPDUs
          on the common spanning tree to learn the root\n      bridge, if any, for
          that link and to report in its LSP the\n      complete set of root bridges
          seen on any of its links for which it\n      is appointed forwarder for
          VLAN-x.\n   When an appointed forwarder observes that the DRB on a link
          has\n   changed, it no longer considers itself appointed for that link until\n
          \  appointed by the new DRB.\n"
        title: 4.2.4.3.  Appointed VLAN-x Forwarder
      - contents:
        - "4.2.4.4.  TRILL LSP Information\n   The information items in the TRILL
          IS-IS LSP that are mentioned\n   elsewhere in this document are listed below.
          \ Unless an item is\n   stated in the list below to be optional, it MUST
          be included.  Other\n   items MAY be included unless their inclusion is
          prohibited elsewhere\n   in this document.  The actual encoding of this
          information and the\n   IS-IS Type or sub-Type values for any new IS-IS
          TLV or sub-TLV data\n   elements are specified in separate documents [RFC6165]
          [RFC6326].\n   1. The IS-IS IDs of neighbors (pseudonodes as well as RBridges)
          of\n      RBridge RBn, and the cost of the link to each of those neighbors.\n
          \     RBridges MUST use the Extended IS Reachability TLV (#22, also\n      known
          as \"wide metric\" [RFC5305]) and MUST NOT use the IS\n      Reachability
          TLV (#2, also known as \"narrow metric\").  To\n      facilitate efficient
          operation without configuration and\n      consistent with [802.1D], RBridges
          SHOULD, by default, set the\n      cost of a link to the integer part of
          twenty trillion\n      (20,000,000,000,000) divided by the RBridge port's
          bit rate but\n      not more than 2**24-2 (16,777,214); for example, the
          cost for a\n      link accessed by a 1Gbps port would default to 20,000.
          \ (Note that\n      2**24-1 has a special meaning in IS-IS and would exclude
          the link\n      from SPF routes.)  However, the link cost MAY, by default,
          be\n      decreased for aggregated links and/or increased to not more than\n
          \     2**24-2 if the link appears to be a bridged LAN.  The tested MTU\n
          \     for the link (see Section 4.3) MAY be included via a sub-TLV.\n   2.
          The following information in connection with the nickname or each\n      of
          the nicknames of RBridge RBn:\n      2.1. The nickname value (2 octets).\n
          \     2.2. The unsigned 8-bit priority for RBn to have that nickname\n           (see
          Section 3.7.3).\n      2.3. The 16-bit unsigned priority of that nickname
          to becoming a\n           distribution tree root.\n   3. The maximum TRILL
          Header Version supported by RBridge RBn.\n   4. The following information,
          in addition to the per-nickname tree\n      root priority, in connection
          with distribution tree determination\n      and announcement.  (See Section
          4.5 for further details on how\n      this information is used.)\n      4.1.
          An unsigned 16-bit number that is the number of trees all\n           RBridges
          in the campus calculate if RBn has the highest\n           priority tree
          root.\n      4.2. A second unsigned 16-bit number that is the number of
          trees\n           RBn would like to use.\n      4.3. A third unsigned 16-bit
          number that is the maximum number of\n           distribution trees that
          RBn is able to calculate.\n      4.4. A first list of nicknames that are
          intended distribution\n           trees for all RBridges in the campus to
          calculate.\n      4.5. A second list of nicknames that are distribution
          trees RBn\n           would like to use when ingressing multi-destination
          frames.\n   5. The list of VLAN IDs of VLANs directly connected to RBn for
          links\n      on which RBn is the appointed forwarder for that VLAN.  (Note:
          An\n      RBridge may advertise that it is connected to additional VLANs
          in\n      order to receive additional frames to support certain VLAN-based\n
          \     features beyond the scope of this specification as mentioned in\n
          \     Section 4.8.4 and in a separate document concerning VLAN mapping\n
          \     inside RBridges.) RBridges may associate advertised connectivity\n
          \     to different groups of VLANs with specific nicknames they hold.\n
          \     In addition, the LSP contains the following information on a per-\n
          \     VLAN basis:\n      5.1. Per-VLAN Multicast Router attached flags:
          This is two bits of\n           information that indicate whether there
          is an IPv4 and/or\n           IPv6 multicast router attached to the Rbridge
          on that VLAN.\n           An RBridge that does not do IP multicast control
          snooping\n           MUST set both of these bits (see Section 4.5.4).  This\n
          \          information is used because IGMP [RFC3376] and MLD [RFC2710]\n
          \          Membership Reports MUST be transmitted to all links with IP\n
          \          multicast routers, and SHOULD NOT be transmitted to links\n           without
          such routers.  Also, all frames for IP-derived\n           multicast addresses
          MUST be transmitted to all links with IP\n           multicast routers (within
          a VLAN), in addition to links from\n           which an IP node has explicitly
          asked to join the group the\n           frame is for, except for some IP
          multicast addresses that\n           MUST be treated as broadcast.\n      5.2.
          Per-VLAN mandatory announcement of the set of IDs of Root\n           bridges
          for any of RBn's links on which RBn is appointed\n           forwarder for
          that VLAN.  Where MSTP (Multiple Spanning Tree\n           Protocol) is
          running on a link, this is the root bridge of\n           the CIST (Common
          and Internal Spanning Tree).  This is to\n           quickly detect cases
          where two Layer 2 clouds accidentally\n           get merged, and where
          there might otherwise temporarily be\n           two DRBs for the same VLAN
          on the same link.  (See Section\n           4.2.4.3.)\n      5.3. Optionally,
          per-VLAN Layer 2 multicast addresses derived from\n           IPv4 IGMP
          and IPv6 MLD notification messages received from\n           attached end
          nodes on that VLAN, indicating the location of\n           listeners for
          these multicast addresses (see Section 4.5.5).\n      5.4. Per-VLAN ESADI
          protocol participation flag, priority, and\n           holding time.  If
          this flag is one, it indicates that the\n           RBridge wishes to receive
          such TRILL ESADI frames (see\n           Section 4.2.5.1).\n      5.5. Per-VLAN
          appointed forwarder status lost counter (see Section\n           4.8.3).\n
          \  6. Optionally, the largest TRILL IS-IS frame that the RBridge can\n      handle
          using the originatingLSPBufferSize TLV #14 (see Section\n      4.3).\n   7.
          Optionally, a list of VLAN groups where address learning is shared\n      across
          that VLAN group (see Section 4.8.4).  Each VLAN group is a\n      list of
          VLAN IDs, where the first VLAN ID listed in a group, if\n      present,
          is the \"primary\" and the others are \"secondary\".  This is\n      to
          detect misconfiguration of features outside the scope of this\n      document.
          \ RBridges that do not support features such as \"shared\n      VLAN learning\"
          ignore this field.\n   8. Optionally, the Authentication TLV #10 (see Section
          6).\n"
        title: 4.2.4.4.  TRILL LSP Information
      title: 4.2.4.  TRILL Link Hellos, DRBs, and Appointed Forwarders
    - contents:
      - "4.2.5.  The TRILL ESADI Protocol\n   RBridges that are the appointed VLAN-x
        forwarder for a link MAY\n   participate in the TRILL ESADI protocol for that
        VLAN.  But all\n   transit RBridges MUST properly forward TRILL ESADI frames
        as if they\n   were multicast TRILL Data frames.  TRILL ESADI frames are structured\n
        \  like IS-IS frames but are always TRILL encapsulated on the wire as if\n
        \  they were TRILL Data frames.\n   Because of this forwarding, it appears
        to the ESADI protocol at an\n   RBridge that it is directly connected by a
        shared virtual link to all\n   other RBridges in the campus running ESADI
        for that VLAN.  RBridges\n   that do not implement the ESADI protocol or are
        not appointed\n   forwarder for that VLAN do not decapsulate or locally process
        any\n   TRILL ESADI frames they receive for that VLAN.  In other words, these\n
        \  frames are transparently tunneled through transit RBridges.  Such\n   transit
        RBridges treat them exactly as multicast TRILL Data frames\n   and no special
        processing is invoked due to such forwarding.\n   TRILL ESADI frames sent
        on an IEEE 802.3 link are structured as shown\n   below.  The outer VLAN tag
        will not be present if it was stripped by\n   the port out of which the frame
        was sent.\n   Outer Ethernet Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                Next Hop Destination Address                   |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Next Hop Destination Address  | Sending RBridge MAC Address   |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |               Sending RBridge Port MAC Address                |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |Ethertype = C-Tag [802.1Q-2005]| Outer.VLAN Tag Information    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  TRILL Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Ethertype = TRILL             | V | R |M|Op-Length| Hop Count |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Egress (Dist. Tree) Nickname  | Ingress (Origin) Nickname     |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Inner Ethernet Header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |             All-ESADI-RBridges Multicast Address              |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | All-ESADI-RBridges continued  | Origin RBridge MAC Address    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                Origin RBridge MAC Address continued           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |Ethertype = C-Tag [802.1Q-2005]| Inner.VLAN Tag Information    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Ethertype = L2-IS-IS          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  ESADI Payload (formatted as IS-IS):\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | IS-IS Common Header, IS-IS PDU Specific Fields, IS-IS TLVs    |\n
        \  Frame Check Sequence:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                  FCS (Frame Check Sequence)                   |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 10: TRILL ESADI Frame Format\n   The Next Hop Destination
        Address or Outer.MacDA is the All-RBridges\n   multicast address.  The VLAN
        specified in the Outer.VLAN information\n   will always be the Designated
        VLAN for the link on which the frame is\n   sent.  The V and R fields will
        be zero while the M field will be one.\n   The VLAN specified in the Inner.VLAN
        information will be the VLAN to\n   which the ESADI frame applies.  The Origin
        RBridge MAC Address or\n   Inner.MacSA MUST be a globally unique MAC address
        owned by the\n   RBridge originating the ESADI frame, for example, any of
        its port MAC\n   addresses, and each RBridge MUST use the same Inner.MacSA
        for all of\n   the ESADI frames that RBridge originates.\n"
      - contents:
        - "4.2.5.1.  TRILL ESADI Participation\n   An RBridge does not send any Hellos
          because of participation in the\n   ESADI protocol.  The information available
          in the TRILL IS-IS link\n   state database is sufficient to determine the
          ESADI DRB on the\n   virtual link for the ESADI protocol for each VLAN.
          \ In particular,\n   the link state database information for each RBridge
          includes the\n   VLANs, if any, for which that RBridge is participating
          in the ESADI\n   protocol, its priority for being selected as DRB for the
          ESADI\n   protocol for each of those VLANs, its holding time, and its IS-IS\n
          \  system ID for breaking ties in priority.\n   An RBridge need not perform
          any routing calculation because of\n   participation in the ESADI protocol.
          \ Since all RBridges\n   participating in ESADI for a particular VLAN appear
          to be connected\n   to the same single virtual link, there are no routing
          decisions to be\n   made.  A participating RBridge merely transmits the
          ESADI frames it\n   originates on this virtual link.\n   The ESADI DRB sends
          TRILL-ESADI-CSNP frames on the ESADI virtual\n   link.  For robustness,
          a participating RBridge that determines that\n   some other RBridge should
          be ESADI DRB on such a virtual link but has\n   not received or sent a TRILL-ESADI-CSNP
          in at least the ESADI DRB\n   holding time MAY also send a TRILL-ESADI-CSNP
          on the virtual link.  A\n   participating RBridge that determines that no
          other RBridges are\n   participating in the ESADI protocol for a particular
          VLAN SHOULD NOT\n   send ESADI information or TRILL-ESADI-CSNPs on the virtual
          link for\n   that VLAN.\n"
        title: 4.2.5.1.  TRILL ESADI Participation
      - contents:
        - "4.2.5.2.  TRILL ESADI Information\n   The information distributed with
          the ESADI protocol is the list of\n   local end-station MAC addresses known
          to the originating RBridge and,\n   for each such address, a one-octet unsigned
          \"confidence\" rating in\n   the range 0-254 (see Section 4.8).\n   It is
          intended to optionally provide for VLAN ID translation within\n   RBridges,
          as specified in [VLAN-MAPPING].  This includes translating\n   TRILL ESADI
          frames.  If TRILL ESADI frames could contain VLAN IDs in\n   arbitrary internal
          locations, such translation would be impractical.\n   Thus, TRILL ESADI
          frames MUST NOT contain the VLAN ID of the VLAN to\n   which they apply
          in the body of the frame after the Inner.VLAN tag.\n"
        title: 4.2.5.2.  TRILL ESADI Information
      title: 4.2.5.  The TRILL ESADI Protocol
    - contents:
      - "4.2.6.  SPF, Forwarding, and Ambiguous Destinations\n   This section describes
        the logical result desired.  Alternative\n   implementation methods may be
        used as long as they produce the same\n   forwarding behavior.\n   When building
        a forwarding table, an RBridge RB1 calculates shortest\n   paths from itself
        as described in Appendix C.1 of [RFC1195].\n   Nicknames are added into the
        shortest path calculation as a final\n   step, just as with an end node.  If
        multiple RBridges, say, RBa and\n   RBb, claim the same nickname, this is
        a transitory condition and one\n   of RBa or RBb will defer and choose a new
        nickname.  However, RB1\n   simply adds that nickname as if it were attached
        to both RBa and RBb,\n   and uses its standard shortest path calculation to
        choose the next\n   hop.\n   An ingress RBridge RB2 maps a native frame's
        known unicast\n   destination MAC address and VLAN into an egress RBridge
        nickname.  If\n   RB2 learns addresses only from the observation of received
        and\n   decapsulated frames, then such MAC addresses cannot be duplicated\n
        \  within a VLAN in RB2 tables because more recent learned information,\n
        \  if of a higher or equal confidence, overwrites previous information\n   and,
        if of a lower confidence, is ignored.  However, duplicates of\n   the same
        MAC within a VLAN can appear in ESADI data and between ESADI\n   data and
        addresses learned from the observation of received and\n   decapsulated frames,
        entered by manual configuration, or learned\n   through Layer 2 registration
        protocols.  If duplicate MAC addresses\n   occur within a VLAN, RB2 sends
        frames to the MAC with the highest\n   confidence.  If confidences are also
        tied between the duplicates, for\n   consistency it is suggested that RB2
        direct all such frames (or all\n   such frames in the same ECMP flow) toward
        the same egress RBridge;\n   however, the use of other policies will not cause
        a network problem\n   since transit RBridges do not examine the Inner.MacDA
        for known\n   unicast frames.\n"
      title: 4.2.6.  SPF, Forwarding, and Ambiguous Destinations
    title: 4.2.  Link State Protocol (IS-IS)
  - contents:
    - "4.3.  Inter-RBridge Link MTU Size\n   There are two reasons why it is important
      to know what size of frame\n   each inter-RBridge link in the campus can support:\n
      \  1. RBridge RB1 must know the size of link state information messages\n      it
      can generate that will be guaranteed to be forwardable across\n      all inter-RBridge
      links in the campus.\n   2. If traffic engineering tools know which links support
      larger than\n      minimally acceptable data packet sizes, paths can be computed
      that\n      can support large data packets.\n"
    - contents:
      - "4.3.1.  Determining Campus-Wide TRILL IS-IS MTU Size\n   In a stable campus,
        there must ultimately be agreement among all\n   RBridges on the value of
        \"Sz\", the minimum acceptable inter-RBridge\n   link size for the campus,
        for the proper operation of TRILL IS-IS.\n   All RBridges MUST format their
        link state information messages to be\n   in chunks of size no larger than
        what they believe Sz to be.  Also,\n   every RBridge RB1 SHOULD test each
        of its RBridge adjacencies, say,\n   to RB2, to ensure that the RB1-RB2 link
        can forward packets of at\n   least size Sz.\n   Sz has no direct effect on
        end stations and is not directly related\n   to any end-station-to-end-station
        \"path MTU\".  Methods of using Sz or\n   any link MTU information gathered
        by TRILL IS-IS in the traffic\n   engineering of routes or the determination
        of any path MTU is beyond\n   the scope of this document.  Native frames that,
        after TRILL\n   encapsulation, exceed the MTU of a link on which they are
        sent will\n   generally be discarded.\n   Sz is determined by having each
        RBridge (optionally) advertise, in\n   its LSP, its assumption of the value
        of the campus-wide Sz.  This LSP\n   element is known in IS-IS as the originatingLSPBufferSize,
        TLV #14.\n   The default and minimum value for Sz, and the implicitly advertised\n
        \  value of Sz if the TLV is absent, is 1470 octets.  This length (which\n
        \  is also the maximum size of a TRILL-Hello) was chosen to make it\n   extremely
        unlikely that a TRILL control frame, even with reasonable\n   additional headers,
        tags, and/or encapsulation, would encounter MTU\n   problems on an inter-RBridge
        link.\n   The campus-wide value of Sz is the smallest value of Sz advertised
        by\n   any RBridge.\n"
      title: 4.3.1.  Determining Campus-Wide TRILL IS-IS MTU Size
    - contents:
      - "4.3.2.  Testing Link MTU Size\n   There are two new TRILL IS-IS message types
        for use between pairs of\n   RBridge neighbors to test the bidirectional packet
        size capacity of\n   their connection.  These messages are:\n      -- MTU-probe\n
        \     -- MTU-ack\n   Both the MTU-probe and the MTU-ack are padded to the
        size being\n   tested.\n   Sending of MTU-probes is optional; however, an
        RBridge RB2 that\n   receives an MTU-probe from RB1 MUST respond with an MTU-ack
        padded to\n   the same size as the MTU-probe.  The MTU-probe MAY be multicast
        to\n   All-RBridges, or unicast to a specific RBridge.  The MTU-ack is\n   normally
        unicast to the source of the MTU-probe to which it responds\n   but MAY be
        multicast to All-RBridges.\n   If RB1 fails to receive an MTU-ack to a probe
        of size X from RB2\n   after k tries (where k is a configurable parameter
        whose default is\n   3), then RB1 assumes the RB1-RB2 link cannot support
        size X.  If X is\n   not greater than Sz, then RB1 sets the \"failed minimum
        MTU test\" flag\n   for RB2 in RB1's Hello.  If size X succeeds, and X > Sz,
        then RB1\n   advertises the largest tested X for each adjacency in the TRILL\n
        \  Hellos RB1 sends on that link, and RB1 MAY advertise X as an\n   attribute
        of the link to RB2 in RB1's LSP.\n"
      title: 4.3.2.  Testing Link MTU Size
    title: 4.3.  Inter-RBridge Link MTU Size
  - contents:
    - "4.4.  TRILL-Hello Protocol\n   The TRILL-Hello protocol is a little different
      from the Layer 3 IS-IS\n   LAN Hello protocol and uses a new type of IS-IS message
      known as a\n   TRILL-Hello.\n"
    - contents:
      - "4.4.1.  TRILL-Hello Rationale\n   The reason for defining this new type of
        link in TRILL is that in\n   Layer 3 IS-IS, the LAN Hello protocol may elect
        multiple Designated\n   Routers (DRs) since, when choosing a DR, routers ignore
        other routers\n   with whom they do not have 2-way connectivity.  Also, Layer
        3 IS-IS\n   LAN Hellos are padded, to avoid forming adjacencies between neighbors\n
        \  that can't speak the maximum-sized packet to each other.  This means,\n
        \  in Layer 3 IS-IS, that neighbors that have connectivity to each\n   other,
        but with an MTU on that connection less than what they\n   perceive as maximum
        sized packets, will not see each other's Hellos.\n   The result is that routers
        might form cliques, resulting in the link\n   turning into multiple pseudonodes.\n
        \  This behavior is fine for Layer 3, but not for Layer 2, where loops\n   may
        form if there are multiple DRBs.  Therefore, the TRILL-Hello\n   protocol
        is a little different from Layer 3 IS-IS's LAN Hello\n   protocol.\n   One
        other issue with TRILL-Hellos is to ensure that subsets of the\n   information
        can appear in any single message, and be processable, in\n   the spirit of
        IS-IS LSPs and CSNPs.  TRILL-Hello frames, even though\n   they are not padded,
        can become very large.  An example where this\n   might be the case is when
        some sort of backbone technology\n   interconnects hundreds of TRILL sites
        over what would appear to TRILL\n   to be a giant Ethernet, where the RBridges
        connected to that cloud\n   will perceive that backbone to be a single link
        with hundreds of\n   neighbors.\n   In TRILL (unlike in Layer 3 IS-IS), the
        DRB is selected based solely\n   on priority and MAC address.  In other words,
        if RB2 receives a\n   TRILL-Hello from RB1 with higher (priority, MAC), RB2
        defers to RB1\n   as DRB, regardless of whether RB1 lists RB2 in RB1's TRILL-Hello.\n
        \  Although the neighbor list in a TRILL-Hello does not influence the\n   DRB
        election, it does determine what is announced in LSPs.  RB1 only\n   reports
        links to RBridges with which it has two-way connectivity.  If\n   RB1 is the
        DRB on a link, and for whatever reason (MTU mismatch, or\n   one-way connectivity)
        RB1 and RB2 do not have two-way connectivity,\n   then RB2 does not report
        a link to RB1 (or the pseudonode), and RB1\n   (or RB1 on behalf of the pseudonode)
        does not report a link to RB2.\n"
      title: 4.4.1.  TRILL-Hello Rationale
    - contents:
      - "4.4.2.  TRILL-Hello Contents and Timing\n   The TRILL-Hello has a new IS-IS
        message type.  It starts with the\n   same fixed header as an IS-IS LAN Hello,
        which includes the 7-bit\n   priority for the issuing RBridge to be DRB on
        that link.  TRILL-\n   Hellos are sent with the same timing as IS-IS LAN Hellos.\n
        \  TRILL-Hello messages, including their Outer.MacDA and Outer.MacSA,\n   but
        excluding any Outer.VLAN or other tags, MUST NOT exceed 1470\n   octets in
        length and SHOULD NOT be padded.  The following information\n   MUST appear
        in every TRILL-Hello.  References to \"TLV\" may actually\n   be a \"sub-TLV\"
        as specified in separate documents [RFC6165]\n   [RFC6326].\n   1. The VLAN
        ID of the Designated VLAN for the link.\n   2. A copy of the Outer.VLAN ID
        with which the Hello was tagged on\n      sending.\n   3. A 16-bit port ID
        assigned by the sending RBridge to the port the\n      TRILL-Hello is sent
        on such that no two ports of that RBridge have\n      the same port ID.\n
        \  4. A nickname of the sending RBridge.\n   5. Two flags as follows:\n      5.a.
        A flag that, if set, indicates that the sender has detected\n           VLAN
        mapping on the link, within the past 2 of its Holding\n           Times.\n
        \     5.b. A flag that, if set, indicates that the sender believes it is\n
        \          appointed forwarder for the VLAN and port on which the TRILL-\n
        \          Hello was sent.\n   The following information MAY appear:\n   1.
        The set of VLANs for which end-station service is enabled on the\n      port.\n
        \  2. Several flags as follows:\n      2.a. A flag that, if set, indicates
        that the sender's port was\n           configured as an access port.\n      2.b.
        A flag that, if set, indicates that the sender's port was\n           configured
        as a trunk port.\n      2.c. A bypass pseudonode flag, as described below
        in this section.\n   3. If the sender is the DRB, the Rbridges (excluding
        itself) that it\n      appoints as forwarders for that link and the VLANs
        for which it\n      appoints them.  As described below, this TLV is designed
        so that\n      not all the appointment information need be included in each\n
        \     Hello.  Its absence means that appointed forwarders should\n      continue
        as previously assigned.\n   4. The TRILL neighbor list.  This is a new TLV,
        not the same as the\n      IS-IS Neighbor TLV, in order to accommodate fragmentation
        and\n      reporting MTU on the link (see Section 4.4.2.1).\n   The Appointed
        Forwarders TLV specifies a range of VLANs and, within\n   that range, specifies
        which Rbridge, if any, other than the DRB, is\n   appointed forwarder for
        the VLANs in that range [RFC6326].\n   Appointing an RBridge as forwarder
        on a port for a VLAN that is not\n   enabled on that port has no effect.\n
        \  It is anticipated that many links between RBridges will be point-to-\n
        \  point, in which case using a pseudonode merely adds to the\n   complexity.
        \ If the DRB specifies the bypass pseudonode bit in its\n   TRILL-Hellos,
        the RBridges on the link just report their adjacencies\n   as point-to-point.
        \ This has no effect on how LSPs are flooded on a\n   link.  It only affects
        what LSPs are generated.\n   For example, if RB1 and RB2 are the only RBridges
        on the link and RB1\n   is the DRB, then if RB1 creates a pseudonode that
        is used, there are\n   3 LSPs: for, say, RB1.25 (the pseudonode), RB1, and
        RB2, where RB1.25\n   reports connectivity to RB1 and RB2, and RB1 and RB2
        each just say\n   they are connected to RB1.25.  Whereas if DRB RB1 sets the
        bypass\n   pseudonode bit in its Hellos, then there will be only 2 LSPs: RB1
        and\n   RB2 each reporting connectivity to each other.\n   A DRB SHOULD set
        the bypass pseudonode bit for its links unless, for\n   a particular link,
        it has seen at least two simultaneous adjacencies\n   on the link at some
        point since it last rebooted.\n"
      - contents:
        - "4.4.2.1.  TRILL Neighbor List\n   The new TRILL Neighbor TLV includes the
          following information for\n   each neighbor it lists:\n   1.  The neighbor's
          MAC address.\n   2.  MTU size to this neighbor as a 2-octet unsigned integer
          in units\n      of 4-octet chunks.  The value zero indicates that the MTU
          is\n      untested.\n   3.  A flag for \"failed minimum MTU test\".\n   To
          allow partial reporting of neighbors, the neighbor IDs MUST be\n   sorted
          by ID.  If a set of neighbors { X1, X2, X3, ...  Xn } is\n   reported in
          RB1's Hello, then X1 < X2 < X3, ...  < Xn.  If RBridge\n   RB2's ID is between
          X1 and Xn, and does not appear in RB1's Hello,\n   then RB2 knows that RB1
          has not heard RB2's Hello.\n   Additionally there are two overall TRILL
          Neighbor List TLV flags:\n   \"the smallest ID I reported in this Hello
          is the smallest ID of any\n   neighbor\", and \"the largest ID I reported
          in this Hello is the\n   largest ID of any neighbor\".  If all the neighbors
          fit in RB1's\n   TRILL-Hello, both flags will be set.\n   If RB1 reports
          { X1, ...  Xn } in its Hello, with the \"smallest\" flag\n   set, and RB2's
          ID is smaller than X1, then RB2 knows that RB1 has not\n   heard RB2's Hello.
          \ Similarly, if RB2's ID is larger than Xn and the\n   \"largest\" flag
          is set, then RB2 knows that RB1 has not heard RB2's\n   Hello.\n   To ensure
          that any RBridge RB2 can definitively determine whether RB1\n   can hear
          RB2, RB1's neighbor list MUST eventually cover every\n   possible range
          of IDs, that is, within a period that depends on RB1's\n   policy and not
          necessarily within any specific period such as the\n   holding time.  In
          other words, if X1 is the smallest ID reported in\n   one of RB1's neighbor
          lists, and the \"smallest\" flag is not set, then\n   X1 MUST also appear
          as the largest ID reported in a different TRILL-\n   Hello neighbor list.
          \ Or, fragments may overlap, as long as there is\n   no gap, such that some
          range, say, between Xi and Xj, never appears\n   in any fragment.\n"
        title: 4.4.2.1.  TRILL Neighbor List
      title: 4.4.2.  TRILL-Hello Contents and Timing
    - contents:
      - "4.4.3.  TRILL MTU-Probe and TRILL Hello VLAN Tagging\n   The MTU-probe mechanism
        is designed to determine the MTU for\n   transmissions between RBridges.  MTU-probes
        and probe\n   acknowledgements are only sent on the Designated VLAN.\n   An
        RBridge RBn maintains for each port the same VLAN information as a\n   customer
        IEEE [802.1Q-2005] bridge, including the set of VLANs\n   enabled for output
        through that port (see Section 4.9.2).  In\n   addition, RBn maintains the
        following TRILL-specific VLAN parameters\n   per port:\n      a) Desired Designated
        VLAN: the VLAN that RBn, if it is the DRB,\n         will specify in its TRILL-Hellos
        as the VLAN to be used by all\n         RBridges on the link to communicate
        all TRILL frames, except\n         some TRILL-Hellos.  This MUST be a VLAN
        enabled on RBn's port.\n         It defaults to the numerically lowest enabled
        VLAN ID, which is\n         VLAN 1 for a default configuration RBridge.\n
        \     b) Designated VLAN: the VLAN being used on the link for all TRILL\n
        \        frames except some TRILL Hellos.  This is RBn's Desired\n         Designated
        VLAN if RBn believes it is the DRB or the Designated\n         VLAN in the
        DRB's Hellos if RBn is not the DRB.\n      c) Announcing VLANs set.  This
        defaults to the enabled VLANs set\n         on the port but may be configured
        to be a subset of the enabled\n         VLANs.\n      d) Forwarding VLANs
        set: the set of VLANs for which an RBridge\n         port is appointed VLAN
        forwarder on the port.  This MUST\n         contain only enabled VLANs for
        the port, possibly all enabled\n         VLANs.\n   On each of its ports that
        is not configured to use P2P Hellos, an\n   RBridge sends TRILL-Hellos Outer.VLAN
        tagged with each VLAN in a set\n   of VLANs.  This set depends on the RBridge's
        DRB status and the above\n   VLAN parameters.  RBridges send TRILL Hellos
        Outer.VLAN tagged with\n   the Designated VLAN, unless that VLAN is not enabled
        on the port.  In\n   addition, the DRB sends TRILL Hellos Outer.VLAN tagged
        with each\n   enabled VLAN in its Announcing VLANs set.  All non-DRB RBridges
        send\n   TRILL-Hellos Outer.VLAN tagged with all enabled VLANs that are in
        the\n   intersection of their Forwarding VLANs set and their Announcing VLANs\n
        \  set.  More symbolically, TRILL-Hello frames, when sent, are sent as\n   follows:\n
        \  If sender is DRB\n      intersection ( Enabled VLANs,\n      union ( Designated
        VLAN, Announcing VLANs ) )\n   If sender is not DRB\n      intersection (
        Enabled VLANs,\n      union ( Designated VLAN,\n      intersection ( Forwarding
        VLANs, Announcing VLANs ) ) )\n   Configuring the Announcing VLANs set to
        be null minimizes the number\n   of TRILL-Hellos.  In that case, TRILL-Hellos
        are only tagged with the\n   Designated VLAN.  Great care should be taken
        in configuring an\n   RBridge to not send TRILL Hellos on any VLAN where that
        RBridge is\n   appointed forwarder as, under some circumstances, failure to
        send\n   such Hellos can lead to loops.\n   The number of TRILL-Hellos is
        maximized, within this specification,\n   by configuring the Announcing VLANs
        set to be the set of all enabled\n   VLAN IDs, which is the default.  In that
        case, the DRB will send\n   TRILL-Hello frames tagged with all its Enabled
        VLAN tags; in\n   addition, any non-DRB RBridge RBn will send TRILL-Hello
        frames tagged\n   with the Designated VLAN, if enabled, and tagged with all
        VLANs for\n   which RBn is an appointed forwarder.  (It is possible to send
        even\n   more TRILL-Hellos.  In particular, non-DRB RBridges could send TRILL-\n
        \  Hellos on enabled VLANs for which they are not an appointed forwarder\n
        \  and which are not the Designated VLAN.  This would cause no harm\n   other
        than a further communications and processing burden.)\n   When an RBridge
        port comes up, until it has heard a TRILL-Hello from\n   a higher priority
        RBridge, it considers itself to be DRB on that port\n   and sends TRILL-Hellos
        on that basis.  Similarly, even if it has at\n   some time recognized some
        other RBridge on the link as DRB, if it\n   receives no TRILL-Hellos on that
        port from an RBridge with higher\n   priority as DRB for a long enough time,
        as specified by IS-IS, it\n   will revert to believing itself DRB.\n"
      title: 4.4.3.  TRILL MTU-Probe and TRILL Hello VLAN Tagging
    - contents:
      - "4.4.4.  Multiple Ports on the Same Link\n   It is possible for an RBridge
        RB1 to have multiple ports to the same\n   link.  It is important for RB1
        to recognize which of its ports are on\n   the same link, so, for instance,
        if RB1 is appointed forwarder for\n   VLAN A, RB1 knows that only one of its
        ports acts as appointed\n   forwarder for VLAN A on that link.\n   RB1 detects
        this condition based on receiving TRILL-Hello messages\n   with the same IS-IS
        pseudonode ID on multiple ports.  RB1 might have\n   one set of ports, say,
        { p1, p2, p3 } on one link, and another set of\n   ports { p4, p5 } on a second
        link, and yet other ports, say, p6, p7,\n   p8, that are each on distinct
        links.  Let us call a set of ports on\n   the same link a \"port group\".\n
        \  If RB1 detects that a set of ports, say, { p1, p2, p3 }, is a port\n   group
        on a link, then RB1 MUST ensure that it does not cause loops\n   when it encapsulates
        and decapsulates traffic from/to that link.  If\n   RB1 is appointed forwarder
        for VLAN A on that Ethernet link, RB1 MUST\n   encapsulate/decapsulate VLAN
        A on only one of the ports.  However, if\n   RB1 is appointed forwarder for
        more than one VLAN, RB1 MAY choose to\n   load split among its ports, using
        one port for some set of VLANs, and\n   another port for a disjoint set of
        VLANs.\n   If RB1 detects VLAN mapping occurring (see Section 4.4.5), then
        RB1\n   MUST NOT load split as appointed forwarder, and instead MUST act as\n
        \  appointed VLAN forwarder on that link on only one of its ports in the\n
        \  port group.\n   When forwarding TRILL-encapsulated multi-destination frames
        to/from a\n   link on which RB1 has a port group, RB1 MAY choose to load split\n
        \  among its ports, provided that it does not duplicate frames, and\n   provided
        that it keeps frames for the same flow on the same port.  If\n   RB1's neighbor
        on that link, RB2, accepts multi-destination frames on\n   that tree on that
        link from RB1, RB2 MUST accept the frame from any\n   of RB2's adjacencies
        to RB1 on that link.\n   If an RBridge has more than one port connected to
        a link and those\n   ports have the same MAC address, they can be distinguished
        by the\n   port ID contained in TRILL-Hellos.\n"
      title: 4.4.4.  Multiple Ports on the Same Link
    - contents:
      - "4.4.5.  VLAN Mapping within a Link\n   IEEE [802.1Q-2005] does not provide
        for bridges changing the C-tag\n   VLAN ID for a tagged frame they receive,
        that is, mapping VLANs.\n   Nevertheless, some bridge products provide this
        capability and, in\n   any case, bridged LANs can be configured to display
        this behavior.\n   For example, a bridge port can be configured to strip VLAN
        tags on\n   output and send the resulting untagged frames onto a link leading
        to\n   another bridge's port configured to tag these frames with a different\n
        \  VLAN.  Although each port's configuration is legal under\n   [802.1Q-2005],
        in the aggregate they perform manipulations not\n   permitted on a single
        customer [802.1Q-2005] bridge.  Since RBridge\n   ports have the same VLAN
        capabilities as customer [802.1Q-2005]\n   bridges, this can occur even in
        the absence of bridges.  (VLAN\n   mapping is referred to in IEEE 802.1 as
        \"VLAN ID translation\".)\n   RBridges include the Outer.VLAN ID inside every
        TRILL-Hello message.\n   When a TRILL-Hello is received, RBridges compare
        this saved copy with\n   the Outer.VLAN ID information associated with the
        received frame.  If\n   these differ and the VLAN ID inside the Hello is X
        and the Outer.VLAN\n   is Y, it can be assumed that VLAN ID X is being mapped
        into VLAN ID\n   Y.\n   When non-DRB RB2 detects VLAN mapping, based on receiving
        a TRILL-\n   Hello where the VLAN tag in the body of the Hello differs from
        the\n   one in the outer header, it sets a flag in all of its TRILL-Hellos\n
        \  for a period of two of its Holding Times since the last time RB2\n   detected
        VLAN mapping.  When DRB RB1 is informed of VLAN mapping,\n   either because
        of receiving a TRILL-Hello that has been VLAN-mapped,\n   or because of seeing
        the \"VLAN mapping detected\" flag in a neighbor's\n   TRILL-Hello on the
        link, RB1 re-assigns VLAN forwarders to ensure\n   there is only a single
        forwarder on the link for all VLANs.\n"
      title: 4.4.5.  VLAN Mapping within a Link
    title: 4.4.  TRILL-Hello Protocol
  - contents:
    - "4.5.  Distribution Trees\n   RBridges use distribution trees to forward multi-destination
      frames\n   (see Section 2.4.2).  Distribution trees are bidirectional.  Although\n
      \  a single tree is logically sufficient for the entire campus, the\n   computation
      of additional distribution trees is warranted for the\n   following reasons:
      it enables multipathing of multi-destination\n   frames and enables the choice
      of a tree root closer to or, in the\n   limit, identical with the ingress RBridge.
      \ Such a closer tree root\n   improves the efficiency of the delivery of multi-destination
      frames\n   that are being delivered to a subset of the links in the campus and\n
      \  reduces out-of-order delivery when a unicast address transitions\n   between
      unknown and known.  If applications are in use where\n   occasional out-of-order
      unicast frames due to such transitions are a\n   problem, the RBridge campus
      should be engineered to make sure they\n   are of extremely low probability,
      such as by using the ESADI\n   protocol, configuring addresses to eliminate
      unknown destination\n   unicast frames, or using keep alive frames.\n   An additional
      level of flexibility is the ability of an RBridge to\n   acquire multiple nicknames,
      and therefore have multiple trees rooted\n   at the same RBridge.  Since the
      tree number is used as a tiebreaker\n   for equal cost paths, the different
      trees, even if rooted at the same\n   RBridge, will likely utilize different
      equal cost paths.\n   How an ingress RBridge chooses the distribution tree or
      trees that it\n   uses for multi-destination frames is beyond the scope of this\n
      \  document.  However, for the reasons stated above, in the absence of\n   other
      factors, a good choice is the tree whose root is least cost\n   from the ingress
      RBridge and that is the default for an ingress\n   RBridge that uses a single
      tree to distribute multi-destination\n   frames.\n   RBridges will precompute
      all the trees that might be used, and keep\n   state for Reverse Path Forwarding
      Check filters (see Section 4.5.2).\n   Also, since the tree number is used as
      a tiebreaker, it is important\n   for all RBridges to know:\n   o  how many
      trees to compute\n   o  which trees to compute\n   o  what the tree number for
      each tree is\n   o  which trees each ingress RBridge might choose (for building\n
      \     Reverse Path Forwarding Check filters)\n   Each RBridge advertises in
      its LSP a \"tree root\" priority for its\n   nickname or for each of its nicknames
      if it has been configured to\n   have more than one.  This is a 16-bit unsigned
      integer that defaults,\n   for an unconfigured RBridge, to 0x8000.  Tree roots
      are ordered with\n   highest numerical priority being highest priority, then
      with system\n   ID of the RBridge (numerically higher = higher priority) as\n
      \  tiebreaker, and if that is equal, by the numerically higher nickname\n   value,
      as an unsigned integer, having priority.\n   Each RBridge advertises in its
      LSP the maximum number of distribution\n   trees that it can compute and the
      number of trees that it wants all\n   RBridges in the campus to compute.  The
      number of trees, k, that are\n   computed for the campus is the number wanted
      by the RBridge RB1,\n   which has the nickname with the highest \"tree root\"
      priority, but no\n   more than the number of trees supported by the RBridge
      in the campus\n   that supports the fewest trees.  If RB1 does not specify the
      specific\n   distribution tree roots as described below, then the k highest\n
      \  priority trees are the trees that will be computed by all RBridges.\n   Note
      that some of these k highest priority trees might be rooted at\n   the same
      RBridge, if that RBridge has multiple nicknames.\n   If an RBridge specifies
      the number of trees it can compute, or the\n   number of trees it wants computed
      for the campus, as 0, it is treated\n   as specifying them as 1.  Thus, k defaults
      to 1.\n   In addition, the RBridge RB1 having the highest root priority\n   nickname
      might explicitly advertise a set of s trees by providing a\n   list of s nicknames.
      \ In that case, the first k of those s trees will\n   be computed.  If s is
      less than k, or if any of the s nicknames\n   associated with the trees RB1
      is advertising does not exist within\n   the LSP database, then the RBridges
      still compute k trees, but the\n   remaining trees they select are the highest
      priority trees, such that\n   k trees are computed.\n   There are two exceptions
      to the above, which can cause fewer\n   distribution trees to be computed, as
      follows:\n   o  A nickname whose tree root priority is zero is not selected
      as a\n      tree root based on priority, although it may be selected by being\n
      \     listed by the RBridge holding the highest priority tree root\n      nickname.
      \ The one exception to this is that if all nicknames have\n      priority zero,
      then the highest priority among them as determined\n      by the tiebreakers
      is used as a tree root so that there is always\n      guaranteed to be at least
      one distribution tree.\n   o  As a transient condition, two or more identical
      nicknames can\n      appear in the list of roots for trees to be computed.  In
      such a\n      case, it is useless to compute a tree for the nickname(s) that
      are\n      about to be lost by the RBridges holding them.  So a distribution\n
      \     tree is only computed for the instance of the nickname where the\n      priority
      to hold that nickname value is highest, reducing the\n      total number of
      trees computed.  (It would also be of little use\n      to go further down the
      priority ordered list of possible tree root\n      nicknames to maintain the
      number of trees as the additional tree\n      roots found this way would only
      be valid for a very brief nickname\n      transition period.)\n   The k trees
      calculated for a campus are ordered and numbered from 1\n   to k.  In addition
      to advertising the number k, RB1 might explicitly\n   advertise a set of s trees
      by providing a list of s nicknames as\n   described above.\n   - If s == k,
      then the trees are numbered in the order that RB1\n     advertises them.\n   -
      If s == 0, then the trees are numbered in order of decreasing\n     priority.
      \ For example, if RB1 advertises only that k=2, then the\n     highest priority
      tree is number 1 and the 2nd highest priority tree\n     is number 2.\n   -
      If s < k, then those advertised by RB1 are numbered from 1 in the\n     order
      advertised.  Then the remainder are chosen by priority order\n     from among
      the remaining possible trees with the numbering\n     continuing.  For example,
      if RB1 advertises k=4, advertises\n     { Tx, Ty } as the nicknames of the root
      of the trees, and the\n     campus-wide priority ordering of trees in decreasing
      order is Ty >\n     Ta > Tc > Tb > Tx, the numbering will be as follows: Tx
      is 1 and Ty\n     is 2 since that is the order they are advertised in by RB1.
      \ Then\n     Ta is 3 and Tc is 4 because they are the highest priority trees\n
      \    that have not already been numbered.\n"
    - contents:
      - "4.5.1.  Distribution Tree Calculation\n   RBridges do not use spanning tree
        to calculate distribution trees.\n   Instead, distribution trees are calculated
        based on the link state\n   information, selecting a particular RBridge nickname
        as the root.\n   Each RBridge RBn independently calculates a tree rooted at
        RBi by\n   performing the SPF (Shortest Path First) calculation with RBi as
        the\n   root without requiring any additional exchange of information.\n   It
        is important, when building a distribution tree, that all RBridges\n   choose
        the same links for that tree.  Therefore, when there are equal\n   cost paths
        for a particular tree, all RBridges need to use the same\n   tiebreakers.
        \ It is also desirable to allow splitting of traffic on\n   as many links
        as possible.  For this reason, a simple tiebreaker such\n   as \"always choose
        the parent with lower ID\" would not be desirable.\n   Instead, TRILL uses
        the tree number as a parameter in the tiebreaking\n   algorithm.\n   When
        building the tree number j, remember all possible equal cost\n   parents for
        node N.  After calculating the entire \"tree\" (actually,\n   directed graph),
        for each node N, if N has \"p\" parents, then order\n   the parents in ascending
        order according to the 7-octet IS-IS ID\n   considered as an unsigned integer,
        and number them starting at zero.\n   For tree j, choose N's parent as choice
        j mod p.\n   Note that there might be multiple equal cost links between N
        and\n   potential parent P that have no pseudonodes, because they are either\n
        \  point-to-point links or pseudonode-suppressed links.  Such links will\n
        \  be treated as a single link for the purpose of tree building, because\n
        \  they all have the same parent P, whose IS-IS ID is \"P.0\".\n   In other
        words, the set of potential parents for N, for the tree\n   rooted at R, consists
        of those that give equally minimal cost paths\n   from N to R and that have
        distinct IS-IS IDs, based on what is\n   reported in LSPs.\n"
      title: 4.5.1.  Distribution Tree Calculation
    - contents:
      - "4.5.2.  Multi-Destination Frame Checks\n   When a multi-destination TRILL-encapsulated
        frame is received by an\n   RBridge, there are four checks performed, each
        of which may cause the\n   frame to be discarded:\n   1. Tree Adjacency Check:
        Each RBridge RBn keeps a set of adjacencies\n      ( { port, neighbor } pairs
        ) for each distribution tree it is\n      calculating.  One of these adjacencies
        is toward the tree root\n      RBi, and the others are toward the leaves.
        \ Once the adjacencies\n      are chosen, it is irrelevant which ones are
        towards the root RBi\n      and which are away from RBi.  RBridges MUST drop
        a multi-\n      destination frame that arrives at a port from an RBridge that
        is\n      not an adjacency for the tree on which the frame is being\n      distributed.
        \ Let's suppose that RBn has calculated that\n      adjacencies a, c, and
        f are in the RBi tree.  A multi-destination\n      frame for the distribution
        tree RBi is received only from one of\n      the adjacencies a, c, or f (otherwise
        it is discarded) and\n      forwarded to the other two adjacencies.  Should
        RBn have multiple\n      ports on a link, a multi-destination frame it sends
        on one of\n      these ports will be received by the others but will be discarded\n
        \     as an RBridge is not adjacent to itself.\n   2. RPF Check: Another technique
        used by RBridges for avoiding\n      temporary multicast loops during topology
        changes is the Reverse\n      Path Forwarding Check.  It involves checking
        that a multi-\n      destination frame, based on the tree and the ingress
        RBridge,\n      arrives from the expected link.  RBridges MUST drop multi-\n
        \     destination frames that fail the RPF check.\n      To limit the amount
        of state necessary to perform the RPF check,\n      each RBridge RB2 MUST
        announce which trees RB2 may choose when RB2\n      ingresses a multi-destination
        packet.  When any RBridge, say, RB3,\n      is computing the tree from nickname
        X, RB3 computes, for each\n      RBridge RB2 that might act as ingress for
        tree X, the link on\n      which RB3 should receive a packet from ingress
        RB2 on tree X, and\n      note for that link that RB2 is a legal ingress RBridge
        for tree X.\n      The information to determine which trees RB2 might choose
        is\n      included in RB2's LSP.  Similarly to how the highest priority\n
        \     RBridge RB1 specifies the k trees that will be computed by all\n      RBridges,
        RB2 specifies a number j, which is the total number of\n      different trees
        RB2 might specify, and the specific trees RB2\n      might specify are a combination
        of specified trees and trees\n      selected from highest priority trees.
        \ If RB2 specifies any trees\n      that are not in the k trees as specified
        by RB1, they are ignored.\n      The j potential ingress trees for RB2 are
        the ones with nicknames\n      that RB2 has explicitly specified in \"specified
        ingress tree\n      nicknames\" (and that are included in the k campus-wide
        trees\n      selected by highest priority RBridge RB1), with the remainder
        (up\n      to the maximum of {j,k}) being the highest priority of the k\n
        \     campus-wide trees.\n      The default value for j is 1.  The value 0
        for j is special and\n      means that RB2 can pick any of the k trees being
        computed for the\n      campus.\n   3. Parallel Links Check: If the tree-building
        and tiebreaking for a\n      particular multi-destination frame distribution
        tree selects a\n      non-pseudonode link between RB1 and RB2, that \"RB1-RB2
        link\" might\n      actually consist of multiple links.  These parallel links
        would be\n      visible to RB1 and RB2, but not to the rest of the campus
        (because\n      the links are not represented by pseudonodes).  If this bundle
        of\n      parallel links is included in a tree, it is important for RB1 and\n
        \     RB2 to decide which link to use, but is irrelevant to other\n      RBridges,
        and therefore, the tiebreaking algorithm need not be\n      visible to any
        RBridges other than RB1 and RB2.  In this case,\n      RB1-RB2 adjacencies
        are ordered as follows, with the one \"most\n      preferred\" adjacency being
        the one on which RB1 and RB2 transmit\n      to and receive multi-destination
        frames from each other.\n      a) Most preferred are those established by
        P2P Hellos.\n         Tiebreaking among those is based on preferring the one
        with the\n         numerically highest Extended Circuit ID as associated with
        the\n         adjacency by the RBridge with the highest System ID.\n      b)
        Next considered are those established through TRILL-Hello\n         frames,
        with suppressed pseudonodes.  Note that the pseudonode\n         is suppressed
        in LSPs, but still appears in the TRILL-Hello,\n         and therefore is
        available for this tiebreaking.  Among these\n         links, the one with
        the numerically largest pseudonode ID is\n         preferred.\n   4. Port
        Group Check: If an RBridge has multiple ports attached to the\n      same
        link, a multi-destination frame it is receiving will arrive\n      on all
        of them.  All but one received copy of such a frame MUST be\n      discarded
        to avoid duplication.  All such frames that are part of\n      the same flow
        must be accepted on the same port to avoid re-\n      ordering.\n   When a
        topology change occurs (including apparent changes during\n   start up), an
        RBridge MUST adjust its input distribution tree filters\n   no later than
        it adjusts its output forwarding.\n"
      title: 4.5.2.  Multi-Destination Frame Checks
    - contents:
      - "4.5.3.  Pruning the Distribution Tree\n   Each distribution tree SHOULD be
        pruned per VLAN, eliminating\n   branches that have no potential receivers
        downstream.  Multi-\n   destination TRILL Data frames SHOULD only be forwarded
        on branches\n   that are not pruned.\n   Further pruning SHOULD be done in
        two cases: (1) IGMP [RFC3376], MLD\n   [RFC2710], and MRD [RFC4286] messages,
        where these are to be\n   delivered only to links with IP multicast routers;
        and (2) other\n   multicast frames derived from an IP multicast address that
        should be\n   delivered only to links that have registered listeners, plus
        links\n   that have IP multicast routers, except for IP multicast addresses\n
        \  that must be broadcast.  Each of these cases is scoped per VLAN.\n   Let's
        assume that RBridge RBn knows that adjacencies (a, c, and f)\n   are in the
        nickname1 distribution tree.  RBn marks pruning\n   information for each of
        the adjacencies in the nickname1-tree.  For\n   each adjacency and for each
        tree, RBn marks:\n   o  the set of VLANs reachable downstream,\n   o  for
        each one of those VLANs, flags indicating whether there are\n      IPv4 or
        IPv6 multicast routers downstream, and\n   o  the set of Layer 2 multicast
        addresses derived from IP multicast\n      groups for which there are receivers
        downstream.\n"
      title: 4.5.3.  Pruning the Distribution Tree
    - contents:
      - "4.5.4.  Tree Distribution Optimization\n   RBridges MUST determine the VLAN
        associated with all native frames\n   they ingress and properly enforce VLAN
        rules on the emission of\n   native frames at egress RBridge ports according
        to how those ports\n   are configured and designated as appointed forwarders.
        \ RBridges\n   SHOULD also prune the distribution tree of multi-destination
        frames\n   according to VLAN.  But, since they are not required to do such\n
        \  pruning, they may receive TRILL data or ESADI frames that should have\n
        \  been VLAN pruned earlier in the tree distribution.  They silently\n   discard
        such frames.  A campus may contain some Rbridges that prune\n   distribution
        trees on VLAN and some that do not.\n   The situation is more complex for
        multicast.  RBridges SHOULD analyze\n   IP-derived native multicast frames,
        and learn and announce listeners\n   and IP multicast routers for such frames
        as discussed in Section 4.7\n   below.  And they SHOULD prune the distribution
        of IP-derived\n   multicast frames based on such learning and announcements.
        \ But, they\n   are not required to prune based on IP multicast listener and
        router\n   attachment state.  And, unlike VLANs, where VLAN attachment state
        of\n   ports MUST be maintained and honored, RBridges are not required to\n
        \  maintain IP multicast listener and router attachment state.\n   An RBridge
        that does not examine native IGMP [RFC3376], MLD\n   [RFC2710], or MRD [RFC4286]
        frames that it ingresses MUST advertise\n   that it has IPv4 and IPv6 IP multicast
        routers attached for all the\n   VLANs for which it is an appointed forwarder.
        \ It need not advertise\n   any IP-derived multicast listeners.  This will
        cause all IP-derived\n   multicast traffic to be sent to this RBridge for
        those VLANs.  It\n   then egresses that traffic onto the links for which it
        is appointed\n   forwarder where the VLAN of the traffic matches the VLAN
        for which it\n   is appointed forwarder on that link.  (This may cause the
        suppression\n   of certain IGMP membership report messages from end stations,
        but\n   that is not significant because any multicast traffic that such\n
        \  reports would be requesting will be sent to such end stations under\n   these
        circumstances.)\n   A campus may contain a mixture of Rbridges with different
        levels of\n   IP-derived multicast optimization.  An RBridge may receive IP-derived\n
        \  multicast frames that should have been pruned earlier in the tree\n   distribution.
        \ It silently discards such frames.\n   See also \"Considerations for Internet
        Group Management Protocol\n   (IGMP) and Multicast Listener Discovery (MLD)
        Snooping Switches\"\n   [RFC4541].\n"
      title: 4.5.4.  Tree Distribution Optimization
    - contents:
      - "4.5.5.  Forwarding Using a Distribution Tree\n   With full optimization,
        forwarding a multi-destination data frame is\n   done as follows.  References
        to adjacencies below do not include the\n   adjacency on which a frame was
        received.\n   o  The RBridge RBn receives a multi-destination TRILL Data frame
        with\n      inner VLAN-x and a TRILL header indicating that the selected tree\n
        \     is the nickname1 tree;\n   o  if the source from which the frame was
        received is not one of the\n      adjacencies in the nickname1 tree for the
        specified ingress\n      RBridge, the frame is dropped (see Section 4.5.1);\n
        \  o  else, if the frame is an IGMP or MLD announcement message or an\n      MRD
        query message, then the encapsulated frame is forwarded onto\n      adjacencies
        in the nickname1 tree that indicate there are\n      downstream VLAN-x IPv4
        or IPv6 multicast routers as appropriate;\n   o  else, if the frame is for
        a Layer 2 multicast address derived from\n      an IP multicast group, but
        its IP address is not the range of IP\n      multicast addresses that must
        be treated as broadcast, the frame\n      is forwarded onto adjacencies in
        the nickname1 tree that indicate\n      there are downstream VLAN-x IP multicast
        routers of the\n      corresponding type (IPv4 or IPv6), as well as adjacencies
        that\n      indicate there are downstream VLAN-x receivers for that group\n
        \     address;\n   o  else (the inner frame is for a Layer 2 multicast address
        not\n      derived from an IP multicast group or an unknown destination or\n
        \     broadcast or an IP multicast address that is required to be\n      treated
        as broadcast), the frame is forwarded onto an adjacency if\n      and only
        if that adjacency is in the nickname1 tree, and marked as\n      reaching
        VLAN-x links.\n   For each link for which RBn is appointed forwarder, RBn
        additionally\n   checks to see if it should decapsulate the frame and send
        it to the\n   link in native form, or process the frame locally.\n   TRILL
        ESADI frames will be delivered only to RBridges that are\n   appointed forwarders
        for their VLAN.  Such frames will be multicast\n   throughout the campus,
        like other non-IP-derived multicast data\n   frames, on the distribution tree
        chosen by the RBridge that created\n   the TRILL ESADI frame, and pruned according
        to the Inner.VLAN ID.\n   Thus, all the RBridges that are appointed forwarders
        for a link in\n   that VLAN receive them.\n"
      title: 4.5.5.  Forwarding Using a Distribution Tree
    title: 4.5.  Distribution Trees
  - contents:
    - "4.6.  Frame Processing Behavior\n   This section describes RBridge behavior
      for all varieties of received\n   frames, including how they are forwarded when
      appropriate.  Section\n   4.6.1 covers native frames, Section 4.6.2 covers TRILL
      frames, and\n   Section 4.6.3 covers Layer 2 control frames.  Processing may
      be\n   organized or sequenced in a different way than described here as long\n
      \  as the result is the same.  See Section 1.4 for frame type\n   definitions.\n
      \  Corrupt frames, for example, frames that are not a multiple of 8\n   bits,
      are too short or long for the link protocol/hardware in use, or\n   have a bad
      FCS are discarded on receipt by an RBridge port as they\n   are discarded on
      receipt at an IEEE 802.1 bridge port.\n   Source address information ( { VLAN,
      Outer.MacSA, port } ) is learned\n   by default from any frame with a unicast
      source address (see Section\n   4.8).\n"
    - contents:
      - "4.6.1.  Receipt of a Native Frame\n   If the port is configured as disabled
        or if end-station service is\n   disabled on the port by configuring it as
        a trunk port or configuring\n   it to use P2P Hellos, the frame is discarded.\n
        \  The ingress Rbridge RB1 determines the VLAN ID for a native frame\n   according
        to the same rules as IEEE [802.1Q-2005] bridges do (see\n   Appendix D and
        Section 4.9.2).  Once the VLAN is determined, if RB1\n   is not the appointed
        forwarder for that VLAN on the port where the\n   frame was received or is
        inhibited, the frame is discarded.  If it is\n   appointed forwarder for that
        VLAN and is not inhibited (see Section\n   4.2.4.3), then the native frame
        is forwarded according to Section\n   4.6.1.1 if it is unicast and according
        to Section 4.6.1.2 if it is\n   multicast or broadcast.\n"
      - contents:
        - "4.6.1.1.  Native Unicast Case\n   If the destination MAC address of the
          native frame is a unicast\n   address, the following steps are performed.\n
          \  The Layer 2 destination address and VLAN are looked up in the ingress\n
          \  RBridge's database of MAC addresses and VLANs to find the egress\n   RBridge
          RBm or the local egress port or to discover that the\n   destination is
          the receiving RBridge or is unknown.  One of the\n   following four cases
          will apply:\n   1. If the destination is the receiving RBridge, the frame
          is locally\n      processed.\n   2. If the destination is known to be on
          the same link from which the\n      native frame was received but is not
          the receiving RBridge, the\n      RBridge silently discards the frame, since
          the destination should\n      already have received it.\n   3. If the destination
          is known to be on a different local link for\n      which RBm is the appointed
          forwarder, then RB1 converts the native\n      frame to a TRILL Data frame
          with an Outer.MacDA of the next hop\n      RBridge towards RBm, a TRILL
          header with M = 0, an ingress\n      nickname for RB1, and the egress nickname
          for RBm.  If ingress RB1\n      has multiple nicknames, it SHOULD use the
          same nickname in the\n      ingress nickname field whenever it encapsulates
          a native frame\n      from any particular source MAC address and VLAN.  This
          simplifies\n      end node learning.  If RBm is RB1, processing then proceeds
          as in\n      Section 4.6.2.4; otherwise, the Outer.MacSA is set to the MAC\n
          \     address of the RB1 port on the path to the next hop RBridge\n      towards
          RBm and the frame is queued for transmission out of that\n      port.\n
          \  4. If a unicast destination MAC is unknown in the frame's VLAN, RB1\n
          \     handles the frame as described in Section 4.6.1.2 for a broadcast\n
          \     frame except that the Inner.MacDA is the original native frame's\n
          \     unicast destination address.\n"
        title: 4.6.1.1.  Native Unicast Case
      - contents:
        - "4.6.1.2.  Native Multicast and Broadcast Frames\n   If the RBridge has
          multiple ports attached to the same link, all but\n   one received copy
          of a native multicast or broadcast frame is\n   discarded to avoid duplication.
          \ All such frames that are part of the\n   same flow must be accepted on
          the same port to avoid re-ordering.\n   If the frame is a native IGMP [RFC3376],
          MLD [RFC2710], or MRD\n   [RFC4286] frame, then RB1 SHOULD analyze it, learn
          any group\n   membership or IP multicast router presence indicated, and
          announce\n   that information for the appropriate VLAN in its LSP (see Section\n
          \  4.7).\n   For all multi-destination native frames, RB1 forwards the frame
          in\n   native form to its links where it is appointed forwarder for the\n
          \  frame's VLAN, subject to further pruning and inhibition.  In\n   addition,
          it converts the native frame to a TRILL Data frame with the\n   All-RBridges
          multicast address as Outer.MacDA, a TRILL header with\n   the multi-destination
          bit M = 1, the ingress nickname for RB1, and\n   the egress nickname for
          the distribution tree it decides to use.  It\n   then forwards the frame
          on the pruned distribution tree (see Section\n   4.5) setting the Outer.MacSA
          of each copy sent to the MAC address of\n   the RB1 port on which it is
          sent.\n   The default is for RB1 to write into the egress nickname field
          the\n   nickname for a distribution tree, from the set of distribution trees\n
          \  RB1 has announced it might use, whose root is least cost from RB1.\n
          \  RB1 MAY choose different distribution trees for different frames if\n
          \  RB1 has been configured to path-split multicast.  In that case, RB1\n
          \  MUST select a tree by specifying a nickname that is a distribution\n
          \  tree root (see Section 4.5).  Also, RB1 MUST select a nickname that\n
          \  RB1 has announced (in RB1's own LSP) to be one of those that RB1\n   might
          use.  The strategy RB1 uses to select distribution trees in\n   multipathing
          multi-destination frames is beyond the scope of this\n   document.\n"
        title: 4.6.1.2.  Native Multicast and Broadcast Frames
      title: 4.6.1.  Receipt of a Native Frame
    - contents:
      - "4.6.2.  Receipt of a TRILL Frame\n   A TRILL frame either has the TRILL or
        L2-IS-IS Ethertype or has a\n   multicast Outer.MacDA allocated to TRILL (see
        Section 7.2).  The\n   following tests are performed sequentially, and the
        first that\n   matches controls the handling of the frame:\n   1. If the Outer.MacDA
        is All-IS-IS-RBridges and the Ethertype is\n      L2-IS-IS, the frame is handled
        as described in Section 4.6.2.1.\n   2. If the Outer.MacDA is a multicast
        address allocated to TRILL other\n      than All-RBridges, the frame is discarded.\n
        \  3. If the Outer.MacDA is a unicast address other than the receiving\n      Rbridge
        port MAC address, the frame is discarded.  (Such discarded\n      frames are
        most likely addressed to another RBridge on a multi-\n      access link and
        that other Rbridge will handle them.)\n   4. If the Ethertype is not TRILL,
        the frame is discarded.\n   5. If the Version field in the TRILL header is
        greater than 0, the\n      frame is discarded.\n   6. If the hop count is
        0, the frame is discarded.\n   7. If the Outer.MacDA is multicast and the
        M bit is zero or if the\n      Outer.MacDA is unicast and M bit is one, the
        frame is discarded.\n   8. By default, an RBridge MUST NOT forward TRILL-encapsulated
        frames\n      from a neighbor with which it does not have a TRILL IS-IS\n
        \     adjacency.  RBridges MAY be configured per port to accept these\n      frames
        for forwarding in cases where it is known that a non-\n      peering device
        (such as an end station) is configured to originate\n      TRILL-encapsulated
        frames that can be safely forwarded.\n   9. The Inner.MacDA is then tested.
        \ If it is the All-ESADI-RBridges\n      multicast address and RBn implements
        the ESADI protocol,\n      processing proceeds as in Section 4.6.2.2 below.
        \ If it is any\n      other address or RBn does not implement ESADI, processing
        proceeds\n      as in Section 4.6.2.3.\n"
      - contents:
        - "4.6.2.1.  TRILL Control Frames\n   The frame is processed by the TRILL
          IS-IS instance on RBn and is not\n   forwarded.\n"
        title: 4.6.2.1.  TRILL Control Frames
      - contents:
        - "4.6.2.2.  TRILL ESADI Frames\n   If M == 0, the frame is silently discarded.\n
          \  The egress nickname designates the distribution tree.  The frame is\n
          \  forwarded as described in Section 4.6.2.5.  In addition, if the\n   forwarding
          Rbridge is an appointed forwarder for a link in the\n   specified VLAN and
          implements the TRILL ESADI protocol and ESADI is\n   enabled at the forwarding
          Rbridge for that VLAN, the inner frame is\n   decapsulated and provided
          to that local ESADI protocol.\n"
        title: 4.6.2.2.  TRILL ESADI Frames
      - contents:
        - "4.6.2.3.  TRILL Data Frames\n   The M flag is then checked.  If it is zero,
          processing continues as\n   described in Section 4.6.2.4, if it is one,
          processing continues as\n   described in Section 4.6.2.5.\n"
        title: 4.6.2.3.  TRILL Data Frames
      - contents:
        - "4.6.2.4.  Known Unicast TRILL Data Frames\n   The egress nickname in the
          TRILL header is examined, and if it is\n   unknown or reserved, the frame
          is discarded.\n   If RBn is a transit RBridge, the hop count is decremented
          by one and\n   the frame is forwarded to the next hop RBridge towards the
          egress\n   RBridge.  (The provision permitting RBridges to decrease the
          hop\n   count by more than one under some circumstances (see Section 3.6)\n
          \  applies only to multi-destination frames, not to the known unicast\n
          \  frames considered in this subsection.)  The Inner.VLAN is not\n   examined
          by a transit RBridge when it forwards a known unicast TRILL\n   Data frame.
          \ For the forwarded frame, the Outer.MacSA is the MAC\n   address of the
          transmitting port, the Outer.MacDA is the unicast\n   address of the next
          hop RBridge, and the VLAN is the Designated VLAN\n   on the link onto which
          the frame is being transmitted.\n   If RBn is not a transit RBridge, that
          is, if the egress RBridge\n   indicated is the RBridge performing the processing,
          the Inner.MacSA\n   and Inner.VLAN ID are, by default, learned as associated
          with the\n   ingress nickname unless that nickname is unknown or reserved
          or the\n   Inner.MacSA is not unicast.  Then the frame being forwarded is\n
          \  decapsulated to native form, and the following checks are performed:\n
          \  o  The Inner.MacDA is checked.  If it is not unicast, the frame is\n
          \     discarded.\n   o  If the Inner.MacDA corresponds to the RBridge doing
          the\n      processing, the frame is locally delivered.\n   o  The Inner.VLAN
          ID is checked.  If it is 0x0 or 0xFFF, the frame is\n      discarded.\n
          \  o  The Inner.MacDA and Inner.VLAN ID are looked up in RBn's local\n      address
          cache and the frame is then either sent onto the link\n      containing
          the destination, if the RBridge is appointed forwarder\n      for that link
          for the frame's VLAN and is not inhibited (or\n      discarded if it is
          inhibited), or processed as in one of the\n      following two paragraphs.\n
          \  A known unicast TRILL Data frame can arrive at the egress Rbridge\n   only
          to find that the combination of Inner.MacDA and Inner.VLAN is\n   not actually
          known by that RBridge.  One way this can happen is that\n   the address
          information may have timed out in the egress RBridge MAC\n   address cache.
          \ In this case, the egress RBridge sends the native\n   frame out on all
          links that are in the frame's VLAN for which the\n   RBridge is appointed
          forwarder and has not been inhibited, except\n   that it MAY refrain from
          sending the frame on links where it knows\n   there cannot be an end station
          with the destination MAC address, for\n   example, the link port is configured
          as a trunk (see Section 4.9.1).\n   If, due to manual configuration or learning
          from Layer 2\n   registration, the destination MAC and VLAN appear in RBn's
          local\n   address cache for two or more links for which RBn is an uninhibited\n
          \  appointed forwarder for the frame's VLAN, RBn sends the native frame\n
          \  on all such links.\n"
        title: 4.6.2.4.  Known Unicast TRILL Data Frames
      - contents:
        - "4.6.2.5.  Multi-Destination TRILL Data Frames\n   The egress and ingress
          nicknames in the TRILL header are examined\n   and, if either is unknown
          or reserved, the frame is discarded.\n   The Outer.MacSA is checked and
          the frame discarded if it is not a\n   tree adjacency for the tree indicated
          by the egress RBridge nickname\n   on the port where the frame was received.
          \ The Reverse Path\n   Forwarding Check is performed on the ingress and
          egress nicknames and\n   the frame discarded if it fails.  If there are
          multiple TRILL-Hello\n   pseudonode suppressed parallel links to the previous
          hop RBridge, the\n   frame is discarded if it has been received on the wrong
          one.  If the\n   RBridge has multiple ports connected to the link, the frame
          is\n   discarded unless it was received on the right one.  For more\n   information
          on the checks in this paragraph, see Section 4.5.2.\n   If the Inner.VLAN
          ID of the frame is 0x0 or 0xFFF, the frame is\n   discarded.\n   If the
          RBridge is an appointed forwarder for the Inner.VLAN ID of the\n   frame,
          the Inner.MacSA and Inner.VLAN ID are, by default, learned as\n   associated
          with the ingress nickname unless that nickname is unknown\n   or reserved
          or the Inner.MacSA is not unicast.  A copy of the frame\n   is then decapsulated,
          sent in native form on those links in its VLAN\n   for which the RBridge
          is appointed forwarder subject to additional\n   pruning and inhibition
          as described in Section 4.2.4.3, and/or\n   locally processed as appropriate.\n
          \  The hop count is decreased (possibly by more than one; see Section\n
          \  3.6), and the frame is forwarded down the tree specified by the\n   egress
          RBridge nickname pruned as described in Section 4.5.\n   For the forwarded
          frame, the Outer.MacSA is set to that of the port\n   on which the frame
          is being transmitted, the Outer.MacDA is the\n   All-RBridges multicast
          address, and the VLAN is the Designated VLAN\n   of the link on which the
          frame is being transmitted.\n"
        title: 4.6.2.5.  Multi-Destination TRILL Data Frames
      title: 4.6.2.  Receipt of a TRILL Frame
    - contents:
      - "4.6.3.  Receipt of a Layer 2 Control Frame\n   Low-level control frames received
        by an RBridge are handled within\n   the port where they are received as described
        in Section 4.9.\n   There are two types of high-level control frames, distinguished
        by\n   their destination address, which are handled as described in the\n
        \  sections referenced below.\n      Name   Section   Destination Address\n
        \     BPDU   4.9.3     01-80-C2-00-00-00\n      VRP    4.9.4     01-80-C2-00-00-21\n"
      title: 4.6.3.  Receipt of a Layer 2 Control Frame
    title: 4.6.  Frame Processing Behavior
  - contents:
    - "4.7.  IGMP, MLD, and MRD Learning\n   Ingress RBridges SHOULD learn, based
      on native IGMP [RFC3376], MLD\n   [RFC2710], and MRD [RFC4286] frames they receive
      in VLANs for which\n   they are an uninhibited appointed forwarder, which IP-derived\n
      \  multicast messages should be forwarded onto which links.  Such frames\n   are
      also, in general, encapsulated as TRILL Data frames and\n   distributed as described
      below and in Section 4.5.\n   An IGMP or MLD membership report received in native
      form from a link\n   indicates a multicast group listener for that group on
      that link.  An\n   IGMP or MLD query or an MRD advertisement received in native
      form\n   from a link indicates the presence of an IP multicast router on that\n
      \  link.\n   IP multicast group membership reports have to be sent throughout
      the\n   campus and delivered to all IP multicast routers, distinguishing IPv4\n
      \  and IPv6.  All IP-derived multicast traffic must also be sent to all\n   IP
      multicast routers for the same version of IP.\n   IP multicast data SHOULD only
      be sent on links where there is either\n   an IP multicast router for that IP
      type (IPv4 or IPv6) or an IP\n   multicast group listener for that IP-derived
      multicast MAC address,\n   unless the IP multicast address is in the range required
      to be\n   treated as broadcast.\n   RBridges do not need to announce themselves
      as listeners to the IPv4\n   All-Snoopers multicast group (the group used for
      MRD reports\n   [RFC4286]), because the IPv4 multicast address for that group
      is in\n   the range where all frames sent to that IP multicast address must
      be\n   broadcast (see [RFC4541], Section 2.1.2).  However, RBridges that are\n
      \  performing IPv6-derived multicast optimization MUST announce\n   themselves
      as listeners to the IPv6 All-Snoopers multicast group.\n   See also \"Considerations
      for Internet Group Management Protocol\n   (IGMP) and Multicast Listener Discovery
      (MLD) Snooping Switches\"\n   [RFC4541].\n"
    title: 4.7.  IGMP, MLD, and MRD Learning
  - contents:
    - "4.8.  End-Station Address Details\n   RBridges have to learn the MAC addresses
      and VLANs of their locally\n   attached end stations for link/VLAN pairs for
      which they are the\n   appointed forwarder.  Learning this enables them to do
      the following:\n   o  Forward the native form of incoming known unicast TRILL
      Data\n      frames onto the correct link.\n   o  Decide, for an incoming native
      unicast frame from a link, where\n      the RBridge is the appointed forwarder
      for the frame's VLAN,\n      whether the frame is\n      -  known to have been
      destined for another end station on the same\n         link, so the RBridge
      need do nothing, or\n      -  has to be converted to a TRILL Data frame and
      forwarded.\n   RBridges need to learn the MAC addresses, VLANs, and remote RBridges\n
      \  of remotely attached end stations for VLANs for which they and the\n   remote
      RBridge are an appointed forwarder, so they can efficiently\n   direct native
      frames they receive that are unicast to those addresses\n   and VLANs.\n"
    - contents:
      - "4.8.1.  Learning End-Station Addresses\n   There are five independent ways
        an RBridge can learn end-station\n   addresses as follows:\n   1. From the
        observation of VLAN-x frames received on ports where it\n      is appointed
        VLAN-x forwarder, learning the { source MAC, VLAN,\n      port } triplet of
        received frames.\n   2. The { source MAC, VLAN, ingress RBridge nickname }
        triplet of any\n      native frames that it decapsulates.\n   3. By Layer
        2 registration protocols learning the { source MAC, VLAN,\n      port } of
        end stations registering at a local port.\n   4. By running the TRILL ESADI
        protocol for one or more VLANs and\n      thereby receiving remote address
        information and/or transmitting\n      local address information.\n   5. By
        management configuration.\n   RBridges MUST implement capabilities 1 and 2
        above.  RBridges use\n   these capabilities unless configured, for one or
        more particular\n   VLANs and/or ports, not to learn from either received
        frames or from\n   decapsulating native frames to be transmitted or both.\n
        \  RBridges MAY implement capabilities 3 and 4 above.  If capability 4\n   is
        implemented, the ESADI protocol is run only when the RBridge is\n   configured
        to do so on a per-VLAN basis.\n   RBridges SHOULD implement capability 5.\n
        \  Entries in the table of learned MAC and VLAN addresses and associated\n
        \  information also have a one-octet unsigned confidence level\n   associated
        with each entry whose rationale is given below.  Such\n   information learned
        from the observation of data has a confidence of\n   0x20 unless configured
        to have a different confidence.  This\n   confidence level can be configured
        on a per-RBridge basis separately\n   for information learned from local native
        frames and that learned\n   from remotely originated encapsulated frames.
        \ Such information\n   received via the TRILL ESADI protocol is accompanied
        by a confidence\n   level in the range 0 to 254.  Such information configured
        by\n   management defaults to a confidence level of 255 but may be\n   configured
        to have another value.\n   The table of learned MAC addresses includes (1)
        { confidence, VLAN,\n   MAC address, local port } for addresses learned from
        local native\n   frames and local registration protocols, (2) { confidence,
        VLAN, MAC\n   address, egress RBridge nickname } for addresses learned from
        remote\n   encapsulated frames and ESADI link state databases, and (3)\n   additional
        information to implement timeout of learned addresses,\n   statically configured
        addresses, and the like.\n   When a new address and related information learned
        from observing\n   data frames are to be entered into the local database,
        there are\n   three possibilities:\n   A. If this is a new { address, VLAN
        } pair, the information is\n      entered accompanied by the confidence level.\n
        \  B. If there is already an entry for this { address, VLAN } pair with\n
        \     the same accompanying delivery information, the confidence level\n      in
        the local database is set to the maximum of its existing\n      confidence
        level and the confidence level with which it is being\n      learned.  In
        addition, if the information is being learned with\n      the same or a higher
        confidence level than its existing confidence\n      level, timer information
        is reset.\n   C. If there is already an entry for this { address, VLAN } pair
        with\n      different information, the learned information replaces the older\n
        \     information only if it is being learned with higher or equal\n      confidence
        than that in the database entry.  If it replaces older\n      information,
        timer information is also reset.\n"
      title: 4.8.1.  Learning End-Station Addresses
    - contents:
      - "4.8.2.  Learning Confidence Level Rationale\n   The confidence level mechanism
        allows an RBridge campus manager to\n   cause certain address learning sources
        to prevail over others.  In a\n   default configuration, without the optional
        ESADI protocol, addresses\n   are only learned from observing local native
        frames and the\n   decapsulation of received TRILL Data frames.  Both of these
        sources\n   default to confidence level 0x20 so, since learning at an equal
        or\n   high confidence overrides previous learning, the learning in such a\n
        \  default case mimics default 802.1 bridge learning.\n   While RBridge campus
        management policies are beyond the scope of this\n   document, here are some
        example types of policies that can be\n   implemented with the confidence
        mechanism and the rationale for each:\n   o  Locally received native frames
        might be considered more reliable\n      than decapsulated frames received
        from remote parts of the campus.\n      To stop MAC addresses learned from
        such local frames from being\n      usurped by remotely received forged frames,
        the confidence in\n      locally learned addresses could be increased or that
        in addresses\n      learned from remotely sourced decapsulated frames decreased.\n
        \  o  MAC address information learned through a cryptographically\n      authenticated
        Layer 2 registration protocol, such as 802.1X with a\n      cryptographically
        based EAP method, might be considered more\n      reliable than information
        learned through the mere observation of\n      data frames.  When such authenticated
        learned address information\n      is transmitted via the ESADI protocol,
        the use of authentication\n      in the TRILL ESADI LSP frames could make
        tampering with it in\n      transit very difficult.  As a result, it might
        be reasonable to\n      announce such authenticated information via the ESADI
        protocol\n      with a high confidence, so it would override any alternative\n
        \     learning from data observation.\n   Manually configured address information
        is generally considered\n   static and so defaults to a confidence of 0xFF
        while no other source\n   of such information can be configured to a confidence
        any higher than\n   0xFE.  However, for other cases, such as where the manual\n
        \  configuration is just a starting point that the Rbridge campus\n   manager
        wishes to be dynamically overridable, the confidence of such\n   manually
        configured information may be configured to a lower value.\n"
      title: 4.8.2.  Learning Confidence Level Rationale
    - contents:
      - "4.8.3.  Forgetting End-Station Addresses\n   While RBridges need to learn
        end-station addresses as described\n   above, it is equally important that
        they be able to forget such\n   information.  Otherwise, frames for end stations
        that have moved to a\n   different part of the campus could be indefinitely
        black-holed by\n   RBridges with stale information as to the link to which
        the end\n   station is attached.\n   For end-station address information locally
        learned from frames\n   received, the time out from the last time a native
        frame was received\n   or decapsulated with the information conforms to the
        recommendations\n   of [802.1D].  It is referred to as the \"Ageing Time\"
        and is\n   configurable per RBridge with a range of from 10 seconds to 1,000,000\n
        \  seconds and a default value of 300 seconds.\n   The situation is different
        for end-station address information\n   acquired via the TRILL ESADI protocol.
        \ It is up to the originating\n   RBridge to decide when to remove such information
        from its ESADI LSPs\n   (or up to ESADI protocol timeouts if the originating
        RBridge becomes\n   inaccessible).\n   When an RBridge ceases to be appointed
        forwarder for VLAN-x on a\n   port, it forgets all end-station address information
        learned from the\n   observation of VLAN-x native frames received on that
        port.  It also\n   increments a per-VLAN counter of the number of times it
        lost\n   appointed forwarder status on one of its ports for that VLAN.\n   When,
        for all of its ports, RBridge RBn is no longer appointed\n   forwarder for
        VLAN-x, it forgets all end-station address information\n   learned from decapsulating
        VLAN-x native frames.  Also, if RBn is\n   participating in the TRILL ESADI
        protocol for VLAN-x, it ceases to so\n   participate after sending a final
        LSP nulling out the end-station\n   address information for the VLAN that
        it had been originating.  In\n   addition, all other RBridges that are VLAN-x
        forwarder on at least\n   one of their ports notice that the link state data
        for RBn has\n   changed to show that it no longer has a link on VLAN-x.  In
        response,\n   they forget all end-station address information they have learned\n
        \  from decapsulating VLAN-x frames that show RBn as the ingress\n   RBridge.\n
        \  When the appointed forwarder lost counter for RBridge RBn for VLAN-x\n
        \  is observed to increase via the TRILL IS-IS link state database but\n   RBn
        continues to be an appointed forwarder for VLAN-x on at least one\n   of its
        ports, every other RBridge that is an appointed forwarder for\n   VLAN-x modifies
        the aging of all the addresses it has learned by\n   decapsulating native
        frames in VLAN-x from ingress RBridge RBn as\n   follows: the time remaining
        for each entry is adjusted to be no\n   larger than a per-RBridge configuration
        parameter called (to\n   correspond to [802.1D]) \"Forward Delay\".  This
        parameter is in the\n   range of 4 to 30 seconds with a default value of 15
        seconds.\n"
      title: 4.8.3.  Forgetting End-Station Addresses
    - contents:
      - "4.8.4.  Shared VLAN Learning\n   RBridges can map VLAN IDs into a smaller
        number of identifiers for\n   purposes of address learning, as [802.1Q-2005]
        bridges can.  Then,\n   when a lookup is done in learned address information,
        this identifier\n   is used for matching in place of the VLAN ID.  If the
        ID of the VLAN\n   on which the address was learned is not retained, then
        there are the\n   following consequences:\n   o  The RBridge no longer has
        the information needed to participate in\n      the TRILL ESADI protocol for
        the VLANs whose ID is not being\n      retained.\n   o  In cases where Section
        4.8.3 above requires the discarding of\n      learned address information
        based on a particular VLAN, when the\n      VLAN ID is not available for entries
        under a shared VLAN\n      identifier, instead the time remaining for each
        entry under that\n      shared VLAN identifier is adjusted to be no longer
        than the\n      RBridge's \"Forward Delay\".\n   Although outside the scope
        of this specification, there are some\n   Layer 2 features in which a set
        of VLANs has shared learning, where\n   one of the VLANs is the \"primary\"
        and the other VLANs in the group\n   are \"secondaries\".  An example of this
        is where traffic from\n   different communities is separated using VLAN tags,
        and yet some\n   resource (such as an IP router or DHCP server) is to be shared
        by all\n   the communities.  A method of implementing this feature is to give
        a\n   VLAN tag, say, Z, to a link containing the shared resource, and have\n
        \  the other VLANs, say, A, C, and D, be part of the group { primary =\n   Z,
        secondaries = A, C, D }.  An RBridge, aware of this grouping,\n   attached
        to one of the secondary VLANs in the group also claims to be\n   attached
        to the primary VLAN.  So an RBridge attached to A would\n   claim to also
        be attached to Z.  An RBridge attached to the primary\n   would claim to be
        attached to all the VLANs in the group.\n   This document does not specify
        how VLAN groups might be used.  Only\n   RBridges that participate in a VLAN
        group will be configured to know\n   about the VLAN group.  However, to detect
        misconfiguration, an\n   RBridge configured to know about a VLAN group SHOULD
        report the VLAN\n   group in its LSP.\n"
      title: 4.8.4.  Shared VLAN Learning
    title: 4.8.  End-Station Address Details
  - contents:
    - "4.9.  RBridge Ports\n   Section 4.9.1 below describes the several RBridge port
      configuration\n   bits, Section 4.9.2 gives a logical port structure in terms
      of frame\n   processing, and Sections 4.9.3 and 4.9.4 describe the handling
      of\n   high-level control frames.\n"
    - contents:
      - "4.9.1.  RBridge Port Configuration\n   There are four per-port configuration
        bits as follows:\n   o  Disable port bit.  When this bit is set, all frames
        received or to\n      be transmitted are discarded, with the possible exception
        of some\n      Layer 2 control frames (see Section 1.4) that may be generated
        and\n      transmitted or received and processed within the port.  By\n      default,
        ports are enabled.\n   o  End-station service disable (trunk port) bit.  When
        this bit is\n      set, all native frames received on the port and all native
        frames\n      that would have been sent on the port are discarded.  (See\n
        \     Appendix B.)  (Note that, for this document, \"native frames\" does\n
        \     not include Layer 2 control frames.)  By default, ports are not\n      restricted
        to being trunk ports.\n      If a port with end-station service disabled reports,
        in a TRILL-\n      Hello frame it sends out that port, which VLANs it provides
        end-\n      station support for, it reports that there are none.\n   o  TRILL
        traffic disable (access port) bit.  If this bit is set, the\n      goal is
        to avoid sending any TRILL frames, except TRILL-Hello\n      frames, on the
        port since it is intended only for native end-\n      station traffic.  By
        default, ports are not restricted to being\n      access ports.  This bit
        is reported in TRILL-Hello frames.  If RB1\n      is the DRB and has this
        bit set in its TRILL-Hello, the DRB still\n      appoints VLAN forwarders.
        \ However, usually no pseudonode is\n      reported, and none of the inter-RBridge
        links associated with that\n      link are reported in LSPs.\n      If the
        DRB RB1 does not have this bit set, but neighbor RB2 on the\n      link does
        have the bit set, then RB1 does not appoint RB2 as\n      appointed forwarder
        for any VLAN, and none of the RBridges\n      (including the pseudonode) report
        RB2 as a neighbor in LSPs.\n      In some cases even though the DRB has the
        \"access port\" flag set,\n      the DRB MAY choose to create a pseudonode
        for the access port.  In\n      this case, the other RBridges report connectivity
        to the\n      pseudonode in their LSP, but the DRB sets the \"overload\" flag
        in\n      the pseudonode LSP.\n   o  Use P2P Hellos bit.  If this bit is set,
        Hellos sent on this port\n      are IS-IS P2P Hellos.  By default TRILL-Hellos
        are used.  See\n      Section 4.2.4.1 for more information on P2P links.\n
        \  The dominance relationship of these four configuration bits is as\n   follows,
        where configuration bits to the left dominate those to the\n   right.  That
        is to say, when any pair of bits is asserted,\n   inconsistencies in behavior
        they mandate are resolved in favor of\n   behavior mandated by the bit to
        the left of the other bit in this\n   list.\n         Disable > P2P > Access
        > Trunk\n"
      title: 4.9.1.  RBridge Port Configuration
    - contents:
      - "4.9.2.  RBridge Port Structure\n   An RBridge port can be modeled as having
        a lower-level structure\n   similar to that of an [802.1Q-2005] bridge port
        as shown in Figure\n   11.  In this figure, the double lines represent the
        general flow of\n   the frames and information while single lines represent
        information\n   flow only.  The dashed lines in connection with VRP (GVRP/MVRP)
        are\n   to show that VRP support is optional.  An actual RBridge port\n   implementation
        may be structured in any way that provides the correct\n   behavior.\n                     +----------------------------------------------\n
        \                    |                RBridge\n                     |\n                     |
        Interport Forwarding, IS-IS.  Management, ...\n                     |\n                     +----++----------------------+-------------++--\n
        \                         ||                      |             ||\n                    TRILL
        || Data                 |             ||\n                          ||                   +--+---------+
        \  ||\n            +-------------++-----+             |   TRILL    |   ||\n
        \           |    Encapsulation   |      +------+ IS-IS Hello|   ||\n            |
        \   Decapsulation   |      |      | Processing |   ||\n            |     Processing
        \    |      |      +-----++-----+   ||\n            +--------------------+
        \     |            ||         ||\n            |  RBridge Appointed +------+
        \           ||         ||\n        +---+   Forwarder and    |                   ||
        \        ||\n        |   |  Inhibition Logic  +==============\\\\   ||   //====++\n
        \       |   +---------+--------+-+   Native       \\\\ ++ //\n        |             |
        \       |     Frames         \\++/\n        |             |        |                     ||\n
        \  +----+-----+  +- - + - - +  |                     ||\n   |  RBridge |  |
        \ RBridge |  |                     || All TRILL and\n   |   BPDU   |  |    VRP
        \  |  |                     || Native Frames\n   |Processing|  |Processing|
        \ |                     ||\n   +-----++---+  + - - -+- -+  |            +--------++--+
        <- EISS\n         ||             |      |            |   802.1Q   |\n         ||
        \           |       |            | Port VLAN  |\n         ||             |
        \     |            |and Priority|\n         ||            |       |            |
        Processing |\n     +---++------------++------+------------+------------+ <--
        ISS\n     |        802.1/802.3 Low-Level Control Frame        |\n     |        Processing,
        Port/Link Control Logic        |\n     +------------++-------------------------------------+\n
        \                 ||\n                  ||        +------------+\n                  ||
        \       | 802.3 PHY  |\n                  ++========+ (Physical  +========
        802.3\n                            | Interface) |         Link\n                            +------------+\n
        \                 Figure 11: Detailed RBridge Port Model\n   Low-level control
        frames are handled in the lower-level port/link\n   control logic in the same
        way as in an [802.1Q-2005] bridge port.\n   This can optionally include a
        variety of 802.1 or link specific\n   protocols such as PAUSE (Annex 31B of
        [802.3]), link layer discovery\n   [802.1AB], link aggregation [802.1AX],
        MAC security [802.1AE], or\n   port-based access control [802.1X].  While
        handled at a low level,\n   these frames may affect higher-level processing.
        \ For example, a\n   Layer 2 registration protocol may affect the confidence
        in learned\n   addresses.  The upper interface to this lower-level port control\n
        \  logic corresponds to the Internal Sublayer Service (ISS) in\n   [802.1Q-2005].\n
        \  High-level control frames (BPDUs and, if supported, VRP frames) are\n   not
        VLAN tagged.  Although they extend through the ISS interface,\n   they are
        not subject to port VLAN processing.  Behavior on receipt of\n   a VLAN tagged
        BPDU or VLAN tagged VRP frame is unspecified.  If a VRP\n   is not implemented,
        then all VRP frames are discarded.  Handling of\n   BPDUs is described in
        Section 4.9.3.  Handling of VRP frames is\n   described in Section 4.9.4.\n
        \  Frames other than Layer 2 control frames, that is, all TRILL and\n   native
        frames, are subject to port VLAN and priority processing that\n   is the same
        as for an [802.1Q-2005] bridge.  The upper interface to\n   the port VLAN
        and priority processing corresponds to the Extended\n   Internal Sublayer
        Service (EISS) in [802.1Q-2005].\n   In this model, RBridge port processing
        below the EISS layer is\n   identical to an [802.1Q-2005] bridge except for
        (1) the handling of\n   high-level control frames and (2) that the discard
        of frames that\n   have exceeded the Maximum Transit Delay is not mandatory
        but MAY be\n   done.\n   As described in more detail elsewhere in this document,
        incoming\n   native frames are only accepted if the RBridge is an uninhibited\n
        \  appointed forwarder for the frame's VLAN, after which they are\n   normally
        encapsulated and forwarded; outgoing native frames are\n   usually obtained
        by decapsulation and are only output if the RBridge\n   is an uninhibited
        appointed forwarder for the frame's VLAN.\n   TRILL-Hellos, MTU-probes, and
        MTU-acks are handled per port and, like\n   all TRILL IS-IS frames, are never
        forwarded.  They can affect the\n   appointed forwarder and inhibition logic
        as well as the RBridge's\n   LSP.\n   Except TRILL-Hellos, MTU-probes, and
        MTU-acks, all TRILL control as\n   well as TRILL data and ESADI frames are
        passed up to higher-level\n   RBridge processing on receipt and passed down
        for transmission on\n   creation or forwarding.  Note that these frames are
        never blocked due\n   to the appointed forwarder and inhibition logic, which
        affects only\n   native frames, but there are additional filters on some of
        them such\n   as the Reverse Path Forwarding Check.\n"
      title: 4.9.2.  RBridge Port Structure
    - contents:
      - "4.9.3.  BPDU Handling\n   If RBridge campus topology were static, RBridges
        would simply be end\n   stations from a bridging perspective, terminating
        but not otherwise\n   interacting with spanning tree.  However, there are
        reasons for\n   RBridges to listen to and sometimes to transmit BPDUs as described\n
        \  below.  Even when RBridges listen to and transmit BPDUs, this is a\n   local
        RBridge port activity.  The ports of a particular RBridge never\n   interact
        so as to make the RBridge as a whole a spanning tree node.\n"
      - contents:
        - "4.9.3.1.  Receipt of BPDUs\n   Rbridges MUST listen to spanning tree configuration
          BPDUs received on\n   a port and keep track of the root bridge, if any,
          on that link.  If\n   MSTP is running on the link, this is the CIST root.
          \ This information\n   is reported per VLAN by the RBridge in its LSP and
          may be used as\n   described in Section 4.2.4.3.  In addition, the receipt
          of spanning\n   tree configuration BPDUs is used as an indication that a
          link is a\n   bridged LAN, which can affect the RBridge transmission of
          BPDUs.\n   An RBridge MUST NOT encapsulate or forward any BPDU frame it\n
          \  receives.\n   RBridges discard any topology change BPDUs they receive,
          but note\n   Section 4.9.3.3.\n"
        title: 4.9.3.1.  Receipt of BPDUs
      - contents:
        - "4.9.3.2.  Root Bridge Changes\n   A change in the root bridge seen in the
          spanning tree BPDUs received\n   at an RBridge port may indicate a change
          in bridged LAN topology,\n   including the possibility of the merger of
          two bridged LANs or the\n   like, without any physical indication at the
          port.  During topology\n   transients, bridges may go into pre-forwarding
          states that block\n   TRILL-Hello frames.  For these reasons, when an RBridge
          sees a root\n   bridge change on a port for which it is appointed forwarder
          for one\n   or more VLANs, it is inhibited for a period of time between
          zero and\n   30 seconds.  (An inhibited appointed forwarder discards all
          native\n   frames received from or that it would otherwise have sent to
          the\n   link.)  This time period is configurable per port and defaults to
          30\n   seconds.\n   For example, consider two bridged LANs carrying multiple
          VLANs, each\n   with various RBridge appointed forwarders.  Should they
          become\n   merged, due to a cable being plugged in or the like, those RBridges\n
          \  attached to the original bridged LAN with the lower priority root\n   will
          see a root bridge change while those attached to the other\n   original
          bridged LAN will not.  Thus, all appointed forwarders in the\n   lower priority
          set will be inhibited for a time period while things\n   are sorted out
          by BPDUs within the merged bridged LAN and TRILL-Hello\n   frames between
          the RBridges involved.\n"
        title: 4.9.3.2.  Root Bridge Changes
      - contents:
        - "4.9.3.3.  Transmission of BPDUs\n   When an RBridge ceases to be appointed
          forwarder for one or more\n   VLANs out a particular port, it SHOULD, as
          long as it continues to\n   receive spanning tree BPDUs on that port, send
          topology change BPDUs\n   until it sees the topology change acknowledged
          in a spanning tree\n   configuration BPDU.\n   RBridges MAY support a capability
          for sending spanning tree BPDUs for\n   the purpose of attempting to force
          a bridged LAN to partition as\n   discussed in Appendix A.3.3.\n"
        title: 4.9.3.3.  Transmission of BPDUs
      title: 4.9.3.  BPDU Handling
    - contents:
      - "4.9.4.  Dynamic VLAN Registration\n   Dynamic VLAN registration provides
        a means for bridges (and less\n   commonly end stations) to request that VLANs
        be enabled or disabled\n   on ports leading to the requestor.  This is done
        by VLAN registration\n   protocol (VRP) frames: GVRP or MVRP.  RBridges MAY
        implement GVRP\n   and/or MVRP as described below.\n   VRP frames are never
        encapsulated as TRILL frames between RBridges or\n   forwarded in native form
        by an RBridge.  If an RBridge does not\n   implement a VRP, it discards any
        VRP frames received and sends none.\n   RBridge ports may have dynamically
        enabled VLANs.  If an RBridge\n   supports a VRP, the actual enablement of
        dynamic VLANs is determined\n   by GVRP/MVRP frames received at the port as
        it would be for an\n   [802.1Q-2005] / [802.1ak] bridge.\n   An RBridge that
        supports a VRP sends GVRP/MVRP frames as an\n   [802.1Q-2005] / [802.1ak]
        bridge would send on each port that is not\n   configured as an RBridge trunk
        port or P2P port.  For this purpose,\n   it sends VRP frames to request traffic
        in the VLANs for which it is\n   appointed forwarder and in the Designated
        VLAN, unless the Designated\n   VLAN is disabled on the port, and to not request
        traffic in any other\n   VLAN.\n"
      title: 4.9.4.  Dynamic VLAN Registration
    title: 4.9.  RBridge Ports
  title: 4.  Other RBridge Design Details
- contents:
  - "5.  RBridge Parameters\n   This section lists parameters for RBridges.  It is
    expected that the\n   TRILL MIB will include many of the items listed in this
    section plus\n   additional Rbridge status and data including traffic and error\n
    \  counts.\n   The default value and range are given for parameters added by TRILL.\n
    \  Where a parameter is defined as a 16-bit unsigned integer and an\n   explicit
    maximum is not given, that maximum is 2**16-1.  For\n   parameters imported from
    [802.1Q-2005], [802.1D], or IS-IS [ISO10589]\n   [RFC1195], see those standards
    for default and range if not given\n   here.\n"
  - contents:
    - "5.1.  Per RBridge\n   The following parameters occur per RBridge:\n   o  Number
      of nicknames, which defaults to 1 and may be configured in\n      the range
      of 1 to 256.\n   o  The desired number of distribution trees to be calculated
      by every\n      RBridge in the campus and a desired number of distribution trees\n
      \     for the advertising RBridge to use, both of which are unsigned\n      16-bit
      integers that default to 1 (see Section 4.5).\n   o  The maximum number of distribution
      trees the RBridge can compute.\n      This is a 16-bit unsigned integer that
      is implementation and\n      environment dependent and not subject to management
      configuration.\n   o  Two lists of nicknames, one designating the distribution
      trees to\n      be computed and one designating distribution trees to be used
      as\n      discussed in Section 4.5.  By default, these lists are empty.\n   o
      \ The parameters Ageing Timer and Forward Delay with the default and\n      range
      specified in [802.1Q-2005].\n   o  Two unsigned octets that are, respectively,
      the confidence in\n      { MAC, VLAN, local port } triples learned from locally
      received\n      native frames and the confidence in { MAC, VLAN, remote RBridge
      }\n      triples learned from decapsulating frames.  These each default to\n
      \     0x20 and may each be configured to values from 0x00 to 0xFE.\n   o  The
      desired minimum acceptable inter-RBridge link MTU for the\n      campus, that
      is, originatingLSPBufferSize.  This is a 16-bit\n      unsigned integer number
      of octets that defaults to 1470 bytes,\n      which is the minimum valid value.
      \ Any lower value being\n      advertised by an RBridge is ignored.\n   o  The
      number of failed MTU-probes before the RBridge concludes that\n      a particular
      MTU is not supported, which defaults to 3 and may be\n      configured between
      1 and 255.\n   Static end-station address information and confidence in such
      end\n   station information statically configured can also be configured with\n
      \  a default confidence of 0xFF and range of 0x00 to 0xFF.  By default,\n   there
      is no such static address information.  The quantity of such\n   information
      that can be configured is implementation dependent.\n"
    title: 5.1.  Per RBridge
  - contents:
    - "5.2.  Per Nickname Per RBridge\n   The following is configuration information
      per nickname at each\n   RBridge:\n   o  Priority to hold the nickname, which
      defaults to 0x40 if no\n      specific value has been configured or 0xC0 if
      it is configured\n      (see Section 3.7.3).\n   o  Nickname priority to be
      selected as a distribution tree root, a\n      16-bit unsigned integer that
      defaults to 0x8000.\n   o  Nickname value, an unsigned 16-bit quantity that
      defaults to the\n      configured value if configured, else to the last value
      held if the\n      RBridge coming up after a reboot and that value is remembered,\n
      \     else to a random value; however, in all cases the reserved values\n      0x0000
      and 0xFFC0 through 0xFFFF are excluded (see Section 3.7.3).\n"
    title: 5.2.  Per Nickname Per RBridge
  - contents:
    - "5.3.  Per Port Per RBridge\n   An RBridge has the following per-port configuration
      parameters:\n   o  The same parameters as an [802.1Q-2005] port in terms of
      C-VLAN\n      IDs.  In addition, there is an Announcing VLANs set that defaults\n
      \     to the enabled VLANs on the port (see Section 4.4.3) and ranges\n      from
      the null set to the set of all legal VLAN IDs.\n   o  The same parameters as
      an [802.1Q-2005] port in terms of frame\n      priority code point mapping (see
      [802.1Q-2005]).\n   o  The inhibition time for the port when it observed a change
      in the\n      root bridge of an attached bridged LAN.  This is in units of\n
      \     seconds, defaults to 30, and can be configured to any value from 0\n      to
      30.\n   o  The Desired Designated VLAN that the RBridge will advertise in its\n
      \     TRILL Hellos if it is the DRB for the link via that port.  This\n      defaults
      to the lowest VLAN ID enabled on the port and may be\n      configured to any
      valid VLAN ID that is enabled on the port (0x001\n      through 0xFFE).\n   o
      \ Four per-port configuration bits: disable port (default 0 ==\n      enabled),
      disable end-station service (trunk, default 0 ==\n      enabled), access port
      (default 0 == not restricted to being an\n      access port), and use P2P Hellos
      (default 0 == use TRILL Hellos).\n      (See Section 4.9.1.)\n   o  One bit
      per port such that, if the bit is set, it disables\n      learning { MAC address,
      VLAN, port } triples from locally received\n      native frames on the port.
      \ Default value is 0 == learning\n      enabled.\n   o  The priority of the
      RBridge to be DRB and its Holding Time via\n      that port with defaults and
      range as specified in IS-IS [ISO10589]\n      [RFC1195].\n   o  A bit that,
      when set, enables the receipt of TRILL-encapsulated\n      frames from an Outer.MacSA
      with which the RBridges does not have\n      an IS-IS adjacency.  Default value
      is 0 == disabled.\n   o  Configuration for the optional send-BPDUs solution
      to the wiring\n      closet topology problem as described in Appendix A.3.3.
      \ Default\n      Bridge Address is the System ID of the RBridge with the lowest\n
      \     System ID.  If RB1 and RB2 are part of a wiring closet topology,\n      both
      need to be configured to know about this, and know the ID\n      that should
      be used in the spanning tree protocol on the specified\n      port.\n"
    title: 5.3.  Per Port Per RBridge
  - contents:
    - "5.4.  Per VLAN Per RBridge\n   An RBridge has the following per-VLAN configuration
      parameters:\n   o  Per-VLAN ESADI protocol participation flag, 7-bit priority,
      and\n      Holding Time.  Default participation flag is 0 == not\n      participating.
      \ Default and range of priority and Holding Time as\n      specified in IS-IS
      [ISO10589] [RFC1195].\n   o  One bit per VLAN that, if set, disables learning
      { MAC address,\n      VLAN, remote RBridge } triples from frames decapsulated
      in the\n      VLAN.  Defaults to 0 == learning enabled.\n"
    title: 5.4.  Per VLAN Per RBridge
  title: 5.  RBridge Parameters
- contents:
  - "6.  Security Considerations\n   Layer 2 bridging is not inherently secure.  It
    is, for example,\n   subject to spoofing of source addresses and bridging control\n
    \  messages.  A goal for TRILL is that RBridges do not add new issues\n   beyond
    those existing in current bridging technology.\n   Countermeasures are available
    such as to configure the TRILL IS-IS\n   and ESADI protocols to use IS-IS security
    [RFC5304] [RFC5310] and\n   ignore unauthenticated TRILL control and ESADI frames
    received.\n   RBridges using IS-IS security will need configuration.\n   IEEE
    802.1 port admission and link security mechanisms, such as\n   [802.1X] and [802.1AE],
    can also be used.  These are best thought of\n   as being implemented below TRILL
    (see Section 4.9.2) and are outside\n   the scope of TRILL (just as they are generally
    out of scope for\n   bridging standards [802.1D] and 802.1Q); however, TRILL can
    make use\n   of secure registration through the confidence level communicated
    in\n   the optional TRILL ESADI protocol (see Section 4.8).\n   TRILL encapsulates
    native frames inside the RBridge campus while they\n   are in transit between
    ingress RBridge and egress RBridge(s) as\n   described in Sections 2.3 and 4.1.
    \ Thus, TRILL ignorant devices with\n   firewall features that cannot be detected
    by RBridges as end stations\n   will generally not be able to inspect the content
    of such frames for\n   security checking purposes.  This may render them ineffective.
    \ Layer\n   3 routers and hosts appear to RBridges to be end stations, and native\n
    \  frames will be decapsulated before being sent to such devices.  Thus,\n   they
    will not see the TRILL Ethertype.  Firewall devices that do not\n   appear to
    an RBridge to be an end station, for example, bridges with\n   co-located firewalls,
    should be modified to understand TRILL\n   encapsulation.\n   RBridges do not
    prevent nodes from impersonating other nodes, for\n   instance, by issuing bogus
    ARP/ND replies.  However, RBridges do not\n   interfere with any schemes that
    would secure neighbor discovery.\n"
  - contents:
    - "6.1.  VLAN Security Considerations\n   TRILL supports VLANs.  These provide
      logical separation of traffic,\n   but care should be taken in using VLANs for
      security purposes.  To\n   have reasonable assurance of such separation, all
      the RBridges and\n   links (including bridged LANs) in a campus must be secured
      and\n   configured so as to prohibit end stations from using dynamic VLAN\n
      \  registration frames or otherwise gaining access to any VLAN carrying\n   traffic
      for which they are not authorized to read and/or inject.\n   Furthermore, if
      VLANs were used to keep some information off links\n   where it might be observed
      in a bridged LAN, this will no longer\n   work, in general, when bridges are
      replaced with RBridges; with\n   encapsulation and a different outer VLAN tag,
      the data will travel\n   the least cost transit path regardless of VLAN.  Appropriate
      counter\n   measures are to use end-to-end encryption or an appropriate TRILL\n
      \  security option should one be specified.\n"
    title: 6.1.  VLAN Security Considerations
  - contents:
    - "6.2.  BPDU/Hello Denial-of-Service Considerations\n   The TRILL protocol requires
      that an appointed forwarder at an RBridge\n   port be temporarily inhibited
      if it sees a TRILL-Hello from another\n   RBridge claiming to be the appointed
      forwarder for the same VLAN or\n   sees a root bridge change out that port.
      \ Thus, it would seem that\n   forged BPDUs showing repeated root bridge changes
      and forged TRILL-\n   Hello frames with the Appointed Forwarder flag set could
      represent a\n   significant denial-of-service attack.  However, the situation
      is not\n   as bad as it seems.\n   The best defense against forged TRILL-Hello
      frames or other IS-IS\n   messages is the use of IS-IS security [RFC5304] [RFC5310].
      \ Rogue end\n   stations would not normally have access to the required IS-IS
      keying\n   material needed to forge authenticatible messages.\n   Authentication
      similar to IS-IS security is usually unavailable for\n   BPDUs.  However, it
      is also the case that in typical modern wired\n   LANs, all the links are point-to-point.
      \ If you have an all-RBridged\n   point-to-point campus, then the worst that
      an end-station can do by\n   forging BPDUs or TRILL-Hello frames is to deny
      itself service.  This\n   could be either through falsely inhibiting the forwarding
      of native\n   frames by the RBridge to which it is connected or by falsely\n
      \  activating the optional decapsulation check (see Section 4.2.4.3).\n   However,
      when an RBridge campus contains bridged LANs, those bridged\n   LANs appear
      to any connected RBridges to be multi-access links.  The\n   forging of BPDUs
      by an end-station attached to such a bridged LAN\n   could affect service to
      other end-stations attached to the same\n   bridged LAN.  Note that bridges
      never forward BPDUs but process them,\n   although this processing may result
      in the issuance of further BPDUs.\n   Thus, for an end-station to forge BPDUs
      to cause continuing changes\n   in the root bridge as seen by an RBridge through
      intervening bridges\n   would typically require it to cause root bridge thrashing
      throughout\n   the bridged LAN that would be disruptive even in the absence
      of\n   RBridges.\n   Some bridges can be configured to not send BPDUs and/or
      to ignore\n   BPDUs on particular ports, and RBridges can be configured not
      to\n   inhibit appointed forwarding on a port due to root bridge changes;\n
      \  however, such configuration should be used with caution as it can be\n   unsafe.\n"
    title: 6.2.  BPDU/Hello Denial-of-Service Considerations
  title: 6.  Security Considerations
- contents:
  - "7.  Assignment Considerations\n   This section discuses IANA and IEEE 802 assignment
    considerations.\n   See [RFC5226].\n"
  - contents:
    - "7.1.  IANA Considerations\n   A new IANA registry has been created for TRILL
      Parameters with two\n   subregistries as below.\n   The initial contents of
      the TRILL Nicknames subregistry are as\n   follows:\n      0x0000 Reserved to
      indicate no nickname specified\n      0x0001-0xFFBF Dynamically allocated by
      the RBridges within each\n          RBridge campus\n      0xFFC0-0xFFFE Available
      for allocation by RFC Required (single\n          value) or IETF Review (single
      or multiple values)\n      0xFFFF Permanently reserved\n   The initial contents
      of the TRILL Multicast Address subregistry are\n   as follows:\n      01-80-C2-00-00-40
      \ Assigned as All-RBridges\n      01-80-C2-00-00-41  Assigned as All-IS-IS-RBridges\n
      \     01-80-C2-00-00-42  Assigned as All-ESADI-RBridges\n      01-80-C2-00-00-43
      to 01-80-C2-00-00-4F  Available for allocation\n                         by
      IETF Review\n"
    title: 7.1.  IANA Considerations
  - contents:
    - "7.2.  IEEE Registration Authority Considerations\n   The Ethertype 0x22F3 is
      assigned by the IEEE Registration Authority\n   to the TRILL Protocol.\n   The
      Ethertype 0x22F4 is assigned by the IEEE Registration Authority\n   for L2-IS-IS.\n
      \  The block of 16 multicast MAC addresses from <01-80-C2-00-00-40> to\n   <01-80-C2-00-00-4F>
      is assigned by the IEEE Registration Authority\n   for IETF TRILL protocol use.\n"
    title: 7.2.  IEEE Registration Authority Considerations
  title: 7.  Assignment Considerations
- contents:
  - "8.  Normative References\n   [802.1ak]  \"IEEE Standard for Local and metropolitan
    area networks /\n              Virtual Bridged Local Area Networks / Multiple\n
    \             Registration Protocol\", IEEE Standard 802.1ak-2007, 22\n              June
    2007.\n   [802.1D]   \"IEEE Standard for Local and metropolitan area networks
    /\n              Media Access Control (MAC) Bridges\", 802.1D-2004, 9 June\n              2004.\n
    \  [802.1Q-2005]\n              \"IEEE Standard for Local and metropolitan area
    networks /\n              Virtual Bridged Local Area Networks\", 802.1Q-2005,
    19 May\n              2006.\n   [802.3]    \"IEEE Standard for Information technology
    /\n              Telecommunications and information exchange between\n              systems
    / Local and metropolitan area networks / Specific\n              requirements
    Part 3: Carrier sense multiple access with\n              collision detection
    (CSMA/CD) access method and physical\n              layer specifications\", 802.3-2008,
    26 December 2008.\n   [ISO10589] ISO/IEC, \"Intermediate system to Intermediate
    system\n              routeing information exchange protocol for use in\n              conjunction
    with the Protocol for providing the\n              Connectionless-mode Network
    Service (ISO 8473)\", ISO/IEC\n              10589:2002.\n   [RFC1112]  Deering,
    S., \"Host extensions for IP multicasting\", STD 5,\n              RFC 1112, August
    1989.\n   [RFC1195]  Callon, R., \"Use of OSI IS-IS for routing in TCP/IP and\n
    \             dual environments\", RFC 1195, December 1990.\n   [RFC2119]  Bradner,
    S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
    BCP 14, RFC 2119, March 1997.\n   [RFC2464]  Crawford, M., \"Transmission of IPv6
    Packets over Ethernet\n              Networks\", RFC 2464, December 1998.\n   [RFC2710]
    \ Deering, S., Fenner, W., and B. Haberman, \"Multicast\n              Listener
    Discovery (MLD) for IPv6\", RFC 2710, October\n              1999.\n   [RFC3376]
    \ Cain, B., Deering, S., Kouvelas, I., Fenner, B., and A.\n              Thyagarajan,
    \"Internet Group Management Protocol, Version\n              3\", RFC 3376, October
    2002.\n   [RFC3417]  Presuhn, R., Ed., \"Transport Mappings for the Simple\n              Network
    Management Protocol (SNMP)\", STD 62, RFC 3417,\n              December 2002.\n
    \  [RFC3419]  Daniele, M. and J. Schoenwaelder, \"Textual Conventions for\n              Transport
    Addresses\", RFC 3419, December 2002.\n   [RFC4286]  Haberman, B. and J. Martin,
    \"Multicast Router Discovery\",\n              RFC 4286, December 2005.\n   [RFC5226]
    \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
    Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
    \  [RFC5303]  Katz, D., Saluja, R., and D. Eastlake 3rd, \"Three-Way\n              Handshake
    for IS-IS Point-to-Point Adjacencies\", RFC 5303,\n              October 2008.\n
    \  [RFC5305]  Li, T. and H. Smit, \"IS-IS Extensions for Traffic\n              Engineering\",
    RFC 5305, October 2008.\n   [RFC6165]  Banerjee, A. and D. Ward, \"Extensions
    to IS-IS for Layer-2\n              Systems\", RFC 6165, April 2011.\n   [RFC6326]
    \ Eastlake, D., Banerjee, A., Dutt, D., Perlman, R., and A.\n              Ghanwani,
    \"Transparent Interconnection of Lots of Links\n              (TRILL) Use of IS-IS\",
    RFC 6326, July 2011.\n"
  title: 8.  Normative References
- contents:
  - "9.  Informative References\n   [802.1AB]  \"IEEE Standard for Local and Metropolitan
    Networks /\n              Station and Media Access Control Connectivity Discovery\",\n
    \             802.1AB-2009, 17 September 2009.\n   [802.1ad]  \"IEEE Standard
    for and metropolitan area networks /\n              Virtual Bridged Local Area
    Networks / Provider Bridges\",\n              802.1ad-2005, 26 May 2005.\n   [802.1ah]
    \ \"IEEE Standard for Local and Metropolitan Area Networks /\n              Virtual
    Bridged Local Area Networks / Provider Backbone\n              Bridges\", 802.1ah-2008,
    1 January 2008.\n   [802.1aj]  Virtual Bridged Local Area Networks / Two-Port
    Media\n              Access Control (MAC) Relay, 802.1aj Draft 4.2, 24\n              September
    2009.\n   [802.1AE]  \"IEEE Standard for Local and metropolitan area networks
    /\n              Media Access Control (MAC) Security\", 802.1AE-2006, 18\n              August
    2006.\n   [802.1AX]  \"IEEE Standard for Local and metropolitan area networks
    /\n              Link Aggregation\", 802.1AX-2008, 1 January 2008.\n   [802.1X]
    \ \"IEEE Standard for Local and metropolitan area networks /\n              Port
    Based Network Access Control\", 802.1X-REV Draft 2.9,\n              3 September
    2008.\n   [RBridges] Perlman, R., \"RBridges: Transparent Routing\", Proc.\n              Infocom
    2005, March 2004.\n   [RFC1661]  Simpson, W., Ed., \"The Point-to-Point Protocol
    (PPP)\", STD\n              51, RFC 1661, July 1994.\n   [RFC3411]  Harrington,
    D., Presuhn, R., and B. Wijnen, \"An\n              Architecture for Describing
    Simple Network Management\n              Protocol (SNMP) Management Frameworks\",
    STD 62, RFC 3411,\n              December 2002.\n   [RFC4086]  Eastlake 3rd, D.,
    Schiller, J., and S. Crocker,\n              \"Randomness Requirements for Security\",
    BCP 106, RFC 4086,\n              June 2005.\n   [RFC4541]  Christensen, M., Kimball,
    K., and F. Solensky,\n              \"Considerations for Internet Group Management
    Protocol\n              (IGMP) and Multicast Listener Discovery (MLD) Snooping\n
    \             Switches\", RFC 4541, May 2006.\n   [RFC4789]  Schoenwaelder, J.
    and T. Jeffree, \"Simple Network\n              Management Protocol (SNMP) over
    IEEE 802 Networks\", RFC\n              4789, November 2006.\n   [RFC5304]  Li,
    T. and R. Atkinson, \"IS-IS Cryptographic\n              Authentication\", RFC
    5304, October 2008.\n   [RFC5310]  Bhatia, M., Manral, V., Li, T., Atkinson, R.,
    White, R.,\n              and M. Fanto, \"IS-IS Generic Cryptographic\n              Authentication\",
    RFC 5310, February 2009.\n   [RFC5342]  Eastlake 3rd, D., \"IANA Considerations
    and IETF Protocol\n              Usage for IEEE 802 Parameters\", BCP 141, RFC
    5342,\n              September 2008.\n   [RFC5556]  Touch, J. and R. Perlman,
    \"Transparent Interconnection of\n              Lots of Links (TRILL): Problem
    and Applicability\n              Statement\", RFC 5556, May 2009.\n   [RP1999]
    \  Perlman, R., \"Interconnection: Bridges, Routers, Switches,\n              and
    Internetworking Protocols, 2nd Edition\", Addison\n              Wesley Longman,
    Chapter 3, 1999.\n   [VLAN-MAPPING]\n              Perlman, R., Dutt, D., Banerjee,
    A., Rijhsinghani, A., and\n              D. Eastlake 3rd, \"RBridges: Campus VLAN
    and Priority\n              Regions\", Work in Progress, April 2011.\n"
  title: 9.  Informative References
- contents:
  - "Appendix A.  Incremental Deployment Considerations\n   Some aspects of partial
    RBridge deployment are described below for\n   link cost determination (Appendix
    A.1) and possible congestion due to\n   appointed forwarder bottlenecks (Appendix
    A.2).  A particular example\n   of a problem related to the TRILL use of a single
    appointed forwarder\n   per link per VLAN (the \"wiring closet topology\") is
    explored in\n   detail in Appendix A.3.\n"
  - contents:
    - "A.1.  Link Cost Determination\n   With an RBridged campus having no bridges
      or repeaters on the links\n   between RBridges, the RBridges can accurately
      determine the number of\n   physical hops involved in a path and the line speed
      of each hop,\n   assuming this is reported by their port logic.  With intervening\n
      \  devices, this is no longer possible.  For example, as shown in Figure\n   12,
      the two bridges B1 and B2 can completely hide a slow link so that\n   both Rbridges
      RB1 and RB2 incorrectly believe the link is faster.\n            +-----+        +----+
      \       +----+        +-----+\n            |     |  Fast  |    |  Slow  |    |
      \ Fast  |     |\n            | RB1 +--------+ B1 +--------+ B2 +--------+ RB2
      |\n            |     |  Link  |    |  Link  |    |  Link  |     |\n            +-----+
      \       +----+        +----+        +-----+\n                  Figure 12: Link
      Cost of a Bridged Link\n   Even in the case of a single intervening bridge,
      two RBridges may\n   know they are connected but each sees the link as a different
      speed\n   from how it is seen by the other.\n   However, this problem is not
      unique to RBridges.  Bridges can\n   encounter similar situations due to links
      hidden by repeaters, and\n   routers can encounter similar situations due to
      links hidden by\n   bridges, repeaters, or Rbridges.\n"
    title: A.1.  Link Cost Determination
  - contents:
    - "A.2.  Appointed Forwarders and Bridged LANs\n   With partial RBridge deployment,
      the RBridges may partition a bridged\n   LAN into a relatively small number
      of relatively large remnant\n   bridged LANs, or possibly not partition it at
      all so a single bridged\n   LAN remains.  Such configuration can result in the
      following problem:\n   The requirement that native frames enter and leave a
      link via the\n   link's appointed forwarder for the VLAN of the frame can cause\n
      \  congestion or suboptimal routing.  (Similar problems can occur within\n   a
      bridged LAN due to the spanning tree algorithm.)  The extent to\n   which such
      a problem will occur is highly dependent on the network\n   topology.  For example,
      if a bridged LAN had a star-like structure\n   with core bridges that connected
      only to other bridges and peripheral\n   bridges that connected to end stations
      and are connected to core\n   bridges, the replacement of all of the core bridges
      by RBridges\n   without replacing the peripheral bridges would generally improve\n
      \  performance without inducing appointed forwarder congestion.\n   Solutions
      to this problem are discussed below and a particular\n   example explored in
      Appendix A.3.\n   Inserting RBridges so that all the bridged portions of the
      LAN stay\n   connected to each other and have multiple RBridge connections is\n
      \  generally the least efficient arrangement.\n   There are four techniques
      that may help if the problem above occurs\n   and that can, to some extent,
      be used in combination:\n   1. Replace more IEEE 802.1 customer bridges with
      RBridges so as to\n      minimize the size of the remnant bridged LANs between
      RBridges.\n      This requires no configuration of the RBridges unless the bridges\n
      \     they replace required configuration.\n   2. Re-arrange network topology
      to minimize the problem.  If the\n      bridges and RBridges involved are configured,
      this may require\n      changes in their configuration.\n   3. Configure the
      RBridges and bridges so that end stations on a\n      remnant bridged LAN are
      separated into different VLANs that have\n      different appointed forwarders.
      \ If the end stations were already\n      assigned to different VLANs, this
      is straightforward (see Section\n      4.2.4.2).  If the end stations were on
      the same VLAN and have to\n      be split into different VLANs, this technique
      may lead to\n      connectivity problems between end stations.\n   4. Configure
      the RBridges such that their ports that are connected to\n      the bridged
      LAN send spanning tree configuration BPDUs (see\n      Section A.3.3) in such
      a way as to force the partition of the\n      bridged LAN.  (Note: A spanning
      tree is never formed through an\n      RBridge but always terminates at RBridge
      ports.)  To use this\n      technique, the RBridges must support this optional
      feature, and\n      would need to be configured to use it, but the bridges involved\n
      \     would rarely have to be configured.  This technique makes the\n      bridged
      LAN unavailable for TRILL through traffic because the\n      bridged LAN partitions.\n
      \  Conversely to item 3 above, there may be bridged LANs that use VLANs,\n   or
      use more VLANs than would otherwise be necessary, to support the\n   Multiple
      Spanning Tree Protocol or otherwise reduce the congestion\n   that can be caused
      by a single spanning tree.  Replacing the IEEE\n   802.1 bridges in such LANs
      with RBridges may enable a reduction in or\n   elimination of VLANs and configuration
      complexity.\n"
    title: A.2.  Appointed Forwarders and Bridged LANs
  - contents:
    - "A.3.  Wiring Closet Topology\n   If 802.1 bridges are present and RBridges
      are not properly\n   configured, the bridge spanning tree or the DRB may make\n
      \  inappropriate decisions.  Below is a specific example of the more\n   general
      problem that can occur when a bridged LAN is connected to\n   multiple RBridges.\n
      \  In cases where there are two (or more) groups of end nodes, each\n   attached
      to a bridge (say, B1 and B2), and each bridge is attached to\n   an RBridge
      (say, RB1 and RB2, respectively), with an additional link\n   connecting B1
      and B2 (see Figure 13), it may be desirable to have the\n   B1-B2 link only
      as a backup in case one of RB1 or RB2 or one of the\n   links B1-RB1 or B2-RB2
      fails.\n                  +-------------------------------+\n                  |
      \            |          |      |\n                  |  Data    +-----+    +-----+
      \  |\n                  | Center  -| RB1 |----| RB2 |-  |\n                  |
      \         +-----+    +-----+   |\n                  |             |          |
      \     |\n                  +-------------------------------+\n                                |
      \         |\n                                |          |\n                  +-------------------------------+\n
      \                 |             |          |      |\n                  |          +----+
      \    +----+    |\n                  | Wiring   | B1 |-----| B2 |    |\n                  |
      Closet   +----+     +----+    |\n                  | Bridged                       |\n
      \                 | LAN                           |\n                  +-------------------------------+\n
      \                    Figure 13: Wiring Closet Topology\n   For example, B1 and
      B2 may be in a wiring closet and it may be easy\n   to provide a short, high-bandwidth,
      low-cost link between them while\n   RB1 and RB2 are at a distant data center
      such that the RB1-B1 and\n   RB2-B2 links are slower and more expensive.\n   Default
      behavior might be that one of RB1 or RB2 (say, RB1) would\n   become DRB for
      the bridged LAN including B1 and B2 and appoint itself\n   forwarder for the
      VLANs on that bridged LAN.  As a result, RB1 would\n   forward all traffic to/from
      the link, so end nodes attached to B2\n   would be connected to the campus via
      the path B2-B1-RB1, rather than\n   the desired B2-RB2.  This wastes the bandwidth
      of the B2-RB2 path and\n   cuts available bandwidth between the end stations
      and the data center\n   in half.  The desired behavior would be to make use
      of both the\n   RB1-B1 and RB2-B2 links.\n   Three solutions to this problem
      are described below.\n"
    - contents:
      - "A.3.1.  The RBridge Solution\n   Of course, if B1 and B2 are replaced with
        RBridges, the right thing\n   will happen without configuration (other than
        VLAN support), but this\n   may not be immediately practical if bridges are
        being incrementally\n   replaced by RBridges.\n"
      title: A.3.1.  The RBridge Solution
    - contents:
      - "A.3.2.  The VLAN Solution\n   If the end stations attached to B1 and B2 are
        already divided among a\n   number of VLANs, RB1 and RB2 could be configured
        so that whichever\n   becomes DRB for this link will appoint itself forwarder
        for some of\n   these VLANs and appoint the other RBridge for the remaining
        VLANs.\n   Should either of the RBridges fail or become disconnected, the
        other\n   will have only itself to appoint as forwarder for all the VLANs.\n
        \  If the end stations are all on a single VLAN, then it would be\n   necessary
        to assign them between at least two VLANs to use this\n   solution.  This
        may lead to connectivity problems that might require\n   further measures
        to rectify.\n"
      title: A.3.2.  The VLAN Solution
    - contents:
      - "A.3.3.  The Spanning Tree Solution\n   Another solution is to configure the
        relevant ports on RB1 and RB2 to\n   be part of a \"wiring closet group\",
        with a configured per-RBridge\n   port \"Bridge Address\" Bx (which may be
        RB1 or RB2's System ID).  Both\n   RB1 and RB2 emit spanning tree BPDUs on
        their configured ports as\n   highest priority root Bx.  This causes the spanning
        tree to logically\n   partition the bridged LAN as desired by blocking the
        B1-B2 link at\n   one end or the other (unless one of the bridges is configured
        to also\n   have highest priority and has a lower ID, which we consider to
        be a\n   misconfiguration).  With the B1-B2 link blocked, RB1 and RB2 cannot\n
        \  see each other's TRILL-Hellos via that link and each acts as\n   Designated
        RBridge and appointed forwarder for its respective\n   partition.  Of course,
        with this partition, no TRILL through traffic\n   can flow through the RB1-B1-B2-RB2
        path.\n   In the spanning tree configuration BPDU, the Root is \"Bx\" with\n
        \  highest priority, cost to Root is 0, Designated Bridge ID is \"RB1\"\n
        \  when RB1 transmits and \"RB2\" when RB2 transmits, and port ID is a\n   value
        chosen independently by each of RB1 and RB2 to distinguish each\n   of its
        own ports.  The topology change flag is zero, and the topology\n   change
        acknowledgement flag is set if and only if a topology change\n   BPDU has
        been received on the port since the last configuration BPDU\n   was transmitted
        on the port.  (If RB1 and RB2 were actually bridges\n   on the same shared
        medium with no bridges between them, the result\n   would be that the one
        with the larger ID sees \"better\" BPDUs (because\n   of the tiebreaker on
        the third field: the ID of the transmitting\n   bridge), and would turn off
        its port.)\n   Should either RB1 or the RB1-B1 link or RB2 or the RB2-B2 link
        fail,\n   the spanning tree algorithm will stop seeing one of the RBx roots
        and\n   will unblock the B1-B2 link maintaining connectivity of all the end\n
        \  stations with the data center.\n   If the link RB1-B1-B2-RB2 is on the
        cut set of the campus and RB2 and\n   RB1 have been configured to believe
        they are part of a wiring closet\n   group, the campus becomes partitioned
        as the link is blocked.\n"
      title: A.3.3.  The Spanning Tree Solution
    - contents:
      - "A.3.4.  Comparison of Solutions\n   Replacing all 802.1 customer bridges
        with RBridges is usually the\n   best solution with the least amount of configuration
        required,\n   possibly none.\n   The VLAN solution works well with a relatively
        small amount of\n   configuration if the end stations are already divided
        among a number\n   of VLANs.  If they are not, it becomes more complex and
        problematic.\n   The spanning tree solution does quite well in this particular
        case.\n   But it depends on both RB1 and RB2 having implemented the optional\n
        \  feature of being able to configure a port to emit spanning tree BPDUs\n
        \  as described in Appendix A.3.3 above.  It also makes the bridged LAN\n
        \  whose partition is being forced unavailable for through traffic.\n   Finally,
        while in this specific example it neatly breaks the link\n   between the two
        bridges B1 and B2, if there were a more complex\n   bridged LAN, instead of
        exactly two bridges, there is no guarantee\n   that it would partition into
        roughly equal pieces.  In such a case,\n   you might end up with a highly
        unbalanced load on the RB1-B1 link and\n   the RB2-B2 link although this is
        still better than using only one of\n   these links exclusively.\n"
      title: A.3.4.  Comparison of Solutions
    title: A.3.  Wiring Closet Topology
  title: Appendix A.  Incremental Deployment Considerations
- contents:
  - "Appendix B.  Trunk and Access Port Configuration\n   Many modern bridged LANs
    are organized into a core and access model,\n   The core bridges have only point-to-point
    links to other bridges\n   while the access bridges connect to end stations, core
    bridges, and\n   possibly other access bridges.  It seems likely that some RBridge\n
    \  campuses will be organized in a similar fashion.\n   An RBridge port can be
    configured as a trunk port, that is, a link to\n   another RBridge or RBridges,
    by configuring it to disable end-station\n   support.  There is no reason for
    such a port to have more than one\n   VLAN enabled and in its Announcing Set on
    the port.  Of course, the\n   RBridge (or RBridges) to which it is connected must
    have the same\n   VLAN enabled.  There is no reason for this VLAN to be other
    than the\n   default VLAN 1 unless the link is actually over carrier Ethernet
    or\n   other facilities that only provide some other specific VLAN or the\n   like.
    \ Such configuration minimizes wasted TRILL-Hellos and\n   eliminates useless
    decapsulation and transmission of multi-\n   destination traffic in native form
    onto the link (see Sections 4.2.4\n   and 4.9.1).\n   An RBridge access port would
    be expected to lead to a link with end\n   stations and possibly one or more bridges.
    \ Such a link might also\n   have more than one RBridge connected to it to provide
    more reliable\n   service to the end stations.  It would be a goal to minimize
    or\n   eliminate transit traffic on such a link as it is intended for end-\n   station
    native traffic.  This can be accomplished by turning on the\n   access port configuration
    bit for the RBridge port or ports connected\n   to the link as further detailed
    in Section 4.9.1.\n   When designing RBridge configuration user interfaces, consideration\n
    \  should be given to making it convenient to configure ports as trunk\n   and
    access ports.\n"
  title: Appendix B.  Trunk and Access Port Configuration
- contents:
  - "Appendix C.  Multipathing\n   Rbridges support multipathing of both known unicast
    and multi-\n   destination traffic.  Implementation of multipathing is optional.\n
    \  Multi-destination traffic can be multipathed by using different\n   distribution
    tree roots for different frames.  For example, assume\n   that in Figure 14 end
    stations attached to RBy are the source of\n   various multicast streams each
    of which has multiple listeners\n   attached to various of RB1 through RB9.  Assuming
    equal bandwidth\n   links, a distribution tree rooted at RBy will predominantly
    use the\n   vertical links among RB1 through RB9 while one rooted at RBz will\n
    \  predominantly use the horizontal.  If RBy chooses its nickname as the\n   distribution
    tree root for half of this traffic and an RBz nickname\n   as the root for the
    other half, it may be able to substantially\n   increase the aggregate bandwidth
    by making use of both the vertical\n   and horizontal links among RB1 through
    RB9.\n   Since the distribution trees an RBridge must calculate are the same\n
    \  for all RBridges and transit RBridges MUST respect the tree root\n   specified
    by the ingress RBridge, a campus will operate correctly\n   with a mix of RBridges
    some of which use different roots for\n   different multi-destination frames they
    ingress and some of which use\n   a single root for all such frames.\n                              +---+\n
    \                             |RBy|---------------+\n                              +---+
    \              |\n                             /  |  \\              |\n                           /
    \   |    \\            |\n                         /      |      \\          |\n
    \                     +---+   +---+   +---+       |\n                      |RB1|---|RB2|---|RB3|
    \      |\n                      +---+   +---+   +---+\\      |\n                        |
    \      |       |    \\    |\n                      +---+   +---+   +---+    \\+---+\n
    \                     |RB4|---|RB5|---|RB6|-----|RBz|\n                      +---+
    \  +---+   +---+    /+---+\n                        |       |       |    /\n                      +---+
    \  +---+   +---+/\n                      |RB7|---|RB8|---|RB9|\n                      +---+
    \  +---+   +---+\n                  Figure 14: Multi-Destination Multipath\n   Known
    unicast Equal Cost Multipathing (ECMP) can occur at an RBridge\n   if, instead
    of using a tiebreaker criterion when building SPF paths,\n   information is retained
    about ports through which equal cost paths\n   are available.  Different unicast
    frames can then be sent through\n   those different ports and will be forwarded
    by equal cost paths.  For\n   example, in Figure 15, which shows only RBridges
    and omits any\n   bridges present, there are three equal cost paths between RB1
    and RB2\n   and two equal cost paths between RB2 and RB5.  Thus, for traffic\n
    \  transiting this part of the campus from left to right, RB1 may be\n   able
    to perform three way ECMP and RB2 may be able to perform two-way\n   ECMP.\n   A
    transit RBridge receiving a known unicast frame forwards it towards\n   the egress
    RBridge and is not concerned with whether it believes\n   itself to be on any
    particular path from the ingress RBridge or a\n   previous transit RBridge.  Thus,
    a campus will operate correctly with\n   a mix of RBridges some of which implement
    ECMP and some of which do\n   not.\n   There are actually three possibilities
    for the parallel paths between\n   RB1 and RB2 as follows:\n   1. If two or three
    of these paths have pseudonodes, then all three\n      will be distinctly visible
    in the campus-wide link state and ECMP\n      as described above is applicable.\n
    \  2. If the paths use P2P Hellos or otherwise do not have pseudonodes,\n      these
    three paths would appear as a single adjacency in the link\n      state.  In this
    case, multipathing across them would be an\n      entirely local matter for RB1
    and RB2.  It can be freely done for\n      known unicast frames but not for multi-destination
    frames as\n      described in Section 4.5.2.\n   3. If and only if the three paths
    between RB1 and RB2 are single hop\n      equal bandwidth links with no intervening
    bridges, then it would\n      be permissible to combine them into one logical
    link through the\n      [802.1AX] \"link aggregation\" feature.  Rbridges MAY
    implement link\n      aggregation since that feature operates below TRILL (see
    Section\n      4.9.2).\n                               +---+       double line
    = 10 Gbps\n                 -----      ===|RB3|---     single line = 1 Gbps\n
    \               /     \\   //   +---+   \\\n            +---+     +---+            +---+\n
    \        ===|RB1|-----|RB2|            |RB5|===\n            +---+     +---+            +---+\n
    \               \\     /   \\    +---+   //\n                 -----     ----|RB4|===\n
    \                              +---+\n                    Figure 15: Known Unicast
    Multipath\n   When multipathing is used, frames that follow different paths will
    be\n   subject to different delays and may be re-ordered.  While some\n   traffic
    may be order/delay insensitive, typically most traffic\n   consists of flows of
    frames where re-ordering within a flow is\n   damaging.  How to determine flows
    or what granularity flows should\n   have is beyond the scope of this document.
    \ (This issue is discussed\n   in [802.1AX].)\n"
  title: Appendix C.  Multipathing
- contents:
  - "Appendix D.  Determination of VLAN and Priority\n   A high-level, informative
    summary of how VLAN ID and priority are\n   determined for incoming native frames,
    omitting some details, is\n   given in the bulleted items below.  For more detailed
    information,\n   see [802.1Q-2005].\n   o  When an untagged native frame arrives,
    an unconfigured RBridge\n      associates the default priority zero and the VLAN
    ID 1 with it.\n      It actually sets the VLAN for the untagged frame to be the
    \"port\n      VLAN ID\" associated with that port.  The port VLAN ID defaults
    to\n      VLAN ID 1 but may be configured to be any other VLAN ID.  An\n      Rbridge
    may also be configured on a per-port basis to discard such\n      frames or to
    associate a different priority code point with them.\n      Determination of the
    VLAN ID associated with an incoming untagged\n      non-control frame may also
    be made dependent on the Ethertype or\n      NSAP (referred to in 802.1 as the
    Protocol) of the arriving frame,\n      the source MAC address, or other local
    rules.\n   o  When a priority tagged native frame arrives, an unconfigured\n      RBridge
    associates with it both the port VLAN ID, which defaults\n      to 1, and the
    priority code point provided in the priority tag in\n      the frame.  An Rbridge
    may be configured on a per-port basis to\n      discard such frames or to associate
    them with a different VLAN ID\n      as described in the point immediately above.
    \ It may also be\n      configured to map the priority code point provided in
    the frame by\n      specifying, for each of the eight possible values that might
    be in\n      the frame, what actual priority code point will be associated with\n
    \     the frame by the RBridge.\n   o  When a C-tagged (formerly called Q-tagged)
    native frame arrives,\n      an unconfigured RBridge associates with it the VLAN
    ID and\n      priority in the C-tag.  An RBridge may be configured on a per-port\n
    \     per-VLAN basis to discard such frames.  It may also be configured\n      on
    a per-port basis to map the priority value as specified above\n      for priority
    tagged frames.\n   In 802.1, the process of associating a priority code point
    with a\n   frame, including mapping a priority provided in the frame to another\n
    \  priority, is referred to as priority \"regeneration\".\n"
  title: Appendix D.  Determination of VLAN and Priority
- contents:
  - "Appendix E.  Support of IEEE 802.1Q-2005 Amendments\n   This informational appendix
    briefly comments on RBridge support for\n   completed and in-process amendments
    to IEEE [802.1Q-2005].  There is\n   no assurance that existing RBridge protocol
    specifications or\n   existing bridges will support not yet specified future [802.1Q-2005]\n
    \  amendments just as there is no assurance that existing bridge\n   protocol
    specifications or existing RBridges will support not yet\n   specified future
    TRILL amendments.\n   The information below is frozen as of 25 October 2009.  For
    the\n   latest status, see the IEEE 802.1 working group\n   (http://grouper.ieee.org/groups/802/1/).\n"
  - contents:
    - "E.1.  Completed Amendments\n   802.1ad-2005 Provider Bridges - Sometimes called
      \"Q-in-Q\", because\n         VLAN tags used to be called \"Q-tags\", 802.1ad
      specifies\n         Provider Bridges that tunnel customer bridge traffic within\n
      \        service VLAN tags (S-tags).  If the customer LAN is an RBridge\n         campus,
      that traffic will be bridged by Provider Bridges.\n         Customer bridge
      features involving Provider Bridge awareness,\n         such as the ability
      to configure a customer bridge port to add\n         an S-tag to a frame before
      sending it to a Provider Bridge, are\n         below the EISS layer and can
      be supported in RBridge ports\n         without modification to the TRILL protocol.\n
      \  802.1ag-2007 Connectivity Fault Management (CFM) - This 802.1 feature\n         is
      at least in part dependent on the symmetric path and other\n         characteristics
      of spanning tree.  The comments provided to the\n         IETF TRILL working
      group by the IEEE 802.1 working group stated\n         that \"TRILL weakens
      the applicability of CFM\".\n   802.1ak-2007 Multiple Registration Protocol
      - Supported to the extent\n         described in Section 4.9.4.\n   802.1ah-2008
      Provider Backbone Bridges - Sometimes called \"MAC-in-\n         MAC\", 802.1ah
      provides for Provider Backbone Bridges that\n         tunnel customer bridge
      traffic within different outer MAC\n         addresses and using a tag (the
      \"I-tag\") to preserve the\n         original MAC addresses and signal other
      information.  If the\n         customer LAN is an RBridge campus, that traffic
      will be bridged\n         by Provider Backbone Bridges.  Customer bridge features\n
      \        involving Provider Backbone Bridge awareness, such as the\n         ability
      to configure a customer bridge port to add an I-tag to\n         a frame before
      sending it to a Provider Backbone Bridge, are\n         below the EISS layer
      and can be supported in RBridge ports\n         without modification to the
      TRILL protocol.\n   802.1Qaw-2009 Management of Data-Driven and Data-Dependent\n
      \        Connectivity Fault - Amendment building on 802.1ag.  See\n         comments
      on 802.1ag-2007 above.\n   802.1Qay-2009 Provider Backbone Bridge Traffic Engineering
      -\n         Amendment building on 802.1ah to configure traffic engineered\n
      \        routing.  See comments on 802.1ah-2008 above.\n"
    title: E.1.  Completed Amendments
  - contents:
    - "E.2.  In-Process Amendments\n   The following are amendments to IEEE [802.1Q-2005]
      that are in\n   process.  As such, the brief comments below are based on drafts
      and\n   may be incorrect for later versions or any final amendment.\n   802.1aj
      Two-port MAC Relay [802.1aj] - This amendment specifies a MAC\n         relay
      that will be transparent to RBridges.  RBridges are\n         compatible with
      IEEE 802.1aj devices as currently specified, in\n         the same sense that
      IEEE 802.1Q-2005 bridges are compatible\n         with such devices.\n   802.1aq
      Shortest Path Bridging - This amendment provides for improved\n         routing
      in bridged LANs.\n   802.1Qat Stream Reservation Protocol - Modification to
      802.1Q to\n         support the 802.1 Timing and Synchronization.  This protocol\n
      \        reserves resources for streams at supporting bridges.\n   802.1Qau
      Congestion Notification - It currently appears that\n         modifications
      to RBridge behavior above the EISS level would be\n         needed to support
      this amendment.  Such modifications are\n         beyond the scope of this document.\n
      \  802.1Qav Forwarding and Queuing Enhancements for Time-Sensitive\n         Streams
      - Modification to 802.1Q to support the 802.1 Timing\n         and Synchronization
      protocol.  This amendment specifies methods\n         to support the resource
      reservations made through the 802.1Qat\n         protocol (see above).\n   802.1Qaz
      Enhanced Transmission Selection - It appears that this\n         amendment will
      be below the EISS layer and can be supported in\n         RBridge ports without
      modification to the TRILL protocol.\n   802.1Qbb Priority-based Flow Control
      - Commonly called \"per-priority\n         pause\", it appears that this amendment
      will be below the EISS\n         layer and can be supported in RBridge ports
      without\n         modification to the TRILL protocol.\n   802.1bc Remote Customer
      Service Interfaces.  This is an extension to\n         802.1Q provider bridging.
      \ See 802.1ad-2005 above.\n   802.1Qbe Multiple Backbone Service Instance Identifier
      (I-SID)\n         Registration Protocol (MIRP).  This is an extension to 802.1Q\n
      \        provider backbone bridging.  See 802.1ah-2008 above.\n   802.1Qbf Provider
      Backbone Bridge Traffic Engineering (PBB-TE)\n         Infrastructure Segment
      Protection.  This amendment extends\n         802.1Q to support certain types
      of failover between provider\n         backbone bridges.  See 802.1ah-2008 above.\n"
    title: E.2.  In-Process Amendments
  title: Appendix E.  Support of IEEE 802.1Q-2005 Amendments
- contents:
  - "Appendix F.  Acknowledgements\n   Many people have contributed to this design,
    including the following,\n   in alphabetic order:\n      Bernard Aboba, Alia Atlas,
    Ayan Banerjee, Caitlin Bestler, Suresh\n      Boddapati, David Michael Bond, Stewart
    Bryant, Ross Callon, James\n      Carlson, Pasi Eronen, Dino Farinacci, Adrian
    Farrell, Don Fedyk,\n      Bill Fenner, Eric Gray, Sujay Gupta, Joel Halpern,
    Andrew Lange,\n      Acee Lindem, Vishwas Manral, Peter McCann, Israel Meilik,
    David\n      Melman, Nandakumar Natarajan, Erik Nordmark, Jeff Pickering, Tim\n
    \     Polk, Dan Romascanu, Sanjay Sane, Pekka Savola, Matthew R. Thomas,\n      Joe
    Touch, Mark Townsley, Kate Zebrose.\n"
  title: Appendix F.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Radia Perlman\n   Intel Labs\n   2200 Mission College
    Blvd.\n   Santa Clara, CA 95054-1549 USA\n   Phone: +1-408-765-8080\n   EMail:
    Radia@alum.mit.edu\n   Donald E. Eastlake, 3rd\n   Huawei Technologies\n   155
    Beaver Street\n   Milford, MA 01757 USA\n   Phone: +1-508-333-2270\n   EMail:
    d3e3e3@gmail.com\n   Dinesh G. Dutt\n   Cisco Systems\n   170 Tasman Drive\n   San
    Jose, CA 95134-1706 USA\n   Phone: +1-408-527-0955\n   EMail: ddutt@cisco.com\n
    \  Silvano Gai\n   Cisco Systems\n   170 Tasman Drive\n   San Jose, CA 95134-1706
    USA\n   EMail: silvano@ip6.com\n   Anoop Ghanwani\n   Brocade\n   130 Holger Way\n
    \  San Jose, CA 95134 USA\n   Phone: +1-408-333-7149\n   EMail: anoop@alumni.duke.edu\n"
  title: Authors' Addresses
