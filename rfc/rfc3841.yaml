- title: __initial_text__
  contents:
  - '      Caller Preferences for the Session Initiation Protocol (SIP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a set of extensions to the Session Initiation\n\
    \   Protocol (SIP) which allow a caller to express preferences about\n   request\
    \ handling in servers.  These preferences include the ability\n   to select which\
    \ Uniform Resource Identifiers (URI) a request gets\n   routed to, and to specify\
    \ certain request handling directives in\n   proxies and redirect servers.  It\
    \ does so by defining three new\n   request header fields, Accept-Contact, Reject-Contact,\
    \ and Request-\n   Disposition, which specify the caller's preferences.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Overview of Operation  . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   5.  UAC Behavior . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n       5.1.  Request Handling Preferences . . . . . . . . . . . . .\
    \ .  6\n       5.2.  Feature Set Preferences  . . . . . . . . . . . . . . . .\
    \  6\n   6.  UAS Behavior . . . . . . . . . . . . . . . . . . . . . . . . .  8\n\
    \   7.  Proxy Behavior . . . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \     7.1.  Request-Disposition Processing . . . . . . . . . . . . .  9\n    \
    \   7.2.  Preference and Capability Matching . . . . . . . . . . .  9\n      \
    \       7.2.1. Extracting Explicit Preferences . . . . . . . . . 10\n        \
    \     7.2.2. Extracting Implicit Preferences . . . . . . . . . 10\n          \
    \          7.2.2.1. Methods. . . . . . . . . . . . . . . . . 10\n            \
    \        7.2.2.2. Event Packages . . . . . . . . . . . . . 11\n             7.2.3.\
    \ Constructing Contact Predicates . . . . . . . . . 11\n             7.2.4. Matching.\
    \ . . . . . . . . . . . . . . . . . . . . 12\n             7.2.5. Example . .\
    \ . . . . . . . . . . . . . . . . . . . 16\n   8.  Mapping Feature Parameters\
    \ to a Predicate. . . . . . . . . . . 17\n   9.  Header Field Definitions . .\
    \ . . . . . . . . . . . . . . . . . 19\n       9.1.  Request Disposition  . .\
    \ . . . . . . . . . . . . . . . . 20\n       9.2.  Accept-Contact and Reject-Contact\
    \ Header Fields  . . . . 21\n   10. Augmented BNF  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 22\n   11. Security Considerations  . . . . . . . . . .\
    \ . . . . . . . . . 22\n   12. IANA Considerations  . . . . . . . . . . . . .\
    \ . . . . . . . . 23\n   13. Acknowledgments  . . . . . . . . . . . . . . . .\
    \ . . . . . . . 23\n   14. References . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 24\n       14.1. Normative References . . . . . . . . . . . . .\
    \ . . . . . 24\n       14.2. Informative References . . . . . . . . . . . . .\
    \ . . . . 24\n   15. Authors' Addresses . . . . . . . . . . . . . . . . . . .\
    \ . . . 25\n   16. Full Copyright Statements. . . . . . . . . . . . . . . . .\
    \ . . 26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When a Session Initiation Protocol (SIP) [1] server receives\
    \ a\n   request, there are a number of decisions it can make regarding the\n \
    \  processing of the request.  These include:\n   o  whether to proxy or redirect\
    \ the request\n   o  which URIs to proxy or redirect to\n   o  whether to fork\
    \ or not\n   o  whether to search recursively or not\n   o  whether to search\
    \ in parallel or sequentially\n   The server can base these decisions on any local\
    \ policy.  This policy\n   can be statically configured, or can be based on execution\
    \ of a\n   program or database access.\n   However, the administrator of the server\
    \ is the not the only entity\n   with an interest in request processing.  There\
    \ are at least three\n   parties which have an interest: (1) the administrator\
    \ of the server,\n   (2) the user that sent the request, and (3) the user to whom\
    \ the\n   request is directed.  The directives of the administrator are\n   embedded\
    \ in the policy of the server.  The preferences of the user to\n   whom the request\
    \ is directed (referred to as the callee, even though\n   the request method may\
    \ not be INVITE) can be expressed most easily\n   through a script written in\
    \ some type of scripting language, such as\n   the Call Processing Language (CPL)\
    \ [11].  However, no mechanism\n   exists to incorporate the preferences of the\
    \ user that sent the\n   request (also referred to as the caller, even though\
    \ the request\n   method may not be INVITE).  For example, the caller might want\
    \ to\n   speak to a specific user, but wants to reach them only at work,\n   because\
    \ the call is a business call.  As another example, the caller\n   might want\
    \ to reach a user, but not their voicemail, since it is\n   important that the\
    \ caller talk to the called party.  In both of these\n   examples, the caller's\
    \ preference amounts to having a proxy make a\n   particular routing choice based\
    \ on the preferences of the caller.\n   This extension allows the caller to have\
    \ these preferences met.  It\n   does so by specifying mechanisms by which a caller\
    \ can provide\n   preferences on processing of a request.  There are two types\
    \ of\n   preferences.  One of them, called request handling preferences, are\n\
    \   encapsulated in the Request-Disposition header field.  They provide\n   specific\
    \ request handling directives for a server.  The other, called\n   feature preferences,\
    \ is present in the Accept-Contact and Reject-\n   Contact header fields.  They\
    \ allow the caller to provide a feature\n   set [2] that expresses its preferences\
    \ on the characteristics of the\n   UA that is to be reached.  These are matched\
    \ with a feature set\n   provided by a UA to its registrar [3].  The extension\
    \ is very general\n   purpose, and not tied to a particular service.  Rather,\
    \ it is a tool\n   that can be used in the development of many services.\n   One\
    \ example of a service enabled by caller preferences is a \"one\n   number\" service.\
    \  A user can have a single identity (their SIP URI)\n   for all of their devices\
    \ - their cell phone, PDA, work phone, home\n   phone, and so on.  If the caller\
    \ wants to reach the user at their\n   business phone, they simply select \"business\
    \ phone\" from a pull-down\n   menu of options when calling that URI.  Users would\
    \ no longer need to\n   maintain and distribute separate identities for each device.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in BCP 14,\
    \ RFC 2119\n   [4] and indicate requirement levels for compliant implementations.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   Much of the terminology used in this specification is presented\
    \ in\n   [3].  This specification defines the following additional terms:\n  \
    \ Caller: Within the context of this specification, a caller refers to\n     \
    \ the user on whose behalf a UAC is operating.  It is not limited to\n      a\
    \ user whose UAC sends an INVITE request.\n   Feature Preferences: Caller preferences\
    \ that describe desired\n      properties of a UA to which the request is to be\
    \ routed.  Feature\n      preferences can be made explicit with the Accept-Contact\
    \ and\n      Reject-Contact header fields.\n   Request Handling Preferences: Caller\
    \ preferences that describe\n      desired request treatment at a server.  These\
    \ preferences are\n      carried in the Request-Disposition header field.\n  \
    \ Target Set: A target set is a set of candidate URIs to which a proxy\n     \
    \ or redirect server can send or redirect a request.  Frequently,\n      target\
    \ sets are obtained from a registration, but they need not\n      be.\n   Explicit\
    \ Preference: A caller preference indicated explicitly in the\n      Accept-Contact\
    \ or Reject-Contact header fields.\n   Implicit Preference: A caller preference\
    \ that is implied through the\n      presence of other aspects of a request. \
    \ For example, if the\n      request method is INVITE, it represents an implicit\
    \ caller\n      preference to route the request to a UA that supports the INVITE\n\
    \      method.\n"
- title: 4.  Overview of Operation
  contents:
  - "4.  Overview of Operation\n   When a caller sends a request, it can optionally\
    \ include new header\n   fields which request certain handling at a server.  These\
    \ preferences\n   fall into two categories.  The first category, called request\n\
    \   handling preferences, is carried in the Request-Disposition header\n   field.\
    \  It describes specific behavior that is desired at a server.\n   Request handling\
    \ preferences include whether the caller wishes the\n   server to proxy or redirect,\
    \ and whether sequential or parallel\n   search is desired.  These preferences\
    \ can be applied at every proxy\n   or redirect server on the call signaling path.\n\
    \   The second category of preferences, called feature preferences, is\n   carried\
    \ in the Accept-Contact and Reject-Contact header fields.\n   These header fields\
    \ contain feature sets, represented by the same\n   feature parameters that are\
    \ used to indicate capabilities [3].  Here,\n   the feature parameters represent\
    \ the caller's preferences.  The\n   Accept-Contact header field contains feature\
    \ sets that describe UAs\n   that the caller would like to reach.  The Reject-Contact\
    \ header field\n   contains feature sets which, if matched by a UA, imply that\
    \ the\n   request should not be routed to that UA.\n   Proxies use the information\
    \ in the Accept-Contact and Reject-Contact\n   header fields to select amongst\
    \ contacts in their target set.  When\n   neither of those header fields are present,\
    \ the proxy computes\n   implicit preferences from the request.  These are caller\
    \ preferences\n   that are not explicitly placed into the request, but can be\
    \ inferred\n   from the presence of other message components.  As an example,\
    \ if the\n   request method is INVITE, this is an implicit preference to route\
    \ the\n   call to a UA that supports the INVITE method.\n   Both request handling\
    \ and feature preferences can appear in any\n   request, not just INVITE.  However,\
    \ they are only useful in requests\n   where proxies need to determine a request\
    \ target.  If the domain in\n   the request URI is not owned by any proxies along\
    \ the request path,\n   those proxies will never access a location service, and\
    \ therefore,\n   never have the opportunity to apply the caller preferences. \
    \ This\n   makes sense because typically, the request URI will identify a UAS\n\
    \   for mid-dialog requests.  In those cases, the routing decisions were\n   already\
    \ made on the initial request, and it makes no sense to redo\n   them for subsequent\
    \ requests in the dialog.\n"
- title: 5.  UAC Behavior
  contents:
  - "5.  UAC Behavior\n   A caller wishing to express preferences for a request includes\n\
    \   Accept-Contact, Reject-Contact, or Request-Disposition header fields\n   in\
    \ the request, depending on their particular preferences.  No\n   additional behavior\
    \ is required after the request is sent.\n   The Accept-Contact, Reject-Contact,\
    \ and Request-Disposition header\n   fields in an ACK for a non-2xx final response,\
    \ or in a CANCEL\n   request, MUST be equal to the values in the original request\
    \ being\n   acknowledged or cancelled.  This is to ensure proper operation\n \
    \  through stateless proxies.\n   If the UAC wants to determine whether servers\
    \ along the path\n   understand the header fields described in this specification,\
    \ it\n   includes a Proxy-Require header field with a value of \"pref\" [3] in\n\
    \   its request.  If the request should fail with a 420 response code,\n   the\
    \ UAC knows that the extension is not supported.  In that case, it\n   SHOULD\
    \ retry, and may decide whether or not to use caller\n   preferences.  A UA should\
    \ only use Proxy-Require if knowledge about\n   support is essential for handling\
    \ of the request.  Note that, in any\n   case, caller preferences can only be\
    \ considered preferences - there\n   is no guarantee that the requested service\
    \ will be executed.  As\n   such, inclusion of a Proxy-Require header field does\
    \ not mean that\n   the preferences will be executed, just that the caller preferences\n\
    \   extension is understood by the proxies.\n"
- title: 5.1.  Request Handling Preferences
  contents:
  - "5.1.  Request Handling Preferences\n   The Request-Disposition header field specifies\
    \ caller preferences for\n   how a server should process a request.  Its value\
    \ is a list of\n   tokens, each of which specifies a particular processing directive.\n\
    \   The syntax of the header field can be found in Section 10, and the\n   semantics\
    \ of the directives are described in Section 9.1.\n"
- title: 5.2.  Feature Set Preferences
  contents:
  - "5.2.  Feature Set Preferences\n   A UAC can indicate caller preferences for the\
    \ capabilities of a UA\n   that should be reached or not reached as a result of\
    \ sending a SIP\n   request.  To do that, it adds one or more Accept-Contact and\
    \ Reject-\n   Contact header field values.  Each header field value contains a\
    \ set\n   of feature parameters that define a feature set.  The syntax of the\n\
    \   header field can be found in Section 10, and a discussion of their\n   usage\
    \ in Section 9.2.\n   Each feature set is constructed as described in Section\
    \ 5 of [3].\n   The feature sets placed into these header fields MAY overlap;\
    \ that\n   is, a UA MAY indicate preferences for feature sets that match\n   according\
    \ to the matching algorithm of RFC 2533 [2].\n   A UAC can express explicit preferences\
    \ for the methods and event\n   packages supported by a UA.  It is RECOMMENDED\
    \ that a UA include a\n   term in an Accept-Contact feature set with the \"sip.methods\"\
    \ feature\n   tag (note, however, that even though the name of this feature tag\
    \ is\n   sip.methods, it would be encoded into the Accept-Contact header field\n\
    \   as just \"methods\"), whose value includes the method of the request.\n  \
    \ When a UA sends a SUBSCRIBE request, it is RECOMMENDED that a UA\n   include\
    \ a term in an Accept-Contact feature set with the \"sip.events\"\n   feature\
    \ tag, whose value includes the event package of the request.\n   Whether these\
    \ terms are placed into a new feature set, or whether\n   they are included in\
    \ each feature set, is at the discretion of the\n   implementor.  In most cases,\
    \ the right effect is achieved by\n   including a term in each feature set.\n\
    \   As an example, the following Accept-Contact header field expresses a\n   desire\
    \ to route a call to a mobile device, using feature parameters\n   taken from\
    \ [3]:\n   Accept-Contact: *;mobility=\"mobile\";methods=\"INVITE\"\n   The Reject-Contact\
    \ header field allows the UAC to specify that a UA\n   should not be contacted\
    \ if it matches any of the values of the header\n   field.  Each value of the\
    \ Reject-Contact header field contains a \"*\",\n   purely to align the syntax\
    \ with guidelines for SIP extensions [12],\n   and is parameterized by a set of\
    \ feature parameters.  Any UA whose\n   capabilities match the feature set described\
    \ by the feature\n   parameters matches the value.\n   The Accept-Contact header\
    \ field allows the UAC to specify that a UA\n   should be contacted if it matches\
    \ some or all of the values of the\n   header field.  Each value of the Accept-Contact\
    \ header field contains\n   a \"*\", and is parameterized by a set of feature\
    \ parameters.  Any UA\n   whose capabilities match the feature set described by\
    \ the feature\n   parameters matches the value.  The precise behavior depends\
    \ heavily\n   on whether the \"require\" and \"explicit\" parameters are present.\
    \  When\n   both of them are present, a proxy will only forward the request to\n\
    \   contacts which have explicitly indicated that they support the\n   desired\
    \ feature set.  Any others are discarded.  As such, a UAC\n   should only use\
    \ \"require\" and \"explicit\" together when it wishes the\n   call to fail unless\
    \ a contact definitively matches.  It's possible\n   that a UA supports a desired\
    \ feature, but did not indicate it in its\n   registration.  When a UAC uses both\
    \ \"explicit\" and \"require\", such a\n   contact would not be reached.  As a\
    \ result, this combination is often\n   not the one a UAC will want.\n   When\
    \ only \"require\" is present, it means that a contact will not be\n   used if\
    \ it doesn't match.  If it does match, or if it's not known\n   whether it's a\
    \ complete match, the contact is still used.  A UAC\n   would use \"require\"\
    \ alone when a non-matching contact is useless.\n   This is common for services\
    \ where the request simply can't be\n   serviced without the necessary features.\
    \  An example is support for\n   specific methods or event packages.  When only\
    \ \"require\" is present,\n   the proxy will also preferentially route the request\
    \ to the UA which\n   represents the \"best\" match.  Here, \"best\" means that\
    \ the UA has\n   explicitly indicated it supports more of the desired features\
    \ than\n   any other. Note, however, that this preferential routing will never\n\
    \   override an ordering provided by the called party.  The preferential\n   routing\
    \ will only choose amongst contacts of equal q-value.\n   When only \"explicit\"\
    \ is present, it means that all contacts provided\n   by the callee will be used.\
    \  However, if the contact isn't an\n   explicit match, it is tried last amongst\
    \ all other contacts with the\n   same q-value.  The principle difference, therefore,\
    \ between this\n   configuration and the usage of both \"require\" and \"explicit\"\
    \ is the\n   fallback behavior for contacts that don't match explicitly.  Here,\n\
    \   they are tried as a last resort.  If \"require\" is also present, they\n \
    \  are never tried.\n   Finally, if neither \"require\" nor \"explicit\" are present,\
    \ it means\n   that all contacts provided by the callee will be used.  However,\
    \ if\n   the contact doesn't match, it is tried last amongst all other\n   contacts\
    \ with the same q-value.  If it does match, the request is\n   routed preferentially\
    \ to the \"best\" match.  This is a common\n   configuration for preferences that,\
    \ if not honored, will still allow\n   for a successful call, and the greater\
    \ the match, the better.\n"
- title: 6.  UAS Behavior
  contents:
  - "6.  UAS Behavior\n   When a UAS compliant to this specification receives a request\
    \ whose\n   request-URI corresponds to one of its registered contacts, it SHOULD\n\
    \   apply the behavior described in Section 7.2 as if it were a proxy for\n  \
    \ the domain in the request-URI.  The UAS acts as if its location\n   database\
    \ contains a single request target for the request-URI.  That\n   target is associated\
    \ with a feature set.  The feature set is the same\n   as the one placed in the\
    \ registration of the URI in the request-URI.\n   If a UA had registered against\
    \ multiple separate addresses-of-record,\n   and the contacts registered for each\
    \ had different capabilities, it\n   will have used a different URI in each registration,\
    \ so it can\n   determine which feature set to use.\n   This processing occurs\
    \ after the client authenticates and authorizes\n   the request, but before the\
    \ remainder of the general UAS processing\n   described in Section 8.2.1 of RFC\
    \ 3261.\n   If, after performing this processing, there are no URI left in the\n\
    \   target set, the UA SHOULD reject the request with a 480 response.  If\n  \
    \ there is a URI remaining (there was only one to begin with), the UA\n   proceeds\
    \ with request processing as per RFC 3261.\n   Having a UAS perform the matching\
    \ operations as if it were a proxy\n   allows certain caller preferences to be\
    \ honored, even if the proxy\n   doesn't support the extension.\n   A UAS SHOULD\
    \ process any queue directive present in a Request-\n   Disposition header field\
    \ in the request.  All other directives MUST\n   be ignored.\n"
- title: 7.  Proxy Behavior
  contents:
  - "7.  Proxy Behavior\n   Proxy behavior consists of two orthogonal sets of rules\
    \ - one for\n   processing the Request-Disposition header field, and one for\n\
    \   processing the URI and feature set preferences in the Accept-Contact\n   and\
    \ Reject-Contact header fields.\n   In addition to processing these headers, a\
    \ proxy MAY add one if not\n   present, or add a value to an existing header field,\
    \ as if it were a\n   UAC.  This is useful for a proxy to request processing in\
    \ downstream\n   proxies in the implementation of a feature.  However, a proxy\
    \ MUST\n   NOT modify or remove an existing header field value.  This is\n   particularly\
    \ important when S/MIME is used.  The message signature\n   could include the\
    \ caller preferences header fields, allowing the UAS\n   to verify that, even\
    \ though proxies may have added header fields, the\n   original caller preferences\
    \ were still present.\n"
- title: 7.1.  Request-Disposition Processing
  contents:
  - "7.1.  Request-Disposition Processing\n   If the request contains a Request-Disposition\
    \ header field and it is\n   the owner of the domain in the Request URI, the server\
    \ SHOULD execute\n   the directives as described in Section 9.1, unless it has\
    \ local\n   policy configured to direct it otherwise.\n"
- title: 7.2.  Preference and Capability Matching
  contents:
  - "7.2.  Preference and Capability Matching\n   A proxy compliant to this specification\
    \ MUST NOT apply the\n   preferences matching operation described here to a request\
    \ unless it\n   is the owner of the domain in the request URI, and accessing a\n\
    \   location service that has capabilities associated with request\n   targets.\
    \  However, if it is the owner of the domain, and accessing a\n   location service\
    \ that has capabilities associated with request\n   targets, it SHOULD apply the\
    \ processing described in this section.\n   Typically, this is a proxy that is\
    \ using a registration database to\n   determine the request targets.  However,\
    \ if a proxy knows about\n   capabilities through some other means, it SHOULD\
    \ apply the processing\n   defined here as well.  If it does perform the processing,\
    \ it MUST do\n   so as described below.\n   The processing is described through\
    \ a conversion from the syntax\n   described in this specification to RFC 2533\
    \ [2] syntax, followed by a\n   matching operation and a sorting of resulting\
    \ contact values.  The\n   usage of RFC 2533 syntax as an intermediate step is\
    \ not required; it\n   only serves as a useful tool to describe the behavior required\
    \ of the\n   proxy.  A proxy can use any steps it likes, so long as the results\n\
    \   are identical to the ones that would be achieved with the processing\n   described\
    \ here.\n"
- title: 7.2.1.  Extracting Explicit Preferences
  contents:
  - "7.2.1.  Extracting Explicit Preferences\n   The first step in proxy processing\
    \ is to extract explicit\n   preferences.  To do that, it looks for the Accept-Contact\
    \ and\n   Reject-Contact header fields.\n   For each value of those header fields,\
    \ it extracts the feature\n   parameters.  These are the header field parameters\
    \ whose name is\n   \"audio\", \"automata\", \"class\", \"duplex\", \"data\",\
    \ \"control\",\n   \"mobility\", \"description\", \"events\", \"priority\", \"\
    methods\",\n   \"extensions\", \"schemes\", \"application\", \"video\", \"language\"\
    , \"type\",\n   \"isfocus\", \"actor\", or \"text\", or whose name begins with\
    \ a plus (+)\n   [3].  The proxy converts all of those parameters to the syntax\
    \ of RFC\n   2533, based on the rules in Section 8.\n   The result will be a set\
    \ of feature set predicates in conjunctive\n   normal form, each of which is associated\
    \ with one of the two\n   preference header fields.  If there was a req-parameter\
    \ associated\n   with a header field value in the Accept-Contact header field,\
    \ the\n   feature set predicate derived from that header field value is said to\n\
    \   have its require flag set.  Similarly, if there was an explicit-param\n  \
    \ associated with a header field value in the Accept-Contact header\n   field,\
    \ the feature set predicate derived from that header field value\n   is said to\
    \ have its explicit flag set.\n"
- title: 7.2.2.  Extracting Implicit Preferences
  contents:
  - "7.2.2.  Extracting Implicit Preferences\n   If, and only if, the proxy did not\
    \ find any explicit preferences in\n   the request (because there was no Accept-Contact\
    \ or Reject-Contact\n   header field), the proxy extracts implicit preferences.\
    \  These\n   preferences are ones implied by the presence of other information\
    \ in\n   the request.\n   First, the proxy creates a conjunction with no terms.\
    \  This\n   conjunction represents a feature set that will be associated with\
    \ the\n   Accept-Contact header field, as if it were included there.  Note that\n\
    \   there is no modification of the message implied - only an association\n  \
    \ for the purposes of processing.  Furthermore, this feature set has\n   its require\
    \ flag set, but not its explicit flag.\n   The proxy then adds terms to the conjunction\
    \ for the two implicit\n   preference types below.\n"
- title: 7.2.2.1.  Methods
  contents:
  - "7.2.2.1.  Methods\n   One implicit preference is the method.  When a UAC sends\
    \ a request\n   with a specific method, it is an implicit preference to have the\n\
    \   request routed only to UAs that support that method.  To support this\n  \
    \ implicit preference, the proxy adds a term to the conjunction of the\n   following\
    \ form:\n   (sip.methods=[method of request])\n"
- title: 7.2.2.2.  Event Packages
  contents:
  - "7.2.2.2.  Event Packages\n   For requests that establish a subscription [5],\
    \ the Event header\n   field is another expression of an implicit preference.\
    \  It expresses\n   a desire for the request to be routed only to a server that\
    \ supports\n   the given event package.  To support this implicit preference,\
    \ the\n   proxy adds a term to the conjunction of the following form:\n   (sip.events=[value\
    \ of the Event header field])\n"
- title: 7.2.3.  Constructing Contact Predicates
  contents:
  - "7.2.3.  Constructing Contact Predicates\n   The proxy then takes each URI in\
    \ the target set (the set of URI it is\n   going to proxy or redirect to), and\
    \ obtains its capabilities as an\n   RFC 2533 formatted feature set predicate.\
    \  This is called a contact\n   predicate.  If the target URI was obtained through\
    \ a registration,\n   the proxy computes the contact predicate by extracting the\
    \ feature\n   parameters from the Contact header field [3] and then converting\
    \ them\n   to a feature predicate.  To extract the feature parameters, the proxy\n\
    \   follows these steps:\n   1. Create an initial, empty list of feature parameters.\n\
    \   2. If the Contact URI parameters included the \"audio\", \"automata\",\n \
    \     \"class\", \"duplex\", \"data\", \"control\", \"mobility\", \"description\"\
    ,\n      \"events\", \"priority\", \"methods\", \"schemes\", \"application\",\n\
    \      \"video\", \"actor\", \"language\", \"isfocus\", \"type\", \"extensions\"\
    , or\n      \"text\" parameters, those are copied into the list.\n   3. If any\
    \ Contact URI parameter name begins with a \"+\", it is copied\n      into the\
    \ list if the list does not already contain that name with\n      the plus removed.\
    \  In other words, if the \"video\" feature\n      parameter is in the list, the\
    \ \"+video\" parameter would not be\n      placed into the list.  This conflict\
    \ should never arise if the\n      client were compliant to [3], since it is illegal\
    \ to use the +\n      form for encoding of a feature tag in the base set.\n  \
    \ If the URI in the target set had no feature parameters, it is said to\n   be\
    \ immune to caller preference processing.  This means that the URI\n   is removed\
    \ from the target set temporarily, the caller preferences\n   processing described\
    \ below is executed, and then the URI is added\n   back in.\n   Assuming the URI\
    \ has feature parameters, they are converted to RFC\n   2533 syntax using the\
    \ rules of Section 8.\n   The resulting predicate is associated with a q-value.\
    \  If the contact\n   predicate was learned through a REGISTER request, the q-value\
    \ is\n   equal to the q-value in the Contact header field parameter, else\n  \
    \ \"1.0\" if not specified.\n   As an example, consider the following registered\
    \ Contact header\n   field:\n     Contact: <sip:user@example.com>;audio;video;mobility=\"\
    fixed\";\n         +sip.message=\"TRUE\";other-param=66372;\n         methods=\"\
    INVITE,OPTIONS,BYE,CANCEL,ACK\";schemes=\"sip,http\"\n   This would be converted\
    \ into the following predicate:\n      (& (sip.audio=TRUE)\n         (sip.video=TRUE)\n\
    \         (sip.mobility=fixed)\n         (sip.message=TRUE)\n         (| (sip.methods=INVITE)\
    \ (sip.methods=OPTIONS) (sip.methods=BYE)\n            (sip.methods=CANCEL) (sip.methods=ACK))\n\
    \         (| (sip.schemes=sip) (sip.schemes=http)))\n   Note that \"other-param\"\
    \ was not considered a feature parameter, since\n   it is neither a base tag nor\
    \ did it begin with a leading +.\n"
- title: 7.2.4.  Matching
  contents:
  - "7.2.4.  Matching\n   It is important to note that the proxy does not have to\
    \ know anything\n   about the meaning of the feature tags that it is comparing\
    \ in order\n   to perform the matching operation.  The rules for performing the\n\
    \   comparison depend on syntactic hints present in the values of each\n   feature\
    \ tag.  For example, a predicate such as:\n   (foo>=4)\n   implies that the feature\
    \ tag \"foo\" is a numeric value.  The matching\n   rules in RFC 2533 only require\
    \ an implementation to know whether the\n   feature tag is a numeric, token, or\
    \ quoted string (booleans can be\n   treated as tokens).  Quoted strings are always\
    \ matched using a case-\n   sensitive matching operation.  Tokens are matched\
    \ using case-\n   insensitive matching.  These two cases are differentiated by\
    \ the\n   presence of angle brackets around the feature tag value.  When these\n\
    \   brackets are present (i.e., ;+sip.foo=\"<value>\"), it implies case\n   sensitive\
    \ string comparison.  When they are not present, (i.e.,\n   (;+sip.bar=\"val\"\
    ), it implies case insensitivity.  Numerics are\n   matched using normal mathematical\
    \ comparisons.\n   First, the proxy applies the predicates associated with the\
    \ Reject-\n   Contact header field.\n   For each contact predicate, each Reject-Contact\
    \ predicate (that is,\n   each predicate associated with the Reject-Contact header\
    \ field) is\n   examined.  If that Reject-Contact predicate contains a filter\
    \ for a\n   feature tag, and that feature tag is not present anywhere in the\n\
    \   contact predicate, that Reject-Contact predicate is discarded for the\n  \
    \ processing of that contact predicate.  If the Reject-Contact\n   predicate is\
    \ not discarded, it is matched with the contact predicate\n   using the matching\
    \ operation of RFC 2533 [2].  If the result is a\n   match, the URI corresponding\
    \ to that contact predicate is discarded\n   from the target set.\n   The result\
    \ is that Reject-Contact will only discard URIs where the UA\n   has explicitly\
    \ indicated support for the features that are not\n   wanted.\n   Next, the proxy\
    \ applies the predicates associated with the Accept-\n   Contact header field.\
    \  For each contact that remains in the target\n   set, the proxy constructs a\
    \ matching set, Ms.  Initially, this set\n   contains all of the Accept-Contact\
    \ predicates.  Each of those\n   predicates is examined.  It is matched with the\
    \ contact predicate\n   using the matching operation of RFC 2533 [2].  If the\
    \ result is not a\n   match, and the Accept-Contact predicate had its require\
    \ flag set, the\n   URI corresponding to that contact predicate is discarded from\
    \ the\n   target set.  If the result is not a match, but the Accept-Contact\n\
    \   predicate did not have its require flag set, that contact URI is not\n   discarded\
    \ from the target set, however, the Accept-Contact predicate\n   is removed from\
    \ the matching set for that contact.\n   For each contact that remains in the\
    \ target set, the proxy computes a\n   score for that contact against each predicate\
    \ in the contact's\n   matching set.  Let the number of terms in the Accept-Contact\n\
    \   predicate conjunction be equal to N.  Each term in that predicate\n   contains\
    \ a single feature tag.  If the contact predicate has a term\n   containing that\
    \ same feature tag, the score is incremented by 1/N.\n   If the feature tag was\
    \ not present in the contact predicate, the\n   score remains unchanged.  Based\
    \ on these rules, the score can range\n   between zero and one.\n            \
    \                                        T\n                                 \
    \             +----------> DROP Contact\n                                    \
    \          |\n                                              |\n              \
    \                               / \\\n                                       \
    \     /   \\\n                                        T  /     \\   F\n      \
    \                              +---->/require\\------> Set score=0\n         \
    \                           |     \\      /\n                                \
    \    |      \\    /\n                                   / \\      \\  /\n    \
    \                              /   \\      \\/\n                       score<1\
    \   /     \\\n                      +-------> /explicit----> Score unchanged\n\
    \                      |         \\      /    F\n                      |     \
    \     \\    /\n                     / \\          \\  /\n                    /\
    \   \\          \\/\n    +--------+     /     \\\n -->|Compute |--> /Score  \\\
    \ --------> Score unchanged\n    |  Score |    \\      /  score=1\n    +--------+\
    \     \\    /\n                    \\  /\n                     \\/\n   Figure\
    \ 1: Applying the Score\n   The require and explicit tags are then applied, resulting\
    \ in\n   potential modification of the score and the target set.  This process\n\
    \   is summarized in Figure 1.  If the score for the contact predicate\n   against\
    \ that Accept-Contact predicate was less than one, the Accept-\n   Contact predicate\
    \ had an explicit tag, and if the predicate also had\n   a require tag, the Contact\
    \ URI corresponding to that contact\n   predicate is dropped.  If, however, the\
    \ predicate did not have a\n   require tag, the score is set to zero.  If there\
    \ was no explicit tag,\n   the score is unchanged.\n   The next step is to combine\
    \ the scores and the q-values associated\n   with the predicates in the matching\
    \ set, to arrive at an overall\n   caller preference, Qa.  For those URIs in the\
    \ target set which\n   remain, there will be a score which indicates its match\
    \ against each\n   Accept-Contact predicate in the matching set.  If there are\
    \ M\n   Accept-Contact predicates in the matching set, there will be M scores\n\
    \   S1 through SM, for each contact.  The overall caller preference, Qa,\n   is\
    \ the arithmetic average of S1 through SM.\n   At this point, any URIs that were\
    \ removed from the target set because\n   they were immune from caller preferences\
    \ are added back in, and Qa\n   for that URI is set to 1.0.\n   The purpose of\
    \ the caller preference Qa is to provide an ordering for\n   any contacts remaining\
    \ in the target set, if the callee has not\n   provided an ordering.  To do this,\
    \ the contacts remaining in the\n   target set are sorted by the q-value provided\
    \ by the callee.  Once\n   sorted, they are grouped into equivalence classes,\
    \ such that all\n   contacts with the same q-value are in the same equivalence\
    \ class.\n   Within each equivalence class, the contacts are then ordered based\
    \ on\n   their values of Qa.  The result is an ordered list of contacts that\n\
    \   is used by the proxy.\n   If there were no URIs in the target set after the\
    \ application of the\n   processing in this section, and the caller preferences\
    \ were based on\n   implicit preferences (Section 7.2.2), the processing in this\
    \ section\n   is discarded, and the original target set, ordered by their original\n\
    \   q-values, is used.\n      This handles the case where implicit preferences\
    \ for the method or\n      event packages resulted in the elimination of all potential\n\
    \      targets.  By going back to the original target set, those URIs\n      will\
    \ be tried, and result in the generation of a 405 or 489\n      response.  The\
    \ UAC can then use this information to try again, or\n      report the error to\
    \ the user.  Without reverting to the original\n      target set, the UAC would\
    \ see a 480 response, and have no\n      knowledge of why their request failed.\
    \  Of course, the target set\n      can also be empty after the application of\
    \ explicit preferences.\n      This will result in the generation of a 480 by\
    \ the proxy.  This\n      behavior is acceptable, and indeed, desirable in the\
    \ case of\n      explicit preferences.  When the caller makes an explicit\n  \
    \    preference, it is agreeing that its request might fail because of\n     \
    \ a preference mismatch.  One might try to return an error\n      indicating the\
    \ capabilities of the callee, so that the caller\n      could perhaps try again.\
    \  However, doing so results in the leaking\n      of potentially sensitive information\
    \ to the caller without\n      authorization from the callee, and therefore this\
    \ specification\n      does not provide a means for it.\n   If a proxy server\
    \ is recursing, it adds the Contact header fields\n   returned in the redirect\
    \ responses to the target set, and re-applies\n   the caller preferences algorithm.\n\
    \   If the server is redirecting, it returns all entries in the target\n   set.\
    \  It assigns q-values to those entries so that the ordering is\n   identical\
    \ to the ordering determined by the processing above.\n   However, it MUST NOT\
    \ include the feature parameters for the entries\n   in the target set.  If it\
    \ did, the upstream proxy server would apply\n   the same caller preferences once\
    \ more, resulting in a double\n   application of those preferences.  If the redirect\
    \ server does wish\n   to include the feature parameters in the Contact header\
    \ field, it\n   MUST redirect using the original target set and original q-values,\n\
    \   before the application of caller preferences.\n"
- title: 7.2.5.  Example
  contents:
  - "7.2.5.  Example\n   Consider the following example, which is contrived but illustrative\n\
    \   of the various components of the matching process.  There are five\n   registered\
    \ Contacts for sip:user@example.com.  They are:\n   Contact: sip:u1@h.example.com;audio;video;methods=\"\
    INVITE,BYE\";q=0.2\n   Contact: sip:u2@h.example.com;audio=\"FALSE\";\n     methods=\"\
    INVITE\";actor=\"msg-taker\";q=0.2\n   Contact: sip:u3@h.example.com;audio;actor=\"\
    msg-taker\";\n     methods=\"INVITE\";video;q=0.3\n   Contact: sip:u4@h.example.com;audio;methods=\"\
    INVITE,OPTIONS\";q=0.2\n   Contact: sip:u5@h.example.com;q=0.5\n   An INVITE sent\
    \ to sip:user@example.com contained the following caller\n   preferences header\
    \ fields:\n   Reject-Contact: *;actor=\"msg-taker\";video\n   Accept-Contact:\
    \ *;audio;require\n   Accept-Contact: *;video;explicit\n   Accept-Contact: *;methods=\"\
    BYE\";class=\"business\";q=1.0\n   There are no implicit preferences in this example,\
    \ because explicit\n   preferences are provided.\n   The proxy first removes u5\
    \ from the target set, since it is immune\n   from caller preferences processing.\n\
    \   Next, the proxy processes the Reject-Contact header field.  It is a\n   match\
    \ for all four remaining contacts, but only an explicit match for\n   u3.  That\
    \ is because u3 is the only one that explicitly indicated\n   support for video,\
    \ and explicitly indicated it is a message taker.\n   So, u3 gets discarded, and\
    \ the others remain.\n   Next, each of the remaining three contacts is compared\
    \ against each\n   of the three Accept-Contact predicates.  u1 is a match to all\
    \ three,\n   earning a score of 1.0 for the first two predicates, and 0.5 for\
    \ the\n   third (the methods feature tag was present in the contact predicate,\n\
    \   but the class tag was not).  u2 doesn't match the first predicate.\n   Because\
    \ that predicate has a require tag, u2 is discarded.  u4\n   matches the first\
    \ predicate, earning a score of 1.0.  u4 matches the\n   second predicate, but\
    \ since the match is not explicit (the score is\n   0.0, in fact), the score is\
    \ set to zero (it was already zero, so\n   nothing changes).  u4 does not match\
    \ the third predicate.\n   At this point, u1 and u4 remain.  u1 matched all three\
    \ Accept-Contact\n   predicates, so its matching set contains all three, with\
    \ scores of 1,\n   1, and 0.5.  u4 matches the first two predicates, with scores\
    \ of 1.0\n   and 0.0.  Qa for u1 is 0.83 and Qa for u4 is 0.5.  u5 is added back\n\
    \   in with a Qa of 1.0.\n   Next, the remaining contacts in the target set are\
    \ sorted by q-value.\n   u5 has a value of 0.5, u1 has a q-value of 0.2 and so\
    \ does u4.  There\n   are two equivalence classes.  The first has a q-value of\
    \ 0.5, and\n   consists of just u5.  Since there is only one member of the class,\n\
    \   sorting within the class has no impact.  The second equivalence class\n  \
    \ has a q-value of 0.2.  Within that class, the two contacts, u1 and\n   u4, are\
    \ ordered based on their values of Qa.  u1 has a Qa of 0.83,\n   and u4, a Qa\
    \ of 0.5.  Thus, u1 comes first, followed by u4.  The\n   resulting overall ordered\
    \ set of contacts in the target set is u5,\n   u1, and then u4.\n"
- title: 8.  Mapping Feature Parameters to a Predicate
  contents:
  - "8.  Mapping Feature Parameters to a Predicate\n   Mapping between feature parameters\
    \ and a feature set predicate,\n   formatted according to the syntax of RFC 2533\
    \ [2], is trivial.  It is\n   just the opposite of the process described in Section\
    \ 5 of [3].\n   Starting from a set of feature-param, the procedure is as follows.\n\
    \   Construct a conjunction.  Each term in the conjunction derives from\n   one\
    \ feature-param.  If the feature-param has no value, it is\n   equivalent, in\
    \ terms of the processing which follows, as if it had a\n   value of \"TRUE\"\
    .\n   If the feature-param value is a tag-value-list, the element of the\n   conjunction\
    \ is a disjunction.  There is one term in the disjunction\n   for each tag-value\
    \ in the tag-value-list.\n   Consider now the construction of a filter from a\
    \ tag-value.  If the\n   tag-value starts with an exclamation mark (!), the filter\
    \ is of the\n   form:\n   (! <filter from remainder>)\n   where \"<filter from\
    \ remainder>\" refers to the filter that would be\n   constructed from the tag-value\
    \ if the exclamation mark had not been\n   present.\n   If the tag-value starts\
    \ with an octothorpe (#), the filter is a\n   numeric comparison.  The comparator\
    \ is either =, >=, <=, or a range\n   based on the next characters in the phrase.\
    \  If the next characters\n   are =, >=, or <=, the filter is of the form:\n \
    \  (name comparator compare-value)\n   where name is the name of the feature parameter\
    \ after it has been\n   decoded (see below), and the comparator is either =, >=,\
    \ or <=\n   depending of the initial characters in the phrase.  If the remainder\n\
    \   of the text in the tag-value after the equal contains a decimal point\n  \
    \ (implying a rational number), the decimal point is shifted right N\n   times\
    \ until it is an integer, I.  Compare-value above is then set to\n   \"I / 10**N\"\
    , where 10**N is the result of computing the number 10 to\n   the Nth power.\n\
    \   If the value after the octothorpe is a number, the filter is a range.\n  \
    \ The format of the filter is:\n      (name=<remainder>)\n   where \"name\" is\
    \ the feature-tag after it has been decoded (see\n   below), and \"<remainder>\"\
    \ is the remainder of the text in the tag-\n   value after the #, with any decimal\
    \ numbers converted to a rational\n   form, and the colon replaced by a double\
    \ dot (..).\n   If the tag-value does not begin with an octothorpe (it is a token-\n\
    \   nobang or boolean), the filter is of the form:\n      (name=tag-value)\n \
    \  where name is the feature-tag after it has been decoded (see below).\n   If\
    \ the feature-param contains a string-value (based on the fact that\n   it begins\
    \ with a left angle bracket (\"<\") and ends with a right angle\n   bracket (\"\
    >\")), the filter is of the form:\n      (name=\"qdtext\")\n   Note the explicit\
    \ usage of quotes around the qdtext, which indicate\n   that the value is a string.\
    \  In RFC 2533, strings are compared using\n   case sensitive rules, and tokens\
    \ are compared using case insensitive\n   rules.\n   Feature tags, as specified\
    \ in RFC 2506 [13], cannot be directly\n   represented as header field parameters\
    \ in the Contact, Accept-\n   Contact, and Reject-Contact header fields.  This\
    \ is due to an\n   inconsistency in the grammars, and in the need to differentiate\n\
    \   feature parameters from parameters used by other extensions.  As\n   such,\
    \ feature tag values are encoded from RFC 2506 format to yield an\n   enc-feature-tag,\
    \ and then are decoded into RFC 2506 format.  The\n   decoding process is simple.\
    \  If there is a leading plus (+) sign, it\n   is removed.  Any exclamation point\
    \ (!) is converted to a colon (:)\n   and any single quote (') is converted to\
    \ a forward slash (/).  If\n   there was no leading plus sign, and the remainder\
    \ of the encoded name\n   was \"audio\", \"automata\", \"class\", \"duplex\",\
    \ \"data\", \"control\",\n   \"mobility\", \"description\", \"events\", \"priority\"\
    , \"methods\",\n   \"schemes\", \"application\", \"video\", \"actor\", \"isfocus\"\
    , \"extensions\"\n   or \"text\", the prefix \"sip.\" is added to the remainder\
    \ of the encoded\n   name to compute the feature tag name.\n   As an example,\
    \ the Accept-Contact header field:\n      Accept-Contact:*;mobility=\"fixed\"\n\
    \        ;events=\"!presence,message-summary\"\n        ;language=\"en,de\";description=\"\
    <PC>\";+sip.newparam\n        ;+rangeparam=\"#-4:+5.125\"\n   would be converted\
    \ to the following feature predicate:\n         (& (sip.mobility=fixed)\n    \
    \        (| (! (sip.events=presence)) (sip.events=message-summary))\n        \
    \    (| (language=en) (language=de))\n            (sip.description=\"PC\")\n \
    \           (sip.newparam=TRUE)\n            (rangeparam=-4..5125/1000))\n"
- title: 9.  Header Field Definitions
  contents:
  - "9.  Header Field Definitions\n   This specification defines three new header\
    \ fields - Accept-Contact,\n   Reject-Contact, and Request-Disposition.\n   Figure\
    \ 2 and Figure 3 are an extension of Tables 2 and 3 in RFC 3261\n   [1] for the\
    \ Accept-Contact, Reject-Contact, and Request-Disposition\n   header fields. \
    \ The column \"INF\" is for the INFO method [6], \"PRA\" is\n   for the PRACK\
    \ method [7], \"UPD\" is for the UPDATE method [8], \"SUB\"\n   is for the SUBSCRIBE\
    \ method [5], \"NOT\" is for the NOTIFY method [5],\n   \"MSG\" is for the MESSAGE\
    \ method [9], and \"REF\" is for the REFER\n   method [10].\n   Header field \
    \         where  proxy  ACK BYE CAN INV OPT REG\n   Accept-Contact          R\
    \      ar    o   o   o   o   o   -\n   Reject-Contact          R      ar    o\
    \   o   o   o   o   -\n   Request-Disposition     R      ar    o   o   o   o \
    \  o   o\n   Figure 2: Accept-Contact, Reject-Contact, and Request-Disposition\n\
    \             header fields\n   Header field          where  proxy  PRA UPD SUB\
    \ NOT INF MSG REF\n   Accept-Contact          R      ar    o   o   o   o   o \
    \  o   o\n   Reject-Contact          R      ar    o   o   o   o   o   o   o\n\
    \   Request-Disposition     R      ar    o   o   o   o   o   o   o\n   Figure\
    \ 3: Accept-Contact, Reject-Contact, and Request-Disposition\n             header\
    \ fields\n"
- title: 9.1.  Request Disposition
  contents:
  - "9.1.  Request Disposition\n   The Request-Disposition header field specifies\
    \ caller preferences for\n   how a server should process a request.  Its value\
    \ is a list of\n   tokens, each of which specifies a particular directive.  Its\
    \ syntax\n   is specified in Section 10.  Note that a compact form, using the\n\
    \   letter d, has been defined.  The directives are grouped into types.\n   There\
    \ can only be one directive of each type per request (e.g., you\n   cannot have\
    \ both \"proxy\" and \"redirect\" in the same Request-\n   Disposition header\
    \ field).\n   When the caller specifies a directive, the server SHOULD honor that\n\
    \   directive.\n   The following types of directives are defined:\n   proxy-directive:\
    \ This type of directive indicates whether the caller\n      would like each server\
    \ to proxy (\"proxy\") or redirect\n      (\"redirect\").\n   cancel-directive:\
    \ This type of directive indicates whether the caller\n      would like each proxy\
    \ server to send a CANCEL request downstream\n      (\"cancel\") in response to\
    \ a 200 OK from the downstream server\n      (which is the normal mode of operation,\
    \ making it redundant), or\n      whether this function should be left to the\
    \ caller (\"no-cancel\").\n      If a proxy receives a request with this parameter\
    \ set to \"no-\n      cancel\", it SHOULD NOT CANCEL any outstanding branches\
    \ upon\n      receipt of a 2xx.  However, it would still send CANCEL on any\n\
    \      outstanding branches upon receipt of a 6xx.\n   fork-directive: This type\
    \ of directive indicates whether a proxy\n      should fork a request (\"fork\"\
    ), or proxy to only a single address\n      (\"no-fork\").  If the server is requested\
    \ not to fork, the server\n      SHOULD proxy the request to the \"best\" address\
    \ (generally the one\n      with the highest q-value).  If there are multiple\
    \ addresses with\n      the highest q-value, the server chooses one based on its\
    \ local\n      policy.  The directive is ignored if \"redirect\" has been\n  \
    \    requested.\n   recurse-directive: This type of directive indicates whether\
    \ a proxy\n      server receiving a 3xx response should send requests to the\n\
    \      addresses listed in the response (\"recurse\"), or forward the list\n \
    \     of addresses upstream towards the caller (\"no-recurse\").  The\n      directive\
    \ is ignored if \"redirect\" has been requested.\n   parallel-directive: For a\
    \ forking proxy server, this type of\n      directive indicates whether the caller\
    \ would like the proxy server\n      to proxy the request to all known addresses\
    \ at once (\"parallel\"),\n      or go through them sequentially, contacting the\
    \ next address only\n      after it has received a non-2xx or non-6xx final response\
    \ for the\n      previous one (\"sequential\").  The directive is ignored if\n\
    \      \"redirect\" has been requested.\n   queue-directive: If the called party\
    \ is temporarily unreachable,\n      e.g., because it is in another call, the\
    \ caller can indicate that\n      it wants to have its call queued (\"queue\"\
    ) or rejected immediately\n      (\"no-queue\").  If the call is queued, the server\
    \ returns \"182\n      Queued\".  A queued call can be terminated as described\
    \ in [1].\n   Example:\n      Request-Disposition: proxy, recurse, parallel\n\
    \   The set of request disposition directives is not extensible on\n   purpose.\
    \  This is to avoid a proliferation of new extensions to SIP\n   that are \"tunneled\"\
    \ through this header field.\n"
- title: 9.2.  Accept-Contact and Reject-Contact Header Fields
  contents:
  - "9.2.  Accept-Contact and Reject-Contact Header Fields\n   The syntax for these\
    \ header fields is described in Section 10.  A\n   compact form, with the letter\
    \ a, has been defined for the Accept-\n   Contact header field, and with the letter\
    \ j for the Reject-Contact\n   header field.\n"
- title: 10.  Augmented BNF
  contents:
  - "10.  Augmented BNF\n   The BNF for the Request-Disposition header field is:\n\
    \   Request-Disposition   =   ( \"Request-Disposition\" / \"d\" ) HCOLON\n   \
    \                          directive *(COMMA directive)\n   directive        \
    \     =   proxy-directive / cancel-directive /\n                             fork-directive\
    \ / recurse-directive /\n                             parallel-directive / queue-directive\n\
    \   proxy-directive       =  \"proxy\" / \"redirect\"\n   cancel-directive   \
    \   =  \"cancel\" / \"no-cancel\"\n   fork-directive        =  \"fork\" / \"no-fork\"\
    \n   recurse-directive     =  \"recurse\" / \"no-recurse\"\n   parallel-directive\
    \    =  \"parallel\" / \"sequential\"\n   queue-directive       =  \"queue\" /\
    \ \"no-queue\"\n   The BNF for the Accept-Contact and Reject-Contact header fields\
    \ is:\n   Accept-Contact  =  (\"Accept-Contact\" / \"a\") HCOLON ac-value\n  \
    \                    *(COMMA ac-value)\n   Reject-Contact  =  (\"Reject-Contact\"\
    \ / \"j\") HCOLON rc-value\n                      *(COMMA rc-value)\n   ac-value\
    \        =  \"*\" *(SEMI ac-params)\n   rc-value        =  \"*\" *(SEMI rc-params)\n\
    \   ac-params       =  feature-param / req-param\n                         / explicit-param\
    \ / generic-param\n                       ;;feature param from RFC 3840\n    \
    \                   ;;generic-param from RFC 3261\n   rc-params       =  feature-param\
    \ / generic-param\n   req-param       =  \"require\"\n   explicit-param  =  \"\
    explicit\"\n   Despite the BNF, there MUST NOT be more than one req-param or\n\
    \   explicit-param in an ac-params.  Furthermore, there can only be one\n   instance\
    \ of any feature tag in feature-param.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The presence of caller preferences in a request\
    \ has an effect on the\n   ways in which the request is handled at a server. \
    \ As a result,\n   requests with caller preferences SHOULD be integrity-protected\
    \ with\n   the sips mechanism specified in RFC 3261, Section 26.\n   Processing\
    \ of caller preferences requires set operations and searches\n   which can require\
    \ some amount of computation.  This enables a DOS\n   attack whereby a user can\
    \ send requests with substantial numbers of\n   caller preferences, in the hopes\
    \ of overloading the server.  To\n   counter this, servers SHOULD reject requests\
    \ with too many rules.  A\n   reasonable number is around 20.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This specification registers three new SIP header\
    \ fields, according\n   to the process of RFC 3261 [1].\n   The following is the\
    \ registration for the Accept-Contact header\n   field:\n   RFC Number: RFC 3841\n\
    \   Header Field Name: Accept-Contact\n   Compact Form: a\n   The following is\
    \ the registration for the Reject-Contact header\n   field:\n   RFC Number: RFC\
    \ 3841\n   Header Field Name: Reject-Contact\n   Compact Form: j\n   The following\
    \ is the registration for the Request-Disposition header\n   field:\n   RFC Number:\
    \ RFC 3841\n   Header Field Name: Request-Disposition\n   Compact Form: d\n"
- title: 13.  Acknowledgments
  contents:
  - "13.  Acknowledgments\n   The initial set of media feature tags used by this specification\
    \ were\n   influenced by Scott Petrack's CMA design.  Jonathan Lennox, Bob\n \
    \  Penfield, Ben Campbell, Mary Barnes, Rohan Mahy, and John Hearty\n   provided\
    \ helpful comments.  Graham Klyne provided assistance on the\n   usage of RFC\
    \ 2533.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Klyne, G., \"A Syntax for Describing Media Feature Sets\", RFC\n         2533,\
    \ March 1999.\n   [3]   Rosenberg, J., Schulzrinne, J., and P. Kyzivat, \"Indicating\n\
    \         User Agent Capabilities in the Session Initiation Protocol\n       \
    \  (SIP)\", RFC 3840, August 2004.\n   [4]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [5]   Roach, A.B., \"Session Initiation Protocol (SIP)-Specific Event\n\
    \         Notification\", RFC 3265, June 2002.\n   [6]   Donovan, S., \"The SIP\
    \ INFO Method\", RFC 2976, October 2000.\n   [7]   Rosenberg, J. and H. Schulzrinne,\
    \ \"Reliability of Provisional\n         Responses in Session Initiation Protocol\
    \ (SIP)\", RFC 3262, June\n         2002.\n   [8]   Rosenberg, J., \"The Session\
    \ Initiation Protocol (SIP) UPDATE\n         Method\", RFC 3311, October 2002.\n\
    \   [9]   Campbell, B., Ed., Rosenberg, J., Schulzrinne, H., Huitema, C.,\n  \
    \       and D. Gurle, \"Session Initiation Protocol (SIP) Extension for\n    \
    \     Instant Messaging\", RFC 3428, December 2002.\n   [10]  Sparks, R., \"The\
    \ Session Initiation Protocol (SIP) Refer\n         Method\", RFC 3515, April\
    \ 2003.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [11]  Lennox, J. and H. Schulzrinne, \"Call\
    \ Processing Language\n         Framework and Requirements\", RFC 2824, May 2000.\n\
    \   [12]  Rosenberg, J., \"Guidelines for Authors of Extensions to the\n     \
    \    Session Initiation Protocol  (SIP)\", Work in Progress, November\n      \
    \   2002.\n   [13]  Holtman, K., Muntz, A., and T. Hardie, \"Media Feature Tag\n\
    \         Registration Procedure\", BCP 31, RFC 2506, March 1999.\n"
- title: 15.  Authors' Addresses
  contents:
  - "15.  Authors' Addresses\n   Jonathan Rosenberg\n   dynamicsoft\n   600 Lanidex\
    \ Plaza\n   Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail:\
    \ jdrosen@dynamicsoft.com\n   URI:   http://www.jdrosen.net\n   Henning Schulzrinne\n\
    \   Columbia University\n   M/S 0401\n   1214 Amsterdam Ave.\n   New York, NY\
    \  10027\n   US\n   EMail: schulzrinne@cs.columbia.edu\n   URI:   http://www.cs.columbia.edu/~hgs\n\
    \   Paul Kyzivat\n   Cisco Systems\n   1414 Massachusetts Avenue\n   BXB500 C2-2\n\
    \   Boxboro, MA  01719\n   US\n   EMail: pkyzivat@cisco.com\n"
- title: 16.  Full Copyright Statement
  contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
