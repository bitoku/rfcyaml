- contents:
  - "        Clearance Attribute and Authority Clearance Constraints\n                         Certificate
    Extension\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines the syntax and semantics for the Clearance\n
    \  attribute and the Authority Clearance Constraints extension in X.509\n   certificates.
    \ The Clearance attribute is used to indicate the\n   clearance held by the subject.
    \ The Clearance attribute may appear in\n   the subject directory attributes extension
    of a public key\n   certificate or in the attributes field of an attribute certificate.\n
    \  The Authority Clearance Constraints certificate extension values in a\n   Trust
    Anchor (TA), in Certification Authority (CA) public key\n   certificates, and
    in an Attribute Authority (AA) public key\n   certificate in a certification path
    for a given subject constrain the\n   effective Clearance of the subject.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5913.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n      1.2.
    ASN.1 Syntax Notation ......................................4\n   2. Clearance
    Attribute .............................................4\n   3. Authority Clearance
    Constraints Certificate Extension ...........5\n   4. Processing Clearance and
    Authority Clearance Constraints\n      in a PKC ........................................................6\n
    \     4.1. Collecting Constraints .....................................7\n           4.1.1.
    Certification Path Processing .......................7\n                  4.1.1.1.
    Inputs .....................................8\n                  4.1.1.2. Initialization
    .............................8\n                  4.1.1.3. Basic Certificate Processing
    ...............8\n                  4.1.1.4. Preparation for Certificate i+1 ............9\n
    \                 4.1.1.5. Wrap-up Procedure ..........................9\n                           4.1.1.5.1.
    Wrap Up Clearance ...............9\n                  4.1.1.6. Outputs ...................................10\n
    \  5. Clearance and Authority Clearance Constraints\n      Processing in AC ...............................................10\n
    \     5.1. Collecting Constraints ....................................11\n           5.1.1.
    Certification Path Processing ......................11\n                  5.1.1.1.
    Inputs ....................................11\n                  5.1.1.2. Initialization
    ............................11\n                  5.1.1.3. Basic PKC Processing
    ......................12\n                  5.1.1.4. Preparation for Certificate
    i+1 ...........12\n                  5.1.1.5. Wrap-up Procedure .........................12\n
    \                          5.1.1.5.1. Wrap Up Clearance ..............12\n                  5.1.1.6.
    Outputs ...................................12\n   6. Computing the Intersection
    of permitted-clearances and\n      Authority Clearance Constraints Extension ......................12\n
    \  7. Computing the Intersection of securityCategories ...............13\n   8.
    Recommended securityCategories .................................15\n   9. Security
    Considerations ........................................15\n   10. References ....................................................16\n
    \     10.1. Normative References .....................................16\n      10.2.
    Informative References ...................................16\n   Appendix A. ASN.1
    Module ..........................................17\n   Acknowledgments ...................................................19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Organizations that have implemented a security policy can
    issue\n   certificates that include an indication of the clearance values held\n
    \  by the subject.  The Clearance attribute indicates the security\n   policy,
    the clearance levels held by the subject, and additional\n   authorization information
    held by the subject.  This specification\n   makes use of the ASN.1 syntax for
    clearance from [RFC5912].\n   The Clearance attribute may be placed in the subject
    directory\n   attributes extension of a Public Key Certificate (PKC) or may be\n
    \  placed in a separate attribute certificate (AC).\n   The placement of the Clearance
    attribute in PKCs is suitable 1) when\n   the clearance information is relatively
    static and can be verified as\n   part of the PKC issuance process (e.g., using
    local databases) or 2)\n   when the credentials such as PKCs need to be revoked
    when the\n   clearance information changes.  The Clearance attribute may also
    be\n   included to simplify the infrastructure, to reduce the infrastructure\n
    \  design cost, or to reduce the infrastructure operations cost.  An\n   example
    of placement of the Clearance attribute in PKCs in\n   operational Public Key
    Infrastructure (PKI) is the Defense Messaging\n   Service.  An example of placement
    of attributes in PKCs is Qualified\n   Certificates [RFC3739].\n   The placement
    of Clearance attributes in ACs is desirable when the\n   clearance information
    is relatively dynamic and changes in the\n   clearance information do not require
    revocation of credentials such\n   as PKCs, or the clearance information cannot
    be verified as part of\n   the PKC issuance process.\n   Since [RFC5755] does
    not permit a chain of ACs, the Authority\n   Clearance Constraints extension may
    only appear in the PKCs of a\n   Certification Authority (CA) or Attribute Authority
    (AA).  The\n   Authority Clearance Constraints extension may also appear in a
    trust\n   anchor (TA) or may be associated with a TA.\n   Some organizations have
    multiple TAs, CAs, and/or AAs, and these\n   organizations may wish to indicate
    to relying parties which clearance\n   values from a particular TA, CA, or AA
    should be accepted.  For\n   example, consider the security policies described
    in [RFC3114], where\n   a security policy has been defined for Amoco with three
    security\n   classification values (HIGHLY CONFIDENTIAL, CONFIDENTIAL, and\n   GENERAL).
    \ To constrain a CA for just one security classification,\n   the Authority Clearance
    Constraints certificate extension would be\n   included in the CA's PKC.\n   Cross-certified
    domains can also make use of the Authority Clearance\n   Constraints certificate
    extension to indicate which clearance values\n   should be acceptable to relying
    parties.\n   This document augments the certification path validation rules for\n
    \  PKCs (in [RFC5280]) and ACs (in [RFC5755]).\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  ASN.1 Syntax Notation\n   All X.509 PKC [RFC5280] extensions are defined
      using ASN.1 [X.680].\n   All X.509 AC [RFC5755] extensions are defined using
      ASN.1 [X.680].\n   Note that [X.680] is the 2002 version of ASN.1, which is
      the most\n   recent version with freeware compiler support.\n"
    title: 1.2.  ASN.1 Syntax Notation
  title: 1.  Introduction
- contents:
  - "2.  Clearance Attribute\n   The Clearance attribute in a certificate indicates
    the clearances\n   held by the subject.  It uses the clearance attribute syntax,
    whose\n   semantics are defined in [RFC5755], in the Attributes field.  A\n   certificate
    MUST include either zero or one instance of the Clearance\n   attribute.  If the
    Clearance attribute is present, it MUST contain a\n   single value.\n   The following
    object identifier identifies the Clearance attribute\n   (either in the subject
    directory attributes extension of a PKC or in\n   the Attributes field of an AC):\n
    \    id-at-clearance OBJECT IDENTIFIER ::= { joint-iso-ccitt(2)\n       ds(5)
    attributeTypes(4) clearance(55) }\n   The ASN.1 syntax for the Clearance attribute
    is defined in [RFC5912]\n   and that RFC provides the normative definition.  The
    ASN.1 syntax for\n   Clearance attribute is as follows:\n     Clearance  ::=  SEQUENCE
    {\n       policyId            OBJECT IDENTIFIER,\n       classList           ClassList
    DEFAULT {unclassified},\n       securityCategories  SET OF SecurityCategory\n
    \                            {{ SupportedSecurityCategories }} OPTIONAL\n     }\n
    \    ClassList  ::=  BIT STRING {\n       unmarked       (0),\n       unclassified
    \  (1),\n       restricted     (2),\n       confidential   (3),\n       secret
    \        (4),\n       topSecret      (5)\n     }\n     SECURITY-CATEGORY ::= TYPE-IDENTIFIER\n
    \    SecurityCategory { SECURITY-CATEGORY:Supported }::= SEQUENCE {\n       type
    \ [0] IMPLICIT SECURITY-CATEGORY.&id({Supported}),\n       value [1] EXPLICIT
    SECURITY-CATEGORY.&Type\n                                        ({Supported}{@type})\n
    \    }\n   NOTE: SecurityCategory is shown exactly as it is in [RFC5912].  That\n
    \  module is an EXPLICIT tagged module, whereas the module contained in\n   this
    document is an IMPLICIT tagged module.\n   The Clearance attribute takes its meaning
    from Section 4.4.6 of\n   [RFC5755], which is repeated here for convenience:\n
    \    - policyId identifies the security policy to which the clearance\n       relates.
    \ The policyId indicates the semantics of the classList\n       and securityCategories
    fields.\n     - classList identifies the security classifications.  Six basic\n
    \      values are defined in bit positions 0 through 5, and more may be\n       defined
    by an organizational security policy.\n     - securityCategories provides additional
    authorization information.\n   If a trust anchor's public key is used directly,
    then the Clearance\n   associated with the trust anchor, if any, should be used
    as the\n   effective clearance (also defined as effective-clearance for a\n   certification
    path).\n"
  title: 2.  Clearance Attribute
- contents:
  - "3.  Authority Clearance Constraints Certificate Extension\n   The Authority Clearance
    Constraints certificate extension indicates\n   to the relying party what clearances
    should be acceptable for the\n   subject of the AC or the subject of the last
    certificate in a PKC\n   certification path.  It is only meaningful in a trust
    anchor, a CA\n   PKC, or an AA PKC.  A trust anchor, CA PKC, or AA PKC MUST include\n
    \  either zero or one instance of the Authority Clearance Constraints\n   certificate
    extension.  The Authority Clearance Constraints\n   certificate extension MAY
    be critical or non-critical.\n   Absence of this certificate extension in a TA,
    a CA PKC, or an AA PKC\n   indicates that clearance of the subject of the AC or
    the subject of\n   the last certificate in a PKC certification path containing
    the TA,\n   the CA, or the AA is not constrained by the respective TA, CA, or
    AA.\n   The following object identifier identifies the Authority Clearance\n   Constraints
    certificate extension:\n     id-pe-authorityClearanceConstraints OBJECT IDENTIFIER
    ::= {\n       iso(1) identified-organization(3) dod(6) internet(1) security(5)\n
    \      mechanisms(5) pkix(7) pe(1) 21 }\n   The ASN.1 syntax for the Authority
    Clearance Constraints certificate\n   extension is as follows:\n     AuthorityClearanceConstraints
    ::= SEQUENCE SIZE (1..MAX) OF\n                                         Clearance\n
    \  The syntax for the Authority Clearance Constraints certificate\n   extension
    contains Clearances that the CA or the AA asserts.  The\n   sequence MUST NOT
    include more than one entry with the same policyId.\n   This constraint is enforced
    during Clearance and Authority Clearance\n   Constraints Processing as described
    below.  If more than one entry\n   with the same policyId is present in the Authority
    Clearance\n   Constraints certificate extension, the certification path is\n   rejected.\n"
  title: 3.  Authority Clearance Constraints Certificate Extension
- contents:
  - "4.  Processing of Clearance and Authority Clearance Constraints in a PKC\n    This
    section describes the certification path processing when\n    Clearance is asserted
    in the PKC under consideration.\n    User input, the Authority Clearance Constraints
    certificate\n    extension, and Clearance attribute processing determines the\n
    \   effective clearance (henceforth called effective-clearance) for the\n    end
    PKC.  User input and the Authority Clearance Constraints\n    certificate extension
    in the TA and in each PKC (up to but not\n    including the end PKC) in a PKC
    certification path impact the\n    effective-clearance.  If there is more than
    one path to the end PKC,\n    each path is processed independently.  The process
    involves two\n    steps:\n      1) collecting the Authority Clearance Constraints;
    and\n      2) using the Authority Clearance Constraints in the certification\n
    \        path and the Clearance in the end PKC to determine the\n         effective-clearance
    for the subject of the end PKC.\n   Assuming a certification path consisting of
    n PKCs, the effective-\n   clearance for the subject of the end PKC is the intersection
    of 1)\n   the Clearance attribute in the subject PKC, 2) the Authority\n   Clearance
    Constraints, if present, in the trust anchor, 3) user\n   input, and 4) all Authority
    Clearance Constraints present in n-1\n   intermediate PKCs.  Any effective-clearance
    calculation algorithm\n   that performs this calculation and provides the same
    outcome as the\n   one from the algorithm described herein is considered compliant
    with\n   the requirements of this RFC.\n   When processing a certification path,
    Authority Clearance Constraints\n   are maintained in one state variable: permitted-clearances.
    \ When\n   processing begins, permitted-clearances is initialized to the user\n
    \  input value or the special value all-clearances if Authority\n   Clearance
    Constraints user input is not provided.  The permitted-\n   clearances state variable
    is updated by first processing Authority\n   Clearance Constraints associated
    with the trust anchor, and then each\n   time an intermediate PKC that contains
    an Authority Clearance\n   Constraints certificate extension in the path is processed.\n
    \  When processing the end PKC, the value in the Clearance attribute in\n   the
    end PKC is intersected with the permitted-clearances state\n   variable.\n   The
    output of Clearance attribute and Authority Clearance Constraint\n   certificate
    extension processing is the effective-clearance (which\n   could also be an empty
    list), and a status indicator of either\n   success or failure.  If the status
    indicator is failure, then the\n   process also returns a reason code.\n"
  - contents:
    - "4.1.  Collecting Constraints\n   Authority Clearance Constraints are collected
      from the user input,\n   the trust anchor, and the intermediate PKCs in a certification
      path.\n"
    - contents:
      - "4.1.1.  Certification Path Processing\n   When processing Authority Clearance
        Constraints certificate\n   extensions for the purposes of validating a Clearance
        attribute in\n   the end PKC, the processing described in this section or
        an\n   equivalent algorithm MUST be performed in addition to the\n   certification
        path validation.\n   The processing is presented as an addition to the certification
        path\n   validation algorithm described in Section 6 of [RFC5280].  Note that\n
        \  this RFC is fully consistent with [RFC5280]; however, it augments\n   [RFC5280]
        with the following steps:\n      o  Ability to provide and process Authority
        Clearance Constraints\n         as an additional input to the certification
        path processing\n         engine with Trust anchor information.\n      o  Requirement
        to process Authority Clearance Constraints present\n         with trust anchor
        information.\n"
      - contents:
        - "4.1.1.1.  Inputs\n   User input may include an Authority Clearance Constraints
          structure\n   or omit it.\n   Trust anchor information may include the Authority
          Clearance\n   Constraints structure to specify Authority Clearance Constraints
          for\n   the trust anchor.  In other words, the trust anchor may be\n   constrained
          or unconstrained.\n"
        title: 4.1.1.1.  Inputs
      - contents:
        - "4.1.1.2.  Initialization\n   If the user input includes Authority Clearance
          Constraints, set\n   permitted-clearances to the input value; otherwise,
          set permitted-\n   clearances to the special value all-clearances.\n   Examine
          the permitted-clearances for the same Policy ID appearing\n   more then
          once.  If a policyId appears more than once in the\n   permitted-clearances
          state variable, set effective-clearance to an\n   empty list, set error
          code to \"multiple instances of same clearance\",\n   and exit with failure.\n
          \  If the trust anchor does not contain an Authority Clearance\n   Constraints
          extension, continue at Section 4.1.1.3.  Otherwise,\n   execute the procedure
          described in Section 6 as an in-line macro by\n   treating the trust anchor
          as a PKC.\n"
        title: 4.1.1.2.  Initialization
      - contents:
        - "4.1.1.3.  Basic Certificate Processing\n   If the PKC is the last PKC (i.e.,
          certificate n), skip the steps\n   listed in this section.  Otherwise, execute
          the procedure described\n   in Section 6 as an in-line macro.\n"
        title: 4.1.1.3.  Basic Certificate Processing
      - contents:
        - "4.1.1.4.  Preparation for Certificate i+1\n   No additional action associated
          with the Clearance attribute or the\n   Authority Clearance Constraints
          certificate extensions is taken\n   during this phase of certification path
          validation as described in\n   Section 6 of [RFC5280].\n"
        title: 4.1.1.4.  Preparation for Certificate i+1
      - contents:
        - "4.1.1.5.  Wrap-up Procedure\n   To complete the processing, perform the
          following steps for the last\n   PKC (i.e., certificate n).\n   Examine
          the PKC and verify that it does not contain more than one\n   instance of
          the Clearance attribute.  If the PKC contains more than\n   one instance
          of the Clearance attribute, set effective-clearance to\n   an empty list,
          set the error code to \"multiple instances of an\n   attribute\", and exit
          with failure.\n   If the Clearance attribute is not present in the end PKC,
          set\n   effective-clearance to an empty list and exit with success.\n   Set
          effective-clearance to the Clearance attribute in the end PKC.\n"
        - contents:
          - "4.1.1.5.1.  Wrap Up Clearance\n   Examine effective-clearance and verify
            that it does not contain more\n   than one value.  If effective-clearance
            contains more than one value,\n   set effective-clearance to an empty
            list, set error code to \"multiple\n   values\", and exit with failure.\n
            \  If permitted-clearances is an empty list, set effective-clearance to\n
            \  an empty list and exit with success.\n   If permitted-clearances has
            the special value all-clearances, exit\n   with success.\n   Let us say
            policyId in effective-clearance is X.\n   If the policyId X in effective-clearance
            is absent from the\n   permitted-clearances, set effective-clearance to
            an empty list and\n   exit with success.\n   Assign those classList bits
            in effective-clearance a value of one (1)\n   that have a value of one
            (1) both in effective-clearance and in the\n   clearance structure in
            permitted-clearances associated with policyId\n   X.  Assign all other
            classList bits in effective-clearance a value of\n   zero (0).\n   If
            none of the classList bits have a value of one (1) in effective-\n   clearance,
            set effective-clearance to an empty list and exit with\n   success.\n
            \  Set the securityCategories in effective-clearance to the intersection\n
            \  of securityCategories in effective-clearance and securityCategories\n
            \  for policyId X in permitted-clearances using the algorithm described\n
            \  in Section 7.  Note that an empty SET is represented by simply\n   omitting
            the SET.\n   Exit with success.\n"
          title: 4.1.1.5.1.  Wrap Up Clearance
        title: 4.1.1.5.  Wrap-up Procedure
      - contents:
        - "4.1.1.6.  Outputs\n   If certification path validation processing succeeds,
          effective-\n   clearance contains the subject's effective clearance for
          this\n   certification path.  Processing also returns success or failure\n
          \  indication and reason for failure, if applicable.\n"
        title: 4.1.1.6.  Outputs
      title: 4.1.1.  Certification Path Processing
    title: 4.1.  Collecting Constraints
  title: 4.  Processing of Clearance and Authority Clearance Constraints in a PKC
- contents:
  - "5.  Clearance and Authority Clearance Constraints Processing in AC\n   This section
    describes the certification path processing when\n   Clearance is asserted in
    an AC.  Relevant to processing are: one TA;\n   0 or more CA PKCs; 0 or 1 AA PKC;
    and 1 AC.\n   User input, Authority Clearance Constraints certificate extension,\n
    \  and Clearance attribute processing determine the effective clearance\n   (henceforth
    called effective-clearance) for the subject of the AC.\n   User input and the
    Authority Clearance Constraints certificate\n   extensions in the TA and in each
    PKC (up to and including the AA PKC)\n   in a certification path impact the effective-clearance.
    \ If there is\n   more than one path to the AA PKC, each path is processed\n   independently.
    \ The process involves two steps:\n     1) collecting the Authority Clearance
    Constraints; and\n     2) using the Authority Clearance Constraints in the PKC\n
    \      certification path and the Clearance in the AC to determine the\n       effective-clearance
    for the subject of the AC.\n   The effective-clearance for the subject of the
    AC is the intersection\n   of 1) the Clearance attribute in the subject AC, 2)
    the Authority\n   Clearance Constraints, if present, in trust anchor, 3) user
    input,\n   and 4) all Authority Clearance Constraints present in the PKC\n   certification
    path from the TA to the AA.  Any effective-clearance\n   calculation algorithm
    that performs this calculation and provides the\n   same outcome as the one from
    the algorithm described herein is\n   considered compliant with the requirements
    of this RFC.\n   The Authority Clearance Constraints are maintained in one state\n
    \  variable: permitted-clearances.  When processing begins, permitted-\n   clearances
    is initialized to user input or the special value all-\n   clearances if Authority
    Clearance Constraints user input is not\n   provided.  The permitted-clearances
    state variable is updated by\n   first processing the Authority Clearance Constraints
    associated with\n   the trust anchor, and then each time a PKC (other than AC
    holder PKC)\n   that contains an Authority Clearance Constraints certificate\n
    \  extension in the path is processed.\n   When processing the AC, the value in
    the Clearance attribute in the\n   AC is intersected with the permitted-clearances
    state variable.\n   The output of Clearance attribute and Authority Clearance
    Constraint\n   certificate extension processing is the effective-clearance, which\n
    \  could also be an empty list; and success or failure with a reason\n   code
    for failure.\n"
  - contents:
    - "5.1.  Collecting Constraints\n   Authority Clearance Constraints are collected
      from the user input,\n   the trust anchor, and all the PKCs in the AA PKC certification
      path.\n"
    - contents:
      - "5.1.1.  Certification Path Processing\n   When processing Authority Clearance
        Constraints certificate\n   extensions for the purpose of validating a Clearance
        attribute in the\n   AC, the processing described in this section or an equivalent\n
        \  algorithm MUST be performed in addition to the certification path\n   validation.
        \ The processing is presented as an addition to the PKC\n   certification
        path validation algorithm described in Section 6 of\n   [RFC5280] for the
        AA PKC certification path and the algorithm\n   described in Section 5 of
        [RFC5755] for the AC validation.  Also see\n   the note related to [RFC5280]
        augmentation in Section 4.1.1.\n"
      - contents:
        - "5.1.1.1.  Inputs\n   Same as Section 4.1.1.1.\n   In addition, let us assume
          that the PKC certification path for the AA\n   consists of n certificates.\n"
        title: 5.1.1.1.  Inputs
      - contents:
        - "5.1.1.2. Initialization\n   Same as Section 4.1.1.2.\n"
        title: 5.1.1.2. Initialization
      - contents:
        - "5.1.1.3.  Basic PKC Processing\n   Same as Section 4.1.1.3 except that
          the logic is applied to all n\n   PKCs.\n"
        title: 5.1.1.3.  Basic PKC Processing
      - contents:
        - "5.1.1.4.  Preparation for Certificate i+1\n   Same as Section 4.1.1.4.\n"
        title: 5.1.1.4.  Preparation for Certificate i+1
      - contents:
        - "5.1.1.5.  Wrap-up Procedure\n   To complete the processing, perform the
          following steps for the AC.\n   Examine the AC and verify that it does not
          contain more than one\n   instance of the Clearance attribute.  If the AC
          contains more than\n   one instance of the Clearance attribute, set effective-clearance
          to\n   an empty list, set the error code to \"multiple instances of an\n
          \  attribute\", and exit with failure.\n   If the Clearance attribute is
          not present in the AC, set effective-\n   clearance to an empty list and
          exit with success.\n   Set effective-clearance to the Clearance attribute
          in the AC.\n"
        - contents:
          - "5.1.1.5.1.  Wrap Up Clearance\n   Same as Section 4.1.1.5.1.\n"
          title: 5.1.1.5.1.  Wrap Up Clearance
        title: 5.1.1.5.  Wrap-up Procedure
      - contents:
        - "5.1.1.6.  Outputs\n   Same as Section 4.1.1.6.\n   In addition, apply AC
          processing rules described in Section 5 of\n   [RFC5755].\n"
        title: 5.1.1.6.  Outputs
      title: 5.1.1.  Certification Path Processing
    title: 5.1.  Collecting Constraints
  title: 5.  Clearance and Authority Clearance Constraints Processing in AC
- contents:
  - "6.  Computing the Intersection of permitted-clearances and Authority\n    Clearance
    Constraints Extension\n   Examine the PKC and verify that it does not contain
    more than one\n   instance of the Authority Clearance Constraints extension.  If
    the\n   PKC contains more than one instance of Authority Clearance\n   Constraints
    extension, set effective-clearance to an empty list, set\n   error code to \"multiple
    extension instances\", and exit with failure.\n   If the Authority Clearance Constraints
    certificate extension is not\n   present in the PKC, no action is taken, and the
    permitted-clearances\n   value is unchanged.\n   If the Authority Clearance Constraints
    certificate extension is\n   present in the PKC, set the variable temp-clearances
    to the value of\n   the Authority Clearance Constraints certificate extension.
    \ Examine\n   the temp-clearances for the same Policy ID appearing more then once.\n
    \  If a policyId appears more than once in the temp-clearances state\n   variable,
    set effective-clearance to an empty list, set error code to\n   \"multiple instances
    of same clearance\", and exit with failure.\n   If the Authority Clearance Constraints
    certificate extension is\n   present in the PKC and permitted-clearances contains
    the all-\n   clearances special value, then assign permitted-clearances the value\n
    \  of temp-clearances.\n   If the Authority Clearance Constraints certificate
    extension is\n   present in the PKC and permitted-clearances does not contain
    the all-\n   clearances special value, take the intersection of temp-clearances\n
    \  and permitted-clearances by repeating the following steps for each\n   clearance
    in the permitted-clearances state variable:\n     - If the policyId associated
    with the clearance is absent in the\n       temp-clearances, delete the clearance
    structure associated with\n       the policyID from the permitted-clearances state
    variable.\n     - If the policyId is present in temp-clearances:\n       -- For
    every classList bit, assign the classList bit a value of\n          one (1) for
    the policyId in the permitted-clearances state\n          variable if the bit
    is one (1) in both the permitted-\n          clearances state variable and the
    temp-clearances for that\n          policyId; otherwise, assign the bit a value
    of zero (0).\n       -- If no bits are one (1) for the classList, delete the clearance\n
    \         structure associated with the policyId from the permitted-\n          clearances
    state variable and skip the next step of processing\n          securityCategories.\n
    \      -- For the policyId in permitted-clearances, set the\n          securityCategories
    to the intersection of securityCategories\n          for the policyId in permitted-clearances
    and in temp-\n          clearances using the algorithm described in Section 7.
    \ Note\n          that an empty SET is represented by simply omitting the SET.\n"
  title: 6.  Computing the Intersection of permitted-clearances and Authority
- contents:
  - "7.  Computing the Intersection of securityCategories\n   The algorithm described
    here has the idempotent, associative, and\n   commutative properties.\n   This
    section describes how to compute the intersection of\n   securityCategories A
    and B.  It uses the state variable temp-set.  It\n   also uses temporary variables
    X and Y.\n   Set the SET temp-set to empty.\n   Set X = A and Y = B.\n   If SET
    X is empty (i.e., securityCategories is absent), return temp-\n   set.\n   If
    SET Y is empty (i.e., securityCategories is absent), return temp-\n   set.\n   For
    each type OID in X, if all the elements for the type OID in X and\n   if and only
    if all the elements for that type OID in Y are identical,\n   add those elements
    to temp-set and delete those elements from X and\n   Y.  Note: identical means
    that if the element with the type OID and\n   given value is present in X, it
    is also present in Y with the same\n   type OID and given value and vice versa.
    \ Delete the elements from X\n   and from Y.\n   If SET X is empty (i.e., securityCategories
    is absent), return temp-\n   set.\n   If SET Y is empty (i.e., securityCategories
    is absent), return temp-\n   set.\n   For every element (i.e., SecurityCategory)
    in the SET X, carry out\n   the following steps:\n     1. If there is no element
    in SET Y with the same type OID as the\n        type OID in the element from SET
    X, go to step 5.\n     2. If there is an element in SET Y with the same type OID
    and value\n        as in the element in SET X, carry out the following steps:\n
    \       a) If the element is not present in the SET temp-set, add an\n           element
    containing the type OID and the value to the SET\n           temp-set.\n     3.
    If the processing semantics of type OID in the element in SET X\n        is not
    known, go to step 5.\n     4. For each element in SET Y, do the following:\n        a)
    If the type OID of the element in SET Y is not the same as\n           the element
    in SET X being processed, go to step 4.d.\n        b) Perform type-OID-specific
    intersection of the value in the\n           element in SET X with the value in
    the element in SET Y.\n        c) If the intersection is not empty, and the element\n
    \          representing the type OID and intersection value is not\n           already
    present in temp-set, add the element containing the\n           type OID and intersection
    value as an element to temp-set.\n        d) Continue to the next element in SET
    Y.\n     5. If more elements remain in SET X, process the next element\n        starting
    with step 1.\n   Return temp-set.\n"
  title: 7.  Computing the Intersection of securityCategories
- contents:
  - "8.  Recommended securityCategories\n   This RFC also includes a recommended securityCategories
    object as\n   follows:\n   recommended-category SECURITY-CATEGORY ::=\n     {
    BIT STRING IDENTIFIED BY OID }\n   The above structure is provided as an example.
    \ To use this\n   structure, the object identifier (OID) needs to be registered
    and the\n   semantics of the bits in the bit string need to be enumerated.\n   Note
    that type-specific intersection of two values for this type will\n   be simply
    setting the bits that are set in both values.  If the\n   resulting intersection
    has none of the bits set, the intersection is\n   considered empty.\n"
  title: 8.  Recommended securityCategories
- contents:
  - "9.  Security Considerations\n   Certificate issuers must recognize that absence
    of the Authority\n   Clearance Constraints in a TA, in a CA certificate, or in
    an AA\n   certificate means that in terms of the clearance, the subject\n   Authority
    is not constrained.\n   Absence of the Clearance attribute in a certificate means
    that the\n   subject has not been assigned any clearance.\n   If there is no Clearance
    associated with a TA, it means that the TA\n   has not been assigned any clearance.\n
    \  If the local security policy considers the clearance held by a\n   subject
    or those supported by a CA or AA to be sensitive, then the\n   Clearance attribute
    or Authority Clearance Constraints should only be\n   included if the subject's
    and Authority's certificates can be privacy\n   protected.  Also in this case,
    distribution of trust anchors and\n   associated Authority Clearance Constraints
    extension or Clearance\n   must also be privacy protected.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5280]  Cooper, D. et. al., \"Internet X.509 Public Key\n              Infrastructure
      Certificate and Certification Revocation\n              List (CRL) Profile\",
      RFC 5280, May 2008.\n   [RFC5755]  Farrell, S., Housley, R., and S. Turner,
      \"An Internet\n              Attribute Certificate Profile for Authorization\",
      RFC\n              5755, January 2010.\n   [RFC5912]  Hoffman, P. and J. Schaad,
      \"New ASN.1 Modules for the\n              Public Key Infrastructure Using X.509
      (PKIX) RFC 5912,\n              June 2010.\n   [X.680]    ITU-T Recommendation
      X.680 (2002) | ISO/IEC 8824-1:2002.\n              Information Technology -
      Abstract Syntax Notation One.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC3114]  Nicolls, W., \"Implementing Company
      Classification Policy\n              with the S/MIME Security Label\", RFC 3114,
      May 2002.\n   [RFC3739]  Santesson, S., Nystrom, M., and T. Polk, \"Internet
      X.509\n              Public Key Infrastructure: Qualified Certificates\n              Profile\",
      RFC 3739, March 2004.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  ASN.1 Module\n   This appendix provides the normative ASN.1 definitions
    for the\n   structures described in this specification using ASN.1 as defined
    in\n   X.680.\n   ClearanceConstraints { iso(1) identified-organization(3) dod(6)\n
    \  internet(1) security(5) mechanisms(5) pkix(7) mod(0) 46 }\n   DEFINITIONS IMPLICIT
    TAGS ::=\n   BEGIN\n   -- EXPORTS ALL --\n   IMPORTS\n   -- IMPORTS from [RFC5912]\n
    \  id-at-clearance, Clearance\n      FROM PKIXAttributeCertificate-2009\n      {
    iso(1) identified-organization(3) dod(6) internet(1)\n        security(5) mechanisms(5)
    pkix(7) id-mod(0)\n        id-mod-attribute-cert-02(47)\n      }\n   -- IMPORTS
    from [RFC5912]\n   EXTENSION, SECURITY-CATEGORY\n     FROM PKIX-CommonTypes-2009\n
    \     { iso(1) identified-organization(3) dod(6) internet(1)\n        security(5)
    mechanisms(5) pkix(7) id-mod(0)\n        id-mod-pkixCommon-02(57)\n      }\n   ;\n
    \  -- Clearance attribute OID and syntax\n   -- The following is a 2002 ASN.1
    version for clearance.\n   -- It is included for convenience.\n   -- id-at-clearance
    OBJECT IDENTIFIER ::=\n   --  { joint-iso-ccitt(2) ds(5) attributeTypes(4) clearance
    (55) }\n   -- Clearance  ::=  SEQUENCE {\n   --   policyId            OBJECT IDENTIFIER,\n
    \  --   classList           ClassList DEFAULT {unclassified},\n   --   securityCategories
    \ SET OF SecurityCategory\n   --                         {{SupportSecurityCategories
    }} OPTIONAL\n   -- }\n   -- ClassList  ::=  BIT STRING {\n   --   unmarked      (0),\n
    \  --   unclassified  (1),\n   --   restricted    (2),\n   --   confidential  (3),\n
    \  --   secret        (4),\n   --   topSecret     (5)\n   -- }\n   -- SECURITY-CATEGORY
    ::= TYPE-IDENTIFIER\n   -- NOTE that the module SecurityCategory is taken from
    a module\n   -- that uses EXPLICIT tags [RFC5912].  If Clearance was not imported\n
    \  -- from [RFC5912] and the comments were removed from the ASN.1\n   -- contained
    herein, then the IMPLICIT in type could also be removed\n   -- with no impact
    on the encoding.\n   -- SecurityCategory { SECURITY-CATEGORY:Supported } ::= SEQUENCE
    {\n   --   type  [0] IMPLICIT SECURITY-CATEGORY.&id({Supported}),\n   --   value
    [1] EXPLICIT SECURITY-CATEGORY.&Type\n   --                                    ({Supported}{@type})\n
    \  -- }\n   -- Authority Clearance Constraints certificate extension OID\n   --
    and syntax\n   id-pe-clearanceConstraints OBJECT IDENTIFIER ::=\n     { iso(1)
    identified-organization(3) dod(6) internet(1) security(5)\n       mechanisms(5)
    pkix(7) pe(1) 21 }\n   authorityClearanceConstraints EXTENSION ::= {\n     SYNTAX
    \        AuthorityClearanceConstraints\n     IDENTIFIED BY  id-pe-clearanceConstraints\n
    \  }\n   AuthorityClearanceConstraints ::= SEQUENCE SIZE (1..MAX) OF Clearance\n
    \  END\n"
  title: Appendix A.  ASN.1 Module
- contents:
  - "Acknowledgments\n   Many thanks go out to Mark Saaltink for his valuable contributions
    to\n   this document.\n   We would also like to thank Francis Dupont, Pasi Eronen,
    Adrian\n   Farrel, Dan Romascanu, and Stefan Santesson for their reviews and\n
    \  comments.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite
    106\n   Fairfax, VA 22031\n   USA\n   EMail: turners@ieca.com\n   Santosh Chokhani\n
    \  CygnaCom Solutions, Inc.\n   EMail: SChokhani@cygnacom.com\n"
  title: Authors' Addresses
