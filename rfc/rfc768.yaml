- title: __initial_text__
  contents:
  - "                         User Datagram Protocol\nIntroduction\n------------\n\
    This User Datagram  Protocol  (UDP)  is  defined  to  make  available  a\ndatagram\
    \   mode  of  packet-switched   computer   communication  in  the\nenvironment\
    \  of  an  interconnected  set  of  computer  networks.   This\nprotocol  assumes\
    \  that the Internet  Protocol  (IP)  [1] is used as the\nunderlying protocol.\n\
    This protocol  provides  a procedure  for application  programs  to send\nmessages\
    \  to other programs  with a minimum  of protocol mechanism.  The\nprotocol  is\
    \ transaction oriented, and delivery and duplicate protection\nare not guaranteed.\
    \  Applications requiring ordered reliable delivery of\nstreams of data should\
    \ use the Transmission Control Protocol (TCP) [2].\nFormat\n------\n         \
    \         0      7 8     15 16    23 24    31  \n                 |     Source\
    \      |   Destination   | \n                 |      Port       |      Port  \
    \     | \n                 |     Length      |    Checksum     | \n          \
    \       |          data octets ...            \n                      User Datagram\
    \ Header Format\nFields\n------\nSource Port is an optional field, when meaningful,\
    \ it indicates the port\nof the sending  process,  and may be assumed  to be the\
    \ port  to which a\nreply should  be addressed  in the absence of any other information.\
    \  If\nnot used, a value of zero is inserted.\nUser Datagram Protocol        \
    \                                   RFC 768\nFields\nDestination  Port has a meaning\
    \  within  the  context  of  a  particular\ninternet destination address.\nLength\
    \  is the length  in octets  of this user datagram  including  this\nheader  and\
    \ the data.   (This  means  the minimum value of the length is\neight.)\nChecksum\
    \ is the 16-bit one's complement of the one's complement sum of a\npseudo header\
    \ of information from the IP header, the UDP header, and the\ndata,  padded  with\
    \ zero octets  at the end (if  necessary)  to  make  a\nmultiple of two octets.\n\
    The pseudo  header  conceptually prefixed to the UDP header contains the\nsource\
    \  address,  the destination  address,  the protocol,  and the  UDP\nlength. \
    \  This information gives protection against misrouted datagrams.\nThis checksum\
    \ procedure is the same as is used in TCP.\n                  0      7 8     15\
    \ 16    23 24    31 \n                 +--------+--------+--------+--------+\n\
    \                 |          source address           |\n                 +--------+--------+--------+--------+\n\
    \                 |        destination address        |\n                 +--------+--------+--------+--------+\n\
    \                 |  zero  |protocol|   UDP length    |\n                 +--------+--------+--------+--------+\n\
    If the computed  checksum  is zero,  it is transmitted  as all ones (the\nequivalent\
    \  in one's complement  arithmetic).   An all zero  transmitted\nchecksum  value\
    \ means that the transmitter  generated  no checksum  (for\ndebugging or for higher\
    \ level protocols that don't care).\nUser Interface\n--------------\nA user interface\
    \ should allow\n  the creation of new receive ports,\n  receive  operations  on\
    \ the receive  ports that return the data octets\n  and an indication of source\
    \ port and source address,\n  and an operation  that allows  a datagram  to be\
    \ sent,  specifying the\n  data, source and destination ports and addresses to\
    \ be sent.\nRFC 768                                           User Datagram Protocol\n\
    \                                                            IP Interface\nIP\
    \ Interface\n-------------\nThe UDP module  must be able to determine  the  source\
    \  and  destination\ninternet addresses and the protocol field from the internet\
    \ header.  One\npossible  UDP/IP  interface  would return  the whole  internet\
    \  datagram\nincluding all of the internet header in response to a receive operation.\n\
    Such an interface  would  also allow  the UDP to pass  a  full  internet\ndatagram\
    \  complete  with header  to the IP to send.  The IP would verify\ncertain fields\
    \ for consistency and compute the internet header checksum.\nProtocol Application\n\
    --------------------\nThe major uses of this protocol is the Internet Name Server\
    \ [3], and the\nTrivial File Transfer [4].\nProtocol Number\n---------------\n\
    This is protocol  17 (21 octal)  when used  in  the  Internet  Protocol.\nOther\
    \ protocol numbers are listed in [5].\nReferences\n----------\n[1]     Postel,\
    \   J.,   \"Internet  Protocol,\"  RFC 760,  USC/Information\n        Sciences\
    \ Institute, January 1980.\n[2]     Postel,    J.,   \"Transmission   Control\
    \   Protocol,\"   RFC 761,\n        USC/Information Sciences Institute, January\
    \ 1980.\n[3]     Postel,  J.,  \"Internet  Name Server,\"  USC/Information Sciences\n\
    \        Institute, IEN 116, August 1979.\n[4]     Sollins,  K.,  \"The TFTP Protocol,\"\
    \  Massachusetts  Institute of\n        Technology, IEN 133, January 1980.\n[5]\
    \     Postel,   J.,   \"Assigned   Numbers,\"  USC/Information  Sciences\n   \
    \     Institute, RFC 762, January 1980.\n"
