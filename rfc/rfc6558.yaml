- title: __initial_text__
  contents:
  - '        Sieve Extension for Converting Messages before Delivery

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes how the \"CONVERT\" IMAP extension can be\
    \ used\n   within the Sieve mail filtering language to transform messages before\n\
    \   final delivery.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6558.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................2\n  \
    \ 2. \"convert\" Action ................................................2\n  \
    \    2.1. Interaction with Other Tests and Actions ...................3\n    \
    \  2.2. \"convert\" as a Test ........................................4\n   3.\
    \ Examples ........................................................5\n      3.1.\
    \ Example 1 ..................................................5\n      3.2. Example\
    \ 2 ..................................................5\n      3.3. Example 3\
    \ ..................................................5\n      3.4. Example 4 ..................................................6\n\
    \   4. Security Considerations .........................................7\n  \
    \ 5. IANA Considerations .............................................7\n   6.\
    \ Acknowledgements ................................................7\n   7. Normative\
    \ References ............................................7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IMAP \"CONVERT\" extension [RFC5259] adds an IMAP command\
    \ for\n   performing client-controlled conversions on whole messages or their\n\
    \   body parts.  This document defines a similar extension to the Sieve\n   mail\
    \ filtering language [RFC5228], which reuses the conversion\n   parameters and\
    \ framework established by IMAP CONVERT.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   Conventions for notations are as in Sieve [RFC5228],\
    \ Section 1.1.\n"
- title: 2.  "convert" Action
  contents:
  - "2.  \"convert\" Action\n   Usage: convert  <quoted-from-media-type: string>\n\
    \                   <quoted-to-media-type: string>\n                   <transcoding-params:\
    \ string-list>\n   The \"convert\" action specifies that all body parts with a\
    \ media type\n   [RFC2046] (sometimes called \"MIME type\") equal to <quoted-from-media-\n\
    \   type> be converted to the media type in <quoted-to-media-type> using\n   conversion\
    \ parameters specified in <transcoding-params>.  Each\n   conversion parameter\
    \ value has the following syntax: \"<transcoding-\n   param-name>=<transcoding-param-value>\"\
    , where <transcoding-param-\n   name> and <transcoding-param-value> are defined\
    \ in CONVERT [RFC5259].\n   Messages that don't have any body parts with the <quoted-from-media-\n\
    \   type> media type are not affected by the conversion.\n   The \"convert\" action\
    \ can be used with Sieve MIME Part Tests\n   [RFC5703], in the case that some,\
    \ but not all of the body parts need\n   to be converted, or where different body\
    \ parts might require\n   different conversions.  When the \"convert\" action\
    \ appears in a\n   \"foreverypart\" loop, it applies only to the body part being\n\
    \   processed, and not to any other body parts (see Section 3.2 for an\n   example).\n\
    \   When the \"convert\" action appears outside a \"foreverypart\" loop, the\n\
    \   conversion applies equally to all body parts -- that is, all body\n   parts\
    \ that have the \"quoted-from-media-type\" are converted, using the\n   same transcoding\
    \ parameters.\n   A single \"convert\" action will only apply once to any body\
    \ part.  If,\n   for example, << convert \"image/jpeg\" \"image/jpeg\" [\"pix-x=100\"\
    ,\"pix-\n   y=120\"] >> converts a larger JPEG image to the smaller 100 x 120\n\
    \   size, that will be the end of that \"convert\" action on that body\n   part.\
    \  The action will not see a \"new\" JPEG body part to process,\n   resulting\
    \ from the conversion.\n   If a \"convert\" action cannot be completed -- perhaps\
    \ because the\n   conversion failed, or because the requested conversion is not\n\
    \   available -- that \"convert\" action MUST terminate and leave the\n   message\
    \ unchanged, rolling back any other conversions done by that\n   action.  The\
    \ script processing continues, and prior or subsequent\n   \"convert\" actions\
    \ are not affected.  No error condition is raised,\n   and no partial conversions\
    \ from a single \"convert\" action are\n   allowed.\n   Implementations might\
    \ defer any actual conversion until the results\n   of the conversion are needed\
    \ for script processing, to avoid doing\n   conversions unnecessarily.  Consider\
    \ the case wherein a \"convert\"\n   action is processed but a \"discard\" action\
    \ results without the need\n   to actually perform the conversion.\n   When conversions\
    \ actually need to be done, they can put a significant\n   load on the server.\
    \  Computationally expensive conversions of a lot\n   of body parts can constitute\
    \ an attack vector; even if done\n   legitimately, they can create an unacceptable\
    \ load.  Servers MAY\n   refuse conversions, or do them at lower priority, effectively\
    \ slowing\n   the requesting process in order to avoid negative effects on service\n\
    \   to other processes.\n"
- title: 2.1.  Interaction with Other Tests and Actions
  contents:
  - "2.1.  Interaction with Other Tests and Actions\n   Whether or not the actual\
    \ conversion has been done yet, a successful\n   \"convert\" action effectively\
    \ changes the message, and all subsequent\n   actions, including any other \"\
    convert\" actions, apply to the changed\n   message.  The \"convert\" action does\
    \ not affect the applicability of\n   other actions; any action that was applicable\
    \ before the \"convert\" is\n   equally applicable to the changed message afterward.\n\
    \   When a disposition-type action, such as \"fileinto\" or \"redirect\", is\n\
    \   encountered, the state of the message with respect to conversions is\n   \"\
    locked in\" for that disposition-type action.  Whether the\n   implementation\
    \ performs the action at that point or batches it for\n   later, it MUST perform\
    \ the action on the message as it stood at the\n   time, and MUST NOT include\
    \ subsequent conversions encountered later\n   in the script processing.  Therefore,\
    \ the sequence \"convert,\n   fileinto, convert, fileinto\" will store two different\
    \ versions of the\n   message: the first \"fileinto\" uses only the first conversion,\
    \ while\n   the second uses both.  See Section 3.4 for an example of how this\
    \ can\n   be used.\n   In addition, any tests done on the message and its parts\
    \ will test\n   the message after prior conversions have been done.  The fourth\
    \ block\n   of Section 3.4 shows an example of this situation.\n   Convert actions\
    \ are cumulative, and each conversion operates on the\n   message as it stands\
    \ after all prior conversions.  See the fourth\n   block of Section 3.4 for an\
    \ example of how this might be tricky.\n   Because the implicit keep (see Section\
    \ 2.10.2 of [RFC5228]), if it is\n   in effect, acts on the final state of the\
    \ message, all conversions\n   are performed before any implicit keep.\n"
- title: 2.2.  "convert" as a Test
  contents:
  - "2.2.  \"convert\" as a Test\n   To simplify testing for supported and successful\
    \ conversions, the\n   \"convert\" action can also be used as a test.  As such,\
    \ it will\n   attempt to perform the requested conversion(s) and will evaluate\
    \ to\n   \"false\" if and only if at least one conversion failed.  The failure\n\
    \   can be because a conversion was unsupported or because the data could\n  \
    \ not be converted (perhaps it had been corrupted in transit or\n   mislabeled\
    \ at its origin).\n   This creates a new type of Sieve action, a \"testable action\"\
    .  The\n   usage as a test is exactly the same as for an action, and it doubles\n\
    \   as an action and a test of the action's result at the same time.  See\n  \
    \ Section 3.2 for an example of how this test can be used.\n   Note that defining\
    \ this new testable action does not change the\n   definitions of any other actions\
    \ -- it does not imply that other\n   actions can be used as tests.  Future extensions\
    \ might define other\n   testable actions, but those specifications would be responsible\
    \ for\n   clearly specifying that.\n"
- title: 3.  Examples
  contents:
  - '3.  Examples

    '
- title: 3.1.  Example 1
  contents:
  - "3.1.  Example 1\n   In the following example, all \"image/tiff\" body parts of\
    \ the message\n   are converted to \"image/jpeg\" with image resolution of 320x240\n\
    \   pixels.  The converted message is then subject to the implicit keep.\n   \
    \    require [\"convert\"];\n       convert \"image/tiff\" \"image/jpeg\" [\"\
    pix-x=320\",\"pix-y=240\"];\n"
- title: 3.2.  Example 2
  contents:
  - "3.2.  Example 2\n   In the following example, all \"image/tiff\" body parts of\
    \ the message\n   are converted to \"image/jpeg\", as in Example 1.  If the conversions\n\
    \   were successful, those messages are then filed into a mailbox called\n   \"\
    INBOX.pics\".  Other messages (those with no image/tiff body parts)\n   are subject\
    \ to the implicit keep, and have not been converted.\n       require [\"mime\"\
    , \"fileinto\", \"convert\"];\n       if header :mime :anychild :contenttype\n\
    \                 \"Content-Type\" \"image/tiff\"\n       {\n        if (convert\
    \ \"image/tiff\" \"image/jpeg\" [\"pix-x=320\",\"pix-y=240\"])\n        {\n  \
    \       fileinto \"INBOX.pics\";\n        }\n       }\n"
- title: 3.3.  Example 3
  contents:
  - "3.3.  Example 3\n   In the following example, only \"image/tiff\" body parts\
    \ with a\n   Content-Disposition of \"inline\" are converted.  Matching parts\
    \ that\n   are larger than 500 kilobytes are converted using an image resolution\n\
    \   of 640x480 pixels, and those smaller are converted to 320x240 pixels.\n  \
    \ The message disposition is not changed, so the implicit keep will be\n   in\
    \ effect unless something else in the script changes that.\n       require [\"\
    mime\", \"foreverypart\", \"fileinto\", \"convert\"];\n       foreverypart\n \
    \      {\n         if header :mime :param \"filename\" :contains\n           \
    \        \"Content-Disposition\" \"inline\"\n         {\n           if size :over\
    \ \"500K\"\n           {\n            convert \"image/tiff\" \"image/jpeg\" [\"\
    pix-x=640\",\"pix-y=480\"];\n           } else {\n            convert \"image/tiff\"\
    \ \"image/jpeg\" [\"pix-x=320\",\"pix-y=240\"];\n           }\n         }\n  \
    \     }\n       [... script continues ...]\n"
- title: 3.4.  Example 4
  contents:
  - "3.4.  Example 4\n   The following example shows some tricky interactions between\
    \ multiple\n   \"convert\" actions and other disposition-type actions.\n     \
    \  require [\"mime\", \"foreverypart\",\n                \"fileinto\", \"redirect\"\
    , \"convert\"];\n       # The first \"if\" block will convert all image/tiff body\
    \ parts\n       # to 640x480 jpegs and will file the message\n       # into the\
    \ \"INBOX.pics\" mailbox as converted at this point.\n       if header :mime :anychild\
    \ :contenttype\n                 \"Content-Type\" \"image/tiff\"\n       {\n \
    \        convert \"image/tiff\" \"image/jpeg\" [\"pix-x=640\",\"pix-y=480\"];\n\
    \         fileinto \"INBOX.pics\";\n       }\n       # The second block, the \"\
    foreverypart\" loop, will convert all\n       # inline jpegs to 320x240 resolution...\
    \ including any tiff body\n       # parts that had been converted in the first\
    \ block, above.\n       # Therefore, any tiff that had been converted to a 640x480\
    \ jpeg\n       # will be re-converted to a 320x240 jpeg here if its\n       #\
    \ Content-Disposition is specified as \"inline\".\n       foreverypart\n     \
    \  {\n         if header :mime :param \"filename\" :contains\n               \
    \    \"Content-Disposition\" \"inline\"\n         {\n           convert \"image/jpeg\"\
    \ \"image/jpeg\" [\"pix-x=320\",\"pix-y=240\"];\n         }\n       }\n      \
    \ # The third block will take any message that contains a header\n       # field\
    \ called \"Mobile-Link\" and redirect it to the user's\n       # mobile address.\
    \  The redirected message will include both\n       # conversions above, from\
    \ block one and block two.\n       if exists \"Mobile-Link\"\n       {\n     \
    \    redirect \"joe@mobile.example.com\";\n       }\n       # The fourth block\
    \ will file the message into \"Tiff\" if it\n       # contains any tiff body parts.\
    \  But because of the earlier\n       # conversion (in the first block), there\
    \ will never be any\n       # tiff body parts, so this \"fileinto\" will never\
    \ happen.\n       if header :mime :anychild :contenttype\n                 \"\
    Content-Type\" \"image/tiff\"\n       {\n         fileinto \"Tiff\";\n       }\n\
    \       # Now, at the end of the script processing, the Sieve\n       # processor\
    \ will perform an implicit keep if none of\n       # the \"fileinto\" and \"redirect\"\
    \ actions were taken.\n       # The kept message will include any conversions\
    \ that\n       # were done (that is, any from the second block).\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Security considerations given in IMAP CONVERT\
    \ [RFC5259] and Sieve\n   [RFC5228] are relevant to this document.  There are\
    \ no additional\n   security considerations resulting from combining the two.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has added the following registration to the\
    \ \"Sieve Extensions\"\n   registry, as defined in RFC 5228:\n   Capability name:\
    \  convert\n   Description:  adds a new Sieve test and action that enable Sieve\n\
    \      scripts to perform data conversions on the message being\n      delivered.\n\
    \   RFC number:  RFC 6558\n   Contact address:  The Sieve discussion list <sieve@ietf.org>\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors also want to thank all who have contributed\
    \ key insight\n   and extensively reviewed and discussed the concepts of CONVERT.\n\
    \   Qian Sun contributed text to this document.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC\
    \ 2046,\n              November 1996.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC5228]  Guenther, P. and T. Showalter, \"Sieve: An\
    \ Email Filtering\n              Language\", RFC 5228, January 2008.\n   [RFC5259]\
    \  Melnikov, A. and P. Coates, \"Internet Message Access\n              Protocol\
    \ - CONVERT Extension\", RFC 5259, July 2008.\n   [RFC5703]  Hansen, T. and C.\
    \ Daboo, \"Sieve Email Filtering: MIME Part\n              Tests, Iteration, Extraction,\
    \ Replacement, and Enclosure\",\n              RFC 5703, October 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business\
    \ Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   UK\n   EMail:\
    \ Alexey.Melnikov@isode.com\n   URI:   http://www.melnikov.ca/\n   Barry Leiba\n\
    \   Huawei Technologies\n   Phone: +1 646 827 0648\n   EMail: barryleiba@computer.org\n\
    \   URI:   http://internetmessagingtechnology.org/\n   Kepeng Li\n   Huawei Technologies\n\
    \   Huawei Base, Bantian, Longgang District\n   Shenzhen, Guangdong  518129\n\
    \   P. R. China\n   Phone: +86-755-28974289\n   EMail: likepeng@huawei.com\n"
