- title: __initial_text__
  contents:
  - "           A Preferred Official Initial Connection Protocol*\n   This document\
    \ specifies the their level protocol used to connect a\n   user process at one\
    \ site with a server process at another site.  In\n   one instance, the user process\
    \ will be a Telnet and the server\n   process will be a Logger, but there will\
    \ be other cases.\n   This document describes a family of Initial Connection Protocols\n\
    \   (ICP's) suitable for establishing one pair of connections between any\n  \
    \ user process and any server process, and further to describe the\n   parameter\
    \ values for connecting Telnets and Loggers.  The description\n   will be at two\
    \ levels, the third or user level, and the second or NCP\n   level.\n"
- title: Third Level Description
  contents:
  - 'Third Level Description

    '
- title: Notation
  contents:
  - "Notation\n   There is no standard notation for describing system calls, which\n\
    \   initiate and close connections or cause data to be sent, so the\n   following\
    \ *ad hoc* notation will be used.\n   Init (local = l, foreign = f, size = s)\n\
    \           Causes the local Host to attempt to establish a connection\n     \
    \      between socket l at the local Host and socket f, with a byte\n        \
    \   size of s for the connection.\n           l is a 32 bit local socket number,\n\
    \           f is a 40 bit foreign socket number, the high-order eight\n      \
    \       bits of which specify the foreign Host, and\n           s is an eight\
    \ bit non-zero byte size.\n           The sum of l and f must be odd.\n   Listen\
    \ (local = l, size = s)\n           Causes the local Host to wait for a request\
    \ for connection to\n           local socket l with byte size s.  The process\
    \ will be woken\n           when a connection is established.  The parameters\
    \ l and s are\n           the same as for Init.\n   Send  (socket = l, data =\
    \ d)\n           The data named by d is sent over the connection attached to\n\
    \           local socket l.  l must be a send socket attached to a\n         \
    \  connection.  d is the name of a data area.\n   Receive (socket = l, data =\
    \ d)\n           The receive side counterpart to send.\n   Close (socket = l)\n\
    \           Any connection currently attached to local socket l is\n         \
    \  closed.\n"
- title: A Family of ICP's
  contents:
  - "A Family of ICP's\n   Briefly, a server process at a site attaches a well-advertised\
    \ send\n   socket L and listens.  A user process initiates connection to L from\n\
    \   its receive socket U.  The byte size for this connection is 32. The\n   server\
    \ process then transmits a 32-bit even number S and closes the\n   connection.\
    \  The 32-bit number S and its successor, S+1, are the\n   socket numbers the\
    \ server will use.  The final steps are for sockets\n   S and S+1 at the server\
    \ site to be connected to sockets U+3 and U+2\n   respectively at the user site.\n\
    \   Using the notation, the server executes the following sequence:\n      Listen\
    \ (socket = L, size = 32)\n      [Wait until a user connects]\n      Send (socket\
    \ = L, data = S)\n      Close (socket = L)\n      Init (local = S, Foreign = U+3,\
    \ size Bu)\n      Init (local = S+1, foreign = U+2, size Bs)\n   The user executes\
    \ the following:\n      Init (local = U, foreign = L, size = 32)\n      Receive\
    \ (socket = U, data = S)\n      Optional Close (socket = U)\n      Listen or Init\
    \ (local U+3, foreign = S, size = Bu)\n      Listen or Init (local = U+2, foreign\
    \ = S+1, size = Bs)\n   Note that L is a send socket (odd), while S and U are\
    \ receive sockets\n   (even).  Where L, S, or U are used as values of local, they\
    \ are 32-\n   bit numbers; where they are values of foreign, they are 40-bit\n\
    \   numbers.  The parameters Bs and Bu are the byte sizes to be sent by\n   the\
    \ server and user, respectively.  If the user side declines to\n   close socket\
    \ U, then it must be handled automatically by the second\n   level (see page 4).\n\
    \   Examination of the above sequences reveals that an ICP is\n   characterized\
    \ by three numbers L, Bs, and Bu, and must meet the\n   restrictions that\n  \
    \    a) L is a send socket,\n      b) Bs and Bu are legal byte sizes, and\n  \
    \    c) For each L there is only one pair of associated byte sizes.\n   This last\
    \ restriction prevents two district services from being\n   available through\
    \ the same socket and distinguished only by the byte\n   sizes.\n"
- title: Second Level Description
  contents:
  - 'Second Level Description

    '
- title: Notation
  contents:
  - "Notation\n   The following notation will be used for the NCP Control Command\
    \ used\n   in ICP.\n           STR (_ls_, _fs_, _s_)\n                   _ls_\
    \ = local send socket\n                   _fs_ = foreign receive socket\n    \
    \               _s_ = byte size\n           RTS (_ls_, _fs_, _l_)\n          \
    \         _ls_ = local receive socket\n                   _fs_ = foreign send\
    \ socket\n                   _l_ = link\n           ALL (_l_, _m_, _b_)\n    \
    \               _l_ = link\n                   _m_ = message allocation\n    \
    \               _b_ = bit allocation\n           CLS (_ls_, _fs_)\n          \
    \         _ls_  = local socket\n                   _fs_ = foreign socket\n   The\
    \ same family of ICP's is now described again.\n   Server                    \
    \      User\n   S1: listening on socket L.      U1: RTS (U, L, _l1_)\n   S2: Wait\
    \ for match.             U2: Wait for match.\n   S3: STR (L, U, _s1_)\n   S4:\
    \ Wait for allocation.        U3: All (_l1_, _m1_, _b1_)\n   S5: Send data S in_s1_\
    \ bit      U4: Receive data S in s1 bit bytes.\n       bytes as allowed by   \
    \          _s1_ bit bytes.\n       allocation m1_, _b1_).\n   S6: CLS (L, U) \
    \                 U5: CLS (U, L)\n   S7: RTS (S, U+3, _l2_)          U6: STR (U+3,\
    \ S, _s2_)\n   S8: STR (S+1, U+2, _s3_)        U7: RTS (U+2, S+1, _l3_)\n   The\
    \ labels here imply no ordering except that ordering required by\n   the Host-Host\
    \ Protocol.  Note that steps S7 and S8 can be reversed as\n   can U6 and U7. \
    \ Also, notice that at any time after S2 the server\n   could initiate steps S7\
    \ and S8 in parallel with steps S3 through S6,\n   and that at any time after\
    \ U4 the user could initiate steps U6 and U7\n   in parallel with step U5.\n \
    \  Following the above, exchanges ALL commands would be exchanged and\n   data\
    \ transfers could begin.\n   At this level the parameters of the above ICP family\
    \ are L, _m1_,\n   _b1_, _s1_, _s2_, _s3_, _l1_, _l2_, _l3_.\n   L is a well known\
    \ socket number and will be specified for each type\n   of service.\n   m1 and\
    \ b1 are allocation quantities for the transfer of a socket\n   number.\n    \
    \  _m1_ is specified to be 1.\n      _b1_ is specified to be 32.\n      _s1_,\
    \ _s2_, and _s3_ are byte sizes.  Only _s1_ is to be specified\n         as _s2_\
    \ and _s3_ are to be left to the process involved.\n      _s1_ is specified to\
    \ be 32.\n      _l1_, _l2_, and _l3_ are links and are not specified.\n   Note:\
    \ Some hosts currently have difficulty sending 32 bit bytes.\n   Thus, it is temporarily\
    \ allowed to send the socket number S as four 8\n   bit bytes in one message.\n\
    \   It is legal for the NCP to receive RTS or STR before the\n   corresponding\
    \ local Init or Listen is issued.  Therefore, it is\n   suggested that requests\
    \ for connection to idle sockets be queued as\n   allowed by time and space limitations.\n"
- title: Telnet - Logger ICP
  contents:
  - "Telnet - Logger ICP\n   For connecting Telnet and Logger processes, the ICP parameters\
    \ are\n   L=1, Bu, _s2_, and Bs = _s3_ = 8. (To clarify the socket number\n  \
    \ required, L = X'00000001').\n"
- title: Formalities
  contents:
  - "Formalities\n   This proposed official protocol will become official if no serious\n\
    \   objections are raised before 2 June 71.  A telephone survey of\n   Network\
    \ Liaisons will be conducted by Jon Postel before that date.\n   If no objections\
    \ are raised, this protocol will be declared official\n   by the Working Group\
    \ chairman.\n   * This document is based on RFC 123 by S. Crocker and discussions\
    \ by\n     the ICP Committee.\n"
