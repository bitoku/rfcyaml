- title: __initial_text__
  contents:
  - '                     Electronic Signature Policies

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines signature policies for electronic signatures.\
    \ A\n   signature policy is a set of rules for the creation and validation of\n\
    \   an electronic signature, under which the validity of signature can be\n  \
    \ determined.  A given legal/contractual context may recognize a\n   particular\
    \ signature policy as meeting its requirements.\n   A signature policy has a globally\
    \ unique reference, which is bound to\n   an electronic signature by the signer\
    \ as part of the signature\n   calculation.\n   The signature policy needs to\
    \ be available in human readable form so\n   that it can be assessed to meet the\
    \ requirements of the legal and\n   contractual context in which it is being applied.\n\
    \   To allow for the automatic processing of an electronic signature\n   another\
    \ part of the signature policy specifies the electronic rules\n   for the creation\
    \ and validation of the electronic signature in a\n   computer processable form.\
    \  In the current document the format of the\n   signature policy is defined using\
    \ ASN.1.\n   The contents of this document is based on the signature policy\n\
    \   defined in ETSI TS 101 733 V.1.2.2 (2000-12) Copyright (C).\n   Individual\
    \ copies of this ETSI deliverable can be downloaded from\n   http://www.etsi.org.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction                                      \
    \              3\n   2.  Major Parties                                       \
    \            3\n   3.  Signature Policy Specification                        \
    \          5\n   3.1  Overall ASN.1 Structure                                \
    \        5\n   3.2  Signature Validation Policy                              \
    \      6\n   3.3  Common Rules                                               \
    \    7\n   3.4  Commitment Rules                                             \
    \  8\n   3.5  Signer and Verifier Rules                                      9\n\
    \   3.5.1  Signer Rules                                                 9\n  \
    \ 3.5.2  Verifier Rules                                              11\n   3.6\
    \  Certificate and Revocation Requirements                       11\n   3.6.1\
    \  Certificate Requirements                                    11\n   3.6.2  Revocation\
    \ Requirements                                     13\n   3.7  Signing Certificate\
    \ Trust Conditions                          14\n   3.8  Time-Stamp Trust Conditions\
    \                                   15\n   3.9  Attribute Trust Conditions   \
    \                                 16\n   3.10  Algorithm Constraints         \
    \                               17\n   3.11  Signature Policy Extensions     \
    \                             18\n   4.  Security Considerations             \
    \                           18\n   4.1  Protection of Private Key            \
    \                         18\n   4.2  Choice of Algorithms                   \
    \                       18\n   5.  Conformance Requirements                  \
    \                     19\n   6.  References                                  \
    \                   19\n   7. Authors' Addresses                             \
    \                 20\n   Annex A (normative):                                \
    \               21\n   A.1  Definitions Using X.208 (1988) ASN.1 Syntax      \
    \             21\n   A.2  Definitions Using X.680 (1997) ASN.1 Syntax        \
    \           27\n   Annex B (informative):                                    \
    \         34\n   B.1  Signature Policy and Signature Validation Policy       \
    \       34\n   B.2  Identification of Signature Policy                       \
    \     36\n   B.3  General Signature Policy Information                       \
    \   36\n   B.4  Recognized Commitment Types                                  \
    \ 37\n   B.5  Rules for Use of Certification Authorities                    37\n\
    \   B.5.1  Trust Points                                                38\n  \
    \ B.5.2  Certification Path                                          38\n   B.6\
    \  Revocation Rules                                              39\n   B.7  Rules\
    \ for the Use of Roles                                    39\n   B.7.1  Attribute\
    \ Values                                            39\n   B.7.2  Trust Points\
    \ for Certified Attributes                       40\n   B.7.3  Certification Path\
    \ for Certified Attributes                 40\n   B.8  Rules for the Use of Time-Stamping\
    \ and Timing                 40\n   B.8.1  Trust Points and Certificate Paths\
    \                          41\n   B.8.2  Time-Stamping Authority Names       \
    \                        41\n   B.8.3  Timing Constraints - Caution Period   \
    \                      41\n   B.8.4  Timing Constraints - Time-Stamp Delay   \
    \                    41\n   B.9  Rules for Verification Data to be followed  \
    \                  41\n   B.10  Rules for Algorithm Constraints and Key Lengths\
    \              42\n   B.11  Other Signature Policy Rules                     \
    \            42\n   B.12  Signature Policy Protection                        \
    \          42\n   Full Copyright Statement                                   \
    \        44\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is intended to cover signature policies which\
    \ can be\n   used with electronic signatures for various types of transactions,\n\
    \   including business transactions (e.g., purchase requisition,\n   contract,\
    \ and invoice applications).  Electronic signatures can be\n   used for any transaction\
    \ between an individual and a company, between\n   two companies, between an individual\
    \ and a governmental body, etc.\n   This document is independent of any environment.\
    \  It can be applied\n   to any environment e.g., smart cards, GSM SIM cards,\
    \ special programs\n   for electronic signatures etc.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this document (in uppercase,\n   as shown) are\
    \ to be interpreted as described in [RFC2119].\n"
- title: 2.  Major Parties
  contents:
  - "2.  Major Parties\n   The document uses the following terms:\n      *  the Signature\
    \ Policy Issuer;\n      *  the Signer;\n      *  the Verifier;\n      *  the Arbitrator;\n\
    \      *  Trusted Service Providers (TSP);\n   The Signature Policy Issuer (which\
    \ is a Trusted Service Provider\n   (TSP)) issues signatures policies that define\
    \ the technical and\n   procedural requirements for electronic signature creation,\
    \ and\n   validation/ verification, in order to meet a particular business\n \
    \  need.\n   The Signer is the entity that creates the electronic signature. \
    \ When\n   the signer digitally signs over an signature policy identifier, it\n\
    \   represents a commitment on behalf of the signing entity that the data\n  \
    \ being signed is signed under the rules defined by the signature\n   policy.\n\
    \   The Verifier is the entity that validates the electronic signature,\n   it\
    \ may be a single entity or multiple entities.  The verifier MUST\n   validate\
    \ the electronic signature under the rules defined by the\n   electronic signature\
    \ policy for the signature to be valid.\n   An arbitrator, is an entity which\
    \ arbitrates disputes between a\n   signer and a verifier.  It acts as verifier\
    \ when it verifies the\n   electronic signature after it has been previously validated.\n\
    \   The Trusted Service Providers (TSPs) are one or more entities that\n   help\
    \ to build trust relationships between the signer and verifier.\n   Use of TSP\
    \ specific services MAY be mandated by signature policy.\n   TSP supporting services\
    \ include: user certificates, cross-\n   certificates, time-stamping tokens,CRLs,\
    \ ARLs, OCSP responses.\n   A Trusted Service Providers (TSPs) MAY be a Signature\
    \ Policy Issuer,\n   as Such, the TSP MUST define the technical and procedural\n\
    \   requirements for electronic signature creation and validation, in\n   order\
    \ to meet a particular business need.\n   The following other TSPs are used to\
    \ support the functions defined in\n   this document:\n      *  Certification\
    \ Authorities;\n      *  Registration Authorities;\n      *  Repository Authorities\
    \ (e.g., a Directory);\n      *  Time-Stamping Authorities;\n      *  One-line\
    \ Certificate Status Protocol responders;\n      *  Attribute Authorities.\n \
    \  Certification Authorities provide users with public key certificates.\n   Registration\
    \ Authorities allows the registration of entities before a\n   CA generates certificates.\n\
    \   Repository Authorities publish CRLs issued by CAs, , cross-\n   certificates\
    \ (i.e., CA certificates) issued by CAs, signature\n   policies issued by Signature\
    \ Policy Issuers and optionally public key\n   certificates (i.e., leaf certificates)\
    \ issued by CAs.\n   Time-Stamping Authorities attest that some data was formed\
    \ before a\n   given trusted time.\n   One-line Certificate Status Protocol responders\
    \ (OSCP responders)\n   provide information about the status (i.e., revoked, not\
    \ revoked,\n   unknown) of a particular certificate.\n   Attributes Authorities\
    \ provide users with attributes linked to public\n   key certificates\n   An Arbitrator\
    \ is an entity that arbitrates disputes between a signer\n   and a verifier.\n"
- title: 3.  Signature Policy Specification
  contents:
  - "3.  Signature Policy Specification\n   A signature policy specification includes\
    \ general information about\n   the policy, the validation policy rules and other\
    \ signature policy\n   information.\n   This document mandates that:\n      *\
    \  an electronic signature must be processed by the signer and\n         verifier\
    \ in accordance with the signature policy referenced by\n         the signer;\n\
    \      *  the signature policy referenced by the signer must be\n         identifiable\
    \ by an Object Identifier;\n      *  there must exist a specification of the signature\
    \ policy;\n      *  for a given signature policy there must be one definitive\
    \ form\n         of the specification which has a unique binary encoding;\n  \
    \    *  a hash of the definitive specification, using an agreed\n         algorithm,\
    \ must be provided by the signer and checked by the\n         verifier.\n   This\
    \ document defines but does not mandate the form of the signature\n   policy specification.\
    \  The signature policy may be specified either:\n      *  in a free form document\
    \ for human interpretation; or\n      *  in a structured form using an agreed\
    \ syntax and encoding.\n   This document defines an ASN.1 based syntax that may\
    \ be used to\n   define a structured signature policy.  Future versions of this\n\
    \   document may include structured a signature policy specification\n   using\
    \ XML.\n"
- title: 3.1  Overall ASN.1 Structure
  contents:
  - "3.1  Overall ASN.1 Structure\n   The overall structure of a signature policy\
    \ defined using ASN.1 is\n   given in this section.  Use of this ASN.1 structure\
    \ is optional.\n   This ASN.1 syntax is encoded using the Distinguished Encoding\
    \ Rules\n   (DER).\n   In this structure the policy information is preceded by\
    \ an identifier\n   for the hashing algorithm used to protect the signature policy\
    \ and\n   followed by the hash value which must be re-calculated and checked\n\
    \   whenever the signature policy is passed between the issuer and\n   signer/verifier.\n\
    \   The hash is calculated without the outer type and length fields.\n"
- title: SignaturePolicy ::= SEQUENCE {
  contents:
  - "SignaturePolicy ::= SEQUENCE {\n        signPolicyHashAlg      AlgorithmIdentifier,\n\
    \        signPolicyInfo         SignPolicyInfo,\n        signPolicyHash      \
    \   SignPolicyHash     OPTIONAL }\n"
- title: SignPolicyHash ::= OCTET STRING
  contents:
  - 'SignPolicyHash ::= OCTET STRING

    '
- title: SignPolicyInfo ::= SEQUENCE {
  contents:
  - "SignPolicyInfo ::= SEQUENCE {\n        signPolicyIdentifier            SignPolicyId,\n\
    \        dateOfIssue                     GeneralizedTime,\n        policyIssuerName\
    \                PolicyIssuerName,\n        fieldOfApplication              FieldOfApplication,\n\
    \        signatureValidationPolicy       SignatureValidationPolicy,\n        signPolExtensions\
    \               SignPolExtensions\n                                          \
    \         OPTIONAL\n                                                         }\n"
- title: SignPolicyId ::= OBJECT IDENTIFIER
  contents:
  - 'SignPolicyId ::= OBJECT IDENTIFIER

    '
- title: PolicyIssuerName ::= GeneralNames
  contents:
  - 'PolicyIssuerName ::= GeneralNames

    '
- title: FieldOfApplication ::= DirectoryString
  contents:
  - "FieldOfApplication ::= DirectoryString\n   The policyIssuerName field identifies\
    \ the policy issuer in one or\n   more of the general name forms.\n   The fieldofApplication\
    \ is a description of the expected application\n   of this policy.\n   The signature\
    \ validation policy rules are fully processable to allow\n   the validation of\
    \ electronic signatures issued under that form of\n   signature policy.  They\
    \ are described in the rest of this section.\n   The signPolExtensions is a generic\
    \ way to extend the definition of\n   any sub-component of a signature policy.\n"
- title: 3.2  Signature Validation Policy
  contents:
  - "3.2  Signature Validation Policy\n   The signature validation policy defines\
    \ for the signer which data\n   elements must be present in the electronic signature\
    \ he provides and\n   for the verifier which data elements must be present under\
    \ that\n   signature policy for an electronic signature to be potentially valid.\n\
    \   The signature validation policy is described as follows:\n"
- title: SignatureValidationPolicy ::= SEQUENCE {
  contents:
  - "SignatureValidationPolicy ::= SEQUENCE {\n        signingPeriod          SigningPeriod,\n\
    \        commonRules            CommonRules,\n        commitmentRules        CommitmentRules,\n\
    \        signPolExtensions      SignPolExtensions        OPTIONAL\n          \
    \                                      }\n   The signingPeriod identifies the\
    \ date and time before which the\n   signature policy SHOULD NOT be used for creating\
    \ signatures, and an\n   optional date after which it should not be used for creating\n\
    \   signatures.\n"
- title: SigningPeriod ::= SEQUENCE {
  contents:
  - "SigningPeriod ::= SEQUENCE {\n        notBefore       GeneralizedTime,\n    \
    \    notAfter        GeneralizedTime OPTIONAL }\n"
- title: 3.3  Common Rules
  contents:
  - "3.3  Common Rules\n   The CommonRules define rules that are common to all commitment\
    \ types.\n   These rules are defined in terms of trust conditions for\n   certificates,\
    \ time-stamps and attributes, along with any constraints\n   on attributes that\
    \ may be included in the electronic signature.\n"
- title: CommonRules  ::= SEQUENCE {
  contents:
  - "CommonRules  ::= SEQUENCE {\n        signerAndVeriferRules          [0]  SignerAndVerifierRules\n\
    \                                                        OPTIONAL,\n        signingCertTrustCondition\
    \      [1]  SigningCertTrustCondition\n                                      \
    \                  OPTIONAL,\n        timeStampTrustCondition        [2]  TimestampTrustCondition\n\
    \                                                        OPTIONAL,\n        attributeTrustCondition\
    \        [3]  AttributeTrustCondition\n                                      \
    \                  OPTIONAL,\n        algorithmConstraintSet         [4]  AlgorithmConstraintSet\n\
    \                                                        OPTIONAL,\n        signPolExtensions\
    \              [5]  SignPolExtensions\n                                      \
    \                   OPTIONAL\n                                               \
    \        }\n   If a field is present in CommonRules then the equivalent field\
    \ must\n   not be present in any of the CommitmentRules (see below).  If any of\n\
    \   the following fields are not present in CommonRules then it must be\n   present\
    \ in each CommitmentRule:\n      *  signerAndVeriferRules;\n      *  signingCertTrustCondition;\n\
    \      *  timeStampTrustCondition.\n"
- title: 3.4  Commitment Rules
  contents:
  - "3.4  Commitment Rules\n   The CommitmentRules consists of the validation rules\
    \ which apply to\n   given commitment types:\n   CommitmentRules ::= SEQUENCE\
    \ OF CommitmentRule\n   The CommitmentRule for given commitment types are defined\
    \ in terms of\n   trust conditions for certificates, time-stamps and attributes,\
    \ along\n   with any constraints on attributes that may be included in the\n \
    \  electronic signature.\n"
- title: CommitmentRule  ::= SEQUENCE {
  contents:
  - "CommitmentRule  ::= SEQUENCE {\n        selCommitmentTypes                  SelectedCommitmentTypes,\n\
    \        signerAndVeriferRules          [0]  SignerAndVerifierRules\n        \
    \                                                  OPTIONAL,\n        signingCertTrustCondition\
    \      [1]  SigningCertTrustCondition\n                                      \
    \                    OPTIONAL,\n        timeStampTrustCondition        [2]  TimestampTrustCondition\n\
    \                                                          OPTIONAL,\n       \
    \ attributeTrustCondition        [3]  AttributeTrustCondition\n              \
    \                                            OPTIONAL,\n        algorithmConstraintSet\
    \         [4]  AlgorithmConstraintSet\n                                      \
    \                    OPTIONAL,\n        signPolExtensions              [5]  SignPolExtensions\n\
    \                                                          OPTIONAL\n        \
    \                                               }\n"
- title: SelectedCommitmentTypes ::= SEQUENCE OF CHOICE {
  contents:
  - "SelectedCommitmentTypes ::= SEQUENCE OF CHOICE {\n        empty             \
    \           NULL,\n        recognizedCommitmentType     CommitmentType }\n   If\
    \ the SelectedCommitmentTypes indicates \"empty\" then this rule\n   applied when\
    \ a commitment type is not present  (i.e., the type of\n   commitment is indicated\
    \ in the semantics of the message).  Otherwise,\n   the electronic signature must\
    \ contain a commitment type indication\n   that must fit one of the commitments\
    \ types that are mentioned in\n   CommitmentType.\n   A specific commitment type\
    \ identifier must not appear in more than\n   one commitment rule.\n"
- title: CommitmentType ::= SEQUENCE {
  contents:
  - "CommitmentType ::= SEQUENCE {\n        identifier                      CommitmentTypeIdentifier,\n\
    \        fieldOfApplication      [0] FieldOfApplication OPTIONAL,\n        semantics\
    \               [1] DirectoryString OPTIONAL }\n   The fieldOfApplication and\
    \ semantics fields define the specific use\n   and meaning of the commitment within\
    \ the overall field of application\n   defined for the policy.\n"
- title: 3.5  Signer and Verifier Rules
  contents:
  - "3.5  Signer and Verifier Rules\n   The following rules apply to the format of\
    \ electronic signatures\n   defined using [ES-FORMATS].\n   The SignerAndVerifierRules\
    \ consists of signer rule and verification\n   rules as defined below:\n"
- title: SignerAndVerifierRules ::= SEQUENCE {
  contents:
  - "SignerAndVerifierRules ::= SEQUENCE {\n        signerRules      SignerRules,\n\
    \        verifierRules    VerifierRules }\n"
- title: 3.5.1  Signer Rules
  contents:
  - "3.5.1  Signer Rules\n   The signer rules identify:\n      *  if the eContent\
    \ is empty and the signature is calculated using\n         a hash of signed data\
    \ external to CMS structure.\n      *  the CMS signed attributes that must be\
    \ provided by the signer\n         under this policy;\n      *  the CMS unsigned\
    \ attribute that must be provided by the signer\n         under this policy;\n\
    \      *  whether the certificate identifiers from the full certification\n  \
    \       path up to the trust point must be provided by the signer in\n       \
    \  the SigningCertificate attribute;\n      *  whether a signer's certificate,\
    \ or all certificates in the\n         certification path to the trust point must\
    \ be by the signer in\n         the *  certificates field of SignedData.\n"
- title: SignerRules ::= SEQUENCE {
  contents:
  - "SignerRules ::= SEQUENCE {\n        externalSignedData         BOOLEAN      OPTIONAL,\n\
    \                   -- True if signed data is external to CMS structure\n    \
    \                    -- False if signed data part of CMS structure\n         \
    \               -- Not present if either allowed\n        mandatedSignedAttr \
    \        CMSAttrs,\n                                 -- Mandated CMS signed attributes\n\
    \        mandatedUnsignedAttr       CMSAttrs,\n                              \
    \   -- Mandated CMS unsigned attributed\n        mandatedCertificateRef     [0]\
    \ CertRefReq DEFAULT signerOnly,\n                                 -- Mandated\
    \ Certificate Reference\n        mandatedCertificateInfo    [1] CertInfoReq DEFAULT\
    \ none,\n                                 -- Mandated Certificate Info\n     \
    \   signPolExtensions          [2] SignPolExtensions        OPTIONAL\n       \
    \                                         }\n"
- title: CMSattrs ::= SEQUENCE OF OBJECT IDENTIFIER
  contents:
  - "CMSattrs ::= SEQUENCE OF OBJECT IDENTIFIER\n   The mandated SignedAttr field\
    \ must include the object identifier for\n   all those signed attributes required\
    \ by this document as well as\n   additional attributes required by this policy.\n\
    \   The mandatedUnsignedAttr field must include the object identifier for\n  \
    \ all those unsigned attributes required by this document as well as\n   additional\
    \ attributes required by this policy.  For example, if a\n   signature time-stamp\
    \ <see section 1.1) is required by the signer the\n   object identifier for this\
    \ attribute must be included.\n   The mandatedCertificateRef identifies whether\
    \ just the signer's\n   certificate, or all the full certificate path must be\
    \ provided by the\n   signer.\n"
- title: CertRefReq ::= ENUMERATED {
  contents:
  - "CertRefReq ::= ENUMERATED {\n                                signerOnly (1),\n\
    \           -- Only reference to signer cert mandated\n                      \
    \          fullpath (2)\n           -- References for full cert path up to a trust\
    \ point required\n                                        }\n   The mandatedCertificateInfo\
    \ field identifies whether a signer's\n   certificate, or all certificates in\
    \ the certification path to the\n   trust point must be provided by the signer\
    \ in the certificates field\n   of SignedData.\n"
- title: CertInfoReq ::= ENUMERATED {
  contents:
  - "CertInfoReq ::= ENUMERATED {\n                                none (0)      \
    \  ,\n                        -- No mandatory requirements\n                 \
    \               signerOnly (1)  ,\n                        -- Only reference to\
    \ signer cert mandated\n                                fullpath (2)\n       \
    \                 -- References for full cert path up to a\n                 \
    \       -- trust point mandated\n                                            \
    \       }\n"
- title: 3.5.2  Verifier Rules
  contents:
  - "3.5.2  Verifier Rules\n   The verifier rules identify:\n      *  The CMS unsigned\
    \ attributes that must be present under this\n         policy and must be added\
    \ by the verifier if not added by the\n         signer.\n"
- title: VerifierRules ::= SEQUENCE {
  contents:
  - "VerifierRules ::= SEQUENCE {\n                mandatedUnsignedAttr    MandatedUnsignedAttr,\n\
    \                signPolExtensions           SignPolExtensions  OPTIONAL\n   \
    \                                                                }\n"
- title: MandatedUnsignedAttr ::=  CMSAttrs
  contents:
  - "MandatedUnsignedAttr ::=  CMSAttrs\n                                   -- Mandated\
    \ CMS unsigned attributed\n"
- title: 3.6  Certificate and Revocation Requirement
  contents:
  - "3.6  Certificate and Revocation Requirement\n   The SigningCertTrustCondition,\
    \ TimestampTrustCondition and\n   AttributeTrustCondition (defined in subsequent\
    \ sub-sections) make use\n   of two ASN1 structures which are defined below: CertificateTrustTrees\n\
    \   and CertRevReq.\n"
- title: 3.6.1  Certificate Requirements
  contents:
  - "3.6.1  Certificate Requirements\n   The certificateTrustTrees identifies a set\
    \ of self signed\n   certificates for the trust points used to start (or end)\
    \ certificate\n   path processing and the initial conditions for certificate path\n\
    \   validation as defined RFC 2459 [7] section 4.  This ASN1 structure is\n  \
    \ used to define policy for validating the signing certificate, the\n   TSA's\
    \ certificate and attribute certificates.\n"
- title: CertificateTrustTrees ::=   SEQUENCE OF CertificateTrustPoint
  contents:
  - 'CertificateTrustTrees ::=   SEQUENCE OF CertificateTrustPoint

    '
- title: CertificateTrustPoint ::= SEQUENCE {
  contents:
  - "CertificateTrustPoint ::= SEQUENCE {\n        trustpoint                    \
    \          Certificate,\n                               -- self-signed certificate\n\
    \        pathLenConstraint       [0] PathLenConstraint   OPTIONAL,\n        acceptablePolicySet\
    \     [1] AcceptablePolicySet OPTIONAL,\n                                -- If\
    \ not present \"any policy\"\n        nameConstraints         [2] NameConstraints\
    \     OPTIONAL,\n        policyConstraints       [3] PolicyConstraints   OPTIONAL\
    \ }\n   The trustPoint field gives the self signed certificate for the CA\n  \
    \ that is used as the trust point for the start of certificate path\n   processing.\n\
    \   The pathLenConstraint field gives the maximum number of CA\n   certificates\
    \ that may be in a certification path following the\n   trustpoint.  A value of\
    \ zero indicates that only the given trustpoint\n   certificate and an end-entity\
    \ certificate may be used.  If present,\n   the pathLenConstraint field must be\
    \ greater than or equal to zero.\n   Where pathLenConstraint is not present, there\
    \ is no limit to the\n   allowed length of the certification path.\n   PathLenConstraint\
    \    ::=   INTEGER (0..MAX)\n   The acceptablePolicySet field identifies the initial\
    \ set of\n   certificate policies, any of which are acceptable under the signature\n\
    \   policy.  AcceptablePolicySet ::= SEQUENCE OF CertPolicyId\n   CertPolicyId\
    \ ::= OBJECT IDENTIFIER\n   The nameConstraints field indicates a name space within\
    \ which all\n   subject names in subsequent certificates in a certification path\
    \ must\n   be located.  Restrictions may apply to the subject distinguished name\n\
    \   or subject alternative names.  Restrictions apply only when the\n   specified\
    \ name form is present.  If no name of the type is in the\n   certificate, the\
    \ certificate is acceptable.\n   Restrictions are defined in terms of permitted\
    \ or excluded name\n   subtrees.  Any name matching a restriction in the excludedSubtrees\n\
    \   field is invalid regardless of information appearing in the\n   permittedSubtrees.\n"
- title: NameConstraints ::= SEQUENCE {
  contents:
  - "NameConstraints ::= SEQUENCE {\n          permittedSubtrees       [0]     GeneralSubtrees\
    \ OPTIONAL,\n          excludedSubtrees        [1]     GeneralSubtrees OPTIONAL\
    \ }\n     GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n     GeneralSubtree\
    \ ::= SEQUENCE {\n          base                    GeneralName,\n          minimum\
    \         [0]     BaseDistance DEFAULT 0,\n          maximum         [1]     BaseDistance\
    \ OPTIONAL }\n     BaseDistance ::= INTEGER (0..MAX)\n   The policyConstraints\
    \ extension constrains path processing in two\n   ways. It can be used to prohibit\
    \ policy mapping or require that each\n   certificate in a path contain an acceptable\
    \ policy identifier.\n   The policyConstraints field, if present specifies requirement\
    \ for\n   explicit indication of the certificate policy and/or the constraints\n\
    \   on policy mapping.\n"
- title: PolicyConstraints ::= SEQUENCE {
  contents:
  - "PolicyConstraints ::= SEQUENCE {\n        requireExplicitPolicy           [0]\
    \ SkipCerts OPTIONAL,\n        inhibitPolicyMapping            [1] SkipCerts OPTIONAL\
    \ }\n"
- title: SkipCerts ::= INTEGER (0..MAX)
  contents:
  - "SkipCerts ::= INTEGER (0..MAX)\n   If the inhibitPolicyMapping field is present,\
    \ the value indicates the\n   number of additional certificates that may appear\
    \ in the path\n   (including the trustpoint's self certificate) before policy\
    \ mapping\n   is no longer permitted.  For example, a value of one indicates that\n\
    \   policy mapping may be processed in certificates issued by the subject\n  \
    \ of this certificate, but not in additional certificates in the path.\n   If\
    \ the requireExplicitPolicy field is present, subsequent\n   certificates must\
    \ include an acceptable policy identifier.  The value\n   of requireExplicitPolicy\
    \ indicates the number of additional\n   certificates that may appear in the path\
    \ (including the trustpoint's\n   self certificate) before an explicit policy\
    \ is required.  An\n   acceptable policy identifier is the identifier of a policy\
    \ required\n   by the user of the certification path or the identifier of a policy\n\
    \   which has been declared equivalent through policy mapping.\n"
- title: 3.6.2  Revocation Requirements
  contents:
  - "3.6.2  Revocation Requirements\n   The RevocRequirements field specifies minimum\
    \ requirements for\n   revocation information, obtained through CRLs and/or OCSP\
    \ responses,\n   to be used in checking the revocation status of certificates.\
    \  This\n   ASN1 structure is used to define policy for validating the signing\n\
    \   certificate, the TSA's certificate and attribute certificates.\n"
- title: CertRevReq ::= SEQUENCE {
  contents:
  - "CertRevReq ::= SEQUENCE {\n        endCertRevReq   RevReq,\n        caCerts \
    \    [0] RevReq\n                                            }\n   Certificate\
    \ revocation requirements are specified in terms of checks\n   required on:\n\
    \      *  endCertRevReq: end certificates (i.e., the signers certificate,\n  \
    \       the attribute certificate or the time-stamping authority\n         certificate).\n\
    \      *  caCerts: CA certificates.\n            RevReq ::= SEQUENCE  {\n    \
    \         enuRevReq  EnuRevReq,\n             exRevReq    SignPolExtensions OPTIONAL}\n\
    \   An authority certificate is certificate issued to an authority (e.g.,\n  \
    \ either to a certification authority or to an attribute authority\n   (AA)).\n\
    \   A Time-Stamping Authority (TSA) is a trusted third party that creates\n  \
    \ time-stamp tokens in order to indicate that a datum existed at a\n   particular\
    \ point in time.  See [TSP].\n"
- title: EnuRevReq  ::= ENUMERATED {
  contents:
  - "EnuRevReq  ::= ENUMERATED {\n        clrCheck        (0),\n                 \
    \  --Checks must be made against current CRLs\n                   -- (or authority\
    \ revocation lists (ARL))\n        ocspCheck       (1), -- The revocation status\
    \ must be checked\n                  -- using the Online Certificate Status Protocol\n\
    \                  -- (OCSP),RFC 2450.\n        bothCheck       (2),\n       \
    \           -- Both CRL and OCSP checks must be carried out\n        eitherCheck\
    \     (3),\n                  -- At least one of CRL or OCSP checks must be\n\
    \                  -- carried out\n        noCheck         (4),\n            \
    \      -- no check is mandated\n        other           (5)\n                \
    \  -- Other mechanism as defined by signature policy\n                  -- extension\n\
    \          }\n   Revocation requirements are specified in terms of:\n      * \
    \ clrCheck: Checks must be made against current CRLs (or\n         authority revocation\
    \ lists);\n      *  ocspCheck: The revocation status must be checked using the\n\
    \         Online Certificate Status Protocol (RFC 2450);\n      *  bothCheck:\
    \ Both OCSP and CRL checks must be carried out;\n      *  eitherCheck: Either\
    \ OCSP or CRL checks must be carried out;\n      *  noCheck: No check is mandated.\n"
- title: 3.7  Signing Certificate Trust Conditions
  contents:
  - "3.7  Signing Certificate Trust Conditions\n   The SigningCertTrustCondition field\
    \ identifies trust conditions for\n   certificate path processing used to validate\
    \ the signing certificate.\n"
- title: SigningCertTrustCondition ::=   SEQUENCE {
  contents:
  - "SigningCertTrustCondition ::=   SEQUENCE {\n     signerTrustTrees           \
    \   CertificateTrustTrees,\n     signerRevReq                  CertRevReq\n  \
    \                                           }\n"
- title: 3.8  Time-Stamp Trust Conditions
  contents:
  - "3.8  Time-Stamp Trust Conditions\n   The TimeStampTrustCondition field identifies\
    \ trust conditions for\n   certificate path processing used to authenticate the\
    \ timstamping\n   authority and constraints on the name of the time-stamping authority.\n\
    \   This applies to the time-stamp that must be present in every ES-T.\n"
- title: TimestampTrustCondition ::= SEQUENCE {
  contents:
  - "TimestampTrustCondition ::= SEQUENCE {\n    ttsCertificateTrustTrees    [0] \
    \    CertificateTrustTrees\n                                           OPTIONAL,\n\
    \    ttsRevReq                   [1]             CertRevReq\n                \
    \                           OPTIONAL,\n    ttsNameConstraints          [2]   \
    \          NameConstraints\n                                           OPTIONAL,\n\
    \    cautionPeriod               [3]             DeltaTime\n                 \
    \                          OPTIONAL,\n    signatureTimestampDelay     [4]    \
    \         DeltaTime\n                                           OPTIONAL }\n"
- title: DeltaTime ::= SEQUENCE {
  contents:
  - "DeltaTime ::= SEQUENCE {\n        deltaSeconds    INTEGER,\n        deltaMinutes\
    \    INTEGER,\n        deltaHours      INTEGER,\n        deltaDays       INTEGER\
    \ }\n   If ttsCertificateTrustTrees is not present then the same rule as\n   defined\
    \ in certificateTrustCondition applies to certification of the\n   time-stamping\
    \ authorities public key.\n   The tstrRevReq specifies minimum requirements for\
    \ revocation\n   information, obtained through CRLs and/or OCSP responses, to\
    \ be used\n   in checking the revocation status of the time-stamp that must be\n\
    \   present in the ES-T.\n   If ttsNameConstraints is not present then there are\
    \ no additional\n   naming constraints on the trusted time-stamping authority\
    \ other than\n   those implied by the ttsCertificateTrustTrees.\n   The cautionPeriod\
    \ field specifies a caution period after the signing\n   time that it is mandated\
    \ the verifier must wait to get high assurance\n   of the validity of the signer's\
    \ key and that any relevant revocation\n   has been notified.  The revocation\
    \ status information forming the ES\n   with Complete validation data must not\
    \ be collected and used to\n   validate the electronic signature until after this\
    \ caution period.\n   The signatureTimestampDelay field specifies a maximum acceptable\
    \ time\n   between the signing time and the time at which the signature time-\n\
    \   stamp, as used to form the ES Time-Stamped, is created for the\n   verifier.\
    \  If the signature time-stamp is later that the time in the\n   signing-time\
    \ attribute by more than the value given in\n   signatureTimestampDelay, the signature\
    \ must be considered invalid.\n"
- title: 3.9  Attribute Trust Conditions
  contents:
  - "3.9  Attribute Trust Conditions\n   If the attributeTrustCondition field is not\
    \ present then any\n   certified attributes may not considered to be valid under\
    \ this\n   validation policy.  The AttributeTrustCondition field is defined as\n\
    \   follows:\n"
- title: AttributeTrustCondition ::= SEQUENCE {
  contents:
  - "AttributeTrustCondition ::= SEQUENCE {\n      attributeMandated            BOOLEAN,\n\
    \                                   -- Attribute must be present\n      howCertAttribute\
    \             HowCertAttribute,\n      attrCertificateTrustTrees   [0] CertificateTrustTrees\
    \  OPTIONAL,\n      attrRevReq                  [1] CertRevReq             OPTIONAL,\n\
    \      attributeConstraints        [2] AttributeConstraints   OPTIONAL }\n   If\
    \ attributeMandated is true then an attribute, certified within the\n   following\
    \ constraints, must be present.  If false, then the signature\n   is still valid\
    \ if no attribute is specified.\n   The howCertAttribute field specifies whether\
    \ attributes uncertified\n   attributes \"claimed\" by the signer, or certified\
    \ attributes (i.e.,\n   Attribute Certificates) or either using the signer attributes\n\
    \   attribute defined in [ES-FORMATS] section 3.12.3.\n"
- title: HowCertAttribute ::= ENUMERATED {
  contents:
  - "HowCertAttribute ::= ENUMERATED {\n        claimedAttribute       (0),\n    \
    \    certifiedAttribtes     (1),\n        either                 (2) }\n   The\
    \ attrCertificateTrustTrees specifies certificate path conditions\n   for any\
    \ attribute certificate.  If not present the same rules apply\n   as in certificateTrustCondition.\n\
    \   The attrRevReq specifies minimum requirements for revocation\n   information,\
    \ obtained through CRLs and/or OCSP responses, to be used\n   in checking the\
    \ revocation status of Attribute Certificates, if any\n   are present.\n   If\
    \ the attributeConstraints field is not present then there are no\n   constraints\
    \ on the attributes that may be validated under this\n   policy. The attributeConstraints\
    \ field is defined as follows:\n"
- title: AttributeConstraints ::= SEQUENCE {
  contents:
  - "AttributeConstraints ::= SEQUENCE {\n        attributeTypeConstarints       \
    \ [0] AttributeTypeConstraints\n                                             \
    \    OPTIONAL,\n        attributeValueConstarints       [1] AttributeValueConstraints\n\
    \                                                 OPTIONAL }\n   If present, the\
    \ attributeTypeConstarints field specifies the\n   attribute types which are considered\
    \ valid under the signature\n   policy.  Any value for that attribute is considered\
    \ valid.\n   AttributeTypeConstraints ::= SEQUENCE OF AttributeType\n   If present,\
    \ the attributeTypeConstraints field specifies the specific\n   attribute values\
    \ which are considered valid under the signature\n   policy.\n   AttributeValueConstraints\
    \ ::= SEQUENCE OF AttributeTypeAndValue\n"
- title: 3.10  Algorithm Constraints
  contents:
  - "3.10  Algorithm Constraints\n   The algorithmConstrains fields, if present, identifies\
    \ the signing\n   algorithms (hash, public key cryptography, combined hash and\
    \ public\n   key cryptography) that may be used for specific purposes and any\n\
    \   minimum length.  If this field is not present then the policy applies\n  \
    \ no constraints.\n"
- title: 'AlgorithmConstraintSet ::= SEQUENCE {   -- Algorithm constrains on:'
  contents:
  - 'AlgorithmConstraintSet ::= SEQUENCE {   -- Algorithm constrains on:

    '
- title: signerAlgorithmConstraints      [0]     AlgorithmConstraints OPTIONAL,
  contents:
  - "signerAlgorithmConstraints      [0]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- signer\n"
- title: eeCertAlgorithmConstraints      [1]     AlgorithmConstraints OPTIONAL,
  contents:
  - "eeCertAlgorithmConstraints      [1]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- issuer of end entity certs.\n"
- title: caCertAlgorithmConstraints      [2]     AlgorithmConstraints OPTIONAL,
  contents:
  - "caCertAlgorithmConstraints      [2]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- issuer of CA certificates\n"
- title: aaCertAlgorithmConstraints      [3]     AlgorithmConstraints OPTIONAL,
  contents:
  - "aaCertAlgorithmConstraints      [3]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- Attribute Authority\n"
- title: tsaCertAlgorithmConstraints     [4]     AlgorithmConstraints OPTIONAL
  contents:
  - "tsaCertAlgorithmConstraints     [4]     AlgorithmConstraints OPTIONAL\n     \
    \                           -- Time-Stamping Authority\n                     \
    \                                       }\n"
- title: AlgorithmConstraints ::= SEQUENCE OF AlgAndLength
  contents:
  - 'AlgorithmConstraints ::= SEQUENCE OF AlgAndLength

    '
- title: AlgAndLength ::= SEQUENCE {
  contents:
  - "AlgAndLength ::= SEQUENCE {\n        algID                   OBJECT IDENTIFIER,\n\
    \        minKeyLength    INTEGER         OPTIONAL,\n       -- Minimum key length\
    \ in bits\n        other           SignPolExtensions OPTIONAL\n              \
    \   }\n   An Attribute Authority (AA)is authority which assigns privileges by\n\
    \   issuing attribute certificates\n"
- title: 3.11  Signature Policy Extensions
  contents:
  - "3.11  Signature Policy Extensions\n   Additional signature policy rules may be\
    \ added to:\n      *  the overall signature policy structure, as defined in section\n\
    \         3.1;\n      *  the signature validation policy structure, as defined\
    \ in\n         section 3.2;\n      *  the common rules, as defined in section\
    \ 3.3;\n      *  the commitment rules, as defined in section 3.4;\n      *  the\
    \ signer rules, as defined in section 3.5.1;\n      *  the verifier rules, as\
    \ defined in section 3.5.2;\n      * the revocation requirements in section 3.6.2;\n\
    \      *  the algorithm constraints in section 3.10.\n   These extensions to the\
    \ signature policy rules must be defined using\n   an ASN.1 syntax with an associated\
    \ object identifier carried in the\n   SignPolExtn as defined below:\n"
- title: SignPolExtensions ::= SEQUENCE OF SignPolExtn
  contents:
  - 'SignPolExtensions ::= SEQUENCE OF SignPolExtn

    '
- title: SignPolExtn ::= SEQUENCE {
  contents:
  - "SignPolExtn ::= SEQUENCE {\n                extnID      OBJECT IDENTIFIER,\n\
    \                extnValue   OCTET STRING  }\n   The extnID field must contain\
    \ the object identifier for the\n   extension. The extnValue field must contain\
    \ the DER (see ITU-T\n   Recommendation X.690 [4]) encoded value of the extension.\
    \  The\n   definition of an extension, as identified by extnID must include a\n\
    \   definition of the syntax and semantics of the extension.\n"
- title: 4.  Security Considerations
  contents:
  - '4.  Security Considerations

    '
- title: 4.1  Protection of Private Key
  contents:
  - "4.1  Protection of Private Key\n   The security of the electronic signature mechanism\
    \ defined in this\n   document depends on the privacy of the signer's private\
    \ key.\n   Implementations must take steps to ensure that private keys cannot\
    \ be\n   compromised.\n"
- title: 4.2  Choice of Algorithms
  contents:
  - "4.2  Choice of Algorithms\n   Implementers should be aware that cryptographic\
    \ algorithms become\n   weaker with time.  As new cryptoanalysis techniques are\
    \ developed and\n   computing performance improves, the work factor to break a\
    \ particular\n   cryptographic algorithm will reduce.  Therefore, cryptographic\n\
    \   algorithm implementations should be modular allowing new algorithms\n   to\
    \ be readily inserted.  That is, implementers should be prepared for\n   the set\
    \ of mandatory to implement algorithms to change over time.\n"
- title: 5.  Conformance Requirements
  contents:
  - "5.  Conformance Requirements\n   Signer and verifier systems shall be able to\
    \ process an electronic\n   signature in accordance with the specification of\
    \ the signature\n   policy signature policy referenced identifiable by an Object\n\
    \   Identifier, see section 3.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [TS101733]   ETSI Standard TS 101 733 V.1.2.2 (2000-12) Electronic\n\
    \                Signature Formats. Note: copies of ETSI TS 101 733 can\n    \
    \            be freely download from the ETSI web site www.etsi.org.\n   [ES-FORMATS]\
    \ Pinkas, D., Ross, J. and N. Pope, \"Electronic Signature\n                Formats\
    \ for Long Term Electronic Signatures\", RFC 3126,\n                June 2001.\n\
    \   [TSP]        Adams, C, Pinkas, D., Zuccherato, R. and P. Cain,\n         \
    \       \"Internet X.509 Public Key Infrastructure Time-Stamp\n              \
    \  Protocol (TSP)\", RFC 3161, August 2001.\n   [OCSP]       Myers, M., Ankney,\
    \ R., Malpani, R., Galperin, S. and C.\n                Adams, \"On-line Status\
    \ Certificate Protocol\", RFC 2560,\n                June 1999.\n   [RFC2119]\
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [ESS]        Hoffman, P., \"Enhanced\
    \ Security Services for S/MIME\",\n                RFC 2634, June 1999.\n   [CMS]\
    \        Housley, R., \"Cryptographic Message Syntax\", RFC 2630,\n          \
    \      June 1999.\n   [RFC2459]    Housley, R., Ford, W., Polk, W. and D. Solo,\
    \ \"Internet\n                X.509 Public Key Infrastructure, Certificate and\
    \ CRL\n                Profile,\" RFC 2459, January 1999.\n   [PKCS9]      RSA\
    \ Laboratories, \"The Public-Key Cryptography Standards\n                (PKCS)\"\
    , RSA Data Security Inc., Redwood City,\n                California, November\
    \ 1993 Release.\n   [ISONR]      ISO/IEC 10181-5:  Security Frameworks in Open\
    \ Systems.\n                Non-Repudiation Framework. April 1997.\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n   This Experimental RFC has been produced in ETSI TC-SEC.\n\
    \      ETSI\n      F-06921 Sophia Antipolis, Cedex - FRANCE\n      650 Route des\
    \ Lucioles - Sophia Antipolis\n      Valbonne - FranceTel: +33 4 92 94 42 00 Fax:\
    \ +33 4 93 65 47 16\n      secretariat@etsi.fr\n      http://www.etsi.org\n  \
    \ Contact Point\n      Harri Rasilainen\n      ETSI\n      650 Route des Lucioles\n\
    \      F-06921 Sophia Antipolis Cedex\n      FRANCE\n      EMail: harri.rasilainen@etsi.fr\n\
    \      John Ross\n      Security & Standards\n      192 Moulsham Street\n    \
    \  Chelmsford, Essex\n      CM2 0LG\n      United Kingdom\n      EMail: ross@secstan.com\n\
    \      Denis Pinkas\n      Integris, Bull.\n      68, Route de Versailles\n  \
    \    78434 Louveciennes CEDEX\n      FRANCE\n      EMail: Denis.Pinkas@bull.net\n\
    \      Nick Pope\n      Security & Standards\n      192 Moulsham Street\n    \
    \  Chelmsford, Essex\n      CM2 0LG\n      United Kingdom\n      EMail: pope@secstan.com\n"
- title: 'Annex A (normative):'
  contents:
  - "Annex A (normative):\n   ASN.1 Definitions This annex provides the reference\
    \ definition of the\n   ASN.1 syntax signature policies definitions for new syntax\
    \ defined in\n   this document.\n"
- title: A.1  Definitions Using X.208 (1988) ASN.1 Syntax
  contents:
  - "A.1  Definitions Using X.208 (1988) ASN.1 Syntax\n   NOTE: The ASN.1 Module defined\
    \ in section A.1 has precedence over\n   that defined in Annex A-2 in the case\
    \ of any conflict.\n   ETS-ElectronicSignaturePolicies-88syntax { iso(1) member-body(2)\n\
    \           us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-mod(0)\n   \
    \    7}\n"
- title: DEFINITIONS EXPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS EXPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS All
  contents:
  - '-- EXPORTS All

    '
- title: IMPORTS
  contents:
  - 'IMPORTS

    '
- title: -- Internet X.509 Public Key Infrastructure
  contents:
  - "-- Internet X.509 Public Key Infrastructure\n - Certificate and CRL Profile:\
    \ RFC 2560\n        Certificate, AlgorithmIdentifier, CertificateList, Name,\n\
    \        GeneralNames, GeneralName, DirectoryString,Attribute,\n        AttributeTypeAndValue,\
    \ AttributeType, AttributeValue,\n         PolicyInformation, BMPString, UTF8String\n\
    \  FROM PKIX1Explicit88\n        {iso(1) identified-organization(3) dod(6) internet(1)\n\
    \        security(5) mechanisms(5) pkix(7) id-mod(0)\n        id-pkix1-explicit-88(1)}\n\
    \                                                ;\n"
- title: -- Signature Policy Specification
  contents:
  - '-- Signature Policy Specification

    '
- title: -- ==============================
  contents:
  - '-- ==============================

    '
- title: SignaturePolicy ::= SEQUENCE {
  contents:
  - "SignaturePolicy ::= SEQUENCE {\n        signPolicyHashAlg      AlgorithmIdentifier,\n\
    \        signPolicyInfo         SignPolicyInfo,\n        signPolicyHash      \
    \   SignPolicyHash     OPTIONAL }\n"
- title: SignPolicyHash ::= OCTET STRING
  contents:
  - 'SignPolicyHash ::= OCTET STRING

    '
- title: SignPolicyInfo ::= SEQUENCE {
  contents:
  - "SignPolicyInfo ::= SEQUENCE {\n        signPolicyIdentifier            SignPolicyId,\n\
    \        dateOfIssue                     GeneralizedTime,\n        policyIssuerName\
    \                PolicyIssuerName,\n        fieldOfApplication              FieldOfApplication,\n\
    \        signatureValidationPolicy       SignatureValidationPolicy,\n        signPolExtensions\
    \               SignPolExtensions\n                                          \
    \    OPTIONAL\n                                                      }\n"
- title: PolicyIssuerName ::= GeneralNames
  contents:
  - 'PolicyIssuerName ::= GeneralNames

    '
- title: FieldOfApplication ::= DirectoryString
  contents:
  - 'FieldOfApplication ::= DirectoryString

    '
- title: SignatureValidationPolicy ::= SEQUENCE {
  contents:
  - "SignatureValidationPolicy ::= SEQUENCE {\n        signingPeriod          SigningPeriod,\n\
    \        commonRules            CommonRules,\n        commitmentRules        CommitmentRules,\n\
    \        signPolExtensions       SignPolExtensions\n                         \
    \               OPTIONAL\n                                                }\n"
- title: SigningPeriod ::= SEQUENCE {
  contents:
  - "SigningPeriod ::= SEQUENCE {\n        notBefore       GeneralizedTime,\n    \
    \    notAfter        GeneralizedTime OPTIONAL }\n"
- title: CommonRules  ::= SEQUENCE {
  contents:
  - "CommonRules  ::= SEQUENCE {\n        signerAndVeriferRules          [0]  SignerAndVerifierRules\n\
    \                                                          OPTIONAL,\n       \
    \ signingCertTrustCondition      [1]  SigningCertTrustCondition\n            \
    \                                              OPTIONAL,\n        timeStampTrustCondition\
    \        [2]  TimestampTrustCondition\n                                      \
    \                  OPTIONAL,\n        attributeTrustCondition        [3]  AttributeTrustCondition\n\
    \                                                        OPTIONAL,\n        algorithmConstraintSet\
    \         [4]  AlgorithmConstraintSet\n                                      \
    \                   OPTIONAL,\n        signPolExtensions              [5]  SignPolExtensions\n\
    \                                                         OPTIONAL\n         \
    \                                                        }\n"
- title: CommitmentRules ::= SEQUENCE OF CommitmentRule
  contents:
  - 'CommitmentRules ::= SEQUENCE OF CommitmentRule

    '
- title: CommitmentRule  ::= SEQUENCE {
  contents:
  - "CommitmentRule  ::= SEQUENCE {\n        selCommitmentTypes                  SelectedCommitmentTypes,\n\
    \        signerAndVeriferRules          [0]  SignerAndVerifierRules\n        \
    \                                                   OPTIONAL,\n        signingCertTrustCondition\
    \      [1]  SigningCertTrustCondition\n                                      \
    \                     OPTIONAL,\n        timeStampTrustCondition        [2]  TimestampTrustCondition\n\
    \                                                           OPTIONAL,\n      \
    \  attributeTrustCondition        [3]  AttributeTrustCondition\n             \
    \                                              OPTIONAL,\n        algorithmConstraintSet\
    \         [4]  AlgorithmConstraintSet\n                                      \
    \                     OPTIONAL,\n        signPolExtensions              [5]  SignPolExtensions\n\
    \                                                            OPTIONAL\n      \
    \                                                            }\n"
- title: SelectedCommitmentTypes ::= SEQUENCE OF CHOICE {
  contents:
  - "SelectedCommitmentTypes ::= SEQUENCE OF CHOICE {\n        empty             \
    \           NULL,\n        recognizedCommitmentType     CommitmentType }\n"
- title: CommitmentType ::= SEQUENCE {
  contents:
  - "CommitmentType ::= SEQUENCE {\n        identifier                      CommitmentTypeIdentifier,\n\
    \        fieldOfApplication      [0] FieldOfApplication OPTIONAL,\n        semantics\
    \                       [1] DirectoryString OPTIONAL }\n"
- title: SignerAndVerifierRules ::= SEQUENCE {
  contents:
  - "SignerAndVerifierRules ::= SEQUENCE {\n        signerRules      SignerRules,\n\
    \        verifierRules    VerifierRules }\n"
- title: SignerRules ::= SEQUENCE {
  contents:
  - "SignerRules ::= SEQUENCE {\n        externalSignedData         BOOLEAN      OPTIONAL,\n\
    \                     -- True if signed data is external to CMS structure\n  \
    \                    -- False if signed data part of CMS structure\n         \
    \             -- not present if either allowed\n        mandatedSignedAttr   \
    \      CMSAttrs,\n                      -- Mandated CMS signed attributes\n  \
    \      mandatedUnsignedAttr       CMSAttrs,\n                      -- Mandated\
    \ CMS unsigned attributed\n        mandatedCertificateRef     [0] CertRefReq DEFAULT\
    \ signerOnly,\n                      -- Mandated Certificate Reference\n     \
    \   mandatedCertificateInfo    [1] CertInfoReq DEFAULT none,\n               \
    \       -- Mandated Certificate Info\n        signPolExtensions              \
    \  [2] SignPolExtensions\n                                                OPTIONAL}\n"
- title: CMSAttrs ::= SEQUENCE OF OBJECT IDENTIFIER
  contents:
  - 'CMSAttrs ::= SEQUENCE OF OBJECT IDENTIFIER

    '
- title: CertRefReq ::= ENUMERATED {
  contents:
  - "CertRefReq ::= ENUMERATED {\n                                signerOnly (1),\n"
- title: -- Only reference to signer cert mandated
  contents:
  - "-- Only reference to signer cert mandated\n                                fullPath\
    \ (2)\n"
- title: -- References for full cert path up to a trust point required
  contents:
  - "-- References for full cert path up to a trust point required\n             \
    \                                     }\n"
- title: CertInfoReq ::= ENUMERATED {
  contents:
  - "CertInfoReq ::= ENUMERATED {\n                                none (0),\n"
- title: -- No mandatory requirements
  contents:
  - "-- No mandatory requirements\n                                signerOnly (1),\n"
- title: -- Only reference to signer cert mandated
  contents:
  - "-- Only reference to signer cert mandated\n                                fullPath\
    \ (2)\n"
- title: -- References for full cert path up to a trust point mandated
  contents:
  - "-- References for full cert path up to a trust point mandated\n             \
    \                                     }\n"
- title: VerifierRules ::= SEQUENCE {
  contents:
  - "VerifierRules ::= SEQUENCE {\n                mandatedUnsignedAttr    MandatedUnsignedAttr,\n\
    \                signPolExtensions       SignPolExtensions   OPTIONAL\n      \
    \                                            }\n"
- title: MandatedUnsignedAttr ::=  CMSAttrs
  contents:
  - 'MandatedUnsignedAttr ::=  CMSAttrs

    '
- title: -- Mandated CMS unsigned attributed
  contents:
  - '-- Mandated CMS unsigned attributed

    '
- title: CertificateTrustTrees ::=   SEQUENCE OF CertificateTrustPoint
  contents:
  - 'CertificateTrustTrees ::=   SEQUENCE OF CertificateTrustPoint

    '
- title: CertificateTrustPoint ::= SEQUENCE {
  contents:
  - "CertificateTrustPoint ::= SEQUENCE {\n        trustpoint                    \
    \          Certificate,\n                            -- self-signed certificate\n\
    \        pathLenConstraint       [0] PathLenConstraint   OPTIONAL,\n        acceptablePolicySet\
    \     [1] AcceptablePolicySet OPTIONAL,\n                            -- If not\
    \ present \"any policy\"\n        nameConstraints         [2] NameConstraints\
    \     OPTIONAL,\n        policyConstraints       [3] PolicyConstraints   OPTIONAL\
    \ }\n"
- title: PathLenConstraint    ::=   INTEGER (0..MAX)
  contents:
  - 'PathLenConstraint    ::=   INTEGER (0..MAX)

    '
- title: AcceptablePolicySet ::= SEQUENCE OF CertPolicyId
  contents:
  - 'AcceptablePolicySet ::= SEQUENCE OF CertPolicyId

    '
- title: CertPolicyId ::= OBJECT IDENTIFIER
  contents:
  - 'CertPolicyId ::= OBJECT IDENTIFIER

    '
- title: NameConstraints ::= SEQUENCE {
  contents:
  - "NameConstraints ::= SEQUENCE {\n           permittedSubtrees       [0]     GeneralSubtrees\
    \ OPTIONAL,\n           excludedSubtrees        [1]     GeneralSubtrees OPTIONAL\
    \ }\n      GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n    \
    \  GeneralSubtree ::= SEQUENCE {\n           base                    GeneralName,\n\
    \           minimum         [0]     BaseDistance DEFAULT 0,\n           maximum\
    \         [1]     BaseDistance OPTIONAL }\n      BaseDistance ::= INTEGER (0..MAX)\n"
- title: PolicyConstraints ::= SEQUENCE {
  contents:
  - "PolicyConstraints ::= SEQUENCE {\n        requireExplicitPolicy           [0]\
    \ SkipCerts OPTIONAL,\n        inhibitPolicyMapping            [1] SkipCerts OPTIONAL\
    \ }\n"
- title: SkipCerts ::= INTEGER (0..MAX)
  contents:
  - 'SkipCerts ::= INTEGER (0..MAX)

    '
- title: CertRevReq ::= SEQUENCE {
  contents:
  - "CertRevReq ::= SEQUENCE {\n        endCertRevReq   RevReq,\n        caCerts \
    \  [0] RevReq\n                             }\n"
- title: RevReq ::= SEQUENCE  {
  contents:
  - "RevReq ::= SEQUENCE  {\n    enuRevReq  EnuRevReq,\n    exRevReq    SignPolExtensions\
    \ OPTIONAL}\n"
- title: EnuRevReq  ::= ENUMERATED {
  contents:
  - "EnuRevReq  ::= ENUMERATED {\n        clrCheck        (0), --Checks must be made\
    \ against current CRLs\n        -- (or authority revocation lists)\n        ocspCheck\
    \       (1), -- The revocation status must be checked\n        -- using the Online\
    \ Certificate Status Protocol (RFC 2450)\n        bothCheck       (2),\n     \
    \ -- Both CRL and OCSP checks must be carried out\n        eitherCheck     (3),\n\
    \      -- At least one of CRL or OCSP checks must be carried out\n        noCheck\
    \         (4),\n      -- no check is mandated\n        other           (5)\n \
    \     -- Other mechanism as defined by signature policy extension\n          \
    \                                      }\n"
- title: SigningCertTrustCondition ::=   SEQUENCE {
  contents:
  - "SigningCertTrustCondition ::=   SEQUENCE {\n     signerTrustTrees           \
    \   CertificateTrustTrees,\n     signerRevReq                  CertRevReq\n  \
    \                                             }\n"
- title: TimestampTrustCondition ::= SEQUENCE {
  contents:
  - "TimestampTrustCondition ::= SEQUENCE {\n    ttsCertificateTrustTrees    [0] \
    \            CertificateTrustTrees\n                                         \
    \               OPTIONAL,\n    ttsRevReq                   [1]             CertRevReq\n\
    \                                                        OPTIONAL,\n    ttsNameConstraints\
    \          [2]             NameConstraints\n                                 \
    \                       OPTIONAL,\n    cautionPeriod               [3]       \
    \      DeltaTime\n                                                        OPTIONAL,\n\
    \    signatureTimestampDelay     [4]             DeltaTime\n                 \
    \                                      OPTIONAL }\n"
- title: DeltaTime ::= SEQUENCE {
  contents:
  - "DeltaTime ::= SEQUENCE {\n        deltaSeconds    INTEGER,\n        deltaMinutes\
    \    INTEGER,\n        deltaHours      INTEGER,\n        deltaDays       INTEGER\
    \ }\n"
- title: AttributeTrustCondition ::= SEQUENCE {
  contents:
  - "AttributeTrustCondition ::= SEQUENCE {\n        attributeMandated           \
    \ BOOLEAN,\n                                -- Attribute must be present\n   \
    \     howCertAttribute             HowCertAttribute,\n        attrCertificateTrustTrees\
    \   [0] CertificateTrustTrees OPTIONAL,\n        attrRevReq                  [1]\
    \ CertRevReq            OPTIONAL,\n        attributeConstraints        [2] AttributeConstraints\
    \  OPTIONAL }\n"
- title: HowCertAttribute ::= ENUMERATED {
  contents:
  - "HowCertAttribute ::= ENUMERATED {\n        claimedAttribute    (0),\n       \
    \ certifiedAttribtes  (1),\n        either              (2) }\n"
- title: AttributeConstraints ::= SEQUENCE {
  contents:
  - "AttributeConstraints ::= SEQUENCE {\n        attributeTypeConstarints       \
    \ [0] AttributeTypeConstraints\n                                             \
    \           OPTIONAL,\n        attributeValueConstarints       [1] AttributeValueConstraints\n\
    \                                                       OPTIONAL }\n"
- title: AttributeTypeConstraints ::= SEQUENCE OF AttributeType
  contents:
  - 'AttributeTypeConstraints ::= SEQUENCE OF AttributeType

    '
- title: AttributeValueConstraints ::= SEQUENCE OF AttributeTypeAndValue
  contents:
  - 'AttributeValueConstraints ::= SEQUENCE OF AttributeTypeAndValue

    '
- title: 'AlgorithmConstraintSet ::= SEQUENCE {   -- Algorithm constrains on:'
  contents:
  - 'AlgorithmConstraintSet ::= SEQUENCE {   -- Algorithm constrains on:

    '
- title: signerAlgorithmConstraints      [0]     AlgorithmConstraints OPTIONAL,
  contents:
  - "signerAlgorithmConstraints      [0]     AlgorithmConstraints OPTIONAL,\n    \
    \                             -- signer\n"
- title: eeCertAlgorithmConstraints      [1]     AlgorithmConstraints OPTIONAL,
  contents:
  - "eeCertAlgorithmConstraints      [1]     AlgorithmConstraints OPTIONAL,\n    \
    \                             -- issuer of end entity certs.\n"
- title: caCertAlgorithmConstraints      [2]     AlgorithmConstraints OPTIONAL,
  contents:
  - "caCertAlgorithmConstraints      [2]     AlgorithmConstraints OPTIONAL,\n    \
    \                             -- issuer of CA certificates\n"
- title: aaCertAlgorithmConstraints      [3]     AlgorithmConstraints OPTIONAL,
  contents:
  - "aaCertAlgorithmConstraints      [3]     AlgorithmConstraints OPTIONAL,\n    \
    \                             -- Attribute Authority\n"
- title: tsaCertAlgorithmConstraints     [4]     AlgorithmConstraints OPTIONAL
  contents:
  - "tsaCertAlgorithmConstraints     [4]     AlgorithmConstraints OPTIONAL\n     \
    \                            -- Time-Stamping Authority\n                    \
    \                                }\n"
- title: AlgorithmConstraints ::= SEQUENCE OF AlgAndLength
  contents:
  - 'AlgorithmConstraints ::= SEQUENCE OF AlgAndLength

    '
- title: AlgAndLength ::= SEQUENCE {
  contents:
  - "AlgAndLength ::= SEQUENCE {\n        algID                   OBJECT IDENTIFIER,\n\
    \        minKeyLength    INTEGER         OPTIONAL,\n                         \
    \    -- Minimum key length in bits other\n                SignPolExtensions OPTIONAL\n\
    \                 }\n"
- title: SignPolExtensions ::= SEQUENCE OF SignPolExtn
  contents:
  - 'SignPolExtensions ::= SEQUENCE OF SignPolExtn

    '
- title: SignPolExtn ::= SEQUENCE {
  contents:
  - "SignPolExtn ::= SEQUENCE {\n        extnID      OBJECT IDENTIFIER,\n        \
    \        extnValue   OCTET STRING  }\n"
- title: END -- ETS-ElectronicSignaturePolicies-88syntax --
  contents:
  - 'END -- ETS-ElectronicSignaturePolicies-88syntax --

    '
- title: A.2  Definitions Using X.680 1997 ASN.1 Syntax
  contents:
  - "A.2  Definitions Using X.680 1997 ASN.1 Syntax\n   NOTE:   The ASN.1 module defined\
    \ in section A.1 has precedence over\n   that defined in section A.2 in the case\
    \ of any conflict.\n"
- title: ETS-ElectronicSignaturePolicies-97Syntax { iso(1) member-body(2)
  contents:
  - "ETS-ElectronicSignaturePolicies-97Syntax { iso(1) member-body(2)\n    us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-mod(0) 8}\n"
- title: DEFINITIONS EXPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS EXPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS All -
  contents:
  - '-- EXPORTS All -

    '
- title: IMPORTS
  contents:
  - 'IMPORTS

    '
- title: -- Internet X.509 Public Key Infrastructure
  contents:
  - '-- Internet X.509 Public Key Infrastructure

    '
- title: '-- Certificate and CRL Profile: RFC 2560'
  contents:
  - "-- Certificate and CRL Profile: RFC 2560\n        Certificate, AlgorithmIdentifier,\
    \ CertificateList, Name,\n        GeneralNames, GeneralName, DirectoryString,\
    \ Attribute,\n        AttributeTypeAndValue, AttributeType, AttributeValue,\n\
    \        PolicyInformation\n  FROM PKIX1Explicit93\n        {iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n        security(5) mechanisms(5) pkix(7) id-mod(0)\n  \
    \      nid-pkix1-explicit-88(1)}\n"
- title: ;
  contents:
  - ';

    '
- title: -- S/MIME Object Identifier arcs used in the present document
  contents:
  - '-- S/MIME Object Identifier arcs used in the present document

    '
- title: -- ==================================================================
  contents:
  - '-- ==================================================================

    '
- title: -- S/MIME  OID arc used in the present document
  contents:
  - '-- S/MIME  OID arc used in the present document

    '
- title: -- id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - '-- id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2)

    '
- title: --             us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 16 }
  contents:
  - '--             us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 16 }

    '
- title: -- S/MIME Arcs
  contents:
  - '-- S/MIME Arcs

    '
- title: -- id-mod  OBJECT IDENTIFIER ::= { id-smime 0 }
  contents:
  - '-- id-mod  OBJECT IDENTIFIER ::= { id-smime 0 }

    '
- title: -- modules
  contents:
  - '-- modules

    '
- title: -- id-ct   OBJECT IDENTIFIER ::= { id-smime 1 }
  contents:
  - '-- id-ct   OBJECT IDENTIFIER ::= { id-smime 1 }

    '
- title: -- content types
  contents:
  - '-- content types

    '
- title: -- id-aa   OBJECT IDENTIFIER ::= { id-smime 2 }
  contents:
  - '-- id-aa   OBJECT IDENTIFIER ::= { id-smime 2 }

    '
- title: -- attributes
  contents:
  - '-- attributes

    '
- title: -- id-spq  OBJECT IDENTIFIER ::= { id-smime 5 }
  contents:
  - '-- id-spq  OBJECT IDENTIFIER ::= { id-smime 5 }

    '
- title: -- signature policy qualifier
  contents:
  - '-- signature policy qualifier

    '
- title: -- id-cti  OBJECT IDENTIFIER ::= { id-smime 6 }
  contents:
  - '-- id-cti  OBJECT IDENTIFIER ::= { id-smime 6 }

    '
- title: -- commitment type identifier
  contents:
  - '-- commitment type identifier

    '
- title: -- Signature Policy Specification
  contents:
  - '-- Signature Policy Specification

    '
- title: -- ==============================
  contents:
  - '-- ==============================

    '
- title: SignaturePolicy ::= SEQUENCE {
  contents:
  - "SignaturePolicy ::= SEQUENCE {\n        signPolicyHashAlg      AlgorithmIdentifier,\n\
    \        signPolicyInfo         SignPolicyInfo,\n        signPolicyHash      \
    \   SignPolicyHash     OPTIONAL }\n"
- title: SignPolicyHash ::= OCTET STRING
  contents:
  - 'SignPolicyHash ::= OCTET STRING

    '
- title: SignPolicyInfo ::= SEQUENCE {
  contents:
  - "SignPolicyInfo ::= SEQUENCE {\n        signPolicyIdentifier            SignPolicyId,\n\
    \        dateOfIssue                     GeneralizedTime,\n        policyIssuerName\
    \                PolicyIssuerName,\n        fieldOfApplication              FieldOfApplication,\n\
    \        signatureValidationPolicy       SignatureValidationPolicy,\n        signPolExtensions\
    \               SignPolExtensions\n                                          \
    \              OPTIONAL\n                                                    \
    \           }\n"
- title: SignPolicyId ::= OBJECT IDENTIFIER
  contents:
  - 'SignPolicyId ::= OBJECT IDENTIFIER

    '
- title: PolicyIssuerName ::= GeneralNames
  contents:
  - 'PolicyIssuerName ::= GeneralNames

    '
- title: FieldOfApplication ::= DirectoryString
  contents:
  - 'FieldOfApplication ::= DirectoryString

    '
- title: SignatureValidationPolicy ::= SEQUENCE {
  contents:
  - "SignatureValidationPolicy ::= SEQUENCE {\n        signingPeriod          SigningPeriod,\n\
    \        commonRules            CommonRules,\n        commitmentRules        CommitmentRules,\n\
    \        signPolExtensions      SignPolExtensions   OPTIONAL\n               \
    \                                        }\n"
- title: SigningPeriod ::= SEQUENCE {
  contents:
  - "SigningPeriod ::= SEQUENCE {\n        notBefore       GeneralizedTime,\n    \
    \    notAfter        GeneralizedTime OPTIONAL }\n"
- title: CommonRules  ::= SEQUENCE {
  contents:
  - "CommonRules  ::= SEQUENCE {\n        signerAndVeriferRules          [0]  SignerAndVerifierRules\n\
    \                                                         OPTIONAL,\n        signingCertTrustCondition\
    \      [1]  SigningCertTrustCondition\n                                      \
    \                   OPTIONAL,\n        timeStampTrustCondition        [2]  TimestampTrustCondition\n\
    \                                                         OPTIONAL,\n        attributeTrustCondition\
    \        [3]  AttributeTrustCondition\n                                      \
    \                   OPTIONAL,\n        algorithmConstraintSet         [4]  AlgorithmConstraintSet\n\
    \                                                         OPTIONAL,\n        signPolExtensions\
    \              [5]  SignPolExtensions\n                                      \
    \                   OPTIONAL\n                                               \
    \         }\n"
- title: CommitmentRules ::= SEQUENCE OF CommitmentRule
  contents:
  - 'CommitmentRules ::= SEQUENCE OF CommitmentRule

    '
- title: CommitmentRule  ::= SEQUENCE {
  contents:
  - "CommitmentRule  ::= SEQUENCE {\n        selCommitmentTypes                  SelectedCommitmentTypes,\n\
    \        signerAndVeriferRules          [0]  SignerAndVerifierRules\n        \
    \                                                 OPTIONAL,\n        signingCertTrustCondition\
    \      [1]  SigningCertTrustCondition\n                                      \
    \                   OPTIONAL,\n        timeStampTrustCondition        [2]  TimestampTrustCondition\n\
    \                                                         OPTIONAL,\n        attributeTrustCondition\
    \        [3]  AttributeTrustCondition\n                                      \
    \                   OPTIONAL,\n        algorithmConstraintSet         [4]  AlgorithmConstraintSet\n\
    \                                                         OPTIONAL,\n        signPolExtensions\
    \                    [5]  SignPolExtensions\n                                \
    \                         OPTIONAL\n                                         \
    \                     }\n"
- title: SelectedCommitmentTypes ::= SEQUENCE OF CHOICE {
  contents:
  - "SelectedCommitmentTypes ::= SEQUENCE OF CHOICE {\n        empty             \
    \           NULL,\n        recognizedCommitmentType     CommitmentType }\n"
- title: CommitmentType ::= SEQUENCE {
  contents:
  - "CommitmentType ::= SEQUENCE {\n        identifier                      CommitmentTypeIdentifier,\n\
    \        fieldOfApplication      [0] FieldOfApplication OPTIONAL,\n        semantics\
    \               [1] DirectoryString OPTIONAL }\n"
- title: SignerAndVerifierRules ::= SEQUENCE {
  contents:
  - "SignerAndVerifierRules ::= SEQUENCE {\n        signerRules      SignerRules,\n\
    \        verifierRules    VerifierRules }\n"
- title: SignerRules ::= SEQUENCE {
  contents:
  - "SignerRules ::= SEQUENCE {\n        externalSignedData         BOOLEAN      OPTIONAL,\n\
    \                     -- True if signed data is external to CMS structure\n  \
    \                      -- False if signed data part of CMS structure\n       \
    \                 -- not present if either allowed\n        mandatedSignedAttr\
    \         CMSAttrs,\n                  -- Mandated CMS signed attributes\n   \
    \     mandatedUnsignedAttr       CMSAttrs,\n                  -- Mandated CMS\
    \ unsigned attributed\n        mandatedCertificateRef     [0] CertRefReq DEFAULT\
    \ signerOnly,\n                        -- Mandated Certificate Reference\n   \
    \     mandatedCertificateInfo    [1] CertInfoReq DEFAULT none,\n             \
    \           -- Mandated Certificate Info\n        signPolExtensions          \
    \      [2] SignPolExtensions  OPTIONAL\n                                     \
    \                 }\n"
- title: CMSAttrs ::= SEQUENCE OF OBJECT IDENTIFIER
  contents:
  - 'CMSAttrs ::= SEQUENCE OF OBJECT IDENTIFIER

    '
- title: CertRefReq ::= ENUMERATED {
  contents:
  - "CertRefReq ::= ENUMERATED {\n                                signerOnly (1),\n\
    \                   -- Only reference to signer cert mandated\n              \
    \                  fullPath (2)\n                   -- References for full cert\
    \ path up to a trust\n                   -- point required\n                 \
    \                                                      }\n"
- title: CertInfoReq ::= ENUMERATED {
  contents:
  - "CertInfoReq ::= ENUMERATED {\n                                none (0)      \
    \  ,\n                   -- No mandatory requirements\n                      \
    \          signerOnly (1)  ,\n                   -- Only reference to signer cert\
    \ mandated\n                                fullPath (2)\n                   \
    \      -- References for full cert path up to a\n                   -- trust point\
    \ mandated\n                                                          }\n"
- title: VerifierRules ::= SEQUENCE {
  contents:
  - "VerifierRules ::= SEQUENCE {\n                mandatedUnsignedAttr    MandatedUnsignedAttr,\n\
    \                signPolExtensions       SignPolExtensions  OPTIONAL\n       \
    \         }\n"
- title: MandatedUnsignedAttr ::=  CMSAttrs
  contents:
  - "MandatedUnsignedAttr ::=  CMSAttrs\n                          -- Mandated CMS\
    \ unsigned attributed\n"
- title: CertificateTrustTrees ::=   SEQUENCE OF CertificateTrustPoint
  contents:
  - 'CertificateTrustTrees ::=   SEQUENCE OF CertificateTrustPoint

    '
- title: CertificateTrustPoint ::= SEQUENCE {
  contents:
  - "CertificateTrustPoint ::= SEQUENCE {\n        trustpoint                    \
    \          Certificate,\n                          -- self-signed certificate\n\
    \        pathLenConstraint               [0] PathLenConstraint  OPTIONAL,\n  \
    \      acceptablePolicySet     [1] AcceptablePolicySet OPTIONAL,\n           \
    \               -- If not present \"any policy\"\n        nameConstraints    \
    \     [2] NameConstraints     OPTIONAL,\n        policyConstraints           \
    \    [3] PolicyConstraints OPTIONAL }\n"
- title: PathLenConstraint    ::=   INTEGER (0..MAX)
  contents:
  - 'PathLenConstraint    ::=   INTEGER (0..MAX)

    '
- title: AcceptablePolicySet ::= SEQUENCE OF CertPolicyId
  contents:
  - 'AcceptablePolicySet ::= SEQUENCE OF CertPolicyId

    '
- title: CertPolicyId ::= OBJECT IDENTIFIER
  contents:
  - 'CertPolicyId ::= OBJECT IDENTIFIER

    '
- title: NameConstraints ::= SEQUENCE {
  contents:
  - "NameConstraints ::= SEQUENCE {\n           permittedSubtrees       [0]     GeneralSubtrees\
    \ OPTIONAL,\n           excludedSubtrees        [1]     GeneralSubtrees OPTIONAL\
    \ }\n      GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n    \
    \  GeneralSubtree ::= SEQUENCE {\n           base                    GeneralName,\n\
    \           minimum         [0]     BaseDistance DEFAULT 0,\n           maximum\
    \         [1]     BaseDistance OPTIONAL }\n      BaseDistance ::= INTEGER (0..MAX)\n"
- title: PolicyConstraints ::= SEQUENCE {
  contents:
  - "PolicyConstraints ::= SEQUENCE {\n        requireExplicitPolicy           [0]\
    \ SkipCerts OPTIONAL,\n        inhibitPolicyMapping            [1] SkipCerts OPTIONAL\
    \ }\n"
- title: SkipCerts ::= INTEGER (0..MAX)
  contents:
  - 'SkipCerts ::= INTEGER (0..MAX)

    '
- title: CertRevReq ::= SEQUENCE {
  contents:
  - "CertRevReq ::= SEQUENCE {\n        endCertRevReq   RevReq,\n        caCerts \
    \     [0] RevReq\n                                          }\n"
- title: RevReq ::= SEQUENCE  {
  contents:
  - "RevReq ::= SEQUENCE  {\n    enuRevReq  EnuRevReq,\n    exRevReq    SignPolExtensions\
    \ OPTIONAL}\n"
- title: EnuRevReq  ::= ENUMERATED {
  contents:
  - "EnuRevReq  ::= ENUMERATED {\n        clrCheck        (0),\n                 \
    \  -- Checks must be made against current CRLs\n                   -- (or authority\
    \ revocation lists)\n        ocspCheck       (1),\n                   -- The revocation\
    \ status must be checked using\n                   -- the Online Certificate Status\
    \ Protocol (RFC 2450)\n        bothCheck       (2),\n                   -- Both\
    \ CRL and OCSP checks must be carried out\n        eitherCheck     (3),\n    \
    \               -- At least one of CRL or OCSP checks must be\n              \
    \     -- carried out\n        noCheck         (4),\n                   -- no check\
    \ is mandated\n        other           (5)\n                   -- Other mechanism\
    \ as defined by signature policy\n                   -- extension\n          \
    \                                    }\n"
- title: SigningCertTrustCondition ::=   SEQUENCE {
  contents:
  - "SigningCertTrustCondition ::=   SEQUENCE {\n     signerTrustTrees           \
    \   CertificateTrustTrees,\n     signerRevReq                  CertRevReq\n  \
    \                                            }\n"
- title: TimestampTrustCondition ::= SEQUENCE {
  contents:
  - "TimestampTrustCondition ::= SEQUENCE {\n    ttsCertificateTrustTrees    [0] \
    \            CertificateTrustTrees\n                                         \
    \              OPTIONAL,\n    ttsRevReq                   [1]             CertRevReq\n\
    \                                                       OPTIONAL,\n    ttsNameConstraints\
    \          [2]             NameConstraints\n                                 \
    \                      OPTIONAL,\n    cautionPeriod                       [3]\
    \             DeltaTime\n                                                    \
    \   OPTIONAL,\n    signatureTimestampDelay     [4]             DeltaTime\n   \
    \                                                   OPTIONAL }\n"
- title: DeltaTime ::= SEQUENCE {
  contents:
  - "DeltaTime ::= SEQUENCE {\n        deltaSeconds    INTEGER,\n        deltaMinutes\
    \    INTEGER,\n        deltaHours      INTEGER,\n        deltaDays       INTEGER\
    \ }\n"
- title: AttributeTrustCondition ::= SEQUENCE {
  contents:
  - "AttributeTrustCondition ::= SEQUENCE {\n        attributeMandated           \
    \ BOOLEAN,\n                               -- Attribute must be present\n    \
    \    howCertAttribute             HowCertAttribute,\n        attrCertificateTrustTrees\
    \   [0] CertificateTrustTrees OPTIONAL,\n        attrRevReq                  [1]\
    \ CertRevReq            OPTIONAL,\n        attributeConstraints        [2] AttributeConstraints\
    \  OPTIONAL }\n"
- title: HowCertAttribute ::= ENUMERATED {
  contents:
  - "HowCertAttribute ::= ENUMERATED {\n        claimedAttribute        (0),\n   \
    \     certifiedAttribtes      (1),\n        either                  (2) }\n"
- title: AttributeConstraints ::= SEQUENCE {
  contents:
  - "AttributeConstraints ::= SEQUENCE {\n        attributeTypeConstarints       \
    \ [0] AttributeTypeConstraints\n                                             \
    \          OPTIONAL,\n        attributeValueConstarints       [1] AttributeValueConstraints\n\
    \                                                       OPTIONAL }\n"
- title: AttributeTypeConstraints ::= SEQUENCE OF AttributeType
  contents:
  - 'AttributeTypeConstraints ::= SEQUENCE OF AttributeType

    '
- title: AttributeValueConstraints ::= SEQUENCE OF AttributeTypeAndValue
  contents:
  - 'AttributeValueConstraints ::= SEQUENCE OF AttributeTypeAndValue

    '
- title: AlgorithmConstraintSet ::= SEQUENCE {
  contents:
  - "AlgorithmConstraintSet ::= SEQUENCE {\n                               -- Algorithm\
    \ constrains on:\n"
- title: signerAlgorithmConstraints      [0]     AlgorithmConstraints OPTIONAL,
  contents:
  - "signerAlgorithmConstraints      [0]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- signer\n"
- title: eeCertAlgorithmConstraints      [1]     AlgorithmConstraints OPTIONAL,
  contents:
  - "eeCertAlgorithmConstraints      [1]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- issuer of end entity certs.\n"
- title: caCertAlgorithmConstraints      [2]     AlgorithmConstraints OPTIONAL,
  contents:
  - "caCertAlgorithmConstraints      [2]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- issuer of CA certificates\n"
- title: aaCertAlgorithmConstraints      [3]     AlgorithmConstraints OPTIONAL,
  contents:
  - "aaCertAlgorithmConstraints      [3]     AlgorithmConstraints OPTIONAL,\n    \
    \                            -- Attribute Authority\n"
- title: tsaCertAlgorithmConstraints     [4]     AlgorithmConstraints OPTIONAL
  contents:
  - "tsaCertAlgorithmConstraints     [4]     AlgorithmConstraints OPTIONAL\n     \
    \                           -- Time-Stamping Authority\n                     \
    \                                    }\n"
- title: AlgorithmConstraints ::= SEQUENCE OF AlgAndLength
  contents:
  - 'AlgorithmConstraints ::= SEQUENCE OF AlgAndLength

    '
- title: AlgAndLength ::= SEQUENCE {
  contents:
  - "AlgAndLength ::= SEQUENCE {\n        algID           OBJECT IDENTIFIER,\n   \
    \     minKeyLength    INTEGER         OPTIONAL,\n                            \
    \   -- Minimum key length in bits\n        other           SignPolExtensions OPTIONAL\n\
    \                                                         }\n"
- title: SignPolExtensions ::= SEQUENCE OF SignPolExtn
  contents:
  - 'SignPolExtensions ::= SEQUENCE OF SignPolExtn

    '
- title: SignPolExtn ::= SEQUENCE {
  contents:
  - "SignPolExtn ::= SEQUENCE {\n        extnID      OBJECT IDENTIFIER,\n        extnValue\
    \   OCTET STRING  }\n"
- title: END                           -- ETS-ElectronicPolicies-97Syntax
  contents:
  - 'END                           -- ETS-ElectronicPolicies-97Syntax

    '
- title: 'Annex B (informative):'
  contents:
  - 'Annex B (informative):

    '
- title: B.1  Signature Policy and Signature Validation Policy
  contents:
  - "B.1  Signature Policy and Signature Validation Policy\n   The definition of electronic\
    \ signature mentions: \"a commitment has\n   been explicitly endorsed under a\
    \ \"Signature Policy\", at a given time,\n   by a signer under an identifier,\
    \ e.g., a name or a pseudonym, and\n   optionally a role.\"\n   Electronic signatures\
    \ are commonly applied within the context of a\n   legal or contractual framework.\
    \  This establishes the requirements on\n   the electronic signatures and any\
    \ special semantics (e.g., agreement,\n   intent).  These requirements may be\
    \ defined in very general abstract\n   terms or in terms of detailed rules.  The\
    \ specific semantics\n   associated with an electronic signature implied by a\
    \ legal or\n   contractual framework are outside the scope of this document.\n\
    \   If the signature policy is recognized, within the legal/contractual\n   context,\
    \ as providing commitment, then the signer explicitly agrees\n   with terms and\
    \ conditions which are implicitly or explicitly part of\n   the signed data.\n\
    \   When two independent parties want to evaluate an electronic\n   signature,\
    \ it is fundamental that they get the same result.  It is\n   therefore important\
    \ that the conditions agreed by the signer at the\n   time of signing are indicated\
    \ to the verifier and any arbitrator.  An\n   aspect that enables this to be known\
    \ by all parties is the signature\n   policy. The technical implications of the\
    \ signature policy on the\n   electronic signature with all the validation data\
    \ are called the\n   \"Signature Validation Policy\".  The signature validation\
    \ policy\n   specifies the rules used to validate the signature.\n   This document\
    \ does not mandate the form and encoding of the\n   specification of the signature\
    \ policy.  However, for a given\n   signature policy there must be one definitive\
    \ form that has a unique\n   binary encoded value.\n   This document includes,\
    \ as an option, a formal structure for\n   signature validation policy based on\
    \ the use of Abstract Syntax\n   Notation 1 (ASN.1).\n   Given the specification\
    \ of the signature policy and its hash value an\n   implementation of a verification\
    \ process must obey the rules defined\n   in the specification.\n   This document\
    \ places no restriction on how it should be implemented.\n   Provide the implementation\
    \ conforms to the conformance requirements\n   as define in section 5 implementation\
    \ options include:\n   A validation process that supports a specific signature\
    \ policy as\n   identified by the signature policy OID.  Such an implementation\n\
    \   should conform to a human readable description provided all the\n   processing\
    \ rules of the signature policy are clearly defined.\n   However, if additional\
    \ policies need to be supported, then such an\n   implementation would need to\
    \ be customized for each additional\n   policy.  This type of implementation may\
    \ be simpler to implement\n   initially, but can be difficult to enhance to support\
    \ numerous\n   additional signature policies.\n   A validation process that is\
    \ dynamically programmable and able to\n   adapt its validation rules in accordance\
    \ with a description of the\n   signature policy provided in a computer-processable\
    \ language.  This\n   present document defines such a policy using an ASN.1 structure\
    \ (see\n   6.1).  This type of implementation could support multiple signature\n\
    \   policies without being modified every time, provided all the\n   validation\
    \ rules specified as part of the signature policy are known\n   by the implementation.\
    \  (i.e., only requires modification if there\n   are additional rules specified).\n\
    \   The precise content of a signature policy is not mandated by the\n   current\
    \ document.  However, a signature policy must be sufficiently\n   definitive to\
    \ avoid any ambiguity as to its implementation\n   requirements.  It must be absolutely\
    \ clear under which conditions an\n   electronic signature should be accepted.\
    \  For this reason, it should\n   contain the following information:\n   *  General\
    \ information about the signature policy which includes:\n      -  a unique identifier\
    \ of the policy;\n      -  the name of the issuer of the policy;\n      -  the\
    \ date the policy was issued;\n      -  the field of application of the policy.\n\
    \   *  The signature verification policy which includes:\n      -  the signing\
    \ period,\n      -  a list of recognized commitment types;\n      -  rules for\
    \ Use of Certification Authorities;\n      -  rules for Use of Revocation Status\
    \ Information;\n      -  rules for Use of Roles;\n      -  rules for use of Time-Stamping\
    \ and Timing;\n      -  signature verification data to be provided by the\n  \
    \       signer/collected by verifier;\n      -  any constraints on signature algorithms\
    \ and key lengths.\n   *  Other signature policy rules required to meet the objectives\
    \ of\n      the signature.\n   Variations of the validation policy rules may apply\
    \ to different\n   commitment types.\n"
- title: B.2  Identification of Signature Policy
  contents:
  - "B.2  Identification of Signature Policy\n   When data is signed the signer indicates\
    \ the signature policy\n   applicable to that electronic signature by including\
    \ an object\n   identifier for the signature policy with the signature.  The signer\n\
    \   and verifier must apply the rules specified by the identified policy.\n  \
    \ In addition to the identifier of the signature policy the signer must\n   include\
    \ the hash of the signature policy, so it can be verified that\n   the policy\
    \ selected by the signer is the identical to the one being\n   used the verifier.\n\
    \   A signature policy may be qualified by additional information.  This\n   can\
    \ includes:\n      *  A URL where a copy of the Signature Policy may be obtained;\n\
    \      *  A user notice that should be displayed when the signature is\n     \
    \    verified;\n   If no signature policy is identified then the signature may\
    \ be\n   assumed to have been generated/verified without any policy\n   constraints,\
    \ and hence may be given no specific legal or contractual\n   significance through\
    \ the context of a signature policy.\n   A \"Signature Policy\" will be identifiable\
    \ by an OID (Object\n   Identifier) and verifiable using a hash of the signature\
    \ policy.\n"
- title: B.3  General Signature Policy Information
  contents:
  - "B.3  General Signature Policy Information\n   General information should be recorded\
    \ about the signature policy\n   along with the definition of the rules which\
    \ form the signature\n   policy as described in subsequent subsections.  This\
    \ should include:\n      *  Policy Object Identifier: The \"Signature Policy\"\
    \ will be\n         identifiable by an OID (Object Identifier) whose last component\n\
    \         (i.e., right most) is an integer that is specific to a\n         particular\
    \ version issued on the given date.\n      *  Date of issue: When the \"Signature\
    \ Policy\" was issued.\n      *  Signature Policy Issuer name: An identifier for\
    \ the body\n         responsible for issuing the Signature Policy.  This may be\
    \ used\n         by the signer or verifying in deciding if a policy is to be\n\
    \         trusted, in which case the signer/verifier must authenticate\n     \
    \    the origin of the signature policy as coming from the\n         identified\
    \ issuer.\n      *  Signing period: The start time and date, optionally with an\
    \ end\n         time and date, for the period over which the signature policy\n\
    \         may be used to generate electronic signatures.\n      *  Field of application:\
    \ This defines in general terms the general\n         legal/contract/application\
    \ contexts in which the signature\n         policy is to be used and the specific\
    \ purposes for which the\n         electronic signature is to be applied.\n"
- title: B.4  Recognized Commitment Types
  contents:
  - "B.4  Recognized Commitment Types\n   The signature validation policy may recognize\
    \ one or more types of\n   commitment as being supported by electronic signatures\
    \ produced under\n   the security policy.  If an electronic signature does not\
    \ contain a\n   recognized commitment type then the semantics of the electronic\n\
    \   signature is dependent on the data being signed and the context in\n   which\
    \ it is being used.\n   Only recognized commitment types are allowed in an electronic\n\
    \   signature.\n   The definition of a commitment type includes:\n      *  the\
    \ object identifier for the commitment;\n      *  the contractual/legal/application\
    \ context in which the\n         signature may be used (e.g., submission of messages);\n\
    \      *  a description of the support provided within the terms of the\n    \
    \     context (e.g., proof that the identified source submitted the\n        \
    \ message if the signature is created when message submission is\n         initiated).\n\
    \   The definition of a commitment type can be registered:\n      *  as part of\
    \ the validation policy;\n      *  as part of the application/contract/legal environment;\n\
    \      *  as part of generic register of definitions.\n   The legal/contractual\
    \ context will determine the rules applied to the\n   signature, as defined by\
    \ the signature policy and its recognized\n   commitment types, make it fit for\
    \ purpose intended.\n"
- title: B.5  Rules for Use of Certification Authorities
  contents:
  - "B.5  Rules for Use of Certification Authorities\n   The certificate validation\
    \ process of the verifier, and hence the\n   certificates that may be used by\
    \ the signer for a valid electronic\n   signature, may be constrained by the combination\
    \ of the trust point\n   and certificate path constraints in the signature validation\
    \ policy.\n"
- title: B.5.1  Trust Points
  contents:
  - "B.5.1  Trust Points\n   The signature validation policy defines the certification\
    \ authority\n   trust points that are to be used for signature verification. \
    \ Several\n   trust points may be specified under one signature policy.  Specific\n\
    \   trust points may be specified for a particular type of commitment\n   defined\
    \ under the signature policy.  For a signature to be valid a\n   certification\
    \ path must exists between the Certification Authority\n   that has granted the\
    \ certificate selected by the signer (i.e., the\n   used user-certificate) and\
    \ one of the trust point of the \"Signature\n   Validation Policy\".\n"
- title: B.5.2  Certification Path
  contents:
  - "B.5.2  Certification Path\n   There may be constraints on the use of certificates\
    \ issued by one or\n   more CA(s) in the certificate chain and trust points. \
    \ The two prime\n   constraints are certificate policy constraints and naming\n\
    \   constraints:\n      *  Certificate policy constraints limit the certification\
    \ chain\n         between the user certificate and the certificate of the trusted\n\
    \         point to a given set of certificate policies, or equivalents\n     \
    \    identified through certificate policy mapping.\n      *  The naming constraints\
    \ limit the forms of names that the CA is\n         allowed to certify.\n   Name\
    \ constraints are particularly important when a \"Signature policy\"\n   identifies\
    \ more than one trust point.  In this case, a certificate of\n   a particular\
    \ trusted point may only be used to verify signatures from\n   users with names\
    \ permitted under the name constraint.\n   Certificate Authorities may be organized\
    \ in a tree structure, this\n   tree structure may represent the trust relationship\
    \ between various\n   CA(s) and the users CA.  Alternatively, a mesh relationship\
    \ may exist\n   where a combination of tree and peer cross-certificates may be\
    \ used.\n   The requirement of the certificate path in this document is that it\n\
    \   provides the trust relationship between all the CAs and the signers\n   user\
    \ certificate.  The starting point from a verification point of\n   view, is the\
    \ \"trust point\".  A trust point is usually a CA that\n   publishes self-certified\
    \ certificates, is the starting point from\n   which the verifier verifies the\
    \ certificate chain.  Naming\n   constraints may apply from the trust point, in\
    \ which case they apply\n   throughout the set of certificates that make up the\
    \ certificate path\n   down to the signer's user certificate.\n   Policy constraints\
    \ can be easier to process but to be effective\n   require the presence of a certificate\
    \ policy identifier in the\n   certificates used in a certification path.\n  \
    \ Certificate path processing, thus generally starts with one of the\n   trust\
    \ point from the signature policy and ends with the user\n   certificate.  The\
    \ certificate path processing procedures defined in\n   RFC 2459 section 6 identifies\
    \ the following initial parameters that\n   are selected by the verifier in certificate\
    \ path processing:\n      *  acceptable certificate policies;\n      *  naming\
    \ constraints in terms of constrained and excluded naming\n         subtree;\n\
    \      *  requirements for explicit certificate policy indication and\n      \
    \   whether certificate policy mapping are allowed;\n      *  restrictions on\
    \ the certificate path length.\n   The signature validation policy identifies\
    \ constraints on these\n   parameters.\n"
- title: B.6  Revocation Rules
  contents:
  - "B.6  Revocation Rules\n   The signature policy should defines rules specifying\
    \ requirements for\n   the use of certificate revocation lists (CRLs) and/or on-line\n\
    \   certificate status check service to check the validity of a\n   certificate.\
    \ These rules specify the mandated minimum checks that\n   must be carried out.\n\
    \   It is expected that in many cases either check may be selected with\n   CRLs\
    \ checks being carried out for certificate status that are\n   unavailable from\
    \ OCSP servers.  The verifier may take into account\n   information in the certificate\
    \ in deciding how best to check the\n   revocation status (e.g., a certificate\
    \ extension field about\n   authority information access or a CRL distribution\
    \ point) provided\n   that it does not conflict with the signature policy revocation\
    \ rules.\n"
- title: B.7  Rules for the Use of Roles
  contents:
  - "B.7  Rules for the Use of Roles\n   Roles can be supported as claimed roles or\
    \ as certified roles using\n   Attribute Certificates.\n"
- title: B.7.1  Attribute Values
  contents:
  - "B.7.1  Attribute Values\n   When signature under a role is mandated by the signature\
    \ policy, then\n   either Attribute Certificates may be used or the signer may\
    \ provide a\n   claimed role attribute.  The acceptable attribute types or values\
    \ may\n   be dependent on the type of commitment.  For example, a user may have\n\
    \   several roles that allow the user to sign data that imply commitments\n  \
    \ based on one or more of his roles.\n"
- title: B.7.2  Trust Points for Certified Attributes
  contents:
  - "B.7.2  Trust Points for Certified Attributes\n   When a signature under a certified\
    \ role is mandated by the signature\n   policy, Attribute Authorities are used\
    \ and need to be validated as\n   part of the overall validation of the electronic\
    \ signature.  The\n   trust points for Attribute Authorities do not need to be\
    \ the same as\n   the trust points to evaluate a certificate from the CA of the\
    \ signer.\n   Thus the trust point for verifying roles need not be the same as\n\
    \   trust point used to validate the certificate path of the user's key.\n   Naming\
    \ and certification policy constraints may apply to the AA in\n   similar circumstance\
    \ to when they apply to CA.  Constraints on the AA\n   and CA need not be exactly\
    \ the same.\n   AA(s) may be used when a signer is creating a signature on behalf\
    \ of\n   an organization, they can be particularly useful when the signature\n\
    \   represents an organizational role.  AA(s) may or may not be the same\n   authority\
    \ as CA(s).\n   Thus, the Signature Policy identifies trust points that can be\
    \ used\n   for Attribute Authorities, either by reference to the same trust\n\
    \   points as used for Certification Authorities, or by an independent\n   list.\n"
- title: B.7.3  Certification Path for Certified Attributes
  contents:
  - "B.7.3  Certification Path for Certified Attributes\n   Attribute Authorities\
    \ may be organized in a tree structure in similar\n   way to CA where the AAs\
    \ are the leafs of such a tree.  Naming and\n   other constraints may be required\
    \ on attribute certificate paths in a\n   similar manner to other electronic signature\
    \ certificate paths.\n   Thus, the Signature Policy identify constraints on the\
    \ following\n   parameters used as input to the certificate path processing:\n\
    \      *  acceptable certificate policies, including requirements for\n      \
    \   explicit certificate policy indication and whether certificate\n         policy\
    \ mapping is allowed;\n      *  naming constraints in terms of constrained and\
    \ excluded naming\n         subtrees;\n      *  restrictions on the certificate\
    \ path length.\n"
- title: B.8  Rules for the Use of Time-Stamping and Timing
  contents:
  - "B.8  Rules for the Use of Time-Stamping and Timing\n   The following rules should\
    \ be used when specifying, constraints on\n   the certificate paths for time-stamping\
    \ authorities, constraints on\n   the time-stamping authority names and general\
    \ timing constraints.\n"
- title: B.8.1  Trust Points and Certificate Paths
  contents:
  - "B.8.1  Trust Points and Certificate Paths\n   Signature keys from time-stamping\
    \ authorities will need to be\n   supported by a certification path.  The certification\
    \ path used for\n   time-stamping authorities requires a trustpoint and possibly\
    \ path\n   constraints in the same way that the certificate path for the\n   signer's\
    \ key.\n"
- title: B.8.2  Time-Stamping Authority Names
  contents:
  - "B.8.2  Time-Stamping Authority Names\n   Restrictions may need to be placed by\
    \ the validation policy on the\n   named entities that may act a time-stamping\
    \ authorities.\n"
- title: B.8.3  Timing Constraints - Caution Period
  contents:
  - "B.8.3  Timing Constraints - Caution Period\n   Before an electronic signature\
    \ may really be valid, the verifier has\n   to be sure that the holder of the\
    \ private key was really the only one\n   in possession of key at the time of\
    \ signing.  However, there is an\n   inevitable delay between a compromise or\
    \ loss of key being noted, and\n   a report of revocation being distributed. \
    \ To allow greater\n   confidence in the validity of a signature, a \"cautionary\
    \ period\" may\n   be identified before a signature may be said to be valid with\
    \ high\n   confidence.  A verifier may revalidate a signature after this\n   cautionary\
    \ signature, or wait for this period before validating a\n   signature.\n   The\
    \ validation policy may specify such a cautionary period.\n"
- title: B.8.4  Timing Constraints - Time-Stamp Delay
  contents:
  - "B.8.4  Timing Constraints - Time-Stamp Delay\n   There will be some delay between\
    \ the time that a signature is created\n   and the time the signer's digital signature\
    \ is time-stamped.\n   However, the longer this elapsed period the greater the\
    \ risk of the\n   signature being invalidated due to compromise or deliberate\n\
    \   revocation of its private signing key by the signer.  Thus the\n   signature\
    \ policy should specify a maximum acceptable delay between\n   the signing time\
    \ as claimed by the signer and the time included\n   within the time-stamp.\n"
- title: B.9  Rules for Verification Data to be followed
  contents:
  - "B.9  Rules for Verification Data to be followed\n   By specifying the requirements\
    \ on the signer and verifier the\n   responsibilities of the two parties can be\
    \ clearly defined to\n   establish all the necessary information.\n   These verification\
    \ data rules should include:\n      *  requirements on the signer to provide given\
    \ signed attributes;\n      *  requirements on the verifier to obtain additional\
    \ certificates,\n         CRLs, results of on line certificate status checks and\
    \ to use\n         time-stamps (if no already provided by the signer).\n"
- title: B.10  Rules for Algorithm Constraints and Key Lengths
  contents:
  - "B.10  Rules for Algorithm Constraints and Key Lengths\n   The signature validation\
    \ policy may identify a set of signing\n   algorithms (hashing, public key, combinations)\
    \ and minimum key\n   lengths that may be used:\n      *  by the signer in creating\
    \ the signature;\n      *  in end entity public key Certificates;\n      *  CA\
    \ Certificates;\n      *  attribute Certificates;\n      *  by the time-stamping\
    \ authority.\n"
- title: B.11  Other Signature Policy Rules
  contents:
  - "B.11  Other Signature Policy Rules\n   The signature policy may specify additional\
    \ policy rules, for example\n   rules that relate to the environment used by the\
    \ signer.  These\n   additional rules may be defined in computer processable and/or\
    \ human\n   readable form.\n"
- title: B.12  Signature Policy Protection
  contents:
  - "B.12  Signature Policy Protection\n   When signer or verifier obtains a copy\
    \ of the Signature Policy from\n   an issuer, the source should be authenticated\
    \ (for example by using\n   electronic signatures).  When the signer references\
    \ a signature\n   policy the Object Identifier (OID) of the policy, the hash value\
    \ and\n   the hash algorithm OID of that policy must be included in the\n   Electronic\
    \ Signature.\n   It is a mandatory requirement of this present document that the\n\
    \   signature policy value computes to one, and only one hash value using\n  \
    \ the specified hash algorithm.  This means that there must be a single\n   binary\
    \ value of the encoded form of the signature policy for the\n   unique hash value\
    \ to be calculated.  For example, there may exist a\n   particular file type,\
    \ length and format on which the hash value is\n   calculated which is fixed and\
    \ definitive for a particular signature\n   policy.\n   The hash value may be\
    \ obtained by:\n      the signer performing his own computation of the hash over\
    \ the\n      signature policy using his preferred hash algorithm permitted by\n\
    \      the signature policy, and the definitive binary encoded form.\n      the\
    \ signer, having verified the source of the policy, may use both\n      the hash\
    \ algorithm and the hash value included in the computer\n      processable form\
    \ of the policy (see section 6.1).\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
