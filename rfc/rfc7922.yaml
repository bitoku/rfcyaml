- title: __initial_text__
  contents:
  - "                 Interface to the Routing System (I2RS)\n             Traceability:\
    \ Framework and Information Model\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a framework for traceability in the Interface\n\
    \   to the Routing System (I2RS) and the information model for that\n   framework.\
    \  It specifies the motivation, requirements, and use cases,\n   and defines an\
    \ information model for recording interactions between\n   elements implementing\
    \ the I2RS protocol.  This framework provides a\n   consistent tracing interface\
    \ for components implementing the I2RS\n   architecture to record what was done,\
    \ by which component, and when.\n   It aims to improve the management of I2RS\
    \ implementations, and can be\n   used for troubleshooting, auditing, forensics,\
    \ and accounting\n   purposes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7922.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology and Conventions .....................................3\n  \
    \ 3. Motivation ......................................................4\n   4.\
    \ Use Cases .......................................................4\n   5. Information\
    \ Model ...............................................5\n      5.1. I2RS Traceability\
    \ Framework ................................5\n      5.2. I2RS Trace Log Fields\
    \ ......................................7\n      5.3. End of Message Marker .....................................11\n\
    \   6. Examples .......................................................11\n  \
    \ 7. Operational Guidance ...........................................11\n    \
    \  7.1. Trace Log Creation ........................................12\n      7.2.\
    \ Trace Log Temporary Storage ...............................12\n      7.3. Trace\
    \ Log Rotation ........................................13\n      7.4. Trace Log\
    \ Retrieval .......................................13\n           7.4.1. Retrieval\
    \ via Syslog ...............................14\n           7.4.2. Retrieval via\
    \ I2RS Information Collection ..........14\n           7.4.3. Retrieval via I2RS\
    \ Pub/Sub .........................14\n   8. Security Considerations ........................................15\n\
    \   9. References .....................................................16\n  \
    \    9.1. Normative References ......................................16\n    \
    \  9.2. Informative References ....................................16\n   Acknowledgments\
    \ ...................................................17\n   Authors' Addresses\
    \ ................................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The architecture for the Interface to the Routing System\
    \ [RFC7921]\n   specifies that I2RS clients wishing to retrieve or change the\
    \ routing\n   state on a routing element MUST authenticate to an I2RS agent. \
    \ The\n   I2RS client will have a unique identity it provides for\n   authentication,\
    \ and should provide another opaque identity for\n   applications communicating\
    \ through it.  The programming of routing\n   state will produce a return code\
    \ containing the results of the\n   specified operation and associated reason(s)\
    \ for the result.  All of\n   this is critical information to be used for understanding\
    \ the history\n   of I2RS interactions.\n   This document defines the framework\
    \ necessary to trace those\n   interactions between the I2RS client and I2RS agent.\
    \  It goes on to\n   describe use cases for traceability within I2RS.  Based on\
    \ these use\n   cases, the document proposes an information model and reporting\n\
    \   requirements to provide for effective recording of I2RS interactions.\n  \
    \ In this context, effective troubleshooting means being able to\n   identify\
    \ what operation was performed by a specific I2RS client via\n   the I2RS agent,\
    \ what was the result of the operation, and when that\n   operation was performed.\n"
- title: 2.  Terminology and Conventions
  contents:
  - "2.  Terminology and Conventions\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The architecture specification for I2RS [RFC7921] defines\
    \ additional\n   terms used in this document that are specific to the I2RS domain,\n\
    \   such as \"I2RS agent\", \"I2RS client\", etc.  The reader is expected to\n\
    \   be familiar with the terminology and concepts defined in [RFC7921].\n"
- title: 3.  Motivation
  contents:
  - "3.  Motivation\n   As networks scale and policy becomes an increasingly important\
    \ part\n   of the control plane that creates and maintains the forwarding state,\n\
    \   operational complexity increases as well.  I2RS offers more granular\n   and\
    \ coherent control over policy and control-plane state, but it also\n   removes\
    \ or reduces the locality of the policy that has been applied\n   to the control\
    \ plane at any individual forwarding device.  The\n   ability to automate and\
    \ abstract even complex policy-based controls\n   highlights the need for an equally\
    \ scalable traceability function to\n   provide recording at event-level granularity\
    \ of the evolution of the\n   routing system compliant with the requirements of\
    \ I2RS (Section 5 of\n   [RFC7920]).\n"
- title: 4.  Use Cases
  contents:
  - "4.  Use Cases\n   An obvious motivation for I2RS traceability is the need to\n\
    \   troubleshoot and identify root causes of problems in these\n   increasingly\
    \ complex routing systems.  For example, since I2RS is a\n   high-throughput multi-channel,\
    \ full duplex, and highly responsive\n   interface, I2RS clients may be performing\
    \ a large number of\n   operations on I2RS agents concurrently or at nearly the\
    \ same time and\n   quite possibly in very rapid succession.  As these many changes\
    \ are\n   made, the network reacts accordingly.  These changes might lead to a\n\
    \   race condition, performance issues, data loss, or disruption of\n   services.\
    \  In order to isolate the root cause of these issues, it is\n   critical that\
    \ a network operator or administrator has visibility into\n   what changes were\
    \ made via I2RS at a specific time.\n   Some network environments have strong\
    \ auditing requirements for\n   configuration and runtime changes.  Other environments\
    \ have policies\n   that require saving logging information for operational or\
    \ regulatory\n   compliance considerations.  These requirements therefore demand\
    \ that\n   I2RS provides an account of changes made to network element routing\n\
    \   systems.\n   As I2RS becomes increasingly pervasive in routing environments,\
    \ a\n   traceability model that supports controllable trace log retention\n  \
    \ using a standardized structured data format offers significant\n   advantages,\
    \ such as the ability to create common tools supporting\n   automated testing,\
    \ and facilitates the following use cases:\n   o  real-time monitoring and troubleshooting\
    \ of router events;\n   o  automated event correlation, trend analysis, and anomaly\n\
    \      detection;\n   o  offline (manual or tools-based) analysis of router state\
    \ evolution\n      from the retained trace logs;\n   o  enhanced network audit,\
    \ management, and forensic analysis\n      capabilities;\n   o  improved accounting\
    \ of routing system operations; and\n   o  providing a standardized format for\
    \ incident reporting and test\n      logging.\n"
- title: 5.  Information Model
  contents:
  - "5.  Information Model\n   These sections describe the I2RS traceability information\
    \ model and\n   the details about each of the fields to be logged.\n"
- title: 5.1.  I2RS Traceability Framework
  contents:
  - "5.1.  I2RS Traceability Framework\n   This section describes a framework for\
    \ I2RS traceability based on the\n   I2RS Architecture.\n   The interaction between\
    \ the optional network application that drives\n   client activity, I2RS client,\
    \ I2RS agent, the Routing System, and the\n   data captured in the I2RS trace\
    \ log is shown in Figure 1.\n              +---------------+\n         +----------------+\
    \   |\n         |Application     |   |\n         |..............  |   |  0 or\
    \ more Applications\n         | Application ID |   +\n         +----------------+\n\
    \                ^\n                |\n                |\n                v\n\
    \             +-------------+\n         +-------------+   |\n         |I2RS Client\
    \  |   |\n         |.............|   |  1 or more Clients\n         |  Client\
    \ ID  |   +\n         +-------------+\n                ^\n                |\n\
    \                |\n                v\n         +-------------+              \
    \   +-----------------------------+\n         |I2RS Agent   |---------------->|Trace\
    \ Log                    |\n         |             |                 |.............................|\n\
    \         +-------------+                 |Log Entry  [1 .. N]          |\n  \
    \             |  ^                      |.............................|\n    \
    \           |  |                      |Event ID                     |\n      \
    \         |  |                      |Starting Timestamp           |\n        \
    \       |  |                      |Request State                |\n          \
    \     |  |                      |Client ID                    |\n            \
    \   |  |                      |Client Priority              |\n              \
    \ |  |                      |Secondary ID                 |\n   Operation + |\
    \  | Result Code          |Client Address               |\n    Op Data    |  |\
    \                      |Requested Operation          |\n               |  |  \
    \                    |Applied Operation            |\n               |  |    \
    \                  |Operation Data Present       |\n               |  |      \
    \                |Requested Operation Data     |\n               |  |        \
    \              |Applied Operation Data       |\n               |  |          \
    \            |Transaction ID               |\n               |  |            \
    \          |Result Code                  |\n               |  |              \
    \        |Ending Timestamp             |\n               |  |                \
    \      |Timeout Occurred             |\n               v  |                  \
    \    |End Of Message               |\n         +-------------+               \
    \  +-----------------------------+\n         |Routing      |\n         |System\
    \       |\n         +-------------+\n               Figure 1: I2RS Interaction\
    \ Trace Log Capture\n"
- title: 5.2.  I2RS Trace Log Fields
  contents:
  - "5.2.  I2RS Trace Log Fields\n   The following fields comprise an I2RS trace log.\
    \  These fields ensure\n   that each I2RS interaction can be properly traced back\
    \ to the client\n   that made the request at a specific point in time.\n   The\
    \ list below describes the fields captured in the I2RS trace log.\n   This list\
    \ represents a common set of fields that MUST appear in all\n   I2RS trace logs.\
    \  In addition to these fields, I2RS agent\n   implementations MAY choose to log\
    \ additional fields such as I2RS\n   client vendor or agent statistics like free\
    \ memory, performance\n   metrics, etc.\n   Event ID:   This is a unique identifier\
    \ for each event in the I2RS\n      trace log.  An event can be a client authenticating\
    \ with the\n      agent, a client to agent operation, or a client disconnecting\
    \ from\n      an agent.  Operation events can either be logged atomically upon\n\
    \      completion (in which case they will have both a Starting and an\n     \
    \ Ending Timestamp field) or they can be logged at the beginning of\n      each\
    \ Request State transition.  Since operations can occur from\n      the same client\
    \ at the same time, it is important to have an\n      identifier that can be unambiguously\
    \ associated to a specific\n      entry.  If each state transition is logged for\
    \ an operation, the\n      same ID MUST be used for each of the Request State\
    \ log entries.\n      In this way, the life of a request can be easily followed\
    \ in the\n      I2RS trace log.  Beyond the requirement that the Event ID MUST\
    \ be\n      unique for each event, the specific type and value is left up to\n\
    \      the implementation.\n   Starting Timestamp:   The specific time at which\
    \ the I2RS operation\n      enters the specified Request State within the agent.\
    \  If the log\n      entry covers the entire duration of the request, then this\
    \ will be\n      the time that it was first received by the agent.  This field\
    \ MUST\n      be present in all entries that specify the beginning of the state\n\
    \      transition, as well as those entries that log the entire duration\n   \
    \   of the request.  The time is passed in the full timestamp format\n      [RFC3339],\
    \ including the date and offset from Coordinated\n      Universal Time (UTC).\
    \  Given that many I2RS operations can occur\n      in rapid succession, the fractional\
    \ seconds element of the\n      timestamp MUST be used to provide adequate granularity.\n\
    \      Fractional seconds SHOULD be expressed with at least three\n      significant\
    \ digits in second.microsecond format.\n   Request State:   The state of the given\
    \ operation within the I2RS\n      agent state machine at the specified Starting\
    \ or Ending\n      Timestamps.  The I2RS agent SHOULD generate a log entry at\
    \ the\n      moment a request enters and exits a state.  Upon entering a new\n\
    \      state, the log entry will have a Starting Timestamp set to the\n      time\
    \ of entry and no Ending Timestamp.  Upon exiting a state, the\n      log entry\
    \ will have an Ending Timestamp set to the time of exit\n      and no Starting\
    \ Timestamp.  The progression of the request through\n      its various states\
    \ can be linked using the Event ID.  The states\n      can be one of the following\
    \ values:\n         PENDING: The request has been received and queued for\n  \
    \       processing.\n         IN PROCESS: The request is currently being handled\
    \ by the I2RS\n         agent.\n         COMPLETED: The request has reached a\
    \ terminal point.\n      Every state transition SHOULD be logged unless doing\
    \ so will put\n      an undue performance burden on the I2RS agent.  However,\
    \ an entry\n      with the Request State set to COMPLETED MUST be logged for all\n\
    \      operations.  If the COMPLETED state is the only entry for a given\n   \
    \   request, then it MUST have both Starting and Ending Timestamps\n      that\
    \ cover the entire duration of the request from ingress to the\n      agent until\
    \ completion.\n   Client Identity:   The I2RS client identity used to authenticate\
    \ the\n      client to the I2RS agent.\n   Client Priority:   The I2RS client\
    \ priority assigned by the access\n      control model that authenticates the\
    \ client.  For example, this\n      can be set by the Network Configuration Protocol\
    \ (NETCONF) Access\n      Control Model (NACM) as described in [RFC6536].\n  \
    \ Secondary Identity:   This is an opaque identity that may be known to\n    \
    \  the client from a controlling network application.  This is used\n      to\
    \ trace the network application driving the actions of the\n      client.  The\
    \ client may not provide this identity to the agent if\n      there is no external\
    \ network application driving the client.\n      However, this field MUST be logged\
    \ even if the client does not\n      provide a Secondary Identity.  In that case,\
    \ the field will be\n      logged with an empty value.\n   Client Address:   This\
    \ is the network address of the client that\n      connected to the agent.  For\
    \ example, this may be an IPv4 or an\n      IPv6 address.\n   Requested Operation:\
    \   This is the I2RS operation that was requested\n      to be performed.  For\
    \ example, this may be an add route operation\n      if a route is being inserted\
    \ into a routing table.  This may not\n      be the operation that was actually\
    \ applied to the agent.\n      In the case of a client authenticating to the agent,\
    \ the Requested\n      Operation MUST be \"CLIENT AUTHENTICATE\".  In the case\
    \ of a client\n      disconnecting from the agent, the Requested Operation MUST\
    \ be\n      \"CLIENT DISCONNECT\".\n   Applied Operation:   This is the I2RS operation\
    \ that was actually\n      performed.  This can differ from the Requested Operation\
    \ in cases\n      where the agent cannot satisfy the Requested Operation.  This\n\
    \      field may not be logged unless the Request State is COMPLETED.\n   Operation\
    \ Data Present:   This is a Boolean field that indicates\n      whether or not\
    \ additional per-Operation Data is present.\n   Requested Operation Data:   This\
    \ field comprises the data passed to\n      the agent to complete the desired\
    \ operation.  For example, if the\n      operation is a route add operation, the\
    \ Operation Data would\n      include the route prefix, prefix length, and next-hop\
    \ information\n      to be inserted as well as the specific routing table to which\
    \ the\n      route will be added.  If Operation Data is provided, then the\n \
    \     Operation Data Present field MUST be set to TRUE.  Some operations\n   \
    \   may not provide operation data.  In those cases, the Operation\n      Data\
    \ Present field MUST be set to FALSE, and this field MUST be\n      empty.  This\
    \ may not represent the data that was used for the\n      operation that was actually\
    \ applied on the agent.\n      When a client authenticates to the agent, the Requested\
    \ Operation\n      Data MUST contain the client priority.  Other attributes such\
    \ as\n      credentials used for authentication MAY be logged.\n   Applied Operation\
    \ Data:   This field comprises the data that was\n      actually applied as part\
    \ of the Applied Operation.  If the agent\n      cannot satisfy the Requested\
    \ Operation with the Requested\n      Operation Data, then this field can differ\
    \ from the Requested\n      Operation Data.  This field will be empty unless the\
    \ Requested\n      Operation Data was specified.  This field may not be logged\
    \ unless\n      the Request State is COMPLETED.\n   Transaction ID:   The Transaction\
    \ Identity represents that this\n      particular operation is part of a long-running\
    \ I2RS transaction\n      that can consist of multiple, related I2RS operations.\
    \  Using this\n      value, one can relate multiple log entries together as they\
    \ are\n      part of a single, overall I2RS operation.  This is an optional\n\
    \      field that may not be logged unless the event is part of a long-\n    \
    \  running transaction.\n   Result Code:   This field holds the result of the\
    \ operation once the\n      Request State is COMPLETED.  In the case of Routing\
    \ Information\n      Base (RIB) operations, this MUST be the return code as specified\n\
    \      in Section 4 of [RIBINFO].  The operation may not complete with a\n   \
    \   result code in the case of a timeout.  If the operation fails to\n      complete,\
    \ it MUST still log the attempted operation with an\n      appropriate result\
    \ code.\n   Timeout Occurred:   This is a Boolean field that indicates whether\
    \ or\n      not a timeout occurred in the operation.  When this is true, the\n\
    \      value of the Ending Timestamp MUST be set to the time the agent\n     \
    \ recorded for the timeout occurrence.  This field may not be logged\n      unless\
    \ the Request State is COMPLETED.\n   Ending Timestamp:   The specific time at\
    \ which the I2RS operation\n      exits the specified Request State within the\
    \ I2RS agent.  If the\n      log entry covers the entire duration of the request,\
    \ then this\n      will be the time that the request reached a terminal point\
    \ within\n      the agent.  This field MUST be present in all entries that specify\n\
    \      the ending of the state transition, as well as those entries that\n   \
    \   log the entire duration of the request.  The time is passed in the\n     \
    \ full timestamp format [RFC3339], including the date and offset\n      from Coordinated\
    \ Universal Time (UTC).  See the description for\n      Starting Timestamp above\
    \ for the proper format of the Ending\n      Timestamp.\n   End Of Message:  \
    \ Each log entry SHOULD have an appropriate End Of\n      Message (EOM) indicator.\
    \  See Section 5.3 below for more details.\n"
- title: 5.3.  End of Message Marker
  contents:
  - "5.3.  End of Message Marker\n   Because of variability within I2RS trace log\
    \ fields, implementors\n   MUST use a format-appropriate End Of Message (EOM)\
    \ indicator in order\n   to signify the end of a particular record.  That is,\
    \ regardless of\n   format, the I2RS trace log MUST provide a distinct way of\n\
    \   distinguishing between the end of one record and the beginning of\n   another.\
    \  For example, in a linear-formatted log (similar to a\n   syslog) the EOM marker\
    \ may be a newline character.  In an XML-\n   formatted log, the schema would\
    \ provide for element tags that denote\n   the beginning and end of records. \
    \ In a JSON-formatted log, the\n   syntax would provide record separation (likely\
    \ by comma-separated\n   array elements).\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   This section shows a sample of what the fields and values could\
    \ look\n   like.\n   Event ID:                 1\n   Starting Timestamp:     \
    \  2013-09-03T12:00:01.21+00:00\n   Request State:            COMPLETED\n   Client\
    \ ID:                5CEF1870-0326-11E2-A21F-0800200C9A66\n   Client Priority:\
    \          100\n   Secondary ID:             com.example.RoutingApp\n   Client\
    \ Address:           2001:db8:c0c0::2\n   Requested Operation:      ROUTE_ADD\n\
    \   Applied Operation:        ROUTE_ADD\n   Operation Data Present:   TRUE\n \
    \  Requested Operation Data: PREFIX 2001:db8:feed:: PREFIX-LEN 64\n          \
    \                   NEXT-HOP 2001:db8:cafe::1\n   Applied Operation Data:   PREFIX\
    \ 2001:db8:feed:: PREFIX-LEN 64\n                             NEXT-HOP 2001:db8:cafe::1\n\
    \   Transaction ID:           2763461\n   Result Code:              SUCCESS(0)\n\
    \   Timeout Occurred:         FALSE\n   Ending Timestamp:         2013-09-03T12:00:01.23+00:00\n"
- title: 7.  Operational Guidance
  contents:
  - "7.  Operational Guidance\n   Specific operational procedures regarding temporary\
    \ log storage,\n   rollover, retrieval, and access of I2RS trace logs is out of\
    \ scope\n   for this document.  Organizations employing I2RS trace logging are\n\
    \   responsible for establishing proper operational procedures that are\n   appropriately\
    \ suited to their specific requirements and operating\n   environment.  In this\
    \ section, we only provide fundamental and\n   generalized operational guidelines\
    \ that are implementation\n   independent.\n"
- title: 7.1.  Trace Log Creation
  contents:
  - "7.1.  Trace Log Creation\n   The I2RS agent interacts with the Routing and Signaling\
    \ functions of\n   the Routing Element.  Since the I2RS agent is responsible for\n\
    \   actually making the routing changes on the associated network device,\n  \
    \ it creates and maintains a log of operations that can be retrieved to\n   troubleshoot\
    \ I2RS-related impact to the network.  Changes that occur\n   to the network element's\
    \ local configuration outside of the I2RS\n   protocol that preempt I2RS state\
    \ will only be logged if the network\n   element notifies the I2RS agent.\n"
- title: 7.2.  Trace Log Temporary Storage
  contents:
  - "7.2.  Trace Log Temporary Storage\n   The trace information may be temporarily\
    \ stored either in an\n   in-memory buffer or as a file local to the agent.  Care\
    \ should be\n   given to the number of I2RS operations expected on a given agent\
    \ so\n   that the appropriate storage medium is used, and to maximize the\n  \
    \ effectiveness of the log while not impacting the performance and\n   health\
    \ of the agent.  client requests may not always be processed\n   synchronously\
    \ or within a bounded time period.  Consequently, to\n   ensure that trace log\
    \ fields, such as \"Operation\" and \"Result Code\",\n   are part of the same\
    \ trace log record, buffering of the trace log\n   entries may be required.  This\
    \ buffering may result in additional\n   resource load on the agent and the network\
    \ element.\n   Section 7.3 discusses rotating the trace log in order to preserve\
    \ the\n   operation history without exhausting agent or network device\n   resources.\
    \  It is perfectly acceptable, therefore, to use both an\n   in-memory buffer\
    \ for recent operations while rotating or archiving\n   older operations to a\
    \ local file.\n   It is outside the scope of this document to specify the\n  \
    \ implementation details (i.e., size, throughput, data protection,\n   etc.) for\
    \ the physical storage of the I2RS log file.  In terms of\n   data retention,\
    \ attention should be paid to the length of time that\n   the I2RS trace log data\
    \ is kept when that data contains security- or\n   privacy-sensitive attributes.\
    \  The longer this data is retained, the\n   higher the impact if it were to be\
    \ leaked.  It is also possible that\n   legislation may impose some additional\
    \ requirements on the minimum\n   and/or maximum durations for which some kinds\
    \ of data may be\n   retained.\n"
- title: 7.3.  Trace Log Rotation
  contents:
  - "7.3.  Trace Log Rotation\n   In order to prevent the exhaustion of resources\
    \ on the I2RS agent or\n   its associated network device, it is RECOMMENDED that\
    \ the I2RS agent\n   implements trace log rotation.  The details on how this is\
    \ achieved\n   are left to the implementation and are outside the scope of this\n\
    \   document.  However, it should be possible to do a file rotation based\n  \
    \ on either the time or size of the current trace log.  If file\n   rollover is\
    \ supported, multiple archived log files should be\n   supported in order to maximize\
    \ the troubleshooting and accounting\n   benefits of the trace log.\n"
- title: 7.4.  Trace Log Retrieval
  contents:
  - "7.4.  Trace Log Retrieval\n   Implementors are free to provide their own, proprietary\
    \ interfaces\n   and develop custom tools to retrieve and display the I2RS trace\
    \ log.\n   These may include the display of the I2RS trace log as command-line\n\
    \   interface (CLI) output.  However, a key intention of defining this\n   information\
    \ model is to establish a vendor-agnostic and consistent\n   interface to collect\
    \ I2RS trace data.  Correspondingly, retrieval of\n   the data should also be\
    \ made vendor-agnostic.\n   Despite the fact that export of I2RS trace log information\
    \ could be\n   an invaluable diagnostic tool for off-box analysis, exporting this\n\
    \   information MUST NOT interfere with the ability of the agent to\n   process\
    \ new incoming operations.\n   The following three sections describe potential\
    \ ways the trace log\n   can be accessed.  The use of I2RS pub/sub for accessing\
    \ trace log\n   data is mandatory-to-implement, while others are optional.\n"
- title: 7.4.1.  Retrieval via Syslog
  contents:
  - "7.4.1.  Retrieval via Syslog\n   The syslog protocol [RFC5424] is a standard\
    \ way of sending event\n   notification messages from a host to a collector. \
    \ However, the\n   protocol does not define any standard format for storing the\n\
    \   messages, and thus implementors of I2RS tracing would be left to\n   define\
    \ their own format.  So, while the data contained within the\n   syslog message\
    \ would adhere to this information model, and may be\n   consumable by a human\
    \ operator, it would not be easily parseable by a\n   machine.  Syslog MAY be\
    \ employed as a means of retrieving or\n   disseminating the I2RS trace log contents.\n\
    \   If syslog is used for trace log retrieval, then existing logging\n   infrastructure\
    \ and capabilities of syslog [RFC5424] should be\n   leveraged without the need\
    \ to define or extend existing formats.\n   That is, the various fields described\
    \ in Section 5.2 SHOULD be\n   modeled and encoded as Structured Data Elements\
    \ (referred to as\n   \"SD-ELEMENT\"), as described in Section 6.3.1 of [RFC5424].\n"
- title: 7.4.2.  Retrieval via I2RS Information Collection
  contents:
  - "7.4.2.  Retrieval via I2RS Information Collection\n   Section 7.7 of the I2RS\
    \ architecture [RFC7921] defines a mechanism\n   for information collection. \
    \ The information collected includes\n   obtaining a snapshot of a large amount\
    \ of data from the network\n   element.  It is the intent of I2RS to make this\
    \ data available in an\n   implementor-agnostic fashion.  Therefore, the I2RS\
    \ trace log SHOULD\n   be made available via the I2RS information collection mechanism\n\
    \   either as a single snapshot or via a subscription stream.\n"
- title: 7.4.3.  Retrieval via I2RS Pub/Sub
  contents:
  - "7.4.3.  Retrieval via I2RS Pub/Sub\n   Section 7.6 of the I2RS architecture [RFC7921]\
    \ goes on to describe\n   notification mechanisms for a feed of changes happening\
    \ within the\n   I2RS layer.  Specifically, the requirements for a publish-subscribe\n\
    \   system for I2RS are defined in [RFC7923].  I2RS agents MUST support\n   publishing\
    \ I2RS trace log information to that feed as described in\n   [RFC7923].  Subscribers\
    \ would then receive a live stream of I2RS\n   interactions in trace log format\
    \ and could flexibly choose to do a\n   number of things with the log messages.\
    \  For example, the subscribers\n   could log the messages to a datastore, aggregate,\
    \ and summarize\n   interactions from a single client, etc.  The full range of\
    \ potential\n   activities is virtually limitless and the details of how they\
    \ are\n   performed are outside the scope of this document, however.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The I2RS trace log, like any log file, reveals\
    \ the state of the\n   entity producing it as well as the identifying information\
    \ elements\n   and detailed interactions of the system containing it.  The\n \
    \  information model described in this document does not itself\n   introduce\
    \ any security issues, but it does define the set of\n   attributes that make\
    \ up an I2RS log file.  These attributes may\n   contain sensitive information,\
    \ and thus should adhere to the\n   security, privacy, and permission policies\
    \ of the organization making\n   use of the I2RS log file.\n   It is outside the\
    \ scope of this document to specify how to protect\n   the stored log file, but\
    \ it is expected that adequate precautions and\n   security best practices such\
    \ as disk encryption, appropriately\n   restrictive file/directory permissions,\
    \ suitable hardening and\n   physical security of logging entities, mutual authentication,\n\
    \   transport encryption, channel confidentiality, and channel integrity\n   if\
    \ transferring log files.  Additionally, the potentially sensitive\n   information\
    \ contained in a log file SHOULD be adequately anonymized\n   or obfuscated by\
    \ operators to ensure its privacy.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n   \
    \           Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,\n       \
    \       <http://www.rfc-editor.org/info/rfc3339>.\n   [RFC5424]  Gerhards, R.,\
    \ \"The Syslog Protocol\", RFC 5424,\n              DOI 10.17487/RFC5424, March\
    \ 2009,\n              <http://www.rfc-editor.org/info/rfc5424>.\n   [RFC7921]\
    \  Atlas, A., Halpern, J., Hares, S., Ward, D., and T.\n              Nadeau,\
    \ \"An Architecture for the Interface to the Routing\n              System\",\
    \ RFC 7921, DOI 10.17487/RFC7921, June 2016,\n              <http://www.rfc-editor.org/info/rfc7921>.\n\
    \   [RFC7923]  Voit, E., Clemm, A., and A. Gonzalez Prieto, \"Requirements\n \
    \             for Subscription to YANG Datastores\", RFC 7923,\n             \
    \ DOI 10.17487/RFC7923, June 2016.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC6536]  Bierman, A. and M. Bjorklund, \"\
    Network Configuration\n              Protocol (NETCONF) Access Control Model\"\
    , RFC 6536,\n              DOI 10.17487/RFC6536, March 2012,\n              <http://www.rfc-editor.org/info/rfc6536>.\n\
    \   [RFC7920]  Atlas, A., Ed., Nadeau, T., Ed., and D. Ward, \"Problem\n     \
    \         Statement for the Interface to the Routing System\",\n             \
    \ RFC 7923, DOI 10.17487/RFC7923, June 2016,\n              <http://www.rfc-editor.org/info/rfc7920>.\n\
    \   [RIBINFO]  Bahadur, N., Ed., Kini, S., Ed., and J. Medved, \"Routing\n   \
    \           Information Base Info Model\", Work in Progress,\n              draft-ietf-i2rs-rib-info-model-08,\
    \ October 2015.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Alia Atlas for her initial\
    \ feedback\n   and overall support for this work.  Additionally, the authors\n\
    \   acknowledge Alvaro Retana, Russ White, Matt Birkner, Jeff Haas, Joel\n   Halpern,\
    \ Dean Bogdanovich, Ignas Bagdonas, Nobo Akiya, Kwang-koog\n   Lee, Sue Hares,\
    \ Mach Chen, Alex Clemm, Stephen Farrell, Benoit\n   Claise, Les Ginsberg, Suresh\
    \ Krishnan, and Elwyn Davies for their\n   reviews, contributed text, and suggested\
    \ improvements to this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Joe Clarke\n   Cisco Systems, Inc.\n   7200-12 Kit Creek\
    \ Road\n   Research Triangle Park, NC  27709\n   United States\n   Phone: +1-919-392-2867\n\
    \   Email: jclarke@cisco.com\n   Gonzalo Salgueiro\n   Cisco Systems, Inc.\n \
    \  7200-12 Kit Creek Road\n   Research Triangle Park, NC  27709\n   United States\n\
    \   Email: gsalguei@cisco.com\n   Carlos Pignataro\n   Cisco Systems, Inc.\n \
    \  7200-11 Kit Creek Road\n   Research Triangle Park, NC  27709\n   United States\n\
    \   Email: cpignata@cisco.com\n"
