- title: __initial_text__
  contents:
  - '                 Distributed Management Expression MIB

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it describes managed objects used for managing\n   expressions of\
    \ MIB objects.  The results of these expressions become\n   MIB objects usable\
    \ like any other MIB object, such as for the test\n   condition for declaring\
    \ an event.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 The SNMP Management Framework ...............................\
    \    2\n   2 Overview ....................................................   \
    \ 3\n   2.1 Usage .....................................................    4\n\
    \   2.2 Persistence ...............................................    4\n   2.3\
    \ Operation .................................................    4\n   2.3.1 Sampling\
    \ ................................................    5\n   2.3.2 Wildcards ...............................................\
    \    5\n   2.3.3 Evaluation ..............................................   \
    \ 5\n   2.3.4 Value Identification ....................................    6\n\
    \   2.4 Subsets ...................................................    6\n   2.4.1\
    \ No Wildcards ............................................    6\n   2.4.2 No\
    \ Deltas ...............................................    7\n   2.5 Structure\
    \ .................................................    7\n   2.5.1 Resource ................................................\
    \    7\n   2.5.2 Definition ..............................................   \
    \ 7\n   2.5.3 Value ...................................................    8\n\
    \   2.6 Examples ..................................................    8\n   2.6.1\
    \ Wildcarding .............................................    8\n   2.6.2 Calculation\
    \ and Conditional .............................   10\n   3 Definitions .................................................\
    \   12\n   4 Intellectual Property .......................................   36\n\
    \   5 Acknowledgements ............................................   37\n   6\
    \ References ..................................................   37\n   7 Security\
    \ Considerations .....................................   38\n   8 Author's Address\
    \ ............................................   40\n   9 Editor's Address ............................................\
    \   40\n   10 Full Copyright Statement ...................................   41\n"
- title: 1.  The SNMP Management Framework
  contents:
  - "1.  The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n    o   An overall architecture, described\
    \ in RFC 2571 [RFC2571].\n    o   Mechanisms for describing and naming objects\
    \ and events for the\n        purpose of management.  The first version of this\
    \ Structure of\n        Management Information (SMI) is called SMIv1 and described\
    \ in\n        STD 16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and RFC\n\
    \        1215 [RFC1215].  The second version, called SMIv2, is described\n   \
    \     in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and\n        STD\
    \ 58, RFC 2580 [RFC2580].\n    o   Message protocols for transferring management\
    \ information.  The\n        first version of the SNMP message protocol is called\
    \ SNMPv1 and\n        described in STD 15, RFC 1157 [RFC1157].  A second version\
    \ of\n        the SNMP message protocol, which is not an Internet standards\n\
    \        track protocol, is called SNMPv2c and described in RFC 1901\n       \
    \ [RFC1901] and RFC 1906 [RFC1906].  The third version of the\n        message\
    \ protocol is called SNMPv3 and described in RFC 1906\n        [RFC1906], RFC\
    \ 2572 [RFC2572] and RFC 2574 [RFC2574].\n    o   Protocol operations for accessing\
    \ management information.  The\n        first set of protocol operations and associated\
    \ PDU formats is\n        described in STD 15, RFC 1157 [RFC1157].  A second set\
    \ of\n        protocol operations and associated PDU formats is described in\n\
    \        RFC 1905 [RFC1905].\n    o   A set of fundamental applications described\
    \ in RFC 2573\n        [RFC2573] and the view-based access control mechanism described\n\
    \        in RFC 2575 [RFC2575].\n   A more detailed introduction to the current\
    \ SNMP Management Framework\n   can be found in RFC 2570 [RFC2570].\n   Managed\
    \ objects are accessed via a virtual information store, termed\n   the Management\
    \ Information Base or MIB.  Objects in the MIB are\n   defined using the mechanisms\
    \ defined in the SMI.\n   This memo specifies a MIB module that is compliant to\
    \ the SMIv2.  A\n   MIB conforming to the SMIv1 can be produced through the appropriate\n\
    \   translations.  The resulting translated MIB must be semantically\n   equivalent,\
    \ except where objects or events are omitted because no\n   translation is possible\
    \ (use of Counter64).  Some machine readable\n   information in SMIv2 will be\
    \ converted into textual descriptions in\n   SMIv1 during the translation process.\
    \  However, this loss of machine\n   readable information is not considered to\
    \ change the semantics of the\n   MIB.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Users of MIBs often desire MIB objects that MIB designers have\
    \ not\n   provided.  Furthermore, such needs vary from one management\n   philosophy\
    \ to another.  Rather than fill more and more MIBs with\n   standardized objects,\
    \ the Expression MIB supports externally defined\n   expressions of existing MIB\
    \ objects.\n   In the Expression MIB the results of an evaluated expression are\
    \ MIB\n   objects that may be used like any other MIB objects.  These custom-\n\
    \   defined objects are thus usable anywhere any other MIB object can be\n   used.\
    \  For example, they can be used by a management application\n   directly or referenced\
    \ from another MIB, such as the Event MIB\n   [MIBEventMIB].  They can even be\
    \ used by the Expression MIB itself,\n   forming expressions of expressions.\n\
    \   The Expression MIB is instrumentation for a relatively powerful,\n   complex,\
    \ high-level application, considerably different from simple\n   instrumentation\
    \ for a communication driver or a protocol.  The MIB is\n   appropriate in a relatively\
    \ powerful, resource-rich managed system\n   and not necessarily in a severely\
    \ limited environment.\n   Nevertheless, due to dependencies from the Event MIB\
    \ [RFC2981] and\n   the need to support as low-end a system as possible, the Expression\n\
    \   MIB can be somewhat stripped down for lower-power, lower-resource\n   implementations,\
    \ as described in the Subsets section, below.\n   Implementation of the Expression\
    \ MIB in a managed system led to the\n   addition of objects that may not have\
    \ been necessary in an\n   application environment with complete knowledge of\
    \ compiled MIB\n   definitions.  This is appropriate since implementation must\
    \ be\n   possible within typical managed systems with some constraints on\n  \
    \ system resources.\n"
- title: 2.1.  Usage
  contents:
  - "2.1.  Usage\n   On managed systems that can afford the overhead, the Expression\
    \ MIB\n   is a way to create new, customized MIB objects for monitoring.\n   Although\
    \ these can save some network traffic and overhead on\n   management systems,\
    \ that is often not a good tradeoff for objects\n   that are simply to be recorded\
    \ or displayed.\n   An example of a use of the Expression MIB would be to provide\
    \ custom\n   objects for the Event MIB [RFC2981].  A complex expression can\n\
    \   evaluate to a rate of flow or a boolean and thus be subject to\n   testing\
    \ as an event trigger, resulting in an SNMP notification.\n   Without these capabilities\
    \ such monitoring would be limited to the\n   objects in predefined MIBs.  The\
    \ Expression MIB thus supports\n   powerful tools for the network manager faced\
    \ with the monitoring of\n   large, complex systems that can support a significant\
    \ level of self\n   management.\n"
- title: 2.2.  Persistence
  contents:
  - "2.2.  Persistence\n   Although like most MIBs this one has no explicit controls\
    \ for the\n   persistence of the values set in configuring an expression, a robust,\n\
    \   polite implementation would certainly not force its managing\n   applications\
    \ to reconfigure it whenever it resets.\n   Again, as with most MIBs, it is implementation\
    \ specific how a system\n   provides and manages such persistence.  To speculate,\
    \ one could\n   imagine, for example, that persistence depended on the context\
    \ in\n   which the expression was configured, or perhaps system-specific\n   characteristics\
    \ of the expression's owner.  Or perhaps everything in\n   a MIB such as this\
    \ one, which is clearly aimed at persistent\n   configuration, is automatically\
    \ part of a system's other persistent\n   configuration.\n"
- title: 2.3.  Operation
  contents:
  - "2.3.  Operation\n   Most of the operation of the MIB is described or implied\
    \ in the\n   object definitions but a few highlights bear mentioning here.\n"
- title: 2.3.1.  Sampling
  contents:
  - "2.3.1.  Sampling\n   The MIB supports three types of object sampling for the\
    \ MIB objects\n   that make up the expression:  absolute, delta, and changed.\n\
    \   Absolute samples are simply the value of the MIB object at the time\n   it\
    \ is sampled.\n   Absolute samples are not sufficient for expressions of counters,\
    \ as\n   counters have meaning only as a delta (difference) from one sample to\n\
    \   the next.  Thus objects may be sampled as deltas.  Delta sampling\n   requires\
    \ the application to maintain state for the value at the last\n   sample, and\
    \ to do continuous sampling whether or not anyone is\n   looking at the results.\
    \  It thus creates constant overhead.\n   Changed sampling is a simple fallout\
    \ of delta sampling where rather\n   than a difference the result is a boolean\
    \ indicating whether or not\n   the object changed value since the last sample.\n"
- title: 2.3.2.  Wildcards
  contents:
  - "2.3.2.  Wildcards\n   Wildcards allow the application of a single expression\
    \ to multiple\n   instances of the same MIB object.  The definer of the expression\n\
    \   indicates this choice and provides a partial object identifier, with\n   some\
    \ or all of the instance portion left off.  The application then\n   does the\
    \ equivalent of GetNext to obtain the object values, thus\n   discovering the\
    \ instances.\n   All wildcarded objects in an expression must have the same semantics\n\
    \   for the missing portion of their object identifiers.  Otherwise, any\n   successful\
    \ evaluation of the wildcarded expression would be the\n   result of the accidental\
    \ matching of the wildcarded portion of the\n   object identifiers in the expression.\
    \  Such an evaluation will likely\n   produce results which are not meaningful.\n\
    \   The expression can be evaluated only for those instances where all\n   the\
    \ objects in the expression are available with the same value for\n   the wildcarded\
    \ portion of the instance.\n"
- title: 2.3.3.  Evaluation
  contents:
  - "2.3.3.  Evaluation\n   There are two important aspects of evaluation that may\
    \ not be\n   obvious:  what objects and when.\n   What objects get used in the\
    \ evaluation depends on the type of\n   request and whether or not the expression\
    \ contains wildcarded\n   objects.  If the request was a Get, that locks down\
    \ the instances to\n   be used.  If the request was a GetNext or GetBulk, the\
    \ application\n   must work its way up to the next full set of objects for the\n\
    \   expression.\n   Evaluation of expressions happens at two possible times, depending\
    \ on\n   the sampling method (delta or absolute) used to evaluate the\n   expression.\n\
    \   If there are no delta or change values in an expression, the\n   evaluation\
    \ occurs on demand, i.e. when a requester attempts to read\n   the value of the\
    \ expression.  In this case all requesters get a\n   freshly calculated value.\n\
    \   For expressions with delta or change values, evaluation goes on\n   continuously,\
    \ every sample period.  In this case requesters get the\n   value as of the last\
    \ sample period.  For any given sample period of a\n   given expression, only\
    \ those instances exist that provided a full set\n   of object values.  It may\
    \ be possible that a delta expression which\n   was evaluated successfully for\
    \ one sample period may not be\n   successfully evaluated in the next sample period.\
    \  This may, for\n   example, be due to missing instances for some or all of the\
    \ objects\n   in the expression.  In such cases, the value from the previous sample\n\
    \   period (with the successful evaluation) must not be carried forward\n   to\
    \ the next sample period (with the failed evaluation).\n"
- title: 2.3.4.  Value Identification
  contents:
  - "2.3.4.  Value Identification\n   Values resulting from expression evaluation\
    \ are identified with a\n   combination of the object identifier (OID) for the\
    \ data type from\n   expValueTable (such as expValueCounter32Val), the expression\
    \ owner,\n   the expression name, and an OID fragment.\n   The OID fragment is\
    \ not an entire OID beginning with iso.dod.org\n   (1.3.6).  Rather it begins\
    \ with 0.0.  The remainder is either another\n   0 when there is no wildcarding\
    \ or the instance that satisfied the\n   wildcard if there is wildcarding.\n"
- title: 2.4.  Subsets
  contents:
  - "2.4.  Subsets\n   To pare down the Expression MIBs complexity and use of resources\
    \ an\n   implementor can leave out various parts.\n"
- title: 2.4.1.  No Wildcards
  contents:
  - "2.4.1.  No Wildcards\n   Leaving out wildcarding significantly reduces the complexity\
    \ of\n   retrieving values to evaluate expressions and the processing required\n\
    \   to do so.  Such an implementation would allow expressions made up of\n   individual\
    \ MIB objects but would not be suitable for expressions\n   applied across large\
    \ tables as each instance in the table would\n   require a separate expression\
    \ definition.\n   Furthermore it would not be suitable for tables with arbitrary,\n\
    \   dynamic instances, as expressions definitions could not predict what\n   instance\
    \ values to use.\n   An implementation without wildcards might be useful for a\
    \ self-\n   managing system with small tables or few dynamic instances, or one\n\
    \   that can do calculations only for a few key objects.\n"
- title: 2.4.2.  No Deltas
  contents:
  - "2.4.2.  No Deltas\n   Leaving out delta processing significantly reduces state\
    \ that must be\n   kept and the burden of ongoing processing even when no one\
    \ is looking\n   at the results.  Unfortunately it also makes expressions on counters\n\
    \   unusable, as counters have meaning only as deltas.\n   An implementation without\
    \ deltas might be useful for a severely\n   limited, self-managing system that\
    \ has no need for expressions or\n   events on counters.  Although conceivable,\
    \ such systems would be\n   rare.\n"
- title: 2.5.  Structure
  contents:
  - "2.5.  Structure\n   The MIB has the following sections:\n       o   Resource\
    \ -- management of the MIB's use of system resources.\n       o   Definition --\
    \ definition of expressions.\n       o   Value -- values of evaluated expressions.\n"
- title: 2.5.1.  Resource
  contents:
  - "2.5.1.  Resource\n   The resource section has objects to manage resource usage\
    \ by\n   wildcarded delta expressions, a potential major consumer of CPU and\n\
    \   memory.\n"
- title: 2.5.2.  Definition
  contents:
  - "2.5.2.  Definition\n   The definition section contains the tables that define\
    \ expressions.\n   The expression table, indexed by expression owner and expression\n\
    \   name, contains those parameters that apply to the entire expression,\n   such\
    \ as the expression itself, the data type of the result, and the\n   sampling\
    \ interval if it contains delta or change values.\n   The object table, indexed\
    \ by expression owner, expression name and\n   object index within each expression,\
    \ contains the parameters that\n   apply to the individual objects that go into\
    \ the expression,\n   including the object identifier, sample type, discontinuity\n\
    \   indicator, and such.\n"
- title: 2.5.3.  Value
  contents:
  - "2.5.3.  Value\n   The value section contains the values of evaluated expressions.\n\
    \   The value table, indexed by expression owner, expression name and\n   instance\
    \ fragment contains a \"discriminated union\" of evaluated\n   expression results.\
    \  For a given expression only one of the columns\n   is instantiated, depending\
    \ on the result data type for the\n   expression.  The instance fragment is a\
    \ constant or the final section\n   of the object identifier that filled in a\
    \ wildcard.\n"
- title: 2.6.  Examples
  contents:
  - "2.6.  Examples\n   The examples refer to tables and objects defined below in\
    \ the MIB\n   itself.  They may well make more sense after reading those\n   definitions.\n"
- title: 2.6.1.  Wildcarding
  contents:
  - "2.6.1.  Wildcarding\n   An expression may use wildcarded MIB objects that result\
    \ in multiple\n   values for the expression.  To specify a wildcarded MIB object\
    \ a\n   management application leaves off part or all of the instance portion\n\
    \   of the object identifier, and sets expObjectWildcard to true(1) for\n   that\
    \ object.  For our example we'll use a counter of total blessings\n   from a table\
    \ of people.  Another table, indexed by town and person\n   has blessings just\
    \ from that town.\n   So the index clauses are:\n       personEntry OBJECT-TYPE\n\
    \       ...\n       INDEX { personIndex }\n   And:\n       townPersonEntry OBJECT-TYPE\n\
    \       ...\n       INDEX { townIndex, personIndex }\n   In our friendly application\
    \ we may have entered our expression as:\n       100 * townPersonBlessings.976.*\
    \ / personBlessings.*\n   What goes in expExpression is:\n       100*$1/$2\n \
    \  For example purposes we'll use some slightly far-fetched OIDs.  The\n   People\
    \ MIB is 1.3.6.1.99.7 and the Town MIB is 1.3.6.1.99.11, so for\n   our two counters\
    \ the OIDs are:\n       personBlessings      1.3.6.1.99.7.1.3.1.4\n       townPersonBlessings\
    \       1.3.6.1.99.11.1.2.1.9\n   The rule for wildcards is that all the wildcarded\
    \ parts have to match\n   exactly.  In this case that means we have to hardwire\
    \ the town and\n   only the personIndex can be wildcarded.  So our values for\n\
    \   expObjectID are:\n       1.3.6.1.99.7.1.3.1.4\n       1.3.6.1.99.11.1.2.1.9.976\n\
    \   We're hardwired to townIndex 976 and personIndex is allowed to vary.\n   The\
    \ value of expExpressionPrefix can be either of those two counter\n   OIDs (including\
    \ the instance fragment in the second case), since\n   either of them takes you\
    \ to a MIB definition where you can look at\n   the INDEX clause and figure out\
    \ what's been left off.  What's been\n   left off doesn't have to work out to\
    \ be the same object, but it does\n   have to work out to be the same values (semantics)\
    \ for the result to\n   make sense.  Note that the managed system can not typically\
    \ check\n   such semantics and if given nonsense will return nonsense.\n   If\
    \ we have people numbered 6, 19, and 42 in town number 976, the\n   successive\
    \ values of expValueInstance will be:\n       0.0.6\n       0.0.19\n       0.0.42\n\
    \   So there will be three values in expValueTable, with those OIDs as\n   the\
    \ expValueInstance part of their indexing.\n"
- title: 2.6.2.  Calculation and Conditional
  contents:
  - "2.6.2.  Calculation and Conditional\n   The following formula for line utilization\
    \ of a half-duplex link is\n   adapted from [PracPersp].\n    utilization = (ifInOctets\
    \ + ifOutOctets) * 800 / seconds / ifSpeed\n   The expression results in the percentage\
    \ line utilization per second.\n   The total octets are multiplied by 8 to get\
    \ bits and 100 to scale up\n   the percentage as an integer.\n   The following\
    \ Expression MIB object values implement this as an\n   expression for all ifIndexes\
    \ that directly represent actual hardware.\n   Since the octet counters are Counter32\
    \ values, they must be delta\n   sampled to be meaningful.  The sample period\
    \ is 6 seconds but for\n   accuracy and independence is calculated as a delta\
    \ of sysUpTime.\n   The expObjectTable entry for ifInOctets has an expObjectConditional\n\
    \   that checks for being a hardware interface.  Only one object in the\n   expression\
    \ needs that check associated, since it applies to the whole\n   expression. \
    \ Since ifConnectorPresent is a TruthValue with values of\n   1 or 2 rather than\
    \ 0 and non-zero, it must also be in an expression\n   rather than used directly\
    \ for the conditional.\n   The interface-specific discontinuity indicator is supplied\
    \ only for\n   ifInOctets since invalidating that sample will invalidate an attempt\n\
    \   at evaluation, effectively invalidating ifOutOctets as well\n   (correctly,\
    \ because it has the same indicator).\n   For notational clarity, in the rest\
    \ of this document, a string in\n   quotes as part of the object instance indicates\
    \ the value that would\n   actually be one subidentifier per byte.  The objects\
    \ all belong to\n   owner \"me\".\n   Also for clarity OIDs are expressed as the\
    \ object descriptor and\n   instance.  In fact they must be supplied numerically,\
    \ with all\n   subidentifiers in place before the part for the particular object\
    \ and\n   instance.\n   What the user would set in expExpressionTable:\n   expExpression.2.\"\
    me\".4.\"hard\"      = \"$1==1\"\n   expExpressionValueType.2.\"me\".4.\"hard\"\
    \  = unsigned32\n   expExpressionRowStatus.2.\"me\"4.\"hard\"   = 'active'\n \
    \  expExpression.2.\"me\".4.\"util\"      = \"($1+$2)*800/$4/$3\"\n   expExpressionValueType.2.\"\
    me\".4.\"util\"  = integer32\n   expExpressionDeltaInterval.2.\"me\".4.\"util\"\
    \   = 6\n   expExpressionRowStatus.2.\"me\"4.\"util\"   = 'active'\n   What the\
    \ user would set in expObjectTable:\n   expObjectID.2.\"me\".4.\"hard\".1    \
    \  = ifConnectorPresent\n   expObjectWildcard.2.\"me\".4.\"hard\".1     = 'true'\n\
    \   expObjectSampleType.2.\"me\".4.\"hard\".1   = 'absoluteValue'\n   expObjectRowStatus.2.\"\
    me\".4.\"hard\".1    = 'active'\n   expObjectID.2.\"me\".4.\"util\".1      = ifInOctets\n\
    \   expObjectWildcard.2.\"me\".4.\"util\".1     = 'true'\n   expObjectSampleType.2.\"\
    me\".4.\"util\".1   = 'deltaValue'\n   expObjectConditional.2.\"me\".4.\"util\"\
    .1  =\n   expValueUnsigned32Val.4.\"hard\".0.0\n   expObjectConditionalWildcard.2.\"\
    me\".4.\"util\".1    = 'true'\n   expObjectDiscontinuityID.2.\"me\".4.\"util\"\
    .1   =\n   ifCounterDiscontinuityTime\n   expObjectDiscontinuityIDWildcard.2.\"\
    me\".4.\"util\".1     = 'true'\n   expObjectRowStatus.2.\"me\".4.\"util\".1  \
    \  = 'active'\n   expObjectID.2.\"me\".4.\"util\".2      = ifOutOctets\n   expObjectWildcard.2.\"\
    me\".4.\"util\".2     = 'true'\n   expObjectSampleType.2.\"me\".4.\"util\".2 \
    \  = 'deltaValue'\n   expObjectRowStatus.2.\"me\".4.\"util\".2    = 'active'\n\
    \   expObjectID.2.\"me\".4.\"util\".3      = ifSpeed\n   expObjectWildcard.2.\"\
    me\".4.\"util\".3     = 'true'\n   expObjectSampleType.2.\"me\".4.\"util\".3 \
    \  = 'absoluteValue'\n   expObjectRowStatus.2.\"me\".4.\"util\".3    = 'active'\n\
    \   expObjectID.2.\"me\".4.\"util\".4      = sysUpTime.0\n   expObjectWildcard.2.\"\
    me\".4.\"util\".4     = 'false'\n   expObjectSampleType.2.\"me\".4.\"util\".4\
    \   = 'deltaValue'\n   expObjectRowStatus.2.\"me\".4.\"util\".4    = 'active'\n\
    \   These settings will result in populating one column of expValueTable:\n  \
    \ expValueInteger32Val.2.\"me\".4.\"util\".0.0.?\n   The subidentifier represented\
    \ by \"?\" above represents one\n   subidentifier that takes on a value of ifIndex\
    \ and identifies a row\n   for each ifIndex value where ifConnectorPresent is\
    \ 'true' and the\n   interface was present for two samples to provide a delta.\n\
    \   This value could in turn be used as an event threshold [RFC2981] to\n   watch\
    \ for overutilization of all hardware network connections.\n"
- title: 3.  Definitions
  contents:
  - '3.  Definitions

    '
- title: DISMAN-EXPRESSION-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'DISMAN-EXPRESSION-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE,\n    Integer32, Gauge32, Unsigned32,\n\
    \    Counter32, Counter64, IpAddress,\n    TimeTicks, mib-2, zeroDotZero  FROM\
    \ SNMPv2-SMI\n    RowStatus, TruthValue, TimeStamp    FROM SNMPv2-TC\n    sysUpTime\
    \                 FROM SNMPv2-MIB\n    SnmpAdminString           FROM SNMP-FRAMEWORK-MIB\n\
    \    MODULE-COMPLIANCE, OBJECT-GROUP     FROM SNMPv2-CONF;\n"
- title: dismanExpressionMIB MODULE-IDENTITY
  contents:
  - "dismanExpressionMIB MODULE-IDENTITY\n    LAST-UPDATED \"200010160000Z\" -- 16\
    \ October 2000\n    ORGANIZATION \"IETF Distributed Management Working Group\"\
    \n    CONTACT-INFO \"Ramanathan Kavasseri\n                  Cisco Systems, Inc.\n\
    \                  170 West Tasman Drive,\n                  San Jose CA 95134-1706.\n\
    \                  Phone: +1 408 527 2446\n                  Email: ramk@cisco.com\"\
    \n    DESCRIPTION\n     \"The MIB module for defining expressions of MIB objects\
    \ for\n     management purposes.\"\n"
- title: -- Revision History
  contents:
  - "-- Revision History\n       REVISION     \"200010160000Z\" -- 16 October 2000\n\
    \       DESCRIPTION  \"This is the initial version of this MIB.\n            \
    \        Published as RFC 2982\"\n    ::= { mib-2 90 }\n"
- title: dismanExpressionMIBObjects OBJECT IDENTIFIER ::=
  contents:
  - "dismanExpressionMIBObjects OBJECT IDENTIFIER ::=\n                          \
    \                  { dismanExpressionMIB 1 }\n"
- title: expResource    OBJECT IDENTIFIER ::= { dismanExpressionMIBObjects 1 }
  contents:
  - 'expResource    OBJECT IDENTIFIER ::= { dismanExpressionMIBObjects 1 }

    '
- title: expDefine OBJECT IDENTIFIER ::= { dismanExpressionMIBObjects 2 }
  contents:
  - 'expDefine OBJECT IDENTIFIER ::= { dismanExpressionMIBObjects 2 }

    '
- title: expValue  OBJECT IDENTIFIER ::= { dismanExpressionMIBObjects 3 }
  contents:
  - 'expValue  OBJECT IDENTIFIER ::= { dismanExpressionMIBObjects 3 }

    '
- title: --
  contents:
  - '--

    '
- title: -- Resource Control
  contents:
  - '-- Resource Control

    '
- title: --
  contents:
  - '--

    '
- title: expResourceDeltaMinimum OBJECT-TYPE
  contents:
  - "expResourceDeltaMinimum OBJECT-TYPE\n    SYNTAX      Integer32 (-1 | 1..600)\n\
    \    UNITS       \"seconds\"\n    MAX-ACCESS  read-write\n    STATUS      current\n\
    \    DESCRIPTION\n     \"The minimum expExpressionDeltaInterval this system will\n\
    \     accept.  A system may use the larger values of this minimum to\n     lessen\
    \ the impact of constantly computing deltas.  For larger\n     delta sampling\
    \ intervals the system samples less often and\n     suffers less overhead.  This\
    \ object provides a way to enforce\n     such lower overhead for all expressions\
    \ created after it is\n     set.\n     The value -1 indicates that expResourceDeltaMinimum\
    \ is\n     irrelevant as the system will not accept 'deltaValue' as a\n     value\
    \ for expObjectSampleType.\n     Unless explicitly resource limited, a system's\
    \ value for\n     this object should be 1, allowing as small as a 1 second\n \
    \    interval for ongoing delta sampling.\n     Changing this value will not invalidate\
    \ an existing setting\n     of expObjectSampleType.\"\n    ::= { expResource 1\
    \ }\n"
- title: expResourceDeltaWildcardInstanceMaximum OBJECT-TYPE
  contents:
  - "expResourceDeltaWildcardInstanceMaximum OBJECT-TYPE\n    SYNTAX      Unsigned32\n\
    \    UNITS       \"instances\"\n    MAX-ACCESS  read-write\n    STATUS      current\n\
    \    DESCRIPTION\n     \"For every instance of a deltaValue object, one dynamic\
    \ instance\n     entry is needed for holding the instance value from the previous\n\
    \     sample, i.e. to maintain state.\n     This object limits maximum number\
    \ of dynamic instance entries\n     this system will support for wildcarded delta\
    \ objects in\n     expressions. For a given delta expression, the number of\n\
    \     dynamic instances is the number of values that meet all criteria\n     to\
    \ exist times the number of delta values in the expression.\n     A value of 0\
    \ indicates no preset limit, that is, the limit\n     is dynamic based on system\
    \ operation and resources.\n     Unless explicitly resource limited, a system's\
    \ value for\n     this object should be 0.\n     Changing this value will not\
    \ eliminate or inhibit existing delta\n     wildcard instance objects but will\
    \ prevent the creation of more\n     such objects.\n     An attempt to allocate\
    \ beyond the limit results in expErrorCode\n     being tooManyWildcardValues for\
    \ that evaluation attempt.\"\n    ::= { expResource 2 }\n"
- title: expResourceDeltaWildcardInstances OBJECT-TYPE
  contents:
  - "expResourceDeltaWildcardInstances OBJECT-TYPE\n    SYNTAX      Gauge32\n    UNITS\
    \       \"instances\"\n    MAX-ACCESS  read-only\n    STATUS      current\n  \
    \  DESCRIPTION\n     \"The number of currently active instance entries as\n  \
    \   defined for expResourceDeltaWildcardInstanceMaximum.\"\n    ::= { expResource\
    \ 3 }\n"
- title: expResourceDeltaWildcardInstancesHigh OBJECT-TYPE
  contents:
  - "expResourceDeltaWildcardInstancesHigh OBJECT-TYPE\n    SYNTAX      Gauge32\n\
    \    UNITS       \"instances\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n     \"The highest value of expResourceDeltaWildcardInstances\n\
    \     that has occurred since initialization of the managed\n     system.\"\n\
    \    ::= { expResource 4 }\n"
- title: expResourceDeltaWildcardInstanceResourceLacks OBJECT-TYPE
  contents:
  - "expResourceDeltaWildcardInstanceResourceLacks OBJECT-TYPE\n    SYNTAX      Counter32\n\
    \    UNITS       \"instances\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n     \"The number of times this system could not evaluate an\n\
    \     expression because that would have created a value instance in\n     excess\
    \ of expResourceDeltaWildcardInstanceMaximum.\"\n    ::= { expResource 5 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Definition
  contents:
  - '-- Definition

    '
- title: --
  contents:
  - '--

    '
- title: -- Expression Definition Table
  contents:
  - '-- Expression Definition Table

    '
- title: --
  contents:
  - '--

    '
- title: expExpressionTable OBJECT-TYPE
  contents:
  - "expExpressionTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF ExpExpressionEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \   \"A table of expression definitions.\"\n    ::= { expDefine 1 }\n"
- title: expExpressionEntry OBJECT-TYPE
  contents:
  - "expExpressionEntry OBJECT-TYPE\n    SYNTAX      ExpExpressionEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \"Information\
    \ about a single expression.  New expressions\n     can be created using expExpressionRowStatus.\n\
    \     To create an expression first create the named entry in this\n     table.\
    \  Then use expExpressionName to populate expObjectTable.\n     For expression\
    \ evaluation to succeed all related entries in\n     expExpressionTable and expObjectTable\
    \ must be 'active'.  If\n     these conditions are not met the corresponding values\
    \ in\n     expValue simply are not instantiated.\n     Deleting an entry deletes\
    \ all related entries in expObjectTable\n     and expErrorTable.\n     Because\
    \ of the relationships among the multiple tables for an\n     expression (expExpressionTable,\
    \ expObjectTable, and\n     expValueTable) and the SNMP rules for independence\
    \ in setting\n     object values, it is necessary to do final error checking when\n\
    \     an expression is evaluated, that is, when one of its instances\n     in\
    \ expValueTable is read or a delta interval expires.  Earlier\n     checking need\
    \ not be done and an implementation may not impose\n     any ordering on the creation\
    \ of objects related to an\n     expression.\n     To maintain security of MIB\
    \ information, when creating a new row in\n     this table, the managed system\
    \ must record the security credentials\n     of the requester.  These security\
    \ credentials are the parameters\n     necessary as inputs to isAccessAllowed\
    \ from the Architecture for\n     Describing SNMP Management Frameworks.  When\
    \ obtaining the objects\n     that make up the expression, the system must (conceptually)\
    \ use\n     isAccessAllowed to ensure that it does not violate security.\n   \
    \  The evaluation of the expression takes place under the\n     security credentials\
    \ of the creator of its expExpressionEntry.\n     Values of read-write objects\
    \ in this table may be changed\n     at any time.\"\n    INDEX       { expExpressionOwner,\
    \ expExpressionName }\n    ::= { expExpressionTable 1 }\n"
- title: ExpExpressionEntry ::= SEQUENCE {
  contents:
  - "ExpExpressionEntry ::= SEQUENCE {\n    expExpressionOwner           SnmpAdminString,\n\
    \    expExpressionName             SnmpAdminString,\n    expExpression       \
    \         OCTET STRING,\n    expExpressionValueType       INTEGER,\n    expExpressionComment\
    \         SnmpAdminString,\n    expExpressionDeltaInterval   Integer32,\n    expExpressionPrefix\
    \           OBJECT IDENTIFIER,\n    expExpressionErrors          Counter32,\n\
    \    expExpressionEntryStatus     RowStatus\n"
- title: '}'
  contents:
  - '}

    '
- title: expExpressionOwner OBJECT-TYPE
  contents:
  - "expExpressionOwner OBJECT-TYPE\n   SYNTAX      SnmpAdminString (SIZE(0..32))\n\
    \   MAX-ACCESS  not-accessible\n   STATUS      current\n   DESCRIPTION\n     \"\
    The owner of this entry. The exact semantics of this\n     string are subject\
    \ to the security policy defined by the\n     security administrator.\"\n    ::=\
    \ { expExpressionEntry 1 }\n"
- title: expExpressionName OBJECT-TYPE
  contents:
  - "expExpressionName OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE (1..32))\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \   \"The name of the expression.  This is locally unique, within\n     the scope\
    \ of an expExpressionOwner.\"\n    ::= { expExpressionEntry 2 }\n"
- title: expExpression OBJECT-TYPE
  contents:
  - "expExpression OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (1..1024))\n  \
    \  MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \"\
    The expression to be evaluated.  This object is the same\n     as a DisplayString\
    \ (RFC 1903) except for its maximum length.\n     Except for the variable names\
    \ the expression is in ANSI C\n     syntax.  Only the subset of ANSI C operators\
    \ and functions\n     listed here is allowed.\n     Variables are expressed as\
    \ a dollar sign ('$') and an\n     integer that corresponds to an expObjectIndex.\
    \  An\n     example of a valid expression is:\n          ($1-$5)*100\n     Expressions\
    \ must not be recursive, that is although an expression\n     may use the results\
    \ of another expression, it must not contain\n     any variable that is directly\
    \ or indirectly a result of its own\n     evaluation. The managed system must\
    \ check for recursive\n     expressions.\n     The only allowed operators are:\n\
    \          ( )\n          - (unary)\n          + - * / %\n          & | ^ << >>\
    \ ~\n          ! && || == != > >= < <=\n     Note the parentheses are included\
    \ for parenthesizing the\n     expression, not for casting data types.\n     The\
    \ only constant types defined are:\n          int (32-bit signed)\n          long\
    \ (64-bit signed)\n          unsigned int\n          unsigned long\n         \
    \ hexadecimal\n          character\n          string\n          oid\n     The\
    \ default type for a positive integer is int unless it is too\n     large in which\
    \ case it is long.\n     All but oid are as defined for ANSI C.  Note that a\n\
    \     hexadecimal constant may end up as a scalar or an array of\n     8-bit integers.\
    \  A string constant is enclosed in double\n     quotes and may contain back-slashed\
    \ individual characters\n     as in ANSI C.\n     An oid constant comprises 32-bit,\
    \ unsigned integers and at\n     least one period, for example:\n          0.\n\
    \          .0\n          1.3.6.1\n     No additional leading or trailing subidentifiers\
    \ are automatically\n     added to an OID constant.  The constant is taken as\
    \ expressed.\n     Integer-typed objects are treated as 32- or 64-bit, signed\n\
    \     or unsigned integers, as appropriate.  The results of\n     mixing them\
    \ are as for ANSI C, including the type of the\n     result.  Note that a 32-bit\
    \ value is thus promoted to 64 bits\n     only in an operation with a 64-bit value.\
    \  There is no\n     provision for larger values to handle overflow.\n     Relative\
    \ to SNMP data types, a resulting value becomes\n     unsigned when calculating\
    \ it uses any unsigned value,\n     including a counter.  To force the final value\
    \ to be of\n     data type counter the expression must explicitly use the\n  \
    \   counter32() or counter64() function (defined below).\n     OCTET STRINGS and\
    \ OBJECT IDENTIFIERs are treated as\n     one-dimensioned arrays of unsigned 8-bit\
    \ integers and\n     unsigned 32-bit integers, respectively.\n     IpAddresses\
    \ are treated as 32-bit, unsigned integers in\n     network byte order, that is,\
    \ the hex version of 255.0.0.0 is\n     0xff000000.\n     Conditional expressions\
    \ result in a 32-bit, unsigned integer\n     of value 0 for false or 1 for true.\
    \ When an arbitrary value\n     is used as a boolean 0 is false and non-zero is\
    \ true.\n     Rules for the resulting data type from an operation, based on\n\
    \     the operator:\n     For << and >> the result is the same as the left hand\
    \ operand.\n     For &&, ||, ==, !=, <, <=, >, and >= the result is always\n \
    \    Unsigned32.\n     For unary - the result is always Integer32.\n     For +,\
    \ -, *, /, %, &, |, and ^ the result is promoted according\n     to the following\
    \ rules, in order from most to least preferred:\n          If left hand and right\
    \ hand operands are the same type,\n          use that.\n          If either side\
    \ is Counter64, use that.\n          If either side is IpAddress, use that.\n\
    \          If either side is TimeTicks, use that.\n          If either side is\
    \ Counter32, use that.\n          Otherwise use Unsigned32.\n     The following\
    \ rules say what operators apply with what data\n     types.  Any combination\
    \ not explicitly defined does not work.\n     For all operators any of the following\
    \ can be the left hand or\n     right hand operand: Integer32, Counter32, Unsigned32,\
    \ Counter64.\n     The operators +, -, *, /, %, <, <=, >, and >= work with\n \
    \    TimeTicks.\n     The operators &, |, and ^ work with IpAddress.\n     The\
    \ operators << and >> work with IpAddress but only as the\n     left hand operand.\n\
    \     The + operator performs a concatenation of two OCTET STRINGs or\n     two\
    \ OBJECT IDENTIFIERs.\n     The operators &, | perform bitwise operations on OCTET\
    \ STRINGs.\n     If the OCTET STRING happens to be a DisplayString the results\n\
    \     may be meaningless, but the agent system does not check this as\n     some\
    \ such systems do not have this information.\n     The operators << and >> perform\
    \ bitwise operations on OCTET\n     STRINGs appearing as the left hand operand.\n\
    \     The only functions defined are:\n          counter32\n          counter64\n\
    \          arraySection\n          stringBegins\n          stringEnds\n      \
    \    stringContains\n          oidBegins\n          oidEnds\n          oidContains\n\
    \          average\n          maximum\n          minimum\n          sum\n    \
    \      exists\n     The following function definitions indicate their parameters\
    \ by\n     naming the data type of the parameter in the parameter's position\n\
    \     in the parameter list.  The parameter must be of the type indicated\n  \
    \   and generally may be a constant, a MIB object, a function, or an\n     expression.\n\
    \     counter32(integer) - wrapped around an integer value counter32\n     forces\
    \ Counter32 as a data type.\n     counter64(integer) - similar to counter32 except\
    \ that the\n     resulting data type is 'counter64'.\n     arraySection(array,\
    \ integer, integer) - selects a piece of an\n     array (i.e. part of an OCTET\
    \ STRING or OBJECT IDENTIFIER).  The\n     integer arguments are in the range\
    \ 0 to 4,294,967,295.  The\n     first is an initial array index (one-dimensioned)\
    \ and the second\n     is an ending array index.  A value of 0 indicates first\
    \ or last\n     element, respectively.  If the first element is larger than the\n\
    \     array length the result is 0 length.  If the second integer is\n     less\
    \ than or equal to the first, the result is 0 length.  If the\n     second is\
    \ larger than the array length it indicates last\n     element.\n     stringBegins/Ends/Contains(octetString,\
    \ octetString) - looks for\n     the second string (which can be a string constant)\
    \ in the first\n     and returns the one-dimensioned arrayindex where the match\
    \ began.\n     A return value of 0 indicates no match (i.e. boolean false).\n\
    \     oidBegins/Ends/Contains(oid, oid) - looks for the second OID\n     (which\
    \ can be an OID constant) in the first and returns the\n     the one-dimensioned\
    \ index where the match began. A return value\n     of 0 indicates no match (i.e.\
    \ boolean false).\n     average/maximum/minimum(integer) - calculates the average,\n\
    \     minimum, or maximum value of the integer valued object over\n     multiple\
    \ sample times.  If the object disappears for any\n     sample period, the accumulation\
    \ and the resulting value object\n     cease to exist until the object reappears\
    \ at which point the\n     calculation starts over.\n     sum(integerObject*)\
    \ - sums all available values of the\n     wildcarded integer object, resulting\
    \ in an integer scalar.  Must\n     be used with caution as it wraps on overflow\
    \ with no\n     notification.\n     exists(anyTypeObject) - verifies the object\
    \ instance exists. A\n     return value of 0 indicates NoSuchInstance (i.e. boolean\n\
    \     false).\"\n    ::= { expExpressionEntry 3 }\n"
- title: expExpressionValueType OBJECT-TYPE
  contents:
  - "expExpressionValueType OBJECT-TYPE\n    SYNTAX      INTEGER { counter32(1), unsigned32(2),\
    \ timeTicks(3),\n                 integer32(4), ipAddress(5), octetString(6),\n\
    \                 objectId(7), counter64(8) }\n    MAX-ACCESS  read-create\n \
    \   STATUS      current\n    DESCRIPTION\n     \"The type of the expression value.\
    \  One and only one of the\n     value objects in expValueTable will be instantiated\
    \ to match\n     this type.\n     If the result of the expression can not be made\
    \ into this type,\n     an invalidOperandType error will occur.\"\n    DEFVAL\
    \      { counter32 }\n    ::= { expExpressionEntry 4 }\n"
- title: expExpressionComment OBJECT-TYPE
  contents:
  - "expExpressionComment OBJECT-TYPE\n    SYNTAX      SnmpAdminString\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n     \"A comment to\
    \ explain the use or meaning of the expression.\"\n    DEFVAL      { ''H }\n \
    \   ::= { expExpressionEntry 5 }\n"
- title: expExpressionDeltaInterval OBJECT-TYPE
  contents:
  - "expExpressionDeltaInterval OBJECT-TYPE\n    SYNTAX      Integer32 (0..86400)\n\
    \    UNITS       \"seconds\"\n    MAX-ACCESS  read-create\n    STATUS      current\n\
    \    DESCRIPTION\n     \"Sampling interval for objects in this expression with\n\
    \     expObjectSampleType 'deltaValue'.\n     This object has no effect if the\
    \ the expression has no\n     deltaValue objects.\n     A value of 0 indicates\
    \ no automated sampling.  In this case\n     the delta is the difference from\
    \ the last time the expression\n     was evaluated.  Note that this is subject\
    \ to unpredictable\n     delta times in the face of retries or multiple managers.\n\
    \     A value greater than zero is the number of seconds between\n     automated\
    \ samples.\n     Until the delta interval has expired once the delta for the\n\
    \     object is effectively not instantiated and evaluating\n     the expression\
    \ has results as if the object itself were not\n     instantiated.\n     Note\
    \ that delta values potentially consume large amounts of\n     system CPU and\
    \ memory.  Delta state and processing must\n     continue constantly even if the\
    \ expression is not being used.\n     That is, the expression is being evaluated\
    \ every delta interval,\n     even if no application is reading those values.\
    \  For wildcarded\n     objects this can be substantial overhead.\n     Note that\
    \ delta intervals, external expression value sampling\n     intervals and delta\
    \ intervals for expressions within other\n     expressions can have unusual interactions\
    \ as they are impossible\n     to synchronize accurately.  In general one interval\
    \ embedded\n     below another must be enough shorter that the higher sample\n\
    \     sees relatively smooth, predictable behavior.  So, for example,\n     to\
    \ avoid the higher level getting the same sample twice, the\n     lower level\
    \ should sample at least twice as fast as the higher\n     level does.\"\n   \
    \ DEFVAL      { 0 }\n    ::= { expExpressionEntry 6 }\n"
- title: expExpressionPrefix OBJECT-TYPE
  contents:
  - "expExpressionPrefix OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n     \"An object prefix\
    \ to assist an application in determining\n     the instance indexing to use in\
    \ expValueTable, relieving the\n     application of the need to scan the expObjectTable\
    \ to\n     determine such a prefix.\n     See expObjectTable for information on\
    \ wildcarded objects.\n     If the expValueInstance portion of the value OID may\n\
    \     be treated as a scalar (that is, normally, 0) the value of\n     expExpressionPrefix\
    \ is zero length, that is, no OID at all.\n     Note that zero length implies\
    \ a null OID, not the OID 0.0.\n     Otherwise, the value of expExpressionPrefix\
    \ is the expObjectID\n     value of any one of the wildcarded objects for the\
    \ expression.\n     This is sufficient, as the remainder, that is, the instance\n\
    \     fragment relevant to instancing the values, must be the same for\n     all\
    \ wildcarded objects in the expression.\"\n    ::= { expExpressionEntry 7 }\n"
- title: expExpressionErrors OBJECT-TYPE
  contents:
  - "expExpressionErrors OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n     \"The number of errors encountered\
    \ while evaluating this\n     expression.\n     Note that an object in the expression\
    \ not being accessible,\n     is not considered an error. An example of an inaccessible\n\
    \     object is when the object is excluded from the view of the\n     user whose\
    \ security credentials are used in the expression\n     evaluation. In such cases,\
    \ it is a legitimate condition\n     that causes the corresponding expression\
    \ value not to be\n     instantiated.\"\n    ::= { expExpressionEntry 8 }\n"
- title: expExpressionEntryStatus OBJECT-TYPE
  contents:
  - "expExpressionEntryStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n     \"The control that\
    \ allows creation and deletion of entries.\"\n    ::= { expExpressionEntry 9 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Expression Error Table
  contents:
  - '-- Expression Error Table

    '
- title: --
  contents:
  - '--

    '
- title: expErrorTable OBJECT-TYPE
  contents:
  - "expErrorTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF ExpErrorEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \"A table of\
    \ expression errors.\"\n    ::= { expDefine 2 }\n"
- title: expErrorEntry OBJECT-TYPE
  contents:
  - "expErrorEntry OBJECT-TYPE\n    SYNTAX      ExpErrorEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n     \"Information about errors in\
    \ processing an expression.\n     Entries appear in this table only when there\
    \ is a matching\n     expExpressionEntry and then only when there has been an\n\
    \     error for that expression as reflected by the error codes\n     defined\
    \ for expErrorCode.\"\n    INDEX       { expExpressionOwner, expExpressionName\
    \ }\n    ::= { expErrorTable 1 }\n"
- title: ExpErrorEntry ::= SEQUENCE {
  contents:
  - "ExpErrorEntry ::= SEQUENCE {\n    expErrorTime       TimeStamp,\n    expErrorIndex\
    \      Integer32,\n    expErrorCode       INTEGER,\n    expErrorInstance   OBJECT\
    \ IDENTIFIER\n"
- title: '}'
  contents:
  - '}

    '
- title: expErrorTime OBJECT-TYPE
  contents:
  - "expErrorTime OBJECT-TYPE\n    SYNTAX      TimeStamp\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n     \"The value of sysUpTime the last\
    \ time an error caused a\n     failure to evaluate this expression.\"\n    ::=\
    \ { expErrorEntry 1 }\n"
- title: expErrorIndex OBJECT-TYPE
  contents:
  - "expErrorIndex OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n     \"The one-dimensioned character\
    \ array index into\n     expExpression for where the error occurred.  The value\n\
    \     zero indicates irrelevance.\"\n    ::= { expErrorEntry 2 }\n"
- title: expErrorCode OBJECT-TYPE
  contents:
  - "expErrorCode OBJECT-TYPE\n    SYNTAX      INTEGER {\n          invalidSyntax(1),\n\
    \          undefinedObjectIndex(2),\n          unrecognizedOperator(3),\n    \
    \      unrecognizedFunction(4),\n          invalidOperandType(5),\n          unmatchedParenthesis(6),\n\
    \          tooManyWildcardValues(7),\n          recursion(8),\n          deltaTooShort(9),\n\
    \          resourceUnavailable(10),\n          divideByZero(11)\n          }\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n     \"\
    The error that occurred.  In the following explanations the\n     expected timing\
    \ of the error is in parentheses.  'S' means\n     the error occurs on a Set request.\
    \  'E' means the error\n     occurs on the attempt to evaluate the expression\
    \ either due to\n     Get from expValueTable or in ongoing delta processing.\n\
    \     invalidSyntax       the value sent for expExpression is not\n          \
    \          valid Expression MIB expression syntax\n                    (S)\n \
    \    undefinedObjectIndex     an object reference ($n) in\n                  \
    \  expExpression does not have a matching\n                    instance in expObjectTable\
    \ (E)\n     unrecognizedOperator     the value sent for expExpression held an\n\
    \                    unrecognized operator (S)\n     unrecognizedFunction    \
    \ the value sent for expExpression held an\n                    unrecognized function\
    \ name (S)\n     invalidOperandType  an operand in expExpression is not the\n\
    \                    right type for the associated operator\n                \
    \    or result (SE)\n     unmatchedParenthesis     the value sent for expExpression\
    \ is not\n                    correctly parenthesized (S)\n     tooManyWildcardValues\
    \    evaluating the expression exceeded the\n                    limit set by\n\
    \                    expResourceDeltaWildcardInstanceMaximum\n               \
    \     (E)\n     recursion      through some chain of embedded\n              \
    \      expressions the expression invokes itself\n                    (E)\n  \
    \   deltaTooShort       the delta for the next evaluation passed\n           \
    \         before the system could evaluate the\n                    present sample\
    \ (E)\n     resourceUnavailable some resource, typically dynamic memory,\n   \
    \                 was unavailable (SE)\n     divideByZero        an attempt to\
    \ divide by zero occurred\n                    (E)\n     For the errors that occur\
    \ when the attempt is made to set\n     expExpression Set request fails with the\
    \ SNMP error code\n     'wrongValue'.  Such failures refer to the most recent\
    \ failure to\n     Set expExpression, not to the present value of expExpression\n\
    \     which must be either unset or syntactically correct.\n     Errors that occur\
    \ during evaluation for a Get* operation return\n     the SNMP error code 'genErr'\
    \ except for 'tooManyWildcardValues'\n     and 'resourceUnavailable' which return\
    \ the SNMP error code\n     'resourceUnavailable'.\"\n    ::= { expErrorEntry\
    \ 3 }\n"
- title: expErrorInstance OBJECT-TYPE
  contents:
  - "expErrorInstance OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n     \"The expValueInstance\
    \ being evaluated when the error\n     occurred.  A zero-length indicates irrelevance.\"\
    \n    ::= { expErrorEntry 4 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Object Table
  contents:
  - '-- Object Table

    '
- title: --
  contents:
  - '--

    '
- title: expObjectTable OBJECT-TYPE
  contents:
  - "expObjectTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF ExpObjectEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \"A table of\
    \ object definitions for each expExpression.\n     Wildcarding instance IDs:\n\
    \     It is legal to omit all or part of the instance portion for\n     some or\
    \ all of the objects in an expression. (See the\n     DESCRIPTION of expObjectID\
    \ for details.  However, note that\n     if more than one object in the same expression\
    \ is wildcarded\n     in this way, they all must be objects where that portion\
    \ of\n     the instance is the same.  In other words, all objects may be\n   \
    \  in the same SEQUENCE or in different SEQUENCEs but with the\n     same semantic\
    \ index value (e.g., a value of ifIndex)\n     for the wildcarded portion.\"\n\
    \    ::= { expDefine 3 }\n"
- title: expObjectEntry OBJECT-TYPE
  contents:
  - "expObjectEntry OBJECT-TYPE\n    SYNTAX      ExpObjectEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n     \"Information about an object.\
    \  An application uses\n     expObjectEntryStatus to create entries in this table\
    \ while\n     in the process of defining an expression.\n     Values of read-create\
    \ objects in this table may be\n     changed at any time.\"\n    INDEX       {\
    \ expExpressionOwner, expExpressionName, expObjectIndex }\n    ::= { expObjectTable\
    \ 1 }\n"
- title: ExpObjectEntry ::= SEQUENCE {
  contents:
  - "ExpObjectEntry ::= SEQUENCE {\n    expObjectIndex                     Unsigned32,\n\
    \    expObjectID                        OBJECT IDENTIFIER,\n    expObjectIDWildcard\
    \                TruthValue,\n    expObjectSampleType                INTEGER,\n\
    \    expObjectDeltaDiscontinuityID      OBJECT IDENTIFIER,\n    expObjectDiscontinuityIDWildcard\
    \   TruthValue,\n    expObjectDiscontinuityIDType       INTEGER,\n    expObjectConditional\
    \               OBJECT IDENTIFIER,\n    expObjectConditionalWildcard       TruthValue,\n\
    \    expObjectEntryStatus               RowStatus\n"
- title: '}'
  contents:
  - '}

    '
- title: expObjectIndex OBJECT-TYPE
  contents:
  - "expObjectIndex OBJECT-TYPE\n    SYNTAX      Unsigned32 (1..4294967295)\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \"Within an\
    \ expression, a unique, numeric identification for an\n     object.  Prefixed\
    \ with a dollar sign ('$') this is used to\n     reference the object in the corresponding\
    \ expExpression.\"\n    ::= { expObjectEntry 1 }\n"
- title: expObjectID OBJECT-TYPE
  contents:
  - "expObjectID OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS  read-create\n\
    \    STATUS      current\n    DESCRIPTION\n     \"The OBJECT IDENTIFIER (OID)\
    \ of this object.  The OID may be\n     fully qualified, meaning it includes a\
    \ complete instance\n     identifier part (e.g., ifInOctets.1 or sysUpTime.0),\
    \ or it\n     may not be fully qualified, meaning it may lack all or part\n  \
    \   of the instance identifier.  If the expObjectID is not fully\n     qualified,\
    \ then expObjectWildcard must be set to true(1).\n     The value of the expression\
    \ will be multiple\n     values, as if done for a GetNext sweep of the object.\n\
    \     An object here may itself be the result of an expression but\n     recursion\
    \ is not allowed.\n     NOTE:  The simplest implementations of this MIB may not\
    \ allow\n     wildcards.\"\n    ::= { expObjectEntry 2 }\n"
- title: expObjectIDWildcard  OBJECT-TYPE
  contents:
  - "expObjectIDWildcard  OBJECT-TYPE\n    SYNTAX      TruthValue\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n        \"A true value\
    \ indicates the expObjecID of this row is a wildcard\n        object. False indicates\
    \ that expObjectID is fully instanced.\n        If all expObjectWildcard values\
    \ for a given expression are FALSE,\n        expExpressionPrefix will reflect\
    \ a scalar object (i.e. will\n        be 0.0).\n        NOTE:  The simplest implementations\
    \ of this MIB may not allow\n        wildcards.\"\n    DEFVAL      { false }\n\
    \    ::= { expObjectEntry 3 }\n"
- title: expObjectSampleType OBJECT-TYPE
  contents:
  - "expObjectSampleType OBJECT-TYPE\n    SYNTAX      INTEGER { absoluteValue(1),\
    \ deltaValue(2),\n                          changedValue(3) }\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n     \"The method of\
    \ sampling the selected variable.\n     An 'absoluteValue' is simply the present\
    \ value of the object.\n     A 'deltaValue' is the present value minus the previous\
    \ value,\n     which was sampled expExpressionDeltaInterval seconds ago.\n   \
    \  This is intended primarily for use with SNMP counters, which are\n     meaningless\
    \ as an 'absoluteValue', but may be used with any\n     integer-based value.\n\
    \     A 'changedValue' is a boolean for whether the present value is\n     different\
    \ from the previous value.  It is applicable to any data\n     type and results\
    \ in an Unsigned32 with value 1 if the object's\n     value is changed and 0 if\
    \ not.  In all other respects it is as a\n     'deltaValue' and all statements\
    \ and operation regarding delta\n     values apply to changed values.\n     When\
    \ an expression contains both delta and absolute values\n     the absolute values\
    \ are obtained at the end of the delta\n     period.\"\n    DEFVAL      { absoluteValue\
    \ }\n    ::= { expObjectEntry 4 }\n"
- title: sysUpTimeInstance OBJECT IDENTIFIER ::= { sysUpTime 0 }
  contents:
  - 'sysUpTimeInstance OBJECT IDENTIFIER ::= { sysUpTime 0 }

    '
- title: expObjectDeltaDiscontinuityID OBJECT-TYPE
  contents:
  - "expObjectDeltaDiscontinuityID OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \"\
    The OBJECT IDENTIFIER (OID) of a TimeTicks, TimeStamp, or\n     DateAndTime object\
    \ that indicates a discontinuity in the value\n     at expObjectID.\n     This\
    \ object is instantiated only if expObjectSampleType is\n     'deltaValue' or\
    \ 'changedValue'.\n     The OID may be for a leaf object (e.g. sysUpTime.0) or\
    \ may\n     be wildcarded to match expObjectID.\n     This object supports normal\
    \ checking for a discontinuity in a\n     counter.  Note that if this object does\
    \ not point to sysUpTime\n     discontinuity checking must still check sysUpTime\
    \ for an overall\n     discontinuity.\n     If the object identified is not accessible\
    \ no discontinuity\n     check will be made.\"\n    DEFVAL      { sysUpTimeInstance\
    \ }\n    ::= { expObjectEntry 5 }\n"
- title: expObjectDiscontinuityIDWildcard OBJECT-TYPE
  contents:
  - "expObjectDiscontinuityIDWildcard OBJECT-TYPE\n     SYNTAX      TruthValue\n \
    \    MAX-ACCESS  read-create\n     STATUS      current\n     DESCRIPTION\n   \
    \  \"A true value indicates the expObjectDeltaDiscontinuityID of\n     this row\
    \ is a wildcard object.  False indicates that\n     expObjectDeltaDiscontinuityID\
    \ is fully instanced.\n     This object is instantiated only if expObjectSampleType\
    \ is\n     'deltaValue' or 'changedValue'.\n     NOTE:  The simplest implementations\
    \ of this MIB may not allow\n     wildcards.\"\n    DEFVAL      { false }\n  \
    \   ::= { expObjectEntry 6 }\n"
- title: expObjectDiscontinuityIDType OBJECT-TYPE
  contents:
  - "expObjectDiscontinuityIDType OBJECT-TYPE\n     SYNTAX      INTEGER { timeTicks(1),\
    \ timeStamp(2), dateAndTime(3) }\n     MAX-ACCESS  read-create\n     STATUS  \
    \    current\n     DESCRIPTION\n     \"The value 'timeTicks' indicates the expObjectDeltaDiscontinuityID\n\
    \     of this row is of syntax TimeTicks.  The value 'timeStamp' indicates\n \
    \    syntax TimeStamp.  The value 'dateAndTime indicates syntax\n     DateAndTime.\n\
    \     This object is instantiated only if expObjectSampleType is\n     'deltaValue'\
    \ or 'changedValue'.\"\n    DEFVAL      { timeTicks }\n     ::= { expObjectEntry\
    \ 7 }\n"
- title: expObjectConditional OBJECT-TYPE
  contents:
  - "expObjectConditional OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS\
    \  read-create\n    STATUS      current\n    DESCRIPTION\n     \"The OBJECT IDENTIFIER\
    \ (OID) of an object that overrides\n     whether the instance of expObjectID\
    \ is to be considered\n     usable.  If the value of the object at expObjectConditional\n\
    \     is 0 or not instantiated, the object at expObjectID is\n     treated as\
    \ if it is not instantiated.  In other words,\n     expObjectConditional is a\
    \ filter that controls whether or\n     not to use the value at expObjectID.\n\
    \     The OID may be for a leaf object (e.g. sysObjectID.0) or may be\n     wildcarded\
    \ to match expObjectID.  If expObject is wildcarded and\n     expObjectID in the\
    \ same row is not, the wild portion of\n     expObjectConditional must match the\
    \ wildcarding of the rest of\n     the expression.  If no object in the expression\
    \ is wildcarded\n     but expObjectConditional is, use the lexically first instance\n\
    \     (if any) of expObjectConditional.\n     If the value of expObjectConditional\
    \ is 0.0 operation is\n     as if the value pointed to by expObjectConditional\
    \ is a\n     non-zero (true) value.\n     Note that expObjectConditional can not\
    \ trivially use an object\n     of syntax TruthValue, since the underlying value\
    \ is not 0 or 1.\"\n    DEFVAL      { zeroDotZero }\n    ::= { expObjectEntry\
    \ 8 }\n expObjectConditionalWildcard  OBJECT-TYPE\n     SYNTAX      TruthValue\n\
    \     MAX-ACCESS  read-create\n     STATUS      current\n     DESCRIPTION\n  \
    \   \"A true value indicates the expObjectConditional of this row is\n     a wildcard\
    \ object. False indicates that expObjectConditional is\n     fully instanced.\n\
    \     NOTE: The simplest implementations of this MIB may not allow\n     wildcards.\"\
    \n    DEFVAL      { false }\n     ::= { expObjectEntry 9 }\n"
- title: expObjectEntryStatus OBJECT-TYPE
  contents:
  - "expObjectEntryStatus OBJECT-TYPE\n    SYNTAX      RowStatus\n    MAX-ACCESS \
    \ read-create\n    STATUS      current\n    DESCRIPTION\n     \"The control that\
    \ allows creation/deletion of entries.\n     Objects in this table may be changed\
    \ while\n     expObjectEntryStatus is in any state.\"\n    ::= { expObjectEntry\
    \ 10 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Expression Value Table
  contents:
  - '-- Expression Value Table

    '
- title: --
  contents:
  - '--

    '
- title: expValueTable OBJECT-TYPE
  contents:
  - "expValueTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF ExpValueEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \"A table of\
    \ values from evaluated expressions.\"\n    ::= { expValue 1 }\n"
- title: expValueEntry OBJECT-TYPE
  contents:
  - "expValueEntry OBJECT-TYPE\n    SYNTAX      ExpValueEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n     \"A single value from an evaluated\
    \ expression.  For a given\n     instance, only one 'Val' object in the conceptual\
    \ row will be\n     instantiated, that is, the one with the appropriate type for\n\
    \     the value.  For values that contain no objects of\n     expObjectSampleType\
    \ 'deltaValue' or 'changedValue', reading a\n     value from the table causes\
    \ the evaluation of the expression\n     for that value.  For those that contain\
    \ a 'deltaValue' or\n     'changedValue' the value read is as of the last sampling\n\
    \     interval.\n     If in the attempt to evaluate the expression one or more\n\
    \     of the necessary objects is not available, the corresponding\n     entry\
    \ in this table is effectively not instantiated.\n     To maintain security of\
    \ MIB information, when creating a new\n     row in this table, the managed system\
    \ must record the security\n     credentials of the requester.  These security\
    \ credentials are\n     the parameters necessary as inputs to isAccessAllowed\
    \ from\n     [RFC2571]. When obtaining the objects that make up the\n     expression,\
    \ the system must (conceptually) use isAccessAllowed to\n     ensure that it does\
    \ not violate security.\n     The evaluation of that expression takes place under\
    \ the\n     security credentials of the creator of its expExpressionEntry.\n \
    \    To maintain security of MIB information, expression evaluation must\n   \
    \  take place using security credentials for the implied Gets of the\n     objects\
    \ in the expression as inputs (conceptually) to\n     isAccessAllowed from the\
    \ Architecture for Describing SNMP\n     Management Frameworks.  These are the\
    \ security credentials of the\n     creator of the corresponding expExpressionEntry.\"\
    \n    INDEX       { expExpressionOwner, expExpressionName,\n                 \
    \ IMPLIED expValueInstance }\n    ::= { expValueTable 1 }\n"
- title: ExpValueEntry ::= SEQUENCE {
  contents:
  - "ExpValueEntry ::= SEQUENCE {\n    expValueInstance          OBJECT IDENTIFIER,\n\
    \    expValueCounter32Val      Counter32,\n    expValueUnsigned32Val     Unsigned32,\n\
    \    expValueTimeTicksVal      TimeTicks,\n    expValueInteger32Val      Integer32,\n\
    \    expValueIpAddressVal      IpAddress,\n    expValueOctetStringVal    OCTET\
    \ STRING,\n    expValueOidVal            OBJECT IDENTIFIER,\n    expValueCounter64Val\
    \      Counter64\n"
- title: '}'
  contents:
  - '}

    '
- title: expValueInstance OBJECT-TYPE
  contents:
  - "expValueInstance OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \"The final\
    \ instance portion of a value's OID according to\n     the wildcarding in instances\
    \ of expObjectID for the\n     expression.  The prefix of this OID fragment is\
    \ 0.0,\n     leading to the following behavior.\n     If there is no wildcarding,\
    \ the value is 0.0.0.  In other\n     words, there is one value which standing\
    \ alone would have\n     been a scalar with a 0 at the end of its OID.\n     If\
    \ there is wildcarding, the value is 0.0 followed by\n     a value that the wildcard\
    \ can take, thus defining one value\n     instance for each real, possible value\
    \ of the wildcard.\n     So, for example, if the wildcard worked out to be an\
    \ ifIndex,\n     there is an expValueInstance for each applicable ifIndex.\"\n\
    \    ::= { expValueEntry 1 }\n"
- title: expValueCounter32Val OBJECT-TYPE
  contents:
  - "expValueCounter32Val OBJECT-TYPE\n    SYNTAX      Counter32\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when expExpressionValueType\
    \ is 'counter32'.\"\n    ::= { expValueEntry 2 }\n"
- title: expValueUnsigned32Val OBJECT-TYPE
  contents:
  - "expValueUnsigned32Val OBJECT-TYPE\n    SYNTAX      Unsigned32\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when\
    \ expExpressionValueType is 'unsigned32'.\"\n    ::= { expValueEntry 3 }\n"
- title: expValueTimeTicksVal OBJECT-TYPE
  contents:
  - "expValueTimeTicksVal OBJECT-TYPE\n    SYNTAX      TimeTicks\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when expExpressionValueType\
    \ is 'timeTicks'.\"\n    ::= { expValueEntry 4 }\n"
- title: expValueInteger32Val OBJECT-TYPE
  contents:
  - "expValueInteger32Val OBJECT-TYPE\n    SYNTAX      Integer32\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when expExpressionValueType\
    \ is 'integer32'.\"\n    ::= { expValueEntry 5 }\n"
- title: expValueIpAddressVal OBJECT-TYPE
  contents:
  - "expValueIpAddressVal OBJECT-TYPE\n    SYNTAX      IpAddress\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when expExpressionValueType\
    \ is 'ipAddress'.\"\n    ::= { expValueEntry 6 }\n"
- title: expValueOctetStringVal OBJECT-TYPE
  contents:
  - "expValueOctetStringVal OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (0..65536))\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n     \"\
    The value when expExpressionValueType is 'octetString'.\"\n    ::= { expValueEntry\
    \ 7 }\n"
- title: expValueOidVal OBJECT-TYPE
  contents:
  - "expValueOidVal OBJECT-TYPE\n    SYNTAX      OBJECT IDENTIFIER\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when\
    \ expExpressionValueType is 'objectId'.\"\n    ::= { expValueEntry 8 }\n"
- title: expValueCounter64Val OBJECT-TYPE
  contents:
  - "expValueCounter64Val OBJECT-TYPE\n    SYNTAX      Counter64\n    MAX-ACCESS \
    \ read-only\n    STATUS      current\n    DESCRIPTION\n     \"The value when expExpressionValueType\
    \ is 'counter64'.\"\n    ::= { expValueEntry 9 }\n"
- title: --
  contents:
  - '--

    '
- title: -- Conformance
  contents:
  - '-- Conformance

    '
- title: --
  contents:
  - '--

    '
- title: dismanExpressionMIBConformance OBJECT IDENTIFIER ::=
  contents:
  - "dismanExpressionMIBConformance OBJECT IDENTIFIER ::=\n    { dismanExpressionMIB\
    \ 3 }\n"
- title: dismanExpressionMIBCompliances OBJECT IDENTIFIER ::=
  contents:
  - "dismanExpressionMIBCompliances OBJECT IDENTIFIER ::=\n    { dismanExpressionMIBConformance\
    \ 1 }\n"
- title: dismanExpressionMIBGroups      OBJECT IDENTIFIER ::=
  contents:
  - "dismanExpressionMIBGroups      OBJECT IDENTIFIER ::=\n    { dismanExpressionMIBConformance\
    \ 2 }\n"
- title: -- Compliance
  contents:
  - '-- Compliance

    '
- title: dismanExpressionMIBCompliance MODULE-COMPLIANCE
  contents:
  - "dismanExpressionMIBCompliance MODULE-COMPLIANCE\n     STATUS current\n     DESCRIPTION\n\
    \          \"The compliance statement for entities which implement\n         \
    \ the Expression MIB.\"\n     MODULE    -- this module\n          MANDATORY-GROUPS\
    \ {\n               dismanExpressionResourceGroup,\n               dismanExpressionDefinitionGroup,\n\
    \               dismanExpressionValueGroup\n          }\n     OBJECT         expResourceDeltaMinimum\n\
    \     SYNTAX         Integer32 (-1 | 60..600)\n     DESCRIPTION\n          \"\
    Implementation need not allow deltas or it may\n          implement them and restrict\
    \ them to higher values.\"\n     OBJECT         expObjectSampleType\n     WRITE-SYNTAX\
    \   INTEGER { absoluteValue(1) }\n     DESCRIPTION\n          \"Implementation\
    \ may disallow deltas calculation or\n          change detection.\"\n     OBJECT\
    \         expObjectIDWildcard\n     WRITE-SYNTAX   INTEGER { false(2) }\n    \
    \ DESCRIPTION\n          \"Implementation may allow wildcards.\"\n     OBJECT\
    \         expObjectDiscontinuityIDWildcard\n     WRITE-SYNTAX   INTEGER { false(2)\
    \ }\n     DESCRIPTION\n          \"Implementation need not allow wildcards.\"\n\
    \     OBJECT          expObjectConditionalWildcard\n     WRITE-SYNTAX   INTEGER\
    \ { false(2) }\n     DESCRIPTION\n          \"Implementation need not allow deltas\
    \ wildcards.\"\n     ::= { dismanExpressionMIBCompliances 1 }\n"
- title: -- Units of Conformance
  contents:
  - '-- Units of Conformance

    '
- title: dismanExpressionResourceGroup OBJECT-GROUP
  contents:
  - "dismanExpressionResourceGroup OBJECT-GROUP\n     OBJECTS {\n          expResourceDeltaMinimum,\n\
    \          expResourceDeltaWildcardInstanceMaximum,\n          expResourceDeltaWildcardInstances,\n\
    \          expResourceDeltaWildcardInstancesHigh,\n          expResourceDeltaWildcardInstanceResourceLacks\n\
    \     }\n     STATUS current\n     DESCRIPTION\n          \"Expression definition\
    \ resource management.\"\n     ::= { dismanExpressionMIBGroups 1 }\n"
- title: dismanExpressionDefinitionGroup OBJECT-GROUP
  contents:
  - "dismanExpressionDefinitionGroup OBJECT-GROUP\n     OBJECTS {\n          expExpression,\n\
    \          expExpressionValueType,\n          expExpressionComment,\n        \
    \  expExpressionDeltaInterval,\n          expExpressionPrefix,\n          expExpressionErrors,\n\
    \          expExpressionEntryStatus,\n          expErrorTime,\n          expErrorIndex,\n\
    \          expErrorCode,\n          expErrorInstance,\n          expObjectID,\n\
    \          expObjectIDWildcard,\n          expObjectSampleType,\n          expObjectDeltaDiscontinuityID,\n\
    \          expObjectDiscontinuityIDWildcard,\n          expObjectDiscontinuityIDType,\n\
    \          expObjectConditional,\n          expObjectConditionalWildcard,\n  \
    \        expObjectEntryStatus\n     }\n     STATUS current\n     DESCRIPTION\n\
    \          \"Expression definition.\"\n     ::= { dismanExpressionMIBGroups 2\
    \ }\n"
- title: dismanExpressionValueGroup OBJECT-GROUP
  contents:
  - "dismanExpressionValueGroup OBJECT-GROUP\n     OBJECTS {\n          expValueCounter32Val,\n\
    \          expValueUnsigned32Val,\n          expValueTimeTicksVal,\n         \
    \ expValueInteger32Val,\n          expValueIpAddressVal,\n          expValueOctetStringVal,\n\
    \          expValueOidVal,\n          expValueCounter64Val\n     }\n     STATUS\
    \ current\n     DESCRIPTION\n          \"Expression value.\"\n     ::= { dismanExpressionMIBGroups\
    \ 3 }\n"
- title: END
  contents:
  - 'END

    '
- title: 4.  Intellectual Property
  contents:
  - "4.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards- related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This MIB contains considerable contributions from the\
    \ Distributed\n   Management Design Team (Andy Bierman, Maria Greene, Bob Stewart,\
    \ and\n   Steve Waldbusser), and colleagues at Cisco who did the first\n   implementation.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [RFC2571]   Harrington, D., Presuhn, R. and B. Wijnen, \"\
    An\n               Architecture Describing SNMP Management Frameworks\", RFC\n\
    \               2571, April 1999.\n   [RFC1155]   Rose, M. and K. McCloghrie,\
    \ \"Structure and Identification\n               of Management Information for\
    \ TCP/IP-based Internets\",\n               STD 16, RFC 1155, May 1990.\n   [RFC1212]\
    \   Rose, M. and K. McCloghrie, \"Concise MIB Definitions\",\n               STD\
    \ 16, RFC 1212, March 1991.\n   [RFC1215]   Rose, M., \"A Convention for Defining\
    \ Traps for use with\n               the SNMP\", RFC 1215, March 1991.\n   [RFC2578]\
    \   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,\n              \
    \ Rose, M. and S. Waldbusser, \"Structure of Management\n               Information\
    \ Version 2 (SMIv2)\", STD 58, RFC 2578, April\n               1999.\n   [RFC2579]\
    \   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,\n              \
    \ Rose, M. and S. Waldbusser, \"Textual Conventions for\n               SMIv2\"\
    , STD 58, RFC 2579, April 1999.\n   [RFC2580]   McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J.,\n               Rose, M. and S. Waldbusser, \"Conformance Statements\
    \ for\n               SMIv2\", STD 58, RFC 2580, April 1999.\n   [RFC1157]   Case,\
    \ J., Fedor, M., Schoffstall, M. and J. Davin,\n               \"Simple Network\
    \ Management Protocol\", STD 15, RFC 1157,\n               May 1990.\n   [RFC1901]\
    \   Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n               \"Introduction\
    \ to Community-based SNMPv2\", RFC 1901,\n               January 1996.\n   [RFC1906]\
    \   Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n               \"Transport\
    \ Mappings for Version 2 of the Simple Network\n               Management Protocol\
    \ (SNMPv2)\", RFC 1906, January 1996.\n   [RFC2572]   Case, J., Harrington D.,\
    \ Presuhn R. and B. Wijnen,\n               \"Message Processing and Dispatching\
    \ for the Simple\n               Network Management Protocol (SNMP)\", RFC 2572,\
    \ April\n               1999.\n   [RFC2574]   Blumenthal, U. and B. Wijnen, \"\
    User-based Security Model\n               (USM) for version 3 of the Simple Network\
    \ Management\n               Protocol (SNMPv3)\", RFC 2574, April 1999.\n   [RFC1905]\
    \   Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n               \"Protocol\
    \ Operations for Version 2 of the Simple Network\n               Management Protocol\
    \ (SNMPv2)\", RFC 1905, January 1996.\n   [RFC2573]   Levi, D., Meyer, P. and\
    \ B. Stewart, \"SNMPv3\n               Applications\", RFC 2573, April 1999.\n\
    \   [RFC2575]   Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based\n    \
    \           Access Control Model (VACM) for the Simple Network\n             \
    \  Management Protocol (SNMP)\", RFC 2575, April 1999.\n   [RFC2570]   Case, J.,\
    \ Mundy, R., Partain, D. and B. Stewart,\n               \"Introduction to Version\
    \ 3 of the Internet-standard\n               Network Management Framework\", RFC\
    \ 2570, April 1999.\n   [RFC1903]   Case, J., McCloghrie, K., Rose, M. and S.\
    \ Waldbusser,\n               \"Coexistence between Version 1 and version 2 of\
    \ the\n               Internet-standard Network Management Framework\", RFC\n\
    \               1903, January 1996.\n   [RFC2981]   Stewart, B., \"Event MIB\"\
    , RFC 2981, October 2000.\n   [PracPersp] Leinwand, A. and K. Fang, \"Network\
    \ Management: A\n               Practical Perspective\", Addison-Wesley Publishing\n\
    \               Company, Inc., 1993.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Expression MIB security involves two perspectives:\
    \  protection of\n   expressions from tampering or unauthorized use of resources,\
    \ and\n   protection of the objects used to calculate the expressions.\n   Security\
    \ of expression definitions and results depends on the\n   expression owner (expExpressionOwner).\
    \  With view-based access\n   control [RFC2575] a network manager can control\
    \ who has what level of\n   access to what expressions.\n   Access control for\
    \ the objects within the expression depends on the\n   security credentials of\
    \ the expression creator.  These are the\n   security credentials used to get\
    \ the objects necessary to evaluate\n   the expression.  They are the security\
    \ credentials that were used to\n   set the expExpressionRowStatus object for\
    \ that expression to\n   'active', as recorded by the managed system.\n   This\
    \ means that the results of an expression could potentially be\n   made available\
    \ to someone who does not have access to the raw data\n   that went into them.\
    \  This could be either legitimate or a security\n   violation, depending on the\
    \ specific situation and security policy.\n   To facilitate the provisioning of\
    \ access control by a security\n   administrator for this MIB itself using the\
    \ View-Based Access Control\n   Model (VACM) defined in RFC 2575 [RFC2575] for\
    \ tables in which\n   multiple users may need to independently create or modify\
    \ entries,\n   the initial index is used as an \"owner index\".  Such an initial\
    \ index\n   has a syntax of SnmpAdminString, and can thus be trivially mapped\
    \ to\n   a securityName or groupName as defined in VACM, in accordance with a\n\
    \   security policy.\n   All entries in related tables belonging to a particular\
    \ user will\n   have the same value for this initial index.  For a given user's\n\
    \   entries in a particular table, the object identifiers for the\n   information\
    \ in these entries will have the same subidentifiers\n   (except for the \"column\"\
    \ subidentifier) up to the end of the encoded\n   owner index.  To configure VACM\
    \ to permit access to this portion of\n   the table, one would create vacmViewTreeFamilyTable\
    \ entries with the\n   value of vacmViewTreeFamilySubtree including the owner\
    \ index portion,\n   and vacmViewTreeFamilyMask \"wildcarding\" the column subidentifier.\n\
    \   More elaborate configurations are possible.\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   Bob Stewart\n   Cisco Systems, Inc.\n   170 West Tasman\
    \ Drive\n   San Jose, CA 95134-1706\n   U.S.A.\n"
- title: 9.  Editor's Address
  contents:
  - "9.  Editor's Address\n   Ramanathan Kavasseri\n   Cisco Systems, Inc.\n   170\
    \ West Tasman Drive\n   San Jose, CA 95134-1706\n   U.S.A.\n   Phone: +1 408 527\
    \ 2446\n   EMail: ramk@cisco.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
