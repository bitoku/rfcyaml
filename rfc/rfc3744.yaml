- title: __initial_text__
  contents:
  - "           Web Distributed Authoring and Versioning (WebDAV)\n              \
    \          Access Control Protocol\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a set of methods, headers, message bodies,\n\
    \   properties, and reports that define Access Control extensions to the\n   WebDAV\
    \ Distributed Authoring Protocol.  This protocol permits a\n   client to read\
    \ and modify access control lists that instruct a server\n   whether to allow\
    \ or deny operations upon a resource (such as\n   HyperText Transfer Protocol\
    \ (HTTP) method invocations) by a given\n   principal.  A lightweight representation\
    \ of principals as Web\n   resources supports integration of a wide range of user\
    \ management\n   repositories.  Search operations allow discovery and manipulation\
    \ of\n   principals using human names.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n       1.1.  Terms. . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  6\n       1.2.  Notational Conventions . . . . . . . . . . . . .\
    \ . . . .  8\n   2.  Principals . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  8\n   3.  Privileges . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n       3.1.  DAV:read Privilege . . . . . . . . . . . . . . . . . .\
    \ . 10\n       3.2.  DAV:write Privilege. . . . . . . . . . . . . . . . . . .\
    \ 10\n       3.3.  DAV:write-properties Privilege . . . . . . . . . . . . . 10\n\
    \       3.4.  DAV:write-content Privilege. . . . . . . . . . . . . . . 11\n  \
    \     3.5.  DAV:unlock Privilege . . . . . . . . . . . . . . . . . . 11\n    \
    \   3.6.  DAV:read-acl Privilege . . . . . . . . . . . . . . . . . 11\n      \
    \ 3.7.  DAV:read-current-user-privilege-set Privilege. . . . . . 12\n       3.8.\
    \  DAV:write-acl Privilege. . . . . . . . . . . . . . . . . 12\n       3.9.  DAV:bind\
    \ Privilege . . . . . . . . . . . . . . . . . . . 12\n       3.10. DAV:unbind\
    \ Privilege . . . . . . . . . . . . . . . . . . 12\n       3.11. DAV:all Privilege.\
    \ . . . . . . . . . . . . . . . . . . . 13\n       3.12. Aggregation of Predefined\
    \ Privileges . . . . . . . . . . 13\n   4.  Principal Properties . . . . . . .\
    \ . . . . . . . . . . . . . . 13\n       4.1.  DAV:alternate-URI-set. . . . .\
    \ . . . . . . . . . . . . . 14\n       4.2.  DAV:principal-URL. . . . . . . .\
    \ . . . . . . . . . . . . 14\n       4.3.  DAV:group-member-set . . . . . . .\
    \ . . . . . . . . . . . 14\n       4.4.  DAV:group-membership . . . . . . . .\
    \ . . . . . . . . . . 14\n   5.  Access Control Properties. . . . . . . . . .\
    \ . . . . . . . . . 15\n       5.1.  DAV:owner. . . . . . . . . . . . . . . .\
    \ . . . . . . . . 15\n             5.1.1. Example: Retrieving DAV:owner . . .\
    \ . . . . . . . 15\n             5.1.2. Example: An Attempt to Set DAV:owner.\
    \ . . . . . . 16\n       5.2.  DAV:group. . . . . . . . . . . . . . . . . . .\
    \ . . . . . 18\n       5.3.  DAV:supported-privilege-set. . . . . . . . . . .\
    \ . . . . 18\n             5.3.1. Example: Retrieving a List of Privileges\n \
    \                   Supported on a Resource . . . . . . . . . . . . . 19\n   \
    \    5.4.  DAV:current-user-privilege-set . . . . . . . . . . . . . 21\n     \
    \        5.4.1. Example: Retrieving the User's Current Set of\n              \
    \      Assigned Privileges . . . . . . . . . . . . . . . 22\n       5.5.  DAV:acl.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 23\n             5.5.1. ACE\
    \ Principal . . . . . . . . . . . . . . . . . . 23\n             5.5.2. ACE Grant\
    \ and Deny. . . . . . . . . . . . . . . . 25\n             5.5.3. ACE Protection.\
    \ . . . . . . . . . . . . . . . . . 25\n             5.5.4. ACE Inheritance .\
    \ . . . . . . . . . . . . . . . . 25\n             5.5.5. Example: Retrieving\
    \ a Resource's Access Control\n                    List. . . . . . . . . . . .\
    \ . . . . . . . . . . . 25\n       5.6.  DAV:acl-restrictions . . . . . . . .\
    \ . . . . . . . . . . 27\n             5.6.1. DAV:grant-only. . . . . . . . .\
    \ . . . . . . . . . 27\n             5.6.2. DAV:no-invert ACE Constraint. . .\
    \ . . . . . . . . 28\n             5.6.3. DAV:deny-before-grant . . . . . . .\
    \ . . . . . . . 28\n             5.6.4. Required Principals . . . . . . . . .\
    \ . . . . . . 28\n             5.6.5. Example: Retrieving DAV:acl-restrictions.\
    \ . . . . 28\n       5.7.  DAV:inherited-acl-set. . . . . . . . . . . . . . .\
    \ . . . 29\n       5.8.  DAV:principal-collection-set . . . . . . . . . . . .\
    \ . . 30\n             5.8.1. Example: Retrieving DAV:principal-collection-set.\
    \ 30\n       5.9.  Example: PROPFIND to retrieve access control properties. 32\n\
    \   6.  ACL Evaluation . . . . . . . . . . . . . . . . . . . . . . . . 36\n  \
    \ 7.  Access Control and existing methods. . . . . . . . . . . . . . 37\n    \
    \   7.1.  Any HTTP method. . . . . . . . . . . . . . . . . . . . . 37\n      \
    \       7.1.1. Error Handling. . . . . . . . . . . . . . . . . . 37\n       7.2.\
    \  OPTIONS. . . . . . . . . . . . . . . . . . . . . . . . . 38\n             7.2.1.\
    \ Example - OPTIONS . . . . . . . . . . . . . . . . 39\n       7.3.  MOVE . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 39\n       7.4.  COPY . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 39\n       7.5.  LOCK . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 39\n   8.  Access Control Methods\
    \ . . . . . . . . . . . . . . . . . . . . 40\n       8.1.  ACL. . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 40\n             8.1.1. ACL Preconditions\
    \ . . . . . . . . . . . . . . . . 40\n             8.1.2. Example: the ACL method\
    \ . . . . . . . . . . . . . 42\n             8.1.3. Example: ACL method failure\
    \ due to protected\n                    ACE conflict. . . . . . . . . . . . .\
    \ . . . . . . 43\n             8.1.4. Example: ACL method failure due to an\n\
    \                    inherited ACE conflict. . . . . . . . . . . . . . 44\n  \
    \           8.1.5. Example: ACL method failure due to an attempt\n           \
    \         to set grant and deny in a single ACE . . . . . . 45\n   9.  Access\
    \ Control Reports . . . . . . . . . . . . . . . . . . . . 46\n       9.1.  REPORT\
    \ Method. . . . . . . . . . . . . . . . . . . . . . 46\n       9.2.  DAV:acl-principal-prop-set\
    \ Report. . . . . . . . . . . . 47\n             9.2.1. Example: DAV:acl-principal-prop-set\
    \ Report. . . . 48\n       9.3.  DAV:principal-match REPORT . . . . . . . . .\
    \ . . . . . . 49\n             9.3.1. Example: DAV:principal-match REPORT . .\
    \ . . . . . 50\n       9.4.  DAV:principal-property-search REPORT . . . . . .\
    \ . . . . 51\n             9.4.1. Matching. . . . . . . . . . . . . . . . . .\
    \ . . . 53\n             9.4.2. Example: successful DAV:principal-property-search\n\
    \                    REPORT. . . . . . . . . . . . . . . . . . . . . . 54\n  \
    \     9.5.  DAV:principal-search-property-set REPORT . . . . . . . . 56\n    \
    \         9.5.1. Example: DAV:principal-search-property-set\n                \
    \    REPORT. . . . . . . . . . . . . . . . . . . . . . 58\n   10. XML Processing\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 59\n   11. Internationalization\
    \ Considerations. . . . . . . . . . . . . . 59\n   12. Security Considerations.\
    \ . . . . . . . . . . . . . . . . . . . 60\n       12.1. Increased Risk of Compromised\
    \ Users. . . . . . . . . . . 60\n       12.2. Risks of the DAV:read-acl and\n\
    \             DAV:current-user-privilege-set Privileges. . . . . . . . 60\n  \
    \     12.3. No Foreknowledge of Initial ACL. . . . . . . . . . . . . 61\n   13.\
    \ Authentication . . . . . . . . . . . . . . . . . . . . . . . . 61\n   14. IANA\
    \ Considerations. . . . . . . . . . . . . . . . . . . . . . 62\n   15. Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 62\n   16. References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 62\n       16.1. Normative References\
    \ . . . . . . . . . . . . . . . . . . 62\n       16.2. Informative References\
    \ . . . . . . . . . . . . . . . . . 63\n   Appendices\n   A.  WebDAV XML Document\
    \ Type Definition Addendum . . . . . . . . . 64\n   B.  WebDAV Method Privilege\
    \ Table (Normative). . . . . . . . . . . 67\n   Index. . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 69\n   Authors' Addresses . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 71\n   Full Copyright Statement. . . . . .\
    \ . . . . . . .  . . . . . . . . 72\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The goal of the WebDAV access control extensions is to provide\
    \ an\n   interoperable mechanism for handling discretionary access control for\n\
    \   content and metadata managed by WebDAV servers.  WebDAV access\n   control\
    \ can be implemented on content repositories with security as\n   simple as that\
    \ of a UNIX file system, as well as more sophisticated\n   models.  The underlying\
    \ principle of access control is that who you\n   are determines what operations\
    \ you can perform on a resource.  The\n   \"who you are\" is defined by a \"principal\"\
    \ identifier; users, client\n   software, servers, and groups of the previous\
    \ have principal\n   identifiers.  The \"operations you can perform\" are determined\
    \ by a\n   single \"access control list\" (ACL) associated with a resource.  An\n\
    \   ACL contains a set of \"access control entries\" (ACEs), where each ACE\n\
    \   specifies a principal and a set of privileges that are either granted\n  \
    \ or denied to that principal.  When a principal submits an operation\n   (such\
    \ as an HTTP or WebDAV method) to a resource for execution, the\n   server evaluates\
    \ the ACEs in the ACL to determine if the principal\n   has permission for that\
    \ operation.\n   Since every ACE contains the identifier of a principal, client\n\
    \   software operated by a human must provide a mechanism for selecting\n   this\
    \ principal.  This specification uses http(s) scheme URLs to\n   identify principals,\
    \ which are represented as WebDAV-capable\n   resources.  There is no guarantee\
    \ that the URLs identifying\n   principals will be meaningful to a human.  For\
    \ example,\n   http://www.example.com/u/256432 and\n   http://www.example.com/people/Greg.Stein\
    \ are both valid URLs that\n   could be used to identify the same principal. \
    \ To remedy this, every\n   principal resource has the DAV:displayname property\
    \ containing a\n   human-readable name for the principal.\n   Since a principal\
    \ can be identified by multiple URLs, it raises the\n   problem of determining\
    \ exactly which principal is being referenced in\n   a given ACE.  It is impossible\
    \ for a client to determine that an ACE\n   granting the read privilege to http://www.example.com/people/\n\
    \   Greg.Stein also affects the principal at http://www.example.com/u/\n   256432.\
    \  That is, a client has no mechanism for determining that two\n   URLs identify\
    \ the same principal resource.  As a result, this\n   specification requires clients\
    \ to use just one of the many possible\n   URLs for a principal when creating\
    \ ACEs.  A client can discover which\n   URL to use by retrieving the DAV:principal-URL\
    \ property (Section 4.2)\n   from a principal resource.  No matter which of the\
    \ principal's URLs\n   is used with PROPFIND, the property always returns the\
    \ same URL.\n   With a system having hundreds to thousands of principals, the\
    \ problem\n   arises of how to allow a human operator of client software to select\n\
    \   just one of these principals.  One approach is to use broad\n   collection\
    \ hierarchies to spread the principals over a large number\n   of collections,\
    \ yielding few principals per collection.  An example\n   of this is a two level\
    \ hierarchy with the first level containing 36\n   collections (a-z, 0-9), and\
    \ the second level being another 36,\n   creating collections /a/a/, /a/b/, ...,\
    \ /a/z/, such that a principal\n   with last name \"Stein\" would appear at /s/t/Stein.\
    \  In effect, this\n   pre-computes a common query, search on last name, and encodes\
    \ it into\n   a hierarchy.  The drawback with this scheme is that it handles only\
    \ a\n   small set of predefined queries, and drilling down through the\n   collection\
    \ hierarchy adds unnecessary steps (navigate down/up) when\n   the user already\
    \ knows the principal's name.  While organizing\n   principal URLs into a hierarchy\
    \ is a valid namespace organization,\n   users should not be forced to navigate\
    \ this hierarchy to select a\n   principal.\n   This specification provides the\
    \ capability to perform substring\n   searches over a small set of properties\
    \ on the resources representing\n   principals.  This permits searches based on\
    \ last name, first name,\n   user name, job title, etc.  Two separate searches\
    \ are supported, both\n   via the REPORT method, one to search principal resources\n\
    \   (DAV:principal-property-search, Section 9.4), the other to determine\n   which\
    \ properties may be searched at all (DAV:principal-search-\n   property-set, Section\
    \ 9.5).\n   Once a principal has been identified in an ACE, a server evaluating\n\
    \   that ACE must know the identity of the principal making a protocol\n   request,\
    \ and must validate that that principal is who they claim to\n   be, a process\
    \ known as authentication.  This specification\n   intentionally omits discussion\
    \ of authentication, as the HTTP\n   protocol already has a number of authentication\
    \ mechanisms [RFC2617].\n   Some authentication mechanism (such as HTTP Digest\
    \ Authentication,\n   which all WebDAV compliant implementations are required\
    \ to support)\n   must be available to validate the identity of a principal.\n\
    \   The following issues are out of scope for this document:\n   o  Access control\
    \ that applies only to a particular property on a\n      resource (excepting the\
    \ access control properties DAV:acl and\n      DAV:current-user-privilege-set),\
    \ rather than the entire resource,\n   o  Role-based security (where a role can\
    \ be seen as a dynamically\n      defined group of principals),\n   o  Specification\
    \ of the ways an ACL on a resource is initialized,\n   o  Specification of an\
    \ ACL that applies globally to all resources,\n      rather than to a particular\
    \ resource.\n   o  Creation and maintenance of resources representing people or\n\
    \      computational agents (principals), and groups of these.\n   This specification\
    \ is organized as follows.  Section 1.1 defines key\n   concepts used throughout\
    \ the specification, and is followed by a more\n   in-depth discussion of principals\
    \ (Section 2), and privileges\n   (Section 3).  Properties defined on principals\
    \ are specified in\n   Section 4, and access control properties for content resources\
    \ are\n   specified in Section 5.  The ways ACLs are to be evaluated is\n   described\
    \ in Section 6.  Client discovery of access control\n   capability using OPTIONS\
    \ is described in Section 7.2.  Interactions\n   between access control functionality\
    \ and existing HTTP and WebDAV\n   methods are described in the remainder of Section\
    \ 7.  The access\n   control setting method, ACL, is specified in Section 8. \
    \ Four reports\n   that provide limited server-side searching capabilities are\
    \ described\n   in Section 9.  Sections on XML processing (Section 10),\n   Internationalization\
    \ considerations (Section 11), security\n   considerations (Section 12), and authentication\
    \ (Section 13) round\n   out the specification.  An appendix (Appendix A) provides\
    \ an XML\n   Document Type Definition (DTD) for the XML elements defined in the\n\
    \   specification.\n"
- title: 1.1.  Terms
  contents:
  - "1.1.  Terms\n   This document uses the terms defined in HTTP [RFC2616] and WebDAV\n\
    \   [RFC2518].  In addition, the following terms are defined:\n   principal\n\
    \      A \"principal\" is a distinct human or computational actor that\n     \
    \ initiates access to network resources.  In this protocol, a\n      principal\
    \ is an HTTP resource that represents such an actor.\n   group\n      A \"group\"\
    \ is a principal that represents a set of other\n      principals.\n   privilege\n\
    \      A \"privilege\" controls access to a particular set of HTTP\n      operations\
    \ on a resource.\n   aggregate privilege\n      An \"aggregate privilege\" is\
    \ a privilege that contains a set of\n      other privileges.\n   abstract privilege\n\
    \      The modifier \"abstract\", when applied to a privilege on a\n      resource,\
    \ means the privilege cannot be set in an access control\n      element (ACE)\
    \ on that resource.\n   access control list (ACL)\n      An \"ACL\" is a list\
    \ of access control elements that define access\n      control to a particular\
    \ resource.\n   access control element (ACE)\n      An \"ACE\" either grants or\
    \ denies a particular set of (non-\n      abstract) privileges for a particular\
    \ principal.\n   inherited ACE\n      An \"inherited ACE\" is an ACE that is dynamically\
    \ shared from the\n      ACL of another resource.  When a shared ACE changes on\
    \ the primary\n      resource, it is also changed on inheriting resources.\n \
    \  protected property\n      A \"protected property\" is one whose value cannot\
    \ be updated except\n      by a method explicitly defined as updating that specific\
    \ property.\n      In particular, a protected property cannot be updated with\
    \ a\n      PROPPATCH request.\n"
- title: 1.2.  Notational Conventions
  contents:
  - "1.2.  Notational Conventions\n   The augmented BNF used by this document to describe\
    \ protocol elements\n   is described in Section 2.1 of [RFC2616].  Because this\
    \ augmented BNF\n   uses the basic production rules provided in Section 2.2 of\
    \ [RFC2616],\n   those rules apply to this document as well.\n   The key words\
    \ \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\"\
    , \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in [RFC2119].\n   Definitions of XML elements\
    \ in this document use XML element type\n   declarations (as found in XML Document\
    \ Type Declarations), described\n   in Section 3.2 of [REC-XML].  When an XML\
    \ element type in the \"DAV:\"\n   namespace is referenced in this document outside\
    \ of the context of an\n   XML fragment, the string \"DAV:\" will be prefixed\
    \ to the element name.\n"
- title: 2.  Principals
  contents:
  - "2.  Principals\n   A principal is a network resource that represents a distinct\
    \ human or\n   computational actor that initiates access to network resources.\n\
    \   Users and groups are represented as principals in many\n   implementations;\
    \ other types of principals are also possible.  A URI\n   of any scheme MAY be\
    \ used to identify a principal resource.  However,\n   servers implementing this\
    \ specification MUST expose principal\n   resources at an http(s) URL, which is\
    \ a privileged scheme that points\n   to resources that have additional properties,\
    \ as described in Section\n   4.  So, a principal resource can have multiple URIs,\
    \ one of which has\n   to be an http(s) scheme URL.  Although an implementation\
    \ SHOULD\n   support PROPFIND and MAY support PROPPATCH to access and modify\n\
    \   information about a principal, it is not required to do so.\n   A principal\
    \ resource may be a group, where a group is a principal\n   that represents a\
    \ set of other principals, called the members of the\n   group.  If a person or\
    \ computational agent matches a principal\n   resource that is a member of a group,\
    \ they also match the group.\n   Membership in a group is recursive, so if a principal\
    \ is a member of\n   group GRPA, and GRPA is a member of group GRPB, then the\
    \ principal is\n   also a member of GRPB.\n"
- title: 3.  Privileges
  contents:
  - "3.  Privileges\n   Ability to perform a given method on a resource MUST be controlled\
    \ by\n   one or more privileges.  Authors of protocol extensions that define\n\
    \   new HTTP methods SHOULD specify which privileges (by defining new\n   privileges,\
    \ or mapping to ones below) are required to perform the\n   method.  A principal\
    \ with no privileges to a resource MUST be denied\n   any HTTP access to that\
    \ resource, unless the principal matches an ACE\n   constructed using the DAV:all,\
    \ DAV:authenticated, or\n   DAV:unauthenticated pseudo-principals (see Section\
    \ 5.5.1).  Servers\n   MUST report a 403 \"Forbidden\" error if access is denied,\
    \ except in\n   the case where the privilege restricts the ability to know the\n\
    \   resource exists, in which case 404 \"Not Found\" may be returned.\n   Privileges\
    \ may be containers of other privileges, in which case they\n   are termed \"\
    aggregate privileges\".  If a principal is granted or\n   denied an aggregate\
    \ privilege, it is semantically equivalent to\n   granting or denying each of\
    \ the aggregated privileges individually.\n   For example, an implementation may\
    \ define add-member and remove-\n   member privileges that control the ability\
    \ to add and remove a member\n   of a group.  Since these privileges control the\
    \ ability to update the\n   state of a group, these privileges would be aggregated\
    \ by the\n   DAV:write privilege on a group, and granting the DAV:write privilege\n\
    \   on a group would also grant the add-member and remove-member\n   privileges.\n\
    \   Privileges may be declared to be \"abstract\" for a given resource, in\n \
    \  which case they cannot be set in an ACE on that resource.  Aggregate\n   and\
    \ non-aggregate privileges are both capable of being abstract.\n   Abstract privileges\
    \ are useful for modeling privileges that otherwise\n   would not be exposed via\
    \ the protocol.  Abstract privileges also\n   provide server implementations with\
    \ flexibility in implementing the\n   privileges defined in this specification.\
    \  For example, if a server\n   is incapable of separating the read resource capability\
    \ from the read\n   ACL capability, it can still model the DAV:read and DAV:read-acl\n\
    \   privileges defined in this specification by declaring them abstract,\n   and\
    \ containing them within a non-abstract aggregate privilege (say,\n   read-all)\
    \ that holds DAV:read, and DAV:read-acl.  In this way, it is\n   possible to set\
    \ the aggregate privilege, read-all, thus coupling the\n   setting of DAV:read\
    \ and DAV:read-acl, but it is not possible to set\n   DAV:read, or DAV:read-acl\
    \ individually.  Since aggregate privileges\n   can be abstract, it is also possible\
    \ to use abstract privileges to\n   group or organize non-abstract privileges.\
    \  Privilege containment\n   loops are not allowed; therefore, a privilege MUST\
    \ NOT contain\n   itself.  For example, DAV:read cannot contain DAV:read.\n  \
    \ The set of privileges that apply to a particular resource may vary\n   with\
    \ the DAV:resourcetype of the resource, as well as between\n   different server\
    \ implementations.  To promote interoperability,\n   however, this specification\
    \ defines a set of well-known privileges\n   (e.g., DAV:read, DAV:write, DAV:read-acl,\
    \ DAV:write-acl, DAV:read-\n   current-user-privilege-set, and DAV:all), which\
    \ can at least be used\n   to classify the other privileges defined on a particular\
    \ resource.\n   The access permissions on null resources (defined in [RFC2518],\n\
    \   Section 3) are solely those they inherit (if any), and they are not\n   discoverable\
    \ (i.e., the access control properties specified in\n   Section 5 are not defined\
    \ on null resources).  On the transition from\n   null to stateful resource, the\
    \ initial access control list is set by\n   the server's default ACL value policy\
    \ (if any).\n   Server implementations MAY define new privileges beyond those\
    \ defined\n   in this specification.  Privileges defined by individual\n   implementations\
    \ MUST NOT use the DAV: namespace, and instead should\n   use a namespace that\
    \ they control, such as an http scheme URL.\n"
- title: 3.1.  DAV:read Privilege
  contents:
  - "3.1.  DAV:read Privilege\n   The read privilege controls methods that return\
    \ information about the\n   state of the resource, including the resource's properties.\
    \  Affected\n   methods include GET and PROPFIND.  Any implementation-defined\n\
    \   privilege that also controls access to GET and PROPFIND must be\n   aggregated\
    \ under DAV:read - if an ACL grants access to DAV:read, the\n   client may expect\
    \ that no other privilege needs to be granted to have\n   access to GET and PROPFIND.\
    \  Additionally, the read privilege MUST\n   control the OPTIONS method.\n   <!ELEMENT\
    \ read EMPTY>\n"
- title: 3.2.  DAV:write Privilege
  contents:
  - "3.2.  DAV:write Privilege\n   The write privilege controls methods that lock\
    \ a resource or modify\n   the content, dead properties, or (in the case of a\
    \ collection)\n   membership of the resource, such as PUT and PROPPATCH.  Note\
    \ that\n   state modification is also controlled via locking (see section 5.3\
    \ of\n   [RFC2518]), so effective write access requires that both write\n   privileges\
    \ and write locking requirements are satisfied.  Any\n   implementation-defined\
    \ privilege that also controls access to methods\n   modifying content, dead properties\
    \ or collection membership must be\n   aggregated under DAV:write, e.g., if an\
    \ ACL grants access to\n   DAV:write, the client may expect that no other privilege\
    \ needs to be\n   granted to have access to PUT and PROPPATCH.\n   <!ELEMENT write\
    \ EMPTY>\n"
- title: 3.3.  DAV:write-properties Privilege
  contents:
  - "3.3.  DAV:write-properties Privilege\n   The DAV:write-properties privilege controls\
    \ methods that modify the\n   dead properties of the resource, such as PROPPATCH.\
    \  Whether this\n   privilege may be used to control access to any live properties\
    \ is\n   determined by the implementation.  Any implementation-defined\n   privilege\
    \ that also controls access to methods modifying dead\n   properties must be aggregated\
    \ under DAV:write-properties - e.g., if\n   an ACL grants access to DAV:write-properties,\
    \ the client can safely\n   expect that no other privilege needs to be granted\
    \ to have access to\n   PROPPATCH.\n   <!ELEMENT write-properties EMPTY>\n"
- title: 3.4.  DAV:write-content Privilege
  contents:
  - "3.4.  DAV:write-content Privilege\n   The DAV:write-content privilege controls\
    \ methods that modify the\n   content of an existing resource, such as PUT.  Any\
    \ implementation-\n   defined privilege that also controls access to content must\
    \ be\n   aggregated under DAV:write-content - e.g., if an ACL grants access to\n\
    \   DAV:write-content, the client can safely expect that no other\n   privilege\
    \ needs to be granted to have access to PUT.  Note that PUT -\n   when applied\
    \ to an unmapped URI - creates a new resource and\n   therefore is controlled\
    \ by the DAV:bind privilege on the parent\n   collection.\n   <!ELEMENT write-content\
    \ EMPTY>\n"
- title: 3.5.  DAV:unlock Privilege
  contents:
  - "3.5.  DAV:unlock Privilege\n   The DAV:unlock privilege controls the use of the\
    \ UNLOCK method by a\n   principal other than the lock owner (the principal that\
    \ created a\n   lock can always perform an UNLOCK).  While the set of users who\
    \ may\n   lock a resource is most commonly the same set of users who may modify\n\
    \   a resource, servers may allow various kinds of administrators to\n   unlock\
    \ resources locked by others.  Any privilege controlling access\n   by non-lock\
    \ owners to UNLOCK MUST be aggregated under DAV:unlock.\n   A lock owner can always\
    \ remove a lock by issuing an UNLOCK with the\n   correct lock token and authentication\
    \ credentials.  That is, even if\n   a principal does not have DAV:unlock privilege,\
    \ they can still remove\n   locks they own.  Principals other than the lock owner\
    \ can remove a\n   lock only if they have DAV:unlock privilege and they issue\
    \ an UNLOCK\n   with the correct lock token.  Lock timeout is not affected by\
    \ the\n   DAV:unlock privilege.\n   <!ELEMENT unlock EMPTY>\n"
- title: 3.6.  DAV:read-acl Privilege
  contents:
  - "3.6.  DAV:read-acl Privilege\n   The DAV:read-acl privilege controls the use\
    \ of PROPFIND to retrieve\n   the DAV:acl property of the resource.\n   <!ELEMENT\
    \ read-acl EMPTY>\n"
- title: 3.7.  DAV:read-current-user-privilege-set Privilege
  contents:
  - "3.7.  DAV:read-current-user-privilege-set Privilege\n   The DAV:read-current-user-privilege-set\
    \ privilege controls the use of\n   PROPFIND to retrieve the DAV:current-user-privilege-set\
    \ property of\n   the resource.\n   Clients are intended to use this property\
    \ to visually indicate in\n   their UI items that are dependent on the permissions\
    \ of a resource,\n   for example, by graying out resources that are not writable.\n\
    \   This privilege is separate from DAV:read-acl because there is a need\n   to\
    \ allow most users access to the privileges permitted the current\n   user (due\
    \ to its use in creating the UI), while the full ACL contains\n   information\
    \ that may not be appropriate for the current authenticated\n   user.  As a result,\
    \ the set of users who can view the full ACL is\n   expected to be much smaller\
    \ than those who can read the current user\n   privilege set, and hence distinct\
    \ privileges are needed for each.\n   <!ELEMENT read-current-user-privilege-set\
    \ EMPTY>\n"
- title: 3.8.  DAV:write-acl Privilege
  contents:
  - "3.8.  DAV:write-acl Privilege\n   The DAV:write-acl privilege controls use of\
    \ the ACL method to modify\n   the DAV:acl property of the resource.\n   <!ELEMENT\
    \ write-acl EMPTY>\n"
- title: 3.9.  DAV:bind Privilege
  contents:
  - "3.9.  DAV:bind Privilege\n   The DAV:bind privilege allows a method to add a\
    \ new member URL to the\n   specified collection (for example via PUT or MKCOL).\
    \  It is ignored\n   for resources that are not collections.\n   <!ELEMENT bind\
    \ EMPTY>\n"
- title: 3.10.  DAV:unbind Privilege
  contents:
  - "3.10.  DAV:unbind Privilege\n   The DAV:unbind privilege allows a method to remove\
    \ a member URL from\n   the specified collection (for example via DELETE or MOVE).\
    \  It is\n   ignored for resources that are not collections.\n   <!ELEMENT unbind\
    \ EMPTY>\n"
- title: 3.11.  DAV:all Privilege
  contents:
  - "3.11.  DAV:all Privilege\n   DAV:all is an aggregate privilege that contains\
    \ the entire set of\n   privileges that can be applied to the resource.\n   <!ELEMENT\
    \ all EMPTY>\n"
- title: 3.12.  Aggregation of Predefined Privileges
  contents:
  - "3.12.  Aggregation of Predefined Privileges\n   Server implementations are free\
    \ to aggregate the predefined\n   privileges (defined above in Sections 3.1-3.10)\
    \ subject to the\n   following limitations:\n   DAV:read-acl MUST NOT contain\
    \ DAV:read, DAV:write, DAV:write-acl,\n   DAV:write-properties, DAV:write-content,\
    \ or DAV:read-current-user-\n   privilege-set.\n   DAV:write-acl MUST NOT contain\
    \ DAV:write, DAV:read, DAV:read-acl, or\n   DAV:read-current-user-privilege-set.\n\
    \   DAV:read-current-user-privilege-set MUST NOT contain DAV:write,\n   DAV:read,\
    \ DAV:read-acl, or DAV:write-acl.\n   DAV:write MUST NOT contain DAV:read, DAV:read-acl,\
    \ or DAV:read-\n   current-user-privilege-set.\n   DAV:read MUST NOT contain DAV:write,\
    \ DAV:write-acl, DAV:write-\n   properties, or DAV:write-content.\n   DAV:write\
    \ MUST contain DAV:bind, DAV:unbind, DAV:write-properties and\n   DAV:write-content.\n"
- title: 4.  Principal Properties
  contents:
  - "4.  Principal Properties\n   Principals are manifested to clients as a WebDAV\
    \ resource, identified\n   by a URL.  A principal MUST have a non-empty DAV:displayname\
    \ property\n   (defined in Section 13.2 of [RFC2518]), and a DAV:resourcetype\n\
    \   property (defined in Section 13.9 of [RFC2518]).  Additionally, a\n   principal\
    \ MUST report the DAV:principal XML element in the value of\n   the DAV:resourcetype\
    \ property.  The element type declaration for\n   DAV:principal is:\n   <!ELEMENT\
    \ principal EMPTY>\n   This protocol defines the following additional properties\
    \ for a\n   principal.  Since it can be expensive for a server to retrieve access\n\
    \   control information, the name and value of these properties SHOULD\n   NOT\
    \ be returned by a PROPFIND allprop request (as defined in Section\n   12.14.1\
    \ of [RFC2518]).\n"
- title: 4.1.  DAV:alternate-URI-set
  contents:
  - "4.1.  DAV:alternate-URI-set\n   This protected property, if non-empty, contains\
    \ the URIs of network\n   resources with additional descriptive information about\
    \ the\n   principal.  This property identifies additional network resources\n\
    \   (i.e., it contains one or more URIs) that may be consulted by a\n   client\
    \ to gain additional knowledge concerning a principal.  One\n   expected use for\
    \ this property is the storage of an LDAP [RFC2255]\n   scheme URL.  A user-agent\
    \ encountering an LDAP URL could use LDAP\n   [RFC2251] to retrieve additional\
    \ machine-readable directory\n   information about the principal, and display\
    \ that information in its\n   user interface.  Support for this property is REQUIRED,\
    \ and the value\n   is empty if no alternate URI exists for the principal.\n \
    \  <!ELEMENT alternate-URI-set (href*)>\n"
- title: 4.2.  DAV:principal-URL
  contents:
  - "4.2.  DAV:principal-URL\n   A principal may have many URLs, but there must be\
    \ one \"principal URL\"\n   that clients can use to uniquely identify a principal.\
    \  This\n   protected property contains the URL that MUST be used to identify\n\
    \   this principal in an ACL request.  Support for this property is\n   REQUIRED.\n\
    \   <!ELEMENT principal-URL (href)>\n"
- title: 4.3.  DAV:group-member-set
  contents:
  - "4.3.  DAV:group-member-set\n   This property of a group principal identifies\
    \ the principals that are\n   direct members of this group.  Since a group may\
    \ be a member of\n   another group, a group may also have indirect members (i.e.,\
    \ the\n   members of its direct members).  A URL in the DAV:group-member-set\n\
    \   for a principal MUST be the DAV:principal-URL of that principal.\n   <!ELEMENT\
    \ group-member-set (href*)>\n"
- title: 4.4.  DAV:group-membership
  contents:
  - "4.4.  DAV:group-membership\n   This protected property identifies the groups\
    \ in which the principal\n   is directly a member.  Note that a server may allow\
    \ a group to be a\n   member of another group, in which case the DAV:group-membership\
    \ of\n   those other groups would need to be queried in order to determine the\n\
    \   groups in which the principal is indirectly a member.  Support for\n   this\
    \ property is REQUIRED.\n   <!ELEMENT group-membership (href*)>\n"
- title: 5.  Access Control Properties
  contents:
  - "5.  Access Control Properties\n   This specification defines a number of new\
    \ properties for WebDAV\n   resources.  Access control properties may be retrieved\
    \ just like\n   other WebDAV properties, using the PROPFIND method.  Since it\
    \ is\n   expensive, for many servers, to retrieve access control information,\n\
    \   a PROPFIND allprop request (as defined in Section 12.14.1 of\n   [RFC2518])\
    \ SHOULD NOT return the names and values of the properties\n   defined in this\
    \ section.\n   Access control properties (especially DAV:acl and DAV:inherited-acl-\n\
    \   set) are defined on the resource identified by the Request-URI of a\n   PROPFIND\
    \ request.  A direct consequence is that if the resource is\n   accessible via\
    \ multiple URI, the value of access control properties\n   is the same across\
    \ these URI.\n   HTTP resources that support the WebDAV Access Control Protocol\
    \ MUST\n   contain the following properties.  Null resources (described in\n \
    \  Section 3 of [RFC2518]) MUST NOT contain the following properties.\n"
- title: 5.1.  DAV:owner
  contents:
  - "5.1.  DAV:owner\n   This  property identifies a particular principal as being\
    \ the \"owner\"\n   of the resource.  Since the owner of a resource often has\
    \ special\n   access control capabilities (e.g., the owner frequently has permanent\n\
    \   DAV:write-acl privilege), clients might display the resource owner in\n  \
    \ their user interface.\n   Servers MAY implement DAV:owner as protected property\
    \ and MAY return\n   an empty DAV:owner element as property value in case no owner\n\
    \   information is available.\n   <!ELEMENT owner (href?)>\n"
- title: '5.1.1.  Example: Retrieving DAV:owner'
  contents:
  - "5.1.1.  Example: Retrieving DAV:owner\n   This example shows a client request\
    \ for the value of the DAV:owner\n   property from a collection resource with\
    \ URL http://www.example.com/\n   papers/.  The principal making the request is\
    \ authenticated using\n   Digest authentication.  The value of DAV:owner is the\
    \ URL http://\n   www.example.com/acl/users/gstein, wrapped in the DAV:href XML\n\
    \   element.\n   >> Request <<\n   PROPFIND /papers/ HTTP/1.1\n   Host: www.example.com\n\
    \   Content-type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   Depth:\
    \ 0\n   Authorization: Digest username=\"jim\",\n     realm=\"users@example.com\"\
    , nonce=\"...\",\n     uri=\"/papers/\", response=\"...\", opaque=\"...\"\n  \
    \ <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:propfind xmlns:D=\"DAV:\"\
    >\n     <D:prop>\n       <D:owner/>\n     </D:prop>\n   </D:propfind>\n   >> Response\
    \ <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\
    \n   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus\
    \ xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>http://www.example.com/papers/</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:owner>\n             <D:href>http://www.example.com/acl/users/gstein</D:href>\n\
    \           </D:owner>\n         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n\
    \       </D:propstat>\n     </D:response>\n   </D:multistatus>\n"
- title: '5.1.2.  Example: An Attempt to Set DAV:owner'
  contents:
  - "5.1.2.  Example: An Attempt to Set DAV:owner\n   The following example shows\
    \ a client request to modify the value of\n   the DAV:owner property on the resource\
    \ with URL <http://\n   www.example.com/papers>.  Since DAV:owner is a protected\
    \ property on\n   this particular server, it responds with a 207 (Multi-Status)\n\
    \   response that contains a 403 (Forbidden) status code for the act of\n   setting\
    \ DAV:owner.  Section 8.2.1 of [RFC2518] describes PROPPATCH\n   status code information,\
    \  Section 11 of [RFC2518] describes the\n   Multi-Status response and Sections\
    \ 1.6 and 3.12 of [RFC3253] describe\n   additional error marshaling for PROPPATCH\
    \ attempts on protected\n   properties.\n   >> Request <<\n   PROPPATCH /papers/\
    \ HTTP/1.1\n   Host: www.example.com\n   Content-type: text/xml; charset=\"utf-8\"\
    \n   Content-Length: xxx\n   Depth: 0\n   Authorization: Digest username=\"jim\"\
    ,\n     realm=\"users@example.com\", nonce=\"...\",\n     uri=\"/papers/\", response=\"\
    ...\", opaque=\"...\"\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:propertyupdate\
    \ xmlns:D=\"DAV:\">\n     <D:set>\n       <D:prop>\n         <D:owner>\n     \
    \      <D:href>http://www.example.com/acl/users/jim</D:href>\n         </D:owner>\n\
    \       </D:prop>\n     </D:set>\n   </D:propertyupdate>\n   >> Response <<\n\
    \   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n\
    \   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus\
    \ xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>http://www.example.com/papers/</D:href>\n\
    \       <D:propstat>\n         <D:prop><D:owner/></D:prop>\n         <D:status>HTTP/1.1\
    \ 403 Forbidden</D:status>\n         <D:responsedescription>\n           <D:error><D:cannot-modify-protected-property/></D:error>\n\
    \           Failure to set protected property (DAV:owner)\n         </D:responsedescription>\n\
    \       </D:propstat>\n     </D:response>\n   </D:multistatus>\n"
- title: 5.2.  DAV:group
  contents:
  - "5.2.  DAV:group\n   This property identifies a particular principal as being\
    \ the \"group\"\n   of the resource.  This property is commonly found on repositories\n\
    \   that implement the Unix privileges model.\n   Servers MAY implement DAV:group\
    \ as protected property and MAY return\n   an empty DAV:group element as property\
    \ value in case no group\n   information is available.\n   <!ELEMENT group (href?)>\n"
- title: 5.3.  DAV:supported-privilege-set
  contents:
  - "5.3.  DAV:supported-privilege-set\n   This is a protected property that identifies\
    \ the privileges defined\n   for the resource.\n   <!ELEMENT supported-privilege-set\
    \ (supported-privilege*)>\n   Each privilege appears as an XML element, where\
    \ aggregate privileges\n   list as sub-elements all of the privileges that they\
    \ aggregate.\n   <!ELEMENT supported-privilege\n    (privilege, abstract?, description,\
    \ supported-privilege*)>\n   <!ELEMENT privilege ANY>\n   An abstract privilege\
    \ MUST NOT be used in an ACE for that resource.\n   Servers MUST fail an attempt\
    \ to set an abstract privilege.\n   <!ELEMENT abstract EMPTY>\n   A description\
    \ is a human-readable description of what this privilege\n   controls access to.\
    \  Servers MUST indicate the human language of the\n   description using the xml:lang\
    \ attribute and SHOULD consider the HTTP\n   Accept-Language request header when\
    \ selecting one of multiple\n   available languages.\n   <!ELEMENT description\
    \ #PCDATA>\n   It is envisioned that a WebDAV ACL-aware administrative client\
    \ would\n   list the supported privileges in a dialog box, and allow the user\
    \ to\n   choose non-abstract privileges to apply in an ACE.  The privileges\n\
    \   tree is useful programmatically to map well-known privileges (defined\n  \
    \ by WebDAV or other standards groups) into privileges that are\n   supported\
    \ by any particular server implementation.  The privilege\n   tree also serves\
    \ to hide complexity in implementations allowing large\n   number of privileges\
    \ to be defined by displaying aggregates to the\n   user.\n"
- title: '5.3.1.  Example: Retrieving a List of Privileges Supported on a Resource'
  contents:
  - "5.3.1.  Example: Retrieving a List of Privileges Supported on a Resource\n  \
    \ This example shows a client request for the DAV:supported-privilege-\n   set\
    \ property on the resource http://www.example.com/papers/.  The\n   value of the\
    \ DAV:supported-privilege-set property is a tree of\n   supported privileges (using\
    \ \"[XML Namespace , localname]\" to identify\n   each privilege):\n   [DAV:,\
    \ all] (aggregate, abstract)\n      |\n      +-- [DAV:, read] (aggregate)\n  \
    \           |\n             +-- [DAV:, read-acl] (abstract)\n             +--\
    \ [DAV:, read-current-user-privilege-set] (abstract)\n      |\n      +-- [DAV:,\
    \ write] (aggregate)\n             |\n             +-- [DAV:, write-acl] (abstract)\n\
    \             +-- [DAV:, write-properties]\n             +-- [DAV:, write-content]\n\
    \      |\n      +-- [DAV:, unlock]\n   This privilege tree is not normative (except\
    \ that it reflects the\n   normative aggregation rules given in Section 3.12),\
    \ and many possible\n   privilege trees are possible.\n   >> Request <<\n   PROPFIND\
    \ /papers/ HTTP/1.1\n   Host: www.example.com\n   Content-type: text/xml; charset=\"\
    utf-8\"\n   Content-Length: xxx\n   Depth: 0\n   Authorization: Digest username=\"\
    gclemm\",\n     realm=\"users@example.com\", nonce=\"...\",\n     uri=\"/papers/\"\
    , response=\"...\", opaque=\"...\"\n   <?xml version=\"1.0\" encoding=\"utf-8\"\
    \ ?>\n   <D:propfind xmlns:D=\"DAV:\">\n     <D:prop>\n       <D:supported-privilege-set/>\n\
    \     </D:prop>\n   </D:propfind>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n\
    \   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   <?xml\
    \ version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus xmlns:D=\"DAV:\">\n\
    \     <D:response>\n       <D:href>http://www.example.com/papers/</D:href>\n \
    \      <D:propstat>\n         <D:prop>\n           <D:supported-privilege-set>\n\
    \             <D:supported-privilege>\n               <D:privilege><D:all/></D:privilege>\n\
    \              <D:abstract/>\n               <D:description xml:lang=\"en\">\n\
    \                 Any operation\n               </D:description>\n           \
    \    <D:supported-privilege>\n                 <D:privilege><D:read/></D:privilege>\n\
    \                 <D:description xml:lang=\"en\">\n                   Read any\
    \ object\n                 </D:description>\n                 <D:supported-privilege>\n\
    \                   <D:privilege><D:read-acl/></D:privilege>\n               \
    \    <D:abstract/>\n                   <D:description xml:lang=\"en\">Read ACL</D:description>\n\
    \                 </D:supported-privilege>\n                 <D:supported-privilege>\n\
    \                   <D:privilege>\n                     <D:read-current-user-privilege-set/>\n\
    \                   </D:privilege>\n                   <D:abstract/>\n       \
    \            <D:description xml:lang=\"en\">\n                     Read current\
    \ user privilege set property\n                   </D:description>\n         \
    \        </D:supported-privilege>\n               </D:supported-privilege>\n \
    \              <D:supported-privilege>\n                 <D:privilege><D:write/></D:privilege>\n\
    \                 <D:description xml:lang=\"en\">\n                   Write any\
    \ object\n                 </D:description>\n                 <D:supported-privilege>\n\
    \                   <D:privilege><D:write-acl/></D:privilege>\n              \
    \     <D:description xml:lang=\"en\">\n                     Write ACL\n      \
    \             </D:description>\n                   <D:abstract/>\n           \
    \      </D:supported-privilege>\n                 <D:supported-privilege>\n  \
    \                 <D:privilege><D:write-properties/></D:privilege>\n         \
    \          <D:description xml:lang=\"en\">\n                     Write properties\n\
    \                   </D:description>\n                 </D:supported-privilege>\n\
    \                 <D:supported-privilege>\n                   <D:privilege><D:write-content/></D:privilege>\n\
    \                   <D:description xml:lang=\"en\">\n                     Write\
    \ resource content\n                   </D:description>\n                 </D:supported-privilege>\n\
    \               </D:supported-privilege>\n               <D:supported-privilege>\n\
    \                 <D:privilege><D:unlock/></D:privilege>\n                 <D:description\
    \ xml:lang=\"en\">\n                   Unlock resource\n                 </D:description>\n\
    \               </D:supported-privilege>\n             </D:supported-privilege>\n\
    \           </D:supported-privilege-set>\n         </D:prop>\n         <D:status>HTTP/1.1\
    \ 200 OK</D:status>\n       </D:propstat>\n     </D:response>\n   </D:multistatus>\n"
- title: 5.4.  DAV:current-user-privilege-set
  contents:
  - "5.4.  DAV:current-user-privilege-set\n   DAV:current-user-privilege-set is a\
    \ protected property containing the\n   exact set of privileges (as computed by\
    \ the server) granted to the\n   currently authenticated HTTP user.  Aggregate\
    \ privileges and their\n   contained privileges are listed.  A user-agent can\
    \ use the value of\n   this property to adjust its user interface to make actions\n\
    \   inaccessible (e.g., by graying out a menu item or button) for which\n   the\
    \ current principal does not have permission.  This property is\n   also useful\
    \ for determining what operations the current principal can\n   perform, without\
    \ having to actually execute an operation.\n   <!ELEMENT current-user-privilege-set\
    \ (privilege*)>\n   <!ELEMENT privilege ANY>\n   If the current user is granted\
    \ a specific privilege, that privilege\n   must belong to the set of privileges\
    \ that may be set on this\n   resource.  Therefore, each element in the DAV:current-user-\n\
    \   privilege-set property MUST identify a non-abstract privilege from\n   the\
    \ DAV:supported-privilege-set property.\n"
- title: '5.4.1.  Example: Retrieving the User''s Current Set of Assigned'
  contents:
  - "5.4.1.  Example: Retrieving the User's Current Set of Assigned\n        Privileges\n\
    \   Continuing the example from Section 5.3.1, this example shows a\n   client\
    \ requesting the DAV:current-user-privilege-set property from\n   the resource\
    \ with URL http://www.example.com/papers/.  The username\n   of the principal\
    \ making the request is \"khare\", and Digest\n   authentication is used in the\
    \ request.  The principal with username\n   \"khare\" has been granted the DAV:read\
    \ privilege.  Since the DAV:read\n   privilege contains the DAV:read-acl and DAV:read-current-user-\n\
    \   privilege-set privileges (see Section 5.3.1), the principal with\n   username\
    \ \"khare\" can read the ACL property, and the DAV:current-\n   user-privilege-set\
    \ property.  However, the DAV:all, DAV:read-acl,\n   DAV:write-acl and DAV:read-current-user-privilege-set\
    \ privileges are\n   not listed in the value of DAV:current-user-privilege-set,\
    \ since (for\n   this example) they are abstract privileges.  DAV:write is not\
    \ listed\n   since the principal with username \"khare\" is not listed in an ACE\n\
    \   granting that principal write permission.\n   >> Request <<\n   PROPFIND /papers/\
    \ HTTP/1.1\n   Host: www.example.com\n   Content-type: text/xml; charset=\"utf-8\"\
    \n   Content-Length: xxx\n   Depth: 0\n   Authorization: Digest username=\"khare\"\
    ,\n     realm=\"users@example.com\", nonce=\"...\",\n     uri=\"/papers/\", response=\"\
    ...\", opaque=\"...\"\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:propfind\
    \ xmlns:D=\"DAV:\">\n     <D:prop>\n       <D:current-user-privilege-set/>\n \
    \    </D:prop>\n   </D:propfind>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n\
    \   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   <?xml\
    \ version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus xmlns:D=\"DAV:\">\n\
    \     <D:response>\n     <D:href>http://www.example.com/papers/</D:href>\n   \
    \  <D:propstat>\n       <D:prop>\n         <D:current-user-privilege-set>\n  \
    \         <D:privilege><D:read/></D:privilege>\n         </D:current-user-privilege-set>\n\
    \       </D:prop>\n       <D:status>HTTP/1.1 200 OK</D:status>\n     </D:propstat>\n\
    \     </D:response>\n   </D:multistatus>\n"
- title: 5.5.  DAV:acl
  contents:
  - "5.5.  DAV:acl\n   This is a protected property that specifies the list of access\n\
    \   control entries (ACEs), which define what principals are to get what\n   privileges\
    \ for this resource.\n   <!ELEMENT acl (ace*) >\n   Each DAV:ace element specifies\
    \ the set of privileges to be either\n   granted or denied to a single principal.\
    \  If the DAV:acl property is\n   empty, no principal is granted any privilege.\n\
    \   <!ELEMENT ace ((principal | invert), (grant|deny), protected?,\n         \
    \         inherited?)>\n"
- title: 5.5.1.  ACE Principal
  contents:
  - "5.5.1.  ACE Principal\n   The DAV:principal element identifies the principal\
    \ to which this ACE\n   applies.\n   <!ELEMENT principal (href | all | authenticated\
    \ | unauthenticated\n    | property | self)>\n   The current user matches DAV:href\
    \ only if that user is authenticated\n   as being (or being a member of) the principal\
    \ identified by the URL\n   contained by that DAV:href.\n   The current user always\
    \ matches DAV:all.\n   <!ELEMENT all EMPTY>\n   The current user matches DAV:authenticated\
    \ only if authenticated.\n   <!ELEMENT authenticated EMPTY>\n   The current user\
    \ matches DAV:unauthenticated only if not\n   authenticated.\n   <!ELEMENT unauthenticated\
    \ EMPTY>\n   DAV:all is the union of DAV:authenticated, and DAV:unauthenticated.\n\
    \   For a given request, the user matches either DAV:authenticated, or\n   DAV:unauthenticated,\
    \ but not both (that is, DAV:authenticated and\n   DAV:unauthenticated are disjoint\
    \ sets).\n   The current user matches a DAV:property principal in a DAV:acl\n\
    \   property of a resource only if the value of the identified property\n   of\
    \ that resource contains at most one DAV:href XML element, the URI\n   value of\
    \ DAV:href identifies a principal, and the current user is\n   authenticated as\
    \ being (or being a member of) that principal.  For\n   example, if the DAV:property\
    \ element contained <DAV:owner/>, the\n   current user would match the DAV:property\
    \ principal only if the\n   current user is authenticated as matching the principal\
    \ identified by\n   the DAV:owner property of the resource.\n   <!ELEMENT property\
    \ ANY>\n   The current user matches DAV:self in a DAV:acl property of the\n  \
    \ resource only if that resource is a principal and that principal\n   matches\
    \ the current user or, if the principal is a group, a member of\n   that group\
    \ matches the current user.\n   <!ELEMENT self EMPTY>\n   Some servers may support\
    \ ACEs applying to those users NOT matching\n   the current principal, e.g., all\
    \ users not in a particular group.\n   This can be done by wrapping the DAV:principal\
    \ element with\n   DAV:invert.\n   <!ELEMENT invert principal>\n"
- title: 5.5.2.  ACE Grant and Deny
  contents:
  - "5.5.2.  ACE Grant and Deny\n   Each DAV:grant or DAV:deny element specifies the\
    \ set of privileges to\n   be either granted or denied to the specified principal.\
    \  A DAV:grant\n   or DAV:deny element of the DAV:acl of a resource MUST only\
    \ contain\n   non-abstract elements specified in the DAV:supported-privilege-set\
    \ of\n   that resource.\n   <!ELEMENT grant (privilege+)>\n   <!ELEMENT deny (privilege+)>\n\
    \   <!ELEMENT privilege ANY>\n"
- title: 5.5.3.  ACE Protection
  contents:
  - "5.5.3.  ACE Protection\n   A server indicates an ACE is protected by including\
    \ the DAV:protected\n   element in the ACE.  If the ACL of a resource contains\
    \ an ACE with a\n   DAV:protected element, an attempt to remove that ACE from\
    \ the ACL\n   MUST fail.\n   <!ELEMENT protected EMPTY>\n"
- title: 5.5.4.  ACE Inheritance
  contents:
  - "5.5.4.  ACE Inheritance\n   The presence of a DAV:inherited element indicates\
    \ that this ACE is\n   inherited from another resource that is identified by the\
    \ URL\n   contained in a DAV:href element.  An inherited ACE cannot be modified\n\
    \   directly, but instead the ACL on the resource from which it is\n   inherited\
    \ must be modified.\n   Note that ACE inheritance is not the same as ACL initialization.\
    \  ACL\n   initialization defines the ACL that a newly created resource will use\n\
    \   (if not specified).  ACE inheritance refers to an ACE that is\n   logically\
    \ shared - where an update to the resource containing an ACE\n   will affect the\
    \ ACE of each resource that inherits that ACE.  The\n   method by which ACLs are\
    \ initialized or by which ACEs are inherited\n   is not defined by this document.\n\
    \   <!ELEMENT inherited (href)>\n"
- title: '5.5.5.  Example: Retrieving a Resource''s Access Control List'
  contents:
  - "5.5.5.  Example: Retrieving a Resource's Access Control List\n   Continuing the\
    \ example from Sections 5.3.1 and 5.4.1, this example\n   shows a client requesting\
    \ the DAV:acl property from the resource with\n   URL http://www.example.com/papers/.\
    \  There are two ACEs defined in\n   this ACL:\n   ACE #1: The group identified\
    \ by URL http://www.example.com/acl/\n   groups/maintainers (the group of site\
    \ maintainers) is granted\n   DAV:write privilege.  Since (for this example) DAV:write\
    \ contains the\n   DAV:write-acl privilege (see Section 5.3.1), this means the\n\
    \   \"maintainers\" group can also modify the access control list.\n   ACE #2:\
    \ All principals (DAV:all) are granted the DAV:read privilege.\n   Since (for\
    \ this example) DAV:read contains DAV:read-acl and\n   DAV:read-current-user-privilege-set,\
    \ this means all users (including\n   all members of the \"maintainers\" group)\
    \ can read the DAV:acl property\n   and the DAV:current-user-privilege-set property.\n\
    \   >> Request <<\n   PROPFIND /papers/ HTTP/1.1\n   Host: www.example.com\n \
    \  Content-type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   Depth:\
    \ 0\n   Authorization: Digest username=\"masinter\",\n     realm=\"users@example.com\"\
    , nonce=\"...\",\n     uri=\"/papers/\", response=\"...\", opaque=\"...\"\n  \
    \ <D:propfind xmlns:D=\"DAV:\">\n     <D:prop>\n       <D:acl/>\n     </D:prop>\n\
    \   </D:propfind>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type:\
    \ text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   <D:multistatus xmlns:D=\"\
    DAV:\">\n     <D:response>\n       <D:href>http://www.example.com/papers/</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:acl>\n           <D:ace>\n\
    \             <D:principal>\n               <D:href\n               >http://www.example.com/acl/groups/maintainers</D:href>\n\
    \             </D:principal>\n             <D:grant>\n               <D:privilege><D:write/></D:privilege>\n\
    \             </D:grant>\n           </D:ace>\n           <D:ace>\n          \
    \   <D:principal>\n               <D:all/>\n             </D:principal>\n    \
    \         <D:grant>\n               <D:privilege><D:read/></D:privilege>\n   \
    \          </D:grant>\n           </D:ace>\n         </D:acl>\n         </D:prop>\n\
    \         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n     </D:response>\n\
    \   </D:multistatus>\n"
- title: 5.6.  DAV:acl-restrictions
  contents:
  - "5.6.  DAV:acl-restrictions\n   This protected property defines the types of ACLs\
    \ supported by this\n   server, to avoid clients needlessly getting errors.  When\
    \ a client\n   tries to set an ACL via the ACL method, the server may reject the\n\
    \   attempt to set the ACL as specified.  The following properties\n   indicate\
    \ the restrictions the client must observe before setting an\n   ACL:\n   <grant-only>\
    \ Deny ACEs are not supported\n   <no-invert> Inverted ACEs are not supported\n\
    \   <deny-before-grant> All deny ACEs must occur before any grant ACEs\n   <required-principal>\
    \ Indicates which principals are required to be\n      present\n   <!ELEMENT acl-restrictions\
    \ (grant-only?, no-invert?,\n                               deny-before-grant?,\n\
    \                               required-principal?)>\n"
- title: 5.6.1.  DAV:grant-only
  contents:
  - "5.6.1.  DAV:grant-only\n   This element indicates that ACEs with deny clauses\
    \ are not allowed.\n   <!ELEMENT grant-only EMPTY>\n"
- title: 5.6.2.  DAV:no-invert ACE Constraint
  contents:
  - "5.6.2.  DAV:no-invert ACE Constraint\n   This element indicates that ACEs with\
    \ the <invert> element are not\n   allowed.\n   <!ELEMENT no-invert EMPTY>\n"
- title: 5.6.3.  DAV:deny-before-grant
  contents:
  - "5.6.3.  DAV:deny-before-grant\n   This element indicates that all deny ACEs must\
    \ precede all grant\n   ACEs.\n   <!ELEMENT deny-before-grant EMPTY>\n"
- title: 5.6.4.  Required Principals
  contents:
  - "5.6.4.  Required Principals\n   The required principal elements identify which\
    \ principals must have\n   an ACE defined in the ACL.\n   <!ELEMENT required-principal\n\
    \     (all? | authenticated? | unauthenticated? | self? | href* |\n      property*)>\n\
    \   For example, the following element requires that the ACL contain a\n   DAV:owner\
    \ property ACE:\n   <D:required-principal xmlns:D=\"DAV:\">\n     <D:property><D:owner/></D:property>\n\
    \   </D:required-principal>\n"
- title: '5.6.5.  Example: Retrieving DAV:acl-restrictions'
  contents:
  - "5.6.5.  Example: Retrieving DAV:acl-restrictions\n   In this example, the client\
    \ requests the value of the DAV:acl-\n   restrictions property.  Digest authentication\
    \ provides credentials\n   for the principal operating the client.\n   >> Request\
    \ <<\n   PROPFIND /papers/ HTTP/1.1\n   Host: www.example.com\n   Content-type:\
    \ text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   Depth: 0\n   Authorization:\
    \ Digest username=\"srcarter\",\n     realm=\"users@example.com\", nonce=\"...\"\
    ,\n     uri=\"/papers/\", response=\"...\", opaque=\"...\"\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\" ?>\n   <D:propfind xmlns:D=\"DAV:\">\n     <D:prop>\n\
    \       <D:acl-restrictions/>\n     </D:prop>\n   </D:propfind>\n   >> Response\
    \ <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\
    \n   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus\
    \ xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>http://www.example.com/papers/</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:acl-restrictions>\n   \
    \          <D:grant-only/>\n             <D:required-principal>\n            \
    \   <D:all/>\n             </D:required-principal>\n           </D:acl-restrictions>\n\
    \         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n\
    \     </D:response>\n   </D:multistatus>\n"
- title: 5.7.  DAV:inherited-acl-set
  contents:
  - "5.7.  DAV:inherited-acl-set\n   This protected property contains a set of URLs\
    \ that identify other\n   resources that also control the access to this resource.\
    \  To have a\n   privilege on a resource, not only must the ACL on that resource\n\
    \   (specified in the DAV:acl property of that resource) grant the\n   privilege,\
    \ but so must the ACL of each resource identified in the\n   DAV:inherited-acl-set\
    \ property of that resource.  Effectively, the\n   privileges granted by the current\
    \ ACL are ANDed with the privileges\n   granted by each inherited ACL.\n   <!ELEMENT\
    \ inherited-acl-set (href*)>\n"
- title: 5.8.  DAV:principal-collection-set
  contents:
  - "5.8.  DAV:principal-collection-set\n   This protected property of a resource\
    \ contains a set of URLs that\n   identify the root collections that contain the\
    \ principals that are\n   available on the server that implements this resource.\
    \  A WebDAV\n   Access Control Protocol user agent could use the contents of\n\
    \   DAV:principal-collection-set to retrieve the DAV:displayname property\n  \
    \ (specified in Section 13.2 of [RFC2518]) of all principals on that\n   server,\
    \ thereby yielding human-readable names for each principal that\n   could be displayed\
    \ in a user interface.\n   <!ELEMENT principal-collection-set (href*)>\n   Since\
    \ different servers can control different parts of the URL\n   namespace, different\
    \ resources on the same host MAY have different\n   DAV:principal-collection-set\
    \ values.  The collections specified in\n   the DAV:principal-collection-set MAY\
    \ be located on different hosts\n   from the resource. The URLs in DAV:principal-collection-set\
    \ SHOULD be\n   http or https scheme URLs.  For security and scalability reasons,\
    \ a\n   server MAY report only a subset of the entire set of known principal\n\
    \   collections, and therefore clients should not assume they have\n   retrieved\
    \ an exhaustive listing.  Additionally, a server MAY elect to\n   report none\
    \ of the principal collections it knows about, in which\n   case the property\
    \ value would be empty.\n   The value of DAV:principal-collection-set gives the\
    \ scope of the\n   DAV:principal-property-search REPORT (defined in Section 9.4).\n\
    \   Clients use the DAV:principal-property-search REPORT to populate\n   their\
    \ user interface with a list of principals.  Therefore, servers\n   that limit\
    \ a client's ability to obtain principal information will\n   interfere with the\
    \ client's ability to manipulate access control\n   lists, due to the difficulty\
    \ of getting the URL of a principal for\n   use in an ACE.\n"
- title: '5.8.1.  Example: Retrieving DAV:principal-collection-set'
  contents:
  - "5.8.1.  Example: Retrieving DAV:principal-collection-set\n   In this example,\
    \ the client requests the value of the DAV:principal-\n   collection-set property\
    \ on the collection resource identified by URL\n   http://www.example.com/papers/.\
    \  The property contains the two URLs,\n   http://www.example.com/acl/users/ and\
    \ http://\n   www.example.com/acl/groups/, both wrapped in DAV:href XML elements.\n\
    \   Digest authentication provides credentials for the principal\n   operating\
    \ the client.\n   The client might reasonably follow this request with two separate\n\
    \   PROPFIND requests to retrieve the DAV:displayname property of the\n   members\
    \ of the two collections (/acl/users and /acl/groups).  This\n   information could\
    \ be used when displaying a user interface for\n   creating access control entries.\n\
    \   >> Request <<\n   PROPFIND /papers/ HTTP/1.1\n   Host: www.example.com\n \
    \  Content-type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   Depth:\
    \ 0\n   Authorization: Digest username=\"yarong\",\n     realm=\"users@example.com\"\
    , nonce=\"...\",\n     uri=\"/papers/\", response=\"...\", opaque=\"...\"\n  \
    \ <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:propfind xmlns:D=\"DAV:\"\
    >\n     <D:prop>\n       <D:principal-collection-set/>\n     </D:prop>\n   </D:propfind>\n\
    \   >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=\"\
    utf-8\"\n   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\
    \   <D:multistatus xmlns:D=\"DAV:\">\n     <D:response>\n       <D:href>http://www.example.com/papers/</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:principal-collection-set>\n\
    \             <D:href>http://www.example.com/acl/users/</D:href>\n           \
    \  <D:href>http://www.example.com/acl/groups/</D:href>\n           </D:principal-collection-set>\n\
    \         </D:prop>\n       <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n\
    \     </D:response>\n   </D:multistatus>\n"
- title: '5.9.  Example: PROPFIND to retrieve access control properties'
  contents:
  - "5.9.  Example: PROPFIND to retrieve access control properties\n   The following\
    \ example shows how access control information can be\n   retrieved by using the\
    \ PROPFIND method to fetch the values of the\n   DAV:owner, DAV:supported-privilege-set,\
    \ DAV:current-user-privilege-\n   set, and DAV:acl properties.\n   >> Request\
    \ <<\n   PROPFIND /top/container/ HTTP/1.1\n   Host: www.example.com\n   Content-type:\
    \ text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   Depth: 0\n   Authorization:\
    \ Digest username=\"ejw\",\n     realm=\"users@example.com\", nonce=\"...\",\n\
    \     uri=\"/top/container/\", response=\"...\", opaque=\"...\"\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\" ?>\n   <D:propfind xmlns:D=\"DAV:\">\n     <D:prop>\n\
    \       <D:owner/>\n       <D:supported-privilege-set/>\n       <D:current-user-privilege-set/>\n\
    \       <D:acl/>\n     </D:prop>\n   </D:propfind>\n   >> Response <<\n   HTTP/1.1\
    \ 207 Multi-Status\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus xmlns:D=\"\
    DAV:\"\n                  xmlns:A=\"http://www.example.com/acl/\">\n     <D:response>\n\
    \       <D:href>http://www.example.com/top/container/</D:href>\n       <D:propstat>\n\
    \         <D:prop>\n           <D:owner>\n             <D:href>http://www.example.com/users/gclemm</D:href>\n\
    \           </D:owner>\n           <D:supported-privilege-set>\n             <D:supported-privilege>\n\
    \               <D:privilege><D:all/></D:privilege>\n               <D:abstract/>\n\
    \               <D:description xml:lang=\"en\">\n                 Any operation\n\
    \               </D:description>\n               <D:supported-privilege>\n   \
    \              <D:privilege><D:read/></D:privilege>\n                 <D:description\
    \ xml:lang=\"en\">\n                   Read any object\n                 </D:description>\n\
    \               </D:supported-privilege>\n               <D:supported-privilege>\n\
    \                 <D:privilege><D:write/></D:privilege>\n                 <D:abstract/>\n\
    \                 <D:description xml:lang=\"en\">\n                   Write any\
    \ object\n                 </D:description>\n                 <D:supported-privilege>\n\
    \                   <D:privilege><A:create/></D:privilege>\n                 \
    \  <D:description xml:lang=\"en\">\n                     Create an object\n  \
    \                 </D:description>\n                 </D:supported-privilege>\n\
    \                 <D:supported-privilege>\n                   <D:privilege><A:update/></D:privilege>\n\
    \                   <D:description xml:lang=\"en\">\n                     Update\
    \ an object\n                   </D:description>\n                 </D:supported-privilege>\n\
    \               </D:supported-privilege>\n               <D:supported-privilege>\n\
    \                 <D:privilege><A:delete/></D:privilege>\n                 <D:description\
    \ xml:lang=\"en\">\n                   Delete an object\n                 </D:description>\n\
    \               </D:supported-privilege>\n               <D:supported-privilege>\n\
    \                 <D:privilege><D:read-acl/></D:privilege>\n                 <D:description\
    \ xml:lang=\"en\">\n                   Read the ACL\n                 </D:description>\n\
    \               </D:supported-privilege>\n               <D:supported-privilege>\n\
    \                 <D:privilege><D:write-acl/></D:privilege>\n                \
    \ <D:description xml:lang=\"en\">\n                   Write the ACL\n        \
    \         </D:description>\n               </D:supported-privilege>\n        \
    \     </D:supported-privilege>\n           </D:supported-privilege-set>\n    \
    \       <D:current-user-privilege-set>\n             <D:privilege><D:read/></D:privilege>\n\
    \             <D:privilege><D:read-acl/></D:privilege>\n           </D:current-user-privilege-set>\n\
    \           <D:acl>\n             <D:ace>\n               <D:principal>\n    \
    \             <D:href>http://www.example.com/users/esedlar</D:href>\n        \
    \       </D:principal>\n               <D:grant>\n                 <D:privilege><D:read/></D:privilege>\n\
    \                 <D:privilege><D:write/></D:privilege>\n                 <D:privilege><D:read-acl/></D:privilege>\n\
    \               </D:grant>\n             </D:ace>\n             <D:ace>\n    \
    \           <D:principal>\n                 <D:href>http://www.example.com/groups/mrktng</D:href>\n\
    \               </D:principal>\n               <D:deny>\n                 <D:privilege><D:read/></D:privilege>\n\
    \               </D:deny>\n             </D:ace>\n             <D:ace>\n     \
    \          <D:principal>\n                 <D:property><D:owner/></D:property>\n\
    \               </D:principal>\n               <D:grant>\n                 <D:privilege><D:read-acl/></D:privilege>\n\
    \                 <D:privilege><D:write-acl/></D:privilege>\n               </D:grant>\n\
    \             </D:ace>\n             <D:ace>\n               <D:principal><D:all/></D:principal>\n\
    \               <D:grant>\n                 <D:privilege><D:read/></D:privilege>\n\
    \               </D:grant>\n               <D:inherited>\n                 <D:href>http://www.example.com/top</D:href>\n\
    \               </D:inherited>\n             </D:ace>\n           </D:acl>\n \
    \        </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n\
    \     </D:response>\n   </D:multistatus>\n   The value of the DAV:owner property\
    \ is a single DAV:href XML element\n   containing the URL of the principal that\
    \ owns this resource.\n   The value of the DAV:supported-privilege-set property\
    \ is a tree of\n   supported privileges (using \"[XML Namespace , localname]\"\
    \ to identify\n   each privilege):\n   [DAV:, all] (aggregate, abstract)\n   \
    \   |\n      +-- [DAV:, read]\n      +-- [DAV:, write] (aggregate, abstract)\n\
    \             |\n             +-- [http://www.example.com/acl, create]\n     \
    \        +-- [http://www.example.com/acl, update]\n             +-- [http://www.example.com/acl,\
    \ delete]\n      +-- [DAV:, read-acl]\n      +-- [DAV:, write-acl]\n   The DAV:current-user-privilege-set\
    \ property contains two privileges,\n   DAV:read, and DAV:read-acl.  This indicates\
    \ that the current\n   authenticated user only has the ability to read the resource,\
    \ and\n   read the DAV:acl property on the resource.  The DAV:acl property\n \
    \  contains a set of four ACEs:\n   ACE #1: The principal identified by the URL\
    \ http://www.example.com/\n   users/esedlar is granted the DAV:read, DAV:write,\
    \ and DAV:read-acl\n   privileges.\n   ACE #2: The principals identified by the\
    \ URL http://www.example.com/\n   groups/mrktng are denied the DAV:read privilege.\
    \  In this example,\n   the principal URL identifies a group.\n   ACE #3: In this\
    \ ACE, the principal is a property principal,\n   specifically the DAV:owner property.\
    \  When evaluating this ACE, the\n   value of the DAV:owner property is retrieved,\
    \ and is examined to see\n   if it contains a DAV:href XML element.  If so, the\
    \ URL within the\n   DAV:href element is read, and identifies a principal.  In\
    \ this ACE,\n   the owner is granted DAV:read-acl, and DAV:write-acl privileges.\n\
    \   ACE #4: This ACE grants the DAV:all principal (all users) the\n   DAV:read\
    \ privilege.  This ACE is inherited from the resource http://\n   www.example.com/top,\
    \ the parent collection of this resource.\n"
- title: 6.  ACL Evaluation
  contents:
  - "6.  ACL Evaluation\n   WebDAV ACLs are evaluated in similar manner as ACLs on\
    \ Windows NT and\n   in NFSv4 [RFC3530]).  An ACL is evaluated to determine whether\
    \ or not\n   access will be granted for a WebDAV request.  ACEs are maintained\
    \ in\n   a particular order, and are evaluated until all of the permissions\n\
    \   required by the current request have been granted, at which point the\n  \
    \ ACL evaluation is terminated and access is granted.  If, during ACL\n   evaluation,\
    \ a <deny> ACE (matching the current user) is encountered\n   for a privilege\
    \ which has not yet been granted, the ACL evaluation is\n   terminated and access\
    \ is denied.  Failure to have all required\n   privileges granted results in access\
    \ being denied.\n   Note that the semantics of many other existing ACL systems\
    \ may be\n   represented via this mechanism, by mixing deny and grant ACEs.  For\n\
    \   example, consider the standard \"rwx\" privilege scheme used by UNIX.\n  \
    \ In this scheme, if the current user is the owner of the file, access\n   is\
    \ granted if the corresponding privilege bit is set and denied if\n   not set,\
    \ regardless of the permissions set on the file's group and\n   for the world.\
    \  An ACL for UNIX permissions of \"r--rw-r--\" might be\n   constructed like:\n\
    \   <D:acl>\n     <D:ace>\n       <D:principal>\n         <D:property><D:owner/></D:property>\n\
    \       </D:principal>\n       <D:grant>\n         <D:privilege><D:read/></D:privilege>\n\
    \       </D:grant>\n     </D:ace>\n     <D:ace>\n       <D:principal>\n      \
    \   <D:property><D:owner/></D:property>\n       </D:principal>\n       <D:deny>\n\
    \         <D:privilege><D:all/></D:privilege>\n       </D:deny>\n     </D:ace>\n\
    \     <D:ace>\n       <D:principal>\n         <D:property><D:group/></D:property>\n\
    \       </D:principal>\n       <D:grant>\n         <D:privilege><D:read/></D:privilege>\n\
    \         <D:privilege><D:write/></D:privilege>\n       </D:grant>\n     </D:ace>\n\
    \     <D:ace>\n       <D:principal>\n         <D:property><D:group/></D:property>\n\
    \       </D:principal>\n       <D:deny>\n         <D:privilege><D:all/></D:privilege>\n\
    \       </D:deny>\n     </D:ace>\n     <D:ace>\n       <D:principal><D:all></D:principal>\n\
    \       <D:grant>\n         <D:privilege><D:read/></D:privilege>\n       </D:grant>\n\
    \     </D:ace>\n   </D:acl>\n   and the <acl-restrictions> would be defined as:\n\
    \   <D:no-invert/>\n   <D:required-principal>\n     <D:all/>\n     <D:property><D:owner/></D:property>\n\
    \     <D:property><D:group/><D:group/>\n   </D:required-principal>\n   Note that\
    \ the client can still get errors from a UNIX server in spite\n   of obeying the\
    \ <acl-restrictions>, including <D:allowed-principal>\n   (adding an ACE specifying\
    \ a principal other than the ones in the ACL\n   above) or <D:ace-conflict> (by\
    \ trying to reorder the ACEs in the\n   example above), as these particular implementation\
    \ semantics are too\n   complex to be captured with the simple (but general) declarative\n\
    \   restrictions.\n"
- title: 7.  Access Control and existing methods
  contents:
  - "7.  Access Control and existing methods\n   This section defines the impact of\
    \ access control functionality on\n   existing methods.\n"
- title: 7.1.  Any HTTP method
  contents:
  - '7.1.  Any HTTP method

    '
- title: 7.1.1.  Error Handling
  contents:
  - "7.1.1.  Error Handling\n   The WebDAV ACL mechanism requires the usage of HTTP\
    \ method\n   \"preconditions\" as described in section 1.6 of RFC3253 for ALL\
    \ HTTP\n   methods.  All HTTP methods have an additional precondition called\n\
    \   DAV:need-privileges.  If an HTTP method fails due to insufficient\n   privileges,\
    \ the response body to the \"403 Forbidden\" error MUST\n   contain the <DAV:error>\
    \ element, which in turn contains the\n   <DAV:need-privileges> element, which\
    \ contains one or more\n   <DAV:resource> elements indicating which resource had\
    \ insufficient\n   privileges, and what the lacking privileges were:\n   <!ELEMENT\
    \ need-privileges (resource)* >\n   <!ELEMENT resource ( href , privilege ) >\n\
    \   Since some methods require multiple permissions on multiple\n   resources,\
    \ this information is needed to resolve any ambiguity.\n   There is no requirement\
    \ that all privilege violations be reported -\n   for implementation reasons,\
    \ some servers may only report the first\n   privilege violation.  For example:\n\
    \   >> Request <<\n   MOVE /a/b/ HTTP/1.1\n   Host: www.example.com\n   Destination:\
    \ http://www.example.com/c/d\n   >> Response <<\n   HTTP/1.1 403 Forbidden\n \
    \  Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   <D:error\
    \ xmlns:D=\"DAV:\">\n     <D:need-privileges>\n       <D:resource>\n         <D:href>/a</D:href>\n\
    \         <D:privilege><D:unbind/></D:privilege>\n       </D:resource>\n     \
    \  <D:resource>\n         <D:href>/c</D:href>\n         <D:privilege><D:bind/></D:privilege>\n\
    \       </D:resource>\n     </D:need-privileges>\n   </D:error>\n"
- title: 7.2.  OPTIONS
  contents:
  - "7.2.  OPTIONS\n   If the server supports access control, it MUST return \"access-\n\
    \   control\" as a field in the DAV response header from an OPTIONS\n   request\
    \ on any resource implemented by that server.  A value of\n   \"access-control\"\
    \ in the DAV header MUST indicate that the server\n   supports all MUST level\
    \ requirements and REQUIRED features specified\n   in this document.\n"
- title: 7.2.1.  Example - OPTIONS
  contents:
  - "7.2.1.  Example - OPTIONS\n   >> Request <<\n   OPTIONS /foo.html HTTP/1.1\n\
    \   Host: www.example.com\n   Content-Length: 0\n   >> Response <<\n   HTTP/1.1\
    \ 200 OK\n   DAV: 1, 2, access-control\n   Allow: OPTIONS, GET, PUT, PROPFIND,\
    \ PROPPATCH, ACL\n   In this example, the OPTIONS response indicates that the\
    \ server\n   supports access control and that /foo.html can have its access\n\
    \   control list modified by the ACL method.\n"
- title: 7.3.  MOVE
  contents:
  - "7.3.  MOVE\n   When a resource is moved from one location to another due to a\
    \ MOVE\n   request, the non-inherited and non-protected ACEs in the DAV:acl\n\
    \   property of the resource MUST NOT be modified, or the MOVE request\n   fails.\
    \  Handling of inherited and protected ACEs is intentionally\n   undefined to\
    \ give server implementations flexibility in how they\n   implement ACE inheritance\
    \ and protection.\n"
- title: 7.4.  COPY
  contents:
  - "7.4.  COPY\n   The DAV:acl property on the resource at the destination of a COPY\n\
    \   MUST be the same as if the resource was created by an individual\n   resource\
    \ creation request (e.g., MKCOL, PUT).  Clients wishing to\n   preserve the DAV:acl\
    \ property across a copy need to read the DAV:acl\n   property prior to the COPY,\
    \ then perform an ACL operation on the new\n   resource at the destination to\
    \ restore, insofar as this is possible,\n   the original access control list.\n"
- title: 7.5.  LOCK
  contents:
  - "7.5.  LOCK\n   A lock on a resource ensures that only the lock owner can modify\
    \ ACEs\n   that are not inherited and not protected  (these are the only ACEs\n\
    \   that a client can modify with an ACL request).  A lock does not\n   protect\
    \ inherited or protected ACEs, since a client cannot modify\n   them with an ACL\
    \ request on that resource.\n"
- title: 8.  Access Control Methods
  contents:
  - '8.  Access Control Methods

    '
- title: 8.1.  ACL
  contents:
  - "8.1.  ACL\n   The ACL method modifies the access control list (which can be read\n\
    \   via the DAV:acl property) of a resource.  Specifically, the ACL\n   method\
    \ only permits modification to ACEs that are not inherited, and\n   are not protected.\
    \  An ACL method invocation modifies all non-\n   inherited and non-protected\
    \ ACEs in a resource's access control list\n   to exactly match the ACEs contained\
    \ within in the DAV:acl XML element\n   (specified in Section 5.5) of the request\
    \ body.  An ACL request body\n   MUST contain only one DAV:acl XML element.  Unless\
    \ the non-inherited\n   and non-protected ACEs of the DAV:acl property of the\
    \ resource can be\n   updated to be exactly the value specified in the ACL request,\
    \ the ACL\n   request MUST fail.\n   It is possible that the ACEs visible to the\
    \ current user in the\n   DAV:acl property may only be a portion of the complete\
    \ set of ACEs on\n   that resource.  If this is the case, an ACL request only\
    \ modifies the\n   set of ACEs visible to the current user, and does not affect\
    \ any\n   non-visible ACE.\n   In order to avoid overwriting DAV:acl changes by\
    \ another client, a\n   client SHOULD acquire a WebDAV lock on the resource before\
    \ retrieving\n   the DAV:acl property of a resource that it intends on updating.\n\
    \      Implementation Note: Two common operations are to add or remove an\n  \
    \    ACE from an existing access control list.  To accomplish this, a\n      client\
    \ uses the PROPFIND method to retrieve the value of the\n      DAV:acl property,\
    \ then parses the returned access control list to\n      remove all inherited\
    \ and protected ACEs (these ACEs are tagged\n      with the DAV:inherited and\
    \ DAV:protected XML elements).  In the\n      remaining set of non-inherited,\
    \ non-protected ACEs, the client can\n      add or remove one or more ACEs before\
    \ submitting the final ACE set\n      in the request body of the ACL method.\n"
- title: 8.1.1.  ACL Preconditions
  contents:
  - "8.1.1.  ACL Preconditions\n   An implementation MUST enforce the following constraints\
    \ on an ACL\n   request.  If the constraint is violated, a 403 (Forbidden) or\
    \ 409\n   (Conflict) response MUST be returned and the indicated XML element\n\
    \   MUST be returned as a child of a top level DAV:error element in an\n   XML\
    \ response body.\n   Though these status elements are generally expressed as empty\
    \ XML\n   elements (and are defined as EMPTY in the DTD), implementations MAY\n\
    \   return additional descriptive XML elements as children of the status\n   element.\
    \  Clients MUST be able to accept children of these status\n   elements.  Clients\
    \ that do not understand the additional XML elements\n   should ignore them.\n\
    \   (DAV:no-ace-conflict): The ACEs submitted in the ACL request MUST NOT\n  \
    \ conflict with each other.  This is a catchall error code indicating\n   that\
    \ an implementation-specific ACL restriction has been violated.\n   (DAV:no-protected-ace-conflict):\
    \ The ACEs submitted in the ACL\n   request MUST NOT conflict with the protected\
    \ ACEs on the resource.\n   For example, if the resource has a protected ACE granting\
    \ DAV:write\n   to a given principal, then it would not be consistent if the ACL\n\
    \   request submitted an ACE denying DAV:write to the same principal.\n   (DAV:no-inherited-ace-conflict):\
    \ The ACEs submitted in the ACL\n   request MUST NOT conflict with the inherited\
    \ ACEs on the resource.\n   For example, if the resource inherits an ACE from\
    \ its parent\n   collection granting DAV:write to a given principal, then it would\
    \ not\n   be consistent if the ACL request submitted an ACE denying DAV:write\n\
    \   to the same principal.  Note that reporting of this error will be\n   implementation-dependent.\
    \  Implementations MUST either report this\n   error or allow the ACE to be set,\
    \ and then let normal ACE evaluation\n   rules determine whether the new ACE has\
    \ any impact on the privileges\n   available to a specific principal.\n   (DAV:limited-number-of-aces):\
    \ The number of ACEs submitted in the ACL\n   request MUST NOT exceed the number\
    \ of ACEs allowed on that resource.\n   However, ACL-compliant servers MUST support\
    \ at least one ACE granting\n   privileges to a single principal, and one ACE\
    \ granting privileges to\n   a group.\n   (DAV:deny-before-grant): All non-inherited\
    \ deny ACEs MUST precede all\n   non-inherited grant ACEs.\n   (DAV:grant-only):\
    \ The ACEs submitted in the ACL request MUST NOT\n   include a deny ACE.  This\
    \ precondition applies only when the ACL\n   restrictions of the resource include\
    \ the DAV:grant-only constraint\n   (defined in Section 5.6.1).\n   (DAV:no-invert):\
    \  The ACL request MUST NOT include a DAV:invert\n   element.  This precondition\
    \ applies only when the ACL semantics of\n   the resource includes the DAV:no-invert\
    \ constraint (defined in\n   Section 5.6.2).\n   (DAV:no-abstract): The ACL request\
    \ MUST NOT attempt to grant or deny\n   an abstract privilege (see Section 5.3).\n\
    \   (DAV:not-supported-privilege): The ACEs submitted in the ACL request\n   MUST\
    \ be supported by the resource.\n   (DAV:missing-required-principal): The result\
    \ of the ACL request MUST\n   have at least one ACE for each principal identified\
    \ in a\n   DAV:required-principal XML element in the ACL semantics of that\n \
    \  resource (see Section 5.5).\n   (DAV:recognized-principal): Every principal\
    \ URL in the ACL request\n   MUST identify a principal resource.\n   (DAV:allowed-principal):\
    \ The principals specified in the ACEs\n   submitted in the ACL request MUST be\
    \ allowed as principals for the\n   resource.  For example, a server where only\
    \ authenticated principals\n   can access resources would not allow the DAV:all\
    \ or\n   DAV:unauthenticated principals to be used in an ACE, since these\n  \
    \ would allow unauthenticated access to resources.\n"
- title: '8.1.2.  Example: the ACL method'
  contents:
  - "8.1.2.  Example: the ACL method\n   In the following example, user \"fielding\"\
    , authenticated by\n   information in the Authorization header, grants the principal\n\
    \   identified by the URL http://www.example.com/users/esedlar (i.e., the\n  \
    \ user \"esedlar\") read and write privileges, grants the owner of the\n   resource\
    \ read-acl and write-acl privileges, and grants everyone read\n   privileges.\n\
    \   >> Request <<\n   ACL /top/container/ HTTP/1.1\n   Host: www.example.com\n\
    \   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   Authorization:\
    \ Digest username=\"fielding\",\n     realm=\"users@example.com\", nonce=\"...\"\
    ,\n     uri=\"/top/container/\", response=\"...\", opaque=\"...\"\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\" ?>\n   <D:acl xmlns:D=\"DAV:\">\n     <D:ace>\n     \
    \  <D:principal>\n         <D:href>http://www.example.com/users/esedlar</D:href>\n\
    \       </D:principal>\n       <D:grant>\n         <D:privilege><D:read/></D:privilege>\n\
    \         <D:privilege><D:write/></D:privilege>\n       </D:grant>\n     </D:ace>\n\
    \     <D:ace>\n       <D:principal>\n         <D:property><D:owner/></D:property>\n\
    \       </D:principal>\n       <D:grant>\n         <D:privilege><D:read-acl/></D:privilege>\n\
    \         <D:privilege><D:write-acl/></D:privilege>\n       </D:grant>\n     </D:ace>\n\
    \     <D:ace>\n       <D:principal><D:all/></D:principal>\n       <D:grant>\n\
    \         <D:privilege><D:read/></D:privilege>\n       </D:grant>\n     </D:ace>\n\
    \   </D:acl>\n   >> Response <<\n   HTTP/1.1 200 OK\n"
- title: '8.1.3.  Example: ACL method failure due to protected ACE conflict'
  contents:
  - "8.1.3.  Example: ACL method failure due to protected ACE conflict\n   In the\
    \ following request, user \"fielding\", authenticated by\n   information in the\
    \ Authorization header, attempts to deny the\n   principal identified by the URL\
    \ http://www.example.com/users/esedlar\n   (i.e., the user \"esedlar\") write\
    \ privileges.  Prior to the request,\n   the DAV:acl property on the resource\
    \ contained a protected ACE (see\n   Section 5.5.3) granting DAV:owner the DAV:read\
    \ and DAV:write\n   privileges.  The principal identified by URL http://www.example.com/\n\
    \   users/esedlar is the owner of the resource.  The ACL method\n   invocation\
    \ fails because the submitted ACE conflicts with the\n   protected ACE, thus violating\
    \ the semantics of ACE protection.\n   >> Request <<\n   ACL /top/container/ HTTP/1.1\n\
    \   Host: www.example.com\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxxx\n   Authorization: Digest username=\"fielding\",\n     realm=\"users@example.com\"\
    , nonce=\"...\",\n     uri=\"/top/container/\", response=\"...\", opaque=\"...\"\
    \n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:acl xmlns:D=\"DAV:\">\n\
    \     <D:ace>\n       <D:principal>\n         <D:href>http://www.example.com/users/esedlar</D:href>\n\
    \       </D:principal>\n       <D:deny>\n         <D:privilege><D:write/></D:privilege>\n\
    \       </D:deny>\n     </D:ace>\n   </D:acl>\n   >> Response <<\n   HTTP/1.1\
    \ 403 Forbidden\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:error xmlns:D=\"\
    DAV:\">\n     <D:no-protected-ace-conflict/>\n   </D:error>\n"
- title: '8.1.4.  Example: ACL method failure due to an inherited ACE conflict'
  contents:
  - "8.1.4.  Example: ACL method failure due to an inherited ACE conflict\n   In the\
    \ following request, user \"ejw\", authenticated by information in\n   the Authorization\
    \ header, tries to change the access control list on\n   the resource http://www.example.com/top/index.html.\
    \  This resource\n   has two inherited ACEs.\n   Inherited ACE #1 grants the principal\
    \ identified by URL http://\n   www.example.com/users/ejw (i.e., the user \"ejw\"\
    ) http://\n   www.example.com/privs/write-all and DAV:read-acl privileges.  On\
    \ this\n   server, http://www.example.com/privs/write-all is an aggregate\n  \
    \ privilege containing DAV:write, and DAV:write-acl.\n   Inherited ACE #2 grants\
    \ principal DAV:all the DAV:read privilege.\n   The request attempts to set a\
    \ (non-inherited) ACE, denying the\n   principal identified by the URL http://www.example.com/users/ejw\n\
    \   (i.e., the user \"ejw\") DAV:write permission.  This conflicts with\n   inherited\
    \ ACE #1.  Note that the decision to report an inherited ACE\n   conflict is specific\
    \ to this server implementation.  Another server\n   implementation could have\
    \ allowed the new ACE to be set, and then\n   used normal ACE evaluation rules\
    \ to determine whether the new ACE has\n   any impact on the privileges available\
    \ to a principal.\n   >> Request <<\n   ACL /top/index.html HTTP/1.1\n   Host:\
    \ www.example.com\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxxx\n   Authorization: Digest username=\"ejw\",\n     realm=\"users@example.com\"\
    , nonce=\"...\",\n     uri=\"/top/index.html\", response=\"...\", opaque=\"...\"\
    \n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:acl xmlns:D=\"DAV:\" xmlns:F=\"\
    http://www.example.com/privs/\">\n     <D:ace>\n       <D:principal>\n       \
    \   <D:href>http://www.example.com/users/ejw</D:href>\n       </D:principal>\n\
    \       <D:grant><D:write/></D:grant>\n     </D:ace>\n   </D:acl>\n   >> Response\
    \ <<\n   HTTP/1.1 403 Forbidden\n   Content-Type: text/xml; charset=\"utf-8\"\n\
    \   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:error\
    \ xmlns:D=\"DAV:\">\n     <D:no-inherited-ace-conflict/>\n   </D:error>\n"
- title: '8.1.5.  Example: ACL method failure due to an attempt to set grant and'
  contents:
  - "8.1.5.  Example: ACL method failure due to an attempt to set grant and\n    \
    \    deny in a single ACE\n   In this example, user \"ygoland\", authenticated\
    \ by information in the\n   Authorization header, tries to change the access control\
    \ list on the\n   resource http://www.example.com/diamond/engagement-ring.gif.\
    \  The ACL\n   request includes a single, syntactically and semantically incorrect\n\
    \   ACE, which attempts to grant the group identified by the URL http://\n   www.example.com/users/friends\
    \ DAV:read privilege and deny the\n   principal identified by URL http://www.example.com/users/ygoland-so\n\
    \   (i.e., the user \"ygoland-so\") DAV:read privilege.  However, it is\n   illegal\
    \ to have multiple principal elements, as well as both a grant\n   and deny element\
    \ in the same ACE, so the request fails due to poor\n   syntax.\n   >> Request\
    \ <<\n   ACL /diamond/engagement-ring.gif HTTP/1.1\n   Host: www.example.com\n\
    \   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   Authorization:\
    \ Digest username=\"ygoland\",\n     realm=\"users@example.com\", nonce=\"...\"\
    ,\n     uri=\"/diamond/engagement-ring.gif\", response=\"...\",\n     opaque=\"\
    ...\"\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:acl xmlns:D=\"DAV:\"\
    >\n     <D:ace>\n       <D:principal>\n         <D:href>http://www.example.com/users/friends</D:href>\n\
    \       </D:principal>\n       <D:grant><D:read/></D:grant>\n       <D:principal>\n\
    \         <D:href>http://www.example.com/users/ygoland-so</D:href>\n       </D:principal>\n\
    \       <D:deny><D:read/></D:deny>\n     </D:ace>\n   </D:acl>\n   >> Response\
    \ <<\n   HTTP/1.1 400 Bad Request\n   Content-Length: 0\n   Note that if the request\
    \ had been divided into two ACEs, one to\n   grant, and one to deny, the request\
    \ would have been syntactically\n   well formed.\n"
- title: 9.  Access Control Reports
  contents:
  - '9.  Access Control Reports

    '
- title: 9.1.  REPORT Method
  contents:
  - "9.1.  REPORT Method\n   The REPORT method (defined in Section 3.6 of [RFC3253])\
    \ provides an\n   extensible mechanism for obtaining information about a resource.\n\
    \   Unlike the PROPFIND method, which returns the value of one or more\n   named\
    \ properties, the REPORT method can involve more complex\n   processing.  REPORT\
    \ is valuable in cases where the server has access\n   to all of the information\
    \ needed to perform the complex request (such\n   as a query), and where it would\
    \ require multiple requests for the\n   client to retrieve the information needed\
    \ to perform the same\n   request.\n   A server that supports the WebDAV Access\
    \ Control Protocol MUST\n   support the DAV:expand-property report (defined in\
    \ Section 3.8 of\n   [RFC3253]).\n"
- title: 9.2.  DAV:acl-principal-prop-set Report
  contents:
  - "9.2.  DAV:acl-principal-prop-set Report\n   The DAV:acl-principal-prop-set report\
    \ returns, for all principals in\n   the DAV:acl property (of the Request-URI)\
    \ that are identified by\n   http(s) URLs or by a DAV:property principal, the\
    \ value of the\n   properties specified in the REPORT request body.  In the case\
    \ where a\n   principal URL appears multiple times, the DAV:acl-principal-prop-set\n\
    \   report MUST return the properties for that principal only once.\n   Support\
    \ for this report is REQUIRED.\n   One expected use of this report is to retrieve\
    \ the human readable\n   name (found in the DAV:displayname property) of each\
    \ principal found\n   in an ACL.  This is useful for constructing user interfaces\
    \ that show\n   each ACE in a human readable form.\n   Marshalling\n      The\
    \ request body MUST be a DAV:acl-principal-prop-set XML element.\n      <!ELEMENT\
    \ acl-principal-prop-set ANY>\n      ANY value: a sequence of one or more elements,\
    \ with at most one\n                 DAV:prop element.\n      prop: see RFC 2518,\
    \ Section 12.11\n      This report is only defined when the Depth header has value\
    \ \"0\";\n      other values result in a 400 (Bad Request) error response.  Note\n\
    \      that [RFC3253], Section 3.6, states that if the Depth header is\n     \
    \ not present, it defaults to a value of \"0\".\n      The response body for a\
    \ successful request MUST be a\n      DAV:multistatus XML element (i.e., the response\
    \ uses the same\n      format as the response for PROPFIND).  In the case where\
    \ there are\n      no response elements, the returned multistatus XML element\
    \ is\n      empty.\n      multistatus: see RFC 2518, Section 12.9\n      The response\
    \ body for a successful DAV:acl-principal-prop-set\n      REPORT request MUST\
    \ contain a DAV:response element for each\n      principal identified by an http(s)\
    \ URL listed in a DAV:principal\n      XML element of an ACE within the DAV:acl\
    \ property of the resource\n      identified by the Request-URI.\n   Postconditions:\n\
    \      (DAV:number-of-matches-within-limits): The number of matching\n      principals\
    \ must fall within server-specific, predefined limits.\n      For example, this\
    \ condition might be triggered if a search\n      specification would cause the\
    \ return of an extremely large number\n      of responses.\n"
- title: '9.2.1.  Example: DAV:acl-principal-prop-set Report'
  contents:
  - "9.2.1.  Example: DAV:acl-principal-prop-set Report\n   Resource http://www.example.com/index.html\
    \ has an ACL with three\n   ACEs:\n   ACE #1: All principals (DAV:all) have DAV:read\
    \ and DAV:read-current-\n   user-privilege-set access.\n   ACE #2: The principal\
    \ identified by http://www.example.com/people/\n   gstein (the user \"gstein\"\
    ) is granted DAV:write,  DAV:write-acl,\n   DAV:read-acl privileges.\n   ACE #3:\
    \ The group identified by http://www.example.com/groups/authors\n   (the \"authors\"\
    \ group) is granted DAV:write and DAV:read-acl\n   privileges.\n   The following\
    \ example shows a DAV:acl-principal-prop-set report\n   requesting the DAV:displayname\
    \ property.  It returns the value of\n   DAV:displayname for resources http://www.example.com/people/gstein\n\
    \   and http://www.example.com/groups/authors , but not for DAV:all,\n   since\
    \ this is not an http(s) URL.\n   >> Request <<\n   REPORT /index.html HTTP/1.1\n\
    \   Host: www.example.com\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxxx\n   Depth: 0\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:acl-principal-prop-set\
    \ xmlns:D=\"DAV:\">\n     <D:prop>\n       <D:displayname/>\n     </D:prop>\n\
    \   </D:acl-principal-prop-set>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n\
    \   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml\
    \ version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus xmlns:D=\"DAV:\">\n\
    \     <D:response>\n       <D:href>http://www.example.com/people/gstein</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:displayname>Greg Stein</D:displayname>\n\
    \         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n\
    \     </D:response>\n     <D:response>\n       <D:href>http://www.example.com/groups/authors</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:displayname>Site authors</D:displayname>\n\
    \         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n\
    \     </D:response>\n   </D:multistatus>\n"
- title: 9.3.  DAV:principal-match REPORT
  contents:
  - "9.3.  DAV:principal-match REPORT\n   The DAV:principal-match REPORT is used to\
    \ identify all members (at\n   any depth) of the collection identified by the\
    \ Request-URI that are\n   principals and that match the current user.  In particular,\
    \ if the\n   collection contains principals, the report can be used to identify\n\
    \   all members of the collection that match the current user.\n   Alternatively,\
    \ if the collection contains resources that have a\n   property that identifies\
    \ a principal (e.g., DAV:owner), the report\n   can be used to identify all members\
    \ of the collection whose property\n   identifies a principal that matches the\
    \ current user.  For example,\n   this report can return all of the resources\
    \ in a collection hierarchy\n   that are owned by the current user.  Support for\
    \ this report is\n   REQUIRED.\n   Marshalling:\n      The request body MUST be\
    \ a DAV:principal-match XML element.\n      <!ELEMENT principal-match ((principal-property\
    \ | self), prop?)>\n      <!ELEMENT principal-property ANY>\n      ANY value:\
    \ an element whose value identifies a property.  The\n      expectation is the\
    \ value of the named property typically contains\n      an href element that contains\
    \ the URI of a principal\n      <!ELEMENT self EMPTY>\n      prop: see RFC 2518,\
    \ Section 12.11\n      This report is only defined when the Depth header has value\
    \ \"0\";\n      other values result in a 400 (Bad Request) error response.  Note\n\
    \      that [RFC3253], Section 3.6, states that if the Depth header is\n     \
    \ not present, it defaults to a value of \"0\".  The response body for\n     \
    \ a successful request MUST be a DAV:multistatus XML element.  In\n      the case\
    \ where there are no response elements, the returned\n      multistatus XML element\
    \ is empty.\n      multistatus: see RFC 2518, Section 12.9\n      The response\
    \ body for a successful DAV:principal-match REPORT\n      request MUST contain\
    \ a DAV:response element for each member of the\n      collection that matches\
    \ the current user.  When the\n      DAV:principal-property element is used, a\
    \ match occurs if the\n      current user is matched by the principal identified\
    \ by the URI\n      found in the DAV:href element of the property identified by\
    \ the\n      DAV:principal-property element.  When the DAV:self element is used\n\
    \      in a DAV:principal-match report issued against a group, it matches\n  \
    \    the group if a member identifies the same principal as the current\n    \
    \  user.\n      If DAV:prop is specified in the request body, the properties\n\
    \      specified in the DAV:prop element MUST be reported in the\n      DAV:response\
    \ elements.\n"
- title: '9.3.1.  Example: DAV:principal-match REPORT'
  contents:
  - "9.3.1.  Example: DAV:principal-match REPORT\n   The following example identifies\
    \ the members of the collection\n   identified by the URL http://www.example.com/doc\
    \ that are owned by\n   the current user.  The current user (\"gclemm\") is authenticated\
    \ using\n   Digest authentication.\n   >> Request <<\n   REPORT /doc/ HTTP/1.1\n\
    \   Host: www.example.com\n   Authorization: Digest username=\"gclemm\",\n   \
    \  realm=\"users@example.com\", nonce=\"...\",\n     uri=\"/papers/\", response=\"\
    ...\", opaque=\"...\"\n   Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length:\
    \ xxxx\n   Depth: 0\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:principal-match\
    \ xmlns:D=\"DAV:\">\n     <D:principal-property>\n       <D:owner/>\n     </D:principal-property>\n\
    \   </D:principal-match>\n   >> Response <<\n   HTTP/1.1 207 Multi-Status\n  \
    \ Content-Type: text/xml; charset=\"utf-8\"\n   Content-Length: xxxx\n   <?xml\
    \ version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus xmlns:D=\"DAV:\">\n\
    \     <D:response>\n       <D:href>http://www.example.com/doc/foo.html</D:href>\n\
    \       <D:status>HTTP/1.1 200 OK</D:status>\n     </D:response>\n     <D:response>\n\
    \       <D:href>http://www.example.com/doc/img/bar.gif</D:href>\n       <D:status>HTTP/1.1\
    \ 200 OK</D:status>\n     </D:response>\n   </D:multistatus>\n"
- title: 9.4.  DAV:principal-property-search REPORT
  contents:
  - "9.4.  DAV:principal-property-search REPORT\n   The DAV:principal-property-search\
    \ REPORT performs a search for all\n   principals whose properties contain character\
    \ data that matches the\n   search criteria specified in the request.  One expected\
    \ use of this\n   report is to discover the URL of a principal associated with\
    \ a given\n   person or group by searching for them by name.  This is done by\n\
    \   searching over DAV:displayname, which is defined on all principals.\n   The\
    \ actual search method (exact matching vs. substring matching vs,\n   prefix-matching,\
    \ case-sensitivity) deliberately is left to the server\n   implementation to allow\
    \ implementation on a wide set of possible user\n   management systems.  In cases\
    \ where the implementation of\n   DAV:principal-property-search is not constrained\
    \ by the semantics of\n   an underlying user management repository, preferred\
    \ default semantics\n   are caseless substring matches.\n   For implementation\
    \ efficiency, servers do not typically support\n   searching on all properties.\
    \  A search requesting properties that are\n   not searchable for a particular\
    \ principal will not match that\n   principal.\n   Support for the DAV:principal-property-search\
    \ report is REQUIRED.\n      Implementation Note: The value of a WebDAV property\
    \ is a sequence\n      of well-formed XML, and hence can include any character\
    \ in the\n      Unicode/ISO-10646 standard, that is, most known characters in\n\
    \      human languages.  Due to the idiosyncrasies of case mapping across\n  \
    \    human languages, implementation of case-insensitive matching is\n      non-trivial.\
    \  Implementors of servers that do perform substring\n      matching are strongly\
    \ encouraged to consult \"The Unicode Standard\"\n      [UNICODE4], especially\
    \ Section 5.18, Subsection \"Caseless\n      Matching\", for guidance when implementing\
    \ their case-insensitive\n      matching algorithms.\n      Implementation Note:\
    \ Some implementations of this protocol will\n      use an LDAP repository for\
    \ storage of principal metadata.  The\n      schema describing each attribute\
    \ (akin to a WebDAV property) in an\n      LDAP repository specifies whether it\
    \ supports case-sensitive or\n      caseless searching.  One of the benefits of\
    \ leaving the search\n      method to the discretion of the server implementation\
    \ is the\n      default LDAP attribute search behavior can be used when\n    \
    \  implementing the DAV:principal-property-search report.\n   Marshalling:\n \
    \     The request body MUST be a DAV:principal-property-search XML\n      element\
    \ containing a search specification and an optional list of\n      properties.\
    \  For every principal that matches the search\n      specification, the response\
    \ will contain the value of the\n      requested properties on that principal.\n\
    \      <!ELEMENT principal-property-search\n       ((property-search+), prop?,\
    \ apply-to-principal-collection-set?) >\n      By default, the report searches\
    \ all members (at any depth) of the\n      collection identified by the Request-URI.\
    \  If DAV:apply-to-\n      principal-collection-set is specified in the request\
    \ body, the\n      request is applied instead to each collection identified by\
    \ the\n      DAV:principal-collection-set property of the resource identified\n\
    \      by the Request-URI.\n      The DAV:property-search element contains a prop\
    \ element\n      enumerating the properties to be searched and a match element,\n\
    \      containing the search string.\n      <!ELEMENT property-search (prop, match)\
    \ >\n      prop: see RFC 2518, Section 12.11\n      <!ELEMENT match #PCDATA >\n\
    \      Multiple property-search elements or multiple elements within a\n     \
    \ DAV:prop element will be interpreted with a logical AND.\n      This report\
    \ is only defined when the Depth header has value \"0\";\n      other values result\
    \ in a 400 (Bad Request) error response.  Note\n      that [RFC3253], Section\
    \ 3.6, states that if the Depth header is\n      not present, it defaults to a\
    \ value of \"0\".\n      The response body for a successful request MUST be a\n\
    \      DAV:multistatus XML element.  In the case where there are no\n      response\
    \ elements, the returned multistatus XML element is empty.\n      multistatus:\
    \ see RFC 2518, Section 12.9\n      The response body for a successful DAV:principal-property-search\n\
    \      REPORT request MUST contain  a DAV:response element for each\n      principal\
    \ whose property values satisfy the search specification\n      given in DAV:principal-property-search.\n\
    \      If DAV:prop is specified in the request body, the properties\n      specified\
    \ in the DAV:prop element MUST be reported in the\n      DAV:response elements.\n\
    \   Preconditions:\n      None\n   Postconditions:\n      (DAV:number-of-matches-within-limits):\
    \ The number of matching\n      principals must fall within server-specific, predefined\
    \ limits.\n      For example, this condition might be triggered if a search\n\
    \      specification would cause the return of an extremely large number\n   \
    \   of responses.\n"
- title: 9.4.1.  Matching
  contents:
  - "9.4.1.  Matching\n   There are several cases to consider when matching strings.\
    \  The\n   easiest case is when a property value is \"simple\" and has only\n\
    \   character information item content (see [REC-XML-INFOSET]).  For\n   example,\
    \ the search string \"julian\" would match the DAV:displayname\n   property with\
    \ value \"Julian Reschke\".  Note that the on-the-wire\n   marshaling of DAV:displayname\
    \ in this case is:\n   <D:displayname xmlns:D=\"DAV:\">Julian Reschke</D:displayname>\n\
    \   The name of the property is encoded into the XML element information\n   item,\
    \ and the character information item content of the property is\n   \"Julian Reschke\"\
    .\n   A more complicated case occurs when properties have mixed content\n   (that\
    \ is, compound values consisting of multiple child element items,\n   other types\
    \ of information items, and character information item\n   content).  Consider\
    \ the property \"aprop\" in the namespace \"http://\n   www.example.com/props/\"\
    , marshaled as:\n   <W:aprop xmlns:W=\"http://www.example.com/props/\">\n    \
    \ {cdata 0}<W:elem1>{cdata 1}</W:elem1>\n     <W:elem2>{cdata 2}</W:elem2>{cdata\
    \ 3}\n   </W:aprop>\n   In this case, matching is performed on each individual\
    \ contiguous\n   sequence of character information items.  In the example above,\
    \ a\n   search string would be compared to the four following strings:\n   {cdata\
    \ 0}\n   {cdata 1}\n   {cdata 2}\n   {cdata 3}\n   That is, four individual matches\
    \ would be performed, one each for\n   {cdata 0}, {cdata 1}, {cdata 2}, and {cdata\
    \ 3}.\n"
- title: '9.4.2.  Example: successful DAV:principal-property-search REPORT'
  contents:
  - "9.4.2.  Example: successful DAV:principal-property-search REPORT\n   In this\
    \ example, the client requests the principal URLs of all users\n   whose DAV:displayname\
    \ property contains the substring \"doE\" and whose\n   \"title\" property in\
    \ the namespace \"http://BigCorp.com/ns/\" (that is,\n   their professional title)\
    \ contains \"Sales\".  In addition, the client\n   requests five properties to\
    \ be returned with the matching principals:\n   In the DAV: namespace: displayname\n\
    \   In the http://www.example.com/ns/ namespace: department, phone,\n   office,\
    \ salary\n   The response shows that two principal resources meet the search\n\
    \   specification, \"John Doe\" and \"Zygdoebert Smith\".  The property\n   \"\
    salary\" in namespace \"http://www.example.com/ns/\" is not returned,\n   since\
    \ the principal making the request does not have sufficient\n   access permissions\
    \ to read this property.\n   >> Request <<\n   REPORT /users/ HTTP/1.1\n   Host:\
    \ www.example.com\n   Content-Type: text/xml; charset=utf-8\n   Content-Length:\
    \ xxxx\n   Depth: 0\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:principal-property-search\
    \ xmlns:D=\"DAV:\">\n     <D:property-search>\n       <D:prop>\n         <D:displayname/>\n\
    \       </D:prop>\n       <D:match>doE</D:match>\n     </D:property-search>\n\
    \     <D:property-search>\n       <D:prop xmlns:B=\"http://www.example.com/ns/\"\
    >\n         <B:title/>\n       </D:prop>\n       <D:match>Sales</D:match>\n  \
    \   </D:property-search>\n     <D:prop xmlns:B=\"http://www.example.com/ns/\"\
    >\n       <D:displayname/>\n       <B:department/>\n       <B:phone/>\n      \
    \ <B:office/>\n       <B:salary/>\n     </D:prop>\n   </D:principal-property-search>\n\
    \   >> Response <<\n   HTTP/1.1 207 Multi-Status\n   Content-Type: text/xml; charset=utf-8\n\
    \   Content-Length: xxxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:multistatus\
    \ xmlns:D=\"DAV:\" xmlns:B=\"http://BigCorp.com/ns/\">\n     <D:response>\n  \
    \     <D:href>http://www.example.com/users/jdoe</D:href>\n       <D:propstat>\n\
    \         <D:prop>\n           <D:displayname>John Doe</D:displayname>\n     \
    \      <B:department>Widget Sales</B:department>\n           <B:phone>234-4567</B:phone>\n\
    \           <B:office>209</B:office>\n         </D:prop>\n         <D:status>HTTP/1.1\
    \ 200 OK</D:status>\n       </D:propstat>\n       <D:propstat>\n         <D:prop>\n\
    \           <B:salary/>\n         </D:prop>\n         <D:status>HTTP/1.1 403 Forbidden</D:status>\n\
    \       </D:propstat>\n     </D:response>\n     <D:response>\n       <D:href>http://www.example.com/users/zsmith</D:href>\n\
    \       <D:propstat>\n         <D:prop>\n           <D:displayname>Zygdoebert\
    \ Smith</D:displayname>\n           <B:department>Gadget Sales</B:department>\n\
    \           <B:phone>234-7654</B:phone>\n           <B:office>114</B:office>\n\
    \         </D:prop>\n         <D:status>HTTP/1.1 200 OK</D:status>\n       </D:propstat>\n\
    \       <D:propstat>\n         <D:prop>\n           <B:salary/>\n         </D:prop>\n\
    \         <D:status>HTTP/1.1 403 Forbidden</D:status>\n       </D:propstat>\n\
    \     </D:response>\n   </D:multistatus>\n"
- title: 9.5.  DAV:principal-search-property-set REPORT
  contents:
  - "9.5.  DAV:principal-search-property-set REPORT\n   The DAV:principal-search-property-set\
    \ REPORT identifies those\n   properties that may be searched using the DAV:principal-property-\n\
    \   search REPORT (defined in Section 9.4).\n   Servers MUST support the DAV:principal-search-property-set\
    \ REPORT on\n   all collections identified in the value of a DAV:principal-\n\
    \   collection-set property.\n   An access control protocol user agent could use\
    \ the results of the\n   DAV:principal-search-property-set REPORT to present a\
    \ query interface\n   to the user for retrieving principals.\n   Support for this\
    \ report is REQUIRED.\n      Implementation Note: Some clients will have only\
    \ limited screen\n      real estate for the display of lists of searchable properties.\
    \  In\n      this case, a user might appreciate having the most frequently\n \
    \     searched properties be displayed on-screen, rather than having to\n    \
    \  scroll through a long list of searchable properties.  One\n      mechanism\
    \ for signaling the most frequently searched properties is\n      to return them\
    \ towards the start of a list of properties.  A\n      client can then preferentially\
    \ display the list of properties in\n      order, increasing the likelihood that\
    \ the most frequently searched\n      properties will appear on-screen, and will\
    \ not require scrolling\n      for their selection.\n   Marshalling:\n      The\
    \ request body MUST be an empty DAV:principal-search-property-\n      set XML\
    \ element.\n      This report is only defined when the Depth header has value\
    \ \"0\";\n      other values result in a 400 (Bad Request) error response.  Note\n\
    \      that [RFC3253], Section 3.6, states that if the Depth header is\n     \
    \ not present, it defaults to a value of \"0\".\n      The response body MUST\
    \ be  a DAV:principal-search-property-set XML\n      element, containing a DAV:principal-search-property\
    \ XML element\n      for each property that may be searched with the DAV:principal-\n\
    \      property-search REPORT.  A server MAY limit its response to just a\n  \
    \    subset of the searchable properties, such as those likely to be\n      useful\
    \ to an interactive access control client.\n      <!ELEMENT principal-search-property-set\n\
    \       (principal-search-property*) >\n      Each DAV:principal-search-property\
    \ XML element contains exactly\n      one searchable property, and a description\
    \ of the property.\n      <!ELEMENT principal-search-property (prop, description)\
    \ >\n      The DAV:prop element contains one principal property on which the\n\
    \      server is able to perform a DAV:principal-property-search REPORT.\n   \
    \   prop: see RFC 2518, Section 12.11\n      The description element is a human-readable\
    \ description of what\n      information this property represents.  Servers MUST\
    \ indicate the\n      human language of the description using the xml:lang attribute\
    \ and\n      SHOULD consider the HTTP Accept-Language request header when\n  \
    \    selecting one of multiple available languages.\n      <!ELEMENT description\
    \ #PCDATA >\n"
- title: '9.5.1.  Example: DAV:principal-search-property-set REPORT'
  contents:
  - "9.5.1.  Example: DAV:principal-search-property-set REPORT\n   In this example,\
    \ the client determines the set of searchable\n   principal properties by requesting\
    \ the DAV:principal-search-\n   property-set REPORT on the root of the server's\
    \ principal URL\n   collection set, identified by http://www.example.com/users/.\n\
    \   >> Request <<\n   REPORT /users/ HTTP/1.1\n   Host: www.example.com\n   Content-Type:\
    \ text/xml; charset=\"utf-8\"\n   Content-Length: xxx\n   Accept-Language: en,\
    \ de\n   Authorization: BASIC d2FubmFtYWs6cGFzc3dvcmQ=\n   Depth: 0\n   <?xml\
    \ version=\"1.0\" encoding=\"utf-8\" ?>\n   <D:principal-search-property-set xmlns:D=\"\
    DAV:\"/>\n   >> Response <<\n   HTTP/1.1 200 OK\n   Content-Type: text/xml; charset=\"\
    utf-8\"\n   Content-Length: xxx\n   <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\
    \   <D:principal-search-property-set xmlns:D=\"DAV:\">\n     <D:principal-search-property>\n\
    \       <D:prop>\n         <D:displayname/>\n       </D:prop>\n       <D:description\
    \ xml:lang=\"en\">Full name</D:description>\n     </D:principal-search-property>\n\
    \     <D:principal-search-property>\n       <D:prop xmlns:B=\"http://BigCorp.com/ns/\"\
    >\n         <B:title/>\n       </D:prop>\n       <D:description xml:lang=\"en\"\
    >Job title</D:description>\n     </D:principal-search-property>\n   </D:principal-search-property-set>\n"
- title: 10.  XML Processing
  contents:
  - "10.  XML Processing\n   Implementations of this specification MUST support the\
    \ XML element\n   ignore rule, as specified in Section 23.3.2 of [RFC2518], and\
    \ the XML\n   Namespace recommendation [REC-XML-NAMES].\n   Note that use of the\
    \ DAV namespace is reserved for XML elements and\n   property names defined in\
    \ a standards-track or Experimental IETF RFC.\n"
- title: 11.  Internationalization Considerations
  contents:
  - "11.  Internationalization Considerations\n   In this specification, the only\
    \ human-readable content can be found\n   in the description XML element, found\
    \ within the DAV:supported-\n   privilege-set property.  This element contains\
    \ a human-readable\n   description of the capabilities controlled by a privilege.\
    \  As a\n   result, the description element must be capable of representing\n\
    \   descriptions in multiple character sets.  Since the description\n   element\
    \ is found within a WebDAV property, it is represented on the\n   wire as XML\
    \ [REC-XML], and hence can leverage XML's language tagging\n   and character set\
    \ encoding capabilities.  Specifically, XML\n   processors at minimum must be\
    \ able to read XML elements encoded using\n   the UTF-8 [RFC3629] encoding of\
    \ the ISO 10646 multilingual plane.\n   XML examples in this specification demonstrate\
    \ use of the charset\n   parameter of the Content-Type header, as defined in [RFC3023],\
    \ as\n   well as the XML \"encoding\" attribute, which together provide charset\n\
    \   identification information for MIME and XML processors.  Furthermore,\n  \
    \ this specification requires server implementations to tag description\n   fields\
    \ with the xml:lang attribute (see Section 2.12 of [REC-XML]),\n   which specifies\
    \ the human language of the description.  Additionally,\n   server implementations\
    \ should take into account the value of the\n   Accept-Language HTTP header to\
    \ determine which description string to\n   return.\n   For XML elements other\
    \ than the description element, it is expected\n   that implementations will treat\
    \ the property names, privilege names,\n   and values as tokens, and convert these\
    \ tokens into human-readable\n   text in the user's language and character set\
    \ when displayed to a\n   person.  Only a generic WebDAV property display utility\
    \ would display\n   these values in their raw form to a human user.\n   For error\
    \ reporting, we follow the convention of HTTP/1.1 status\n   codes, including\
    \ with each status code a short, English description\n   of the code (e.g., 200\
    \ (OK)).  While the possibility exists that a\n   poorly crafted user agent would\
    \ display this message to a user,\n   internationalized applications will ignore\
    \ this message, and display\n   an appropriate message in the user's language\
    \ and character set.\n   Further internationalization considerations for this\
    \ protocol are\n   described in the WebDAV Distributed Authoring protocol specification\n\
    \   [RFC2518].\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   Applications and users of this access control\
    \ protocol should be\n   aware of several security considerations, detailed below.\
    \  In\n   addition to the discussion in this document, the security\n   considerations\
    \ detailed in the HTTP/1.1 specification [RFC2616], the\n   WebDAV Distributed\
    \ Authoring Protocol specification [RFC2518], and\n   the XML Media Types specification\
    \ [RFC3023] should be considered in a\n   security analysis of this protocol.\n"
- title: 12.1.  Increased Risk of Compromised Users
  contents:
  - "12.1.  Increased Risk of Compromised Users\n   In the absence of a mechanism\
    \ for remotely manipulating access\n   control lists, if a single user's authentication\
    \ credentials are\n   compromised, only those resources for which the user has\
    \ access\n   permission can be read, modified, moved, or deleted.  With the\n\
    \   introduction of this access control protocol, if a single compromised\n  \
    \ user has the ability to change ACLs for a broad range of other users\n   (e.g.,\
    \ a super-user), the number of resources that could be altered\n   by a single\
    \ compromised user increases.  This risk can be mitigated\n   by limiting the\
    \ number of people who have write-acl privileges across\n   a broad range of resources.\n"
- title: 12.2.  Risks of the DAV:read-acl and DAV:current-user-privilege-set
  contents:
  - "12.2.  Risks of the DAV:read-acl and DAV:current-user-privilege-set\n       Privileges\n\
    \   The ability to read the access privileges (stored in the DAV:acl\n   property),\
    \ or the privileges permitted the currently authenticated\n   user (stored in\
    \ the DAV:current-user-privilege-set property) on a\n   resource may seem innocuous,\
    \ since reading an ACL cannot possibly\n   affect the resource's state.  However,\
    \ if all resources have world-\n   readable ACLs, it is possible to perform an\
    \ exhaustive search for\n   those resources that have inadvertently left themselves\
    \ in a\n   vulnerable state, such as being world-writable.  In particular, the\n\
    \   property retrieval method PROPFIND, executed with Depth infinity on\n   an\
    \ entire hierarchy, is a very efficient way to retrieve the DAV:acl\n   or DAV:current-user-privilege-set\
    \ properties.  Once found, this\n   vulnerability can be exploited by a denial\
    \ of service attack in which\n   the open resource is repeatedly overwritten.\
    \  Alternately, writable\n   resources can be modified in undesirable ways.\n\
    \   To reduce this risk, read-acl privileges should not be granted to\n   unauthenticated\
    \ principals, and restrictions on read-acl and read-\n   current-user-privilege-set\
    \ privileges for authenticated principals\n   should be carefully analyzed when\
    \ deploying this protocol.  Access to\n   the current-user-privilege-set property\
    \ will involve a tradeoff of\n   usability versus security.  When the current-user-privilege-set\
    \ is\n   visible, user interfaces are expected to provide enhanced information\n\
    \   concerning permitted and restricted operations, yet this information\n   may\
    \ also indicate a vulnerability that could be exploited.\n   Deployment of this\
    \ protocol will need to evaluate this tradeoff in\n   light of the requirements\
    \ of the deployment environment.\n"
- title: 12.3.  No Foreknowledge of Initial ACL
  contents:
  - "12.3.  No Foreknowledge of Initial ACL\n   In an effort to reduce protocol complexity,\
    \ this protocol\n   specification intentionally does not address the issue of\
    \ how to\n   manage or discover the initial ACL that is placed upon a resource\n\
    \   when it is created.  The only way to discover the initial ACL is to\n   create\
    \ a new resource, then retrieve the value of the DAV:acl\n   property.  This assumes\
    \ the principal creating the resource also has\n   been granted the DAV:read-acl\
    \ privilege.\n   As a result, it is possible that a principal could create a resource,\n\
    \   and then discover that its ACL grants privileges that are\n   undesirable.\
    \  Furthermore, this protocol makes it possible (though\n   unlikely) that the\
    \ creating principal could be unable to modify the\n   ACL, or even delete the\
    \ resource.  Even when the ACL can be modified,\n   there will be a short period\
    \ of time when the resource exists with\n   the initial ACL before its new ACL\
    \ can be set.\n   Several factors mitigate this risk.  Human principals are often\
    \ aware\n   of the default access permissions in their editing environments and\n\
    \   take this into account when writing information.  Furthermore,\n   default\
    \ privilege policies are usually very conservative, limiting\n   the privileges\
    \ granted by the initial ACL.\n"
- title: 13.  Authentication
  contents:
  - "13.  Authentication\n   Authentication mechanisms defined for use with HTTP and\
    \ WebDAV also\n   apply to this WebDAV Access Control Protocol, in particular\
    \ the Basic\n   and Digest authentication mechanisms defined in [RFC2617].\n \
    \  Implementation of the ACL spec requires that Basic authentication, if\n   used,\
    \ MUST only be supported over secure transport such as TLS.\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   This document uses the namespace defined by [RFC2518]\
    \ for XML\n   elements.  That is, this specification uses the \"DAV:\" URI namespace,\n\
    \   previously registered in the URI schemes registry.  All other IANA\n   considerations\
    \ mentioned in [RFC2518] are also applicable to this\n   specification.\n"
- title: 15.  Acknowledgements
  contents:
  - "15.  Acknowledgements\n   This protocol is the collaborative product of the WebDAV\
    \ ACL design\n   team: Bernard Chester, Geoff Clemm, Anne Hopkins, Barry Lind,\
    \ Sean\n   Lyndersay, Eric Sedlar, Greg Stein, and Jim Whitehead.  The authors\n\
    \   are grateful for the detailed review and comments provided by Jim\n   Amsden,\
    \ Dylan Barrell, Gino Basso, Murthy Chintalapati, Lisa\n   Dusseault, Stefan Eissing,\
    \ Tim Ellison, Yaron Goland, Dennis\n   Hamilton, Laurie Harper, Eckehard Hermann,\
    \ Ron Jacobs, Chris Knight,\n   Remy Maucherat, Larry Masinter, Joe Orton, Peter\
    \ Raymond, and Keith\n   Wannamaker.  We thank Keith Wannamaker for the initial\
    \ text of the\n   principal property search sections.  Prior work on WebDAV access\n\
    \   control protocols has been performed by Yaron Goland, Paul Leach,\n   Lisa\
    \ Dusseault, Howard Palmer, and Jon Radoff.  We would like to\n   acknowledge\
    \ the foundation laid for us by the authors of the DeltaV,\n   WebDAV and HTTP\
    \ protocols upon which this protocol is layered, and\n   the invaluable feedback\
    \ from the WebDAV working group.\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [REC-XML]         Bray, T., Paoli, J., Sperberg-McQueen,\
    \ C. and E.\n                     Maler, \"Extensible Markup Language (XML) 1.0\n\
    \                     ((Third ed)\", W3C REC REC-xml-20040204, February\n    \
    \                 2004, <http://www.w3.org/TR/2004/REC-xml-20040204>.\n   [REC-XML-INFOSET]\
    \ Cowan, J. and R. Tobin, \"XML Information Set\n                     (Second\
    \ Edition)\", W3C REC REC-xml-infoset-\n                     20040204, February\
    \ 2004,\n                     <http://www.w3.org/TR/2004/REC-xml-infoset-\n  \
    \                   20040204/>.\n   [REC-XML-NAMES]   Bray, T., Hollander, D.\
    \ and A. Layman, \"Namespaces\n                     in XML\", W3C REC REC-xml-names-19990114,\
    \ January\n                     1999, <http://www.w3.org/TR/1999/REC-xml-names-\n\
    \                     19990114>.\n   [RFC2119]         Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                     Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC2518]         Goland, Y., Whitehead, E., Faizi,\
    \ A., Carter, S.\n                     and D. Jensen, \"HTTP Extensions for Distributed\n\
    \                     Authoring -- WEBDAV\", RFC 2518, February 1999.\n   [RFC2616]\
    \         Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                \
    \     Masinter, L., Leach, P. and T. Berners-Lee,\n                     \"Hypertext\
    \ Transfer Protocol -- HTTP/1.1\", RFC\n                     2616, June 1999.\n\
    \   [RFC2617]         Franks, J., Hallam-Baker, P., Hostetler, J.,\n         \
    \            Lawrence, S., Leach, P., Luotonen, A. and L.\n                  \
    \   Stewart, \"HTTP Authentication: Basic and Digest\n                     Access\
    \ Authentication\", RFC 2617, June 1999.\n   [RFC3023]         Murata, M., St.Laurent,\
    \ S. and D. Kohn, \"XML Media\n                     Types\", RFC 3023, January\
    \ 2001.\n   [RFC3253]         Clemm, G., Amsden, J., Ellison, T., Kaler, C. and\n\
    \                     J. Whitehead, \"Versioning Extensions to WebDAV\",\n   \
    \                  RFC 3253, March 2002.\n   [RFC3530]         Shepler, S., Ed.,\
    \ Callaghan, B., Robinson, D.,\n                     Thurlow, R., Beame, C., Eisler,\
    \ M. and D. Noveck,\n                     \"Network File System (NFS) version\
    \ 4 Protocol\", RFC\n                     3530, April 2003.\n   [RFC3629]    \
    \     Yergeau, F., \"UTF-8, a transformation format of ISO\n                 \
    \    10646\", STD 63, RFC 3629 November 2003.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [RFC2251]         Wahl, M., Howes, T. and S.\
    \ Kille, \"Lightweight\n                     Directory Access Protocol (v3)\"\
    , RFC 2251, December\n                     1997.\n   [RFC2255]         Howes,\
    \ T. and M. Smith, \"The LDAP URL Format\", RFC\n                     2255, December\
    \ 1997.\n   [UNICODE4]        The Unicode Consortium, \"The Unicode Standard -\n\
    \                     Version 4.0\", Addison-Wesley , August 2003,\n         \
    \            <http://www.unicode.org/versions/Unicode4.0.0/>.\n              \
    \       ISBN 0321185781.\n"
- title: Appendix A. WebDAV XML Document Type Definition Addendum
  contents:
  - "Appendix A. WebDAV XML Document Type Definition Addendum\n   All XML elements\
    \ defined in this Document Type Definition (DTD)\n   belong to the DAV namespace.\
    \ This DTD should be viewed as an addendum\n   to the DTD provided in [RFC2518],\
    \ section 23.1.\n   <!-- Privileges -- (Section 3)>\n   <!ELEMENT read EMPTY>\n\
    \   <!ELEMENT write EMPTY>\n   <!ELEMENT write-properties EMPTY>\n   <!ELEMENT\
    \ write-content EMPTY>\n   <!ELEMENT unlock EMPTY>\n   <!ELEMENT read-acl EMPTY>\n\
    \   <!ELEMENT read-current-user-privilege-set EMPTY>\n   <!ELEMENT write-acl EMPTY>\n\
    \   <!ELEMENT bind EMPTY>\n   <!ELEMENT unbind EMPTY>\n   <!ELEMENT all EMPTY>\n\
    \   <!-- Principal Properties (Section 4) -->\n   <!ELEMENT principal EMPTY>\n\
    \   <!ELEMENT alternate-URI-set (href*)>\n   <!ELEMENT principal-URL (href)>\n\
    \   <!ELEMENT group-member-set (href*)>\n   <!ELEMENT group-membership (href*)>\n\
    \   <!-- Access Control Properties (Section 5) -->\n   <!-- DAV:owner Property\
    \ (Section 5.1) -->\n   <!ELEMENT owner (href?)>\n   <!-- DAV:group Property (Section\
    \ 5.2) -->\n   <!ELEMENT group (href?)>\n   <!-- DAV:supported-privilege-set Property\
    \ (Section 5.3) -->\n   <!ELEMENT supported-privilege-set (supported-privilege*)>\n\
    \   <!ELEMENT supported-privilege\n    (privilege, abstract?, description, supported-privilege*)>\n\
    \   <!ELEMENT privilege ANY>\n   <!ELEMENT abstract EMPTY>\n   <!ELEMENT description\
    \ #PCDATA>\n   <!-- DAV:current-user-privilege-set Property (Section 5.4) -->\n\
    \   <!ELEMENT current-user-privilege-set (privilege*)>\n   <!-- DAV:acl Property\
    \ (Section 5.5) -->\n   <!ELEMENT acl (ace)* >\n   <!ELEMENT ace ((principal |\
    \ invert), (grant|deny), protected?,\n    inherited?)>\n   <!ELEMENT principal\
    \ (href)\n    | all | authenticated | unauthenticated\n    | property | self)>\n\
    \   <!ELEMENT all EMPTY>\n   <!ELEMENT authenticated EMPTY>\n   <!ELEMENT unauthenticated\
    \ EMPTY>\n   <!ELEMENT property ANY>\n   <!ELEMENT self EMPTY>\n   <!ELEMENT invert\
    \ principal>\n   <!ELEMENT grant (privilege+)>\n   <!ELEMENT deny (privilege+)>\n\
    \   <!ELEMENT privilege ANY>\n   <!ELEMENT protected EMPTY>\n   <!ELEMENT inherited\
    \ (href)>\n   <!-- DAV:acl-restrictions Property (Section 5.6) -->\n   <!ELEMENT\
    \ acl-restrictions (grant-only?, no-invert?,\n    deny-before-grant?, required-principal?)>\n\
    \   <!ELEMENT grant-only EMPTY>\n   <!ELEMENT no-invert EMPTY>\n   <!ELEMENT deny-before-grant\
    \ EMPTY>\n   <!ELEMENT required-principal\n    (all? | authenticated? | unauthenticated?\
    \ | self? | href*\n    |property*)>\n   <!-- DAV:inherited-acl-set Property (Section\
    \ 5.7) -->\n   <!ELEMENT inherited-acl-set (href*)>\n   <!-- DAV:principal-collection-set\
    \ Property (Section 5.8) -->\n   <!ELEMENT principal-collection-set (href*)>\n\
    \   <!-- Access Control and Existing Methods (Section 7) -->\n   <!ELEMENT need-privileges\
    \ (resource)* >\n   <!ELEMENT resource ( href, privilege )\n   <!-- ACL method\
    \ preconditions (Section 8.1.1) -->\n   <!ELEMENT no-ace-conflict EMPTY>\n   <!ELEMENT\
    \ no-protected-ace-conflict EMPTY>\n   <!ELEMENT no-inherited-ace-conflict EMPTY>\n\
    \   <!ELEMENT limited-number-of-aces EMPTY>\n   <!ELEMENT grant-only EMPTY>\n\
    \   <!ELEMENT no-invert EMPTY>\n   <!ELEMENT deny-before-grant EMPTY>\n   <!ELEMENT\
    \ no-abstract EMPTY>\n   <!ELEMENT not-supported-privilege EMPTY>\n   <!ELEMENT\
    \ missing-required-principal EMPTY>\n   <!ELEMENT recognized-principal EMPTY>\n\
    \   <!ELEMENT allowed-principal EMPTY>\n   <!-- REPORTs (Section 9) -->\n   <!ELEMENT\
    \ acl-principal-prop-set ANY>\n   ANY value: a sequence of one or more elements,\
    \ with at most one\n   DAV:prop element.\n   <!ELEMENT principal-match ((principal-property\
    \ | self), prop?)>\n   <!ELEMENT principal-property ANY>\n   ANY value: an element\
    \ whose value identifies a property. The\n   expectation is the value of the named\
    \ property typically contains\n   an href element that contains the URI of a principal\n\
    \   <!ELEMENT self EMPTY>\n   <!ELEMENT principal-property-search ((property-search+),\
    \ prop?) >\n   <!ELEMENT property-search (prop, match) >\n   <!ELEMENT match #PCDATA\
    \ >\n   <!ELEMENT principal-search-property-set (\n    principal-search-property*)\
    \ >\n   <!ELEMENT principal-search-property (prop, description) >\n   <!ELEMENT\
    \ description #PCDATA >\n"
- title: Appendix B. WebDAV Method Privilege Table (Normative)
  contents:
  - "Appendix B. WebDAV Method Privilege Table (Normative)\n   The following table\
    \ of WebDAV methods (as defined in RFC 2518, 2616,\n   and 3253) clarifies which\
    \ privileges are required for access for each\n   method.  Note that the privileges\
    \ listed, if denied, MUST cause\n   access to be denied.  However, given that\
    \ a specific implementation\n   MAY define an additional custom privilege to control\
    \ access to\n   existing methods, having all of the indicated privileges does\
    \ not\n   mean that access will be granted.  Note that lack of the indicated\n\
    \   privileges does not imply that access will be denied, since a\n   particular\
    \ implementation may use a sub-privilege aggregated under\n   the indicated privilege\
    \ to control access.  Privileges required refer\n   to the current resource being\
    \ processed unless otherwise specified.\n   +---------------------------------+---------------------------------+\n\
    \   | METHOD                          | PRIVILEGES                      |\n  \
    \ +---------------------------------+---------------------------------+\n   |\
    \ GET                             | <D:read>                        |\n   | HEAD\
    \                            | <D:read>                        |\n   | OPTIONS\
    \                         | <D:read>                        |\n   | PUT (target\
    \ exists)             | <D:write-content> on target     |\n   |              \
    \                   | resource                        |\n   | PUT (no target exists)\
    \          | <D:bind> on parent collection   |\n   |                         \
    \        | of target                       |\n   | PROPPATCH                 \
    \      | <D:write-properties>            |\n   | ACL                         \
    \    | <D:write-acl>                   |\n   | PROPFIND                      \
    \  | <D:read> (plus <D:read-acl> and |\n   |                                 |\
    \ <D:read-current-user-privilege- |\n   |                                 | set>\
    \ as needed)                 |\n   | COPY (target exists)            | <D:read>,\
    \ <D:write-content> and |\n   |                                 | <D:write-properties>\
    \ on target  |\n   |                                 | resource              \
    \          |\n   | COPY (no target exists)         | <D:read>, <D:bind> on target\
    \    |\n   |                                 | collection                    \
    \  |\n   | MOVE (no target exists)         | <D:unbind> on source collection |\n\
    \   |                                 | and <D:bind> on target          |\n  \
    \ |                                 | collection                      |\n   |\
    \ MOVE (target exists)            | As above, plus <D:unbind> on    |\n   |  \
    \                               | the target collection           |\n   | DELETE\
    \                          | <D:unbind> on parent collection |\n   | LOCK (target\
    \ exists)            | <D:write-content>               |\n   | LOCK (no target\
    \ exists)         | <D:bind> on parent collection   |\n   | MKCOL            \
    \               | <D:bind> on parent collection   |\n   | UNLOCK             \
    \             | <D:unlock>                      |\n   | CHECKOUT             \
    \           | <D:write-properties>            |\n   | CHECKIN                \
    \         | <D:write-properties>            |\n   | REPORT                   \
    \       | <D:read> (on all referenced     |\n   |                            \
    \     | resources)                      |\n   | VERSION-CONTROL              \
    \   | <D:write-properties>            |\n   | MERGE                          \
    \ | <D:write-content>               |\n   | MKWORKSPACE                     |\
    \ <D:write-content> on parent     |\n   |                                 | collection\
    \                      |\n   | BASELINE-CONTROL                | <D:write-properties>\
    \ and        |\n   |                                 | <D:write-content>     \
    \          |\n   | MKACTIVITY                      | <D:write-content> on parent\
    \     |\n   |                                 | collection                   \
    \   |\n   +---------------------------------+---------------------------------+\n"
- title: Index
  contents:
  - "Index\n   A\n      ACL method  40\n   C\n      Condition Names\n         DAV:allowed-principal\
    \ (pre)  42\n         DAV:deny-before-grant (pre)  41\n         DAV:grant-only\
    \ (pre)  41\n         DAV:limited-number-of-aces (pre)  41\n         DAV:missing-required-principal\
    \ (pre)  42\n         DAV:no-abstract (pre)  41\n         DAV:no-ace-conflict\
    \ (pre)  41\n         DAV:no-inherited-ace-conflict (pre)  41\n         DAV:no-invert\
    \ (pre)  41\n         DAV:no-protected-ace-conflict (pre)  41\n         DAV:not-supported-privilege\
    \ (pre)  42\n         DAV:number-of-matches-within-limits (post)  48, 53\n   \
    \      DAV:recognized-principal (pre)  42\n   D\n      DAV header\n         compliance\
    \ class 'access-control'  38\n      DAV:acl property  23\n      DAV:acl-principal-prop-set\
    \ report  48\n      DAV:acl-restrictions property  27\n      DAV:all privilege\
    \  13\n      DAV:allowed-principal precondition  42\n      DAV:alternate-URI-set\
    \ property  14\n      DAV:bind privilege  12\n      DAV:current-user-privilege-set\
    \ property  21\n      DAV:deny-before-grant precondition  41\n      DAV:grant-only\
    \ precondition  41\n      DAV:group property  18\n      DAV:group-member-set property\
    \  14\n      DAV:group-membership property  14\n      DAV:inherited-acl-set property\
    \  29\n      DAV:limited-number-of-aces precondition  41\n      DAV:missing-required-principal\
    \ precondition  42\n      DAV:no-abstract precondition  41\n      DAV:no-ace-conflict\
    \ precondition  41\n      DAV:no-inherited-ace-conflict precondition  41\n   \
    \   DAV:no-invert precondition  41\n      DAV:no-protected-ace-conflict precondition\
    \  41\n      DAV:not-supported-privilege precondition  42\n      DAV:number-of-matches-within-limits\
    \ postcondition  48, 53\n      DAV:owner property  15\n      DAV:principal resource\
    \ type  13\n      DAV:principal-collection-set property  30\n      DAV:principal-match\
    \ report  50\n      DAV:principal-property-search  51\n      DAV:principal-search-property-set\
    \  56\n      DAV:principal-URL property  14\n      DAV:read privilege  10\n  \
    \    DAV:read-acl privilege  11\n      DAV:read-current-user-privilege-set privilege\
    \  12\n      DAV:recognized-principal precondition  42\n      DAV:supported-privilege-set\
    \ property  18\n      DAV:unbind privilege  12\n      DAV:unlock privilege  11\n\
    \      DAV:write privilege  10\n      DAV:write-acl privilege  12\n      DAV:write-content\
    \ privilege  10\n      DAV:write-properties privilege  10\n   M\n      Methods\n\
    \         ACL  40\n   P\n      Privileges\n         DAV:all  13\n         DAV:bind\
    \  12\n         DAV:read  10\n         DAV:read-acl  11\n         DAV:read-current-user-privilege-set\
    \  12\n         DAV:unbind  12\n         DAV:unlock  11\n         DAV:write  10\n\
    \         DAV:write-acl  12\n         DAV:write-content  11\n         DAV:write-properties\
    \  10\n      Properties\n         DAV:acl  23\n         DAV:acl-restrictions \
    \ 27\n         DAV:alternate-URI-set  14\n         DAV:current-user-privilege-set\
    \  21\n         DAV:group  18\n         DAV:group-member-set  14\n         DAV:group-membership\
    \  14\n         DAV:inherited-acl-set  29\n         DAV:owner  15\n         DAV:principal-collection-set\
    \  30\n         DAV:principal-URL  14\n         DAV:supported-privilege-set  18\n\
    \   R\n      Reports\n         DAV:acl-principal-prop-set  47\n         DAV:principal-match\
    \  49\n         DAV:principal-property-search  51\n         DAV:principal-search-property-set\
    \  56\n      Resource Types\n         DAV:principal  13\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Geoffrey Clemm\n   IBM\n   20 Maguire Road\n   Lexington,\
    \ MA  02421\n   EMail: geoffrey.clemm@us.ibm.com\n   Julian F. Reschke\n   greenbytes\
    \ GmbH\n   Salzmannstrasse 152\n   Muenster, NW  48159\n   Germany\n   EMail:\
    \ julian.reschke@greenbytes.de\n   Eric Sedlar\n   Oracle Corporation\n   500\
    \ Oracle Parkway\n   Redwood Shores, CA  94065\n   EMail: eric.sedlar@oracle.com\n\
    \   Jim Whitehead\n   U.C. Santa Cruz, Dept. of Computer Science\n   1156 High\
    \ Street\n   Santa Cruz, CA  95064\n   EMail: ejw@cse.ucsc.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
