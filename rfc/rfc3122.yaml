- title: __initial_text__
  contents:
  - "      Extensions to IPv6 Neighbor Discovery for Inverse Discovery\n         \
    \                    Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes extensions to the IPv6 Neighbor Discovery that\n\
    \   allow a node to determine and advertise an IPv6 address corresponding\n  \
    \ to a given link-layer address.  These extensions are called Inverse\n   Neighbor\
    \ Discovery.  The Inverse Neighbor Discovery (IND) was\n   originally developed\
    \ for Frame Relay networks, but may also apply to\n   other networks with similar\
    \ behavior.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction....................................................\
    \ 3\n   2. Inverse Neighbor Discovery Messages............................. 3\n\
    \      2.1 Inverse Neighbor Discovery Solicitation Message............. 3\n  \
    \    2.2 Inverse Neighbor Discovery Advertisement Message............ 5\n   3.\
    \ Inverse Neighbor Discovery Options Format....................... 6\n      3.1\
    \ Target Address List......................................... 6\n   4. Inverse\
    \ Neighbor Discovery Protocol............................. 9\n      4.1 Sender\
    \ Node Processing...................................... 9\n      4.2 Receiver\
    \ Node Processing.................................... 9\n        4.2.1 Processing\
    \ Inverse Neighbor Discovery Solicitations..... 9\n        4.2.2 Processing Inverse\
    \ Neighbor Discovery Advertisements... 10\n      4.3 Message Validation.........................................\
    \ 10\n        4.3.1 Validation of Inverse Neighbor Discovery Solicitations. 10\n\
    \        4.3.2 Validation of Inverse Neighbor Discovery Advertisements 11\n  \
    \ 5. Security Considerations........................................ 12\n   6.\
    \ IANA Considerations............................................ 13\n   7. Acknowledgments................................................\
    \ 13\n   8. References..................................................... 13\n\
    \   9. Authors' Addresses............................................. 14\n  \
    \ Appendix A........................................................ 15\n   Full\
    \ Copyright Statement.......................................... 20\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document defines extensions to the IPv6 Neighbor Discovery\n\
    \   (ND)[IPv6-IND].  The extensions are called IPv6 Inverse Neighbor\n   Discovery\
    \ (IND).  The IPv6 Inverse Neighbor Discovery (IND) allows a\n   node that knows\
    \ the link-layer address of a directly connected remote\n   node to learn the\
    \ IPv6 addresses of that node.  A node using IND\n   sends solicitations and receives\
    \ advertisements for one or more IPv6\n   addresses corresponding to a known link-layer\
    \ address.\n   The Inverse Neighbor Discovery (IND) was originally developed for\n\
    \   Frame Relay networks, but may also apply to other networks with\n   similar\
    \ behavior.\n   The keywords MUST, MUST NOT, MAY, OPTIONAL, REQUIRED, RECOMMENDED,\n\
    \   SHALL, SHALL NOT, SHOULD, SHOULD NOT are to be interpreted as defined\n  \
    \ in [KEYWORDS].\n   There are a number of similarities and differences between\
    \ the\n   mechanisms described here and those defined for Inverse ARP for IPv4\n\
    \   in [INV-ARP] or its replacement documents.\n"
- title: 2. Inverse Neighbor Discovery Messages
  contents:
  - "2. Inverse Neighbor Discovery Messages\n   The following messages are defined:\n"
- title: 2.1. Inverse Neighbor Discovery Solicitation Message
  contents:
  - "2.1. Inverse Neighbor Discovery Solicitation Message\n   A node sends an Inverse\
    \ Neighbor Discovery Solicitation message to\n   request an IPv6 address corresponding\
    \ to a link-layer address of the\n   target node while also providing its own\
    \ link-layer address to the\n   target.  Since the remote node IPv6 addresses\
    \ are not known, Inverse\n   Neighbor Discovery (IND) Solicitations are sent as\
    \ IPv6 all-node\n   multicasts [IPv6], [IPv6-FR], [ENCAPS].  However, at link\
    \ layer\n   level, an IND Solicitation is sent directly to the target node,\n\
    \   identified by the known link-layer address.\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     Code      |          Checksum             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Options ...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n   Source Address\n      An\
    \ IPv6 address assigned to the interface from which this message\n      is sent.\n\
    \   Destination Address\n      The IPv6 all-node multicast address.  This address\
    \ is specified in\n      its link-scope format, which is FF02::1.\n   Hop Limit\
    \      255\n   Authentication Header\n      If a Security Association for the\
    \ IP Authentication Header exists\n      between the sender and the destination,\
    \ then the sender SHOULD\n      include this header.\n   ICMP Fields:\n      Type\
    \           141\n      Code           0\n      Checksum       The ICMP checksum.\
    \  See [ICMPv6].\n      Reserved       This field is unused.  It MUST be initialized\
    \ to\n                     zero by the sender and MUST be ignored by the\n   \
    \                  receiver.\n   Required options:\n   The sender node MUST send\
    \ the following options in the Solicitation\n   message:\n      Source Link-Layer\
    \ Address\n         The link-layer address of the sender.\n      Target Link-Layer\
    \ Address\n         The link-layer address of the target node.\n   Other valid\
    \ options:\n   The sender node MAY choose to add the following options in the\n\
    \   Solicitation message:\n   Source Address List\n      The list of one or more\
    \ IPv6 addresses of the interface identified\n      by the Source Link-Layer Address.\
    \  This option is defined in\n      section 3.\n   MTU\n      The MTU configured\
    \ for this link [IPv6-ND].\n   Future versions of this protocol may add other\
    \ option types.\n   Receivers MUST silently ignore any options they do not recognize\
    \ and\n   continue processing the message.\n"
- title: 2.2   Inverse Neighbor Discovery Advertisement Message
  contents:
  - "2.2   Inverse Neighbor Discovery Advertisement Message\n   A node sends Inverse\
    \ Neighbor Discovery Advertisements in response to\n   Inverse Neighbor Discovery\
    \ Solicitations.\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \   Type      |     Code      |          Checksum             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Reserved                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Options ...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n   IP Fields:\n   Source Address\n\
    \      An address assigned to the interface from which the advertisement\n   \
    \   is sent.\n   Destination Address\n      The Source Address of an invoking\
    \ Inverse Discovery Neighbor\n      Solicitation.\n   Hop Limit      255\n   Authentication\
    \ Header\n      If a Security Association for the IP Authentication Header exists\n\
    \      between the sender and the destination address, then the sender\n     \
    \ SHOULD include this header.\n      ICMP Fields:\n      Type         142\n  \
    \    Code         0\n      Checksum     The ICMP checksum.  See [ICMPv6].\n  \
    \    Reserved     32-bit unused field.  It MUST be initialized to\n          \
    \         zero by the sender and MUST be ignored by the\n                   receiver.\n\
    \   Required options:\n   The sender node MUST send the following options in the\
    \ Advertisement\n   message:\n   Source Link-Layer Address The link-layer address\
    \ of the sender.\n      Target Link-Layer Address\n         The link-layer address\
    \ of the target, that is, the sender of\n         the advertisement.\n      Target\
    \ Address List\n         The list of one or more IPv6 addresses of the interface\n\
    \         identified by the Target Link-Layer Address in the Inverse\n       \
    \  Neighbor Discovery Solicitation message that prompted this\n         advertisement.\
    \  This option is defined in Section 3.\n   Other valid options:\n   The sender\
    \ node MAY choose to add the following option in the\n   Advertisement message:\n\
    \   MTU\n      The MTU configured for this link [IPv6-ND].\n   Future versions\
    \ of this protocol may add other option types.\n   Receivers MUST silently ignore\
    \ any options they do not recognize and\n   continue processing the message.\n"
- title: 3. Inverse Neighbor Discovery Options Formats
  contents:
  - "3. Inverse Neighbor Discovery Options Formats\n   Inverse Neighbor Discovery\
    \ messages include Neighbor Discovery\n   options [IPv6-ND] as well as an Inverse\
    \ Neighbor Discovery specific\n   options: the Source Address List and the Target\
    \ Address List.\n"
- title: 3.1  Source/Target Address List
  contents:
  - "3.1  Source/Target Address List\n   The Source Address List and the Target Address\
    \ List option are TLV\n   options (type, length, variable size field) (see Section\
    \ 4.6 of\n   [IPv6-ND] with the following fields:\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length   |                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \        -       -       -        +\n   |                          Reserved  \
    \                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \          IPv6 Address                           +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \          IPv6 Address                           +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |\n   ~\n   |\n   +-+-+-+-+...\n      Fields:\n      Type           9 for\
    \ Source Address List\n                    10 for Target Address List\n      Note:\
    \ These Option Type values should be assigned from the IPv6\n      Neighbor Discovery\
    \ family of values.\n      Length         The length of the option (including\
    \ the Type,\n                     Length, and the Reserved fields) in units of\
    \ 8\n                     octets.  The minimum value for Length is 3, for one\n\
    \                     IPv6 address.\n      Reserved       This field is unused.\
    \  It MUST be initialized to\n                     zero by the sender and MUST\
    \ be ignored by the\n                     receiver.\n      IPv6 Addresses One\
    \ or more IPv6 addresses of the interface.\n   Description:\n   The Source Address\
    \ List contains a list of IPv6 addresses of the\n   interface identified by the\
    \ Source Link-Layer Address.\n   The Target Address List contains a list of IPv6\
    \ addresses of the\n   interface identified by the Target Link-Layer Address.\n\
    \   The number of addresses \"n\" in the list is calculated based on the\n   length\
    \ of the option:\n      n = (Length - 1)/2  (Length is the number of groups of\
    \ 8 octets)\n   The Source Address List MUST fit in one IND Solicitation message.\n\
    \   Therefore in case all IPv6 addresses of an interface do not fit in\n   one\
    \ messages, the option does not contain a complete list.  For a\n   complete list\
    \ of IPv6 addresses, a node should rely on the IND\n   Advertisement message.\n\
    \   The Target Address List SHOULD be the complete list of addresses of\n   the\
    \ interface identified by the Target Link-Layer Address.  If the\n   list of IPv6\
    \ addresses of an interface does not fit in one IND\n   Advertisement message,\
    \ one or more IND Advertisement messages, with\n   the same fields as the first\
    \ message, SHOULD follow.  The Target\n   Address List option(s) of the second,\
    \ and subsequent message(s)\n   SHOULD contain the rest of the IPv6 addresses\
    \ of the interface\n   identified by the Target Link-Layer Address, which did\
    \ not fit in the\n   first message.\n   Note 1: The scope of the Inverse Neighbor\
    \ Discovery mechanism is\n   limited to IPv6 address discovery, that is, providing\
    \ address mapping\n   information.  Therefore, it does not make any provisions\
    \ or rules\n   regarding how a node uses the addresses that were returned in an\n\
    \   Inverse Discovery message.  Furthermore, it does not exclude any\n   particular\
    \ type of IPv6 address from the Source or Target Address\n   List.  For example,\
    \ if an interface has manually configured, and\n   autoconfigured addresses, including\
    \ temporary ones, unicast,\n   multicast, etc..., the list should not exclude\
    \ any.\n   Note 2: An implementation MUST NOT send duplicates in the IPv6\n  \
    \ address list.\n"
- title: 4. Inverse Neighbor Discovery Protocol
  contents:
  - "4. Inverse Neighbor Discovery Protocol\n   IND operates essentially the same\
    \ as ND [IPv6-ND]: the solicitor of a\n   target IP address sends on an interface\
    \ a solicitation message, the\n   target node responds with an advertisement message\
    \ containing the\n   information requested.  The information learned MAY be stored\
    \ in the\n   Neighbor Discovery cache [IPv6-ND], as well as IPv6 address\n   structures\
    \ which may be associated with the interface.\n"
- title: 4.1  Sender Node Processing
  contents:
  - "4.1  Sender Node Processing\n   A soliciting node formats an IND Solicitation\
    \ message as defined in a\n   previous section, encapsulates the packet for the\
    \ specific link-layer\n   and sends it directly to the target node.  Although\
    \ the destination\n   IP address is the all-node multicast address, the message\
    \ is sent\n   only to the target node.  The significant fields for the IND protocol\n\
    \   are the Source IP address, the Source link-layer address, the Target\n   link-layer\
    \ address, and the MTU.  The latter can be used in setting\n   the optimum value\
    \ of the MTU for the link.\n   While awaiting a response, the sender SHOULD retransmit\
    \ IND\n   Solicitation messages approximately every RetransTimer\n   (expiration)[IPv6-ND],\
    \ even in the absence of additional traffic to\n   the neighbor.  Retransmissions\
    \ MUST be rate-limited to at most one\n   solicitation per neighbor every RetransTimer.\n\
    \   If no IND Advertisement is received after MAX_MULTICAST_SOLICIT\n   [IPv6-ND]\
    \ solicitations, inverse address resolution has failed.  If\n   the sending of\
    \ the Solicitation was required by an upper-layer, the\n   sender module MUST\
    \ notify the error to the upper-layer through an\n   appropriate mechanism (e.g.,\
    \ return value from a procedure call).\n"
- title: 4.2  Receiver Node Processing
  contents:
  - '4.2  Receiver Node Processing

    '
- title: 4.2.1  Processing Inverse Neighbor Solicitation Messages
  contents:
  - "4.2.1  Processing Inverse Neighbor Solicitation Messages\n   For every IND Solicitation,\
    \ the receiving node SHOULD format in\n   response a proper IND Advertisement\
    \ using the link-layer source and\n   target address pair as well as the IPv6\
    \ source address from the IND\n   Solicitation message.\n   If a node updates\
    \ the Neighbor Discovery Cache with information\n   learned from IND messages,\
    \ the receiver node of the IND Solicitation\n   SHOULD put the sender's IPv6 address/link-layer\
    \ address mapping -\n   i.e., the source IP address and the Source link-layer\
    \ address from\n   the solicitation message - into its ND cache [IPv6-ND] as it\
    \ would\n   for a ND solicitation.\n   Because IPv6 nodes may have multiple IPv6\
    \ addresses per interface, a\n   node responding to an IND Solicitation SHOULD\
    \ return in the Target\n   Address List option a list containing one or more IPv6\
    \ addresses\n   corresponding to the interface identified by the Target Link-Layer\n\
    \   Address field in the solicitation message.  The list MUST not contain\n  \
    \ duplicates.\n"
- title: 4.2.2  Processing Inverse Neighbor Advertisement Messages
  contents:
  - "4.2.2  Processing Inverse Neighbor Advertisement Messages\n   If a node updates\
    \ The Neighbor Discovery Cache with information\n   learned from IND messages,\
    \ the receiver node of the IND advertisement\n   SHOULD put the sender's IPv6\
    \ address/link-layer address mapping -\n   i.e., the IP addresses from Target\
    \ addresses list and the Source\n   link-layer address from the IND advertisement\
    \  message - into its ND\n   cache [IPv6-ND] as it would for a ND advertisement.\n"
- title: 4.3  Message Validation
  contents:
  - "4.3  Message Validation\n   Inverse Neighbor Discovery messages are validated\
    \ as follows:\n"
- title: 4.3.1  Validation of Inverse Neighbor Discovery Solicitations
  contents:
  - "4.3.1  Validation of Inverse Neighbor Discovery Solicitations\n   A node MUST\
    \ silently discard any received Inverse Neighbor\n   Solicitation messages that\
    \ do not satisfy all of the following\n   validity checks:\n   -     The IP Hop\
    \ Limit field has a value of 255, i.e., the packet\n         could not possibly\
    \ have been forwarded by a router.\n   -     If the message includes an IP Authentication\
    \ Header, the\n         message authenticates correctly.\n   -     ICMP Checksum\
    \ is valid.\n   -     ICMP Code is 0.\n   -     ICMP length (derived from the\
    \ IP length) is 24 or more\n         octets.\n   -     The Target Link-Layer Address\
    \ is a required option and MUST\n         be present.\n   -     The Source Link-Layer\
    \ Address is a required option and MUST\n         be present.\n   -     All included\
    \ options have a length that is greater than\n         zero.\n   The content of\
    \ the Reserved field, and of any unrecognized options,\n   MUST be ignored.  Future,\
    \ backward-compatible changes to the protocol\n   may specify the contents of\
    \ the Reserved field or add new options;\n   backward-incompatible changes may\
    \ use different Code values.\n   The contents of any Neighbor Discovery [IPv6-ND]\
    \ options that are not\n   specified to be used with Inverse Neighbor Discovery\
    \ Solicitation\n   messages MUST be ignored and the packet processed as normal.\
    \  The\n   only defined option that may appear besides the required options is\n\
    \   the MTU option.\n   An Inverse Neighbor Solicitation that passes the validity\
    \ checks is\n   called a \"valid solicitation\".\n"
- title: 4.3.2  Validation of Inverse Neighbor Discovery Advertisements
  contents:
  - "4.3.2  Validation of Inverse Neighbor Discovery Advertisements\n   A node MUST\
    \ silently discard any received Inverse Neighbor Discovery\n   Advertisement messages\
    \ that do not satisfy all of the following\n   validity checks:\n   -     The\
    \ IP Hop Limit field has a value of 255, i.e., the packet\n         could not\
    \ possibly have been forwarded by a router.\n   -     If the message includes\
    \ an IP Authentication Header, the\n         message authenticates correctly.\n\
    \   -     ICMP Checksum is valid.\n   -     ICMP Code is 0.\n   -     ICMP length\
    \ (derived from the IP length) is 48 or more\n         octets.\n   -     Source\
    \ Link-Layer Address option is present.\n   -     Target Link-Layer Address option\
    \ is present.\n   -     The Target Address List option is present.\n   -     The\
    \ length of the Target Address List option is at least 3.\n   -     All other\
    \ included options have a length that is greater\n         than zero.\n   The\
    \ contents of the Reserved fields, and of any unrecognized options,\n   MUST be\
    \ ignored.  Future, backward-compatible changes to the protocol\n   may specify\
    \ the contents of the Reserved fields or add new options;\n   backward-incompatible\
    \ changes may use different Code values.\n   The contents of any defined options\
    \ [IPv6-ND] that are not specified\n   to be used with Inverse Neighbor Advertisement\
    \ messages MUST be\n   ignored and the packet processed as normal.  The only defined\
    \ option\n   that may appear besides the required options is the MTU option.\n\
    \   An Inverse Neighbor Advertisement that passes the validity checks is\n   called\
    \ a \"valid advertisement\".\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   When being employed on point to point virtual\
    \ circuits, as it is the\n   case with Frame Relay networks, Inverse Neighbor\
    \ Discovery messages\n   are less sensitive to impersonation attacks from on-link\
    \ nodes, as it\n   would be the case with broadcast links.\n   Like Neighbor Discovery,\
    \ the protocol reduces the exposure to threats\n   from off-link nodes in the\
    \ absence of authentication by ignoring IND\n   packets received from off-link\
    \ senders.  The Hop Limit field of all\n   received packets is verified to contain\
    \ 255, the maximum legal value.\n   Because routers decrement the Hop Limit on\
    \ all packets they forward,\n   received packets containing a Hop Limit of 255\
    \ must have originated\n   from a neighbor.\n   Inverse Neighbor Discovery protocol\
    \ packet exchanges can be\n   authenticated using the IP Authentication Header\
    \ [IPSEC-Auth].  A\n   node SHOULD include an Authentication Header when sending\
    \ Inverse\n   Neighbor Discovery packets if a security association for use with\
    \ the\n   IP Authentication Header exists for the destination address.  The\n\
    \   security associations may have been created through manual\n   configuration\
    \ or through the operation of some key management\n   protocol.\n   Received Authentication\
    \ Headers in Inverse Neighbor Discovery packets\n   MUST be verified for correctness\
    \ and packets with incorrect\n   authentication MUST be ignored.\n   In case of\
    \ use with Frame Relay, to avoid an IP Security\n   Authentication verification\
    \ failure, the Frame Relay specific\n   preprocessing of a Neighbor Discovery\
    \ Solicitation message that\n   contains a DLCI format Source link-layer address\
    \ option, MUST be done\n   by the receiver node after it completed IP Security\
    \ processing.\n   It SHOULD be possible for the system administrator to configure\
    \ a\n   node to ignore any Inverse Neighbor Discovery messages that are not\n\
    \   authenticated using either the Authentication Header or Encapsulating\n  \
    \ Security Payload.  Such a switch SHOULD default to allowing\n   unauthenticated\
    \ messages.\n   Confidentiality issues are addressed by the IP Security Architecture\n\
    \   and the IP Encapsulating Security Payload documents [IPSEC], [IPSEC-\n   ESP].\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   IANA was requested to assign two new ICMPv6 type values,\
    \ as described\n   in Section 2.1 and 2.2.  They were assigned from the Informational\n\
    \   range of messages, as defined in Section 2.1 of RFC 2463.  There were\n  \
    \ no ICMPv6 code values defined for these types (other than 0); future\n   assignments\
    \ are to be made under Standards Action as defined in RFC\n   2434.\n   IANA was\
    \ also requested to assign two new ICMPv6 Neighbor Discovery\n   Option types\
    \ as defined in Section 3.1.  No outside reviewing was\n   necessary.\n"
- title: 7. Acknowledgments
  contents:
  - "7. Acknowledgments\n   Thanks to Steve Deering, Thomas Narten and Erik Nordmark\
    \ for\n   discussing the idea of Inverse Neighbor Discovery.  Thanks to Thomas\n\
    \   Narten, and Erik Nordmark, and also to Dan Harrington, Milan Merhar,\n   Barbara\
    \ Fox, Martin Mueller, and Peter Tam for a thorough reviewing.\n   Also it should\
    \ be acknowledged that parts of the text in this\n   specification derived from\
    \ the IPv6 Neighbor Discovery text [IPv6-\n   ND].\n"
- title: 8. References
  contents:
  - "8. References\n   [IPv6]        Deering, S. and R. Hinden, \"Internet Protocol\
    \ Version 6\n                 Specification\", RFC 2460, December 1998.\n   [IPv6-ND]\
    \     Narten, T., Nordmark, E. and W. Simpson \"Neighbor\n                 Discovery\
    \ for IP Version 6 (IPv6)\", RFC 2461, December\n                 1998.\n   [ICMPv6]\
    \      Conta, A., and S. Deering \"Internet Control Message\n                \
    \ Protocol for the Internet Protocol Version 6\", RFC\n                 2463,\
    \ December 1998.\n   [IPv6-FR]     Conta, A., Malis, A. and M. Mueller, \"Transmission\
    \ of\n                 IPv6 Packets over Frame Relay Networks\", RFC 2590, May\n\
    \                 1999. December 1997.\n   [IPSEC]       Atkinson, R. and S. Kent,\
    \ \"Security Architecture for\n                 the Internet Protocol\", RFC 2401,\
    \ November 1998.\n   [IPSEC-Auth]  Atkinson, R. and S. Kent, \"IP Authentication\
    \ Header\",\n                 RFC 2402, December 1998.\n   [IPSEC-ESP]   Atkinson,\
    \ R. and S. Kent, \"IP Encapsulating Security\n                 Protocol (ESP)\"\
    , RFC 2406, November 1998.\n   [ASSIGN]      Reynolds, J. and J. Postel, \"Assigned\
    \ Numbers\", STD 2,\n                 RFC 1700, March 1994.\n   [ENCAPS]     \
    \ Brown, C. and A. Malis, \"Multiprotocol Interconnect\n                 over\
    \ Frame Relay\", RFC 2427, November 1998.\n   [INV-ARP]     Bradley, T., Brown,\
    \ C. and A. Malis \"Inverse Address\n                 Resolution Protocol\", RFC\
    \ 2390, August 1998.\n   [KEYWORDS]    Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Alex Conta\n   Transwitch Corporation\n   3 Enterprise\
    \ Drive\n   Shelton, CT 06484\n   Phone: +1-203-929-8810\n   EMail: aconta@txc.com\n"
- title: Appendix A
  contents:
  - 'Appendix A

    '
- title: A. Inverse Neighbor Discovery with Frame Relay Networks
  contents:
  - "A. Inverse Neighbor Discovery with Frame Relay Networks\n   This appendix documents\
    \ the details of using the Inverse Neighbor\n   Discovery on Frame Relay Networks,\
    \ which were too specific to be part\n   of the more general content of the previous\
    \ sections.\n"
- title: A.1  Introduction
  contents:
  - "A.1  Introduction\n   The Inverse Neighbor Discovery (IND) specifically applies\
    \ to Frame\n   Relay nodes.  Frame Relay permanent virtual circuits (PVCs) and\n\
    \   switched virtual circuits (SVCs) are identified in a Frame Relay\n   network\
    \ by a Data Link Connection Identifier (DLCI).  Each DLCI\n   defines for a Frame\
    \ Relay node a single virtual connection through\n   the wide area network (WAN).\
    \  A DLCI has in general a local\n   significance.\n   By way of specific signaling\
    \ messages, a Frame Relay network may\n   announce to a node a new virtual circuit\
    \ with its corresponding DLCI.\n   The DLCI identifies to a node a virtual circuit,\
    \ and can be used as\n   the equivalent of a remote node link-layer address, allowing\
    \ a node\n   to identify at link layer level the node at the other end of the\n\
    \   virtual circuit.  For instance in Figure 1., node A (local node)\n   identifies\
    \ the virtual circuit to node B (remote node) by way of DLCI\n   = 30.  However,\
    \ the signaling message does not contain information\n   about the DLCI used by\
    \ a remote node to identify the virtual circuit\n   to the local node, which could\
    \ be used as the equivalent of the local\n   link-layer address.  For instance\
    \ in Figure 1., node B (remote node)\n   may identify the virtual circuit to node\
    \ A by way of DLCI = 62.\n   Furthermore, the message being transmitted at link-layer\
    \ level and\n   completely independent of the IPv6 protocol does not include any\
    \ IPv6\n   addressing information.  The Inverse Neighbor Discovery is a protocol\n\
    \   that allows a Frame Relay node to discover the equivalent of a local\n   link\
    \ layer address, that is, the identifier by way of which remote\n   nodes identify\
    \ the node, and more importantly discover the IPv6\n   addresses of the interface\
    \ at the other end of the virtual circuit,\n   identified by the remote link-layer\
    \ address.\n                              ~~~~~~~~~~~                 Remote\n\
    \                             {           }                Node\n           +-----+\
    \ DLCI     {             }         DLCI+-----+\n           |  A  |-30------{--+----+----+--}---------62-|\
    \  B  |\n           +-----+          {             }             +-----+\n   \
    \        Local             {           } Frame Relay\n           Node        \
    \       ~~~~~~~~~~~  Network Cloud\n                                Figure 1.\n\
    \   The IPv6 Inverse Neighbor Discovery (IND) protocol allows a Frame\n   Relay\
    \ node to discover dynamically the DLCI by which a remote node\n   identifies\
    \ the virtual circuit.  It also allows a node to learn the\n   IPv6 addresses\
    \ of a node at the remote end of a virtual circuit.\n"
- title: A.2. Inverse Neighbor Discovery Messages
  contents:
  - "A.2. Inverse Neighbor Discovery Messages\n   Frame Relay nodes generate Inverse\
    \ Neighbor Discovery messages as\n   follows:\n"
- title: A.2.1. Inverse Neighbor Discovery Solicitation Message
  contents:
  - "A.2.1. Inverse Neighbor Discovery Solicitation Message\n   The sender of an Inverse\
    \ Neighbor Discovery Solicitation does not\n   know the remote node's IPv6 addresses,\
    \ but knows the equivalent of a\n   remote node link-layer address.  Inverse Neighbor\
    \ Discovery (IND)\n   Solicitations are sent as IPv6 all-node multicasts [IPv6],\
    \ [IPv6-FR],\n   [ENCAPS].  However, at link layer level, an IND Solicitation\
    \ is sent\n   directly to the target node, identified by the known link-layer\n\
    \   address (DLCI).\n   The fields of the message, which are filled following\
    \ considerations\n   specific to Frame Relay are:\n   Source Link-Layer Address\n\
    \      For the sender Frame Relay node, the Source Link-Layer Address is\n   \
    \   the equivalent of the link-layer address by which the remote node\n      identifies\
    \ the source of this message.  The sender may have no\n      knowledge of this\
    \ information.  If the sender knows the\n      information, it SHOULD include\
    \ it in the field, otherwise it\n      SHOULD live it zero (empty).  This information,\
    \ if present, can be\n      used for network debugging purposes.  Regardless of\
    \ the sender's\n      action on this field, prior to any Inverse Neighbor Discovery\n\
    \      processing, the receiver of this message replaces this field,\n      whether\
    \ filled in or not by the sender, with information carried\n      by the Frame\
    \ Relay header in the DLCI field.  The field is encoded\n      in DLCI format\
    \ as defined by [IPv6-FR].\n   Target Link-Layer Address\n      For sender Frame\
    \ Relay node, the Target Link-Layer Address field\n      is filled with the value\
    \ known as the equivalent of the target\n      node link-layer address.  This\
    \ value is the DLCI of the VC to the\n      target node.  It is encoded in DLCI\
    \ format [IPv6-FR].\n      To illustrate the generating of a IND Solicitation\
    \ message by a\n      Frame Relay node, let's consider as an example Node A (Figure\
    \ 1.)\n      which sends an IND solicitation to Node B.  The Solicitation\n  \
    \    message fields will have the following values:\n            At Node A (sender\
    \ of the IND solicitation message).\n                   Source Link-Layer Address\n\
    \                           DLCI=unknown (overwritten by the receiver).\n    \
    \               Target Link-Layer Address\n                           DLCI=30.\n\
    \            At Node B (receiver of the IND solicitation message).\n         \
    \          Source Link-Layer Address\n                           DLCI=62 (filled\
    \ in by the receiver).\n                   Target Link-Layer Address\n       \
    \                    DLCI=30.\n   Note: For Frame Relay, both the above addresses\
    \ are in Q.922 format\n   (DLCI), which can have 10 (default), or 23 significant\
    \ addressing\n   bits [IPv6-FR].  The option length (link-layer address) is expressed\n\
    \   in 8 octet units, therefore, the DLCI will have to be extracted from\n   the\
    \ 8 bytes based on the EA field (bit 0) of the second, third, or\n   forth octet\
    \ (EA = 1).  The C/R, FECN, BECN, DE fields in the Q.922\n   address have no significance\
    \ for IND and are set to 0 [IPv6-FR].\n   MTU\n      The value filled in the MTU\
    \ option is the MTU for the virtual\n      circuit identified by the known DLCI\
    \ [IPv6-FR].\n"
- title: A.2.2  Inverse Neighbor Discovery Advertisement Message
  contents:
  - "A.2.2  Inverse Neighbor Discovery Advertisement Message\n   A Frame Relay node\
    \ sends Inverse Neighbor Discovery Advertisements in\n   response to Inverse Neighbor\
    \ Discovery Solicitations.\n   The fields of the message, which are filled following\
    \ considerations\n   specific to Frame Relay are:\n   Source Link-Layer Address\n\
    \      For Frame Relay, this field is copied from the Target link-layer\n    \
    \  address field of the Inverse Neighbor Discovery Solicitation.  It\n      is\
    \ encoded in DLCI format [IPv6-FR].\n   Target Link-Layer Address\n      For Frame\
    \ Relay, this field is copied from the Source link-layer\n      address field\
    \ of the Inverse Neighbor Discovery Solicitation.  It\n      is encoded in DLCI\
    \ format [IPv6-FR].\n   For example if Node B (Figure 1.) responds to an IND solicitation\n\
    \   sent by Node A. with an IND advertisement, these fields will have the\n  \
    \ following values:\n         At Node B (sender of the advertisement message):\n\
    \                  Source Link-Layer Address\n                     DLCI=30 (was\
    \ Target in Solicitation Message).\n                  Target Link-Layer Address\n\
    \                     DLCI=62 (was Source in Solicitation Message).\n        \
    \ At Node A (receiver of the advertisement message from B).\n                \
    \   Source Link-Layer Address\n                     DLCI=30 (was Target in Solicitation\
    \ Message).\n                   Target Link-Layer Address\n                  \
    \   DLCI=62 (was Source in Solicitation Message).\n   Target Address List\n  \
    \    The list of one or more IPv6 addresses of the interface identified\n    \
    \  by the Target Link-Layer Address in the Inverse Neighbor Discovery\n      Solicitation\
    \ message that prompted this advertisement.\n   MTU The MTU configured for this\
    \ link (virtual circuit) [IPv6-ND].\n      Note:  In case of Frame Relay networks,\
    \ the IND messages are sent\n      on a virtual circuit, which acts like a virtual-link.\
    \  If the\n      virtual circuit breaks, all participants to the circuit receive\n\
    \      appropriate link layer signaling messages, which can be propagated\n  \
    \    to the  upper layers, including IPv6.\n"
- title: A.3. Inverse Neighbor Discovery Protocol
  contents:
  - "A.3. Inverse Neighbor Discovery Protocol\n   This section of the appendix documents\
    \ only the specific aspects of\n   Inverse Neighbor Discovery with Frame Relay\
    \ Networks.\n"
- title: A.3.1  Sender Node Processing
  contents:
  - "A.3.1  Sender Node Processing\n   A soliciting Frame Relay node formats an IND\
    \ solicitation message as\n   defined in a previous section, encapsulates the\
    \ packet for the Frame\n   Relay link-layer [IPv6-FR] and sends it to the target\
    \ Frame Relay\n   node.  Although the destination IP address is the IPv6 all-node\n\
    \   multicast address, the message is sent only to the target Frame Relay\n  \
    \ node.  The target node is the known remote node on the link\n   represented\
    \ by the virtual circuit.\n"
- title: A.3.2  Receiver Node Processing
  contents:
  - 'A.3.2  Receiver Node Processing

    '
- title: A.3.2.1  Processing Inverse Neighbor Solicitation Messages
  contents:
  - "A.3.2.1  Processing Inverse Neighbor Solicitation Messages\n   A Frame Relay\
    \ node, before further processing, is replacing in the\n   Source link-layer address\
    \ the existent DLCI value with the DLCI value\n   from the Frame Relay header\
    \ of the frame containing the message.  The\n   DLCI value has to be formatted\
    \ appropriately in the Source link-layer\n   address field [IPv6-FR].  This operation\
    \ is required to allow a\n   correct interpretation of the fields in the further\
    \ processing of the\n   IND solicitation message.\n   For a Frame Relay node,\
    \ the MTU value from the solicitation message\n   MAY be used to set the receiver's\
    \ MTU to a value that is more\n   optimal, in case that was not already done at\
    \ the interface\n   configuration time.\n"
- title: A.3.2.2  Processing Inverse Neighbor Advertisement Messages
  contents:
  - "A.3.2.2  Processing Inverse Neighbor Advertisement Messages\n   The receiver\
    \ Frame Relay node of the IND Advertisement MAY put the\n   sender's IPv6 address/link-layer\
    \ address mapping - i.e., the Target\n   IP addresses and the Source link-layer\
    \ address from the IND\n   advertisement  message - into its ND cache [IPv6-ND]\
    \ as it would for\n   a ND Advertisement.\n   Further, the receiver Frame Relay\
    \ node of the IND Advertisement MAY\n   store the Target link-layer address from\
    \ the message as the DLCI\n   value at the remote end of the VC.  This DLCI value\
    \ is the equivalent\n   of the link-layer address by which the remote node identifies\
    \ the\n   receiver.\n   If the receiver node of the IND Advertisement has a pool\
    \ of IPv6\n   addresses, and if the implementation allows, it may take decisions\
    \ to\n   pairing specific local IPv6 addresses to specific IPv6 addresses from\n\
    \   the target list in further communications on the VC.  More\n   specifically,\
    \ such a pairing may be based on IPv6 addresses being on\n   the same subnet,\
    \ that is having the same prefix.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
