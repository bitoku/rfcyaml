- title: __initial_text__
  contents:
  - "                   Common Open Policy Service (COPS)\n                  Over\
    \ Transport Layer Security (TLS)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use Transport Layer Security (TLS)\
    \ to\n   secure Common Open Policy Service (COPS) connections over the\n   Internet.\n\
    \   This document also updates RFC 2748 by modifying the contents of the\n   Client-Accept\
    \ message.\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1. Introduction ....................................................2\n\
    \   2. COPS Over TLS ...................................................3\n  \
    \ 3. Separate Ports versus Upward Negotiation ........................3\n   4.\
    \ COPS/TLS Objects and Error codes ................................4\n      4.1.\
    \ The TLS Message Integrity Object (Integrity-TLS) ...........4\n      4.2. Error\
    \ Codes ................................................4\n   5. COPS/TLS Secure\
    \ Connection Initiation ...........................5\n      5.1. PEP Initiated\
    \ Security Negotiation .........................5\n      5.2. PDP Initiated Security\
    \ Negotiation .........................6\n   6. Connection Closure ..............................................7\n\
    \      6.1. PEP System Behavior ........................................7\n  \
    \    6.2. PDP System Behavior ........................................8\n   7.\
    \ Endpoint Identification and Access Control ......................8\n      7.1.\
    \ PEP Identity ...............................................9\n      7.2. PDP\
    \ Identity ...............................................9\n   8. Cipher Suite\
    \ Requirements ......................................10\n   9. Backward Compatibility\
    \ .........................................10\n   10. IANA Considerations ...........................................10\n\
    \   11. Security Considerations .......................................11\n  \
    \ 12. Acknowledgements ..............................................11\n   13.\
    \ References ....................................................12\n      13.1.\
    \ Normative References .....................................12\n      13.2. Informative\
    \ References ...................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   COPS [RFC2748] was designed to distribute clear-text policy\n\
    \   information from a centralized Policy Decision Point (PDP) to a set\n   of\
    \ Policy Enforcement Points (PEP) in the Internet.  COPS provides\n   its own\
    \ security mechanisms to protect the per-hop integrity of the\n   deployed policy.\
    \  However, the use of COPS for sensitive applications\n   (e.g., some types of\
    \ security policy distribution) requires\n   additional security measures, such\
    \ as data confidentiality.  This is\n   because some organizations find it necessary\
    \ to hide some or all of\n   their security policies, e.g., because policy distribution\
    \ to devices\n   such as mobile platforms can cross domain boundaries.\n   TLS\
    \ [RFC2246] was designed to provide channel-oriented security.  TLS\n   standardizes\
    \ SSL and may be used with any connection-oriented\n   service.  TLS provides\
    \ mechanisms for both one- and two-way\n   authentication, dynamic session keying,\
    \ and data stream privacy and\n   integrity.\n   This document describes how to\
    \ use COPS over TLS.  \"COPS over TLS\" is\n   abbreviated COPS/TLS.\n"
- title: Glossary
  contents:
  - "Glossary\n   COPS - Common Open Policy Service.  See [RFC2748].\n   COPS/TCP\
    \ - A plain-vanilla implementation of COPS.\n   COPS/TLS - A secure implementation\
    \ of COPS using TLS.\n   PDP - Policy Decision Point.  Also referred to as the\
    \ Policy Server.\n         See [RFC2753].\n   PEP - Policy Enforcement Point.\
    \  Also referred to as the Policy\n         Client.  See [RFC2753].\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  COPS Over TLS
  contents:
  - "2.  COPS Over TLS\n   COPS/TLS is very simple: use COPS over TLS similar to how\
    \ you would\n   use COPS over TCP (COPS/TCP).  Apart from a specific procedure\
    \ used\n   to initialize the connection, there is no difference between COPS/TLS\n\
    \   and COPS/TCP.\n"
- title: 3.  Separate Ports versus Upward Negotiation
  contents:
  - "3.  Separate Ports versus Upward Negotiation\n   There are two ways in which\
    \ insecure and secure versions of the same\n   protocol can be run simultaneously.\n\
    \   In the first method, the secure version of the protocol is also\n   allocated\
    \ a well-known port.  This strategy of having well-known port\n   numbers for\
    \ both, the secure and insecure versions, is known as\n   'Separate Ports'.  The\
    \ clients requiring security can simply connect\n   to the well-known secure port.\
    \  This method is easy to implement,\n   with no modifications needed to existing\
    \ insecure implementations.\n   The disadvantage, however, is that it doesn't\
    \ scale well, because a\n   new port is required for each secure implementation.\
    \  More problems\n   with this approach have been listed in [RFC2595].\n   The\
    \ second method is known as 'Upward Negotiation'.  In this method,\n   the secure\
    \ and insecure versions of the protocol run on the same\n   port.  The client\
    \ connects to the server, both discover each others'\n   capabilities, and start\
    \ security negotiations if desired.  This\n   method usually requires some changes\
    \ to the protocol being secured.\n   In view of the many issues with the Separate\
    \ Ports approach, the\n   authors have decided to use the Upward Negotiation method\
    \ for\n   COPS/TLS.\n"
- title: 4.  COPS/TLS Objects and Error codes
  contents:
  - "4.  COPS/TLS Objects and Error codes\n   This section describes the COPS objects\
    \ and error codes needed to\n   support COPS/TLS.\n"
- title: 4.1.  The TLS Message Integrity Object (Integrity-TLS)
  contents:
  - "4.1.  The TLS Message Integrity Object (Integrity-TLS)\n   The TLS Integrity\
    \ object is used by the PDP and the PEP to start the\n   TLS negotiation.  This\
    \ object should be included only in the Client-\n   Open or Client-Accept messages.\
    \  It MUST NOT be included in any other\n   COPS message.\n            0     \
    \    1          2          3\n      +----------+----------+----------+----------+\n\
    \      |   Length (Octets)   | C-Num=16 | C-Type=2 |\n      +----------+----------+----------+----------+\n\
    \      |       ////////      |        Flags        |\n      +----------+----------+----------+----------+\n\
    \      Note: //// implies the field is reserved, set to 0, and should\n      \
    \      be ignored on receipt.\n      Flags: 16 bits\n                  0x01 =\
    \ StartTLS\n                  This flag indicates that the sender of the message\n\
    \                  wishes to initiate a TLS handshake.\n   The Client-Type of\
    \ any message containing this object MUST be 0.\n   Client-Type 0 is used to negotiate\
    \ COPS connection level security and\n   must only be used during the connection\
    \ establishment phase.  Please\n   refer to section 4.1 of [RFC2748] for more\
    \ details.\n"
- title: 4.2.  Error Codes
  contents:
  - "4.2.  Error Codes\n   This section uses the error codes described in section\
    \ 2.2.8 (Error\n   Object) of [RFC2748].\n   Error Code:                13= Unknown\
    \ COPS Object:\n   Sub-code (octet 2) contains the unknown object's C-Num, and\
    \ (octet 3)\n   contains unknown object's C-Type.  If the PEP or PDP does not\
    \ support\n   TLS, the C-Num specified MUST be 16 and the C-Type MUST be 2.  This\n\
    \   demonstrates that the TLS version of the Integrity object is not\n   known.\n\
    \   This error code MUST be used by either PEP or PDP to indicate a\n   security-related\
    \ connection closure if it cannot support a TLS\n   connection for the COPS protocol.\n\
    \   If the PDP wishes to negotiate a different security mechanism than\n   requested\
    \ by the PEP in the Client-Open, it MUST send the following\n   error code:\n\
    \   Error Code:                  15= Authentication Required\n   Where the Sub-code\
    \ (octet 2) contains the C-Num=16 value for the\n   Integrity Object and (octet\
    \ 3) MUST specify the PDP\n   required/preferred Integrity object C-Type.  If\
    \ the server does not\n   support any form of COPS-Security, it MUST set the Sub-code\
    \ (octet 2)\n   to 16 and (octet 3) to zero instead, signifying that no type of\
    \ the\n   Integrity object is supported.\n"
- title: 5.  COPS/TLS Secure Connection Initiation
  contents:
  - "5.  COPS/TLS Secure Connection Initiation\n   Security negotiation may be initiated\
    \ by either the PDP or the PEP.\n   The PEP can initiate a negotiation via a Client-Open\
    \ message, while a\n   PDP can initiate a negotiation via a Client-Accept message.\n\
    \   Once the TLS connection is established, all COPS data MUST be sent as\n  \
    \ TLS \"application data\".\n"
- title: 5.1.  PEP Initiated Security Negotiation
  contents:
  - "5.1.  PEP Initiated Security Negotiation\n   A PEP MAY initiate a TLS security\
    \ negotiation with a PDP using the\n   Client-Open message.  To do this, the Client-Open\
    \ message MUST have a\n   Client-Type of 0 and MUST include the Integrity-TLS\
    \ object.\n   Upon receiving the Client-Open message, the PDP SHOULD respond with\
    \ a\n   Client-Accept message containing the Integrity-TLS object.\n   Note that\
    \ in order to carry the Integrity-TLS object, the contents of\n   the Client-Accept\
    \ message defined in section 3.7 of [RFC2748] need\n   not change, except that\
    \ the C-Type of the integrity object contained\n   there-in should now be C-Type=2.\
    \  For Example:\n      <Client-Accept> ::= <Common Header>\n                 \
    \         <KA Timer>\n                          [<ACCT Timer>]\n             \
    \             [<Integrity (C-Num=16, C-Type=2)>]\n   Note also that this new format\
    \ of the Client-Accept message does not\n   replace or obsolete the existing Client-Accept\
    \ message format, which\n   can continue to be used for non-secure COPS session\
    \ negotiations.\n   Upon receiving the appropriate Client-Accept message, the\
    \ PEP SHOULD\n   initiate the TLS handshake.\n   The message exchange is as follows:\n\
    \      C: Client-Open   (Client-Type = 0, Integrity-TLS)\n      S: Client-Accept\
    \ (Client-Type = 0, Integrity-TLS)\n      <TLS handshake>\n      C/S: <...further\
    \ messages...>\n   In case the PDP does not wish to open a secure connection with\
    \ the\n   PEP, it MUST reply with a Client-Close message and close the\n   connection.\
    \  The Client-Close message MUST include the error code 15=\n   Authentication\
    \ required, with the Sub-code (octet 2) set to 16 for\n   the Integrity object's\
    \ C-Num, and (octet 3) set to the C-Type\n   corresponding to the server's preferred\
    \ Integrity type, or zero for\n   no security.\n   A PEP requiring the Integrity-TLS\
    \ object in a Client-Accept message\n   MUST close the connection if the Integrity-TLS\
    \ object is missing.\n   The ensuing Client-Close message MUST include the error\
    \ code 15=\n   Authentication required, with the Sub-code (octet 2) containing\
    \ the\n   required Integrity object's C-Num=16, and (octet 3) containing the\n\
    \   required Integrity object's C-Type=2.\n"
- title: 5.2.  PDP Initiated Security Negotiation
  contents:
  - "5.2.  PDP Initiated Security Negotiation\n   The PEP initially opens a TCP connection\
    \ with the PDP on the standard\n   COPS port and sends a Client-Open message.\
    \  This Client-Open message\n   MUST have a Client-Type of 0.\n   The PDP SHOULD\
    \ then reply with a Client-Accept message.  In order to\n   signal the PEP to\
    \ start the TLS handshake, the PDP MUST include the\n   Integrity-TLS object in\
    \ the Client-Accept message.\n   Upon receiving the Client-Accept message with\
    \ the Integrity-TLS\n   object, the PEP SHOULD initiate the TLS handshake.  If\
    \ for any reason\n   the PEP cannot initiate the handshake, it MUST close the\
    \ connection.\n   The message exchange is as follows:\n      C: Client-Open  \
    \ (Client-Type = 0)\n      S: Client-Accept (Client-Type = 0, Integrity-TLS)\n\
    \      <TLS handshake>\n      C/S: <...further messages...>\n   After receiving\
    \ the Client-Accept, the PEP MUST NOT send any messages\n   until the TLS handshake\
    \ is complete.  Upon receiving any message from\n   the PEP before the TLS handshake\
    \ starts, the PDP MUST issue a\n   Client-Close message with an error code 15=\
    \ Authentication Required.\n   A PDP wishing to negotiate security with a PEP\
    \ having an existing\n   non-secure connection MUST send a Client-Close with the\
    \ error code\n   15= Authentication required, with the Sub-code (octet 2) containing\n\
    \   the required Integrity object's C-Num=16, and (octet 3) containing\n   the\
    \ required Integrity object's C-Type=2, and then wait for the PEP\n   to reconnect.\
    \  Upon receiving the Client-Open message, it SHOULD use\n   the Client-Accept\
    \ message to initiate security negotiation.\n"
- title: 6.  Connection Closure
  contents:
  - "6.  Connection Closure\n   TLS provides facilities to securely close its connections.\
    \  Reception\n   of a valid closure alert assures an implementation that no further\n\
    \   data will arrive on that connection.  The TLS specification requires\n   TLS\
    \ implementations to initiate a closure alert exchange before\n   closing a connection.\
    \  It also permits TLS implementations to close\n   connections without waiting\
    \ to receive closure alerts from the peer,\n   provided they send their own first.\
    \  A connection closed in this way\n   is known as an \"incomplete close\".  TLS\
    \ allows implementations to\n   reuse the session in this case, but COPS/TLS makes\
    \ no use of this\n   capability.\n   A connection closed without first sending\
    \ a closure alert is known as\n   a \"premature close\".  Note that a premature\
    \ close does not call into\n   question the security of the data already received,\
    \ but simply\n   indicates that subsequent data might have been truncated.  Because\n\
    \   TLS is oblivious to COPS message boundaries, it is necessary to\n   examine\
    \ the COPS data itself (specifically the Message header) to\n   determine whether\
    \ truncation occurred.\n"
- title: 6.1.  PEP System Behavior
  contents:
  - "6.1.  PEP System Behavior\n   PEP implementations MUST treat premature closes\
    \ as errors and any\n   data received as potentially truncated.  The COPS protocol\
    \ allows the\n   PEP system to find out whether truncation took place.  A PEP\
    \ system\n   detecting an incomplete close SHOULD recover gracefully.\n   PEP\
    \ systems SHOULD send a closure alert before closing the\n   connection.  PEPs\
    \ unprepared to receive any more data MAY choose not\n   to wait for the PDP system's\
    \ closure alert and simply close the\n   connection, thus generating an incomplete\
    \ close on the PDP side.\n"
- title: 6.2.  PDP System Behavior
  contents:
  - "6.2.  PDP System Behavior\n   COPS permits a PEP to close the connection at any\
    \ time, and requires\n   PDPs to recover gracefully.  In particular, PDPs SHOULD\
    \ be prepared\n   to receive an incomplete close from the PEP, since a PEP often\
    \ shuts\n   down for operational reasons unrelated to the transfer of policy\n\
    \   information between the PEP and PDP.\n      Implementation note: The PDP ordinarily\
    \ expects to be able to\n      signal the end of data by closing the connection.\
    \  However, the\n      PEP may have already sent the closure alert and dropped\
    \ the\n      connection.\n   PDP systems MUST attempt to initiate an exchange\
    \ of closure alerts\n   with the PEP system before closing the connection.  PDP\
    \ systems MAY\n   close the connection after sending the closure alert, thus generating\n\
    \   an incomplete close on the PEP side.\n"
- title: 7.  Endpoint Identification and Access Control
  contents:
  - "7.  Endpoint Identification and Access Control\n   All PEP implementations of\
    \ COPS/TLS MUST support an access control\n   mechanism to identify authorized\
    \ PDPs.  This requirement provides a\n   level of assurance that the policy arriving\
    \ at the PEP is actually\n   valid.  PEP deployments SHOULD require the use of\
    \ this access control\n   mechanism for operation of COPS over TLS.  When access\
    \ control is\n   enabled, the PEP implementation MUST NOT initiate COPS/TLS\n\
    \   connections to systems not authorized as PDPs by the access control\n   mechanism.\n\
    \   Similarly, PDP COPS/TLS implementations MUST support an access\n   control\
    \ mechanism permitting them to restrict their services to\n   authorized PEP systems\
    \ only.  However, deployments MAY choose not to\n   use an access control mechanism\
    \ at the PDP, as organizations might\n   not consider the types of policy being\
    \ deployed as sensitive, and\n   therefore do not need to incur the expense of\
    \ managing credentials\n   for the PEP systems.  If access controls are used,\
    \ however, the PDP\n   implementation MUST terminate COPS/TLS connections from\
    \ unauthorized\n   PEP systems and log an error if an auditable logging mechanism\
    \ is\n   present.\n   Implementations of COPS/TLS MUST use X.509 v3 certificates\
    \ conforming\n   to [RFC3280] to identify PDP and PEP systems.  COPS/TLS systems\
    \ MUST\n   perform certificate verification processing conforming to [RFC3280].\n\
    \   If a subjectAltName extension of type dNSName or iPAddress is present\n  \
    \ in the PDP's certificate, it MUST be used as the PDP identity.  If\n   both\
    \ types are present, dNSName SHOULD be used as the PDP identity.\n   If neither\
    \ type is present, the most specific Common Name field in\n   the Subject field\
    \ of the certificate SHOULD be used.\n   Matching is performed using the matching\
    \ rules specified by\n   [RFC3280].  If more than one identity of a given type\
    \ is present in\n   the certificate (e.g., more than one dNSName in the subjectAltName\n\
    \   certificate extension), a match in any one of the provided identities\n  \
    \ is acceptable.  Generally, the COPS system uses the first name for\n   matching,\
    \ except as noted below in the IP address checking\n   requirements.\n"
- title: 7.1.  PEP Identity
  contents:
  - "7.1.  PEP Identity\n   When PEP systems are not access controlled, the PDP does\
    \ not need\n   external knowledge of what the PEP's identity ought to be and so\n\
    \   checks are neither possible nor necessary.  In this case, there is no\n  \
    \ requirement for PEP systems to register with a certificate authority,\n   and\
    \ COPS over TLS uses one-way authentication, of the PDP to the PEP.\n   When PEP\
    \ systems are access controlled, PEPs MUST be the subjects of\n   end entity certificates\
    \ [RFC3280].  In this case, COPS over TLS uses\n   two-way authentication, and\
    \ the PDP MUST perform the same identity\n   checks for the PEPs as described\
    \ above for the PDP.\n   When access controls are in effect at the PDP, PDP implementations\n\
    \   MUST have a mechanism to securely acquire the trust anchor for each\n   authorized\
    \ Certification Authority (CA) that issues certificates to\n   supported PEPs.\n"
- title: 7.2.  PDP Identity
  contents:
  - "7.2.  PDP Identity\n   Generally, COPS/TLS requests are generated by the PEP\
    \ consulting\n   bootstrap policy information that identifies PDPs that the PEP\
    \ is\n   authorized to connect to.  This policy provides the PEP with the\n  \
    \ hostname or IP address of the PDP.  How this bootstrap policy\n   information\
    \ arrives at the PEP is outside the scope of this document.\n   However, all PEP\
    \ implementations MUST provide a mechanism to securely\n   deliver or configure\
    \ the bootstrap policy.\n   All PEP implementations MUST be able to securely acquire\
    \ the trust\n   anchor for each authorized Certification Authority (CA) that issues\n\
    \   PDP certificates.  Also, the PEPs MUST support a mechanism to\n   securely\
    \ acquire an access control list (ACL) or filter identifying\n   the set of authorized\
    \ PDPs associated with each CA.  Deployments must\n   take care to avoid circular\
    \ dependencies in accessing trust anchors\n   and ACLs.  At a minimum, trust anchors\
    \ and ACLs may be installed\n   manually.\n   PEP deployments that participate\
    \ in multiple domains, such as those\n   on mobile platforms, MAY use different\
    \ CAs and access control lists\n   in each domain.\n   If the PDP hostname or\
    \ IP address is available via the bootstrap\n   policy, the PEP MUST check it\
    \ against the PDP's identity as presented\n   in the PDP's TLS Certificate message.\n\
    \   In some cases, the bootstrap policy will identify the authorized PDP\n   only\
    \ by an IP address of the PDP system.  In this case, the\n   subjectAltName MUST\
    \ be present in the certificate, and it MUST\n   include an iPAddress format matching\
    \ the expected name of the policy\n   server.\n   If the hostname of the PDP does\
    \ not match the identity in the\n   certificate, a PEP on a user-oriented system\
    \ MUST either notify the\n   user (PEP systems MAY afford the user the opportunity\
    \ to continue\n   with the connection in any case) or terminate the connection\
    \ with a\n   bad certificate error.  PEPs on unattended systems MUST log the error\n\
    \   to an appropriate audit log (if available) and MUST terminate the\n   connection\
    \ with a bad certificate error.  Unattended PEP systems MAY\n   provide a configuration\
    \ setting that disables this check, but then\n   MUST provide a setting that enables\
    \ it.\n"
- title: 8. Cipher Suite Requirements
  contents:
  - "8. Cipher Suite Requirements\n   Implementations MUST support the TLS_RSA_WITH_3DES_EDE_CBC_SHA\
    \ cipher\n   suite.  All other cipher suites are optional.\n"
- title: 9.  Backward Compatibility
  contents:
  - "9.  Backward Compatibility\n   The PEP and PDP SHOULD be backward compatible\
    \ with peers that have\n   not been modified to support COPS/TLS.  They SHOULD\
    \ handle errors\n   generated in response to the Integrity-TLS object.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   The IANA has added the following C-Num, C-Type combination\
    \ for the\n   Integrity-TLS object to the registry at\n   http://www.iana.org/assignments/cops-parameters:\n\
    \   0x10  0x02    Message Integrity, Integrity-TLS      [RFC4261]\n   For Client-Type\
    \ 0, the IANA has added the following Flags value for\n   the Integrity-TLS object:\n\
    \      0x01 = StartTLS\n   Further, for Client-Type 0, the IANA has added the\
    \ following text for\n   Error Sub-Codes:\n      Error Code: 15\n      Error Sub-Code:\n\
    \      Octet 2: C-Num of the Integrity object\n      Octet 3: C-Type of the supported/preferred\
    \ Integrity object or\n               Zero.\n     Error-Code    Error-SubCode\
    \      Description\n                 Octet 2  Octet 3\n     ---------------------------------------------------\n\
    \       15          16        0        No security\n       15          16    \
    \    2        Integrity-TLS supported/preferred\n   Further values for the Flags\
    \ field and the reserved field can only be\n   assigned by IETF Consensus rule,\
    \ as defined in [RFC2434].\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   A COPS PDP and PEP MUST check the results of\
    \ the TLS negotiation to\n   see whether an acceptable degree of authentication\
    \ and privacy have\n   been achieved.  If the negotiation has resulted in unacceptable\n\
    \   algorithms or key lengths, either side MAY choose to terminate the\n   connection.\n\
    \   A man-in-the-middle attack can be launched by deleting the\n   Integrity-TLS\
    \ object or altering the Client-Open or Client-Accept\n   messages.  If security\
    \ is required, the PEP and PDP bootstrap policy\n   must specify this, and PEP\
    \ and PDP implementations should reject\n   Client-Open or Client-Accept messages\
    \ that fail to include an\n   Integrity-TLS object.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   This document freely plagiarizes and adapts Eric Rescorla's\
    \ similar\n   document [RFC2818] that specifies how HTTP runs over TLS.\n   Discussions\
    \ with David Durham, Scott Hahn, and Ylian Sainte-Hillaire\n   also lead to improvements\
    \ in this document.\n   The authors wish to thank Uri Blumenthal for doing a thorough\n\
    \   security review of the document.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2748] Durham, D., Boyle, J., Cohen, R., Herzog, S., Rajan, R.,\n\
    \             and A. Sastry, \"The COPS (Common Open Policy Service)\n       \
    \      Protocol\", RFC 2748, January 2000.\n   [RFC2753] Yavatkar, R., Pendarakis,\
    \ D., and R. Guerin, \"A Framework\n             for Policy-based Admission Control\"\
    , RFC 2753, January\n             2000.\n   [RFC3280] Housley, R., Polk, W., Ford,\
    \ W., and D. Solo, \"Internet\n             X.509 Public Key Infrastructure Certificate\
    \ and Certificate\n             Revocation List (CRL) Profile\", RFC 3280, April\
    \ 2002.\n   [RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n             RFC 2246, January 1999.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC2818] Rescorla, E., \"HTTP Over TLS\",\
    \ RFC 2818, May 2000.\n   [RFC2595] Newman, C., \"Using TLS with IMAP, POP3 and\
    \ ACAP\", RFC 2595,\n             June 1999.\n   [RFC2434] Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n             IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 2434,\n             October 1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Amol Kulkarni\n   Intel Corporation\n   2111 N.E. 25th\
    \ Avenue\n   Hillsboro, OR  97214\n   USA\n   EMail: amol.kulkarni@intel.com\n\
    \   Jesse R. Walker\n   Intel Corporation\n   2111 N.E. 25th Avenue\n   Hillsboro,\
    \ OR  97214\n   USA\n   EMail: jesse.walker@intel.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
