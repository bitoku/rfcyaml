- title: __initial_text__
  contents:
  - '                       Naming Things with Hashes

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a set of ways to identify a thing (a digital\n\
    \   object in this case) using the output from a hash function.  It\n   specifies\
    \ a new URI scheme for this purpose, a way to map these to\n   HTTP URLs, and\
    \ binary and human-speakable formats for these names.\n   The various formats\
    \ are designed to support, but not require, a\n   strong link to the referenced\
    \ object, such that the referenced object\n   may be authenticated to the same\
    \ degree as the reference to it.  The\n   reason for this work is to standardise\
    \ current uses of hash outputs\n   in URLs and to support new information-centric\
    \ applications and other\n   uses of hash outputs in protocols.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6920.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Hashes Are What Count  . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Named Information (ni) URI Format  . . . . . . . . . .\
    \ . . . .  6\n     3.1.  Content Type Query String Attribute  . . . . . . . .\
    \ . . .  8\n   4.  .well-known URI  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  9\n   5.  URL Segment Format . . . . . . . . . . . . . . . . . . . . .\
    \ . 10\n   6.  Binary Format  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 10\n   7.  Human-Speakable (nih) URI Format . . . . . . . . . . . . . . . 11\n\
    \   8.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n  \
    \   8.1.  Hello World! . . . . . . . . . . . . . . . . . . . . . . . 13\n    \
    \ 8.2.  Public Key Examples  . . . . . . . . . . . . . . . . . . . 13\n     8.3.\
    \  nih Usage Example  . . . . . . . . . . . . . . . . . . . . 14\n   9.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . . 15\n     9.1.  Assignment\
    \ of ni URI Scheme  . . . . . . . . . . . . . . . 15\n     9.2.  Assignment of\
    \ nih URI Scheme . . . . . . . . . . . . . . . 15\n     9.3.  Assignment of .well-known\
    \ 'ni' URI . . . . . . . . . . . . 16\n     9.4.  Creation of Named Information\
    \ Hash Algorithm Registry  . . 16\n     9.5.  Creation of Named Information Parameter\
    \ Registry . . . . . 18\n   10. Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 18\n   11. Acknowledgments  . . . . . . . . . . . . . . . .\
    \ . . . . . . . 20\n   12. References . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 20\n     12.1. Normative References . . . . . . . . . . . . . .\
    \ . . . . . 20\n     12.2. Informative References . . . . . . . . . . . . . .\
    \ . . . . 21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Identifiers -- names or locators -- are used in various\
    \ protocols to\n   identify resources.  In many scenarios, those identifiers contain\n\
    \   values that are obtained from hash functions.  Different deployments\n   have\
    \ chosen different ways to include the hash function outputs in\n   their identifiers,\
    \ resulting in interoperability problems.\n   This document defines the \"Named\
    \ Information\" identifier, which\n   provides a set of standard ways to use hash\
    \ function outputs in\n   names.  We begin with a few example uses for various\
    \ ways to include\n   hash function output in a name, with the specifics defined\
    \ later in\n   this document.  Figure 1 shows an example of the Named Information\n\
    \   (ni) URI scheme that this document defines.\n         ni:///sha-256;UyaQV-Ev4rdLoHyJJWCi11OHfrYv9E1aGQAlMO2X_-Q\n\
    \                         Figure 1: Example ni URI\n   Hash function outputs can\
    \ be used to ensure uniqueness in terms of\n   mapping URIs [RFC3986] to a specific\
    \ resource or to make URIs hard to\n   guess for security reasons.  Since there\
    \ is no standard way to\n   interpret those strings today, in general only the\
    \ creator of the URI\n   knows how to use the hash function output.  Other protocols,\
    \ such as\n   application-layer protocols for accessing \"smart objects\" in\n\
    \   constrained environments, also require more compact (e.g., binary)\n   forms\
    \ of such identifiers.  In yet other situations, people may have\n   to speak\
    \ such values, e.g., in a voice call (see Section 8.3), in\n   order to confirm\
    \ the presence or absence of a resource.\n   As another example, protocols for\
    \ accessing in-network storage\n   servers need a way to identify stored resources\
    \ uniquely and in a\n   location-independent way so that replicas on different\
    \ servers can be\n   accessed by the same name.  Also, such applications may require\n\
    \   verification that a resource representation that has been obtained\n   actually\
    \ corresponds to the name that was used to request the\n   resource, i.e., verifying\
    \ the binding between the data and the name,\n   which is here termed \"name-data\
    \ integrity\".\n   Similarly, in the context of information-centric networking\n\
    \   [NETINF-ARCHITECTURE] [CCN] and elsewhere, there is value in being\n   able\
    \ to compare a presented resource against the URI that was used to\n   access\
    \ that resource.  If a cryptographically strong comparison\n   function can be\
    \ used, then this allows for many forms of in-network\n   storage, without requiring\
    \ as much trust in the infrastructure used\n   to present the resource.  The outputs\
    \ of hash functions can be used\n   in this manner, if they are presented in a\
    \ standard way.\n   Additional applications might include creating references\
    \ from web\n   pages delivered over HTTP/TLS; DNS resource records signed using\n\
    \   DNSSEC or data values embedded in certificates, Certificate\n   Revocation\
    \ Lists (CRLs), or other signed data objects.\n   The Named Identifier can be\
    \ represented in a number of ways: using\n   the ni URI scheme that we specifically\
    \ define for the name (which is\n   very similar to the \"magnet link\" that is\
    \ informally defined in other\n   protocols [Magnet]), or using other mechanisms\
    \ also defined herein.\n   However it is represented, the Named Identifier *names*\
    \ a resource,\n   and the mechanism used to dereference the name and to *locate*\
    \ the\n   named resource needs to be known by the entity that dereferences it.\n\
    \   Media content-type, alternative locations for retrieval, and other\n   additional\
    \ information about a resource named using this scheme can\n   be provided using\
    \ a query string.  \"The Named Information (ni) URI\n   Scheme: Optional Features\"\
    \ [DECPARAMS] describes specific values that\n   can be used in such query strings\
    \ for these various purposes and\n   other extensions to this basic format specification.\n\
    \   In addition, we define a \".well-known\" URL equivalent, a way to\n   include\
    \ a hash as a segment of an HTTP URL, a binary format for use\n   in protocols\
    \ that require more compact names, and a human-speakable\n   text form that could\
    \ be used, e.g., for reading out (parts of) the\n   name over a voice connection.\n\
    \   Not all uses of these names require use of the full hash output --\n   truncated\
    \ hashes can be safely used in some environments.  For this\n   reason, we define\
    \ a new IANA registry for hash functions to be used\n   with this specification\
    \ so as not to mix strong and weak (truncated)\n   hash algorithms in other protocol\
    \ registries.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   Syntax definitions in this memo are specified according\
    \ to ABNF\n   [RFC5234].\n"
- title: 2.  Hashes Are What Count
  contents:
  - "2.  Hashes Are What Count\n   This section contains basic considerations related\
    \ to how we use hash\n   function outputs that are common to all formats.\n  \
    \ When comparing two names of the form defined here, an implementation\n   MUST\
    \ only consider the digest algorithm and the digest value, i.e.,\n   it MUST NOT\
    \ consider other fields defined below (such as an authority\n   field from a URI\
    \ or any parameters).  Implementations MUST consider\n   two hashes identical,\
    \ regardless of encoding, if the decoded hashes\n   are based on the same algorithm\
    \ and have the same length and the same\n   binary value.  In that case, the two\
    \ names can be treated as\n   referring to the same thing.\n   The sha-256 algorithm\
    \ as specified in [SHA-256] is mandatory to\n   implement; that is, implementations\
    \ MUST be able to generate/send and\n   to accept/process names based on a sha-256\
    \ hash.  However,\n   implementations MAY support additional hash algorithms and\
    \ MAY use\n   those for specific names, for example, in a constrained environment\n\
    \   where sha-256 is non-optimal or where truncated names are needed to\n   fit\
    \ into corresponding protocols (when a higher collision probability\n   can be\
    \ tolerated).\n   Truncated hashes MAY be supported.  When a hash value is truncated,\n\
    \   the name MUST indicate this.  Therefore, we use different hash\n   algorithm\
    \ strings in these cases, such as sha-256-32 for a 32-bit\n   truncation of a\
    \ sha-256 output.  A 32-bit truncated hash is\n   essentially useless for security\
    \ in almost all cases but might be\n   useful for naming.  With current best practices\
    \ [RFC3766], very few,\n   if any, applications making use of names with less\
    \ than 100-bit\n   hashes will have useful security properties.\n   When a hash\
    \ value is truncated to N bits, the leftmost N bits (that\n   is, the most significant\
    \ N bits in network byte order) from the\n   binary representation of the hash\
    \ value MUST be used as the truncated\n   value.  An example of a 128-bit hash\
    \ output truncated to 32 bits is\n   shown in Figure 2.\n                    \
    \   128-bit hash: 0x265357902fe1b7e2a04b897c6025d7a2\n              32-bit truncated\
    \ hash: 0x26535790\n                    Figure 2: Example of Truncated Hash\n\
    \   When the input to the hash algorithm is a public key value, as may be\n  \
    \ used by various security protocols, the hash SHOULD be calculated\n   over the\
    \ public key in an X.509 SubjectPublicKeyInfo structure\n   (Section 4.1 of [RFC5280]).\
    \  This input has been chosen primarily for\n   compatibility with the DANE TSLA\
    \ protocol [RFC6698] but also includes\n   any relevant public key parameters\
    \ in the hash input, which is\n   sometimes necessary for security reasons.  This\
    \ does not force use of\n   X.509 or full compliance with [RFC5280] since formatting\
    \ any public\n   key as a SubjectPublicKeyInfo is relatively straightforward and\
    \ well\n   supported by libraries.\n   Any of the formats defined below can be\
    \ used to represent the\n   resulting name for a public key.\n   Other than in\
    \ the aforementioned special case where public keys are\n   used, we do not specify\
    \ the hash function input here.  Other\n   specifications are expected to define\
    \ this.\n"
- title: 3.  Named Information (ni) URI Format
  contents:
  - "3.  Named Information (ni) URI Format\n   A Named Information (ni) URI consists\
    \ of the following nine\n   components:\n   Scheme Name:  The scheme name is 'ni'.\n\
    \   Colon and Slashes:  The literal \"://\"\n   Authority:  The optional authority\
    \ component may assist applications\n      in accessing the object named by an\
    \ ni URI.  There is no default\n      value for the authority field.  (See Section\
    \ 3.2.2 of [RFC3986]\n      for details.)  While ni names with and without an\
    \ authority differ\n      syntactically from ni names with different authorities,\
    \ all three\n      refer to the same object if and only if the digest algorithm,\n\
    \      length, and value are the same.\n   One slash:  The literal \"/\"\n   Digest\
    \ Algorithm:  The name of the digest algorithm, as specified in\n      the IANA\
    \ registry defined in Section 9.4 below.\n   Separator:  The literal \";\"\n \
    \  Digest Value:  The digest value MUST be encoded using the base64url\n     \
    \ [RFC4648] encoding, with no \"=\" padding characters.\n   Query Parameter separator\
    \ '?':  The query parameter separator acts as\n      a separator between the digest\
    \ value and the query parameters (if\n      specified).  For compatibility with\
    \ Internationalized Resource\n      Identifiers (IRIs), non-ASCII characters in\
    \ the query part MUST be\n      encoded as UTF-8, and the resulting octets MUST\
    \ be percent-encoded\n      (see [RFC3986], Section 2.1).\n   Query Parameters:\
    \  A \"tag=value\" list of optional query parameters as\n      are used with HTTP\
    \ URLs [RFC2616] with a separator character '&'\n      between each.  For example,\
    \ \"foo=bar&baz=bat\".\n   It is OPTIONAL for implementations to check the integrity\
    \ of the URI/\n   resource mapping when sending, receiving, or processing ni URIs.\n\
    \   Escaping of characters follows the rules in RFC 3986.  This means\n   that\
    \ percent-encoding is used to distinguish between reserved and\n   unreserved\
    \ functions of the same character in the same URI component.\n   As an example,\
    \ an ampersand ('&') is used in the query part to\n   separate attribute-value\
    \ pairs; therefore, an ampersand in a value\n   has to be escaped as '%26'.  Note\
    \ that the set of reserved characters\n   differs for each component.  As an example,\
    \ a slash ('/') does not\n   have any reserved function in a query part and therefore\
    \ does not\n   have to be escaped.  However, it can still appear escaped as '%2f'\
    \ or\n   '%2F', and implementations have to be able to understand such escaped\n\
    \   forms.  Also note that any characters outside those allowed in the\n   respective\
    \ URI component have to be escaped.\n   The Named Information URI adapts the URI\
    \ definition from the URI\n   Generic Syntax [RFC3986].  We start with the base\
    \ URI production:\n         URI = scheme \":\" hier-part [ \"?\" query ] [ \"\
    #\" fragment ]\n             ; from RFC 3986\n                           Figure\
    \ 3: URI Syntax\n   Then, we adapt that for the Named Information URI:\n     \
    \    NI-URI         = ni-scheme \":\" ni-hier-part [ \"?\" query ]\n         \
    \    ; adapted from \"URI\" in RFC 3986\n             ; query is from RFC 3986,\
    \ Section 3.4\n         ni-scheme      = \"ni\"\n         ni-hier-part   = \"\
    //\" [ authority ] \"/\" alg-val\n             ; authority is from RFC 3986, Section\
    \ 3.2\n         alg-val        = alg \";\" val\n             ; adapted from \"\
    hier-part\" in RFC 3986\n         alg            = 1*unreserved\n         val\
    \            = 1*unreserved\n             ; unreserved is from RFC 3986, Section\
    \ 2.3\n                         Figure 4: ni Name Syntax\n   The \"val\" field\
    \ MUST contain the output of base64url encoding (with\n   no \"=\" padding characters),\
    \ the result of applying the hash function\n   (\"alg\") to its defined input,\
    \ which defaults to the object bytes that\n   are expected to be returned when\
    \ the URI is dereferenced.\n   Relative ni URIs can occur.  In such cases, the\
    \ algorithm in Section\n   5 of [RFC3986] applies.  As an example, in Figure 5,\
    \ the absolute URI\n   for \"this third document\" is \"ni://example.com/sha-256-128;...\"\
    .\n     <html>\n      <head>\n        <title>ni: relative URI test</title>\n \
    \       <base href=\"ni://example.com\">\n      </head>\n      <body>\n      \
    \  <p>Please check <a href=\"sha-256;f4OxZX...\">this document</a>.\n        \
    \  and <a href=\"sha-256;UyaQV...\">this other document</a>.\n          and <a\
    \ href=\"sha-256-128;...\">this third document</a>.\n        </p>\n      </body>\n\
    \     </html>\n                Figure 5: Example HTML with Relative ni URI\n \
    \  The authority field in an ni URI is not quite the same as that from\n   an\
    \ HTTP URL, even though the same values (e.g., DNS names) may be\n   usefully\
    \ used in both.  For an ni URI, the authority does not control\n   nearly as much\
    \ of the structure of the \"right-hand side\" of the URI.\n   With ni URIs we\
    \ also define standard query string attributes and, of\n   course, have a strictly\
    \ defined way to include the hash value.\n   Internationalisation of strings within\
    \ ni names is handled exactly as\n   for http URIs -- see [RFC2616], Section 3.2.3.\n"
- title: 3.1.  Content Type Query String Attribute
  contents:
  - "3.1.  Content Type Query String Attribute\n   The semantics of a digest being\
    \ used to establish a secure reference\n   from an authenticated source to an\
    \ external source may be a function\n   of associated metadata such as the Content\
    \ Type.  The Content Type\n   \"ct\" parameter specifies the MIME Content Type\
    \ of the associated data\n   as defined in [RFC6838].  See Section 9.5 for the\
    \ associated IANA\n   registry for ni parameter names as shown in Figure 6.\n\
    \   Implementations of this specification MUST support parsing the \"ct=\"\n \
    \  query string attribute name.\n                   ni:///sha-256-32;f4OxZQ?ct=text/plain\n\
    \                Figure 6: Example ni URI with Content Type\n   Protocols making\
    \ use of ni URIs will need to specify how to verify\n   name-data integrity for\
    \ the MIME Content Types that they need to\n   process and will need to take into\
    \ account possible Content-Transfer-\n   Encodings and other aspects of MIME encoding.\n\
    \   Implementations of this specification SHOULD support name-data\n   integrity\
    \ validation for at least the application/octet-stream\n   Content Type, with\
    \ no explicit Content-Transfer-Encoding (which is\n   equivalent to binary). \
    \ Additional Content Types and Content-\n   Transfer-Encodings can of course also\
    \ be supported, but are OPTIONAL.\n   Note that the hash is calculated after the\
    \ Content-Transfer-Encoding\n   is removed so it is applied to the raw data.\n\
    \   If a) the user agent is sensitive to the Content Type and b) the ni\n   name\
    \ used has a \"ct=\" query string attribute and c) the object is\n   retrieved\
    \ (from a server) using a protocol that specifies a Content\n   Type, then, if\
    \ the two Content Types match, all is well.  If, in this\n   situation, the Content\
    \ Types do not match, then the client SHOULD\n   handle that situation as a potential\
    \ security error.  Content Type\n   matching rules are defined in [RFC2045], Section\
    \ 5.1.\n"
- title: 4.  .well-known URI
  contents:
  - "4.  .well-known URI\n   We define a mapping between URIs following the ni URI\
    \ scheme and HTTP\n   [RFC2616] or HTTPS [RFC2818] URLs that makes use of the\
    \ .well-known\n   URI [RFC5785] by defining an \"ni\" suffix (see Section 9).\n\
    \   The HTTP(S) mapping MAY be used in any context where clients with\n   support\
    \ for ni URIs are not available.\n   Since the .well-known name-space is not intended\
    \ for general\n   information retrieval, if an application dereferences a\n  \
    \ .well-known/ni URL via HTTP(S), then it will often receive a 3xx HTTP\n   redirection\
    \ response.  A server responding to a request for a\n   .well-known/ni URL will\
    \ often therefore return a 3xx response, and a\n   client sending such a request\
    \ MUST be able to handle that, as should\n   any fully compliant HTTP [RFC2616]\
    \ client.\n   For an ni name of the form \"ni://n-authority/alg;val?query-string\"\
    \n   the corresponding HTTP(S) URL produced by this mapping is\n   \"http://h-authority/.well-known/ni/alg/val?query-string\"\
    , where\n   \"h-authority\" is derived as follows: If the ni name has a specified\n\
    \   authority (i.e., the n-authority is non-empty), then the h-authority\n   MUST\
    \ have the same value.  If the ni name has no authority specified\n   (i.e., the\
    \ n-authority string is empty), a h-authority value MAY be\n   derived from the\
    \ application context.  For example, if the mapping is\n   being done in the context\
    \ of a web page, then the origin [RFC6454]\n   for that web site can be used.\
    \  Of course, in general there are no\n   guarantees that the object named by\
    \ the ni URI will be available via\n   the corresponding HTTP(S) URL.  But in\
    \ the case that any data is\n   returned, the retriever can determine whether\
    \ or not it is content\n   that matches the ni URI.\n   If an application is presented\
    \ with an HTTP(S) URL with\n   \"/.well-known/ni/\" as the start of its pathname\
    \ component, then the\n   reverse mapping to an ni URI either including or excluding\
    \ the\n   authority might produce an ni URI that is meaningful.  However, there\n\
    \   is no guarantee that this will be the case.\n   When mapping from an ni URI\
    \ to a .well-known URL, an implementation\n   will have to decide between choosing\
    \ an \"http\" or \"https\" URL.  If\n   the object referenced does in fact match\
    \ the hash in the URL, then\n   there is arguably no need for additional data\
    \ integrity, if the ni\n   URI or .well-known URL was received \"securely.\" \
    \ However, TLS also\n   provides confidentiality, so there can still be reasons\
    \ to use the\n   \"https\" URL scheme even in this case.  Additionally, web server\n\
    \   policy such as [RFC6797] may dictate that data only be available over\n  \
    \ \"https\".  In general, however, whether to use \"http\" or \"https\" is\n \
    \  something that needs to be decided by the application.\n"
- title: 5.  URL Segment Format
  contents:
  - "5.  URL Segment Format\n   Some applications may benefit from using hashes in\
    \ existing HTTP URLs\n   or other URLs.  To do this, one simply uses the \"alg-val\"\
    \ production\n   from the ni name scheme ABNF, which may be included, for example,\
    \ in\n   the pathname, query string, or even fragment components of HTTP URLs\n\
    \   [RFC2616].  In such cases, there is nothing present in the URL that\n   ensures\
    \ that a client can depend on compliance with this\n   specification, so clients\
    \ MUST NOT assume that any URL with a\n   pathname component that matches the\
    \ \"alg-val\" production was in fact\n   produced as a result of this specification.\
    \  That URL might or might\n   not be related to this specification, only the\
    \ context will tell.\n"
- title: 6.  Binary Format
  contents:
  - "6.  Binary Format\n   If a more space-efficient version of the name is needed,\
    \ the\n   following binary format can be used.  The binary format name consists\n\
    \   of two fields: a header and the hash value.  The header field defines\n  \
    \ how the identifier has been created, and the hash value contains a\n   (possibly\
    \ truncated) result of a one-way hash over whatever is being\n   identified by\
    \ the hash value.  The binary format of a name is shown\n   in Figure 7.\n   \
    \   0                   1                   2                   3\n      0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |Res| Suite ID  |              Hash Value                       /\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     /  \
    \                           ...                               /\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     /      ...      |\n     +-+-+-+-+-+-+-+-+\n                       Figure\
    \ 7: Binary Name Format\n   The Res field is a reserved 2-bit field for future\
    \ use and MUST be\n   set to zero for this specification and ignored on receipt.\n\
    \   The hash algorithm and truncation length are specified by the Suite\n   ID.\
    \  For maintaining efficient encoding for the binary format, only a\n   few hash\
    \ algorithms and truncation lengths are supported.  See\n   Section 9.4 for details.\n\
    \   A hash value that is truncated to 120 bits will result in the overall\n  \
    \ name being a 128-bit value, which may be useful for protocols that\n   can easily\
    \ use 128-bit identifiers.\n"
- title: 7.  Human-Speakable (nih) URI Format
  contents:
  - "7.  Human-Speakable (nih) URI Format\n   Sometimes a resource may need to be\
    \ referred to via a name in a\n   format that is easy for humans to read out and\
    \ less likely to be\n   ambiguous when heard.  This is intended to be usable,\
    \ for example,\n   over the phone in order to confirm the (current or future)\
    \ presence\n   or absence of a resource.  This \"confirmation\" use-case described\n\
    \   further in Section 8.3 is the main current use-case for Named\n   Information\
    \ for Humans (nih) URIs. (\"nih\" also means \"Not Invented\n   Here\", which\
    \ is clearly false, and therefore worth including\n   [RFC5513]. :-)\n   The ni\
    \ URI format is not well-suited for this, as, for example,\n   base64url uses\
    \ both uppercase and lowercase, which can easily cause\n   confusion.  For this\
    \ particular purpose (\"speaking\" the value of a\n   hash output), the more verbose\
    \ but less ambiguous (when spoken) nih\n   URI scheme is defined.\n   The justification\
    \ for nih being a URI scheme is that it can help a\n   user agent for the speaker\
    \ to better display the value or help a\n   machine to better speak or recognise\
    \ the value when spoken.  We do\n   not include the query string since there is\
    \ no way to ensure that its\n   value might be spoken unambiguously and similarly\
    \ for the authority,\n   where, e.g., some internationalised forms of domain name\
    \ might not be\n   easy to speak and comprehend easily.  This leaves the hash\
    \ value as\n   the only part of the ni URI that we feel can be usefully included.\n\
    \   But since speakers or listeners (or speech recognition) may err, we\n   also\
    \ include a checkdigit to catch common errors and allow for the\n   inclusion\
    \ of \"-\" separators to make nih URIs easier to read out.\n   Fields in nih URIs\
    \ are separated by a semicolon (;) character.  The\n   first field is a hash algorithm\
    \ string, as in the ni URI format.  The\n   hash value is represented using lowercase\
    \ ASCII hex characters; for\n   example, an octet with the decimal value 58 (0x3A)\
    \ is encoded as\n   '3a'.  This is the same as base16 encoding as defined in RFC\
    \ 4648\n   [RFC4648] except using lowercase letters.  Separators (\"-\"\n   characters)\
    \ MAY be interspersed in the hash value in any way to make\n   those easier to\
    \ read, typically grouping four or six characters with\n   a separator between.\n\
    \   The hash value MAY be followed by a semicolon ';' then a checkdigit.\n   The\
    \ checkdigit MUST be calculated using Luhn's mod N algorithm (with\n   N=16) as\
    \ defined in [ISOIEC7812] (see also [Luhn]).  The input to the\n   calculation\
    \ is the ASCII hex-encoded hash value (i.e., \"sepval\" in\n   the ABNF production\
    \ below) but with all \"-\" separator characters\n   first stripped out.  This\
    \ maps the ASCII hex so that '0'=0, ...'9'=9,\n   'a'=10, ...'f'=15.  None of\
    \ the other fields, nor any \"-\" separators,\n   are input when calculating the\
    \ checkdigit.\n          humanname  = \"nih:\" alg-sepval [ \";\" checkdigit ]\n\
    \          alg-sepval = alg \";\" sepval\n          sepval     = 1*(ahlc / \"\
    -\")\n          ahlc       =  DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" /\
    \ \"f\"\n                ; DIGIT is defined in RFC 5234 and is 0-9\n         \
    \ checkdigit = ahlc\n                     Figure 8: Human-Speakable Syntax\n \
    \  For algorithms that have a Suite ID reserved (see Figure 11), the alg\n   field\
    \ MAY contain the ID value as an ASCII-encoded decimal number\n   instead of the\
    \ hash name string (for example, \"3\" instead of\n   \"sha-256-120\").  Implementations\
    \ MUST be able to match the decimal ID\n   values for the algorithms and hash\
    \ lengths that they support, even if\n   they do not support the binary format.\n\
    \   There is no such thing as a relative nih URI.\n"
- title: 8.  Examples
  contents:
  - '8.  Examples

    '
- title: 8.1.  Hello World!
  contents:
  - "8.1.  Hello World!\n   The following ni URI is generated from the text \"Hello\
    \ World!\" (12\n   characters without the quotes), using the sha-256 algorithm\
    \ shown\n   with and without an authority field:\n   ni:///sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk\n\
    \   ni://example.com/sha-256;f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk\n   The\
    \ following HTTP URL represents a mapping from the previous ni name\n   based\
    \ on the algorithm outlined above.\n   http://example.com/.well-known/ni/sha-256/\n\
    \   f4OxZX_x_FO5LcGBSKHWXfwtSx-j1ncoSt3SABJtkGk\n"
- title: 8.2.  Public Key Examples
  contents:
  - "8.2.  Public Key Examples\n   Given the DER-encoded SubjectPublicKeyInfo in Figure\
    \ 9, we derive the\n   names shown in Figure 10 for this value.\n          0000000\
    \ 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01\n          0000020 01 05 00\
    \ 03 82 01 0f 00 30 82 01 0a 02 82 01 01\n          0000040 00 a2 5f 83 da 9b\
    \ d9 f1 7a 3a 36 67 ba fd 5a 94\n          0000060 0e cf 16 d5 5a 55 3a 5e d4\
    \ 03 b1 65 8e 6d cf a3\n          0000100 b7 db a4 e7 cc 0f 52 c6 7d 35 1d c4\
    \ 68 c2 bd 7b\n          0000120 9d db e4 0a d7 10 cd f9 53 20 ee 0d d7 56 6e\
    \ 5b\n          0000140 7a ae 2c 5f 83 0a 19 3c 72 58 96 d6 86 e8 0e e6\n    \
    \      0000160 94 eb 5c f2 90 3e f3 a8 8a 88 56 b6 cd 36 38 76\n          0000200\
    \ 22 97 b1 6b 3c 9c 07 f3 4f 97 08 a1 bc 29 38 9b\n          0000220 81 06 2b\
    \ 74 60 38 7a 93 2f 39 be 12 34 09 6e 0b\n          0000240 57 10 b7 a3 7b f2\
    \ c6 ee d6 c1 e5 ec ae c5 9c 83\n          0000260 14 f4 6b 58 e2 de f2 ff c9\
    \ 77 07 e3 f3 4c 97 cf\n          0000300 1a 28 9e 38 a1 b3 93 41 75 a1 a4 76\
    \ 3f 4d 78 d7\n          0000320 44 d6 1a e3 ce e2 5d c5 78 4c b5 31 22 2e c7\
    \ 4b\n          0000340 8c 6f 56 78 5c a1 c4 c0 1d ca e5 b9 44 d7 e9 90\n    \
    \      0000360 9c bc ee b0 a2 b1 dc da 6d a0 0f f6 ad 1e 2c 12\n          0000400\
    \ a2 a7 66 60 3e 36 d4 91 41 c2 f2 e7 69 39 2c 9d\n          0000420 d2 df b5\
    \ a3 44 95 48 7c 87 64 89 dd bf 05 01 ee\n          0000440 dd 02 03 01 00 01\n\
    \          0000000 53 26 90 57 e1 2f e2 b7 4b a0 7c 89 25 60 a2 d7\n         \
    \ 0000020 53 87 7e b6 2f f4 4d 5a 19 00 25 30 ed 97 ff e4\n             Figure\
    \ 9: A SubjectPublicKeyInfo Used in Examples\n                           and Its\
    \ sha-256 Hash\n   +-------------------------------------------------------------------+\n\
    \   | URI:                                                              |\n  \
    \ | ni:///sha-256;UyaQV-Ev4rdLoHyJJWCi11OHfrYv9E1aGQAlMO2X_-Q         |\n   +-------------------------------------------------------------------+\n\
    \   | .well-known URL (split over 2 lines):                             |\n  \
    \ | http://example.com/.well-known/ni/sha256/                         |\n   |\
    \ UyaQV-Ev4rdLoHyJJWCi11OHfrYv9E1aGQAlMO2X_-Q                       |\n   +-------------------------------------------------------------------+\n\
    \   | URL Segment:                                                      |\n  \
    \ | sha-256;UyaQV-Ev4rdLoHyJJWCi11OHfrYv9E1aGQAlMO2X_-Q               |\n   +-------------------------------------------------------------------+\n\
    \   | Binary name (ASCII hex encoded) with 120-bit truncated hash value |\n  \
    \ | which is Suite ID 0x03:                                           |\n   |\
    \ 0353 2690 57e1 2fe2 b74b a07c 8925 60a2                           |\n   +-------------------------------------------------------------------+\n\
    \   | Human-speakable form of a name for this key (truncated to 120 bits|\n  \
    \ | in length) with checkdigit:                                       |\n   |\
    \ nih:sha-256-120;5326-9057-e12f-e2b7-4ba0-7c89-2560-a2;f           |\n   +-------------------------------------------------------------------+\n\
    \   | Human-speakable form of a name for this key (truncated to 32 bits |\n  \
    \ | in length) with checkdigit and no \"-\" separators:                 |\n  \
    \ | nih:sha-256-32;53269057;b                                         |\n   +-------------------------------------------------------------------+\n\
    \   | Human-speakable form using decimal presentation of the            |\n  \
    \ | algorithm ID (sha-256-120) with checkdigit:                       |\n   |\
    \ nih:3;532690-57e12f-e2b74b-a07c89-2560a2;f                        |\n   +-------------------------------------------------------------------+\n\
    \                         Figure 10: Example Names\n"
- title: 8.3.  nih Usage Example
  contents:
  - "8.3.  nih Usage Example\n   Alice has set up a server node with an RSA key pair.\
    \  She uses an ni\n   URI as the name for the public key that corresponds to the\
    \ private\n   key on that box.  Alice's node might identify itself using that\
    \ ni\n   URI in some protocol.\n   Bob would like to believe that it's really\
    \ Alice's node when his node\n   interacts with the network and asks his friend\
    \ Alice to tell him what\n   public key she uses.  Alice hits the \"tell someone\
    \ the name of the\n   public key\" button on her admin user interface and that\
    \ displays the\n   nih URI and says \"tell this to your buddy\".  She phones Bob\
    \ and reads\n   the nih URI to him.\n   Bob types that in to his \"manage known\
    \ nodes\" admin application (or\n   lets that application listen to part of the\
    \ call), which can\n   regenerate the ni URI and store that or some equivalent.\
    \  Then when\n   Bob's node interacts with Alice's node, it can more safely accept\
    \ a\n   signature or encrypt data to Alice's node.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  Assignment of ni URI Scheme
  contents:
  - "9.1.  Assignment of ni URI Scheme\n   The procedures for registration of a URI\
    \ scheme are specified in RFC\n   4395 [RFC4395].  The following assignment has\
    \ been made.\n   URI scheme name: ni\n   Status: Permanent\n   URI scheme syntax:\
    \ See Section 3.\n   URI scheme semantics: See Section 3.\n   Encoding considerations:\
    \ See Section 3.\n   Applications/protocols that use this URI scheme name:\n \
    \     General applicability.\n   Interoperability considerations: Defined here.\n\
    \   Security considerations: See Section 10.\n   Contact: Stephen Farrell, stephen.farrell@cs.tcd.ie\n\
    \   Author/Change controller: IETF\n   References: As specified in this document\n"
- title: 9.2.  Assignment of nih URI Scheme
  contents:
  - "9.2.  Assignment of nih URI Scheme\n   The procedures for registration of a URI\
    \ scheme are specified in RFC\n   4395 [RFC4395].  The following assignment has\
    \ been made.\n   URI scheme name: nih\n   Status: Permanent\n   URI scheme syntax:\
    \ See Section 7.\n   URI scheme semantics: See Section 7.\n   Encoding considerations:\
    \ See Section 7.\n   Applications/protocols that use this URI scheme name:\n \
    \     General applicability.\n   Interoperability considerations: Defined here.\n\
    \   Security considerations: See Section 10.\n   Contact: Stephen Farrell, stephen.farrell@cs.tcd.ie\n\
    \   Author/Change controller: IETF\n   References: As specified in this document\n"
- title: 9.3.  Assignment of .well-known 'ni' URI
  contents:
  - "9.3.  Assignment of .well-known 'ni' URI\n   The procedures for registration\
    \ of a Well-Known URI entry are\n   specified in RFC 5785 [RFC5785].  The following\
    \ assignment has been\n   made.\n   URI suffix: ni\n   Change controller: IETF\n\
    \   Specification document(s): This document\n   Related information: None\n"
- title: 9.4.  Creation of Named Information Hash Algorithm Registry
  contents:
  - "9.4.  Creation of Named Information Hash Algorithm Registry\n   IANA has created\
    \ a new registry for hash algorithms as used in the\n   name formats specified\
    \ here; it is called the \"Named Information Hash\n   Algorithm Registry\".  Future\
    \ assignments are to be made through\n   Expert Review [RFC5226].  This registry\
    \ has five fields: the suite\n   ID, the hash algorithm name string, the truncation\
    \ length, the\n   underlying algorithm reference, and a status field that indicates\
    \ if\n   the algorithm is current or deprecated and should no longer be used.\n\
    \   The status field can have the value \"current\" or \"deprecated\".  Other\n\
    \   values are reserved for possible future definition.\n   If the status is \"\
    current\", then that does not necessarily mean that\n   the algorithm is \"good\"\
    \ for any particular purpose, since the\n   cryptographic strength requirements\
    \ will be set by other applications\n   or protocols.\n   A request to mark an\
    \ entry as \"deprecated\" can be done by sending a\n   mail to the Designated\
    \ Expert.  Before approving the request, the\n   community MUST be consulted via\
    \ a \"call for comments\" of at least two\n   weeks by sending a mail to the IETF\
    \ discussion list.\n   Initial values are specified below.  The Designated Expert\
    \ SHOULD\n   generally approve additions that reference hash algorithms that are\n\
    \   widely used in other IETF protocols.  In addition, the Designated\n   Expert\
    \ SHOULD NOT accept additions where the underlying hash function\n   (with no\
    \ truncation) is considered weak for collisions.  Part of the\n   reasoning behind\
    \ this last point is that inclusion of code for weak\n   hash functions, e.g.,\
    \ the MD5 algorithm, can trigger costly false\n   positives if code is audited\
    \ for inclusion of obsolete ciphers.  See\n   [RFC6149], [RFC6150], and [RFC6151]\
    \ for examples of some hash\n   functions that are considered obsolete in this\
    \ sense.\n   The suite ID field (\"ID\") can be empty or can have values between\
    \ 0\n   and 63, inclusive.  Because there are only 64 possible values, this\n\
    \   field is OPTIONAL (leaving it empty if omitted).  Where the binary\n   format\
    \ is not expected to be used for a given hash algorithm, this\n   field SHOULD\
    \ be omitted.  If an entry is registered without a suite\n   ID, the Designated\
    \ Expert MAY allow for later allocation of a suite\n   ID, if that appears warranted.\
    \  The Designated Expert MAY consult the\n   community via a \"call for comments\"\
    \ by sending a mail to the IETF\n   discussion list before allocating a suite\
    \ ID.\n       ID  Hash Name String     Value Length     Reference   Status\n \
    \      0   Reserved\n       1   sha-256              256 bits         [SHA-256]\
    \   current\n       2   sha-256-128          128 bits         [SHA-256]   current\n\
    \       3   sha-256-120          120 bits         [SHA-256]   current\n      \
    \ 4   sha-256-96           96 bits          [SHA-256]   current\n       5   sha-256-64\
    \           64 bits          [SHA-256]   current\n       6   sha-256-32      \
    \     32 bits          [SHA-256]   current\n       32  Reserved\n            \
    \           Figure 11: Suite Identifiers\n   The Suite ID value 32 is reserved\
    \ for compatibility with IPv6\n   addresses from the Special Purpose Address Registry\
    \ [RFC4773], such\n   as Overlay Routable Cryptographic Hash Identifiers (ORCHIDs)\n\
    \   [RFC4843].\n   The referenced hash algorithm matching the Suite ID, truncated\
    \ to the\n   length indicated, according to the description given in Section 2,\
    \ is\n   used for generating the hash.  The Designated Expert is responsible\n\
    \   for ensuring that the document referenced for the hash algorithm\n   meets\
    \ the \"specification required\" rule.\n"
- title: 9.5.  Creation of Named Information Parameter Registry
  contents:
  - "9.5.  Creation of Named Information Parameter Registry\n   IANA has created a\
    \ new registry entitled \"Named Information URI\n   Parameter Definitions\".\n\
    \   The policy for future assignments to the registry is Expert Review,\n   and\
    \ as for the ni Hash Algorithm Registry above, the Designated\n   Expert is responsible\
    \ for ensuring that the document referenced for\n   the parameter definition meets\
    \ the \"specification required\" rule.\n   The fields in this registry are the\
    \ parameter name, a description,\n   and a reference.  The parameter name MUST\
    \ be such that it is suitable\n   for use as a query string parameter name in\
    \ an ni URI.  (See\n   Section 3.)\n   The initial contents of the registry are:\n\
    \   Parameter    Meaning                                       Reference\n   -----------\
    \  --------------------------------------------  ---------\n   ct           Content\
    \ Type                                  [RFC6920]\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   No secret information is required to generate\
    \ or verify a name of the\n   form described here.  Therefore, a name like this\
    \ can only provide\n   evidence for the integrity of the referenced object, and\
    \ the proof of\n   integrity provided is only as good as the proof of integrity\
    \ for the\n   name from which we started.  In other words, the hash value can\n\
    \   provide a name-data integrity binding between the name and the bytes\n   returned\
    \ when the name is dereferenced using some protocol.\n   Disclosure of a name\
    \ value does not necessarily entail disclosure of\n   the referenced object but\
    \ may enable an attacker to determine the\n   contents of the referenced object\
    \ by reference to a search engine or\n   other data repository or, for a highly\
    \ formatted object with little\n   variation, by simply guessing the value and\
    \ checking if the digest\n   value matches.  So, the fact that these names contain\
    \ hashes does not\n   protect the confidentiality of the object that was input\
    \ to the hash.\n   The integrity of the referenced content would be compromised\
    \ if a\n   weak hash function were used.  SHA-256 is currently our preferred\n\
    \   hash algorithm; this is why we've added only SHA-256-based suites to\n   the\
    \ initial IANA registry.\n   If a truncated hash value is used, certain security\
    \ properties will\n   be affected.  In general, a hash algorithm is designed to\
    \ produce\n   sufficient bits to prevent a 'birthday attack' collision occurring.\n\
    \   Ensuring that the difficulty of discovering two pieces of content\n   that\
    \ result in the same digest with a work factor O(2^x) by brute\n   force requires\
    \ a digest length of 2x.  Many security applications\n   only require protection\
    \ against a second pre-image attack, which only\n   requires a digest length of\
    \ x to achieve the same work factor.\n   Basically, the shorter the hash value\
    \ used, the less security benefit\n   you can possibly get.\n   An important thing\
    \ to keep in mind is not to make the mistake of\n   thinking two names are the\
    \ same when they aren't.  For example, a\n   name with a 32-bit truncated sha-256\
    \ hash is not the same as a name\n   with the full 256 bits of hash output, even\
    \ if the hash value for one\n   is a prefix of that for the other.\n   The reason\
    \ for this is that if an application treats these as the\n   same name, then that\
    \ might open up a number of attacks.  For example,\n   if I publish an object\
    \ with the full hash, then I probably (in\n   general) don't want some other application\
    \ to treat a name with just\n   the first 32 bits of that as referring to the\
    \ same thing, since the\n   32-bit name will have lots of colliding objects. \
    \ If ni or nih URIs\n   become widely used, there will be many cases where names\
    \ will occur\n   more than once in application protocols, and it'll be unpredictable\n\
    \   which instance of the name would be used for name-data integrity\n   checking,\
    \ thus leading to threats.  For this reason, we require that\n   the algorithm,\
    \ length, and value all match before we consider two\n   names to be the same.\n\
    \   The fact that an ni URI includes a domain name in the authority field\n  \
    \ by itself implies nothing about the relationship between the owner of\n   the\
    \ domain name and any content referenced by that URI.  While a\n   name-data integrity\
    \ service can be provided using ni URIs, that does\n   not in any sense validate\
    \ the authority part of the name.  For\n   example, there is nothing to stop anyone\
    \ from creating an ni URI\n   containing a hash of someone else's content.  Application\
    \ developers\n   MUST NOT assume any relationship between the registrant of the\
    \ domain\n   name that is part of an ni URI and some matching content just because\n\
    \   the ni URI matches that content.\n   If name-data integrity is successfully\
    \ validated, and the hash is\n   strong and long enough, then the \"web origin\"\
    \ [RFC6454] for the bytes\n   of the named object is really going to be the place\
    \ from which you\n   get the ni name and not the place from which you get the\
    \ bytes of the\n   object.  This appears to offer a potential benefit if using\
    \ ni names\n   for scripts included from a HTML page accessed via server-\n  \
    \ authenticated https, for example.  If name-data integrity is not\n   validated\
    \ (and it is optional) or fails, then the web origin is, as\n   usual, the place\
    \ from which the object bytes were received.\n   Applications making use of ni\
    \ names SHOULD take this into account in\n   their trust models.\n   Some implementations\
    \ might mishandle ni URIs that include non-base64\n   characters, whitespace,\
    \ or other non-conforming strings, and that\n   could lead to erroneously considering\
    \ names to be the same when they\n   are not.  An ni URI that is malformed in\
    \ such ways MUST NOT be\n   treated as matching any other ni URI.  Implementers\
    \ need to check the\n   behaviour of libraries for such parsing problems.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   This work has been supported by the EU FP7 project SAIL.\
    \  The authors\n   would like to thank SAIL participants to our naming discussions,\n\
    \   especially Jean-Francois Peltier, for their input.\n   The authors would also\
    \ like to thank Carsten Bormann, Martin Duerst,\n   Tobias Heer, Bjoern Hoehrmann,\
    \ Tero Kivinen, Barry Leiba, Larry\n   Masinter, David McGrew, Alexey Melnikov,\
    \ Bob Moskowitz, Jonathan\n   Rees, Eric Rescorla, Zach Shelby, and Martin Thomas\
    \ for their\n   comments and input to the document.  Thanks, in particular, to\
    \ James\n   Manger for correcting the examples.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [ISOIEC7812]\n              ISO, \"Identification\
    \ cards -- Identification of issuers --\n              Part 1: Numbering system\"\
    , ISO/IEC 7812-1:2006,\n              October 2006, <http://www.iso.org/iso/iso_catalogue/\n\
    \              catalogue_tc/catalogue_detail.htm?csnumber=39698>.\n   [RFC2045]\
    \  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) Part One: Format of Internet Message\n              Bodies\", RFC 2045,\
    \ November 1996.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2616]\
    \  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n              Masinter,\
    \ L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer Protocol\
    \ -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2818]  Rescorla, E., \"HTTP Over\
    \ TLS\", RFC 2818, May 2000.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and\
    \ L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\"\
    , STD 66,\n              RFC 3986, January 2005.\n   [RFC4395]  Hansen, T., Hardie,\
    \ T., and L. Masinter, \"Guidelines and\n              Registration Procedures\
    \ for New URI Schemes\", BCP 35,\n              RFC 4395, February 2006.\n   [RFC4648]\
    \  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\"\
    , RFC 4648, October 2006.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n \
    \             Housley, R., and W. Polk, \"Internet X.509 Public Key\n        \
    \      Infrastructure Certificate and Certificate Revocation List\n          \
    \    (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5785]  Nottingham, M. and E.\
    \ Hammer-Lahav, \"Defining Well-Known\n              Uniform Resource Identifiers\
    \ (URIs)\", RFC 5785,\n              April 2010.\n   [RFC6838]  Freed, N., Klensin,\
    \ J., and T. Hansen, \"Media Type\n              Specifications and Registration\
    \ Procedures\", BCP 13,\n              RFC 6838, January 2013.\n   [SHA-256] \
    \ NIST, \"Secure Hash Standard\", FIPS 180-3, October 2008,\n              <http://csrc.nist.gov/publications/fips/fips180-3/\n\
    \              fips180-3_final.pdf>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [CCN]      Jacobson, V., Smetters, D., Thornton,\
    \ J., Plass, M.,\n              Briggs, N., and R. Braynard, \"Networking Named\
    \ Content\",\n              Proceedings of the 5th international conference on\n\
    \              Emerging networking experiments and technologies (CoNEXT\n    \
    \          '09), December 2009.\n   [DECPARAMS]\n              Hallam-Baker, P.,\
    \ Stradling, R., Farrell, S., Kutscher,\n              D., and B. Ohlman, \"The\
    \ Named Information (ni) URI Scheme:\n              Optional Features\", Work\
    \ in Progress, June 2012.\n   [Luhn]     Wikipedia, \"Luhn mod N algorithm\",\
    \ September 2011,\n              <http://en.wikipedia.org/w/\n              index.php?title=Luhn_mod_N_algorithm&oldid=449928878>.\n\
    \   [Magnet]   Wikipedia, \"Magnet URI scheme\", March 2013,\n              <http://en.wikipedia.org/w/\n\
    \              index.php?title=Magnet_URI_scheme&oldid=546892719>.\n   [NETINF-ARCHITECTURE]\n\
    \              Dannewitz, C., Kutscher, D., Ohlman, B., Farrell, S.,\n       \
    \       Ahlgren, B., and M. Karl, \"Network of Information (NetInf)\n        \
    \      - An information-centric networking architecture\",\n              Computer\
    \ Communications, Volume 36, Issue 7, pages\n              721-735, ISSN 0140-3664,\
    \ 1 April 2013,\n              <http://www.sciencedirect.com/science/article/pii/\n\
    \              S0140366413000364>.\n   [RFC3766]  Orman, H. and P. Hoffman, \"\
    Determining Strengths For\n              Public Keys Used For Exchanging Symmetric\
    \ Keys\", BCP 86,\n              RFC 3766, April 2004.\n   [RFC4773]  Huston,\
    \ G., \"Administration of the IANA Special Purpose\n              IPv6 Address\
    \ Block\", RFC 4773, December 2006.\n   [RFC4843]  Nikander, P., Laganier, J.,\
    \ and F. Dupont, \"An IPv6 Prefix\n              for Overlay Routable Cryptographic\
    \ Hash Identifiers\n              (ORCHID)\", RFC 4843, April 2007.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n\
    \   [RFC5513]  Farrel, A., \"IANA Considerations for Three Letter\n          \
    \    Acronyms\", RFC 5513, April 1 2009.\n   [RFC6149]  Turner, S. and L. Chen,\
    \ \"MD2 to Historic Status\",\n              RFC 6149, March 2011.\n   [RFC6150]\
    \  Turner, S. and L. Chen, \"MD4 to Historic Status\",\n              RFC 6150,\
    \ March 2011.\n   [RFC6151]  Turner, S. and L. Chen, \"Updated Security Considerations\n\
    \              for the MD5 Message-Digest and the HMAC-MD5 Algorithms\",\n   \
    \           RFC 6151, March 2011.\n   [RFC6454]  Barth, A., \"The Web Origin Concept\"\
    , RFC 6454,\n              December 2011.\n   [RFC6698]  Hoffman, P. and J. Schlyter,\
    \ \"The DNS-Based Authentication\n              of Named Entities (DANE) Transport\
    \ Layer Security (TLS)\n              Protocol: TLSA\", RFC 6698, August 2012.\n\
    \   [RFC6797]  Hodges, J., Jackson, C., and A. Barth, \"HTTP Strict\n        \
    \      Transport Security (HSTS)\", RFC 6797, November 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stephen Farrell\n   Trinity College Dublin\n   Dublin,\
    \   2\n   Ireland\n   Phone: +353-1-896-2354\n   EMail: stephen.farrell@cs.tcd.ie\n\
    \   Dirk Kutscher\n   NEC\n   Kurfuersten-Anlage 36\n   Heidelberg\n   Germany\n\
    \   EMail: kutscher@neclab.eu\n   Christian Dannewitz\n   University of Paderborn\n\
    \   Paderborn\n   Germany\n   EMail: cdannewitz@googlemail.com\n   Borje Ohlman\n\
    \   Ericsson\n   Stockholm  S-16480\n   Sweden\n   EMail: Borje.Ohlman@ericsson.com\n\
    \   Ari Keranen\n   Ericsson\n   Jorvas  02420\n   Finland\n   EMail: ari.keranen@ericsson.com\n\
    \   Phillip Hallam-Baker\n   Comodo Group Inc.\n   EMail: philliph@comodo.com\n"
