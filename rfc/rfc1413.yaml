- contents:
  - '                        Identification Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for
    the Internet\n   community, and requests discussion and suggestions for improvements.\n
    \  Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"
    for the standardization state and status of this protocol.\n   Distribution of
    this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "1.  INTRODUCTION\n   The Identification Protocol (a.k.a., \"ident\", a.k.a.,
    \"the Ident\n   Protocol\") provides a means to determine the identity of a user
    of a\n   particular TCP connection.  Given a TCP port number pair, it returns\n
    \  a character string which identifies the owner of that connection on\n   the
    server's system.\n   The Identification Protocol was formerly called the Authentication\n
    \  Server Protocol.  It has been renamed to better reflect its function.\n   This
    document is a product of the TCP Client Identity Protocol\n   Working Group of
    the Internet Engineering Task Force (IETF).\n"
  title: 1.  INTRODUCTION
- contents:
  - "2.  OVERVIEW\n   This is a connection based application on TCP.  A server listens
    for\n   TCP connections on TCP port 113 (decimal).  Once a connection is\n   established,
    the server reads a line of data which specifies the\n   connection of interest.
    \ If it exists, the system dependent user\n   identifier of the connection of
    interest is sent as the reply.  The\n   server may then either shut the connection
    down or it may continue to\n   read/respond to multiple queries.\n   The server
    should close the connection down after a configurable\n   amount of time with
    no queries - a 60-180 second idle timeout is\n   recommended.  The client may
    close the connection down at any time;\n   however to allow for network delays
    the client should wait at least\n   30 seconds (or longer) after a query before
    abandoning the query and\n   closing the connection.\n"
  title: 2.  OVERVIEW
- contents:
  - "3.  RESTRICTIONS\n   Queries are permitted only for fully specified connections.
    \ The\n   query contains the local/foreign port pair -- the local/foreign\n   address
    pair used to fully specify the connection is taken from the\n   local and foreign
    address of query connection.  This means a user on\n   address A may only query
    the server on address B about connections\n   between A and B.\n"
  title: 3.  RESTRICTIONS
- contents:
  - "4.  QUERY/RESPONSE FORMAT\n   The server accepts simple text query requests of
    the form:\n            <port-on-server> , <port-on-client>\n   where <port-on-server>
    is the TCP port (decimal) on the target (where\n   the \"ident\" server is running)
    system, and <port-on-client> is the\n   TCP port (decimal) on the source (client)
    system.\n   N.B - If a client on host A wants to ask a server on host B about
    a\n   connection specified locally (on the client's machine) as 23, 6191\n   (an
    inbound TELNET connection), the client must actually ask about\n   6191, 23 -
    which is how the connection would be specified on host B.\n      For example:\n
    \                6191, 23\n   The response is of the form\n   <port-on-server>
    , <port-on-client> : <resp-type> : <add-info>\n   where <port-on-server>,<port-on-client>
    are the same pair as the\n   query, <resp-type> is a keyword identifying the type
    of response, and\n   <add-info> is context dependent.\n   The information returned
    is that associated with the fully specified\n   TCP connection identified by <server-address>,
    <client-address>,\n   <port-on-server>, <port-on-client>, where <server-address>
    and\n   <client-address> are the local and foreign IP addresses of the\n   querying
    connection -- i.e., the TCP connection to the Identification\n   Protocol Server.
    \ (<port-on-server> and <port-on-client> are taken\n   from the query.)\n      For
    example:\n         6193, 23 : USERID : UNIX : stjohns\n         6195, 23 : ERROR
    : NO-USER\n"
  title: 4.  QUERY/RESPONSE FORMAT
- contents:
  - '5.  RESPONSE TYPES

    '
  - 'A response can be one of two types:

    '
  - "USERID\n     In this case, <add-info> is a string consisting of an\n     operating
    system name (with an optional character set\n     identifier), followed by \":\",
    followed by an\n     identification string.\n     The character set (if present)
    is separated from the\n     operating system name by \",\".  The character set\n
    \    identifier is used to indicate the character set of the\n     identification
    string.  The character set identifier,\n     if omitted, defaults to \"US-ASCII\"
    (see below).\n     Permitted operating system names and character set\n     names
    are specified in RFC 1340, \"Assigned Numbers\" or\n     its successors.\n     In
    addition to those operating system and character set\n     names specified in
    \"Assigned Numbers\" there is one\n     special case operating system identifier
    - \"OTHER\".\n     Unless \"OTHER\" is specified as the operating system\n     type,
    the server is expected to return the \"normal\"\n     user identification of the
    owner of this connection.\n     \"Normal\" in this context may be taken to mean
    a string\n     of characters which uniquely identifies the connection\n     owner
    such as a user identifier assigned by the system\n     administrator and used
    by such user as a mail\n     identifier, or as the \"user\" part of a user/password\n
    \    pair used to gain access to system resources.  When an\n     operating system
    is specified (e.g., anything but\n     \"OTHER\"), the user identifier is expected
    to be in a\n     more or less immediately useful form - e.g., something\n     that
    could be used as an argument to \"finger\" or as a\n     mail address.\n     \"OTHER\"
    indicates the identifier is an unformatted\n     character string consisting of
    printable characters in\n     the specified character set.  \"OTHER\" should be\n
    \    specified if the user identifier does not meet the\n     constraints of the
    previous paragraph.  Sending an\n     encrypted audit token, or returning other
    non-userid\n     information about a user (such as the real name and\n     phone
    number of a user from a UNIX passwd file) are\n     both examples of when \"OTHER\"
    should be used.\n     Returned user identifiers are expected to be printable\n
    \    in the character set indicated.\n     The identifier is an unformatted octet
    string - - all\n     octets are permissible EXCEPT octal 000 (NUL), 012 (LF)\n
    \    and 015 (CR).  N.B. - space characters (040) following the\n     colon separator
    ARE part of the identifier string and\n     may not be ignored. A response string
    is still\n     terminated normally by a CR/LF.  N.B. A string may be\n     printable,
    but is not *necessarily* printable.\n"
  - "ERROR\n   For some reason the port owner could not be determined, <add-info>\n
    \  tells why.  The following are the permitted values of <add-info> and\n   their
    meanings:\n          INVALID-PORT\n          Either the local or foreign port
    was improperly\n          specified.  This should be returned if either or\n          both
    of the port ids were out of range (TCP port\n          numbers are from 1-65535),
    negative integers, reals or\n          in any fashion not recognized as a non-negative\n
    \         integer.\n          NO-USER\n          The connection specified by the
    port pair is not\n          currently in use or currently not owned by an\n          identifiable
    entity.\n          HIDDEN-USER\n          The server was able to identify the
    user of this\n          port, but the information was not returned at the\n          request
    of the user.\n          UNKNOWN-ERROR\n          Can't determine connection owner;
    reason unknown.\n          Any error not covered above should return this\n          error
    code value.  Optionally, this code MAY be\n          returned in lieu of any other
    specific error code\n          if, for example, the server desires to hide\n          information
    implied by the return of that error\n          code, or for any other reason.
    \ If a server\n          implements such a feature, it MUST be configurable\n
    \         and it MUST default to returning the proper error\n          message.\n
    \  Other values may eventually be specified and defined in future\n   revisions
    to this document.  If an implementer has a need to specify\n   a non-standard
    error code, that code must begin with \"X\".\n   In addition, the server is allowed
    to drop the query connection\n   without responding.  Any premature close (i.e.,
    one where the client\n   does not receive the EOL, whether graceful or an abort
    should be\n   considered to have the same meaning as \"ERROR : UNKNOWN-ERROR\".\n"
  - "FORMAL SYNTAX\n   <request> ::= <port-pair> <EOL>\n   <port-pair> ::= <integer>
    \",\" <integer>\n   <reply> ::= <reply-text> <EOL>\n   <EOL> ::= \"015 012\"  ;
    CR-LF End of Line Indicator\n   <reply-text> ::= <error-reply> | <ident-reply>\n
    \  <error-reply> ::= <port-pair> \":\" \"ERROR\" \":\" <error-type>\n   <ident-reply>
    ::= <port-pair> \":\" \"USERID\" \":\" <opsys-field>\n                     \":\"
    <user-id>\n   <error-type> ::= \"INVALID-PORT\" | \"NO-USER\" | \"UNKNOWN-ERROR\"\n
    \                   | \"HIDDEN-USER\" |  <error-token>\n   <opsys-field> ::= <opsys>
    [ \",\" <charset>]\n   <opsys> ::= \"OTHER\" | \"UNIX\" | <token> ...etc.\n               ;
    \ (See \"Assigned Numbers\")\n   <charset> ::= \"US-ASCII\" | ...etc.\n                 ;
    \ (See \"Assigned Numbers\")\n   <user-id> ::= <octet-string>\n   <token> ::=
    1*64<token-characters> ; 1-64 characters\n   <error-token> ::= \"X\"1*63<token-characters>\n
    \                    ; 2-64 chars beginning w/X\n   <integer> ::= 1*5<digit> ;
    1-5 digits.\n   <digit> ::= \"0\" | \"1\" ... \"8\" | \"9\" ; 0-9\n   <token-characters>
    ::=\n                  <Any of these ASCII characters: a-z, A-Z,\n                   -
    (dash), .!@#$%^&*()_=+.,<>/?\"'~`{}[]; >\n                               ; upper
    and lowercase a-z plus\n                               ; printables minus the
    colon \":\"\n                               ; character.\n   <octet-string> ::=
    1*512<octet-characters>\n   <octet-characters> ::=\n                  <any octet
    from  00 to 377 (octal) except for\n                   ASCII NUL (000), CR (015)
    and LF (012)>\n"
  - "Notes on Syntax:\n   1)   To promote interoperability among variant\n        implementations,
    with respect to white space the above\n        syntax is understood to embody
    the \"be conservative in\n        what you send and be liberal in what you accept\"\n
    \       philosophy.  Clients and servers should not generate\n        unnecessary
    white space (space and tab characters) but\n        should accept white space
    anywhere except within a\n        token.  In parsing responses, white space may
    occur\n        anywhere, except within a token.  Specifically, any\n        amount
    of white space is permitted at the beginning or\n        end of a line both for
    queries and responses.  This\n        does not apply for responses that contain
    a user ID\n        because everything after the colon after the operating\n        system
    type until the terminating CR/LF is taken as\n        part of the user ID.  The
    terminating CR/LF is NOT\n        considered part of the user ID.\n   2)   The
    above notwithstanding, servers should restrict the\n        amount of inter-token
    white space they send to the\n        smallest amount reasonable or useful.  Clients
    should\n        feel free to abort a connection if they receive 1000\n        characters
    without receiving an <EOL>.\n   3)   The 512 character limit on user IDs and the
    64\n        character limit on tokens should be understood to mean\n        as
    follows: a) No new token (i.e., OPSYS or ERROR-TYPE)\n        token will be defined
    that has a length greater than 64\n        and b) a server SHOULD NOT send more
    than 512 octets of\n        user ID and a client MUST accept at least 512 octets
    of\n        user ID.  Because of this limitation, a server MUST\n        return
    the most significant portion of the user ID in\n        the first 512 octets.\n
    \  4)   The character sets and character set identifiers should\n        map directly
    to those defined in or referenced by RFC 1340,\n        \"Assigned Numbers\" or
    its successors.  Character set\n        identifiers only apply to the user identification
    field\n        - all other fields will be defined in and must be sent\n        as
    US-ASCII.\n   5)   Although <user-id> is defined as an <octet-string>\n        above,
    it must follow the format and character set\n        constraints implied by the
    <opsys-field>; see the\n        discussion above.\n   6)   The character set provides
    context for the client to\n        print or store the returned user identification
    string.\n        If the client does not recognize or implement the\n        returned
    character set, it should handle the returned\n        identification string as
    OCTET, but should in addition\n        store or report the character set.  An
    OCTET string\n        should be printed, stored or handled in hex notation\n        (0-9a-f)
    in addition to any other representation the\n        client implements - this
    provides a standard\n        representation among differing implementations.\n"
  title: 5.  RESPONSE TYPES
- contents:
  - "6.  Security Considerations\n   The information returned by this protocol is
    at most as trustworthy\n   as the host providing it OR the organization operating
    the host.  For\n   example, a PC in an open lab has few if any controls on it
    to prevent\n   a user from having this protocol return any identifier the user\n
    \  wants.  Likewise, if the host has been compromised the information\n   returned
    may be completely erroneous and misleading.\n   The Identification Protocol is
    not intended as an authorization or\n   access control protocol.  At best, it
    provides some additional\n   auditing information with respect to TCP connections.
    \ At worst, it\n   can provide misleading, incorrect, or maliciously incorrect\n
    \  information.\n   The use of the information returned by this protocol for other
    than\n   auditing is strongly discouraged.  Specifically, using Identification\n
    \  Protocol information to make access control decisions - either as the\n   primary
    method (i.e., no other checks) or as an adjunct to other\n   methods may result
    in a weakening of normal host security.\n   An Identification server may reveal
    information about users,\n   entities, objects or processes which might normally
    be considered\n   private.  An Identification server provides service which is
    a rough\n   analog of the CallerID services provided by some phone companies and\n
    \  many of the same privacy considerations and arguments that apply to\n   the
    CallerID service apply to Identification.  If you wouldn't run a\n   \"finger\"
    server due to privacy considerations you may not want to run\n   this protocol.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  ACKNOWLEDGEMENTS\n   Acknowledgement is given to Dan Bernstein who is primarily\n
    \  responsible for renewing interest in this protocol and for pointing\n   out
    some annoying errors in RFC 931.\n"
  title: 7.  ACKNOWLEDGEMENTS
- contents:
  - "References\n   [1] St. Johns, M., \"Authentication Server\", RFC 931, TPSC, January\n
    \      1985.\n   [2] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2,
    RFC 1340,\n       USC/Information Sciences Institute, July 1992.\n"
  title: References
- contents:
  - "Author's Address\n       Michael C. St. Johns\n       DARPA/CSTO\n       3701
    N. Fairfax Dr\n       Arlington, VA 22203\n       Phone: (703) 696-2271\n       EMail:
    stjohns@DARPA.MIL\n"
  title: Author's Address
