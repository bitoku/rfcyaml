- title: __initial_text__
  contents:
  - '                      Client Subnet in DNS Queries

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an Extension Mechanisms for DNS (EDNS0)\n\
    \   option that is in active use to carry information about the network\n   that\
    \ originated a DNS query and the network for which the subsequent\n   response\
    \ can be cached.  Since it has some known operational and\n   privacy shortcomings,\
    \ a revision will be worked through the IETF for\n   improvement.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7871.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Privacy Note ....................................................5\n  \
    \ 3. Requirements Notation ...........................................5\n   4.\
    \ Terminology .....................................................6\n   5. Overview\
    \ ........................................................7\n   6. Option Format\
    \ ...................................................8\n   7. Protocol Description\
    \ ............................................9\n      7.1. Originating the Option\
    \ .....................................9\n           7.1.1. Recursive Resolvers\
    \ .................................9\n           7.1.2. Stub Resolvers .....................................10\n\
    \           7.1.3. Forwarding Resolvers ...............................11\n  \
    \    7.2. Generating a Response .....................................11\n    \
    \       7.2.1. Authoritative Nameserver ...........................11\n      \
    \     7.2.2. Intermediate Nameserver ............................13\n      7.3.\
    \ Handling ECS Responses and Caching ........................14\n           7.3.1.\
    \ Caching the Response ...............................15\n           7.3.2. Answering\
    \ from Cache ...............................16\n      7.4. Delegations and Negative\
    \ Answers ..........................17\n      7.5. Transitivity ..............................................18\n\
    \   8. IANA Considerations ............................................18\n  \
    \ 9. DNSSEC Considerations ..........................................19\n   10.\
    \ NAT Considerations ............................................19\n   11. Security\
    \ Considerations .......................................20\n      11.1. Privacy\
    \ ..................................................20\n      11.2. Birthday Attacks\
    \ .........................................21\n      11.3. Cache Pollution ..........................................22\n\
    \   12. Sending the Option ............................................23\n  \
    \    12.1. Probing ..................................................23\n    \
    \  12.2. Whitelist ................................................24\n   13.\
    \ Example .......................................................24\n   14. References\
    \ ....................................................26\n      14.1. Normative\
    \ References .....................................26\n      14.2. Informative\
    \ References ...................................27\n   Acknowledgements ..................................................28\n\
    \   Contributors ......................................................29\n  \
    \ Authors' Addresses ................................................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Many Authoritative Nameservers today return different responses\
    \ based\n   on the perceived topological location of the user.  These servers\
    \ use\n   the IP address of the incoming query to identify that location.\n  \
    \ Since most queries come from Intermediate Recursive Resolvers, the\n   source\
    \ address is that of the Recursive Resolver rather than of the\n   query originator.\n\
    \   Traditionally, and probably still in the majority of instances,\n   Recursive\
    \ Resolvers are reasonably close in the topological sense to\n   the Stub Resolvers\
    \ or Forwarding Resolvers that are the source of\n   queries.  For these resolvers,\
    \ using their own IP address is\n   sufficient for Authoritative Nameservers that\
    \ tailor responses based\n   upon location of the querier.\n   Increasingly, though,\
    \ a class of Recursive Resolvers has arisen that\n   handles query sources that\
    \ are often not topologically close.  The\n   motivation for having such Centralized\
    \ Resolvers varies but is\n   usually because of some enhanced experience, such\
    \ as greater cache\n   security or applying policies regarding where users may\
    \ connect.\n   (Although political censorship usually comes to mind here, the\
    \ same\n   actions may be used by a parent when setting controls on where a\n\
    \   minor may connect.)  Similarly, many ISPs and other organizations use\n  \
    \ a Centralized Resolver infrastructure that can be distant from the\n   clients\
    \ the resolvers serve.  These cases all lead to less than\n   desirable responses\
    \ from topology-sensitive Authoritative\n   Nameservers.\n   This document defines\
    \ an EDNS0 [RFC6891] option to convey network\n   information that is relevant\
    \ to the DNS message.  It will carry\n   sufficient network information about\
    \ the originator for the\n   Authoritative Nameserver to tailor responses.  It\
    \ will also provide\n   for the Authoritative Nameserver to indicate the scope\
    \ of network\n   addresses for which the tailored answer is intended.  This EDNS0\n\
    \   option is intended for those Recursive Resolvers and Authoritative\n   Nameservers\
    \ that would benefit from the extension and not for general\n   purpose deployment.\
    \  This is completely optional and can safely be\n   ignored by servers that choose\
    \ not to implement or enable it.\n   This document also includes guidelines on\
    \ how best to cache those\n   results, and it provides recommendations on when\
    \ this protocol\n   extension should be used.\n   At least a dozen different client\
    \ and server implementations have\n   been written based on earlier draft versions\
    \ of this specification.\n   The protocol is in active production use today. \
    \ While the\n   implementations interoperate, there is varying behavior around\
    \ edge\n   cases that were poorly specified.  Known incompatibilities are\n  \
    \ described in this document, and the authors believe that it is better\n   to\
    \ describe the system as it is working today, even if not everyone\n   agrees\
    \ with the details of the original specification\n   ([VANDERGAAST]).  The alternative\
    \ is an undocumented and proprietary\n   system.\n   A revised proposal to improve\
    \ upon the minor flaws in this protocol\n   will be forthcoming to the IETF.\n"
- title: 2.  Privacy Note
  contents:
  - "2.  Privacy Note\n   If we were just beginning to design this mechanism, and\
    \ not\n   documenting existing protocol, it is unlikely that we would have done\n\
    \   things exactly this way.\n   The IETF is actively working on enhancing DNS\
    \ privacy\n   [DPRIVE_Working_Group] and the reinjection of metadata [METADATA]\
    \ has\n   been identified as a problematic design pattern.\n   As noted above\
    \ however, this document primarily describes existing\n   behavior of a deployed\
    \ method to further the understanding of the\n   Internet community.\n   We recommend\
    \ that the feature be turned off by default in all\n   nameserver software, and\
    \ that operators only enable it explicitly in\n   those circumstances where it\
    \ provides a clear benefit for their\n   clients.  We also encourage the deployment\
    \ of means to allow users to\n   make use of the opt-out provided.  Finally, we\
    \ recommend that others\n   avoid techniques that may introduce additional metadata\
    \ in future\n   work, as it may damage user trust.\n   Regrettably, support for\
    \ the opt-out provisions of this specification\n   are currently limited.  Only\
    \ one stub resolver, getdns, is known to\n   be able to originate queries with\
    \ anonymity requested, and as yet no\n   applications are known to be able to\
    \ indicate that user preference to\n   the stub resolver.\n"
- title: 3.  Requirements Notation
  contents:
  - "3.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 4.  Terminology
  contents:
  - "4.  Terminology\n   ECS:  EDNS Client Subnet.\n   Client:  A Stub Resolver, Forwarding\
    \ Resolver, or Recursive Resolver.\n      A client to a Recursive Resolver or\
    \ a Forwarding Resolver.\n   Server:  A Forwarding Resolver, Recursive Resolver,\
    \ or Authoritative\n      Nameserver.\n   Stub Resolver:  A simple DNS protocol\
    \ implementation on the client\n      side as described in [RFC1034], Section\
    \ 5.3.1.  A client to a\n      Recursive Resolver or a Forwarding Resolver.\n\
    \   Authoritative Nameserver:  A nameserver that has authority over one\n    \
    \  or more DNS zones.  These are normally not contacted by Stub\n      Resolver\
    \ or end user clients directly but by Recursive Resolvers.\n      Described in\
    \ [RFC1035], Section 6.\n   Recursive Resolver:  A nameserver that is responsible\
    \ for resolving\n      domain names for clients by following the domain's delegation\n\
    \      chain.  Recursive Resolvers frequently use caches to be able to\n     \
    \ respond to client queries quickly.  Described in [RFC1035],\n      Section 7.\n\
    \   Forwarding Resolver:  A nameserver that does not do iterative\n      resolution\
    \ itself, but instead passes that responsibility to\n      another Recursive Resolver,\
    \ called a \"Forwarder\" in [RFC2308],\n      Section 1.\n   Intermediate Nameserver:\
    \  Any nameserver in between the Stub Resolver\n      and the Authoritative Nameserver,\
    \ such as a Recursive Resolver or\n      a Forwarding Resolver.\n   Centralized\
    \ Resolvers:  Intermediate Nameservers that serve a\n      topologically diverse\
    \ network address space.\n   Tailored Response:  A response from a nameserver\
    \ that is customized\n      for the node that sent the query, often based on performance\n\
    \      (i.e., lowest latency, least number of hops, topological distance,\n  \
    \    etc.).\n   Topologically Close:  Refers to two hosts being close in terms\
    \ of the\n      number of hops or the time it takes for a packet to travel from\n\
    \      one host to the other.  The concept of topological distance is\n      only\
    \ loosely related to the concept of geographical distance: two\n      geographically\
    \ close hosts can still be very distant from a\n      topological perspective,\
    \ and two geographically distant hosts can\n      be quite close on the network.\n\
    \   For a more comprehensive treatment of DNS terms, please see\n   [RFC7719].\n"
- title: 5.  Overview
  contents:
  - "5.  Overview\n   The general idea of this document is to provide an EDNS0 option\
    \ to\n   allow Recursive Resolvers, if they are willing, to forward details\n\
    \   about the origin network from which a query is coming when talking to\n  \
    \ other nameservers.\n   The format of the edns-client-subnet (ECS) EDNS0 option\
    \ is described\n   in Section 6 and is meant to be added in queries sent by Intermediate\n\
    \   Nameservers in a way that is transparent to Stub Resolvers and end\n   users,\
    \ as described in Section 7.1.  ECS is only defined for the\n   Internet (IN)\
    \ DNS class.\n   As described in Section 7.2, an Authoritative Nameserver could\
    \ use\n   ECS as a hint to the end user's network location and provide a better\n\
    \   answer.  Its response would also contain an ECS option, clearly\n   indicating\
    \ that the server made use of this information, and that the\n   answer is tied\
    \ to the client's network.\n   As described in Section 7.3, Intermediate Nameservers\
    \ would use this\n   information to cache the response.\n   Some Intermediate\
    \ Nameservers may also have to be able to forward ECS\n   queries they receive,\
    \ as described in Section 7.5.\n   The mechanisms provided by ECS raise various\
    \ security-related\n   concerns related to cache growth, the ability to spoof\
    \ EDNS0 options,\n   and privacy.  Section 11 explores various mitigation techniques.\n\
    \   The expectation, however, is that this option will primarily be used\n   between\
    \ Recursive Resolvers and Authoritative Nameservers that are\n   sensitive to\
    \ network location issues.  Most Recursive Resolvers,\n   Authoritative Nameservers,\
    \ and Stub Resolvers will never need to know\n   about this option and will continue\
    \ working as they had been.\n   Failure to support this option or its improper\
    \ handling will, at\n   worst, cause suboptimal identification of client network\
    \ location,\n   which is a common occurrence in current Content Delivery Network\n\
    \   (CDN) setups.\n   Section 7.1 also provides a mechanism for Stub Resolvers\
    \ to signal\n   Recursive Resolvers that they do not want ECS treatment for specific\n\
    \   queries.\n   Additionally, operators of Intermediate Nameservers with ECS\
    \ enabled\n   are allowed to choose how many bits of the address of received\n\
    \   queries to forward or to reduce the number of bits forwarded for\n   queries\
    \ already including an ECS option.\n"
- title: 6.  Option Format
  contents:
  - "6.  Option Format\n   This protocol uses an EDNS0 [RFC6891] option to include\
    \ client\n   address information in DNS messages.  The option is structured as\n\
    \   follows:\n                +0 (MSB)                            +1 (LSB)\n \
    \     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n   0:\
    \ |                          OPTION-CODE                          |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   2: |                         OPTION-LENGTH                         |\n   \
    \   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n   4: |\
    \                            FAMILY                             |\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   6: |     SOURCE PREFIX-LENGTH      |     SCOPE PREFIX-LENGTH       |\n   \
    \   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n   8: |\
    \                           ADDRESS...                          /\n      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   o  (Defined in [RFC6891]) OPTION-CODE, 2 octets, for ECS is 8 (0x00\n    \
    \  0x08).\n   o  (Defined in [RFC6891]) OPTION-LENGTH, 2 octets, contains the\n\
    \      length of the payload (everything after OPTION-LENGTH) in octets.\n   o\
    \  FAMILY, 2 octets, indicates the family of the address contained in\n      the\
    \ option, using address family codes as assigned by IANA in\n      Address Family\
    \ Numbers [Address_Family_Numbers].\n   The format of the address part depends\
    \ on the value of FAMILY.  This\n   document only defines the format for FAMILY\
    \ 1 (IPv4) and FAMILY 2\n   (IPv6), which are as follows:\n   o  SOURCE PREFIX-LENGTH,\
    \ an unsigned octet representing the leftmost\n      number of significant bits\
    \ of ADDRESS to be used for the lookup.\n      In responses, it mirrors the same\
    \ value as in the queries.\n   o  SCOPE PREFIX-LENGTH, an unsigned octet representing\
    \ the leftmost\n      number of significant bits of ADDRESS that the response\
    \ covers.\n      In queries, it MUST be set to 0.\n   o  ADDRESS, variable number\
    \ of octets, contains either an IPv4 or\n      IPv6 address, depending on FAMILY,\
    \ which MUST be truncated to the\n      number of bits indicated by the SOURCE\
    \ PREFIX-LENGTH field,\n      padding with 0 bits to pad to the end of the last\
    \ octet needed.\n   o  A server receiving an ECS option that uses either too few\
    \ or too\n      many ADDRESS octets, or that has non-zero ADDRESS bits set beyond\n\
    \      SOURCE PREFIX-LENGTH, SHOULD return FORMERR to reject the packet,\n   \
    \   as a signal to the software developer making the request to fix\n      their\
    \ implementation.\n   All fields are in network byte order (\"big-endian\", per\
    \ [RFC1700],\n   Data Notation).\n"
- title: 7.  Protocol Description
  contents:
  - '7.  Protocol Description

    '
- title: 7.1.  Originating the Option
  contents:
  - "7.1.  Originating the Option\n   The ECS option should generally be added by\
    \ Recursive Resolvers when\n   querying Authoritative Nameservers, as described\
    \ in Section 12.  The\n   option can also be initialized by a Stub Resolver or\
    \ Forwarding\n   Resolver.\n"
- title: 7.1.1.  Recursive Resolvers
  contents:
  - "7.1.1.  Recursive Resolvers\n   The setup of the ECS option in a Recursive Resolver\
    \ depends on the\n   client query that triggered the resolution process.\n   In\
    \ the usual case, where no ECS option was present in the client\n   query, the\
    \ Recursive Resolver initializes the option by setting\n   FAMILY of the client's\
    \ address.  It then uses the value of its\n   maximum cacheable prefix length\
    \ to set SOURCE PREFIX-LENGTH.  For\n   privacy reasons, and because the whole\
    \ IP address is rarely required\n   to determine a tailored response, this length\
    \ SHOULD be shorter than\n   the full address, as described in Section 11.\n \
    \  If the triggering query included an ECS option itself, it MUST be\n   examined\
    \ for its SOURCE PREFIX-LENGTH.  The Recursive Resolver's\n   outgoing query MUST\
    \ then set SOURCE PREFIX-LENGTH to the shorter of\n   the incoming query's SOURCE\
    \ PREFIX-LENGTH or the server's maximum\n   cacheable prefix length.\n   Finally,\
    \ in both cases, SCOPE PREFIX-LENGTH is set to 0 and ADDRESS\n   is then added\
    \ up to SOURCE PREFIX-LENGTH number of bits, with\n   trailing 0 bits added, if\
    \ needed, to fill the final octet.  The total\n   number of octets used MUST only\
    \ be enough to cover SOURCE PREFIX-\n   LENGTH bits, rather than the full width\
    \ that would normally be used\n   by addresses in FAMILY.\n   FAMILY and ADDRESS\
    \ information MAY be used from the ECS option in the\n   incoming query.  Passing\
    \ the existing address data is supportive of\n   the Recursive Resolver being\
    \ used as the target of a Forwarding\n   Resolver, but could possibly run into\
    \ policy problems with regard to\n   usage agreements between the Recursive Resolver\
    \ and Authoritative\n   Nameserver.  See Section 12.2 for more discussion on this\
    \ point.  If\n   the Recursive Resolver will not forward FAMILY and ADDRESS data\
    \ from\n   the incoming ECS option, it SHOULD return a REFUSED response.\n   Subsequent\
    \ queries to refresh the data MUST, if unrestricted by an\n   incoming SOURCE\
    \ PREFIX-LENGTH, specify the longest SOURCE PREFIX-\n   LENGTH that the Recursive\
    \ Resolver is willing to cache, even if a\n   previous response indicated that\
    \ a shorter prefix length was\n   sufficient.\n"
- title: 7.1.2.  Stub Resolvers
  contents:
  - "7.1.2.  Stub Resolvers\n   A Stub Resolver MAY generate DNS queries with an ECS\
    \ option that sets\n   SOURCE PREFIX-LENGTH to limit how network information should\
    \ be\n   revealed.  An Intermediate Nameserver that receives such a query MUST\n\
    \   NOT make queries that include more bits of client address than in the\n  \
    \ originating query.\n   A SOURCE PREFIX-LENGTH value of 0 means that the Recursive\
    \ Resolver\n   MUST NOT add the client's address information to its queries. \
    \ The\n   subsequent Recursive Resolver query to the Authoritative Nameserver\n\
    \   will then either not include an ECS option or MAY optionally include\n   its\
    \ own address information, which is what the Authoritative\n   Nameserver will\
    \ almost certainly use to generate any Tailored\n   Response in lieu of an option.\
    \  This allows the answer to be handled\n   by the same caching mechanism as other\
    \ queries, with an explicit\n   indicator of the applicable scope.  Subsequent\
    \ Stub Resolver queries\n   for /0 can then be answered from this cached response.\n\
    \   A Stub Resolver MUST set SCOPE PREFIX-LENGTH to 0.  It MAY include\n   FAMILY\
    \ and ADDRESS data, but should be prepared to handle a REFUSED\n   response if\
    \ the Intermediate Nameserver that it queries has a policy\n   that denies forwarding\
    \ of ADDRESS.  If there is no ADDRESS set, i.e.,\n   SOURCE PREFIX-LENGTH is set\
    \ to 0, then FAMILY SHOULD be set to the\n   transport over which the query is\
    \ sent.  This is for\n   interoperability; at least one major authoritative server\
    \ will ignore\n   the option if FAMILY is not 1 or 2, even though it is irrelevant\
    \ if\n   there are no ADDRESS bits.\n"
- title: 7.1.3.  Forwarding Resolvers
  contents:
  - "7.1.3.  Forwarding Resolvers\n   Forwarding Resolvers essentially appear to be\
    \ Stub Resolvers to\n   whatever Recursive Resolver is ultimately handling the\
    \ query, but\n   they look like a Recursive Resolver to their client.  A Forwarding\n\
    \   Resolver using this option MUST prepare it as described in\n   Section 7.1.1,\
    \ \"Recursive Resolvers\".  In particular, a Forwarding\n   Resolver that implements\
    \ this protocol MUST honor SOURCE PREFIX-\n   LENGTH restrictions indicated in\
    \ the incoming query from its client.\n   See also Section 7.5.\n   Since the\
    \ Recursive Resolver it contacts will treat the Forwarding\n   Resolver like a\
    \ Stub Resolver, the Recursive Resolver's policies\n   regarding incoming ADDRESS\
    \ information will apply in the same way.\n   If the Forwarding Resolver receives\
    \ a REFUSED response when it sends\n   a query that includes a non-zero ADDRESS,\
    \ it MUST retry with no\n   ADDRESS.\n"
- title: 7.2.  Generating a Response
  contents:
  - '7.2.  Generating a Response

    '
- title: 7.2.1.  Authoritative Nameserver
  contents:
  - "7.2.1.  Authoritative Nameserver\n   When a query containing an ECS option is\
    \ received, an Authoritative\n   Nameserver supporting ECS MAY use the address\
    \ information specified\n   in the option to generate a tailored response.\n \
    \  Authoritative Nameservers that have not implemented or enabled\n   support\
    \ for the ECS option ought to safely ignore it within incoming\n   queries, per\
    \ [RFC6891], Section 6.1.2.  Such a server MUST NOT\n   include an ECS option\
    \ within replies to indicate lack of support for\n   it.  Implementers of Intermediate\
    \ Nameservers should be aware,\n   however, that some nameservers incorrectly\
    \ echo back unknown EDNS0\n   options.  In this protocol, that should be mostly\
    \ harmless, as the\n   SCOPE PREFIX-LENGTH should come back as 0, thus marking\
    \ the response\n   as covering all networks.\n   A query with a wrongly formatted\
    \ option (e.g., an unknown FAMILY)\n   MUST be rejected and a FORMERR response\
    \ MUST be returned to the\n   sender, as described in [RFC6891], \"Transport Considerations\"\
    .\n   An Authoritative Nameserver that implements this protocol and\n   receives\
    \ an ECS option MUST include an ECS option in its response to\n   indicate that\
    \ it SHOULD be cached accordingly, regardless of whether\n   the client information\
    \ was needed to formulate an answer.  (Note that\n   the requirement in [RFC6891]\
    \ to reserve space for the OPT record\n   could mean that the Answer section of\
    \ the response will be truncated\n   and fall back to TCP indicated accordingly.)\
    \  If an ECS option was\n   not included in a query, one MUST NOT be included\
    \ in the response\n   even if the server is providing a Tailored Response -- presumably\n\
    \   based on the address from which it received the query.\n   FAMILY, SOURCE\
    \ PREFIX-LENGTH, and ADDRESS in the response MUST match\n   those in the query.\
    \  Echoing back these values helps to mitigate\n   certain attack vectors, as\
    \ described in Section 11.\n   SCOPE PREFIX-LENGTH in the response indicates the\
    \ network for which\n   the answer is intended.\n   A SCOPE PREFIX-LENGTH value\
    \ longer than SOURCE PREFIX-LENGTH\n   indicates that the provided prefix length\
    \ was not specific enough to\n   select the most appropriate Tailored Response.\
    \  Future queries for\n   the name within the specified network SHOULD use the\
    \ longer SCOPE\n   PREFIX-LENGTH.  Factors affecting whether the Recursive Resolver\n\
    \   would use the longer length include the amount of privacy masking the\n  \
    \ operator wants to provide their users, and the additional resource\n   implications\
    \ for the cache.\n   Conversely, a shorter SCOPE PREFIX-LENGTH indicates that\
    \ more bits\n   than necessary were provided, and the answer is suitable for a\n\
    \   broader range of addresses.  This could be as short as 0, to indicate\n  \
    \ that the answer is suitable for all addresses in FAMILY.\n   As the logical\
    \ topology of any part of the network with regard to the\n   tailored response\
    \ can vary, an Authoritative Nameserver may return\n   different values of SCOPE\
    \ PREFIX-LENGTH for different networks.\n   Since some queries can result in multiple\
    \ RRsets being added to the\n   response, there is an unfortunate ambiguity from\
    \ the original\n   specification as to how SCOPE PREFIX-LENGTH would apply to\
    \ each\n   individual RRset.  For example, multiple types in response to an ANY\n\
    \   metaquery could all have different applicable SCOPE PREFIX-LENGTH\n   values,\
    \ but this protocol only has the ability to signal one.  The\n   response SHOULD\
    \ therefore, include the longest relevant PREFIX-LENGTH\n   of any RRset in the\
    \ answer, which could have the unfortunate side\n   effect of redundantly caching\
    \ some data that could be cached more\n   broadly.  For the specific case of a\
    \ Canonical Name (CNAME) chain,\n   the Authoritative Nameserver SHOULD only place\
    \ the initial CNAME\n   record in the Answer section, to have it cached unambiguously\
    \ and\n   appropriately.  Most modern Recursive Resolvers restart the query\n\
    \   with the CNAME, so the remainder of the chain is typically ignored\n   anyway.\
    \  For message-focused resolvers, rather than RRset-focused\n   ones, this will\
    \ mean caching the entire CNAME chain at the longest\n   PREFIX-LENGTH of any\
    \ RRset in the chain.\n   The specific logic that an Authoritative Nameserver\
    \ uses to choose a\n   tailored response is not in the scope of this document.\
    \  Implementers\n   are encouraged, however, to carefully consider their selection\
    \ of\n   SCOPE PREFIX-LENGTH for the response in the event that the best\n   tailored\
    \ response cannot be determined, and what the implications\n   would be over the\
    \ life of the TTL.\n   Authoritative Nameservers might have situations where one\
    \ Tailored\n   Response is appropriate for a relatively broad address range, such\
    \ as\n   an IPv4 /20, except for some exceptions, such as a few /24 ranges\n \
    \  within that /20.  Because it can't be guaranteed that queries for all\n   longer\
    \ prefix lengths would arrive before one that would be answered\n   by the shorter\
    \ prefix length, an Authoritative Nameserver MUST NOT\n   overlap prefixes.\n\
    \   When the Authoritative Nameserver has a longer prefix length Tailored\n  \
    \ Response within a shorter prefix length Tailored Response, then\n   implementations\
    \ can either:\n   1.  Deaggregate the shorter prefix response into multiple longer\n\
    \       prefix responses, or\n   2.  Alert the operator that the order of queries\
    \ will determine which\n       answers get cached, and either warn and continue\
    \ or treat this as\n       an error and refuse to load the configuration.\n  \
    \ This choice should be documented for the operator, for example, in\n   the user\
    \ manual.\n   When deaggregating to correct the overlap, prefix lengths should\
    \ be\n   optimized to use the minimum necessary to cover the address space, in\n\
    \   order to reduce the overhead that results from having multiple copies\n  \
    \ of the same answer.  As a trivial example, if the Tailored Response\n   for\
    \ 1.2.0/20 is A but there is one exception of 1.2.3/24 for B, then\n   the Authoritative\
    \ Nameserver would need to provide Tailored Responses\n   for 1.2.0/23, 1.2.2/24,\
    \ 1.2.4/22, and 1.2.8/21 all pointing to A, and\n   1.2.3/24 to B.\n"
- title: 7.2.2.  Intermediate Nameserver
  contents:
  - "7.2.2.  Intermediate Nameserver\n   When an Intermediate Nameserver uses ECS,\
    \ whether it passes an ECS\n   option in its own response to its client is predicated\
    \ on whether the\n   client originally included the option.  Because a client\
    \ that did not\n   use an ECS option might not be able to understand it, the server\
    \ MUST\n   NOT provide one in its response.  If the client query did include the\n\
    \   option, the server MUST include one in its response, especially as it\n  \
    \ could be talking to a Forwarding Resolver, which would need the\n   information\
    \ for its own caching.\n   If an Intermediate Nameserver receives a response that\
    \ has a longer\n   SCOPE PREFIX-LENGTH than SOURCE PREFIX-LENGTH that it provided\
    \ in its\n   query, it SHOULD still provide the result as the answer to the\n\
    \   triggering client request even if the client is in a different\n   address\
    \ range.  The Intermediate Nameserver MAY instead opt to retry\n   with a longer\
    \ SOURCE PREFIX-LENGTH to get a better reply before\n   responding to its client,\
    \ as long as it does not exceed a SOURCE\n   PREFIX-LENGTH specified in the query\
    \ that triggered resolution, but\n   this obviously has implications for the latency\
    \ of the overall\n   lookup.\n   The logic for using the cache to determine whether\
    \ the Intermediate\n   Nameserver already knows the response to provide to its\
    \ client is\n   covered in the next section.\n"
- title: 7.3.  Handling ECS Responses and Caching
  contents:
  - "7.3.  Handling ECS Responses and Caching\n   When an Intermediate Nameserver\
    \ receives a response containing an ECS\n   option and without the TC bit set,\
    \ it SHOULD cache the result based\n   on the data in the option.  If the TC bit\
    \ was set, the Intermediate\n   Resolver SHOULD retry the query over TCP to get\
    \ the complete Answer\n   section for caching.\n   If FAMILY, SOURCE PREFIX-LENGTH,\
    \ and SOURCE PREFIX-LENGTH bits of\n   ADDRESS in the response don't match the\
    \ non-zero fields in the\n   corresponding query, the full response MUST be dropped,\
    \ as described\n   in Section 11.  In a response to a query that specified only\
    \ SOURCE\n   PREFIX-LENGTH for privacy masking, the FAMILY and ADDRESS fields\
    \ MUST\n   contain the appropriate non-zero information that the Authoritative\n\
    \   Nameserver used to generate the answer, so that it can be cached\n   accordingly.\n\
    \   If no ECS option is contained in the response, the Intermediate\n   Nameserver\
    \ SHOULD treat this as being equivalent to having received a\n   SCOPE PREFIX-LENGTH\
    \ of 0, which is an answer suitable for all client\n   addresses.  See further\
    \ discussion on the security implications of\n   this in Section 11.\n   If a\
    \ REFUSED response is received from an Authoritative Nameserver,\n   an ECS-aware\
    \ resolver MUST retry the query without ECS to distinguish\n   the response from\
    \ one where the Authoritative Nameserver is not\n   responsible for the name,\
    \ which is a common convention for the\n   REFUSED status.  Similarly, a client\
    \ of a Recursive Resolver SHOULD\n   retry after receiving a REFUSED response\
    \ because it is not\n   sufficiently clear whether the REFUSED response was because\
    \ of the\n   ECS option or some other reason.\n"
- title: 7.3.1.  Caching the Response
  contents:
  - "7.3.1.  Caching the Response\n   In the cache, all resource records in the Answer\
    \ section MUST be tied\n   to the network specified in the response.  The appropriate\
    \ prefix\n   length depends on the relationship between SOURCE PREFIX-LENGTH,\n\
    \   SCOPE PREFIX-LENGTH, and the maximum cacheable prefix length\n   configured\
    \ for the cache.\n   If SCOPE PREFIX-LENGTH is not longer than SOURCE PREFIX-LENGTH,\
    \ store\n   SCOPE PREFIX-LENGTH bits of ADDRESS, and then mark the response as\n\
    \   valid for all addresses that fall within that range.\n   Similarly, if SOURCE\
    \ PREFIX-LENGTH is the maximum configured for the\n   cache, store SOURCE PREFIX-LENGTH\
    \ bits of ADDRESS, and then mark the\n   response as valid for all addresses that\
    \ fall within that range.\n   If SOURCE PREFIX-LENGTH is shorter than the configured\
    \ maximum and\n   SCOPE PREFIX-LENGTH is longer than SOURCE PREFIX-LENGTH, store\
    \ SOURCE\n   PREFIX-LENGTH bits of ADDRESS, and then mark the response as valid\n\
    \   only to answer client queries that specify exactly the same SOURCE\n   PREFIX-LENGTH\
    \ in their own ECS option.\n   The handling of DNSSEC-related records in the Answer\
    \ section was\n   unspecified in the original draft version of this document and\
    \ is\n   inconsistently handled in existing implementations.  A Resource\n   Record\
    \ Signature (RRSIG) must obviously be tied to the RRset that it\n   signs, but\
    \ it is RECOMMENDED that all other DNSSEC records be scoped\n   at /0.  See Section\
    \ 9 for more information.\n   Note that the Additional and Authority sections\
    \ from a DNS response\n   message are specifically excluded here.  Any records\
    \ from these\n   sections MUST NOT be tied to a network.  See Section 7.4 for\
    \ more\n   information.\n   Records that are cached as /0 because of a query's\
    \ SOURCE PREFIX-\n   LENGTH of 0 MUST be distinguished from those that are cached\
    \ as /0\n   because of a response's SCOPE PREFIX-LENGTH of 0.  The former should\n\
    \   only be used for other /0 queries that the Intermediate Resolver\n   receives,\
    \ but the latter is suitable as a response for all networks.\n   Although omitting\
    \ network-specific caching will significantly\n   simplify an implementation,\
    \ the resulting drop in cache hits is very\n   likely to defeat most latency benefits\
    \ provided by ECS.  Therefore,\n   implementing full caching support as described\
    \ in this section is\n   strongly RECOMMENDED.\n   Enabling support for ECS in\
    \ an Intermediate Nameserver will\n   significantly increase the size of the cache,\
    \ reduce the number of\n   results that can be served from cache, and increase\
    \ the load on the\n   server.  Implementing the mitigation techniques described\
    \ in\n   Section 11 is strongly recommended.  For cache size issues,\n   implementers\
    \ should consider data storage formats that allow the same\n   answer data to\
    \ be shared among multiple prefixes.\n"
- title: 7.3.2.  Answering from Cache
  contents:
  - "7.3.2.  Answering from Cache\n   Cache lookups are first done as usual for a\
    \ DNS query, using the\n   query tuple of <name, type, class>.  Then, the appropriate\
    \ RRset MUST\n   be chosen based on the longest prefix matching.  The client address\n\
    \   to use for comparison will depend on whether the Intermediate\n   Nameserver\
    \ received an ECS option in its client query.\n   o  If no ECS option was provided,\
    \ the client's address is used.\n   o  If there was an ECS option specifying SOURCE\
    \ PREFIX-LENGTH and\n      ADDRESS covering the client's address, the client address\
    \ is used\n      but SOURCE PREFIX-LENGTH is initially ignored.  If no covering\n\
    \      entry is found and SOURCE PREFIX-LENGTH is shorter than the\n      configured\
    \ maximum length allowed for the cache, repeat the cache\n      lookup for an\
    \ entry that exactly matches SOURCE PREFIX-LENGTH.\n      These special entries,\
    \ which do not cover longer prefix lengths,\n      occur as described in the previous\
    \ section.\n   o  If there was an ECS option with an ADDRESS, the ADDRESS from\
    \ it\n      MAY be used if the local policy allows.  The policy can vary\n   \
    \   depending on the agreements the operator of the Intermediate\n      Nameserver\
    \ has with Authoritative Nameserver operators; see\n      Section 12.2.  If the\
    \ policy does not allow it, a REFUSED response\n      SHOULD be sent.  See Section\
    \ 7.5 for more information.\n   If a matching network is found and the relevant\
    \ data is unexpired,\n   the response is generated as per Section 7.2.\n   If\
    \ no matching network is found, the Intermediate Nameserver MUST\n   perform resolution\
    \ as usual.  This is necessary to avoid Tailored\n   Responses in the cache from\
    \ being returned to the wrong clients, and\n   to avoid a single query coming\
    \ from a client on a different network\n   from polluting the cache with a Tailored\
    \ Response for all the users\n   of that resolver.\n"
- title: 7.4.  Delegations and Negative Answers
  contents:
  - "7.4.  Delegations and Negative Answers\n   The prohibition against tying ECS\
    \ data to records from the Authority\n   and Additional sections left an unfortunate\
    \ ambiguity in the original\n   specification, primarily with regard to negative\
    \ answers.  The\n   expectation of the original authors was that ECS would only\
    \ really be\n   used for address requests and the positive result in the response's\n\
    \   Answer section, which was the use case that was driving the\n   definition\
    \ of the protocol.\n   For negative answers, some independent implementations\
    \ of both\n   resolvers and authorities did not see the section restriction as\n\
    \   necessarily meaning that a given name and type must only have either\n   positive\
    \ ECS-tagged answers or a negative answer.  They support being\n   able to tell\
    \ one part of the network that the data does not exist,\n   while telling another\
    \ part of the network that it does.\n   Several other implementations, however,\
    \ do not support being able to\n   mix positive and negative answers; thus, interoperability\
    \ is a\n   problem.  It is RECOMMENDED that no specific behavior regarding\n \
    \  negative answers be relied upon, but that Authoritative Nameservers\n   should\
    \ conservatively expect that Intermediate Nameservers will treat\n   all negative\
    \ answers as /0; therefore, they SHOULD set SCOPE PREFIX-\n   LENGTH accordingly.\n\
    \   This issue is expected to be revisited in a future revision of the\n   protocol,\
    \ possibly blessing the mixing of positive and negative\n   answers.  There are\
    \ implications for cache data structures that\n   developers should consider when\
    \ writing new ECS code.\n   The delegations case is a bit easier to tease out.\
    \  In operational\n   practice, if an authoritative server is using address information\
    \ to\n   provide customized delegations, it is the resolver that will be using\n\
    \   the answer for its next iterative query.  Addresses in the Additional\n  \
    \ section SHOULD therefore ignore ECS data, and the Authoritative\n   Nameserver\
    \ SHOULD return a zero SCOPE PREFIX-LENGTH on delegations.\n   A Recursive Resolver\
    \ SHOULD treat a non-zero SCOPE PREFIX LENGTH in a\n   delegation as though it\
    \ were zero.\n"
- title: 7.5.  Transitivity
  contents:
  - "7.5.  Transitivity\n   Generally, ECS options will only be present in DNS messages\
    \ between a\n   Recursive Resolver and an Authoritative Nameserver, i.e., one\
    \ hop.\n   However, in certain configurations, for example, multi-tier\n   nameserver\
    \ setups, it may be necessary to implement transitive\n   behavior on Intermediate\
    \ Nameservers.\n   Any Intermediate Nameserver that forwards ECS options received\
    \ from\n   its clients MUST fully implement the caching behavior described in\n\
    \   Section 7.3.\n   An Intermediate Nameserver MAY forward ECS options with address\n\
    \   information.  This information MAY match the source IP address of the\n  \
    \ incoming query, and MAY have more or fewer address bits than the\n   nameserver\
    \ would normally include in a locally originated ECS option.\n   If an Intermediate\
    \ Nameserver receives a query with SOURCE PREFIX-\n   LENGTH set to 0, it MUST\
    \ NOT include client address information in\n   queries made to resolve that client's\
    \ request (see Section 7.1.2).\n   If, for any reason, the Intermediate Nameserver\
    \ does not want to use\n   the information in an ECS option it receives (too little\
    \ address\n   information, network address from a range not authorized to use\
    \ the\n   server, private/unroutable address space, etc.), it SHOULD drop the\n\
    \   query and return a REFUSED response.  Note again that a query MUST\n   NOT\
    \ be refused solely because it provides 0 address bits.\n   Be aware that at least\
    \ one major existing implementation does not\n   return REFUSED and instead just\
    \ processes the query as though the\n   problematic information were not present.\
    \  This can lead to anomalous\n   situations, such as a response from the Intermediate\
    \ Nameserver that\n   indicates it is tailored for one network (the one passed\
    \ in the\n   original query, since the ADDRESS must match) when actually it is\
    \ for\n   another network (the one which contains the address that the\n   Intermediate\
    \ Nameserver saw as making the query).\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has assigned option code 8 in the \"DNS EDNS0\
    \ Option Codes (OPT)\"\n   registry to edns-client-subnet.\n   IANA has updated\
    \ the reference to refer to this RFC.\n"
- title: 9.  DNSSEC Considerations
  contents:
  - "9.  DNSSEC Considerations\n   The presence or absence of an EDNS0 OPT resource\
    \ record ([RFC6891])\n   containing an ECS option in a DNS query does not change\
    \ the usage of\n   the resource records and mechanisms used to provide data origin\n\
    \   authentication and data integrity to the DNS, as described in\n   [RFC4033],\
    \ [RFC4034], and [RFC4035].  OPT records are not signed.\n   Use of this option,\
    \ however, does imply increased DNS traffic between\n   any given Recursive Resolver\
    \ and Authoritative Nameserver, which\n   could be another barrier to further\
    \ DNSSEC adoption in this area.\n   The initial version of this protocol, against\
    \ which several\n   Authoritative and Recursive Nameserver implementations were\
    \ written,\n   did not discuss the handling of DNSSEC RRs; thus, it is expected\
    \ that\n   there are operational inconsistencies in handling them.\n   Given the\
    \ intention of this document to describe how ECS is currently\n   deployed, specifying\
    \ new requirements for DNSSEC handling is out of\n   scope.  However, some recommendations\
    \ can be made as to what is most\n   likely to result in successful interoperation\
    \ for a DNSSEC-signed ECS\n   zone, mainly from the point of view of Authoritative\
    \ Nameservers.\n   Most DNSSEC records SHOULD be scoped at /0, except for the\
    \ RRSIG\n   records, which MUST be tied to the RRset that they sign in a Tailored\n\
    \   Response.  While it is possible to conceive of a way to get other\n   DNSSEC\
    \ records working in a network-specific way, it has little\n   apparent benefit\
    \ or likelihood of working with deployed validating\n   resolvers.\n   One further\
    \ implication here is that, despite the discussion about\n   negative answers\
    \ in Section 7.4, scoping NextSECure (NSEC) or NSEC3\n   records at /0 per the\
    \ previous paragraph necessarily implies that\n   DNSSEC-signed negative answers\
    \ must also be network-invariant.\n"
- title: 10.  NAT Considerations
  contents:
  - "10.  NAT Considerations\n   Special awareness of ECS in devices that perform\
    \ Network Address\n   Translation (NAT) as described in [RFC2663] is not required;\
    \ queries\n   can be passed through as is.  The client's network address SHOULD\
    \ NOT\n   be added, and existing ECS options, if present, SHOULD NOT be\n   modified\
    \ by NAT devices.\n   In large-scale global networks behind a NAT device (but,\
    \ for example\n   with Centralized Resolver infrastructure), an internal Intermediate\n\
    \   Nameserver might have detailed network layout information, and may\n   know\
    \ which external subnets are used for egress traffic by each\n   internal network.\
    \  In such cases, the Intermediate Nameserver MAY use\n   that information when\
    \ originating ECS options.\n   In other cases, if a Recursive Resolver knows that\
    \ it is situated\n   behind a NAT device, it SHOULD NOT originate ECS options\
    \ with their\n   external IP address and instead rely on downstream Intermediate\n\
    \   Nameservers to do so.  It MAY, however, choose to include the option\n   with\
    \ their internal address for the purposes of signaling its own\n   limit for SOURCE\
    \ PREFIX-LENGTH.\n   Full treatment of special network addresses is beyond the\
    \ scope of\n   this document; handling them will likely differ according to the\n\
    \   operational environments of each service provider.  As a general\n   guideline,\
    \ if an Authoritative Nameserver on the publicly routed\n   Internet receives\
    \ a query that specifies an ADDRESS in [RFC1918] or\n   [RFC4193] private address\
    \ space, it SHOULD ignore ADDRESS and look up\n   its answer based on the address\
    \ of the Recursive Resolver.  In the\n   response, it SHOULD set SCOPE PREFIX-LENGTH\
    \ to cover all of the\n   relevant private space.  For example, a query for ADDRESS\
    \ 10.1.2.0\n   with a SOURCE PREFIX-LENGTH of 24 would get a returned SCOPE PREFIX-\n\
    \   LENGTH of 8.  The Intermediate Nameserver MAY elect to cache the\n   answer\
    \ under one entry for special-purpose addresses [RFC6890]; see\n   Section 11.3\
    \ of this document.\n"
- title: 11.  Security Considerations
  contents:
  - '11.  Security Considerations

    '
- title: 11.1.  Privacy
  contents:
  - "11.1.  Privacy\n   With the ECS option, the network address of the client that\
    \ initiated\n   the resolution becomes visible to all servers involved in the\n\
    \   resolution process.  Additionally, it will be visible from any\n   network\
    \ traversed by the DNS packets.\n   To protect users' privacy, Recursive Resolvers\
    \ are strongly\n   encouraged to conceal part of the user's IP address by truncating\n\
    \   IPv4 addresses to 24 bits. 56 bits are recommended for IPv6, based on\n  \
    \ [RFC6177].\n   ISPs should have more detailed knowledge of their own networks.\
    \  That\n   is, they might know that all 24-bit prefixes in a /20 are in the same\n\
    \   area.  In those cases, for optimal cache utilization and improved\n   privacy,\
    \ the ISP's Recursive Resolver SHOULD truncate IP addresses in\n   this /20 to\
    \ just 20 bits, instead of 24 as recommended above.\n   Users who wish their full\
    \ IP address to be hidden need to configure\n   their client software, if possible,\
    \ to include an ECS option\n   specifying the wildcard address (i.e., a SOURCE\
    \ PREFIX-LENGTH of 0).\n   As described in previous sections, this option will\
    \ be forwarded\n   across all the Recursive Resolvers supporting ECS, which MUST\
    \ NOT\n   modify it to include the network address of the client.\n   Note that\
    \ even without an ECS option, any server queried directly by\n   the user will\
    \ be able to see the full client IP address.  Recursive\n   Resolvers or Authoritative\
    \ Nameservers MAY use the source IP address\n   of queries to return a cached\
    \ entry or to generate a Tailored\n   Response that best matches the query.\n"
- title: 11.2.  Birthday Attacks
  contents:
  - "11.2.  Birthday Attacks\n   ECS adds information to the DNS query tuple (q-tuple).\
    \  This allows\n   an attacker to send a caching Intermediate Nameserver multiple\n\
    \   queries with spoofed IP addresses either in the ECS option or as the\n   source\
    \ IP.  These queries will trigger multiple outgoing queries with\n   the same\
    \ name, type, and class, just with different address\n   information in the ECS\
    \ option.\n   With multiple queries for the same name in flight, the attacker\
    \ has a\n   higher chance of success to send a matching response with SCOPE\n\
    \   PREFIX-LENGTH set to 0 to get it cached for all hosts.\n   To counter this,\
    \ the ECS option in a response packet MUST contain the\n   full FAMILY, ADDRESS,\
    \ and SOURCE PREFIX-LENGTH fields from the\n   corresponding query.  Intermediate\
    \ Nameservers processing a response\n   MUST verify that these match, and they\
    \ SHOULD discard the entire\n   response if they do not.\n   The requirement to\
    \ discard is categorized as \"SHOULD\" instead of\n   \"MUST\" because it stands\
    \ in opposition to the instruction in\n   Section 7.3, which states that a response\
    \ lacking an ECS option\n   should be treated as though it had one of SCOPE PREFIX-LENGTH\
    \ of 0.\n   If that is always true, then an attacker does not need to worry about\n\
    \   matching the original ECS option data and just needs to flood back\n   responses\
    \ that have no ECS option at all.\n   This type of attack could be detected in\
    \ ongoing operations by\n   marking whether the responding nameserver had previously\
    \ been sending\n   ECS options and/or by taking note of an incoming flood of bogus\n\
    \   responses and flagging the relevant query for re-resolution.  This\n   type\
    \ of detection is more complex than existing nameserver responses\n   to spoof\
    \ floods, and it would also need to be sensitive to a\n   nameserver legitimately\
    \ stopping ECS replies even though it had\n   previously given them.\n"
- title: 11.3.  Cache Pollution
  contents:
  - "11.3.  Cache Pollution\n   It is simple for an arbitrary resolver or client to\
    \ provide false\n   information in the ECS option, or to send UDP packets with\
    \ forged\n   source IP addresses.\n   This could be used to:\n   o  pollute the\
    \ cache of Intermediate Resolvers by filling it with\n      results that will\
    \ rarely (if ever) be used.\n   o  reverse-engineer the algorithms (or data) used\
    \ by the\n      Authoritative Nameserver to calculate Tailored Responses.\n  \
    \ o  mount a denial-of-service attack against an Intermediate\n      Nameserver\
    \ by forcing it to perform many more recursive queries\n      than it would normally\
    \ do, due to how caching is handled for\n      queries containing the ECS option.\n\
    \   Even without malicious intent, Centralized Resolvers providing\n   answers\
    \ to clients in multiple networks will need to cache different\n   responses for\
    \ different networks, putting more memory pressure on the\n   cache.\n   To mitigate\
    \ those problems:\n   o  Recursive Resolvers implementing ECS should only enable\
    \ it in\n      deployments where it is expected to bring clear advantages to the\n\
    \      end users, such as when expecting clients from a variety of\n      networks\
    \ or from a wide geographical area.  Due to the high cache\n      pressure introduced\
    \ by ECS, the feature SHOULD be disabled in all\n      default configurations.\n\
    \   o  Recursive Resolvers SHOULD limit the number of networks and\n      answers\
    \ they keep in the cache for any given query.\n   o  Recursive Resolvers SHOULD\
    \ limit the total number of different\n      networks that they keep in cache.\n\
    \   o  Recursive Resolvers MUST NOT send an ECS option with SOURCE\n      PREFIX-LENGTH\
    \ providing more bits in ADDRESS than they are willing\n      to cache responses\
    \ for.\n   o  Recursive Resolvers should implement algorithms to improve the\n\
    \      cache hit rate, given the size constraints indicated above.\n      Recursive\
    \ Resolvers MAY, for example, decide to discard more-\n      specific cache entries\
    \ first.\n   o  Authoritative Nameservers and Recursive Resolvers should discard\n\
    \      ECS options that are either obviously forged or otherwise known to\n  \
    \    be wrong.  They SHOULD at least treat unroutable addresses, such\n      as\
    \ some of the address blocks defined in [RFC6890], as equivalent\n      to the\
    \ Recursive Resolver's own identity.  They SHOULD ignore and\n      never forward\
    \ ECS options specifying other routable addresses that\n      are known not to\
    \ be served by the query source.\n   o  The ECS option is just a hint to Authoritative\
    \ Nameservers for\n      customizing results.  They can decide to ignore the content\
    \ of the\n      ECS option based on blacklists or whitelists, rate-limiting\n\
    \      mechanisms, or any other logic implemented in the software.\n"
- title: 12.  Sending the Option
  contents:
  - "12.  Sending the Option\n   When implementing a Recursive Resolver, there are\
    \ two strategies on\n   deciding when to include an ECS option in a query.  At\
    \ this stage,\n   it's not clear which strategy is best.\n"
- title: 12.1.  Probing
  contents:
  - "12.1.  Probing\n   A Recursive Resolver can send the ECS option with every outgoing\n\
    \   query.  However, it is RECOMMENDED that resolvers remember which\n   Authoritative\
    \ Nameservers did not return the option with their\n   response and omit client\
    \ address information from subsequent queries\n   to those nameservers.\n   Additionally,\
    \ Recursive Resolvers SHOULD be configured never to send\n   the option when querying\
    \ root, top-level, and effective top-level\n   (i.e., \"public suffix\" [Public_Suffix_List])\
    \ domain servers.  These\n   domains are delegation-centric and are very unlikely\
    \ to generate\n   different responses based on the address of the client.\n  \
    \ When probing, it is important that several things are probed: support\n   for\
    \ ECS, support for EDNS0, support for EDNS0 options, or possibly an\n   unreachable\
    \ nameserver.  Various implementations are known to drop\n   DNS packets with\
    \ OPT RRs (with or without options), thus several\n   probes are required to discover\
    \ what is supported.\n   Probing, if implemented, MUST be repeated periodically,\
    \ e.g., daily.\n   If an Authoritative Nameserver indicates ECS support for one\
    \ zone, it\n   is to be expected that the nameserver supports ECS for all of its\n\
    \   zones.  Likewise, an Authoritative Nameserver that uses ECS\n   information\
    \ for one of its zones MUST indicate support for the option\n   in all of its\
    \ responses to ECS queries.  If the option is supported\n   but not actually used\
    \ for generating a response, its SCOPE PREFIX-\n   LENGTH MUST be set to 0.\n"
- title: 12.2.  Whitelist
  contents:
  - "12.2.  Whitelist\n   As described previously, it is expected that only a few\
    \ Recursive\n   Resolvers will need to use ECS, and that it will generally be\
    \ enabled\n   only if it offers a clear benefit to the users.\n   To avoid the\
    \ complexity of implementing a probing and detection\n   mechanism (and the possible\
    \ query loss/delay that may come with it),\n   an implementation could use a whitelist\
    \ of Authoritative Nameservers\n   to send the option to, likely specified by\
    \ their domain name.\n   Implementations MAY also allow additional configuring\
    \ of this based\n   on other criteria, such as zone or query type.  As of the\
    \ time of\n   this writing, at least one implementation makes use of a whitelist.\n\
    \   An advantage of using a whitelist is that partial client address\n   information\
    \ is only disclosed to nameservers that are known to use\n   the information,\
    \ improving privacy.\n   A drawback is scalability.  The operator needs to track\
    \ which\n   Authoritative Nameservers support ECS, making it harder for new\n\
    \   Authoritative Nameservers to start using the option.\n   Similarly, Authoritative\
    \ Nameservers can also use whitelists to limit\n   the feature to only certain\
    \ clients.  For example, a CDN that does\n   not want all of their mapping trivially\
    \ walked might require a legal\n   agreement with the Recursive Resolver operator,\
    \ to clearly describe\n   the acceptable use of the feature.\n   The maintenance\
    \ of access control mechanisms is out of scope for this\n   protocol definition.\n"
- title: 13.  Example
  contents:
  - "13.  Example\n   1.   A Stub Resolver, SR, with the IP address\n        2001:0db8:fd13:4231:2112:8a2e:c37b:7334\
    \ tries to resolve\n        www.example.com by forwarding the query to the Recursive\n\
    \        Resolver, RNS, asking for recursion.\n   2.   RNS, supporting ECS, looks\
    \ up www.example.com in its cache.  An\n        entry is found neither for www.example.com\
    \ nor for example.com.\n   3.   RNS builds a query to send to the root and .com\
    \ servers.  The\n        implementation of RNS provides facilities so that an\n\
    \        administrator can configure it not to forward ECS in certain\n      \
    \  cases.  In particular, RNS is configured not to include an ECS\n        option\
    \ when talking to Top-Level-Domain or root nameservers, as\n        described\
    \ in Section 7.1.  Thus, no ECS option is added, and\n        resolution is performed\
    \ as usual.\n   4.   RNS now knows the next server to query: the Authoritative\n\
    \        Nameserver, ANS, responsible for example.com.\n   5.   RNS prepares a\
    \ new query for www.example.com, including an ECS\n        option with:\n    \
    \    *  OPTION-CODE set to 8.\n        *  OPTION-LENGTH set to 0x00 0x0b for the\
    \ following fixed 4\n           octets plus the 7 octets that will be used for\
    \ ADDRESS.\n        *  FAMILY set to 0x00 0x02, as IP is an IPv6 address.\n  \
    \      *  SOURCE PREFIX-LENGTH set to 0x38, as RNS is configured to\n        \
    \   conceal the last 72 bits of every IPv6 address.\n        *  SCOPE PREFIX-LENGTH\
    \ set to 0x00, as specified by this\n           document for all queries.\n  \
    \      *  ADDRESS set to 0x20 0x01 0x0d 0xb8 0xfd 0x13 0x42, providing\n     \
    \      only the first 56 bits of the IPv6 address.\n   6.   The query is sent.\
    \  ANS understands and uses ECS.  It parses the\n        ECS option, and generates\
    \ a Tailored Response.\n   7.   Due its internal implementation, ANS finds a response\
    \ that is\n        tailored for the whole /16 of the client that performed the\n\
    \        query.\n   8.   ANS adds an ECS option in the response, containing:\n\
    \        *  OPTION-CODE set to 8.\n        *  OPTION-LENGTH set to 0x00 0x07.\n\
    \        *  FAMILY set to 0x00 0x02.\n        *  SOURCE PREFIX-LENGTH set to 0x38,\
    \ copied from the query.\n        *  SCOPE PREFIX-LENGTH set to 0x30, indicating\
    \ a /48 network.\n        *  ADDRESS set to 0x20 0x01 0x0d 0xb8 0xfd 0x13 0x42,\
    \ copied\n           from the query.\n   9.   RNS receives the response containing\
    \ an ECS option.  It verifies\n        that FAMILY, SOURCE PREFIX-LENGTH, and\
    \ ADDRESS match the query.\n        If not, the message is discarded.\n   10.\
    \  The response is interpreted as usual.  Since the response\n        contains\
    \ an ECS option, ADDRESS, SCOPE PREFIX-LENGTH, and FAMILY\n        in the response\
    \ are used to cache the entry.\n   11.  RNS sends a response to Stub Resolver,\
    \ SR, without including an\n        ECS option.\n   12.  RNS receives another\
    \ query to resolve www.example.com.  This\n        time, a response is cached.\
    \  The response, however, is tied to a\n        particular network.  If the client's\
    \ address matches any network\n        in the cache, then the response is returned\
    \ from the cache.\n        Otherwise, another query is performed.  If multiple\
    \ results\n        match, the one with the longest SCOPE PREFIX-LENGTH is chosen,\n\
    \        as per common best-network-match algorithms.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain Names -\
    \ Concepts and Facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,\
    \ November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n  \
    \ [RFC1035]  Mockapetris, P., \"Domain Names - Implementation and\n          \
    \    Specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n              November\
    \ 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC1700]  Reynolds, J.\
    \ and J. Postel, \"Assigned Numbers\", RFC 1700,\n              DOI 10.17487/RFC1700,\
    \ October 1994,\n              <http://www.rfc-editor.org/info/rfc1700>.\n   [RFC1918]\
    \  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and\
    \ E. Lear, \"Address Allocation for Private Internets\",\n              BCP 5,\
    \ RFC 1918, DOI 10.17487/RFC1918, February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4033]\
    \  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"DNS Security Introduction and Requirements\",\n              RFC 4033, DOI\
    \ 10.17487/RFC4033, March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Resource Records for the DNS Security Extensions\",\n      \
    \        RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC4193]  Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n     \
    \         Addresses\", RFC 4193, DOI 10.17487/RFC4193, October 2005,\n       \
    \       <http://www.rfc-editor.org/info/rfc4193>.\n   [RFC6177]  Narten, T., Huston,\
    \ G., and L. Roberts, \"IPv6 Address\n              Assignment to End Sites\"\
    , BCP 157, RFC 6177,\n              DOI 10.17487/RFC6177, March 2011,\n      \
    \        <http://www.rfc-editor.org/info/rfc6177>.\n   [RFC6890]  Cotton, M.,\
    \ Vegoda, L., Bonica, R., Ed., and B. Haberman,\n              \"Special-Purpose\
    \ IP Address Registries\", BCP 153,\n              RFC 6890, DOI 10.17487/RFC6890,\
    \ April 2013,\n              <http://www.rfc-editor.org/info/rfc6890>.\n   [RFC6891]\
    \  Damas, J., Graff, M., and P. Vixie, \"Extension Mechanisms\n              for\
    \ DNS (EDNS(0))\", STD 75, RFC 6891,\n              DOI 10.17487/RFC6891, April\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6891>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [Address_Family_Numbers]\n              IANA,\
    \ \"Address Family Numbers\",\n              <http://www.iana.org/assignments/address-family-numbers>.\n\
    \   [DPRIVE_Working_Group]\n              IETF, \"PNS PRIVate Exchange (dprive)\
    \ DPRIVE Working\n              Group\", 2015,\n              <https://datatracker.ietf.org/wg/dprive/charter/>.\n\
    \   [METADATA]\n              Hardie, T., Ed., \"Design considerations for Metadata\n\
    \              Insertion\", Work in Progress, draft-hardie-privsec-\n        \
    \      metadata-insertion-02, March 2016.\n   [Public_Suffix_List]\n         \
    \     \"Public Suffix List\", <https://publicsuffix.org/>.\n   [RFC2308]  Andrews,\
    \ M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\", RFC 2308,\
    \ DOI 10.17487/RFC2308, March 1998,\n              <http://www.rfc-editor.org/info/rfc2308>.\n\
    \   [RFC2663]  Srisuresh, P. and M. Holdrege, \"IP Network Address\n         \
    \     Translator (NAT) Terminology and Considerations\",\n              RFC 2663,\
    \ DOI 10.17487/RFC2663, August 1999,\n              <http://www.rfc-editor.org/info/rfc2663>.\n\
    \   [RFC7719]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n           \
    \   Terminology\", RFC 7719, DOI 10.17487/RFC7719, December\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7719>.\n   [VANDERGAAST]\n              Contavalli,\
    \ C., Gaast, W., Leach, S., and E. Lewis,\n              \"Client Subnet in DNS\
    \ Requests\", Work in Progress,\n              draft-vandergaast-edns-client-subnet-02,\
    \ July 2013.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank Darryl Rodden for his work as\
    \ a co-author,\n   and the following people for reviewing this document and for\n\
    \   providing useful feedback: Paul S. R. Chisholm, B. Narendran,\n   Leonidas\
    \ Kontothanassis, David Presotto, Philip Rowlands, Chris\n   Morrow, Kara Moscoe,\
    \ Alex Nizhner, Warren Kumari, and Richard Rabbat\n   from Google; Terry Farmer,\
    \ Mark Teodoro, Edward Lewis, and Eric\n   Burger from Neustar; David Ulevitch\
    \ and Matthew Dempsky from OpenDNS;\n   Patrick W. Gilmore and Steve Hill from\
    \ Akamai; Colm MacCarthaigh and\n   Richard Sheehan from Amazon; Tatuya Jinmei\
    \ from Infoblox; Andrew\n   Sullivan from Dyn; John Dickinson from Sinodun; Mark\
    \ Delany from\n   Apple; Yuri Schaeffer from NLnet Labs; Duane Wessels Verisign;\n\
    \   Antonio Querubin; Daniel Kahn Gillmor from the ACLU; Evan Hunt and\n   Mukund\
    \ Sivaraman from the Internet Software Consortium; Russ Housley\n   from Vigilsec;\
    \ Stephen Farrell from Trinity College Dublin; Alissa\n   Cooper from Cisco; Suzanne\
    \ Woolf; and all of the other people that\n   replied to our emails on various\
    \ mailing lists.\n"
- title: Contributors
  contents:
  - "Contributors\n   The individuals below contributed significantly to this document.\n\
    \   Edward Lewis\n   ICANN\n   12025 Waterfront Drive, Suite 300\n   Los Angeles,\
    \ CA 90094-2536\n   United States\n   Email: edward.lewis@icann.org\n   Sean Leach\n\
    \   Fastly\n   P.O. Box 78266\n   San Francisco, CA 94107\n   United States\n\
    \   Jason Moreau\n   Akamai Technologies\n   150 Broadway\n   Cambridge, MA 02142-1413\n\
    \   United States\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carlo Contavalli\n   Google\n   1600 Amphitheater Parkway\n\
    \   Mountain View, CA  94043\n   United States\n   Email: ccontavalli@google.com\n\
    \   Wilmer van der Gaast\n   Google\n   Belgrave House, 76 Buckingham Palace Road\n\
    \   London  SW1W 9TQ\n   United Kingdom\n   Email: wilmer@google.com\n   David\
    \ C Lawrence\n   Akamai Technologies\n   150 Broadway\n   Cambridge, MA  02142-1054\n\
    \   United States\n   Email: tale@akamai.com\n   Warren Kumari\n   Google\n  \
    \ 1600 Amphitheatre Parkway\n   Mountain View, CA  94043\n   United States\n \
    \  Email: warren@kumari.net\n"
