- title: __initial_text__
  contents:
  - '        Requirements and Design for Voucher Trading System (VTS)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Crediting loyalty points and collecting digital coupons or gift\n\
    \   certificates are common functions in purchasing and trading\n   transactions.\
    \  These activities can be generalized using the concept\n   of a \"voucher\"\
    , which is a digital representation of the right to\n   claim goods or services.\
    \  This document presents a Voucher Trading\n   System (VTS) that circulates vouchers\
    \ securely and its terminology;\n   it lists design principles and requirements\
    \ for VTS and the Generic\n   Voucher Language (GVL), with which diverse types\
    \ of vouchers can be\n   described.\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   4.  Scope of VTS Specifications ...................................7\n\
    \       4.1 Voucher Trading Protocol ..................................7\n   \
    \    4.2 VTS-API ...................................................8\n      \
    \ 4.3 Generic Voucher Language ..................................8\n   5.  GVL\
    \ Requirements ..............................................8\n       5.1 Semantics\
    \ .................................................8\n       5.2 Syntax ....................................................9\n\
    \       5.3 Security .................................................10\n   \
    \    5.4 Efficiency ...............................................10\n      \
    \ 5.5 Coordination .............................................10\n       5.6\
    \ Example of GVL ...........................................10\n   6.  Application\
    \ Scenarios ........................................11\n   7.  Q & A ........................................................13\n\
    \   8.  Security Considerations ......................................13\n   9.\
    \  Acknowledgments ..............................................13\n   10. References\
    \ ...................................................13\n   11. Authors' Addresses\
    \ ...........................................14\n   12. Full Copyright Statement......................................15\n"
- title: 1. Background
  contents:
  - "1. Background\n   It is often necessary to credit loyalty points, collect digital\n\
    \   coupons or gift certificates, etc, to complete purchases or other\n   trading\
    \ transactions in the real world.  The importance of these\n   activities is also\
    \ being recognized in Internet Commerce.  If a\n   different issuing or collecting\
    \ system to handle such points or\n   coupons must be developed for each individual\
    \ application, the\n   implementation cost will be excessive, inhibiting the use\
    \ of such\n   mechanisms in electronic commerce.  Consumers may also be forced\
    \ to\n   install a number of software modules to handle these points or\n   coupons.\n\
    \   A voucher is a digital representation of the right to claim services\n   or\
    \ goods.  Using vouchers, a wide-range of electronic-values,\n   including points\
    \ or coupons, can be handled in a uniform manner with\n   one trading software\
    \ module.\n   This document presents the terminology and model for a Voucher\n\
    \   Trading System (VTS) that circulates vouchers securely; it also lists\n  \
    \ design principles and requirements for a VTS and the Generic Voucher\n   Language\
    \ (GVL), with which diverse types of vouchers can be\n   described.\n"
- title: 2. Terminology and Model
  contents:
  - '2. Terminology and Model

    '
- title: 2.1 Voucher
  contents:
  - "2.1 Voucher\n   A voucher is a digital representation of the right to claim goods\
    \ or\n   services.  To clarify the difference between vouchers and electronic\n\
    \   money/digital certificates, we introduce a formal definition of\n   vouchers\
    \ in this document.\n      Let I be a voucher issuer, H be a voucher holder, P\
    \ be the\n      issuer's promise to the voucher holder.  A voucher is defined\
    \ as\n      the 3-tuple of <I, P, H>.\n   Examples of P are as follows:\n   o\
    \  Two loyalty points are added to the card per purchase.  If you\n      collect\
    \ 50 points, you'll get one item free.  (Loyalty points)\n   o  Take 10% off your\
    \ total purchase by presenting this card.\n      (Membership card)\n   o  Take\
    \ 50% off your total purchase with this coupon.  The purchase\n      transaction\
    \ uses up the coupon.  (Coupon)\n   o  The bearer can access \"http://...\" for\
    \ one month free.  (Free\n      ticket for sales promotion)\n   o  The bearer\
    \ can exchange this ticket for the ordered clothes.\n      (Exchange ticket or\
    \ Delivery note)\n   o  Seat number A-24 has been reserved for \"a-concert\" on\
    \ April 2.\n      (Event ticket)\n   Note that P does not need to be described\
    \ in terms of a natural\n   language as long as the contents of the vouchers are\
    \ specified.  For\n   example, a set of attribute name and value pairs described\
    \ in XML can\n   be employed to define the contents.\n"
- title: 2.2 Participants
  contents:
  - "2.2 Participants\n   There are four types of participants in the voucher trading\
    \ model:\n   issuer, holder, collector, and VTS provider.  Their roles are as\n\
    \   follows:\n   Issuer: Creates and issues a voucher.  Guarantees contents of\n\
    \      the voucher.\n   Holder (or user): Owns the vouchers.  Transfers and redeems\n\
    \      the voucher to other users or collector.\n   Collector (or examiner): Collects\
    \ or examines the voucher and\n      implements its promise.  In general, compensated\
    \ by goods or\n      services rendered.\n   VTS Provider: Provides a VTS and guarantees\
    \ that a particular\n      voucher is not assigned to multiple holders or used\
    \ multiple times\n      unless permitted for that voucher type.\n   The IOTP model\
    \ [IOTP] includes merchant, deliverer, consumer and\n   other participants.  They\
    \ take various roles in the settlement\n   because a merchant, for example, can\
    \ be considered as an issuer, or\n   holder depending on whether the merchant\
    \ creates the voucher\n   her/himself or purchases it from a wholesaler or manufacturer.\
    \  A\n   merchant can also be a collector if the shop collects gift\n   certificate\
    \ or coupons.\n"
- title: 2.3 Voucher Trading System (VTS)
  contents:
  - "2.3 Voucher Trading System (VTS)\n   A voucher is generated by the issuer, traded\
    \ among holders (users),\n   and finally is collected by the collector:\n    \
    \      <I, P, H>        <I, P, H'>         <I, P, H'>\n   Issuer I --------> User\
    \ H ---------> User H' ---------> Collector\n           Issue            Transfer\
    \           Redemption\n                     Figure 1. Life cycle of vouchers\n\
    \   The VTS provider supplies a VTS that enables vouchers to be\n   circulated\
    \ among the participants securely.\n   A formal definition of VTS is as follows:\n\
    \      A voucher trading system (VTS) is a system that logically manages\n   \
    \   a set of valid vouchers VVS, which is a subset of {<I, P, H> | I\n      in\
    \ IS, P in PS, H in HS} where IS is the set of issuers, PS is the\n      set of\
    \ promises, and HS is the set of holders; VTS prevents them\n      from being\
    \ modified or reproduced except by the following three\n      transactions: issue,\
    \ transfer, and redemption.  The initial state\n      of the VVS is an empty set.\n\
    \      Note that this does not imply that VVS is stored physically in a\n    \
    \  centralized database.  For example, one implementation may store\n      vouchers\
    \ in distributed smart cards carried by each holder [T00],\n      or may store\
    \ them in multiple servers managed by each issuer or\n      trusted third parties.\
    \  This is a trust policy and/or\n      implementation issue [MF99].\n   Issue\n\
    \      An issue transaction is the action that creates the tuple of <I,\n    \
    \  P, H> and adds it to the VVS with the issuer's intention.\n   Transfer\n  \
    \    A transfer transaction is the action that rewrites the tuple of\n      <I,\
    \ P, H> (in VVS) as <I, P, H'> (H<>H') to reflect the original\n      holder H's\
    \ intention.\n   Redemption\n      There are two redemption transactions: presentation\
    \ and\n      consumption.\n      A presentation transaction is the action that\
    \ shows the tuple of\n      <I, P, H> (in VVS) to reflect the holder H's intention.\
    \  In this\n      case, the ownership of the voucher is retained when the voucher\
    \ is\n      redeemed, e.g., redemption (presentation) of licenses or\n      passports.\n\
    \      A consumption transaction is the action that deletes the tuple of\n   \
    \   <I, P, H> (in VVS) to reflect the holder H's intention and\n      properties\
    \ of the voucher.  The ownership of the voucher may be\n      voided or the number\
    \ of times it is valid reduced when the voucher\n      is redeemed, e.g., redemption\
    \ of event tickets or telephone cards.\n   Note that one or more of these transactions\
    \ can be executed as part\n   of the same IOTP purchase transaction.  See details\
    \ in Section 6.\n"
- title: 3. VTS Requirements
  contents:
  - "3. VTS Requirements\n   A VTS must meet the following requirements\n   (1) It\
    \ MUST handle diverse types of vouchers issued by different\n       issuers.\n\
    \   (2) It MUST prevent illegal acts such as alteration, forgery, and\n      \
    \ reproduction, and ensure privacy.\n   (3) It MUST be practical in terms of implementation/operation\
    \ cost\n       and efficiency.\n   Each of these requirements is discussed below\
    \ in detail.\n"
- title: 3.1 Capability of handling diversity
  contents:
  - "3.1 Capability of handling diversity\n   (a) Different issuers\n   Unlike a digital\
    \ cash system that handles only the currency issued by\n   a specific issuer such\
    \ as a central bank, the voucher trading system\n   MUST handle vouchers issued\
    \ by multiple issuers.\n   (b) Various types of vouchers\n   Unlike a digital\
    \ cash system that only handles a currency, the system\n   MUST handle various\
    \ types of vouchers, such as gift certificates,\n   coupons, and loyalty points.\n"
- title: 3.2 Ensuring security
  contents:
  - "3.2 Ensuring security\n   (c) Preventing forgery\n   Only the issuer can cause\
    \ a valid voucher to be issued.  It MUST NOT\n   be possible for other parties\
    \ to cause a valid voucher to be created.\n   (d) Preventing alteration\n   Voucher\
    \ MUST NOT be altered during circulation except that the\n   transfer transaction,\
    \ in which the voucher holder is rewritten, is\n   permitted.  Only the current\
    \ holder can initiate a transfer\n   transaction.\n   (e) Preventing duplicate-redemption\n\
    \   A voucher MUST NOT be redeemable once it has been consumed (the\n   result\
    \ of some redemption transactions).  Only the holder can\n   initiate a redemption\
    \ transaction.\n   (f) Preventing reproduction\n   Voucher MUST NOT be reproduced\
    \ while in circulation.  That is, there\n   must be only one valid holder of any\
    \ particular voucher at any\n   particular time.\n   (g) Non-repudiation\n   It\
    \ SHOULD NOT be possible to the issuer to repudiate the issuance, or\n   the holder\
    \ to repudiate the transfer or redemption of a voucher,\n   after it is issued,\
    \ transferred or redeemed.\n   (h) Ensuring privacy\n   Current and previous holders\
    \ of a voucher SHOULD be concealed from\n   someone coming into possession of\
    \ the voucher.\n   (i) Trust manageability\n   If a wide variety of vouchers are\
    \ in circulation, it might be\n   difficult for users to judge whether a voucher\
    \ can be trusted or not.\n   To assist such users, a trust management function\
    \ that verifies the\n   authenticity of a voucher SHOULD be supported.\n"
- title: 3.3 Ensuring practicality
  contents:
  - "3.3 Ensuring practicality\n   (j) Scalability\n   A single centralized broker\
    \ that sells all types of vouchers, or a\n   centralized authority that authenticates\
    \ all issuers or other\n   participants, SHOULD NOT be assumed.  A system that\
    \ relies on a\n   single centralized organization is excessively frail; failure\
    \ in that\n   organization causes complete system failure.\n   (k) Efficiency\n\
    \   It MUST be possible to implement VTS efficiently.  Many applications\n   of\
    \ vouchers, e.g., event ticket or transport passes, require high\n   performance,\
    \ especially when the voucher is redeemed.\n   (l) Simplicity\n   It SHOULD be\
    \ possible to implement VTS simply.  Simplicity is\n   important to reduce the\
    \ cost of implementation.  It is also important\n   in understanding the system,\
    \ which is necessary for trust in the\n   system.\n"
- title: 4. Scope of VTS Specifications
  contents:
  - "4. Scope of VTS Specifications\n   To implement a VTS, Voucher Trading Protocol\
    \ (VTP), VTS Application\n   Programming Interface (VTS-API), and Generic Voucher\
    \ Language (GVL)\n   must be developed.  The objectives, benefits, and limitations\
    \ of\n   standardization for each specification are discussed below.\n"
- title: 4.1 Voucher Trading Protocol
  contents:
  - "4.1 Voucher Trading Protocol\n   To achieve interoperability among multiple VTSs\
    \ developed by\n   independent VTS Providers, standard protocols for issuing,\n\
    \   transferring, or redeeming vouchers will be needed.  However, there\n   are\
    \ several ways of implementing VTS.  For discount coupons or event\n   tickets,\
    \ for example, the smart-card-based decentralized offline VTS\n   is often preferred,\
    \ whereas for bonds or securities, the centralized\n   online VTS may be preferred.\
    \  It is impractical to define any\n   standard protocol at this moment.\n"
- title: 4.2 VTS-API
  contents:
  - "4.2 VTS-API\n   To provide freedom in terms of VTS selection for issuers and\n\
    \   application developers, a standard Voucher Trading System Application\n  \
    \ Programming Interface (VTS-API) that can encapsulate VTS\n   implementations\
    \ should be specified.  It allows a caller application\n   to issue, transfer,\
    \ and redeem voucher in a uniform manner\n   independent of the VTS implementation.\
    \  Basic functions, i.e., issue,\n   transfer, and redeem, provided by VTS-API\
    \ can be straightforwardly\n   derived from the VTS model described in this document.\
    \  More design\n   details of the VTS-API will be discussed in a separate document\
    \ or a\n   separate VTS-API specification.\n"
- title: 4.3 Generic Voucher Language
  contents:
  - "4.3 Generic Voucher Language\n   To satisfy the diverse requirements placed on\
    \ VTS (see Section 3), a\n   standard Generic Voucher Language (GVL) that realizes\
    \ various voucher\n   properties should be specified.  This approach ensures that\
    \ VTS is\n   application independent.  The language should be able to define\n\
    \   diverse Promises P of the voucher <I, P, H> to cover tickets,\n   coupons,\
    \ loyalty points, and gift certificates uniformly.  Specifying\n   I and H is\
    \ a VTS implementation issue and can be achieved by using a\n   public key, hash\
    \ of a public key, URI or other names with scope rule.\n   In the following section,\
    \ we discuss GVL Requirements in detail.\n"
- title: 5. GVL Requirements
  contents:
  - '5. GVL Requirements

    '
- title: 5.1 Semantics
  contents:
  - "5.1 Semantics\n   Semantics supported by the language and their requirements\
    \ levels are\n   described below in detail.\n   (a) Validity control\n   The invalidation\
    \ (punching) method that is executed when the voucher\n   is redeemed depends\
    \ on the type of the voucher.  For example, a\n   loyalty point will be invalidated\
    \ if the point is redeemed but a\n   membership card can be used repeatedly regardless\
    \ of the number of\n   times presented.  The language MUST be able to define how\
    \ validity is\n   modified.  Additionally, the language MUST be able to define\
    \ the\n   validity period, start date and end date.\n   (b) Transferability control\n\
    \   Some types of vouchers require transferability.  The language MUST be\n  \
    \ able to specify if a voucher can be transferred.\n   (c) Circulation control\n\
    \   Depending on the type of the voucher, various circulation\n   requirements\
    \ or restrictions must be satisfied [F99], for example,\n   only qualified shops\
    \ can issue particular vouchers or only a certain\n   service provider can punch\
    \ (invalidate) particular vouchers.  The\n   language SHOULD be able to specify\
    \ such circulation requirements.\n   (d) Anonymity control\n   Different types\
    \ of voucher will require different levels of\n   anonymity.  The language SHOULD\
    \ be able to achieve the required level\n   of anonymity.\n   (e) Understandability\n\
    \   The terms and description of a voucher SHOULD be objectively\n   understood\
    \ by the participants, because this will contribute to\n   reducing the number\
    \ of disputes on the interpretation of the vouchers\n   promised.\n   (f) State\
    \ manageability\n   Some types of vouchers have properties the values of which\
    \ may change\n   dynamically while in circulation, e.g., payment status, reservation\n\
    \   status, or approval status.  The language MAY support the definition\n   of\
    \ such properties.\n   (g) Composability\n   Some types of vouchers consist of\
    \ several sub-vouchers, which may be\n   issued separately from the original vouchers\
    \ typically because the\n   vouchers are issued by different organizations or\
    \ issued at different\n   times.  The language MAY support compound vouchers composed\
    \ of\n   multiple sub-vouchers.\n"
- title: 5.2 Syntax
  contents:
  - "5.2 Syntax\n   To achieve consistency with other related standards shown below,\
    \ the\n   syntax of the language MUST be based on XML [XML].\n   The language\
    \ syntax MUST enable any application-specific property,\n   e.g., seat number,\
    \ flight number, etc. to be defined.  A schema\n   definition language that can\
    \ be translated into application-specific\n   DTDs may be needed.\n"
- title: 5.3 Security
  contents:
  - "5.3 Security\n   The language MUST provide the parameters necessary to establish\n\
    \   security.  Security requirements, however, mainly follow VTS\n   requirements\
    \ described in Section 3 rather than GVL requirements.\n"
- title: 5.4 Efficiency
  contents:
  - "5.4 Efficiency\n   The vouchers may be stored in a smart card or PDA with a restricted\n\
    \   amount of memory.  Large definitions may incur long transfer and\n   processing\
    \ times, which may not be acceptable.  The language SHOULD\n   enable the efficient\
    \ definition of vouchers\n"
- title: 5.5 Coordination
  contents:
  - "5.5 Coordination\n   The language specification SHOULD be consistent with the\
    \ following\n   specifications:\n      (1)  Internet Open Trading Protocol v1.0\
    \ [IOTP]\n      (2)  XML-Signature [XMLDSIG]\n      (3)  Extensible Markup Language\
    \ (XML) Recommendation [XML]\n      (4)  ECML Version 2 [ECML]\n"
- title: 5.6 Example of GVL
  contents:
  - "5.6 Example of GVL\n   An example of a voucher definition in GVL is described\
    \ below.  This\n   example defines a five dollar discount coupon for specific\n\
    \   merchandise, a book with ISBN number 0071355014.  This coupon is\n   circulated\
    \ using a VTS called \"Voucher Exchanger\".  To claim this\n   offer, one coupon\
    \ must be spent.  The coupon is valid from April 1st\n   in 2001 to March 31st\
    \ in 2002.\n   <?xml version=\"1.0\"?>\n   <Voucher xmlns=\"urn:ietf:params:xml:schema:vts-lang\"\
    \n            xmlns:vts=\"http://www.example.com/vts\">\n     <Title>IOTP Book\
    \ Coupon</Title>\n     <Description>$5 off IOTP Book</Description>\n     <Provider\
    \ name=\"Voucher Exchanger\">\n       <vts:Version>VE2.31</vts:Version>\n    \
    \ </Provider>\n     <Value type=\"discount\" spend=\"1\">\n       <Fixed amount=\"\
    5\" currency=\"USD\"/>\n     </Value>\n     <Merchandise>\n       <bk:Book xmlns:bk=\"\
    http://www.example.com/bk\"\n                bk:isbn=\"0071355014\"/>\n     </Merchandise>\n\
    \     <ValidPeriod start=\"2001-04-01\" end=\"2002-03-31\"/>\n   </Voucher>\n"
- title: 6. Application Scenarios
  contents:
  - "6. Application Scenarios\n   This section describes, as a typical electronic\
    \ commerce example\n   involving advertisement, payment, and delivery transactions,\
    \ the use\n   of vouchers and VTS, and shows that vouchers can be used as an\n\
    \   effective way to coordinate autonomous services that have not yet\n   established\
    \ trust among each other.\n   Figure 2 shows a typical electronic commerce example\
    \ of a consumer\n   searching for goods or services and making a purchase:\n \
    \                                                     ----------\n         ------------------------------------------->|\
    \ Ad       |\n        |      (1) Acquire a coupon                  | Agency  \
    \ |\n        |                                             ----------\n      \
    \  |\n        |      (2) Send payment information           ----------\n     \
    \   |    --------------------------------------->| Payment  |\n        |   | \
    \     Acquire a gift certificate        | Handler  |\n        |   |          \
    \                               ----------\n        v   v  (3) Transfer the coupon\
    \ &\n    ----------     gift certificate                   ----------\n   | Consumer\
    \ |<------------------------------------>| Merchant |\n    ----------     Acquire\
    \ an exchange ticket &       ----------\n        ^          loyalty points\n \
    \       |\n        |      (4) Transfer the exchange ticket       ----------\n\
    \         ------------------------------------------->| Deliverer|\n         \
    \          Supply goods or services          | Handler  |\n                  \
    \                                    ----------\n                Figure 2.  Application\
    \ example of vouchers\n   (1) Use a search engine to find the desired goods or\
    \ services and\n       acquire a coupon from an ad agency that represents the\
    \ right to\n       purchase the goods or services at a discounted price.\n   (2)\
    \ Acquire a gift certificate from a payment handler in exchange for\n       cash\
    \ or payment information.\n   (3) Transfer the coupon and gift certificate to\
    \ the merchant, and in\n       exchange acquire an exchange ticket and loyalty\
    \ points.\n   (4) Transfer the exchange ticket to the deliverer handler and receive\n\
    \       the goods or services.\n   In this example, the coupon, gift certificate,\
    \ and exchange ticket\n   each represent the media that yields the above four\
    \ transactions.\n   Note that it is not necessary to trust the participants involved\
    \ in\n   the transactions, but to trust the vouchers themselves.  In other\n \
    \  words, there is no need to exchange contracts among the participants\n   beforehand\
    \ if the vouchers themselves are trusted.\n   Take the exchange ticket as an example;\
    \ even if the delivery handler\n   does not trust the consumer, the merchant that\
    \ issued the exchange\n   ticket is trusted, and if the VTS guarantees that there\
    \ is no\n   duplication in the trading process of the exchange ticket, there is\n\
    \   no problem in swapping the exchange ticket for the goods or services.\n  \
    \ In the same way, even if the merchant does not trust the delivery\n   handler,\
    \ the issuance of the exchange ticket can be verified, and if\n   the VTS guarantees\
    \ that there is no duplication in the trading\n   process of the exchange ticket,\
    \ there is no problem in swapping the\n   exchange ticket for the goods or services\
    \ (Fig. 3).  In other words,\n   if there is trust in the issuer and the VTS,\
    \ trust among the\n   participants involved in the transactions is not required.\n\
    \                      Exchange             Exchange\n          ----------  ticket\
    \   ----------  ticket   ----------\n         | Consumer |-------->| Delivery\
    \ |-------->| Merchant |\n         |          |<--------| Handler  |<--------|\
    \          |\n          ----------  Goods or ----------  Goods or ----------\n\
    \                      services             services\n           Figure 3. Coordination\
    \ of untrusted participants\n                              using exchange ticket\n\
    \   In general, it is more difficult to trust individuals than companies,\n  \
    \ so this characteristic of VTS is especially important.\n   Moreover, the transactions\
    \ involving vouchers have desirable features\n   with respect to privacy protection.\
    \  For example, in the above\n   exchange ticket scenario, the consumer can designate\
    \ the delivery\n   service for himself, so the merchant does not even need to\
    \ know any\n   personal information such as the delivery address.  Furthermore,\
    \ by\n   designating a convenience store etc. as the receiving point, the\n  \
    \ delivery service does not need to know the address of the consumer.\n"
- title: 7. Q & A
  contents:
  - "7. Q & A\n   - Is it possible to implement a VTS using digital certificates?\n\
    \      If transferability is not required, a voucher can be easily\n      implemented\
    \ as a digital certificate, i.e., Signed_I(I, P, H),\n      where the phrase \"\
    Signed_I\" means that the entire block is signed\n      by the issuer's digital\
    \ signature.  If transferability is\n      required, then H is changed during\
    \ the transfer, i.e., the\n      signature is broken. Additionally, online data\
    \ base checking or\n      tamper-resistant devices are required to prevent duplicate-\n\
    \      redemption.\n   - What is the difference from digital-cash?\n      VTS\
    \ must handle various types of vouchers, such as gift\n      certificates, coupons,\
    \ or loyalty points unlike a digital cash\n      system which handles only currency.\
    \  Additionally, vouchers are\n      issued by different issuers.\n   - Is it\
    \ possible to support \"digital property rights?\n      Digital property rights\
    \ can be represented as a voucher and can be\n      traded using VTS.  However,\
    \ some protected rendering system would\n      be required to regenerate the digital\
    \ contents securely in order\n      to support digital property rights.  These\
    \ requirements are out of\n      scope of VTS.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   Security issues are discussed in Section 3.2 and\
    \ 5.3.\n"
- title: 9. Acknowledgments
  contents:
  - "9. Acknowledgments\n   I would like to thank Masayuki Terada and Perry E. Metzger,\
    \ for their\n   valuable comments.\n"
- title: 10. References
  contents:
  - "10. References\n   [ECML]    ECML Version 2, Work in Progress.\n   [F99]    \
    \ K. Fujimura, H. Kuno, M. Terada, K. Matsuyama, Y. Mizuno,\n             and\
    \ J.  Sekine, \"Digital-Ticket-Controlled Digital Ticket\n             Circulation\"\
    , 8th USENIX Security Symposium, August 1999.\n   [RFC2119] Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n             Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [IOTP]    Burdett, D., \"The Internet Open Trading\
    \ Protocol\", RFC\n             2801, April 2000.\n   [MF99]    K. Matsuyama and\
    \ K. Fujimura, \"Distributed Digital-Ticket\n             Management for Rights\
    \ Trading System\", 1st ACM Conferences\n             on Electronic Commerce,\
    \ November 1999.\n   [T00]     M. Terada, H. Kuno, M. Hanadate, and K. Fujimura,\
    \ \"Copy\n             Prevention Scheme for Rights Trading Infrastructure\",\
    \ 4th\n             Smart Card Research and Advanced Application Conference\n\
    \             (CARDIS 2000), September 2000.\n   [XML]     \"Extensible Mark Up\
    \ Language (XML) 1.0 (Second Edition)\", A\n             W3C Recommendation, <http://www.w3.org/TR/REC-xml>,\
    \ October\n             2000.\n   [XMLDSIG] \"XML-Signature Syntax and Processing\"\
    , A W3C Proposed\n             Recommendation, <http://www.w3.org/TR/xmldsig-core>,\
    \ August\n             2001.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Ko Fujimura\n   NTT Corporation\n   1-1 Hikari-no-oka\n\
    \   Yokosuka-shi\n   Kanagawa, 239-0847 JAPAN\n   Phone: +81-(0)468-59-3814\n\
    \   Fax:   +81-(0)468-59-8329\n   EMail: fujimura@isl.ntt.co.jp\n   Donald E.\
    \ Eastlake 3rd\n   Motorola\n   155 Beaver Street\n   Milford, MA 01757 USA\n\
    \   Phone:  +1-508-851-8280\n   EMail:  Donald.Eastlake@motorola.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
