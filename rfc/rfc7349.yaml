- title: __initial_text__
  contents:
  - '                 LDP Hello Cryptographic Authentication

    '
- title: Abstract
  contents:
  - "Abstract\n   This document introduces a new optional Cryptographic Authentication\n\
    \   TLV that LDP can use to secure its Hello messages.  It secures the\n   Hello\
    \ messages against spoofing attacks and some well-known attacks\n   against the\
    \ IP header.  This document describes a mechanism to secure\n   the LDP Hello\
    \ messages using Hashed Message Authentication Code\n   (HMAC) with the National\
    \ Institute of Standards and Technology (NIST)\n   Secure Hash Standard family\
    \ of algorithms.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7349.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Cryptographic Authentication TLV  . . . . . . . . . . .\
    \ . . .   4\n     2.1.  Optional Parameter for Hello Message  . . . . . . . .\
    \ . .   4\n     2.2.  LDP Security Association  . . . . . . . . . . . . . . .\
    \ .   4\n     2.3.  Cryptographic Authentication TLV Encoding . . . . . . . .\
    \   6\n     2.4.  Sequence Number Wrap  . . . . . . . . . . . . . . . . . .  \
    \ 7\n   3.  Cryptographic Authentication Procedure  . . . . . . . . . . .   8\n\
    \   4.  Cross-Protocol Attack Mitigation  . . . . . . . . . . . . . .   8\n  \
    \ 5.  Cryptographic Aspects . . . . . . . . . . . . . . . . . . . .   8\n    \
    \ 5.1.  Preparing the Cryptographic Key . . . . . . . . . . . . .   9\n     5.2.\
    \  Computing the Hash  . . . . . . . . . . . . . . . . . . .   9\n     5.3.  Result\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n   6.  Processing Hello\
    \ Message Using Cryptographic Authentication .  10\n     6.1.  Transmission Using\
    \ Cryptographic Authentication . . . . .  10\n     6.2.  Receipt Using Cryptographic\
    \ Authentication  . . . . . . .  10\n   7.  Operational Considerations  . . .\
    \ . . . . . . . . . . . . . .  11\n   8.  Security Considerations . . . . . .\
    \ . . . . . . . . . . . . .  12\n   9.  IANA Considerations . . . . . . . . .\
    \ . . . . . . . . . . . .  13\n   10. Acknowledgements  . . . . . . . . . . .\
    \ . . . . . . . . . . .  13\n   11. References  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  13\n     11.1.  Normative References . . . . . . . . .\
    \ . . . . . . . . .  13\n     11.2.  Informative References . . . . . . . . .\
    \ . . . . . . . .  14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Label Distribution Protocol (LDP) [RFC5036] sets up\
    \ LDP sessions\n   that run between LDP peers.  The peers could either be directly\n\
    \   connected at the link level or be multiple hops away.  An LDP Label\n   Switching\
    \ Router (LSR) could either be configured with the identity\n   of its peers or\
    \ could discover them using LDP Hello messages.  These\n   messages are sent encapsulated\
    \ in UDP addressed to \"all routers on\n   this subnet\" or to a specific IP address.\
    \  Periodic Hello messages\n   are also used to maintain the relationship between\
    \ LDP peers\n   necessary to keep the LDP session active.\n   Since the Hello\
    \ messages are sent using UDP and not TCP, these\n   messages cannot use the security\
    \ mechanisms defined for TCP\n   [RFC5926].  While some configuration guidance\
    \ is given in [RFC5036]\n   to help protect against false discovery messages,\
    \ it does not provide\n   an explicit security mechanism to protect the Hello\
    \ messages.\n   Spoofing a Hello message for an existing adjacency can cause the\n\
    \   valid adjacency to time out and in turn can result in termination of\n   the\
    \ associated session.  This can occur when the spoofed Hello\n   specifies a smaller\
    \ Hold Time, causing the receiver to expect Hellos\n   within this smaller interval,\
    \ while the true neighbor continues\n   sending Hellos at the previously agreed\
    \ lower frequency.  Spoofing a\n   Hello message can also cause the LDP session\
    \ to be terminated\n   directly, which can occur when the spoofed Hello specifies\
    \ a\n   different Transport Address, other than the previously agreed one\n  \
    \ between neighbors.  Spoofed Hello messages have been observed and\n   reported\
    \ as a real problem in production networks [RFC6952].\n   For Link Hello, [RFC5036]\
    \ states that the threat of spoofed Hellos\n   can be reduced by accepting Hellos\
    \ only on interfaces to which LSRs\n   that can be trusted are directly connected\
    \ and ignoring Hellos not\n   addressed to the \"all routers on this subnet\"\
    \ multicast group.  The\n   Generalized TTL Security Mechanism (GTSM) provides\
    \ a simple and\n   reasonably robust defense mechanism for Link Hello [RFC6720],\
    \ but it\n   does not secure against packet spoofing attacks or replay attacks\n\
    \   [RFC5082].\n   Spoofing attacks via Targeted Hellos are a potentially more\
    \ serious\n   threat.  [RFC5036] states that an LSR can reduce the threat of\n\
    \   spoofed Targeted Hellos by filtering them and accepting only those\n   originating\
    \ at sources permitted by an access list.  However,\n   filtering using access\
    \ lists requires LSR resources and does not\n   prevent IP-address spoofing.\n\
    \   This document introduces a new Cryptographic Authentication TLV that\n   is\
    \ used in LDP Hello messages as an optional parameter.  It enhances\n   the authentication\
    \ mechanism for LDP by securing the Hello message\n   against spoofing attacks.\
    \  It also introduces a cryptographic\n   sequence number carried in the Hello\
    \ messages that can be used to\n   protect against replay attacks.\n   Using this\
    \ Cryptographic Authentication TLV, one or more secret keys\n   (with corresponding\
    \ Security Association (SA) IDs) are configured in\n   each system.  For each\
    \ LDP Hello message, the key is used to generate\n   and verify an HMAC Hash that\
    \ is stored in the LDP Hello message.  For\n   the cryptographic hash function,\
    \ this document proposes to use SHA-1,\n   SHA-256, SHA-384, and SHA-512 defined\
    \ in US NIST Secure Hash Standard\n   (SHS) [FIPS-180-4].  The HMAC authentication\
    \ mode defined in\n   [RFC2104] is used.  Of the above, implementations MUST include\n\
    \   support for at least HMAC-SHA-256, SHOULD include support for HMAC-\n   SHA-1,\
    \ and MAY include support for HMAC-SHA-384 and HMAC-SHA-512.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Cryptographic Authentication TLV
  contents:
  - '2.  Cryptographic Authentication TLV

    '
- title: 2.1.  Optional Parameter for Hello Message
  contents:
  - "2.1.  Optional Parameter for Hello Message\n   [RFC5036] defines the encoding\
    \ for the Hello message.  Each Hello\n   message contains zero or more Optional\
    \ Parameters, each encoded as a\n   TLV.  Three Optional Parameters are defined\
    \ by [RFC5036].  This\n   document defines a new Optional Parameter: the Cryptographic\n\
    \   Authentication parameter.\n   Optional Parameter                Type\n   --------------------------------\
    \  --------\n   IPv4 Transport Address            0x0401 (RFC 5036)\n   Configuration\
    \ Sequence Number     0x0402 (RFC 5036)\n   IPv6 Transport Address           \
    \ 0x0403 (RFC 5036)\n   Cryptographic Authentication TLV  0x0405 (this document)\n\
    \   The encoding for the Cryptographic Authentication TLV is described in\n  \
    \ Section 2.3.\n"
- title: 2.2.  LDP Security Association
  contents:
  - "2.2.  LDP Security Association\n   An LDP Security Association (SA) contains\
    \ a set of parameters shared\n   between any two legitimate LDP speakers.\n  \
    \ Parameters associated with an LDP SA are as follows:\n   o  Security Association\
    \ Identifier (SA ID)\n      This is a 32-bit unsigned integer used to uniquely\
    \ identify an LDP\n      SA between two LDP peers, as manually configured by the\
    \ network\n      operator (or, possibly by some key management protocol specified\n\
    \      by the IETF in the future).\n      The receiver determines the active SA\
    \ by looking at the SA ID\n      field in the incoming Hello message.\n      The\
    \ sender, based on the active configuration, selects an SA to\n      use and puts\
    \ the correct SA ID value associated with the SA in the\n      LDP Hello message.\
    \  If multiple valid and active LDP SAs exist for\n      a given interface, the\
    \ sender may use any of those SAs to protect\n      the packet.\n      Using SA\
    \ IDs makes changing keys while maintaining protocol\n      operation convenient.\
    \  Each SA ID specifies two independent parts,\n      the authentication algorithm\
    \ and the authentication key, as\n      explained below.\n      Normally, an implementation\
    \ would allow the network operator to\n      configure a set of keys in a key\
    \ chain, with each key in the chain\n      having a fixed lifetime.  The actual\
    \ operation of these mechanisms\n      is outside the scope of this document.\n\
    \      Note that each SA ID can indicate a key with a different\n      authentication\
    \ algorithm.  This allows the introduction of new\n      authentication mechanisms\
    \ without disrupting existing LDP\n      sessions.\n   o  Authentication Algorithm\n\
    \      This signifies the authentication algorithm to be used with the\n     \
    \ LDP SA.  This information is never sent in clear text over the\n      wire.\
    \  Because this information is not sent on the wire, the\n      implementer chooses\
    \ an implementation-specific representation for\n      this information.\n   \
    \   Currently, the following algorithms are supported:\n      HMAC-SHA-1, HMAC-SHA-256,\
    \ HMAC-SHA-384, and HMAC-SHA-512.\n   o  Authentication Key\n      This value\
    \ denotes the cryptographic authentication key associated\n      with the LDP\
    \ SA.  The length of this key is variable and depends\n      upon the authentication\
    \ algorithm specified by the LDP SA.\n   o  KeyStartAccept\n      The time that\
    \ this LDP router will accept packets that have been\n      created with this\
    \ LDP Security Association.\n   o  KeyStartGenerate\n      The time that this\
    \ LDP router will begin using this LDP Security\n      Association for LDP Hello\
    \ message generation.\n   o  KeyStopGenerate\n      The time that this LDP router\
    \ will stop using this LDP Security\n      Association for LDP Hello message generation.\n\
    \   o  KeyStopAccept\n      The time that this LDP router will stop accepting\
    \ packets\n      generated with this LDP Security Association.\n   In order to\
    \ achieve smooth key transition, KeyStartAccept SHOULD be\n   less than KeyStartGenerate,\
    \ and KeyStopGenerate SHOULD be less than\n   KeyStopAccept.  If KeyStartGenerate\
    \ or KeyStartAccept are left\n   unspecified, the time will default to 0, and\
    \ the key will be used\n   immediately.  If KeyStopGenerate or KeyStopAccept are\
    \ left\n   unspecified, the time will default to infinity, and the key's\n   lifetime\
    \ will be infinite.  When a new key replaces an old, the\n   KeyStartGenerate\
    \ time for the new key MUST be less than or equal to\n   the KeyStopGenerate time\
    \ of the old key.  Any unspecified values are\n   encoded as zero.\n   Key storage\
    \ SHOULD persist across a system restart, warm or cold, to\n   avoid operational\
    \ issues.  In the event that the last key associated\n   with an interface expires,\
    \ it is unacceptable to revert to an\n   unauthenticated condition and not advisable\
    \ to disrupt routing.\n   Therefore, the router SHOULD send a \"last Authentication\
    \ Key\n   expiration\" notification to the network manager and treat the key as\n\
    \   having an infinite lifetime until the lifetime is extended, the key\n   is\
    \ deleted by network management, or a new key is configured.\n"
- title: 2.3.  Cryptographic Authentication TLV Encoding
  contents:
  - "2.3.  Cryptographic Authentication TLV Encoding\n     0                   1 \
    \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |0|0|        Auth (0x0405)      |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Security Association ID                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Cryptographic Sequence Number (High-Order 32 Bits)      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |       Cryptographic Sequence Number (Low-Order 32 Bits)       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                Authentication Data (Variable)                 |\n    ~     \
    \                                                          ~\n    |          \
    \                                                     |\n    |               \
    \                                                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   o  Type: 0x0405, Cryptographic Authentication\n   o  Length: The length in\
    \ octets of the value field, including the\n      Security Association ID and\
    \ Cryptographic Sequence Number fields.\n   o  Security Association ID: The 32-bit\
    \ field that maps to the\n      authentication algorithm and the secret key used\
    \ to create the\n      message digest carried in LDP payload.\n      Though the\
    \ SA ID implies the algorithm, the HMAC output size\n      should not be used\
    \ by implementers as an implicit hint because\n      additional algorithms may\
    \ be defined in the future that have the\n      same output size.\n   o  Cryptographic\
    \ Sequence Number: The 64-bit, strictly increasing\n      sequence number that\
    \ is used to guard against replay attacks.  The\n      64-bit sequence number\
    \ MUST be incremented for every LDP Hello\n      message sent by the LDP router.\
    \  Upon reception, the sequence\n      number MUST be greater than the sequence\
    \ number in the last LDP\n      Hello message accepted from the sending LDP neighbor.\
    \  Otherwise,\n      the LDP message is considered a replayed packet and is dropped.\n\
    \      The Cryptographic Sequence Number is a single space per LDP\n      router.\n\
    \      LDP routers implementing this specification MUST use existing\n      mechanisms\
    \ to preserve the sequence number's strictly increasing\n      property for the\
    \ deployed life of the LDP router (including cold\n      restarts).  One mechanism\
    \ for accomplishing this could be to use\n      the high-order 32 bits of the\
    \ sequence number as a boot count that\n      is incremented anytime the LDP router\
    \ loses its sequence number\n      state.  Techniques such as sequence number\
    \ space partitioning\n      described above or non-volatile storage preservation\
    \ can be used\n      but are beyond the scope of this specification.  Sequence\
    \ number\n      wrap is described in Section 2.4.\n   o  Authentication Data:\
    \ This field carries the digest computed by the\n      Cryptographic Authentication\
    \ algorithm in use.  The length of the\n      Authentication Data varies based\
    \ on the cryptographic algorithm in\n      use, which is shown below:\n      Auth\
    \ type        Length\n      ---------------  ----------\n      HMAC-SHA1     \
    \   20 bytes\n      HMAC-SHA-256     32 bytes\n      HMAC-SHA-384     48 bytes\n\
    \      HMAC-SHA-512     64 bytes\n"
- title: 2.4.  Sequence Number Wrap
  contents:
  - "2.4.  Sequence Number Wrap\n   When incrementing the sequence number for each\
    \ transmitted LDP\n   message, the sequence number should be treated as an unsigned\
    \ 64-bit\n   value.  If the lower-order 32-bit value wraps, the higher-order\n\
    \   32-bit value should be incremented and saved in non-volatile storage.\n  \
    \ If the LDP router is deployed long enough that the 64-bit sequence\n   number\
    \ wraps, all keys, independent of the key distribution\n   mechanism, MUST be\
    \ reset.  This is done to avoid the possibility of\n   replay attacks.  Once the\
    \ keys have been changed, the higher-order\n   sequence number can be reset to\
    \ 0 and saved to non-volatile storage.\n"
- title: 3.  Cryptographic Authentication Procedure
  contents:
  - "3.  Cryptographic Authentication Procedure\n   As noted earlier, the Security\
    \ Association ID maps to the\n   authentication algorithm and the secret key used\
    \ to generate and\n   verify the message digest.  This specification discusses\
    \ the\n   computation of LDP Cryptographic Authentication data when any of the\n\
    \   NIST SHS family of algorithms is used in the Hashed Message\n   Authentication\
    \ Code (HMAC) mode.\n   The currently valid algorithms (including mode) for LDP\
    \ Cryptographic\n   Authentication include:\n   HMAC-SHA-1, HMAC-SHA-256, HMAC-SHA-384,\
    \ and HMAC-SHA-512\n   Of the above, implementations of this specification MUST\
    \ include\n   support for at least HMAC-SHA-256, SHOULD include support for HMAC-\n\
    \   SHA-1, and MAY also include support for HMAC-SHA-384 and HMAC-SHA-\n   512.\n\
    \   Implementations of this standard MUST use HMAC-SHA-256 as the default\n  \
    \ authentication algorithm.\n"
- title: 4.  Cross-Protocol Attack Mitigation
  contents:
  - "4.  Cross-Protocol Attack Mitigation\n   In order to prevent cross-protocol replay\
    \ attacks for protocols\n   sharing common keys, the 2-octet LDP Cryptographic\
    \ Protocol ID is\n   appended to the authentication key prior to use (refer to\
    \ Section 8).\n   Other protocols using the common key similarly append their\
    \ own\n   Cryptographic Protocol IDs to their keys prior to use, thus ensuring\n\
    \   that a different key value is used for each protocol.\n"
- title: 5.  Cryptographic Aspects
  contents:
  - "5.  Cryptographic Aspects\n   In the algorithm description below, the following\
    \ nomenclature is\n   used:\n   o  H is the specific hashing algorithm (e.g.,\
    \ SHA-256).\n   o  K is the Authentication Key from the LDP Security Association.\n\
    \   o  Ks is a Protocol-Specific Authentication Key obtained by appending\n  \
    \    Authentication Key (K) with the 2-octet LDP Cryptographic Protocol\n    \
    \  ID.\n   o  Ko is the cryptographic key used with the hash algorithm.\n   o\
    \  L is the length of the hash, measured in octets rather than bits.\n   o  AuthTag\
    \ is a value that is the same length as the hash output.  In\n      the case of\
    \ IPv4, the first 4 octets contain the IPv4 source\n      address followed by\
    \ the hexadecimal value 0x878FE1F3 repeated\n      (L-4)/4 times.  In the case\
    \ of IPv6, the first 16 octets contain\n      the IPv6 source address followed\
    \ by the hexadecimal value\n      0x878FE1F3 repeated (L-16)/4 times.  This implies\
    \ that hash output\n      is always a length of at least 16 octets.\n"
- title: 5.1.  Preparing the Cryptographic Key
  contents:
  - "5.1.  Preparing the Cryptographic Key\n   The LDP Cryptographic Protocol ID is\
    \ appended to the Authentication\n   Key (K) yielding a Protocol-Specific Authentication\
    \ Key (Ks).  In\n   this application, Ko is always L octets long.  Keys that are\
    \ longer\n   than the bit length of the hash function are hashed to force them\
    \ to\n   this length, as we describe below.  Ks is computed as follows.\n   If\
    \ the Protocol-Specific Authentication Key (Ks) is L octets long,\n   then Ko\
    \ is equal to Ks.  If the Protocol-Specific Authentication Key\n   (Ks) is more\
    \ than L octets long, then Ko is set to H(Ks).  If the\n   Protocol-Specific Authentication\
    \ Key (Ks) is less than L octets long,\n   then Ko is set to the Protocol-Specific\
    \ Authentication Key (Ks) with\n   zeros appended to the end of the Protocol-Specific\
    \ Authentication Key\n   (Ks) such that Ko is L octets long.\n   For higher entropy,\
    \ it is RECOMMENDED that Key Ks should be at least\n   L octets long.\n"
- title: 5.2.  Computing the Hash
  contents:
  - "5.2.  Computing the Hash\n   First, the Authentication Data field in the Cryptographic\n\
    \   Authentication TLV is filled with the value AuthTag.  Then, to\n   compute\
    \ HMAC over the Hello message it performs:\n   AuthData = HMAC(Ko, Hello Message)\n\
    \   Hello Message refers to the LDP Hello message excluding the IP and\n   the\
    \ UDP headers.\n"
- title: 5.3.  Result
  contents:
  - "5.3.  Result\n   The resultant Hash becomes the Authentication Data that is sent\
    \ in\n   the Authentication Data field of the Cryptographic Authentication\n \
    \  TLV.  The length of the Authentication Data field is always identical\n   to\
    \ the message digest size of the specific hash function H that is\n   being used.\n\
    \   This also means that the use of hash functions with larger output\n   sizes\
    \ will also increase the size of the LDP message as transmitted\n   on the wire.\n"
- title: 6.  Processing Hello Message Using Cryptographic Authentication
  contents:
  - '6.  Processing Hello Message Using Cryptographic Authentication

    '
- title: 6.1.  Transmission Using Cryptographic Authentication
  contents:
  - "6.1.  Transmission Using Cryptographic Authentication\n   Prior to transmitting\
    \ the LDP Hello message, the Length in the\n   Cryptographic Authentication TLV\
    \ header is set as per the\n   authentication algorithm that is being used.  It\
    \ is set to 24 for\n   HMAC-SHA-1, 36 for HMAC-SHA-256, 52 for HMAC-SHA-384, and\
    \ 68 for\n   HMAC-SHA-512.\n   The Security Association ID field is set to the\
    \ ID of the current\n   authentication key.  The HMAC Hash is computed as explained\
    \ in\n   Section 5.  The resulting Hash is stored in the Authentication Data\n\
    \   field prior to transmission.  The authentication key MUST NOT be\n   carried\
    \ in the packet.\n"
- title: 6.2.  Receipt Using Cryptographic Authentication
  contents:
  - "6.2.  Receipt Using Cryptographic Authentication\n   The receiving LSR applies\
    \ acceptability criteria for received Hellos\n   using cryptographic authentication.\
    \  If the Cryptographic\n   Authentication TLV is unknown to the receiving LSR,\
    \ the received\n   packet MUST be discarded according to Section 3.5.1.2.2 of\
    \ [RFC5036].\n   The receiving router MUST determine whether or not to accept\
    \ a Hello\n   message from a particular source IP address as follows.  First,\
    \ if\n   the router has, for that source IP address, a stored LDP Hello\n   cryptographic\
    \ sequence number or is configured to require LDP Hello\n   authentication, then\
    \ the router MUST discard any unauthenticated\n   Hello packets.  As specified\
    \ later in this section, a cryptographic\n   sequence number is only stored for\
    \ a source IP address as a result of\n   receiving a valid authenticated Hello.\n\
    \   The receiving LSR locates the LDP SA using the Security Association\n   ID\
    \ field carried in the message.  If the SA is not found or if the SA\n   is not\
    \ valid for reception (i.e., current time < KeyStartAccept or\n   current time\
    \ >= KeyStopAccept), the LDP Hello message MUST be\n   discarded, and an error\
    \ event SHOULD be logged.\n   If the cryptographic sequence number in the LDP\
    \ Hello message is less\n   than or equal to the last sequence number received\
    \ from the same\n   neighbor, the LDP Hello message MUST be discarded, and an\
    \ error event\n   SHOULD be logged.\n   Before the receiving LSR performs any\
    \ processing, it needs to save\n   the values of the Authentication Data field.\
    \  The receiving LSR then\n   replaces the contents of the Authentication Data\
    \ field with AuthTag\n   and computes the Hash using the authentication key specified\
    \ by the\n   received Security Association ID field, as explained in Section 3.\n\
    \   If the locally computed Hash is equal to the received value of the\n   Authentication\
    \ Data field, the received packet is accepted for other\n   normal checks and\
    \ processing as described in [RFC5036].  Otherwise,\n   if the locally computed\
    \ Hash is not equal to the received value of\n   the Authentication Data field,\
    \ the received LDP Hello message MUST be\n   discarded, and an error event SHOULD\
    \ be logged.  The aforesaid\n   logging needs to be carefully rate limited, because\
    \ while a LDP\n   router is under attack by a storm of spoofed Hellos, the resources\n\
    \   required for logging could be overwhelming.\n   After the LDP Hello message\
    \ has been successfully authenticated,\n   implementations MUST store the 64-bit\
    \ cryptographic sequence number\n   for the LDP Hello message received from the\
    \ source IP address.  The\n   saved cryptographic sequence numbers will be used\
    \ for replay checking\n   for subsequent packets received from the source IP address.\n"
- title: 7.  Operational Considerations
  contents:
  - "7.  Operational Considerations\n   Careful consideration must be given to when\
    \ and how to enable and\n   disable authentication on LDP Hellos.  On the one\
    \ hand, it is\n   critical that an attack cannot cause the authentication to be\n\
    \   disabled.  On the other hand, it is equally important that an\n   operator\
    \ can change the hardware and/or software associated with a\n   neighbor's IP\
    \ address and successfully bring up an LDP adjacency with\n   the desired level\
    \ of authentication, which may be with different or\n   no authentication due\
    \ to software restrictions.\n   LDP Hello authentication information (e.g., whether\
    \ authentication is\n   enabled and what the last cryptographic sequence number\
    \ is)\n   associated with an IP address is learned via a set of interfaces.  If\n\
    \   an interface is administratively disabled, the LDP Hello\n   authentication\
    \ information learned via that interface MAY be\n   forgotten.  This enables an\
    \ operator that is not specifically\n   manipulating LDP Hello authentication\
    \ configurations to easily bring\n   up an LDP adjacency.  An implementation of\
    \ this standard SHOULD\n   provide a configuration mechanism by which the LDP\
    \ Hello\n   authentication information associated with an IP address can be shown\n\
    \   and can be forgotten; configuration mechanisms are assumed to be\n   accessed\
    \ via an authenticated channel.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Section 1 of this document describes the security\
    \ issues arising from\n   the use of unauthenticated LDP Hello messages.  In order\
    \ to address\n   those issues, it is RECOMMENDED that all deployments use the\n\
    \   Cryptographic Authentication TLV to authenticate the Hello messages.\n   The\
    \ quality of the security provided by the Cryptographic\n   Authentication TLV\
    \ depends completely on the strength of the\n   cryptographic algorithm in use,\
    \ the strength of the key being used,\n   and the correct implementation of the\
    \ security mechanism in\n   communicating LDP implementations.  Also, the level\
    \ of security\n   provided by the Cryptographic Authentication TLV varies based\
    \ on the\n   authentication type used.\n   It should be noted that the authentication\
    \ method described in this\n   document is not being used to authenticate the\
    \ specific originator of\n   a packet but is rather being used to confirm that\
    \ the packet has\n   indeed been issued by a router that has access to the authentication\n\
    \   key.\n   Deployments SHOULD use sufficiently long and random values for the\n\
    \   authentication key so that guessing and other cryptographic attacks\n   on\
    \ the key are not feasible in their environments.  In support of\n   these recommendations,\
    \ management systems SHOULD support hexadecimal\n   input of authentication keys.\n\
    \   The mechanism described herein is not perfect.  However, this\n   mechanism\
    \ introduces a significant increase in the effort required\n   for an adversary\
    \ to successfully attack the LDP Hello protocol while\n   not causing undue implementation,\
    \ deployment, or operational\n   complexity.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The IANA has assigned a new TLV from the \"Label\
    \ Distribution Protocol\n   (LDP) Parameters\" registry, \"TLV Type Name Space\"\
    .\n   Value   Description                       Reference\n   ------  --------------------------------\
    \  ---------------------------\n   0x0405  Cryptographic Authentication TLV  this\
    \ document (Section 2.3)\n   The IANA has also assigned a value from the \"Authentication\n\
    \   Cryptographic Protocol ID\" registry under the \"Keying and\n   Authentication\
    \ for Routing Protocols (KARP) Parameters\" category.\n   Value   Description\
    \                       Reference\n   -----   --------------------------------\
    \  -------------------------\n     2     LDP Cryptographic Protocol ID     this\
    \ document (Section 4)\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   We are indebted to Yaron Sheffer who helped us enormously\
    \ in\n   rewriting the document to get rid of the redundant crypto mathematics\n\
    \   that we had added here.\n   We would also like to thank Liu Xuehu for his\
    \ work on background and\n   motivation for LDP Hello authentication.  Last but\
    \ not least, we\n   would also thank Adrian Farrel, Eric Rosen, Sam Hartman, Stephen\n\
    \   Farrell, Eric Gray, Kamran Raza, and Acee Lindem for their valuable\n   comments.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [FIPS-180-4]\n              National Institute\
    \ of Standards and Technology (NIST),\n              \"Secure Hash Standard (SHS)\"\
    , FIPS 180-4, March 2012.\n   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC: Keyed-\n              Hashing for Message Authentication\", RFC 2104,\
    \ February\n              1997.\n   [RFC2119]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5036]  Andersson, L., Minei, I., and B. Thomas, \"LDP\n      \
    \        Specification\", RFC 5036, October 2007.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC5082]  Gill, V., Heasley, J., Meyer, D.,\
    \ Savola, P., and C.\n              Pignataro, \"The Generalized TTL Security\
    \ Mechanism\n              (GTSM)\", RFC 5082, October 2007.\n   [RFC5926]  Lebovitz,\
    \ G. and E. Rescorla, \"Cryptographic Algorithms\n              for the TCP Authentication\
    \ Option (TCP-AO)\", RFC 5926,\n              June 2010.\n   [RFC6720]  Pignataro,\
    \ C. and R. Asati, \"The Generalized TTL Security\n              Mechanism (GTSM)\
    \ for the Label Distribution Protocol\n              (LDP)\", RFC 6720, August\
    \ 2012.\n   [RFC6952]  Jethanandani, M., Patel, K., and L. Zheng, \"Analysis of\n\
    \              BGP, LDP, PCEP, and MSDP Issues According to the Keying\n     \
    \         and Authentication for Routing Protocols (KARP) Design\n           \
    \   Guide\", RFC 6952, May 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Lianshu Zheng\n   Huawei Technologies\n   China\n   EMail:\
    \ vero.zheng@huawei.com\n   Mach(Guoyi) Chen\n   Huawei Technologies\n   China\n\
    \   EMail: mach.chen@huawei.com\n   Manav Bhatia\n   Ionos Networks\n   India\n\
    \   EMail: manav@ionosnetworks.com\n"
