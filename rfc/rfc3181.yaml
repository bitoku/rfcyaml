- title: __initial_text__
  contents:
  - '              Signaled Preemption Priority Policy Element

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a preemption priority policy element for\
    \ use\n   by signaled policy based admission protocols (such as the Resource\n\
    \   ReSerVation Protocol (RSVP) and Common Open Policy Service (COPS).\n   Preemption\
    \ priority defines a relative importance (rank) within the\n   set of flows competing\
    \ to be admitted into the network. Rather than\n   admitting flows by order of\
    \ arrival (First Come First Admitted)\n   network nodes may consider priorities\
    \ to preempt some previously\n   admitted low priority flows in order to make\
    \ room for a newer, high-\n   priority flow.\n   This memo corrects an RSVP POLICY_DATA\
    \ P-Type codepoint assignment\n   error in RFC 2751.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Introduction .....................................................2\n\
    \   2 Scope and Applicability ..........................................3\n  \
    \ 3 Stateless Policy .................................................3\n   4\
    \ Policy Element Format ............................................4\n   5 Priority\
    \ Merging Issues ..........................................5\n   5.1  Priority\
    \ Merging Strategies ...................................6\n   5.1.1 Take priority\
    \ of highest QoS .................................6\n   5.1.2 Take highest priority\
    \ ........................................7\n   5.1.3 Force error on heterogeneous\
    \ merge ...........................7\n   5.2  Modifying Priority Elements ...................................7\n\
    \   6 Error Processing .................................................8\n  \
    \ 7 IANA Considerations ..............................................8\n   8\
    \ Security Considerations ..........................................8\n   9 References\
    \ .......................................................9\n   10  Author's Address\
    \ ...............................................9\n   Appendix A: Example ...............................................10\n\
    \   A.1  Computing Merged Priority ....................................10\n  \
    \ A.2  Translation (Compression) of Priority Elements ...............11\n   Full\
    \ Copyright Statement ..........................................12\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   This document describes a preemption priority policy element\
    \ for use\n   by signaled policy based admission protocols (such as [RSVP] and\n\
    \   [COPS]).\n   Traditional Capacity based Admission Control (CAC) indiscriminately\n\
    \   admits new flows until capacity is exhausted (First Come First\n   Admitted).\
    \  Policy based Admission Control (PAC) on the other hand\n   attempts to minimize\
    \ the significance of order of arrival and use\n   policy based admission criteria\
    \ instead.\n   One of the more popular policy criteria is the rank of importance\
    \ of\n   a flow relative to the others competing for admission into a network\n\
    \   node.  Preemption Priority takes effect only when a set of flows\n   attempting\
    \ admission through a node represents overbooking of\n   resources such that based\
    \ on CAC some would have to be rejected.\n   Preemption priority criteria help\
    \ the node select the most important\n   flows (highest priority) for admission,\
    \ while rejecting the low\n   priority ones.\n   Network nodes which support preemption\
    \ should consider priorities to\n   preempt some previously admitted low-priority\
    \ flows in order to make\n   room for a newer, high-priority flow.\n   This document\
    \ describes the format and applicability of the\n   preemption priority represented\
    \ as a policy element in [RSVP-EXT].\n"
- title: 2  Scope and Applicability
  contents:
  - "2  Scope and Applicability\n   The Framework document for policy-based admission\
    \ control [RAP]\n   describes the various components that participate in policy\
    \ decision\n   making (i.e., PDP, PEP and LDP).  The emphasis of PREEMPTION_PRI\n\
    \   elements is to be simple, stateless, and light-weight such that they\n   could\
    \ be implemented internally within a node's LDP (Local Decision\n   Point).\n\
    \   Certain base assumptions are made in the usage model for\n   PREEMPTION_PRI\
    \ elements:\n   -  They are created by PDPs\n      In a model where PDPs control\
    \ PEPs at the periphery of the policy\n      domain (e.g., in border routers),\
    \ PDPs reduce sets of relevant\n      policy rules into a single priority criterion.\
    \  This priority as\n      expressed in the PREEMPTION_PRI element can then be\
    \ communicated\n      to downstream PEPs of the same policy domain, which have\
    \ LDPs but\n      no controlling PDP.\n   -  They can be processed by LDPs\n \
    \     PREEMPTION_PRI elements are processed by LDPs of nodes that do not\n   \
    \   have a controlling PDP.  LDPs may interpret these objects, forward\n     \
    \ them as is, or perform local merging to forward an equivalent\n      merged\
    \ PREEMPTION_PRI policy element.  LDPs must follow the\n      merging strategy\
    \ that was encoded by PDPs in the PREEMPTION_PRI\n      objects.  (Clearly, a\
    \ PDP, being a superset of LDP, may act as an\n      LDP as well).\n   -  They\
    \ are enforced by PEPs\n      PREEMPTION_PRI elements interact with a node's traffic\
    \ control\n      module (and capacity admission control) to enforce priorities,\
    \ and\n      preempt previously admitted flows when the need arises.\n"
- title: 3  Stateless Policy
  contents:
  - "3  Stateless Policy\n   Signaled Preemption Priority is stateless (does not require\
    \ past\n   history or external information to be interpreted).  Therefore, when\n\
    \   carried in COPS messages for the outsourcing of policy decisions,\n   these\
    \ objects are included as COPS Stateless Policy Data Decision\n   objects (see\
    \ [COPS, COPS-RSVP]).\n"
- title: 4  Policy Element Format
  contents:
  - "4  Policy Element Format\n   The format of Policy Data objects is defined in\
    \ [RSVP-EXT].  A single\n   Policy Data object may contain one or more policy\
    \ elements, each\n   representing a different (and perhaps orthogonal) policy.\n\
    \   The format of preemption priority policy element is as follows:\n      +-------------+-------------+-------------+-------------+\n\
    \      | Length (12)               | P-Type = PREEMPTION_PRI   |\n      +------+------+-------------+-------------+-------------+\n\
    \      | Flags       | M. Strategy | Error Code  | Reserved(0) |\n      +------+------+-------------+-------------+-------------+\n\
    \      | Preemption Priority       | Defending Priority        |\n      +------+------+-------------+-------------+-------------+\n\
    \   Length: 16 bits\n      Always 12.  The overall length of the policy element,\
    \ in bytes.\n   P-Type: 16 bits\n      PREEMPTION_PRI  = 1\n      This value is\
    \ registered with IANA, see Section 7.\n   Flags: 8 bits\n      Reserved (always\
    \ 0).\n   Merge Strategy: 8 bit\n      1    Take priority of highest QoS: recommended\n\
    \      2    Take highest priority: aggressive\n      3    Force Error on heterogeneous\
    \ merge\n   Reserved: 8 bits\n   Error code: 8 bits\n      0  NO_ERROR       \
    \ Value used for regular PREEMPTION_PRI elements\n      1  PREEMPTION      This\
    \ previously admitted flow was preempted\n      2  HETEROGENEOUS   This element\
    \ encountered heterogeneous merge\n   Reserved: 8 bits\n      Always 0.\n   Preemption\
    \ Priority: 16 bit (unsigned)\n      The priority of the new flow compared with\
    \ the defending priority\n      of previously admitted flows.  Higher values represent\
    \ higher\n      Priority.\n   Defending Priority: 16 bits (unsigned)\n      Once\
    \ a flow was admitted, the preemption priority becomes\n      irrelevant.  Instead,\
    \ its defending priority is used to compare\n      with the preemption priority\
    \ of new flows.\n   For any specific flow, its preemption priority must always\
    \ be less\n   than or equal to the defending priority.  A wide gap between\n \
    \  preemption and defending priority provides added stability: moderate\n   preemption\
    \ priority makes it harder for a flow to preempt others, but\n   once it succeeded,\
    \ the higher defending priority makes it easier for\n   the flow to avoid preemption\
    \ itself.  This provides a mechanism for\n   balancing between order dependency\
    \ and priority.\n"
- title: 5  Priority Merging Issues
  contents:
  - "5  Priority Merging Issues\n   Consider the case where two RSVP reservations\
    \ merge:\n            F1: QoS=High,  Priority=Low\n            F2: QoS=Low,  \
    \ Priority=High\n   F1+F2= F3: QoS=High,  Priority=???\n   The merged reservation\
    \ F3 should have QoS=Hi, but what Priority\n   should it assume? Several negative\
    \ side-effects have been identified\n   that may affect such a merger:\n   Free-Riders:\n\
    \   If F3 assumes Priority=High, then F1 got a free ride, assuming high\n   priority\
    \ that was only intended to the low QoS F2.  If one associates\n   costs as a\
    \ function of QoS and priority, F1 receives an \"expensive\"\n   priority without\
    \ having to \"pay\" for it.\n   Denial of Service:\n   If F3 assumes Priority=Low,\
    \ the merged flow could be preempted or\n   fail even though F2 presented high\
    \ priority.\n   Denial of service is virtually the inverse of the free-rider problem.\n\
    \   When flows compete for resources, if one flow receives undeserving\n   high\
    \ priority it may be able to preempt another deserving flow (hence\n   one free-rider\
    \ turns out to be another's denial of service).\n   Instability:\n   The combination\
    \ of preemption priority, killer reservation and\n   blockade state [RSVP] may\
    \ increase the instability of admitted flows\n   where a reservation may be preempted,\
    \ reinstated, and preempted again\n   periodically.\n"
- title: 5.1  Priority Merging Strategies
  contents:
  - "5.1  Priority Merging Strategies\n   In merging situations LDPs may receive multiple\
    \ preemption elements\n   and must compute the priority of the merged flow according\
    \ to the\n   following rules:\n   a. Preemption priority and defending priority\
    \ are merged and computed\n      separately, irrespective of each other.\n   b.\
    \ Participating priority elements are selected.\n      All priority elements are\
    \ examined according to their merging\n      strategy to decide whether they should\
    \ participate in the merged\n      result (as specified bellow).\n   c. The highest\
    \ priority of all participating priority elements is\n      computed.\n   The\
    \ remainder of this section describes the different merging\n   strategies the\
    \ can be specified in the PREEMPTION_PRI element.\n"
- title: 5.1.1  Take priority of highest QoS
  contents:
  - "5.1.1  Take priority of highest QoS\n   The PREEMPTION_PRI element would participate\
    \ in the merged\n   reservation only if it belongs to a flow that contributed\
    \ to the\n   merged QoS level (i.e., that its QoS requirement does not constitute\n\
    \   a subset another reservation.)  A simple way to determine whether a\n   flow\
    \ contributed to the merged QoS result is to compute the merged\n   QoS with and\
    \ without it and to compare the results (although this is\n   clearly not the\
    \ most efficient method).\n   The reasoning for this approach is that the highest\
    \ QoS flow is the\n   one dominating the merged reservation and as such its priority\
    \ should\n   dominate it as well.  This approach is the most amiable to the\n\
    \   prevention of priority distortions such as free-riders and denial of\n   service.\n\
    \   This is a recommended merging strategy.\n"
- title: 5.1.2  Take highest priority
  contents:
  - "5.1.2  Take highest priority\n   All PREEMPTION_PRI elements participate in the\
    \ merged reservation.\n   This strategy disassociates priority and QoS level,\
    \ and therefore is\n   highly subject to free-riders and its inverse image, denial\
    \ of\n   service.\n   This is not a recommended method, but may be simpler to\
    \ implement.\n"
- title: 5.1.3  Force error on heterogeneous merge
  contents:
  - "5.1.3  Force error on heterogeneous merge\n   A PREEMPTION_PRI element may participate\
    \ in a merged reservation only\n   if all other flows in the merged reservation\
    \ have the same QoS level\n   (homogeneous flows).\n   The reasoning for this\
    \ approach assumes that the heterogeneous case\n   is relatively rare and too\
    \ complicated to deal with, thus it better\n   be prohibited.\n   This strategy\
    \ lends itself to denial of service, when a single\n   receiver specifying a non-compatible\
    \ QoS level may cause denial of\n   service for all other receivers of the merged\
    \ reservation.\n   Note: The determination of heterogeneous flows applies to QoS\
    \ level\n   only (FLOWSPEC values), and is a matter for local (LDP) definition.\n\
    \   Other types of heterogeneous reservations (e.g., conflicting\n   reservation\
    \ styles) are handled by RSVP and are unrelated to this\n   PREEMPTION_PRI element.\n\
    \   This is a recommended merging strategy when reservation homogeneity\n   is\
    \ coordinated and enforced for the entire multicast tree.  It is\n   more restrictive\
    \ than Section 5.1.1, but is easier to implement.\n"
- title: 5.2  Modifying Priority Elements
  contents:
  - "5.2  Modifying Priority Elements\n   When POLICY_DATA objects are protected by\
    \ integrity, LDPs should not\n   attempt to modify them.  They must be forwarded\
    \ as-is or else their\n   security envelope would be invalidated.  In other cases,\
    \ LDPs may\n   modify and merge incoming PREEMPTION_PRI elements to reduce their\n\
    \   size and number according to the following rule:\n   Merging is performed\
    \ for each merging strategy separately.\n   There is no known algorithm to merge\
    \ PREEMPTION_PRI element of\n   different merging strategies without loosing valuable\
    \ information\n   that may affect OTHER nodes.\n   -  For each merging strategy,\
    \ the highest QoS of all participating\n      PREEMPTION_PRI elements is taken\
    \ and is placed in an outgoing\n      PREEMPTION_PRI element of this merging strategy.\n\
    \   -  This approach effectively compresses the number of forwarded\n      PREEMPTION_PRI\
    \ elements to at most to the number of different\n      merging strategies, regardless\
    \ of the number of receivers (See the\n      example in Appendix A.2).\n"
- title: 6  Error Processing
  contents:
  - "6  Error Processing\n   A PREEMPTION_PRI error object is sent back toward the\
    \ appropriate\n   receivers when an error involving PREEMPTION_PRI elements occur.\n\
    \   PREEMPTION\n   When a previously admitted flow is preempted, a copy of the\n\
    \   preempting flow's PREEMPTION_PRI element is sent back toward the PDP\n   that\
    \ originated the preempted PREEMPTION_PRI object.  This PDP,\n   having information\
    \ on both the preempting and the preempted\n   priorities may construct a higher\
    \ priority PREEMPTION_PRI element in\n   an effort to re-instate the preempted\
    \ flow.\n   Heterogeneity\n   When a flow F1 with Heterogeneous Error merging\
    \ strategy set in its\n   PREEMPTION_PRI element encounters heterogeneity the\
    \ PREEMPTION_PRI\n   element is sent back toward receivers with the Heterogeneity\
    \ error\n   code set.\n"
- title: 7  IANA Considerations
  contents:
  - "7  IANA Considerations\n   Following the policies outlined in [IANA-CONSIDERATIONS],\
    \ Standard\n   RSVP Policy Elements (P-type values) are assigned by IETF Consensus\n\
    \   action as described in [RSVP-EXT].\n   P-Type PREEMPTION_PRI is assigned the\
    \ value 1.\n"
- title: 8  Security Considerations
  contents:
  - "8  Security Considerations\n   The integrity of PREEMPTION_PRI is guaranteed,\
    \ as any other policy\n   element, by the encapsulation into a Policy Data object\
    \ [RSVP-EXT].\n   Further security mechanisms are not warranted, especially considering\n\
    \   that preemption priority aims to provide simple and quick guidance to\n  \
    \ routers within a trusted zone or at least a single zone (no zone\n   boundaries\
    \ are crossed).\n"
- title: 9  References
  contents:
  - "9  References\n   [RFC2751]             Herzog, S., \"Signaled Preemption Priority\n\
    \                         Policy Element\", RFC 2751, January 2000.\n   [RSVP-EXT]\
    \            Herzog, S., \"RSVP Extensions for Policy\n                      \
    \   Control\", RFC 2750, January 2000.\n   [COPS-RSVP]           Boyle, J., Cohen,\
    \ R., Durham, D., Herzog, S.,\n                         Raja, R. and A. Sastry,\
    \ \"COPS usage for RSVP\",\n                         RFC 2749, January 2000.\n\
    \   [RAP]                 Yavatkar, R., Pendarakis, D. and R. Guerin, \"A\n  \
    \                       Framework for Policy Based Admission Control\",\n    \
    \                     RFC 2753, January 2000.\n   [COPS]                Boyle,\
    \ J., Cohen, R., Durham, D., Herzog, S.,\n                         Raja, R. and\
    \ A. Sastry, \"The COPS (Common Open\n                         Policy Service)\
    \ Protocol\", RFC 2748, January\n                         2000.\n   [RSVP]   \
    \             Braden, R., Zhang, L., Berson, S., Herzog, S.\n                \
    \         and S. Jamin, \"Resource ReSerVation Protocol\n                    \
    \     (RSVP) - Functional Specification\", RFC 2205,\n                       \
    \  September 1997.\n   [IANA-CONSIDERATIONS] Alvestrand, H. and T. Narten, \"\
    Guidelines for\n                         Writing an IANA Considerations Section\
    \ in\n                         RFCs\", BCP 26, RFC 2434, October 1998.\n"
- title: 10 Author's Address
  contents:
  - "10 Author's Address\n   Shai Herzog\n   PolicyConsulting.Com\n   200 Clove Rd.\n\
    \   New Rochelle, NY 10801\n   EMail: herzog@policyconsulting.com\n"
- title: 'Appendix A:    Example'
  contents:
  - "Appendix A:    Example\n   The following examples describe the computation of\
    \ merged priority\n   elements as well as the translation (compression) of PREEMPTION_PRI\n\
    \   elements.\n"
- title: A.1 Computing Merged Priority
  contents:
  - "A.1 Computing Merged Priority\n                             r1\n            \
    \                /   QoS=Hi (Pr=3, St=Highest QoS)\n                         \
    \  /\n         s1-----A---------B--------r2  QoS=Low (Pr=4, St=Highest PP)\n \
    \                \\        \\\n                  \\        \\   QoS=Low  (Pr=7,\
    \ St=Highest QoS)\n                   r4        r3\n           QoS=Low (Pr=9,\
    \ St=Error)\n         Example 1: Merging preemption priority elements\n   Example\
    \ one describes a multicast scenario with one sender and four\n   receivers each\
    \ with each own PREEMPTION_PRI element definition.\n   r1, r2 and r3 merge in\
    \ B.  The resulting priority is 4.\n   Reason: The PREEMPTION_PRI of r3 doesn't\
    \ participate (since r3 is not\n   contributing to the merged QoS) and the priority\
    \ is the highest of\n   the PREEMPTION_PRI from r1 and r2.\n   r1, r2, r3 and\
    \ r4 merge in A.  The resulting priority is again 4: r4\n   doesn't participate\
    \ because its own QoS=Low is incompatible with the\n   other (r1) QoS=High.  An\
    \ error PREEMPTION_PRI should be sent back to\n   r4 telling it that its PREEMPTION_PRI\
    \ element encountered\n   heterogeneity.\n"
- title: A.2 Translation (Compression) of Priority Elements
  contents:
  - "A.2 Translation (Compression) of Priority Elements\n   Given this set of participating\
    \ PREEMPTION_PRI elements, the\n   following compression can take place at the\
    \ merging node:\n   From:\n             (Pr=3, St=Highest QoS)\n             (Pr=7,\
    \ St=Highest QoS)\n             (Pr=4, St=Highest PP)\n             (Pr=9, St=Highest\
    \ PP)\n             (Pr=6, St=Highest PP)\n   To:\n             (Pr=7, St=Highest\
    \ QoS)\n             (Pr=9, St=Highest PP)\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
