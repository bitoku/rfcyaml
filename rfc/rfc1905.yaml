- title: __initial_text__
  contents:
  - "                          Protocol Operations\n                          for\
    \ Version 2 of the\n              Simple Network Management Protocol (SNMPv2)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A management system contains:  several (potentially many)\
    \ nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   Management\
    \ information is viewed as a collection of managed objects,\n   residing in a\
    \ virtual information store, termed the Management\n   Information Base (MIB).\
    \  Collections of related objects are defined\n   in MIB modules.  These modules\
    \ are written using a subset of OSI's\n   Abstract Syntax Notation One (ASN.1)\
    \ [1], termed the Structure of\n   Management Information (SMI) [2].\n   The management\
    \ protocol, version 2 of the Simple Network Management\n   Protocol, provides\
    \ for the exchange of messages which convey\n   management information between\
    \ the agents and the management\n   stations.  The form of these messages is a\
    \ message \"wrapper\" which\n   encapsulates a Protocol Data Unit (PDU).  The\
    \ form and meaning of the\n   \"wrapper\" is determined by an administrative framework\
    \ which defines\n   both authentication and authorization policies.\n   It is\
    \ the purpose of this document, Protocol Operations for SNMPv2,\n   to define\
    \ the operations of the protocol with respect to the sending\n   and receiving\
    \ of the PDUs.\n"
- title: 1.1.  A Note on Terminology
  contents:
  - "1.1.  A Note on Terminology\n   For the purpose of exposition, the original Internet-standard\
    \ Network\n   Management Framework, as described in RFCs 1155 (STD 16), 1157 (STD\n\
    \   15), and 1212 (STD 16), is termed the SNMP version 1 framework\n   (SNMPv1).\
    \  The current framework is termed the SNMP version 2\n   framework (SNMPv2).\n"
- title: 2.  Overview
  contents:
  - '2.  Overview

    '
- title: 2.1.  Roles of Protocol Entities
  contents:
  - "2.1.  Roles of Protocol Entities\n   A SNMPv2 entity may operate in a manager\
    \ role or an agent role.\n   A SNMPv2 entity acts in an agent role when it performs\
    \ SNMPv2\n   management operations in response to received SNMPv2 protocol\n \
    \  messages (other than an inform notification) or when it sends trap\n   notifications.\n\
    \   A SNMPv2 entity acts in a manager role when it initiates SNMPv2\n   management\
    \ operations by the generation of SNMPv2 protocol messages\n   or when it performs\
    \ SNMPv2 management operations in response to\n   received trap or inform notifications.\n\
    \   A SNMPv2 entity may support either or both roles, as dictated by its\n   implementation\
    \ and configuration.  Further, a SNMPv2 entity can also\n   act in the role of\
    \ a proxy agent, in which it appears to be acting in\n   an agent role, but satisfies\
    \ management requests by acting in a\n   manager role with a remote entity.\n"
- title: 2.2.  Management Information
  contents:
  - "2.2.  Management Information\n   The term, variable, refers to an instance of\
    \ a non-aggregate object\n   type defined according to the conventions set forth\
    \ in the SMI [2] or\n   the textual conventions based on the SMI [3].  The term,\
    \ variable\n   binding, normally refers to the pairing of the name of a variable\
    \ and\n   its associated value.  However, if certain kinds of exceptional\n  \
    \ conditions occur during processing of a retrieval request, a variable\n   binding\
    \ will pair a name and an indication of that exception.\n   A variable-binding\
    \ list is a simple list of variable bindings.\n   The name of a variable is an\
    \ OBJECT IDENTIFIER which is the\n   concatenation of the OBJECT IDENTIFIER of\
    \ the corresponding object-\n   type together with an OBJECT IDENTIFIER fragment\
    \ identifying the\n   instance.  The OBJECT IDENTIFIER of the corresponding object-type\
    \ is\n   called the OBJECT IDENTIFIER prefix of the variable.\n"
- title: 2.3.  Access to Management Information
  contents:
  - "2.3.  Access to Management Information\n   Three types of access to management\
    \ information are provided by the\n   protocol.  One type is a request-response\
    \ interaction, in which a\n   SNMPv2 entity, acting in a manager role, sends a\
    \ request to a SNMPv2\n   entity, acting in an agent role, and the latter SNMPv2\
    \ entity then\n   responds to the request.  This type is used to retrieve or modify\n\
    \   management information associated with the managed device.\n   A second type\
    \ is also a request-response interaction, in which a\n   SNMPv2 entity, acting\
    \ in a manager role, sends a request to a SNMPv2\n   entity, also acting in a\
    \ manager role, and the latter SNMPv2 entity\n   then responds to the request.\
    \  This type is used to notify a SNMPv2\n   entity, acting in a manager role,\
    \ of management information\n   associated with another SNMPv2 entity, also acting\
    \ in a manager role.\n   The third type of access is an unconfirmed interaction,\
    \ in which a\n   SNMPv2 entity, acting in an agent role, sends a unsolicited message,\n\
    \   termed a trap, to a SNMPv2 entity, acting in a manager role, and no\n   response\
    \ is returned.  This type is used to notify a SNMPv2 entity,\n   acting in a manager\
    \ role, of an exceptional situation, which has\n   resulted in changes to management\
    \ information associated with the\n   managed device.\n"
- title: 2.4.  Retransmission of Requests
  contents:
  - "2.4.  Retransmission of Requests\n   For all types of request in this protocol,\
    \ the receiver is required\n   under normal circumstances, to generate and transmit\
    \ a response to\n   the originator of the request.  Whether or not a request should\
    \ be\n   retransmitted if no corresponding response is received in an\n   appropriate\
    \ time interval, is at the discretion of the application\n   originating the request.\
    \  This will normally depend on the urgency of\n   the request.  However, such\
    \ an application needs to act responsibly\n   in respect to the frequency and\
    \ duration of re-transmissions.\n"
- title: 2.5.  Message Sizes
  contents:
  - "2.5.  Message Sizes\n   The maximum size of a SNMPv2 message is limited to the\
    \ minimum of:\n"
- title: (1)  the maximum message size which the destination SNMPv2 entity can
  contents:
  - "(1)  the maximum message size which the destination SNMPv2 entity can\n     accept;\
    \ and,\n"
- title: (2)  the maximum message size which the source SNMPv2 entity can
  contents:
  - "(2)  the maximum message size which the source SNMPv2 entity can\n     generate.\n\
    \   The former may be known on a per-recipient basis; and in the absence\n   of\
    \ such knowledge, is indicated by transport domain used when sending\n   the message.\
    \  The latter is imposed by implementation-specific local\n   constraints.\n \
    \  Each transport mapping for the SNMPv2 indicates the minimum message\n   size\
    \ which a SNMPv2 implementation must be able to produce or\n   consume.  Although\
    \ implementations are encouraged to support larger\n   values whenever possible,\
    \ a conformant implementation must never\n   generate messages larger than allowed\
    \ by the receiving SNMPv2 entity.\n   One of the aims of the GetBulkRequest-PDU,\
    \ specified in this\n   protocol, is to minimize the number of protocol exchanges\
    \ required to\n   retrieve a large amount of management information.  As such,\
    \ this PDU\n   type allows a SNMPv2 entity acting in a manager role to request\
    \ that\n   the response be as large as possible given the constraints on message\n\
    \   sizes.  These constraints include the limits on the size of messages\n   which\
    \ the SNMPv2 entity acting in an agent role can generate, and the\n   SNMPv2 entity\
    \ acting in a manager role can receive.\n   However, it is possible that such\
    \ maximum sized messages may be\n   larger than the Path MTU of the path across\
    \ the network traversed by\n   the messages.  In this situation, such messages\
    \ are subject to\n   fragmentation.  Fragmentation is generally considered to\
    \ be harmful\n   [4], since among other problems, it leads to a decrease in the\n\
    \   reliability of the transfer of the messages.  Thus, a SNMPv2 entity\n   which\
    \ sends a GetBulkRequest-PDU must take care to set its parameters\n   accordingly,\
    \ so as to reduce the risk of fragmentation.  In\n   particular, under conditions\
    \ of network stress, only small values\n   should be used for max-repetitions.\n"
- title: 2.6.  Transport Mappings
  contents:
  - "2.6.  Transport Mappings\n   It is important to note that the exchange of SNMPv2\
    \ messages requires\n   only an unreliable datagram service, with every message\
    \ being\n   entirely and independently contained in a single transport datagram.\n\
    \   Specific transport mappings and encoding rules are specified\n   elsewhere\
    \ [5].  However, the preferred mapping is the use of the User\n   Datagram Protocol\
    \ [6].\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n     SNMPv2-PDU DEFINITIONS ::= BEGIN\n     IMPORTS\n      \
    \   ObjectName, ObjectSyntax, Integer32\n             FROM SNMPv2-SMI;\n     --\
    \ protocol data units\n     PDUs ::=\n         CHOICE {\n             get-request\n\
    \                 GetRequest-PDU,\n             get-next-request\n           \
    \      GetNextRequest-PDU,\n             get-bulk-request\n                 GetBulkRequest-PDU,\n\
    \             response\n                 Response-PDU,\n             set-request\n\
    \                 SetRequest-PDU,\n             inform-request\n             \
    \    InformRequest-PDU,\n             snmpV2-trap\n                 SNMPv2-Trap-PDU,\n\
    \             report\n                 Report-PDU,\n         }\n     -- PDUs\n\
    \     GetRequest-PDU ::=\n         [0]\n             IMPLICIT PDU\n     GetNextRequest-PDU\
    \ ::=\n         [1]\n             IMPLICIT PDU\n     Response-PDU ::=\n      \
    \   [2]\n             IMPLICIT PDU\n     SetRequest-PDU ::=\n         [3]\n  \
    \           IMPLICIT PDU\n     -- [4] is obsolete\n     GetBulkRequest-PDU ::=\n\
    \         [5]\n             IMPLICIT BulkPDU\n     InformRequest-PDU ::=\n   \
    \      [6]\n             IMPLICIT PDU\n     SNMPv2-Trap-PDU ::=\n         [7]\n\
    \             IMPLICIT PDU\n     --   Usage and precise semantics of Report-PDU\
    \ are not presently\n     --   defined.  Any SNMP administrative framework making\
    \ use of\n     --   this PDU must define its usage and semantics.\n     Report-PDU\
    \ ::=\n         [8]\n             IMPLICIT PDU\n     max-bindings\n         INTEGER\
    \ ::= 2147483647\n     PDU ::=\n         SEQUENCE {\n             request-id\n\
    \                 Integer32,\n             error-status            -- sometimes\
    \ ignored\n                 INTEGER {\n                     noError(0),\n    \
    \                 tooBig(1),\n                     noSuchName(2),   -- for proxy\
    \ compatibility\n                     badValue(3),     -- for proxy compatibility\n\
    \                     readOnly(4),     -- for proxy compatibility\n          \
    \           genErr(5),\n                     noAccess(6),\n                  \
    \   wrongType(7),\n                     wrongLength(8),\n                    \
    \ wrongEncoding(9),\n                     wrongValue(10),\n                  \
    \   noCreation(11),\n                     inconsistentValue(12),\n           \
    \          resourceUnavailable(13),\n                     commitFailed(14),\n\
    \                     undoFailed(15),\n                     authorizationError(16),\n\
    \                     notWritable(17),\n                     inconsistentName(18)\n\
    \                 },\n             error-index            -- sometimes ignored\n\
    \                 INTEGER (0..max-bindings),\n             variable-bindings \
    \  -- values are sometimes ignored\n                 VarBindList\n         }\n\
    \     BulkPDU ::=                     -- MUST be identical in\n         SEQUENCE\
    \ {                  -- structure to PDU\n             request-id\n          \
    \       Integer32,\n             non-repeaters\n                 INTEGER (0..max-bindings),\n\
    \             max-repetitions\n                 INTEGER (0..max-bindings),\n \
    \            variable-bindings       -- values are ignored\n                 VarBindList\n\
    \         }\n     -- variable binding\n     VarBind ::=\n         SEQUENCE {\n\
    \             name\n                 ObjectName,\n             CHOICE {\n    \
    \             value\n                     ObjectSyntax,\n                 unSpecified\
    \         -- in retrieval requests\n                         NULL,\n         \
    \                            -- exceptions in responses\n                 noSuchObject[0]\n\
    \                         IMPLICIT NULL,\n                 noSuchInstance[1]\n\
    \                         IMPLICIT NULL,\n                 endOfMibView[2]\n \
    \                        IMPLICIT NULL\n             }\n         }\n     -- variable-binding\
    \ list\n     VarBindList ::=\n         SEQUENCE (SIZE (0..max-bindings)) OF\n\
    \             VarBind\n     END\n"
- title: 4.  Protocol Specification
  contents:
  - '4.  Protocol Specification

    '
- title: 4.1.  Common Constructs
  contents:
  - "4.1.  Common Constructs\n   The value of the request-id field in a Response-PDU\
    \ takes the value\n   of the request-id field in the request PDU to which it is\
    \ a response.\n   By use of the request-id value, a SNMPv2 application can distinguish\n\
    \   the (potentially multiple) outstanding requests, and thereby\n   correlate\
    \ incoming responses with outstanding requests.  In cases\n   where an unreliable\
    \ datagram service is used, the request-id also\n   provides a simple means of\
    \ identifying messages duplicated by the\n   network.  Use of the same request-id\
    \ on a retransmission of a request\n   allows the response to either the original\
    \ transmission or the\n   retransmission to satisfy the request.  However, in\
    \ order to\n   calculate the round trip time for transmission and processing of\
    \ a\n   request-response transaction, the SNMPv2 application needs to use a\n\
    \   different request-id value on a retransmitted request.  The latter\n   strategy\
    \ is recommended for use in the majority of situations.\n   A non-zero value of\
    \ the error-status field in a Response-PDU is used\n   to indicate that an exception\
    \ occurred to prevent the processing of\n   the request.  In these cases, a non-zero\
    \ value of the Response-PDU's\n   error-index field provides additional information\
    \ by identifying\n   which variable binding in the list caused the exception.\
    \  A variable\n   binding is identified by its index value.  The first variable\
    \ binding\n   in a variable-binding list is index one, the second is index two,\n\
    \   etc.\n   SNMPv2 limits OBJECT IDENTIFIER values to a maximum of 128 sub-\n\
    \   identifiers, where each sub-identifier has a maximum value of 2**32-\n   1.\n"
- title: 4.2.  PDU Processing
  contents:
  - "4.2.  PDU Processing\n   It is mandatory that all SNMPv2 entities acting in an\
    \ agent role be\n   able to generate the following PDU types:  Response-PDU and\
    \ SNMPv2-\n   Trap-PDU; further, all such implementations must be able to receive\n\
    \   the following PDU types:  GetRequest-PDU, GetNextRequest-PDU,\n   GetBulkRequest-PDU,\
    \ and SetRequest-PDU.\n   It is mandatory that all SNMPv2 entities acting in a\
    \ manager role be\n   able to generate the following PDU types: GetRequest-PDU,\n\
    \   GetNextRequest-PDU, GetBulkRequest-PDU, SetRequest-PDU,\n   InformRequest-PDU,\
    \ and Response-PDU; further, all such\n   implementations must be able to receive\
    \ the following PDU types:\n   Response-PDU, SNMPv2-Trap-PDU,\n   InformRequest-PDU;\n\
    \   In the elements of procedure below, any field of a PDU which is not\n   referenced\
    \ by the relevant procedure is ignored by the receiving\n   SNMPv2 entity.  However,\
    \ all components of a PDU, including those\n   whose values are ignored by the\
    \ receiving SNMPv2 entity, must have\n   valid ASN.1 syntax and encoding.  For\
    \ example, some PDUs (e.g., the\n   GetRequest-PDU) are concerned only with the\
    \ name of a variable and\n   not its value.  In this case, the value portion of\
    \ the variable\n   binding is ignored by the receiving SNMPv2 entity.  The unSpecified\n\
    \   value is defined for use as the value portion of such bindings.\n   On generating\
    \ a management communication, the message \"wrapper\" to\n   encapsulate the PDU\
    \ is generated according to the \"Elements of\n   Procedure\" of the administrative\
    \ framework in use is followed.  While\n   the definition of \"max-bindings\"\
    \ does impose an upper-bound on the\n   number of variable bindings, in practice,\
    \ the size of a message is\n   limited only by constraints on the maximum message\
    \ size -- it is not\n   limited by the number of variable bindings.\n   On receiving\
    \ a management communication, the \"Elements of Procedure\"\n   of the administrative\
    \ framework in use is followed, and if those\n   procedures indicate that the\
    \ operation contained within the message\n   is to be performed locally, then\
    \ those procedures also indicate the\n   MIB view which is visible to the operation.\n"
- title: 4.2.1.  The GetRequest-PDU
  contents:
  - "4.2.1.  The GetRequest-PDU\n   A GetRequest-PDU is generated and transmitted\
    \ at the request of a\n   SNMPv2 application.\n   Upon receipt of a GetRequest-PDU,\
    \ the receiving SNMPv2 entity\n   processes each variable binding in the variable-binding\
    \ list to\n   produce a Response-PDU.  All fields of the Response-PDU have the\
    \ same\n   values as the corresponding fields of the received request except as\n\
    \   indicated below.  Each variable binding is processed as follows:\n"
- title: (1)  If the variable binding's name exactly matches the name of a
  contents:
  - "(1)  If the variable binding's name exactly matches the name of a\n     variable\
    \ accessible by this request, then the variable binding's\n     value field is\
    \ set to the value of the named variable.\n"
- title: (2)  Otherwise, if the variable binding's name does not have an OBJECT
  contents:
  - "(2)  Otherwise, if the variable binding's name does not have an OBJECT\n    \
    \ IDENTIFIER prefix which exactly matches the OBJECT IDENTIFIER\n     prefix of\
    \ any (potential) variable accessible by this request, then\n     its value field\
    \ is set to `noSuchObject'.\n"
- title: (3)  Otherwise, the variable binding's value field is set to
  contents:
  - "(3)  Otherwise, the variable binding's value field is set to\n     `noSuchInstance'.\n\
    \   If the processing of any variable binding fails for a reason other\n   than\
    \ listed above, then the Response-PDU is re-formatted with the\n   same values\
    \ in its request-id and variable-bindings fields as the\n   received GetRequest-PDU,\
    \ with the value of its error-status field set\n   to `genErr', and the value\
    \ of its error-index field is set to the\n   index of the failed variable binding.\n\
    \   Otherwise, the value of the Response-PDU's error-status field is set\n   to\
    \ `noError', and the value of its error-index field is zero.\n   The generated\
    \ Response-PDU is then encapsulated into a message.  If\n   the size of the resultant\
    \ message is less than or equal to both a\n   local constraint and the maximum\
    \ message size of the originator, it\n   is transmitted to the originator of the\
    \ GetRequest-PDU.\n   Otherwise, an alternate Response-PDU is generated.  This\
    \ alternate\n   Response-PDU is formatted with the same value in its request-id\
    \ field\n   as the received GetRequest-PDU, with the value of its error-status\n\
    \   field set to `tooBig', the value of its error-index field set to\n   zero,\
    \ and an empty variable-bindings field.  This alternate\n   Response-PDU is then\
    \ encapsulated into a message.  If the size of the\n   resultant message is less\
    \ than or equal to both a local constraint\n   and the maximum message size of\
    \ the originator, it is transmitted to\n   the originator of the GetRequest-PDU.\
    \  Otherwise, the snmpSilentDrops\n   [9] counter is incremented and the resultant\
    \ message is discarded.\n"
- title: 4.2.2.  The GetNextRequest-PDU
  contents:
  - "4.2.2.  The GetNextRequest-PDU\n   A GetNextRequest-PDU is generated and transmitted\
    \ at the request of a\n   SNMPv2 application.\n   Upon receipt of a GetNextRequest-PDU,\
    \ the receiving SNMPv2 entity\n   processes each variable binding in the variable-binding\
    \ list to\n   produce a Response-PDU.  All fields of the Response-PDU have the\
    \ same\n   values as the corresponding fields of the received request except as\n\
    \   indicated below.  Each variable binding is processed as follows:\n"
- title: (1)  The variable is located which is in the lexicographically ordered
  contents:
  - "(1)  The variable is located which is in the lexicographically ordered\n    \
    \ list of the names of all variables which are accessible by this\n     request\
    \ and whose name is the first lexicographic successor of the\n     variable binding's\
    \ name in the incoming GetNextRequest-PDU.  The\n     corresponding variable binding's\
    \ name and value fields in the\n     Response-PDU are set to the name and value\
    \ of the located variable.\n"
- title: (2)  If the requested variable binding's name does not lexicographically
  contents:
  - "(2)  If the requested variable binding's name does not lexicographically\n  \
    \   precede the name of any variable accessible by this request, i.e.,\n     there\
    \ is no lexicographic successor, then the corresponding\n     variable binding\
    \ produced in the Response-PDU has its value field\n     set to `endOfMibView',\
    \ and its name field set to the variable\n     binding's name in the request.\n\
    \   If the processing of any variable binding fails for a reason other\n   than\
    \ listed above, then the Response-PDU is re-formatted with the\n   same values\
    \ in its request-id and variable-bindings fields as the\n   received GetNextRequest-PDU,\
    \ with the value of its error-status field\n   set to `genErr', and the value\
    \ of its error-index field is set to the\n   index of the failed variable binding.\n\
    \   Otherwise, the value of the Response-PDU's error-status field is set\n   to\
    \ `noError', and the value of its error-index field is zero.\n   The generated\
    \ Response-PDU is then encapsulated into a message.  If\n   the size of the resultant\
    \ message is less than or equal to both a\n   local constraint and the maximum\
    \ message size of the originator, it\n   is transmitted to the originator of the\
    \ GetNextRequest-PDU.\n   Otherwise, an alternate Response-PDU is generated. \
    \ This alternate\n   Response-PDU is formatted with the same values in its request-id\n\
    \   field as the received GetNextRequest-PDU, with the value of its\n   error-status\
    \ field set to `tooBig', the value of its error-index\n   field set to zero, and\
    \ an empty variable-bindings field.  This\n   alternate Response-PDU is then encapsulated\
    \ into a message.  If the\n   size of the resultant message is less than or equal\
    \ to both a local\n   constraint and the maximum message size of the originator,\
    \ it is\n   transmitted to the originator of the GetNextRequest-PDU.  Otherwise,\n\
    \   the snmpSilentDrops [9] counter is incremented and the resultant\n   message\
    \ is discarded.\n"
- title: 4.2.2.1.  Example of Table Traversal
  contents:
  - "4.2.2.1.  Example of Table Traversal\n   An important use of the GetNextRequest-PDU\
    \ is the traversal of\n   conceptual tables of information within a MIB.  The\
    \ semantics of this\n   type of request, together with the method of identifying\
    \ individual\n   instances of objects in the MIB, provides access to related objects\n\
    \   in the MIB as if they enjoyed a tabular organization.\n   In the protocol\
    \ exchange sketched below, a SNMPv2 application\n   retrieves the media-dependent\
    \ physical address and the address-\n   mapping type for each entry in the IP\
    \ net-to-media Address\n   Translation Table [7] of a particular network element.\
    \  It also\n   retrieves the value of sysUpTime [9], at which the mappings existed.\n\
    \   Suppose that the agent's IP net-to-media table has three entries:\n  Interface-Number\
    \  Network-Address  Physical-Address  Type\n         1            10.0.0.51  \
    \   00:00:10:01:23:45  static\n         1             9.2.3.4      00:00:10:54:32:10\
    \  dynamic\n         2            10.0.0.15     00:00:10:98:76:54  dynamic\n \
    \  The SNMPv2 entity acting in a manager role begins by sending a\n   GetNextRequest-PDU\
    \ containing the indicated OBJECT IDENTIFIER values\n   as the requested variable\
    \ names:\n    GetNextRequest ( sysUpTime,\n                     ipNetToMediaPhysAddress,\n\
    \                     ipNetToMediaType )\n   The SNMPv2 entity acting in an agent\
    \ role responds with a Response-\n   PDU:\n    Response (( sysUpTime.0 =  \"123456\"\
    \ ),\n              ( ipNetToMediaPhysAddress.1.9.2.3.4 =\n                  \
    \                       \"000010543210\" ),\n              ( ipNetToMediaType.1.9.2.3.4\
    \ =  \"dynamic\" ))\n   The SNMPv2 entity acting in a manager role continues with:\n\
    \    GetNextRequest ( sysUpTime,\n                     ipNetToMediaPhysAddress.1.9.2.3.4,\n\
    \                     ipNetToMediaType.1.9.2.3.4 )\n   The SNMPv2 entity acting\
    \ in an agent role responds with:\n    Response (( sysUpTime.0 =  \"123461\" ),\n\
    \              ( ipNetToMediaPhysAddress.1.10.0.0.51 =\n                     \
    \                     \"000010012345\" ),\n              ( ipNetToMediaType.1.10.0.0.51\
    \ =  \"static\" ))\n   The SNMPv2 entity acting in a manager role continues with:\n\
    \    GetNextRequest ( sysUpTime,\n                     ipNetToMediaPhysAddress.1.10.0.0.51,\n\
    \                     ipNetToMediaType.1.10.0.0.51 )\n   The SNMPv2 entity acting\
    \ in an agent role responds with:\n    Response (( sysUpTime.0 =  \"123466\" ),\n\
    \              ( ipNetToMediaPhysAddress.2.10.0.0.15 =\n                     \
    \                      \"000010987654\" ),\n              ( ipNetToMediaType.2.10.0.0.15\
    \ =  \"dynamic\" ))\n   The SNMPv2 entity acting in a manager role continues with:\n\
    \    GetNextRequest ( sysUpTime,\n                     ipNetToMediaPhysAddress.2.10.0.0.15,\n\
    \                     ipNetToMediaType.2.10.0.0.15 )\n   As there are no further\
    \ entries in the table, the SNMPv2 entity\n   acting in an agent role responds\
    \ with the variables that are next in\n   the lexicographical ordering of the\
    \ accessible object names, for\n   example:\n    Response (( sysUpTime.0 =  \"\
    123471\" ),\n              ( ipNetToMediaNetAddress.1.9.2.3.4 =\n            \
    \                                   \"9.2.3.4\" ),\n              ( ipRoutingDiscards.0\
    \ =  \"2\" ))\n   This response signals the end of the table to the SNMPv2 entity\n\
    \   acting in a manager role.\n"
- title: 4.2.3.  The GetBulkRequest-PDU
  contents:
  - "4.2.3.  The GetBulkRequest-PDU\n   A GetBulkRequest-PDU is generated and transmitted\
    \ at the request of a\n   SNMPv2 application.  The purpose of the GetBulkRequest-PDU\
    \ is to\n   request the transfer of a potentially large amount of data,\n   including,\
    \ but not limited to, the efficient and rapid retrieval of\n   large tables.\n\
    \   Upon receipt of a GetBulkRequest-PDU, the receiving SNMPv2 entity\n   processes\
    \ each variable binding in the variable-binding list to\n   produce a Response-PDU\
    \ with its request-id field having the same\n   value as in the request.  Processing\
    \ begins by examining the values\n   in the non-repeaters and max-repetitions\
    \ fields.  If the value in the\n   non-repeaters field is less than zero, then\
    \ the value of the field is\n   set to zero.  Similarly, if the value in the max-repetitions\
    \ field is\n   less than zero, then the value of the field is set to zero.\n \
    \  For the GetBulkRequest-PDU type, the successful processing of each\n   variable\
    \ binding in the request generates zero or more variable\n   bindings in the Response-PDU.\
    \  That is, the one-to-one mapping\n   between the variable bindings of the GetRequest-PDU,\
    \ GetNextRequest-\n   PDU, and SetRequest-PDU types and the resultant Response-PDUs\
    \ does\n   not apply for the mapping between the variable bindings of a\n   GetBulkRequest-PDU\
    \ and the resultant Response-PDU.\n   The values of the non-repeaters and max-repetitions\
    \ fields in the\n   request specify the processing requested.  One variable binding\
    \ in\n   the Response-PDU is requested for the first N variable bindings in\n\
    \   the request and M variable bindings are requested for each of the R\n   remaining\
    \ variable bindings in the request.  Consequently, the total\n   number of requested\
    \ variable bindings communicated by the request is\n   given by N + (M * R), where\
    \ N is the minimum of:  a) the value of the\n   non-repeaters field in the request,\
    \ and b) the number of variable\n   bindings in the request; M is the value of\
    \ the max-repetitions field\n   in the request; and R is the maximum of:  a) number\
    \ of variable\n   bindings in the request - N, and b)  zero.\n   The receiving\
    \ SNMPv2 entity produces a Response-PDU with up to the\n   total number of requested\
    \ variable bindings communicated by the\n   request.  The request-id shall have\
    \ the same value as the received\n   GetBulkRequest-PDU.\n   If N is greater than\
    \ zero, the first through the (N)-th variable\n   bindings of the Response-PDU\
    \ are each produced as follows:\n"
- title: (1)  The variable is located which is in the lexicographically ordered
  contents:
  - "(1)  The variable is located which is in the lexicographically ordered\n    \
    \ list of the names of all variables which are accessible by this\n     request\
    \ and whose name is the first lexicographic successor of the\n     variable binding's\
    \ name in the incoming GetBulkRequest-PDU.  The\n     corresponding variable binding's\
    \ name and value fields in the\n     Response-PDU are set to the name and value\
    \ of the located variable.\n"
- title: (2)  If the requested variable binding's name does not lexicographically
  contents:
  - "(2)  If the requested variable binding's name does not lexicographically\n  \
    \   precede the name of any variable accessible by this request, i.e.,\n     there\
    \ is no lexicographic successor, then the corresponding\n     variable binding\
    \ produced in the Response-PDU has its value field\n     set to `endOfMibView',\
    \ and its name field set to the variable\n     binding's name in the request.\n\
    \   If M and R are non-zero, the (N + 1)-th and subsequent variable\n   bindings\
    \ of the Response-PDU are each produced in a similar manner.\n   For each iteration\
    \ i, such that i is greater than zero and less than\n   or equal to M, and for\
    \ each repeated variable, r, such that r is\n   greater than zero and less than\
    \ or equal to R, the (N + ( (i-1) * R )\n   + r)-th variable binding of the Response-PDU\
    \ is produced as follows:\n"
- title: (1)  The variable which is in the lexicographically ordered list of the
  contents:
  - "(1)  The variable which is in the lexicographically ordered list of the\n   \
    \  names of all variables which are accessible by this request and\n     whose\
    \ name is the (i)-th lexicographic successor of the (N + r)-th\n     variable\
    \ binding's name in the incoming GetBulkRequest-PDU is\n     located and the variable\
    \ binding's name and value fields are set to\n     the name and value of the located\
    \ variable.\n"
- title: (2)  If there is no (i)-th lexicographic successor, then the
  contents:
  - "(2)  If there is no (i)-th lexicographic successor, then the\n     corresponding\
    \ variable binding produced in the Response-PDU has its\n     value field set\
    \ to `endOfMibView', and its name field set to either\n     the last lexicographic\
    \ successor, or if there are no lexicographic\n     successors, to the (N + r)-th\
    \ variable binding's name in the\n     request.\n   While the maximum number of\
    \ variable bindings in the Response-PDU is\n   bounded by N + (M * R), the response\
    \ may be generated with a lesser\n   number of variable bindings (possibly zero)\
    \ for either of three\n   reasons.\n"
- title: (1)  If the size of the message encapsulating the Response-PDU
  contents:
  - "(1)  If the size of the message encapsulating the Response-PDU\n     containing\
    \ the requested number of variable bindings would be\n     greater than either\
    \ a local constraint or the maximum message size\n     of the originator, then\
    \ the response is generated with a lesser\n     number of variable bindings. \
    \ This lesser number is the ordered set\n     of variable bindings with some of\
    \ the variable bindings at the end\n     of the set removed, such that the size\
    \ of the message encapsulating\n     the Response-PDU is approximately equal to\
    \ but no greater than\n     either a local constraint or the maximum message size\
    \ of the\n     originator.  Note that the number of variable bindings removed\
    \ has\n     no relationship to the values of N, M, or R.\n"
- title: (2)  The response may also be generated with a lesser number of variable
  contents:
  - "(2)  The response may also be generated with a lesser number of variable\n  \
    \   bindings if for some value of iteration i, such that i is greater\n     than\
    \ zero and less than or equal to M, that all of the generated\n     variable bindings\
    \ have the value field set to the `endOfMibView'.\n     In this case, the variable\
    \ bindings may be truncated after the (N +\n     (i * R))-th variable binding.\n"
- title: (3)  In the event that the processing of a request with many repetitions
  contents:
  - "(3)  In the event that the processing of a request with many repetitions\n  \
    \   requires a significantly greater amount of processing time than a\n     normal\
    \ request, then an agent may terminate the request with less\n     than the full\
    \ number of repetitions, providing at least one\n     repetition is completed.\n\
    \   If the processing of any variable binding fails for a reason other\n   than\
    \ listed above, then the Response-PDU is re-formatted with the\n   same values\
    \ in its request-id and variable-bindings fields as the\n   received GetBulkRequest-PDU,\
    \ with the value of its error-status field\n   set to `genErr', and the value\
    \ of its error-index field is set to the\n   index of the variable binding in\
    \ the original request which\n   corresponds to the failed variable binding.\n\
    \   Otherwise, the value of the Response-PDU's error-status field is set\n   to\
    \ `noError', and the value of its error-index field to zero.\n   The generated\
    \ Response-PDU (possibly with an empty variable-bindings\n   field) is then encapsulated\
    \ into a message.  If the size of the\n   resultant message is less than or equal\
    \ to both a local constraint\n   and the maximum message size of the originator,\
    \ it is transmitted to\n   the originator of the GetBulkRequest-PDU.  Otherwise,\
    \ the\n   snmpSilentDrops [9] counter is incremented and the resultant message\n\
    \   is discarded.\n"
- title: 4.2.3.1.  Another Example of Table Traversal
  contents:
  - "4.2.3.1.  Another Example of Table Traversal\n   This example demonstrates how\
    \ the GetBulkRequest-PDU can be used as\n   an alternative to the GetNextRequest-PDU.\
    \  The same traversal of the\n   IP net-to-media table as shown in Section 4.2.2.1\
    \ is achieved with\n   fewer exchanges.\n   The SNMPv2 entity acting in a manager\
    \ role begins by sending a\n   GetBulkRequest-PDU with the modest max-repetitions\
    \ value of 2, and\n   containing the indicated OBJECT IDENTIFIER values as the\
    \ requested\n   variable names:\n    GetBulkRequest [ non-repeaters = 1, max-repetitions\
    \ = 2 ]\n                    ( sysUpTime,\n                      ipNetToMediaPhysAddress,\n\
    \                      ipNetToMediaType )\n   The SNMPv2 entity acting in an agent\
    \ role responds with a Response-PDU:\n    Response (( sysUpTime.0 =  \"123456\"\
    \ ),\n              ( ipNetToMediaPhysAddress.1.9.2.3.4 =\n                  \
    \                       \"000010543210\" ),\n              ( ipNetToMediaType.1.9.2.3.4\
    \ =  \"dynamic\" ),\n              ( ipNetToMediaPhysAddress.1.10.0.0.51 =\n \
    \                                         \"000010012345\" ),\n              (\
    \ ipNetToMediaType.1.10.0.0.51 =  \"static\" ))\n   The SNMPv2 entity acting in\
    \ a manager role continues with:\n       GetBulkRequest [ non-repeaters = 1, max-repetitions\
    \ = 2 ]\n                       ( sysUpTime,\n                         ipNetToMediaPhysAddress.1.10.0.0.51,\n\
    \                         ipNetToMediaType.1.10.0.0.51 )\n   The SNMPv2 entity\
    \ acting in an agent role responds with:\n    Response (( sysUpTime.0 =  \"123466\"\
    \ ),\n              ( ipNetToMediaPhysAddress.2.10.0.0.15 =\n                \
    \                         \"000010987654\" ),\n              ( ipNetToMediaType.2.10.0.0.15\
    \ =\n                                              \"dynamic\" ),\n          \
    \    ( ipNetToMediaNetAddress.1.9.2.3.4 =\n                                  \
    \            \"9.2.3.4\" ),\n              ( ipRoutingDiscards.0 =  \"2\" ))\n\
    \   This response signals the end of the table to the SNMPv2 entity\n   acting\
    \ in a manager role.\n"
- title: 4.2.4.  The Response-PDU
  contents:
  - "4.2.4.  The Response-PDU\n   The Response-PDU is generated by a SNMPv2 entity\
    \ only upon receipt of\n   a GetRequest-PDU, GetNextRequest-PDU, GetBulkRequest-PDU,\n\
    \   SetRequest-PDU, or InformRequest-PDU, as described elsewhere in this\n   document.\n\
    \   If the error-status field of the Response-PDU is non-zero, the value\n   fields\
    \ of the variable bindings in the variable binding list are\n   ignored.\n   If\
    \ both the error-status field and the error-index field of the\n   Response-PDU\
    \ are non-zero, then the value of the error-index field is\n   the index of the\
    \ variable binding (in the variable-binding list of\n   the corresponding request)\
    \ for which the request failed.  The first\n   variable binding in a request's\
    \ variable-binding list is index one,\n   the second is index two, etc.\n   A\
    \ compliant SNMPv2 entity acting in a manager role must be able to\n   properly\
    \ receive and handle a Response-PDU with an error-status field\n   equal to `noSuchName',\
    \ `badValue', or `readOnly'.  (See Section 3.1.2\n   of [8].)\n   Upon receipt\
    \ of a Response-PDU, the receiving SNMPv2 entity presents\n   its contents to\
    \ the SNMPv2 application which generated the request\n   with the same request-id\
    \ value.\n"
- title: 4.2.5.  The SetRequest-PDU
  contents:
  - "4.2.5.  The SetRequest-PDU\n   A SetRequest-PDU is generated and transmitted\
    \ at the request of a\n   SNMPv2 application.\n   Upon receipt of a SetRequest-PDU,\
    \ the receiving SNMPv2 entity\n   determines the size of a message encapsulating\
    \ a Response-PDU having\n   the same values in its request-id and variable-bindings\
    \ fields as the\n   received SetRequest-PDU, and the largest possible sizes of\
    \ the\n   error-status and error-index fields.  If the determined message size\n\
    \   is greater than either a local constraint or the maximum message size\n  \
    \ of the originator, then an alternate Response-PDU is generated,\n   transmitted\
    \ to the originator of the SetRequest-PDU, and processing\n   of the SetRequest-PDU\
    \ terminates immediately thereafter.  This\n   alternate Response-PDU is formatted\
    \ with the same values in its\n   request-id field as the received SetRequest-PDU,\
    \ with the value of\n   its error-status field set to `tooBig', the value of its\
    \ error-index\n   field set to zero, and an empty variable-bindings field.  This\n\
    \   alternate Response-PDU is then encapsulated into a message.  If the\n   size\
    \ of the resultant message is less than or equal to both a local\n   constraint\
    \ and the maximum message size of the originator, it is\n   transmitted to the\
    \ originator of the SetRequest-PDU.  Otherwise, the\n   snmpSilentDrops [9] counter\
    \ is incremented and the resultant message\n   is discarded.  Regardless, processing\
    \ of the SetRequest-PDU\n   terminates.\n   Otherwise, the receiving SNMPv2 entity\
    \ processes each variable\n   binding in the variable-binding list to produce\
    \ a Response-PDU.  All\n   fields of the Response-PDU have the same values as\
    \ the corresponding\n   fields of the received request except as indicated below.\n\
    \   The variable bindings are conceptually processed as a two phase\n   operation.\
    \  In the first phase, each variable binding is validated;\n   if all validations\
    \ are successful, then each variable is altered in\n   the second phase.  Of course,\
    \ implementors are at liberty to\n   implement either the first, or second, or\
    \ both, of these conceptual\n   phases as multiple implementation phases.  Indeed,\
    \ such multiple\n   implementation phases may be necessary in some cases to ensure\n\
    \   consistency.\n   The following validations are performed in the first phase\
    \ on each\n   variable binding until they are all successful, or until one fails:\n"
- title: (1)  If the variable binding's name specifies an existing or non-
  contents:
  - "(1)  If the variable binding's name specifies an existing or non-\n     existent\
    \ variable to which this request is/would be denied access\n     because it is/would\
    \ not be in the appropriate MIB view, then the\n     value of the Response-PDU's\
    \ error-status field is set to\n     `noAccess', and the value of its error-index\
    \ field is set to the\n     index of the failed variable binding.\n"
- title: (2)  Otherwise, if there are no variables which share the same OBJECT
  contents:
  - "(2)  Otherwise, if there are no variables which share the same OBJECT\n     IDENTIFIER\
    \ prefix as the variable binding's name, and which are\n     able to be created\
    \ or modified no matter what new value is\n     specified, then the value of the\
    \ Response-PDU's error-status field\n     is set to `notWritable', and the value\
    \ of its error-index field is\n     set to the index of the failed variable binding.\n"
- title: (3)  Otherwise, if the variable binding's value field specifies,
  contents:
  - "(3)  Otherwise, if the variable binding's value field specifies,\n     according\
    \ to the ASN.1 language, a type which is inconsistent with\n     that required\
    \ for all variables which share the same OBJECT\n     IDENTIFIER prefix as the\
    \ variable binding's name, then the value of\n     the Response-PDU's error-status\
    \ field is set to `wrongType', and\n     the value of its error-index field is\
    \ set to the index of the\n     failed variable binding.\n"
- title: (4)  Otherwise, if the variable binding's value field specifies,
  contents:
  - "(4)  Otherwise, if the variable binding's value field specifies,\n     according\
    \ to the ASN.1 language, a length which is inconsistent\n     with that required\
    \ for all variables which share the same OBJECT\n     IDENTIFIER prefix as the\
    \ variable binding's name, then the value of\n     the Response-PDU's error-status\
    \ field is set to `wrongLength', and\n     the value of its error-index field\
    \ is set to the index of the\n     failed variable binding.\n"
- title: (5)  Otherwise, if the variable binding's value field contains an ASN.1
  contents:
  - "(5)  Otherwise, if the variable binding's value field contains an ASN.1\n   \
    \  encoding which is inconsistent with that field's ASN.1 tag, then\n     the\
    \ value of the Response-PDU's error-status field is set to\n     `wrongEncoding',\
    \ and the value of its error-index field is set to\n     the index of the failed\
    \ variable binding.  (Note that not all\n     implementation strategies will generate\
    \ this error.)\n"
- title: (6)  Otherwise, if the variable binding's value field specifies a value
  contents:
  - "(6)  Otherwise, if the variable binding's value field specifies a value\n   \
    \  which could under no circumstances be assigned to the variable,\n     then\
    \ the value of the Response-PDU's error-status field is set to\n     `wrongValue',\
    \ and the value of its error-index field is set to the\n     index of the failed\
    \ variable binding.\n"
- title: (7)  Otherwise, if the variable binding's name specifies a variable
  contents:
  - "(7)  Otherwise, if the variable binding's name specifies a variable\n     which\
    \ does not exist and could not ever be created (even though\n     some variables\
    \ sharing the same OBJECT IDENTIFIER prefix might\n     under some circumstances\
    \ be able to be created), then the value of\n     the Response-PDU's error-status\
    \ field is set to `noCreation', and\n     the value of its error-index field is\
    \ set to the index of the\n     failed variable binding.\n"
- title: (8)  Otherwise, if the variable binding's name specifies a variable
  contents:
  - "(8)  Otherwise, if the variable binding's name specifies a variable\n     which\
    \ does not exist but can not be created under the present\n     circumstances\
    \ (even though it could be created under other\n     circumstances), then the\
    \ value of the Response-PDU's error-status\n     field is set to `inconsistentName',\
    \ and the value of its error-\n     index field is set to the index of the failed\
    \ variable binding.\n"
- title: (9)  Otherwise, if the variable binding's name specifies a variable
  contents:
  - "(9)  Otherwise, if the variable binding's name specifies a variable\n     which\
    \ exists but can not be modified no matter what new value is\n     specified,\
    \ then the value of the Response-PDU's error-status field\n     is set to `notWritable',\
    \ and the value of its error-index field is\n     set to the index of the failed\
    \ variable binding.\n"
- title: (10) Otherwise, if the variable binding's value field specifies a value
  contents:
  - "(10) Otherwise, if the variable binding's value field specifies a value\n   \
    \  that could under other circumstances be held by the variable, but\n     is\
    \ presently inconsistent or otherwise unable to be assigned to the\n     variable,\
    \ then the value of the Response-PDU's error-status field\n     is set to `inconsistentValue',\
    \ and the value of its error-index\n     field is set to the index of the failed\
    \ variable binding.\n"
- title: (11) When, during the above steps, the assignment of the value specified
  contents:
  - "(11) When, during the above steps, the assignment of the value specified\n  \
    \   by the variable binding's value field to the specified variable\n     requires\
    \ the allocation of a resource which is presently\n     unavailable, then the\
    \ value of the Response-PDU's error-status\n     field is set to `resourceUnavailable',\
    \ and the value of its error-\n     index field is set to the index of the failed\
    \ variable binding.\n"
- title: (12) If the processing of the variable binding fails for a reason other
  contents:
  - "(12) If the processing of the variable binding fails for a reason other\n   \
    \  than listed above, then the value of the Response-PDU's error-\n     status\
    \ field is set to `genErr', and the value of its error-index\n     field is set\
    \ to the index of the failed variable binding.\n"
- title: (13) Otherwise, the validation of the variable binding succeeds.
  contents:
  - "(13) Otherwise, the validation of the variable binding succeeds.\n   At the end\
    \ of the first phase, if the validation of all variable\n   bindings succeeded,\
    \ then the value of the Response-PDU's error-status\n   field is set to `noError'\
    \ and the value of its error-index field is\n   zero, and processing continues\
    \ as follows.\n   For each variable binding in the request, the named variable\
    \ is\n   created if necessary, and the specified value is assigned to it.\n  \
    \ Each of these variable assignments occurs as if simultaneously with\n   respect\
    \ to all other assignments specified in the same request.\n   However, if the\
    \ same variable is named more than once in a single\n   request, with different\
    \ associated values, then the actual assignment\n   made to that variable is implementation-specific.\n\
    \   If any of these assignments fail (even after all the previous\n   validations),\
    \ then all other assignments are undone, and the\n   Response-PDU is modified\
    \ to have the value of its error-status field\n   set to `commitFailed', and the\
    \ value of its error-index field set to\n   the index of the failed variable binding.\n\
    \   If and only if it is not possible to undo all the assignments, then\n   the\
    \ Response-PDU is modified to have the value of its error-status\n   field set\
    \ to `undoFailed', and the value of its error-index field is\n   set to zero.\
    \  Note that implementations are strongly encouraged to\n   take all possible\
    \ measures to avoid use of either `commitFailed' or\n   `undoFailed' - these two\
    \ error-status codes are not to be taken as\n   license to take the easy way out\
    \ in an implementation.\n   Finally, the generated Response-PDU is encapsulated\
    \ into a message,\n   and transmitted to the originator of the SetRequest-PDU.\n"
- title: 4.2.6.  The SNMPv2-Trap-PDU
  contents:
  - "4.2.6.  The SNMPv2-Trap-PDU\n   A SNMPv2-Trap-PDU is generated and transmitted\
    \ by a SNMPv2 entity\n   acting in an agent role when an exceptional situation\
    \ occurs.\n   The destination(s) to which a SNMPv2-Trap-PDU is sent is determined\n\
    \   in an implementation-dependent fashion by the SNMPv2 entity.  The\n   first\
    \ two variable bindings in the variable binding list of an\n   SNMPv2-Trap-PDU\
    \ are sysUpTime.0 [9] and snmpTrapOID.0 [9]\n   respectively.  If the OBJECTS\
    \ clause is present in the invocation of\n   the corresponding NOTIFICATION-TYPE\
    \ macro, then each corresponding\n   variable, as instantiated by this notification,\
    \ is copied, in order,\n   to the variable-bindings field.  If any additional\
    \ variables are\n   being included (at the option of the generating SNMPv2 entity),\
    \ then\n   each is copied to the variable-bindings field.\n"
- title: 4.2.7.  The InformRequest-PDU
  contents:
  - "4.2.7.  The InformRequest-PDU\n   An InformRequest-PDU is generated and transmitted\
    \ at the request of\n   an application in a SNMPv2 entity acting in a manager\
    \ role, that\n   wishes to notify another application (in a SNMPv2 entity also\
    \ acting\n   in a manager role) of information in a MIB view which is remote to\n\
    \   the receiving application.\n   The destination(s) to which an InformRequest-PDU\
    \ is sent is specified\n   by the requesting application.  The first two variable\
    \ bindings in\n   the variable binding list of an InformRequest-PDU are sysUpTime.0\
    \ [9]\n   and snmpTrapOID.0 [9] respectively.  If the OBJECTS clause is present\n\
    \   in the invocation of the corresponding NOTIFICATION-TYPE macro, then\n   each\
    \ corresponding variable, as instantiated by this notification, is\n   copied,\
    \ in order, to the variable-bindings field.\n   Upon receipt of an InformRequest-PDU,\
    \ the receiving SNMPv2 entity\n   determines the size of a message encapsulating\
    \ a Response-PDU with\n   the same values in its request-id, error-status, error-index\
    \ and\n   variable-bindings fields as the received InformRequest-PDU.  If the\n\
    \   determined message size is greater than either a local constraint or\n   the\
    \ maximum message size of the originator, then an alternate\n   Response-PDU is\
    \ generated, transmitted to the originator of the\n   InformRequest-PDU, and processing\
    \ of the InformRequest-PDU terminates\n   immediately thereafter.  This alternate\
    \ Response-PDU is formatted\n   with the same values in its request-id field as\
    \ the received\n   InformRequest-PDU, with the value of its error-status field\
    \ set to\n   `tooBig', the value of its error-index field set to zero, and an\n\
    \   empty variable-bindings field.  This alternate Response-PDU is then\n   encapsulated\
    \ into a message.  If the size of the resultant message is\n   less than or equal\
    \ to both a local constraint and the maximum message\n   size of the originator,\
    \ it is transmitted to the originator of the\n   InformRequest-PDU.  Otherwise,\
    \ the snmpSilentDrops [9] counter is\n   incremented and the resultant message\
    \ is discarded.  Regardless,\n   processing of the InformRequest-PDU terminates.\n\
    \   Otherwise, the receiving SNMPv2 entity:\n"
- title: (1)  presents its contents to the appropriate SNMPv2 application;
  contents:
  - '(1)  presents its contents to the appropriate SNMPv2 application;

    '
- title: (2)  generates a Response-PDU with the same values in its request-id and
  contents:
  - "(2)  generates a Response-PDU with the same values in its request-id and\n  \
    \   variable-bindings fields as the received InformRequest-PDU, with\n     the\
    \ value of its error-status field is set to `noError' and the\n     value of its\
    \ error-index field is zero; and\n"
- title: (3)  transmits the generated Response-PDU to the originator of the
  contents:
  - "(3)  transmits the generated Response-PDU to the originator of the\n     InformRequest-PDU.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 6.  Editor's Address
  contents:
  - "6.  Editor's Address\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134-1706\n   US\n   Phone: +1 408 526 5260\n\
    \   EMail: kzm@cisco.com\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document is the result of significant work by the\
    \ four major\n   contributors:\n   Jeffrey D. Case (SNMP Research, case@snmp.com)\n\
    \   Keith McCloghrie (Cisco Systems, kzm@cisco.com)\n   Marshall T. Rose (Dover\
    \ Beach Consulting, mrose@dbc.mtview.ca.us)\n   Steven Waldbusser (International\
    \ Network Services, stevew@uni.ins.com)\n   In addition, the contributions of\
    \ the SNMPv2 Working Group are\n   acknowledged.  In particular, a special thanks\
    \ is extended for the\n   contributions of:\n     Alexander I. Alten (Novell)\n\
    \     Dave Arneson (Cabletron)\n     Uri Blumenthal (IBM)\n     Doug Book (Chipcom)\n\
    \     Kim Curran (Bell-Northern Research)\n     Jim Galvin (Trusted Information\
    \ Systems)\n     Maria Greene (Ascom Timeplex)\n     Iain Hanson (Digital)\n \
    \    Dave Harrington (Cabletron)\n     Nguyen Hien (IBM)\n     Jeff Johnson (Cisco\
    \ Systems)\n     Michael Kornegay (Object Quest)\n     Deirdre Kostick (AT&T Bell\
    \ Labs)\n     David Levi (SNMP Research)\n     Daniel Mahoney (Cabletron)\n  \
    \   Bob Natale (ACE*COMM)\n     Brian O'Keefe (Hewlett Packard)\n     Andrew Pearson\
    \ (SNMP Research)\n     Dave Perkins (Peer Networks)\n     Randy Presuhn (Peer\
    \ Networks)\n     Aleksey Romanov (Quality Quorum)\n     Shawn Routhier (Epilogue)\n\
    \     Jon Saperia (BGS Systems)\n     Bob Stewart (Cisco Systems, bstewart@cisco.com),\
    \ chair\n     Kaj Tesink (Bellcore)\n     Glenn Waters (Bell-Northern Research)\n\
    \     Bert Wijnen (IBM)\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: '[1]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[1]  Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Abstract Syntax Notation One (ASN.1),\n     International Organization for\
    \ Standardization.  International\n     Standard 8824, (December, 1987).\n"
- title: '[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Structure of Management Information for Version 2\n     of the Simple Network\
    \ Management Protocol (SNMPv2)\", RFC 1902,\n     January 1996.\n"
- title: '[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[3]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Textual Conventions for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1903, January 1996.\n"
- title: '[4]  Kent, C., and J. Mogul, Fragmentation Considered Harmful,'
  contents:
  - "[4]  Kent, C., and J. Mogul, Fragmentation Considered Harmful,\n     Proceedings,\
    \ ACM SIGCOMM '87, Stowe, VT, (August 1987).\n"
- title: '[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[5]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Transport Mappings for Version 2 of the Simple\n     Network Management Protocol\
    \ (SNMPv2)\", RFC 1906, January 1996.\n"
- title: '[6]  Postel, J., "User Datagram Protocol", STD 6, RFC 768,'
  contents:
  - "[6]  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n     USC/Information\
    \ Sciences Institute, August 1980.\n"
- title: '[7]  McCloghrie, K., and M. Rose, Editors, "Management Information'
  contents:
  - "[7]  McCloghrie, K., and M. Rose, Editors, \"Management Information\n     Base\
    \ for Network Management of TCP/IP-based internets:\n     MIB-II\", STD 17, RFC\
    \ 1213, March 1991.\n"
- title: '[8]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[8]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Coexistence between Version 1 and Version 2\n     of the Internet-standard\
    \ Network Management Framework\", RFC 1908,\n     January 1996.\n"
- title: '[9]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[9]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     S. Waldbusser,\
    \ \"Management Information Base for Version 2 of the\n     Simple Network Management\
    \ Protocol (SNMPv2)\", RFC 1907,\n     January 1996.\n"
