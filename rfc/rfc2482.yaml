- title: __initial_text__
  contents:
  - '                 Language Tagging in Unicode Plain Text

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n\
    \   This document has been accepted by ISO/IEC JTC1/SC2/WG2 in meeting\n   #34\
    \ to be submitted as a recommendation from WG2 for inclusion in\n   Plane 14 in\
    \ part 2 of ISO/IEC 10646.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This document proposed a mechanism for language tagging in [UNICODE]\n\
    \   plain text. A set of special-use tag characters on Plane 14 of\n   [ISO10646]\
    \ (accessible through UTF-8, UTF-16, and UCS-4 encoding\n   forms) are proposed\
    \ for encoding to enable the spelling out of\n   ASCII-based string tags using\
    \ characters which can be strictly\n   separated from ordinary text content characters\
    \ in ISO10646 (or\n   UNICODE).\n   One tag identification character and one cancel\
    \ tag character are\n   also proposed. In particular, a language tag identification\
    \ character\n   is proposed to identify a language tag string specifically; the\n\
    \   language tag itself makes use of [RFC1766] language tag strings\n   spelled\
    \ out using the Plane 14 tag characters. Provision of a\n   specific, low-overhead\
    \ mechanism for embedding language tags in plain\n   text is aimed at meeting\
    \ the need of Internet Protocols such as ACAP,\n   which require a standard mechanism\
    \ for marking language in UTF-8\n   strings.\n   The tagging mechanism as well\
    \ the characters proposed in this\n   document have been approved by the Unicode\
    \ Consortium for inclusion\n   in The Unicode Standard.  However, implementation\
    \ of this decision\n   awaits formal acceptance by ISO JTC1/SC2/WG2, the working\
    \ group\n   responsible for ISO10646. Potential implementers should be aware that\n\
    \   until this formal acceptance occurs, any usage of the characters\n   proposed\
    \ herein is strictly experimental and not sanctioned for\n   standardized character\
    \ data interchange.\n"
- title: 2.  Definitions and Notation
  contents:
  - "2.  Definitions and Notation\n   No attempt is made to define all terms used\
    \ in this document. In\n   particular, the terminology pertaining to the subject\
    \ of coded\n   character systems is not explicitly specified. See [UNICODE],\n\
    \   [ISO10646], and [RFC2130] for additional definitions in this area.\n"
- title: 2.1 Requirements Notation
  contents:
  - "2.1 Requirements Notation\n   This document occasionally uses terms that appear\
    \ in capital letters.\n   When the terms \"MUST\", \"SHOULD\", \"MUST NOT\", \"\
    SHOULD NOT\", and \"MAY\"\n   appear capitalized, they are being used to indicate\
    \ particular\n   requirements of this specification. A discussion of the meanings\
    \ of\n   these terms appears in [RFC2119].\n"
- title: 2.2 Definitions
  contents:
  - "2.2 Definitions\n   The terms defined below are used in special senses and thus\
    \ warrant\n   some clarification.\n"
- title: 2.2.1 Tagging
  contents:
  - "2.2.1 Tagging\n   The association of attributes of text with a point or range\
    \ of the\n   primary text. (The value of a particular tag is not generally\n \
    \  considered to be a part of the \"content\" of the text. Typical\n   examples\
    \ of tagging is to mark language or font of a portion of\n   text.)\n"
- title: 2.2.2 Annotation
  contents:
  - "2.2.2 Annotation\n   The association of secondary textual content with a point\
    \ or range of\n   the primary text. (The value of a particular annotation *is*\n\
    \   considered to be a part of the \"content\" of the text. Typical\n   examples\
    \ include glossing, citations, exemplication, Japanese yomi,\n   etc.)\n"
- title: 2.2.3 Out-of-band
  contents:
  - "2.2.3 Out-of-band\n   An out-of-band channel conveys a tag in such a way that\
    \ the textual\n   content, as encoded, is completely untouched and unmodified.\
    \ This is\n   typically done by metadata or hyperstructure of some sort.\n"
- title: 2.2.4 In-band
  contents:
  - "2.2.4 In-band\n   An in-band channel conveys a tag along with the textual content,\n\
    \   using the same basic encoding mechanism as the text itself. This is\n   done\
    \ by various means, but an obvious example is SGML markup, where\n   the tags\
    \ are encoded in the same character set as the text and are\n   interspersed with\
    \ and carried along with the text data.\n"
- title: 3.0 Background
  contents:
  - "3.0 Background\n   There has been much discussion over the last 8 years of language\n\
    \   tagging and of other kinds of tagging of Unicode plain text. It is\n   fair\
    \ to say that there is more-or-less universal agreement that\n   language tagging\
    \ of Unicode plain text is required for certain\n   textual processes. For example,\
    \ language \"hinting\" of multilingual\n   text is necessary for multilingual\
    \ spell-checking based on multiple\n   dictionaries to work well.  Language tagging\
    \ provides a minimum level\n   of required information for text-to-speech processes\
    \ to work\n   correctly.  Language tagging is regularly done on web pages, to\n\
    \   enable selection of alternate content, for example.\n   However, there has\
    \ been a great deal of controversy regarding the\n   appropriate placement of\
    \ language tags. Some have held that the only\n   appropriate placement of language\
    \ tags (or other kinds of tags) is\n   out-of-band, making use of attributed text\
    \ structures or metadata.\n   Others have argued that there are requirements for\
    \ lower-complexity\n   in-band mechanisms for language tags (or other tags) in\
    \ plain text.\n   The controversy has been muddied by the existence and widespread\
    \ use\n   of a number of in-band text markup mechanisms (HTML, text/enriched,\n\
    \   etc.) which enable language tagging, but which imply the use of\n   general\
    \ parsing mechanisms which are deemed too \"heavyweight\" for\n   protocol developers\
    \ and a number of other applications. The\n   difficulty of using general in-band\
    \ text markup for simple protocols\n   derives from the fact that some characters\
    \ are used both for textual\n   content and for the text markup; this makes it\
    \ more difficult to\n   write simple, fast algorithms to find only the textual\
    \ content and\n   ignore the tags, or vice versa. (Think of this as the algorithmic\n\
    \   equivalent of the difficulty the human reader has attempting to read\n   just\
    \ the content of raw HTML source text without a browser\n   interpreting all the\
    \ markup tags.)\n   The Plane 14 proposal addresses the recurrent and persistent\
    \ call for\n   a lighter-weight mechanism for text tagging than typical text markup\n\
    \   mechanisms in Unicode. It proposes a special set of characters used\n   *only*\
    \ for tagging. These tag characters can be embedded into plain\n   text and can\
    \ be identified and/or ignored with trivial algorithms,\n   since there is no\
    \ overloading of usage for these tag characters--they\n   can only express tag\
    \ values and never textual content itself.\n   The Plane 14 proposal is not intended\
    \ for general annotation of text,\n   such as textual citations, phonetic readings\
    \ (e.g.  Japanese Yomi),\n   etc. In its present form, its use is intended to\
    \ be restriced solely\n   to specifying in-line language tags.  Future extensions\
    \ may widen\n   this scope of intended usage.\n"
- title: 4.0 Proposal
  contents:
  - "4.0 Proposal\n   This proposal suggests the use of 97 dedicated tag characters\
    \ encoded\n   at the start of Plane 14 of ISO/IEC 10646 consisting of a clone\
    \ of\n   the 94 printable 7-bit ASCII graphic characters and ASCII SPACE, as\n\
    \   well as a tag identification character and a tag cancel character.\n   These\
    \ tag characters are to be used to spell out any ASCII-based\n   tagging scheme\
    \ which needs to be embedded in Unicode plain text. In\n   particular, they can\
    \ be used to spell out language tags in order to\n   meet the expressed requirements\
    \ of the ACAP protocol and the likely\n   requirements of other new protocols\
    \ following the guidelines of the\n   IAB character workshop (RFC 2130).\n   The\
    \ suggested range in Plane 14 for the block reserved for tag\n   characters is\
    \ as follows, expressed in each of the three most\n   generally used encoding\
    \ schemes for ISO/IEC 10646:\n   UCS-4\n   U-000E0000 .. U-000E007F\n   UTF-16\n\
    \   U+DB40 U+DC00 .. U+DB40 U+DC7F\n   UTF-8\n   0xF3 0xA0 0x80 0x80 .. 0xF3 0xA0\
    \ 0x81 0xBF\n   Of this range, U-000E0020 .. U-000E007E is the suggested range\
    \ for\n   the ASCII clone tag characters themselves.\n"
- title: 4.1 Names for the Tag Characters
  contents:
  - "4.1 Names for the Tag Characters\n   The names for the ASCII clone tag characters\
    \ should be exactly the\n   ISO 10646 names for 7-bit ASCII, prefixed with the\
    \ word \"TAG\".\n   In addition, there is one tag identification character and\
    \ a CANCEL\n   TAG character. The use and syntax of these characters is described\
    \ in\n   detail below.\n   The entire encoding for the proposed Plane 14 tag characters\
    \ and\n   names of those characters can be derived from the following list.\n\
    \   (The encoded values here and throughout this proposal are listed in\n   UCS-4\
    \ form, which is easiest to interpret. It is assumed that most\n   Unicode applications\
    \ will, however, be making use either of UTF-16 or\n   UTF-8 encoding forms for\
    \ actual implementation.)\n   U-000E0000  <reserved>\n   U-000E0001  LANGUAGE\
    \ TAG\n   U-000E0002  <reserved>\n   U-000E001F  <reserved>\n   U-000E0020  TAG\
    \ SPACE\n   U-000E0021  TAG EXCLAMATION MARK\n   U-000E0041  TAG LATIN CAPITAL\
    \ LETTER A\n   U-000E007A  TAG LATIN SMALL LETTER Z\n   U-000E007E  TAG TILDE\n\
    \   U-000E007F  CANCEL TAG\n"
- title: 4.2 Range Checking for Tag Characters
  contents:
  - "4.2 Range Checking for Tag Characters\n   The range checks required for code\
    \ testing for tag characters would\n   be as follows. The same range check is\
    \ expressed here in C for each\n   of the three significant encoding forms for\
    \ 10646.\n"
- title: 'Range check expressed in UCS-4:'
  contents:
  - 'Range check expressed in UCS-4:

    '
- title: if ( ( *s >= 0xE0000 ) || ( *s <= 0xE007F ) )
  contents:
  - 'if ( ( *s >= 0xE0000 ) || ( *s <= 0xE007F ) )

    '
- title: 'Range check expressed in UTF-16 (Unicode):'
  contents:
  - 'Range check expressed in UTF-16 (Unicode):

    '
- title: if ( ( *s == 0xDB40 ) && ( *(s+1) >= 0xDC00 ) && ( *(s+1) <= 0xDC7F ) )
  contents:
  - 'if ( ( *s == 0xDB40 ) && ( *(s+1) >= 0xDC00 ) && ( *(s+1) <= 0xDC7F ) )

    '
- title: 'Expressed in UTF-8:'
  contents:
  - 'Expressed in UTF-8:

    '
- title: if ( ( *s == 0xF3 ) && ( *(s+1) == 0xA0 ) && ( *(s+2) & 0xE0 == 0x80 )
  contents:
  - "if ( ( *s == 0xF3 ) && ( *(s+1) == 0xA0 ) && ( *(s+2) & 0xE0 == 0x80 )\n   Because\
    \ of the choice of the range for the tag characters, it would\n   also be possible\
    \ to express the range check for UCS-4 or UTF-16 in\n   terms of bitmask operations,\
    \ as well.\n"
- title: 4.3 Syntax for Embedding Tags
  contents:
  - "4.3 Syntax for Embedding Tags\n   The use of the Plane 14 tag characters is very\
    \ simple. In order to\n   embed any ASCII-derived tag in Unicode plain text, the\
    \ tag is simply\n   spelled out with the tag characters instead, prefixed with\
    \ the\n   relevant tag identification character. The resultant string is\n   embedded\
    \ directly in the text.\n   The tag identification character is used as a mechanism\
    \ for\n   identifying tags of different types. This enables multiple types of\n\
    \   tags to coexist amicably embedded in plain text and solves the\n   problem\
    \ of delimitation if a tag is concatenated directly onto\n   another tag. Although\
    \ only one type of tag is currently specified,\n   namely the language tag, the\
    \ encoding of other tag identification\n   characters in the future would allow\
    \ for distinct tag types to be\n   used.\n   No termination character is required\
    \ for a tag. A tag terminates\n   either when the first non Plane 14 Tag Character\
    \ (i.e. any other\n   normal Unicode value) is encountered, or when the next tag\n\
    \   identification character is encountered.\n   All tag arguments must be encoded\
    \ only with the tag characters U-\n   000E0020 .. U-000E007E. No other characters\
    \ are valid for expressing\n   the tag argument.\n   A detailed BNF syntax for\
    \ tags is listed below.\n"
- title: 4.4   Tag Scope and Nesting
  contents:
  - "4.4   Tag Scope and Nesting\n   The value of an established tag continues from\
    \ the point the tag is\n   embedded in text until either:\n      A. The text itself\
    \ goes out of scope, as defined by the\n         application. (E.g. for line-oriented\
    \ protocols, when reaching\n         the end-of-line or end-of-string; for text\
    \ streams, when\n         reaching the end-of-stream; etc.)\n   or\n      B. The\
    \ tag is explicitly cancelled by the CANCEL TAG character.\n   Tags of the same\
    \ type cannot be nested in any way. The appearance of\n   a new embedded language\
    \ tag, for example, after text which was\n   already language tagged, simply changes\
    \ the tagged value for\n   subsequent text to that specified in the new tag.\n\
    \   Tags of different type can have interdigitating scope, but not\n   hierarchical\
    \ scope. In effect, tags of different type completely\n   ignore each other, so\
    \ that the use of language tags can be completely\n   asynchronous with the use\
    \ of character set source tags (or any other\n   tag type) in the same text in\
    \ the future.\n"
- title: 4.5 Cancelling Tag Values
  contents:
  - "4.5 Cancelling Tag Values\n   U-000E007F CANCEL TAG is provided to allow the\
    \ specific cancelling of\n   a tag value. The use of CANCEL TAG has the following\
    \ syntax.  To\n   cancel a tag value of a particular type, prefix the CANCEL TAG\n\
    \   character with the tag identification character of the appropriate\n   type.\
    \ For example, the complete string to cancel a language tag is:\n   U-000E0001\
    \ U-000E007F\n   The value of the relevant tag type returns to the default state\
    \ for\n   that tag type, namely: no tag value specified, the same as untagged\n\
    \   text.\n   The use of CANCEL TAG without a prefixed tag identification character\n\
    \   cancels *any* Plane 14 tag values which may be defined. Since only\n   language\
    \ tags are currently provided with an explicit tag\n   identification character,\
    \ only language tags are currently affected.\n   The main function of CANCEL TAG\
    \ is to make possible such operations\n   as blind concatenation of strings in\
    \ a tagged context without the\n   propagation of inappropriate tag values across\
    \ the string boundaries.\n   For example, a string tagged with a Japanese language\
    \ tag can have\n   its tag value \"sealed off\" with a terminating CANCEL TAG\
    \ before\n   another string of unknown language value is concatenated to it. This\n\
    \   would prevent the string of unknown language from being erroneously\n   marked\
    \ as being Japanese simply because of a concatenation to a\n   Japanese string.\n"
- title: 4.6 Tag Syntax Description
  contents:
  - "4.6 Tag Syntax Description\n   An extended BNF (Backus-Naur Form) description\
    \ of the tags specified\n   in this proposal is found below.  Note the following\
    \ BNF extensions\n   used in this formalism:\n   1. Semantic constraints are specified\
    \ by rules in the form of an\n      assertion specified between double braces;\
    \ the variable $$ denotes\n      the string consisting of all terminal symbols\
    \ matched by the this\n      non-terminal.\n      Example:   {{ Assert ( $$[0]\
    \ == '?' ); }}\n      Meaning:   The first character of the string matched by\
    \ this\n                 non-terminal must be '?'\n   2. A number of predicate\
    \ functions are employed in semantic\n      constraint rules which are not otherwise\
    \ defined; their name is\n      sufficient for determining their predication.\n\
    \      Example:   IsRFC1766LanguageIdentifier ( tag-argument )\n      Meaning:\
    \   tag-argument is a valid RFC1766 language identifier\n   3. A lexical expander\
    \ function, TAG, is employed to denote the tag\n      form of an ASCII character;\
    \ the argument to this function is\n      either a character or a character set\
    \ specified by a range or\n      enumeration expression.\n      Example:   TAG('-')\n\
    \      Meaning:   TAG HYPHEN-MINUS\n      Example:   TAG([A-Z])\n      Meaning:\
    \   TAG LATIN CAPITAL LETTER A ...\n                 TAG LATIN CAPITAL LETTER\
    \ Z\n   4. A macro is employed to denote terminal symbols that are character\n\
    \      literals which can't be directly represented in ASCII. The\n      argument\
    \ to the macro is the UNICODE (ISO/IEC 10646) character\n      name.\n      Example:\
    \   '${TAG CANCEL}'\n      Meaning:   character literal whose code value is U-000E007F\n\
    \   5. Occurrence indicators used are '+' (one or more) and '*' (zero or\n   \
    \   more); optional occurrence is indicated by enclosure in '[' and\n      ']'.\n"
- title: 4.6.1 Formal Tag Syntax
  contents:
  - '4.6.1 Formal Tag Syntax

    '
- title: 'tag                     :   language-tag'
  contents:
  - "tag                     :   language-tag\n                        |   cancel-all-tag\n\
    \                        ;\n"
- title: 'language-tag            :   language-tag-introducer language-tag-argument'
  contents:
  - "language-tag            :   language-tag-introducer language-tag-argument\n \
    \                       ;\n"
- title: 'language-tag-argument   :   tag-argument'
  contents:
  - "language-tag-argument   :   tag-argument\n              {{ Assert ( IsRFC1766LanguageIdentifier\
    \ ( $$ ); }}\n                        |   tag-cancel\n                       \
    \ ;\n"
- title: 'cancel-all-tag          :   tag-cancel'
  contents:
  - "cancel-all-tag          :   tag-cancel\n                        ;\n"
- title: 'tag-argument            :   tag-character+'
  contents:
  - "tag-argument            :   tag-character+\n                        ;\n"
- title: 'tag-character           :   { c : c in'
  contents:
  - "tag-character           :   { c : c in\n              TAG( { a : a in printable\
    \ ASCII characters or SPACE } ) }\n                        ;\n"
- title: 'language-tag-introducer :   ''${TAG LANGUAGE}'''
  contents:
  - "language-tag-introducer :   '${TAG LANGUAGE}'\n                        ;\n"
- title: 'tag-cancel              :   ''${TAG CANCEL}'''
  contents:
  - "tag-cancel              :   '${TAG CANCEL}'\n                        ;\n"
- title: 5.0 Tag Types
  contents:
  - '5.0 Tag Types

    '
- title: 5.1 Language Tags
  contents:
  - "5.1 Language Tags\n   Language tags are of general interest and should have a\
    \ high degree\n   of interoperability for protocol usage. To this end, a specific\n\
    \   LANGUAGE TAG tag identification character is provided.  A Plane 14\n   tag\
    \ string prefixed by U-000E0001 LANGUAGE TAG is specified to\n   constitute a\
    \ language tag. Furthermore, the tag values for the\n   language tag are to be\
    \ spelled out as specified in RFC 1766, making\n   use only of registered tag\
    \ values or of user-defined language tags\n   starting with the characters \"\
    x-\".\n   For example, to embed a language tag for Japanese, the Plane 14\n  \
    \ characters would be used as follows. The Japanese tag from RFC 1766\n   is \"\
    ja\" (composed of ISO 639 language id) or, alternatively, \"ja-JP\"\n   (composed\
    \ of ISO 639 language id plus ISO 3166 country id).  Since\n   RFC 1766 specifies\
    \ that language tags are not case significant, it is\n   recommended that for\
    \ language tags, the entire tag be lowercased\n   before conversion to Plane 14\
    \ tag characters. (This would not be\n   required for Unicode conformance, but\
    \ should be followed as general\n   practice by protocols making use of RFC 1766\
    \ language tags, to\n   simplify and speed up the processing for operations which\
    \ need to\n   identify or ignore language tags embedded in text.) Lowercasing,\n\
    \   rather than uppercasing, is recommended because it follows the\n   majority\
    \ practice of expressing language tag values in lowercase\n   letters.\n   Thus\
    \ the entire language tag (in its longer form) would be converted\n   to Plane\
    \ 14 tag characters as follows:\n   U-000E0001 U-000E006A U-000E0061 U-000E002D\
    \ U-000E006A U-000E0070\n   The language tag (in its shorter, \"ja\" form) could\
    \ be expressed as\n   follows:\n   U-000E0001 U-000E006A U-000E0061\n   The value\
    \ of this string is then expressed in whichever encoding form\n   (UCS-4, UTF-16,\
    \ UTF-8) is required and embedded in text at the\n   relevant point.\n"
- title: 5.2 Additional Tags
  contents:
  - "5.2 Additional Tags\n   Additional tag identification characters might be defined\
    \ in the\n   future. An example would be a CHARACTER SET SOURCE TAG, or a GENERIC\n\
    \   TAG for private definition of tags.\n   In each case, when a specific tag\
    \ identification character is\n   encoded, a corresponding reference standard\
    \ for the values of the\n   tags associated with the identifier should be designated,\
    \ so that\n   interoperating parties which make use of the tags will know how\
    \ to\n   interpret the values the tags may take.\n"
- title: 6.0 Display Issues
  contents:
  - "6.0 Display Issues\n   All characters in the tag character block are considered\
    \ to have no\n   visible rendering in normal text. A process which interprets\
    \ tags may\n   choose to modify the rendering of text based on the tag values\
    \ (as\n   for example, changing font to preferred style for rendering Chinese\n\
    \   versus Japanese). The tag characters themselves have no display; they\n  \
    \ may be considered similar to a U+200B ZERO WIDTH SPACE in that\n   regard. The\
    \ tag characters also do not affect breaking, joining, or\n   any other format\
    \ or layout properties, except insofar as the process\n   interpreting the tag\
    \ chooses to impose such behavior based on the tag\n   value.\n   For debugging\
    \ or other operations which must render the tags\n   themselves visible, it is\
    \ advisable that the tag characters be\n   rendered using the corresponding ASCII\
    \ character glyphs (perhaps\n   modified systematically to differentiate them\
    \ from normal ASCII\n   characters). But, as noted below, the tag character values\
    \ are chosen\n   so that even without display support, the tag characters will\
    \ be\n   interpretable in most debuggers.\n"
- title: 7.0 Unicode Conformance Issues
  contents:
  - "7.0 Unicode Conformance Issues\n   The basic rules for Unicode conformance for\
    \ the tag characters are\n   exactly the same as for any other Unicode characters.\
    \ A conformant\n   process is not required to interpret the tag characters. If\
    \ it does\n   not interpret tag characters, it should leave their values\n   undisturbed\
    \ and do whatever it does with any other uninterpreted\n   characters. If it does\
    \ interpret them, it should interpret them\n   according to the standard, i.e.\
    \ as spelled-out tags.\n   So for a non-TagAware Unicode application, any language\
    \ tag\n   characters (or any other kind of tag expressed with Plane 14 tag\n \
    \  characters) encountered would be handled exactly as for uninterpreted\n   Tibetan\
    \ from the BMP, uninterpreted Linear B from Plane 1, or\n   uninterpreted Egyptian\
    \ hieroglyphics from private use space in Plane\n   15.\n   A TagAware but TagPhobic\
    \ Unicode application can recognize the tag\n   character range in Plane 14 and\
    \ choose to deliberately strip them out\n   completely to produce plain text with\
    \ no tags.\n   The presence of a correctly formed tag cannot be taken as a guarantee\n\
    \   that the data so tagged is correctly tagged. For example, nothing\n   prevents\
    \ an application from erroneously labelling French data as\n   Spanish, or from\
    \ labelling JIS-derived data as Japanese, even if it\n   contains Greek or Cyrillic\
    \ characters.\n"
- title: 7.1 Note on Encoding Language Tags
  contents:
  - "7.1 Note on Encoding Language Tags\n   The fact that this proposal for encoding\
    \ tag characters in Unicode\n   includes a mechanism for specifying language tag\
    \ values does not mean\n   that Unicode is departing from one of its basic encoding\
    \ principles:\n       Unicode encodes scripts, not languages.\n   This is still\
    \ true of the Unicode encoding (and ISO/IEC 10646), even\n   in the presence of\
    \ a mechanism for specifying language tags in plain\n   text.  There is nothing\
    \ obligatory about the use of Plane 14 tags,\n   whether for language tags or\
    \ any other kind of tags.\n   Language tagging in no way impacts current encoded\
    \ characters or the\n   encoding of future scripts.\n   It is fully anticipated\
    \ that implementations of Unicode which already\n   make use of out-of-band mechanisms\
    \ for language tagging or \"heavy-\n   weight\" in-band mechanisms such as HTML\
    \ will continue to do exactly\n   what they are doing and will ignore Plane 14\
    \ tag characters\n   completely.\n"
- title: 8.0 Security Considerations
  contents:
  - "8.0 Security Considerations\n   There are no known security issues raised by\
    \ this document.\n"
- title: References
  contents:
  - "References\n   [ISO10646] ISO/IEC 10646-1:1993 International Organization for\n\
    \              Standardization.  \"Information Technology -- Universal\n     \
    \         Multiple-Octet Coded Character Set (UCS) -- Part 1:\n              Architecture\
    \ and Basic Multilingual Plane\", Geneva, 1993.\n   [RFC1766]  Alvestrand, H.,\
    \ \"Tags for the Identification of\n              Languages\", RFC 1766, March\
    \ 1995.\n   [RFC2070]  Yergeau, F., Nicol, G. Adams, G. and M. Duerst,\n     \
    \         \"Internationalization of the Hypertext Markup Language\",\n       \
    \       RFC 2070, January 1997.\n   [RFC2119]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2130]  Weider, C. Preston, C., Simonsen, K., Alvestrand, H.,\n\
    \              Atkinson, R., Crispin, M. and P. Svanberg, \"The Report of\n  \
    \            the IAB Character Set Workshop held 29 February - 1 March,\n    \
    \          1996\", RFC 2130, April 1997.\n   [UNICODE]  The Unicode Standard,\
    \ Version 2.0, The Unicode Consortium,\n              Addison-Wesley, July 1996.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The following people also contributed to this document,\
    \ directly or\n   indirectly: Chris Newman, Mark Crispin, Rick McGowan, Joe Becker,\n\
    \   John Jenkins, and Asmus Freytag. This document also was reviewed by\n   the\
    \ Unicode Technical Committee, and the authors wish to thank all of\n   the UTC\
    \ representatives for their input. The authors are, of course,\n   responsible\
    \ for any errors or omissions which may remain in the text.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ken Whistler\n   Sybase, Inc.\n   6475 Christie Ave.\n\
    \   Emeryville, CA 94608-1050\n   Phone: +1 510 922 3611\n   EMail: kenw@sybase.com\n\
    \   Glenn Adams\n   Spyglass, Inc.\n   One Cambridge Center\n   Cambridge, MA\
    \ 02142\n   Phone: +1 617 679 4652\n   EMail: glenn@spyglass.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
