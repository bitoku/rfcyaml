- title: __initial_text__
  contents:
  - '          Internet Message Access Protocol - CONVERT Extension

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   CONVERT defines extensions to IMAP allowing clients to request\n\
    \   adaptation and/or transcoding of attachments.  Clients can specify\n   the\
    \ conversion details or allow servers to decide based on knowledge\n   of client\
    \ capabilities, on user or administrator preferences, or on\n   server settings.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  3\n   3.  Relation with Other IMAP Specifications  . . . . . . .\
    \ . . . .  4\n     3.1.  CAPABILITY Response  . . . . . . . . . . . . . . . .\
    \ . . .  4\n   4.  Scope of Conversions . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n   5.  Discovery of Available Conversions . . . . . . . . . . . . .\
    \ .  4\n     5.1.  CONVERSIONS Command  . . . . . . . . . . . . . . . . . . .\
    \  4\n     5.2.  CONVERSION Response  . . . . . . . . . . . . . . . . . . .  6\n\
    \   6.  CONVERT and UID CONVERT Commands . . . . . . . . . . . . . . .  6\n  \
    \ 7.  CONVERT Conversion Parameters  . . . . . . . . . . . . . . . . 12\n    \
    \ 7.1.  Mandatory-to-Implement Conversions and Conversion\n           Parameters\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 12\n     7.2.  Additional Features\
    \ for Mobile Usage . . . . . . . . . . . 13\n   8.  Request/Response Data Items\
    \ to CONVERT/UID CONVERT Commands  . 14\n     8.1.  CONVERTED Untagged Response\
    \  . . . . . . . . . . . . . . . 14\n     8.2.  BODYPARTSTRUCTURE CONVERT Request\
    \ and Response Item  . . . 14\n     8.3.  BINARY.SIZE CONVERT Request and Response\
    \ Item  . . . . . . 15\n     8.4.  AVAILABLECONVERSIONS CONVERT Request and Response\
    \ Item . . 16\n     8.5.  Implementation Considerations  . . . . . . . . . . .\
    \ . . . 17\n   9.  Status Responses and Response Code Extensions  . . . . . .\
    \ . . 17\n   10. Formal Syntax  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 20\n   11. Manageability Considerations . . . . . . . . . . . . . . . . .\
    \ 24\n   12. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 24\n\
    \     12.1. Registration of unknown-character-replacement Media\n           Type\
    \ Parameter . . . . . . . . . . . . . . . . . . . . . . 25\n   13. Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 26\n   14. Acknowledgments  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 27\n   15. References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 28\n     15.1. Normative References . . .\
    \ . . . . . . . . . . . . . . . . 28\n     15.2. Informative References . . .\
    \ . . . . . . . . . . . . . . . 29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines the CONVERT extension to IMAP4 [RFC3501].\n\
    \   CONVERT provides adaptation and transcoding of body parts as needed\n   by\
    \ the client.  Conversion (adaptation, transcoding) may be requested\n   by the\
    \ client and performed by the server on a best effort basis or,\n   when requested\
    \ by the client, decided by the server based on the\n   server's knowledge of\
    \ the client capabilities, user or administrator\n   preferences, or server settings.\n\
    \   This extension is primarily intended to be useful to mobile clients.\n   It\
    \ satisfies requirements specified in [OMA-ME-RD].\n   A server that supports\
    \ CONVERT can convert body parts to other\n   formats to be viewed (for example)\
    \ on a mobile device.  The client\n   can explicitly request a particular conversion\
    \ or ask the server to\n   select the best available conversion.  When allowed\
    \ by the client,\n   the server determines how to convert based on its own strategy\
    \ (e.g.,\n   based on knowledge of the client as discussed hereafter).  If the\n\
    \   server knows the characteristics of the device (out of scope for\n   CONVERT)\
    \ or can determine them (for example, using a conversion\n   parameter containing\
    \ device type), converted body parts can also be\n   optimized for capabilities\
    \ of the device (e.g., form factor of\n   pictures).  The client is able to control\
    \ conversions using optional\n   conversion (also referred to as \"transcoding\"\
    \ in this document)\n   parameters.\n   This document relies on the registry of\
    \ conversion parameters\n   established by [MEDIAFEAT-REG].  The registry can\
    \ be used to discover\n   the underlying legal values that these parameters can\
    \ take.\n   Additional conversion parameters, such as those defined by [OMA-STI],\n\
    \   are expected to be registered in the future.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   In examples, \"C:\" and \"S:\" indicate lines sent by the\
    \ client and\n   server, respectively.  If a single \"C:\" or \"S:\" label applies\
    \ to\n   multiple lines, then the line breaks between those lines are for\n  \
    \ editorial clarity only and are not part of the actual protocol\n   exchange.\
    \  The five characters [...] mean that something has been\n   elided.\n   When\
    \ describing the general syntax, some definitions are omitted as\n   they are\
    \ defined in [RFC3501].  In particular, the term \"session\" is\n   used in this\
    \ document as defined in Section 1.2 of [RFC3501].\n"
- title: 3.  Relation with Other IMAP Specifications
  contents:
  - "3.  Relation with Other IMAP Specifications\n   Conversion of attachments during\
    \ streaming is out of scope for the\n   CONVERT extension and is described in\
    \ a separate Lemonade WG document\n   [LEM-STREAMING].\n   A server claiming compliance\
    \ with this specification MUST support the\n   IMAP Binary specification [RFC3516].\n"
- title: 3.1.  CAPABILITY Response
  contents:
  - "3.1.  CAPABILITY Response\n   A server that supports the CONVERT extension MUST\
    \ return \"CONVERT\"\n   and \"BINARY\" in the CAPABILITY response or response\
    \ code.  (Client\n   and server authors are reminded that the order of tokens\
    \ returned in\n   the CAPABILITY response or response code is arbitrary.)\n  \
    \    Example: A server that implements CONVERT.\n         C: a000 CAPABILITY\n\
    \         S: * CAPABILITY IMAP4rev1 CONVERT BINARY [...]\n         S: a000 OK\
    \ CAPABILITY completed\n"
- title: 4.  Scope of Conversions
  contents:
  - "4.  Scope of Conversions\n   Conversions only affect what is sent to the client;\
    \ the original data\n   in the message store MUST NOT be altered.  This document\
    \ does not\n   specify how the server performs conversions.\n   Note: The requirement\
    \ that original data be unaltered allows such\n   data to remain accessible by\
    \ other clients, permits replies or\n   forwards of the original documents, permits\
    \ signature verification\n   (the converted body parts are not likely to contain\
    \ any signatures),\n   and preserves BODYSTRUCTURE and related information.\n"
- title: 5.  Discovery of Available Conversions
  contents:
  - '5.  Discovery of Available Conversions

    '
- title: 5.1.  CONVERSIONS Command
  contents:
  - "5.1.  CONVERSIONS Command\n   Arguments: source MIME type\n              target\
    \ MIME type\n   Responses: untagged responses: CONVERSION\n   Result:    OK -\
    \ CONVERSIONS command completed\n              BAD - unrecognized syntax of an\
    \ argument, unexpected extra\n                    argument, missing argument,\
    \ etc.\n   The CONVERSIONS command is allowed in Authenticated and Selected IMAP\n\
    \   states.\n   The first parameter to the CONVERSIONS command is a source MIME\
    \ type,\n   the second parameter is the target MIME type.  Both parameters are\n\
    \   partially (e.g., \"text/*\") or completely (\"*\") wildcardable.\n   Conversions\
    \ matching the source/target pair and their associated\n   conversion parameters\
    \ are returned in untagged CONVERSION responses.\n   If source/target doesn't\
    \ match any conversion supported by the\n   server, no CONVERSION response is\
    \ returned.\n   Examples:\n   For conversion information from GIF to JPEG image\
    \ format (no untagged\n   CONVERSION response would be returned if no conversion\
    \ is possible):\n       C: a CONVERSIONS \"image/gif\" \"image/jpeg\"\n      \
    \ S: * CONVERSION \"image/gif\" \"image/jpeg\" (\"pix-y\" \"pix-x\"\n        \
    \   \"image-interleave\")\n       S: a OK CONVERSIONS completed\n   For conversion\
    \ information from GIF image format to anything:\n       C: b CONVERSIONS \"image/gif\"\
    \ \"*\"\n       S: * CONVERSION \"image/gif\" \"image/jpeg\" (\"pix-y\" \"pix-x\"\
    \n           \"image-interleave\")\n       S: * CONVERSION \"image/gif\" \"image/png\"\
    \ ([...])\n       [...]\n       S: b OK CONVERSIONS completed\n   For conversion\
    \ of anything to JPEG:\n       C: c CONVERSIONS \"*\" \"image/jpeg\"\n       S:\
    \ * CONVERSION \"image/gif\" \"image/jpeg\" (\"pix-y\" \"pix-x\"\n           \"\
    image-interleave\")\n       S: * CONVERSION \"image/png\" \"image/jpeg\" (...)\n\
    \       [...]\n       S: c OK CONVERSIONS completed\n   For conversions from all\
    \ image formats to all text formats, the\n   client can issue the following command:\n\
    \       C: d CONVERSIONS \"image/*\" \"text/*\"\n"
- title: 5.2.  CONVERSION Response
  contents:
  - "5.2.  CONVERSION Response\n   Contents:  source MIME type\n              target\
    \ MIME type\n              optional list of supported conversion parameters\n\
    \   As a result of executing a CONVERSIONS command, the server can return\n  \
    \ one or more CONVERSION responses.  Each CONVERSION response specifies\n   which\
    \ source MIME type can be converted to the target MIME type, and\n   also lists\
    \ supported conversion parameters.\n"
- title: 6.  CONVERT and UID CONVERT Commands
  contents:
  - "6.  CONVERT and UID CONVERT Commands\n   Arguments: sequence set\n          \
    \    conversion parameters\n              CONVERT data item names\n   Responses:\
    \ untagged responses: CONVERTED\n   Result:    OK - convert completed\n      \
    \        NO - convert error: can't fetch and/or convert that data\n          \
    \    BAD - unrecognized syntax of an argument, unexpected extra\n            \
    \        argument, missing argument, etc.\n   The CONVERT extension defines CONVERT\
    \ and UID CONVERT commands that\n   are used to transcode the media type of a\
    \ MIME part into another\n   media type, and/or the same media type with different\
    \ encoding\n   parameters.  These commands are structured and behave similarly\
    \ to\n   FETCH/UID FETCH commands as extended by [RFC3516]:\n   o  A successful\
    \ CONVERT/UID CONVERT command results in one or more\n      untagged CONVERTED\
    \ responses (one per message).  They are similar\n      to the untagged FETCH\
    \ responses.  Note that a single CONVERT/ UID\n      CONVERT command can only\
    \ perform a single type of conversion as\n      defined by the conversion parameters.\
    \  A client that needs to\n      perform multiple different conversions needs\
    \ to issue multiple\n      CONVERT/UID CONVERT commands.  Such a client MAY pipeline\
    \ them.\n   o  BINARY[...] data item requests conversion of a body part or of\
    \ the\n      whole message according to conversion parameters and requests that\n\
    \      the converted message/body part be returned as binary.\n   o  BINARY.SIZE\
    \ data item is similar to RFC822.SIZE, but it requests\n      size of a converted\
    \ body part/message.\n   o  BODYPARTSTRUCTURE data item is similar to BODYSTRUCTURE\
    \ FETCH data\n      item, but it returns the MIME structure of the converted body\n\
    \      part.\n   o  BODY[...HEADER] encoded words in the requested headers are\n\
    \      converted to the specified charset.  The CHARSET parameter is\n      REQUIRED\
    \ for this conversion.\n   o  BODY[...MIME] encoded words in the requested headers\
    \ are converted\n      to the specified charset.  The CHARSET parameter is REQUIRED\
    \ for\n      this conversion.\n   o  AVAILABLECONVERSIONS data item requests the\
    \ list of target MIME\n      types the specified body part (or the whole message)\
    \ can be\n      converted to.\n   The CONVERT extension also adds one new response\
    \ code.  See Section 9\n   for more details.\n   Typically clients will request\
    \ conversion of leaf body parts.  In\n   addition to support of leaf body part\
    \ conversion, servers MAY offer\n   conversion of non-leaf body parts (e.g., conversion\
    \ from multipart/\n   related).\n   Instead of specifying the exact target MIME\
    \ media type the client\n   wants to convert to, the client MAY use a special\
    \ marker NIL (also\n   known as \"default conversion\") to request the server\
    \ to pick a\n   suitable target media type.  This document doesn't describe how\n\
    \   exactly the server makes such a choice; however, some basic\n   guidelines\
    \ are described in this paragraph.  If the server knows\n   characteristics of\
    \ the device using an in-band (such as device type\n   specified in a conversion\
    \ parameter) or an out-of-band mechanism,\n   then it should convert the request\
    \ body part to a media type the\n   device is likely to support and display/play\
    \ successfully.  Unless\n   specifically overridden by a conversion parameter,\
    \ the server MAY\n   also remove any unnecessary detail that exceeds the capabilities\
    \ of\n   the device (e.g., scaling images to just fit on the device's screen).\n\
    \   In the absence of any in-band or out-of-band mechanism for\n   determining\
    \ device characteristics, the server should convert the\n   request body part\
    \ to the most standard or widely deployed media type\n   available in that media\
    \ category, for example, to convert to text/\n   plain, image/jpeg.  In such case,\
    \ the server should minimize quality\n   loss.  Servers are REQUIRED to support\
    \ \"default conversion\" requests.\n   Server implementations that support conversions\
    \ to multiple target\n   MIME types SHOULD make the default conversion configurable.\
    \  Clients\n   SHOULD avoid using the default conversion unless they provided\
    \ a way\n   (in-band or out-band) to signal their capabilities to the server,\
    \ as\n   there is no guaranty that the server would guess their capability\n \
    \  correctly.  Client implementors should consider using\n   AVAILABLECONVERSIONS\
    \ CONVERT data item or CONVERSIONS command instead\n   of the default conversion.\n\
    \   CONVERT's command syntax is modeled after the FETCH command syntax in\n  \
    \ [RFC3501], as extended by [RFC3516].  CONVERT data items are\n   generally structured\
    \ as:\n       BINARY[section-part]<partial>\n       BINARY.SIZE[section-part]\n\
    \       BODYPARTSTRUCTURE[section-part]\n       BODY[HEADER]\n       BODY[section-part.HEADER]\n\
    \       BODY[section-part.MIME]\n       AVAILABLECONVERSIONS[section-part]\n \
    \  The semantics of a partial CONVERT BINARY[...] command is the same as\n   for\
    \ a partial FETCH BODY[...] command, with the exception that the\n   <partial>\
    \ arguments refer to the TRANSCODED and DECODED section data.\n   Note that unlike\
    \ the FETCH command, the CONVERT command never sets\n   the \\Seen flag on converted\
    \ messages.  A client wishing to mark a\n   message with the \\Seen flag would\
    \ need to issue a STORE command\n   (possibly pipelined with the CONVERT request)\
    \ to do that.\n   The UID CONVERT command is different from the CONVERT command\
    \ in the\n   same way as the UID FETCH command is different from the FETCH\n \
    \  command:\n   o  UID CONVERT takes as a parameter a sequence of UIDs instead\
    \ of a\n      sequence of message numbers.\n   o  UID CONVERT command MUST result\
    \ in the UID data item in a\n      corresponding CONVERTED response.\n   o  An\
    \ EXPUNGE response MUST NOT be sent while responding to a CONVERT\n      command.\
    \  This rule is necessary to prevent a loss of\n      synchronization of message\
    \ sequence numbers between client and\n      server.  Note that an EXPUNGE response\
    \ MAY be sent during a UID\n      CONVERT command.\n   Example: The client fetches\
    \ body part section 3 in the message with\n   the message sequence number of 2\
    \ and asks to have that attachment\n   converted to pdf format.\n     C: a001\
    \ CONVERT 2 (\"APPLICATION/PDF\") BINARY[3]\n     S: * 2 CONVERTED (TAG \"a001\"\
    ) (BINARY[3] {2135}\n        <the document in .pdf format>\n        )\n     S:\
    \ a001 OK CONVERT COMPLETED\n   Example: The client requests for conversion of\
    \ a text/html body part\n   to text/plain and asks for a charset of us-ascii.\
    \  The server cannot\n   respect the charset conversion request because there\
    \ are non-us-ascii\n   characters in the text/html body part, so it fails the\
    \ request by\n   returning an ERROR phrase in place of the converted data (see\n\
    \   Section 9).\n     C: b001 CONVERT 2 (\"text/plain\" (\"charset\" \"us-ascii\"\
    )) BINARY[3]\n     S: * 2 CONVERTED (tag \"b001\") (BINARY[3]\n         (ERROR\
    \ \"Source text has non us-ascii\" BADPARAMETERS\n         \"text/html\" \"text/plain\"\
    \ (\"charset\" \"us-ascii\")))\n     S: b001 NO All conversions failed\n   If\
    \ the client also specified the \"unknown-character-replacement\"\n   conversion\
    \ parameter (see Section 12.1), the same example can look\n   like this:\n   \
    \  C: b001 CONVERT 2 (\"text/plain\" (\"charset\" \"us-ascii\"\n         \"unknown-character-replacement\"\
    \ \"?\")) BINARY[3]\n     S: * 2 CONVERTED (TAG \"b001\") (BINARY[3] {2135}\n\
    \         <the document in text/plain format with us-ascii\n          charset>\n\
    \        )\n     S: b001 OK CONVERT COMPLETED\n   The server replaced non-us-ascii\
    \ characters with a us-ascii character\n   such as \"?\".\n   Example: The client\
    \ first requests the converted size of a text/html\n   body part converted to\
    \ text/plain:\n     C: c000 CONVERT 2 (\"TEXT/PLAIN\" (\"CHARSET\" \"us-ascii\"\
    ))\n         BINARY.SIZE[4]\n     S: * 2 CONVERTED (TAG \"c000\") (BINARY.SIZE[4]\
    \ 3135)\n     S: c000 OK CONVERT COMPLETED\n   Later on, the client requests 1000\
    \ bytes from the converted body\n   part, starting from byte 2001:\n     C: c001\
    \ CONVERT 2 (\"TEXT/PLAIN\" (\"CHARSET\" \"us-ascii\"))\n         BINARY[4]<2001.1000>\n\
    \     S: * 2 CONVERTED (TAG \"c001\") (BINARY[4]<2001> {135}\n          <bytes\
    \ 2001 - 2135 of the document in text/plain format>\n          )\n     S: c001\
    \ OK CONVERT COMPLETED\n   The server MUST respect the target MIME type and conversion\n\
    \   parameters specified by the client in the transcoding request.  Note\n   that\
    \ some conversion parameters can restrict what kind of conversion\n   is possible,\
    \ while others can remove some restrictions.\n   It is legal for a client to request\
    \ conversion of a non-leaf body\n   part, for example, to request conversion of\
    \ a multipart/* into a PDF\n   document.  However, servers implementing this extension\
    \ are not\n   required to support such conversions.  Servers that support such\n\
    \   conversions MUST return one or more CONVERSION responses in response\n   to\
    \ a 'CONVERSIONS \"multipart/*\" \"*\"' command.  See Section 5.1 for\n   more\
    \ details.\n   The client can request header conversions using the BODY[...HEADER]\n\
    \   CONVERT request, for example\n        C: D001 FETCH 2 BODY[HEADER]\n     \
    \   S: * 2 FETCH (BODY[HEADER] {158}\n        S: Date: Mon, 20 Apr 2007 20:05:43\
    \ +0200\n        S: From: Peter <peter@siroe.example.com>\n        S: To: Alexey\
    \ <alexey@siroe.example.com>\n        S: Subject: =?KOI8-R?Q?why encode this?=\n\
    \        S:\n        S: )\n        S: D001 OK\n        C: D002 CONVERT 2 (NIL\
    \ (\"CHARSET\" \"utf-8\")) BODY[HEADER]\n        S: * 2 CONVERTED (TAG \"d002\"\
    ) (BODY[HEADER] {157}\n        S: Date: Mon, 20 Apr 2007 20:05:43 +0200\n    \
    \    S: From: Peter <peter@siroe.example.com>\n        S: To: Alexey <alexey@siroe.example.com>\n\
    \        S: Subject: =?UTF-8?Q?why encode this?=\n        S:\n        S: )\n \
    \       S: D002 OK\n   Any such request MUST include the CHARSET parameter.  Upon\
    \ receipt of\n   the request, the server MUST decode any encoded words (as described\n\
    \   in [RFC2047]) in headers and return them re-encoded in the specified\n   charset.\
    \  (Note that encoded-words might not be needed if the result\n   can be represented\
    \ entirely in US-ASCII, so the server MAY replace\n   the resulting encoded-words\
    \ with their pure US-ASCII representation.)\n   If the server can't decode any\
    \ particular encoded word, for example,\n   if the charset or encoding is not\
    \ recognized, it MUST leave them as\n   is.  Servers SHOULD also support decoding\
    \ of any parameters as\n   described in [RFC2231].  Support for RFC 2231 parameters\
    \ might\n   require reformatting of header fields during conversion.  Consider\n\
    \   the following\n        C: D011 FETCH 3 BODY[1.MIME]\n        S: * 3 FETCH\
    \ (BODY[1.MIME] {118}\n        S: Content-Type: text/plain; charset=utf-8;\n \
    \       S:  foo*0*=utf-8'fr'tr%c0;\n        S:  foo*1*(very)=%03s_m%c0;\n    \
    \    S:  foo*2*=(nasty)%09chant\n        S:\n        S: D011 OK\n   The server\
    \ should preserve the headers during the conversion as much\n   as possible. \
    \ In case the characters are split (legally!) between\n   fragments of an encoded\
    \ parameter, the server MUST consolidate the\n   parameter fragments, and convert,\
    \ emit, and re-fragment them as\n   necessary in order to keep the line length\
    \ less than 78.  Comments\n   embedded like this SHOULD be preserved during conversion,\
    \ but clients\n   MUST gracefully handle the situation where comments are removed\n\
    \   entirely.  If the comments are preserved, they MAY be moved after the\n  \
    \ parameter.  For example (continuing the previous example):\n        C: D012\
    \ CONVERT 3 (NIL) BODY[1.MIME]\n        S: * 3 CONVERTED (TAG \"D012\") (BODY[1.MIME]\
    \ {109}\n        S: Content-Type: text/plain; charset=utf-8;\n        S:  foo*0*=utf-8'fr'tr%c0%03s_;\n\
    \        S:  foo*1*=%m%c0%09chant (very)(nasty)\n        S:\n        S: D012 OK\n\
    \   No destination MIME type MUST be specified with BODY[HEADER],\n   BODY[section.HEADER],\
    \ or BODY[section.MIME].  That is, BODY[HEADER],\n   BODY[section.HEADER], or\
    \ BODY[section.MIME] can only be used with the\n   \"default conversion\".  When\
    \ performing these conversions, the server\n   SHOULD leave encoded words as encoded\
    \ words.  A failure to do so may\n   alter the semantics of structured headers.\n"
- title: 7.  CONVERT Conversion Parameters
  contents:
  - "7.  CONVERT Conversion Parameters\n   The registry established by [MEDIAFEAT-REG]\
    \ defines names of\n   conversion parameters that can be used in the CONVERT command.\n\
    \   Support for some conversion parameters is mandatory, as described in\n   Section\
    \ 7.1.\n   According to [MEDIAFEAT-REG], conversion parameter names are case-\n\
    \   insensitive.\n   The following example illustrates how target picture dimensions\
    \ can\n   be specified in a CONVERT request using the PIX-X and PIX-Y\n   parameters\
    \ defined in [DISP-FEATURES].\n        C: e001 UID CONVERT 100 (\"IMAGE/JPEG\"\
    \ (\"PIX-X\" \"128\"\n            \"PIX-Y\" \"96\")) BINARY[2]\n        S: * 2\
    \ CONVERTED (TAG \"e001\") (UID 100 BINARY[2] ~{4182}\n           <this part of\
    \ a document is a rescaled image in\n            JPEG format with width=128, height=96.>\n\
    \           )\n        S: e001 OK UID CONVERT COMPLETED\n"
- title: 7.1.  Mandatory-to-Implement Conversions and Conversion Parameters
  contents:
  - "7.1.  Mandatory-to-Implement Conversions and Conversion Parameters\n   A server\
    \ implementing CONVERT MUST support charset conversions for\n   the text/plain\
    \ MIME type, and MUST support charset conversions from\n   iso-8859-1, iso-8859-2,\
    \ iso-8859-3, iso-8859-4, iso-8859-5,\n   iso-8859-6, iso-8859-7, iso-8859-8,\
    \ and iso-8859-15 to utf-8.\n   The server MUST list \"text/plain\" as an allowed\
    \ destination\n   conversion from \"text/plain\" MIME type (see Section 5.1).\
    \  A command\n   'CONVERSIONS \"text/plain\" \"text/plain\"' MUST also return\
    \ \"charset\"\n   and \"unknown-character-replacement\" (see Section 12.1) as\
    \ supported\n   conversion parameters in the corresponding CONVERSION response.\n\
    \   IMAP servers implementing the CONVERT extension MUST support\n   recognition\
    \ of the \"charset\" [CHARSET-REG] parameter for text/plain,\n   text/html, text/css,\
    \ text/csv, text/enriched, and text/xml MIME\n   types.  Note, a server implementation\
    \ is not required to support any\n   conversion from the text MIME subtypes specified\
    \ above, except for\n   the mandatory-to-implement conversion described above.\
    \  That is, a\n   server implementation MUST support the \"charset\" parameter\
    \ for text/\n   csv, only if it supports any conversion from text/csv.\n   The\
    \ server MUST support decoding of [RFC2047] headers and their\n   conversion to\
    \ UTF-8 as long as the encoded words are in one of the\n   supported charsets.\n\
    \   Servers SHOULD offer additional character encoding conversions where\n   they\
    \ make sense, as character conversion libraries are generally\n   available on\
    \ many platforms.\n   If the server cannot carry out the charset conversion while\n\
    \   preserving all the characters (i.e., a source character can't be\n   represented\
    \ in the target charset), and the \"unknown-character-\n   replacement\" conversion\
    \ parameter is not specified, then the server\n   MUST fail the conversion and\
    \ MUST return the untagged ERROR\n   BADPARAMETERS response (see Section 9). \
    \ If the value specified in\n   the \"unknown-character-replacement\" conversion\
    \ itself can't be\n   represented in the target charset, then the server MUST\
    \ also fail the\n   conversion and MUST return the untagged ERROR BADPARAMETERS\
    \ response\n   (see Section 9).\n"
- title: 7.2.  Additional Features for Mobile Usage
  contents:
  - "7.2.  Additional Features for Mobile Usage\n   This section is informative.\n\
    \   Based on the expected usage of CONVERT in mobile environments, server\n  \
    \ implementors should consider support for the following conversions:\n   o  Conversion\
    \ of HTML and XHTML documents to text/plain in ways that\n      preserve at the\
    \ minimum the document structure and tables.\n   o  Image conversions among the\
    \ types image/gif, image/jpeg, and\n      image/png for at least the following\
    \ parameters:\n      *  size limit (i.e., reduce quality)\n      *  width (\"\
    pix-x\" parameter)\n      *  height (\"pix-y\" parameter)\n      *  resize directive\
    \ (crop, stretch, aspect ratio)\n      The support for \"depth\" may also be of\
    \ interest.\n   Audio conversion is also of interest but the relevant formats\
    \ depend\n   significantly on the usage context.\n"
- title: 8.  Request/Response Data Items to CONVERT/UID CONVERT Commands
  contents:
  - '8.  Request/Response Data Items to CONVERT/UID CONVERT Commands

    '
- title: 8.1.  CONVERTED Untagged Response
  contents:
  - "8.1.  CONVERTED Untagged Response\n   Contents:  convert correlator\n       \
    \       CONVERTED return data items\n   The CONVERTED response may be sent as\
    \ a result of a successful,\n   partially successful, or unsuccessful CONVERT\
    \ or UID CONVERT command\n   specified in Section 6.\n   The CONVERTED response\
    \ starts with a message number, followed by the\n   \"CONVERTED\" label.  The\
    \ label is followed by a convert correlator,\n   which contains the tag of the\
    \ command that caused the response to be\n   returned.  This can be used by a\
    \ client to match a CONVERTED response\n   against a corresponding CONVERT/UID\
    \ CONVERT command.\n   The convert correlator is followed by a list of one or\
    \ more CONVERT\n   return data items.  If the UID data item is returned, it MUST\
    \ be\n   returned as the first data item in the CONVERTED response.  This\n  \
    \ requirement is to simplify client implementations.  See Section 10\n   and the\
    \ remainder of Section 8 for more details.\n"
- title: 8.2.  BODYPARTSTRUCTURE CONVERT Request and Response Item
  contents:
  - "8.2.  BODYPARTSTRUCTURE CONVERT Request and Response Item\n   BODYPARTSTRUCTURE[section-part]\n\
    \   The CONVERT extension defines the BODYPARTSTRUCTURE CONVERT data\n   item.\
    \  Data contained in the BODYPARTSTRUCTURE return data item\n   follows the exact\
    \ syntax specified in the [RFC3501] BODYSTRUCTURE\n   data item, but only contains\
    \ information for the converted part.  All\n   information contained in BODYPARTSTRUCTURE\
    \ pertains to the state of\n   the part after it is converted, such as the converted\
    \ MIME type, sub-\n   type, size, or charset.  Note that the client can expect\
    \ the returned\n   MIME type to match the one it requested (as the server is required\
    \ to\n   obey the requested MIME type) and can treat mismatch as an error.\n \
    \  The returned BODYPARTSTRUCTURE data MUST match the BINARY data\n   returned\
    \ for exactly the same conversion in the same IMAP \"session\".\n   This requirement\
    \ allows a client to request BODYPARTSTRUCTURE and\n   BINARY data in separate\
    \ commands in the same IMAP session.\n   If the client lists a BODYPARTSTRUCTURE\
    \ data item for a section-part\n   before a BINARY data item for the same section-part,\
    \ then, in the\n   CONVERTED response, the server MUST return the BODYPARTSTRUCTURE\
    \ data\n   prior to the corresponding BINARY data.  Also, any BODYSTRUCTURE data\n\
    \   items MUST be after the UID data item if the UID data item is\n   present.\
    \  Both requirements are to simplify handling of converted\n   data in clients.\n\
    \   Example:\n         C: e002 CONVERT 2 (NIL (\"PIX-X\" \"128\" \"PIX-Y\" \"\
    96\")) (BINARY[2]\n             BODYPARTSTRUCTURE[2])\n         S: * 2 CONVERTED\
    \ (TAG \"e002\") (BODYPARTSTRUCTURE[2] (\"IMAGE\"\n             \"JPEG\" () NIL\
    \ NIL \"8bit\" 4182 NIL NIL NIL) BINARY[2]\n             ~{4182}\n           \
    \ <this part of a document is a rescaled image in\n             JPEG format with\
    \ width=128, height=96.>\n            )\n         S: e002 OK CONVERT COMPLETED\n"
- title: 8.3.  BINARY.SIZE CONVERT Request and Response Item
  contents:
  - "8.3.  BINARY.SIZE CONVERT Request and Response Item\n   BINARY.SIZE[section-part]\n\
    \   This item requests the converted size of the section (i.e., the size\n   to\
    \ expect in a response to the corresponding CONVERT BINARY request).\n   The returned\
    \ value MUST be exact and MUST NOT change during a\n   duration of an IMAP \"\
    session\", unless the message is expunged in\n   another session (see below).\
    \  This allows a client to download a\n   converted part in chunks (using \"<partial>\"\
    ).  This requirement means\n   that in most cases the server needs to perform\
    \ conversion of the\n   requested body part before returning its size.\n   If\
    \ the message is expunged in another session, then the server MAY\n   return the\
    \ value 0 in response to the BINARY.SIZE request item later\n   in the same session.\n\
    \   In order to allow for upgrade of server transcoding components,\n   clients\
    \ MUST NOT assume that repeating a particular body part\n   conversion in another\
    \ IMAP \"session\" would yield the same result as a\n   previous conversion of\
    \ the very same body part -- any characteristics\n   of the converted body part\
    \ might be different (format, size, etc.).\n   In particular, clients MUST NOT\
    \ cache sizes of converted messages/\n   body parts beyond duration of any IMAP\
    \ \"session\", or use sizes\n   obtained in one connection in another IMAP connection\
    \ to the same\n   server.\n   Historical note: Previous experience with IMAP servers\
    \ that returned\n   estimated RFC822.SIZE value shows that this caused interoperability\n\
    \   problems.  If the server returns a value that is smaller than the\n   actual\
    \ size, this will result in data truncation if <partial>\n   download is used.\
    \  If the server returns a value that is bigger than\n   the actual size, this\
    \ might mislead a client to believe that it\n   doesn't have enough storage to\
    \ download a body part.\n   Note for client implementors: client authors are cautioned\
    \ that this\n   might be an expensive operation for some server implementations.\n\
    \   Requesting BINARY.SIZE for a large number of converted body parts or\n   for\
    \ multiple conversions of the same body part can result in slow\n   performance\
    \ and/or excessive server load and is discouraged.  Client\n   implementors should\
    \ consider implementation approaches that limit\n   this request to only the most\
    \ necessary cases and are encouraged to\n   test the performance impact of BINARY.SIZE\
    \ with multiple server\n   implementations.\n"
- title: 8.4.  AVAILABLECONVERSIONS CONVERT Request and Response Item
  contents:
  - "8.4.  AVAILABLECONVERSIONS CONVERT Request and Response Item\n   AVAILABLECONVERSIONS[section-part]\
    \ allows the client to request the\n   list of target MIME types the specified\
    \ body part of a message or the\n   whole message can be converted to.  This data\
    \ item is only useful\n   when the default conversion (see Section 6) is requested.\n\
    \   This data item MUST return a list of target MIME types that is a\n   subset\
    \ of the list returned by the CONVERSIONS command for the same\n   source and\
    \ target MIME type pairs.  If specific conversion is\n   requested, it MUST return\
    \ the target MIME type as requested in the\n   CONVERT command, or the ERROR phrase.\n\
    \   For both specific or default conversion requests, if conversion\n   parameters\
    \ are specified, then the server must take them into\n   consideration when generating\
    \ the list of target MIME types.  For\n   example, if one or more of the conversion\
    \ parameters doesn't apply to\n   a potential target MIME type, then such MIME\
    \ type MUST be omitted\n   from the resulting list.  If the server only had a\
    \ single target MIME\n   type candidate and it was discarded due to the list of\
    \ conversion\n   parameters, then the server SHOULD return the ERROR phrase instead\
    \ of\n   the empty list of the target MIME types.\n   The AVAILABLECONVERSIONS\
    \ request SHOULD be processed quickly if\n   specified by itself.  Note that if\
    \ a MIME type is returned in\n   response to the AVAILABLECONVERSIONS, there is\
    \ no guaranty that the\n   corresponding BINARY/BINARY.SIZE/BODYPARTSTRUCTURE\
    \ CONVERT request\n   will not fail.\n      Example:\n            C: f001 CONVERT\
    \ 2 (NIL) (AVAILABLECONVERSIONS[2])\n            S: * 2 CONVERTED (TAG \"f001\"\
    ) (AVAILABLECONVERSIONS[2]\n                        ((\"IMAGE/JPEG\" \"application/PostScript\"\
    ))\n            S: f001 OK CONVERT COMPLETED\n"
- title: 8.5.  Implementation Considerations
  contents:
  - "8.5.  Implementation Considerations\n   Note that this section is normative.\n\
    \   Servers MAY refuse to execute conversion requests that convert\n   multiple\
    \ messages and/or body parts at once, e.g., a conversion\n   request that specifies\
    \ multiple message numbers/UIDs.  If the server\n   refuses a conversion because\
    \ the request lists too many messages, the\n   server MUST return the MAXCONVERTMESSAGES\
    \ response code (see\n   Section 9).  For example:\n       C: g001 CONVERT 1:*\
    \ (\"text/plain\" (\"charset\" \"us-ascii\"))\n           BINARY[3]\n       S:\
    \ g001 NO [MAXCONVERTMESSAGES 1]\n   If the server refuses a conversion because\
    \ the request lists too many\n   body parts, the server MUST return the MAXCONVERTPARTS\
    \ response code\n   (see Section 9).  For example:\n      C: h001 CONVERT 1 (\"\
    text/plain\" (\"charset\" \"us-ascii\"))\n          (BINARY[1] BINARY[2])\n  \
    \    S: g001 NO [MAXCONVERTPARTS 1] You can only request 1 body part at\n    \
    \      any given time\n   Note for server implementors: In order to improve performance,\n\
    \   implementations SHOULD cache converted body parts.  For example, the\n   server\
    \ may perform a body part conversion when it receives the first\n   BINARY.SIZE[...],\
    \ BODYPARTSTRUCTURE[...], or BINARY[...] request and\n   cache it until the client\
    \ requests conversion/download of another\n   body part, a different conversion\
    \ of the same body part, or until the\n   mailbox is closed.  In order to mitigate\
    \ denial-of-service attacks\n   from misbehaving or badly-written clients, a server\
    \ SHOULD limit the\n   number of converted body parts it can cache.  Servers SHOULD\
    \ be able\n   to cache at least 2 conversions at any given time.\n"
- title: 9.  Status Responses and Response Code Extensions
  contents:
  - "9.  Status Responses and Response Code Extensions\n   A syntactically invalid\
    \ MIME media type SHOULD generate a BAD tagged\n   response from the server. \
    \ An unrecognized MIME media type generates\n   a NO tagged response.\n   Some\
    \ transcodings may require parameters.  If a transcoding request\n   with no parameters\
    \ is sent for a format which requires parameters,\n   the server will return an\
    \ ERROR MISSINGPARAMETERS phrase in place of\n   the data associated with the\
    \ data items requested.  This is analogous\n   to the NIL response in FETCH, but\
    \ with structured data associated\n   with the failure.\n   If the server is unable\
    \ to perform the requested conversion because a\n   resource is temporary unavailable\
    \ (e.g., lack of disk space,\n   temporary internal error, transcoding service\
    \ down), then the server\n   MUST return a tagged NO response that SHOULD contain\
    \ the TEMPFAIL\n   response code (see below), or an ERROR TEMPFAIL phrase.\n \
    \  If the requested conversion cannot be performed because of a\n   permanent\
    \ error, for example, if a proprietary document format has no\n   existing transcoding\
    \ implementation, the server MUST return a\n   CONVERTED response containing a\
    \ ERROR BADPARAMETERS or ERROR\n   MISSINGPARAMETERS phrase.\n   The server MAY\
    \ choose to return one ERROR phrase for a single\n   conversion if several related\
    \ data items are requested.  For\n   instance:\n     C: b002 CONVERT 2 (\"text/plain\"\
    \ (\"charset\" \"us-ascii\"))\n         (BINARY[3] BODYPARTSTRUCTURE[3])\n   \
    \  S: * 2 CONVERTED (tag \"b002\") (BODYPARTSTRUCTURE[3]\n         (ERROR \"Source\
    \ text has non us-ascii\" BADPARAMETERS\n         \"text/html\" \"text/plain\"\
    \ (\"charset\" \"us-ascii\")))\n     S: b002 NO All conversions failed\n   If\
    \ at least one conversion succeeds, the server MUST return an OK\n   response.\
    \  If all conversions fail, the server MAY return OK or NO.\n   For instance:\n\
    \     C: b002 CONVERT 2 (\"text/plain\" (\"charset\" \"us-ascii\"))\n        \
    \ (BINARY[3] BODYPARTSTRUCTURE[3] BINARY[4]\n         BODYPARTSTRUCTURE[4])\n\
    \     S: * 2 CONVERTED (tag \"b002\") (BODYPARTSTRUCTURE[3]\n         (ERROR \"\
    Source text has non us-ascii\" BADPARAMETERS\n         \"text/html\" \"text/plain\"\
    \ (\"charset\" \"us-ascii\"))\n         BODYSTRUCTURE[4] (\"TEXT\" \"PLAIN\" (CHARSET\
    \ US-ASCII)\n         NIL NIL \"8bit\" 4182 NIL NIL NIL) BINARY[4] {4182}\n  \
    \         <body in text plain>\n        )\n     S: b002 OK Some conversions failed\n\
    \   In general, the client can tell from the BODYPARTSTRUCTURE response\n   whether\
    \ or not its request was honored exactly, but may not know the\n   reasons why.\n\
    \   This document defines the following response codes that can be\n   returned\
    \ in the tagged NO response code.\n   TEMPFAIL -  The transcoding request failed\
    \ temporarily.  It might\n         succeed later, so the client MAY retry.\n \
    \  MAXCONVERTMESSAGES <number> -  The server is unable or unwilling to\n     \
    \    convert more than <number> messages in any given CONVERT/UID\n         CONVERT\
    \ request.\n   MAXCONVERTPARTS <number> -  The server is unable or unwilling to\n\
    \         convert more than <number> body parts of a message at once in\n    \
    \     any given CONVERT/UID CONVERT request.\n   The word ERROR is always followed\
    \ by an informal human-readable\n   descriptive text, which is followed by the\
    \ convert-error-code.  The\n   convert-error-code MUST be one of the following:\n\
    \   TEMPFAIL mm -  The transcoding request failed temporarily.  It might\n   \
    \      succeed later, so the client MAY retry.  The client SHOULD wait\n     \
    \    for at least mm minutes before retrying.\n   BADPARAMETERS  from-concrete-mime-type\
    \ to-mime-type\n   \"(\" transcoding-params \")\" -\n         The listed parameters\
    \ were not understood, not valid for the\n         source/destination MIME type\
    \ pair, had invalid values or could\n         not be honored for another reason\
    \ noted in the human-readable\n         text that was specified after the ERROR\
    \ label.  The\n         transcoding-params can be omitted, in which case, it means\
    \ that\n         the conversion from the from-concrete-mime-type to the to-mime-\n\
    \         type is not possible.  If the from-concrete-mime-type is NIL,\n    \
    \     this means that the specified body part doesn't exist.  All\n         unrecognized\
    \ or irrelevant parameters MUST be listed in the\n         transcoding-params.\
    \  It is not legal behavior to ignore\n         irrelevant parameters.\n     \
    \    Note that if the client requested the \"default conversion\" (see\n     \
    \    Section 6), the to-mime-type contains the destination MIME type\n       \
    \  chosen by the server.\n   MISSINGPARAMETERS  from-concrete-mime-type to-mime-type\n\
    \   \"(\" transcoding-params \")\" -\n         The listed parameters are required\
    \ for conversion of the\n         specified source MIME type to the destination\
    \ MIME type, but\n         were not seen in the request.  Note that if the client\n\
    \         requested the \"default conversion\" (see Section 6), the to-\n    \
    \     mime-type contains the destination MIME type chosen by the\n         server.\n\
    \      Examples:\n         C: b002 CONVERT 2 (\"APPLICATION/PDF\") BINARY[3]\n\
    \         S: b002 NO [TEMPFAIL] All conversions failed\n         C: b003 CONVERT\
    \ 2 (\"TEXT/PLAIN\") BINARY[3]\n         S: * 2 CONVERTED (tag \"b003\") (BINARY[3]\n\
    \             (ERROR \"CHARSET must be specified for text conversions\"\n    \
    \         MISSINGPARAMETERS (CHARSET)))\n         S: b003 NO All conversions failed\n\
    \         C: b005 CONVERT 2 (\"TEXT/PLAIN\" (CHARSET \"US-ASCII\"\n          \
    \         UNKNOWN-CHARACTER-REPLACEMENT \"<badchar>\")) BINARY[3]\n         S:\
    \ * 2 CONVERTED (tag \"b005\") (BINARY[3]\n             (ERROR \"UNKNOWN-CHARACTER-REPLACEMENT\
    \ limited to 4\n             bytes\" BADPARAMETERS (UNKNOWN-CHARACTER-REPLACEMENT\n\
    \             \"<badchar>\")))\n         S: b005 NO All conversions failed\n"
- title: 10.  Formal Syntax
  contents:
  - "10.  Formal Syntax\n   The following syntax specification uses the augmented\
    \ Backus-Naur\n   Form (ABNF) notation as used in [ABNF], and incorporates by\
    \ reference\n   the core rules defined in that document.\n   This syntax augments\
    \ the grammar specified in [RFC3501] and\n   [RFC3516].  Non-terminals not defined\
    \ in this document can be found\n   in [RFC3501], [RFC3516], [IMAPABNF], [MIME-MTSRP],\
    \ and\n   [MEDIAFEAT-REG].\n       command-select  =/ convert\n       uid    \
    \         =/ \"UID\" SP convert\n                     ; Unique identifiers used\
    \ instead of message\n                     ; sequence numbers\n       convert\
    \         = \"CONVERT\" SP sequence-set SP convert-params SP\n               \
    \          ( convert-att /\n                           \"(\" convert-att *(SP\
    \ convert-att) \")\" )\n       convert-att     = \"UID\" /\n                 \
    \        \"BODYPARTSTRUCTURE\" section-convert /\n                         \"\
    BINARY\" section-convert [partial] /\n                         \"BINARY.SIZE\"\
    \ section-convert /\n                         \"BODY[HEADER]\" /\n           \
    \              \"BODY[\" section-part \".HEADER]\" /\n                       \
    \  \"BODY[\" section-part \".MIME]\" /\n                         \"AVAILABLECONVERSIONS\"\
    \ section-convert\n                     ; <partial> is defined in [RFC3516].\n\
    \                     ; <section-part> is defined in [RFC3501].\n       convert-params\
    \ = \"(\" (quoted-to-mime-type / default-conversion)\n                       \
    \ [SP \"(\" transcoding-params \")\"] \")\"\n       quoted-to-mime-type = DQUOTE\
    \ to-mime-type DQUOTE\n       transcoding-params  = transcoding-param\n      \
    \                       *(SP transcoding-param)\n       transcoding-param-names\
    \  = transcoding-param-name\n                             *(SP transcoding-param-name)\n\
    \       transcoding-param  = transcoding-param-name SP\n                     \
    \       transcoding-param-value\n       transcoding-param-name = astring\n   \
    \             ; <transcod-param-name-nq> represented as a quoted,\n          \
    \      ; literal or atom.  Note that\n                ; <transcod-param-name-nq>\
    \ allows for \"%\", which is\n                ; not allowed in atoms.  Such values\
    \ must be\n                ; represented as quoted or literal.\n       transcod-param-name-nq\
    \ = Feature-tag\n                ; <Feature-tag> is defined in [MEDIAFEAT-REG].\n\
    \       transcoding-param-value = astring\n       default-conversion = \"NIL\"\
    \n       message-data   =/ nz-number SP \"CONVERTED\" SP convert-correlator\n\
    \                          SP convert-msg-attrs\n       convert-correlator = \"\
    (\" \"TAG\" SP tag-string \")\"\n       tag-string = string\n                \
    \     ; tag of the command that caused\n                     ; the CONVERTED response,\
    \ sent as\n                     ; a string.\n       convert-msg-attrs = \"(\"\
    \ convert-msg-att *(SP convert-msg-att) \")\"\n                     ; \"UID\"\
    \ MUST be the first data item, if present.\n       convert-msg-att = msg-att-semistat\
    \ / msg-att-conv-static\n       msg-att-conv-static  = \"UID\" SP uniqueid\n \
    \                    ; MUST NOT change for a message\n       msg-att-semistat\
    \ =\n                    ( \"BINARY\" section-convert [\"<\" number \">\"] SP\n\
    \                       (nstring / literal8 / converterror-phrase) ) /\n     \
    \               ( \"BINARY.SIZE\" section-convert SP\n                       (number\
    \ / converterror-phrase) ) /\n                    ( \"BODYPARTSTRUCTURE\" section-convert\
    \ SP\n                       (body / converterror-phrase) ) /\n              \
    \      ( \"AVAILABLECONVERSIONS\" section-convert SP\n                       (mimetype-list\
    \ / converterror-phrase) )\n                     ; MUST NOT change during an IMAP\
    \ \"session\",\n                     ; but not necessarily static in the long\
    \ term.\n       section-convert = section-binary\n                     ; <section-binary>\
    \ is defined in [RFC3516].\n                     ;\n                     ; Note\
    \ that unlike [RFC3516], conversion\n                     ; of a top level multipart/*\
    \ is allowed.\n       resp-text-code =/ \"TEMPFAIL\" /\n                     \
    \    \"MAXCONVERTMESSAGES\" SP nz-number /\n                         \"MAXCONVERTPARTS\"\
    \ SP nz-number\n           ; <resp-text-code> is defined in [RFC3501].\n     \
    \  mimetype-and-params = quoted-to-mime-type\n           [SP \"(\" transcoding-params\
    \ \")\"]\n           ; always includes a specific MIME type\n       mimetype-list\
    \ = \"(\" \"(\" [quoted-to-mime-type\n                                *(SP quoted-to-mime-type)]\
    \ \")\" \")\"\n           ; Unordered list of MIME types.  It can be empty.\n\
    \           ;\n           ; Two levels of parenthesis is needed to distinguish\
    \ this\n           ; data from <converterror-phrase>.\n       converterror-phrase\
    \ = \"(\" \"ERROR\" SP\n            convert-err-descript SP convert-error-code\
    \ \")\"\n       convert-error-code = \"TEMPFAIL\" [SP nz-number]\n           \
    \               / bad-params\n                          / missing-params\n   \
    \    convert-err-descript = string\n            ; Human-readable text explaining\
    \ the conversion error.\n                    ; The default charset is US-ASCII,\
    \ unless\n                    ; the LANGUAGE command [IMAP-I18N] is called, when\n\
    \                    ; the charset changes to UTF-8.\n       quoted-from-mime-type\
    \ = DQUOTE from-concrete-mime-type DQUOTE\n       bad-params = \"BADPARAMETERS\"\
    \n              1*(SP (quoted-from-mime-type / nil)\n                 SP mimetype-and-params)\n\
    \           ; nil is only returned when the body part doesn't exist.\n       missing-params\
    \ = \"MISSINGPARAMETERS\"\n              1*(SP quoted-from-mime-type SP\n    \
    \                mimetype-and-missing-params)\n       mimetype-and-missing-params\
    \ = quoted-to-mime-type\n           \"(\" transcoding-param-names \")\"\n    \
    \       ; always includes a specific MIME type\n       concrete-mime-type = type-name\
    \ \"/\" subtype-name\n                       ; i.e., \"type/subtype\".\n     \
    \                  ; type-name and subtype-name\n                       ; are\
    \ defined in [MIME-MTSRP].\n       from-concrete-mime-type = concrete-mime-type\n\
    \       to-mime-type = concrete-mime-type\n       command-auth =/ conversions-cmd\n\
    \       conversions-cmd = \"CONVERSIONS\" SP from-mime-type-req SP\n         \
    \                to-mime-type-req\n       from-mime-type-req = astring\n     \
    \    ; \"mime-type-req\" represented as IMAP <atom>,\n         ; <quoted> or <literal>\n\
    \       to-mime-type-req = astring\n         ; <mime-type-req> represented as\
    \ IMAP <atom>,\n         ; <quoted> or <literal>.\n         ; Note that <mime-type-req>\
    \ allows for \"*\",\n         ; which is not allowed in <atom>.  Such values must\n\
    \         ; be represented as <quoted> or <literal>.\n       any-mime-type  =\
    \ \"*\"\n       mime-type-req = any-mime-type /\n                       (type-name\
    \ \"/\" any-mime-type) /\n                       concrete-mime-type\n        \
    \ ; '*', 'type/*' or 'type/subtype'.\n         ; type-name is defined in [MIME-MTSRP].\n\
    \       response-payload =/ conversion-data\n       conversion-data = \"CONVERSION\"\
    \ SP quoted-from-mime-type SP\n                         quoted-to-mime-type\n\
    \                         [SP \"(\" transcoding-param-name\n                 \
    \         *(SP transcoding-param-name) \")\"]\n"
- title: 11.  Manageability Considerations
  contents:
  - "11.  Manageability Considerations\n   The monitoring of CONVERT operation is\
    \ similar to monitoring of the\n   IMAP FETCH operation.\n   At the time of writing\
    \ this document, there is no standard IMAP MIB\n   defined.  Similarly, a standard\
    \ MIB for monitoring CONVERT operations\n   and their failures does not exist.\
    \  However, the authors believe that\n   in the absence of such a MIB, server\
    \ implementations SHOULD provide\n   operators with tools to report the following\
    \ information:\n   o  which conversions (source and target MIME types and possibly\n\
    \      conversion parameters used) are invoked more frequently and how\n     \
    \ long they take,\n   o  information about conversion errors and which error condition\n\
    \      caused them (see Section 9), and\n   o  information about users which invoke\
    \ conversion operation.\n   This information can help operators to detect client\
    \ abuse of this\n   extension and scalability issues that might arise from its\
    \ use.\n   Standardizing these tools may be the subject of future work.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   IMAP4 capabilities are registered by publishing\
    \ a Standards Track or\n   IESG-approved Experimental RFC.  This document defines\
    \ the CONVERT\n   IMAP capability.  IANA has added this extension to the IANA\
    \ IMAP\n   Capability registry.\n   IANA has performed registrations as defined\
    \ in the following\n   subsections.\n"
- title: 12.1.  Registration of unknown-character-replacement Media Type
  contents:
  - "12.1.  Registration of unknown-character-replacement Media Type\n       Parameter\n\
    \   IANA has added the following registration to the registry established\n  \
    \ by RFC 2506.\n   To: \"Media feature tags mailing list\"\n       <media-feature-tags@apps.ietf.org>\n\
    \   Subject: Registration of media feature tag\n            unknown-character-replacement\n\
    \   Media feature tag name:\n      unknown-character-replacement\n   ASN.1 identifier\
    \ associated with feature tag:\n      1.3.6.1.8.1.33\n   Summary of the media\
    \ feature indicated by this feature tag:\n       Allows servers that can perform\
    \ charset conversion for text/plain\n       text/html, text/css, text/csv, text/enriched,\
    \ and text/xml MIME\n       types to replace characters not supported by the target\
    \ charset\n       with a fixed string, such as \"?\".\n       This feature tag\
    \ is also applicable to other conversions\n       to text, e.g., conversion of\
    \ images using OCR (optical\n       character recognition).\n   Values appropriate\
    \ for use with this feature tag:\n       The feature tag contains a UTF-8 string\
    \ used to replace any\n       characters from the source media type that can't\
    \ be\n       represented in the target media type.\n   The feature tag is intended\
    \ primarily for use in the following\n   applications, protocols, services, or\
    \ negotiation mechanisms:\n       IMAP CONVERT extension [RFC5259]\n   Examples\
    \ of typical use:\n      C: b001 CONVERT 2 BINARY[3 (\"text/plain\" (\"charset\"\
    \n          \"us-ascii\" \"unknown-character-replacement\" \"?\"))]\n   Related\
    \ standards or documents:\n      [RFC5259]\n      [CHARSET-REG]\n   Considerations\
    \ particular to use in individual applications,\n   protocols, services, or negotiation\
    \ mechanisms:\n      None\n   Interoperability considerations: None\n   Security\
    \ considerations: None\n   Additional information:\n      This media feature only\
    \ make sense for MIME types that\n      also support the \"charset\" media type\
    \ parameter\n      [CHARSET-REG].\n   Name(s) & email address(es) of person(s)\
    \ to contact for further\n   information:\n      Alexey Melnikov <alexey.melnikov@isode.com>\n\
    \   Intended usage:\n      COMMON\n   Author/Change controller:\n      IETF\n\
    \   Requested IANA publication delay:\n      None\n   Other information:\n   \
    \   None\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   It is to be noted that some conversions may\
    \ present security threats\n   (e.g., converting a document to a damaging executable,\
    \ exploiting a\n   buffer overflow in a media codec/parser, or a denial-of-service\n\
    \   attack against a client or a server such as requesting an image be\n   scaled\
    \ to extremely large dimensions).  Server SHOULD refuse to\n   execute CPU-expensive\
    \ conversions.  Servers should avoid dangerous\n   conversions if possible.  Whenever\
    \ possible, servers should perform\n   verification of the converted attachments\
    \ before returning them to\n   the client.  Clients should be careful when requesting\
    \ conversions or\n   processing transformed attachments.  Clients SHOULD use mutual\
    \ Simple\n   Authentication and Security Layer (SASL) authentication and the SASL/\n\
    \   TLS integrity layer, to make sure they are talking to trusted\n   servers.\n\
    \   When the client requests a server-side conversion of a signed body\n   part\
    \ (e.g., a part inside multipart/signed), there is no way for the\n   client to\
    \ verify that the converted content is authentic.  A client\n   not trusting the\
    \ server to perform conversion of a signed body part\n   can download the signed\
    \ object, verify the signature, and perform the\n   conversion itself.\n   A client\
    \ can create a carefully crafted bad message with the APPEND\n   command followed\
    \ by the CONVERT command to attack the server.  If the\n   server's conversion\
    \ function or library has a security problem (such\n   as vulnerability to a buffer\
    \ overflow), this could result in\n   privilege escalation or denial of service.\
    \  In order to mitigate such\n   attacks, servers SHOULD log the client authentication\
    \ identity on\n   APPEND and/or CONVERT operations in order to facilitate tracking\
    \ of\n   abusive clients.  Also server implementors SHOULD isolate the\n   conversion\
    \ function or library from the privileged mailstore, perhaps\n   by running it\
    \ within a distinct process.\n   Deployments in which the actual transcoding is\
    \ done outside the IMAP\n   server in a separate server are recommended to keep\
    \ the servers in\n   the same trusted domain (e.g., subnet).\n"
- title: 14.  Acknowledgments
  contents:
  - "14.  Acknowledgments\n   Stephane H. Maes and Ray Cromwell from Oracle edited\
    \ several earlier\n   versions of this document.  Their contribution is gratefully\n\
    \   acknowledged.\n   The authors want to specifically acknowledge the excellent\
    \ criticism\n   and comments received from Randall Gellens (Qualcomm), Arnt\n\
    \   Gulbrandsen (Oryx), Zoltan Ordogh (Nokia), Ben Last (Emccsoft), Dan\n   Karp\
    \ (Zimbra), Pete Resnick (Qualcomm), Chris Newman (Sun), Ted\n   Hardie (Qualcomm),\
    \ Larry Masinter (Adobe), Philip Guenther\n   (Sendmail), Greg Vaudreuil (Alcatel-Lucent),\
    \ David Harrington\n   (Comcast), Dave Cridland (Isode), Pasi Eronen (Nokia),\
    \ Magnus\n   Westerlund (Ericsson), and Jari Arkko (Ericsson), which improved\
    \ the\n   quality of this specification considerably.\n   The authors would also\
    \ like to specially thank Dave Cridland for the\n   MEDIACAPS command proposal\
    \ and Dan Karp for the CONVERSIONS command\n   proposal.\n   The authors also\
    \ want to thank all who have contributed key insight\n   and extensively reviewed\
    \ and discussed the concepts of CONVERT and\n   its predecessor P-IMAP.  In particular,\
    \ this includes the authors of\n   the LCONVERT document: Rafiul Ahad (Oracle\
    \ Corporation), Eugene Chiu\n   (Oracle Corporation), Ray Cromwell (Oracle Corporation),\
    \ Jia-der Day\n   (Oracle Corporation), Vi Ha (Oracle Corporation), Wook-Hyun\
    \ Jeong\n   (Samsung Electronics Co. LTF), Chang Kuang (Oracle Corporation),\n\
    \   Rodrigo Lima (Oracle Corporation), Stephane H. Maes (Oracle\n   Corporation),\
    \ Gustaf Rosell (Sony Ericsson), Jean Sini (Symbol\n   Technologies), Sung-Mu\
    \ Son (LG Electronics), Fan Xiaohui (China\n   Mobile Communications Corporation\
    \ (CMCC)), and Zhao Lijun (China\n   Mobile Communications Corporation (CMCC)).\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [ABNF]           Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for\n                    Syntax Specifications: ABNF\", STD\
    \ 68, RFC 5234,\n                    January 2008.\n   [CHARSET-REG]    Hoffman,\
    \ P., \"Registration of Charset and Languages\n                    Media Features\
    \ Tags\", RFC 2987, November 2000.\n   [IMAPABNF]       Melnikov, A. and C. Daboo,\
    \ \"Collected Extensions to\n                    IMAP4 ABNF\", RFC 4466, April\
    \ 2006.\n   [MEDIAFEAT-REG]  Holtman, K., Mutz, A., and T. Hardie, \"Media Feature\n\
    \                    Tag Registration Procedure\", BCP 31, RFC 2506,\n       \
    \             March 1999.\n   [MIME-MTSRP]     Freed, N. and J. Klensin, \"Media\
    \ Type Specifications\n                    and Registration Procedures\", BCP\
    \ 13, RFC 4288,\n                    December 2005.\n   [RFC2047]        Moore,\
    \ K., \"MIME (Multipurpose Internet Mail\n                    Extensions) Part\
    \ Three: Message Header Extensions\n                    for Non-ASCII Text\",\
    \ RFC 2047, November 1996.\n   [RFC2119]        Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2231]        Freed, N. and K. Moore, \"MIME Parameter Value\
    \ and\n                    Encoded Word Extensions:\n                    Character\
    \ Sets, Languages, and Continuations\",\n                    RFC 2231, November\
    \ 1997.\n   [RFC3501]        Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL -\n\
    \                    VERSION 4rev1\", RFC 3501, March 2003.\n   [RFC3516]    \
    \    Nerenberg, L., \"IMAP4 Binary Content Extension\",\n                    RFC\
    \ 3516, April 2003.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [DISP-FEATURES]  Masinter, L., Wing, D., Mutz,\
    \ A., and K. Holtman,\n                    \"Media Features for Display, Print,\
    \ and Fax\",\n                    RFC 2534, March 1999.\n   [IMAP-I18N]      Newman,\
    \ C., Gulbrandsen, A., and A. Melnikov,\n                    \"Internet Message\
    \ Access Protocol\n                    Internationalization\", RFC 5255, June\
    \ 2008.\n   [LEM-STREAMING]  Cook, N., \"Streaming Internet Messaging\n      \
    \              Attachments\", Work in Progress, June 2008.\n   [OMA-ME-RD]   \
    \   OMA, \"Open Mobile Alliance Mobile Email Requirement\n                   \
    \ Document\", OMA 55.919 3.0.0, December 2007.\n   [OMA-STI]        OMA, \"Open\
    \ Mobile Alliance, Standard Transcoding\n                    Interface Specification\"\
    , OMA OMA-STI-V1_0,\n                    December 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alexey Melnikov (editor)\n   Isode Ltd\n   5 Castle Business\
    \ Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   UK\n   EMail:\
    \ Alexey.Melnikov@isode.com\n   Peter Coates (editor)\n   Sun Microsystems\n \
    \  185 Falcon Drive\n   Whitehorse, YT  Y1A 6T2\n   Canada\n   EMail: peter.coates@Sun.COM\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
