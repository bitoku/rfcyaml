- title: __initial_text__
  contents:
  - "         Dynamic Peer Discovery for RADIUS/TLS and RADIUS/DTLS\n            \
    \  Based on the Network Access Identifier (NAI)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a means to find authoritative RADIUS servers\n\
    \   for a given realm.  It is used in conjunction with either RADIUS over\n  \
    \ Transport Layer Security (RADIUS/TLS) or RADIUS over Datagram\n   Transport\
    \ Layer Security (RADIUS/DTLS).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7585.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   5\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n     1.3.  Document Status . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   2.  Definitions . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     2.1.  DNS Resource Record (RR) Definition . . . . . . . . . . .\
    \   7\n       2.1.1.  S-NAPTR . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n       2.1.2.  SRV . . . . . . . . . . . . . . . . . . . . . . . . .  12\n\
    \       2.1.3.  Optional Name Mangling  . . . . . . . . . . . . . . .  12\n  \
    \   2.2.  Definition of the X.509 Certificate Property\n           SubjectAltName:otherName:NAIRealm\
    \ . . . . . . . . . . . .  14\n   3.  DNS-Based NAPTR/SRV Peer Discovery  . .\
    \ . . . . . . . . . . .  16\n     3.1.  Applicability . . . . . . . . . . . .\
    \ . . . . . . . . . .  16\n     3.2.  Configuration Variables . . . . . . . .\
    \ . . . . . . . . .  16\n     3.3.  Terms . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  16\n     3.4.  Realm to RADIUS Server Resolution Algorithm\
    \ . . . . . . .  17\n       3.4.1.  Input . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  17\n       3.4.2.  Output  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  18\n       3.4.3.  Algorithm . . . . . . . . . . . . . . . . . .\
    \ . . . .  18\n       3.4.4.  Validity of Results . . . . . . . . . . . . . .\
    \ . . .  20\n       3.4.5.  Delay Considerations  . . . . . . . . . . . . . .\
    \ . .  21\n       3.4.6.  Example . . . . . . . . . . . . . . . . . . . . . .\
    \ .  21\n   4.  Operations and Manageability Considerations . . . . . . . . .\
    \  24\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  25\n\
    \   6.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .  26\n  \
    \ 7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  27\n   8.\
    \  References  . . . . . . . . . . . . . . . . . . . . . . . . .  29\n     8.1.\
    \  Normative References  . . . . . . . . . . . . . . . . . .  29\n     8.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  30\n   Appendix A.  ASN.1 Syntax\
    \ of NAIRealm . . . . . . . . . . . . . .  31\n   Authors' Addresses  . . . .\
    \ . . . . . . . . . . . . . . . . . . .  32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RADIUS in all its current transport variants (RADIUS/UDP,\
    \ RADIUS/TCP,\n   RADIUS/TLS, and RADIUS/DTLS) requires manual configuration of\
    \ all\n   peers (clients and servers).\n   Where more than one administrative\
    \ entity collaborates for RADIUS\n   authentication of their respective customers\
    \ (a \"roaming\n   consortium\"), the Network Access Identifier (NAI) [RFC7542]\
    \ is the\n   suggested way of differentiating users between those entities; the\n\
    \   part of a username to the right of the \"@\" delimiter in an NAI is\n   called\
    \ the user's \"realm\".  Where many realms and RADIUS forwarding\n   servers are\
    \ in use, the number of realms to be forwarded and the\n   corresponding number\
    \ of servers to configure may be significant.\n   Where new realms with new servers\
    \ are added or details of existing\n   servers change on a regular basis, maintaining\
    \ a single monolithic\n   configuration file for all these details may prove too\
    \ cumbersome to\n   be useful.\n   Furthermore, in cases where a roaming consortium\
    \ consists of\n   independently working branches (e.g., departments and national\n\
    \   subsidiaries), each with their own forwarding servers, and who add or\n  \
    \ change their realm lists at their own discretion, there is additional\n   complexity\
    \ in synchronizing the changed data across all branches.\n   Where realms can\
    \ be partitioned (e.g., according to their top-level\n   domain (TLD) ending),\
    \ forwarding of requests can be realized with a\n   hierarchy of RADIUS servers,\
    \ all serving their partition of the realm\n   space.  Figure 1 shows an example\
    \ of this hierarchical routing.\n                                    +-------+\n\
    \                                    |       |\n                             \
    \       |   .   |\n                                    |       |\n           \
    \                         +---+---+\n                                      / |\
    \ \\\n                    +----------------/  |  \\---------------------+\n  \
    \                  |                   |                        |\n          \
    \          |                   |                        |\n                  \
    \  |                   |                        |\n                 +--+---+ \
    \           +--+--+                +----+---+\n                 |      |     \
    \       |     |                |        |\n                 | .edu |    . . .\
    \   | .nl |      . . .     | .ac.uk |\n                 |      |            |\
    \     |                |        |\n                 +--+---+            +--+--+\
    \                +----+---+\n                  / | \\                 | \\   \
    \                   |\n                 /  |  \\                |  \\        \
    \             |\n                /   |   \\               |   \\             \
    \       |\n         +-----+    |    +-----+        |    +------+            |\n\
    \         |          |          |        |           |            |\n        \
    \ |          |          |        |           |            |\n     +---+---+ +----+---+\
    \ +----+---+ +--+---+ +-----+----+ +-----+-----+\n     |       | |        | |\
    \        | |      | |          | |           |\n     |utk.edu| |utah.edu| |case.edu|\
    \ |hva.nl| |surfnet.nl| |soton.ac.uk|\n     |       | |        | |        | |\
    \      | |          | |           |\n     +----+--+ +--------+ +--------+ +------+\
    \ +----+-----+ +-----------+\n          |                                    \
    \    |\n          |                                        |\n       +--+--+ \
    \                                 +--+--+\n       |     |                    \
    \              |     |\n     +-+-----+-+                                |    \
    \ |\n     |         |                                +-----+\n     +---------+\n\
    \    user: paul@surfnet.nl             surfnet.nl Authentication server\n    \
    \ Figure 1: RADIUS Hierarchy Based on Top-Level Domain Partitioning\n   However,\
    \ such partitioning is not always possible.  As an example, in\n   one real-life\
    \ deployment, the administrative boundaries and RADIUS\n   forwarding servers\
    \ are organized along country borders, but generic\n   top-level domains such\
    \ as .edu do not map to this choice of\n   boundaries (see [RFC7593] for details).\
    \  These situations can benefit\n   significantly from a distributed mechanism\
    \ for storing realm and\n   server reachability information.  This document describes\
    \ one such\n   mechanism: storage of realm-to-server mappings in DNS; realm-based\n\
    \   request forwarding can then be realized without a static hierarchy\n   such\
    \ as in the following figure:\n                                    ---------\n\
    \                                   /         \\\n                          ---------\
    \           ------------\n                         /                         \
    \       \\\n                         |    DNS                          -\n   \
    \            ----------|                                  \\\n              /\
    \          \\          surfnet.nl NAPTR?       |\n        (1)  /            ----\
    \       -> radius.surfnet.nl   /\n            /                 \\           \
    \                 /\n           /                   --------           ---------\n\
    \          /                            \\---------/\n         |\n         | \
    \  ---------------------------------------\n         |  /              (2) RADIUS\
    \               \\\n         |  |                                       |\n  \
    \   +---+---+ +----+---+ +----+---+ +--+---+ +-----+----+ +-----+-----+\n    \
    \ |       | |        | |        | |      | |          | |           |\n     |utk.edu|\
    \ |utah.edu| |case.edu| |hva.nl| |surfnet.nl| |soton.ac.uk|\n     |       | |\
    \        | |        | |      | |          | |           |\n     +----+--+ +--------+\
    \ +--------+ +------+ +----+-----+ +-----------+\n          |                \
    \                        |\n          |                                      \
    \  |\n       +--+--+                                  +--+--+\n       |     |\
    \                                  |     |\n     +-+-----+-+                 \
    \               |     |\n     |         |                                +-----+\n\
    \     +---------+\n     user: paul@surfnet.nl             surfnet.nl Authentication\
    \ server\n     Figure 2: RADIUS Hierarchy Based on Top-Level Domain Partitioning\n\
    \   This document also specifies various approaches for verifying that\n   server\
    \ information that was retrieved from DNS was from an authorized\n   party; for\
    \ example, an organization that is not at all part of a\n   given roaming consortium\
    \ may alter its own DNS records to yield a\n   result for its own realm.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   In this document, several words are used to signify\
    \ the requirements\n   of the specification.  The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   RFC 2119 [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   RADIUS/TLS Client: a RADIUS/TLS [RFC6614] instance that\
    \ initiates a\n   new connection.\n   RADIUS/TLS Server: a RADIUS/TLS [RFC6614]\
    \ instance that listens on a\n   RADIUS/TLS port and accepts new connections.\n\
    \   RADIUS/TLS Node: a RADIUS/TLS client or server.\n   [RFC7542] defines the\
    \ terms NAI, realm, and consortium.\n"
- title: 1.3.  Document Status
  contents:
  - "1.3.  Document Status\n   This document is an Experimental RFC.\n   The communities\
    \ expected to use this document are roaming consortia\n   whose authentication\
    \ services are based on the RADIUS protocol.\n   The duration of the experiment\
    \ is undetermined; as soon as enough\n   experience is collected on the choice\
    \ points mentioned below, it is\n   expected to be obsoleted by a Standards Track\
    \ version of the\n   protocol, which trims down the choice points.\n   If that\
    \ removal of choice points obsoletes tags or service names as\n   defined in this\
    \ document and allocated by IANA, these items will be\n   returned to IANA as\
    \ per the provisions in [RFC6335].\n   The document provides a discovery mechanism\
    \ for RADIUS, which is very\n   similar to the approach that is taken with the\
    \ Diameter protocol\n   [RFC6733].  As such, the basic approach (using Naming\
    \ Authority\n   Pointer (NAPTR) records in DNS domains that match NAI realms)\
    \ is not\n   of a very experimental nature.\n   However, the document offers a\
    \ few choice points and extensions that\n   go beyond the provisions for Diameter.\
    \  The list of major additions/\n   deviations is\n   o  provisions for determining\
    \ the authority of a server to act for\n      users of a realm (declared out of\
    \ scope for Diameter)\n   o  much more in-depth guidance on DNS regarding timeouts,\
    \ failure\n      conditions, and alteration of Time-To-Live (TTL) information\
    \ than\n      the Diameter counterpart\n   o  a partially correct routing error\
    \ detection during DNS lookups\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: 2.1.  DNS Resource Record (RR) Definition
  contents:
  - "2.1.  DNS Resource Record (RR) Definition\n   DNS definitions of RADIUS/TLS servers\
    \ can be either S-NAPTR records\n   (see [RFC3958]) or SRV records.  When both\
    \ are defined, the\n   resolution algorithm prefers S-NAPTR results (see Section\
    \ 3.4 below).\n"
- title: 2.1.1.  S-NAPTR
  contents:
  - '2.1.1.  S-NAPTR

    '
- title: 2.1.1.1.  Registration of Application Service and Protocol Tags
  contents:
  - "2.1.1.1.  Registration of Application Service and Protocol Tags\n   This specification\
    \ defines three S-NAPTR service tags:\n   +-----------------+-----------------------------------------+\n\
    \   | Service Tag     | Use                                     |\n   +-----------------+-----------------------------------------+\n\
    \   | aaa+auth        | RADIUS Authentication, i.e., traffic as |\n   |      \
    \           | defined in [RFC2865]                    |\n   | - - - - - - - -\
    \ | - - - - - - - - - - - - - - - - - - - - |\n   | aaa+acct        | RADIUS Accounting,\
    \ i.e., traffic as     |\n   |                 | defined in [RFC2866]        \
    \            |\n   | - - - - - - - - | - - - - - - - - - - - - - - - - - - - -\
    \ |\n   | aaa+dynauth     | RADIUS Dynamic Authorization, i.e.,     |\n   |  \
    \               | traffic as defined in [RFC5176]         |\n   +-----------------+-----------------------------------------+\n\
    \                      Figure 3: List of Service Tags\n   This specification defines\
    \ two S-NAPTR protocol tags:\n   +-----------------+-----------------------------------------+\n\
    \   | Protocol Tag    | Use                                     |\n   +-----------------+-----------------------------------------+\n\
    \   | radius.tls.tcp  | RADIUS transported over TLS as defined  |\n   |      \
    \           | in [RFC6614]                            |\n   | - - - - - - - -\
    \ | - - - - - - - - - - - - - - - - - - - - |\n   | radius.dtls.udp | RADIUS transported\
    \ over DTLS as defined |\n   |                 | in [RFC7360]                \
    \            |\n   +-----------------+-----------------------------------------+\n\
    \                      Figure 4: List of Protocol Tags\n   Note well:\n      The\
    \ S-NAPTR service and protocols are unrelated to the IANA\n      \"Service Name\
    \ and Transport Protocol Port Number Registry\".\n      The delimiter \".\" in\
    \ the protocol tags is only a separator for\n      human reading convenience --\
    \ not for structure or namespacing; it\n      MUST NOT be parsed in any way by\
    \ the querying application or\n      resolver.\n      The use of the separator\
    \ \".\" is common also in other protocols'\n      protocol tags.  This is coincidence\
    \ and does not imply a shared\n      semantics with such protocols.\n"
- title: 2.1.1.2.  Definition of Conditions for Retry/Failure
  contents:
  - "2.1.1.2.  Definition of Conditions for Retry/Failure\n   RADIUS is a time-critical\
    \ protocol; RADIUS clients that do not\n   receive an answer after a configurable,\
    \ but short, amount of time\n   will consider the request failed.  Due to this,\
    \ there is little\n   leeway for extensive retries.\n   As a general rule, only\
    \ error conditions that generate an immediate\n   response from the other end\
    \ are eligible for a retry of a discovered\n   target.  Any error condition involving\
    \ timeouts, or the absence of a\n   reply for more than one second during the\
    \ connection setup phase, is\n   to be considered a failure; the next target in\
    \ the set of discovered\n   NAPTR targets is to be tried.\n   Note that [RFC3958]\
    \ already defines that a failure to identify the\n   server as being authoritative\
    \ for the realm is always considered a\n   failure; so even if a discovered target\
    \ returns a wrong credential\n   instantly, it is not eligible for retry.\n  \
    \ Furthermore, the contacted RADIUS/TLS server verifies during\n   connection\
    \ setup whether or not it finds the connecting RADIUS/TLS\n   client authorized.\
    \  If the connecting RADIUS/TLS client is not found\n   acceptable, the server\
    \ will close the TLS connection immediately with\n   an appropriate alert.  Such\
    \ TLS handshake failures are permanently\n   fatal and not eligible for retry,\
    \ unless the connecting client has\n   more X.509 certificates to try; in this\
    \ case, a retry with the\n   remainder of its set of certificates SHOULD be attempted.\
    \  Not trying\n   all available client certificates potentially creates a DoS\
    \ for the\n   end user whose authentication attempt triggered the discovery; one\
    \ of\n   the neglected certificates might have led to a successful RADIUS\n  \
    \ connection and subsequent end-user authentication.\n   If the TLS session setup\
    \ to a discovered target does not succeed,\n   that target (as identified by the\
    \ IP address and port number) SHOULD\n   be ignored from the result set of any\
    \ subsequent executions of the\n   discovery algorithm at least until the target's\
    \ Effective TTL (see\n   Section 3.3) has expired or until the entity that executes\
    \ the\n   algorithm changes its TLS context to either send a new client\n   certificate\
    \ or expect a different server certificate.\n"
- title: 2.1.1.3.  Server Identification and Handshake
  contents:
  - "2.1.1.3.  Server Identification and Handshake\n   After the algorithm in this\
    \ document has been executed, a RADIUS/TLS\n   session as per [RFC6614] is established.\
    \  Since the discovery\n   algorithm does not have provisions to establish confidential\
    \ keying\n   material between the RADIUS/TLS client (i.e., the server that\n \
    \  executes the discovery algorithm) and the RADIUS/TLS server that was\n   discovered,\
    \ Pre-Shared Key (PSK) ciphersuites for TLS cannot be used\n   in the subsequent\
    \ TLS handshake.  Only TLS ciphersuites using X.509\n   certificates can be used\
    \ with this algorithm.\n   There are numerous ways to define which certificates\
    \ are acceptable\n   for use in this context.  This document defines one mandatory-to-\n\
    \   implement mechanism that allows verification of whether the contacted\n  \
    \ host is authoritative for an NAI realm or not.  It also gives one\n   example\
    \ of another mechanism that is currently in widespread\n   deployment and one\
    \ possible approach based on DNSSEC, which is yet\n   unimplemented.\n   For the\
    \ approaches that use trust roots (see the following two\n   sections), a typical\
    \ deployment will use a dedicated trust store for\n   RADIUS/TLS certificate authorities,\
    \ particularly a trust store that\n   is independent from default \"browser\"\
    \ trust stores.  Often, this will\n   be one or a few Certification Authorities\
    \ (CAs), and they only issue\n   certificates for the specific purpose of establishing\
    \ RADIUS server-\n   to-server trust.  It is important not to trust a large set\
    \ of CAs\n   that operate outside the control of the roaming consortium, since\n\
    \   their issuance of certificates with the properties important for\n   authorization\
    \ (such as NAIRealm and policyOID below) is difficult to\n   verify.  Therefore,\
    \ clients SHOULD NOT be preconfigured with a list\n   of known public CAs by the\
    \ vendor or manufacturer.  Instead, the\n   clients SHOULD start off with an empty\
    \ CA list.  The addition of a CA\n   SHOULD be done only when manually configured\
    \ by an administrator.\n"
- title: '2.1.1.3.1.  Mandatory-to-Implement Mechanism: Trust Roots + NAIRealm'
  contents:
  - "2.1.1.3.1.  Mandatory-to-Implement Mechanism: Trust Roots + NAIRealm\n   Verification\
    \ of authority to provide Authentication, Authorization,\n   and Accounting (AAA)\
    \ services over RADIUS/TLS is a two-step process.\n   Step 1 is the verification\
    \ of certificate well-formedness and\n   validity as per [RFC5280] and whether\
    \ it was issued from a root\n   certificate that is deemed trustworthy by the\
    \ RADIUS/TLS client.\n   Step 2 is to compare the value of the algorithm's variable\
    \ \"R\" after\n   the execution of step 3 of the discovery algorithm in Section\
    \ 3.4.3\n   below (i.e., after a consortium name mangling but before conversion\n\
    \   to a form usable by the name resolution library) to all values of the\n  \
    \ contacted RADIUS/TLS server's X.509 certificate property\n   \"subjectAlternativeName:otherName:NAIRealm\"\
    \ as defined in\n   Section 2.2.\n"
- title: '2.1.1.3.2.  Other Mechanism: Trust Roots + policyOID'
  contents:
  - "2.1.1.3.2.  Other Mechanism: Trust Roots + policyOID\n   Verification of authority\
    \ to provide AAA services over RADIUS/TLS is\n   a two-step process.\n   Step\
    \ 1 is the verification of certificate well-formedness and\n   validity as per\
    \ [RFC5280] and whether it was issued from a root\n   certificate that is deemed\
    \ trustworthy by the RADIUS/TLS client.\n   Step 2 is to compare the values of\
    \ the contacted RADIUS/TLS server's\n   X.509 certificate's extensions of type\
    \ \"Policy OID\" to a list of\n   configured acceptable Policy OIDs for the roaming\
    \ consortium.  If one\n   of the configured OIDs is found in the certificate's\
    \ Policy OID\n   extensions, then the server is considered authorized; if there\
    \ is no\n   match, the server is considered unauthorized.\n   This mechanism is\
    \ inferior to the mandatory-to-implement mechanism in\n   the previous section\
    \ because all authorized servers are validated by\n   the same OID value; the\
    \ mechanism is not fine grained enough to\n   express authority for one specific\
    \ realm inside the consortium.  If\n   the consortium contains members that are\
    \ hostile against other\n   members, this weakness can be exploited by one RADIUS/TLS\
    \ server\n   impersonating another if DNS responses can be spoofed by the hostile\n\
    \   member.\n   The shortcomings in server identification can be partially mitigated\n\
    \   by using the RADIUS infrastructure only with authentication payloads\n   that\
    \ provide mutual authentication and credential protection (i.e.,\n   Extensible\
    \ Authentication Protocol (EAP) types passing the criteria\n   of [RFC4017]):\
    \ using mutual authentication prevents the hostile\n   server from mimicking the\
    \ real EAP server (it can't terminate the EAP\n   authentication unnoticed because\
    \ it does not have the server\n   certificate from the real EAP server); protection\
    \ of credentials\n   prevents the impersonating server from learning usernames\
    \ and\n   passwords of the ongoing EAP conversation (other RADIUS attributes\n\
    \   pertaining to the authentication, such as the EAP peer's Calling-\n   Station-ID,\
    \ can still be learned though).\n"
- title: '2.1.1.3.3.  Other Mechanism: DNSSEC/DANE'
  contents:
  - "2.1.1.3.3.  Other Mechanism: DNSSEC/DANE\n   Where DNSSEC is used, the results\
    \ of the algorithm can be trusted;\n   that is, the entity that executes the algorithm\
    \ can be certain that\n   the realm that triggered the discovery is actually served\
    \ by the\n   server that was discovered via DNS.  However, this does not guarantee\n\
    \   that the server is also authorized (i.e., a recognized member of the\n   roaming\
    \ consortium).  The server still needs to present an X.509\n   certificate proving\
    \ its authority to serve a particular realm.\n   The authorization can be sketched\
    \ using DNSSEC and DNS-Based\n   Authentication of Named Entities (DANE) as follows:\
    \ DANE/TLSA records\n   of all authorized servers are put into a DNSSEC zone that\
    \ contains\n   all known and authorized realms; the zone is rooted in a common,\n\
    \   consortium-agreed branch of the DNS tree.  The entity executing the\n   algorithm\
    \ uses the realm information from the authentication attempt\n   and then attempts\
    \ to retrieve TLSA resource records (TLSA RRs) for\n   the DNS label \"realm.commonroot\"\
    .  It then verifies that the\n   presented server certificate during the RADIUS/TLS\
    \ handshake matches\n   the information in the TLSA record.\n   Example:\n   \
    \   Realm = \"example.com\"\n      Common Branch = \"idp.roaming-consortium.example.\n\
    \      label for TLSA query = \"example.com.idp.roaming-\n      consortium.example.\n\
    \      result of discovery algorithm for realm \"example.com\" =\n      192.0.2.1:2083\n\
    \      ( TLS certificate of 192.0.2.1:2083 matches TLSA RR ? \"PASS\" :\n    \
    \  \"FAIL\" )\n"
- title: 2.1.1.3.4.  Client Authentication and Authorization
  contents:
  - "2.1.1.3.4.  Client Authentication and Authorization\n   Note that RADIUS/TLS\
    \ connections always mutually authenticate the\n   RADIUS server and the RADIUS\
    \ client.  This specification provides an\n   algorithm for a RADIUS client to\
    \ contact and verify authorization of\n   a RADIUS server only.  During connection\
    \ setup, the RADIUS server\n   also needs to verify whether it considers the connecting\
    \ RADIUS\n   client authorized; this is outside the scope of this specification.\n"
- title: 2.1.2.  SRV
  contents:
  - "2.1.2.  SRV\n   This specification defines two SRV prefixes (i.e., two values\
    \ for the\n   \"_service._proto\" part of an SRV RR as per [RFC2782]):\n   +-------------------+-----------------------------------------+\n\
    \   | SRV Label         | Use                                     |\n   +-------------------+-----------------------------------------+\n\
    \   | _radiustls._tcp   | RADIUS transported over TLS as defined  |\n   |    \
    \               | in [RFC6614]                            |\n   | - - - - - -\
    \ - - - | - - - - - - - - - - - - - - - - - - - - |\n   | _radiusdtls._udp  |\
    \ RADIUS transported over DTLS as defined |\n   |                   | in [RFC7360]\
    \                            |\n   +-------------------+-----------------------------------------+\n\
    \                       Figure 5: List of SRV Labels\n   Just like NAPTR records,\
    \ the lookup and subsequent follow up of SRV\n   records may yield more than one\
    \ server to contact in a prioritized\n   list.  [RFC2782] does not specify rules\
    \ regarding \"Definition of\n   Conditions for Retry/Failure\" nor \"Server Identification\
    \ and\n   Handshake\".  This specification states that the rules for these two\n\
    \   topics as defined in Sections 2.1.1.2 and 2.1.1.3 SHALL be used both\n   for\
    \ targets retrieved via an initial NAPTR RR as well as for targets\n   retrieved\
    \ via an initial SRV RR (i.e., in the absence of NAPTR RRs).\n"
- title: 2.1.3.  Optional Name Mangling
  contents:
  - "2.1.3.  Optional Name Mangling\n   It is expected that in most cases, the SRV\
    \ and/or NAPTR label used\n   for the records is the DNS A-label representation\
    \ of the literal\n   realm name for which the server is the authoritative RADIUS\
    \ server\n   (i.e., the realm name after conversion according to Section 5 of\n\
    \   [RFC5891]).\n   However, arbitrary other labels or service tags may be used\
    \ if, for\n   example, a roaming consortium uses realm names that are not\n  \
    \ associated to DNS names or special-purpose consortia where a globally\n   valid\
    \ discovery is not a use case.  Such other labels require a\n   consortium-wide\
    \ agreement about the transformation from realm name to\n   lookup label and/or\
    \ which service tag to use.\n   Examples:\n   a.  A general-purpose RADIUS server\
    \ for realm example.com might have\n       DNS entries as follows:\n         \
    \ example.com.  IN NAPTR 50 50 \"s\" \"aaa+auth:radius.tls.tcp\" \"\"\n      \
    \    _radiustls._tcp.foobar.example.com.\n          _radiustls._tcp.foobar.example.com.\
    \  IN SRV 0 10 2083\n          radsec.example.com.\n   b.  The consortium \"foo\"\
    \ provides roaming services for its members\n       only.  The realms used are\
    \ of the form enterprise-name.example.\n       The consortium operates a special\
    \ purpose DNS server for the\n       (private) TLD \"example\", which all RADIUS\
    \ servers use to resolve\n       realm names.  \"Company, Inc.\" is part of the\
    \ consortium.  On the\n       consortium's DNS server, realm company.example might\
    \ have the\n       following DNS entries:\n          company.example.  IN NAPTR\
    \ 50 50 \"a\"\n          \"aaa+auth:radius.dtls.udp\" \"\" roamserv.company.example.\n\
    \   c.  The eduroam consortium (see [RFC7593]) uses realms based on DNS\n    \
    \   but provides its services to a closed community only.  However, a\n      \
    \ AAA domain participating in eduroam may also want to expose AAA\n       services\
    \ to other, general-purpose, applications (on the same or\n       other RADIUS\
    \ servers).  Due to that, the eduroam consortium uses\n       the service tag\
    \ \"x-eduroam\" for authentication purposes and\n       eduroam RADIUS servers\
    \ use this tag to look up other eduroam\n       servers.  An eduroam participant\
    \ example.org that also provides\n       general-purpose AAA on a different server\
    \ uses the general\n       \"aaa+auth\" tag:\n          example.org.  IN NAPTR\
    \ 50 50 \"s\" \"x-eduroam:radius.tls.tcp\" \"\"\n          _radiustls._tcp.eduroam.example.org.\n\
    \          example.org.  IN NAPTR 50 50 \"s\" \"aaa+auth:radius.tls.tcp\" \"\"\
    \n          _radiustls._tcp.aaa.example.org.\n          _radiustls._tcp.eduroam.example.org.\
    \  IN SRV 0 10 2083 aaa-\n          eduroam.example.org.\n          _radiustls._tcp.aaa.example.org.\
    \  IN SRV 0 10 2083 aaa-\n          default.example.org.\n"
- title: 2.2.  Definition of the X.509 Certificate Property
  contents:
  - "2.2.  Definition of the X.509 Certificate Property\n      SubjectAltName:otherName:NAIRealm\n\
    \   This specification retrieves IP addresses and port numbers from the\n   Domain\
    \ Name System that are subsequently used to authenticate users\n   via the RADIUS/TLS\
    \ protocol.  Regardless whether the results from DNS\n   discovery are trustworthy\
    \ or not (e.g., DNSSEC in use), it is always\n   important to verify that the\
    \ server that was contacted is authorized\n   to service requests for the user\
    \ that triggered the discovery\n   process.\n   The input to the algorithm is\
    \ an NAI realm as specified in\n   Section 3.4.1.  As a consequence, the X.509\
    \ certificate of the server\n   that is ultimately contacted for user authentication\
    \ needs to be able\n   to express that it is authorized to handle requests for\
    \ that realm.\n   Current subjectAltName fields do not semantically allow an NAI\
    \ realm\n   to be expressed; the field subjectAltName:dNSName is syntactically\
    \ a\n   good match but would inappropriately conflate DNS names and NAI realm\n\
    \   names.  Thus, this specification defines a new subjectAltName field\n   to\
    \ hold either a single NAI realm name or a wildcard name matching a\n   set of\
    \ NAI realms.\n   The subjectAltName:otherName:sRVName field certifies that a\n\
    \   certificate holder is authorized to provide a service; this can be\n   compared\
    \ to the target of a DNS label's SRV resource record.  If the\n   Domain Name\
    \ System is insecure, it is required that the label of the\n   SRV record itself\
    \ is known-correct.  In this specification, that\n   label is not known-correct;\
    \ it is potentially derived from a\n   (potentially untrusted) NAPTR resource\
    \ record of another label.  If\n   DNS is not secured with DNSSEC, the NAPTR resource\
    \ record may have\n   been altered by an attacker with access to the Domain Name\
    \ System\n   resolution, and thus the label used to look up the SRV record may\n\
    \   already be tainted.  This makes subjectAltName:otherName:sRVName not\n   a\
    \ trusted comparison item.\n   Further to this, this specification's NAPTR entries\
    \ may be of type\n   \"A\", which does not involve resolution of any SRV records,\
    \ which\n   again makes subjectAltName:otherName:sRVName unsuited for this\n \
    \  purpose.\n   This section defines the NAIRealm name as a form of otherName\
    \ from\n   the GeneralName structure in subjectAltName defined in [RFC5280].\n\
    \      id-on-naiRealm OBJECT IDENTIFIER ::= { id-on 8 }\n      ub-naiRealm-length\
    \ INTEGER ::= 255\n      NAIRealm ::= UTF8String (SIZE (1..ub-naiRealm-length))\n\
    \   The NAIRealm, if present, MUST contain an NAI realm as defined in\n   [RFC7542].\
    \  It MAY substitute the leftmost dot-separated label of the\n   NAI with the\
    \ single character \"*\" to indicate a wildcard match for\n   \"all labels in\
    \ this part\".  Further features of regular expressions,\n   such as a number\
    \ of characters followed by an \"*\" to indicate a\n   common prefix inside the\
    \ part, are not permitted.\n   The comparison of an NAIRealm to the NAI realm\
    \ as derived from user\n   input with this algorithm is a byte-by-byte comparison,\
    \ except for\n   the optional leftmost dot-separated part of the value whose content\n\
    \   is a single \"*\" character; such labels match all strings in the same\n \
    \  dot-separated part of the NAI realm.  If at least one of the\n   sAN:otherName:NAIRealm\
    \ values match the NAI realm, the server is\n   considered authorized; if none\
    \ match, the server is considered\n   unauthorized.\n   Since multiple names and\
    \ multiple name forms may occur in the\n   subjectAltName extension, an arbitrary\
    \ number of NAIRealms can be\n   specified in a certificate.\n   Examples:\n \
    \  +---------------------+-------------------+-----------------------+\n   | NAI\
    \ realm (RADIUS)  | NAIRealm (cert)   | MATCH?                |\n   +---------------------+-------------------+-----------------------+\n\
    \   | foo.example         | foo.example       | YES                   |\n   |\
    \ foo.example         | *.example         | YES                   |\n   | bar.foo.example\
    \     | *.example         | NO                    |\n   | bar.foo.example    \
    \ | *ar.foo.example   | NO (NAIRealm invalid) |\n   | bar.foo.example     | bar.*.example\
    \     | NO (NAIRealm invalid) |\n   | bar.foo.example     | *.*.example      \
    \ | NO (NAIRealm invalid) |\n   | sub.bar.foo.example | *.*.example       | NO\
    \ (NAIRealm invalid) |\n   | sub.bar.foo.example | *.bar.foo.example | YES   \
    \                |\n   +-----------------+-----------------------------------------------+\n\
    \         Figure 6: Examples for NAI Realm vs. Certificate Matching\n   Appendix\
    \ A contains the ASN.1 definition of the above objects.\n"
- title: 3.  DNS-Based NAPTR/SRV Peer Discovery
  contents:
  - '3.  DNS-Based NAPTR/SRV Peer Discovery

    '
- title: 3.1.  Applicability
  contents:
  - "3.1.  Applicability\n   Dynamic server discovery as defined in this document\
    \ is only\n   applicable for new AAA transactions and per service (i.e., distinct\n\
    \   discovery is needed for Authentication, Accounting, and Dynamic\n   Authorization)\
    \ where a RADIUS entity that acts as a forwarding server\n   for one or more realms\
    \ receives a request with a realm for which it\n   is not authoritative, and which\
    \ no explicit next hop is configured.\n   It is only applicable for\n   a.  new\
    \ user sessions, i.e., for the initial Access-Request.\n       Subsequent messages\
    \ concerning this session, for example, Access-\n       Challenges and Access-Accepts,\
    \ use the previously established\n       communication channel between client\
    \ and server.\n   b.  the first accounting ticket for a user session.\n   c. \
    \ the first RADIUS DynAuth packet for a user session.\n"
- title: 3.2.  Configuration Variables
  contents:
  - "3.2.  Configuration Variables\n   The algorithm contains various variables for\
    \ timeouts.  These\n   variables are named here and reasonable default values\
    \ are provided.\n   Implementations wishing to deviate from these defaults should\
    \ make\n   sure they understand the implications of changes.\n      DNS_TIMEOUT:\
    \ maximum amount of time to wait for the complete set\n      of all DNS queries\
    \ to complete: Default = 3 seconds\n      MIN_EFF_TTL: minimum DNS TTL of discovered\
    \ targets: Default = 60\n      seconds\n      BACKOFF_TIME: if no conclusive DNS\
    \ response was retrieved after\n      DNS_TIMEOUT, do not attempt dynamic discovery\
    \ before BACKOFF_TIME\n      has elapsed: Default = 600 seconds\n"
- title: 3.3.  Terms
  contents:
  - "3.3.  Terms\n   Positive DNS response: A response that contains the RR that was\n\
    \   queried for.\n   Negative DNS response: A response that does not contain the\
    \ RR that\n   was queried for but contains an SOA record along with a TTL\n  \
    \ indicating cache duration for this negative result.\n   DNS Error: Where the\
    \ algorithm states \"name resolution returns with\n   an error\", this shall mean\
    \ that either the DNS request timed out or\n   it is a DNS response, which is\
    \ neither a positive nor a negative\n   response (e.g., SERVFAIL).\n   Effective\
    \ TTL: The validity period for discovered RADIUS/TLS target\n   hosts.  Calculated\
    \ as: Effective TTL (set of DNS TTL values) = max {\n   MIN_EFF_TTL, min { DNS\
    \ TTL values } }\n   SRV lookup: For the purpose of this specification, SRV lookup\n\
    \   procedures are defined as per [RFC2782] but excluding that RFCs \"A\"\n  \
    \ fallback as defined in the \"Usage Rules\" section, final \"else\"\n   clause.\n\
    \   Greedy result evaluation: The NAPTR to SRV/A/AAAA resolution may lead\n  \
    \ to a tree of results, whose leafs are the IP addresses to contact.\n   The branches\
    \ of the tree are ordered according to their order/\n   preference DNS properties.\
    \  An implementation is executing greedy\n   result evaluation if it uses a depth-first\
    \ search in the tree along\n   the highest order results, attempts to connect\
    \ to the corresponding\n   resulting IP addresses, and only backtracks to other\
    \ branches if the\n   higher ordered results did not end in successful connection\
    \ attempts.\n"
- title: 3.4.  Realm to RADIUS Server Resolution Algorithm
  contents:
  - '3.4.  Realm to RADIUS Server Resolution Algorithm

    '
- title: 3.4.1.  Input
  contents:
  - "3.4.1.  Input\n   For RADIUS Authentication and RADIUS Accounting server discovery,\n\
    \   input I to the algorithm is the RADIUS User-Name attribute with\n   content\
    \ of the form \"user@realm\"; the literal \"@\" sign is the\n   separator between\
    \ a local user identifier within a realm and its\n   realm.  The use of multiple\
    \ literal \"@\" signs in a User-Name is\n   strongly discouraged; but if present,\
    \ the last \"@\" sign is to be\n   considered the separator.  All previous instances\
    \ of the \"@\" sign are\n   to be considered part of the local user identifier.\n\
    \   For RADIUS DynAuth server discovery, input I to the algorithm is the\n   domain\
    \ name of the operator of a RADIUS realm as was communicated\n   during user authentication\
    \ using the Operator-Name attribute\n   ([RFC5580], Section 4.1).  Only Operator-Name\
    \ values with the\n   namespace \"1\" are supported by this algorithm -- the input\
    \ to the\n   algorithm is the actual domain name, preceded with an \"@\" (but\n\
    \   without the \"1\" namespace identifier byte of that attribute).\n   Note well:\
    \ The attribute User-Name is defined to contain UTF-8 text.\n   In practice, the\
    \ content may or may not be UTF-8.  Even if UTF-8, it\n   may or may not map to\
    \ a domain name in the realm part.  Implementors\n   MUST take possible conversion\
    \ error paths into consideration when\n   parsing incoming User-Name attributes.\
    \  This document describes\n   server discovery only for well-formed realms mapping\
    \ to DNS domain\n   names in UTF-8 encoding.  The result of all other possible\
    \ contents\n   of User-Name is unspecified; this includes, but is not limited\
    \ to:\n      Usage of separators other than \"@\".\n      Encoding of User-Name\
    \ in local encodings.\n      UTF-8 realms that fail the conversion rules as per\
    \ [RFC5891].\n      UTF-8 realms that end with a \".\" (\"dot\") character.\n\
    \   For the last bullet point, \"trailing dot\", special precautions should\n\
    \   be taken to avoid problems when resolving servers with the algorithm\n   below:\
    \ they may resolve to a RADIUS server even if the peer RADIUS\n   server only\
    \ is configured to handle the realm without the trailing\n   dot.  If that RADIUS\
    \ server again uses NAI discovery to determine the\n   authoritative server, the\
    \ server will forward the request to\n   localhost, resulting in a tight endless\
    \ loop.\n"
- title: 3.4.2.  Output
  contents:
  - "3.4.2.  Output\n   Output O of the algorithm is a two-tuple consisting of: O-1)\
    \ a set of\n   tuples {hostname; port; protocol; order/preference; Effective TTL}\
    \ --\n   the set can be empty -- and O-2) an integer.  If the set in the first\n\
    \   part of the tuple is empty, the integer contains the Effective TTL\n   for\
    \ backoff timeout; if the set is not empty, the integer is set to 0\n   (and not\
    \ used).\n"
- title: 3.4.3.  Algorithm
  contents:
  - "3.4.3.  Algorithm\n   The algorithm to determine the RADIUS server to contact\
    \ is as\n   follows:\n   1.   Determine P = (position of last \"@\" character)\
    \ in I.\n   2.   Generate R = (substring from P+1 to end of I).\n   3.   Modify\
    \ R according to agreed consortium procedures if\n        applicable.\n   4. \
    \  Convert R to a representation usable by the name resolution\n        library\
    \ if needed.\n   5.   Initialize TIMER = 0; start TIMER.  If TIMER reaches\n \
    \       DNS_TIMEOUT, continue at step 20.\n   6.   Using the host's name resolution\
    \ library, perform a NAPTR query\n        for R (see \"Delay Considerations\"\
    , Section 3.4.5, below).  If\n        the result is a negative DNS response, O-2\
    \ = Effective TTL ( TTL\n        value of the SOA record ) and continue at step\
    \ 13.  If name\n        resolution returns with error, O-1 = { empty set }, O-2\
    \ =\n        BACKOFF_TIME, and terminate.\n   7.   Extract NAPTR records with\
    \ service tags \"aaa+auth\", \"aaa+acct\",\n        and \"aaa+dynauth\" as appropriate.\
    \  Keep note of the protocol tag\n        and remaining TTL of each of the discovered\
    \ NAPTR records.\n   8.   If no records are found, continue at step 13.\n   9.\
    \   For the extracted NAPTRs, perform successive resolution as\n        defined\
    \ in [RFC3958], Section 2.2.  An implementation MAY use\n        greedy result\
    \ evaluation according to the NAPTR order/preference\n        fields (i.e., can\
    \ execute the subsequent steps of this algorithm\n        for the highest-order\
    \ entry in the set of results and only look\n        up the remainder of the set\
    \ if necessary).\n   10.  If the set of hostnames is empty, O-1 = { empty set\
    \ }, O-2 =\n        BACKOFF_TIME, and terminate.\n   11.  O' = (set of {hostname;\
    \ port; protocol; order/preference;\n        Effective TTL ( all DNS TTLs that\
    \ led to this hostname ) } for\n        all terminal lookup results).\n   12.\
    \  Proceed with step 18.\n   13.  Generate R' = (prefix R with \"_radiustls._tcp.\"\
    \ and/or\n        \"_radiustls._udp.\").\n   14.  Using the host's name resolution\
    \ library, perform SRV lookup\n        with R' as label (see \"Delay Considerations\"\
    , Section 3.4.5,\n        below).\n   15.  If name resolution returns with error,\
    \ O-1 = { empty set }, O-2\n        = BACKOFF_TIME, and terminate.\n   16.  If\
    \ the result is a negative DNS response, O-1 = { empty set },\n        O-2 = min\
    \ { O-2, Effective TTL ( TTL value of the SOA record )\n        }, and terminate.\n\
    \   17.  O' = (set of {hostname; port; protocol; order/preference;\n        Effective\
    \ TTL ( all DNS TTLs that led to this result ) } for all\n        hostnames).\n\
    \   18.  Generate O-1 by resolving hostnames in O' into corresponding A\n    \
    \    and/or AAAA addresses: O-1 = (set of {IP address; port;\n        protocol;\
    \ order/preference; Effective TTL ( all DNS TTLs that\n        led to this result\
    \ ) } for all hostnames ), O-2 = 0.\n   19.  For each element in O-1, test if\
    \ the original request that\n        triggered dynamic discovery was received\
    \ on {IP address; port}.\n        If yes, O-1 = { empty set }, O-2 = BACKOFF_TIME,\
    \ log error, and\n        terminate (see next section for a rationale).  If no,\
    \ O is the\n        result of dynamic discovery; terminate.\n   20.  O-1 = { empty\
    \ set }, O-2 = BACKOFF_TIME, log error, and\n        terminate.\n"
- title: 3.4.4.  Validity of Results
  contents:
  - "3.4.4.  Validity of Results\n   The discovery algorithm is used by servers that\
    \ do not have\n   sufficient configuration information to process an incoming\
    \ request\n   on their own.  If the discovery algorithm result contains the\n\
    \   server's own listening address (IP address and port), then there is a\n  \
    \ potential for an endless forwarding loop.  If the listening address\n   is the\
    \ DNS result with the highest priority, the server will enter a\n   tight loop\
    \ (the server would forward the request to itself,\n   triggering dynamic discovery\
    \ again in a perpetual loop).  If the\n   address has a lower priority in the\
    \ set of results, there is a\n   potential loop with intermediate hops in between\
    \ (the server could\n   forward to another host with a higher priority, which\
    \ might use DNS\n   itself and forward the packet back to the first server). \
    \ The\n   underlying reason that enables these loops is that the server\n   executing\
    \ the discovery algorithm is seriously misconfigured in that\n   it does not recognize\
    \ the request as one that is to be processed by\n   itself.  RADIUS has no built-in\
    \ loop detection, so any such loops\n   would remain undetected.  So, if step\
    \ 18 of the algorithm discovers\n   such a possible-loop situation, the algorithm\
    \ should be aborted and\n   an error logged.  Note that this safeguard does not\
    \ provide perfect\n   protection against routing loops.  One reason that might\
    \ introduce a\n   loop includes the possibility that a subsequent hop has a statically\n\
    \   configured next hop that leads to an earlier host in the loop.\n   Another\
    \ reason for occurring loops is if the algorithm was executed\n   with greedy\
    \ result evaluation, and the server's own address was in a\n   lower-priority\
    \ branch of the result set that was not retrieved from\n   DNS at all, and thus\
    \ can't be detected.\n   After executing the above algorithm, the RADIUS server\
    \ establishes a\n   connection to a home server from the result set.  This connection\
    \ can\n   potentially remain open for an indefinite amount of time.  This\n  \
    \ conflicts with the possibility of changing device and network\n   configurations\
    \ on the receiving end.  Typically, TTL values for\n   records in the name resolution\
    \ system are used to indicate how long\n   it is safe to rely on the results of\
    \ the name resolution.  If these\n   TTLs are very low, thrashing of connections\
    \ becomes possible; the\n   Effective TTL mitigates that risk.  When a connection\
    \ is open and the\n   smallest of the Effective TTL value that was learned during\n\
    \   discovering the server has not expired, subsequent new user sessions\n   for\
    \ the realm that corresponds to that open connection SHOULD reuse\n   the existing\
    \ connection and SHOULD NOT re-execute the discovery\n   algorithm nor open a\
    \ new connection.  To allow for a change of\n   configuration, a RADIUS server\
    \ SHOULD re-execute the discovery\n   algorithm after the Effective TTL that is\
    \ associated with this\n   connection has expired.  The server SHOULD keep the\
    \ session open\n   during this reassessment to avoid closure and immediate reopening\
    \ of\n   the connection should the result not have changed.\n   Should the algorithm\
    \ above terminate with O-1 = { empty set }, the\n   RADIUS server SHOULD NOT attempt\
    \ another execution of this algorithm\n   for the same target realm before the\
    \ timeout O-2 has passed.\n"
- title: 3.4.5.  Delay Considerations
  contents:
  - "3.4.5.  Delay Considerations\n   The host's name resolution library may need\
    \ to contact outside\n   entities to perform the name resolution (e.g., authoritative\
    \ name\n   servers for a domain), and since the NAI discovery algorithm is based\n\
    \   on uncontrollable user input, the destination of the lookups is out\n   of\
    \ control of the server that performs NAI discovery.  If such\n   outside entities\
    \ are misconfigured or unreachable, the algorithm\n   above may need an unacceptably\
    \ long time to terminate.  Many RADIUS\n   implementations time out after five\
    \ seconds of delay between Request\n   and Response.  It is not useful to wait\
    \ until the host name\n   resolution library signals a timeout of its name resolution\n\
    \   algorithms.  The algorithm therefore controls execution time with\n   TIMER.\
    \  Execution of the NAI discovery algorithm SHOULD be non-\n   blocking (i.e.,\
    \ allow other requests to be processed in parallel to\n   the execution of the\
    \ algorithm).\n"
- title: 3.4.6.  Example
  contents:
  - "3.4.6.  Example\n   Assume\n      a user from the Technical University of Munich,\
    \ Germany, has a\n      RADIUS User-Name of \"foobar@tu-m[U+00FC]nchen.example\"\
    .\n      The name resolution library on the RADIUS forwarding server does\n  \
    \    not have the realm tu-m[U+00FC]nchen.example in its forwarding\n      configuration\
    \ but uses DNS for name resolution and has configured\n      the use of dynamic\
    \ discovery to discover RADIUS servers.\n      It is IPv6 enabled and prefers\
    \ AAAA records over A records.\n      It is listening for incoming RADIUS/TLS\
    \ requests on 192.0.2.1,\n      TCP/2083.\n   May the configuration variables\
    \ be\n      DNS_TIMEOUT = 3 seconds\n      MIN_EFF_TTL = 60 seconds\n      BACKOFF_TIME\
    \ = 3600 seconds\n   If DNS contains the following records\n      xn--tu-mnchen-t9a.example.\
    \  IN NAPTR 50 50 \"s\"\n      \"aaa+auth:radius.tls.tcp\" \"\" _myradius._tcp.xn--tu-mnchen-\n\
    \      t9a.example.\n      xn--tu-mnchen-t9a.example.  IN NAPTR 50 50 \"s\"\n\
    \      \"fooservice:bar.dccp\" \"\" _abc123._def.xn--tu-mnchen-t9a.example.\n\
    \      _myradius._tcp.xn--tu-mnchen-t9a.example.  IN SRV 0 10 2083\n      radsecserver.xn--tu-mnchen-t9a.example.\n\
    \      _myradius._tcp.xn--tu-mnchen-t9a.example.  IN SRV 0 20 2083\n      backupserver.xn--tu-mnchen-t9a.example.\n\
    \      radsecserver.xn--tu-mnchen-t9a.example.  IN AAAA\n      2001:0DB8::202:44ff:fe0a:f704\n\
    \      radsecserver.xn--tu-mnchen-t9a.example.  IN A 192.0.2.3\n      backupserver.xn--tu-mnchen-t9a.example.\
    \  IN A 192.0.2.7\n   Then the algorithm executes as follows, with I =\n   \"\
    foobar@tu-m[U+00FC]nchen.example\", and no consortium name mangling\n   in use:\n\
    \   1.   P = 7\n   2.   R = \"tu-m[U+00FC]nchen.example\"\n   3.   NOOP\n   4.\
    \   Name resolution library converts R to xn--tu-mnchen-t9a.example\n   5.   TIMER\
    \ starts.\n   6.   Result:\n           (TTL = 47) 50 50 \"s\" \"aaa+auth:radius.tls.tcp\"\
    \ \"\"\n           _myradius._tcp.xn--tu-mnchen-t9a.example.\n           (TTL\
    \ = 522) 50 50 \"s\" \"fooservice:bar.dccp\" \"\"\n           _abc123._def.xn--tu-mnchen-t9a.example.\n\
    \   7.   Result:\n           (TTL = 47) 50 50 \"s\" \"aaa+auth:radius.tls.tcp\"\
    \ \"\"\n           _myradius._tcp.xn--tu-mnchen-t9a.example.\n   8.   NOOP\n \
    \  9.   Successive resolution performs SRV query for label\n        _myradius._tcp.xn--tu-mnchen-t9a.example,\
    \ which results in\n           (TTL 499) 0 10 2083 radsec.xn--tu-mnchen-t9a.example.\n\
    \           (TTL 2200) 0 20 2083 backup.xn--tu-mnchen-t9a.example.\n   10.  NOOP\n\
    \   11.  O' = {\n           (radsec.xn--tu-mnchen-t9a.example.; 2083; RADIUS/TLS;\
    \ 10;\n           60),\n           (backup.xn--tu-mnchen-t9a.example.; 2083; RADIUS/TLS;\
    \ 20; 60)\n        } // minimum TTL is 47, upped to MIN_EFF_TTL\n   12.  Continuing\
    \ at 18.\n   13.  (not executed)\n   14.  (not executed)\n   15.  (not executed)\n\
    \   16.  (not executed)\n   17.  (not executed)\n   18.  O-1 = {\n           (2001:0DB8::202:44ff:fe0a:f704;\
    \ 2083; RADIUS/TLS; 10; 60),\n           (192.0.2.7; 2083; RADIUS/TLS; 20; 60)\n\
    \        }; O-2 = 0\n   19.  No match with own listening address; terminate with\
    \ tuple (O-1,\n        O-2) from previous step.\n   The implementation will then\
    \ attempt to connect to two servers, with\n   preference to [2001:0DB8::202:44ff:fe0a:f704]:2083\
    \ using the RADIUS/\n   TLS protocol.\n"
- title: 4.  Operations and Manageability Considerations
  contents:
  - "4.  Operations and Manageability Considerations\n   The discovery algorithm as\
    \ defined in this document contains several\n   options: the major ones are use\
    \ of NAPTR vs. SRV; how to determine\n   the authorization status of a contacted\
    \ server for a given realm; and\n   which trust anchors to consider trustworthy\
    \ for the RADIUS\n   conversation setup.\n   Random parties that do not agree\
    \ on the same set of options may not\n   be able to interoperate.  However, such\
    \ a global interoperability is\n   not intended by this document.\n   Discovery\
    \ as per this document becomes important inside a roaming\n   consortium, which\
    \ has set up roaming agreements with the other\n   partners.  Such roaming agreements\
    \ require much more than a technical\n   means of server discovery; there are\
    \ administrative and contractual\n   considerations at play (service contracts,\
    \ back-office compensations,\n   procedures, etc.).\n   A roaming consortium's\
    \ roaming agreement must include a profile of\n   which choice points in this\
    \ document to use.  So as long as the\n   roaming consortium can settle on one\
    \ deployment profile, they will be\n   able to interoperate based on that choice;\
    \ this per-consortium\n   interoperability is the intended scope of this document.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   When using DNS without DNSSEC security extensions\
    \ and validation for\n   all of the replies to NAPTR, SRV, and A/AAAA requests\
    \ as described in\n   Section 3, the result of the discovery process can not be\
    \ trusted.\n   Even if it can be trusted (i.e., DNSSEC is in use), actual\n  \
    \ authorization of the discovered server to provide service for the\n   given\
    \ realm needs to be verified.  A mechanism from Section 2.1.1.3\n   or equivalent\
    \ MUST be used to verify authorization.\n   The algorithm has a configurable completion\
    \ timeout DNS_TIMEOUT\n   defaulting to three seconds for RADIUS' operational\
    \ reasons.  The\n   lookup of DNS resource records based on unverified user input\
    \ is an\n   attack vector for DoS attacks: an attacker might intentionally craft\n\
    \   bogus DNS zones that take a very long time to reply (e.g., due to a\n   particularly\
    \ byzantine tree structure or artificial delays in\n   responses).\n   To mitigate\
    \ this DoS vector, implementations SHOULD consider rate\n   limiting either the\
    \ amount of new executions of the discovery\n   algorithm as a whole or the amount\
    \ of intermediate responses to\n   track, or at least the number of pending DNS\
    \ queries.\n   Implementations MAY choose lower values than the default for\n\
    \   DNS_TIMEOUT to limit the impact of DoS attacks via that vector.  They\n  \
    \ MAY also continue their attempt to resolve DNS records even after\n   DNS_TIMEOUT\
    \ has passed; a subsequent request for the same realm might\n   benefit from retrieving\
    \ the results anyway.  The amount of time spent\n   waiting for a result will\
    \ influence the impact of a possible DoS\n   attack; the waiting time value is\
    \ implementation dependent and\n   outside the scope of this specification.\n\
    \   With dynamic discovery being enabled for a RADIUS server, and\n   depending\
    \ on the deployment scenario, the server may need to open up\n   its target IP\
    \ address and port for the entire Internet because\n   arbitrary clients may discover\
    \ it as a target for their\n   authentication requests.  If such clients are not\
    \ part of the roaming\n   consortium, the RADIUS/TLS connection setup phase will\
    \ fail (which is\n   intended), but the computational cost for the connection\
    \ attempt is\n   significant.  When the port for a TLS-based service is open,\
    \ the\n   RADIUS server shares all the typical attack vectors for services\n \
    \  based on TLS (such as HTTPS and SMTPS).  Deployments of RADIUS/TLS\n   with\
    \ dynamic discovery should consider these attack vectors and take\n   appropriate\
    \ countermeasures (e.g., blacklisting known bad IPs on a\n   firewall, rate limiting\
    \ new connection attempts, etc.).\n"
- title: 6.  Privacy Considerations
  contents:
  - "6.  Privacy Considerations\n   The classic RADIUS operational model (known, preconfigured\
    \ peers,\n   shared secret security, and mostly plaintext communication) and this\n\
    \   new RADIUS dynamic discovery model (peer discovery with DNS, PKI\n   security,\
    \ and packet confidentiality) differ significantly in their\n   impact on the\
    \ privacy of end users trying to authenticate to a RADIUS\n   server.\n   With\
    \ classic RADIUS, traffic in large environments gets aggregated by\n   statically\
    \ configured clearinghouses.  The packets sent to those\n   clearinghouses and\
    \ their responses are mostly unprotected.  As a\n   consequence,\n   o  All intermediate\
    \ IP hops can inspect most of the packet payload in\n      clear text, including\
    \ the User-Name and Calling-Station-Id\n      attributes, and can observe which\
    \ client sent the packet to which\n      clearinghouse.  This allows the creation\
    \ of mobility profiles for\n      any passive observer on the IP path.\n   o \
    \ The existence of a central clearinghouse creates an opportunity\n      for the\
    \ clearinghouse to trivially create the same mobility\n      profiles.  The clearinghouse\
    \ may or may not be trusted not to do\n      this, e.g., by sufficiently threatening\
    \ contractual obligations.\n   o  In addition to that, with the clearinghouse\
    \ being a RADIUS\n      intermediate in possession of a valid shared secret, the\n\
    \      clearinghouse can observe and record even the security-critical\n     \
    \ RADIUS attributes such as User-Password.  This risk may be\n      mitigated\
    \ by choosing authentication payloads that are\n      cryptographically secured\
    \ and do not use the attribute User-\n      Password -- such as certain EAP types.\n\
    \   o  There is no additional information disclosure to parties outside\n    \
    \  the IP path between the RADIUS client and server (in particular,\n      no\
    \ DNS servers learn about realms of current ongoing\n      authentications).\n\
    \   With RADIUS and dynamic discovery,\n   o  This protocol allows for RADIUS\
    \ clients to identify and directly\n      connect to the RADIUS home server. \
    \ This can eliminate the use of\n      clearinghouses to do forwarding of requests,\
    \ and it also\n      eliminates the ability of the clearinghouse to then aggregate\
    \ the\n      user information that flows through it.  However, there are\n   \
    \   reasons why clearinghouses might still be used.  One reason to\n      keep\
    \ a clearinghouse is to act as a gateway for multiple backends\n      in a company;\
    \ another reason may be a requirement to sanitize\n      RADIUS datagrams (filter\
    \ attributes, tag requests with new\n      attributes, etc.).\n   o  Even where\
    \ intermediate proxies continue to be used for reasons\n      unrelated to dynamic\
    \ discovery, the number of such intermediates\n      may be reduced by removing\
    \ those proxies that are only deployed\n      for pure request routing reasons.\
    \  This reduces the number of\n      entities that can inspect the RADIUS traffic.\n\
    \   o  RADIUS clients that make use of dynamic discovery will need to\n      query\
    \ the Domain Name System and use a user's realm name as the\n      query label.\
    \  A passive observer on the IP path between the RADIUS\n      client and the\
    \ DNS server(s) being queried can learn that a user\n      of that specific realm\
    \ was trying to authenticate at that RADIUS\n      client at a certain point in\
    \ time.  This may or may not be\n      sufficient for the passive observer to\
    \ create a mobility profile.\n      During the recursive DNS resolution, a fair\
    \ number of DNS servers\n      and the IP hops in between those get to learn that\
    \ information.\n      Not every single authentication triggers DNS lookups, so\
    \ there is\n      no one-to-one relation of leaked realm information and the number\n\
    \      of authentications for that realm.\n   o  Since dynamic discovery operates\
    \ on a RADIUS hop-by-hop basis,\n      there is no guarantee that the RADIUS payload\
    \ is not transmitted\n      between RADIUS systems that do not make use of this\
    \ algorithm, and\n      they possibly use other transports such as RADIUS/UDP.\
    \  On such\n      hops, the enhanced privacy is jeopardized.\n   In summary, with\
    \ classic RADIUS, few intermediate entities learn very\n   detailed data about\
    \ every ongoing authentication, while with dynamic\n   discovery, many entities\
    \ learn only very little about recently\n   authenticated realms.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   Per this document, IANA has added the following entries\
    \ in existing\n   registries:\n   o  S-NAPTR Application Service Tags registry\n\
    \      *  aaa+auth\n      *  aaa+acct\n      *  aaa+dynauth\n   o  S-NAPTR Application\
    \ Protocol Tags registry\n      *  radius.tls.tcp\n      *  radius.dtls.udp\n\
    \   This document reserves the use of the \"radiustls\" and \"radiusdtls\"\n \
    \  service names.  Registration information as per Section 8.1.1 of\n   [RFC6335]\
    \ is as follows:\n      Service Name: radiustls; radiusdtls\n      Transport Protocols:\
    \ TCP (for radiustls), UDP (for radiusdtls)\n      Assignee: IESG <iesg@ietf.org>\n\
    \      Contact: IETF Chair <chair@ietf.org>\n      Description: Authentication,\
    \ Accounting, and Dynamic Authorization\n      via the RADIUS protocol.  These\
    \ service names are used to\n      construct the SRV service labels \"_radiustls\"\
    \ and \"_radiusdtls\"\n      for discovery of RADIUS/TLS and RADIUS/DTLS servers,\
    \ respectively.\n      Reference: RFC 7585\n   This specification makes use of\
    \ the SRV protocol identifiers \"_tcp\"\n   and \"_udp\", which are mentioned\
    \ as early as [RFC2782] but do not\n   appear to be assigned in an actual registry.\
    \  Since they are in\n   widespread use in other protocols, this specification\
    \ refrains from\n   requesting a new registry \"RADIUS/TLS SRV Protocol Registry\"\
    \ and\n   continues to make use of these tags implicitly.\n   Per this document,\
    \ a number of Object Identifiers have been assigned.\n   They are now under the\
    \ control of IANA following [RFC7299].\n   IANA has assigned the following identifiers:\n\
    \      85 has been assigned from the \"SMI Security for PKIX Module\n      Identifier\"\
    \ registry.  The description is id-mod-nai-realm-08.\n      8 has been assigned\
    \ from the \"SMI Security for PKIX Other Name\n      Forms\" registry.  The description\
    \ is id-on-naiRealm.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n   \
    \           specifying the location of services (DNS SRV)\", RFC 2782,\n     \
    \         DOI 10.17487/RFC2782, February 2000,\n              <http://www.rfc-editor.org/info/rfc2782>.\n\
    \   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n        \
    \      \"Remote Authentication Dial In User Service (RADIUS)\",\n            \
    \  RFC 2865, DOI 10.17487/RFC2865, June 2000,\n              <http://www.rfc-editor.org/info/rfc2865>.\n\
    \   [RFC2866]  Rigney, C., \"RADIUS Accounting\", RFC 2866,\n              DOI\
    \ 10.17487/RFC2866, June 2000,\n              <http://www.rfc-editor.org/info/rfc2866>.\n\
    \   [RFC3958]  Daigle, L. and A. Newton, \"Domain-Based Application\n        \
    \      Service Location Using SRV RRs and the Dynamic Delegation\n           \
    \   Discovery Service (DDDS)\", RFC 3958, DOI 10.17487/RFC3958,\n            \
    \  January 2005, <http://www.rfc-editor.org/info/rfc3958>.\n   [RFC5176]  Chiba,\
    \ M., Dommety, G., Eklund, M., Mitton, D., and B.\n              Aboba, \"Dynamic\
    \ Authorization Extensions to Remote\n              Authentication Dial In User\
    \ Service (RADIUS)\", RFC 5176,\n              DOI 10.17487/RFC5176, January 2008,\n\
    \              <http://www.rfc-editor.org/info/rfc5176>.\n   [RFC5280]  Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and\
    \ W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5580]  Tschofenig, H., Ed., Adrangi, F., Jones, M., Lior, A., and\n  \
    \            B. Aboba, \"Carrying Location Objects in RADIUS and\n           \
    \   Diameter\", RFC 5580, DOI 10.17487/RFC5580, August 2009,\n              <http://www.rfc-editor.org/info/rfc5580>.\n\
    \   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n            \
    \  Applications (IDNA): Protocol\", RFC 5891,\n              DOI 10.17487/RFC5891,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5891>.\n   [RFC6614]\
    \  Winter, S., McCauley, M., Venaas, S., and K. Wierenga,\n              \"Transport\
    \ Layer Security (TLS) Encryption for RADIUS\",\n              RFC 6614, DOI 10.17487/RFC6614,\
    \ May 2012,\n              <http://www.rfc-editor.org/info/rfc6614>.\n   [RFC7360]\
    \  DeKok, A., \"Datagram Transport Layer Security (DTLS) as a\n              Transport\
    \ Layer for RADIUS\", RFC 7360,\n              DOI 10.17487/RFC7360, September\
    \ 2014,\n              <http://www.rfc-editor.org/info/rfc7360>.\n   [RFC7542]\
    \  DeKok, A., \"The Network Access Identifier\", RFC 7542,\n              DOI\
    \ 10.17487/RFC7542, May 2015,\n              <http://www.rfc-editor.org/info/rfc7542>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC4017]  Stanley, D., Walker, J., and B. Aboba,\
    \ \"Extensible\n              Authentication Protocol (EAP) Method Requirements\
    \ for\n              Wireless LANs\", RFC 4017, DOI 10.17487/RFC4017, March\n\
    \              2005, <http://www.rfc-editor.org/info/rfc4017>.\n   [RFC6335] \
    \ Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire,\
    \ \"Internet Assigned Numbers Authority (IANA)\n              Procedures for the\
    \ Management of the Service Name and\n              Transport Protocol Port Number\
    \ Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6335>.\n   [RFC6733]  Fajardo,\
    \ V., Ed., Arkko, J., Loughney, J., and G. Zorn,\n              Ed., \"Diameter\
    \ Base Protocol\", RFC 6733,\n              DOI 10.17487/RFC6733, October 2012,\n\
    \              <http://www.rfc-editor.org/info/rfc6733>.\n   [RFC7299]  Housley,\
    \ R., \"Object Identifier Registry for the PKIX\n              Working Group\"\
    , RFC 7299, DOI 10.17487/RFC7299, July 2014,\n              <http://www.rfc-editor.org/info/rfc7299>.\n\
    \   [RFC7593]  Wierenga, K., Winter, S., and T. Wolniewicz, \"The eduroam\n  \
    \            Architecture for Network Roaming\", RFC 7593,\n              DOI\
    \ 10.17487/RFC7593, September 2015,\n              <http://www.rfc-editor.org/info/rfc7593>.\n"
- title: Appendix A.  ASN.1 Syntax of NAIRealm
  contents:
  - 'Appendix A.  ASN.1 Syntax of NAIRealm

    '
- title: PKIXNaiRealm08 {iso(1) identified-organization(3) dod(6)
  contents:
  - "PKIXNaiRealm08 {iso(1) identified-organization(3) dod(6)\n     internet(1) security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n     id-mod-nai-realm-08(85) }\n DEFINITIONS\
    \ EXPLICIT TAGS ::=\n BEGIN\n -- EXPORTS ALL --\n IMPORTS\n    id-pkix\n    FROM\
    \ PKIX1Explicit-2009\n        {iso(1) identified-organization(3) dod(6) internet(1)\n\
    \         security(5) mechanisms(5) pkix(7) id-mod(0)\n         id-mod-pkix1-explicit-02(51)}\n\
    \           -- from RFCs 5280 and 5912\n    OTHER-NAME\n    FROM PKIX1Implicit-2009\n\
    \       {iso(1) identified-organization(3) dod(6) internet(1) security(5)\n  \
    \     mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}\n        \
    \     -- from RFCs 5280 and 5912\n ;\n -- Service Name Object Identifier\n id-on\
    \   OBJECT IDENTIFIER ::= { id-pkix 8 }\n id-on-naiRealm OBJECT IDENTIFIER ::=\
    \ { id-on 8 }\n -- Service Name\n naiRealm OTHER-NAME ::= { NAIRealm IDENTIFIED\
    \ BY { id-on-naiRealm }}\n ub-naiRealm-length INTEGER ::= 255\n NAIRealm ::= UTF8String\
    \ (SIZE (1..ub-naiRealm-length))\n END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stefan Winter\n   Fondation RESTENA\n   6, rue Richard\
    \ Coudenhove-Kalergi\n   Luxembourg  1359\n   Luxembourg\n   Phone: +352 424409\
    \ 1\n   Fax:   +352 422473\n   Email: stefan.winter@restena.lu\n   URI:   http://www.restena.lu\n\
    \   Mike McCauley\n   AirSpayce Pty Ltd\n   9 Bulbul Place\n   Currumbin Waters\
    \  QLD 4223\n   Australia\n   Phone: +61 7 5598 7474\n   Email: mikem@airspayce.com\n\
    \   URI:   http://www.airspayce.com\n"
