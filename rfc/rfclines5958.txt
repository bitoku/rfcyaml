Abstract This document defines the syntax for private key information and a content type for it.
Private key information includes a private key for a specified public key algorithm and a set of attributes.
The Cryptographic Message Syntax (CMS), as defined in RFC 5652, can be used to digitally sign, digest, authenticate, or encrypt the asymmetric key format content type.
This document obsoletes RFC 5208.
This document defines the syntax for private key information and a Cryptographic Message Syntax (CMS)
[RFC5652] content type for it.
Private key information includes a private key for a specified public key algorithm and a set of attributes.
The CMS can be used to digitally sign, digest, authenticate, or encrypt the asymmetric key format content type.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The key package is defined using ASN.1 [X.680], [X.681], [X.682], and [X.683].
Summary of Updates to RFC 5208
The following summarizes the updates to [RFC5208]
: Changed the name "PrivateKeyInfo" to "OneAsymmetricKey".
This reflects the addition of the publicKey field to allow both parts of the asymmetric key to be conveyed separately.
Not all algorithms will use both fields; however, the publicKey field was added for completeness.
Defined Asymmetric Key Package CMS content type.
Removed redundant IMPLICIT from attributes.
Added publicKey to OneAsymmetricKey and updated the version number.
Added that PKCS #9 attributes may be supported.
Added discussion of compatibility with other private key formats.
Added requirements for encoding rule set.
Changed imports from PKCS #5 to [RFC5912] and [RFC5911].
Replaced ALGORITHM IDENTIFIER with ALGORITHM from [RFC5912].
Registers application/pkcs8 media type and .p8 file extension.
Asymmetric Key Package CMS Content Type
The asymmetric key package CMS content type is used to transfer one or more plaintext asymmetric keys from one party to another.
An asymmetric key package MAY be encapsulated in one or more CMS protecting content types (see Section 4).
Earlier versions of this specification [RFC5208] did not specify a particular encoding rule set, but generators SHOULD use DER [X.690] and receivers MUST support BER [X.690], which also includes DER [X.690].
PrivateKeyInfo is used by [P12].
If any items tagged as version   2 are used, the version must be v2, else the version should be   v1.
When v1, PrivateKeyInfo is the same as it was in [RFC5208].
The   algorithm identifier dictates the format of   the key.
The   algorithm identifier dictates the format of   the key.
The syntax of OneAsymmetricKey accommodates a version number, an indication of the asymmetric algorithm to be used with the private key, a private key, optional keying material attributes (e.g., userCertificate from [X.520]), and an optional public key.
In general, either the public key or the certificate will be present.
In very rare cases will both the public key and the certificate be present as this includes two copies of the public key.
OneAsymmetricKey renames the PrivateKeyInfo syntax defined in [RFC5208].
The new name better reflects the ability to carry both private  and public key components.
Backwards compatibility with the original PrivateKeyInfo is preserved via version number.
The fields in OneAsymmetricKey are used as follows:
version identifies the version of OneAsymmetricKey.
If publicKey is present, then version is set to v2 else version is set to v1.
privateKeyAlgorithm identifies the private key algorithm and optionally contains parameters associated with the asymmetric key pair.
The algorithm is identified by an object identifier (OID) and the format of the parameters depends on the OID, but the PrivateKeyAlgorithms information object set restricts the permissible OIDs.
The value placed in privateKeyAlgorithmIdentifier is the value an originator would apply to indicate which algorithm is to be used with the private key.
privateKey is an OCTET STRING that contains the value of the private key.
The interpretation of the content is defined in the registration of the private key algorithm.
For example, a DSA key is an INTEGER, an RSA key is represented as RSAPrivateKey as defined in [RFC3447], and
an Elliptic Curve Cryptography (ECC) key is represented as ECPrivateKey as defined in [RFC5915].
It contains information corresponding to the public key (e.g., certificates).
The attributes field uses the class ATTRIBUTE which is restricted by the OneAsymmetricKeyAttributes information object set.
OneAsymmetricKeyAttributes is an open ended set in this document.
Others documents can constrain these values.
When present, it contains the public key encoded in a BIT STRING.
The structure within the BIT STRING, if any, depends on the privateKeyAlgorithm.
For example, a DSA key is an INTEGER.
Note that RSA public keys are included in RSAPrivateKey
(i.e., n and e are present), as per [RFC3447], and ECC public keys are included in ECPrivateKey (i.e., in the publicKey field), as per [RFC5915].
This section gives the syntax for encrypted private key information, which is used by [P12].
Encrypted private key information shall have ASN.1 type EncryptedPrivateKeyInfo:
The fields in EncryptedPrivateKeyInfo are used as follows: encryptionAlgorithm identifies the algorithm under which the private key information is encrypted.
encryptedData is the result of encrypting the private key information  (i.e., the PrivateKeyInfo).
The encryption process involves the following two steps: 1.
The private key information is encoded, yielding an octet string.
Generators SHOULD use DER [X.690] and receivers MUST support BER [X.690], which also includes DER [X.690].
The result of step 1 is encrypted with the secret key to give an octet string, the result of the encryption process.
Protecting the AsymmetricKeyPackage CMS protecting content types, [RFC5652] and [RFC5083], can be used to provide security to the AsymmetricKeyPackage: SignedData can be used to apply a digital signature to the AsymmetricKeyPackage.
EncryptedData can be used to encrypt the AsymmetricKeyPackage with symmetric encryption, where the sender and the receiver already share the necessary encryption key.
EnvelopedData can be used to encrypt the AsymmetricKeyPackage with symmetric encryption, where the sender and the receiver do not share the necessary encryption key.
AuthenticatedData can be used to protect the AsymmetricKeyPackage with message authentication codes, where key management information is handled in a manner similar to EnvelopedData.
AuthEnvelopedData can be used to protect the AsymmetricKeyPackage with algorithms that support authenticated encryption, where key management information is handled in a manner similar to EnvelopedData.
Other Private Key Format Considerations
This document defines the syntax and the semantics for a content type that exchanges asymmetric private keys.
There are two other formats that have been used for the transport of asymmetric private keys: Personal Information Exchange (PFX) Syntax Standard [P12], which is more commonly referred to as PKCS #12 or simply P12, is a transfer syntax for personal identity information, including private keys, certificates, miscellaneous secrets, and extensions.
OneAsymmetricKey, PrivateKeyInfo, and EncryptedPrivateKeyInfo can be carried in a P12 message.
The private key information, OneAsymmetricKey and PrivateKeyInfo, are carried in the P12 keyBag BAG TYPE.
EncryptedPrivateKeyInfo is carried in the P12 pkcs8ShroudedKeyBag BAG TYPE.
In current implementations, the file extensions .pfx
and .p12 can be used interchangeably.
Microsoft's private key proprietary transfer syntax.
The .pvk file extension is used for local storage.
and .p12/.pfx formats are not interchangeable; however, conversion tools exist to convert from one format to another.
To extract the private key information from the AsymmetricKeyPackage, the encapsulating layers need to be removed.
At a minimum, the outer ContentInfo [RFC5652] layer needs to be removed.
If the AsymmetricKeyPackage is encapsulated in a SignedData [RFC5652], then the SignedData and EncapsulatedContentInfo layers [RFC5652] also need to be removed.
The same is true for EnvelopedData, EncryptedData, and AuthenticatedData all from [RFC5652] as well as AuthEnvelopedData from [RFC5083].
Once all the outer layers are removed, there are as many sets of private key information as there are OneAsymmetricKey structures.
OneAsymmetricKey and PrivateKeyInfo are the same structure; therefore, either can be saved as a .p8 file or copied in to the P12 KeyBag BAG TYPE.
Removing encapsulating security layers will invalidate any signature and may expose the key to unauthorized disclosure.
.p8 files are sometimes PEM encoded.
When .p8 files are PEM encoded they use the .pem file extension.
PEM encoding is either the Base64 encoding, from Section 4 of [RFC4648], of the DER encoded EncryptedPrivateKeyInfo sandwiched between:  BEGIN ENCRYPTED
PRIVATE KEY  or the Base64 encoding, see Section 4 of [RFC4648], of the DER  encoded PrivateKeyInfo sandwiched between:  BEGIN
Security Considerations Protection of the private key information is vital to public key cryptography.
Disclosure of the private key material to another entity can lead to masquerades.
The encryption algorithm used in the encryption process must be as 'strong' as the key it is protecting.
The asymmetric key package contents are not protected.
This content type can be combined with a security protocol to protect the contents of the package.
This document makes use of object identifiers to identify a CMS content type and the ASN.1 module found in Appendix A.
The CMS content type OID is registered in a DoD arc.
The ASN.1 module OID is registered in an arc delegated by RSADSI to the SMIME Working Group.
No further action by IANA is necessary for this document or any anticipated updates.
This specification also defines a new media subtype that IANA has registered at http://www.iana.org/. 7.1.
Registration of media subtype application/pkcs8 Type name:
None Encoding considerations: binary Security considerations: Carries a cryptographic private key.
The PKCS #8 object inside this media type MUST be DER encoded PrivateKeyInfo.
Published specification: RFC 5958 Applications which use this media type:
Any MIME compliant transport that processes asymmetric keys.
None File extension(s): .p8 Macintosh File Type Code(s): Person & email address to contact for further information:
Restrictions on usage: none Author: Sean Turner <turners@ieca.com
The IESG Appendix A.  ASN.1 Module
This annex provides the normative ASN.1 definitions for the structures described in this specification using ASN.1 as defined in [X.680] through [X.683].
AsymmetricKeyPackageModuleV1 { iso(1) member body(2) us(840)
id mod asymmetricKeyPkgV1(50) } DEFINITIONS IMPLICIT TAGS ::
ALL IMPORTS   FROM New SMIME ASN.1 [RFC5911] Attribute{}
, CONTENT TYPE FROM CryptographicMessageSyntax 2009 {
ATTRIBUTE FROM PKIX CommonTypes 2009 { iso(1) identified organization(3)
From New PKIX ASN.1 [RFC5912] AlgorithmIdentifier{}, ALGORITHM, PUBLIC KEY, CONTENT ENCRYPTION FROM AlgorithmInformation 2009 {
Expect additional content types   }
asymmetric key package CONTENT TYPE ::
{ AsymmetricKeyPackage IDENTIFIED BY id ct KP aKeyPackage }
PrivateKeyInfo is used by [P12].
If any items tagged as version   2 are used, the version must be v2, else the version should be   v1.
When v1, PrivateKeyInfo is the same as it was in [RFC5208].
The   algorithm identifier dictates the format of   the key.
The   algorithm identifier dictates the format of   the key.
Also note that PUBLIC KEY needs to be   imported from the new PKIX ASN.1 Algorithm Information module   and
PrivateKeyAlgorithms needs to be commented out.
