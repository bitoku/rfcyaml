- title: __initial_text__
  contents:
  - '                 Diameter Overload Control Requirements

    '
- title: Abstract
  contents:
  - "Abstract\n   When a Diameter server or agent becomes overloaded, it needs to\
    \ be\n   able to gracefully reduce its load, typically by advising clients to\n\
    \   reduce traffic for some period of time.  Otherwise, it must continue\n   to\
    \ expend resources parsing and responding to Diameter messages,\n   possibly resulting\
    \ in a progressively severe overload condition.  The\n   existing Diameter mechanisms\
    \ are not sufficient for managing overload\n   conditions.  This document describes\
    \ the limitations of the existing\n   mechanisms.  Requirements for new overload\
    \ management mechanisms are\n   also provided.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7068.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Documentation Conventions ..................................4\n  \
    \    1.2. Causes of Overload .........................................5\n    \
    \  1.3. Effects of Overload ........................................6\n      1.4.\
    \ Overload vs. Network Congestion ............................6\n      1.5. Diameter\
    \ Applications in a Broader Network .................7\n   2. Overload Control\
    \ Scenarios ......................................7\n      2.1. Peer-to-Peer Scenarios\
    \ .....................................8\n      2.2. Agent Scenarios ...........................................10\n\
    \      2.3. Interconnect Scenario .....................................14\n  \
    \ 3. Diameter Overload Case Studies .................................15\n    \
    \  3.1. Overload in Mobile Data Networks ..........................15\n      3.2.\
    \ 3GPP Study on Core Network Overload .......................16\n   4. Existing\
    \ Mechanisms ............................................17\n   5. Issues with\
    \ the Current Mechanisms .............................18\n      5.1. Problems\
    \ with Implicit Mechanism ..........................18\n      5.2. Problems with\
    \ Explicit Mechanisms .........................18\n   6. Extensibility and Application\
    \ Independence .....................19\n   7. Solution Requirements ..........................................20\n\
    \      7.1. General ...................................................20\n  \
    \    7.2. Performance ...............................................21\n    \
    \  7.3. Heterogeneous Support for Solution ........................22\n      7.4.\
    \ Granular Control ..........................................23\n      7.5. Priority\
    \ and Policy .......................................23\n      7.6. Security ..................................................23\n\
    \      7.7. Flexibility and Extensibility .............................24\n  \
    \ 8. Security Considerations ........................................25\n    \
    \  8.1. Access Control ............................................25\n      8.2.\
    \ Denial-of-Service Attacks .................................26\n      8.3. Replay\
    \ Attacks ............................................26\n      8.4. Man-in-the-Middle\
    \ Attacks .................................26\n      8.5. Compromised Hosts .........................................27\n\
    \   9. References .....................................................27\n  \
    \    9.1. Normative References ......................................27\n    \
    \  9.2. Informative References ....................................27\n   Appendix\
    \ A. Contributors ..........................................29\n   Appendix B.\
    \ Acknowledgements ......................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A Diameter [RFC6733] node is said to be overloaded when\
    \ it has\n   insufficient resources to successfully process all of the Diameter\n\
    \   requests that it receives.  When a node becomes overloaded, it needs\n   to\
    \ be able to gracefully reduce its load, typically by advising\n   clients to\
    \ reduce traffic for some period of time.  Otherwise, it\n   must continue to\
    \ expend resources parsing and responding to Diameter\n   messages, possibly resulting\
    \ in a progressively severe overload\n   condition.  The existing mechanisms provided\
    \ by Diameter are not\n   sufficient for managing overload conditions.  This document\
    \ describes\n   the limitations of the existing mechanisms and provides requirements\n\
    \   for new overload management mechanisms.\n   This document draws on the work\
    \ done on SIP overload control\n   ([RFC5390], [RFC6357]) as well as on experience\
    \ gained via overload\n   handling in Signaling System No. 7 (SS7) networks and\
    \ studies done by\n   the Third Generation Partnership Project (3GPP) (Section\
    \ 3).\n   Diameter is not typically an end-user protocol; rather, it is\n   generally\
    \ used as one component in support of some end-user activity.\n   For example,\
    \ a SIP server might use Diameter to authenticate and\n   authorize user access.\
    \  Overload in the Diameter backend\n   infrastructure will likely impact the\
    \ experience observed by the end\n   user in the SIP application.\n   The impact\
    \ of Diameter overload on the client application (a client\n   application may\
    \ use the Diameter protocol and other protocols to do\n   its job) is beyond the\
    \ scope of this document.\n   This document presents non-normative descriptions\
    \ of causes of\n   overload, along with related scenarios and studies.  Finally,\
    \ it\n   offers a set of normative requirements for an improved overload\n   indication\
    \ mechanism.\n"
- title: 1.1.  Documentation Conventions
  contents:
  - "1.1.  Documentation Conventions\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as defined\
    \ in [RFC2119], with the\n   exception that they are not intended for interoperability\
    \ of\n   implementations.  Rather, they are used to describe requirements\n  \
    \ towards future specifications where the interoperability requirements\n   will\
    \ be defined.\n   The terms \"client\", \"server\", \"agent\", \"node\", \"peer\"\
    , \"upstream\",\n   and \"downstream\" are used as defined in [RFC6733].\n"
- title: 1.2.  Causes of Overload
  contents:
  - "1.2.  Causes of Overload\n   Overload occurs when an element, such as a Diameter\
    \ server or agent,\n   has insufficient resources to successfully process all\
    \ of the traffic\n   it is receiving.  Resources include all of the capabilities\
    \ of the\n   element used to process a request, including CPU processing, memory,\n\
    \   I/O, and disk resources.  It can also include external resources such\n  \
    \ as a database or DNS server, in which case the CPU, processing,\n   memory,\
    \ I/O, and disk resources of those elements are effectively\n   part of the logical\
    \ element processing the request.\n   External resources can include upstream\
    \ Diameter nodes; for example,\n   a Diameter agent can become effectively overloaded\
    \ if one or more\n   upstream nodes are overloaded.\n   A Diameter node can become\
    \ overloaded due to request levels that\n   exceed its capacity, a reduction of\
    \ available resources (for example,\n   a local or upstream hardware failure),\
    \ or a combination of the two.\n   Overload can occur for many reasons, including:\n\
    \   Inadequate capacity:  When designing Diameter networks, that is,\n      application-layer\
    \ multi-node Diameter deployments, it can be very\n      difficult to predict\
    \ all scenarios that may cause elevated\n      traffic.  It may also be more costly\
    \ to implement support for some\n      scenarios than a network operator may deem\
    \ worthwhile.  This\n      results in the likelihood that a Diameter network will\
    \ not have\n      adequate capacity to handle all situations.\n   Dependency failures:\
    \  A Diameter node can become overloaded because a\n      resource on which it\
    \ depends has failed or become overloaded,\n      greatly reducing the logical\
    \ capacity of the node.  In these\n      cases, even minimal traffic might cause\
    \ the node to go into\n      overload.  Examples of such dependency overloads\
    \ include DNS\n      servers, databases, disks, and network interfaces that have\
    \ failed\n      or become overloaded.\n   Component failures:  A Diameter node\
    \ can become overloaded when it is\n      a member of a cluster of servers that\
    \ each share the load of\n      traffic and one or more of the other members in\
    \ the cluster fail.\n      In this case, the remaining nodes take over the work\
    \ of the failed\n      nodes.  Normally, capacity planning takes such failures\
    \ into\n      account, and servers are typically run with enough spare capacity\n\
    \      to handle failure of another node.  However, unusual failure\n      conditions\
    \ can cause many nodes to fail at once.  This is often\n      the case with software\
    \ failures, where a bad packet or bad\n      database entry hits the same bug\
    \ in a set of nodes in a cluster.\n   Network-initiated traffic flood:  Certain\
    \ access network events can\n      precipitate floods of Diameter signaling traffic.\
    \  For example,\n      operational changes can trigger avalanche restarts, or\
    \ frequent\n      radio overlay handovers can generate excessive authorization\n\
    \      requests.  Failure of a Diameter proxy may also result in a large\n   \
    \   amount of signaling as connections and sessions are reestablished.\n   Subscriber-initiated\
    \ traffic flood:  Large gatherings of subscribers\n      or events that result\
    \ in many subscribers interacting with the\n      network in close time proximity\
    \ can result in Diameter signaling\n      traffic floods.  For example, the finale\
    \ of a large fireworks show\n      could be immediately followed by many subscribers\
    \ posting\n      messages, pictures, and videos concentrated on one portion of\
    \ a\n      network.  Subscriber devices such as smartphones may use\n      aggressive\
    \ registration strategies that generate unusually high\n      Diameter traffic\
    \ loads.\n   DoS attacks:  An attacker wishing to disrupt service in the network\n\
    \      can cause a large amount of traffic to be launched at a target\n      element.\
    \  This can be done from a central source of traffic or\n      through a distributed\
    \ DoS attack.  In all cases, the volume of\n      traffic well exceeds the capacity\
    \ of the element, sending the\n      system into overload.\n"
- title: 1.3.  Effects of Overload
  contents:
  - "1.3.  Effects of Overload\n   Modern Diameter networks, composed of application-layer\
    \ multi-node\n   deployments of Diameter elements, may operate at very large\n\
    \   transaction volumes.  If a Diameter node becomes overloaded or, even\n   worse,\
    \ fails completely, a large number of messages may be lost very\n   quickly. \
    \ Even with redundant servers, many messages can be lost in\n   the time it takes\
    \ for failover to complete.  While a Diameter client\n   or agent should be able\
    \ to retry such requests, an overloaded peer\n   may cause a sudden large increase\
    \ in the number of transactions\n   needing to be retried, rapidly filling local\
    \ queues or otherwise\n   contributing to local overload.  Therefore, Diameter\
    \ devices need to\n   be able to shed load before critical failures can occur.\n"
- title: 1.4.  Overload vs. Network Congestion
  contents:
  - "1.4.  Overload vs. Network Congestion\n   This document uses the term \"overload\"\
    \ to refer to application-layer\n   overload at Diameter nodes.  This is distinct\
    \ from \"network\n   congestion\", that is, congestion that occurs at the lower\
    \ networking\n   layers that may impact the delivery of Diameter messages between\n\
    \   nodes.  This document recognizes that element overload and network\n   congestion\
    \ are interrelated, and that overload can contribute to\n   network congestion\
    \ and vice versa.\n   Network congestion issues are better handled by the transport\n\
    \   protocols.  Diameter uses TCP and the Stream Control Transmission\n   Protocol\
    \ (SCTP), both of which include congestion management\n   features.  Analysis\
    \ of whether those features are sufficient for\n   transport-level congestion\
    \ between Diameter nodes and of any work to\n   further mitigate network congestion\
    \ is out of scope for both this\n   document and the work proposed by it.\n"
- title: 1.5.  Diameter Applications in a Broader Network
  contents:
  - "1.5.  Diameter Applications in a Broader Network\n   Most elements using Diameter\
    \ applications do not use Diameter\n   exclusively.  It is important to realize\
    \ that overload of an element\n   can be caused by a number of factors that may\
    \ be unrelated to the\n   processing of Diameter or Diameter applications.\n \
    \  An element that doesn't use Diameter exclusively needs to be able to\n   signal\
    \ to Diameter peers that it is experiencing overload regardless\n   of the cause\
    \ of the overload, since the overload will affect that\n   element's ability to\
    \ process Diameter transactions.  If the element\n   communicates with protocols\
    \ other than Diameter, it may also need to\n   signal the overload situation on\
    \ these protocols, depending on its\n   function and the architecture of the network\
    \ and application for\n   which it is providing services.  Whether that is necessary\
    \ can only\n   be decided within the context of that architecture and use cases.\n\
    \   This specification details the requirements for a mechanism for\n   signaling\
    \ overload with Diameter; this mechanism provides Diameter\n   nodes the ability\
    \ to inform their Diameter peers of overload,\n   mitigating that part of the\
    \ issue.  Diameter nodes may need to use\n   this, as well as other mechanisms,\
    \ to solve their broader overload\n   issues.  Indicating overload on protocols\
    \ other than Diameter is out\n   of scope for this document and for the work proposed\
    \ by it.\n"
- title: 2.  Overload Control Scenarios
  contents:
  - "2.  Overload Control Scenarios\n   Several Diameter deployment scenarios exist\
    \ that may impact overload\n   management.  The following scenarios help motivate\
    \ the requirements\n   for an overload management mechanism.\n   These scenarios\
    \ are by no means exhaustive and are in general\n   simplified for the sake of\
    \ clarity.  In particular, this document\n   assumes for the sake of clarity that\
    \ the client sends Diameter\n   requests to the server, and the server sends responses\
    \ to the client,\n   even though Diameter supports bidirectional applications.\
    \  Each\n   direction in such an application can be modeled separately.\n   In\
    \ a large-scale deployment, many of the nodes represented in these\n   scenarios\
    \ would be deployed as clusters of servers.  This document\n   assumes that such\
    \ a cluster is responsible for managing its own\n   internal load-balancing and\
    \ overload management so that it appears as\n   a single Diameter node.  That\
    \ is, other Diameter nodes can treat it\n   as a single, monolithic node for the\
    \ purposes of overload management.\n   These scenarios do not illustrate the client\
    \ application.  As\n   mentioned in Section 1, Diameter is not typically an end-user\n\
    \   protocol; rather, it is generally used in support of some other\n   client\
    \ application.  These scenarios do not consider the impact of\n   Diameter overload\
    \ on the client application.\n"
- title: 2.1.  Peer-to-Peer Scenarios
  contents:
  - "2.1.  Peer-to-Peer Scenarios\n   This section describes Diameter peer-to-peer\
    \ scenarios, that is,\n   scenarios where a Diameter client talks directly with\
    \ a Diameter\n   server, without the use of a Diameter agent.\n   Figure 1 illustrates\
    \ the simplest possible Diameter relationship.\n   The client and server share\
    \ a one-to-one peer-to-peer relationship.\n   If the server becomes overloaded,\
    \ either because the client exceeds\n   the server's capacity or because the server's\
    \ capacity is reduced due\n   to some resource dependency, the client needs to\
    \ reduce the amount of\n   Diameter traffic it sends to the server.  Since the\
    \ client cannot\n   forward requests to another server, it must either queue requests\n\
    \   until the server recovers or itself become overloaded in the context\n   of\
    \ the client application and other protocols it may also use.\n              \
    \              +------------------+\n                            |           \
    \       |\n                            |                  |\n                \
    \            |     Server       |\n                            |             \
    \     |\n                            +--------+---------+\n                  \
    \                   |\n                                     |\n              \
    \              +--------+---------+\n                            |           \
    \       |\n                            |                  |\n                \
    \            |     Client       |\n                            |             \
    \     |\n                            +------------------+\n                  \
    \ Figure 1: Basic Peer-to-Peer Scenario\n   Figure 2 shows a similar scenario,\
    \ except in this case the client has\n   multiple servers that can handle work\
    \ for a specific realm and\n   application.  If Server 1 becomes overloaded, the\
    \ client can forward\n   traffic to Server 2.  Assuming that Server 2 has sufficient\
    \ reserve\n   capacity to handle the forwarded traffic, the client should be able\n\
    \   to continue serving client application protocol users.  If Server 1\n   is\
    \ approaching overload, but can still handle some number of new\n   requests,\
    \ it needs to be able to instruct the client to forward a\n   subset of its traffic\
    \ to Server 2.\n               +------------------+     +------------------+\n\
    \               |                  |     |                  |\n              \
    \ |                  |     |                  |\n               |     Server 1\
    \     |     |     Server 2     |\n               |                  |     |  \
    \                |\n               +--------+-`.------+     +------.'+---------+\n\
    \                            `.               .'\n                           \
    \   `.           .'\n                                `.       .'\n           \
    \                       `.   .'\n                            +-------`.'--------+\n\
    \                            |                  |\n                          \
    \  |                  |\n                            |     Client       |\n  \
    \                          |                  |\n                            +------------------+\n\
    \              Figure 2: Multiple-Server Peer-to-Peer Scenario\n   Figure 3 illustrates\
    \ a peer-to-peer scenario with multiple Diameter\n   realm and application combinations.\
    \  In this example, Server 2 can\n   handle work for both applications.  Each\
    \ application might have\n   different resource dependencies.  For example, a\
    \ server might need to\n   access one database for Application A and another for\
    \ Application B.\n   This creates a possibility that Server 2 could become overloaded\
    \ for\n   Application A but not for Application B, in which case the client\n\
    \   would need to divert some part of its Application A requests to\n   Server\
    \ 1, but the client should not divert any Application B\n   requests.  This requires\
    \ that Server 2 be able to distinguish between\n   applications when it indicates\
    \ an overload condition to the client.\n   On the other hand, it's possible that\
    \ the servers host many\n   applications.  If Server 2 becomes overloaded for\
    \ all applications,\n   it would be undesirable for it to have to notify the client\n\
    \   separately for each application.  Therefore, it also needs a way to\n   indicate\
    \ that it is overloaded for all possible applications.\n   +---------------------------------------------+\n\
    \   | Application A       +----------------------+----------------------+\n  \
    \ |+------------------+ |  +----------------+  |  +------------------+|\n   ||\
    \                  | |  |                |  |  |                  ||\n   ||  \
    \                | |  |                |  |  |                  ||\n   ||    \
    \ Server 1     | |  |    Server 2    |  |  |     Server 3     ||\n   ||      \
    \            | |  |                |  |  |                  ||\n   |+--------+---------+\
    \ |  +-------+--------+  |  +-+----------------+|\n   |         |           |\
    \          |           |    |                 |\n   +---------+-----------+----------+-----------+\
    \    |                 |\n             |           |          |              \
    \  |                 |\n             |           |          |                |\
    \  Application B  |\n             |           +----------+----------------+-----------------+\n\
    \             ``-.._                 |                |\n                   `-..__\
    \           |            _.-''\n                        `--._       |        _.-''\n\
    \                             ``-._  |   _.-''\n                            +-----`-.-''-----+\n\
    \                            |                |\n                            |\
    \                |\n                            |     Client     |\n         \
    \                   |                |\n                            +----------------+\n\
    \           Figure 3: Multiple-Application Peer-to-Peer Scenario\n"
- title: 2.2.  Agent Scenarios
  contents:
  - "2.2.  Agent Scenarios\n   This section describes scenarios that include a Diameter\
    \ agent, in\n   the form of either a Diameter relay or Diameter proxy.  These\n\
    \   scenarios do not consider Diameter redirect agents, since they are\n   more\
    \ readily modeled as end servers.  The examples have been kept\n   simple deliberately,\
    \ to illustrate basic concepts.  Significantly\n   more complicated topologies\
    \ are possible with Diameter, including\n   multiple intermediate agents in a\
    \ path connected in a variety\n   of ways.\n   Figure 4 illustrates a simple Diameter\
    \ agent scenario with a single\n   client, agent, and server.  In this case, overload\
    \ can occur at the\n   server, at the agent, or both.  But in most cases, client\
    \ behavior is\n   the same whether overload occurs at the server or at the agent.\
    \  From\n   the client's perspective, server overload and agent overload are the\n\
    \   same thing.\n                           +------------------+\n           \
    \                |                  |\n                           |          \
    \        |\n                           |     Server       |\n                \
    \           |                  |\n                           +--------+---------+\n\
    \                                    |\n                                    |\n\
    \                           +--------+---------+\n                           |\
    \                  |\n                           |                  |\n      \
    \                     |      Agent       |\n                           |     \
    \             |\n                           +--------+---------+\n           \
    \                         |\n                                    |\n         \
    \                  +--------+---------+\n                           |        \
    \          |\n                           |                  |\n              \
    \             |     Client       |\n                           |             \
    \     |\n                           +------------------+\n                   \
    \   Figure 4: Basic Agent Scenario\n   Figure 5 shows an agent scenario with multiple\
    \ servers.  If Server 1\n   becomes overloaded but Server 2 has sufficient reserve\
    \ capacity, the\n   agent may be able to transparently divert some or all Diameter\n\
    \   requests originally bound for Server 1 to Server 2.\n   In most cases, the\
    \ client does not have detailed knowledge of the\n   Diameter topology upstream\
    \ of the agent.  If the agent uses dynamic\n   discovery to find eligible servers,\
    \ the set of eligible servers may\n   not be enumerable from the perspective of\
    \ the client.  Therefore, in\n   most cases the agent needs to deal with any upstream\
    \ overload issues\n   in a way that is transparent to the client.  If one server\
    \ notifies\n   the agent that it has become overloaded, the notification should\
    \ not\n   be passed back to the client in a way that the client could\n   mistakenly\
    \ perceive the agent itself as being overloaded.  If the set\n   of all possible\
    \ destinations upstream of the agent no longer has\n   sufficient capacity for\
    \ incoming load, the agent itself becomes\n   effectively overloaded.\n   On the\
    \ other hand, there are cases where the client needs to be able\n   to select\
    \ a particular server from behind an agent.  For example, if\n   a Diameter request\
    \ is part of a multiple-round-trip authentication,\n   or is otherwise part of\
    \ a Diameter \"session\", it may have a\n   Destination-Host Attribute-Value Pair\
    \ (AVP) that requires that the\n   request be served by Server 1.  Therefore,\
    \ the agent may need to\n   inform a client that a particular upstream server\
    \ is overloaded or\n   otherwise unavailable.  Note that there can be many ways\
    \ a server can\n   be specified, which may have different implications (e.g.,\
    \ by IP\n   address, by host name, etc).\n              +------------------+ \
    \    +------------------+\n              |                  |     |          \
    \        |\n              |                  |     |                  |\n    \
    \          |     Server 1     |     |     Server 2     |\n              |    \
    \              |     |                  |\n              +--------+-`.------+\
    \     +------.'+---------+\n                           `.               .'\n \
    \                            `.           .'\n                               `.\
    \       .'\n                                 `.   .'\n                       \
    \    +-------`.'--------+\n                           |                  |\n \
    \                          |                  |\n                           |\
    \     Agent        |\n                           |                  |\n      \
    \                     +--------+---------+\n                                 \
    \   |\n                                    |\n                               \
    \     |\n                           +--------+---------+\n                   \
    \        |                  |\n                           |                  |\n\
    \                           |     Client       |\n                           |\
    \                  |\n                           +------------------+\n      \
    \           Figure 5: Multiple-Server Agent Scenario\n   Figure 6 shows a scenario\
    \ where an agent routes requests to a set of\n   servers for more than one Diameter\
    \ realm and application.  In this\n   scenario, if Server 1 becomes overloaded\
    \ or unavailable while\n   Server 2 still has available capacity, the agent may\
    \ effectively\n   operate at reduced capacity for Application A but at full capacity\n\
    \   for Application B.  Therefore, the agent needs to be able to report\n   that\
    \ it is overloaded for one application but not for another.\n   +--------------------------------------------+\n\
    \   | Application A       +----------------------+----------------------+\n  \
    \ |+------------------+ |  +----------------+  |  +------------------+|\n   ||\
    \                  | |  |                |  |  |                  ||\n   ||  \
    \                | |  |                |  |  |                  ||\n   ||    \
    \ Server 1     | |  |    Server 2    |  |  |     Server 3     ||\n   ||      \
    \            | |  |                |  |  |                  ||\n   |+---------+--------+\
    \ |  +-------+--------+  |  +--+---------------+|\n   |          |          |\
    \          |           |     |                |\n   +----------+----------+----------+-----------+\
    \     |                |\n              |          |          |              \
    \   |                |\n              |          |          |                \
    \ | Application B  |\n              |          +----------+-----------------+----------------+\n\
    \              |                     |                 |\n               ``--.__\
    \              |                _.\n                      ``-.__        |    \
    \      __.--''\n                            `--.._  |    _..--'\n            \
    \                +----``-+.''-----+\n                            |           \
    \     |\n                            |                |\n                    \
    \        |    Agent       |\n                            |                |\n\
    \                            +-------+--------+\n                            \
    \        |\n                                    |\n                          \
    \  +-------+--------+\n                            |                |\n      \
    \                      |                |\n                            |    Client\
    \      |\n                            |                |\n                   \
    \         +----------------+\n               Figure 6: Multiple-Application Agent\
    \ Scenario\n"
- title: 2.3.  Interconnect Scenario
  contents:
  - "2.3.  Interconnect Scenario\n   Another scenario to consider when looking at\
    \ Diameter overload is\n   that of multiple network operators using Diameter components\n\
    \   connected through an interconnect service, e.g., using IPX (IP Packet\n  \
    \ eXchange).  IPX [IR.34] is an Inter-Operator IP Backbone that\n   provides a\
    \ roaming interconnection network between mobile operators\n   and service providers.\
    \  IPX is also used to transport Diameter\n   signaling between operators [IR.88].\
    \  Figure 7 shows two network\n   operators with an interconnect network between\
    \ them.  There could be\n   any number of these networks between any two network\
    \ operators'\n   networks.\n               +-------------------------------------------+\n\
    \               |               Interconnect                |\n              \
    \ |                                           |\n               |   +--------------+\
    \      +--------------+  |\n               |   |   Server 3   |------|   Server\
    \ 4   |  |\n               |   +--------------+      +--------------+  |\n   \
    \            |         .'                      `.        |\n               +------.-'--------------------------`.------+\n\
    \                    .'                               `.\n                 .-'\
    \                                   `.\n   ------------.'-----+              \
    \               +----`.-------------\n         +----------+ |                \
    \             | +----------+\n         | Server 1 | |                        \
    \     | | Server 2 |\n         +----------+ |                             | +----------+\n\
    \                      |                             |\n   Network Operator 1\
    \ |                             | Network Operator 2\n   -------------------+\
    \                             +-------------------\n                Figure 7:\
    \ Two-Network Interconnect Scenario\n   The characteristics of the information\
    \ that an operator would want to\n   share over such a connection are different\
    \ from the information\n   shared between components within a network operator's\
    \ network.  For\n   example, network operators may not want to convey topology\
    \ or\n   operational information; this would in turn limit how much overload\n\
    \   and loading information can be sent.  For the interconnect scenario\n   shown\
    \ in Figure 7, Server 2 may want to signal overload to Server 1,\n   to affect\
    \ traffic coming from Network Operator 1.\n   This case is distinct from those\
    \ internal to a network operator's\n   network, where there may be many more elements\
    \ in a more complicated\n   topology.  Also, the elements in the interconnect\
    \ network may not\n   support Diameter overload control, and the network operators\
    \ may not\n   want the interconnect network to use overload or loading information.\n\
    \   They may only want the information to pass through the interconnect\n   network\
    \ without further processing or action by the interconnect\n   network, even if\
    \ the elements in the interconnect network do support\n   Diameter overload control.\n"
- title: 3.  Diameter Overload Case Studies
  contents:
  - '3.  Diameter Overload Case Studies

    '
- title: 3.1.  Overload in Mobile Data Networks
  contents:
  - "3.1.  Overload in Mobile Data Networks\n   As the number of smartphone devices\
    \ that are Third Generation (3G)\n   and Long Term Evolution (LTE) enabled continues\
    \ to expand in mobile\n   networks, there have been situations where high signaling\
    \ traffic\n   load led to overload events at the Diameter-based Home Location\n\
    \   Registers (HLRs) and/or Home Subscriber Servers (HSS) [TR23.843].\n   The\
    \ root causes of the HLR overload events were manifold but included\n   hardware\
    \ failure and procedural errors.  The result was high\n   signaling traffic load\
    \ on the HLR and HSS.\n   The 3GPP architecture [TS23.002] makes extensive use\
    \ of Diameter.  It\n   is used for mobility management [TS29.272], the IP Multimedia\n\
    \   Subsystem (IMS) [TS29.228], and policy and charging control\n   [TS29.212],\
    \ as well as other functions.  The details of the\n   architecture are out of\
    \ scope for this document, but it is worth\n   noting that there are quite a few\
    \ Diameter applications, some with\n   quite large amounts of Diameter signaling\
    \ in deployed networks.\n   The 3GPP specifications do not currently address overload\
    \ for\n   Diameter applications or provide a load control mechanism equivalent\n\
    \   to those provided in the more traditional SS7 elements in the Global\n   System\
    \ for Mobile Communications (GSM); see [TS29.002].  The\n   capabilities specified\
    \ in the 3GPP standards do not adequately\n   address the abnormal condition where\
    \ excessively high signaling\n   traffic load situations are experienced.\n  \
    \ Smartphones, which comprise an increasingly large percentage of\n   mobile devices,\
    \ contribute much more heavily, relative to\n   non-smartphones, to the continuation\
    \ of a registration surge, due to\n   their very aggressive registration algorithms.\
    \  Smartphone behavior\n   contributes to network loading and can contribute to\
    \ overload\n   conditions.  The aggressive smartphone logic is designed to:\n\
    \   a.  always have voice and data registration, and\n   b.  constantly try to\
    \ be on 3G or LTE data (and thus on 3G voice or\n       Voice over LTE (VoLTE)\
    \ [IR.92]) for their added benefits.\n   Non-smartphones typically have logic\
    \ to wait for a time period after\n   registering successfully on voice and data.\n\
    \   The aggressive smartphone registration is problematic in two ways:\n   o \
    \ first, by generating excessive signaling load towards the HSS that\n      is\
    \ ten times the load from a non-smartphone, and\n   o  second, by causing continual\
    \ registration attempts when a network\n      failure affects registrations through\
    \ the 3G data network.\n"
- title: 3.2.  3GPP Study on Core Network Overload
  contents:
  - "3.2.  3GPP Study on Core Network Overload\n   A study in the 3GPP System Aspects\
    \ working group 2 (SA2) on core\n   network overload has produced the technical\
    \ report [TR23.843].  This\n   enumerates several causes of overload in mobile\
    \ core networks,\n   including portions that are signaled using Diameter.  [TR23.843]\
    \ is a\n   work in progress and is not complete.  However, it is useful for\n\
    \   pointing out scenarios and the general need for an overload control\n   mechanism\
    \ for Diameter.\n   It is common for mobile networks to employ more than one radio\n\
    \   technology and to do so in an overlay fashion with multiple\n   technologies\
    \ present in the same location (such as 2nd or 3rd\n   generation mobile technologies,\
    \ along with LTE).  This presents\n   opportunities for traffic storms when issues\
    \ occur on one overlay and\n   not another as all devices that had been on the\
    \ overlay with issues\n   switch.  This causes a large amount of Diameter traffic\
    \ as locations\n   and policies are updated.\n   Another scenario called out by\
    \ this study is a flood of registration\n   and mobility management events caused\
    \ by some element in the core\n   network failing.  This flood of traffic from\
    \ end nodes falls under\n   the network-initiated traffic flood category.  There\
    \ is likely to\n   also be traffic resulting directly from the component failure\
    \ in this\n   case.  A similar flood can occur when elements or components recover\n\
    \   as well.\n   Subscriber-initiated traffic floods are also indicated in this\
    \ study\n   as an overload mechanism where a large number of mobile devices are\n\
    \   attempting to access services at the same time, such as in response\n   to\
    \ an entertainment event or a catastrophic event.\n   While this 3GPP study is\
    \ concerned with the broader effects of these\n   scenarios on wireless networks\
    \ and their elements, they have\n   implications specifically for Diameter signaling.\
    \  One of the goals\n   of this document is to provide guidance for a core mechanism\
    \ that can\n   be used to mitigate the scenarios called out by this study.\n"
- title: 4.  Existing Mechanisms
  contents:
  - "4.  Existing Mechanisms\n   Diameter offers both implicit and explicit mechanisms\
    \ for a Diameter\n   node to learn that a peer is overloaded or unreachable. \
    \ The implicit\n   mechanism is simply the lack of responses to requests.  If\
    \ a client\n   fails to receive a response in a certain time period, it assumes\
    \ that\n   the upstream peer is unavailable or is overloaded to the point of\n\
    \   effective unavailability.  The watchdog mechanism [RFC3539] ensures\n   that\
    \ transaction responses occur at a certain rate even when there is\n   otherwise\
    \ little or no other Diameter traffic.\n   The explicit mechanism can involve\
    \ specific protocol error responses,\n   where an agent or server tells a downstream\
    \ peer that it is either\n   too busy to handle a request (DIAMETER_TOO_BUSY)\
    \ or unable to route a\n   request to an upstream destination (DIAMETER_UNABLE_TO_DELIVER)\n\
    \   perhaps because that destination itself is overloaded to the point of\n  \
    \ unavailability.\n   Another explicit mechanism, a DPR (Disconnect-Peer-Request)\
    \ message,\n   can be sent with a Disconnect-Cause of BUSY.  This signals the\n\
    \   sender's intent to close the transport connection and requests that\n   the\
    \ client not reconnect.\n   Once a Diameter node learns via one of these mechanisms\
    \ that an\n   upstream peer has become overloaded, it can then attempt to take\n\
    \   action to reduce the load.  This usually means forwarding traffic to\n   an\
    \ alternate destination, if available.  If no alternate destination\n   is available,\
    \ the node must either reduce the number of messages it\n   originates (in the\
    \ case of a client) or inform the client to reduce\n   traffic (in the case of\
    \ an agent).\n   Diameter requires the use of a congestion-managed transport layer,\n\
    \   currently TCP or SCTP, to mitigate network congestion.  It is\n   expected\
    \ that these transports manage network congestion and that\n   issues with transport\
    \ (e.g., congestion propagation and window\n   management) are managed at that\
    \ level.  But even with a congestion-\n   managed transport, a Diameter node can\
    \ become overloaded at the\n   Diameter protocol or application layers due to\
    \ the causes described\n   in Section 1.2, and congestion-managed transports do\
    \ not provide\n   facilities (and are at the wrong level) to handle server overload.\n\
    \   Transport-level congestion management is also not sufficient to\n   address\
    \ overload in cases of multi-hop and multi-destination\n   signaling.\n"
- title: 5.  Issues with the Current Mechanisms
  contents:
  - "5.  Issues with the Current Mechanisms\n   The currently available Diameter mechanisms\
    \ for indicating an\n   overload condition are not adequate to avoid service outages\
    \ due to\n   overload.  This inadequacy may, in turn, contribute to broader\n\
    \   impacts resulting from overload due to unresponsive Diameter nodes\n   causing\
    \ application-layer or transport-layer retransmissions.  In\n   particular, they\
    \ do not allow a Diameter agent or server to shed load\n   as it approaches overload.\
    \  At best, a node can only indicate that it\n   needs to entirely stop receiving\
    \ requests, i.e., that it has\n   effectively failed.  Even that is problematic\
    \ due to the inability to\n   indicate durational validity on the transient errors\
    \ available in the\n   base Diameter protocol.  Diameter offers no mechanism to\
    \ allow a node\n   to indicate different overload states for different categories\
    \ of\n   messages, for example, if it is overloaded for one Diameter\n   application\
    \ but not another.\n"
- title: 5.1.  Problems with Implicit Mechanism
  contents:
  - "5.1.  Problems with Implicit Mechanism\n   The implicit mechanism doesn't allow\
    \ an agent or server to inform the\n   client of a problem until it is effectively\
    \ too late to do anything\n   about it.  The client does not know that it needs\
    \ to take action\n   until the upstream node has effectively failed.  A Diameter\
    \ node has\n   no opportunity to shed load early to avoid collapse in the first\n\
    \   place.\n   Additionally, the implicit mechanism cannot distinguish between\n\
    \   overload of a Diameter node and network congestion.  Diameter treats\n   the\
    \ failure to receive an answer as a transport failure.\n"
- title: 5.2.  Problems with Explicit Mechanisms
  contents:
  - "5.2.  Problems with Explicit Mechanisms\n   The Diameter specification is ambiguous\
    \ on how a client should handle\n   receipt of a DIAMETER_TOO_BUSY response. \
    \ The base specification\n   [RFC6733] indicates that the sending client should\
    \ attempt to send\n   the request to a different peer.  It makes no suggestion\
    \ that the\n   receipt of a DIAMETER_TOO_BUSY response should affect future Diameter\n\
    \   messages in any way.\n   The Authentication, Authorization, and Accounting\
    \ (AAA) Transport\n   Profile [RFC3539] recommends that a AAA node that receives\
    \ a \"Busy\"\n   response failover all remaining requests to a different agent\
    \ or\n   server.  But while the Diameter base specification explicitly depends\n\
    \   on [RFC3539] to define transport behavior, it does not refer to\n   [RFC3539]\
    \ in the description of behavior on receipt of a\n   DIAMETER_TOO_BUSY error.\
    \  There's a strong likelihood that at least\n   some implementations will continue\
    \ to send Diameter requests to an\n   upstream peer even after receiving a DIAMETER_TOO_BUSY\
    \ error.\n   BCP 41 [RFC2914] describes, among other things, how end-to-end\n\
    \   application behavior can help avoid congestion collapse.  In\n   particular,\
    \ an application should avoid sending messages that will\n   never be delivered\
    \ or processed.  The DIAMETER_TOO_BUSY behavior as\n   described in the Diameter\
    \ base specification fails at this, since if\n   an upstream node becomes overloaded,\
    \ a client attempts each request\n   and does not discover the need to failover\
    \ the request until the\n   initial attempt fails.\n   The situation is improved\
    \ if implementations follow the [RFC3539]\n   recommendation to keep state about\
    \ upstream peer overload.  But even\n   then, the Diameter specification offers\
    \ no guidance on how long a\n   client should wait before retrying the overloaded\
    \ destination.  If an\n   agent or server supports multiple realms and/or applications,\n\
    \   DIAMETER_TOO_BUSY offers no way to indicate that it is overloaded for\n  \
    \ one application but not another.  A DIAMETER_TOO_BUSY error can only\n   indicate\
    \ overload at a \"whole server\" scope.\n   Agent processing of a DIAMETER_TOO_BUSY\
    \ response is also problematic\n   as described in the base specification.  DIAMETER_TOO_BUSY\
    \ is defined\n   as a protocol error.  If an agent receives a protocol error,\
    \ it may\n   either handle it locally or forward the response back towards the\n\
    \   downstream peer.  If a downstream peer receives the DIAMETER_TOO_BUSY\n  \
    \ response, it may stop sending all requests to the agent for some\n   period\
    \ of time, even though the agent may still be able to deliver\n   requests to\
    \ other upstream peers.\n   DIAMETER_UNABLE_TO_DELIVER errors, or using DPR with\
    \ cause code BUSY,\n   also have no mechanisms for specifying the scope or cause\
    \ of the\n   failure, or the durational validity.\n   The issues with error responses\
    \ described in [RFC6733] extend beyond\n   the particular issues for overload\
    \ control and have been addressed in\n   an ad hoc fashion by various implementations.\
    \  Addressing these in a\n   standard way would be a useful exercise, but it is\
    \ beyond the scope\n   of this document.\n"
- title: 6.  Extensibility and Application Independence
  contents:
  - "6.  Extensibility and Application Independence\n   Given the variety of scenarios\
    \ in which Diameter elements can be\n   deployed and the variety of roles they\
    \ can fulfill with Diameter and\n   other technologies, a single algorithm for\
    \ handling overload may not\n   be sufficient.  For purposes of this discussion,\
    \ an algorithm is\n   inclusive of behavior for control of overload but does not\
    \ encompass\n   the general mechanism for transporting control information.  This\n\
    \   effort cannot anticipate all possible future scenarios and roles.\n   Extensibility,\
    \ particularly of algorithms used to deal with overload,\n   will be important\
    \ to cover these cases.\n   Similarly, the scopes to which overload information\
    \ may apply may\n   include cases that have not yet been considered.  Extensibility\
    \ in\n   this area will also be important.\n   The basic mechanism is intended\
    \ to be application independent, that\n   is, a Diameter node can use it across\
    \ any existing and future\n   Diameter applications and expect reasonable results.\
    \  Certain\n   Diameter applications might, however, benefit from application-\n\
    \   specific behavior over and above the mechanism's defaults.  For\n   example,\
    \ an application specification might specify relative\n   priorities of messages\
    \ or selection of a specific overload control\n   algorithm.\n"
- title: 7.  Solution Requirements
  contents:
  - "7.  Solution Requirements\n   This section proposes requirements for an improved\
    \ mechanism to\n   control Diameter overload, with the goals of addressing the\
    \ issues\n   described in Section 5 and supporting the scenarios described in\n\
    \   Section 2.  These requirements are stated primarily in terms of\n   individual\
    \ node behavior to inform the design of the improved\n   mechanism; solution designers\
    \ should keep in mind that the overall\n   goal is improved overall system behavior\
    \ across all the nodes\n   involved, not just improved behavior from specific\
    \ individual nodes.\n"
- title: 7.1.  General
  contents:
  - "7.1.  General\n   REQ 1:  The solution MUST provide a communication method for\
    \ Diameter\n           nodes to exchange load and overload information.\n   REQ\
    \ 2:  The solution MUST allow Diameter nodes to support overload\n           control\
    \ regardless of which Diameter applications they\n           support.  Diameter\
    \ clients and agents must be able to use the\n           received load and overload\
    \ information to support graceful\n           behavior during an overload condition.\
    \  Graceful behavior\n           under overload conditions is best described by\
    \ REQ 3.\n   REQ 3:  The solution MUST limit the impact of overload on the overall\n\
    \           useful throughput of a Diameter server, even when the\n          \
    \ incoming load on the network is far in excess of its\n           capacity. \
    \ The overall useful throughput under load is the\n           ultimate measure\
    \ of the value of a solution.\n   REQ 4:  Diameter allows requests to be sent\
    \ from either side of a\n           connection, and either side of a connection\
    \ may have need to\n           provide its overload status.  The solution MUST\
    \ allow each\n           side of a connection to independently inform the other\
    \ of its\n           overload status.\n   REQ 5:  Diameter allows nodes to determine\
    \ their peers via dynamic\n           discovery or manual configuration.  The\
    \ solution MUST work\n           consistently without regard to how peers are\
    \ determined.\n   REQ 6:  The solution designers SHOULD seek to minimize the amount\
    \ of\n           new configuration required in order to work.  For example, it\n\
    \           is better to allow peers to advertise or negotiate support\n     \
    \      for the solution, rather than to require that this knowledge\n        \
    \   be configured at each node.\n"
- title: 7.2.  Performance
  contents:
  - "7.2.  Performance\n   REQ 7:  The solution and any associated default algorithm(s)\
    \ MUST\n           ensure that the system remains stable.  At some point after\n\
    \           an overload condition has ended, the solution MUST enable\n      \
    \     capacity to stabilize and become equal to what it would be in\n        \
    \   the absence of an overload condition.  Note that this also\n           requires\
    \ that the solution MUST allow nodes to shed load\n           without introducing\
    \ non-converging oscillations during or\n           after an overload condition.\n\
    \   REQ 8:  Supporting nodes MUST be able to distinguish current overload\n  \
    \         information from stale information.\n   REQ 9:  The solution MUST function\
    \ across fully loaded as well as\n           quiescent transport connections.\
    \  This is partially derived\n           from the requirement for stability in\
    \ REQ 7.\n   REQ 10: Consumers of overload information MUST be able to determine\n\
    \           when the overload condition improves or ends.\n   REQ 11: The solution\
    \ MUST be able to operate in networks of different\n           sizes.\n   REQ\
    \ 12: When a single network node fails, goes into overload, or\n           suffers\
    \ from reduced processing capacity, the solution MUST\n           make it possible\
    \ to limit the impact of the affected node on\n           other nodes in the network.\
    \  This helps to prevent a small-\n           scale failure from becoming a widespread\
    \ outage.\n   REQ 13: The solution MUST NOT introduce substantial additional work\n\
    \           for a node in an overloaded state.  For example, a\n           requirement\
    \ for an overloaded node to send overload\n           information every time it\
    \ received a new request would\n           introduce substantial work.\n   REQ\
    \ 14: Some scenarios that result in overload involve a rapid\n           increase\
    \ of traffic with little time between normal levels\n           and levels that\
    \ induce overload.  The solution SHOULD provide\n           for rapid feedback\
    \ when traffic levels increase.\n   REQ 15: The solution MUST NOT interfere with\
    \ the congestion control\n           mechanisms of underlying transport protocols.\
    \  For example, a\n           solution that opened additional TCP connections\
    \ when the\n           network is congested would reduce the effectiveness of\
    \ the\n           underlying congestion control mechanisms.\n"
- title: 7.3.  Heterogeneous Support for Solution
  contents:
  - "7.3.  Heterogeneous Support for Solution\n   REQ 16: The solution is likely to\
    \ be deployed incrementally.  The\n           solution MUST support a mixed environment\
    \ where some, but not\n           all, nodes implement it.\n   REQ 17: In a mixed\
    \ environment with nodes that support the solution\n           and nodes that\
    \ do not, the solution MUST NOT result in\n           materially less useful throughput\
    \ during overload as would\n           have resulted if the solution were not\
    \ present.  It SHOULD\n           result in less severe overload in this environment.\n\
    \   REQ 18: In a mixed environment of nodes that support the solution and\n  \
    \         nodes that do not, the solution MUST NOT preclude elements\n       \
    \    that support overload control from treating elements that do\n          \
    \ not support overload control in an equitable fashion relative\n           to\
    \ those that do.  Users and operators of nodes that do not\n           support\
    \ the solution MUST NOT unfairly benefit from the\n           solution.  The solution\
    \ specification SHOULD provide guidance\n           to implementors for dealing\
    \ with elements not supporting\n           overload control.\n   REQ 19: It MUST\
    \ be possible to use the solution between nodes in\n           different realms\
    \ and in different administrative domains.\n   REQ 20: Any explicit overload indication\
    \ MUST be clearly\n           distinguishable from other errors reported via Diameter.\n\
    \   REQ 21: In cases where a network node fails, is so overloaded that it\n  \
    \         cannot process messages, or cannot communicate due to a\n          \
    \ network failure, it may not be able to provide explicit\n           indications\
    \ of the nature of the failure or its levels of\n           overload.  The solution\
    \ MUST result in at least as much\n           useful throughput as would have\
    \ resulted if the solution were\n           not in place.\n"
- title: 7.4.  Granular Control
  contents:
  - "7.4.  Granular Control\n   REQ 22: The solution MUST provide a way for a node\
    \ to throttle the\n           amount of traffic it receives from a peer node.\
    \  This\n           throttling SHOULD be graded so that it can be applied\n  \
    \         gradually as offered load increases.  Overload is not a\n          \
    \ binary state; there may be degrees of overload.\n   REQ 23: The solution MUST\
    \ provide sufficient information to enable a\n           load-balancing node to\
    \ divert messages that are rejected or\n           otherwise throttled by an overloaded\
    \ upstream node to other\n           upstream nodes that are the most likely to\
    \ have sufficient\n           capacity to process them.\n   REQ 24: The solution\
    \ MUST provide a mechanism for indicating load\n           levels, even when not\
    \ in an overload condition, to assist\n           nodes in making decisions to\
    \ prevent overload conditions from\n           occurring.\n"
- title: 7.5.  Priority and Policy
  contents:
  - "7.5.  Priority and Policy\n   REQ 25: The base specification for the solution\
    \ SHOULD offer general\n           guidance on which message types might be desirable\
    \ to send or\n           process over others during times of overload, based on\n\
    \           application-specific considerations.  For example, it may be\n   \
    \        more beneficial to process messages for existing sessions\n         \
    \  ahead of new sessions.  Some networks may have a requirement\n           to\
    \ give priority to requests associated with emergency\n           sessions.  Any\
    \ normative or otherwise detailed definition of\n           the relative priorities\
    \ of message types during an overload\n           condition will be the responsibility\
    \ of the application\n           specification.\n   REQ 26: The solution MUST\
    \ NOT prevent a node from prioritizing\n           requests based on any local\
    \ policy, so that certain requests\n           are given preferential treatment,\
    \ given additional\n           retransmission, not throttled, or processed ahead\
    \ of others.\n"
- title: 7.6.  Security
  contents:
  - "7.6.  Security\n   REQ 27: The solution MUST NOT provide new vulnerabilities\
    \ to\n           malicious attack or increase the severity of any existing\n \
    \          vulnerabilities.  This includes vulnerabilities to DoS and\n      \
    \     DDoS attacks as well as replay and man-in-the-middle attacks.\n        \
    \   Note that the Diameter base specification [RFC6733] lacks\n           end-to-end\
    \ security, and this must be considered (see\n           Security Considerations\
    \ in this document (Section 8)).  Note\n           that this requirement was expressed\
    \ at a high level so as to\n           not preclude any particular solution. \
    \ Is is expected that\n           the solution will address this in more detail.\n\
    \   REQ 28: The solution MUST NOT depend on being deployed in\n           environments\
    \ where all Diameter nodes are completely trusted.\n           It SHOULD operate\
    \ as effectively as possible in environments\n           where other nodes are\
    \ malicious; this includes preventing\n           malicious nodes from obtaining\
    \ more than a fair share of\n           service.  Note that this does not imply\
    \ any responsibility on\n           the solution to detect, or take countermeasures\
    \ against,\n           malicious nodes.\n   REQ 29: It MUST be possible for a\
    \ supporting node to make\n           authorization decisions about what information\
    \ will be sent\n           to peer nodes based on the identity of those nodes.\
    \  This\n           allows a domain administrator who considers the load of their\n\
    \           nodes to be sensitive information to restrict access to that\n   \
    \        information.  Of course, in such cases, there is no\n           expectation\
    \ that the solution itself will help prevent\n           overload from that peer\
    \ node.\n   REQ 30: The solution MUST NOT interfere with any Diameter-compliant\n\
    \           method that a node may use to protect itself from overload\n     \
    \      from non-supporting nodes or from denial-of-service attacks.\n"
- title: 7.7.  Flexibility and Extensibility
  contents:
  - "7.7.  Flexibility and Extensibility\n   REQ 31: There are multiple situations\
    \ where a Diameter node may be\n           overloaded for some purposes but not\
    \ others.  For example,\n           this can happen to an agent or server that\
    \ supports multiple\n           applications, or when a server depends on multiple\
    \ external\n           resources, some of which may become overloaded while others\n\
    \           are fully available.  The solution MUST allow Diameter nodes\n   \
    \        to indicate overload with sufficient granularity to allow\n         \
    \  clients to take action based on the overloaded resources\n           without\
    \ unreasonably forcing available capacity to go unused.\n           The solution\
    \ MUST support specification of overload\n           information with granularities\
    \ of at least \"Diameter node\",\n           \"realm\", and \"Diameter application\"\
    \ and MUST allow\n           extensibility for others to be added in the future.\n\
    \   REQ 32: The solution MUST provide a method for extending the\n           information\
    \ communicated and the algorithms used for overload\n           control.\n   REQ\
    \ 33: The solution MUST provide a default algorithm that is\n           mandatory\
    \ to implement.\n   REQ 34: The solution SHOULD provide a method for exchanging\
    \ overload\n           and load information between elements that are connected\
    \ by\n           intermediaries that do not support the solution.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   A Diameter overload control mechanism is primarily\
    \ concerned with the\n   load-related and overload-related behavior of nodes in\
    \ a Diameter\n   network, and the information used to affect that behavior.  Load\
    \ and\n   overload information is shared between nodes and directly affects the\n\
    \   behavior, and thus the information is potentially vulnerable to a\n   number\
    \ of methods of attack.\n   Load and overload information may also be sensitive\
    \ from both\n   business and network protection viewpoints.  Operators of Diameter\n\
    \   equipment want to control the visibility of load and overload\n   information\
    \ to keep it from being used for competitive intelligence\n   or for targeting\
    \ attacks.  It is also important that the Diameter\n   overload control mechanism\
    \ not introduce any way in which any other\n   information carried by Diameter\
    \ is sent inappropriately.\n   Note that the Diameter base specification [RFC6733]\
    \ lacks end-to-end\n   security, making it difficult for non-adjacent nodes to\
    \ verify the\n   authenticity and ownership of load and overload information.\n\
    \   Authentication of load and overload information helps to alleviate\n   several\
    \ of the security issues listed in this section.\n   This document includes requirements\
    \ intended to mitigate the effects\n   of attacks and to protect the information\
    \ used by the mechanism.\n   This section discusses potential security considerations\
    \ for overload\n   control solutions.  This discussion provides the motivation\
    \ for\n   several normative requirements described in Section 7.  The\n   discussion\
    \ includes specific references to the normative requirements\n   that apply for\
    \ each issue.\n"
- title: 8.1.  Access Control
  contents:
  - "8.1.  Access Control\n   To control the visibility of load and overload information,\
    \ sending\n   should be subject to some form of authentication and authorization\
    \ of\n   the receiver.  It is also important to the receivers that they are\n\
    \   confident the load and overload information they receive is from a\n   legitimate\
    \ source.  REQ 28 requires that the solution work without\n   assuming that all\
    \ Diameter nodes in a network are trusted for the\n   purposes of exchanging overload\
    \ and load information.  REQ 29\n   requires that the solution let nodes restrict\
    \ unauthorized parties\n   from seeing overload information.  Note that this implies\
    \ a certain\n   amount of configurability on the nodes supporting the Diameter\n\
    \   overload control mechanism.\n"
- title: 8.2.  Denial-of-Service Attacks
  contents:
  - "8.2.  Denial-of-Service Attacks\n   An overload control mechanism provides a\
    \ very attractive target for\n   denial-of-service attacks.  A small number of\
    \ messages may effect a\n   large service disruption by falsely reporting overload\
    \ conditions.\n   Alternately, attacking servers nearing, or in, overload may\
    \ also be\n   facilitated by disrupting their overload indications, potentially\n\
    \   preventing them from mitigating their overload condition.\n   A design goal\
    \ for the Diameter overload control mechanism is to\n   minimize or eliminate\
    \ the possibility of using the mechanism for this\n   type of attack.  More strongly,\
    \ REQ 27 forbids the solution from\n   introducing new vulnerabilities to malicious\
    \ attack.  Additionally,\n   REQ 30 stipulates that the solution not interfere\
    \ with other\n   mechanisms used for protection against denial-of-service attacks.\n\
    \   As the intent of some denial-of-service attacks is to induce overload\n  \
    \ conditions, an effective overload control mechanism should help to\n   mitigate\
    \ the effects of such an attack.\n"
- title: 8.3.  Replay Attacks
  contents:
  - "8.3.  Replay Attacks\n   An attacker that has managed to obtain some messages\
    \ from the\n   overload control mechanism may attempt to affect the behavior of\n\
    \   nodes supporting the mechanism by sending those messages at\n   potentially\
    \ inopportune times.  In addition to time shifting, replay\n   attacks may send\
    \ messages to other nodes as well (target shifting).\n   A design goal for the\
    \ Diameter overload control solution is to\n   minimize or eliminate the possibility\
    \ of causing disruption by using\n   a replay attack on the Diameter overload\
    \ control mechanism.\n   (Allowing a replay attack using the overload control\
    \ solution would\n   violate REQ 27.)\n"
- title: 8.4.  Man-in-the-Middle Attacks
  contents:
  - "8.4.  Man-in-the-Middle Attacks\n   By inserting themselves between two nodes\
    \ supporting the Diameter\n   overload control mechanism, an attacker may potentially\
    \ both access\n   and alter the information sent between those nodes.  This can\
    \ be used\n   for information gathering for business intelligence and attack\n\
    \   targeting, as well as direct attacks.\n   REQs 27, 28, and 29 imply a need\
    \ to prevent man-in-the-middle attacks\n   on the overload control solution. \
    \ A transport using Transport Layer\n   Security (TLS) and/or IPsec may be desirable\
    \ for this purpose.\n"
- title: 8.5.  Compromised Hosts
  contents:
  - "8.5.  Compromised Hosts\n   A compromised host that supports the Diameter overload\
    \ control\n   mechanism could be used for information gathering as well as for\n\
    \   sending malicious information to any Diameter node that would\n   normally\
    \ accept information from it.  While it is beyond the scope of\n   the Diameter\
    \ overload control mechanism to mitigate any operational\n   interruption to the\
    \ compromised host, REQs 28 and 29 imply a need to\n   minimize the impact that\
    \ a compromised host can have on other nodes\n   through the use of the Diameter\
    \ overload control mechanism.  Of\n   course, a compromised host could be used\
    \ to cause damage in a number\n   of other ways.  This is out of scope for a Diameter\
    \ overload control\n   mechanism.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC6733]   Fajardo, V., Arkko, J., Loughney, J., and G. Zorn,\n \
    \              \"Diameter Base Protocol\", RFC 6733, October 2012.\n   [RFC2914]\
    \   Floyd, S., \"Congestion Control Principles\", BCP 41,\n               RFC\
    \ 2914, September 2000.\n   [RFC3539]   Aboba, B. and J. Wood, \"Authentication,\
    \ Authorization and\n               Accounting (AAA) Transport Profile\", RFC\
    \ 3539, June 2003.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC5390]   Rosenberg, J., \"Requirements for\
    \ Management of Overload\n               in the Session Initiation Protocol\"\
    , RFC 5390,\n               December 2008.\n   [RFC6357]   Hilt, V., Noel, E.,\
    \ Shen, C., and A. Abdelal, \"Design\n               Considerations for Session\
    \ Initiation Protocol (SIP)\n               Overload Control\", RFC 6357, August\
    \ 2011.\n   [TR23.843]  3GPP, \"Study on Core Network (CN) overload solutions\"\
    ,\n               TR 23.843 1.2.0, Work in Progress, October 2013.\n   [IR.34]\
    \     GSMA, \"Inter-Service Provider IP Backbone Guidelines\",\n             \
    \  IR 34 9.1, May 2013.\n   [IR.88]     GSMA, \"LTE Roaming Guidelines\", IR 88\
    \ 9.0, January 2013.\n   [IR.92]     GSMA, \"IMS Profile for Voice and SMS\",\
    \ IR 92 7.0,\n               March 2013.\n   [TS23.002]  3GPP, \"Network Architecture\"\
    , TS 23.002 12.2.0,\n               June 2013.\n   [TS29.272]  3GPP, \"Evolved\
    \ Packet System (EPS); Mobility Management\n               Entity (MME) and Serving\
    \ GPRS Support Node (SGSN) related\n               interfaces based on Diameter\
    \ protocol\", TS 29.272 12.2.0,\n               September 2013.\n   [TS29.212]\
    \  3GPP, \"Policy and Charging Control (PCC) over Gx/Sd\n               reference\
    \ point\", TS 29.212 12.2.0, September 2013.\n   [TS29.228]  3GPP, \"IP Multimedia\
    \ (IM) Subsystem Cx and Dx interfaces;\n               Signalling flows and message\
    \ contents\", TS 29.228 12.0.0,\n               September 2013.\n   [TS29.002]\
    \  3GPP, \"Mobile Application Part (MAP) specification\",\n               TS 29.002\
    \ 12.2.0, September 2013.\n"
- title: Appendix A.  Contributors
  contents:
  - "Appendix A.  Contributors\n   Significant contributions to this document were\
    \ made by Adam Roach\n   and Eric Noel.\n"
- title: Appendix B.  Acknowledgements
  contents:
  - "Appendix B.  Acknowledgements\n   Review of, and contributions to, this specification\
    \ by Martin Dolly,\n   Carolyn Johnson, Jianrong Wang, Imtiaz Shaikh, Jouni Korhonen,\
    \ Robert\n   Sparks, Dieter Jacobsohn, Janet Gunn, Jean-Jacques Trottin, Laurent\n\
    \   Thiebaut, Andrew Booth, and Lionel Morand were most appreciated.  We\n   would\
    \ like to thank them for their time and expertise.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric McMurry\n   Oracle\n   17210 Campbell Rd.\n   Suite\
    \ 250\n   Dallas, TX  75252\n   US\n   EMail: emcmurry@computer.org\n   Ben Campbell\n\
    \   Oracle\n   17210 Campbell Rd.\n   Suite 250\n   Dallas, TX  75252\n   US\n\
    \   EMail: ben@nostrum.com\n"
