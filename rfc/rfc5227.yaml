- contents:
  - '                    IPv4 Address Conflict Detection

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   When two hosts on the same link attempt to use the same IPv4 address\n
    \  at the same time (except in rare special cases where this has been\n   arranged
    by prior coordination), problems ensue for one or both\n   hosts.  This document
    describes (i) a simple precaution that a host\n   can take in advance to help
    prevent this misconfiguration from\n   happening, and (ii) if this misconfiguration
    does occur, a simple\n   mechanism by which a host can passively detect, after
    the fact, that\n   it has happened, so that the host or administrator may respond
    to\n   rectify the problem.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Conventions and Terminology Used in This Document ..........4\n      1.2.
    Relationship to RFC 826 ....................................5\n           1.2.1.
    Broadcast ARP Replies ...............................7\n      1.3. Applicability
    ..............................................7\n   2. Address Probing, Announcing,
    Conflict Detection, and Defense ....9\n      2.1. Probing an Address ........................................10\n
    \          2.1.1. Probe Details ......................................10\n      2.2.
    Shorter Timeouts on Appropriate Network Technologies ......11\n      2.3. Announcing
    an Address .....................................12\n      2.4. Ongoing Address
    Conflict Detection and Address Defense ....12\n      2.5. Continuing Operation
    ......................................14\n      2.6. Broadcast ARP Replies .....................................14\n
    \  3. Why Are ARP Announcements Performed Using ARP Request\n      Packets and
    Not ARP Reply Packets? .............................15\n   4. Historical Note
    ................................................17\n   5. Security Considerations
    ........................................17\n   6. Acknowledgments ................................................18\n
    \  7. References .....................................................18\n      7.1.
    Normative References ......................................18\n      7.2. Informative
    References ....................................19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Historically, accidentally configuring two Internet hosts
    with the\n   same IP address has often been an annoying and hard-to-diagnose\n
    \  problem.\n   This is unfortunate, because the existing Address Resolution Protocol\n
    \  (ARP) provides an easy way for a host to detect this kind of\n   misconfiguration
    and report it to the user.  The DHCP specification\n   [RFC2131] briefly mentions
    the role of ARP in detecting\n   misconfiguration, as illustrated in the following
    three excerpts from\n   RFC 2131:\n   o the client SHOULD probe the newly received
    address, e.g., with ARP\n   o The client SHOULD perform a final check on the parameters\n
    \    (e.g., ARP for allocated network address)\n   o If the client detects that
    the address is already in use\n     (e.g., through the use of ARP), the client
    MUST send a DHCPDECLINE\n     message to the server\n   Unfortunately, the DHCP
    specification does not give any guidance\n   to implementers concerning the number
    of ARP packets to send, the\n   interval between packets, the total time to wait
    before concluding\n   that an address may safely be used, or indeed even which
    kinds\n   of packets a host should be listening for, in order to make this\n   determination.
    \ It leaves unspecified the action a host should\n   take if, after concluding
    that an address may safely be used, it\n   subsequently discovers that it was
    wrong.  It also fails to specify\n   what precautions a DHCP client should take
    to guard against\n   pathological failure cases, such as a DHCP server that repeatedly\n
    \  OFFERs the same address, even though it has been DECLINEd multiple\n   times.\n
    \  The authors of the DHCP specification may have been justified in\n   thinking
    at the time that the answers to these questions seemed too\n   simple, obvious,
    and straightforward to be worth mentioning, but\n   unfortunately this left some
    of the burden of protocol design to each\n   individual implementer.  This document
    seeks to remedy this omission\n   by clearly specifying the required actions for:\n
    \  1. Determining whether use of an address is likely to lead to an\n      addressing
    conflict.  This includes (a) the case where the address\n      is already actively
    in use by another host on the same link, and\n      (b) the case where two hosts
    are inadvertently about to begin\n      using the same address, and both are simultaneously
    in the process\n      of probing to determine whether the address may safely be
    used\n      (Section 2.1.).\n   2. Subsequent passive detection that another host
    on the network is\n      inadvertently using the same address.  Even if all hosts
    observe\n      precautions to avoid using an address that is already in use,\n
    \     conflicts can still occur if two hosts are out of communication\n      at
    the time of initial interface configuration.  This could occur\n      with wireless
    network interfaces if the hosts are temporarily out\n      of range, or with Ethernet
    interfaces if the link between two\n      Ethernet hubs is not functioning at
    the time of address\n      configuration.  A well-designed host will handle not
    only\n      conflicts detected during interface configuration, but also\n      conflicts
    detected later, for the entire duration of the time\n      that the host is using
    the address (Section 2.4.).\n   3. Rate-limiting of address acquisition attempts
    in the case of\n      an excessive number of repeated conflicts (Section 2.1.).\n
    \  The utility of IPv4 Address Conflict Detection (ACD) is not limited\n   to
    DHCP clients.  No matter how an address was configured, whether\n   via manual
    entry by a human user, via information received from a\n   DHCP server, or via
    any other source of configuration information,\n   detecting conflicts is useful.
    \ Upon detecting a conflict, the\n   configuring agent should be notified of the
    error.  In the case where\n   the configuring agent is a human user, that notification
    may take the\n   form of an error message on a screen, a Simple Network Management\n
    \  Protocol (SNMP) notification, or an error message sent via text\n   message
    to a mobile phone.  In the case of a DHCP server, that\n   notification takes
    the form of a DHCP DECLINE message sent to the\n   server.  In the case of configuration
    by some other kind of software,\n   that notification takes the form of an error
    indication to the\n   software in question, to inform it that the address it selected
    is\n   in conflict with some other host on the network.  The configuring\n   software
    may choose to cease network operation, or it may\n   automatically select a new
    address so that the host may re-establish\n   IP connectivity as soon as possible.\n
    \  Allocation of IPv4 Link-Local Addresses [RFC3927] can be thought of\n   as
    a special case of this mechanism, where the configuring agent is\n   a pseudo-random
    number generator, and the action it takes upon being\n   notified of a conflict
    is to pick a different random number and try\n   again.  In fact, this is exactly
    how IPv4 Link-Local Addressing was\n   implemented in Mac OS 9 back in 1998.  If
    the DHCP client failed to\n   get a response from any DHCP server, it would simply
    make up a fake\n   response containing a random 169.254.x.x address.  If the ARP
    module\n   reported a conflict for that address, then the DHCP client would try\n
    \  again, making up a new random 169.254.x.x address as many times as\n   was
    necessary until it succeeded.  Implementing ACD as a standard\n   feature of the
    networking stack has the side effect that it means\n   that half the work for
    IPv4 Link-Local Addressing is already done.\n"
  - contents:
    - "1.1.  Conventions and Terminology Used in This Document\n   The key words \"MUST\",
      \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
      NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to
      be interpreted as described in \"Key words for use in\n   RFCs to Indicate Requirement
      Levels\" [RFC2119].\n   Wherever this document uses the term 'sender IP address'
      or 'target\n   IP address' in the context of an ARP packet, it is referring
      to the\n   fields of the ARP packet identified in the ARP specification [RFC826]\n
      \  as 'ar$spa' (Sender Protocol Address) and 'ar$tpa' (Target Protocol\n   Address),
      respectively.  For the usage of ARP described in this\n   document, each of
      these fields always contains an IPv4 address.\n   In this document, the term
      'ARP Probe' is used to refer to an ARP\n   Request packet, broadcast on the
      local link, with an all-zero 'sender\n   IP address'.  The 'sender hardware
      address' MUST contain the hardware\n   address of the interface sending the
      packet.  The 'sender IP address'\n   field MUST be set to all zeroes, to avoid
      polluting ARP caches in\n   other hosts on the same link in the case where the
      address turns out\n   to be already in use by another host.  The 'target hardware
      address'\n   field is ignored and SHOULD be set to all zeroes.  The 'target
      IP\n   address' field MUST be set to the address being probed.  An ARP Probe\n
      \  conveys both a question (\"Is anyone using this address?\") and an\n   implied
      statement (\"This is the address I hope to use.\").\n   In this document, the
      term 'ARP Announcement' is used to refer to an\n   ARP Request packet, broadcast
      on the local link, identical to the ARP\n   Probe described above, except that
      both the sender and target IP\n   address fields contain the IP address being
      announced.  It conveys a\n   stronger statement than an ARP Probe, namely, \"This
      is the address I\n   am now using.\"\n   The following timing constants used
      in this protocol are referenced\n   in Section 2, which describes the operation
      of the protocol in\n   detail.  (Note that the values listed here are fixed
      constants; they\n   are not intended to be modifiable by implementers, operators,
      or end\n   users.  These constants are given symbolic names here to facilitate\n
      \  the writing of future standards that may want to reference this\n   document
      with different values for these named constants; however,\n   at the present
      time no such future standards exist.)\n   PROBE_WAIT           1 second   (initial
      random delay)\n   PROBE_NUM            3          (number of probe packets)\n
      \  PROBE_MIN            1 second   (minimum delay until repeated probe)\n   PROBE_MAX
      \           2 seconds  (maximum delay until repeated probe)\n   ANNOUNCE_WAIT
      \       2 seconds  (delay before announcing)\n   ANNOUNCE_NUM         2          (number
      of Announcement packets)\n   ANNOUNCE_INTERVAL    2 seconds  (time between Announcement
      packets)\n   MAX_CONFLICTS       10          (max conflicts before rate-limiting)\n
      \  RATE_LIMIT_INTERVAL 60 seconds  (delay between successive attempts)\n   DEFEND_INTERVAL
      \    10 seconds  (minimum interval between defensive\n                                    ARPs)\n"
    title: 1.1.  Conventions and Terminology Used in This Document
  - contents:
    - "1.2.  Relationship to RFC 826\n   This document does not modify any of the
      protocol rules in RFC 826.\n   It does not modify the packet format, or the
      meaning of any of the\n   fields.  The existing rules for \"Packet Generation\"
      and \"Packet\n   Reception\" still apply exactly as specified in RFC 826.\n
      \  This document expands on RFC 826 by specifying:\n   (1) that a specific ARP
      Request should be generated when an interface\n       is configured, to discover
      if the address is already in use, and\n   (2) an additional trivial test that
      should be performed on each\n       received ARP packet, to facilitate passive
      ongoing conflict\n       detection.  This additional test creates no additional
      packet\n       overhead on the network (no additional packets are sent) and\n
      \      negligible additional CPU burden on hosts, since every host\n       implementing
      ARP is *already* required to process every received\n       ARP packet according
      to the Packet Reception rules specified in\n       RFC 826.  These rules already
      include checking to see if the\n       'sender IP address' of the ARP packet
      appears in any of the\n       entries in the host's ARP cache; the additional
      test is simply to\n       check to see if the 'sender IP address' is the host's
      *own* IP\n       address, potentially as little as a single additional machine\n
      \      instruction on many architectures.\n   As already specified in RFC 826,
      an ARP Request packet serves two\n   functions, an assertion and a question:\n
      \  * Assertion:\n      The fields 'ar$sha' (Sender Hardware Address) and 'ar$spa'
      (Sender\n      Protocol Address) together serve as an assertion of a fact: that\n
      \     the stated Protocol Address is mapped to the stated Hardware\n      Address.\n
      \  * Question:\n      The fields 'ar$tha' (Target Hardware Address, zero) and
      'ar$tpa'\n      (Target Protocol Address) serve as a question, asking, for the\n
      \     stated Protocol Address, to which Hardware Address it is mapped.\n   This
      document clarifies what it means to have one without the other.\n   Some readers
      pointed out that it is probably impossible to ask any\n   truly pure question;
      asking any question necessarily invites\n   speculation about why the interrogator
      wants to know the answer.\n   Just as someone pointing to an empty seat and
      asking, \"Is anyone\n   sitting here?\" implies an unspoken \"... because if
      not then I will,\"\n   the same is true here.  An ARP Probe with an all-zero
      'sender IP\n   address' may ostensibly be merely asking an innocent question
      (\"Is\n   anyone using this address?\"), but an intelligent implementation that\n
      \  knows how IPv4 Address Conflict Detection works should be able to\n   recognize
      this question as the precursor to claiming the address.\n   Consequently, if
      that implementation is also, at that exact moment,\n   in the process of asking
      the very same question, it should recognize\n   that they can't both sit in
      the same seat, so it would be prudent to\n   ask about some other seat.\n"
    - contents:
      - "1.2.1.  Broadcast ARP Replies\n   In some applications of IPv4 Address Conflict
        Detection (ACD), it may\n   be advantageous to deliver ARP Replies using broadcast
        instead of\n   unicast because this allows address conflicts to be detected
        sooner\n   than might otherwise happen.  For example, \"Dynamic Configuration
        of\n   IPv4 Link-Local Addresses\" [RFC3927] uses ACD exactly as specified\n
        \  here, but additionally specifies that ARP Replies should be sent\n   using
        broadcast, because in that context the trade-off of increased\n   broadcast
        traffic in exchange for improved reliability and fault-\n   tolerance was
        deemed to be an appropriate one.  There may be other\n   future specifications
        where the same trade-off is appropriate.\n   Additional details are given
        in Section 2.6, \"Broadcast ARP Replies\".\n   RFC 826 implies that replies
        to ARP Requests are usually delivered\n   using unicast, but it is also acceptable
        to deliver ARP Replies using\n   broadcast.  The Packet Reception rules in
        RFC 826 specify that the\n   content of the 'ar$spa' field should be processed
        *before* examining\n   the 'ar$op' field, so any host that correctly implements
        the Packet\n   Reception algorithm specified in RFC 826 will correctly handle
        ARP\n   Replies delivered via link-layer broadcast.\n"
      title: 1.2.1.  Broadcast ARP Replies
    title: 1.2.  Relationship to RFC 826
  - contents:
    - "1.3.  Applicability\n   This specification applies to all IEEE 802 Local Area
      Networks (LANs)\n   [802], including Ethernet [802.3], Token-Ring [802.5], and
      IEEE\n   802.11 wireless LANs [802.11], as well as to other link-layer\n   technologies
      that operate at data rates of at least 1 Mb/s, have a\n   round-trip latency
      of at most one second, and use ARP [RFC826] to map\n   from IP addresses to
      link-layer hardware addresses.  Wherever this\n   document uses the term \"IEEE
      802\", the text applies equally to any of\n   these network technologies.\n
      \  Link-layer technologies that support ARP but operate at rates below\n   1
      Mb/s or latencies above one second will still work correctly with\n   this protocol,
      but more often may have to handle late conflicts\n   detected after the Probing
      phase has completed.  On these kinds of\n   links, it may be desirable to specify
      different values for the\n   following parameters:\n   (a) PROBE_NUM, PROBE_MIN,
      and PROBE_MAX, the number of, and interval\n       between, ARP Probes, explained
      in Section 2.1.\n   (b) ANNOUNCE_NUM and ANNOUNCE_INTERVAL, the number of, and
      interval\n       between, ARP Announcements, explained in Section 2.3.\n   (c)
      RATE_LIMIT_INTERVAL and MAX_CONFLICTS, controlling the maximum\n       rate
      at which address claiming may be attempted, explained in\n       Section 2.1.\n
      \  (d) DEFEND_INTERVAL, the time interval between conflicting ARPs below\n       which
      a host MUST NOT attempt to defend its address, explained in\n       Section
      2.4.\n   Link-layer technologies that do not support ARP may be able to use\n
      \  other techniques for determining whether a particular IP address is\n   currently
      in use.  However, implementing Address Conflict Detection\n   for such networks
      is outside the scope of this document.\n   For the protocol specified in this
      document to be effective, it is\n   not necessary that all hosts on the link
      implement it.  For a given\n   host implementing this specification to be protected
      against\n   accidental address conflicts, all that is required is that the peers\n
      \  on the same link correctly implement the ARP protocol as given in\n   RFC
      826.  To be specific, when a peer host receives an ARP Request\n   where the
      Target Protocol Address of the ARP Request matches (one of)\n   that host's
      IP address(es) configured on that interface, then as long\n   as it properly
      responds with a correctly-formatted ARP Reply, the\n   querying host will be
      able to detect that the address is already in\n   use.\n   The specifications
      in this document allow hosts to detect conflicts\n   between two hosts using
      the same address on the same physical link.\n   ACD does not detect conflicts
      between two hosts using the same\n   address on different physical links, and
      indeed it should not.\n   For example, the address 10.0.0.1 [RFC1918] is in
      use by countless\n   devices on countless private networks throughout the world,
      and this\n   is not a conflict, because they are on different links.  It would\n
      \  only be a conflict if two such devices were to be connected to the\n   same
      link, and when this happens (as it sometimes does), this is a\n   perfect example
      of a situation where ACD is extremely useful to\n   detect and report (and/or
      automatically correct) this error.\n   For the purposes of this document, a
      set of hosts is considered to be\n   \"on the same link\" if:\n   -  when any
      host, A, from that set, sends a packet to any other host,\n      B, in that
      set, using unicast, multicast, or broadcast, the entire\n      link-layer packet
      payload arrives unmodified, and\n   -  a broadcast sent over that link by any
      host from that set of hosts\n      can be received by every other host in that
      set.\n   The link-layer *header* may be modified, such as in Token Ring Source\n
      \  Routing [802.5], but not the link-layer *payload*.  In particular, if\n   any
      device forwarding a packet modifies any part of the IP header or\n   IP payload,
      then the packet is no longer considered to be on the same\n   link.  This means
      that the packet may pass through devices such as\n   repeaters, bridges, hubs,
      or switches and still be considered to be\n   on the same link for the purpose
      of this document, but not through a\n   device such as an IP router that decrements
      the TTL or otherwise\n   modifies the IP header.\n   Where this document uses
      the term \"host\", it applies equally to\n   interfaces on routers or other
      multi-homed hosts, regardless of\n   whether the host/router is currently forwarding
      packets.  In many\n   cases a router will be critical network infrastructure
      with an IP\n   address that is locally well known and assumed to be relatively\n
      \  constant.  For example, the address of the default router is one of\n   the
      parameters that a DHCP server typically communicates to its\n   clients, and
      (at least until mechanisms like DHCP Reconfigure\n   [RFC3203] become widely
      implemented) there isn't any practical way\n   for the DHCP server to inform
      clients if that address changes.\n   Consequently, for such devices, handling
      conflicts by picking a new\n   IP address is not a good option.  In those cases,
      option (c) in\n   Section 2.4 (\"Ongoing Address Conflict Detection and Address\n
      \  Defense\") applies.\n   However, even when a device is manually configured
      with a fixed\n   address, having some other device on the network claiming to
      have the\n   same IP address will pollute peer ARP caches and prevent reliable\n
      \  communication, so it is still helpful to inform the operator.  If a\n   conflict
      is detected at the time the operator sets the fixed manual\n   address, then
      it is helpful to inform the operator immediately; if a\n   conflict is detected
      subsequently, it is helpful to inform the\n   operator via some appropriate
      asynchronous communication channel.\n   Even though reliable communication via
      the conflicted address is not\n   possible, it may still be possible to inform
      the operator via some\n   other communication channel that is still operating,
      such as via some\n   other interface on the router, via a dynamic IPv4 link-local
      address,\n   via a working IPv6 address, or even via some completely different\n
      \  non-IP technology such as a locally-attached screen or serial\n   console.\n"
    title: 1.3.  Applicability
  title: 1.  Introduction
- contents:
  - "2.  Address Probing, Announcing, Conflict Detection, and Defense\n   This section
    describes initial probing to safely determine whether an\n   address is already
    in use, announcing the chosen address, ongoing\n   conflict checking, and optional
    use of broadcast ARP Replies to\n   provide faster conflict detection.\n"
  - contents:
    - "2.1.  Probing an Address\n   Before beginning to use an IPv4 address (whether
      received from manual\n   configuration, DHCP, or some other means), a host implementing
      this\n   specification MUST test to see if the address is already in use, by\n
      \  broadcasting ARP Probe packets.  This also applies when a network\n   interface
      transitions from an inactive to an active state, when a\n   computer awakes
      from sleep, when a link-state change signals that an\n   Ethernet cable has
      been connected, when an 802.11 wireless interface\n   associates with a new
      base station, or when any other change in\n   connectivity occurs where a host
      becomes actively connected to a\n   logical link.\n   A host MUST NOT perform
      this check periodically as a matter of\n   course.  This would be a waste of
      network bandwidth, and is\n   unnecessary due to the ability of hosts to passively
      discover\n   conflicts, as described in Section 2.4.\n"
    - contents:
      - "2.1.1.  Probe Details\n   A host probes to see if an address is already in
        use by broadcasting\n   an ARP Request for the desired address.  The client
        MUST fill in the\n   'sender hardware address' field of the ARP Request with
        the hardware\n   address of the interface through which it is sending the
        packet.  The\n   'sender IP address' field MUST be set to all zeroes; this
        is to avoid\n   polluting ARP caches in other hosts on the same link in the
        case\n   where the address turns out to be already in use by another host.\n
        \  The 'target hardware address' field is ignored and SHOULD be set to\n   all
        zeroes.  The 'target IP address' field MUST be set to the address\n   being
        probed.  An ARP Request constructed this way, with an all-zero\n   'sender
        IP address', is referred to as an 'ARP Probe'.\n   When ready to begin probing,
        the host should then wait for a random\n   time interval selected uniformly
        in the range zero to PROBE_WAIT\n   seconds, and should then send PROBE_NUM
        probe packets, each of these\n   probe packets spaced randomly and uniformly,
        PROBE_MIN to PROBE_MAX\n   seconds apart.  This initial random delay helps
        ensure that a large\n   number of hosts powered on at the same time do not
        all send their\n   initial probe packets simultaneously.\n   If during this
        period, from the beginning of the probing process\n   until ANNOUNCE_WAIT
        seconds after the last probe packet is sent, the\n   host receives any ARP
        packet (Request *or* Reply) on the interface\n   where the probe is being
        performed, where the packet's 'sender IP\n   address' is the address being
        probed for, then the host MUST treat\n   this address as being in use by some
        other host, and should indicate\n   to the configuring agent (human operator,
        DHCP server, etc.) that the\n   proposed address is not acceptable.\n   In
        addition, if during this period the host receives any ARP Probe\n   where
        the packet's 'target IP address' is the address being probed\n   for, and
        the packet's 'sender hardware address' is not the hardware\n   address of
        any of the host's interfaces, then the host SHOULD\n   similarly treat this
        as an address conflict and signal an error to\n   the configuring agent as
        above.  This can occur if two (or more)\n   hosts have, for whatever reason,
        been inadvertently configured with\n   the same address, and both are simultaneously
        in the process of\n   probing that address to see if it can safely be used.\n
        \  NOTE: The check that the packet's 'sender hardware address' is not\n   the
        hardware address of any of the host's interfaces is important.\n   Some kinds
        of Ethernet hub (often called a \"buffered repeater\") and\n   many wireless
        access points may \"rebroadcast\" any received broadcast\n   packets to all
        recipients, including the original sender itself.  For\n   this reason, the
        precaution described above is necessary to ensure\n   that a host is not confused
        when it sees its own ARP packets echoed\n   back.\n   A host implementing
        this specification MUST take precautions to limit\n   the rate at which it
        probes for new candidate addresses: if the host\n   experiences MAX_CONFLICTS
        or more address conflicts on a given\n   interface, then the host MUST limit
        the rate at which it probes for\n   new addresses on this interface to no
        more than one attempted new\n   address per RATE_LIMIT_INTERVAL.  This is
        to prevent catastrophic ARP\n   storms in pathological failure cases, such
        as a defective DHCP server\n   that repeatedly assigns the same address to
        every host that asks for\n   one.  This rate-limiting rule applies not only
        to conflicts\n   experienced during the initial probing phase, but also to
        conflicts\n   experienced later, as described in Section 2.4 \"Ongoing Address\n
        \  Conflict Detection and Address Defense\".\n   If, by ANNOUNCE_WAIT seconds
        after the transmission of the last ARP\n   Probe no conflicting ARP Reply
        or ARP Probe has been received, then\n   the host has successfully determined
        that the desired address may be\n   used safely.\n"
      title: 2.1.1.  Probe Details
    title: 2.1.  Probing an Address
  - contents:
    - "2.2.  Shorter Timeouts on Appropriate Network Technologies\n   Network technologies
      may emerge for which shorter delays are\n   appropriate than those required
      by this document.  A subsequent IETF\n   publication may be produced providing
      guidelines for different values\n   for PROBE_WAIT, PROBE_NUM, PROBE_MIN, and
      PROBE_MAX on those\n   technologies.\n   If the situation arises where different
      hosts on a link are using\n   different timing parameters, this does not cause
      any problems.  This\n   protocol is not dependent on all hosts on a link implementing
      the\n   same version of the protocol; indeed, this protocol is not dependent\n
      \  on all hosts on a link implementing the protocol at all.  All that is\n   required
      is that all hosts implement ARP as specified in RFC 826, and\n   correctly answer
      ARP Requests they receive.  In the situation where\n   different hosts are using
      different timing parameters, all that will\n   happen is that some hosts will
      configure their interfaces more\n   quickly than others.  In the unlikely event
      that an address conflict\n   is not detected during the address probing phase,
      the conflict will\n   still be detected by the Ongoing Address Conflict Detection
      described\n   below in Section 2.4.\n"
    title: 2.2.  Shorter Timeouts on Appropriate Network Technologies
  - contents:
    - "2.3.  Announcing an Address\n   Having probed to determine that a desired address
      may be used safely,\n   a host implementing this specification MUST then announce
      that it\n   is commencing to use this address by broadcasting ANNOUNCE_NUM ARP\n
      \  Announcements, spaced ANNOUNCE_INTERVAL seconds apart.  An ARP\n   Announcement
      is identical to the ARP Probe described above, except\n   that now the sender
      and target IP addresses are both set to the\n   host's newly selected IPv4 address.
      \ The purpose of these ARP\n   Announcements is to make sure that other hosts
      on the link do not\n   have stale ARP cache entries left over from some other
      host that may\n   previously have been using the same address.  The host may
      begin\n   legitimately using the IP address immediately after sending the first\n
      \  of the two ARP Announcements; the sending of the second ARP\n   Announcement
      may be completed asynchronously, concurrent with other\n   networking operations
      the host may wish to perform.\n"
    title: 2.3.  Announcing an Address
  - contents:
    - "2.4.  Ongoing Address Conflict Detection and Address Defense\n   Address Conflict
      Detection is not limited to only the time of initial\n   interface configuration,
      when a host is sending ARP Probes.  Address\n   Conflict Detection is an ongoing
      process that is in effect for as\n   long as a host is using an address.  At
      any time, if a host receives\n   an ARP packet (Request *or* Reply) where the
      'sender IP address' is\n   (one of) the host's own IP address(es) configured
      on that interface,\n   but the 'sender hardware address' does not match any
      of the host's\n   own interface addresses, then this is a conflicting ARP packet,\n
      \  indicating some other host also thinks it is validly using this\n   address.
      \ To resolve the address conflict, a host MUST respond to a\n   conflicting
      ARP packet as described in either (a), (b), or (c) below:\n   (a) Upon receiving
      a conflicting ARP packet, a host MAY elect to\n       immediately cease using
      the address, and signal an error to the\n       configuring agent as described
      above.\n   (b) If a host currently has active TCP connections or other reasons\n
      \      to prefer to keep the same IPv4 address, and it has not seen any\n       other
      conflicting ARP packets within the last DEFEND_INTERVAL\n       seconds, then
      it MAY elect to attempt to defend its address by\n       recording the time
      that the conflicting ARP packet was received,\n       and then broadcasting
      one single ARP Announcement, giving its own\n       IP and hardware addresses
      as the sender addresses of the ARP,\n       with the 'target IP address' set
      to its own IP address, and the\n       'target hardware address' set to all
      zeroes.  Having done this,\n       the host can then continue to use the address
      normally without\n       any further special action.  However, if this is not
      the first\n       conflicting ARP packet the host has seen, and the time recorded\n
      \      for the previous conflicting ARP packet is recent, within\n       DEFEND_INTERVAL
      seconds, then the host MUST immediately cease\n       using this address and
      signal an error to the configuring agent\n       as described above.  This is
      necessary to ensure that two hosts\n       do not get stuck in an endless loop
      with both hosts trying to\n       defend the same address.\n   (c) If a host
      has been configured such that it should not give up its\n       address under
      any circumstances (perhaps because it is the kind\n       of device that needs
      to have a well-known stable IP address, such\n       as a link's default router
      or a DNS server) then it MAY elect to\n       defend its address indefinitely.
      \ If such a host receives a\n       conflicting ARP packet, then it should take
      appropriate steps to\n       log useful information such as source Ethernet
      address from the\n       ARP packet, and inform an administrator of the problem.
      \ The\n       number of such notifications should be appropriately controlled\n
      \      to prevent an excessive number of error reports being generated.\n       If
      the host has not seen any other conflicting ARP packets\n       recently, within
      the last DEFEND_INTERVAL seconds, then it MUST\n       record the time that
      the conflicting ARP packet was received, and\n       then broadcast one single
      ARP Announcement, giving its own IP and\n       hardware addresses.  Having
      done this, the host can then continue\n       to use the address normally without
      any further special action.\n       However, if this is not the first conflicting
      ARP packet the host\n       has seen, and the time recorded for the previous
      conflicting ARP\n       packet is within DEFEND_INTERVAL seconds, then the host
      MUST NOT\n       send another defensive ARP Announcement.  This is necessary
      to\n       ensure that two misconfigured hosts do not get stuck in an\n       endless
      loop flooding the network with broadcast traffic while\n       they both try
      to defend the same address.\n   A host wishing to provide reliable network operation
      MUST respond to\n   conflicting ARP packets as described in (a), (b), or (c)
      above.\n   Ignoring conflicting ARP packets results in seemingly random network\n
      \  failures that can be hard to diagnose and very frustrating for human\n   users.\n
      \  Forced address reconfiguration may be disruptive, causing TCP (and\n   other
      transport-layer) connections to be broken.  However, such\n   disruptions should
      be exceedingly rare, and if inadvertent address\n   duplication happens, then
      disruption of communication is inevitable.\n   It is not possible for two different
      hosts using the same IP address\n   on the same network to operate reliably.\n
      \  Before abandoning an address due to a conflict, hosts SHOULD actively\n   attempt
      to reset any existing connections using that address.  This\n   mitigates some
      security threats posed by address reconfiguration, as\n   discussed in Section
      5.\n   For most client machines that do not need a fixed IP address,\n   immediately
      requesting the configuring agent (human user, DHCP\n   client, etc.) to configure
      a new address as soon as the conflict is\n   detected is the best way to restore
      useful communication as quickly\n   as possible.  The mechanism described above
      of broadcasting a single\n   ARP Announcement to defend the address mitigates
      the problem\n   somewhat, by helping to improve the chance that one of the two\n
      \  conflicting hosts may be able to retain its address.\n"
    title: 2.4.  Ongoing Address Conflict Detection and Address Defense
  - contents:
    - "2.5.  Continuing Operation\n   From the time a host sends its first ARP Announcement,
      until the\n   time it ceases using that IP address, the host MUST answer ARP\n
      \  Requests in the usual way required by the ARP specification [RFC826].\n   Specifically,
      this means that whenever a host receives an ARP\n   Request, that's not a conflicting
      ARP packet as described above in\n   Section 2.4, where the 'target IP address'
      of the ARP Request is (one\n   of) the host's own IP address(es) configured
      on that interface, the\n   host MUST respond with an ARP Reply as described
      in RFC 826.  This\n   applies equally for both standard ARP Requests with non-zero
      sender\n   IP addresses and Probe Requests with all-zero sender IP addresses.\n"
    title: 2.5.  Continuing Operation
  - contents:
    - "2.6.  Broadcast ARP Replies\n   In a carefully-run network with manually-assigned
      addresses, or\n   a network with a reliable DHCP server and reliable DHCP clients,\n
      \  address conflicts should occur only in rare failure scenarios, so\n   the
      passive monitoring described above in Section 2.4 is adequate.\n   If two hosts
      are using the same IP address, then sooner or later one\n   host or the other
      will broadcast an ARP Request, which the other will\n   see, allowing the conflict
      to be detected and consequently resolved.\n   It is possible, however, that
      a conflicting configuration may persist\n   for a short time before it is detected.
      \ Suppose that two hosts, A\n   and B, have been inadvertently assigned the
      same IP address, X.\n   Suppose further that at the time they were both probing
      to determine\n   whether the address could safely be used, the communication
      link\n   between them was non-functional for some reason, so neither detected\n
      \  the conflict at interface-configuration time.  Suppose now that the\n   communication
      link is restored, and a third host, C, broadcasts an\n   ARP Request for address
      X.  Unaware of any conflict, both hosts A and\n   B will send unicast ARP Replies
      to host C.  Host C will see both\n   Replies, and may be a little confused,
      but neither host A nor B will\n   see the other's Reply, and neither will immediately
      detect that there\n   is a conflict to be resolved.  Hosts A and B will continue
      to be\n   unaware of the conflict until one or other broadcasts an ARP Request\n
      \  of their own.\n   If quicker conflict detection is desired, this may be achieved
      by\n   having hosts send ARP Replies using link-level broadcast, instead of\n
      \  sending only ARP Requests via broadcast, and Replies via unicast.\n   This
      is NOT RECOMMENDED for general use, but other specifications\n   building on
      IPv4 ACD may choose to specify broadcast ARP Replies if\n   appropriate.  For
      example, \"Dynamic Configuration of IPv4 Link-Local\n   Addresses\" [RFC3927]
      specifies broadcast ARP Replies because in that\n   context, detection of address
      conflicts using IPv4 ACD is not merely\n   a backup precaution to detect failures
      of some other configuration\n   mechanism; detection of address conflicts using
      IPv4 ACD is the sole\n   configuration mechanism.\n   Sending ARP Replies using
      broadcast does increase broadcast traffic,\n   but in the worst case by no more
      than a factor of two.  In the\n   traditional usage of ARP, a unicast ARP Reply
      only occurs in response\n   to a broadcast ARP Request, so sending these via
      broadcast instead\n   means that we generate at most one broadcast Reply in
      response to\n   each existing broadcast Request.  On many networks, ARP traffic
      is\n   such an insignificant proportion of the total traffic that doubling\n
      \  it makes no practical difference.  However, this may not be true of\n   all
      networks, so broadcast ARP Replies SHOULD NOT be used\n   universally.  Broadcast
      ARP Replies should be used where the benefit\n   of faster conflict detection
      outweighs the cost of increased\n   broadcast traffic and increased packet processing
      load on the\n   participant network hosts.\n"
    title: 2.6.  Broadcast ARP Replies
  title: 2.  Address Probing, Announcing, Conflict Detection, and Defense
- contents:
  - "3.  Why Are ARP Announcements Performed Using ARP Request Packets and\n    Not
    ARP Reply Packets?\n   During IETF deliberation of IPv4 Address Conflict Detection
    from 2000\n   to 2008, a question that was asked repeatedly was, \"Shouldn't ARP\n
    \  Announcements be performed using gratuitous ARP Reply packets?\"\n   On the
    face of it, this seems reasonable.  A conventional ARP Reply\n   is an answer
    to a question.  If in fact no question had been asked,\n   then it would be reasonable
    to describe such a reply as gratuitous.\n   The term \"gratuitous reply\" would
    seem to apply perfectly to an ARP\n   Announcement: an answer to an implied question
    that in fact no one\n   asked.\n   However reasonable this may seem in principle,
    in practice there are\n   two reasons that swing the argument in favor of using
    ARP Request\n   packets.  One is historical precedent, and the other is pragmatism.\n
    \  The historical precedent is that (as described above in Section 4)\n   Gratuitous
    ARP is documented in Stevens Networking [Ste94] as using\n   ARP Request packets.
    \ BSD Unix, Microsoft Windows, Mac OS 9, Mac OS\n   X, etc., all use ARP Request
    packets as described in Stevens.  At\n   this stage, trying to mandate that they
    all switch to using ARP Reply\n   packets would be futile.\n   The practical reason
    is that ARP Request packets are more likely to\n   work correctly with more existing
    ARP implementations, some of which\n   may not implement RFC 826 entirely correctly.
    \ The Packet Reception\n   rules in RFC 826 state that the opcode is the last
    thing to check in\n   packet processing, so it really shouldn't matter, but there
    may be\n   \"creative\" implementations that have different packet processing\n
    \  depending on the 'ar$op' field, and there are several reasons why\n   these
    are more likely to accept gratuitous ARP Requests than\n   gratuitous ARP Replies:\n
    \  * An incorrect ARP implementation may expect that ARP Replies are\n     only
    sent via unicast.  RFC 826 does not say this, but an incorrect\n     implementation
    may assume it; the \"principle of least surprise\"\n     dictates that where there
    are two or more ways to solve a\n     networking problem that are otherwise equally
    good, the one with\n     the fewest unusual properties is the one likely to have
    the fewest\n     interoperability problems with existing implementations.  An
    ARP\n     Announcement needs to broadcast information to all hosts on the\n     link.
    \ Since ARP Request packets are always broadcast, and ARP\n     Reply packets
    are not, receiving an ARP Request packet via\n     broadcast is less surprising
    than receiving an ARP Reply packet via\n     broadcast.\n   * An incorrect ARP
    implementation may expect that ARP Replies are\n     only received in response
    to ARP Requests that have been issued\n     recently by that implementation.  Unexpected
    unsolicited Replies\n     may be ignored.\n   * An incorrect ARP implementation
    may ignore ARP Replies where\n     'ar$tha' doesn't match its hardware address.\n
    \  * An incorrect ARP implementation may ignore ARP Replies where\n     'ar$tpa'
    doesn't match its IP address.\n   In summary, there are more ways that an incorrect
    ARP implementation\n   might plausibly reject an ARP Reply (which usually occurs
    as a result\n   of being solicited by the client) than an ARP Request (which is\n
    \  already expected to occur unsolicited).\n"
  title: 3.  Why Are ARP Announcements Performed Using ARP Request Packets and
- contents:
  - "4.  Historical Note\n   Some readers have claimed that \"Gratuitous ARP\", as
    described in\n   Stevens [Ste94], provides duplicate address detection, making
    ACD\n   unnecessary.  This is incorrect.  What Stevens describes as\n   Gratuitous
    ARP is the exact same packet that this document refers to\n   by the more descriptive
    term 'ARP Announcement'.  This traditional\n   Gratuitous ARP implementation sends
    only a single ARP Announcement\n   when an interface is first configured.  The
    result is that the victim\n   (the existing address holder) logs an error, and
    the offender\n   continues operation, often without even detecting any problem.
    \ Both\n   machines then typically proceed to try to use the same IP address,\n
    \  and fail to operate properly because they are each constantly\n   resetting
    the other's TCP connections.  The human administrator is\n   expected to notice
    the log message on the victim machine and repair\n   the damage after the fact.
    \ Typically this has to be done by\n   physically going to the machines in question,
    since in this state\n   neither is able to keep a TCP connection open for long
    enough to do\n   anything useful over the network.\n   Gratuitous ARP does not
    in fact provide effective duplicate address\n   detection and (as of January 2008)
    many of the top results for a\n   Google search for the phrase \"Gratuitous ARP\"
    are articles describing\n   how to disable it.\n   However, implementers of IPv4
    Address Conflict Detection should be\n   aware that, as of this writing, Gratuitous
    ARP is still widely\n   deployed.  The steps described in Sections 2.1 and 2.4
    of this\n   document help make a host robust against misconfiguration and address\n
    \  conflicts, even when the other host is *not* playing by the same\n   rules.\n"
  title: 4.  Historical Note
- contents:
  - "5.  Security Considerations\n   IPv4 Address Conflict Detection (ACD) is based
    on ARP [RFC826] and it\n   inherits the security vulnerabilities of that protocol.
    \ A malicious\n   host may send fraudulent ARP packets on the network, interfering
    with\n   the correct operation of other hosts.  For example, it is easy for a\n
    \  host to answer all ARP Requests with Replies giving its own hardware\n   address,
    thereby claiming ownership of every address on the network.\n   This specification
    makes this existing ARP vulnerability no worse,\n   and in some ways makes it
    better: instead of failing silently with no\n   indication why, hosts implementing
    this specification either attempt\n   to reconfigure automatically, or at least
    inform the human user of\n   what is happening.\n   If a host willingly selects
    a new address in response to an ARP\n   conflict, as described in Section 2.4,
    subsection (a), this\n   potentially makes it easier for malicious attackers on
    the same link\n   to hijack TCP connections.  Having a host actively reset any
    existing\n   connections before abandoning an address helps mitigate this risk.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgments\n   This document arose as a result of Zeroconf Working Group
    discussions\n   on IPv4 Link-Local Addressing [RFC3927], where it was not clear
    to\n   many participants which elements of link-local address management\n   were
    specific to that particular problem space (e.g., random\n   selection of an address),
    and which elements were generic and\n   applicable to all IPv4 address configuration
    mechanisms (e.g., the\n   detection of address conflicts).  The following people
    made valuable\n   comments in the course of that work and/or the subsequent editing
    of\n   this document: Bernard Aboba, Randy Bush, Jim Busse, James Carlson,\n   Alan
    Cox, Spencer Dawkins, Pavani Diwanji, Ralph Droms, Donald\n   Eastlake III, Alex
    Elder, Stephen Farrell, Peter Ford, Spencer\n   Giacalone, Josh Graessley, Erik
    Guttman, Myron Hattig, Mike Heard,\n   Hugh Holbrook, Richard Johnson, Kim Yong-Woon,
    Marc Krochmal, Rod\n   Lopez, Rory McGuire, Satish Mundra, Thomas Narten, Erik
    Nordmark,\n   Randy Presuhn, Howard Ridenour, Pekka Savola, Daniel Senie, Dieter\n
    \  Siegmund, Valery Smyslov, Mark Townsley, Oleg Tychev, and Ryan Troll.\n"
  title: 6.  Acknowledgments
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC826]  Plummer, D., \"An Ethernet Address
      Resolution Protocol\n             -- or -- Converting Network Protocol Addresses
      to 48.bit\n             Ethernet Address for Transmission on Ethernet Hardware\",\n
      \            STD 37, RFC 826, November 1982.\n   [RFC2119] Bradner, S., \"Key
      words for use in RFCs to Indicate\n             Requirement Levels\", BCP 14,
      RFC 2119, March 1997.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [802]     IEEE Standards for Local and Metropolitan
      Area Networks:\n             Overview and Architecture, ANSI/IEEE Std 802, 1990.\n
      \  [802.3]   ISO/IEC 8802-3 Information technology - Telecommunications\n             and
      information exchange between systems - Local and\n             metropolitan
      area networks - Common specifications - Part\n             3:  Carrier Sense
      Multiple Access with Collision Detection\n             (CSMA/CD) Access Method
      and Physical Layer Specifications,\n             (also ANSI/IEEE Std 802.3-1996),
      1996.\n   [802.5]   ISO/IEC 8802-5 Information technology - Telecommunications\n
      \            and information exchange between systems - Local and\n             metropolitan
      area networks - Common specifications -\n             Part 5: Token ring access
      method and physical layer\n             specifications, (also ANSI/IEEE Std
      802.5-1998), 1998.\n   [802.11]  Information technology - Telecommunications
      and information\n             exchange between systems - Local and metropolitan
      area\n             networks - Specific Requirements Part 11:  Wireless LAN\n
      \            Medium Access Control (MAC) and Physical Layer (PHY)\n             Specifications,
      IEEE Std. 802.11-1999, 1999.\n   [RFC1918] Rekhter, Y., Moskowitz, B., Karrenberg,
      D., de Groot, G.,\n             and E. Lear, \"Address Allocation for Private
      Internets\",\n             BCP 5, RFC 1918, February 1996.\n   [RFC2131] Droms,
      R., \"Dynamic Host Configuration Protocol\", RFC 2131,\n             March 1997.\n
      \  [RFC3203] T'Joens, Y., Hublet, C., and P. De Schrijver, \"DHCP\n             reconfigure
      extension\", RFC 3203, December 2001.\n   [RFC3927] Cheshire, S., Aboba, B.,
      and E. Guttman, \"Dynamic\n             Configuration of IPv4 Link-Local Addresses\",
      RFC 3927, May\n             2005.\n   [Ste94]   W. Stevens, \"TCP/IP Illustrated,
      Volume 1: The Protocols\",\n             Addison-Wesley, 1994.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Author's Address\n   Stuart Cheshire\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino\n
    \  California 95014\n   USA\n   Phone: +1 408 974 3207\n   EMail: rfc@stuartcheshire.org\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
