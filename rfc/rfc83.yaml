- title: __initial_text__
  contents:
  - '               LANGUAGE-MACHINE FOR DATA RECONFIGURATION

    '
- title: Introduction
  contents:
  - "Introduction\n   In NWG/RFC #80 we mentioned the needs for data reconfiguration\
    \ along\n   with a complier/executor version of a Form Machine to perform those\n\
    \   manipulations.\n   This note proposes a different approach to the Form Machine.\n\
    \   Specifically, we describe a syntax-driven interpreter that operates\n   on\
    \ a grammar which is an ordered set of replacement rules.  Following\n   the interpreter\
    \ description are some \"real-world\" examples of\n   required data reconfigurations\
    \ that must occur between RAND consoles\n   and the Remote Job System on the UCLA\
    \ 360/91.  Lastly, we suggest\n   that the Protocol Manager mentioned in NWG/RFC\
    \ #80 can be simplified\n   by using the Form Machine and two system forms (specified\
    \ a priori in\n   the code).\n   Caveat:  The Form Machine is not intended to\
    \ be a general purpose\n   programming language.  Note the absence of declaration\
    \ statements,\n   etc.\n"
- title: THE FORM MACHINE
  contents:
  - 'THE FORM MACHINE

    '
- title: I.  Forms
  contents:
  - "I.  Forms\n   A form is an ordered set of rules.\n      F = {R1, ...,Rn}\n  \
    \ The first rule (R1) is the rule of highest priority; the last rule\n   (Rn)\
    \ is the rule of lowest priority.\n   The form machine gets as input: 1) a list\
    \ of addresses and lengths\n   that delimit the input stream(s); 2) a list of\
    \ addresses and lengths\n   that delimit the output area(s); 3) a pointer to a\
    \ list of form(s);\n   4) a pointer to the starting position of the input stream;\
    \ and 5) a\n   pointer to the starting position of the output area.  The Form\n\
    \   Machine applies a form to the input string emitting an output string\n   in\
    \ the output area.  The form is applied in the following manner:\n      Step 1:\
    \  R1 is made the current rule.\n      Step 2:  The current rule is applied to\
    \ the input data.\n      Step3:   a) If the rule fails, the rule of priority one\
    \ lower is\n                  made current.\n               b) If the rule succeeds,\
    \ the rule of highest priority is\n                  made current\n          \
    \     c) When the rule of lowest priority fails, the form fails\n            \
    \      and application of the form to the input data\n                  terminates.\n\
    \      Step 4:  Continue at Step 2.\n   In addition, during Step 2, if the remainder\
    \ of the input string is\n   insufficient to satisfy a rule, then that rule fails\
    \ and partial\n   results are not emitted.  If a rule fills the output string,\n\
    \   application of the form is terminated.\n"
- title: II.  Rules
  contents:
  - "II.  Rules\n   A rule is a replacement operation of the form:\n      left-hand-side\
    \ -> right-hand-side\n   Both sides of a rule consists of a series of zero or\
    \ more _terms_\n   (see below) separated by commas.\n   The left-hand-side of\
    \ the rule is applied to the input string at the\n   current position as a pattern-match\
    \ operation.  If it exactly\n   describes the input, 1) the current input position\
    \ pointer is\n   advanced over the matched input, 2) the right-hand-side emits\
    \ data at\n   the current position in the output string, and 3) the current output\n\
    \   position pointer is advanced over the emitted data.\n"
- title: III.  Terms
  contents:
  - "III.  Terms\n   A term is a variable that describes the input string to be matched\
    \ or\n   the output string to be emitted.  A term has three formats.\n"
- title: Term Format 1
  contents:
  - 'Term Format 1

    '
- title: +---------------------------------------------------------------------+
  contents:
  - '+---------------------------------------------------------------------+

    '
- title: '|                                                                     |'
  contents:
  - '|                                                                     |

    '
- title: '|     name ( data  replication  .   value     :    length    )        |'
  contents:
  - '|     name ( data  replication  .   value     :    length    )        |

    '
- title: '|            type   expression    expression      expression          |'
  contents:
  - '|            type   expression    expression      expression          |

    '
- title: '|                                                                     |'
  contents:
  - '|                                                                     |

    '
- title: '|_____________________________________________________________________|'
  contents:
  - "|_____________________________________________________________________|\n   Any\
    \ of the fields may be absent.\n   The _name_ is a symbolic name of the term in\
    \ the usual programming\n   language sense.  It is a single, lower-case alphabetic\
    \ that is unique\n   within a rule.\n   The _data type_ describes the kind of\
    \ data that the term represents.\n   It is a member of the set:\n         {D,\
    \ O, X, A, E, B}\n      Data types have the following meanings and implied unit\
    \ lengths:\n      Char.       Meaning               Length\n      -----      \
    \ --------              -------\n       D          decimal number        1 bit\n\
    \       O          octal number          3 bits\n       X          hexadecimal\
    \ number    4 bits\n       A          ASCII character       8 bits\n       E \
    \         EBCDIC character      8 bits\n       B          binary number      \
    \   1 bit\n   The _replication expression_ is a multiplier of the value expression.\n\
    \   A replication expression has the formats.\n      1)  an arithmetic expression\
    \ of the members of the set:\n          {v(name), L(name) , numerals, programming\
    \ variables}\n      The v(name) is a value operator that generates a numeric value\
    \ of\n      the named data type and L(name) is a length operator that\n      generates\
    \ a numeric value of the named string length.\n      The programming variable\
    \ is described under term format three.\n      Arithmetic operators are shown\
    \ below and have their usual\n      meanings.\n         {*, /, +, -}\n   or 2)\
    \ the terminal '#' which means an arbitrary multiple of the value\n          \
    \ expression.\n   The _value expression_ is the unit value of a term expressed\
    \ in the\n   format indicated by the data type.  The value expression is repeated\n\
    \   according to the replication expression.  A value expression has the\n   format:\n\
    \      1) same as part 1) of the replication expression where again\n        \
    \ v(name) produces a numeric value\n   or 2) a single member of the set\n    \
    \     {v(name), quoted literal}\n         where v(name) produces a data type (E\
    \ or A) value).  (Note that\n         concatenation is accomplished through multiple\
    \ terms.)\n   The _length expression_ is the length of the field containing the\n\
    \   value expression as modified by the replication expression.  It has\n   the\
    \ same formats as a replication expression.\n   Thus, the term\n      x(E(7.'F'):L(x))\
    \ is named x, is of type EBCDIC, has the value\n      'FFFFFFF' and is of length\
    \ 7.\n   The term\n      y(A:8) on the left-hand-side of a rule would be assigned\
    \ the next\n      64 bits of input as its value; on the right-hand-side it would\n\
    \      only cause the output pointer to be advanced 64 bit positions\n      because\
    \ is has no value expression (contents) to generate data in\n      the output\
    \ area.\n"
- title: Term Format 2
  contents:
  - 'Term Format 2

    '
- title: +---------------------------------------------------------------------+
  contents:
  - '+---------------------------------------------------------------------+

    '
- title: '|                                                                     |'
  contents:
  - '|                                                                     |

    '
- title: '|           name (label)                                              |'
  contents:
  - '|           name (label)                                              |

    '
- title: '|                                                                     |'
  contents:
  - '|                                                                     |

    '
- title: +---------------------------------------------------------------------+
  contents:
  - "+---------------------------------------------------------------------+\n   The\
    \ _label_ is a symbolic reference to a previously named term in the\n   rule.\
    \  It has the same value as the term by that name.\n   The identity operation\
    \ below illustrates the use of the _label_\n   notation.\n      a(A:10) -> (a)\n\
    \   The (a) on the right-hand side causes the term a to be emitted in the\n  \
    \ output area.  It is equivalent to the rule below.\n      a(A:10) -> (Av(a):L(a))\n"
- title: Term Format 3
  contents:
  - 'Term Format 3

    '
- title: +---------------------------------------------------------------------+
  contents:
  - '+---------------------------------------------------------------------+

    '
- title: '|                                                                     |'
  contents:
  - '|                                                                     |

    '
- title: '|   name    (  programming    connective        operand  )            |'
  contents:
  - '|   name    (  programming    connective        operand  )            |

    '
- title: '|              variable                       expression              |'
  contents:
  - '|              variable                       expression              |

    '
- title: '|                                                                     |'
  contents:
  - '|                                                                     |

    '
- title: +---------------------------------------------------------------------+
  contents:
  - "+---------------------------------------------------------------------+\n   A\
    \ _programming variable_ is a user-controlled data item that does not\n   explicitly\
    \ appear in the input/output streams.  Its value can be\n   compared to input\
    \ data, to constants, and used to generate output\n   data.  Programming variables\
    \ are single, lower case Greek symbols.\n   They are used: to generate indices,\
    \ counters, etc. in the output\n   area; to compare indices, counters, etc. in\
    \ the input area, and; to\n   bind replacement rules where the data is context\
    \ sensitive (explained\n   later).\n   A _connective_ is a member of the set:\n\
    \         {<-, =, !=, >=, <=, <, >}\n   The left arrow denotes replacement of\
    \ the left part by the right\n   part; the other connectives are comparators.\n\
    \   The _operand expression_ is an arithmetic expression of members of\n   the\
    \ set:\n         {programming variables, v(name), l(name), numerals}\n   For example,\
    \ if the programming variable [alpha] has the value 0 and\n   the rule\n     \
    \ a(H[alpha]:1) -> (a), ([alpha]<-[alpha]+1), (H[alpha]:1)\n   is applied exhaustively\
    \ to string of hexadecimal digits\n      0 1 2 3 4 5\n   the output would be the\
    \ hexadecimal string\n      0 1 1 2 2 3 3 4 4 5 5 6 .\n   Note:  the above rule\
    \ is equivalent to\n      a(B[alpha]:4) -> (a), ([alpha]<-[alpha]+1), (B[alpha]:4)\n"
- title: IV.  Restrictions and Interpretations of Term Functions
  contents:
  - "IV.  Restrictions and Interpretations of Term Functions\n   When a rule succeeds\
    \ output will be generated.  In the rule\n      a(A:#),(A'/':1)->(Ev(a):74),(E'?':1)\n\
    \   the input string is searched for an arbitrary number of ASCIIs\n   followed\
    \ by a terminal '/'.  The ASCIIs (a) are converted to EBCDIC\n   in a 74-byte\
    \ field followed by a terminal '?'.  This brings out three\n   issues:\n     \
    \ 1. Arbitrary length terms must be separated by literals since the\n        \
    \ data is not type-specific.\n      2. The # may only be used on the left-hand-side\
    \ of a rule.\n      3. A truncation padding scheme is needed.\n      The truncation\
    \ padding scheme is as follows:\n         a. Character to Character (types: A,\
    \ E)\n            Output is left-justified with truncation or padding (with\n\
    \            blanks) on the right.\n         b. Character to Numeric (A, E to\
    \ D, O, H, B)\n         c. Numeric to Character (D, O, H, B to A, E)\n       \
    \  d. Numeric to Numeric (D, O, H, B)\n            Output is right-justified with\
    \ padding or truncation on the\n            left.  Padding is zeros if output\
    \ is numeric.\n"
- title: EXAMPLES OF SOME DATA RECONFIGURATIONS
  contents:
  - "EXAMPLES OF SOME DATA RECONFIGURATIONS\n   The following are examples of replacement\
    \ rule types for specifically\n   needed applications.\n   Literal Insertion\n\
    \      To insert a literal, separate the left-hand-side terms for its\n      insertion\
    \ on the right.\n         a(A:10),b(A:70)->(a),(E'LIT':3),(b)\n      The 80 ASCII\
    \ characters are emitted in the output area with the\n      EBCDIC literal LIT\
    \ inserted after the first 10 ASCII characters.\n   Deletion\n      Terms on the\
    \ left are separated so that the right side may omit\n      unwanted terms.\n\
    \         (B:7),a(A:10)->(Ev(a):L(a))\n      Only the 10 ASCII characters are\
    \ emitted (as EBCDIC) in the output\n      area, the 7 binary digits are discarded.\n\
    \   Spacing in the Output Buffer\n      Where a pre-formatted output buffer exists\
    \ (typically a display\n      buffer) spacing can be realized by omitting the\
    \ replication and\n      value functions from a term on the right.\n         a(A:74)->(E:6),(Ev(a):74)\n\
    \      The (E:6) causes 48 bit positions to be skipped over in the output\n  \
    \    area, then the 74 ASCII characters are converted to EBCDIC and\n      emitted\
    \ at the current output position.\n   Arbitrary Lengths\n      Some devices/programs\
    \ generate a variable number of characters per\n      line and it is desirable\
    \ to produce fixed-length records from\n      them.\n         a(A:#) -> (Ev(a):74)\n\
    \      The ASCII characters are truncated or padded as required and\n      converted\
    \ to EBCDIC in a 74 character field.\n   Transposition\n      Fields to be transposed\
    \ should be isolated as terms on the left.\n         a(X:2),b(A:#)->(Ev(b):L(b)),(a)\n\
    \   String Length Computation\n      Some formats require the string length as\
    \ part of the data stream.\n      This can be accomplished by the length function.\n\
    \         a(E:10),b(X'FF':2)->(BL(a)+L(b)+8:8),(Av(a):L(a)),(b)\n      The length\
    \ term is emitted first, in a 8 bit field.  In this case\n      the length includes\
    \ the length field as well as the ASCII\n      character field.\n   Expansion\
    \ and Compression of repeated Symbols\n      The following rule packs repeated\
    \ symbols.\n         a(E:1), b(E#*v(a):L(b)) -> (BL(b)+1:8),(a)\n      Given the\
    \ input string below, three successive applications of the\n      rule will emit\
    \ the output string shown.\n         Input: XXXXYYZZZZZZZ\n         Output: 4X2Y7Z\n\
    \   APPLICATION OF THE FORM MACHINE TO PROGRAM PROTOCOLS\n   The Protocol Manager\
    \ mentioned in NWG/RFC #80 needs several\n   interesting features that are properties\
    \ of the above Form Machine.\n   In certain instances during a protocol dialog\
    \ it might be acceptable\n   to get either an accept on connection A or an allocation\
    \ on connect\n   B, that is, the order is sometimes unimportant.  The defined\n\
    \   procedure for applying rules allows for order independence.\n   A logger might\
    \ send us a socket number embedded in a regular message\n   -- the socket number\
    \ is intended to be the first of a contiguous set\n   of sockets that we can use\
    \ to establish connections with some\n   program.  We wish to extract the socket\
    \ number field from the regular\n   message, perhaps convert it to another format,\
    \ and add to it to get\n   the additional socket names.  As a result of the regular\
    \ message we\n   wish to emit several INIT system calls that include the socket\n\
    \   numbers that we have computed.  The value operator and the arithmetic\n  \
    \ operators of the Form Machine can do this.\n   A third property of the Form\
    \ Machine that is applicable to protocols\n   is inter- and intra-rule binding\
    \ to resolve context sensitive\n   information.  In general we wish rules to be\
    \ order independent but in\n   certain cases we wish to impose an ordering.  Using\
    \ the logger in\n   NWG/RFC #66 as an example, the close that is sent by the logger\
    \ can\n   have two different meanings depending upon its context.  If the close\n\
    \   is sent before the regular message containing the socket number then\n   it\
    \ means call refused.  If the regular message precedes the close\n   then the\
    \ call is accepted.  Since the close has contextual meaning,\n   we must bind\
    \ it to the regular message to avoid introducing IF and\n   THEN into the Form\
    \ Machine language.\n   Assume for a moment that we can express system calls in\
    \ Form Machine\n   notation.  (The notation below is for _illustration only_ and\
    \ is not\n   part of the Form Machine language.)  We have two ways to bind the\n\
    \   regular message to the close.  By intra-rule binding we insist that\n   the\
    \ close be preceded by a regular message.\n      Reg. Msg , Close ->\n   Now assume\
    \ for a moment that the remote party must have an echo after\n   each transmission.\
    \  Since we must emit an echo after receiving the\n   regular message and before\
    \ the close is sent, then we must use\n   inter-rule binding.  This can be accomplished\
    \ with the programming\n   variable.  It is assigned a value when the regular\
    \ message is\n   received and the value is tested when the close is received.\n\
    \      Reg. Msg -> Echo , ([lambda]+1)\n      Close, ([lambda]=1) ->\n   To illustrate\
    \ inter-rule binding via the programming variable the\n   connection protocol\
    \ in NWG/RFC #66 could be represented by passing\n   the following form to a protocol\
    \ manager.  (The notation below is for\n   _illustration only_ and is not part\
    \ of the Form Machine language).\n      1. ->INIT(parameters) , ([alpha]<-0)\n\
    \      Send an INIT(RTS).\n      2.  INIT(parameters) -> ALLOCATE(parameters)\n\
    \      Send an allocate in response to the connection completion (an STR\n   \
    \   received).\n      3.  Reg. Msg (parameters) -> ([alpha]<-1)\n      When the\
    \ messages bearing link numbers is received, set an\n      internal indicator.\
    \  (The extraction of the link is not\n      illustrated.)\n      4.  CLOSE(parameters),([alpha]=1)\
    \ ->\n                             INIT(parameters),INIT(parameters)\n      When\
    \ the close is received following the regular message [2] is\n      checked to\
    \ see that the regular message was received before\n      establishing the duplex\
    \ connection.  If the close is received with\n      no regular message preceding\
    \ it (call refused) the form will fail\n      (since no rules is satisfied).\n\
    \   This protocol can be handled via a single form containing four\n   replacement\
    \ rules.  We have examined similar representations for more\n   complex protocol\
    \ sequences.  Such protocol sequences, stored by name,\n   are an asset to the\
    \ user; he can request a predefined sequence to be\n   executed automatically.\n"
- title: Two System Forms to Handle Protocol Statements
  contents:
  - "Two System Forms to Handle Protocol Statements\n   Assume that we have a Protocol\
    \ Manager that manages protocol\n   sequences between consoles and the Network.\
    \  The consoles generate\n   and accept EBCDIC character strings and the Network\
    \ transmits binary\n   digits.  The console user has a language similar to system\
    \ calls in\n   which he can create and store protocol sequences via Protocol\n\
    \   Manager, and at the same time he can indicate which commands are\n   expected\
    \ to be sent and which are to be received.  Upon command the\n   Protocol Manager\
    \ can execute this sequence with the Network,\n   generating commands and validating\
    \ those received.  Assume also that\n   the Protocol Manager displays the dialog\
    \ for the console user as it\n   progresses.\n   In order to translate between\
    \ console and Network for generating,\n   comparing, and displaying commands,\
    \ the Protocol Manager can use the\n   Form Machine.  Two system forms are needed,\
    \ see Fig. 1.  One is a\n   console-to-Network set of rules containing EBCDIC\
    \ to binary for all\n   legal commands; the other is a mirror image for Network-to-console.\n"
- title: REQUEST
  contents:
  - "REQUEST\n   Since language design is not our forte, we would like comments from\n\
    \   those with more experience than we.\n                           System form:\n\
    \                             C -> N\n                           +----------+\n\
    \                           | one rule |\n                           | for each\
    \ |\n                           | legal    |\n                           | command\
    \  |\n                   +-------|- - - - - |<----+\n                   |    \
    \   +----------+     |\n            Binary |                        | EBCDIC\n\
    \                   |                        |\n   +----------+    |         \
    \               |      +----------+\n   |          |<---+                    \
    \    +------|          |\n   | Network  |                                    |\
    \ Consoles |\n   |          |----+                        +----->|          |\n\
    \   +----------+    |                        |      +----------+\n           \
    \        | Binary          EBCDIC |\n                   |                    \
    \    |\n                   |                        |\n                   |  \
    \     System form:     |\n                   |          N -> C        |\n    \
    \               |       +----------+     |\n                   +------>|- - -\
    \ - - |-----+\n                           | one rule |\n                     \
    \      | for each |\n                           | legal    |\n               \
    \            | response |\n                           +----------+\n   Figure\
    \ 1 -- Application of System Form for Protocol Management\n"
- title: Distribution List
  contents:
  - 'Distribution List

    '
- title: '-----------------'
  contents:
  - "-----------------\n   Alfred Cocanower - MERIT\n   Gerry Cole - SDC\n   Les Earnest\
    \ - Stanford\n   Bill English - SRI\n   James Forgie - Lincoln Laboratory\n  \
    \ Jennings Computer Center - Case\n   Nico Haberman - Carnegie-Melon\n   Robert\
    \ Kahn - BB&N\n   Peggy Karp - MITRE\n   Benita Kirstel - UCLA\n   Tom Lawrence\
    \ - RADC/ISIM\n   James Madden - University of Illinois\n   George Mealy - Harvard\n\
    \   Thomas O'Sullivan - Raytheon\n   Larry Roberts - ARPA\n   Ron Stoughton -\
    \ UCSB\n   Albert Vezza- MIT\n   Barry Wessler - Utah\n   [The original document\
    \ included non-ASCII characters.  The Greek\n   letters Alpha and Lambda have\
    \ been spelled out and enclosed in\n   square brackets \"[ ]\".  A curly \"l\"\
    \ character\n   has been replaced by capital L.  Left and right arrows have been\n\
    \   replaced by \"<-\" and \"->\" respectively.  RFC-Editor]\n          [This\
    \ RFC was put into machine readable form for entry]\n          [into the online\
    \ RFC archives by Lorrie Shiota, 10/01]\n"
