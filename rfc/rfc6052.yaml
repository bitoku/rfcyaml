- title: __initial_text__
  contents:
  - '                IPv6 Addressing of IPv4/IPv6 Translators

    '
- title: Abstract
  contents:
  - "Abstract\n   This document discusses the algorithmic translation of an IPv6\n\
    \   address to a corresponding IPv4 address, and vice versa, using only\n   statically\
    \ configured information.  It defines a well-known prefix\n   for use in algorithmic\
    \ translations, while allowing organizations to\n   also use network-specific\
    \ prefixes when appropriate.  Algorithmic\n   translation is used in IPv4/IPv6\
    \ translators, as well as other types\n   of proxies and gateways (e.g., for DNS)\
    \ used in IPv4/IPv6 scenarios.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6052.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Applicability Scope  . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Conventions  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   2.  IPv4-Embedded IPv6 Address Prefix and Format . . . . . . .\
    \ . .  5\n     2.1.  Well-Known Prefix  . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     2.2.  IPv4-Embedded IPv6 Address Format  . . . . . . . . . . . .\
    \  5\n     2.3.  Address Translation Algorithms . . . . . . . . . . . . . .  7\n\
    \     2.4.  Text Representation  . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 3.  Deployment Guidelines  . . . . . . . . . . . . . . . . . . . .  8\n    \
    \ 3.1.  Restrictions on the Use of the Well-Known Prefix . . . . .  8\n     3.2.\
    \  Impact on Inter-Domain Routing . . . . . . . . . . . . . .  8\n     3.3.  Choice\
    \ of Prefix for Stateless Translation Deployments . .  9\n     3.4.  Choice of\
    \ Prefix for Stateful Translation Deployments  . . 11\n   4.  Design Choices .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 12\n     4.1.  Choice of Suffix\
    \ . . . . . . . . . . . . . . . . . . . . . 12\n     4.2.  Choice of the Well-Known\
    \ Prefix  . . . . . . . . . . . . . 13\n   5.  Security Considerations  . . .\
    \ . . . . . . . . . . . . . . . . 14\n     5.1.  Protection against Spoofing \
    \ . . . . . . . . . . . . . . . 14\n     5.2.  Secure Configuration . . . . .\
    \ . . . . . . . . . . . . . . 15\n     5.3.  Firewall Configuration . . . . .\
    \ . . . . . . . . . . . . . 15\n   6.  IANA Considerations  . . . . . . . . .\
    \ . . . . . . . . . . . . 15\n   7.  Acknowledgements . . . . . . . . . . . .\
    \ . . . . . . . . . . . 16\n   8.  Contributors . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 16\n   9.  References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 17\n     9.1.  Normative References . . . . . . . . . . .\
    \ . . . . . . . . 17\n     9.2.  Informative References . . . . . . . . . . .\
    \ . . . . . . . 17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is part of a series of IPv4/IPv6 translation\
    \ documents.\n   A framework for IPv4/IPv6 translation is discussed in\n   [v4v6-FRAMEWORK],\
    \ including a taxonomy of scenarios that will be used\n   in this document.  Other\
    \ documents specify the behavior of various\n   types of translators and gateways,\
    \ including mechanisms for\n   translating between IP headers and other types\
    \ of messages that\n   include IP addresses.  This document specifies how an individual\
    \ IPv6\n   address is translated to a corresponding IPv4 address, and vice\n \
    \  versa, in cases where an algorithmic mapping is used.  While specific\n   types\
    \ of devices are used herein as examples, it is the\n   responsibility of the\
    \ specification of such devices to reference this\n   document for algorithmic\
    \ mapping of the addresses themselves.\n   Section 2 describes the prefixes and\
    \ the format of \"IPv4-embedded\n   IPv6 addresses\", i.e., IPv6 addresses in\
    \ which 32 bits contain an\n   IPv4 address.  This format is common to both \"\
    IPv4-converted\" and\n   \"IPv4-translatable\" IPv6 addresses.  This section also\
    \ defines the\n   algorithms for translating addresses, and the text representation\
    \ of\n   IPv4-embedded IPv6 addresses.\n   Section 3 discusses the choice of prefixes,\
    \ the conditions in which\n   they can be used, and the use of IPv4-embedded IPv6\
    \ addresses with\n   stateless and stateful translation.\n   Section 4 provides\
    \ a summary of the discussions behind two specific\n   design decisions, the choice\
    \ of a null suffix and the specific value\n   of the selected prefix.\n   Section\
    \ 5 discusses security concerns.\n   In some scenarios, a dual-stack host will\
    \ unnecessarily send its\n   traffic through an IPv6/IPv4 translator.  This can\
    \ be caused by the\n   host's default address selection algorithm [RFC3484], referrals,\
    \ or\n   other reasons.  Optimizing these scenarios for dual-stack hosts is\n\
    \   for future study.\n"
- title: 1.1.  Applicability Scope
  contents:
  - "1.1.  Applicability Scope\n   This document is part of a series defining address\
    \ translation\n   services.  We understand that the address format could also\
    \ be used\n   by other interconnection methods between IPv6 and IPv4, e.g., methods\n\
    \   based on encapsulation.  If encapsulation methods are developed by\n   the\
    \ IETF, we expect that their descriptions will document their\n   specific use\
    \ of IPv4-embedded IPv6 addresses.\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This document makes use of the following terms:\n   Address\
    \ translator:  any entity that has to derive an IPv4 address\n      from an IPv6\
    \ address or vice versa.  This applies not only to\n      devices that do IPv4/IPv6\
    \ packet translation, but also to other\n      entities that manipulate addresses,\
    \ such as name resolution\n      proxies (e.g., DNS64 [DNS64]) and possibly other\
    \ types of\n      Application Layer Gateways (ALGs).\n   IPv4-converted IPv6 addresses:\
    \  IPv6 addresses used to represent IPv4\n      nodes in an IPv6 network.  They\
    \ are a variant of IPv4-embedded\n      IPv6 addresses and follow the format described\
    \ in Section 2.2.\n   IPv4-embedded IPv6 addresses:  IPv6 addresses in which 32\
    \ bits\n      contain an IPv4 address.  Their format is described in\n      Section\
    \ 2.2.\n   IPv4/IPv6 translator:  an entity that translates IPv4 packets to IPv6\n\
    \      packets, and vice versa.  It may do \"stateless\" translation,\n      meaning\
    \ that there is no per-flow state required, or \"stateful\"\n      translation,\
    \ meaning that per-flow state is created when the first\n      packet in a flow\
    \ is received.\n   IPv4-translatable IPv6 addresses:  IPv6 addresses assigned\
    \ to IPv6\n      nodes for use with stateless translation.  They are a variant\
    \ of\n      IPv4-embedded IPv6 addresses and follow the format described in\n\
    \      Section 2.2.\n   Network-Specific Prefix:  an IPv6 prefix assigned by an\
    \ organization\n      for use in algorithmic mapping.  Options for the Network-Specific\n\
    \      Prefix are discussed in Sections 3.3 and 3.4.\n   Well-Known Prefix:  the\
    \ IPv6 prefix defined in this document for use\n      in an algorithmic mapping.\n"
- title: 2.  IPv4-Embedded IPv6 Address Prefix and Format
  contents:
  - '2.  IPv4-Embedded IPv6 Address Prefix and Format

    '
- title: 2.1.  Well-Known Prefix
  contents:
  - "2.1.  Well-Known Prefix\n   This document reserves a \"Well-Known Prefix\" for\
    \ use in an\n   algorithmic mapping.  The value of this IPv6 prefix is:\n    \
    \  64:ff9b::/96\n"
- title: 2.2.  IPv4-Embedded IPv6 Address Format
  contents:
  - "2.2.  IPv4-Embedded IPv6 Address Format\n   IPv4-converted IPv6 addresses and\
    \ IPv4-translatable IPv6 addresses\n   follow the same format, described here\
    \ as the IPv4-embedded IPv6\n   address Format.  IPv4-embedded IPv6 addresses\
    \ are composed of a\n   variable-length prefix, the embedded IPv4 address, and\
    \ a variable-\n   length suffix, as presented in the following diagram, in which\
    \ PL\n   designates the prefix length:\n    +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \    |PL| 0-------------32--40--48--56--64--72--80--88--96--104---------|\n  \
    \  +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n    |32|\
    \     prefix    |v4(32)         | u | suffix                    |\n    +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \    |40|     prefix        |v4(24)     | u |(8)| suffix                |\n  \
    \  +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n    |48|\
    \     prefix            |v4(16) | u | (16)  | suffix            |\n    +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \    |56|     prefix                |(8)| u |  v4(24)   | suffix        |\n  \
    \  +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n    |64|\
    \     prefix                    | u |   v4(32)      | suffix    |\n    +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \    |96|     prefix                                    |    v4(32)     |\n  \
    \  +--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n    \
    \                             Figure 1\n   In these addresses, the prefix shall\
    \ be either the \"Well-Known\n   Prefix\" or a \"Network-Specific Prefix\" unique\
    \ to the organization\n   deploying the address translators.  The prefixes can\
    \ only have one of\n   the following lengths: 32, 40, 48, 56, 64, or 96.  (The\
    \ Well-Known\n   Prefix is 96 bits long, and can only be used in the last form\
    \ of the\n   table.)\n   Various deployments justify different prefix lengths\
    \ with Network-\n   Specific Prefixes.  The trade-off between different prefix\
    \ lengths\n   are discussed in Sections 3.3 and 3.4.\n   Bits 64 to 71 of the\
    \ address are reserved for compatibility with the\n   host identifier format defined\
    \ in the IPv6 addressing architecture\n   [RFC4291].  These bits MUST be set to\
    \ zero.  When using a /96\n   Network-Specific Prefix, the administrators MUST\
    \ ensure that the bits\n   64 to 71 are set to zero.  A simple way to achieve\
    \ that is to\n   construct the /96 Network-Specific Prefix by picking a /64 prefix,\n\
    \   and then adding 4 octets set to zero.\n   The IPv4 address is encoded following\
    \ the prefix, most significant\n   bits first.  Depending of the prefix length,\
    \ the 4 octets of the\n   address may be separated by the reserved octet \"u\"\
    , whose 8 bits MUST\n   be set to zero.  In particular:\n   o  When the prefix\
    \ is 32 bits long, the IPv4 address is encoded in\n      positions 32 to 63.\n\
    \   o  When the prefix is 40 bits long, 24 bits of the IPv4 address are\n    \
    \  encoded in positions 40 to 63, with the remaining 8 bits in\n      position\
    \ 72 to 79.\n   o  When the prefix is 48 bits long, 16 bits of the IPv4 address\
    \ are\n      encoded in positions 48 to 63, with the remaining 16 bits in\n  \
    \    position 72 to 87.\n   o  When the prefix is 56 bits long, 8 bits of the\
    \ IPv4 address are\n      encoded in positions 56 to 63, with the remaining 24\
    \ bits in\n      position 72 to 95.\n   o  When the prefix is 64 bits long, the\
    \ IPv4 address is encoded in\n      positions 72 to 103.\n   o  When the prefix\
    \ is 96 bits long, the IPv4 address is encoded in\n      positions 96 to 127.\n\
    \   There are no remaining bits, and thus no suffix, if the prefix is 96\n   bits\
    \ long.  In the other cases, the remaining bits of the address\n   constitute\
    \ the suffix.  These bits are reserved for future extensions\n   and SHOULD be\
    \ set to zero.  Address translators who receive IPv4-\n   embedded IPv6 addresses\
    \ where these bits are not zero SHOULD ignore\n   the bits' value and proceed\
    \ as if the bits' value were zero.  (Future\n   extensions may specify a different\
    \ behavior.)\n"
- title: 2.3.  Address Translation Algorithms
  contents:
  - "2.3.  Address Translation Algorithms\n   IPv4-embedded IPv6 addresses are composed\
    \ according to the following\n   algorithm:\n   o  Concatenate the prefix, the\
    \ 32 bits of the IPv4 address, and the\n      suffix (if needed) to obtain a 128-bit\
    \ address.\n   o  If the prefix length is less than 96 bits, insert the null octet\n\
    \      \"u\" at the appropriate position (bits 64 to 71), thus causing the\n \
    \     least significant octet to be excluded, as documented in Figure 1.\n   The\
    \ IPv4 addresses are extracted from the IPv4-embedded IPv6\n   addresses according\
    \ to the following algorithm:\n   o  If the prefix is 96 bits long, extract the\
    \ last 32 bits of the\n      IPv6 address;\n   o  For the other prefix lengths,\
    \ remove the \"u\" octet to obtain a\n      120-bit sequence (effectively shifting\
    \ bits 72-127 to positions\n      64-119), then extract the 32 bits following\
    \ the prefix.\n"
- title: 2.4.  Text Representation
  contents:
  - "2.4.  Text Representation\n   IPv4-embedded IPv6 addresses will be represented\
    \ in text in\n   conformity with Section 2.2 of [RFC4291].  IPv4-embedded IPv6\n\
    \   addresses constructed using the Well-Known Prefix or a /96 Network-\n   Specific\
    \ Prefix may be represented using the alternative form\n   presented in Section\
    \ 2.2 of [RFC4291], with the embedded IPv4 address\n   represented in dotted decimal\
    \ notation.  Examples of such\n   representations are presented in Tables 1 and\
    \ 2.\n   +-----------------------+------------+------------------------------+\n\
    \   | Network-Specific      |    IPv4    | IPv4-embedded IPv6 address   |\n  \
    \ | Prefix                |   address  |                              |\n   +-----------------------+------------+------------------------------+\n\
    \   | 2001:db8::/32         | 192.0.2.33 | 2001:db8:c000:221::          |\n  \
    \ | 2001:db8:100::/40     | 192.0.2.33 | 2001:db8:1c0:2:21::          |\n   |\
    \ 2001:db8:122::/48     | 192.0.2.33 | 2001:db8:122:c000:2:2100::   |\n   | 2001:db8:122:300::/56\
    \ | 192.0.2.33 | 2001:db8:122:3c0:0:221::     |\n   | 2001:db8:122:344::/64 |\
    \ 192.0.2.33 | 2001:db8:122:344:c0:2:2100:: |\n   | 2001:db8:122:344::/96 | 192.0.2.33\
    \ | 2001:db8:122:344::192.0.2.33 |\n   +-----------------------+------------+------------------------------+\n\
    \    Table 1: Text Representation of IPv4-Embedded IPv6 Addresses Using\n    \
    \                     Network-Specific Prefixes\n     +-------------------+--------------+----------------------------+\n\
    \     | Well-Known Prefix | IPv4 address | IPv4-Embedded IPv6 address |\n    \
    \ +-------------------+--------------+----------------------------+\n     | 64:ff9b::/96\
    \      |  192.0.2.33  | 64:ff9b::192.0.2.33        |\n     +-------------------+--------------+----------------------------+\n\
    \    Table 2: Text Representation of IPv4-Embedded IPv6 Addresses Using\n    \
    \                       the Well-Known Prefix\n   The Network-Specific Prefix\
    \ examples in Table 1 are derived from the\n   IPv6 prefix reserved for documentation\
    \ in [RFC3849].  The IPv4\n   address 192.0.2.33 is part of the subnet 192.0.2.0/24\
    \ reserved for\n   documentation in [RFC5735].  The representation of IPv6 addresses\
    \ is\n   compatible with [RFC5952].\n"
- title: 3.  Deployment Guidelines
  contents:
  - '3.  Deployment Guidelines

    '
- title: 3.1.  Restrictions on the Use of the Well-Known Prefix
  contents:
  - "3.1.  Restrictions on the Use of the Well-Known Prefix\n   The Well-Known Prefix\
    \ MUST NOT be used to represent non-global IPv4\n   addresses, such as those defined\
    \ in [RFC1918] or listed in Section 3\n   of [RFC5735].  Address translators MUST\
    \ NOT translate packets in\n   which an address is composed of the Well-Known\
    \ Prefix and a non-\n   global IPv4 address; they MUST drop these packets.\n \
    \  The Well-Known Prefix SHOULD NOT be used to construct IPv4-\n   translatable\
    \ IPv6 addresses.  The nodes served by IPv4-translatable\n   IPv6 addresses should\
    \ be able to receive global IPv6 traffic bound to\n   their IPv4-translatable\
    \ IPv6 address without incurring intermediate\n   protocol translation.  This\
    \ is only possible if the specific prefix\n   used to build the IPv4-translatable\
    \ IPv6 addresses is advertised in\n   inter-domain routing, but the advertisement\
    \ of more specific prefixes\n   derived from the Well-Known Prefix is not supported,\
    \ as explained in\n   Section 3.2.  Network-Specific Prefixes SHOULD be used in\
    \ these\n   scenarios, as explained in Section 3.3.\n   The Well-Known Prefix\
    \ MAY be used by organizations deploying\n   translation services, as explained\
    \ in Section 3.4.\n"
- title: 3.2.  Impact on Inter-Domain Routing
  contents:
  - "3.2.  Impact on Inter-Domain Routing\n   The Well-Known Prefix MAY appear in\
    \ inter-domain routing tables, if\n   service providers decide to provide IPv6-IPv4\
    \ interconnection\n   services to peers.  Advertisement of the Well-Known Prefix\
    \ SHOULD be\n   controlled either by upstream and/or downstream service providers\n\
    \   according to inter-domain routing policies, e.g., through\n   configuration\
    \ of BGP [RFC4271].  Organizations that advertise the\n   Well-Known Prefix in\
    \ inter-domain routing MUST be able to provide\n   IPv4/IPv6 translation service.\n\
    \   When the IPv4/IPv6 translation relies on the Well-Known Prefix, IPv4-\n  \
    \ embedded IPv6 prefixes longer than the Well-Known Prefix MUST NOT be\n   advertised\
    \ in BGP (especially External BGP) [RFC4271] because this\n   leads to importing\
    \ the IPv4 routing table into the IPv6 one and\n   therefore introduces scalability\
    \ issues to the global IPv6 routing\n   table.  Administrators of BGP nodes SHOULD\
    \ configure filters that\n   discard advertisements of embedded IPv6 prefixes\
    \ longer than the\n   Well-Known Prefix.\n   When the IPv4/IPv6 translation service\
    \ relies on Network-Specific\n   Prefixes, the IPv4-translatable IPv6 prefixes\
    \ used in stateless\n   translation MUST be advertised with proper aggregation\
    \ to the IPv6\n   Internet.  Similarly, if translators are configured with multiple\n\
    \   Network-Specific Prefixes, these prefixes MUST be advertised to the\n   IPv6\
    \ Internet with proper aggregation.\n"
- title: 3.3.  Choice of Prefix for Stateless Translation Deployments
  contents:
  - "3.3.  Choice of Prefix for Stateless Translation Deployments\n   Organizations\
    \ may deploy translation services using stateless\n   translation.  In these deployments,\
    \ internal IPv6 nodes are addressed\n   using IPv4-translatable IPv6 addresses,\
    \ which enable them to be\n   accessed by IPv4 nodes.  The addresses of these\
    \ external IPv4 nodes\n   are then represented in IPv4-converted IPv6 addresses.\n\
    \   Organizations deploying stateless IPv4/IPv6 translation SHOULD assign\n  \
    \ a Network-Specific Prefix to their IPv4/IPv6 translation service.\n   IPv4-translatable\
    \ and IPv4-converted IPv6 addresses MUST be\n   constructed as specified in Section\
    \ 2.2.  IPv4-translatable IPv6\n   addresses MUST use the selected Network-Specific\
    \ Prefix.  Both IPv4-\n   translatable IPv6 addresses and IPv4-converted IPv6\
    \ addresses SHOULD\n   use the same prefix.\n   Using the same prefix ensures\
    \ that IPv6 nodes internal to the\n   organization will use the most efficient\
    \ paths to reach the nodes\n   served by IPv4-translatable IPv6 addresses.  Specifically,\
    \ if a node\n   learns the IPv4 address of a target internal node without knowing\n\
    \   that this target is in fact located behind the same translator that\n   the\
    \ node also uses, translation rules will ensure that the IPv6\n   address constructed\
    \ with the Network-Specific Prefix is the same as\n   the IPv4-translatable IPv6\
    \ address assigned to the target.  Standard\n   routing preference (i.e., \"most\
    \ specific match wins\") will then\n   ensure that the IPv6 packets are delivered\
    \ directly, without\n   requiring that translators receive the packets and then\
    \ return them\n   in the direction from which they came.\n   The intra-domain\
    \ routing protocol must be able to deliver packets to\n   the nodes served by\
    \ IPv4-translatable IPv6 addresses.  This may\n   require routing on some or all\
    \ of the embedded IPv4 address bits.\n   Security considerations detailed in Section\
    \ 5 require that routers\n   check the validity of the IPv4-translatable IPv6\
    \ source addresses,\n   using some form of reverse path check.\n   The management\
    \ of stateless address translation can be illustrated\n   with a small example:\n\
    \      We will consider an IPv6 network with the prefix 2001:db8:\n      122::/48.\
    \  The network administrator has selected the Network-\n      Specific Prefix\
    \ 2001:db8:122:344::/64 for managing stateless IPv4/\n      IPv6 translation.\
    \  The IPv4-translatable address block for IPv4\n      subnet 192.0.2.0/24 is\
    \ 2001:db8:122:344:c0:2::/96.  In this\n      network, the host A is assigned\
    \ the IPv4-translatable IPv6 address\n      2001:db8:122:344:c0:2:2100::, which\
    \ corresponds to the IPv4\n      address 192.0.2.33.  Host A's address is configured\
    \ either\n      manually or through DHCPv6.\n      In this example, host A is\
    \ not directly connected to the\n      translator, but instead to a link managed\
    \ by a router R.  The\n      router R is configured to forward to A the packets\
    \ bound to 2001:\n      db8:122:344:c0:2:2100::.  To receive these packets, R\
    \ will\n      advertise reachability of the prefix 2001:db8:122:344:c0:2:2100::/\n\
    \      104 in the intra-domain routing protocol -- or perhaps a shorter\n    \
    \  prefix if many hosts on link have IPv4-translatable IPv6 addresses\n      derived\
    \ from the same IPv4 subnet.  If a packet bound to\n      192.0.2.33 reaches the\
    \ translator, the destination address will be\n      translated to 2001:db8:122:344:c0:2:2100::,\
    \ and the packet will be\n      routed towards R and then to A.\n      Let's suppose\
    \ now that a host B of the same domain learns the IPv4\n      address of A, maybe\
    \ through an application-specific referral.  If\n      B has translation-aware\
    \ software, B can compose a destination\n      address by combining the Network-Specific\
    \ Prefix 2001:db8:122:\n      344::/64 and the IPv4 address 192.0.2.33, resulting\
    \ in the address\n      2001:db8:122:344:c0:2:2100::.  The packet sent by B will\
    \ be\n      forwarded towards R, and then to A, avoiding protocol translation.\n\
    \   Forwarding, and reverse path checks, are more efficient when\n   performed\
    \ on the combination of the prefix and the IPv4 address.  In\n   theory, routers\
    \ are able to route on prefixes of any length, but in\n   practice there may be\
    \ routers for which routing on prefixes larger\n   than 64 bits is slower.  However,\
    \ routing efficiency is not the only\n   consideration in the choice of a prefix\
    \ length.  Organizations also\n   need to consider the availability of prefixes,\
    \ and the potential\n   impact of all-zero identifiers.\n   If a /32 prefix is\
    \ used, all the routing bits are contained in the\n   top 64 bits of the IPv6\
    \ address, leading to excellent routing\n   properties.  These prefixes may however\
    \ be hard to obtain, and\n   allocation of a /32 to a small set of IPv4-translatable\
    \ IPv6\n   addresses may be seen as wasteful.  In addition, the /32 prefix and\
    \ a\n   zero suffix lead to an all-zero interface identifier, which is an\n  \
    \ issue that we discuss in Section 4.1.\n   Intermediate prefix lengths such as\
    \ /40, /48, or /56 appear as\n   compromises.  Only some of the IPv4 bits are\
    \ part of the /64\n   prefixes.  Reverse path checks, in particular, may have\
    \ a limited\n   efficiency.  Reverse path checks limited to the most significant\
    \ bits\n   of the IPv4 address will reduce the possibility of spoofing external\n\
    \   IPv4 addresses, but would allow IPv6 nodes to spoof internal IPv4-\n   translatable\
    \ IPv6 addresses.\n   We propose a compromise, based on using no more than 1/256th\
    \ of an\n   organization's allocation of IPv6 addresses for the IPv4/IPv6\n  \
    \ translation service.  For example, if the organization is an Internet\n   Service\
    \ Provider with an allocated IPv6 prefix /32 or shorter, the\n   ISP could dedicate\
    \ a /40 prefix to the translation service.  An end\n   site with a /48 allocation\
    \ could dedicate a /56 prefix to the\n   translation service, or possibly a /96\
    \ prefix if all IPv4-\n   translatable IPv6 addresses are located on the same\
    \ link.\n   The recommended prefix length is also a function of the deployment\n\
    \   scenario.  The stateless translation can be used for Scenario 1,\n   Scenario\
    \ 2, Scenario 5, and Scenario 6 defined in [v4v6-FRAMEWORK].\n   For different\
    \ scenarios, the prefix length recommendations are:\n   o  For Scenario 1 (an\
    \ IPv6 network to the IPv4 Internet) and Scenario\n      2 (the IPv4 Internet\
    \ to an IPv6 network), an ISP holding a /32\n      allocation SHOULD use a /40\
    \ prefix, and a site holding a /48\n      allocation SHOULD use a /56 prefix.\n\
    \   o  For Scenario 5 (an IPv6 network to an IPv4 network) and Scenario 6\n  \
    \    (an IPv4 network to an IPv6 network), the deployment SHOULD use a\n     \
    \ /64 or a /96 prefix.\n"
- title: 3.4.  Choice of Prefix for Stateful Translation Deployments
  contents:
  - "3.4.  Choice of Prefix for Stateful Translation Deployments\n   Organizations\
    \ may deploy translation services based on stateful\n   translation technology.\
    \  An organization may decide to use either a\n   Network-Specific Prefix or the\
    \ Well-Known Prefix for its stateful\n   IPv4/IPv6 translation service.\n   When\
    \ these services are used, IPv6 nodes are addressed through\n   standard IPv6\
    \ addresses, while IPv4 nodes are represented by IPv4-\n   converted IPv6 addresses,\
    \ as specified in Section 2.2.\n   The stateful nature of the translation creates\
    \ a potential stability\n   issue when the organization deploys multiple translators.\
    \  If several\n   translators use the same prefix, there is a risk that packets\n\
    \   belonging to the same connection may be routed to different\n   translators\
    \ as the internal routing state changes.  This issue can be\n   avoided either\
    \ by assigning different prefixes to different\n   translators or by ensuring\
    \ that all translators using the same prefix\n   coordinate their state.\n   Stateful\
    \ translation can be used in scenarios defined in\n   [v4v6-FRAMEWORK].  The Well-Known\
    \ Prefix SHOULD be used in these\n   scenarios, with two exceptions:\n   o  In\
    \ all scenarios, the translation MAY use a Network-Specific\n      Prefix, if\
    \ deemed appropriate for management reasons.\n   o  The Well-Known Prefix MUST\
    \ NOT be used for Scenario 3 (the IPv6\n      Internet to an IPv4 network), as\
    \ this would lead to using the\n      Well-Known Prefix with non-global IPv4 addresses.\
    \  That means a\n      Network-Specific Prefix (for example, a /96 prefix) MUST\
    \ be used\n      in that scenario.\n"
- title: 4.  Design Choices
  contents:
  - "4.  Design Choices\n   The prefix that we have chosen reflects two design choices,\
    \ the null\n   suffix and the specific value of the Well-Known Prefix.  We provide\n\
    \   here a summary of the discussions leading to those two choices.\n"
- title: 4.1.  Choice of Suffix
  contents:
  - "4.1.  Choice of Suffix\n   The address format described in Section 2.2 recommends\
    \ a zero suffix.\n   Before making this recommendation, we considered different\
    \ options:\n   checksum neutrality, the encoding of a port range, and a value\n\
    \   different than 0.\n   In the case of stateless translation, there would be\
    \ no need for the\n   translator to recompute a one's complement checksum if both\
    \ the IPv4-\n   translatable and the IPv4-converted IPv6 addresses were constructed\n\
    \   in a \"checksum-neutral\" manner, that is, if the IPv6 addresses would\n \
    \  have the same one's complement checksum as the embedded IPv4 address.\n   In\
    \ the case of stateful translation, checksum neutrality does not\n   eliminate\
    \ checksum computation during translation, as only one of the\n   two addresses\
    \ would be checksum neutral.  We considered reserving 16\n   bits in the suffix\
    \ to guarantee checksum neutrality, but declined\n   because it would not help\
    \ with stateful translation and because\n   checksum neutrality can also be achieved\
    \ by an appropriate choice of\n   the Network-Specific Prefix, i.e., selecting\
    \ a prefix whose one's\n   complement checksum equals either 0 or 0xffff.\n  \
    \ There have been proposals to complement stateless translation with a\n   port-range\
    \ feature.  Instead of mapping an IPv4 address to exactly\n   one IPv6 prefix,\
    \ the options would allow several IPv6 nodes to share\n   an IPv4 address, with\
    \ each node managing a different range of ports.\n   If a port range extension\
    \ is needed, it could be defined later, using\n   bits currently reserved as null\
    \ in the suffix.\n   When a /32 prefix is used, an all-zero suffix results in\
    \ an all-zero\n   interface identifier.  We understand the conflict with Section\
    \ 2.6.1\n   of RFC4291, which specifies that all zeroes are used for the subnet-\n\
    \   router anycast address.  However, in our specification, there is only\n  \
    \ one node with an IPv4-translatable IPv6 address in the /64 subnet, so\n   the\
    \ anycast semantic does not create confusion.  We thus decided to\n   keep the\
    \ null suffix for now.  This issue does not exist for prefixes\n   larger than\
    \ 32 bits, such as the /40, /56, /64, and /96 prefixes that\n   we recommend in\
    \ Section 3.3.\n"
- title: 4.2.  Choice of the Well-Known Prefix
  contents:
  - "4.2.  Choice of the Well-Known Prefix\n   Before making our recommendation of\
    \ the Well-Known Prefix, we were\n   faced with three choices:\n   o  reuse the\
    \ IPv4-mapped prefix, ::ffff:0:0/96, as specified in RFC\n      2765, Section\
    \ 2.1;\n   o  request IANA to allocate a /32 prefix, or\n   o  request allocation\
    \ of a new /96 prefix.\n   We weighted the pros and cons of these choices before\
    \ settling on the\n   recommended /96 Well-Known Prefix.\n   The main advantage\
    \ of the existing IPv4-mapped prefix is that it is\n   already defined.  Reusing\
    \ that prefix would require minimal\n   standardization efforts.  However, being\
    \ already defined is not just\n   an advantage, as there may be side effects of\
    \ current\n   implementations.  When presented with the IPv4-mapped prefix, current\n\
    \   versions of Windows and Mac OS generate IPv4 packets, but will not\n   send\
    \ IPv6 packets.  If we used the IPv4-mapped prefix, these nodes\n   would not\
    \ be able to support translation without modification.  This\n   will defeat the\
    \ main purpose of the translation techniques.  We thus\n   eliminated the first\
    \ choice, i.e., decided to not reuse the IPv4-\n   mapped prefix, ::ffff:0:0/96.\n\
    \   A /32 prefix would have allowed the embedded IPv4 address to fit\n   within\
    \ the top 64 bits of the IPv6 address.  This would have\n   facilitated routing\
    \ and load balancing when an organization deploys\n   several translators.  However,\
    \ such destination-address-based load\n   balancing may not be desirable.  It\
    \ is not compatible with Session\n   Traversal Utilities for NAT (STUN) [RFC5389]\
    \ in the deployments\n   involving multiple stateful translators, each one having\
    \ a different\n   pool of IPv4 addresses.  STUN compatibility would only be achieved\
    \ if\n   the translators managed the same pool of IPv4 addresses and were able\n\
    \   to coordinate their translation state, in which case there is no big\n   advantage\
    \ to using a /32 prefix rather than a /96 prefix.\n   According to Section 2.2\
    \ of [RFC4291], in the legal textual\n   representations of IPv6 addresses, dotted\
    \ decimal can only appear at\n   the end.  The /96 prefix is compatible with that\
    \ requirement.  It\n   enables the dotted decimal notation without requiring an\
    \ update to\n   [RFC4291].  This representation makes the address format easier\
    \ to\n   use and the log files easier to read.\n   The prefix that we recommend\
    \ has the particularity of being \"checksum\n   neutral\".  The sum of the hexadecimal\
    \ numbers \"0064\" and \"ff9b\" is\n   \"ffff\", i.e., a value equal to zero in\
    \ one's complement arithmetic.\n   An IPv4-embedded IPv6 address constructed with\
    \ this prefix will have\n   the same one's complement checksum as the embedded\
    \ IPv4 address.\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  Protection against Spoofing
  contents:
  - "5.1.  Protection against Spoofing\n   IPv4/IPv6 translators can be modeled as\
    \ special routers, are subject\n   to the same risks, and can implement the same\
    \ mitigations.  (The\n   discussion of generic threats to routers and their mitigations\
    \ is\n   beyond the scope of this document.)  There is, however, a particular\n\
    \   risk that directly derives from the practice of embedding IPv4\n   addresses\
    \ in IPv6: address spoofing.\n   An attacker could use an IPv4-embedded IPv6 address\
    \ as the source\n   address of malicious packets.  After translation, the packets\
    \ will\n   appear as IPv4 packets from the specified source, and the attacker\n\
    \   may be hard to track.  If left without mitigation, the attack would\n   allow\
    \ malicious IPv6 nodes to spoof arbitrary IPv4 addresses.\n   The mitigation is\
    \ to implement reverse path checks and to verify\n   throughout the network that\
    \ packets are coming from an authorized\n   location.\n"
- title: 5.2.  Secure Configuration
  contents:
  - "5.2.  Secure Configuration\n   The prefixes used for address translation are\
    \ used by IPv6 nodes to\n   send packets to IPv6/IPv4 translators.  Attackers\
    \ could attempt to\n   fool nodes, DNS gateways, and IPv4/IPv6 translators into\
    \ using wrong\n   values for these parameters, resulting in network disruption,\
    \ denial\n   of service, and possible information disclosure.  To mitigate such\n\
    \   attacks, network administrators need to ensure that prefixes are\n   configured\
    \ in a secure way.\n   The mechanisms for achieving secure configuration of prefixes\
    \ are\n   beyond the scope of this document.\n"
- title: 5.3.  Firewall Configuration
  contents:
  - "5.3.  Firewall Configuration\n   Many firewalls and other security devices filter\
    \ traffic based on\n   IPv4 addresses.  Attackers could attempt to fool these\
    \ firewalls by\n   sending IPv6 packets to or from IPv6 addresses that translate\
    \ to the\n   filtered IPv4 addresses.  If the attack is successful, traffic that\n\
    \   was previously blocked might be able to pass through the firewalls\n   disguised\
    \ as IPv6 packets.  In all such scenarios, administrators\n   should assure that\
    \ packets that send to or from IPv4-embedded IPv6\n   addresses are subject to\
    \ the same filtering as those directly sent to\n   or from the embedded IPv4 addresses.\n\
    \   The mechanisms for configuring firewalls and security devices to\n   achieve\
    \ this filtering are beyond the scope of this document.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has made the following changes in the \"Internet\
    \ Protocol Version\n   6 Address Space\" registry located at http://www.iana.org.\n\
    \   OLD:\n      IPv6 Prefix Allocation       Reference    Note\n      -----------\
    \ ---------------- ------------ ----------------\n      0000::/8    Reserved by\
    \ IETF [RFC4291]    [1][5]\n   NEW:\n      IPv6 Prefix Allocation       Reference\
    \    Note\n      ----------- ---------------- ------------ ----------------\n\
    \      0000::/8    Reserved by IETF [RFC4291]    [1][5][6]\n      [6] The \"Well-Known\
    \ Prefix\" 64:ff9b::/96 used in an algorithmic\n          mapping between IPv4\
    \ to IPv6 addresses is defined out of the\n          0000::/8 address block, per\
    \ RFC 6052.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Many people in the BEHAVE WG have contributed to the\
    \ discussion that\n   led to this document, including Andrew Sullivan, Andrew\
    \ Yourtchenko,\n   Ari Keranen, Brian Carpenter, Charlie Kaufman, Dan Wing, Dave\
    \ Thaler,\n   David Harrington, Ed Jankiewicz, Fred Baker, Hiroshi Miyata, Iljitsch\n\
    \   van Beijnum, John Schnizlein, Keith Moore, Kevin Yin, Magnus\n   Westerlund,\
    \ Margaret Wasserman, Masahito Endo, Phil Roberts, Philip\n   Matthews, Remi Denis-Courmont,\
    \ Remi Despres, and William Waites.\n   Marcelo Bagnulo is partly funded by Trilogy,\
    \ a research project\n   supported by the European Commission under its Seventh\
    \ Framework\n   Program.\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   The following individuals co-authored documents from which\
    \ text has\n   been incorporated, and are listed in alphabetical order.\n    \
    \   Dave Thaler\n       Microsoft Corporation\n       One Microsoft Way\n    \
    \   Redmond, WA  98052\n       USA\n       Phone: +1 425 703 8835\n       EMail:\
    \ dthaler@microsoft.com\n       Fred Baker\n       Cisco Systems\n       Santa\
    \ Barbara, California  93117\n       USA\n       Phone: +1-408-526-4257\n    \
    \   Fax:   +1-413-473-2403\n       EMail: fred@cisco.com\n       Hiroshi Miyata\n\
    \       Yokogawa Electric Corporation\n       2-9-32 Nakacho\n       Musashino-shi,\
    \ Tokyo  180-8750\n       JAPAN\n       EMail: h.miyata@jp.yokogawa.com\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \              Architecture\", RFC 4291, February 2006.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DNS64]    Bagnulo, M., Sullivan, A., Matthews,\
    \ P., and I. Beijnum,\n              \"DNS64: DNS extensions for Network Address\
    \ Translation\n              from IPv6 Clients to IPv4 Servers\", Work in Progress,\n\
    \              October 2010.\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg,\
    \ D., Groot, G., and\n              E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC3484]  Draves,\
    \ R., \"Default Address Selection for Internet\n              Protocol version\
    \ 6 (IPv6)\", RFC 3484, February 2003.\n   [RFC3849]  Huston, G., Lord, A., and\
    \ P. Smith, \"IPv6 Address Prefix\n              Reserved for Documentation\"\
    , RFC 3849, July 2004.\n   [RFC4271]  Rekhter, Y., Li, T., and S. Hares, \"A Border\
    \ Gateway\n              Protocol 4 (BGP-4)\", RFC 4271, January 2006.\n   [RFC5389]\
    \  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session\
    \ Traversal Utilities for NAT (STUN)\", RFC 5389,\n              October 2008.\n\
    \   [RFC5735]  Cotton, M. and L. Vegoda, \"Special Use IPv4 Addresses\",\n   \
    \           BCP 153, RFC 5735, January 2010.\n   [RFC5952]  Kawamura, S. and M.\
    \ Kawashima, \"A Recommendation for IPv6\n              Address Text Representation\"\
    , RFC 5952, August 2010.\n   [v4v6-FRAMEWORK]\n              Baker, F., Li, X.,\
    \ Bao, C., and K. Yin, \"Framework for\n              IPv4/IPv6 Translation\"\
    , Work in Progress, August 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Congxiao Bao\n   CERNET Center/Tsinghua University\n \
    \  Room 225, Main Building, Tsinghua University\n   Beijing,   100084\n   China\n\
    \   Phone: +86 10-62785983\n   EMail: congxiao@cernet.edu.cn\n   Christian Huitema\n\
    \   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA  98052-6399\n\
    \   U.S.A.\n   EMail: huitema@microsoft.com\n   Marcelo Bagnulo\n   UC3M\n   Av.\
    \ Universidad 30\n   Leganes, Madrid  28911\n   Spain\n   Phone: +34-91-6249500\n\
    \   EMail: marcelo@it.uc3m.es\n   URI:   http://www.it.uc3m.es/marcelo\n   Mohamed\
    \ Boucadair\n   France Telecom\n   3, Av Francois Chateaux\n   Rennes  350000\n\
    \   France\n   EMail: mohamed.boucadair@orange-ftgroup.com\n   Xing Li\n   CERNET\
    \ Center/Tsinghua University\n   Room 225, Main Building, Tsinghua University\n\
    \   Beijing,   100084\n   China\n   Phone: +86 10-62785983\n   EMail: xing@cernet.edu.cn\n"
