- contents:
  - "                     Security Multiparts for MIME:\n                Multipart/Signed
    and Multipart/Encrypted\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document defines a framework within which security services
    may\n   be applied to MIME body parts.  MIME, an acronym for \"Multipurpose\n
    \  Internet Mail Extensions\", defines the format of the contents of\n   Internet
    mail messages and provides for multi-part textual and non-\n   textual message
    bodies.  The new content types are subtypes of\n   multipart: signed and encrypted.
    \ Each will contain two body parts:\n   one for the protected data and one for
    the control information\n   necessary to remove the protection.  The type and
    contents of the\n   control information body parts are determined by the value
    of the\n   protocol parameter of the enclosing multipart/signed or\n   multipart/encrypted
    content type, which is required to be present.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction ..............................................
    \   2\n   2.  Definition of Security Subtypes of Multipart ..............    2\n
    \  2.1   Definition of Multipart/Signed ..........................    3\n   2.2
    \  Definition of Multipart/Encrypted .......................    6\n   3.  Definition
    of Control Information Content Types ...........    9\n   4.  Definition of Key
    Management Content Types ................    9\n   5.  Security Considerations
    ...................................   10\n   6.  Acknowledgements ..........................................
    \  10\n   7.  References ................................................   10\n
    \  8.  Authors' Addresses ........................................   11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   An Internet electronic mail message consists of two parts:
    the\n   headers and the body.  The headers form a collection of field/value\n
    \  pairs structured according to STD 11, RFC 822 [1], whilst the body,\n   if
    structured, is defined according to MIME [2].  The basic MIME\n   specification
    does not provide specific security protection.\n   This document defines a framework
    whereby security protection\n   provided by other protocols may be used with MIME
    in a complementary\n   fashion.  By itself, it does not specify security protection.
    \ A MIME\n   agent must include support for both the framework defined here and
    a\n   mechanism to interact with a security protocol defined in a separate\n   document.
    \ The resulting combined service provides security for\n   single-part and multi-part
    textual and non-textual messages.\n   The framework is provided by defining two
    new security subtypes of\n   the MIME multipart content type: signed and encrypted.
    \ In each of\n   the security subtypes, there are exactly two related body parts:
    one\n   for the protected data and one for the control information.  The type\n
    \  and contents of the control information body parts are determined by\n   the
    value of the protocol parameter of the enclosing multipart/signed\n   or multipart/encrypted
    content type, which is required to be present.\n   By registering new values for
    the required protocol parameter, the\n   framework is easily extended to accommodate
    a variety of protocols.\n   A MIME agent that includes support for this framework
    will be able to\n   recognize a security multipart body part and to identify its\n
    \  protected data and control information body parts.  If the value of\n   the
    protocol parameter is unrecognized the MIME agent will not be\n   able to process
    the security multipart.  However, a MIME agent may\n   continue to process any
    other body parts that may be present.\n"
  title: 1.  Introduction
- contents:
  - "2.  Definition of Security Subtypes of Multipart\n   The multipart/signed content
    type specifies how to support\n   authentication and integrity services via digital
    signature.  The\n   control information is carried in the second of the two required
    body\n   parts.\n   The multipart/encrypted content type specifies how to support\n
    \  confidentiality via encryption.  The control information is carried\n   in
    the first of the two required body parts.\n   A three-step process is described
    for the origination and reception\n   of the multipart/signed and multipart/encrypted
    contents.  The\n   details of the processing performed during each step is left
    to be\n   specified by the security protocol being used.\n"
  title: 2.  Definition of Security Subtypes of Multipart
- contents:
  - "2.1.  Definition of Multipart/Signed\n   (1)  MIME type name: multipart\n   (2)
    \ MIME subtype name: signed\n   (3)  Required parameters: boundary, protocol,
    and micalg\n   (4)  Optional parameters: none\n   (5)  Security considerations:
    Must be treated as opaque while in\n        transit\n   The multipart/signed content
    type contains exactly two body parts.\n   The first body part is the body part
    over which the digital signature\n   was created, including its MIME headers.
    \ The second body part\n   contains the control information necessary to verify
    the digital\n   signature.  The first body part may contain any valid MIME content\n
    \  type, labeled accordingly.  The second body part is labeled according\n   to
    the value of the protocol parameter.\n   The attribute token for the protocol
    parameter is \"protocol\", i.e.,\n    parameter := \"protocol\" \"=\" value\n
    \  The value token is comprised of the type and sub-type tokens of the\n   Content-Type:
    header of the second body part, i.e.,\n    value := <\"> type \"/\" subtype <\">\n
    \  where the type and subtype tokens are defined by the MIME [2]\n   specification.
    \ The semantics of the protocol parameter are defined\n   according to its value.\n
    \  The attribute token for the micalg parameter is \"micalg\", i.e.,\n    parameter
    := \"micalg\" \"=\" value\n   The Message Integrity Check (MIC) is the name given
    to the quantity\n   computed over the body part with a message digest or hash
    function,\n   in support of the digital signature service.  Valid value tokens
    are\n   defined by the specification for the value of the protocol parameter.\n
    \  The value may be a comma (\",\") separated list of tokens, indicating\n   the
    use of multiple MIC algorithms.  As a result, the comma (\",\")\n   character
    is explicitly excluded from the list of characters that may\n   be included in
    a token used as a value of the micalg parameter.  If\n   multiple MIC algorithms
    are specified, the purpose and use of the\n   multiple algorithms is defined by
    the protocol.  If the MIC algorithm\n   is also specified in the control information
    and the value there does\n   not agree with the value in this parameter, it must
    be treated as an\n   error.\n    NOTE: The presence of the micalg parameter on
    the\n    multipart/signed content type header is explicitly intended to\n    support
    one-pass processing.  MIME implementations may locate\n    the second body part
    by inputting the first body part and\n    computing the specified MIC values until
    the boundary\n    identifying the second body part is found.\n   The entire contents
    of the multipart/signed container must be treated\n   as opaque while it is in
    transit from an originator to a recipient.\n   Intermediate message transfer agents
    must not alter the content of a\n   multipart/signed in any way, including, but
    not limited to, changing\n   the content transfer encoding of the body part or
    any of its\n   encapsulated body parts.\n   The signature in a multipart/signed
    only applies to the material that\n   is actually within the multipart/signed
    object.  In particular, it\n   does not apply to any enclosing message material,
    nor does it apply\n   to entities that are referenced (e.g. via a MIME message/external-\n
    \  body) by rather than included in the signed content.\n   When creating a multipart/signed
    body part, the following sequence of\n   steps describes the processing necessary.
    \ It must be emphasized that\n   these steps are descriptive, not prescriptive,
    and in no way impose\n   restrictions or requirements on implementations of this\n
    \  specification.\n   (1)  The content of the body part to be protected is prepared\n
    \       according to a local convention.  The content is then\n        transformed
    into a MIME body part in canonical MIME format,\n        including an appropriate
    set of MIME headers.\n        In addition, if the multipart/signed object is EVER
    to be\n        transferred over the standard Internet SMTP infrastructure, the\n
    \       resulting MIME body is constrained to 7 bits -- that is, the use\n        of
    material requiring either 8bit or binary\n        content-transfer-encoding is
    NOT allowed.  Such 8bit or binary\n        material MUST be encoded using either
    the quoted-printable or\n        base64 encodings.\n        This requirement exists
    because it is not generally possible,\n        given the current characteristics
    of Internet SMTP, for a\n        message originator to guarantee that a message
    will travel only\n        along paths capable of carrying 8bit or binary material.\n
    \       SMTP clients normally have the option of either converting the\n        message
    to eliminate the use of 8bit or binary encoding or\n        returning a nondelivery
    notification to the originator.\n        However, conversion is not viable in
    the case of signed objects\n        since conversion would necessarily invalidate
    the signature.\n        This leaves a nondelivery notification as the only available\n
    \       option, which is not acceptable.\n   (2)  The body part (headers and content)
    to be digitally signed is\n        prepared for signature according to the value
    of the protocol\n        parameter.  The MIME headers of the signed body part
    are\n        included in the signature to protect the integrity of the MIME\n
    \       labeling of the data that is signed.\n   (3)  The prepared body part is
    made available to the signature creation\n        process according to a local
    convention.  The signature creation\n        process must make available to a
    MIME implementation two data\n        streams: the control information necessary
    to verify the\n        signature, which the MIME implementation will place in
    the second\n        body part and label according to the value of the protocol\n
    \       parameter, and the digitally signed body part, which the MIME\n        implementation
    will use as the first body part.\n   When receiving a multipart/signed body part,
    the following sequence\n   of steps describes the processing necessary to verify
    the signature\n   or signatures.  It must be emphasized that these steps are\n
    \  descriptive, not prescriptive, and in no way impose restrictions or\n   requirements
    on implementations of this specification.\n   (1)  The first body part and the
    control information in the second body\n        part must be prepared for the
    signature verification process\n        according to the value of the protocol
    parameter.\n   (2)  The prepared body parts must be made available to the signature\n
    \       verification process according to a local convention.  The\n        signature
    verification process must make available to the MIME\n        implementation the
    result of the signature verification and the\n        body part that was digitally
    signed.\n            NOTE: The result of the signature verification is likely
    to\n            include a testament of the success or failure of the\n            verification.
    \ Also, in the usual case, the body part\n            returned after signature
    verification will be the same as\n            the body part that was received.
    \ We do not insist that\n            this be the case to allow for protocols that
    may modify the\n            body part during the signature processing.\n   (3)
    \ The result of the signature verification process is made available\n        to
    the user and the MIME implementation continues processing with\n        the verified
    body part, i.e., the body part returned by the\n        signature verification
    process.\n   The following example is an illustration of a multipart/signed body\n
    \  part.  It is necessarily incomplete since the control information is\n   defined
    by the security protocol, which must be specified in a\n   separate document.\n
    \   Content-Type: multipart/signed; protocol=\"TYPE/STYPE\";\n            micalg=\"MICALG\";
    boundary=\"Signed Boundary\"\n    --Signed Boundary\n    Content-Type: text/plain;
    charset=\"us-ascii\"\n    This is some text to be signed although it could be\n
    \   any type of data, labeled accordingly, of course.\n    --Signed Boundary\n
    \   Content-Type: TYPE/STYPE\n    CONTROL INFORMATION for protocol \"TYPE/STYPE\"
    would be here\n    --Signed Boundary--\n"
  title: 2.1.  Definition of Multipart/Signed
- contents:
  - "2.2.  Definition of Multipart/Encrypted\n   (1)  MIME type name: multipart\n
    \  (2)  MIME subtype name: encrypted\n   (3)  Required parameters: boundary, protocol\n
    \  (4)  Optional parameters: none\n   (5)  Security considerations: none\n   The
    multipart/encrypted content type contains exactly two body parts.\n   The first
    body part contains the control information necessary to\n   decrypt the data in
    the second body part and is labeled according to\n   the value of the protocol
    parameter.  The second body part contains\n   the data which was encrypted and
    is always labeled\n   application/octet-stream.\n   The attribute token for the
    protocol parameter is \"protocol\", i.e.,\n    parameter := \"protocol\" \"=\"
    value\n   The value token is comprised of the type and sub-type tokens of the\n
    \  Content-Type: header of the first body part, i.e.,\n    value := <\"> type
    \"/\" subtype <\">\n   where the type and subtype tokens are defined by the MIME
    [2]\n   specification.  The semantics of the protocol parameter are defined\n
    \  according to its value.\n   When creating a multipart/encrypted body part,
    the following sequence\n   of steps describes the processing necessary.  It must
    be emphasized\n   that these steps are descriptive, not prescriptive, and in no
    way\n   impose restrictions or requirements on implementations of this\n   specification.\n
    \  (1)  The contents of the body part to be protected is prepared according\n
    \       to a local convention.  The contents are then transformed into a\n        MIME
    body part in canonical MIME format, including an appropriate\n        set of MIME
    headers.\n   (2)  The body part (headers and content) to be encrypted is prepared
    for\n        encryption according to the value of the protocol parameter.  The\n
    \       MIME headers of the encrypted body part are included in the\n        encryption
    to protect from disclosure the MIME labeling of the\n        data that is encrypted.\n
    \  (3)  The prepared body part is made available to the encryption process\n        according
    to a local convention.  The encryption process must make\n        available to
    a MIME implementation two data streams: the control\n        information necessary
    to decrypt the body part, which the MIME\n        implementation will place in
    the first body part and label\n        according to the value of the protocol
    parameter, and the\n        encrypted body part, which the MIME implementation
    will place in\n        the second body part and label application/octet-stream.
    \ Thus,\n        when used in a multipart/encrypted, the application/octet-stream\n
    \       data is comprised of a nested MIME body part.\n   When receiving a multipart/encrypted
    body part, the following\n   sequence of steps describes the processing necessary
    to decrypt the\n   enclosed data.  It must be emphasized that these steps are\n
    \  descriptive, not prescriptive, and in no way impose restrictions or\n   requirements
    on implementations of this specification.\n   (1)  The second body part and the
    control information in the first body\n        part must be prepared for the decryption
    process according to the\n        value of the protocol parameter.\n   (2)  The
    prepared body parts must be made available to the decryption\n        process
    according to a local convention.  The decryption process\n        must make available
    to the MIME implementation the result of the\n        decryption and the decrypted
    form of the encrypted body part.\n            NOTE: The result of the decryption
    process is likely to\n            include a testament of the success or failure
    of the\n            decryption.  Failure may be due to an inability to locate\n
    \           the proper decryption key or the proper recipient field,\n            etc.
    \ Implementors should note that the data, if any, of a\n            failed decryption
    process is pretty much guaranteed to be\n            garbage.\n   (3)  The result
    of the decryption process is made available to the user\n        and the MIME
    implementation continues processing with the decrypted\n        body part, i.e.,
    the body part returned by the decryption process.\n            NOTE: A MIME implementation
    will not be able to display the\n            received form of the second body
    part because the\n            application of encryption will transform the body
    part.\n            This transformation will not be described in the MIME\n            headers
    (Content-Type: and Content-Transfer-Encoding:) but,\n            rather, will
    be described in the content of the first body\n            part.  Therefore, an
    implementation should wait until the\n            encryption has been removed
    before attempting to display\n            the content.\n   The following example
    is an illustration of a multipart/encrypted\n   body part.  It is necessarily
    incomplete since the control\n   information is defined by the security protocol,
    which must be\n   specified in a separate document.\n    Content-Type: multipart/encrypted;
    protocol=\"TYPE/STYPE\";\n            boundary=\"Encrypted Boundary\"\n    --Encrypted
    Boundary\n    Content-Type: TYPE/STYPE\n    CONTROL INFORMATION for protocol \"TYPE/STYPE\"
    would be here\n    --Encrypted Boundary\n    Content-Type: application/octet-stream\n
    \       Content-Type: text/plain; charset=\"us-ascii\"\n        All of this indented
    text, including the indented headers,\n        would be unreadable since it would
    have been encrypted by\n        the protocol \"TYPE/STYPE\".  Also, this encrypted
    data could\n        be any type of data, labeled accordingly, of course.\n    --Encrypted
    Boundary--\n"
  title: 2.2.  Definition of Multipart/Encrypted
- contents:
  - "3.  Definition of Control Information Content Types\n   This document defines
    a framework within which security services may\n   be applied to MIME body parts.
    \ A minimal MIME implementation will be\n   able to recognize multipart/signed
    and multipart/encrypted body parts\n   and be able to identify the protected data
    and control information\n   body parts within them.\n   Complete support for security
    services requires the MIME agent to\n   recognize the value of the protocol parameter
    and to continue\n   processing based on its value.  The value of the protocol
    parameter\n   is the same value used to label the content type of the control\n
    \  information.\n   The value of the protocol parameter and the resulting processing\n
    \  required must be specified in the document defining the security\n   protocol
    used.  That document must also precisely specify the\n   contents of the control
    information body part.\n"
  title: 3.  Definition of Control Information Content Types
- contents:
  - "4.  Definition of Key Management Content Types\n   This specification recognizes
    that the complete specification of a\n   MIME-based security protocol must include
    a mechanism for\n   distributing the cryptographic material used in support of
    the\n   security services.  For example, a digital signature service\n   implemented
    with asymmetric cryptography requires that a signer's\n   public key be available
    to the signee.\n   One possible mechanism for distributing cryptographic material
    is to\n   define two additional body parts: one for the purpose of requesting\n
    \  cryptographic information and one for the purpose of returning the\n   cryptographic
    information requested.  The specification of a security\n   protocol may include
    a definition of two such body parts or it may\n   specify an alternate mechanism
    for the distribution of cryptographic\n   material.\n"
  title: 4.  Definition of Key Management Content Types
- contents:
  - "5.  Security Considerations\n   This specification describes an enhancement to
    MIME to support signed\n   and encrypted body parts.  In that context this entire
    document is\n   about security.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgements\n   David H. Crocker suggested the use of a multipart structure
    for the\n   MIME and PEM interaction.\n"
  title: 6.  Acknowledgements
- contents:
  - "7.  References\n   [1] Crocker, D., \"Standard for the Format of ARPA Internet
    Text\n       Messages\", STD 11, RFC 822, University of Delaware, August 1982.\n
    \  [2] Borenstein, N., and N. Freed, \"MIME (Multipurpose Internet Mail\n       Extension)
    Part One: Mechanisms for Specifying and Describing the\n       Format of Internet
    Message Bodies\", RFC 1521, Bellcore and\n       Innosoft, September 1993.\n"
  title: 7.  References
- contents:
  - "8.  Authors' Addresses\n   Jim Galvin\n   Trusted Information Systems\n   3060
    Washington Road\n   Glenwood, MD  21738\n   Phone: +1 301 854 6889\n   Fax: +1
    301 854 5363\n   EMail:  galvin@tis.com\n   Sandy Murphy\n   Trusted Information
    Systems\n   3060 Washington Road\n   Glenwood, MD  21738\n   Phone: +1 301 854
    6889\n   Fax: +1 301 854 5363\n   EMail:  sandy@tis.com\n   Steve Crocker\n   CyberCash,
    Inc.\n   2086 Hunters Crest Way\n   Vienna, VA 22181\n   Phone::    +1 703 620
    1222\n   Fax:    +1 703 391 2651\n   EMail:  crocker@cybercash.com\n   Ned Freed\n
    \  Innosoft International, Inc.\n   1050 East Garvey Avenue South\n   West Covina,
    CA 91790\n   Phone: +1 818 919 3600\n   Fax: +1 818 919 3614\n   EMail:  ned@innosoft.com\n"
  title: 8.  Authors' Addresses
