- title: __initial_text__
  contents:
  - '    YANG Modules for IPv4-in-IPv6 Address plus Port (A+P) Softwires

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines YANG modules for the configuration and\n \
    \  operation of IPv4-in-IPv6 softwire Border Relays and Customer\n   Premises\
    \ Equipment for the Lightweight 4over6, Mapping of Address and\n   Port with Encapsulation\
    \ (MAP-E), and Mapping of Address and Port\n   using Translation (MAP-T) softwire\
    \ mechanisms.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8676.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Overview of\
    \ the Modules\n     3.1.  Overall Structure\n     3.2.  Configuration for Additional\
    \ Components\n   4.  Softwire CE YANG Tree Diagram\n     4.1.  CE Tree Diagram\n\
    \     4.2.  Softwire CE Tree Diagram Description\n   5.  Softwire BR YANG Tree\
    \ Diagram\n     5.1.  BR Tree Diagram\n     5.2.  Softwire BR Tree Diagram Description\n\
    \   6.  Softwire CE YANG Module\n   7.  BR Softwire YANG Module\n   8.  Common\
    \ Softwire Element Groups YANG Module\n   9.  Security Considerations\n   10.\
    \ IANA Considerations\n   11. References\n     11.1.  Normative References\n \
    \    11.2.  Informative References\n   Appendix A.  Configuration Examples\n \
    \    A.1.  Configuration Example for a lw4o6 BR Binding-Table\n     A.2.  Configuration\
    \ Example for a MAP-E BR\n     A.3.  lw4o6 CE Configuration Example\n   Acknowledgements\n\
    \   Contributors\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IETF Softwire Working Group has developed several IPv4-in-IPv6\n\
    \   softwire mechanisms to address various deployment contexts and\n   constraints.\
    \  As a companion to the architectural specification\n   documents, this document\
    \ focuses on the provisioning of Address plus\n   Port (A+P) softwire functional\
    \ elements: Border Routers (BRs) and\n   Customer Edge (CE) (called \"Customer\
    \ Premises Equipment (CPE)\" in\n   [RFC7596]).  The softwire mechanisms covered\
    \ in this document are\n   Lightweight 4over6 (lw4o6) [RFC7596], Mapping of Address\
    \ and Port\n   with Encapsulation (MAP-E) [RFC7597], and Mapping of Address and\
    \ Port\n   using Translation (MAP-T) [RFC7599].\n   This document focuses on A+P\
    \ mechanisms [RFC6346]; the reader can\n   refer to [RFC8513] for a YANG module\
    \ for Dual-Stack Lite (DS-Lite)\n   [RFC6333].\n   This document defines YANG\
    \ modules [RFC7950] that can be used to\n   configure and manage A+P softwire\
    \ elements using the NETCONF\n   [RFC6241] or RESTCONF [RFC8040] protocols for:\n\
    \   *  Configuration\n   *  Operational State\n   *  Notifications\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The reader should be familiar with the concepts and terms\
    \ defined in\n   [RFC7596], [RFC7597], [RFC7599], and the YANG data modeling language\n\
    \   defined in [RFC7950].\n   The YANG modules in this document adopt the Network\
    \ Management\n   Datastore Architecture (NMDA) [RFC8342].  The meanings of the\
    \ symbols\n   used in tree diagrams are defined in [RFC8340].\n   The document\
    \ uses the abbreviation 'BR' as a general term for\n   softwire tunnel concentrators,\
    \ including both MAP Border Routers\n   [RFC7597] and Lightweight 4over6 lwAFTRs\
    \ [RFC7596].\n   For brevity, \"algorithm\" is used to refer to the \"mapping\
    \ algorithm\"\n   defined in [RFC7597].\n   A network element may support one\
    \ or multiple instances of a softwire\n   mechanism; each of these instances (i.e.,\
    \ binding instances, MAP-E\n   instances, or MAP-T instances) may have its own\
    \ configuration and\n   parameters.  The term 'algo-instance' is used to denote\
    \ both MAP-E\n   and MAP-T instances.\n"
- title: 3.  Overview of the Modules
  contents:
  - '3.  Overview of the Modules

    '
- title: 3.1.  Overall Structure
  contents:
  - "3.1.  Overall Structure\n   The document defines the following two YANG modules\
    \ for the\n   configuration and monitoring of softwire functional elements:\n\
    \      ietf-softwire-ce\n         Provides configuration and monitoring for softwire\
    \ CE element.\n         This module is defined as augments to the interface YANG\
    \ module\n         [RFC8343].\n      ietf-softwire-br\n         Provides configuration\
    \ and monitoring for softwire BR element.\n   In addition, the following module\
    \ is defined:\n      ietf-softwire-common\n         Contains groups of common\
    \ functions that are imported into the\n         CE and BR modules.\n   This approach\
    \ has been taken so that the various modules can be\n   easily extended to support\
    \ additional softwire mechanisms, if\n   required.\n   Within the BR and CE modules,\
    \ the YANG \"feature\" statement is used to\n   distinguish which of the different\
    \ softwire mechanism(s) is relevant\n   for a specific element's configuration.\
    \  For each module, a choice\n   statement 'ce-type' is included for either 'binding'\
    \ or 'algorithm'.\n   'Binding' is used for configuring Lightweight 4over6, whereas\n\
    \   'algorithm' is used for configuring MAP-T or MAP-E.\n   In the 'algo-instances'\
    \ container, a choice statement 'data-plane' is\n   included to specify MAP-E\
    \ (encapsulation) or MAP-T (translation).\n   Table 1 shows how these choices\
    \ are used to indicate the desired\n   softwire mechanism:\n            |   S46\
    \ Mechanism    |  ce-type? |  data-plane?  |\n            | Lightweight 4over6\
    \ |  binding  |      n/a      |\n            |       MAP-E        | algorithm\
    \ | encapsulation |\n            |       MAP-T        | algorithm |  translation\
    \  |\n                    Table 1: Softwire Mechanism Choice\n               \
    \           Statement Enumeration\n   NETCONF notifications are also included.\n\
    \      |  Earlier draft versions of this specification combined the\n      | \
    \ softwire mechanisms by their associated technologies rather\n      |  than their\
    \ function in the architecture.  As the document was\n      |  revised, it became\
    \ apparent that dividing the modules by their\n      |  role in the architecture\
    \ (CE or BR) was a better approach as\n      |  this follows the intended function\
    \ and existing implementation\n      |  approaches more closely.\n"
- title: 3.2.  Configuration for Additional Components
  contents:
  - "3.2.  Configuration for Additional Components\n   The softwire modules only aim\
    \ to provide configuration relevant for\n   softwires.  In order to fully provision\
    \ a CE element, the following\n   may also be necessary:\n   *  IPv6 forwarding\
    \ and routing configuration, to enable the CE to\n      obtain one or more IPv6\
    \ prefixes for softwire usage.  A YANG\n      module for routing management is\
    \ described in [RFC8349].\n   *  IPv4 routing configuration, to add one or more\
    \ IPv4 destination\n      prefix(es) reachable via the configured softwire.  A\
    \ YANG module\n      for routing management is described in [RFC8349].\n   * \
    \ Stateful NAT44/NAPT management, to optionally specify a port set\n      (Port\
    \ Set Identifier (PSID)) along with its length.  A YANG module\n      for NAT\
    \ management is described in [RFC8512].\n   *  Stateless NAT46 management, which\
    \ is required by softwire-\n      translation-based mechanisms (i.e., the assignment\
    \ of a Network-\n      Specific Prefix to use for IPv4/IPv6 translation).  A YANG\
    \ module\n      for NAT management is described in [RFC8512].\n   As YANG modules\
    \ for the above functions are already defined in other\n   documents, their functionality\
    \ is not duplicated here and they should\n   be referred to, as needed.  Appendix\
    \ A.3 provides XML examples of how\n   these modules can be used together.\n \
    \  The CE must already have minimal IPv6 configuration in place so it is\n   reachable\
    \ by the NETCONF client to obtain softwire configuration.  If\n   additional IPv6-specific\
    \ configuration is necessary, the YANG modules\n   defined in [RFC8344] and [RFC8349]\
    \ may be used.\n"
- title: 4.  Softwire CE YANG Tree Diagram
  contents:
  - '4.  Softwire CE YANG Tree Diagram

    '
- title: 4.1.  CE Tree Diagram
  contents:
  - "4.1.  CE Tree Diagram\n   The CE module provides configuration and monitoring\
    \ for all of the\n   softwire mechanisms covered in this document (i.e., Lightweight\n\
    \   4over6, MAP-E, and MAP-T).\n   This module augments \"ietf-interfaces\", defined\
    \ in [RFC8343] with an\n   entry for the softwire.  This entry can be referenced\
    \ to configure\n   IPv4 forwarding features for the element.  This entry is added\
    \ only\n   if tunnel type (Section 10) is set to 'aplusp'.\n   Figure 1 shows\
    \ the tree structure of the softwire CE YANG module:\n   module: ietf-softwire-ce\n\
    \     augment /if:interfaces/if:interface:\n       +--rw softwire-payload-mtu?\
    \   uint16\n       +--rw softwire-path-mru?      uint16\n       +--rw (ce-type)?\n\
    \          +--:(binding) {binding-mode}?\n          |  +--rw binding-ipv6info?\
    \       union\n          |  +--rw br-ipv6-addr            inet:ipv6-address\n\
    \          +--:(algo) {map-e or map-t}?\n             +--rw algo-instances\n \
    \               +--rw algo-instance* [name]\n                   +--rw name   \
    \             string\n                   +--rw enable?             boolean\n \
    \                  +--rw algo-versioning\n                   |  +--rw version?\
    \   uint64\n                   |  +--rw date?      yang:date-and-time\n      \
    \             +--rw (data-plane)?\n                   |  +--:(encapsulation) {map-e}?\n\
    \                   |  |  +--rw br-ipv6-addr        inet:ipv6-address\n      \
    \             |  +--:(translation) {map-t}?\n                   |     +--rw dmr-ipv6-prefix?\
    \    inet:ipv6-prefix\n                   +--rw ea-len              uint8\n  \
    \                 +--rw rule-ipv6-prefix    inet:ipv6-prefix\n               \
    \    +--rw rule-ipv4-prefix    inet:ipv4-prefix\n                   +--rw forwarding\
    \          boolean\n     augment /if:interfaces/if:interface/if:statistics:\n\
    \          +--ro sent-ipv4-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro sent-ipv4-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro sent-ipv6-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro sent-ipv6-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro rcvd-ipv4-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro rcvd-ipv4-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro rcvd-ipv6-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro rcvd-ipv6-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro dropped-ipv4-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro dropped-ipv4-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro dropped-ipv6-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro dropped-ipv6-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro dropped-ipv4-fragments?\n          |       yang:zero-based-counter64\n\
    \          +--ro dropped-ipv4-fragment-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro ipv6-fragments-reassembled?\n          |       yang:zero-based-counter64\n\
    \          +--ro ipv6-fragments-bytes-reassembled?\n          |       yang:zero-based-counter64\n\
    \          +--ro out-icmpv4-error-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro out-icmpv4-error-bytes?\n          |       yang:zero-based-counter64\n\
    \          +--ro out-icmpv6-error-packets?\n          |       yang:zero-based-counter64\n\
    \          +--ro out-icmpv6-error-bytes?\n                  yang:zero-based-counter64\n\
    \     notifications:\n       +---n softwire-ce-event {binding-mode}?\n       \
    \   +--ro ce-binding-ipv6-addr-change    inet:ipv6-address\n                 \
    \ Figure 1: Softwire CE YANG Tree Diagram\n"
- title: 4.2.  Softwire CE Tree Diagram Description
  contents:
  - "4.2.  Softwire CE Tree Diagram Description\n   Additional information related\
    \ to the operation of a CE element is\n   provided below:\n      softwire-payload-mtu:\n\
    \         optionally used to set the IPv4 Maximum Transmission Unit (MTU)\n  \
    \       for the softwire.  Needed if the softwire implementation is\n        \
    \ unable to correctly calculate the correct IPv4 MTU size\n         automatically.\n\
    \      softwire-path-mru:\n         optionally used to set the maximum IPv6 softwire\
    \ packet size\n         that can be received, including the encapsulation/translation\n\
    \         overhead.  Needed if the softwire implementation is unable to\n    \
    \     correctly calculate the correct IPv4 payload Maximum Receive\n         Unit\
    \ (MRU) size automatically (see Section 3.2 of [RFC4213]).\n      ce-type:\n \
    \        provides a choice statement allowing the binding or algorithmic\n   \
    \      softwire mechanisms to be selected.\n   Further details relevant to binding\
    \ softwire elements are as follows:\n      binding-ipv6info:\n         used to\
    \ set the IPv6 binding prefix type to identify which IPv6\n         address to\
    \ use as the tunnel source.  It can be 'ipv6-prefix'\n         or 'ipv6-address'.\n\
    \      br-ipv6-addr:\n         sets the IPv6 address of the remote BR.\n   Additional\
    \ details relevant to some of the important algorithmic\n   elements are provided\
    \ below:\n      algo-versioning:\n         optionally used to associate a version\
    \ number and/or timestamp\n         to the algorithm.  This can be used for logging/data\
    \ retention\n         purposes [RFC7422].  The version number is selected to uniquely\n\
    \         identify the algorithm configuration and a new value written\n     \
    \    whenever a change is made to the algorithm or a new algo-\n         instance\
    \ is created.\n      forwarding:\n         specifies whether the rule can be used\
    \ as a Forwarding Mapping\n         Rule (FMR).  If not set, this rule is a Basic\
    \ Mapping Rule\n         (BMR) only and must not be used for forwarding.  Refer\
    \ to\n         Section 4.1 of [RFC7598].\n      ea-len:\n         used to set\
    \ the length of the Embedded-Address (EA), which is\n         defined in the mapping\
    \ rule for a MAP domain.\n      data-plane:\n         provides a choice statement\
    \ for either encapsulation (MAP-E) or\n         translation (MAP-T).\n      br-ipv6-addr:\n\
    \         defines the IPv6 address of the BR.  This information is valid\n   \
    \      for MAP-E.\n      dmr-ipv6-prefix:\n         defines the Default Mapping\
    \ Rule (DMR) IPv6 prefix of the BR.\n         This information is valid for MAP-T.\n\
    \   Additional information on the notification node is listed below:\n      ce-binding-ipv6-addr-change:\n\
    \         if the CE's binding IPv6 address changes for any reason, the\n     \
    \    NETCONF client will be notified.\n"
- title: 5.  Softwire BR YANG Tree Diagram
  contents:
  - '5.  Softwire BR YANG Tree Diagram

    '
- title: 5.1.  BR Tree Diagram
  contents:
  - "5.1.  BR Tree Diagram\n   The BR YANG module provides configuration and monitoring\
    \ for all of\n   the softwire mechanisms covered in this document (i.e., Lightweight\n\
    \   4over6, MAP-E, and MAP-T).\n   Figure 2 provides the tree structure of this\
    \ module:\n   module: ietf-softwire-br\n     +--rw br-instances\n        +--rw\
    \ (br-type)?\n           +--:(binding) {binding-mode}?\n           |  +--rw binding\n\
    \           |     +--rw bind-instance* [name]\n           |        +--rw name\
    \                       string\n           |        +--rw binding-table-versioning\n\
    \           |        |  +--rw version?   uint64\n           |        |  +--rw\
    \ date?      yang:date-and-time\n           |        +--rw softwire-num-max  \
    \    uint32\n           |        +--rw softwire-payload-mtu       uint16\n   \
    \        |        +--rw softwire-path-mru           uint16\n           |     \
    \   +--rw enable-hairpinning?         boolean\n           |        +--rw binding-table\n\
    \           |        |  +--rw binding-entry* [binding-ipv6info]\n           |\
    \        |     +--rw binding-ipv6info     union\n           |        |     +--rw\
    \ binding-ipv4-addr?\n           |        |     +--rw port-set\n           | \
    \       |     +--rw br-ipv6-addr?\n           |        +--rw icmp-policy\n   \
    \        |        |  +--rw icmpv4-errors\n           |        |  |  +--rw allow-incoming-icmpv4?\
    \    boolean\n           |        |  |  +--rw icmpv4-rate?              uint32\n\
    \           |        |  |  +--rw generate-icmpv4-errors?   boolean\n         \
    \  |        |  +--rw icmpv6-errors\n           |        |     +--rw generate-icmpv6-errors?\
    \   boolean\n           |        |     +--rw icmpv6-rate?              uint32\n\
    \           |        +--ro traffic-stat\n           |           +--ro discontinuity-time\
    \   yang:date-and-time\n           |           +--ro sent-ipv4-packets?\n    \
    \       |           |       yang:zero-based-counter64\n           |          \
    \ +--ro sent-ipv4-bytes?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro sent-ipv6-packets?\n           |           |   \
    \    yang:zero-based-counter64\n           |           +--ro sent-ipv6-bytes?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro rcvd-ipv4-packets?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro rcvd-ipv4-bytes?\n           |           |     \
    \  yang:zero-based-counter64\n           |           +--ro rcvd-ipv6-packets?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro rcvd-ipv6-bytes?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro dropped-ipv4-packets?\n           |           |\
    \       yang:zero-based-counter64\n           |           +--ro dropped-ipv4-bytes?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro dropped-ipv6-packets?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro dropped-ipv6-bytes?\n           |           |  \
    \     yang:zero-based-counter64\n           |           +--ro dropped-ipv4-fragments?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro dropped-ipv4-fragment-bytes?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro ipv6-fragments-reassembled?\n           |      \
    \     |       yang:zero-based-counter64\n           |           +--ro ipv6-fragments-bytes-reassembled?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro out-icmpv4-error-packets?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro out-icmpv4-error-bytes?\n           |          \
    \ |       yang:zero-based-counter64\n           |           +--ro out-icmpv6-error-packets?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro out-icmpv6-error-bytes?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro dropped-icmpv4-packets?\n           |          \
    \ |       yang:zero-based-counter64\n           |           +--ro dropped-icmpv4-bytes?\n\
    \           |           |       yang:zero-based-counter64\n           |      \
    \     +--ro hairpin-ipv4-packets?\n           |           |       yang:zero-based-counter64\n\
    \           |           +--ro hairpin-ipv4-bytes?\n           |           |  \
    \     yang:zero-based-counter64\n           |           +--ro active-softwire-num?\n\
    \           |                   uint32\n           +--:(algo) {map-e or map-t}?\n\
    \              +--rw algorithm\n                 +--rw algo-instance* [name]\n\
    \                    +--rw name                string\n                    +--rw\
    \ enable?             boolean\n                    +--rw algo-versioning\n   \
    \                 |  +--rw version?   uint64\n                    |  +--rw date?\
    \      yang:date-and-time\n                    +--rw (data-plane)?\n         \
    \           |  +--:(encapsulation) {map-e}?\n                    |  |  +--rw br-ipv6-addr\
    \        inet:ipv6-address\n                    |  +--:(translation) {map-t}?\n\
    \                    |     +--rw dmr-ipv6-prefix?    inet:ipv6-prefix\n      \
    \              +--rw ea-len              uint8\n                    +--rw rule-ipv6-prefix\
    \    inet:ipv6-prefix\n                    +--rw rule-ipv4-prefix    inet:ipv4-prefix\n\
    \                    +--rw forwarding          boolean\n                    +--rw\
    \ port-set\n                    |  +--rw psid-offset?   uint8\n              \
    \      |  +--rw psid-len       uint8\n                    |  +--rw psid      \
    \     uint16\n                    +--ro traffic-stat\n                       +--ro\
    \ discontinuity-time   yang:date-and-time\n                       +--ro sent-ipv4-packets?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro sent-ipv4-bytes?\n                       |       yang:zero-based-counter64\n\
    \                       +--ro sent-ipv6-packets?\n                       |   \
    \    yang:zero-based-counter64\n                       +--ro sent-ipv6-bytes?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro rcvd-ipv4-packets?\n                       |       yang:zero-based-counter64\n\
    \                       +--ro rcvd-ipv4-bytes?\n                       |     \
    \  yang:zero-based-counter64\n                       +--ro rcvd-ipv6-packets?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro rcvd-ipv6-bytes?\n                       |       yang:zero-based-counter64\n\
    \                       +--ro dropped-ipv4-packets?\n                       |\
    \       yang:zero-based-counter64\n                       +--ro dropped-ipv4-bytes?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro dropped-ipv6-packets?\n                       |       yang:zero-based-counter64\n\
    \                       +--ro dropped-ipv6-bytes?\n                       |  \
    \     yang:zero-based-counter64\n                       +--ro dropped-ipv4-fragments?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro dropped-ipv4-fragment-bytes?\n                       |       yang:zero-based-counter64\n\
    \                       +--ro ipv6-fragments-reassembled?\n                  \
    \     |       yang:zero-based-counter64\n                       +--ro ipv6-fragments-bytes-reassembled?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro out-icmpv4-error-packets?\n                       |       yang:zero-based-counter64\n\
    \                       +--ro out-icmpv4-error-bytes?\n                      \
    \ |       yang:zero-based-counter64\n                       +--ro out-icmpv6-error-packets?\n\
    \                       |       yang:zero-based-counter64\n                  \
    \     +--ro out-icmpv6-error-bytes?\n                               yang:zero-based-counter64\n\
    \     notifications:\n       +---n softwire-binding-instance-event {binding-mode}?\n\
    \       |  +--ro bind-name?\n       |  |       -> /br-instances/binding/bind-instance/name\n\
    \       |  +--ro invalid-entry*    leafref\n       |  +--ro added-entry*     \
    \ inet:ipv6-address\n       |  +--ro modified-entry*   leafref\n       +---n softwire-algorithm-instance-event\
    \  {map-e, map-t}?\n          +--ro algo-name\n          |       -> /br-instances/algorithm/algo-instance/name\n\
    \          +--ro invalid-entry-id*\n          |       -> /br-instances/algorithm/algo-instance/name\n\
    \          +--ro added-entry*\n          |       -> /br-instances/algorithm/algo-instance/name\n\
    \          +--ro modified-entry*\n                  -> /br-instances/algorithm/algo-instance/name\n\
    \                      Figure 2: Softwire BR YANG Tree\n"
- title: 5.2.  Softwire BR Tree Diagram Description
  contents:
  - "5.2.  Softwire BR Tree Diagram Description\n   The descriptions for leaves that\
    \ are common with the CE module are\n   provided in Section 4.2.  Descriptions\
    \ for additional elements are\n   provided below:\n      binding-table-versioning:\n\
    \         optionally used to associate a version number and/or timestamp\n   \
    \      to the binding table.  This can be used for logging or data\n         retention\
    \ purposes [RFC7422].  The version number is selected\n         to uniquely identify\
    \ the binding table configuration and a new\n         timestamp value written\
    \ whenever a change is made to the\n         contents of the binding table or\
    \ a new binding table list is\n         created.\n      binding-entry:\n     \
    \    used to define the binding relationship between 3-tuples\n         {lwB4's\
    \ IPv6 address/prefix, the allocated IPv4 address,\n         restricted port-set}.\
    \  For detailed information, please refer\n         to [RFC7596].\n      softwire-num-max:\n\
    \         used to set the maximum number of softwire binding rules that\n    \
    \     can be created on the lw4o6 element simultaneously.  This\n         parameter\
    \ must not be set to zero because this is equivalent to\n         disabling the\
    \ BR instance.\n      active-softwire-num:\n         holds the number of softwires\
    \ currently provisioned on the BR\n         element.\n   Additional information\
    \ on some of the important notification nodes is\n   listed below:\n      invalid-entry,\
    \ added-entry, modified-entry:\n         used to notify the NETCONF client that\
    \ a specific binding entry\n         or MAP rule has expired, been invalidated,\
    \ added, or modified.\n"
- title: 6.  Softwire CE YANG Module
  contents:
  - "6.  Softwire CE YANG Module\n   This module imports the modules defined in [RFC6991],\
    \ [RFC8343], and\n   [RFC7224].  It also imports the 'ietf-softwire-common' and\
    \ 'iana-\n   tunnel-type' modules [RFC8675].\n   <CODE BEGINS> file \"ietf-softwire-ce@2019-11-16.yang\"\
    \n   module ietf-softwire-ce {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-softwire-ce\"\
    ;\n     prefix softwire-ce;\n     import ietf-inet-types {\n       prefix inet;\n\
    \       reference\n         \"RFC 6991: Common YANG Data Types, Section 4\";\n\
    \     }\n     import ietf-interfaces {\n       prefix if;\n       reference\n\
    \         \"RFC 8343: A YANG Data Model for Interface Management\";\n     }\n\
    \     import ietf-softwire-common {\n       prefix softwire-common;\n       reference\n\
    \         \"RFC 8676: YANG Modules for IPv4-in-IPv6 Address plus Port\n      \
    \    Softwires\";\n     }\n     import iana-tunnel-type {\n       prefix iana-tunnel-type;\n\
    \       reference\n         \"RFC 8675: A YANG Data Model for Tunnel Interface\
    \ Types\";\n     }\n     organization\n       \"IETF Softwire Working Group\"\
    ;\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/softwire/>\n\
    \        WG List:  <mailto:softwire@ietf.org>\n        Author:  Qi Sun\n     \
    \            <mailto:sunqi.ietf@gmail.com>\n        Author:  Linhui Sun\n    \
    \             <mailto:lh.sunlinh@gmail.com>\n        Author:  Yong Cui\n     \
    \            <mailto:yong@csnet1.cs.tsinghua.edu.cn>\n        Editor:  Ian Farrer\n\
    \                 <mailto:ian.farrer@telekom.de>\n        Author:  Sladjana Zoric\n\
    \                 <mailto:sladjana.zoric@telekom.de>\n        Editor:  Mohamed\
    \ Boucadair\n                 <mailto:mohamed.boucadair@orange.com>\n        Author:\
    \  Rajiv Asati\n                  <mailto:rajiva@cisco.com>\";\n     description\n\
    \       \"This document defines a YANG module for the configuration and\n    \
    \    management of A+P Softwire Customer Premises Equipment (CEs).\n        It\
    \ covers Lightweight 4over6, MAP-E, and MAP-T mechanisms.\n        Copyright (c)\
    \ 2019 IETF Trust and the persons identified as\n        authors of the code.\
    \  All rights reserved.\n        Redistribution and use in source and binary forms,\
    \ with or\n        without modification, is permitted pursuant to, and subject\n\
    \        to the license terms contained in, the Simplified BSD License\n     \
    \   set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating\
    \ to IETF Documents\n        (http://trustee.ietf.org/license-info).\n       \
    \ This version of this YANG module is part of RFC 8676; see\n        the RFC itself\
    \ for full legal notices.\";\n     revision 2019-11-16 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8676: YANG\
    \ Modules for IPv4-in-IPv6 Address plus Port\n          (A+P) Softwires\";\n \
    \    }\n     /*\n      * Features\n      */\n     feature binding-mode {\n   \
    \    description\n         \"Binding is used for configuring the Lightweight 4over6\n\
    \          mechanism.\n          Binding-based softwire mechanisms are IPv4-over-IPv6\
    \ tunneling\n          transition mechanisms specifically intended for complete\n\
    \          independence between the IPv6 subnet prefix (and IPv6 address)\n  \
    \        and IPv4 address, with or without IPv4 address sharing.\n          This\
    \ is accomplished by maintaining state for each softwire\n          (per-subscriber\
    \ state) in the central Border Relay (BR) and\n          using a hub-and-spoke\
    \ forwarding architecture.  In order to\n          delegate the NAPT function\
    \ and achieve IPv4 address sharing,\n          port-restricted IPv4 addresses\
    \ needs to be allocated to CEs.\n          This feature indicates that the network\
    \ element can function\n          as one or more binding-based softwire instances.\"\
    ;\n       reference\n         \"RFC 7596: Lightweight 4over6: An Extension to\
    \ the Dual-Stack\n          Lite Architecture\n          RFC 7597: Mapping of\
    \ Address and Port with Encapsulation\n          (MAP-E)\n          RFC 7599:\
    \ Mapping of Address and Port using Translation\n          (MAP-T)\";\n     }\n\
    \     feature map-e {\n       description\n         \"MAP-E is an IPv6 transition\
    \ mechanism for transporting IPv4\n          packets across an IPv6 network using\
    \ IP encapsulation.  MAP-E\n          allows for a reduction of the amount of\
    \ centralized state\n          using rules to express IPv4/IPv6 address mappings.\
    \  This\n          introduces an algorithmic relationship between the IPv6\n \
    \         subnet and IPv4 address.\n          This feature indicates that the\
    \ network element can function\n          as one or more MAP-E softwire instances.\"\
    ;\n       reference\n         \"RFC 7597: Mapping of Address and Port with\n \
    \         Encapsulation (MAP-E)\";\n     }\n     feature map-t {\n       description\n\
    \         \"MAP-T is an IPv6 transition mechanism for transporting IPv4\n    \
    \      packets across an IPv6 network using IP translation.  It\n          leverages\
    \ a double stateless NAT64-based solution as well as\n          the stateless\
    \ algorithmic address and transport layer port\n          mapping algorithm defined\
    \ for MAP-E.\n          This feature indicates that the network element can function\n\
    \          as one or more MAP-T softwire instances.\";\n       reference\n   \
    \      \"RFC 7599: Mapping of Address and Port using Translation\n          (MAP-T)\"\
    ;\n     }\n     // Binding Entry\n     grouping binding-entry {\n       description\n\
    \         \"The binding BR (Border Relay) maintains an address\n          binding\
    \ table that contains the binding between the CE's\n          IPv6 address, the\
    \ allocated IPv4 address, and the\n          restricted port-set.\";\n       leaf\
    \ binding-ipv6info {\n         type union {\n           type inet:ipv6-address;\n\
    \           type inet:ipv6-prefix;\n         }\n         description\n       \
    \    \"The IPv6 information for a binding entry.\n            When the IPv6 prefix\
    \ type is used,\n            the IPv6 source address of the CE is constructed\n\
    \            according to the description in RFC 7596.\n            If the IPv6\
    \ address type is used, the CE can use\n            any valid /128 address from\
    \ a prefix assigned to\n            the CE.\";\n         reference\n         \
    \  \"RFC 7596: Lightweight 4over6: An Extension\n            to the Dual-Stack\
    \ Lite Architecture, Section 5.1\";\n       }\n       leaf br-ipv6-addr {\n  \
    \       type inet:ipv6-address;\n         mandatory true;\n         description\n\
    \           \"The IPv6 address of the binding BR.\";\n       }\n     }\n     //\
    \ configuration and stateful parameters for softwire CE interface\n     augment\
    \ \"/if:interfaces/if:interface\" {\n       when \"derived-from(if:type, 'iana-tunnel-type:aplusp')\"\
    ;\n       description\n         \"Softwire CE interface configuration\";\n   \
    \    leaf softwire-payload-mtu {\n         type uint16;\n         units \"bytes\"\
    ;\n         description\n           \"The payload IPv4 MTU for the softwire tunnel.\"\
    ;\n       }\n       leaf softwire-path-mru {\n         type uint16;\n        \
    \ units \"bytes\";\n         description\n           \"The path MRU for the softwire\
    \ (payload + encapsulation\n            overhead).\";\n         reference\n  \
    \         \"RFC 4213: Basic Transition Mechanisms for IPv6 Hosts and\n       \
    \     Routers\";\n       }\n       choice ce-type {\n         description\n  \
    \         \"Sets the softwire CE mechanism\";\n         case binding {\n     \
    \      if-feature \"binding-mode\";\n           description\n             \"CE\
    \ binding configuration\";\n           uses binding-entry;\n         }\n     \
    \    case algo {\n           if-feature \"map-e or map-t\";\n           description\n\
    \             \"CE algorithm configuration\";\n           container algo-instances\
    \ {\n             description\n               \"Collection of MAP-E/MAP-T parameters\"\
    ;\n             list algo-instance {\n               key \"name\";\n         \
    \      description\n                 \"MAP forwarding rule instance for\n    \
    \              MAP-E/MAP-T\";\n               leaf name {\n                 type\
    \ string;\n                 mandatory true;\n                 description\n  \
    \                 \"The name is used to uniquely identify an algorithm\n     \
    \               instance.\n                    This name can be automatically\
    \ assigned\n                    or explicitly configured.\";\n               }\n\
    \               uses softwire-common:algorithm-instance;\n             }\n   \
    \        }\n         }\n       }\n     }\n     augment \"/if:interfaces/if:interface/if:statistics\"\
    \ {\n       when \"derived-from(../if:type, 'iana-tunnel-type:aplusp')\";\n  \
    \     description\n         \"Softwire CE interface statistics.\";\n       uses\
    \ softwire-common:traffic-stat;\n     }\n     /*\n      * Notifications\n    \
    \  */\n     notification softwire-ce-event {\n       if-feature \"binding-mode\"\
    ;\n       description\n         \"CE notification\";\n       leaf ce-binding-ipv6-addr-change\
    \ {\n         type inet:ipv6-address;\n         mandatory true;\n         description\n\
    \           \"This notification is generated whenever the CE's binding\n     \
    \       IPv6 address changes for any reason.\";\n       }\n     }\n   }\n   <CODE\
    \ ENDS>\n"
- title: 7.  BR Softwire YANG Module
  contents:
  - "7.  BR Softwire YANG Module\n   This module imports typedefs from [RFC6991].\
    \  It also imports the\n   'ietf-softwire-common' module.\n   <CODE BEGINS> file\
    \ \"ietf-softwire-br@2019-11-16.yang\"\n   module ietf-softwire-br {\n     yang-version\
    \ 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-softwire-br\";\n   \
    \  prefix softwire-br;\n     import ietf-inet-types {\n       prefix inet;\n \
    \      reference\n         \"RFC 6991: Common YANG Data Types, Section 4\";\n\
    \     }\n     import ietf-yang-types {\n       prefix yang;\n       reference\n\
    \         \"RFC 6991: Common YANG Data Types, Section 3\";\n     }\n     import\
    \ ietf-softwire-common {\n       prefix softwire-common;\n       reference\n \
    \        \"RFC 8676: YANG Modules for IPv4-in-IPv6 Address plus Port\n       \
    \   (A+P) Softwires\";\n     }\n     organization\n       \"IETF Softwire Working\
    \ Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/softwire/>\n\
    \        WG List:  <mailto:softwire@ietf.org>\n        Author:  Qi Sun\n     \
    \            <mailto:sunqi.ietf@gmail.com>\n        Author:  Linhui Sun\n    \
    \             <mailto:lh.sunlinh@gmail.com>\n        Author:  Yong Cui\n     \
    \            <mailto:yong@csnet1.cs.tsinghua.edu.cn>\n        Editor:  Ian Farrer\n\
    \                 <mailto:ian.farrer@telekom.de>\n        Author:  Sladjana Zoric\n\
    \                 <mailto:sladjana.zoric@telekom.de>\n        Editor:  Mohamed\
    \ Boucadair\n                 <mailto:mohamed.boucadair@orange.com>\n        Author:\
    \  Rajiv Asati\n                  <mailto:rajiva@cisco.com>\";\n     description\n\
    \       \"This document defines a YANG module for the configuration and\n    \
    \    management of A+P Softwire Border Routers.  It covers\n        Lightweight\
    \ 4over6, MAP-E, and MAP-T mechanisms.\n        Copyright (c) 2019 IETF Trust\
    \ and the persons identified as\n        authors of the code.  All rights reserved.\n\
    \        Redistribution and use in source and binary forms, with or\n        without\
    \ modification, is permitted pursuant to, and subject\n        to the license\
    \ terms contained in, the Simplified BSD License\n        set forth in Section\
    \ 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n\
    \        (http://trustee.ietf.org/license-info).\n        This version of this\
    \ YANG module is part of RFC 8676; see\n        the RFC itself for full legal\
    \ notices.\";\n     revision 2019-11-16 {\n       description\n         \"Initial\
    \ revision.\";\n       reference\n         \"RFC 8676: YANG Modules for IPv4-in-IPv6\
    \ Address plus Port\n          (A+P) Softwires\";\n     }\n     /*\n      * Groupings\n\
    \      */\n     grouping port-set {\n       description\n         \"Describes\
    \ a set of Layer 4 port numbers.\n          This may be a simple port range, or\
    \ use the Port Set\n          Identifier (PSID) algorithm to represent a range\
    \ of transport\n          layer ports that will be used by a NAPT.\";\n      \
    \ leaf psid-offset {\n         type uint8 {\n           range \"0..16\";\n   \
    \      }\n         description\n           \"The number of offset bits.  In Lightweight\
    \ 4over6,\n            the default value is 0 for assigning one contiguous\n \
    \           port range.  In MAP-E/T, the default value is 6,\n            which\
    \ means the system ports (0-1023) are excluded by\n            default and the\
    \ assigned port ranges are distributed across\n            the entire port space,\
    \ depending on either psid-len or the\n            number of contiguous ports.\"\
    ;\n       }\n       leaf psid-len {\n         type uint8 {\n           range \"\
    0..15\";\n         }\n         mandatory true;\n         description\n       \
    \    \"The length of PSID, representing the sharing\n            ratio for an\
    \ IPv4 address.  This, along with ea-len, can\n            be used to calculate\
    \ the number of contiguous ports per\n            port range\";\n       }\n  \
    \     leaf psid {\n         type uint16;\n         mandatory true;\n         description\n\
    \           \"Port Set Identifier (PSID) value, which\n            identifies\
    \ a set of ports algorithmically.\";\n       }\n     }\n     grouping binding-entry\
    \ {\n       description\n         \"The binding BR maintains an address binding\
    \ table that\n          contains the binding between the CE's IPv6 address,\n\
    \          the allocated IPv4 address and restricted port-set.\";\n       leaf\
    \ binding-ipv6info {\n         type union {\n           type inet:ipv6-address;\n\
    \           type inet:ipv6-prefix;\n         }\n         description\n       \
    \    \"The IPv6 information for a CE binding entry.\n            When the IPv6\
    \ prefix type is used,\n            the IPv6 source address of the CE is constructed\n\
    \            according to the description in RFC 7596;\n            if the IPv6\
    \ address type is used, the CE can use\n            any valid /128 address from\
    \ a prefix assigned to\n            the CE.\";\n         reference\n         \
    \  \"RFC 7596: Lightweight 4over6: An Extension to the Dual-Stack\n          \
    \  Lite Architecture\";\n       }\n       leaf binding-ipv4-addr {\n         type\
    \ inet:ipv4-address;\n         description\n           \"The IPv4 address assigned\
    \ to the binding CE,\n            which is used as the IPv4 external address\n\
    \            for binding CE local NAPT44.\";\n       }\n       container port-set\
    \ {\n         description\n           \"For Lightweight 4over6, the default value\n\
    \            for offset should be 0, to configure one contiguous\n           \
    \ port range.\";\n         uses port-set {\n           refine \"psid-offset\"\
    \ {\n             default \"0\";\n           }\n         }\n       }\n       leaf\
    \ br-ipv6-addr {\n         type inet:ipv6-address;\n         description\n   \
    \        \"The IPv6 address for binding BR.\";\n       }\n     }\n     /*\n  \
    \    * Features\n      */\n     feature binding-mode {\n       description\n \
    \        \"Binding is used for configuring the Lightweight 4over6\n          mechanism.\n\
    \          Binding-based softwire mechanisms are IPv4-over-IPv6 tunneling\n  \
    \        transition mechanisms specifically intended for complete\n          independence\
    \ between the IPv6 subnet prefix (and IPv6 address)\n          and IPv4 address,\
    \ with or without IPv4 address sharing.\n          This is accomplished by maintaining\
    \ state for each softwire\n          (per-subscriber state) in the central Border\
    \ Relay (BR) and\n          using a hub-and-spoke forwarding architecture.  In\
    \ order to\n          delegate the NAPT function and achieve IPv4 address sharing,\n\
    \          port-restricted IPv4 addresses needs to be allocated to CEs.\n    \
    \      This feature indicates that the network element can function\n        \
    \  as one or more binding-based softwire instances.\";\n       reference\n   \
    \      \"RFC 7596: Lightweight 4over6: An Extension to the Dual-Stack\n      \
    \    Lite Architecture\n          RFC 7597: Mapping of Address and Port with Encapsulation\n\
    \          (MAP-E)\n          RFC 7599: Mapping of Address and Port using Translation\n\
    \          (MAP-T)\";\n     }\n     feature map-e {\n       description\n    \
    \     \"MAP-E is an IPv6 transition mechanism for transporting IPv4\n        \
    \  packets across an IPv6 network using IP encapsulation.  MAP-E\n          allows\
    \ for a reduction of the amount of centralized state\n          using rules to\
    \ express IPv4/IPv6 address mappings.  This\n          introduces an algorithmic\
    \ relationship between the IPv6 subnet\n          and IPv4 address.\n        \
    \  This feature indicates that the network element can function\n          as\
    \ one or more MAP-E softwire instances.\";\n       reference\n         \"RFC 7597:\
    \ Mapping of Address and Port with Encapsulation\n          (MAP-E)\";\n     }\n\
    \     feature map-t {\n       description\n         \"MAP-T is an IPv6 transition\
    \ mechanism for transporting IPv4\n          packets across an IPv6 network using\
    \ IP translation.  It\n          leverages a double stateless NAT64-based solution\
    \ as well\n          as the stateless algorithmic address and transport layer\n\
    \          port mapping algorithm defined for MAP-E.\n          This feature indicates\
    \ that the network element can function\n          as one or more MAP-T softwire\
    \ instances.\";\n       reference\n         \"RFC 7599: Mapping of Address and\
    \ Port using Translation\n          (MAP-T)\";\n     }\n     container br-instances\
    \ {\n       description\n         \"BR instances enabled in a network element.\"\
    ;\n       choice br-type {\n         description\n           \"Select binding\
    \ or algorithmic BR functionality.\";\n         case binding {\n           if-feature\
    \ \"binding-mode\";\n           container binding {\n             description\n\
    \               \"binding mechanism (binding table) configuration.\";\n      \
    \       list bind-instance {\n               key \"name\";\n               description\n\
    \                 \"A set of binding instances to be configured.\";\n        \
    \       leaf name {\n                 type string;\n                 mandatory\
    \ true;\n                 description\n                   \"The name for the binding\
    \ BR.  It is used to uniquely\n                    distinguish a binding instance\
    \ by its name.\";\n               }\n               container binding-table-versioning\
    \ {\n                 description\n                   \"binding table's version\"\
    ;\n                 leaf version {\n                   type uint64;\n        \
    \           description\n                     \"Version number for this binding\
    \ table.\";\n                 }\n                 leaf date {\n              \
    \     type yang:date-and-time;\n                   description\n             \
    \        \"Timestamp when the binding table was activated.\n                 \
    \     A binding instance may be provided with binding\n                      entries\
    \ that may change in time (e.g., increase\n                      the size of the\
    \ port set).  When a party who is\n                      the victim of abuse presents\
    \ an external IP\n                      address/port, the version of the binding\
    \ table\n                      is important because, depending on the version,\n\
    \                      a distinct customer may be identified.\n              \
    \        The timestamp is used as a key to find the\n                      appropriate\
    \ binding table that was put into effect\n                      when an abuse\
    \ occurred.\";\n                   reference\n                     \"RFC 7422:\
    \ Deterministic Address Mapping to Reduce\n                      Logging in Carrier-Grade\
    \ NAT Deployments\";\n                 }\n               }\n               leaf\
    \ softwire-num-max {\n                 type uint32 {\n                   range\
    \ \"1..max\";\n                 }\n                 mandatory true;\n        \
    \         description\n                   \"The maximum number of softwires that\
    \ can be created\n                    on the binding BR.\";\n               }\n\
    \               leaf softwire-payload-mtu {\n                 type uint16;\n \
    \                units \"bytes\";\n                 mandatory true;\n        \
    \         description\n                   \"The payload IPv4 MTU for binding softwire.\"\
    ;\n               }\n               leaf softwire-path-mru {\n               \
    \  type uint16;\n                 units \"bytes\";\n                 mandatory\
    \ true;\n                 description\n                   \"The path MRU for binding\
    \ softwire\";\n                 reference\n                   \"RFC 4213: Basic\
    \ Transition Mechanisms for IPv6 Hosts\n                              and Routers\"\
    ;\n               }\n               leaf enable-hairpinning {\n              \
    \   type boolean;\n                 default \"true\";\n                 description\n\
    \                   \"Enables/disables support for locally forwarding\n      \
    \              (hairpinning) traffic between two CEs\";\n                 reference\n\
    \                   \"RFC 7596: Lightweight 4over6: An Extension to\n        \
    \            the Dual-Stack Lite Architecture, Section 6.2\";\n              \
    \ }\n               container binding-table {\n                 description\n\
    \                   \"binding table\";\n                 list binding-entry {\n\
    \                   key \"binding-ipv6info\";\n                   description\n\
    \                     \"binding entry\";\n                   uses binding-entry;\n\
    \                 }\n               }\n               container icmp-policy {\n\
    \                 description\n                   \"The binding BR can be configured\
    \ to process or drop\n                    incoming ICMP messages and to generate\
    \ outgoing ICMP\n                    error messages.\";\n                 container\
    \ icmpv4-errors {\n                   description\n                     \"ICMPv4\
    \ error processing configuration\";\n                   leaf allow-incoming-icmpv4\
    \ {\n                     type boolean;\n                     default \"true\"\
    ;\n                     description\n                       \"Enables the processing\
    \ of incoming ICMPv4\n                        packets.\";\n                  \
    \   reference\n                       \"RFC 7596: Lightweight 4over6: An Extension\
    \ to\n                        the Dual-Stack Lite Architecture\";\n          \
    \         }\n                   leaf icmpv4-rate {\n                     type\
    \ uint32;\n                     description\n                       \"Rate limit\
    \ threshold in messages per second\n                        for processing incoming\
    \ ICMPv4 errors messages\";\n                   }\n                   leaf generate-icmpv4-errors\
    \ {\n                     type boolean;\n                     default \"true\"\
    ;\n                     description\n                       \"Enables the generation\
    \ of outgoing ICMPv4 error\n                        messages on receipt of an\
    \ inbound IPv4 packet\n                        with no matching binding table\
    \ entry.\";\n                     reference\n                       \"RFC 7596:\
    \ Lightweight 4over6:\n                        An Extension to the Dual-Stack\
    \ Lite\n                        Architecture, Section 5.2\";\n               \
    \    }\n                 }\n                 container icmpv6-errors {\n     \
    \              description\n                     \"ICMPv6 error processing configuration\"\
    ;\n                   leaf generate-icmpv6-errors {\n                     type\
    \ boolean;\n                     default \"true\";\n                     description\n\
    \                       \"Enables the generation of ICMPv6 error messages\n  \
    \                      if no matching binding table entry is found for\n     \
    \                   a received packet.\";\n                     reference\n  \
    \                     \"RFC 7596: Lightweight 4over6:\n                      \
    \  An Extension to the Dual-Stack Lite\n                        Architecture,\
    \ Section 6.2\";\n                   }\n                   leaf icmpv6-rate {\n\
    \                     type uint32;\n                     description\n       \
    \                \"Rate limit threshold in messages per second\n             \
    \           for sending ICMPv6 errors messages\";\n                     reference\n\
    \                       \"RFC 7596: Lightweight 4over6: An Extension\n       \
    \                 to the Dual-Stack Lite Architecture, Section 9\";\n        \
    \           }\n                 }\n               }\n               container\
    \ traffic-stat {\n                 config false;\n                 description\n\
    \                   \"Traffic statistics information for the BR.\";\n        \
    \         leaf discontinuity-time {\n                   type yang:date-and-time;\n\
    \                   mandatory true;\n                   description\n        \
    \             \"The time of the most recent occasion on which the\n          \
    \            BR instance suffered a discontinuity.  This must\n              \
    \        be initialized when the BR instance is configured\n                 \
    \     or rebooted.\";\n                 }\n                 uses softwire-common:traffic-stat;\n\
    \                 leaf dropped-icmpv4-packets {\n                   type yang:zero-based-counter64;\n\
    \                   description\n                     \"ICMPv4 packets that are\
    \ dropped as a result\n                      of the ICMP policy.  Typically, this\
    \ can be any\n                      incoming ICMPv4 packets if ICMPv4 processing\
    \ is\n                      disabled or incoming ICMPv4 packets that exceed\n\
    \                      the ICMPv4 rate-limit threshold.\n                    \
    \  Discontinuities in the value of this counter can\n                      occur\
    \ at re-initialization of the management\n                      system and at\
    \ other times as indicated by\n                      the value of 'discontinuity-time'.\"\
    ;\n                 }\n                 leaf dropped-icmpv4-bytes {\n        \
    \           type yang:zero-based-counter64;\n                   description\n\
    \                     \"ICMPv4 messages, in bytes, that are dropped as\n     \
    \                 a result of the ICMP policy.  Typically, it\n              \
    \        can be any incoming ICMPv4 packets if ICMPv4\n                      processing\
    \ is disabled or incoming ICMPv4\n                      packets that exceed the\
    \ ICMPv4 rate-limit\n                      threshold.\n                      Discontinuities\
    \ in the value of this counter can\n                      occur at re-initialization\
    \ of the management\n                      system and at other times as indicated\
    \ by\n                      the value of 'discontinuity-time'.\";\n          \
    \       }\n                 leaf hairpin-ipv4-packets {\n                   type\
    \ yang:zero-based-counter64;\n                   description\n               \
    \      \"IPv4 packets locally routed between two CEs\n                      (hairpinned).\n\
    \                      Discontinuities in the value of this counter can\n    \
    \                  occur at re-initialization of the management\n            \
    \          system and at other times as indicated by\n                      the\
    \ value of 'discontinuity-time'.\";\n                 }\n                 leaf\
    \ hairpin-ipv4-bytes {\n                   type yang:zero-based-counter64;\n \
    \                  description\n                     \"IPv4 bytes locally routed\
    \ between two CEs\n                      (hairpinned).\n                     \
    \ Discontinuities in the value of this counter can\n                      occur\
    \ at re-initialization of the management\n                      system and at\
    \ other times as indicated by\n                      the value of 'discontinuity-time'.\"\
    ;\n                 }\n                 leaf active-softwire-num {\n         \
    \          type uint32;\n                   config false;\n                  \
    \ description\n                     \"The number of currently active softwires\
    \ on the\n                      binding instance.\n                      Discontinuities\
    \ in the value of this counter can\n                      occur at re-initialization\
    \ of the management\n                      system and at other times as indicated\
    \ by\n                      the value of 'discontinuity-time'.\";\n          \
    \       }\n               }\n             }\n           }\n         }\n      \
    \   case algo {\n           if-feature \"map-e or map-t\";\n           container\
    \ algorithm {\n             description\n               \"A set of parameters\
    \ used for MAP-E/MAP-T\";\n             list algo-instance {\n               key\
    \ \"name\";\n               description\n                 \"Instances of algorithm\"\
    ;\n               leaf name {\n                 type string;\n               \
    \  mandatory true;\n                 description\n                   \"The name\
    \ is used to uniquely identify an algorithm\n                    instance.\n \
    \                   This name can be automatically assigned\n                \
    \    or explicitly configured.\";\n               }\n               uses softwire-common:algorithm-instance;\n\
    \               container port-set {\n                 description\n         \
    \          \"Indicates a set of ports.\";\n                 uses port-set;\n \
    \              }\n               container traffic-stat {\n                 config\
    \ false;\n                 description\n                   \"Traffic statistics\
    \ information for the BR.\";\n                 leaf discontinuity-time {\n   \
    \                type yang:date-and-time;\n                   mandatory true;\n\
    \                   description\n                     \"The time of the most recent\
    \ occasion on which the\n                      BR instance suffered a discontinuity.\
    \  This must\n                      be reset to the current date-and-time when\
    \ the BR\n                      instance is configured or rebooted.\";\n     \
    \            }\n                 uses softwire-common:traffic-stat;\n        \
    \       }\n             }\n           }\n         }\n       }\n     }\n     /*\n\
    \      * Notifications\n      */\n     notification softwire-binding-instance-event\
    \ {\n       if-feature \"binding-mode\";\n       description\n         \"Notifications\
    \ for the binding instance when an entry is\n          added, modified, or is\
    \ not valid anymore.\";\n       leaf bind-name {\n         type leafref {\n  \
    \         path \"/br-instances/binding/bind-instance/name\";\n         }\n   \
    \      description\n           \"The name of the binding-instance that\n     \
    \       generated the notification.\";\n       }\n       leaf-list invalid-entry\
    \ {\n         type leafref {\n           path \"/br-instances/binding/\"\n   \
    \           + \"bind-instance[name=current()/../bind-name]/\"\n              +\
    \ \"binding-table/binding-entry/binding-ipv6info\";\n         }\n         description\n\
    \           \"Notify the client that a specific binding entry has\n          \
    \  expired or is invalid.  The binding-ipv6info identifies\n            an entry.\"\
    ;\n       }\n       leaf-list added-entry {\n         type inet:ipv6-address;\n\
    \         description\n           \"Notify the client that a binding entry has\
    \ been added.\n            The IPv6 address of that entry is the index.  The client\n\
    \            gets other information from the binding BR about the entry\n    \
    \        indexed by that ipv6 address.\";\n       }\n       leaf-list modified-entry\
    \ {\n         type leafref {\n           path \"/br-instances/binding/\"\n   \
    \           + \"bind-instance[name=current()/../bind-name]/\"\n              +\
    \ \"binding-table/binding-entry/binding-ipv6info\";\n         }\n         description\n\
    \           \"The binding table entry that has been modified.\";\n       }\n \
    \    }\n     notification softwire-algorithm-instance-event {\n       if-feature\
    \ \"map-e or map-t\";\n       description\n         \"Notifications for an algorithm\
    \ instance when an entry is\n          added, modified, or is not valid anymore.\"\
    ;\n       leaf algo-name {\n         type leafref {\n           path \"/br-instances/algorithm/algo-instance/name\"\
    ;\n         }\n         mandatory true;\n         description\n           \"Algorithmic\
    \ instance event.\";\n       }\n       leaf-list invalid-entry {\n         type\
    \ leafref {\n           path \"/br-instances/algorithm/algo-instance/name\";\n\
    \         }\n         description\n           \"Invalid entry.\";\n       }\n\
    \       leaf-list added-entry {\n         type leafref {\n           path \"/br-instances/algorithm/algo-instance/name\"\
    ;\n         }\n         description\n           \"Added entry.\";\n       }\n\
    \       leaf-list modified-entry {\n         type leafref {\n           path \"\
    /br-instances/algorithm/algo-instance/name\";\n         }\n         description\n\
    \           \"Modified entry.\";\n       }\n     }\n   }\n   <CODE ENDS>\n"
- title: 8.  Common Softwire Element Groups YANG Module
  contents:
  - "8.  Common Softwire Element Groups YANG Module\n   This module imports typedefs\
    \ from [RFC6991].\n   The following YANG module contains definitions that are\
    \ used by both\n   the softwire CE and softwire BR YANG modules.\n   <CODE BEGINS>\
    \ file \"ietf-softwire-common@2019-11-16.yang\"\n   module ietf-softwire-common\
    \ {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-softwire-common\"\
    ;\n     prefix softwire-common;\n     import ietf-inet-types {\n       prefix\
    \ inet;\n       reference\n         \"RFC 6991: Common YANG Data Types, Section\
    \ 4\";\n     }\n     import ietf-yang-types {\n       prefix yang;\n       reference\n\
    \         \"RFC 6991: Common YANG Data Types, Section 3\";\n     }\n     organization\n\
    \       \"IETF Softwire Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/softwire/>\n\
    \        WG List:  <mailto:softwire@ietf.org>\n        Author:  Qi Sun\n     \
    \            <mailto:sunqi.ietf@gmail.com>\n        Author:  Linhui Sun\n    \
    \             <mailto:lh.sunlinh@gmail.com>\n        Author:  Yong Cui\n     \
    \            <mailto:yong@csnet1.cs.tsinghua.edu.cn>\n        Editor:  Ian Farrer\n\
    \                 <mailto:ian.farrer@telekom.de>\n        Author:  Sladjana Zoric\n\
    \                 <mailto:sladjana.zoric@telekom.de>\n        Editor:  Mohamed\
    \ Boucadair\n                 <mailto:mohamed.boucadair@orange.com>\n        Author:\
    \  Rajiv Asati\n                  <mailto:rajiva@cisco.com>\";\n     description\n\
    \       \"This document defines a YANG module defining types\n        common to\
    \ all A+P modules.\n        Copyright (c) 2019 IETF Trust and the persons identified\
    \ as\n        authors of the code.  All rights reserved.\n        Redistribution\
    \ and use in source and binary forms, with or\n        without modification, is\
    \ permitted pursuant to, and subject\n        to the license terms contained in,\
    \ the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's\
    \ Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\
    \        This version of this YANG module is part of RFC 8676; see\n        the\
    \ RFC itself for full legal notices.\";\n     revision 2019-11-16 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8676: YANG\
    \ Modules for IPv4-in-IPv6 Address plus Port\n                    (A+P) Softwires\"\
    ;\n     }\n     feature map-e {\n       description\n         \"MAP-E is an IPv6\
    \ transition mechanism for transporting IPv4\n          packets across an IPv6\
    \ network using IP encapsulation.  MAP-E\n          allows for a reduction of\
    \ the amount of centralized state\n          using rules to express IPv4/IPv6\
    \ address mappings.  This\n          introduces an algorithmic relationship between\
    \ the IPv6\n          subnet and IPv4 address.\n          This feature indicates\
    \ that the network element can function\n          as one or more MAP-E softwire\
    \ instances.\";\n       reference\n         \"RFC 7597: Mapping of Address and\
    \ Port with Encapsulation\n          (MAP-E)\";\n     }\n     feature map-t {\n\
    \       description\n         \"MAP-T is an IPv6 transition mechanism for transporting\
    \ IPv4\n          packets across an IPv6 network using IP translation.  It\n \
    \         leverages a double stateless NAT64-based solution as well as\n     \
    \     the stateless algorithmic address and transport layer\n          port mapping\
    \ algorithm defined for MAP-E.\n          This feature indicates that the network\
    \ element can function\n          as one or more MAP-T softwire instances.\";\n\
    \       reference\n         \"RFC 7599: Mapping of Address and Port using Translation\n\
    \          (MAP-T)\";\n     }\n     /*\n      * Groupings\n      */\n     grouping\
    \ algorithm-instance {\n       description\n         \"A collection of parameters\
    \ that is used for MAP-E/MAP-T.\";\n       leaf enable {\n         type boolean;\n\
    \         description\n           \"Enable/disable an individual MAP-E or MAP-T\
    \ rule.\";\n       }\n       container algo-versioning {\n         description\n\
    \           \"Version number for this algorithm instance\";\n         leaf version\
    \ {\n           type uint64;\n           description\n             \"A version\
    \ number for the mapping algorithm\n              rules provided to the algorithm\
    \ instance\";\n         }\n         leaf date {\n           type yang:date-and-time;\n\
    \           description\n             \"Timestamp when the algorithm instance\
    \ was activated.\n              An algorithm instance may be provided with mapping\n\
    \              rules that may change in time (for example, increase\n        \
    \      the size of the port set).  When a party who is the victim\n          \
    \    of abuse presents an external IP address/port, the version\n            \
    \  of the algorithm is important because depending on\n              the version,\
    \ a distinct customer may be identified.\n              The timestamp is used\
    \ as a key to find the appropriate\n              algorithm that was put into\
    \ effect when an abuse\n              occurred.\";\n           reference\n   \
    \          \"RFC 7422: Deterministic Address Mapping to Reduce\n             \
    \           Logging in Carrier-Grade NAT Deployments\";\n         }\n       }\n\
    \       choice data-plane {\n         description\n           \"Selects MAP-E\
    \ (encapsulation) or MAP-T\n            (translation)\";\n         case encapsulation\
    \ {\n           if-feature \"map-e\";\n           description\n             \"\
    encapsulation for MAP-E\";\n           leaf br-ipv6-addr {\n             type\
    \ inet:ipv6-address;\n             mandatory true;\n             description\n\
    \               \"The IPv6 address of the MAP-E BR.\";\n           }\n       \
    \  }\n         case translation {\n           if-feature \"map-t\";\n        \
    \   description\n             \"translation for MAP-T\";\n           leaf dmr-ipv6-prefix\
    \ {\n             type inet:ipv6-prefix;\n             description\n         \
    \      \"The IPv6 prefix of the MAP-T BR.\";\n           }\n         }\n     \
    \  }\n       leaf ea-len {\n         type uint8;\n         mandatory true;\n \
    \        description\n           \"Embedded Address (EA) bits are the IPv4 EA-bits\
    \ in the IPv6\n            address identifying an IPv4 prefix/address (or part\
    \ thereof)\n            or a shared IPv4 address (or part thereof) and a port-set\n\
    \            identifier.  The length of the EA-bits is defined as part of\n  \
    \          a MAP rule for a MAP domain.\";\n       }\n       leaf rule-ipv6-prefix\
    \ {\n         type inet:ipv6-prefix;\n         mandatory true;\n         description\n\
    \           \"The Rule IPv6 prefix defined in the mapping rule.\";\n       }\n\
    \       leaf rule-ipv4-prefix {\n         type inet:ipv4-prefix;\n         mandatory\
    \ true;\n         description\n           \"The Rule IPv4 prefix defined in the\
    \ mapping rule.\";\n       }\n       leaf forwarding {\n         type boolean;\n\
    \         mandatory true;\n         description\n           \"This parameter specifies\
    \ whether the rule may be used for\n            forwarding; if set, this rule\
    \ is used as a Forwarding\n            Mapping Rule (FMR); if not set, this rule\
    \ is a Basic\n            Mapping Rule (BMR) only and must not be used for\n \
    \           forwarding.\";\n       }\n     }\n     grouping traffic-stat {\n \
    \      description\n         \"Traffic statistics\";\n       leaf sent-ipv4-packets\
    \ {\n         type yang:zero-based-counter64;\n         description\n        \
    \   \"Number of decapsulated and forwarded IPv4 packets.\n            Discontinuities\
    \ in the value of this counter can occur\n            at re-initialization of\
    \ the management system and at\n            other times as indicated by the value\
    \ of\n            'discontinuity-time'.\";\n       }\n       leaf sent-ipv4-bytes\
    \ {\n         type yang:zero-based-counter64;\n         description\n        \
    \   \"Decapsulated/translated IPv4 traffic sent, in bytes.\n            Discontinuities\
    \ in the value of this counter can occur\n            at re-initialization of\
    \ the management system and at\n            other times as indicated by the value\
    \ of\n            'discontinuity-time'.\";\n       }\n       leaf sent-ipv6-packets\
    \ {\n         type yang:zero-based-counter64;\n         description\n        \
    \   \"Number of encapsulated IPv6 packets sent.\n            Discontinuities in\
    \ the value of this counter can occur\n            at re-initialization of the\
    \ management system and at\n            other times as indicated by the value\
    \ of\n            'discontinuity-time'.\";\n       }\n       leaf sent-ipv6-bytes\
    \ {\n         type yang:zero-based-counter64;\n         description\n        \
    \   \"Encapsulated IPv6 traffic sent, in bytes.\n            Discontinuities in\
    \ the value of this counter can occur\n            at re-initialization of the\
    \ management system and at\n            other times as indicated by the value\
    \ of\n            'discontinuity-time'.\";\n       }\n       leaf rcvd-ipv4-packets\
    \ {\n         type yang:zero-based-counter64;\n         description\n        \
    \   \"Number of IPv4 packets received.\n            Discontinuities in the value\
    \ of this counter can occur\n            at re-initialization of the management\
    \ system and at\n            other times as indicated by the value of\n      \
    \      'discontinuity-time'.\";\n       }\n       leaf rcvd-ipv4-bytes {\n   \
    \      type yang:zero-based-counter64;\n         description\n           \"IPv4\
    \ traffic received, in bytes.\n            Discontinuities in the value of this\
    \ counter can occur\n            at re-initialization of the management system\
    \ and at\n            other times as indicated by the value of\n            'discontinuity-time'.\"\
    ;\n       }\n       leaf rcvd-ipv6-packets {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Number of IPv4-in-IPv6 packets received.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf rcvd-ipv6-bytes {\n         type yang:zero-based-counter64;\n   \
    \      description\n           \"IPv4-in-IPv6 traffic received, in bytes.\n  \
    \          Discontinuities in the value of this counter can occur\n          \
    \  at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf dropped-ipv4-packets {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Number of IPv4 packets dropped at the\n  \
    \          Internet-facing interface.\n            Discontinuities in the value\
    \ of this counter can occur\n            at re-initialization of the management\
    \ system and at\n            other times as indicated by the value of\n      \
    \      'discontinuity-time'.\";\n       }\n       leaf dropped-ipv4-bytes {\n\
    \         type yang:zero-based-counter64;\n         description\n           \"\
    IPv4 traffic dropped at the Internet-facing\n            interface, in bytes.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf dropped-ipv6-packets {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Number of IPv4-in-IPv6 packets dropped.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf dropped-ipv6-bytes {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"IPv4-in-IPv6 traffic dropped, in bytes.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf dropped-ipv4-fragments {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Number of fragmented IPv4 packets dropped.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf dropped-ipv4-fragment-bytes {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Fragmented IPv4 traffic dropped, in bytes.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf ipv6-fragments-reassembled {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Number of IPv6 fragments successfully reassembled.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf ipv6-fragments-bytes-reassembled {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"IPv6 fragments successfully reassembled, in\
    \ bytes.\n            Discontinuities in the value of this counter can occur\n\
    \            at re-initialization of the management system and at\n          \
    \  other times as indicated by the value of\n            'discontinuity-time'.\"\
    ;\n       }\n       leaf out-icmpv4-error-packets {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Internally generated ICMPv4 error packets.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf out-icmpv4-error-bytes {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Internally generated ICMPv4 error messages,\
    \ in bytes.\n            Discontinuities in the value of this counter can occur\n\
    \            at re-initialization of the management system and at\n          \
    \  other times as indicated by the value of\n            'discontinuity-time'.\"\
    ;\n       }\n       leaf out-icmpv6-error-packets {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Internally generated ICMPv6 error packets.\n\
    \            Discontinuities in the value of this counter can occur\n        \
    \    at re-initialization of the management system and at\n            other times\
    \ as indicated by the value of\n            'discontinuity-time'.\";\n       }\n\
    \       leaf out-icmpv6-error-bytes {\n         type yang:zero-based-counter64;\n\
    \         description\n           \"Internally generated ICMPv6 error messages,\
    \ in bytes.\n            Discontinuities in the value of this counter can occur\n\
    \            at re-initialization of the management system and at\n          \
    \  other times as indicated by the value of\n            'discontinuity-time'.\"\
    ;\n       }\n     }\n   }\n   <CODE ENDS>\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The YANG modules defined in this document are\
    \ designed to be accessed\n   via network management protocols such as NETCONF\
    \ [RFC6241] or\n   RESTCONF [RFC8040].  The lowest NETCONF layer is the secure\
    \ transport\n   layer, and the mandatory-to-implement secure transport is Secure\n\
    \   Shell (SSH) [RFC6242].  The lowest RESTCONF layer is HTTPS, and the\n   mandatory-to-implement\
    \ secure transport is TLS [RFC8446].\n   The Network Configuration Access Control\
    \ Model (NACM) [RFC8341]\n   provides the means to restrict access for particular\
    \ NETCONF or\n   RESTCONF users to a preconfigured subset of all available NETCONF\
    \ or\n   RESTCONF protocol operations and content.\n   All data nodes defined\
    \ in the YANG modules which can be created,\n   modified, and deleted (i.e., config\
    \ true, which is the default) are\n   considered sensitive.  Write operations\
    \ (e.g., edit-config) to these\n   data nodes without proper protection can have\
    \ a negative effect on\n   network operations.  An attacker who is able to access\
    \ the BR can\n   undertake various attacks, such as:\n   *  Setting the value\
    \ of 'br-ipv6-addr' on the CE to point to an\n      illegitimate BR so that it\
    \ can intercept all the traffic sent by a\n      CE.  Illegitimately intercepting\
    \ users' traffic is an attack with\n      severe implications on privacy.\n  \
    \ *  Setting the MTU to a low value, which may increase the number of\n      fragments\
    \ ('softwire-payload-mtu').\n   *  Disabling hairpinning (i.e., setting 'enable-hairpinning'\
    \ to\n      'false') to prevent communications between CEs.\n   *  Setting 'softwire-num-max'\
    \ to an arbitrary high value, which may\n      be exploited by a misbehaving user\
    \ to perform a DoS on the binding\n      BR by mounting a massive number of softwires.\n\
    \   *  Setting 'icmpv4-rate' or 'icmpv6-rate' to a low value, which may\n    \
    \  lead to the deactivation of ICMP messages handling.\n   *  Instructing the\
    \ BR to install entries, which, in turn, will induce\n      a DDoS attack by means\
    \ of the notifications generated by the BR.\n      This DDoS can be softened by\
    \ defining a notification interval, but\n      given that this interval parameter\
    \ can be disabled or set to a low\n      value by the misbehaving entity, the\
    \ same problem will be\n      observed.\n   Some of the readable data nodes in\
    \ this YANG module may be considered\n   sensitive or vulnerable in some network\
    \ environments.  It is thus\n   important to control read access (e.g., via get,\
    \ get-config, or\n   notification) to these data nodes.  These subtrees and data\
    \ nodes can\n   be misused to track the activity of a host:\n   *  the binding\
    \ Table (/br-instances/binding/bind-instance/binding-\n      table)\n   *  the\
    \ algorithm configuration (/br-instances/algorithm/algo-\n      instance/)\n \
    \  Security considerations related to lw4o6, MAP-T, and MAP-E are\n   discussed\
    \ in [RFC7596], [RFC7597], and [RFC7599] respectively.\n   Security considerations\
    \ given in [RFC7950] are also applicable here.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA has assigned the following new tunnel type\
    \ under the tunnelType\n   subregistry of the \"ifType Definitions\" registry\
    \ maintained in the\n   SMI Numbers registry [TUNNELTYPE-IANA-REGISTRY]:\n   \
    \   Decimal:      18\n      Name:         aplusp\n      Description:  A+P encapsulation\n\
    \      Reference:    [RFC6346]\n   IANA has registered the following in the \"\
    ns\" subregistry within the\n   \"IETF XML Registry\" [RFC3688]:\n      URI: \
    \ urn:ietf:params:xml:ns:yang:ietf-softwire-ce\n      Registrant Contact:  The\
    \ IESG.\n      XML:  N/A; the requested URI is an XML namespace.\n      URI: \
    \ urn:ietf:params:xml:ns:yang:ietf-softwire-br\n      Registrant Contact:  The\
    \ IESG.\n      XML:  N/A; the requested URI is an XML namespace.\n      URI: \
    \ urn:ietf:params:xml:ns:yang:ietf-softwire-common\n      Registrant Contact:\
    \  The IESG.\n      XML:  N/A; the requested URI is an XML namespace.\n   IANA\
    \ has registered the following YANG modules in the \"YANG Module\n   Names\" subregistry\
    \ [RFC6020] within the \"YANG Parameters\" registry.\n      name:  ietf-softwire-ce\n\
    \      namespace:  urn:ietf:params:xml:ns:yang:ietf-softwire-ce\n      prefix:\
    \  softwire-ce\n      reference:  RFC 8676\n      name:  ietf-softwire-br\n  \
    \    namespace:  urn:ietf:params:xml:ns:yang:ietf-softwire-br\n      prefix: \
    \ softwire-br\n      reference:  RFC 8676\n      name:  ietf-softwire-common\n\
    \      namespace:  urn:ietf:params:xml:ns:yang:ietf-softwire-common\n      prefix:\
    \  softwire-common\n      reference:  RFC 8676\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688, January 2004,\n     \
    \         <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC6020]  Bjorklund,\
    \ M., Ed., \"YANG - A Data Modeling Language for\n              the Network Configuration\
    \ Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020, October\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]\
    \  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and\
    \ A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\"\
    , RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <https://www.rfc-editor.org/info/rfc6242>.\n   [RFC6991]  Schoenwaelder,\
    \ J., Ed., \"Common YANG Data Types\",\n              RFC 6991, DOI 10.17487/RFC6991,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n   [RFC7224]\
    \  Bjorklund, M., \"IANA Interface Type YANG Module\",\n              RFC 7224,\
    \ DOI 10.17487/RFC7224, May 2014,\n              <https://www.rfc-editor.org/info/rfc7224>.\n\
    \   [RFC7596]  Cui, Y., Sun, Q., Boucadair, M., Tsou, T., Lee, Y., and I.\n  \
    \            Farrer, \"Lightweight 4over6: An Extension to the Dual-\n       \
    \       Stack Lite Architecture\", RFC 7596, DOI 10.17487/RFC7596,\n         \
    \     July 2015, <https://www.rfc-editor.org/info/rfc7596>.\n   [RFC7597]  Troan,\
    \ O., Ed., Dec, W., Li, X., Bao, C., Matsushima, S.,\n              Murakami,\
    \ T., and T. Taylor, Ed., \"Mapping of Address and\n              Port with Encapsulation\
    \ (MAP-E)\", RFC 7597,\n              DOI 10.17487/RFC7597, July 2015,\n     \
    \         <https://www.rfc-editor.org/info/rfc7597>.\n   [RFC7598]  Mrugalski,\
    \ T., Troan, O., Farrer, I., Perreault, S., Dec,\n              W., Bao, C., Yeh,\
    \ L., and X. Deng, \"DHCPv6 Options for\n              Configuration of Softwire\
    \ Address and Port-Mapped\n              Clients\", RFC 7598, DOI 10.17487/RFC7598,\
    \ July 2015,\n              <https://www.rfc-editor.org/info/rfc7598>.\n   [RFC7599]\
    \  Li, X., Bao, C., Dec, W., Ed., Troan, O., Matsushima, S.,\n              and\
    \ T. Murakami, \"Mapping of Address and Port using\n              Translation\
    \ (MAP-T)\", RFC 7599, DOI 10.17487/RFC7599, July\n              2015, <https://www.rfc-editor.org/info/rfc7599>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8341]  Bierman, A. and\
    \ M. Bjorklund, \"Network Configuration\n              Access Control Model\"\
    , STD 91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n       \
    \       <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8343]  Bjorklund, M.,\
    \ \"A YANG Data Model for Interface\n              Management\", RFC 8343, DOI\
    \ 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n\
    \   [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n  \
    \            <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8675]  Boucadair,\
    \ M., Farrer, I., and R. Asati, \"A YANG Data\n              Model for Tunnel\
    \ Interface Types\", RFC 8675,\n              DOI 10.17487/RFC8675, November 2019,\n\
    \              <https://www.rfc-editor.org/info/rfc8675>.\n   [TUNNELTYPE-IANA-REGISTRY]\n\
    \              IANA, \"Structure of Management Information (SMI) Numbers\n   \
    \           (MIB Module Registrations)\",\n              <https://www.iana.org/assignments/smi-numbers>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC4213]  Nordmark, E. and R. Gilligan, \"\
    Basic Transition Mechanisms\n              for IPv6 Hosts and Routers\", RFC 4213,\n\
    \              DOI 10.17487/RFC4213, October 2005,\n              <https://www.rfc-editor.org/info/rfc4213>.\n\
    \   [RFC6333]  Durand, A., Droms, R., Woodyatt, J., and Y. Lee, \"Dual-\n    \
    \          Stack Lite Broadband Deployments Following IPv4\n              Exhaustion\"\
    , RFC 6333, DOI 10.17487/RFC6333, August 2011,\n              <https://www.rfc-editor.org/info/rfc6333>.\n\
    \   [RFC6346]  Bush, R., Ed., \"The Address plus Port (A+P) Approach to\n    \
    \          the IPv4 Address Shortage\", RFC 6346,\n              DOI 10.17487/RFC6346,\
    \ August 2011,\n              <https://www.rfc-editor.org/info/rfc6346>.\n   [RFC7422]\
    \  Donley, C., Grundemann, C., Sarawat, V., Sundaresan, K.,\n              and\
    \ O. Vautrin, \"Deterministic Address Mapping to Reduce\n              Logging\
    \ in Carrier-Grade NAT Deployments\", RFC 7422,\n              DOI 10.17487/RFC7422,\
    \ December 2014,\n              <https://www.rfc-editor.org/info/rfc7422>.\n \
    \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n    \
    \          BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n            \
    \  <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8342]  Bjorklund, M., Schoenwaelder,\
    \ J., Shafer, P., Watsen, K.,\n              and R. Wilton, \"Network Management\
    \ Datastore Architecture\n              (NMDA)\", RFC 8342, DOI 10.17487/RFC8342,\
    \ March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n   [RFC8344]\
    \  Bjorklund, M., \"A YANG Data Model for IP Management\",\n              RFC\
    \ 8344, DOI 10.17487/RFC8344, March 2018,\n              <https://www.rfc-editor.org/info/rfc8344>.\n\
    \   [RFC8349]  Lhotka, L., Lindem, A., and Y. Qu, \"A YANG Data Model for\n  \
    \            Routing Management (NMDA Version)\", RFC 8349,\n              DOI\
    \ 10.17487/RFC8349, March 2018,\n              <https://www.rfc-editor.org/info/rfc8349>.\n\
    \   [RFC8512]  Boucadair, M., Ed., Sivakumar, S., Jacquenet, C.,\n           \
    \   Vinapamula, S., and Q. Wu, \"A YANG Module for Network\n              Address\
    \ Translation (NAT) and Network Prefix Translation\n              (NPT)\", RFC\
    \ 8512, DOI 10.17487/RFC8512, January 2019,\n              <https://www.rfc-editor.org/info/rfc8512>.\n\
    \   [RFC8513]  Boucadair, M., Jacquenet, C., and S. Sivakumar, \"A YANG\n    \
    \          Data Model for Dual-Stack Lite (DS-Lite)\", RFC 8513,\n           \
    \   DOI 10.17487/RFC8513, January 2019,\n              <https://www.rfc-editor.org/info/rfc8513>.\n"
- title: Appendix A.  Configuration Examples
  contents:
  - "Appendix A.  Configuration Examples\n   The following sections provide examples\
    \ of how the softwire YANG\n   modules can be used for configuring softwire elements.\n"
- title: A.1.  Configuration Example for a lw4o6 BR Binding-Table
  contents:
  - "A.1.  Configuration Example for a lw4o6 BR Binding-Table\n   The lwAFTR maintains\
    \ an address binding table that contains the\n   following 3-tuples:\n   *  IPv6\
    \ Address for a single lwB4\n   *  Public IPv4 Address\n   *  Restricted port-set\n\
    \   The entry has two functions: the IPv6 encapsulation of inbound IPv4\n   packets\
    \ destined to the lwB4 and the validation of outbound IPv4-in-\n   IPv6 packets\
    \ received from the lwB4 for decapsulation.\n   Consider an example for the following\
    \ lw4o6 binding table entry:\n   lwB4 Binding IPv6 Address:  2001:db8::1\n   lwB4\
    \ Binding IPv4 Address:  192.0.2.1\n   lwB4 PSID:                  0x34\n   lwB4\
    \ PSID Length            8\n   BR IPv6 Address:            2001:db8:1::2\n   \
    \    <br-instances>\n         <binding>\n             <bind-instance>\n      \
    \         <name>mybinding-instance</name>\n               <binding-table>\n  \
    \               <binding-entry>\n                   <binding-ipv6info>2001:db8::1</binding-ipv6info>\n\
    \                   <binding-ipv4-addr>192.0.2.1</binding-ipv4-addr>\n       \
    \            <port-set>\n                     <psid>52</psid>\n              \
    \       <psid-len>8</psid-len>\n                   </port-set>\n             \
    \      <br-ipv6-addr>2001:db8:1::2</br-ipv6-addr>\n                 </binding-entry>\n\
    \               </binding-table>\n               <softwire-num-max>1024</softwire-num-max>\n\
    \               <softwire-path-mru>1540</softwire-path-mru>\n               <softwire-payload-mtu>1500</softwire-payload-mtu>\n\
    \             </bind-instance>\n         </binding>\n       </br-instances>\n\
    \              Figure 3: lw4o6 Binding Table Configuration XML\n"
- title: A.2.  Configuration Example for a MAP-E BR
  contents:
  - "A.2.  Configuration Example for a MAP-E BR\n   A MAP-E BR is configured with\
    \ forward mapping rules for the CEs it is\n   serving.  In this example (taken\
    \ from [RFC7597], Appendix A, Example\n   2), the following parameters are required:\n\
    \   *  Rule IPv6 Prefix\n   *  Rule IPv4 Prefix\n   *  Rule EA-bit bit length\n\
    \   *  IPv6 Address of MAP-BR\n   The mapping rule has two functions: identifying\
    \ the destination CE\n   IPv6 address for encapsulating inbound IPv4 packets and\
    \ the\n   validation of outbound IPv4-in-IPv6 packets received from the CE for\n\
    \   de-capsulation.\n   The transport type for the data plane also needs to be\
    \ configured for\n   encapsulation to enable MAP-E and forwarding needs to be\
    \ enabled.\n   Consider an example for the following MAP-E Forwarding Mapping\
    \ Rule:\n   Data plane:         encapsulation\n   Rule IPv6 Prefix:   2001:db8::/40\n\
    \   Rule IPv4 Prefix:   192.0.2.0/24\n   Rule EA-bit Length:  16\n   BR IPv6 Address:\
    \    2001:db8:ffff::1\n   Figure 4 provides the example MAP-E BR configuration\
    \ xml.\n       <br-instances>\n         <algorithm>\n           <algo-instance>\n\
    \             <name>myalgo-instance</name>\n             <encapsulation>\n   \
    \            <br-ipv6-addr>2001:db8:ffff::1</br-ipv6-addr>\n             </encapsulation>\n\
    \             <ea-len>16</ea-len>\n             <rule-ipv4-prefix>192.0.2.0/24</rule-ipv4-prefix>\n\
    \             <rule-ipv6-prefix>2001:db8::/40</rule-ipv6-prefix>\n           \
    \  <forwarding>true</forwarding>\n             <port-set>\n               <psid-offset>6</psid-offset>\n\
    \               <psid-len>8</psid-len>\n             </port-set>\n           </algo-instance>\n\
    \         </algorithm>\n       </br-instances>\n                   Figure 4: MAP-E\
    \ FMR Configuration XML\n"
- title: A.3.  lw4o6 CE Configuration Example
  contents:
  - "A.3.  lw4o6 CE Configuration Example\n   This section provides XML examples for\
    \ configuring a lw4o6 CE.\n   Examples for routing and NAT44 are also provided\
    \ for convenience.\n   Consider an example for the following lw4o6 CE configuration:\n\
    \   lwB4 Binding IPv6 Address:  2001:db8::1\n   lwB4 Binding IPv4 Address:  192.0.2.1\n\
    \   lwB4 PSID:                  0x34\n   lwB4 PSID Length            8\n   BR\
    \ IPv6 Address:            2001:db8:1::2\n   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <interfaces xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\">\n \
    \      <interface>\n         <name>lw4o6-wan</name>\n         <type>iana-tunnel-type:aplusp</type>\n\
    \         <br-ipv6-addr\n           xmlns=\"urn:ietf:params:xml:ns:yang:ietf-softwire-ce\"\
    >\n           2001:db8:1::2\n         </br-ipv6-addr>\n         <binding-ipv6info\n\
    \           xmlns=\"urn:ietf:params:xml:ns:yang:ietf-softwire-ce\">\n        \
    \   2001:db8::1\n         </binding-ipv6info>\n       </interface>\n     </interfaces>\n\
    \   </config>\n                    Figure 5: lw4o6 CE Configuration XML\n   In\
    \ the example depicted in Figure 5, the interface name is defined\n   for the\
    \ softwire tunnel.  This name is then referenced by the routing\n   configuration\
    \ for the IPv4 route.  Figure 6 provides an example\n   configuration for the\
    \ CE's IPv4 routing using the YANG module\n   described in [RFC8349].\n   <config\
    \ xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <routing xmlns=\"urn:ietf:params:xml:ns:yang:ietf-routing\"\
    >\n       <control-plane-protocols>\n         <control-plane-protocol>\n     \
    \      <type>static</type>\n           <name>v4</name>\n           <static-routes>\n\
    \             <ipv4\n             xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ipv4-unicas\\\
    \n             t-routing\">\n               <route>\n                 <destination-prefix>0.0.0.0/0</destination-prefix>\n\
    \                 <next-hop>\n                   <outgoing-interface>lw4o6-wan</outgoing-interface>\n\
    \                 </next-hop>\n               </route>\n             </ipv4>\n\
    \           </static-routes>\n         </control-plane-protocol>\n       </control-plane-protocols>\n\
    \     </routing>\n   </config>\n                Figure 6: lw4o6 CE Routing Configuration\
    \ XML\n   Figure 7 provides an example configuration for the CE's NAPT44\n   function\
    \ using the YANG module described in [RFC8512].\n   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <nat xmlns=\"urn:ietf:params:xml:ns:yang:ietf-nat\">\n      <instances>\n\
    \        <instance>\n          <id>1</id>\n          <policy>\n           <policy-id>1</policy-id>\n\
    \           <external-ip-address-pool>\n             <pool-id>1</pool-id>\n  \
    \           <external-ip-pool>192.0.2.1</external-ip-pool>\n           </external-ip-address-pool>\n\
    \           <port-set-restrict>\n             <port-set-algo>\n              \
    \ <psid-offset>6</psid-offset>\n               <psid-len>8</psid-len>\n      \
    \         <psid>52</psid>\n             </port-set-algo>\n           </port-set-restrict>\n\
    \           <notify-pool-usage>\n             <pool-id>1</pool-id>\n         \
    \    <high-threshold>80</high-threshold>\n           </notify-pool-usage>\n  \
    \         </policy>\n           <mapping-limits>\n            <limit-per-protocol>\n\
    \             <protocol-id>1</protocol-id>\n             <limit>8</limit>\n  \
    \          </limit-per-protocol>\n            <limit-per-protocol>\n         \
    \    <protocol-id>6</protocol-id>\n             <limit>32</limit>\n          \
    \  </limit-per-protocol>\n            <limit-per-protocol>\n             <protocol-id>17</protocol-id>\n\
    \             <limit>16</limit>\n            </limit-per-protocol>\n         \
    \  </mapping-limits>\n           <mapping-table>\n             <mapping-entry>\n\
    \               <index>1</index>\n               <external-src-address>\n    \
    \             192.0.2.1/32\n               </external-src-address>\n         \
    \      <internal-src-address>\n                 192.168.1.0/24\n             \
    \  </internal-src-address>\n               <transport-protocol>6</transport-protocol>\n\
    \             </mapping-entry>\n             <mapping-entry>\n               <index>2</index>\n\
    \               <external-src-address>\n                 192.0.2.1/32\n      \
    \         </external-src-address>\n               <internal-src-address>\n   \
    \              192.168.1.0/24\n               </internal-src-address>\n      \
    \         <transport-protocol>17</transport-protocol>\n             </mapping-entry>\n\
    \             <mapping-entry>\n               <index>3</index>\n             \
    \  <external-src-address>\n                 192.0.2.1/32\n               </external-src-address>\n\
    \               <internal-src-address>\n                 192.168.1.0/24\n    \
    \           </internal-src-address>\n               <transport-protocol>1</transport-protocol>\n\
    \             </mapping-entry>\n           </mapping-table>\n         </instance>\n\
    \       </instances>\n     </nat>\n   </config>\n                   Figure 7:\
    \ lw4o6 NAT Configuration XML\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Lishan Li, Bert Wijnen,\
    \ Giles Heron,\n   Ole Troan, Andy Wingo, and Leo Tietz for their contributions\
    \ to this\n   work.\n   Thanks to Sheng Jiang for the review.\n   Special thanks\
    \ to Tom Petch and Martin Bjorklund for the detailed\n   review and suggestions.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following individuals are co-authors:\n      Yong Cui\n\
    \      Tsinghua University\n      China\n      Phone: +86-10-6260-3059\n     \
    \ Email: cuiyong@tsinghua.edu.cn\n      Qi Sun\n      Tsinghua University\n  \
    \    China\n      Phone: +86-10-6278-5822\n      Email: sunqi.ietf@gmail.com\n\
    \      Linhui Sun\n      Tsinghua University\n      China\n      Phone: +86-10-6278-5822\n\
    \      Email: lh.sunlinh@gmail.com\n      Sladjana Zechlin\n      Deutsche Telekom\
    \ AG\n      Germany\n      Email: sladjana.zechlin@telekom.de\n      Rajiv Asati\n\
    \      Cisco Systems, Inc.\n      United States of America\n      Email: Rajiva@cisco.com\n\
    \      Hao Wang\n      Tsinghua University\n      China\n      Phone: +86-10-6278-5822\n\
    \      Email: wangh13@mails.tsinghua.edu.cn\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ian Farrer (editor)\n   Deutsche Telekom AG\n   CTO-ATI,\
    \ Landgrabenweg 151\n   53227 Bonn\n   Germany\n   Email: ian.farrer@telekom.de\n\
    \   Mohamed Boucadair (editor)\n   Orange\n   35000 Rennes\n"
