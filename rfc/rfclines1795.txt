Abstract This RFC describes use of Data Link Switching over TCP/IP.
The RFC is being distributed to members of the Internet community in order to solicit their reactions to the proposals contained in it.
While the issues discussed may not be directly relevant to the research problems of the Internet, they may be interesting to a number of researchers and Implementers.
This RFC was created as a joint effort of the Advanced Peer to Peer Networking (APPN)
The APPN Implementers Workshop is a group sponsored by IBM and consists of representatives of member companies implementing current and future IBM Networking interoperable products.
The DLSw Related Interest Group was formed in this forum in order to produce a single version of the Switch to Switch Protocol (SSP) which could be implemented by all vendors, which would fix documentation problems with the existing RFC 1434, and which would enhance and evolve the protocol to add new functions and features.
This document is based on RFC 1434.
This document contains significant changes to RFC 1434 and therefore obsoletes that document.
Any questions or comments relative to the contents of this RFC should be sent to the following Internet address: aiw dlsw@networking.raleigh.ibm.com.
This is a widely subscribed mailing list and messages sent to this address will be sent to all members of the DLSw mailing list.
For specific questions relating to subscribing to the AIW and any of it's working groups send email to:
appn@vnet.ibm.com Information regarding all of the AIW working groups and the work they are producing can be obtained by copying, via anonymous ftp, the file aiwinfo.psbin or aiwinfo.txt from the Internet host networking.raleigh.ibm.com, located in directory aiw.
These mailing lists and addresses are subject to change.
Introduction Data Link Switching (DLSw) is a forwarding mechanism for the IBM SNA (Systems Network Architecture) and IBM NetBIOS (Network Basic Input Output Services) protocols.
This memo documents the Switch to Switch Protocol (SSP) that is used between Data Link Switches.
This protocol does not provide full routing, but instead provides switching at the SNA Data Link layer (i.e., layer 2 in the SNA architecture) and encapsulation in TCP/IP for transport over the Internet.
This RFC documents the frame formats and protocols for multiplexing data between Data Link Switches.
The initial implementation of SSP uses TCP as the reliable transport between Data Link Switches.
However, other transport connections such as OSI TP4 could be used in the future.
A Data Link Switch (abbreviated also as DLSw in this document) can support  SNA (Physical Unit (PU) 2, PU 2.1 and PU 4) systems and optionally NetBIOS systems attached to IEEE 802.2 compliant Local Area Networks, as well as SNA
(PU 2 (primary or secondary) and PU2.1) systems attached to IBM Synchronous Data Link Control (SDLC) links.
For the latter case, the SDLC attached systems are provided with a LAN appearance within the Data Link Switch (each SDLC PU is presented to the SSP protocol as a unique MAC/SAP address pair).
For the Token Ring LAN attached systems, the Data Link Switch appears as a source routing bridge.
Token Ring Remote systems that are accessed through the Data Link Switch appear as systems attached to an adjacent ring.
This ring is a virtual ring that is manifested within each Data Link Switch.
Backwards Compatibility with RFC 1434
This document defines significant changes to RFC 1434 and does not state details on how to interoperate with RFC 1434 or "enhanced" implementations (e.g., those that added enter and exit busy flow control).
It is up to the implementer to refer to RFC 1434 and/or any other vendor's documentation in order to interoperate with a given vendor's implementation, if interoperability with pre AIW DLSw RIG standards is desired.
Overview Data Link Switching was developed to provide support for SNA and NetBIOS in multi protocol routers.
Since SNA and NetBIOS are basically connection oriented protocols, the Data Link Control procedure that they use on the LAN is IEEE 802.2
Logical Link Control (LLC) Type 2.
Data Link Switching also accommodates SNA protocols over WAN (Wide Area Network) links via the SDLC protocol.
LLC Type 2 was designed with the assumption that the network transit delay would be predictable (i.e., a local LAN).
Therefore the LLC Type 2 elements of procedure use a fixed timer for detecting lost frames.
When remote bridging is used over wide area lines (especially at lower speeds), the network delay is larger and it can vary greatly based upon congestion.
When the delay exceeds the time out value LLC Type 2 attempts to retransmit.
If the frame is not actually lost, only delayed, it is possible for the LLC Type 2 procedures to become confused.
And as a result, the link may be eventually taken down if the delay exceeds the T1 timer times N2 retry count.
Given the use of LLC Type 2 services, Data Link Switching addresses the following bridging problems: DLC Time outs DLC Acknowledgments over the WAN Flow and Congestion Control Broadcast Control of Search Packets Source Route Bridging Hop Count Limits NetBIOS also makes extensive use of datagram services that use connectionless LLC Type 1 service.
In this case, Data Link Switching addresses the last two problems in the above list.
The principal difference between Data Link Switching and bridging is that for connection oriented data DLSw terminates
The following figure illustrates this difference based upon two end systems operating with LLC Type 2 services.
In traditional bridging, the Data Link Control is end to end.
Data Link Switching terminates the LLC Type 2 connection at the switch.
This means that the LLC Type 2 connections do not cross the wide area network.
The DLSw multiplexes LLC connections onto a TCP connection to another DLSw.
Therefore, the LLC connections at each end are totally independent of each other.
It is the responsibility of the Data Link Switch to deliver frames that it has received from a LLC connection to the other end.
TCP is used between the Data Link Switches to guarantee delivery of frames.
As a result of this design, LLC time outs are limited to the local LAN (i.e., they do not traverse the wide area).
Also, the LLC Type 2 acknowledgments (RR's) do not traverse the WAN, thereby reducing traffic across the wide area links.
For SDLC links, polling and poll response occurs locally, not over the WAN.
Broadcast of search frames is controlled by the Data Link Switches once the location of a target system is discovered.
Finally, the switches can now apply back pressure to the end systems to provide flow and congestion control.
Only one copy of an Link Protocol Data Unit (LPDU) is sent between Data Link Switches in SSP messages (XIDFRAME and INFOFRAME).
Retries of the LPDU are absorbed by Data Link Switch that receives it.
The Data Link Switch that transmits the LPDU received in an SSP message to a local DLC, will perform retries in a manner appropriate for the local DLC.
This may involve running a reply timer and maintaining a poll retry count.
The length of the timer and the number of retries is an implementation choice based on user configuration parameters and the DLC type.
Data Link Switching uses LAN addressing to set up connections between SNA systems.
SDLC attached devices are defined with MAC and SAP addresses to enable them to communicate with LAN attached devices.
For NetBIOS systems, Data Link Switching uses the NetBIOS name to forward datagrams and to set up connections for NetBIOS sessions.
For LLC type 2 connection establishment, SNA systems send TEST (or in some cases, XID) frames to the null (0x00) SAP.
NetBIOS systems have an address resolution procedure, based upon the Name Query and Name Recognized frames, that is used to establish an end to end circuit.
Since Data Link Switching may be implemented in multi protocol routers, there may be situations where both bridging and switching are enabled.
SNA frames can be identified by their link SAP.
Typical SAP values for SNA are 0x04, 0x08, and 0x0C.
NetBIOS always uses a link SAP value of 0xF0. 3.
Transport Connection Data Link Switches can be in used in pairs or by themselves.
A Single DLSw internally switches one data link to another without using TCP (DLC(1) to DLC(2) in the figure below).
This RFC does not go into details on how to implement this feature and it is not a requirement to support this RFC.
A paired DLSw multiplexes data links over a reliable transport using a Switch to Switch Protocol (SSP).
Before Data Link Switching can occur between two routers, they must establish two TCP connections between them.
Each Data Link Switch will maintain a list of DLSw capable routers and their status (active/inactive).
After the TCP connection is established, SSP messages are exchanged to establish the capabilities of the two Data Link Switches.
Once the exchange is complete,  the DLSw will employ SSP control messages to establish end to end circuits over the transport connection.
Within the transport connection, DLSw SSP messages are exchanged.
The message formats and types for these SSP messages are documented in the following sections.
The default parameters associated with the TCP connections between Data Link Switches are as follows:
Two or more Data Link Switches may be attached to the same LAN, consisting of a number of token ring segments interconnected by source routing bridges.
In this case, a TCP connection is not defined between bridges attached to the same LAN.
This will allow using systems to select one of the possible Data Link Switches in a similar manner to the selection of a bridge path through a source  routed bridged network.
The virtual ring segment in each Data Link Switch attached to a common LAN must be configured with the same ring number.
This will prevent LAN frames sent by one Data Link Switch from being propagated through the other Data Link Switches.
The following diagrams show the two message header formats exchanged between Data Link Switches, Control and Information.
The Control message header is used for all messages except Information Frames (INFOFRAME) and Independent Flow Control Messages (IFCM), which are sent in Information header format.
The INFOFRAME, KEEPALIVE and IFCM message headers are 16 bytes long, and the control message header is 72 bytes long.
The fields in the first sixteen bytes of all message headers are the same.
(48) Origin Data Link Correlator
(56) Target DLC Port ID
(60) Target Data Link Correlator
The first sixteen bytes of control and information message headers contain identical fields.
A brief description of some of the fields in an SSP message are shown below (if not defined below, the fields and/or their values are described in subsequent sections).
The Version Number field (offset 0) is set to 0x31
(ASCII '1'), indicating a decimal value of 49.
This is used to indicate DLSw version 1.
The Header Length field (offset 1) is 0x48 for control messages, indicating a decimal value of 72 bytes, and 0x10 for information and
Independent Flow Control messages, indicating a decimal value of 16 bytes.
The Message Length field (offset 2) defines the number of bytes within the data field following the header.
The Flow Control Byte field (offset 15)  is described in section 8.
The Header Number field (offset 17) is 0x01, indicating a value of one.
The Circuit Priority field (offset 22) is described in section 4.
The Frame Direction field (offset 38) is set to 0x01 for frames sent from the origin DLSw to the target DLSw, and is set to 0x02 for frames sent from the target DLSw to the origin DLSw.
Note:  The Remote Data Link Correlator and Remote DLC Port ID are set equal to the Target Data Link Correlator and Target DLC Port ID if the Frame Direction field is set to 0x01, and are set equal to the Origin Data Link Correlator and Origin DLC Port ID if the Direction Field is set to 0x02.
The Protocol ID field is set to 0x42, indicating a decimal value of 66.
The DLC Header Length is set to zero for SNA and is set to 0x23 for NetBIOS datagrams, indicating a length of 35 bytes.
This includes the Access Control (AC) field, the Frame Control (FC) field, Destination MAC Address (DA), the Source MAC Address (SA), the Routing Information (RI) field (padded to 18 bytes), the Destination link SAP (DSAP), the Source link SAP (SSAP), and the LLC control field (UI).
The values for the Message Type field are defined in section 3.5.
Note that this value is specified in two different fields (offset 14 and 23 decimal) of the control message header.
Only the first field is to be used when parsing a received SSP message.
The second field is to be ignored by new implementations on reception.
The second field was left in for backwards compatibility with RFC 1434 implementations and this field may be used in future versions if needed.
The SSP Flags field contains additional information related to the SSP message.
The flags are defined as follows (bit 7 being the most significant bit and bit 0
the least significant bit of the octet): Bit(s) 76543210
explorer message (CANUREACH and ICANREACH)
Reserved fields are set to zero upon transmission and should be ignored upon receipt.
A data link is defined as a logical association between the two end stations using Data Link Switching.
It is identified by a Data Link ID (14 bytes) consisting of the pair of attachment addresses associated with each end system.
Each attachment address is represented by the concatenation of the MAC address (6 bytes) and the LLC address (1 byte).
Each attachment address is classified as either "Target" in the context of the Destination MAC/SAP addresses of an explorer frame sent in the first frame used to establish a circuit, or "Origin" in the context of the Source MAC/SAP addresses.
All MAC addresses are expressed in non canonical (Token Ring) format.
Control message offset 24 decimal)
An end to end circuit is identified by a pair of Circuit ID's.
A Circuit ID is a 64 bit number that identifies the DLC circuit within a single DLSw.
It consists of a DLC Port ID (4 bytes), and a Data Link Correlator (4 bytes).
The Circuit ID must be unique in a single DLSw and is assigned locally.
The pair of Circuit ID's along with the Data Link IDs,  uniquely identify a single end to end circuit.
Each DLSw must keep a table of these Circuit ID pairs, one for the local end of the circuit and the other for the remote end of the circuit.
In order to identify which Data Link Switch originated the establishment of a circuit, the terms, "Origin" DLSw and "Target" DLSw, will be employed in this document.
The Origin Transport ID and the Target Transport ID fields in the message header are used to identify the individual TCP/IP port on a Data Link Switch.
The values have only local significance.
However, each Data Link Switch is required to reflect the values contained in these two fields, along with the associated values for DLC Port ID and the Data Link Correlator, when returning a message to the other Data Link Switch.
The following figure shows the use of the addressing parameters during the establishment of an end to end connection.
The CANUREACH, ICANREACH, and REACH ACK message types all carry the Data Link ID, consisting of the MAC and Link SAP addresses associated with the two end stations.
The CANUREACH and ICANREACH messages are qualified by the SSPex flag into CANUREACH ex, ICANREACH ex (explorer messages) and
CANUREACH cs, ICANREACH cs (circuit start).
The CANUREACH ex is used to find a remote MAC and Link SAP address without establishing an SSP circuit.
Upon receipt of a CANUREACH cs message, the target DLSw starts a data link for each port, thereby obtaining a Data Link Correlator.
If the target station can be reached, an ICANREACH cs message is returned to the origin DLSw containing the Target Circuit ID parameter.
Upon receipt, the origin DLSw starts a data link and returns the Origin Circuit ID to the target DLSw within the REACH ACK message.
(Note for a full list of message types, see section 3.5.)
ICANREACH cs (Data Link ID, Target Circuit ID)   REACH
XIDFRAME (Data Link ID, Origin Cir ID, Target Cir ID)
> CONTACT (Data Link ID, Origin Cir ID, Target Cir ID)
During the exchange of the XIDFRAME, CONTACT, and CONTACTED messages, the pair of Circuit ID parameters is included in the message format along with the DATA LINK ID parameter.
Once the connection has been established, the INFOFRAME messages are exchanged with the shorter header.
This header contains only the Circuit ID associated with the remote DLSw.
The Remote Data Link Correlator and the Remote DLC Port ID are set equal to the Data Link Correlator and the DLC Port ID that are associated with the origin or target Data Link Switch, dependent upon the direction of the packet.
The local use, and contents of the Data Link Correlator, Port ID and Transport ID fields in SSP messages is an implementation choice.
These fields have local significance only.
The values received from a partner DLSw must not be interpreted by the DLSw that receives them and should be echoed "as is" to a partner DLSw in subsequent messages.
All implementations must obey the following rules in this section (3.3) on the assignment and fixing of these correlator fields for each transport connection or circuit: The Transport ID fields are learned from the first SSP message exchanged with a DLSw partner (the Capabilities exchange).
This field should not be varied by a DLSw after the capabilities exchange and must be reflected to the partner DLSw in every SSP control message.
The Target Data Link Correlator, Target Port ID and Target Transport ID must remain the same once the Target DLSw has sent the ICANREACH cs for a given circuit.
The Origin DLSw must store the values specified in the ICANREACH cs and use these on all subsequent SSP messages for this circuit.
The Origin DLSw must allow these fields to vary until the ICANREACH cs is received.
Each SSP message issued for a circuit must reflect the values specified by the Target DLSw in the last SSP message for this circuit received by the Origin DLSw.
Binary zero should be used if no such message has yet been received for a given circuit (apart from the Target Transport ID which will have been learnt as specified above).
The Origin Data Link Correlator, Origin Port ID and Origin Transport ID must remain the same once the Origin DLSw has issued the REACH ACK for a given circuit.
The Target DLSw must store the values specified in the REACH ACK and use these on all subsequent SSP messages for this circuit.
The Target DLSw must allow these fields to vary until the REACH ACK is received.
Each SSP message issued for a circuit must reflect the values specified by the Origin DLSw in the last SSP message for this circuit received by the Target DLSw.
Binary zero should be used if no such message has yet been received for a given circuit (apart from the Origin Transport ID which will have been learnt as specified above).
For the purposes of correlator exchange, explorer messages form a separate circuit.
Both DLSw partners must reflect the last received correlator values as specified above.
However correlators learned on explorer messages need not be carried over to a subsequent circuit setup attempt.
In particular, the Origin DLSw may elect to use the same values for the Origin Data Link Correlator and Origin Port ID when it issues a CANUREACH cs after receiving an ICANREACH ex or
However the Target DLSw must not assume that the CANUREACH cs will specify any of the Target Data Link Correlator or Target Port ID that were exchanged on the explorer messages.
Received SSP messages that require a valid Remote Circuit ID but cannot be associated with an existing circuit should be rejected with a HALT DL NOACK message.
This is done to prevent a situation where one DLSw partner has a circuit defined while the other partner does not.
The exception would be a HALT DL NOACK message with an invalid Remote Circuit ID.
The HALT DL NOACK message is typically used in error situations where a response is not appropriate.
The SSP messages requiring a valid Remote Circuit ID are all messages except the following: CANUREACH ex, CANUREACH cs, ICANREACH ex, ICANREACH cs, NETBIOS NQ cs, NETBIOS NR cs, DATAFRAME, NETBIOS ANQ, NETBIOS ANR, KEEPALIVE and CAP EXCHANGE.
3.4  Largest Frame Size Field The Largest Frame Size (LF Size) field in the SSP Control Header is used to carry the LF Size bits across the DLSw connection.
This should be used to ensure that the two end stations always negotiate a frame size to be used on a circuit that does not require the Origin and Target DLSw partners to re segment frames.
This field is valid on CANUREACH ex, CANUREACH cs, ICANREACH ex, ICANREACH cs, NETBIOS NQ ex and NETBIOS NR ex messages only.
The contents of this field should be ignored on all other frames.
Every DLSw forwarding a SSP frame to its DLSw partner must ensure that the contents of this frame reflect the minimum capability of the route to its local end station or any limit imposed by the DLSw itself.
The bit wise definition of this field is as follows (bit 7 is the most significant bit, bit 0 is the least significant bit)
(significant on messages from Origin to Target DLSw only) 0 fail circuit if route obtained requires a smaller LF size 1 don't fail the circuit but return the LF size obtained even if it is smaller .
Largest Frame Bit Base .
Largest Frame Bit Base .
Largest Frame Bit Base .
Largest Frame Bit Extended   LF Bits   Refer to IEEE 802.1D Standard, Annex C for encoding of Largest Frame base and extended bit values.
The Origin DLSw "Size Control" flag informs a Target DLSw that chooses to reply to   cs messages on the basis of cached information that it may safely return a smaller LF Size on the ICANREACH cs frame if it has had to choose an alternative route on which to initialize the circuit.
If this bit is set to 1, the Origin DLSw takes responsibility for ensuring that the end stations negotiate a suitable frame size for the circuit.
If this bit is set to 0, the Target DLSw must not reply to the CANUREACH cs if it cannot obtain a route to the Target end station that support an LF Size at least as large as that specified in the CANUREACH cs frame.
The following table lists the protocol data units that are exchanged between Data Link Switches.
All values not listed are reserved for potential use in follow on releases.
Can U Reach Station explorer
Can U Reach Station circuit start 0x03
I Can Reach Station explorer
I Can Reach Station circuit start 0x04
NETBIOS Name Query circuit setup
NETBIOS NR cs    NETBIOS Name Recog circuit setup
Both the DGRMFRAME and DATAFRAME messages are used to carry information received by the DLC entity within UI frames.
The DGRMFRAME message is addressed according to a pair of Circuit IDs, while the DATAFRAME message is addressed according to a Data Link ID, being composed of a pair of MAC addresses and a pair of link SAP addresses.
The latter is employed prior to the establishment of an end to end circuit when Circuit IDs have yet to be established or during circuit restart when Data Links are reset.
These messages are not used for the DLSw Standard but may be used by older DLSw implementations.
They are listed here for informational purposes.
These messages were added after publication of RFC 1434 and were deleted in this standard (adaptive pacing is now used instead).
These messages are not normally issued by a Standard DLSw, which uses the NB   ex messages as shown in section 5.4.
However if a Standard DLSw attempts to interoperate with older DLSw implementations, these messages correspond to the NETBIOS NQ and NETBIOS NR messages used in RFC1434 both to locate the resource and to setup a circuit.
This document does not attempt to provide a complete specification of the use of these messages.
A KEEPALIVE message may be sent by a DLSw to a partner DLSw in order to verify the TCP connection (or other future SSP carrying protocol) is still functioning.
If received by a DLSw, this message is discarded and ignored.
Use of this message is optional.
For the exchange of NetBIOS control messages, the entire DLC header is carried as part of the message unit.
This includes the MAC header, with the routing information field padded to 18 bytes, and the LLC header.
The following message types are affected: NETBIOS NQ, NETBIOS NR, NETBIOS ANQ, NETBIOS ANR, and DATAFRAME when being used by NetBIOS systems.
The routing information in the DLC header is not used by the remote Data Link Switch upon receiving the above five messages.
Any SSP message types not defined above if received by a DLSw are to be ignored (i.e., no error action is to be performed).
A Data Link Switch should quietly drop any SSP message with a Message Type that is not recognized or not supported.
Receipt of such a message should not cause the termination of the transport connection to the message sender.
At circuit start time, each circuit end point will provide priority information to its circuit partner.
The initiator of the circuit will choose which circuit priority will be effective for the life of the circuit.
If Priority is not implemented by the Data Link Switch, then "Unsupported" priority is used.
4.1  Frame format Circuit priority will be valid in the CANUREACH cs, ICANREACH cs, and REACH ACK frames only.
The relevant header field is shown below.
The Circuit Priority value is a byte value at offset 22 in an SSP Control Message.
The following describes the format of the Circuit Priority byte.
High Priority 100 Highest Priority 101
to 111 are reserved for future use Note 1: Unsupported means that the Data Link Switch that originates the circuit does not implement priority.
Actions taken on Unsupported priority are vendor specific.
The sender of a CANUREACH cs is responsible for setting the CP bits to reflect the priority it would like to use for the circuit being requested.
The mechanism for choosing an appropriate value is implementation dependent.
The sender of an ICANREACH cs frame will set the CP bits to reflect the priority it would like to use for the circuit being requested, with the mechanism for choosing the appropriate value being implementation dependent.
The receiver of the ICANREACH cs will select from the priorities in the CANUREACH cs and ICANREACH cs frames, and will set the value in the CP field of the REACH ACK frame that follows to the value to be used for this circuit.
This priority will be used for the life of the circuit.
A CANUREACH cs or ICANREACH cs with the circuit priority value set to Unsupported (CP 000) indicates that the sender does not support the circuit priority function.
Circuit initiator requests high Priority.
ICANREACH cs (CP 010)  Circuit target requests medium priority.
The circuit initiator could choose either high or medium in this example.
The following state tables describe the states for a single circuit through the Data Link Switch.
State information is kept for each connection.
The initial state for a connection is DISCONNECTED.
The steady state is either CIRCUIT ESTABLISHED or CONNECTED.
In the former state, an end to end circuit has been established allowing the support of Type 1 LLC between the end systems.
The latter state exists when an end to end connection has been established for the support of Type 2 LLC services between the end systems.
For SNA, LLC type 2 connection establishment is via the use of IEEE 802.2 Test or XID  frames.
SNA devices send these frames to the null SAP in order to determine the source route information in support of bridging.
Normally SNA devices use SAP 0x04, 0x08, or 0x0C  (most SNA LLC2 devices that have a single PU per MAC address use a default of 0x04).
Typically the SAP would be used to determine if the Test frames should be sent to the DLSw code in the router.
If both bridging and DLSw are enabled, this allows the product to ensure that SNA frames are not both bridged and switched.
Note that although typically SNA uses a DSAP and SSAP of 0x04, it allows for other SAPs to be configured and supports unequal SAPs.
This allows multiple PUs to share connections between two given MAC addresses (each PU to PU session uses one LLC2 connection).
For NetBIOS, LLC type 2 connection establishment is via the Name Query and Name Recognized frames.
These frames are used for both address resolution and source route determination.
NetBIOS devices use SAP 0xF0.
The Switch to Switch Protocol is formally defined through the state machines described in this chapter.
The following table lists the thirteen possible states for the main circuit FSM.
A separate state machine instance is employed for each end to end circuit that is maintained by the Data Link Switch.
The end to end circuit has been established.
At this time LLC Type 1 services are available from end to end.
The target DLSw is awaiting a REACH ACK response to an ICANREACH cs message.
The DLSw that originated the reset is awaiting the restart of the data link and the DL RESTARTED response to a RESTART DL message.
The origin DLSw is awaiting a ICANREACH cs in response to a CANUREACH cs message.
The end to end connection has been established thereby allowing LLC Type 2 services from end to end in addition to LLC Type 1 services.
The origin DLSw is awaiting the CONTACTED response to a CONTACT message.
The target DLSw is awaiting the DLC CONTACTED confirmation to a DLC CONTACT signal (i.e., DLC is waiting for a UA response to an SABME command).
The initial state with no circuit or connection established, the DLSw is awaiting either a CANUREACH cs, or an ICANREACH cs.
The DLSw that originated the disconnect is awaiting the DL HALTED response to a HALT DL message.
The remote DLSw is awaiting the DLC DL HALTED indication following the DLC HALT DL request (i.e., DLC is waiting for a UA response to a DISC command), due to receiving a HALT DL message.
The remote DLSw is awaiting the DLC DL HALTED indication following the DLC HALT DL request (i.e., DLC is waiting for a UA response to a DISC command), due to receiving a HALT DL NOACK message.
The remote DLSw is awaiting the DLC DL HALTED indication following the DLC HALT DL request (i.e., DLC is waiting for a UA response to a DISC command), and the restart of the data link.
The target DLSw is awaiting the DLC DL STARTED indication following the DLC START DL request (i.e., DLC is waiting for a Test response as a result of sending a Test command).
The DISCONNECTED state is the initial state for a new circuit.
One end station starts the connection via an XID or SABME command (i.e., DLC XID or DLC CONTACTED).
Upon receipt, the Data Link Switches exchange a set of CANUREACH cs, ICANREACH cs and REACH ACK messages.
Upon completion of this three legged exchange both Data Link Switches will be in the CIRCUIT ESTABLISHED state.
Three pending states also exist during this exchange.
The CIRCUIT START state is entered by the origin Data Link Switch after it has sent the CANUREACH cs message.
The RESOLVE PENDING state is entered by the target Data Link Switch awaiting a Test response to a Test Command.
And lastly, the CIRCUIT PENDING state is entered by the target DLSw awaiting the REACH ACK reply to an ICANREACH cs message.
The CIRCUIT ESTABLISHED state allows for the exchange of LLC Type 1 frames such as the XID exchanges between SNA stations that occurs prior to the establishment of a connection.
Also, datagram traffic (i.e., UI frames)  may be sent and received between the end stations.
These exchanges use the XIDFRAME and DGRMFRAME messages sent between the Data Link Switches.
In the CIRCUIT ESTABLISHED state, the receipt of a SABME command (i.e., DLC CONTACTED) causes the origin DLSw to issue a CONTACT message, to send an RNR supervisory frame (i.e., DLC ENTER BUSY) to the origin station, and to enter the CONNECT PENDING state awaiting a CONTACTED message.
The target DLSw, upon the receipt of a CONTACT message, will issue a SABME command (i.e., DLC CONTACT) and enter the Contact Pending state.
Once the UA response is received (i.e., DLC CONTACTED), the target DLSw sends a CONTACTED message and enters the CONNECTED state.
When received, the origin DLSw enters the CONNECTED state and sends an RR supervisory frame (i.e., DLC EXIT BUSY).
The CONNECTED state is the steady state for normal data flow once a connection has been established.
Information frames (i.e., INFOFRAME messages) are simply sent back and forth between the end points of the connection.
This is the path that should be optimized for performance.
The connection is terminated upon the receipt of a DISC frame or under some other error condition detected by DLC (i.e., DLC ERROR).
Upon receipt of this indication, the DLSw will halt the local data link, send a HALT DL message to the remote DLSw, and enter the DISCONNECT PENDING State.
When the HALT DL frame is received by the other DLSw, the local DLC is halted for this data link, a DL HALTED message is returned, and the DISCONNECTED state is entered.
Receipt of this DL HALTED message causes the other DLSw to also enter the DISCONNECTED state.
The CIRCUIT RESTART state is entered if one of the Data Link Switches receives a SABME command  (i.e., DLC RESET) after data transfer while in the CONNECTED state.
This causes a DM command to be returned to the origin station and a RESTART DL message to be sent to the remote Data Link Switch.
This causes the remote data link to be halted and then restarted.
The remote DLSw will then send a DL RESTARTED message back to the first DLSw.
The receipt of the DL RESTARTED message causes the first DLSw to issue a new CONTACT message, assuming that the local DLC has been contacted (i.e., the origin station has resent the SABME command).
This is eventually responded to by a CONTACTED message.
Following this exchange, both Data Link Switches will return to the CONNECTED state.
If the local DLC has not been contacted, the receipt of a DL RESTARTED command causes the Data Link Switch to enter the CIRCUIT ESTABLISHED state awaiting the receipt of a SABME command (i.e., DLC CONTACTED signal).
The HALT PENDING, HALT PENDING NOACK and RESTART PENDING states correspond to the cases when the Data Link Switch is awaiting responses from the local station on the adjacent LAN (e.g., a UA response to a DISC command).
Also in the RESTART PENDING state, the Data Link Switch will attempt to restart the data link prior to sending a DL RESTARTED message.
For some implementations, the start of a data link involves the exchange of a Test command/response on the adjacent LAN (i.e., DLC START DL).
For other implementations, this additional exchange may not be required.
This section provides a detailed representation of the Data Link Switch, as documented by a single state machine.
Many of the transitions are dependent upon local signals between the Data Link Switch entity and one of the DLC entities.
These signals and their definitions are given in the following tables.
DLC has received an SABME command or DLC has received a UA response as a result of sending an SABME command.
DLC has received a UI frame.
Such a condition occurs when a DISC command is received or when DLC experiences an unrecoverable error.
DLC has received an Information (I) frame.
Data Link Halted Indication:  DLC has received a UA response to a DISC command.
Data Link Started Indication:  DLC has received a Test response from the null SAP.
Resolve Command Indication:  DLC has received a Test command addressed to the null SAP, or an XID command addressed to the null SAP.
DLC RESOLVED    Resolve request:  DLC has received a TEST response frame (or equivalent for non LAN DLCs) but has not reserved the resources required for a circuit yet.
DLC has received an XID command or response to a non null SAP.
Failure of the transport connection used by the circuit.
The CIRCUIT START timer (started when the circuit went into CIRCUIT START state) has expired.
DLC will send a SABME command or a UA response to an outstanding SABME command.
DLC will send a UI frame.
DLC will send an RNR supervisory frame.
DLC will send an RR supervisory frame.
DLC will send a DISC command.
:  DLC will send an I frame.
DLC should issue a TEST (or appropriate equivalent for non LAN DLCs) but need not reserve the resources required for a circuit yet.
DLC will send a Test response or XID response from the null SAP.
DLC will send a Test command to the null SAP.
DLC will send an XID command or an XID response.
Start the CIRCUIT START timer.
DLC RESOLVE R and DLC START DL actions require the DLC to reserve the resources necessary for a link station as they are used only when a circuit is about to be started.
The DLC RESOLVE action is used for topology explorer traffic and does not require such resources to be reserved, though a DLC implementation may choose not to distinguish this from the DLC START DL action.
See section 5.4 for details of the actions and events for explorer frames.
The Data Link Switch is described by a state transition table as documented in the following sections.
Each of the states is described below in terms of the events, actions, and next state for each transition.
If a particular event is not listed for a given state, no action and no state transition should occur for that event.
Any significant comments concerning the transitions within a given state are given immediately following the table representing the state.
A separate state machine instance is maintained by the Data Link Switch for each end to end circuit.
The number of circuits that may be supported by each Data Link Switch is a local implementation option.
The CANUREACH ex, ICANREACH ex, NETBIOS NQ ex, and
NETBIOS NR ex are SSP messages that are not associated with a particular circuit.
The processing of these messages is covered in section 5.4.
It is assumed that each Data Link Switch will build a set of topology tables giving the identity of each Data Link Switch that can reach a specific MAC address or a specific NetBIOS name.
This table can be built  using the explorer frames, as per the Explorer FSM in section 5.4.
As a consequence, the amount of search traffic can be kept to a minimum.
Upon receipt of a TEST command, broadcast XID or NetBIOS NAME QUERY, the Data Link Switch checks the topology table for the target MAC/SAP or NetBIOS name.
If there is no matching entry in the table, the Data Link Switch uses the explorer FSMs in section 5.4 to locate the target MAC/SAP or NetBIOS name.
When the first non broadcast XID or SABME flows,
the Data Link Switch issues a CANUREACH cs to attempt to start a circuit.
The CANUREACH cs message is sent to only those Data Link Switches that are known to be able to reach the given MAC address.
The mechanism by which a topology table entry is determined to be out of date and is deleted from the table is implementation specific.
The DISCONNECTED state is exited upon the sending of a CANUREACH cs by the origin DLSw or the receipt of a CANUREACH cs message by a prospective target Data Link Switch.
In the latter case, the Data Link Switch will issue a Test command to the target station (i.e., DLC START DL signal is presented to DLC).
The RESOLVE PENDING state is entered upon receipt of a CANUREACH cs message by the target DLSw.
A data link is started, causing a Test command to be sent by the DLC.
Several CANUREACH cs messages can be received in the RESOLVE PENDING state.
The Data Link Switch may update its topology information based upon the origin MAC address information in each CANUREACH cs message.
Upon the receipt of a DLC DL STARTED signal in the RESOLVE PENDING state, the Data Link Switch may update its topology table base upon the remote MAC address information.
The ICANREACH cs message must be returned to the first partner DLSw from which a CANUREACH cs was received for this circuit, or an implementation may optionally reply to all partners from which the CANUREACH cs was received.
The RESOLVE PENDING state is exited once the data link has been started (i.e., a DLC DL STARTED signal is received as a result of a Test response received by the DLC).
The target Data Link Switch then enters the CIRCUIT PENDING state.
The CIRCUIT START state is entered by the origin Data Link Switch when a DLC XID or DLC CONTACTED signal has been received from the DLC.
The CIRCUIT START state is exited upon receipt of an ICANREACH cs message.
A REACH ACK message is returned to the target Data Link Switch.
If the CIRCUIT START state was entered due to a DLC XID signal, an XIDFRAME message containing the XID is sent to the target Data Link Switch.
If the CIRCUIT START state was entered due to a DLC CONTACTED signal, a CONTACT message is sent to the target Data Link Switch.
The CIRCUIT PENDING state is entered by the target Data Link Switch following the sending of an ICANREACH cs message.
In this state it is awaiting the reception of a REACH ACK message from the origin Data Link Switch.
If the target Data Link Switch happens to receive a SABME command from the target station while in the CIRCUIT PENDING state (i.e., a DLC CONTACTED signal received from the DLC), the reception of the REACH ACK message causes the target Data Link Switch to enter the CONNECT PENDING state and to send a CONTACT message to the origin Data Link Switch.
If no such SABME is received, the receipt of the REACH ACK causes the Data Link Switch to enter CIRCUIT ESTABLISHED state.
The CONNECT PENDING state is entered when a DLC CONTACTED signal has been received from the DLC (i.e., a SABME command has been received).
A CONTACT message it then  issued.
The state is exited upon the receipt of a CONTACTED message.
If a DLC RESET signal is received, the local data link is restarted and a RESTART DL message is sent to the remote DLSw.
An ICANREACH cs received after the transition to CONNECT PENDING state indicates that more than one CANUREACH cs was sent at circuit establishment time and the target station was found by more than one Data Link Switch partner.
A HALT DL NOACK is sent to halt the circuit started by the Data Link Switch partner that originated each such ICANREACH cs.
Some implementations will also send a Test command in order to restart the data link to the station that sent the SABME command (i.e., a DLC START DL will be issued).
The CIRCUIT ESTABLISHED state is entered by the origin Data Link Switch from the CIRCUIT START state, and by the target Data Link Switch from the CIRCUIT PENDING state.
The state is exited when a connection is started (i.e., DLC receives a SABME command) or CONTACT is received.
The next state is CONTACT PENDING or CONNECT PENDING.
An ICANREACH cs received after the transition to CIRCUIT ESTABLISHED state indicates that more than one CANUREACH cs was sent at circuit establishment time and the target station was found by more than one Data Link Switch partner.
A HALT DL NOACK is sent to halt the circuit started by the Data Link Switch partner that originated each such ICANREACH cs.
The CONTACT PENDING state is entered upon the receipt of a CONTACT message, which causes the Data Link Switch to issue a DLC CONTACT signal to the DLC (i.e., DLC sends a SABME command).
This state is then exited upon the receipt of a DLC CONTACTED signal from the DLC (i.e., a UA response received).
If a RESTART DL message is received, indicating that the remote Data Link Switch has received a DLC RESET signal, the local Data Link Switch sends a DISC command frame on the adjacent LAN (i.e., DLC HALT DL signal) and enter the RESTART PENDING state.
An ICANREACH cs received after the transition to CONTACT PENDING state indicates that more than one CANUREACH cs was sent at circuit establishment time and the target station was found by more than one Data Link Switch partner.
A HALT DL NOACK is sent to halt the data link started by the Data Link Switch partner that originated this ICANREACH cs.
The CONNECTED state is entered from the CONNECT PENDING state upon the receipt of a CONTACTED message or from the CONTACT PENDING state upon the receipt of a DLC CONTACTED signal.
The CONNECTED state is exited usually under one of two conditions: a DLC ERROR signal received from the DLC (e.g., a DISC command received by the local DLC), or a HALT DL message received from the other Data Link Switch (e.g., a DISC command received by the remote DLC).
A SABME command (i.e., a DLC RESET signal) received by either Data Link Switch will also cause the two Data Link Switches to leave the CONNECTED state and attempt to restart the circuit.
Following the receipt of a SABME, the local Data Link Switch sends a RESTART DL message to the other Data Link Switch and enters the CIRCUIT RESTART state.
Upon the receipt of the RESTART DL message, the remote Data Link Switch sends a DISC command (i.e., DLC HALT DL signal) and enters the RESTART PENDING state.
An ICANREACH cs received after the transition to CONNECTED state indicates that more than one CANUREACH cs was sent at circuit establishment time and the target station was found by more than one Data Link Switch partner.
A HALT DL NOACK is sent to halt the circuit started by the Data Link Switch partner that originated each such ICANREACH cs.
Some implementations will also send a Test command in order to restart the data link to the station that sent the SABME command (i.e., a DLC START DL will be issued).
The CIRCUIT RESTART state is entered if a DLC RESET signal is received from the local DLC.
This was caused by the receipt of a SABME command while a connection was currently active.
A DM response will be issued to the SABME command and the Data Link Switch will attempt to restart the end to end circuit.
The CIRCUIT RESTART state is exited through one of two transitions.
The next state depends upon the time the local DLC has reached the contacted state (i.e., a DLC CONTACTED signal is presented) relative to the receipt of the DL RESTARTED message.
This signal is caused by the origin station resending the SABME command that initially caused the Data Link Switch to enter the CIRCUIT RESTART state.
The two cases are as follows: 1) DL RESTARTED message received before the DLC CONTACTED signal
In this case, the CIRCUIT ESTABLISHED state is entered.
DL RESTARTED message received after the DLC CONTACTED signal
In this case, the CONNECT PENDING state is entered.
The DISCONNECT PENDING state is entered when a DLC ERROR signal is received from the local DLC.
Upon receipt of this signal, a HALT DL message is sent.
Once an DL HALTED message is received, the state is exited, and the Data Link Switch enters the DISCONNECTED state.
The RESTART PENDING state is entered upon the receipt of a RESTART DL message from the remote DLSw while the local Data Link Switch is in either the CONTACT PENDING state or the CONNECTED state, which causes the local DLSw to issue a DISC command to the DLC.
Upon the receipt of the UA response (DLC DL HALTED), the data link is restarted, a DL RESTARTED message is returned to the remote DLSw, and the CIRCUIT ESTABLISHED state is entered.
Some implementations will send a Test command in order to restart the data link to the target station (i.e., a DLC START DL will be issued) prior to sending the DL RESTARTED message.
The HALT PENDING state is entered upon the receipt of a HALT DL message.
This causes the local DLC to issue a DISC command.
Upon the receipt of the UA response (DLC DL HALTED), a DL HALTED message is returned to the remote DLSw and the DISCONNECTED state is entered.
The HALT PENDING NOACK state is entered upon the receipt of a HALT DL NOACK message.
This causes the local DLC to issue a DISC command.
Upon the receipt of the UA response (DLC DL HALTED), the DISCONNECTED state is entered.
The NetBIOS protocols use a number of UI frames for directory services and the transmission of datagrams.
Most of these frames are directed to a group MAC address (GA) with the routing information field indicating spanning tree explorer (STE) (a.k.a. Single Route Broadcast).
The NB Add Name Response and NB
Name Recognized frames are directed to a specific MAC address with the routing information field indicating an all routes explorer frame (ARE)
The NB Status Response frame, is directed to a specific MAC address with the routing information field indicating a specifically routed frame (SRF).
The handling of these frames is summarized in the following table.
The above actions do not apply in the following states:
CIRCUIT ESTABLISHED, CONTACT PENDING, CONNECT PENDING, CONNECTED, and CIRCUIT PENDING.
The handling of the remaining two UI frames used by NetBIOS systems, NB Name Query and NB Name
Recognized, are documented as part of the DLSw state machine in the previous section (i.e., DISCONNECTED and RESOLVE PENDING states).
Furthermore, the handling of NetBIOS datagrams (i.e., NB Datagram) sent to a specific MAC address
is also governed by the DLSw state machine.
Some implementations also issue Test frames during the exchange of the NetBIOS, NB Name Query and NB Name Recognized.
This exchange of protocol data units occurs during the start of a data link and is used to determine the routing information.
Most other implementations of NetBIOS will use the NB Name Query/NB Name Recognized exchange to determine routes in conjunction with resolving the NetBIOS names.
These differences are not reflected in the SSP protocols.
The handling of the NetBIOS specific SSP messages is given in the following table.
The above actions apply to all DLSw states.
The handling of NetBIOS datagrams sent within DGRMFRAME messages is governed by the DLSw state machine.
The DGRMFRAME message type is employed instead of the DATAFRAME message type once the end to end circuit has been established.
At that time, the message is addressed according to the pair of Circuit IDs in the message header instead of relying upon the MAC address information in the token ring header.
The CANUREACH ex, ICANREACH ex, NETBIOS NQ ex, and NETBIOS NR
ex SSP messages explore the topology of the DLSw cloud and the networks attached to it.
These explorer frames are used to determine the DLSw partners through which a MAC or NetBIOS name can be accessed.
This information may optionally be cached to reduce explorer traffic in the DLSw cloud.
If a DLSw is aware from cached information that a given MAC address or NetBIOS name is accessible through a given partner DLSw, it should direct all circuit setup attempts to that partner.
If the circuit setup fails, or no such data is available in the MAC or name cache database, the DLSw may fallback to issuing the setup attempt to all DLSw partners on the assumption that the cached data is now out of date.
The mechanism for determining when to use such a fallback is implementation defined.
DLSw implementations may also use a local MAC cache to enable responses to CANUREACH ex requests to be issued without the need for TEST frame exchange (or equivalent) until the CANUREACH cs is received.
Again, the fallback mechanism for determining when such local cache data is out of date is implementation defined.
The use of either cache is an optional function in DLSw.
An implementation may choose to always issue explorer frames or to use either or both types of cache.
The following sections describe the FSMs used for explorer frames.
The DLC events and actions are a subset of those described in section 5.2 for the main circuit FSM.
The FSM described below is used to handle explorer frames routed by MAC address.
There is one instance of this FSM for each Data Link ID (Target and Origin MAC/SAP pair) for which explorer traffic is flowing.
The states in this FSM are as follows.
This state is exited when a DLC RESOLVE C request is received from the DLC or a CANUREACH ex is received from a remote DLSw.
A DLSw implementation may optionally reply from to CANUREACH ex messages on the basis of cached topology information, in which case the DLC RESOLVE exchange (i.e., TEST) is not required.
If cache is not used, or no match is found, and the DLC permits the use of TEST, DLC RESOLVE is issued to locate the target MAC and the state changes to RECEIVED EX.
If no cache entry is available and TEST is not allowed by the DLC, a received CANUREACH ex frame is ignored.
SENT EX is entered when the DLSw has issued a CANUREACH ex message to locate a MAC address.
This state is exited when a remote DLSw returns a matching ICANREACH ex, or after an implementation defined timeout.
DLC RESOLVE events received in this state correspond to TEST retries by the origin DLC station and are absorbed.
An implementation may choose whether to handle explorer frame crossover either by using entirely separate FSM instances and simply allowing both ends to issue TEST frames, or by detecting a reverse CANUREACH ex frame here and issuing an ICANREACH ex message and DLC RESOLVE R action.
This state is exited when the DLC RESOLVED response is received, or after an implementation defined timeout.
If the target MAC is located, the DLSw must reply to the first received CANUREACH ex that caused the move to this state.
If additional CANUREACH ex messages are received in this state from other remote DLSw partners, the DLSw may optionally reply to these messages too but it is not required to do so.
An implementation may choose whether to handle explorer frame crossover either by using entirely separate FSM instances and simply allowing both ends to issue TEST frames, or by detecting such a reverse DLC RESOLVE C event here and issuing an ICANREACH ex message and DLC RESOLVE R action.
The FSM described below is used to handle explorer frames routed by NetBIOS names
There is one instance of this FSM for each unique combination of Source Name, Destination Name, Data 2 field and Response Correlator.
An explorer frame has been both sent and received for the same (potential) NetBIOS circuit.
The RESET state is the initial state for the NETBIOS NQ/NR explorer FSM.
It is exited when the DLC receives either a NETBIOS NQ ex or a DLC DGRM containing a NetBIOS NAME QUERY frame.
If a NETBIOS NQ ex message is received, the NAME QUERY is propagated to the DLC and this FSM moves to state RECEIVED EX.
If a NetBIOS NAME QUERY frame is received, the NETBIOS NQ ex is propagated either to the appropriate DLSw partners (see below), and this FSM moves to state SENT EX.
Unlike SNA traffic where the CANUREACH ex/ICANREACH ex exchange can be omitted if the MAC location is already cached, NETBIOS NQ ex/NETBIOS NR ex frames must always be issued during NetBIOS session setup in order that the NetBIOS session numbers are exchanged correctly between the DLC end stations.
If the location of a NetBIOS name is known from cached data,
the NETBIOS NQ ex need only be issued to the cached DLSw partners.
Otherwise the NETBIOS NQ ex should be issued to all partners that support NetBIOS.
Receive NETBIOS NR ex  DLC DGRM(NAME RECOG)
SENT EX is entered when the local DLSw issues a NETBIOS NQ ex to its remote DLSw partners.
This state is exited when a NETBIOS NR ex is received from a remote DLSw, or if a matching NETBIOS NQ ex is received from a remote DLSw (i.e., a NETBIOS NQ ex crossover case).
If the local NetBIOS end station issues a NAME QUERY with a different session number from any previous NAME QUERY for this search, the NAME QUERY is propagated to the DLSw partners to ensure that the exchange of NetBIOS session numbers is handled correctly.
This state is exited when a NAME RECOGNIZED NetBIOS frame is received from the DLC, completing the query, or when a matching NAME QUERY is received from DLC (i.e., NAME QUERY crossover).
Receive NETBIOS NR ex  DLC DGRM(NAME RECOG)
This state is required if an implementation wishes to manage NQ/NR crossover cases from a single FSM instance by detecting 'opposite' NAME QUERY attempts between the same two NetBIOS names.
If separate FSM instances are used instead, this state is not required and the transitions to it from other states can be removed.
SENT RCV EX is exited when the NAME QUERY search in either direction is resolved.
If the local NetBIOS end station issues a NAME QUERY with a different session number from any previous NAME QUERY it has issued for this search, the NAME QUERY is propagated to the DLSw partners to ensure that the exchange of NetBIOS session numbers is correctly handled.
NetBIOS Session Numbers NetBIOS NAME QUERY and NAME RECOGNIZED frames exchange NetBIOS session numbers between the end stations.
For correct NetBIOS operation over DLSw, it is important that all SSP NETBIOS NQ ex frames received by a DLSw cause NetBIOS NAME QUERY frames to flow on the LAN with the new session number from the NETBIOS NQ ex.
These frames cannot be replied to from a cache of locally available NetBIOS names in the same way that MAC addresses and CANUREACH ex messages can be handled.
Also, NAME QUERY messages are normally retried several times on the LAN.
The generation and absorption of such frames is outside the scope of the FSM defined above.
The Switch to Switch Protocol is used to setup and take down circuits between a pair of Data Link Switches.
Once a circuit is established, the end stations on the local networks can employ LLC Type 1
(connectionless UI frames) protocols end to end.
In addition, the end systems can establish an end to end connection for support of LLC Type 2 (connection oriented I frames)
protocols (Type 2 I frames go end to end, supervisory frames are handled locally).
The term, Data Link, is used in this document to refer to both a "logical data link" when supporting Type 1 LLC services, and a "data link connection" when supporting Type 2 LLC services.
In both cases, the Data Link is identified by the Data Link ID defined in section 3.2.
DOES NOT SHOW ALL POSSIBLE VARIATIONS AND OPTIONS ON PROTOCOL FLOWS FOR SNA/SDLC, SSP, AND LLC PROTOCOLS.
The two basic startup flows from a pure FSM perspective are shown below.
The first flow is a startup involving XIDs and the second is one without XIDs.
Flow #1 DLSw Startup With XIDs
In keeping with a paradigm of 'DLSw is a big 802.2 LAN', all other DLC types (SDLC for now, QLLC, channel, or whatever in the future) would be handled by a 'DLC transformation layer' that would transform the specific protocol's events into the appropriate DLSw DLC events and DLSw DLC actions into the appropriate protocol actions.
The XIDs that flow in the SSP XIDFRAME should stay 802.2ish (i.e., ABM bit set) and leave it up to the DLC transformation layer to suit the XID to its particular DLC type.
Here is an example of a leased SDLC PU 2.0 device as the origin station.
It should use Flow #2 since it is not known if the other side is a LAN, a switched line or a leased line.
PU 2.0 is configured in DLSw to    DLC XID(null)
Here is an example of a switched SDLC PU 2.0 device as the origin station.
Here is an example of a leased SDLC PU 2.0 device as the target station.
ICANREACH cs    DLC DL STARTED
Here is an example of a switched SDLC PU 2.0 device as the target station.
Here is an example of an SDLC T2.1 device as the target station.
(SDLC T2.1 origin station would look just like the LAN T2.1 origin station)
The following figure depicts the protocol flows that result from restarting the end to end connection.
This causes the Data Link Switches to terminate the existing connection and to enter the Circuit Established state awaiting the start of a new connection.
DLSw Link Restart Message Protocols Upon receipt of a SABME command from the origin station, the origin DLSw will send a RESTART DL message to the target DLSw.
A DM response is also returned to the origin station and the data link is restarted.
Upon receipt of the RESTART DL message, the target DLSw will issue a DISC command to the target station.
The target station is expected to return a UA response.
The target DLSw will then restart its data link and send an DL RESTARTED message back to the origin DLSw.
During this exchange of messages, both Data Link Switches change states from Connected state to Circuit Established state.
If the origin station now resends the SABME command, the origin DLSw will send a CONTACT message to the target DLSw.
If the SABME command is received prior to the receipt of the DL RESTARTED message (case 2 in the figure), the CONNECT message is delayed until the DL RESTARTED message is received.
The resulting protocol flows at this point parallel those given above for the connect sequence.
6.3  Disconnect Protocols The following figure depicts the protocol flows that result from the end system terminating an existing connection.
Not only is the connection terminated, but the circuit between the Data Link Switches is taken down.
DLSw Disconnect Message Protocols Upon receipt of a DISC command from the origin station, the origin DLSw will reply with a UA response and issue a HALT DL message to the target DLSw.
Upon receipt of the HALT DL message, the target DLSw will send a DISC command to the target station.
The target station will then respond with a UA response, causing the target DLSw to return a DL HALTED message to the origin DLSw.
During this exchange of messages, both Data Link Switches change states from the Connected state to the Disconnected state.
If the TCP connection between two Data Link Switches fails, all connections that are currently multiplexed on the failed TCP connection will be taken down.
This implies that both Data Link Switches will send DISC commands to all the local systems that are associated with the failed connections.
Upon sending the DISC command, the Data Link Switch will enter the DISCONNECTED state for each circuit.
The Data Link Switching Capabilities Exchange is a special DLSw Switch to Switch control message that describes the capabilities of the sending data link switch.
This control message is sent after the switch to switch connection is established and optionally during run time if certain operational parameters have changed and need to be communicated to the partner switch.
The actual contents of the Capabilities Exchange is in the data field following the SSP message header.
The Capabilities Exchange itself is formatted as a single General Data Stream (GDS) Variable with multiple type "LT" structured subfields.
The SSP Message Header has the following fields set for the Capabilities Exchange:
Other fields in the SSP header are not referenced and should be set to zero.
The value of LL is the sum of the length of all fields in the GDS Variable (i.e., length of LL   length of ID   length of Control Vectors).
Type LT structured subfields consist of a 1 byte length field (the "L"), a 1 byte type field (the "T") and
The length field includes itself as well as the structured subfield.
The structured subfield consists of the type field and data so the length is n   2.
This imposes a length restriction of 253 bytes on all data contained in a structured subfield.
Range Control Vector identifiers (i.e., Type) in the range of 0x80 through 0xCF are reserved for use by the Data Link Switching standard.
Control Vector identifiers (i.e., Type) in the range of 0xD0 through 0xFD are used for vendor specific purposes.
Currently defined vectors are: Vector Description
Mac Address Exclusivity Control Vector   0x85
Name Exclusivity Control Vector  0x88
MAC Address List Control Vector
Since their contents can greatly affect the parsing of the Capabilities Exchange GDS Variable, the required control vectors must occur first and appear in the following order:  Vendor Id, DLSw Version Number, Initial Pacing Window, Supported SAP List.
The remainder of the Control Vectors can occur in any order.
Control Vectors that can be repeated within the same message (e.g., MAC Address List Control Vector and NetBIOS Name List Control Vector) are not necessarily adjacent.
It is advisable, but not required, to have the Exclusivity Control Vector occur prior to either of the above two vectors so that the use of the individual MAC addresses or NetBIOS names will be known prior to parsing them.
Both the Vendor Context and Vendor Specific control vectors can be repeated.
If there are multiple instances of the Vendor Context control vector, the specified context remains in effect for all Vendor Specific control vectors until the next Vendor Context control vector is encountered in the Capabilities Exchange.
Initial Capabilities Exchange Capabilities exchange is always the first SSP message sent on a new SSP connection between two DLSw switches.
This initial Capabilities Exchange is used to identify the DLSw version that each switch is running and other required information, plus details of any optional extensions that the switches are capable of supporting.
If a DLSw receives an initial capabilities message that is incorrectly formatted or contains invalid or unsupported data that prevents correct interoperation with the partner DLSw, it should issue a Capabilities Exchange negative response.
If a DLSw receives a negative response to its initial capabilities message, it should take down its TCP connections with the offended partner.
Note:  Pre v1.0 DLSw implementations do not send or respond to capabilities messages and can be identified by the lack of capabilities exchange as the first message on a new SSP connnection.
This document does not attempt to specify how to interoperate with back level DLSw implementations.
Run Time Capabilities Exchange Capabilities exchange always occurs when the SSP connection is started between two DLSw switches.
Capabilities Exchange can also occur at run time, typically when a configuration change is made.
If a node does not support receiving/using Run Time Capabilities Exchange and receives one, it should discard it quietly (not send back a negative response).
If a node supports receipt of run time capabilities, it should send a positive or negative response as appropriate.
The receiver of a negative response to a run time capabilities message is not required to take down its TCP connections with the offended partner.
Run time Capabilities Exchange can consist of one or more of the following control vectors.
Note that the control vectors required at start up are not present in a run time Capabilities Exchange.
MAC Address Exclusivity CV, 2.
NetBIOS Name Exclusivity CV, 3.
MAC Address List CV, 4.
NetBIOS Name List CV, 5.
Supported SAP List CV, 6.
A run time capabilities exchange is a replacement operation.
As such, all pertinent MAC addresses and NetBIOS names must be specified in the run time exchange.
In addition, run time changes in capabilities will not effect existing link station circuits.
Capabilities Exchange Filtering Responsibilities Recipients of the SAP, MAC, and NetBIOS lists are not required to actually use them to filter traffic, etc., either initially or at run time.
DLSw Capabilities Exchange Structured Subfields
The Capabilities Exchange Subfields are listed in the table below and are described in the following sections:
d control vector identifies the manufacturer's IEEE assigned Organizationally Unique Identifier (OUI) of the Data Link Switch sending the DLSw Capabilities Exchange.
The OUI is sent in non canonical (Token Ring) format.
This control vector is required and must be the first control vector.
the 3 byte Organizationally Unique Identifier (OUI) for the vendor (non canonical format)
The DLSw Version control vector identifies the particular version of the DLSw standard supported by the sending Data Link Switch.
This control vector is required and must follow the Vendor Id Control Vector.
The Initial Pacing Window control vector specifies the initial value of the receive pacing window size for the sending Data Link Switch.
This control vector is required and must follow the DLSw Version Control Vector.
Note:  The pacing window size must be non zero.
The Version String control vector identifies the particular version number of the sending Data Link Switch.
The format of the actual version string is vendor defined.
This control vector is optional.
that identifies this as the Version String structured subfield 2 n
the ASCII string that identifies the software version for the sending DLSw.
MAC Address Exclusivity (0x85) Control Vector
The MAC Address Exclusivity control vector identifies how the MAC Address List control
vector data is to be interpreted.
Specifically, this control vector identifies whether the MAC addresses in the MAC Address List control
vectors are the only ones accessible via the sending Data Link Switch.
If a MAC Address List control vector is specified and the MAC Address Exclusivity control vector is missing, then the MAC addresses are not assumed to be the only ones accessible via this switch.
A node may specify that it supports no local MAC addresses by including in its capabilities the MAC Address List Exclusivity CV (with byte 2   0x01), and not including any instances of the MAC Address List CV.
key   0x85 that identifies this as the MAC address Exclusivity structured
an indicator of the relationship of the MAC addresses to the sending Data Link Switch.
the MAC addresses specified in this Capabilities Exchange can be accessed via this switch but are not the exclusive set (i.e., other entities are accessible in addition to the ones specified
the MAC addresses specified in this Capabilities Exchange are the only ones accessible via this switch.
SAP List Support (0x86) Control Vector
The SAP List Support control vector identifies support for Logical Link Control SAPs (DSAPs and SSAPs) by the sending Data Link Switch.
This is used by the DLSw that sent the SAP List Support control vector to indicate which SAPs can be used to support SNA and optionally NetBIOS traffic.
This may be used by the DLSw that receives the SAP list to filter explorer traffic (TEST, XID, or NetBIOS UI frames) from the DLSw state machine.
For SNA, a DLSw should set bits for all SAP values (SSAP or DSAP) that may be used for SNA traffic.
For NetBIOS support, the bit for SAP 0xF0 should be set (if not supported then the same bit should be cleared).
Each bit in the SAP control vector data field represents a SAP as defined below.
This vector is required and must follow the Initial Pacing Window Control Vector.
that identifies this as the Supported SAP List structured subfield
Each Bit within the 16 byte bit vector will indicate whether an even numbered SAP is enabled (b'1') or disabled (b'0').
Each Byte within the 16 byte bit vector will be numbered from 0
The bits in each byte indicate whether an even numbered SAP is enabled (b'1') or disabled (b'0').
(Most significant bit first) Bits 7
By combining the byte label with the enabled bits, all supported SAPs can be determined.
In the following diagram, 'n' would equal 0 through F depending on which byte was being interpreted.
Bit ordering is shown below with bit 7 being the most significant bit and bit 0 the least significant bit.
SAP 0xF0 for NetBIOS Data Link Switching would be as follows:
The TCP Connections control vector indicates the support of an alternate number of TCP Connections for the Data Link Switching traffic.
The base implementation of Data Link Switching supports two TCP Connections, one for each direction of data traffic.
This control vector is optional.
If it is omitted in a DLSw Capabilities Exchange, then two TCP Connections are assumed.
It is further assumed that if a Data Link  Switch can support one TCP Connection, it can support two TCP Connections.
If TCP Connections CV values agree and the number of connections is one, then the  DLSw with the higher IP address must tear down the TCP connections on its local port 2065.
The format of the TCP Connections Control Vector is shown below:
the number of TCP Connections may be brought down to one after Capabilities Exchange is completed.
the number of TCP Connections will remain at two for the duration of the DLSw connection.
7.6.8  NetBIOS Name Exclusivity (0x88
The NetBIOS Name Exclusivity control vector identifies how the NetBIOS Name List control vector data
Specifically, this control vector identifies whether the NetBIOS Names in the NetBIOS Name List control
vectors are the only ones accessible via the sending Data Link Switch.
If a NetBIOS Name List control vector is specified and the NetBIOS Name Exclusivity control vector is missing, then the NetBIOS Names are not assumed to be the only  ones accessible via this switch.
A node may specify that it supports no local NetBIOS names by including in its  capabilities the NetBIOS Name List Exclusivity CV (with byte 2   0x01), and not including any instances of the NetBIOS Name List CV.
that identifies this as the NetBIOS Name Exclusivity structured
the NetBIOS Names specified in this Capabilities Exchange
can be accessed via this switch but are not the exclusive set (i.e., other entities are accessible in addition to the ones specified
the NetBIOS Names specified in this Capabilities Exchange
are the only ones accessible via this switch.
7.6.9  MAC Address List (0x89) Control Vector
The MAC Address List control vector identifies one or more MAC addresses that are accessible through the sending Data Link Switch.
This control vector specifies a single MAC address value and MAC address mask value to identify the MAC address or range of MAC addresses.
MAC addresses and masks are in non canonical (Token Ring) format in this control vector.
This control vector is optional and can be repeated if necessary.
> is the MAC Address Value specified in this control vector <mac addr mask
the MAC Address Mask specified in this control vector Note 2:
If an individual MAC Address is desired, then <mac addr  value> should be the individual MAC address and <mac addr mask
that identifies this as the MAC Address List structured
in the above formula 7.6.10  NetBIOS Name List (0x8A) Control Vector
The NetBIOS Name List control vector identifies one or more NetBIOS names that are accessible through the sending Data Link Switch.
This control vector specifies a single NetBIOS name in ASCII.
However, the NetBIOS name can consist of "don't care" and "wildcard" characters to match on a number of NetBIOS names.
If an individual character position in the NetBIOS name in this control vector contains a '?'
, then the corresponding character position in real NetBIOS name is a "don't care".
' ' is only considered a wildcard if it appears at the end of a name.
All blanks or nulls at the end of NetBIOS names in this control vector are ignored.
NetBIOS group names can exist across several LANs/networks.
As such, NetBIOS  group names received in a NetBIOS Name List Control Vector can not be treated the same as NetBIOS individual names.
The Individual/Group Flag allows Data  Link Switches to distinguish between the two.
This control vector is optional and can be repeated if necessary.
Length of the NetBIOS Name List structured subfield (maximum   0x13)
Group NetBIOS Name 3 n
The Vendor Context control vector identifies
the manufacturer's IEEE assigned Organizationally Unique Identifier (OUI) of the Data Link Switch sending the DLSw Capabilities Exchange.
The OUI is sent in non canonical (Token Ring) format.
This control vector is optional and is used to provide the context for any Vendor Specific control vectors that follow in the Capabilities Exchange.
If there are multiple instances of the Vendor Context control vector, the specified context remains in effect for all Vendor Specific control vectors until the next Vendor Context control vector is encountered.
that identifies this as the Vendor Context structured
the 3 byte Organizationally Unique Identifier (OUI) for the vendor (non canonical format)
There are two kinds of DLSw Capabilities Exchange Responses: positive and negative.
A positive response is returned to the sending Data Link Switch if there were no errors encountered in the DLSw Capabilities Exchange Request.
A negative response is returned if there is at least one error encountered.
1    Length, in binary, of the DLSw Capabilities Exchange Response GDS Variable.
The value of LL in this case is 0x0004.
1    Length, in binary, of the DLSw Capabilities Exchange Response GDS Variable.
The value of LL is the sum of the length of all fields in the GDS Variable (i.e., length of LL   length of ID   length of Offsets/Reasons).
4 5    Offset into the DLSw Capabilities Exchange Request of the error.
Offset should always point to the start of the GDS Variable or a specific control vector.
6 7    Reason code that uniquely identifies the error.
(The value of Offset is ignored.)
invalid GDS id for a DLSw Capabilities Exchange Request.
(The value of Offset is ignored.)
Vendor Id control vector is missing.
(The value of Offset is ignored.)
DLSw Version control vector is missing.
(The value of Offset is ignored.)
Initial Pacing Window control vector is missing.
(The value of Offset is ignored.)
length of control vectors doesn't correlate to the length of the GDS variable 0x0007
invalid control vector id 0x0008
length of control vector invalid 0x0009
out of sequence control vector (for repeating control vector)
DLSw Supported SAP List control vector is missing.
(The value of Offset is ignored.)
Multiple Offset, Reason pairs can be returned with one pair for each error encountered.
This section describes the required Pacing and Flow Control mechanisms used by a Data Link Switch.
While it is beyond the scope of this document to specify a policy for how an implementation maps SSP flow control to the native data link flow control at the edges, the following paragraphs describe a general philosophical overview of how the mechanism is to be applied.
There are two types of flows which are covered by the flow control mechanism: connection oriented and connectionless.
In the first, connection oriented flows, the implementer is to map the native flow control mechanism of the two data links at the boundaries to the SSP flow control mechanism thus presenting an end to end flow control mechanism which "pushes back" all the way to the originating station in either direction.
However, in the case of connectionless traffic, this is not possible at the data link level because there is no native flow control mechanism for connectionless data links.
At first glance it is tempting to allow connectionless traffic to flow the DLSw cloud unthrottled.
However, the rationale for subjecting these flows to flow control within the DLSw cloud is to "push" the discarding of frames (should this become necessary) back to the ingress of the DLSw cloud.
This "early discarding" of excessive DATAGRAMs should allow the cloud to remain deterministic without wasting network bandwidth.
Each circuit consists of two data flows, one in each direction.
Each data flow has its own independent flow control mechanism.
For each data flow there is an entity that originates traffic, referred to as the sender, and a target entity which receives the traffic, referred to as the receiver.
A sender may only send data when its receiver has granted explicit permission to send a discrete number of data units.
Data units are defined as either a DGRMFRAME or an INFOFRAME.
The receiver grants permission to send data units by sending a Flow Control Indicator (FCIND  defined later).
The sender must acknowledge all FCINDs by sending a Flow Control Acknowledgment
A sending implementation must maintain these values: 1.
The number of units (frames) which the sender currently has permission to send. 2.
CurrentWindow This is a discrete number of units, controlled by the receiver, which is basis for granting additional units.
3. InitialWindowSize Global for all circuits on a transport connection.
Learned in capabilities exchange when the transport connection is established.
It specifies an initial value for CurrentWindow when each circuit is established.
A receiving implementation must maintain these values: 1.
CurrentWindow This is a discrete number of units, controlled by the receiver, which is basis for granting additional units.
2. InitialWindowSize Global for all circuits on a transport connection.
Sent in capabilities exchange when the transport connection is established.
It specifies an initial value for CurrentWindow when each circuit is established.
The sender owes an FCACK.
If true, no FCIND may be sent.
The Flow control Byte is contained at offset 15 in both the Information and Control SSP messages.
From a flow control perspective, the flow control information in the two frames are handled identically.
The following diagram describes the format of the Flow Control Byte (Bit 7 is the most significant and Bit 0
is the Least significant bit of the octet):
Flow Control Indicator FCA :
Flow Control Ack FCO :
Flow Control Operator Bits 000
Repeat Window Operator 001 Increment Window Operator 010
110 Reserved 111 Reserved A frame with the FCI bit set is referred to as a Flow Control Indication (FCIND).
An FCIND is used to manage the flow in the opposite direction of the frame which bears it.
A frame with the FCA bit set is referred to as a Flow Control Acknowledgment (FCACK).
An FCACK is used to manage the flow in the same direction of the frame which bears it.
A frame may be both a FCIND and an FCACK.
A frame bearing an FCIND or FCACK may also contain data for the flow in the direction it is traveling.
In such a frame, the FCIND or FCACK are said to be piggy backed.
A non piggy backed FCIND is called an Independent Flow Control Indication (IFCIND) and a non  piggy backed FCACK is called an Independent Flow Control Acknowledgment (IFCACK).
IFCIND and IFCACK messages are sent in a Independent Flow Control SSP message (type 0x21).
A frame may be both an IFCIND and an IFCACK.
It is desirable to carry information in control messages so as to reduce the need to send a flow control only message.
The diagram below shows the messages that may carry valid flow control information:
ICANREACH cs cannot carry FCA, as there could not be an outstanding FCI.
Granting Permission to Send Data A receiver grants a sender permission to send units of data by sending FCIND.
Each FCIND is further qualified by a flow control operator, which is encoded in the FCO bits of the FCIND header.
With one exception (the Reset Window operator)
all operators may be either piggy backed or carried in a IFCIND.
The five flow control operators are outlined below: 8.3.1  Repeat Window Operator
This operator is processed as follows:
(CurrentWindow unchanged) GrantedUnits    CurrentWindow 8.3.2
This operator is processed as follows:
CurrentWindow 8.3.3  Decrement Window Operator
This operator is processed as follows:
This operator may only be sent if CurrentWindow is greater than one.
This operator is processed as follows:
CurrentWindow   0; GrantedUnits    0; NOTE:
This operator may only flow on an independent pacing indication (may NOT be piggy backed).
After sending this operator, the only legal subsequent operator is Increment Window.
This operator shall be processed as follows:
IF CurrentWindow > 1 THEN CurrentWindow   CurrentWindow / 2 ENDIF GrantedUnits
The divide by two operation is an unsigned integer divide (round down) or bit shift right operation.
Acknowledging a Flow Control Operator
Each sender must acknowledge each FCIND with an FCACK which is piggy backed on the next frame in the opposite direction in all cases except the Reset Window Operator.
The receiver may have no more than one unacknowledged FCIND outstanding at any time with one exception:
A Reset Window Operator may be sent while another FCIND is pending acknowledgment.
The FCI and FCO bits of the FCACK are used independently by the flow in the opposite direction
Acknowledging a Reset Window Operator Since this operator revokes all previously granted units, the sender must acknowledge this FCIND using an IFCACK (Independent Flow Control Acknowledgment).
This is the only case where IFCACK is used.
Should a sender receive a non reset FCIND followed by a Reset Window FCIND before acknowledging the first, it only acknowledges the Reset Window.
The FCI and FCO bits on these frames are used independently by the flow in the opposite direction.
8.5  Capabilities Exchange Initial Window Size
When two nodes establish a transport connection, they engage in a capabilities exchange (this is a requirement).
Refer to the Capabilities Exchange section 7 for further details.
The two nodes are required to exchange the following parameter: InitialWindowSize
This indicates to the partner what the sending flow entity initializes its CurrentWindow value to for each multiplexed circuit subsequently established on that transport connection.
This value must be non zero.
8.6  Circuit Startup Process as follows:
CurrentWindow   InitialWindowSize GrantedUnits    0 NOTE:
The InitialWindow Size variable has a scope of one per DLSw transport connection, while CurrentWindow and Granted units are maintained on a per circuit basis.
At circuit startup, a sender may not send data units until the receiver grants explicit permission with an FCIND message.
This grant may be an independent FCIND message or the FCIND
may be piggy backed on any of the message types listed in section 8.2.
The following two examples illustrate receiving implementations of varying degrees of complexity.
These are not meant to be complete implementations but rather serve to illustrate the protocol.
The examples are independent of the buffering model ( buffers may be deterministicly or statistically committed)
The examples assume a process model where each event processes to completion without being preempted by another event.
Fixed Pacing Example Consider the following variables, in addition to InitialWindowSize and CurrentWindow and FCACKOwed:
Can my implementation afford to grant CurrentWindow just now?
Buffers Become Available IF Check Buffers Available
THEN Send FCIND( Repeat Window)
FALSE ELSE Wait on buffers to become available (LIFO)
THEN Send FCIND( Repeat Window)
Wait on buffers to become available
Encode and Transmit FCIND piggybacked or as IFCIND 8.7.1.6
A Frame Arrives from Sender GrantedUnits
; IF frame is FCACK THEN IF FCACKOwed THEN FCACKOwed   FALSE ELSE Protocol Violation ENDIF ENDIF
IF NOT GrantDelayed THEN IF GrantedUnits <
Protocol Violation ELSE Repeat Window Operator ENDIF ENDIF ENDIF 8.7.2
The following example illustrates a receiving implementation that adjusts the window size and granted units based on buffer availability and transport utilization.
Consider the following variables, in addition to InitialWindowSize, CurrentWindow and FCACKOwed:
Can my implementation afford to grant X units just now?
Buffers Become Available IF Check Buffers Available THEN CurrentWindow ; Send FCIND( Decrement Window)
FALSE ELSE Wait on buffers to become available (LIFO)
IF Check Buffers Available (CurrentWindow)
THEN Send FCIND( Repeat Window)
Wait on buffers to become available (FIFO
( CurrentWindow   1) THEN CurrentWindow  Send FCIND( Increment Window)
ELSE Repeat Window Operator ENDIF 8.7.2.6
CurrentWindow Encode and Transmit FCIND piggybacked or as IFCIND 8.7.2.7
An FCACK Arrives from Sender GrantedUnits ; IF NOT FCACKOwed THEN
FALSE; IF NOT GrantDelayed THEN IF GrantedUnits < CurrentWindow THEN Increment Window Operator ELSE IF GrantedUnits   CurrentWindow
Repeat Window Operator END ENDIF 8.7.2.8
Non FCACK Frame Arrives from Sender GrantedUnits ;
IF GrantedUnits < CurrentWindow THEN Protocol Violation END ELSE
Repeat Window Operator ENDIF ENDIF ENDIF 8.8
Example Flows from the Above Implementation
The following diagram illustrates the use of adaptive pacing (use of Halve Window, and Reset operation are shown in subsequent diagrams).
The Halve Window Operator could have been sent before the granted units fell to zero.
The implementer may make a choice based on the severity of the condition.
The following flow diagram illustrates the ResetWindow operation if the receiver has no FCIND outstanding.
The next two flows  illustrate the Reset Window operation if the receiver has an outstanding FCIND.
The following events are considered protocol violations: 1.
Sender exceeds granted units or does not acknowledge FCIND on first frame after its receipt (the receiver can not discern the difference between the two).
Receiver does not follow a Reset Window Operator with an Increment Window Operator.
Receiver has two unacknowledged FCINDs ( other than Reset Window) outstanding.
Receiver sends Decrement Window Operator with a window size of one.
Receiver attempts to increment the window size beyond 0xFFFF.
Actions taken in response to protocol violations are left to the implementation of the node which discovers the violation.
If an implementation chooses to take down the circuit on which the violation occurred, HALT DL is the appropriate action.
Security Considerations Security issues are not discussed in this memo.
Chair's Address Louise Wells Internetwork Technology Institute 2021 Stratford Dr. Milpitas, CA  95035 EMail: lhwells@cup.portal.com
Editor's Address Alan K. Bartky Manager of Technology Sync Research Inc. 7 Studebaker Irvine, CA 91728 2013
Any questions or comments relative to the contents of this RFC should be sent to the following Internet address: aiw dlsw@networking.raleigh.ibm.com.
This address will be used to coordinate the handling of responses.
This is a widely subscribed mailing list and messages sent to this address will be sent to all members of the DLSw mailing list.
For specific questions relating to subscribing to the AIW and any of it's working groups send email to:
appn@vnet.ibm.com Information regarding all of the AIW working groups and the work they are producing can be obtained by copying, via anonymous ftp, the file aiwinfo.psbin or aiwinfo.txt from the Internet host networking.raleigh.ibm.com, located in directory aiw.
These mailing lists and addresses are subject to change.
