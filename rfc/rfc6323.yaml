- contents:
  - "                       Sender RTT Estimate Option\n          for the Datagram
    Congestion Control Protocol (DCCP)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies an update to the round-trip time (RTT)\n
    \  estimation algorithm used for TFRC (TCP-Friendly Rate Control)\n   congestion
    control by the Datagram Congestion Control Protocol\n   (DCCP).  It updates specifications
    for the CCID-3 and CCID-4\n   Congestion Control IDs of DCCP.\n   The update addresses
    parameter-estimation problems occurring with\n   TFRC-based DCCP congestion control.
    \ It uses a recommendation made in\n   the original TFRC specification to avoid
    the inherent problems of\n   receiver-based RTT sampling, by utilising higher-accuracy
    RTT samples\n   already available at the sender.\n   It is integrated into the
    feature set of DCCP as an end-to-end\n   negotiable extension.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6323.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Problems Caused by Sampling the RTT at the Receiver  .
    . . . .  4\n     2.1.  List of Problems Encountered with a Real Implementation
    \ .  4\n     2.2.  Other Areas Affected by the RTT Sampling Problems  . . . .
    \ 5\n       2.2.1.  Measured Receive Rate X_recv . . . . . . . . . . . . .  6\n
    \      2.2.2.  Disambiguation and Accuracy of Loss Intervals  . . . .  6\n       2.2.3.
    \ Determining Quiescence . . . . . . . . . . . . . . . .  6\n       2.2.4.  Practical
    Considerations . . . . . . . . . . . . . . .  7\n   3.  Specification  . . . .
    . . . . . . . . . . . . . . . . . . . .  7\n     3.1.  Conventions  . . . . .
    . . . . . . . . . . . . . . . . . .  7\n     3.2.  Options and Features . . .
    . . . . . . . . . . . . . . . .  7\n       3.2.1.  RTT Estimate Option  . . .
    . . . . . . . . . . . . . .  7\n       3.2.2.  Send RTT Estimate Feature  . .
    . . . . . . . . . . . .  9\n     3.3.  Basic Usage  . . . . . . . . . . . . .
    . . . . . . . . . .  9\n     3.4.  Receiver Robustness Measures . . . . . . .
    . . . . . . . . 10\n   4.  Security Considerations  . . . . . . . . . . . . .
    . . . . . . 11\n   5.  IANA Considerations  . . . . . . . . . . . . . . . . .
    . . . . 11\n     5.1.  Option Types . . . . . . . . . . . . . . . . . . . . .
    . . 11\n     5.2.  Feature Numbers  . . . . . . . . . . . . . . . . . . . . .
    12\n   6.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n
    \    6.1.  Normative References . . . . . . . . . . . . . . . . . . . 12\n     6.2.
    \ Informative References . . . . . . . . . . . . . . . . . . 12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Datagram Congestion Control Protocol (DCCP) [RFC4340]
    is a\n   transport protocol for connection-oriented, unreliable, and\n   congestion-controlled
    datagram delivery.  In DCCP, an application has\n   a choice of congestion control
    mechanisms, each specified by a\n   Congestion Control Identifier (CCID; [RFC4340],
    Section 10).\n   This document defines a Standards-Track update to the sender
    and\n   receiver sides of two rate-based DCCP congestion control IDs: CCID-3\n
    \  [RFC4342] and the Experimental CCID-4 variant [RFC5622].\n   Both CCIDs are
    based on the principles of TCP-Friendly Rate Control\n   (TFRC) [RFC5348], which
    performs rate-based congestion control.  Its\n   feedback mechanism differs from
    that used by window-based congestion\n   control such as in TCP.  As a consequence,
    in TFRC the feedback may\n   be sent less frequently (e.g., once per round-trip
    time).\n   Furthermore, a measured RTT estimate is directly used as the basis\n
    \  for computing the (TCP-friendly) transmission rate.\n   In TFRC-based protocols,
    packets are rate-paced over an RTT, instead\n   of allowing them to be sent back-to-back
    as they could be in TCP;\n   thus, accurate RTT estimation is important to ensure
    appropriate\n   pacing at the sender.\n   The original specifications for CCID-3
    and CCID-4, in [RFC4342] and\n   [RFC5622], both estimate the RTT at the receiver,
    using an algorithm\n   based on the cyclic 4-bit window counter of the DCCP CCVal
    header.\n   The method has implications that have been observed when using\n   applications
    over DCCP implementations, resulting in infrequent and\n   inaccurate RTT measurement.\n
    \  This update addresses these RTT estimation problems by providing a\n   solution
    based on a concept first recommended in [RFC5348], Section\n   3.2.1; i.e., to
    measure the RTT at the sender.  That approach results\n   in a higher reliability
    and frequency of samples and avoids the\n   inherent problems of receiver-based
    RTT sampling discussed below.\n   The document begins by analysing the encountered
    problems in the next\n   section.  The update is presented in Section 3.  We then
    discuss\n   security considerations in Section 4 and list the resulting IANA\n
    \  considerations in Section 5.\n"
  title: 1.  Introduction
- contents:
  - "2.  Problems Caused by Sampling the RTT at the Receiver\n   There are at least
    six areas that make a TFRC receiver vulnerable to\n   inaccuracies or absence
    of (receiver-based) RTT samples:\n   o  the measured sending rate, X_recv ([RFC5348],
    Section 6.2);\n   o  synthesis of the first loss interval ([RFC5348], Section
    6.3.1);\n   o  disambiguation of loss events ([RFC4342], Section 10.2);\n   o
    \ validation of loss intervals ([RFC4342], Section 6.1);\n   o  ensuring that
    at least one feedback packet is sent per RTT\n      ([RFC4342], Section 10.3);\n
    \  o  determining quiescence periods ([RFC4342], Section 6.4).\n"
  - contents:
    - "2.1.  List of Problems Encountered with a Real Implementation\n   This section
      summarizes several years of experience using the Linux\n   implementation of
      CCID-3 and CCID-4.  It lists the problems\n   encountered with receiver-based
      RTT sampling over real networks, in a\n   variety of wired and wireless environments
      and under different link-\n   layer conditions.\n   The Linux DCCP/TFRC implementation
      is based on the RTT-sampling\n   algorithm specified in [RFC4342], Section 8.1.
      \ This algorithm relies\n   on a coarse-grained window counter (units of RTT/4),
      and uses packet\n   inter-arrival times to estimate the current RTT of the network.\n
      \  The algorithm is effective only for packets with modulo-16 CCVal\n   differences
      less than 5, due to limitations noted in Sections 8.1 and\n   10.3 of [RFC4342].
      \ A CCVal difference less than 4 means sampling at\n   sub-RTT scale; [RFC4342],
      Section 8.1 thus suggests differences\n   between 2 and 4, the latter being
      preferable (equivalent to a full\n   RTT).  The same section limits the maximum
      CCVal difference between\n   data-carrying packets to 5, in order to avoid wrap-around.
      \ As a\n   consequence, it is not possible to determine the timing interval
      for\n   adjacent packets with a CCVal difference greater than 4: such samples\n
      \  have to be discarded.\n   A second problem arises when there are holes in
      the sequence space.\n   Because the 4-bit CCVal counter may cycle around multiple
      times, it\n   is not possible to determine window-counter wrap-around whenever\n
      \  sequence numbers of subsequent packets are not immediately adjacent.\n   This
      problem occurs when packets are delayed, reordered, or lost in\n   the network.\n
      \  As a result, RTT sampling has to be paused during times of loss.\n   However,
      this aggravates the problem, since the sender now requires\n   new feedback
      from the receiver, but the receiver is unable to provide\n   accurate and up-to-date
      information: the receiver is unable to sample\n   the RTT, and accordingly is
      also unable to estimate X_recv correctly,\n   which then in turn affects X_Bps
      at the sender.\n   The third limitation arises from using inter-arrival times
      as\n   representatives of network inter-packet gaps.  It is well known that\n
      \  the inter-packet gap of packets is not constant along a network path.\n   Furthermore,
      modern network interface cards do not necessarily\n   deliver each packet at
      the time it is received, but rather in a\n   bunch, to avoid overly frequent
      interrupts [MR97].  As a result,\n   inter-packet arrival times may converge
      to zero, when subsequent\n   packets are being delivered at virtually the same
      time.\n   The fourth problem is that of under-sampling and thus related to the\n
      \  first limitation.  If loss occurs while the receiver has not yet had\n   a
      chance to sample the RTT, it needs to fall back to some fixed RTT\n   constant
      to plug into the equation of [RFC5348], Section 6.3.1.  (The\n   sender, for
      example, uses a fixed value of 1 second when it is unable\n   to obtain an initial
      RTT sample; see [RFC5348], Section 4.2).\n   In particular, if the loss is caused
      by a transient condition, this\n   fourth problem causes a subsequent deterioration
      of the connection\n   (rate reduction), further aggravated by the fact that
      TFRC takes\n   longer than common window-based protocols to recover from a reduction\n
      \  of its allowed sending rate.\n   Trying to smooth over these effects by imposing
      heavy filtering on\n   the RTT samples did not substantially improve the situation,
      nor does\n   it solve the problem of under-sampling.\n   The TFRC sender, on
      the other hand, is much better equipped to\n   estimate the RTT and can do this
      more accurately.  This is in\n   particular due to the use of timestamps and
      elapsed time information\n   ([RFC5348], Section 3.2.2), which are mandatory
      in CCID-3 (Sections 6\n   and 8.2 of [RFC4342]).\n"
    title: 2.1.  List of Problems Encountered with a Real Implementation
  - contents:
    - "2.2.  Other Areas Affected by the RTT Sampling Problems\n   Here we analyse
      the impact that unreliability of receiver-based RTT\n   sampling has on the
      areas listed at the beginning of Section 2.\n   In addition, benefits of sender-based
      RTT sampling have already been\n   pointed out in [RFC5348] and in the specification
      of CCID-3 at the\n   end of Section 10.2 of [RFC4342].\n"
    - contents:
      - "2.2.1.  Measured Receive Rate X_recv\n   A key problem is that the reliability
        of X_recv [RFC4342] depends\n   directly upon the reliability and accuracy
        of RTT samples.  This\n   means that failures propagate from one parameter
        to another.\n   Errata IDs 610 [Err610] and 611 [Err611] update [RFC4342]
        to use the\n   definition of the receive rate as specified in [RFC5348].\n
        \  Having an explicit (rather than a coarse-grained) RTT estimate allows\n
        \  measurement of X_recv with greater accuracy and isolates failure.\n   An
        explicit RTT estimate also enables the receiver to more accurately\n   perform
        the test in step (2) of [RFC4342], Section 6.2, i.e., to\n   check whether
        less or more than one RTT has passed since the last\n   feedback.\n"
      title: 2.2.1.  Measured Receive Rate X_recv
    - contents:
      - "2.2.2.  Disambiguation and Accuracy of Loss Intervals\n   Since a loss event
        is defined as one or more data packets in one RTT\n   that are lost or marked
        with Explicit Congestion Notification (ECN;\n   [RFC5348], Section 5.2), the
        receiver needs accurate RTT estimates to\n   validate and accurately separate
        loss events.  Moreover, Section 5.2\n   of [RFC5348] expressly indicates the
        sender RTT estimate is\n   RECOMMENDED for this purpose.\n   Having the sender
        RTT Estimate available further increases the\n   accuracy of the information
        reported by the receiver.  The definition\n   of Loss Intervals in [RFC4342],
        Section 6.1 needs the RTT to separate\n   the lossy parts; in particular,
        lossy parts spanning a period of more\n   than one RTT are invalid.\n   A
        similar benefit arises in the computation of the loss event rate:\n   as discussed
        in Section 9.2 of [RFC4342], it may happen that the\n   sender and receiver
        compute different loss event rates, due to\n   differences in the available
        timing information.  An explicit RTT\n   estimate increases the accuracy of
        information available at the\n   receiver; thus, the sender may not need to
        recompute the (less\n   reliable) loss event rate reported by the receiver.\n"
      title: 2.2.2.  Disambiguation and Accuracy of Loss Intervals
    - contents:
      - "2.2.3.  Determining Quiescence\n   The quiescence period is defined as max(2
        * RTT, 0.2 sec) in Section\n   6.4 of [RFC4342].  An explicit RTT estimate
        avoids under- and over-\n   estimating quiescence periods.\n"
      title: 2.2.3.  Determining Quiescence
    - contents:
      - "2.2.4.  Practical Considerations\n   Using explicit RTT estimates contributes
        to greater robustness and\n   can also result in simpler implementation.\n
        \  First, it becomes easier to separate adjacent loss events.  The 4-bit\n
        \  counter value wraps relatively frequently, which requires additional\n
        \  procedures to avoid aliasing effects.\n   Second, the receiver is better
        able to determine when to send\n   feedback packets.  It can perform the test
        described in step (2) of\n   [RFC5348], Section 6.2 more accurately.  Moreover,
        unnecessary\n   expiration of the nofeedback timer (as described in [RFC4342],\n
        \  Section 10.3) can be avoided.\n   Lastly, a sender-based RTT estimate option
        can be used by middleboxes\n   to verify that a flow uses conforming end-to-end
        congestion control\n   ([RFC4342], Section 10.2).\n"
      title: 2.2.4.  Practical Considerations
    title: 2.2.  Other Areas Affected by the RTT Sampling Problems
  title: 2.  Problems Caused by Sampling the RTT at the Receiver
- contents:
  - '3.  Specification

    '
  - contents:
    - "3.1.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
      \  This document uses the conventions of [RFC5348], [RFC4340],\n   [RFC4342],
      and [RFC5622].\n   All multi-byte field descriptions presented in this document
      are in\n   network byte order (most significant byte first).\n"
    title: 3.1.  Conventions
  - contents:
    - "3.2.  Options and Features\n   This document defines a single TFRC-specific
      option, RTT Estimate,\n   described in the next subsection.\n   Following the
      guidelines in [RFC4340], Section 15, the use of the RTT\n   Estimate Option
      is governed by an associated feature, Send RTT\n   Estimate Feature.  This feature
      is described in Section 3.2.2.\n"
    - contents:
      - "3.2.1.  RTT Estimate Option\n   The sender communicates its current RTT estimate
        to the receiver\n   using an RTT Estimate Option.\n           +------+---------------+--------------+------------+\n
        \          | Type | Option Length |    Meaning   | DCCP Data? |\n           +------+---------------+--------------+------------+\n
        \          |  128 |     3/4/5     | RTT Estimate |      Y     |\n           +------+---------------+--------------+------------+\n
        \        Table 1: The RTT Estimate Option Defined by This Document\n   Column
        meanings are as per [RFC4340], Section 5.8 (Table 3).  This\n   option MAY
        be placed in any DCCP packet, has option number 128 and a\n   length of 3..5
        bytes.\n   A Sender RTT Estimate Option is valid if it satisfies one of the\n
        \  three following formats:\n      +--------+--------+--------+\n      |10000000|00000011|
        \ RTT   |\n      +--------+--------+--------+\n       Type=128  Length=3  Estimate\n
        \     +--------+--------+--------+--------+\n      |10000000|00000100|       RTT
        \      |\n      +--------+--------+--------+--------+\n       Type=128  Length=4
        \     Estimate\n      +--------+--------+--------+--------+--------+\n      |10000000|00000101|
        \          RTT            |\n      +--------+--------+--------+--------+--------+\n
        \      Type=128  Length=5          Estimate\n   The 1..3 value bytes of the
        option data carry the current RTT\n   estimate of the sender, using a granularity
        of 1 microsecond.  This\n   allows values up to 16.7 seconds (corresponding
        to 0xFFFFFE) to be\n   communicated.\n   A sender capable of sampling at sub-microsecond
        granularity SHOULD\n   round up RTT samples to the next microsecond, to avoid
        under-\n   estimating the RTT.\n   The value 0xFFFFFF is reserved to indicate
        significant delay spikes,\n   larger than 16.7 seconds.  This is qualitative
        rather than\n   quantitative information, to alert the receiver that there
        is a\n   network problem (for instance, jamming on a wireless channel).\n
        \  The use of the RTT Estimate Option on networks with RTTs larger than\n
        \  16.7 seconds is not specified by this document (as per Section 3.3,\n   the
        sender would then always report 0xFFFFFF).\n   A value of 0 indicates the
        absence of a valid RTT sample.  The sender\n   MUST set the value to 0 if
        it does not yet have an RTT estimate.  RTT\n   estimates of less than 1 microsecond
        MUST be reported as 1\n   microsecond.\n   The sender SHOULD select the smallest
        format suitable to carry the\n   RTT estimate (i.e., less than 1 byte of leading
        zeroes).\n"
      title: 3.2.1.  RTT Estimate Option
    - contents:
      - "3.2.2.  Send RTT Estimate Feature\n   The Send RTT Estimate feature lets
        endpoints negotiate whether the\n   sender MUST provide RTT Estimate options
        on its data packets.\n   Send RTT Estimate has feature number 128 and is server-priority.
        \ It\n   takes 1-byte Boolean values; values greater than 1 are reserved.\n
        \   +--------+-------------------+------------+---------------+-------+\n
        \   | Number |      Meaning      | Rec'n Rule | Initial Value | Req'd |\n
        \   +--------+-------------------+------------+---------------+-------+\n
        \   |   128  | Send RTT Estimate |     SP     |       0       |   N   |\n
        \   +--------+-------------------+------------+---------------+-------+\n
        \     Table 2: The Send RTT Estimate Feature Defined by This Document\n   The
        column meanings are described in [RFC4340], Section 6.4.\n   The Send RTT
        Estimate feature is OPTIONAL.  An extension may\n   implement it, but this
        specification does not require the feature to\n   be understood by every DCCP
        implementation (see [RFC4340], Section\n   15).  The feature is off by default
        (initial value of 0).\n   DCCP B sends a \"Mandatory Change R(Send RTT Estimate,
        1)\" to require\n   DCCP A to send RTT Estimate options as part of its data
        traffic (DCCP\n   A will reset the connection if it does not understand this
        feature).\n"
      title: 3.2.2.  Send RTT Estimate Feature
    title: 3.2.  Options and Features
  - contents:
    - "3.3.  Basic Usage\n   When the Send RTT Estimate Feature is enabled, the sender
      MUST\n   provide an RTT Estimate Option on all of its Data, DataAck, Sync, and\n
      \  SyncAck packets.  It MAY in addition provide the RTT Estimate Option\n   on
      other packet types, such as DCCP-Ack.  If the RTT is larger than\n   the maximum
      representable value (0xFFFFFE), the sender MUST set the\n   value of the RTT
      Estimate Option to 0xFFFFFF.\n   The sender MUST implement and continue to update
      the CCVal window\n   counter as specified in [RFC4342], Section 8.1, even when
      the Send\n   RTT Estimate Feature is on.\n   When the Send RTT Estimate Feature
      is enabled, the receiver MUST use\n   the value reported by the RTT Estimate
      Option in all places that\n   require an RTT (listed at the begin of Section
      2).  If the receiver\n   encounters an invalid RTT Estimate Option (Section
      3.2.1), it MUST\n   reset the connection with Reset Code 5, \"Option Error\",
      where the\n   Data 1..3 fields are set to the first 3 bytes of the offending
      RTT\n   Estimate Option.\n   The receiver SHOULD track the long-term RTT estimate
      using a moving\n   average, such as the one specified in [RFC5348], Section
      4.3.  This\n   long-term estimate is referred to as \"receiver_RTT\" below.\n
      \  When the Send RTT Estimate Feature is disabled, the receiver MUST\n   estimate
      the RTT as previously specified in [RFC4340], [RFC4342], and\n   [RFC5622].\n"
    title: 3.3.  Basic Usage
  - contents:
    - "3.4.  Receiver Robustness Measures\n   This subsection specifies robustness
      measures for the receiver when\n   the Send RTT Estimate Feature is on.\n   The
      0-valued and 0xFFFFFF-valued RTT Estimate Options are both\n   referred to as
      \"no-number RTT options\".  RTT Estimate Options with\n   values in the range
      of 1..0xFFFFFE are analogously called \"numeric\n   RTT options\".\n   Until
      the first numeric RTT option arrives, the receiver MUST use a\n   value of 0.5
      seconds for receiver_RTT (to match the initial 2-second\n   timeout of the TFRC
      nofeedback timer; see [RFC5348], Section 4.2).\n   If the path RTT is known,
      e.g., from a previous connection [RFC2140],\n   the receiver MAY reuse the previously
      known path RTT value to seed\n   its long-term RTT estimate.\n   The sender
      MAY occasionally send no-number RTT options, covering for\n   transient changes
      and spurious disruptions.  During these times, the\n   receiver SHOULD continue
      to use its long-term receiver_RTT value.\n   To avoid under-estimating the RTT
      in the absence of numeric options,\n   the receiver MUST back off receiver_RTT
      in the following manner: if\n   the sender supplies no-number RTT options for
      longer than\n   receiver_RTT units of time, the receiver sets\n             receiver_RTT
      = MIN(2 * receiver_RTT, t_mbi)\n   where t_mbi = 64 seconds is the maximum back-off
      interval ([RFC5348],\n   Appendix A).  For the next round of no-number RTT options,
      the\n   updated value of receiver_RTT applies.\n   This back-off mechanism ensures
      that short-term disruptions do not\n   have a lasting impact, whereas long-term
      problems will result in\n   asymptotically high receiver_RTT values.\n   To
      bail out from a hanging session, the receiver MAY close the\n   connection when
      receiver_RTT has reached the value MAX_RTT.\n"
    title: 3.4.  Receiver Robustness Measures
  title: 3.  Specification
- contents:
  - "4.  Security Considerations\n   Security considerations for CCID-3 have been
    discussed in Section 11\n   of [RFC4342]; for CCID-4, these have been discussed
    in Section 13 of\n   [RFC5622], referring back to the same section of [RFC4342].\n
    \  This document introduces an extension to communicate the current RTT\n   estimate
    of the sender to the receiver of a TFRC communication.\n   By altering the value
    of the RTT Estimate Option, it is possible to\n   interfere with the behaviour
    of a flow using TFRC.  In particular,\n   since accuracy of the RTT estimate directly
    influences the accuracy\n   of the measured sending rate X_recv, it would be possible
    to obtain\n   either higher or lower sending rates than are warranted by the\n
    \  current network conditions.\n   This is only possible if an attacker is on
    the same path as the DCCP\n   sender and receiver, and is able to guess valid
    sequence numbers.\n   Therefore, the considerations in Section 18 of [RFC4340]
    apply.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   This document requests identical allocation in the
    dccp-ccid3-\n   parameters and the dccp-ccid4-parameters registries.\n"
  - contents:
    - "5.1.  Option Types\n   This document defines a single CCID-specific option
      (128) for\n   communicating RTT estimates from the HC-sender to the HC-receiver.\n
      \  Following [RFC4340], Section 10.3, this requires an option number for\n   the
      RTT Estimate Option in the range 128..191.\n"
    title: 5.1.  Option Types
  - contents:
    - "5.2.  Feature Numbers\n   This document defines a single CCID-specific feature
      number (128) for\n   the Send RTT Estimate feature, which is located at the
      HC-sender.\n   Following [RFC4340], Section 10.3, a feature number in the range\n
      \  128..191 is required.\n"
    title: 5.2.  Feature Numbers
  title: 5.  IANA Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n              Congestion
      Control Protocol (DCCP)\", RFC 4340, March 2006.\n   [RFC4342]  Floyd, S., Kohler,
      E., and J. Padhye, \"Profile for\n              Datagram Congestion Control
      Protocol (DCCP) Congestion\n              Control ID 3: TCP-Friendly Rate Control
      (TFRC)\", RFC 4342,\n              March 2006.\n   [RFC5348]  Floyd, S., Handley,
      M., Padhye, J., and J. Widmer, \"TCP\n              Friendly Rate Control (TFRC):
      Protocol Specification\",\n              RFC 5348, September 2008.\n   [RFC5622]
      \ Floyd, S. and E. Kohler, \"Profile for Datagram Congestion\n              Control
      Protocol (DCCP) Congestion ID 4: TCP-Friendly Rate\n              Control for
      Small Packets (TFRC-SP)\", RFC 5622,\n              August 2009.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [Err610]   RFC Errata, Errata ID 610, RFC
      4342,\n              <http://www.rfc-editor.org>.\n   [Err611]   RFC Errata,
      Errata ID 611, RFC 4342,\n              <http://www.rfc-editor.org>.\n   [MR97]
      \    Mogul, J. and K. Ramakrishnan, \"Eliminating Receive\n              Livelock
      in an Interrupt-Driven Kernel\", ACM Transactions\n              on Computer
      Systems (TOCS), 15(3):217-252, August 1997.\n   [RFC2140]  Touch, J., \"TCP
      Control Block Interdependence\", RFC 2140,\n              April 1997.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Authors' Addresses\n   Gerrit Renker\n   University of Aberdeen\n   School of
    Engineering\n   Fraser Noble Building\n   Aberdeen  AB24 3UE\n   Scotland\n   EMail:
    gerrit@erg.abdn.ac.uk\n   URI:   http://www.erg.abdn.ac.uk\n   Godred Fairhurst\n
    \  University of Aberdeen\n   School of Engineering\n   Fraser Noble Building\n
    \  Aberdeen  AB24 3UE\n   Scotland\n   EMail: gorry@erg.abdn.ac.uk\n   URI:   http://www.erg.abdn.ac.uk\n"
  title: Authors' Addresses
