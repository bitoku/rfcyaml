Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects used for implementations of the Transmission Control Protocol (TCP) in an IP version independent manner.
This memo obsoletes RFCs 2452 and 2012.
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
The current TCP MIB defined in this memo consists of two tables and a group of scalars:
The tcp group of scalars includes two sets of objects:  Parameters of a TCP protocol engine.
These include parameters such as the retransmission algorithm in use (e.g., vanj [VANJ]) and the retransmission timeout values.
Statistics of a TCP protocol engine.
These include counters for the number of active/passive opens, input/output segments, and errors.
Discontinuities in the stats are identified identified via the sysUpTime object, defined in [RFC3418].
The tcpConnectionTable provides access to status information for all TCP connections handled by a TCP protocol engine.
In addition, the table reports identification of the operating system level processes that handle the TCP connections.
The tcpListenerTable provides access to information about all TCP listening endpoints known by a TCP protocol engine.
And as with the connection table, the tcpListenerTable also reports the identification of the operating system level processes that handle this listening TCP endpoint.
This section discusses the relationship of this TCP MIB module to other MIB modules.
MIB TCP related MIB objects were originally defined as part of the RFC1213 MIB defined in RFC 1213 [RFC1213].
The TCP related objects of the RFC1213 MIB were later copied into a separate MIB module and published in RFC 2012
The previous versions of the TCP MIB both defined the tcpConnTable, which has been deprecated basically for two reasons: (1)
The tcpConnTable only supports IPv4.
The current approach in the IETF is to write IP version neutral MIBs, based on the InetAddressType and InetAddress constructs defined in [RFC4001], rather than to have different definitions for various version of IP.
This reduces the amount of overhead when new objects are introduced, as there is only one place to add them.
Hence, the approach taken in [RFC2452], of having separate tables, is not continued.
The tcpConnTable mixes listening endpoints with connections.
It turns out that connections tend to have a different behaviour and management access pattern than listening endpoints.
Therefore, splitting the original tcpConnTable into two tables allows for the addition of specific status and statistics objects for listening endpoints and connections.
Relationship to IPV6 TCP MIB
The IPV6 TCP MIB defined in RFC 2452 has been moved to Historic status because the approach of having separate IP version specific tables is not followed anymore.
Implementation of RFC 2452 is no longer suggested.
Relationship to HOST RESOURCES MIB and SYSAPPL MIB
The tcpConnectionTable and the tcpListenerTable report the identification of the operating system level process that handles a connection or a listening endpoint.
The value is reported as an Unsigned32, which is expected to be the same as the hrSWRunIndex of the HOST RESOURCES MIB [RFC2790] (if the value is smaller than 2147483647) or the sysApplElmtRunIndex of the SYSAPPL MIB [RFC2287].
This allows management applications to identify the TCP connections that belong to an operating system level process, which has proven to be valuable in operational environments.
Definitions TCP MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, Integer32, Unsigned32, Gauge32, Counter32, Counter64,
IpAddress, mib 2 FROM SNMPv2
MIB Revision Team http://www.ietf.org/html.charters/ipv6 charter.html" CONTACT INFO "Rajiv Raghunarayan (editor)
West Tasman Drive San Jose
, CA 95134 Phone:  1
408 853 9612 Email: <raraghun@cisco.com
" DESCRIPTION "The MIB module for managing TCP implementations.
This version of this MIB module is a part of RFC 4022; see the RFC itself for full legal notices."
The initial revision of this MIB module was part of MIB II."
"The algorithm used to determine the timeout value used for retransmitting unacknowledged octets."
"The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds.
More refined semantics for objects of this type depend on the algorithm used to determine the retransmission timeout; in particular, the IETF standard algorithm rfc2988(5) provides a minimum value."
"The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds.
More refined semantics for objects of this type depend on the algorithm used to determine the retransmission timeout; in particular, the IETF standard algorithm rfc2988(5) provides an upper bound (as part of an adaptive backoff algorithm).
"The limit on the total number of TCP connections the entity can support.
In entities where the maximum number of connections is dynamic, this object should contain the value  1."
The number of times that TCP connections have made a direct transition to the SYN SENT state from the CLOSED state.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The number of times TCP connections have made a direct transition to the SYN RCVD state from the LISTEN state.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
The number of times that TCP connections have made a direct transition to the CLOSED state from either the SYN SENT state or the SYN RCVD state, plus the number of times that TCP connections have made a direct transition to the LISTEN state from the SYN RCVD state.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
The number of times that TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE WAIT state.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The total number of segments received, including those received in error.
This count includes segments received on currently established connections.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The total number of segments retransmitted; that is, the number of TCP segments transmitted containing one or more previously transmitted octets.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The total number of segments received in error (e.g., bad TCP checksums).
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The number of TCP segments sent containing the RST flag.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
It MUST not be used.
"The total number of segments received, including those received in error.
This count includes segments received on currently established connections.
This object is the 64 bit equivalent of tcpInSegs.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
"The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.
This object is the 64 bit equivalent of tcpOutSegs.
Discontinuities in the value of this counter are indicated via discontinuities in the value of sysUpTime."
MAX ACCESS not accessible STATUS
A table containing information about existing TCP connections.
Note that unlike earlier TCP MIBs, there is a separate table for connections in the LISTEN state."
MAX ACCESS not accessible STATUS
current DESCRIPTION "A conceptual row of the tcpConnectionTable containing information about a particular current TCP connection.
Each row of this table is transient in that it ceases to exist when (or soon after)
the connection makes the transition to the CLOSED state.
MAX ACCESS not accessible STATUS
"The address type of tcpConnectionLocalAddress."
InetAddress MAX ACCESS not accessible STATUS
The local IP address for this TCP connection.
The type of this address is determined by the value of tcpConnectionLocalAddressType.
As this object is used in the index for the tcpConnectionTable, implementors should be careful not to create entries that would result in OIDs with more than 128 subidentifiers; otherwise the information cannot be accessed by using SNMPv1, SNMPv2c, or SNMPv3."
"The local port number for this TCP connection."
MAX ACCESS not accessible STATUS
"The address type of tcpConnectionRemAddress."
{ tcpConnectionEntry 4 } tcpConnectionRemAddress OBJECT TYPE SYNTAX
InetAddress MAX ACCESS not accessible STATUS
The remote IP address for this TCP connection.
The type of this address is determined by the value of tcpConnectionRemAddressType.
As this object is used in the index for the tcpConnectionTable, implementors should be careful not to create entries that would result in OIDs with more than 128 subidentifiers; otherwise the information cannot be accessed by using SNMPv1, SNMPv2c, or SNMPv3."
{ tcpConnectionEntry 5 } tcpConnectionRemPort OBJECT
The remote port number for this TCP connection."
MAX ACCESS read write STATUS
"The state of this TCP connection.
The value listen(2) is included only for parallelism to the old tcpConnTable and should not be used.
A connection in LISTEN state should be present in the tcpListenerTable.
The only value that may be set by a management station is deleteTCB(12).
Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value.
If a management station sets this object to the value deleteTCB(12), then the TCB (as defined in [RFC793]) of the corresponding connection on the managed node is deleted, resulting in immediate termination of the connection.
As an implementation specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note, however, that RST segments are not sent reliably)."
"The system's process ID for the process associated with this connection, or zero
if there is no such process.
This value is expected to be the same as HOST RESOURCES MIB:: hrSWRunIndex or SYSAPPL MIB::sysApplElmtRunIndex for some row in the appropriate tables."
MAX ACCESS not accessible STATUS
A table containing information about TCP listeners.
A listening application can be represented in three possible ways: 1.
An application that is willing to accept both IPv4 and IPv6 datagrams is represented by a tcpListenerLocalAddressType of unknown (0) and a tcpListenerLocalAddress of ''h (a zero length octet string).
An application that is listening for data destined only to a specific IP address, but from any remote system, is represented by a tcpListenerLocalAddressType of an appropriate address type, with tcpListenerLocalAddress as the specific local address.
The address type in this table represents the address type used for the communication, irrespective of the higher layer abstraction.
For example, an application using IPv6 'sockets' to communicate via IPv4 between ::ffff:10.0.0.1 and ::ffff:10.0.0.2 would use InetAddressType ipv4(1))."
MAX ACCESS not accessible STATUS
current DESCRIPTION "A conceptual row of the tcpListenerTable containing information about a particular TCP listener.
MAX ACCESS not accessible STATUS
"The address type of tcpListenerLocalAddress.
The value should be unknown (0) if connection initiations to all local IP addresses are accepted."
InetAddress MAX ACCESS not accessible STATUS
The local IP address for this TCP connection.
The value of this object can be represented in three possible ways, depending on the characteristics of the listening application: 1.
For an application willing to accept both IPv4 and IPv6 datagrams, the value of this object must be ''h (a zero length octet string), with the value of the corresponding tcpListenerLocalAddressType object being unknown (0).
For an application which is listening for data destined only to a specific IP address, the value of this object is the specific local address, with tcpListenerLocalAddressType representing the appropriate address type.
As this object is used in the index for the tcpListenerTable, implementors should be careful not to create entries that would result in OIDs with more than 128 subidentifiers; otherwise the information cannot be accessed, using SNMPv1, SNMPv2c, or SNMPv3."
"The local port number for this TCP connection."
"The system's process ID for the process associated with this listener, or zero
if there is no such process.
This value is expected to be the same as HOST RESOURCES MIB:: hrSWRunIndex or SYSAPPL MIB::sysApplElmtRunIndex for some row in the appropriate tables."
A table containing information about existing IPv4 specific TCP connections or listeners.
This table has been deprecated in favor of the version neutral tcpConnectionTable."
deprecated DESCRIPTION "A conceptual row of the tcpConnTable containing information about a particular current IPv4 TCP connection.
Each row of this table is transient in that it ceases to exist when (or soon after)
the connection makes the transition to the CLOSED state.
deprecated DESCRIPTION "The state of this TCP connection.
The only value that may be set by a management station is deleteTCB(12).
Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value.
If a management station sets this object to the value deleteTCB(12), then the TCB (as defined in [RFC793]) of the corresponding connection on the managed node is deleted, resulting in immediate termination of the connection.
As an implementation specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note, however, that RST segments are not sent reliably)."
The local IP address for this TCP connection.
In the case of a connection in the listen state willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used."
The local port number for this TCP connection."
The remote IP address for this TCP connection."
The remote port number for this TCP connection."
"The compliance statement for systems that implement TCP.
A number of INDEX objects cannot be represented in the form of OBJECT clauses in SMIv2 but have the following compliance requirements, expressed in OBJECT clause form in this description clause:   OBJECT
1 million segments per second will cause a Counter32 to wrap in just over an hour."
, established(5), finWait1(6), finWait2(7), closeWait(8), lastAck(9), closing(10), timeWait(11)
} MIN ACCESS  read only DESCRIPTION "Write access is not required, nor is support for the value deleteTCB (12)."
The compliance statement for IPv4 only systems that implement TCP.
In order to be IP version independent, this compliance statement is deprecated in favor of tcpMIBCompliance2.
However, agents are still encouraged to implement these objects in order to interoperate with the deployed base of managers.
MODULE    this module MANDATORY GROUPS { tcpGroup } OBJECT
MIN ACCESS  read only DESCRIPTION
"Write access is not required."
{ tcpRtoAlgorithm, tcpRtoMin, tcpRtoMax, tcpMaxConn, tcpActiveOpens, tcpPassiveOpens, tcpAttemptFails, tcpEstabResets, tcpCurrEstab, tcpInSegs, tcpOutSegs, tcpRetransSegs, tcpConnState, tcpConnLocalAddress, tcpConnLocalPort, tcpConnRemAddress, tcpConnRemPort, tcpInErrs, tcpOutRsts } STATUS
The tcp group of objects providing for management of TCP entities."
tcpActiveOpens, tcpPassiveOpens, tcpAttemptFails, tcpEstabResets, tcpCurrEstab, tcpInSegs, tcpOutSegs, tcpRetransSegs,
The group of counters common to TCP entities."
"The group provides general information about TCP connections."
"This group has objects providing general information about TCP listeners."
The group of objects providing for counters of high speed TCP implementations."
There are a number of management objects defined in this MIB module with a MAX ACCESS clause of read write.
Such objects may be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
These are the tables and objects and their sensitivity/vulnerability:
The tcpConnectionState and tcpConnState objects have a MAX ACCESS clause of read write, which allows termination of an arbitrary connection.
Unauthorized access could cause a denial of service.
Some of the readable objects in this MIB module (i.e., objects with a MAX ACCESS other than not accessible) may be considered sensitive or vulnerable in some network environments.
It is thus important to control
even GET and/or NOTIFY access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
These are the tables and objects and their sensitivity/vulnerability:  The tcpConnectionTable and the tcpConnTable contain objects providing information about the active connections on the device, the status of these connections, and the associated processes.
This information may be used by an attacker to launch attacks against known/unknown weakness in certain protocols/applications.
In addition, access to the connection table could also have privacy implications, as it provides detailed information on active connections.
The tcpListenerTable and the tcpConnTable contain objects providing information about listeners on an entity.
For example, the tcpListenerLocalPort and tcpConnLocalPort objects can be used to identify what ports are open on the machine and what attacks are likely to succeed, without the attacker having to run a port scanner.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
This document is an output of the IPv6 MIB revision team, and contributors to earlier versions of this document include: Bill Fenner, AT&T Labs   Research EMail: fenner@research.att.com Brian Haberman EMail: brian@innovationslab.net Shawn A. Routhier,
shawn.routhier@windriver.com Juergen Schoenwalder, TU Braunschweig EMail:
bs.de Dave Thaler, Microsoft EMail: dthaler@windows.microsoft.com This document updates parts of the MIBs from several documents.
RFC 2012 has been the base document for these updates, and RFC 2452 was the first document to define the managed objects for implementations of TCP over IPv6.
Keith McCloghrie, Cisco Systems (
Mike Daniele, Compaq Computer Corporation EMail:
daniele@zk3.dec.com Editor's Address Rajiv Raghunarayan Cisco Systems Inc. 170 West Tasman Drive San Jose
, CA 95134 USA EMail:
