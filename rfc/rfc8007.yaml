- title: __initial_text__
  contents:
  - "            Content Delivery Network Interconnection (CDNI)\n               \
    \       Control Interface / Triggers\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the part of the Content Delivery Network\n\
    \   Interconnection (CDNI) Control interface that allows a CDN to trigger\n  \
    \ activity in an interconnected CDN that is configured to deliver\n   content\
    \ on its behalf.  The upstream CDN can use this mechanism to\n   request that\
    \ the downstream CDN pre-position metadata or content or\n   to request that it\
    \ invalidate or purge metadata or content.  The\n   upstream CDN can monitor the\
    \ status of activity that it has triggered\n   in the downstream CDN.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8007.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. Model for CDNI Triggers .........................................4\n    \
    \  2.1. Timing of Triggered Activity ...............................6\n      2.2.\
    \ Scope of Triggered Activity ................................7\n           2.2.1.\
    \ Multiple Interconnected CDNs ........................7\n      2.3. Trigger Results\
    \ ............................................8\n   3. Collections of Trigger\
    \ Status Resources .........................9\n   4. CDNI Trigger Interface .........................................10\n\
    \      4.1. Creating Triggers .........................................11\n  \
    \    4.2. Checking Status ...........................................12\n    \
    \       4.2.1. Polling Trigger Status Resource Collections ........12\n      \
    \     4.2.2. Polling Trigger Status Resources ...................13\n      4.3.\
    \ Canceling Triggers ........................................13\n      4.4. Deleting\
    \ Triggers .........................................14\n      4.5. Expiry of Trigger\
    \ Status Resources ........................14\n      4.6. Loop Detection and Prevention\
    \ .............................15\n      4.7. Error Handling ............................................15\n\
    \      4.8. Content URLs ..............................................16\n  \
    \ 5. CI/T Object Properties and Encoding ............................17\n    \
    \  5.1. CI/T Objects ..............................................17\n      \
    \     5.1.1. CI/T Commands ......................................17\n        \
    \   5.1.2. Trigger Status Resources ...........................18\n          \
    \ 5.1.3. Trigger Collections ................................20\n      5.2. Properties\
    \ of CI/T Objects ................................21\n           5.2.1. Trigger\
    \ Specification ..............................21\n           5.2.2. Trigger Type\
    \ .......................................23\n           5.2.3. Trigger Status\
    \ .....................................24\n           5.2.4. PatternMatch .......................................24\n\
    \           5.2.5. Absolute Time ......................................25\n  \
    \         5.2.6. Error Description ..................................26\n    \
    \       5.2.7. Error Code .........................................26\n   6. Examples\
    \ .......................................................27\n      6.1. Creating\
    \ Triggers .........................................28\n           6.1.1. Preposition\
    \ ........................................28\n           6.1.2. Invalidate .........................................30\n\
    \      6.2. Examining Trigger Status ..................................32\n  \
    \         6.2.1. Collection of All Triggers .........................32\n    \
    \       6.2.2. Filtered Collections of Trigger Status Resources ...33\n      \
    \     6.2.3. Individual Trigger Status Resources ................34\n        \
    \   6.2.4. Polling for Changes in Status ......................36\n          \
    \ 6.2.5. Deleting Trigger Status Resources ..................38\n           6.2.6.\
    \ Error Reporting ....................................39\n   7. IANA Considerations\
    \ ............................................40\n      7.1. CDNI Payload Type\
    \ Parameter Registrations .................40\n      7.2. \"CDNI CI/T Trigger\
    \ Types\" Registry ........................41\n      7.3. \"CDNI CI/T Error Codes\"\
    \ Registry ..........................41\n   8. Security Considerations ........................................41\n\
    \      8.1. Authentication, Authorization, Confidentiality,\n           Integrity\
    \ Protection ......................................42\n      8.2. Denial of Service\
    \ .........................................43\n      8.3. Privacy ...................................................44\n\
    \   9. References .....................................................44\n  \
    \    9.1. Normative References ......................................44\n    \
    \  9.2. Informative References ....................................45\n   Appendix\
    \ A. Formalization of the JSON Data ........................47\n   Acknowledgments\
    \ ...................................................49\n   Authors' Addresses\
    \ ................................................49\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC6707] introduces the problem scope for Content Delivery\
    \ Network\n   Interconnection (CDNI) and lists the four categories of interfaces\n\
    \   that may be used to compose a CDNI solution (Control, Metadata,\n   Request\
    \ Routing, and Logging).\n   [RFC7336] expands on the information provided in\
    \ [RFC6707] and\n   describes each of the interfaces and the relationships between\
    \ them\n   in more detail.\n   This document describes the \"CI/T\" interface\
    \ -- \"CDNI Control\n   interface / Triggers\".  It does not consider those parts\
    \ of the\n   Control interface that relate to configuration, bootstrapping, or\n\
    \   authentication of CDN Interconnect interfaces.  Section 4 of\n   [RFC7337]\
    \ identifies the requirements specific to the CI/T interface;\n   requirements\
    \ applicable to the CI/T interface are CI-1 to CI-6.\n   o  Section 2 outlines\
    \ the model for the CI/T interface at a high\n      level.\n   o  Section 3 describes\
    \ collections of Trigger Status Resources.\n   o  Section 4 defines the web service\
    \ provided by the downstream CDN.\n   o  Section 5 lists properties of CI/T Commands\
    \ and Status Resources.\n   o  Section 6 contains example messages.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document reuses the terminology defined in [RFC6707]\
    \ and uses\n   \"uCDN\" and \"dCDN\" as shorthand for \"upstream CDN\" and \"\
    downstream\n   CDN\", respectively.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Model for CDNI Triggers
  contents:
  - "2.  Model for CDNI Triggers\n   A CI/T Command, sent from the uCDN to the dCDN,\
    \ is a request for the\n   dCDN to do some work relating to data associated with\
    \ content\n   requests originating from the uCDN.\n   There are two types of CI/T\
    \ Commands: CI/T Trigger Commands and CI/T\n   Cancel Commands.  The CI/T Cancel\
    \ Command can be used to request\n   cancellation of an earlier CI/T Trigger Command.\
    \  A CI/T Trigger\n   Command is of one of the following types:\n   o  preposition\
    \ - used to instruct the dCDN to fetch metadata from the\n      uCDN, or content\
    \ from any origin including the uCDN.\n   o  invalidate - used to instruct the\
    \ dCDN to revalidate specific\n      metadata or content before reusing it.\n\
    \   o  purge - used to instruct the dCDN to delete specific metadata or\n    \
    \  content.\n   The CI/T interface is a web service offered by the dCDN.  It allows\n\
    \   CI/T Commands to be issued and allows triggered activity to be\n   tracked.\
    \  The CI/T interface builds on top of HTTP/1.1 [RFC7230].\n   References to URL\
    \ in this document relate to HTTP/HTTPS URIs, as\n   defined in Section 2.7 of\
    \ [RFC7230].\n   When the dCDN accepts a CI/T Command, it creates a resource\n\
    \   describing the status of the triggered activity -- a Trigger Status\n   Resource.\
    \  The uCDN can poll Trigger Status Resources to monitor\n   progress.\n   The\
    \ dCDN maintains at least one collection of Trigger Status\n   Resources for each\
    \ uCDN.  Each uCDN only has access to its own\n   collections, the locations of\
    \ which are shared when CDNI is\n   established.\n   To trigger activity in the\
    \ dCDN, the uCDN POSTs a CI/T Command to the\n   collection of Trigger Status\
    \ Resources.  If the dCDN accepts the CI/T\n   Command, it creates a new Trigger\
    \ Status Resource and returns its\n   location to the uCDN.  To monitor progress,\
    \ the uCDN can GET the\n   Trigger Status Resource.  To request cancellation of\
    \ a CI/T Trigger\n   Command, the uCDN can POST to the collection of Trigger Status\n\
    \   Resources or simply delete the Trigger Status Resource.\n   In addition to\
    \ the collection of all Trigger Status Resources for the\n   uCDN, the dCDN can\
    \ maintain filtered views of that collection.  These\n   filtered views are defined\
    \ in Section 3 and include collections of\n   Trigger Status Resources corresponding\
    \ to active and completed CI/T\n   Trigger Commands.  These collections provide\
    \ a mechanism for polling\n   the status of multiple jobs.\n   Figure 1 is an\
    \ example showing the basic message flow used by the\n   uCDN to trigger activity\
    \ in the dCDN and for the uCDN to discover the\n   status of that activity.  Only\
    \ successful triggering is shown.\n   Examples of the messages are given in Section\
    \ 6.\n      uCDN                                                   dCDN\n    \
    \   |    (1) POST https://dcdn.example.com/triggers/uCDN    |\n      [ ] -------------------------------------------------->\
    \ [ ]--+\n       |                                                      [ ]  |\
    \ (2)\n       |    (3) HTTP 201 Response                             [ ]<-+\n\
    \      [ ] <-------------------------------------------------- [ ]\n       | \
    \    Loc: https://dcdn.example.com/triggers/uCDN/123   |\n       |           \
    \                                            |\n       .                     \
    \      .                           .\n       .                           .   \
    \                        .\n       .                           .             \
    \              .\n       |                                                   \
    \    |\n       |   (4) GET https://dcdn.example.com/triggers/uCDN/123  |\n   \
    \   [ ] --------------------------------------------------> [ ]\n       |    \
    \                                                  [ ]\n       |   (5) HTTP 200\
    \ Trigger Status Resource               [ ]\n      [ ] <--------------------------------------------------\
    \ [ ]\n       |                                                       |\n    \
    \   |                                                       |\n              Figure\
    \ 1: Basic CDNI Message Flow for Triggers\n   The steps in Figure 1 are as follows:\n\
    \   1.  The uCDN triggers action in the dCDN by POSTing a CI/T Command to\n  \
    \     a collection of Trigger Status Resources --\n       \"https://dcdn.example.com/triggers/uCDN\"\
    .  This URL was given to\n       the uCDN when the CI/T interface was established.\n\
    \   2.  The dCDN authenticates the request, validates the CI/T Command,\n    \
    \   and, if it accepts the request, creates a new Trigger Status\n       Resource.\n\
    \   3.  The dCDN responds to the uCDN with an HTTP 201 response status\n     \
    \  and the location of the Trigger Status Resource.\n   4.  The uCDN can poll,\
    \ possibly repeatedly, the Trigger Status\n       Resource in the dCDN.\n   5.\
    \  The dCDN responds with the Trigger Status Resource, describing\n       the\
    \ progress or results of the CI/T Trigger Command.\n   The remainder of this document\
    \ describes the messages, Trigger Status\n   Resources, and collections of Trigger\
    \ Status Resources in more\n   detail.\n"
- title: 2.1.  Timing of Triggered Activity
  contents:
  - "2.1.  Timing of Triggered Activity\n   Timing of the execution of CI/T Commands\
    \ is under the dCDN's control,\n   including its start time and pacing of the\
    \ activity in the network.\n   CI/T \"invalidate\" and \"purge\" commands MUST\
    \ be applied to all data\n   acquired before the command was accepted by the dCDN.\
    \  The dCDN\n   SHOULD NOT apply CI/T \"invalidate\" and \"purge\" commands to\
    \ data\n   acquired after the CI/T Command was accepted, but this may not always\n\
    \   be achievable, so the uCDN cannot count on that.\n   If the uCDN wishes to\
    \ invalidate or purge content and then\n   immediately pre-position replacement\
    \ content at the same URLs, it\n   SHOULD ensure that the dCDN has completed the\
    \ invalidate/purge before\n   initiating the pre-positioning.  Otherwise, there\
    \ is a risk that the\n   dCDN pre-positions the new content, then immediately\
    \ invalidates or\n   purges it (as a result of the two uCDN requests running in\
    \ parallel).\n   Because the CI/T Command timing is under the dCDN's control,\
    \ the dCDN\n   implementation can choose whether to apply CI/T \"invalidate\"\
    \ and\n   \"purge\" commands to content acquisition that has already started when\n\
    \   the command is received.\n"
- title: 2.2.  Scope of Triggered Activity
  contents:
  - "2.2.  Scope of Triggered Activity\n   Each CI/T Command can operate on multiple\
    \ metadata and content URLs.\n   Multiple representations of an HTTP resource\
    \ may share the same URL.\n   CI/T Trigger Commands that invalidate or purge metadata\
    \ or content\n   apply to all resource representations with matching URLs.\n"
- title: 2.2.1.  Multiple Interconnected CDNs
  contents:
  - "2.2.1.  Multiple Interconnected CDNs\n   In a network of interconnected CDNs,\
    \ a single uCDN will originate a\n   given item of metadata and associated content.\
    \  It may distribute\n   that metadata and content to more than one dCDN, which\
    \ may in turn\n   distribute that metadata and content to CDNs located further\n\
    \   downstream.\n   An intermediate CDN is a dCDN that passes on CDNI Metadata\
    \ and\n   content to dCDNs located further downstream.\n   A \"diamond\" configuration\
    \ is one where a dCDN can acquire metadata\n   and content originated in one uCDN\
    \ from that uCDN itself and an\n   intermediate CDN, or via more than one intermediate\
    \ CDN.\n   CI/T Commands originating in the single source uCDN affect metadata\n\
    \   and content in all dCDNs; however, in a diamond configuration, it may\n  \
    \ not be possible for the dCDN to determine which uCDN it acquired\n   content\
    \ from.  In this case, a dCDN MUST allow each uCDN from which\n   it may have\
    \ acquired the content to act upon that content using CI/T\n   Commands.\n   In\
    \ all other cases, a dCDN MUST reject CI/T Commands from a uCDN that\n   attempts\
    \ to act on another uCDN's content by using, for example,\n   HTTP 403 (\"Forbidden\"\
    ).\n   Security considerations are discussed further in Section 8.\n   The diamond\
    \ configuration may lead to inefficient interactions, but\n   the interactions\
    \ are otherwise harmless.  For example:\n   o  When the uCDN issues an \"invalidate\"\
    \ CI/T Command, a dCDN will\n      receive that command from multiple directly\
    \ connected uCDNs.  The\n      dCDN may schedule multiple such commands separately,\
    \ and the last\n      scheduled command may affect content already revalidated\
    \ following\n      execution of the \"invalidate\" command that was scheduled\
    \ first.\n   o  If one of a dCDN's directly connected uCDNs loses its rights to\n\
    \      distribute content, it may issue a CI/T \"purge\" command.  That\n    \
    \  purge may affect content the dCDN could retain because it's\n      distributed\
    \ by another directly connected uCDN.  But, that content\n      can be reacquired\
    \ by the dCDN from the remaining uCDN.\n   o  When the uCDN originating an item\
    \ of content issues a CI/T purge\n      followed by a pre-position, two directly\
    \ connected uCDNs will pass\n      those commands to a dCDN.  That dCDN implementation\
    \ need not merge\n      those operations or notice the repetition, in which case\
    \ the purge\n      issued by one uCDN will complete before the other.  The first\
    \ uCDN\n      to finish its purge may then forward the \"preposition\" trigger,\n\
    \      and content pre-positioned as a result might be affected by the\n     \
    \ still-running purge issued by the other uCDN.  However, the dCDN\n      will\
    \ reacquire that content as needed, or when it's asked to\n      pre-position\
    \ the content by the second uCDN.  A dCDN\n      implementation could avoid this\
    \ interaction by knowing which uCDN\n      it acquired the content from, or it\
    \ could minimize the\n      consequences by recording the time at which the\n\
    \      \"invalidate\"/\"purge\" command was received and not applying it to\n\
    \      content acquired after that time.\n"
- title: 2.3.  Trigger Results
  contents:
  - "2.3.  Trigger Results\n   Possible states for a Trigger Status Resource are defined\
    \ in\n   Section 5.2.3.\n   The CI/T Trigger Command MUST NOT be reported as \"\
    complete\" until all\n   actions have been completed successfully.  The reasons\
    \ for failure,\n   and URLs or patterns affected, SHOULD be enumerated in the\
    \ Trigger\n   Status Resource.  For more details, see Section 4.7.\n   If a dCDN\
    \ is also acting as a uCDN in a cascade, it MUST forward CI/T\n   Commands to\
    \ any dCDNs that may be affected.  The CI/T Trigger Command\n   MUST NOT be reported\
    \ as \"complete\" in a CDN until it is \"complete\" in\n   all of its dCDNs. \
    \ If a CI/T Trigger Command is reported as\n   \"processed\" in any dCDN, intermediate\
    \ CDNs MUST NOT report\n   \"complete\"; instead, they MUST also report \"processed\"\
    .  A CI/T\n   Command MAY be reported as \"failed\" as soon as it fails in a CDN\
    \ or\n   in any of its dCDNs.  A canceled CI/T Trigger Command MUST be\n   reported\
    \ as \"cancelling\" until it has been reported as \"cancelled\",\n   \"complete\"\
    , or \"failed\" by all dCDNs in a cascade.\n"
- title: 3.  Collections of Trigger Status Resources
  contents:
  - "3.  Collections of Trigger Status Resources\n   As described in Section 2, Trigger\
    \ Status Resources exist in the dCDN\n   to report the status of activity triggered\
    \ by each uCDN.\n   A collection of Trigger Status Resources is a resource that\
    \ contains\n   a reference to each Trigger Status Resource in that collection.\n\
    \   The dCDN MUST make a collection of a uCDN's Trigger Status Resources\n   available\
    \ to that uCDN.  This collection includes all of the Trigger\n   Status Resources\
    \ created for CI/T Commands from the uCDN that have\n   been accepted by the dCDN,\
    \ and have not yet been deleted by the uCDN,\n   or expired and removed by the\
    \ dCDN (as described in Section 4.4).\n   Trigger Status Resources belonging to\
    \ a uCDN MUST NOT be visible to\n   any other CDN.  The dCDN could, for example,\
    \ achieve this by offering\n   different collection URLs to each uCDN and by filtering\
    \ the response\n   based on the uCDN with which the HTTP client is associated.\n\
    \   To trigger activity in a dCDN or to cancel triggered activity, the\n   uCDN\
    \ POSTs a CI/T Command to the dCDN's collection of the uCDN's\n   Trigger Status\
    \ Resources.\n   In order to allow the uCDN to check the status of multiple jobs\
    \ in a\n   single request, the dCDN MAY also maintain collections representing\n\
    \   filtered views of the collection of all Trigger Status Resources.\n   These\
    \ filtered collections are \"optional-to-implement\", but if they\n   are implemented,\
    \ the dCDN MUST include links to them in the\n   collection of all Trigger Status\
    \ Resources.  The filtered\n   collections are:\n   o  Pending - Trigger Status\
    \ Resources for CI/T Trigger Commands that\n      have been accepted but not yet\
    \ acted upon.\n   o  Active - Trigger Status Resources for CI/T Trigger Commands\
    \ that\n      are currently being processed in the dCDN.\n   o  Complete - Trigger\
    \ Status Resources representing activity that\n      completed successfully, and\
    \ \"processed\" CI/T Trigger Commands for\n      which no further status updates\
    \ will be made by the dCDN.\n   o  Failed - Trigger Status Resources representing\
    \ CI/T Commands that\n      failed or were canceled by the uCDN.\n"
- title: 4.  CDNI Trigger Interface
  contents:
  - "4.  CDNI Trigger Interface\n   This section describes an interface to enable\
    \ a uCDN to trigger\n   activity in a dCDN.\n   The CI/T interface builds on top\
    \ of HTTP, so dCDNs may make use of\n   any HTTP feature when implementing the\
    \ CI/T interface.  For example,\n   a dCDN SHOULD make use of HTTP's caching mechanisms\
    \ to indicate that\n   a requested response/representation has not been modified,\
    \ reducing\n   the uCDN's processing needed to determine whether the status of\n\
    \   triggered activity has changed.\n   All dCDNs implementing CI/T MUST support\
    \ the HTTP GET, HEAD, POST,\n   and DELETE methods as defined in [RFC7231].\n\
    \   The only representation specified in this document is JSON [RFC7159].\n  \
    \ It MUST be supported by the uCDN and by the dCDN.\n   The URL of the dCDN's\
    \ collection of all Trigger Status Resources\n   needs to be either discovered\
    \ by or configured in the uCDN.  The\n   mechanism for discovery of that URL is\
    \ outside the scope of this\n   document.\n   CI/T Commands are POSTed to the\
    \ dCDN's collection of all Trigger\n   Status Resources.  If a CI/T Trigger Command\
    \ is accepted by the dCDN,\n   the dCDN creates a new Trigger Status Resource\
    \ and returns its URI to\n   the uCDN in an HTTP 201 response.  The triggered\
    \ activity can then be\n   monitored by the uCDN using that resource and the collections\n\
    \   described in Section 3.\n   The URI of each Trigger Status Resource is returned\
    \ to the uCDN when\n   it is created, and URIs of all Trigger Status Resources\
    \ are listed in\n   the dCDN's collection of all Trigger Status Resources.  This\
    \ means\n   all Trigger Status Resources can be discovered by the uCDN, so dCDNs\n\
    \   are free to assign whatever structure they desire to the URIs for\n   CI/T\
    \ resources.  Therefore, uCDNs MUST NOT make any assumptions\n   regarding the\
    \ structure of CI/T URIs or the mapping between CI/T\n   objects and their associated\
    \ URIs.  URIs present in the examples in\n   this document are purely illustrative\
    \ and are not intended to impose\n   a definitive structure on CI/T interface\
    \ implementations.\n"
- title: 4.1.  Creating Triggers
  contents:
  - "4.1.  Creating Triggers\n   To issue a CI/T Command, the uCDN makes an HTTP POST\
    \ to the dCDN's\n   collection of all of the uCDN's Trigger Status Resources.\
    \  The\n   request body of that POST is a CI/T Command, as described in\n   Section\
    \ 5.1.1.\n   The dCDN validates the CI/T Command.  If the command is malformed\
    \ or\n   the uCDN does not have sufficient access rights, the dCDN MUST either\n\
    \   respond with an appropriate 4xx HTTP error code and not create a\n   Trigger\
    \ Status Resource or create a \"failed\" Trigger Status Resource\n   containing\
    \ an appropriate Error Description.\n   When a CI/T Trigger Command is accepted,\
    \ the uCDN MUST create a new\n   Trigger Status Resource that will convey a specification\
    \ of the CI/T\n   Command and its current status.  The HTTP response to the dCDN\
    \ MUST\n   have status code 201 and MUST convey the URI of the Trigger Status\n\
    \   Resource in the Location header field [RFC7231].  The HTTP response\n   SHOULD\
    \ include the content of the newly created Trigger Status\n   Resource.  This\
    \ is particularly important in cases where the CI/T\n   Trigger Command has completed\
    \ immediately.\n   Once a Trigger Status Resource has been created, the dCDN MUST\
    \ NOT\n   reuse its URI, even after that Trigger Status Resource has been\n  \
    \ removed.\n   The dCDN SHOULD track and report on the progress of CI/T Trigger\n\
    \   Commands using a Trigger Status Resource (Section 5.1.2).  If the\n   dCDN\
    \ is not able to do that, it MUST indicate that it has accepted\n   the request\
    \ but will not be providing further status updates.  To do\n   this, it sets the\
    \ status of the Trigger Status Resource to\n   \"processed\".  In this case, CI/T\
    \ processing should continue as for a\n   \"complete\" request, so the Trigger\
    \ Status Resource MUST be added to\n   the dCDN's collection of complete Trigger\
    \ Status Resources.  The dCDN\n   SHOULD also provide an estimated completion\
    \ time for the request by\n   using the \"etime\" property of the Trigger Status\
    \ Resource.  This will\n   allow the uCDN to schedule pre-positioning after an\
    \ earlier delete of\n   the same URLs is expected to have finished.\n   If the\
    \ dCDN is able to track the execution of CI/T Commands and a\n   CI/T Command\
    \ is queued by the dCDN for later action, the \"status\"\n   property of the Trigger\
    \ Status Resource MUST be \"pending\".  Once\n   processing has started, the status\
    \ MUST be \"active\".  Finally, once\n   the CI/T Command is complete, the status\
    \ MUST be set to \"complete\" or\n   \"failed\".\n   A CI/T Trigger Command may\
    \ result in no activity in the dCDN if, for\n   example, it is an \"invalidate\"\
    \ or \"purge\" request for data the dCDN\n   has not yet acquired, or a \"preposition\"\
    \ request for data that it has\n   already acquired and that is still valid. \
    \ In this case, the status\n   of the Trigger Status Resource MUST be \"processed\"\
    \ or \"complete\", and\n   the Trigger Status Resource MUST be added to the dCDN's\
    \ collection of\n   complete Trigger Status Resources.\n   Once created, Trigger\
    \ Status Resources can be canceled or deleted by\n   the uCDN, but not modified.\
    \  The dCDN MUST reject PUT and POST\n   requests from the uCDN to Trigger Status\
    \ Resources by responding with\n   an appropriate HTTP status code -- for example,\
    \ 405 (\"Method Not\n   Allowed\").\n"
- title: 4.2.  Checking Status
  contents:
  - "4.2.  Checking Status\n   The uCDN has two ways to check the progress of CI/T\
    \ Commands it has\n   issued to the dCDN, as described in Sections 4.2.1 and 4.2.2.\n\
    \   To allow the uCDN to check for changes in the status of a Trigger\n   Status\
    \ Resource or collection of Trigger Status Resources without\n   refetching the\
    \ whole resource or collection, the dCDN SHOULD include\n   entity-tags (ETags)\
    \ for the uCDN to use as cache validators, as\n   defined in [RFC7232].\n   The\
    \ dCDN SHOULD use the cache control headers for responses to GETs\n   for Trigger\
    \ Status Resources and Collections to indicate the\n   frequency at which it recommends\
    \ that the uCDN should poll for\n   change.\n"
- title: 4.2.1.  Polling Trigger Status Resource Collections
  contents:
  - "4.2.1.  Polling Trigger Status Resource Collections\n   The uCDN can fetch the\
    \ collection of its Trigger Status Resources or\n   filtered views of that collection.\n\
    \   This makes it possible to poll the status of all CI/T Trigger\n   Commands\
    \ in a single request.  If the dCDN moves a Trigger Status\n   Resource from the\
    \ active to the completed collection, the uCDN can\n   fetch the result of that\
    \ activity.\n   When polling in this way, the uCDN SHOULD use HTTP ETags to monitor\n\
    \   for change, rather than repeatedly fetching the whole collection.  An\n  \
    \ example of this is given in Section 6.2.4.\n"
- title: 4.2.2.  Polling Trigger Status Resources
  contents:
  - "4.2.2.  Polling Trigger Status Resources\n   The uCDN has a URI provided by the\
    \ dCDN for each Trigger Status\n   Resource it has created.  It may fetch that\
    \ Trigger Status Resource\n   at any time.\n   This can be used to retrieve progress\
    \ information and to fetch the\n   result of the CI/T Command.\n   When polling\
    \ in this way, the uCDN SHOULD use HTTP ETags to monitor\n   for change, rather\
    \ than repeatedly fetching the Trigger Status\n   Resource.\n"
- title: 4.3.  Canceling Triggers
  contents:
  - "4.3.  Canceling Triggers\n   The uCDN can request cancellation of a CI/T Trigger\
    \ Command by\n   POSTing a CI/T Cancel Command to the collection of all Trigger\
    \ Status\n   Resources.\n   The dCDN is required to accept and respond to the\
    \ CI/T Cancel\n   Command, but the actual cancellation of a CI/T Trigger Command\
    \ is\n   optional-to-implement.\n   The dCDN MUST respond to the CI/T Cancel Command\
    \ appropriately -- for\n   example, with HTTP status code 200 (\"OK\") if the\
    \ cancellation has\n   been processed and the CI/T Command is inactive, 202 (\"\
    Accepted\") if\n   the command has been accepted but the CI/T Command remains\
    \ active, or\n   501 (\"Not Implemented\") if cancellation is not supported by\
    \ the dCDN.\n   If cancellation of a \"pending\" Trigger Status Resource is accepted\
    \ by\n   the dCDN, the dCDN SHOULD NOT start the processing of that activity.\n\
    \   Issuing a CI/T Cancel Command for a \"pending\" Trigger Status Resource\n\
    \   does not, however, guarantee that the corresponding activity will not\n  \
    \ be started, because the uCDN cannot control the timing of that\n   activity.\
    \  Processing could, for example, start after the POST is\n   sent by the uCDN\
    \ but before that request is processed by the dCDN.\n   If cancellation of an\
    \ \"active\" or \"processed\" Trigger Status Resource\n   is accepted by the dCDN,\
    \ the dCDN SHOULD stop processing the CI/T\n   Command.  However, as with cancellation\
    \ of a \"pending\" CI/T Command,\n   the dCDN does not guarantee this.\n   If\
    \ the CI/T Command cannot be stopped immediately, the status in the\n   corresponding\
    \ Trigger Status Resource MUST be set to \"cancelling\",\n   and the Trigger Status\
    \ Resource MUST remain in the collection of\n   Trigger Status Resources for active\
    \ CI/T Commands.  If processing is\n   stopped before normal completion, the status\
    \ value in the Trigger\n   Status Resource MUST be set to \"cancelled\", and the\
    \ Trigger Status\n   Resource MUST be included in the collection of failed CI/T\
    \ Trigger\n   Commands.\n   Cancellation of a \"complete\" or \"failed\" Trigger\
    \ Status Resource\n   requires no processing in the dCDN.  Its status MUST NOT\
    \ be changed\n   to \"cancelled\".\n"
- title: 4.4.  Deleting Triggers
  contents:
  - "4.4.  Deleting Triggers\n   The uCDN can delete Trigger Status Resources at any\
    \ time, using the\n   HTTP DELETE method.  The effect is similar to cancellation,\
    \ but no\n   Trigger Status Resource remains afterwards.\n   Once deleted, the\
    \ references to a Trigger Status Resource MUST be\n   removed from all Trigger\
    \ Status Resource collections.  Subsequent\n   requests to GET the deleted Trigger\
    \ Status Resource SHOULD be\n   rejected by the dCDN with an HTTP error.\n   If\
    \ a \"pending\" Trigger Status Resource is deleted, the dCDN\n   SHOULD NOT start\
    \ the processing of that activity.  Deleting a\n   \"pending\" Trigger Status\
    \ Resource does not, however, guarantee that\n   it has not started, because the\
    \ uCDN cannot control the timing of\n   that activity.  Processing may, for example,\
    \ start after the DELETE\n   is sent by the uCDN but before that request is processed\
    \ by the dCDN.\n   If an \"active\" or \"processed\" Trigger Status Resource is\
    \ deleted, the\n   dCDN SHOULD stop processing the CI/T Command.  However, as\
    \ with\n   deletion of a \"pending\" Trigger Status Resource, the dCDN does not\n\
    \   guarantee this.\n   Deletion of a \"complete\" or \"failed\" Trigger Status\
    \ Resource requires\n   no processing in the dCDN other than deletion of the Trigger\
    \ Status\n   Resource.\n"
- title: 4.5.  Expiry of Trigger Status Resources
  contents:
  - "4.5.  Expiry of Trigger Status Resources\n   The dCDN can choose to automatically\
    \ delete Trigger Status Resources\n   some time after they become \"complete\"\
    , \"processed\", \"failed\", or\n   \"cancelled\".  In this case, the dCDN will\
    \ remove the Trigger Status\n   Resource and respond to subsequent requests for\
    \ it with an HTTP\n   error.\n   If the dCDN does remove Trigger Status Resources\
    \ automatically, it\n   MUST report the length of time after which it will do\
    \ so, using a\n   property of the collection of all Trigger Status Resources.\
    \  It is\n   RECOMMENDED that Trigger Status Resources are not automatically\n\
    \   deleted by the dCDN for at least 24 hours after they become\n   \"complete\"\
    , \"processed\", \"failed\", or \"cancelled\".\n   To ensure that it is able to\
    \ get the status of its Trigger Status\n   Resources for completed and failed\
    \ CI/T Commands, it is RECOMMENDED\n   that the uCDN polling interval is less\
    \ than the time after which\n   records for completed activity will be deleted.\n"
- title: 4.6.  Loop Detection and Prevention
  contents:
  - "4.6.  Loop Detection and Prevention\n   Given three CDNs, A, B, and C, if CDNs\
    \ B and C delegate delivery of\n   CDN A's content to each other, CDN A's CI/T\
    \ Commands could be passed\n   between CDNs B and C in a loop.  More complex networks\
    \ of CDNs could\n   contain similar loops involving more hops.\n   In order to\
    \ prevent and detect such CI/T loops, each CDN uses a CDN\n   Provider ID (PID)\
    \ to uniquely identify itself.  In every CI/T Command\n   it originates or cascades,\
    \ each CDN MUST append an array element\n   containing its CDN PID to a JSON array\
    \ under an entry named\n   \"cdn-path\".  When receiving CI/T Commands, a dCDN\
    \ MUST check the\n   cdn-path and reject any CI/T Command that already contains\
    \ its own\n   CDN PID in the cdn-path.  Transit CDNs MUST check the cdn-path and\n\
    \   not cascade the CI/T Command to dCDNs that are already listed in the\n   cdn-path.\n\
    \   The CDN PID consists of the two characters \"AS\" followed by the CDN\n  \
    \ provider's Autonomous System number [RFC1930], then a colon (\":\") and\n  \
    \ an additional qualifier that is used to guarantee uniqueness in case\n   a particular\
    \ AS has multiple independent CDNs deployed -- for\n   example, \"AS64496:0\"\
    .\n   If the CDN provider has multiple ASes, the same AS number SHOULD be\n  \
    \ used in all messages from that CDN provider, unless there are\n   multiple distinct\
    \ CDNs.\n   If the CDNI Request Routing Redirection interface (RI) described in\n\
    \   [RFC7975] is implemented by the dCDN, the CI/T interface and the RI\n   SHOULD\
    \ use the same CDN PID.\n"
- title: 4.7.  Error Handling
  contents:
  - "4.7.  Error Handling\n   A dCDN can signal rejection of a CI/T Command using\
    \ HTTP status codes\n   -- for example, 400 (\"Bad Request\") if the request is\
    \ malformed, or\n   403 (\"Forbidden\") or 404 (\"Not Found\") if the uCDN does\
    \ not have\n   permission to issue CI/T Commands or it is trying to act on another\n\
    \   CDN's data.\n   If any part of the CI/T Trigger Command fails, the trigger\
    \ SHOULD be\n   reported as \"failed\" once its activity is complete or if no\
    \ further\n   errors will be reported.  The \"errors\" property in the Trigger\
    \ Status\n   Resource will be used to enumerate which actions failed and the\n\
    \   reasons for failure, and can be present while the Trigger Status\n   Resource\
    \ is still \"pending\" or \"active\", if the CI/T Trigger Command\n   is still\
    \ running for some URLs or patterns in the Trigger\n   Specification.\n   Once\
    \ a request has been accepted, processing errors are reported in\n   the Trigger\
    \ Status Resource using a list of Error Descriptions.  Each\n   Error Description\
    \ is used to report errors against one or more of the\n   URLs or patterns in\
    \ the Trigger Specification.\n   If a Surrogate affected by a CI/T Trigger Command\
    \ is offline in the\n   dCDN or the dCDN is unable to pass a CI/T Command on to\
    \ any of its\n   cascaded dCDNs:\n   o  If the CI/T Command is abandoned by the\
    \ dCDN, the dCDN SHOULD\n      report an error.\n   o  A CI/T \"invalidate\" command\
    \ may be reported as \"complete\" when\n      Surrogates that may have the data\
    \ are offline.  In this case,\n      Surrogates MUST NOT use the affected data\
    \ without first\n      revalidating it when they are back online.\n   o  CI/T\
    \ \"preposition\" and \"purge\" commands can be reported as\n      \"processed\"\
    \ if affected caches are offline and the activity will\n      complete when they\
    \ return to service.\n   o  Otherwise, the dCDN SHOULD keep the Trigger Status\
    \ Resource in\n      state \"pending\" or \"active\" until either the CI/T Command\
    \ is acted\n      upon or the uCDN chooses to cancel it.\n"
- title: 4.8.  Content URLs
  contents:
  - "4.8.  Content URLs\n   If content URLs are transformed by an intermediate CDN\
    \ in a cascade,\n   that intermediate CDN MUST similarly transform URLs in CI/T\
    \ Commands\n   it passes to its dCDN.\n   When processing Trigger Specifications,\
    \ CDNs MUST ignore the URL\n   scheme (HTTP or HTTPS) in comparing URLs.  For\
    \ example, for a CI/T\n   \"invalidate\" or \"purge\" command, content MUST be\
    \ invalidated or\n   purged regardless of the protocol clients used to request\
    \ it.\n"
- title: 5.  CI/T Object Properties and Encoding
  contents:
  - "5.  CI/T Object Properties and Encoding\n   The CI/T Commands, Trigger Status\
    \ Resources, and Trigger Collections,\n   as well as their properties, are encoded\
    \ using JSON, as defined in\n   Sections 5.1.1, 5.1.2, and 5.1.3.  They MUST use\
    \ the MIME media type\n   \"application/cdni\", with parameter \"ptype\" values\
    \ as defined below\n   and in Section 7.1.\n   Names in JSON are case sensitive.\
    \  The names and literal values\n   specified in the present document MUST always\
    \ use lowercase.\n   JSON types, including \"object\", \"array\", \"number\",\
    \ and \"string\", are\n   defined in [RFC7159].\n   Unrecognized name/value pairs\
    \ in JSON objects SHOULD NOT be treated\n   as an error by either the uCDN or\
    \ dCDN.  They SHOULD be ignored\n   during processing and passed on by the dCDN\
    \ to any further dCDNs in a\n   cascade.\n"
- title: 5.1.  CI/T Objects
  contents:
  - "5.1.  CI/T Objects\n   The top-level objects defined by the CI/T interface are\
    \ described in\n   this section.\n   The encoding of values used by these objects\
    \ is described in\n   Section 5.2.\n"
- title: 5.1.1.  CI/T Commands
  contents:
  - "5.1.1.  CI/T Commands\n   CI/T Commands MUST use a MIME media type of \"application/cdni;\n\
    \   ptype=ci-trigger-command\".\n   A CI/T Command is encoded as a JSON object\
    \ containing the following\n   name/value pairs.\n      Name: trigger\n      \
    \   Description: A specification of the trigger type and a set of\n         data\
    \ to act upon.\n         Value: A Trigger Specification, as defined in Section\
    \ 5.2.1.\n         Mandatory: No, but exactly one of \"trigger\" or \"cancel\"\
    \ MUST be\n         present in a CI/T Command.\n      Name: cancel\n         Description:\
    \ The URLs of Trigger Status Resources for CI/T\n         Trigger Commands that\
    \ the uCDN wants to cancel.\n         Value: A non-empty JSON array of URLs represented\
    \ as JSON\n         strings.\n         Mandatory: No, but exactly one of \"trigger\"\
    \ or \"cancel\" MUST be\n         present in a CI/T Command.\n      Name: cdn-path\n\
    \         Description: The CDN PIDs of CDNs that have already issued the\n   \
    \      CI/T Command to their dCDNs.\n         Value: A non-empty JSON array of\
    \ JSON strings, where each\n         string is a CDN PID as defined in Section\
    \ 4.6.\n         Mandatory: Yes.\n"
- title: 5.1.2.  Trigger Status Resources
  contents:
  - "5.1.2.  Trigger Status Resources\n   Trigger Status Resources MUST use a MIME\
    \ media type of\n   \"application/cdni; ptype=ci-trigger-status\".\n   A Trigger\
    \ Status Resource is encoded as a JSON object containing the\n   following name/value\
    \ pairs.\n      Name: trigger\n         Description: The Trigger Specification\
    \ POSTed in the body of\n         the CI/T Command.  Note that this need not be\
    \ a byte-for-byte\n         copy.  For example, in the JSON representation the\
    \ dCDN may\n         re-serialize the information differently.\n         Value:\
    \ A Trigger Specification, as defined in Section 5.2.1.\n         Mandatory: Yes.\n\
    \      Name: ctime\n         Description: Time at which the CI/T Command was received\
    \ by the\n         dCDN.  Time is determined by the dCDN; there is no requirement\n\
    \         to synchronize clocks between interconnected CDNs.\n         Value:\
    \ Absolute Time, as defined in Section 5.2.5.\n         Mandatory: Yes.\n    \
    \  Name: mtime\n         Description: Time at which the Trigger Status Resource\
    \ was last\n         modified.  Time is determined by the dCDN; there is no\n\
    \         requirement to synchronize clocks between interconnected CDNs.\n   \
    \      Value: Absolute Time, as defined in Section 5.2.5.\n         Mandatory:\
    \ Yes.\n      Name: etime\n         Description: Estimate of the time at which\
    \ the dCDN expects to\n         complete the activity.  Time is determined by\
    \ the dCDN; there\n         is no requirement to synchronize clocks between interconnected\n\
    \         CDNs.\n         Value: Absolute Time, as defined in Section 5.2.5.\n\
    \         Mandatory: No.\n      Name: status\n         Description: Current status\
    \ of the triggered activity.\n         Value: Trigger Status, as defined in Section\
    \ 5.2.3.\n         Mandatory: Yes.\n      Name: errors\n         Description:\
    \ Descriptions of errors that have occurred while\n         processing a Trigger\
    \ Command.\n         Value: An array of Error Descriptions, as defined in\n  \
    \       Section 5.2.6.  An empty array is allowed and is equivalent to\n     \
    \    omitting \"errors\" from the object.\n         Mandatory: No.\n"
- title: 5.1.3.  Trigger Collections
  contents:
  - "5.1.3.  Trigger Collections\n   Trigger Collections MUST use a MIME media type\
    \ of \"application/cdni;\n   ptype=ci-trigger-collection\".\n   A Trigger Collection\
    \ is encoded as a JSON object containing the\n   following name/value pairs.\n\
    \      Name: triggers\n         Description: Links to Trigger Status Resources\
    \ in the\n         collection.\n         Value: A JSON array of zero or more URLs,\
    \ represented as JSON\n         strings.\n         Mandatory: Yes.\n      Name:\
    \ staleresourcetime\n         Description: The length of time for which the dCDN\
    \ guarantees\n         to keep a completed Trigger Status Resource.  After this\
    \ time,\n         the dCDN SHOULD delete the Trigger Status Resource and all\n\
    \         references to it from collections.\n         Value: A JSON number, which\
    \ must be a positive integer,\n         representing time in seconds.\n      \
    \   Mandatory: Yes, in the collection of all Trigger Status\n         Resources\
    \ if the dCDN deletes stale entries.  If the property\n         is present in\
    \ the filtered collections, it MUST have the same\n         value as in the collection\
    \ of all Trigger Status Resources.\n      Names: coll-all, coll-pending, coll-active,\
    \ coll-complete,\n      coll-failed\n         Description: Link to a Trigger Collection.\n\
    \         Value: A URL represented as a JSON string.\n         Mandatory: Links\
    \ to all of the filtered collections are\n         mandatory in the collection\
    \ of all Trigger Status Resources, if\n         the dCDN implements the filtered\
    \ collections.  Otherwise,\n         optional.\n      Name: cdn-id\n         Description:\
    \ The CDN PID of the dCDN.\n         Value: A JSON string, the dCDN's CDN PID,\
    \ as defined in\n         Section 4.6.\n         Mandatory: Only in the collection\
    \ of all Trigger Status\n         Resources, if the dCDN implements the filtered\
    \ collections.\n         Optional in the filtered collections (the uCDN can always\
    \ find\n         the dCDN's cdn-id in the collection of all Trigger Status\n \
    \        Resources, but the dCDN can choose to repeat that information\n     \
    \    in its implementation of filtered collections).\n"
- title: 5.2.  Properties of CI/T Objects
  contents:
  - "5.2.  Properties of CI/T Objects\n   This section defines the values that can\
    \ appear in the top-level\n   objects described in Section 5.1, and their encodings.\n"
- title: 5.2.1.  Trigger Specification
  contents:
  - "5.2.1.  Trigger Specification\n   A Trigger Collection is encoded as a JSON object\
    \ containing the\n   following name/value pairs.\n   An unrecognized name/value\
    \ pair in the Trigger Specification object\n   contained in a CI/T Command SHOULD\
    \ be preserved in the Trigger\n   Specification of any Trigger Status Resource\
    \ it creates.\n      Name: type\n         Description: Defines the type of the\
    \ CI/T Trigger Command.\n         Value: Trigger Type, as defined in Section 5.2.2.\n\
    \         Mandatory: Yes.\n      Name: metadata.urls\n         Description: The\
    \ uCDN URLs of the metadata the CI/T Trigger\n         Command applies to.\n \
    \        Value: A JSON array of URLs represented as JSON strings.\n         Mandatory:\
    \ No, but at least one of \"metadata.*\" or \"content.*\"\n         MUST be present\
    \ and non-empty.\n      Name: content.urls\n         Description: URLs of content\
    \ the CI/T Trigger Command applies\n         to.  See Section 4.8.\n         Value:\
    \ A JSON array of URLs represented as JSON strings.\n         Mandatory: No, but\
    \ at least one of \"metadata.*\" or \"content.*\"\n         MUST be present and\
    \ non-empty.\n      Name: content.ccid\n         Description: The Content Collection\
    \ IDentifier of content the\n         trigger applies to.  The \"ccid\" is a grouping\
    \ of content, as\n         defined by [RFC8006].\n         Value: A JSON array\
    \ of strings, where each string is a Content\n         Collection IDentifier.\n\
    \         Mandatory: No, but at least one of \"metadata.*\" or \"content.*\"\n\
    \         MUST be present and non-empty.\n      Name: metadata.patterns\n    \
    \     Description: The metadata the trigger applies to.\n         Value: A JSON\
    \ array of PatternMatch objects, as defined in\n         Section 5.2.4.\n    \
    \     Mandatory: No, but at least one of \"metadata.*\" or \"content.*\"\n   \
    \      MUST be present and non-empty, and metadata.patterns MUST NOT\n       \
    \  be present if the Trigger Type is \"preposition\".\n      Name: content.patterns\n\
    \         Description: The content data the trigger applies to.\n         Value:\
    \ A JSON array of PatternMatch objects, as defined in\n         Section 5.2.4.\n\
    \         Mandatory: No, but at least one of \"metadata.*\" or \"content.*\"\n\
    \         MUST be present and non-empty, and content.patterns MUST NOT be\n  \
    \       present if the Trigger Type is \"preposition\".\n"
- title: 5.2.2.  Trigger Type
  contents:
  - "5.2.2.  Trigger Type\n   Trigger Type is used in a Trigger Specification to describe\
    \ trigger\n   action.\n   All trigger types MUST be registered in the IANA \"\
    CDNI CI/T Trigger\n   Types\" registry (see Section 7.2).\n   A dCDN receiving\
    \ a request containing a trigger type it does not\n   recognize or does not support\
    \ MUST reject the request by creating a\n   Trigger Status Resource with a status\
    \ of \"failed\" and the \"errors\"\n   array containing an Error Description with\
    \ error \"eunsupported\".\n   The following trigger types are defined by this\
    \ document:\n   +-------------+-----------------------------------------------------+\n\
    \   | JSON String | Description                                         |\n  \
    \ +-------------+-----------------------------------------------------+\n   |\
    \ preposition | A request for the dCDN to acquire metadata or       |\n   |  \
    \           | content.                                            |\n   | invalidate\
    \  | A request for the dCDN to invalidate metadata or    |\n   |             |\
    \ content.  After servicing this request, the dCDN    |\n   |             | will\
    \ not use the specified data without first       |\n   |             | revalidating\
    \ it using, for example, an              |\n   |             | \"If-None-Match\"\
    \ HTTP request.  The dCDN need not    |\n   |             | erase the associated\
    \ data.                          |\n   | purge       | A request for the dCDN\
    \ to erase metadata or         |\n   |             | content.  After servicing\
    \ the request, the          |\n   |             | specified data MUST NOT be held\
    \ on the dCDN (the    |\n   |             | dCDN should reacquire the metadata\
    \ or content from  |\n   |             | the uCDN if it needs it).           \
    \                |\n   +-------------+-----------------------------------------------------+\n"
- title: 5.2.3.  Trigger Status
  contents:
  - "5.2.3.  Trigger Status\n   Trigger Status describes the current status of the\
    \ triggered\n   activity.  It MUST be one of the JSON strings in the following\
    \ table:\n   +-----------+-------------------------------------------------------+\n\
    \   | JSON      | Description                                           |\n  \
    \ | String    |                                                       |\n   +-----------+-------------------------------------------------------+\n\
    \   | pending   | The CI/T Trigger Command has not yet been acted upon. |\n  \
    \ | active    | The CI/T Trigger Command is currently being acted     |\n   |\
    \           | upon.                                                 |\n   | complete\
    \  | The CI/T Trigger Command completed successfully.      |\n   | processed |\
    \ The CI/T Trigger Command has been accepted, and no    |\n   |           | further\
    \ status update will be made (can be used in    |\n   |           | cases where\
    \ completion cannot be confirmed).          |\n   | failed    | The CI/T Trigger\
    \ Command could not be completed.      |\n   | canceling | Processing of the CI/T\
    \ Trigger Command is still in    |\n   |           | progress, but the CI/T Trigger\
    \ Command has been       |\n   |           | canceled by the uCDN.           \
    \                      |\n   | canceled  | The CI/T Trigger Command was canceled\
    \ by the uCDN.    |\n   +-----------+-------------------------------------------------------+\n"
- title: 5.2.4.  PatternMatch
  contents:
  - "5.2.4.  PatternMatch\n   A PatternMatch consists of a string pattern to match\
    \ against a URI,\n   and flags describing the type of match.\n   It is encoded\
    \ as a JSON object with the following name/value pairs:\n      Name: pattern\n\
    \         Description: A pattern for URI matching.\n         Value: A JSON string\
    \ representing the pattern.  The pattern can\n         contain the wildcards *\
    \ and ?, where * matches any sequence of\n         [RFC3986] pchar or \"/\" characters\
    \ (including the empty string)\n         and ? matches exactly one [RFC3986] pchar\
    \ character.  The three\n         literals $, * and ? MUST be escaped as $$, $*\
    \ and $? (where $\n         is the designated escape character).  All other characters\
    \ are\n         treated as literals.\n         Mandatory: Yes.\n      Name: case-sensitive\n\
    \         Description: Flag indicating whether or not case-sensitive\n       \
    \  matching should be used.\n         Value: One of the JSON values \"true\" (the\
    \ matching is case\n         sensitive) or \"false\" (the matching is case insensitive).\n\
    \         Mandatory: No; default is case-insensitive match.\n      Name: match-query-string\n\
    \         Description: Flag indicating whether to include the query part\n   \
    \      of the URI when comparing against the pattern.\n         Value: One of\
    \ the JSON values \"true\" (the full URI, including\n         the query part,\
    \ should be compared against the given pattern)\n         or \"false\" (the query\
    \ part of the URI should be dropped before\n         comparison with the given\
    \ pattern).\n         Mandatory: No; default is \"false\".  The query part of\
    \ the URI\n         should be dropped before comparison with the given pattern.\n\
    \   Example of case-sensitive prefix match against\n   \"https://www.example.com/trailers/\"\
    :\n   {\n       \"pattern\": \"https://www.example.com/trailers/*\",\n       \"\
    case-sensitive\": true\n   }\n"
- title: 5.2.5.  Absolute Time
  contents:
  - "5.2.5.  Absolute Time\n   A JSON number, seconds since the UNIX epoch (00:00:00\
    \ UTC on\n   1 January 1970).\n"
- title: 5.2.6.  Error Description
  contents:
  - "5.2.6.  Error Description\n   An Error Description is used to report the failure\
    \ of a CI/T Command\n   or failure in the activity it triggered.  It is encoded\
    \ as a JSON\n   object with the following name/value pairs:\n      Name: error\n\
    \         Value: Error Code, as defined in Section 5.2.7.\n         Mandatory:\
    \ Yes.\n      Names: metadata.urls, content.urls, metadata.patterns,\n      content.patterns\n\
    \         Description: Metadata and content references copied from the\n     \
    \    Trigger Specification.  Only those URLs and patterns to which\n         the\
    \ error applies are included in each property, but those URLs\n         and patterns\
    \ MUST be exactly as they appear in the request; the\n         dCDN MUST NOT generalize\
    \ the URLs.  (For example, if the uCDN\n         requests pre-positioning of URLs\n\
    \         \"https://content.example.com/a\" and\n         \"https://content.example.com/b\"\
    , the dCDN must not generalize\n         its error report to the pattern\n   \
    \      \"https://content.example.com/*\".)\n         Value: A JSON array of JSON\
    \ strings, where each string is\n         copied from a \"content.*\" or \"metadata.*\"\
    \ value in the\n         corresponding Trigger Specification.\n         Mandatory:\
    \ At least one of these name/value pairs is mandatory\n         in each Error\
    \ Description object.\n      Name: description\n         Description: A human-readable\
    \ description of the error.\n         Value: A JSON string, the human-readable\
    \ description.\n         Mandatory: No.\n"
- title: 5.2.7.  Error Code
  contents:
  - "5.2.7.  Error Code\n   This type is used by the dCDN to report failures in trigger\n\
    \   processing.  All Error Codes MUST be registered in the IANA \"CDNI\n   CI/T\
    \ Error Codes\" registry (see Section 7.3).  Unknown Error Codes\n   MUST be treated\
    \ as fatal errors, and the request MUST NOT be\n   automatically retried without\
    \ modification.\n   The following Error Codes are defined by this document and\
    \ MUST be\n   supported by an implementation of the CI/T interface.\n   +--------------+----------------------------------------------------+\n\
    \   | Error Code   | Description                                        |\n  \
    \ +--------------+----------------------------------------------------+\n   |\
    \ emeta        | The dCDN was unable to acquire metadata required   |\n   |  \
    \            | to fulfill the request.                            |\n   | econtent\
    \     | The dCDN was unable to acquire content (CI/T       |\n   |           \
    \   | \"preposition\" commands only).                      |\n   | eperm     \
    \   | The uCDN does not have permission to issue the     |\n   |             \
    \ | CI/T Command (for example, the data is owned by    |\n   |              |\
    \ another CDN).                                      |\n   | ereject      | The\
    \ dCDN is not willing to fulfill the CI/T        |\n   |              | Command\
    \ (for example, a \"preposition\" request for  |\n   |              | content\
    \ at a time when the dCDN would not accept   |\n   |              | Request Routing\
    \ requests from the uCDN).           |\n   | ecdn         | An internal error\
    \ in the dCDN or one of its dCDNs. |\n   | ecanceled    | The uCDN canceled the\
    \ request.                     |\n   | eunsupported | The Trigger Specification\
    \ contained a \"type\" that  |\n   |              | is not supported by the dCDN.\
    \  No action was taken |\n   |              | by the dCDN other than to create\
    \ a Trigger Status  |\n   |              | Resource in state \"failed\".     \
    \                   |\n   +--------------+----------------------------------------------------+\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   The following subsections provide examples of different CI/T\
    \ objects\n   encoded as JSON.\n   Discovery of the CI/T interface is out of scope\
    \ for this document.\n   In an implementation, all CI/T URLs are under the control\
    \ of the\n   dCDN.  The uCDN MUST NOT attempt to ascribe any meaning to individual\n\
    \   elements of the path.\n   In examples in this section, the URL \"https://dcdn.example.com/\n\
    \   triggers\" is used as the location of the collection of all Trigger\n   Status\
    \ Resources, and the CDN PID of the uCDN is \"AS64496:1\".\n"
- title: 6.1.  Creating Triggers
  contents:
  - "6.1.  Creating Triggers\n   Examples of the uCDN triggering activity in the dCDN:\n"
- title: 6.1.1.  Preposition
  contents:
  - "6.1.1.  Preposition\n   Below is an example of a CI/T \"preposition\" command\
    \ -- a POST to the\n   collection of all Trigger Status Resources.\n   Note that\
    \ \"metadata.patterns\" and \"content.patterns\" are not allowed\n   in a pre-position\
    \ Trigger Specification.\n   REQUEST:\n     POST /triggers HTTP/1.1\n     User-Agent:\
    \ example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept: */*\n    \
    \ Content-Type: application/cdni; ptype=ci-trigger-command\n     Content-Length:\
    \ 352\n     {\n       \"trigger\": {\n         \"type\": \"preposition\",\n  \
    \       \"metadata.urls\": [ \"https://metadata.example.com/a/b/c\" ],\n     \
    \    \"content.urls\": [\n             \"https://www.example.com/a/b/c/1\",\n\
    \             \"https://www.example.com/a/b/c/2\",\n             \"https://www.example.com/a/b/c/3\"\
    ,\n             \"https://www.example.com/a/b/c/4\"\n           ]\n       },\n\
    \       \"cdn-path\": [ \"AS64496:1\" ]\n     }\n   RESPONSE:\n     HTTP/1.1 201\
    \ Created\n     Date: Wed, 04 May 2016 08:48:10 GMT\n     Content-Length: 467\n\
    \     Content-Type: application/cdni; ptype=ci-trigger-status\n     Location:\
    \ https://dcdn.example.com/triggers/0\n     Server: example-server/0.1\n     {\n\
    \         \"ctime\": 1462351690,\n         \"etime\": 1462351698,\n         \"\
    mtime\": 1462351690,\n         \"status\": \"pending\",\n         \"trigger\"\
    : {\n             \"content.urls\": [\n                 \"https://www.example.com/a/b/c/1\"\
    ,\n                 \"https://www.example.com/a/b/c/2\",\n                 \"\
    https://www.example.com/a/b/c/3\",\n                 \"https://www.example.com/a/b/c/4\"\
    \n             ],\n             \"metadata.urls\": [\n                 \"https://metadata.example.com/a/b/c\"\
    \n             ],\n             \"type\": \"preposition\"\n         }\n     }\n"
- title: 6.1.2.  Invalidate
  contents:
  - "6.1.2.  Invalidate\n   Below is an example of a CI/T \"invalidate\" command --\
    \ another POST to\n   the collection of all Trigger Status Resources.  This instructs\
    \ the\n   dCDN to revalidate the content at \"https://www.example.com/a/\n   index.html\"\
    , as well as any metadata and content whose URLs are\n   prefixed by \"https://metadata.example.com/a/b/\"\
    \ using\n   case-insensitive matching, and \"https://www.example.com/a/b/\" using\n\
    \   case-sensitive matching, respectively.\n   REQUEST:\n     POST /triggers HTTP/1.1\n\
    \     User-Agent: example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept:\
    \ */*\n     Content-Type: application/cdni; ptype=ci-trigger-command\n     Content-Length:\
    \ 387\n     {\n       \"trigger\": {\n         \"type\": \"invalidate\",\n   \
    \      \"metadata.patterns\": [\n             { \"pattern\": \"https://metadata.example.com/a/b/*\"\
    \ }\n           ],\n         \"content.urls\": [ \"https://www.example.com/a/index.html\"\
    \ ],\n         \"content.patterns\": [\n             { \"pattern\": \"https://www.example.com/a/b/*\"\
    ,\n               \"case-sensitive\": true\n             }\n           ]\n   \
    \    },\n       \"cdn-path\": [ \"AS64496:1\" ]\n     }\n   RESPONSE:\n     HTTP/1.1\
    \ 201 Created\n     Date: Wed, 04 May 2016 08:48:11 GMT\n     Content-Length:\
    \ 545\n     Content-Type: application/cdni; ptype=ci-trigger-status\n     Location:\
    \ https://dcdn.example.com/triggers/1\n     Server: example-server/0.1\n     {\n\
    \         \"ctime\": 1462351691,\n         \"etime\": 1462351699,\n         \"\
    mtime\": 1462351691,\n         \"status\": \"pending\",\n         \"trigger\"\
    : {\n             \"content.patterns\": [\n                 {\n              \
    \       \"case-sensitive\": true,\n                     \"pattern\": \"https://www.example.com/a/b/*\"\
    \n                 }\n             ],\n             \"content.urls\": [\n    \
    \             \"https://www.example.com/a/index.html\"\n             ],\n    \
    \         \"metadata.patterns\": [\n                 {\n                     \"\
    pattern\": \"https://metadata.example.com/a/b/*\"\n                 }\n      \
    \       ],\n             \"type\": \"invalidate\"\n         }\n     }\n"
- title: 6.2.  Examining Trigger Status
  contents:
  - "6.2.  Examining Trigger Status\n   Once Trigger Status Resources have been created,\
    \ the uCDN can check\n   their status as shown in the following examples.\n"
- title: 6.2.1.  Collection of All Triggers
  contents:
  - "6.2.1.  Collection of All Triggers\n   The uCDN can fetch the collection of all\
    \ Trigger Status Resources it\n   has created that have not yet been deleted or\
    \ removed as expired.\n   After creation of the \"preposition\" and \"invalidate\"\
    \ triggers shown\n   above, this collection might look as follows:\n   REQUEST:\n\
    \     GET /triggers HTTP/1.1\n     User-Agent: example-user-agent/0.1\n     Host:\
    \ dcdn.example.com\n     Accept: */*\n   RESPONSE:\n     HTTP/1.1 200 OK\n   \
    \  Content-Length: 341\n     Expires: Wed, 04 May 2016 08:49:11 GMT\n     Server:\
    \ example-server/0.1\n     ETag: \"-936094426920308378\"\n     Cache-Control:\
    \ max-age=60\n     Date: Wed, 04 May 2016 08:48:11 GMT\n     Content-Type: application/cdni;\
    \ ptype=ci-trigger-collection\n     {\n         \"cdn-id\": \"AS64496:0\",\n \
    \        \"coll-active\": \"/triggers/active\",\n         \"coll-complete\": \"\
    /triggers/complete\",\n         \"coll-failed\": \"/triggers/failed\",\n     \
    \    \"coll-pending\": \"/triggers/pending\",\n         \"staleresourcetime\"\
    : 86400,\n         \"triggers\": [\n             \"https://dcdn.example.com/triggers/0\"\
    ,\n             \"https://dcdn.example.com/triggers/1\"\n         ]\n     }\n"
- title: 6.2.2.  Filtered Collections of Trigger Status Resources
  contents:
  - "6.2.2.  Filtered Collections of Trigger Status Resources\n   The filtered collections\
    \ are also available to the uCDN.  Before the\n   dCDN starts processing the two\
    \ CI/T Trigger Commands shown above,\n   both will appear in the collection of\
    \ pending triggers.  For example:\n   REQUEST:\n     GET /triggers/pending HTTP/1.1\n\
    \     User-Agent: example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept:\
    \ */*\n   RESPONSE:\n     HTTP/1.1 200 OK\n     Content-Length: 152\n     Expires:\
    \ Wed, 04 May 2016 08:49:11 GMT\n     Server: example-server/0.1\n     ETag: \"\
    4331492443626270781\"\n     Cache-Control: max-age=60\n     Date: Wed, 04 May\
    \ 2016 08:48:11 GMT\n     Content-Type: application/cdni; ptype=ci-trigger-collection\n\
    \     {\n         \"staleresourcetime\": 86400,\n         \"triggers\": [\n  \
    \           \"https://dcdn.example.com/triggers/0\",\n             \"https://dcdn.example.com/triggers/1\"\
    \n         ]\n     }\n   At this point, if no other Trigger Status Resources had\
    \ been created,\n   the other filtered views would be empty.  For example:\n \
    \  REQUEST:\n     GET /triggers/complete HTTP/1.1\n     User-Agent: example-user-agent/0.1\n\
    \     Host: dcdn.example.com\n     Accept: */*\n   RESPONSE:\n     HTTP/1.1 200\
    \ OK\n     Content-Length: 54\n     Expires: Wed, 04 May 2016 08:49:11 GMT\n \
    \    Server: example-server/0.1\n     ETag: \"7958041393922269003\"\n     Cache-Control:\
    \ max-age=60\n     Date: Wed, 04 May 2016 08:48:11 GMT\n     Content-Type: application/cdni;\
    \ ptype=ci-trigger-collection\n     {\n         \"staleresourcetime\": 86400,\n\
    \         \"triggers\": []\n     }\n"
- title: 6.2.3.  Individual Trigger Status Resources
  contents:
  - "6.2.3.  Individual Trigger Status Resources\n   The Trigger Status Resources\
    \ can also be examined for details about\n   individual CI/T Trigger Commands.\
    \  For example, for the CI/T\n   \"preposition\" and \"invalidate\" commands from\
    \ previous examples:\n   REQUEST:\n     GET /triggers/0 HTTP/1.1\n     User-Agent:\
    \ example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept: */*\n   RESPONSE:\n\
    \     HTTP/1.1 200 OK\n     Content-Length: 467\n     Expires: Wed, 04 May 2016\
    \ 08:49:10 GMT\n     Server: example-server/0.1\n     ETag: \"6990548174277557683\"\
    \n     Cache-Control: max-age=60\n     Date: Wed, 04 May 2016 08:48:10 GMT\n \
    \    Content-Type: application/cdni; ptype=ci-trigger-status\n     {\n       \
    \  \"ctime\": 1462351690,\n         \"etime\": 1462351698,\n         \"mtime\"\
    : 1462351690,\n         \"status\": \"pending\",\n         \"trigger\": {\n  \
    \           \"content.urls\": [\n                 \"https://www.example.com/a/b/c/1\"\
    ,\n                 \"https://www.example.com/a/b/c/2\",\n                 \"\
    https://www.example.com/a/b/c/3\",\n                 \"https://www.example.com/a/b/c/4\"\
    \n             ],\n             \"metadata.urls\": [\n                 \"https://metadata.example.com/a/b/c\"\
    \n             ],\n             \"type\": \"preposition\"\n         }\n     }\n\
    \   REQUEST:\n     GET /triggers/1 HTTP/1.1\n     User-Agent: example-user-agent/0.1\n\
    \     Host: dcdn.example.com\n     Accept: */*\n   RESPONSE:\n     HTTP/1.1 200\
    \ OK\n     Content-Length: 545\n     Expires: Wed, 04 May 2016 08:49:11 GMT\n\
    \     Server: example-server/0.1\n     ETag: \"-554385204989405469\"\n     Cache-Control:\
    \ max-age=60\n     Date: Wed, 04 May 2016 08:48:11 GMT\n     Content-Type: application/cdni;\
    \ ptype=ci-trigger-status\n     {\n         \"ctime\": 1462351691,\n         \"\
    etime\": 1462351699,\n         \"mtime\": 1462351691,\n         \"status\": \"\
    pending\",\n         \"trigger\": {\n             \"content.patterns\": [\n  \
    \               {\n                     \"case-sensitive\": true,\n          \
    \           \"pattern\": \"https://www.example.com/a/b/*\"\n                 }\n\
    \             ],\n             \"content.urls\": [\n                 \"https://www.example.com/a/index.html\"\
    \n             ],\n             \"metadata.patterns\": [\n                 {\n\
    \                     \"pattern\": \"https://metadata.example.com/a/b/*\"\n  \
    \               }\n             ],\n             \"type\": \"invalidate\"\n  \
    \       }\n     }\n"
- title: 6.2.4.  Polling for Changes in Status
  contents:
  - "6.2.4.  Polling for Changes in Status\n   The uCDN SHOULD use the ETags of collections\
    \ or Trigger Status\n   Resources when polling for changes in status, as shown\
    \ in the\n   following examples:\n   REQUEST:\n     GET /triggers/pending HTTP/1.1\n\
    \     User-Agent: example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept:\
    \ */*\n     If-None-Match: \"4331492443626270781\"\n   RESPONSE:\n     HTTP/1.1\
    \ 304 Not Modified\n     Content-Length: 0\n     Expires: Wed, 04 May 2016 08:49:11\
    \ GMT\n     Server: example-server/0.1\n     ETag: \"4331492443626270781\"\n \
    \    Cache-Control: max-age=60\n     Date: Wed, 04 May 2016 08:48:11 GMT\n   \
    \  Content-Type: application/cdni; ptype=ci-trigger-collection\n   REQUEST:\n\
    \     GET /triggers/0 HTTP/1.1\n     User-Agent: example-user-agent/0.1\n    \
    \ Host: dcdn.example.com\n     Accept: */*\n     If-None-Match: \"6990548174277557683\"\
    \n   RESPONSE:\n     HTTP/1.1 304 Not Modified\n     Content-Length: 0\n     Expires:\
    \ Wed, 04 May 2016 08:49:10 GMT\n     Server: example-server/0.1\n     ETag: \"\
    6990548174277557683\"\n     Cache-Control: max-age=60\n     Date: Wed, 04 May\
    \ 2016 08:48:10 GMT\n     Content-Type: application/cdni; ptype=ci-trigger-status\n\
    \   When the CI/T Trigger Command is complete, the contents of the\n   filtered\
    \ collections will be updated along with their ETags.  For\n   example, when the\
    \ two example CI/T Trigger Commands are complete, the\n   collections of pending\
    \ and complete Trigger Status Resources might\n   look like:\n   REQUEST:\n  \
    \   GET /triggers/pending HTTP/1.1\n     User-Agent: example-user-agent/0.1\n\
    \     Host: dcdn.example.com\n     Accept: */*\n   RESPONSE:\n     HTTP/1.1 200\
    \ OK\n     Content-Length: 54\n     Expires: Wed, 04 May 2016 08:49:15 GMT\n \
    \    Server: example-server/0.1\n     ETag: \"1337503181677633762\"\n     Cache-Control:\
    \ max-age=60\n     Date: Wed, 04 May 2016 08:48:15 GMT\n     Content-Type: application/cdni;\
    \ ptype=ci-trigger-collection\n     {\n         \"staleresourcetime\": 86400,\n\
    \         \"triggers\": []\n     }\n   REQUEST:\n     GET /triggers/complete HTTP/1.1\n\
    \     User-Agent: example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept:\
    \ */*\n   RESPONSE:\n     HTTP/1.1 200 OK\n     Content-Length: 152\n     Expires:\
    \ Wed, 04 May 2016 08:49:22 GMT\n     Server: example-server/0.1\n     ETag: \"\
    4481489539378529796\"\n     Cache-Control: max-age=60\n     Date: Wed, 04 May\
    \ 2016 08:48:22 GMT\n     Content-Type: application/cdni; ptype=ci-trigger-collection\n\
    \     {\n         \"staleresourcetime\": 86400,\n         \"triggers\": [\n  \
    \           \"https://dcdn.example.com/triggers/0\",\n             \"https://dcdn.example.com/triggers/1\"\
    \n         ]\n     }\n"
- title: 6.2.5.  Deleting Trigger Status Resources
  contents:
  - "6.2.5.  Deleting Trigger Status Resources\n   The uCDN can delete completed and\
    \ failed Trigger Status Resources to\n   reduce the size of the collections, as\
    \ described in Section 4.4.  For\n   example, to delete the \"preposition\" request\
    \ from earlier examples:\n   REQUEST:\n     DELETE /triggers/0 HTTP/1.1\n    \
    \ User-Agent: example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept:\
    \ */*\n   RESPONSE:\n     HTTP/1.1 204 No Content\n     Date: Wed, 04 May 2016\
    \ 08:48:22 GMT\n     Content-Length: 0\n     Content-Type: text/html; charset=UTF-8\n\
    \     Server: example-server/0.1\n   This would, for example, cause the collection\
    \ of completed Trigger\n   Status Resources shown in the example above to be updated\
    \ to:\n   REQUEST:\n     GET /triggers/complete HTTP/1.1\n     User-Agent: example-user-agent/0.1\n\
    \     Host: dcdn.example.com\n     Accept: */*\n   RESPONSE:\n     HTTP/1.1 200\
    \ OK\n     Content-Length: 105\n     Expires: Wed, 04 May 2016 08:49:22 GMT\n\
    \     Server: example-server/0.1\n     ETag: \"-6938620031669085677\"\n     Cache-Control:\
    \ max-age=60\n     Date: Wed, 04 May 2016 08:48:22 GMT\n     Content-Type: application/cdni;\
    \ ptype=ci-trigger-collection\n     {\n         \"staleresourcetime\": 86400,\n\
    \         \"triggers\": [\n             \"https://dcdn.example.com/triggers/1\"\
    \n         ]\n     }\n"
- title: 6.2.6.  Error Reporting
  contents:
  - "6.2.6.  Error Reporting\n   In this example, the uCDN has requested pre-positioning\
    \ of\n   \"https://newsite.example.com/index.html\", but the dCDN was unable to\n\
    \   locate metadata for that site:\n   REQUEST:\n     GET /triggers/2 HTTP/1.1\n\
    \     User-Agent: example-user-agent/0.1\n     Host: dcdn.example.com\n     Accept:\
    \ */*\n   RESPONSE:\n     HTTP/1.1 200 OK\n     Content-Length: 486\n     Expires:\
    \ Wed, 04 May 2016 08:49:26 GMT\n     Server: example-server/0.1\n     ETag: \"\
    5182824839919043757\"\n     Cache-Control: max-age=60\n     Date: Wed, 04 May\
    \ 2016 08:48:26 GMT\n     Content-Type: application/cdni; ptype=ci-trigger-status\n\
    \     {\n         \"ctime\": 1462351702,\n         \"errors\": [\n           \
    \  {\n                 \"content.urls\": [\n                     \"https://newsite.example.com/index.html\"\
    \n                 ],\n                 \"description\": \"newsite.example.com\
    \ not in HostIndex\",\n                 \"error\": \"emeta\"\n             }\n\
    \         ],\n         \"etime\": 1462351710,\n         \"mtime\": 1462351706,\n\
    \         \"status\": \"active\",\n         \"trigger\": {\n             \"content.urls\"\
    : [\n                 \"https://newsite.example.com/index.html\"\n           \
    \  ],\n             \"type\": \"preposition\"\n         }\n     }\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  CDNI Payload Type Parameter Registrations
  contents:
  - "7.1.  CDNI Payload Type Parameter Registrations\n   The IANA is requested to\
    \ register the following new Payload Types in\n   the \"CDNI Payload Types\" registry\
    \ defined by [RFC7736], for use with\n   the \"application/cdni\" MIME media type.\n\
    \                 +-----------------------+---------------+\n                \
    \ | Payload Type          | Specification |\n                 +-----------------------+---------------+\n\
    \                 | ci-trigger-command    | RFC 8007      |\n                \
    \ | ci-trigger-status     | RFC 8007      |\n                 | ci-trigger-collection\
    \ | RFC 8007      |\n                 +-----------------------+---------------+\n"
- title: 7.2.  "CDNI CI/T Trigger Types" Registry
  contents:
  - "7.2.  \"CDNI CI/T Trigger Types\" Registry\n   The IANA is requested to create\
    \ a new \"CDNI CI/T Trigger Types\"\n   subregistry under the \"Content Delivery\
    \ Network Interconnection\n   (CDNI) Parameters\" registry.\n   Additions to the\
    \ \"CDNI CI/T Trigger Types\" registry will be made via\n   the RFC Required policy\
    \ as defined in [RFC5226].\n   The initial contents of the \"CDNI CI/T Trigger\
    \ Types\" registry\n   comprise the names and descriptions listed in Section 5.2.2\
    \ of this\n   document, with this document acting as the specification.\n"
- title: 7.3.  "CDNI CI/T Error Codes" Registry
  contents:
  - "7.3.  \"CDNI CI/T Error Codes\" Registry\n   The IANA is requested to create\
    \ a new \"CDNI CI/T Error Codes\"\n   subregistry under the \"Content Delivery\
    \ Network Interconnection\n   (CDNI) Parameters\" registry.\n   Additions to the\
    \ \"CDNI CI/T Error Codes\" registry will be made via\n   the Specification Required\
    \ policy as defined in [RFC5226].  The\n   Designated Expert will verify that\
    \ new Error Code registrations do\n   not duplicate existing Error Code definitions\
    \ (in name or\n   functionality), prevent gratuitous additions to the namespace,\
    \ and\n   prevent any additions to the namespace that would impair the\n   interoperability\
    \ of CDNI implementations.\n   The initial contents of the \"CDNI CI/T Error Codes\"\
    \ registry comprise\n   the names and descriptions of the Error Codes listed in\
    \ Section 5.2.7\n   of this document, with this document acting as the specification.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The CI/T interface provides a mechanism to allow\
    \ a uCDN to generate\n   requests into the dCDN and to inspect its own CI/T requests\
    \ and their\n   current states.  The CI/T interface does not allow access to,\
    \ or\n   modification of, the uCDN or dCDN metadata relating to content\n   delivery\
    \ or to the content itself.  It can only control the presence\n   of that metadata\
    \ in the dCDN, and the processing work and network\n   utilization involved in\
    \ ensuring that presence.\n   By examining \"preposition\" requests to a dCDN,\
    \ and correctly\n   interpreting content and metadata URLs, an attacker could\
    \ learn the\n   uCDN's or content owner's predictions for future content popularity.\n\
    \   By examining \"invalidate\" or \"purge\" requests, an attacker could\n   learn\
    \ about changes in the content owner's catalog.\n   By injecting CI/T Commands,\
    \ an attacker or a misbehaving uCDN would\n   generate work in the dCDN and uCDN\
    \ as they process those requests.\n   So would a man-in-the-middle attacker modifying\
    \ valid CI/T Commands\n   generated by the uCDN.  In both cases, that would decrease\
    \ the dCDN's\n   caching efficiency by causing it to unnecessarily acquire or\n\
    \   reacquire content metadata and/or content.\n   A dCDN implementation of CI/T\
    \ MUST restrict the actions of a uCDN to\n   the data corresponding to that uCDN.\
    \  Failure to do so would allow\n   uCDNs to detrimentally affect each other's\
    \ efficiency by generating\n   unnecessary acquisition or reacquisition load.\n\
    \   An origin that chooses to delegate its delivery to a CDN is trusting\n   that\
    \ CDN to deliver content on its behalf; the interconnection of\n   CDNs is an\
    \ extension of that trust to dCDNs.  That trust relationship\n   is a commercial\
    \ arrangement, outside the scope of the CDNI protocols.\n   So, while a malicious\
    \ CDN could deliberately generate load on a dCDN\n   using the CI/T interface,\
    \ the protocol does not otherwise attempt to\n   address malicious behavior between\
    \ interconnected CDNs.\n"
- title: 8.1.  Authentication, Authorization, Confidentiality, Integrity
  contents:
  - "8.1.  Authentication, Authorization, Confidentiality, Integrity\n      Protection\n\
    \   A CI/T implementation MUST support Transport Layer Security (TLS)\n   transport\
    \ for HTTP (HTTPS) as per [RFC2818] and [RFC7230].\n   TLS MUST be used by the\
    \ server side (dCDN) and the client side (uCDN)\n   of the CI/T interface, including\
    \ authentication of the remote end,\n   unless alternate methods are used for\
    \ ensuring the security of the\n   information in the CI/T interface requests\
    \ and responses (such as\n   setting up an IPsec tunnel between the two CDNs or\
    \ using a physically\n   secured internal network between two CDNs that are owned\
    \ by the same\n   corporate entity).\n   The use of TLS for transport of the CI/T\
    \ interface allows the dCDN\n   and the uCDN to authenticate each other using\
    \ TLS client\n   authentication and TLS server authentication.\n   Once the dCDN\
    \ and the uCDN have mutually authenticated each other,\n   TLS allows:\n   o \
    \ The dCDN and the uCDN to authorize each other (to ensure that they\n      are\
    \ receiving CI/T Commands from, or reporting status to, an\n      authorized CDN).\n\
    \   o  CDNI commands and responses to be transmitted with\n      confidentiality.\n\
    \   o  Protection of the integrity of CDNI commands and responses.\n   When TLS\
    \ is used, the general TLS usage guidance in [RFC7525] MUST be\n   followed.\n\
    \   The mechanisms for access control are dCDN-specific and are not\n   standardized\
    \ as part of this CI/T specification.\n   HTTP requests that attempt to access\
    \ or operate on CI/T data\n   belonging to another CDN MUST be rejected using,\
    \ for example,\n   HTTP 403 (\"Forbidden\") or 404 (\"Not Found\").  This is intended\
    \ to\n   prevent unauthorized users from generating unnecessary load in dCDNs\n\
    \   or uCDNs due to revalidation, reacquisition, or unnecessary\n   acquisition.\n\
    \   When deploying a network of interconnected CDNs, the possible\n   inefficiencies\
    \ related to the diamond configuration discussed in\n   Section 2.2.1 should be\
    \ considered.\n"
- title: 8.2.  Denial of Service
  contents:
  - "8.2.  Denial of Service\n   This document does not define a specific mechanism\
    \ to protect against\n   Denial-of-Service (DoS) attacks on the CI/T interface.\
    \  However, CI/T\n   endpoints can be protected against DoS attacks through the\
    \ use of TLS\n   transport and/or via mechanisms outside the scope of the CI/T\n\
    \   interface, such as firewalling or the use of Virtual Private Networks\n  \
    \ (VPNs).\n   Depending on the implementation, triggered activity may consume\n\
    \   significant processing and bandwidth in the dCDN.  A malicious or\n   faulty\
    \ uCDN could use this to generate unnecessary load in the dCDN.\n   The dCDN should\
    \ consider mechanisms to avoid overload -- for example,\n   by rate-limiting acceptance\
    \ or processing of CI/T Commands, or by\n   performing batch processing.\n"
- title: 8.3.  Privacy
  contents:
  - "8.3.  Privacy\n   The CI/T protocol does not carry any information about individual\
    \ end\n   users of a CDN; there are no privacy concerns for end users.\n   The\
    \ CI/T protocol does carry information that could be considered\n   commercially\
    \ sensitive by CDN operators and content owners.  The use\n   of mutually authenticated\
    \ TLS to establish a secure session for the\n   transport of CI/T data, as discussed\
    \ in Section 8.1, provides\n   confidentiality while the CI/T data is in transit\
    \ and prevents\n   parties other than the authorized dCDN from gaining access\
    \ to that\n   data.  The dCDN MUST ensure that it only exposes CI/T data related\
    \ to\n   a uCDN to clients it has authenticated as belonging to that uCDN.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1930]  Hawkinson, J. and T. Bates, \"Guidelines\
    \ for creation,\n              selection, and registration of an Autonomous System\
    \ (AS)\",\n              BCP 6, RFC 1930, DOI 10.17487/RFC1930, March 1996,\n\
    \              <http://www.rfc-editor.org/info/rfc1930>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2818]  Rescorla, E.,\
    \ \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n\
    \              <http://www.rfc-editor.org/info/rfc2818>.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,\
    \ May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC6707]\
    \  Niven-Jenkins, B., Le Faucheur, F., and N. Bitar, \"Content\n             \
    \ Distribution Network Interconnection (CDNI) Problem\n              Statement\"\
    , RFC 6707, DOI 10.17487/RFC6707,\n              September 2012, <http://www.rfc-editor.org/info/rfc6707>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159,\n        \
    \      March 2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]  Fielding,\
    \ R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Semantics and Content\",\n              RFC 7231, DOI 10.17487/RFC7231,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7232]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Conditional Requests\",\n              RFC 7232, DOI 10.17487/RFC7232,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n   [RFC7525]\
    \  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\n\
    \              May 2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC8006]\
    \  Niven-Jenkins, B., Murray, R., Caulfield, M., and K. Ma,\n              \"\
    Content Delivery Network Interconnection (CDNI)\n              Metadata\", RFC\
    \ 8006, DOI 10.17487/RFC8006, December 2016,\n              <http://www.rfc-editor.org/info/rfc8006>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [CBOR-CDDL]\n              Vigano, C. and H.\
    \ Birkholz, \"CBOR data definition language\n              (CDDL): a notational\
    \ convention to express CBOR data\n              structures\", Work in Progress,\n\
    \              draft-greevenbosch-appsawg-cbor-cddl-09, September 2016.\n   [RFC7336]\
    \  Peterson, L., Davie, B., and R. van Brandenburg, Ed.,\n              \"Framework\
    \ for Content Distribution Network\n              Interconnection (CDNI)\", RFC\
    \ 7336, DOI 10.17487/RFC7336,\n              August 2014, <http://www.rfc-editor.org/info/rfc7336>.\n\
    \   [RFC7337]  Leung, K., Ed., and Y. Lee, Ed., \"Content Distribution\n     \
    \         Network Interconnection (CDNI) Requirements\", RFC 7337,\n         \
    \     DOI 10.17487/RFC7337, August 2014,\n              <http://www.rfc-editor.org/info/rfc7337>.\n\
    \   [RFC7736]  Ma, K., \"Content Delivery Network Interconnection (CDNI)\n   \
    \           Media Type Registration\", RFC 7736, DOI 10.17487/RFC7736,\n     \
    \         December 2015, <http://www.rfc-editor.org/info/rfc7736>.\n   [RFC7975]\
    \  Niven-Jenkins, B., Ed., and R. van Brandenburg, Ed.,\n              \"Request\
    \ Routing Redirection Interface for Content\n              Delivery Network (CDN)\
    \ Interconnection\", RFC 7975,\n              DOI 10.17487/RFC7975, October 2016,\n\
    \              <http://www.rfc-editor.org/info/rfc7975>.\n"
- title: Appendix A.  Formalization of the JSON Data
  contents:
  - "Appendix A.  Formalization of the JSON Data\n   This appendix is non-normative.\n\
    \   The JSON data described in this document has been formalized using\n   the\
    \ CBOR Data Definition Language (CDDL) [CBOR-CDDL] (where \"CBOR\"\n   means \"\
    Concise Binary Object Representation\"), as follows:\n CIT-object = CIT-command\
    \ / Trigger-Status-Resource / Trigger-Collection\n CIT-command ; use media type\
    \ application/cdni; ptype=ci-trigger-command\n = {\n   ? trigger: Triggerspec\n\
    \   ? cancel: [* URI]\n   cdn-path: [* Cdn-PID]\n }\n Trigger-Status-Resource\
    \ ; application/cdni; ptype=ci-trigger-status\n = {\n   trigger: Triggerspec\n\
    \   ctime: Absolute-Time\n   mtime: Absolute-Time\n   ? etime: Absolute-Time\n\
    \   status: Trigger-Status\n   ? errors: [* Error-Description]\n }\n Trigger-Collection\
    \ ; application/cdni; ptype=ci-trigger-collection\n = {\n   triggers: [* URI]\n\
    \   ? staleresourcetime: int ; time in seconds\n   ? coll-all: URI\n   ? coll-pending:\
    \ URI\n   ? coll-active: URI\n   ? coll-complete: URI\n   ? coll-failed: URI\n\
    \   ? cdn-id: Cdn-PID\n }\n Triggerspec = { ; see Section 5.2.1\n   type: Trigger-Type\n\
    \   ? metadata.urls: [* URI]\n   ? content.urls: [* URI]\n   ? content.ccid: [*\
    \ Ccid]\n   ? metadata.patterns: [* Pattern-Match]\n   ? content.patterns: [*\
    \ Pattern-Match]\n }\n Trigger-Type = \"preposition\" / \"invalidate\"\n    /\
    \ \"purge\" ; see Section 5.2.2\n Trigger-Status = \"pending\" / \"active\" /\
    \ \"complete\" / \"processed\"\n    / \"failed\" / \"cancelling\" / \"cancelled\"\
    \ ; see Section 5.2.3\n Pattern-Match = { ; see Section 5.2.4\n   pattern: tstr\n\
    \   ? case-sensitive: bool\n   ? match-query-string: bool\n }\n Absolute-Time\
    \ = number ; seconds since UNIX epoch (Section 5.2.5)\n Error-Description = {\
    \ ; see Section 5.2.6\n   error: Error-Code\n   ? metadata.urls: [* URI]\n   ?\
    \ content.urls: [* URI]\n   ? metadata.patterns: [* Pattern-Match]\n   ? content.patterns:\
    \ [* Pattern-Match]\n   ? description: tstr\n }\n Error-Code = \"emeta\" / \"\
    econtent\" / \"eperm\" / \"ereject\"\n    / \"ecdn\" / \"ecanceled\"  ; see Section\
    \ 5.2.7\n Ccid = tstr ; see RFC 8006\n Cdn-PID = tstr .regexp \"AS[0-9]+:[0-9]+\"\
    \n URI = tstr\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors thank Kevin Ma for his input, and Carsten Bormann\
    \ for his\n   review and formalization of the JSON data.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rob Murray\n   Nokia\n   3 Ely Road\n   Milton, Cambridge\
    \  CB24 6DD\n   United Kingdom\n   Email: rob.murray@nokia.com\n   Ben Niven-Jenkins\n\
    \   Nokia\n   3 Ely Road\n   Milton, Cambridge  CB24 6DD\n   United Kingdom\n\
    \   Email: ben.niven-jenkins@nokia.com\n"
