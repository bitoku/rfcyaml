- title: __initial_text__
  contents:
  - '            Dual-Stack Hosts Using "Bump-in-the-Host" (BIH)

    '
- title: Abstract
  contents:
  - "Abstract\n   Bump-in-the-Host (BIH) is a host-based IPv4 to IPv6 protocol\n \
    \  translation mechanism that allows a class of IPv4-only applications\n   that\
    \ work through NATs to communicate with IPv6-only peers.  The host\n   on which\
    \ applications are running may be connected to IPv6-only or\n   dual-stack access\
    \ networks.  BIH hides IPv6 and makes the IPv4-only\n   applications think they\
    \ are talking with IPv4 peers by local\n   synthesis of IPv4 addresses.  This\
    \ document obsoletes RFC 2767 and\n   RFC 3338.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6535.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................5\n  \
    \    1.2. Acknowledgment of Previous Work ............................5\n   2.\
    \ Components of the Bump-in-the-Host ..............................6\n      2.1.\
    \ Function Mapper ............................................8\n      2.2. Protocol\
    \ Translator ........................................8\n      2.3. Extension Name\
    \ Resolver ....................................8\n           2.3.1. Special Exclusion\
    \ Sets for A and AAAA Records .......9\n           2.3.2. DNSSEC Support .....................................10\n\
    \           2.3.3. Reverse DNS Lookup .................................10\n  \
    \         2.3.4. DNS Caches and Synthetic IPv4 Addresses ............10\n    \
    \  2.4. Address Mapper ............................................11\n   3. Behavior\
    \ and Network Examples ..................................11\n   4. Considerations\
    \ .................................................15\n      4.1. Socket API Conversion\
    \ .....................................15\n      4.2. Socket Bindings ...........................................15\n\
    \      4.3. ICMP Message Handling .....................................15\n  \
    \    4.4. IPv4 Address Pool and Mapping Table .......................15\n    \
    \  4.5. Multi-Interface ...........................................17\n      4.6.\
    \ Multicast .................................................17\n   5. Application-Level\
    \ Gateway Requirements Considerations ..........17\n   6. Security Considerations\
    \ ........................................17\n      6.1. Implications on End-to-End\
    \ Security .......................18\n      6.2. Filtering .................................................18\n\
    \      6.3. Attacks on BIH ............................................18\n  \
    \    6.4. DNS Considerations ........................................19\n   7.\
    \ Changes since RFC 2767 and RFC 3338 ............................19\n   8. Acknowledgments\
    \ ................................................20\n   9. References .....................................................21\n\
    \      9.1. Normative References ......................................21\n  \
    \    9.2. Informative References ....................................21\n   Appendix\
    \ A. API List Intercepted by BIH ...........................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes Bump-in-the-Host (BIH), a successor\
    \ and\n   combination of the Bump-in-the-Stack (BIS)[RFC2767] and Bump-in-the-\n\
    \   API (BIA) [RFC3338] technologies, which enable IPv4-only legacy\n   applications\
    \ to communicate with IPv6-only servers by synthesizing\n   IPv4 addresses from\
    \ AAAA records.  Section 7 describes the reasons\n   for making RFC 2767 and RFC\
    \ 3338 obsolete.\n   The supported class of applications includes those that use\
    \ DNS for\n   IP address resolution and that do not embed IP address literals\
    \ in\n   application-protocol payloads.  This includes legacy client-server\n\
    \   applications using the DNS that are agnostic to the IP address family\n  \
    \ used by the destination and that are able to do NAT traversal.  The\n   synthetic\
    \ IPv4 addresses shown to applications are taken from the\n   private address\
    \ pool of [RFC1918] in order to ensure that possible\n   NAT traversal techniques\
    \ will be initiated.\n   The IETF recommends using solutions based on dual stack\
    \ or tunneling\n   for IPv6 transition and specifically recommends against deployments\n\
    \   utilizing double protocol translation.  Use of BIH together with a\n   NAT64\
    \ is NOT RECOMMENDED [RFC6180].\n   BIH includes two major implementation alternatives:\
    \ a protocol\n   translator between the IPv4 and the IPv6 stacks of a host or\
    \ an API\n   translator between the IPv4 socket API module and the TCP/IP module.\n\
    \   Essentially, IPv4 is translated into IPv6 at the socket API layer or\n   at\
    \ the IP layer, the former of which is the recommended\n   implementation alternative.\n\
    \   When BIH is implemented at the socket API layer, the translator\n   intercepts\
    \ IPv4 socket API function calls and invokes corresponding\n   IPv6 socket API\
    \ function calls to communicate with IPv6 hosts.\n   When BIH is implemented at\
    \ the network layer, the IPv4 packets are\n   intercepted and converted to IPv6\
    \ using the IP conversion mechanism\n   defined in the Stateless IP/ICMP Translation\
    \ Algorithm (SIIT)\n   [RFC6145].  The protocol translation has the same benefits\
    \ and\n   drawbacks as SIIT.\n   The location of the BIH refers to the location\
    \ of the protocol\n   translation function.  The location of the IPv4 address\
    \ and DNS A\n   record synthesis function is orthogonal to the location of the\n\
    \   protocol translation and may or may not happen at the same location.\n   BIH\
    \ can be used whenever an IPv4-only application needs to\n   communicate with\
    \ an IPv6-only server, independently of the address\n   families supported by\
    \ the access network.  Hence, the access network\n   can be IPv6-only or dual-stack\
    \ capable.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",\
    \ \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n   This document uses terms defined in [RFC2460] and [RFC4213].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   DNS synthesis\n      The process of creating an A record\
    \ containing a synthetic IPv4\n      address.\n   Real IPv4 address\n      An\
    \ IPv4 address of a remote node a host has learned, for example,\n      from DNS\
    \ response to an A query.\n   Real IPv6 address\n      An IPv6 address of a remote\
    \ node a host has learned, for example,\n      from DNS response to a AAAA query.\n\
    \   Synthetic IPv4 address\n      An IPv4 address that has meaning only inside\
    \ a host and that is\n      used to provide IPv4 representation of remote node's\
    \ real IPv6\n      address.\n"
- title: 1.2.  Acknowledgment of Previous Work
  contents:
  - "1.2.  Acknowledgment of Previous Work\n   This document is a direct derivative\
    \ of [RFC2767], \"Dual Stack Hosts\n   using the \"Bump-In-the-Stack\" Technique\
    \ (BIS)\" by Kazuaki TSHUCHIYA,\n   Hidemitsu HIGUCHI, and Yoshifumi ATARASHI\
    \ and of [RFC3338], \"Dual\n   Stack Hosts Using \"Bump-in-the-API\" (BIA)\" by\
    \ Seungyun Lee, Myung-Ki\n   Shin, Yong-Jin Kim, Alain Durand, and Erik Nordmark,\
    \ which similarly\n   provides IPv4-only applications on dual-stack hosts the\
    \ means to\n   operate over IPv6.  Section 7 covers the changes since those\n\
    \   documents.\n"
- title: 2.  Components of the Bump-in-the-Host
  contents:
  - "2.  Components of the Bump-in-the-Host\n   Figure 1 shows the architecture of\
    \ a host in which BIH is implemented\n   as a socket API-layer translator, i.e.,\
    \ as a \"Bump-in-the-API\".\n                  +----------------------------------------------+\n\
    \                  | +------------------------------------------+ |\n        \
    \          | |                                          | |\n                \
    \  | |            IPv4 applications             | |\n                  | |   \
    \                                       | |\n                  | +------------------------------------------+\
    \ |\n                  | +------------------------------------------+ |\n    \
    \              | |           Socket API (IPv4, IPv6)        | |\n            \
    \      | +------------------------------------------+ |\n                  | +-[\
    \ API translator]------------------------+ |\n                  | | +-----------+\
    \ +---------+ +------------+ | |\n                  | | | Ext. Name | | Address\
    \ | | Function   | | |\n                  | | | Resolver  | | Mapper  | | Mapper\
    \     | | |\n                  | | +-----------+ +---------+ +------------+ |\
    \ |\n                  | +------------------------------------------+ |\n    \
    \              | +--------------------+ +-------------------+ |\n            \
    \      | |                    | |                   | |\n                  | |\
    \    TCP(UDP)/IPv4   | |   TCP(UDP)/IPv6   | |\n                  | |        \
    \            | |                   | |\n                  | +--------------------+\
    \ +-------------------+ |\n                  +----------------------------------------------+\n\
    \        Figure 1: Architecture of a dual-stack host using protocol\n        \
    \              translation at the socket layer\n   Figure 2 shows the architecture\
    \ of a host in which BIH is implemented\n   as a network-layer translator, i.e.,\
    \ a \"Bump-in-the-Stack\".\n      +------------------------------------------------------------+\n\
    \      |  +------------------------------------------+              |\n      |\
    \  |    IPv4 applications                     |              |\n      |  |   \
    \ Host's main DNS resolver              |              |\n      |  +------------------------------------------+\
    \              |\n      |  +------------------------------------------+      \
    \        |\n      |  |    TCP/UDP                               |            \
    \  |\n      |  +------------------------------------------+              |\n \
    \     |  +------------------------------------------+ +---------+  |\n      |\
    \  |    IPv4                                  | |         |  |\n      |  +------------------------------------------+\
    \ | Address |  |\n      |  +------------------+ +---------------------+ | Mapper\
    \  |  |\n      |  |    Protocol      | |   Extension Name    | |         |  |\n\
    \      |  |    Translator    | |   Resolver          | |         |  |\n      |\
    \  +------------------+ +---------------------+ |         |  |\n      |  +------------------------------------------+\
    \ |         |  |\n      |  |    IPv4 / IPv6                           | |    \
    \     |  |\n      |  +------------------------------------------+ +---------+\
    \  |\n      +------------------------------------------------------------+\n \
    \       Figure 2: Architecture of a dual-stack host using protocol\n         \
    \            translation at the network layer\n   Dual-stack hosts, defined in\
    \ [RFC4213], need applications, TCP/IP\n   modules, and addresses for both IPv4\
    \ and IPv6.  The proposed hosts in\n   this document have an API or network-layer\
    \ translator to allow legacy\n   IPv4 applications to communicate with IPv6-only\
    \ peers.  The BIH\n   architecture consists of an Extension Name Resolver, an\
    \ address\n   mapper, and depending on implementation either a function mapper\
    \ or a\n   protocol translator.  It is worth noting that the Extension Name\n\
    \   Resolver's placement is orthogonal to the placement of protocol\n   translation.\
    \  For example, the Extension Name Resolver may reside in\n   the socket API while\
    \ protocol translation takes place at the network\n   layer.\n   The choice between\
    \ the socket API- and network-layer architectures\n   varies case by case.  While\
    \ the socket API architecture alternative\n   is the recommended one, it may not\
    \ always be possible to choose.\n   This may be the case, for example, when the\
    \ used operating system\n   does not allow modifications to be done for API implementations,\
    \ but\n   does allow the addition of virtual network interfaces and related\n\
    \   software modules.  On the other hand, sometimes it may not be\n   possible\
    \ to introduce protocol translators inside the operating\n   system, but it may\
    \ be easy to modify implementations behind the API\n   provided for applications.\
    \  The choice of architecture also depends\n   on who is creating implementation\
    \ of BIH.  For example, an\n   application framework provider, an operating system\
    \ provider, and a\n   device vendor may all choose different approaches due their\
    \ different\n   positions.\n"
- title: 2.1.  Function Mapper
  contents:
  - "2.1.  Function Mapper\n   The function mapper translates an IPv4 socket API function\
    \ into an\n   IPv6 socket API function.\n   When detecting IPv4 socket API function\
    \ calls from IPv4 applications,\n   the function mapper MUST intercept the function\
    \ calls and invoke IPv6\n   socket API functions that correspond to the IPv4 socket\
    \ API\n   functions.\n   The function mapper MUST NOT perform function mapping\
    \ when the\n   application is initiating communications to the address range used\
    \ by\n   local synthesis and the address mapping table does not have an entry\n\
    \   matching the address.\n   See Appendix A for an informational list of functions\
    \ that would be\n   appropriate to intercept by the function mapper.\n"
- title: 2.2.  Protocol Translator
  contents:
  - "2.2.  Protocol Translator\n   The protocol translator translates IPv4 into IPv6,\
    \ and vice versa,\n   using the IP conversion mechanism defined in SIIT [RFC6145].\
    \  To\n   avoid unnecessary fragmentation, the host's IPv4 module SHOULD be\n\
    \   configured with a small enough MTU (MTU of the IPv6 enabled link - 20\n  \
    \ bytes).\n   Protocol translation cannot be performed for IPv4 packets sent to\
    \ the\n   IPv4 address range used by local synthesis and for which a mapping\n\
    \   table entry does not exist.  The implementation SHOULD attempt to\n   route\
    \ such packets via IPv4 interfaces instead.\n"
- title: 2.3.  Extension Name Resolver
  contents:
  - "2.3.  Extension Name Resolver\n   The Extension Name Resolver (ENR) returns an\
    \ answer in response to\n   the IPv4 application's name resolution request.\n\
    \   In the case of the socket API-layer implementation alternative, when\n   an\
    \ IPv4 application tries to do a forward lookup to resolve names via\n   the resolver\
    \ library (e.g., gethostbyname()), BIH intercepts the\n   function call and instead\
    \ calls the IPv6 equivalent functions (e.g.,\n   getaddrinfo()) that will resolve\
    \ both A and AAAA records.  This\n   implementation alternative is name resolution\
    \ protocol agnostic;\n   hence, it supports techniques such as \"hosts-file\"\
    , NetBIOS, mDNS,\n   and anything else the underlying operating system uses.\n\
    \   In the case of the network-layer implementation alternative, the ENR\n   intercepts\
    \ the A query and creates an additional AAAA query with\n   similar content. \
    \ The ENR will then collect replies to both A and\n   AAAA queries and, depending\
    \ on results, either return an A reply\n   unmodified or synthesize a new A reply.\
    \  If no reply for the A query\n   is received after ENR-implementation-specific\
    \ timeout, after\n   reception of positive AAAA response, the ENR MAY choose to\
    \ proceed as\n   if there were only a AAAA record available for the destination.\n\
    \   The network-layer implementation alternative will only be able to\n   catch\
    \ applications' name resolution requests that result in actual\n   DNS queries;\
    \ hence, it is more limited when compared to the socket\n   API-layer implementation\
    \ alternative.  Hence, the socket API-layer\n   alternative is RECOMMENDED.\n\
    \   In either implementation alternative, if a DNS A record reply\n   contains\
    \ non-excluded real IPv4 addresses, the ENR MUST NOT\n   synthesize IPv4 addresses.\n\
    \   The ENR asks the address mapper to assign a synthetic IPv4 address\n   corresponding\
    \ to each received IPv6 address if the A record query\n   resulted in a negative\
    \ response, all received real IPv4 addresses\n   were excluded, or the A query\
    \ timed out.  The timeout value is\n   implementation specific and may be short\
    \ in order to provide a good\n   user experience.\n   In the case of the API-layer\
    \ implementation alternative, the ENR will\n   simply make the API (e.g., gethostbyname)\
    \ return the synthetic IPv4\n   address.  In the case of the network-layer implementation\n\
    \   alternative, the ENR synthesizes an A record for the assigned\n   synthetic\
    \ IPv4 address and delivers it up the stack.  If the response\n   contains a CNAME\
    \ or a DNAME record, then the CNAME or DNAME chain is\n   followed until the first\
    \ terminating A or AAAA record is reached.\n   Application    | Network      \
    \         | ENR behavior\n     query        | response              |\n   ---------------+-----------------------+----------------------------\n\
    \ IPv4 address(es) | IPv4 address(es)      | return real IPv4 address(es)\n IPv4\
    \ address(es) | IPv6 address(es)      | synthesize IPv4 address(es)\n IPv4 address(es)\
    \ | IPv4/IPv6 address(es) | return real IPv4 address(es)\n                   \
    \ Figure 3: ENR Behavior Illustration\n"
- title: 2.3.1.  Special Exclusion Sets for A and AAAA Records
  contents:
  - "2.3.1.  Special Exclusion Sets for A and AAAA Records\n   An ENR implementation\
    \ SHOULD, by default, exclude certain real IPv4\n   and IPv6 addresses seen on\
    \ received A and AAAA records.  The\n   addresses to be excluded by default MAY\
    \ include addresses such as\n   those that should not appear in the DNS or on\
    \ the wire (see Section\n   5.1.4 of [RFC6147] and [RFC5735]).  Additional addresses\
    \ MAY be\n   excluded based on possibly configurable local policies.\n"
- title: 2.3.2.  DNSSEC Support
  contents:
  - "2.3.2.  DNSSEC Support\n   When the ENR is implemented at the network layer,\
    \ the A record\n   synthesis can cause similar issues as are described in [RFC6147]\n\
    \   section 3.  While running BIH, the main resolver of the host SHOULD\n   NOT\
    \ perform validation of A records, as synthetic A records created\n   by ENR would\
    \ fail in validation.  While not running BIH, a host's\n   resolver can use DNS\
    \ Security (DNSSEC) in the same way that any other\n   resolver can.  The ENR\
    \ MAY support DNSSEC, in which case the (stub)\n   resolver on a host can be configured\
    \ to trust validations done by the\n   ENR located at the network layer.  In some\
    \ cases, the host's\n   validating stub resolver can implement the ENR by itself.\n\
    \   When the ENR is implemented at the socket API level, there are no\n   issues\
    \ with DNSSEC use, as the ENR itself uses socket APIs for DNS\n   resolution.\
    \  This approach is RECOMMENDED.\n"
- title: 2.3.3.  Reverse DNS Lookup
  contents:
  - "2.3.3.  Reverse DNS Lookup\n   When an application requests a reverse lookup\
    \ (PTR query) for an IPv4\n   address, the ENR MUST check whether the queried\
    \ IPv4 address can be\n   found in the address mapper's mapping table and if it\
    \ is a synthetic\n   IPv4 address.  If an entry is found and the queried IPv4\
    \ address is\n   synthetic, the ENR MUST initiate a corresponding reverse lookup\
    \ for\n   the real IPv6 address.  In the case where the application requested\
    \ a\n   reverse lookup for an address not part of the synthetic IPv4 address\n\
    \   pool, e.g., a global address, the request MUST be passed on\n   unmodified.\n\
    \   For example, when an application requests a reverse lookup for a\n   synthetic\
    \ IPv4 address, the ENR needs to intercept that query.  The\n   ENR asks the address\
    \ mapper for the real IPv6 address that\n   corresponds to the synthetic IPv4\
    \ address.  The ENR shall perform a\n   reverse lookup procedure for the destination's\
    \ IPv6 address and\n   return the name received as a response to the application\
    \ that\n   initiated the IPv4 query.\n"
- title: 2.3.4.  DNS Caches and Synthetic IPv4 Addresses
  contents:
  - "2.3.4.  DNS Caches and Synthetic IPv4 Addresses\n   When BIH shuts down or address\
    \ mapping table entries are cleared for\n   any reason, DNS cache entries for\
    \ synthetic IPv4 addresses MUST be\n   flushed.  There may be a DNS cache in the\
    \ network-layer ENR itself\n   and at the host's stub resolver.\n"
- title: 2.4.  Address Mapper
  contents:
  - "2.4.  Address Mapper\n   The address mapper maintains an IPv4 address pool that\
    \ can be used\n   for IPv4 address synthesis.  The pool consists of the IPv4 addresses\n\
    \   of [RFC1918] as per Section 4.4.  Also, the address mapper maintains\n   a\
    \ table consisting of pairs of synthetic IPv4 addresses and\n   destinations'\
    \ real IPv6 addresses.\n   When the ENR, translator, or the function mapper requests\
    \ the address\n   mapper to assign a synthetic IPv4 address corresponding to an\
    \ IPv6\n   address, the address mapper selects and returns an IPv4 address out\n\
    \   of the local pool and registers a new entry into the table.  The\n   registration\
    \ occurs in the following three cases:\n   1.  When the ENR gets only IPv6 addresses\
    \ for the target host name\n       and there is no existing mapping entry for\
    \ the IPv6 addresses.\n       One or more synthetic IPv4 addresses will be returned\
    \ to the\n       application and mappings for synthetic IPv4 addresses to real\n\
    \       IPv6 addresses are created.\n   2.  When the ENR gets both real IPv4 and\
    \ IPv6 addresses, but the real\n       IPv4 addresses contain only excluded IPv4\
    \ addresses\n       (e.g., 127.0.0.1).  The behavior will follow case (1).\n \
    \  3.  When the function mapper is triggered by a received IPv6 packet\n     \
    \  and there is no existing mapping entry for the IPv6 source\n       address\
    \ (for example, the client sent a UDP request to an anycast\n       address, but\
    \ a response was received from a unicast address).\n   Other possible combinations\
    \ are outside of BIH.\n"
- title: 3.  Behavior and Network Examples
  contents:
  - "3.  Behavior and Network Examples\n   Figure 4 illustrates a very basic network\
    \ scenario.  An IPv4-only\n   application is running on a host attached to the\
    \ IPv6-only Internet\n   and is talking to an IPv6-only server.  Communication\
    \ is made\n   possible by Bump-in-the-Host.\n     +----+                     \
    \              +-------------+\n     | H1 |----------- IPv6 Internet --------\
    \ | IPv6 server |\n     +----+                                   +-------------+\n\
    \     v4 only\n     application\n                       Figure 4: Network Scenario\
    \ #1\n   Figure 5 illustrates a possible network scenario where an IPv4-only\n\
    \   application is running on a host attached to a dual-stack network,\n   but\
    \ the destination server is running on a private site that is\n   numbered with\
    \ public IPv6 addresses and not globally reachable IPv4\n   addresses, such as\
    \ the addresses of [RFC1918], without port\n   forwarding set up on the NAT44.\
    \  The only means to contact the server\n   is to use IPv6.\n     +----------------------+\
    \  +------------------------------+\n     | Dual-Stack Internet  |  | IPv4 Private\
    \ site (Net 10)   |\n     |                      |  | IPv6 routed site       \
    \      |\n     |                   +---------+             +----------+ |\n  \
    \   |                 +-|  NAT44  |-------------+          | |\n     |  +----+\
    \         | +---------+             |          | |\n     |  | H1 |---------+ \
    \   |  |                 |  Server  | |\n     |  +----+         | +-----------+\
    \           |          | |\n     | v4-only         +-|IPv6 Router|-----------+\
    \          | |\n     | application       +-----------+           +----------+\
    \ |\n     |                      |  |                  Dual Stack  |\n     | \
    \                     |  |                    10.1.1.1  |\n     |            \
    \          |  |                 2001:DB8::1  |\n     +----------------------+\
    \  +------------------------------+\n                       Figure 5: Network\
    \ Scenario #2\n   Illustrations of host behavior in both implementation alternatives\n\
    \   are given here.  Figure 6 illustrates a setup where BIH (including\n   the\
    \ ENR) is implemented at the socket API layer, and Figure 7\n   illustrates a\
    \ setup where BIH (including the ENR) is implemented at\n   the network layer.\n"
- title: '"dual stack"                                                "host6"'
  contents:
  - '"dual stack"                                                "host6"

    '
- title: IPv4    Socket |     [ API Translator ]    | TCP(UDP)/IP          Name
  contents:
  - 'IPv4    Socket |     [ API Translator ]    | TCP(UDP)/IP          Name

    '
- title: appli-  API    | ENR      Address  Function| (v6/v4)             Server
  contents:
  - 'appli-  API    | ENR      Address  Function| (v6/v4)             Server

    '
- title: cation         |          Mapper   Mapper  |
  contents:
  - "cation         |          Mapper   Mapper  |\n |        |        |        | \
    \       |         |              |       |\n"
- title: <<Resolve IPv4 addresses for "host6".>>        |              |       |
  contents:
  - "<<Resolve IPv4 addresses for \"host6\".>>        |              |       |\n |\
    \        |        |        |        |         |              |       |\n |------->|------->|\
    \  Query IPv4 addresses for host6.         |       |\n |        |        |   \
    \     |        |         |              |       |\n |        |        |------------------------------------------------->|\n\
    \ |        |        |  Query 'A' and 'AAAA' records for host6          |\n | \
    \       |        |        |        |         |              |       |\n |    \
    \    |        |<-------------------------------------------------|\n |       \
    \ |        |  Reply with the 'AAAA' record.           |       |\n |        | \
    \       |        |        |         |              |\n |        |        |<<The\
    \ 'AAAA' record is resolved.>>        |\n |        |        |        |       \
    \ |         |              |\n |        |        |+++++++>|  Request synthetic\
    \ IPv4 address |\n |        |        |        |  corresponding to the IPv6 address.\n\
    \ |        |        |        |        |         |              |\n |        |\
    \        |        |<<Assign one synthetic IPv4 address.>>\n |        |       \
    \ |        |        |         |              |\n |        |        |<+++++++|\
    \  Reply with the synthetic IPv4 address.\n |        |        |        |     \
    \   |         |              |\n |<-------|<-------| Reply with the IPv4 address\
    \              |\n |        |        |        |        |         |           \
    \   |\n |        |        |        |        |         |              |\n"
- title: <<Call IPv4 Socket API function >>   |         |              |
  contents:
  - "<<Call IPv4 Socket API function >>   |         |              |\n |        |\
    \        |        |        |         |              |\n |=======>|=========================>|An\
    \ IPv4 Socket API action\n |        |        |        |        |         |   \
    \           |\n |        |        |        |<+++++++|  Request IPv6 addresses|\n\
    \ |        |        |        |        |  corresponding to the  |\n |        |\
    \        |        |        |  synthetic IPv4 addresses.\n |        |        |\
    \        |        |         |              |\n |        |        |        |+++++++>|\
    \ Reply with the IPv6 addresses.\n |        |        |        |        |     \
    \    |              |\n |        |        |        |        |<<Translate IPv4\
    \ into IPv6.>>\n |        |        |        |        |         |             \
    \ |\n |  An IPv6 Socket API action        |=======================>|\n |     \
    \   |        |        |        |         |              |\n |        |       \
    \ |        |        |<<IPv6 data received    |\n |        |        |        |\
    \        |  from network.>>       |\n |        |        |        |        |  \
    \       |              |\n |  An IPv6 Socket API action        |<=======================|\n\
    \ |        |        |        |        |         |              |\n |        |\
    \        |        |        |<<Translate IPv6 into IPv4.>>\n |        |       \
    \ |        |        |         |              |\n |        |        |        |<+++++++|\
    \  Request synthetic IPv4 addresses\n |        |        |        |        |  corresponding\
    \ to the  |\n |        |        |        |        |  IPv6 addresses.       |\n\
    \ |        |        |        |        |         |              |\n |        |\
    \        |        |+++++++>| Reply with the IPv4 addresses.\n |        |     \
    \   |        |        |         |              |\n |<=======|<=========================|\
    \  An IPv4 Socket API action\n |        |        |        |        |         |\
    \              |\n                 Figure 6: Example of BIH as API Addition\n\
    \     \"dual stack\"                                         \"host6\"\n  IPv4\
    \ stub  TCP/    ENR     address  translator  IPv6\n  app  res.  IPv4         \
    \   mapper\n    |   |    |       |         |       |           |         |\n \
    \ <<Resolve an IPv4 address for \"host6\".>>         |         |\n    |-->|  \
    \  |       |         |       |           |         |\n    |   |----------->| \
    \ Query 'A' records for \"host6\".       |  Name\n    |   |    |       |     \
    \    |       |           |         |  Server\n    |   |    |       |------------------------------------------->|\n\
    \    |   |    |       |  Query 'A' and 'AAAA'  records for \"host6\"\n    |  \
    \ |    |       |         |       |           |         |    |\n    |   |    |\
    \       |<-------------------------------------------|\n    |   |    |       |\
    \  Reply only with 'AAAA' record.       |\n    |   |    |       |         |  \
    \     |           |         |\n    |   |    |       |<<Only 'AAAA' record is resolved.>>\
    \    |\n    |   |    |       |         |       |           |         |\n    |\
    \   |    |       |-------->|  Request synthetic IPv4 address\n    |   |    | \
    \      |         |  corresponding to each IPv6 address.\n    |   |    |      \
    \ |         |       |           |         |\n    |   |    |       |         |<<Assign\
    \ synthetic IPv4 addresses.>>\n    |   |    |       |         |       |      \
    \     |         |\n    |   |    |       |<--------|  Reply with the synthetic\
    \ IPv4 address.\n    |   |    |       |         |       |           |        \
    \ |\n    |   |    |       |<<Create 'A' record for the IPv4 address.>>\n    |\
    \   |    |       |         |       |           |         |\n    |   |<-----------|\
    \  Reply with the 'A' record. |         |\n    |   |    |       |         |  \
    \     |           |         |\n    |<--|<<Reply with the IPv4 address |      \
    \     |         |\n    |   |    |       |         |       |           |      \
    \   |\n    <<Send an IPv4 packet to \"host6\".>>|           |         |\n    |\
    \   |    |       |         |       |           |         |\n    |=======>|========================>|\
    \  An IPv4 packet.    |\n    |   |    |       |         |       |           |\
    \         |\n    |   |    |       |         |<++++++|  Request IPv6 addresses\n\
    \    |   |    |       |         |       |  corresponding to the\n    |   |   \
    \ |       |         |       |  synthetic IPv4 addresses.\n    |   |    |     \
    \  |         |       |           |         |\n    |   |    |       |         |++++++>|\
    \  Reply with the IPv6|\n    |   |    |       |         |       |  addresses.\
    \         |\n    |   |    |       |         |       |           |         |\n\
    \    |   |    |       |         |       |<<Translate IPv4 into IPv6.>>\n    |\
    \   |    |       |         |       |           |         |\n    |   |    |   \
    \    |An IPv6 packet.  |==========>|========>|\n    |   |    |       |       \
    \  |       |           |         |\n    |   |    |       |         |   <<Reply\
    \ with an IPv6 packet.>>\n    |   |    |       |         |       |           |\
    \         |\n    |   |    |       |An IPv6 packet.  |<==========|<========|\n\
    \    |   |    |       |         |       |           |         |\n    |   |   \
    \ |       |         |       |<<Translate IPv6 into IPv4.>>\n    |   |    |   \
    \    |         |       |           |         |\n    |   |    |       |       \
    \  |<++++++|  Request synthetic IPv4\n    |   |    |       |         |       |\
    \  addresses corresponding\n    |   |    |       |         |       |  to the IPv6\
    \ addresses.\n    |   |    |       |         |       |           |         |\n\
    \    |   |    |       |         |++++++>|  Reply with the IPv4 addresses.\n  \
    \  |   |    |       |         |       |           |         |\n    |<=======|=========================|\
    \  An IPv4 packet.    |\n    |   |    |       |         |       |           |\
    \         |\n               Figure 7: Example of BIH at the Network Layer\n"
- title: 4.  Considerations
  contents:
  - '4.  Considerations

    '
- title: 4.1.  Socket API Conversion
  contents:
  - "4.1.  Socket API Conversion\n   IPv4 socket API functions are translated into\
    \ IPv6 socket API\n   functions that are semantically as identical as possible,\
    \ and vice\n   versa.  See Appendix A for the API list intercepted by BIH.  However,\n\
    \   some IPv4 socket API functions are not fully compatible with IPv6\n   since\
    \ IPv4 supports features that are not present in IPv6, such as\n   SO_BROADCAST.\n"
- title: 4.2.  Socket Bindings
  contents:
  - "4.2.  Socket Bindings\n   BIH SHOULD select a source address for a socket from\
    \ the recommended\n   source address pool if a socket used for communications\
    \ has not been\n   explicitly bound to any IPv4 address.\n   The binding of an\
    \ explicitly bound socket MUST NOT be changed by the\n   BIH.\n"
- title: 4.3.  ICMP Message Handling
  contents:
  - "4.3.  ICMP Message Handling\n   ICMPv4 and ICMPv6 messages MUST be translated\
    \ as defined by SIIT\n   [RFC6145].  In the network-layer implementation alternative,\
    \ the\n   protocol translator MUST translate ICMPv6 packets to ICMPv4 and vice\n\
    \   versa, and in the socket API implementation alternative, the socket\n   API\
    \ MUST handle conversions in similar fashion.\n"
- title: 4.4.  IPv4 Address Pool and Mapping Table
  contents:
  - "4.4.  IPv4 Address Pool and Mapping Table\n   The address pool consists of the\
    \ private IPv4 addresses of [RFC1918].\n   This pool can be implemented at different\
    \ granularities in the node,\n   e.g., a single pool per node, or at some finer\
    \ granularity such as\n   per-user or per-process.  In the case of a large number\
    \ of IPv4\n   applications communicating with a large number of IPv6 servers,\
    \ the\n   available address space may be exhausted if the granularity is not\n\
    \   fine enough.  This should be a rare event and chances will decrease\n   as\
    \ IPv6 support increases.  The applications may use IPv4 addresses\n   they learn\
    \ for a much longer period than DNS time to live indicates.\n   Therefore, the\
    \ mapping table entries should be kept active for a long\n   period of time. \
    \ For example, a web browser may initiate one DNS\n   query and then create multiple\
    \ TCP sessions over time to the address\n   it learns.  When address mapping table\
    \ clean-up is required, the BIH\n   may utilize techniques used by network address\
    \ translators, such as\n   described in [RFC2663], [RFC5382], and [RFC5508].\n\
    \   The address space of RFC 1918 was chosen because legacy applications\n   generally\
    \ understand it as a private address space.  A new dedicated\n   address space\
    \ would run the risk of not being understood by\n   applications as private. 127/8\
    \ and 169.254/16 are rejected due to\n   possible assumptions applications may\
    \ make when seeing them.\n   The addresses of RFC 1918 used by the BIH have a\
    \ risk of conflicting\n   with addresses used in the host's possible IPv4 interfaces\
    \ and\n   corresponding local networks.  The conflicts can be mitigated, but\n\
    \   not fully avoided, by using less commonly used portions of the\n   address\
    \ space of RFC 1918.  Addresses from 172.16/12 are thought to\n   be less likely\
    \ to be in conflict than addresses from 10/8 or\n   192.168/16 spaces.  A source\
    \ address can usually be selected in a\n   non-conflicting manner, but a small\
    \ possibility exists for\n   synthesized destination addresses being in conflict\
    \ with real\n   addresses used in attached IPv4 networks.\n   The RECOMMENDED\
    \ IPv4 addresses are following:\n      Primary source addresses: 172.21.112.0/20.\n\
    \         Source addresses have to be allocated because applications use\n   \
    \      getsockname() calls and, in the network-layer mode, an IP\n         address\
    \ of the IPv4 interface has to be shown (e.g., by\n         'ifconfig').  More\
    \ than one address is allocated to allow\n         implementation flexibility,\
    \ e.g., for cases where a host has\n         multiple IPv6 interfaces.  The source\
    \ addresses are from\n         different subnets than destination addresses to\
    \ ensure\n         applications would not make on-link assumptions and would\n\
    \         instead enable NAT traversal functions.\n      Secondary source addresses:\
    \ 10.170.224.0/20.\n         These addresses are recommended if a host has a conflict\
    \ with\n         primary source addresses.\n      Primary destination addresses:\
    \ 10.170.160.0/20.\n         The address mapper will select destination addresses\
    \ primarily\n         out of this pool.\n      Secondary destination addresses:\
    \ 172.21.80.0/20.\n         The address mapper will select destination addresses\
    \ out of\n         this pool if the node has a dual-stack connection conflicting\n\
    \         with primary destination addresses.\n"
- title: 4.5.  Multi-Interface
  contents:
  - "4.5.  Multi-Interface\n   In the case of dual-stack destinations, BIH MUST NOT\
    \ do protocol\n   translation from IPv4 to IPv6 when the host has any IPv4 interfaces,\n\
    \   native or tunneled, available for use.\n   It is possible that an IPv4 interface\
    \ is activated during BIH\n   operation, for example, if a node moves to a coverage\
    \ area of an\n   IPv4-enabled network.  In such an event, BIH MUST stop initiating\n\
    \   protocol translation sessions for new connections, and BIH MAY\n   disconnect\
    \ active sessions.  The choice of disconnection is left for\n   implementations,\
    \ and it may depend on whether IPv4 address conflict\n   occurs between addresses\
    \ used by BIH and addresses used by the new\n   IPv4 interface.\n"
- title: 4.6.  Multicast
  contents:
  - "4.6.  Multicast\n   Protocol translation for multicast is not supported.\n"
- title: 5.  Application-Level Gateway Requirements Considerations
  contents:
  - "5.  Application-Level Gateway Requirements Considerations\n   No Application-Level\
    \ Gateway (ALG) functionality is specified herein\n   as ALG design is generally\
    \ not encouraged for host-based translation\n   and as BIH is intended for applications\
    \ that do not include IP\n   addresses in protocol payloads.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security considerations of BIH follows closely,\
    \ but not\n   completely, those of NAT64 [RFC6146] and DNS64 [RFC6147].  The\n\
    \   following sections are copied from RFC 6146 and RFC 6147 and modified\n  \
    \ for BIH.\n"
- title: 6.1.  Implications on End-to-End Security
  contents:
  - "6.1.  Implications on End-to-End Security\n   Any protocols that protect IP header\
    \ information are essentially\n   incompatible with BIH.  This implies that end-to-end\
    \ IPsec\n   verification will fail when the Authentication Header (AH) is used\n\
    \   (both transport and tunnel mode) and when ESP is used in transport\n   mode.\
    \  This is inherent in any network-layer translation mechanism.\n   End-to-end\
    \ IPsec protection can be restored, using UDP encapsulation\n   as described in\
    \ [RFC3948].  The actual extensions to support IPsec\n   are out of the scope\
    \ of this document.\n"
- title: 6.2.  Filtering
  contents:
  - "6.2.  Filtering\n   BIH creates binding state using packets flowing from the\
    \ IPv4 side to\n   the IPv6 side.  In accordance with the procedures defined in\
    \ this\n   document, following the guidelines defined in [RFC4787], a BIH\n  \
    \ implementation MUST offer \"Endpoint-Independent Mapping\".\n   Implementations\
    \ MAY also provide support for \"Address-Dependent\n   Mapping\" following the\
    \ guidelines defined in [RFC4787].\n   The security properties, however, are determined\
    \ by which packets the\n   BIH allows in and which it does not.  The security\
    \ properties are\n   determined by the filtering behavior and by the possible\
    \ filtering\n   configuration in the filtering portions of the BIH, not by the\n\
    \   address mapping behavior.\n"
- title: 6.3.  Attacks on BIH
  contents:
  - "6.3.  Attacks on BIH\n   The BIH implementation itself is a potential victim\
    \ of different\n   types of attacks.  In particular, the BIH can be a victim of\
    \ Denial-\n   of-Service (DoS) attacks.  The BIH implementation has a limited\n\
    \   number of resources that can be consumed by attackers creating a DoS\n   attack.\
    \  The BIH has a limited number of IPv4 addresses that it uses\n   to create the\
    \ bindings.  Even though the BIH performs address\n   translation, it is possible\
    \ for an attacker to consume the synthetic\n   IPv4 address pool by triggering\
    \ a host to issue DNS queries for names\n   that cause ENR to synthesize A records.\
    \  DoS attacks can also affect\n   other limited resources available in the host\
    \ running BIH such as\n   memory or link capacity.  For instance, it is possible\
    \ for an\n   attacker to launch a DoS attack on the memory of the BIH running\n\
    \   device by sending fragments that the BIH will store for a given\n   period.\
    \  If the number of fragments is large enough, the memory of\n   the host could\
    \ be exhausted.  BIH implementations MUST implement\n   proper protection against\
    \ such attacks, for instance, allocating a\n   limited amount of memory for fragmented\
    \ packet storage.\n   Another consideration related to BIH resource depletion\
    \ is the\n   preservation of binding state.  Attackers may try to keep a binding\n\
    \   state alive forever by sending periodic packets that refresh the\n   state.\
    \  In order to allow the BIH to defend against such attacks, the\n   BIH implementation\
    \ MAY choose not to extend the session entry\n   lifetime for a specific entry\
    \ upon the reception of packets for that\n   entry through the external interface.\
    \  However, such an action would\n   not allow one-way communication sessions\
    \ to stay alive.\n"
- title: 6.4.  DNS Considerations
  contents:
  - "6.4.  DNS Considerations\n   BIH operates in combination with the DNS, and it\
    \ is therefore subject\n   to whatever security considerations are appropriate\
    \ to the DNS mode\n   in which the BIH is operating (i.e., recursive or stub-resolver\n\
    \   mode).\n   BIH has the potential to interfere with the functioning of DNSSEC,\n\
    \   because BIH modifies DNS answers, and DNSSEC is designed to detect\n   such\
    \ modifications and to treat modified answers as bogus.\n"
- title: 7.  Changes since RFC 2767 and RFC 3338
  contents:
  - "7.  Changes since RFC 2767 and RFC 3338\n   This document combines and obsoletes\
    \ both [RFC2767] and [RFC3338].\n   The changes in this document mainly reflect\
    \ the following:\n   1. Addresses of RFC 1918 used for synthesis\n      RFC 3338\
    \ used unassigned IPv4 addresses (e.g., 0.0.0.1 -\n      0.0.0.255) for synthetic\
    \ IPv4 addresses.  Those addresses should\n      not have been used and that may\
    \ cause problems with applications.\n      It is preferable to use addresses defined\
    \ in RFC 1918 instead, as\n      described in Section 4.4.\n   2. Support for\
    \ reverse (PTR) DNS queries\n      Neither RFC 2767 nor RFC 3338 included support\
    \ for reverse (PTR)\n      DNS queries.  This document adds the support in Section\
    \ 2.3.3.\n   3. DNSSEC support\n      RFC 2767 did not include DNSSEC considerations,\
    \ which are now\n      included in Section 2.3.2\n   4. Architectural recommendation\n\
    \      This document recommends the socket API-layer implementation\n      option\
    \ over network layer translation, i.e., it recommends the\n      approach introduced\
    \ in RFC 2767 over the approach of RFC 3338.\n   5. Standards-Track document\n\
    \      RFC 2767 is classified as an Informational RFC and RFC 3338 as an\n   \
    \   Experimental RFC.  It was discussed and decided in the IETF that\n      this\
    \ technology should be on the Standards Track.\n   6. Set of other extensions\
    \ and improvements\n      A set of lesser extensions, improvements, and clarifications\
    \ have\n      been introduced.  These include but are not limited to IPv4 and\n\
    \      IPv6 address exclusion sets at Section 2.3.1, host's DNS cache\n      considerations,\
    \ ENR behavior updates, updated security\n      considerations, example updates,\
    \ and deployment scenario updates.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors are grateful for discussion from Gang Chen,\
    \ Dapeng Liu,\n   Bo Zhou, Hong Liu, Tao Sun, Zhen Cao, and Feng Cao et al. in\
    \ the\n   development of this document.\n   The efforts of Mohamed Boucadair,\
    \ Dean Cheng, Lorenzo Colitti, Paco\n   Cortes, Ralph Droms, Stephen Farrell,\
    \ Fernando Gont, Marnix Goossens,\n   Wassim Haddad, Ala Hamarsheh, Dave Harrington,\
    \ Ed Jankiewizh, Suresh\n   Krishnan, Julien Laganier, Yiu L. Lee, Jan M. Melen,\
    \ Qibo Niu,\n   Pierrick Seite, Christian Vogt, Magnus Westerlund, Dan Wing, and\n\
    \   James Woodyatt in reviewing this document are gratefully\n   acknowledged.\n\
    \   Special acknowledgments go to Dave Thaler for his extensive review\n   and\
    \ support.\n   The authors of RFC 2767 acknowledged WIDE Project, Kazuhiko YAMAMOTO,\n\
    \   Jun MURAI, Munechika SUMIKAWA, Ken WATANABE, and Takahisa MIYAMOTO.\n   The\
    \ authors of RFC 3338 acknowledged implementation contributions by\n   Wanjik\
    \ Lee (wjlee@arang.miryang.ac.kr) and i2soft Corporation\n   (www.i2soft.net).\n\
    \   The authors of \"Bump-in-the-Wire IPv4/IPv6 Translator\" (a draft\n   document\
    \ submitted to the v6ops WG in October 2006), P. Moster, L.\n   Chin, and D. Green,\
    \ are acknowledged.  Some ideas and clarifications\n   from BIW have been adapted\
    \ to this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg,\
    \ D., Groot, G., and\n              E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n              (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC4213]  Nordmark, E. and R. Gilligan, \"Basic Transition Mechanisms\n\
    \              for IPv6 Hosts and Routers\", RFC 4213, October 2005.\n   [RFC4787]\
    \  Audet, F. and C. Jennings, \"Network Address Translation\n              (NAT)\
    \ Behavioral Requirements for Unicast UDP\", BCP 127,\n              RFC 4787,\
    \ January 2007.\n   [RFC6145]  Li, X., Bao, C., and F. Baker, \"IP/ICMP Translation\n\
    \              Algorithm\", RFC 6145, April 2011.\n   [RFC6146]  Bagnulo, M.,\
    \ Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64: Network Address\
    \ and Protocol Translation from IPv6\n              Clients to IPv4 Servers\"\
    , RFC 6146, April 2011.\n   [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P.,\
    \ and I. van\n              Beijnum, \"DNS64: DNS Extensions for Network Address\n\
    \              Translation from IPv6 Clients to IPv4 Servers\", RFC 6147,\n  \
    \            April 2011.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC2663]  Srisuresh, P. and M. Holdrege, \"\
    IP Network Address\n              Translator (NAT) Terminology and Considerations\"\
    ,\n              RFC 2663, August 1999.\n   [RFC2767]  Tsuchiya, K., HIGUCHI,\
    \ H., and Y. Atarashi, \"Dual Stack\n              Hosts using the \"Bump-In-the-Stack\"\
    \ Technique (BIS)\",\n              RFC 2767, February 2000.\n   [RFC3338]  Lee,\
    \ S., Shin, M-K., Kim, Y-J., Nordmark, E., and A.\n              Durand, \"Dual\
    \ Stack Hosts Using \"Bump-in-the-API\" (BIA)\",\n              RFC 3338, October\
    \ 2002.\n   [RFC3493]  Gilligan, R., Thomson, S., Bound, J., McCann, J., and W.\n\
    \              Stevens, \"Basic Socket Interface Extensions for IPv6\",\n    \
    \          RFC 3493, February 2003.\n   [RFC3948]  Huttunen, A., Swander, B.,\
    \ Volpe, V., DiBurro, L., and M.\n              Stenberg, \"UDP Encapsulation\
    \ of IPsec ESP Packets\",\n              RFC 3948, January 2005.\n   [RFC5382]\
    \  Guha, S., Biswas, K., Ford, B., Sivakumar, S., and P.\n              Srisuresh,\
    \ \"NAT Behavioral Requirements for TCP\", BCP 142,\n              RFC 5382, October\
    \ 2008.\n   [RFC5508]  Srisuresh, P., Ford, B., Sivakumar, S., and S. Guha, \"\
    NAT\n              Behavioral Requirements for ICMP\", BCP 148, RFC 5508,\n  \
    \            April 2009.\n   [RFC5735]  Cotton, M. and L. Vegoda, \"Special Use\
    \ IPv4 Addresses\",\n              BCP 153, RFC 5735, January 2010.\n   [RFC6180]\
    \  Arkko, J. and F. Baker, \"Guidelines for Using IPv6\n              Transition\
    \ Mechanisms during IPv6 Deployment\", RFC 6180,\n              May 2011.\n"
- title: Appendix A.  API List Intercepted by BIH
  contents:
  - "Appendix A.  API List Intercepted by BIH\n   The following informational list\
    \ includes some of the API functions\n   that would be appropriate to intercept\
    \ by BIH module when implemented\n   at the socket API layer.  Please note that\
    \ this list is not fully\n   exhaustive, as the function names and services that\
    \ are available on\n   different APIs vary significantly.\n   The functions that\
    \ the application uses to pass addresses into the\n   system are as follows:\n\
    \      bind()\n      connect()\n      sendmsg()\n      sendto()\n      gethostbyaddr()\n\
    \      getnameinfo()\n   The functions that return an address from the system\
    \ to an\n   application are as follows:\n      accept()\n      recvfrom()\n  \
    \    recvmsg()\n      getpeername()\n      getsockname()\n      gethostbyname()\n\
    \      getaddrinfo()\n   The functions that are related to socket options are\
    \ as follows:\n      getsocketopt()\n      setsocketopt()\n   As well, raw sockets\
    \ for IPv4 and IPv6 may be intercepted.\n   Most of the socket functions require\
    \ a pointer to the socket address\n   structure as an argument.  Each IPv4 argument\
    \ is mapped into\n   corresponding an IPv6 argument, and vice versa.\n   According\
    \ to [RFC3493], the following new IPv6 basic APIs and\n   structures are required.\n\
    \         IPv4                     new IPv6\n         ------------------------------------------------\n\
    \         AF_INET                  AF_INET6\n         sockaddr_in            \
    \  sockaddr_in6\n         gethostbyname()          getaddrinfo()\n         gethostbyaddr()\
    \          getnameinfo()\n         inet_ntoa()/inet_addr()  inet_pton()/inet_ntop()\n\
    \         INADDR_ANY               in6addr_any\n                             \
    \    Figure 8\n   BIH may intercept inet_ntoa() and inet_addr() and use the address\n\
    \   mapper for those.  Doing that enables BIH to support literal IP\n   addresses.\
    \  However, IPv4 address literals can only be used after a\n   mapping entry between\
    \ the IPv4 address and corresponding IPv6 address\n   has been created.\n   The\
    \ gethostbyname() and getaddrinfo() calls return a list of\n   addresses.  When\
    \ the name resolver function invokes getaddrinfo(),\n   and getaddrinfo() returns\
    \ multiple IP addresses, whether IPv4 or\n   IPv6, they should all be represented\
    \ in the addresses returned by\n   gethostbyname().  Thus, if getaddrinfo() returns\
    \ multiple IPv6\n   addresses, this implies that multiple address mappings will\
    \ be\n   created: one for each IPv6 address.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bill Huang\n   China Mobile\n   No.32 Xuanwumen West Street\n\
    \   Xicheng District\n   Beijing  100053\n   China\n   EMail: bill.huang@chinamobile.com\n\
    \   Hui Deng\n   China Mobile\n   No.32 Xuanwumen West Street\n   Xicheng District\n\
    \   Beijing  100053\n   China\n   EMail: denghui@chinamobile.com\n   Teemu Savolainen\n\
    \   Nokia\n   Hermiankatu 12 D\n   FI-33720 TAMPERE\n   Finland\n   EMail: teemu.savolainen@nokia.com\n"
