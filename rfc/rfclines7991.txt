The "xml2rfc" Version 3 Vocabulary Abstract
This document defines the "xml2rfc" version 3 vocabulary: an XML based language used for writing RFCs and Internet Drafts.
It is heavily derived from the version 2 vocabulary that is also under discussion.
This document obsoletes the v2 grammar described in RFC 7749.
This document describes version 3 ("v3") of the "xml2rfc" vocabulary: an XML based language ("Extensible Markup Language" [XML]) used for writing RFCs
[RFC7322] and Internet Drafts [IDGUIDE].
This document obsoletes the version 2 vocabulary ("v2")
[RFC7749], which contains the extended language definition.
That document in turn obsoletes the original version ("v1") [RFC2629].
This document directly copies the material from [RFC7749] where possible.
The v3 format will be used as part of the new RFC Series format described in [RFC6949].
The new format will be handled by one or more new tools for preparing the XML and converting it to other representations.
Features of the expected tools are described in Appendix B.
That section defines some terms used throughout this document, such as "prep tool" and "formatter".
Note that the vocabulary contains certain constructs that might not be used when generating the final text; however, they can provide useful data for other uses (such as index generation, populating a keyword database, or syntax checks).
In this document, the term "format" is used when describing types of documents, primarily XML and HTML.
The term "representation" is used when talking about a specific instantiation of a format, such as an XML document or an HTML document that was created by an XML document.
Expected Updates to the Specification Non interoperable changes in later versions of this specification are likely based on experience gained in implementing the new publication toolsets.
Revised documents will be published capturing those changes as the toolsets are completed.
Other implementers must not expect those changes to remain backwards compatible with the details described in this document.
Design Criteria for the Changes in v3
The design criteria of the changes from v2 to v3 are as follows:
The intention is that starting and editing a v3 document will be easier than for a v2 document.
There will be good v2 to v3 conversion tools for when an author wants to change versions.
There are no current plans to make v3 XML the required submission format for drafts or RFCs.
That might happen eventually, but it is likely to be years away.
There is a desire to keep as much of the v2 grammar as makes sense within the above design criteria and not to make gratuitous changes to the v2 grammar.
Another way to say this is "
we would rather encourage backwards compatibility but not be constrained by it."
Still, the goal of starting and editing a v3 document being easier than for a v2 document is more important than backwards compatibility with v2, given the latter two design criteria.
v3 is upwards compatible with v2, meaning that a v2 document is meant to be a valid v3 document as well.
However, some features of v2 are deprecated in v3 in favor of new elements.
Deprecated features are listed in Section 1.3.3 and are described in [RFC7749].
v3 This is a (hopefully) complete list of all the technical changes between [RFC7749] and this document.
New Elements in v3  Add <dl>, <ul>, and <ol> as new ways to make lists.
This is a significant change from v2 in that the child under these elements is <li>, not <t
<li> has a model of either containing one or more <t> elements, or containing the flowing text normally found in <t
These lists are children of <section>s and other lists instead of <t
em>, <tt>, <sub>, and <sup> for character formatting.
Add <aside> for incidental text that will be indented when displayed.
Add <sourcecode> to differentiate from <artwork
>, <td>, and <th> to give table functionality like that in HTML.
Add <boilerplate> to hold the automatically generated boilerplate text.
Add <blockquote> to indicate a quotation as in a paragraph like format.
Add <name> to sections, notes, figures, and texttables to allow character formatting (fixed width font) in their titles and to allow references in the names.
Add <postalLine>, free text that represents one line of the address.
Add <displayreference> to allow display of more mnemonic anchor names for automatically included references.
Add <refcontent> to allow better control of text in a reference.
Add <referencegroup> to allow referencing multi RFC documents such as STDs and BCPs.
Add <relref> to allow referencing specific sections or anchors in references.
Add <link> to point to a resource related to the RFC.
> to allow line breaks (but not blank lines) in the generated output for table cells.
Add <svg> to allow easy inclusion of SVG drawings in <artwork>.
New Attributes for Existing Elements  Add "sortRefs", "symRefs", "tocDepth", and "tocInclude" attributes to <rfc> to cover Processing Instructions (PIs)
that were in v2 that are still needed in the grammar.
Add "prepTime" to indicate the time that the XML went through a preparation step.
Add "version" to indicate the version of xml2rfc vocabulary used in the document.
Add "scripts" to indicate which scripts are needed to render the document.
Add "expiresDate" when an Internet Draft expires.
Add "ascii" attributes to <email>, <organization>, <street>, <city>, <region>, <country>, and <code
Also add "asciiFullname", "asciiInitials", and "asciiSurname" to <author>.
This allows an author to specify their information in their native scripts as the primary entry and still allow the ASCII equivalent values to appear in the processed documents.
Add "anchor" attributes to many block elements to allow them to be linked with <relref> and <xref
Add the "section", "relative", and "sectionFormat" attributes to <xref
Add the "numbered" and "removeInRFC" attributes to <section>.
Add the "removeInRFC" attribute to <note
Add "pn" to <artwork>, <aside>, <blockquote>, <boilerplate>, <dt>, <figure>, <iref>, <li>, <references>, <section>, <sourcecode>, <t>, and <table> to hold automatically generated numbers for items in a section that don't have their own numbering (namely figures and tables).
Add "display" to <cref> to indicate to tools whether or not to display the comment.
Add "keepWithNext" and "keepWithPrevious" to <t> as a hint to tools that do pagination that they should try to keep the paragraph with the next/previous element.
Elements and Attributes Deprecated from v2 Deprecated elements and attributes
are legacy vocabulary from v2 that are supported for input to v3 tools.
They are likely to be removed from those tools in the future.
Deprecated attributes are still listed in Section 2, and deprecated elements are listed in Section 3.
See Appendix B for more information on tools and how they will handle deprecated features.
Deprecate <list> in favor of <dl>, <ul>, and
; replace it with <strong>, <em>, and <tt
> because the major use for it, creating pseudo  paragraph breaks in lists, is now handled properly.
Deprecate <texttable>, <ttcol>, and <c>
; replace them with the new table elements (<table> and the elements that can be contained within it).
> because it is rarely used.
> because it is not useful and has caused surprise for authors in the past.
If the goal is to provide a single URI (Uniform Resource Identifier) for a reference, use the "target" attribute in <reference> instead.
Deprecate <preamble> and <postamble> in favor of simply using <t> before or after the figure.
This also deprecates the "align" attribute in <figure
Deprecate the "title" attribute in <section>, <note>, <figure>, <references>, and <texttable> in favor of the new <name>.
Deprecate the "alt" and "src" attributes in <figure> because they overlap with the attributes in <artwork>.
Deprecate the "xml:space" attribute in <artwork> because there was only one useful value.
Deprecate the "height" and "width" attributes in both <artwork> and <figure> because they are not needed for the new output formats.
Deprecate the "pageno" attribute in <xref> because it was unused in v2.
Deprecate the "none" values for the "format" attribute in <xref
because it makes no sense semantically.
Allow non ASCII characters in the format; the characters that are actually allowed will be determined by the RFC Series Editor.
Allow <artwork> and <sourcecode> to be used on their own in <section
(no longer confine them to a figure).
Give more specifics of handling the "type" attribute in <artwork
<eref>, and <xref> in <cref
Allow the sub elements inside a <reference> to be in any order.
Turn off the autogeneration of anchors in <cref> because there is no use case for them that cannot be achieved in other ways.
Allow more than one <artwork
>, or more than one <sourcecode>, in <figure
In <front>, make <date> optional.
In <date>, add restrictions to the "date" and "year" attributes when used in the <front> for the document's boilerplate text.
In <postal>, allow the sub elements to be in any order.
Also allow the inclusion of the new <postalLine> instead of the older elements.
In <section>, restrict the names of the anchors that can be used on some types of sections.
a child of <front>, and deprecated it as a child of <reference
This also deprecates some of the attributes from <rfc> and moves them into <seriesInfo
> now only contains non block elements, so it no longer contains <figure> elements.
Do not generate the grammar from a DTD, but instead get it directly from the RELAX Next Generation (RNG) grammar [RNG].
The XML vocabulary here is defined in prose, based on the RELAX
NG schema [RNC] contained in Appendix C (specified in RELAX NG Compact Notation (RNC)).
Note that the schema can be used for automated validity checks, but certain constraints are only described in prose (example: the conditionally required presence of the "abbrev" attribute).
The sections below describe all elements and their attributes.
Note that attributes not labeled "mandatory" are optional.
Many elements have an optional "anchor" attribute.
In all cases, the value of the "anchor" attribute needs to be a valid XML "Name" (Section 2.3 of [XML]), additionally constrained to US ASCII characters [USASCII].
Anchors are described in more detail in Appendix B.2.
Tools interpreting the XML described here will collapse horizontal whitespace and line breaks to a single whitespace (except inside <artwork> and <sourcecode>) and will trim leading and trailing whitespace.
Tab characters (U 0009) inside <artwork> and <sourcecode
Some of the elements have attributes that are not described in this section because those attributes are specific to the prep tool.
People writing tools to process this format should read all of the appendices for a complete description of these attributes.
Every element in the v3 vocabulary can have an "xml:lang" attribute, an "xml:base" attribute, or both.
lang attribute specifies the language used in the element.
This is sometimes useful for renderers that display different fonts for ideographic characters used in China and Japan.
The xml:base attribute is sometimes added to an XML file when doing XML to XML conversion where the base file has XInclude attributes (see Appendix B.1).
> Contains the Abstract of the document.
See [RFC7322] for more information on restrictions for the Abstract.
This element appears as a child element of <front> (Section 2.26).
Content model: In any order, but at least one of:  <dl> elements (Section 2.20)  <ol> elements (Section 2.34)  <t> elements (Section 2.53)  <ul> elements (Section 2.63) 2.1.1.
"anchor" Attribute Document wide unique identifier for the Abstract.
Provides address information for the author.
This element appears as a child element of <author> (Section 2.7).
> element (Section 2.37) 2.
One optional <phone> element (Section 2.36) 3.
One optional <facsimile> element (Section 3.2) 4.
One optional <email> element (Section 2.23) 5.
One optional <uri> element (Section 2.64) 2.3.
Provides additional prose augmenting a bibliographic reference.
This text is intended to be shown after the rest of the generated reference text.
This element appears as a child element of <reference> (Section 2.40).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)  <relref> elements (Section 2.44)
<spanx> elements (Section 3.7)  <strong> elements (Section 2.50)
<sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 2.4.
> Provides information about the IETF area to which this document relates (currently not used when generating documents).
The value ought to be either the full name or the abbreviation of one of the IETF areas as listed on <http://www.ietf.org/iesg/area.html>.
A list of full names and abbreviations will be kept by the RFC Series Editor.
This element appears as a child element of <front> (Section 2.26).
Content model: only text content.
This element allows the inclusion of "artwork" in the document.
<artwork> provides full control of horizontal whitespace and line breaks; thus, it is used for a variety of things, such as diagrams ("line art") and protocol unit diagrams.
Tab characters (U 0009) inside of this element are prohibited.
Alternatively, the "src" attribute allows referencing an external graphics file, such as a vector drawing in SVG or a bitmap graphic file, using a URI.
In this case, the textual content acts as a fallback for output representations that do not support graphics; thus, it ought to contain either (1) a "line art" variant of the graphics or (2) prose that describes the included image in sufficient detail.
In [RFC7749], the <artwork> element was also used for source code and formal languages; in v3, this is now done with <sourcecode>.
There are at least five ways to include SVG in artwork in Internet Drafts:  Inline, by including all of the SVG in the content of the element, such as: <artwork type "svg"><svg xmlns "http://www.w3.org/2000/ svg..."
Inline, but using XInclude (see Appendix B.1), such as: <artwork type "svg"><xi:include href ...
As a data: URI, such as: <artwork type "svg" src "data:image/ svg xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3..."
As a local file, such as: <artwork type "svg" src "diagram12.svg">
The use of SVG in Internet Drafts and RFCs is covered in much more detail in [RFC7996].
The above methods for inclusion of SVG art can also be used for including text artwork, but using a data: URI is probably confusing for text artwork.
Formatters that do pagination should attempt to keep artwork on a single page.
This is to prevent artwork that is split across pages from looking like two separate pieces of artwork.
This element appears as a child element of <aside> (Section 2.6)
, <blockquote> (Section 2.10), <dd> (Section 2.18), <figure> (Section 2.25), <li> (Section 2.29), <section> (Section 2.46), <td> (Section 2.56), and <th> (Section 2.58).
Either: Text Or: <svg> elements (Section 4) 2.5.1.
"align" Attribute Controls whether the artwork appears left justified (default), centered, or right justified.
Artwork is aligned relative to the left margin of the document.
Allowed values:  "left" (default)  "center"  "right" 2.5.2.
"alt" Attribute Alternative text description of the artwork (which is more than just a summary or caption).
When the art comes from the "src" attribute and the format of that artwork supports alternate text, the alternative text comes from the text of the artwork itself, not from this attribute.
The contents of this attribute are important to readers who are visually impaired, as well as those reading on devices that cannot show the artwork well, or at all.
"anchor" Attribute Document wide unique identifier for this artwork.
"name" Attribute A filename suitable for the contents (such as for extraction to a local file).
This attribute can be helpful for other kinds of tools (such as automated syntax checkers, which work by extracting the artwork).
Note that the "name" attribute does not need to be unique for <artwork> elements in a document.
If multiple <artwork> elements have the same "name" attribute, a processing tool might assume that the elements are all fragments of a single file, and the tool can collect those fragments for later processing.
See Section 7 for a discussion of possible problems with the value of this attribute.
"src" Attribute The URI reference of a graphics file [RFC3986], or the name of a file on the local disk.
This can be a "data" URI [RFC2397] that contains the contents of the graphics file.
Note that the inclusion of art with the "src" attribute depends on the capabilities of the processing tool reading the XML document.
Tools need to be able to handle the file: URI, and they should be able to handle http: and https: URIs as well.
The prep tool will be able to handle reading the "src" attribute.
If no URI scheme is given in the attribute, the attribute is considered to be a local filename relative to the current directory.
Processing tools must be careful to not accept dangerous values for the filename, particularly those that contain absolute references outside the current directory.
Document creators should think hard before using relative URIs due to possible later problems if files move around on the disk.
Also, documents should most likely use explicit URI schemes wherever possible.
In some cases, the prep tool may remove the "src" attribute after processing its value.
See [RFC7998] for a description of this.
It is an error to have both a "src" attribute and content in the <artwork> element.
"type" Attribute Specifies the type of the artwork.
The value of this attribute is free text with certain values designated as preferred.
The preferred values for <artwork
> types are:  ascii art  binary art
The RFC Series Editor will maintain a complete list of the preferred values on the RFC Editor web site, and that list is expected to be updated over time.
Thus, a consumer of v3 XML should not cause a failure when it encounters an unexpected type or no type is specified.
The table will also indicate which type of art can appear in plain text output (for example, type "svg" cannot).
<aside> This element is a container for content that is semantically less important or tangential to the content that surrounds it.
This element appears as a child element of <section> (Section 2.46).
Content model: In any order:  <artwork> elements (Section 2.5)  <dl> elements (Section 2.20)  <figure> elements (Section 2.25)  <iref> elements (Section 2.27)  <list> elements (Section 3.4)  <ol> elements (Section 2.34)  <t> elements (Section 2.53)  <table> elements (Section 2.54)  <ul> elements (Section 2.63) 2.6.1.
"anchor" Attribute Document wide unique identifier for this aside.
> Provides information about a document's author.
This is used both for the document itself (at the beginning of the document) and for referenced documents.
The <author> elements contained within the document's <front
> element are used to fill the boilerplate and also to generate the "Author's Address" section (see [RFC7322]).
Note that an "author" can also be just an organization (by not specifying any of the "name" attributes, but adding the <organization> child element).
Furthermore, the "role" attribute can be used to mark an author as "editor".
This is reflected both on the front page and in the "Author's Address" section, as well as in bibliographic references.
Note that this specification does not define a precise meaning for the term "editor".
This element appears as a child element of <front> (Section 2.26).
In this order: 1.  One optional <organization> element (Section 2.35) 2.
One optional <address> element (Section 2.2) 2.7.1.
The ASCII equivalent of the author's full name.
"asciiInitials" Attribute The ASCII equivalent of the author's initials, to be used in conjunction with the separately specified asciiSurname.
The ASCII equivalent of the author's surname, to be used in conjunction with the separately specified asciiInitials.
The full name (used in the automatically generated "Author's Address" section).
Although this attribute is optional, if one or more of the "asciiFullname", "asciiInitials", or "asciiSurname" attributes have values, the "fullname" attribute is required.
"initials" Attribute An abbreviated variant of the given name(s), to be used in conjunction with the separately specified surname.
It usually appears on the front page, in footers, and in references.
Some processors will post process the value   for instance, when it only contains a single letter (in which case they might add a trailing dot).
Relying on this kind of post processing can lead to results varying across formatters and thus ought to be avoided.
"role" Attribute Specifies the role the author had in creating the document.
"surname" Attribute The author's surname, to be used in conjunction with the separately specified initials.
It usually appears on the front page, in footers, and in references.
> Contains the "back" part of the document: the references and appendices.
In <back>, <section> elements indicate appendices.
This element appears as a child element of <rfc> (Section 2.45).
Optional <displayreference> elements (Section 2.19) 2.
Optional <references> elements (Section 2.42) 3.
Optional <section> elements (Section 2.46) 2.9.
Marks text that are phrases defined in [BCP14] such as "MUST", "SHOULD NOT", and so on.
When shown in some of the output representations, the text in this element might be highlighted.
The use of this element is optional.
This element is only to be used around the actual phrase from BCP 14, not the full definition of a requirement.
For example, it is correct to say "The packet
<bcp14>MUST</bcp14> be dropped.", but it is not correct to say "<bcp14
The packet MUST be dropped.</bcp14>".
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <dd> (Section 2.18), <dt> (Section 2.21), <em> (Section 2.22), <li> (Section 2.29), <preamble> (Section 3.6), <refcontent> (Section 2.39), <strong> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), and <tt> (Section 2.62).
Content model: only text content.
> Specifies that a block of text is a quotation.
This element appears as a child element of <section> (Section 2.46).
Or: In any order, but at least one of:
"anchor" Attribute Document wide unique identifier for this quotation.
The source of the citation.
This must be a URI.
If the "quotedFrom" attribute is given, this URI will be used by processing tools as the link for the text of that attribute.
"quotedFrom" Attribute Name of person or document the text in this element is quoted from.
A formatter should render this as visible text at the end of the quotation.
Holds the boilerplate text for the document.
This element is filled in by the prep tool.
This element contains <section> elements.
Every <section> element in this element must have the "numbered" attribute set to "false".
This element appears as a child element of <front> (Section 2.26).
Content model: One or more <section> elements (Section 2.46) 2.12.
Indicates that a line break should be inserted in the generated output by a formatting tool.
Multiple successive instances of this element are ignored.
This element appears as a child element of <td> (Section 2.56) and <th> (Section 2.58).
Content model: this element does not have any contents.
Gives the city name in a postal address.
This element appears as a child element of <postal> (Section 2.37).
Content model: only text content.
The ASCII equivalent of the city name.
Gives the postal region code.
This element appears as a child element of <postal> (Section 2.37).
Content model: only text content.
The ASCII equivalent of the postal code.
Gives the country name or code in a postal address.
This element appears as a child element of <postal> (Section 2.37).
Content model: only text content.
The ASCII equivalent of the country name.
Comments can be used in a document while it is work in progress.
They might appear either inline and visually highlighted, at the end of the document, or not at all, depending on the formatting tool.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <c> (Section 3.1), <dd> (Section 2.18), <dt> (Section 2.21), <em> (Section 2.22), <li> (Section 2.29), <name> (Section 2.32), <postamble> (Section 3.5), <preamble> (Section 3.6), <strong> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), <tt> (Section 2.62), and <ttcol> (Section 3.9).
Text  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <relref> elements (Section 2.44)  <strong> elements (Section 2.50)  <sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 2.16.1.
"anchor" Attribute Document wide unique identifier for this comment.
"display" Attribute Suggests whether or not the comment should be displayed by formatting tools.
This might be set to "false" if you want to keep a comment in a document after the contents of the comment have already been dealt with.
Allowed values:  "true" (default)  "false" 2.16.3.
"source" Attribute Holds the "source" of a comment, such as the name or the initials of the person who made the comment.
> Provides information about the publication date.
This element is used for two cases: the boilerplate of the document being produced, and inside bibliographic references that use the <front> element.
Boilerplate for Internet Drafts and RFCs:
This element defines the date of publication for the current document (Internet Draft or RFC).
When producing Internet Drafts, the prep tool uses this date to compute the expiration date (see [IDGUIDE]).
When one or more of "year", "month", or "day" are left out, the prep tool will attempt to use the current system date if the attributes that are present are consistent with that date.
In dates in <rfc> elements, the month must be a number or a month in English.
The prep tool will silently change text month names to numbers.
Similarly, the year must be a four digit number.
When the prep tool is used to create Internet Drafts, it will reject a submitted Internet Draft that has a <date
> element in the boilerplate for itself that is anything other than today.
That is, the tool will not allow a submitter to specify a date other than the day of submission.
To avoid this problem, authors might simply not include a <date> element in the boilerplate.
In dates in <reference> elements, the date information can have prose text for the month or year.
For example, vague dates (year "ca. 2000"), date ranges (year "2012 2013"), non specific months (month "Second quarter"), and so on are allowed.
This element appears as a child element of <front> (Section 2.26).
Content model: this element does not have any contents.
"day" Attribute The day of publication.
The month or months of publication.
The year or years of publication. 2.18.
The definition part of an entry in a definition list.
This element appears as a child element of <dl> (Section 2.20).
Or: In any order, but at least one of:
"anchor" Attribute Document wide unique identifier for this definition.
This element gives a mapping between the anchor of a reference and a name that will be displayed instead.
This allows authors to display more mnemonic anchor names for automatically included references.
The mapping in this element only applies to <xref> elements whose format is "default".
For example, if the reference uses the anchor "RFC6949", the following would cause that anchor in the body of displayed documents to be "RFC dev": <displayreference target "RFC6949" to "RFC dev"/>
If a reference section is sorted, this element changes the sort order.
It is expected that this element will only be valid in input documents.
It will likely be removed by prep tools when preparing a final version after those tools have replaced all of the associated anchors, targets, and "derivedContent" attributes.
This element appears as a child element of <back> (Section 2.8).
Content model: this element does not have any contents.
This attribute must be the name of an anchor in a <reference> or <referencegroup> element.
This attribute is a name that will be displayed as the anchor instead of the anchor that is given in the <reference> element.
The string given must start with one of the following characters: 0 9, a z, or A Z.
Each entry has a pair of elements: a term (<dt>) and a definition (<dd>).
(This is slightly different and simpler than the model used in HTML, which allows for multiple terms for a single definition.)
This element appears as a child element of <abstract> (Section 2.1), <aside> (Section 2.6), <blockquote> (Section 2.10), <dd> (Section 2.18), <li> (Section 2.29), <note> (Section 2.33)
, <section> (Section 2.46), <td> (Section 2.56), and <th> (Section 2.58).
Content model: One or more sequences of: 1.
"anchor" Attribute Document wide unique identifier for the list.
"hanging" Attribute The "hanging" attribute defines whether or not the term appears on the same line as the definition.
hanging "true" indicates that the term is to the left of the definition,
while hanging "false" indicates that the term will be on a separate line.
Allowed values:  "false"  "true" (default)
"spacing" Attribute Defines whether or not there is a blank line between entries.
spacing "normal" indicates a single blank line, while spacing "compact" indicates no space between.
:  "normal" (default)  "compact" 2.21.
The term being defined in a definition list.
This element appears as a child element of <dl> (Section 2.20).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)  <relref> elements (Section 2.44)
<strong> elements (Section 2.50)  <sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)  <xref> elements (Section 2.66) 2.21.1.
"anchor" Attribute Document wide unique identifier for this term.
Indicates text that is semantically emphasized.
Text enclosed within this element will be displayed as italic after processing.
This element can be combined with other character formatting elements, and the formatting will be additive.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <cref> (Section 2.16), <dd
, <preamble> (Section 3.6), <refcontent> (Section 2.39),
<strong> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), and <tt> (Section 2.62).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <eref> elements (Section 2.24)
<iref> elements (Section 2.27)  <relref> elements (Section 2.44)  <strong> elements (Section 2.50)  <sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 2.23.
> Provides an email address.
The value is expected to be the addr spec defined in Section 2 of [RFC6068].
This element appears as a child element of <address> (Section 2.2).
Content model: only text content.
The ASCII equivalent of the author's email address.
This is only used if the email address has any internationalized components.
<eref> Represents an "external" link (as specified in the "target" attribute).
This is useful for embedding URIs in the body of a document.
If the <eref> element has non empty text content, formatters should use the content as the displayed text that is linked.
Otherwise, the formatter should use the value of the "target" attribute as the displayed text.
Formatters will link the displayed text to the value of the "target" attribute in a manner appropriate for the output format.
For example, with an input of: This is described at <eref target "http://www.example.com/reports/r12.html"/>.
An HTML formatter might generate: This is described at <a href "http://www.example.com/reports/r12.html"> http://www.example.com/reports/r12.html</a>.
With an input of: This is described <eref target "http://www.example.com/reports/r12.html"
An HTML formatter might generate: This is described <a href "http://www.example.com/reports/r12.html"
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <c> (Section 3.1), <cref> (Section 2.16), <dd
> (Section 2.32), <postamble> (Section 3.5), <preamble> (Section 3.6), <strong
> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t
> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), <tt> (Section 2.62), and <ttcol> (Section 3.9).
Content model: only text content.
"target" Attribute (Mandatory) URI of the link target [RFC3986].
Contains a figure with a caption with the figure number.
If the element contains a <name> element, the caption will also show that name.
This element appears as a child element of <aside> (Section 2.6)
, <blockquote> (Section 2.10), <dd> (Section 2.18), <li> (Section 2.29), <section> (Section 2.46), <td> (Section 2.56), and <th> (Section 2.58).
In this order: 1.  One optional <name> element (Section 2.32) 2.
Optional <iref> elements (Section 2.27) 3.
One optional <preamble> element (Section 3.6) 4.
One optional <postamble> element (Section 3.5) 2.25.1.
Note: does not affect title or <artwork> alignment.
Allowed values:  "left" (default)  "center"  "right" 2.25.2.
If the goal is to provide a single URI for a reference, use the "target" attribute in <reference> instead.
"anchor" Attribute Document wide unique identifier for this figure.
Allowed values:  "true"  "false" (default) 2.25.7.
Represents the "front matter": metadata (such as author information), the Abstract, and additional notes.
A <front> element may have more than one <seriesInfo
seriesInfo> element determines the document number (for RFCs) or name (for Internet Drafts).
seriesInfo> element determines the "maturity level" (defined in [RFC2026]), using values of "std" for "Standards Track", "bcp" for "BCP", "info" for "Informational", "exp" for "Experimental", and "historic" for "Historic".
The "name" attributes of those multiple <seriesInfo> elements interact as described in Section 2.47.
This element appears as a child element of <reference> (Section 2.40) and <rfc> (Section 2.45).
One <title> element (Section 2.60) 2.
Optional <seriesInfo> elements (Section 2.47) 3.
One or more <author> elements (Section 2.7) 4.
One optional <date> element (Section 2.17) 5.
Optional <area> elements (Section 2.4) 6.
Optional <workgroup> elements (Section 2.65) 7.
Optional <keyword> elements (Section 2.28) 8.
optional <abstract> element (Section 2.1) 9.
Optional <note> elements (Section 2.33) 10.
One optional <boilerplate> element (Section 2.11) 2.27.
> Provides terms for the document's index.
Index entries can be either regular entries (when just the "item" attribute is given) or nested entries (by specifying "subitem" as well), grouped under a regular entry.
Index entries generally refer to the exact place where the <iref> element occurred.
An exception is the occurrence as a child element of <section>, in which case the whole section is considered to be relevant for that index entry.
In some formats, index entries of this type might be displayed as ranges.
When the prep tool is creating index content, it collects the items in a case sensitive fashion for both the item and subitem level.
This element appears as a child element of <annotation> (Section 2.3), <aside> (Section 2.6), <blockquote> (Section 2.10), <c> (Section 3.1), <dd> (Section 2.18), <dt> (Section 2.21), <em> (Section 2.22), <figure> (Section 2.25), <li> (Section 2.29), <postamble> (Section 3.5), <preamble> (Section 3.6), <section> (Section 2.46), <strong> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <table> (Section 2.54), <td> (Section 2.56), <th> (Section 2.58), <tt> (Section 2.62), and <ttcol> (Section 3.9).
Content model: this element does not have any contents.
"primary" Attribute Setting this to "true" declares the occurrence as "primary", which might cause it to be highlighted in the index.
There is no restriction on the number of occurrences that can be "primary".
Allowed values:  "true"  "false" (default) 2.27.3.
"subitem" Attribute The subitem to include. 2.28.
> Specifies a keyword applicable to the document.
Note that each element should only contain a single keyword; for multiple keywords, the element can simply be repeated.
Keywords are used both in the RFC Index and in the metadata of generated document representations.
This element appears as a child element of <front> (Section 2.26).
Content model: only text content.
A list element, used in <ol> and
This element appears as a child element of <ol> (Section 2.34) and <ul> (Section 2.63).
Or: In any order, but at least one of:
"anchor" Attribute Document wide unique identifier for this list item.
<link> A link to an external document that is related to the RFC.
The following are the supported types of external documents that can be pointed to in a <link> element:  The current International Standard Serial Number (ISSN) for the RFC Series.
The value for the "rel" attribute is "item".
The link should use the form "urn:issn:".
The Digital Object Identifier (DOI) for this document.
The value for the "rel" attribute is "describedBy".
The link should use the form specified in [RFC7669]; this is expected to change in the future.
The Internet Draft that was submitted to the RFC Editor to become the published RFC.
The value for the "rel" attribute is "convertedFrom".
The link should be to an IETF controlled web site that retains copies of Internet Drafts.
A representation of the document offered by the document author.
The value for the "rel" attribute is "alternate".
The link can be to a personally run web site.
In RFC production mode, the prep tool needs to check the values for <link> before an RFC is published.
In draft production mode, the prep tool might remove some <link> elements during the draft submission process.
This element appears as a child element of <rfc> (Section 2.45).
Content model: this element does not have any contents.
The URI of the external document.
The relationship of the external document to this one.
The relationships are taken from the "Link Relations" registry maintained by IANA [LINKRELATIONS]. 2.31.
> Represents the main content of the document.
This element appears as a child element of <rfc> (Section 2.45).
Content model: One or more <section> elements (Section 2.46) 2.32.
The name of the section, note, figure, or texttable.
This name can indicate markup of flowing text (for example, including references or making some characters use a fixed width font).
This element appears as a child element of <figure> (Section 2.25), <note> (Section 2.33), <references> (Section 2.42), <section> (Section 2.46), <table> (Section 2.54), and <texttable> (Section 3.8).
Text  <cref> elements (Section 2.16)  <eref> elements (Section 2.24)  <relref> elements (Section 2.44)  <tt> elements (Section 2.62)  <xref> elements (Section 2.66) 2.33.
Creates an unnumbered, titled block of text that appears after the Abstract.
This element appears as a child element of <front> (Section 2.26).
In this order: 1.  One optional <name> element (Section 2.32) 2.
If set to "true", this note is marked in the prep tool with text indicating that it should be removed before the document is published as an RFC.
"This note is to be removed before publishing as an RFC."
Allowed values:  "true"  "false" (default) 2.33.2.
The labels on the items will be either a number or a letter, depending on the value of the style attribute.
This element appears as a child element of <abstract> (Section 2.1), <aside> (Section 2.6), <blockquote> (Section 2.10), <dd> (Section 2.18), <li> (Section 2.29), <note> (Section 2.33)
, <section> (Section 2.46), <td> (Section 2.56), and <th> (Section 2.58).
One or more <li> elements (Section 2.29) 2.34.1.
"anchor" Attribute Document wide unique identifier for the list.
When the prep tool sees an <ol> element with a "group" attribute that has already been seen, it continues the numbering of the list from where the previous list with the same group name left off.
If an <ol> element has both a "group" attribute and a "start" attribute, the group's numbering is reset to the given start value.
"spacing" Attribute Defines whether or not there is a blank line between entries.
spacing "normal" indicates a single blank line, while spacing "compact" indicates no space between.
:  "normal" (default)  "compact" 2.34.4.
"start" Attribute The ordinal value at which to start the list.
This defaults to "1" and must be an integer of 0 or greater.
The type of the labels on list items.
For types "a" and "A", after the 26th entry, the numbering starts at "aa"/"AA", then "ab"/"AB", and so on.
If the length of the type value is greater than 1, the value must contain a percent encoded indicator and other text.
The value is a free form text that allows counter values to be inserted using a "percent letter" format.
For instance, "[REQ%d]" generates labels of the form "[REQ1]", where "%d" inserts the item number as a decimal number.
%i Lowercase Roman numerals (
%% Represents a percent sign
Other formats are reserved for future use.
It is an error for the type string to be empty.
For bulleted lists, use the <ul> element.
For lists that have neither bullets nor numbers, use the <ul> element with the 'empty "true"' attribute.
If no type attribute is given, the default type is the same as "type '%d.'".
Specifies the affiliation [RFC7322] of an author.
This information appears both in the "Author's Address" section and on the front page (see [RFC7322] for more information).
If the value is long, an abbreviated variant can be specified in the "abbrev" attribute.
This element appears as a child element of <author> (Section 2.7).
Content model: only text content.
The ASCII equivalent of the organization's name.
> Represents a phone number.
See Section 3 of [RFC3966] for details.
This element appears as a child element of <address> (Section 2.2).
Content model: only text content.
> Contains optional child elements providing postal information.
These elements will be displayed in an order that is specific to formatters.
A postal address can contain only a set of <street>, <city>, <region>, <code>, and <country> elements, or only an ordered set of <postalLine> elements, but not both.
This element appears as a child element of <address> (Section 2.2).
Or: One or more <postalLine> elements (Section 2.38) 2.38.
> Represents one line of a postal address.
When more than one <postalLine> is given, the prep tool emits them in the order given.
This element appears as a child element of <postal> (Section 2.37).
Content model: only text content.
The ASCII equivalent of the text in the address line.
<refcontent> Text that should appear between the title and the date of a reference.
The purpose of this element is to prevent the need to abuse <seriesInfo> to get such text in a reference.
For example: <reference anchor "April1"
On Being A Fool</title> <author initials "K." surname "Phunny" fullname "Knot Phunny"/
> <date year "2000" month "April"/
This element appears as a child element of <reference> (Section 2.40).
Text  <bcp14> elements (Section 2.9)  <em> elements (Section 2.22)  <strong> elements (Section 2.50)  <sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62) 2.40.
> Represents a bibliographic reference.
This element appears as a child element of <referencegroup> (Section 2.41) and <references
> element (Section 2.26) 2.
<seriesInfo> elements (Section 2.47; deprecated in this context) 2.40.1.
"anchor" Attribute (Mandatory) Document wide unique identifier for this reference.
Usually, this will be used both to "label" the reference in the "References" section and as an identifier in links to this reference entry.
"quoteTitle" Attribute Specifies whether or not the title in the reference should be quoted.
This can be used to prevent quoting, such as on errata.
Allowed values:  "true" (default)  "false" 2.40.3.
"target" Attribute Holds the URI for the reference.
Represents a list of bibliographic references that will be represented as a single reference.
This is most often used to reference STDs and BCPs, where a single reference (such as "BCP 9") may encompass more than one RFC.
This element appears as a child element of <references> (Section 2.42).
One or more <reference> elements (Section 2.40) 2.41.1.
"anchor" Attribute (Mandatory) Document wide unique identifier for this reference group.
Usually, this will be used both to "label" the reference group in the "References" section and as an identifier in links to this reference entry.
> Contains a set of bibliographic references.
In the early days of the RFC Series, there was only one "References" section per RFC.
This convention was later changed to group references into two sets, "Normative" and "Informative", as described in [RFC7322].
This vocabulary supports the split with the <name> child element.
In general, the title should be either "Normative References" or "Informative References".
This element appears as a child element of <back> (Section 2.8).
In this order: 1.  One optional <name> element (Section 2.32) 2.
"anchor" Attribute An optional user supplied identifier for this set of references.
<region> Provides the region name in a postal address.
This element appears as a child element of <postal> (Section 2.37).
Content model: only text content.
The ASCII equivalent of the region name.
Represents a link to a specific part of a document that appears in a <reference> element.
Formatters that have links (such as HTML and PDF) render <relref> elements as external hyperlinks to the specified part of the reference, creating the link target by combining the base URI from the <reference> element with the "relative" attribute from this element.
The "target" attribute is required, and it must be the anchor of a <reference> element.
The "section" attribute is required, and the "relative" attribute is optional.
If the reference is not an RFC or Internet Draft that is in the v3 format, the element needs to have a "relative" attribute; in this case, the value of the "section" attribute is ignored.
An example of the <relref> element with text content might be: See <relref section "2.3" target "RFC9999" displayFormat "bare"
An HTML formatter might generate: See <a href "http://www.rfc
Note that the URL in the above example might be different when the RFC Editor deploys the v3 format.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <cref> (Section 2.16), <dd
, <strong> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), and <tt> (Section 2.62).
Content model: only text content.
"displayFormat" Attribute This attribute is used to signal formatters what the desired format of the relative reference should be.
Formatters for document types that have linking capability should wrap each part of the displayed text in hyperlinks.
If there is content in the <relref> element, formatters will ignore the value of this attribute.
"of" A formatter should display the relative reference as the word "Section" followed by a space, the contents of the "section" attribute followed by a space, the word "of", another space, and the value from the "target" attribute enclosed in square brackets.
For example, with an input of: See <relref section "2.3" target "RFC9999" displayFormat "of"/> for an overview.
An HTML formatter might generate: See <a href "
> of [<a href "#RFC9999">RFC9999</a>]
Note that "displayFormat 'of'" is the default for <relref>, so it does not need to be given in a <relref> element if that format is desired. "
comma" A formatter should display the relative reference as the value from the "target" attribute enclosed in square brackets, a comma, a space, the word "Section" followed by a space, and the "section" attribute.
editor.org/info/rfc9999#s 2.3"> Section 2.3</a>, for an overview. "
A formatter should display the relative reference as the value from the "target" attribute enclosed in square brackets, a space, a left parenthesis, the word "Section" followed by a space, the "section" attribute, and a right parenthesis.
For example, with an input of: See <relref section "2.3" target "RFC9999" displayFormat "parens"/> for an overview.
editor.org/info/rfc9999#s 2.3"> Section 2.3</a>) for an overview. "
bare" A formatter should display the relative reference as the contents of the "section" attribute and nothing else.
This is useful when there are multiple relative references to a single base reference.
For example: See Sections <relref section "2.3" target "RFC9999" displayFormat "bare"/> and <relref section "2.4" target "RFC9999" displayFormat "of"/> for an overview.
An HTML formatter might generate:
See Sections <a href "http://www.rfc
> and <a href "
> of [<a href "#RFC9999">RFC9999</a>]
Allowed values:  "of" (default)  "comma"  "parens"  "bare" 2.44.2.
"relative" Attribute Specifies a relative reference from the URI in the target reference.
"section" Attribute (Mandatory) Specifies a section of the target reference.
If the reference is not an RFC or Internet Draft in the v3 format, it is an error.
The anchor of the reference for this element.
If this value is not an anchor to a <reference> or <referencegroup
> element, it is an error.
If the reference at the target has no URI, it is an error.
This is the root element of the xml2rfc vocabulary.
Optional <link> elements (Section 2.30) 2.
> element (Section 2.26) 3.
One <middle> element (Section 2.31) 4.
> element (Section 2.8) 2.45.1.
"category" Attribute Deprecated; instead, use the "name" attribute in <seriesInfo>.
"consensus" Attribute Affects the generated boilerplate.
Note that the values of "no" and "yes" are deprecated and are replaced by "false" (the default) and "true".
See [RFC7841] for more information.
Allowed values:  "no"  "yes"  "false" (default)  "true" 2.45.3.
"docName" Attribute Deprecated; instead, use the "value" attribute in <seriesInfo
"indexInclude" Attribute Specifies whether or not a formatter is requested to include an index in generated files.
If the source file has no <iref> elements, an index is never generated.
This option is useful for generating documents where the source document has <iref> elements but the author no longer wants an index.
Allowed values:  "true" (default)  "false" 2.45.5.
"ipr" Attribute Represents the Intellectual Property status of the document.
See Appendix A.1 for details.
"iprExtract" Attribute Identifies a single section within the document for which extraction "as is" is explicitly allowed (only relevant for historic values of the "ipr" attribute).
"number" Attribute Deprecated; instead, use the "value" attribute in <seriesInfo
"obsoletes" Attribute A comma separated list of RFC numbers or Internet Draft names.
The prep tool will parse the attribute value so that incorrect references can be detected.
"prepTime" Attribute The date that the XML was processed by a prep tool.
This is included in the XML file just before it is saved to disk.
The value is formatted using the "date time" format defined in Section 5.6 of [RFC3339].
The "time offset" should be "Z".
"seriesNo" Attribute Deprecated; instead, use the "value" attribute in <seriesInfo>. 2.45.11.
"sortRefs" Attribute Specifies whether or not the prep tool will sort the references in each reference section.
Allowed values:  "true"  "false" (default) 2.45.12.
"submissionType" Attribute The document stream, as described in [RFC7841].
(The RFC Series Editor may change the list of allowed values in the future.)
:  "IETF" (default)  "IAB"  "IRTF"  "independent" 2.45.13.
"symRefs" Attribute Specifies whether or not a formatter is requested to use symbolic references (such as "[RFC2119]").
If the value for this is "false", the references come out as numbers (such as "[3]").
Allowed values:  "true" (default)  "false" 2.45.14.
"tocDepth" Attribute Specifies the number of levels of headings that a formatter is requested to include in the table of contents; the default is "3".
"tocInclude" Attribute Specifies whether or not a formatter is requested to include a table of contents in generated files.
Allowed values:  "true" (default)  "false" 2.45.16.
"updates" Attribute A comma separated list of RFC numbers or Internet Draft names.
The prep tool will parse the attribute value so that incorrect references can be detected.
"version" Attribute Specifies the version of xml2rfc syntax used in this document.
The only expected value (for now) is "3".
<section> Represents a section (when inside a <middle> element) or an appendix (when inside a <back> element).
Subsections are created by nesting <section> elements inside <section> elements.
Sections are allowed to be empty.
This element appears as a child element of <back> (Section 2.8), <boilerplate> (Section 2.11), <middle> (Section 2.31), and <section> (Section 2.46).
In this order: 1.  One optional <name> element (Section 2.32) 2.
Optional <section> elements (Section 2.46) 2.46.1.
"anchor" Attribute Document wide unique identifier for this section.
If set to "false", the formatter is requested to not display a section number.
The prep tool will verify that such a section is not followed by a numbered section in this part of the document and will verify that the section is a top level section.
Allowed values:  "true" (default)  "false" 2.46.3.
If set to "true", this note is marked in the prep tool with text indicating that it should be removed before the document is published as an RFC.
"This note is to be removed before publishing as an RFC."
Allowed values:  "true"  "false" (default) 2.46.4.
"toc" Attribute Indicates to a formatter whether or not the section is to be included in a table of contents, if such a table of contents is produced.
This only takes effect if the level of the section would have appeared in the table of contents based on the "tocDepth" attribute of the <rfc> element, and of course only if the table of contents is being created based on the "tocInclude" attribute of the <rfc> element.
If this is set to "exclude", any section below this one will be excluded as well.
The "default" value indicates inclusion of the section if it would be included by the tocDepth attribute of the <rfc> element.
Allowed values:  "include"  "exclude"  "default" (default) 2.47.
> Specifies the document series in which this document appears, and also specifies an identifier within that series.
A processing tool determines whether it is working on an RFC or an Internet Draft by inspecting the "name" attribute of a <seriesInfo> element inside the <front> element inside the <rfc> element, looking for "RFC" or "Internet Draft".
(Specifying neither value in any of the <seriesInfo> elements can be useful for producing other types of documents but is out of scope for this specification.)
It is invalid to have multiple <seriesInfo> elements inside the same <front> element containing the same "name" value.
Some combinations of <seriesInfo> "name" attribute values make no sense, such as having both <seriesInfo name "rfc"/> and <seriesInfo name "Internet Draft"/> in the same <front> element.
This element appears as a child element of <front> (Section 2.26) and <reference> (Section 2.40; deprecated in this context).
Content model: this element does not have any contents.
The ASCII equivalent of the name field.
"asciiValue" Attribute The ASCII equivalent of the value field.
The name of the series.
The currently known values are "RFC", "Internet Draft", and "DOI".
The RFC Series Editor may change this list in the future.
Some of the values for "name" interact as follows:
If a <front> element contains a <seriesInfo> element with a name of "Internet Draft", it can also have at most one additional <seriesInfo
> element with a "status" attribute whose value is of "standard", "full standard", "bcp", "fyi", "informational", "experimental", or "historic" to indicate the intended status of this Internet Draft, if it were to be later published as an RFC.
If such an additional <seriesInfo> element has one of those statuses, the name needs to be "".
If a <front> element contains a <seriesInfo> element with a name of "RFC", it can also have at most one additional <seriesInfo
> element with a "status" attribute whose value is of "full standard", "bcp", or "fyi" to indicate the current status of this RFC.
If such an additional <seriesInfo> element has one of those statuses, the "value" attribute for that name needs to be the number within that series.
That <front> element might also contain an additional <seriesInfo> element with the status of "info", "exp", or "historic" and a name of "" to indicate the status of the RFC.
A <front> element that has a <seriesInfo> element that has the name "Internet Draft" cannot also have a <seriesInfo> element that has the name "RFC".
> element can contain the DOI for the referenced document.
This cannot be used when the <seriesInfo> element is an eventual child element of an <rfc> element   only as an eventual child of a <reference> element.
The "value" attribute should use the form specified in [RFC7669].
"status" Attribute The status of this document.
The currently known values are "standard", "informational", "experimental", "bcp", "fyi", and "full standard".
The RFC Series Editor may change this list in the future.
The stream (as described in [RFC7841])
(The RFC Series Editor may change this list in the future.)
:  "IETF" (default)  "IAB"  "IRTF"  "independent" 2.47.6.
The identifier within the series specified by the "name" attribute.
For BCPs, FYIs, RFCs, and STDs, this is the number within the series.
For Internet Drafts, it is the full draft name (ending with the two digit version number).
For DOIs, the value is given, such as "10.17487/rfc1149", as described in [RFC7669].
The name in the value should be the document name without any file extension.
For Internet Drafts, the value for this attribute should be "draft ietf somewg someprotocol 07", not "draft ietf somewg someprotocol 07.txt".
This element allows the inclusion of source code into the document.
When rendered, source code is always shown in a monospace font.
When <sourcecode> is a child of <figure> or <section>, it provides full control of horizontal whitespace and line breaks.
When formatted, it is indented relative to the left margin of the enclosing element.
It is thus useful for source code and formal languages (such as ABNF [RFC5234] or the RNC notation used in this document).
(When <sourcecode> is a child of other elements, it flows with the text that surrounds it.)
Tab characters (U 0009) inside of this element are prohibited.
For artwork such as character based art, diagrams of message layouts, and so on, use the <artwork> element instead.
Output formatters that do pagination should attempt to keep source code on a single page.
This is to prevent source code that is split across pages from looking like two separate pieces of code.
This element appears as a child element of <blockquote> (Section 2.10), <dd
> (Section 2.18), <figure> (Section 2.25),
(Section 2.29), <section> (Section 2.46), <td
> (Section 2.56), and <th> (Section 2.58).
Content model: only text content.
"anchor" Attribute Document wide unique identifier for this source code.
"name" Attribute A filename suitable for the contents (such as for extraction to a local file).
This attribute can be helpful for other kinds of tools (such as automated syntax checkers, which work by extracting the source code).
Note that the "name" attribute does not need to be unique for <artwork> elements in a document.
If multiple <sourcecode> elements have the same "name" attribute, a formatter might assume that the elements are all fragments of a single file, and such a formatter can collect those fragments for later processing.
"src" Attribute The URI reference of a source file [RFC3986].
It is an error to have both a "src" attribute and content in the <sourcecode> element.
"type" Attribute Specifies the type of the source code.
The value of this attribute is free text with certain values designated as preferred.
The preferred values for <sourcecode> types are:  abnf  asn.1  bash  c
The RFC Series Editor will maintain a complete list of the preferred values on the RFC Editor web site, and that list is expected to be updated over time.
Thus, a consumer of v3 XML should not cause a failure when it encounters an unexpected type or no type is specified.
<street> Provides a street address.
This element appears as a child element of <postal> (Section 2.37).
Content model: only text content.
The ASCII equivalent of the street address.
Indicates text that is semantically strong.
Text enclosed within this element will be displayed as bold after processing.
This element can be combined with other character formatting elements, and the formatting will be additive.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <cref> (Section 2.16), <dd
, <preamble> (Section 3.6), <refcontent> (Section 2.39), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), and <tt> (Section 2.62).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)  <relref> elements (Section 2.44)
<sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 2.51.
Causes the text to be displayed as subscript, approximately half a letter height lower than normal text.
This element can be combined with other character formatting elements, and the formatting will be additive.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <cref> (Section 2.16), <dd
, <preamble> (Section 3.6), <refcontent> (Section 2.39),
<strong> (Section 2.50), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), and <tt> (Section 2.62).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)  <relref> elements (Section 2.44)
<strong> elements (Section 2.50)  <tt> elements (Section 2.62)  <xref> elements (Section 2.66) 2.52.
Causes the text to be displayed as superscript, approximately half a letter height higher than normal text.
This element can be combined with other character formatting elements, and the formatting will be additive.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <cref> (Section 2.16), <dd
, <preamble> (Section 3.6), <refcontent> (Section 2.39),
<strong> (Section 2.50), <t> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), and <tt> (Section 2.62).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)  <relref> elements (Section 2.44)
<strong> elements (Section 2.50)  <tt> elements (Section 2.62)  <xref> elements (Section 2.66) 2.53.
> Contains a paragraph of text.
This element appears as a child element of <abstract> (Section 2.1), <aside> (Section 2.6), <blockquote> (Section 2.10), <dd> (Section 2.18), <li> (Section 2.29), <list> (Section 3.4), <note> (Section 2.33)
, <section> (Section 2.46), <td> (Section 2.56), and <th> (Section 2.58).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)
<list> elements (Section 3.4)  <relref> elements (Section 2.44)
<spanx> elements (Section 3.7)  <strong> elements (Section 2.50)  <sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)  <vspace> elements (Section 3.10)  <xref> elements (Section 2.66) 2.53.1.
"anchor" Attribute Document wide unique identifier for this paragraph.
Instead, use <dd> inside of a definition list (<dl>).
"keepWithNext" Attribute Acts as a hint to the output formatters that do pagination to do a best effort attempt to keep the paragraph with the next element, whatever that happens to be.
For example, the HTML output @media print CSS ("CSS" refers to Cascading Style Sheets) might translate this to page break after: avoid.
For PDF, the paginator could attempt to keep the paragraph with the next element.
Note: this attribute is strictly a hint and not always actionable.
Allowed values:  "false" (default)  "true" 2.53.4.
"keepWithPrevious" Attribute Acts as a hint to the output formatters that do pagination to do a best effort attempt to keep the paragraph with the previous element, whatever that happens to be.
For example, the HTML output @media print CSS might translate this to page break before: avoid.
For PDF, the paginator could attempt to keep the paragraph with the previous element.
Note: this attribute is strictly a hint and not always actionable.
Allowed values:  "false" (default)  "true" 2.54.
Contains a table with a caption with the table number.
If the element contains a <name> element, the caption will also show that name.
Inside the <table> element is, optionally, a <thead> element to contain the rows that will be the table's heading and, optionally, a <tfoot> element to contain the rows of the table's footer.
If the XML is converted to a representation that has page breaks (such as PDFs or printed HTML), the header and footer are meant to appear on each page.
This element appears as a child element of <aside> (Section 2.6) and <section> (Section 2.46).
In this order: 1.  One optional <name> element (Section 2.32) 2.
Optional <iref> elements (Section 2.27) 3.
One optional <thead> element (Section 2.59) 4.
One or more <tbody> elements (Section 2.55) 5.
One optional <tfoot> element (Section 2.57)
"anchor" Attribute Document wide unique identifier for this table.
A container for a set of body rows for a table.
This element appears as a child element of <table> (Section 2.54).
One or more <tr> elements (Section 2.61) 2.55.1.
"anchor" Attribute Document wide unique identifier for the tbody.
A cell in a table row.
This element appears as a child element of <tr
"align" Attribute Controls whether the content of the cell appears left justified (default), centered, or right justified.
Note that "center" or "right" will probably only work well in cells with plain text; any other elements might make the contents render badly.
Allowed values:  "left" (default)  "center"  "right" 2.56.2.
"anchor" Attribute Document wide unique identifier for the cell.
The number of columns that the cell is to span.
For example, setting "colspan '3'" indicates that the cell occupies the same horizontal space as three cells of a row without any "colspan" attributes.
The number of rows that the cell is to span.
For example, setting "rowspan '3'" indicates that the cell occupies the same vertical space as three rows.
A container for a set of footer rows for a table.
This element appears as a child element of <table> (Section 2.54).
One or more <tr> elements (Section 2.61) 2.57.1.
"anchor" Attribute Document wide unique identifier for the tfoot.
A cell in a table row.
When rendered, this will normally come out in boldface; other than that, there is no difference between this and the <td
This element appears as a child element of <tr
"align" Attribute Controls whether the content of the cell appears left justified (default), centered, or right justified.
Note that "center" or "right" will probably only work well in cells with plain text; any other elements might make the contents render badly.
Allowed values:  "left" (default)  "center"  "right" 2.58.2.
"anchor" Attribute Document wide unique identifier for the row.
The number of columns that the cell is to span.
For example, setting "colspan '3'" indicates that the cell occupies the same horizontal space as three cells of a row without any "colspan" attributes.
The number of rows that the cell is to span.
For example, setting "rowspan '3'" indicates that the cell occupies the same vertical space as three rows.
A container for a set of header rows for a table.
This element appears as a child element of <table> (Section 2.54).
One or more <tr> elements (Section 2.61) 2.59.1.
"anchor" Attribute Document wide unique identifier for the thead.
> Represents the document title.
When this element appears in the <front> element of the current document, the title might also appear in page headers or footers.
If it is long (~40 characters), the "abbrev" attribute can be used to specify an abbreviated variant.
This element appears as a child element of <front> (Section 2.26).
Content model: only text content.
"abbrev" Attribute Specifies an abbreviated variant of the document title.
The ASCII equivalent of the title.
> A row of a table.
This element appears as a child element of <tbody> (Section 2.55), <tfoot> (Section 2.57), and <thead> (Section 2.59).
Content model: In any order, but at least one of:  <td> elements (Section 2.56)  <th> elements (Section 2.58) 2.61.1.
"anchor" Attribute Document wide unique identifier for the row.
> Causes the text to be displayed in a constant width font.
This element can be combined with other character formatting elements, and the formatting will be additive.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <cref> (Section 2.16), <dd
, <preamble> (Section 3.6), <refcontent> (Section 2.39),
<strong> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t> (Section 2.53), <td> (Section 2.56), and <th> (Section 2.58).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)  <relref> elements (Section 2.44)
<strong> elements (Section 2.50)  <sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <xref> elements (Section 2.66) 2.63.
The labels on the items will be symbols picked by the formatter.
This element appears as a child element of <abstract> (Section 2.1), <aside> (Section 2.6), <blockquote> (Section 2.10), <dd> (Section 2.18), <li> (Section 2.29), <note> (Section 2.33)
, <section> (Section 2.46), <td> (Section 2.56), and <th> (Section 2.58).
One or more <li> elements (Section 2.29) 2.63.1.
"anchor" Attribute Document wide unique identifier for the list.
"empty" Attribute Defines whether or not the label is empty.
empty "true" indicates that no label will be shown.
"spacing" Attribute Defines whether or not there is a blank line between entries.
spacing "normal" indicates a single blank line, while spacing "compact" indicates no space between.
:  "normal" (default)  "compact" 2.64.
> Contains a web address associated with the author.
The contents should be a valid URI; this most likely will be an "http:" or "https:" URI.
This element appears as a child element of <address> (Section 2.2).
Content model: only text content.
This element is used to specify the Working Group (IETF) or Research Group (IRTF) from which the document originates, if any.
The recommended format is the official name of the Working Group (with some capitalization).
In Internet Drafts, this is used in the upper left corner of the boilerplate, replacing the "Network Working Group" string.
Formatting software can append the words "Working Group" or "Research Group", depending on the "submissionType" property of the <rfc> element (Section 2.45.12).
This element appears as a child element of <front> (Section 2.26).
Content model: only text content.
A reference to an anchor in this document.
Formatters that have links (such as HTML and PDF) are likely to render <xref> elements as internal hyperlinks.
This element is useful for referring to references in the "References" section, to specific sections of this document, to specific figures, and so on.
The "target" attribute is required.
This element appears as a child element of <annotation> (Section 2.3), <blockquote> (Section 2.10), <c> (Section 3.1), <cref> (Section 2.16), <dd
> (Section 2.32), <postamble> (Section 3.5), <preamble> (Section 3.6), <strong
> (Section 2.50), <sub> (Section 2.51), <sup> (Section 2.52), <t
> (Section 2.53), <td> (Section 2.56), <th> (Section 2.58), <tt> (Section 2.62), and <ttcol> (Section 3.9).
Content model: only text content.
This attribute signals to formatters what the desired format of the reference should be.
Formatters for document types that have linking capability should wrap the displayed text in hyperlinks. "
counter" The "derivedContent" attribute will contain just a counter.
This is used for targets that are <section>, <figure>, <table>, or items in an ordered list.
Using "format 'counter'" where the target is any other type of element is an error.
For example, with an input of: <section anchor "overview">Protocol Overview</section
See Section <xref target "overview" format "counter"/> for an overview.
An HTML formatter might generate:
See Section <a href "#overview">1.7</a> for an overview.
"default" If the element has no content, the "derivedContent" attribute will contain a text fragment that describes the referenced part completely, such as "XML" for a target that is a <reference>, or "Section 2" or "Table 4" for a target to a non reference.
(If the element has content, the "derivedContent" attribute is filled with the content.)
For example, with an input of: <section anchor "overview">Protocol Overview</section
See <xref target "overview"/> for an overview.
An HTML formatter might generate: See <a href "
"none" Deprecated. "title" If the target is a <reference> element, the "derivedContent" attribute will contain the name of the reference, extracted from the <title> child of the <front> child of the reference.
Or, if the target element has a <name> child element, the "derivedContent" attribute will contain the text content of that <name> element concatenated with the text content of each descendant node of <name
> (that is, stripping out all of the XML markup, leaving only the text).
Or, if the target element does not contain a <name> child element, the "derivedContent" attribute will contain the name of the "anchor" attribute of that element with no other adornment.
Allowed values:  "default" (default)  "title"  "counter"  "none" 2.66.2.
Allowed values:  "true"  "false" (default) 2.66.3.
"target" Attribute (Mandatory) Identifies the document component being referenced.
The value needs to match the value of the "anchor" attribute of an element in the document; otherwise, it is an error.
Elements from v2 That Have Been Deprecated This section lists the elements from v2 that have been deprecated.
Note that some elements in v3 have attributes from v2 that are deprecated; those are not listed here.
This element appears as a child element of <texttable> (Section 3.8).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)
<spanx> elements (Section 3.7)  <strong> elements (Section 2.50)
<sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 3.2.
The <email> element is a much more useful way to get in touch with authors.
This element appears as a child element of <address> (Section 2.2).
Content model: only text content.
If the goal is to provide a single URI for a reference, use the "target" attribute in <reference> instead.
This element appears as a child element of <reference> (Section 2.40).
Content model: this element does not have any contents.
Instead, use <dl> for list/@style "hanging"; <ul> for list/@style "empty" or "symbols"; and <ol> for list/@style "letters", "numbers", "counter", or "format".
This element appears as a child element of <t> (Section 2.53).
One or more <t> elements (Section 2.53) 3.4.1.
The functionality of this attribute has been replaced with <ol>/@start.
Instead, use a regular paragraph after the figure or table.
This element appears as a child element of <figure> (Section 2.25) and <texttable> (Section 3.8).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)
<spanx> elements (Section 3.7)  <strong> elements (Section 2.50)
<sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 3.6.
Instead, use a regular paragraph before the figure or table.
This element appears as a child element of <figure> (Section 2.25) and <texttable> (Section 3.8).
Text  <bcp14> elements (Section 2.9)  <cref> elements (Section 2.16)  <em> elements (Section 2.22)  <eref> elements (Section 2.24)  <iref> elements (Section 2.27)
<spanx> elements (Section 3.7)  <strong> elements (Section 2.50)
<sub> elements (Section 2.51)  <sup> elements (Section 2.52)  <tt> elements (Section 2.62)
<xref> elements (Section 2.66) 3.7.
This element appears as a child element of <annotation> (Section 2.3), <c>
(Section 3.1), <postamble> (Section 3.5), <preamble> (Section 3.6), and <t> (Section 2.53).
Content model: only text content.
Instead of <spanx style "emph">, use <em>; instead of <spanx style "strong"
>, use <strong>; instead of <spanx style "verb">, use <tt
Allowed values:  "default"  "preserve" (default) 3.8.
This element appears as a child element of <aside> (Section 2.6) and <section> (Section 2.46).
In this order: 1.  One optional <name> element (Section 2.32) 2.
One optional <preamble> element (Section 3.6) 3.
One or more <ttcol> elements (Section 3.9) 4.
Optional <c> elements (Section 3.1) 5.
One optional <postamble> element (Section 3.5) 3.8.1.
Allowed values:  "true"  "false" (default) 3.8.5.
This element appears as a child element of <texttable> (Section 3.8).
Text  <cref> elements (Section 2.16)  <eref> elements (Section 2.24)
<iref> elements (Section 2.27)  <xref> elements (Section 2.66) 3.9.1.
In earlier versions of this format, <vspace> was often used to get an extra blank line in a list element; in the v3 vocabulary, that can be done instead by using multiple <t> elements inside the <li> element.
Other uses have no direct replacement.
This element appears as a child element of <t> (Section 2.53).
Content model: this element does not have any contents.
The discussion of the use of SVG can be found in [RFC7996].
This element is part of the namespace "http://www.w3.org/2000/svg".
Use of CDATA Structures and Escaping A common problem authors have with <artwork> and <sourcecode> elements
" </sourcecode> Using CDATA: <sourcecode> <!
Using CDATA is not a panacea, but it does help prevent having to use escapes in places where using escapes can cause other problems, such as difficulty of inclusion from other documents.
This format is based on [XML] and thus does not have any issues representing arbitrary Unicode [UNICODE] characters in text content.
The RFC Series Editor may restrict some of the characters that can be used in a particular RFC; the rules for such restrictions are covered in [RFC7997].
The "name" attribute of the <artwork> element (Section 2.5.5) can be used to derive a filename for saving to a local file system.
Trusting this kind of information without pre processing is a known security risk; see Section 4.3 of [RFC6266] for more information.
The "src" attribute of the <artwork> element can be used to read files from the local system.
Processing tools must be careful to not accept dangerous values for the filename, particularly those that contain absolute references outside the current directory.
The "type" attribute of the <artwork> and <sourcecode> elements is meant to encourage formatters to automatically extract known types of content from an RFC or Internet Draft.
While extraction is probably safe, those tools might also think that they could further process the extracted content, such as by rendering artwork or executing code.
Doing so without first sanity checking the extracted content is clearly a terrible idea from a security perspective.
More generally, a tool that is reading XML input needs to be suspicious of any content that it intends to post process.
When there is an external reference to a URL, a processor or renderer should fetch the content into a sandbox and should have only a localized impact on the document processing and rendering.
All security considerations related to XML processing are relevant as well (see Section 7 of [RFC3470]).
Internet Media Type Registration IANA maintains the registry of Internet Media Types [RFC6838] at <https://www.iana.org/assignments/media types
This document updates the specification for the Internet Media Type "application/rfc xml" from the one in [RFC7749].
The following has been registered with IANA.
Type name:  application Subtype name:
There are no required parameters.
This parameter has identical semantics to the charset parameter of the "application/xml" Media Type specified in Section 9.1 of [RFC7303].
Encoding considerations:  Identical to those of "application/xml" as described in Section 9.1 of [RFC7303].
Security considerations:  As defined in Section 7.
In addition, as this Media Type uses the " xml" convention, it inherits the security considerations described in Section 10 of [RFC7303].
Different implementations of this format have had interoperability issues.
It is not expected that publication of this application will cause those implementations to be fixed.
Applications that use this Media Type:  Applications that transform xml2rfc to output representations such as plain text or HTML, plus additional analysis tools.
Fragment identifier considerations:  The "anchor" attribute is used for assigning document wide unique identifiers that can be used as shorthand pointers, as described in [XPOINTER].
Deprecated alias names for this type:  None Magic number(s):
As specified for "application/xml" in [RFC7303].
when disambiguation from other XML files is needed Macintosh file type code(s):
TEXT Person & email address to contact for further information:
See the Author's Address section of RFC 7991.
COMMON Restrictions on usage:  None Author:  See the Author's Address section of RFC 7991.
Change controller:  RFC Series Editor (rse@rfc editor.org) 8.2.
Link Relation Registration IANA has registered "convertedFrom" in the "Link Relation Types" registry [LINKRELATIONS].
Description: The document linked to was later converted to the document that contains this link relation.
For example, an RFC can have a link to the Internet Draft that became the RFC; in that case, the link relation would be "convertedFrom".
This relation is different than "predecessor version" in that "predecessor version" is for items in a version control system.
It is also different than "previous" in that this relation is used for converted resources, not those that are part of a sequence of resources.
None Appendix A.  Front Page ("Boilerplate")
The values listed here will be defined by the RFC Series Editor.
Those listed here are believed to be the current values in use.
The "ipr" Attribute This attribute value can take a long list of values, each of which describes an IPR policy for the document (Section 2.45.5).
The values are not the result of a grand design, but they remain simply for historic reasons.
Of these values, only a few are currently in use; all others are supported by various tools for backwards compatibility with old source files.
Note: Some variations of the boilerplate are selected based on the document's date; therefore, it is important to specify the "year", "month", and "day" attributes of the <date> element when archiving the XML source of an Internet Draft on the day of submission.
THIS ONLY PROVIDES IMPLEMENTATION INFORMATION.
IF YOU NEED LEGAL ADVICE, PLEASE CONTACT A LAWYER.
For further information, refer to
For the current "Copyright Notice" text, the submissionType attribute of the <rfc> element (Section 2.45.12) determines whether a statement about "Code Components" is inserted (which is the case for the value "IETF", which is the default).
Other values, such as "independent", suppress this part of the text.
The name for these values refers to version 2.0 of the IETF Trust's "Legal Provisions Relating to IETF Documents", sometimes simply called the "TLP", which went into effect on February 15, 2009 [TLP2.0].
Updates to the document were published on September 12, 2009
and on December 28, 2009 [TLP4.0], modifying the license for code components (see <http://trustee.ietf.org/ license info/> for further information).
The actual text is located in Section 6 ("Text to Be Included in IETF Documents") of these documents.
The TLP was again updated in March 2015
[TLP5.0], but the changes made in that version do not affect the boilerplate text.
This value should be used unless one of the more specific " trust200902" values is a better fit.
It produces the text in Sections 6.a and 6.b of the TLP.
This produces the additional text from Section 6.c.i of the TLP: This document may not be modified, and derivative works of it may not be created, except to format it for publication as an RFC or to translate it into languages other than English.
Note: this clause is incompatible with RFCs that are published on the Standards Track.
This produces the additional text from Section 6.c.ii of the TLP: This document may not be modified, and derivative works of it may not be created, and it may not be published except as an Internet Draft.
Note: this clause is incompatible with RFCs.
This produces the additional text from Section 6.c.iii of the TLP, frequently called the "pre 5378 escape clause" referring to changes introduced in [RFC5378]: This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008.
The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process.
Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.
See Section 4 of <
> for further information about when to use this value.
Note: this text appears under "Copyright Notice", unless the document was published before November 2009, in which case it appears under "Status of This Memo".
The attribute values "trust200811", "noModificationTrust200811", and "noDerivativesTrust200811" are similar to their "trust200902" counterparts, except that they use text specified in [TLP1.0].
The attribute values "full3978", "noModification3978", and "noDerivatives3978" are similar to their counterparts above, except that they use text specified in [RFC3978].
" The attribute values "full3667", "noModification3667", and "noDerivatives3667" are similar to their counterparts above, except that they use text specified in [RFC3667].
The attribute values "full2026" and "noDerivativeWorks2026" are similar to their counterparts above, except that they use text specified in Section 10 of [RFC2026].
The special value "none" was also used back then; it denied the IETF any rights beyond publication as an Internet Draft.
The "submissionType" Attribute The RFC Editor publishes documents from different "document streams", of which the "IETF stream" is the most prominent.
Other streams are the "Independent Submissions stream" (used for things such as discussion of Internet related technologies that are not part of the IETF agenda), the "IAB stream" (Internet Architecture Board), and the "IRTF stream" (Internet Research Task Force).
The values for the attribute are "IETF" (the default value), "independent", "IAB", and "IRTF".
Historically, this attribute did not affect the final appearance of RFCs, except for subtle differences in copyright notices.
Nowadays (as of [RFC7841]), the stream name appears in the first line of the front page, and it also affects the text in the "Status of This Memo" section.
For current documents, setting the "submissionType" attribute will have the following effect:  For RFCs, the stream name appears in the upper left corner of the first page (in Internet Drafts, this is either "Network Working Group" or the value of the <workgroup> element).
For RFCs, it affects the whole "Status of This Memo" section (see Section 3.2 of [RFC7841]).
For all RFCs and Internet Drafts, it determines whether the "Copyright Notice" section mentions the Copyright on Code Components (see Section 6 of the TLP ("Text to Be Included in IETF Documents")).
The "consensus" Attribute For some of the publication streams (see Appendix A.2), the "Status of This Memo" section depends on whether there was a consensus to publish (again, see Section 3.4 of [RFC7841]).
The consensus attribute can be used to supply this information.
The acceptable values are "true" (the default) and "false"; "yes" and "no" from v2 are deprecated.
The effect of this value for the various streams is:  "independent": none.
"IAB": mention that there was an IAB consensus.
"IETF": mention that there was an IETF consensus.
"IRTF": mention that there was a research group consensus (where the name of the research group is extracted from the <workgroup> element).
The v3 Format and Processing Tools
This section describes topics that are specific to v3 processing tools.
Note that there is some discussion of tools in the main body of the document as well.
For example, some elements have descriptions of how a processing tool might create output from the element.
The expected design of the tools that will be used with v3 documents includes:  A "prep tool" that takes a v3 document, makes many checks, adds and changes many attribute values, and creates a file that is a "prepared document".
The prepared document is a valid v3 document.
The prep tool is described in [RFC7998].
The prep tool is expected to have many modes:
The mode used by the RFC Editor to process the input from one of the RFC streams and to process XML produced during the RFC editing process.
The restrictions on the canonical XML for RFCs, as well as how the non canonical formats will look, are described at <https://www.rfc editor.org/rse/wiki/ doku.php?id
The mode used by the Internet Draft submission tool.
The restrictions for the XML from this mode will be described later.
A mode that can be used by document authors to look for errors or warnings before they submit their documents for publication.
Produces output where no external resources are required to render the file output.
This includes expanding the XInclude entities and DTD entities in place, and changing all elements that have "src" attributes with external links into either "data:" URI or content for the element, as specified in [RFC7998].
Formatting tools that will create HTML, PDF, plain text, and possibly other output formats.
These formatters will be created by the IETF, but others can create such tools as well.
The IETF tools are expected to take prepared documents as input.
There may also be processing tools that are meant to run on the computers of authors.
These tools may be used to produce interim versions of the non canonical representations so that authors can see how their XML might later be rendered, to create documents in representations different than those supported by the RFC Editor, to possibly create documents that are not meant to be Internet Drafts or RFCs, and to convert XML that has external information into XML that has that external information included.
The prep tool is expected to have clear error reporting, giving more context than just a line number.
For example, the error messages should differentiate between errors in XML and those from the v3 format.
In v2, the grammar was specified as a DTD.
In v3, the grammar is specified only as RELAX Next Generation (RNG).
This means that tools need to work from the RNG, not from a DTD.
Some of the features of the v3 grammar cannot be specified as a DTD.
Including External Text with XInclude
All tools for the v3 format are expected to support XInclude [XInclude].
XInclude specifies a processing model and syntax for general purpose inclusion of information that is either on the Internet or local to the user's computer.
In the v3 syntax, XInclude is expressed as the <xi:include> element.
To use this element, you need to include the "xi" namespace in the <rfc> element; that is, you need to specify xmlns:xi "
" as one of the attributes in the <rfc> element.
The most common way to use <xi:include> is to pull in references that are already formed as XML.
Currently, this can be done from xml2rfc.tools.ietf.org, but later this is expected to be from the RFC Editor.
For example, if a document has three normative references, all RFCs, the document might contain: <references> <xi:
> <xi:include> can be used anywhere an XML element could be used (but not where free text is used).
For example, if three Internet Drafts are all including a particular paragraph or section verbatim, that text can be kept either in a file or somewhere on the web and can be included with <xi:include>.
An example of pulling something from the local disk would be: <x:include href "file://home/chris/ietf/drafts
In general, XInclude should be used instead of ENTITY references and XML Processing Instructions (PIs) that allow external inclusions.
Anchors and IDs People writing and reading Internet Drafts and RFCs often want to make reference to specific locations in those documents.
In the case of RFC authors, it is common to want to reference another part of their document, such as "see Section 3.2 of this document."
Readers, on the other hand, want to reference parts of documents that they didn't write, such as "see Section 3.2 of RFC 6949.
The XML vocabulary in this document attempts to support both sets of people.
Authors can leave anchors in a document that can later be used for references with the "anchor" attribute.
Anchors can be included in the numerous elements.
The author can then refer to that anchor in the "target" attribute of the <xref> element.
Readers can refer to any element that has an "anchor" attribute by that attribute.
Note, however, that most of the time, elements won't have anchors.
In the common case, the reader wants to refer to an element that does not have an "anchor" attribute, but that element has a "pn" attribute.
Processing tools add the "pn" attribute to many elements during processing.
This attribute and its value are automatically generated by the tool if the attribute is not there; if the attribute is already there, the tool may replace the value.
In the HTML representation of this XML vocabulary, both anchors and "pn" attributes will be used in the "id" attributes of elements.
Thus, there can be no overlap between the names entered in "anchor" attributes, in "slugifiedName" attributes, and those that are generated for the "pn" attributes.
Also, there are some values for the "anchor" values that are reserved for sections, and those sections can only have those anchor values.
The following rules prevent this overlap:  "pn" for regular sections always has the format "s nnn", where "nnn" is the section number, or the appendix identifier (which starts with a letter).
For example, this would be "s 2.1.3" for Section 2.1.3 and "s a" for Appendix A.
For the <abstract> element, it is always "s abstract".
, it is always "s note nnn", where "nnn" is a sequential value.
For sections in the <boilerplate> element, it is always "s boilerplate nnn", where "nnn" is a sequential value.
"pn" for <references> elements has the format "
It is important to note that "nnn" is a number, not letters, even though the <references> appear in the back.
It is the number that is one higher than the highest top level section number in <middle
If there are two or more <references>, "nnn" will include a dot as if the <references> are a subsection of a section that is numbered one higher than the highest top level section number in <middle
"pn" for <figure> elements always has the format "f nnn", where "nnn" is the figure number.
For example, this would be "f 5" for Figure 5.
"pn" for <iref> elements always has the format "i ttt nnn", where "ttt" is the slugified item (plus a hyphen and the slugified subitem if there is a subitem), and "nnn" is the instance of that item/subitem pair.
For example, this would be "i foo 1" for "<iref item 'foo'
" and "i foo bar 1" for "<iref item 'foo' subitem 'bar'>".
"pn" for <table> elements always has the format "t nnn", where "nnn" is the table number.
For example, this would be "t 5" for Table 5.
"pn" for all elements not listed above always has the format "p nnn mmm", where "nnn" is the section number and "mmm"
is the relative position in the section.
For example, this would be "p 2.1.3 7" for the seventh part number in Section 2.1.3.
"slugifiedName" always has the format "
n ttt", where "ttt" is the text of the name after slugification.
For example, this would be "n protocol overview" for the name "Protocol Overview".
The actual conversions done in slugification will be specified at a later time.
Anchors must never overlap with any of the above.
The easiest way to assure that is to not pick an anchor name that starts with a single letter followed by a hyphen.
If an anchor does overlap with one of the types of names above, the processing tool will reject the document.
Attributes Controlled by the Prep Tool
Many elements in the v3 vocabulary have new attributes whose role is to hold values generated by the prep tool.
These attributes can exist in documents that are input to the prep tool; however, any of these attributes might be added, removed, or changed by the prep tool.
Thus, it is explicitly unsafe for a document author to include these attributes and expect that their values will survive processing by the prep tool.
The attributes that are controlled by the prep tool are:  The "pn" attribute in any element
The number for this item within the section.
The numbering is shared with other elements of a section.
The "pn" attribute is added to many block level elements inside sections.
This attribute is filled with the original value of the "src" attribute if that attribute is removed by the prep tool.
This attribute is filled with the original value of the "src" attribute if that attribute is removed by the prep tool.
This attribute is filled with a "slugified" version of the text in the element.
This attribute can be used in the output formats for elements that have both names and numbers.
This attribute is filled with the link that is derived from combining the URI from the reference and the relative part that is either a copy of the "relative" attribute or a section number derived from the "section" attribute.
This attribute is filled with the date that an Internet Draft expires.
The date is in the format yyyy mm dd.
This attribute is filled with a string that indicates what mode the prep tool was in when it processed the XML, such as whether it was processing a file to become an Internet Draft or an RFC.
This attribute is filled with a list of scripts needed to render this document.
The list is comma  separated, with no spaces allowed.
The names come from [UAX24].
For example, if the document has Chinese characters in it, the value might be "Common,Latin,Han".
This attribute is filled with the original value of the "src" attribute if that attribute is removed by the prep tool.
This attribute is filled in if there is no content in the <xref> element.
The value for this attribute is based on the value in the "displayFormat" attribute.
Examples of how this value is filled can be found in Section 2.66.1.
In addition, note that the contents of the <boilerplate> element are controlled by the prep tool.
The following is the RELAX NG schema for the v3 format.
"http://relaxng.org/ns/compatibility/annotations/1.0" # xml2rfc Version 3 grammar rfc   element rfc { attribute xml:base { text }?
link   element link { attribute xml:base { text }?
front   element front { attribute xml:base { text }?
title   element title { attribute xml:base { text }?
organization   element organization { attribute xml:base { text }?
postal   element postal { attribute xml:base { text }?
element postalLine { attribute xml:base { text }?
text } phone   element phone { attribute xml:base { text }?
element uri { attribute xml:base { text }?
} note   element note { attribute xml:base { text }?
} boilerplate   element boilerplate { attribute xml:base { text }?
} t   element t { attribute xml:base { text }?
element aside { attribute xml:base { text }?
} blockquote   element blockquote { attribute xml:base { text }?
t  } ol   element ol { attribute xml:base { text }?
, li  } li   element li { attribute xml:base { text }?
} dl   element dl { attribute xml:base { text }?
} dd   element dd { attribute xml:base { text }?
} xref   element xref { attribute xml:base { text }?
, text } relref   element relref { attribute xml:base { text }?
empty } cref   element cref { attribute xml:base { text }?
} tt   element tt { attribute xml:base { text }?
} sub   element sub { attribute xml:base { text }?
} sup   element sup { attribute xml:base { text }?
} spanx   element spanx { attribute xml:base { text }?
table   element table { attribute xml:base { text }?
, iref , thead?, tbody , tfoot? }
preamble   element preamble { attribute xml:base { text }?
} artwork   element artwork { attribute xml:base { text }?
editor.org/materials/format/SVG 1.2 RFC.rnc sourcecode   element sourcecode { attribute xml:base { text }?
} tbody   element tbody { attribute xml:base { text }?
} tfoot   element tfoot { attribute xml:base { text }?
tr { attribute xml:base { text }?
td { attribute xml:base { text }?
attribute anchor { xsd:ID }?,
} postamble   element postamble { attribute xml:base { text }?
} texttable   element texttable { attribute xml:base { text }?
ttcol   element ttcol { attribute xml:base { text }?
} bcp14   element bcp14 { attribute xml:base { text }?
element displayreference { attribute xml:base { text }?
} reference   element reference { attribute xml:base { text }?
} referencegroup   element referencegroup { attribute xml:base { text }?
element seriesInfo { attribute xml:base { text }?
} refcontent   element refcontent { attribute xml:base { text }?
The following is a non normative comparison of the v3 format to the v2 format.
"3" ] attribute tocDepth { text }?
postal   element postal { street , (city   region   code   country)
} street   element street { text } city   element city { text } region   element region
{ text } code   element code { text } country   element country { text } phone   element phone { text } facsimile   element facsimile { text } email
element email { text } uri
, attribute hangText { text }?
"0" ] attribute blankLines { text }?
attribute xml:base { text }?
attribute xml:base { text }?
, preamble?, ttcol , c , postamble? }
attribute xml:base { text }?
The IAB members at the time this memo was approved were (in alphabetical order):
Ted Hardie Joe Hildebrand Russ Housley Lee Howard Erik Nordmark Robert Sparks
Andrew Sullivan Dave Thaler Martin Thomson Brian Trammell Suzanne Woolf
