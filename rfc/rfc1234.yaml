- title: __initial_text__
  contents:
  - '               Tunneling IPX Traffic through IP Networks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo describes a method of encapsulating IPX datagrams\
    \ within\n   UDP packets so that IPX traffic can travel across an IP internet.\n\
    \   This RFC specifies an IAB standards track protocol for the Internet\n   community,\
    \ and requests discussion and suggestions for improvements.\n   Please refer to\
    \ the current edition of the \"IAB Official Protocol\n   Standards\" for the standardization\
    \ state and status of this protocol.\n   Distribution of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   Internet Packet eXchange protocol (IPX) is the internetwork\
    \ protocol\n   used by Novell's NetWare protocol suite.  For the purposes of this\n\
    \   paper, IPX is functionally equivalent to the Internet Datagram\n   Protocol\
    \ (IDP) from the Xerox Network Systems (XNS) protocol suite\n   [1].  This memo\
    \ describes a method of encapsulating IPX datagrams\n   within UDP packets [2]\
    \ so that IPX traffic can travel across an IP\n   internet [3].\n   This RFC allows\
    \ an IPX implementation to view an IP internet as a\n   single IPX network.  An\
    \ implementation of this memo will encapsulate\n   IPX datagrams in UDP packets\
    \ in the same way any hardware\n   implementation might encapsulate IPX datagrams\
    \ in that hardware's\n   frames.  IPX networks can be connected thusly across\
    \ internets that\n   carry only IP traffic.\n"
- title: Packet Format
  contents:
  - "Packet Format\n   Each IPX datagram is carried in the data portion of a UDP packet.\n\
    \   All IP and UDP fields are set normally.  Both the source and the\n   destination\
    \ ports in the UDP packet should be set to the UDP port\n   value allocated by\
    \ the Internet Assigned Numbers Authority for the\n   implementation of this encapsulation\
    \ method.\n   As with any UDP application, the transmitting party has the option\
    \ of\n   avoiding the overhead of the checksum by setting the UDP checksum to\n\
    \   zero.  Since IPX implementations never use the IPX checksum to guard\n   IPX\
    \ packets from damage, UDP checksumming is highly recommended for\n   IPX encapsulation.\n\
    \   +---------------------+------------+-------------------------------+\n   |\
    \                     |            |             |                 |\n   |   \
    \  IP Header       | UDP Header | IPX Header  | IPX packet data |\n   | (20 or\
    \ more octets) | (8 octets) | (30 octets) |                 |\n   |          \
    \           |            |             |                 |\n   +---------------------+------------+-------------------------------+\n\
    \         Figure 1: An IPX packet carried as data in a UDP packet.\n"
- title: Reserved Packets
  contents:
  - "Reserved Packets\n   The first two octets of the IPX header contain the IPX checksum.\
    \  IPX\n   packets are never sent with a checksum, so every IPX header begins\n\
    \   with two octets of FF hex.  Implementations of this encapsulation\n   scheme\
    \ should ignore packets with any other value in the first two\n   octets immediately\
    \ following the UDP header.  Other values are\n   reserved for possible future\
    \ enhancements to this encapsulation\n   protocol.\n"
- title: Unicast Address Mappings
  contents:
  - "Unicast Address Mappings\n   IPX addresses consist of a four octet network number\
    \ and a six octet\n   host number.  IPX uses the network number to route each\
    \ packet\n   through the IPX internet to the destination network.  Once the packet\n\
    \   arrives at the destination network, IPX uses the six octet host\n   number\
    \ as the hardware address on that network.\n   Host numbers are also exchanged\
    \ in the IPX headers of packets of\n   IPX's Routing Information Protocol (RIP).\
    \  This supplies end nodes\n   and routers alike with the hardware address information\
    \ required for\n   forwarding packets across intermediate networks on the way\
    \ towards\n   the destination networks.\n   For implementations of this memo,\
    \ the first two octets of the host\n   number will always be zero and the last\
    \ four octets will be the\n   node's four octet IP address.  This makes address\
    \ mapping trivial for\n   unicast transmissions: the first two octets of the host\
    \ number are\n   discarded, leaving the normal four octet IP address.  The\n \
    \  encapsulation code should use this IP address as the destination\n   address\
    \ of the UDP/IP tunnel packet.\n"
- title: Broadcasts between Peer Servers
  contents:
  - "Broadcasts between Peer Servers\n   IPX requires broadcast facilities so that\
    \ NetWare servers and IPX\n   routers sharing a network can find one another.\
    \  Since internet-wide\n   IP broadcast is neither appropriate nor available,\
    \ some other\n   mechanism is required.  For this memo, each server and router\
    \ should\n   maintain a list of the IP addresses of the other IPX servers and\n\
    \   routers on the IP internet.  I will refer to this list as the \"peer\n   list\"\
    , to individual members as \"peers\", and to all the peers taken\n   together,\
    \ including the local node, as the \"peer group\".  When IPX\n   requests a broadcast,\
    \ the encapsulation implementation simulates the\n   broadcast by transmitting\
    \ a separate unicast packet to each peer in\n   the peer list.\n   Because each\
    \ peer list is constructed by hand, several groups of\n   peers can share the\
    \ same IP internet without knowing about one\n   another.  This differs from a\
    \ normal IPX network in which all peers\n   would find each other automatically\
    \ by using the hardware's broadcast\n   facility.\n   The list of peers at each\
    \ node should contain all other peers in the\n   peer group.  In most cases, connectivity\
    \ will suffer if broadcasts\n   from one peer consistently fail to reach some\
    \ other peer in the\n   group.\n   The peer list could be implemented using IP\
    \ multicast [4], but since\n   multicast facilities are not widely available at\
    \ this time, no well-\n   known multicast address has been assigned and no implementations\n\
    \   using multicast exist.  As IP multicast is deployed in IP\n   implementations,\
    \ it can be used by simply including in the peer list\n   an IP multicast address\
    \ for IPX servers and routers.  The IP\n   multicast address would replace the\
    \ IP addresses of all peers which\n   will receive IP multicast packets sent from\
    \ this peer.\n"
- title: Broadcasts by Clients
  contents:
  - "Broadcasts by Clients\n   Typically, NetWare client nodes do not need to receive\
    \ broadcasts, so\n   normally NetWare client nodes on the IP internet would not\
    \ need to be\n   included in the peer lists at the servers.\n   On the other hand,\
    \ clients on an IPX network need to send broadcasts\n   in order to locate servers\
    \ and to discover routes.  A client\n   implementation of UDP encapsulation can\
    \ handle this by having a\n   configured list of the IP addresses of all servers\
    \ and routers in the\n   peer group running on the IP internetwork.  As with the\
    \ peer list on\n   a server, the client implementation would simulate the broadcast\
    \ by\n   sending a copy of the packet to each IP address in its list of IPX\n\
    \   servers and routers.  One of the IP addresses in the list, perhaps\n   the\
    \ only one, could be a broadcast address or, when available, a\n   multicast address.\
    \  This allows the client to communicate with\n   members of the peer group without\
    \ knowing their specific IP\n   addresses.\n   It's important to realize that\
    \ broadcast packets sent from an IPX\n   client must be able to reach all servers\
    \ and routers in the server\n   peer group.  Unlike IP, which has a unicast redirect\
    \ mechanism, IPX\n   end systems are responsible for discovering routing information\
    \ by\n   broadcasting a packet requesting a router that can forward packets to\n\
    \   the desired destination.  If such packets do not tend to reach the\n   entire\
    \ server peer group, resources in the IPX internet may be\n   visible to an end\
    \ system, yet unreachable by it.\n"
- title: Maximum Transmission Unit
  contents:
  - "Maximum Transmission Unit\n   Although larger IPX packets are possible, the standard\
    \ maximum\n   transmission unit for IPX is 576 octets.  Consequently, 576 octets\
    \ is\n   the recommended default maximum transmission unit for IPX packets\n \
    \  being sent with this encapsulation technique.  With the eight octet\n   UDP\
    \ header and the 20 octet IP header, the resulting IP packets will\n   be 604\
    \ octets long.  Note that this is larger than the 576 octet\n   maximum size IP\
    \ implementations are required to accept [3].  Any IP\n   implementation supporting\
    \ this encapsulation technique must be\n   capable of receiving 604 octet IP packets.\n\
    \   As improvements in protocols and hardware allow for larger,\n   unfragmented\
    \ IP transmission units, the 576 octet maximum IPX packet\n   size may become\
    \ a liability.  For this reason, it is recommended that\n   the IPX maximum transmission\
    \ unit size be configurable in\n   implementations of this memo.\n"
- title: Security Issues
  contents:
  - "Security Issues\n   Using a wide-area, general purpose network such as an IP\
    \ internet in\n   a position normally occupied by physical cabling introduces\
    \ some\n   security problems not normally encountered in IPX internetworks.\n\
    \   Normal media are typically protected physically from outside access;\n   IP\
    \ internets typically invite outside access.\n   The general effect is that the\
    \ security of the entire IPX\n   internetwork is only as good as the security\
    \ of the entire IP\n   internet through which it tunnels.  The following broad\
    \ classes of\n   attacks are possible:\n   1)  Unauthorized IPX clients can gain\
    \ access to resources through\n       normal access control attacks such as password\
    \ cracking.\n   2)  Unauthorized IPX gateways can divert IPX traffic to unintended\n\
    \       routes.\n   3)  Unauthorized agents can monitor and manipulate IPX traffic\n\
    \       flowing over physical media used by the IP internet and under\n      \
    \ control of the agent.\n   To a large extent, these security risks are typical\
    \ of the risks\n   facing any other application using an IP internet.  They are\n\
    \   mentioned here only because IPX is not normally suspicious of its\n   media.\
    \  IPX network administrators will need to be aware of these\n   additional security\
    \ risks.\n"
- title: Assigned Numbers
  contents:
  - "Assigned Numbers\n   The Internet Assigned Numbers Authority assigns well-known\
    \ UDP port\n   numbers.  It has assigned port number 213 decimal to the IPX\n\
    \   encapsulation technique described in this memo [5].\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This encapsulation technique was developed independently\
    \ by Schneider\n   & Koch and by Novell.  I'd like to thank Thomas Ruf of Schneider\
    \ &\n   Koch for reviewing this memo to confirm its agreement with the\n   Schneider\
    \ & Koch implementation and also for his other valuable\n   suggestions.\n"
- title: References
  contents:
  - "References\n   [1] Xerox, Corp., \"Internet Transport Protocols\", XSIS 028112,\
    \ Xerox\n       Corporation, December 1981.\n   [2] Postel, J., \"User Datagram\
    \ Protocol\", RFC 768, USC/Information\n       Sciences Institute, August 1980.\n\
    \   [3] Postel, J., \"Internet Protocol\", RFC 791, DARPA, September 1981.\n \
    \  [4] Deering, S., \"Host Extensions for IP Multicasting\", RFC 1112,\n     \
    \  Stanford University, August 1989.\n   [5] Reynolds, J., and J. Postel, \"Assigned\
    \ Numbers\", RFC-1060,\n       USC/Information Sciences Institute, March 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   See the \"Security Issues\" section above.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Don Provan\n   Novell, Inc.\n   2180 Fortune Drive\n   San\
    \ Jose, California, 95131\n   Phone: (408)473-8440\n   EMail: donp@Novell.Com\n"
