- contents:
  - '   Session Description Protocol (SDP) Media Capabilities Negotiation

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Session Description Protocol (SDP) capability negotiation provides
    a\n   general framework for indicating and negotiating capabilities in SDP.\n
    \  The base framework defines only capabilities for negotiating\n   transport
    protocols and attributes.  This documents extends the\n   framework by defining
    media capabilities that can be used to\n   negotiate media types and their associated
    parameters.\n   This document updates the IANA Considerations of RFC 5939.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6871.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................4\n   3.
    SDP Media Capabilities ..........................................6\n      3.1.
    Requirements ...............................................6\n      3.2. Solution
    Overview ..........................................7\n      3.3. New Capability
    Attributes .................................13\n           3.3.1. The Media Format
    Capability Attributes .............13\n           3.3.2. The Media Format Parameter
    Capability Attribute ....16\n           3.3.3. The Media-Specific Capability Attribute
    ............19\n           3.3.4. New Configuration Parameters .......................21\n
    \          3.3.5. The Latent Configuration Attribute .................23\n           3.3.6.
    Enhanced Potential Configuration Attribute .........25\n           3.3.7. Substitution
    of Media Payload Type Numbers\n                  in Capability ......................................29\n
    \          3.3.8. The Session Capability Attribute ...................30\n      3.4.
    Offer/Answer Model Extensions .............................35\n           3.4.1.
    Generating the Initial Offer .......................35\n           3.4.2. Generating
    the Answer ..............................39\n           3.4.3. Offerer Processing
    of the Answer ...................43\n           3.4.4. Modifying the Session ..............................43\n
    \  4. Examples .......................................................44\n      4.1.
    Alternative Codecs ........................................44\n      4.2. Alternative
    Combinations of Codecs (Session\n           Configurations) ...........................................47\n
    \     4.3. Latent Media Streams ......................................47\n   5.
    IANA Considerations ............................................49\n      5.1.
    New SDP Attributes ........................................49\n      5.2. New
    SDP Capability Negotiation Option Tag .................50\n      5.3. SDP Capability
    Negotiation Configuration\n           Parameters Registry .......................................50\n
    \     5.4. SDP Capability Negotiation Configuration Parameter\n           Registrations
    .............................................52\n   6. Security Considerations
    ........................................52\n   7. Acknowledgements ...............................................53\n
    \  8. References .....................................................54\n      8.1.
    Normative References ......................................54\n      8.2. Informative
    References ....................................54\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   \"Session Description Protocol (SDP) Capability Negotiation\"
    [RFC5939]\n   provides a general framework for indicating and negotiating\n   capabilities
    in SDP [RFC4566].  The base framework defines only\n   capabilities for negotiating
    transport protocols and attributes.\n   RFC 5939 [RFC5939] lists some of the issues
    with the current SDP\n   capability negotiation process.  An additional real-life
    problem is\n   to be able to offer one media stream (e.g., audio) but list the\n
    \  capability to support another media stream (e.g., video) without\n   actually
    offering it concurrently.\n   In this document, we extend the framework by defining
    media\n   capabilities that can be used to indicate and negotiate media types\n
    \  and their associated format parameters.  This document also adds the\n   ability
    to declare support for media streams, the use of which can be\n   offered and
    negotiated later, and the ability to specify session\n   configurations as combinations
    of media stream configurations.  The\n   definitions of new attributes for media
    capability negotiation are\n   chosen to make the translation from these attributes
    to\n   \"conventional\" SDP [RFC4566] media attributes as straightforward as\n
    \  possible in order to simplify implementation.  This goal is intended\n   to
    reduce processing in two ways: each proposed configuration in an\n   offer may
    be easily translated into a conventional SDP media stream\n   record for processing
    by the receiver and the construction of an\n   answer based on a selected proposed
    configuration would be\n   straightforward.\n   This document updates RFC 5939
    [RFC5939] by updating the IANA\n   considerations.  All other extensions defined
    in this document are\n   considered extensions above and beyond RFC 5939 [RFC5939].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119]
    and\n   indicate requirement levels for compliant implementations.\n   Actual
    Configuration: An actual configuration specifies which\n   combinations of SDP
    session parameters and media stream components\n   can be used in the current
    offer/answer exchange and with what\n   parameters.  Use of an actual configuration
    does not require any\n   further negotiation in the offer/answer exchange.  See
    RFC 5939\n   [RFC5939] for further details.\n   Base Attributes: Conventional
    SDP attributes appearing in the base\n   configuration of a media block.\n   Base
    Configuration: The media configuration represented by a media\n   block exclusive
    of all the capability negotiation attributes defined\n   in this document, the
    base capability negotiation document [RFC5939],\n   or any other capability negotiation
    document.  In an offer SDP, the\n   base configuration corresponds to the actual
    configuration as defined\n   in RFC 5939 [RFC5939].\n   Conventional Attribute:
    Any SDP attribute other than those defined by\n   the series of capability negotiation
    specifications.\n   Conventional SDP: An SDP record devoid of capability negotiation\n
    \  attributes.\n   Media Format Capability: A media format, typically a media
    subtype\n   such as PCMU, H263-1998, or T38, expressed in the form of a\n   capability.\n
    \  Media Format Parameter Capability: A media format parameter (\"a=fmtp\"\n   in
    conventional SDP) expressed in the form of a capability.  The\n   media format
    parameter capability is associated with a media format\n   capability.\n   Media
    Capability: The combined set of capabilities associated with\n   expressing a
    media format and its relevant parameters (e.g., media\n   format parameters and
    media specific parameters).\n   Potential Configuration: A potential configuration
    indicates which\n   combinations of capabilities can be used for the session and
    its\n   associated media stream components.  Potential configurations are not\n
    \  ready for use; however, they are offered for potential use in the\n   current
    offer/answer exchange.  They provide an alternative that may\n   be used instead
    of the actual configuration, subject to negotiation\n   in the current offer/answer
    exchange.  See RFC 5939 [RFC5939] for\n   further details.\n   Latent Configuration:
    A latent configuration indicates which\n   combinations of capabilities could
    be used in a future negotiation\n   for the session and its associated media stream
    components.  Latent\n   configurations are neither ready for use nor offered for
    actual or\n   potential use in the current offer/answer exchange.  Latent\n   configurations
    merely inform the other side of possible\n   configurations supported by the entity.
    \ Those latent configurations\n   may be used to guide subsequent offer/answer
    exchanges, but they are\n   not offered for use as part of the current offer/answer
    exchange.\n"
  title: 2.  Terminology
- contents:
  - "3.  SDP Media Capabilities\n   The SDP capability negotiation [RFC5939] discusses
    the use of any SDP\n   [RFC4566] attribute (a=) under the attribute capability
    \"acap\".  The\n   limitations of using \"acap\" for \"fmtp\" and \"rtpmap\" in
    a potential\n   configuration are described in RFC 5939 [RFC5939]; for example,
    they\n   can be used only at the media level since they are media-level\n   attributes.
    \ RFC 5939 [RFC5939] does not provide a way to exchange\n   media-level capabilities
    prior to the actual offer of the associated\n   media stream.  This section provides
    an overview of extensions\n   providing an SDP media capability negotiation solution
    offering more\n   robust capabilities negotiation.  This is followed by definitions
    of\n   new SDP attributes for the solution and its associated updated\n   offer/answer
    procedures [RFC3264].\n"
  - contents:
    - "3.1.  Requirements\n   The capability negotiation extensions requirements considered
      herein\n   are as follows.\n   REQ-01:  Support the specification of alternative
      (combinations of)\n            media formats (codecs) in a single media block.\n
      \  REQ-02:  Support the specification of alternative media format\n            parameters
      for each media format.\n   REQ-03:  Retain backward compatibility with conventional
      SDP.  Ensure\n            that each and every offered configuration can be easily\n
      \           translated into a corresponding SDP media block expressed\n            with
      conventional SDP lines.\n   REQ-04:  Ensure that the scheme operates within
      the offer/answer\n            model in such a way that media formats and parameters
      can be\n            agreed upon with a single exchange.\n   REQ-05:  Provide
      the ability to express offers in such a way that the\n            offerer can
      receive media as soon as the offer is sent.\n            (Note that the offerer
      may not be able to render received\n            media prior to exchange of keying
      material.)\n   REQ-06:  Provide the ability to offer latent media configurations
      for\n            future negotiation.\n   REQ-07:  Provide reasonable efficiency
      in the expression of\n            alternative media formats and/or format parameters,\n
      \           especially in those cases in which many combinations of\n            options
      are offered.\n   REQ-08:  Retain the extensibility of the base capability negotiation\n
      \           mechanism.\n   REQ-09:  Provide the ability to specify acceptable
      combinations of\n            media streams and media formats.  For example,
      offer a PCMU\n            audio stream with an H264 video stream or a G729 audio\n
      \           stream with an H263 video stream.  This ability would give\n            the
      offerer a means to limit processing requirements for\n            simultaneous
      streams.  This would also permit an offer to\n            include the choice
      of an audio/T38 stream or an image/T38\n            stream, but not both.\n
      \  Other possible extensions have been discussed, but have not been\n   treated
      in this document.  They may be considered in the future.\n   Three such extensions
      are:\n   FUT-01:  Provide the ability to mix, or change, media types within
      a\n            single media block.  Conventional SDP does not support this\n
      \           capability explicitly; the usual technique is to define a\n            media
      subtype that represents the actual format within the\n            nominal media
      type.  For example, T.38 FAX as an alternative\n            to audio/PCMU within
      an audio stream is identified as\n            audio/T38; a separate FAX stream
      would use image/T38.\n   FUT-02:  Provide the ability to support multiple transport
      protocols\n            within an active media stream without reconfiguration.
      \ This\n            is not explicitly supported by conventional SDP.\n   FUT-03:
      \ Provide capability negotiation attributes for all media-\n            level
      SDP line types in the same manner as already done for\n            the attribute
      type, with the exception of the media line\n            type itself.  The media
      line type is handled in a special\n            way to permit compact expression
      of media coding/format\n            options.  The line types are bandwidth (\"b=\"),
      information\n            (\"i=\"), connection data (\"c=\"), and, possibly,
      the\n            deprecated encryption key (\"k=\").\n"
    title: 3.1.  Requirements
  - contents:
    - "3.2.  Solution Overview\n   The solution consists of new capability attributes
      corresponding to\n   conventional SDP line types, new parameters for the \"pcfg\",
      \"acfg\",\n   and the new \"lcfg\" attributes extending the base attributes
      from RFC\n   5939 [RFC5939], and a use of the \"pcfg\" attribute to return\n
      \  capability information in the SDP answer.\n   Several new attributes are
      defined in a manner that can be related to\n   the capabilities specified in
      a media line, and its corresponding\n   \"rtpmap\" and \"fmtp\" attributes.\n
      \  o  A new attribute (\"a=rmcap\") defines RTP-based media format\n      capabilities
      in the form of a media subtype (e.g., \"PCMU\"), and\n      its encoding parameters
      (e.g., \"/8000/2\").  Each resulting media\n      format type/subtype capability
      has an associated handle called a\n      media capability number.  The encoding
      parameters are as specified\n      for the \"rtpmap\" attribute defined in SDP
      [RFC4566], without the\n      payload type number part.\n   o  A new attribute
      (\"a=omcap\") defines other (non-RTP-based) media\n      format capabilities
      in the form of a media subtype only (e.g.,\n      \"T38\").  Each resulting
      media format type/subtype capability has\n      an associated handle called
      a media capability number.\n   o  A new attribute (\"a=mfcap\") specifies media
      format parameters\n      associated with one or more media format capabilities.
      \ The\n      \"mfcap\" attribute is used primarily to associate the media format\n
      \     parameters normally carried in the \"fmtp\" attribute.  Note that\n      media
      format parameters can be used with RTP and non-RTP-based\n      media formats.\n
      \  o  A new attribute (\"a=mscap\") specifies media parameters associated\n
      \     with one or more media format capabilities.  The \"mscap\" attribute\n
      \     is used to associate capabilities with attributes other than\n      \"fmtp\"
      or \"rtpmap\", for example, the \"rtcp-fb\" attribute defined\n      in RFC
      4585 [RFC4585].\n   o  A new attribute (\"a=lcfg\") specifies latent media stream\n
      \     configurations when no corresponding media line (\"m=\") is offered.\n
      \     An example is the offer of latent configurations for video even\n      though
      no video is currently offered.  If the peer indicates\n      support for one
      or more offered latent configurations, the\n      corresponding media stream(s)
      may be added via a new offer/answer\n      exchange.\n   o  A new attribute
      (\"a=sescap\") is used to specify an acceptable\n      combination of simultaneous
      media streams and their configurations\n      as a list of potential and/or
      latent configurations.\n   New parameters are defined for the potential configuration
      (\"pcfg\"),\n   latent configuration (\"lcfg\"), and accepted configuration
      (\"acfg\")\n   attributes to associate the new attributes with particular\n
      \  configurations.\n   o  A new parameter type (\"m=\") is added to the potential\n
      \     configuration (\"a=pcfg:\") attribute and the actual configuration\n      (\"a=acfg:\")
      attribute defined in RFC 5939 [RFC5939] and to the new\n      latent configuration
      (\"a=lcfg:\") attribute.  This permits\n      specification of media capabilities
      (including their associated\n      parameters) and combinations thereof for
      the configuration.  For\n      example, the \"a=pcfg:\" line might specify PCMU
      and telephone\n      events [RFC4733] or G.729B and telephone events as acceptable\n
      \     configurations.  The \"a=acfg:\" line in the answer would specify\n      the
      configuration chosen.\n   o  A new parameter type (\"pt=\") is added to the
      potential\n      configuration, actual configuration, and latent configuration\n
      \     attributes.  This parameter associates RTP payload type numbers\n      with
      the referenced RTP-based media format capabilities and is\n      appropriate
      only when the transport protocol uses RTP.\n   o  A new parameter type (\"mt=\")
      is used to specify the media type for\n      latent configurations.\n   Special
      processing rules are defined for capability attribute\n   arguments in order
      to reduce the need to replicate essentially\n   identical attribute lines for
      the base configuration and potential\n   configurations.\n   o  A substitution
      rule is defined for any capability attribute to\n      permit the replacement
      of the (escaped) media capability number\n      with the media format identifier
      (e.g., the payload type number in\n      audio/video profiles).\n   o  Replacement
      rules are defined for the conventional SDP equivalents\n      of the \"mfcap\"
      and \"mscap\" capability attributes.  This reduces\n      the necessity to use
      the deletion qualifier in the \"a=pcfg\"\n      parameter in order to ignore
      \"rtpmap\", \"fmtp\", and certain other\n      attributes in the base configuration.\n
      \  o  An argument concatenation rule is defined for \"mfcap\" attributes\n      that
      refer to the same media capability number.  This makes it\n      convenient
      to combine format options concisely by associating\n      multiple mfcap lines
      with multiple media format capabilities.\n   This document extends the base
      protocol extensions to the\n   offer/answer model that allow for capabilities
      and potential\n   configurations to be included in an offer.  Media capabilities\n
      \  constitute capabilities that can be used in potential and latent\n   configurations.
      \ Whereas potential configurations constitute\n   alternative offers that may
      be accepted by the answerer instead of\n   the actual configuration(s) included
      in the \"m=\" line(s) and\n   associated parameters, latent configurations merely
      inform the other\n   side of possible configurations supported by the entity.
      \ Those\n   latent configurations may be used to guide subsequent offer/answer\n
      \  exchanges, but they are not part of the current offer/answer\n   exchange.\n
      \  The mechanism is illustrated by the offer/answer exchange below,\n   where
      Alice sends an offer to Bob:\n                   Alice                            Bob\n
      \                 | (1) Offer (SRTP and RTP)         |\n                  |--------------------------------->|\n
      \                 |                                  |\n                  |
      (2) Answer (RTP)                 |\n                  |<---------------------------------|\n
      \                 |                                  |\n   Alice's offer includes
      RTP and Secure Real-time Transport Protocol\n   (SRTP) as alternatives.  RTP
      is the default, but SRTP is the\n   preferred one (long lines are folded to
      fit the margins):\n      v=0\n      o=- 25678 753849 IN IP4 192.0.2.1\n      s=\n
      \     c=IN IP4 192.0.2.1\n      t=0 0\n      a=creq:med-v0\n      m=audio 3456
      RTP/AVP 0 18\n      a=tcap:1 RTP/SAVP RTP/AVP\n      a=rtpmap:0 PCMU/8000/1\n
      \     a=rtpmap:18 G729/8000/1\n      a=fmtp:18 annexb=yes\n      a=rmcap:1,4
      G729/8000/1\n      a=rmcap:2 PCMU/8000/1\n      a=rmcap:5 telephone-event/8000\n
      \     a=mfcap:1 annexb=no\n      a=mfcap:4 annexb=yes\n      a=mfcap:5 0-11\n
      \     a=acap:1 crypto:1 AES_CM_128_HMAC_SHA1_32 \\\n      inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n
      \     a=pcfg:1 m=4,5|1,5 t=1 a=1 pt=1:100,4:101,5:102\n      a=pcfg:2 m=2 t=1
      a=1 pt=2:103\n      a=pcfg:3 m=4 t=2 pt=4:18\n   The required base and extensions
      are provided by the \"a=creq\"\n   attribute defined in RFC 5939 [RFC5939],
      with the option tag\n   \"med-v0\", which indicates that the extension framework
      defined here\n   must be supported.  The base-level capability negotiation support\n
      \  (\"cap-v0\" [RFC5939]) is implied since it is required for the\n   extensions.\n
      \  The \"m=\" line indicates that Alice is offering to use plain RTP with\n
      \  PCMU or G.729B.  The media line implicitly defines the default\n   transport
      protocol (RTP/AVP in this case) and the default actual\n   configuration.\n
      \  The \"a=tcap:1\" line, specified in the SDP capability negotiation base\n
      \  protocol [RFC5939], defines transport protocol capabilities, in this\n   case
      Secure RTP (SAVP profile) as the first option and RTP (AVP\n   profile) as the
      second option.\n   The \"a=rmcap:1,4\" line defines two G.729 RTP-based media
      format\n   capabilities, numbered 1 and 4, and their encoding rate.  The\n   capabilities
      are of media type \"audio\" and subtype G729.  Note that\n   the media subtype
      is explicitly specified here, rather than RTP\n   payload type numbers.  This
      permits the assignment of payload type\n   numbers in the media stream configuration
      specification.  In this\n   example, two G.729 subtype capabilities are defined.
      \ This permits\n   the declaration of two sets of formatting parameters for
      G.729.\n   The \"a=rmcap:2\" line defines a G.711 mu-law capability, numbered
      2.\n   The \"a=rmcap:5\" line defines an audio telephone-event capability,\n
      \  numbered 5.\n   The \"a=mfcap:1\" line specifies the \"fmtp\" formatting
      parameters for\n   capability 1 (offerer will not accept G.729 Annex B packets).\n
      \  The \"a=mfcap:4\" line specifies the \"fmtp\" formatting parameters for\n
      \  capability 4 (offerer will accept G.729 Annex B packets).\n   The \"a=mfcap:5\"
      line specifies the \"fmtp\" formatting parameters for\n   capability 5 (the
      dual-tone multi-frequency (DTMF) touchtones\n   0-9,*,#).\n   The \"a=acap:1\"
      line specified in the base protocol provides the\n   \"crypto\" attribute that
      provides the keying material for SRTP using\n   SDP security descriptions.\n
      \  The \"a=pcfg:\" attributes provide the potential configurations\n   included
      in the offer by reference to the media capabilities,\n   transport capabilities,
      attribute capabilities, and specified payload\n   type number mappings.  Three
      explicit alternatives are provided; the\n   lowest-numbered one is the preferred
      one.  The \"a=pcfg:1 ...\" line\n   specifies media capabilities 4 and 5, i.e.,
      G.729B and DTMF\n   (including their associated media format parameters), or
      media\n   capability 1 and 5, i.e., G.729 and DTMF (including their associated\n
      \  media format parameters).  Furthermore, it specifies transport\n   protocol
      capability 1 (i.e., the RTP/SAVP profile - secure RTP), and\n   the attribute
      capability 1, i.e., the \"crypto\" attribute provided.\n   Last, it specifies
      a payload type number mapping for (RTP-based)\n   media capabilities 1, 4, and
      5, thereby permitting the offerer to\n   distinguish between encrypted media
      and unencrypted media received\n   prior to receipt of the answer.\n   Use of
      unique payload type numbers in alternative configurations is\n   not required;
      codecs such as Adaptive Multi-Rate Wideband (AMR-WB)\n   [RFC4867] have the
      potential for so many combinations of options that\n   it may be impractical
      to define unique payload type numbers for all\n   supported combinations.  If
      unique payload type numbers cannot be\n   specified, then the offerer will be
      obliged to wait for the SDP\n   answer before rendering received media.  For
      SRTP using Security\n   Descriptions (SDES) inline keying [RFC4568], the offerer
      will still\n   need to receive the answer before being able to decrypt the stream.\n
      \  The second alternative (\"a=pcfg:2 ...\") specifies media capability 2,\n
      \  i.e., PCMU, under the RTP/SAVP profile, with the same SRTP key\n   material.\n
      \  The third alternative (\"a=pcfg:3 ...\") offers G.729B unsecured; its\n   only
      purpose in this example is to show a preference for G.729B over\n   PCMU.\n
      \  Per RFC 5939 [RFC5939], the media line, with any qualifying\n   attributes
      such as \"fmtp\" or \"rtpmap\", is itself considered a valid\n   configuration
      (the current actual configuration); it has the lowest\n   preference (per RFC
      5939 [RFC5939]).\n   Bob receives the SDP offer from Alice.  Bob supports G.729B,
      PCMU,\n   and telephone events over RTP, but not SRTP, hence he accepts the\n
      \  potential configuration 3 for RTP provided by Alice.  Bob generates\n   the
      following answer:\n      v=0\n      o=- 24351 621814 IN IP4 192.0.2.2\n      s=\n
      \     c=IN IP4 192.0.2.2\n      t=0 0\n      a=csup:med-v0\n      m=audio 4567
      RTP/AVP 18\n      a=rtpmap:18 G729/8000\n      a=fmtp:18 annexb=yes\n      a=acfg:3
      m=4 t=2 pt=4:18\n   Bob includes the \"a=csup\" and \"a=acfg\" attributes in
      the answer to\n   inform Alice that he can support the med-v0 level of capability\n
      \  negotiations.  Note that in this particular example, the answerer\n   supported
      the capability extensions defined here; however, had he\n   not, he would simply
      have processed the offer based on the offered\n   PCMU and G.729 codecs under
      the RTP/AVP profile only.  Consequently,\n   the answer would have omitted the
      \"a=csup\" attribute line and chosen\n   one or both of the PCMU and G.729 codecs
      instead.  The answer carries\n   the accepted configuration in the \"m=\" line
      along with corresponding\n   \"rtpmap\" and/or \"fmtp\" parameters, as appropriate.\n
      \  Note that per the base protocol, after the above, Alice MAY generate\n   a
      new offer with an actual configuration (\"m=\" line, etc.)\n   corresponding
      to the actual configuration referenced in Bob's answer\n   (not shown here).\n"
    title: 3.2.  Solution Overview
  - contents:
    - "3.3.  New Capability Attributes\n   In this section, we present the new attributes
      associated with\n   indicating the media capabilities for use by the SDP capability\n
      \  negotiation.  The approach taken is to keep things similar to the\n   existing
      media capabilities defined by the existing media\n   descriptions (\"m=\" lines)
      and the associated \"rtpmap\" and \"fmtp\"\n   attributes.  We use media subtypes
      and \"media capability numbers\" to\n   link the relevant media capability parameters.
      \ This permits the\n   capabilities to be defined at the session level and be
      used for\n   multiple streams, if desired.  For RTP-based media formats, payload\n
      \  types are then specified at the media level (see Section 3.3.4.2).\n   A
      media capability merely indicates possible support for the media\n   type and
      media format(s) and parameters in question.  In order to\n   actually use a
      media capability in an offer/answer exchange, it MUST\n   be referenced in a
      potential configuration.\n   Media capabilities, i.e., the attributes associated
      with expressing\n   media capability formats, parameters, etc., can be provided
      at the\n   session level and/or the media level.  Media capabilities provided
      at\n   the session level may be referenced in any \"pcfg\" or \"lcfg\" attribute\n
      \  at the media level (consistent with the media type), whereas media\n   capabilities
      provided at the media level may be referenced only by\n   the \"pcfg\" or \"lcfg\"
      attribute within that media stream.  In either\n   case, the scope of the <med-cap-num>
      is the entire session\n   description.  This enables each media capability to
      be uniquely\n   referenced across the entire session description (e.g., in a\n
      \  potential configuration).\n"
    - contents:
      - "3.3.1.  The Media Format Capability Attributes\n   Media subtypes can be
        expressed as media format capabilities by use\n   of the \"a=rmcap\" and \"a=omcap\"
        attributes.  The \"a=rmcap\" attribute\n   MUST be used for RTP-based media,
        whereas the \"a=omcap\" attribute\n   MUST be used for non-RTP-based (other)
        media formats.  The two\n   attributes are defined as follows:\n   a=rmcap:<media-cap-num-list>
        <encoding-name>/<clock-rate>\n                                [/<encoding-parms>]\n
        \  a=omcap:<media-cap-num-list> <format-name>\n   where <media-cap-num-list>
        is a (list of) media capability number(s)\n   used to number a media format
        capability, the <encoding name> or\n   <format-name> is the media subtype,
        e.g., H263-1998, PCMU, or T38,\n   <clock rate> is the encoding rate, and
        <encoding parms> are the media\n   encoding parameters for the media subtype.
        \ All media format\n   capabilities in the list are assigned to the same media
        type/subtype.\n   Each occurrence of the \"rmcap\" and \"omcap\" attribute
        MUST use unique\n   values in their <media-cap-num-list>; the media capability
        numbers\n   are shared between the two attributes and the numbers MUST be
        unique\n   across the entire SDP session.  In short, the \"rmcap\" and \"omcap\"\n
        \  attributes define media format capabilities and associate them with a\n
        \  media capability number in the same manner as the \"rtpmap\" attribute\n
        \  defines them and associates them with a payload type number.\n   Additionally,
        the attributes allow multiple capability numbers to be\n   defined for the
        media format in question by specifying a range of\n   media capability numbers.
        \ This permits the media format to be\n   associated with different media
        parameters in different\n   configurations.  When a range of capability numbers
        is specified, the\n   first (leftmost) capability number MUST be strictly
        smaller than the\n   second (rightmost), i.e., the range increases and covers
        at least two\n   numbers.\n   In ABNF [RFC5234], we have:\n   media-capability-line
        = rtp-mcap / non-rtp-mcap\n   rtp-mcap           = \"a=rmcap:\" media-cap-num-list\n
        \                          1*WSP encoding-name \"/\" clock-rate\n                           [\"/\"
        encoding-parms]\n   non-rtp-mcap       = \"a=omcap:\" media-cap-num-list 1*WSP
        format-name\n   media-cap-num-list = media-cap-num-element\n                        *(\",\"
        media-cap-num-element)\n   media-cap-num-element = media-cap-num\n                                /
        media-cap-num-range\n   media-cap-num-range = media-cap-num \"-\" media-cap-num\n
        \  media-cap-num      = NonZeroDigit *9(DIGIT)\n   encoding-name      = token
        ;defined in RFC 4566\n   clock-rate         = NonZeroDigit *9(DIGIT)\n   encoding-parms
        \    = token\n   format-name        = token ;defined in RFC 4566\n   NonZeroDigit
        \      = %x31-39    ; 1-9\n   The encoding-name, clock-rate, and encoding-params
        are as defined to\n   appear in an \"rtpmap\" attribute for each media type/subtype.
        \ Thus,\n   it is easy to convert an \"rmcap\" attribute line into one or
        more\n   \"rtpmap\" attribute lines, once a payload type number is assigned
        to a\n   media-cap-num (see Section 3.3.5).\n   The format-name is a media
        format description for non-RTP-based media\n   as defined for the <fmt> part
        of the media description (\"m=\" line) in\n   SDP [RFC4566].  In simple terms,
        it is the name of the media format,\n   e.g., \"t38\".  This form can also
        be used in cases such as Binary\n   Floor Control Protocol (BFCP) [RFC4585]
        where the fmt list in the\n   \"m=\" line is effectively ignored (BFCP uses
        \"*\").\n   The \"rmcap\" and \"omcap\" attributes can be provided at the
        session\n   level and/or the media level.  There can be more than one \"rmcap\"
        and\n   more than one \"omcap\" attribute at both the session and media levels\n
        \  (i.e., more than one of each at the session level and more than one\n   of
        each in each media description).  Media capability numbers cannot\n   include
        leading zeroes, and each media-cap-num MUST be unique within\n   the entire
        SDP record; it is used to identify that media capability\n   in potential,
        latent, and actual configurations, and in other\n   attribute lines as explained
        below.  Note that the media-cap-num\n   values are shared between the \"rmcap\"
        and \"omcap\" attributes; hence,\n   the uniqueness requirement applies to
        the union of them.  When the\n   media capabilities are used in a potential,
        latent, or actual\n   configuration, the media formats referred by those configurations\n
        \  apply at the media level, irrespective of whether the media\n   capabilities
        themselves were specified at the session or media level.\n   In other words,
        the media capability applies to the specific media\n   description associated
        with the configuration that invokes it.\n   For example:\n      v=0\n      o=-
        24351 621814 IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n      t=0
        0\n      a=rmcap:1 L16/8000/1\n      a=rmcap:2 L16/16000/2\n      a=rmcap:3
        H263-1998/90000\n      a=omcap:4 example\n      m=audio 54320 RTP/AVP 0\n
        \     a=pcfg:1 m=1|2, pt=1:99,2:98\n      m=video 66544 RTP/AVP 100\n      a=rtpmap:100
        H264/90000\n      a=pcfg:10 m=3 pt=3:101\n      a=tcap:1 TCP\n      a=pcfg:11
        m=4 t=1\n"
      title: 3.3.1.  The Media Format Capability Attributes
    - contents:
      - "3.3.2.  The Media Format Parameter Capability Attribute\n   This attribute
        is used to associate media format specific parameters\n   with one or more
        media format capabilities.  The form of the\n   attribute is\n      a=mfcap:<media-caps>
        <list of parameters>\n   where <media-caps> permits the list of parameters
        to be associated\n   with one or more media format capabilities and the format
        parameters\n   are specific to the type of media format.  The mfcap lines
        map to a\n   single traditional SDP \"fmtp\" attribute line (one for each
        entry in\n   <media-caps>) of the form\n      a=fmtp:<fmt> <list of parameters>\n
        \  where <fmt> is the media format parameter defined in RFC 4566\n   [RFC4566],
        as appropriate for the particular media stream.  The\n   \"mfcap\" attribute
        MUST be used to encode attributes for media\n   capabilities, which would
        conventionally appear in an \"fmtp\"\n   attribute.  The existing \"acap\"
        attribute MUST NOT be used to encode\n   \"fmtp\" attributes.\n   The \"mfcap\"
        attribute adheres to SDP [RFC4566] attribute production\n   rules with\n      media-format-parameter-capability
        =\n             \"a=mfcap:\" media-cap-num-list 1*WSP fmt-specific-param-list\n
        \     fmt-specific-param-list = text ; defined in RFC 4566\n   Note that media
        format parameters can be used with RTP-based and non-\n   RTP-based media
        formats.\n"
      - contents:
        - "3.3.2.1.  Media Format Parameter Concatenation Rule\n   The appearance
          of media subtypes with a large number of formatting\n   options (e.g., AMR-WB
          [RFC4867]), coupled with the restriction that\n   only a single \"fmtp\"
          attribute can appear per media format, suggests\n   that it is useful to
          create a combining rule for \"mfcap\" parameters\n   that are associated
          with the same media capability number.\n   Therefore, different mfcap lines
          MAY include the same media-cap-num\n   in their media-cap-num-list.  When
          a particular media capability is\n   selected for processing, the parameters
          from each mfcap line that\n   references the particular capability number
          in its media-cap-num-list\n   are concatenated together via \";\", in the
          order the \"mfcap\"\n   attributes appear in the SDP record, to form the
          equivalent of a\n   single \"fmtp\" attribute line.  This permits one to
          define a separate\n   mfcap line for a single parameter and value that is
          to be applied to\n   each media capability designated in the media-cap-num-list.
          \ This\n   provides a compact method to specify multiple combinations of
          format\n   parameters when using codecs with multiple format options.  Note
          that\n   order-dependent parameters SHOULD be placed in a single mfcap line
          to\n   avoid possible problems with line rearrangement by a middlebox.\n
          \  Format parameters are not parsed by SDP; their content is specific to\n
          \  the media type/subtype.  When format parameters for a specific media\n
          \  capability are combined from multiple \"a=mfcap\" lines that reference\n
          \  that media capability, the format-specific parameters are\n   concatenated
          together and separated by \";\" for construction of the\n   corresponding
          format attribute (\"a=fmtp\").  The resulting format\n   attribute will
          look something like the following (without line\n   breaks):\n        a=fmtp:<fmt>
          <fmt-specific-param-list1>;\n                     <fmt-specific-param-list2>;\n
          \                    ...\n   where <fmt> depends on the transport protocol
          in the manner defined\n   in RFC 4566 [RFC4566].  SDP cannot assess the
          legality of the\n   resulting parameter list in the \"a=fmtp\" line; the
          user must take\n   care to ensure that legal parameter lists are generated.\n
          \  The \"mfcap\" attribute can be provided at the session level and the\n
          \  media level.  There can be more than one \"mfcap\" attribute at the\n
          \  session or media level.  The unique media-cap-num is used to\n   associate
          the parameters with a media capability.\n   As a simple example, a G.729
          capability is, by default, considered to\n   support comfort noise as defined
          by Annex B.  Capabilities for G.729\n   with and without comfort noise support
          may thus be defined by:\n      a=rmcap:1,2 G729/8000\n      a=mfcap:2 annexb:no\n
          \  Media capability 1 supports G.729 with Annex B, whereas media\n   capability
          2 supports G.729 without Annex B.\n   Example for H.263 video:\n      a=rmcap:1
          H263-1998/90000\n      a=rmcap:2 H263-2000/90000\n      a=mfcap:1 CIF=4;QCIF=2;F=1;K=1\n
          \     a=mfcap:2 profile=2;level=2.2\n   Finally, for six format combinations
          of the Adaptive Multi-Rate\n   codec:\n      a=rmcap:1-3 AMR/8000/1\n      a=rmcap:4-6
          AMR-WB/16000/1\n      a=mfcap:1,2,3,4 mode-change-capability=1\n      a=mfcap:5,6
          mode-change-capability=2\n      a=mfcap:1,2,3,5 max-red=220\n      a=mfcap:3,4,5,6
          octet-align=1\n      a=mfcap:1,3,5 mode-set=0,2,4,7\n      a=mfcap:2,4,6
          mode-set=0,3,5,6\n   So that AMR codec #1, when specified in a \"pcfg\"
          attribute within an\n   audio stream block (and assigned payload type number
          98) as in:\n      a=pcfg:1 m=1 pt=1:98\n   is essentially equivalent to
          the following:\n      m=audio 49170 RTP/AVP 98\n      a=rtpmap:98 AMR/8000/1\n
          \     a=fmtp:98 mode-change-capability=1; \\\n      max-red=220; mode-set=0,2,4,7\n
          \  and AMR codec #4 with payload type number 99, depicted by the\n   potential
          configuration:\n      a=pcfg:4 m=4, pt=4:99\n   is equivalent to the following:\n
          \     m=audio 49170 RTP/AVP 99\n      a=rtpmap:99 AMR-WB/16000/1\n      a=fmtp:99
          mode-change-capability=1; octet-align=1; \\\n      mode-set=0,3,5,6\n   and
          so on for the other four combinations.  SDP could thus convert\n   the media
          capabilities specifications into one or more alternative\n   media stream
          specifications, one of which can be chosen for the\n   answer.\n"
        title: 3.3.2.1.  Media Format Parameter Concatenation Rule
      title: 3.3.2.  The Media Format Parameter Capability Attribute
    - contents:
      - "3.3.3.  The Media-Specific Capability Attribute\n   Attributes and parameters
        associated with a media format are\n   typically specified using the \"rtpmap\"
        and \"fmtp\" attributes in SDP,\n   and the similar \"rmcap\" and \"mfcap\"
        attributes in SDP media\n   capabilities.  Some SDP extensions define other
        attributes that need\n   to be associated with media formats, for example,
        the \"rtcp-fb\"\n   attribute defined in RFC 4585 [RFC4585].  Such media-specific\n
        \  attributes, beyond the \"rtpmap\" and \"fmtp\" attributes, may be\n   associated
        with media capability numbers via a new media-specific\n   attribute, \"mscap\",
        of the following form:\n         a=mscap:<media caps star> <att field> <att
        value>\n   where <media caps star> is a (list of) media capability number(s),\n
        \  <att field> is the attribute name, and <att value> is the value field\n
        \  for the named attribute.  Note that the media capability numbers\n   refer
        to media format capabilities specified elsewhere in the SDP\n   (\"rmcap\"
        and/or \"omcap\").  If a range of capability numbers is\n   specified, the
        first (leftmost) capability number MUST be strictly\n   smaller than the second
        (rightmost).  The media capability numbers\n   may include a wildcard (\"*\"),
        which will be used instead of any\n   payload type mappings in the resulting
        SDP (see, e.g., RFC 4585\n   [RFC4585] and the example below).  In ABNF, we
        have:\n          media-specific-capability = \"a=mscap:\"\n                                       media-caps-star\n
        \                                      1*WSP att-field ; from RFC 4566\n                                       1*WSP
        att-value ; from RFC 4566\n          media-caps-star           =  media-cap-star-element\n
        \                                        *(\",\" media-cap-star-element)\n
        \         media-cap-star-element    = (media-cap-num [wildcard])\n                                    /
        (media-cap-num-range [wildcard])\n          wildcard                  = \"*\"\n
        \  Given an association between a media capability and a payload type\n   number
        as specified by the \"pt=\" parameters in a \"pcfg\" attribute\n   line, a
        mscap line may be translated easily into a conventional SDP\n   attribute
        line of the form:\n      a=<att field>\":\"<fmt> <att value> ; <fmt> defined
        in SDP [RFC4566]\n   A resulting attribute that is not a legal SDP attribute,
        as specified\n   by RFC 4566, MUST be ignored by the receiver.\n   If a media
        capability number (or range) contains a wildcard character\n   at the end,
        any payload type mapping specified for that media-\n   specific capability
        (or range of capabilities) will use the wildcard\n   character in the resulting
        SDP instead of the payload type specified\n   in the payload type mapping
        (\"pt\" parameter) in the configuration\n   attribute.\n   A single mscap
        line may refer to multiple media capabilities by use\n   of a capability number
        range; this is equivalent to multiple mscap\n   lines, each with the same
        attribute values (but different media\n   capability numbers), one line per
        media capability.\n   Multiple mscap lines may refer to the same media capability,
        but,\n   unlike the \"mfcap\" attribute, no concatenation operation is defined.\n
        \  Hence, multiple mscap lines applied to the same media capability are\n
        \  equivalent to multiple lines of the specified attribute in a\n   conventional
        media record.\n   Here is an example with the \"rtcp-fb\" attribute, modified
        from an\n   example in RFC 5104 [RFC5104] (with the session level and audio
        media\n   omitted).  If the offer contains a media block like the following\n
        \  (note the wildcard character),\n      m=video 51372 RTP/AVP 98\n      a=rtpmap:98
        H263-1998/90000\n      a=tcap:1 RTP/AVPF\n      a=rmcap:1 H263-1998/90000\n
        \     a=mscap:1 rtcp-fb ccm tstr\n      a=mscap:1 rtcp-fb ccm fir\n      a=mscap:1*
        rtcp-fb ccm tmmbr smaxpr=120\n      a=pcfg:1 t=1 m=1 pt=1:98\n   and if the
        proposed configuration is chosen, then the equivalent\n   media block would
        look like the following\n      m=video 51372 RTP/AVPF 98\n      a=rtpmap:98
        H263-1998/90000\n      a=rtcp-fb:98 ccm tstr\n      a=rtcp-fb:98 ccm fir\n
        \     a=rtcp-fb:* ccm tmmbr smaxpr=120\n"
      title: 3.3.3.  The Media-Specific Capability Attribute
    - contents:
      - "3.3.4.  New Configuration Parameters\n   Along with the new attributes for
        media capabilities, new extension\n   parameters are defined for use in the
        potential configuration, the\n   actual configuration, and/or the new latent
        configuration defined in\n   Section 3.3.5.\n"
      - contents:
        - "3.3.4.1.  The Media Configuration Parameter (m=)\n   The media configuration
          parameter is used to specify the media\n   format(s) and related parameters
          for a potential, actual, or latent\n   configuration.  Adhering to the ABNF
          for extension-config-list in RFC\n   5939 [RFC5939] with\n             ext-cap-name
          = \"m\"\n             ext-cap-list = media-cap-num-list\n                            [*(BAR
          media-cap-num-list)]\n   we have\n              media-config-list = [\"+\"]
          \"m=\" media-cap-num-list\n                                             *(BAR
          media-cap-num-list)\n                                   ;BAR is defined
          in RFC 5939\n                                   ;media-cap-num-list is defined
          above\n   Alternative media configurations are separated by a vertical bar\n
          \  (\"|\").  The alternatives are ordered by preference, most-preferred\n
          \  first.  When media capabilities are not included in a potential\n   configuration
          at the media level, the media type and media format\n   from the associated
          \"m=\" line will be used.  The use of the plus sign\n   (\"+\") is described
          in RFC 5939.\n"
        title: 3.3.4.1.  The Media Configuration Parameter (m=)
      - contents:
        - "3.3.4.2.  The Payload Type Number Mapping Parameter (pt=)\n   The payload
          type number mapping parameter is used to specify the\n   payload type number
          to be associated with each RTP-based media format\n   in a potential, actual,
          or latent configuration.  We define the\n   payload type number mapping
          parameter, payload-number-config-list, in\n   accordance with the extension-config-list
          format defined in RFC 5939\n   [RFC5939].  In ABNF:\n   payload-number-config-list
          = [\"+\"] \"pt=\" media-map-list\n   media-map-list      = media-map *(\",\"
          media-map)\n   media-map           = media-cap-num \":\" payload-type-number\n
          \                           ; media-cap-num is defined in Section 3.3.1\n
          \  payload-type-number = NonZeroDigit *2(DIGIT) ; RTP payload\n                                                ;
          type number\n   The example in Section 3.3.7 shows how the parameters from
          the rmcap\n   line are mapped to payload type numbers from the \"pcfg\"
          \"pt\"\n   parameter.  The use of the plus sign (\"+\") is described in
          RFC 5939\n   [RFC5939].\n   A latent configuration represents a future capability;
          hence, the\n   \"pt=\" parameter is not directly meaningful in the \"lcfg\"
          attribute\n   because no actual media session is being offered or accepted.
          \ It is\n   permitted in order to tie any payload type number parameters
          within\n   attributes to the proper media format.  A primary example is
          the case\n   of format parameters for the Redundant Audio Data (RED) [RFC2198]\n
          \  payload, which are payload type numbers.  Specific payload type\n   numbers
          used in a latent configuration MAY be interpreted as\n   suggestions to
          be used in any future offer based on the latent\n   configuration, but they
          are not binding; the offerer and/or answerer\n   may use any payload type
          numbers each deems appropriate.  The use of\n   explicit payload type numbers
          for latent configurations can be\n   avoided by use of the parameter substitution
          rule of Section 3.3.7.\n   Future extensions are also permitted.  Note that
          leading zeroes are\n   not permitted.\n"
        title: 3.3.4.2.  The Payload Type Number Mapping Parameter (pt=)
      - contents:
        - "3.3.4.3.  The Media Type Parameter\n   When a latent configuration is specified
          (always at the media level),\n   indicating the ability to support an additional
          media stream, it is\n   necessary to specify the media type (audio, video,
          etc.)  as well as\n   the format and transport type.  The media type parameter
          is defined\n   in ABNF as\n            media-type = [\"+\"] \"mt=\" media;
          media defined in RFC 4566\n   At present, the media-type parameter is used
          only in the latent\n   configuration attribute, and the use of the \"+\"
          prefix to specify\n   that the entire attribute line is to be ignored if
          the mt= parameter\n   is not understood is unnecessary.  However, if the
          media-type\n   parameter is later added to an existing capability attribute
          such as\n   \"pcfg\", then the \"+\" would be useful.  The media format(s)
          and\n   transport type(s) are specified using the media configuration\n
          \  parameter (\"+m=\") defined above, and the transport parameter (\"t=\")\n
          \  defined in RFC 5939 [RFC5939], respectively.\n"
        title: 3.3.4.3.  The Media Type Parameter
      title: 3.3.4.  New Configuration Parameters
    - contents:
      - "3.3.5.  The Latent Configuration Attribute\n   One of the goals of this work
        is to permit the exchange of\n   supportable media configurations in addition
        to those offered or\n   accepted for immediate use.  Such configurations are
        referred to as\n   \"latent configurations\".  For example, a party may offer
        to establish\n   a session with an audio stream, and, at the same time, announce
        its\n   ability to support a video stream as part of the same session.  The\n
        \  offerer can supply its video capabilities by offering one or more\n   latent
        video configurations along with the media stream for audio;\n   the responding
        party may indicate its ability and willingness to\n   support such a video
        session by returning a corresponding latent\n   configuration.\n   Latent
        configurations returned in SDP answers MUST match offered\n   latent configurations
        (or parameter subsets thereof).  Therefore, it\n   is appropriate for the
        offering party to announce most, if not all,\n   of its capabilities in the
        initial offer.  This choice has been made\n   in order to keep the size of
        the answer more compact by not requiring\n   acap, rmcap, tcap, etc.  lines
        in the answer.\n   Latent configurations may be announced by use of the latent\n
        \  configuration attribute, which is defined in a manner very similar to\n
        \  the potential configuration attribute.  The latent configuration\n   attribute
        combines the properties of a media line and a potential\n   configuration.
        \ A latent configuration MUST include a media type\n   (mt=) and a transport
        protocol configuration parameter since the\n   latent configuration is independent
        of any media line present.  In\n   most cases, the media configuration (m=)
        parameter needs to be\n   present as well (see Section 4 for examples).  The
        \"lcfg\" attribute\n   is a media-level attribute.\n      The \"lcfg\" attribute
        is defined as a media-level attribute since\n      it specifies a possible
        future media stream.  However, the \"lcfg\"\n      attribute is not necessarily
        related to the media description\n      within which it is provided.  Session
        capability attributes\n      (\"a=sescap\") may be used to indicate supported
        media stream\n      configurations.\n   Each media line in an SDP description
        represents an offered\n   simultaneous media stream, whereas each latent configuration\n
        \  represents an additional stream that may be negotiated in a future\n   offer/answer
        exchange.  Session capability attributes may be used to\n   determine whether
        a latent configuration may be used to form an offer\n   for an additional
        simultaneous stream or to reconfigure an existing\n   stream in a subsequent
        offer/answer exchange.\n   The latent configuration attribute is of the form:\n
        \       a=lcfg:<config-number> <latent-cfg-list>\n   which adheres to the
        SDP [RFC4566] \"attribute\" production with\n   att-field and att-value defined
        as:\n      att-field  = \"lcfg\"\n      att-value  = config-number 1*WSP lcfg-cfg-list\n
        \     config-number = NonZeroDigit *9(DIGIT)  ;DIGIT defined in RFC 5234\n
        \     lcfg-cfg-list = media-type 1*WSP pot-cfg-list\n                                  ;
        as defined in RFC 5939\n                                  ; and extended herein\n
        \  The media-type (mt=) parameter identifies the media type (audio,\n   video,
        etc.)  to be associated with the latent media stream, and it\n   MUST be present.
        \ The pot-cfg-list MUST contain a transport-protocol-\n   config-list (t=)
        parameter and a media-config-list (m=) parameter.\n   The pot-cfg-list MUST
        NOT contain more than one instance of each type\n   of parameter list.  As
        specified in RFC 5939 [RFC5939], the use of\n   the \"+\" prefix with a parameter
        indicates that the entire\n   configuration MUST be ignored if the parameter
        is not understood;\n   otherwise, the parameter itself may be ignored.\n   Media
        stream payload numbers are not assigned by a latent\n   configuration.  Assignment
        will take place if and when the\n   corresponding stream is actually offered
        via an \"m=\" line in a later\n   exchange.  The payload-number-config-list
        is included as a parameter\n   to the \"lcfg\" attribute in case it is necessary
        to tie payload\n   numbers in attribute capabilities to specific media capabilities.\n
        \  If an \"lcfg\" attribute invokes an \"acap\" attribute that appears at\n
        \  the session level, then that attribute will be expected to appear at\n
        \  the session level of a subsequent offer when and if a corresponding\n   media
        stream is offered.  Otherwise, \"acap\" attributes that appear at\n   the
        media level represent media-level attributes.  Note, however,\n   that \"rmcap\",
        omcap, \"mfcap\", \"mscap\", and \"tcap\" attributes may\n   appear at the
        session level because they always result in media-level\n   attributes or
        \"m=\" line parameters.\n   The configuration numbers for latent configurations
        do not imply a\n   preference; the offerer will imply a preference when actually\n
        \  offering potential configurations derived from latent configurations\n
        \  negotiated earlier.  Note, however, that the offerer of latent\n   configurations
        MAY specify preferences for combinations of potential\n   and latent configurations
        by use of the \"sescap\" attribute defined in\n   Section 3.3.8.  For example,
        if an SDP offer contains, say, an audio\n   stream with \"pcfg:1\", and two
        latent video configurations, \"lcfg:2\"\n   and \"lcfg:3\", then a session
        with one audio stream and one video\n   stream could be specified by including
        \"a=sescap:1 1,2|3\".  One audio\n   stream and two video streams could be
        specified by including\n   \"a=sescap:2 1,2,3\" in the offer.  In order to
        permit combinations of\n   latent and potential configurations in session
        capabilities, latent\n   configuration numbers MUST be different from those
        used for potential\n   configurations.  This restriction is especially important
        if the\n   offerer does not require cmed-v0 capability and the recipient of
        the\n   offer doesn't support it.  If the \"lcfg\" attribute is not recognized,\n
        \  the capability attributes intended to be associated with it may be\n   confused
        with those associated with a potential configuration of some\n   other media
        stream.  Note also that leading zeroes are not permitted\n   in configuration
        numbers.\n   If a cryptographic attribute, such as the SDES \"a=crypto:\"
        attribute\n   [RFC4568], is referenced by a latent configuration through an
        \"acap\"\n   attribute, any keying material required in the conventional\n
        \  attribute, such as the SDES key/salt string, MUST be included in\n   order
        to satisfy formatting rules for the attribute.  Since the\n   keying material
        will be visible but not actually used at this stage\n   (since it's a latent
        configuration), the value(s) of the keying\n   material MUST NOT be a real
        value used for real exchange of media,\n   and the receiver of the \"lcfg\"
        attribute MUST ignore the value(s).\n"
      title: 3.3.5.  The Latent Configuration Attribute
    - contents:
      - "3.3.6.  Enhanced Potential Configuration Attribute\n   The present work requires
        new extensions (parameters) for the \"pcfg\"\n   attribute defined in the
        SDP capability negotiation base protocol\n   [RFC5939].  The parameters and
        their definitions are \"borrowed\" from\n   the definitions provided for the
        latent configuration attribute in\n   Section 3.3.5.  The expanded ABNF definition
        of the \"pcfg\" attribute\n   is\n        a=pcfg: <config-number> [<pot-cfg-list>]\n
        \  where\n        config-number = 1*DIGIT ;defined in [RFC5234]\n        pot-cfg-list
        \ = pot-config *(1*WSP pot-config)\n        pot-config    =  attribute-config-list
        / ;def in [RFC5939]\n             transport-protocol-config-list / ;defined
        in [RFC5939]\n             extension-config-list / ;[RFC5939]\n             media-config-list
        / ; Section 3.3.4.1\n             payload-number-config-list ; Section 3.3.4.2\n
        \  Except for the extension-config-list, the pot-cfg-list MUST NOT\n   contain
        more than one instance of each parameter list.\n"
      - contents:
        - "3.3.6.1.  Returning Capabilities in the Answer\n   Potential and/or latent
          configuration attributes may be returned\n   within an answer SDP to indicate
          the ability of the answerer to\n   support alternative configurations of
          the corresponding stream(s).\n   For example, an offer may include multiple
          potential configurations\n   for a media stream and/or latent configurations
          for additional\n   streams.  The corresponding answer will indicate (via
          an \"acfg\"\n   attribute) the configuration accepted and used to construct
          the base\n   configuration for each active media stream in the reply, but
          the\n   reply MAY also contain potential and/or latent configuration\n   attributes,
          with parameters, to indicate which other offered\n   configurations would
          be acceptable.  This information is useful if it\n   becomes desirable to
          reconfigure a media stream, e.g., to reduce\n   resource consumption.\n
          \  When potential and/or latent configurations are returned in an\n   answer,
          all numbering MUST refer to the configuration and capability\n   attribute
          numbering of the offer.  The offered capability attributes\n   need not
          be returned in the answer.  The answer MAY include\n   additional capability
          attributes and/or configurations (with distinct\n   numbering).  The parameter
          values of any returned \"pcfg\" or \"lcfg\"\n   attributes MUST be a subset
          of those included in the offered\n   configurations and/or those added by
          the answerer; values MAY be\n   omitted only if they were indicated as alternative
          sets, or optional,\n   in the original offer.  The parameter set indicated
          in the returned\n   \"acfg\" attribute need not be repeated in a returned
          \"pcfg\" attribute.\n   The answerer MAY return more than one \"pcfg\" attribute
          with the same\n   configuration number if it is necessary to describe selected\n
          \  combinations of optional or alternative parameters.\n   Similarly, one
          or more session capability attributes (\"a=sescap\") MAY\n   be returned
          to indicate which of the offered session capabilities\n   is/are supportable
          by the answerer (see Section 3.3.8).\n   Note that, although the answerer
          MAY return capabilities beyond those\n   included by the offerer, these
          capabilities MUST NOT be used to form\n   any base level media description
          in the answer.  For this reason, it\n   is advisable for the offerer to
          include most, if not all, potential\n   and latent configurations it can
          support in the initial offer, unless\n   the size of the resulting SDP is
          a concern.  Either party MAY later\n   announce additional capabilities
          by renegotiating the session in a\n   second offer/answer exchange.\n"
        title: 3.3.6.1.  Returning Capabilities in the Answer
      - contents:
        - "3.3.6.2.  Payload Type Number Mapping\n   When media format capabilities
          defined in \"rmcap\" attributes are used\n   in potential configuration
          lines, the transport protocol uses RTP and\n   it is necessary to assign
          payload type numbers.  In some cases, it is\n   desirable to assign different
          payload type numbers to the same media\n   format capability when used in
          different potential configurations.\n   One example is when configurations
          for AVP and SAVP are offered: the\n   offerer would like the answerer to
          use different payload type numbers\n   for encrypted and unencrypted media,
          so the offerer can decide\n   whether or not to render early media that
          arrives before the answer\n   is received.\n      For example, if use of
          AVP was selected by the answerer, then\n      media received by the offerer
          is not encrypted; hence, it can be\n      played out prior to receiving
          the answer.  Conversely, if SAVP was\n      selected, cryptographic parameters
          and keying material present in\n      the answer may be needed to decrypt
          received media.  If the offer\n      configuration indicated that AVP media
          uses one set of payload\n      types and SAVP a different set, then the
          offerer will know whether\n      media received prior to the answer is encrypted
          or not by simply\n      looking at the RTP payload type number in the received
          packet.\n   This association of distinct payload type number(s) with different\n
          \  transport protocols requires a separate pcfg line for each protocol.\n
          \  Clearly, this technique cannot be used if the number of potential\n   configurations
          exceeds the number of possible payload type numbers.\n"
        title: 3.3.6.2.  Payload Type Number Mapping
      - contents:
        - "3.3.6.3.  Processing of Media-Format-Related Conventional Attributes for\n
          \         Potential Configurations\n   When media capabilities negotiation
          is employed, SDP records are\n   likely to contain conventional attributes
          such as \"rtpmap\", \"fmtp\",\n   and other media-format-related lines,
          as well as capability\n   attributes such as \"rmcap\", omcap, \"mfcap\",
          and \"mscap\" that map into\n   those conventional attributes when invoked
          by a potential\n   configuration.  In such cases, it MAY be appropriate
          to employ the\n   delete-attributes option [RFC5939] in the attribute configuration\n
          \  list parameter in order to avoid the generation of conflicting \"fmtp\"\n
          \  attributes for a particular configuration.  Any media-specific\n   attributes
          in the media block that refer to media formats not used by\n   the potential
          configuration MUST be ignored.\n   For example:\n      v=0\n      o=- 25678
          753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n
          \     a=creq:med-v0\n      m=audio 3456 RTP/AVP 0 18 100\n      a=rtpmap:100
          telephone-event\n      a=fmtp:100 0-11\n      a=rmcap:1 PCMU/8000\n      a=rmcap:2
          G729/8000\n      a=rmcap:3 telephone-event/8000\n      a=mfcap:3 0-15\n
          \     a=pcfg:1 m=2,3|1,3 a=-m pt=1:0,2:18,3:100\n      a=pcfg:2\n   In this
          example, PCMU is media capability 1, G729 is media capability\n   2, and
          telephone-event is media capability 3.  The a=pcfg:1 line\n   specifies
          that the preferred configuration is G.729 with extended\n   DTMF events,
          second is G.711 mu-law with extended DTMF events, and\n   the base media-level
          attributes are to be deleted.  Intermixing of\n   G.729, G.711, and \"commercial\"
          DTMF events is least preferred (the\n   base configuration provided by the
          \"m=\" line, which is, by default,\n   the least preferred configuration).
          \ The \"rtpmap\" and \"fmtp\"\n   attributes of the base configuration are
          replaced by the \"rmcap\" and\n   \"mfcap\" attributes when invoked by the
          proposed configuration.\n   If the preferred configuration is selected,
          the SDP answer will look\n   like the following\n      v=0\n      o=- 25678
          753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n
          \     a=csup:med-v0\n      m=audio 3456 RTP/AVP 18 100\n      a=rtpmap:100
          telephone-event/8000\n      a=fmtp:100 0-15\n      a=acfg:1 m=2,3 pt=1:0,2:18,3:100\n"
        title: 3.3.6.3.  Processing of Media-Format-Related Conventional Attributes
          for
      title: 3.3.6.  Enhanced Potential Configuration Attribute
    - contents:
      - "3.3.7.  Substitution of Media Payload Type Numbers in Capability\n        Attribute
        Parameters\n   In some cases, for example, when an RFC 2198 [RFC2198] redundancy\n
        \  audio subtype (RED) capability is defined in an \"mfcap\" attribute,\n
        \  the parameters to an attribute may contain payload type numbers.  Two\n
        \  options are available for specifying such payload type numbers.  They\n
        \  may be expressed explicitly, in which case they are bound to actual\n   payload
        types by means of the payload type number parameter (pt=) in\n   the appropriate
        potential or latent configuration.  For example, the\n   following SDP fragment
        defines a potential configuration with\n   redundant G.711 mu-law\n      m=audio
        45678 RTP/AVP 0\n      a=rtpmap:0 PCMU/8000\n      a=rmcap:1 PCMU/8000\n      a=rmcap:2
        RED/8000\n      a=mfcap:2 0/0\n      a=pcfg:1 m=2,1 pt=2:98,1:0\n   The potential
        configuration is then equivalent to\n      m=audio 45678 RTP/AVP 98 0\n      a=rtpmap:0
        PCMU/8000\n      a=rtpmap:98 RED/8000\n      a=fmtp:98 0/0\n   A more general
        mechanism is provided via the parameter substitution\n   rule.  When an \"mfcap\",
        \"mscap\", or \"acap\" attribute is processed,\n   its arguments will be scanned
        for a payload type number escape\n   sequence of the following form (in ABNF):\n
        \     ptn-esc = \"%m=\" media-cap-num \"%\" ; defined in Section 3.3.1\n   If
        the sequence is found, the sequence is replaced by the payload\n   type number
        assigned to the media capability number, as specified by\n   the \"pt=\" parameter
        in the selected potential configuration; only\n   actual payload type numbers
        are supported -- wildcards are excluded.\n   The sequence \"%%\" (null digit
        string) is replaced by a single percent\n   sign and processing continues
        with the next character, if any.\n   For example, the above offer sequence
        could have been written as\n      m=audio 45678 RTP/AVP 0\n      a=rtpmap:0
        PCMU/8000\n      a=rmcap:1 PCMU/8000\n      a=rmcap:2 RED/8000\n      a=mfcap:2
        %m=1%/%m=1%\n      a=pcfg:1 m=2,1 pt=2:98,1:0\n   and the equivalent SDP is
        the same as above.\n"
      title: 3.3.7.  Substitution of Media Payload Type Numbers in Capability
    - contents:
      - "3.3.8.  The Session Capability Attribute\n   Potential and latent configurations
        enable offerers and answerers to\n   express a wide range of alternative configurations
        for current and\n   future negotiation.  However, in practice, it may not
        be possible to\n   support all combinations of these configurations.\n   The
        session capability attribute provides a means for the offerer\n   and/or the
        answerer to specify combinations of specific media stream\n   configurations
        that it is willing and able to support.  Each session\n   capability in an
        offer or answer MAY be expressed as a list of\n   required potential configurations,
        and MAY include a list of optional\n   potential and/or latent configurations.\n
        \  The choices of session capabilities may be based on processing load,\n
        \  total bandwidth, or any other criteria of importance to the\n   communicating
        parties.  If the answerer supports media capabilities\n   negotiation, and
        session configurations are offered, it MUST accept\n   one of the offered
        configurations, or it MUST refuse the session.\n   Therefore, if the offer
        includes any session capabilities, it SHOULD\n   include all the session capabilities
        the offerer is willing to\n   support.\n   The session capability attribute
        is a session-level attribute\n   described by\n       \"a=sescap:\" <session
        num> <list of configs>\n   which corresponds to the standard value attribute
        definition with\n           att-field        = \"sescap\"\n           att-value
        \       = session-num 1*WSP list-of-configs\n                              [1*WSP
        optional-configs]\n           session-num      = NonZeroDigit *9(DIGIT)  ;
        DIGIT defined\n                                                      ; in
        RFC 5234\n           list-of-configs  = alt-config *(\",\" alt-config)\n           optional-configs
        = \"[\" list-of-configs \"]\"\n           alt-config       = config-number
        *(\"|\" config-number)\n   The session-num identifies the session: a lower-number
        session is\n   preferred over a higher-number session, and leading zeroes
        are not\n   permitted.  Each alt-config list specifies alternative media\n
        \  configurations within the session; preference is based on config-num\n
        \  as specified in RFC 5939 [RFC5939].  Note that the session preference\n
        \  order, when present, takes precedence over the individual media\n   stream
        configuration preference order.\n   Use of session capability attributes requires
        that configuration\n   numbers assigned to potential and latent configurations
        MUST be\n   unique across the entire session; RFC 5939 [RFC5939] requires
        only\n   that \"pcfg\" configuration numbers be unique within a media\n   description.
        \ Also, leading zeroes are not permitted.\n   As an example, consider an endpoint
        that is capable of supporting an\n   audio stream with either one H.264 video
        stream or two H.263 video\n   streams with a floor control stream.  In the
        latter case, the second\n   video stream is optional.  The SDP offer might
        look like the\n   following (offering audio, an H.263 video streams, BFCP
        and another\n   optional H.263 video stream) -- the empty lines are added
        for\n   readability only (not part of valid SDP):\n      v=0\n      o=- 25678
        753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n
        \     a=creq:med-v0\n      a=sescap:2 1,2,5,[3]\n      a=sescap:1 1,4\n      m=audio
        54322 RTP/AVP 0\n      a=rtpmap:0 PCMU/8000\n      a=pcfg:1\n      m=video
        22344 RTP/AVP 102\n      a=rtpmap:102 H263-1998/90000\n      a=fmtp:102 CIF=4;QCIF=2;F=1;K=1\n
        \     i=main video stream\n      a=label:11\n      a=pcfg:2\n      a=rmcap:1
        H264/90000\n      a=mfcap:1 profile-level-id=42A01E; packetization-mode=2\n
        \     a=acap:1 label:13\n      a=pcfg:4 m=1 a=1 pt=1:104\n      m=video 33444
        RTP/AVP 103\n      a=rtpmap:103 H263-1998/90000\n      a=fmtp:103 CIF=4;QCIF=2;F=1;K=1\n
        \     i=secondary video (slides)\n      a=label:12\n      a=pcfg:3\n      m=application
        33002 TCP/BFCP *\n      a=setup:passive\n      a=connection:new\n      a=floorid:1
        m-stream:11 12\n      a=floor-control:s-only\n      a=confid:4321\n      a=userid:1234\n
        \     a=pcfg:5\n   If the answerer understands MediaCapNeg, but cannot support
        the\n   Binary Floor Control Protocol, then it would respond with (invalid\n
        \  empty lines in SDP included again for readability):\n      v=0\n      o=-
        25678 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.22\n      t=0
        0\n      a=csup:med-v0\n      a=sescap:1 1,4\n      m=audio 23456 RTP/AVP
        0\n      a=rtpmap:0 PCMU/8000\n      a=acfg:1\n      m=video 41234 RTP/AVP
        104\n      a=rtpmap:104 H264/90000\n      a=fmtp:104 profile-level-id=42A01E;
        packetization-mode=2\n      a=acfg:4 m=1 a=1 pt=1:104\n      m=video 0 RTP/AVP
        103\n      a=acfg:3\n      m=application 0 TCP/BFCP *\n      a=acfg:5\n   An
        endpoint that doesn't support media capabilities negotiation, but\n   does
        support H.263 video, would respond with one or two H.263 video\n   streams.
        \ In the latter case, the answerer may issue a second offer\n   to reconfigure
        the session to one audio and one video channel using\n   H.264 or H.263.\n
        \  Session capabilities can include latent capabilities as well.  Here's\n
        \  a similar example in which the offerer wishes to initially establish\n
        \  an audio stream, and prefers to later establish two video streams\n   with
        chair control.  If the answerer doesn't understand Media CapNeg,\n   or cannot
        support the dual video streams or flow control, then it may\n   support a
        single H.264 video stream.  Note that establishment of the\n   most favored
        configuration will require two offer/answer exchanges.\n      v=0\n      o=-
        25678 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0
        0\n      a=creq:med-v0\n      a=sescap:1 1,3,4,5\n      a=sescap:2 1,2\n      a=sescap:3
        1\n      a=rmcap:1 H263-1998/90000\n      a=mfcap:1 CIF=4;QCIF=2;F=1;K=1\n
        \     a=tcap:1 RTP/AVP TCP/BFCP\n      m=audio 54322 RTP/AVP 0\n      a=rtpmap:0
        PCMU/8000\n      a=pcfg:1\n      m=video 22344 RTP/AVP 102\n      a=rtpmap:102
        H264/90000\n      a=fmtp:102 profile-level-id=42A01E; packetization-mode=2\n
        \     a=label:11\n      a=content:main\n      a=pcfg:2\n      a=lcfg:3 mt=video
        t=1 m=1 a=31,32\n      a=acap:31 label:12\n      a=acap:32 content:main\n
        \     a=lcfg:4 mt=video t=1 m=1 a=41,42\n      a=acap:41 label:13\n      a=acap:42
        content:slides\n      a=lcfg:5 mt=application m=51 t=51\n      a=tcap:51 TCP/BFCP\n
        \     a=omcap:51 *\n      a=acap:51 setup:passive\n      a=acap:52 connection:new\n
        \     a=acap:53 floorid:1 m-stream:12 13\n      a=acap:54 floor-control:s-only\n
        \     a=acap:55 confid:4321\n      a=acap:56 userid:1234\n   In this example,
        the default offer, as seen by endpoints that do not\n   understand capabilities
        negotiation, proposes a PCMU audio stream and\n   an H.264 video stream.  Note
        that the offered lcfg lines for the\n   video streams don't carry \"pt=\"
        parameters because they're not needed\n   (payload type numbers will be assigned
        in the offer/answer exchange\n   that establishes the streams).  Note also
        that the three \"rmcap\",\n   \"mfcap\", and \"tcap\" attributes used by \"lcfg:3\"
        and \"lcfg:4\" are\n   included at the session level so they may be referenced
        by both\n   latent configurations.  As per Section 3.3, the media attributes\n
        \  generated from the \"rmcap\", \"mfcap\", and \"tcap\" attributes are always\n
        \  media-level attributes.  If the answerer supports Media CapNeg, and\n   supports
        the most desired configuration, it would return the\n   following SDP:\n      v=0\n
        \     o=- 25678 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.22\n
        \     t=0 0\n      a=csup:med-v0\n      a=sescap:1 1,3,4,5\n      a=sescap:2
        1,2\n      a=sescap:3 1\n      m=audio 23456 RTP/AVP 0\n      a=rtpmap:0 PCMU/8000\n
        \     a=acfg:1\n      m=video 0 RTP/AVP 102\n      a=pcfg:2\n      a=lcfg:3
        mt=video t=1 m=1 a=31,32\n      a=lcfg:4 mt=video t=1 m=1 a=41,42\n      a=lcfg:5
        mt=application t=2\n   This exchange supports immediate establishment of an
        audio stream for\n   preliminary conversation.  This exchange would presumably
        be followed\n   at the appropriate time with a \"reconfiguration\" offer/answer\n
        \  exchange to add the video and chair control streams.\n"
      title: 3.3.8.  The Session Capability Attribute
    title: 3.3.  New Capability Attributes
  - contents:
    - "3.4.  Offer/Answer Model Extensions\n   In this section, we define extensions
      to the offer/answer model\n   defined in RFC 3264 [RFC3264] and RFC 5939 [RFC5939]
      to allow for\n   media format and associated parameter capabilities, latent\n
      \  configurations, and acceptable combinations of media stream\n   configurations
      to be used with the SDP capability negotiation\n   framework.  Note that the
      procedures defined in this section extend\n   the offer/answer procedures defined
      in RFC 5939 [RFC5939] Section 6;\n   those procedures form a baseline set of
      capability negotiation\n   offer/answer procedures that MUST be followed, subject
      to the\n   extensions defined here.\n   SDP capability negotiation [RFC5939]
      provides a relatively compact\n   means to offer the equivalent of an ordered
      list of alternative\n   configurations for offered media streams (as would be
      described by\n   separate \"m=\" lines and associated attributes).  The attributes\n
      \  \"acap\", \"mscap\", \"mfcap\", \"omcap\", and \"rmcap\" are designed to
      map\n   somewhat straightforwardly into equivalent \"m=\" lines and\n   conventional
      attributes when invoked by a \"pcfg\", \"lcfg\", or \"acfg\"\n   attribute with
      appropriate parameters.  The \"a=pcfg:\" lines, along\n   with the \"m=\" line
      itself, represent offered media configurations.\n   The \"a=lcfg:\" lines represent
      alternative capabilities for future\n   use.\n"
    - contents:
      - "3.4.1.  Generating the Initial Offer\n   The media capabilities negotiation
        extensions defined in this\n   document cover the following categories of
        features:\n   o  Media format capabilities and associated parameters (\"rmcap\",\n
        \     \"omcap\", \"mfcap\", and \"mscap\" attributes)\n   o  Potential configurations
        using those media format capabilities and\n      associated parameters\n   o
        \ Latent media streams (\"lcfg\" attribute)\n   o  Acceptable combinations
        of media stream configurations (\"sescap\"\n      attribute).\n   The high-level
        description of the operation is as follows:\n   When an endpoint generates
        an initial offer and wants to use the\n   functionality described in the current
        document, it SHOULD identify\n   and define the media formats and associated
        parameters it can support\n   via the \"rmcap\", \"omcap\", \"mfcap\", and
        \"mscap\" attributes.  The SDP\n   media line(s) (\"m=\") should be made up
        with the actual configuration\n   to be used if the other party does not understand
        capability\n   negotiations (by default, this is the least preferred configuration).\n
        \  Typically, the media line configuration will contain the minimum\n   acceptable
        configuration from the offerer's point of view.\n   Preferred configurations
        for each media stream are identified\n   following the media line.  The present
        offer may also include latent\n   configuration (\"lcfg\") attributes, at
        the media level, describing\n   media streams and/or configurations the offerer
        is not now offering\n   but that it is willing to support in a future offer/answer
        exchange.\n   A simple example might be the inclusion of a latent video\n
        \  configuration in an offer for an audio stream.\n   Lastly, if the offerer
        wishes to impose restrictions on the\n   combinations of potential configurations
        to be used, it will include\n   session capability (\"sescap\") attributes
        indicating those.\n   If the offerer requires the answerer to understand the
        media\n   capability extensions, the offerer MUST include a \"creq\" attribute\n
        \  containing the value \"med-v0\".  If media capability negotiation is\n
        \  required only for specific media descriptions, the \"med-v0\" value\n   MUST
        be provided only in \"creq\" attributes within those media\n   descriptions,
        as described in RFC 5939 [RFC5939].\n   Below, we provide a more detailed
        description of how to construct the\n   offer SDP.\n"
      - contents:
        - "3.4.1.1.  Offer with Media Capabilities\n   For each RTP-based media format
          the offerer wants to include as a\n   media format capability, the offer
          MUST include an \"rmcap\" attribute\n   for the media format as defined
          in Section 3.3.1.\n   For each non-RTP-based media format the offer wants
          to include as a\n   media format capability, the offer MUST include an \"omcap\"
          attribute\n   for the media format as defined in Section 3.3.1.\n   Since
          the media capability number space is shared between the \"rmcap\"\n   and
          \"omcap\" attributes, each media capability number provided\n   (including
          ranges) MUST be unique in the entire SDP.\n   If an \"fmtp\" parameter value
          is needed for a media format (whether or\n   not it is RTP based) in a media
          capability, then the offer MUST\n   include one or more \"mfcap\" parameters
          with the relevant \"fmtp\"\n   parameter values for that media format as
          defined in Section 3.3.2.\n   When multiple \"mfcap\" parameters are provided
          for a given media\n   capability, they MUST be provided in accordance with
          the\n   concatenation rules in Section 3.3.2.1.\n   For each of the media
          format capabilities above, the offer MAY\n   include one or more \"mscap\"
          parameters with attributes needed for\n   those specific media formats as
          defined in Section 3.3.3.  Such\n   attributes will be instantiated at the
          media level; hence, session-\n   level-only attributes MUST NOT be used
          in the \"mscap\" parameter.  The\n   \"mscap\" parameter MUST NOT include
          an \"rtpmap\" or \"fmtp\" attribute\n   (\"rmcap\" and \"mfcap\" are used
          instead).\n   If the offerer wants to limit the relevance (and use) of a
          media\n   format capability or parameter to a particular media stream, the\n
          \  media format capability or parameter MUST be provided within the\n   corresponding
          media description.  Otherwise, the media format\n   capabilities and parameters
          MUST be provided at the session level.\n   Note, however, that the attribute
          or parameter embedded in these will\n   always be instantiated at the media
          level.\n      This is due to those parameters being effectively media-level\n
          \     parameters.  If session-level attributes are needed, the \"acap\"\n
          \     attribute defined in RFC 5939 [RFC5939] can be used; however, it\n
          \     does not provide for media-format-specific instantiation.\n   Inclusion
          of the above does not constitute an offer to use the\n   capabilities; a
          potential configuration is needed for that.  If the\n   offerer wants to
          offer one or more of the media capabilities above,\n   they MUST be included
          as part of a potential configuration (\"pcfg\")\n   attribute as defined
          in Section 3.3.4.  Each potential configuration\n   MUST include a config-number,
          and each config-number MUST be unique\n   in the entire SDP (note that this
          differs from RFC 5939 [RFC5939],\n   which only requires uniqueness within
          a media description).  Also,\n   the config-number MUST NOT overlap with
          any config-number used by a\n   latent configuration in the SDP.  As described
          in RFC 5939 [RFC5939],\n   lower config-numbers indicate a higher preference;
          the ordering still\n   applies within a given media description only though.\n
          \  For a media capability to be included in a potential configuration,\n
          \  there MUST be an \"m=\" parameter in the \"pcfg\" attribute referencing\n
          \  the media capability number in question.  When one or more media\n   capabilities
          are included in an offered potential configuration\n   (\"pcfg\"), they
          completely replace the list of media formats offered\n   in the actual configuration
          (\"m=\" line).  Any attributes included for\n   those formats remain in
          the SDP though (e.g., \"rtpmap\", \"fmtp\",\n   etc.).  For non-RTP-based
          media formats, the format-name (from the\n   \"omcap\" media capability)
          is simply added to the \"m=\" line as a media\n   format (e.g., t38).  For
          RTP-based media, payload type mappings MUST\n   be provided by use of the
          \"pt\" parameter in the potential\n   configuration (see Section 3.3.4.2);
          payload type escaping may be\n   used in \"mfcap\", \"mscap\", and \"acap\"
          attributes as defined in Section\n   3.3.7.\n   Note that the \"mt\" parameter
          MUST NOT be used with the \"pcfg\"\n   attribute (since it is defined for
          the \"lcfg\" attribute only); the\n   media type in a potential configuration
          cannot be changed from that\n   of the encompassing media description.\n"
        title: 3.4.1.1.  Offer with Media Capabilities
      - contents:
        - "3.4.1.2.  Offer with Latent Configuration\n   If the offerer wishes to
          offer one or more latent configurations for\n   future use, the offer MUST
          include a latent configuration attribute\n   (\"lcfg\") for each as defined
          in Section 3.3.6.\n   Each \"lcfg\" attribute\n   o  MUST be specified at
          the media level\n   o  MUST include a config-number that is unique in the
          entire SDP\n      (including for any potential configuration attributes).
          \ Note that\n      config-numbers in latent configurations do not indicate
          any\n      preference order\n   o  MUST include a media type (\"mt\")\n
          \  o  MUST reference a valid transport capability (\"t\")\n   Each \"lcfg\"
          attribute MAY include additional capability references,\n   which may refer
          to capabilities anywhere in the session description,\n   subject to any
          restrictions normally associated with such\n   capabilities.  For example,
          a media-level attribute capability must\n   be present at the media level
          in some media description in the SDP.\n   Note that this differs from the
          potential configuration attribute,\n   which cannot validly refer to media-level
          capabilities in another\n   media description (per RFC 5939 [RFC5939], Section
          3.5.1).\n      Potential configurations constitute an actual offer and may\n
          \     instantiate a referenced capability.  Latent configurations are\n
          \     not actual offers; hence, they cannot instantiate a referenced\n      capability.
          \ Therefore, it is safe for those to refer to\n      capabilities in another
          media description.\n"
        title: 3.4.1.2.  Offer with Latent Configuration
      - contents:
        - "3.4.1.3.  Offer with Configuration Combination Restrictions\n   If the
          offerer wants to indicate restrictions or preferences among\n   combinations
          of potential and/or latent configurations, a session\n   capability (\"sescap\")
          attribute MUST be provided at the session level\n   for each such combination
          as described in Section 3.3.8.  Each\n   \"sescap\" attribute MUST include
          a session-num that is unique in the\n   entire SDP; the lower the session-num
          the more preferred that\n   combination is.  Furthermore, \"sescap\" preference
          order takes\n   precedence over any order specified in individual \"pcfg\"
          attributes.\n      For example, if we have pcfg-1 and pcfg-2, and sescap-1
          references\n      pcfg-2, whereas sescap-2 references pcfg-1, then pcfg-2
          will be\n      the most preferred potential configuration.  Without the
          sescap,\n      pcfg-1 would be the most preferred.\n"
        title: 3.4.1.3.  Offer with Configuration Combination Restrictions
      title: 3.4.1.  Generating the Initial Offer
    - contents:
      - "3.4.2.  Generating the Answer\n   When receiving an offer, the answerer MUST
        check the offer for \"creq\"\n   attributes containing the value \"med-v0\";
        answerers compliant with\n   this specification will support this value in
        accordance with the\n   procedures specified in RFC 5939 [RFC5939].\n   The
        SDP MAY contain\n   o  Media format capabilities and associated parameters
        (\"rmcap\",\n      \"omcap\", \"mfcap\", and \"mscap\" attributes)\n   o  Potential
        configurations using those media format capabilities and\n      associated
        parameters\n   o  Latent media streams (\"lcfg\" attribute)\n   o  Acceptable
        combinations of media stream configurations (\"sescap\"\n      attribute)\n
        \  The high-level informative description of the operation is as\n   follows:\n
        \  When the answering party receives the offer, if it supports the\n   required
        capability negotiation extensions, it should select the\n   most-preferred
        configuration it can support for each media stream,\n   and build its answer
        accordingly.  The configuration selected for\n   each accepted media stream
        is placed into the answer as a media line\n   with associated parameters and
        attributes.  If a proposed\n   configuration is chosen for a given media stream,
        the answer must\n   contain an actual configuration (\"acfg\") attribute for
        that media\n   stream to indicate which offered \"pcfg\" attribute was used
        to build\n   the answer.  The answer should also include any potential or
        latent\n   configurations the answerer can support, especially any\n   configurations
        compatible with other potential or latent\n   configurations received in the
        offer.  The answerer should make note\n   of those configurations it might
        wish to offer in the future.\n   Below we provide a more detailed normative
        description of how the\n   answerer processes the offer SDP and generates
        an answer SDP.\n"
      - contents:
        - "3.4.2.1.  Processing Media Capabilities and Potential Configurations\n
          \  The answerer MUST first determine if it needs to perform media\n   capability
          negotiation by examining the SDP for valid and preferred\n   potential configuration
          attributes that include media configuration\n   parameters (i.e., an \"m\"
          parameter in the \"pcfg\" attribute).\n   Such a potential configuration
          is valid if\n   1.  It is valid according to the rules defined in RFC 5939
          [RFC5939].\n   2.  It contains a config-number that is unique in the entire
          SDP and\n       does not overlap with any latent configuration config-numbers.\n
          \  3.  All media format capabilities (\"rmcap\" or \"omcap\"), media format\n
          \      parameter capabilities (\"mfcap\"), and media-specific capabilities\n
          \      (\"mscap\") referenced by the potential configuration (\"m\"\n       parameter)
          are valid themselves (as defined in Sections 3.3.1,\n       3.3.2, and 3.3.3)
          and each of them is provided either at the\n       session level or within
          this particular media description.\n   4.  All RTP-based media format capabilities
          (\"rmcap\") have a\n       corresponding payload type (\"pt\") parameter
          in the potential\n       configuration that results in mapping to a valid
          payload type\n       that is unique within the resulting SDP.\n   5.  Any
          concatenation (see Section 3.3.2.1) and substitution (see\n       Section
          3.3.7) applied to any capability (\"mfcap\", \"mscap\", or\n       \"acap\")
          referenced by this potential configuration results in a\n       valid SDP.\n
          \  Note that since SDP does not interpret the value of \"fmtp\"\n   parameters,
          any resulting \"fmtp\" parameter value will be considered\n   valid.\n   Secondly,
          the answerer MUST determine the order in which potential\n   configurations
          are to be negotiated.  In the absence of any session\n   capability (\"sescap\")
          attributes, this simply follows the rules of\n   RFC 5939 [RFC5939], with
          a lower config-number within a media\n   description being preferred over
          a higher one.  If a valid \"sescap\"\n   attribute is present, the preference
          order provided in the \"sescap\"\n   attribute MUST take precedence.  A
          \"sescap\" attribute is considered\n   valid if\n   1.  It adheres to the
          rules provided in Section 3.3.8.\n   2.  All the configurations referenced
          by the \"sescap\" attribute are\n       valid themselves (note that this
          can include the actual,\n       potential, and latent configurations).\n
          \  The answerer MUST now process the offer for each media stream based\n
          \  on the most preferred valid potential configuration in accordance\n   with
          the procedures specified in RFC 5939 [RFC5939], Section 3.6.2,\n   and further
          extended below:\n   o  If one or more media format capabilities are included
          in the\n      potential configuration, then they replace all media formats\n
          \     provided in the \"m=\" line for that media description.  For non-\n
          \     RTP-based media formats (\"omcap\"), the format-name is added.  For\n
          \     RTP-based media formats (\"rmcap\"), the payload-type specified in\n
          \     the payload-type mapping (\"pt\") is added and a corresponding\n      \"rtpmap\"
          attribute is added to the media description.\n   o  If one or more media
          format parameter capabilities are included in\n      the potential configuration,
          then the corresponding \"fmtp\"\n      attributes are added to the media
          description.  Note that this\n      inclusion is done indirectly via the
          media format capability.\n   o  If one or more media-specific capabilities
          are included in the\n      potential configuration, then the corresponding
          attributes are\n      added to the media description.  Note that this inclusion
          is done\n      indirectly via the media format capability.\n   o  When checking
          to see if the answerer supports a given potential\n      configuration that
          includes one or more media format capabilities,\n      the answerer MUST
          support at least one of the media formats\n      offered.  If he does not,
          the answerer MUST proceed to the next\n      potential configuration based
          on the preference order that\n      applies.\n   o  If session capability
          (\"sescap\") preference ordering is included,\n      then the potential
          configuration selection process MUST adhere to\n      the ordering provided.
          \ Note that this may involve coordinated\n      selection of potential configurations
          between media descriptions.\n      The answerer MUST accept one of the offered
          sescap combinations\n      (i.e., all the required potential configurations
          specified) or it\n      MUST reject the entire session.\n   Once the answerer
          has selected a valid and supported offered\n   potential configuration for
          all of the media streams (or has fallen\n   back to the actual configuration
          plus any added session attributes),\n   the answerer MUST generate a valid
          answer SDP as described in RFC\n   5939 [RFC5939], Section 3.6.2, and further
          extended below:\n   o  Additional answer capabilities and potential configurations
          MAY be\n      returned in accordance with Section 3.3.6.1.  Capability numbers\n
          \     and configuration numbers for those MUST be distinct from the ones\n
          \     used in the offer SDP.\n   o  Latent configuration processing and
          answer generation MUST be\n      performed, as specified below.\n   o  Session
          capability specification for the potential and latent\n      configurations
          in the answer MAY be included (see Section 3.3.8).\n"
        title: 3.4.2.1.  Processing Media Capabilities and Potential Configurations
      - contents:
        - "3.4.2.2.  Latent Configuration Processing\n   The answerer MUST determine
          if it needs to perform any latent\n   configuration processing by examining
          the SDP for valid latent\n   configuration attributes (\"lcfg\").  An \"lcfg\"
          attribute is considered\n   valid if:\n   o  It adheres to the description
          in Section 3.3.5.\n   o  It includes a config-number that is unique in the
          entire SDP and\n      does not overlap with any potential configuration
          config-number.\n   o  It includes a valid media type (\"mt=\").\n   o  It
          references a valid transport capability (\"t=\").\n   o  All other capabilities
          referenced by it are valid.\n   For each such valid latent configuration
          in the offer, the answerer\n   checks to see if it could support the latent
          configuration in a\n   subsequent offer/answer exchange.  If so, it includes
          the latent\n   configuration with the same configuration number in the answer,\n
          \  similar to the way potential configurations are processed and the\n   selected
          one returned in an actual configuration attribute (see RFC\n   5939 [RFC5939]).
          \ If the answerer supports only a (non-mandatory)\n   subset of the parameters
          offered in a latent configuration, the\n   answer latent configuration will
          include only those parameters\n   supported (similar to \"acfg\" processing).
          \ Note that latent\n   configurations do not constitute an actual offer
          at this point in\n   time; they merely indicate additional configurations
          that could be\n   supported.\n   If a session capability (\"sescap\") attribute
          is included and it\n   references a latent configuration, then the answerer
          processing of\n   that latent configuration must be done within the constraints\n
          \  specified by that session capability.  That is, it must be possible\n
          \  to support it at the same time as any required (i.e., non-optional)\n
          \  potential configurations in the session capability.  The answerer may\n
          \  in turn add his own sescap indications in the answer as well.\n"
        title: 3.4.2.2.  Latent Configuration Processing
      title: 3.4.2.  Generating the Answer
    - contents:
      - "3.4.3.  Offerer Processing of the Answer\n   The offerer MUST process the
        answer in accordance with Section 3.6.3\n   of RFC 5939 [RFC5939] and the
        further explanation below.\n   When the offerer processes the answer SDP based
        on a valid actual\n   configuration attribute in the answer, and that valid
        configuration\n   includes one or more media capabilities, the processing
        MUST\n   furthermore be done as if the offer was sent using those media\n
        \  capabilities instead of the actual configuration.  In particular, the\n
        \  media formats in the \"m=\" line, and any associated payload type\n   mappings
        (\"rtpmap\"), \"fmtp\" parameters (\"mfcap\"), and media-specific\n   attributes
        (\"mscap\") MUST be used.  Note that this may involve use of\n   concatenation
        and substitution rules (see Sections 3.3.2.1 and\n   3.3.7).  The actual configuration
        attribute may also be used to infer\n   the lack of acceptability of higher-preference
        configurations that\n   were not chosen, subject to any constraints provided
        by a session\n   capability (\"sescap\") attribute in the offer.  Note that
        the SDP\n   capability negotiation base specification [RFC5939] requires the\n
        \  answerer to choose the highest-preference configuration it can\n   support,
        subject to local policies.\n   When the offerer receives the answer, it SHOULD
        furthermore make note\n   of any capabilities and/or latent configurations
        included for future\n   use, and any constraints on how those may be combined.\n"
      title: 3.4.3.  Offerer Processing of the Answer
    - contents:
      - "3.4.4.  Modifying the Session\n   If, at a later time, one of the parties
        wishes to modify the\n   operating parameters of a session, e.g., by adding
        a new media\n   stream, or by changing the properties used on an existing
        stream, it\n   can do so via the mechanisms defined for offer/answer [RFC3264].
        \ If\n   the initiating party has remembered the codecs, potential\n   configurations,
        latent configurations, and session capabilities\n   provided by the other
        party in the earlier negotiation, it MAY use\n   this knowledge to maximize
        the likelihood of a successful\n   modification of the session.  Alternatively,
        the initiator MAY\n   perform a new capabilities exchange as part of the reconfiguration.\n
        \  In such a case, the new capabilities will replace the previously\n   negotiated
        capabilities.  This may be useful if conditions change on\n   the endpoint.\n"
      title: 3.4.4.  Modifying the Session
    title: 3.4.  Offer/Answer Model Extensions
  title: 3.  SDP Media Capabilities
- contents:
  - "4.  Examples\n   In this section, we provide examples showing how to use the
    media\n   capabilities with the SDP capability negotiation.\n"
  - contents:
    - "4.1.  Alternative Codecs\n   This example provides a choice of one of six variations
      of the\n   Adaptive Multi-Rate codec.  In this example, the default\n   configuration
      as specified by the media line is the same as the most\n   preferred configuration.
      \ Each configuration uses a different payload\n   type number so the offerer
      can interpret early media.\n      v=0\n      o=- 25678 753849 IN IP4 192.0.2.1\n
      \     s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n      a=creq:med-v0\n      m=audio
      54322 RTP/AVP 96\n      a=rtpmap:96 AMR-WB/16000/1\n      a=fmtp:96 mode-change-capability=1;
      max-red=220; \\\n      mode-set=0,2,4,7\n      a=rmcap:1,3,5 audio AMR-WB/16000/1\n
      \     a=rmcap:2,4,6 audio AMR/8000/1\n      a=mfcap:1,2,3,4 mode-change-capability=1\n
      \     a=mfcap:5,6 mode-change-capability=2\n      a=mfcap:1,2,3,5 max-red=220\n
      \     a=mfcap:3,4,5,6 octet-align=1\n      a=mfcap:1,3,5 mode-set=0,2,4,7\n
      \     a=mfcap:2,4,6 mode-set=0,3,5,6\n      a=pcfg:1 m=1 pt=1:96\n      a=pcfg:2
      m=2 pt=2:97\n      a=pcfg:3 m=3 pt=3:98\n      a=pcfg:4 m=4 pt=4:99\n      a=pcfg:5
      m=5 pt=5:100\n      a=pcfg:6 m=6 pt=6:101\n   In the above example, media capability
      1 could have been excluded\n   from the first \"rmcap\" declaration and from
      the corresponding \"mfcap\"\n   attributes, and the \"pcfg:1\" attribute line
      could have been simply\n   \"pcfg:1\".\n   The next example offers a video stream
      with three options of H.264\n   and four transports.  It also includes an audio
      stream with different\n   audio qualities: four variations of AMR, or AC3.  The
      offer looks\n   something like the following:\n      v=0\n      o=- 25678 753849
      IN IP4 192.0.2.1\n      s=An SDP Media NEG example\n      c=IN IP4 192.0.2.1\n
      \     t=0 0\n      a=creq:med-v0\n      a=ice-pwd:speEc3QGZiNWpVLFJhQX\n      m=video
      49170 RTP/AVP 100\n      c=IN IP4 192.0.2.56\n      a=maxprate:1000\n      a=rtcp:51540\n
      \     a=sendonly\n      a=candidate 12345 1 UDP 9 192.0.2.56 49170 host\n      a=candidate
      23456 2 UDP 9 192.0.2.56 51540 host\n      a=candidate 34567 1 UDP 7 198.51.100.1
      41345 srflx raddr \\\n      192.0.2.56 rport 49170\n      a=candidate 45678
      2 UDP 7 198.51.100.1 52567 srflx raddr \\\n      192.0.2.56 rport 51540\n      a=candidate
      56789 1 UDP 3 192.0.2.100 49000 relay raddr \\\n      192.0.2.56 rport 49170\n
      \     a=candidate 67890 2 UDP 3 192.0.2.100 49001 relay raddr \\\n      192.0.2.56
      rport 51540\n      b=AS:10000\n      b=TIAS:10000000\n      b=RR:4000\n      b=RS:3000\n
      \     a=rtpmap:100 H264/90000\n      a=fmtp:100 profile-level-id=42A01E; packetization-mode=2;
      \\\n      sprop-parameter-sets=Z0IACpZTBYmI,aMljiA==; \\\n      sprop-interleaving-depth=45;
      sprop-deint-buf-req=64000; \\\n      sprop-init-buf-time=102478; deint-buf-cap=128000\n
      \     a=tcap:1 RTP/SAVPF RTP/SAVP RTP/AVPF\n      a=rmcap:1-3,7-9 H264/90000\n
      \     a=rmcap:4-6 rtx/90000\n      a=mfcap:1-9 profile-level-id=42A01E\n      a=mfcap:1-9
      aMljiA==\n      a=mfcap:1,4,7 packetization-mode=0\n      a=mfcap:2,5,8 packetization-mode=1\n
      \     a=mfcap:3,6,9 packetization-mode=2\n      a=mfcap:1-9 sprop-parameter-sets=Z0IACpZTBYmI\n
      \     a=mfcap:1,7 sprop-interleaving-depth=45; \\\n      sprop-deint-buf-req=64000;
      sprop-init-buf-time=102478; \\\n      deint-buf-cap=128000\n      a=mfcap:4
      apt=100\n      a=mfcap:5 apt=99\n      a=mfcap:6 apt=98\n      a=mfcap:4-6 rtx-time=3000\n
      \     a=mscap:1-6 rtcp-fb nack\n      a=acap:1 crypto:1 AES_CM_128_HMAC_SHA1_80
      \\\n      inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|220|1:32\n      a=pcfg:1
      t=1 m=1,4 a=1 pt=1:100,4:97\n      a=pcfg:2 t=1 m=2,5 a=1 pt=2:99,4:96\n      a=pcfg:3
      t=1 m=3,6 a=1 pt=3:98,6:95\n      a=pcfg:4 t=2 m=7 a=1 pt=7:100\n      a=pcfg:5
      t=2 m=8 a=1 pt=8:99\n      a=pcfg:6 t=2 m=9 a=1 pt=9:98\n      a=pcfg:7 t=3
      m=1,3 pt=1:100,4:97\n      a=pcfg:8 t=3 m=2,4 pt=2:99,4:96\n      a=pcfg:9 t=3
      m=3,6 pt=3:98,6:95\n      m=audio 49176 RTP/AVP 101 100 99 98\n      c=IN IP4
      192.0.2.56\n      a=ptime:60\n      a=maxptime:200\n      a=rtcp:51534\n      a=sendonly\n
      \     a=candidate 12345 1 UDP 9 192.0.2.56 49176 host\n      a=candidate 23456
      2 UDP 9 192.0.2.56 51534 host\n      a=candidate 34567 1 UDP 7 198.51.100.1
      41348 srflx \\\n      raddr 192.0.2.56 rport 49176\n      a=candidate 45678
      2 UDP 7 198.51.100.1 52569 srflx \\\n      raddr 192.0.2.56 rport 51534\n      a=candidate
      56789 1 UDP 3 192.0.2.100 49002 relay \\\n      raddr 192.0.2.56 rport 49176\n
      \     a=candidate 67890 2 UDP 3 192.0.2.100 49003 relay \\\n      raddr 192.0.2.56
      rport 51534\n      b=AS:512\n      b=TIAS:512000\n      b=RR:4000\n      b=RS:3000\n
      \     a=maxprate:120\n      a=rtpmap:98 AMR-WB/16000\n      a=fmtp:98 octet-align=1;
      mode-change-capability=2\n      a=rtpmap:99 AMR-WB/16000\n      a=fmtp:99 octet-align=1;
      crc=1; mode-change-capability=2\n      a=rtpmap:100 AMR-WB/16000/2\n      a=fmtp:100
      octet-align=1; interleaving=30\n      a=rtpmap:101 AMR-WB+/72000/2\n      a=fmtp:101
      interleaving=50; int-delay=160000;\n      a=rmcap:14 ac3/48000/6\n      a=acap:23
      crypto:1 AES_CM_128_HMAC_SHA1_80 \\\n      inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|220|1:32\n
      \     a=tcap:4 RTP/SAVP\n      a=pcfg:10 t=4 a=23\n      a=pcfg:11 t=4 m=14
      a=23 pt=14:102\n   This offer illustrates the advantage in compactness that
      arises if\n   one can avoid deleting the base configuration attributes and\n
      \  recreating them in \"acap\" attributes for the potential\n   configurations.\n"
    title: 4.1.  Alternative Codecs
  - contents:
    - "4.2.  Alternative Combinations of Codecs (Session Configurations)\n   If an
      endpoint has limited signal processing capacity, it might be\n   capable of
      supporting, say, a G.711 mu-law audio stream in\n   combination with an H.264
      video stream, or a G.729B audio stream in\n   combination with an H.263-1998
      video stream.  It might then issue an\n   offer like the following:\n      v=0\n
      \     o=- 25678 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n
      \     t=0 0\n      a=creq:med-v0\n      a=sescap:1 2,4\n      a=sescap:2 1,3\n
      \     m=audio 54322 RTP/AVP 18\n      a=rtpmap:18 G729/8000\n      a=fmtp:18
      annexb=yes\n      a=rmcap:1 PCMU/8000\n      a=pcfg:1 m=1 pt=1:0\n      a=pcfg:2\n
      \     m=video 54344 RTP/AVP 100\n      a=rtpmap:100 H263-1998/90000\n      a=rmcap:2
      H264/90000\n      a=mfcap:2 profile-level-id=42A01E; packetization-mode=2\n
      \     a=pcfg:3 m=2 pt=2:101\n      a=pcfg:4\n   Note that the preferred session
      configuration (and the default as\n   well) is G.729B with H.263.  This overrides
      the individual media\n   stream preferences that are PCMU and H.264 by the potential\n
      \  configuration numbering rule.\n"
    title: 4.2.  Alternative Combinations of Codecs (Session Configurations)
  - contents:
    - "4.3.  Latent Media Streams\n   Consider a case in which the offerer can support
      either G.711 mu-law\n   or G.729B, along with DTMF telephony events for the
      12 common\n   touchtone signals, but is willing to support simple G.711 mu-law\n
      \  audio as a last resort.  In addition, the offerer wishes to announce\n   its
      ability to support video and Message Session Relay Protocol\n   (MSRP) in the
      future, but does not wish to offer a video stream or an\n   MSRP stream at present.
      \ The offer might look like the following:\n      v=0\n      o=- 25678 753849
      IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n      a=creq:med-v0\n
      \     m=audio 23456 RTP/AVP 0\n      a=rtpmap:0 PCMU/8000\n      a=rmcap:1 PCMU/8000\n
      \     a=rmcap:2 G729/8000\n      a=rmcap:3 telephone-event/8000\n      a=mfcap:3
      0-11\n      a=pcfg:1 m=1,3|2,3 pt=1:0,2:18,3:100\n      a=lcfg:2 mt=video t=1
      m=10|11\n      a=rmcap:10 H263-1998/90000\n      a=rmcap:11 H264/90000\n      a=tcap:1
      RTP/AVP\n      a=lcfg:3 mt=message t=2 m=20\n      a=tcap:2 TCP/MSRP\n      a=omcap:20
      *\n   The first \"lcfg\" attribute line (\"lcfg:2\") announces support for\n
      \  H.263 and H.264 video (H.263 preferred) for future negotiation.  The\n   second
      \"lcfg\" attribute line (\"lcfg:3\") announces support for MSRP\n   for future
      negotiation.  The \"m=\" line and the \"rtpmap\" attribute\n   offer an audio
      stream and provide the lowest precedence configuration\n   (PCMU without any
      DTMF encoding).  The rmcap lines define the RTP-\n   based media format capabilities
      (PCMU, G729, telephone-event,\n   H263-1998, and H264) and the omcap line defines
      the non-RTP-based\n   media format capability (wildcard).  The \"mfcap\" attribute
      provides\n   the format parameters for telephone-event, specifying the 12\n
      \  commercial DTMF 'digits'.  The \"pcfg\" attribute line defines the\n   most-preferred
      media configuration as PCMU plus DTMF events and the\n   next-most-preferred
      configuration as G.729B plus DTMF events.\n   If the answerer is able to support
      all the potential configurations,\n   and also support H.263 video (but not
      H.264), it would reply with an\n   answer like the following:\n      v=0\n      o=-
      24351 621814 IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n      t=0
      0\n      a=csup:med-v0\n      m=audio 54322 RTP/AVP 0 100\n      a=rtpmap:0
      PCMU/8000\n      a=rtpmap:100 telephone-event/8000\n      a=fmtp:100 0-11\n
      \     a=acfg:1 m=1,3 pt=1:0,3:100\n      a=pcfg:1 m=2,3 pt=2:18,3:100\n      a=lcfg:2
      mt=video t=1 m=10\n   The \"lcfg\" attribute line announces the capability to
      support H.263\n   video at a later time.  The media line and subsequent \"rtpmap\"
      and\n   \"fmtp\" attribute lines present the selected configuration for the\n
      \  media stream.  The \"acfg\" attribute line identifies the potential\n   configuration
      from which it was taken, and the \"pcfg\" attribute line\n   announces the potential
      capability to support G.729 with DTMF events\n   as well.  If, at some later
      time, congestion becomes a problem in the\n   network, either party may, with
      expectation of success, offer a\n   reconfiguration of the media stream to use
      G.729 in order to reduce\n   packet sizes.\n"
    title: 4.3.  Latent Media Streams
  title: 4.  Examples
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  New SDP Attributes\n   IANA has registered the following new SDP attributes:\n
      \     Attribute name: rmcap\n      Long form name: RTP-based media format capability\n
      \     Type of attribute: session-level and media-level\n      Subject to charset:
      no\n      Purpose: associate RTP-based media capability number(s) with\n      media
      subtype and encoding parameters\n      Appropriate Values: see Section 3.3.1\n
      \     Contact name: Flemming Andreasen, fandres@cisco.com\n      Attribute name:
      omcap\n      Long form name: non-RTP-based media format capability\n      Type
      of attribute: session-level and media-level\n      Subject to charset: no\n
      \     Purpose: associate non-RTP-based media capability number(s) with\n      media
      subtype and encoding parameters\n      Appropriate Values: see Section 3.3.1\n
      \     Contact name: Flemming Andreasen, fandreas@cisco.com\n      Attribute
      name: mfcap\n      Long form name: media format parameter capability\n      Type
      of attribute: session-level and media-level\n      Subject to charset: no\n
      \     Purpose: associate media format attributes and\n      parameters with
      media format capabilities\n      Appropriate Values: see Section 3.3.2\n      Contact
      name: Flemming Andreasen, fandreas@cisco.com\n      Attribute name: mscap\n
      \     Long form name: media-specific capability\n      Type of attribute: session-level
      and media-level\n      Subject to charset: no\n      Purpose: associate media-specific
      attributes and\n      parameters with media capabilities\n      Appropriate
      Values: see Section 3.3.3\n      Contact name: Flemming Andreasen, fandreas@cisco.com\n
      \     Attribute name: lcfg\n      Long form name: latent configuration\n      Type
      of attribute: media-level\n      Subject to charset: no\n      Purpose: to announce
      supportable media streams\n      without offering them for immediate use.\n
      \     Appropriate Values: see Section 3.3.5\n      Contact name: Flemming Andreasen,
      fandreas@cisco.com\n      Attribute name: sescap\n      Long form name: session
      capability\n      Type of attribute: session-level\n      Subject to charset:
      no\n      Purpose: to specify and prioritize acceptable\n      combinations
      of media stream configurations.\n      Appropriate Values: see Section 3.3.8\n
      \     Contact name: Flemming Andreasen, fandreas@cisco.com\n"
    title: 5.1.  New SDP Attributes
  - contents:
    - "5.2.  New SDP Capability Negotiation Option Tag\n   IANA has added the new
      option tag \"med-v0\", defined in this document,\n   to the \"SDP Capability
      Negotiation Option Capability Tags\" registry\n   created for RFC 5939 [RFC5939].\n"
    title: 5.2.  New SDP Capability Negotiation Option Tag
  - contents:
    - "5.3.  SDP Capability Negotiation Configuration Parameters Registry\n   IANA
      has changed the \"SDP Capability Negotiation Potential\n   Configuration Parameters\"
      registry, currently registered and defined\n   by RFC 5939 [RFC5939], as follows:\n
      \  The name of the registry should be \"SDP Capability Negotiation\n   Configuration
      Parameters Registry\" and it should contain a table with\n   the following column
      headings:\n   o  Encoding Name: The syntactical value used for the capability\n
      \     negotiation configuration parameter, as defined in RFC 5939\n      [RFC5939],
      Section 3.5.\n   o  Descriptive Name: The name commonly used to refer to the\n
      \     capability negotiation configuration parameter.\n   o  Potential Configuration
      Definition: A reference to the RFC that\n      defines the configuration parameter
      in the context of a potential\n      configuration attribute.  If the configuration
      parameter is not\n      defined for potential configurations, the string \"N/A\"
      (Not\n      Applicable) MUST be present instead.\n   o  Actual Configuration
      Definition: A reference to the RFC that\n      defines the configuration parameter
      in the context of an actual\n      configuration attribute.  If the configuration
      parameter is not\n      defined for actual configurations, the string \"N/A\"
      (Not\n      Applicable) MUST be present instead.\n   o  Latent Configuration
      Definition: A reference to the RFC that\n      defines the configuration parameter
      in the context of a latent\n      configuration attribute.  If the configuration
      parameter is not\n      defined for latent configurations, the string \"N/A\"
      (Not\n      Applicable) MUST be present instead.\n   An IANA SDP Capability
      Negotiation Configuration registration MUST be\n   documented in an RFC in accordance
      with the IETF Review policy\n   [RFC5226].  Furthermore:\n   o  The RFC MUST
      define the syntax and semantics of each new potential\n      configuration parameter.\n
      \  o  The syntax MUST adhere to the syntax provided for extension\n      configuration
      lists in RFC 5939 [RFC5939], Section 3.5.1, and the\n      semantics MUST adhere
      to the semantics provided for extension\n      configuration lists in RFC 5939
      [RFC5939], Sections 3.5.1 and\n      3.5.2.\n   o  Configuration parameters
      that apply to latent configurations MUST\n      furthermore adhere to the syntax
      provided in Section 3.3.5 and the\n      semantics defined overall in this document.\n
      \  o  Associated with each registration MUST be the encoding name for\n      the
      parameter as well as a short descriptive name for it.\n   o  Each registration
      MUST specify if it applies to\n      *  Potential configurations\n      *  Actual
      configurations\n      *  Latent configurations\n"
    title: 5.3.  SDP Capability Negotiation Configuration Parameters Registry
  - contents:
    - "5.4.  SDP Capability Negotiation Configuration Parameter Registrations\n   IANA
      has registered the following capability negotiation\n   configuration parameters:\n
      \     Encoding Name: a\n      Descriptive Name: Attribute Configuration\n      Potential
      Configuration Definition: [RFC5939]\n      Actual Configuration Definition:
      [RFC5939]\n      Latent Configuration Definition: [RFC6871]\n      Encoding
      Name: t\n      Descriptive Name: Transport Protocol Configuration\n      Potential
      Configuration Definition: [RFC5939]\n      Actual Configuration Definition:
      [RFC5939]\n      Latent Configuration Definition: [RFC6871]\n      Encoding
      Name: m\n      Descriptive Name: Media Configuration\n      Potential Configuration
      Definition: [RFC6871]\n      Actual Configuration Definition: [RFC6871]\n      Latent
      Configuration Definition: [RFC6871]\n      Encoding Name: pt\n      Descriptive
      Name: Payload Type Number Mapping\n      Potential Configuration Definition:
      [RFC6871]\n      Actual Configuration Definition: [RFC6871]\n      Latent Configuration
      Definition: [RFC6871]\n      Encoding Name: mt\n      Descriptive Name: Media
      Type\n      Potential Configuration Definition: N/A\n      Actual Configuration
      Definition: N/A\n      Latent Configuration Definition: [RFC6871]\n"
    title: 5.4.  SDP Capability Negotiation Configuration Parameter Registrations
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The security considerations of RFC 5939 [RFC5939]
    apply for this\n   document.\n   In RFC 5939 [RFC5939], it was noted that negotiation
    of transport\n   protocols (e.g., secure and non-secure) and negotiation of keying\n
    \  methods and material are potential security issues that warrant\n   integrity
    protection to remedy.  Latent configuration support\n   provides hints to the
    other side about capabilities supported for\n   further offer/answer exchanges,
    including transport protocols and\n   attribute capabilities, e.g., for keying
    methods.  If an attacker can\n   remove or alter latent configuration information
    to suggest that only\n   non-secure or less-secure alternatives are supported,
    then he may be\n   able to force negotiation of a less secure session than would\n
    \  otherwise have occurred.  While the specific attack, as described\n   here,
    differs from those described in RFC 5939 [RFC5939], the\n   considerations and
    mitigation strategies are similar to those\n   described in RFC 5939 [RFC5939].\n
    \  Another variation on the above attack involves the session capability\n   (\"sescap\")
    attribute defined in this document.  The \"sescap\" enables\n   a preference order
    to be specified for all the potential\n   configurations, and that preference
    will take precedence over any\n   preference indication provided in individual
    potential configuration\n   attributes.  Consequently, an attacker that can insert
    or modify a\n   \"sescap\" attribute may be able to force negotiation of an insecure
    or\n   less secure alternative than would otherwise have occurred.  Again,\n   the
    considerations and mitigation strategies are similar to those\n   described in
    RFC 5939 [RFC5939].\n   The addition of negotiable media formats and their associated\n
    \  parameters, defined in this specification can cause problems for\n   middleboxes
    that attempt to control bandwidth utilization, media\n   flows, and/or processing
    resource consumption as part of network\n   policy, but that do not understand
    the media capability negotiation\n   feature.  As for the initial SDP capability
    negotiation work\n   [RFC5939], the SDP answer is formulated in such a way that
    it always\n   carries the selected media encoding for every media stream selected.\n
    \  Pending an understanding of capabilities negotiation, the middlebox\n   should
    examine the answer SDP to obtain the best picture of the media\n   streams being
    established.  As always, middleboxes can best do their\n   job if they fully understand
    media capabilities negotiation.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgements\n   This document is heavily influenced by the discussions
    and work done\n   by the SDP Capability Negotiation design team.  The following
    people\n   in particular provided useful comments and suggestions to either the\n
    \  document itself or the overall direction of the solution defined\n   herein:
    Cullen Jennings, Matt Lepinski, Joerg Ott, Colin Perkins, and\n   Thomas Stach.\n
    \  We thank Ingemar Johansson and Magnus Westerlund for examples that\n   stimulated
    this work, and for critical reading of the document.  We\n   also thank Cullen
    Jennings, Christer Holmberg, and Miguel Garcia for\n   their review of the document.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n
      \             with Session Description Protocol (SDP)\", RFC 3264, June\n              2002.\n
      \  [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, July 2006.\n   [RFC5226]  Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\",
      BCP 26, RFC 5226,\n              May 2008.\n   [RFC5234]  Crocker, D. and P.
      Overell, \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD
      68, RFC 5234, January 2008.\n   [RFC5939]  Andreasen, F., \"Session Description
      Protocol (SDP)\n              Capability Negotiation\", RFC 5939, September
      2010.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC2198]  Perkins, C., Kouvelas, I., Hodson,
      O., Hardman, V.,\n              Handley, M., Bolot, J., Vega-Garcia, A., and
      S. Fosse-\n              Parisis, \"RTP Payload for Redundant Audio Data\",
      RFC 2198,\n              September 1997.\n   [RFC4568]  Andreasen, F., Baugher,
      M., and D. Wing, \"Session\n              Description Protocol (SDP) Security
      Descriptions for Media\n              Streams\", RFC 4568, July 2006.\n   [RFC4585]
      \ Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended
      RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based
      Feedback (RTP/AVPF)\", RFC 4585, July\n              2006.\n   [RFC4733]  Schulzrinne,
      H. and T. Taylor, \"RTP Payload for DTMF\n              Digits, Telephony Tones,
      and Telephony Signals\", RFC 4733,\n              December 2006.\n   [RFC4867]
      \ Sjoberg, J., Westerlund, M., Lakaniemi, A., and Q. Xie,\n              \"RTP
      Payload Format and File Storage Format for the\n              Adaptive Multi-Rate
      (AMR) and Adaptive Multi-Rate Wideband\n              (AMR-WB) Audio Codecs\",
      RFC 4867, April 2007.\n   [RFC5104]  Wenger, S., Chandra, U., Westerlund, M.,
      and B. Burman,\n              \"Codec Control Messages in the RTP Audio-Visual
      Profile\n              with Feedback (AVPF)\", RFC 5104, February 2008.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Robert R Gilman\n   Independent\n   3243 W. 11th Ave.
    Dr.\n   Broomfield, CO 80020\n   USA\n   EMail: bob_gilman@comcast.net\n   Roni
    Even\n   Huawei Technologies\n   14 David Hamelech\n   Tel Aviv  64953\n   Israel\n
    \  EMail: roni.even@mail01.huawei.com\n   Flemming Andreasen\n   Cisco Systems\n
    \  Iselin, NJ\n   USA\n   EMail: fandreas@cisco.com\n"
  title: Authors' Addresses
