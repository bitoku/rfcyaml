- title: __initial_text__
  contents:
  - '                         TFTP Blocksize Option

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Trivial File Transfer Protocol [1] is a simple, lock-step, file\n\
    \   transfer protocol which allows a client to get or put a file onto a\n   remote\
    \ host.  One of its primary uses is the booting of diskless\n   nodes on a Local\
    \ Area Network.  TFTP is used because it is very\n   simple to implement in a\
    \ small node's limited ROM space.  However,\n   the choice of a 512-byte blocksize\
    \ is not the most efficient for use\n   on a LAN whose MTU may 1500 bytes or greater.\n\
    \   This document describes a TFTP option which allows the client and\n   server\
    \ to negotiate a blocksize more applicable to the network\n   medium.  The TFTP\
    \ Option Extension mechanism is described in [2].\n"
- title: Blocksize Option Specification
  contents:
  - "Blocksize Option Specification\n   The TFTP Read Request or Write Request packet\
    \ is modified to include\n   the blocksize option as follows:\n      |  opc  |filename|\
    \ 0 |  mode  | 0 | blksize| 0 | #octets| 0 |\n      opc\n         The opcode field\
    \ contains either a 1, for Read Requests, or 2,\n         for Write Requests,\
    \ as defined in [1].\n      filename\n         The name of the file to be read\
    \ or written, as defined in [1].\n         This is a NULL-terminated field.\n\
    \      mode\n         The mode of the file transfer: \"netascii\", \"octet\",\
    \ or \"mail\",\n         as defined in [1].  This is a NULL-terminated field.\n\
    \      blksize\n         The Blocksize option, \"blksize\" (case insensitive).\
    \  This is a\n         NULL-terminated field.\n      #octets\n         The number\
    \ of octets in a block, specified in ASCII.  Valid\n         values range between\
    \ \"8\" and \"65464\" octets, inclusive.  This\n         is a NULL-terminated\
    \ field.\n   For example:\n      +-------+--------+---+--------+---+--------+---+--------+---+\n\
    \      |   1   | foobar | 0 | binary | 0 | blksize| 0 |  1432  | 0 |\n      +-------+--------+---+--------+---+--------+---+--------+---+\n\
    \   is a Read Request, for the file named \"foobar\", in binary transfer\n   mode,\
    \ with a block size of 1432 bytes (Ethernet MTU, less the UDP and\n   IP header\
    \ lengths).\n   If the server is willing to accept the blocksize option, it sends\
    \ an\n   Option Acknowledgment (OACK) to the client.  The specified value must\n\
    \   be less than or equal to the value specified by the client.  The\n   client\
    \ must then either use the size specified in the OACK, or send\n   an ERROR packet,\
    \ with error code 8, to terminate the transfer.\n   The rules for determining\
    \ the final packet are unchanged from [1].\n   The reception of a data packet\
    \ with a data length less than the\n   negotiated blocksize is the final packet.\
    \  If the blocksize is\n   greater than the size of the packet, the first packet\
    \ is the final\n   packet.  If amount of data to be transfered is an integral\
    \ multiple\n   of the blocksize, an extra data packet containing no data is sent\
    \ to\n   end the transfer.\n"
- title: Proof of Concept
  contents:
  - "Proof of Concept\n   Performance tests were run on the prototype implementation\
    \ using a\n   variety of block sizes.  The tests were run on a lightly loaded\n\
    \   Ethernet, between two HP-UX 9000, in \"octet\" mode, on 2.25MB files.\n  \
    \ The average (5x) transfer times for paths with (g-time) and without\n   (n-time)\
    \ a intermediate gateway are graphed as follows:\n           |\n        37 + \
    \     g\n           |\n        35 +\n           |\n        33 +\n           |\n\
    \        31 +\n           |\n        29 +\n           |\n        27 +\n      \
    \     |             g              blocksize   n-time   g-time\n        25 + \
    \                           ---------   ------   ------\n      s    |       n\
    \                      512       23.85    37.05\n      e 23 +                g\
    \            1024       16.15    25.65\n      c    |                         \
    \    1432       13.70    23.10\n      o 21 +                             2048\
    \       10.90    16.90\n      n    |                             4096        6.85\
    \     9.65\n      d 19 +                             8192        4.90     6.15\n\
    \      s    |\n        17 +                    g\n           |             n\n\
    \        15 +\n           |                n\n        13 +\n           |\n   \
    \     11 +                    n\n           |                           g\n  \
    \       9 +\n           |\n         7 +                           n\n        \
    \   |                                  g\n         5 +                       \
    \           n\n           \"\n         0 +------+------+--+---+------+------+---\n\
    \                 512    1K  |  2K     4K     8K\n                          1432\n\
    \                    blocksize (bytes)\n   The comparisons between transfer times\
    \ (without a gateway) between\n   the standard 512-byte blocksize and the negotiated\
    \ blocksizes are:\n      1024     2x   -32%\n      1432   2.8x   -42%\n      2048\
    \     4x   -54%\n      4096     8x   -71%\n      8192    16x   -80%\n   As was\
    \ anticipated, the transfer time decreases with an increase in\n   blocksize.\
    \  The reason for the reduction in time is the reduction in\n   the number of\
    \ packets sent.  For example, by increasing the blocksize\n   from 512 bytes to\
    \ 1024 bytes, not only are the number of data packets\n   halved, but the number\
    \ of acknowledgement packets is also halved\n   (along with the number of times\
    \ the data transmitter must wait for an\n   ACK).  A secondary effect is the efficiency\
    \ gained by reducing the\n   per-packet framing and processing overhead.\n   Of\
    \ course, if the blocksize exceeds the path MTU, IP fragmentation\n   and reassembly\
    \ will begin to add more overhead.  This will be more\n   noticable the greater\
    \ the number of gateways in the path.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1] Sollins, K., \"The TFTP Protocol (Revision 2)\", STD 33, RFC\
    \ 1350,\n       MIT, July 1992.\n   [2] Malkin, G., and A. Harkin, \"TFTP Option\
    \ Extension\", RFC 1782,\n       Xylogics, Inc., Hewlett Packard Co., March 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n       Gary Scott Malkin\n       Xylogics, Inc.\n       53\
    \ Third Avenue\n       Burlington, MA  01803\n       Phone:  (617) 272-8140\n\
    \       EMail:  gmalkin@xylogics.com\n       Art Harkin\n       Internet Services\
    \ Project\n       Information Networks Division\n       19420 Homestead Road MS\
    \ 43LN\n       Cupertino, CA  95014\n       Phone: (408) 447-3755\n       EMail:\
    \ ash@cup.hp.com\n"
