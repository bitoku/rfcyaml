- title: __initial_text__
  contents:
  - "        Using Raw Public Keys in Transport Layer Security (TLS)\n           \
    \   and Datagram Transport Layer Security (DTLS)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a new certificate type and two TLS extensions\n\
    \   for exchanging raw public keys in Transport Layer Security (TLS) and\n   Datagram\
    \ Transport Layer Security (DTLS).  The new certificate type\n   allows raw public\
    \ keys to be used for authentication.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7250.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Structure of the Raw Public Key Extension . . . . . . .\
    \ . . .   4\n   4.  TLS Client and Server Handshake Behavior  . . . . . . . .\
    \ . .   7\n     4.1.  Client Hello  . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     4.2.  Server Hello  . . . . . . . . . . . . . . . . . . . . . .\
    \   8\n     4.3.  Client Authentication . . . . . . . . . . . . . . . . . .  \
    \ 9\n     4.4.  Server Authentication . . . . . . . . . . . . . . . . . .   9\n\
    \   5.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  10\n  \
    \   5.1.  TLS Server Uses a Raw Public Key  . . . . . . . . . . . .  10\n    \
    \ 5.2.  TLS Client and Server Use Raw Public Keys . . . . . . . .  11\n     5.3.\
    \  Combined Usage of Raw Public Keys and X.509 Certificates   12\n   6.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  13\n   7.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  14\n   8.  Acknowledgements  . .\
    \ . . . . . . . . . . . . . . . . . . . .  14\n   9.  References  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  15\n     9.1.  Normative References \
    \ . . . . . . . . . . . . . . . . . .  15\n     9.2.  Informative References \
    \ . . . . . . . . . . . . . . . . .  15\n   Appendix A.  Example Encoding . .\
    \ . . . . . . . . . . . . . . . .  17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traditionally, TLS client and server public keys are obtained\
    \ in PKIX\n   containers in-band as part of the TLS handshake procedure and are\n\
    \   validated using trust anchors based on a [PKIX] certification\n   authority\
    \ (CA).  This method can add a complicated trust relationship\n   that is difficult\
    \ to validate.  Examples of such complexity can be\n   seen in [Defeating-SSL].\
    \  TLS is, however, also commonly used with\n   self-signed certificates in smaller\
    \ deployments where the self-signed\n   certificates are distributed to all involved\
    \ protocol endpoints out-\n   of-band.  This practice does, however, still require\
    \ the overhead of\n   the certificate generation even though none of the information\
    \ found\n   in the certificate is actually used.\n   Alternative methods are available\
    \ that allow a TLS client/server to\n   obtain the TLS server/client public key:\n\
    \   o  The TLS client can obtain the TLS server public key from a DNSSEC-\n  \
    \    secured resource record using DNS-Based Authentication of Named\n      Entities\
    \ (DANE) [RFC6698].\n   o  The TLS client or server public key is obtained from\
    \ a [PKIX]\n      certificate chain from a Lightweight Directory Access Protocol\n\
    \      [LDAP] server or web page.\n   o  The TLS client and server public key\
    \ is provisioned into the\n      operating system firmware image and updated via\
    \ software updates.\n      For example:\n      Some smart objects use the UDP-based\
    \ Constrained Application\n      Protocol [CoAP] to interact with a Web server\
    \ to upload sensor\n      data at regular intervals, such as temperature readings.\
    \  CoAP can\n      utilize DTLS for securing the client-to-server communication.\
    \  As\n      part of the manufacturing process, the embedded device may be\n \
    \     configured with the address and the public key of a dedicated CoAP\n   \
    \   server, as well as a public/private key pair for the client\n      itself.\n\
    \   This document introduces the use of raw public keys in TLS/DTLS.\n   With\
    \ raw public keys, only a subset of the information found in\n   typical certificates\
    \ is utilized: namely, the SubjectPublicKeyInfo\n   structure of a PKIX certificate\
    \ that carries the parameters necessary\n   to describe the public key.  Other\
    \ parameters found in PKIX\n   certificates are omitted.  By omitting various\
    \ certificate-related\n   structures, the resulting raw public key is kept fairly\
    \ small in\n   comparison to the original certificate, and the code to process\
    \ the\n   keys can be simpler.  Only a minimalistic ASN.1 parser is needed;\n\
    \   code for certificate path validation and other PKIX-related\n   processing\
    \ is not required.  Note, however, the SubjectPublicKeyInfo\n   structure is still\
    \ in an ASN.1 format.  To further reduce the size of\n   the exchanged information,\
    \ this specification can be combined with\n   the TLS Cached Info extension [CACHED-INFO],\
    \ which enables TLS peers\n   to exchange just fingerprints of their public keys.\n\
    \   The mechanism defined herein only provides authentication when an\n   out-of-band\
    \ mechanism is also used to bind the public key to the\n   entity presenting the\
    \ key.\n   Section 3 defines the structure of the two new TLS extensions,\n  \
    \ client_certificate_type and server_certificate_type, which can be\n   used as\
    \ part of an extended TLS handshake when raw public keys are to\n   be used. \
    \ Section 4 defines the behavior of the TLS client and the\n   TLS server.  Example\
    \ exchanges are described in Section 5.  Section 6\n   describes security considerations\
    \ with this approach.  Finally, in\n   Section 7 this document registers a new\
    \ value to the IANA \"TLS\n   Certificate Types\" subregistry for the support\
    \ of raw public keys.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   We use the terms \"TLS server\" and \"server\" as well as\
    \ \"TLS client\"\n   and \"client\" interchangeably.\n"
- title: 3.  Structure of the Raw Public Key Extension
  contents:
  - "3.  Structure of the Raw Public Key Extension\n   This section defines the two\
    \ TLS extensions client_certificate_type\n   and server_certificate_type, which\
    \ can be used as part of an extended\n   TLS handshake when raw public keys are\
    \ used.  Section 4 defines the\n   behavior of the TLS client and the TLS server\
    \ using these extensions.\n   This specification uses raw public keys whereby\
    \ the already available\n   encoding used in a PKIX certificate in the form of\
    \ a\n   SubjectPublicKeyInfo structure is reused.  To carry the raw public\n \
    \  key within the TLS handshake, the Certificate payload is used as a\n   container,\
    \ as shown in Figure 1.  The shown Certificate structure is\n   an adaptation\
    \ of its original form [RFC5246].\n   opaque ASN.1Cert<1..2^24-1>;\n   struct\
    \ {\n       select(certificate_type){\n            // certificate type defined\
    \ in this document.\n            case RawPublicKey:\n              opaque ASN.1_subjectPublicKeyInfo<1..2^24-1>;\n\
    \           // X.509 certificate defined in RFC 5246\n           case X.509:\n\
    \             ASN.1Cert certificate_list<0..2^24-1>;\n           // Additional\
    \ certificate type based on\n           // \"TLS Certificate Types\" subregistry\n\
    \       };\n   } Certificate;\n    Figure 1: Certificate Payload as a Container\
    \ for the Raw Public Key\n   The SubjectPublicKeyInfo structure is defined in\
    \ Section 4.1 of RFC\n   5280 [PKIX] and not only contains the raw keys, such\
    \ as the public\n   exponent and the modulus of an RSA public key, but also an\
    \ algorithm\n   identifier.  The algorithm identifier can also include parameters.\n\
    \   The SubjectPublicKeyInfo value in the Certificate payload MUST\n   contain\
    \ the DER encoding [X.690] of the SubjectPublicKeyInfo.  The\n   structure, as\
    \ shown in Figure 2, therefore also contains length\n   information.  An example\
    \ is provided in Appendix A.\n      SubjectPublicKeyInfo  ::=  SEQUENCE  {\n \
    \          algorithm               AlgorithmIdentifier,\n           subjectPublicKey\
    \        BIT STRING  }\n      AlgorithmIdentifier   ::=  SEQUENCE  {\n       \
    \    algorithm               OBJECT IDENTIFIER,\n           parameters       \
    \       ANY DEFINED BY algorithm OPTIONAL  }\n              Figure 2: SubjectPublicKeyInfo\
    \ ASN.1 Structure\n   The algorithm identifiers are Object Identifiers (OIDs).\
    \  RFC 3279\n   [RFC3279] and RFC 5480 [RFC5480], for example, define the OIDs\
    \ shown\n   in Figure 3.  Note that this list is not exhaustive, and more OIDs\n\
    \   may be defined in future RFCs.\n   Key Type            | Document        \
    \           | OID\n   --------------------+----------------------------+-------------------\n\
    \   RSA                 | Section 2.3.1 of RFC 3279  | 1.2.840.113549.1.1\n  \
    \ ....................|............................|...................\n   Digital\
    \ Signature   |                            |\n   Algorithm (DSA)     | Section\
    \ 2.3.2 of RFC 3279  | 1.2.840.10040.4.1\n   ....................|............................|...................\n\
    \   Elliptic Curve      |                            |\n   Digital Signature \
    \  |                            |\n   Algorithm (ECDSA)   | Section 2 of RFC 5480\
    \      | 1.2.840.10045.2.1\n   --------------------+----------------------------+-------------------\n\
    \              Figure 3: Example Algorithm Object Identifiers\n   The extension\
    \ format for extended client and server hellos, which\n   uses the \"extension_data\"\
    \ field, is used to carry the\n   ClientCertTypeExtension and the ServerCertTypeExtension\
    \ structures.\n   These two structures are shown in Figure 4.  The CertificateType\n\
    \   structure is an enum with values taken from the \"TLS Certificate\n   Types\"\
    \ subregistry of the \"Transport Layer Security (TLS) Extensions\"\n   registry\
    \ [TLS-Ext-Registry].\n   struct {\n           select(ClientOrServerExtension)\
    \ {\n               case client:\n                 CertificateType client_certificate_types<1..2^8-1>;\n\
    \               case server:\n                 CertificateType client_certificate_type;\n\
    \           }\n   } ClientCertTypeExtension;\n   struct {\n           select(ClientOrServerExtension)\
    \ {\n               case client:\n                 CertificateType server_certificate_types<1..2^8-1>;\n\
    \               case server:\n                 CertificateType server_certificate_type;\n\
    \           }\n   } ServerCertTypeExtension;\n                   Figure 4: CertTypeExtension\
    \ Structure\n"
- title: 4.  TLS Client and Server Handshake Behavior
  contents:
  - "4.  TLS Client and Server Handshake Behavior\n   This specification extends the\
    \ ClientHello and the ServerHello\n   messages, according to the extension procedures\
    \ defined in [RFC5246].\n   It does not extend or modify any other TLS message.\n\
    \   Note: No new cipher suites are required to use raw public keys.  All\n   existing\
    \ cipher suites that support a key exchange method compatible\n   with the defined\
    \ extension can be used.\n   The high-level message exchange in Figure 5 shows\
    \ the\n   client_certificate_type and server_certificate_type extensions added\n\
    \   to the client and server hello messages.\n    client_hello,\n    client_certificate_type,\n\
    \    server_certificate_type   ->\n                              <-  server_hello,\n\
    \                                  client_certificate_type,\n                \
    \                  server_certificate_type,\n                                \
    \  certificate,\n                                  server_key_exchange,\n    \
    \                              certificate_request,\n                        \
    \          server_hello_done\n    certificate,\n    client_key_exchange,\n   \
    \ certificate_verify,\n    change_cipher_spec,\n    finished                 \
    \ ->\n                              <- change_cipher_spec,\n                 \
    \                finished\n   Application Data        <------->     Application\
    \ Data\n                Figure 5: Basic Raw Public Key TLS Exchange\n"
- title: 4.1.  Client Hello
  contents:
  - "4.1.  Client Hello\n   In order to indicate the support of raw public keys, clients\
    \ include\n   the client_certificate_type and/or the server_certificate_type\n\
    \   extensions in an extended client hello message.  The hello extension\n   mechanism\
    \ is described in Section 7.4.1.4 of TLS 1.2 [RFC5246].\n   The client_certificate_type\
    \ extension in the client hello indicates\n   the certificate types the client\
    \ is able to provide to the server,\n   when requested using a certificate_request\
    \ message.\n   The server_certificate_type extension in the client hello indicates\n\
    \   the types of certificates the client is able to process when provided\n  \
    \ by the server in a subsequent certificate payload.\n   The client_certificate_type\
    \ and server_certificate_type extensions\n   sent in the client hello each carry\
    \ a list of supported certificate\n   types, sorted by client preference.  When\
    \ the client supports only\n   one certificate type, it is a list containing a\
    \ single element.\n   The TLS client MUST omit certificate types from the\n  \
    \ client_certificate_type extension in the client hello if it does not\n   possess\
    \ the corresponding raw public key or certificate that it can\n   provide to the\
    \ server when requested using a certificate_request\n   message, or if it is not\
    \ configured to use one with the given TLS\n   server.  If the client has no remaining\
    \ certificate types to send in\n   the client hello, other than the default X.509\
    \ type, it MUST omit the\n   client_certificate_type extension in the client hello.\n\
    \   The TLS client MUST omit certificate types from the\n   server_certificate_type\
    \ extension in the client hello if it is unable\n   to process the corresponding\
    \ raw public key or other certificate\n   type.  If the client has no remaining\
    \ certificate types to send in\n   the client hello, other than the default X.509\
    \ certificate type, it\n   MUST omit the entire server_certificate_type extension\
    \ from the\n   client hello.\n"
- title: 4.2.  Server Hello
  contents:
  - "4.2.  Server Hello\n   If the server receives a client hello that contains the\n\
    \   client_certificate_type extension and/or the server_certificate_type\n   extension,\
    \ then three outcomes are possible:\n   1.  The server does not support the extension\
    \ defined in this\n       document.  In this case, the server returns the server\
    \ hello\n       without the extensions defined in this document.\n   2.  The server\
    \ supports the extension defined in this document, but\n       it does not have\
    \ any certificate type in common with the client.\n       Then, the server terminates\
    \ the session with a fatal alert of\n       type \"unsupported_certificate\".\n\
    \   3.  The server supports the extensions defined in this document and\n    \
    \   has at least one certificate type in common with the client.  In\n       this\
    \ case, the processing rules described below are followed.\n   The client_certificate_type\
    \ extension in the client hello indicates\n   the certificate types the client\
    \ is able to provide to the server,\n   when requested using a certificate_request\
    \ message.  If the TLS\n   server wants to request a certificate from the client\
    \ (via the\n   certificate_request message), it MUST include the\n   client_certificate_type\
    \ extension in the server hello.  This\n   client_certificate_type extension in\
    \ the server hello then indicates\n   the type of certificates the client is requested\
    \ to provide in a\n   subsequent certificate payload.  The value conveyed in the\n\
    \   client_certificate_type extension MUST be selected from one of the\n   values\
    \ provided in the client_certificate_type extension sent in the\n   client hello.\
    \  The server MUST also include a certificate_request\n   payload in the server\
    \ hello message.\n   If the server does not send a certificate_request payload\
    \ (for\n   example, because client authentication happens at the application\n\
    \   layer or no client authentication is required) or none of the\n   certificates\
    \ supported by the client (as indicated in the\n   client_certificate_type extension\
    \ in the client hello) match the\n   server-supported certificate types, then\
    \ the client_certificate_type\n   payload in the server hello MUST be omitted.\n\
    \   The server_certificate_type extension in the client hello indicates\n   the\
    \ types of certificates the client is able to process when provided\n   by the\
    \ server in a subsequent certificate payload.  If the client\n   hello indicates\
    \ support of raw public keys in the\n   server_certificate_type extension and\
    \ the server chooses to use raw\n   public keys, then the TLS server MUST place\
    \ the SubjectPublicKeyInfo\n   structure into the Certificate payload.  With the\n\
    \   server_certificate_type extension in the server hello, the TLS server\n  \
    \ indicates the certificate type carried in the Certificate payload.\n   This\
    \ additional indication enables avoiding parsing ambiguities since\n   the Certificate\
    \ payload may contain either the X.509 certificate or a\n   SubjectPublicKeyInfo\
    \ structure.  Note that only a single value is\n   permitted in the server_certificate_type\
    \ extension when carried in\n   the server hello.\n"
- title: 4.3.  Client Authentication
  contents:
  - "4.3.  Client Authentication\n   When the TLS server has specified RawPublicKey\
    \ as the\n   client_certificate_type, authentication of the TLS client to the\
    \ TLS\n   server is supported only through authentication of the received\n  \
    \ client SubjectPublicKeyInfo via an out-of-band method.\n"
- title: 4.4.  Server Authentication
  contents:
  - "4.4.  Server Authentication\n   When the TLS server has specified RawPublicKey\
    \ as the\n   server_certificate_type, authentication of the TLS server to the\
    \ TLS\n   client is supported only through authentication of the received\n  \
    \ client SubjectPublicKeyInfo via an out-of-band method.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   Figures 6, 7, and 8 illustrate example exchanges.  Note that\
    \ TLS\n   ciphersuites using a Diffie-Hellman exchange offering forward secrecy\n\
    \   can be used with a raw public key, although this document does not\n   show\
    \ the information exchange at that level with the subsequent\n   message flows.\n"
- title: 5.1.  TLS Server Uses a Raw Public Key
  contents:
  - "5.1.  TLS Server Uses a Raw Public Key\n   This section shows an example where\
    \ the TLS client indicates its\n   ability to receive and validate a raw public\
    \ key from the server.  In\n   this example, the client is quite restricted since\
    \ it is unable to\n   process other certificate types sent by the server.  It\
    \ also does not\n   have credentials at the TLS layer it could send to the server\
    \ and\n   therefore omits the client_certificate_type extension.  Hence, the\n\
    \   client only populates the server_certificate_type extension with the\n   raw\
    \ public key type, as shown in (1).\n   When the TLS server receives the client\
    \ hello, it processes the\n   extension.  Since it has a raw public key, it indicates\
    \ in (2) that\n   it had chosen to place the SubjectPublicKeyInfo structure into\
    \ the\n   Certificate payload (3).\n   The client uses this raw public key in\
    \ the TLS handshake together\n   with an out-of-band validation technique, such\
    \ as DANE, to verify it.\n  client_hello,\n  server_certificate_type=(RawPublicKey)\
    \ // (1)\n                         ->\n                         <- server_hello,\n\
    \                            server_certificate_type=RawPublicKey, // (2)\n  \
    \                          certificate, // (3)\n                            server_key_exchange,\n\
    \                            server_hello_done\n  client_key_exchange,\n  change_cipher_spec,\n\
    \  finished               ->\n                         <- change_cipher_spec,\n\
    \                            finished\n  Application Data       <-------> Application\
    \ Data\n     Figure 6: Example with Raw Public Key Provided by the TLS Server\n"
- title: 5.2.  TLS Client and Server Use Raw Public Keys
  contents:
  - "5.2.  TLS Client and Server Use Raw Public Keys\n   This section shows an example\
    \ where the TLS client as well as the TLS\n   server use raw public keys.  This\
    \ is one of the use cases envisioned\n   for smart object networking.  The TLS\
    \ client in this case is an\n   embedded device that is configured with a raw\
    \ public key for use with\n   TLS and is also able to process a raw public key\
    \ sent by the server.\n   Therefore, it indicates these capabilities in (1). \
    \ As in the\n   previously shown example, the server fulfills the client's request,\n\
    \   indicates this via the RawPublicKey value in the\n   server_certificate_type\
    \ payload (2), and provides a raw public key in\n   the Certificate payload back\
    \ to the client (see (3)).  The TLS server\n   demands client authentication,\
    \ and therefore includes a\n   certificate_request (4).  The client_certificate_type\
    \ payload in (5)\n   indicates that the TLS server accepts a raw public key. \
    \ The TLS\n   client, which has a raw public key pre-provisioned, returns it in\
    \ the\n   Certificate payload (6) to the server.\n"
- title: client_hello,
  contents:
  - 'client_hello,

    '
- title: client_certificate_type=(RawPublicKey) // (1)
  contents:
  - 'client_certificate_type=(RawPublicKey) // (1)

    '
- title: server_certificate_type=(RawPublicKey) // (1)
  contents:
  - "server_certificate_type=(RawPublicKey) // (1)\n                         ->\n\
    \                         <-  server_hello,\n                             server_certificate_type=RawPublicKey\
    \ // (2)\n                             certificate, // (3)\n                 \
    \            client_certificate_type=RawPublicKey // (5)\n                   \
    \          certificate_request, // (4)\n                             server_key_exchange,\n\
    \                             server_hello_done\n"
- title: certificate, // (6)
  contents:
  - 'certificate, // (6)

    '
- title: client_key_exchange,
  contents:
  - 'client_key_exchange,

    '
- title: change_cipher_spec,
  contents:
  - 'change_cipher_spec,

    '
- title: finished                  ->
  contents:
  - "finished                  ->\n                         <- change_cipher_spec,\n\
    \                            finished\n"
- title: Application Data        <------->     Application Data
  contents:
  - "Application Data        <------->     Application Data\n   Figure 7: Example\
    \ with Raw Public Key provided by the TLS Server and\n                       \
    \         the Client\n"
- title: 5.3.  Combined Usage of Raw Public Keys and X.509 Certificates
  contents:
  - "5.3.  Combined Usage of Raw Public Keys and X.509 Certificates\n   This section\
    \ shows an example combining a raw public key and an X.509\n   certificate.  The\
    \ client uses a raw public key for client\n   authentication, and the server provides\
    \ an X.509 certificate.  This\n   exchange starts with the client indicating its\
    \ ability to process an\n   X.509 certificate, OpenPGP certificate, or a raw public\
    \ key, if\n   provided by the server.  It prefers a raw public key, since the\n\
    \   RawPublicKey value precedes the other values in the\n   server_certificate_type\
    \ vector.  Additionally, the client indicates\n   that it has a raw public key\
    \ for client-side authentication (see\n   (1)).  The server chooses to provide\
    \ its X.509 certificate in (3) and\n   indicates that choice in (2).  For client\
    \ authentication, the server\n   indicates in (4) that it has selected the raw\
    \ public key format and\n   requests a certificate from the client in (5).  The\
    \ TLS client\n   provides a raw public key in (6) after receiving and processing\
    \ the\n   TLS server hello message.\n"
- title: client_hello,
  contents:
  - 'client_hello,

    '
- title: server_certificate_type=(RawPublicKey, X.509, OpenPGP)
  contents:
  - 'server_certificate_type=(RawPublicKey, X.509, OpenPGP)

    '
- title: client_certificate_type=(RawPublicKey) // (1)
  contents:
  - "client_certificate_type=(RawPublicKey) // (1)\n                         ->\n\
    \                         <-  server_hello,\n                             server_certificate_type=X.509\
    \ // (2)\n                             certificate, // (3)\n                 \
    \            client_certificate_type=RawPublicKey // (4)\n                   \
    \          certificate_request, // (5)\n                             server_key_exchange,\n\
    \                             server_hello_done\n"
- title: certificate, // (6)
  contents:
  - 'certificate, // (6)

    '
- title: client_key_exchange,
  contents:
  - 'client_key_exchange,

    '
- title: change_cipher_spec,
  contents:
  - 'change_cipher_spec,

    '
- title: finished                  ->
  contents:
  - "finished                  ->\n                          <- change_cipher_spec,\n\
    \                             finished\n"
- title: Application Data        <------->     Application Data
  contents:
  - "Application Data        <------->     Application Data\n                   Figure\
    \ 8: Hybrid Certificate Example\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The transmission of raw public keys, as described\
    \ in this document,\n   provides benefits by lowering the over-the-air transmission\
    \ overhead\n   since raw public keys are naturally smaller than an entire\n  \
    \ certificate.  There are also advantages from a code-size point of\n   view for\
    \ parsing and processing these keys.  The cryptographic\n   procedures for associating\
    \ the public key with the possession of a\n   private key also follows standard\
    \ procedures.\n   However, the main security challenge is how to associate the\
    \ public\n   key with a specific entity.  Without a secure binding between\n \
    \  identifier and key, the protocol will be vulnerable to man-in-the-\n   middle\
    \ attacks.  This document assumes that such binding can be made\n   out-of-band,\
    \ and we list a few examples in Section 1.  DANE [RFC6698]\n   offers one such\
    \ approach.  In order to address these vulnerabilities,\n   specifications that\
    \ make use of the extension need to specify how the\n   identifier and public\
    \ key are bound.  In addition to ensuring the\n   binding is done out-of-band,\
    \ an implementation also needs to check\n   the status of that binding.\n   If\
    \ public keys are obtained using DANE, these public keys are\n   authenticated\
    \ via DNSSEC.  Using pre-configured keys is another out-\n   of-band method for\
    \ authenticating raw public keys.  While pre-\n   configured keys are not suitable\
    \ for a generic Web-based e-commerce\n   environment, such keys are a reasonable\
    \ approach for many smart\n   object deployments where there is a close relationship\
    \ between the\n   software running on the device and the server-side communication\n\
    \   endpoint.  Regardless of the chosen mechanism for out-of-band public\n   key\
    \ validation, an assessment of the most suitable approach has to be\n   made prior\
    \ to the start of a deployment to ensure the security of the\n   system.\n   An\
    \ attacker might try to influence the handshake exchange to make the\n   parties\
    \ select different certificate types than they would normally\n   choose.\n  \
    \ For this attack, an attacker must actively change one or more\n   handshake\
    \ messages.  If this occurs, the client and server will\n   compute different\
    \ values for the handshake message hashes.  As a\n   result, the parties will\
    \ not accept each others' Finished messages.\n   Without the master_secret, the\
    \ attacker cannot repair the Finished\n   messages, so the attack will be discovered.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has registered a new value in the \"TLS Certificate\
    \ Types\"\n   subregistry of the \"Transport Layer Security (TLS) Extensions\"\
    \n   registry [TLS-Ext-Registry], as follows:\n   Value: 2\n   Description: Raw\
    \ Public Key\n   Reference: RFC 7250\n   IANA has allocated two new TLS extensions,\
    \ client_certificate_type\n   and server_certificate_type, from the \"TLS ExtensionType\
    \ Values\"\n   subregistry defined in [RFC5246].  These extensions are used in\
    \ both\n   the client hello message and the server hello message.  The new\n \
    \  extension types are used for certificate type negotiation.  The\n   values\
    \ carried in these extensions are taken from the \"TLS\n   Certificate Types\"\
    \ subregistry of the \"Transport Layer Security (TLS)\n   Extensions\" registry\
    \ [TLS-Ext-Registry].\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The feedback from the TLS working group meeting at IETF\
    \ 81 has\n   substantially shaped the document, and we would like to thank the\n\
    \   meeting participants for their input.  The support for hashes of\n   public\
    \ keys has been moved to [CACHED-INFO] after the discussions at\n   the IETF 82\
    \ meeting.\n   We would like to thank the following persons for their review\n\
    \   comments: Martin Rex, Bill Frantz, Zach Shelby, Carsten Bormann,\n   Cullen\
    \ Jennings, Rene Struik, Alper Yegin, Jim Schaad, Barry Leiba,\n   Paul Hoffman,\
    \ Robert Cragie, Nikos Mavrogiannopoulos, Phil Hunt, John\n   Bradley, Klaus Hartke,\
    \ Stefan Jucker, Kovatsch Matthias, Daniel Kahn\n   Gillmor, Peter Sylvester,\
    \ Hauke Mehrtens, Alexey Melnikov, Stephen\n   Farrell, Richard Barnes, and James\
    \ Manger.  Nikos Mavrogiannopoulos\n   contributed the design for reusing the\
    \ certificate type registry.\n   Barry Leiba contributed guidance for the IANA\
    \ Considerations text.\n   Stefan Jucker, Kovatsch Matthias, and Klaus Hartke\
    \ provided\n   implementation feedback regarding the SubjectPublicKeyInfo structure.\n\
    \   Christer Holmberg provided the General Area (Gen-Art) review, Yaron\n   Sheffer\
    \ provided the Security Directorate (SecDir) review, Bert\n   Greevenbosch provided\
    \ the Applications Area Directorate review, and\n   Linda Dunbar provided the\
    \ Operations Directorate review.\n   We would like to thank our TLS working group\
    \ chairs, Eric Rescorla\n   and Joe Salowey, for their guidance and support. \
    \ Finally, we would\n   like to thank Sean Turner, who is the responsible Security\
    \ Area\n   Director for this work, for his review comments and suggestions.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [PKIX]     Cooper, D., Santesson, S., Farrell,\
    \ S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public\
    \ Key\n              Infrastructure Certificate and Certificate Revocation List\n\
    \              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC2119]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC3279]  Bassham, L., Polk, W., and R. Housley,\
    \ \"Algorithms and\n              Identifiers for the Internet X.509 Public Key\n\
    \              Infrastructure Certificate and Certificate Revocation List\n  \
    \            (CRL) Profile\", RFC 3279, April 2002.\n   [RFC5246]  Dierks, T.\
    \ and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol\
    \ Version 1.2\", RFC 5246, August 2008.\n   [RFC5480]  Turner, S., Brown, D.,\
    \ Yiu, K., Housley, R., and T. Polk,\n              \"Elliptic Curve Cryptography\
    \ Subject Public Key\n              Information\", RFC 5480, March 2009.\n   [TLS-Ext-Registry]\n\
    \              IANA, \"Transport Layer Security (TLS) Extensions\",\n        \
    \      <http://www.iana.org/assignments/\n              tls-extensiontype-values>.\n\
    \   [X.690]    ITU-T, \"Information technology - ASN.1 encoding rules:\n     \
    \         Specification of Basic Encoding Rules (BER), Canonical\n           \
    \   Encoding Rules (CER) and Distinguished Encoding Rules\n              (DER)\"\
    , ITU-T Recommendation X.690, ISO/IEC 8825-1:2002,\n              2002.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ASN.1-Dump]\n              Gutmann, P., \"\
    ASN.1 Object Dump Program\", February 2013,\n              <http://www.cs.auckland.ac.nz/~pgut001/>.\n\
    \   [CACHED-INFO]\n              Santesson, S. and H. Tschofenig, \"Transport\
    \ Layer Security\n              (TLS) Cached Information Extension\", Work in\
    \ Progress,\n              February 2014.\n   [CoAP]     Shelby, Z., Hartke, K.,\
    \ and C. Bormann, \"The Constrained\n              Application Protocol (CoAP)\"\
    , RFC 7252, June 2014.\n   [Defeating-SSL]\n              Marlinspike, M., \"\
    New Tricks for Defeating SSL in\n              Practice\", February 2009, <http://www.blackhat.com/\n\
    \              presentations/bh-dc-09/Marlinspike/\n              BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf>.\n\
    \   [LDAP]     Sermersheim, J., \"Lightweight Directory Access Protocol\n    \
    \          (LDAP): The Protocol\", RFC 4511, June 2006.\n   [RFC6698]  Hoffman,\
    \ P. and J. Schlyter, \"The DNS-Based Authentication\n              of Named Entities\
    \ (DANE) Transport Layer Security (TLS)\n              Protocol: TLSA\", RFC 6698,\
    \ August 2012.\n"
- title: Appendix A.  Example Encoding
  contents:
  - "Appendix A.  Example Encoding\n   For example, the hex sequence shown in Figure\
    \ 9 describes a\n   SubjectPublicKeyInfo structure inside the certificate payload.\n\
    \          0     1     2     3     4     5     6     7     8     9\n      +------+-----+-----+-----+-----+-----+-----+-----+-----+-----\n\
    \   1  | 0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,\n   2  |\
    \ 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81,\n   3  | 0x8d, 0x00,\
    \ 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xcd,\n   4  | 0xfd, 0x89, 0x48, 0xbe,\
    \ 0x36, 0xb9, 0x95, 0x76, 0xd4, 0x13,\n   5  | 0x30, 0x0e, 0xbf, 0xb2, 0xed, 0x67,\
    \ 0x0a, 0xc0, 0x16, 0x3f,\n   6  | 0x51, 0x09, 0x9d, 0x29, 0x2f, 0xb2, 0x6d, 0x3f,\
    \ 0x3e, 0x6c,\n   7  | 0x2f, 0x90, 0x80, 0xa1, 0x71, 0xdf, 0xbe, 0x38, 0xc5, 0xcb,\n\
    \   8  | 0xa9, 0x9a, 0x40, 0x14, 0x90, 0x0a, 0xf9, 0xb7, 0x07, 0x0b,\n   9  |\
    \ 0xe1, 0xda, 0xe7, 0x09, 0xbf, 0x0d, 0x57, 0x41, 0x86, 0x60,\n   10 | 0xa1, 0xc1,\
    \ 0x27, 0x91, 0x5b, 0x0a, 0x98, 0x46, 0x1b, 0xf6,\n   11 | 0xa2, 0x84, 0xf8, 0x65,\
    \ 0xc7, 0xce, 0x2d, 0x96, 0x17, 0xaa,\n   12 | 0x91, 0xf8, 0x61, 0x04, 0x50, 0x70,\
    \ 0xeb, 0xb4, 0x43, 0xb7,\n   13 | 0xdc, 0x9a, 0xcc, 0x31, 0x01, 0x14, 0xd4, 0xcd,\
    \ 0xcc, 0xc2,\n   14 | 0x37, 0x6d, 0x69, 0x82, 0xd6, 0xc6, 0xc4, 0xbe, 0xf2, 0x34,\n\
    \   15 | 0xa5, 0xc9, 0xa6, 0x19, 0x53, 0x32, 0x7a, 0x86, 0x0e, 0x91,\n   16 |\
    \ 0x82, 0x0f, 0xa1, 0x42, 0x54, 0xaa, 0x01, 0x02, 0x03, 0x01,\n   17 | 0x00, 0x01\n\
    \      Figure 9: Example SubjectPublicKeyInfo Structure Byte Sequence\n   The\
    \ decoded byte sequence shown in Figure 9 (for example, using Peter\n   Gutmann's\
    \ ASN.1 decoder [ASN.1-Dump]) illustrates the structure, as\n   shown in Figure\
    \ 10.\n   Offset  Length   Description\n   -------------------------------------------------------------------\n\
    \      0     3+159:   SEQUENCE {\n      3      2+13:     SEQUENCE {\n      5 \
    \      2+9:      OBJECT IDENTIFIER Value (1 2 840 113549 1 1 1)\n            \
    \     :             PKCS #1, rsaEncryption\n     16       2+0:      NULL\n   \
    \              :      }\n     18     3+141:    BIT STRING, encapsulates {\n  \
    \   22     3+137:      SEQUENCE {\n     25     3+129:        INTEGER Value (1024\
    \ bit)\n    157       2+3:        INTEGER Value (65537)\n                 :  \
    \      }\n                 :      }\n                 :    }\n       Figure 10:\
    \ Decoding of Example SubjectPublicKeyInfo Structure\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul Wouters (editor)\n   Red Hat\n   EMail: pwouters@redhat.com\n\
    \   Hannes Tschofenig (editor)\n   ARM Ltd.\n   6060 Hall in Tirol\n   Austria\n\
    \   EMail: Hannes.tschofenig@gmx.net\n   URI:   http://www.tschofenig.priv.at\n\
    \   John Gilmore\n   Electronic Frontier Foundation\n   PO Box 170608\n   San\
    \ Francisco, California  94117\n   USA\n   Phone: +1 415 221 6524\n   EMail: gnu@toad.com\n\
    \   URI:   https://www.toad.com/\n   Samuel Weiler\n   Parsons\n   7110 Samuel\
    \ Morse Drive\n   Columbia, Maryland  21046\n   US\n   EMail: weiler@tislabs.com\n\
    \   Tero Kivinen\n   INSIDE Secure\n   Eerikinkatu 28\n   Helsinki  FI-00180\n\
    \   FI\n   EMail: kivinen@iki.fi\n"
