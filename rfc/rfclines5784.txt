Abstract This document describes a way to represent Sieve email filtering language scripts in XML.
Representing Sieves in XML is intended not as an alternate storage format for Sieve but rather as a means to facilitate manipulation of scripts using XML tools.
The XML representation also defines additional elements that have no counterparts in the regular Sieve language.
These elements are intended for use by graphical user interfaces and provide facilities for labeling or grouping sections of a script so they can be displayed more conveniently.
These elements are represented as specially structured comments in regular Sieve format.
Sieve [RFC5228] is a language for filtering email messages at or around the time of final delivery.
It is designed to be implementable on either a mail client or mail server.
It is meant to be extensible, simple, and independent of access protocol, mail architecture, and operating system, and it is intended to be manipulated by a variety of different user interfaces.
Some user interface environments have extensive existing facilities for manipulating material represented in XML [XML].
While adding support for alternate data syntaxes may be possible in most if not all of these environments, it may not be particularly convenient to do so.
The obvious way to deal with this issue is to map Sieves into XML, possibly on a separate back end system, manipulate the XML, and convert it back to normal Sieve format.
The fact that conversion into and out of XML may be done as a separate operation on a different system argues strongly for defining a common XML representation for Sieve.
This way, different front end user interfaces can be used with different back end mapping and storage facilities.
Another issue with the creation and manipulation of Sieve scripts by user interfaces is that the language is strictly focused on describing email filtering operations.
The language contains no mechanisms for indicating how a given script should be presented in a user interface.
Such information can be represented in XML very easily, so it makes sense to define a framework to do this as part of the XML format.
A structured comment convention is then used to retain this information when the script is converted to normal Sieve format.
It should be noted, however, that the ability for different front ends to use the same mapping and storage facilities
does not mean that the additional XML information produced by different front ends will interoperate.
Various Sieve extensions have already been defined, e.g., [RFC5183], [RFC5229], [RFC5230], [RFC5231], [RFC5232], [RFC5233], [RFC5235], [RFC5293], and more are planned.
The set of extensions available varies from one implementation to the next and may even change as a result of configuration choices.
It is therefore essential that the XML representation of Sieve be able to accommodate Sieve extensions without requiring schema changes.
It is also desirable that Sieve extensions not require changes to the code that converts to and from the XML representation.
This specification defines an XML representation for Sieve scripts and explains how the conversion process to and from XML works.
The XML representation is capable of accommodating any future Sieve extension as long as the underlying Sieve grammar remains unchanged.
Furthermore, code that converts from XML to the normal Sieve format requires no changes to accommodate extensions, while code used to convert from normal Sieve format to XML only requires changes when new control commands are added   a rare event.
An XML Schema, Relax NG Schema, and a sample stylesheet to convert from XML format are also provided in the appendices.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
The term "processor" is used throughout this document to refer to agents that convert Sieve to and from the XML representation.
The term "editor" refers to agents that operate on, possibly creating or modifying, Sieves in XML format.
The Sieve language is designed to be highly extensible without making any changes to the basic language syntax.
Accordingly, the syntax of Sieve, defined in Section 8 of [RFC5228], is entirely structural in nature and employs no reserved words of any sort.
Structurally, a Sieve script consists of a series of commands.
Each command, in turn, consists of an identifier, zero or more arguments, an optional test or test list, and finally an optional block containing another series of commands.
Commands are further broken down into controls and actions, although this distinction cannot be determined from the grammar.
At the time of this writing, there are no controls defined that accept both arguments and a test.
Similarly, there are currently no defined actions that allow either a test or a command block.
Nevertheless, the Sieve grammar allows such constructs to be defined by some future extension.
A test consists of an identifier followed by zero or more arguments, then another test or test list.
Unlike commands, tests cannot be followed by a command block.
Here are some examples of Sieve tests.
Note that such tests have to appear as part of a command in order to be syntactically valid:
Test with tagged argument Command or test arguments can be either string lists, whole numbers, or tags.
(Tags are simply identifiers preceded by a colon.)
Note that although the Sieve grammar treats single strings as a degenerate case of a string list, some tests or actions have arguments that can only be individual strings, not lists.
Here is an example showing the use of both a test list and a string list: if anyof (not exists ["From", "Date"], header :contains "from" "fool@example.edu")
{ discard; } Extensions can add new controls, actions, tests, or arguments to existing controls or actions.
Extensions have also changed how string content is interpreted, although this is not relevant to this specification.
However, it is especially important to note that so far, only one of the many defined Sieve extensions
the foreverypart extension [RFC5703]   has added new controls to the language.
It seems safe to assume that, due to their nature, future addition of controls will be relatively rare.
Finally, comments are allowed between lexical elements in a Sieve script.
One important use case for comments is encoding meta data about the script, a facility that is lacking in the Sieve language.
Therefore, comments need to be preserved in the XML representation.
XML Representation of Sieve Sieve controls and actions are represented in XML as "control" or "action" elements, respectively.
The command's identifier appears as a name attribute on the element itself.
This is the only attribute allowed on controls and actions   arguments, tests, test lists, and nested command blocks are all represented as nested elements.
While naming the element after the control or action itself may seem like a better choice, doing so would result in extensions requiring frequent corresponding schema changes.
The example Sieve controls shown in the previous section would be represented as these XML fragments: <control name "stop"/
The example Sieve actions shown above would appear in XML as: <action name "discard"/>
The separation of controls from actions in the XML representation means that conversion from normal Sieve format to XML has to be able to distinguish between controls and actions.
This is easily done by maintaining a list of all known controls since experience indicates new controls are rarely added.
At the time of this writing, the list of defined controls consists of: 1.
It should be noted that with this approach unknown controls will simply be treated as actions and can be passed back and forth between the two representations.
The treatment of a control as an action is unlikely to cause other issues since knowledge of a control's language semantics is almost always required to take advantage of it.
Tests are represented in the same basic way as controls and actions, that is, as a "test" element with a name attribute giving the test identifier.
For example, the following XML fragments show various types of tests: <test name "true"/
> String, number, and tag arguments are represented as "str", "num", and "tag" elements, respectively.
The actual string, number, or tag identifier appears as text inside the element.
None of these elements have any defined attributes.
Several examples of arguments have already appeared in the preceding control, action, and test examples.
Any whitespace in the str body content MUST be preserved by the processor.
Also, note that since strings and tags are represented as element text, any quotes or other syntactic elements required in the regular Sieve representation are dropped rather than being carried over into the XML.
String list arguments are represented as a "list" element, which in turn contains one or more str elements.
Note that this allows the distinction between a single string and a string list containing a single string to be preserved.
This is not essential since a list containing a single string could simply be mapped to a string, but it seems prudent to maintain the distinction when mapping to and from XML.
Nested command blocks appear as a series of control or action elements inside of an outer control or action element.
No block element is needed since an inner command block can only appear once and only after any arguments, tests, or test lists.
For example: <control name "if"> <test name "anyof"> <test name "not"> <test name "exists"> <
</test> </test> <test name "header"> <tag
Sieve comments are mapped to a special "comment" element in XML.
Both hash and bracketed comments are mapped to the same construct so the distinction between the two is lost in XML.
XML comments are not used because some XML tools do not make it convenient to access comment nodes.
Comments are allowed between commands and inside "test" elements.
But comments aren't allowed directly inside commands   due to limitations of XML Schema, special enclosing "preamble" and "postamble" elements are needed: <control name "if"> <preamble>
Check to see if message should be discarded</comment> </preamble
> <test name "anyof"> <test name "not"> <test name "exists"> <
</test> </test> <test name "header"> <tag
XML Display Directives Sometimes graphical user interfaces are a convenient way to provide Sieve management functions to users.
These interfaces typically summarize/annotate/group/display Sieve script(s) in an intuitive way for end users.
To do this effectively, the graphical user interface may require additional information about the Sieve script itself.
That information or "meta data" might include, but is not limited to, a Sieve name (identifying the current Sieve), whether the Sieve is enabled or disabled, and the order in which the parts of the Sieve are presented to the user.
The graphical user interface may also choose to provide mechanisms to allow the user to modify the script.
It is often useful for a graphical user interface to group related Sieve script elements and provide an interface that displays these groups separately so they can be managed as a single object.
Some examples include Sieve statements that together provide vacation responders, blacklists/whitelists, and other types of filtering controls.
Some advanced graphical user interfaces may even provide a natural language representation of a Sieve script and/or an advanced interface to present Sieve statements directly to the user.
A graphical user interface may also choose to support only a subset of action commands in the Sieve language (and its extensions), and so a mechanism to indicate the extent of support and characterize the relationships between those supported action commands and the test (with its arguments) is immensely useful and probably required for clients that may not have complete knowledge of Sieve grammar and semantics.
The Sieve language contains no mechanisms for indicating how a given script should be presented in a user interface.
The language also does not contain any specific mechanisms to represent other sorts of meta data about the script.
Providing support for such meta data as part of a Sieve script is currently totally implementation specific and is usually done by imposing some type of structure on comments.
However, such information can be represented in XML very easily, so it makes sense to define a framework to do this as part of the XML format.
Implementations MAY choose to use structured comments to retain this information when the script is converted to normal Sieve format.
The sample schemata for the XML representation of Sieve allows XML in foreign namespaces to be inserted in the same places "comment" elements can appear in Sieve scripts.
This is the preferred means of including additional information.
Alternately, the schema defines two display directives   displayblock and displaydata   as containers for meta data needed by graphical user interfaces.
Editors MAY use displayblock, displaydata, and foreign namespaces to associate meta data.
Some editors find it inconvenient to preserve this additional data during an editing session.
Editors MAY preserve this data during an editing session for compatibility with other editors.
The displayblock element can be used to enclose any number of Sieve statements at any level.
It is semantically meaningless to the Sieve script itself.
It allows an arbitrary set of attributes.
Implementations MAY use this to provide many simple, display related meta data for the Sieve such as Sieve identifier, group identifier, order of processing, etc.
The displaydata element supports any number of arbitrary child elements.
Implementations MAY use this to represent complex data about that Sieve such as a natural language representation of Sieve or a way to provide the Sieve script directly.
Since the XML representation is not intended as a storage format, there needs to be a way to preserve the additional information that can be included in the XML representation in the normal Sieve syntax.
This is done through the use of three structured comment conventions:
Processors MUST preserve the additional information allowed in the XML format and SHOULD use the structured comment format shown above.
Escaping this sequence would often be inconvenient for processors.
Validation A processor MAY validate documents against a schema, and it MAY reject any that do not conform.
For any document that a processor does not reject as invalid, any markup that the processor cannot understand by reference to this specification MAY be discarded.
Note that example Relax NG and XML Schema are given in the appendices below.
Any syntactically valid Sieve script can be represented in XML.
Accordingly, all security considerations applicable to Sieve and any extensions used also apply to the XML representation.
The use of XML carries its own security risks.
Section 7 of RFC 3470
It is axiomatic that a Sieve editor must be trusted to do what the user specifies.
If XML formats are used, this trust necessarily must extend to the components involved in converting to and from XML format.
Arbitrary data can be included using other namespaces or placed in the extensible displayblock and displaydata constructs defined in this specification, possibly including entire scripts and other executable content in languages other than Sieve.
Such material will necessarily have its own security considerations, which are beyond the scope of this document.
This section registers a new XML namespace per the procedures in RFC 3688 [RFC3688].
IETF Sieve working group <ietf mta filters@imc.org
" "http://www.w3.org/TR/xhtml basic/xhtml basic10.dtd"> <html xmlns "http://www.w3.org/1999/xhtml"> <head> <meta http equiv
Namespace for Sieve Language objects expressed in XML</h1> <h2
The example Sieve script given in Section 9 of [RFC5228] would be represented in XML as the following code component: <sieve xmlns "urn:ietf:params:xml:ns:sieve">
Example Sieve Filter Declare any optional features or extensions used by the script </comment>
<comment> Handle messages from known mailing lists.
Move messages from IETF filter discussion list to filter mailbox.
</comment> <control name "if"> <test name "header"> <tag>is</tag
> <str>owner ietf mta filters@imc.org</str
> </test> <action name "fileinto"> <str>
> Keep all messages to or from people in my company.
</comment> <control name "elsif"> <test name "address"> <tag>domain</tag
> </test> <action name "keep"/
Try and catch unsolicited email.
If a message is not to me, or it contains a subject known to be spam, file it away.
</comment> <control name "elsif"> <test name "anyof"> <test name "not"> <test name "address"> <tag
> </test> <test name "header">
> university dipl mas </str
> <action name "fileinto"> <str>spam</str
/control> <control name "else"> <preamble>
Move all other (non company) mail to "personal" mailbox.
> </preamble> <action name "fileinto"> <str
The same script could be annotated with graphical display hints in a variety of ways.
Three possible code components that do this are: <sieve xmlns "urn:ietf:params:xml:ns:sieve"> <control name "require"> <str
> <displayblock name "File filter list mail" order "1" group "FILE TO FOLDER" enable "true"> <control name "if"> <test name "header"
> <str>owner ietf mta filters@imc.org</str
> </test> <action name "fileinto"> <str>
> </displayblock> <displayblock name "Keep all company mail" order "2" group "KEEP MESSAGE" enable "true"> <control name "elsif"> <test name "address"> <tag>domain</tag>
> </test> <action name "keep"/
> </displayblock> <displayblock name "File suspected spam" order "3" group "FILE TO FOLDER" enable "true"> <control name "elsif"
> <test name "anyof"> <test name "not"> <test name "address"> <tag
> </test> <test name "header">
> university dipl mas </str
> <action name "fileinto"> <str>spam</str
> </displayblock> <displayblock name "File noncompany mail as personal" order "4" group "FILE TO FOLDER" enable "true"> <control name "else
"> <action name "fileinto"> <str
Note that since displayblock elements are semantically null as far as the script itself is concerned, they can be used to group structures like elsif and else that are tied to statements in other groups.
/ A separate namespace can be used to embed text or structured information: <sieve xmlns "urn:ietf:params:xml:ns:
If the email header "Sender" is owner ietf mta filters@imc.org, then file it into the "filter" folder.
Otherwise, if the address in the "From" or "To" has a domain that is "example.com", then keep it.
Otherwise, messages meeting with any of these conditions: (1) None of the addresses in "To", "Cc", or "Bcc" contain the domain "example.com".
(2) The "Subject" field matches the pattern  make money fast  or  university dipl mas , then file it into the "spam" folder.
If all else fails, then file the message in the "personal" folder.
Alternately, displaydata elements can be used to accomplish the same thing: <sieve xmlns "urn:ietf:params:xml:ns:sieve"> <displaydata> <nls interpretation
If the email header "Sender" is owner ietf mta filters@imc.org, then file it into the "filter" folder.
Otherwise, if the address in the "From" or "To" has a domain that is "example.com", then keep it.
Otherwise, messages meeting with any of these conditions: (1) None of the addresses in "To","Cc", or "Bcc" contain the domain "example.com".
(2) The "Subject" field matches the pattern  make money fast  or  university dipl mas , then file it into the "spam" folder.
If all else fails, then file the message in the "personal" folder.
Again, structured comments are used to represent this in regular Sieve syntax:
If the email header "Sender" is owner ietf mta filters@imc.org, then file it into the "filter" folder.
Otherwise, if the address in the "From" or "To" has a domain that is "example.com", then keep it.
Otherwise, messages meeting with any of these conditions: (1) None of the addresses in "To","Cc", or "Bcc" contain the domain "example.com".
(2) The "Subject" field matches the pattern  make money fast  or  university dipl mas , then file it into the "spam" folder.
If all else fails, then file the message in the "personal" folder.
the actual Sieve script ...
Appendix B.  XML Schema for Sieves in XML
The following code component is an XML Schema for the XML representation of Sieve scripts.
Most of the elements employing a complex content model allow use of elements in other namespaces, subject to lax XML Schema validation rules.
Additionally, displaydata elements can be used to encapsulate arbitrary XML content.
Finally, displayblock elements can be used as a general purpose grouping mechanism
arbitrary attributes are allowed on displayblock elements.
xml version "1.0" encoding "UTF 8"?
choice maxOccurs "unbounded" minOccurs "0"
:element> <xsd:element name "comment" type "xsd:string"/
complexType name "ambles"> <xsd:choice minOccurs
element name "preamble" type "ambles"/
:element name "postamble" type "ambles"/
<xsd:element ref "preamble" minOccurs "0
<xsd:element ref "test" minOccurs "0" maxOccurs "
> <xsd:element ref "postamble" minOccurs "0
<xsd:attribute use "required" name "name" type "identifier"/
element name "control" type "command"/
> <xsd:element ref "test" minOccurs "0" maxOccurs "
<xsd:attribute use "required" name "name" type "identifier"/
<xsd:element ref "str" minOccurs "1" maxOccurs "
:element> <xsd:element name "tag" type "identifier"/
<xsd:element name "str" type "xsd:
<xsd:element name "num" type "xsd:nonNegativeInteger"/
<xsd:simpleType name "identifier"> <xsd:restriction base "xsd:token">
<xsd:pattern value "[A Za z ]
:element> <xsd:element name "displaydata"> <
sequence minOccurs "0" maxOccurs "unbounded">
Relax NG Schema for Sieves in XML
The following code component defines a Relax NG Schema using compact notation OASISRNC [OASISRNC] for the XML representation of Sieve scripts.
Most of the elements employing a complex content model allow unrestricted use of elements in other namespaces.
Additionally, displaydata elements can be used to encapsulate arbitrary XML content.
Finally, displayblock elements can be used as a general purpose grouping mechanism
arbitrary attributes are allowed on displayblock elements.
} comment   element sieve:comment { xsd:string } ambles
( attribute name { xsd:token { pattern   "
The following code component is a stylesheet that can be used to convert the Sieve in XML representation to regular Sieve format.
Content in other namespaces, displaydata, and displayblock elements are converted to structured comments as appropriate.
xml version "1.0" encoding "UTF 8"?
Convert Sieve in XML to standard Sieve syntax   <xsl:
stylesheet version "1.0" xmlns:xsl "http://www.w3.org/1999/XSL/Transform" xmlns:
Only preserve whitespace in str elements   <xsl:
Match top level sieve node, start processing in sieve mode
Routine to properly literalize quotes in Sieve strings
<xsl:template name "quote string"> <xsl:
> <xsl:call template name "quote string"> <xsl:with param name "str" select "
control sieve:action" mode "sieve"> <xsl:
<xsl:variable name "blockbegin" select "generate id(sieve
list self::sieve:tag  self::sieve:test"> <xsl:apply templates select ".
text> <xsl:apply templates select ".
> </xsl:apply templates> </xsl:when> <xsl:otherwise> <xsl:apply templates select ".
otherwise> </xsl:choose> </xsl:for each> <xsl:choose> <xsl:
when test "count(sieve:control sieve:action) &gt; 0"> <xsl:
otherwise> </xsl:choose> </xsl:template> <xsl:template match "sieve:preamble sieve:postamble" mode "sieve"> <xsl:param name "prefix"/
> <xsl:apply templates mode "sieve"> <xsl:with param name "prefix" select "
<xsl:apply templates select " [not(self::sieve:test)]" mode "sieve"/>
if test "count(descendant::sieve:test) &gt; 0
text> <xsl:for each select "sieve:test"> <xsl:apply templates select ".
if test "count(following sibling::sieve:test) &gt; 0
call template name "quote string"> <xsl:with param name "str" select "text()"/
:template> <xsl:template match "sieve:num" mode "sieve"> <xsl:text xml:space "preserve"
Use numeric suffixes when possible
when test "(number(text()) mod 1073741824)   0"> <xsl:value of select "number(text
when test "(number(text()) mod 1048576)   0"> <xsl:value of select "number(text
"> <xsl:value of select "number(text
:for each select "sieve:str"> <xsl:apply templates select ".
if test "count(following sibling::sieve:str) &gt; 0
> <xsl:template match "sieve:comment" mode "sieve"> <xsl:param name "prefix"/>
Convert display information into structured comments
<xsl:template match "sieve:displayblock" mode "sieve"> <xsl:param name "prefix"/>
> <xsl:template match "sieve:displaydata" mode "sieve"> <xsl:param name "prefix"/>
[/</xsl:text> <xsl:apply templates select ".
