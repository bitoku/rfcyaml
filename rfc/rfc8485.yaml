- contents:
  - '                            Vectors of Trust

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a mechanism for describing and signaling\n
    \  several aspects of a digital identity transaction and its\n   participants.
    \ These aspects are used to determine the amount of\n   trust to be placed in
    that transaction.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8485.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Requirements Language . . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   4\n     1.3.  Identity Model  . . . . . . . . . . . . . . . . . . . . .   5\n
    \    1.4.  Component Architecture  . . . . . . . . . . . . . . . . .   6\n   2.
    \ Component Dimension Definitions . . . . . . . . . . . . . . .   6\n     2.1.
    \ Identity Proofing (P) . . . . . . . . . . . . . . . . . .   7\n     2.2.  Primary
    Credential Usage (C)  . . . . . . . . . . . . . .   8\n     2.3.  Primary Credential
    Management (M) . . . . . . . . . . . .   8\n     2.4.  Assertion Presentation
    (A)  . . . . . . . . . . . . . . .   8\n   3.  Communicating Vector Values to
    RPs  . . . . . . . . . . . . .   9\n     3.1.  On-the-Wire Representation  . .
    . . . . . . . . . . . . .  10\n     3.2.  In OpenID Connect . . . . . . . . .
    . . . . . . . . . . .  11\n   4.  Requesting Vector Values  . . . . . . . . .
    . . . . . . . . .  11\n     4.1.  In OpenID Connect . . . . . . . . . . . . .
    . . . . . . .  12\n   5.  Trustmarks  . . . . . . . . . . . . . . . . . . . .
    . . . . .  12\n   6.  Defining New Vector Values  . . . . . . . . . . . . . .
    . . .  13\n   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . .
    .  14\n     7.1.  Vector of Trust Components Registry . . . . . . . . . . .  14\n
    \      7.1.1.  Registration Template . . . . . . . . . . . . . . . .  14\n       7.1.2.
    \ Initial Registry Contents . . . . . . . . . . . . . .  15\n     7.2.  Addition
    to the OAuth Parameters Registry . . . . . . . .  15\n     7.3.  Additions to
    JWT Claims Registry  . . . . . . . . . . . .  16\n     7.4.  Additions to OAuth
    Token Introspection Response . . . . .  16\n   8.  Security Considerations . .
    . . . . . . . . . . . . . . . . .  16\n   9.  Privacy Considerations  . . . .
    . . . . . . . . . . . . . . .  17\n   10. References  . . . . . . . . . . . .
    . . . . . . . . . . . . .  17\n     10.1.  Normative References . . . . . . .
    . . . . . . . . . . .  17\n     10.2.  Informative References . . . . . . . .
    . . . . . . . . .  18\n   Appendix A.  Vectors of Trust Default Component Value
    Definitions  19\n     A.1.  Identity Proofing . . . . . . . . . . . . . . . .
    . . . .  19\n     A.2.  Primary Credential Usage  . . . . . . . . . . . . . .
    . .  20\n     A.3.  Primary Credential Management . . . . . . . . . . . . . .
    \ 20\n     A.4.  Assertion Presentation  . . . . . . . . . . . . . . . . .  21\n
    \  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  21\n   Authors'
    Addresses  . . . . . . . . . . . . . . . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Methods for measuring trust in digital identity transactions
    have\n   historically fallen into two main categories: either all measurements\n
    \  are combined into a single scalar value or trust decisions are\n   calculated
    locally based on a detailed set of attribute metadata.\n   This document defines
    a method of conveying trust information that is\n   more expressive than a single
    value but less complex than\n   comprehensive attribute metadata.\n   Prior to
    the third edition [SP-800-63-3] published in 2017, NIST\n   Special Publication
    800-63 [SP-800-63-2] used a single scalar\n   measurement of trust called a Level
    of Assurance (LoA).  An LoA can\n   be used to compare different transactions
    within a system at a coarse\n   level.  For instance, an LoA4 transaction is generally
    considered\n   more trusted (across all measured categories) than an LoA2\n   transaction.
    \ The LoA for a given transaction is computed by the\n   Identity Provider (IdP)
    and is consumed by a Relying Party (RP).\n   Since the trust measurement is a
    simple numeric value, it's trivial\n   for RPs to process and compare.  However,
    since each LoA encompasses\n   many different aspects of a transaction, it can't
    express many real-\n   world situations.  For instance, an anonymous user account
    might have\n   a very strong credential, such as would be common of a whistle-blower\n
    \  or political dissident.  Despite the strong credential, the lack of\n   identity
    proofing would make any transactions conducted by the\n   account to fall into
    a low LoA.  Furthermore, different use cases and\n   domains require subtly different
    definitions for their LoA\n   categories, and one group's LoA2 is not equivalent
    or even comparable\n   to another group's LoA2.\n   Attribute-Based Access Control
    (ABAC) systems used by RPs may need to\n   know details about a user's attributes,
    such as how recently the\n   attribute data was verified and by whom.  Attribute
    metadata systems\n   are capable of expressing extremely fine-grained detail about
    the\n   transaction.  However, this approach requires the IdP to collect,\n   store,
    and transmit all of this attribute data for the RP's\n   consumption.  The RP
    must process this data, which may be prohibitive\n   for trivial security decisions.\n
    \  The Vectors of Trust (VoT) approach proposed in this document seeks a\n   balance
    between these two alternatives by allowing expression of\n   multiple aspects
    of an identity transaction (including but not\n   limited to identity proofing,
    credential strength, credential\n   management, and assertion strength), without
    requiring full attribute\n   metadata descriptions.  This method of measurement
    gives more\n   actionable data and expressiveness than an LoA, but it is still\n
    \  relatively easy for the RP to process.  It is anticipated that VoT\n   can
    be used alongside more detailed attribute metadata systems, such\n   as the one
    proposed by NISITIR 8112 [NISTIR-8112].  The RP can use\n   the vector value for
    most basic decisions but be able to query the\n   IdP for additional attribute
    metadata where needed.  Furthermore, for\n   RPs that do not have a need for the
    vector's more fine-grained\n   detail, it is anticipated that some trust frameworks
    will provide a\n   simple mapping between certain sets of vector values to LoAs.
    \ In\n   such systems, an RP is given a choice of how much detail to request\n
    \  from the IdP in order to process a given transaction.\n   This document defines
    a data model for these vectors and an on-the-\n   wire format for conveying them
    between parties.  The values of the\n   vectors defined by the data model are
    anchored in a trust definition.\n   This document also provides guidance for defining
    values for use in\n   conveying this information, including four component categories
    and\n   guidance on defining values within those categories.  Additionally,\n
    \  this document defines a general-purpose set of component values in an\n   appendix
    (Appendix A) for use cases that do not need something more\n   specific.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Language
  - contents:
    - "1.2.  Terminology\n   Identity Federation:  A protocol in which an Identity
      Provider (IdP)\n      asserts a user's identity information to an RP.  through
      the use\n      of a cryptographic assertion or other verifiable mechanism, or
      a\n      system implementing such a protocol.  It is also referred to\n      simply
      as \"federation\".\n   Identity Provider (IdP):  A system that manages identity
      information\n      and is able to assert this information across the network
      through\n      an identity API.\n   Identity Subject:  The individual (user)
      engaging in the identity\n      transaction, that is, being identified by the
      identity provider to\n      the RP.\n   Identity Proofing:  The process of verifying
      and validating that a\n      set of identity attributes belongs to a real-world
      identity\n      subject.\n   Primary Credential:  The means used by the identity
      subject to\n      authenticate to the identity provider.\n   Federated Credential:
      \ The assertion presented by the IdP to the RP\n      across the network to
      authenticate the user.\n   Relying Party (RP):  A system that consumes identity
      information from\n      an IdP for the purposes of authenticating the user.\n
      \  Trust Framework:  A document containing business rules and legal\n      clauses
      that defines how different parties in an identity\n      transaction may act.\n
      \  Trustmark:  A URL referencing a specific trust framework and its\n      definition
      of vector components and vector component values.\n   Trustmark Provider:  Defines
      the trust framework referenced by its\n      trustmark and can verify that a
      given system (such as an identity\n      provider) is both capable of asserting
      and allowed to assert the\n      vector component values it is claiming.\n   Vector:
      \ A multi-part data structure, which is used here for\n      conveying information
      about an authentication transaction.\n   Vector Component:  One of several constituent
      parts that make up a\n      vector, indicating a category of information.\n
      \  Vector Component Value:  One of the values applied to a vector\n      component
      within a vector.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Identity Model\n   This document assumes the following model for identity
      based on\n   identity federation technologies:\n   The identity subject (also
      known as the user) is associated with an\n   identity provider that acts as
      a trusted third party on behalf of the\n   user, with regard to an RP by making
      identity assertions about the\n   user to the RP.\n   The real-world individual
      represented by the identity subject is in\n   possession of a primary credential
      bound to the identity subject by\n   the identity provider (or an agent thereof)
      in such a way that the\n   binding between the credential and the real-world
      user is a\n   representation of the identity proofing process performed by the\n
      \  identity provider (or an agent thereof) to verify the identity of the\n   real-world
      individual.  This information is carried across the\n   network as part of an
      identity assertion presented to the RP during\n   the authentication transaction.\n"
    title: 1.3.  Identity Model
  - contents:
    - "1.4.  Component Architecture\n   The term \"Vectors of Trust\" is inspired
      by the mathematical construct\n   of a vector, which is defined as an item composed
      of multiple\n   independent values.\n   An important goal for this work is to
      balance the need for simplicity\n   (particularly on the part of the RP) with
      the need for\n   expressiveness.  As such, this vector construct is designed
      to be\n   composable and extensible.\n   The vector is constructed of orthogonal
      components, such that no\n   aspect of a component overlaps an aspect of another
      component, as\n   much as is possible.\n"
    title: 1.4.  Component Architecture
  title: 1.  Introduction
- contents:
  - "2.  Component Dimension Definitions\n   This specification defines four orthogonal
    components: identity\n   proofing, primary credential usage, primary credential
    management,\n   and assertion presentation.\n   This specification also defines
    values for each of these components\n   to be used in the absence of a more specific
    trust framework in\n   Appendix A.  It is expected that trust frameworks will
    provide\n   context, semantics, and mapping to legal statutes and business rules\n
    \  for each value in each component.\n   Consequently, a particular vector value
    can only be compared with\n   vectors defined in the context of a specific trust
    framework.  The RP\n   MUST understand and take into account the trust framework
    context in\n   which a vector is being expressed in order to process a vector\n
    \  correctly.\n   Each component is identified by a demarcator consisting of a
    single\n   uppercase ASCII letter in the range \"[A-Z]\".  The demarcator SHOULD\n
    \  reflect the category with which it is associated in a natural manner.\n   Demarcators
    for components MUST be registered as described in\n   Section 7.  It is anticipated
    that trust framework definitions will\n   use this registry to define specialized
    components, but it is\n   RECOMMENDED that trust frameworks reuse existing components\n
    \  categories wherever possible.  The same demarcator MUST NOT be used\n   for
    two different dimensions, and different trust frameworks SHOULD\n   use the same
    demarcator for similar information.  It is further\n   anticipated that there
    will be relatively few component dimensions\n   over time, and this specification
    defines four general-purpose\n   categories in this section.  Note that since
    the processing for all\n   vector values is contextual to a trust framework, the
    exact semantics\n   of interpreting a component will vary based on the trust framework
    in\n   use.\n   The value for a given component within a vector of trust is defined\n
    \  by its demarcator character followed by a single digit or lowercase\n   ASCII
    letter in the range \"[0-9a-z]\".  Categories that have a natural\n   ordering
    SHOULD prefer digits, with larger digits indicating stronger\n   assertions than
    smaller digits.  Categories that do not have a\n   natural ordering, or that can
    have an ambiguous ordering, SHOULD\n   prefer letters.  Note that while letters
    could also imply order, they\n   can also more naturally be used mnemonically.
    \ Trust frameworks MAY\n   use any possible values within a category without the
    need for them\n   to be contiguous.\n   Categories MAY use both letters and digits
    simultaneously.  For\n   example, a category could define \"0\" as meaning \"no
    statement is\n   made\" while using letters such as \"a\", \"b\", and \"c\" for
    normal values\n   to indicate specific options.  Another system could have an
    ordered\n   base set of digits with additional details provided by letters.\n
    \  Each component MAY be repeated with multiple different values within\n   a
    single vector, representing the logical AND of the values (see\n   Section 3.1
    for details).  The same component and value combination\n   MUST NOT be repeated
    within a single vector.  For example, a vector\n   could contain both \"P1\" and
    \"Pa\" but not two instances of \"P1\".  A\n   trust framework MAY define additional
    restrictions on combinations of\n   values.\n   Regardless of the type of value,
    the RP MUST NOT assume that the\n   values assigned to each component of a vector
    have inherent ordinal\n   or subsumptive properties when compared to the same
    or other\n   components in the vector space without specific knowledge of the\n
    \  trust framework in use.  In other words, \"1\" is always different from\n   \"2\",
    but it is dangerous to assume that \"2\" is always better than \"1\"\n   or that
    \"2\" satisfies all the requirements of \"1\".\n"
  - contents:
    - "2.1.  Identity Proofing (P)\n   The identity proofing dimension defines, overall,
      how strongly the\n   set of identity attributes have been verified and vetted.
      \ In other\n   words, this dimension describes how likely it is that a given
      digital\n   identity transaction corresponds to a particular (real-world)\n
      \  identity subject.  For example, did the user have to provide\n   documentation
      to a trusted party to prove their legal name and\n   address, or were they able
      to self-assert such values?\n   This dimension uses the \"P\" demarcator, such
      as \"P0\", \"P1\", etc.\n   Most definitions of identity proofing will have
      a natural ordering,\n   as more or less stringent proofing can be applied to
      an individual\n   being granted an account.  In such cases, it is RECOMMENDED
      that a\n   digit be used for this component and that only a single value be\n
      \  allowed to be communicated in a transaction.\n"
    title: 2.1.  Identity Proofing (P)
  - contents:
    - "2.2.  Primary Credential Usage (C)\n   The primary credential usage dimension
      defines how strongly the\n   primary credential can be verified by the IdP.
      \ In other words, how\n   easily that credential could be spoofed or stolen.
      \ For example, did\n   the user log in with a password, a biometric, a cryptographic\n
      \  hardware device, or some combination of the above?\n   This dimension uses
      the \"C\" demarcator, such as \"Ca\", \"Cb\", etc.\n   Most definitions of credential
      usage will not have an overall natural\n   ordering, as there may be several
      equivalent classes described within\n   a trust framework.  In such cases, it
      is RECOMMENDED that a letter be\n   used for this component and that multiple
      distinct credential usage\n   factors be allowed to be communicated simultaneously,
      such as when\n   multi-factor authentication is used.\n"
    title: 2.2.  Primary Credential Usage (C)
  - contents:
    - "2.3.  Primary Credential Management (M)\n   The primary credential management
      dimension conveys information about\n   the expected lifecycle of the primary
      credential in use, including\n   its binding, rotation, and revocation.  In
      other words, the use and\n   strength of policies, practices, and security controls
      used in\n   managing the credential at the IdP and its binding to the intended\n
      \  individual.  For example, can the user bring their own cryptographic\n   device
      or is one provided by the IdP?\n   This dimension uses the \"M\" demarcator,
      such as \"Ma\", \"Mb\", etc.\n   Most definitions of credential management will
      not have an overall\n   natural ordering, though there can be preference and
      comparison\n   between values in some circumstances.  In such cases, it is\n
      \  RECOMMENDED that a letter be used for this component and that\n   multiple
      distinct values be allowed to be communicated\n   simultaneously.\n"
    title: 2.3.  Primary Credential Management (M)
  - contents:
    - "2.4.  Assertion Presentation (A)\n   The assertion presentation dimension defines
      how well the given\n   digital identity can be communicated across the network
      without\n   information leaking to unintended parties and without spoofing.
      \ In\n   other words, this dimension describes how likely it is that a given\n
      \  digital identity was asserted by a given identity provider for the\n   identity
      subject of a given transaction.  While this information is\n   largely already
      known by the RP as a side effect of processing an\n   identity assertion in
      a federation protocol, this dimension is still\n   very useful when the RP requests
      a login (see Section 4) and when\n   describing the capabilities of an IdP.
      \ This value also allows the RP\n   to detect when an assertion is presented
      in a manner it was not\n   intended for, as may be the case with an attack.\n
      \  This dimension uses the \"A\" demarcator, such as \"Aa\", \"Ab\", etc.\n
      \  Most definitions of assertion presentation will not have an overall\n   natural
      ordering.  In such cases, it is RECOMMENDED that a letter be\n   used for this
      component and that multiple values be allowed to be\n   communicated simultaneously.\n"
    title: 2.4.  Assertion Presentation (A)
  title: 2.  Component Dimension Definitions
- contents:
  - "3.  Communicating Vector Values to RPs\n   A vector of trust is designed to be
    used in the context of an\n   identity and authentication transaction, providing
    information about\n   the context of a federated credential.  The vector therefore
    needs to\n   be able to be communicated in the context of the federated credential\n
    \  in a way that is strongly bound to the assertion representing the\n   federated
    credential.\n   This vector has several requirements for use.\n   o  All applicable
    vector components and values need to be combined\n      into a single vector.\n
    \  o  The vector can be communicated across the wire unbroken and\n      untransformed.\n
    \  o  All vector components need to remain individually available, not\n      \"collapsed\"
    into a single value.\n   o  The vector needs to be protected in transit.\n   o
    \ The vector needs to be cryptographically bound to the assertion\n      that
    it is describing.\n   o  The vector needs to be interpreted in the context of
    a specific\n      trust framework definition identified by a trustmark URL.\n
    \  These requirements lead us to defining a simple string-based\n   representation
    of the vector that can be incorporated within a number\n   of different locations
    and protocols without further encoding.\n"
  - contents:
    - "3.1.  On-the-Wire Representation\n   The vector MUST be represented as a period-separated
      ('.') list of\n   vector components.  A vector component type can occur multiple
      times\n   within a single vector, but a specific value of a vector component\n
      \  cannot occur more than once in a single vector.  That is, while\n   \"Cc.Cd\"
      is a valid vector, \"Cc.Cc\" is not.  Multiple values for a\n   component are
      considered a logical AND of the values.\n   Vector component values MAY appear
      in any order within a vector, and\n   the RP MUST consider different orderings
      of the same vector\n   equivalent during processing.  For example, \"P1.Cc.Cd.Aa\",\n
      \  \"Aa.Cc.Cd.P1\", \"Cd.P1.Cc.Aa\", and \"Aa.P1.Cd.Cc\" are all considered\n
      \  equivalent to each other.\n   Possible vector components MAY be omitted from
      a vector.  No holding\n   space is left for an omitted vector component.  If
      a vector component\n   is omitted, the vector is making no claim for that component.
      \ No\n   default values are assumed for a missing component category.\n   Vector
      values MUST be communicated along with a trustmark URL (see\n   Section 5) to
      give the components and component values context.  The\n   trustmark MUST be
      cryptographically bound to the vector value, such\n   as the two values being
      carried together in a signed assertion.  A\n   vector value without context
      is unprocessable, and vectors defined in\n   different contexts are not directly
      comparable as whole values.\n   Different trust frameworks MAY reuse component
      definitions (including\n   their values), but processing of such cross-context
      values is outside\n   the scope of this specification.\n   For example, the
      vector \"P1.Cc.Ab\" translates to \"pseudonymous, proof\n   of shared key, signed
      browser-passed verified assertion, and no claim\n   made toward credential management\"
      in the context of this\n   specification's definitions (see Appendix A).  A
      different vector\n   \"Cb.Mc.Cd.Ac\" translates to \"known device, full proofing
      required for\n   credential issuance and rotation, cryptographic proof of possession\n
      \  of a shared key, signed back-channel verified assertion, and no claim\n   made
      toward identity proofing\" in the same context.  Since no claim\n   is made
      here for identity proofing, no specific value can be assumed\n   by the RP.
      \ Note that this doesn't mean the user wasn't proofed at\n   all: it's possible
      that the user was fully proofed to the highest\n   capabilities within the trust
      framework, but here the IdP is not\n   making any specific claim about proofing
      to the RP, perhaps to\n   protect the user's privacy.\n"
    title: 3.1.  On-the-Wire Representation
  - contents:
    - "3.2.  In OpenID Connect\n   In OpenID Connect [OpenID], the IdP MUST send the
      vector as a string\n   within the \"vot\" (vector of trust) claim in the ID
      token.  The\n   trustmark (see Section 5) that applies to this vector MUST be
      sent as\n   a URL in the \"vtm\" (vector trust mark) claim to provide context
      to\n   the vector.\n   The \"vot\" and \"vtm\" claims are interpreted by the
      RP to apply to the\n   entire identity transaction and not necessarily to any
      one attribute\n   specifically.\n   For example, assume that for the given trustmark,
      the body of an ID\n   token claiming \"pseudonymous, proof of shared key, signed
      back-\n   channel verified token, and no claim made toward credential\n   management\"
      could look like this JSON object [RFC8259] payload of the\n   ID token.\n   {\n
      \      \"iss\": \"https://idp.example.com/\",\n       \"sub\": \"jondoe1234\",\n
      \      \"vot\": \"P1.Cc.Ac\",\n       \"vtm\": \"https://example.org/vot-trust-framework\"\n
      \  }\n   The body of the ID token is signed and optionally encrypted using\n
      \  JSON Object Signing and Encryption (JOSE), as per the OpenID Connect\n   specification.
      \ By putting the \"vot\" and \"vtm\" values inside the ID\n   token, the vector
      and its context are strongly bound to the federated\n   credential represented
      by the ID token.\n   Vector values MAY be returned in a token introspection
      [RFC7662]\n   response describing the ID token or access token issued during
      an\n   OpenID Connect transaction using the same claims.\n"
    title: 3.2.  In OpenID Connect
  title: 3.  Communicating Vector Values to RPs
- contents:
  - "4.  Requesting Vector Values\n   In some identity protocols, the RP can request
    that particular vector\n   values be used for a given identity transaction.  An
    RP can describe\n   the particular vector component values it desires the IdP
    assert for\n   a given identity transaction by using the same syntax as defined
    in\n   Section 3.1.  Processing and fulfillment of these requests are in the\n
    \  purview of the IdP, and details are outside the scope of this\n   specification.\n
    \  Future specifications MAY define alternative ways for an RP to\n   request
    vector values from an IdP.\n"
  - contents:
    - "4.1.  In OpenID Connect\n   In OpenID Connect [OpenID], the client MAY request
      a partial set of\n   acceptable VoT values with the \"vtr\" (vector of trust)
      claim request\n   as part of the request object.  The value of this field is
      a JSON\n   array of strings [RFC8259], each string identifying an acceptable
      set\n   of vector components.  The component values within each vector are\n
      \  ANDed together while the separate vectors are ORed together.  For\n   example,
      a list of vectors in the form '[\"P1.Cb.Cc.Ab\", \"Ce.Ab\"]' is\n   stating
      that either the full set of \"P1 AND Cb AND Cc AND Ab\"\n   simultaneously OR
      the full set of \"Ce AND Ab\" simultaneously are\n   acceptable to this RP for
      this transaction.\n   Vector request values MAY omit components, indicating
      that any value\n   is acceptable for that component category, including omission
      of that\n   component in the response vector.\n   The mechanism by which the
      IdP processes the \"vtr\" and maps that to\n   the authentication transaction
      are out of scope of this\n   specification.\n"
    title: 4.1.  In OpenID Connect
  title: 4.  Requesting Vector Values
- contents:
  - "5.  Trustmarks\n   A trustmark is an HTTPS URL that references a specific set
    of vector\n   values as defined by a trust framework.  This URL MUST point to
    a\n   human-readable document that describes what components and values are\n
    \  valid, how they are used together, and what practices the component\n   values
    represent within the trust framework.  The contents of the\n   trustmark URL MUST
    be reachable by the operators or implementors of\n   the RP.  The URL MUST be
    stable over time for a given trust framework\n   to allow RPs to process incoming
    vectors in a consistent fashion.\n   New versions of a trust framework that require
    different processing\n   rules MUST use a different trustmark URL.\n   For example,
    <https://www.rfc-editor.org/info/rfc8485> is used as the\n   trustmark to reference
    the values defined in Appendix A.\n   The process of a trustmark provider determining
    the ability of a\n   particular IdP to correctly assert values from a given trust\n
    \  framework is outside the scope of this specification.  Determining\n   how
    an RP should apply the values of a given vector to the RP's\n   processing is
    outside the scope of this specification.\n"
  title: 5.  Trustmarks
- contents:
  - "6.  Defining New Vector Values\n   Vectors of Trust is meant to be a flexible
    and reusable framework for\n   communicating authentication data between networked
    parties in an\n   identity federation protocol.  However, the exact nature of
    the\n   information needed depends on the parties requiring the information\n
    \  and the relationship between them.  While this document does define a\n   usable
    default set of values in Appendix A, it is anticipated that\n   many situations
    will require an extension of this specification for\n   their own use.\n   Component
    categories such as those defined in Section 2 are intended\n   to be general-purpose
    and reusable in a variety of trust frameworks.\n   Extension specifications SHOULD
    reuse existing category definitions\n   where possible.  Extensions MAY create
    additional categories where\n   needed by using the registry defined in Section
    7.  The registry\n   encourages reuse and discovery of existing categories across\n
    \  different trust frameworks.  For example, the \"P\" category in another\n   framework
    SHOULD be used for identity proofing and related\n   information.\n   The values
    of components such as those defined in Appendix A are\n   intended to be contextual
    to the defining trust document.  While this\n   specification's component values
    are intended to be general-purpose\n   and extensions MAY reuse the values and
    their definitions, trust\n   frameworks MUST define all allowable values.  As
    these values are\n   always interpreted in the context of a trustmark, these values
    are\n   not recorded in a central registry.  Consequently, a P1\" value from\n
    \  one framework and a \"P1\" value from another framework could have very\n   different
    interpretations depending on their contextual trust\n   framework documents, even
    though in both cases the \"P\" component is\n   used for identity proofing in
    some fashion.\n   Trust frameworks that implement this specification SHOULD choose\n
    \  either a numerical ordering or a group category approach to component\n   values
    as described in Section 2, though combinations of both types\n   MAY be used.
    \ Trust frameworks MUST specify whether multiple values\n   are allowed for each
    category, and while any component category is\n   generally allowed to have multiple
    distinct values, a specific\n   definition of a set of values in an extension
    MAY limit a given\n   component category to a single value per transaction.  It
    is\n   RECOMMENDED that trust frameworks use a \"0\" value to indicate an\n   empty
    or null condition for a given category (for example, no\n   proofing being done
    or no authentication token being used).\n   All trust frameworks that extend and
    implement this specification\n   MUST be referenced by a unique trustmark URL
    (see Section 5) to allow\n   RPs to differentiate between different trust frameworks.\n"
  title: 6.  Defining New Vector Values
- contents:
  - "7.  IANA Considerations\n   This specification creates one registry and registers
    several values\n   into existing registries.\n"
  - contents:
    - "7.1.  Vector of Trust Components Registry\n   This specification establishes
      the \"Vectors of Trust Components\"\n   registry.\n   Component demarcators
      are registered by the Specification Required\n   policy documented in [RFC8126].\n
      \  Criteria that should be applied by the designated experts includes\n   determining
      whether the proposed registration is distinct enough from\n   existing entries
      to warrant registration, whether it is likely to be\n   of general applicability,
      and whether the registration description is\n   clear.  Since all vector processing
      is contextual to a trust\n   framework, component demarcators that do not meet
      these criteria can\n   still be used in trust frameworks.  The registry contains
      vector\n   components that are believed to have general applicability that can\n
      \  be used as well.\n   Registration requests sent to the vot@ietf.org mailing
      list for\n   review should use an appropriate subject (e.g., \"Request to register\n
      \  Vector of Trust Component name: example\").  The designated expert(s)\n   will
      provide review within a two-week period and either approve or\n   deny the registration
      request, communicating this decision to the\n   review list and IANA.  Denials
      should include an explanation and, if\n   applicable, suggestions as to how
      to make the request successful.\n   IANA must only accept registry updates from
      the designated expert(s)\n   and should direct all requests for registration
      to the vot@ietf.org\n   mailing list.  If the designated experts do not respond
      within the\n   designated period, IANA should contact the IESG for guidance.\n"
    - contents:
      - "7.1.1.  Registration Template\n   Demarcator Symbol:\n      An uppercase
        ASCII letter in the range [A-Z] representing this\n      component (e.g.,
        \"X\").\n   Description:\n      Brief description of the component (e.g.,
        \"Example description\").\n   Change Controller:\n      For IETF-stream RFCs,
        state \"IESG\".  For other documents, give the\n      name of the responsible
        party.\n   Specification document(s):\n      Reference to the document(s)
        that specifies the vector component,\n      preferably including a URL that
        can be used to retrieve a copy of\n      the document(s).  An indication of
        the relevant sections may also\n      be included but is not required.\n"
      title: 7.1.1.  Registration Template
    - contents:
      - "7.1.2.  Initial Registry Contents\n   The \"Vector of Trust Components\"
        registry contains the definitions of\n   vector components and their associated
        demarcators.\n   o  Demarcator Symbol: P\n   o  Description: Identity proofing\n
        \  o  Change Controller: IESG\n   o  Specification document(s): [RFC8485]\n
        \  o  Demarcator Symbol: C\n   o  Description: Primary credential usage\n
        \  o  Change Controller: IESG\n   o  Specification document(s): [RFC8485]\n
        \  o  Demarcator Symbol: M\n   o  Description: Primary credential management\n
        \  o  Change Controller: IESG\n   o  Specification document(s): [RFC8485]\n
        \  o  Demarcator Symbol: A\n   o  Description: Assertion presentation\n   o
        \ Change Controller: IESG\n   o  Specification document(s): [RFC8485]\n"
      title: 7.1.2.  Initial Registry Contents
    title: 7.1.  Vector of Trust Components Registry
  - contents:
    - "7.2.  Addition to the OAuth Parameters Registry\n   This specification adds
      the following value to the \"OAuth Parameters\"\n   registry established by
      [RFC6749].\n   o  Name: vtr\n   o  Description: Vector of Trust request\n   o
      \ Parameter usage location: authorization request, token request\n   o  Change
      Controller: IESG\n   o  Reference: [RFC8485]\n"
    title: 7.2.  Addition to the OAuth Parameters Registry
  - contents:
    - "7.3.  Additions to JWT Claims Registry\n   This specification adds the following
      values to the \"JSON Web Token\n   Claims\" registry established by [RFC7519].\n
      \  o  Claim name: vot\n   o  Claim Description: Vector of Trust value\n   o
      \ Change Controller: IESG\n   o  Reference: [RFC8485]\n   o  Claim name: vtm\n
      \  o  Claim Description: Vector of Trust trustmark URL\n   o  Change Controller:
      IESG\n   o  Reference: [RFC8485]\n"
    title: 7.3.  Additions to JWT Claims Registry
  - contents:
    - "7.4.  Additions to OAuth Token Introspection Response\n   This specification
      adds the following values to the \"OAuth Token\n   Introspection Response\"
      registry established by [RFC7662].\n   o  Name: vot\n   o  Description: Vector
      of Trust value\n   o  Change Controller: IESG\n   o  Reference: [RFC8485]\n
      \  o  Name: vtm\n   o  Description: Vector of Trust trustmark URL\n   o  Change
      Controller: IESG\n   o  Reference: [RFC8485]\n"
    title: 7.4.  Additions to OAuth Token Introspection Response
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   The vector of trust value needs to be cryptographically
    protected in\n   transit between parties, such as by using TLS as described in\n
    \  [BCP195].  The vector of trust value must be associated with a\n   trustmark
    by the RP processing the vector.  A signed OpenID Connect\n   ID Token or a similarly
    signed assertion from another protocol would\n   fulfill this requirement by carrying
    both the vector value and the\n   trustmark URL as claims.\n   The vector value
    is always associated with a trustmark and needs to\n   be interpreted by the RP
    in the context of the trust framework\n   defined by that trustmark.  Different
    trust frameworks can apply\n   different interpretations to the same component
    value, much as was\n   the case with LoA.  Therefore, an RP interpreting a component
    value\n   in the wrong context could mistakenly accept or reject a request.  In\n
    \  order to avoid this mistake, RPs need to reject vectors that are\n   defined
    in trust frameworks that they do not understand how to\n   interpret properly.\n
    \  The VoT framework provides a mechanism for describing and conveying\n   trust
    information.  It does not define any policies for an IdP\n   determining which
    vector component values apply to a given\n   transaction, nor does it define any
    policies for applying the values\n   of a vector to an RP's security decision
    process.  These policies and\n   associated practices are to be agreed upon by
    the IdP and RP, and\n   they should be expressed in detail in an associated human-readable\n
    \  trust framework document available at the trustmark URL.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Privacy Considerations\n   By design, vector of trust values contain information
    about the\n   user's authentication and associations that can be made thereto.\n
    \  Therefore, all aspects of a vector of trust contain potentially\n   privacy-sensitive
    information and must be guarded as such.  Even in\n   the absence of specific
    attributes about a user, knowledge that the\n   user has been highly proofed or
    issued a strong token could provide\n   more information about the user than was
    intended.  It is recommended\n   that IdPs send and RPs request only the information
    necessary for\n   their use case in order to prevent inadvertent information\n
    \  disclosure.\n"
  title: 9.  Privacy Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [OpenID]   Sakimura, N., Bradley, J., Jones,
      M., de Medeiros, B., and\n              C. Mortimore, \"OpenID Connect Core
      1.0\", November 2014,\n              <http://openid.net/specs/openid-connect-core-1_0.html>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC6749]  Hardt,
      D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC 6749,
      DOI 10.17487/RFC6749, October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n
      \  [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n
      \  [RFC7662]  Richer, J., Ed., \"OAuth 2.0 Token Introspection\",\n              RFC
      7662, DOI 10.17487/RFC7662, October 2015,\n              <https://www.rfc-editor.org/info/rfc7662>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [BCP195]   Sheffer, Y., Holz, R., and P.
      Saint-Andre,\n              \"Recommendations for Secure Use of Transport Layer\n
      \             Security (TLS) and Datagram Transport Layer Security\n              (DTLS)\",
      BCP 195, RFC 7525, May 2015,\n              <https://www.rfc-editor.org/info/bcp195>.\n
      \  [NISTIR-8112]\n              National Institute of Standards and Technology,
      \"A\n              Proposed Schema for Evaluating Federated Attributes\", NIST\n
      \             Internal Report 8112, DOI 10.6028/NIST.IR.8112, January\n              2018,
      <https://nvlpubs.nist.gov/nistpubs/ir/2018/\n              NIST.IR.8112.pdf>.\n
      \  [SP-800-63-2]\n              National Institute of Standards and Technology,\n
      \             \"Electronic Authentication Guideline\", NIST Special\n              Publication
      SP 800-63-2, DOI 10.6028/NIST.SP.800-63-2,\n              August 2013,\n              <https://dx.doi.org/10.6028/NIST.SP.800-63-2>.\n
      \  [SP-800-63-3]\n              National Institute of Standards and Technology,
      \"Digital\n              Identity Guideline\", NIST Special Publication SP 800-63-3,\n
      \             DOI 10.6028/NIST.SP.800-63-3, June 2017,\n              <https://doi.org/10.6028/NIST.SP.800-63-3>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Vectors of Trust Default Component Value Definitions\n   The following
    general-purpose component definitions MAY be used when\n   a more specific set
    is unavailable.  This document defines a trust\n   framework for these component
    values.  The trustmark URL of this\n   trust framework is <https://www.rfc-editor.org/info/rfc8485>.
    \ All\n   normative requirements following in this section apply to this trust\n
    \  framework alone.\n   Other trust frameworks that extend and implement this
    specification\n   SHOULD define their own component values as described in Section
    6.\n   Where possible, extensions MAY reuse specific values and definitions\n
    \  as listed here, but those specific values MUST be relisted.\n"
  - contents:
    - "A.1.  Identity Proofing\n   The identity proofing component of this vector
      definition represents\n   the level of scrutiny applied to the identity subject
      during the\n   proofing process.  Higher levels are largely subsumptive of lower\n
      \  levels, such that \"P2\" fulfills requirements for \"P1\", etc.  Multiple\n
      \  distinct values from this category MUST NOT be used in a single\n   transaction.\n
      \  P0:  No proofing is done, and data is not guaranteed to be persistent\n        across
      sessions\n   P1:  Attributes are self-asserted but consistent over time,\n        potentially
      pseudonymous\n   P2:  Identity has been proofed either in person or remotely
      using\n        trusted mechanisms (such as social proofing)\n   P3:  There is
      a binding relationship between the identity provider\n        and the identified
      party (such as signed/notarized documents and\n        employment records)\n"
    title: A.1.  Identity Proofing
  - contents:
    - "A.2.  Primary Credential Usage\n   The primary credential usage component of
      this vector definition\n   represents distinct categories of primary credential
      that MAY be used\n   together in a single transaction.  Multiple distinct values
      from this\n   category MAY be used in a single transaction.\n   C0:  No credential
      is used / anonymous public service\n   Ca:  Simple session HTTP cookies (with
      nothing else)\n   Cb:  Known device, such as those indicated through device
      posture or\n        device management systems\n   Cc:  Shared secret, such as
      a username and password combination\n   Cd:  Cryptographic proof of key possession
      using shared key\n   Ce:  Cryptographic proof of key possession using asymmetric
      key\n   Cf:  Sealed hardware token / keys stored in a trusted platform module\n
      \  Cg:  Locally verified biometric\n"
    title: A.2.  Primary Credential Usage
  - contents:
    - "A.3.  Primary Credential Management\n   The primary credential management component
      of this vector definition\n   represents distinct categories of management that
      MAY be considered\n   separately or together in a single transaction.  Many
      trust framework\n   deployments MAY use a single value for this component as
      a baseline\n   for all transactions and thereby omit it.  Multiple distinct
      values\n   from this category MAY be used in a single transaction.\n   Ma:  Self-asserted
      primary credentials (user chooses their own\n        credentials and must rotate
      or revoke them manually) / no\n        additional verification for primary credential
      issuance or\n        rotation\n   Mb:  Remote issuance and rotation / use of
      backup recover credentials\n        (such as email verification) / deletion
      on user request\n   Mc:  Full proofing required for each issuance and rotation
      /\n        revocation on suspicious activity\n"
    title: A.3.  Primary Credential Management
  - contents:
    - "A.4.  Assertion Presentation\n   The assertion presentation component of this
      vector definition\n   represents distinct categories of assertion that are RECOMMENDED
      to\n   be used in a subsumptive manner but MAY be used together.  Multiple\n
      \  distinct values from this category MAY be used in a single\n   transaction.\n
      \  Aa:  No protection / unsigned bearer identifier (such as an HTTP\n        session
      cookie in a web browser)\n   Ab:  Signed and verifiable assertion, passed through
      the user agent\n        (web browser)\n   Ac:  Signed and verifiable assertion,
      passed through a back channel\n   Ad:  Assertion encrypted to the RP's key\n"
    title: A.4.  Assertion Presentation
  title: Appendix A.  Vectors of Trust Default Component Value Definitions
- contents:
  - "Acknowledgements\n   The authors would like to thank the members of the Vectors
    of Trust\n   mailing list in the IETF for discussion and feedback on the concept\n
    \  and document, as well as the members of the ISOC Trust and Identity\n   team
    for their support.  In particular, the authors would like to\n   thank Paul Grassi,
    Jim Fenton, Sarah Squire, Benjamin Kaduk, John\n   Bradley, and Karen O'Donoghue.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Justin Richer (editor)\n   Bespoke Engineering\n   Email:
    ietf@justin.richer.org\n   Leif Johansson\n   Swedish University Network\n   Thulegatan
    11\n   Stockholm\n   Sweden\n   Email: leifj@sunet.se\n   URI:   http://www.sunet.se\n"
  title: Authors' Addresses
