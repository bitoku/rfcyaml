- title: __initial_text__
  contents:
  - "                      AES Galois Counter Mode for\n               the Secure\
    \ Shell Transport Layer Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   Secure shell (SSH) is a secure remote-login protocol.  SSH provides\n\
    \   for algorithms that provide authentication, key agreement,\n   confidentiality,\
    \ and data-integrity services.  The purpose of this\n   document is to show how\
    \ the AES Galois Counter Mode can be used to\n   provide both confidentiality\
    \ and data integrity to the SSH Transport\n   Layer Protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Requirements Terminology ........................................2\n  \
    \ 3. Applicability Statement .........................................3\n   4.\
    \ Properties of Galois Counter Mode ...............................3\n      4.1.\
    \ AES GCM Authenticated Encryption ...........................3\n      4.2. AES\
    \ GCM Authenticated Decryption ...........................3\n   5. Review of Secure\
    \ Shell ..........................................4\n      5.1. Key Exchange ...............................................4\n\
    \      5.2. Secure Shell Binary Packets ................................5\n  \
    \ 6. AES GCM Algorithms for Secure Shell .............................6\n    \
    \  6.1. AEAD_AES_128_GCM ...........................................6\n      6.2.\
    \ AEAD_AES_256_GCM ...........................................6\n      6.3. Size\
    \ of the Authentication Tag .............................6\n   7. Processing Binary\
    \ Packets in AES-GCM Secure Shell ...............7\n      7.1. IV and Counter\
    \ Management ..................................7\n      7.2. Formation of the\
    \ Binary Packet .............................7\n      7.3. Treatment of the Packet\
    \ Length Field .......................8\n   8. Security Considerations .........................................8\n\
    \      8.1. Use of the Packet Sequence Number in the AT ................8\n  \
    \    8.2. Non-Encryption of Packet Length ............................8\n   9.\
    \ IANA Considerations .............................................9\n   10. References\
    \ ....................................................10\n      10.1. Normative\
    \ References .....................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Galois Counter Mode (GCM) is a block-cipher mode of operation\
    \ that\n   provides both confidentiality and data-integrity services.  GCM uses\n\
    \   counter mode to encrypt the data, an operation that can be\n   efficiently\
    \ pipelined.  Further, GCM authentication uses operations\n   that are particularly\
    \ well suited to efficient implementation in\n   hardware, making it especially\
    \ appealing for high-speed\n   implementations or for implementations in an efficient\
    \ and compact\n   circuit.  The purpose of this document is to show how GCM with\
    \ either\n   AES-128 or AES-256 can be integrated into the Secure Shell Transport\n\
    \   Layer Protocol [RFC4253].\n"
- title: 2.  Requirements Terminology
  contents:
  - "2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Applicability Statement
  contents:
  - "3.  Applicability Statement\n   Using AES-GCM to provide both confidentiality\
    \ and data integrity is\n   generally more efficient than using two separate algorithms\
    \ to\n   provide these security services.\n"
- title: 4.  Properties of Galois Counter Mode
  contents:
  - "4.  Properties of Galois Counter Mode\n   Galois Counter Mode (GCM) is a mode\
    \ of operation for block ciphers\n   that provides both confidentiality and data\
    \ integrity.  National\n   Institute of Standards and Technology (NIST) Special\
    \ Publication SP\n   800 38D [GCM] gives an excellent explanation of Galois Counter\
    \ Mode.\n   In this document, we shall focus on AES GCM, the use of the Advanced\n\
    \   Encryption Algorithm (AES) in Galois Counter Mode.  AES-GCM is an\n   example\
    \ of an \"algorithm for authenticated encryption with associated\n   data\" (AEAD\
    \ algorithm) as described in [RFC5116].\n"
- title: 4.1.  AES GCM Authenticated Encryption
  contents:
  - "4.1.  AES GCM Authenticated Encryption\n   An invocation of AES GCM to perform\
    \ an authenticated encryption has\n   the following inputs and outputs:\n    \
    \ GCM Authenticated Encryption\n         Inputs:\n            octet_string PT\
    \ ;   // Plain Text, to be both\n                                //    authenticated\
    \ and encrypted\n            octet_string AAD;   // Additional Authenticated Data,\n\
    \                                //    authenticated but not encrypted\n     \
    \       octet_string IV;    // Initialization Vector\n            octet_string\
    \ BK;    // Block Cipher Key\n         Outputs:\n            octet_string  CT;\
    \   // Cipher Text\n            octet_string  AT;   // Authentication Tag\n  \
    \ Note: in [RFC5116], the IV is called the nonce.\n   For a given block-cipher\
    \ key BK, it is critical that no IV be used\n   more than once.  Section 7.1 addresses\
    \ how this goal is to be\n   achieved in secure shell.\n"
- title: 4.2.  AES GCM Authenticated Decryption
  contents:
  - "4.2.  AES GCM Authenticated Decryption\n   An invocation of AES GCM to perform\
    \ an authenticated decryption has\n   the following inputs and outputs:\n    \
    \ GCM Authenticated Decryption\n         Inputs:\n            octet_string CT\
    \ ;   // Cipher text, to be both\n                                //    authenticated\
    \ and decrypted\n            octet_string AAD;   // Additional Authenticated Data,\n\
    \                                //    authenticated only\n            octet_string\
    \ AT;    // Authentication Tag\n            octet_string IV;    // Initialization\
    \ Vector\n            octet_string BK;    // Block Cipher Key\n         Output:\n\
    \            Failure_Indicator;  // Returned if the authentication tag\n     \
    \                           //   is invalid\n            octet_string  PT;   //\
    \ Plain Text, returned if and only if\n                                //    the\
    \ authentication tag is valid\n   AES-GCM is prohibited from returning any portion\
    \ of the plaintext\n   until the authentication tag has been validated.  Though\
    \ this feature\n   greatly simplifies the security analysis of any system using\
    \ AES-GCM,\n   this creates an incompatibility with the requirements of secure\n\
    \   shell, as we shall see in Section 7.3.\n"
- title: 5.  Review of Secure Shell
  contents:
  - "5.  Review of Secure Shell\n   The goal of secure shell is to establish two secure\
    \ tunnels between a\n   client and a server, one tunnel carrying client-to-server\n\
    \   communications and the other carrying server-to-client\n   communications.\
    \  Each tunnel is encrypted, and a message\n   authentication code is used to\
    \ ensure data integrity.\n"
- title: 5.1.  Key Exchange
  contents:
  - "5.1.  Key Exchange\n   These tunnels are initialized using the secure shell key\
    \ exchange\n   protocol as described in Section 7 of [RFC4253].  This protocol\n\
    \   negotiates a mutually acceptable set of cryptographic algorithms and\n   produces\
    \ a secret value K and an exchange hash H that are shared by\n   the client and\
    \ server.  The initial value of H is saved for use as\n   the session_id.\n  \
    \ If AES-GCM is selected as the encryption algorithm for a given\n   tunnel, AES-GCM\
    \ MUST also be selected as the Message Authentication\n   Code (MAC) algorithm.\
    \  Conversely, if AES-GCM is selected as the MAC\n   algorithm, it MUST also be\
    \ selected as the encryption algorithm.\n   As described in Section 7.2 of [RFC4253],\
    \ a hash-based key derivation\n   function (KDF) is applied to the shared secret\
    \ value K to generate\n   the required symmetric keys.  Each tunnel gets a distinct\
    \ set of\n   symmetric keys.  The keys are generated as shown in Figure 1.  The\n\
    \   sizes of these keys varies depending upon which cryptographic\n   algorithms\
    \ are being used.\n      Initial IV\n         Client-to-Server     HASH( K ||\
    \ H ||\"A\"|| session_id)\n         Server-to-Client     HASH( K || H ||\"B\"\
    || session_id)\n      Encryption Key\n         Client-to-Server     HASH( K ||\
    \ H ||\"C\"|| session_id)\n         Server-to-Client     HASH( K || H ||\"D\"\
    || session_id)\n      Integrity Key\n         Client-to-Server     HASH( K ||\
    \ H ||\"E\"|| session_id)\n         Server-to-Client     HASH( K || H ||\"F\"\
    || session_id)\n             Figure 1: Key Derivation in Secure Shell\n   As we\
    \ shall see below, SSH AES-GCM requires a 12-octet Initial IV and\n   an encryption\
    \ key of either 16 or 32 octets.  Because an AEAD\n   algorithm such as AES-GCM\
    \ uses the encryption key to provide both\n   confidentiality and data integrity,\
    \ the integrity key is not used\n   with AES-GCM.\n   Either the server or client\
    \ may at any time request that the secure\n   shell session be rekeyed.  The shared\
    \ secret value K, the exchange\n   hash H, and all the above symmetric keys will\
    \ be updated.  Only the\n   session_id will remain unchanged.\n"
- title: 5.2.  Secure Shell Binary Packets
  contents:
  - "5.2.  Secure Shell Binary Packets\n   Upon completion of the key exchange protocol,\
    \ all further secure\n   shell traffic is parsed into a data structure known as\
    \ a secure shell\n   binary packet as shown below in Figure 2 (see also Section\
    \ 6 of\n   [RFC4253]).\n     uint32    packet_length;  // 0 <= packet_length <\
    \ 2^32\n     byte      padding_length; // 4 <= padding_length < 256\n     byte[n1]\
    \  payload;        // n1 = packet_length-padding_length-1\n     byte[n2]  random_padding;\
    \ // n2 = padding_length\n     byte[m]   mac;            // m  = mac_length\n\
    \         Figure 2: Structure of a Secure Shell Binary Packet\n   The authentication\
    \ tag produced by AES-GCM authenticated encryption\n   will be placed in the MAC\
    \ field at the end of the secure shell binary\n   packet.\n"
- title: 6.  AES GCM Algorithms for Secure Shell
  contents:
  - '6.  AES GCM Algorithms for Secure Shell

    '
- title: 6.1.  AEAD_AES_128_GCM
  contents:
  - "6.1.  AEAD_AES_128_GCM\n   AEAD_AES_128_GCM is specified in Section 5.1 of [RFC5116].\
    \  Due to\n   the format of secure shell binary packets, the buffer sizes needed\
    \ to\n   implement AEAD_AES_128_GCM are smaller than those required in\n   [RFC5116].\
    \  Using the notation defined in [RFC5116], the input and\n   output lengths for\
    \ AEAD_AES_128_GCM in secure shell are as follows:\n      PARAMETER   Meaning\
    \                          Value\n      K_LEN       AES key length           \
    \        16 octets\n      P_MAX       maximum plaintext length         2^32 -\
    \ 32 octets\n      A_MAX       maximum additional               4 octets\n   \
    \               authenticated data length\n      N_MIN       minimum nonce (IV)\
    \ length        12 octets\n      N_MAX       maximum nonce (IV) length       \
    \ 12 octets\n      C_MAX       maximum cipher length            2^32 octets\n"
- title: 6.2.  AEAD_AES_256_GCM
  contents:
  - "6.2.  AEAD_AES_256_GCM\n   AEAD_AES_256_GCM is specified in Section 5.2 of [RFC5116].\
    \  Due to\n   the format of secure shell binary packets, the buffer sizes needed\n\
    \   to implement AEAD_AES_256_GCM are smaller than those required in\n   [RFC5116].\
    \  Using the notation defined in [RFC5116], the input and\n   output lengths for\
    \ AEAD_AES_256_GCM in secure shell are as follows:\n      PARAMETER   Meaning\
    \                          Value\n      K_LEN       AES key length           \
    \        32 octets\n      P_MAX       maximum plaintext length         2^32 -\
    \ 32 octets\n      A_MAX       maximum additional               4 octets\n   \
    \               authenticated data length\n      N_MIN       minimum nonce (IV)\
    \ length        12 octets\n      N_MAX       maximum nonce (IV) length       \
    \ 12 octets\n      C_MAX       maximum cipher length            2^32 octets\n"
- title: 6.3.  Size of the Authentication Tag
  contents:
  - "6.3.  Size of the Authentication Tag\n   Both AEAD_AES_128_GCM and AEAD_AES_256_GCM\
    \ produce a 16-octet\n   Authentication Tag ([RFC5116] calls this a \"Message\
    \ Authentication\n   Code\").  Some applications allow use of a truncated version\
    \ of this\n   tag.  This is not allowed in AES-GCM secure shell.  All\n   implementations\
    \ of AES-GCM secure shell MUST use the full 16-octet\n   Authentication Tag.\n"
- title: 7.  Processing Binary Packets in AES-GCM Secure Shell
  contents:
  - '7.  Processing Binary Packets in AES-GCM Secure Shell

    '
- title: 7.1.  IV and Counter Management
  contents:
  - "7.1.  IV and Counter Management\n   With AES-GCM, the 12-octet IV is broken into\
    \ two fields: a 4-octet\n   fixed field and an 8-octet invocation counter field.\
    \  The invocation\n   field is treated as a 64-bit integer and is incremented\
    \ after each\n   invocation of AES-GCM to process a binary packet.\n         uint32\
    \  fixed;                  // 4 octets\n         uint64  invocation_counter; \
    \    // 8 octets\n           Figure 3: Structure of an SSH AES-GCM Nonce\n   AES-GCM\
    \ produces a keystream in blocks of 16-octets that is used to\n   encrypt the\
    \ plaintext.  This keystream is produced by encrypting the\n   following 16-octet\
    \ data structure:\n         uint32  fixed;                  // 4 octets\n    \
    \     uint64  invocation_counter;     // 8 octets\n         uint32  block_counter;\
    \          // 4 octets\n           Figure 4: Structure of an AES Input for SSH\
    \ AES-GCM\n   The block_counter is initially set to one (1) and incremented as\
    \ each\n   block of key is produced.\n   The reader is reminded that SSH requires\
    \ that the data to be\n   encrypted MUST be padded out to a multiple of the block\
    \ size\n   (16-octets for AES-GCM).\n"
- title: 7.2.  Formation of the Binary Packet
  contents:
  - "7.2.  Formation of the Binary Packet\n   In AES-GCM secure shell, the inputs\
    \ to the authenticated encryption\n   are:\n     PT (Plain Text)\n        byte\
    \      padding_length; // 4 <= padding_length < 256\n        byte[n1]  payload;\
    \        // n1 = packet_length-padding_length-1\n        byte[n2]  random_padding;\
    \ // n2 = padding_length\n     AAD (Additional Authenticated Data)\n        uint32\
    \    packet_length;  // 0 <= packet_length < 2^32\n     IV (Initialization Vector)\n\
    \        As described in section 7.1.\n     BK (Block Cipher Key)\n        The\
    \ appropriate Encryption Key formed during the Key Exchange.\n   As required in\
    \ [RFC4253], the random_padding MUST be at least 4\n   octets in length but no\
    \ more than 255 octets.  The total length of\n   the PT MUST be a multiple of\
    \ 16 octets (the block size of AES).  The\n   binary packet is the concatenation\
    \ of the 4-octet packet_length, the\n   cipher text (CT), and the 16-octet authentication\
    \ tag (AT).\n"
- title: 7.3.  Treatment of the Packet Length Field
  contents:
  - "7.3.  Treatment of the Packet Length Field\n   Section 6.3 of [RFC4253] requires\
    \ that the packet length, padding\n   length, payload, and padding fields of each\
    \ binary packet be\n   encrypted.  This presents a problem for SSH AES-GCM because:\n\
    \   1) The tag cannot be verified until we parse the binary packet.\n   2) The\
    \ packet cannot be parsed until the packet_length has been\n      decrypted.\n\
    \   3) The packet_length cannot be decrypted until the tag has been\n      verified.\n\
    \   When using AES-GCM with secure shell, the packet_length field is to\n   be\
    \ treated as additional authenticated data, not as plaintext.  This\n   violates\
    \ the requirements of [RFC4253].  The repercussions of this\n   decision are discussed\
    \ in the following Security Considerations\n   section.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The security considerations in [RFC4251] apply.\n"
- title: 8.1.  Use of the Packet Sequence Number in the AT
  contents:
  - "8.1.  Use of the Packet Sequence Number in the AT\n   [RFC4253] requires that\
    \ the formation of the AT involve the packet\n   sequence_number, a 32-bit value\
    \ that counts the number of binary\n   packets that have been sent on a given\
    \ SSH tunnel.  Since the\n   sequence_number is, up to an additive constant, just\
    \ the low 32 bits\n   of the invocation_counter, the presence of the invocation_counter\n\
    \   field in the IV ensures that the sequence_number is indeed involved\n   in\
    \ the formation of the integrity tag, though this involvement\n   differs slightly\
    \ from the requirements in Section 6.4 of [RFC4253].\n"
- title: 8.2.  Non-Encryption of Packet Length
  contents:
  - "8.2.  Non-Encryption of Packet Length\n   As discussed in Section 7.3, there\
    \ is an incompatibility between\n   GCM's requirement that no plaintext be returned\
    \ until the\n   authentication tag has been verified, secure shell's requirement\
    \ that\n   the packet length be encrypted, and the necessity of decrypting the\n\
    \   packet length field to locate the authentication tag.  This document\n   addresses\
    \ this dilemma by requiring that, in AES-GCM, the packet\n   length field will\
    \ not be encrypted but will instead be processed as\n   additional authenticated\
    \ data.\n   In theory, one could argue that encryption of the entire binary\n\
    \   packet means that the secure shell dataflow becomes a featureless\n   octet\
    \ stream.  But in practice, the secure shell dataflow will come\n   in bursts,\
    \ with the length of each burst strongly correlated to the\n   length of the underlying\
    \ binary packets.  Encryption of the packet\n   length does little in and of itself\
    \ to disguise the length of the\n   underlying binary packets.  Secure shell provides\
    \ two other\n   mechanisms, random padding and SSH_MSG_IGNORE messages, that are\
    \ far\n   more effective than encrypting the packet length in masking any\n  \
    \ structure in the underlying plaintext stream that might be revealed\n   by the\
    \ length of the binary packets.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   IANA added the following two entries to the secure\
    \ shell Encryption\n   Algorithm Names registry described in [RFC4250]:\n    \
    \               +--------------------+-------------+\n                   |   \
    \                 |             |\n                   | Name               | \
    \ Reference  |\n                   +--------------------+-------------+\n    \
    \               | AEAD_AES_128_GCM   | Section 6.1 |\n                   |   \
    \                 |             |\n                   | AEAD_AES_256_GCM   | Section\
    \ 6.2 |\n                   +--------------------+-------------+\n   IANA added\
    \ the following two entries to the secure shell MAC\n   Algorithm Names registry\
    \ described in [RFC4250]:\n                   +--------------------+-------------+\n\
    \                   |                    |             |\n                   |\
    \ Name               |  Reference  |\n                   +--------------------+-------------+\n\
    \                   | AEAD_AES_128_GCM   | Section 6.1 |\n                   |\
    \                    |             |\n                   | AEAD_AES_256_GCM  \
    \ | Section 6.2 |\n                   +--------------------+-------------+\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [GCM]      Dworkin, M, \"Recommendation for Block\
    \ Cipher Modes of\n              Operation: Galois/Counter Mode (GCM) and GMAC\"\
    , NIST\n              Special Publication 800-30D, November 2007.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4250]  Lehtinen, S. and C. Lonvick,\
    \ Ed., \"The Secure Shell (SSH)\n              Protocol Assigned Numbers\", RFC\
    \ 4250, January 2006.\n   [RFC4251]  Ylonen, T. and C. Lonvick, Ed., \"The Secure\
    \ Shell (SSH)\n              Protocol Architecture\", RFC 4251, January 2006.\n\
    \   [RFC4253]  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n    \
    \          Transport Layer Protocol\", RFC 4253, January 2006.\n   [RFC5116] \
    \ McGrew, D., \"An Interface and Algorithms for Authenticated\n              Encryption\"\
    , RFC 5116, January 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kevin M. Igoe\n   NSA/CSS Commercial Solutions Center\n\
    \   National Security Agency\n   USA\n   EMail: kmigoe@nsa.gov\n   Jerome A. Solinas\n\
    \   National Information Assurance Research Laboratory\n   National Security Agency\n\
    \   USA\n   EMail: jasolin@orion.ncsc.mil\n"
