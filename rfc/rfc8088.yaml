- title: __initial_text__
  contents:
  - '                   How to Write an RTP Payload Format

    '
- title: Abstract
  contents:
  - "Abstract\n   This document contains information on how best to write an RTP\n\
    \   payload format specification.  It provides reading tips, design\n   practices,\
    \ and practical tips on how to produce an RTP payload format\n   specification\
    \ quickly and with good results.  A template is also\n   included with instructions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8088.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Structure ..................................................4\n  \
    \ 2. Terminology .....................................................5\n    \
    \  2.1. Definitions ................................................5\n      2.2.\
    \ Abbreviations ..............................................5\n      2.3. Use\
    \ of Normative Requirements Language .....................6\n   3. Preparations\
    \ ....................................................6\n      3.1. Read and Understand\
    \ the Media Coding Specification .........6\n      3.2. Recommended Reading ........................................7\n\
    \           3.2.1. IETF Process and Publication ........................7\n  \
    \         3.2.2. RTP .................................................9\n    \
    \  3.3. Important RTP Details .....................................13\n      \
    \     3.3.1. The RTP Session ....................................13\n        \
    \   3.3.2. RTP Header .........................................14\n          \
    \ 3.3.3. RTP Multiplexing ...................................16\n           3.3.4.\
    \ RTP Synchronization ................................16\n      3.4. Signaling\
    \ Aspects .........................................18\n           3.4.1. Media\
    \ Types ........................................19\n           3.4.2. Mapping\
    \ to SDP .....................................20\n      3.5. Transport Characteristics\
    \ .................................23\n           3.5.1. Path MTU ...........................................23\n\
    \           3.5.2. Different Queuing Algorithms .......................23\n  \
    \         3.5.3. Quality of Service .................................24\n   4.\
    \ Standardization Process for an RTP Payload Format ..............24\n      4.1.\
    \ IETF ......................................................25\n           4.1.1.\
    \ Steps from Idea to Publication .....................25\n           4.1.2. WG\
    \ Meetings ........................................27\n           4.1.3. Draft\
    \ Naming .......................................27\n           4.1.4. Writing\
    \ Style ......................................28\n           4.1.5. How to Speed\
    \ Up the Process ........................29\n      4.2. Other Standards Bodies\
    \ ....................................29\n      4.3. Proprietary and Vendor Specific\
    \ ...........................30\n      4.4. Joint Development of Media Coding\
    \ Specification\n           and RTP Payload Format ....................................31\n\
    \   5. Designing Payload Formats ......................................31\n  \
    \    5.1. Features of RTP Payload Formats ...........................32\n    \
    \       5.1.1. Aggregation ........................................32\n      \
    \     5.1.2. Fragmentation ......................................33\n        \
    \   5.1.3. Interleaving and Transmission Rescheduling .........33\n          \
    \ 5.1.4. Media Back Channels ................................34\n           5.1.5.\
    \ Media Scalability ..................................34\n           5.1.6. High\
    \ Packet Rates ..................................37\n      5.2. Selecting Timestamp\
    \ Definition ............................37\n   6. Noteworthy Aspects in Payload\
    \ Format Design ....................39\n      6.1. Audio Payloads ............................................39\n\
    \      6.2. Video .....................................................40\n  \
    \    6.3. Text ......................................................41\n    \
    \  6.4. Application ...............................................41\n   7. Important\
    \ Specification Sections ...............................42\n      7.1. Media Format\
    \ Description ..................................42\n      7.2. Security Considerations\
    \ ...................................43\n      7.3. Congestion Control ........................................44\n\
    \      7.4. IANA Considerations .......................................45\n  \
    \ 8. Authoring Tools ................................................45\n    \
    \  8.1. Editing Tools .............................................46\n      8.2.\
    \ Verification Tools ........................................46\n   9. Security\
    \ Considerations ........................................47\n   10. Informative\
    \ References ........................................47\n   Appendix A. RTP Payload\
    \ Format Template ...........................58\n     A.1.  Title .....................................................58\n\
    \     A.2.  Front-Page Boilerplate ....................................58\n  \
    \   A.3.  Abstract ..................................................58\n    \
    \ A.4.  Table of Contents .........................................58\n     A.5.\
    \  Introduction ..............................................59\n     A.6.  Conventions,\
    \ Definitions, and Abbreviations ...............59\n     A.7.  Media Format Description\
    \ ..................................59\n     A.8.  Payload Format ............................................59\n\
    \       A.8.1.  RTP Header Usage ......................................59\n  \
    \     A.8.2.  Payload Header ........................................59\n    \
    \   A.8.3.  Payload Data ..........................................60\n     A.9.\
    \  Payload Examples ..........................................60\n     A.10. Congestion\
    \ Control Considerations .........................60\n     A.11. Payload Format\
    \ Parameters .................................60\n       A.11.1.  Media Type Definition\
    \ ................................60\n       A.11.2.  Mapping to SDP .......................................62\n\
    \     A.12. IANA Considerations .......................................63\n  \
    \   A.13. Security Considerations ...................................63\n    \
    \ A.14. RFC Editor Considerations .................................64\n     A.15.\
    \ References ................................................64\n       A.15.1.\
    \  Normative References .................................64\n       A.15.2.  Informative\
    \ References ...............................64\n     A.16. Authors' Addresses\
    \ ........................................64\n   Acknowledgements ..................................................64\n\
    \   Contributors ......................................................65\n  \
    \ Author's Address ..................................................65\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RTP [RFC3550] payload formats define how a specific real-time\
    \ data\n   format is structured in the payload of an RTP packet.  A real-time\n\
    \   data format without a payload format specification cannot be\n   transported\
    \ using RTP.  This creates an interest in many individuals/\n   organizations\
    \ with media encoders or other types of real-time data to\n   define RTP payload\
    \ formats.  However, the specification of a well-\n   designed RTP payload format\
    \ is nontrivial and requires knowledge of\n   both RTP and the real-time data\
    \ format.\n   This document is intended to help any author of an RTP payload format\n\
    \   specification make important design decisions, consider important\n   features\
    \ of RTP and RTP security, etc.  The document is also intended\n   to be a good\
    \ starting point for any person with little experience in\n   the IETF and/or\
    \ RTP to learn the necessary steps.\n   This document extends and updates the\
    \ information that is available\n   in \"Guidelines for Writers of RTP Payload\
    \ Format Specifications\"\n   [RFC2736].  Since that RFC was written, further\
    \ experience has been\n   gained on the design and specification of RTP payload\
    \ formats.\n   Several new RTP profiles and robustness tools have been defined,\
    \ and\n   these need to be considered.\n   This document also discusses the possible\
    \ venues for defining an RTP\n   payload format: the IETF, other standards bodies,\
    \ and proprietary\n   ones.\n   Note, this document does discuss IETF, IANA, and\
    \ RFC Editor processes\n   and rules as they were when this document was published.\
    \  This to\n   make clear how the work to specify an RTP payload formats depends,\n\
    \   uses, and interacts with these rules and processes.  However, these\n   rules\
    \ and processes are subject to change and the formal rule and\n   process specifications\
    \ always takes precedence over what is written\n   here.\n"
- title: 1.1.  Structure
  contents:
  - "1.1.  Structure\n   This document has several different parts discussing different\n\
    \   aspects of the creation of an RTP payload format specification.\n   Section\
    \ 3 discusses the preparations the author(s) should make before\n   starting to\
    \ write a specification.  Section 4 discusses the different\n   processes used\
    \ when specifying and completing a payload format, with\n   focus on working inside\
    \ the IETF.  Section 5 discusses the design of\n   payload formats themselves\
    \ in detail.  Section 6 discusses current\n   design trends and provides good\
    \ examples of practices that should be\n   followed when applicable.  Following\
    \ that, Section 7 provides a\n   discussion on important sections in the RTP payload\
    \ format\n   specification itself such as Security Considerations and IANA\n \
    \  Considerations.  This document ends with an appendix containing a\n   template\
    \ that can be used when writing RTP payload formats\n   specifications.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   RTP Stream:  A sequence of RTP packets that together carry\
    \ part or\n      all of the content of a specific media (audio, video, text, or\n\
    \      data whose form and meaning are defined by a specific real-time\n     \
    \ application) from a specific sender source within a given RTP\n      session.\n\
    \   RTP Session:  An association among a set of participants\n      communicating\
    \ with RTP.  The distinguishing feature of an RTP\n      session is that each\
    \ session maintains a full, separate space of\n      synchronization source (SSRC)\
    \ identifiers.  See also\n      Section 3.3.1.\n   RTP Payload Format:  The RTP\
    \ payload format specifies how units of a\n      specific encoded media are put\
    \ into the RTP packet payloads and\n      how the fields of the RTP packet header\
    \ are used, thus enabling\n      the format to be used in RTP applications.\n\
    \   A Taxonomy of Semantics and Mechanisms for Real-Time Transport\n   Protocol\
    \ (RTP) Sources [RFC7656] defines many useful terms.\n"
- title: 2.2.  Abbreviations
  contents:
  - "2.2.  Abbreviations\n   ABNF:  Augmented Backus-Naur Form [RFC5234]\n   ADU:\
    \  Application Data Unit\n   ALF:  Application Level Framing\n   ASM:  Any-Source\
    \ Multicast\n   BCP:  Best Current Practice\n   I-D:  Internet-Draft\n   IESG:\
    \  Internet Engineering Steering Group\n   MTU:  Maximum Transmission Unit\n \
    \  WG:  Working Group\n   QoS:  Quality of Service\n   RFC:  Request For Comments\n\
    \   RTP:  Real-time Transport Protocol\n   RTCP:  RTP Control Protocol\n   RTT:\
    \  Round-Trip Time\n   SSM:  Source-Specific Multicast\n"
- title: 2.3.  Use of Normative Requirements Language
  contents:
  - "2.3.  Use of Normative Requirements Language\n   As this document is both Informational\
    \ and instructional rather than\n   a specification, this document does not use\
    \ any RFC 2119 language and\n   the use of \"may\", \"should\", \"recommended\"\
    , and \"must\" carries no\n   special connotation.\n"
- title: 3.  Preparations
  contents:
  - "3.  Preparations\n   RTP is a complex real-time media delivery framework, and\
    \ it has a lot\n   of details that need to be considered when writing an RTP payload\n\
    \   format.  It is also important to have a good understanding of the\n   media\
    \ codec / format so that all of its important features and\n   properties are\
    \ considered.  Only when one has sufficient\n   understanding of both parts can\
    \ one produce an RTP payload format of\n   high quality.  On top of this, one\
    \ needs to understand the process\n   within the IETF and especially the Working\
    \ Group responsible for\n   standardizing payload formats (currently the PAYLOAD\
    \ WG) to go\n   quickly from the initial idea stage to a finished RFC.  This and\
    \ the\n   next sections help an author prepare himself in those regards.\n"
- title: 3.1.  Read and Understand the Media Coding Specification
  contents:
  - "3.1.  Read and Understand the Media Coding Specification\n   It may be obvious,\
    \ but it is necessary for an author of an RTP\n   payload specification to have\
    \ a solid understanding of the media to\n   be transported.  Important are not\
    \ only the specifically spelled out\n   transport aspects (if any) in the media\
    \ coding specification, but\n   also core concepts of the underlying technology.\
    \  For example, an RTP\n   payload format for video coded with inter-picture prediction\
    \ will\n   perform poorly if the payload designer does not take the use of\n \
    \  inter-picture prediction into account.  On the other hand, some\n   (mostly\
    \ older) media codecs offer error-resilience tools against bit\n   errors, which,\
    \ when misapplied over RTP, in almost all cases would\n   only introduce overhead\
    \ with no measurable return.\n"
- title: 3.2.  Recommended Reading
  contents:
  - "3.2.  Recommended Reading\n   The following subsections list a number of documents.\
    \  Not all need\n   to be read in full detail.  However, an author basically needs\
    \ to be\n   aware of everything listed below.\n"
- title: 3.2.1.  IETF Process and Publication
  contents:
  - "3.2.1.  IETF Process and Publication\n   Newcomers to the IETF are strongly recommended\
    \ to read the \"Tao of\n   the IETF\" [TAO] that goes through most things that\
    \ one needs to know\n   about the IETF: the history, organizational structure,\
    \ how the WGs\n   and meetings work, etc.\n   It is very important to note and\
    \ understand the IETF Intellectual\n   Property Rights (IPR) policy that requires\
    \ early disclosures based on\n   personal knowledge from anyone contributing in\
    \ IETF.  The IETF\n   policies associated with IPR are documented in BCP 78 [BCP78]\n\
    \   (related to copyright, including software copyright, for example,\n   code)\
    \ and BCP 79 [BCP79] (related to patent rights).  These rules may\n   be different\
    \ from other standardization organizations.  For example,\n   a person that has\
    \ a patent or a patent application that he or she\n   reasonably and personally\
    \ believes to cover a mechanism that gets\n   added to the Internet-Draft they\
    \ are contributing to (e.g., by\n   submitting the draft, posting comments or\
    \ suggestions on a mailing\n   list, or speaking at a meeting) will need to make\
    \ a timely IPR\n   disclosure.  Read the above documents for the authoritative\
    \ rules.\n   Failure to follow the IPR rules can have dire implications for the\n\
    \   specification and the author(s) as discussed in [RFC6701].\n      Note: These\
    \ IPR rules apply on what is specified in the RTP\n      payload format Internet-Draft\
    \ (and later RFC); an IPR that relates\n      to a codec specification from an\
    \ external body does not require\n      IETF IPR disclosure.  Informative text\
    \ explaining the nature of\n      the codec would not normally require an IETF\
    \ IPR declaration.\n      Appropriate IPR declarations for the codec itself would\
    \ normally\n      be found in files of the external body defining the codec, in\n\
    \      accordance with that external body's own IPR rules.\n   The main part of\
    \ the IETF process is formally defined in BCP 9\n   [BCP9].  BCP 25 [BCP25] describes\
    \ the WG process, the relation\n   between the IESG and the WG, and the responsibilities\
    \ of WG Chairs\n   and participants.\n   It is important to note that the RFC\
    \ Series contains documents of\n   several different publication streams as defined\
    \ by The RFC Series\n   and RFC Editor [RFC4844].  The most important stream for\
    \ RTP payload\n   formats authors is the IETF Stream.  In this stream, the work\
    \ of the\n   IETF is published.  The stream contains documents of several\n  \
    \ different categories: Standards Track, Informational, Experimental,\n   Best\
    \ Current Practice, and Historic.  \"Standards Track\" contains two\n   maturity\
    \ levels: Proposed Standard and Internet Standard [RFC6410].\n   A Standards Track\
    \ document must start as a Proposed Standard; after\n   successful deployment\
    \ and operational experience with at least two\n   implementations, it can be\
    \ moved to an Internet Standard.  The\n   Independent Submission Stream could\
    \ appear to be of interest as it\n   provides a way of publishing documents of\
    \ certain categories such as\n   Experimental and Informational with a different\
    \ review process.\n   However, as long as IETF has a WG that is chartered to work\
    \ on RTP\n   payload formats, this stream should not be used.\n   As the content\
    \ of a given RFC is not allowed to change once\n   published, the only way to\
    \ modify an RFC is to write and publish a\n   new one that either updates or replaces\
    \ the old one.  Therefore,\n   whether reading or referencing an RFC, it is important\
    \ to consider\n   both the Category field in the document header and to check\
    \ if the\n   RFC is the latest on the subject and still valid.  One way of\n \
    \  checking the current status of an RFC is to use the RFC Editor's RFC\n   search\
    \ page (https://www.rfc-editor.org/search), which displays the\n   current status\
    \ and which if any RFC has updated or obsoleted it.  The\n   RFC Editor search\
    \ engine will also indicate if there exist any errata\n   reports for the RFC.\
    \  Any verified errata report contains issues of\n   significant importance with\
    \ the RFC; thus, they should be known prior\n   to an update and replacement publication.\n\
    \   Before starting to write a draft, one should also read the Internet-\n   Draft\
    \ writing guidelines (http://www.ietf.org/ietf/1id-\n   guidelines.txt), the I-D\
    \ checklist (http://www.ietf.org/ID-\n   Checklist.html), and the RFC Style Guide\
    \ [RFC7322].  Another document\n   that can be useful is \"Guide for Internet\
    \ Standards Writers\"\n   [RFC2360].\n   There are also a number of documents\
    \ to consider in the process of\n   writing drafts intended to become RFCs.  These\
    \ are important when\n   writing certain types of text.\n   RFC 2606:  When writing\
    \ examples using DNS names in Internet-Drafts,\n      those names shall be chosen\
    \ from the example.com, example.net, and\n      example.org domains.\n   RFC 3849:\
    \  Defines the range of IPv6 unicast addresses\n      (2001:DB8::/32) that should\
    \ be used in any examples.\n   RFC 5737:  Defines the ranges of IPv4 unicast addresses\
    \ reserved for\n      documentation and examples: 192.0.2.0/24, 198.51.100.0/24,\
    \ and\n      203.0.113.0/24.\n   RFC 5234:  Augmented Backus-Naur Form (ABNF)\
    \ is often used when\n      writing text field specifications.  Not commonly used\
    \ in RTP\n      payload formats, but may be useful when defining media type\n\
    \      parameters of some complexity.\n"
- title: 3.2.2.  RTP
  contents:
  - "3.2.2.  RTP\n   The recommended reading for RTP consists of several different\
    \ parts:\n   design guidelines, the RTP protocol, profiles, robustness tools,\
    \ and\n   media-specific recommendations.\n   Any author of RTP payload formats\
    \ should start by reading \"Guidelines\n   for Writers of RTP Payload Format Specifications\"\
    \ [RFC2736], which\n   contains an introduction to the Application Level Framing\
    \ (ALF)\n   principle, the channel characteristics of IP channels, and design\n\
    \   guidelines for RTP payload formats.  The goal of ALF is to be able to\n  \
    \ transmit Application Data Units (ADUs) that are independently usable\n   by\
    \ the receiver in individual RTP packets, thus minimizing\n   dependencies between\
    \ RTP packets and the effects of packet loss.\n   Then, it is advisable to learn\
    \ more about the RTP protocol, by\n   studying the RTP specification \"RTP: A\
    \ Transport Protocol for Real-\n   Time Applications\" [RFC3550] and the existing\
    \ profiles.  As a\n   complement to the Standards Track documents, there exists\
    \ a book\n   totally dedicated to RTP [CSP-RTP].  There exist several profiles\
    \ for\n   RTP today, but all are based on \"RTP Profile for Audio and Video\n\
    \   Conferences with Minimal Control\" [RFC3551] (abbreviated as RTP/AVP).\n \
    \  The other profiles that one should know about are \"The Secure Real-\n   time\
    \ Transport Protocol (SRTP)\" (RTP/SAVP) [RFC3711], \"Extended RTP\n   Profile\
    \ for RTCP-based Feedback (RTP/AVPF)\" [RFC4585], and \"Extended\n   Secure Real-time\
    \ Transport Control Protocol (RTCP)-Based Feedback\n   (RTP/SAVPF)\" [RFC5124].\
    \  It is important to understand RTP and the\n   RTP/AVP profile in detail.  For\
    \ the other profiles, it is sufficient\n   to have an understanding of what functionality\
    \ they provide and the\n   limitations they create.\n   A number of robustness\
    \ tools have been developed for RTP.  The tools\n   are for different use cases\
    \ and real-time requirements.\n   RFC 2198:  \"RTP Payload for Redundant Audio\
    \ Data\" [RFC2198] provides\n      functionalities to transmit redundant copies\
    \ of audio or text\n      payloads.  These redundant copies are sent together\
    \ with a primary\n      format in the same RTP payload.  This format relies on\
    \ the RTP\n      timestamp to determine where data belongs in a sequence;\n  \
    \    therefore, it is usually most suitable to be used with audio.\n      However,\
    \ the RTP Payload format for T.140 [RFC4103] text format\n      also uses this\
    \ format.  The format's major property is that it\n      only preserves the timestamp\
    \ of the redundant payloads, not the\n      original sequence number.  This makes\
    \ it unusable for most video\n      formats.  This format is also only suitable\
    \ for media formats that\n      produce relatively small RTP payloads.\n   RFC\
    \ 6354:  The \"Forward-Shifted RTP Redundancy Payload Support\"\n      [RFC6354]\
    \ is a variant of RFC 2198 that allows the redundant data\n      to be transmitted\
    \ prior to the original.\n   RFC 5109:  The \"RTP Payload Format for Generic Forward\
    \ Error\n      Correction\" [RFC5109] provides an XOR-based Forward Error\n  \
    \    Correction (FEC) of the whole or parts of a number of RTP packets.\n    \
    \  This specification replaced the previous specification for XOR-\n      based\
    \ FEC [RFC2733].  These FEC packets are sent in a separate\n      stream or as\
    \ a redundant encoding using RFC 2198.  This FEC scheme\n      has certain restrictions\
    \ in the number of packets it can protect.\n      It is suitable for applications\
    \ with low-to-medium delay tolerance\n      with a limited amount of RTP packets.\n\
    \   RFC 6015:  \"RTP Payload Format for 1-D Interleaved Parity Forward\n     \
    \ Error Correction (FEC)\" [RFC6015] provides a variant of the XOR-\n      based\
    \ Generic protection defined in [RFC2733].  The main\n      difference is to use\
    \ interleaving scheme on which packets gets\n      included as source packets\
    \ for a particular protection packet.\n      The interleaving is defined by using\
    \ every L packets as source\n      data and then producing protection data over\
    \ D number of packets.\n      Thus, each block of D x L source packets will result\
    \ in L number\n      of Repair packets, each capable of repairing one loss.  The\
    \ goal\n      is to provide better burst-error robustness when the packet rate\n\
    \      is higher.\n   FEC Framework:  \"Forward Error Correction (FEC) Framework\"\
    \ [RFC6363]\n      defines how to use FEC protection for arbitrary packet flows.\n\
    \      This framework can be applied for RTP/RTCP packet flows, including\n  \
    \    using RTP for transmission of repair symbols, an example is in\n      \"\
    RTP Payload Format for Raptor Forward Error Correction (FEC)\"\n      [RFC6682].\n\
    \   RTP Retransmission:  The RTP retransmission scheme [RFC4588] is used\n   \
    \   for semi-reliability of the most important RTP packets in a RTP\n      stream.\
    \  The level of reliability between semi- and in-practice\n      full reliability\
    \ depends on the targeted properties and situation\n      where parameters such\
    \ as round-trip time (RTT) allowed additional\n      overhead and allowable delay.\
    \  It often requires the application\n      to be quite delay tolerant as a minimum\
    \ of one round-trip time\n      plus processing delay is required to perform a\
    \ retransmission.\n      Thus, it is mostly suitable for streaming applications\
    \ but may\n      also be usable in certain other cases when operating in networks\n\
    \      with short round-trip times.\n   RTP over TCP:  RFC 4571 [RFC4571] defines\
    \ how one sends RTP and RTCP\n      packets over connection-oriented transports\
    \ like TCP.  If one uses\n      TCP, one gets reliability for all packets but\
    \ loses some of the\n      real-time behavior that RTP was designed to provide.\
    \  Issues with\n      TCP transport of real-time media include head-of-line blocking\
    \ and\n      wasting resources on retransmission of data that is already late.\n\
    \      TCP is also limited to point-to-point connections, which further\n    \
    \  restricts its applicability.\n   There have been both discussion and design\
    \ of RTP payload formats,\n   e.g., Adaptive Multi-Rate (AMR) and AMR Wideband\
    \ (AMR-WB) [RFC4867],\n   supporting the unequal error detection provided by UDP-Lite\n\
    \   [RFC3828].  The idea is that by not having a checksum over part of\n   the\
    \ RTP payload one can allow bit errors from the lower layers.  By\n   allowing\
    \ bit errors one can increase the efficiency of some link\n   layers and also\
    \ avoid unnecessary discarding of data when the payload\n   and media codec can\
    \ get at least some benefit from the data.  The\n   main issue is that one has\
    \ no idea of the level of bit errors present\n   in the unprotected part of the\
    \ payload.  This makes it hard or\n   impossible to determine whether or not one\
    \ can design something\n   usable.  Payload format designers are not recommended\
    \ to consider\n   features for unequal error detection using UDP-Lite unless very\
    \ clear\n   requirements exist.\n   There also exist some management and monitoring\
    \ extensions.\n   RFC 2959:  The RTP protocol Management Information Database\
    \ (MIB)\n      [RFC2959] that is used with SNMP [RFC3410] to configure and\n \
    \     retrieve information about RTP sessions.\n   RFC 3611:  The RTCP Extended\
    \ Reports (RTCP XR) [RFC3611] consists of\n      a framework for reports sent\
    \ within RTCP.  It can easily be\n      extended by defining new report formats,\
    \ which has and is\n      occurring.  The XRBLOCK WG in the IETF is chartered\
    \ (at the time\n      of writing) with defining new report formats.  The list\
    \ of\n      specified formats is available in IANA's RTCP XR Block Type\n    \
    \  registry (http://www.iana.org/assignments/rtcp-xr-block-types/).\n      The\
    \ report formats that are defined in RFC 3611 provide report\n      information\
    \ on packet loss, packet duplication, packet reception\n      times, RTCP statistics\
    \ summary, and VoIP Quality.  [RFC3611] also\n      defines a mechanism that allows\
    \ receivers to calculate the RTT to\n      other session participants when used.\n\
    \   RMONMIB:  The Remote Network Monitoring WG has defined a mechanism\n     \
    \ [RFC3577] based on usage of the MIB that can be an alternative to\n      RTCP\
    \ XR.\n   A number of transport optimizations have also been developed for use\n\
    \   in certain environments.  They are all intended to be transparent and\n  \
    \ do not require special consideration by the RTP payload format\n   writer. \
    \ Thus, they are primarily listed here for informational\n   reasons.\n   RFC\
    \ 2508:  \"Compressing IP/UDP/RTP Headers for Low-Speed Serial\n      Links\"\
    \ (CRTP) [RFC2508] is the first IETF-developed RTP header\n      compression mechanism.\
    \  It provides quite good compression;\n      however, it has clear performance\
    \ problems when subject to packet\n      loss or reordering between compressor\
    \ and decompressor.\n   RFCs 3095 and 5795:  These are the base specifications\
    \ of the robust\n      header compression (ROHC) protocol version 1 [RFC3095]\
    \ and version\n      2 [RFC5795].  This solution was created as a result of CRTP's\
    \ lack\n      of performance when compressed packets are subject to loss.\n  \
    \ RFC 3545:  Enhanced compressed RTP (E-CRTP) [RFC3545] was developed\n      to\
    \ provide extensions to CRTP that allow for better performance\n      over links\
    \ with long RTTs, packet loss, and/or reordering.\n   RFC 4170:  \"Tunneling Multiplexed\
    \ Compressed RTP (TCRTP)\" [RFC4170]\n      is a solution that allows header compression\
    \ within a tunnel\n      carrying multiple multiplexed RTP flows.  This is primarily\
    \ used\n      in voice trunking.\n   There exist a couple of different security\
    \ mechanisms that may be\n   used with RTP.  By definition, generic mechanisms\
    \ are transparent for\n   the RTP payload format and do not need special consideration\
    \ by the\n   format designer.  The main reason that different solutions exist\
    \ is\n   that different applications have different requirements; thus,\n   different\
    \ solutions have been developed.  For more discussion on\n   this, please see\
    \ \"Options for Securing RTP Sessions\" [RFC7201] and\n   \"Securing the RTP Framework:\
    \ Why RTP Does Not Mandate a Single Media\n   Security Solution\" [RFC7202]. \
    \ The main properties for an RTP\n   security mechanism are to provide confidentiality\
    \ for the RTP\n   payload, integrity protection to detect manipulation of payload\
    \ and\n   headers, and source authentication.  Not all mechanisms provide all\n\
    \   of these features, a point that will need to be considered when a\n   specific\
    \ mechanisms is chosen.\n   The profile for Secure RTP - SRTP (RTP/SAVP) [RFC3711]\
    \ and the\n   derived profile (RTP/SAVPF [RFC5124]) are a solution that enables\n\
    \   confidentiality, integrity protection, replay protection, and partial\n  \
    \ source authentication.  It is the solution most commonly used with\n   RTP at\
    \ the time of writing this document.  There exist several key-\n   management\
    \ solutions for SRTP, as well other choices, affecting the\n   security properties.\
    \  For a more in-depth review of the options and\n   solutions other than SRTP\
    \ consult \"Options for Securing RTP Sessions\"\n   [RFC7201].\n"
- title: 3.3.  Important RTP Details
  contents:
  - "3.3.  Important RTP Details\n   This section reviews a number of RTP features\
    \ and concepts that are\n   available in RTP, independent of the payload format.\
    \  The RTP payload\n   format can make use of these when appropriate, and even\
    \ affect the\n   behavior (RTP timestamp and marker bit), but it is important\
    \ to note\n   that not all features and concepts are relevant to every payload\n\
    \   format.  This section does not remove the necessity to read up on\n   RTP.\
    \  However, it does point out a few important details to remember\n   when designing\
    \ a payload format.\n"
- title: 3.3.1.  The RTP Session
  contents:
  - "3.3.1.  The RTP Session\n   The definition of the RTP session from RFC 3550 is:\n\
    \      An association among a set of participants communicating with RTP.\n  \
    \    A participant may be involved in multiple RTP sessions at the same\n    \
    \  time.  In a multimedia session, each medium is typically carried\n      in\
    \ a separate RTP session with its own RTCP packets unless the\n      encoding\
    \ itself multiplexes multiple media into a single data\n      stream.  A participant\
    \ distinguishes multiple RTP sessions by\n      reception of different sessions\
    \ using different pairs of\n      destination transport addresses, where a pair\
    \ of transport\n      addresses comprises one network address plus a pair of ports\
    \ for\n      RTP and RTCP.  All participants in an RTP session may share a\n \
    \     common destination transport address pair, as in the case of IP\n      multicast,\
    \ or the pairs may be different for each participant, as\n      in the case of\
    \ individual unicast network addresses and port\n      pairs.  In the unicast\
    \ case, a participant may receive from all\n      other participants in the session\
    \ using the same pair of ports, or\n      may use a distinct pair of ports for\
    \ each.\n      The distinguishing feature of an RTP session is that each session\n\
    \      maintains a full, separate space of SSRC identifiers (defined\n      next).\
    \  The set of participants included in one RTP session\n      consists of those\
    \ that can receive an SSRC identifier transmitted\n      by any one of the participants\
    \ either in RTP as the SSRC or a CSRC\n      (also defined below) or in RTCP.\
    \  For example, consider a three-\n      party conference implemented using unicast\
    \ UDP with each\n      participant receiving from the other two on separate port\
    \ pairs.\n      If each participant sends RTCP feedback about data received from\n\
    \      one other participant only back to that participant, then the\n      conference\
    \ is composed of three separate point-to-point RTP\n      sessions.  If each participant\
    \ provides RTCP feedback about its\n      reception of one other participant to\
    \ both of the other\n      participants, then the conference is composed of one\
    \ multi-party\n      RTP session.  The latter case simulates the behavior that\
    \ would\n      occur with IP multicast communication among the three\n      participants.\n\
    \      The RTP framework allows the variations defined here, but a\n      particular\
    \ control protocol or application design will usually\n      impose constraints\
    \ on these variations.\n"
- title: 3.3.2.  RTP Header
  contents:
  - "3.3.2.  RTP Header\n   The RTP header contains a number of fields.  Two fields\
    \ always\n   require additional specification by the RTP payload format, namely\n\
    \   the RTP timestamp and the marker bit.  Certain RTP payload formats\n   also\
    \ use the RTP sequence number to realize certain functionalities,\n   primarily\
    \ related to the order of their application data units.  The\n   payload type\
    \ is used to indicate the used payload format.  The SSRC\n   is used to distinguish\
    \ RTP packets from multiple senders and media\n   sources identifying the RTP\
    \ stream.  Finally, [RFC5285] specifies how\n   to transport payload format independent\
    \ metadata relating to the RTP\n   packet or stream.\n   Marker Bit:  A single\
    \ bit normally used to provide important\n      indications.  In audio, it is\
    \ normally used to indicate the start\n      of a talk burst.  This enables jitter\
    \ buffer adaptation prior to\n      the beginning of the burst with minimal audio\
    \ quality impact.  In\n      video, the marker bit is normally used to indicate\
    \ the last packet\n      part of a frame.  This enables a decoder to finish decoding\
    \ the\n      picture, where it otherwise may need to wait for the next packet\n\
    \      to explicitly know that the frame is finished.\n   Timestamp:  The RTP\
    \ timestamp indicates the time instance the media\n      sample belongs to.  For\
    \ discrete media like video, it normally\n      indicates when the media (frame)\
    \ was sampled.  For continuous\n      media, it normally indicates the first time\
    \ instance the media\n      present in the payload represents.  For audio, this\
    \ is the\n      sampling time of the first sample.  All RTP payload formats must\n\
    \      specify the meaning of the timestamp value and the clock rates\n      allowed.\
    \  Selecting a timestamp rate is an active design choice\n      and is further\
    \ discussed in Section 5.2.\n      Discontinuous Transmission (DTX) that is common\
    \ among speech\n      codecs, typically results in gaps or jumps in the timestamp\
    \ values\n      due to that there is no media payload to transmit and the next\n\
    \      used timestamp value represent the actual sampling time of the\n      data\
    \ transmitted.\n   Sequence Number:  The sequence number is monotonically increasing\
    \ and\n      is set as the packet is sent.  This property is used in many\n  \
    \    payload formats to recover the order of everything from the whole\n     \
    \ stream down to fragments of application data units (ADUs) and the\n      order\
    \ they need to be decoded.  Discontinuous transmissions do not\n      result in\
    \ gaps in the sequence number, as it is monotonically\n      increasing for each\
    \ sent RTP packet.\n   Payload Type:  The payload type is used to indicate, on\
    \ a per-packet\n      basis, which format is used.  The binding between a payload\
    \ type\n      number and a payload format and its configuration are dynamically\n\
    \      bound and RTP session specific.  The configuration information can\n  \
    \    be bound to a payload type value by out-of-band signaling\n      (Section\
    \ 3.4).  An example of this would be video decoder\n      configuration information.\
    \  Commonly, the same payload type is\n      used for a media stream for the whole\
    \ duration of a session.\n      However, in some cases it may be necessary to\
    \ change the payload\n      format or its configuration during the session.\n\
    \   SSRC:  The synchronization source (SSRC) identifier is normally not\n    \
    \  used by a payload format other than to identify the RTP timestamp\n      and\
    \ sequence number space a packet belongs to, allowing\n      simultaneously reception\
    \ of multiple media sources.  However, some\n      of the RTP mechanisms for improving\
    \ resilience to packet loss uses\n      multiple SSRCs to separate original data\
    \ and repair or redundant\n      data, as well as multi-stream transmission of\
    \ scalable codecs.\n   Header Extensions:  RTP payload formats often need to include\n\
    \      metadata relating to the payload data being transported.  Such\n      metadata\
    \ is sent as a payload header, at the start of the payload\n      section of the\
    \ RTP packet.  The RTP packet also includes space for\n      a header extension\
    \ [RFC5285]; this can be used to transport\n      payload format independent metadata,\
    \ for example, an SMPTE time\n      code for the packet [RFC5484].  The RTP header\
    \ extensions are not\n      intended to carry headers that relate to a particular\
    \ payload\n      format, and must not contain information needed in order to decode\n\
    \      the payload.\n   The remaining fields do not commonly influence the RTP\
    \ payload\n   format.  The padding bit is worth clarifying as it indicates that\
    \ one\n   or more bytes are appended after the RTP payload.  This padding must\n\
    \   be removed by a receiver before payload format processing can occur.\n   Thus,\
    \ it is completely separate from any padding that may occur\n   within the payload\
    \ format itself.\n"
- title: 3.3.3.  RTP Multiplexing
  contents:
  - "3.3.3.  RTP Multiplexing\n   RTP has three multiplexing points that are used\
    \ for different\n   purposes.  A proper understanding of this is important to\
    \ correctly\n   use them.\n   The first one is separation of RTP streams of different\
    \ types or\n   usages, which is accomplished using different RTP sessions.  So,\
    \ for\n   example, in the common multimedia session with audio and video, RTP\n\
    \   commonly multiplexes audio and video in different RTP sessions.  To\n   achieve\
    \ this separation, transport-level functionalities are used,\n   normally UDP\
    \ port numbers.  Different RTP sessions can also be used\n   to realize layered\
    \ scalability as it allows a receiver to select one\n   or more layers for multicast\
    \ RTP sessions simply by joining the\n   multicast groups over which the desired\
    \ layers are transported.  This\n   separation also allows different Quality of\
    \ Service (QoS) to be\n   applied to different media types.  Use of multiple transport\
    \ flows\n   has potential issues due to NAT and firewall traversal.  The choices\n\
    \   how one applies RTP sessions as well as transport flows can affect\n   the\
    \ transport properties an RTP media stream experiences.\n   The next multiplexing\
    \ point is separation of different RTP streams\n   within an RTP session.  Here,\
    \ RTP uses the SSRC to identify\n   individual sources of RTP streams.  An example\
    \ of individual media\n   sources would be the capture of different microphones\
    \ that are\n   carried in an RTP session for audio, independently of whether they\n\
    \   are connected to the same host or different hosts.  There also exist\n   cases\
    \ where a single media source, is transmitted using multiple RTP\n   streams.\
    \  For each SSRC, a unique RTP sequence number and timestamp\n   space is used.\n\
    \   The third multiplexing point is the RTP header payload type field.\n   The\
    \ payload type identifies what format the content in the RTP\n   payload has.\
    \  This includes different payload format configurations,\n   different codecs,\
    \ and also usage of robustness mechanisms like the\n   one described in RFC 2198\
    \ [RFC2198].\n"
- title: 3.3.4.  RTP Synchronization
  contents:
  - "3.3.4.  RTP Synchronization\n   There are several types of synchronization, and\
    \ we will here describe\n   how RTP handles the different types:\n   Intra media:\
    \  The synchronization within a media stream from a\n      synchronization source\
    \ (SSRC) is accomplished using the RTP\n      timestamp field.  Each RTP packet\
    \ carries the RTP timestamp, which\n      specifies the position in time of the\
    \ media payload contained in\n      this packet relative to the content of other\
    \ RTP packets in the\n      same RTP stream (i.e., a given SSRC).  This is especially\
    \ useful\n      in cases of discontinuous transmissions.  Discontinuities can\
    \ be\n      caused by network conditions; when extensive losses occur the RTP\n\
    \      timestamp tells the receiver how much later than previously\n      received\
    \ media the present media should be played out.\n   Inter-media:  Applications\
    \ commonly have a desire to use several\n      media sources, possibly of different\
    \ media types, at the same\n      time.  Thus, there exists a need to synchronize\
    \ different media\n      from the same endpoint.  This puts two requirements on\
    \ RTP: the\n      possibility to determine which media are from the same endpoint\n\
    \      and if they should be synchronized with each other and the\n      functionality\
    \ to facilitate the synchronization itself.\n   The first step in inter-media\
    \ synchronization is to determine which\n   SSRCs in each session should be synchronized\
    \ with each other.  This\n   is accomplished by comparing the CNAME fields in\
    \ the RTCP source\n   description (SDES) packets.  SSRCs with the same CNAME sent\
    \ in any of\n   multiple RTP sessions can be synchronized.\n   The actual RTCP\
    \ mechanism for inter-media synchronization is based on\n   the idea that each\
    \ RTP stream provides a position on the media\n   specific time line (measured\
    \ in RTP timestamp ticks) and a common\n   reference time line.  The common reference\
    \ time line is expressed in\n   RTCP as a wall-clock time in the Network Time\
    \ Protocol (NTP) format.\n   It is important to notice that the wall-clock time\
    \ is not required to\n   be synchronized between hosts, for example, by using\
    \ NTP [RFC5905].\n   It can even have nothing at all to do with the actual time;\
    \ for\n   example, the host system's up-time can be used for this purpose.  The\n\
    \   important factor is that all media streams from a particular source\n   that\
    \ are being synchronized use the same reference clock to derive\n   their relative\
    \ RTP timestamp time scales.  The type of reference\n   clock and its timebase\
    \ can be signaled using RTP Clock Source\n   Signaling [RFC7273].\n   Figure 1\
    \ illustrates how if one receives RTCP Sender Report (SR)\n   packet P1 for one\
    \ RTP stream and RTCP SR packet P2 for the other RTP\n   stream, then one can\
    \ calculate the corresponding RTP timestamp values\n   for any arbitrary point\
    \ in time T.  However, to be able to do that,\n   it is also required to know\
    \ the RTP timestamp rates for each RTP\n   stream currently used in the sessions.\n\
    \   TS1   --+---------------+------->\n           |               |\n        \
    \  P1               |\n           |               |\n   NTP  ---+-----+---------T------>\n\
    \                 |         |\n                P2         |\n                \
    \ |         |\n   TS2  ---------+---------+---X-->\n   Figure 1: RTCP Synchronization\n\
    \   Assume that medium 1 uses an RTP timestamp clock rate of 16 kHz, and\n   medium\
    \ 2 uses a clock rate of 90 kHz.  Then, TS1 and TS2 for point T\n   can be calculated\
    \ in the following way: TS1(T) = TS1(P1) + 16000 *\n   (NTP(T)-NTP(P1)) and TS2(T)\
    \ = TS2(P2) + 90000 * (NTP(T)-NTP(P2)).\n   This calculation is useful as it allows\
    \ the implementation to\n   generate a common synchronization point for which\
    \ all time values are\n   provided (TS1(T), TS2(T) and T).  So, when one wishes\
    \ to calculate\n   the NTP time that the timestamp value present in packet X corresponds\n\
    \   to, one can do that in the following way: NTP(X) = NTP(T) + (TS2(X) -\n  \
    \ TS2(T))/90000.\n   Improved signaling for layered codecs and fast tune-in have\
    \ been\n   specified in \"Rapid Synchronization for RTP Flows\" [RFC6051].\n \
    \  Leap seconds are extra seconds added or seconds removed to keep our\n   clocks\
    \ in sync with the earth's rotation.  Adding or removing seconds\n   can impact\
    \ the reference clock as discussed in \"RTP and Leap Seconds\"\n   [RFC7164];\
    \ also, in cases where the RTP timestamp values are derived\n   using the wall\
    \ clock during the leap second event, errors can occur.\n   Implementations need\
    \ to consider leap seconds and should consider the\n   recommendations in [RFC7164].\n"
- title: 3.4.  Signaling Aspects
  contents:
  - "3.4.  Signaling Aspects\n   RTP payload formats are used in the context of application\
    \ signaling\n   protocols such as SIP [RFC3261] using the Session Description\n\
    \   Protocol (SDP) [RFC4566] with Offer/Answer [RFC3264], RTSP [RFC7826],\n  \
    \ or the Session Announcement Protocol [RFC2974].  These examples all\n   use\
    \ out-of-band signaling to indicate which type of RTP streams are\n   desired\
    \ to be used in the session and how they are configured.  To be\n   able to declare\
    \ or negotiate the media format and RTP payload\n   packetization, the payload\
    \ format must be given an identifier.  In\n   addition to the identifier, many\
    \ payload formats also have the need\n   to signal further configuration information\
    \ out-of-band for the RTP\n   payloads prior to the media transport session.\n\
    \   The above examples of session-establishing protocols all use SDP, but\n  \
    \ other session description formats may be used.  For example, there\n   was discussion\
    \ of a new XML-based session description format within\n   the IETF (SDP-NG).\
    \  In the end, the proposal did not get beyond draft\n   protocol specification\
    \ because of the enormous installed base of SDP\n   implementations.  However,\
    \ to avoid locking the usage of RTP to SDP\n   based out-of-band signaling, the\
    \ payload formats are identified using\n   a separate definition format for the\
    \ identifier and associated\n   parameters.  That format is the media type.\n"
- title: 3.4.1.  Media Types
  contents:
  - "3.4.1.  Media Types\n   Media types [RFC6838] are identifiers originally created\
    \ for\n   identifying media formats included in email.  In this usage, they\n\
    \   were known as MIME types, where the expansion of the MIME acronym\n   includes\
    \ the word \"mail\".  The term \"media type\" was introduced to\n   reflect a\
    \ broader usage, which includes HTTP [RFC7231], Message\n   Session Relay Protocol\
    \ (MSRP) [RFC4975], and many other protocols to\n   identify arbitrary content\
    \ carried within the protocols.  Media types\n   also provide a media hierarchy\
    \ that fits RTP payload formats well.\n   Media type names are of two parts and\
    \ consist of content type and\n   sub-type separated with a slash, e.g., 'audio/PCMA'\
    \ or 'video/\n   h263-2000'.  It is important to choose the correct content-type\
    \ when\n   creating the media type identifying an RTP payload format.  However,\n\
    \   in most cases, there is little doubt what content type the format\n   belongs\
    \ to.  Guidelines for choosing the correct media type and\n   registration rules\
    \ for media type names are provided in \"Media Type\n   Specifications and Registration\
    \ Procedures\" [RFC6838].  The\n   additional rules for media types for RTP payload\
    \ formats are provided\n   in \"Media Type Registration of RTP Payload Formats\"\
    \ [RFC4855].\n   Registration of the RTP payload name is something that is required\
    \ to\n   avoid name collision in the future.  Note that \"x-\" names are not\n\
    \   suitable for any documented format as they have the same problem with\n  \
    \ name collision and can't be registered.  The list of already-\n   registered\
    \ media types can be found at\n   <https://www.iana.org/assignments/media-types/media-types.xhtml>.\n\
    \   Media types are allowed any number of parameters, which may be\n   required\
    \ or optional for that media type.  They are always specified\n   on the form\
    \ \"name=value\".  There exist no restrictions on how the\n   value is defined\
    \ from the media type's perspective, except that\n   parameters must have a value.\
    \  However, the usage of media types in\n   SDP, etc., has resulted in the following\
    \ restrictions that need to be\n   followed to make media types usable for RTP-identifying\
    \ payload\n   formats:\n   1.  Arbitrary binary content in the parameters is allowed,\
    \ but it\n       needs to be encoded so that it can be placed within text-based\n\
    \       protocols.  Base64 [RFC4648] is recommended, but for shorter\n       content\
    \ Base16 [RFC4648] may be more appropriate as it is simpler\n       to interpret\
    \ for humans.  This needs to be explicitly stated when\n       defining a media\
    \ type parameter with binary values.\n   2.  The end of the value needs to be\
    \ easily found when parsing a\n       message.  Thus, parameter values that are\
    \ continuous and not\n       interrupted by common text separators, such as space\
    \ and\n       semicolon characters, are recommended.  If that is not possible,\n\
    \       some type of escaping should be used.  Usage of quote (\") is\n      \
    \ recommended; do not forget to provide a method of encoding any\n       character\
    \ used for quoting inside the quoted element.\n   3.  A common representation\
    \ form for the media type and its\n       parameters is on a single line.  In\
    \ that case, the media type is\n       followed by a semicolon-separated list\
    \ of the parameter value\n       pairs, e.g.:\n       audio/amr octet-align=0;\
    \ mode-set=0,2,5,7; mode-change-period=2\n"
- title: 3.4.2.  Mapping to SDP
  contents:
  - "3.4.2.  Mapping to SDP\n   Since SDP [RFC4566] is so commonly used as an out-of-band\
    \ signaling\n   protocol, a mapping of the media type into SDP exists.  The details\n\
    \   on how to map the media type and its parameters into SDP are\n   described\
    \ in [RFC4855].  However, this is not sufficient to explain\n   how certain parameters\
    \ must be interpreted, for example, in the\n   context of Offer/Answer negotiation\
    \ [RFC3264].\n"
- title: 3.4.2.1.  The Offer/Answer Model
  contents:
  - "3.4.2.1.  The Offer/Answer Model\n   The Offer/Answer (O/A) model allows SIP\
    \ to negotiate which media\n   formats and payload formats are to be used in a\
    \ session and how they\n   are to be configured.  However, O/A does not define\
    \ a default\n   behavior; instead, it points out the need to define how parameters\n\
    \   behave.  To make things even more complex, the direction of media\n   within\
    \ a session has an impact on these rules, so that some cases may\n   require separate\
    \ descriptions for RTP streams that are send-only,\n   receive-only, or both sent\
    \ and received as identified by the SDP\n   attributes a=sendonly, a=recvonly,\
    \ and a=sendrecv.  In addition, the\n   usage of multicast adds further limitations\
    \ as the same RTP stream is\n   delivered to all participants.  If those multicast-imposed\n\
    \   restrictions are too limiting for unicast, then separate rules for\n   unicast\
    \ and multicast will be required.\n   The simplest and most common O/A interpretation\
    \ is that a parameter\n   is defined to be declarative; i.e., the SDP Offer/Answer\
    \ sending\n   agent can declare a value and that has no direct impact on the other\n\
    \   agent's values.  This declared value applies to all media that are\n   going\
    \ to be sent to the declaring entity.  For example, most video\n   codecs have\
    \ a level parameter that tells the other participants the\n   highest complexity\
    \ the video decoder supports.  The level parameter\n   can be declared independently\
    \ by two participants in a unicast\n   session as it will be the media sender's\
    \ responsibility to transmit a\n   video stream that fulfills the limitation the\
    \ other side has\n   declared.  However, in multicast, it will be necessary to\
    \ send a\n   stream that follows the limitation of the weakest receiver, i.e.,\
    \ the\n   one that supports the lowest level.  To simplify the negotiation in\n\
    \   these cases, it is common to require any answerer to a multicast\n   session\
    \ to take a yes or no approach to parameters.\n   A \"negotiated\" parameter is\
    \ a different case, for which both sides\n   need to agree on its value.  Such\
    \ a parameter requires the answerer\n   to either accept it as it is offered or\
    \ remove the payload type the\n   parameter belonged to from its answer.  The\
    \ removal of the payload\n   type from the answer indicates to the offerer the\
    \ lack of support for\n   the parameter values presented.  An unfortunate implication\
    \ of the\n   need to use complete payload types to indicate each possible\n  \
    \ configuration so as to maximize the chances of achieving\n   interoperability,\
    \ is that the number of necessary payload types can\n   quickly grow large.  This\
    \ is one reason to limit the total number of\n   sets of capabilities that may\
    \ be implemented.\n   The most problematic type of parameters are those that relate\
    \ to the\n   media the entity sends.  They do not really fit the O/A model, but\n\
    \   can be shoehorned in.  Examples of such parameters can be found in\n   the\
    \ H.264 video codec's payload format [RFC6184], where the name of\n   all parameters\
    \ with this property starts with \"sprop-\".  The issue\n   with these parameters\
    \ is that they declare properties for a RTP\n   stream that the other party may\
    \ not accept.  The best one can make of\n   the situation is to explain the assumption\
    \ that the other party will\n   accept the same parameter value for the media\
    \ it will receive as the\n   offerer of the session has proposed.  If the answerer\
    \ needs to change\n   any declarative parameter relating to streams it will receive,\
    \ then\n   the offerer may be required to make a new offer to update the\n   parameter\
    \ values for its outgoing RTP stream.\n   Another issue to consider is the send-only\
    \ RTP streams in offers.\n   Parameters that relate to what the answering entity\
    \ accepts to\n   receive have no meaning other than to provide a template for\
    \ the\n   answer.  It is worth pointing out in the specification that these\n\
    \   really provide a set of parameter values that the sender recommends.\n   Note\
    \ that send-only streams in answers will need to indicate the\n   offerer's parameters\
    \ to ensure that the offerer can match the answer\n   to the offer.\n   A further\
    \ issue with Offer/Answer that complicates things is that the\n   answerer is\
    \ allowed to renumber the payload types between offer and\n   answer.  This is\
    \ not recommended, but allowed for support of gateways\n   to the ITU conferencing\
    \ suite.  This means that it must be possible\n   to bind answers for payload\
    \ types to the payload types in the offer\n   even when the payload type number\
    \ has been changed, and some of the\n   proposed payload types have been removed.\
    \  This binding must normally\n   be done by matching the configurations originally\
    \ offered against\n   those in the answer.  This may require specification in\
    \ the payload\n   format of which parameters that constitute a configuration,\
    \ for\n   example, as done in Section 8.2.2 of the H.264 RTP Payload format\n\
    \   [RFC6184], which states: \"The parameters identifying a media format\n   configuration\
    \ for H.264 are profile-level-id and packetization-mode\".\n"
- title: 3.4.2.2.  Declarative Usage in RTSP and SAP
  contents:
  - "3.4.2.2.  Declarative Usage in RTSP and SAP\n   SAP (Session Announcement Protocol)\
    \ [RFC2974] was experimentally used\n   for announcing multicast sessions.  Similar\
    \ but better protocols are\n   using SDP in a declarative style to configure multicast-based\n\
    \   applications.  Independently of the usage of Source-Specific\n   Multicast\
    \ (SSM) [RFC3569] or Any-Source Multicast (ASM), the SDP\n   provided by these\
    \ configuration delivery protocols applies to all\n   participants.  All media\
    \ that is sent to the session must follow the\n   RTP stream definition as specified\
    \ by the SDP.  This enables everyone\n   to receive the session if they support\
    \ the configuration.  Here, SDP\n   provides a one-way channel with no possibility\
    \ to affect the\n   configuration that the session creator has decided upon. \
    \ Any RTP\n   payload format that requires parameters for the send direction and\n\
    \   that needs individual values per implementation or instance will fail\n  \
    \ in a SAP session for a multicast session allowing anyone to send.\n   Real-Time\
    \ Streaming Protocol (RTSP) [RFC7826] allows the negotiation\n   of transport\
    \ parameters for RTP streams that are part of a streaming\n   session between\
    \ a server and client.  RTSP has divided the transport\n   parameters from the\
    \ media configuration.  SDP is commonly used for\n   media configuration in RTSP\
    \ and is sent to the client prior to\n   session establishment, either through\
    \ use of the DESCRIBE method or\n   by means of an out-of-band channel like HTTP,\
    \ email, etc.  The SDP is\n   used to determine which RTP streams and what formats\
    \ are being used\n   prior to session establishment.\n   Thus, both SAP and RTSP\
    \ use SDP to configure receivers and senders\n   with a predetermined configuration\
    \ for a RTP stream including the\n   payload format and any of its parameters.\
    \  All parameters are used in\n   a declarative fashion.  This can result in different\
    \ treatment of\n   parameters between Offer/Answer and declarative usage in RTSP\
    \ and\n   SAP.  Any such difference will need to be spelled out by the payload\n\
    \   format specification.\n"
- title: 3.5.  Transport Characteristics
  contents:
  - "3.5.  Transport Characteristics\n   The general channel characteristics that\
    \ RTP flows experience are\n   documented in Section 3 of \"Guidelines for Writers\
    \ of RTP Payload\n   Format Specifications\" [RFC2736].  The discussion below\
    \ provides\n   additional information.\n"
- title: 3.5.1.  Path MTU
  contents:
  - "3.5.1.  Path MTU\n   At the time of writing, the most common IP Maximum Transmission\
    \ Unit\n   (MTU) in commonly deployed link layers is 1500 bytes (Ethernet data\n\
    \   payload).  However, there exist both links with smaller MTUs and\n   links\
    \ with much larger MTUs.  An example for links with small MTU\n   size is older\
    \ generation cellular links.  Certain parts of the\n   Internet already support\
    \ an IP MTU of 8000 bytes or more, but these\n   are limited islands.  The most\
    \ likely places to find MTUs larger than\n   1500 bytes are within enterprise\
    \ networks, university networks, data\n   centers, storage networks, and over\
    \ high capacity (10 Gbps or more)\n   links.  There is a slow, ongoing evolution\
    \ towards larger MTU sizes.\n   However, at the same time, it has become common\
    \ to use tunneling\n   protocols, often multiple ones, whose overhead when added\
    \ together\n   can shrink the MTU significantly.  Thus, there exists a need both\
    \ to\n   consider limited MTUs as well as enable support of larger MTUs.  This\n\
    \   should be considered in the design, especially in regard to features\n   such\
    \ as aggregation of independently decodable data units.\n"
- title: 3.5.2.  Different Queuing Algorithms
  contents:
  - "3.5.2.  Different Queuing Algorithms\n   Routers and switches on the network\
    \ path between an IP sender and a\n   particular receiver can exhibit different\
    \ behaviors affecting the\n   end-to-end characteristics.  One of the more important\
    \ aspects of\n   this is queuing behavior.  Routers and switches have some amount\
    \ of\n   queuing to handle temporary bursts of data that designated to leave\n\
    \   the switch or router on the same egress link.  A queue, when not\n   empty,\
    \ results in an increased path delay.\n   The implementation of the queuing affects\
    \ the delay and also how\n   congestion signals (Explicit Congestion Notification\
    \ (ECN) [RFC6679]\n   or packet drops) are provided to the flow.  The other aspects\
    \ are if\n   the flow shares the queue with other flows and how the implementation\n\
    \   affects the flow interaction.  This becomes important, for example,\n   when\
    \ real-time flows interact with long-lived TCP flows.  TCP has a\n   built-in\
    \ behavior in its congestion control that strives to fill the\n   buffer; thus,\
    \ all flows sharing the buffer experienced the delay\n   build up.\n   A common,\
    \ but quite poor, queue-handling mechanism is tail-drop,\n   i.e., only drop packets\
    \ when the incoming packet doesn't fit in the\n   queue.  If a bad queuing algorithm\
    \ is combined with too much queue\n   space, the queuing time can grow to be very\
    \ significant and can even\n   become multiple seconds.  This is called \"bufferbloat\"\
    \ [BLOAT].\n   Active Queue Management (AQM) is a term covering mechanisms that\
    \ try\n   to do something smarter by actively managing the queue, for example,\n\
    \   sending congestion signals earlier by dropping packets earlier in the\n  \
    \ queue.  The behavior also affects the flow interactions.  For\n   example, Random\
    \ Early Detection (RED) [RED] selects which packet(s)\n   to drop randomly.  This\
    \ gives flows that have more packets in the\n   queue a higher probability to\
    \ experience the packet loss (congestion\n   signal).  There is ongoing work in\
    \ the IETF WG AQM to find suitable\n   mechanisms to recommend for implementation\
    \ and reduce the use of\n   tail-drop.\n"
- title: 3.5.3.  Quality of Service
  contents:
  - "3.5.3.  Quality of Service\n   Using best-effort Internet has no guarantees for\
    \ the path's\n   properties.  QoS mechanisms are intended to provide the possibility\n\
    \   to bound the path properties.  Where Diffserv [RFC2475] markings\n   affect\
    \ the queuing and forwarding behaviors of routers, the mechanism\n   provides\
    \ only statistical guarantees and care in how much marked\n   packets of different\
    \ types that are entering the network.  Flow-based\n   QoS, like IntServ [RFC1633],\
    \ has the potential for stricter\n   guarantees as the properties are agreed on\
    \ by each hop on the path,\n   at the cost of per-flow state in the network.\n"
- title: 4.  Standardization Process for an RTP Payload Format
  contents:
  - "4.  Standardization Process for an RTP Payload Format\n   This section discusses\
    \ the recommended process to produce an RTP\n   payload format in the described\
    \ venues.  This is to document the best\n   current practice on how to get a well-designed\
    \ and specified payload\n   format as quickly as possible.  For specifications\
    \ that are defined\n   by standards bodies other than the IETF, the primary milestone\
    \ is the\n   registration of the media type for the RTP payload format.  For\n\
    \   proprietary media formats, the primary goal depends on whether\n   interoperability\
    \ is desired at the RTP level.  However, there is also\n   the issue of ensuring\
    \ best possible quality of any specification.\n"
- title: 4.1.  IETF
  contents:
  - "4.1.  IETF\n   For all standardized media formats, it is recommended that the\n\
    \   payload format be specified in the IETF.  The main reason is to\n   provide\
    \ an openly available RTP payload format specification that has\n   been reviewed\
    \ by people experienced with RTP payload formats.  At the\n   time of writing,\
    \ this work is done in the PAYLOAD Working Group (WG),\n   but that may change\
    \ in the future.\n"
- title: 4.1.1.  Steps from Idea to Publication
  contents:
  - "4.1.1.  Steps from Idea to Publication\n   There are a number of steps that an\
    \ RTP payload format should go\n   through from the initial idea until it is published.\
    \  This also\n   documents the process that the PAYLOAD WG applies when working\
    \ with\n   RTP payload formats.\n   Idea:   Determine the need for an RTP payload\
    \ format as an IETF\n      specification.\n   Initial effort:   Using this document\
    \ as a guideline, one should be\n      able to get started on the work.  If one's\
    \ media codec doesn't fit\n      any of the common design patterns or one has\
    \ problems\n      understanding what the most suitable way forward is, then one\n\
    \      should contact the PAYLOAD WG and/or the WG Chairs.  The goal of\n    \
    \  this stage is to have an initial individual draft.  This draft\n      needs\
    \ to focus on the introductory parts that describe the real-\n      time media\
    \ format and the basic idea on how to packetize it.  Not\n      all the details\
    \ are required to be filled in.  However, the\n      security chapter is not something\
    \ that one should skip, even\n      initially.  From the start, it is important\
    \ to consider any\n      serious security risks that need to be solved.  The first\
    \ step is\n      completed when one has a draft that is sufficiently detailed\
    \ for a\n      first review by the WG.  The less confident one is of the\n   \
    \   solution, the less work should be spent on details; instead,\n      concentrate\
    \ on the codec properties and what is required to make\n      the packetization\
    \ work.\n   Submission of the first version:   When one has performed the above,\n\
    \      one submits the draft as an individual draft\n      (https://datatracker.ietf.org/submit/).\
    \  This can be done at any\n      time, except for a period prior to an IETF meeting\
    \ (see important\n      dates related to the next IETF meeting for draft submission\
    \ cutoff\n      date).  When the Internet-Draft announcement has been sent out\
    \ on\n      the draft announcement list\n      (https://www.ietf.org/mailman/listinfo/I-D-Announce),\
    \ forward it\n      to the PAYLOAD WG (https://www.ietf.org/mailman/listinfo/payload)\n\
    \      and request that it be reviewed.  In the email, outline any issues\n  \
    \    the authors currently have with the design.\n   Iterative improvements: \
    \  Taking the feedback received into account,\n      one updates the draft and\
    \ tries resolve issues.  New revisions of\n      the draft can be submitted at\
    \ any time (again except for a short\n      period before meetings).  It is recommended\
    \ to submit a new\n      version whenever one has made major updates or has new\
    \ issues that\n      are easiest to discuss in the context of a new draft version.\n\
    \   Becoming a WG document:   Given that the definition of RTP payload\n     \
    \ formats is part of the PAYLOAD WG's charter, RTP payload formats\n      that\
    \ are going to be published as Standards Track RFCs need to\n      become WG documents.\
    \  Becoming a WG document means that the WG\n      Chairs or an appointed document\
    \ shepherd are responsible for\n      administrative handling, for example, issuing\
    \ publication\n      requests.  However, be aware that making a document into\
    \ a WG\n      document changes the formal ownership and responsibility from the\n\
    \      individual authors to the WG.  The initial authors normally\n      continue\
    \ being the document editors, unless unusual circumstances\n      occur.  The\
    \ PAYLOAD WG accepts new RTP payload formats based on\n      their suitability\
    \ and document maturity.  The document maturity is\n      a requirement to ensure\
    \ that there are dedicated document editors\n      and that there exists a good\
    \ solution.\n   Iterative improvements:  The updates and review cycles continue\
    \ until\n      the draft has reached the level of maturity suitable for\n    \
    \  publication.  The authors are responsible for judging when the\n      document\
    \ is ready for the next step, most likely WG Last Call, but\n      they can ask\
    \ the WG chairs or Shepherd.\n   WG Last Call:   A WG Last Call of at least two\
    \ weeks is always\n      performed for payload formats in the PAYLOAD WG (see\
    \ Section 7.4\n      of [RFC2418]).  The authors request WG Last Call for a draft\
    \ when\n      they think it is mature enough for publication.  The WG Chairs or\n\
    \      shepherd perform a review to check if they agree with the authors'\n  \
    \    assessment.  If the WG Chairs or shepherd agree on the maturity,\n      the\
    \ WG Last Call is announced on the WG mailing list.  If there\n      are issues\
    \ raised, these need to be addressed with an updated\n      draft version.  For\
    \ any more substantial changes to the draft, a\n      new WG Last Call is announced\
    \ for the updated version.  Minor\n      changes, like editorial fixes, can be\
    \ progressed without an\n      additional WG Last Call.\n   Publication requested:\
    \   For WG documents, the WG Chairs or shepherd\n      request publication of\
    \ the draft after it has passed WG Last Call.\n      After this, the approval\
    \ and publication process described in BCP\n      9 [BCP9] is performed.  The\
    \ status after the publication has been\n      requested can be tracked using\
    \ the IETF Datatracker [TRACKER].\n      Documents do not expire as they normally\
    \ do after publication has\n      been requested, so authors do not have to issue\
    \ keep-alive\n      updates.  In addition, any submission of document updates\
    \ requires\n      the approval of WG Chair(s).  The authors are commonly asked\
    \ to\n      address comments or issues raised by the IESG.  The authors also\n\
    \      do one last review of the document immediately prior to its\n      publication\
    \ as an RFC to ensure that no errors or formatting\n      problems have been introduced\
    \ during the publication process.\n"
- title: 4.1.2.  WG Meetings
  contents:
  - "4.1.2.  WG Meetings\n   WG meetings are for discussing issues, not presentations.\
    \  This means\n   that most RTP payload formats should never need to be discussed\
    \ in a\n   WG meeting.  RTP payload formats that would be discussed are either\n\
    \   those with controversial issues that failed to be resolved on the\n   mailing\
    \ list or those including new design concepts worth a general\n   discussion.\n\
    \   There exists no requirement to present or discuss a draft at a WG\n   meeting\
    \ before it becomes published as an RFC.  Thus, even authors\n   who lack the\
    \ possibility to go to WG meetings should be able to\n   successfully specify\
    \ an RTP payload format in the IETF.  WG meetings\n   may become necessary only\
    \ if the draft gets stuck in a serious debate\n   that cannot easily be resolved.\n"
- title: 4.1.3.  Draft Naming
  contents:
  - "4.1.3.  Draft Naming\n   To simplify the work of the PAYLOAD WG Chairs and WG\
    \ members, a\n   specific Internet-Draft file-naming convention shall be used\
    \ for RTP\n   payload formats.  Individual submissions shall be named using the\n\
    \   template: draft-<lead author family name>-payload-rtp-<descriptive\n   name>-<version>.\
    \  The WG documents shall be named according to this\n   template: draft-ietf-payload-rtp-<descriptive\
    \ name>-<version>.  The\n   inclusion of \"payload\" in the draft file name ensures\
    \ that the search\n   for \"payload-\" will find all PAYLOAD-related drafts. \
    \ Inclusion of\n   \"rtp\" tells us that it is an RTP payload format draft.  The\n\
    \   descriptive name should be as short as possible while still\n   describing\
    \ what the payload format is for.  It is recommended to use\n   the media format\
    \ or codec abbreviation.  Please note that the version\n   must start at 00 and\
    \ is increased by one for each submission to the\n   IETF secretary of the draft.\
    \  No version numbers may be skipped.  For\n   more details on draft naming, please\
    \ see Section 7 of [ID-GUIDE].\n"
- title: 4.1.4.  Writing Style
  contents:
  - "4.1.4.  Writing Style\n   When writing an Internet-Draft for an RTP payload format,\
    \ one should\n   observe some few considerations (that may be somewhat divergent\
    \ from\n   the style of other IETF documents and/or the media coding spec's\n\
    \   author group may use):\n   Include Motivations:  In the IETF, it is common\
    \ to include the\n      motivation for why a particular design or technical path\
    \ was\n      chosen.  These are not long statements: a sentence here and there\n\
    \      explaining why suffice.\n   Use the Defined Terminology:  There exists\
    \ defined terminology both\n      in RTP and in the media codec specification\
    \ for which the RTP\n      payload format is designed.  A payload format specification\
    \ needs\n      to use both to make clear the relation of features and their\n\
    \      functions.  It is unwise to introduce or, worse, use without\n      introduction,\
    \ terminology that appears to be more accessible to\n      average readers but\
    \ may miss certain nuances that the defined\n      terms imply.  An RTP payload\
    \ format author can assume the reader\n      to be reasonably familiar with the\
    \ terminology in the media coding\n      specification.\n   Keeping It Simple:\
    \  The IETF has a history of specifications that are\n      focused on their main\
    \ usage.  Historically, some RTP payload\n      formats have a lot of modes and\
    \ features, while the actual\n      deployments have only included the most basic\
    \ features that had\n      very clear requirements.  Time and effort can be saved\
    \ by focusing\n      on only the most important use cases and keeping the solution\n\
    \      simple.  An extension mechanism should be provided to enable\n      backward-compatible\
    \ extensions, if that is an organic fit.\n   Normative Requirements:  When writing\
    \ specifications, there is\n      commonly a need to make it clear when something\
    \ is normative and\n      at what level.  In the IETF, the most common method\
    \ is to use \"Key\n      words for use in RFCs to Indicate Requirement Levels\"\
    \ [RFC2119],\n      which defines the meaning of \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    ,\n      \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT\n      RECOMMENDED\", \"MAY\", and \"OPTIONAL\".\n"
- title: 4.1.5.  How to Speed Up the Process
  contents:
  - "4.1.5.  How to Speed Up the Process\n   There a number of ways to lose a lot\
    \ of time in the above process.\n   This section discusses what to do and what\
    \ to avoid.\n   o  Do not update the draft only for the meeting deadline.  An\
    \ update\n      to each meeting automatically limits the draft to three updates\n\
    \      per year.  Instead, ignore the meeting schedule and publish new\n     \
    \ versions as soon as possible.\n   o  Try to avoid requesting reviews when people\
    \ are busy, like the few\n      weeks before a meeting.  It is actually more likely\
    \ that people\n      have time for them directly after a meeting.\n   o  Perform\
    \ draft updates quickly.  A common mistake is that the\n      authors let the\
    \ draft slip.  By performing updates to the draft\n      text directly after getting\
    \ resolution on an issue, things speed\n      up.  This minimizes the delay that\
    \ the author has direct control\n      over.  The time taken for reviews, responses\
    \ from Area Directors\n      and WG Chairs, etc., can be much harder to speed\
    \ up.\n   o  Do not fail to take human nature into account.  It happens that\n\
    \      people forget or need to be reminded about tasks.  Send a kind\n      reminder\
    \ to the people you are waiting for if things take longer\n      than expected.\
    \  Ask people to estimate when they expect to fulfill\n      the requested task.\n\
    \   o  Ensure there is enough review.  It is common that documents take a\n  \
    \    long time and many iterations because not enough review is\n      performed\
    \ in each iteration.  To improve the amount of review you\n      get on your own\
    \ document, trade review time with other document\n      authors.  Make a deal\
    \ with some other document author that you\n      will review their draft if they\
    \ review yours.  Even inexperienced\n      reviewers can help with language, editorial,\
    \ or clarity issues.\n      Also, try approaching the more experienced people\
    \ in the WG and\n      getting them to commit to a review.  The WG Chairs cannot,\
    \ even if\n      desirable, be expected to review all versions.  Due to workload,\n\
    \      the Chairs may need to concentrate on key points in a draft\n      evolution\
    \ like checking on initial submissions, a draft's\n      readiness to become a\
    \ WG document, or its readiness for WG Last\n      Call.\n"
- title: 4.2.  Other Standards Bodies
  contents:
  - "4.2.  Other Standards Bodies\n   Other standards bodies may define RTP payloads\
    \ in their own\n   specifications.  When they do this, they are strongly recommended\
    \ to\n   contact the PAYLOAD WG Chairs and request review of the work.  It is\n\
    \   recommended that at least two review steps are performed.  The first\n   should\
    \ be early in the process when more fundamental issues can be\n   easily resolved\
    \ without abandoning a lot of effort.  Then, when\n   nearing completion, but\
    \ while it is still possible to update the\n   specification, a second review\
    \ should be scheduled.  In that pass,\n   the quality can be assessed; hopefully,\
    \ no updates will be needed.\n   Using this procedure can avoid both conflicting\
    \ definitions and\n   serious mistakes, like breaking certain aspects of the RTP\
    \ model.\n   RTP payload media types may be registered in the standards tree by\n\
    \   other standards bodies.  The requirements on the organization are\n   outlined\
    \ in the media types registration documents [RFC4855] and\n   [RFC6838]).  This\
    \ registration requires a request to the IESG, which\n   ensures that the filled-in\
    \ registration template is acceptable.  To\n   avoid last-minute problems with\
    \ these registrations the registration\n   template must be sent for review both\
    \ to the PAYLOAD WG and the media\n   types list (ietf-types@iana.org) and is\
    \ something that should be\n   included in the IETF reviews of the payload format\
    \ specification.\n"
- title: 4.3.  Proprietary and Vendor Specific
  contents:
  - "4.3.  Proprietary and Vendor Specific\n   Proprietary RTP payload formats are\
    \ commonly specified when the real-\n   time media format is proprietary and not\
    \ intended to be part of any\n   standardized system.  However, there are reasons\
    \ why also proprietary\n   formats should be correctly documented and registered:\n\
    \   o  Usage in a standardized signaling environment, such as SIP/SDP.\n     \
    \ RTP needs to be configured with the RTP profiles, payload formats,\n      and\
    \ their payload types being used.  To accomplish this, it is\n      desirable\
    \ to have registered media type names to ensure that the\n      names do not collide\
    \ with those of other formats.\n   o  Sharing with business partners.  As RTP\
    \ payload formats are used\n      for communication, situations often arise where\
    \ business partners\n      would like to support a proprietary format.  Having\
    \ a well-written\n      specification of the format will save time and money for\
    \ both\n      parties, as interoperability will be much easier to accomplish.\n\
    \   o  To ensure interoperability between different implementations on\n     \
    \ different platforms.\n   To avoid name collisions, there is a central registry\
    \ keeping track\n   of the registered media type names used by different RTP payload\n\
    \   formats.  When it comes to proprietary formats, they should be\n   registered\
    \ in the vendor's own tree.  All vendor-specific\n   registrations use sub-type\
    \ names that start with \"vnd.<vendor-name>\".\n   Names in the vendor's own tree\
    \ are not required to be registered with\n   IANA.  However, registration [RFC6838]\
    \ is recommended if the media\n   type is used at all in public environments.\n\
    \   If interoperability at the RTP level is desired, a payload type\n   specification\
    \ should be standardized in the IETF following the\n   process described above.\
    \  The IETF does not require full disclosure\n   of the codec when defining an\
    \ RTP payload format to carry that codec,\n   but a description must be provided\
    \ that is sufficient to allow the\n   IETF to judge whether the payload format\
    \ is well designed.  The media\n   type identifier assigned to a standardized\
    \ payload format of this\n   sort will lie in the standards tree rather than the\
    \ vendor tree.\n"
- title: 4.4.  Joint Development of Media Coding Specification and RTP Payload
  contents:
  - "4.4.  Joint Development of Media Coding Specification and RTP Payload\n     \
    \ Format\n   In the last decade, there have been a few cases where the media codec\n\
    \   and the associated RTP payload format have been developed\n   concurrently\
    \ and jointly.  Developing the two specs not only\n   concurrently but also jointly,\
    \ in close cooperation with the group\n   developing the media codec, allows one\
    \ to leverage the benefits joint\n   source/channel coding can provide.  Doing\
    \ so has historically\n   resulted in well-performing payload formats and in success\
    \ of both\n   the media coding specification and associated RTP payload format.\n\
    \   Insofar, whenever the opportunity presents it, it may be useful to\n   closely\
    \ keep the media coding group in the loop (through appropriate\n   liaison means\
    \ whatever those may be) and influence the media coding\n   specification to be\
    \ RTP friendly.  One example for such a media\n   coding specification is H.264,\
    \ where the RTP payload header co-serves\n   as the H.264 NAL unit header and\
    \ vice versa, and is documented in\n   both specifications.\n"
- title: 5.  Designing Payload Formats
  contents:
  - "5.  Designing Payload Formats\n   The best summary of payload format design is\
    \ KISS (Keep It Simple,\n   Stupid).  A simple payload format is easier to review\
    \ for\n   correctness, easier to implement, and has low complexity.\n   Unfortunately,\
    \ contradictory requirements sometimes make it hard to\n   do things simply. \
    \ Complexity issues and problems that occur for RTP\n   payload formats are:\n\
    \   Too many configurations:  Contradictory requirements lead to the\n      result\
    \ that one configuration is created for each conceivable\n      case.  Such contradictory\
    \ requirements are often between\n      functionality and bandwidth.  This outcome\
    \ has two big\n      disadvantages; First all configurations need to be implemented.\n\
    \      Second, the user application must select the most suitable\n      configuration.\
    \  Selecting the best configuration can be very\n      difficult and, in negotiating\
    \ applications, this can create\n      interoperability problems.  The recommendation\
    \ is to try to select\n      a very limited set of configurations (preferably\
    \ one) that perform\n      well for the most common cases and are capable of handling\
    \ the\n      other cases, but maybe not that well.\n   Hard to implement:  Certain\
    \ payload formats may become difficult to\n      implement both correctly and\
    \ efficiently.  This needs to be\n      considered in the design.\n   Interaction\
    \ with general mechanisms:  Special solutions may create\n      issues with deployed\
    \ tools for RTP, such as tools for more robust\n      transport of RTP.  For example,\
    \ a requirement for an unbroken\n      sequence number space creates issues for\
    \ mechanisms relying on\n      payload type switching interleaving media-independent\
    \ resilience\n      within a stream.\n"
- title: 5.1.  Features of RTP Payload Formats
  contents:
  - "5.1.  Features of RTP Payload Formats\n   There are a number of common features\
    \ in RTP payload formats.  There\n   is no general requirement to support these\
    \ features; instead, their\n   applicability must be considered for each payload\
    \ format.  In fact,\n   it may be that certain features are not even applicable.\n"
- title: 5.1.1.  Aggregation
  contents:
  - "5.1.1.  Aggregation\n   Aggregation allows for the inclusion of multiple Application\
    \ Data\n   Units (ADUs) within the same RTP payload.  This is commonly supported\n\
    \   for codecs that produce ADUs of sizes smaller than the IP MTU.  One\n   reason\
    \ for the use of aggregation is the reduction of header overhead\n   (IP/UDP/RTP\
    \ headers).  When setting into relation the ADU size and\n   the MTU size, do\
    \ remember that the MTU may be significantly larger\n   than 1500 bytes.  An MTU\
    \ of 9000 bytes is available today and an MTU\n   of 64k may be available in the\
    \ future.  Many speech codecs have the\n   property of ADUs of a few fixed sizes.\
    \  Video encoders may generally\n   produce ADUs of quite flexible sizes.  Thus,\
    \ the need for aggregation\n   may be less.  But some codecs produce small ADUs\
    \ mixed with large\n   ones, for example, H.264 Supplemental Enhancement Information\
    \ (SEI)\n   messages.  Sending individual SEI message in separate packets are\
    \ not\n   efficient compared to combing the with other ADUs.  Also, some small\n\
    \   ADUs are, within the media domain, semantically coupled to the larger\n  \
    \ ADUs (for example, in-band parameter sets in H.264 [RFC6184]).  In\n   such\
    \ cases, aggregation is sensible, even if not required from a\n   payload/header\
    \ overhead viewpoint.  There also exist cases when the\n   ADUs are pre-produced\
    \ and can't be adopted to a specific networks\n   MTU.  Instead, their packetization\
    \ needs to be adopted to the\n   network.  All above factors should be taken into\
    \ account when\n   deciding on the inclusion of aggregation, and weighting its\
    \ benefits\n   against the complexity of defining them (which can be significant\n\
    \   especially when aggregation is performed over ADUs with different\n   playback\
    \ times).\n   The main disadvantage of aggregation, beyond implementation\n  \
    \ complexity, is the extra delay introduced (due to buffering until a\n   sufficient\
    \ number of ADUs have been collected at the sender) and\n   reduced robustness\
    \ against packet loss.  Aggregation also introduces\n   buffering requirements\
    \ at the receiver.\n"
- title: 5.1.2.  Fragmentation
  contents:
  - "5.1.2.  Fragmentation\n   If the real-time media format has the property that\
    \ it may produce\n   ADUs that are larger than common MTU sizes, then fragmentation\n\
    \   support should be considered.  An RTP payload format may always fall\n   back\
    \ on IP fragmentation; however, as discussed in RFC 2736, this has\n   some drawbacks.\
    \  Perhaps the most important reason to avoid IP\n   fragmentation is that IP\
    \ fragmented packets commonly are discarded in\n   the network, especially by\
    \ NATs or firewalls.  The usage of\n   fragmentation at the RTP payload format\
    \ level allows for more\n   efficient usage of RTP packet loss recovery mechanisms.\
    \  It may also\n   in some cases also allow better usage of partial ADUs by doing\
    \ media\n   specific fragmentation at media-specific boundaries.  In use cases\n\
    \   where the ADUs are pre-produced and can't be adopted to the network's\n  \
    \ MTU size, support for fragmentation can be crucial.\n"
- title: 5.1.3.  Interleaving and Transmission Rescheduling
  contents:
  - "5.1.3.  Interleaving and Transmission Rescheduling\n   Interleaving has been\
    \ implemented in a number of payload formats to\n   allow for less quality reduction\
    \ when packet loss occurs.  When\n   losses are bursty and several consecutive\
    \ packets are lost, the\n   impact on quality can be quite severe.  Interleaving\
    \ is used to\n   convert that burst loss to several spread-out individual packet\n\
    \   losses.  It can also be used when several ADUs are aggregated in the\n   same\
    \ packets.  A loss of an RTP packet with several ADUs in the\n   payload has the\
    \ same effect as a burst loss if the ADUs would have\n   been transmitted in individual\
    \ packets.  To reduce the burstiness of\n   the loss, the data present in an aggregated\
    \ payload may be\n   interleaved, thus, spreading the loss over a longer time\
    \ period.\n   A requirement for doing interleaving within an RTP payload format\
    \ is\n   the aggregation of multiple ADUs.  For formats that do not use\n   aggregation,\
    \ there is still a possibility of implementing a\n   transmission order rescheduling\
    \ mechanism.  That has the effect that\n   the packets transmitted consecutively\
    \ originate from different points\n   in the RTP stream.  This can be used to\
    \ mitigate burst losses, which\n   may be useful if one transmits packets at frequent\
    \ intervals.\n   However, it may also be used to transmit more significant data\n\
    \   earlier in combination with RTP retransmission to allow for more\n   graceful\
    \ degradation and increased possibility to receive the most\n   important data,\
    \ e.g., intra frames of video.\n   The drawback of interleaving is the significantly\
    \ increased\n   transmission buffering delay, making it less useful for low-delay\n\
    \   applications.  It may also create significant buffering requirements\n   on\
    \ the receiver.  That buffering is also problematic, as it is\n   usually difficult\
    \ to indicate when a receiver may start consume data\n   and still avoid buffer\
    \ under run caused by the interleaving mechanism\n   itself.  Transmission rescheduling\
    \ is only useful in a few specific\n   cases, as in streaming with retransmissions.\
    \  The potential gains\n   must be weighed against the complexity of these schemes.\n"
- title: 5.1.4.  Media Back Channels
  contents:
  - "5.1.4.  Media Back Channels\n   A few RTP payload formats have implemented back\
    \ channels within the\n   media format.  Those have been for specific features,\
    \ like the AMR\n   [RFC4867] codec mode request (CMR) field.  The CMR field is\
    \ used in\n   the operation of gateways to circuit-switched voice to allow an\
    \ IP\n   terminal to react to the circuit-switched network's need for a\n   specific\
    \ encoder mode.  A common motivation for media back channels\n   is the need to\
    \ have signaling in direct relation to the media or the\n   media path.\n   If\
    \ back channels are considered for an RTP payload format they should\n   be for\
    \ a specific requirements which cannot be easily satisfied by\n   more generic\
    \ mechanisms within RTP or RTCP.\n"
- title: 5.1.5.  Media Scalability
  contents:
  - "5.1.5.  Media Scalability\n   Some codecs support various types of media scalability,\
    \ i.e. some\n   data of a RTP stream may be removed to adapt the media's properties,\n\
    \   such as bitrate and quality.  The adaptation may be applied in the\n   following\
    \ dimensions of the media:\n   Temporal:  For most video codecs it is possible\
    \ to adapt the frame\n      rate without any specific definition of a temporal\
    \ scalability\n      mode, e.g., for H.264 [RFC6184].  In these cases, the sender\n\
    \      changes which frames it delivers and the RTP timestamp makes it\n     \
    \ clear the frame interval and each frames relative capture time.\n      H.264\
    \ Scalable Video Coding (SVC) [RFC6190] has more explicit\n      support for temporal\
    \ scalability.\n   Spatial:  Video codecs supporting scalability may adapt the\n\
    \      resolution, e.g., in SVC [RFC6190].\n   Quality:  The quality of the encoded\
    \ stream may be scaled by adapting\n      the accuracy of the coding process,\
    \ as, e.g.  possible with Signal\n      to Noise Ratio (SNR) fidelity scalability\
    \ of SVC [RFC6190].\n   At the time of writing this document, codecs that support\
    \ scalability\n   have a bit of a revival.  It has been realized that getting\
    \ the\n   required functionality for supporting the features of the media\n  \
    \ stream into the RTP framework is quite challenging.  One of the\n   recent examples\
    \ for layered and scalable codecs is SVC [RFC6190].\n   SVC is a good example\
    \ for a payload format supporting media\n   scalability features, which have been\
    \ in its basic form already\n   included in RTP.  A layered codec supports the\
    \ dropping of data parts\n   of a RTP stream, i.e., RTP packets may not be transmitted\
    \ or\n   forwarded to a client in order to adapt the RTP streams bitrate as\n\
    \   well as the received encoded stream's quality, while still providing\n   a\
    \ decodable subset of the encoded stream to a client.  One example\n   for using\
    \ the scalability feature may be an RTP Mixer (Multipoint\n   Control Unit) [RFC7667],\
    \ which controls the rate and quality sent out\n   to participants in a communication\
    \ based on dropping RTP packets or\n   removing part of the payload.  Another\
    \ example may be a transport\n   channel, which allows for differentiation in\
    \ Quality of Service (QoS)\n   parameters based on RTP sessions in a multicast\
    \ session.  In such a\n   case, the more important packets of the scalable encoded\
    \ stream (base\n   layer) may get better QoS parameters than the less important\
    \ packets\n   (enhancement layer) in order to provide some kind of graceful\n\
    \   degradation.  The scalability features required for allowing an\n   adaptive\
    \ transport, as described in the two examples above, are based\n   on RTP multiplexing\
    \ in order to identify the packets to be dropped or\n   transmitted/forwarded.\
    \  The multiplexing features defined for\n   Scalable Video Coding [RFC6190] are:\n\
    \      Single Session Transmission (SST), where all media layers of the\n    \
    \  media are transported as a single synchronization source (SSRC) in\n      a\
    \ single RTP session; as well as\n      Multi-Session Transmission (MST), which\
    \ should more accurately be\n      called multi-stream transmission, where different\
    \ media layers or\n      a set of media layers are transported in different RTP\
    \ streams,\n      i.e., using multiple sources (SSRCs).\n   In the first case\
    \ (SST), additional in-band as well as out-of-band\n   signaling is required in\
    \ order to allow identification of packets\n   belonging to a specific media layer.\
    \  Furthermore, an adaptation of\n   the encoded stream requires dropping of specific\
    \ packets in order to\n   provide the client with a compliant encoded stream.\
    \  In case of using\n   encryption, it is typically required for an adapting network\
    \ device\n   to be in the security context to allow packet dropping and providing\n\
    \   an intact RTP session to the client.  This typically requires the\n   network\
    \ device to be an RTP mixer.\n   In general, having a media-unaware network device\
    \ dropping excessive\n   packets will be more problematic than having a Media-Aware\
    \ Network\n   Entity (MANE).  First is the need to understand the media format\
    \ and\n   know which ADUs or payloads belong to the layers, that no other layer\n\
    \   will be dependent on after the dropping.  Second, if the MANE can\n   work\
    \ as an RTP mixer or translator, it can rewrite the RTP and RTCP\n   in such a\
    \ way that the receiver will not suspect unintentional RTP\n   packet losses needing\
    \ repair actions.  This as the receiver can't\n   determine if a lost packet was\
    \ an important base layer packet or one\n   of the less important extension layers.\n\
    \   In the second case (MST), the RTP packet streams can be sent using a\n   single\
    \ or multiple RTP session, and thus transport flows, e.g., on\n   different multicast\
    \ groups.  Transmitting the streams in different\n   RTP sessions, then the out-of-band\
    \ signaling typically provides\n   enough information to identify the media layers\
    \ and its properties.\n   The decision on dropping packets is based on the Network\
    \ Address that\n   identifies the RTP session to be dropped.  In order to allow\
    \ correct\n   data provisioning to a decoder after reception from different\n\
    \   sessions, data realignment mechanisms are required.  In some cases,\n   existing\
    \ generic tools, as described below, can be employed to enable\n   such realignment;\
    \ when those generic mechanisms are sufficient, they\n   should be used.  For\
    \ example, \"Rapid Synchronisation for RTP Flows\"\n   [RFC6051], uses existing\
    \ RTP mechanisms, i.e. the NTP timestamp, to\n   ensure timely inter-session synchronization.\
    \  Another is the\n   signaling feature for indicating dependencies of RTP sessions\
    \ in SDP,\n   as defined in the Media Decoding Dependency Grouping in SDP\n  \
    \ [RFC5583].\n   Using MST within a single RTP session is also possible and allows\n\
    \   stream level handling instead of looking deeper into the packets by a\n  \
    \ MANE.  However, transport flow-level properties will be the same\n   unless\
    \ packet based mechanisms like Diffserv is used.\n   When QoS settings, e.g.,\
    \ Diffserv markings, are used to ensure that\n   the extension layers are dropped\
    \ prior the base layer the receiving\n   endpoint has the benefit in MST to know\
    \ which layer or set of layers\n   the missing packets belong to as it will be\
    \ bound to different RTP\n   sessions or RTP packet streams (SSRCs), thus, explicitly\
    \ indicating\n   the importance of the loss.\n"
- title: 5.1.6.  High Packet Rates
  contents:
  - "5.1.6.  High Packet Rates\n   Some media codecs require high packet rates; in\
    \ these cases, the RTP\n   sequence number wraps too quickly.  As a rule of thumb,\
    \ it must not\n   be possible to wrap the sequence number space within at least\
    \ three\n   RTCP reporting intervals.  As the reporting interval can vary widely\n\
    \   due to configuration and session properties, and also must take into\n   account\
    \ the randomization of the interval, one can use the TCP\n   maximum segment lifetime\
    \ (MSL), i.e., 2 minutes, in ones\n   consideration.  If earlier wrapping may\
    \ occur, then the payload\n   format should specify an extended sequence number\
    \ field to allow the\n   receiver to determine where a specific payload belongs\
    \ in the\n   sequence, even in the face of extensive reordering.  The RTP payload\n\
    \   format for uncompressed video [RFC4175] can be used as an example for\n  \
    \ such a field.\n   RTCP is also affected by high packet rates.  For RTCP mechanisms\
    \ that\n   do not use extended counters, there is significant risk that they\n\
    \   wrap multiple times between RTCP reporting or feedback; thus,\n   producing\
    \ uncertainty about which packet(s) are referenced.  The\n   payload designer\
    \ can't effect the RTCP packet formats used and their\n   design, but can note\
    \ this considerations when configuring RTCP\n   bandwidth and reporting intervals\
    \ to avoid to wrapping issues.\n"
- title: 5.2.  Selecting Timestamp Definition
  contents:
  - "5.2.  Selecting Timestamp Definition\n   The RTP timestamp is an important part\
    \ and has two design choices\n   associated with it.  The first is the definition\
    \ that determines what\n   the timestamp value in a particular RTP packet will\
    \ be, the second is\n   which timestamp rate should be used.\n   The timestamp\
    \ definition needs to explicitly define what the\n   timestamp value in the RTP\
    \ packet represent for a particular payload\n   format.  Two common definitions\
    \ are used; for discretely sampled\n   media, like video frames, the sampling\
    \ time of the earliest included\n   video frame which the data represent (fully\
    \ or partially) is used;\n   for continuous media like audio, the sampling time\
    \ of the earliest\n   sample which the payload data represent.  There exist cases\
    \ where\n   more elaborate or other definitions are used.\n   RTP payload formats\
    \ with a timestamp definition that results in no or\n   little correlation between\
    \ the media time instance and its\n   transmission time cause the RTCP jitter\
    \ calculation to become\n   unusable due to the errors introduced on the sender\
    \ side.  A common\n   example is a payload format for a video codec where the\
    \ RTP timestamp\n   represents the capture time of the video frame, but frames\
    \ are large\n   enough that multiple RTP packets need to be sent for each frame\n\
    \   spread across the framing interval.  It should be noted whether or\n   not\
    \ the payload format has this property.\n   An RTP payload format also needs to\
    \ define what timestamp rates, or\n   clock rates (as it is also called), may\
    \ be used.  Depending on the\n   RTP payload format, this may be a single rate\
    \ or multiple ones or\n   theoretically any rate.  So what needs to be considered\
    \ when\n   selecting a rate?\n   The rate needs be selected so that one can determine\
    \ where in the\n   time line of the media a particular sample (e.g., individual\
    \ audio\n   sample, or video frame) or set of samples (e.g., audio frames)\n \
    \  belong.  To enable correct synchronization of this data with previous\n   frames,\
    \ including over periods of discontinuous transmission or\n   irregularities.\n\
    \   For audio, it is common to require audio sample accuracy.  Thus, one\n   commonly\
    \ selects the input sampling rate as the timestamp rate.  This\n   can, however,\
    \ be challenging for audio codecs that support multiple\n   different sampling\
    \ frequencies, either as codec input or being used\n   internally but effecting\
    \ output, for example, frame duration.\n   Depending on how one expects to use\
    \ these different sampling rates\n   one can allow multiple timestamp rates, each\
    \ matching a particular\n   codec input or sampling rate.  However, due to the\
    \ issues with using\n   multiple different RTP timestamp rates for the same source\
    \ (SSRC)\n   [RFC7160], this should be avoided if one expects to need to switch\n\
    \   between modes.\n   Then, an alternative is to find a common denominator frequency\n\
    \   between the different modes, e.g., OPUS [RFC7587] that uses 48 kHz.\n   If\
    \ the different modes uses or can use a common input/output\n   frequency, then\
    \ selecting this also needs to be considered.  However,\n   it is important to\
    \ consider all aspects as the case of AMR-WB+\n   [RFC4352] illustrates.  AMR-WB+'s\
    \ RTP timestamp rate has the very\n   unusual value of 72 kHz, despite the fact\
    \ that output normally is at\n   a sample rate of 48kHz.  The design is motivated\
    \ by the media codec's\n   production of a large range of different frame lengths\
    \ in time\n   perspective.  The 72 kHz timestamp rate is the smallest found value\n\
    \   that would make all of the frames the codec could produce result in\n   an\
    \ integer frame length in RTP timestamp ticks.  This way, a receiver\n   can always\
    \ correctly place the frames in relation to any other frame,\n   even when the\
    \ frame length changes.  The downside is that the decoder\n   outputs for certain\
    \ frame lengths are, in fact, partial samples.  The\n   result is that the output\
    \ in samples from the codec will vary from\n   frame to frame, potentially making\
    \ implementation more difficult.\n   Video codecs have commonly been using 90\
    \ kHz; the reason is this is a\n   common denominator between the usually used\
    \ frame rates such as 24,\n   25, 30, 50 and 60, and NTSC's odd 29.97 Hz.  There\
    \ does, however,\n   exist at least one exception in the payload format for SMPTE\
    \ 292M\n   video [RFC3497] that uses a clock rate of 148.5 MHz.  The reason here\n\
    \   is that the timestamp then identify the exact start sample within a\n   video\
    \ frame.\n   Timestamp rates below 1000 Hz are not appropriate, because this will\n\
    \   cause a resolution too low in the RTCP measurements that are\n   expressed\
    \ in RTP timestamps.  This is the main reason that the text\n   RTP payload formats,\
    \ like T.140 [RFC4103], use 1000 Hz.\n"
- title: 6.  Noteworthy Aspects in Payload Format Design
  contents:
  - "6.  Noteworthy Aspects in Payload Format Design\n   This section provides a few\
    \ examples of payload formats that are\n   worth noting for good or bad design\
    \ in general or in specific\n   details.\n"
- title: 6.1.  Audio Payloads
  contents:
  - "6.1.  Audio Payloads\n   The AMR [RFC4867], AMR-WB [RFC4867], EVRC [RFC3558],\
    \ SMV [RFC3558]\n   payload formats are all quite similar.  They are all for frame-based\n\
    \   audio codecs and use a table of contents structure.  Each frame has a\n  \
    \ table of contents entry that indicates the type of the frame and if\n   additional\
    \ frames are present.  This is quite flexible, but produces\n   unnecessary overhead\
    \ if the ADU is of fixed size and if, when\n   aggregating multiple ADUs, they\
    \ are commonly of the same type.  In\n   that case, a solution like the one in\
    \ AMR-WB+ [RFC4352] may be more\n   suitable.\n   The RTP payload format for MIDI\
    \ [RFC6295] contains some interesting\n   features.  MIDI is an audio format sensitive\
    \ to packet losses, as the\n   loss of a \"note off\" command will result in a\
    \ note being stuck in an\n   \"on\" state.  To counter this, a recovery journal\
    \ is defined that\n   provides a summarized state that allows the receiver to\
    \ recover from\n   packet losses quickly.  It also uses RTCP and the reported\
    \ highest\n   sequence number to be able to prune the state the recovery journal\n\
    \   needs to contain.  These features appear limited in applicability to\n   media\
    \ formats that are highly stateful and primarily use symbolic\n   media representations.\n\
    \   There exists a security concern with variable bitrate audio and\n   speech\
    \ codecs that changes their payload length based on the input\n   data.  This\
    \ can leak information, especially in structured\n   communication like a speech\
    \ recognition prompt service that asks\n   people to enter information verbally.\
    \  This issue also exists to some\n   degree for discontinuous transmission as\
    \ that allows the length of\n   phrases to be determined.  The issue is further\
    \ discussed in\n   \"Guidelines for the Use of Variable Bit Rate Audio with Secure\
    \ RTP\"\n   [RFC6562], which needs to be read by anyone writing an RTP payload\n\
    \   format for an audio or speech codec with these properties.\n"
- title: 6.2.  Video
  contents:
  - "6.2.  Video\n   The definition of RTP payload formats for video has seen an evolution\n\
    \   from the early ones such as H.261 [RFC4587] towards the latest for\n   VP8\
    \ [RFC7741] and H.265/HEVC [RFC7798].\n   The H.264 RTP payload format [RFC3984]\
    \ can be seen as a smorgasbord\n   of functionality: some of it, such as the interleaving,\
    \ being pretty\n   advanced.  The reason for this was to ensure that the majority\
    \ of\n   applications considered by the ITU-T and MPEG that can be supported\n\
    \   by RTP are indeed supported.  This has created a payload format that\n   rarely\
    \ is fully implemented.  Despite that, no major issues with\n   interoperability\
    \ has been reported with one exception namely the\n   Offer/Answer and parameter\
    \ signaling, which resulted in a revised\n   specification [RFC6184].  However,\
    \ complaints about its complexity\n   are common.\n   The RTP payload format for\
    \ uncompressed video [RFC4175] must be\n   mentioned in this context as it contains\
    \ a special feature not\n   commonly seen in RTP payload formats.  Due to the\
    \ high bitrate and\n   thus packet rate of uncompressed video (gigabits rather\
    \ than megabits\n   per second) the payload format includes a field to extend\
    \ the RTP\n   sequence number since the normal 16-bit one can wrap in less than\
    \ a\n   second.  [RFC4175] also specifies a registry of different color sub-\n\
    \   samplings that can be reused in other video RTP payload formats.\n   Both\
    \ the H.264 and the uncompressed video format enable the\n   implementer to fulfill\
    \ the goals of application-level framing, i.e.,\n   each individual RTP Packet's\
    \ payload can be independently decoded and\n   its content used to create a video\
    \ frame (or part of) and that\n   irrespective of whether preceding packets has\
    \ been lost (see\n   Section 4) [RFC2736].  For uncompressed, this is straightforward\
    \ as\n   each pixel is independently represented from others and its location\n\
    \   in the video frame known.  H.264 is more dependent on the actual\n   implementation,\
    \ configuration of the video encoder and usage of the\n   RTP payload format.\n\
    \   The common challenge with video is that, in most cases, a single\n   compressed\
    \ video frame doesn't fit into a single IP packet.  Thus,\n   the compressed representation\
    \ of a video frame needs to be split over\n   multiple packets.  This can be done\
    \ unintelligently with a basic\n   payload level fragmentation method or more\
    \ integrated by interfacing\n   with the encoder's possibilities to create ADUs\
    \ that are independent\n   and fit the MTU for the RTP packet.  The latter is\
    \ more robust and\n   commonly recommended unless strong packet loss mechanisms\
    \ are used\n   and sufficient delay budget for the repair exist.  Commonly, both\n\
    \   payload-level fragmentation as well as explaining how tailored ADUs\n   can\
    \ be created are needed in a video payload format.  Also, the\n   handling of\
    \ crucial metadata, like H.264 Parameter Sets, needs to be\n   considered as decoding\
    \ is not possible without receiving the used\n   parameter sets.\n"
- title: 6.3.  Text
  contents:
  - "6.3.  Text\n   Only a single format text format has been standardized in the\
    \ IETF,\n   namely T.140 [RFC4103].  The 3GPP Timed Text format [RFC4396] should\n\
    \   be considered to be text, even though in the end was registered as a\n   video\
    \ format.  It was registered in that part of the tree because it\n   deals with\
    \ decorated text, usable for subtitles and other\n   embellishments of video.\
    \  However, it has many of the properties that\n   text formats generally have.\n\
    \   The RTP payload format for T.140 was designed with high reliability\n   in\
    \ mind as real-time text commonly is an extremely low bitrate\n   application.\
    \  Thus, it recommends the use of RFC 2198 with many\n   generations of redundancy.\
    \  However, the format failed to provide a\n   text-block-specific sequence number\
    \ and instead relies on the RTP one\n   to detect loss.  This makes detection\
    \ of missing text blocks\n   unnecessarily difficult and hinders deployment with\
    \ other robustness\n   mechanisms that would involve switching the payload type,\
    \ as that may\n   result in erroneous error marking in the T.140 text stream.\n"
- title: 6.4.  Application
  contents:
  - "6.4.  Application\n   At the time of writing, the application content type contains\
    \ two\n   media types that aren't RTP transport robustness tools such as FEC\n\
    \   [RFC3009] [RFC5109] [RFC6015] [RFC6682] and RTP retransmission\n   [RFC4588].\n\
    \   The first one is H.224 [RFC4573], which enables far-end camera\n   control\
    \ over RTP.  This is not an IETF-defined RTP format, only an\n   IETF-performed\
    \ registration.\n   The second one is \"RTP Payload Format for Society of Motion\
    \ Picture\n   and Television Engineers (SMPTE) ST 336 Encoded Data\" [RFC6597],\n\
    \   which carries generic key length value (KLV) triplets.  These pairs\n   may\
    \ contain arbitrary binary metadata associated with video\n   transmissions. \
    \ It has a very basic fragmentation mechanism requiring\n   reception without\
    \ packet loss, not only of the triplet itself but\n   also one packet before and\
    \ after the sequence of fragmented KLV\n   triplet, to ensure correct reception.\
    \  Specific KLV triplets\n   themselves may have recommendations on how to handle\
    \ incomplete ones\n   allowing the use and repair of them.  In general, the application\n\
    \   using such a mechanism must be robust to errors and also use some\n   combination\
    \ of application-level repetition, RTP-level transport\n   robustness tools, and\
    \ network-level requirements to achieve low\n   levels of packet loss rates and\
    \ repair of KLV triplets.\n   An author should consider applying for a media subtype\
    \ under the\n   application media type (application/<foo>) when the payload format\
    \ is\n   of a generic nature or does not clearly match any of the media types\n\
    \   described above (audio, video, or text).  However, existing\n   limitations\
    \ in, for example, SDP, have resulted in generic mechanisms\n   normally registered\
    \ in all media types possibly having been\n   associated with any existing media\
    \ types in an RTP session.\n"
- title: 7.  Important Specification Sections
  contents:
  - "7.  Important Specification Sections\n   A number of sections in the payload\
    \ format draft need special\n   consideration.  These include the Security Considerations\
    \ and IANA\n   Considerations sections that are required in all drafts.  Payload\n\
    \   formats are also strongly recommended to have the media format\n   description\
    \ and congestion control considerations.  The included RTP\n   payload format\
    \ template (Appendix A) contains sample text for some of\n   these sections.\n"
- title: 7.1.  Media Format Description
  contents:
  - "7.1.  Media Format Description\n   The intention of this section is to enable\
    \ reviewers and other\n   readers to get an overview of the capabilities and major\
    \ properties\n   of the media format.  It should be kept short and concise and\
    \ is not\n   a complete replacement for reading the media format specification.\n\
    \   The actual specification of the RTP payload format generally uses\n   normative\
    \ references to the codec format specification to define how\n   codec data elements\
    \ are included in the payload format.  This\n   normative reference can be to\
    \ anything that have sufficient stability\n   for a normative reference.  There\
    \ exist no formal requirement on the\n   codec format specification being publicly\
    \ available or free to\n   access.  However, it significantly helps in the review\
    \ process if\n   that specification is made available to any reviewer.  There\
    \ exist\n   RTP payload format RFCs for open-source project specifications as\n\
    \   well as an individual company's proprietary format, and a large\n   variety\
    \ of standards development organizations or industrial forums.\n"
- title: 7.2.  Security Considerations
  contents:
  - "7.2.  Security Considerations\n   All Internet-Drafts require a Security Considerations\
    \ section.  The\n   Security Considerations section in an RTP payload format needs\
    \ to\n   concentrate on the security properties this particular format has.\n\
    \   Some payload formats have very few specific issues or properties and\n   can\
    \ fully fall back on the security considerations for RTP in general\n   and those\
    \ of the profile being used.  Because those documents are\n   always applicable,\
    \ a reference to these is normally placed first in\n   the Security Considerations\
    \ section.  There is suggested text in the\n   template below.\n   The security\
    \ issues of confidentiality, integrity protection, replay\n   protection and source\
    \ authentication are common issue for all payload\n   formats.  These should be\
    \ solved by mechanisms external to the\n   payload and do not need any special\
    \ consideration in the payload\n   format except for a reminder on these issues.\
    \  There exist\n   exceptions, such as payload formats that includes security\n\
    \   functionality, like ISMAcrypt [ISMACrypt2].  Reasons for this\n   division\
    \ is further documented in \"Securing the RTP Protocol\n   Framework: Why RTP\
    \ Does Not Mandate a Single Media Security Solution\"\n   [RFC7202].  For a survey\
    \ of available mechanisms to meet these goals,\n   review \"Options for Securing\
    \ RTP Sessions\" [RFC7201].  This also\n   includes key-exchange mechanisms for\
    \ the security mechanisms, which\n   can be both integrated or separate.  The\
    \ choice of key-management can\n   have significant impact on the security properties\
    \ of the RTP-based\n   application.  Suitable stock text to inform people about\
    \ this is\n   included in the template.\n   Potential security issues with an\
    \ RTP payload format and the media\n   encoding that need to be considered if\
    \ they are applicable:\n   1.  The decoding of the payload format or its media\
    \ results in\n       substantial non-uniformity, either in output or in complexity\
    \ to\n       perform the decoding operation.  For example, a generic non-\n  \
    \     destructive compression algorithm may provide an output of almost\n    \
    \   an infinite size for a very limited input, thus consuming memory\n       or\
    \ storage space out of proportion with what the receiving\n       application\
    \ expected.  Such inputs can cause some sort of\n       disruption, i.e., a denial-of-service\
    \ attack on the receiver side\n       by preventing that host from performing\
    \ usable work.  Certain\n       decoding operations may also vary in the amount\
    \ of processing\n       needed to perform those operations depending on the input.\
    \  This\n       may also be a security risk if it is possible to raise processing\n\
    \       load significantly above nominal simply by designing a malicious\n   \
    \    input sequence.  If such potential attacks exist, this must be\n       made\
    \ clear in the Security Considerations section to make\n       implementers aware\
    \ of the need to take precautions against such\n       behavior.\n   2.  The inclusion\
    \ of active content in the media format or its\n       transport.  \"Active content\"\
    \ means scripts, etc., that allow an\n       attacker to perform potentially arbitrary\
    \ operations on the\n       receiver.  Most active contents has limited possibility\
    \ to access\n       the system or perform operations outside a protected sandbox.\n\
    \       RFC 4855 [RFC4855] has a requirement that it be noted in the\n       media\
    \ types registration whether or not the payload format\n       contains active\
    \ content.  If the payload format has active\n       content, it is strongly recommended\
    \ that references to any\n       security model applicable for such content are\
    \ provided.  A\n       boilerplate text for \"no active content\" is included\
    \ in the\n       template.  This must be changed if the format actually carries\n\
    \       active content.\n   3.  Some media formats allow for the carrying of \"\
    user data\", or\n       types of data which are not known at the time of the\n\
    \       specification of the payload format.  Such data may be a security\n  \
    \     risk and should be mentioned.\n   4.  Audio or Speech codecs supporting\
    \ variable bitrate based on\n       'audio/speech' input or having discontinuous\
    \ transmission support\n       must consider the issues discussed in \"Guidelines\
    \ for the Use of\n       Variable Bit Rate Audio with Secure RTP\" [RFC6562].\n\
    \   Suitable stock text for the Security Considerations section is\n   provided\
    \ in the template in Appendix A.  However, authors do need to\n   actively consider\
    \ any security issues from the start.  Failure to\n   address these issues may\
    \ block approval and publication.\n"
- title: 7.3.  Congestion Control
  contents:
  - "7.3.  Congestion Control\n   RTP and its profiles do discuss congestion control.\
    \  There is ongoing\n   work in the IETF with both a basic circuit-breaker mechanism\n\
    \   [RFC8083] using basic RTCP messages intended to prevent persistent\n   congestion\
    \ and also work on more capable congestion avoidance /\n   bitrate adaptation\
    \ mechanism in the RMCAT WG.\n   Congestion control is an important issue in any\
    \ usage in networks\n   that are not dedicated.  For that reason, it is recommended\
    \ that all\n   RTP payload format documents discuss the possibilities that exist\
    \ to\n   regulate the bitrate of the transmissions using the described RTP\n \
    \  payload format.  Some formats may have limited or step-wise\n   regulation\
    \ of bitrate.  Such limiting factors should be discussed.\n"
- title: 7.4.  IANA Considerations
  contents:
  - "7.4.  IANA Considerations\n   Since all RTP payload formats contain a media type\
    \ specification,\n   they also need an IANA Considerations section.  The media\
    \ type name\n   must be registered, and this is done by requesting that IANA register\n\
    \   that media name.  When that registration request is written, it shall\n  \
    \ also be requested that the media type is included under the \"RTP\n   Payload\
    \ Format media types\" subregistry of the RTP registry\n   (http://www.iana.org/assignments/rtp-parameters).\n\
    \   Parameters for the payload format need to be included in this\n   registration\
    \ and can be specified as required or optional ones.  The\n   format of these\
    \ parameters should be such that they can be included\n   in the SDP attribute\
    \ \"a=fmtp\" string (see Section 6 [RFC4566]), which\n   is the common mapping.\
    \  Some parameters, such as \"Channel\" are\n   normally mapped to the rtpmap\
    \ attribute instead; see Section 3 of\n   [RFC4855].\n   In addition to the above\
    \ request for media type registration, some\n   payload formats may have parameters\
    \ where, in the future, new\n   parameter values need to be added.  In these cases,\
    \ a registry for\n   that parameter must be created.  This is done by defining\
    \ the\n   registry in the IANA Considerations section.  BCP 26 [BCP26] provides\n\
    \   guidelines to specifying such registries.  Care should be taken when\n   defining\
    \ the policy for new registrations.\n   Before specifying a new registry, it is\
    \ worth checking the existing\n   ones in the IANA \"MIME Media Type Sub-Parameter\
    \ Registries\".  For\n   example, video formats that need a media parameter expressing\
    \ color\n   sub-sampling may be able to reuse those defined for 'video/raw'\n\
    \   [RFC4175].\n"
- title: 8.  Authoring Tools
  contents:
  - "8.  Authoring Tools\n   This section provides information about some tools that\
    \ may be used.\n   Don't feel pressured to follow these recommendations.  There\
    \ exist a\n   number of alternatives, including the ones listed at\n   <http://tools.ietf.org>.\
    \  But these suggestions are worth checking\n   out before deciding that the grass\
    \ is greener somewhere else.\n   Note that these options are related to the old\
    \ text only RFC format,\n   and do not cover tools for at the time of publication\
    \ recently\n   approved new RFC format, see [RFC7990].\n"
- title: 8.1.  Editing Tools
  contents:
  - "8.1.  Editing Tools\n   There are many choices when it comes to tools to choose\
    \ for authoring\n   Internet-Drafts.  However, in the end, they need to be able\
    \ to\n   produce a draft that conforms to the Internet-Draft requirements.  If\n\
    \   you don't have any previous experience with authoring Internet-\n   Drafts,\
    \ xml2rfc does have some advantages.  It helps by creating a\n   lot of the necessary\
    \ boilerplate in accordance with the latest rules,\n   thus reducing the effort.\
    \  It also speeds up publication after\n   approval as the RFC Editor can use\
    \ the source XML document to produce\n   the RFC more quickly.\n   Another common\
    \ choice is to use Microsoft Word and a suitable\n   template (see [RFC5385])\
    \ to produce the draft and print that to file\n   using the generic text printer.\
    \  It has some advantages when it comes\n   to spell checking and change bars.\
    \  However, Word may also produce\n   some problems, like changing formatting,\
    \ and inconsistent results\n   between what one sees in the editor and in the\
    \ generated text\n   document, at least according to the author's personal experience.\n"
- title: 8.2.  Verification Tools
  contents:
  - "8.2.  Verification Tools\n   There are a few tools that are very good to know\
    \ about when writing a\n   draft.  These help check and verify parts of one's\
    \ work.  These tools\n   can be found at <http://tools.ietf.org>.\n   o  I-D Nits\
    \ checker (https://tools.ietf.org/tools/idnits/).  It\n      checks that the boilerplate\
    \ and some other things that are easily\n      verifiable by machine are okay\
    \ in your draft.  Always use it\n      before submitting a draft to avoid direct\
    \ refusal in the\n      submission step.\n   o  ABNF Parser and verification (https://tools.ietf.org/tools/bap/\n\
    \      abnf.cgi).  Checks that your ABNF parses correctly and warns about\n  \
    \    loose ends, like undefined symbols.  However, the actual content\n      can\
    \ only be verified by humans knowing what it intends to\n      describe.\n   o\
    \  RFC diff (https://tools.ietf.org/rfcdiff).  A diff tool that is\n      optimized\
    \ for drafts and RFCs.  For example, it does not point out\n      that the footer\
    \ and header have moved in relation to the text on\n      every page.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   As this is an Informational RFC about writing\
    \ drafts that are\n   intended to become RFCs, there are no direct security considerations.\n\
    \   However, the document does discuss the writing of Security\n   Considerations\
    \ sections and what should be particularly considered\n   when specifying RTP\
    \ payload formats.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [BCP9]     Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n              3\", BCP 9, RFC 2026, October 1996.\n   \
    \           Kolkman, O., Bradner, S., and S. Turner, \"Characterization\n    \
    \          of Proposed Standards\", BCP 9, RFC 7127, January 2014.\n         \
    \     Dusseault, L. and R. Sparks, \"Guidance on Interoperation\n            \
    \  and Implementation Reports for Advancement to Draft\n              Standard\"\
    , BCP 9, RFC 5657, September 2009.\n              Housley, R., Crocker, D., and\
    \ E. Burger, \"Reducing the\n              Standards Track to Two Maturity Levels\"\
    , BCP 9, RFC 6410,\n              October 2011.\n              Resnick, P., \"\
    Retirement of the \"Internet Official\n              Protocol Standards\" Summary\
    \ Document\", BCP 9, RFC 7100,\n              December 2013.\n              Dawkins,\
    \ S., \"Increasing the Number of Area Directors in\n              an IETF Area\"\
    , BCP 9, RFC 7475, March 2015.\n              <http://www.rfc-editor.org/info/bcp9>\n\
    \   [BCP25]    Wasserman, M., \"Updates to RFC 2418 Regarding the\n          \
    \    Management of IETF Mailing Lists\", BCP 25, RFC 3934,\n              October\
    \ 2004.\n              Bradner, S., \"IETF Working Group Guidelines and\n    \
    \          Procedures\", BCP 25, RFC 2418, September 1998.\n              Resnick,\
    \ P. and A. Farrel, \"IETF Anti-Harassment\n              Procedures\", BCP 25,\
    \ RFC 7776, March 2016.\n              <http://www.rfc-editor.org/info/bcp25>\n\
    \   [BCP26]    Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       May 2008, <http://www.rfc-editor.org/info/bcp26>.\n   [BCP78]    Bradner,\
    \ S., Ed. and J. Contreras, Ed., \"Rights\n              Contributors Provide\
    \ to the IETF Trust\", BCP 78, RFC 5378,\n              November 2008, <http://www.rfc-editor.org/info/bcp78>.\n\
    \   [BCP79]    Bradner, S., Ed., \"Intellectual Property Rights in IETF\n    \
    \          Technology\", BCP 79, RFC 3979, March 2005.\n              Narten,\
    \ T., \"Clarification of the Third Party Disclosure\n              Procedure in\
    \ RFC 3979\", BCP 79, RFC 4879, April 2007.\n              <http://www.rfc-editor.org/info/bcp79>\n\
    \   [BLOAT]    Nichols, K. and V. Jacobson, \"Controlling Queue Delay\",\n   \
    \           ACM Networks, Vol. 10, No. 5, DOI 10.1145/2208917.2209336,\n     \
    \         May 2012, <http://queue.acm.org/detail.cfm?id=2209336>.\n   [CSP-RTP]\
    \  Perkins, C., \"RTP: Audio and Video for the Internet\",\n              Addison-Wesley\
    \ Professional, ISBN 0-672-32249-8, June\n              2003.\n   [ID-GUIDE] Housley,\
    \ R., \"Guidelines to Authors of Internet-Drafts\",\n              December 2010,\n\
    \              <http://www.ietf.org/id-info/guidelines.html>.\n   [ISMACrypt2]\n\
    \              Internet Streaming Media Alliance (ISMA), \"ISMA Encryption\n \
    \             and Authentication, Version 2.0 release version\", November\n  \
    \            2007, <http://www.oipf.tv/docs/mpegif/isma_easpec2.0.pdf>.\n   [RED]\
    \      Floyd, S. and V. Jacobson, \"Random Early Detection (RED)\n           \
    \   gateways for Congestion Avoidance\", IEEE/ACM Transactions\n             \
    \ on Networking 1(4) 397--413, August 1993,\n              <http://www.aciri.org/floyd/papers/early.pdf>.\n\
    \   [RFC1633]  Braden, R., Clark, D., and S. Shenker, \"Integrated\n         \
    \     Services in the Internet Architecture: an Overview\",\n              RFC\
    \ 1633, DOI 10.17487/RFC1633, June 1994,\n              <http://www.rfc-editor.org/info/rfc1633>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2198]\
    \  Perkins, C., Kouvelas, I., Hodson, O., Hardman, V.,\n              Handley,\
    \ M., Bolot, J., Vega-Garcia, A., and S. Fosse-\n              Parisis, \"RTP\
    \ Payload for Redundant Audio Data\", RFC 2198,\n              DOI 10.17487/RFC2198,\
    \ September 1997,\n              <http://www.rfc-editor.org/info/rfc2198>.\n \
    \  [RFC2360]  Scott, G., \"Guide for Internet Standards Writers\", BCP 22,\n \
    \             RFC 2360, DOI 10.17487/RFC2360, June 1998,\n              <http://www.rfc-editor.org/info/rfc2360>.\n\
    \   [RFC2418]  Bradner, S., \"IETF Working Group Guidelines and\n            \
    \  Procedures\", BCP 25, RFC 2418, DOI 10.17487/RFC2418,\n              September\
    \ 1998, <http://www.rfc-editor.org/info/rfc2418>.\n   [RFC2475]  Blake, S., Black,\
    \ D., Carlson, M., Davies, E., Wang, Z.,\n              and W. Weiss, \"An Architecture\
    \ for Differentiated\n              Services\", RFC 2475, DOI 10.17487/RFC2475,\
    \ December 1998,\n              <http://www.rfc-editor.org/info/rfc2475>.\n  \
    \ [RFC2508]  Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP\n          \
    \    Headers for Low-Speed Serial Links\", RFC 2508,\n              DOI 10.17487/RFC2508,\
    \ February 1999,\n              <http://www.rfc-editor.org/info/rfc2508>.\n  \
    \ [RFC2733]  Rosenberg, J. and H. Schulzrinne, \"An RTP Payload Format\n     \
    \         for Generic Forward Error Correction\", RFC 2733,\n              DOI\
    \ 10.17487/RFC2733, December 1999,\n              <http://www.rfc-editor.org/info/rfc2733>.\n\
    \   [RFC2736]  Handley, M. and C. Perkins, \"Guidelines for Writers of RTP\n \
    \             Payload Format Specifications\", BCP 36, RFC 2736,\n           \
    \   DOI 10.17487/RFC2736, December 1999,\n              <http://www.rfc-editor.org/info/rfc2736>.\n\
    \   [RFC2959]  Baugher, M., Strahm, B., and I. Suconick, \"Real-Time\n       \
    \       Transport Protocol Management Information Base\", RFC 2959,\n        \
    \      DOI 10.17487/RFC2959, October 2000,\n              <http://www.rfc-editor.org/info/rfc2959>.\n\
    \   [RFC2974]  Handley, M., Perkins, C., and E. Whelan, \"Session\n          \
    \    Announcement Protocol\", RFC 2974, DOI 10.17487/RFC2974,\n              October\
    \ 2000, <http://www.rfc-editor.org/info/rfc2974>.\n   [RFC3009]  Rosenberg, J.\
    \ and H. Schulzrinne, \"Registration of\n              parityfec MIME types\"\
    , RFC 3009, DOI 10.17487/RFC3009,\n              November 2000, <http://www.rfc-editor.org/info/rfc3009>.\n\
    \   [RFC3095]  Bormann, C., Burmeister, C., Degermark, M., Fukushima, H.,\n  \
    \            Hannu, H., Jonsson, L-E., Hakenberg, R., Koren, T., Le,\n       \
    \       K., Liu, Z., Martensson, A., Miyazaki, A., Svanbro, K.,\n            \
    \  Wiebke, T., Yoshimura, T., and H. Zheng, \"RObust Header\n              Compression\
    \ (ROHC): Framework and four profiles: RTP, UDP,\n              ESP, and uncompressed\"\
    , RFC 3095, DOI 10.17487/RFC3095,\n              July 2001, <http://www.rfc-editor.org/info/rfc3095>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3264]\
    \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with\
    \ Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n   [RFC3410]\
    \  Case, J., Mundy, R., Partain, D., and B. Stewart,\n              \"Introduction\
    \ and Applicability Statements for Internet-\n              Standard Management\
    \ Framework\", RFC 3410,\n              DOI 10.17487/RFC3410, December 2002,\n\
    \              <http://www.rfc-editor.org/info/rfc3410>.\n   [RFC3497]  Gharai,\
    \ L., Perkins, C., Goncher, G., and A. Mankin, \"RTP\n              Payload Format\
    \ for Society of Motion Picture and\n              Television Engineers (SMPTE)\
    \ 292M Video\", RFC 3497,\n              DOI 10.17487/RFC3497, March 2003,\n \
    \             <http://www.rfc-editor.org/info/rfc3497>.\n   [RFC3545]  Koren,\
    \ T., Casner, S., Geevarghese, J., Thompson, B., and\n              P. Ruddy,\
    \ \"Enhanced Compressed RTP (CRTP) for Links with\n              High Delay, Packet\
    \ Loss and Reordering\", RFC 3545,\n              DOI 10.17487/RFC3545, July 2003,\n\
    \              <http://www.rfc-editor.org/info/rfc3545>.\n   [RFC3550]  Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n              Applications\", STD 64, RFC 3550, DOI\
    \ 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n  \
    \            Video Conferences with Minimal Control\", STD 65, RFC 3551,\n   \
    \           DOI 10.17487/RFC3551, July 2003,\n              <http://www.rfc-editor.org/info/rfc3551>.\n\
    \   [RFC3558]  Li, A., \"RTP Payload Format for Enhanced Variable Rate\n     \
    \         Codecs (EVRC) and Selectable Mode Vocoders (SMV)\",\n              RFC\
    \ 3558, DOI 10.17487/RFC3558, July 2003,\n              <http://www.rfc-editor.org/info/rfc3558>.\n\
    \   [RFC3569]  Bhattacharyya, S., Ed., \"An Overview of Source-Specific\n    \
    \          Multicast (SSM)\", RFC 3569, DOI 10.17487/RFC3569, July\n         \
    \     2003, <http://www.rfc-editor.org/info/rfc3569>.\n   [RFC3577]  Waldbusser,\
    \ S., Cole, R., Kalbfleisch, C., and D.\n              Romascanu, \"Introduction\
    \ to the Remote Monitoring (RMON)\n              Family of MIB Modules\", RFC\
    \ 3577, DOI 10.17487/RFC3577,\n              August 2003, <http://www.rfc-editor.org/info/rfc3577>.\n\
    \   [RFC3611]  Friedman, T., Ed., Caceres, R., Ed., and A. Clark, Ed.,\n     \
    \         \"RTP Control Protocol Extended Reports (RTCP XR)\",\n             \
    \ RFC 3611, DOI 10.17487/RFC3611, November 2003,\n              <http://www.rfc-editor.org/info/rfc3611>.\n\
    \   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n   \
    \           Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",\n   \
    \           RFC 3711, DOI 10.17487/RFC3711, March 2004,\n              <http://www.rfc-editor.org/info/rfc3711>.\n\
    \   [RFC3828]  Larzon, L-A., Degermark, M., Pink, S., Jonsson, L-E., Ed.,\n  \
    \            and G. Fairhurst, Ed., \"The Lightweight User Datagram\n        \
    \      Protocol (UDP-Lite)\", RFC 3828, DOI 10.17487/RFC3828, July\n         \
    \     2004, <http://www.rfc-editor.org/info/rfc3828>.\n   [RFC3984]  Wenger, S.,\
    \ Hannuksela, M., Stockhammer, T., Westerlund,\n              M., and D. Singer,\
    \ \"RTP Payload Format for H.264 Video\",\n              RFC 3984, DOI 10.17487/RFC3984,\
    \ February 2005,\n              <http://www.rfc-editor.org/info/rfc3984>.\n  \
    \ [RFC4103]  Hellstrom, G. and P. Jones, \"RTP Payload for Text\n            \
    \  Conversation\", RFC 4103, DOI 10.17487/RFC4103, June 2005,\n              <http://www.rfc-editor.org/info/rfc4103>.\n\
    \   [RFC4170]  Thompson, B., Koren, T., and D. Wing, \"Tunneling\n           \
    \   Multiplexed Compressed RTP (TCRTP)\", BCP 110, RFC 4170,\n              DOI\
    \ 10.17487/RFC4170, November 2005,\n              <http://www.rfc-editor.org/info/rfc4170>.\n\
    \   [RFC4175]  Gharai, L. and C. Perkins, \"RTP Payload Format for\n         \
    \     Uncompressed Video\", RFC 4175, DOI 10.17487/RFC4175,\n              September\
    \ 2005, <http://www.rfc-editor.org/info/rfc4175>.\n   [RFC4352]  Sjoberg, J.,\
    \ Westerlund, M., Lakaniemi, A., and S. Wenger,\n              \"RTP Payload Format\
    \ for the Extended Adaptive Multi-Rate\n              Wideband (AMR-WB+) Audio\
    \ Codec\", RFC 4352,\n              DOI 10.17487/RFC4352, January 2006,\n    \
    \          <http://www.rfc-editor.org/info/rfc4352>.\n   [RFC4396]  Rey, J. and\
    \ Y. Matsui, \"RTP Payload Format for 3rd\n              Generation Partnership\
    \ Project (3GPP) Timed Text\",\n              RFC 4396, DOI 10.17487/RFC4396,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4396>.\n  \
    \ [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n     \
    \         Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n          \
    \    July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n   [RFC4571]  Lazzaro,\
    \ J., \"Framing Real-time Transport Protocol (RTP)\n              and RTP Control\
    \ Protocol (RTCP) Packets over Connection-\n              Oriented Transport\"\
    , RFC 4571, DOI 10.17487/RFC4571, July\n              2006, <http://www.rfc-editor.org/info/rfc4571>.\n\
    \   [RFC4573]  Even, R. and A. Lochbaum, \"MIME Type Registration for RTP\n  \
    \            Payload Format for H.224\", RFC 4573, DOI 10.17487/RFC4573,\n   \
    \           July 2006, <http://www.rfc-editor.org/info/rfc4573>.\n   [RFC4585]\
    \  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"\
    Extended RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\", RFC 4585,\n              DOI 10.17487/RFC4585, July 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4585>.\n   [RFC4587]  Even,\
    \ R., \"RTP Payload Format for H.261 Video Streams\",\n              RFC 4587,\
    \ DOI 10.17487/RFC4587, August 2006,\n              <http://www.rfc-editor.org/info/rfc4587>.\n\
    \   [RFC4588]  Rey, J., Leon, D., Miyazaki, A., Varsa, V., and R.\n          \
    \    Hakenberg, \"RTP Retransmission Payload Format\", RFC 4588,\n           \
    \   DOI 10.17487/RFC4588, July 2006,\n              <http://www.rfc-editor.org/info/rfc4588>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC4844]  Daigle, L., Ed.\
    \ and Internet Architecture Board, \"The RFC\n              Series and RFC Editor\"\
    , RFC 4844, DOI 10.17487/RFC4844,\n              July 2007, <http://www.rfc-editor.org/info/rfc4844>.\n\
    \   [RFC4855]  Casner, S., \"Media Type Registration of RTP Payload\n        \
    \      Formats\", RFC 4855, DOI 10.17487/RFC4855, February 2007,\n           \
    \   <http://www.rfc-editor.org/info/rfc4855>.\n   [RFC4867]  Sjoberg, J., Westerlund,\
    \ M., Lakaniemi, A., and Q. Xie,\n              \"RTP Payload Format and File\
    \ Storage Format for the\n              Adaptive Multi-Rate (AMR) and Adaptive\
    \ Multi-Rate Wideband\n              (AMR-WB) Audio Codecs\", RFC 4867, DOI 10.17487/RFC4867,\n\
    \              April 2007, <http://www.rfc-editor.org/info/rfc4867>.\n   [RFC4975]\
    \  Campbell, B., Ed., Mahy, R., Ed., and C. Jennings, Ed.,\n              \"The\
    \ Message Session Relay Protocol (MSRP)\", RFC 4975,\n              DOI 10.17487/RFC4975,\
    \ September 2007,\n              <http://www.rfc-editor.org/info/rfc4975>.\n \
    \  [RFC5109]  Li, A., Ed., \"RTP Payload Format for Generic Forward Error\n  \
    \            Correction\", RFC 5109, DOI 10.17487/RFC5109, December\n        \
    \      2007, <http://www.rfc-editor.org/info/rfc5109>.\n   [RFC5124]  Ott, J.\
    \ and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time Transport\
    \ Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\", RFC 5124,\
    \ DOI 10.17487/RFC5124, February\n              2008, <http://www.rfc-editor.org/info/rfc5124>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5285]\
    \  Singer, D. and H. Desineni, \"A General Mechanism for RTP\n              Header\
    \ Extensions\", RFC 5285, DOI 10.17487/RFC5285, July\n              2008, <http://www.rfc-editor.org/info/rfc5285>.\n\
    \   [RFC5385]  Touch, J., \"Version 2.0 Microsoft Word Template for\n        \
    \      Creating Internet Drafts and RFCs\", RFC 5385,\n              DOI 10.17487/RFC5385,\
    \ February 2010,\n              <http://www.rfc-editor.org/info/rfc5385>.\n  \
    \ [RFC5484]  Singer, D., \"Associating Time-Codes with RTP Streams\",\n      \
    \        RFC 5484, DOI 10.17487/RFC5484, March 2009,\n              <http://www.rfc-editor.org/info/rfc5484>.\n\
    \   [RFC5583]  Schierl, T. and S. Wenger, \"Signaling Media Decoding\n       \
    \       Dependency in the Session Description Protocol (SDP)\",\n            \
    \  RFC 5583, DOI 10.17487/RFC5583, July 2009,\n              <http://www.rfc-editor.org/info/rfc5583>.\n\
    \   [RFC5795]  Sandlund, K., Pelletier, G., and L-E. Jonsson, \"The RObust\n \
    \             Header Compression (ROHC) Framework\", RFC 5795,\n             \
    \ DOI 10.17487/RFC5795, March 2010,\n              <http://www.rfc-editor.org/info/rfc5795>.\n\
    \   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n      \
    \        \"Network Time Protocol Version 4: Protocol and Algorithms\n        \
    \      Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010,\n         \
    \     <http://www.rfc-editor.org/info/rfc5905>.\n   [RFC6015]  Begen, A., \"RTP\
    \ Payload Format for 1-D Interleaved Parity\n              Forward Error Correction\
    \ (FEC)\", RFC 6015,\n              DOI 10.17487/RFC6015, October 2010,\n    \
    \          <http://www.rfc-editor.org/info/rfc6015>.\n   [RFC6051]  Perkins, C.\
    \ and T. Schierl, \"Rapid Synchronisation of RTP\n              Flows\", RFC 6051,\
    \ DOI 10.17487/RFC6051, November 2010,\n              <http://www.rfc-editor.org/info/rfc6051>.\n\
    \   [RFC6184]  Wang, Y., Even, R., Kristensen, T., and R. Jesup, \"RTP\n     \
    \         Payload Format for H.264 Video\", RFC 6184,\n              DOI 10.17487/RFC6184,\
    \ May 2011,\n              <http://www.rfc-editor.org/info/rfc6184>.\n   [RFC6190]\
    \  Wenger, S., Wang, Y., Schierl, T., and A. Eleftheriadis,\n              \"\
    RTP Payload Format for Scalable Video Coding\", RFC 6190,\n              DOI 10.17487/RFC6190,\
    \ May 2011,\n              <http://www.rfc-editor.org/info/rfc6190>.\n   [RFC6295]\
    \  Lazzaro, J. and J. Wawrzynek, \"RTP Payload Format for\n              MIDI\"\
    , RFC 6295, DOI 10.17487/RFC6295, June 2011,\n              <http://www.rfc-editor.org/info/rfc6295>.\n\
    \   [RFC6354]  Xie, Q., \"Forward-Shifted RTP Redundancy Payload Support\",\n\
    \              RFC 6354, DOI 10.17487/RFC6354, August 2011,\n              <http://www.rfc-editor.org/info/rfc6354>.\n\
    \   [RFC6363]  Watson, M., Begen, A., and V. Roca, \"Forward Error\n         \
    \     Correction (FEC) Framework\", RFC 6363,\n              DOI 10.17487/RFC6363,\
    \ October 2011,\n              <http://www.rfc-editor.org/info/rfc6363>.\n   [RFC6410]\
    \  Housley, R., Crocker, D., and E. Burger, \"Reducing the\n              Standards\
    \ Track to Two Maturity Levels\", BCP 9, RFC 6410,\n              DOI 10.17487/RFC6410,\
    \ October 2011,\n              <http://www.rfc-editor.org/info/rfc6410>.\n   [RFC6562]\
    \  Perkins, C. and JM. Valin, \"Guidelines for the Use of\n              Variable\
    \ Bit Rate Audio with Secure RTP\", RFC 6562,\n              DOI 10.17487/RFC6562,\
    \ March 2012,\n              <http://www.rfc-editor.org/info/rfc6562>.\n   [RFC6597]\
    \  Downs, J., Ed. and J. Arbeiter, Ed., \"RTP Payload Format\n              for\
    \ Society of Motion Picture and Television Engineers\n              (SMPTE) ST\
    \ 336 Encoded Data\", RFC 6597,\n              DOI 10.17487/RFC6597, April 2012,\n\
    \              <http://www.rfc-editor.org/info/rfc6597>.\n   [RFC6679]  Westerlund,\
    \ M., Johansson, I., Perkins, C., O'Hanlon, P.,\n              and K. Carlberg,\
    \ \"Explicit Congestion Notification (ECN)\n              for RTP over UDP\",\
    \ RFC 6679, DOI 10.17487/RFC6679, August\n              2012, <http://www.rfc-editor.org/info/rfc6679>.\n\
    \   [RFC6682]  Watson, M., Stockhammer, T., and M. Luby, \"RTP Payload\n     \
    \         Format for Raptor Forward Error Correction (FEC)\",\n              RFC\
    \ 6682, DOI 10.17487/RFC6682, August 2012,\n              <http://www.rfc-editor.org/info/rfc6682>.\n\
    \   [RFC6701]  Farrel, A. and P. Resnick, \"Sanctions Available for\n        \
    \      Application to Violators of IETF IPR Policy\", RFC 6701,\n            \
    \  DOI 10.17487/RFC6701, August 2012,\n              <http://www.rfc-editor.org/info/rfc6701>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7160]  Petit-Huguenin, M. and G. Zorn, Ed., \"Support for Multiple\n \
    \             Clock Rates in an RTP Session\", RFC 7160,\n              DOI 10.17487/RFC7160,\
    \ April 2014,\n              <http://www.rfc-editor.org/info/rfc7160>.\n   [RFC7164]\
    \  Gross, K. and R. Brandenburg, \"RTP and Leap Seconds\",\n              RFC\
    \ 7164, DOI 10.17487/RFC7164, March 2014,\n              <http://www.rfc-editor.org/info/rfc7164>.\n\
    \   [RFC7201]  Westerlund, M. and C. Perkins, \"Options for Securing RTP\n   \
    \           Sessions\", RFC 7201, DOI 10.17487/RFC7201, April 2014,\n        \
    \      <http://www.rfc-editor.org/info/rfc7201>.\n   [RFC7202]  Perkins, C. and\
    \ M. Westerlund, \"Securing the RTP\n              Framework: Why RTP Does Not\
    \ Mandate a Single Media\n              Security Solution\", RFC 7202, DOI 10.17487/RFC7202,\
    \ April\n              2014, <http://www.rfc-editor.org/info/rfc7202>.\n   [RFC7231]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7273]\
    \  Williams, A., Gross, K., van Brandenburg, R., and H.\n              Stokking,\
    \ \"RTP Clock Source Signalling\", RFC 7273,\n              DOI 10.17487/RFC7273,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7273>.\n   [RFC7322]\
    \  Flanagan, H. and S. Ginoza, \"RFC Style Guide\", RFC 7322,\n              DOI\
    \ 10.17487/RFC7322, September 2014,\n              <http://www.rfc-editor.org/info/rfc7322>.\n\
    \   [RFC7587]  Spittka, J., Vos, K., and JM. Valin, \"RTP Payload Format\n   \
    \           for the Opus Speech and Audio Codec\", RFC 7587,\n              DOI\
    \ 10.17487/RFC7587, June 2015,\n              <http://www.rfc-editor.org/info/rfc7587>.\n\
    \   [RFC7656]  Lennox, J., Gross, K., Nandakumar, S., Salgueiro, G., and\n   \
    \           B. Burman, Ed., \"A Taxonomy of Semantics and Mechanisms\n       \
    \       for Real-Time Transport Protocol (RTP) Sources\", RFC 7656,\n        \
    \      DOI 10.17487/RFC7656, November 2015,\n              <http://www.rfc-editor.org/info/rfc7656>.\n\
    \   [RFC7667]  Westerlund, M. and S. Wenger, \"RTP Topologies\", RFC 7667,\n \
    \             DOI 10.17487/RFC7667, November 2015,\n              <http://www.rfc-editor.org/info/rfc7667>.\n\
    \   [RFC7741]  Westin, P., Lundin, H., Glover, M., Uberti, J., and F.\n      \
    \        Galligan, \"RTP Payload Format for VP8 Video\", RFC 7741,\n         \
    \     DOI 10.17487/RFC7741, March 2016,\n              <http://www.rfc-editor.org/info/rfc7741>.\n\
    \   [RFC7798]  Wang, Y., Sanchez, Y., Schierl, T., Wenger, S., and M.\n      \
    \        Hannuksela, \"RTP Payload Format for High Efficiency Video\n        \
    \      Coding (HEVC)\", RFC 7798, DOI 10.17487/RFC7798, March\n              2016,\
    \ <http://www.rfc-editor.org/info/rfc7798>.\n   [RFC7826]  Schulzrinne, H., Rao,\
    \ A., Lanphier, R., Westerlund, M.,\n              and M. Stiemerling, Ed., \"\
    Real-Time Streaming Protocol\n              Version 2.0\", RFC 7826, DOI 10.17487/RFC7826,\
    \ December\n              2016, <http://www.rfc-editor.org/info/rfc7826>.\n  \
    \ [RFC7990]  Flanagan, H., \"RFC Format Framework\", RFC 7990,\n             \
    \ DOI 10.17487/RFC7990, December 2016,\n              <http://www.rfc-editor.org/info/rfc7990>.\n\
    \   [RFC8083]  Perkins, C. and V. Singh, \"Multimedia Congestion Control:\n  \
    \            Circuit Breakers for Unicast RTP Sessions\", RFC 8083,\n        \
    \      DOI 10.17487/RFC8083, March 2017,\n              <http://www.rfc-editor.org/info/rfc8083>.\n\
    \   [TAO]      Hoffman, P., Ed., \"The Tao of IETF: A Novice's Guide to\n    \
    \          the Internet Engineering Task Force\", November 2012,\n           \
    \   <http://www.ietf.org/tao.html>.\n   [TRACKER]  \"IETF Datatracker\", <https://datatracker.ietf.org/>.\n"
- title: Appendix A.  RTP Payload Format Template
  contents:
  - "Appendix A.  RTP Payload Format Template\n   This section contains a template\
    \ for writing an RTP payload format in\n   the form of an Internet-Draft.  Text\
    \ within [...] are instructions\n   and must be removed from the draft itself.\
    \  Some text proposals that\n   are included are conditional. \"...\" is used\
    \ to indicate where further\n   text should be written.\n"
- title: A.1.  Title
  contents:
  - "A.1.  Title\n   [The title shall be descriptive but as compact as possible. \
    \ RTP is\n   allowed and recommended abbreviation in the title]\n   RTP payload\
    \ format for ...\n"
- title: A.2.  Front-Page Boilerplate
  contents:
  - "A.2.  Front-Page Boilerplate\n   Status of this Memo\n   [Insert the IPR notice\
    \ and copyright boilerplate from BCP 78 and 79\n   that applies to this draft.]\n\
    \   [Insert the current Internet-Draft document explanation.  At the time\n  \
    \ of publishing it was:]\n   Internet-Drafts are working documents of the Internet\
    \ Engineering\n   Task Force (IETF).  Note that other groups may also distribute\n\
    \   working documents as Internet-Drafts.  The list of current Internet-\n   Drafts\
    \ is at http://datatracker.ietf.org/drafts/current/.\n   Internet-Drafts are draft\
    \ documents valid for a maximum of six months\n   and may be updated, replaced,\
    \ or obsoleted by other documents at any\n   time.  It is inappropriate to use\
    \ Internet-Drafts as reference\n   material or to cite them other than as \"work\
    \ in progress.\"\n"
- title: A.3.  Abstract
  contents:
  - "A.3.  Abstract\n   [A payload format abstract should mention the capabilities\
    \ of the\n   format, for which media format is used, and a little about that codec\n\
    \   formats capabilities.  Any abbreviation used in the payload format\n   must\
    \ be spelled out here except the very well known like RTP.  No\n   citations are\
    \ allowed, and no use of language from RFC 2119 either.]\n"
- title: A.4.  Table of Contents
  contents:
  - "A.4.  Table of Contents\n   [If your draft is approved for publication as an\
    \ RFC, a Table of\n   Contents is required, per [RFC7322].]\n"
- title: A.5.  Introduction
  contents:
  - "A.5.  Introduction\n   [The Introduction should provide a background and overview\
    \ of the\n   payload format's capabilities.  No normative language in this\n \
    \  section, i.e., no MUST, SHOULDs etc.]\n"
- title: A.6.  Conventions, Definitions, and Abbreviations
  contents:
  - "A.6.  Conventions, Definitions, and Abbreviations\n   [Define conventions, definitions,\
    \ and abbreviations used in the\n   document in this section.  The most common\
    \ definition used in RTP\n   payload formats are the RFC 2119 definitions of the\
    \ uppercase\n   normative words, e.g., MUST and SHOULD.]\n   The key words \"\
    MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",\
    \ \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in RFC 2119.\n"
- title: A.7.  Media Format Description
  contents:
  - "A.7.  Media Format Description\n   [The intention of this section is to enable\
    \ reviewers and persons to\n   get an overview of the capabilities and major properties\
    \ of the media\n   format.  It should be kept short and concise and is not a complete\n\
    \   replacement for reading the media format specification.]\n"
- title: A.8.  Payload Format
  contents:
  - "A.8.  Payload Format\n   [Overview of payload structure]\n"
- title: A.8.1.  RTP Header Usage
  contents:
  - "A.8.1.  RTP Header Usage\n   [RTP header usage needs to be defined.  The fields\
    \ that absolutely\n   need to be defined are timestamp and marker bit.  Further\
    \ fields may\n   be specified if used.  All the rest should be left to their RTP\n\
    \   specification definition.]\n   The remaining RTP header fields are used as\
    \ specified in RTP\n   [RFC3550].\n"
- title: A.8.2.  Payload Header
  contents:
  - "A.8.2.  Payload Header\n   [Define how the payload header, if it exists, is structured\
    \ and\n   used.]\n"
- title: A.8.3.  Payload Data
  contents:
  - "A.8.3.  Payload Data\n   [The payload data, i.e., what the media codec has produced.\
    \  Commonly\n   done through reference to the media codec specification, which\n\
    \   defines how the data is structured.  Rules for padding may need to be\n  \
    \ defined to bring data to octet alignment.]\n"
- title: A.9.  Payload Examples
  contents:
  - "A.9.  Payload Examples\n   [One or more examples are good to help ease the understanding\
    \ of the\n   RTP payload format.]\n"
- title: A.10.  Congestion Control Considerations
  contents:
  - "A.10.  Congestion Control Considerations\n   [This section is to describe the\
    \ possibility to vary the bitrate as a\n   response to congestion.  Below is also\
    \ a proposal for an initial text\n   that reference RTP and profiles definition\
    \ of congestion control.]\n   Congestion control for RTP SHALL be used in accordance\
    \ with RFC 3550\n   [RFC3550], and with any applicable RTP profile: e.g., RFC\
    \ 3551\n   [RFC3551].  An additional requirement if best-effort service is being\n\
    \   used is users of this payload format MUST monitor packet loss to\n   ensure\
    \ that the packet loss rate is within acceptable parameters.\n   Circuit Breakers\
    \ [RFC8083] is an update to RTP [RFC3550] that defines\n   criteria for when one\
    \ is required to stop sending RTP Packet Streams.\n   The circuit breakers is\
    \ to be implemented and followed.\n"
- title: A.11.  Payload Format Parameters
  contents:
  - "A.11.  Payload Format Parameters\n   This RTP payload format is identified using\
    \ the ... media type, which\n   is registered in accordance with RFC 4855 [RFC4855]\
    \ and using the\n   template of RFC 6838 [RFC6838].\n"
- title: A.11.1.  Media Type Definition
  contents:
  - "A.11.1.  Media Type Definition\n   [Here the media type registration template\
    \ from RFC 6838 is placed\n   and filled out.  This template is provided with\
    \ some common RTP\n   boilerplate.]\n   Type name:\n   Subtype name:\n   Required\
    \ parameters:\n   Optional parameters:\n   Encoding considerations:\n      This\
    \ media type is framed and binary; see Section 4.8 in RFC 6838\n      [RFC6838].\n\
    \   Security considerations:\n      Please see the Security Considerations section\
    \ in RFC XXXX\n   Interoperability considerations:\n   Published specification:\n\
    \   Applications that use this media type:\n   Additional information:\n     \
    \ Deprecated alias names for this type:\n         [Only applicable if there exists\
    \ widely deployed alias for this\n         media type; see Section 4.2.9 of [RFC6838].\
    \  Remove or use N/A\n         otherwise.]\n      Magic number(s):\n         [Only\
    \ applicable for media types that has file format\n         specification.  Remove\
    \ or use N/A otherwise.]\n      File extension(s):\n         [Only applicable\
    \ for media types that has file format\n         specification.  Remove or use\
    \ N/A otherwise.]\n      Macintosh file type code(s):\n         [Only applicable\
    \ for media types that has file format\n         specification.  Even for file\
    \ formats they can be skipped as\n         they are not relied on after Mac OS\
    \ 9.X.  Remove or use N/A\n         otherwise.]\n   Person & email address to\
    \ contact for further information:\n   Intended usage:\n      [One of COMMON,\
    \ LIMITED USE, or OBSOLETE.]\n   Restrictions on usage:\n      [The below text\
    \ is for media types that is only defined for RTP\n      payload formats.  There\
    \ exist certain media types that are defined\n      both as RTP payload formats\
    \ and file transfer.  The rules for such\n      types are documented in RFC 4855\
    \ [RFC4855].]\n      This media type depends on RTP framing and, hence, is only\
    \ defined\n      for transfer via RTP [RFC3550].  Transport within other framing\n\
    \      protocols is not defined at this time.\n   Author:\n   Change controller:\n\
    \   IETF Payload working group delegated from the IESG.\n   Provisional registration?\
    \ (standards tree only):\n      No\n   (Any other information that the author\
    \ deems interesting may be added\n   below this line.)\n   [From RFC 6838:\n \
    \     \"N/A\", written exactly that way, can be used in any field if\n      desired\
    \ to emphasize the fact that it does not apply or that the\n      question was\
    \ not omitted by accident.  Do not use 'none' or other\n      words that could\
    \ be mistaken for a response.\n      Limited-use media types should also note\
    \ in the applications list\n      whether or not that list is exhaustive.]\n"
- title: A.11.2.  Mapping to SDP
  contents:
  - "A.11.2.  Mapping to SDP\n   The mapping of the above defined payload format media\
    \ type and its\n   parameters SHALL be done according to Section 3 of RFC 4855\n\
    \   [RFC4855].\n   [More specific rules only need to be included if some parameter\
    \ does\n   not match these rules.]\n"
- title: A.11.2.1.  Offer/Answer Considerations
  contents:
  - "A.11.2.1.  Offer/Answer Considerations\n   [Here write your Offer/Answer considerations\
    \ section; please see\n   Section 3.4.2.1 for help.]\n"
- title: A.11.2.2.  Declarative SDP Considerations
  contents:
  - "A.11.2.2.  Declarative SDP Considerations\n   [Here write your considerations\
    \ for declarative SDP, please see\n   Section 3.4.2.2 for help.]\n"
- title: A.12.  IANA Considerations
  contents:
  - "A.12.  IANA Considerations\n   This memo requests that IANA registers [insert\
    \ media type name here]\n   as specified in Appendix A.11.1.  The media type is\
    \ also requested to\n   be added to the IANA registry for \"RTP Payload Format\
    \ MIME types\"\n   <http://www.iana.org/assignments/rtp-parameters>.\n   [See\
    \ Section 7.4 and consider if any of the parameter needs a\n   registered name\
    \ space.]\n"
- title: A.13.  Security Considerations
  contents:
  - "A.13.  Security Considerations\n   [See Section 7.2.]\n   RTP packets using the\
    \ payload format defined in this specification\n   are subject to the security\
    \ considerations discussed in the RTP\n   specification [RFC3550] , and in any\
    \ applicable RTP profile such as\n   RTP/AVP [RFC3551], RTP/AVPF [RFC4585], RTP/SAVP\
    \ [RFC3711], or RTP/\n   SAVPF [RFC5124].  However, as \"Securing the RTP Protocol\
    \ Framework:\n   Why RTP Does Not Mandate a Single Media Security Solution\" [RFC7202]\n\
    \   discusses, it is not an RTP payload format's responsibility to\n   discuss\
    \ or mandate what solutions are used to meet the basic security\n   goals like\
    \ confidentiality, integrity, and source authenticity for\n   RTP in general.\
    \  This responsibility lays on anyone using RTP in an\n   application.  They can\
    \ find guidance on available security mechanisms\n   and important considerations\
    \ in \"Options for Securing RTP Sessions\"\n   [RFC7201].  Applications SHOULD\
    \ use one or more appropriate strong\n   security mechanisms.  The rest of this\
    \ Security Considerations\n   section discusses the security impacting properties\
    \ of the payload\n   format itself.\n   This RTP payload format and its media\
    \ decoder do not exhibit any\n   significant non-uniformity in the receiver-side\
    \ computational\n   complexity for packet processing, and thus are unlikely to\
    \ pose a\n   denial-of-service threat due to the receipt of pathological data.\n\
    \   Nor does the RTP payload format contain any active content.\n   [The previous\
    \ paragraph may need editing due to the format breaking\n   either of the statements.\
    \  Fill in here any further potential\n   security threats created by the payload\
    \ format itself.]\n"
- title: A.14.  RFC Editor Considerations
  contents:
  - "A.14.  RFC Editor Considerations\n   Note to RFC Editor: This section may be\
    \ removed after carrying out\n   all the instructions of this section.\n   RFC\
    \ XXXX is to be replaced by the RFC number this specification\n   receives when\
    \ published.\n"
- title: A.15.  References
  contents:
  - "A.15.  References\n   [References must be classified as either normative or informative\
    \ and\n   added to the relevant section.  References should use descriptive\n\
    \   reference tags.]\n"
- title: A.15.1.  Normative References
  contents:
  - "A.15.1.  Normative References\n   [Normative references are those that are required\
    \ to be used to\n   correctly implement the payload format.  Also, when requirements\n\
    \   language is used, as in the sample text for \"Congestion Control\n   Considerations\"\
    \ above, there should be a normative reference to\n   [RFC2119].]\n"
- title: A.15.2.  Informative References
  contents:
  - "A.15.2.  Informative References\n   [All other references.]\n"
- title: A.16.  Authors' Addresses
  contents:
  - "A.16.  Authors' Addresses\n   [All authors need to include their name and email\
    \ address as a\n   minimum: postal mail and possibly phone numbers are included\n\
    \   commonly.]\n   [The Template Ends Here!]\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to thank the individuals who have\
    \ provided\n   input to this document.  These individuals include Richard Barnes,\n\
    \   Ali C. Begen, Bo Burman, Ross Finlayson, Russ Housley, John Lazzaro,\n   Jonathan\
    \ Lennox, Colin Perkins, Tom Taylor, Stephan Wenger, and Qin\n   Wu.\n"
- title: Contributors
  contents:
  - "Contributors\n   The author would like to thank Tom Taylor for the editing pass\
    \ of the\n   whole document and contributing text regarding proprietary RTP\n\
    \   payload formats.  Thanks also goes to Thomas Schierl who contributed\n   text\
    \ regarding Media Scalability features in payload formats\n   (Section 5.1.5).\
    \  Stephan Wenger has contributed text on the need to\n   understand the media\
    \ coding (Section 3.1) as well as joint\n   development of payload format with\
    \ the media coding (Section 4.4).\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Magnus Westerlund\n   Ericsson\n   Farogatan 2\n   SE-164\
    \ 80 Kista\n   Sweden\n   Phone: +46 10 714 82 87\n   Email: magnus.westerlund@ericsson.com\n"
