- title: __initial_text__
  contents:
  - '             The SRP Authentication and Key Exchange System

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a cryptographically strong network\n   authentication\
    \ mechanism known as the Secure Remote Password (SRP)\n   protocol.  This mechanism\
    \ is suitable for negotiating secure\n   connections using a user-supplied password,\
    \ while eliminating the\n   security problems traditionally associated with reusable\
    \ passwords.\n   This system also performs a secure key exchange in the process\
    \ of\n   authentication, allowing security layers (privacy and/or integrity\n\
    \   protection) to be enabled during the session.  Trusted key servers\n   and\
    \ certificate infrastructures are not required, and clients are not\n   required\
    \ to store or manage any long-term keys.  SRP offers both\n   security and deployment\
    \ advantages over existing challenge-response\n   techniques, making it an ideal\
    \ drop-in replacement where secure\n   password authentication is needed.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The lack of a secure authentication mechanism that is also\
    \ easy to\n   use has been a long-standing problem with the vast majority of\n\
    \   Internet protocols currently in use.  The problem is two-fold: Users\n   like\
    \ to use passwords that they can remember, but most password-based\n   authentication\
    \ systems offer little protection against even passive\n   attackers, especially\
    \ if weak and easily-guessed passwords are used.\n   Eavesdropping on a TCP/IP\
    \ network can be carried out very easily and\n   very effectively against protocols\
    \ that transmit passwords in the\n   clear.  Even so-called \"challenge-response\"\
    \ techniques like the one\n   described in [RFC 2095] and [RFC 1760], which are\
    \ designed to defeat\n   simple sniffing attacks, can be compromised by what is\
    \ known as a\n   \"dictionary attack\".  This occurs when an attacker captures\
    \ the\n   messages exchanged during a legitimate run of the protocol and uses\n\
    \   that information to verify a series of guessed passwords taken from a\n  \
    \ precompiled \"dictionary\" of common passwords.  This works because\n   users\
    \ often choose simple, easy-to-remember passwords, which\n   invariably are also\
    \ easy to guess.\n   Many existing mechanisms also require the password database\
    \ on the\n   host to be kept secret because the password P or some private hash\n\
    \   h(P) is stored there and would compromise security if revealed.  That\n  \
    \ approach often degenerates into \"security through obscurity\" and goes\n  \
    \ against the UNIX convention of keeping a \"public\" password file whose\n  \
    \ contents can be revealed without destroying system security.\n   SRP meets the\
    \ strictest requirements laid down in [RFC 1704] for a\n   non-disclosing authentication\
    \ protocol.  It offers complete\n   protection against both passive and active\
    \ attacks, and accomplishes\n   this efficiently using a single Diffie-Hellman-style\
    \ round of\n   computation, making it feasible to use in both interactive and\
    \ non-\n   interactive authentication for a wide range of Internet protocols.\n\
    \   Since it retains its security when used with low-entropy passwords,\n   it\
    \ can be seamlessly integrated into existing user applications.\n"
- title: 2. Conventions and Terminology
  contents:
  - "2. Conventions and Terminology\n   The protocol described by this document is\
    \ sometimes referred to as\n   \"SRP-3\" for historical purposes.  This particular\
    \ protocol is\n   described in [SRP] and is believed to have very good logical\
    \ and\n   cryptographic resistance to both eavesdropping and active attacks.\n\
    \   This document does not attempt to describe SRP in the context of any\n   particular\
    \ Internet protocol; instead it describes an abstract\n   protocol that can be\
    \ easily fitted to a particular application.  For\n   example, the specific format\
    \ of messages (including padding) is not\n   specified.  Those issues have been\
    \ left to the protocol implementor\n   to decide.\n   The one implementation issue\
    \ worth specifying here is the mapping\n   between strings and integers.  Internet\
    \ protocols are byte-oriented,\n   while SRP performs algebraic operations on\
    \ its messages, so it is\n   logical to define at least one method by which integers\
    \ can be\n   converted into a string of bytes and vice versa.\n   An n-byte string\
    \ S can be converted to an integer as follows:\n   i = S[n-1] + 256 * S[n-2] +\
    \ 256^2 * S[n-3] + ... + 256^(n-1) * S[0]\n   where i is the integer and S[x]\
    \ is the value of the x'th byte of S.\n   In human terms, the string of bytes\
    \ is the integer expressed in base\n   256, with the most significant digit first.\
    \  When converting back to\n   a string, S[0] must be non-zero (padding is considered\
    \ to be a\n   separate, independent process).  This conversion method is suitable\n\
    \   for file storage, in-memory representation, and network transmission\n   of\
    \ large integer values.  Unless otherwise specified, this mapping\n   will be\
    \ assumed.\n   If implementations require padding a string that represents an\n\
    \   integer value, it is recommended that they use zero bytes and add\n   them\
    \ to the beginning of the string.  The conversion back to integer\n   automatically\
    \ discards leading zero bytes, making this padding scheme\n   less prone to error.\n\
    \   The SHA hash function, when used in this document, refers to the\n   SHA-1\
    \ message digest algorithm described in [SHA1].\n"
- title: 3. The SRP-SHA1 mechanism
  contents:
  - "3. The SRP-SHA1 mechanism\n   This section describes an implementation of the\
    \ SRP authentication\n   and key-exchange protocol that employs the SHA hash function\
    \ to\n   generate session keys and authentication proofs.\n   The host stores\
    \ user passwords as triplets of the form\n        { <username>, <password verifier>,\
    \ <salt> }\n   Password entries are generated as follows:\n        <salt> = random()\n\
    \        x = SHA(<salt> | SHA(<username> | \":\" | <raw password>))\n        <password\
    \ verifier> = v = g^x % N\n   The | symbol indicates string concatenation, the\
    \ ^ operator is the\n   exponentiation operation, and the % operator is the integer\
    \ remainder\n   operation.  Most implementations perform the exponentiation and\n\
    \   remainder in a single stage to avoid generating unwieldy intermediate\n  \
    \ results.  Note that the 160-bit output of SHA is implicitly converted\n   to\
    \ an integer before it is operated upon.\n   Authentication is generally initiated\
    \ by the client.\n      Client                             Host\n     --------\
    \                           ------\n      U = <username>              -->\n  \
    \                                   <--    s = <salt from passwd file>\n   Upon\
    \ identifying himself to the host, the client will receive the\n   salt stored\
    \ on the host under his username.\n      a = random()\n      A = g^a % N     \
    \            -->\n                                         v = <stored password\
    \ verifier>\n                                         b = random()\n         \
    \                         <--    B = (v + g^b) % N\n      p = <raw password>\n\
    \      x = SHA(s | SHA(U | \":\" | p))\n      S = (B - g^x) ^ (a + u * x) % N\
    \    S = (A * v^u) ^ b % N\n      K = SHA_Interleave(S)              K = SHA_Interleave(S)\n\
    \      (this function is described\n       in the next section)\n   The client\
    \ generates a random number, raises g to that power modulo\n   the field prime,\
    \ and sends the result to the host.  The host does the\n   same thing and also\
    \ adds the public verifier before sending it to the\n   client.  Both sides then\
    \ construct the shared session key based on\n   the respective formulae.\n   The\
    \ parameter u is a 32-bit unsigned integer which takes its value\n   from the\
    \ first 32 bits of the SHA1 hash of B, MSB first.\n   The client MUST abort authentication\
    \ if B % N is zero.\n   The host MUST abort the authentication attempt if A %\
    \ N is zero.  The\n   host MUST send B after receiving A from the client, never\
    \ before.\n   At this point, the client and server should have a common session\
    \ key\n   that is secure (i.e. not known to an outside party).  To finish\n  \
    \ authentication, they must prove to each other that their keys are\n   identical.\n\
    \        M = H(H(N) XOR H(g) | H(U) | s | A | B | K)\n                       \
    \             -->\n                                    <--    H(A | M | K)\n \
    \  The server will calculate M using its own K and compare it against\n   the\
    \ client's response.  If they do not match, the server MUST abort\n   and signal\
    \ an error before it attempts to answer the client's\n   challenge.  Not doing\
    \ so could compromise the security of the user's\n   password.\n   If the server\
    \ receives a correct response, it issues its own proof to\n   the client.  The\
    \ client will compute the expected response using its\n   own K to verify the\
    \ authenticity of the server.  If the client\n   responded correctly, the server\
    \ MUST respond with its hash value.\n   The transactions in this protocol description\
    \ do not necessarily have\n   a one-to-one correspondence with actual protocol\
    \ messages.  This\n   description is only intended to illustrate the relationships\
    \ between\n   the different parameters and how they are computed.  It is possible,\n\
    \   for example, for an implementation of the SRP-SHA1 mechanism to\n   consolidate\
    \ some of the flows as follows:\n        Client                             Host\n\
    \       --------                           ------\n        U, A              \
    \          -->\n                                    <--    s, B\n        H(H(N)\
    \ XOR H(g) | H(U) | s | A | B | K)\n                                    -->\n\
    \                                    <--    H(A | M | K)\n   The values of N and\
    \ g used in this protocol must be agreed upon by\n   the two parties in question.\
    \  They can be set in advance, or the host\n   can supply them to the client.\
    \  In the latter case, the host should\n   send the parameters in the first message\
    \ along with the salt.  For\n   maximum security, N should be a safe prime (i.e.\
    \ a number of the form\n   N = 2q + 1, where q is also prime).  Also, g should\
    \ be a generator\n   modulo N (see [SRP] for details), which means that for any\
    \ X where 0\n   < X < N, there exists a value x for which g^x % N == X.\n"
- title: 3.1.  Interleaved SHA
  contents:
  - "3.1.  Interleaved SHA\n   The SHA_Interleave function used in SRP-SHA1 is used\
    \ to generate a\n   session key that is twice as long as the 160-bit output of\
    \ SHA1.  To\n   compute this function, remove all leading zero bytes from the\
    \ input.\n   If the length of the resulting string is odd, also remove the first\n\
    \   byte.  Call the resulting string T.  Extract the even-numbered bytes\n   into\
    \ a string E and the odd-numbered bytes into a string F, i.e.\n     E = T[0] |\
    \ T[2] | T[4] | ...\n     F = T[1] | T[3] | T[5] | ...\n   Both E and F should\
    \ be exactly half the length of T.  Hash each one\n   with regular SHA1, i.e.\n\
    \     G = SHA(E)\n     H = SHA(F)\n   Interleave the two hashes back together\
    \ to form the output, i.e.\n     result = G[0] | H[0] | G[1] | H[1] | ... | G[19]\
    \ | H[19]\n   The result will be 40 bytes (320 bits) long.\n"
- title: 3.2.  Other Hash Algorithms
  contents:
  - "3.2.  Other Hash Algorithms\n   SRP can be used with hash functions other than\
    \ SHA.  If the hash\n   function produces an output of a different length than\
    \ SHA (20\n   bytes), it may change the length of some of the messages in the\n\
    \   protocol, but the fundamental operation will be unaffected.\n   Earlier versions\
    \ of the SRP mechanism used the MD5 hash function,\n   described in [RFC 1321].\
    \  Keyed hash transforms are also recommended\n   for use with SRP; one possible\
    \ construction uses HMAC [RFC 2104],\n   using K to key the hash in each direction\
    \ instead of concatenating it\n   with the other parameters.\n   Any hash function\
    \ used with SRP should produce an output of at least\n   16 bytes and have the\
    \ property that small changes in the input cause\n   significant nonlinear changes\
    \ in the output.  [SRP] covers these\n   issues in more depth.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   This entire memo discusses an authentication and\
    \ key-exchange system\n   that protects passwords and exchanges keys across an\
    \ untrusted\n   network.  This system improves security by eliminating the need\
    \ to\n   send cleartext passwords over the network and by enabling encryption\n\
    \   through its secure key-exchange mechanism.\n   The private values for a and\
    \ b correspond roughly to the private\n   values in a Diffie-Hellman exchange\
    \ and have similar constraints of\n   length and entropy.  Implementations may\
    \ choose to increase the\n   length of the parameter u, as long as both client\
    \ and server agree,\n   but it is not recommended that it be shorter than 32 bits.\n\
    \   SRP has been designed not only to counter the threat of casual\n   password-sniffing,\
    \ but also to prevent a determined attacker equipped\n   with a dictionary of\
    \ passwords from guessing at passwords using\n   captured network traffic.  The\
    \ SRP protocol itself also resists\n   active network attacks, and implementations\
    \ can use the securely\n   exchanged keys to protect the session against hijacking\
    \ and provide\n   confidentiality.\n   SRP also has the added advantage of permitting\
    \ the host to store\n   passwords in a form that is not directly useful to an\
    \ attacker.  Even\n   if the host's password database were publicly revealed,\
    \ the attacker\n   would still need an expensive dictionary search to obtain any\n\
    \   passwords.  The exponential computation required to validate a guess\n   in\
    \ this case is much more time-consuming than the hash currently used\n   by most\
    \ UNIX systems.  Hosts are still advised, though, to try their\n   best to keep\
    \ their password files secure.\n"
- title: 5. References
  contents:
  - "5. References\n   [RFC 1321]  Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    , RFC 1321,\n               April 1992.\n   [RFC 1704]  Haller, N. and R. Atkinson,\
    \ \"On Internet Authentication\",\n               RFC 1704, October 1994.\n  \
    \ [RFC 1760]  Haller, N., \"The S/Key One-Time Password System\", RFC\n      \
    \         1760, Feburary 1995.\n   [RFC 2095]  Klensin, J., Catoe, R. and P. Krumviede,\
    \ \"IMAP/POP\n               AUTHorize Extension for Simple Challenge/Response\"\
    , RFC\n               2095, January 1997.\n   [RFC 2104]  Krawczyk, H., Bellare,\
    \ M. and  R. Canetti, \"HMAC: Keyed-\n               Hashing for Message Authentication\"\
    , RFC 2104, February\n               1997.\n   [SHA1]      National Institute\
    \ of Standards and Technology (NIST),\n               \"Announcing the Secure\
    \ Hash Standard\", FIPS 180-1, U.S.\n               Department of Commerce, April\
    \ 1995.\n   [SRP]       T. Wu, \"The Secure Remote Password Protocol\", In\n \
    \              Proceedings of the 1998 Internet Society Symposium on\n       \
    \        Network and Distributed Systems Security, San Diego, CA,\n          \
    \     pp. 97-111.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   Thomas Wu\n   Stanford University\n   Stanford, CA 94305\n\
    \   EMail: tjw@cs.Stanford.EDU\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
