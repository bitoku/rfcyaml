- title: __initial_text__
  contents:
  - "               Integrated Services Digital Network (ISDN)\n                 \
    \     Q.921-User Adaptation Layer\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a protocol for backhauling of Integrated\n\
    \   Services Digital Network (ISDN) Q.921 User messages over IP using the\n  \
    \ Stream Control Transmission Protocol (SCTP).  This protocol would be\n   used\
    \ between a Signaling Gateway (SG) and Media Gateway Controller\n   (MGC).  It\
    \ is assumed that the SG receives ISDN signaling over a\n   standard ISDN interface.\n\
    \   This document obsoletes RFC 3057.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Scope ......................................................3\n  \
    \    1.2. Terminology ................................................3\n    \
    \  1.3. IUA Overview ...............................................5\n      1.4.\
    \ Services Provided by the IUA Layer .........................7\n      1.5. Functions\
    \ Implemented by the IUA Layer ....................10\n      1.6. Definition of\
    \ IUA Boundaries ..............................12\n   2. Conventions ....................................................15\n\
    \   3. Protocol Elements ..............................................15\n  \
    \    3.1. Common Message Header .....................................15\n    \
    \  3.2. IUA Message Header ........................................19\n      3.3.\
    \ IUA Messages ..............................................21\n   4. Procedures\
    \ .....................................................46\n      4.1. Procedures\
    \ to Support Service in Section 1.4.1 ............46\n      4.2. Procedures to\
    \ Support Service in Section 1.4.2 ............46\n      4.3. Procedures to Support\
    \ Service in Section 1.4.3 ............48\n   5. Examples .......................................................58\n\
    \      5.1. Establishment of Association and Traffic between\n           SGs and\
    \ ASPs ..............................................58\n      5.2. ASP Traffic\
    \ Fail-over Examples ............................62\n      5.3. Q.921/Q.931 Primitives\
    \ Backhaul Examples ..................63\n      5.4. Layer Management Communication\
    \ Examples ...................64\n   6. Security .......................................................65\n\
    \   7. IANA Considerations ............................................65\n  \
    \    7.1. SCTP Payload Protocol Identifier ..........................65\n    \
    \  7.2. IUA Protocol Extensions ...................................65\n   8. Timer\
    \ Values ...................................................67\n   9. Acknowledgements\
    \ ...............................................67\n   10. References ....................................................67\n\
    \      10.1. Normative References .....................................67\n  \
    \    10.2. Informative References ...................................67\n   11.\
    \ Change Log ....................................................68\n   Appendix\
    \ A ........................................................69\n      A.1. Signaling\
    \ Network Architecture ............................69\n      A.2. Application\
    \ Server Process Redundancy .....................70\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In this document, the term Q.921-User refers to an upper\
    \ layer that\n   uses the services of Q.921, not the user side of ISDN interface\
    \ [1].\n   Examples of the upper layer would be Q.931 and QSIG.\n   This section\
    \ describes the need for ISDN Q.921-User Adaptation (IUA)\n   layer protocol as\
    \ well as how this protocol shall be implemented.\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   There is a need for Switched Circuit Network (SCN) signaling\
    \ protocol\n   delivery from an ISDN Signaling Gateway (SG) to a Media Gateway\n\
    \   Controller (MGC) as described in the Framework Architecture for\n   Signaling\
    \ Transport [5].  The delivery mechanism SHOULD meet the\n   following criteria:\n\
    \   *  Support for transport of the Q.921/Q.931 boundary primitives\n   *  Support\
    \ for communication between Layer Management modules on SG\n      and MGC\n  \
    \ *  Support for management of SCTP active associations between SG\n      and\
    \ MGC\n   This document supports both ISDN Primary Rate Access (PRA) as well as\n\
    \   Basic Rate Access (BRA) including the support for both point-to-point\n  \
    \ and point-to-multipoint modes of communication.  This support\n   includes Facility\
    \ Associated Signaling (FAS), Non-Facility Associated\n   Signaling (NFAS), and\
    \ NFAS with backup D channel.  QSIG adaptation\n   layer requirements do not differ\
    \ from Q.931 adaptation layer; hence,\n   the procedures described in this document\
    \ are also applicable for a\n   QSIG adaptation layer.  For simplicity, only Q.931\
    \ will be mentioned\n   in the rest of this document.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Application Server (AS) - A logical entity serving a specific\n\
    \   application instance.  An example of an Application Server is a MGC\n   handling\
    \ the Q.931 and call processing for D channels terminated by\n   the Signaling\
    \ Gateways.  Practically speaking, an AS is modeled at\n   the SG as an ordered\
    \ list of one or more related Application Server\n   Processes (e.g., primary,\
    \ secondary, tertiary).\n   Application Server Process (ASP) - A process instance\
    \ of an\n   Application Server.  Examples of Application Server Processes are\n\
    \   primary or backup MGC instances.\n   Association - An association refers to\
    \ an SCTP association.  The\n   association will provide the transport for the\
    \ delivery of Q.921-User\n   protocol data units and IUA adaptation layer peer\
    \ messages.\n   Backhaul - A SG terminates the lower layers of an SCN protocol\
    \ and\n   backhauls the upper layer(s) to MGC for call processing.  For the\n\
    \   purposes of this document, the SG terminates Q.921 and backhauls\n   Q.931\
    \ to MGC.\n   Fail-over - The capability to re-route signaling traffic as required\n\
    \   between related ASPs in the event of failure or unavailability of the\n  \
    \ currently used ASP (e.g., from primary MGC to backup MGC).  Fail-over\n   also\
    \ applies upon the return to service of a previously unavailable\n   process.\n\
    \   Host - The computing platform that the ASP process is running on.\n   Interface\
    \ - For the purposes of this document, an interface supports\n   the relevant\
    \ ISDN signaling channel.  This signaling channel MAY be a\n   16-kbps D channel\
    \ for an ISDN BRA as well as 64-kbps primary or\n   backup D channel for an ISDN\
    \ PRA.  For QSIG, the signaling channel is\n   a Qc channel.\n   Interface Identifier\
    \ - The Interface Identifier identifies the\n   physical interface at the SG for\
    \ which the signaling messages are\n   sent/received.  The format of the Interface\
    \ Identifier parameter can\n   be text or integer, the values of which are assigned\
    \ according to\n   network operator policy.  The values used are of local significance\n\
    \   only, coordinated between the SG and ASP.  Significance is not\n   implied\
    \ across SGs served by an AS.\n   Layer Management - Layer Management is a nodal\
    \ function that handles\n   the inputs and outputs between the IUA layer and a\
    \ local management\n   entity.\n   Network Byte Order - Most significant byte\
    \ first, a.k.a big endian.\n   Stream - A stream refers to an SCTP stream: a uni-directional\
    \ logical\n   channel established from one SCTP endpoint to another associated\
    \ SCTP\n   endpoint, within which all user messages are delivered in sequence\n\
    \   except for those submitted to the un-ordered delivery service.\n   Q.921-User\
    \ - Any protocol normally using the services of the ISDN\n   Q.921 (e.g., Q.931,\
    \ QSIG, etc.).\n"
- title: 1.3.  IUA Overview
  contents:
  - "1.3.  IUA Overview\n   The architecture that has been defined [5] for SCN signaling\n\
    \   transport over IP uses multiple components, including an IP transport\n  \
    \ protocol, a signaling common transport protocol, and an adaptation\n   module\
    \ to support the services expected by a particular SCN signaling\n   protocol\
    \ from its underlying protocol layer.\n   This document defines an adaptation\
    \ module that is suitable for the\n   transport of ISDN Q.921-User (e.g., Q.931)\
    \ messages.\n"
- title: '1.3.1.  Example: SG to MGC'
  contents:
  - "1.3.1.  Example: SG to MGC\n   In a Signaling Gateway (SG), it is expected that\
    \ the ISDN signaling\n   is received over a standard ISDN network termination.\
    \  The SG then\n   provides interworking of transport functions with IP Signaling\n\
    \   Transport, in order to transport the Q.931 signaling messages to the\n   MGC\
    \ where the peer Q.931 protocol layer exists, as shown below:\n            ******\
    \   ISDN        ******      IP      *******\n            * EP *---------------*\
    \ SG *--------------* MGC *\n            ******               ******         \
    \     *******\n            +-----+                                  +-----+\n\
    \            |Q.931|              (NIF)               |Q.931|\n            +-----+\
    \           +----------+           +-----+\n            |     |           |  \
    \   | IUA|           | IUA |\n            |     |           |     +----+     \
    \      +-----+\n            |Q.921|           |Q.921|SCTP|           |SCTP |\n\
    \            |     |           |     +----+           +-----+\n            | \
    \    |           |     | IP |           | IP  |\n            +-----+         \
    \  +-----+----+           +-----+\n            NIF  - Nodal Interworking Function\n\
    \            EP   - ISDN End Point\n            SCTP - Stream Control Transmission\
    \ Protocol (Refer to [4,8])\n            IUA  - ISDN User Adaptation Layer Protocol\n\
    \           Figure 1.  IUA in the SG to MGC Application\n   It is recommended\
    \ that the IUA use the services of the Stream Control\n   Transmission Protocol\
    \ (SCTP) as the underlying reliable common\n   signaling transport protocol. \
    \ The use of SCTP provides the following\n   features:\n      -  explicit packet-oriented\
    \ delivery (not stream-oriented)\n      -  sequenced delivery of user messages\
    \ within multiple streams,\n         with an option for order-of-arrival delivery\
    \ of individual user\n         messages,\n      -  optional multiplexing of user\
    \ messages into SCTP datagrams,\n      -  network-level fault tolerance through\
    \ support of multi-homing\n         at either or both ends of an association,\n\
    \      -  resistance to flooding and masquerade attacks, and\n      -  data segmentation\
    \ to conform to discovered path MTU size.\n   There are scenarios without redundancy\
    \ requirements and scenarios in\n   which redundancy is supported below the transport\
    \ layer.  In these\n   cases, the SCTP functions above MAY be determined to not\
    \ be required\n   and TCP MAY be used as the underlying common transport protocol.\n"
- title: 1.3.2.  Support for the Management of SCTP Associations between the SG
  contents:
  - "1.3.2.  Support for the Management of SCTP Associations between the SG\n    \
    \    and ASPs\n   The IUA layer at the SG maintains the availability state of\
    \ all\n   dynamically registered remote ASPs, in order to manage the SCTP\n  \
    \ associations and the traffic between the SG and ASPs.  As well, the\n   active/inactive\
    \ states of remote ASP(s) are maintained.  Active ASPs\n   are those currently\
    \ receiving traffic from the SG.\n   The IUA layer MAY be instructed by local\
    \ management to establish an\n   SCTP association to a peer IUA node.  This can\
    \ be achieved using the\n   M-SCTP ESTABLISH primitive to request, indicate, and\
    \ confirm the\n   establishment of an SCTP association with a peer IUA node.\n\
    \   The IUA layer MAY also need to inform local management of the status\n   of\
    \ the underlying SCTP associations using the M-SCTP STATUS request\n   and indication\
    \ primitive.  For example, the IUA MAY inform local\n   management of the reason\
    \ for the release of an SCTP association,\n   determined either locally within\
    \ the IUA layer or by a primitive from\n   the SCTP.\n"
- title: 1.3.3.  ASP Fail-over Model and Terminology
  contents:
  - "1.3.3.  ASP Fail-over Model and Terminology\n   The IUA layer supports ASP fail-over\
    \ functions in order to support a\n   high availability of call processing capability.\
    \  All Q.921-User\n   messages incoming to an SG are assigned to a unique Application\n\
    \   Server, based on the Interface Identifier of the message.\n   The Application\
    \ Server is, in practical terms, a list of all ASPs\n   configured to process\
    \ Q.921-User messages from certain Interface\n   Identifiers.  One or more ASPs\
    \ in the list are normally active (i.e.,\n   handling traffic) while any others\
    \ MAY be unavailable or inactive, to\n   be possibly used in the event of failure\
    \ or unavailability of the\n   active ASP(s).\n   The IUA layer supports an n+k\
    \ redundancy model (active-standby, load\n   sharing, broadcast) where n is the\
    \ minimum number of redundant ASPs\n   required to handle traffic and k ASPs are\
    \ available to take over for\n   a failed or unavailable ASP.  Note that 1+1 active/standby\
    \ redundancy\n   is a subset of this model.  A simplex 1+0 model is also supported\
    \ as\n   a subset, with no ASP redundancy.\n"
- title: 1.3.4.  Client/Server Model
  contents:
  - "1.3.4.  Client/Server Model\n   It is recommended that the SG and ASP be able\
    \ to support both client\n   and server operation.  The peer endpoints using IUA\
    \ SHOULD be\n   configured so that one always takes on the role of client and\
    \ the\n   other the role of server for initiating SCTP associations.  The\n  \
    \ default orientation would be for the SG to take on the role of server\n   while\
    \ the ASP is the client.  In this case, ASPs SHOULD initiate the\n   SCTP association\
    \ to the SG.\n   The SCTP and TCP Registered User Port Number Assignment for IUA\
    \ is\n   9900.\n"
- title: 1.4.  Services Provided by the IUA Layer
  contents:
  - '1.4.  Services Provided by the IUA Layer

    '
- title: 1.4.1.  Support for Transport of Q.921/Q.931 Boundary Primitives
  contents:
  - "1.4.1.  Support for Transport of Q.921/Q.931 Boundary Primitives\n   In the backhaul\
    \ scenario, the Q.921/Q.931 boundary primitives are\n   exposed.  IUA layer needs\
    \ to support all of the primitives of this\n   boundary to successfully backhaul\
    \ Q.931.\n   This includes the following primitives [1]:\n   DL-ESTABLISH\n  \
    \ The DL-ESTABLISH primitives are used to request, indicate, and\n   confirm the\
    \ outcome of the procedures for establishing multiple frame\n   operation.\n \
    \  DL-RELEASE\n   DL-RELEASE primitives are used to request, indicate, and confirm\
    \ the\n   outcome of the procedures for terminating a previously established\n\
    \   multiple frame operation, or for reporting an unsuccessful\n   establishment\
    \ attempt.\n   DL-DATA\n   The DL-DATA primitives are used to request and indicate\
    \ layer 3\n   (Q.931) messages that are to be transmitted, or have been received,\n\
    \   by the Q.921 layer using the acknowledged information transfer\n   service.\n\
    \   DL-UNIT DATA\n   The DL-UNIT DATA primitives are used to request and indicate\
    \ layer 3\n   (Q.931) messages that are to be transmitted, by the Q.921 layer\
    \ using\n   the unacknowledged information transfer service.\n"
- title: 1.4.2.  Support for Communication between Layer Management Modules on SG
  contents:
  - "1.4.2.  Support for Communication between Layer Management Modules on SG\n  \
    \      and MGC\n   It is envisioned that the IUA layer needs to provide some services\n\
    \   that will facilitate communication between Layer Management modules\n   on\
    \ the SG and MGC.  These primitives are shown below:\n   M-TEI STATUS\n   The\
    \ M-TEI STATUS primitives are used to request, confirm, and\n   indicate the status\
    \ (assigned/unassigned) of an ISDN Terminal\n   Endpoint Identifier (TEI).\n \
    \  M-ERROR\n   The M-ERROR primitive is used to indicate an error with a received\n\
    \   IUA message (e.g., interface identifier value is not known to the\n   SG).\n"
- title: 1.4.3.  Support for Management of Active Associations between SG and MGC
  contents:
  - "1.4.3.  Support for Management of Active Associations between SG and MGC\n  \
    \ A set of primitives between the IUA layer and the Layer Management is\n   defined\
    \ below to help the Layer Management manage the SCTP\n   association(s) between\
    \ the SG and MGC.  The IUA layer can be\n   instructed by the Layer Management\
    \ to establish an SCTP association\n   to a peer IUA node.  This procedure can\
    \ be achieved using the M-SCTP\n   ESTABLISH primitive.\n   M-SCTP ESTABLISH\n\
    \   The M-SCTP ESTABLISH primitives are used to request, indicate, and\n   confirm\
    \ the establishment of an SCTP association to a peer IUA node.\n   M-SCTP RELEASE\n\
    \   The M-SCTP RELEASE primitives are used to request, indicate, and\n   confirm\
    \ the release of an SCTP association to a peer IUA node.\n   The IUA layer MAY\
    \ also need to inform the status of the SCTP\n   associations to the Layer Management.\
    \  This can be achieved using the\n   M-SCTP STATUS primitive.\n   M-SCTP STATUS\n\
    \   The M-SCTP STATUS primitives are used to request and indicate the\n   status\
    \ of the underlying SCTP association(s).\n   The Layer Management MAY need to\
    \ inform the IUA layer of an AS/ASP\n   status (i.e., failure, active, etc.),\
    \ so that messages can be\n   exchanged between IUA layer peers to stop traffic\
    \ to the local IUA\n   user.  This can be achieved using the M-ASP STATUS primitive.\n\
    \   M-ASP STATUS\n   The ASP status is stored inside IUA layer on both the SG\
    \ and MGC\n   sides.  The M-ASP STATUS primitive can be used by Layer Management\
    \ to\n   request the status of the Application Server Process from the IUA\n \
    \  layer.  This primitive can also be used to indicate the status of the\n   Application\
    \ Server Process.\n   M-ASP-UP\n   The M-ASP-UP primitive can be used by Layer\
    \ Management to send a ASP\n   Up message for the Application Server Process.\
    \  It can also be used\n   to generate an ASP Up Acknowledgement.\n   M-ASP-DOWN\n\
    \   The M-ASP-DOWN primitive can be used by Layer Management to send a\n   ASP\
    \ Down message for the Application Server Process.  It can also be\n   used to\
    \ generate an ASP Down Acknowledgement.\n   M-ASP-ACTIVE\n   The M-ASP-UP primitive\
    \ can be used by Layer Management to send a ASP\n   Active message for the Application\
    \ Server Process.  It can also be\n   used to generate an ASP Active Acknowledgement.\n\
    \   M-ASP-INACTIVE\n   The M-ASP-UP primitive can be used by Layer Management\
    \ to send a ASP\n   Inactive message for the Application Server Process.  It can\
    \ also be\n   used to generate an ASP Inactive Acknowledgement.\n   M-AS STATUS\n\
    \   The M-AS STATUS primitive can be used by Layer Management to request\n   the\
    \ status of the Application Server.  This primitive can also be\n   used to indicate\
    \ the status of the Application Server.\n"
- title: 1.5.  Functions Implemented by the IUA Layer
  contents:
  - '1.5.  Functions Implemented by the IUA Layer

    '
- title: 1.5.1.  Mapping
  contents:
  - "1.5.1.  Mapping\n   The IUA layer MUST maintain a map of the Interface Identifier\
    \ to a\n   physical interface on the Signaling Gateway.  A physical interface\n\
    \   would be a T1 line, E1 line, etc., and could include the Time-\n   Division\
    \ Multiplexing (TDM) timeslot.  In addition, for a given\n   interface the SG\
    \ MUST be able to identify the associated signaling\n   channel.  IUA layers on\
    \ both SG and MGC MAY maintain the status of\n   ISDN Terminal Endpoint Identifiers\
    \ (TEIs) and Service Access Point\n   Identifiers (SAPIs).\n   The SG maps an\
    \ Interface Identifier to an SCTP association/stream\n   only when an ASP sends\
    \ an ASP Active message for a particular\n   Interface Identifier.  It MUST be\
    \ noted, however, that this mapping\n   is dynamic and could change at any time\
    \ due to a change of ASP state.\n   This mapping could even temporarily be invalid,\
    \ for example, during\n   fail-over of one ASP to another.  Therefore, the SG\
    \ MUST maintain the\n   states of AS/ASP and reference them during the routing\
    \ of an messages\n   to an AS/ASP.\n   One example of the logical view of relationship\
    \ between D channel,\n   Interface Identifier, AS, and ASP in the SG is shown\
    \ below:\n          /---------------------------------------------------+\n  \
    \       /   /------------------------------------------------|--+\n        / \
    \  /                                                 v  |\n       /   /    +----+\
    \             act+-----+    +-------+ -+--+-|+--+-\n"
- title: D chan1-------->|IID |-+          +-->| ASP |--->| Assoc |       v
  contents:
  - "D chan1-------->|IID |-+          +-->| ASP |--->| Assoc |       v\n        \
    \ /      +----+ |  +----+  |   +-----+    +-------+ -+--+--+--+-\n        /  \
    \            +->| AS |--+                        Streams\n       /        +----+\
    \ |  +----+   stb+-----+\n"
- title: D chan2-------->|IID |-+              | ASP |
  contents:
  - "D chan2-------->|IID |-+              | ASP |\n                +----+       \
    \         +-----+\n   where IID = Interface Identifier\n   Note that an ASP can\
    \ be in more than one AS.\n"
- title: 1.5.2.  Status of ASPs
  contents:
  - "1.5.2.  Status of ASPs\n   The IUA layer on the SG MUST maintain the state of\
    \ the ASPs it is\n   supporting.  The state of an ASP changes because of reception\
    \ of\n   peer-to-peer messages (ASPM messages as described in Section 3.3.2)\n\
    \   or reception of indications from the local SCTP association.  ASP\n   state\
    \ transition procedures are described in Section 4.3.1.\n   At a SG, an Application\
    \ Server list MAY contain active and inactive\n   ASPs to support ASP load-sharing\
    \ and fail-over procedures.  When, for\n   example, both a primary and a backup\
    \ ASP are available, IUA peer\n   protocol is required to control which ASP is\
    \ currently active.  The\n   ordered list of ASPs within a logical Application\
    \ Server is kept\n   updated in the SG to reflect the active Application Server\n\
    \   Process(es).\n   Also the IUA layer MAY need to inform the local management\
    \ of the\n   change in status of an ASP or AS.  This can be achieved using the\n\
    \   M-ASP STATUS or M-AS STATUS primitives.\n"
- title: 1.5.3.  SCTP Stream Management
  contents:
  - "1.5.3.  SCTP Stream Management\n   SCTP allows a user-specified number of streams\
    \ to be opened during\n   the initialization.  It is the responsibility of the\
    \ IUA layer to\n   ensure proper management of these streams.  Because of the\n\
    \   unidirectional nature of streams, an IUA layer is not aware of the\n   stream\
    \ number to Interface Identifier mapping of its peer IUA layer.\n   Instead, the\
    \ Interface Identifier is in the IUA message header.\n   The use of SCTP streams\
    \ within IUA is recommended in order to\n   minimize transmission and buffering\
    \ delay, therefore improving the\n   overall performance and reliability of the\
    \ signaling elements.  It is\n   recommended that a separate SCTP stream is used\
    \ for each D channel.\n"
- title: 1.5.4.  Seamless Network Management Interworking
  contents:
  - "1.5.4.  Seamless Network Management Interworking\n   The IUA layer on the SG\
    \ SHOULD pass an indication of unavailability\n   of the IUA-User (Q.931) to the\
    \ local Layer Management, if the\n   currently active ASP moves from the ACTIVE\
    \ state.  The Layer\n   Management could instruct Q.921 to take some action, if\
    \ it deems\n   appropriate.\n   Likewise, if an SCTP association fails, the IUA\
    \ layer on both the SG\n   and ASP sides MAY generate Release primitives to take\
    \ the data links\n   out-of-service.\n"
- title: 1.5.5.  Congestion Management
  contents:
  - "1.5.5.  Congestion Management\n   If the IUA layer becomes congested (implementation\
    \ dependent), it MAY\n   stop reading from the SCTP association to flow control\
    \ from the peer\n   IUA.\n"
- title: 1.6.  Definition of IUA Boundaries
  contents:
  - '1.6.  Definition of IUA Boundaries

    '
- title: 1.6.1.  Definition of IUA/Q.921 Boundary
  contents:
  - "1.6.1.  Definition of IUA/Q.921 Boundary\n   DL-ESTABLISH\n   DL-RELEASE\n  \
    \ DL-DATA\n   DL-UNIT DATA\n"
- title: 1.6.2.  Definition of IUA/Q.931 Boundary
  contents:
  - "1.6.2.  Definition of IUA/Q.931 Boundary\n   DL-ESTABLISH\n   DL-RELEASE\n  \
    \ DL-DATA\n   DL-UNIT DATA\n"
- title: 1.6.3.  Definition of SCTP/IUA Boundary
  contents:
  - "1.6.3.  Definition of SCTP/IUA Boundary\n   An example of the upper layer primitives\
    \ provided by SCTP are\n   available in Section 10 of RFC 2960 [4].\n"
- title: 1.6.4.  Definition of IUA/Layer-Management Boundary
  contents:
  - "1.6.4.  Definition of IUA/Layer-Management Boundary\n   M-SCTP ESTABLISH request\n\
    \   Direction: LM -> IUA\n   Purpose: LM requests ASP to establish an SCTP association\
    \ with an SG.\n   M-STCP ESTABLISH confirm\n   Direction: IUA -> LM\n   Purpose:\
    \ ASP confirms to LM that it has established an SCTP\n            association\
    \ with an SG.\n   M-SCTP ESTABLISH indication\n   Direction: IUA -> LM\n   Purpose:\
    \ SG informs LM that an ASP has established an SCTP\n            association.\n\
    \   M-SCTP RELEASE request\n   Direction: LM -> IUA\n   Purpose: LM requests ASP\
    \ to release an SCTP association with SG.\n   M-SCTP RELEASE confirm\n   Direction:\
    \ IUA -> LM\n   Purpose: ASP confirms to LM that it has released SCTP association\n\
    \            with SG.\n   M-SCTP RELEASE indication\n   Direction: IUA -> LM\n\
    \   Purpose: SG informs LM that ASP has released an SCTP association.\n   M-SCTP\
    \ STATUS request\n   Direction: LM -> IUA\n   Purpose: LM requests IUA to report\
    \ status of SCTP association.\n   M-SCTP STATUS indication\n   Direction: IUA\
    \ -> LM\n   Purpose: IUA reports status of SCTP association.\n   M-ASP STATUS\
    \ request\n   Direction: LM -> IUA\n   Purpose: LM requests SG to report status\
    \ of remote ASP.\n   M-ASP STATUS indication\n   Direction: IUA -> LM\n   Purpose:\
    \ SG reports status of remote ASP.\n   M-AS-STATUS request\n   Direction: LM ->\
    \ IUA\n   Purpose: LM requests SG to report status of AS.\n   M-AS-STATUS indication\n\
    \   Direction: IUA -> LM\n   Purpose: SG reports status of AS.\n   M-NOTIFY indication\n\
    \   Direction: IUA -> LM\n   Purpose: ASP reports that it has received a NOTIFY\
    \ message\n            from its peer.\n   M-ERROR indication\n   Direction: IUA\
    \ -> LM\n   Purpose: ASP or SG reports that it has received an ERROR\n       \
    \     message from its peer.\n   M-ASP-UP request\n   Direction: LM -> IUA\n \
    \  Purpose: LM requests ASP to start its operation and send an ASP UP\n      \
    \      message to the SG.\n   M-ASP-UP confirm\n   Direction: IUA -> LM\n   Purpose:\
    \ ASP reports that is has received an ASP UP Acknowledgement\n            message\
    \ from the SG.\n   M-ASP-DOWN request\n   Direction: LM -> IUA\n   Purpose: LM\
    \ requests ASP to stop its operation and send an ASP DOWN\n            message\
    \ to the SG.\n   M-ASP-DOWN confirm\n   Direction: IUA -> LM\n   Purpose: ASP\
    \ reports that is has received an ASP DOWN\n            Acknowledgement message\
    \ from the SG.\n   M-ASP-ACTIVE request\n   Direction: LM -> IUA\n   Purpose:\
    \ LM requests ASP to send an ASP ACTIVE message to the SG.\n   M-ASP-ACTIVE confirm\n\
    \   Direction: IUA -> LM\n   Purpose: ASP reports that is has received an ASP\
    \ ACTIVE\n            Acknowledgement message from the SG.\n   M-ASP-INACTIVE\
    \ request\n   Direction: LM -> IUA\n   Purpose: LM requests ASP to send an ASP\
    \ INACTIVE message to the SG.\n   M-ASP-INACTIVE confirm\n   Direction: IUA ->\
    \ LM\n   Purpose: ASP reports that is has received an ASP INACTIVE\n         \
    \   Acknowledgement message from the SG.\n   M-TEI STATUS request\n   Direction:\
    \ LM -> IUA\n   Purpose: LM requests ASP to send a TEI status request to the SG.\n\
    \   M-TEI STATUS indication\n   Direction: IUA -> LM\n   Purpose: ASP reports\
    \ that is has received a TEI status indication\n            from the SG.\n   M-TEI\
    \ STATUS confirm\n   Direction: IUA -> LM\n   Purpose: ASP reports that is has\
    \ received a TEI status confirm from\n            the SG.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, NOT RECOMMENDED, MAY, and OPTIONAL, when\n\
    \   they appear in this document, are to be interpreted as described in\n   [6].\n"
- title: 3.  Protocol Elements
  contents:
  - "3.  Protocol Elements\n   This section describes the format of various messages\
    \ used in this\n   protocol.\n"
- title: 3.1.  Common Message Header
  contents:
  - "3.1.  Common Message Header\n   The protocol messages for Q.921-User Adaptation\
    \ require a message\n   header that contains the adaptation layer version, the\
    \ message type,\n   and message length.\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    |   Reserved    | Message Class | Message Type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Message Length                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 2.  Common Header Format\n   All fields in an IUA message\
    \ MUST be transmitted in the network byte\n   order, unless otherwise stated.\n"
- title: 3.1.1.  Version
  contents:
  - "3.1.1.  Version\n   The version field contains the version of the IUA adaptation\
    \ layer.\n   The supported versions are the following:\n      Value    Version\n\
    \      -----    -------\n        1      Release 1.0\n"
- title: 3.1.2.  Message Classes and Types
  contents:
  - "3.1.2.  Message Classes and Types\n   The following list contains the valid Message\
    \ Classes:\n   Message Class: 8 bits (unsigned integer)\n       0       Management\
    \ (MGMT) Message\n       1       Reserved for Other SIGTRAN Adaptation Layer\n\
    \       2       Reserved for Other SIGTRAN Adaptation Layers\n       3       ASP\
    \ State Maintenance (ASPSM) Messages\n       4       ASP Traffic Maintenance (ASPTM)\
    \ Messages\n       5       Q.921/Q.931 Boundary Primitives Transport (QPTM) Messages\n\
    \       6       Reserved for Other SIGTRAN Adaptation Layer\n       7       Reserved\
    \ for Other SIGTRAN Adaptation Layer\n       8       Reserved for Other SIGTRAN\
    \ Adaptation Layer\n     9 to 127  Reserved by the IETF\n   128 to 255  Reserved\
    \ for IETF-Defined Message Class extensions\n   The following list contains the\
    \ message names for the defined\n   messages.\n    Q.921/Q.931 Boundary Primitives\
    \ Transport (QPTM) Messages\n       0        Reserved\n       1        Data Request\
    \ Message\n       2        Data Indication Message\n       3        Unit Data\
    \ Request Message\n       4        Unit Data Indication Message\n       5    \
    \    Establish Request\n       6        Establish Confirm\n       7        Establish\
    \ Indication\n       8        Release Request\n       9        Release Confirm\n\
    \      10        Release Indication\n    11 to 127   Reserved by the IETF\n  \
    \ 128 to 255   Reserved for IETF-Defined QPTM extensions\n    Application Server\
    \ Process State Maintenance (ASPSM) messages\n       0        Reserved\n     \
    \  1        ASP Up (UP)\n       2        ASP Down (DOWN)\n       3        Heartbeat\
    \ (BEAT)\n       4        ASP Up Ack (UP ACK)\n       5        ASP Down Ack (DOWN\
    \ ACK)\n       6        Heatbeat Ack (BEAT ACK)\n     7 to 127   Reserved by the\
    \ IETF\n   128 to 255   Reserved for IETF-Defined ASPSM extensions\n    Application\
    \ Server Process Traffic Maintenance (ASPTM) messages\n       0        Reserved\n\
    \       1        ASP Active (ACTIVE)\n       2        ASP Inactive (INACTIVE)\n\
    \       3        ASP Active Ack (ACTIVE ACK)\n       4        ASP Inactive Ack\
    \ (INACTIVE ACK)\n     5 to 127   Reserved by the IETF\n   128 to 255   Reserved\
    \ for IETF-Defined ASPTM extensions\n    Management (MGMT) Messages\n       0\
    \        Error (ERR)\n       1        Notify (NTFY)\n       2        TEI Status\
    \ Request\n       3        TEI Status Confirm\n       4        TEI Status Indication\n\
    \       5        TEI Query Request\n     6 to 127   Reserved by the IETF\n   128\
    \ to 255   Reserved for IETF-Defined MGMT extensions\n"
- title: 3.1.3.  Reserved
  contents:
  - "3.1.3.  Reserved\n   The Reserved field is 8 bits.  It SHOULD be set to all '0's\
    \ and\n   ignored by the receiver.\n"
- title: 3.1.4.  Message Length
  contents:
  - "3.1.4.  Message Length\n   The Message Length defines the length of the message\
    \ in octets,\n   including the Common Header.  The Message Length MUST include\n\
    \   parameter padding bytes, if any.\n   Note: A receiver SHOULD accept the message\
    \ whether or not the final\n   parameter padding is included in the message length.\n"
- title: 3.1.5.  Variable-Length Parameter Format
  contents:
  - "3.1.5.  Variable-Length Parameter Format\n   IUA messages consist of a Common\
    \ Header followed by zero or more\n   variable-length parameters, as defined by\
    \ the message type.  The\n   variable-length parameters contained in a message\
    \ are defined in a\n   Type-Length-Value (TLV) format as shown below.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Parameter Tag        |       Parameter Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                       Parameter Value                         /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Mandatory parameters MUST be placed before optional parameters in a\n   message.\n\
    \   Parameter Tag: 16 bits (unsigned integer)\n   The Tag field is a 16-bit identifier\
    \ of the type of parameter.  It\n   takes a value of 0 to 65534.  Common parameters\
    \ used by adaptation\n   layers are in the range of 0x00 to 0x3f.  The parameter\
    \ Tags defined\n   are as follows:\n   Common Parameters.  These TLV parameters\
    \ are common across the\n   different adaptation layers:\n   Parameter Name  \
    \                   Parameter ID\n   ==============                     ============\n\
    \   Reserved                              0x0000\n   Interface Identifier (integer)\
    \        0x0001\n   Not Used in IUA                       0x0002\n   Interface\
    \ Identifier (text)           0x0003\n   INFO String                         \
    \  0x0004\n   DLCI                                  0x0005\n   Not Used in IUA\
    \                       0x0006\n   Diagnostic Information                0x0007\n\
    \   Interface Identifier Range            0x0008\n   Heartbeat Data          \
    \              0x0009\n   Not Used in IUA                       0x000a\n   Traffic\
    \ Mode Type                     0x000b\n   Error Code                        \
    \    0x000c\n   Status                                0x000d\n   Protocol Data\
    \                         0x000e\n   Release Reason                        0x000f\n\
    \   TEI Status                            0x0010\n   ASP Identifier          \
    \              0x0011\n   Not Used in IUA                       0x0012 - 0x003f\n\
    \   The value of 65535 is reserved for IETF-defined extensions.  Values\n   other\
    \ than those defined in specific parameter description are\n   reserved for use\
    \ by the IETF.\n   Parameter Length: 16 bits (unsigned integer)\n   The Parameter\
    \ Length field contains the size of the parameter in\n   bytes, including the\
    \ Parameter Tag, Parameter Length, and Parameter\n   Value fields.  The Parameter\
    \ Length does not include any padding\n   bytes.\n   Parameter Value: variable-length\n\
    \   The Parameter Value field contains the actual information to be\n   transferred\
    \ in the parameter.\n   The total length of a parameter (including Tag, Parameter\
    \ Length, and\n   Value fields) MUST be a multiple of 4 bytes.  If the length\
    \ of the\n   parameter is not a multiple of 4 bytes, the sender pads the Parameter\n\
    \   at the end (i.e., after the Parameter Value field) with all zero\n   bytes.\
    \  The length of the padding is NOT included in the Parameter\n   Length field.\
    \  A sender SHOULD NEVER pad with more than 3 bytes.  The\n   receiver MUST ignore\
    \ the padding bytes.\n"
- title: 3.2.  IUA Message Header
  contents:
  - "3.2.  IUA Message Header\n   In addition to the common message header, there\
    \ will be a specific\n   message header for QPTM and the TEI Status MGMT messages.\
    \  The IUA\n   message header will immediately follow the Common header in these\n\
    \   messages.\n   This message header will contain the Interface Identifier and\
    \ Data\n   Link Connection Identifier (DLCI).  The Interface Identifier\n   identifies\
    \ the physical interface terminating the signaling channel\n   at the SG for which\
    \ the signaling messages are sent/received.  The\n   format of the Interface Identifier\
    \ parameter can be text or integer.\n   The Interface Identifiers are assigned\
    \ according to network operator\n   policy.  The integer values used are of local\
    \ significance only,\n   coordinated between the SG and ASP.\n   The integer-formatted\
    \ Interface Identifier MUST be supported.  The\n   text-formatted Interface Identifier\
    \ MAY optionally be supported.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x1)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier (integer)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x5)           |             Length=8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            DLCI               |              Spare            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Figure 3.  IUA Message Header (Integer-based Interface Identifier)\n   The\
    \ Tag value for the Integer-based Interface Identifier is 0x1.  The\n   length\
    \ is always set to a value of 8.\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x3)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               /\n   / \
    \                  Interface Identifier (text)                 \\\n   \\     \
    \                                                          /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x5)           |             Length=8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            DLCI               |             Spare             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 4.  IUA Message Header (Text-based Interface Identifier)\n   The\
    \ Tag value for the Text-based [2] Interface Identifier is 0x3.\n   The length\
    \ is variable.\n   The DLCI format is shown below in Figure 5.\n        most \
    \                                    least\n     significant                 \
    \             significant\n         bit                                      bit\n\
    \      +-----+-----+-----+-----+-----+-----+-----+-----+\n      |            SAPI\
    \                   | SPR |  0  |\n      +-----------------------------------------------+\n\
    \      |            TEI                          |  1  |\n      +-----------------------------------------------+\n\
    \                          Figure 5.  DLCI Format\n   SPR:  Spare 2nd bit in octet\
    \ 1 (1 bit)\n   SAPI: Service Access Point Identifier (6 bits)\n   TEI:  Terminal\
    \ Endpoint Identifier (7 bits)\n   As an example, SAPI = 0, TEI = 64, SPR = 0\
    \ would be encoded as\n   follows:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0x5)           |             Length=8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      0x0      |      0x81     |               0x0             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The DLCI field (including the SAPI and TEI) is coded in accordance\n   with\
    \ Q.921.\n"
- title: 3.3.  IUA Messages
  contents:
  - "3.3.  IUA Messages\n   The following section defines the messages and parameter\
    \ contents.\n   The IUA messages will use the common message header (Figure 2)\
    \ and\n   the IUA message header (Figure 3 and Figure 4).\n"
- title: 3.3.1.  Q.921/Q.931 Boundary Primitives Transport (QPTM) Messages
  contents:
  - '3.3.1.  Q.921/Q.931 Boundary Primitives Transport (QPTM) Messages

    '
- title: 3.3.1.1.  Establish Messages (Request, Confirm, Indication)
  contents:
  - "3.3.1.1.  Establish Messages (Request, Confirm, Indication)\n   The Establish\
    \ Messages are used to establish a data link on the\n   signaling channel or to\
    \ confirm that a data link on the signaling\n   channel has been established.\
    \  The MGC controls the state of the D\n   channel.  When the MGC desires the\
    \ D channel to be in-service, it\n   will send the Establish Request message.\n\
    \   When the MGC sends an IUA Establish Request message, the MGC MAY\n   start\
    \ a timer.  This timer would be stopped upon receipt of an IUA\n   Establish Confirm\
    \ or Establish Indication.  If the timer expires, the\n   MGC would resend the\
    \ IUA Establish Request message and restart the\n   timer.  In other words, the\
    \ MGC MAY continue to request the\n   establishment of the data link on a periodic\
    \ basis until the desired\n   state is achieved or take some other action (notify\
    \ the Management\n   Layer).\n   When the SG receives an IUA Establish Request\
    \ from the MGC, the SG\n   shall send the Q.921 Establish Request primitive to\
    \ the Q.921 entity.\n   In addition, the SG shall map any response received from\
    \ the Q.921\n   entity to the appropriate message to the MGC.  For example, if\
    \ the\n   Q.921 entity responds with a Q.921 Establish Confirm primitive, the\n\
    \   IUA layer shall map this to an IUA Establish Confirm message.  As\n   another\
    \ example, if the IUA Layer receives a Q.921 Release Confirm or\n   Release Indication\
    \ as an apparent response to the Q.921 Establish\n   Request primitive, the IUA\
    \ Layer shall map these to the corresponding\n   IUA Release Confirm or Release\
    \ Indication messages.\n   The Establish messages contain the common message header\
    \ followed by\n   IUA message header.  It does not contain any additional parameters.\n"
- title: 3.3.1.2.  Release Messages (Request, Indication, Confirmation)
  contents:
  - "3.3.1.2.  Release Messages (Request, Indication, Confirmation)\n   The Release\
    \ Request message is used to release the data link on the\n   signaling channel.\
    \  The Release Confirm and Indication messages are\n   used to indicate that the\
    \ data link on the signaling channel has been\n   released.\n   If a response\
    \ to the Release Request message is not received, the MGC\n   MAY resend the Release\
    \ Request message.  If no response is received,\n   the MGC can consider the data\
    \ link as being released.  In this case,\n   signaling traffic on that D channel\
    \ is not expected from the SG and\n   signaling traffic will not be sent to the\
    \ SG for that D channel.\n   The Release messages contain the common message header\
    \ followed by\n   IUA message header.  The Release Confirm message is in response\
    \ to a\n   Release Request message and it does not contain any additional\n  \
    \ parameters.  The Release Request and Indication messages contain the\n   following\
    \ parameter:\n      Reason\n   The format for Release Message parameters is as\
    \ follows:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xf)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Reason                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The valid values for Reason are shown in the following table.\n      Define\
    \     Value           Description\n   RELEASE_MGMT   0x0     Management layer\
    \ generated release.\n   RELEASE_PHYS   0x1     Physical layer alarm generated\
    \ release.\n   RELEASE_DM     0x2     Specific to a request.  Indicates Layer\
    \ 2\n                          SHOULD release and deny all requests from\n   \
    \                       far end to establish a data link on the\n            \
    \              signaling channel (i.e., if SABME is\n                        \
    \  received, send a DM)\n   RELEASE_OTHER  0x3     Other reasons\n   Note:  Only\
    \ RELEASE_MGMT, RELEASE_DM, and RELEASE_OTHER are valid\n   reason codes for a\
    \ Release Request message.\n"
- title: 3.3.1.3.  Data Messages (Request, Indication)
  contents:
  - "3.3.1.3.  Data Messages (Request, Indication)\n   The Data message contains an\
    \ ISDN Q.921-User Protocol Data Unit (PDU)\n   corresponding to acknowledged information\
    \ transfer service.\n   The Data messages contain the common message header followed\
    \ by IUA\n   message header.  The Data message contains the following parameter:\n\
    \      Protocol Data\n   The format for Data Message parameters is as follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xe)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                        Protocol Data                          /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The protocol data contains upper layer signaling message, e.g.,\n   Q.931,\
    \ QSIG.\n"
- title: 3.3.1.4.  Unit Data Messages (Request, Indication)
  contents:
  - "3.3.1.4.  Unit Data Messages (Request, Indication)\n   The Unit Data message\
    \ contains an ISDN Q.921-User Protocol Data Unit\n   (PDU) corresponding to unacknowledged\
    \ information transfer service.\n   The Unit Data messages contain the common\
    \ message header followed by\n   IUA message header.  The Unit Data message contains\
    \ the following\n   parameter:\n       Protocol Data\n   The format for Unit Data\
    \ Message parameters is as follows:\n    0                   1               \
    \    2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Tag (0xe)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                        Protocol Data                          /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.3.2.  Application Server Process Maintenance (ASPM) Messages
  contents:
  - "3.3.2.  Application Server Process Maintenance (ASPM) Messages\n   The ASPM messages\
    \ will use only the common message header.\n"
- title: 3.3.2.1.  ASP Up (ASPUP)
  contents:
  - "3.3.2.1.  ASP Up (ASPUP)\n   The ASP Up (ASPUP) message is sent by an ASP to\
    \ indicate to an SG\n   that it is ready to receive traffic or maintenance messages.\n\
    \   The ASPUP message contains the following parameters:\n     ASP Identifier\
    \           (Optional)\n     INFO String              (Optional)\n   The format\
    \ for ASPUP Message parameters is as follows:\n    0                   1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0011          |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         ASP Identifier                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0004          |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ASP Identifier: 32-bit unsigned integer\n   The optional ASP Identifier parameter\
    \ contains a unique value that is\n   locally significant among the ASPs that\
    \ support an AS.  The SG should\n   save the ASP Identifier to be used, if necessary,\
    \ with the Notify\n   message (see Section 3.3.3.2).\n   The optional INFO String\
    \ parameter can carry any meaningful 8-bit\n   ASCII [2] character string along\
    \ with the message.  Length of the\n   INFO String parameter is from 0 to 255\
    \ characters.  No procedures are\n   presently identified for its use, but the\
    \ INFO String MAY be used for\n   debugging purposes.\n"
- title: 3.3.2.2.  ASP Up Ack
  contents:
  - "3.3.2.2.  ASP Up Ack\n   The ASP Up Ack message is used to acknowledge an ASP\
    \ Up message\n   received from a remote IUA peer.\n   The ASPUP Ack message contains\
    \ the following parameters:\n      INFO String (optional)\n   The format for ASPUP\
    \ Ack Message parameters is as follows:\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0004          |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional INFO String parameter are\n   the\
    \ same as for the ASP Up message (see Section 3.3.2.1).\n"
- title: 3.3.2.3.  ASP Down (ASPDN)
  contents:
  - "3.3.2.3.  ASP Down (ASPDN)\n   The ASP Down (ASPDN) message is sent by an ASP\
    \ to indicate to an SG\n   that it is NOT ready to receive traffic or maintenance\
    \ messages.\n   The ASPDN message contains the following parameters:\n      INFO\
    \ String (Optional)\n   The format for the ASPDN message parameters is as follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0004          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional INFO String parameter are\n   the\
    \ same as for the ASP Up message (see Section 3.3.2.1).\n"
- title: 3.3.2.4.  ASP Down Ack
  contents:
  - "3.3.2.4.  ASP Down Ack\n   The ASP Down Ack message is used to acknowledge an\
    \ ASP Down message\n   received from a remote IUA peer.\n   The ASP Down Ack message\
    \ contains the following parameters:\n      INFO String (Optional)\n   The format\
    \ for the ASP Down Ack message parameters is as follows:\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0004          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional INFO String parameter are\n   the\
    \ same as for the ASP Up message (see Section 3.3.2.1).\n"
- title: 3.3.2.5.  ASP Active (ASPAC)
  contents:
  - "3.3.2.5.  ASP Active (ASPAC)\n   The ASPAC message is sent by an ASP to indicate\
    \ to an SG that it is\n   Active and ready to be used.\n   The ASPAC message contains\
    \ the following parameters:\n      Traffic Mode Type (Mandatory)\n      Interface\
    \ Identifiers (Optional)\n         - Combination of integer and integer ranges,\
    \ OR\n         - string (text-formatted)\n      INFO String (Optional)\n   The\
    \ format for the ASPAC message using integer-formatted Interface\n   Identifiers\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \       Tag = 0x000b          |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                       .\n           .          \
    \                             .\n           .                                \
    \       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \            Additional Interface Identifier Parameters         /\n   \\     \
    \             of Tag Type 0x1 or 0x8                       \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASPAC message using text-formatted (string)\n   Interface\
    \ Identifiers is as follows:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x000b          |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \           Additional Interface Identifier Parameters          /\n   \\     \
    \                 of Tag Type 0x3                          \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Traffic Mode Type parameter identifies the traffic mode of\n   operation\
    \ of the ASP within an AS.  The valid values for Type are\n   shown in the following\
    \ table:\n     Value          Description\n      0x1            Over-ride\n  \
    \    0x2            Load-share\n   Within a particular AS, only one Traffic Mode\
    \ Type can be used.  The\n   Over-ride value indicates that the ASP is operating\
    \ in Over-ride\n   mode, where the ASP takes over all traffic in an Application\
    \ Server\n   (i.e., primary/backup operation), over-riding any currently active\n\
    \   ASPs in the AS.  In Load-share mode, the ASP will share in the\n   traffic\
    \ distribution with any other currently active ASPs.\n   The optional Interface\
    \ Identifiers parameter contains a list of\n   Interface Identifier integers (Type\
    \ 0x1 or Type 0x8) or text strings\n   (Type 0x3) indexing the Application Server\
    \ traffic that the sending\n   ASP is configured/registered to receive.  If integer-formatted\n\
    \   Interface Identifiers are being used, the ASP can also send ranges of\n  \
    \ Interface Identifiers (Type 0x8).  Interface Identifier types Integer\n   (0x1)\
    \ and Integer Range (0x8) are allowed in the same message.\n   Text-formatted\
    \ Interface Identifiers (0x3) cannot be used with either\n   Integer (0x1) or\
    \ Integer Range (0x8) types.\n   If no Interface Identifiers are included, the\
    \ message is for all\n   provisioned Interface Identifiers within the AS or ASes\
    \ in which the\n   ASP is provisioned.  If only a subset of Interface Identifiers\
    \ is\n   included, the ASP is noted as Active for all the Interface\n   Identifiers\
    \ provisioned for that AS.\n   Note:  If the optional Interface Identifier parameter\
    \ is present, the\n   integer-formatted Interface Identifier MUST be supported,\
    \ whereas the\n   text-formatted Interface Identifier MAY be supported.\n   The\
    \ format and description of the optional INFO String parameter are\n   the same\
    \ as for the ASP Up message (see Section 3.3.2.1.).\n   An SG that receives an\
    \ ASPAC with an incorrect Traffic Mode Type for\n   a particular Interface Identifier\
    \ will respond with an Error Message\n   (Cause: Unsupported Traffic Handling\
    \ Mode).\n"
- title: 3.3.2.6.  ASP Active Ack
  contents:
  - "3.3.2.6.  ASP Active Ack\n   The ASPAC Ack message is used to acknowledge an\
    \ ASP Active message\n   received from a remote IUA peer.\n   The ASPAC Ack message\
    \ contains the following parameters:\n      Traffic Mode Type (Mandatory)\n  \
    \    Interface Identifier (Optional)\n         - Combination of integer and integer\
    \ ranges, OR\n         - string (text formatted)\n      INFO String (Optional)\n\
    \   The format for the ASPAC Ack message with integer-formatted Interface\n  \
    \ Identifiers is as follows:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x000b          |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                       .\n           .          \
    \                             .\n           .                                \
    \       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \            Additional Interface Identifier Parameters         /\n   \\     \
    \             of Tag Type 0x1 or 0x8                       \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASP Active Ack message using text-formatted\n   (string)\
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x000b          |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \           Additional Interface Identifier Parameters          /\n   \\     \
    \                 of Tag Type 0x3                          \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the Traffic Mode Type and Interface Identifier\n   parameters\
    \ is the same as for the ASP Active message (see Section\n   3.3.2.5).\n   The\
    \ format and description of the optional INFO String parameter are\n   the same\
    \ as for the ASP Up message (see Section 3.3.2.1).\n"
- title: 3.3.2.7.  ASP Inactive (ASPIA)
  contents:
  - "3.3.2.7.  ASP Inactive (ASPIA)\n   The ASPIA message is sent by an ASP to indicate\
    \ to an SG that it is\n   no longer an active ASP to be used from within a list\
    \ of ASPs.  The\n   SG will respond with an ASPIA Ack message and either discard\
    \ incoming\n   messages or buffer for a timed period and then discard.\n   The\
    \ ASPIA message contains the following parameters:\n      Interface Identifiers\
    \ (Optional)\n         - Combination of integer and integer ranges, OR\n     \
    \    - string (text formatted)\n      INFO String (Optional)\n   The format for\
    \ the ASP Inactive message parameters using integer-\n   formatted Interface Identifiers\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \   Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                       .\n           .          \
    \                             .\n           .                                \
    \       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \            Additional Interface Identifier Parameters         /\n   \\     \
    \             of Tag Type 0x1 or 0x8                       \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASP Inactive message using text-formatted (string)\n  \
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \           Additional Interface Identifier Parameters          /\n   \\     \
    \                 of Tag Type 0x3                          \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The optional Interface Identifiers parameter contains a list of\n   Interface\
    \ Identifier integers or text strings indexing the\n   Application Server traffic\
    \ that the sending ASP is\n   configured/registered to receive, but does not want\
    \ to receive at\n   this time.\n   The format and description of the optional\
    \ Interface Identifiers and\n   INFO String parameters are the same as for the\
    \ ASP Active message\n   (see Section 3.3.2.5).\n"
- title: 3.3.2.8.  ASP Inactive Ack
  contents:
  - "3.3.2.8.  ASP Inactive Ack\n   The ASP Inactive (ASPIA) Ack message is used to\
    \ acknowledge an ASP\n   Inactive message received from a remote IUA peer.\n \
    \  The ASPIA Ack message contains the following parameters:\n      Interface Identifiers\
    \ (Optional)\n         - Combination of integer and integer ranges, OR\n     \
    \    - string (text formatted)\n      INFO String (Optional)\n   The format for\
    \ the ASP Inactive Ack message parameters using\n   integer-formatted Interface\
    \ Identifiers is as follows:\n    0                   1                   2  \
    \                 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                       .\n           .          \
    \                             .\n           .                                \
    \       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \            Additional Interface Identifier Parameters         /\n   \\     \
    \             of Tag Type 0x1 or 0x8                       \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the ASP Inactive Ack message using text-formatted\n   (string)\
    \ Interface Identifiers is as follows:\n    0                   1            \
    \       2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \           Additional Interface Identifier Parameters          /\n   \\     \
    \                 of Tag Type 0x3                          \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format and description of the optional Interface Identifiers and\n   INFO\
    \ String parameters are the same as for the ASP Active message\n   (see Section\
    \ 3.3.2.5).\n"
- title: 3.3.2.9.  Heartbeat (BEAT)
  contents:
  - "3.3.2.9.  Heartbeat (BEAT)\n   The Heartbeat message is optionally used to ensure\
    \ that the IUA peers\n   are still available to each other.  It is recommended\
    \ for use when\n   the IUA runs over a transport layer other than the SCTP, which\
    \ has\n   its own heartbeat.\n   The BEAT message contains the following parameters:\n\
    \      Heartbeat Data    (Optional)\n   The format for the BEAT message is as\
    \ follows:\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0009          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                       Heartbeat Data                          /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Heartbeat Data parameter contents are defined by the sending\n   node.\
    \  The Heartbeat Data could include, for example, a Heartbeat\n   Sequence Number\
    \ and/or Timestamp.  The receiver of a Heartbeat\n   message does not process\
    \ this field as it is only of significance to\n   the sender.  The receiver MUST\
    \ respond with a Heartbeat Ack message.\n"
- title: 3.3.2.10.  Heartbeat Ack (BEAT-Ack)
  contents:
  - "3.3.2.10.  Heartbeat Ack (BEAT-Ack)\n   The Heartbeat Ack message is sent in\
    \ response to a received Heartbeat\n   message.  It includes all the parameters\
    \ of the received Heartbeat\n   message, without any change.\n"
- title: 3.3.3.  Layer Management (MGMT) Messages
  contents:
  - '3.3.3.  Layer Management (MGMT) Messages

    '
- title: 3.3.3.1.  Error (ERR)
  contents:
  - "3.3.3.1.  Error (ERR)\n   The Error message is used to notify a peer of an error\
    \ event\n   associated with an incoming message.  For example, the message type\n\
    \   might be unexpected given the current state, or a parameter value\n   might\
    \ be invalid.\n   The Error message will have only the common message header.\
    \  The\n   Error message contains the following parameters:\n      Error Code\n\
    \      Diagnostic Information (Optional)\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Tag = 0x000c         |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Error Code                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Tag = 0x0007         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               /\n   / \
    \                    Diagnostic Information                    \\\n   \\     \
    \                                                          /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Error Code parameter indicates the reason for the Error message.\n   The\
    \ Error parameter value can be one of the following values:\n      Invalid Version\
    \                               0x01\n      Invalid Interface Identifier     \
    \             0x02\n      Unsupported Message Class                     0x03\n\
    \      Unsupported Message Type                      0x04\n      Unsupported Traffic\
    \ Handling Mode             0x05\n      Unexpected Message                   \
    \         0x06\n      Protocol Error                                0x07\n   \
    \   Unsupported Interface Identifier Type         0x08\n      Invalid Stream Identifier\
    \                     0x09\n      Unassigned TEI                             \
    \   0x0a\n      Unrecognized SAPI                             0x0b\n      Invalid\
    \ TEI, SAPI combination                 0x0c\n      Refused - Management Blocking\
    \                 0x0d\n      ASP Identifier Required                       0x0e\n\
    \      Invalid ASP Identifier                        0x0f\n   The \"Invalid Version\"\
    \ error would be sent if a message was received\n   with an invalid or unsupported\
    \ version.  The Error message would\n   contain the supported version in the Common\
    \ header.  The Error\n   message could optionally provide the supported version\
    \ in the\n   Diagnostic Information area.\n   The \"Invalid Interface Identifier\"\
    \ error would be sent by an SG if an\n   ASP sends a message with an invalid (unconfigured)\
    \ Interface\n   Identifier value.  For this error, the Diagnostic Information\
    \ MUST\n   contain enough of the offending message to identify the invalid\n \
    \  Interface Identifier.  For example, in the case of QPTM and TEI\n   Status\
    \ management messages, the Common and IUA message headers of the\n   offending\
    \ message would be placed in the Diagnostic Information at a\n   minimum.\n  \
    \ The \"Unsupported Traffic Handling Mode\" error would be sent by an SG\n   if\
    \ an ASP sends an ASP Active with an unsupported Traffic Handling\n   Mode.  An\
    \ example would be a case in which the SG did not support\n   load-sharing.\n\
    \   The \"Unexpected Message\" error would be sent by an ASP if it received\n\
    \   a QPTM message from an SG while it was in the Inactive state (the ASP\n  \
    \ could optionally drop the message and not send an error).  It would\n   also\
    \ be sent by an ASP if it received a defined and recognized\n   message that the\
    \ SG is not expected to send (e.g., if the MGC\n   receives an IUA Establish Request\
    \ message).\n   The \"Protocol Error\" error would be sent for any protocol anomaly\n\
    \   (i.e., a bogus message).\n   The \"Invalid Stream Identifier\" error would\
    \ be sent if a message was\n   received on an unexpected SCTP stream (e.g., a\
    \ MGMT message was\n   received on a stream other than \"0\").\n   The \"Unsupported\
    \ Interface Identifier Type\" error would be sent by an\n   SG if an ASP sends\
    \ a text-formatted Interface Identifier and the SG\n   only supports integer-formatted\
    \ Interface Identifiers.  When the ASP\n   receives this error, it will need to\
    \ resend its message with an\n   integer-formatted Interface Identifier.\n   The\
    \ \"Unsupported Message Type\" error would be sent if a message with\n   an unexpected\
    \ or unsupported Message Type is received.\n   The \"Unsupported Message Class\"\
    \ error would be sent if a message with\n   an unexpected or unsupported Message\
    \ Class is received.\n   The \"Unassigned TEI\" error may be used when the SG\
    \ receives an IUA\n   message that includes a TEI that has not been assigned or\
    \ recognized\n   for use on the indicated ISDN D-channel.\n   The \"Unrecognized\
    \ SAPI\" error would handle the case of using an SAPI\n   that is not recognized\
    \ by the SG.  The \"Invalid TEI, SAPI\n   combination\" error identifies errors\
    \ where the TEI is assigned and\n   the SAPI is recognized, but the combination\
    \ is not valid for the\n   interface (e.g., on a Basic Rate Interface (BRI), the\
    \ MGC tries to\n   send Q.921 Management messages via IUA when Layer Management\
    \ at the\n   SG SHOULD be performing this function).\n   The \"Refused - Management\
    \ Blocking\" error is sent when an ASP Up or\n   ASP Active message is received\
    \ and the request is refused for\n   management reasons (e.g., management lockout).\n\
    \   The \"ASP Identifier Required\" is sent by an SG in response to an ASP\n \
    \  Up message that does not contain an ASP Identifier parameter when the\n   SG\
    \ requires one.  The ASP SHOULD resend the ASP Up message with an\n   ASP Identifier.\n\
    \   The \"Invalid ASP Identifier\" is sent by a SG in response to an ASP Up\n\
    \   message with an invalid (i.e., non-unique) ASP Identifier.\n   Diagnostic\
    \ Information: variable length\n      When included, the optional Diagnostic information\
    \ can be any\n      information germane to the error condition, to assist in\n\
    \      identification of the error condition.  The Diagnostic information\n  \
    \    SHOULD contain the offending message.\n   Error messages MUST NOT be generated\
    \ in response to other Error\n   messages.\n"
- title: 3.3.3.2.  Notify (NTFY)
  contents:
  - "3.3.3.2.  Notify (NTFY)\n   The Notify message used to provide an autonomous\
    \ indication of IUA\n   events to an IUA peer.\n   The Notify message will use\
    \ only the common message header.  The\n   Notify message contains the following\
    \ parameters:\n      Status                     (Mandatory)\n      ASP Identifier\
    \             (Optional)\n      Interface Identifiers      (Optional)\n      INFO\
    \ String                (Optional)\n   The format for the Notify message with\
    \ integer-formatted Interface\n   Identifiers is as follows:\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Tag = 0x000d           |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Status Type            |    Status Identification      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Tag = 0x0011           |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        ASP Identifier                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Tag (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           .                                       .\n           .          \
    \                             .\n           .                                \
    \       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \            Additional Interface Identifier Parameters         /\n   \\     \
    \             of Tag Type 0x1 or 0x8                       \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0004          |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format for the Notify message with text-formatted Interface\n   Identifiers\
    \ is as follows:\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \      Tag = 0x000d           |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Status Type            |    Status Identification      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Tag = 0x0011           |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        ASP Identifier                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                     Interface Identifiers                     /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \           Additional Interface Identifier Parameters          /\n   \\     \
    \                 of Tag Type 0x3                          \\\n   /          \
    \                                                     /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Tag = 0x0004          |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   \\                                                               \\\n   /\
    \                         INFO String                           /\n   \\     \
    \                                                          \\\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Status Type: 16 bits (unsigned integer)\n      The Status Type parameter\
    \ identifies the type of the Notify\n      message.  The following are the valid\
    \ Status Type values:\n         1     Application Server State Change (AS-State_Change)\n\
    \         2     Other\n   Status Information: 16 bits (unsigned integer)\n   \
    \   The Status Information parameter contains more detailed\n      information\
    \ for the notification, based on the value of the Status\n      Type.  If the\
    \ Status Type is AS-State_Change, the following Status\n      Information values\
    \ are used:\n         1    reserved\n         2    Application Server Inactive\
    \ (AS-INACTIVE)\n         3    Application Server Active (AS-ACTIVE)\n       \
    \  4    Application Server Pending (AS-PENDING)\n   These notifications are sent\
    \ from an SG to an ASP upon a change in\n   status of a particular Application\
    \ Server.  The value reflects the\n   new state of the Application Server.\n \
    \  If the Status Type is Other, then the following Status Information\n   values\
    \ are defined:\n      Value          Description\n        1    Insufficient ASP\
    \ resources active in AS\n        2    Alternate ASP Active\n        3    ASP\
    \ Failure\n   These notifications are not based on the SG reporting the state\n\
    \   change of an ASP or AS.  In the Insufficient ASP Resources case, the\n   SG\
    \ is indicating to an ASP-INACTIVE ASP(s) in the AS that another ASP\n   is required\
    \ in order to handle the load of the AS (Load-sharing\n   mode).  For the Alternate\
    \ ASP Active case, an ASP is informed when an\n   alternate ASP transitions to\
    \ the ASP-ACTIVE state in Over-ride mode.\n   The ASP Identifier (if available)\
    \ of the Alternate ASP MUST be placed\n   in the message.  For the ASP Failure\
    \ case, the SG is indicating to\n   ASP(s) in the AS that one of the ASPs has\
    \ transitioned to ASP-DOWN.\n   The ASP Identifier (if available) of the failed\
    \ ASP MUST be placed in\n   the message.\n   The format and description of the\
    \ optional ASP Identifier are the\n   same as for the ASP Up message (see Section\
    \ 3.3.2.1).  The format and\n   description of the optional Interface Identifiers\
    \ and INFO String\n   parameters are the same as for the ASP Active message (see\
    \ Section\n   3.3.2.5).\n"
- title: 3.3.3.3.  TEI Status Messages (Request, Confirm, and Indication)
  contents:
  - "3.3.3.3.  TEI Status Messages (Request, Confirm, and Indication)\n   The TEI\
    \ Status messages are exchanged between IUA layer peers to\n   request, confirm,\
    \ and indicate the status of a particular TEI.\n   The TEI Status messages contain\
    \ the common message header followed by\n   IUA message header.  The TEI Status\
    \ Request message does not contain\n   any additional parameters.\n   In the integrated\
    \ ISDN Layer 2/3 model (e.g., in traditional ISDN\n   switches), it is assumed\
    \ that the Layer Management for the Q.921\n   Layer and the Q.931 layer are co-located.\
    \  When backhauling ISDN,\n   this assumption is not necessarily valid.  The TEI\
    \ Status messages\n   allow the two Layer Management entities to communicate the\
    \ status of\n   the TEI.  In addition, knowing that a TEI is in service allows\
    \ the\n   ASP to request the SG to establish the datalink to the terminal (via\n\
    \   the IUA Establish message) for signaling if the ASP wants to be in\n   control\
    \ of data link establishment.  Another use of the TEI Status\n   procedure is\
    \ where the Layer Management at the ASP can prepare for\n   send/receive signaling\
    \ to/from a given TEI and confirm/verify the\n   establishment of a datalink to\
    \ that TEI.  For example, if a datalink\n   is established for a TEI that the\
    \ ASP did not know was assigned, the\n   ASP can check to see whether it was assigned\
    \ or whether there was an\n   error in the signaling message.  Also, knowing that\
    \ a TEI is out of\n   service, the ASP need not request the SG to establish a\
    \ datalink to\n   that TEI.\n   The TEI Status Indication and Confirm messages\
    \ contain the following\n   parameter:\n     STATUS\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Tag = 0x0010         |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Status                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The valid values for Status are shown in the following table.\n      Define\
    \     Value           Description\n   ASSIGNED       0x0        TEI is considered\
    \ assigned by Q.921\n   UNASSIGNED     0x1        TEI is considered unassigned\
    \ by Q.921\n"
- title: 3.3.3.4.  TEI Query Message (Request)
  contents:
  - "3.3.3.4.  TEI Query Message (Request)\n   The TEI Query message is sent by the\
    \ ASP to query the TEI(s).  This\n   message consists of the common header and\
    \ IUA header.  The DLCI in\n   the IUA header MUST be ignored by the SG.  The\
    \ SG will respond to\n   this message with TEI Status Indication(s).\n"
- title: 4.  Procedures
  contents:
  - "4.  Procedures\n   The IUA layer needs to respond to various primitives it receives\
    \ from\n   other layers as well as messages it receives from the peer IUA layer.\n\
    \   This section describes various procedures involved in response to\n   these\
    \ events.\n"
- title: 4.1.  Procedures to Support Service in Section 1.4.1
  contents:
  - "4.1.  Procedures to Support Service in Section 1.4.1\n   These procedures achieve\
    \ the IUA layer's \"Transport of Q.921/Q.931\n   boundary primitives\" service.\n"
- title: 4.1.1.  Q.921 or Q.931 Primitives Procedures
  contents:
  - "4.1.1.  Q.921 or Q.931 Primitives Procedures\n   On receiving these primitives\
    \ from the local layer, the IUA layer\n   will send the corresponding QPTM message\
    \ (Data, Unit Data, Establish,\n   Release) to its peer.  While doing so, the\
    \ IUA layer needs to fill\n   various fields of the common and specific headers\
    \ correctly.  In\n   addition, the message needs to be sent on the SCTP stream\
    \ that\n   corresponds to the D channel (Interface Identifier).\n"
- title: 4.1.2.  QPTM Message Procedures
  contents:
  - "4.1.2.  QPTM Message Procedures\n   On receiving QPTM messages from a peer IUA\
    \ layer, the IUA layer on an\n   SG or MGC needs to invoke the corresponding layer\
    \ primitives\n   (DL-ESTABLISH, DL-DATA, DL-UNIT DATA, DL-RELEASE) to the local\
    \ Q.921\n   or Q.931 layer.\n"
- title: 4.2.  Procedures to Support Service in Section 1.4.2
  contents:
  - "4.2.  Procedures to Support Service in Section 1.4.2\n   These procedures achieve\
    \ the IUA layer's \"Support for Communication\n   between Layer Managements\"\
    \ service.\n"
- title: 4.2.1.  Layer Management Primitives Procedures
  contents:
  - "4.2.1.  Layer Management Primitives Procedures\n   On receiving these primitives\
    \ from the local Layer Management, the\n   IUA layer will provide the appropriate\
    \ response primitive across the\n   internal local Layer Management interface.\n\
    \   An M-SCTP ESTABLISH request from Layer Management will initiate the\n   establishment\
    \ of an SCTP association.  An M-SCTP ESTABLISH confirm\n   will be sent to Layer\
    \ Management when the initiated association setup\n   is complete.  An M-SCTP\
    \ ESTABLISH indication is sent to Layer\n   Management upon successful completion\
    \ of an incoming SCTP association\n   setup from a peer IUA node.\n   An M-SCTP\
    \ RELEASE request from Layer Management will initiate the\n   teardown of an SCTP\
    \ association.  An M-SCTP RELEASE confirm will be\n   sent by Layer Management\
    \ when the association teardown is complete.\n   An M-SCTP RELEASE indication\
    \ is sent to Layer Management upon\n   successful teardown of an SCTP association\
    \ initiated by a peer IUA.\n   M-SCTP STATUS request and indication support a\
    \ Layer Management query\n   of the local status of a particular SCTP association.\n\
    \   M-NOTIFY indication and M-ERROR indication indicate to Layer\n   Management\
    \ the notification or error information contained in a\n   received IUA Notify\
    \ or Error message, respectively.  These\n   indications can also be generated\
    \ based on local IUA events.\n   M-ASP STATUS request/indication and M-AS-STATUS\
    \ request/indication\n   support a Layer Management query of the local status\
    \ of a particular\n   ASP or AS.  No IUA peer protocol is invoked.\n   M-ASP-UP\
    \ request, M-ASP-DOWN request, M-ASP-INACTIVE request, and\n   M-ASP-ACTIVE request\
    \ allow Layer Management at an ASP to initiate\n   state changes.  These requests\
    \ result in outgoing IUA ASP UP, ASP\n   DOWN, ASP INACTIVE, and ASP ACTIVE messages.\n\
    \   M-ASP-UP confirmation, M-ASP-DOWN confirmation, M-ASP-INACTIVE\n   confirmation,\
    \ and M-ASP-ACTIVE confirmation indicate to Layer\n   Management that the previous\
    \ request has been confirmed.\n   Upon receipt of an M-TEI Status primitive from\
    \ Layer Management, the\n   IUA will send the corresponding MGMT message (TEI\
    \ Status) to its\n   peer.  While doing so, the IUA layer needs to fill various\
    \ fields of\n   the common and specific headers correctly.\n   All MGMT messages\
    \ are sent on a sequenced stream to ensure ordering.\n   SCTP stream '0' SHOULD\
    \ be used.\n"
- title: 4.2.2.  Receipt of IUA Peer Management Messages
  contents:
  - "4.2.2.  Receipt of IUA Peer Management Messages\n   Upon receipt of IUA Management\
    \ messages, the IUA layer MUST invoke\n   the corresponding Layer Management primitive\
    \ indications (e.g., M-AS\n   Status ind., M-ASP Status ind., M-ERROR ind., M-TEI\
    \ STATUS) to the\n   local layer management.\n   M-NOTIFY indication and M-ERROR\
    \ indication indicate to Layer\n   Management the notification or error information\
    \ contained in a\n   received IUA Notify or Error message.  These indications\
    \ can also be\n   generated based on local IUA events.\n   All MGMT messages are\
    \ sent on a sequenced stream to ensure ordering.\n   SCTP stream '0' SHOULD be\
    \ used.\n"
- title: 4.3.  Procedures to Support Service in Section 1.4.3
  contents:
  - "4.3.  Procedures to Support Service in Section 1.4.3\n   These procedures achieve\
    \ the IUA layer's \"Support for management of\n   active associations between\
    \ SG and MGC\" service.\n"
- title: 4.3.1.  AS and ASP State Maintenance
  contents:
  - "4.3.1.  AS and ASP State Maintenance\n   The IUA layer on the SG needs to maintain\
    \ the states of each ASP as\n   well as the state of the AS.\n"
- title: 4.3.1.1.  ASP States
  contents:
  - "4.3.1.1.  ASP States\n   The state of the each ASP, in each AS that it is configured,\
    \ is\n   maintained in the IUA layer on the SG.  The state of an ASP changes\n\
    \   due to the following type of events:\n      *  Reception of messages from\
    \ peer IUA layer at that ASP\n      *  Reception of some messages from the peer\
    \ IUA layer at other\n         ASPs in the AS\n      *  Reception of indications\
    \ from SCTP layer\n      *  Local Management intervention\n   The ASP state transition\
    \ diagram is shown in Figure 6.  The possible\n   states of an ASP are the following:\n\
    \   ASP-DOWN: Application Server Process is unavailable and/or the\n   related\
    \ SCTP association is down.  Initially, all ASPs will be in\n   this state.  An\
    \ ASP in this state SHOULD NOT be sent any IUA\n   messages.\n   ASP-INACTIVE:\
    \ The remote IUA peer at the ASP is available (and the\n   related SCTP association\
    \ is up) but application traffic is stopped.\n   In this state, the ASP can be\
    \ sent any non-QPTM IUA messages (except\n   for TEI Status messages).\n   ASP-ACTIVE:\
    \ The remote IUA peer at the ASP is available and\n   application traffic is active.\n\
    \                                    +--------------+\n             +----------------------|\
    \              |\n             |   Alternate  +-------|  ASP-ACTIVE  |\n     \
    \        |       ASP    |       +--------------+\n             |    Takeover \
    \ |           ^     |\n             |              |    ASP    |     | ASP Inactive\
    \ /\n             |              |    Active |     | ASP Up\n             |  \
    \            |           |     v\n             |              |       +--------------+\n\
    \             |              |       |              |\n             |        \
    \      +------>| ASP-INACTIVE |\n             |                      +--------------+\n\
    \             |                          ^    |\n   ASP Down/ |              \
    \       ASP  |    | ASP Down /\n   SCTP CDI/ |                     Up   |    |\
    \ SCTP CDI /\n   SCTP RI   |                          |    v SCTP RI\n       \
    \      |                      +--------------+\n             +--------------------->|\
    \              |\n                                    |   ASP-DOWN   |\n     \
    \                               +--------------+\n                  Figure 6.\
    \  ASP State Transition Diagram\n   SCTP CDI:  The local SCTP layer's Communication\
    \ Down Indication to\n   the Upper Layer Protocol (IUA) on an SG.  The local SCTP\
    \ will send\n   this indication when it detects the loss of connectivity to the\
    \ ASP's\n   peer SCTP layer.  SCTP CDI is understood as either a SHUTDOWN\n  \
    \ COMPLETE notification and COMMUNICATION LOST notification from the\n   SCTP.\n\
    \   SCTP RI: The local SCTP layer's Restart indication to the upper layer\n  \
    \ protocol (IUA) on an SG.  The local SCTP will send this indication\n   when\
    \ it detects a restart from the ASP's peer SCTP layer.\n"
- title: 4.3.1.2.  AS States
  contents:
  - "4.3.1.2.  AS States\n   The state of the AS is maintained in the IUA layer on\
    \ the SG.\n   The state of an AS changes due to events.  These events include\
    \ the\n   following:\n      *  ASP state transitions\n      *  Recovery timer\
    \ triggers\n   The possible states of an AS are the following:\n   AS-DOWN: The\
    \ Application Server is unavailable.  This state implies\n   that all related\
    \ ASPs are in the ASP-DOWN state for this AS.\n   Initially, the AS will be in\
    \ this state.\n   AS-INACTIVE: The Application Server is available but no application\n\
    \   traffic is active (i.e., one or more related ASPs are in the\n   ASP-INACTIVE\
    \ state, but none in the ASP-ACTIVE state).  The recovery\n   timer T(r) is not\
    \ running or has expired.\n   AS-ACTIVE: The Application Server is available and\
    \ application\n   traffic is active.  This state implies that at least one ASP\
    \ is in\n   the ASP-ACTIVE state.\n   AS-PENDING: An active ASP has transitioned\
    \ from active to inactive or\n   down and it was the last remaining active ASP\
    \ in the AS.  A recovery\n   timer T(r) will be started and all incoming SCN messages\
    \ will be\n   queued by the SG.  If an ASP becomes active before T(r) expires,\
    \ the\n   AS will move to AS-ACTIVE state and all the queued messages will be\n\
    \   sent to the active ASP.\n   If T(r) expires before an ASP becomes active,\
    \ the SG stops queuing\n   messages and discards all previously queued messages.\
    \  The AS will\n   move to AS-INACTIVE if at least one ASP is in ASP-INACTIVE\
    \ state,\n   otherwise it will move to AS-DOWN state.\n      +----------+ one\
    \ ASP trans to ASP-ACTIVE +-------------+\n      |    AS-   |---------------------------->|\
    \     AS-     |\n      | INACTIVE |                             |   ACTIVE   \
    \ |\n      |          |<---                         |             |\n      +----------+\
    \    \\                        +-------------+\n         ^   |         \\ Tr Expiry,\
    \                ^    |\n         |   |          \\ at least one             |\
    \    |\n         |   |           \\ ASP in ASP-INACTIVE     |    |\n         |\
    \   |            \\                        |    |\n         |   |            \
    \ \\                       |    |\n         |   |              \\            \
    \          |    |\n one ASP |   | all ASP       \\            one ASP  |    |\
    \ Last ACTIVE\n trans   |   | trans to       \\           trans to |    | ASP\
    \ trans to\n to      |   | ASP-DOWN        -------\\   ASP-     |    | ASP-INACTIVE\n\
    \ ASP-    |   |                         \\  ACTIVE   |    | or ASP-DOWN\n INACTIVE|\
    \   |                          \\          |    |  (start Tr)\n         |   |\
    \                           \\         |    |\n         |   |                \
    \            \\        |    |\n         |   v                             \\ \
    \      |    v\n      +----------+                          \\  +-------------+\n\
    \      |          |                           --|             |\n      | AS-DOWN\
    \  |                             | AS-PENDING  |\n      |          |         \
    \                    |  (queueing) |\n      |          |<----------------------------|\
    \             |\n      +----------+    Tr Expiry and no ASP     +-------------+\n\
    \                     in ASP-INACTIVE state\n     Tr = Recovery Timer\n      \
    \           Figure 7: AS State Transition Diagram\n"
- title: 4.3.2.  ASPM Procedures for Primitives
  contents:
  - "4.3.2.  ASPM Procedures for Primitives\n   Before the establishment of an SCTP\
    \ association, the ASP state at\n   both the SG and ASP is assumed to be in the\
    \ state ASP-DOWN.\n   As the ASP is responsible for initiating the setup of an\
    \ SCTP\n   association to an SG, the IUA layer at an ASP receives an M-SCTP\n\
    \   ESTABLISH request primitive from the Layer Management, the IUA layer\n   will\
    \ try to establish an SCTP association with the remote IUA peer at\n   an SG.\
    \  Upon reception of an eventual SCTP-Communication Up confirm\n   primitive from\
    \ the SCTP, the IUA layer will invoke the primitive\n   M-SCTP ESTABLISH confirm\
    \ to the Layer Management.\n   At the SG, the IUA layer will receive an SCTP Communication\
    \ Up\n   indication primitive from the SCTP.  The IUA layer will then invoke\n\
    \   the primitive M-SCTP ESTABLISH indication to the Layer Management.\n   Once\
    \ the SCTP association is established and assuming that the local\n   IUA-User\
    \ is ready, the local ASP IUA Application Server Process\n   Maintenance (ASPM)\
    \ function will initiate the ASPM procedures, using\n   the ASP Up/-Down/-Active/-Inactive\
    \ messages to convey the ASP state\n   to the SG (see Section 4.3.3).\n   The\
    \ Layer Management and the IUA layer on SG can communicate the\n   status of the\
    \ application server using the M-AS_STATUS primitives.\n   The Layer Management\
    \ and the IUA layer on both the SG and ASP can\n   communicate the status of an\
    \ SCTP association using the M-SCTP_STATUS\n   primitives.\n   If the Layer Management\
    \ on SG or ASP wants to bring down an SCTP\n   association for management reasons,\
    \ it would send M-SCTP RELEASE\n   request primitive to the local IUA layer. \
    \ The IUA layer would\n   release the SCTP association and upon receiving the\
    \ SCTP-\n   COMMUNICATION_DOWN indication from the underlying SCTP layer, it\n\
    \   would inform the local Layer Management using M-SCTP_RELEASE confirm\n   primitive.\n\
    \   If the IUA layer receives an SCTP-COMMUNICATION_DOWN indication from\n   the\
    \ underlying SCTP layer, it will inform the Layer Management by\n   invoking the\
    \ M-SCTP RELEASE indication primitive.  The state of the\n   ASP will be moved\
    \ to \"Down\" at both the SG and ASP.\n   At an ASP, the Layer Management MAY\
    \ try to reestablish the SCTP\n   association using M-SCTP_ESTABLISH request primitive.\n\
    \   In the case of an SCTP-RESTART indication at an ASP, the ASP is now\n   considered\
    \ by its IUA peer to be in the ASP-DOWN state.  The ASP, if\n   it is to recover,\
    \ must begin any recovery with the ASP Up procedure.\n"
- title: 4.3.3.  ASPM Procedures for Peer-to-Peer Messages
  contents:
  - "4.3.3.  ASPM Procedures for Peer-to-Peer Messages\n   All ASPM messages are sent\
    \ on a sequenced stream to ensure ordering.\n   SCTP stream '0' SHOULD be used.\n"
- title: 4.3.3.1.  ASP Up Procedures
  contents:
  - "4.3.3.1.  ASP Up Procedures\n   After an ASP has successfully established an\
    \ SCTP association to an\n   SG, the SG waits for the ASP to send an ASP Up message,\
    \ indicating\n   that the ASP IUA peer is available.  The ASP is always the initiator\n\
    \   of the ASP Up message.  This action MAY be initiated at the ASP by an\n  \
    \ M-ASP_UP request primitive from Layer Management or MAY be initiated\n   automatically\
    \ by an IUA management function.\n   When an ASP Up message is received at an\
    \ SG and internally the remote\n   ASP is in the ASP-DOWN state and not considered\
    \ locked out for local\n   management reasons, the SG marks the remote ASP in\
    \ the state\n   ASP-INACTIVE and informs Layer Management with an M-ASP_Up indication\n\
    \   primitive.  If the SG is aware, via current configuration data, which\n  \
    \ Application Servers the ASP is configured to operate in, the SG\n   updates\
    \ the ASP state to ASP-INACTIVE in each AS that it is a member.\n   Alternatively,\
    \ the SG may move the ASP into a pool of Inactive ASPs\n   available for future\
    \ configuration within Application Server(s),\n   determined in a subsequent ASP\
    \ Active procedure.  If the ASP Up\n   message contains an ASP Identifier, the\
    \ SG should save the ASP\n   Identifier for that ASP.  The SG MUST send an ASP\
    \ Up Ack message in\n   response to a received ASP Up message even if the ASP\
    \ is already\n   marked as ASP-INACTIVE at the SG.\n   If for any local reason\
    \ (e.g., management lockout) the SG cannot\n   respond with an ASP Up Ack message,\
    \ the SG responds to an ASP Up\n   message with an Error message with reason \"\
    Refused - Management\n   Blocking\".\n   At the ASP, the ASP Up Ack message received\
    \ is not acknowledged.\n   Layer Management is informed with an M-ASP_UP confirm\
    \ primitive.\n   When the ASP sends an ASP Up message, it starts timer T(ack).\
    \  If the\n   ASP does not receive a response to an ASP Up message within T(ack),\n\
    \   the ASP MAY restart T(ack) and resend ASP Up messages until it\n   receives\
    \ an ASP Up Ack message.  T(ack) is provisionable, with a\n   default of 2 seconds.\
    \  Alternatively, retransmission of ASP Up\n   messages MAY be put under control\
    \ of Layer Management.  In this\n   method, expiry of T(ack) results in an M-ASP_UP\
    \ confirm primitive\n   carrying a negative indication.\n   The ASP must wait\
    \ for the ASP Up Ack message before sending any other\n   IUA messages (e.g.,\
    \ ASP Active).  If the SG receives any other IUA\n   messages before an ASP Up\
    \ message is received (other than ASP Down;\n   see Section 4.3.3.2), the SG MAY\
    \ discard them.\n   If an ASP Up message is received and internally the remote\
    \ ASP is in\n   the ASP-ACTIVE state, an ASP Up Ack message is returned, as well\
    \ as\n   an Error message (\"Unexpected Message\"), and the remote ASP state is\n\
    \   changed to ASP-INACTIVE in all relevant Application Servers.\n   If an ASP\
    \ Up message is received and internally the remote ASP is\n   already in the ASP-INACTIVE\
    \ state, an ASP Up Ack message is returned\n   and no further action is taken.\n"
- title: 4.3.3.2.  ASP Down Procedures
  contents:
  - "4.3.3.2.  ASP Down Procedures\n   The ASP will send an ASP Down message to an\
    \ SG when the ASP wishes to\n   be removed from the list of ASPs in all Application\
    \ Servers that it\n   is a member and no longer receive any IUA QPTM or ASPTM\
    \ messages.\n   This action MAY be initiated at the ASP by an M-ASP_DOWN request\n\
    \   primitive from Layer Management or MAY be initiated automatically by\n   an\
    \ IUA management function.\n   Whether the ASP is permanently removed from an\
    \ AS is a function of\n   configuration management.\n   The SG marks the ASP as\
    \ ASP-DOWN, informs Layer Management with an\n   M-ASP_Down indication primitive,\
    \ and returns an ASP Down Ack message\n   to the ASP.\n   The SG MUST send an\
    \ ASP Down Ack message in response to a received\n   ASP Down message from the\
    \ ASP even if the ASP is already marked as\n   ASP-DOWN at the SG.\n   At the\
    \ ASP, the ASP Down Ack message received is not acknowledged.\n   Layer Management\
    \ is informed with an M-ASP_DOWN confirm primitive.\n   If the ASP receives an\
    \ ASP Down Ack without having sent an ASP Down\n   message, the ASP should now\
    \ consider itself as in the ASP-DOWN state.\n   If the ASP was previously in the\
    \ ASP-ACTIVE or ASP-INACTIVE state,\n   the ASP should then initiate procedures\
    \ to return itself to its\n   previous state.\n   When the ASP sends an ASP Down\
    \ message, it starts timer T(ack).  If\n   the ASP does not receive a response\
    \ to an ASP Down message within\n   T(ack), the ASP MAY restart T(ack) and resend\
    \ ASP Down messages until\n   it receives an ASP Down Ack message.  T(ack) is\
    \ provisionable, with a\n   default of 2 seconds.  Alternatively, retransmission\
    \ of ASP Down\n   messages MAY be put under control of Layer Management.  In this\n\
    \   method, expiry of T(ack) results in an M-ASP_DOWN confirm primitive\n   carrying\
    \ a negative indication.\n"
- title: 4.3.3.3.  IUA Version Control
  contents:
  - "4.3.3.3.  IUA Version Control\n   If a ASP Up message with an unsupported version\
    \ is received, the\n   receiving end responds with an Error message, indicating\
    \ the version\n   the receiving node supports and notifies Layer Management.\n\
    \   This is useful when protocol version upgrades are being performed in\n   a\
    \ network.  A node upgraded to a newer version SHOULD support the\n   older versions\
    \ used on other nodes it is communicating with.  Because\n   ASPs initiate the\
    \ ASP Up procedure it is assumed that the Error\n   message would normally come\
    \ from the SG.\n"
- title: 4.3.3.4.  ASP Active Procedures
  contents:
  - "4.3.3.4.  ASP Active Procedures\n   Any time after the ASP has received an ASP\
    \ Up Ack from the SG, the\n   ASP sends an ASP Active message to the SG indicating\
    \ that the ASP is\n   ready to start processing traffic.  This action MAY be initiated\
    \ at\n   the ASP by an M-ASP_ACTIVE request primitive from Layer Management or\n\
    \   MAY be initiated automatically by an IUA management function.  In the\n  \
    \ case where an ASP is configured/registered to process the traffic for\n   more\
    \ than one Application Server across an SCTP association, the\n   ASPAC contains\
    \ one or more Interface Identifiers to indicate for\n   which Application Servers\
    \ the ASPAC applies.\n   If the Application Server can be successfully activated,\
    \ the SG\n   responds to the ASP with an ASPAC Ack message acknowledging that\
    \ the\n   ASPAC message was received and starts sending traffic for the\n   Application\
    \ Server to that ASP.\n   In the case where an \"out-of-the-blue\" ASP Active\
    \ message is received\n   (i.e., the ASP has not registered with the SG or the\
    \ SG has no static\n   configuration data for the ASP), the message MAY be silently\n\
    \   discarded.\n   The SG MUST send an ASP Active Ack message in response to a\
    \ received\n   ASP Active message from the ASP, if the ASP is already marked in\
    \ the\n   ASP-ACTIVE state at the SG.\n   At the ASP, the ASP Active Ack message\
    \ received is not acknowledged.\n   Layer Management is informed with an M-ASP_ACTIVE\
    \ confirm primitive.\n   It is possible for the ASP to receive Data message(s)\
    \ before the ASP\n   Active Ack message as the ASP Active Ack and Data messages\
    \ from an SG\n   may be sent on different SCTP streams.  Message loss is possible\
    \ as\n   the ASP does not consider itself in the ASP-ACTIVE state until\n   reception\
    \ of the ASP Active Ack message.\n   When the ASP sends an ASP Active message,\
    \ it starts timer T(ack).  If\n   the ASP does not receive a response to an ASP\
    \ Active message within\n   T(ack), the ASP MAY restart T(ack) and resend ASP\
    \ Active messages\n   until it receives an ASP Active Ack message.  T(ack) is\n\
    \   provisionable, with a default of 2 seconds.  Alternatively,\n   retransmission\
    \ of ASP Active messages MAY be put under control of\n   Layer Management.  In\
    \ this method, expiry of T(ack) results in an M-\n   ASP_ACTIVE confirm primitive\
    \ carrying a negative indication.\n   The ASP MUST wait for the ASP Active Ack\
    \ message from the SG before\n   sending any Data messages or it will risk message\
    \ loss.  If the SG\n   receives QPTM messages before an ASP Active is received,\
    \ the SG\n   SHOULD discard these messages.\n   There are two modes of Application\
    \ Server traffic handling in the SG\n   IUA: Over-ride and Load-sharing.  The\
    \ Type parameter in the ASPAC\n   message indicates the mode used in a particular\
    \ Application Server.\n   If the SG determines that the mode indicates in an ASPAC\
    \ is\n   incompatible with the traffic handling mode currently used in the AS,\n\
    \   the SG responds with an Error message indicating Unsupported Traffic\n   Handling\
    \ Mode.\n   In the case of an Over-ride mode AS, reception of an ASPAC message\
    \ at\n   an SG causes the redirection of all traffic for the AS to the ASP\n \
    \  that sent the ASPAC.  The SG responds to the ASPAC with an ASP Active\n   Ack\
    \ message to the ASP.  Any previously active ASP in the AS is now\n   considered\
    \ Inactive and will no longer receive traffic from the SG\n   within the AS. \
    \ The SG sends a Notify (Alternate ASP Active) to the\n   previously active ASP\
    \ in the AS, after stopping all traffic to that\n   ASP.\n   In the case of a\
    \ load-share mode AS, reception of an ASPAC message at\n   an SG causes the direction\
    \ of traffic to the ASP sending the ASPAC,\n   in addition to all the other ASPs\
    \ that are currently active in the\n   AS.  The algorithm at the SG for load-sharing\
    \ traffic within an AS to\n   all the active ASPs is implementation dependent.\
    \  The algorithm\n   could, for example, be round-robin or based on information\
    \ in the\n   Data message, such as Interface Identifier, depending on the\n  \
    \ requirements of the application and the call state handling\n   assumptions\
    \ of the collection of ASPs in the AS.  The SG responds to\n   the ASPAC with\
    \ an ASP Active Ack message to the ASP.\n"
- title: 4.3.3.5.  ASP Inactive Procedures
  contents:
  - "4.3.3.5.  ASP Inactive Procedures\n   When an ASP wishes to withdraw from receiving\
    \ traffic within an AS,\n   the ASP sends an ASP Inactive message to the SG. \
    \ This action MAY be\n   initiated at the ASP by an M-ASP_INACTIVE request primitive\
    \ from\n   Layer Management or MAY be initiated automatically by an IUA\n   management\
    \ function.  In the case where an ASP is configured/\n   registered to process\
    \ the traffic for more than one Application\n   Server across an SCTP association,\
    \ the ASPIA contains one or more\n   Interface Identifiers to indicate for which\
    \ Application Servers the\n   ASP Inactive message applies.\n   There are two\
    \ modes of Application Server traffic handling in the SG\n   IUA when withdrawing\
    \ an ASP from service: Over-ride and Load-sharing.\n   In the case of an Over-ride\
    \ mode AS, where normally another ASP has\n   already taken over the traffic within\
    \ the AS with an Over-ride ASPAC\n   message, the ASP that sends the ASPIA message\
    \ is already considered\n   by the SG to be ASP-INACTIVE.  An ASPIA Ack message\
    \ is sent to the\n   ASP, after ensuring that all traffic is stopped to the ASP.\n\
    \   In the case of a Load-share mode AS, the SG moves the ASP to the\n   ASP-INACTIVE\
    \ state and the AS traffic is re-allocated across the\n   remaining ASP-ACTIVE\
    \ ASPs per the load-sharing algorithm currently\n   used within the AS.  An ASPIA\
    \ Ack message is sent to the ASP after\n   all traffic is halted to the ASP. \
    \ A Notify (Insufficient ASPs)\n   message MAY be sent to all inactive ASPs, if\
    \ required.\n   When the ASP sends an ASP Inactive message it starts timer T(ack).\n\
    \   If the ASP does not receive a response to an ASP Inactive message\n   within\
    \ T(ack), the ASP MAY restart T(ack) and resend ASP Inactive\n   messages until\
    \ it receives an ASP Inactive Ack message.  T(ack) is\n   provisionable, with\
    \ a default of 2 seconds.  Alternatively,\n   retransmission of ASP Inactive messages\
    \ MAY be put under control of\n   Layer Management.  In this method, expiry of\
    \ T(ack) results in a M-\n   ASP_Inactive confirm primitive carrying a negative\
    \ indication.\n   If no other ASPs in the Application Server are in the state\n\
    \   ASP-ACTIVE, the SG MUST send a Notify (\"AS-Pending\") message to all\n  \
    \ of the ASPs in the AS that are in the state ASP-INACTIVE.  The SG\n   SHOULD\
    \ start buffering the incoming messages for T(r) seconds, after\n   which messages\
    \ MAY be discarded.  T(r) is configurable by the network\n   operator.  If the\
    \ SG receives an ASP Active message from an ASP in\n   the AS before expiry of\
    \ T(r), the buffered traffic is directed to\n   that ASP and the timer is cancelled.\
    \  If T(r) expires, the AS is\n   moved to the AS-INACTIVE state.\n   At the ASP,\
    \ the ASP Inactive Ack message received is not\n   acknowledged.  Layer Management\
    \ is informed with an M-ASP_INACTIVE\n   confirm primitive.  If the ASP receives\
    \ an ASP Inactive Ack without\n   having sent an ASP Inactive message, the ASP\
    \ should now consider\n   itself as in the ASP-INACTIVE state.  If the ASP was\
    \ previously in\n   the ASP-ACTIVE state, the ASP should then initiate procedures\
    \ to\n   return itself to its previous state.\n"
- title: 4.3.3.6.  Notify Procedures
  contents:
  - "4.3.3.6.  Notify Procedures\n   A Notify message reflecting a change in the AS\
    \ state MUST be sent to\n   all ASPs in the AS, except those in the ASP-DOWN state,\
    \ with\n   appropriate Status Information and any ASP Identifier of the failed\n\
    \   ASP.  At the ASP, Layer Management is informed with an M-NOTIFY\n   indication\
    \ primitive.  The Notify message must be sent whether the AS\n   state change\
    \ was a result of an ASP failure or reception of an ASP\n   State Management (ASPSM)\
    \ / ASP Traffic Management (ASPTM) message.\n   In the second case, the Notify\
    \ message MUST be sent after any related\n   acknowledgement messages  (e.g.,\
    \ ASP Up Ack, ASP Down Ack, ASP Active\n   Ack, or ASP Inactive Ack).\n   In the\
    \ case where a Notify (\"AS-Pending\") message is sent by an SG\n   that now has\
    \ no ASPs active to service the traffic, or a NTFY\n   (\"Insufficient ASPs\"\
    ) is sent in the Load-share mode, the Notify does\n   not explicitly compel the\
    \ ASP(s) receiving the message to become\n   active.  The ASPs remain in control\
    \ of what (and when) action is\n   taken.\n"
- title: 4.3.3.7.  Heartbeat
  contents:
  - "4.3.3.7.  Heartbeat\n   The optional Heartbeat procedures MAY be used when operating\
    \ over\n   transport layers that do not have their own heartbeat mechanism for\n\
    \   detecting loss of the transport association (i.e., other than the\n   SCTP).\n\
    \   Either IUA peer may optionally send Heartbeat messages periodically,\n   subject\
    \ to a provisionable timer T(beat).  Upon receiving a Heartbeat\n   message, the\
    \ IUA peer MUST respond with a Heartbeat Ack message.\n   If no Heartbeat Ack\
    \ message (or any other IUA message) is received\n   from the IUA peer within\
    \ 2*T(beat), the remote IUA peer is considered\n   unavailable.  Transmission\
    \ of Heartbeat messages is stopped and the\n   signaling process SHOULD attempt\
    \ to re-establish communication if it\n   is configured as the client for the\
    \ disconnected IUA peer.\n   The BEAT message MAY optionally contain an opaque\
    \ Heartbeat Data\n   parameter that MUST be echoed back unchanged in the related\
    \ Beat Ack\n   message.  The ASP upon examining the contents of the returned BEAT\n\
    \   Ack message MAY choose to consider the remote ASP as unavailable.\n   The\
    \ contents/format of the Heartbeat Data parameter is implementation\n   dependent\
    \ and only of local interest to the original sender.  The\n   contents MAY be\
    \ used, for example, to support a Heartbeat sequence\n   algorithm (to detect\
    \ missing Heartbeats), and/or a timestamp\n   mechanism (to evaluate delays).\n\
    \   Note:  Heartbeat-related events are not shown in Figure 6, \"ASP State\n \
    \  Transition Diagram\".\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1.  Establishment of Association and Traffic between SGs and ASPs
  contents:
  - '5.1.  Establishment of Association and Traffic between SGs and ASPs

    '
- title: 5.1.1.  Single ASP in an Application Server (1+0 sparing)
  contents:
  - "5.1.1.  Single ASP in an Application Server (1+0 sparing)\n   This scenario shows\
    \ the example IUA message flows for the\n   establishment of traffic between an\
    \ SG and an ASP, where only one ASP\n   is configured within an AS (no backup).\
    \  It is assumed that the SCTP\n   association is already setup.\n           \
    \     SG                       ASP1\n                 |\n                 |<---------ASP\
    \ Up----------|\n                 |--------ASP Up Ack------->|\n             \
    \    |                          |\n                 |-----NTFY(AS-INACTIVE)--->|\n\
    \                 |                          |\n                 |<-------ASP\
    \ Active--------|\n                 |------ASP Active Ack----->|\n           \
    \      |                          |\n                 |------NTFY(AS-ACTIVE)---->|\n\
    \                 |                          |\n"
- title: 5.1.2.  Two ASPs in Application Server (1+1 sparing)
  contents:
  - "5.1.2.  Two ASPs in Application Server (1+1 sparing)\n   This scenario shows\
    \ the example IUA message flows for the\n   establishment of traffic between an\
    \ SG and two ASPs in the same\n   Application Server, where ASP1 is configured\
    \ to be Active and ASP2 a\n   standby in the event of communication failure or\
    \ the withdrawal from\n   service of ASP1.  ASP2 MAY act as a hot, warm, or cold\
    \ standby\n   depending on the extent to which ASP1 and ASP2 share call state\
    \ or\n   can communicate call state under failure/withdrawal events.  The\n  \
    \ example message flow is the same whether the ASP Active messages are\n   Over-ride\
    \ or Load-share mode although typically this example would\n   use an Over-ride\
    \ mode.\n          SG                        ASP1                        ASP2\n\
    \           |                         |                          |\n         \
    \  |<--------ASP Up----------|                          |\n           |-------ASP\
    \ Up Ack------->|                          |\n           |                   \
    \      |                          |\n           |----NTFY(AS-INACTIVE)--->|  \
    \                        |\n           |                         |           \
    \               |\n           |<-----------------------------ASP Up----------------|\n\
    \           |----------------------------ASP Up Ack------------->|\n         \
    \  |                         |                          |\n           |      \
    \                   |                          |\n           |<-------ASP Active-------|\
    \                          |\n           |-----ASP Active Ack----->|         \
    \                 |\n           |                         |                  \
    \        |\n           |-----NTFY(AS-ACTIVE)---->|                          |\n\
    \           |----------------------NTFY(AS-ACTIVE)-------------->|\n"
- title: 5.1.3.  Two ASPs in an Application Server (1+1 sparing, load-sharing
  contents:
  - "5.1.3.  Two ASPs in an Application Server (1+1 sparing, load-sharing\n      \
    \  case)\n   This scenario shows a similar case to Section 5.1.2 but where the\
    \ two\n   ASPs are brought to active and load-share the traffic load.  In this\n\
    \   case, one ASP is sufficient to handle the total traffic load.\n          SG\
    \                       ASP1                       ASP2\n           |        \
    \                 |                          |\n           |<---------ASP Up---------|\
    \                          |\n           |--------ASP Up Ack------>|         \
    \                 |\n           |                         |                  \
    \        |\n           |----NTFY(AS-INACTIVE)--->|                          |\n\
    \           |                         |                          |\n         \
    \  |<------------------------------ASP Up---------------|\n           |-----------------------------ASP\
    \ Up Ack------------>|\n           |                         |               \
    \           |\n           |                         |                        \
    \  |\n           |<--ASP Active (Ldshr)----|                          |\n    \
    \       |----ASP Active Ack------>|                          |\n           | \
    \                        |                          |\n           |-----NTFY(AS-ACTIVE)---->|\
    \                          |\n           |----------------------NTFY(AS-ACTIVE)-------------->|\n\
    \           |                         |                          |\n         \
    \  |<----------------------------ASP Active (Ldshr)-----|\n           |-----------------------------ASP\
    \ Active Ack-------->|\n           |                         |               \
    \           |\n"
- title: 5.1.4.  Three ASPs in an Application Server (n+k sparing, load-sharing
  contents:
  - "5.1.4.  Three ASPs in an Application Server (n+k sparing, load-sharing\n    \
    \    case)\n   This scenario shows the example IUA message flows for the\n   establishment\
    \ of traffic between an SG and three ASPs in the same\n   Application Server,\
    \ where two of the ASPs are brought to active and\n   share the load.  In this\
    \ case, a minimum of two ASPs are required to\n   handle the total traffic load\
    \ (2+1 sparing).\n      SG                  ASP1                ASP2         \
    \       ASP3\n       |                    |                   |              \
    \     |\n       |<------ASP Up-------|                   |                   |\n\
    \       |-----ASP Up Ack---->|                   |                   |\n     \
    \  |                    |                   |                   |\n       |-NTFY(AS-INACTIVE)->|\
    \                   |                   |\n       |                    |     \
    \              |                   |\n       |<--------------------------ASP Up-------|\
    \                   |\n       |-----------------------ASP Up Ack------>|     \
    \              |\n       |                    |                   |          \
    \         |\n       |<---------------------------------------------ASP Up--------|\n\
    \       |--------------------------------------------ASP Up Ack----->|\n     \
    \  |                    |                   |                   |\n       |  \
    \                  |                   |                   |\n       |<-ASP Act\
    \ (Ldshr)---|                   |                   |\n       |----ASP Act Ack---->|\
    \                   |                   |\n       |                    |     \
    \              |                   |\n       |<---------------------ASP Act (Ldshr)---|\
    \                   |\n       |----------------------ASP Act Ack------>|     \
    \              |\n       |                    |                   |          \
    \         |\n       |--NTFY(AS-ACTIVE)-->|                   |               \
    \    |\n       |---------------NTFY(AS-ACTIVE)--------->|                   |\n\
    \       |------------------------NTFY(AS-ACTIVE)-------------------->|\n"
- title: 5.1.5.  Interface Identifier Configuration Mismatch Example
  contents:
  - "5.1.5.  Interface Identifier Configuration Mismatch Example\n   This scenario\
    \ shows the example IUA message flows for the\n   establishment of traffic between\
    \ an SG and an ASP in which some of\n   the Interface Identifiers have been misconfigured\
    \ on the ASP side.\n   The SG in this case has Interface Identifiers 1-5 configured\
    \ for\n   ASP1.\n                SG                               ASP1\n     \
    \            |                                |\n                 |          \
    \                      |\n                 |<----ASP Active (IIDs 1-10)-----|\n\
    \                 |---ASP Active Ack (IIDs 1-5)--->|\n                 |-------Error\
    \ (IIDs 6)---------->|\n                 |-------Error (IIDs 7)---------->|\n\
    \                 |-------Error (IIDs 8)---------->|\n                 |-------Error\
    \ (IIDs 9)---------->|\n                 |-------Error (IIDs 10)--------->|\n\
    \                 |                                |\n"
- title: 5.2.  ASP Traffic Fail-over Examples
  contents:
  - '5.2.  ASP Traffic Fail-over Examples

    '
- title: 5.2.1.  (1+1 Sparing, withdrawal of ASP, Backup Over-ride)
  contents:
  - "5.2.1.  (1+1 Sparing, withdrawal of ASP, Backup Over-ride)\n   The following\
    \ example shows a case in which an ASP withdraws from\n   service:\n         \
    \ SG                       ASP1                       ASP2\n           |     \
    \                    |                          |\n           |<-----ASP Inactive-------|\
    \                          |\n           |----ASP Inactive Ack---->|         \
    \                 |\n           |                         |                  \
    \        |\n           |----NTFY(AS-Pending)---->|                          |\n\
    \           |-------------------NTFY(AS-Pending)---------------->|\n         \
    \  |                         |                          |\n           |<------------------------------\
    \ ASP Active----------|\n           |-----------------------------ASP Active Ack)------->|\n\
    \           |                         |                          |\n         \
    \  |----NTFY(AS-ACTIVE)----->|                          |\n           |-------------------NTFY(AS-ACTIVE)----------------->|\n\
    \   In this case, the SG notifies ASP2 that the AS has moved to the Down\n   state.\
    \  The SG could have also (optionally) sent a Notify message\n   when the AS moved\
    \ to the Pending state.\n   Note:  If the SG detects loss of the IUA peer (IUA\
    \ heartbeat loss or\n   detection of SCTP failure), the initial SG-ASP1 ASP Inactive\
    \ message\n   exchange would not occur.\n"
- title: 5.2.2.  (1+1 Sparing, Backup Over-ride)
  contents:
  - "5.2.2.  (1+1 Sparing, Backup Over-ride)\n   The following example shows a case\
    \ in which ASP2 wishes to override\n   ASP1 and take over the traffic:\n     \
    \     SG                       ASP1                       ASP2\n           | \
    \                        |                          |\n           |<-------------------------------ASP\
    \ Active----------|\n           |-----------------------------ASP Active Ack-------->|\n\
    \           |----NTFY( Alt ASP-Act)-->|\n           |                        \
    \ |                          |\n   In this case, the SG notifies ASP1 that an\
    \ alternative ASP has\n   overridden it.\n"
- title: 5.2.3.  (n+k Sparing, Load-sharing case, withdrawal of ASP)
  contents:
  - "5.2.3.  (n+k Sparing, Load-sharing case, withdrawal of ASP)\n   Following on\
    \ from the example in Section 5.1.4, and ASP1 withdraws\n   from service:\n  \
    \   SG                  ASP1                 ASP2                 ASP3\n     \
    \ |                    |                   |                   |\n      |<----ASP\
    \ Inact------|                   |                   |\n      |---ASP Inact Ack--->|\
    \                   |                   |\n      |                    |      \
    \             |                   |\n      |---------------------------------NTFY(Ins.\
    \ ASPs)----------->|\n      |                    |                   |       \
    \            |\n      |<-----------------------------------------ASP Act (Ldshr)---|\n\
    \      |-------------------------------------------ASP Act (Ack)--->|\n      |\
    \                    |                   |                   |\n   In this case,\
    \ the SG has knowledge of the minimum ASP resources\n   required (implementation\
    \ dependent), for example, if the SG knows\n   that n+k = 2+1 for a load-share\
    \ AS and n currently equals 1.\n   Note:  If the SG detects loss of the ASP1 IUA\
    \ peer (IUA heartbeat\n   loss or detection of SCTP failure), the first SG-ASP1\
    \ ASP Inactive\n   message exchange would not occur.\n"
- title: 5.3.  Q.921/Q.931 Primitives Backhaul Examples
  contents:
  - "5.3.  Q.921/Q.931 Primitives Backhaul Examples\n   When the IUA layer on the\
    \ ASP has a QPTM message to send to the SG,\n   it will do the following:\n  \
    \    -  Determine the correct SG\n      -  Find the SCTP association to the chosen\
    \ SG\n      -  Determine the correct stream in the SCTP association based on\n\
    \         the D channel\n      -  Fill in the QPTM message, fill in IUA Message\
    \ Header, fill in\n         Common Header\n      -  Send the QPTM message to the\
    \ remote IUA peer in the SG, over\n         the SCTP association\n   When the\
    \ IUA layer on the SG has a QPTM message to send to the ASP,\n   it will do the\
    \ following:\n      -  Determine the AS for the Interface Identifier\n      -\
    \  Determine the Active ASP (SCTP association) within the AS\n      -  Determine\
    \ the correct stream in the SCTP association based on\n         the D channel\n\
    \      -  Fill in the QPTM message, fill in IUA Message Header, fill in\n    \
    \     Common Header\n      -  Send the QPTM message to the remote IUA peer in\
    \ the ASP, over\n         the SCTP association\n   An example of the message flows\
    \ for establishing a data link on a\n   signaling channel, passing PDUs and releasing\
    \ a data link on a\n   signaling channel is shown below.  An active association\
    \ between MGC\n   and SG is established (Section 5.1) prior to the following message\n\
    \   flows.\n            SG                             ASP\n                 \
    \       <----------- Establish Request\n      Establish Confirm  ---------->\n\
    \                        <----------- Data Request\n         Data Indication ----------->\n\
    \                        <----------- Data Request\n         Data Indication ----------->\n\
    \                        <----------- Data Request\n                        <-----------\
    \ Data Request\n         Data Indication ----------->\n                      \
    \  <----------- Release Request (RELEASE_MGMT)\n        Release Confirm  ---------->\n\
    \   An example of the message flows for a failed attempt to establish a\n   data\
    \ link on the signaling channel is shown below.  In this case, the\n   gateway\
    \ has a problem with its physical connection (e.g., Red Alarm),\n   so it cannot\
    \ establish a data link on the signaling channel.\n            SG            \
    \                 ASP\n                        <----------- Establish Request\
    \ (ESTABLISH_START)\n      Release Indication ---------->\n      (RELEASE_PHYS)\n"
- title: 5.4.  Layer Management Communication Examples
  contents:
  - "5.4.  Layer Management Communication Examples\n   An example of the message flows\
    \ for communication between Layer\n   Management modules between SG and ASP is\
    \ shown below.  An active\n   association between ASP and SG is established (Section\
    \ 5.1) prior to\n   the following message flows.\n                  SG       \
    \                ASP\n                        <----------- Data Request\n    \
    \    Error Indication ---------->\n         (INVALID_TEI)\n                  \
    \      <----------- TEI Status Request\n      TEI Status Confirm ---------->\n\
    \           (Unassigned)\n"
- title: 6.  Security
  contents:
  - "6.  Security\n   The security considerations discussed in \"Security Considerations\
    \ for\n   SIGTRAN Protocols\", RFC 3788 [3], apply to this document.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  SCTP Payload Protocol Identifier
  contents:
  - "7.1.  SCTP Payload Protocol Identifier\n   The IANA has assigned an IUA value\
    \ for the Payload Protocol\n   Identifier in SCTP Payload Data chunk.  The following\
    \ SCTP Payload\n   Protocol Identifier has been registered:\n         IUA    \"\
    1\"\n   The SCTP Payload Protocol Identifier is included in each SCTP Data\n \
    \  chunk, to indicate which protocol the SCTP is carrying.  This Payload\n   Protocol\
    \ Identifier is not directly used by SCTP but MAY be used by\n   certain network\
    \ entities to identify the type of information being\n   carried in a Data chunk.\n\
    \   The User Adaptation peer MAY use the Payload Protocol Identifier as a\n  \
    \ way of determining additional information about the data being\n   presented\
    \ to it by SCTP.\n"
- title: 7.2.  IUA Protocol Extensions
  contents:
  - "7.2.  IUA Protocol Extensions\n   This protocol may also be extended through\
    \ IANA in three ways:\n      -- through definition of additional message classes,\n\
    \      -- through definition of additional message types, and\n      -- through\
    \ definition of additional message parameters.\n   The definition and use of new\
    \ message classes, types, and parameters\n   are an integral part of SIGTRAN adaptation\
    \ layers.  Thus, these\n   extensions are assigned by IANA through an IETF Consensus\
    \ action as\n   defined in [7].\n   The proposed extension must in no way adversely\
    \ affect the general\n   working of the protocol.\n"
- title: 7.2.1.  IETF-Defined Message Classes
  contents:
  - "7.2.1.  IETF-Defined Message Classes\n   The documentation for a new message\
    \ class MUST include the following\n   information:\n   (a) A long and short name\
    \ for the message class.\n   (b) A detailed description of the purpose of the\
    \ message class.\n"
- title: 7.2.2.  IETF-Defined Message Types
  contents:
  - "7.2.2.  IETF-Defined Message Types\n   Documentation of the message type MUST\
    \ contain the following\n   information:\n   (a) A long and short name for the\
    \ new message type.\n   (b) A detailed description of the structure of the message.\n\
    \   (c) A detailed definition and description of intended use of each\n      \
    \ field within the message.\n   (d) A detailed procedural description of the use\
    \ of the new\n       message type within the operation of the protocol.\n   (e)\
    \ A detailed description of error conditions when receiving this\n       message\
    \ type.\n   When an implementation receives a message type that it does not\n\
    \   support, it MUST respond with an Error (ERR) message with an Error\n   Code\
    \ of Unsupported Message Type.\n"
- title: 7.2.3.  IETF-Defined TLV Parameter Extension
  contents:
  - "7.2.3.  IETF-Defined TLV Parameter Extension\n   Documentation of the message\
    \ parameter MUST contain the following\n   information:\n   (a) Name of the parameter\
    \ type.\n   (b) Detailed description of the structure of the parameter field.\n\
    \       This structure MUST conform to the general type-length-value\n       format\
    \ described in Section 3.1.5.\n   (c) Detailed definition of each component of\
    \ the parameter value.\n   (d) Detailed description of the intended use of this\
    \ parameter type,\n       and an indication of whether and under what circumstances\n\
    \       multiple instances of this parameter type may be found within the\n  \
    \     same message type.\n"
- title: 8.  Timer Values
  contents:
  - "8.  Timer Values\n   The following are suggestions for default timer values.\n\
    \   T(r)                                    3-5 seconds\n   T(ack)           \
    \                       2-5 seconds\n   T(beat)   Heartbeat Timer            \
    \   30 seconds\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Alex Audu, Maria Sonia\
    \ Vazquez\n   Arevalillo, Ming-te Chao, Keith Drage, Norm Glaude, Nikhil Jain,\n\
    \   Bernard Kuc, Ming Lin, Stephen Lorusso, John Loughney, Barry\n   Nagelberg,\
    \ Neil Olson, Lyndon Ong, Heinz Prantner, Jose Luis Jimenez\n   Ramirez, Ian Rytina,\
    \ Michael Tuexen, and Hank Wang for their valuable\n   comments and suggestions.\n"
- title: 10.   References
  contents:
  - '10.   References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [1]  ITU-T Recommendation Q.920, 'Digital Subscriber\
    \ signaling System\n        No. 1 (DSS1) - ISDN User-Network Interface Data Link\
    \ Layer -\n        General Aspects'\n   [2]  Coded Character Set--7-Bit American\
    \ Standard Code for\n        Information Interchange, ANSI X3.4-1986.\n   [3]\
    \  Loughney, J., Tuexen, M., and J. Pastor-Balbas, \"Security\n        Considerations\
    \ for Signaling Transport (SIGTRAN) Protocols\", RFC\n        3788, June 2004.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [4]  Stewart, R., Xie, Q., Morneault, K., Sharp,\
    \ C., Schwarzbauer,\n        H., Taylor, T., Rytina, I., Kalla, M., Zhang, L.,\
    \ and V. Paxson,\n        \"Stream Control Transmission Protocol\", RFC 2960,\
    \ October 2000.\n   [5]  Ong, L., Rytina, I., Garcia, M., Schwarzbauer, H., Coene,\
    \ L.,\n        Lin, H., Juhasz, I., Holdrege, M., and C. Sharp, \"Framework\n\
    \        Architecture for Signaling Transport\", RFC 2719, October 1999.\n   [6]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [7]  Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an IANA\n        Considerations Section in RFCs\", BCP 26, RFC 2434,\
    \ October 1998.\n   [8]  Stone, J., Stewart, R., and D. Otis, \"Stream Control\n\
    \        Transmission Protocol (SCTP) Checksum Change\", RFC 3309,\n        September\
    \ 2002.\n"
- title: 11.  Change Log
  contents:
  - "11.  Change Log\n   Below is a list of the major changes between this document\
    \ and RFC\n   3057.\n   1.  The TEI Query message was added.\n   2.  An explanation\
    \ of the DLCI format (shown in Figure 6) is\n       provided.\n   3.  Aligned\
    \ the ASP and AS procedures in Section 4 with RFC3331 and\n       RFC3332.\n \
    \  4.  Alinged the format of the ASPSM and ASPTM messages with RFC3331\n     \
    \  and RFC3332.  These changes include removing the Reason field\n       from\
    \ the ASP Down and ASP Down Ack messages and the Traffic Mode\n       Type field\
    \ from the ASP Inactive and ASP Inactive Ack messages.\n   5.  Sections 1.3.3\
    \ and 1.3.4 were moved to Appendix A.  A new section\n       was added in place\
    \ of Section 1.3.3.\n   6.  The references have been split between Normative and\
    \ Informative.\n   7.  The new Sigtran security document is referenced and Section\
    \ 6 has\n       been updated appropriately.\n"
- title: Appendix A
  contents:
  - 'Appendix A

    '
- title: A.1.  Signaling Network Architecture
  contents:
  - "A.1.  Signaling Network Architecture\n   A Signaling Gateway is used to support\
    \ the transport of Q.921-User\n   signaling traffic to one or more distributed\
    \ ASPs (e.g., MGCs).\n   Clearly, the IUA protocol is not designed to meet the\
    \ performance and\n   reliability requirements for such transport by itself. \
    \ However, the\n   conjunction of distributed architecture and redundant networks\
    \ does\n   allow for a sufficiently reliable transport of signaling traffic over\n\
    \   IP.  The IUA protocol is flexible enough to allow its operation and\n   management\
    \ in a variety of physical configurations, enabling Network\n   Operators to meet\
    \ their performance and reliability requirements.\n   To meet the ISDN signaling\
    \ reliability and performance requirements\n   for carrier grade networks, Network\
    \ Operators SHOULD ensure that\n   there is no single point of failure provisioned\
    \ in the end-to-end\n   network architecture between an ISDN node and an IP ASP.\n\
    \   Depending of course on the reliability of the SG and ASP functional\n   elements,\
    \ this can typically be met by the provision of redundant\n   Quality of Service\
    \ (QoS)-bounded IP network paths for SCTP\n   Associations between SCTP End Points,\
    \ and redundant Hosts, and\n   redundant SGs.  The distribution of ASPs within\
    \ the available Hosts\n   is also important.  For a particular Application Server,\
    \ the related\n   ASPs SHOULD be distributed over at least two Hosts.\n   An example\
    \ logical network architecture relevant to carrier-grade\n   operation in the\
    \ IP network domain is shown in Figure 8 below:\n                            \
    \                              Host1\n     ********                          \
    \               **************\n     *      *_________________________________________*\
    \  ********  *\n     *      *                                _________*  * ASP1\
    \ *  *\n     *  SG1 *   SCTP Associations           |         *  ********  *\n\
    \     *      *_______________________        |         *            *\n     ********\
    \                       |       |         **************\n                   \
    \                 |       |\n     ********                       |       |\n \
    \    *      *_______________________________|\n     *      *                 \
    \      |\n     *  SG2 *    SCTP Associations  |\n     *      *____________   \
    \        |\n     *      *            |          |                     Host2\n\
    \     ********            |          |                 **************\n      \
    \                   |          |_________________*  ********  *\n            \
    \             |____________________________*  * ASP1 *  *\n                  \
    \                                    *  ********  *\n                        \
    \                              *            *\n                              \
    \                        **************\n                                    \
    \                          .\n                                               \
    \               .\n                                                          \
    \    .\n                      Figure 8.  Logical Model Example\n   For carrier-grade\
    \ networks, the failure or isolation of a particular\n   ASP SHOULD NOT cause\
    \ stable calls to be dropped.  This implies that\n   ASPs need, in some cases,\
    \ to share the call state or be able to pass\n   the call state between each other.\
    \  However, this sharing or\n   communication of call state information is outside\
    \ the scope of this\n   document.\n"
- title: A.2.  Application Server Process Redundancy
  contents:
  - "A.2.  Application Server Process Redundancy\n   To avoid a single point of failure,\
    \ it is recommended that a minimum\n   of two ASPs be in the list, resident in\
    \ separate hosts and therefore\n   available over different SCTP Associations.\
    \  For example, in the\n   network shown in Figure 8, all messages from a particular\
    \ D Channel\n   (Interface Identifier) could be sent to ASP1 in Host1 or ASP1\
    \ in\n   Host2.  The AS list at SG1 might look like the following:\n      Interface\
    \ Identifier(s) - Application Server #1\n          ASP1/Host1  - State=Up, Active\n\
    \          ASP1/Host2  - State=Up, Inactive\n   In this 1+1 redundancy case, ASP1\
    \ in Host1 would be sent any incoming\n   message for the Interface Identifiers\
    \ registered.  ASP1 in Host2\n   would normally be brought to the active state\
    \ upon failure of, or\n   loss of connectivity to, ASP1/Host1.  In this example,\
    \ both ASPs are\n   Up, meaning that the related SCTP association and far-end\
    \ IUA peer\n   are ready.\n   The AS List at SG1 might also be set up in load-share\
    \ mode as shown\n   below:\n      Interface Identifier(s) - Application Server\
    \ #1\n          ASP1/Host1 - State=Up, Active\n          ASP1/Host2 - State=Up,\
    \ Active\n   In this case, both the ASPs would be sent a portion of the traffic.\n\
    \   In the process of fail-over, it is recommended that in the case of\n   ASPs\
    \ supporting call processing, stable calls do not get released.\n   It is possible\
    \ that calls in transition MAY fail, although measures\n   of communication between\
    \ the ASPs involved can be used to mitigate\n   this problem.  For example, the\
    \ two ASPs MAY share call state via\n   shared memory, or MAY use an ASP-to-ASP\
    \ protocol to pass call state\n   information.  The ASP-to-ASP protocol is outside\
    \ the scope of this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ken Morneault\n   Cisco Systems Inc.\n   13615 Dulles\
    \ Technology Drive\n   Herndon, VA. 20171\n   USA\n   Phone: +1-703-484-3323\n\
    \   EMail: kmorneau@cisco.com\n   Malleswar Kalla\n   Telcordia Technologies\n\
    \   PYA 2J-341\n   3 Corporate Place\n   Piscataway, NJ 08854\n   USA\n   Phone:\
    \ +1-732-699-3728\n   EMail: mkalla@telcordia.com\n   Selvam Rengasami\n   Tridea\
    \ Works\n   Phone: +1-732-512-0969\n   EMail: selvam@trideaworks.com\n   Greg\
    \ Sidebottom\n   Signatus Technologies\n   Kanata, Ontario, Canada\n   EMail:\
    \ greg@signatustechnologies.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
