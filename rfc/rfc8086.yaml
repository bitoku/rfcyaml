- title: __initial_text__
  contents:
  - '                        GRE-in-UDP Encapsulation

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a method of encapsulating network protocol\n\
    \   packets within GRE and UDP headers.  This GRE-in-UDP encapsulation\n   allows\
    \ the UDP source port field to be used as an entropy field.\n   This may be used\
    \ for load-balancing of GRE traffic in transit\n   networks using existing Equal-Cost\
    \ Multipath (ECMP) mechanisms.\n   There are two applicability scenarios for GRE-in-UDP\
    \ with different\n   requirements: (1) general Internet and (2) a traffic-managed\n\
    \   controlled environment.  The controlled environment has less\n   restrictive\
    \ requirements than the general Internet.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8086.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................5\n  \
    \    1.2. Requirements Language ......................................5\n   2.\
    \ Applicability Statement .........................................6\n      2.1.\
    \ GRE-in-UDP Tunnel Requirements .............................6\n           2.1.1.\
    \ Requirements for Default GRE-in-UDP Tunnel ..........7\n           2.1.2. Requirements\
    \ for TMCE GRE-in-UDP Tunnel .............8\n   3. GRE-in-UDP Encapsulation ........................................9\n\
    \      3.1. IP Header .................................................11\n  \
    \    3.2. UDP Header ................................................11\n    \
    \       3.2.1. Source Port ........................................11\n      \
    \     3.2.2. Destination Port ...................................11\n        \
    \   3.2.3. Checksum ...........................................12\n          \
    \ 3.2.4. Length .............................................12\n      3.3. GRE\
    \ Header ................................................12\n   4. Encapsulation\
    \ Procedures .......................................13\n      4.1. MTU and Fragmentation\
    \ .....................................13\n      4.2. Differentiated Services\
    \ and ECN Marking ...................14\n   5. Use of DTLS ....................................................14\n\
    \   6. UDP Checksum Handling ..........................................15\n  \
    \    6.1. UDP Checksum with IPv4 ....................................15\n    \
    \  6.2. UDP Checksum with IPv6 ....................................15\n   7. Middlebox\
    \ Considerations .......................................18\n      7.1. Middlebox\
    \ Considerations for Zero Checksums ...............19\n   8. Congestion Considerations\
    \ ......................................19\n   9. Backward Compatibility .........................................20\n\
    \   10. IANA Considerations ...........................................21\n  \
    \ 11. Security Considerations .......................................21\n   12.\
    \ References ....................................................22\n      12.1.\
    \ Normative References .....................................22\n      12.2. Informative\
    \ References ...................................23\n   Acknowledgements ..................................................25\n\
    \   Contributors ......................................................25\n  \
    \ Authors' Addresses ................................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies a generic GRE-in-UDP encapsulation\
    \ for\n   tunneling network protocol packets across an IP network based on\n \
    \  Generic Routing Encapsulation (GRE) [RFC2784] [RFC7676] and User\n   Datagram\
    \ Protocol (UDP) [RFC768] headers.  The GRE header indicates\n   the payload protocol\
    \ type via an EtherType [RFC7042] in the protocol\n   type field, and the source\
    \ port field in the UDP header may be used\n   to provide additional entropy.\n\
    \   A GRE-in-UDP tunnel offers the possibility of better performance for\n   load-balancing\
    \ GRE traffic in transit networks using existing Equal-\n   Cost Multipath (ECMP)\
    \ mechanisms that use a hash of the five-tuple of\n   source IP address, destination\
    \ IP address, UDP/TCP source port,\n   UDP/TCP destination port, and protocol\
    \ number.  While such hashing\n   distributes UDP and TCP [RFC793] traffic between\
    \ a common pair of IP\n   addresses across paths, it uses a single path for corresponding\
    \ GRE\n   traffic because only the two IP addresses and the Protocol or Next\n\
    \   Header field participate in the ECMP hash.  Encapsulating GRE in UDP\n   enables\
    \ use of the UDP source port to provide entropy to ECMP\n   hashing.\n   In addition,\
    \ GRE-in-UDP enables extending use of GRE across networks\n   that otherwise disallow\
    \ it; for example, GRE-in-UDP may be used to\n   bridge two islands where GRE\
    \ is not supported natively across the\n   middleboxes.\n   GRE-in-UDP encapsulation\
    \ may be used to encapsulate already tunneled\n   traffic, i.e., tunnel-in-tunnel\
    \ traffic.  In this case, GRE-in-UDP\n   tunnels treat the endpoints of the outer\
    \ tunnel as the end hosts; the\n   presence of an inner tunnel does not change\
    \ the outer tunnel's\n   handling of network traffic.\n   A GRE-in-UDP tunnel\
    \ is capable of carrying arbitrary traffic and\n   behaves as a UDP application\
    \ on an IP network.  However, a GRE-in-UDP\n   tunnel carrying certain types of\
    \ traffic does not satisfy the\n   requirements for UDP applications on the Internet\
    \ [RFC8085].\n   GRE-in-UDP tunnels that do not satisfy these requirements MUST\
    \ NOT be\n   deployed to carry such traffic over the Internet.  For this reason,\n\
    \   this document specifies two deployment scenarios for GRE-in-UDP\n   tunnels\
    \ with GRE-in-UDP tunnel requirements for each of them: (1)\n   general Internet\
    \ and (2) a traffic-managed controlled environment\n   (TMCE).  Compared to the\
    \ general Internet scenario, the TMCE scenario\n   has less restrictive technical\
    \ requirements for the protocol but more\n   restrictive management and operation\
    \ requirements for the network.\n   To provide security for traffic carried by\
    \ a GRE-in-UDP tunnel, this\n   document also specifies Datagram Transport Layer\
    \ Security (DTLS) for\n   GRE-in-UDP tunnels, which SHOULD be used when security\
    \ is a concern.\n   GRE-in-UDP encapsulation usage requires no changes to the\
    \ transit IP\n   network.  ECMP hash functions in most existing IP routers may\
    \ utilize\n   and benefit from the additional entropy enabled by GRE-in-UDP tunnels\n\
    \   without any change or upgrade to their ECMP implementation.  The\n   encapsulation\
    \ mechanism is applicable to a variety of IP networks\n   including Data Center\
    \ Networks and Wide Area Networks, as well as\n   both IPv4 and IPv6 networks.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The terms defined in [RFC768] and [RFC2784] are used in\
    \ this\n   document.  Below are additional terms used in this document.\n   Decapsulator:\
    \ a component performing packet decapsulation at tunnel\n   egress.\n   ECMP:\
    \ Equal-Cost Multipath.\n   Encapsulator: a component performing packet encapsulation\
    \ at tunnel\n   egress.\n   Flow Entropy: The information to be derived from traffic\
    \ or\n   applications and to be used by network devices in the ECMP process\n\
    \   [RFC6438].\n   Default GRE-in-UDP Tunnel: A GRE-in-UDP tunnel that can apply\
    \ to the\n   general Internet.\n   TMCE: A traffic-managed controlled environment,\
    \ i.e., an IP network\n   that is traffic-engineered and/or otherwise managed\
    \ (e.g., via use of\n   traffic rate limiters) to avoid congestion, as defined\
    \ in Section 2.\n   TMCE GRE-in-UDP Tunnel: A GRE-in-UDP tunnel that can only\
    \ apply to a\n   traffic-managed controlled environment that is defined in Section\
    \ 2.\n   Tunnel Egress: A tunnel endpoint that performs packet decapsulation.\n\
    \   Tunnel Ingress: A tunnel endpoint that performs packet encapsulation.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Applicability Statement
  contents:
  - "2.  Applicability Statement\n   GRE-in-UDP encapsulation applies to IPv4 and\
    \ IPv6 networks; in both\n   cases, encapsulated packets are treated as UDP datagrams.\
    \  Therefore,\n   a GRE-in-UDP tunnel needs to meet the UDP usage requirements\n\
    \   specified in [RFC8085].  These requirements depend on both the\n   delivery\
    \ network and the nature of the encapsulated traffic.  For\n   example, the GRE-in-UDP\
    \ tunnel protocol does not provide any\n   congestion control functionality beyond\
    \ that of the encapsulated\n   traffic.  Therefore, a GRE-in-UDP tunnel MUST be\
    \ used only with\n   congestion-controlled traffic (e.g., IP unicast traffic)\
    \ and/or\n   within a network that is traffic managed to avoid congestion.\n \
    \  [RFC8085] describes two applicability scenarios for UDP applications:\n   (1)\
    \ general internet and (2) a controlled environment.  The\n   controlled environment\
    \ means a single administrative domain or\n   bilaterally agreed connection between\
    \ domains.  A network forming a\n   controlled environment can be managed/operated\
    \ to meet certain\n   conditions, while the general Internet cannot be; thus,\
    \ the\n   requirements for a tunnel protocol operating under a controlled\n  \
    \ environment can be less restrictive than the requirements in the\n   general\
    \ Internet.\n   For the purpose of this document, a traffic-managed controlled\n\
    \   environment (TMCE) is defined as an IP network that is traffic-\n   engineered\
    \ and/or otherwise managed (e.g., via use of traffic rate\n   limiters) to avoid\
    \ congestion.\n   This document specifies GRE-in-UDP tunnel usage in the general\n\
    \   Internet and GRE-in-UDP tunnel usage in a traffic-managed controlled\n   environment\
    \ and uses \"default GRE-in-UDP tunnel\" and \"TMCE GRE-in-UDP\n   tunnel\" terms\
    \ to refer to each usage.\n   NOTE: Although this document specifies two different\
    \ sets of GRE-in-\n   UDP tunnel requirements based on tunnel usage, the tunnel\n\
    \   implementation itself has no ability to detect how and where it is\n   deployed.\
    \  Therefore, it is the responsibility of the user or\n   operator who deploys\
    \ a GRE-in-UDP tunnel to ensure that it meets the\n   appropriate requirements.\n"
- title: 2.1.  GRE-in-UDP Tunnel Requirements
  contents:
  - "2.1.  GRE-in-UDP Tunnel Requirements\n   This section states the requirements\
    \ for a GRE-in-UDP tunnel.\n   Section 2.1.1 describes the requirements for a\
    \ default GRE-in-UDP\n   tunnel that is suitable for the general Internet; Section\
    \ 2.1.2\n   describes a set of relaxed requirements for a TMCE GRE-in-UDP tunnel\n\
    \   used in a traffic-managed controlled environment.  Both Sections\n   2.1.1\
    \ and 2.1.2 are applicable to an IPv4 or IPv6 delivery network.\n"
- title: 2.1.1.  Requirements for Default GRE-in-UDP Tunnel
  contents:
  - "2.1.1.  Requirements for Default GRE-in-UDP Tunnel\n   The following is a summary\
    \ of the default GRE-in-UDP tunnel\n   requirements:\n   1.  A UDP checksum SHOULD\
    \ be used when encapsulating in IPv4.\n   2.  A UDP checksum MUST be used when\
    \ encapsulating in IPv6.\n   3.  GRE-in-UDP tunnel MUST NOT be deployed or configured\
    \ to carry\n       traffic that is not congestion controlled.  As stated in\n\
    \       [RFC8085], IP-based unicast traffic is generally assumed to be\n     \
    \  congestion controlled, i.e., it is assumed that the transport\n       protocols\
    \ generating IP-based traffic at the sender already\n       employ mechanisms\
    \ that are sufficient to address congestion on\n       the path.  A default GRE-in-UDP\
    \ tunnel is not appropriate for\n       traffic that is not known to be congestion\
    \ controlled (e.g., most\n       IP multicast traffic).\n   4.  UDP source port\
    \ values that are used as a source of flow entropy\n       SHOULD be chosen from\
    \ the ephemeral port range (49152-65535)\n       [RFC8085].\n   5.  The use of\
    \ the UDP source port MUST be configurable so that a\n       single value can\
    \ be set for all traffic within the tunnel (this\n       disables use of the UDP\
    \ source port to provide flow entropy).\n       When a single value is set, a\
    \ random port taken from the\n       ephemeral port range SHOULD be selected in\
    \ order to minimize the\n       vulnerability to off-path attacks [RFC6056].\n\
    \   6.  For IPv6 delivery networks, the flow entropy SHOULD also be\n       placed\
    \ in the flow label field for ECMP per [RFC6438].\n   7.  At the tunnel ingress,\
    \ any fragmentation of the incoming packet\n       (e.g., because the tunnel has\
    \ a Maximum Transmission Unit (MTU)\n       that is smaller than the packet) SHOULD\
    \ be performed before\n       encapsulation.  In addition, the tunnel ingress\
    \ MUST apply the\n       UDP checksum to all encapsulated fragments so that the\
    \ tunnel\n       egress can validate reassembly of the fragments; it MUST set\
    \ the\n       same Differentiated Services Code Point (DSCP) value as in the\n\
    \       Differentiated Services (DS) field of the payload packet in all\n    \
    \   fragments [RFC2474].  To avoid unwanted forwarding over multiple\n       paths,\
    \ the same source UDP port value SHOULD be set in all packet\n       fragments.\n"
- title: 2.1.2.  Requirements for TMCE GRE-in-UDP Tunnel
  contents:
  - "2.1.2.  Requirements for TMCE GRE-in-UDP Tunnel\n   The section contains the\
    \ TMCE GRE-in-UDP tunnel requirements.  It\n   lists the changed requirements,\
    \ compared with a Default GRE-in-UDP\n   tunnel, for a TMCE GRE-in-UDP tunnel,\
    \ which corresponds to\n   requirements 1-3 listed in Section 2.1.1.\n   1.  A\
    \ UDP checksum SHOULD be used when encapsulating in IPv4.  A\n       tunnel endpoint\
    \ sending GRE-in-UDP MAY disable the UDP checksum,\n       since GRE has been\
    \ designed to work without a UDP checksum\n       [RFC2784].  However, a checksum\
    \ also offers protection from\n       misdelivery to another port.\n   2.  Use\
    \ of the UDP checksum MUST be the default when encapsulating in\n       IPv6.\
    \  This default MAY be overridden via configuration of UDP\n       zero-checksum\
    \ mode.  All usage of UDP zero-checksum mode with\n       IPv6 is subject to the\
    \ additional requirements specified in\n       Section 6.2.\n   3.  A GRE-in-UDP\
    \ tunnel MAY encapsulate traffic that is not\n       congestion controlled.\n\
    \   Requirements 4-7 listed in Section 2.1.1 also apply to a TMCE GRE-in-\n  \
    \ UDP tunnel.\n"
- title: 3.  GRE-in-UDP Encapsulation
  contents:
  - "3.  GRE-in-UDP Encapsulation\n   The GRE-in-UDP encapsulation format contains\
    \ a UDP header [RFC768]\n   and a GRE header [RFC2890].  The format is shown as\
    \ follows\n   (presented in bit order):\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   IPv4 Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version|  IHL  |Type of Service|          Total Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Identification        |Flags|      Fragment Offset    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Time to Live | Prot.=17(UDP) |          Header Checksum      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Source IPv4 Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Destination IPv4 Address                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   UDP Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Source Port = Entropy Value  |  Dest. Port = 4754/4755       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           UDP Length          |        UDP Checksum           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   GRE Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |C| |K|S| Reserved0       | Ver |         Protocol Type         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Checksum (optional)      |       Reserved1 (Optional)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Key (optional)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Sequence Number (optional)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 1: UDP + GRE Headers in IPv4\n    0                 \
    \  1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   IPv6 Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version| Traffic Class |           Flow Label                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Payload Length        | NxtHdr=17(UDP)|   Hop Limit   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \       Outer Source IPv6 Address                 +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \    Outer Destination IPv6 Address               +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   UDP Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Source Port = entropy value  |  Dest. Port = 4754/4755       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           UDP Length          |        UDP Checksum           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   GRE Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |C| |K|S| Reserved0       | Ver |         Protocol Type         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      Checksum (optional)      |       Reserved1 (Optional)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Key (optional)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Sequence Number (optional)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 2: UDP + GRE Headers in IPv6\n   The contents of the\
    \ IP, UDP, and GRE headers that are relevant in\n   this encapsulation are described\
    \ below.\n"
- title: 3.1.  IP Header
  contents:
  - "3.1.  IP Header\n   An encapsulator MUST encode its own IP address as the source\
    \ IP\n   address and the decapsulator's IP address as the destination IP\n   address.\
    \  A sufficiently large value is needed in the IPv4 TTL field\n   or IPv6 Hop\
    \ Count field to allow delivery of the encapsulated packet\n   to the peer of\
    \ the encapsulation.\n"
- title: 3.2.  UDP Header
  contents:
  - '3.2.  UDP Header

    '
- title: 3.2.1.  Source Port
  contents:
  - "3.2.1.  Source Port\n   GRE-in-UDP permits the UDP source port value to be used\
    \ to encode an\n   entropy value.  The UDP source port contains a 16-bit entropy\
    \ value\n   that is generated by the encapsulator to identify a flow for the\n\
    \   encapsulated packet.  The port value SHOULD be within the ephemeral\n   port\
    \ range, i.e., 49152 to 65535, where the high-order two bits of\n   the port are\
    \ set to one.  This provides fourteen bits of entropy for\n   the inner flow identifier.\
    \  In the case that an encapsulator is\n   unable to derive flow entropy from\
    \ the payload header or the entropy\n   usage has to be disabled to meet operational\
    \ requirements (see\n   Section 7), to avoid reordering with a packet flow, the\
    \ encapsulator\n   SHOULD use the same UDP source port value for all packets assigned\
    \ to\n   a flow, e.g., the result of an algorithm that performs a hash of the\n\
    \   tunnel ingress and egress IP address.\n   The source port value for a flow\
    \ set by an encapsulator MAY change\n   over the lifetime of the encapsulated\
    \ flow.  For instance, an\n   encapsulator may change the assignment for Denial-of-Service\
    \ (DoS)\n   mitigation or as a means to effect routing through the ECMP network.\n\
    \   An encapsulator SHOULD NOT change the source port selected for a flow\n  \
    \ more than once every thirty seconds.\n   An IPv6 GRE-in-UDP tunnel endpoint\
    \ SHOULD copy a flow entropy value\n   in the IPv6 flow label field (requirement\
    \ 6).  This permits network\n   equipment to inspect this value and utilize it\
    \ during forwarding,\n   e.g., to perform ECMP [RFC6438].\n   This document places\
    \ requirements on the generation of the flow\n   entropy value [RFC8085] but does\
    \ not specify the algorithm that an\n   implementation should use to derive this\
    \ value.\n"
- title: 3.2.2.  Destination Port
  contents:
  - "3.2.2.  Destination Port\n   The destination port of the UDP header is set to\
    \ either GRE-in-UDP\n   (4754) or GRE-UDP-DTLS (4755); see Section 5.\n"
- title: 3.2.3.  Checksum
  contents:
  - "3.2.3.  Checksum\n   The UDP checksum is set and processed per [RFC768] and [RFC1122]\
    \ for\n   IPv4 and per [RFC2460] for IPv6.  Requirements for checksum handling\n\
    \   and use of zero UDP checksums are detailed in Section 6.\n"
- title: 3.2.4.  Length
  contents:
  - "3.2.4.  Length\n   The usage of this field is in accordance with the current\
    \ UDP\n   specification in [RFC768].  This length will include the UDP header\n\
    \   (eight bytes), GRE header, and the GRE payload (encapsulated packet).\n"
- title: 3.3.  GRE Header
  contents:
  - "3.3.  GRE Header\n   An encapsulator sets the protocol type (EtherType) of the\
    \ packet\n   being encapsulated in the GRE Protocol Type field.\n   An encapsulator\
    \ MAY set the GRE Key Present, Sequence Number Present,\n   and Checksum Present\
    \ bits and associated fields in the GRE header as\n   defined by [RFC2784] and\
    \ [RFC2890].  Usage of the reserved bits,\n   i.e., Reserved0, is specified in\
    \ [RFC2784].\n   The GRE checksum MAY be enabled to protect the GRE header and\n\
    \   payload.  When the UDP checksum is enabled, it protects the GRE\n   payload,\
    \ resulting in the GRE checksum being mostly redundant.\n   Enabling both checksums\
    \ may result in unnecessary processing.  Since\n   the UDP checksum covers the\
    \ pseudo-header and the packet payload,\n   including the GRE header and its payload,\
    \ the UDP checksum SHOULD be\n   used in preference to the GRE checksum.\n   An\
    \ implementation MAY use the GRE Key field to authenticate the\n   encapsulator.\
    \  (See the Security Considerations section.)  In this\n   model, a shared value\
    \ is either configured or negotiated between an\n   encapsulator and decapsulator.\
    \  When a decapsulator determines that a\n   presented key is not valid for the\
    \ source, the packet MUST be\n   dropped.\n   Although the GRE-in-UDP encapsulation\
    \ protocol uses both the UDP\n   header and GRE header, it is one tunnel encapsulation\
    \ protocol.  The\n   GRE and UDP headers MUST be applied and removed as a pair\
    \ at the\n   encapsulation and decapsulation points.  This specification does\
    \ not\n   support UDP encapsulation of a GRE header where that GRE header is\n\
    \   applied or removed at a network node other than the UDP tunnel\n   ingress\
    \ or egress.\n"
- title: 4.  Encapsulation Procedures
  contents:
  - "4.  Encapsulation Procedures\n   The procedures specified in this section apply\
    \ to both a default GRE-\n   in-UDP tunnel and a TMCE GRE-in-UDP tunnel.\n   The\
    \ GRE-in-UDP encapsulation allows encapsulated packets to be\n   forwarded through\
    \ \"GRE-in-UDP tunnels\".  The encapsulator MUST set\n   the UDP and GRE headers\
    \ according to Section 3.\n   Intermediate routers, upon receiving these UDP encapsulated\
    \ packets,\n   could load-balance these packets based on the hash of the five-tuple\n\
    \   of UDP packets.\n   Upon receiving these UDP encapsulated packets, the decapsulator\n\
    \   decapsulates them by removing the UDP and GRE headers and then\n   processes\
    \ them accordingly.\n   GRE-in-UDP can encapsulate traffic with unicast, IPv4\
    \ broadcast, or\n   multicast (see requirement 3 in Section 2.1.1).  However,\
    \ a default\n   GRE-in-UDP tunnel MUST NOT be deployed or configured to carry\
    \ traffic\n   that is not congestion-controlled (see requirement 3 in Section\n\
    \   2.1.1).  Entropy may be generated from the header of encapsulated\n   packets\
    \ at an encapsulator.  The mapping mechanism between the\n   encapsulated multicast\
    \ traffic and the multicast capability in the IP\n   network is transparent and\
    \ independent of the encapsulation and is\n   otherwise outside the scope of this\
    \ document.\n   To provide entropy for ECMP, GRE-in-UDP does not rely on GRE keep-\n\
    \   alive.  It is RECOMMENDED not to use GRE keep-alive in the GRE-in-UDP\n  \
    \ tunnel.  This aligns with middlebox traversal guidelines in\n   Section 3.5\
    \ of [RFC8085].\n"
- title: 4.1.  MTU and Fragmentation
  contents:
  - "4.1.  MTU and Fragmentation\n   Regarding packet fragmentation, an encapsulator/decapsulator\
    \ SHOULD\n   perform fragmentation before the encapsulation.  The size of\n  \
    \ fragments SHOULD be less than or equal to the Path MTU (PMTU)\n   associated\
    \ with the path between the GRE ingress and the GRE egress\n   tunnel endpoints\
    \ minus the GRE and UDP overhead, assuming the egress\n   MTU for reassembled\
    \ packets is larger than the PMTU.  When applying\n   payload fragmentation, the\
    \ UDP checksum MUST be used so that the\n   receiving endpoint can validate reassembly\
    \ of the fragments; the same\n   source UDP port SHOULD be used for all packet\
    \ fragments to ensure the\n   transit routers will forward the fragments on the\
    \ same path.\n   If the operator of the transit network supporting the tunnel\
    \ is able\n   to control the payload MTU size, the MTU SHOULD be configured to\n\
    \   avoid fragmentation, i.e., sufficient for the largest supported size\n   of\
    \ packet, including all additional bytes introduced by the tunnel\n   overhead\
    \ [RFC8085].\n"
- title: 4.2.  Differentiated Services and ECN Marking
  contents:
  - "4.2.  Differentiated Services and ECN Marking\n   To ensure that tunneled traffic\
    \ receives the same treatment over the\n   IP network as traffic that is not tunneled,\
    \ prior to the\n   encapsulation process, an encapsulator processes the tunneled\
    \ IP\n   packet headers to retrieve appropriate parameters for the\n   encapsulating\
    \ IP packet header such as Diffserv [RFC2983].\n   Encapsulation endpoints that\
    \ support Explicit Congestion Notification\n   (ECN) must use the method described\
    \ in [RFC6040] for ECN marking\n   propagation.  The congestion control process\
    \ is outside of the scope\n   of this document.\n   Additional information on\
    \ IP header processing is provided in\n   Section 3.1.\n"
- title: 5.  Use of DTLS
  contents:
  - "5.  Use of DTLS\n   Datagram Transport Layer Security (DTLS) [RFC6347] can be\
    \ used for\n   application security and can preserve network- and transport-layer\n\
    \   protocol information.  Specifically, if DTLS is used to secure the\n   GRE-in-UDP\
    \ tunnel, the destination port of the UDP header MUST be set\n   to the IANA-assigned\
    \ value (4755) indicating GRE-in-UDP with DTLS,\n   and that UDP port MUST NOT\
    \ be used for other traffic.  The UDP source\n   port field can still be used\
    \ to add entropy, e.g., for load-sharing\n   purposes.  DTLS applies to a default\
    \ GRE-in-UDP tunnel and a TMCE\n   GRE-in-UDP tunnel.\n   Use of DTLS is limited\
    \ to a single DTLS session for any specific\n   tunnel encapsulator/decapsulator\
    \ pair (identified by source and\n   destination IP addresses).  Both IP addresses\
    \ MUST be unicast\n   addresses -- multicast traffic is not supported when DTLS\
    \ is used.  A\n   GRE-in-UDP tunnel decapsulator that supports DTLS is expected\
    \ to be\n   able to establish DTLS sessions with multiple tunnel encapsulators,\n\
    \   and likewise a GRE-in-UDP tunnel encapsulator is expected to be able\n   to\
    \ establish DTLS sessions with multiple decapsulators.  Different\n   source and/or\
    \ destination IP addresses will be involved; see\n   Section 6.2 for discussion\
    \ of one situation where use of different\n   source IP addresses is important.\n\
    \   When DTLS is used for a GRE-in-UDP tunnel, if a packet is received\n   from\
    \ the tunnel and that packet is not protected by the DTLS session\n   or part\
    \ of DTLS negotiation (e.g., a DTLS handshake message\n   [RFC6347]), the tunnel\
    \ receiver MUST discard that packet and SHOULD\n   log that discard event and\
    \ information about the discarded packet.\n   DTLS SHOULD be used for a GRE-in-UDP\
    \ tunnel to meet security\n   requirements of the original traffic that is delivered\
    \ by a GRE-in-\n   UDP tunnel.  There are cases where no additional security is\n\
    \   required, e.g., the traffic to be encapsulated is already encrypted\n   or\
    \ the tunnel is deployed within an operationally secured network.\n   Use of DTLS\
    \ for a GRE-in-UDP tunnel requires both tunnel endpoints to\n   configure use\
    \ of DTLS.\n"
- title: 6.  UDP Checksum Handling
  contents:
  - '6.  UDP Checksum Handling

    '
- title: 6.1.  UDP Checksum with IPv4
  contents:
  - "6.1.  UDP Checksum with IPv4\n   For UDP in IPv4, when a non-zero UDP checksum\
    \ is used, the UDP\n   checksum MUST be processed as specified in [RFC768] and\
    \ [RFC1122] for\n   both transmit and receive.  The IPv4 header includes a checksum\
    \ that\n   protects against misdelivery of the packet due to corruption of IP\n\
    \   addresses.  The UDP checksum potentially provides protection against\n   corruption\
    \ of the UDP header, GRE header, and GRE payload.  Disabling\n   the use of checksums\
    \ is a deployment consideration that should take\n   into account the risk and\
    \ effects of packet corruption.\n   When a decapsulator receives a packet, the\
    \ UDP checksum field MUST be\n   processed.  If the UDP checksum is non-zero,\
    \ the decapsulator MUST\n   verify the checksum before accepting the packet. \
    \ By default, a\n   decapsulator SHOULD accept UDP packets with a zero checksum.\
    \  A node\n   MAY be configured to disallow zero checksums per [RFC1122]; this\
    \ may\n   be done selectively, for instance, disallowing zero checksums from\n\
    \   certain hosts that are known to be sending over paths subject to\n   packet\
    \ corruption.  If verification of a non-zero checksum fails, a\n   decapsulator\
    \ lacks the capability to verify a non-zero checksum, or a\n   packet with a zero\
    \ checksum was received and the decapsulator is\n   configured to disallow, the\
    \ packet MUST be dropped and an event MAY\n   be logged.\n"
- title: 6.2.  UDP Checksum with IPv6
  contents:
  - "6.2.  UDP Checksum with IPv6\n   For UDP in IPv6, the UDP checksum MUST be processed\
    \ as specified in\n   [RFC768] and [RFC2460] for both transmit and receive.\n\
    \   When UDP is used over IPv6, the UDP checksum is relied upon to\n   protect\
    \ both the IPv6 and UDP headers from corruption.  As such, a\n   default GRE-in-UDP\
    \ tunnel MUST perform UDP checksum; a TMCE GRE-in-\n   UDP tunnel MAY be configured\
    \ with UDP zero-checksum mode if the\n   traffic-managed controlled environment\
    \ or a set of closely\n   cooperating traffic-managed controlled environments\
    \ (such as by\n   network operators who have agreed to work together in order\
    \ to\n   jointly provide specific services) meet at least one of the following\n\
    \   conditions:\n   a.  It is known (perhaps through knowledge of equipment types\
    \ and\n       lower-layer checks) that packet corruption is exceptionally\n  \
    \     unlikely and where the operator is willing to take the risk of\n       undetected\
    \ packet corruption.\n   b.  It is judged through observational measurements (perhaps\
    \ of\n       historic or current traffic flows that use a non-zero checksum)\n\
    \       that the level of packet corruption is tolerably low and where\n     \
    \  the operator is willing to take the risk of undetected packet\n       corruption.\n\
    \   c.  Carrying applications that are tolerant of misdelivered or\n       corrupted\
    \ packets (perhaps through higher-layer checksum,\n       validation, and retransmission\
    \ or transmission redundancy) where\n       the operator is willing to rely on\
    \ the applications using the\n       tunnel to survive any corrupt packets.\n\
    \   The following requirements apply to a TMCE GRE-in-UDP tunnel that\n   uses\
    \ UDP zero-checksum mode:\n   a.  Use of the UDP checksum with IPv6 MUST be the\
    \ default\n       configuration of all GRE-in-UDP tunnels.\n   b.  The GRE-in-UDP\
    \ tunnel implementation MUST comply with all\n       requirements specified in\
    \ Section 4 of [RFC6936] and with\n       requirement 1 specified in Section 5\
    \ of [RFC6936].\n   c.  The tunnel decapsulator SHOULD only allow the use of UDP\
    \ zero-\n       checksum mode for IPv6 on a single received UDP Destination Port,\n\
    \       regardless of the encapsulator.  The motivation for this\n       requirement\
    \ is possible corruption of the UDP Destination Port,\n       which may cause\
    \ packet delivery to the wrong UDP port.  If that\n       other UDP port requires\
    \ the UDP checksum, the misdelivered packet\n       will be discarded.\n   d.\
    \  It is RECOMMENDED that the UDP zero-checksum mode for IPv6 is\n       only\
    \ enabled for certain selected source addresses.  The tunnel\n       decapsulator\
    \ MUST check that the source and destination IPv6\n       addresses are valid\
    \ for the GRE-in-UDP tunnel on which the packet\n       was received if that tunnel\
    \ uses UDP zero-checksum mode and\n       discard any packet for which this check\
    \ fails.\n   e.  The tunnel encapsulator SHOULD use different IPv6 addresses for\n\
    \       each GRE-in-UDP tunnel that uses UDP zero-checksum mode,\n       regardless\
    \ of the decapsulator, in order to strengthen the\n       decapsulator's check\
    \ of the IPv6 source address (i.e., the same\n       IPv6 source address SHOULD\
    \ NOT be used with more than one IPv6\n       destination address, independent\
    \ of whether that destination\n       address is a unicast or multicast address).\
    \  When this is not\n       possible, it is RECOMMENDED to use each source IPv6\
    \ address for\n       as few GRE-in-UDP tunnels that use UDP zero-checksum mode\
    \ as is\n       feasible.\n   f.  When any middlebox exists on the path of a GRE-in-UDP\
    \ tunnel, it\n       is RECOMMENDED to use the default mode, i.e., use UDP checksum,\n\
    \       to reduce the chance that the encapsulated packets will be\n       dropped.\n\
    \   g.  Any middlebox that allows the UDP zero-checksum mode for IPv6\n      \
    \ MUST comply with requirements 1 and 8-10 in Section 5 of\n       [RFC6936].\n\
    \   h.  Measures SHOULD be taken to prevent IPv6 traffic with zero UDP\n     \
    \  checksums from \"escaping\" to the general Internet; see Section 8\n      \
    \ for examples of such measures.\n   i.  IPv6 traffic with zero UDP checksums\
    \ MUST be actively monitored\n       for errors by the network operator.  For\
    \ example, the operator\n       may monitor Ethernet-layer packet error rates.\n\
    \   j.  If a packet with a non-zero checksum is received, the checksum\n     \
    \  MUST be verified before accepting the packet.  This is regardless\n       of\
    \ whether the tunnel encapsulator and decapsulator have been\n       configured\
    \ with UDP zero-checksum mode.\n   The above requirements do not change either\
    \ the requirements\n   specified in [RFC2460] as modified by [RFC6935] or the\
    \ requirements\n   specified in [RFC6936].\n   The requirement to check the source\
    \ IPv6 address in addition to the\n   destination IPv6 address and the strong\
    \ recommendation against reuse\n   of source IPv6 addresses among GRE-in-UDP tunnels\
    \ collectively\n   provide some mitigation for the absence of UDP checksum coverage\
    \ of\n   the IPv6 header.  A traffic-managed controlled environment that\n   satisfies\
    \ at least one of three conditions listed at the beginning of\n   this section\
    \ provides additional assurance.\n   A GRE-in-UDP tunnel is suitable for transmission\
    \ over lower layers in\n   the traffic-managed controlled environments that are\
    \ allowed by the\n   exceptions stated above, and the rate of corruption of the\
    \ inner IP\n   packet on such networks is not expected to increase by comparison\
    \ to\n   GRE traffic that is not encapsulated in UDP.  For these reasons, GRE-\n\
    \   in-UDP does not provide an additional integrity check except when GRE\n  \
    \ checksum is used when UDP zero-checksum mode is used with IPv6, and\n   this\
    \ design is in accordance with requirements 2, 3, and 5 specified\n   in Section\
    \ 5 of [RFC6936].\n   Generic Router Encapsulation (GRE) does not accumulate incorrect\n\
    \   transport-layer state as a consequence of GRE header corruption.  A\n   corrupt\
    \ GRE packet may result in either packet discard or packet\n   forwarding without\
    \ accumulation of GRE state.  Active monitoring of\n   GRE-in-UDP traffic for\
    \ errors is REQUIRED, as the occurrence of\n   errors will result in some accumulation\
    \ of error information outside\n   the protocol for operational and management\
    \ purposes.  This design is\n   in accordance with requirement 4 specified in\
    \ Section 5 of [RFC6936].\n   The remaining requirements specified in Section\
    \ 5 of [RFC6936] are\n   not applicable to GRE-in-UDP.  Requirements 6 and 7 do\
    \ not apply\n   because GRE does not include a control feedback mechanism.\n \
    \  Requirements 8-10 are middlebox requirements that do not apply to\n   GRE-in-UDP\
    \ tunnel endpoints.  (See Section 7.1 for further middlebox\n   discussion.)\n\
    \   It is worth mentioning that the use of a zero UDP checksum should\n   present\
    \ the equivalent risk of undetected packet corruption when\n   sending a similar\
    \ packet using GRE-in-IPv6 without UDP [RFC7676] and\n   without GRE checksums.\n\
    \   In summary, a TMCE GRE-in-UDP tunnel is allowed to use UDP zero-\n   checksum\
    \ mode for IPv6 when the conditions and requirements stated\n   above are met.\
    \  Otherwise, the UDP checksum needs to be used for IPv6\n   as specified in [RFC768]\
    \ and [RFC2460].  Use of GRE checksum is\n   RECOMMENDED when the UDP checksum\
    \ is not used.\n"
- title: 7.  Middlebox Considerations
  contents:
  - "7.  Middlebox Considerations\n   Many middleboxes read or update UDP port information\
    \ of the packets\n   that they forward.  Network Address Port Translator (NAPT)\
    \ is the\n   most commonly deployed Network Address Translation (NAT) device\n\
    \   [RFC4787].  A NAPT device establishes a NAT session to translate the\n   {private\
    \ IP address, private source port number} tuple to a {public\n   IP address, public\
    \ source port number} tuple, and vice versa, for the\n   duration of the UDP session.\
    \  This provides a UDP application with\n   the \"NAT pass-through\" function.\
    \  NAPT allows multiple internal hosts\n   to share a single public IP address.\
    \  The port number, i.e., the UDP\n   Source Port number, is used as the demultiplexer\
    \ of the multiple\n   internal hosts.  However, the above NAPT behaviors conflict\
    \ with the\n   behavior of a GRE-in-UDP tunnel that is configured to use the UDP\n\
    \   source port value to provide entropy.\n   A GRE-in-UDP tunnel is unidirectional;\
    \ the tunnel traffic is not\n   expected to be returned back to the UDP source\
    \ port values used to\n   generate entropy.  However, some middleboxes (e.g.,\
    \ firewalls) assume\n   that bidirectional traffic uses a common pair of UDP ports.\
    \  This\n   assumption also conflicts with the use of the UDP source port field\n\
    \   as entropy.\n   Hence, use of the UDP source port for entropy may impact middleboxes'\n\
    \   behavior.  If a GRE-in-UDP tunnel is expected to be used on a path\n   with\
    \ a middlebox, the tunnel can be configured either to disable use\n   of the UDP\
    \ source port for entropy or to enable middleboxes to pass\n   packets with UDP\
    \ source port entropy.\n"
- title: 7.1.  Middlebox Considerations for Zero Checksums
  contents:
  - "7.1.  Middlebox Considerations for Zero Checksums\n   IPv6 datagrams with a zero\
    \ UDP checksum will not be passed by any\n   middlebox that updates the UDP checksum\
    \ field or simply validates the\n   checksum based on [RFC2460], such as firewalls.\
    \  Changing this\n   behavior would require such middleboxes to be updated to\
    \ correctly\n   handle datagrams with zero UDP checksums.  The GRE-in-UDP\n  \
    \ encapsulation does not provide a mechanism to safely fall back to\n   using\
    \ a checksum when a path change occurs that redirects a tunnel\n   over a path\
    \ that includes a middlebox that discards IPv6 datagrams\n   with a zero UDP checksum.\
    \  In this case, the GRE-in-UDP tunnel will\n   be black-holed by that middlebox.\n\
    \   As such, when any middlebox exists on the path of a GRE-in-UDP\n   tunnel,\
    \ use of the UDP checksum is RECOMMENDED to increase the\n   probability of successful\
    \ transmission of GRE-in-UDP packets.\n   Recommended changes to allow firewalls\
    \ and other middleboxes to\n   support use of an IPv6 zero UDP checksum are described\
    \ in Section 5\n   of [RFC6936].\n"
- title: 8.  Congestion Considerations
  contents:
  - "8.  Congestion Considerations\n   Section 3.1.9 of [RFC8085] discusses the congestion\
    \ considerations\n   for design and use of UDP tunnels; this is important because\
    \ other\n   flows could share the path with one or more UDP tunnels,\n   necessitating\
    \ congestion control [RFC2914] to avoid destructive\n   interference.\n   Congestion\
    \ has potential impacts both on the rest of the network\n   containing a UDP tunnel\
    \ and on the traffic flows using the UDP\n   tunnels.  These impacts depend upon\
    \ what sort of traffic is carried\n   over the tunnel, as well as the path of\
    \ the tunnel.  The GRE-in-UDP\n   tunnel protocol does not provide any congestion\
    \ control and GRE-in-\n   UDP packets are regular UDP packets.  Therefore, a GRE-in-UDP\
    \ tunnel\n   MUST NOT be deployed to carry non-congestion-controlled traffic over\n\
    \   the Internet [RFC8085].\n   Within a TMCE network, GRE-in-UDP tunnels are\
    \ appropriate for\n   carrying traffic that is not known to be congestion controlled.\
    \  For\n   example, a GRE-in-UDP tunnel may be used to carry Multiprotocol Label\n\
    \   Switching (MPLS) traffic such as pseudowires or VPNs where specific\n   bandwidth\
    \ guarantees are provided to each pseudowire or VPN.  In such\n   cases, operators\
    \ of TMCE networks avoid congestion by careful\n   provisioning of their networks,\
    \ rate-limiting of user data traffic,\n   and traffic engineering according to\
    \ path capacity.\n   When a GRE-in-UDP tunnel carries traffic that is not known\
    \ to be\n   congestion controlled in a TMCE network, the tunnel MUST be deployed\n\
    \   entirely within that network, and measures SHOULD be taken to prevent\n  \
    \ the GRE-in-UDP traffic from \"escaping\" the network to the general\n   Internet.\
    \  Examples of such measures are:\n   o  physical or logical isolation of the\
    \ links carrying GRE-in-UDP\n      from the general Internet,\n   o  deployment\
    \ of packet filters that block the UDP ports assigned for\n      GRE-in-UDP, and\n\
    \   o  imposition of restrictions on GRE-in-UDP traffic by software tools\n  \
    \    used to set up GRE-in-UDP tunnels between specific end systems (as\n    \
    \  might be used within a single data center) or by tunnel ingress\n      nodes\
    \ for tunnels that don't terminate at end systems.\n"
- title: 9.  Backward Compatibility
  contents:
  - "9.  Backward Compatibility\n   In general, tunnel ingress routers have to be\
    \ upgraded in order to\n   support the encapsulations described in this document.\n\
    \   No change is required at transit routers to support forwarding of the\n  \
    \ encapsulation described in this document.\n   If a tunnel endpoint (a host or\
    \ router) that is intended for use as a\n   decapsulator does not support or enable\
    \ the GRE-in-UDP encapsulation\n   described in this document, that endpoint will\
    \ not listen on the\n   destination port assigned to the GRE-encapsulation (4754\
    \ and 4755).\n   In these cases, the endpoint will perform normal UDP processing\
    \ and\n   respond to an encapsulator with an ICMP message indicating \"port\n\
    \   unreachable\" according to [RFC792].  Upon receiving this ICMP\n   message,\
    \ the node MUST NOT continue to use GRE-in-UDP encapsulation\n   toward this peer\
    \ without management intervention.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA has allocated the following UDP destination\
    \ port number for the\n   indication of GRE:\n         Service Name: GRE-in-UDP\n\
    \         Transport Protocol(s): UDP\n         Assignee: IESG <iesg@ietf.org>\n\
    \         Contact: IETF Chair <chair@ietf.org>\n         Description: GRE-in-UDP\
    \ Encapsulation\n         Reference: RFC 8086\n         Port Number: 4754\n  \
    \       Service Code: N/A\n         Known Unauthorized Uses: N/A\n         Assignment\
    \ Notes: N/A\n   IANA has allocated the following UDP destination port number\
    \ for the\n   indication of GRE with DTLS:\n         Service Name: GRE-UDP-DTLS\n\
    \         Transport Protocol(s): UDP\n         Assignee: IESG <iesg@ietf.org>\n\
    \         Contact: IETF Chair <chair@ietf.org>\n         Description: GRE-in-UDP\
    \ Encapsulation with DTLS\n         Reference: RFC 8086\n         Port Number:\
    \ 4755\n         Service Code: N/A\n         Known Unauthorized Uses: N/A\n  \
    \       Assignment Notes: N/A\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   GRE-in-UDP encapsulation does not affect security\
    \ for the payload\n   protocol.  The security considerations for GRE apply to\
    \ GRE-in-UDP;\n   see [RFC2784].\n   To secure traffic carried by a GRE-in-UDP\
    \ tunnel, DTLS SHOULD be used\n   as specified in Section 5.\n   In the case that\
    \ UDP source port for entropy usage is disabled, a\n   random port taken from\
    \ the ephemeral port range SHOULD be selected in\n   order to minimize the vulnerability\
    \ to off-path attacks [RFC6056].\n   The random port may also be periodically\
    \ changed to mitigate certain\n   DoS attacks as mentioned in Section 3.2.1.\n\
    \   Using one standardized value as the UDP destination port to indicate\n   an\
    \ encapsulation may increase the vulnerability to off-path attacks.\n   To overcome\
    \ this, an alternate port may be agreed upon to use between\n   an encapsulator\
    \ and decapsulator [RFC6056].  How the encapsulator\n   endpoints communicate\
    \ the value is outside the scope of this\n   document.\n   This document does\
    \ not require that a decapsulator validate the IP\n   source address of the tunneled\
    \ packets (with the exception that the\n   IPv6 source address MUST be validated\
    \ when UDP zero-checksum mode is\n   used with IPv6), but it should be understood\
    \ that failure to do so\n   presupposes that there is effective destination-based\
    \ filtering (or a\n   combination of source-based and destination-based filtering)\
    \ at the\n   boundaries.\n   Corruption of GRE headers can cause security concerns\
    \ for\n   applications that rely on the GRE Key field for traffic separation or\n\
    \   segregation.  When the GRE Key field is used for this purpose, such\n   as\
    \ an application of a Network Virtualization Using Generic Routing\n   Encapsulation\
    \ (NVGRE) [RFC7637], GRE header corruption is a concern.\n   In such situations,\
    \ at least one of the UDP and GRE checksums MUST be\n   used for both IPv4 and\
    \ IPv6 GRE-in-UDP tunnels.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC768]   Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              DOI 10.17487/RFC0768, August 1980,\n        \
    \      <http://www.rfc-editor.org/info/rfc768>.\n   [RFC1122]  Braden, R., Ed.,\
    \ \"Requirements for Internet Hosts -\n              Communication Layers\", STD\
    \ 3, RFC 1122,\n              DOI 10.17487/RFC1122, October 1989,\n          \
    \    <http://www.rfc-editor.org/info/rfc1122>.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n           \
    \   <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2474]  Nichols, K., Blake,\
    \ S., Baker, F., and D. Black,\n              \"Definition of the Differentiated\
    \ Services Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC\
    \ 2474,\n              DOI 10.17487/RFC2474, December 1998,\n              <http://www.rfc-editor.org/info/rfc2474>.\n\
    \   [RFC2784]  Farinacci, D., Li, T., Hanks, S., Meyer, D., and P.\n         \
    \     Traina, \"Generic Routing Encapsulation (GRE)\", RFC 2784,\n           \
    \   DOI 10.17487/RFC2784, March 2000,\n              <http://www.rfc-editor.org/info/rfc2784>.\n\
    \   [RFC2890]  Dommety, G., \"Key and Sequence Number Extensions to GRE\",\n \
    \             RFC 2890, DOI 10.17487/RFC2890, September 2000,\n              <http://www.rfc-editor.org/info/rfc2890>.\n\
    \   [RFC6040]  Briscoe, B., \"Tunnelling of Explicit Congestion\n            \
    \  Notification\", RFC 6040, DOI 10.17487/RFC6040, November\n              2010,\
    \ <http://www.rfc-editor.org/info/rfc6040>.\n   [RFC6347]  Rescorla, E. and N.\
    \ Modadugu, \"Datagram Transport Layer\n              Security Version 1.2\",\
    \ RFC 6347, DOI 10.17487/RFC6347,\n              January 2012, <http://www.rfc-editor.org/info/rfc6347>.\n\
    \   [RFC6438]  Carpenter, B. and S. Amante, \"Using the IPv6 Flow Label\n    \
    \          for Equal Cost Multipath Routing and Link Aggregation in\n        \
    \      Tunnels\", RFC 6438, DOI 10.17487/RFC6438, November 2011,\n           \
    \   <http://www.rfc-editor.org/info/rfc6438>.\n   [RFC6935]  Eubanks, M., Chimento,\
    \ P., and M. Westerlund, \"IPv6 and\n              UDP Checksums for Tunneled\
    \ Packets\", RFC 6935,\n              DOI 10.17487/RFC6935, April 2013,\n    \
    \          <http://www.rfc-editor.org/info/rfc6935>.\n   [RFC6936]  Fairhurst,\
    \ G. and M. Westerlund, \"Applicability Statement\n              for the Use of\
    \ IPv6 UDP Datagrams with Zero Checksums\",\n              RFC 6936, DOI 10.17487/RFC6936,\
    \ April 2013,\n              <http://www.rfc-editor.org/info/rfc6936>.\n   [RFC8085]\
    \  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n              Guidelines\"\
    , BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n              March 2017, <http://www.rfc-editor.org/info/rfc8085>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC792]   Postel, J., \"Internet Control Message\
    \ Protocol\", STD 5,\n              RFC 792, DOI 10.17487/RFC0792, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc792>.\n   [RFC793]   Postel,\
    \ J., \"Transmission Control Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793,\
    \ September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n  \
    \ [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n     \
    \         (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n          \
    \    December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC2914]  Floyd,\
    \ S., \"Congestion Control Principles\", BCP 41,\n              RFC 2914, DOI\
    \ 10.17487/RFC2914, September 2000,\n              <http://www.rfc-editor.org/info/rfc2914>.\n\
    \   [RFC2983]  Black, D., \"Differentiated Services and Tunnels\",\n         \
    \     RFC 2983, DOI 10.17487/RFC2983, October 2000,\n              <http://www.rfc-editor.org/info/rfc2983>.\n\
    \   [RFC4787]  Audet, F., Ed., and C. Jennings, \"Network Address\n          \
    \    Translation (NAT) Behavioral Requirements for Unicast\n              UDP\"\
    , BCP 127, RFC 4787, DOI 10.17487/RFC4787, January\n              2007, <http://www.rfc-editor.org/info/rfc4787>.\n\
    \   [RFC6056]  Larsen, M. and F. Gont, \"Recommendations for Transport-\n    \
    \          Protocol Port Randomization\", BCP 156, RFC 6056,\n              DOI\
    \ 10.17487/RFC6056, January 2011,\n              <http://www.rfc-editor.org/info/rfc6056>.\n\
    \   [RFC7042]  Eastlake 3rd, D. and J. Abley, \"IANA Considerations and\n    \
    \          IETF Protocol and Documentation Usage for IEEE 802\n              Parameters\"\
    , BCP 141, RFC 7042, DOI 10.17487/RFC7042,\n              October 2013, <http://www.rfc-editor.org/info/rfc7042>.\n\
    \   [RFC7637]  Garg, P., Ed., and Y. Wang, Ed., \"NVGRE: Network\n           \
    \   Virtualization Using Generic Routing Encapsulation\",\n              RFC 7637,\
    \ DOI 10.17487/RFC7637, September 2015,\n              <http://www.rfc-editor.org/info/rfc7637>.\n\
    \   [RFC7676]  Pignataro, C., Bonica, R., and S. Krishnan, \"IPv6 Support\n  \
    \            for Generic Routing Encapsulation (GRE)\", RFC 7676,\n          \
    \    DOI 10.17487/RFC7676, October 2015,\n              <http://www.rfc-editor.org/info/rfc7676>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Vivek Kumar, Ron Bonica,\
    \ Joe Touch,\n   Ruediger Geib, Lars Eggert, Lloyd Wood, Bob Briscoe, Rick Casarez,\n\
    \   Jouni Korhonen, Kathleen Moriarty, Ben Campbell, and many others for\n   their\
    \ reviews and valuable input on this document.\n   Thanks to Donald Eastlake,\
    \ Eliot Lear, Martin Stiemerling, and\n   Spencer Dawkins for their detailed reviews\
    \ and valuable suggestions\n   during WG Last Call and the IESG process.\n   Thanks\
    \ to the design team led by David Black (members: Ross Callon,\n   Gorry Fairhurst,\
    \ Xiaohu Xu, and Lucy Yong) for efficiently working\n   out the descriptions for\
    \ the congestion considerations and IPv6 UDP\n   zero checksum.\n   Thanks to\
    \ David Black and Gorry Fairhurst for their great help in\n   document content\
    \ and editing.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people all contributed significantly to this document\n\
    \   and are listed in alphabetical order:\n   David Black\n   EMC Corporation\n\
    \   176 South Street\n   Hopkinton, MA  01748\n   United States of America\n \
    \  Email: david.black@emc.com\n   Ross Callon\n   Juniper Networks\n   10 Technology\
    \ Park Drive\n   Westford, MA  01886\n   United States of America\n   Email: rcallon@juniper.net\n\
    \   John E. Drake\n   Juniper Networks\n   Email: jdrake@juniper.net\n   Gorry\
    \ Fairhurst\n   University of Aberdeen\n   Email: gorry@erg.abdn.ac.uk\n   Yongbing\
    \ Fan\n   China Telecom\n   Guangzhou\n   China\n   Email: fanyb@gsta.com\n  \
    \ Phone: +86 20 38639121\n   Adrian Farrel\n   Juniper Networks\n   Email: adrian@olddog.co.uk\n\
    \   Vishwas Manral\n   Email: vishwas@ionosnetworks.com\n   Carlos Pignataro\n\
    \   Cisco Systems\n   7200-12 Kit Creek Road\n   Research Triangle Park, NC  27709\n\
    \   United States of America\n   Email: cpignata@cisco.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Lucy Yong\n   Huawei Technologies, USA\n   Email: lucy.yong@huawei.com\n\
    \   Edward Crabbe\n   Oracle\n   Email: edward.crabbe@gmail.com\n   Xiaohu Xu\n\
    \   Huawei Technologies\n   Beijing, China\n   Email: xuxiaohu@huawei.com\n  \
    \ Tom Herbert\n   Facebook\n   1 Hacker Way\n   Menlo Park, CA\n   Email: tom@herbertland.com\n"
