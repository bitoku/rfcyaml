- contents:
  - '                    Conformance Statements for SMIv2

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1 Introduction .....................................................3\n
    \  1.1 A Note on Terminology ..........................................3\n   2
    Definitions ......................................................3\n   2.1 The
    OBJECT-GROUP macro .........................................3\n   2.2 The NOTIFICATION-GROUP
    macro ...................................4\n   2.3 The MODULE-COMPLIANCE macro
    ....................................5\n   2.4 The AGENT-CAPABILITIES macro ...................................7\n
    \  3 Mapping of the OBJECT-GROUP macro ...............................10\n   3.1
    Mapping of the OBJECTS clause .................................10\n   3.2 Mapping
    of the STATUS clause ..................................11\n   3.3 Mapping of the
    DESCRIPTION clause .............................11\n   3.4 Mapping of the REFERENCE
    clause ...............................11\n   3.5 Mapping of the OBJECT-GROUP value
    .............................11\n   3.6 Usage Example .................................................12\n
    \  4 Mapping of the NOTIFICATION-GROUP macro .........................12\n   4.1
    Mapping of the NOTIFICATIONS clause ...........................12\n   4.2 Mapping
    of the STATUS clause ..................................13\n   4.3 Mapping of the
    DESCRIPTION clause .............................13\n   4.4 Mapping of the REFERENCE
    clause ...............................13\n   4.5 Mapping of the NOTIFICATION-GROUP
    value .......................13\n   4.6 Usage Example .................................................13\n
    \  5 Mapping of the MODULE-COMPLIANCE macro ..........................14\n   5.1
    Mapping of the STATUS clause ..................................14\n   5.2 Mapping
    of the DESCRIPTION clause .............................14\n   5.3 Mapping of the
    REFERENCE clause ...............................15\n   5.4 Mapping of the MODULE
    clause ..................................15\n   5.4.1 Mapping of the MANDATORY-GROUPS
    clause ......................15\n   5.4.2 Mapping of the GROUP clause .................................15\n
    \  5.4.3 Mapping of the OBJECT clause ................................16\n   5.4.3.1
    Mapping of the SYNTAX clause ..............................16\n   5.4.3.2 Mapping
    of the WRITE-SYNTAX clause ........................16\n   5.4.3.3 Mapping of the
    MIN-ACCESS clause ..........................16\n   5.4.4 Mapping of the DESCRIPTION
    clause ...........................17\n   5.5 Mapping of the MODULE-COMPLIANCE
    value ........................17\n   5.6 Usage Example .................................................17\n
    \  6 Mapping of the AGENT-CAPABILITIES macro .........................19\n   6.1
    Mapping of the PRODUCT-RELEASE clause .........................19\n   6.2 Mapping
    of the STATUS clause ..................................19\n   6.3 Mapping of the
    DESCRIPTION clause .............................20\n   6.4 Mapping of the REFERENCE
    clause ...............................20\n   6.5 Mapping of the SUPPORTS clause
    ................................20\n   6.5.1 Mapping of the INCLUDES clause ..............................20\n
    \  6.5.2 Mapping of the VARIATION clause .............................20\n   6.5.2.1
    Mapping of the SYNTAX clause ..............................21\n   6.5.2.2 Mapping
    of the WRITE-SYNTAX clause ........................21\n   6.5.2.3 Mapping of the
    ACCESS clause ..............................21\n   6.5.2.4 Mapping of the CREATION-REQUIRES
    clause ...................22\n   6.5.2.5 Mapping of the DEFVAL clause ..............................22\n
    \  6.5.2.6 Mapping of the DESCRIPTION clause .........................22\n   6.6
    Mapping of the AGENT-CAPABILITIES value .......................22\n   6.7 Usage
    Example .................................................23\n   7 Extending an
    Information Module .................................25\n   7.1 Conformance Groups
    ............................................25\n   7.2 Compliance Definitions
    ........................................26\n   7.3 Capabilities Definitions ......................................26\n
    \  8 Security Considerations .........................................27\n   9
    Editors' Addresses ..............................................27\n   10 References
    .....................................................28\n   11 Full Copyright
    Statement .......................................29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Management information is viewed as a collection of managed
    objects,\n   residing in a virtual information store, termed the Management\n
    \  Information Base (MIB).  Collections of related objects are defined\n   in
    MIB modules.  These modules are written using an adapted subset of\n   OSI's Abstract
    Syntax Notation One, ASN.1 (1988) [1], termed the\n   Structure of Management
    Information (SMI) [2].\n   It may be useful to define the acceptable lower-bounds
    of\n   implementation, along with the actual level of implementation\n   achieved.
    \ It is the purpose of this document to define the notation\n   used for these
    purposes.\n"
  title: 1.  Introduction
- contents:
  - "1.1.  A Note on Terminology\n   For the purpose of exposition, the original Structure
    of Management\n   Information, as described in RFCs 1156 (STD 16), 1212 (STD 16),
    and\n   RFC 1215, is termed the SMI version 1 (SMIv1).  The current version\n
    \  of the Structure of Management Information is termed SMI version 2\n   (SMIv2).\n"
  title: 1.1.  A Note on Terminology
- contents:
  - '2.  Definitions

    '
  title: 2.  Definitions
- contents:
  - 'SNMPv2-CONF DEFINITIONS ::= BEGIN

    '
  title: SNMPv2-CONF DEFINITIONS ::= BEGIN
- contents:
  - "IMPORTS ObjectName, NotificationName, ObjectSyntax\n                                               FROM
    SNMPv2-SMI;\n"
  title: IMPORTS ObjectName, NotificationName, ObjectSyntax
- contents:
  - '-- definitions for conformance groups

    '
  title: -- definitions for conformance groups
- contents:
  - 'OBJECT-GROUP MACRO ::=

    '
  title: OBJECT-GROUP MACRO ::=
- contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  ObjectsPart\n                  \"STATUS\"
    Status\n                  \"DESCRIPTION\" Text\n                  ReferPart\n
    \   VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    ObjectsPart
    ::=\n                  \"OBJECTS\" \"{\" Objects \"}\"\n    Objects ::=\n                  Object\n
    \               | Objects \",\" Object\n    Object ::=\n                  value(ObjectName)\n
    \   Status ::=\n                  \"current\"\n                | \"deprecated\"\n
    \               | \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\"
    Text\n                | empty\n    -- a character string as defined in [2]\n    Text
    ::= value(IA5String)\n"
  title: BEGIN
- contents:
  - 'END

    '
  title: END
- contents:
  - '-- more definitions for conformance groups

    '
  title: -- more definitions for conformance groups
- contents:
  - 'NOTIFICATION-GROUP MACRO ::=

    '
  title: NOTIFICATION-GROUP MACRO ::=
- contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  NotificationsPart\n                  \"STATUS\"
    Status\n                  \"DESCRIPTION\" Text\n                  ReferPart\n
    \   VALUE NOTATION ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    NotificationsPart
    ::=\n                  \"NOTIFICATIONS\" \"{\" Notifications \"}\"\n    Notifications
    ::=\n                  Notification\n                | Notifications \",\" Notification\n
    \   Notification ::=\n                  value(NotificationName)\n    Status ::=\n
    \                 \"current\"\n                | \"deprecated\"\n                |
    \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\" Text\n                |
    empty\n    -- a character string as defined in [2]\n    Text ::= value(IA5String)\n"
  title: BEGIN
- contents:
  - 'END

    '
  title: END
- contents:
  - '-- definitions for compliance statements

    '
  title: -- definitions for compliance statements
- contents:
  - 'MODULE-COMPLIANCE MACRO ::=

    '
  title: MODULE-COMPLIANCE MACRO ::=
- contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"STATUS\" Status\n                  \"DESCRIPTION\"
    Text\n                  ReferPart\n                  ModulePart\n    VALUE NOTATION
    ::=\n                  value(VALUE OBJECT IDENTIFIER)\n    Status ::=\n                  \"current\"\n
    \               | \"deprecated\"\n                | \"obsolete\"\n    ReferPart
    ::=\n                  \"REFERENCE\" Text\n                | empty\n    ModulePart
    ::=\n                  Modules\n    Modules ::=\n                  Module\n                |
    Modules Module\n    Module ::=\n                  -- name of module --\n                  \"MODULE\"
    ModuleName\n                  MandatoryPart\n                  CompliancePart\n
    \   ModuleName ::=\n                  -- identifier must start with uppercase
    letter\n                  identifier ModuleIdentifier\n                  -- must
    not be empty unless contained\n                  -- in MIB Module\n                |
    empty\n    ModuleIdentifier ::=\n                  value(OBJECT IDENTIFIER)\n
    \               | empty\n    MandatoryPart ::=\n                  \"MANDATORY-GROUPS\"
    \"{\" Groups \"}\"\n                | empty\n    Groups ::=\n                  Group\n
    \               | Groups \",\" Group\n    Group ::=\n                  value(OBJECT
    IDENTIFIER)\n    CompliancePart ::=\n                  Compliances\n                |
    empty\n    Compliances ::=\n                  Compliance\n                | Compliances
    Compliance\n    Compliance ::=\n                  ComplianceGroup\n                |
    Object\n    ComplianceGroup ::=\n                  \"GROUP\" value(OBJECT IDENTIFIER)\n
    \                 \"DESCRIPTION\" Text\n    Object ::=\n                  \"OBJECT\"
    value(ObjectName)\n                  SyntaxPart\n                  WriteSyntaxPart\n
    \                 AccessPart\n                  \"DESCRIPTION\" Text\n    -- must
    be a refinement for object's SYNTAX clause\n    SyntaxPart ::= \"SYNTAX\" Syntax\n
    \               | empty\n    -- must be a refinement for object's SYNTAX clause\n
    \   WriteSyntaxPart ::= \"WRITE-SYNTAX\" Syntax\n                | empty\n    Syntax
    ::=    -- Must be one of the following:\n                       -- a base type
    (or its refinement),\n                       -- a textual convention (or its refinement),
    or\n                       -- a BITS pseudo-type\n                  type\n                |
    \"BITS\" \"{\" NamedBits \"}\"\n    NamedBits ::= NamedBit\n                |
    NamedBits \",\" NamedBit\n    NamedBit ::= identifier \"(\" number \")\" -- number
    is nonnegative\n    AccessPart ::=\n                  \"MIN-ACCESS\" Access\n
    \               | empty\n    Access ::=\n                  \"not-accessible\"\n
    \               | \"accessible-for-notify\"\n                | \"read-only\"\n
    \               | \"read-write\"\n                | \"read-create\"\n    -- a
    character string as defined in [2]\n    Text ::= value(IA5String)\n"
  title: BEGIN
- contents:
  - 'END

    '
  title: END
- contents:
  - '-- definitions for capabilities statements

    '
  title: -- definitions for capabilities statements
- contents:
  - 'AGENT-CAPABILITIES MACRO ::=

    '
  title: AGENT-CAPABILITIES MACRO ::=
- contents:
  - "BEGIN\n    TYPE NOTATION ::=\n                  \"PRODUCT-RELEASE\" Text\n                  \"STATUS\"
    Status\n                  \"DESCRIPTION\" Text\n                  ReferPart\n
    \                 ModulePart\n    VALUE NOTATION ::=\n                  value(VALUE
    OBJECT IDENTIFIER)\n    Status ::=\n                  \"current\"\n                |
    \"obsolete\"\n    ReferPart ::=\n                  \"REFERENCE\" Text\n                |
    empty\n    ModulePart ::=\n                  Modules\n                | empty\n
    \   Modules ::=\n                  Module\n                | Modules Module\n
    \   Module ::=\n                  -- name of module --\n                  \"SUPPORTS\"
    ModuleName\n                  \"INCLUDES\" \"{\" Groups \"}\"\n                  VariationPart\n
    \   ModuleName ::=\n                  -- identifier must start with uppercase
    letter\n                  identifier ModuleIdentifier\n    ModuleIdentifier ::=\n
    \                 value(OBJECT IDENTIFIER)\n                | empty\n    Groups
    ::=\n                  Group\n                | Groups \",\" Group\n    Group
    ::=\n                  value(OBJECT IDENTIFIER)\n    VariationPart ::=\n                  Variations\n
    \               | empty\n    Variations ::=\n                  Variation\n                |
    Variations Variation\n    Variation ::=\n                  ObjectVariation\n                |
    NotificationVariation\n    NotificationVariation ::=\n                  \"VARIATION\"
    value(NotificationName)\n                  AccessPart\n                  \"DESCRIPTION\"
    Text\n    ObjectVariation ::=\n                  \"VARIATION\" value(ObjectName)\n
    \                 SyntaxPart\n                  WriteSyntaxPart\n                  AccessPart\n
    \                 CreationPart\n                  DefValPart\n                  \"DESCRIPTION\"
    Text\n    -- must be a refinement for object's SYNTAX clause\n    SyntaxPart ::=
    \"SYNTAX\" Syntax\n                | empty\n    WriteSyntaxPart ::= \"WRITE-SYNTAX\"
    Syntax\n                | empty\n    Syntax ::=    -- Must be one of the following:\n
    \                      -- a base type (or its refinement),\n                       --
    a textual convention (or its refinement), or\n                       -- a BITS
    pseudo-type\n                  type\n                | \"BITS\" \"{\" NamedBits
    \"}\"\n    NamedBits ::= NamedBit\n                | NamedBits \",\" NamedBit\n
    \   NamedBit ::= identifier \"(\" number \")\" -- number is nonnegative\n    AccessPart
    ::=\n                  \"ACCESS\" Access\n                | empty\n    Access
    ::=\n                  \"not-implemented\"\n                -- only \"not-implemented\"
    for notifications\n                | \"accessible-for-notify\"\n                |
    \"read-only\"\n                | \"read-write\"\n                | \"read-create\"\n
    \               -- following is for backward-compatibility only\n                |
    \"write-only\"\n    CreationPart ::=\n                  \"CREATION-REQUIRES\"
    \"{\" Cells \"}\"\n                | empty\n    Cells ::=\n                  Cell\n
    \               | Cells \",\" Cell\n    Cell ::=\n                  value(ObjectName)\n
    \   DefValPart ::= \"DEFVAL\" \"{\" Defvalue \"}\"\n                | empty\n
    \   Defvalue ::=  -- must be valid for the object's syntax\n                  --
    in this macro's SYNTAX clause, if present,\n                  -- or if not, in
    object's OBJECT-TYPE macro\n                  value(ObjectSyntax)\n                |
    \"{\" BitsValue \"}\"\n    BitsValue ::= BitNames\n                | empty\n    BitNames
    ::=  BitName\n                | BitNames \",\" BitName\n    BitName ::= identifier\n
    \   -- a character string as defined in [2]\n    Text ::= value(IA5String)\n"
  title: BEGIN
- contents:
  - 'END

    '
  title: END
- contents:
  - 'END

    '
  title: END
- contents:
  - "3.  Mapping of the OBJECT-GROUP macro\n   For conformance purposes, it is useful
    to define a collection of\n   related managed objects.  The OBJECT-GROUP macro
    is used to define\n   each such collection of related objects.  It should be noted
    that the\n   expansion of the OBJECT-GROUP macro is something which conceptually\n
    \  happens during implementation and not during run-time.\n   To \"implement\"
    an object, an agent must return a reasonably accurate\n   value for management
    protocol retrieval operations; similarly, if the\n   object is writable, then
    in response to a management protocol set\n   operation, an agent must accordingly
    be able to reasonably influence\n   the underlying managed entity.  If an agent
    can not implement an\n   object, the management protocol provides for it to return
    an\n   exception or error, e.g, noSuchObject [4].  Under no circumstances\n   shall
    an agent return a value for objects which it does not implement\n   -- it must
    always return the appropriate exception or error, as\n   described in the protocol
    specification [4].\n   Note that the OBJECT-GROUP macro itself provides no conformance\n
    \  information.  Rather, conformance information is specified through\n   the
    inclusion of defined groups in a MODULE-COMPLIANCE macro.\n"
  title: 3.  Mapping of the OBJECT-GROUP macro
- contents:
  - "3.1.  Mapping of the OBJECTS clause\n   The OBJECTS clause, which must be present,
    is used to specify each\n   object contained in the conformance group.  Each of
    the specified\n   objects must be defined in the same information module as the\n
    \  OBJECT-GROUP macro appears, and must have a MAX-ACCESS clause value\n   of
    \"accessible-for-notify\", \"read-only\", \"read-write\", or \"read-\n   create\".\n
    \  It is required that every object defined in an information module\n   with
    a MAX-ACCESS clause other than \"not-accessible\" be contained in\n   at least
    one object group.  This avoids the common error of adding a\n   new object to
    an information module and forgetting to add the new\n   object to a group.\n"
  title: 3.1.  Mapping of the OBJECTS clause
- contents:
  - "3.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,
    indicates whether this\n   definition is current or historic.\n   The value \"current\"
    means that the definition is current and valid.\n   The value \"obsolete\" means
    the definition is obsolete and the group\n   should no longer be used for defining
    conformance.  While the value\n   \"deprecated\" also indicates an obsolete definition,
    it permits\n   new/continued use of conformance definitions using this group.\n"
  title: 3.2.  Mapping of the STATUS clause
- contents:
  - "3.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must
    be present, contains a textual\n   definition of that group, along with a description
    of any relations\n   to other groups.  Note that generic compliance requirements
    should\n   not be stated in this clause.  However, implementation relationships\n
    \  between this group and other groups may be defined in this clause.\n"
  title: 3.3.  Mapping of the DESCRIPTION clause
- contents:
  - "3.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not
    be present, contains a textual\n   cross-reference to some other document, either
    another information\n   module which defines a related assignment, or some other
    document\n   which provides additional information relevant to this definition.\n"
  title: 3.4.  Mapping of the REFERENCE clause
- contents:
  - "3.5.  Mapping of the OBJECT-GROUP value\n   The value of an invocation of the
    OBJECT-GROUP macro is the name of\n   the group, which is an OBJECT IDENTIFIER,
    an administratively\n   assigned name.\n"
  title: 3.5.  Mapping of the OBJECT-GROUP value
- contents:
  - "3.6.  Usage Example\n   The SNMP Group [3] is described:\n   snmpGroup OBJECT-GROUP\n
    \      OBJECTS { snmpInPkts,\n                 snmpInBadVersions,\n                 snmpInASNParseErrs,\n
    \                snmpBadOperations,\n                 snmpSilentDrops,\n                 snmpProxyDrops,\n
    \                snmpEnableAuthenTraps }\n       STATUS  current\n       DESCRIPTION\n
    \              \"A collection of objects providing basic instrumentation\n               and
    control of an agent.\"\n      ::= { snmpMIBGroups 8 }\n   According to this invocation,
    the conformance group named\n        { snmpMIBGroups 8 }\n   contains 7 objects.\n"
  title: 3.6.  Usage Example
- contents:
  - "4.  Mapping of the NOTIFICATION-GROUP macro\n   For conformance purposes, it
    is useful to define a collection of\n   notifications.  The NOTIFICATION-GROUP
    macro serves this purpose.  It\n   should be noted that the expansion of the NOTIFICATION-GROUP
    macro is\n   something which conceptually happens during implementation and not\n
    \  during run-time.\n"
  title: 4.  Mapping of the NOTIFICATION-GROUP macro
- contents:
  - "4.1.  Mapping of the NOTIFICATIONS clause\n   The NOTIFICATIONS clause, which
    must be present, is used to specify\n   each notification contained in the conformance
    group.  Each of the\n   specified notifications must be defined in the same information\n
    \  module as the NOTIFICATION-GROUP macro appears.\n   It is required that every
    notification defined in an information\n   module be contained in at least one
    notification group.\n"
  title: 4.1.  Mapping of the NOTIFICATIONS clause
- contents:
  - "4.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,
    indicates whether this\n   definition is current or historic.\n   The value \"current\"
    means that the definition is current and valid.\n   The value \"obsolete\" means
    the definition is obsolete and this group\n   should no longer be used for defining
    conformance.  While the value\n   \"deprecated\" also indicates an obsolete definition,
    it permits\n   new/continued use of conformance definitions using this group.\n"
  title: 4.2.  Mapping of the STATUS clause
- contents:
  - "4.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must
    be present, contains a textual\n   definition of the group, along with a description
    of any relations to\n   other groups.  Note that generic compliance requirements
    should not\n   be stated in this clause.  However, implementation relationships\n
    \  between this group and other groups may be defined in this clause.\n"
  title: 4.3.  Mapping of the DESCRIPTION clause
- contents:
  - "4.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not
    be present, contains a textual\n   cross-reference to some other document, either
    another information\n   module which defines a related assignment, or some other
    document\n   which provides additional information relevant to this definition.\n"
  title: 4.4.  Mapping of the REFERENCE clause
- contents:
  - "4.5.  Mapping of the NOTIFICATION-GROUP value\n   The value of an invocation
    of the NOTIFICATION-GROUP macro is the\n   name of the group, which is an OBJECT
    IDENTIFIER, an administratively\n   assigned name.\n"
  title: 4.5.  Mapping of the NOTIFICATION-GROUP value
- contents:
  - "4.6.  Usage Example\n   The SNMP Basic Notifications Group [3] is described:\n
    \  snmpBasicNotificationsGroup NOTIFICATION-GROUP\n       NOTIFICATIONS { coldStart,
    authenticationFailure }\n       STATUS        current\n       DESCRIPTION\n               \"The
    two notifications which an agent is required to\n               implement.\"\n
    \     ::= { snmpMIBGroups 7 }\n   According to this invocation, the conformance
    group named\n        { snmpMIBGroups 7 }\n   contains 2 notifications.\n"
  title: 4.6.  Usage Example
- contents:
  - "5.  Mapping of the MODULE-COMPLIANCE macro\n   The MODULE-COMPLIANCE macro is
    used to convey a minimum set of\n   requirements with respect to implementation
    of one or more MIB\n   modules.  It should be noted that the expansion of the
    MODULE-\n   COMPLIANCE macro is something which conceptually happens during\n
    \  implementation and not during run-time.\n   A requirement on all \"standard\"
    MIB modules is that a corresponding\n   MODULE-COMPLIANCE specification is also
    defined, either in the same\n   information module or in a companion information
    module.\n"
  title: 5.  Mapping of the MODULE-COMPLIANCE macro
- contents:
  - "5.1.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,
    indicates whether this\n   definition is current or historic.\n   The value \"current\"
    means that the definition is current and valid.\n   The value \"obsolete\" means
    the definition is obsolete, and this\n   MODULE-COMPLIANCE specification no longer
    specifies a valid\n   definition of conformance.  While the value \"deprecated\"
    also\n   indicates an obsolete definition, it permits new/continued use of the\n
    \  MODULE-COMPLIANCE specification.\n"
  title: 5.1.  Mapping of the STATUS clause
- contents:
  - "5.2.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must
    be present, contains a textual\n   definition of this compliance statement and
    should embody any\n   information which would otherwise be communicated in any
    ASN.1\n   commentary annotations associated with the statement.\n"
  title: 5.2.  Mapping of the DESCRIPTION clause
- contents:
  - "5.3.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not
    be present, contains a textual\n   cross-reference to some other document, either
    another information\n   module which defines a related assignment, or some other
    document\n   which provides additional information relevant to this definition.\n"
  title: 5.3.  Mapping of the REFERENCE clause
- contents:
  - "5.4.  Mapping of the MODULE clause\n   The MODULE clause, which must be present,
    is repeatedly used to name\n   each MIB module for which compliance requirements
    are being\n   specified.  Each MIB module is named by its module name, and\n   optionally,
    by its associated OBJECT IDENTIFIER as well.  The module\n   name can be omitted
    when the MODULE-COMPLIANCE invocation occurs\n   inside a MIB module, to refer
    to the encompassing MIB module.\n"
  title: 5.4.  Mapping of the MODULE clause
- contents:
  - "5.4.1.  Mapping of the MANDATORY-GROUPS clause\n   The MANDATORY-GROUPS clause,
    which need not be present, names the one\n   or more object or notification groups
    within the correspondent MIB\n   module which are unconditionally mandatory for
    implementation.  If an\n   agent claims compliance to the MIB module, then it
    must implement\n   each and every object and notification within each conformance
    group\n   listed.  That is, if an agent returns a noSuchObject exception in\n
    \  response to a management protocol get operation [4] for any object\n   within
    any mandatory conformance group for every possible MIB view,\n   or if the agent
    cannot generate each notification listed in any\n   conformance group under the
    appropriate circumstances, then that\n   agent is not a conformant implementation
    of the MIB module.\n"
  title: 5.4.1.  Mapping of the MANDATORY-GROUPS clause
- contents:
  - "5.4.2.  Mapping of the GROUP clause\n   The GROUP clause, which need not be present,
    is repeatedly used to\n   name each object and notification group which is conditionally\n
    \  mandatory for compliance to the MIB module.  The GROUP clause can\n   also
    be used to name unconditionally optional groups.  A group named\n   in a GROUP
    clause must be absent from the correspondent MANDATORY-\n   GROUPS clause.\n   Conditionally
    mandatory groups include those which are mandatory only\n   if a particular protocol
    is implemented, or only if another group is\n   implemented.  A GROUP clause's
    DESCRIPTION specifies the conditions\n   under which the group is conditionally
    mandatory.\n   A group which is named in neither a MANDATORY-GROUPS clause nor
    a\n   GROUP clause, is unconditionally optional for compliance to the MIB\n   module.\n"
  title: 5.4.2.  Mapping of the GROUP clause
- contents:
  - "5.4.3.  Mapping of the OBJECT clause\n   The OBJECT clause, which need not be
    present, is repeatedly used to\n   specify each MIB object for which compliance
    has a refined\n   requirement with respect to the MIB module definition.  The
    MIB\n   object must be present in one of the conformance groups named in the\n
    \  correspondent MANDATORY-GROUPS clause or GROUP clauses.\n   By definition,
    each object specified in an OBJECT clause follows a\n   MODULE clause which names
    the information module in which that object\n   is defined.  Therefore, the use
    of an IMPORTS statement, to specify\n   from where such objects are imported,
    is redundant and is not\n   required in an information module.\n"
  title: 5.4.3.  Mapping of the OBJECT clause
- contents:
  - "5.4.3.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which need not
    be present, is used to provide a\n   refined SYNTAX for the object named in the
    correspondent OBJECT\n   clause.  Note that if this clause and a WRITE-SYNTAX
    clause are both\n   present, then this clause only applies when instances of the
    object\n   named in the correspondent OBJECT clause are read.\n   Consult Section
    9 of [2] for more information on refined syntax.\n"
  title: 5.4.3.1.  Mapping of the SYNTAX clause
- contents:
  - "5.4.3.2.  Mapping of the WRITE-SYNTAX clause\n   The WRITE-SYNTAX clause, which
    need not be present, is used to\n   provide a refined SYNTAX for the object named
    in the correspondent\n   OBJECT clause when instances of that object are written.\n
    \  Consult Section 9 of [2] for more information on refined syntax.\n"
  title: 5.4.3.2.  Mapping of the WRITE-SYNTAX clause
- contents:
  - "5.4.3.3.  Mapping of the MIN-ACCESS clause\n   The MIN-ACCESS clause, which need
    not be present, is used to define\n   the minimal level of access for the object
    named in the correspondent\n   OBJECT clause.  If this clause is absent, the minimal
    level of access\n   is the same as the maximal level specified in the correspondent\n
    \  invocation of the OBJECT-TYPE macro.  If present, this clause must\n   not
    specify a greater level of access than is specified in the\n   correspondent invocation
    of the OBJECT-TYPE macro.\n   The level of access for certain types of objects
    is fixed according\n   to their syntax definition.  These types include: conceptual
    tables\n   and rows, auxiliary objects, and objects with the syntax of\n   Counter32,
    Counter64 (and possibly, certain types of textual\n   conventions).  A MIN-ACCESS
    clause should not be present for such\n   objects.\n   An implementation is compliant
    if the level of access it provides is\n   greater or equal to the minimal level
    in the MODULE-COMPLIANCE macro\n   and less or equal to the maximal level in the
    OBJECT-TYPE macro.\n"
  title: 5.4.3.3.  Mapping of the MIN-ACCESS clause
- contents:
  - "5.4.4.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause must be
    present for each use of the GROUP or\n   OBJECT clause.  For an OBJECT clause,
    it contains a textual\n   description of the refined compliance requirement.  For
    a GROUP\n   clause, it contains a textual description of the conditions under\n
    \  which the group is conditionally mandatory or unconditionally\n   optional.\n"
  title: 5.4.4.  Mapping of the DESCRIPTION clause
- contents:
  - "5.5.  Mapping of the MODULE-COMPLIANCE value\n   The value of an invocation of
    the MODULE-COMPLIANCE macro is an\n   OBJECT IDENTIFIER.  As such, this value
    may be authoritatively used\n   when referring to the compliance statement embodied
    by that\n   invocation of the macro.\n"
  title: 5.5.  Mapping of the MODULE-COMPLIANCE value
- contents:
  - "5.6.  Usage Example\n   The compliance statement contained in the (hypothetical)
    XYZv2-MIB\n   might be:\n   xyzMIBCompliance MODULE-COMPLIANCE\n       STATUS
    \ current\n       DESCRIPTION\n               \"The compliance statement for XYZv2
    entities which\n               implement the XYZv2 MIB.\"\n      MODULE  -- compliance
    to the containing MIB module\n          MANDATORY-GROUPS { xyzSystemGroup,\n                             xyzStatsGroup,
    xyzTrapGroup,\n                             xyzSetGroup,\n                             xyzBasicNotificationsGroup
    }\n          GROUP   xyzV1Group\n          DESCRIPTION\n              \"The xyzV1
    group is mandatory only for those\n               XYZv2 entities which also implement
    XYZv1.\"\n  ::= { xyzMIBCompliances 1 }\n   According to this invocation, to claim
    alignment with the compliance\n   statement named\n        { xyzMIBCompliances
    1 }\n   a system must implement the XYZv2-MIB's xyzSystemGroup,\n   xyzStatsGroup,
    xyzTrapGroup, and xyzSetGroup object conformance\n   groups, as well as the xyzBasicNotificationsGroup
    notifications\n   group.  Furthermore, if the XYZv2 entity also implements XYZv1,
    then\n   it must also support the XYZv1Group group, if compliance is to be\n   claimed.\n"
  title: 5.6.  Usage Example
- contents:
  - "6.  Mapping of the AGENT-CAPABILITIES macro\n   The AGENT-CAPABILITIES macro
    is used to convey a set of capabilities\n   present in an agent.  It should be
    noted that the expansion of the\n   AGENT-CAPABILITIES macro is something which
    conceptually happens\n   during implementation and not during run-time.\n   When
    a MIB module is written, it is divided into units of conformance\n   termed groups.
    \ If an agent claims to implement a group, then it must\n   implement each and
    every object, or each and every notification,\n   within that group.  Of course,
    for whatever reason, an agent might\n   implement only a subset of the groups
    within a MIB module.  In\n   addition, the definition of some MIB objects/notifications
    leave some\n   aspects of the definition to the discretion of an implementor.\n
    \  Practical experience has demonstrated a need for concisely describing\n   the
    capabilities of an agent with respect to one or more MIB modules.\n   The AGENT-CAPABILITIES
    macro allows an agent implementor to describe\n   the precise level of support
    which an agent claims in regards to a\n   MIB group, and to bind that description
    to the value of an instance\n   of sysORID [3].  In particular, some objects may
    have restricted or\n   augmented syntax or access-levels.\n   If the AGENT-CAPABILITIES
    invocation is given to a management-station\n   implementor, then that implementor
    can build management applications\n   which optimize themselves when communicating
    with a particular agent.\n   For example, the management-station can maintain
    a database of these\n   invocations.  When a management-station interacts with
    an agent, it\n   retrieves from the agent the values of all instances of sysORID
    [3].\n   Based on this, it consults the database to locate each entry matching\n
    \  one of the retrieved values of sysORID.  Using the located entries,\n   the
    management application can now optimize its behavior accordingly.\n   Note that
    the AGENT-CAPABILITIES macro specifies refinements or\n   variations with respect
    to OBJECT-TYPE and NOTIFICATION-TYPE macros\n   in MIB modules, NOT with respect
    to MODULE-COMPLIANCE macros in\n   compliance statements.\n"
  title: 6.  Mapping of the AGENT-CAPABILITIES macro
- contents:
  - "6.1.  Mapping of the PRODUCT-RELEASE clause\n   The PRODUCT-RELEASE clause, which
    must be present, contains a textual\n   description of the product release which
    includes this set of\n   capabilities.\n"
  title: 6.1.  Mapping of the PRODUCT-RELEASE clause
- contents:
  - "6.2.  Mapping of the STATUS clause\n   The STATUS clause, which must be present,
    indicates whether this\n   definition is current or historic.\n   The value \"current\"
    means that the definition is current and valid.\n   The value \"obsolete\" means
    the definition is obsolete and this\n   capabilities statement is no longer in
    use.\n"
  title: 6.2.  Mapping of the STATUS clause
- contents:
  - "6.3.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which must
    be present, contains a textual\n   description of this set of capabilities.\n"
  title: 6.3.  Mapping of the DESCRIPTION clause
- contents:
  - "6.4.  Mapping of the REFERENCE clause\n   The REFERENCE clause, which need not
    be present, contains a textual\n   cross-reference to some other document, either
    another information\n   module which defines a related assignment, or some other
    document\n   which provides additional information relevant to this definition.\n"
  title: 6.4.  Mapping of the REFERENCE clause
- contents:
  - "6.5.  Mapping of the SUPPORTS clause\n   The SUPPORTS clause, which need not
    be present, is repeatedly used to\n   name each MIB module for which the agent
    claims a complete or partial\n   implementation.  Each MIB module is named by
    its module name, and\n   optionally, by its associated OBJECT IDENTIFIER (as registered
    by the\n   MODULE-IDENTITY macro, see [2]) as well.\n"
  title: 6.5.  Mapping of the SUPPORTS clause
- contents:
  - "6.5.1.  Mapping of the INCLUDES clause\n   The INCLUDES clause, which must follow
    each and every use of the\n   SUPPORTS clause, is used to name each MIB group
    associated with the\n   SUPPORTS clause, which the agent claims to implement.\n"
  title: 6.5.1.  Mapping of the INCLUDES clause
- contents:
  - "6.5.2.  Mapping of the VARIATION clause\n   The VARIATION clause, which need
    not be present, is repeatedly used\n   to name each object or notification which
    the agent implements in\n   some variant or refined fashion with respect to the
    correspondent\n   invocation of the OBJECT-TYPE or NOTIFICATION-TYPE macro.\n
    \  Note that the variation concept is meant for generic implementation\n   restrictions,
    e.g., if the variation for an object depends on the\n   values of other objects,
    then this should be noted in the appropriate\n   DESCRIPTION clause.\n   By definition,
    each object specified in a VARIATION clause follows a\n   SUPPORTS clause which
    names the information module in which that\n   object is defined.  Therefore,
    the use of an IMPORTS statement, to\n   specify from where such objects are imported,
    is redundant and is not\n   required in an information module.\n"
  title: 6.5.2.  Mapping of the VARIATION clause
- contents:
  - "6.5.2.1.  Mapping of the SYNTAX clause\n   The SYNTAX clause, which need not
    be present, is used to provide a\n   refined SYNTAX for the object named in the
    correspondent VARIATION\n   clause.  Note that if this clause and a WRITE-SYNTAX
    clause are both\n   present, then this clause only applies when instances of the
    object\n   named in the correspondent VARIATION clause are read.\n   Consult Section
    9 of [2] for more information on refined syntax.\n   Note that for enumerated
    INTEGERs and for the BITS construct, the\n   changes allowed when updating a MIB
    module include the addition of\n   enumerations and/or changing the labels of
    existing enumerations (see\n   Section 10.2 of [2]).  This type of change can
    cause problems for an\n   AGENT-CAPABILITIES macro written against the old revision
    of a MIB\n   module.  One way to avoid such problems is to explicitly list all\n
    \  objects having an enumerated syntax in a VARIATION clause, even when\n   all
    enumerations are currently supported.\n"
  title: 6.5.2.1.  Mapping of the SYNTAX clause
- contents:
  - "6.5.2.2.  Mapping of the WRITE-SYNTAX clause\n   The WRITE-SYNTAX clause, which
    need not be present, is used to\n   provide a refined SYNTAX for the object named
    in the correspondent\n   VARIATION clause when instances of that object are written.\n
    \  Consult Section 9 of [2] for more information on refined syntax.\n"
  title: 6.5.2.2.  Mapping of the WRITE-SYNTAX clause
- contents:
  - "6.5.2.3.  Mapping of the ACCESS clause\n   The ACCESS clause, which need not
    be present, is used to indicate the\n   agent provides less than the maximal level
    of access to the object or\n   notification named in the correspondent VARIATION
    clause.\n   The only value applicable to notifications is \"not-implemented\".\n
    \  The value \"not-implemented\" indicates the agent does not implement\n   the
    object or notification, and in the ordering of possible values is\n   equivalent
    to \"not-accessible\".\n   The value \"write-only\" is provided solely for backward
    compatibility,\n   and shall not be used for newly-defined object types.  In the\n
    \  ordering of possible values, \"write-only\" is less than \"not-\n   accessible\".\n"
  title: 6.5.2.3.  Mapping of the ACCESS clause
- contents:
  - "6.5.2.4.  Mapping of the CREATION-REQUIRES clause\n   The CREATION-REQUIRES clause,
    which need not be present, is used to\n   name the columnar objects of a conceptual
    row to which values must be\n   explicitly assigned, by a management protocol
    set operation, before\n   the agent will allow the instance of the status column
    of that row to\n   be set to `active'.  (Consult the definition of RowStatus [5].)\n
    \  If the conceptual row does not have a status column (i.e., the\n   objects
    corresponding to the conceptual table were defined using the\n   mechanisms in
    [6,7]), then the CREATION-REQUIRES clause, which need\n   not be present, is used
    to name the columnar objects of a conceptual\n   row to which values must be explicitly
    assigned, by a management\n   protocol set operation, before the agent will create
    new instances of\n   objects in that row.\n   This clause must not be present
    unless the object named in the\n   correspondent VARIATION clause is a conceptual
    row, i.e., has a\n   syntax which resolves to a SEQUENCE containing columnar objects.
    \ The\n   objects named in the value of this clause usually will refer to\n   columnar
    objects in that row.  However, objects unrelated to the\n   conceptual row may
    also be specified.\n   All objects which are named in the CREATION-REQUIRES clause
    for a\n   conceptual row, and which are columnar objects of that row, must have\n
    \  an access level of \"read-create\".\n"
  title: 6.5.2.4.  Mapping of the CREATION-REQUIRES clause
- contents:
  - "6.5.2.5.  Mapping of the DEFVAL clause\n   The DEFVAL clause, which need not
    be present, is used to provide a\n   alternate DEFVAL value for the object named
    in the correspondent\n   VARIATION clause.  The semantics of this value are identical
    to those\n   of the OBJECT-TYPE macro's DEFVAL clause.\n"
  title: 6.5.2.5.  Mapping of the DEFVAL clause
- contents:
  - "6.5.2.6.  Mapping of the DESCRIPTION clause\n   The DESCRIPTION clause, which
    must be present for each use of the\n   VARIATION clause, contains a textual description
    of the variant or\n   refined implementation of the object or notification.\n"
  title: 6.5.2.6.  Mapping of the DESCRIPTION clause
- contents:
  - "6.6.  Mapping of the AGENT-CAPABILITIES value\n   The value of an invocation
    of the AGENT-CAPABILITIES macro is an\n   OBJECT IDENTIFIER, which names the value
    of sysORID [3] for which\n   this capabilities statement is valid.\n"
  title: 6.6.  Mapping of the AGENT-CAPABILITIES value
- contents:
  - "6.7.  Usage Example\n   Consider how a capabilities statement for an agent might
    be\n   described:\n   exampleAgent AGENT-CAPABILITIES\n       PRODUCT-RELEASE
    \     \"ACME Agent release 1.1 for 4BSD.\"\n       STATUS               current\n
    \      DESCRIPTION          \"ACME agent for 4BSD.\"\n       SUPPORTS             SNMPv2-MIB\n
    \          INCLUDES         { systemGroup, snmpGroup, snmpSetGroup,\n                              snmpBasicNotificationsGroup
    }\n           VARIATION        coldStart\n               DESCRIPTION  \"A coldStart
    trap is generated on all\n                            reboots.\"\n       SUPPORTS
    \            IF-MIB\n           INCLUDES         { ifGeneralGroup, ifPacketGroup
    }\n           VARIATION        ifAdminStatus\n               SYNTAX       INTEGER
    { up(1), down(2) }\n               DESCRIPTION  \"Unable to set test mode on 4BSD.\"\n
    \          VARIATION        ifOperStatus\n               SYNTAX       INTEGER
    { up(1), down(2) }\n               DESCRIPTION  \"Information limited on 4BSD.\"\n
    \      SUPPORTS             IP-MIB\n           INCLUDES         { ipGroup, icmpGroup
    }\n           VARIATION        ipDefaultTTL\n               SYNTAX       INTEGER
    (255..255)\n               DESCRIPTION  \"Hard-wired on 4BSD.\"\n           VARIATION
    \       ipInAddrErrors\n               ACCESS       not-implemented\n               DESCRIPTION
    \ \"Information not available on 4BSD.\"\n           VARIATION        ipNetToMediaEntry\n
    \              CREATION-REQUIRES { ipNetToMediaPhysAddress }\n               DESCRIPTION
    \ \"Address mappings on 4BSD require\n                            both protocol
    and media addresses.\"\n       SUPPORTS             TCP-MIB\n           INCLUDES
    \        { tcpGroup }\n           VARIATION        tcpConnState\n               ACCESS
    \      read-only\n               DESCRIPTION  \"Unable to set this on 4BSD.\"\n
    \      SUPPORTS             UDP-MIB\n           INCLUDES         { udpGroup }\n
    \      SUPPORTS             EVAL-MIB\n           INCLUDES         { functionsGroup,
    expressionsGroup }\n           VARIATION        exprEntry\n               CREATION-REQUIRES
    { evalString, evalStatus }\n               DESCRIPTION  \"Conceptual row creation
    is supported.\"\n       ::= { acmeAgents 1 }\n   According to this invocation,
    an agent with a sysORID value of\n        { acmeAgents 1 }\n   supports objects
    defined in six MIB modules.\n   From SNMPv2-MIB, five conformance groups are supported.\n
    \  From IF-MIB, the ifGeneralGroup and ifPacketGroup groups are\n   supported.
    \ However, the objects ifAdminStatus and ifOperStatus have\n   a restricted syntax.\n
    \  From IP-MIB, all objects in the ipGroup and icmpGroup are supported\n   except
    ipInAddrErrors, while ipDefaultTTL has a restricted range, and\n   when creating
    a new instance in the ipNetToMediaTable, the set-\n   request must create an instance
    of ipNetToMediaPhysAddress.\n   From TCP-MIB, the tcpGroup is supported except
    that tcpConnState is\n   available only for reading.\n   From UDP-MIB, the udpGroup
    is fully supported.\n   From the EVAL-MIB, all the objects contained in the functionsGroup\n
    \  and expressionsGroup conformance groups are supported, without\n   variation.
    \ In addition, creation of new instances in the expr table\n   is supported, and
    requires both of the objects:  evalString and\n   evalStatus, to be assigned a
    value.\n"
  title: 6.7.  Usage Example
- contents:
  - "7.  Extending an Information Module\n   As experience is gained with a published
    information module, it may\n   be desirable to revise that information module.\n
    \  Section 10 of [2] defines the rules for extending an information\n   module.
    \ The remainder of this section defines how conformance\n   groups, compliance
    statements, and capabilities statements may be\n   extended.\n"
  title: 7.  Extending an Information Module
- contents:
  - "7.1.  Conformance Groups\n   It may be desirable to revise the definition of
    a conformance group\n   (an OBJECT-GROUP or a NOTIFICATION-GROUP) after experience
    is gained\n   with it.  However, conformance groups can be referenced by compliance\n
    \  and/or capabilities definitions.  Therefore, a change to a\n   conformance
    group is not allowed if it has the potential to cause a\n   reference to the group's
    original definition to be different from a\n   reference to the updated definition.
    \ Such changes can only be\n   accommodated by defining a new conformance group
    with a new\n   descriptor and a new OBJECT IDENTIFIER value.\n   The following
    revisions are allowed:\n"
  title: 7.1.  Conformance Groups
- contents:
  - "(1)  A STATUS clause value of \"current\" may be revised as \"deprecated\"\n
    \    or \"obsolete\".  Similarly, a STATUS clause value of \"deprecated\"\n     may
    be revised as \"obsolete\".  When making such a change, the\n     DESCRIPTION
    clause should be updated to explain the rationale.\n"
  title: (1)  A STATUS clause value of "current" may be revised as "deprecated"
- contents:
  - '(2)  A REFERENCE clause may be added or updated.

    '
  title: (2)  A REFERENCE clause may be added or updated.
- contents:
  - "(3)  Clarifications and additional information may be included in the\n     DESCRIPTION
    clause.\n"
  title: (3)  Clarifications and additional information may be included in the
- contents:
  - "(4)  Any editorial change.\n   It is not necessary to change the STATUS value
    of a conformance group\n   when the status of a member of the group is changed.\n"
  title: (4)  Any editorial change.
- contents:
  - "7.2.  Compliance Definitions\n   It may be desirable to revise the definition
    of a compliance\n   definition (MODULE-COMPLIANCE) after experience is gained
    with it.\n   However, changes are not allowed if they cause the requirements\n
    \  specified by the original definition to be different from the\n   requirements
    of the updated definition.  Such changes can only be\n   accommodated by defining
    a new compliance definition with a new\n   descriptor and a new OBJECT IDENTIFIER
    value.\n   The following revisions are allowed:\n"
  title: 7.2.  Compliance Definitions
- contents:
  - "(1)  A STATUS clause value of \"current\" may be revised as \"deprecated\"\n
    \    or \"obsolete\".  Similarly, a STATUS clause value of \"deprecated\"\n     may
    be revised as \"obsolete\".  When making such a change, the\n     DESCRIPTION
    clause should be updated to explain the rationale.\n"
  title: (1)  A STATUS clause value of "current" may be revised as "deprecated"
- contents:
  - '(2)  A REFERENCE clause may be added or updated.

    '
  title: (2)  A REFERENCE clause may be added or updated.
- contents:
  - "(3)  Clarifications and additional information may be included in the\n     DESCRIPTION
    clause(s).\n"
  title: (3)  Clarifications and additional information may be included in the
- contents:
  - "(4)  Any editorial change.\n   It is not necessary to change the STATUS value
    of a compliance\n   definition due to a change in the STATUS value of a definition
    it\n   references.\n"
  title: (4)  Any editorial change.
- contents:
  - "7.3.  Capabilities Definitions\n   It may be desirable to revise the definition
    of a capabilities\n   definition (AGENT-CAPABILITIES) after experience is gained
    with it.\n   However, changes are not allowed if they cause the capabilities\n
    \  specified by the original specification to be different from the\n   capabilities
    of the updated specification.  Such changes can only be\n   accommodated by defining
    a new capabilities definition with a new\n   descriptor and a new OBJECT IDENTIFIER
    value.\n   The following revisions are allowed:\n"
  title: 7.3.  Capabilities Definitions
- contents:
  - "(1)  A STATUS clause value of \"current\" may be revised as \"obsolete\".\n     When
    making such a change, the DESCRIPTION clause should be updated\n     to explain
    the rationale.\n"
  title: (1)  A STATUS clause value of "current" may be revised as "obsolete".
- contents:
  - '(2)  A REFERENCE clause may be added or updated.

    '
  title: (2)  A REFERENCE clause may be added or updated.
- contents:
  - "(3)  Clarifications and additional information may be included in the\n     DESCRIPTION
    clause(s).\n"
  title: (3)  Clarifications and additional information may be included in the
- contents:
  - "(4)  Any editorial change.\n   It is not necessary to change the STATUS value
    of a capabilities\n   definition due to a change in the STATUS value of a definition
    it\n   references.\n"
  title: (4)  Any editorial change.
- contents:
  - "8.  Security Considerations\n   This document defines the means to define conformance
    requirements\n   for implementing on documents describing management information.\n
    \  This method of defining conformance requirements has no security\n   impact
    on the Internet.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Editors' Addresses\n   Keith McCloghrie\n   Cisco Systems, Inc.\n   170 West
    Tasman Drive\n   San Jose, CA  95134-1706\n   USA\n   Phone: +1 408 526 5260\n
    \  EMail: kzm@cisco.com\n   David Perkins\n   SNMPinfo\n   3763 Benton Street\n
    \  Santa Clara, CA 95051\n   USA\n   Phone: +1 408 221-8702\n   Email: dperkins@snmpinfo.com\n
    \  Juergen Schoenwaelder\n   TU Braunschweig\n   Bueltenweg 74/75\n   38106 Braunschweig\n
    \  Germany\n   Phone: +49 531 391-3283\n   EMail: schoenw@ibr.cs.tu-bs.de\n"
  title: 9.  Editors' Addresses
- contents:
  - '10.  References

    '
  title: 10.  References
- contents:
  - "[1]  Information processing systems - Open Systems Interconnection -\n     Specification
    of Abstract Syntax Notation One (ASN.1),\n     International Organization for
    Standardization.  International\n     Standard 8824, (December, 1987).\n"
  title: '[1]  Information processing systems - Open Systems Interconnection -'
- contents:
  - "[2]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.\n     and
    S. Waldbusser, \"Structure of Management Information Version 2\n     (SMIv2)\",
    STD 58, RFC 2578, April 1999.\n"
  title: '[2]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.'
- contents:
  - "[3]  The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and\n     S.
    Waldbusser, \"Management Information Base for Version 2 of the\n     Simple Network
    Management Protocol (SNMPv2)\", RFC 1907, January\n     1996.\n"
  title: '[3]  The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and'
- contents:
  - "[4]  The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and\n     S.
    Waldbusser, \"Protocol Operations for Version 2 of the Simple\n     Network Management
    Protocol (SNMPv2)\", RFC 1905, January 1996.\n"
  title: '[4]  The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and'
- contents:
  - "[5]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.\n     and
    S. Waldbusser, \"Textual Conventions for SMIv2\", STD 58,\n     RFC 2579, April
    1999.\n"
  title: '[5]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.'
- contents:
  - "[6]  Rose, M. and K. McCloghrie, \"Structure and Identification of\n     Management
    Information for TCP/IP-based internets\", STD 16, RFC\n     1155, May 1990.\n"
  title: '[6]  Rose, M. and K. McCloghrie, "Structure and Identification of'
- contents:
  - "[7]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\", STD 16, RFC\n     1212,
    March 1991.\n"
  title: '[7]  Rose, M. and K. McCloghrie, "Concise MIB Definitions", STD 16, RFC'
- contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\"\n"
  title: 11.  Full Copyright Statement
