- title: __initial_text__
  contents:
  - '                         YANG Patch Media Type

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method for applying patches to\n   configuration\
    \ datastores using data defined with the YANG data\n   modeling language.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8072.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \         1.1.1. NETCONF .............................................3\n    \
    \       1.1.2. HTTP ................................................4\n      \
    \     1.1.3. YANG ................................................4\n        \
    \   1.1.4. RESTCONF ............................................4\n          \
    \ 1.1.5. YANG Patch ..........................................5\n           1.1.6.\
    \ Examples ............................................5\n           1.1.7. Tree\
    \ Diagram Notations ..............................6\n   2. YANG Patch ......................................................6\n\
    \      2.1. Target Resource ............................................7\n  \
    \    2.2. yang-patch Request .........................................8\n    \
    \  2.3. yang-patch-status Response .................................9\n      2.4.\
    \ Target Data Node ..........................................10\n      2.5. Edit\
    \ Operations ...........................................11\n      2.6. Successful\
    \ Edit Response Handling .........................11\n      2.7. Error Handling\
    \ ............................................12\n      2.8. \":yang-patch\" RESTCONF\
    \ Capability .........................12\n   3. YANG Module ....................................................13\n\
    \   4. IANA Considerations ............................................22\n  \
    \    4.1. Registrations for New URI and YANG Module .................22\n    \
    \  4.2. Media Types ...............................................23\n      \
    \     4.2.1. Media Type \"application/yang-patch+xml\" ............23\n      \
    \     4.2.2. Media Type \"application/yang-patch+json\" ...........24\n      4.3.\
    \ RESTCONF Capability URNs ..................................25\n   5. Security\
    \ Considerations ........................................25\n   6. References\
    \ .....................................................26\n      6.1. Normative\
    \ References ......................................26\n      6.2. Informative\
    \ References ....................................27\n   Appendix A. Example YANG\
    \ Module ...................................28\n     A.1. YANG Patch Examples\
    \ ........................................29\n       A.1.1. Add Resources: Error\
    \ ...................................29\n       A.1.2. Add Resources: Success\
    \ .................................33\n       A.1.3. Insert List Entry ......................................35\n\
    \       A.1.4. Move List Entry ........................................36\n  \
    \     A.1.5. Edit Datastore Resource ................................37\n   Acknowledgements\
    \ ..................................................39\n   Authors' Addresses\
    \ ................................................39\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There is a need for standard mechanisms to patch datastores\
    \ defined\n   in [RFC6241], which contain conceptual data that conforms to schema\n\
    \   specified with YANG [RFC7950].  An \"ordered 'edit' list\" approach is\n \
    \  needed to provide RESTCONF client developers with more precise\n   RESTCONF\
    \ client control of the edit procedure than the \"plain patch\"\n   mechanism\
    \ found in [RFC8040].\n   This document defines a media type for a YANG-based\
    \ editing mechanism\n   that can be used with the HTTP PATCH method [RFC5789].\
    \  YANG Patch is\n   designed to support the RESTCONF protocol, defined in [RFC8040].\n\
    \   This document only specifies the use of the YANG Patch media type\n   with\
    \ the RESTCONF protocol.\n   It may be possible to use YANG Patch with other protocols\
    \ besides\n   RESTCONF.  This is outside the scope of this document.  For any\n\
    \   protocol that supports the YANG Patch media type, if the entire patch\n  \
    \ document cannot be successfully applied, then the server MUST NOT\n   apply\
    \ any of the changes.  It may be possible to use YANG Patch with\n   datastore\
    \ types other than a configuration datastore.  This is\n   outside the scope of\
    \ this document.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 1.1.1.  NETCONF
  contents:
  - "1.1.1.  NETCONF\n   The following terms are defined in [RFC6241]:\n   o  configuration\
    \ data\n   o  datastore\n   o  configuration datastore\n   o  protocol operation\n\
    \   o  running configuration datastore\n   o  state data\n   o  user\n"
- title: 1.1.2.  HTTP
  contents:
  - "1.1.2.  HTTP\n   The following terms are defined in [RFC7230]:\n   o  header\
    \ field\n   o  message-body\n   o  query\n   o  request URI\n   The following\
    \ terms are defined in [RFC7231]:\n   o  method\n   o  request\n   o  resource\n"
- title: 1.1.3.  YANG
  contents:
  - "1.1.3.  YANG\n   The following terms are defined in [RFC7950]:\n   o  container\n\
    \   o  data node\n   o  leaf\n   o  leaf-list\n   o  list\n"
- title: 1.1.4.  RESTCONF
  contents:
  - "1.1.4.  RESTCONF\n   The following terms are defined in [RFC8040]:\n   o  application/yang-data+xml\n\
    \   o  application/yang-data+json\n   o  data resource\n   o  datastore resource\n\
    \   o  patch\n   o  RESTCONF capability\n   o  target resource\n   o  YANG data\
    \ template\n"
- title: 1.1.5.  YANG Patch
  contents:
  - "1.1.5.  YANG Patch\n   The following terms are used within this document:\n \
    \  o  RESTCONF client: a client that implements the RESTCONF protocol.\n   o \
    \ RESTCONF server: a server that implements the RESTCONF protocol.\n   o  YANG\
    \ Patch: a conceptual edit request using the \"yang-patch\" YANG\n      Patch\
    \ template, defined in Section 3.  In HTTP, refers to a PATCH\n      method where\
    \ a representation uses either the media type\n      \"application/yang-patch+xml\"\
    \ or \"application/yang-patch+json\".\n   o  YANG Patch Status: a conceptual edit\
    \ status response using the\n      YANG \"yang-patch-status\" YANG data template,\
    \ defined in Section 3.\n      In HTTP, refers to a response message for a PATCH\
    \ method, where it\n      has a representation with either the media type\n  \
    \    \"application/yang-data+xml\" or \"application/yang-data+json\".\n   o  YANG\
    \ Patch template: similar to a YANG data template, except that\n      it has a\
    \ representation with the media type\n      \"application/yang-patch+xml\" or\
    \ \"application/yang-patch+json\".\n"
- title: 1.1.6.  Examples
  contents:
  - "1.1.6.  Examples\n   Some protocol message lines within examples throughout this\
    \ document\n   are split into multiple lines for display purposes only.  When\
    \ a line\n   ends with a backslash (\"\\\") as the last character, the line is\n\
    \   wrapped for display purposes.  It is to be considered to be joined to\n  \
    \ the next line by deleting the backslash, the following line break,\n   and the\
    \ leading whitespace of the next line.\n"
- title: 1.1.7.  Tree Diagram Notations
  contents:
  - "1.1.7.  Tree Diagram Notations\n   A simplified graphical representation of the\
    \ data model is used in\n   this document.  The meanings of the symbols in these\
    \ diagrams are as\n   follows:\n   o  Brackets \"[\" and \"]\" enclose list keys.\n\
    \   o  Abbreviations before data node names: \"rw\" means configuration\n    \
    \  data (read-write), \"ro\" means state data (read-only), and \"x\"\n      means\
    \ operation resource (executable).\n   o  Symbols after data node names: \"?\"\
    \ means an optional node, and \"*\"\n      denotes a \"list\" and \"leaf-list\"\
    .\n   o  Parentheses enclose choice and case nodes, and case nodes are also\n\
    \      marked with a colon (\":\").\n   o  Ellipsis (\"...\") stands for contents\
    \ of subtrees that are not\n      shown.\n"
- title: 2.  YANG Patch
  contents:
  - "2.  YANG Patch\n   A \"YANG Patch\" is an ordered list of edits that are applied\
    \ to the\n   target datastore by the RESTCONF server.  The specific fields are\n\
    \   defined in the YANG module in Section 3.\n   The YANG Patch operation is invoked\
    \ by the RESTCONF client by\n   sending a PATCH method request with a representation\
    \ using either\n   the media type \"application/yang-patch+xml\" or\n   \"application/yang-patch+json\"\
    .  This message-body representing the\n   YANG Patch input parameters MUST be\
    \ present.\n   YANG Patch has some features that are not possible with the\n \
    \  \"plain-patch\" mechanism defined in RESTCONF [RFC8040]:\n   o  YANG Patch\
    \ allows multiple sub-resources to be edited within the\n      same PATCH method.\n\
    \   o  YANG Patch allows a more precise edit operation than the\n      \"plain\
    \ patch\" mechanism found in [RFC8040].  There are seven\n      operations supported\
    \ (\"create\", \"delete\", \"insert\", \"merge\",\n      \"move\", \"replace\"\
    , and \"remove\").\n   o  YANG Patch uses an \"edit\" list with an explicit processing\
    \ order.\n      The edits are processed in client-specified order, and error\n\
    \      processing can be precise even when multiple errors occur in the\n    \
    \  same YANG Patch request.\n   The YANG Patch \"patch-id\" may be useful for\
    \ debugging and SHOULD be\n   present in any audit logging records generated by\
    \ the RESTCONF server\n   for a patch.\n   The RESTCONF server MUST return the\
    \ \"Accept-Patch\" header field in an\n   OPTIONS response, as specified in [RFC5789],\
    \ which includes the\n   media type for YANG Patch.  This is needed by a client\
    \ to determine\n   the message-encoding formats supported by the server (e.g.,\
    \ XML,\n   JSON, or both).  The following is an example of an \"Accept-Patch\"\
    \n   header:\n    Accept-Patch: application/yang-patch+xml,application/yang-patch+json\n\
    \   Note that YANG Patch can only edit data resources.  The PATCH method\n   cannot\
    \ be used to replace the datastore resource.  Although the\n   \"ietf-yang-patch\"\
    \ YANG module is written using YANG version 1.1\n   [RFC7950], an implementation\
    \ of YANG Patch can be used with content\n   defined in YANG version 1 [RFC6020]\
    \ as well.\n   A YANG Patch can be encoded in XML format according to\n   [W3C.REC-xml-20081126].\
    \  It can also be encoded in JSON according to\n   \"JSON Encoding of Data Modeled\
    \ with YANG\" [RFC7951].  If any metadata\n   needs to be sent in a JSON message,\
    \ it is encoded according to\n   \"Defining and Using Metadata with YANG\" [RFC7952].\n"
- title: 2.1.  Target Resource
  contents:
  - "2.1.  Target Resource\n   The YANG Patch operation uses the RESTCONF target resource\
    \ URI to\n   identify the resource that will be patched.  This can be the\n  \
    \ datastore resource itself, i.e., \"{+restconf}/data\", to edit\n   top-level\
    \ configuration data resources, or it can be a configuration\n   data resource\
    \ within the datastore resource, e.g.,\n   \"{+restconf}/data/ietf-interfaces:interfaces\"\
    , to edit sub-resources\n   within a top-level configuration data resource.\n\
    \   The target resource MUST identify exactly one resource instance.  If\n   more\
    \ than one resource instance is identified, then the request\n   MUST NOT be processed\
    \ and a \"400 Bad Request\" error response MUST be\n   sent by the server.  If\
    \ the target resource does not identify any\n   existing resource instance, then\
    \ the request MUST NOT be processed\n   and a \"404 Not Found\" error response\
    \ MUST be sent by the server.\n   Each edit with a YANG Patch identifies a target\
    \ data node for the\n   associated edit.  This is described in Section 2.4.\n"
- title: 2.2.  yang-patch Request
  contents:
  - "2.2.  yang-patch Request\n   A YANG Patch is identified by a unique \"patch-id\"\
    , and it may have an\n   optional comment.  A patch is an ordered collection of\
    \ edits.  Each\n   edit is identified by an \"edit-id\", and it has an edit operation\n\
    \   (\"create\", \"delete\", \"insert\", \"merge\", \"move\", \"replace\", or\n\
    \   \"remove\") that is applied to the target resource.  Each edit can be\n  \
    \ applied to a sub-resource \"target\" within the target resource.  If\n   the\
    \ operation is \"insert\" or \"move\", then the \"where\" parameter\n   indicates\
    \ how the node is inserted or moved.  For values \"before\" and\n   \"after\"\
    , the \"point\" parameter specifies the data node insertion\n   point.\n   The\
    \ \"merge\", \"replace\", \"create\", \"delete\", and \"remove\" edit\n   operations\
    \ have exactly the same meanings as those defined for the\n   \"operation\" attribute\
    \ described in Section 7.2 of [RFC6241].\n   Each edit within a YANG Patch MUST\
    \ identify exactly one data resource\n   instance.  If an edit represents more\
    \ than one resource instance,\n   then the request MUST NOT be processed and a\
    \ \"400 Bad Request\" error\n   response MUST be sent by the server.  If the edit\
    \ does not identify\n   any existing resource instance and the operation for the\
    \ edit is not\n   \"create\", then the request MUST NOT be processed and a \"\
    404 Not\n   Found\" error response MUST be sent by the server.  A\n   \"yang-patch-status\"\
    \ response MUST be sent by the server identifying\n   the edit or edits that are\
    \ not valid.\n   YANG Patch does not provide any access to specific datastores.\
    \  How a\n   server processes an edit if it is co-located with a Network\n   Configuration\
    \ Protocol (NETCONF) server that does provide access to\n   individual datastores\
    \ is left up to the implementation.  A complete\n   datastore cannot be replaced\
    \ in the same manner as that provided by\n   the <copy-config> operation defined\
    \ in Section 7.3 of [RFC6241].\n   Only the specified nodes in a YANG Patch are\
    \ affected.\n   A message-body representing the YANG Patch is sent by the RESTCONF\n\
    \   client to specify the edit operation request.  When used with the\n   HTTP\
    \ PATCH method, this data is identified by the YANG Patch\n   media type.\n  \
    \ YANG tree diagram for \"yang-patch\" container:\n     +---- yang-patch\n   \
    \        +---- patch-id    string\n           +---- comment?    string\n     \
    \      +---- edit* [edit-id]\n              +---- edit-id      string\n      \
    \        +---- operation    enumeration\n              +---- target       target-resource-offset\n\
    \              +---- point?       target-resource-offset\n              +----\
    \ where?       enumeration\n              +---- value?\n"
- title: 2.3.  yang-patch-status Response
  contents:
  - "2.3.  yang-patch-status Response\n   A message-body representing the YANG Patch\
    \ Status is returned to the\n   RESTCONF client to report the detailed status\
    \ of the edit operation.\n   When used with the HTTP PATCH method, this data is\
    \ identified by the\n   YANG Patch Status media type; the syntax specification\
    \ is defined in\n   Section 3.\n   YANG tree diagram for \"yang-patch-status\"\
    \ container:\n     +---- yang-patch-status\n           +---- patch-id       string\n\
    \           +---- (global-status)?\n           |  +--:(global-errors)\n      \
    \     |  |  +---- errors\n           |  |     +---- error*\n           |  |  \
    \      +---- error-type       enumeration\n           |  |        +---- error-tag\
    \        string\n           |  |        +---- error-app-tag?   string\n      \
    \     |  |        +---- error-path?      instance-identifier\n           |  |\
    \        +---- error-message?   string\n           |  |        +---- error-info?\n\
    \           |  +--:(ok)\n           |     +---- ok?            empty\n       \
    \    +---- edit-status\n              +---- edit* [edit-id]\n                \
    \ +---- edit-id    string\n                 +---- (edit-status-choice)?\n    \
    \                +--:(ok)\n                    |  +---- ok?        empty\n   \
    \                 +--:(errors)\n                       +---- errors\n        \
    \                  +---- error*\n                             +---- error-type\
    \       enumeration\n                             +---- error-tag        string\n\
    \                             +---- error-app-tag?   string\n                \
    \             +---- error-path?      instance-identifier\n                   \
    \          +---- error-message?   string\n                             +---- error-info?\n"
- title: 2.4.  Target Data Node
  contents:
  - "2.4.  Target Data Node\n   The target data node for each edit operation is determined\
    \ by the\n   value of the target resource in the request and the \"target\" leaf\n\
    \   within each \"edit\" entry.\n   If the target resource specified in the request\
    \ URI identifies a\n   datastore resource, then the path string in the \"target\"\
    \ leaf is\n   treated as an absolute path expression identifying the target data\n\
    \   node for the corresponding edit.  The first node specified in the\n   \"target\"\
    \ leaf is a top-level data node defined within a YANG module.\n   The \"target\"\
    \ leaf MUST NOT contain a single forward slash (\"/\"),\n   since this would identify\
    \ the datastore resource, not a data\n   resource.\n   If the target resource\
    \ specified in the request URI identifies a\n   configuration data resource, then\
    \ the path string in the \"target\"\n   leaf is treated as a relative path expression.\
    \  The first node\n   specified in the \"target\" leaf is a child configuration\
    \ data node of\n   the data node associated with the target resource.  If the\
    \ \"target\"\n   leaf contains a single forward slash (\"/\"), then the target\
    \ data node\n   is the target resource data node.\n"
- title: 2.5.  Edit Operations
  contents:
  - "2.5.  Edit Operations\n   Each YANG Patch edit specifies one edit operation on\
    \ the target data\n   node.  The set of operations is aligned with the NETCONF\
    \ edit\n   operations but also includes some new operations.\n   +-----------+-------------------------------------------------------+\n\
    \   | Operation | Description                                           |\n  \
    \ +-----------+-------------------------------------------------------+\n   |\
    \ create    | create a new data resource if it does not already     |\n   |  \
    \         | exist; if it already exists, return an error          |\n   |    \
    \       |                                                       |\n   | delete\
    \    | delete a data resource if it already exists; if it    |\n   |         \
    \  | does not exist, return an error                       |\n   |           |\
    \                                                       |\n   | insert    | insert\
    \ a new user-ordered data resource               |\n   |           |         \
    \                                              |\n   | merge     | merge the edit\
    \ value with the target data resource;   |\n   |           | create if it does\
    \ not already exist                   |\n   |           |                    \
    \                                   |\n   | move      | reorder the target data\
    \ resource                      |\n   |           |                          \
    \                             |\n   | replace   | replace the target data resource\
    \ with the edit value  |\n   |           |                                   \
    \                    |\n   | remove    | remove a data resource if it already\
    \ exists           |\n   +-----------+-------------------------------------------------------+\n\
    \                        YANG Patch Edit Operations\n"
- title: 2.6.  Successful Edit Response Handling
  contents:
  - "2.6.  Successful Edit Response Handling\n   If a YANG Patch is completed without\
    \ errors, the RESTCONF server MUST\n   return a \"yang-patch-status\" message\
    \ with a \"global-status\" choice\n   set to \"ok\".\n   Refer to Appendix A.1.2\
    \ for an example of a successful YANG Patch\n   response.\n"
- title: 2.7.  Error Handling
  contents:
  - "2.7.  Error Handling\n   If a well-formed, schema-valid YANG Patch message is\
    \ received, then\n   the RESTCONF server will process the supplied edits in ascending\n\
    \   order.  The following error modes apply to the processing of this\n   \"edit\"\
    \ list:\n   If a YANG Patch is completed with errors, the RESTCONF server SHOULD\n\
    \   return a \"yang-patch-status\" message.  It is possible (e.g., within a\n\
    \   distributed implementation) that an invalid request will be rejected\n   before\
    \ the YANG Patch edits are processed.  In this case, the server\n   MUST send\
    \ the appropriate HTTP error response instead.\n   Refer to Appendix A.1.1 for\
    \ an example of an error YANG Patch\n   response.\n"
- title: 2.8.  ":yang-patch" RESTCONF Capability
  contents:
  - "2.8.  \":yang-patch\" RESTCONF Capability\n   A URI is defined to identify the\
    \ YANG Patch extension to the base\n   RESTCONF protocol.  If the RESTCONF server\
    \ supports the YANG Patch\n   media type, then the \":yang-patch\" RESTCONF capability\
    \ defined in\n   Section 4.3 MUST be present in the \"capability\" leaf-list in\
    \ the\n   \"ietf-restconf-monitoring\" module defined in [RFC8040].\n"
- title: 3.  YANG Module
  contents:
  - "3.  YANG Module\n   The \"ietf-yang-patch\" module defines conceptual definitions\
    \ with the\n   \"yang-data\" extension statements, which are not meant to be\n\
    \   implemented as datastore contents by a RESTCONF server.\n   The \"ietf-restconf\"\
    \ module from [RFC8040] is used by this module for\n   the \"yang-data\" extension\
    \ definition.\n   <CODE BEGINS>\n   file \"ietf-yang-patch@2017-02-22.yang\"\n\
    \   module ietf-yang-patch {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-patch\"\
    ;\n     prefix \"ypatch\";\n     import ietf-restconf { prefix rc; }\n     organization\n\
    \       \"IETF NETCONF (Network Configuration) Working Group\";\n     contact\n\
    \       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n        WG List:\
    \  <mailto:netconf@ietf.org>\n        Author:   Andy Bierman\n               \
    \   <mailto:andy@yumaworks.com>\n        Author:   Martin Bjorklund\n        \
    \          <mailto:mbj@tail-f.com>\n        Author:   Kent Watsen\n          \
    \        <mailto:kwatsen@juniper.net>\";\n     description\n       \"This module\
    \ contains conceptual YANG specifications\n        for the YANG Patch and YANG\
    \ Patch Status data structures.\n        Note that the YANG definitions within\
    \ this module do not\n        represent configuration data of any kind.\n    \
    \    The YANG grouping statements provide a normative syntax\n        for XML\
    \ and JSON message-encoding purposes.\n        Copyright (c) 2017 IETF Trust and\
    \ the persons identified as\n        authors of the code.  All rights reserved.\n\
    \        Redistribution and use in source and binary forms, with or\n        without\
    \ modification, is permitted pursuant to, and subject\n        to the license\
    \ terms contained in, the Simplified BSD License\n        set forth in Section\
    \ 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n\
    \        (http://trustee.ietf.org/license-info).\n        This version of this\
    \ YANG module is part of RFC 8072; see\n        the RFC itself for full legal\
    \ notices.\";\n     revision 2017-02-22 {\n       description\n         \"Initial\
    \ revision.\";\n       reference\n         \"RFC 8072: YANG Patch Media Type.\"\
    ;\n     }\n     typedef target-resource-offset {\n       type string;\n      \
    \ description\n         \"Contains a data resource identifier string representing\n\
    \          a sub-resource within the target resource.\n          The document\
    \ root for this expression is the\n          target resource that is specified\
    \ in the\n          protocol operation (e.g., the URI for the PATCH request).\n\
    \          This string is encoded according to the same rules as those\n     \
    \     for a data resource identifier in a RESTCONF request URI.\";\n       reference\n\
    \          \"RFC 8040, Section 3.5.3.\";\n     }\n     rc:yang-data \"yang-patch\"\
    \ {\n       uses yang-patch;\n     }\n     rc:yang-data \"yang-patch-status\"\
    \ {\n       uses yang-patch-status;\n     }\n     grouping yang-patch {\n    \
    \   description\n         \"A grouping that contains a YANG container representing\
    \ the\n          syntax and semantics of a YANG Patch edit request message.\"\
    ;\n       container yang-patch {\n         description\n           \"Represents\
    \ a conceptual sequence of datastore edits,\n            called a patch.  Each\
    \ patch is given a client-assigned\n            patch identifier.  Each edit MUST\
    \ be applied\n            in ascending order, and all edits MUST be applied.\n\
    \            If any errors occur, then the target datastore MUST NOT\n       \
    \     be changed by the YANG Patch operation.\n            It is possible for\
    \ a datastore constraint violation to occur\n            due to any node in the\
    \ datastore, including nodes not\n            included in the 'edit' list.  Any\
    \ validation errors MUST\n            be reported in the reply message.\";\n \
    \        reference\n           \"RFC 7950, Section 8.3.\";\n         leaf patch-id\
    \ {\n           type string;\n           mandatory true;\n           description\n\
    \             \"An arbitrary string provided by the client to identify\n     \
    \         the entire patch.  Error messages returned by the server\n         \
    \     that pertain to this patch will be identified by this\n              'patch-id'\
    \ value.  A client SHOULD attempt to generate\n              unique 'patch-id'\
    \ values to distinguish between\n              transactions from multiple clients\
    \ in any audit logs\n              maintained by the server.\";\n         }\n\
    \         leaf comment {\n           type string;\n           description\n  \
    \           \"An arbitrary string provided by the client to describe\n       \
    \       the entire patch.  This value SHOULD be present in any\n             \
    \ audit logging records generated by the server for the\n              patch.\"\
    ;\n         }\n         list edit {\n           key edit-id;\n           ordered-by\
    \ user;\n           description\n             \"Represents one edit within the\
    \ YANG Patch request message.\n              The 'edit' list is applied in the\
    \ following manner:\n                - The first edit is conceptually applied\
    \ to a copy\n                  of the existing target datastore, e.g., the\n \
    \                 running configuration datastore.\n                - Each ascending\
    \ edit is conceptually applied to\n                  the result of the previous\
    \ edit(s).\n                - After all edits have been successfully processed,\n\
    \                  the result is validated according to YANG constraints.\n  \
    \              - If successful, the server will attempt to apply\n           \
    \       the result to the target datastore.\";\n           leaf edit-id {\n  \
    \           type string;\n             description\n               \"Arbitrary\
    \ string index for the edit.\n                Error messages returned by the server\
    \ that pertain\n                to a specific edit will be identified by this\
    \ value.\";\n           }\n           leaf operation {\n             type enumeration\
    \ {\n               enum create {\n                 description\n            \
    \       \"The target data node is created using the supplied\n               \
    \     value, only if it does not already exist.  The\n                    'target'\
    \ leaf identifies the data node to be\n                    created, not the parent\
    \ data node.\";\n               }\n               enum delete {\n            \
    \     description\n                   \"Delete the target node, only if the data\
    \ resource\n                    currently exists; otherwise, return an error.\"\
    ;\n               }\n               enum insert {\n                 description\n\
    \                   \"Insert the supplied value into a user-ordered\n        \
    \            list or leaf-list entry.  The target node must\n                \
    \    represent a new data resource.  If the 'where'\n                    parameter\
    \ is set to 'before' or 'after', then\n                    the 'point' parameter\
    \ identifies the insertion\n                    point for the target node.\";\n\
    \               }\n               enum merge {\n                 description\n\
    \                   \"The supplied value is merged with the target data\n    \
    \                node.\";\n               }\n               enum move {\n    \
    \             description\n                   \"Move the target node.  Reorder\
    \ a user-ordered\n                    list or leaf-list.  The target node must\
    \ represent\n                    an existing data resource.  If the 'where' parameter\n\
    \                    is set to 'before' or 'after', then the 'point'\n       \
    \             parameter identifies the insertion point to move\n             \
    \       the target node.\";\n               }\n               enum replace {\n\
    \                 description\n                   \"The supplied value is used\
    \ to replace the target\n                    data node.\";\n               }\n\
    \               enum remove {\n                 description\n                \
    \   \"Delete the target node if it currently exists.\";\n               }\n  \
    \           }\n             mandatory true;\n             description\n      \
    \         \"The datastore operation requested for the associated\n           \
    \     'edit' entry.\";\n           }\n           leaf target {\n             type\
    \ target-resource-offset;\n             mandatory true;\n             description\n\
    \               \"Identifies the target data node for the edit\n             \
    \   operation.  If the target has the value '/', then\n                the target\
    \ data node is the target resource.\n                The target node MUST identify\
    \ a data resource,\n                not the datastore resource.\";\n         \
    \  }\n           leaf point {\n             when \"(../operation = 'insert' or\
    \ ../operation = 'move')\"\n                + \"and (../where = 'before' or ../where\
    \ = 'after')\" {\n               description\n                 \"This leaf only\
    \ applies for 'insert' or 'move'\n                  operations, before or after\
    \ an existing entry.\";\n             }\n             type target-resource-offset;\n\
    \             description\n               \"The absolute URL path for the data\
    \ node that is being\n                used as the insertion point or move point\
    \ for the\n                target of this 'edit' entry.\";\n           }\n   \
    \        leaf where {\n             when \"../operation = 'insert' or ../operation\
    \ = 'move'\" {\n               description\n                 \"This leaf only\
    \ applies for 'insert' or 'move'\n                  operations.\";\n         \
    \    }\n             type enumeration {\n               enum before {\n      \
    \           description\n                   \"Insert or move a data node before\
    \ the data resource\n                    identified by the 'point' parameter.\"\
    ;\n               }\n               enum after {\n                 description\n\
    \                   \"Insert or move a data node after the data resource\n   \
    \                 identified by the 'point' parameter.\";\n               }\n\
    \               enum first {\n                 description\n                 \
    \  \"Insert or move a data node so it becomes ordered\n                    as\
    \ the first entry.\";\n               }\n               enum last {\n        \
    \         description\n                   \"Insert or move a data node so it becomes\
    \ ordered\n                    as the last entry.\";\n               }\n     \
    \        }\n             default last;\n             description\n           \
    \    \"Identifies where a data resource will be inserted\n                or moved.\
    \  YANG only allows these operations for\n                list and leaf-list data\
    \ nodes that are\n                'ordered-by user'.\";\n           }\n      \
    \     anydata value {\n             when \"../operation = 'create' \"\n      \
    \          + \"or ../operation = 'merge' \"\n                + \"or ../operation\
    \ = 'replace' \"\n                + \"or ../operation = 'insert'\" {\n       \
    \        description\n                 \"The anydata 'value' is only used for\
    \ 'create',\n                  'merge', 'replace', and 'insert' operations.\"\
    ;\n             }\n             description\n               \"Value used for this\
    \ edit operation.  The anydata 'value'\n                contains the target resource\
    \ associated with the\n                'target' leaf.\n                For example,\
    \ suppose the target node is a YANG container\n                named foo:\n  \
    \                  container foo {\n                      leaf a { type string;\
    \ }\n                      leaf b { type int32; }\n                    }\n   \
    \             The 'value' node contains one instance of foo:\n               \
    \     <value>\n                       <foo xmlns='example-foo-namespace'>\n  \
    \                        <a>some value</a>\n                          <b>42</b>\n\
    \                       </foo>\n                    </value>\n               \
    \  \";\n           }\n         }\n       }\n     } // grouping yang-patch\n  \
    \   grouping yang-patch-status {\n       description\n         \"A grouping that\
    \ contains a YANG container representing the\n          syntax and semantics of\
    \ a YANG Patch Status response\n          message.\";\n       container yang-patch-status\
    \ {\n         description\n           \"A container representing the response\
    \ message sent by the\n            server after a YANG Patch edit request message\
    \ has been\n            processed.\";\n         leaf patch-id {\n           type\
    \ string;\n           mandatory true;\n           description\n             \"\
    The 'patch-id' value used in the request.\";\n         }\n         choice global-status\
    \ {\n           description\n             \"Report global errors or complete success.\n\
    \              If there is no case selected, then errors\n              are reported\
    \ in the 'edit-status' container.\";\n           case global-errors {\n      \
    \       uses rc:errors;\n             description\n               \"This container\
    \ will be present if global errors that\n                are unrelated to a specific\
    \ edit occurred.\";\n           }\n           leaf ok {\n             type empty;\n\
    \             description\n               \"This leaf will be present if the request\
    \ succeeded\n                and there are no errors reported in the 'edit-status'\n\
    \                container.\";\n           }\n         }\n         container edit-status\
    \ {\n           description\n             \"This container will be present if\
    \ there are\n              edit-specific status responses to report.\n       \
    \       If all edits succeeded and the 'global-status'\n              returned\
    \ is 'ok', then a server MAY omit this\n              container.\";\n        \
    \   list edit {\n             key edit-id;\n             description\n       \
    \        \"Represents a list of status responses,\n                corresponding\
    \ to edits in the YANG Patch\n                request message.  If an 'edit' entry\
    \ was\n                skipped or not reached by the server,\n               \
    \ then this list will not contain a corresponding\n                entry for that\
    \ edit.\";\n             leaf edit-id {\n               type string;\n       \
    \         description\n                  \"Response status is for the 'edit' list\
    \ entry\n                   with this 'edit-id' value.\";\n             }\n  \
    \           choice edit-status-choice {\n               description\n        \
    \         \"A choice between different types of status\n                  responses\
    \ for each 'edit' entry.\";\n               leaf ok {\n                 type empty;\n\
    \                 description\n                   \"This 'edit' entry was invoked\
    \ without any\n                    errors detected by the server associated\n\
    \                    with this edit.\";\n               }\n               case\
    \ errors {\n                 uses rc:errors;\n                 description\n \
    \                  \"The server detected errors associated with the\n        \
    \            edit identified by the same 'edit-id' value.\";\n               }\n\
    \             }\n           }\n         }\n       }\n     }  // grouping yang-patch-status\n\
    \   }\n   <CODE ENDS>\n"
- title: 4.  IANA Considerations
  contents:
  - '4.  IANA Considerations

    '
- title: 4.1.  Registrations for New URI and YANG Module
  contents:
  - "4.1.  Registrations for New URI and YANG Module\n   This document registers one\
    \ URI as a namespace in the \"IETF XML\n   Registry\" [RFC3688].  It follows the\
    \ format in RFC 3688.\n      URI: urn:ietf:params:xml:ns:yang:ietf-yang-patch\n\
    \      Registrant Contact: The IESG.\n      XML: N/A; the requested URI is an\
    \ XML namespace.\n   This document registers one YANG module in the \"YANG Module\
    \ Names\"\n   registry [RFC6020].\n      name:         ietf-yang-patch\n     \
    \ namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-patch\n      prefix:   \
    \    ypatch\n      reference:    RFC 8072\n"
- title: 4.2.  Media Types
  contents:
  - '4.2.  Media Types

    '
- title: 4.2.1.  Media Type "application/yang-patch+xml"
  contents:
  - "4.2.1.  Media Type \"application/yang-patch+xml\"\n   Type name: application\n\
    \   Subtype name: yang-patch+xml\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: 8-bit\n      The \"utf-8\" charset is always\
    \ used for this type.\n      Each conceptual YANG data node is encoded according\
    \ to the\n      XML Encoding Rules and Canonical Format for the specific\n   \
    \   YANG data node type defined in [RFC7950].\n      In addition, the \"yang-patch\"\
    \ YANG Patch template found\n      in RFC 8072 defines the structure of a YANG\
    \ Patch request.\n   Security considerations: Security considerations related\n\
    \      to the generation and consumption of RESTCONF messages\n      are discussed\
    \ in Section 5 of RFC 8072.\n      Additional security considerations are specific\
    \ to the\n      semantics of particular YANG data models.  Each YANG module\n\
    \      is expected to specify security considerations for the\n      YANG data\
    \ defined in that module.\n   Interoperability considerations: RFC 8072 specifies\
    \ the format\n      of conforming messages and the interpretation thereof.\n \
    \  Published specification: RFC 8072\n   Applications that use this media type:\
    \ Instance document\n      data parsers used within a protocol or automation tool\n\
    \      that utilize the YANG Patch data structure.\n   Fragment identifier considerations:\
    \ The syntax and semantics\n      of fragment identifiers are the same as the\
    \ syntax and semantics\n      specified for the \"application/xml\" media type.\n\
    \   Additional information:\n      Deprecated alias names for this type: N/A\n\
    \      Magic number(s): N/A\n      File extension(s): None\n      Macintosh file\
    \ type code(s): \"TEXT\"\n   Person & email address to contact for further information:\
    \ See\n      the Authors' Addresses section of RFC 8072.\n   Intended usage: COMMON\n\
    \   Restrictions on usage: N/A\n   Author: See the Authors' Addresses section\
    \ of RFC 8072.\n   Change controller: Internet Engineering Task Force\n      (mailto:iesg@ietf.org).\n\
    \   Provisional registration? (standards tree only): no\n"
- title: 4.2.2.  Media Type "application/yang-patch+json"
  contents:
  - "4.2.2.  Media Type \"application/yang-patch+json\"\n   Type name: application\n\
    \   Subtype name: yang-patch+json\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: 8-bit\n      The \"utf-8\" charset is always\
    \ used for this type.\n      Each conceptual YANG data node is encoded according\
    \ to\n      RFC 7951.  A metadata annotation is encoded according to\n      RFC\
    \ 7952.  In addition, the \"yang-patch\" YANG Patch\n      template found in RFC\
    \ 8072 defines the structure of a\n      YANG Patch request.\n   Security considerations:\
    \ Security considerations related\n      to the generation and consumption of\
    \ RESTCONF messages\n      are discussed in Section 5 of RFC 8072.\n      Additional\
    \ security considerations are specific to the\n      semantics of particular YANG\
    \ data models.  Each YANG module\n      is expected to specify security considerations\
    \ for the\n      YANG data defined in that module.\n   Interoperability considerations:\
    \ RFC 8072 specifies the format\n      of conforming messages and the interpretation\
    \ thereof.\n   Published specification: RFC 8072\n   Applications that use this\
    \ media type: Instance document\n      data parsers used within a protocol or\
    \ automation tool\n      that utilize the YANG Patch data structure.\n   Fragment\
    \ identifier considerations: The syntax and semantics\n      of fragment identifiers\
    \ are the same as the syntax and semantics\n      specified for the \"application/json\"\
    \ media type.\n   Additional information:\n      Deprecated alias names for this\
    \ type: N/A\n      Magic number(s): N/A\n      File extension(s): None\n     \
    \ Macintosh file type code(s): \"TEXT\"\n   Person & email address to contact\
    \ for further information: See\n      the Authors' Addresses section of RFC 8072.\n\
    \   Intended usage: COMMON\n   Restrictions on usage: N/A\n   Author: See the\
    \ Authors' Addresses section of RFC 8072.\n   Change controller: Internet Engineering\
    \ Task Force\n      (mailto:iesg@ietf.org).\n   Provisional registration? (standards\
    \ tree only): no\n"
- title: 4.3.  RESTCONF Capability URNs
  contents:
  - "4.3.  RESTCONF Capability URNs\n   This document registers one capability identifier\
    \ in the \"RESTCONF\n   Capability URNs\" registry [RFC8040].  The review policy\
    \ for this\n   registry is \"IETF Review\" [RFC5226].\n   Index           Capability\
    \ Identifier\n   ------------------------------------------------------------------\n\
    \   :yang-patch     urn:ietf:params:restconf:capability:yang-patch:1.0\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The YANG Patch media type does not introduce\
    \ any significant new\n   security threats, beyond what is described in [RFC8040].\
    \  This\n   document defines edit processing instructions for a variant of the\n\
    \   PATCH method, as used within the RESTCONF protocol.  Message\n   integrity\
    \ is provided by the RESTCONF protocol.  There is no\n   additional capability\
    \ to validate that a patch has not been altered.\n   It may be possible to use\
    \ YANG Patch with other protocols besides\n   RESTCONF; this topic is outside\
    \ the scope of this document.\n   For RESTCONF, both the client and server MUST\
    \ be authenticated\n   according to Section 2 of [RFC8040].  It is important for\
    \ RESTCONF\n   server implementations to carefully validate all the edit request\n\
    \   parameters in some manner.  If the entire YANG Patch request cannot\n   be\
    \ completed, then no configuration changes to the system are done.\n   A PATCH\
    \ request MUST be applied atomically, as specified in Section 2\n   of [RFC5789].\n\
    \   A RESTCONF server implementation SHOULD attempt to prevent system\n   disruption\
    \ due to incremental processing of the YANG Patch\n   \"edit\" list.  It may be\
    \ possible to construct an attack on such a\n   RESTCONF server, which relies\
    \ on the edit processing order mandated\n   by YANG Patch.  A server SHOULD apply\
    \ only the fully validated\n   configuration to the underlying system.  For example,\
    \ an \"edit\" list\n   that deleted an interface and then recreated it could cause\
    \ system\n   disruption if the \"edit\" list was incrementally applied.\n   A\
    \ RESTCONF server implementation SHOULD attempt to prevent system\n   disruption\
    \ due to excessive resource consumption required to fulfill\n   YANG Patch edit\
    \ requests.  On such an implementation, it may be\n   possible to construct an\
    \ attack that attempts to consume all\n   available memory or other resource types.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC5789]  Dusseault, L. and J. Snell, \"PATCH Method for HTTP\",\n      \
    \        RFC 5789, DOI 10.17487/RFC5789, March 2010,\n              <http://www.rfc-editor.org/info/rfc5789>.\n\
    \   [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n   \
    \           the Network Configuration Protocol (NETCONF)\", RFC 6020,\n      \
    \        DOI 10.17487/RFC6020, October 2010,\n              <http://www.rfc-editor.org/info/rfc6020>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159,\n        \
    \      March 2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]  Fielding,\
    \ R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Semantics and Content\",\n              RFC 7231, DOI 10.17487/RFC7231,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <http://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n    \
    \          RFC 7951, DOI 10.17487/RFC7951, August 2016,\n              <http://www.rfc-editor.org/info/rfc7951>.\n\
    \   [RFC7952]  Lhotka, L., \"Defining and Using Metadata with YANG\",\n      \
    \        RFC 7952, DOI 10.17487/RFC7952, August 2016,\n              <http://www.rfc-editor.org/info/rfc7952>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <http://www.rfc-editor.org/info/rfc8040>.\n   [W3C.REC-xml-20081126]\n  \
    \            Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., and\n     \
    \         F. Yergeau, \"Extensible Markup Language (XML) 1.0\n              (Fifth\
    \ Edition)\", World Wide Web Consortium\n              Recommendation REC-xml-20081126,\
    \ November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC5226]  Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May 2008,\n         \
    \     <http://www.rfc-editor.org/info/rfc5226>.\n"
- title: Appendix A.  Example YANG Module
  contents:
  - "Appendix A.  Example YANG Module\n   The example YANG module used in this document\
    \ represents a simple\n   media jukebox interface.  The \"example-jukebox\" YANG\
    \ module is\n   defined in [RFC8040].\n   YANG tree diagram for the \"example-jukebox\"\
    \ module:\n      +--rw jukebox!\n         +--rw library\n         |  +--rw artist*\
    \ [name]\n         |  |  +--rw name     string\n         |  |  +--rw album* [name]\n\
    \         |  |     +--rw name     string\n         |  |     +--rw genre?   identityref\n\
    \         |  |     +--rw year?    uint16\n         |  |     +--rw admin\n    \
    \     |  |     |  +--rw label?              string\n         |  |     |  +--rw\
    \ catalogue-number?   string\n         |  |     +--rw song* [name]\n         |\
    \  |        +--rw name        string\n         |  |        +--rw location    string\n\
    \         |  |        +--rw format?     string\n         |  |        +--rw length?\
    \     uint32\n         |  +--ro artist-count?   uint32\n         |  +--ro album-count?\
    \    uint32\n         |  +--ro song-count?     uint32\n         +--rw playlist*\
    \ [name]\n         |  +--rw name           string\n         |  +--rw description?\
    \   string\n         |  +--rw song* [index]\n         |     +--rw index    uint32\n\
    \         |     +--rw id       instance-identifier\n         +--rw player\n  \
    \          +--rw gap?   decimal64\n     rpcs:\n      +---x play\n         +--ro\
    \ input\n            +--ro playlist       string\n            +--ro song-number\
    \    uint32\n"
- title: A.1.  YANG Patch Examples
  contents:
  - "A.1.  YANG Patch Examples\n   This section includes RESTCONF examples.  Most\
    \ examples are shown in\n   JSON encoding [RFC7159], and some are shown in XML\
    \ encoding\n   [W3C.REC-xml-20081126].\n"
- title: 'A.1.1.  Add Resources: Error'
  contents:
  - "A.1.1.  Add Resources: Error\n   The following example shows several songs being\
    \ added to an existing\n   album.  Each edit contains one song.  The first song\
    \ already exists,\n   so an error will be reported for that edit.  The rest of\
    \ the edits\n   were not attempted, since the first edit failed.  XML encoding\
    \ is\n   used in this example.\n   Request from the RESTCONF client:\n      PATCH\
    \ /restconf/data/example-jukebox:jukebox/\\\n         library/artist=Foo%20Fighters/album=Wasting%20Light\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+xml\n\
    \      Content-Type: application/yang-patch+xml\n      <yang-patch xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-patch\"\
    >\n        <patch-id>add-songs-patch</patch-id>\n        <edit>\n          <edit-id>edit1</edit-id>\n\
    \          <operation>create</operation>\n          <target>/song=Bridge%20Burning</target>\n\
    \          <value>\n            <song xmlns=\"http://example.com/ns/example-jukebox\"\
    >\n              <name>Bridge Burning</name>\n              <location>/media/bridge_burning.mp3</location>\n\
    \              <format>MP3</format>\n              <length>288</length>\n    \
    \        </song>\n          </value>\n        </edit>\n        <edit>\n      \
    \    <edit-id>edit2</edit-id>\n          <operation>create</operation>\n     \
    \     <target>/song=Rope</target>\n          <value>\n            <song xmlns=\"\
    http://example.com/ns/example-jukebox\">\n              <name>Rope</name>\n  \
    \            <location>/media/rope.mp3</location>\n              <format>MP3</format>\n\
    \              <length>259</length>\n            </song>\n          </value>\n\
    \        </edit>\n        <edit>\n          <edit-id>edit3</edit-id>\n       \
    \   <operation>create</operation>\n          <target>/song=Dear%20Rosemary</target>\n\
    \          <value>\n            <song xmlns=\"http://example.com/ns/example-jukebox\"\
    >\n              <name>Dear Rosemary</name>\n              <location>/media/dear_rosemary.mp3</location>\n\
    \              <format>MP3</format>\n              <length>269</length>\n    \
    \        </song>\n          </value>\n        </edit>\n      </yang-patch>\n \
    \  XML response from the RESTCONF server:\n      HTTP/1.1 409 Conflict\n     \
    \ Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Last-Modified:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Content-Type: application/yang-data+xml\n\
    \      <yang-patch-status\n         xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-patch\"\
    >\n        <patch-id>add-songs-patch</patch-id>\n        <edit-status>\n     \
    \     <edit>\n             <edit-id>edit1</edit-id>\n             <errors>\n \
    \               <error>\n                   <error-type>application</error-type>\n\
    \                   <error-tag>data-exists</error-tag>\n                   <error-path\n\
    \                     xmlns:jb=\"http://example.com/ns/example-jukebox\">\n  \
    \                   /jb:jukebox/jb:library\n                     /jb:artist[jb:name='Foo\
    \ Fighters']\n                     /jb:album[jb:name='Wasting Light']\n      \
    \               /jb:song[jb:name='Bridge Burning']\n                   </error-path>\n\
    \                   <error-message>\n                     Data already exists;\
    \ cannot be created\n                   </error-message>\n                </error>\n\
    \             </errors>\n          </edit>\n       </edit-status>\n     </yang-patch-status>\n\
    \   JSON response from the RESTCONF server:\n   The following response is shown\
    \ in JSON format to highlight the\n   difference in the \"error-path\" object\
    \ encoding.  For JSON, the\n   instance-identifier encoding specified in [RFC7951]\
    \ is used.\n      HTTP/1.1 409 Conflict\n      Date: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Server: example-server\n      Last-Modified: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Content-Type: application/yang-data+json\n      {\n        \"ietf-yang-patch:yang-patch-status\"\
    \ : {\n          \"patch-id\" : \"add-songs-patch\",\n          \"edit-status\"\
    \ : {\n            \"edit\" : [\n              {\n                \"edit-id\"\
    \ : \"edit1\",\n                \"errors\" : {\n                  \"error\" :\
    \ [\n                    {\n                      \"error-type\": \"application\"\
    ,\n                      \"error-tag\": \"data-exists\",\n                   \
    \   \"error-path\": \"/example-jukebox:jukebox/library\\\n                   \
    \      /artist[name='Foo Fighters']\\\n                         /album[name='Wasting\
    \ Light']\\\n                         /song[name='Bridge Burning']\",\n      \
    \                \"error-message\":\n                        \"Data already exists;\
    \ cannot be created\"\n                    }\n                  ]\n          \
    \      }\n              }\n            ]\n          }\n        }\n      }\n"
- title: 'A.1.2.  Add Resources: Success'
  contents:
  - "A.1.2.  Add Resources: Success\n   The following example shows several songs\
    \ being added to an existing\n   album.\n   o  Each of two edits contains one\
    \ song.\n   o  Both edits succeed, and new sub-resources are created.\n   Request\
    \ from the RESTCONF client:\n      PATCH /restconf/data/example-jukebox:jukebox/\\\
    \n         library/artist=Foo%20Fighters/album=Wasting%20Light \\\n         HTTP/1.1\n\
    \      Host: example.com\n      Accept: application/yang-data+json\n      Content-Type:\
    \ application/yang-patch+json\n      {\n        \"ietf-yang-patch:yang-patch\"\
    \ : {\n          \"patch-id\" : \"add-songs-patch-2\",\n          \"edit\" : [\n\
    \            {\n              \"edit-id\" : \"edit1\",\n              \"operation\"\
    \ : \"create\",\n              \"target\" : \"/song=Rope\",\n              \"\
    value\" : {\n                \"song\" : [\n                  {\n             \
    \       \"name\" : \"Rope\",\n                    \"location\" : \"/media/rope.mp3\"\
    ,\n                    \"format\" : \"MP3\",\n                    \"length\" :\
    \ 259\n                  }\n                ]\n              }\n            },\n\
    \            {\n              \"edit-id\" : \"edit2\",\n              \"operation\"\
    \ : \"create\",\n              \"target\" : \"/song=Dear%20Rosemary\",\n     \
    \         \"value\" : {\n                \"song\" : [\n                  {\n \
    \                   \"name\" : \"Dear Rosemary\",\n                    \"location\"\
    \ : \"/media/dear_rosemary.mp3\",\n                    \"format\" : \"MP3\",\n\
    \                    \"length\" : 269\n                  }\n                ]\n\
    \              }\n            }\n          ]\n        }\n      }\n   Response\
    \ from the RESTCONF server:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017\
    \ 20:56:30 GMT\n      Server: example-server\n      Last-Modified: Thu, 26 Jan\
    \ 2017 20:56:30 GMT\n      Content-Type: application/yang-data+json\n      {\n\
    \        \"ietf-yang-patch:yang-patch-status\" : {\n          \"patch-id\" : \"\
    add-songs-patch-2\",\n          \"ok\" : [null]\n        }\n      }\n"
- title: A.1.3.  Insert List Entry
  contents:
  - "A.1.3.  Insert List Entry\n   The following example shows a song being inserted\
    \ within an existing\n   playlist.  Song \"6\" in playlist \"Foo-One\" is being\
    \ inserted after\n   song \"5\" in the playlist.  The operation succeeds, so a\
    \ non-error\n   reply can be provided.\n    Request from the RESTCONF client:\n\
    \      PATCH /restconf/data/example-jukebox:jukebox/\\\n        playlist=Foo-One\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \      Content-Type: application/yang-patch+json\n      {\n        \"ietf-yang-patch:yang-patch\"\
    \ : {\n          \"patch-id\" : \"insert-song-patch\",\n          \"comment\"\
    \ : \"Insert song 6 after song 5\",\n          \"edit\" : [\n            {\n \
    \             \"edit-id\" : \"edit1\",\n              \"operation\" : \"insert\"\
    ,\n              \"target\" : \"/song=6\",\n              \"point\" : \"/song=5\"\
    ,\n              \"where\" : \"after\",\n              \"value\" : {\n       \
    \         \"example-jukebox:song\" : [\n                  {\n                \
    \    \"index\" : 6,\n                    \"id\" : \"/example-jukebox:jukebox/library\\\
    \n                      /artist[name='Foo Fighters']\\\n                     \
    \ /album[name='Wasting Light']\\\n                      /song[name='Bridge Burning']\"\
    \n                  }\n                ]\n              }\n            }\n   \
    \       ]\n        }\n   Response from the RESTCONF server:\n     HTTP/1.1 200\
    \ OK\n     Date: Thu, 26 Jan 2017 20:56:30 GMT\n     Server: example-server\n\
    \     Last-Modified: Thu, 26 Jan 2017 20:56:30 GMT\n     Content-Type: application/yang-data+json\n\
    \     {\n       \"ietf-yang-patch:yang-patch-status\" : {\n         \"patch-id\"\
    \ : \"insert-song-patch\",\n         \"ok\" : [null]\n       }\n     }\n"
- title: A.1.4.  Move List Entry
  contents:
  - "A.1.4.  Move List Entry\n   The following example shows a song being moved within\
    \ an existing\n   playlist.  Song \"1\" in playlist \"Foo-One\" is being moved\
    \ after\n   song \"3\" in the playlist.  Note that no \"value\" parameter is needed\n\
    \   for a \"move\" operation.  The operation succeeds, so a non-error reply\n\
    \   can be provided.\n   Request from the RESTCONF client:\n      PATCH /restconf/data/example-jukebox:jukebox/\\\
    \n        playlist=Foo-One HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \      Content-Type: application/yang-patch+json\n      {\n        \"ietf-yang-patch:yang-patch\"\
    \ : {\n          \"patch-id\" : \"move-song-patch\",\n          \"comment\" :\
    \ \"Move song 1 after song 3\",\n          \"edit\" : [\n            {\n     \
    \         \"edit-id\" : \"edit1\",\n              \"operation\" : \"move\",\n\
    \              \"target\" : \"/song=1\",\n              \"point\" : \"/song=3\"\
    ,\n              \"where\" : \"after\"\n            }\n          ]\n        }\n\
    \      }\n   Response from the RESTCONF server:\n      HTTP/1.1 200 OK\n     \
    \ Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Last-Modified:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Content-Type: application/yang-data+json\n\
    \      {\n        \"ietf-restconf:yang-patch-status\" : {\n          \"patch-id\"\
    \ : \"move-song-patch\",\n          \"ok\" : [null]\n        }\n      }\n"
- title: A.1.5.  Edit Datastore Resource
  contents:
  - "A.1.5.  Edit Datastore Resource\n   The following example shows how three top-level\
    \ data nodes from\n   different modules can be edited at the same time.\n   Example\
    \ module \"foo\" defines leaf X.  Example module \"bar\" defines\n   container\
    \ Y, with child leafs A and B.  Example module \"baz\" defines\n   list Z, with\
    \ key C and child leafs D and E.\n   Request from the RESTCONF client:\n     \
    \ PATCH /restconf/data HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \      Content-Type: application/yang-patch+json\n      {\n        \"ietf-yang-patch:yang-patch\"\
    \ : {\n          \"patch-id\" : \"datastore-patch-1\",\n          \"comment\"\
    \ : \"Edit 3 top-level data nodes at once\",\n          \"edit\" : [\n       \
    \     {\n              \"edit-id\" : \"edit1\",\n              \"operation\" :\
    \ \"create\",\n              \"target\" : \"/foo:X\",\n              \"value\"\
    \ : {\n                \"foo:X\" : 42\n              }\n            },\n     \
    \       {\n              \"edit-id\" : \"edit2\",\n              \"operation\"\
    \ : \"merge\",\n              \"target\" : \"/bar:Y\",\n              \"value\"\
    \ : {\n                \"bar:Y\" : {\n                  \"A\" : \"test1\",\n \
    \                 \"B\" : 99\n                }\n              }\n           \
    \ },\n            {\n              \"edit-id\" : \"edit3\",\n              \"\
    operation\" : \"replace\",\n              \"target\" : \"/baz:Z=2\",\n       \
    \       \"value\" : {\n                \"baz:Z\" : [\n                  {\n  \
    \                  \"C\" : 2,\n                    \"D\" : 100,\n            \
    \        \"E\" : false\n                  }\n                ]\n             \
    \ }\n            }\n          ]\n        }\n      }\n   Response from the RESTCONF\
    \ server:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n\
    \      Server: example-server\n      Last-Modified: Thu, 26 Jan 2017 20:55:30\
    \ GMT\n      Content-Type: application/yang-data+json\n      {\n        \"ietf-yang-patch:yang-patch-status\"\
    \ : {\n          \"patch-id\" : \"datastore-patch-1\",\n          \"ok\" : [null]\n\
    \        }\n      }\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Rex Fernando for his contributions\
    \ to\n   this document.\n   Contributions to this material by Andy Bierman are\
    \ based upon work\n   supported by the United States Army, Space & Terrestrial\n\
    \   Communications Directorate (S&TCD) under Contract\n   No. W15P7T-13-C-A616.\
    \  Any opinions, findings, and conclusions or\n   recommendations expressed in\
    \ this material are those of the author(s)\n   and do not necessarily reflect\
    \ the views of the S&TCD.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks\n   Email: andy@yumaworks.com\n\
    \   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n   Kent Watsen\n\
    \   Juniper Networks\n   Email: kwatsen@juniper.net\n"
