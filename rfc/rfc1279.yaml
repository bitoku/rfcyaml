- title: __initial_text__
  contents:
  - "Requests for Comments 1279                   University College London\n    \
    \                      X.500 and Domains\nStatus of this Memo\n    This memo defines\
    \ an Experimental Protocol for the Internet\n    community.  Discussion and suggestions\
    \ for improvement are\n    requested.  Please refer to the current edition of\
    \ the ``IAB\n    Official Protocol Standards'' for the standardization state and\n\
    \    status of this protocol.  Distribution of this memo is unlimited.\nAbstract\n\
    \    This RFCconsiders X.500 in relation to Internet and UK Domains.\n    A basic\
    \ model of X.500 providing a higher level and more\n    descriptive naming structure\
    \ is emphasised.  In addition, a\n    mapping of domains onto X.500 is proposed,\
    \ which gives a range of\n    new management and user facilities over and above\
    \ those currently\n    available.  This specification proposes an experimental\
    \ new\nRFC 1279                X.500 and Domains                November 1991\n\
    1  The Domain Name System\nThe Domain (Nameserver) System (DNS) provides a hierarchical\
    \ resource\nlabelling system [Moc87a] [Moc87b] [Lar83].  Example domains are:\n\
    MIT.EDU\nVENERA.ISI.EDU\nCS.UCL.AC.UK\nEntries usually have a single name, although\
    \ pointers to entries (not\nsubtrees) may be provided by CNAME records.  Information\
    \ (resource\nrecords) is associated with each entry.  Name components are typically\n\
    chosen to be shortish (e.g., ``CS'').\nRFC 822 mailbox names are closely related\
    \ [Cro82].  For example:\n    <S.Kille@CS.UCL.AC.UK>\nThe local-part of the RFC\
    \ 822 mailbox can be considered as one level\nlower in the domain hierarchy.\n\
    2  X.500\nThe OSI Directory, usually known as X.500, provides a very general\n\
    naming framework [CCI88].  A basic usage of X.500 is to provide\nOrganisationally\
    \ Structured Names.  A Schema for this is defined\nwithin the standard.  Name\
    \ components will typically have longish\nvalues.  This is an example directory\
    \ name represented in Tabular\nform:\n           Country              GB\n   \
    \        Organisation         University College London\n           Organisational\
    \ Unit  Computer Science\n           Common Name          Stephen E. Hardcastle-Kille\n\
    This can also be written in the ``User Friendly Name'' notation\ndefined in [HK91].\
    \  This syntax is used for names in the rest of this\ndocument:\nRFC 1279    \
    \            X.500 and Domains                November 1991\n    University College\
    \ London, GB\nThis type of structure is termed ``organisational X.500''.  This\
    \ is a\nsubset of the general capabilities.\n3  The basic model\n    X.500 has\
    \ as much relation to the DNS as DNS has to ARP. Paul\n    Mockapetris\nThis is,\
    \ essentially, the position adopted here.  The basic model is\nthat organisational\
    \ X.500 is providing a layer of naming at the level\nabove domain names.  These\
    \ structured names can be considered to form\na naming layer above domain names.\
    \  There are the following key\ndifferences:\n o  Organisational X.500 tends to\
    \ use longer and more descriptive\n    values\n o  The organisational X.500 DIT\
    \ is slightly shallower than the DNS\n    tree\n o  X.500 has a richer information\
    \ framework than DNS\nThese differences suggest that the following should NOT\
    \ be done:\n o  Represent X.500 information in the DNS\n o  Have an algorithmic\
    \ mapping between the two hierarchies\nThis note proposes to represent DNS information\
    \ in the DIT, and to\nprovide for a loose coupling between the two trees.  This\
    \ note does\nnot propose an equivalencing of X.500 and Domains.\nThe proposed\
    \ model is illustrated in Figure 1.  Both an organisational\nand domain structure\
    \ is represented in the DIT, by use of appropriate\nobject classes and attribute\
    \ types.  A weak linkage is provided\nbetween the two parts of the tree by use\
    \ of special attributes.  Here,\nthe linkage is 1:1, but it may be more complex\
    \ for some parts of the\norganisational DIT or domain namespace.  The linkage\
    \ is achieved by\nRFC 1279                X.500 and Domains                November\
    \ 1991\n                  j jZ Z\n               j j       ZZ\n            jj\
    \              Z Z\n        jjj                    ZZ\nDomain Component=UK   \
    \       Country Name=GB\n                                |\n                 \
    \               |\n                                |\nDomain Component=AC    \
    \   Organisation Name=Univeristy College London\n                        *   \
    \     BB\n              ss                  BBB\nDomain Component=UCL      Org\
    \ Unit Name=Computer Science\n      |                *\n      ||     ss\nDomain\
    \ Component=CS       Common Name=Steve Kille\n     |                  *\n    \
    \ |        ss\nDomain Component=S.Kille\n                    Figure 1:  Example\
    \ X.500 tree\nRFC 1279                X.500 and Domains                November\
    \ 1991\n4  Representing Domains in X.500\nDomains are at the level below X.500\
    \ names of the form illustrated in\nthe previous section.  However, it is also\
    \ possible to use X.500 in\nother ways.  In particular, there are benefits from\
    \ representing\nDomains in X.500.  Note that this is very different to equivalencing,\n\
    as no attempt is made to represent X.500 information within the domain\nscheme.\
    \  There are the following potential advantages:\n o  Domain Services (DNS and\
    \ NRS) could be replaced with an OSI\n    service (some may not view this as an\
    \ advantage).  This is\n    particularly attractive for OSI services, where use\
    \ of a non-OSI\n    directory may be inappropriate.\n o  For Internet sites, access\
    \ to domain information (beyond MX\n    records) could be provided for systems\
    \ registered remotely.  For\n    UK Academic Community sites, access to domain\
    \ information for\n    domains not registered in the NRS could be given.  For\
    \ sites\n    neither on the Internet nor in the UK Academic Community there\n\
    \    will usually be even more of an advantage, as they usually have\n    very\
    \ limited information on domains.\n o  Assuming that information is downloaded\
    \ from an X.500 database\n    into a DNS or NRS system, the remote management\
    \ facilities of\n    X.500 could be used.  This is possible because of the extra\n\
    \    security features of X.500.\n    Note: For initial work, the converse situation\
    \ of information\n        being mastered in Domain Databases and uploaded into\
    \ the X.500\n        DIT is more likely.\n o  User access to the domain data,\
    \ and in particular searching, could\n    be provided.  This would allow users\
    \ to browse the domain\n    namespace, and to determine information associated\
    \ with the\n    domains.\n o  The X.500 framework would allow for additional management\n\
    \    information to be stored, and to relate the domain names into a\n    more\
    \ complex structure of information.  For example, this might\n    allow for the\
    \ managers of a system to be identified, and\n    information on how to contact\
    \ the manager.\nRFC 1279                X.500 and Domains                November\
    \ 1991\n o  A facility to map RFC 822 mailbox into a Directory Name (and thus\n\
    \    access other user information on the basis of this key) could be\n    provided.\
    \  This may be useful for the user to determine\n    information about a message\
    \ originator.\n o  This technique may be useful to facilitate introduction of\n\
    \    security, as it will enable certificates to be associated with\n    domains\
    \ and mailboxes.  This may be very useful for the privacy\n    enchanced mail\
    \ work [Lin89].\n5  Representing Domain Names\nA new attribute syntax is defined:\n\
    CaseIgnoreIA5StringSyntax ATTRIBUTE-SYNTAX\n    IA5String\n    MATCHES FOR EQUALITY\
    \ SUBSTRINGS ORDERING\nA new attribute and two new object classes are defined:\n\
    DomainComponent ATTRIBUTE\n    WITH ATTRIBUTE-SYNTAX caseIgnoreIA5StringSyntax\n\
    \    SINGLE VALUE\nDomain OBJECT-CLASS\n    SUBCLASS OF top\n    MUST CONTAIN\
    \ -DomainComponent\"\n    MAY CONTAIN -AssociatedName,\n        organizationName,\n\
    \        organizationalAttributeSet,\n        manager\"\nRFC822Mailbox OBJECT-CLASS\n\
    \    SUBCLASS OF Domain\n    MAY CONTAIN -commonName,\n       surname,\n     \
    \  description,\n       telephoneNumber,\n       postalAttributeSet,\nRFC 1279\
    \                X.500 and Domains                November 1991\nNote that the\
    \ attribute AssociatedName is defined in Section 11.  The\nmanager attribute is\
    \ defined in the COSINE and Internet naming\narchitecture [BHK91].  It allows\
    \ a manager to be associated with the\ndomain, which is useful where the manager\
    \ of the domain is different\nto the manager of the object defined by the AssociatedName.\
    \  This will\nallow any domain to be represented in an X.500 hierarchy.  The local\n\
    part of an RFC 822 mailbox is treated as a special sort of domain\ncomponent,\
    \ and so these can be represented in the tree as a natural\nextension of the hierarchy.\n\
    For example, consider the mailbox S.Kille@cs.ucl.ac.uk.  This will\nlead to the\
    \ following structure in the DIT:\n             ___________________________________________\n\
    \             |_Object_Class__|RDN_Type________|RDN_Value_|\n             | Domain\
    \        |DomainComponent |UK        |\n             | Domain        |DomainComponent\
    \ |AC        |\n             | Domain        |DomainComponent |UCL       |\n \
    \            | Domain        |DomainComponent |CS        |\n             |_RFC822Mailbox_|DomainComponent_|S.Kille__\
    \ |\nThis can be represented in User Friendly Name format as:\nDomainComponent=S.Kille,\
    \ DomainComponent=CS, DomainComponent=UCL,\nDomainComponent=AC, DomainComponent=UK\n\
    Note that the RFC822Mailbox Object Class is a subclass of Domain.\nSome attributes\
    \ are allowed to be associated with these objects.\nThere may be other additional\
    \ management attributes which it is useful\nto define (e.g., Machine Type, Owner,\
    \ Location etc.).  This allows\nsome information which truly belongs to the domain\
    \ to be represented\nthere.  It also allows for further information to be associated\
    \ with\nthe domain/mailbox when there is not a relevant part of the\norganisationally\
    \ structure DIT to be pointed at.  When there is an\nassociated part of the DIT,\
    \ information from that part of the DIT\nshould not be duplicated in the domain\
    \ entry.\n6  Wildcards\nWildcards are supported by having \"*\" as a special domain\
    \ component\nname.  If there is a need to emulate wildcard matching using the\n\
    RFC 1279                X.500 and Domains                November 1991\nwildcard\
    \ entry for *.*.PODUNK.COM would be represented in the DIT as:\n    DomainComponent=*,\
    \ DomainComponent=*,\n    DomainComponent=MIT, DomainComponent=COM\nIf A.B.PODUNK.COM\
    \ is looked up in the directory, the query will fail\nand indicate that two components\
    \ are matched.  A substitution should\nbe made, and *.*.PODUNK.COM looked up explicitly\
    \ to identify the\nassociated information.\n7  DNS Information\nDNS information\
    \ can be associated with an entry in the DIT. It is\nimportant that this is done\
    \ in a manner which is exactly equivalent to\nthe information stored in the DNS.\
    \ This will allow the DIT to have\ninformation loaded from the DNS or vice versa.\
    \  All (authoritative)\nrecords associated with a domain will be stored in the\
    \ DIT. There is\nno attempt made by the OSI Directory to emulate DNS caching or\
    \ TTL\nhandling.  It is assumed that the master entries are maintained by use\n\
    of DNS Zone Transfer (or equivalent), and that they can be treated as\nauthoritative.\
    \  There is a need to define an attribute syntax which\nrepresents a DNS record.\
    \  This then allows DNS records to be stored in\nthe DIT. There are three possible\
    \ encodings of this record:\nASN.1 Encoded This is the most natural approach in\
    \ terms of X.500.\n    However, it would require all users of this service to\
    \ handle the\n    new syntax, which would be awkward.  There is a problem with\n\
    \    handling the resource format in a general manner.\nDNS Binary Encoded Use\
    \ the formally defined record syntax.  This\n    would be convenient for access\
    \ to the data by DNS related\n    software, but would be an awkward encoding for\
    \ independent X.500\n    DUAs.\nText encoded Use of a text encoding derived from\
    \ the DNS\n    specifications.  This is straightforward to map onto DNS protocol,\n\
    \    and easy to support in a naive X.500 DUA. This approach is chosen.\nThe syntax\
    \ is defined in IA5 characters.  The BNF of the record uses\nthe definitions of\
    \ section 5.1 of RFC 1035.  It is\nRFC 1279                X.500 and Domains \
    \               November 1991\n    <rr> [ \";\" <comment> ]\nThree examples of\
    \ this (for domain C.ISI.EDU) might be:\n500 A   10.1.0.52                   \
    \     ; Basic address record\nIN 600 MX  10 VENERA.ISI.EDU.                ; MX\
    \ record\n600 IN MX  10 VENERA.ISI.EDU.                ; MX record - other order\n\
    Note that:\n o  The class and TTL may be in either order (following RFC 1035)\n\
    \ o  The class defaults to IN\n o  Domains must always be fully specified (i.e.,\
    \ master file\n    abbreviate rules are not used).\n o  The TTL for a record must\
    \ always be present (this saves looking at\n    the parent entry to find the SOA\
    \ record).\n o  Records (e.g., SOA) may be multiline.  Lines should be separated\n\
    \    with the two IA5 characters <CR><LF>.\nCNAME records are mapped symmetrically\
    \ onto Directory Aliases.\nThis is now defined in terms of attribute and object\
    \ class\ndefinitions.  A single record type is defined, as opposed to one\nattribute\
    \ type per record type.  This allows the definition to not\nrequire extension\
    \ when new DNS Record types are define.  However,\nthere is some loss of efficiency\
    \ if only a single record type is\nneeded, as filtering must be done by the DUA.\n\
    Similarly, no distinction is made on the basis of DNS class.  This\nmeans that\
    \ if there are two class hierarchies, that they must be\nrepresented in a single\
    \ DIT, and that information for different\nclasses must be separated by DUA filtering.\n\
    DNSDomain OBJECT-CLASS\n    SUBCLASS OF Domain\n    MAY CONTAIN -\n        DNSRecord\
    \ \"\nRFC 1279                X.500 and Domains                November 1991\n\
    DNSRecord ATTRIBUTE\n    ATTRIBUTE-SYNTAX IA5String\n    MATCHES FOR EQUALITY\n\
    Lookup of a domain is achieved by translating it algorithmically to a\nDistinguished\
    \ Name (DN), and reading back attributes desired.  This\ninformation can be managed\
    \ and searched in a straightforward fashion.\nThe information may also be downloaded\
    \ into a DNS database.  This\nshould be done by use of zone transfer.  A tool\
    \ to perform zone\ntransfer (in both directions) between a DNS Server and a DSA\
    \ would\nseem to be both straightforward and useful.  This would be a key tool\n\
    in a transition to X.500 based management of the DNS. It would also\nallow a large\
    \ part of the DNS namespace to be rapidly made available\nin an X.500 pilot.\n\
    Inverse information can be derived by the usual IN-ADDR domain, which\nwill be\
    \ represented in the same manner in the DIT.\n8  NRS Information\nInformation\
    \ associated with the UK NRS (Name Registration Scheme) can\nbe handled in a similar\
    \ manner [Lar83].  This is being developed in a\nseparate document by Alan Turland.\n\
    9  Application Entity Titles\nIn many cases, Application entities will be closely\
    \ related to\ndomains.  In some cases, it may be appropriate to give Application\n\
    Entities names which are related to the DNS part of the DIT. In this\ncase, the\
    \ Domain Name will be used to identify the application, and\nthe entry for the\
    \ domain will also be of object class Application\nProcess.  The children of this\
    \ entry will identify Application\nEntities, with names such as ``FTAM Service''.\n\
    10  Networks\nIt is clearly useful to represent networks within the DIT. A short\n\
    note on how to do this is given here.  It is likely that this\nRFC 1279      \
    \          X.500 and Domains                November 1991\ndefines an Object Class\
    \ for a general network, and shows how it can be\nsubclassed to define technology\
    \ specific networks.\nNetwork OBJECT-CLASS\n    SUBCLASS OF TOP\n    MAY CONTAIN\
    \ -\n      Manager,\n      Locality,\n      Description \"\nIPNetwork OBJECT-CLASS\n\
    \    SUBCLASS OF Network\n    MUST CONTAIN -AssociatedDomain\"\nThe Network Object\
    \ Class allows networks to be defined, and for useful\nattributes to be associated\
    \ with the entry.  A network will often\nappear in more than one organisational\
    \ structure, and this linkage\nshould be achieved by use of aliases.  This grouping\
    \ can facilitate\nmanagement of networks.\nThe subclass IPNetwork mandates linkage\
    \ into the DNS part of the DIT.\nThis will be represented in the DIT using the\
    \ structures of RFC 1101\n[Moc89].  Both of the domains which identify the network\
    \ should be\nrepresented in the Object Class.  For example, a network might have\n\
    the (user friendly) name:\n UCL-Ethernet, University College London, GB\nThis\
    \ would have associated domains 0.0.40.128.IN-ADDR.ARPA and\nUCL-ETHERNET.UCL.AC.UK.\
    \ These would both have the analogous DIT\nrepresentations.  For example:\nDomainComponent=0,\
    \ DomainComponent=0, DomainComponent=40,\nDomainComponent=128, DomainComponent=IN-ADDR,\
    \ DomainComponent=ARPA\n11  Linkage\nThere is a need to associate the organisational\
    \ X.500 DIT and the DNS\ntree.  The objects represented are different (Domain\
    \ 6= Organisation;\nPerson 6= RFC 822 Mailbox).  Therefore aliasing is not an\
    \ appropriate\nRFC 1279                X.500 and Domains                November\
    \ 1991\nstronger than that implied by the seeAlso attribute.  Therefore, we\n\
    define new attributes, which represent this stronger cross-linkage.\nThe same\
    \ mechanism can be used to link a domains with an Application\nEntity or an Application\
    \ Process.\nLinks from the organisational X.500 DIT to the DNS tree are provided\n\
    by a new attribute, which could be present in Organisation or\nOrganisational\
    \ Unit entries.\nObjectWithAssociatedDomain OBJECT-CLASS\n  SUBCLASS OF top\n\
    \  MUST CONTAIN -AssociatedDomain\"\nAssociatedDomain ATTRIBUTE\n  WITH ATTRIBUTE-SYNTAX\
    \ ia5StringSyntax\nFor example, the organisational entry:\n    University College\
    \ London, GB\nwould have an attribute:\n    AssociatedDomain = UCL.AC.UK\nSimilarly,\
    \ an RFC 822 mailbox attribute is used to link entries of\nPerson Object Class\
    \ to their associated DNS entry.  This attribute is\ndefined in the Cosine and\
    \ Internet Naming Architecture [BHK91].\nConversely, there are pointers from the\
    \ DNS represented tree into the\norganisational X.500 DIT:\nAssociatedName ATTRIBUTE\n\
    \  WITH ATTRIBUTE-SYNTAX distinguishedNameSyntax\nThis attribute is associated\
    \ with the Domain object class.\nThis entry is used to provide linkage from the\
    \ DNS X.500 Hierarchy\ninto the organisational X.500 hierarchy.  Where such entries\
    \ do not\nexist, attributes in the DNS entry (such as phone number) may be used.\n\
    It is recommended that information is not duplicated.  The preferred\nsetup is\
    \ for the DNS attributes to be rather skeletal, with pointers\nRFC 1279      \
    \          X.500 and Domains                November 1991\nFor example, the domain\
    \ UCL.AC.UK would be represented in the DIT as:\n    DomainComponent=UCL, DomainComponent=AC,\n\
    \    DomainComponent=UK\nThis entry would have in it an AssociatedName attribute\
    \ with value:\n    University College London, GB\nThis example shows a simple\
    \ case with 1:1 linkage.  There are cases\nwhere a domain might be associated\
    \ with multiple organisations, or an\norganisation with multiple domains.\n12\
    \  Conclusions and proposals for evaluation\nExperiments should be undertaken\
    \ to determine the practicality and\nutility of this scheme, in a pilot environment.\
    \  A possible approach\nto this experimentation is described in Appendix A.\n\
    Object Identifiers have been assigned for this purpose in the Cosine\nand Internet\
    \ Naming Architecture [BHK91].\nReferences\n[BHK91]  P. Barker and S.E. Hardcastle-Kille.\
    \ The COSINE and Internet\n         X.500 schema. Request for Comments RFC 1274,\
    \ Department of\n         Computer Science, University College London, November\
    \ 1991.\n[CCI88]  The Directory --- overview of concepts, models and services,\n\
    \         December 1988. CCITT X.500 Series Recommendations.\n[Cro82]  D.H. Crocker.\
    \ Standard of the format of ARPA internet text\n         messages. Request for\
    \ Comments 822, University of Delaware,\n         August 1982.\n[HK91]   S.E.\
    \ Hardcastle-Kille. Using the OSI directory to achieve\n         user friendly\
    \ naming. Request for Comments in preparation,\n         Department of Computer\
    \ Science, University College London,\n         November 1991.\nRFC 1279     \
    \           X.500 and Domains                November 1991\n[Lar83]  J. Larmouth.\
    \ JNT name registration technical guide, April\n         1983.\n[Lin89]  J. Linn.\
    \ Privacy Enhancement for Internet Electronic Mail:\n         Part 1 --- Message\
    \ Encipherment and Authentication\n         Procedures. Request for Comments 1113,\
    \ Bolt, Beranek, and\n         Newman, August 1989.\n[Moc87a] P. Mockapetris.\
    \ Domain names - concepts and facilities.\n         Request for Comments RFC 1034,\
    \ USC/Information Sciences\n         Institute, November 1987.\n[Moc87b] P. Mockapetris.\
    \ Domain names - implementation and\n         specification. Request for Comments\
    \ RFC 1035,\n         USC/Information Sciences Institute, November 1987.\n[Moc89]\
    \  P. Mockapetris. DNS encoding of network names and other\n         types. Request\
    \ for Comments RFC 1101, USC/Information\n         Sciences Institute, April 1989.\n\
    13  Security Considerations\nThis memo does not directly address security issues.\
    \  However, due to\nthe facilities of X.500, this proposal could lead to a more\
    \ secure way\nto access and manage domain information.\n14  Author's Address\n\
    \    Steve Hardcastle-Kille\n    Department of Computer Science\n    University\
    \ College London\n    Gower Street\n    WC1E 6BT\n    England\n    Phone:  +44-71-380-7294\n\
    \    EMail:  S.Kille@CS.UCL.AC.UK\nRFC 1279                X.500 and Domains \
    \               November 1991\nA  Possible Deployment Approach\nThis appendix\
    \ notes a possible approach to deploying an experiment to\nevaluate this mechanism.\
    \  The following components of a possible\nexperiment are noted.\n1.  User tool.\
    \  This will take a domain or mailbox as input.  This\n    will be looked up in\
    \ the DIT. This tool should be capable of:\n     o  Attempting to correct user\
    \ input\n     o  Helping browsing\n     o  Looking up information associated with\
    \ the domain (or mailbox)\n        and associated name, in particular the manager\
    \ (of both domain\n        and associated name) and information on the manager\
    \ (e.g.,\n        phone number and mailbox).\n     o  Supply DNS records\n   \
    \  o  Handle IN-ADDR.ARPA inverse lookups if supplied with an IP\n        Address\n\
    \     o  Look up networks\n2.  A procedural library to allow user interfaces to\
    \ make easy use of\n    these facilities.\n3.  Zone transfer tool.  This will\
    \ use the zone transfer protocol to\n    transfer information between a DSA and\
    \ Domain Nameserver.  When\n    writing to the DSA, attributes in an entry which\
    \ are not DNS\n    records should remain untouched.\n4.  Linkage patching tool.\
    \  When the organisational DIT is\n    established, associated domain pointers\
    \ are usually inserted.  A\n    tool can be written to search the DIT and insert\
    \ the reverse\n    pointers.\n5.  DNS Manager Tool.  This will allow user addition\
    \ of additional\n    information into the DNS part of the DIT. A standard DUA\
    \ can\n    probably be used for this.\nRFC 1279                X.500 and Domains\
    \                November 1991\n6.  Mailbox download tool.  This will allow download\
    \ of local\n    mailboxes, with pointers to the user entries.\n7.  Emulation DNS\
    \ Server, using the Directory as a database.  The\n    server should maintain\
    \ a permanent connection to its local DSA. As\n    there is no OSI bind, the response\
    \ of this server can be at least\n    as fast as a normal DNS server.  There can\
    \ be two variants of this\n    server.\n   (a)  Using a local DSA as a local database\
    \ but using DNS\n        distributed operations.\n   (b)  Do all lookups in the\
    \ directory (using Directory Distributed\n        Operations).\nAn initial experiment\
    \ is straightforward.  The Zone Transfer Tool (3)\ncan be used to download a large\
    \ part of the DNS space into a single\nDSA (there will be some restrictions, as\
    \ parts of the DNS hierarchy do\nnot permit zone transfer).  This can be used\
    \ repeatedly to maintain\nthe information.  The linkage patching tool (4) can\
    \ be used to put in\npointers to parts of the DIT. The user tool can then be used\
    \ (by all\nsites participation the the directory pilot) to look up domain\ninformation.\
    \  This will allow the utility of the approach to be\nevaluated.  The manager\
    \ tool (5) will allow extra information to be\nadded to parts of the DNS tree.\n\
    The next stage will be to distribute the DNS part of the DIT over\nmultiple DSAs\
    \ using Directory distribution techniques.\nThe emulation DNS Server (7) will\
    \ be useful to ensure that equivalent\nfunctionality is being offered by the Directory.\
    \  It can also be used\nto examine performance differences.\nA final step is to\
    \ master some parts of the DNS hierarchy in the DIT.\nBecause of the zone transfer\
    \ technique, this will be entirely\ntransparent to the DNS user.  Management benefits\
    \ can then be\nexamined.\n"
