- contents:
  - '                   Using TLS with IMAP, POP3 and ACAP

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "1. Motivation\n   The TLS protocol (formerly known as SSL) provides a way to
    secure an\n   application protocol from tampering and eavesdropping.  The option
    of\n   using such security is desirable for IMAP, POP and ACAP due to common\n
    \  connection eavesdropping and hijacking attacks [AUTH].  Although\n   advanced
    SASL authentication mechanisms can provide a lightweight\n   version of this service,
    TLS is complimentary to simple\n   authentication-only SASL mechanisms or deployed
    clear-text password\n   login commands.\n   Many sites have a high investment
    in authentication infrastructure\n   (e.g., a large database of a one-way-function
    applied to user\n   passwords), so a privacy layer which is not tightly bound
    to user\n   authentication can protect against network eavesdropping attacks\n
    \  without requiring a new authentication infrastructure and/or forcing\n   all
    users to change their password.  Recognizing that such sites will\n   desire simple
    password authentication in combination with TLS\n   encryption, this specification
    defines the PLAIN SASL mechanism for\n   use with protocols which lack a simple
    password authentication\n   command such as ACAP and SMTP.  (Note there is a separate
    RFC for the\n   STARTTLS command in SMTP [SMTPTLS].)\n   There is a strong desire
    in the IETF to eliminate the transmission of\n   clear-text passwords over unencrypted
    channels.  While SASL can be\n   used for this purpose, TLS provides an additional
    tool with different\n   deployability characteristics.  A server supporting both
    TLS with\n   simple passwords and a challenge/response SASL mechanism is likely
    to\n   interoperate with a wide variety of clients without resorting to\n   unencrypted
    clear-text passwords.\n   The STARTTLS command rectifies a number of the problems
    with using a\n   separate port for a \"secure\" protocol variant.  Some of these
    are\n   mentioned in section 7.\n"
  - contents:
    - "1.1. Conventions Used in this Document\n   The key words \"REQUIRED\", \"MUST\",
      \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\",\n   \"MAY\", and \"OPTIONAL\" in this
      document are to be interpreted as\n   described in \"Key words for use in RFCs
      to Indicate Requirement\n   Levels\" [KEYWORDS].\n   Terms related to authentication
      are defined in \"On Internet\n   Authentication\" [AUTH].\n   Formal syntax
      is defined using ABNF [ABNF].\n   In examples, \"C:\" and \"S:\" indicate lines
      sent by the client and\n   server respectively.\n"
    title: 1.1. Conventions Used in this Document
  title: 1. Motivation
- contents:
  - "2. Basic Interoperability and Security Requirements\n   The following requirements
    apply to all implementations of the\n   STARTTLS extension for IMAP, POP3 and
    ACAP.\n"
  - contents:
    - "2.1. Cipher Suite Requirements\n   Implementation of the TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
      [TLS] cipher\n   suite is REQUIRED.  This is important as it assures that any
      two\n   compliant implementations can be configured to interoperate.\n   All
      other cipher suites are OPTIONAL.\n"
    title: 2.1. Cipher Suite Requirements
  - contents:
    - "2.2. Privacy Operational Mode Security Requirements\n   Both clients and servers
      SHOULD have a privacy operational mode which\n   refuses authentication unless
      successful activation of an encryption\n   layer (such as that provided by TLS)
      occurs prior to or at the time\n   of authentication and which will terminate
      the connection if that\n   encryption layer is deactivated.  Implementations
      are encouraged to\n   have flexability with respect to the minimal encryption
      strength or\n   cipher suites permitted.  A minimalist approach to this\n   recommendation
      would be an operational mode where the\n   TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
      cipher suite is mandatory prior to\n   permitting authentication.\n   Clients
      MAY have an operational mode which uses encryption only when\n   it is advertised
      by the server, but authentication continues\n   regardless.  For backwards compatibility,
      servers SHOULD have an\n   operational mode where only the authentication mechanisms
      required by\n   the relevant base protocol specification are needed to successfully\n
      \  authenticate.\n"
    title: 2.2. Privacy Operational Mode Security Requirements
  - contents:
    - "2.3. Clear-Text Password Requirements\n   Clients and servers which implement
      STARTTLS MUST be configurable to\n   refuse all clear-text login commands or
      mechanisms (including both\n   standards-track and nonstandard mechanisms) unless
      an encryption\n   layer of adequate strength is active.  Servers which allow\n
      \  unencrypted clear-text logins SHOULD be configurable to refuse\n   clear-text
      logins both for the entire server, and on a per-user\n   basis.\n"
    title: 2.3. Clear-Text Password Requirements
  - contents:
    - "2.4. Server Identity Check\n   During the TLS negotiation, the client MUST
      check its understanding\n   of the server hostname against the server's identity
      as presented in\n   the server Certificate message, in order to prevent man-in-the-middle\n
      \  attacks.  Matching is performed according to these rules:\n   - The client
      MUST use the server hostname it used to open the\n     connection as the value
      to compare against the server name as\n     expressed in the server certificate.
      \ The client MUST NOT use any\n     form of the server hostname derived from
      an insecure remote source\n     (e.g., insecure DNS lookup).  CNAME canonicalization
      is not done.\n   - If a subjectAltName extension of type dNSName is present
      in the\n     certificate, it SHOULD be used as the source of the server's\n
      \    identity.\n   - Matching is case-insensitive.\n   - A \"*\" wildcard character
      MAY be used as the left-most name\n     component in the certificate.  For example,
      *.example.com would\n     match a.example.com, foo.example.com, etc. but would
      not match\n     example.com.\n   - If the certificate contains multiple names
      (e.g. more than one\n     dNSName field), then a match with any one of the fields
      is\n     considered acceptable.\n   If the match fails, the client SHOULD either
      ask for explicit user\n   confirmation, or terminate the connection and indicate
      the server's\n   identity is suspect.\n"
    title: 2.4. Server Identity Check
  - contents:
    - "2.5. TLS Security Policy Check\n   Both the client and server MUST check the
      result of the STARTTLS\n   command and subsequent TLS negotiation to see whether
      acceptable\n   authentication or privacy was achieved.  Ignoring this step\n
      \  completely invalidates using TLS for security.  The decision about\n   whether
      acceptable authentication or privacy was achieved is made\n   locally, is implementation-dependent,
      and is beyond the scope of this\n   document.\n"
    title: 2.5. TLS Security Policy Check
  title: 2. Basic Interoperability and Security Requirements
- contents:
  - "3. IMAP STARTTLS extension\n   When the TLS extension is present in IMAP, \"STARTTLS\"
    is listed as a\n   capability in response to the CAPABILITY command.  This extension\n
    \  adds a single command, \"STARTTLS\" to the IMAP protocol which is used\n   to
    begin a TLS negotiation.\n"
  - contents:
    - "3.1. STARTTLS Command\n   Arguments:  none\n   Responses:  no specific responses
      for this command\n   Result:     OK - begin TLS negotiation\n               BAD
      - command unknown or arguments invalid\n      A TLS negotiation begins immediately
      after the CRLF at the end of\n      the tagged OK response from the server.
      \ Once a client issues a\n      STARTTLS command, it MUST NOT issue further
      commands until a\n      server response is seen and the TLS negotiation is complete.\n
      \     The STARTTLS command is only valid in non-authenticated state.\n      The
      server remains in non-authenticated state, even if client\n      credentials
      are supplied during the TLS negotiation.  The SASL\n      [SASL] EXTERNAL mechanism
      MAY be used to authenticate once TLS\n      client credentials are successfully
      exchanged, but servers\n      supporting the STARTTLS command are not required
      to support the\n      EXTERNAL mechanism.\n      Once TLS has been started,
      the client MUST discard cached\n      information about server capabilities
      and SHOULD re-issue the\n      CAPABILITY command.  This is necessary to protect
      against\n      man-in-the-middle attacks which alter the capabilities list prior\n
      \     to STARTTLS.  The server MAY advertise different capabilities\n      after
      STARTTLS.\n      The formal syntax for IMAP is amended as follows:\n        command_any
      \  =/  \"STARTTLS\"\n   Example:    C: a001 CAPABILITY\n               S: *
      CAPABILITY IMAP4rev1 STARTTLS LOGINDISABLED\n               S: a001 OK CAPABILITY
      completed\n               C: a002 STARTTLS\n               S: a002 OK Begin
      TLS negotiation now\n               <TLS negotiation, further commands are under
      TLS layer>\n               C: a003 CAPABILITY\n               S: * CAPABILITY
      IMAP4rev1 AUTH=EXTERNAL\n               S: a003 OK CAPABILITY completed\n               C:
      a004 LOGIN joe password\n               S: a004 OK LOGIN completed\n"
    title: 3.1. STARTTLS Command
  - contents:
    - "3.2. IMAP LOGINDISABLED capability\n   The current IMAP protocol specification
      (RFC 2060) requires the\n   implementation of the LOGIN command which uses clear-text
      passwords.\n   Many sites may choose to disable this command unless encryption
      is\n   active for security reasons.  An IMAP server MAY advertise that the\n
      \  LOGIN command is disabled by including the LOGINDISABLED capability\n   in
      the capability response.  Such a server will respond with a tagged\n   \"NO\"
      response to any attempt to use the LOGIN command.\n   An IMAP server which implements
      STARTTLS MUST implement support for\n   the LOGINDISABLED capability on unencrypted
      connections.\n   An IMAP client which complies with this specification MUST
      NOT issue\n   the LOGIN command if this capability is present.\n   This capability
      is useful to prevent clients compliant with this\n   specification from sending
      an unencrypted password in an environment\n   subject to passive attacks.  It
      has no impact on an environment\n   subject to active attacks as a man-in-the-middle
      attacker can remove\n   this capability.  Therefore this does not relieve clients
      of the need\n   to follow the privacy mode recommendation in section 2.2.\n
      \  Servers advertising this capability will fail to interoperate with\n   many
      existing compliant IMAP clients and will be unable to prevent\n   those clients
      from disclosing the user's password.\n"
    title: 3.2. IMAP LOGINDISABLED capability
  title: 3. IMAP STARTTLS extension
- contents:
  - "4. POP3 STARTTLS extension\n   The POP3 STARTTLS extension adds the STLS command
    to POP3 servers.\n   If this is implemented, the POP3 extension mechanism [POP3EXT]
    MUST\n   also be implemented to avoid the need for client probing of multiple\n
    \  commands.  The capability name \"STLS\" indicates this command is\n   present
    and permitted in the current state.\n      STLS\n         Arguments: none\n         Restrictions:\n
    \            Only permitted in AUTHORIZATION state.\n         Discussion:\n             A
    TLS negotiation begins immediately after the CRLF at the\n             end of
    the +OK response from the server.  A -ERR response\n             MAY result if
    a security layer is already active.  Once a\n             client issues a STLS
    command, it MUST NOT issue further\n             commands until a server response
    is seen and the TLS\n             negotiation is complete.\n             The STLS
    command is only permitted in AUTHORIZATION state\n             and the server
    remains in AUTHORIZATION state, even if\n             client credentials are supplied
    during the TLS negotiation.\n             The AUTH command [POP-AUTH] with the
    EXTERNAL mechanism\n             [SASL] MAY be used to authenticate once TLS client\n
    \            credentials are successfully exchanged, but servers\n             supporting
    the STLS command are not required to support the\n             EXTERNAL mechanism.\n
    \            Once TLS has been started, the client MUST discard cached\n             information
    about server capabilities and SHOULD re-issue\n             the CAPA command.
    \ This is necessary to protect against\n             man-in-the-middle attacks
    which alter the capabilities list\n             prior to STLS.  The server MAY
    advertise different\n             capabilities after STLS.\n         Possible
    Responses:\n             +OK -ERR\n         Examples:\n             C: STLS\n
    \            S: +OK Begin TLS negotiation\n             <TLS negotiation, further
    commands are under TLS layer>\n               ...\n             C: STLS\n             S:
    -ERR Command not permitted when TLS active\n"
  title: 4. POP3 STARTTLS extension
- contents:
  - "5. ACAP STARTTLS extension\n   When the TLS extension is present in ACAP, \"STARTTLS\"
    is listed as a\n   capability in the ACAP greeting.  No arguments to this capability
    are\n   defined at this time.  This extension adds a single command,\n   \"STARTTLS\"
    to the ACAP protocol which is used to begin a TLS\n   negotiation.\n"
  - contents:
    - "5.1. STARTTLS Command\n   Arguments:  none\n   Responses:  no specific responses
      for this command\n   Result:     OK - begin TLS negotiation\n               BAD
      - command unknown or arguments invalid\n      A TLS negotiation begins immediately
      after the CRLF at the end of\n      the tagged OK response from the server.
      \ Once a client issues a\n      STARTTLS command, it MUST NOT issue further
      commands until a\n      server response is seen and the TLS negotiation is complete.\n
      \     The STARTTLS command is only valid in non-authenticated state.\n      The
      server remains in non-authenticated state, even if client\n      credentials
      are supplied during the TLS negotiation.  The SASL\n      [SASL] EXTERNAL mechanism
      MAY be used to authenticate once TLS\n      client credentials are successfully
      exchanged, but servers\n      supporting the STARTTLS command are not required
      to support the\n      EXTERNAL mechanism.\n      After the TLS layer is established,
      the server MUST re-issue an\n      untagged ACAP greeting.  This is necessary
      to protect against\n      man-in-the-middle attacks which alter the capabilities
      list prior\n      to STARTTLS.  The client MUST discard cached capability\n
      \     information and replace it with the information from the new ACAP\n      greeting.
      \ The server MAY advertise different capabilities after\n      STARTTLS.\n      The
      formal syntax for ACAP is amended as follows:\n        command_any   =/  \"STARTTLS\"\n
      \  Example:    S: * ACAP (SASL \"CRAM-MD5\") (STARTTLS)\n               C: a002
      STARTTLS\n               S: a002 OK \"Begin TLS negotiation now\"\n               <TLS
      negotiation, further commands are under TLS layer>\n               S: * ACAP
      (SASL \"CRAM-MD5\" \"PLAIN\" \"EXTERNAL\")\n"
    title: 5.1. STARTTLS Command
  title: 5. ACAP STARTTLS extension
- contents:
  - "6. PLAIN SASL mechanism\n   Clear-text passwords are simple, interoperate with
    almost all\n   existing operating system authentication databases, and are useful\n
    \  for a smooth transition to a more secure password-based\n   authentication
    mechanism.  The drawback is that they are unacceptable\n   for use over an unencrypted
    network connection.\n   This defines the \"PLAIN\" SASL mechanism for use with
    ACAP and other\n   protocols with no clear-text login command.  The PLAIN SASL
    mechanism\n   MUST NOT be advertised or used unless a strong encryption layer
    (such\n   as the provided by TLS) is active or backwards compatibility dictates\n
    \  otherwise.\n   The mechanism consists of a single message from the client to
    the\n   server.  The client sends the authorization identity (identity to\n   login
    as), followed by a US-ASCII NUL character, followed by the\n   authentication
    identity (identity whose password will be used),\n   followed by a US-ASCII NUL
    character, followed by the clear-text\n   password.  The client may leave the
    authorization identity empty to\n   indicate that it is the same as the authentication
    identity.\n   The server will verify the authentication identity and password
    with\n   the system authentication database and verify that the authentication\n
    \  credentials permit the client to login as the authorization identity.\n   If
    both steps succeed, the user is logged in.\n   The server MAY also use the password
    to initialize any new\n   authentication database, such as one suitable for CRAM-MD5\n
    \  [CRAM-MD5].\n   Non-US-ASCII characters are permitted as long as they are represented\n
    \  in UTF-8 [UTF-8].  Use of non-visible characters or characters which\n   a
    user may be unable to enter on some keyboards is discouraged.\n   The formal grammar
    for the client message using Augmented BNF [ABNF]\n   follows.\n   message         =
    [authorize-id] NUL authenticate-id NUL password\n   authenticate-id = 1*UTF8-SAFE
    \     ; MUST accept up to 255 octets\n   authorize-id    = 1*UTF8-SAFE      ;
    MUST accept up to 255 octets\n   password        = 1*UTF8-SAFE      ; MUST accept
    up to 255 octets\n   NUL             = %x00\n   UTF8-SAFE       = %x01-09 / %x0B-0C
    / %x0E-7F / UTF8-2 /\n                     UTF8-3 / UTF8-4 / UTF8-5 / UTF8-6\n
    \  UTF8-1          = %x80-BF\n   UTF8-2          = %xC0-DF UTF8-1\n   UTF8-3          =
    %xE0-EF 2UTF8-1\n   UTF8-4          = %xF0-F7 3UTF8-1\n   UTF8-5          = %xF8-FB
    4UTF8-1\n   UTF8-6          = %xFC-FD 5UTF8-1\n   Here is an example of how this
    might be used to initialize a CRAM-MD5\n   authentication database for ACAP:\n
    \  Example:    S: * ACAP (SASL \"CRAM-MD5\") (STARTTLS)\n               C: a001
    AUTHENTICATE \"CRAM-MD5\"\n               S: + \"<1896.697170952@postoffice.reston.mci.net>\"\n
    \              C: \"tim b913a602c7eda7a495b4e6e7334d3890\"\n               S:
    a001 NO (TRANSITION-NEEDED)\n                  \"Please change your password,
    or use TLS to login\"\n               C: a002 STARTTLS\n               S: a002
    OK \"Begin TLS negotiation now\"\n               <TLS negotiation, further commands
    are under TLS layer>\n               S: * ACAP (SASL \"CRAM-MD5\" \"PLAIN\" \"EXTERNAL\")\n
    \              C: a003 AUTHENTICATE \"PLAIN\" {21+}\n               C: <NUL>tim<NUL>tanstaaftanstaaf\n
    \              S: a003 OK CRAM-MD5 password initialized\n   Note: In this example,
    <NUL> represents a single ASCII NUL octet.\n"
  title: 6. PLAIN SASL mechanism
- contents:
  - "7. imaps and pop3s ports\n   Separate \"imaps\" and \"pop3s\" ports were registered
    for use with SSL.\n   Use of these ports is discouraged in favor of the STARTTLS
    or STLS\n   commands.\n   A number of problems have been observed with separate
    ports for\n   \"secure\" variants of protocols.  This is an attempt to enumerate
    some\n   of those problems.\n   - Separate ports lead to a separate URL scheme
    which intrudes into\n     the user interface in inappropriate ways.  For example,
    many web\n     pages use language like \"click here if your browser supports SSL.\"\n
    \    This is a decision the browser is often more capable of making than\n     the
    user.\n   - Separate ports imply a model of either \"secure\" or \"not secure.\"\n
    \    This can be misleading in a number of ways.  First, the \"secure\"\n     port
    may not in fact be acceptably secure as an export-crippled\n     cipher suite
    might be in use.  This can mislead users into a false\n     sense of security.
    \ Second, the normal port might in fact be\n     secured by using a SASL mechanism
    which includes a security layer.\n     Thus the separate port distinction makes
    the complex topic of\n     security policy even more confusing.  One common result
    of this\n     confusion is that firewall administrators are often misled into\n
    \    permitting the \"secure\" port and blocking the standard port.  This\n     could
    be a poor choice given the common use of SSL with a 40-bit\n     key encryption
    layer and plain-text password authentication is less\n     secure than strong
    SASL mechanisms such as GSSAPI with Kerberos 5.\n   - Use of separate ports for
    SSL has caused clients to implement only\n     two security policies: use SSL
    or don't use SSL.  The desirable\n     security policy \"use TLS when available\"
    would be cumbersome with\n     the separate port model, but is simple with STARTTLS.\n
    \  - Port numbers are a limited resource.  While they are not yet in\n     short
    supply, it is unwise to set a precedent that could double (or\n     worse) the
    speed of their consumption.\n"
  title: 7. imaps and pop3s ports
- contents:
  - "8. IANA Considerations\n   This constitutes registration of the \"STARTTLS\"
    and \"LOGINDISABLED\"\n   IMAP capabilities as required by section 7.2.1 of RFC
    2060 [IMAP].\n   The registration for the POP3 \"STLS\" capability follows:\n
    \  CAPA tag:                   STLS\n   Arguments:                  none\n   Added
    commands:             STLS\n   Standard commands affected: May enable USER/PASS
    as a side-effect.\n     CAPA command SHOULD be re-issued after successful completion.\n
    \  Announced states/Valid states: AUTHORIZATION state only.\n   Specification
    reference:    this memo\n   The registration for the ACAP \"STARTTLS\" capability
    follows:\n   Capability name:            STARTTLS\n   Capability keyword:         STARTTLS\n
    \  Capability arguments:       none\n   Published Specification(s): this memo\n
    \  Person and email address for further information:\n       see author's address
    section below\n   The registration for the PLAIN SASL mechanism follows:\n   SASL
    mechanism name:        PLAIN\n   Security Considerations:    See section 9 of
    this memo\n   Published specification:    this memo\n   Person & email address
    to contact for further information:\n       see author's address section below\n
    \  Intended usage:             COMMON\n   Author/Change controller:   see author's
    address section below\n"
  title: 8. IANA Considerations
- contents:
  - "9. Security Considerations\n   TLS only provides protection for data sent over
    a network connection.\n   Messages transferred over IMAP or POP3 are still available
    to server\n   administrators and usually subject to eavesdropping, tampering and\n
    \  forgery when transmitted through SMTP or NNTP.  TLS is no substitute\n   for
    an end-to-end message security mechanism using MIME security\n   multiparts [MIME-SEC].\n
    \  A man-in-the-middle attacker can remove STARTTLS from the capability\n   list
    or generate a failure response to the STARTTLS command.  In\n   order to detect
    such an attack, clients SHOULD warn the user when\n   session privacy is not active
    and/or be configurable to refuse to\n   proceed without an acceptable level of
    security.\n   A man-in-the-middle attacker can always cause a down-negotiation
    to\n   the weakest authentication mechanism or cipher suite available.  For\n
    \  this reason, implementations SHOULD be configurable to refuse weak\n   mechanisms
    or cipher suites.\n   Any protocol interactions prior to the TLS handshake are
    performed in\n   the clear and can be modified by a man-in-the-middle attacker.
    \ For\n   this reason, clients MUST discard cached information about server\n
    \  capabilities advertised prior to the start of the TLS handshake.\n   Clients
    are encouraged to clearly indicate when the level of\n   encryption active is
    known to be vulnerable to attack using modern\n   hardware (such as encryption
    keys with 56 bits of entropy or less).\n   The LOGINDISABLED IMAP capability (discussed
    in section 3.2) only\n   reduces the potential for passive attacks, it provides
    no protection\n   against active attacks.  The responsibility remains with the
    client\n   to avoid sending a password over a vulnerable channel.\n   The PLAIN
    mechanism relies on the TLS encryption layer for security.\n   When used without
    TLS, it is vulnerable to a common network\n   eavesdropping attack.  Therefore
    PLAIN MUST NOT be advertised or used\n   unless a suitable TLS encryption layer
    is active or backwards\n   compatibility dictates otherwise.\n   When the PLAIN
    mechanism is used, the server gains the ability to\n   impersonate the user to
    all services with the same password\n   regardless of any encryption provided
    by TLS or other network privacy\n   mechanisms.  While many other authentication
    mechanisms have similar\n   weaknesses, stronger SASL mechanisms such as Kerberos
    address this\n   issue.  Clients are encouraged to have an operational mode where
    all\n   mechanisms which are likely to reveal the user's password to the\n   server
    are disabled.\n   The security considerations for TLS apply to STARTTLS and the\n
    \  security considerations for SASL apply to the PLAIN mechanism.\n   Additional
    security requirements are discussed in section 2.\n"
  title: 9. Security Considerations
- contents:
  - "10. References\n   [ABNF]     Crocker, D. and P. Overell, \"Augmented BNF for
    Syntax\n              Specifications: ABNF\", RFC 2234, November 1997.\n   [ACAP]
    \    Newman, C. and J. Myers, \"ACAP -- Application\n              Configuration
    Access Protocol\", RFC 2244, November 1997.\n   [AUTH]     Haller, N. and R. Atkinson,
    \"On Internet Authentication\",\n              RFC 1704, October 1994.\n   [CRAM-MD5]
    Klensin, J., Catoe, R. and P. Krumviede, \"IMAP/POP\n              AUTHorize Extension
    for Simple Challenge/Response\", RFC\n              2195, September 1997.\n   [IMAP]
    \    Crispin, M., \"Internet Message Access Protocol - Version\n              4rev1\",
    RFC 2060, December 1996.\n   [KEYWORDS] Bradner, S., \"Key words for use in RFCs
    to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [MIME-SEC] Galvin, J., Murphy, S., Crocker, S. and N. Freed,\n              \"Security
    Multiparts for MIME: Multipart/Signed and\n              Multipart/Encrypted\",
    RFC 1847, October 1995.\n   [POP3]     Myers, J. and M. Rose, \"Post Office Protocol
    - Version 3\",\n              STD 53, RFC 1939, May 1996.\n   [POP3EXT]  Gellens,
    R., Newman, C. and L. Lundblade, \"POP3 Extension\n              Mechanism\",
    RFC 2449, November 1998.\n   [POP-AUTH] Myers, J., \"POP3 AUTHentication command\",
    RFC 1734,\n              December 1994.\n   [SASL]     Myers, J., \"Simple Authentication
    and Security Layer\n              (SASL)\", RFC 2222, October 1997.\n   [SMTPTLS]
    \ Hoffman, P., \"SMTP Service Extension for Secure SMTP over\n              TLS\",
    RFC 2487, January 1999.\n   [TLS]      Dierks, T. and C. Allen, \"The TLS Protocol
    Version 1.0\",\n              RFC 2246, January 1999.\n   [UTF-8]    Yergeau,
    F., \"UTF-8, a transformation format of ISO\n              10646\", RFC 2279,
    January 1998.\n"
  title: 10. References
- contents:
  - "11. Author's Address\n   Chris Newman\n   Innosoft International, Inc.\n   1050
    Lakes Drive\n   West Covina, CA 91790 USA\n   EMail: chris.newman@innosoft.com\n"
  title: 11. Author's Address
- contents:
  - "A. Appendix -- Compliance Checklist\n   An implementation is not compliant if
    it fails to satisfy one or more\n   of the MUST requirements for the protocols
    it implements.  An\n   implementation that satisfies all the MUST and all the
    SHOULD\n   requirements for its protocols is said to be \"unconditionally\n   compliant\";
    one that satisfies all the MUST requirements but not all\n   the SHOULD requirements
    for its protocols is said to be\n   \"conditionally compliant\".\n   Rules                                                 Section\n
    \  -----                                                 -------\n   Mandatory-to-implement
    Cipher Suite                      2.1\n   SHOULD have mode where encryption required
    \              2.2\n   server SHOULD have mode where TLS not required           2.2\n
    \  MUST be configurable to refuse all clear-text login\n     commands or mechanisms
    \                                2.3\n   server SHOULD be configurable to refuse
    clear-text\n     login commands on entire server and on per-user basis  2.3\n
    \  client MUST check server identity                        2.4\n   client MUST
    use hostname used to open connection         2.4\n   client MUST NOT use hostname
    from insecure remote lookup 2.4\n   client SHOULD support subjectAltName of dNSName
    type     2.4\n   client SHOULD ask for confirmation or terminate on fail  2.4\n
    \  MUST check result of STARTTLS for acceptable privacy     2.5\n   client MUST
    NOT issue commands after STARTTLS\n      until server response and negotiation
    done        3.1,4,5.1\n   client MUST discard cached information             3.1,4,5.1,9\n
    \  client SHOULD re-issue CAPABILITY/CAPA command       3.1,4\n   IMAP server
    with STARTTLS MUST implement LOGINDISABLED   3.2\n   IMAP client MUST NOT issue
    LOGIN if LOGINDISABLED        3.2\n   POP server MUST implement POP3 extensions
    \               4\n   ACAP server MUST re-issue ACAP greeting                  5.1\n
    \  client SHOULD warn when session privacy not active and/or\n     refuse to proceed
    without acceptable security level    9\n   SHOULD be configurable to refuse weak
    mechanisms or\n     cipher suites                                          9\n
    \  The PLAIN mechanism is an optional part of this specification.\n   However
    if it is implemented the following rules apply:\n   Rules                                                 Section\n
    \  -----                                                 -------\n   MUST NOT
    use PLAIN unless strong encryption active\n     or backwards compatibility dictates
    otherwise         6,9\n   MUST use UTF-8 encoding for characters in PLAIN          6\n"
  title: A. Appendix -- Compliance Checklist
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
