- title: __initial_text__
  contents:
  - '               Dynamically Switched Link Control Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes an experimental protocol developed by a project\n\
    \   team at Cray Research, Inc., in implementing support for circuit-\n   switched\
    \ T3 services.  The protocol is used for the control of\n   network connections\
    \ external to a host, but known to the host.  It is\n   documented here for the\
    \ benefit of others who may wish to perform\n   further research.\n   While working\
    \ with circuit-switched T3 networks, developers at Cray\n   Research, Inc., defined\
    \ a model wherein a host would generate control\n   messages for a network switch.\
    \  This work is described in RFC 1306,\n   \"Experiences Supporting By-Request\
    \ Circuit-Switched T3 Networks\".  In\n   order to simplify the model it was decided\
    \ that the inconsistencies\n   of switch control should be hidden from the host\
    \ generating the\n   control messages.  To that end, a protocol was defined and\n\
    \   implemented.  This RFC documents the Dynamically Switched Link\n   Control\
    \ Protocol (DSLCP), which is used for creation and control of\n   downstream network\
    \ links by a host.\n"
- title: 1.0  INTRODUCTION
  contents:
  - "1.0  INTRODUCTION\n   The Dynamically Switched Link Control Protocol (DSLCP)\
    \ allows a host\n   with knowledge of a special downstream network link to issue\
    \ messages\n   to control the status of that link.\n   This document describes\
    \ the functions of the DSLCP to control\n   external network connections.\n"
- title: 1.1  Motivation
  contents:
  - "1.1  Motivation\n   Circuit Switched Networks are becoming available to the Internet\n\
    \   community.  These networks are made available by requesting a\n   connection\
    \ through a switch.  Normally circuit switched network links\n   are disconnected,\
    \ and their prohibitive cost suggests that it is very\n   costly to leave them\
    \ connected at all times.\n   Internet users and hosts wish to send data over\
    \ a circuit switched\n   networks, but only connect the network links when a transport\n\
    \   connection is to be established.  While it would be possible to use\n   packet\
    \ routers to identify the need for switching a connection on and\n   off, only\
    \ the transport provider can positively identify the\n   beginning and end of\
    \ a transport session.  There must be a mechanism\n   to activate and deactivate\
    \ the link at the beginning and end of a\n   transport session.\n   The DSLCP\
    \ assumes that a transport provider has knowledge of a\n   downstream link which\
    \ must be setup before data transfer may take\n   place.  However, the details\
    \ of link setup may vary by the type of\n   link (circuit-switched or other),\
    \ specific hardware, or\n   administrative differences.  The DSLCP hides these\
    \ details from the\n   transport provider by offering a simple request/release\
    \ model of link\n   preparation.  The model assumes an entity in control of the\
    \ link\n   which handles the details of connection preparation while responding\n\
    \   to the DSLCP commands of the transport provider.  This entity is\n   called\
    \ the link controller.\n   The DSLCP allows internet hosts to dynamically change\
    \ the fabric of\n   the internet by sending messages through the internet in advance\
    \ of\n   data which is to travel across the newly created links.\n"
- title: 1.2  Scope
  contents:
  - "1.2  Scope\n   DSLCP is intended to provide an interface between transport providers\n\
    \   and arbitrary network links requiring creation, control, setup, or\n   conditioning\
    \ before data communications may take place.\n"
- title: 1.3  Interfaces
  contents:
  - "1.3  Interfaces\n   There are no specific user level interfaces to DSLCP, although\
    \ they\n   are not precluded.  Link control is a function of the network layer,\n\
    \   initiated by requests from the transport provider.\n   A DSLCP transaction\
    \ is defined as a transport provider communicating\n   with a link controller\
    \ for the duration of transport session.  A\n   network path between the host\
    \ providing transport services and the\n   link controller must exist in advance\
    \ of the DSLCP transaction.\n   Either party to an DSLCP transaction may asynchronously\
    \ generate\n   messages.\n"
- title: 1.4  Operation
  contents:
  - "1.4  Operation\n   The purpose of the DSLCP is to allow a transport provider\
    \ to request\n   the setup of a downstream network link so that data transfer\
    \ may take\n   place through that link.  DSLCP messages are assumed to be\n  \
    \ communicated between the transport provider and the link controller\n   through\
    \ a transport service, such as UDP or TCP, or through a network\n   service such\
    \ as IP.\n   DSLCP provides messages for link setup and teardown.  All the details\n\
    \   of link management are left to the link controller.  The transport\n   provider\
    \ is interested only whether the link is ready to carry data.\n"
- title: 1.5  Transmission
  contents:
  - "1.5  Transmission\n   DSLCP messages are carried through the network in datagrams\
    \ using\n   either IP or UDP.  DSLCP is designed to not require a reliable\n \
    \  transport protocol.\n"
- title: 2.0  DSLCP Architecture
  contents:
  - "2.0  DSLCP Architecture\n   DSLCP is used in a host environment.  Normally, transport\
    \ users on\n   the host will make requests of a transport provider to carry data\
    \ to\n   other hosts.  Some of these requests may require the preparation of a\n\
    \   downstream network link.  The transport provider has knowledge of\n   these\
    \ special network links, and issues a request to DSLCP that the\n   link be prepared\
    \ to carry data.  This happens transparently to the\n   transport user.\n   When\
    \ a transport user requests transport services, the transport\n   provider will\
    \ normally attempt to establish a connection.  In the\n   event the transport\
    \ provider discovers that the connection requires\n   special link control, the\
    \ transport provider will call upon DSLCP to\n   send a link setup message to\
    \ the link controller.  The transport\n   provider does not attempt to use the\
    \ connection until DSLCP informs\n   the transport provider that the link is setup\
    \ or that the setup\n   attempt failed.  If the setup failed, then the transport\
    \ provider is\n   free to attempt to find another way to create a connection.\n\
    \   When the transport user is finished using the services, then the\n   transport\
    \ provider will call DSLCP to release the link.  The\n   transport provider may\
    \ now assume that the link is no longer\n   available.\n   In general, DSLCP maintains\
    \ and hides the status of link control\n   transactions from the transport provider.\
    \  This way the transport\n   provider does not need to keep track of multiple\
    \ DSLCP transactions.\n   For example, if the transport provider requests a link\
    \ be setup for a\n   new transport user while another transport user has the link\
    \ active,\n   the DSLCP may inform the transport provider that the link is ready\n\
    \   without delay, provided that the link can support multiple transport\n   connections.\n"
- title: 3.0  FUNCTIONAL SPECIFICATION
  contents:
  - "3.0  FUNCTIONAL SPECIFICATION\n   This document specifies both a message format\
    \ and a state machine for\n   DSLCP protocol transactions.\n"
- title: 3.1  Control Message Format
  contents:
  - "3.1  Control Message Format\n        0                   1                  \
    \ 2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |  Identifier                   |   Total length                |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |  Function                     |   Event Status                |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                Endpoint 1                                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                Endpoint 2                                     |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Message                                 |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Body                                    |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Identifier: 16 bits\n       The identifier is a value assigned by the DSLCP\
    \ used to uniquely\n       identify link setup transactions.  It is intended to\
    \ be used with\n       the endpoint addresses by a link controller to identify\
    \ a\n       transaction.\n   Total length: 16 bits\n       The total length, in\
    \ octets, including the header of this DSLCP\n       control message.\n   Function:\
    \ 16 bits\n       The operation to be processed or being responded to.\n     \
    \  Functions currently defined are:\n           Bring up        value 0\n    \
    \       Bring down      value 1\n   Event Status: 16 bits\n       The state of\
    \ the controlled link, relative to the last function\n       request.\n      \
    \ The possible event states are:\n           Setup request succeeded        value\
    \ 2\n           Setup request failed           value 3\n           Teardown request\
    \ succeeded     value 4\n           Teardown request failed        value 5\n \
    \          Asynchronous network down      value 7\n   Endpoint addresses: 32 bits\
    \ each\n       The internet addresses of the two communicating parties for which\n\
    \       the link is being prepared.\n   Message body:  arbitrary length up to\
    \ 65499 octets\n       An ascii string which is meaningful the link controller.\
    \  When the\n       requesting host is configured, the system administrator sets\
    \ the\n       control strings for each network link that may be accessed by the\n\
    \       requesting host.\n"
- title: 3.2  State Machine
  contents:
  - "3.2  State Machine\n   The transport provider is aware of only 2 possible states\
    \ for the\n   controlled link: up or down.  Furthermore, transport users may\n\
    \   request or release transport services from the transport provider at\n   any\
    \ time.  Thus, there must be a state machine employed by DSLCP when\n   communicating\
    \ between the transport provider and the controlled link.\n   This state machine\
    \ hides the details of link control transactions\n   from the transport provider.\
    \  The state machine has 6 possible\n   states.\n        Down: There is no active\
    \ transport connection and the controlled\n        link is not setup.\n      \
    \  Coming Up: A transport user has requested a connection for which\n        the\
    \ transport provider has given a setup request to the DSLCP.\n        The DSLCP\
    \ has sent a setup request to the link controller and is\n        awaiting a response.\n\
    \        Up: At least one transport connection is active and the\n        controlled\
    \ link is setup.\n        Going Down: All transport connections have been terminated\
    \ and\n        the transport provider has sent an equivalent number of up\n  \
    \      requests and down requests to the DSLCP.  The DSLCP has sent a\n      \
    \  teardown request to the link controller and is awaiting a\n        response.\n\
    \        Bring Down: While DSLCP is in the Coming Up state, the transport\n  \
    \      provider requested link teardown.  As soon as a response is\n        received\
    \ from the link controller, the DSLCP will send a\n        teardown request if\
    \ the link setup was successful.\n        Bring Up: While in the Going Down state,\
    \ the transport provider\n        requested connection setup.  As soon as a response\
    \ is received\n        from the link controller, the DSLCP will send a setup request.\n\
    \    DSLCP state diagram:\n              ------- +----------------+\n     Transport\
    \        |     Down       |<---------\\\n     Connect     ---->+----------------+\
    \           \\\n     Request    /               ^  ^                \\\n     -------\
    \  Setup             |  |                 \\\n     Send     Failed           \
    \ |  |         Teardown \\ Response Timeout\n     Setup   /------            |\
    \  |         Success   \\ ---------------\n       /    /                   | \
    \ |         --------  |\n       |    |                   |  |                \
    \   |\n       |    |                   |  |                   |\n       |    |\
    \ Teardown Response |  |                   |\n       |    | Success  Timeout \
    \ |  |                   |\n       |    | ----------------- |  |     +----------+\
    \  |\n       |    |      Send---------|--|-----| Bring Up |--|----\\\n       |\
    \    |      Setup        |  |     +----------+  |    | Transport\n       |   \
    \ |     /             |  |               ^   |    | Teardown\n       |    |  \
    \  /              |  |        Transport  |    | Request\n       |    |   /   \
    \            |  |        Connect|   |    | ---------\n       |    |  /       \
    \     Setup  |        Request|   |    |\n       |    |  |           Failed  |\
    \        -------|   |    |\n       v    |  v           ------  |             \
    \  |   |    v\n +--------------+               |  |              +-------------+\n\
    \ | Coming Up    |----------+----|--|--Response--->| Going Down  |\n +--------------+\
    \          ^    |  |  Timeout     +-------------+\n   |    ^      |          \
    \ |    |  |  --------      ^    ^\n   |    |      Transport   |    |  |  Send\
    \          |    |\n   | Transport Teardown    |    |  |  Teardown      |    |\n\
    \   |  Connect  Request     |    |  |                /    |\n   |  Request  -------\
    \     |    |  |               /     |\n   |  -------  v           |    |  |  \
    \            /      /\n   |      \\ +------------+ -    |  |             /   \
    \   /\n   |       -| Bring Down | ------  |            /      /\n    \\      \
    \ +------------+ --------|--Setup-----      /\n     \\                       \
    \      |  Success        /\n      \\                            |  -------   \
    \    /\n       \\   Setup           Network |  Send         / Transport\n    \
    \    \\  Success         Is Down |  Teardown    /  Teardown\n         \\ -------\
    \         ------- |             /   Request\n          \\                    \
    \    |            /    --------\n           \\                       |       \
    \    /     Send\n            \\             +---------------+   /      Teardown\n\
    \             \\----------->|   Up          |---\n                          +---------------+\n"
- title: Events and State Transitions
  contents:
  - "Events and State Transitions\n   The DSLCP will process three type of events:\n\
    \      A link control request from the transport provider\n      An DSLCP message\
    \ from the link controller\n      DSLCP message timeout\n   The transport provider\
    \ will make link setup and and teardown requests\n   to the DSLCP when transport\
    \ users request and release services\n   requiring link control operations.  The\
    \ transport provider should not\n   keep track of the status of a particular link,\
    \ as this is a function\n   of the DSLCP.  The transport provider may be unaware\
    \ of redirection\n   or other processing of link setup requests performed by DSLCP,\
    \ so\n   this is a function best left to DSLCP.  The DSLCP will inform the\n \
    \  transport provider as to the success or failure of a particular setup\n   request,\
    \ and transport providers may assume the success of teardown\n   requests (the\
    \ DSLCP will always return a success response to a\n   teardown request).\n  \
    \ The DSLCP will engage in link control transactions with link\n   controllers.\
    \  This will include accepting messages from link\n   controllers in response\
    \ to requests as well as unexpected messages\n   from the link controller.  Unexpected\
    \ messages may include redundant\n   responses to redundant requests sent as a\
    \ result of timeouts.\n   Because of the possibility of unavailable links and\
    \ link controllers,\n   DSLCP should not wait indefinitely for message responses\
    \ from link\n   controllers to which it has sent messages.  Since DSLCP does not\n\
    \   require the use of a reliable transport protocol to carry DSLCP\n   messages,\
    \ DSLCP must have a timeout and retransmission mechanism.\n   Since we have used\
    \ DSLCP in a local network context with switch\n   controllers which offer a quick\
    \ turnaround (on the order of 1\n   second), we use a 5 second timeout with a\
    \ 3 retransmit limit.  These\n   figures would require adaptation to different\
    \ network and link\n   controller configurations, and a self-adapting algorithm\
    \ would be\n   most appropriate for a general solution.\n   The specific events\
    \ of interest to the DSLCP are:\n        Transport provider link setup request\n\
    \        Transport provider link teardown request\n        Link setup request\
    \ failed\n        Link setup request succeeded\n        Link teardown request\
    \ succeeded\n        Link teardown request failed\n        Network link is down\n\
    \        Timeout waiting for DSLCP response from link controller\n   The necessary\
    \ processing for each event while in each state is as\n   follows:\n        Transport\
    \ provider link setup request\n            Down:\n                Send setup request\
    \ to link controller.\n                Enter Coming Up state.\n              \
    \  Notify transport provider to wait until link is up.\n            Coming Up:\n\
    \            Bring Up:\n                Notify transport provider to wait until\
    \ link is up.\n            Up:\n                Notify transport provider that\
    \ link is up.\n            Bring Down:\n                Enter Coming Up state.\n\
    \                Notify transport provider to wait until link is up.\n       \
    \     Going Down:\n                Enter Bring Up state.\n                Notify\
    \ transport provider to wait until link is up.\n            Discussion:\n    \
    \        If the controlled link is not capable to support multiple\n         \
    \   transport connections, then the DSLCP must return\n            appropriate\
    \ errors when it detects multiple transport setup\n            requests for that\
    \ link.\n        Transport provider link teardown request.\n            Down:\n\
    \            Bring Down:\n            Going Down:\n                Notify transport\
    \ provider that link is down.\n            Coming Up:\n                Enter Bring\
    \ Down state.\n                Notify transport provider that link is down.\n\
    \            Bring Down:\n                Notify transport provider that link\
    \ is down.\n            Up:\n                Send teardown request.\n        \
    \        Enter Going Down state.\n                Notify transport provider that\
    \ link is down.\n        Link setup request failed\n            Down:\n      \
    \      Going Down:\n            Bring Up:\n                Unexpected message,\
    \ possibly due to duplicate requests -\n                ignore it.\n         \
    \   Up:\n                Unexpected message, link controller may be refusing\n\
    \                multiple setup requests sent because of timeout - ignore\n  \
    \              it.\n            Coming Up:\n            Bring Down:\n        \
    \        Enter down state.\n        Link setup request succeeded\n           \
    \ Down:\n                Unexpected message, possibly due to duplicate requests\n\
    \                and reordering of request packets by network.\n             \
    \   Send teardown request.\n            Going Down:\n            Bring Up:\n \
    \           Up:\n                Unexpected message, possibly due to duplicate\
    \ requests -\n                ignore it.\n            Coming Up:\n           \
    \     Enter Up state.\n                Notify transport provider(s) waiting for\
    \ link that it is\n                available.\n            Bring Down:\n     \
    \           Send teardown request.\n                Enter Going Down state.\n\
    \        Link teardown request succeeded\n            Down:\n            Coming\
    \ Up:\n            Bring Down:\n                Unexpected message, possibly due\
    \ to duplicate requests -\n                ignore it.\n            Up:\n     \
    \           Unexpected message, possibly due to duplicate requests\n         \
    \       and reordering of request packets by network.\n                Send teardown\
    \ request.\n                Enter Going Down state.\n                Notify transport\
    \ providers that link has gone down.\n            Bring Up:\n                Send\
    \ setup request\n                Enter Coming Up state\n            Going Down:\n\
    \                Enter Down state\n            Discussion:\n            If a teardown\
    \ request succeeded message arrives when the\n            DSLCP is in the UP state,\
    \ then some error has occurred, and\n            the conservative approach is\
    \ to bring down the connection\n            and resynchronize.  However, it may\
    \ be satisfactory to\n            ignore the message without ill effect.\n   \
    \     Link teardown request failed\n            Down:\n            Coming up:\n\
    \            Bring Down:\n            Bring Up:\n            Going Down:\n   \
    \         Up:\n                DSLCP sent a teardown request message for an invalid\n\
    \                transaction.  The link controller has no\n                identifier/endpoints\
    \ transaction record for the request.\n                Continue as if request\
    \ had succeeded.\n        Network link is down\n            Down:\n          \
    \      Ignore message.\n            Bring Down:\n            Going Down:\n   \
    \             Enter Down state.\n            Coming up:\n            Bring Up:\n\
    \            Up:\n                Enter down state.\n                Notify transport\
    \ provider that link is down.\n        Timeout waiting for DSLCP response from\
    \ controller\n            Down:\n            Up:\n                DSLCP protocol\
    \ error - fix bug, don't set timer when\n                there are no outstanding\
    \ requests.\n            Coming Up:\n            Bring Down:\n               \
    \ Send teardown request.\n                Enter Going down state.\n          \
    \  Going Down:\n                Enter Down state.\n            Bring Up:\n   \
    \             Send setup request.\n                Enter Coming Up state.\n"
- title: References
  contents:
  - "References\n   [1]  Nicholson, et. al., \"High Speed Networking at Cray Research\"\
    ,\n        Computer Communications Review, January, 1991.\n   [2]  Nicholson,\
    \ A., and J. Young, \"Experiences Supporting By-Request\n        Circuit-Switched\
    \ T3 Networks\", RFC 1306, Cray Research, Inc.,\n        March 1992.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jeff Young\n   Cray Research, Inc.\n   655F Lone Oak Drive\n\
    \   Eagan, MN 55123\n   Phone: (612) 452-6650\n   EMail: jsy@cray.com\n   Andy\
    \ Nicholson\n   Cray Research, Inc.\n   655F Lone Oak Drive\n   Eagan, MN 55123\n\
    \   Phone: (612) 452-6650\n   EMail: droid@cray.com\n"
