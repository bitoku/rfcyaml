- contents:
  - ''
  title: __initial_text__
- contents:
  - "Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)\n                           Algorithm
    Agility\n"
  title: Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)
- contents:
  - "Abstract\n   This document updates the Public Key Cryptography for Initial\n
    \  Authentication in Kerberos (PKINIT) standard (RFC 4556) to remove\n   protocol
    structures tied to specific cryptographic algorithms.  The\n   PKINIT key derivation
    function is made negotiable, and the digest\n   algorithms for signing the pre-authentication
    data and the client's\n   X.509 certificates are made discoverable.\n   These
    changes provide preemptive protection against vulnerabilities\n   discovered in
    the future in any specific cryptographic algorithm and\n   allow incremental deployment
    of newer algorithms.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8636.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Requirements Notation . . . . . . . . . . . . . . . . .
    . . .   4\n   3.  paChecksum Agility  . . . . . . . . . . . . . . . . . . . .
    .   4\n   4.  CMS Digest Algorithm Agility  . . . . . . . . . . . . . . . .   5\n
    \  5.  X.509 Certificate Signer Algorithm Agility  . . . . . . . . .   5\n   6.
    \ KDF Agility . . . . . . . . . . . . . . . . . . . . . . . . .   6\n   7.  Interoperability
    \ . . . . . . . . . . . . . . . . . . . . . .  11\n   8.  Test Vectors  . . .
    . . . . . . . . . . . . . . . . . . . . .  12\n     8.1.  Common Inputs . . .
    . . . . . . . . . . . . . . . . . . .  12\n     8.2.  Test Vector for SHA-1, enctype
    18 . . . . . . . . . . . .  12\n       8.2.1.  Specific Inputs . . . . . . . .
    . . . . . . . . . . .  12\n       8.2.2.  Outputs . . . . . . . . . . . . . .
    . . . . . . . . .  12\n     8.3.  Test Vector for SHA-256, enctype 18 . . . .
    . . . . . . .  13\n       8.3.1.  Specific Inputs . . . . . . . . . . . . . .
    . . . . .  13\n       8.3.2.  Outputs . . . . . . . . . . . . . . . . . . . .
    . . .  13\n     8.4.  Test Vector for SHA-512, enctype 16 . . . . . . . . . .
    .  13\n       8.4.1.  Specific Inputs . . . . . . . . . . . . . . . . . . .  13\n
    \      8.4.2.  Outputs . . . . . . . . . . . . . . . . . . . . . . .  13\n   9.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  13\n   10. IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .  15\n   11. References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  15\n     11.1.  Normative
    References . . . . . . . . . . . . . . . . . .  15\n     11.2.  Informative References
    . . . . . . . . . . . . . . . . .  16\n   Appendix A.  PKINIT ASN.1 Module  .
    . . . . . . . . . . . . . . .  18\n   Acknowledgements  . . . . . . . . . . .
    . . . . . . . . . . . . .  21\n   Authors' Addresses  . . . . . . . . . . . .
    . . . . . . . . . . .  21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Public Key Cryptography for Initial Authentication in
    Kerberos\n   (PKINIT) standard [RFC4556] defines several protocol structures that\n
    \  are either tied to SHA-1 [RFC6234] or do not support negotiation or\n   discovery
    but are instead based on local policy:\n   o  The checksum algorithm in the authentication
    request is hardwired\n      to use SHA-1.\n   o  The acceptable digest algorithms
    for signing the authentication\n      data are not discoverable.\n   o  The key
    derivation function in Section 3.2.3.1 of [RFC4556] is\n      hardwired to use
    SHA-1.\n   o  The acceptable digest algorithms for signing the client X.509\n
    \     certificates are not discoverable.\n   In August 2004, Xiaoyun Wang's research
    group reported MD4 [RFC6150]\n   collisions [WANG04], alongside attacks on later
    hash functions\n   including MD5 [RFC1321] and SHA-1 [RFC6234].  These attacks
    and their\n   consequences are discussed in [RFC6194].  These discoveries\n   challenged
    the security of protocols relying on the collision-\n   resistance properties
    of these hashes.\n   The Internet Engineering Task Force (IETF) called for action
    to\n   update existing protocols to provide crypto algorithm agility so that\n
    \  protocols support multiple cryptographic algorithms (including hash\n   functions)
    and provide clean, tested transition strategies between\n   algorithms, as recommended
    by BCP 201 [RFC7696].\n   To address these concerns, new key derivation functions
    (KDFs),\n   identified by object identifiers, are defined.  The PKINIT client\n
    \  provides a list of KDFs in the request, and the Key Distribution\n   Center
    (KDC) picks one in the response.  Thus, a mutually supported\n   KDF is negotiated.\n
    \  Furthermore, structures are defined to allow the client to discover\n   the
    Cryptographic Message Syntax (CMS) [RFC5652] digest algorithms\n   supported by
    the KDC for signing the pre-authentication data and the\n   client X.509 certificate.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n"
  title: 2.  Requirements Notation
- contents:
  - "3.  paChecksum Agility\n   The paChecksum defined in Section 3.2.1 of [RFC4556]
    provides a\n   cryptographic binding between the client's pre-authentication data\n
    \  and the corresponding Kerberos request body.  This also prevents the\n   KDC-REQ
    body from being tampered with.  SHA-1 is the only allowed\n   checksum algorithm
    defined in [RFC4556].  This facility relies on the\n   collision-resistance properties
    of the SHA-1 checksum [RFC6234].\n   When the reply key delivery mechanism is
    based on public key\n   encryption as described in Section 3.2.3.2 of [RFC4556],
    the\n   asChecksum in the KDC reply provides integrity protection for the\n   unauthenticated
    clear text in these messages and the binding between\n   the pre-authentication
    and the ticket request and response messages.\n   However, if the reply key delivery
    mechanism is based on the Diffie-\n   Hellman key agreement as described in Section
    3.2.3.1 of [RFC4556],\n   the security provided by using SHA-1 in the paChecksum
    is weak, and\n   nothing else cryptographically binds the Authentication Service
    (AS)\n   request to the ticket response.  In this case, the new KDF selected\n
    \  by the KDC, as described in Section 6, provides the cryptographic\n   binding
    and integrity protection.\n"
  title: 3.  paChecksum Agility
- contents:
  - "4.  CMS Digest Algorithm Agility\n   Section 3.2.2 of [RFC4556] is updated to
    add optional typed data to\n   the KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
    error.  When a KDC\n   implementation conforming to this specification returns
    this error\n   code, it MAY include a list of supported CMS types signifying the\n
    \  digest algorithms supported by the KDC in decreasing order of\n   preference.
    \ This is accomplished by including a\n   TD_CMS_DATA_DIGEST_ALGORITHMS typed
    data element in the error data.\n   td-cms-digest-algorithms INTEGER ::= 111\n
    \  The corresponding data for the TD_CMS_DATA_DIGEST_ALGORITHMS contains\n   the
    TD-CMS-DIGEST-ALGORITHMS-DATA structure, which is ASN.1\n   Distinguished Encoding
    Rules (DER) [X680] [X690] encoded and is\n   defined as follows:\n   TD-CMS-DIGEST-ALGORITHMS-DATA
    ::= SEQUENCE OF\n       AlgorithmIdentifier\n           -- Contains the list of
    CMS algorithm [RFC5652]\n           -- identifiers indicating the digest algorithms\n
    \          -- acceptable to the KDC for signing CMS data in\n           -- decreasing
    order of preference.\n   The algorithm identifiers in TD-CMS-DIGEST-ALGORITHMS
    identify the\n   digest algorithms supported by the KDC.\n   This information
    sent by the KDC via TD_CMS_DATA_DIGEST_ALGORITHMS\n   can facilitate troubleshooting
    when none of the digest algorithms\n   supported by the client is supported by
    the KDC.\n"
  title: 4.  CMS Digest Algorithm Agility
- contents:
  - "5.  X.509 Certificate Signer Algorithm Agility\n   Section 3.2.2 of [RFC4556]
    is updated to add optional typed data to\n   the KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
    error.  When a KDC conforming\n   to this specification returns this error, it
    MAY send a list of\n   digest algorithms acceptable to the KDC for use by the
    certification\n   authority (CA) in signing the client's X.509 certificate in\n
    \  decreasing order of preference.  This is accomplished by including a\n   TD_CERT_DIGEST_ALGORITHMS
    typed data element in the error data.  The\n   corresponding data contains the
    ASN.1 DER encoding of the TD-CERT-\n   DIGEST-ALGORITHMS-DATA structure defined
    as follows:\n   td-cert-digest-algorithms INTEGER ::= 112\n   TD-CERT-DIGEST-ALGORITHMS-DATA
    ::= SEQUENCE {\n           allowedAlgorithms [0] SEQUENCE OF AlgorithmIdentifier,\n
    \                     -- Contains the list of CMS algorithm [RFC5652]\n                      --
    identifiers indicating the digest algorithms\n                      -- that are
    used by the CA to sign the client's\n                      -- X.509 certificate
    and are acceptable to the KDC\n                      -- in the process of validating
    the client's X.509\n                      -- certificate in decreasing order of\n
    \                     -- preference.\n           rejectedAlgorithm [1] AlgorithmIdentifier
    OPTIONAL,\n                      -- This identifies the digest algorithm that
    was\n                      -- used to sign the client's X.509 certificate and\n
    \                     -- has been rejected by the KDC in the process of\n                      --
    validating the client's X.509 certificate\n                      -- [RFC5280].\n
    \          ...\n   }\n   The KDC fills in the allowedAlgorithm field with the
    list of\n   algorithm [RFC5652] identifiers indicating digest algorithms that
    are\n   used by the CA to sign the client's X.509 certificate and are\n   acceptable
    to the KDC in the process of validating the client's X.509\n   certificate in
    decreasing order of preference.  The rejectedAlgorithm\n   field identifies the
    signing algorithm for use in signing the\n   client's X.509 certificate that has
    been rejected by the KDC in the\n   process of validating the client's certificate
    [RFC5280].\n"
  title: 5.  X.509 Certificate Signer Algorithm Agility
- contents:
  - "6.  KDF Agility\n   Section 3.2.3.1 of [RFC4556] is updated to define additional
    key\n   derivation functions (KDFs) to derive a Kerberos protocol key based\n
    \  on the secret value generated by the Diffie-Hellman key exchange.\n   Section
    3.2.1 of [RFC4556] is updated to add a new field to the\n   AuthPack structure
    to indicate which new KDFs are supported by the\n   client.  Section 3.2.3 of
    [RFC4556] is updated to add a new field to\n   the DHRepInfo structure to indicate
    which KDF is selected by the KDC.\n   The KDF algorithm described in this document
    (based on [SP80056A])\n   can be implemented using any cryptographic hash function.\n
    \  A new KDF for PKINIT usage is identified by an object identifier.\n   The following
    KDF object identifiers are defined:\n   id-pkinit OBJECT IDENTIFIER ::=\n            {
    iso(1) identified-organization(3) dod(6) internet(1)\n              security(5)
    kerberosv5(2) pkinit (3) }\n       -- Defined in RFC 4556 and quoted here for
    the reader.\n   id-pkinit-kdf OBJECT IDENTIFIER      ::= { id-pkinit kdf(6) }\n
    \      -- PKINIT KDFs\n   id-pkinit-kdf-ah-sha1 OBJECT IDENTIFIER\n       ::=
    { id-pkinit-kdf sha1(1) }\n       -- SP800-56A ASN.1 structured hash-based KDF
    using SHA-1\n   id-pkinit-kdf-ah-sha256 OBJECT IDENTIFIER\n       ::= { id-pkinit-kdf
    sha256(2) }\n       -- SP800-56A ASN.1 structured hash-based KDF using SHA-256\n
    \  id-pkinit-kdf-ah-sha512 OBJECT IDENTIFIER\n       ::= { id-pkinit-kdf sha512(3)
    }\n       -- SP800-56A ASN.1 structured hash-based KDF using SHA-512\n   id-pkinit-kdf-ah-sha384
    OBJECT IDENTIFIER\n       ::= { id-pkinit-kdf sha384(4) }\n       -- SP800-56A
    ASN.1 structured hash-based KDF using SHA-384\n   Where id-pkinit is defined in
    [RFC4556].  All key derivation\n   functions specified above use the one-step
    key derivation method\n   described in Section 5.8.2.1 of [SP80056A], choosing
    the ASN.1 format\n   for FixedInfo, and Section 4.1 of [SP80056C], choosing option
    1 for\n   the auxiliary function H.  id-pkinit-kdf-ah-sha1 uses SHA-1 [RFC6234]\n
    \  as the hash function.  id-pkinit-kdf-ah-sha256, id-pkinit-kdf-ah-\n   sha356,
    and id-pkinit-kdf-ah-sha512 use SHA-256 [RFC6234], SHA-384\n   [RFC6234], and
    SHA-512 [RFC6234], respectively.\n   To name the input parameters, an abbreviated
    version of the key\n   derivation method is described below.\n   1.  reps = ceiling(L/H_outputBits)\n
    \  2.  Initialize a 32-bit, big-endian bit string counter as 1.\n   3.  For i
    = 1 to reps by 1, do the following:\n       1.  Compute Hashi = H(counter || Z
    || OtherInfo).\n       2.  Increment counter (not to exceed 2^32-1)\n   4.  Set
    key_material = Hash1 || Hash2 || ... so that the length of\n       key_material
    is L bits, truncating the last block as necessary.\n   5.  The above KDF produces
    a bit string of length L in bits as the\n       keying material.  The AS reply
    key is the output of random-to-\n       key() [RFC3961], using that keying material
    as the input.\n   The input parameters for these KDFs are provided as follows:\n
    \  o  H_outputBits is 160 bits for id-pkinit-kdf-ah-sha1, 256 bits for\n      id-pkinit-kdf-ah-sha256,
    384 bits for id-pkinit-kdf-ah-sha384, and\n      512 bits for id-pkinit-kdf-ah-sha512.\n
    \  o  max_H_inputBits is 2^64.\n   o  The secret value (Z) is the shared secret
    value generated by the\n      Diffie-Hellman exchange.  The Diffie-Hellman shared
    value is first\n      padded with leading zeros such that the size of the secret
    value\n      in octets is the same as that of the modulus, then represented as\n
    \     a string of octets in big-endian order.\n   o  The key data length (L) is
    the key-generation seed length in bits\n      [RFC3961] for the Authentication
    Service (AS) reply key.  The\n      enctype of the AS reply key is selected according
    to [RFC4120].\n   o  The algorithm identifier (algorithmID) input parameter is
    the\n      identifier of the respective KDF.  For example, this is id-pkinit-\n
    \     kdf-ah-sha1 if the KDF uses SHA-1 as the hash.\n   o  The initiator identifier
    (partyUInfo) contains the ASN.1 DER\n      encoding of the KRB5PrincipalName [RFC4556]
    that identifies the\n      client as specified in the AS-REQ [RFC4120] in the
    request.\n   o  The recipient identifier (partyVInfo) contains the ASN.1 DER\n
    \     encoding of the KRB5PrincipalName [RFC4556] that identifies the\n      ticket-granting
    server (TGS) as specified in the AS-REQ [RFC4120]\n      in the request.\n   o
    \ The supplemental public information (suppPubInfo) is the ASN.1 DER\n      encoding
    of the PkinitSuppPubInfo structure, as defined later in\n      this section.\n
    \  o  The supplemental private information (suppPrivInfo) is absent.\n   OtherInfo
    is the ASN.1 DER encoding of the following sequence:\n   OtherInfo ::= SEQUENCE
    {\n           algorithmID   AlgorithmIdentifier,\n           partyUInfo     [0]
    OCTET STRING,\n           partyVInfo     [1] OCTET STRING,\n           suppPubInfo
    \   [2] OCTET STRING OPTIONAL,\n           suppPrivInfo   [3] OCTET STRING OPTIONAL\n
    \  }\n   The PkinitSuppPubInfo structure is defined as follows:\n   PkinitSuppPubInfo
    ::= SEQUENCE {\n          enctype           [0] Int32,\n              -- The enctype
    of the AS reply key.\n          as-REQ            [1] OCTET STRING,\n              --
    The DER encoding of the AS-REQ [RFC4120] from the\n              -- client.\n
    \         pk-as-rep         [2] OCTET STRING,\n              -- The DER encoding
    of the PA-PK-AS-REP [RFC4556] in the\n              -- KDC reply.\n          ...\n
    \  }\n   The PkinitSuppPubInfo structure contains mutually known public\n   information
    specific to the authentication exchange.  The enctype\n   field is the enctype
    of the AS reply key as selected according to\n   [RFC4120].  The as-REQ field
    contains the DER encoding of the AS-REQ\n   type [RFC4120] in the request sent
    from the client to the KDC.  Note\n   that the as-REQ field does not include the
    wrapping 4-octet length\n   when TCP is used.  The pk-as-rep field contains the
    DER encoding of\n   the PA-PK-AS-REP [RFC4556] type in the KDC reply.  The\n   PkinitSuppPubInfo
    provides a cryptographic binding between the pre-\n   authentication data and
    the corresponding ticket request and\n   response, thus addressing the concerns
    described in Section 3.\n   The KDF is negotiated between the client and the KDC.
    \ The client\n   sends an unordered set of supported KDFs in the request, and
    the KDC\n   picks one from the set in the reply.\n   To accomplish this, the AuthPack
    structure in [RFC4556] is extended\n   as follows:\n   AuthPack ::= SEQUENCE {\n
    \         pkAuthenticator   [0] PKAuthenticator,\n          clientPublicValue
    [1] SubjectPublicKeyInfo OPTIONAL,\n          supportedCMSTypes [2] SEQUENCE OF
    AlgorithmIdentifier\n                   OPTIONAL,\n          clientDHNonce     [3]
    DHNonce OPTIONAL,\n          ...,\n          supportedKDFs     [4] SEQUENCE OF
    KDFAlgorithmId OPTIONAL,\n              -- Contains an unordered set of KDFs supported
    by the\n              -- client.\n          ...\n   }\n   KDFAlgorithmId ::= SEQUENCE
    {\n          kdf-id            [0] OBJECT IDENTIFIER,\n              -- The object
    identifier of the KDF\n          ...\n   }\n   The new supportedKDFs field contains
    an unordered set of KDFs\n   supported by the client.\n   The KDFAlgorithmId structure
    contains an object identifier that\n   identifies a KDF.  The algorithm of the
    KDF and its parameters are\n   defined by the corresponding specification of that
    KDF.\n   The DHRepInfo structure in [RFC4556] is extended as follows:\n   DHRepInfo
    ::= SEQUENCE {\n           dhSignedData         [0] IMPLICIT OCTET STRING,\n           serverDHNonce
    \       [1] DHNonce OPTIONAL,\n           ...,\n           kdf                  [2]
    KDFAlgorithmId OPTIONAL,\n               -- The KDF picked by the KDC.\n           ...\n
    \  }\n   The new kdf field in the extended DHRepInfo structure identifies the\n
    \  KDF picked by the KDC.  If the supportedKDFs field is present in the\n   request,
    a KDC conforming to this specification MUST choose one of\n   the KDFs supported
    by the client and indicate its selection in the\n   kdf field in the reply.  If
    the supportedKDFs field is absent in the\n   request, the KDC MUST omit the kdf
    field in the reply and use the key\n   derivation function from Section 3.2.3.1
    of [RFC4556].  If none of\n   the KDFs supported by the client is acceptable to
    the KDC, the KDC\n   MUST reply with the new error code KDC_ERR_NO_ACCEPTABLE_KDF:\n
    \  o  KDC_ERR_NO_ACCEPTABLE_KDF 100\n   If the client fills the supportedKDFs
    field in the request but the\n   kdf field in the reply is not present, the client
    can deduce that the\n   KDC is not updated to conform with this specification,
    or that the\n   exchange was subjected to a downgrade attack.  It is a matter
    of\n   local policy on the client whether to reject the reply when the kdf\n   field
    is absent in the reply; if compatibility with non-updated KDCs\n   is not a concern,
    the reply should be rejected.\n   Implementations conforming to this specification
    MUST support\n   id-pkinit-kdf-ah-sha256.\n"
  title: 6.  KDF Agility
- contents:
  - "7.  Interoperability\n   An old client interoperating with a new KDC will not
    recognize a\n   TD-CMS-DIGEST-ALGORITHMS-DATA element in a\n   KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
    error or a TD-CERT-DIGEST-\n   ALGORITHMS-DATA element in a KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED\n
    \  error.  Because the error data is encoded as typed data, the client\n   will
    ignore the unrecognized elements.\n   An old KDC interoperating with a new client
    will not include a\n   TD-CMS-DIGEST-ALGORITHMS-DATA element in a\n   KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
    error or a TD-CERT-DIGEST-\n   ALGORITHMS-DATA element in a KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED\n
    \  error.  To the client, this appears just as if a new KDC elected not\n   to
    include a list of digest algorithms.\n   An old client interoperating with a new
    KDC will not include the\n   supportedKDFs field in the request.  The KDC MUST
    omit the kdf field\n   in the reply and use the [RFC4556] KDF as expected by the
    client or\n   reject the request if local policy forbids use of the old KDF.\n
    \  A new client interoperating with an old KDC will include the\n   supportedKDFs
    field in the request; this field will be ignored as an\n   unknown extension by
    the KDC.  The KDC will omit the kdf field in the\n   reply and will use the [RFC4556]
    KDF.  The client can deduce from the\n   omitted kdf field that the KDC is not
    updated to conform to this\n   specification or that the exchange was subjected
    to a downgrade\n   attack.  The client MUST use the [RFC4556] KDF or reject the
    reply if\n   local policy forbids the use of the old KDF.\n"
  title: 7.  Interoperability
- contents:
  - "8.  Test Vectors\n   This section contains test vectors for the KDF defined above.\n"
  - contents:
    - '8.1.  Common Inputs

      '
    - 'Z: Length = 256 bytes, Hex Representation = (All Zeros)

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - '00000000 00000000 00000000 00000000 000000000 00000000 00000000 00000000

      '
    - 'client: Length = 9 bytes, ASCII Representation = lha@SU.SE

      '
    - 'server: Length = 18 bytes, ASCII Representation = krbtgt/SU.SE@SU.SE

      '
    - 'as-req: Length = 10 bytes, Hex Representation =

      '
    - 'AAAAAAAA AAAAAAAA AAAA

      '
    - 'pk-as-rep:  Length = 9 bytes, Hex Representation =

      '
    - 'BBBBBBBB BBBBBBBB BB

      '
    - 'ticket: Length =  55 bytes, Hex Representation =

      '
    - '61353033 A0030201 05A1071B 0553552E 5345A210 300EA003 020101A1 0730051B

      '
    - '036C6861 A311300F A0030201 12A20804 0668656A 68656A

      '
    title: 8.1.  Common Inputs
  - contents:
    - '8.2.  Test Vector for SHA-1, enctype 18

      '
    - contents:
      - "8.2.1.  Specific Inputs\n   algorithm-id: (id-pkinit-kdf-ah-sha1) Length
        = 8 bytes, Hex\n   Representation = 2B060105 02030601\n   enctype: (aes256-cts-hmac-sha1-96)
        Length = 1 byte, Decimal\n   Representation = 18\n"
      title: 8.2.1.  Specific Inputs
    - contents:
      - "8.2.2.  Outputs\n key-material: Length = 32 bytes, Hex Representation =\n
        E6AB38C9 413E035B B079201E D0B6B73D 8D49A814 A737C04E E6649614 206F73AD\n
        key: Length = 32 bytes, Hex Representation =\n E6AB38C9 413E035B B079201E
        D0B6B73D 8D49A814 A737C04E E6649614 206F73AD\n"
      title: 8.2.2.  Outputs
    title: 8.2.  Test Vector for SHA-1, enctype 18
  - contents:
    - '8.3.  Test Vector for SHA-256, enctype 18

      '
    - contents:
      - "8.3.1.  Specific Inputs\n   algorithm-id: (id-pkinit-kdf-ah-sha256) Length
        = 8 bytes, Hex\n   Representation = 2B060105 02030602\n   enctype: (aes256-cts-hmac-sha1-96)
        Length = 1 byte, Decimal\n   Representation = 18\n"
      title: 8.3.1.  Specific Inputs
    - contents:
      - "8.3.2.  Outputs\n key-material: Length = 32 bytes, Hex Representation =\n
        77EF4E48 C420AE3F EC75109D 7981697E ED5D295C 90C62564 F7BFD101 FA9bC1D5\n
        key: Length = 32 bytes, Hex Representation =\n 77EF4E48 C420AE3F EC75109D
        7981697E ED5D295C 90C62564 F7BFD101 FA9bC1D5\n"
      title: 8.3.2.  Outputs
    title: 8.3.  Test Vector for SHA-256, enctype 18
  - contents:
    - '8.4.  Test Vector for SHA-512, enctype 16

      '
    - contents:
      - "8.4.1.  Specific Inputs\n   algorithm-id: (id-pkinit-kdf-ah-sha512) Length
        = 8 bytes, Hex\n   Representation = 2B060105 02030603\n   enctype: (des3-cbc-sha1-kd)
        Length = 1 byte, Decimal\n   Representation = 16\n"
      title: 8.4.1.  Specific Inputs
    - contents:
      - "8.4.2.  Outputs\n   key-material: Length = 24 bytes, Hex Representation =\n
        \  D3C78A79 D65213EF E9A826F7 5DFB01F7 2362FB16 FB01DAD6\n   key: Length =
        32 bytes, Hex Representation =\n   D3C78A79 D65213EF E9A826F7 5DFB01F7 2362FB16
        FB01DAD6\n"
      title: 8.4.2.  Outputs
    title: 8.4.  Test Vector for SHA-512, enctype 16
  title: 8.  Test Vectors
- contents:
  - "9.  Security Considerations\n   This document describes negotiation of checksum
    types, key derivation\n   functions, and other cryptographic functions.  If a
    given negotiation\n   is unauthenticated, care must be taken to accept only secure
    values;\n   to do otherwise allows an active attacker to perform a downgrade\n
    \  attack.\n   The discovery method described in Section 4 uses a Kerberos error\n
    \  message, which is unauthenticated in a typical exchange.  An attacker\n   may
    attempt to downgrade a client to a weaker CMS type by forging a\n   KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
    error.  It is a matter of\n   local policy whether a client accepts a downgrade
    to a weaker CMS\n   type and whether the KDC accepts the weaker CMS type.  A client
    may\n   reasonably assume that the real KDC implements all hash functions\n   used
    in the client's X.509 certificate, and so the client may refuse\n   attempts to
    downgrade to weaker hash functions.\n   The discovery method described in Section
    5 also uses a Kerberos\n   error message.  An attacker may attempt to downgrade
    a client to a\n   certificate using a weaker signing algorithm by forging a\n
    \  KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED error.  It is a matter of local\n   policy
    whether a client accepts a downgrade to a weaker certificate\n   and whether the
    KDC accepts the weaker certificate.  This attack is\n   only possible if the client
    device possesses multiple client\n   certificates of varying strengths.\n   In
    the KDF negotiation method described in Section 6, the client\n   supportedKDFs
    value is protected by the signature on the\n   signedAuthPack field in the request.
    \ If this signature algorithm is\n   vulnerable to collision attacks, an attacker
    may attempt to downgrade\n   the negotiation by substituting an AuthPack with
    a different or\n   absent supportedKDFs value, using a PKINIT freshness token
    [RFC8070]\n   to partially control the legitimate AuthPack value.  A client that
    is\n   performing anonymous PKINIT [RFC8062] does not sign the AuthPack, so\n
    \  an attacker can easily remove the supportedKDFs value in this case.\n   Finally,
    the kdf field in the DHRepInfo of the KDC response is\n   unauthenticated and
    could be altered or removed by an attacker,\n   although this alteration will
    likely result in a decryption failure\n   by the client rather than a successful
    downgrade.  It is a matter of\n   local policy whether a client accepts a downgrade
    to the old KDF and\n   whether the KDC allows the use of the old KDF.\n   The
    paChecksum field, which binds the client pre-authentication data\n   to the Kerberos
    request body, remains fixed at SHA-1.  If an attacker\n   substitutes a different
    request body using an attack against SHA-1 (a\n   second preimage attack is likely
    required as the attacker does not\n   control any part of the legitimate request
    body), the KDC will not\n   detect the substitution.  Instead, if a new KDF is
    negotiated, the\n   client will detect the substitution by failing to decrypt
    the reply.\n   An attacker may attempt to impersonate the KDC to the client via
    an\n   attack on the hash function used in the dhSignedData signature,\n   substituting
    the attacker's subjectPublicKey for the legitimate one\n   without changing the
    hash value.  It is a matter of local policy\n   which hash function the KDC uses
    in its signature and which hash\n   functions the client will accept in the KDC
    signature.  A KDC may\n   reasonably assume that the client implements all hash
    functions used\n   in the KDF algorithms listed the supportedKDFs field of the
    request.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   IANA has made the following assignments in the Kerberos
    \"Pre-\n   authentication and Typed Data\" registry created by Section 7.1 of
    RFC\n   6113.\n               TD-CMS-DIGEST-ALGORITHMS   111  [RFC8636]\n               TD-CERT-DIGEST-ALGORITHMS
    \ 112  [RFC8636]\n"
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3961]  Raeburn, K., \"Encryption and Checksum Specifications for\n              Kerberos
      5\", RFC 3961, DOI 10.17487/RFC3961, February\n              2005, <https://www.rfc-editor.org/info/rfc3961>.\n
      \  [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n              Kerberos
      Network Authentication Service (V5)\", RFC 4120,\n              DOI 10.17487/RFC4120,
      July 2005,\n              <https://www.rfc-editor.org/info/rfc4120>.\n   [RFC4556]
      \ Zhu, L. and B. Tung, \"Public Key Cryptography for Initial\n              Authentication
      in Kerberos (PKINIT)\", RFC 4556,\n              DOI 10.17487/RFC4556, June
      2006,\n              <https://www.rfc-editor.org/info/rfc4556>.\n   [RFC5280]
      \ Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n
      \             RFC 5652, DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n
      \             (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI
      10.17487/RFC6234, May 2011,\n              <https://www.rfc-editor.org/info/rfc6234>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [SP80056A] Barker, E., Chen,
      L., Roginsky, A., Vassilev, A., and R.\n              Davis, \"Recommendation
      for Pair-Wise Key-Establishment\n              Schemes Using Discrete Logarithm
      Cryptography\", NIST\n              Special Publications 800-56A, Revision 3,\n
      \             DOI 10.6028/NIST.SP.800-56Ar3, April 2018,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n
      \             NIST.SP.800-56Ar3.pdf>.\n   [SP80056C] Barker, E., Chen, L., and
      R. Davis, \"Recommendation for\n              Key-Derivation Methods in Key-Establishment
      Schemes\", NIST\n              Special Publications 800-56C, Revision 1,\n              DOI
      10.6028/NIST.SP.800-56Cr1, April 2018,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n
      \             NIST.SP.800-56Cr1.pdf>.\n   [X680]     ITU-T, \"Information technology
      - Abstract Syntax Notation\n              One (ASN.1): Specification of basic
      notation\", ITU-T\n              Recommendation X.680, August 2015,\n              <https://www.itu.int/rec/T-REC-X.680-201508-I/en>.\n
      \  [X690]     ITU-T, \"Information technology - ASN.1 encoding Rules:\n              Specification
      of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)
      and Distinguished Encoding Rules\n              (DER)\", ITU-T Recommendation
      X.690, August 2015,\n              <https://www.itu.int/rec/T-REC-X.690-201508-I/en>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC1321]  Rivest, R., \"The MD5 Message-Digest
      Algorithm\", RFC 1321,\n              DOI 10.17487/RFC1321, April 1992,\n              <https://www.rfc-editor.org/info/rfc1321>.\n
      \  [RFC6150]  Turner, S. and L. Chen, \"MD4 to Historic Status\",\n              RFC
      6150, DOI 10.17487/RFC6150, March 2011,\n              <https://www.rfc-editor.org/info/rfc6150>.\n
      \  [RFC6194]  Polk, T., Chen, L., Turner, S., and P. Hoffman, \"Security\n              Considerations
      for the SHA-0 and SHA-1 Message-Digest\n              Algorithms\", RFC 6194,
      DOI 10.17487/RFC6194, March 2011,\n              <https://www.rfc-editor.org/info/rfc6194>.\n
      \  [RFC7696]  Housley, R., \"Guidelines for Cryptographic Algorithm\n              Agility
      and Selecting Mandatory-to-Implement Algorithms\",\n              BCP 201, RFC
      7696, DOI 10.17487/RFC7696, November 2015,\n              <https://www.rfc-editor.org/info/rfc7696>.\n
      \  [RFC8062]  Zhu, L., Leach, P., Hartman, S., and S. Emery, Ed.,\n              \"Anonymity
      Support for Kerberos\", RFC 8062,\n              DOI 10.17487/RFC8062, February
      2017,\n              <https://www.rfc-editor.org/info/rfc8062>.\n   [RFC8070]
      \ Short, M., Ed., Moore, S., and P. Miller, \"Public Key\n              Cryptography
      for Initial Authentication in Kerberos\n              (PKINIT) Freshness Extension\",
      RFC 8070,\n              DOI 10.17487/RFC8070, February 2017,\n              <https://www.rfc-editor.org/info/rfc8070>.\n
      \  [WANG04]   Wang, X., Lai, X., Feng, D., Chen, H., and X. Yu,\n              \"Cryptanalysis
      of the Hash Functions MD4 and RIPEMD\",\n              Advances in Cryptology
      - EUROCRYPT 2005,\n              DOI 10.1007/11426639_1, August 2004.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  PKINIT ASN.1 Module\n   KerberosV5-PK-INIT-Agility-SPEC {\n          iso(1)
    identified-organization(3) dod(6) internet(1)\n          security(5) kerberosV5(2)
    modules(4) pkinit(5) agility (1)\n   } DEFINITIONS EXPLICIT TAGS ::= BEGIN\n   IMPORTS\n
    \     AlgorithmIdentifier, SubjectPublicKeyInfo\n          FROM PKIX1Explicit88
    { iso (1)\n            identified-organization (3) dod (6) internet (1)\n            security
    (5) mechanisms (5) pkix (7) id-mod (0)\n            id-pkix1-explicit (18) }\n
    \           -- As defined in RFC 5280.\n      Ticket, Int32, Realm, EncryptionKey,
    Checksum\n          FROM KerberosV5Spec2 { iso(1) identified-organization(3)\n
    \           dod(6) internet(1) security(5) kerberosV5(2)\n            modules(4)
    krb5spec2(2) }\n            -- as defined in RFC 4120.\n      PKAuthenticator,
    DHNonce, id-pkinit\n          FROM KerberosV5-PK-INIT-SPEC {\n            iso(1)
    identified-organization(3) dod(6) internet(1)\n            security(5) kerberosV5(2)
    modules(4) pkinit(5) };\n            -- as defined in RFC 4556.\n   id-pkinit-kdf
    OBJECT IDENTIFIER      ::= { id-pkinit kdf(6) }\n       -- PKINIT KDFs\n   id-pkinit-kdf-ah-sha1
    OBJECT IDENTIFIER\n       ::= { id-pkinit-kdf sha1(1) }\n       -- SP800-56A ASN.1
    structured hash-based KDF using SHA-1\n   id-pkinit-kdf-ah-sha256 OBJECT IDENTIFIER\n
    \      ::= { id-pkinit-kdf sha256(2) }\n       -- SP800-56A ASN.1 structured hash-based
    KDF using SHA-256\n   id-pkinit-kdf-ah-sha512 OBJECT IDENTIFIER\n       ::= {
    id-pkinit-kdf sha512(3) }\n       -- SP800-56A ASN.1 structured hash-based KDF
    using SHA-512\n   id-pkinit-kdf-ah-sha384 OBJECT IDENTIFIER\n       ::= { id-pkinit-kdf
    sha384(4) }\n       -- SP800-56A ASN.1 structured hash-based KDF using SHA-384\n
    \  TD-CMS-DIGEST-ALGORITHMS-DATA ::= SEQUENCE OF\n       AlgorithmIdentifier\n
    \          -- Contains the list of CMS algorithm [RFC5652]\n           -- identifiers
    indicating the digest algorithms\n           -- acceptable to the KDC for signing
    CMS data in\n           -- decreasing order of preference.\n   TD-CERT-DIGEST-ALGORITHMS-DATA
    ::= SEQUENCE {\n          allowedAlgorithms [0] SEQUENCE OF AlgorithmIdentifier,\n
    \             -- Contains the list of CMS algorithm [RFC5652]\n              --
    identifiers indicating the digest algorithms\n              -- that are used by
    the CA to sign the client's\n              -- X.509 certificate and are acceptable
    to the KDC\n              -- in the process of validating the client's X.509\n
    \             -- certificate in decreasing order of\n              -- preference.\n
    \         rejectedAlgorithm [1] AlgorithmIdentifier OPTIONAL,\n              --
    This identifies the digest algorithm that was\n              -- used to sign the
    client's X.509 certificate and\n              -- has been rejected by the KDC
    in the process of\n              -- validating the client's X.509 certificate\n
    \             -- [RFC5280].\n          ...\n   }\n   OtherInfo ::= SEQUENCE {\n
    \          algorithmID   AlgorithmIdentifier,\n           partyUInfo     [0] OCTET
    STRING,\n           partyVInfo     [1] OCTET STRING,\n           suppPubInfo    [2]
    OCTET STRING OPTIONAL,\n           suppPrivInfo   [3] OCTET STRING OPTIONAL\n
    \  }\n   PkinitSuppPubInfo ::= SEQUENCE {\n          enctype           [0] Int32,\n
    \             -- The enctype of the AS reply key.\n          as-REQ            [1]
    OCTET STRING,\n              -- The DER encoding of the AS-REQ [RFC4120] from
    the\n              -- client.\n          pk-as-rep         [2] OCTET STRING,\n
    \             -- The DER encoding of the PA-PK-AS-REP [RFC4556] in the\n              --
    KDC reply.\n          ...\n   }\n   AuthPack ::= SEQUENCE {\n          pkAuthenticator
    \  [0] PKAuthenticator,\n          clientPublicValue [1] SubjectPublicKeyInfo
    OPTIONAL,\n          supportedCMSTypes [2] SEQUENCE OF AlgorithmIdentifier\n                   OPTIONAL,\n
    \         clientDHNonce     [3] DHNonce OPTIONAL,\n          ...,\n          supportedKDFs
    \    [4] SEQUENCE OF KDFAlgorithmId OPTIONAL,\n              -- Contains an unordered
    set of KDFs supported by the\n              -- client.\n          ...\n   }\n
    \  KDFAlgorithmId ::= SEQUENCE {\n          kdf-id            [0] OBJECT IDENTIFIER,\n
    \             -- The object identifier of the KDF\n          ...\n   }\n   DHRepInfo
    ::= SEQUENCE {\n          dhSignedData      [0] IMPLICIT OCTET STRING,\n          serverDHNonce
    \    [1] DHNonce OPTIONAL,\n          ...,\n          kdf               [2] KDFAlgorithmId
    OPTIONAL,\n              -- The KDF picked by the KDC.\n          ...\n   }\n
    \  END\n"
  title: Appendix A.  PKINIT ASN.1 Module
- contents:
  - "Acknowledgements\n   Jeffery Hutzelman, Shawn Emery, Tim Polk, Kelley Burgin,
    Ben Kaduk,\n   Scott Bradner, and Eric Rescorla reviewed the document and provided\n
    \  suggestions for improvements.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Love Hornquist Astrand\n   Apple, Inc\n   Cupertino, CA\n
    \  United States of America\n   Email: lha@apple.com\n   Larry Zhu\n   Oracle
    Corporation\n   500 Oracle Parkway\n   Redwood Shores, CA  94065\n   United States
    of America\n   Email: larryzhu@live.com\n   Margaret Cullen\n   Painless Security\n
    \  4 High St, Suite 134\n   North Andover, MA  01845\n   United States of America\n
    \  Phone: +1 781-405-7464\n   Email: margaret@painless-security.com\n   Greg Hudson\n
    \  MIT\n   Email: ghudson@mit.edu\n"
  title: Authors' Addresses
