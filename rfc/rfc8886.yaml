- title: __initial_text__
  contents:
  - '                         Secure Device Install

    '
- title: Abstract
  contents:
  - "Abstract\n   Deploying a new network device in a location where the operator\
    \ has\n   no staff of its own often requires that an employee physically travel\n\
    \   to the location to perform the initial install and configuration,\n   even\
    \ in shared facilities with \"remote-hands\" (or similar) support.\n   In many\
    \ cases, this could be avoided if there were an easy way to\n   transfer the initial\
    \ configuration to a new device while still\n   maintaining confidentiality of\
    \ the configuration.\n   This document extends existing vendor proprietary auto-install\
    \ to\n   provide limited confidentiality to initial configuration during\n   bootstrapping\
    \ of the device.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8886.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Overview\n     2.1.  Example Scenario\n\
    \   3.  Vendor Role\n     3.1.  Device Key Generation\n     3.2.  Directory Server\n\
    \   4.  Operator Role\n     4.1.  Administrative\n     4.2.  Technical\n     4.3.\
    \  Example Initial Customer Boot\n   5.  Additional Considerations\n     5.1.\
    \  Key Storage\n     5.2.  Key Replacement\n     5.3.  Device Reinstall\n   6.\
    \  IANA Considerations\n   7.  Security Considerations\n   8.  Informative References\n\
    \   Appendix A.  Proof of Concept\n     A.1.  Step 1: Generating the Certificate\n\
    \       A.1.1.  Step 1.1: Generate the Private Key\n       A.1.2.  Step 1.2: Generate\
    \ the Certificate Signing Request\n       A.1.3.  Step 1.3: Generate the (Self-Signed)\
    \ Certificate Itself\n     A.2.  Step 2: Generating the Encrypted Configuration\n\
    \       A.2.1.  Step 2.1: Fetch the Certificate\n       A.2.2.  Step 2.2: Encrypt\
    \ the Configuration File\n       A.2.3.  Step 2.3: Copy Configuration to the Configuration\n\
    \               Server\n     A.3.  Step 3: Decrypting and Using the Configuration\n\
    \       A.3.1.  Step 3.1: Fetch Encrypted Configuration File from\n          \
    \     Configuration Server\n       A.3.2.  Step 3.2: Decrypt and Use the Configuration\n\
    \   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In a growing, global network, significant amounts of time\
    \ and money\n   are spent deploying new devices and \"forklift\" upgrading existing\n\
    \   devices.  In many cases, these devices are in shared facilities (for\n   example,\
    \ Internet Exchange Points (IXP) or \"carrier-neutral data\n   centers\"), which\
    \ have staff on hand that can be contracted to perform\n   tasks including physical\
    \ installs, device reboots, loading initial\n   configurations, etc.  There are\
    \ also a number of (often proprietary)\n   protocols to perform initial device\
    \ installs and configurations.  For\n   example, many network devices will attempt\
    \ to use DHCP [RFC2131] or\n   DHCPv6 [RFC8415] to get an IP address and configuration\
    \ server and\n   then fetch and install a configuration when they are first powered\n\
    \   on.\n   The configurations of network devices contain a significant amount\
    \ of\n   security-related and proprietary information (for example, RADIUS\n \
    \  [RFC2865] or TACACS+ [TACACS] secrets).  Exposing these to a third\n   party\
    \ to load onto a new device (or using an auto-install technique\n   that fetches\
    \ an unencrypted configuration file via TFTP [RFC1350]) or\n   something similar\
    \ is an unacceptable security risk for many\n   operators, and so they send employees\
    \ to remote locations to perform\n   the initial configuration work; this costs\
    \ time and money.\n   There are some workarounds to this, such as asking the vendor\
    \ to\n   preconfigure the device before shipping it; asking the remote support\n\
    \   to install a terminal server; providing a minimal, unsecured\n   configuration\
    \ and using that to bootstrap to a complete\n   configuration; etc.  However,\
    \ these are often clumsy and have\n   security issues.  As an example, in the\
    \ terminal server case, the\n   console port connection could be easily snooped.\n\
    \   An ideal solution in this space would protect both the\n   confidentiality\
    \ of device configuration in transit and the\n   authenticity (and authorization\
    \ status) of configuration to be used\n   by the device.  The mechanism described\
    \ in this document only\n   addresses the former and makes no effort to do the\
    \ latter, with the\n   device accepting any configuration file that comes its\
    \ way and is\n   encrypted to the device's key (or not encrypted, as the case\
    \ may be).\n   Other solutions (such as Secure Zero Touch Provisioning (SZTP)\n\
    \   [RFC8572], Bootstrapping Remote Secure Key Infrastructures (BRSKI)\n   [BRSKI],\
    \ and other voucher-based methods) are more fully featured but\n   also require\
    \ more complicated machinery.  This document describes\n   something much simpler,\
    \ at the cost of only providing limited\n   protection.\n   This document layers\
    \ security onto existing auto-install solutions\n   (one example of which is [Cisco_AutoInstall])\
    \ to provide a method to\n   initially configure new devices while maintaining\
    \ (limited)\n   confidentiality of the initial configuration.  It is optimized\
    \ for\n   simplicity, for both the implementor and the operator.  It is\n   explicitly\
    \ not intended to be a fully featured system for managing\n   installed devices\
    \ nor is it intended to solve all use cases; rather,\n   it is a simple targeted\
    \ solution to solve a common operational issue\n   where the network device has\
    \ been delivered, fiber has been laid (as\n   appropriate), and there is no trusted\
    \ member of the operator's staff\n   to perform the initial configuration.  This\
    \ solution is only intended\n   to increase confidentiality of the information\
    \ in the configuration\n   file and does not protect the device itself from loading\
    \ a malicious\n   configuration.\n   This document describes a concept and some\
    \ example ways of\n   implementing this concept.  As devices have different capabilities\n\
    \   and use different configuration paradigms, one method will not suit\n   all,\
    \ and so it is expected that vendors will differ in exactly how\n   they implement\
    \ this.\n   This solution is specifically designed to be a simple method on top\n\
    \   of exiting device functionality.  If devices do not support this new\n   method,\
    \ they can continue to use the existing functionality.  In\n   addition, operators\
    \ can choose to use this to protect their\n   configuration information or can\
    \ continue to use the existing\n   functionality.\n   The issue of securely installing\
    \ devices is in no way a new issue nor\n   is it limited to network devices; it\
    \ occurs when deploying servers,\n   PCs, Internet of Things (IoT) devices, and\
    \ in many other situations.\n   While the solution described in this document\
    \ is obvious (encrypt the\n   config, then decrypt it with a device key), this\
    \ document only\n   discusses the use for network devices, such as routers and\
    \ switches.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Most network devices already include some sort of initial\n\
    \   bootstrapping logic (sometimes called 'autoboot' or 'autoinstall').\n   This\
    \ generally works by having a newly installed, unconfigured device\n   obtain\
    \ an IP address for itself and discover the address of a\n   configuration server\
    \ (often called 'next-server', 'siaddr', or 'tftp-\n   server-name') using DHCP\
    \ or DHCPv6 (see [RFC2131] and [RFC8415]).\n   The device then contacts this configuration\
    \ server to download its\n   initial configuration, which is often identified\
    \ using the device's\n   serial number, Media Access Control (MAC) address, or\
    \ similar.  This\n   document extends this (vendor-specific) paradigm by allowing\
    \ the\n   configuration file to be encrypted.\n   This document uses the serial\
    \ number of the device as a unique device\n   identifier for simplicity; some\
    \ vendors may not want to implement the\n   system using the serial number as\
    \ the identifier for business reasons\n   (a competitor or similar could enumerate\
    \ the serial numbers and\n   determine how many devices have been manufactured).\
    \  Implementors are\n   free to choose some other way of generating identifiers\
    \ (e.g., a\n   Universally Unique Identifier (UUID) [RFC4122]), but this will\
    \ likely\n   make it somewhat harder for operators to use (the serial number is\n\
    \   usually easy to find on a device).\n"
- title: 2.1.  Example Scenario
  contents:
  - "2.1.  Example Scenario\n   Operator_A needs another peering router, and so they\
    \ order another\n   router from Vendor_B to be drop-shipped to the facility. \
    \ Vendor_B\n   begins assembling the new device and tells Operator_A what the\
    \ new\n   device's serial number will be (SN:17894321).  When Vendor_B first\n\
    \   installs the firmware on the device and boots it, the device\n   generates\
    \ a public-private key pair, and Vendor_B publishes the\n   public key on its\
    \ key server (in a public key certificate, for ease\n   of use).\n   While the\
    \ device is being shipped, Operator_A generates the initial\n   device configuration\
    \ and fetches the certificate from Vendor_B key\n   servers by providing the serial\
    \ number of the new device.  Operator_A\n   then encrypts the device configuration\
    \ and puts this encrypted\n   configuration on a (local) TFTP server.\n   When\
    \ the device arrives at the Point of Presence (POP), it gets\n   installed in\
    \ Operator_A's rack and cabled as instructed.  The new\n   device powers up and\
    \ discovers that it has not yet been configured.\n   It enters its autoboot state\
    \ and begins the DHCP process.\n   Operator_A's DHCP server provides it with an\
    \ IP address and the\n   address of the configuration server.  The router uses\
    \ TFTP to fetch\n   its configuration file.  Note that all of this is existing\n\
    \   functionality.  The device attempts to load the configuration file.\n   As\
    \ an added step, if the configuration file cannot be parsed, the\n   device tries\
    \ to use its private key to decrypt the file and, assuming\n   it validates, proceeds\
    \ to install the new, decrypted configuration.\n   Only the \"correct\" device\
    \ will have the required private key and be\n   able to decrypt and use the configuration\
    \ file (see Security\n   Considerations (Section 7)).  An attacker would be able\
    \ to connect to\n   the network and get an IP address.  They would also be able\
    \ to\n   retrieve (encrypted) configuration files by guessing serial numbers\n\
    \   (or perhaps the server would allow directory listing), but without\n   the\
    \ private keys, an attacker will not be able to decrypt the files.\n"
- title: 3.  Vendor Role
  contents:
  - "3.  Vendor Role\n   This section describes the vendor's roles and provides an\
    \ overview of\n   what the device needs to do.\n"
- title: 3.1.  Device Key Generation
  contents:
  - "3.1.  Device Key Generation\n   Each device requires a public-private key pair\
    \ and for the public\n   part to be published and retrievable by the operator.\
    \  The\n   cryptographic algorithm and key lengths to be used are out of the\n\
    \   scope of this document.  This section illustrates one method, but, as\n  \
    \ with much of this document, the exact mechanism may vary by vendor.\n   Enrollment\
    \ over Secure Transport [RFC7030] and possibly the Simple\n   Certificate Enrollment\
    \ Protocol [RFC8894] are methods that vendors\n   may want to consider.\n   During\
    \ the manufacturing stage, when the device is initially powered\n   on, it will\
    \ generate a public-private key pair.  It will send its\n   unique device identifier\
    \ and the public key to the vendor's directory\n   server [RFC5280] to be published.\
    \  The vendor's directory server\n   should only accept certificates that are\
    \ from the manufacturing\n   facility and that match vendor-defined policies (for\
    \ example,\n   extended key usage and extensions).  Note that some devices may\
    \ be\n   constrained and so may send the raw public key and unique device\n  \
    \ identifier to the certificate publication server, while more capable\n   devices\
    \ may generate and send self-signed certificates.  This\n   communication with\
    \ the directory server should be integrity protected\n   and should occur in a\
    \ controlled environment.\n   This reference architecture needs a serialization\
    \ format for the key\n   material.  Due to the prevalence of tooling support for\
    \ it on network\n   devices, X.509 certificates are a convenient format to exchange\n\
    \   public keys.  However, most of the metadata that would be used for\n   revocation\
    \ and aging will not be used and should be ignored by both\n   the client and\
    \ server.  In such cases, the signature on the\n   certificate conveys no value,\
    \ and the consumer of the certificate is\n   expected to pin the end-entity key\
    \ fingerprint (versus using a PKI\n   and signature chain).\n"
- title: 3.2.  Directory Server
  contents:
  - "3.2.  Directory Server\n   The directory server contains a database of certificates.\
    \  If newly\n   manufactured devices upload certificates, the directory server\
    \ can\n   simply publish these; if the devices provide the raw public keys and\n\
    \   unique device identifier, the directory server will need to wrap\n   these\
    \ in a certificate.\n   The customers (e.g., Operator_A) query this server with\
    \ the serial\n   number (or other provided unique identifier) of a device and\
    \ retrieve\n   the associated certificate.  It is expected that operators will\n\
    \   receive the unique device identifier (serial number) of devices when\n   they\
    \ purchase them and will download and store the certificate.  This\n   means that\
    \ there is not a hard requirement on the reachability of the\n   directory server.\n\
    \        |Device|         | Directory  |\n        +------+         |   Server\
    \   |\n   |   | Initial |  |   |              |\n   |   |  boot?  |  |   |   \
    \           |\n   | +------v-----+ |   |              |\n   | |  Generate  | |\
    \   |              |\n   | |Self-signed | |   |              |\n   | |Certificate\
    \ | |   |              |\n   |        +-------|---|-->|Receive|  |\n   |     \
    \           |   |   |Publish|  |\n          Figure 1: Initial Certificate Generation\
    \ and Publication\n"
- title: 4.  Operator Role
  contents:
  - '4.  Operator Role

    '
- title: 4.1.  Administrative
  contents:
  - "4.1.  Administrative\n   When purchasing a new device, the accounting department\
    \ will need to\n   get the unique device identifier (e.g., serial number) of the\
    \ new\n   device and communicate it to the operations group.\n"
- title: 4.2.  Technical
  contents:
  - "4.2.  Technical\n   The operator will contact the vendor's publication server\
    \ and\n   download the certificate (by providing the unique device identifier\n\
    \   of the device).  The operator fetches the certificate using a secure\n   transport\
    \ that authenticates the source of the certificate, such as\n   HTTPS (confidentiality\
    \ protection can provide some privacy and\n   metadata-leakage benefit but is\
    \ not key to the primary mechanism of\n   this document).  The operator will then\
    \ encrypt the initial\n   configuration (for example, using S/MIME [RFC8551])\
    \ using the key in\n   the certificate and place it on their configuration server.\n\
    \   See Appendix A for examples.\n      |Operator|         | Directory  |\n  \
    \    +--------+         |   Server   |\n   | |   Fetch   |  |  |  |          \
    \ | |\n   | |  Device   |<------>|Certificate| |\n   | |Certificate|  |  |  |\
    \           | |\n   | +-----v------+ |  |                |\n   | |  Encrypt  \
    \ | |  |                |\n   | |   Device   | |  |                |\n   | | \
    \  Config   | |  |                |\n   | +-----v------+ |  |                |\n\
    \   | |  Publish   | |  |                |\n   | |    TFTP    | |  |         \
    \       |\n   | |   Server   | |  |                |\n   Figure 2: Fetching the\
    \ Certificate, Encrypting the Configuration, and\n                   Publishing\
    \ the Encrypted Configuration\n"
- title: 4.3.  Example Initial Customer Boot
  contents:
  - "4.3.  Example Initial Customer Boot\n   When the device is first booted by the\
    \ customer (and on subsequent\n   boots), if the device does not have a valid\
    \ configuration, it will\n   use existing auto-install functionality.  As an example,\
    \ it performs\n   DHCP Discovery until it gets a DHCP offer including DHCP option\
    \ 66\n   (Server-Name) or 150 (TFTP server address), contacts the server\n   listed\
    \ in these DHCP options, and downloads its configuration file.\n   Note that this\
    \ is existing functionality (for example, Cisco devices\n   fetch the config file\
    \ named by the Bootfile-Name DHCP option (67)).\n   After retrieving the configuration\
    \ file, the device needs to\n   determine if it is encrypted or not.  If it is\
    \ not encrypted, the\n   existing behavior is used.  If the configuration is encrypted,\
    \ the\n   process continues as described in this document.  If the device has\n\
    \   been configured to only support encrypted configuration and\n   determines\
    \ that the configuration file is not encrypted, it should\n   abort.  The method\
    \ used to determine if the configuration is\n   encrypted or not is implementation\
    \ dependent; there are a number of\n   (obvious) options, including having a magic\
    \ string in the file\n   header, using a file name extension (e.g., config.enc),\
    \ or using\n   specific DHCP options.\n   If the file is encrypted, the device\
    \ will attempt to decrypt and\n   parse the file.  If able, it will install the\
    \ configuration and start\n   using it.  If it cannot decrypt the file or if parsing\
    \ the\n   configuration fails, the device will either abort the auto-install\n\
    \   process or repeat this process until it succeeds.  When retrying,\n   care\
    \ should be taken to not overwhelm the server hosting the\n   encrypted configuration\
    \ files.  It is suggested that the device retry\n   every 5 minutes for the first\
    \ hour and then every hour after that.\n   As it is expected that devices may\
    \ be installed well before the\n   configuration file is ready, a maximum number\
    \ of retries is not\n   specified.\n   Note that the device only needs to be able\
    \ to download the\n   configuration file; after the initial power on in the factory,\
    \ it\n   never needs to access the Internet, vendor, or directory server.  The\n\
    \   device (and only the device) has the private key and so has the\n   ability\
    \ to decrypt the configuration file.\n             | Device |                |Config\
    \ server |\n   | |   DHCP    |             |    |                  |\n   | +-----v------+\
    \            |    |  +-----------+   |\n   | |Fetch config|<------------------>|\
    \  config   |   |\n   |       X                   |    |                  |\n\
    \   |     /   \\ N    +--------+ |    |                  |\n   |    | Enc?|---->|Install,|\
    \ |    |                  |\n   |     \\   /      |  Boot  | |    |          \
    \        |\n   |       V                   |    |                  |\n   |   \
    \    |Y                  |    |                  |\n   | +-----v------+      \
    \      |    |                  |\n   | |Decrypt with|            |    |      \
    \            |\n   | |private key |            |    |                  |\n   |\
    \       v                   |    |                  |\n   |     /   \\ Y    +--------+\
    \ |    |                  |\n   |    |Sane?|---->|Install,| |    |           \
    \       |\n   |     \\   /      |  Boot  | |    |                  |\n   |   \
    \    V                   |    |                  |\n   |       |N            \
    \      |    |                  |\n   |  +----v---+               |    |      \
    \            |\n   |  |Retry or|               |    |                  |\n   |\
    \  | abort  |               |    |                  |\n        Figure 3: Device\
    \ Boot, Fetch, and Install Configuration File\n"
- title: 5.  Additional Considerations
  contents:
  - '5.  Additional Considerations

    '
- title: 5.1.  Key Storage
  contents:
  - "5.1.  Key Storage\n   Ideally, the key pair would be stored in a Trusted Platform\
    \ Module\n   (TPM) on something that is identified as the \"router\" -- for example,\n\
    \   the chassis/backplane.  This is so that a key pair is bound to what\n   humans\
    \ think of as the \"device\" and not, for example, (redundant)\n   routing engines.\
    \  Devices that implement IEEE 802.1AR [IEEE802-1AR]\n   could choose to use the\
    \ Initial Device Identifier (IDevID) for this\n   purpose.\n"
- title: 5.2.  Key Replacement
  contents:
  - "5.2.  Key Replacement\n   It is anticipated that some operator may want to replace\
    \ the (vendor-\n   provided) keys after installing the device.  There are two\
    \ options\n   when implementing this: a vendor could allow the operator's key\
    \ to\n   completely replace the initial device-generated key (which means\n  \
    \ that, if the device is ever sold, the new owner couldn't use this\n   technique\
    \ to install the device), or the device could prefer the\n   operator's installed\
    \ key.  This is an implementation decision left to\n   the vendor.\n"
- title: 5.3.  Device Reinstall
  contents:
  - "5.3.  Device Reinstall\n   Increasingly, operations are moving towards an automated\
    \ model of\n   device management, whereby portions of the configuration (or the\n\
    \   entire configuration) are programmatically generated.  This means\n   that\
    \ operators may want to generate an entire configuration after the\n   device\
    \ has been initially installed and ask the device to load and\n   use this new\
    \ configuration.  It is expected (but not defined in this\n   document, as it\
    \ is vendor specific) that vendors will allow the\n   operator to copy a new,\
    \ encrypted configuration (or part of a\n   configuration) onto a device and then\
    \ request that the device decrypt\n   and install it (e.g., 'load replace <filename>\
    \ encrypted').  The\n   operator could also choose to reset the device to factory\
    \ defaults\n   and allow the device to act as though it were the initial boot\
    \ (see\n   Section 4.3).\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This reference architecture is intended to incrementally\
    \ improve upon\n   commonly accepted \"auto-install\" practices used today that\
    \ may\n   transmit configurations unencrypted (e.g., unencrypted configuration\n\
    \   files that can be downloaded connecting to unprotected ports in data\n   centers,\
    \ mailing initial configuration files on flash drives, or\n   emailing configuration\
    \ files and asking a third party to copy and\n   paste them over a serial terminal)\
    \ or allow unrestricted access to\n   these configurations.\n   This document\
    \ describes an object-level security design to provide\n   confidentiality assurances\
    \ for the configuration stored at rest on\n   the configuration server and for\
    \ configuration while it is in transit\n   between the configuration server and\
    \ the unprovisioned device, even\n   if the underlying transport does not provide\
    \ this security service.\n   The architecture provides no assurances about the\
    \ source of the\n   encrypted configuration or protect against theft and reuse\
    \ of\n   devices.\n   An attacker (e.g., a malicious data center employee, person\
    \ in the\n   supply chain, etc.) who has physical access to the device before\
    \ it\n   is connected to the network or who manages to exploit it once\n   installed\
    \ may be able to extract the device private key (especially\n   if it is not stored\
    \ in a TPM), pretend to be the device when\n   connecting to the network, and\
    \ download and extract the (encrypted)\n   configuration file.\n   An attacker\
    \ with access to the configuration server (or the ability\n   to route traffic\
    \ to configuration server under their control) and the\n   device's public key\
    \ could return a configuration of the attacker's\n   choosing to the unprovisioned\
    \ device.\n   This mechanism does not protect against a malicious vendor.  While\n\
    \   the key pair should be generated on the device and the private key\n   should\
    \ be securely stored, the mechanism cannot detect or protect\n   against a vendor\
    \ who claims to do this but instead generates the key\n   pair off device and\
    \ keeps a copy of the private key.  It is largely\n   understood in the operator\
    \ community that a malicious vendor or\n   attacker with physical access to the\
    \ device is largely a \"Game Over\"\n   situation.\n   Even when using a secure\
    \ bootstrap mechanism, security-conscious\n   operators may wish to bootstrap\
    \ devices with a minimal or less-\n   sensitive configuration and then replace\
    \ this with a more complete\n   one after install.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [BRSKI]    Pritikin, M., Richardson, M., Eckert,\
    \ T., Behringer, M.,\n              and K. Watsen, \"Bootstrapping Remote Secure\
    \ Key\n              Infrastructures (BRSKI)\", Work in Progress, Internet-\n\
    \              Draft, draft-ietf-anima-bootstrapping-keyinfra-44, 21\n       \
    \       September 2020, <https://tools.ietf.org/html/draft-ietf-\n           \
    \   anima-bootstrapping-keyinfra-44>.\n   [Cisco_AutoInstall]\n              Cisco\
    \ Systems, Inc., \"Using AutoInstall to Remotely\n              Configure Cisco\
    \ Networking Devices\", Configuration\n              Fundamentals Configuration\
    \ Guide, Cisco IOS Release 15M&T,\n              January 2018, <https://www.cisco.com/c/en/us/td/docs/ios-\n\
    \              xml/ios/fundamentals/configuration/15mt/fundamentals-15-\n    \
    \          mt-book/cf-autoinstall.html>.\n   [IEEE802-1AR]\n              IEEE,\
    \ \"IEEE Standard for Local and Metropolitan Area\n              Networks - Secure\
    \ Device Identity\", IEEE Std 802-1AR, June\n              2018,\n           \
    \   <https://standards.ieee.org/standard/802_1AR-2018.html>.\n   [RFC1350]  Sollins,\
    \ K., \"The TFTP Protocol (Revision 2)\", STD 33,\n              RFC 1350, DOI\
    \ 10.17487/RFC1350, July 1992,\n              <https://www.rfc-editor.org/info/rfc1350>.\n\
    \   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n         \
    \     RFC 2131, DOI 10.17487/RFC2131, March 1997,\n              <https://www.rfc-editor.org/info/rfc2131>.\n\
    \   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n        \
    \      \"Remote Authentication Dial In User Service (RADIUS)\",\n            \
    \  RFC 2865, DOI 10.17487/RFC2865, June 2000,\n              <https://www.rfc-editor.org/info/rfc2865>.\n\
    \   [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n       \
    \       Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI\
    \ 10.17487/RFC4122, July 2005,\n              <https://www.rfc-editor.org/info/rfc4122>.\n\
    \   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n         \
    \     Housley, R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 5280, DOI 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC7030]  Pritikin, M., Ed., Yee, P., Ed., and D. Harkins, Ed.,\n       \
    \       \"Enrollment over Secure Transport\", RFC 7030,\n              DOI 10.17487/RFC7030,\
    \ October 2013,\n              <https://www.rfc-editor.org/info/rfc7030>.\n  \
    \ [RFC8415]  Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A.,\n      \
    \        Richardson, M., Jiang, S., Lemon, T., and T. Winters,\n             \
    \ \"Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\",\n              RFC\
    \ 8415, DOI 10.17487/RFC8415, November 2018,\n              <https://www.rfc-editor.org/info/rfc8415>.\n\
    \   [RFC8551]  Schaad, J., Ramsdell, B., and S. Turner, \"Secure/\n          \
    \    Multipurpose Internet Mail Extensions (S/MIME) Version 4.0\n            \
    \  Message Specification\", RFC 8551, DOI 10.17487/RFC8551,\n              April\
    \ 2019, <https://www.rfc-editor.org/info/rfc8551>.\n   [RFC8572]  Watsen, K.,\
    \ Farrer, I., and M. Abrahamsson, \"Secure Zero\n              Touch Provisioning\
    \ (SZTP)\", RFC 8572,\n              DOI 10.17487/RFC8572, April 2019,\n     \
    \         <https://www.rfc-editor.org/info/rfc8572>.\n   [RFC8894]  Gutmann, P.,\
    \ \"Simple Certificate Enrolment Protocol\",\n              RFC 8894, DOI 10.17487/RFC8894,\
    \ September 2020,\n              <https://www.rfc-editor.org/info/rfc8894>.\n\
    \   [TACACS]   Dahm, T., Ota, A., Medway Gash, D., Carrel, D., and L.\n      \
    \        Grant, \"The TACACS+ Protocol\", Work in Progress, Internet-\n      \
    \        Draft, draft-ietf-opsawg-tacacs-18, 20 March 2020,\n              <https://tools.ietf.org/html/draft-ietf-opsawg-tacacs-18>.\n"
- title: Appendix A.  Proof of Concept
  contents:
  - "Appendix A.  Proof of Concept\n   This section contains a proof of concept of\
    \ the system.  It is only\n   intended for illustration and is not intended to\
    \ be used in\n   production.\n   It uses OpenSSL from the command line.  In production,\
    \ something more\n   automated would be used.  In this example, the unique device\n\
    \   identifier is the serial number of the router, SN19842256.\n"
- title: 'A.1.  Step 1: Generating the Certificate'
  contents:
  - "A.1.  Step 1: Generating the Certificate\n   This step is performed by the router.\
    \  It generates a key, then a\n   Certificate Signing Request (CSR), and then\
    \ a self-signed\n   certificate.\n"
- title: 'A.1.1.  Step 1.1: Generate the Private Key'
  contents:
  - "A.1.1.  Step 1.1: Generate the Private Key\n   $ openssl ecparam -out privatekey.key\
    \ -name prime256v1 -genkey\n   $\n"
- title: 'A.1.2.  Step 1.2: Generate the Certificate Signing Request'
  contents:
  - "A.1.2.  Step 1.2: Generate the Certificate Signing Request\n   $ openssl req\
    \ -new -key key.pem -out SN19842256.csr\n   Common Name (e.g., server FQDN or\
    \ YOUR name) []:SN19842256\n"
- title: 'A.1.3.  Step 1.3: Generate the (Self-Signed) Certificate Itself'
  contents:
  - "A.1.3.  Step 1.3: Generate the (Self-Signed) Certificate Itself\n   $ openssl\
    \ req -x509 -days 36500 -key key.pem -in SN19842256.csr\n   -out SN19842256.crt\n\
    \   The router then sends the key to the vendor's key server for\n   publication\
    \ (not shown).\n"
- title: 'A.2.  Step 2: Generating the Encrypted Configuration'
  contents:
  - "A.2.  Step 2: Generating the Encrypted Configuration\n   The operator now wants\
    \ to deploy the new router.\n   They generate the initial configuration (using\
    \ whatever magic tool\n   generates router configs!), fetch the router's certificate,\
    \ and\n   encrypt the configuration file to that key.  This is done by the\n \
    \  operator.\n"
- title: 'A.2.1.  Step 2.1: Fetch the Certificate'
  contents:
  - "A.2.1.  Step 2.1: Fetch the Certificate\n   $ wget http://keyserv.example.net/certificates/SN19842256.crt\n"
- title: 'A.2.2.  Step 2.2: Encrypt the Configuration File'
  contents:
  - "A.2.2.  Step 2.2: Encrypt the Configuration File\n   S/MIME is used here because\
    \ it is simple to demonstrate.  This is\n   almost definitely not the best way\
    \ to do this.\n   $ openssl smime -encrypt -aes-256-cbc -in SN19842256.cfg\\\n\
    \      -out SN19842256.enc -outform PEM SN19842256.crt\n   $ more SN19842256.enc\n\
    \   -----BEGIN PKCS7-----\n   MIICigYJKoZIhvcNAQcDoIICezCCAncCAQAxggE+MIIBOgIBADAiMBUxEzARBgNV\n\
    \   BAMMClNOMTk4NDIyNTYCCQDJVuBlaTOb1DANBgkqhkiG9w0BAQEFAASCAQBABvM3\n   ...\n\
    \   LZoq08jqlWhZZWhTKs4XPGHUdmnZRYIP8KXyEtHt\n   -----END PKCS7-----\n"
- title: 'A.2.3.  Step 2.3: Copy Configuration to the Configuration Server'
  contents:
  - "A.2.3.  Step 2.3: Copy Configuration to the Configuration Server\n   $ scp SN19842256.enc\
    \ config.example.com:/tftpboot\n"
- title: 'A.3.  Step 3: Decrypting and Using the Configuration'
  contents:
  - "A.3.  Step 3: Decrypting and Using the Configuration\n   When the router connects\
    \ to the operator's network, it will detect\n   that it does not have a valid\
    \ configuration file and will start the\n   \"autoboot\" process.  This is a well-documented\
    \ process, but the high-\n   level overview is that it will use DHCP to obtain\
    \ an IP address and\n   configuration server.  It will then use TFTP to download\
    \ a\n   configuration file, based upon its serial number (this document\n   modifies\
    \ the solution to fetch an encrypted configuration file\n   (ending in .enc)).\
    \  It will then decrypt the configuration file and\n   install it.\n"
- title: 'A.3.1.  Step 3.1: Fetch Encrypted Configuration File from Configuration'
  contents:
  - "A.3.1.  Step 3.1: Fetch Encrypted Configuration File from Configuration\n   \
    \     Server\n   $ tftp 2001:0db8::23 -c get SN19842256.enc\n"
- title: 'A.3.2.  Step 3.2: Decrypt and Use the Configuration'
  contents:
  - "A.3.2.  Step 3.2: Decrypt and Use the Configuration\n   $ openssl smime -decrypt\
    \ -in SN19842256.enc -inform pkcs7\\\n      -out config.cfg -inkey key.pem\n \
    \  If an attacker does not have the correct key, they will not be able\n   to\
    \ decrypt the configuration file:\n   $ openssl smime -decrypt -in SN19842256.enc\
    \ -inform pkcs7\\\n      -out config.cfg -inkey wrongkey.pem\n   Error decrypting\
    \ PKCS#7 structure\n   140352450692760:error:06065064:digital envelope\n    routines:EVP_DecryptFinal_ex:bad\
    \ decrypt:evp_enc.c:592:\n   $ echo $?\n   4\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors wish to thank everyone who contributed, including\
    \ Benoit\n   Claise, Francis Dupont, Mirja Kuehlewind, Sam Ribeiro, Michael\n\
    \   Richardson, Sean Turner, and Kent Watsen.  Joe Clarke also provided\n   significant\
    \ comments and review, and Tom Petch provided significant\n   editorial contributions\
    \ to better describe the use cases and clarify\n   the scope.\n   Roman Danyliw\
    \ and Benjamin Kaduk also provided helpful text,\n   especially around the certificate\
    \ usage and security considerations.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Warren Kumari\n   Google\n   1600 Amphitheatre Parkway\n\
    \   Mountain View, CA 94043\n   United States of America\n   Email: warren@kumari.net\n\
    \   Colin Doyle\n   Juniper Networks\n   1133 Innovation Way\n   Sunnyvale, CA\
    \ 94089\n"
