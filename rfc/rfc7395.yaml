- contents:
  - "  An Extensible Messaging and Presence Protocol (XMPP) Subprotocol for\n                               WebSocket\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a binding for the Extensible Messaging and\n
    \  Presence Protocol (XMPP) over a WebSocket transport layer.  A\n   WebSocket
    binding for XMPP provides higher performance than the\n   current HTTP binding
    for XMPP.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7395.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology .....................................................3\n   3.
    XMPP Subprotocol ................................................3\n      3.1.
    Handshake ..................................................3\n      3.2. WebSocket
    Messages .........................................4\n      3.3. XMPP Framing ...............................................5\n
    \          3.3.1. Framed XML Stream ...................................5\n           3.3.2.
    Framed Stream Namespace .............................5\n           3.3.3. Stream
    Frames .......................................5\n      3.4. Stream Initiation
    ..........................................6\n      3.5. Stream Errors ..............................................7\n
    \     3.6. Closing the Connection .....................................7\n           3.6.1.
    see-other-uri .......................................8\n      3.7. Stream Restarts
    ............................................9\n      3.8. Pings and Keepalives
    .......................................9\n      3.9. Use of TLS .................................................9\n
    \     3.10. Stream Management ........................................10\n   4.
    Discovering the WebSocket Connection Method ....................10\n   5. IANA
    Considerations ............................................11\n      5.1. WebSocket
    Subprotocol Name ................................11\n      5.2. URN Sub-namespace
    .........................................11\n   6. Security Considerations ........................................12\n
    \  7. References .....................................................14\n      7.1.
    Normative References ......................................14\n      7.2. Informative
    References ....................................14\n   Appendix A. XML Schema ............................................16\n
    \  Acknowledgements ..................................................17\n   Authors'
    Addresses ................................................18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   To date, applications using the Extensible Messaging and
    Presence\n   Protocol (XMPP) (see [RFC6120] and [RFC6121]) on the Web have made\n
    \  use of Bidirectional-streams Over Synchronous HTTP (BOSH) (see\n   [XEP-0124]
    and [XEP-0206]), an XMPP binding to HTTP.  BOSH is based\n   on the HTTP \"long
    polling\" technique, and it suffers from high\n   transport overhead compared
    to XMPP's native binding to TCP.  In\n   addition, there are a number of other
    known issues with long polling\n   [RFC6202] that have an impact on BOSH-based
    systems.\n   In most circumstances, it would be much better to avoid tunneling\n
    \  XMPP over HTTP long-polled connections and instead use XMPP directly.\n   However,
    the APIs and sandbox that browsers have provided do not\n   allow this.  The WebSocket
    protocol [RFC6455] exists to solve these\n   kinds of problems and is a bidirectional
    protocol that provides a\n   simple message-based framing layer, allowing for
    more robust and\n   efficient communication in web applications.\n   The WebSocket
    protocol enables two-way communication between a client\n   and a server, effectively
    emulating TCP at the application layer and,\n   therefore, overcoming many of
    the problems with existing long-polling\n   techniques for bidirectional HTTP.
    \ This document defines a WebSocket\n   subprotocol for XMPP.\n   The WebSocket
    binding for XMPP is designed for use by browser-based\n   applications (e.g.,
    XMPP clients written in JavaScript).  Typically,\n   these applications are used
    to access the same information and\n   communication opportunities (e.g., the
    same XMPP \"roster\" of\n   contacts) as clients that connect to an XMPP server
    over the TCP\n   binding defined in [RFC6120].  Although the only essential difference\n
    \  is the underlying transport binding, relevant implications (e.g.,\n   framing
    methods and discovery processes) are highlighted in this\n   specification.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The basic unit of framing in the WebSocket protocol is called
    a\n   \"message\".  In XMPP, the basic unit is the stanza, which is a subset\n
    \  of the first-level children of each document in an XMPP stream (see\n   Section
    9 of [RFC6120]).  XMPP also has a concept of messages, which\n   are stanzas with
    a top-level element of <message/>.  In this\n   document, the word \"message\"
    will mean a WebSocket message, not an\n   XMPP message stanza (unless otherwise
    noted).\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL
    NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\",
    and\n   \"OPTIONAL\" in this document are to be interpreted as described in\n
    \  [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - '3.  XMPP Subprotocol

    '
  - contents:
    - "3.1.  Handshake\n   The XMPP subprotocol is used to transport XMPP over a WebSocket\n
      \  connection.  The client and server agree to this protocol during the\n   WebSocket
      handshake (see Section 1.3 of [RFC6455]).\n   During the WebSocket handshake,
      the client MUST include the value\n   'xmpp' in the list of protocols for the
      'Sec-WebSocket-Protocol'\n   header.  The reply from the server MUST also contain
      'xmpp' in its\n   own 'Sec-WebSocket-Protocol' header in order for an XMPP subprotocol\n
      \  connection to be established.\n   If a client receives a handshake response
      that does not include\n   'xmpp' in the 'Sec-WebSocket-Protocol' header, then
      an XMPP\n   subprotocol WebSocket connection was not established and the client\n
      \  MUST close the WebSocket connection.\n   Once the handshake has successfully
      completed, WebSocket messages\n   sent or received MUST conform to the protocol
      defined in the rest of\n   this document.\n   The following is an example of
      a WebSocket handshake, followed by\n   opening an XMPP stream:\n   C:  GET /xmpp-websocket
      HTTP/1.1\n       Host: example.com\n       Upgrade: websocket\n       Connection:
      Upgrade\n       Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n       Origin:
      http://example.com\n       ...\n       Sec-WebSocket-Protocol: xmpp\n       Sec-WebSocket-Version:
      13\n   S:  HTTP/1.1 101 Switching Protocols\n       Upgrade: websocket\n       Connection:
      Upgrade\n       ...\n       Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n
      \      Sec-WebSocket-Protocol: xmpp\n   [WebSocket connection established]\n
      \  C:  <open xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\"\n             to=\"example.com\"\n
      \            version=\"1.0\" />\n   S:  <open xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\"\n
      \            from=\"example.com\"\n             id=\"++TR84Sm6A3hnt3Q065SnAbbk3Y=\"\n
      \            xml:lang=\"en\"\n             version=\"1.0\" />\n"
    title: 3.1.  Handshake
  - contents:
    - "3.2.  WebSocket Messages\n   Data frame messages in the XMPP subprotocol MUST
      be of the text type\n   and contain UTF-8 encoded data.\n"
    title: 3.2.  WebSocket Messages
  - contents:
    - "3.3.  XMPP Framing\n   The framing method for the binding of XMPP to WebSocket
      differs from\n   the framing method for the TCP binding as defined in [RFC6120];
      in\n   particular, the WebSocket binding adopts the message framing provided\n
      \  by WebSocket to delineate the stream open and close headers, stanzas,\n   and
      other top-level stream elements.\n"
    - contents:
      - "3.3.1.  Framed XML Stream\n   The start of a framed XML stream is marked
        by the use of an opening\n   \"stream header\", which is an <open/> element
        with the appropriate\n   attributes and namespace declarations (see Section
        3.3.2).  The\n   attributes of the <open/> element are the same as those of
        the\n   <stream/> element defined for the 'http://etherx.jabber.org/streams'\n
        \  namespace [RFC6120] and with the same semantics and restrictions.\n   The
        end of a framed XML stream is denoted by the closing \"stream\n   header\",
        which is a <close/> element with its associated attributes\n   and namespace
        declarations (see Section 3.3.2).\n   The introduction of the <open/> and
        <close/> elements is motivated by\n   the parsable XML document framing restriction
        in Section 3.3.3.  As a\n   consequence, note that a framed XML stream does
        not provide a\n   wrapping <stream:stream/> [RFC6120] element encompassing
        the entirety\n   of the XML stream.\n"
      title: 3.3.1.  Framed XML Stream
    - contents:
      - "3.3.2.  Framed Stream Namespace\n   The XML stream headers (the <open/> and
        <close/> elements) MUST be\n   qualified by the namespace 'urn:ietf:params:xml:ns:xmpp-framing'
        (the\n   \"framed stream namespace\").  If this rule is violated, the entity\n
        \  that receives the offending stream header MUST close the stream with\n
        \  an error, which MUST be <invalid-namespace> (see Section 4.9.3.10 of\n
        \  [RFC6120]).\n"
      title: 3.3.2.  Framed Stream Namespace
    - contents:
      - "3.3.3.  Stream Frames\n   The individual frames of a framed XML stream have
        a one-to-one\n   correspondence with WebSocket messages and MUST be parsable
        as\n   standalone XML documents, complete with all relevant namespace and\n
        \  language declarations.  The inclusion of XML declarations, however,\n   is
        NOT RECOMMENDED, as WebSocket messages are already mandated to be\n   UTF-8
        encoded.  Including declarations in each message would only\n   increase the
        framing overhead of each message.\n   The first character of each frame MUST
        be a '<' character.\n   Every XMPP stanza or other XML element (including
        the stream open and\n   close headers) sent directly over the XML stream MUST
        be sent in its\n   own frame.\n   Example of a WebSocket message that contains
        an independently\n   parsable XML document:\n   <message xmlns=\"jabber:client\"
        xml:lang=\"en\">\n     <body>Every WebSocket message is parsable by itself.</body>\n
        \  </message>\n   Note that for stream features and errors, there is no parent
        context\n   element providing the \"stream\" namespace prefix as in [RFC6120],
        and\n   thus the stream prefix MUST be declared or use an unprefixed form:\n
        \  <stream:features xmlns:stream=\"http://etherx.jabber.org/streams\">\n     <bind
        xmlns=\"urn:ietf:params:xml:ns:xmpp-bind\"/>\n   </stream:features>\n   --
        OR --\n   <error xmlns=\"http://etherx.jabber.org/streams\">\n     <host-unknown
        xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>\n   </error>\n"
      title: 3.3.3.  Stream Frames
    title: 3.3.  XMPP Framing
  - contents:
    - "3.4.  Stream Initiation\n   The first message sent after the WebSocket opening
      handshake MUST be\n   from the initiating entity and MUST be an <open/> element
      qualified\n   by the 'urn:ietf:params:xml:ns:xmpp-framing' namespace and with
      the\n   same attributes mandated for the <stream> opening tag as described in\n
      \  Section 4.7 of [RFC6120].\n   The receiving entity MUST respond with either
      an <open/> element\n   (whose attributes match those described in Section 4.7
      of [RFC6120])\n   or a <close/> element (see Section 3.6.1).\n   An example
      of a successful stream initiation exchange:\n   C:  <open xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\"\n
      \            to=\"example.com\"\n             version=\"1.0\" />\n   S:  <open
      xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\"\n             from=\"example.com\"\n
      \            id=\"++TR84Sm6A3hnt3Q065SnAbbk3Y=\"\n             xml:lang=\"en\"\n
      \            version=\"1.0\" />\n   Clients MUST NOT multiplex XMPP streams
      over the same WebSocket.\n"
    title: 3.4.  Stream Initiation
  - contents:
    - "3.5.  Stream Errors\n   Stream-level errors in XMPP are fatal.  Should such
      an error occur,\n   the server MUST send the stream error as a complete element
      in a\n   message to the client.\n   If the error occurs during the opening of
      a stream, the server MUST\n   send the initial open element response, followed
      by the stream-level\n   error in a second WebSocket message frame.  The server
      MUST then\n   close the connection as specified in Section 3.6.\n"
    title: 3.5.  Stream Errors
  - contents:
    - "3.6.  Closing the Connection\n   The closing process for the XMPP subprotocol
      mirrors that of the XMPP\n   TCP binding as defined in Section 4.4 of [RFC6120],
      except that a\n   <close/> element is used instead of the ending </stream:stream>
      tag.\n   Either the server or the client may close the connection at any time.\n
      \  Before closing the connection, the closing party is expected to first\n   close
      the XMPP stream (if one has been opened) by sending a message\n   with the <close/>
      element, qualified by the\n   \"urn:ietf:params:xml:ns:xmpp-framing\" namespace.
      \ The stream is\n   considered closed when a corresponding <close/> element
      is received\n   from the other party, and the XMPP session is ended.\n   To
      then close the WebSocket connection, the closing party MUST\n   initiate the
      WebSocket closing handshake (see Section 7.1.2 of\n   [RFC6455]).\n   An example
      of ending an XMPP-over-WebSocket session by first closing\n   the XMPP stream
      layer and then the WebSocket connection layer:\n   Client                         (XMPP
      WSS)                      Server\n   |  |                                                             |
      \ |\n   |  | <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />       |
      \ |\n   |  |------------------------------------------------------------>|  |\n
      \  |  |       <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" /> |  |\n
      \  |  |<------------------------------------------------------------|  |\n   |
      \ |                                                             |  |\n   |  |
      \                     (XMPP Stream Closed)                   |  |\n   |  +-------------------------------------------------------------+
      \ |\n   |                                                                   |\n
      \  | WS CLOSE FRAME                                                    |\n   |------------------------------------------------------------------>|\n
      \  |                                                    WS CLOSE FRAME |\n   |<------------------------------------------------------------------|\n
      \  |                                                                   |\n   |
      \                        (Connection Closed)                       |\n   +-------------------------------------------------------------------+\n
      \  If the WebSocket connection is closed or broken without the XMPP\n   stream
      having been closed first, then the XMPP stream is considered\n   implicitly
      closed and the XMPP session ended; however, if the use of\n   stream management
      resumption was negotiated (see [XEP-0198]), the\n   server SHOULD consider the
      XMPP session still alive for a period of\n   time based on server policy as
      specified in [XEP-0198].\n"
    - contents:
      - "3.6.1.  see-other-uri\n   At any point, if the server wishes to instruct
        the client to move to\n   a different WebSocket endpoint (e.g., for load-balancing
        purposes),\n   then a <close/> element is sent with the 'see-other-uri' attribute\n
        \  set to the URI of the new connection endpoint (which MAY be for a\n   different
        transport method, such as BOSH (see [XEP-0124] and\n   [XEP-0206])).\n   Clients
        MUST NOT accept suggested endpoints with a lower security\n   context (e.g.,
        moving from a 'wss://' endpoint to a 'ws://' or\n   'http://' endpoint).\n
        \  An example of the server closing a stream and instructing the client\n
        \  to connect at a different WebSocket endpoint:\n   S: <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\"\n
        \            see-other-uri=\"wss://otherendpoint.example/xmpp-bind\" />\n"
      title: 3.6.1.  see-other-uri
    title: 3.6.  Closing the Connection
  - contents:
    - "3.7.  Stream Restarts\n   Whenever a stream restart is mandated (see Section
      4.3.3 of\n   [RFC6120]), both the server and client streams are implicitly closed\n
      \  and new streams MUST be opened, using the same process as in\n   Section
      3.4.\n   The client MUST send a new stream <open/> element and MUST NOT send
      a\n   closing <close/> element.\n   An example of restarting the stream after
      successful Simple\n   Authentication and Security Layer (SASL) negotiation:\n
      \  S: <success xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\" />\n   [Streams implicitly
      closed]\n   C: <open xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\"\n            to=\"example.com\"\n
      \           version=\"1.0\" />\n"
    title: 3.7.  Stream Restarts
  - contents:
    - "3.8.  Pings and Keepalives\n   Traditionally, XMPP servers and clients often
      send \"whitespace\n   keepalives\" (see Section 4.6.1 of [RFC6120]) between
      stanzas to\n   maintain an XML stream.  However, for the XMPP subprotocol each\n
      \  message is required to start with a '<' character, and, as such,\n   whitespace
      keepalives MUST NOT be used.\n   As alternatives, the XMPP Ping extension [XEP-0199]
      and the XMPP\n   Stream Management extension [XEP-0198] provide pinging mechanisms.\n
      \  Either of these extensions (or both) MAY be used to determine the\n   state
      of the connection.\n   Clients and servers MAY also use WebSocket ping control
      frames for\n   this purpose, but note that some environments, such as browsers,
      do\n   not provide access for generating or monitoring ping control frames.\n"
    title: 3.8.  Pings and Keepalives
  - contents:
    - "3.9.  Use of TLS\n   Transport Layer Security (TLS) cannot be used at the XMPP
      subprotocol\n   layer because the subprotocol does not allow for raw binary
      data to\n   be sent.  Instead, when TLS is used, it MUST be enabled at the\n
      \  WebSocket layer using secure WebSocket connections via the 'wss' URI\n   scheme.
      \ (See Section 10.6 of [RFC6455].)\n   Because TLS is to be provided outside
      of the XMPP subprotocol layer,\n   a server MUST NOT advertise TLS as a stream
      feature (see Section 4.6\n   of [RFC6120]) when using the XMPP subprotocol.
      \ Likewise, a client\n   MUST ignore any advertised TLS stream feature when
      using the XMPP\n   subprotocol.\n"
    title: 3.9.  Use of TLS
  - contents:
    - "3.10.  Stream Management\n   In order to alleviate the problems of temporary
      disconnections, the\n   client MAY use the XMPP Stream Management extension
      [XEP-0198] to\n   confirm when stanzas have been received by the server.\n   In
      particular, the client MAY use session resumption as described in\n   [XEP-0198]
      to recreate the same stream session state after a\n   temporary network unavailability
      or after navigating to a new URL in\n   a browser.\n"
    title: 3.10.  Stream Management
  title: 3.  XMPP Subprotocol
- contents:
  - "4.  Discovering the WebSocket Connection Method\n   Section 3 of [RFC6120] defines
    a procedure for connecting to an XMPP\n   server, including ways to discover the
    TCP/IP address and port of the\n   server using Domain Name System service (DNS
    SRV) records [RFC2782].\n   When using the WebSocket binding as specified in this
    document\n   (instead of the TCP binding as specified in [RFC6120]), a client\n
    \  needs an alternative way to discover information about the server's\n   connection
    methods, since web browsers and other WebSocket-capable\n   software applications
    typically cannot obtain such information from\n   the DNS.\n   The alternative
    lookup process uses Web-host Metadata [RFC6415] and\n   Web Linking [RFC5988],
    where the link relation type is\n   \"urn:xmpp:alt-connections:websocket\" as
    described in \"Discovering\n   Alternative XMPP Connection Methods\" [XEP-0156].
    \ Conceptually, the\n   host-meta lookup process used for the WebSocket binding
    is analogous\n   to the DNS SRV lookup process used for the TCP binding.  The
    process\n   is as follows.\n   1.  Send a request over secure HTTP to the path\n
    \      \"/.well-known/host-meta\" at an HTTP origin [RFC6454] that matches\n       the
    XMPP service domain (e.g., a URL of\n       \"https://im.example.org/.well-known/host-meta\"
    if the XMPP\n       service domain is \"im.example.org\").\n   2.  Retrieve a
    host-meta document specifying a link relation type of\n       \"urn:xmpp:alt-connections:websocket\",
    such as:\n       <XRD xmlns='http://docs.oasis-open.org/ns/xri/xrd-1.0'>\n         <Link
    rel=\"urn:xmpp:alt-connections:websocket\"\n               href=\"wss://im.example.org:443/ws\"
    />\n       </XRD>\n   Servers MAY expose discovery information using host-meta
    documents,\n   and clients MAY use such information to determine the WebSocket\n
    \  endpoint for a server.\n   In cases where the XMPP service domain does not
    match the discovered\n   web origin of the WebSocket endpoint, the Web-host Metadata
    SHOULD be\n   used to establish trust between the XMPP server domain and the\n
    \  WebSocket endpoint as long as the host-meta request and response\n   occurred
    over secure HTTP; this is especially relevant in multi-\n   tenant situations
    where the same WebSocket endpoint is serving\n   multiple XMPP domains (e.g.,
    the XMPP service domains for both\n   \"example.com\" and \"im.example.org\" might
    be serviced by the same\n   WebSocket endpoint at \"hosting.example.net\").  See
    Section 6 for\n   related discussion.\n"
  title: 4.  Discovering the WebSocket Connection Method
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  WebSocket Subprotocol Name\n   IANA has registered the WebSocket XMPP
      subprotocol in the \"WebSocket\n   Subprotocol Name Registry\", with the following
      data:\n   Subprotocol Identifier:  xmpp\n   Subprotocol Common Name:  WebSocket
      Transport for the Extensible\n      Messaging and Presence Protocol (XMPP)\n
      \  Subprotocol Definition:  this document\n"
    title: 5.1.  WebSocket Subprotocol Name
  - contents:
    - "5.2.  URN Sub-namespace\n   A URN sub-namespace for framing of Extensible Messaging
      and Presence\n   Protocol (XMPP) streams is defined as follows.\n   URI:  urn:ietf:params:xml:ns:xmpp-framing\n
      \  Specification:  this document\n   Description:  This is the XML namespace
      name for framing of\n      Extensible Messaging and Presence Protocol (XMPP)
      streams as\n      defined by RFC 7395.\n   Registrant Contact:  IESG <iesg@ietf.org>\n"
    title: 5.2.  URN Sub-namespace
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The WebSocket binding for XMPP differs in several
    respects from the\n   TCP binding defined in [RFC6120]:\n   1.  As described in
    Section 4 of this document, the method for\n       discovering a connection endpoint
    does not use DNS SRV records as\n       in the TCP binding but instead uses Web-host
    Metadata files\n       retrieved via HTTPS from a URL at the XMPP service domain.
    \ From\n       a security standpoint, this is functionally equivalent to\n       resolution
    via DNS SRV records (and still relies on the DNS for\n       resolution of the
    XMPP source domain).\n   2.  The method for authenticating a connection endpoint
    uses TLS\n       (typically with PKIX certificates) as in the TCP binding, but
    the\n       identity to be authenticated is the connection endpoint address\n
    \      instead of the XMPP service domain; delegation from the XMPP\n       service
    domain to the connection endpoint address (if any) is\n       accomplished via
    the discovery method described in Section 4.\n       Thus, the connection endpoint
    is still authenticated, and the\n       delegation is secure as long as the Web-host
    Metadata file is\n       retrieved via HTTPS.  However, note that, in practice,
    this\n       option might not be employed when user agents are configured or\n
    \      deployed for a particular delegated domain.\n   3.  The framing method
    described in Section 3.3 follows the WebSocket\n       pattern by sending one
    top-level XML element per WebSocket\n       message, instead of using streaming
    XML as in the TCP binding.\n       However, the framing method has no impact on
    the security\n       properties of an XMPP session (e.g., end-to-end encryption
    of XML\n       stanzas can be accomplished just as easily with WebSocket framing\n
    \      as with streaming XML).\n   4.  In all other respects (e.g., user authentication
    via SASL,\n       allowable characters in XMPP addresses, and reuse of various\n
    \      technologies such as Base 64, SASL mechanisms, UTF-8, and XML),\n       the
    WebSocket binding does not differ from the TCP binding and,\n       thus, does
    not modify the security properties of the protocol.\n       In all these respects,
    the security considerations of [RFC6120]\n       apply directly to the WebSocket
    binding.\n   In order to ensure that communications over the WebSocket binding
    are\n   as secure as communications over the TCP binding, an operator needs\n
    \  to (1) serve the Web-host Metadata file for the XMPP service domain\n   over
    secure HTTP ('https' URIs) only, (2) configure the WebSocket\n   connection endpoint
    to use TLS ('wss' URIs) only, and (3) deploy\n   certificates that properly identify
    the XMPP service domain and\n   WebSocket connection endpoint for usages (1) and
    (2), respectively.\n   Since application-level TLS cannot be used (see Section
    3.9),\n   applications need to protect the privacy of XMPP traffic at the\n   WebSocket
    or other appropriate layer.\n   Browser-based applications are not able to inspect
    and verify, at the\n   application layer, the certificate used for the WebSocket
    connection\n   to ensure that it corresponds to the domain specified as the 'to'\n
    \  address of the XMPP stream.  There are two cases:\n   1.  If the XMPP service
    domain matches the origin for the WebSocket\n       connection, the relevant check
    is already performed by the\n       browser.  For example, the XMPP service domain
    might be\n       \"foo.example\", and the WebSocket endpoint discovered for the
    link\n       relation type of \"urn:xmpp:alt-connections:websocket\" might be\n
    \      \"wss://foo.example/websocket\".  As long as the certificate\n       provided
    over WebSocket or HTTPS is verified according to the\n       rules defined for
    secure HTTP [RFC2818], then the browser will\n       report the successful establishment
    of a secure connection to the\n       application.  (However, as noted, the application
    is still not\n       able to independently inspect and verify the certificate,
    and\n       needs to trust the browser; this is a limitation of existing\n       browser
    technologies and thus cannot be worked around by\n       WebSocket applications.)\n
    \  2.  In situations where the user agent has to deal with delegation\n       and
    the domain of the XMPP server does not match the web origin\n       of the WebSocket
    endpoint (such as multi-tenant hosting\n       situations), the host-meta process
    described in Section 4 SHOULD\n       be used to delegate trust from the XMPP
    server domain to the\n       WebSocket origin, as long as the host-meta request
    and response\n       occurred over secure HTTP (with appropriate certificate\n
    \      verification as defined in [RFC2818]).\n   When presented with a new WebSocket
    endpoint via the 'see-other-uri'\n   attribute of a <close/> element, clients
    MUST NOT accept the\n   suggestion if the security context of the new endpoint
    is lower than\n   the current one in order to prevent downgrade attacks from a
    'wss://'\n   endpoint to 'ws://'.\n   The security considerations for both WebSocket
    (see Section 10 of\n   [RFC6455]) and XMPP (see Section 13 of [RFC6120]) apply
    to the\n   WebSocket XMPP subprotocol.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2818]
      \ Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC5988]  Nottingham, M., \"Web Linking\", RFC 5988, October 2010,\n              <http://www.rfc-editor.org/info/rfc5988>.\n
      \  [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Core\", RFC 6120, March 2011,\n              <http://www.rfc-editor.org/info/rfc6120>.\n
      \  [RFC6415]  Hammer-Lahav, E. and B. Cook, \"Web Host Metadata\", RFC\n              6415,
      October 2011,\n              <http://www.rfc-editor.org/info/rfc6415>.\n   [RFC6455]
      \ Fette, I. and A. Melnikov, \"The WebSocket Protocol\", RFC\n              6455,
      December 2011,\n              <http://www.rfc-editor.org/info/rfc6455>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC2782]  Gulbrandsen, A., Vixie, P., and
      L. Esibov, \"A DNS RR for\n              specifying the location of services
      (DNS SRV)\", RFC 2782,\n              February 2000, <http://www.rfc-editor.org/info/rfc2782>.\n
      \  [RFC6121]  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Instant Messaging and Presence\", RFC\n              6121, March 2011,\n
      \             <http://www.rfc-editor.org/info/rfc6121>.\n   [RFC6202]  Loreto,
      S., Saint-Andre, P., Salsano, S., and G. Wilkins,\n              \"Known Issues
      and Best Practices for the Use of Long\n              Polling and Streaming
      in Bidirectional HTTP\", RFC 6202,\n              April 2011, <http://www.rfc-editor.org/info/rfc6202>.\n
      \  [RFC6454]  Barth, A., \"The Web Origin Concept\", RFC 6454,\n              December
      2011, <http://www.rfc-editor.org/info/rfc6454>.\n   [XEP-0124] Paterson, I.,
      Smith, D., Saint-Andre, P., Moffitt, J.,\n              Stout, L., and W. Tilanus,
      \"Bidirectional-streams Over\n              Synchronous HTTP (BOSH)\", XSF XEP
      0124, April 2014.\n   [XEP-0156] Hildebrand, J., Saint-Andre, P., and L. Stout,\n
      \             \"Discovering Alternative XMPP Connection Methods\",\n              XSF
      XEP 0156, January 2014.\n   [XEP-0198] Karneges, J., Saint-Andre, P., Hildebrand,
      J., Forno, F.,\n              Cridland, D., and M. Wild, \"Stream Management\",\n
      \             XSF XEP 0198, June 2011.\n   [XEP-0199] Saint-Andre, P., \"XMPP
      Ping\", XSF XEP 0199, June 2009.\n   [XEP-0206] Paterson, I., Saint-Andre, P.,
      Stout, L., and W. Tilanus,\n   \"XMPP Over BOSH\", XSF XEP 0206, April 2014.\n
      \  [XML-SCHEMA]\n              Thompson, H., Beech, D., Maloney, M., and N.
      Mendelsohn,\n              \"XML Schema Part 1: Structures Second Edition\",
      World Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n
      \             October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  XML Schema\n   The following schema formally defines the\n   'urn:ietf:params:xml:ns:xmpp-framing'
    namespace used in this\n   document, in conformance with W3C XML Schema [XML-SCHEMA].
    \ Because\n   validation of XML streams and stanzas is optional, this schema is
    not\n   normative and is provided for descriptive purposes only.\n   <?xml version='1.0'
    encoding='UTF-8'?>\n   <xs:schema\n       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n
    \      targetNamespace='urn:ietf:params:xml:ns:xmpp-framing'\n       xmlns='urn:ietf:params:xml:ns:xmpp-framing'\n
    \      elementFormDefault='unqualified'>\n     <xs:element name='open'>\n       <xs:complexType>\n
    \        <xs:simpleContent>\n           <xs:extension base='empty'>\n             <xs:attribute
    name='from' type='xs:string'\n                           use='optional'/>\n             <xs:attribute
    name='id' type='xs:string'\n                           use='optional'/>\n             <xs:attribute
    name='to' type='xs:string'\n                           use='optional'/>\n             <xs:attribute
    name='version' type='xs:decimal'\n                           use='optional'/>\n
    \            <xs:attribute ref='xml:lang'\n                           use='optional'/>\n
    \          </xs:extension>\n         </xs:simpleContent>\n       </xs:complexType>\n
    \    </xs:element>\n     <xs:element name='close'>\n       <xs:complexType>\n
    \        <xs:simpleContent>\n           <xs:extension base='empty'>\n             <xs:attribute
    name='from' type='xs:string'\n                           use='optional'/>\n             <xs:attribute
    name='id' type='xs:string'\n                           use='optional'/>\n             <xs:attribute
    name='see-other-uri' type='xs:anyURI'\n                           use='optional'/>\n
    \            <xs:attribute name='to' type='xs:string'\n                           use='optional'/>\n
    \            <xs:attribute name='version' type='xs:decimal'\n                           use='optional'/>\n
    \            <xs:attribute ref='xml:lang'\n                           use='optional'/>\n
    \          </xs:extension>\n         </xs:simpleContent>\n       </xs:complexType>\n
    \    </xs:element>\n     <xs:simpleType name='empty'>\n       <xs:restriction
    base='xs:string'>\n         <xs:enumeration value=''/>\n       </xs:restriction>\n
    \    </xs:simpleType>\n   </xs:schema>\n"
  title: Appendix A.  XML Schema
- contents:
  - "Acknowledgements\n   The authors wish to thank the following individuals for
    their\n   feedback: Andreas Guth, Bjoern Hoerhmann, Dave Cridland, Florian\n   Zeitz,
    Kurt Zeilenga, Matt Miller, Matthew Wild, Paul Aurich, Sergey\n   Dobrov, and
    Waqas Hussain.\n   Dan Romascanu reviewed the document on behalf of the General
    Area\n   Review Team.\n   During IESG review, Barry Leiba, Benoit Claise, Dan
    Romascanu, Jari\n   Arkko, Juergen Schoenwaelder, Spencer Dawkins, Stephen Farrell,
    Ted\n   Lemon, Kathleen Moriarty, and Pete Resnick caught several issues that\n
    \  needed to be addressed.\n   The authors gratefully acknowledge the assistance
    of Peter Saint-\n   Andre as document shepherd, Ben Campbell and Joe Hildebrand
    as the\n   working group chairs, and Richard Barnes as the sponsoring Area\n   Director.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Lance Stout (editor)\n   &yet\n   EMail: lance@andyet.net\n
    \  Jack Moffitt\n   Mozilla\n   EMail: jack@metajack.im\n   Eric Cestari\n   cstar
    industries\n   EMail: eric@cstar.io\n"
  title: Authors' Addresses
