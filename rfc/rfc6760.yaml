- title: __initial_text__
  contents:
  - "                 Requirements for a Protocol to Replace\n               the AppleTalk\
    \ Name Binding Protocol (NBP)\n"
- title: Abstract
  contents:
  - "Abstract\n   One of the goals of the authors of Multicast DNS (mDNS) and DNS-Based\n\
    \   Service Discovery (DNS-SD) was to retire AppleTalk and the AppleTalk\n   Name\
    \ Binding Protocol (NBP) and to replace them with an IP-based\n   solution.  This\
    \ document presents a brief overview of the\n   capabilities of AppleTalk NBP\
    \ and outlines the properties required of\n   an IP-based replacement.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6760.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Zero Configuration Networking ...................................4\n  \
    \ 3. Requirements ....................................................4\n    \
    \  3.1. Name-to-Address Mapping ....................................5\n      3.2.\
    \ Name Services, Not Hardware ................................5\n      3.3. Address\
    \ Services, Not Hardware -- or -- Escape the\n           Tyranny of Well-Known\
    \ Ports ................................6\n      3.4. Typed Name Space ...........................................8\n\
    \      3.5. User-Friendly Names ........................................9\n  \
    \    3.6. Zeroconf Operation .........................................9\n    \
    \  3.7. Name Space Management -- or -- Name Conflict Detection ....10\n      3.8.\
    \ Late Binding ..............................................11\n      3.9. Simplicity\
    \ ................................................11\n      3.10. Network Browsing\
    \ .........................................11\n      3.11. Browsing and Registration\
    \ Guidance .......................12\n      3.12. Power Management Support .................................12\n\
    \      3.13. Protocol Agnostic ........................................13\n  \
    \    3.14. Distributed Cache Coherency Protocol .....................13\n    \
    \  3.15. Immediate and Ongoing Information Presentation ...........13\n   4. Existing\
    \ Protocols .............................................14\n   5. IPv6 Considerations\
    \ ............................................14\n   6. Security Considerations\
    \ ........................................14\n   7. Informative References .........................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   An important goal of the participants working on Zeroconf,\
    \ Multicast\n   DNS, and DNS-Based Service Discovery was to provide a viable IP-based\n\
    \   replacement for AppleTalk and the AppleTalk Name Binding Protocol\n   (NBP).\n\
    \   There are many who are experts in the Domain Name System (DNS) who\n   know\
    \ nothing about the AppleTalk Name Binding Protocol (NBP).\n   Without some background\
    \ on how AppleTalk and NBP worked, it may be\n   difficult to understand the reasoning\
    \ and motivations that led to the\n   design decisions in Multicast DNS and DNS-Based\
    \ Service Discovery.\n   This document seeks to remedy this problem by clearly\
    \ stating the\n   requirements for an IP-based replacement for AppleTalk and NBP.\n\
    \   Replacing NBP was not the sole goal of Multicast DNS; therefore,\n   these\
    \ requirements are not the sole design considerations.  However,\n   replacing\
    \ NBP was a major motivation behind the work in Multicast\n   DNS.\n   In most\
    \ cases, the requirements presented in this document are simply\n   a restatement\
    \ of what AppleTalk NBP currently does.  However, this\n   document is not restricted\
    \ to describing only what NBP currently\n   does.  Achieving at least equivalent\
    \ functionality to NBP is a\n   necessary but not sufficient condition for a viable\
    \ replacement.  In\n   some cases, the requirements for a viable IP-based replacement\
    \ go\n   beyond NBP.  For example, AppleTalk NBP uses Apple Extended ASCII for\n\
    \   its character set.  It is clear that an IP-based replacement being\n   designed\
    \ today should use Unicode, in the form of UTF-8 [RFC3629].\n   AppleTalk NBP\
    \ has a reputation, partially deserved, for being too\n   'chatty' on the network.\
    \  An IP-based replacement should not have\n   this same failing.  The intent\
    \ is to learn from NBP and build a\n   superset of its functionality, not to replicate\
    \ it precisely with all\n   the same flaws.\n   The protocols specified in \"\
    Multicast DNS\" [RFC6762] and \"DNS-Based\n   Service Discovery\" [RFC6763], taken\
    \ together, describe a solution\n   that meets these requirements.  This document\
    \ is written, in part, in\n   response to requests for more background information\
    \ explaining the\n   rationale behind the design of those protocols.\n"
- title: 2.  Zero Configuration Networking
  contents:
  - "2.  Zero Configuration Networking\n   Historically, TCP/IP networking required\
    \ configuration, either in the\n   form of manual configuration by a human operator\
    \ or in the form of\n   automated configuration provided by a DHCP server [RFC2131].\n\
    \   One of the characteristics of AppleTalk was that it could operate\n   without\
    \ any dependency on manual configuration or a network service\n   to provide automated\
    \ configuration.  An AppleTalk network could be as\n   small as just two laptop\
    \ computers connected via an Ethernet cable\n   (or wirelessly).\n   IP now has\
    \ self-assigned link-local addresses [RFC3927] [RFC4862],\n   which enable IP-based\
    \ networking in the absence of external\n   configuration.  What remains is the\
    \ need for Zero Configuration name-\n   to-address translation and Zero Configuration\
    \ service discovery, both\n   capabilities that AppleTalk NBP offered.\n   It\
    \ is not necessarily the case that Zero Configuration Networking\n   protocols\
    \ will always be used in all three areas (addressing, naming,\n   and service\
    \ discovery) simultaneously on any given network.  For\n   example, even on networks\
    \ with a DHCP server to provide address\n   configuration, users may still use\
    \ Zero Configuration protocols for\n   name-to-address translation and service\
    \ discovery.  Indeed, on a\n   single network, users may use conventional Unicast\
    \ DNS for looking up\n   the addresses of Internet web sites while at the same\
    \ time using\n   Multicast DNS for looking up the addresses of peers on the local\n\
    \   link.  Therefore, Zero Configuration Networking protocols must\n   coexist\
    \ peacefully with conventional configured IP networking when\n   used together\
    \ on the same network.\n   Networks change state over time.  Hosts and services\
    \ may come and go.\n   Connectivity, addresses, and names change.  In a manually\
    \ configured\n   network, a human operator can remedy errors when they arise.\
    \  In a\n   Zero Configuration Network, no such human operator is available to\n\
    \   diagnose and troubleshoot problems, so Zero Configuration protocols\n   need\
    \ to be self-correcting, automatically accommodating changing\n   network conditions,\
    \ continually converging to correctness in the\n   absence of human intervention\
    \ to manually rectify errors.\n"
- title: 3.  Requirements
  contents:
  - "3.  Requirements\n   This section lists the 15 requirements for an IP-based replacement\n\
    \   for AppleTalk NBP.\n"
- title: 3.1.  Name-to-Address Mapping
  contents:
  - "3.1.  Name-to-Address Mapping\n   NBP's primary function is translating names\
    \ to addresses.\n   NBP stands for Name Binding Protocol, not Network Browsing\
    \ Protocol.\n   Many people know NBP only as \"that thing that used to let you\
    \ browse\n   the network in the old Macintosh Chooser\".  While browsing is an\n\
    \   important facility of NBP, it is secondary to NBP's primary function\n   of\
    \ translating names to addresses.\n   Every time a user prints using AppleTalk,\
    \ the printing software takes\n   the name of the currently selected printer,\
    \ looks up the current\n   AppleTalk address associated with that named service,\
    \ and establishes\n   a connection to that service on the network.  The user may\
    \ invoke\n   NBP's browsing capability once, when first selecting the desired\n\
    \   printer in the Chooser, but after that, every time something is\n   printed,\
    \ it is a simple efficient name-to-address lookup that is\n   being performed,\
    \ not a full-fledged browsing operation.\n   Any NBP replacement needs to support,\
    \ as its primary function, an\n   efficient name-to-address lookup operation.\n"
- title: 3.2.  Name Services, Not Hardware
  contents:
  - "3.2.  Name Services, Not Hardware\n   The primary named entities in NBP are services,\
    \ not \"hosts\",\n   \"machines\", \"devices\", or pieces of hardware of any kind.\
    \  This\n   concept is more subtle than it may seem at first, so it bears some\n\
    \   discussion.\n   The AppleTalk NBP philosophy is that naming a piece of hardware\
    \ on\n   the network is of little use if you can't communicate with that piece\n\
    \   of hardware.  To communicate with a piece of hardware, there needs to\n  \
    \ be a piece of software running on that hardware that sends and\n   receives\
    \ network packets conforming to some specific protocol.  This\n   means that whenever\
    \ you communicate with a machine, you are really\n   communicating with some piece\
    \ of software on that machine.  Even if\n   you just 'ping' a machine to see if\
    \ it is responding, it is not\n   really the machine that you are 'pinging', it\
    \ is the software on that\n   machine that generates ICMP Echo Responses [RFC792].\n\
    \   Consequently, this means that the only things worth naming are the\n   software\
    \ entities with which you can communicate.  A user who wants\n   to use a print\
    \ server or a file server needn't care about what\n   hardware implements those\
    \ services.  There may be a single machine\n   hosting both services, or there\
    \ may be two separate machines.  The\n   end user doesn't need to care.\n   The\
    \ one exception to this is network managers, who may want to name\n   physical\
    \ hardware for the purpose of tracking physical inventory.\n   However, even this\
    \ can be recast into a service-oriented view of the\n   world by saying that what\
    \ you're naming is not the hardware, but the\n   ICMP Echo Responder that runs\
    \ (or is assumed to be running) on every\n   piece of IP hardware.\n"
- title: 3.3.  Address Services, Not Hardware -- or -- Escape the Tyranny of
  contents:
  - "3.3.  Address Services, Not Hardware -- or -- Escape the Tyranny of\n      Well-Known\
    \ Ports\n   The reader may argue that DNS already supports the philosophy of\n\
    \   naming services instead of hosts.  When we see names like\n   \"www.example.com.\"\
    , \"pop.example.com.\", \"smtp.example.com.\",\n   \"news.example.com.\", and\
    \ \"time.example.com.\", we do not assume that\n   those names necessarily refer\
    \ to different hosts.  They are clearly\n   intended to be logical service names\
    \ and could, in fact, all resolve\n   to the same IP address.\n   The shortcoming\
    \ here is that although the names are clearly logical\n   service names, the result\
    \ today of doing a conventional (\"A\" or\n   \"AAAA\") DNS lookup for those names\
    \ gives you only the IP address of\n   the hardware where the service is located.\
    \  To communicate with the\n   desired service, you also need to know the port\
    \ number at which the\n   service can be reached, not just the IP address.\n \
    \  This means that the port number has to be communicated out-of-band,\n   in\
    \ some other way.  One way is for the port number to be a specific\n   well-known\
    \ constant for any given protocol.  This makes it hard to\n   run more than one\
    \ instance of a service on a single piece of\n   hardware.  Another way is for\
    \ the user to explicitly type in the port\n   number, for example, \"www.example.com.:8080\"\
    \ instead of\n   \"www.example.com.\", but needing to know and type in a port\
    \ number is\n   as ugly and fragile as needing to know and type in an IP address.\n\
    \   Another aspect of the difficulty of running more than one instance of\n  \
    \ a service on a single piece of hardware is that it forces application\n   programmers\
    \ to write their own demultiplexing capability.  AppleTalk\n   did not suffer\
    \ this limitation.  If an AppleTalk print server offered\n   three print queues,\
    \ each print queue ran as its own independent\n   service, listening on its own\
    \ port number (called a socket number in\n   AppleTalk terminology), each advertised\
    \ as a separate, independently\n   named NBP entity.  When a client looks up the\
    \ address of that named\n   NBP entity, the reply encodes not only on which net\
    \ and subnet the\n   service resides, and on which host on that subnet (like an\
    \ IP address\n   does), but also on which socket number (port number) within that\n\
    \   host.  In contrast, if an lpr print server offers three print queues,\n  \
    \ all three print queues are typically reached through the same well-\n   known\
    \ port number (515), and then the lpr protocol has to use its own\n   demultiplexing\
    \ capability (the print queue name) in order to\n   determine which print queue\
    \ is sought.  This makes it especially\n   difficult to run two different pieces\
    \ of print queue software from\n   different vendors on the same machine, because\
    \ they cannot both\n   listen on the same well-known port.\n   A similar trick\
    \ is used in HTTP 1.1, where the \"Host\" header line is\n   used to allow multiple\
    \ logical HTTP services to run at the same IP\n   address.  Again, this works\
    \ for a single-vendor solution, but if a\n   user wishes to run multiple web servers\
    \ (for example, an image\n   server, a database program, an HTTP email access\
    \ gateway, and a\n   conventional HTTP server) on a single machine, they can't\
    \ all listen\n   on TCP port 80, the traditional HTTP port.\n   Yet another problem\
    \ of well-known ports is that port numbers are a\n   finite resource.  Originally,\
    \ port numbers 0-255 were reserved for\n   well-known services, and the remaining\
    \ 99.6% of the port space was\n   free for dynamic allocation [RFC1122].  Since\
    \ then, the range of\n   \"Registered Ports\" has crept upwards until today, ports\
    \ 0-49151 are\n   reserved, and only 25% of the space remains available for dynamic\n\
    \   allocation.  Even though 65535 may seem like a lot of available port\n   numbers,\
    \ with the pace of software development today, if every new\n   protocol gets\
    \ its own private port number, we will eventually run\n   out.  To avoid having\
    \ to do application-level demultiplexing,\n   protocols like the X Window System\
    \ wisely use a range of port\n   numbers, and let TCP do the demultiplexing for\
    \ them.  The X Window\n   System uses 64 ports, in the range 6000-6063.  If every\
    \ new protocol\n   were to get its own chunk of 64 ports, we would run out even\
    \ faster.\n   Any NBP replacement needs to provide, not just the network number,\n\
    \   subnet number, and host number within that subnet (i.e., the IP\n   address)\
    \ but also the port number within that host where the service\n   is located.\
    \  Furthermore, since many existing IP services such as lpr\n   *do* already use\
    \ additional application-layer demultiplexing\n   information such as a print\
    \ queue name, an NBP replacement needs to\n   support this too by including this\
    \ information as part of the\n   complete package of addressing information provided\
    \ to the client to\n   enable it to use the service.  The NBP replacement needs\
    \ to name\n   individual print queues as first-class entities in their own right.\n\
    \   It is not sufficient merely to name a print server, within which\n   separate\
    \ print queues can then be found by some other mechanism.\n   One possible answer\
    \ here is that an IP-based NBP replacement could\n   use a solution derived from\
    \ DNS SRV records instead of \"A\" records,\n   since SRV records *do* provide\
    \ a port number.  However, this alone is\n   not a complete solution, because\
    \ SRV records cannot tell you an lpr\n   print queue name.\n"
- title: 3.4.  Typed Name Space
  contents:
  - "3.4.  Typed Name Space\n   AppleTalk NBP names are structured names, generally\
    \ written as:\n      Name : Type @ Zone\n   Name: The Name is the user-visible\
    \ name of the service.\n   Type: The Type is an opaque identifier that identifies\
    \ the service\n   protocol and semantics.  The user may think of the Type as\n\
    \   identifying the end-user function that the device performs (e.g.,\n   \"printing\"\
    ), and for the typical end-user, this may be an adequate\n   mental model, but\
    \ strictly speaking, from a protocol-design\n   perspective, the Type identifies\
    \ the semantic application protocol\n   the service speaks: no more, no less.\
    \  For convenience, the opaque\n   Type identifier is generally constructed using\
    \ descriptive ASCII\n   text, but this text has no meaning to the protocol, and\
    \ care should\n   be taken in inferring too much meaning from it.  For example,\
    \ the NBP\n   Service Type \"LaserWriter\" means \"any service that speaks\n \
    \  PS/PAP/ATP/DDP (PostScript over AppleTalk Printer Access Protocol\n   over\
    \ AppleTalk Transaction Protocol over AppleTalk Datagram Delivery\n   Protocol)\"\
    .  It does not necessarily mean an Apple-branded\n   \"LaserWriter\" printer;\
    \ nor does the service even have to be a\n   printer.  A device that archives\
    \ documents to digital media could\n   advertise itself as a \"LaserWriter\",\
    \ meaning that it speaks\n   PostScript over PAP, not necessarily that it prints\
    \ that document on\n   paper when it gets it.  The end-user never directly sees\
    \ the Service\n   Type.  It is implicit in the user's action; for example, when\n\
    \   printing, the printing software knows what protocol(s) it speaks and\n   consequently\
    \ what Service Type(s) it should be looking for -- the\n   user doesn't have to\
    \ tell it.\n   Zone: The Zone is an organizational or geographical grouping of\
    \ named\n   services.  AppleTalk Zones were typically given names like\n   \"\
    Engineering\", \"Sales\", or \"Building 1, 3rd floor, North\".  The\n   equivalent\
    \ concept in DNS could be a subdomain such as\n   \"Engineering.example.com.\"\
    , \"Sales.example.com.\", or \"Building 1, 3rd\n   floor, North.example.com.\"\
    \n   Each {Type,Zone} pair defines a name space in which service names can\n \
    \  be registered.  It is not a name conflict to have a printer called\n   \"Sales\"\
    \ and a file server called \"Sales\", because one is\n   \"Sales:LaserWriter@Zone\"\
    \ and the other is \"Sales:AFPServer@Zone\".\n   Any NBP replacement needs to\
    \ provide a mechanism that allows names to\n   be grouped into organizational\
    \ or geographical \"zones\", and within\n   each \"zone\", to provide an independent\
    \ name space for each service\n   type.\n"
- title: 3.5.  User-Friendly Names
  contents:
  - "3.5.  User-Friendly Names\n   When repeatedly typing in names on command-line\
    \ systems, it is\n   helpful to have names that are short, all lowercase, without\
    \ spaces\n   or hard-to-type characters.\n   Since Service Names are intended\
    \ to be selected from a list, not\n   repeatedly typed in on a keyboard, there\
    \ is no reason for them to be\n   restricted so.  Users should be able to give\
    \ their printers names\n   like \"Sales\", \"Marketing\", and \"3rd Floor Copy\
    \ Room\", not just\n   \"printer1.example.com.\".  Of course, a user is free to\
    \ name a\n   particular service using only lowercase letters and no spaces if\
    \ they\n   wish, but they should not be forced to do that.\n   Any NBP replacement\
    \ needs to support a full range of rich text\n   characters, including uppercase,\
    \ lowercase, spaces, accented\n   characters, and so on.  The correct solution\
    \ is likely to be UTF-8\n   Unicode [RFC3629].\n   Note that this requirement\
    \ for user-friendly rich-text names applies\n   equally to the zones (domains)\
    \ in which services are registered and\n   discovered.\n   Note that although\
    \ the characters ':' and '@' are used when writing\n   AppleTalk NBP names, they\
    \ are simply a notational convenience in\n   written text.  In the on-the-wire\
    \ protocol and in the software data\n   structures, NBP Name, Type, and Zone strings\
    \ are all allowed to\n   contain almost any character, including ':' and '@'.\
    \  The naming\n   scheme provided by an NBP replacement must allow the use of\
    \ any\n   desired characters in service names, including dots ('.'), spaces,\n\
    \   percent signs, etc.\n"
- title: 3.6.  Zeroconf Operation
  contents:
  - "3.6.  Zeroconf Operation\n   AppleTalk NBP is self-configuring.  On a network\
    \ of just two hosts,\n   they communicate peer-to-peer using multicast.  On a\
    \ large managed\n   network, AppleTalk routers automatically perform an aggregation\n\
    \   function, allowing name lookups to be performed via unicast to a\n   service\
    \ running on the router, instead of by flooding the entire\n   network with multicast\
    \ packets to every host.\n   Any NBP replacement needs to be able to operate in\
    \ the absence of\n   external network infrastructure.  However, this should not\
    \ be the\n   only mode of operation.  In larger managed networks, it should also\n\
    \   be possible to take advantage of appropriate external network\n   infrastructure\
    \ when present, to perform queries via unicast instead\n   of multicast.\n"
- title: 3.7.  Name Space Management -- or -- Name Conflict Detection
  contents:
  - "3.7.  Name Space Management -- or -- Name Conflict Detection\n   Because an NBP\
    \ replacement needs to operate in a Zeroconf\n   environment, it cannot be assumed\
    \ that a central network\n   administrator is managing the network.  Unlike managed\
    \ networks where\n   normal administrative controls may apply, in the Zeroconf\
    \ case an NBP\n   replacement must make it easy for users to name their devices\
    \ as they\n   wish, without the inconvenience or expense of having to seek\n \
    \  permission or pay some organization like a domain name registry for\n   the\
    \ privilege.  However, this ease of naming, and freedom to choose\n   any desired\
    \ name, may lead to name conflicts.  Two users may\n   independently decide to\
    \ run a personal file server on their laptop\n   computers, and (unimaginatively)\
    \ name it \"My Computer\".  When these\n   two users later attend the next IETF\
    \ meeting and find themselves part\n   of the same wireless network, there may\
    \ be problems.\n   Similarly, every Brother network printer may ship from the\
    \ factory\n   with its Service Name set to \"Brother Printer\".  On a typical\
    \ small\n   home network where there is only one printer, this is not a problem;\n\
    \   however, it could become a problem if two or more such printers are\n   connected\
    \ to the same network.\n   Any NBP replacement needs to detect such conflicts,\
    \ and handle them\n   appropriately.  In the case of a laptop computer, which\
    \ has a\n   keyboard, screen, and a human user, the software should display a\n\
    \   message telling the user that they need to select a new name.\n   In the case\
    \ of printers, which typically have no keyboard or screen,\n   the software should\
    \ automatically select a new unique name, perhaps\n   by appending an integer\
    \ to the end of the existing name, e.g.,\n   \"Brother Printer 2\".  Note that,\
    \ although this programmatically\n   derived name should be recorded persistently\
    \ for use next time the\n   device is powered on, the user is not forced to use\
    \ that name as the\n   long-term name for the service/device.  In a network with\
    \ more than\n   one printer, the typical user will assign human-meaningful names\
    \ to\n   those printers, such as \"Upstairs Printer\" and \"Downstairs Printer\"\
    ,\n   but the ability to rename the printer using some configuration tool\n  \
    \ (e.g., a web browser) depends on the ability to find the printer and\n   connect\
    \ to it in the first place.  Hence, the programmatically\n   derived unique name\
    \ serves a vital bootstrapping role, even if its\n   use in that role is temporary.\n\
    \   Because of the potentially transient nature of connectivity on small\n   portable\
    \ devices that are becoming more and more common (especially\n   when used with\
    \ wireless networks), this name conflict detection needs\n   to be an ongoing\
    \ process.  It is not sufficient simply to verify\n   uniqueness of names for\
    \ a few seconds during the boot process and\n   then assume that the names will\
    \ remain unique indefinitely.\n   If the Zeroconf naming mechanism is integrated\
    \ with the existing\n   global DNS naming mechanism, then it would be beneficial\
    \ for a sub-\n   tree of that global namespace to be designated as having only\
    \ local\n   significance, for use without charge by cooperating peers, much as\n\
    \   portions of the IPv4 address space are already designated as local-\n   significance-only,\
    \ available for organizations to use locally without\n   charge as they wish [RFC1918].\n"
- title: 3.8.  Late Binding
  contents:
  - "3.8.  Late Binding\n   When the user selects their default printer, the software\
    \ should\n   store only the name, not the IP address and port number.  Then, every\n\
    \   time the user prints, the software should look up the name to find\n   the\
    \ current IP address and port number for that service.  This allows\n   a named\
    \ logical service to be moved from one piece of hardware to\n   another without\
    \ disrupting the user's ability to print to that named\n   print service.\n  \
    \ On a network using DHCP [RFC2131] or self-assigned link-local\n   addresses\
    \ [RFC3927] [RFC4862], a device's IP address may change from\n   day to day. \
    \ Deferring binding of name to address until actual use\n   allows the client\
    \ to get the correct IP address at the time the\n   service is used.\n   Similarly,\
    \ with a service using a dynamic port number instead of a\n   fixed well-known\
    \ port, the service may not get the same port number\n   every time it is started\
    \ or restarted.  By deferring binding of name\n   to port number until actual\
    \ use, the client gets the correct port\n   number at the time the service is\
    \ used.\n"
- title: 3.9.  Simplicity
  contents:
  - "3.9.  Simplicity\n   Any NBP replacement needs to be simple enough that vendors\
    \ of even a\n   low-cost network ink-jet printer can afford to implement it in\
    \ the\n   device's limited firmware.\n"
- title: 3.10.  Network Browsing
  contents:
  - "3.10.  Network Browsing\n   AppleTalk NBP offers certain limited wild-card functionality.\
    \  For\n   example, the service name \"=\" means \"any name\".  This allows a\
    \ client\n   to perform an NBP lookup such as \"=:LaserWriter@My Zone\" and receive\n\
    \   back in response a list of all the PS/PAP (AppleTalk Printer Access\n   Protocol)\
    \ printers in the Zone called \"My Zone\".\n   Any NBP replacement needs to allow\
    \ a piece of software, such as a\n   printing client or a file server client,\
    \ to enumerate all the named\n   instances of services in a specified zone (domain)\
    \ that speak its\n   protocol(s).\n"
- title: 3.11.  Browsing and Registration Guidance
  contents:
  - "3.11.  Browsing and Registration Guidance\n   AppleTalk NBP provides certain\
    \ meta-information to the client.\n   On a network with multiple AppleTalk Zones,\
    \ the AppleTalk network\n   infrastructure informs the client of the list of Zones\
    \ that are\n   available for browsing.  It also informs the client of the default\n\
    \   Zone, which defines the client's logical \"home\" location.  This is\n   the\
    \ Zone that is selected by default when the Macintosh Chooser is\n   opened, and\
    \ is usually the Zone where the user is most likely to find\n   services like\
    \ printers that are physically nearby, but the user is\n   still free to browse\
    \ any Zone in the offered list that they wish.\n   A Brother printer may be pre-configured\
    \ at the factory with the\n   Service Name \"Brother Printer\", but they do not\
    \ know on which network\n   the printer will eventually be installed, so the printer\
    \ will have to\n   learn this from the network on arrival.  On a network with\
    \ multiple\n   AppleTalk Zones, the AppleTalk network infrastructure informs the\n\
    \   client of a single default Zone within which it may register Service\n   Names.\
    \  In the case of a device with a human user, the AppleTalk\n   network infrastructure\
    \ may also inform the client of a list of Zones\n   within which the client may\
    \ register Service Names, and the user may\n   choose to register Service Names\
    \ in any one of those Zones instead of\n   in the suggested default Zone.\n  \
    \ Any NBP replacement needs to provide the following information to the\n   client:\n\
    \      * The suggested zone (domain) in which to register Service Names.\n   \
    \   * A list of recommended available zones (domains) in which Service\n     \
    \   Names may be optionally registered.\n      * The suggested default zone (domain)\
    \ for network browsing.\n      * A list of available zones (domains) that may\
    \ be browsed.\n   Note that, because the domains used in this context are intended\
    \ for\n   service browsing in a graphical user interface, they should be\n   permitted\
    \ to be full user-friendly rich text, just like the rest of a\n   service name.\n"
- title: 3.12.  Power Management Support
  contents:
  - "3.12.  Power Management Support\n   Many modern network devices have the ability\
    \ to go into a low-power\n   mode, where only a small part of the Ethernet hardware\
    \ remains\n   powered, and the device can be woken up by sending a specially\n\
    \   formatted Ethernet frame that the device's power-management hardware\n   recognizes.\
    \  A modern service discovery protocol should provide\n   facilities to enable\
    \ this low-power mode to be used effectively\n   without sacrificing network functionality,\
    \ such as the ability to\n   discover services on sleeping devices, and wake up\
    \ a sleeping device\n   when it is needed.\n"
- title: 3.13.  Protocol Agnostic
  contents:
  - "3.13.  Protocol Agnostic\n   Fashions come and go in the computer industry, but\
    \ a service\n   discovery protocol, being one of the foundation components on\
    \ which\n   everything else rests, has to be able to outlive these swings of\n\
    \   fashion.  A useful service discovery protocol should be agnostic to\n   the\
    \ protocols being used by the higher-layer software it serves.  If\n   a service\
    \ discovery protocol requires all the higher-layer software\n   to be written\
    \ in a new computer language, or requires all the higher-\n   layer protocols\
    \ to embrace some trendy new data representation format\n   that is currently\
    \ in vogue, then that service discovery protocol is\n   likely to have limited\
    \ utility after the fashion changes and computer\n   industry moves on to its\
    \ next infatuation.\n"
- title: 3.14.  Distributed Cache Coherency Protocol
  contents:
  - "3.14.  Distributed Cache Coherency Protocol\n   Any modern service discovery\
    \ protocol must use some kind of caching\n   for efficiency.  Any time a distributed\
    \ cache is maintained, a cache\n   coherency protocol is required to control the\
    \ effects of stale data.\n   Thus, a useful service discovery protocol needs to\
    \ include cache\n   coherency mechanisms.\n"
- title: 3.15.  Immediate and Ongoing Information Presentation
  contents:
  - "3.15.  Immediate and Ongoing Information Presentation\n   Many current discovery\
    \ mechanisms display an hourglass or a \"Please\n   Wait\" message for five or\
    \ ten seconds, and then present a list of\n   results to the user.  At this point,\
    \ the list of results is static,\n   and does not update in response to changes\
    \ in the environment.  To\n   see current information, the user is forced to click\
    \ a \"Refresh\"\n   button repeatedly, waiting another five to ten seconds each\
    \ time.\n   Neither limitation is acceptable in a protocol that is to replace\n\
    \   NBP.  When a user initiates a browsing operation, the user interface\n   should\
    \ take at most one second to present the list of results.  In\n   addition, the\
    \ list should update in response to changes in the\n   environment as they happen.\
    \  If the user is waiting for a particular\n   service to become available, they\
    \ should be able simply to watch\n   until it appears, with no \"Refresh\" button\
    \ that they need to keep\n   clicking.  A protocol to replace AppleTalk NBP must\
    \ be able to meet\n   these requirement for timeliness of information discovery,\
    \ and\n   liveness of information updating, without placing undue burden on the\n\
    \   network.\n"
- title: 4.  Existing Protocols
  contents:
  - "4.  Existing Protocols\n   Ever since this work began with Stuart Cheshire's\
    \ email to the net-\n   thinkers@thumper.vmeng.com mailing list in July 1997,\
    \ the question\n   has been asked, \"Isn't SLP the IETF replacement for AppleTalk\
    \ NBP?\"\n   The Service Location Protocol (SLP) [RFC2608] provides extremely\
    \ rich\n   and flexible facilities in the area of Requirement 10, \"Network\n\
    \   Browsing\".  However, SLP provides none of the service naming,\n   automatic\
    \ name conflict detection, or efficient name-to-address\n   lookup that form the\
    \ majority of what AppleTalk NBP does.\n   SLP returns results in the form of\
    \ URLs.  In the absence of DNS, URLs\n   cannot usefully contain DNS names.  Discovering\
    \ a list of service\n   URLs of the form \"ipp://169.254.17.202/\" is not particularly\n\
    \   informative to the user.  Discovering a list of service URLs of the\n   form\
    \ \"ipp://epson-stylus-900n.local./\" is slightly less opaque\n   (though still\
    \ not very user-friendly), but to do even this, SLP would\n   have to depend on\
    \ Multicast DNS or something similar to resolve names\n   to addresses in the\
    \ absence of a conventional DNS server.\n   SLP provides fine-grained query capabilities,\
    \ such as the ability to\n   prune a long list of printers to show only those\
    \ that have blue paper\n   in the top tray, which could be useful on extremely\
    \ large networks\n   with very many printers, but are certainly unnecessary for\
    \ a typical\n   home or small office with only one or two printers.\n   In summary,\
    \ SLP alone fails to meet most of the requirements, and\n   provides vastly more\
    \ mechanism than necessary in the area of\n   Requirement 10.\n"
- title: 5.  IPv6 Considerations
  contents:
  - "5.  IPv6 Considerations\n   An IP replacement for the AppleTalk Name Binding\
    \ Protocol needs to\n   support IPv6 as well as IPv4.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The AppleTalk Name Binding Protocol was developed\
    \ in an era when\n   little consideration was given to security issues.  In today's\
    \ world,\n   this would no longer be appropriate.  Any modern replacement for\n\
    \   AppleTalk NBP should have security measures appropriate to the\n   environment\
    \ in which it will be used.  Given that this document is a\n   broad historical\
    \ overview of how AppleTalk NBP worked, and does not\n   specify any new protocol(s),\
    \ it is beyond the scope of this document\n   to provide detailed discussion of\
    \ possible network environments, what\n   protocols would be appropriate in each,\
    \ and what security measures\n   would be expected of each such protocol.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [RFC792]   Postel, J., \"Internet Control Message\
    \ Protocol\", STD 5,\n              RFC 792, September 1981.\n   [RFC1122]  Braden,\
    \ R., Ed., \"Requirements for Internet Hosts -\n              Communication Layers\"\
    , STD 3, RFC 1122, October 1989.\n   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg,\
    \ D., de Groot, G.,\n              and E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC2131]  Droms,\
    \ R., \"Dynamic Host Configuration Protocol\", RFC\n              2131, March\
    \ 1997.\n   [RFC2608]  Guttman, E., Perkins, C., Veizades, J., and M. Day,\n \
    \             \"Service Location Protocol, Version 2\", RFC 2608, June\n     \
    \         1999.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of\
    \ ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3927] \
    \ Cheshire, S., Aboba, B., and E. Guttman, \"Dynamic\n              Configuration\
    \ of IPv4 Link-Local Addresses\", RFC 3927, May\n              2005.\n   [RFC4862]\
    \  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address\
    \ Autoconfiguration\", RFC 4862, September 2007.\n   [RFC6762]  Cheshire, S. and\
    \ M. Krochmal, \"Multicast DNS\", RFC 6762,\n              February 2013.\n  \
    \ [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n             \
    \ Discovery\", RFC 6763, February 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stuart Cheshire\n   Apple Inc.\n   1 Infinite Loop\n \
    \  Cupertino, CA  95014\n   USA\n   Phone: +1 408 974 3207\n   EMail: cheshire@apple.com\n\
    \   Marc Krochmal\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino, CA  95014\n\
    \   USA\n   Phone: +1 408 974 4368\n   EMail: marc@apple.com\n"
