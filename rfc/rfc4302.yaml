- title: __initial_text__
  contents:
  - '                        IP Authentication Header

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an updated version of the IP Authentication\n\
    \   Header (AH), which is designed to provide authentication services in\n   IPv4\
    \ and IPv6.  This document obsoletes RFC 2402 (November 1998).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Authentication Header Format ....................................4\n  \
    \    2.1. Next Header ................................................5\n    \
    \  2.2. Payload Length .............................................5\n      2.3.\
    \ Reserved ...................................................6\n      2.4. Security\
    \ Parameters Index (SPI) ............................6\n      2.5. Sequence Number\
    \ ............................................8\n           2.5.1. Extended (64-bit)\
    \ Sequence Number ...................8\n      2.6. Integrity Check Value (ICV)\
    \ ................................9\n   3. Authentication Header Processing ................................9\n\
    \      3.1. Authentication Header Location .............................9\n  \
    \         3.1.1. Transport Mode ......................................9\n    \
    \       3.1.2. Tunnel Mode ........................................11\n      3.2.\
    \ Integrity Algorithms ......................................11\n      3.3. Outbound\
    \ Packet Processing ................................11\n           3.3.1. Security\
    \ Association Lookup ........................12\n           3.3.2. Sequence Number\
    \ Generation .........................12\n           3.3.3. Integrity Check Value\
    \ Calculation ..................13\n                  3.3.3.1. Handling Mutable\
    \ Fields ...................13\n                  3.3.3.2. Padding and Extended\
    \ Sequence Numbers .....16\n           3.3.4. Fragmentation ......................................17\n\
    \      3.4. Inbound Packet Processing .................................18\n  \
    \         3.4.1. Reassembly .........................................18\n    \
    \       3.4.2. Security Association Lookup ........................18\n      \
    \     3.4.3. Sequence Number Verification .......................19\n        \
    \   3.4.4. Integrity Check Value Verification .................20\n   4. Auditing\
    \ .......................................................21\n   5. Conformance\
    \ Requirements .......................................21\n   6. Security Considerations\
    \ ........................................22\n   7. Differences from RFC 2402\
    \ ......................................22\n   8. Acknowledgements ...............................................22\n\
    \   9. References .....................................................22\n  \
    \    9.1. Normative References ......................................22\n    \
    \  9.2. Informative References ....................................23\n   Appendix\
    \ A: Mutability of IP Options/Extension Headers ............25\n      A1. IPv4\
    \ Options ...............................................25\n      A2. IPv6 Extension\
    \ Headers .....................................26\n   Appendix B: Extended (64-bit)\
    \ Sequence Numbers ....................28\n      B1. Overview ...................................................28\n\
    \      B2. Anti-Replay Window .........................................28\n  \
    \        B2.1. Managing and Using the Anti-Replay Window ............29\n    \
    \      B2.2. Determining the Higher-Order Bits (Seqh) of the\n               \
    \ Sequence Number ......................................30\n          B2.3. Pseudo-Code\
    \ Example ..................................31\n      B3. Handling Loss of Synchronization\
    \ due to Significant\n          Packet Loss ................................................32\n\
    \          B3.1. Triggering Re-synchronization ........................33\n  \
    \        B3.2. Re-synchronization Process ...........................33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document assumes that the reader is familiar with the\
    \ terms and\n   concepts described in the \"Security Architecture for the Internet\n\
    \   Protocol\" [Ken-Arch], hereafter referred to as the Security\n   Architecture\
    \ document.  In particular, the reader should be familiar\n   with the definitions\
    \ of security services offered by the\n   Encapsulating Security Payload (ESP)\
    \ [Ken-ESP] and the IP\n   Authentication Header (AH), the concept of Security\
    \ Associations, the\n   ways in which ESP can be used in conjunction with the\
    \ Authentication\n   Header (AH), and the different key management options available\
    \ for\n   ESP and AH.\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL\
    \ NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear\
    \ in this\n   document, are to be interpreted as described in RFC 2119 [Bra97].\n\
    \   The IP Authentication Header (AH) is used to provide connectionless\n   integrity\
    \ and data origin authentication for IP datagrams (hereafter\n   referred to as\
    \ just \"integrity\") and to provide protection against\n   replays.  This latter,\
    \ optional service may be selected, by the\n   receiver, when a Security Association\
    \ (SA) is established.  (The\n   protocol default requires the sender to increment\
    \ the sequence number\n   used for anti-replay, but the service is effective only\
    \ if the\n   receiver checks the sequence number.)  However, to make use of the\n\
    \   Extended Sequence Number feature in an interoperable fashion, AH does\n  \
    \ impose a requirement on SA management protocols to be able to\n   negotiate\
    \ this new feature (see Section 2.5.1 below).\n   AH provides authentication for\
    \ as much of the IP header as possible,\n   as well as for next level protocol\
    \ data.  However, some IP header\n   fields may change in transit and the value\
    \ of these fields, when the\n   packet arrives at the receiver, may not be predictable\
    \ by the sender.\n   The values of such fields cannot be protected by AH.  Thus,\
    \ the\n   protection provided to the IP header by AH is piecemeal.  (See\n   Appendix\
    \ A.)\n   AH may be applied alone, in combination with the IP Encapsulating\n\
    \   Security Payload (ESP) [Ken-ESP], or in a nested fashion (see\n   Security\
    \ Architecture document [Ken-Arch]).  Security services can be\n   provided between\
    \ a pair of communicating hosts, between a pair of\n   communicating security\
    \ gateways, or between a security gateway and a\n   host.  ESP may be used to\
    \ provide the same anti-replay and similar\n   integrity services, and it also\
    \ provides a confidentiality\n   (encryption) service.  The primary difference\
    \ between the integrity\n   provided by ESP and AH is the extent of the coverage.\
    \  Specifically,\n   ESP does not protect any IP header fields unless those fields\
    \ are\n   encapsulated by ESP (e.g., via use of tunnel mode).  For more details\n\
    \   on how to use AH and ESP in various network environments, see the\n   Security\
    \ Architecture document [Ken-Arch].\n   Section 7 provides a brief review of the\
    \ differences between this\n   document and RFC 2402 [RFC2402].\n"
- title: 2.  Authentication Header Format
  contents:
  - "2.  Authentication Header Format\n   The protocol header (IPv4, IPv6, or IPv6\
    \ Extension) immediately\n   preceding the AH header SHALL contain the value 51\
    \ in its Protocol\n   (IPv4) or Next Header (IPv6, Extension) fields [DH98]. \
    \ Figure 1\n   illustrates the format for AH.\n     0                   1    \
    \               2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Next Header   |  Payload Len  |          RESERVED             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Security Parameters Index (SPI)               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Sequence Number Field                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \              Integrity Check Value-ICV (variable)           |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                          Figure 1.  AH Format\n   The following table refers\
    \ to the fields that comprise AH,\n   (illustrated in Figure 1), plus other fields\
    \ included in the\n   integrity computation, and illustrates which fields are\
    \ covered by\n   the ICV and what is transmitted.\n                          \
    \                            What    What\n                                  \
    \   # of     Requ'd  Integ    is\n                                     bytes \
    \    [1]    Covers  Xmtd\n                                     ------   ------\
    \  ------  ------\n          IP Header                  variable    M     [2]\
    \    plain\n          Next Header                   1        M      Y     plain\n\
    \          Payload Len                   1        M      Y     plain\n       \
    \   RESERVED                      2        M      Y     plain\n          SPI \
    \                          4        M      Y     plain\n          Seq# (low-order\
    \ 32 bits)      4        M      Y     plain\n          ICV                   \
    \     variable    M      Y[3]  plain\n          IP datagram [4]            variable\
    \    M      Y     plain\n          Seq# (high-order 32 bits)     4      if ESN\
    \   Y     not xmtd\n          ICV Padding                variable  if need  Y\
    \     not xmtd\n       [1] - M = mandatory\n       [2] - See Section 3.3.3, \"\
    Integrity Check Value Calculation\", for\n             details of which IP header\
    \ fields are covered.\n       [3] - Zeroed before ICV calculation (resulting ICV\
    \ placed here\n             after calculation)\n       [4] - If tunnel mode ->\
    \ IP datagram\n             If transport mode -> next header and data\n   The\
    \ following subsections define the fields that comprise the AH\n   format.  All\
    \ the fields described here are mandatory; i.e., they are\n   always present in\
    \ the AH format and are included in the Integrity\n   Check Value (ICV) computation\
    \ (see Sections 2.6 and 3.3.3).\n   Note: All of the cryptographic algorithms\
    \ used in IPsec expect their\n   input in canonical network byte order (see Appendix\
    \ of RFC 791\n   [RFC791]) and generate their output in canonical network byte\
    \ order.\n   IP packets are also transmitted in network byte order.\n   AH does\
    \ not contain a version number, therefore if there are concerns\n   about backward\
    \ compatibility, they MUST be addressed by using a\n   signaling mechanism between\
    \ the two IPsec peers to ensure compatible\n   versions of AH, e.g., IKE [IKEv2]\
    \ or an out-of-band configuration\n   mechanism.\n"
- title: 2.1.  Next Header
  contents:
  - "2.1.  Next Header\n   The Next Header is an 8-bit field that identifies the type\
    \ of the\n   next payload after the Authentication Header.  The value of this\n\
    \   field is chosen from the set of IP Protocol Numbers defined on the\n   web\
    \ page of Internet Assigned Numbers Authority (IANA).  For example,\n   a value\
    \ of 4 indicates IPv4, a value of 41 indicates IPv6, and a\n   value of 6 indicates\
    \ TCP.\n"
- title: 2.2.  Payload Length
  contents:
  - "2.2.  Payload Length\n   This 8-bit field specifies the length of AH in 32-bit\
    \ words (4-byte\n   units), minus \"2\".  Thus, for example, if an integrity algorithm\n\
    \   yields a 96-bit authentication value, this length field will be \"4\"\n  \
    \ (3 32-bit word fixed fields plus 3 32-bit words for the ICV, minus\n   2). \
    \ For IPv6, the total length of the header must be a multiple of\n   8-octet units.\
    \  (Note that although IPv6 [DH98] characterizes AH as\n   an extension header,\
    \ its length is measured in 32-bit words, not the\n   64-bit words used by other\
    \ IPv6 extension headers.)  See Section 2.6,\n   \"Integrity Check Value (ICV)\"\
    , for comments on padding of this field,\n   and Section 3.3.3.2.1, \"ICV Padding\"\
    .\n"
- title: 2.3.  Reserved
  contents:
  - "2.3.  Reserved\n   This 16-bit field is reserved for future use.  It MUST be\
    \ set to\n   \"zero\" by the sender, and it SHOULD be ignored by the recipient.\n\
    \   (Note that the value is included in the ICV calculation, but is\n   otherwise\
    \ ignored by the recipient.)\n"
- title: 2.4.  Security Parameters Index (SPI)
  contents:
  - "2.4.  Security Parameters Index (SPI)\n   The SPI is an arbitrary 32-bit value\
    \ that is used by a receiver to\n   identify the SA to which an incoming packet\
    \ is bound.  For a unicast\n   SA, the SPI can be used by itself to specify an\
    \ SA, or it may be used\n   in conjunction with the IPsec protocol type (in this\
    \ case AH).\n   Because for unicast SAs the SPI value is generated by the receiver,\n\
    \   whether the value is sufficient to identify an SA by itself or\n   whether\
    \ it must be used in conjunction with the IPsec protocol value\n   is a local\
    \ matter.  The SPI field is mandatory, and this mechanism\n   for mapping inbound\
    \ traffic to unicast SAs described above MUST be\n   supported by all AH implementations.\n\
    \   If an IPsec implementation supports multicast, then it MUST support\n   multicast\
    \ SAs using the algorithm below for mapping inbound IPsec\n   datagrams to SAs.\
    \  Implementations that support only unicast traffic\n   need not implement this\
    \ de-multiplexing algorithm.\n   In many secure multicast architectures, e.g.,\
    \ [RFC3740], a central\n   Group Controller/Key Server unilaterally assigns the\
    \ group security\n   association's SPI.  This SPI assignment is not negotiated\
    \ or\n   coordinated with the key management (e.g., IKE) subsystems that\n   reside\
    \ in the individual end systems that comprise the group.\n   Consequently, it\
    \ is possible that a group security association and a\n   unicast security association\
    \ can simultaneously use the same SPI.  A\n   multicast-capable IPsec implementation\
    \ MUST correctly de-multiplex\n   inbound traffic even in the context of SPI collisions.\n\
    \   Each entry in the Security Association Database (SAD) [Ken-Arch] must\n  \
    \ indicate whether the SA lookup makes use of the destination, or\n   destination\
    \ and source, IP addresses, in addition to the SPI.  For\n   multicast SAs, the\
    \ protocol field is not employed for SA lookups.\n   For each inbound, IPsec-protected\
    \ packet, an implementation must\n   conduct its search of the SAD such that it\
    \ finds the entry that\n   matches the \"longest\" SA identifier.  In this context,\
    \ if two or more\n   SAD entries match based on the SPI value, then the entry\
    \ that also\n   matches based on destination, or destination and source, address\n\
    \   comparison (as indicated in the SAD entry) is the \"longest\" match.\n   This\
    \ implies a logical ordering of the SAD search as follows:\n           1. Search\
    \ the SAD for a match on {SPI, destination\n              address, source address}.\
    \  If an SAD entry\n              matches, then process the inbound AH packet\
    \ with that\n              matching SAD entry.  Otherwise, proceed to step 2.\n\
    \           2. Search the SAD for a match on {SPI, destination\n             \
    \ address}.  If an SAD entry matches, then process\n              the inbound\
    \ AH packet with that matching SAD\n              entry.  Otherwise, proceed to\
    \ step 3.\n           3. Search the SAD for a match on only {SPI} if the receiver\n\
    \              has chosen to maintain a single SPI space for AH and ESP,\n   \
    \           or on {SPI, protocol} otherwise.  If an SAD\n              entry matches,\
    \ then process the inbound AH packet with\n              that matching SAD entry.\
    \  Otherwise, discard the packet\n              and log an auditable event.\n\
    \   In practice, an implementation MAY choose any method to accelerate\n   this\
    \ search, although its externally visible behavior MUST be\n   functionally equivalent\
    \ to having searched the SAD in the above\n   order.  For example, a software-based\
    \ implementation could index into\n   a hash table by the SPI.  The SAD entries\
    \ in each hash table bucket's\n   linked list are kept sorted to have those SAD\
    \ entries with the\n   longest SA identifiers first in that linked list.  Those\
    \ SAD entries\n   having the shortest SA identifiers are sorted so that they are\
    \ the\n   last entries in the linked list.  A hardware-based implementation may\n\
    \   be able to effect the longest match search intrinsically, using\n   commonly\
    \ available Ternary Content-Addressable Memory (TCAM)\n   features.\n   The indication\
    \ of whether source and destination address matching is\n   required to map inbound\
    \ IPsec traffic to SAs MUST be set either as a\n   side effect of manual SA configuration\
    \ or via negotiation using an SA\n   management protocol, e.g., IKE or Group Domain\
    \ of Interpretation\n   (GDOI) [RFC3547].  Typically, Source-Specific Multicast\
    \ (SSM) [HC03]\n   groups use a 3-tuple SA identifier composed of an SPI, a destination\n\
    \   multicast address, and source address.  An Any-Source Multicast group\n  \
    \ SA requires only an SPI and a destination multicast address as an\n   identifier.\n\
    \   The set of SPI values in the range 1 through 255 is reserved by the\n   Internet\
    \ Assigned Numbers Authority (IANA) for future use; a reserved\n   SPI value will\
    \ not normally be assigned by IANA unless the use of the\n   assigned SPI value\
    \ is specified in an RFC.  The SPI value of zero (0)\n   is reserved for local,\
    \ implementation-specific use and MUST NOT be\n   sent on the wire.  (For example,\
    \ a key management implementation\n   might use the zero SPI value to mean \"\
    No Security Association Exists\"\n   during the period when the IPsec implementation\
    \ has requested that\n   its key management entity establish a new SA, but the\
    \ SA has not yet\n   been established.)\n"
- title: 2.5.  Sequence Number
  contents:
  - "2.5.  Sequence Number\n   This unsigned 32-bit field contains a counter value\
    \ that increases by\n   one for each packet sent, i.e., a per-SA packet sequence\
    \ number.  For\n   a unicast SA or a single-sender multicast SA, the sender MUST\n\
    \   increment this field for every transmitted packet.  Sharing an SA\n   among\
    \ multiple senders is permitted, though generally not\n   recommended.  AH provides\
    \ no means of synchronizing packet counters\n   among multiple senders or meaningfully\
    \ managing a receiver packet\n   counter and window in the context of multiple\
    \ senders.  Thus, for a\n   multi-sender SA, the anti-reply features of AH are\
    \ not available (see\n   Sections 3.3.2 and 3.4.3).\n   The field is mandatory\
    \ and MUST always be present even if the\n   receiver does not elect to enable\
    \ the anti-replay service for a\n   specific SA.  Processing of the Sequence Number\
    \ field is at the\n   discretion of the receiver, but all AH implementations MUST\
    \ be\n   capable of performing the processing described in Section 3.3.2,\n  \
    \ \"Sequence Number Generation\", and Section 3.4.3, \"Sequence Number\n   Verification\"\
    .  Thus, the sender MUST always transmit this field, but\n   the receiver need\
    \ not act upon it.\n   The sender's counter and the receiver's counter are initialized\
    \ to 0\n   when an SA is established.  (The first packet sent using a given SA\n\
    \   will have a sequence number of 1; see Section 3.3.2 for more details\n   on\
    \ how the sequence number is generated.)  If anti-replay is enabled\n   (the default),\
    \ the transmitted sequence number must never be allowed\n   to cycle.  Thus, the\
    \ sender's counter and the receiver's counter MUST\n   be reset (by establishing\
    \ a new SA and thus a new key) prior to the\n   transmission of the 2^32nd packet\
    \ on an SA.\n"
- title: 2.5.1.  Extended (64-bit) Sequence Number
  contents:
  - "2.5.1.  Extended (64-bit) Sequence Number\n   To support high-speed IPsec implementations,\
    \ a new option for\n   sequence numbers SHOULD be offered, as an extension to\
    \ the current,\n   32-bit sequence number field.  Use of an Extended Sequence\
    \ Number\n   (ESN) MUST be negotiated by an SA management protocol.  Note that\
    \ in\n   IKEv2, this negotiation is implicit; the default is ESN unless 32-bit\n\
    \   sequence numbers are explicitly negotiated.  (The ESN feature is\n   applicable\
    \ to multicast as well as unicast SAs.)\n   The ESN facility allows use of a 64-bit\
    \ sequence number for an SA.\n   (See Appendix B, \"Extended (64-bit) Sequence\
    \ Numbers\", for details.)\n   Only the low-order 32 bits of the sequence number\
    \ are transmitted in\n   the AH header of each packet, thus minimizing packet\
    \ overhead.  The\n   high-order 32 bits are maintained as part of the sequence\
    \ number\n   counter by both transmitter and receiver and are included in the\n\
    \   computation of the ICV, but are not transmitted.\n"
- title: 2.6.  Integrity Check Value (ICV)
  contents:
  - "2.6.  Integrity Check Value (ICV)\n   This is a variable-length field that contains\
    \ the Integrity Check\n   Value (ICV) for this packet.  The field must be an integral\
    \ multiple\n   of 32 bits (IPv4 or IPv6) in length.  The details of ICV processing\n\
    \   are described in Section 3.3.3, \"Integrity Check Value Calculation\",\n \
    \  and Section 3.4.4, \"Integrity Check Value Verification\".  This field\n  \
    \ may include explicit padding, if required to ensure that the length\n   of the\
    \ AH header is an integral multiple of 32 bits (IPv4) or 64 bits\n   (IPv6). \
    \ All implementations MUST support such padding and MUST\n   insert only enough\
    \ padding to satisfy the IPv4/IPv6 alignment\n   requirements.  Details of how\
    \ to compute the required padding length\n   are provided below in Section 3.3.3.2,\
    \ \"Padding\".  The integrity\n   algorithm specification MUST specify the length\
    \ of the ICV and the\n   comparison rules and processing steps for validation.\n"
- title: 3.  Authentication Header Processing
  contents:
  - '3.  Authentication Header Processing

    '
- title: 3.1.  Authentication Header Location
  contents:
  - "3.1.  Authentication Header Location\n   AH may be employed in two ways: transport\
    \ mode or tunnel mode.  (See\n   the Security Architecture document for a description\
    \ of when each\n   should be used.)\n"
- title: 3.1.1.  Transport Mode
  contents:
  - "3.1.1.  Transport Mode\n   In transport mode, AH is inserted after the IP header\
    \ and before a\n   next layer protocol (e.g., TCP, UDP, ICMP, etc.) or before\
    \ any other\n   IPsec headers that have already been inserted.  In the context\
    \ of\n   IPv4, this calls for placing AH after the IP header (and any options\n\
    \   that it contains), but before the next layer protocol.  (Note that\n   the\
    \ term \"transport\" mode should not be misconstrued as restricting\n   its use\
    \ to TCP and UDP.)  The following diagram illustrates AH\n   transport mode positioning\
    \ for a typical IPv4 packet, on a \"before\n   and after\" basis.\n          \
    \         BEFORE APPLYING AH\n             ----------------------------\n    \
    \   IPv4  |orig IP hdr  |     |      |\n             |(any options)| TCP | Data\
    \ |\n             ----------------------------\n                   AFTER APPLYING\
    \ AH\n             -------------------------------------------------------\n \
    \      IPv4  |original IP hdr (any options) | AH | TCP |    Data   |\n       \
    \      -------------------------------------------------------\n             |<-\
    \ mutable field processing ->|<- immutable fields ->|\n             |<----- authenticated\
    \ except for mutable fields ----->|\n   In the IPv6 context, AH is viewed as an\
    \ end-to-end payload, and thus\n   should appear after hop-by-hop, routing, and\
    \ fragmentation extension\n   headers.  The destination options extension header(s)\
    \ could appear\n   before or after or both before and after the AH header depending\
    \ on\n   the semantics desired.  The following diagram illustrates AH\n   transport\
    \ mode positioning for a typical IPv6 packet.\n                        BEFORE\
    \ APPLYING AH\n             ---------------------------------------\n       IPv6\
    \  |             | ext hdrs |     |      |\n             | orig IP hdr |if present|\
    \ TCP | Data |\n             ---------------------------------------\n       \
    \                AFTER APPLYING AH\n            ------------------------------------------------------------\n\
    \      IPv6  |             |hop-by-hop, dest*, |    | dest |     |      |\n  \
    \          |orig IP hdr  |routing, fragment. | AH | opt* | TCP | Data |\n    \
    \        ------------------------------------------------------------\n      \
    \      |<--- mutable field processing -->|<-- immutable fields -->|\n        \
    \    |<---- authenticated except for mutable fields ----------->|\n          \
    \        * = if present, could be before AH, after AH, or both\n   ESP and AH\
    \ headers can be combined in a variety of modes.  The IPsec\n   Architecture document\
    \ describes the combinations of security\n   associations that must be supported.\n\
    \   Note that in transport mode, for \"bump-in-the-stack\" or \"bump-in-\n   the-wire\"\
    \ implementations, as defined in the Security Architecture\n   document, inbound\
    \ and outbound IP fragments may require an IPsec\n   implementation to perform\
    \ extra IP reassembly/fragmentation in order\n   to both conform to this specification\
    \ and provide transparent IPsec\n   support.  Special care is required to perform\
    \ such operations within\n   these implementations when multiple interfaces are\
    \ in use.\n"
- title: 3.1.2.  Tunnel Mode
  contents:
  - "3.1.2.  Tunnel Mode\n   In tunnel mode, the \"inner\" IP header carries the ultimate\
    \ (IP)\n   source and destination addresses, while an \"outer\" IP header contains\n\
    \   the addresses of the IPsec \"peers,\" e.g., addresses of security\n   gateways.\
    \  Mixed inner and outer IP versions are allowed, i.e., IPv6\n   over IPv4 and\
    \ IPv4 over IPv6.  In tunnel mode, AH protects the entire\n   inner IP packet,\
    \ including the entire inner IP header.  The position\n   of AH in tunnel mode,\
    \ relative to the outer IP header, is the same as\n   for AH in transport mode.\
    \  The following diagram illustrates AH\n   tunnel mode positioning for typical\
    \ IPv4 and IPv6 packets.\n        ----------------------------------------------------------------\n\
    \   IPv4 |                              |    | orig IP hdr*  |   |      |\n  \
    \      |new IP header * (any options) | AH | (any options) |TCP| Data |\n    \
    \    ----------------------------------------------------------------\n      \
    \  |<- mutable field processing ->|<------ immutable fields ----->|\n        |<-\
    \ authenticated except for mutable fields in the new IP hdr->|\n        --------------------------------------------------------------\n\
    \   IPv6 |           | ext hdrs*|    |            | ext hdrs*|   |    |\n    \
    \    |new IP hdr*|if present| AH |orig IP hdr*|if present|TCP|Data|\n        --------------------------------------------------------------\n\
    \        |<--- mutable field -->|<--------- immutable fields -------->|\n    \
    \    |       processing     |\n        |<-- authenticated except for mutable fields\
    \ in new IP hdr ->|\n          * = if present, construction of outer IP hdr/extensions\
    \ and\n              modification of inner IP hdr/extensions is discussed in\n\
    \              the Security Architecture document.\n"
- title: 3.2.  Integrity Algorithms
  contents:
  - "3.2.  Integrity Algorithms\n   The integrity algorithm employed for the ICV computation\
    \ is specified\n   by the SA.  For point-to-point communication, suitable integrity\n\
    \   algorithms include keyed Message Authentication Codes (MACs) based on\n  \
    \ symmetric encryption algorithms (e.g., AES [AES]) or on one-way hash\n   functions\
    \ (e.g., MD5, SHA-1, SHA-256, etc.).  For multicast\n   communication, a variety\
    \ of cryptographic strategies for providing\n   integrity have been developed\
    \ and research continues in this area.\n"
- title: 3.3.  Outbound Packet Processing
  contents:
  - "3.3.  Outbound Packet Processing\n   In transport mode, the sender inserts the\
    \ AH header after the IP\n   header and before a next layer protocol header, as\
    \ described above.\n   In tunnel mode, the outer and inner IP header/extensions\
    \ can be\n   interrelated in a variety of ways.  The construction of the outer\
    \ IP\n   header/extensions during the encapsulation process is described in\n\
    \   the Security Architecture document.\n"
- title: 3.3.1.  Security Association Lookup
  contents:
  - "3.3.1.  Security Association Lookup\n   AH is applied to an outbound packet only\
    \ after an IPsec\n   implementation determines that the packet is associated with\
    \ an SA\n   that calls for AH processing.  The process of determining what, if\n\
    \   any, IPsec processing is applied to outbound traffic is described in\n   the\
    \ Security Architecture document.\n"
- title: 3.3.2.  Sequence Number Generation
  contents:
  - "3.3.2.  Sequence Number Generation\n   The sender's counter is initialized to\
    \ 0 when an SA is established.\n   The sender increments the sequence number (or\
    \ ESN) counter for this\n   SA and inserts the low-order 32 bits of the value\
    \ into the Sequence\n   Number field.  Thus, the first packet sent using a given\
    \ SA will\n   contain a sequence number of 1.\n   If anti-replay is enabled (the\
    \ default), the sender checks to ensure\n   that the counter has not cycled before\
    \ inserting the new value in the\n   Sequence Number field.  In other words, the\
    \ sender MUST NOT send a\n   packet on an SA if doing so would cause the sequence\
    \ number to cycle.\n   An attempt to transmit a packet that would result in sequence\
    \ number\n   overflow is an auditable event.  The audit log entry for this event\n\
    \   SHOULD include the SPI value, current date/time, Source Address,\n   Destination\
    \ Address, and (in IPv6) the cleartext Flow ID.\n   The sender assumes anti-replay\
    \ is enabled as a default, unless\n   otherwise notified by the receiver (see\
    \ Section 3.4.3) or if the SA\n   was configured using manual key management.\
    \  Thus, typical behavior\n   of an AH implementation calls for the sender to\
    \ establish a new SA\n   when the Sequence Number (or ESN) cycles, or in anticipation\
    \ of this\n   value cycling.\n   If anti-replay is disabled (as noted above),\
    \ the sender does not need\n   to monitor or reset the counter, e.g., in the case\
    \ of manual key\n   management (see Section 5).  However, the sender still increments\
    \ the\n   counter and when it reaches the maximum value, the counter rolls over\n\
    \   back to zero.  (This behavior is recommended for multi-sender,\n   multicast\
    \ SAs, unless anti-replay mechanisms outside the scope of\n   this standard are\
    \ negotiated between the sender and receiver.)\n   If ESN (see Appendix B) is\
    \ selected, only the low-order 32 bits of\n   the sequence number are transmitted\
    \ in the Sequence Number field,\n   although both sender and receiver maintain\
    \ full 64-bit ESN counters.\n   However, the high-order 32 bits are included in\
    \ the ICV calculation.\n   Note: If a receiver chooses not to enable anti-replay\
    \ for an SA, then\n   the receiver SHOULD NOT negotiate ESN in an SA management\
    \ protocol.\n   Use of ESN creates a need for the receiver to manage the anti-replay\n\
    \   window (in order to determine the correct value for the high-order\n   bits\
    \ of the ESN, which are employed in the ICV computation), which is\n   generally\
    \ contrary to the notion of disabling anti-replay for an SA.\n"
- title: 3.3.3.  Integrity Check Value Calculation
  contents:
  - "3.3.3.  Integrity Check Value Calculation\n   The AH ICV is computed over:\n\
    \        o IP or extension header fields before the AH header that are\n     \
    \     either immutable in transit or that are predictable in value\n         \
    \ upon arrival at the endpoint for the AH SA\n        o the AH header (Next Header,\
    \ Payload Len, Reserved, SPI,\n          Sequence Number (low-order 32 bits),\
    \ and the ICV (which is set\n          to zero for this computation), and explicit\
    \ padding bytes (if\n          any))\n        o everything after AH is assumed\
    \ to be immutable in transit\n        o the high-order bits of the ESN (if employed),\
    \ and any implicit\n          padding required by the integrity algorithm\n"
- title: 3.3.3.1.  Handling Mutable Fields
  contents:
  - "3.3.3.1.  Handling Mutable Fields\n   If a field may be modified during transit,\
    \ the value of the field is\n   set to zero for purposes of the ICV computation.\
    \  If a field is\n   mutable, but its value at the (IPsec) receiver is predictable,\
    \ then\n   that value is inserted into the field for purposes of the ICV\n   calculation.\
    \  The Integrity Check Value field is also set to zero in\n   preparation for\
    \ this computation.  Note that by replacing each\n   field's value with zero,\
    \ rather than omitting the field, alignment is\n   preserved for the ICV calculation.\
    \  Also, the zero-fill approach\n   ensures that the length of the fields that\
    \ are so handled cannot be\n   changed during transit, even though their contents\
    \ are not explicitly\n   covered by the ICV.\n   As a new extension header or\
    \ IPv4 option is created, it will be\n   defined in its own RFC and SHOULD include\
    \ (in the Security\n   Considerations section) directions for how it should be\
    \ handled when\n   calculating the AH ICV.  If the IP (v4 or v6) implementation\n\
    \   encounters an extension header that it does not recognize, it will\n   discard\
    \ the packet and send an ICMP message.  IPsec will never see\n   the packet. \
    \ If the IPsec implementation encounters an IPv4 option\n   that it does not recognize,\
    \ it should zero the whole option, using\n   the second byte of the option as\
    \ the length.  IPv6 options (in\n   Destination Extension Headers or the Hop-by-Hop\
    \ Extension Header)\n   contain a flag indicating mutability, which determines\
    \ appropriate\n   processing for such options.\n"
- title: 3.3.3.1.1.  ICV Computation for IPv4
  contents:
  - '3.3.3.1.1.  ICV Computation for IPv4

    '
- title: 3.3.3.1.1.1.  Base Header Fields
  contents:
  - "3.3.3.1.1.1.  Base Header Fields\n   The IPv4 base header fields are classified\
    \ as follows:\n   Immutable\n           Version\n           Internet Header Length\n\
    \           Total Length\n           Identification\n           Protocol (This\
    \ should be the value for AH.)\n           Source Address\n           Destination\
    \ Address (without loose or strict source routing)\n   Mutable but predictable\n\
    \           Destination Address (with loose or strict source routing)\n   Mutable\
    \ (zeroed prior to ICV calculation)\n           Differentiated Services Code Point\
    \ (DSCP)\n              (6 bits, see RFC 2474 [NBBB98])\n           Explicit Congestion\
    \ Notification (ECN)\n              (2 bits, see RFC 3168 [RFB01])\n         \
    \  Flags\n           Fragment Offset\n           Time to Live (TTL)\n        \
    \   Header Checksum\n   DSCP - Routers may rewrite the DS field as needed to provide\
    \ a\n   desired local or end-to-end service, thus its value upon reception\n \
    \  cannot be predicted by the sender.\n   ECN - This will change if a router along\
    \ the route experiences\n   congestion, and thus its value upon reception cannot\
    \ be predicted by\n   the sender.\n   Flags - This field is excluded because an\
    \ intermediate router might\n   set the DF bit, even if the source did not select\
    \ it.\n   Fragment Offset - Since AH is applied only to non-fragmented IP\n  \
    \ packets, the Offset Field must always be zero, and thus it is\n   excluded (even\
    \ though it is predictable).\n   TTL - This is changed en route as a normal course\
    \ of processing by\n   routers, and thus its value at the receiver is not predictable\
    \ by the\n   sender.\n   Header Checksum - This will change if any of these other\
    \ fields\n   change, and thus its value upon reception cannot be predicted by\
    \ the\n   sender.\n"
- title: 3.3.3.1.1.2.  Options
  contents:
  - "3.3.3.1.1.2.  Options\n   For IPv4 (unlike IPv6), there is no mechanism for tagging\
    \ options as\n   mutable in transit.  Hence the IPv4 options are explicitly listed\
    \ in\n   Appendix A and classified as immutable, mutable but predictable, or\n\
    \   mutable.  For IPv4, the entire option is viewed as a unit; so even\n   though\
    \ the type and length fields within most options are immutable\n   in transit,\
    \ if an option is classified as mutable, the entire option\n   is zeroed for ICV\
    \ computation purposes.\n"
- title: 3.3.3.1.2.  ICV Computation for IPv6
  contents:
  - '3.3.3.1.2.  ICV Computation for IPv6

    '
- title: 3.3.3.1.2.1.  Base Header Fields
  contents:
  - "3.3.3.1.2.1.  Base Header Fields\n   The IPv6 base header fields are classified\
    \ as follows:\n   Immutable\n           Version\n           Payload Length\n \
    \          Next Header\n           Source Address\n           Destination Address\
    \ (without Routing Extension Header)\n   Mutable but predictable\n           Destination\
    \ Address (with Routing Extension Header)\n   Mutable (zeroed prior to ICV calculation)\n\
    \           DSCP (6 bits, see RFC2474 [NBBB98])\n           ECN (2 bits, see RFC3168\
    \ [RFB01])\n           Flow Label (*)\n           Hop Limit\n        (*) The flow\
    \ label described in AHv1 was mutable, and in\n            RFC 2460 [DH98] was\
    \ potentially mutable.  To retain\n            compatibility with existing AH\
    \ implementations, the\n            flow label is not included in the ICV in AHv2.\n"
- title: 3.3.3.1.2.2.  Extension Headers Containing Options
  contents:
  - "3.3.3.1.2.2.  Extension Headers Containing Options\n   IPv6 options in the Hop-by-Hop\
    \ and Destination Extension Headers\n   contain a bit that indicates whether the\
    \ option might change\n   (unpredictably) during transit.  For any option for\
    \ which contents\n   may change en-route, the entire \"Option Data\" field must\
    \ be treated\n   as zero-valued octets when computing or verifying the ICV.  The\n\
    \   Option Type and Opt Data Len are included in the ICV calculation.\n   All\
    \ options for which the bit indicates immutability are included in\n   the ICV\
    \ calculation.  See the IPv6 specification [DH98] for more\n   information.\n"
- title: 3.3.3.1.2.3.  Extension Headers Not Containing Options
  contents:
  - "3.3.3.1.2.3.  Extension Headers Not Containing Options\n   The IPv6 extension\
    \ headers that do not contain options are explicitly\n   listed in Appendix A\
    \ and classified as immutable, mutable but\n   predictable, or mutable.\n"
- title: 3.3.3.2.  Padding and Extended Sequence Numbers
  contents:
  - '3.3.3.2.  Padding and Extended Sequence Numbers

    '
- title: 3.3.3.2.1.  ICV Padding
  contents:
  - "3.3.3.2.1.  ICV Padding\n   As mentioned in Section 2.6, the ICV field may include\
    \ explicit\n   padding if required to ensure that the AH header is a multiple\
    \ of 32\n   bits (IPv4) or 64 bits (IPv6).  If padding is required, its length\
    \ is\n   determined by two factors:\n           - the length of the ICV\n    \
    \       - the IP protocol version (v4 or v6)\n   For example, if the output of\
    \ the selected algorithm is 96 bits, no\n   padding is required for IPv4 or IPv6.\
    \  However, if a different length\n   ICV is generated, due to use of a different\
    \ algorithm, then padding\n   may be required depending on the length and IP protocol\
    \ version.  The\n   content of the padding field is arbitrarily selected by the\
    \ sender.\n   (The padding is arbitrary, but need not be random to achieve\n \
    \  security.)  These padding bytes are included in the ICV calculation,\n   counted\
    \ as part of the Payload Length, and transmitted at the end of\n   the ICV field\
    \ to enable the receiver to perform the ICV calculation.\n   Inclusion of padding\
    \ in excess of the minimum amount required to\n   satisfy IPv4/IPv6 alignment\
    \ requirements is prohibited.\n"
- title: 3.3.3.2.2.  Implicit Packet Padding and ESN
  contents:
  - "3.3.3.2.2.  Implicit Packet Padding and ESN\n   If the ESN option is elected\
    \ for an SA, then the high-order 32 bits\n   of the ESN must be included in the\
    \ ICV computation.  For purposes of\n   ICV computation, these bits are appended\
    \ (implicitly) immediately\n   after the end of the payload, and before any implicit\
    \ packet padding.\n   For some integrity algorithms, the byte string over which\
    \ the ICV\n   computation is performed must be a multiple of a blocksize specified\n\
    \   by the algorithm.  If the IP packet length (including AH and the 32\n   high-order\
    \ bits of the ESN, if enabled) does not match the blocksize\n   requirements for\
    \ the algorithm, implicit padding MUST be appended to\n   the end of the packet,\
    \ prior to ICV computation.  The padding octets\n   MUST have a value of zero.\
    \  The blocksize (and hence the length of\n   the padding) is specified by the\
    \ algorithm specification.  This\n   padding is not transmitted with the packet.\
    \  The document that\n   defines an integrity algorithm MUST be consulted to determine\
    \ if\n   implicit padding is required as described above.  If the document\n \
    \  does not specify an answer to this, then the default is to assume\n   that\
    \ implicit padding is required (as needed to match the packet\n   length to the\
    \ algorithm's blocksize.)  If padding bytes are needed\n   but the algorithm does\
    \ not specify the padding contents, then the\n   padding octets MUST have a value\
    \ of zero.\n"
- title: 3.3.4.  Fragmentation
  contents:
  - "3.3.4.  Fragmentation\n   If required, IP fragmentation occurs after AH processing\
    \ within an\n   IPsec implementation.  Thus, transport mode AH is applied only\
    \ to\n   whole IP datagrams (not to IP fragments).  An IPv4 packet to which AH\n\
    \   has been applied may itself be fragmented by routers en route, and\n   such\
    \ fragments must be reassembled prior to AH processing at a\n   receiver.  (This\
    \ does not apply to IPv6, where there is no router-\n   initiated fragmentation.)\
    \  In tunnel mode, AH is applied to an IP\n   packet, the payload of which may\
    \ be a fragmented IP packet.  For\n   example, a security gateway or a \"bump-in-the-stack\"\
    \ or \"bump-in-\n   the-wire\" IPsec implementation (see the Security Architecture\n\
    \   document for details) may apply tunnel mode AH to such fragments.\n   NOTE:\
    \ For transport mode -- As mentioned at the end of Section 3.1.1,\n   bump-in-the-stack\
    \ and bump-in-the-wire implementations may have to\n   first reassemble a packet\
    \ fragmented by the local IP layer, then\n   apply IPsec, and then fragment the\
    \ resulting packet.\n   NOTE: For IPv6 -- For bump-in-the-stack and bump-in-the-wire\n\
    \   implementations, it will be necessary to examine all the extension\n   headers\
    \ to determine if there is a fragmentation header and hence\n   that the packet\
    \ needs reassembling prior to IPsec processing.\n   Fragmentation, whether performed\
    \ by an IPsec implementation or by\n   routers along the path between IPsec peers,\
    \ significantly reduces\n   performance.  Moreover, the requirement for an AH\
    \ receiver to accept\n   fragments for reassembly creates denial of service vulnerabilities.\n\
    \   Thus, an AH implementation MAY choose to not support fragmentation\n   and\
    \ may mark transmitted packets with the DF bit, to facilitate Path\n   MTU (PMTU)\
    \ discovery.  In any case, an AH implementation MUST support\n   generation of\
    \ ICMP PMTU messages (or equivalent internal signaling\n   for native host implementations)\
    \ to minimize the likelihood of\n   fragmentation.  Details of the support required\
    \ for MTU management\n   are contained in the Security Architecture document.\n"
- title: 3.4.  Inbound Packet Processing
  contents:
  - "3.4.  Inbound Packet Processing\n   If there is more than one IPsec header/extension\
    \ present, the\n   processing for each one ignores (does not zero, does not use)\
    \ any\n   IPsec headers applied subsequent to the header being processed.\n"
- title: 3.4.1.  Reassembly
  contents:
  - "3.4.1.  Reassembly\n   If required, reassembly is performed prior to AH processing.\
    \  If a\n   packet offered to AH for processing appears to be an IP fragment,\n\
    \   i.e., the OFFSET field is nonzero or the MORE FRAGMENTS flag is set,\n   the\
    \ receiver MUST discard the packet; this is an auditable event.\n   The audit\
    \ log entry for this event SHOULD include the SPI value,\n   date/time, Source\
    \ Address, Destination Address, and (in IPv6) the\n   Flow ID.\n   NOTE: For packet\
    \ reassembly, the current IPv4 spec does NOT require\n   either the zeroing of\
    \ the OFFSET field or the clearing of the MORE\n   FRAGMENTS flag.  In order for\
    \ a reassembled packet to be processed by\n   IPsec (as opposed to discarded as\
    \ an apparent fragment), the IP code\n   must do these two things after it reassembles\
    \ a packet.\n"
- title: 3.4.2.  Security Association Lookup
  contents:
  - "3.4.2.  Security Association Lookup\n   Upon receipt of a packet containing an\
    \ IP Authentication Header, the\n   receiver determines the appropriate (unidirectional)\
    \ SA via lookup in\n   the SAD.  For a unicast SA, this determination is based\
    \ on the SPI or\n   the SPI plus protocol field, as described in Section 2.4.\
    \  If an\n   implementation supports multicast traffic, the destination address\
    \ is\n   also employed in the lookup (in addition to the SPI), and the sender\n\
    \   address also may be employed, as described in Section 2.4.  (This\n   process\
    \ is described in more detail in the Security Architecture\n   document.)  The\
    \ SAD entry for the SA also indicates whether the\n   Sequence Number field will\
    \ be checked and whether 32- or 64-bit\n   sequence numbers are employed for the\
    \ SA.  The SAD entry for the SA\n   also specifies the algorithm(s) employed for\
    \ ICV computation, and\n   indicates the key required to validate the ICV.\n \
    \  If no valid Security Association exists for this packet the receiver\n   MUST\
    \ discard the packet; this is an auditable event.  The audit log\n   entry for\
    \ this event SHOULD include the SPI value, date/time, Source\n   Address, Destination\
    \ Address, and (in IPv6) the Flow ID.\n   (Note that SA management traffic, such\
    \ as IKE packets, does not need\n   to be processed based on SPI, i.e., one can\
    \ de-multiplex this traffic\n   separately based on Next Protocol and Port fields,\
    \ for example.)\n"
- title: 3.4.3.  Sequence Number Verification
  contents:
  - "3.4.3.  Sequence Number Verification\n   All AH implementations MUST support\
    \ the anti-replay service, though\n   its use may be enabled or disabled by the\
    \ receiver on a per-SA basis.\n   Anti-replay is applicable to unicast as well\
    \ as multicast SAs.\n   However, this standard specifies no mechanisms for providing\
    \ anti-\n   replay for a multi-sender SA (unicast or multicast).  In the absence\n\
    \   of negotiation (or manual configuration) of an anti-replay mechanism\n   for\
    \ such an SA, it is recommended that sender and receiver checking\n   of the Sequence\
    \ Number for the SA be disabled (via negotiation or\n   manual configuration),\
    \ as noted below.\n   If the receiver does not enable anti-replay for an SA, no\
    \ inbound\n   checks are performed on the Sequence Number.  However, from the\n\
    \   perspective of the sender, the default is to assume that anti-replay\n   is\
    \ enabled at the receiver.  To avoid having the sender do\n   unnecessary sequence\
    \ number monitoring and SA setup (see Section\n   3.3.2, \"Sequence Number Generation\"\
    ), if an SA establishment protocol\n   such as IKE is employed, the receiver SHOULD\
    \ notify the sender,\n   during SA establishment, if the receiver will not provide\
    \ anti-replay\n   protection.\n   If the receiver has enabled the anti-replay\
    \ service for this SA, the\n   receive packet counter for the SA MUST be initialized\
    \ to zero when\n   the SA is established.  For each received packet, the receiver\
    \ MUST\n   verify that the packet contains a Sequence Number that does not\n \
    \  duplicate the Sequence Number of any other packets received during\n   the\
    \ life of this SA.  This SHOULD be the first AH check applied to a\n   packet\
    \ after it has been matched to an SA, to speed rejection of\n   duplicate packets.\n\
    \   Duplicates are rejected through the use of a sliding receive window.\n   How\
    \ the window is implemented is a local matter, but the following\n   text describes\
    \ the functionality that the implementation must\n   exhibit.\n   The \"right\"\
    \ edge of the window represents the highest, validated\n   Sequence Number value\
    \ received on this SA.  Packets that contain\n   sequence numbers lower than the\
    \ \"left\" edge of the window are\n   rejected.  Packets falling within the window\
    \ are checked against a\n   list of received packets within the window.\n   If\
    \ the ESN option is selected for an SA, only the low-order 32 bits\n   of the\
    \ sequence number are explicitly transmitted, but the receiver\n   employs the\
    \ full sequence number computed using the high-order 32\n   bits for the indicated\
    \ SA (from his local counter) when checking the\n   received Sequence Number against\
    \ the receive window.  In constructing\n   the full sequence number, if the low-order\
    \ 32 bits carried in the\n   packet are lower in value than the low-order 32 bits\
    \ of the\n   receiver's sequence number counter, the receiver assumes that the\n\
    \   high-order 32 bits have been incremented, moving to a new sequence\n   number\
    \ subspace.  (This algorithm accommodates gaps in reception for\n   a single SA\
    \ as large as 2**32-1 packets.  If a larger gap occurs,\n   additional, heuristic\
    \ checks for re-synchronization of the receiver's\n   sequence number counter\
    \ MAY be employed, as described in Appendix B.)\n   If the received packet falls\
    \ within the window and is not a\n   duplicate, or if the packet is to the right\
    \ of the window, then the\n   receiver proceeds to ICV verification.  If the ICV\
    \ validation fails,\n   the receiver MUST discard the received IP datagram as\
    \ invalid.  This\n   is an auditable event.  The audit log entry for this event\
    \ SHOULD\n   include the SPI value, date/time, Source Address, Destination\n \
    \  Address, the Sequence Number, and (in IPv6) the Flow ID.  The receive\n   window\
    \ is updated only if the ICV verification succeeds.\n   A MINIMUM window size\
    \ of 32 packets MUST be supported, but a window\n   size of 64 is preferred and\
    \ SHOULD be employed as the default.\n   Another window size (larger than the\
    \ MINIMUM) MAY be chosen by the\n   receiver.  (The receiver does NOT notify the\
    \ sender of the window\n   size.)  The receive window size should be increased\
    \ for higher-speed\n   environments, irrespective of assurance issues.  Values\
    \ for minimum\n   and recommended receive window sizes for very high-speed (e.g.,\n\
    \   multi-gigabit/second) devices are not specified by this standard.\n"
- title: 3.4.4.  Integrity Check Value Verification
  contents:
  - "3.4.4.  Integrity Check Value Verification\n   The receiver computes the ICV\
    \ over the appropriate fields of the\n   packet, using the specified integrity\
    \ algorithm, and verifies that it\n   is the same as the ICV included in the ICV\
    \ field of the packet.\n   Details of the computation are provided below.\n  \
    \ If the computed and received ICVs match, then the datagram is valid,\n   and\
    \ it is accepted.  If the test fails, then the receiver MUST\n   discard the received\
    \ IP datagram as invalid.  This is an auditable\n   event.  The audit log entry\
    \ SHOULD include the SPI value, date/time\n   received, Source Address, Destination\
    \ Address, and (in IPv6) the Flow\n   ID.\n   Implementation Note:\n      Implementations\
    \ can use any set of steps that results in the same\n      result as the following\
    \ set of steps.  Begin by saving the ICV\n      value and replacing it (but not\
    \ any ICV field padding) with zero.\n      Zero all other fields that may have\
    \ been modified during transit.\n      (See Section 3.3.3.1, \"Handling Mutable\
    \ Fields\", for a discussion\n      of which fields are zeroed before performing\
    \ the ICV calculation.)\n      If the ESN option is elected for this SA, append\
    \ the high-order 32\n      bits of the ESN after the end of the packet.  Check\
    \ the overall\n      length of the packet (as described above), and if it requires\n\
    \      implicit padding based on the requirements of the integrity\n      algorithm,\
    \ append zero-filled bytes to the end of the packet\n      (after the ESN if present)\
    \ as required.  Perform the ICV\n      computation and compare the result with\
    \ the saved value, using the\n      comparison rules defined by the algorithm\
    \ specification.  (For\n      example, if a digital signature and one-way hash\
    \ are used for the\n      ICV computation, the matching process is more complex.)\n"
- title: 4.  Auditing
  contents:
  - "4.  Auditing\n   Not all systems that implement AH will implement auditing. \
    \ However,\n   if AH is incorporated into a system that supports auditing, then\
    \ the\n   AH implementation MUST also support auditing and MUST allow a system\n\
    \   administrator to enable or disable auditing for AH.  For the most\n   part,\
    \ the granularity of auditing is a local matter.  However,\n   several auditable\
    \ events are identified in this specification, and\n   for each of these events\
    \ a minimum set of information that SHOULD be\n   included in an audit log is\
    \ defined.  Additional information also MAY\n   be included in the audit log for\
    \ each of these events, and additional\n   events, not explicitly called out in\
    \ this specification, also MAY\n   result in audit log entries.  There is no requirement\
    \ for the\n   receiver to transmit any message to the purported sender in response\n\
    \   to the detection of an auditable event, because of the potential to\n   induce\
    \ denial of service via such action.\n"
- title: 5.  Conformance Requirements
  contents:
  - "5.  Conformance Requirements\n   Implementations that claim conformance or compliance\
    \ with this\n   specification MUST fully implement the AH syntax and processing\n\
    \   described here for unicast traffic, and MUST comply with all\n   requirements\
    \ of the Security Architecture document [Ken-Arch].\n   Additionally, if an implementation\
    \ claims to support multicast\n   traffic, it MUST comply with the additional\
    \ requirements specified\n   for support of such traffic.  If the key used to\
    \ compute an ICV is\n   manually distributed, correct provision of the anti-replay\
    \ service\n   would require correct maintenance of the counter state at the sender,\n\
    \   until the key is replaced, and there likely would be no automated\n   recovery\
    \ provision if counter overflow were imminent.  Thus, a\n   compliant implementation\
    \ SHOULD NOT provide this service in\n   conjunction with SAs that are manually\
    \ keyed.\n   The mandatory-to-implement algorithms for use with AH are described\n\
    \   in a separate RFC [Eas04], to facilitate updating the algorithm\n   requirements\
    \ independently from the protocol per se.  Additional\n   algorithms, beyond those\
    \ mandated for AH, MAY be supported.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security is central to the design of this protocol,\
    \ and these\n   security considerations permeate the specification.  Additional\n\
    \   security-relevant aspects of using the IPsec protocol are discussed\n   in\
    \ the Security Architecture document.\n"
- title: 7.  Differences from RFC 2402
  contents:
  - "7.  Differences from RFC 2402\n   This document differs from RFC 2402 [RFC2402]\
    \ in the following ways.\n        o SPI -- modified to specify a uniform algorithm\
    \ for SAD lookup\n          for unicast and multicast SAs, covering a wider range\
    \ of\n          multicast technologies.  For unicast, the SPI may be used\n  \
    \        alone to select an SA, or may be combined with the protocol,\n      \
    \    at the option of the receiver.  For multicast SAs, the SPI is\n         \
    \ combined with the destination address, and optionally the\n          source\
    \ address, to select an SA.\n        o Extended Sequence Number -- added a new\
    \ option for a 64-bit\n          sequence number for very high-speed communications.\
    \  Clarified\n          sender and receiver processing requirements for multicast\
    \ SAs\n          and multi-sender SAs.\n        o Moved references to mandatory\
    \ algorithms to a separate\n          document [Eas04].\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The author would like to acknowledge the contributions\
    \ of Ran\n   Atkinson, who played a critical role in initial IPsec activities,\
    \ and\n   who authored the first series of IPsec standards: RFCs 1825-1827.\n\
    \   Karen Seo deserves special thanks for providing help in the editing\n   of\
    \ this and the previous version of this specification.  The author\n   also would\
    \ like to thank the members of the IPsec and MSEC working\n   groups who have\
    \ contributed to the development of this protocol\n   specification.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [Bra97]    Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Level\", BCP 14, RFC 2119, March\
    \ 1997.\n   [DH98]     Deering, S. and R.  Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [Eas04]\
    \    3rd Eastlake, D., \"Cryptographic Algorithm Implementation\n            \
    \  Requirements for Encapsulating Security Payload (ESP) and\n              Authentication\
    \ Header (AH)\", RFC 4305, December 2005.\n   [Ken-Arch] Kent, S. and K. Seo,\
    \ \"Security Architecture for the\n              Internet Protocol\", RFC 4301,\
    \ December 2005.\n   [RFC791]   Postel, J., \"Internet Protocol\", STD 5, RFC\
    \ 791, September\n              1981.\n   [RFC1108]  Kent, S., \"U.S. Department\
    \ of Defense Security Options for\n              the Internet Protocol\", RFC\
    \ 1108, November 1991.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [AES]      Advanced Encryption Standard (AES),\
    \ Federal Information\n              Processing Standard 197, National Institutes\
    \ of Standards\n              and Technology, November 26, 2001.\n   [HC03]  \
    \   Holbrook, H. and B. Cain, \"Source Specific Multicast for\n              IP\"\
    , Work in Progress, November 3, 2002.\n   [IKEv2]    Kaufman, C., Ed., \"Internet\
    \ Key Exchange (IKEv2)\n              Protocol\", RFC 4306, December 2005.\n \
    \  [Ken-ESP]  Kent, S., \"IP Encapsulating Security Payload (ESP)\", RFC\n   \
    \           4303, December 2005.\n   [NBBB98]   Nichols, K., Blake, S., Baker,\
    \ F., and D. Black,\n              \"Definition of the Differentiated Services\
    \ Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC 2474, December\n\
    \              1998.\n   [RFB01]    Ramakrishnan, K., Floyd, S., and D. Black,\
    \ \"The Addition\n              of Explicit Congestion Notification (ECN) to IP\"\
    , RFC\n              3168, September 2001.\n   [RFC1063]  Mogul, J., Kent, C.,\
    \ Partridge, C., and K. McCloghrie, \"IP\n              MTU discovery options\"\
    , RFC 1063, July 1988.\n   [RFC1122]  Braden, R., \"Requirements for Internet\
    \ Hosts -\n              Communication Layers\", STD 3, RFC 1122, October 1989.\n\
    \   [RFC1191]  Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n \
    \             November 1990.\n   [RFC1385]  Wang, Z., \"EIP: The Extended Internet\
    \ Protocol\", RFC 1385,\n              November 1992.\n   [RFC1393]  Malkin, G.,\
    \ \"Traceroute Using an IP Option\", RFC 1393,\n              January 1993.\n\
    \   [RFC1770]  Graff, C., \"IPv4 Option for Sender Directed Multi-\n         \
    \     Destination Delivery\", RFC 1770, March 1995.\n   [RFC2113]  Katz, D., \"\
    IP Router Alert Option\", RFC 2113, February\n              1997.\n   [RFC2402]\
    \  Kent, S. and R. Atkinson, \"IP Authentication Header\", RFC\n             \
    \ 2402, November 1998.\n   [RFC3547]  Baugher, M., Weis, B., Hardjono, T., and\
    \ H. Harney, \"The\n              Group Domain of Interpretation\", RFC 3547,\
    \ July 2003.\n   [RFC3740]  Hardjono, T. and B. Weis, \"The Multicast Group Security\n\
    \              Architecture\", RFC 3740, March 2004.\n"
- title: 'Appendix A: Mutability of IP Options/Extension Headers'
  contents:
  - 'Appendix A: Mutability of IP Options/Extension Headers

    '
- title: A1.  IPv4 Options
  contents:
  - "A1.  IPv4 Options\n   This table shows how the IPv4 options are classified with\
    \ regard to\n   \"mutability\".  Where two references are provided, the second\
    \ one\n   supercedes the first.  This table is based in part on information\n\
    \   provided in RFC 1700, \"ASSIGNED NUMBERS\", (October 1994).\n            \
    \   Opt.\n    Copy Class  #   Name                       Reference\n    ---- -----\
    \ ---  -------------------------  --------\n    IMMUTABLE -- included in ICV calculation\n\
    \      0   0     0   End of Options List        [RFC791]\n      0   0     1  \
    \ No Operation               [RFC791]\n      1   0     2   Security          \
    \         [RFC1108] (historic but\n                                          \
    \     in use)\n      1   0     5   Extended Security          [RFC1108] (historic\
    \ but\n                                               in use)\n      1   0   \
    \  6   Commercial Security\n      1   0    20   Router Alert               [RFC2113]\n\
    \      1   0    21   Sender Directed Multi-     [RFC1770]\n                  \
    \  Destination Delivery\n    MUTABLE -- zeroed\n      1   0      3  Loose Source\
    \ Route         [RFC791]\n      0   2      4  Time Stamp                 [RFC791]\n\
    \      0   0      7  Record Route               [RFC791]\n      1   0      9 \
    \ Strict Source Route        [RFC791]\n      0   2     18  Traceroute        \
    \         [RFC1393]\n    EXPERIMENTAL, SUPERCEDED -- zeroed\n      1   0     \
    \ 8  Stream ID                  [RFC791, RFC1122 (Host\n                     \
    \                          Req)]\n      0   0     11  MTU Probe              \
    \    [RFC1063, RFC1191 (PMTU)]\n      0   0     12  MTU Reply                \
    \  [RFC1063, RFC1191 (PMTU)]\n      1   0     17  Extended Internet Protocol [RFC1385,\
    \ DH98 (IPv6)]\n      0   0     10  Experimental Measurement\n      1   2    \
    \ 13  Experimental Flow Control\n      1   0     14  Experimental Access Ctl\n\
    \      0   0     15  ???\n      1   0     16  IMI Traffic Descriptor\n      1\
    \   0     19  Address Extension\n   NOTE: Use of the Router Alert option is potentially\
    \ incompatible with\n   use of IPsec.  Although the option is immutable, its use\
    \ implies that\n   each router along a packet's path will \"process\" the packet\
    \ and\n   consequently might change the packet.  This would happen on a hop-\n\
    \   by-hop basis as the packet goes from router to router.  Prior to\n   being\
    \ processed by the application to which the option contents are\n   directed (e.g.,\
    \ Resource Reservation Protocol (RSVP)/Internet Group\n   Management Protocol\
    \ (IGMP)), the packet should encounter AH\n   processing.  However, AH processing\
    \ would require that each router\n   along the path is a member of a multicast-SA\
    \ defined by the SPI.\n   This might pose problems for packets that are not strictly\
    \ source\n   routed, and it requires multicast support techniques not currently\n\
    \   available.\n   NOTE: Addition or removal of security labels (e.g., Basic Security\n\
    \   Option (BSO), Extended Security Option (ESO), or Commercial Internet\n   Protocol\
    \ Security Option (CIPSO)) by systems along a packet's path\n   conflicts with\
    \ the classification of these IP options as immutable\n   and is incompatible\
    \ with the use of IPsec.\n   NOTE: End of Options List options SHOULD be repeated\
    \ as necessary to\n   ensure that the IP header ends on a 4-byte boundary in order\
    \ to\n   ensure that there are no unspecified bytes that could be used for a\n\
    \   covert channel.\n"
- title: A2.  IPv6 Extension Headers
  contents:
  - "A2.  IPv6 Extension Headers\n   This table shows how the IPv6 extension headers\
    \ are classified with\n   regard to \"mutability\".\n       Option/Extension Name\
    \                  Reference\n       -----------------------------------    ---------\n\
    \       MUTABLE BUT PREDICTABLE -- included in ICV calculation\n         Routing\
    \ (Type 0)                    [DH98]\n       BIT INDICATES IF OPTION IS MUTABLE\
    \ (CHANGES UNPREDICTABLY DURING\n       TRANSIT)\n         Hop-by-Hop options\
    \                  [DH98]\n         Destination options                 [DH98]\n\
    \       NOT APPLICABLE\n         Fragmentation                       [DH98]\n\
    \       Options -- IPv6 options in the Hop-by-Hop and Destination\n   Extension\
    \ Headers contain a bit that indicates whether the option\n   might change (unpredictably)\
    \ during transit.  For any option for\n   which contents may change en route,\
    \ the entire \"Option Data\" field\n   must be treated as zero-valued octets when\
    \ computing or verifying\n   the ICV.  The Option Type and Opt Data Len are included\
    \ in the ICV\n   calculation.  All options for which the bit indicates immutability\n\
    \   are included in the ICV calculation.  See the IPv6 specification\n   [DH98]\
    \ for more information.\n       Routing (Type 0) -- The IPv6 Routing Header \"\
    Type 0\" will\n   rearrange the address fields within the packet during transit\
    \ from\n   source to destination.  However, the contents of the packet as it\n\
    \   will appear at the receiver are known to the sender and to all\n   intermediate\
    \ hops.  Hence, the IPv6 Routing Header \"Type 0\" is\n   included in the Integrity\
    \ Check Value calculation as mutable but\n   predictable.  The sender must order\
    \ the field so that it appears as\n   it will at the receiver, prior to performing\
    \ the ICV computation.\n       Fragmentation -- Fragmentation occurs after outbound\
    \ IPsec\n   processing (Section 3.3) and reassembly occurs before inbound IPsec\n\
    \   processing (Section 3.4).  So the Fragmentation Extension Header, if\n   it\
    \ exists, is not seen by IPsec.\n   Note that on the receive side, the IP implementation\
    \ could leave a\n   Fragmentation Extension Header in place when it does re-assembly.\
    \  If\n   this happens, then when AH receives the packet, before doing ICV\n \
    \  processing, AH MUST \"remove\" (or skip over) this header and change\n   the\
    \ previous header's \"Next Header\" field to be the \"Next Header\"\n   field\
    \ in the Fragmentation Extension Header.\n   Note that on the send side, the IP\
    \ implementation could give the\n   IPsec code a packet with a Fragmentation Extension\
    \ Header with Offset\n   of 0 (first fragment) and a More Fragments Flag of 0\
    \ (last fragment).\n   If this happens, then before doing ICV processing, AH MUST\
    \ first\n   \"remove\" (or skip over) this header and change the previous header's\n\
    \   \"Next Header\" field to be the \"Next Header\" field in the\n   Fragmentation\
    \ Extension Header.\n"
- title: 'Appendix B: Extended (64-bit) Sequence Numbers'
  contents:
  - 'Appendix B: Extended (64-bit) Sequence Numbers

    '
- title: B1.  Overview
  contents:
  - "B1.  Overview\n   This appendix describes an Extended Sequence Number (ESN) scheme\
    \ for\n   use with IPsec (ESP and AH) that employs a 64-bit sequence number,\n\
    \   but in which only the low-order 32 bits are transmitted as part of\n   each\
    \ packet.  It covers both the window scheme used to detect\n   replayed packets\
    \ and the determination of the high-order bits of the\n   sequence number that\
    \ are used both for replay rejection and for\n   computation of the ICV.  It also\
    \ discusses a mechanism for handling\n   loss of synchronization relative to the\
    \ (not transmitted) high-order\n   bits.\n"
- title: B2.  Anti-Replay Window
  contents:
  - "B2.  Anti-Replay Window\n   The receiver will maintain an anti-replay window\
    \ of size W.  This\n   window will limit how far out of order a packet can be,\
    \ relative to\n   the packet with the highest sequence number that has been\n\
    \   authenticated so far.  (No requirement is established for minimum or\n   recommended\
    \ sizes for this window, beyond the 32- and 64-packet\n   values already established\
    \ for 32-bit sequence number windows.\n   However, it is suggested that an implementer\
    \ scale these values\n   consistent with the interface speed supported by an implementation\n\
    \   that makes use of the ESN option.  Also, the algorithm described\n   below\
    \ assumes that the window is no greater than 2^31 packets in\n   width.)  All\
    \ 2^32 sequence numbers associated with any fixed value\n   for the high-order\
    \ 32 bits (Seqh) will hereafter be called a sequence\n   number subspace.  The\
    \ following table lists pertinent variables and\n   their definitions.\n     \
    \   Var.   Size\n        Name  (bits)             Meaning\n        ----  ------\
    \   ---------------------------\n        W       32     Size of window\n     \
    \   T       64     Highest sequence number authenticated so far,\n           \
    \            upper bound of window\n          Tl      32     Lower 32 bits of\
    \ T\n          Th      32     Upper 32 bits of T\n        B       64     Lower\
    \ bound of window\n          Bl      32     Lower 32 bits of B\n          Bh \
    \     32     Upper 32 bits of B\n        Seq     64     Sequence Number of received\
    \ packet\n          Seql    32     Lower 32 bits of Seq\n          Seqh    32\
    \     Upper 32 bits of Seq\n   When performing the anti-replay check, or when\
    \ determining which\n   high-order bits to use to authenticate an incoming packet,\
    \ there are\n   two cases:\n     + Case A: Tl >= (W - 1). In this case, the window\
    \ is within one\n                              sequence number subspace.  (See\
    \ Figure 1)\n     + Case B: Tl < (W - 1).  In this case, the window spans two\n\
    \                              sequence number subspaces.  (See Figure 2)\n  \
    \ In the figures below, the bottom line (\"----\") shows two consecutive\n   sequence\
    \ number subspaces, with zeros indicating the beginning of\n   each subspace.\
    \  The two shorter lines above it show the higher-order\n   bits that apply. \
    \ The \"====\" represents the window.  The \"****\"\n   represents future sequence\
    \ numbers, i.e., those beyond the current\n   highest sequence number authenticated\
    \ (ThTl).\n        Th+1                         *********\n        Th        \
    \       =======*****\n              --0--------+-----+-----0--------+-----------0--\n\
    \                         Bl    Tl            Bl\n                           \
    \             (Bl+2^32) mod 2^32\n                            Figure 1 -- Case\
    \ A\n        Th                           ====**************\n        Th-1   \
    \                   ===\n              --0-----------------+--0--+--------------+--0--\n\
    \                                  Bl    Tl            Bl\n                  \
    \                               (Bl+2^32) mod 2^32\n                         \
    \   Figure 2 -- Case B\n"
- title: B2.1.  Managing and Using the Anti-Replay Window
  contents:
  - "B2.1.  Managing and Using the Anti-Replay Window\n   The anti-replay window can\
    \ be thought of as a string of bits where\n   `W' defines the length of the string.\
    \  W = T - B + 1 and cannot\n   exceed 2^32 - 1 in value.  The bottom-most bit\
    \ corresponds to B and\n   the top-most bit corresponds to T, and each sequence\
    \ number from Bl\n   through Tl is represented by a corresponding bit.  The value\
    \ of the\n   bit indicates whether or not a packet with that sequence number has\n\
    \   been received and authenticated, so that replays can be detected and\n   rejected.\n\
    \   When a packet with a 64-bit sequence number (Seq) greater than T is\n   received\
    \ and validated,\n      + B is increased by (Seq - T)\n      + (Seq - T) bits\
    \ are dropped from the low end of the window\n      + (Seq - T) bits are added\
    \ to the high end of the window\n      + The top bit is set to indicate that a\
    \ packet with that sequence\n        number has been received and authenticated\n\
    \      + The new bits between T and the top bit are set to indicate that\n   \
    \     no packets with those sequence numbers have been received yet.\n      +\
    \ T is set to the new sequence number\n   In checking for replayed packets,\n\
    \      + Under Case A: If Seql >= Bl (where Bl = Tl - W + 1) AND\n        Seql\
    \ <= Tl, then check the corresponding bit in the window to\n        see if this\
    \ Seql has already been seen.  If yes, reject the\n        packet.  If no, perform\
    \ integrity check (see Appendix B2.2\n        below for determination of SeqH).\n\
    \      + Under Case B: If Seql >= Bl (where Bl = Tl - W + 1) OR\n        Seql\
    \ <= Tl, then check the corresponding bit in the window to\n        see if this\
    \ Seql has already been seen.  If yes, reject the\n        packet.  If no, perform\
    \ integrity check (see Appendix B2.2\n        below for determination of Seqh).\n"
- title: B2.2.  Determining the Higher-Order Bits (Seqh) of the Sequence Number
  contents:
  - "B2.2.  Determining the Higher-Order Bits (Seqh) of the Sequence Number\n   Because\
    \ only `Seql' will be transmitted with the packet, the receiver\n   must deduce\
    \ and track the sequence number subspace into which each\n   packet falls, i.e.,\
    \ determine the value of Seqh.  The following\n   equations define how to select\
    \ Seqh under \"normal\" conditions; see\n   Appendix B3 for a discussion of how\
    \ to recover from extreme packet\n   loss.\n      + Under Case A (Figure 1):\n\
    \        If Seql >= Bl (where Bl = Tl - W + 1), then Seqh = Th\n        If Seql\
    \ <  Bl (where Bl = Tl - W + 1), then Seqh = Th + 1\n      + Under Case B (Figure\
    \ 2):\n        If Seql >= Bl (where Bl = Tl - W + 1), then Seqh = Th - 1\n   \
    \     If Seql <  Bl (where Bl = Tl - W + 1), then Seqh = Th\n"
- title: B2.3.  Pseudo-Code Example
  contents:
  - "B2.3.  Pseudo-Code Example\n   The following pseudo-code illustrates the above\
    \ algorithms for anti-\n   replay and integrity checks.  The values for `Seql',\
    \ `Tl', `Th', and\n   `W' are 32-bit unsigned integers.  Arithmetic is mod 2^32.\n\
    \        If (Tl >= W - 1)                            Case A\n            If (Seql\
    \ >= Tl - W + 1)\n                Seqh = Th\n                If (Seql <= Tl)\n\
    \                    If (pass replay check)\n                        If (pass\
    \ integrity check)\n                            Set bit corresponding to Seql\n\
    \                            Pass the packet on\n                        Else\
    \ reject packet\n                    Else reject packet\n                Else\n\
    \                    If (pass integrity check)\n                        Tl = Seql\
    \ (shift bits)\n                        Set bit corresponding to Seql\n      \
    \                  Pass the packet on\n                    Else reject packet\n\
    \            Else\n                Seqh = Th + 1\n                If (pass integrity\
    \ check)\n                    Tl = Seql (shift bits)\n                    Th =\
    \ Th + 1\n                    Set bit corresponding to Seql\n                \
    \    Pass the packet on\n                Else reject packet\n        Else    \
    \                                Case B\n            If (Seql >= Tl - W + 1)\n\
    \                Seqh = Th - 1\n                If (pass replay check)\n     \
    \               If (pass integrity check)\n                        Set the bit\
    \ corresponding to Seql\n                        Pass packet on\n            \
    \        Else reject packet\n                Else reject packet\n            Else\n\
    \                Seqh = Th\n                If (Seql <= Tl)\n                \
    \    If (pass replay check)\n                        If (pass integrity check)\n\
    \                            Set the bit corresponding to Seql\n             \
    \               Pass packet on\n                        Else reject packet\n \
    \                   Else reject packet\n                Else\n               \
    \     If (pass integrity check)\n                        Tl = Seql (shift bits)\n\
    \                        Set the bit corresponding to Seql\n                 \
    \       Pass packet on\n                    Else reject packet\n"
- title: B3.  Handling Loss of Synchronization due to Significant Packet Loss
  contents:
  - "B3.  Handling Loss of Synchronization due to Significant Packet Loss\n   If there\
    \ is an undetected packet loss of 2^32 or more consecutive\n   packets on a single\
    \ SA, then the transmitter and receiver will lose\n   synchronization of the high-order\
    \ bits, i.e., the equations in\n   Appendix B2.2. will fail to yield the correct\
    \ value.  Unless this\n   problem is detected and addressed, subsequent packets\
    \ on this SA will\n   fail authentication checks and be discarded.  The following\
    \ procedure\n   SHOULD be implemented by any IPsec (ESP or AH) implementation\
    \ that\n   supports the ESN option.\n   Note that this sort of extended traffic\
    \ loss seems unlikely to occur\n   if any significant fraction of the traffic\
    \ on the SA in question is\n   TCP, because the source would fail to receive ACKs\
    \ and would stop\n   sending long before 2^32 packets had been lost.  Also, for\
    \ any bi-\n   directional application, even ones operating above UDP, such an\n\
    \   extended outage would likely result in triggering some form of\n   timeout.\
    \  However, a unidirectional application, operating over UDP,\n   might lack feedback\
    \ that would cause automatic detection of a loss of\n   this magnitude, hence\
    \ the motivation to develop a recovery method for\n   this case.\n   The solution\
    \ we've chosen was selected to:\n     + minimize the impact on normal traffic\
    \ processing.\n     + avoid creating an opportunity for a new denial of service\
    \ attack\n       such as might occur by allowing an attacker to force diversion\
    \ of\n       resources to a re-synchronization process.\n     + limit the recovery\
    \ mechanism to the receiver because anti-replay\n       is a service only for\
    \ the receiver, and the transmitter generally\n       is not aware of whether\
    \ the receiver is using sequence numbers in\n       support of this optional service.\
    \  It is preferable for recovery\n       mechanisms to be local to the receiver.\
    \  This also allows for\n       backward compatibility.\n"
- title: B3.1.  Triggering Re-synchronization
  contents:
  - "B3.1.  Triggering Re-synchronization\n   For each SA, the receiver records the\
    \ number of consecutive packets\n   that fail authentication.  This count is used\
    \ to trigger the re-\n   synchronization process, which should be performed in\
    \ the background\n   or using a separate processor.  Receipt of a valid packet\
    \ on the SA\n   resets the counter to zero.  The value used to trigger the re-\n\
    \   synchronization process is a local parameter.  There is no\n   requirement\
    \ to support distinct trigger values for different SAs,\n   although an implementer\
    \ may choose to do so.\n"
- title: B3.2.  Re-synchronization Process
  contents:
  - "B3.2.  Re-synchronization Process\n   When the above trigger point is reached,\
    \ a \"bad\" packet is selected\n   for which authentication is retried using successively\
    \ larger values\n   for the upper half of the sequence number (Seqh).  These values\
    \ are\n   generated by incrementing by one for each retry.  The number of\n  \
    \ retries should be limited, in case this is a packet from the \"past\"\n   or\
    \ a bogus packet.  The limit value is a local parameter.  (Because\n   the Seqh\
    \ value is implicitly placed after the AH (or ESP) payload, it\n   may be possible\
    \ to optimize this procedure by executing the integrity\n   algorithm over the\
    \ packet up to the endpoint of the payload, then\n   compute different candidate\
    \ ICVs by varying the value of Seqh.)\n   Successful authentication of a packet\
    \ via this procedure resets the\n   consecutive failure count and sets the value\
    \ of T to that of the\n   received packet.\n   This solution requires support\
    \ only on the part of the receiver,\n   thereby allowing for backward compatibility.\
    \  Also, because re-\n   synchronization efforts would either occur in the background\
    \ or\n   utilize an additional processor, this solution does not impact\n   traffic\
    \ processing and a denial of service attack cannot divert\n   resources away from\
    \ traffic processing.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Stephen Kent\n   BBN Technologies\n   10 Moulton Street\n\
    \   Cambridge, MA  02138\n   USA\n   Phone: +1 (617) 873-3988\n   EMail: kent@bbn.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
