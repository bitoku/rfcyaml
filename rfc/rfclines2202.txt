Test Cases for HMAC MD5 and HMAC SHA 1 Status of This Memo
This memo provides information for the Internet community.
This memo does not specify an Internet standard of any kind.
Distribution of this memo is unlimited.
This document provides two sets of test cases for HMAC MD5 and HMAC  SHA 1, respectively.
HMAC MD5 and HMAC SHA 1 are two constructs of the HMAC [HMAC] message authentication function using the MD5 [MD5] hash function and the SHA 1 [SHA] hash function.
Both constructs are used by IPSEC [OG,CG] and other protocols to authenticate messages.
The test cases and results provided in this document are meant to be used as a conformance test for HMAC MD5 and HMAC SHA 1 implementations.
The general method for constructing a HMAC message authentication function using a particular hash function is described in section 2 of [HMAC].
We will not repeat the description here.
Section 5 of [HMAC] also discusses truncating the output of HMAC; the rule is that we should keep the more significant bits (the bits in the left, assuming a network byte order (big endian)).
In sections 2 and 3 we provide test cases for HMAC MD5 and HMAC SHA  1, respectively.
Each case includes the key, the data, and the result.
The values of keys and data are either hexadecimal numbers (prefixed by "0x") or ASCII character strings in double quotes.
If a value is an ASCII character string, then the HMAC computation for the corresponding test case DOES NOT include the trailing null character ('\0') in the string.
The C source code of the functions used to generate HMAC SHA 1 results is listed in the Appendix.
Note that these functions are meant to be simple and easy to understand; they are not optimized in any way.
The C source code for computing HMAC MD5 can be found in [MD5]; or you can do a simple modification to HMAC SHA 1 code to get HMAC MD5 code, as explained in the Appendix.
The test cases in this document are cross verified by three independent implementations, one from NIST and two from IBM Research.
One IBM implementation uses optimized code that is very different from the code in the Appendix.
An implemenation that concurs with the results provided in this document should be interoperable with other similar implemenations.
We do not claim that such an implementation is absolutely correct with respect to the HMAC definition in [HMAC].
"what do ya want for nothing?
This docuemnt raises no security issues.
Discussion on the strength of the HMAC construction can be found in [HMAC].
Authors' Addresses Pau Chen Cheng IBM T.J. Watson Research Center P.O.Box
704 Yorktown Heights, NY 10598
Robert Glenn NIST Building 820
, Room 455 Gaithersburg, MD 20899 EMail:
This appendix contains the C reference code which implements HMAC  SHA 1 using an existing SHA 1 library.
It assumes that the SHA 1 library has similar API's as those of the MD5 code described in RFC 1321.
The code for HMAC MD5 is similar, just replace the strings "SHA" and "sha" with "MD5" and "md5".
HMAC MD5 code is also listed in RFC 2104.
20 #endif #ifndef SHA BLOCKSIZE
#endif #ifndef MD5 DIGESTSIZE #
16 #endif #ifndef MD5 BLOCKSIZE
#endif /  Function to print the digest  / void
pr sha(FILE  fp, char  s, int t)
for (i   0 ; i < len ; i ) d2[i]
) buf[i]   k[i] ^ 0x36 ;
Pad the key for outter
digest  / for (i   0
; i < lk ;  i) buf[i]   k[i] ^ 0x5C ; for (i   lk ; i < SHA BLOCKSIZE ;  i) buf[i]   0x5C ;
