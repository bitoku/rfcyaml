- title: __initial_text__
  contents:
  - '             Asymmetric Extended Route Optimization (AERO)

    '
- title: Abstract
  contents:
  - "Abstract\n   Nodes attached to common multi-access link types (e.g., multicast-\n\
    \   capable, shared media, non-broadcast multiple access (NBMA), etc.)\n   can\
    \ exchange packets as neighbors on the link, but they may not\n   always be provisioned\
    \ with sufficient routing information for optimal\n   neighbor selection.  Such\
    \ nodes should therefore be able to discover\n   a trusted intermediate router\
    \ on the link that provides both\n   forwarding services to reach off-link destinations\
    \ and redirection\n   services to inform the node of an on-link neighbor that\
    \ is closer to\n   the final destination.  This redirection can provide a useful\
    \ route\n   optimization, since the triangular path from the ingress link\n  \
    \ neighbor, to the intermediate router, and finally to the egress link\n   neighbor\
    \ may be considerably longer than the direct path from ingress\n   to egress.\
    \  However, ordinary redirection may lead to operational\n   issues on certain\
    \ link types and/or in certain deployment scenarios.\n   This document therefore\
    \ introduces an Asymmetric Extended Route\n   Optimization (AERO) capability that\
    \ addresses the issues.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6706.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................6\n  \
    \ 3. Motivation ......................................................7\n   4.\
    \ Example Use Cases ...............................................8\n   5. Requirements\
    \ ....................................................9\n   6. Asymmetric Extended\
    \ Route Optimization (AERO) ..................10\n      6.1. AERO Link Dynamic\
    \ Routing .................................10\n      6.2. AERO Node Behavior ........................................11\n\
    \           6.2.1. AERO Node Types ....................................11\n  \
    \         6.2.2. AERO Host Behavior .................................11\n    \
    \       6.2.3. Edge AERO Router Behavior ..........................11\n      \
    \     6.2.4. Intermediate AERO Router Behavior ..................12\n      6.3.\
    \ AERO Reference Operational Scenario .......................12\n      6.4. AERO\
    \ Specification ........................................14\n           6.4.1.\
    \ Traditional Redirection Approaches .................14\n           6.4.2. AERO\
    \ Concept of Operations .........................15\n           6.4.3. Conceptual\
    \ Data Structures and Protocol Constants ..16\n           6.4.4. Data Origin Authentication\
    \ .........................17\n           6.4.5. AERO Redirection Message Format\
    \ ....................18\n           6.4.6. Sending Predirects .................................20\n\
    \           6.4.7. Processing Predirects and Sending Redirects ........21\n  \
    \         6.4.8. Forwarding Redirects ...............................22\n    \
    \       6.4.9. Processing Redirects ...............................23\n      \
    \     6.4.10. Sending Periodic Predirect Keepalives .............24\n        \
    \   6.4.11. Neighbor Reachability Considerations ..............26\n          \
    \ 6.4.12. Mobility Considerations ...........................26\n           6.4.13.\
    \ Link-Layer Address Change Considerations ..........27\n           6.4.14. Prefix\
    \ Re-provisioning Considerations .............28\n           6.4.15. Backward\
    \ Compatibility ............................29\n   7. IANA Considerations ............................................29\n\
    \   8. Security Considerations ........................................29\n  \
    \ 9. Acknowledgements ...............................................29\n   10.\
    \ References ....................................................30\n      10.1.\
    \ Normative References .....................................30\n      10.2. Informative\
    \ References ...................................30\n   Appendix A. Intermediate\
    \ Router Interworking ......................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Nodes attached to common multi-access link types (e.g.,\
    \ multicast-\n   capable, shared media, non-broadcast multiple access (NBMA),\
    \ etc.)\n   can exchange packets as neighbors on the link, but they may not\n\
    \   always be provisioned with sufficient routing information for optimal\n  \
    \ neighbor selection.  Such nodes should therefore be able to discover\n   a trusted\
    \ intermediate router on the link that provides both default\n   forwarding services\
    \ to reach off-link destinations and redirection\n   services to inform the node\
    \ of an on-link neighbor that is closer to\n   the final destination.\n      \
    \            +--------------+\n                  |   Router A   |\n          \
    \        |    (D->C)    |\n                  +--------------+\n              \
    \           |\n       X--------+--------+--------+------X\n                | \
    \                |\n     +----------+---+         +---+----------+\n     |   \
    \ Node B    |         |   Router C   |\n     | (default->A) |         +-------+------+\n\
    \     +--------------+                .-.\n                                  ,-(\
    \  _)-.\n                               .-(_ IPv6  )-.\n                     \
    \        (__    EUN      )\n                                `-(______)-'\n   \
    \                           +-------+------+\n                              |\
    \    Node D    |\n                              +--------------+\n           \
    \ Figure 1: Traditional Multi-Access Link Redirection\n   Figure 1 shows a traditional\
    \ multi-access link redirection scenario.\n   In this figure, node ('B') is provisioned\
    \ with only a default route\n   with router ('A') as the next hop.  Router ('A'),\
    \ in turn, has a more\n   specific route that lists router ('C') as the next-hop\
    \ neighbor on\n   the link for the End User Network (EUN) attached to node ('D').\n\
    \   If node ('B') has a packet to send to node ('D'), node ('B') is\n   obliged\
    \ to send its initial packets via router ('A').  Router ('A')\n   then forwards\
    \ the packet to router ('C') and also returns a\n   redirection control message\
    \ to inform ('B') that ('C') is, in fact,\n   an on-link neighbor that is closer\
    \ to the final destination ('D').\n   After receiving the redirection control\
    \ message, node ('B') can place\n   a more specific route in its forwarding table\
    \ so that future packets\n   destined to node ('D') can be sent directly via router\
    \ ('C'), as\n   shown in Figure 2.\n                  +--------------+\n     \
    \             |   Router A   |\n                  |    (D->C)    |\n         \
    \         +--------------+\n                         |\n       X--------+--------+--------+------X\n\
    \                |                 |\n     +----------+---+         +---+----------+\n\
    \     |    Node B    |         |   Router C   |\n     | (default->A) |       \
    \  +-------+------+\n     |    (D->C)    |                .-.\n     +--------------+\
    \             ,-(  _)-.\n                               .-(_ IPv6  )-.\n     \
    \                        (__    EUN      )\n                                `-(______)-'\n\
    \                              +-------+------+\n                            \
    \  |    Node D    |\n                              +--------------+\n        \
    \    Figure 2: More Specific Route Following Redirection\n   This traditional\
    \ redirection can provide a useful route optimization,\n   since the triangular\
    \ path from the ingress link neighbor, to the\n   intermediate router, and finally\
    \ to the egress link neighbor may be\n   considerably longer than the direct path\
    \ from ingress to egress.\n   However, ordinary redirection may lead to operational\
    \ issues on\n   certain link types and/or in certain deployment scenarios.\n \
    \  For example, when an ingress link neighbor accepts an ordinary\n   redirection\
    \ control message, it has no way of knowing whether the\n   egress link neighbor\
    \ is ready and willing to accept packets directly\n   without forwarding through\
    \ an intermediate router.  Likewise, the\n   egress has no way of knowing that\
    \ the ingress is authorized to\n   forward packets from the claimed network-layer\
    \ source address.  (This\n   is especially important for very large links, since\
    \ any node on the\n   link can spoof the network-layer source address with low\
    \ probability\n   of detection even if the link-layer source address cannot be\n\
    \   spoofed.)  Additionally, the ingress would have no way of knowing\n   whether\
    \ the direct path to the egress has failed, nor whether the\n   final destination\
    \ has moved away from the egress to some other\n   network attachment point.\n\
    \   Therefore, a new approach is required that can enable redirection\n   signaling\
    \ from the egress to the ingress link node under the\n   mediation of a trusted\
    \ intermediate router.  The mechanism is\n   asymmetric (since only the forward\
    \ direction from the ingress to the\n   egress is optimized) and extended (since\
    \ the redirection extends\n   forward to the egress before reaching back to the\
    \ ingress).  This\n   document therefore introduces an Asymmetric Extended Route\n\
    \   Optimization (AERO) capability that addresses the issues.\n   While the AERO\
    \ mechanisms were initially designed for the specific\n   purpose of NBMA tunnel\
    \ virtual interfaces (e.g., see [RFC2529],\n   [RFC5214], [RFC5569], and [VET]),\
    \ they can also be applied to any\n   multiple access link types that support\
    \ redirection.  The AERO\n   techniques are discussed herein with reference to\
    \ IPv6\n   [RFC2460][RFC4861][RFC4862][RFC3315]; however, they can also be\n \
    \  applied to any other network-layer protocol (e.g., IPv4\n   [RFC0791][RFC0792][RFC2131],\
    \ etc.) that provides a redirection\n   service (details of operation for other\
    \ network-layer protocols are\n   out of scope).\n   This document is an Experimental\
    \ RFC; therefore, it does not seek to\n   define a new standard for the Internet.\
    \  Experimental status instead\n   of Standards Track has been used since the\
    \ document proposes a new\n   and different dynamic routing mechanism.  Experimentation\
    \ will focus\n   on candidate multi-access link types that can connect large numbers\n\
    \   of neighboring nodes where the use of existing dynamic routing\n   protocols\
    \ may be impractical.  Examples include NBMA tunnel virtual\n   links, large bridged\
    \ campus LANs, etc.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The terminology in the normative references applies; the\
    \ following\n   terms are defined within the scope of this document:\n   AERO\
    \ link\n      any link (either physical or virtual) over which the AERO\n    \
    \  mechanisms can be applied.  (For example, a virtual overlay of\n      tunnels\
    \ can serve as an AERO link.)\n   AERO interface\n      a node's attachment to\
    \ an AERO link.\n   AERO node\n      a router or host that is connected to an\
    \ AERO link and that\n      participates in the AERO protocol on that link.\n\
    \   intermediate AERO router (\"intermediate router\")\n      a router that configures\
    \ an advertising router interface on an\n      AERO link over which it can provide\
    \ default forwarding and\n      redirection services for other AERO nodes.\n \
    \  edge AERO router (\"edge router\")\n      a router that configures a non-advertising\
    \ router interface on an\n      AERO link over which it can connect End User Networks\
    \ (EUNs) to\n      the AERO link.\n   AERO host\n      a simple host on an AERO\
    \ link.\n   ingress AERO node (\"ingress node\")\n      a node that injects packets\
    \ into an AERO link.\n   egress AERO node (\"egress node\")\n      a node that\
    \ receives packets from an AERO link.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Motivation
  contents:
  - "3.  Motivation\n   AERO was designed to operate as an on-demand route optimization\n\
    \   function for nodes attached to a single multi-access link, i.e.,\n   similar\
    \ to the standard IPv6 redirection mechanism based on ICMPv6\n   messaging [RFC4443][RFC4861].\
    \  However, AERO differs in that the\n   target of the redirection first receives\
    \ a pre-authorization\n   notification, after which it returns route optimization\
    \ information\n   to the source of the original packet.  This scenario calls into\n\
    \   question whether a standard dynamic routing protocol could be used\n   instead\
    \ of AERO, but a number of considerations indicate that\n   standard routing protocols\
    \ may be poorly suited for the use cases\n   AERO was designed to address.\n \
    \  First, AERO is designed to work on very large multiple access links\n   that\
    \ may connect a mix of many thousands of routers and hosts.\n   Traditional proactive\
    \ dynamic routing protocols such as OSPF, IS-IS,\n   RIP, OLSR (Optimized Link\
    \ State Routing), and TBRPF (Topology\n   Dissemination Based on Reverse-Path\
    \ Forwarding) may be inefficient in\n   such environments due to the control message\
    \ overhead scaling when\n   large numbers of routers are present and/or when link\
    \ capacity is\n   low.\n   Second, AERO is designed to work on-demand of data\
    \ packet arrival,\n   but it only seeks to discover neighbors on the same link\
    \ and not\n   distant nodes that may be located many link hops away.  Reactive\n\
    \   dynamic routing protocols such as Ad hoc On-Demand Distance Vector\n   (AODV)\
    \ and Dynamic Source Routing (DSR) also operate on-demand;\n   however, they flood\
    \ specialized route discovery messages that reach\n   all nodes on the link and\
    \ may further traverse multiple link hops\n   before a route reply is received.\
    \  This requires a multicast-capable\n   network and does not ensure delivery\
    \ of the original data packet,\n   which may be dropped or delayed during route\
    \ discovery.\n   Additionally, AERO is designed to override an existing route\
    \ to a\n   destination if the existing route directs traffic along a sub-optimal\n\
    \   path via an extraneous router on the shared link.  AERO nodes send\n   data\
    \ packets over a preexisting working route, and they may\n   subsequently receive\
    \ notification of a better route based on route\n   optimization feedback from\
    \ a trusted on-link neighbor.  This stands\n   in contrast to on-demand routing\
    \ protocols that were designed to\n   operate when no preexisting working routes\
    \ are present and that\n   multicast explicit route request messages to receive\
    \ a route reply\n   rather than simply unicast forwarding the data packet via\
    \ a\n   preexisting route.\n   Finally, AERO requires less control message and/or\
    \ processing\n   overhead than standard dynamic routing protocols on links for\
    \ which\n   the number of routes that must be maintained by each router is far\n\
    \   smaller than the total number of routers on the link, and the routes\n   maintained\
    \ by each router may be changing over time.  For example, on\n   a link that connects\
    \ N nodes, it will often be the case that each\n   node will only communicate\
    \ with a small number of link neighbors, and\n   the set of neighbors may change\
    \ dynamically over time.  Therefore,\n   the number of active neighbor pairs on\
    \ the link is V*N (where V is a\n   small variable number) instead of N**2.  This\
    \ is especially important\n   on very large links, e.g., for values of N such\
    \ as 1,000 or more.\n"
- title: 4.  Example Use Cases
  contents:
  - "4.  Example Use Cases\n   AERO was designed to satisfy numerous operational use\
    \ cases.  As a\n   first example, a hypothetical major airline has deployed an\
    \ overlay\n   network on top of the global Internet to track the aircraft in its\n\
    \   fleet.  The global Internet therefore acts as the \"link\" over which\n  \
    \ the overlay network is configured.  Each aircraft acts as a mobile\n   router\
    \ that fronts for an internal network that includes various\n   devices controlled\
    \ and monitored by the airline.  However, it would\n   be impractical for each\
    \ aircraft to track the changing locations of\n   all other aircraft in the fleet\
    \ due to control message overhead on\n   limited capacity communication links.\n\
    \   In this example, an aircraft ('A') en route to its destination needs\n   to\
    \ report its ETA and communicate passenger itineraries to other en\n   route aircraft\
    \ that will be servicing passenger connections.  ('A')\n   knows the overlay network\
    \ addresses of the other aircraft, but does\n   not know the current underlay\
    \ address mappings.  ('A') sends its\n   initial messages targeted to the other\
    \ aircraft via an airline\n   central dispatch router ('D'), which may be located\
    \ in a far away\n   location.  ('D') forwards the messages, but also initiates\
    \ the AERO\n   redirection procedure to step out of the triangular path and allow\n\
    \   direct aircraft-to-aircraft communications.\n   In a second example, Mobile\
    \ Ad hoc Networks (MANETs) are often\n   deployed in environments with a high\
    \ degree of mobility, attrition,\n   and very limited wireless communications\
    \ link bandwidth.  Such\n   environments typically also require the use of network-layer\
    \ security\n   mechanisms that view the MANET as a \"link\" over which encrypted\n\
    \   messages are forwarded in an overlay network.  In such environments,\n   a\
    \ dynamic routing protocol running in the overlay network may serve\n   to add\
    \ unacceptable additional congestion to the already overtaxed\n   wireless links.\
    \  In that case, the AERO route optimization mechanism\n   can eliminate costly\
    \ extraneous routing hops without imparting\n   additional control message overhead.\n\
    \   In a further example, a large campus LAN that is joined by Layer 2\n   (L2)\
    \ bridges may connect many thousands of routers and hosts that\n   appear to share\
    \ a single common multi-access link.  In that case, the\n   AERO mechanisms can\
    \ be applied to satisfy the necessary intra-link\n   route optimization functions\
    \ without employing an adjunct dynamic\n   routing protocol that may be inefficient\
    \ for reasons mentioned above.\n"
- title: 5.  Requirements
  contents:
  - "5.  Requirements\n   The route optimization mechanism must satisfy the following\n\
    \   requirements:\n   Req 1:  Off-load traffic from performance-critical gateways.\n\
    \           The mechanism must offload sustained transit though an\n         \
    \  intermediate AERO router that would otherwise become a\n           traffic\
    \ concentrator.\n   Req 2:  Support route optimization.\n           The ingress\
    \ AERO node should be able to send packets directly\n           to the egress\
    \ node without forwarding through an intermediate\n           router for route\
    \ optimization purposes.\n   Req 3:  Support scaling.\n           For scaling\
    \ purposes, support interworking and control\n           message forwarding between\
    \ multiple intermediate routers (see\n           Appendix A).\n   Req 4:  Do not\
    \ circumvent ingress filtering.\n           The mechanism must not open an attack\
    \ vector where network-\n           layer source address spoofing is enabled even\
    \ when link-layer\n           source address spoofing is disabled.\n   Req 5:\
    \  Do not expose packets to loss due to filtering.\n           The ingress AERO\
    \ node must have a way of knowing that the\n           egress AERO node will accept\
    \ its forwarded packets.\n   Req 6:  Do not expose packets to loss due to path\
    \ failure.\n           The ingress AERO node must have a way of discovering whether\n\
    \           the AERO egress node has gone unreachable on the route\n         \
    \  optimized path.\n   Req 7:  Do not introduce routing loops.\n           Intermediate\
    \ routers must not invoke a route optimization\n           that would cause a\
    \ routing loop to form.\n   Req 8:  Support mobility.\n           The mechanism\
    \ must continue to work even if the final\n           destination node/network\
    \ moves from a first egress node and\n           re-associates with a second egress\
    \ node.\n   Req 9:  Support link layer address changes.\n           The mechanism\
    \ must continue to work even if the Layer 2\n           addresses of ingress and/or\
    \ egress AERO nodes change.\n   Req 10: Support network renumbering.\n       \
    \    The mechanism must provide graceful transition when an AERO\n           node's\
    \ attached EUN is renumbered.\n"
- title: 6.  Asymmetric Extended Route Optimization (AERO)
  contents:
  - "6.  Asymmetric Extended Route Optimization (AERO)\n   The following sections\
    \ specify an Asymmetric Extended Route\n   Optimization (AERO) capability that\
    \ fulfills the requirements\n   specified in Section 5.\n"
- title: 6.1.  AERO Link Dynamic Routing
  contents:
  - "6.1.  AERO Link Dynamic Routing\n   In many AERO link use case scenarios (e.g.,\
    \ small enterprise\n   networks, small and stable MANETs, etc.), routers can engage\
    \ in a\n   traditional dynamic routing protocol so that routing/forwarding\n \
    \  tables can be populated and standard forwarding between routers can\n   be\
    \ used.  In other scenarios (e.g., large enterprise/ISP networks,\n   cellular\
    \ service provider networks, dynamic MANETs, etc.), this might\n   be impractical\
    \ due to routing protocol control message scaling\n   issues.\n   When a traditional\
    \ dynamic routing protocol cannot be used, the\n   mechanisms specified in this\
    \ section can provide a useful on-demand\n   route discovery capability.  When\
    \ both traditional dynamic routing\n   protocols and the AERO mechanism are active\
    \ on the same link, routes\n   discovered by the dynamic routing protocol should\
    \ take precedence\n   over those discovered by AERO.\n"
- title: 6.2.  AERO Node Behavior
  contents:
  - "6.2.  AERO Node Behavior\n   The following sections discuss characteristics of\
    \ nodes attached to\n   links over which AERO can be used.\n"
- title: 6.2.1.  AERO Node Types
  contents:
  - "6.2.1.  AERO Node Types\n   Intermediate AERO routers configure their AERO link\
    \ interfaces as\n   advertising router interfaces (see [RFC4861], Section 6.2.2);\n\
    \   therefore, they may send Router Advertisement (RA) messages that\n   include\
    \ non-zero Router Lifetimes.\n   Edge AERO routers configure their AERO link interfaces\
    \ as non-\n   advertising router interfaces.\n   AERO hosts configure their AERO\
    \ link interfaces as simple host\n   interfaces.\n"
- title: 6.2.2.  AERO Host Behavior
  contents:
  - "6.2.2.  AERO Host Behavior\n   AERO hosts observe the IPv6 host requirements\
    \ defined in [RFC6434],\n   except that AERO hosts also engage in the AERO route\
    \ optimization\n   procedure as specified in Section 6.4.\n"
- title: 6.2.3.  Edge AERO Router Behavior
  contents:
  - "6.2.3.  Edge AERO Router Behavior\n   Edge AERO routers observe the IPv6 router\
    \ requirements defined in\n   [RFC6434] except that they act as \"hosts\" on their\
    \ non-advertising\n   AERO link router interfaces in the same fashion as for IPv6\
    \ Customer\n   Premises Equipment (CPE) routers [RFC6204].  Edge routers can then\n\
    \   acquire managed prefix delegations aggregated by an intermediate\n   router\
    \ through the use of, e.g., DHCPv6 Prefix Delegation [RFC3633],\n   administrative\
    \ configuration, etc.\n   After the edge router acquires prefixes, it can sub-delegate\
    \ them to\n   nodes and links within its attached EUNs, then it can forward any\n\
    \   outbound packets coming from its EUNs via the intermediate router.\n   The\
    \ edge router also engages in the AERO route optimization procedure\n   as specified\
    \ in Section 6.4.\n"
- title: 6.2.4.  Intermediate AERO Router Behavior
  contents:
  - "6.2.4.  Intermediate AERO Router Behavior\n   Intermediate AERO routers observe\
    \ the IPv6 router requirements\n   defined in [RFC6434] and respond to Router\
    \ Solicitation (RS) messages\n   from AERO hosts and edge routers on their advertising\
    \ AERO link\n   router interfaces by returning an RA message.  Intermediate routers\n\
    \   further configure a DHCP relay/server function on their AERO links\n   and/or\
    \ provide an administrative interface for delegation of network-\n   layer addresses\
    \ and prefixes.\n   When the intermediate router completes a stateful network-layer\n\
    \   address or prefix delegation transaction (e.g., as a DHCPv6 relay/\n   server,\
    \ etc.), it establishes forwarding table entries that list the\n   link-layer\
    \ address of the client AERO node as the link-layer address\n   of the next hop\
    \ toward the delegated network-layer addresses/\n   prefixes.\n   When the intermediate\
    \ router forwards a packet out the same AERO\n   interface on which it arrived,\
    \ it initiates an AERO route\n   optimization procedure as specified in Section\
    \ 6.4.\n"
- title: 6.3.  AERO Reference Operational Scenario
  contents:
  - "6.3.  AERO Reference Operational Scenario\n   Figure 3 depicts the AERO reference\
    \ operational scenario.  The figure\n   shows an intermediate AERO router ('A'),\
    \ two edge AERO routers ('B',\n   'D'), an AERO host ('F'), and three ordinary\
    \ IPv6 hosts ('C', 'E',\n   'G'):\n                    .-(::::::::)\n        \
    \         .-(::: IPv6 :::)-.   +-------------+\n                (:::: Internet\
    \ ::::)--|    Host G   |\n                 `-(::::::::::::)-'   +-------------+\n\
    \                    `-(::::::)-'       2001:db8:3::1\n                      \
    \   |\n                  +--------------+        +--------------+\n          \
    \        | Intermediate |        |  AERO Host F |\n                  | AERO Router\
    \ A|        | (default->A) |\n                  | (C->B; E->D) |        +--------------+\n\
    \                  +--------------+          2001:db8:2:1\n                  \
    \     L3(A)                   L3(F)\n                       L3(A)            \
    \       L2(F)\n                         |                       |\n       X-----+-----------+-----------+-----------+---X\n\
    \             |       AERO Link       |\n            L2(B)                  L2(D)\n\
    \            L3(B)                  L3(D)\n     +--------------+         +--------------+\
    \          .-.\n     |  AERO Edge   |         |  AERO Edge   |       ,-(  _)-.\n\
    \     |   Router B   |         |   Router D   |    .-(_ IPv6  )-.\n     | (default->A)\
    \ |         | (default->A) |--(__    EUN      )\n     +--------------+       \
    \  +--------------+     `-(______)-'\n     2001:db8:0::/48           2001:db8:1::/48\
    \           |\n             |                                     2001:db8:1::1\n\
    \            .-.                                   +-------------+\n         ,-(\
    \  _)-.      2001:db8:0::1             |    Host E   |\n      .-(_ IPv6  )-. \
    \  +-------------+            +-------------+\n    (__    EUN      )--|    Host\
    \ C   |\n       `-(______)-'    +-------------+\n               Figure 3: AERO\
    \ Reference Operational Scenario\n   In Figure 3, the intermediate AERO router\
    \ ('A') connects to the AERO\n   link and connects to the IPv6 Internet, either\
    \ directly or via other\n   IPv6 routers (not shown).  Intermediate router ('A')\
    \ configures an\n   AERO link interface with a link-local network-layer address\
    \ L3(A) and\n   with link-layer address L2(A).  The intermediate router ('A')\
    \ next\n   arranges to add L2(A) to a published list of valid intermediate\n \
    \  routers for the link.\n   AERO node ('B') is an AERO edge router that connects\
    \ to the AERO link\n   via an interface with link-local network-layer address\
    \ L3(B) and with\n   link-layer address L2(B).  Node ('B') configures a default\
    \ route with\n   next-hop network-layer address L3(A) via the AERO interface,\
    \ and it\n   assigns the network-layer prefix 2001:db8:0::/48 to its attached\
    \ EUN\n   link.  IPv6 host ('C') attaches to the EUN, and it configures the\n\
    \   network-layer address 2001:db8:0::1.\n   AERO node ('D') is an AERO edge router\
    \ that connects to the AERO link\n   via an interface with link-local network-layer\
    \ address L3(D) and with\n   link-layer address L2(D).  Node ('D') configures\
    \ a default route with\n   next-hop network-layer address L3(A) via the AERO interface,\
    \ and it\n   assigns the network-layer prefix 2001:db8:1::/48 to its attached\
    \ EUN\n   link.  IPv6 host ('E') attaches to the EUN, and it configures the\n\
    \   network-layer address 2001:db8:1::1.\n   AERO host ('F') connects to the AERO\
    \ link via an interface with link-\n   local network-layer address L3(F) and with\
    \ link-layer address L2(F).\n   Host ('F') configures a default route with next-hop\
    \ network-layer\n   address L3(A) via the AERO interface, and it assigns the network-\n\
    \   layer address 2001:db8:2::1 to the AERO interface.\n   Finally, IPv6 host\
    \ ('G') connects to an IPv6 network outside of the\n   AERO link domain.  Host\
    \ ('G') configures its IPv6 interface in a\n   manner specific to its attached\
    \ IPv6 link, and it assigns the\n   network-layer address 2001:db8:3::1 to its\
    \ IPv6 link interface.\n   In these arrangements, intermediate router ('A') must\
    \ maintain state\n   that associates the delegated network-layer addresses/prefixes\
    \ with\n   the link-local network-layer addresses of the correct edge routers\n\
    \   and/or hosts on the AERO link.  The nodes must, in turn, maintain at\n   least\
    \ a default route that points to intermediate router ('A'), and\n   they can discover\
    \ more-specific routes either via a proactive dynamic\n   routing protocol or\
    \ via the AERO mechanisms specified in Section 6.4.\n"
- title: 6.4.  AERO Specification
  contents:
  - "6.4.  AERO Specification\n   Section 6.3 describes the AERO reference operational\
    \ scenario.  We\n   now discuss the operation and protocol details of AERO with\
    \ respect\n   to this reference scenario.\n"
- title: 6.4.1.  Traditional Redirection Approaches
  contents:
  - "6.4.1.  Traditional Redirection Approaches\n   With reference to Figure 3, when\
    \ the IPv6 source host ('C') sends a\n   packet to an IPv6 destination host ('E'),\
    \ the packet is first\n   forwarded via the EUN to ingress AERO node ('B').  The\
    \ ingress node\n   ('B') then forwards the packet over its AERO interface to\n\
    \   intermediate router ('A'), which then forwards the packet to egress\n   AERO\
    \ node ('D'), where the packet is finally forwarded to the IPv6\n   destination\
    \ host ('E').  When intermediate router ('A') forwards the\n   packet back out\
    \ on its advertising AERO interface, it must arrange to\n   redirect ingress node\
    \ ('B') toward egress node ('D') as a better\n   next-hop node on the AERO link\
    \ that is closer to the final\n   destination.  However, this redirection process\
    \ should only occur if\n   there is assurance that both the ingress and egress\
    \ nodes are willing\n   participants.\n   Consider a first alternative in which\
    \ intermediate router ('A')\n   informs ingress node ('B') only and does not inform\
    \ egress node ('D')\n   (i.e., \"traditional redirection\").  In that case, the\
    \ egress node has\n   no way of knowing that the ingress is authorized to forward\
    \ packets\n   from their claimed source network-layer addresses, and it may simply\n\
    \   elect to drop the packets.  Also, the ingress node has no way of\n   knowing\
    \ whether the egress is performing some form of source address\n   filtering that\
    \ would reject packets arriving from a node other than a\n   trusted default router,\
    \ nor whether the egress is even reachable via\n   a direct path that does not\
    \ involve the intermediate router.\n   Finally, the ingress node has no way of\
    \ knowing whether the final\n   destination has moved away from the egress node.\n\
    \   Consider a second alternative in which intermediate router ('A')\n   informs\
    \ both ingress node ('B') and egress node ('D') separately, via\n   independent\
    \ redirection control messages (i.e., \"augmented\n   redirection\").  In that\
    \ case, several conditions can occur that could\n   result in communication failures.\
    \  First, if the ingress receives the\n   redirection control message but the\
    \ egress does not, subsequent\n   packets sent by the ingress could be dropped\
    \ due to filtering since\n   the egress would not have neighbor state to verify\
    \ their source\n   network-layer addresses.  Second, if the egress receives the\n\
    \   redirection control message but the ingress does not, subsequent\n   packets\
    \ sent in the reverse direction by the egress would be lost.\n   Finally, timing\
    \ issues surrounding the establishment and garbage\n   collection of neighbor\
    \ state at the ingress and egress nodes could\n   yield unpredictable behavior.\
    \  For example, unless the timing were\n   carefully coordinated through some\
    \ form of synchronization loop,\n   there would invariably be instances in which\
    \ one node has the correct\n   neighbor state and the other node does not resulting\
    \ in non-\n   deterministic packet loss.\n   Since neither of these alternatives\
    \ can satisfy the requirements\n   listed in Section 5, a new redirection technique\
    \ (i.e., \"AERO\n   redirection\") is needed.\n"
- title: 6.4.2.  AERO Concept of Operations
  contents:
  - "6.4.2.  AERO Concept of Operations\n   AERO redirection is used on links for\
    \ which the traditional\n   redirection approaches described in Section 6.4.1\
    \ are insufficient to\n   satisfy all requirements.  We now discuss the concept\
    \ of operations\n   for this new approach.\n   Again, with reference to Figure\
    \ 3, when source host ('C') sends a\n   packet to destination host ('E'), the\
    \ packet is first forwarded over\n   the source host's attached EUN to ingress\
    \ node ('B'), which then\n   forwards the packet via its AERO interface to intermediate\
    \ router\n   ('A').\n   Using AERO redirection, intermediate router ('A') then\
    \ forwards the\n   packet out the same AERO interface toward egress node ('D')\
    \ and also\n   sends an AERO \"Predirect\" message forward to the egress node\
    \ as\n   specified in Section 6.4.6.  The AERO Predirect message includes the\n\
    \   identity of ingress node ('B') as well as information that egress\n   node\
    \ ('D') can use to determine the longest-match prefixes that cover\n   the source\
    \ and destination network-layer addresses of the packet that\n   triggered the\
    \ predirection event.  After egress node ('D') receives\n   the AERO Predirect\
    \ message, it process the message and returns an\n   AERO Redirect message to\
    \ the intermediate router ('A') as specified\n   in Section 6.4.7.  (During the\
    \ process, it also creates or updates\n   neighbor state for ingress node ('B'),\
    \ and retains this (src, dst)\n   \"prefix pair\" as ingress filtering information\
    \ to accept future\n   packets using addresses matched by the prefixes from ingress\
    \ node\n   ('B').)\n   When the intermediate router ('A') receives the AERO Redirect\n\
    \   message, it processes the message and forwards it on to ingress node\n   ('B')\
    \ as specified in Section 6.4.8.  The message includes the\n   identity of egress\
    \ node ('D') as well as information that ingress\n   node ('B') can use to determine\
    \ the longest-match prefixes that cover\n   the source and destination network-layer\
    \ addresses of the packet that\n   triggered the redirection event.  After ingress\
    \ node ('B') receives\n   the AERO Redirect message, it processes the message\
    \ as specified in\n   Section 6.4.9.  (During the process, it also creates or\
    \ updates\n   neighbor state for egress node ('D'), and retains this prefix pair\
    \ as\n   forwarding information to forward future packets using addresses\n  \
    \ matched by the prefixes to the egress node ('D').)\n   Following the above AERO\
    \ Predirect/Redirect message exchange,\n   forwarding of packets with source and\
    \ destination network-layer\n   addresses covered by the longest-match prefix\
    \ pair is enabled in the\n   forward direction from ingress node ('B') to egress\
    \ node ('D').  The\n   mechanisms that enable this exchange are specified in the\
    \ following\n   sections.\n"
- title: 6.4.3.  Conceptual Data Structures and Protocol Constants
  contents:
  - "6.4.3.  Conceptual Data Structures and Protocol Constants\n   Each AERO node\
    \ maintains a per-AERO interface conceptual neighbor\n   cache that includes an\
    \ entry for each neighbor it communicates with\n   on the AERO link, the same\
    \ as for any IPv6 interface (see [RFC4861]).\n   Each AERO interface neighbor\
    \ cache entry further maintains two lists\n   of (src, dst) prefix pairs.  The\
    \ AERO node adds a prefix pair to the\n   ACCEPT list if it has been informed\
    \ by a trusted intermediate router\n   that it is safe to accept packets from\
    \ the neighbor using network-\n   layer source and destination addresses covered\
    \ by the prefix pair.\n   The AERO node adds a prefix pair to the FORWARD list\
    \ if it has been\n   informed by a trusted intermediate router that it is permitted\
    \ to\n   forward packets to the neighbor using network-layer addresses covered\n\
    \   by the prefix pair.\n   When the node adds a prefix pair to a neighbor cache\
    \ entry ACCEPT\n   list, it also sets an expiration timer for the prefix pair\
    \ to\n   ACCEPT_TIME seconds.  When the node adds a prefix pair to a neighbor\n\
    \   cache entry FORWARD list, it also sets an expiration timer for the\n   prefix\
    \ pair to FORWARD_TIME seconds.  The node further maintains a\n   keepalive interval\
    \ KEEPALIVE_TIME used to limit the number of\n   keepalive control messages. \
    \ Finally, the node maintains a constant\n   value MAX_RETRY to limit the number\
    \ of keepalives sent when a\n   neighbor has gone unreachable.\n   It is RECOMMENDED\
    \ that FORWARD_TIME be set to the default constant\n   value 30 seconds to match\
    \ the default REACHABLE_TIME value specified\n   for IPv6 neighbor discovery [RFC4861].\n\
    \   It is RECOMMENDED that ACCEPT_TIME be set to the default constant\n   value\
    \ 40 seconds to allow a 10 second window so that the AERO\n   redirection procedure\
    \ can converge before the ACCEPT_TIME timer\n   decrements below FORWARD_TIME.\n\
    \   It is RECOMMENDED that KEEPALIVE_TIME be set to the default constant\n   value\
    \ 5 seconds to providing timely reachability verification without\n   causing\
    \ excessive control message overhead.\n   It is RECOMMENDED that MAX_RETRY be\
    \ set to 3 the same as described\n   for IPv6 neighbor discovery address resolution\
    \ in Section 7.3.3 of\n   [RFC4861].\n   Different values for FORWARD_TIME, ACCEPT_TIME,\
    \ KEEPALIVE_TIME, and\n   MAX_RETRY MAY be administratively set, if necessary,\
    \ to better match\n   the AERO link's performance characteristics; however, if\
    \ different\n   values are chosen, all nodes on the link MUST consistently configure\n\
    \   the same values.  ACCEPT_TIME SHOULD further be set to a value that\n   is\
    \ sufficiently longer than FORWARD time to allow the AERO\n   redirection procedure\
    \ to converge.\n"
- title: 6.4.4.  Data Origin Authentication
  contents:
  - "6.4.4.  Data Origin Authentication\n   AERO nodes MUST employ a data origin authentication\
    \ check for the\n   packets they receive on an AERO interface.  In particular,\
    \ the node\n   considers the network-layer source address correct for the link-layer\n\
    \   source address if at least one of the following is true:\n   o  the network-layer\
    \ source address is an on-link address that embeds\n      the link-layer source\
    \ address, or\n   o  the network-layer source address is explicitly linked to\
    \ the link-\n      layer source address through per-neighbor state, or\n   o \
    \ the link-layer source address is the address of a trusted\n      intermediate\
    \ AERO router.\n   When the AERO node receives a packet on an AERO interface,\
    \ it\n   processes the packet further if it satisfies one of these data origin\n\
    \   authentication conditions; otherwise, it drops the packet.\n   Note that on\
    \ links in which link-layer address spoofing is possible,\n   AERO nodes may require\
    \ additional securing mechanisms.  To address\n   this, future work will define\
    \ a strong data origin authentication\n   scheme such as the use of digital signatures.\n"
- title: 6.4.5.  AERO Redirection Message Format
  contents:
  - "6.4.5.  AERO Redirection Message Format\n   AERO Redirect/Predirect messages\
    \ use the same format as for ICMPv6\n   Redirect messages depicted in Section\
    \ 4.5 of [RFC4861]; however, the\n   messages are encapsulated in a UDP header\
    \ [RFC0768] to distinguish\n   them from ordinary ICMPv6 Redirect messages.  AERO\
    \ Redirect messages\n   therefore require a new UDP service port number 'AERO_PORT'.\n\
    \   AERO Redirect/Predirect messages are formatted as shown in Figure 4:\n   \
    \ 0                   1                   2                   3\n    0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Type (=0)   |   Code (=0)   |         Checksum (=0)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |P|                          Reserved                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \         Target Address                          +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \       Destination Address                       +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Options ...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n             Figure 4: AERO\
    \ Redirect/Predirect Message Format\n   The AERO Redirect/Predirect message sender\
    \ sets the 'Type' field to 0\n   (since this is not an actual ICMPv6 message),\
    \ and it also sets the\n   'Checksum' field to 0 (since the UDP checksum will\
    \ provide protection\n   for the entire packet).  The sender further sets the\
    \ 'P' bit to 1 if\n   this is a 'Predirect' message and sets the 'P' bit to 0\
    \ if this is a\n   'Redirect' message (as described below).\n   The sender then\
    \ encapsulates the AERO Redirect message in IP/UDP\n   headers as shown in Figure\
    \ 5:\n   +--------------------+\n   ~     IP header      ~\n   +--------------------+\n\
    \   ~     UDP header     ~\n   +--------------------+\n   |                  \
    \  |\n   ~    AERO Redirect   ~\n   ~       Message      ~\n   |             \
    \       |\n   +--------------------+\n              Figure 5: AERO Message UDP\
    \ Encapsulation Format\n   The AERO Redirect/Predirect message sender sets the\
    \ UDP destination\n   port number to 'AERO_PORT' and sets the UDP source port\
    \ number to a\n   (pseudo-)random value.  The sender next sets the UDP length\
    \ field to\n   the length of the UDP message, then calculates the checksum across\n\
    \   the message and writes the value into the UDP checksum field.  Next,\n   the\
    \ sender sets the IP TTL/Hop-limit field to a small integer value\n   chosen to\
    \ provide a quick exit from any temporal routing loops.  It\n   is RECOMMENDED\
    \ that the sender set IP TTL/Hop-limit to the value 8\n   unless it has better\
    \ knowledge of the AERO link characteristics.\n"
- title: 6.4.6.  Sending Predirects
  contents:
  - "6.4.6.  Sending Predirects\n   When an intermediate AERO router forwards a packet\
    \ out the same AERO\n   interface that it arrived on, the router sends an AERO\
    \ Predirect\n   message forward toward the egress AERO node instead of sending\
    \ an\n   ICMPv6 Redirect message back to the ingress AERO node.\n   In the reference\
    \ operational scenario, when the intermediate router\n   ('A') forwards a packet\
    \ sent by the ingress node ('B') toward the\n   egress node ('D'), it also sends\
    \ an AERO Predirect message forward\n   toward the egress, subject to rate limiting\
    \ (see Section 8.2 of\n   [RFC4861]).  The intermediate router ('A') prepares\
    \ the AERO\n   Predirect message as follows:\n   o  the link-layer source address\
    \ is set to 'L2(A)' (i.e., the link-\n      layer address of the intermediate\
    \ router).\n   o  the link-layer destination address is set to 'L2(D)' (i.e.,\
    \ the\n      link-layer address of the egress node).\n   o  the network-layer\
    \ source address is set to 'L3(A)' (i.e., the\n      link-local network-layer\
    \ address of the intermediate router).\n   o  the network-layer destination address\
    \ is set to 'L3(D)' (i.e., the\n      link-local network-layer address of the\
    \ egress node).\n   o  the UDP destination port is set to 'AERO_PORT'.\n   o \
    \ the Target and Destination Addresses are both set to 'L3(B)'\n      (i.e., the\
    \ link-local network-layer address of the ingress node).\n   o  on links that\
    \ require stateful address mapping, the message\n      includes a Target Link\
    \ Layer Address Option (TLLAO) set to 'L2(B)'\n      (i.e., the link-layer address\
    \ of the ingress node).\n   o  the message includes a Route Information Option\
    \ (RIO) [RFC4191]\n      that encodes the ingress node's network-layer address/prefix\n\
    \      delegation that covers the network-layer source address of the\n      originating\
    \ packet.\n   o  the message includes a Redirected Header Option (RHO) that\n\
    \      contains the originating packet truncated to ensure that at least\n   \
    \   the network-layer header is included but the size of the message\n      does\
    \ not exceed 1280 bytes.\n   o  the 'P' bit is set to P=1.\n   The intermediate\
    \ router ('A') then sends the message forward to the\n   egress node ('D').\n"
- title: 6.4.7.  Processing Predirects and Sending Redirects
  contents:
  - "6.4.7.  Processing Predirects and Sending Redirects\n   When the egress node\
    \ ('D') receives an AERO Predirect message, it\n   accepts the message only if\
    \ it satisfies the data origin\n   authentication requirements specified in Section\
    \ 6.4.4.  The egress\n   further accepts the message only if it is willing to\
    \ serve as a\n   redirection target.\n   Next, the egress node ('D') validates\
    \ the message according to the\n   ICMPv6 Redirect message validation rules in\
    \ Section 8.1 of [RFC4861]\n   with the exception that the message includes a\
    \ Type value of 0, a\n   Checksum value of 0 and a link-local address in the ICMP\
    \ destination\n   field that differs from the destination address of the packet\
    \ header\n   encapsulated in the RHO.\n   In the reference operational scenario,\
    \ when the egress node ('D')\n   receives a valid AERO Predirect message, it either\
    \ creates or updates\n   a neighbor cache entry that stores the Target address\
    \ of the message\n   (i.e., the link-local network-layer address of the ingress\
    \ node\n   ('B')).  The egress node ('D') then records the prefix found in the\n\
    \   RIO along with its own prefix that matches the network-layer\n   destination\
    \ address in the packet header found in the RHO with the\n   neighbor cache entry\
    \ as an acceptable (src, dst) prefix pair.  The\n   egress node ('D') then adds\
    \ the prefix pair to the neighbor cache\n   entry ACCEPT list, and sets/resets\
    \ an expiration timer for the prefix\n   pair to ACCEPT_TIME seconds.  If the\
    \ timer later expires, the egress\n   node ('D') deletes the prefix pair.\n  \
    \ After processing the message, the egress node ('D') prepares an AERO\n   Redirect\
    \ message response as follows:\n   o  the link-layer source address is set to\
    \ 'L2(D)' (i.e., the link-\n      layer address of the egress node).\n   o  the\
    \ link-layer destination address is set to 'L2(A)' (i.e., the\n      link-layer\
    \ address of the intermediate router).\n   o  the network-layer source address\
    \ is set to 'L3(D)' (i.e., the\n      link-local network-layer address of the\
    \ egress node).\n   o  the network-layer destination address is set to 'L3(B)'\
    \ (i.e., the\n      link-local network-layer address of the ingress node).\n \
    \  o  the UDP destination port is set to 'AERO_PORT'.\n   o  the Target and the\
    \ Destination Addresses are both set to 'L3(D)'\n      (i.e., the link-local network-layer\
    \ address of the egress node).\n   o  on links that require stateful address mapping,\
    \ the message\n      includes a Target Link Layer Address Option (TLLAO) set to\n\
    \      'L2(D)'.\n   o  the message includes an RIO that encodes the egress node's\n\
    \      network-layer address/prefix delegation that covers the network-\n    \
    \  layer destination address of the originating packet.\n   o  the message includes\
    \ as much of the RHO copied from the\n      corresponding AERO Predirect message\
    \ as possible such that at\n      least the network-layer header is included but\
    \ the size of the\n      message does not exceed 1280 bytes.\n   o  the 'P' bit\
    \ is set to P=0.\n   After the egress node ('D') prepares the AERO Redirect message,\
    \ it\n   sends the message to the intermediate router ('A').\n"
- title: 6.4.8.  Forwarding Redirects
  contents:
  - "6.4.8.  Forwarding Redirects\n   When the intermediate router ('A') receives\
    \ an AERO Redirect message,\n   it accepts the message only if it satisfies the\
    \ data origin\n   authentication requirements specified in Section 6.4.4.  Next,\
    \ the\n   intermediate router ('A') validates the message the same as described\n\
    \   in Section 6.4.7.  Following validation, the intermediate router\n   ('A')\
    \ processes the Redirect, and then forwards a corresponding\n   Redirect on to\
    \ the ingress node ('B') as follows.\n   In the reference operational scenario,\
    \ the intermediate router ('A')\n   receives the AERO Redirect message from the\
    \ egress node ('D') and\n   prepares to forward a corresponding AERO Redirect\
    \ message to the\n   ingress node ('B').  The intermediate router ('A') then verifies\
    \ that\n   the RIO encodes a network-layer address/prefix that the egress node\n\
    \   ('D') is authorized to use, and it discards the message if\n   verification\
    \ fails.  Otherwise, the intermediate router ('A') changes\n   the link-layer\
    \ source address of the message to 'L2(A)', changes the\n   network-layer source\
    \ address of the message to the link-local\n   network-layer address 'L3(A)',\
    \ and changes the link-layer destination\n   address to 'L2(B)' .  The intermediate\
    \ router ('A') finally\n   decrements the IP TTL/Hop-limit and forwards the message\
    \ to the\n   ingress node ('B').\n"
- title: 6.4.9.  Processing Redirects
  contents:
  - "6.4.9.  Processing Redirects\n   When the ingress node ('B') receives an AERO\
    \ Redirect message (i.e.,\n   one with P=0), it accepts the message only if it\
    \ satisfies the data\n   origin authentication requirements specified in Section\
    \ 6.4.4.  Next,\n   the ingress node ('B') validates the message the same as described\
    \ in\n   Section 6.4.6.  Following validation, the ingress node ('B') then\n \
    \  processes the message as follows.\n   In the reference operational scenario,\
    \ when the ingress node ('B')\n   receives the AERO Redirect message, it either\
    \ creates or updates a\n   neighbor cache entry that stores the Target address\
    \ of the message\n   (i.e., the link-local network-layer address of the egress\
    \ node\n   'L3(D)').  The ingress node ('B') then records the (src, dst) prefix\n\
    \   pair associated with the triggering packet in the neighbor cache\n   entry\
    \ FORWARD list, i.e., it records its prefix that matches the\n   redirected packet's\
    \ network-layer source address and the prefix\n   listed in the RIO as the prefix\
    \ pair.  The ingress node ('B') then\n   sets/resets an expiration timer for the\
    \ prefix pair to FORWARD_TIME\n   seconds.  If the timer later expires, the ingress\
    \ node ('B') deletes\n   the entry.\n   Now, the ingress node ('B') has a neighbor\
    \ cache FORWARD list entry\n   for the prefix pair, and the egress node ('D')\
    \ has a neighbor cache\n   ACCEPT list entry for the prefix pair.  Therefore,\
    \ the ingress node\n   ('B') may forward ordinary network-layer data packets with\
    \ network-\n   layer source and destination addresses that match the prefix pair\n\
    \   directly to the egress node ('D') without forwarding through the\n   intermediate\
    \ router ('A').  Note that the ingress node must have a\n   way of informing the\
    \ network layer of a route that associates the\n   destination prefix with this\
    \ neighbor cache entry.  The manner of\n   establishing such a route (and deleting\
    \ it when it is no longer\n   necessary) is left to the implementation.\n   To\
    \ enable packet forwarding in the reverse direction, a separate AERO\n   redirection\
    \ operation is required that is the mirror-image of the\n   forward operation\
    \ described above but the link segments traversed in\n   the forward and reverse\
    \ directions may be different, i.e., the\n   operations are asymmetric.\n"
- title: 6.4.10.  Sending Periodic Predirect Keepalives
  contents:
  - "6.4.10.  Sending Periodic Predirect Keepalives\n   In order to prevent prefix\
    \ pairs from expiring while data packets are\n   actively flowing, the ingress\
    \ node ('B') can send AERO Predirect\n   messages directly to the egress node\
    \ ('D') as a \"keepalive\" to\n   solicit AERO Redirect messages.  The node should\
    \ send such keepalive\n   messages only when a data packet covered by the prefix\
    \ pair has been\n   sent recently, and should wait for at least KEEPALIVE_TIME\
    \ seconds\n   before sending each successive keepalive message in order to limit\n\
    \   control message overhead.\n   In the reference operational scenario, when\
    \ the ingress node ('B')\n   needs to refresh the FORWARD timer for a specific\
    \ prefix pair, it can\n   send an AERO Predirect message directly to the egress\
    \ node ('D')\n   prepared as follows:\n   o  the link-layer source address is\
    \ set to 'L2(B)' (i.e., the link-\n      layer address of the ingress node).\n\
    \   o  the link-layer destination address is set to 'L2(D)' (i.e., the\n     \
    \ link-layer address of the egress node).\n   o  the network-layer source address\
    \ is set to 'L3(B)' (i.e., the\n      link-local network-layer address of the\
    \ ingress node).\n   o  the network-layer destination address is set to 'L3(D)'\
    \ (i.e., the\n      link-local network-layer address of the egress node).\n  \
    \ o  the UDP destination port is set to 'AERO_PORT'.\n   o  the Predirect Target\
    \ and Destination Addresses are both set to\n      'L3(B)' (i.e., the link-local\
    \ network-layer address of the ingress\n      node).\n   o  the message includes\
    \ an RHO that contains the originating packet\n      truncated to ensure that\
    \ at least the network-layer header is\n      included but the size of the message\
    \ does not exceed 1280 bytes.\n   o  the 'P' bit is set to P=1.\n   When the egress\
    \ node ('D') receives the AERO Predirect message, it\n   validates the message\
    \ the same as described in Section 6.4.6.\n   Following validation, the egress\
    \ node ('D') then resets its ACCEPT\n   timer for the prefix pair that matches\
    \ the originating packet's\n   network-layer source and destination addresses\
    \ to ACCEPT_TIME\n   seconds, and it sends an AERO Redirect message directly to\
    \ the\n   ingress node ('B') prepared as follows:\n   o  the link-layer source\
    \ address is set to 'L2(D)' (i.e., the link-\n      layer address of the egress\
    \ node).\n   o  the link-layer destination address is set to 'L2(B)' (i.e., the\n\
    \      link-layer address of the ingress node).\n   o  the network-layer source\
    \ address is set to 'L3(D)' (i.e., the\n      link-local network-layer address\
    \ of the egress node).\n   o  the network-layer destination address is set to\
    \ 'L3(B)' (i.e., the\n      link-local network-layer address of the ingress node).\n\
    \   o  the UDP destination port is set to 'AERO_PORT'.\n   o  the Redirect Target\
    \ and Destination Addresses are both set to\n      'L3(D)' (i.e., the link-local\
    \ network-layer address of the egress\n      node).\n   o  the message includes\
    \ as much of the RHO copied from the\n      corresponding AERO Predirect message\
    \ as possible such that at\n      least the network-layer header is included but\
    \ the size of the\n      message does not exceed 1280 bytes.\n   o  the 'P' bit\
    \ is set to P=0.\n   When the ingress node ('B') receives the AERO Redirect message,\
    \ it\n   validates the message the same as described in Section 6.4.6.\n   Following\
    \ validation, the ingress node ('B') then resets its FORWARD\n   timer for the\
    \ prefix pair that matches the originating packet's\n   network-layer source and\
    \ destination addresses to FORWARD_TIME\n   seconds.\n   In this process, if the\
    \ ingress node sends MAX_RETRY AERO Predirect\n   messages as keepalives without\
    \ receiving an AERO Redirect message\n   reply, it can either declare the prefix\
    \ pair unreachable immediately\n   or allow the pair to expire after FORWARD_TIME\
    \ seconds.\n"
- title: 6.4.11.  Neighbor Reachability Considerations
  contents:
  - "6.4.11.  Neighbor Reachability Considerations\n   When the ingress node ('B')\
    \ receives an AERO Redirect message\n   informing it of a direct path to a new\
    \ egress node ('D'), there is a\n   question in point as to whether the new egress\
    \ node ('D') can be\n   reached directly without forwarding through an intermediate\
    \ router\n   ('A').  On some AERO links, it may be reasonable for the ingress\
    \ node\n   ('B') to (optimistically) assume that reachability is transitive, and\n\
    \   to immediately begin forwarding data packets to the egress node ('D')\n  \
    \ without testing reachability.\n   On AERO links in which an optimistic assumption\
    \ of transitive\n   reachability may be unreasonable, however, the ingress node\
    \ ('B') can\n   defer the redirection until it tests the direct path to the egress\n\
    \   node ('D'), e.g., by sending an IPv6 Neighbor Solicitation to elicit\n   an\
    \ IPv6 Neighbor Advertisement response.  If the ingress node ('B')\n   is unable\
    \ to elicit a response after MAX_RETRY attempts, it should\n   consider the direct\
    \ path to the egress node ('D') to be unusable.\n   In either case, the ingress\
    \ node ('B') can process any link errors\n   corresponding to the data packets\
    \ sent directly to the egress node\n   ('D') as a hint that the direct path has\
    \ either failed or has become\n   intermittent.  Conversely, the ingress node\
    \ ('B') can further process\n   any AERO Redirect messages received as evidence\
    \ of neighbor\n   reachability.\n"
- title: 6.4.12.  Mobility Considerations
  contents:
  - "6.4.12.  Mobility Considerations\n   Again, with reference to Figure 3, egress\
    \ node ('D') can configure\n   both a non-advertising router interface on a provider\
    \ AERO link and\n   advertising router interfaces on its connected EUN links.\
    \  When an\n   EUN node ('E') in one of the egress node's connected EUNs moves\
    \ to a\n   different network point of attachment, however, it can release its\n\
    \   network-layer address/prefix delegations that were registered with\n   egress\
    \ node ('D' ) and re-establish them via a different router.\n   When the EUN node\
    \ ('E') releases its network-layer address/prefix\n   delegations, the egress\
    \ node ('D') marks its forwarding table entries\n   corresponding to the network-layer\
    \ addresses/prefixes as \"departed\"\n   and no longer responds to AERO Predirect\
    \ messages for the departed\n   addresses/prefixes.  When egress node ('D') receives\
    \ packets from an\n   ingress node ('B') with network-layer source and destination\n\
    \   addresses that match a prefix pair on the ACCEPT list, it forwards\n   them\
    \ to the last-known link-layer address of EUN node ('E') as a\n   means for avoiding\
    \ mobility-related packet loss during routing\n   changes.  Egress node ('D')\
    \ also returns a NULL AERO Redirect message\n   to inform the ingress node ('B')\
    \ of the departure.  The message is\n   prepared as follows:\n   o  the link-layer\
    \ source address is set to 'L2(D)'.\n   o  the link-layer destination address\
    \ is set to 'L2(B)'.\n   o  the network-layer source address is set to the link-local\
    \ address\n      'L3(D)'.\n   o  the network-layer destination address is set\
    \ to the link-local\n      address 'L3(B)'.\n   o  the UDP destination port is\
    \ set to 'AERO_PORT'.\n   o  the Redirect Target and Destination Addresses are\
    \ both set to\n      NULL.\n   o  the message includes an RHO that contains as\
    \ much of the original\n      packet as possible such that at least the network-layer\
    \ header is\n      included but the size of the message does not exceed 1280 bytes.\n\
    \   o  the 'P' bit is set to P=0.\n   When ingress node ('B') receives the NULL\
    \ AERO Redirect message, it\n   deletes the prefix pair associated with the packet\
    \ in the RHO from\n   its list of forwarding entries corresponding to egress node\
    \ ('D').\n   When egress node ('D')s ACCEPT_TIME timer for the prefix pair\n \
    \  corresponding to the departed prefix expires, it deletes the prefix\n   pairs\
    \ from its list of ingress filtering entries corresponding to\n   ingress node\
    \ ('B').\n   Eventually, any such correspondent AERO nodes will receive a NULL\n\
    \   AERO Redirect message and will cease to use the egress node ('D') as\n   a\
    \ next hop.  They will then revert to sending packets destined to the\n   EUN\
    \ node ('E') via a trusted intermediate router and may subsequently\n   receive\
    \ new AERO Redirect messages to discover that the EUN node\n   ('E') is now associated\
    \ with a new AERO edge router.\n   Note that any packets forwarded by the egress\
    \ node ('D') via a\n   departed forwarding table entry may be lost if the (mobile)\
    \ EUN node\n   ('E') moves off-link with respect to its previous EUN point of\n\
    \   attachment.  This should not be a problem for large links (e.g.,\n   large\
    \ cellular network deployments, large ISP networks, etc.) in\n   which all/most\
    \ mobility events are intra-link.\n"
- title: 6.4.13.  Link-Layer Address Change Considerations
  contents:
  - "6.4.13.  Link-Layer Address Change Considerations\n   When an ingress node needs\
    \ to change its link-layer address, it\n   deletes each FORWARD list entry that\
    \ was established under the old\n   link layer address, changes the link layer\
    \ address, then allows\n   packets to again flow through an intermediate router.\
    \  Any egress\n   node that receives the packets will also receive new AERO Predirect\n\
    \   messages from the intermediate router.  The egress node then deletes\n   the\
    \ ACCEPT entry that included the ingress node's old link-layer\n   address and\
    \ installs a new ACCEPT entry that includes the ingress\n   node's new link-layer\
    \ address.  The egress then returns a new AERO\n   Redirect message to the ingress\
    \ node via the intermediate router,\n   which the ingress node uses to establish\
    \ a new FORWARD list entry.\n   When an egress node needs to change its link-layer\
    \ address, it\n   deletes each entry in the ACCEPT list and SHOULD also send NULL\
    \ AERO\n   Redirect messages to the corresponding ingress node (i.e., the same\n\
    \   as described for mobility operations in Section 6.4.12) before\n   changing\
    \ the link-layer address.  Any ingress node that receives the\n   NULL AERO Redirect\
    \ messages will delete any corresponding FORWARD\n   list entries and again allow\
    \ packets to flow through an intermediate\n   router.  The egress then changes\
    \ the link-layer address, and it sends\n   new AERO Redirect messages in response\
    \ to any AERO Predirect messages\n   it receives from the intermediate router\
    \ while using the new link-\n   layer address.\n"
- title: 6.4.14.  Prefix Re-provisioning Considerations
  contents:
  - "6.4.14.  Prefix Re-provisioning Considerations\n   When an AERO node configures\
    \ one or more FORWARD/ACCEPT list prefix\n   pair entries, and the prefixes associated\
    \ with the pair are somehow\n   reconfigured or renumbered, the stale FORWARD/ACCEPT\
    \ list information\n   must be deleted.\n   When an ingress node ('B') reconfigures\
    \ its network-layer source\n   prefix in such a way that the ACCEPT list entry\
    \ in the egress node\n   ('D') would no longer be valid (e.g., the prefix length\
    \ of the source\n   prefix changes), the ingress node ('B') simply deletes the\
    \ prefix\n   pair form its FORWARD list and allows subsequent packets to again\n\
    \   flow through an intermediate router ('A').\n   When the egress node ('D')\
    \ reconfigures its network-layer destination\n   prefix in such a way that the\
    \ FORWARD list entry in the ingress node\n   ('B') would no longer be valid, the\
    \ egress node ('D') sends a NULL\n   AERO Redirect message to the ingress node\
    \ ('B') the same as described\n   for mobility and link-layer address change considerations\
    \ when it\n   receives either an AERO Predirect message or a data packet (subject\n\
    \   to rate limiting) from the ingress node ('B').\n"
- title: 6.4.15.  Backward Compatibility
  contents:
  - "6.4.15.  Backward Compatibility\n   There are no backward compatibility considerations\
    \ since AERO\n   Redirect/Predirect messages use a new UDP port number that\n\
    \   distinguishes them from other kinds of control messages.  Therefore,\n   legacy\
    \ nodes will simply discard any AERO Redirect/Predirect messages\n   they may\
    \ accidentally receive.\n   Note however that AERO redirection requires that all\
    \ three (the\n   ingress, intermediate router, and egress) participate in the\n\
    \   protocol.  Additionally, the intermediate router SHOULD disable\n   ordinary\
    \ ICMPv6 Redirects when AERO redirection is enabled.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has assigned UDP user port number 8060 for this\
    \ protocol via the\n   expert review process [RFC5226].\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   AERO link security considerations are the same\
    \ as for standard IPv6\n   Neighbor Discovery [RFC4861] except that AERO improves\
    \ on some\n   aspects.  In particular, AERO is dependent on a trust basis between\n\
    \   AERO edge nodes and intermediate routers, where the edge nodes must\n   only\
    \ engage in the AERO mechanism when it is facilitated by a trusted\n   intermediate\
    \ router.\n   AERO links must be protected against link-layer address spoofing\n\
    \   attacks in which an attacker on the link pretends to be a trusted\n   neighbor.\
    \  Links that provide link-layer securing mechanisms (e.g.,\n   WiFi networks)\
    \ and links that provide physical security (e.g.,\n   enterprise network LANs)\
    \ provide a first line of defense that is\n   often sufficient.  In other instances,\
    \ sufficient assurances against\n   link-layer address spoofing attacks are possible\
    \ if the source can\n   digitally sign its messages through means outside the\
    \ scope of this\n   document.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Discussions both on the v6ops list and in private exchanges\
    \ helped\n   shape some of the concepts in this work.  Individuals who contributed\n\
    \   insights include Mikael Abrahamsson, Fred Baker, Stewart Bryant,\n   Brian\
    \ Carpenter, Brian Haberman, Joel Halpern, and Lee Howard.\n   Members of the\
    \ IESG also provided valuable input during their review\n   process that greatly\
    \ improved the document.  Special thanks go to\n   Stewart Bryant, Joel Halpern,\
    \ and Brian Haberman for their\n   shepherding guidance.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              August 1980.\n   [RFC2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [RFC4191]  Draves, R. and D. Thaler, \"Default Router Preferences and\n  \
    \            More-Specific Routes\", RFC 4191, November 2005.\n   [RFC4861]  Narten,\
    \ T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n              September 2007.\n   [RFC4862]\
    \  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address\
    \ Autoconfiguration\", RFC 4862, September 2007.\n   [RFC5226]  Narten, T. and\
    \ H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC6434]\
    \  Jankiewicz, E., Loughney, J., and T. Narten, \"IPv6 Node\n              Requirements\"\
    , RFC 6434, December 2011.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [IRON]     Templin, F., \"The Internet Routing\
    \ Overlay Network\n              (IRON)\", Work in Progress, June 2012.\n   [RFC0791]\
    \  Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n              September\
    \ 1981.\n   [RFC0792]  Postel, J., \"Internet Control Message Protocol\", STD\
    \ 5,\n              RFC 792, September 1981.\n   [RFC2131]  Droms, R., \"Dynamic\
    \ Host Configuration Protocol\",\n              RFC 2131, March 1997.\n   [RFC2529]\
    \  Carpenter, B. and C. Jung, \"Transmission of IPv6 over IPv4\n             \
    \ Domains without Explicit Tunnels\", RFC 2529, March 1999.\n   [RFC3315]  Droms,\
    \ R., Bound, J., Volz, B., Lemon, T., Perkins, C.,\n              and M. Carney,\
    \ \"Dynamic Host Configuration Protocol for\n              IPv6 (DHCPv6)\", RFC\
    \ 3315, July 2003.\n   [RFC3633]  Troan, O. and R. Droms, \"IPv6 Prefix Options\
    \ for Dynamic\n              Host Configuration Protocol (DHCP) version 6\", RFC\
    \ 3633,\n              December 2003.\n   [RFC4443]  Conta, A., Deering, S., and\
    \ M. Gupta, \"Internet Control\n              Message Protocol (ICMPv6) for the\
    \ Internet Protocol\n              Version 6 (IPv6) Specification\", RFC 4443,\
    \ March 2006.\n   [RFC5214]  Templin, F., Gleeson, T., and D. Thaler, \"Intra-Site\n\
    \              Automatic Tunnel Addressing Protocol (ISATAP)\", RFC 5214,\n  \
    \            March 2008.\n   [RFC5569]  Despres, R., \"IPv6 Rapid Deployment on\
    \ IPv4\n              Infrastructures (6rd)\", RFC 5569, January 2010.\n   [RFC6204]\
    \  Singh, H., Beebee, W., Donley, C., Stark, B., and O.\n              Troan,\
    \ \"Basic Requirements for IPv6 Customer Edge\n              Routers\", RFC 6204,\
    \ April 2011.\n   [VET]      Templin, F., \"Virtual Enterprise Traversal (VET)\"\
    , Work\n              in Progress, June 2012.\n"
- title: Appendix A.  Intermediate Router Interworking
  contents:
  - "Appendix A.  Intermediate Router Interworking\n   Figure 3 depicts a reference\
    \ AERO operational scenario with a single\n   intermediate router on the AERO\
    \ link.  In order to support scaling to\n   larger numbers of nodes, the AERO\
    \ link can deploy multiple\n   intermediate routers, e.g., as shown in Figure\
    \ 6.\n       +--------------+                        +--------------+\n      \
    \ | Intermediate |    +--------------+    | Intermediate |\n       |   Router\
    \ C   |    | Core Router D|    |   Router E   |\n       | (default->D) |    |\
    \ (A->C; G->E) |    | (default->D) |\n       |    (A->B)    |    +--------------+\
    \    |    (G->F)    |\n       +-------+------+                        +------+-------+\n\
    \               |                                      |\n       X---+---+--------------------------------------+---+---X\n\
    \           |                  AERO Link                   |\n     +-----+--------+\
    \                            +--------+-----+\n     | Edge Router B|         \
    \                   | Edge Router F|\n     | (default->C) |                  \
    \          | (default->E) |\n     +--------------+                           \
    \ +--------------+\n           .-.                                         .-.\n\
    \        ,-(  _)-.                                   ,-(  _)-.\n     .-(_ IPv6\
    \  )-.                              .-(_ IPv6  )-.\n    (__    EUN      )    \
    \                       (__    EUN      )\n       `-(______)-'               \
    \                 `-(______)-'\n            |                                \
    \           |\n        +--------+                                  +--------+\n\
    \        | Host A |                                  | Host G |\n        +--------+\
    \                                  +--------+\n                  Figure 6: Multiple\
    \ Intermediate Routers\n   In this example, the ingress AERO node ('B') (in this\
    \ case an edge\n   router, but could also be a host) associates with intermediate\
    \ AERO\n   router ('C'), while the egress AERO node ('F') (in this case an edge\n\
    \   router, but could also be a host) associates with intermediate AERO\n   router\
    \ ('E').  Furthermore, intermediate routers ('C') and ('E') do\n   not associate\
    \ with each other directly, but rather have an\n   association with a \"core\"\
    \ router ('D') (i.e., a router that has full\n   topology information concerning\
    \ its associated intermediate routers).\n   Core router ('D') may connect to either\
    \ the AERO link or to other\n   physical or virtual links (not shown) to which\
    \ intermediate routers\n   ('C') and ('E') also connect.\n   When host ('A') sends\
    \ a packet toward destination host ('G'), IPv6\n   forwarding directs the packet\
    \ through the EUN to edge router ('B'),\n   which forwards the packet to intermediate\
    \ router ('C') in absence of\n   more-specific forwarding information.  Intermediate\
    \ router ('C')\n   forwards the packet, and it also generates an AERO Predirect\
    \ message\n   that is then forwarded through core router ('D') to intermediate\n\
    \   router ('E').  When intermediate router ('E') receives the message,\n   it\
    \ forwards the message to egress router ('F').\n   After processing the AERO Predirect\
    \ message, egress router ('F')\n   sends an AERO Redirect message to intermediate\
    \ router ('E').\n   Intermediate router ('E'), in turn, forwards the message through\
    \ core\n   router ('D') to intermediate router ('C').  When intermediate router\n\
    \   ('C') receives the message, it forwards the message to ingress edge\n   router\
    \ ('B') informing it that host 'G's EUN can be reached via\n   egress router ('F'),\
    \ thus completing the AERO redirection.\n   The interworkings between intermediate\
    \ and core routers (including\n   the conveyance of pseudo Predirects and Redirects)\
    \ must be carefully\n   coordinated in a manner outside the scope of this document.\
    \  In\n   particular, the intermediate and core routers must ensure that any\n\
    \   routing loops that may be formed are temporal in nature.  See [IRON]\n   for\
    \ an architectural discussion of coordination between intermediate\n   and core\
    \ routers.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Fred L. Templin (editor)\n   Boeing Research & Technology\n\
    \   P.O. Box 3707 MC 7L-49\n   Seattle, WA  98124\n   USA\n   EMail: fltemplin@acm.org\n"
