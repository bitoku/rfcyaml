Abstract This memo extends the Forwarding and Control Element Separation (ForCES) model defined in RFC 5812 and updates that RFC to allow complex data types for metadata, optional default values for data types, and optional access types for structures.
It also fixes an issue with Logical Functional Block (LFB) inheritance and introduces two new features: a new event condition called eventBecomesEqualTo and LFB properties.
The changes introduced in this memo do not alter the protocol and retain backward compatibility with older LFB models.
The ForCES model [RFC5812] presents a formal way to define Forwarding Element (FE)
using the eXtensible Markup Language (XML).
[RFC5812] was published several years before this document, and experience with its use has demonstrated the need to add new modeling concepts and change existing ones.
Specifically, this document updates the ForCES model [RFC5812] to allow complex data types for metadata (Section 2.1), optional default values for data types (Section 2.2), and optional access types for structures (Section 2.3).
It also fixes an issue with LFB class inheritance (Section 2.6).
Additionally, the document introduces two new features: a new event condition named eventBecomesEqualTo (Section 2.4) and LFB properties (Section 2.5).
These extensions are an update to the ForCES model [RFC5812] and do not require any changes to the ForCES protocol [RFC5810] as they are simply changes to the schema definition.
Additionally, backward compatibility is ensured as XML libraries produced with the earlier schema are still valid with the new one.
In order for XML libraries produced by the new schema to be compatible with existing ForCES implementations, the XML libraries MUST NOT include any of the features described in this document.
Extensions to the schema and excerpts of the schema include the tags <!
Extension RFC 7408   and <!
RFC 7408  , which designate the beginning and ending of extension text specified by this document in respect to the schema in the original ForCES model [RFC5812].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This document uses the terminology defined in the ForCES model [RFC5812].
In particular, the reader is expected to be familiar with the following terms: FE Model LFB (Logical Functional Block) Class (or type)
LFB Instance LFB Model Element Attribute LFB Metadata ForCES Component LFB Class Library 2.
Complex Data Types for Metadata Section 4.6 ("<metadataDefs
> Element for Metadata Definitions") of the ForCES model [RFC5812] limits the data type use in metadata to only atomic types.
Figure 1 shows the XML schema excerpt where only typeRef and atomic are allowed for a metadata definition.
<xsd:element name "metadataDef" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "typeRef" type "typeRefNMTOKEN"/
However, there are cases where complex metadata are used in the datapath: for example, two simple use cases are described in version 1.1.0 (and subsequent versions) of the OpenFlow Switch Specification [OpenFlowSpec1.1]: 1.
The Action Set metadata is an array of actions descriptors, which traverses the processing pipeline along with the packet data.
When a packet is received from a controller, it may be accompanied by a list of actions, as metadata, to be performed on it prior to being sent on the processing pipeline.
This list of actions is also an array.
With the extension shown in Figure 2, complex data types are also allowed, specifically structs and arrays as metadata.
The key declarations are required to check for validity of content keys in arrays and componentIDs in structs.
<xsd:element name "metadataDef" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "typeRef" type "typeRefNMTOKEN"/
<xsd:element name "array" type "arrayType"
:element> <xsd:element name "struct" type "
complexType> Figure 2: New metadataDefsType Definition in the Schema 2.2.
Optional Default Values for Data Types
In the original schema, default values can only be defined for data types defined inside LFB components and not inside structures or arrays.
Therefore, default values for data types that are constantly being reused, e.g., counters with default value of 0, have to be constantly respecified.
Additionally, data types inside complex data types cannot be defined with a default value, e.g., a counter inside a struct that has a default value of 0.
This extension allows the option to add default values to data types.
These data types can then be referenced as simple components or within complex data types such as structs.
A simple use case would be to have a struct component where one of the components is a counter with a default value of zero.
To achieve that, the counter must first be defined as a data type with the required default value and then referenced in the struct.
Default values MUST adhere the following formal restrictions: 1.
Default values MUST be ignored if the data type is not an atomic or a base data type.
When a data type X with
default value A is referenced from a data type Y with a default value B, the default value of the data type that references overrides the referenced default value, e.g., in this case, Y's default value will be B. 3.
Default values of LFB components override any default value specified from the dataTypeDef definition.
Default values of data types referenced in capabilities or metadata MUST be ignored.
This extension simply adds to the definition of dataTypeDefsType in the XML schema shown in Figure 3 to allow default values for dataTypeDefsType.
The new definition is shown in Figure 4.
<xsd:element name "dataTypeDef" maxOccurs "unbounded"> <
<xsd:element name "name" type "xsd:NMTOKEN"/
" type "xsd:NMTOKEN" minOccurs "
<xsd:element ref "description" minOccurs "
complexType> Figure 3: Initial Excerpt of dataTypeDefsType Definition in the Schema
<xsd:element name "dataTypeDef" maxOccurs "unbounded"> <
<xsd:element name "name" type "xsd:NMTOKEN"/
" type "xsd:NMTOKEN" minOccurs "
<xsd:element ref "description" minOccurs "
element name "defaultValue" type "xsd:token" minOccurs "
New Excerpt of dataTypeDefsType Definition in the Schema Examples of using default values is depicted in Figure 5.
A counter with default 0</synopsis
<synopsis>Example default values in struct</synopsis
> <synopsis>A counter for good packets</synopsis>
> </component> <component componentID "2"> <name
> <synopsis>A counter for bad packets</synopsis>
Example of Optional Default Values 2.3.
Optional Access Types for Structs
In the original schema, the access type can only be defined on components of an LFB and not on components within structs or arrays.
That means that when it is a struct data type, it is not possible to fine tune access type per component within the struct.
A simple use case would be to have a read write struct component where one of the components is a counter with an access type that could be read reset or read only, e.g., a read reset or a read only counter inside a struct.
This extension allows the definition of the access type for a struct component either in the data type definitions or in the LFB component definitions.
When optional access types for components within a struct are defined, the access types for these components MUST override the access type of the struct.
For example, if a struct has an access type of read write but has a component that is a read only counter, the counter's access type MUST be read only.
Per [RFC5812], the access type for a component in a capability is always read only.
If an access type is provided for a component in a capability, the access type MUST be ignored.
Similarly, if an access type is provided for a struct in a metadata, the access type MUST be ignored.
This extension alters the definition of the struct in the XML schema from the initial definition shown in Figure 6 to the new shown in Figure 7.
<xsd:element name "derivedFrom" type "typeRefNMTOKEN" minOccurs "
<xsd:element name "component" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "optional" minOccurs "0"/
complexType> Figure 6: Initial XML for the Struct Definition in the Schema
<xsd:element name "derivedFrom" type "typeRefNMTOKEN" minOccurs "
<xsd:element name "component" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "optional" minOccurs "0"/
<xsd:attribute name "access" use "optional" default "
> Figure 7: New XML for the Struct Definition in the Schema
An example of using optional access types for structs is depicted in Figure 8.
<component componentID "1" access "read write"> <name
<synopsis>Packet Flows, match and counter</synopsis
> <struct> <component componentID "1"> <name>FlowMatch</name>
> </component> <component componentID "2" access "read only
> <synopsis>Packets matching the flow match</synopsis
> Figure 8: Example of Optional Access Types for Struct 2.4.
eventBecomesEqualTo This extension adds one more event condition in the model schema, eventBecomesEqualTo.
eventBecomesEqualTo is different from eventGreaterThan and eventLessThan because the event is triggered when the value is exactly that of the eventBecomesEqualTo threshold.
This event condition is particularly useful when there is a need to monitor one or more states of an LFB or the FE.
For example, in the Control Element High Availability (CEHA) document [RFC7121], it may be useful for the master CE to know which backup CEs have just become associated in order to connect to them and begin synchronizing the state of the FE.
The master CE could always poll for such information, but getting such an event will speed up the process, and the event may be useful in other cases as well for monitoring state.
The event MUST be triggered only when the value of the targeted component becomes equal to the event condition value.
Implementations MUST NOT generate subsequent events while the targeted component's value remains equal to the event condition's value.
eventBecomesEqualTo is appended to the schema as shown in Figure 9.
<xsd:element name "eventBecomesEqualTo" substitutionGroup "
New Excerpt of eventBecomesEqualTo Event Condition Definition in the Schema
It can become useful for the CE to be notified when the state has changed once the eventBecomesEqualTo event has been triggered, e.g., the CE may need to know when a backup CE has lost association.
Such an event can be generated either by defining a second event on the same component (namely, an eventChanged) or by simply reusing eventBecomesEqualTo and using event properties (in particular, eventHysteresis).
For example, using the value of 1 for V will, in effect, create a singular event that will notify the CE that the value has changed by at least 1.
A developer of a CE should consider using count or time filtering to avoid being overrun by messages, e.g., in the case of rapid state changes.
The previous model definition specifies properties for components of LFBs.
Experience has shown that, at least for debug reasons, it would be useful to have statistics per LFB instance to monitor sent and received messages and errors in communication between a CE and FE.
These properties are read only.
In order to avoid ambiguity on protocol path semantics, this document specifies that the LFB componentID 0 specifically MUST refer to LFB properties and ID 0 MUST NOT be used for any component definition.
This disallowance is backward compatible as no known LFB definition uses an LFB componentID 0.
Any command with a path starting from LFB componentID 0 refers to LFB properties.
Figures 10 and 11 illustrate the change in the XML schema that disallows usage of LFB componentID 0:
:attribute name "componentID" type "xsd:unsignedInt" use "required"
> Figure 10: Initial XML for LFB componentIDs <!
Extension added restriction to componentID   <xsd:attribute name "componentID" use "required"
Figure 11: New XML to Disallow Usage of LFB componentID 0
The following data type definitions are to be used as properties for LFB instances.
> <struct> <component componentID "1
> <typeRef>uint32</typeRef> </component> <component componentID "2"> <name
Error Packets sent to CE</synopsis> <typeRef
>uint32</typeRef> </component> <component componentID "3"> <name>
>Bytes sent to CE</synopsis> <typeRef
>uint32</typeRef> </component> <component componentID "4"> <name
Error Bytes sent to CE</synopsis> <typeRef
>uint32</typeRef> </component> <component componentID "5
> <typeRef>uint32</typeRef> </component> <component componentID "6"> <name
Error Packets received from CE</synopsis
> <typeRef>uint32</typeRef> </component> <component componentID "7"> <name
> <typeRef>uint32</typeRef> </component> <component componentID "8
Error Bytes received from CE</synopsis
> Figure 12: Properties for LFB Instances 2.6.
The ForCES model [RFC5812] allows inheritance for LFB classes.
However, the XML schema defines only the LFB class from which an LFB class inherits.
Recent implementations have identified an issue where ambiguity rises when different versions of the parent LFB class exist.
This document augments the derivedFrom part of the LFB class definition with an optional version attribute when the derivedFrom field is used.
Having the version attribute as optional was a decision based on the need to maintain backward compatibility with the XML schema defined in [RFC5812].
However, if the version is omitted, then derivedFrom will always specify the first version of the parent LFB class, which usually is version 1.0.
This extension alters the definition of derivedFrom in the XML schema from the initial definition shown in Figure 13 to the new shown in Figure 14.
<xsd:element name "derivedFrom" minOccurs "
> Figure 13: Initial XML for LFB Class Inheritance
<xsd:element name "derivedFrom" minOccurs "0">
<xsd:extension base "xsd:NMTOKEN"> <xsd:attribute name "version" type "versionType" use "
:element> Figure 14: New XML for LFB Class Inheritance
An example of the use of the version attribute is given in Figure 15.
> Figure 15: Example of Use of New XML for LFB Class Inheritance 2.7.
Enhancing XML Validation As specified earlier, this is not an extension but an enhancement of the schema to provide additional validation rules.
This includes adding new key declarations to provide uniqueness as defined by the ForCES model [RFC5812].
Such validations work only within the same XML file.
This document introduces the following validation rules that did not exist in the original schema in [RFC5812]
Each metadataID must be unique.
componentID, capabilityID, and Event baseID must be unique per LFB.
eventIDs must be unique per LFB.
Special values in atomic data types must be unique per atomic data type.
XML Extension Schema for LFB Class Library Documents
This section includes the new XML schema.
Note that the namespace number has been updated from 1.0 to 1.1.
The extensions described in this document are backwards compatible in terms of the operation of the ForCES protocol.
In terms of the XML, any definitions that were valid under the old namespace are valid under the new namespace.
It is to be noted that any auxiliary tools that are processing XML definitions written under both namespaces will need to be able to understand both.
xml version "1.0" encoding "UTF 8"?
ns:forces:lfbmodel:1.1" elementFormDefault "qualified" attributeFormDefault "unqualified"> <xsd:annotation>
Schema for Defining LFB Classes and associated types (frames, data types for LFB attributes, and metadata).
<xsd:element name "description" type "xsd:
<xsd:element name "synopsis" type "xsd:string"/
Document root element: LFBLibrary   <xsd:element name "LFBLibrary"
<xsd:element ref "description" minOccurs "
<xsd:element name "load" type "loadType" minOccurs "0
> <xsd:element name "frameDefs" type "frameDefsType" minOccurs "0"/
element name "dataTypeDefs" type "dataTypeDefsType" minOccurs "
<xsd:element name "metadataDefs" type "metadataDefsType
<xsd:element name "LFBClassDefs" type "LFBClassDefsType" minOccurs "
" type "xsd:Name" use "required"/
> <xsd:complexType name "loadType"> <xsd:
attribute name "library" type "xsd:Name" use "required"/>
<xsd:attribute name "location" type "xsd:anyURI" use "optional"/
<xsd:element name "frameDef" maxOccurs "unbounded"
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "dataTypeDef" maxOccurs "unbounded"> <
<xsd:element name "name" type "xsd:NMTOKEN"/
" type "xsd:NMTOKEN" minOccurs "
<xsd:element ref "description" minOccurs "
element name "defaultValue" type "xsd:token" minOccurs "
atomic data types are: char, uchar, int16, uint16, int32, uint32, int64, uint64, string[N], string, byte[N], boolean, octetstring[N], float32, float64
<xsd:element name "typeRef" type "typeRefNMTOKEN"/
declare keys to have unique IDs
<xsd:key name "contentKeyID"> <xsd:selector xpath "lfb:contentKey"/>
key declaration to make componentIDs unique in a struct
<xsd:simpleType name "typeRefNMTOKEN"> <xsd:restriction base "xsd:token">
<xsd:element name "specialValues" type "specialValuesType" minOccurs "0"
:complexType> <xsd:complexType name "rangeRestrictionType"> <xsd:sequence>
<xsd:element name "allowedRange" maxOccurs "unbounded">
attribute name "min" type "xsd:integer" use "required"/>
<xsd:attribute name "max" type "xsd:integer" use "required"/
<xsd:element name "specialValue" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:attribute name "value" type "xsd:token"/
<xsd:element name "contentKey" minOccurs "0" maxOccurs "unbounded
attribute name "contentKeyID" type "xsd:integer" use "required"/
<xsd:attribute name "type" use "optional" default "variable size">
> <xsd:restriction base "xsd:string"> <xsd:enumeration value "fixed
attribute name "length" type "xsd:integer" use "optional"/>
<xsd:attribute name "maxLength" type "xsd:integer" use "optional"/
<xsd:element name "derivedFrom" type "typeRefNMTOKEN" minOccurs "
<xsd:element name "component" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "optional" minOccurs "0"/
<xsd:attribute name "access" use "optional" default "
<xsd:element name "metadataDef" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "typeRef" type "typeRefNMTOKEN"/
declare keys to have unique IDs
key declaration to make componentIDs unique in a struct
<xsd:element name "LFBClassDef" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element name "version" type "versionType"/>
element name "derivedFrom" minOccurs "0">
<xsd:extension base "xsd:NMTOKEN"> <xsd:attribute name "version" type "versionType" use "
"inputPorts" type "inputPortsType" minOccurs "
<xsd:element name "outputPorts" type "outputPortsType
<xsd:element name "components" type "LFBComponentsType" minOccurs "
<xsd:element name "capabilities" type "LFBCapabilitiesType" minOccurs "
<xsd:element name "events" type "eventsType" minOccurs "
<xsd:element ref "description" minOccurs "
Key constraint to ensure unique attribute names within a class:
<xsd:key name "components"> <xsd:selector xpath "lfb:components/
<xsd:key name "capabilities"> <xsd:selector xpath "
> <xsd:key name "events"> <xsd:selector xpath "lfb:events/
> <xsd:key name "componentIDs"> <xsd:selector xpath "
<xsd:element name "inputPort" type "inputPortType" maxOccurs "
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element name "expectation" type "portExpectationType"/>
<xsd:element ref "description" minOccurs "
<xsd:element name "frameExpected" minOccurs "0">
:element> <xsd:element name "metadataExpected" minOccurs "0">
complexType> <xsd:complexType name "metadataInputChoiceType"> <xsd:choice minOccurs "2" maxOccurs "unbounded"
ref must refer to a name of a defined metadata
:element name "ref" type "xsd:NMTOKEN"/
<xsd:element name "one of" type "metadataInputChoiceType"/>
:complexType> <xsd:complexType name "metadataInputSetType"> <xsd:choice minOccurs "2" maxOccurs "unbounded"
ref must refer to a name of a defined metadata
attribute name "dependency" use "optional" default "required
> <xsd:restriction base "xsd:string"> <xsd:enumeration value "required"/>
<xsd:element name "outputPort" type "outputPortType" maxOccurs "unbounded"/
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element name "product" type "portProductType"/>
<xsd:element ref "description" minOccurs "
<xsd:element name "frameProduced" minOccurs "0">
ref must refer to a name of a defined frame type   <xsd
:element name "ref" type "xsd:NMTOKEN" maxOccurs "
:element> <xsd:element name "metadataProduced" minOccurs "0">
ref must refer to a name of a defined metadata
element name "one of" type "metadataOutputChoiceType"/
"> <xsd:choice minOccurs "2" maxOccurs "unbounded"
ref must refer to a name of a defined metadata
:element name "ref" type "xsd:NMTOKEN"/
<xsd:element name "one of" type "metadataOutputChoiceType"/
ref must refer to a name of a defined metadata
element name "one of" type "metadataOutputChoiceType"/
attribute name "availability" use "optional" default "unconditional"
> <xsd:restriction base "xsd:string"> <xsd:enumeration value "unconditional"/>
<xsd:element name "component" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "optional" minOccurs "0"/
"defaultValue" type "xsd:token" minOccurs "
<xsd:attribute name "access" use "optional" default "read write">
Extension added restriction to componentID   <xsd:attribute name "componentID" use "required"
> <xsd:simpleType name "accessModeType"> <xsd:restriction base "xsd:NMTOKEN"> <xsd:enumeration value "read only"/
<xsd:element name "capability" maxOccurs "unbounded">
<xsd:element name "name" type "xsd:NMTOKEN"/
<xsd:element ref "description" minOccurs "
<xsd:element name "optional" minOccurs "0"/
attribute name "componentID" type "xsd:integer" use "required"/
<xsd:element name "event" maxOccurs "unbounded"
<xsd:element name "name" type "xsd:NMTOKEN"/
element name "eventTarget" type "eventPathType"/
<xsd:element name "eventReports" type "eventReportsType" minOccurs "
<xsd:element ref "description" minOccurs "
attribute name "eventID" type "xsd:integer" use "required"/
attribute name "baseID" type "xsd:integer" use "optional"/
the substitution group for the event conditions
<xsd:element name "eventCondition" abstract "true"/>
<xsd:element name "eventCreated" substitutionGroup "eventCondition"/>
<xsd:element name "eventDeleted" substitutionGroup "eventCondition"/>
<xsd:element name "eventChanged" substitutionGroup "eventCondition"/>
<xsd:element name "eventGreaterThan" substitutionGroup "
> <xsd:element name "eventLessThan" substitutionGroup "
<xsd:element name "eventBecomesEqualTo" substitutionGroup "
<xsd:element ref "eventPathPart" maxOccurs "
the substitution group for the event path parts
element name "eventPathPart" type "xsd:
"eventField" type "xsd:string" substitutionGroup "eventPathPart"/>
element name "eventSubscript" type "xsd:string" substitutionGroup "eventPathPart"/>
<xsd:element name "eventReport" type "eventPathType" maxOccurs "
"> <xsd:restriction base "xsd:string"> <xsd:enumeration value "0"/
ForCES LFB XML Schema 4.
IANA Considerations IANA has registered a new XML namespace, as per the guidelines in RFC 3688 [RFC3688].
The URI for this namespace is: urn:ietf:params:xml:
IESG XML: none, this is an XML namespace 5.
This specification adds only a few constructs to the initial model defined in [RFC5812], namely, a new event, some new properties, and a way to define optional access types and complex metadata.
In addition, this document addresses and clarifies an issue with the inheritance model by introducing the version of the derivedFrom LFB class.
These constructs and the update to the inheritance model do not change the nature of the initial model.
Thus, the security considerations defined in [RFC5812] apply to this specification as well, as the changes proposed here are simply constructs to write XML library definitions, as [RFC5812] does.
These changes, as well as the clarification of the inheritance issue of the initial model, have no effect on the security semantics of the protocol.
In regard to pervasive monitoring (PM), as discussed in [RFC7258], this specification defines ways to expose more complex information (namely, metadata) exchanged between LFBs and between CEs and FEs and a new event.
These changes have very little or no effect in terms of making PM simpler or more effective to an attacker who controls the LFBs.
The new metadata might make for slightly more elegant PM, but does not enable any new ways to (ab)use LFBs for PM.
The same applies for the new event.
Finally, this document does not provide any protocol specification and, as such, does not specify how information will be transmitted between respective entities.
Thus, PM mitigation for a passive attacker that simply wants to eavesdrop on the information exchanged is out of the scope of this document.
