- contents:
  - "        An Extensible Markup Language (XML) Document Format for\n                         Indicating
    a Change in\n           XML Configuration Access Protocol (XCAP) Resources\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines a document format that can be used to\n
    \  indicate that a change has occurred in a document managed by the\n   Extensible
    Markup Language (XML) Configuration Access Protocol\n   (XCAP).  This format reports
    which document has changed and its\n   former and new entity tags.  It can report
    the differences between\n   versions of the document, using an XML patch format.
    \ It can report\n   existing element and attribute content when versions of an
    XCAP\n   server document change.  XCAP diff documents can be delivered to diff\n
    \  clients using a number of means, including a Session Initiation\n   Protocol
    (SIP) event package.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5874.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  Structure of an XCAP Diff Document . . . . . . . . . . . .
    . .  5\n   4.  XML Schema . . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 8\n   5.  Example Document . . . . . . . . . . . . . . . . . . . . . . . 11\n
    \  6.  Basic Requirements for a System Exchanging XCAP Diff\n       Documents
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n   7.  Security Considerations
    \ . . . . . . . . . . . . . . . . . . . 13\n   8.  IANA Considerations  . . .
    . . . . . . . . . . . . . . . . . . 14\n     8.1.  application/xcap-diff+xml MIME
    Type  . . . . . . . . . . . 14\n     8.2.  URN Sub-Namespace Registration for\n
    \          urn:ietf:params:xml:ns:xcap-diff . . . . . . . . . . . . . 15\n     8.3.
    \ Schema Registration  . . . . . . . . . . . . . . . . . . . 15\n   9.  Acknowledgments
    \ . . . . . . . . . . . . . . . . . . . . . . . 16\n   10. References . . . .
    . . . . . . . . . . . . . . . . . . . . . . 16\n     10.1. Normative References
    . . . . . . . . . . . . . . . . . . . 16\n     10.2. Informative References .
    . . . . . . . . . . . . . . . . . 17\n   Appendix A.  Informative Examples  .
    . . . . . . . . . . . . . . . 18\n     A.1.  Indicating Existing, Changed, or
    Removed Documents . . . . 18\n     A.2.  Indicating Actual Changes of Documents
    . . . . . . . . . . 21\n     A.3.  Indicating XCAP Component Contents . . . .
    . . . . . . . . 23\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Extensible Markup Language (XML) Configuration Access
    Protocol\n   (XCAP) [RFC4825] is a protocol that allows XCAP clients to manipulate\n
    \  XML documents stored on a server.  These XML documents serve as\n   configuration
    information for application protocols.  As an example,\n   resource list [RFC4662]
    subscriptions (also known as presence lists)\n   allow a SIP client to have a
    single SIP subscription to a list of\n   users, where the list is maintained on
    a server.  The server will\n   obtain presence for those users and report it back
    to the SIP client.\n   This application requires the server, called a Resource
    List Server\n   (RLS), to have access to the list of presentities [RFC2778].  This\n
    \  list needs to be manipulated by XCAP clients so they can add and\n   remove
    their friends as they desire.\n   Complexities arise when multiple XCAP clients
    attempt to\n   simultaneously manipulate a document, such as a presence list.\n
    \  Frequently, an XCAP client will keep a copy of the current list in\n   memory,
    so it can render it to users.  However, if another XCAP\n   client modifies the
    document, the cached version becomes stale.  This\n   modification event must
    be made known to all clients that have cached\n   copies of the document, so that
    they can fetch the most recent one.\n   To deal with this problem, clients can
    use a Session Initiation\n   Protocol (SIP) [RFC3261] event package [RFC3265]
    to subscribe to\n   change events [RFC5875] in XCAP documents.  This notification
    needs\n   to indicate the specific resource that changed and how it changed.\n
    \  One solution for the format of such a change notification would be a\n   content
    indirection object [RFC4483].  Though content indirection can\n   tell a client
    that a document has changed, it provides it with a MIME\n   Content-ID indicating
    the new version of the document.  The MIME\n   Content-ID is not the same as the
    entity tag, which is used by XCAP\n   for document versioning.  As such, a client
    cannot easily ascertain\n   whether an indication of a change in a document is
    due to a change it\n   just made or due to a change another XCAP client made at
    around the\n   same time.  Furthermore, content indirections don't indicate how
    a\n   document changed; they are only able to indicate that it did change.\n   To
    resolve these problems, this document defines a data format that\n   can convey
    the fact that an XML document managed by XCAP has changed.\n   This data format
    is an XML document format, called an XCAP diff\n   document.  This format reports
    which document has changed and its\n   former and new entity tags.  It can report
    the differences between\n   versions of the document, using an XML patch format
    [RFC5261], which\n   indicate how to transform the locally cached XCAP document
    from the\n   version prior to the change to the version after it.  Its intent
    is\n   to reduce the required overall bandwidth and the number of separate\n   transmissions.
    \ It can also report existing element and attribute\n   content when versions
    of an XML document change at an XCAP server.\n   XML documents that are equivalent
    for the purposes of many\n   applications may differ in their physical representation.
    \ Similar to\n   XCAP, the canonical form with comments [W3C.REC-xml-c14n-20010315]
    of\n   an XML document determines the logical equivalence when this format\n   is
    used to patch locally cached XCAP documents.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119]
    and\n   indicate requirement levels for compliant implementations.\n   This specification
    also defines the following additional terms:\n   Document:  When the term document
    is used without the \"(XCAP) diff\"\n      in front of it, it refers to the XCAP
    document resource about\n      which the XCAP diff document is reporting a change.\n
    \  Diff document:  The XML document defined by this specification that\n      reports
    on a set of changes in an XCAP document resource.  It is\n      delivered from
    a server to a diff client by a transport that is\n      not defined by this specification.\n
    \  XCAP server:  A protocol entity that manages XCAP documents and their\n      entity
    tags.  It usually contains an integrated diff notifier.\n   Diff notifier:  This
    is the entity of a server that generates XCAP\n      diff documents based on its
    knowledge of a set of XCAP documents\n      and their changes, and it transmits
    the generated diff documents\n      to a diff client within a session.\n   Diff
    client:  A client that consumes XCAP diff documents in order to\n      construct
    a locally cached document that is equivalent to a\n      specific version of a
    document resource stored at an XCAP server.\n      It is typically a SIP User
    Agent (UA) and an XCAP client.\n   XCAP Client:  A client that updates and retrieves
    documents stored at\n      an XCAP server.  It can also patch element and attribute
    content\n      of XCAP documents located at an XCAP server.\n   Locally cached
    resource:  A resource that has typically been\n      downloaded by HTTP from an
    XCAP server to a diff client.  It may\n      have been patched locally by a diff
    client based on the XCAP diff\n      document information.  It is equivalent to
    a single version in its\n      change history at an XCAP server.  Version history
    of XCAP\n      documents is indicated by HTTP entity tags (ETags).\n   ETag:  A
    strong HTTP entity tag whose value is set by an XCAP server.\n      Documents
    at an XCAP server are updated by XCAP clients.  The XCAP\n      server assigns
    a new ETag value to each document version according\n      to the HTTP specification.\n"
  title: 2.  Terminology
- contents:
  - "3.  Structure of an XCAP Diff Document\n   An XCAP diff document is an XML [W3C.REC-xml-20060816]
    document that\n   MUST be well-formed and SHOULD be valid.  XCAP diff documents
    MUST be\n   based on XML 1.0 and MUST be encoded using UTF-8.  This specification\n
    \  makes use of XML namespaces for identifying XCAP diff documents and\n   document
    fragments.  The namespace URI for elements defined by this\n   specification is
    a URN [RFC2141], using the namespace identifier\n   'ietf' defined by [RFC2648]
    and extended by [RFC3688].  This URN is:\n      urn:ietf:params:xml:ns:xcap-diff\n
    \  An XCAP diff document begins with the root element tag <xcap-diff>.\n   This
    element has a single mandatory attribute, \"xcap-root\".  The\n   value of this
    attribute is the XCAP root URI for the documents in\n   which the changes have
    taken place.  A single XCAP diff document can\n   only represent changes in documents
    within the same XCAP root.  The\n   content of the <xcap-diff> element is a sequence
    of <document>,\n   <element>, and <attribute> elements followed by any number
    of\n   elements from other namespaces for the purposes of extensibility.\n   Wherever
    the XML schema (see Section 4) allows extension elements or\n   attributes, any
    such unknown content MUST be ignored by the diff\n   client.\n   Each <document>
    element specifies changes in a specific document\n   within the XCAP root.  If
    several <document> elements pinpoint the\n   same specific document, i.e., for
    example, the full entity tag (ETag)\n   change history is indicated, the corresponding
    patches MUST be able\n   to be applied in the given XCAP diff document order.\n
    \     Note: This requirement simplifies applications that process XCAP\n      diff
    documents since there's no need to sort patch instructions\n      when applying
    them.\n   The <document> element has one mandatory attribute, \"sel\", and two\n
    \  optional attributes, \"new-etag\" and \"previous-etag\".  The \"sel\"\n   attribute
    of the <document> element identifies the specific document\n   within the XCAP
    root for which changes are indicated.  Its content\n   MUST be a relative path
    reference, with the base URI being equal to\n   the XCAP root URI.  The \"new-etag\"
    attribute provides the entity tag\n   (ETag) for the document after the application
    of the changes,\n   assuming the document exists after those changes.  The \"previous-\n
    \  etag\" attribute provides an identifier for the document instance\n   prior
    to the change.  If the change being reported is the removal of\n   a document,
    only the \"previous-etag\" MUST be included and the \"new-\n   etag\" attribute
    MUST NOT be present.  The \"new-etag\" attribute MUST\n   only exist alone when
    the document either exists or it was just\n   created (no patch included).  Both
    attributes are present when a\n   patch (or series of XCAP operations) has been
    applied to the\n   resource.  Also, both attributes MAY be used to indicate an
    ETag\n   change without any document modifications (patches).\n   The \"previous-etag\"
    and \"new-etag\" need not have been sequentially\n   assigned ETags at the server.
    \ An XCAP diff document can indicate\n   changes that have occurred over a series
    of XCAP operations.  The\n   only requirement then is that the sequence of events,
    when executed\n   serially, will result in the transformation of the document
    with the\n   ETag \"previous-etag\" to the one whose ETag is \"new-etag\".  Also,
    the\n   series of operations do not have to be the same exact series of\n   operations
    that occurred at the server.\n   Each <document> element contains either a sequence
    of patching\n   instructions or an indication that the body hasn't semantically\n
    \  changed.  The latter means that the document has been assigned a new\n   ETag
    but its content is unchanged and it is indicated by the <body-\n   not-changed>
    element.  Patching instructions are described by the\n   <add>, <replace>, and
    <remove> elements.  These elements use the\n   corresponding add, replace, and
    remove types defined in [RFC5261],\n   and define a set of patch operations that
    can be applied to transform\n   the locally cached document.  See [RFC5261] for
    instructions on how\n   this transformation is effected.  The <document> element
    can also\n   contain elements from other namespaces for the purposes of\n   extensibility.
    \ The <add>, <replace>, and <remove> elements allow\n   extension attributes from
    any namespace.\n   Figure 1 shows <document> element content and how the corresponding\n
    \  resource or metadata changes.  In practice, an external document\n   retrieval
    means HTTP GET requests for target resources.  The asterisk\n   character '*'
    means that a <document> element has child element(s):\n   <add>, <replace>, or
    <remove>, or alternatively only a <body-not-\n   changed> element.  The hyphen
    character '-' means that the\n   corresponding content (attribute or element)
    doesn't exist in a\n   <document> element.  The 'xxx' and 'yyy' are values of
    entity tags\n   (ETag) of an XCAP document.\n   +-----------+----------+-----------+----------+-------------------+\n
    \  | previous- | new-     | <add>     | <body-   | locally cached    |\n   | etag
    \     | etag     | <replace> | not-     | XCAP resource/    |\n   |           |
    \         | <remove>  | changed> | metadata change   |\n   +-----------+----------+-----------+----------+-------------------+\n
    \  | xxx       | yyy      | *         | -        | resource patched, |\n   |           |
    \         |           |          | patch included    |\n   +-----------+----------+-----------+----------+-------------------+\n
    \  | xxx       | yyy      | -         | -        | resource patched, |\n   |           |
    \         |           |          | external document |\n   |           |          |
    \          |          | retrieval         |\n   +-----------+----------+-----------+----------+-------------------+\n
    \  | xxx       | yyy      | -         | *        | only ETag changed |\n   +-----------+----------+-----------+----------+-------------------+\n
    \  | -         | yyy      | -         | -        | resource created  |\n   |           |
    \         |           |          | or exists,        |\n   |           |          |
    \          |          | external document |\n   |           |          |           |
    \         | retrieval         |\n   +-----------+----------+-----------+----------+-------------------+\n
    \  | xxx       | -        | -         | -        | resource removed  |\n   +-----------+----------+-----------+----------+-------------------+\n
    \  Figure 1: <document> element content / corresponding resource changes\n   Each
    <element> element indicates the existing element content of an\n   XCAP document.
    \ It has one mandatory attribute, \"sel\", and\n   optionally, an \"exists\" attribute
    and extension attributes from any\n   namespace.  The \"sel\" attribute of the
    <element> element identifies\n   an XML element of an XCAP document.  It is a
    percent-encoded relative\n   URI following XCAP conventions when selecting elements.
    \ The XCAP\n   Node Selector MUST always locate a unique node, the \"exists\"\n
    \  attribute thus shows whether an element exists or not in the XCAP\n   document.
    \ When the \"exists\" attribute is absent from the <element>\n   element, the
    indicated element still exists in the XCAP document.\n   The located element exists
    as a child element of the <element>\n   element.  In a corner case where the content
    of this element cannot\n   be presented for some reason (e.g., the payload is
    too large)\n   although it exists in the XCAP document, the <element> element
    MUST\n   NOT have any child nodes.\n   As the located XML element is typically
    namespace qualified, all\n   needed namespace declarations MUST exist within the
    <xml-diff>\n   document.  The possible local namespace declarations within the\n
    \  located element exist unmodified as in the source document, similar\n   to
    XCAP conventions.  Other namespace references MUST be resolved\n   from the context
    of the <element> or its parent elements.  The\n   prefixes of qualified names
    (QNames) [W3C.REC-xml-names-20060816] of\n   XML nodes also remain as they originally
    exist in the source XCAP\n   document.\n   Each <attribute> element indicates
    the existing attribute content of\n   an XCAP document.  It has one mandatory
    attribute, \"sel\", and\n   optionally, an \"exists\" attribute and extension
    attributes from any\n   namespace.  The \"sel\" attribute of the <attribute> element
    identifies\n   an XML attribute of an XCAP document.  It is a percent-encoded\n
    \  relative URI following XCAP conventions when selecting attributes.\n   The
    \"exists\" attribute indicates whether or not an attribute exists\n   in the XCAP
    document.  When the \"exists\" attribute is absent from the\n   <attribute> element,
    the indicated attribute still exists in the XCAP\n   document.  The child text
    node of the <attribute> element indicates\n   the value of the located attribute.
    \ Note that if the attribute is\n   namespace qualified, the query parameter of
    the XCAP URI indicates\n   the attached namespace URI and the prefix in the XCAP
    source\n   document.\n   Namespaces of the \"sel\" attribute of the <attribute>
    and <element>\n   elements MUST also be resolved properly.  Section 6.4. of [RFC4825]\n
    \  describes the rules when using namespace prefixes in XCAP Node\n   Selectors.
    \ Without a namespace prefix in an element selector, an\n   XCAP Default Document
    Namespace MUST be applied.  The namespace\n   resolving rules of Patch operation
    elements: <add>, <replace>, and\n   <remove> are described in Section 4.2.1 of
    [RFC5261].\n"
  title: 3.  Structure of an XCAP Diff Document
- contents:
  - "4.  XML Schema\n   The XML Schema for the XCAP diff format.\n     <?xml version=\"1.0\"
    encoding=\"UTF-8\"?>\n     <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n
    \     xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n      targetNamespace=\"urn:ietf:params:xml:ns:xcap-diff\"\n
    \     elementFormDefault=\"qualified\"\n      attributeFormDefault=\"unqualified\">\n
    \     <!-- include patch-ops -->\n      <xs:include\n       schemaLocation=\"urn:ietf:params:xml:schema:patch-ops\"/>\n
    \     <!-- document root -->\n      <xs:element name=\"xcap-diff\">\n       <xs:complexType>\n
    \       <xs:sequence minOccurs=\"0\">\n         <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n
    \         <xs:choice>\n           <xs:element name=\"document\" type=\"documentType\"/>\n
    \          <xs:element name=\"element\" type=\"elementType\"/>\n           <xs:element
    name=\"attribute\" type=\"attributeType\"/>\n          </xs:choice>\n         </xs:sequence>\n
    \        <xs:any namespace=\"##other\" processContents=\"lax\"\n                 minOccurs=\"0\"
    maxOccurs=\"unbounded\"/>\n        </xs:sequence>\n        <xs:attribute name=\"xcap-root\"
    type=\"xs:anyURI\" use=\"required\"/>\n        <xs:anyAttribute processContents=\"lax\"/>\n
    \      </xs:complexType>\n      </xs:element>\n      <!-- xcap document type -->\n
    \     <xs:complexType name=\"documentType\">\n       <xs:choice minOccurs=\"0\">\n
    \       <xs:element name=\"body-not-changed\" type=\"emptyType\"/>\n        <xs:sequence
    minOccurs=\"0\" maxOccurs=\"unbounded\">\n         <xs:choice>\n          <xs:element
    name=\"add\">\n           <xs:complexType mixed=\"true\">\n            <xs:complexContent>\n
    \            <xs:extension base=\"add\">\n              <xs:anyAttribute processContents=\"lax\"/>\n
    \            </xs:extension>\n            </xs:complexContent>\n           </xs:complexType>\n
    \         </xs:element>\n          <xs:element name=\"remove\">\n           <xs:complexType>\n
    \           <xs:complexContent>\n             <xs:extension base=\"remove\">\n
    \             <xs:anyAttribute processContents=\"lax\"/>\n             </xs:extension>\n
    \           </xs:complexContent>\n           </xs:complexType>\n          </xs:element>\n
    \         <xs:element name=\"replace\">\n           <xs:complexType mixed=\"true\">\n
    \           <xs:complexContent>\n             <xs:extension base=\"replace\">\n
    \             <xs:anyAttribute processContents=\"lax\"/>\n             </xs:extension>\n
    \           </xs:complexContent>\n           </xs:complexType>\n          </xs:element>\n
    \         <xs:any namespace=\"##other\" processContents=\"lax\"/>\n         </xs:choice>\n
    \       </xs:sequence>\n       </xs:choice>\n       <xs:attribute name=\"sel\"
    type=\"xs:anyURI\" use=\"required\"/>\n       <xs:attribute name=\"new-etag\"
    type=\"xs:string\"/>\n       <xs:attribute name=\"previous-etag\" type=\"xs:string\"/>\n
    \      <xs:anyAttribute processContents=\"lax\"/>\n      </xs:complexType>\n      <!--
    xcap element type -->\n      <xs:complexType name=\"elementType\">\n       <xs:complexContent
    mixed=\"true\">\n        <xs:restriction base=\"xs:anyType\">\n         <xs:sequence>\n
    \         <xs:any processContents=\"lax\" namespace=\"##any\"\n                  minOccurs=\"0\"
    maxOccurs=\"1\"/>\n         </xs:sequence>\n         <xs:attribute name=\"sel\"
    type=\"xs:string\"\n                       use=\"required\"/>\n         <xs:attribute
    name=\"exists\" type=\"xs:boolean\"/>\n         <xs:anyAttribute processContents=\"lax\"/>\n
    \       </xs:restriction>\n       </xs:complexContent>\n      </xs:complexType>\n
    \     <!-- xcap attribute type -->\n      <xs:complexType name=\"attributeType\">\n
    \      <xs:simpleContent>\n        <xs:extension base=\"xs:string\">\n         <xs:attribute
    name=\"sel\" type=\"xs:string\"\n                       use=\"required\"/>\n         <xs:attribute
    name=\"exists\" type=\"xs:boolean\"/>\n         <xs:anyAttribute processContents=\"lax\"/>\n
    \       </xs:extension>\n       </xs:simpleContent>\n      </xs:complexType>\n
    \     <!-- empty type -->\n      <xs:complexType name=\"emptyType\"/>\n     </xs:schema>\n"
  title: 4.  XML Schema
- contents:
  - "5.  Example Document\n   The following is an example of a document compliant
    to the schema.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <d:xcap-diff
    xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\n                xmlns=\"urn:ietf:params:xml:ns:rls-services\"\n
    \               xcap-root=\"http://xcap.example.com/root/\">\n    <d:document
    new-etag=\"7ahggs\"\n              sel=\"resource-lists/users/sip:joe@example.com/coworkers\"\n
    \             previous-etag=\"8a77f8d\"/>\n    <d:element sel=\"rls-services/users/sip:joe@example.com/index/~~\n
    \  /*/service%5b@uri='sip:marketing@example.com'%5d\"\n             xmlns:rl=\"urn:ietf:params:xml:ns:resource-lists\"\n
    \      ><service uri=\"sip:marketing@example.com\">\n         <list name=\"marketing\">\n
    \          <rl:entry uri=\"sip:joe@example.com\"/>\n           <rl:entry uri=\"sip:sudhir@example.com\"/>\n
    \        </list>\n         <packages>\n           <package>presence</package>\n
    \        </packages>\n       </service></d:element>\n    <d:attribute\n    sel=\"rls-services/users/sip:joe@example.com/index/~~/*/service/@uri\"\n
    \        >sip:marketing@example.com</d:attribute>\n   </d:xcap-diff>\n   This
    indicates that the document with the URI \"http://\n   xcap.example.com/root/resource-lists/users/sip:joe@example.com/\n
    \  coworkers\" has changed.  Its previous entity tag is \"8a77f8d\" and its\n
    \  new one is \"7ahggs\", but actual changes are not shown.  The <service>\n   element
    exists in the rls-services \"index\" document and its full\n   content is shown.
    \ Note that the <service> element is attached with a\n   default namespace declaration
    within the original document.\n   Similarly, \"uri\" attribute content is shown
    from the same \"index\"\n   document as an illustrative example.\n"
  title: 5.  Example Document
- contents:
  - "6.  Basic Requirements for a System Exchanging XCAP Diff Documents\n   Documents
    at an XCAP server are identified by URIs, and updated by\n   XCAP clients with
    HTTP (PUT and DELETE) methods.  The XCAP server\n   assigns a new entity tag value
    for each document version.  An entity\n   tag value is defined by Section 3.11
    of RFC 2616 [RFC2616]: \"An\n   entity tag MUST be unique across all versions
    of all entities\n   associated with a particular resource\".  These entity tags
    are used\n   to protect requests from making overriding changes when multiple
    XCAP\n   clients update the same XCAP document.  An entity tag value can be\n
    \  interpreted as a unique identifier to a specific version of an XCAP\n   document
    in its change history.\n   The entity tag values of XCAP resources also enable
    a reliable way to\n   update the locally cached XCAP resource copies in an XCAP
    diff\n   implementation.  When a diff client applies XCAP diff document\n   changes,
    it MUST apply a resource state change only if entity tag\n   values match with
    octet-by-octet equivalence according to the table\n   defined in Figure 1.  If
    a diff client notices inconsistencies and/or\n   errors when it applies reported
    resource changes, it SHOULD tear down\n   the session.\n   State changes of an
    XCAP document MUST be delivered reliably from a\n   diff notifier to a diff client,
    and a diff client MUST be able to\n   apply all changes of an XCAP document in
    the same chronological order\n   that occurred at an XCAP server.  When using
    an unreliable transport\n   with retransmissions, the application protocol used
    with the XCAP\n   diff MUST ensure that duplicates are dropped.  If an XCAP diff\n
    \  delivery is lost, the diff session MUST be torn down.  Note that a\n   diff
    notifier can easily notice a lost notification when a diff\n   client must respond
    to each XCAP diff delivery.\n   A diff notifier doesn't necessarily report all
    of these XCAP document\n   updates with ETags; it MAY skip over some intermediate
    version of a\n   document, for example, with rapidly changing resources.  However,
    it\n   MUST always report changes consistently to a diff client so that it\n   can
    properly update the latest state (content and ETag) of its\n   locally cached
    resources.\n      As an example, an XCAP document is updated by different 'a',
    'b',\n      and 'c' versions identified with the same corresponding ETag\n      values
    in a relatively short period.  The first reported\n      notification contains
    the 'a' \"new-tag\" information (no \"previous-\n      etag\" attribute), and
    the diff notifier decides to skip the update\n      notification identified by
    the 'b' ETag value.  The second\n      notification to a diff client MUST then
    contain the 'a' \"previous-\n      etag\" and 'c' \"new-etag\" values with optional
    corresponding\n      content changes (from version 'a' to 'c').\n   Since XCAP
    documents are typically confidential, diff notifiers MUST\n   obey the XCAP authorization
    rules.  In practice, this means following\n   the read privilege rules of XCAP
    resources when notifying the\n   authenticated diff clients of changes.  Transport
    SHOULD be secured\n   by encryption.\n      Note: This format specification doesn't
    define how to select the\n      resources whose differences a diff notifier should
    report.  It\n      also doesn't define whether actual content changes should be\n
    \     reported.  Typically, however, a diff client starts a session by\n      sending
    a resource listing request.  Then it compares the remote\n      resource listings
    with locally cached ones, and probably downloads\n      those resources that aren't
    locally cached or whose entity tags\n      differ.  When a diff client receives
    an XCAP diff with a\n      \"previous-etag\" value that matches its current cached
    copy of a\n      document, it can apply the diffs to the cached copy.  As it takes\n
    \     some time to download reference documents, and diff notifications\n      appear
    after actual resource state changes, several round trips\n      may be needed
    before a full synchronization is achieved,\n      especially with rapidly changing
    resources.\n"
  title: 6.  Basic Requirements for a System Exchanging XCAP Diff Documents
- contents:
  - "7.  Security Considerations\n   XCAP diff documents can include changes from
    one version of a\n   document to another version.  As a consequence, if the document\n
    \  itself is sensitive and requires confidentiality, integrity, or\n   authentication,
    then the same applies to the XCAP diff format.\n   Therefore, protocols that transport
    XCAP diff documents must provide\n   sufficient security capabilities for transporting
    the document\n   itself.  Confidential XCAP documents are typically transported
    using\n   TLS-encrypted (Transport Layer Security) [RFC5246] communication; see\n
    \  RFC 4825 [RFC4825] for further security details.\n   When this format is used
    to report content changes of XCAP documents,\n   all security considerations of
    RFC 5261 [RFC5261] apply.  Very\n   frequent updates of XCAP documents and/or
    many diff clients per\n   subscribed resource impose a Denial-of-Service attack
    possibility to\n   the servers processing XCAP diff documents.  An efficient patch\n
    \  processing and throttling can, however, decrease the required overall\n   processings
    and transactions.\n   The SIP event package framework specified in RFC 3265 [RFC3265]
    is\n   the most typical use-case for this format.  Then, an end-to-end SIP\n   encryption
    mechanism, such as Secure/Multipurpose Internet Mail\n   Extensions (S/MIME) described
    in Section 26.2.4 of RFC 3261\n   [RFC3261], SHOULD be used.  If that is not available,
    it is\n   RECOMMENDED that TLS [RFC5246] be used between elements to provide\n
    \  hop-by-hop authentication and encryption mechanisms as described in\n   Section
    26.2.2 (\"SIPS URI Scheme\") and Section 26.3.2.2 (\"Interdomain\n   Requests\")
    of RFC 3261 [RFC3261].  Event packages MAY also have other\n   specific threats
    that MUST be considered on an application-by-\n   application basis.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   There are several IANA considerations associated
    with this\n   specification.\n"
  - contents:
    - "8.1.  application/xcap-diff+xml MIME Type\n   MIME media type name: application\n
      \  MIME subtype name: xcap-diff+xml\n   Mandatory parameters: none\n   Optional
      parameters: Same as the charset parameter application/xml as\n   specified in
      RFC 3023 [RFC3023].\n   Encoding considerations: Same as the encoding considerations
      of\n   application/xml as specified in RFC 3023 [RFC3023].\n   Security considerations:
      See Section 10 of RFC 3023 [RFC3023] and\n   Section 7 of RFC 5874.\n   Interoperability
      considerations: none.\n   Published specification: This document.\n   Applications
      that use this media type: This document type has been\n   used to support manipulation
      of resource lists [RFC4826] using XCAP.\n   Additional Information:\n      Magic
      Number: None\n      File Extension: .xdf\n      Macintosh file type code: \"TEXT\"\n
      \     Personal and email address for further information: Jonathan\n      Rosenberg,
      jdrosen@jdrosen.net\n      Intended usage: COMMON\n      Author/Change controller:
      The IETF.\n"
    title: 8.1.  application/xcap-diff+xml MIME Type
  - contents:
    - "8.2.  URN Sub-Namespace Registration for\n      urn:ietf:params:xml:ns:xcap-diff\n
      \  This section registers a new XML namespace, as per the guidelines in\n   [RFC3688].\n
      \     URI: The URI for this namespace is\n      urn:ietf:params:xml:ns:xcap-diff.\n
      \     Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),\n      Jonathan
      Rosenberg (jdrosen@jdrosen.net).\n      XML:\n  BEGIN\n  <?xml version=\"1.0\"?>\n
      \ <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n       \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n
      \ <html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"content-type\"\n
      \      content=\"text/html;charset=iso-8859-1\"/>\n    <title>XCAP Diff Namespace</title>\n
      \ </head>\n  <body>\n    <h1>Namespace for XCAP Diff</h1>\n    <h2>urn:ietf:params:xml:ns:xcap-diff</h2>\n
      \   <p>See <a\n       href=\"http://www.rfc-editor.org/rfc/rfc5874.txt\">RFC5874</a>.</p>\n
      \ </body>\n  </html>\n  END\n"
    title: 8.2.  URN Sub-Namespace Registration for
  - contents:
    - "8.3.  Schema Registration\n   This section registers a new XML schema per the
      procedures in\n   [RFC3688].\n      URI: urn:ietf:params:xml:schema:xcap-diff\n
      \     Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),\n      Jonathan
      Rosenberg (jdrosen@jdrosen.net).\n      The XML for this schema can be found
      as the sole content of\n      Section 4.\n"
    title: 8.3.  Schema Registration
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgments\n   The authors would like to thank Pavel Dostal, Jeroen
    van Bemmel,\n   Martin Hynar, Anders Lindgren, Mary Barnes, Ben Campbell, Francis\n
    \  Dupont, David Harrington, Alexey Melnikov, Dan Romascanu, and Robert\n   Sparks
    for their valuable comments.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [W3C.REC-xml-20060816]\n             Paoli,
      J., Bray, T., Yergeau, F., Maler, E., and C.\n             Sperberg-McQueen,
      \"Extensible Markup Language (XML) 1.0\n             (Fourth Edition)\", World
      Wide Web Consortium\n             FirstEdition REC-xml- 20060816, August 2006,
      <http://\n             www.w3.org/TR/2006/REC-xml-20060816>.\n   [W3C.REC-xml-c14n-20010315]\n
      \            Boyer, J., \"Canonical XML Version 1.0\", World Wide Web\n             Consortium
      Recommendation REC-xml-c14n-20010315,\n             March 2001, <http://www.w3.org/TR/2001/\n
      \            REC-xml-c14n-20010315>.\n   [W3C.REC-xml-names-20060816]\n              Hollander,
      D., Layman, A., and T. Bray, \"Namespaces in XML\n             1.0 (Second Edition)\",
      World Wide Web Consortium\n             FirstEdition REC-xml-names-20060816,
      August 2006,\n             <http://www.w3.org/TR/ 2006/REC-xml-names-20060816>.\n
      \  [RFC2141] Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n   [RFC2616] Fielding,
      R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\n             L., Leach, P.,
      and T. Berners-Lee, \"Hypertext Transfer\n             Protocol -- HTTP/1.1\",
      RFC 2616, June 1999.\n   [RFC3023] Murata, M., St. Laurent, S., and D.  Kohn,
      \"XML Media\n             Types\", RFC 3023, January 2001.\n   [RFC2648] Moats,
      R., \"A URN Namespace for IETF Documents\", RFC 2648,\n             August 1999.\n
      \  [RFC3688] Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n             January
      2004.\n   [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4825] Rosenberg, J., \"The Extensible
      Markup Language (XML)\n             Configuration Access Protocol (XCAP)\",
      RFC 4825, May 2007.\n   [RFC5261] Urpalainen, J., \"An Extensible Markup Language
      (XML) Patch\n             Operations Framework Utilizing XML Path Language (XPath)\n
      \            Selectors\", RFC 5261, September 2008.\n   [RFC5246] Dierks, T.
      and E. Rescorla, \"The Transport Layer Security\n             (TLS) Protocol
      Version 1.2\", RFC 5246, August 2008.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC5875] Urpalainen, J. and D. Willis, \"An
      Extensible Markup\n             Language (XML) Configuration Access Protocol
      (XCAP) Diff\n             Event Package\", RFC 5875, May 2010.\n   [RFC2778]
      Day, M., Rosenberg, J., and H. Sugano, \"A Model for\n             Presence
      and Instant Messaging\", RFC 2778, February 2000.\n   [RFC3261] Rosenberg, J.,
      Schulzrinne, H., Camarillo, G., Johnston,\n             A., Peterson, J., Sparks,
      R., Handley, M., and E.\n             Schooler, \"SIP: Session Initiation Protocol\",
      RFC 3261,\n             June 2002.\n   [RFC3265] Roach, A., \"Session Initiation
      Protocol (SIP)-Specific\n             Event Notification\", RFC 3265, June 2002.\n
      \  [RFC4662] Roach, A., Campbell, B., and J.  Rosenberg, \"A Session\n             Initiation
      Protocol (SIP) Event Notification Extension for\n             Resource Lists\",
      RFC 4662, August 2006.\n   [RFC4826] Rosenberg, J., \"Extensible Markup Language
      (XML) Formats\n             for Representing Resource Lists\", RFC 4826, May
      2007.\n   [RFC4483] Burger, E., \"A Mechanism for Content Indirection in Session\n
      \            Initiation Protocol (SIP) Messages\", RFC 4483, May 2006.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Informative Examples\n   These informative examples illustrate basic
    features of XCAP diff\n   format.\n   The following documents exist at an XCAP
    server (xcap.example.com)\n   with an imaginary \"tests\" application usage (there's
    no default\n   document namespace defined in this imaginary application usage).\n
    \  http://xcap.example.com/tests/users/sip:joe@example.com/index:\n   <?xml version=\"1.0\"
    encoding=\"UTF-8\"?>\n   <doc id=\"bar\">\n     <note>This is a sample document</note>\n
    \  </doc>\n   and then\n   http://xcap.example.com/tests/users/sip:john@example.com/index:\n
    \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is another
    sample document</note>\n   </doc>\n"
  - contents:
    - "A.1.  Indicating Existing, Changed, or Removed Documents\n   Firstly, an XCAP
      diff document can indicate what documents exist in a\n   collection.  An XCAP
      diff document may then be:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <xcap-diff xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\">\n
      \   <document new-etag=\"7ahggs\"\n              sel=\"tests/users/sip:joe@example.com/index\"/>\n
      \   <document new-etag=\"terteer\"\n              sel=\"tests/users/sip:john@example.com/index\"/>\n
      \  </xcap-diff>\n   This listing indicates current ETags of existing documents
      and their\n   relative URIs.\n   Let's say that Joe adds a new document to his
      collection:\n   PUT /tests/users/sip:joe@example.com/another_document HTTP/1.1\n
      \  Host: xcap.example.com\n   ....\n   Content-Type: application/xml\n   Content-Length:
      [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This
      is another sample document</note>\n   </doc>\n   The requests result header
      has an HTTP ETag \"terteer\" for this new\n   document.\n   Then an XCAP diff
      document may then indicate only the creation of\n   this single new document:\n
      \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n
      \             xcap-root=\"http://xcap.example.com/\">\n    <document new-etag=\"terteer\"\n
      \             sel=\"tests/users/sip:joe@example.com/another_document\"/>\n   </xcap-diff>\n
      \  A \"new-etag\" without a \"previous-etag\" attribute indicates a creation\n
      \  of a new document.\n   Then Joe decides to modify an existing resource:\n
      \  PUT /tests/users/sip:joe@example.com/another_document HTTP/1.1\n   Host:
      xcap.example.com\n   ....\n   Content-Type: application/xml\n   Content-Length:
      [XXX]\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This
      is a modified document</note>\n   </doc>\n   The reported new HTTP ETag is \"huwiias\".\n
      \  Then an XCAP diff document may be:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <xcap-diff xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\">\n
      \   <document previous-etag=\"terteer\" new-etag=\"huwiias\"\n              sel=\"tests/users/sip:joe@example.com/another_document\"/>\n
      \  </xcap-diff>\n   Both \"previous-etag\" and \"new-etag\" attributes signal
      that a\n   modification has happened to a resource, but actual changes are not\n
      \  shown.\n   Let's say that Joe then removes a document from his collection:\n
      \  DELETE /tests/users/sip:joe@example.com/another_document HTTP/1.1\n   Host:
      xcap.example.com\n   This HTTP DELETE request results in the unlinking of the
      resource,\n   and the XCAP diff may be:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <xcap-diff xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\">\n
      \   <document previous-etag=\"huwiias\"\n              sel=\"tests/users/sip:joe@example.com/another_document\"/>\n
      \  </xcap-diff>\n   Thus, a \"previous-etag\" without a \"new-etag\" attribute
      indicates the\n   removal of a resource.\n"
    title: A.1.  Indicating Existing, Changed, or Removed Documents
  - contents:
    - "A.2.  Indicating Actual Changes of Documents\n   Secondly, XCAP diff documents
      are capable of showing actual changes\n   to documents with [RFC5261] patching
      semantics.\n   Now Joe's XCAP client utilizes the XCAP patching capability to
      add a\n   new element to a document:\n   PUT /tests/users/sip:joe@example.com/index/~~/doc/foo
      HTTP/1.1\n   Host: xcap.example.com\n   ....\n   Content-Type: application/xcap-el+xml\n
      \  Content-Length: [XXX]\n   <foo>this is a new element</foo>\n   Since the
      insertion of the element is successful, Joe's XCAP client\n   receives the new
      HTTP ETag \"fgherhryt3\" of the updated \"index\"\n   document.\n   Immediately
      thereafter, Joe's XCAP client issues another HTTP request\n   (this request
      could even be pipelined):\n   PUT /tests/users/sip:joe@example.com/index/~~/doc/bar
      HTTP/1.1\n   Host: xcap.example.com\n   ....\n   Content-Type: application/xcap-el+xml\n
      \  Content-Length: [XXX]\n   <bar>this is a bar element\n   </bar>\n   The reported
      new HTTP ETag of \"index\" is now \"dgdgdfgrrr\".\n   And then Joe's XCAP client
      issues yet another HTTP request:\n   PUT /tests/users/sip:joe@example.com/index/~~/doc/foobar
      HTTP/1.1\n   Host: xcap.example.com\n   ....\n   Content-Type: application/xcap-el+xml\n
      \  Content-Length: [XXX]\n   <foobar>this is a foobar element</foobar>\n   The
      reported new ETag of \"index\" is now \"63hjjsll\".\n   XCAP diff format document
      may then indicate these XCAP component\n   changes by:\n   <?xml version=\"1.0\"
      encoding=\"UTF-8\"?>\n   <d:xcap-diff xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\n
      \               xcap-root=\"http://xcap.example.com/\">\n    <d:document previous-etag=\"7ahggs3\"\n
      \               sel=\"tests/users/sip:joe@example.com/index\"\n                new-etag=\"63hjjsll\">\n
      \    <d:add sel=\"*\"\n       ><foo>this is a new element</foo><bar>this is
      a bar element\n   </bar><foobar>this is a foobar element</foobar></d:add>\n
      \   </d:document>\n   </d:xcap-diff>\n   Note how several XCAP component modifications
      were aggregated\n   together, and full history information got lost.\n   Alternatively,
      the content could have been:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <d:xcap-diff xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\">\n
      \   <d:document previous-etag=\"7ahggs\"\n                sel=\"tests/users/sip:joe@example.com/index\"\n
      \               new-etag=\"fgherhryt3\">\n      <d:add sel=\"*\"\n       ><foo>this
      is a new element</foo></d:add></d:document>\n    <d:document previous-etag=\"fgherhryt3\"\n
      \               sel=\"tests/users/sip:joe@example.com/index\"\n                new-etag=\"dgdgdfgrrr\">\n
      \     <d:add sel=\"*\"\n       ><bar>this is a bar element\n   </bar></d:add></d:document>\n
      \   <d:document previous-etag=\"dgdgdfgrrr\"\n                sel=\"tests/users/sip:joe@example.com/index\"\n
      \               new-etag=\"63hjjsll\">\n      <d:add sel=\"*\"\n       ><foobar>this
      is a foobar element</foobar></d:add></d:document>\n   </d:xcap-diff>\n   This
      shows the full ETag change history of a document, and ETags\n   change chronologically
      in the reported XML document order.\n"
    title: A.2.  Indicating Actual Changes of Documents
  - contents:
    - "A.3.  Indicating XCAP Component Contents\n   Lastly, the XCAP diff format can
      also indicate the existing full\n   contents of XCAP components, i.e., elements
      or attributes:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <d:xcap-diff
      xmlns:d=\"urn:ietf:params:xml:ns:xcap-diff\"\n              xcap-root=\"http://xcap.example.com/\">\n
      \   <d:attribute sel=\"tests/users/sip:joe@example.com/index/~~/doc/@id\"\n
      \    >bar</d:attribute>\n    <d:element sel=\"tests/users/sip:joe@example.com/index/~~/*/foo\"\n
      \      ><foo>this is a new element</foo></d:element>\n   </d:xcap-diff>\n   Note
      that the HTTP ETag value of the new document is not shown as it\n   is irrelevant
      for this use-case.\n   Then Joe's XCAP client removes the \"id\" attribute:\n
      \  DELETE /tests/users/sip:joe@example.com/index/~~/doc/@id HTTP/1.1\n   Host:
      xcap.example.com\n   ....\n   Content-Length: 0\n   And the XCAP diff document
      may then be:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xcap-diff xmlns=\"urn:ietf:params:xml:ns:xcap-diff\"\n
      \             xcap-root=\"http://xcap.example.com/\">\n    <attribute sel=\"tests/users/sip:joe@example.com/index/~~/doc/@id\"\n
      \    exists=\"0\"/>\n   </xcap-diff>\n   This indicates that the subscribed
      attribute was removed from the\n   document.  The element content in this use-case
      may be discarded from\n   the XCAP diff document, for example, when the size
      of XCAP diff\n   document would be impractically large to the transport layer.\n"
    title: A.3.  Indicating XCAP Component Contents
  title: Appendix A.  Informative Examples
- contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   jdrosen.net\n   Monmouth, NJ\n
    \  US\n   EMail: jdrosen@jdrosen.net\n   URI:   http://www.jdrosen.net\n   Jari
    Urpalainen\n   Nokia\n   Itamerenkatu 11-13\n   Helsinki  00180\n   Finland\n
    \  Phone: +358 7180 37686\n   EMail: jari.urpalainen@nokia.com\n"
  title: Authors' Addresses
