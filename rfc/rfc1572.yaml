- contents:
  - '                       Telnet Environment Option

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document specifies a mechanism for passing environment\n   information
    between a telnet client and server.  Use of this\n   mechanism enables a telnet
    user to propagate configuration\n   information to a remote host when connecting.\n
    \  This document corrects some errors in [1].\n"
  title: Abstract
- contents:
  - "1.  Command Names and Codes\n      NEW-ENVIRON     39\n          IS               0\n
    \         SEND             1\n          INFO             2\n          VAR              0\n
    \         VALUE            1\n          ESC              2\n          USERVAR
    \         3\n"
  title: 1.  Command Names and Codes
- contents:
  - "2.  Command Meanings\n   IAC WILL NEW-ENVIRON\n      The sender of this command
    is willing to send environment\n      variables.\n   IAC WONT NEW-ENVIRON\n      The
    sender of this command refuses to send environment variables.\n   IAC DO NEW-ENVIRON\n
    \     The sender of this command is willing to receive environment\n      variables.\n
    \  IAC DONT NEW-ENVIRON\n      The sender of this command refuses to accept environment\n
    \     variables.\n   IAC SB NEW-ENVIRON SEND [ type ... [ type ... [ ... ] ] ]
    IAC SE\n      The sender of this command requests that the remote side send its\n
    \     environment variables.  The \"type\" may be either VAR or USERVAR,\n      to
    indicate either well known or user variable names.  Only the\n      side that
    is DO NEW-ENVIRON may initiate a SEND command.  If a\n      list of variables
    is specified, then only those variables should\n      be sent.  If no list is
    specified, then the default environment,\n      of both well known and user defined
    variables, should be sent.  If\n      one of the variables has no name, then all
    the variables of that\n      type (well known or user defined)  in the default
    environment\n      should be sent.\n   IAC SB NEW-ENVIRON IS type ... [ VALUE
    ... ] [ type ... [ VALUE ... ]\n   [ ... ] ] IAC SE\n      The sender of this
    command is sending environment variables.  This\n      command is sent in response
    to a SEND request.  Only the side that\n      is WILL NEW-ENVIRON may send an
    IS command.  The \"type\"/VALUE\n      pairs must be returned in the same order
    as the SEND request\n      specified them, and there must be a response for each
    \"type ...\"\n      explicitly requested.  The \"type\" will be VAR or USERVAR.\n
    \     Multiple environment variables may be sent.  The characters\n      following
    a \"type\" up to the next \"type\" or VALUE specify the\n      variable name.
    \ The characters following a VALUE up to the next\n      \"type\" specify the
    value of the variable.  If a \"type\" is not\n      followed by a VALUE (e.g.,
    by another VAR, USERVAR, or IAC SE)\n      then that variable is undefined.  If
    a VALUE is immediately\n      followed by a \"type\" or IAC, then the variable
    is defined, but has\n      no value.  If an IAC is contained between the IS and
    the IAC SE,\n      it must be sent as IAC IAC.  If a variable or a value contains
    a\n      VAR, it must be sent as ESC VAR.  If a variable or a value\n      contains
    a USERVAR, it must be sent as ESC USERVAR.  If a variable\n      or a value contains
    a VALUE, it must be sent as ESC VALUE.  If a\n      variable or a value contains
    an ESC, it must be sent as ESC ESC.\n   IAC SB NEW-ENVIRON INFO type ... [ VALUE
    ... ] [ type ... [ VALUE ...\n   ] [ ... ] ] IAC SE\n      The sender of this
    command is sending information about\n      environment variables that have changed.
    \ It is identical to the\n      IS command, except that the command is INFO instead
    of IS.  Only\n      the side that is WILL NEW-ENVIRON may send an INFO command.
    \ The\n      INFO command is not to be used to send initial information; the\n
    \     SEND/IS sequence is to be used for that.  The INFO command is to\n      be
    used to propagate changes in environment variables, and may be\n      spontaneously
    generated.\n"
  title: 2.  Command Meanings
- contents:
  - "3.  Default Specification\n   The default specification for this option is\n
    \     WONT NEW-ENVIRON\n      DONT NEW-ENVIRON\n   meaning there will not be any
    exchange of environment information.\n"
  title: 3.  Default Specification
- contents:
  - "4.  Motivation\n   Many operating systems have startup information and environment\n
    \  variables that contain information that should be propagated to\n   remote
    machines when Telnet connections are established.  Rather than\n   create a new
    Telnet option each time someone comes up with some new\n   information that they
    need propagated through a Telnet session, but\n   that the Telnet session itself
    doesn't really need to know about,\n   this generic information option can be
    used.\n"
  title: 4.  Motivation
- contents:
  - "5.  Well Known Variables\n   USER        This variable is used to transmit the
    user or account\n               name that the client wishes to log into on the
    remote\n               system.  The format of the value the USER variable is\n
    \              system dependent, as determined by the remote system.\n   JOB         This
    variable is used to transmit the job ID that the\n               client wishes
    to use when logging into the remote system.\n               The format of the
    value the JOB variable is system\n               dependent, as determined by the
    remote system.\n   ACCT        This variable is used to transmit the account ID
    that the\n               client wishes to use when logging into the remote system.\n
    \              The format of the value the ACCT variable is system\n               dependent,
    as determined by the remote system.\n   PRINTER     This variable is used to identify
    the default location\n               for printer output.  Because there does not
    currently\n               exist a standard way of naming a printer on a network,\n
    \              the format of this variable is currently undefined.\n   SYSTEMTYPE
    \ This is used to transmit the type of operating system on\n               the
    system that sends this variable.  It value is\n               identical to the
    value of the SYSTEM (SYST) command in\n               FTP [4].  The format of
    the value shall have as its first\n               word one of the system names
    listed in the current\n               version of the Assigned Numbers document
    [5].\n   DISPLAY     This variable is used to transmit the X display location\n
    \              of the client.  The format for the value of the DISPLAY\n               variable
    is:\n                  <host>:<dispnum>[.<screennum>]\n               This information
    is identical to the information passed\n               using the Telnet X-DISPLAY-LOCATION
    option.  If both the\n               DISPLAY environment variable, and the X-DISPLAY-LOCATION\n
    \              option [6] are received, and they contain conflicting\n               information,
    the most recently received information\n               received should be used.\n
    \  Because it is impossible to anticipate all variables that users may\n   wish
    to exchange, the USERVAR type is provided to allow users to\n   transmit arbitrary
    variable/value pairs.  The use of an additional\n   type allows implementations
    to distinguish between values derived by\n   the remote host software and values
    supplied by the user.  Paranoid\n   implementations will most likely treat both
    types with an equal level\n   of distrust.  The results of a name-space collision
    between a well-\n   known and a user variable are implementation specific.\n"
  title: 5.  Well Known Variables
- contents:
  - "6.  Implementation Rules\n   WILL and DO are used only at the beginning of the
    connection to\n   obtain and grant permission for future negotiations.\n   Once
    the two hosts have exchanged a WILL and a DO, the sender of the\n   DO NEW-ENVIRON
    is free to request that environment variables be sent.\n   Only the sender of
    the DO may send requests (IAC SB NEW-ENVIRON SEND\n   IAC SE) and only the sender
    of the WILL may transmit actual\n   environment information (via the IAC SB NEW-ENVIRON
    IS ... IAC SE\n   command).  Though this option may be used at any time throughout
    the\n   life of the telnet connection, the exchange of environment\n   information
    will usually happen at the startup of the connection.\n   This is because many
    operating systems only have mechanisms for\n   propagating environment information
    at process creation, so the\n   information is needed before the user logs in.\n
    \  The receiving host is not required to put all variables that it\n   receives
    into the environment.  For example, if the client should\n   send across USERVAR
    \"TERM\" VALUE \"xterm\" as an environment variable,\n   and the TERMINAL-TYPE
    [3] option has already been used to determine\n   the terminal type, the server
    may safely ignore the TERM variable.\n   Also, some startup information may be
    used in other ways; for\n   example, the values for \"USER\", \"ACCT\" and \"PROJ\"
    values might be\n   used to decide which account to log into, and might never
    be put into\n   the users environment.  In general, if the server has already\n
    \  determined the value of an environment variable by some more accurate\n   means,
    or if it does not understand a variable name, it may ignore\n   the value sent
    in the NEW-ENVIRON option.  The server may also prefer\n   to just put all unknown
    information into the users environment.  This\n   is the suggested method of implementation,
    because it allows the user\n   the most flexibility.\n   The following is an example
    of use of the option:\n       Host1                            Host2\n       IAC
    DO NEW-ENVIRON\n                                        IAC WILL NEW-ENVIRON\n
    \      [ Host1 is now free to request environment information ]\n       IAC SB
    NEW-ENVIRON SEND VAR\n       \"USER\" VAR \"ACCT\" VAR USERVAR\n       IAC SE\n
    \      [ The server has now explicitly asked for the USER and ACCT\n         variables,
    the default set of well known environment variables,\n         and the default
    set of user defined variables.  Note that the\n         client includes the USER
    information twice; once because it was\n         explicitly asked for, and once
    because it is part of the\n         default environment.  ]\n                                        IAC
    SB NEW-ENVIRON IS VAR \"USER\"\n                                        VALUE
    \"joe\" VAR \"ACCT\" VALUE\n                                        \"kernel\"
    VAR \"USER\" VALUE \"joe\"\n                                        VAR \"DISPLAY\"
    VALUE \"foo:0.0\"\n                                        USERVAR \"SHELL\" VALUE
    \"/bin/csh\"\n                                        IAC SE\n   It is legal for
    a client to respond with an empty environment (no\n   data between the IAC SB
    and IAC SE) when no well-defined or user\n   variables are currently defined.
    \ For example:\n      IAC SB NEW-ENVIRON IS IAC SE\n   is a valid response to
    any of the following:\n      IAC SB NEW-ENVIRON SEND IAC SE\n      IAC SB NEW-ENVIRON
    SEND VAR IAC SE\n      IAC SB NEW-ENVIRON SEND USERVAR IAC SE\n      IAC SB NEW-ENVIRON
    SEND VAR USERVAR IAC SE\n   (The last example is equivalent to the first...)\n
    \  The earlier version of this specification [1] incorrectly reversed\n   the
    values for VAR and VALUE,  which put the specification at odds\n   with existing
    implementations.  In order to resolve that problem, as\n   well as other minor
    problems, a new option number has been assigned\n   to the NEW-ENVIRON option.
    \ This allows implementations of this memo\n   to interoperate with no ambiguity.\n
    \  For a discussion on how to implement to interoperate with the various\n   implementations
    that pre-date this memo, see [2].\n   It is expected that any implementation that
    supports the Telnet NEW-\n   ENVIRON option will support all of this specification.\n"
  title: 6.  Implementation Rules
- contents:
  - "7.  Security Concerns\n   It is important for an implementor of the NEW-ENVIRON
    option to\n   understand the interaction of setting options and the\n   login/authentication
    process. Specifically careful analysis should be\n   done to determine which variables
    are \"safe\" to set prior to having\n   the client login.  An example of a bad
    choice would be permitting a\n   variable to be changed that allows an intruder
    to circumvent or\n   compromise the login/authentication program itself.\n"
  title: 7.  Security Concerns
- contents:
  - "8.  References\n   [1] Borman, D., Editor, \"Telnet Environment Option\", RFC
    1408, Cray\n       Research, Inc., January 1993.\n   [2] Borman, D., \"Telnet
    Environment Option Interoperability Issues\",\n       RFC 1571, Cray Research,
    Inc., January 1994.\n   [3] VanBokkelen, J., \"Telnet Terminal-Type Option\",
    RFC 1091, FTP\n       Software, Inc., February 1989.\n   [4] Postel, J., and J.
    Reynolds, \"File Transfer Protocol (FTP)\", STD\n       9, RFC 959, USC/Information
    Sciences Institute, October 1985.\n   [5] Reynolds, J., and J. Postel, \"Assigned
    Numbers\", STD 2, RFC 1340,\n       USC/Information Sciences Institute, July 1992.\n
    \  [6] Marcy, G., \"Telnet X Display Location Option\", RFC 1096, Carnegie\n       Mellon
    University, March 1989.\n"
  title: 8.  References
- contents:
  - "Acknowledgements\n   The original version of this document was written by Dave
    Borman of\n   Cray Research, Inc.  In addition, the comments of the Telnet Working\n
    \  Group of the IETF are gratefully acknowledged.\n"
  title: Acknowledgements
- contents:
  - "Security Considerations\n   Security issues are discussed in Section 7.\n"
  title: Security Considerations
- contents:
  - "Editor's Address\n   Steve Alexander\n   Lachman Technology, Inc.\n   1901 North
    Naper Boulevard\n   Naperville, IL 60563-8895\n   Phone: (708) 505-9555 x256\n
    \  EMail: stevea@lachman.com\n"
  title: Editor's Address
