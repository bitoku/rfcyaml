- title: __initial_text__
  contents:
  - "                 TCP Slow Start, Congestion Avoidance,\n             Fast Retransmit,\
    \ and Fast Recovery Algorithms\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Modern implementations of TCP contain four intertwined algorithms\n\
    \   that have never been fully documented as Internet standards:  slow\n   start,\
    \ congestion avoidance, fast retransmit, and fast recovery.  [2]\n   and [3] provide\
    \ some details on these algorithms, [4] provides\n   examples of the algorithms\
    \ in action, and [5] provides the source\n   code for the 4.4BSD implementation.\
    \  RFC 1122 requires that a TCP\n   must implement slow start and congestion avoidance\
    \ (Section 4.2.2.15\n   of [1]), citing [2] as the reference, but fast retransmit\
    \ and fast\n   recovery were implemented after RFC 1122.  The purpose of this\n\
    \   document is to document these four algorithms for the Internet.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Much of this memo is taken from \"TCP/IP Illustrated, Volume\
    \ 1:  The\n   Protocols\" by W. Richard Stevens (Addison-Wesley, 1994) and \"\
    TCP/IP\n   Illustrated, Volume 2: The Implementation\" by Gary R. Wright and W.\n\
    \   Richard Stevens (Addison-Wesley, 1995).  This material is used with\n   the\
    \ permission of Addison-Wesley.  The four algorithms that are\n   described were\
    \ developed by Van Jacobson.\n"
- title: 1.  Slow Start
  contents:
  - "1.  Slow Start\n   Old TCPs would start a connection with the sender injecting\
    \ multiple\n   segments into the network, up to the window size advertised by\
    \ the\n   receiver.  While this is OK when the two hosts are on the same LAN,\n\
    \   if there are routers and slower links between the sender and the\n   receiver,\
    \ problems can arise.  Some intermediate router must queue\n   the packets, and\
    \ it's possible for that router to run out of space.\n   [2] shows how this naive\
    \ approach can reduce the throughput of a TCP\n   connection drastically.\n  \
    \ The algorithm to avoid this is called slow start.  It operates by\n   observing\
    \ that the rate at which new packets should be injected into\n   the network is\
    \ the rate at which the acknowledgments are returned by\n   the other end.\n \
    \  Slow start adds another window to the sender's TCP:  the congestion\n   window,\
    \ called \"cwnd\".  When a new connection is established with a\n   host on another\
    \ network, the congestion window is initialized to one\n   segment (i.e., the\
    \ segment size announced by the other end, or the\n   default, typically 536 or\
    \ 512).  Each time an ACK is received, the\n   congestion window is increased\
    \ by one segment.  The sender can\n   transmit up to the minimum of the congestion\
    \ window and the\n   advertised window.  The congestion window is flow control\
    \ imposed by\n   the sender, while the advertised window is flow control imposed\
    \ by\n   the receiver.  The former is based on the sender's assessment of\n  \
    \ perceived network congestion; the latter is related to the amount of\n   available\
    \ buffer space at the receiver for this connection.\n   The sender starts by transmitting\
    \ one segment and waiting for its\n   ACK.  When that ACK is received, the congestion\
    \ window is incremented\n   from one to two, and two segments can be sent.  When\
    \ each of those\n   two segments is acknowledged, the congestion window is increased\
    \ to\n   four.  This provides an exponential growth, although it is not\n   exactly\
    \ exponential because the receiver may delay its ACKs,\n   typically sending one\
    \ ACK for every two segments that it receives.\n   At some point the capacity\
    \ of the internet can be reached, and an\n   intermediate router will start discarding\
    \ packets.  This tells the\n   sender that its congestion window has gotten too\
    \ large.\n   Early implementations performed slow start only if the other end\
    \ was\n   on a different network.  Current implementations always perform slow\n\
    \   start.\n"
- title: 2.  Congestion Avoidance
  contents:
  - "2.  Congestion Avoidance\n   Congestion can occur when data arrives on a big\
    \ pipe (a fast LAN) and\n   gets sent out a smaller pipe (a slower WAN).  Congestion\
    \ can also\n   occur when multiple input streams arrive at a router whose output\n\
    \   capacity is less than the sum of the inputs.  Congestion avoidance is\n  \
    \ a way to deal with lost packets.  It is described in [2].\n   The assumption\
    \ of the algorithm is that packet loss caused by damage\n   is very small (much\
    \ less than 1%), therefore the loss of a packet\n   signals congestion somewhere\
    \ in the network between the source and\n   destination.  There are two indications\
    \ of packet loss:  a timeout\n   occurring and the receipt of duplicate ACKs.\n\
    \   Congestion avoidance and slow start are independent algorithms with\n   different\
    \ objectives.  But when congestion occurs TCP must slow down\n   its transmission\
    \ rate of packets into the network, and then invoke\n   slow start to get things\
    \ going again.  In practice they are\n   implemented together.\n   Congestion\
    \ avoidance and slow start require that two variables be\n   maintained for each\
    \ connection: a congestion window, cwnd, and a slow\n   start threshold size,\
    \ ssthresh.  The combined algorithm operates as\n   follows:\n   1.  Initialization\
    \ for a given connection sets cwnd to one segment\n       and ssthresh to 65535\
    \ bytes.\n   2.  The TCP output routine never sends more than the minimum of cwnd\n\
    \       and the receiver's advertised window.\n   3.  When congestion occurs (indicated\
    \ by a timeout or the reception\n       of duplicate ACKs), one-half of the current\
    \ window size (the\n       minimum of cwnd and the receiver's advertised window,\
    \ but at\n       least two segments) is saved in ssthresh.  Additionally, if the\n\
    \       congestion is indicated by a timeout, cwnd is set to one segment\n   \
    \    (i.e., slow start).\n   4.  When new data is acknowledged by the other end,\
    \ increase cwnd,\n       but the way it increases depends on whether TCP is performing\n\
    \       slow start or congestion avoidance.\n      If cwnd is less than or equal\
    \ to ssthresh, TCP is in slow start;\n      otherwise TCP is performing congestion\
    \ avoidance.  Slow start\n      continues until TCP is halfway to where it was\
    \ when congestion\n      occurred (since it recorded half of the window size that\
    \ caused\n      the problem in step 2), and then congestion avoidance takes over.\n\
    \      Slow start has cwnd begin at one segment, and be incremented by\n     \
    \ one segment every time an ACK is received.  As mentioned earlier,\n      this\
    \ opens the window exponentially:  send one segment, then two,\n      then four,\
    \ and so on.  Congestion avoidance dictates that cwnd be\n      incremented by\
    \ segsize*segsize/cwnd each time an ACK is received,\n      where segsize is the\
    \ segment size and cwnd is maintained in bytes.\n      This is a linear growth\
    \ of cwnd, compared to slow start's\n      exponential growth.  The increase in\
    \ cwnd should be at most one\n      segment each round-trip time (regardless how\
    \ many ACKs are\n      received in that RTT), whereas slow start increments cwnd\
    \ by the\n      number of ACKs received in a round-trip time.\n   Many implementations\
    \ incorrectly add a small fraction of the segment\n   size (typically the segment\
    \ size divided by 8) during congestion\n   avoidance.  This is wrong and should\
    \ not be emulated in future\n   releases.\n"
- title: 3.  Fast Retransmit
  contents:
  - "3.  Fast Retransmit\n   Modifications to the congestion avoidance algorithm were\
    \ proposed in\n   1990 [3].  Before describing the change, realize that TCP may\n\
    \   generate an immediate acknowledgment (a duplicate ACK) when an out-\n   of-order\
    \ segment is received (Section 4.2.2.21 of [1], with a note\n   that one reason\
    \ for doing so was for the experimental fast-\n   retransmit algorithm).  This\
    \ duplicate ACK should not be delayed.\n   The purpose of this duplicate ACK is\
    \ to let the other end know that a\n   segment was received out of order, and\
    \ to tell it what sequence\n   number is expected.\n   Since TCP does not know\
    \ whether a duplicate ACK is caused by a lost\n   segment or just a reordering\
    \ of segments, it waits for a small number\n   of duplicate ACKs to be received.\
    \  It is assumed that if there is\n   just a reordering of the segments, there\
    \ will be only one or two\n   duplicate ACKs before the reordered segment is processed,\
    \ which will\n   then generate a new ACK.  If three or more duplicate ACKs are\n\
    \   received in a row, it is a strong indication that a segment has been\n   lost.\
    \  TCP then performs a retransmission of what appears to be the\n   missing segment,\
    \ without waiting for a retransmission timer to\n   expire.\n"
- title: 4.  Fast Recovery
  contents:
  - "4.  Fast Recovery\n   After fast retransmit sends what appears to be the missing\
    \ segment,\n   congestion avoidance, but not slow start is performed.  This is\
    \ the\n   fast recovery algorithm.  It is an improvement that allows high\n  \
    \ throughput under moderate congestion, especially for large windows.\n   The\
    \ reason for not performing slow start in this case is that the\n   receipt of\
    \ the duplicate ACKs tells TCP more than just a packet has\n   been lost.  Since\
    \ the receiver can only generate the duplicate ACK\n   when another segment is\
    \ received, that segment has left the network\n   and is in the receiver's buffer.\
    \  That is, there is still data\n   flowing between the two ends, and TCP does\
    \ not want to reduce the\n   flow abruptly by going into slow start.\n   The fast\
    \ retransmit and fast recovery algorithms are usually\n   implemented together\
    \ as follows.\n   1.  When the third duplicate ACK in a row is received, set ssthresh\n\
    \       to one-half the current congestion window, cwnd, but no less\n       than\
    \ two segments.  Retransmit the missing segment.  Set cwnd to\n       ssthresh\
    \ plus 3 times the segment size.  This inflates the\n       congestion window\
    \ by the number of segments that have left the\n       network and which the other\
    \ end has cached (3).\n   2.  Each time another duplicate ACK arrives, increment\
    \ cwnd by the\n       segment size.  This inflates the congestion window for the\n\
    \       additional segment that has left the network.  Transmit a\n       packet,\
    \ if allowed by the new value of cwnd.\n   3.  When the next ACK arrives that\
    \ acknowledges new data, set cwnd\n       to ssthresh (the value set in step 1).\
    \  This ACK should be the\n       acknowledgment of the retransmission from step\
    \ 1, one round-trip\n       time after the retransmission.  Additionally, this\
    \ ACK should\n       acknowledge all the intermediate segments sent between the\
    \ lost\n       packet and the receipt of the first duplicate ACK.  This step is\n\
    \       congestion avoidance, since TCP is down to one-half the rate it\n    \
    \   was at when the packet was lost.\n   The fast retransmit algorithm first appeared\
    \ in the 4.3BSD Tahoe\n   release, and it was followed by slow start.  The fast\
    \ recovery\n   algorithm appeared in the 4.3BSD Reno release.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security considerations are not discussed in\
    \ this memo.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  B. Braden, ed., \"Requirements for Internet Hosts --\n\
    \        Communication Layers,\" RFC 1122, Oct. 1989.\n   [2]  V. Jacobson, \"\
    Congestion Avoidance and Control,\" Computer\n        Communication Review, vol.\
    \ 18, no. 4, pp. 314-329, Aug. 1988.\n        ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z.\n\
    \   [3]  V. Jacobson, \"Modified TCP Congestion Avoidance Algorithm,\"\n     \
    \   end2end-interest mailing list, April 30, 1990.\n        ftp://ftp.isi.edu/end2end/end2end-interest-1990.mail.\n\
    \   [4]  W. R. Stevens, \"TCP/IP Illustrated, Volume 1: The Protocols\",\n   \
    \     Addison-Wesley, 1994.\n   [5]  G. R. Wright, W. R. Stevens, \"TCP/IP Illustrated,\
    \ Volume 2:\n        The Implementation\", Addison-Wesley, 1995.\n"
- title: 'Author''s  Address:'
  contents:
  - "Author's  Address:\n    W. Richard Stevens\n    1202 E. Paseo del Zorro\n   \
    \ Tucson, AZ  85718\n    Phone: 520-297-9416\n    EMail: rstevens@noao.edu\n \
    \   Home Page: http://www.noao.edu/~rstevens\n"
