- title: __initial_text__
  contents:
  - "           End-to-End Signing and Object Encryption for the\n           Extensible\
    \ Messaging and Presence Protocol (XMPP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines methods of end-to-end signing and object encryption\n\
    \   for the Extensible Messaging and Presence Protocol (XMPP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.   Requirements . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3.   Securing Messages  . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.   Securing Presence  . . . . . . . . . . . . . . . . . . .\
    \ . .   9\n   5.   Securing Arbitrary XMPP Data . . . . . . . . . . . . . . .\
    \ .  13\n   6.   Rules for S/MIME Generation and Handling . . . . . . . . . .\
    \  15\n   7.   Recipient Error Handling . . . . . . . . . . . . . . . . . .  18\n\
    \   8.   Secure Communications Through a Gateway  . . . . . . . . . .  20\n  \
    \ 9.   urn:ietf:params:xml:xmpp-e2e Namespace . . . . . . . . . . .  21\n   10.\
    \  application/xmpp+xml Media Type  . . . . . . . . . . . . . .  21\n   11.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . .  22\n   12.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . .  22\n   13.  References . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  23\n   A.   Schema for urn:ietf:params:xml:ns:xmpp-e2e\
    \ . . . . . . . . .  26\n   Author's Address. . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  26\n   Full Copyright Statement. . . . . . . . . . . . . .\
    \ . . . . . . .  27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines methods of end-to-end signing and object\
    \ encryption\n   for the Extensible Messaging and Presence Protocol (XMPP).  (For\n\
    \   information about XMPP, see [XMPP-CORE] and [XMPP-IM].)  The method\n   specified\
    \ herein enables a sender to sign and/or encrypt an instant\n   message sent to\
    \ a specific recipient, sign and/or encrypt presence\n   information that is directed\
    \ to a specific user, and sign and/or\n   encrypt any arbitrary XMPP stanza directed\
    \ to a specific user.  This\n   memo thereby helps the XMPP specifications meet\
    \ the requirements\n   specified in [IMP-REQS].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document inherits terminology defined in [CMS], [IMP-MODEL],\n\
    \   [SMIME], and [XMPP-CORE].\n   The capitalized key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\",\n   \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in BCP\n   14, RFC 2119 [TERMS].\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   For the purposes of this memo, we stipulate the following\n\
    \   requirements:\n   1.  The method defined MUST address signing and encryption\n\
    \       requirements for minimal instant messaging and presence, as those\n  \
    \     are defined in [IMP-REQS].  In particular, the method MUST\n       address\
    \ the following requirements, which are copied here\n       verbatim from [IMP-REQS]:\n\
    \       *  The protocol MUST provide means to ensure confidence that a\n     \
    \     received message (NOTIFICATION or INSTANT MESSAGE) has not\n          been\
    \ corrupted or tampered with.  (Section 2.5.1)\n       *  The protocol MUST provide\
    \ means to ensure confidence that a\n          received message (NOTIFICATION\
    \ or INSTANT MESSAGE) has not\n          been recorded and played back by an adversary.\
    \  (Section\n          2.5.2)\n       *  The protocol MUST provide means to ensure\
    \ that a sent message\n          (NOTIFICATION or INSTANT MESSAGE) is only readable\
    \ by ENTITIES\n          that the sender allows.  (Section 2.5.3)\n       *  The\
    \ protocol MUST allow any client to use the means to ensure\n          non-corruption,\
    \ non-playback, and privacy, but the protocol\n          MUST NOT require that\
    \ all clients use these means at all\n          times.  (Section 2.5.4)\n    \
    \   *  When A establishes a SUBSCRIPTION to B's PRESENCE INFORMATION,\n      \
    \    the protocol MUST provide A means of verifying the accurate\n          receipt\
    \ of the content B chooses to disclose to A.  (Section\n          5.1.4)\n   \
    \    *  The protocol MUST provide A means of verifying that the\n          presence\
    \ information is accurate, as sent by B.  (Section\n          5.3.1)\n       *\
    \  The protocol MUST provide A means of ensuring that no other\n          PRINCIPAL\
    \ C can see the content of M.  (Section 5.4.6)\n       *  The protocol MUST provide\
    \ A means of ensuring that no other\n          PRINCIPAL C can tamper with M,\
    \ and B means to verify that no\n          tampering has occurred.  (Section 5.4.7)\n\
    \   2.  The method defined MUST enable interoperability with non-XMPP\n      \
    \ messaging systems that support the Common Presence and Instant\n       Messaging\
    \ (CPIM) specifications published by the Instant\n       Messaging and Presence\
    \ (IMPP) Working Group.  Two corollaries of\n       this requirement are:\n  \
    \     *  Prior to signing and/or encrypting, the format of an instant\n      \
    \    message MUST conform to the CPIM Message Format defined in\n          [MSGFMT].\n\
    \       *  Prior to signing and/or encrypting, the format of presence\n      \
    \    information MUST conform to the CPP Presence Information Data\n         \
    \ Format defined in [PIDF].\n   3.  The method MUST follow the required procedures\
    \ (including the\n       specific algorithms) defined in [CPIM] and [CPP].  In\
    \ particular,\n       these documents specify:\n       *  Signing MUST use [SMIME]\
    \ signatures with [CMS] SignedData.\n       *  Encryption MUST use [SMIME] encryption\
    \ with [CMS]\n          EnvelopeData.\n   4.  In order to enable interoperable\
    \ implementations, sending and\n       receiving applications MUST implement the\
    \ algorithms specified\n       under Mandatory-to-Implement Cryptographic Algorithms\
    \ (Section\n       6.10).\n   We further stipulate that the following functionality\
    \ is out of scope\n   for this memo:\n   o  Discovery of support for this protocol.\
    \  An entity could discover\n      whether another entity supports this protocol\
    \ by (1) attempting to\n      send signed or encrypted stanzas and receiving an\
    \ error stanza\n      (\"technical\" discovery) or a textual message in reply\
    \ (\"social\"\n      discovery) if the protocol is not supported, or (2) using\
    \ a\n      dedicated service discovery protocol, such as [DISCO] or [CAPS].\n\
    \      However, the definition of a service discovery protocol is out of\n   \
    \   scope for this memo.\n   o  Signing or encryption of XMPP groupchat messages,\
    \ which are\n      mentioned in [XMPP-IM] but not defined therein since they are\
    \ not\n      required by [IMP-REQS]; such messages are best specified in [MUC].\n\
    \   o  Signing or encryption of broadcasted presence as described in\n      [XMPP-IM]\
    \ (the methods defined herein apply to directed presence\n      only).\n   o \
    \ Signing or encryption of communications that occur within the\n      context\
    \ of applications other than instant messaging and presence\n      as those are\
    \ described in [IMP-MODEL] and [IMP-REQS].\n"
- title: 3.  Securing Messages
  contents:
  - '3.  Securing Messages

    '
- title: 3.1.  Process for Securing Messages
  contents:
  - "3.1.  Process for Securing Messages\n   In order to sign and/or encrypt a message,\
    \ a sending agent MUST use\n   the following procedure:\n   1.  Generate a \"\
    Message/CPIM\" object as defined in [MSGFMT].\n   2.  Sign and/or encrypt both\
    \ the headers and content of the\n       \"Message/CPIM\" object as specified\
    \ in Requirement 3 of Section 2\n       above.\n   3.  Provide the resulting signed\
    \ and/or encrypted object within an\n       XML CDATA section (see Section 2.7\
    \ of [XML]) contained in an\n       <e2e/> child of a <message/> stanza, where\
    \ the <e2e/> element is\n       qualified by the 'urn:ietf:params:xml:ns:xmpp-e2e'\
    \ namespace as\n       specified more fully in Section 9 below.\n"
- title: 3.2.  Example of a Signed Message
  contents:
  - "3.2.  Example of a Signed Message\n   The following example illustrates the defined\
    \ steps for signing a\n   message.\n   First, the sending agent generates a \"\
    Message/CPIM\" object in\n   accordance with the rules and formats specified in\
    \ [MSGFMT].\n   Example 1: Sender generates \"Message/CPIM\" object:\n   |   Content-type:\
    \ Message/CPIM\n   |\n   |   From: Juliet Capulet <im:juliet@example.com>\n  \
    \ |   To: Romeo Montague <im:romeo@example.net>\n   |   DateTime: 2003-12-09T11:45:36.66Z\n\
    \   |   Subject: Imploring\n   |\n   |   Content-type: text/plain; charset=utf-8\n\
    \   |   Content-ID: <1234567890@example.com>\n   |\n   |   Wherefore art thou,\
    \ Romeo?\n   Once the sending agent has generated the \"Message/CPIM\" object,\
    \ the\n   sending agent may sign it.  The result is a multipart [SMIME] object\n\
    \   (see [MULTI]) that has a Content-Type of \"multipart/signed\" and\n   includes\
    \ two parts: one whose Content-Type is \"Message/CPIM\" and\n   another whose\
    \ Content-Type is \"application/pkcs7-signature\".\n   Example 2: Sender generates\
    \ multipart/signed object:\n   |   Content-Type: multipart/signed; boundary=next;\n\
    \   |                 micalg=sha1;\n   |                 protocol=application/pkcs7-signature\n\
    \   |\n   |   --next\n   |   Content-type: Message/CPIM\n   |\n   |   From: Juliet\
    \ Capulet <im:juliet@example.com>\n   |   To: Romeo Montague <im:romeo@example.net>\n\
    \   |   DateTime: 2003-12-09T23:45:36.66Z\n   |   Subject: Imploring\n   |\n \
    \  |   Content-type: text/plain; charset=utf-8\n   |   Content-ID: <1234567890@example.com>\n\
    \   |\n   |   Wherefore art thou, Romeo?\n   |   --next\n   |   Content-Type:\
    \ application/pkcs7-signature\n   |   Content-Disposition: attachment;handling=required;\\\
    \n   |                                   filename=smime.p7s\n   |\n   |   [signed\
    \ body part]\n   |\n   |   --next--\n   The sending agent now wraps the \"multipart/signed\"\
    \ object in an XML\n   CDATA section, which is contained in an <e2e/> element\
    \ that is\n   included as a child element of the XMPP message stanza and that\
    \ is\n   qualified by the 'urn:ietf:params:xml:ns:xmpp-e2e' namespace.\n   Example\
    \ 3: Sender generates XMPP message stanza:\n   |   <message to='romeo@example.net/orchard'\
    \ type='chat'>\n   |     <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n   | \
    \  <![CDATA[\n   |   Content-Type: multipart/signed; boundary=next;\n   |    \
    \             micalg=sha1;\n   |                 protocol=application/pkcs7-signature\n\
    \   |\n   |   --next\n   |   Content-type: Message/CPIM\n   |\n   |   From: Juliet\
    \ Capulet <im:juliet@example.com>\n   |   To: Romeo Montague <im:romeo@example.net>\n\
    \   |   DateTime: 2003-12-09T23:45:36.66Z\n   |   Subject: Imploring\n   |\n \
    \  |   Content-type: text/plain; charset=utf-8\n   |   Content-ID: <1234567890@example.com>\n\
    \   |\n   |   Wherefore art thou, Romeo?\n   |   --next\n   |   Content-Type:\
    \ application/pkcs7-signature\n   |   Content-Disposition: attachment;handling=required;\\\
    \n   |                                   filename=smime.p7s\n   |\n   |   [signed\
    \ body part]\n   |\n   |   --next--\n   |   ]]>\n   |     </e2e>\n   |   </message>\n"
- title: 3.3.  Example of an Encrypted Message
  contents:
  - "3.3.  Example of an Encrypted Message\n   The following example illustrates the\
    \ defined steps for encrypting a\n   message.\n   First, the sending agent generates\
    \ a \"Message/CPIM\" object in\n   accordance with the rules and formats specified\
    \ in [MSGFMT].\n   Example 4: Sender generates \"Message/CPIM\" object:\n   |\
    \   Content-type: Message/CPIM\n   |\n   |   From: Juliet Capulet <im:juliet@example.com>\n\
    \   |   To: Romeo Montague <im:romeo@example.net>\n   |   DateTime: 2003-12-09T11:45:36.66Z\n\
    \   |   Subject: Imploring\n   |\n   |   Content-type: text/plain; charset=utf-8\n\
    \   |   Content-ID: <1234567890@example.com>\n   |\n   |   Wherefore art thou,\
    \ Romeo?\n   Once the sending agent has generated the \"Message/CPIM\" object,\
    \ the\n   sending agent may encrypt it.\n   Example 5: Sender generates encrypted\
    \ object:\n   |   U2FsdGVkX19okeKTlLxa/1n1FE/upwn1D20GhPWqhDWlexKMUKYJInTWzERP+vcQ\n\
    \   |   /OxFs40uc9Fx81a5/62p/yPb/UWnuG6SR6o3Ed2zwcusDImyyz125HFERdDUMBC9\n   |\
    \   Pt6Z4cTGKBmJzZBGyuc3Y+TMBTxqFFUAxeWaoxnZrrl+LP72vwbriYc3KCMxDbQL\n   |   Igc1Vzs5/5JecegMieNY24SlNyX9HMFRNFpbI64vLxYEk55A+3IYbZsluCFT31+a\n\
    \   |   +GeAvJkvH64LRV4mPbUhENTQ2wbAwnOTvbLIaQEQrii78xNEh+MK8Bx7TBTvi4yH\n   |\
    \   Ddzf9Sim6mtWsXaCAvWSyp0X91d7xRJ4JIgKfPzkxNsWJFCLthQS1p734eDxXVd3\n   |   i08lEHzyll6htuEr59ZDAw==\n\
    \   The sending agent now wraps the encrypted object in an XML CDATA\n   section,\
    \ which is contained in an <e2e/> element that is included as\n   a child element\
    \ of the XMPP message stanza and that is qualified by\n   the 'urn:ietf:params:xml:ns:xmpp-e2e'\
    \ namespace.\n   Example 6: Sender generates XMPP message stanza:\n   |   <message\
    \ to='romeo@example.net/orchard' type='chat'>\n   |     <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n\
    \   |   <![CDATA[\n   |   U2FsdGVkX19okeKTlLxa/1n1FE/upwn1D20GhPWqhDWlexKMUKYJInTWzERP+vcQ\n\
    \   |   /OxFs40uc9Fx81a5/62p/yPb/UWnuG6SR6o3Ed2zwcusDImyyz125HFERdDUMBC9\n   |\
    \   Pt6Z4cTGKBmJzZBGyuc3Y+TMBTxqFFUAxeWaoxnZrrl+LP72vwbriYc3KCMxDbQL\n   |   Igc1Vzs5/5JecegMieNY24SlNyX9HMFRNFpbI64vLxYEk55A+3IYbZsluCFT31+a\n\
    \   |   +GeAvJkvH64LRV4mPbUhENTQ2wbAwnOTvbLIaQEQrii78xNEh+MK8Bx7TBTvi4yH\n   |\
    \   Ddzf9Sim6mtWsXaCAvWSyp0X91d7xRJ4JIgKfPzkxNsWJFCLthQS1p734eDxXVd3\n   |   i08lEHzyll6htuEr59ZDAw==\n\
    \   |   ]]>\n   |     </e2e>\n   |   </message>\n"
- title: 4.  Securing Presence
  contents:
  - '4.  Securing Presence

    '
- title: 4.1.  Process for Securing Presence Information
  contents:
  - "4.1.  Process for Securing Presence Information\n   In order to sign and/or encrypt\
    \ presence information, a sending agent\n   MUST use the following procedure:\n\
    \   1.  Generate an \"application/pidf+xml\" object as defined in [PIDF].\n  \
    \ 2.  Sign and/or encrypt the \"application/pidf+xml\" object as\n       specified\
    \ in Requirement 3 of Section 2 above.\n   3.  Provide the resulting signed and/or\
    \ encrypted object within an\n       XML CDATA section (see Section 2.7 of [XML])\
    \ contained in an\n       <e2e/> child of a <presence/> stanza, where the <e2e/>\
    \ element is\n       qualified by the 'urn:ietf:params:xml:ns:xmpp-e2e' namespace.\
    \ The\n       <presence/> stanza MUST include a 'to' attribute, i.e., it must\n\
    \       be an instance of directed presence as defined in [XMPP-IM].\n"
- title: 4.2.  Example of Signed Presence Information
  contents:
  - "4.2.  Example of Signed Presence Information\n   The following example illustrates\
    \ the defined steps for signing\n   presence information.\n   First, the sending\
    \ agent generates an \"application/pidf+xml\" object\n   in accordance with the\
    \ rules and formats specified in [PIDF].\n   Example 7: Sender generates \"application/pidf+xml\"\
    \ object:\n   |   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   |   <presence\
    \ xmlns=\"urn:ietf:params:xml:ns:pidf\"\n   |             xmlns:im=\"urn:ietf:params:xml:ns:pidf:im\"\
    \n   |             entity=\"pres:juliet@example.com\">\n   |     <tuple id=\"\
    hr0zny\"\n   |       <status>\n   |         <basic>open</basic>\n   |        \
    \ <im:im>away</im:im>\n   |       </status>\n   |       <note xml:lang=\"en\"\
    >retired to the chamber</note>\n   |       <timestamp>2003-12-09T23:53:11.31</timestamp>\n\
    \   |     </tuple>\n   |   </presence>\n   Once the sending agent has generated\
    \ the \"application/pidf+xml\"\n   object, the sending agent may sign it.  The\
    \ result is a multipart\n   [SMIME] object (see [MULTI]) that has a Content-Type\
    \ of\n   \"multipart/signed\" and includes two parts: one whose Content-Type is\n\
    \   \"application/pidf+xml\" and another whose Content-Type is\n   \"application/pkcs7-signature\"\
    .\n   Example 8: Sender generates multipart/signed object:\n   |   Content-Type:\
    \ multipart/signed; boundary=next;\n   |                 micalg=sha1;\n   |  \
    \               protocol=application/pkcs7-signature\n   |\n   |   --next\n  \
    \ |   Content-type: application/pidf+xml\n   |   Content-ID: <2345678901@example.com>\n\
    \   |\n   |   <xml version=\"1.0\" encoding=\"UTF-8\"?>\n   |   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n   |             xmlns:im=\"urn:ietf:params:xml:ns:pidf:im\"\
    \n   |             entity=\"pres:juliet@example.com\">\n   |     <tuple id=\"\
    hr0zny\">\n   |       <status&gt;\n   |         <basic>open</basic>\n   |    \
    \     <im:im>away</im:im>\n   |       </status>\n   |       <note xml:lang=\"\
    en\">retired to the chamber</note>\n   |       <timestamp>2003-12-09T23:53:11.31Z</timestamp>\n\
    \   |     </tuple>\n   |   </presence>\n   |   --next\n   |   Content-Type: application/pkcs7-signature\n\
    \   |   Content-Disposition: attachment;handling=required;\\\n   |           \
    \                        filename=smime.p7s\n   |\n   |   [signed body part]\n\
    \   |\n   |   --next--\n   The sending agent now wraps the \"multipart/signed\"\
    \ object in an XML\n   CDATA section, which is contained in an <e2e/> element\
    \ that is\n   included as a child element of the XMPP message stanza and that\
    \ is\n   qualified by the 'urn:ietf:params:xml:ns:xmpp-e2e' namespace.\n   Example\
    \ 9: Sender generates XMPP presence stanza:\n   |   <presence to='romeo@example.net/orchard'>\n\
    \   |     <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n   |   <![CDATA[\n  \
    \ |   Content-Type: multipart/signed; boundary=next;\n   |                 micalg=sha1;\n\
    \   |                 protocol=application/pkcs7-signature\n   |\n   |   --next\n\
    \   |   Content-type: application/pidf+xml\n   |   Content-ID: <2345678901@example.com>\n\
    \   |\n   |   <xml version=\"1.0\" encoding=\"UTF-8\"?>\n   |   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n   |             xmlns:im=\"urn:ietf:params:xml:ns:pidf:im\"\
    \n   |             entity=\"pres:juliet@example.com\">\n   |     <tuple id=\"\
    hr0zny\">\n   |       <status>\n   |         <basic>open</basic>\n   |       \
    \  <im:im>away</im:im>\n   |       </status>\n   |       <note xml:lang=\"en\"\
    >retired to the chamber</note>\n   |       <timestamp>2003-12-09T23:53:11.31Z</timestamp>\n\
    \   |     </tuple>\n   |   </presence>\n   |   --next\n   |   Content-Type: application/pkcs7-signature\n\
    \   |   Content-Disposition: attachment;handling=required;\\\n   |           \
    \                        filename=smime.p7s\n   |\n   |   [signed body part]\n\
    \   |\n   |   --next--\n   |   ]]>\n   |     </e2e>\n   |   </presence>\n"
- title: 4.3.  Example of Encrypted Presence Information
  contents:
  - "4.3.  Example of Encrypted Presence Information\n   The following example illustrates\
    \ the defined steps for encrypting\n   presence information.\n   First, the sending\
    \ agent generates an \"application/pidf+xml\" object\n   in accordance with the\
    \ rules and formats specified in [PIDF].\n   Example 10: Sender generates \"application/pidf+xml\"\
    \ object:\n   |   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   |   <presence\
    \ xmlns=\"urn:ietf:params:xml:ns:pidf\"\n   |             xmlns:im=\"urn:ietf:params:xml:ns:pidf:im\"\
    \n   |             entity=\"pres:juliet@example.com\">\n   |     <tuple id=\"\
    hr0zny\"\n   |       <status>\n   |         <basic>open</basic>\n   |        \
    \ <im:im>away</im:im>\n   |       </status>\n   |       <note xml:lang=\"en\"\
    >retired to the chamber</note>\n   |       <timestamp>2003-12-09T23:53:11.31</timestamp>\n\
    \   |     </tuple>\n   |   </presence>\n   Once the sending agent has generated\
    \ the \"application/pidf+xml\"\n   object, the sending agent may encrypt it.\n\
    \   Example 11: Sender generates encrypted object:\n   |   U2FsdGVkX18VJPbx5GMdFPTPZrHLC9QGiVP+ziczu6zWZLFQxae6O5PP6iqpr2No\n\
    \   |   zOvBVMWvYeRAT0zd18hr6qsqKiGl/GZpAAbTvPtaBxeIykxsd1+CX+U+iw0nEGCr\n   |\
    \   bjiQrk0qUKJ79bNxwRnqdidjhyTpKSbOJC0XZ8CTe7AE9KDM3Q+uk+O3jrqX4byL\n   |   GBlKThbzKidxz32ObojPEEwfFiM/yUeqYUP1OcJpUmeQ8lcXhD6tcx+m2MAyYYLP\n\
    \   |   boKQxpLknxRnbM8T/voedlnFLbbDu69mOlxDPbr1mHZd3hDsyFudb1fb4rI3Kw0K\n   |\
    \   Nq+3udr2IkysviJDgQo+xGIQUG/5sED/mAaPRlj4f/JtTzvT4EaQTawv69ntXfKV\n   |   MCr9KdIMMdjdJzOJkYLoAhNVrcZn5tw8WsJGwuKuhYb/SShy7InzOapPaPAl7/Mm\n\
    \   |   PHj7zj3NZ6EEIweDOuAwWlIG/dT506tci27+EW7JnXwMPnFMkF+6a7tr/0Y+iiej\n   |\
    \   woJxUIBqCOgX+U7srHpK2NYtNTZ7UQp2V0yEx1JV8+Y=\n   The sending agent now wraps\
    \ the encrypted object in an XML CDATA\n   section, which is contained in an <e2e/>\
    \ element that is included as\n   a child element of the XMPP message stanza and\
    \ that is qualified by\n   the 'urn:ietf:params:xml:ns:xmpp-e2e' namespace.\n\
    \   Example 12: Sender generates XMPP presence stanza:\n   |   <presence to='romeo@example.net/orchard'>\n\
    \   |     <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n   |   <![CDATA[\n  \
    \ |   U2FsdGVkX18VJPbx5GMdFPTPZrHLC9QGiVP+ziczu6zWZLFQxae6O5PP6iqpr2No\n   | \
    \  zOvBVMWvYeRAT0zd18hr6qsqKiGl/GZpAAbTvPtaBxeIykxsd1+CX+U+iw0nEGCr\n   |   bjiQrk0qUKJ79bNxwRnqdidjhyTpKSbOJC0XZ8CTe7AE9KDM3Q+uk+O3jrqX4byL\n\
    \   |   GBlKThbzKidxz32ObojPEEwfFiM/yUeqYUP1OcJpUmeQ8lcXhD6tcx+m2MAyYYLP\n   |\
    \   boKQxpLknxRnbM8T/voedlnFLbbDu69mOlxDPbr1mHZd3hDsyFudb1fb4rI3Kw0K\n   |   Nq+3udr2IkysviJDgQo+xGIQUG/5sED/mAaPRlj4f/JtTzvT4EaQTawv69ntXfKV\n\
    \   |   MCr9KdIMMdjdJzOJkYLoAhNVrcZn5tw8WsJGwuKuhYb/SShy7InzOapPaPAl7/Mm\n   |\
    \   PHj7zj3NZ6EEIweDOuAwWlIG/dT506tci27+EW7JnXwMPnFMkF+6a7tr/0Y+iiej\n   |   woJxUIBqCOgX+U7srHpK2NYtNTZ7UQp2V0yEx1JV8+Y=\n\
    \   |   ]]>\n   |     </e2e>\n   |   </presence>\n"
- title: 5.  Securing Arbitrary XMPP Data
  contents:
  - "5.  Securing Arbitrary XMPP Data\n   The foregoing sections of this memo describe\
    \ how to secure \"least\n   common denominator\" messaging and presence data of\
    \ the kind that can\n   be directly translated into the MSGFMT or PIDF formats.\
    \  However,\n   XMPP possesses a third base-level stanza type (<iq/>) in addition\
    \ to\n   <message/> and <presence/>, as well as the ability to include\n   extended\
    \ XML data within arbitrary child elements of the three core\n   stanza types.\
    \  Therefore, it would be desirable to secure such data\n   if possible.\n   Because\
    \ [MSGFMT] specifies the ability to encapsulate any MIME type,\n   the approach\
    \ taken in this memo is to include arbitrary XMPP data in\n   an XML media type\
    \ named \"application/xmpp+xml\" as specified more\n   fully in Section 10 below.\n\
    \   The following examples illustrate the structure of the\n   \"application/xmpp+xml\"\
    \ MIME type.  (Note: The\n   'http://jabber.org/protocol/evil' namespace used\
    \ in these examples is\n   associated with an April Fool's protocol written to\
    \ be the instant\n   messaging equivalent of RFC 3514; it is included only as\
    \ an instance\n   of extended information included in an XML stanza and should\
    \ not be\n   taken seriously as a functional XMPP extension.)\n   Example 13:\
    \ Message stanza with extended data contained in\n   \"application/xmpp+xml\"\
    \ MIME type:\n   |   <?xml version='1.0' encoding='UTF-8'?>\n   |   <xmpp xmlns='jabber:client'>\n\
    \   |     <message\n   |         from='iago@example.com/pda'\n   |         to='emilia@example.com/cell'>\n\
    \   |       <body>\n   |         I told him what I thought, and told no more\n\
    \   |         Than what he found himself was apt and true.\n   |       </body>\n\
    \   |       <evil xmlns='http://jabber.org/protocol/evil'/>\n   |     </message>\n\
    \   |   </xmpp>\n   Example 14: Presence stanza with extended data contained in\n\
    \   \"application/xmpp+xml\" MIME type:\n   |   <?xml version='1.0' encoding='UTF-8'?>\n\
    \   |   <xmpp xmlns='jabber:client'>\n   |     <presence from='iago@example.com/pda'>\n\
    \   |       <show>dnd</show>\n   |       <status>Fomenting dissension</status>\n\
    \   |       <evil xmlns='http://jabber.org/protocol/evil'/>\n   |     </presence>\n\
    \   |   </xmpp>\n   Example 15: IQ stanza with extended data contained in \"application/\n\
    \   xmpp+xml\" MIME type:\n   |   <?xml version='1.0' encoding='UTF-8'?>\n   |\
    \   <xmpp xmlns='jabber:client'>\n   |     <iq type='result'\n   |         from='iago@example.com/pda'\n\
    \   |         to='emilia@example.com/cell'\n   |         id='evil1'>\n   |   \
    \    <query xmlns='jabber:iq:version'>\n   |         <name>Stabber</name>\n  \
    \ |         <version>666</version>\n   |         <os>FiendOS</os>\n   |      \
    \ </query>\n   |       <evil xmlns='http://jabber.org/protocol/evil'/>\n   | \
    \    </iq>\n   |   </xmpp>\n   Just as with the \"Message/CPIM\" and \"application/pidf+xml\"\
    \ objects,\n   the \"application/xmpp+xml\" object would be signed and/or encrypted,\n\
    \   then encapsulated within an XML CDATA section (see Section 2.7 of\n   [XML])\
    \ contained in an <e2e/> child of a <presence/> stanza, where\n   the <e2e/> element\
    \ is qualified by the\n   'urn:ietf:params:xml:ns:xmpp-e2e' namespace.\n"
- title: 6.  Rules for S/MIME Generation and Handling
  contents:
  - '6.  Rules for S/MIME Generation and Handling

    '
- title: 6.1.  Certificate Enrollment
  contents:
  - "6.1.  Certificate Enrollment\n   [SMIME] does not specify how to obtain a certificate\
    \ from a\n   certificate authority, but instead mandates that every sending agent\n\
    \   must already have a certificate.  The PKIX Working Group has, at the\n   time\
    \ of this writing, produced two separate standards for certificate\n   enrollment:\
    \ [CMP] and [CMC].  Which method to use for certificate\n   enrollment is outside\
    \ the scope of this memo.\n"
- title: 6.2.  Certificate Retrieval
  contents:
  - "6.2.  Certificate Retrieval\n   A receiving agent MUST provide some certificate\
    \ retrieval mechanism\n   in order to gain access to certificates for recipients\
    \ of digital\n   envelopes.  This memo does not address how S/MIME agents handle\n\
    \   certificates, only what they do after a certificate has been\n   validated\
    \ or rejected.  S/MIME certification issues are covered in\n   [CERT].\n   However,\
    \ at a minimum, for initial S/MIME deployment, a user agent\n   SHOULD automatically\
    \ generate a message to an intended recipient\n   requesting that recipient's\
    \ certificate in a signed return message.\n   Receiving and sending agents SHOULD\
    \ also provide a mechanism to allow\n   a user to \"store and protect\" certificates\
    \ for correspondents in such\n   a way so as to guarantee their later retrieval.\n"
- title: 6.3.  Certificate Names
  contents:
  - "6.3.  Certificate Names\n   End-entity certificates used by XMPP entities in\
    \ the context of this\n   memo SHOULD contain a valid instant messaging and presence\
    \ address.\n   The address SHOULD be specified as both an 'im:' URI (for instant\n\
    \   messaging, as defined in [CPIM]) and a 'pres:' URI (for presence, as\n   defined\
    \ in [CPP]); each of these URIs SHOULD be specified in a\n   separate GeneralName\
    \ entry of type uniformResourceIdentifier inside\n   the subjectAltName (i.e.,\
    \ two separate entries).  Information in the\n   subject distinguished name SHOULD\
    \ be ignored.\n   Each URI MUST be of the form <im:address> or <pres:address>,\
    \ where\n   the \"address\" portion is an XMPP address (also referred to as a\n\
    \   Jabber Identifier or JID) as defined in [XMPP-CORE], prepended with\n   the\
    \ 'im:' or 'pres:' URI scheme.  The address SHOULD be of the form\n   <node@domain>\
    \ (i.e., a \"bare JID\"), although any valid JID form MAY\n   be used.\n   The\
    \ value of the JID contained in the XMPP 'from' attribute MUST\n   match a JID\
    \ provided in the signer's certificate, with the exception\n   that the resource\
    \ identifier portion of the JID contained in the\n   'from' attribute SHOULD be\
    \ ignored for matching purposes.\n   Receiving agents MUST check that the sending\
    \ JID matches a JID\n   provided in the signer's certificate, with the exception\
    \ that the\n   resource identifier portion of the JID contained in the 'from'\n\
    \   attribute SHOULD be ignored for matching purposes.  A receiving agent\n  \
    \ SHOULD provide some explicit alternate processing of the stanza if\n   this\
    \ comparison fails, which may be to display a message informing\n   the recipient\
    \ of the addresses in the certificate or other\n   certificate details.\n   The\
    \ subject alternative name extension is used in S/MIME as the\n   preferred means\
    \ to convey the instant messaging and presence address\n   that corresponds to\
    \ the entity for this certificate.  Any XMPP\n   address present in the certificate\
    \ MUST be encoded using the ASN.1\n   Object Identifier \"id-on-xmppAddr\" as\
    \ specified in Section 5.1.1 of\n   [XMPP-CORE].\n"
- title: 6.4.  Transfer Encoding
  contents:
  - "6.4.  Transfer Encoding\n   Because it is expected that XMPP applications will\
    \ not interface with\n   older 7-bit systems, the transfer encoding (as defined\
    \ in Section\n   3.1.2 of [SMIME]) MUST be \"binary\".\n"
- title: 6.5.  Order of Signing and Encrypting
  contents:
  - "6.5.  Order of Signing and Encrypting\n   If a stanza is both signed and encrypted,\
    \ it SHOULD be signed first,\n   then encrypted.\n"
- title: 6.6.  Inclusion of Certificates
  contents:
  - "6.6.  Inclusion of Certificates\n   If the sender and recipient are involved\
    \ in an active messaging\n   session over a period of time, the sending agent\
    \ SHOULD include the\n   sender's certificate along with at least one encrypted\
    \ message stanza\n   every five minutes.  Outside the context of an active messaging\n\
    \   session, the sending agent SHOULD include the sender's certificate\n   along\
    \ with each encrypted message stanza.  A sending agent MAY\n   include the sender's\
    \ certificate along with each encrypted presence\n   stanza.  However, a sending\
    \ agent SHOULD NOT include a certificate\n   more than once every five minutes.\n"
- title: 6.7.  Attachment and Checking of Signatures
  contents:
  - "6.7.  Attachment and Checking of Signatures\n   Sending agents SHOULD attach\
    \ a signature to each encrypted XML\n   stanza.  If a signature is attached, a\
    \ Content-Disposition header\n   field (as defined in [DISP]) SHOULD be included\
    \ to specify how the\n   signature is to be handled by the receiving application.\n\
    \   If the receiving agent determines that the signature attached to an\n   encrypted\
    \ XML stanza is invalid, it SHOULD NOT present the stanza to\n   the intended\
    \ recipient (human or application), SHOULD provide some\n   explicit alternate\
    \ processing of the stanza (which may be to display\n   a message informing the\
    \ recipient that the attached signature is\n   invalid), and MAY return a stanza\
    \ error to the sender as described\n   under Recipient Error Handling (Section\
    \ 7).\n"
- title: 6.8.  Decryption
  contents:
  - "6.8.  Decryption\n   If the receiving agent is unable to decrypt the encrypted\
    \ XML stanza,\n   it SHOULD NOT present the stanza to the intended recipient (human\
    \ or\n   application), SHOULD provide some explicit alternate processing of\n\
    \   the stanza (which may be to display a message informing the recipient\n  \
    \ that it has received a stanza that cannot be decrypted), and MAY\n   return\
    \ a stanza error to the sender as described under Recipient\n   Error Handling\
    \ (Section 7).\n"
- title: 6.9.  Inclusion and Checking of Timestamps
  contents:
  - "6.9.  Inclusion and Checking of Timestamps\n   Timestamps are included in \"\
    Message/CPIM\" and \"application/pidf+xml\"\n   objects to help prevent replay\
    \ attacks.  All timestamps MUST conform\n   to [DATETIME] and be presented as\
    \ UTC with no offset, including\n   fractions of a second as appropriate.  Absent\
    \ a local adjustment to\n   the sending agent's perceived time or the underlying\
    \ clock time, the\n   sending agent MUST ensure that the timestamps it sends to\
    \ the\n   receiver increase monotonically (if necessary by incrementing the\n\
    \   seconds fraction in the timestamp if the clock returns the same time\n   for\
    \ multiple requests).  The following rules apply to the receiving\n   application:\n\
    \   o  It MUST verify that the timestamp received is within five minutes\n   \
    \   of the current time.\n   o  It SHOULD verify that the timestamp received is\
    \ greater than any\n      timestamp received in the last 10 minutes which passed\
    \ the\n      previous check.\n   o  If any of the foregoing checks fails, the\
    \ timestamp SHOULD be\n      presented to the receiving entity (human or application)\
    \ marked as\n      \"old timestamp\", \"future timestamp\", or \"decreasing timestamp\"\
    ,\n      and the receiving entity MAY return a stanza error to the sender\n  \
    \    as described under Recipient Error Handling (Section 7).\n"
- title: 6.10.  Mandatory-to-Implement Cryptographic Algorithms
  contents:
  - "6.10.  Mandatory-to-Implement Cryptographic Algorithms\n   All implementations\
    \ MUST support the following algorithms.\n   Implementations MAY support other\
    \ algorithms as well.\n   For CMS SignedData:\n   o  The SHA-1 message digest\
    \ as specified in [CMS-ALG] section 2.1.\n   o  The RSA (PKCS #1 v1.5) with SHA-1\
    \ signature algorithm, as\n      specified in [CMS-ALG] section 3.2.\n   For CMS\
    \ EnvelopedData:\n   o  The RSA (PKCS #1 v1.5) key transport, as specified in\
    \ [CMS-ALG]\n      section 4.2.1.\n   o  The AES-128 encryption algorithm in CBC\
    \ mode, as specified in\n      [CMS-AES].\n"
- title: 7.  Recipient Error Handling
  contents:
  - "7.  Recipient Error Handling\n   When an XMPP entity receives an XML stanza containing\
    \ data that is\n   signed and/or encrypted using the protocol described herein,\
    \ several\n   scenarios are possible:\n   Case #1: The receiving application does\
    \ not understand the protocol.\n   Case #2: The receiving application understands\
    \ the protocol and is\n      able to decrypt the payload and verify the sender's\
    \ signature.\n   Case #3: The receiving application understands the protocol and\
    \ is\n      able to decrypt the payload and verify the sender's signature, but\n\
    \      the timestamps fail the checks specified above under Checking of\n    \
    \  Timestamps (Section 6.9).\n   Case #4: The receiving application understands\
    \ the protocol and is\n      able to decrypt the payload but is unable to verify\
    \ the sender's\n      signature.\n   Case #5: The receiving application understands\
    \ the protocol but is\n      unable to decrypt the payload.\n   In Case #1, the\
    \ receiving application MUST do one and only one of the\n   following: (1) ignore\
    \ the <e2e/> extension, (2) ignore the entire\n   stanza, or (3) return a <service-unavailable/>\
    \ error to the sender,\n   as described in [XMPP-CORE].\n   In Case #2, the receiving\
    \ application MUST NOT return a stanza error\n   to the sender, since this is\
    \ the success case.\n   In Case #3, the receiving application MAY return a <not-acceptable/>\n\
    \   error to the sender (as described in [XMPP-CORE]), optionally\n   supplemented\
    \ by an application-specific error condition element\n   <bad-timestamp/> as shown\
    \ below:\n   Example 16: Recipient returns <not-acceptable/> error:\n   <message\
    \ from='romeo@example.net/orchard' type='chat'>\n     <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n\
    \     [CDATA section here]\n     </e2e>\n     <error type='modify'>\n       <not-acceptable\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n       <bad-timestamp xmlns='urn:ietf:params:xml:xmpp-e2e'/>\n\
    \     </error>\n   </message>\n   In Case #4, the receiving application SHOULD\
    \ return a\n   <not-acceptable/> error to the sender (as described in [XMPP-CORE]),\n\
    \   optionally supplemented by an application-specific error condition\n   element\
    \ <unverified-signature/> as shown below:\n   Example 17: Recipient returns <not-acceptable/>\
    \ error:\n   <message from='romeo@example.net/orchard' type='chat'>\n     <e2e\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n     [CDATA section here]\n     </e2e>\n\
    \     <error type='modify'>\n       <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n\
    \       <unverified-signature xmlns='urn:ietf:params:xml:xmpp-e2e'/>\n     </error>\n\
    \   </message>\n   In Case #5, the receiving application SHOULD return a <bad-request/>\n\
    \   error to the sender (as described in [XMPP-CORE]), optionally\n   supplemented\
    \ by an application-specific error condition element\n   <decryption-failed/>\
    \ as shown below:\n   Example 18: Recipient returns <bad-request/> error:\n  \
    \ <message from='romeo@example.net/orchard' type='chat'>\n     <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'>\n\
    \     [CDATA section here]\n     </e2e>\n     <error type='modify'>\n       <bad-request\
    \ xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n       <decryption-failed xmlns='urn:ietf:params:xml:xmpp-e2e'/>\n\
    \     </error>\n   </message>\n"
- title: 8.  Secure Communications Through a Gateway
  contents:
  - "8.  Secure Communications Through a Gateway\n   A common method for achieving\
    \ interoperability between two disparate\n   services is through the use of a\
    \ \"gateway\" that interprets the\n   protocols of each service and translates\
    \ them into the protocols of\n   the other.  The CPIM specifications (specifically\
    \ [MSGFMT] and [PIDF]\n   define the common profiles to be used for interoperability\
    \ between\n   instant messaging and presence services that comply with [IMP-REQS].\n\
    \   In the case of communications between an XMPP service and a non-XMPP\n   service,\
    \ we can visualize this relationship as follows:\n   +-------------+        +-------------+\
    \        +------------+\n   |             |        |             |        |  \
    \          |\n   |    XMPP     |        |  XMPP-CPIM  |        |  Non-XMPP  |\n\
    \   |   Service   | <----> |   Gateway   | <----> |  Service   |\n   |       \
    \      |        |             |        |            |\n   +-------------+    \
    \    +-------------+        +------------+\n   The end-to-end encryption method\
    \ defined herein enables the exchange\n   of encrypted and/or signed instant messages\
    \ and presence through an\n   XMPP-CPIM gateway.  In particular:\n   o  When a\
    \ gateway receives a secured XMPP message or presence stanza\n      from the XMPP\
    \ service that is addressed to a user on the non-XMPP\n      service, it MUST\
    \ remove the XMPP \"wrapper\" (everything down to and\n      including the <e2e>\
    \ and </e2e> tags) in order to reveal the\n      multipart S/MIME object, then\
    \ route the object to the non-XMPP\n      service (first wrapping it in the protocol\
    \ used by the non-XMPP\n      service if necessary).\n   o  When a gateway receives\
    \ a secured non-XMPP instant message or\n      presence document from the non-XMPP\
    \ service that is addressed to a\n      user on the XMPP service, it MUST remove\
    \ the non-XMPP \"wrapper\"\n      (if any) in order to reveal the multipart S/MIME\
    \ object, wrap the\n      object in an XMPP message or presence \"wrapper\" (including\
    \ the\n      <e2e> and </e2e> tags), and then route the XMPP stanza to the XMPP\n\
    \      service.\n   The wrapped S/MIME object MUST be immutable and MUST NOT be\
    \ modified\n   by an XMPP-CPIM gateway.\n"
- title: 9.  urn:ietf:params:xml:xmpp-e2e Namespace
  contents:
  - "9.  urn:ietf:params:xml:xmpp-e2e Namespace\n   The <e2e xmlns='urn:ietf:params:xml:ns:xmpp-e2e'/>\
    \ element is a\n   wrapper for an XML CDATA section (see Section 2.7 of [XML])\
    \ that\n   contains a \"Message/CPIM\", \"application/pidf+xml\", or\n   \"application/xmpp+xml\"\
    \ object.  Thus the\n   'urn:ietf:params:xml:xmpp-e2e' namespace has no inherent\
    \ semantics,\n   and the semantics of the encapsulated object are defined by one\
    \ of\n   the following specifications:\n   o  [MSGFMT] for \"Message/CPIM\"\n\
    \   o  [PIDF] for \"application/pidf+xml\"\n   o  [XMPP-CORE] for \"application/xmpp+xml\"\
    \n   Although the \"application/xmpp+xml\" media type is specified in this\n \
    \  document, the <xmpp/> element is simply a wrapper for a <message/>,\n   <presence/>,\
    \ or <iq/> stanza, where the semantics of those stanza\n   types are specified\
    \ in [XMPP-CORE].\n   Given that the 'urn:ietf:params:xml:ns:xmpp-e2e' namespace\
    \ has no\n   inherent semantics and specifies a using protocol only, versioning\
    \ is\n   the responsibility of the protocols that define the encapsulated\n  \
    \ objects ([MSGFMT], [PIDF], and [XMPP-CORE]).\n"
- title: 10.  application/xmpp+xml Media Type
  contents:
  - "10.  application/xmpp+xml Media Type\n   The \"application/xmpp+xml\" media type\
    \ adheres to the guidelines\n   specified in [XML-MEDIA].  The root element for\
    \ this MIME type is\n   <xmpp/>, and the root element MUST contain one and only\
    \ one child\n   element, corresponding to one of the XMPP stanza types (i.e.,\n\
    \   message, presence, or iq) if the default namespace is 'jabber:client'\n  \
    \ or 'jabber:server' as defined in [XMPP-CORE].  The character encoding\n   for\
    \ this XML media type MUST be UTF-8, in accordance with Section\n   11.5 of [XMPP-CORE].\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   This entire memo discusses security.  Detailed\
    \ security\n   considerations for instant messaging and presence protocols are\
    \ given\n   in [IMP-REQS] (Sections 5.1 through 5.4), and for XMPP in particular\n\
    \   are given in [XMPP-CORE] (Sections 12.1 through 12.6).  In addition,\n   all\
    \ of the security considerations specified in [XML-MEDIA] apply to\n   the \"\
    application/xmpp+xml\" media type.\n   The end-to-end security method defined\
    \ here MAY result in exchanging\n   secured instant messages and presence information\
    \ through a gateway\n   that implements the CPIM specifications.  Such a gateway\
    \ MUST be\n   compliant with the minimum security requirements of the instant\n\
    \   messaging and presence protocols with which it interfaces.\n"
- title: 12.  IANA Considerations
  contents:
  - '12.  IANA Considerations

    '
- title: 12.1.  XML Namespace Name for e2e Data in XMPP
  contents:
  - "12.1.  XML Namespace Name for e2e Data in XMPP\n   A URN sub-namespace of signed\
    \ and encrypted content for the\n   Extensible Messaging and Presence Protocol\
    \ (XMPP) is defined as\n   follows.  (This namespace name adheres to the format\
    \ defined in\n   [XML-REG].)\n   URI: urn:ietf:params:xml:ns:xmpp-e2e\n   Specification:\
    \ RFC 3923\n   Description: This is an XML namespace name of signed and encrypted\n\
    \      content for the Extensible Messaging and Presence Protocol as\n      defined\
    \ by RFC 3923.\n   Registrant Contact: IESG, <iesg@ietf.org>\n"
- title: 12.2.  Content-type Registration for "application/xmpp+xml"
  contents:
  - "12.2.  Content-type Registration for \"application/xmpp+xml\"\n   To: ietf-types@iana.org\n\
    \   Subject: Registration of MIME media type application/xmpp+xml\n   MIME media\
    \ type name: application\n   MIME subtype name: xmpp+xml\n   Required parameters:\
    \ (none)\n   Optional parameters: (charset) Same as charset parameter of\n   \
    \   application/xml as specified in RFC 3023; per Section 11.5 of\n      [XMPP-CORE],\
    \ the charset must be UTF-8.\n   Encoding considerations: Same as encoding considerations\
    \ of\n      application/xml as specified in RFC 3023; per Section 11.5 of\n  \
    \    [XMPP-CORE], the encoding must be UTF-8.\n   Security considerations: All\
    \ of the security considerations specified\n      in RFC 3023 and [XMPP-CORE]\
    \ apply to this XML media type.  Refer\n      to Section 11 of RFC 3923.\n   Interoperability\
    \ considerations: (none)\n   Specification: RFC 3923\n   Applications which use\
    \ this media type: XMPP-compliant instant\n      messaging and presence systems.\n\
    \   Additional information: (none)\n   Person and email address to contact for\
    \ further information: IESG,\n      <iesg@ietf.org>\n   Intended usage: COMMON\n\
    \   Author/Change controller: IETF, XMPP Working Group\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [CERT]        Ramsdell, B., Ed., \"Secure/Multipurpose\
    \ Internet Mail\n                 Extensions (S/MIME) Version 3.1 Certificate\
    \ Handling\",\n                 RFC 3850, July 2004.\n   [CMS]         Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", RFC\n                 3852, July\
    \ 2004.\n   [CMS-AES]     Schaad, J., \"Use of the Advanced Encryption Standard\n\
    \                 (AES) Encryption Algorithm in Cryptographic Message\n      \
    \           Syntax (CMS)\", RFC 3565, July 2003.\n   [CMS-ALG]     Housley, R.,\
    \ \"Cryptographic Message Syntax (CMS)\n                 Algorithms\", RFC 3370,\
    \ August 2002.\n   [CPIM]        Peterson, J., \"Common Profile for Instant Messaging\n\
    \                 (CPIM)\", RFC 3860, August 2004.\n   [CPP]         Peterson,\
    \ J., \"Common Profile for Presence (CPP)\", RFC\n                 3859, August\
    \ 2004.\n   [DATETIME]    Klyne, G. and C. Newman, \"Date and Time on the\n  \
    \               Internet:  Timestamps\", RFC 3339, July 2002.\n   [DISP]     \
    \   Troost, R., Dorner, S., and K. Moore, Ed.,\n                 \"Communicating\
    \ Presentation Information in Internet\n                 Messages: The Content-Disposition\
    \ Header Field\", RFC\n                 2183, August 1997.\n   [IMP-MODEL]   Day,\
    \ M., Rosenberg, J., and H. Sugano, \"A Model for\n                 Presence and\
    \ Instant Messaging\", RFC 2778, February\n                 2000.\n   [IMP-REQS]\
    \    Day, M., Aggarwal, S., Mohr, G., and J. Vincent,\n                 \"Instant\
    \ Messaging/Presence Protocol Requirements\", RFC\n                 2779, February\
    \ 2000.\n   [MSGFMT]      Klyne, G. and D. Atkins, \"Common Presence and Instant\n\
    \                 Messaging (CPIM): Message Format\", RFC 3862, August\n     \
    \            2004.\n   [MULTI]       Galvin, J., Murphy, S., Crocker, S., and\
    \ N. Freed,\n                 \"Security Multiparts for MIME: Multipart/Signed\
    \ and\n                 Multipart/Encrypted\", RFC 1847, October 1995.\n   [PIDF]\
    \        Sugano, H., Fujimoto, S., Klyne, G., Bateman, A., Carr,\n           \
    \      W., and J. Peterson, \"Presence Information Data Format\n             \
    \    (PIDF)\", RFC 3863, August 2004.\n   [SMIME]       Ramsdell, B., Ed., \"\
    Secure/Multipurpose Internet Mail\n                 Extensions (S/MIME) Version\
    \ 3.1 Message Specification\",\n                 RFC 3851, July 2004.\n   [TERMS]\
    \       Bradner, S., \"Key words for use in RFCs to Indicate\n               \
    \  Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [XML-MEDIA]   Murata,\
    \ M., St. Laurent, S. and D. Kohn, \"XML Media\n                 Types\", RFC\
    \ 3023, January 2001.\n   [XMPP-CORE]   Saint-Andre, P., Ed., \"Extensible Messaging\
    \ and\n                 Presence Protocol (XMPP): Core\", RFC 3920, October\n\
    \                 2004.\n   [XMPP-IM]     Saint-Andre, P., Ed., \"Extensible Messaging\
    \ and\n                 Presence Protocol (XMPP) Instant Messaging and\n     \
    \            Presence\", RFC 3921, October 2004.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [CAPS]        Hildebrand, J. and P. Saint-Andre,\
    \ \"Entity\n                 Capabilities\", JSF JEP 0115, August 2004.\n   [CMC]\
    \         Myers, M., Liu, X., Schaad, J. and J. Weinstein,\n                 \"\
    Certificate Management Messages over CMS\", RFC 2797,\n                 April\
    \ 2000.\n   [CMP]         Adams, C. and S. Farrell, \"Internet X.509 Public Key\n\
    \                 Infrastructure Certificate Management Protocols\", RFC\n   \
    \              2510, March 1999.\n   [DISCO]       Hildebrand, J., Millard, P.,\
    \ Eatmon, R. and P.  Saint-\n                 Andre, \"Service Discovery\", JSF\
    \ JEP 0030, July 2004.\n   [MUC]         Saint-Andre, P., \"Multi-User Chat\"\
    , JSF JEP 0045, June\n                 2004.\n   [XML]         Bray, T., Paoli,\
    \ J., Sperberg-McQueen, C. and E. Maler,\n                 \"Extensible Markup\
    \ Language (XML) 1.0 (3rd ed)\", W3C\n                 REC-xml, February 2004,\
    \ <http://www.w3.org/TR/REC-xml>.\n   [XML-REG]     Mealling, M., \"The IETF XML\
    \ Registry\", BCP 81, RFC\n                 3688, January 2004.\n"
- title: Appendix A.  Schema for urn:ietf:params:xml:ns:xmpp-e2e
  contents:
  - "Appendix A.  Schema for urn:ietf:params:xml:ns:xmpp-e2e\n   The following XML\
    \ schema is descriptive, not normative.\n   <?xml version='1.0' encoding='UTF-8'?>\n\
    \   <xs:schema\n       xmlns:xs='http://www.w3.org/2001/XMLSchema'\n       targetNamespace='urn:ietf:params:xml:ns:xmpp-e2e'\n\
    \       xmlns='urn:ietf:params:xml:ns:xmpp-e2e'\n       elementFormDefault='qualified'>\n\
    \     <xs:element name='e2e' type='xs:string'/>\n     <xs:element name='decryption-failed'\
    \ type='empty'/>\n     <xs:element name='signature-unverified' type='empty'/>\n\
    \     <xs:element name='bad-timestamp' type='empty'/>\n     <xs:simpleType name='empty'>\n\
    \       <xs:restriction base='xs:string'>\n         <xs:enumeration value=''/>\n\
    \       </xs:restriction>\n     </xs:simpleType>\n   </xs:schema>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Peter Saint-Andre\n   Jabber Software Foundation\n   EMail:\
    \ stpeter@jabber.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
