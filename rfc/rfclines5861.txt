This document defines two independent HTTP Cache Control extensions that allow control over the use of stale responses by caches.
requires that caches "respond to a request with the most up to date response held...
that is appropriate to the request," although "in carefully considered circumstances" a stale response is allowed to be returned.
This document defines two independent Cache  Control extensions that allow for such control, stale if error and stale while revalidate.
The stale if error HTTP
Cache Control extension allows a cache to return a stale response when an error
e.g., a 500 Internal Server Error, a network segment, or DNS failure   is encountered, rather than returning a "hard" error.
The stale while revalidate HTTP Cache Control extension allows a cache to immediately return a stale response while it revalidates it in the background, thereby hiding latency (both in the network and on the server) from clients.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
This specification uses the augmented Backus Naur Form of RFC 2616
and it includes the delta seconds rule from that specification.
The stale while revalidate Cache Control Extension
When present in an HTTP response, the stale while revalidate Cache  Control extension indicates that caches MAY serve the response in which it appears after it becomes stale, up to the indicated number of seconds.
If a cached response is served stale due to the presence of this extension, the cache SHOULD attempt to revalidate it while still serving stale responses (i.e., without blocking).
Note that "stale" implies that the response will have a non zero Age header and a warning header, as per HTTP's requirements.
If delta seconds passes without the cached entity being revalidated, it SHOULD NOT continue to be served stale, absent other information.
Example A response containing: Cache Control: max age 600, stale while revalidate 30 indicates that it is fresh for 600 seconds, and it may continue to be served stale for up to an additional 30 seconds while an asynchronous validation is attempted.
If validation is inconclusive, or if there is not traffic that triggers it, after 30 seconds the stale while  revalidate function will cease to operate, and the cached response will be "truly" stale (i.e., the next request will block and be handled normally).
Generally, servers will want to set the combination of max age and stale while revalidate to the longest total potential freshness lifetime that they can tolerate.
For example, with both set to 600, the server must be able to tolerate the response being served from cache for up to 20 minutes.
Since asynchronous validation will only happen if a request occurs after the response has become stale, but before the end of the stale  while revalidate window, the size of that window and the likelihood of a request during it determines how likely it is that all requests will be served without delay.
If the window is too small, or traffic is too sparse, some requests will fall outside of it, and block until the server can validate the cached response.
The stale if error Cache Control Extension
The stale if error Cache Control extension indicates that when an error is encountered, a cached stale response MAY be used to satisfy the request, regardless of other freshness information.
Its value indicates the upper limit to staleness; when the cached response is more stale than the indicated amount, the cached response SHOULD NOT be used to satisfy the request, absent other information.
In this context, an error is any situation that would result in a 500, 502, 503, or 504 HTTP response status code being returned.
Note that this directive does not affect freshness; stale cached responses that are used SHOULD still be visibly stale when sent (i.e., have a non zero Age header and a warning header, as per HTTP's requirements).
Example A response containing: HTTP/1.1 200 OK Cache Control: max age 600, stale
if error 1200 Content Type:
text/plain success indicates that it is fresh for 600 seconds, and that it may be used if an error is encountered after becoming stale for an additional 1200 seconds.
Thus, if the cache attempts to validate 900 seconds afterwards and encounters: HTTP/1.1 500 Internal Server Error Content Type: text/plain failure the successful response can be returned instead: HTTP/1.1 200 OK Cache Control: max age 600, stale if error 1200
Age: 900 Content Type: text/plain success
After the age is greater than 1800 seconds
(i.e., it has been stale for 1200 seconds), the cache must write the error message through.
500 Internal Server Error Content Type: text/plain failure 5.
The stale while revalidate extension provides origin servers with a mechanism for dictating that stale content should be served from caches under certain circumstances, with the expectation that the cached response will be revalidated in the background.
It is suggested that such validation be predicated upon an incoming request, to avoid the possibility of an amplification attack (as can be seen in some other pre fetching and automatic refresh mechanisms).
Cache implementers should keep this in mind when deciding the circumstances under which they will generate a request that is not directly initiated by a user or client.
The stale if error provides origin servers and clients a mechanism for dictating that stale content should be served from caches under certain circumstances, and does not pose additional security considerations over those of RFC 2616, which also allows stale content to be served.
