- title: __initial_text__
  contents:
  - "              Session Initiation Protocol (SIP) Extension\n                 \
    \     for Event State Publication\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an extension to the Session Initiation\n\
    \   Protocol (SIP) for publishing event state used within the SIP Events\n   framework.\
    \  The first application of this extension is for the\n   publication of presence\
    \ information.\n   The mechanism described in this document can be extended to\
    \ support\n   publication of any event state for which there exists an appropriate\n\
    \   event package.  It is not intended to be a general-purpose mechanism\n   for\
    \ transport of arbitrary data, as there are better-suited\n   mechanisms for this\
    \ purpose.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.   Definitions and Document Conventions . . . . . . . .\
    \ . . . .   3\n   3.   Overall Operation  . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.   Constructing PUBLISH Requests  . . . . . . . . . . . . .\
    \ . .   5\n        4.1.  Identification of Published Event State. . . . . . .\
    \ .   6\n        4.2.  Creating Initial Publication . . . . . . . . . . . . .\
    \   7\n        4.3.  Refreshing Event State . . . . . . . . . . . . . . . .  \
    \ 8\n        4.4.  Modifying Event State  . . . . . . . . . . . . . . . .   9\n\
    \        4.5.  Removing Event State . . . . . . . . . . . . . . . . .   9\n  \
    \ 5.   Processing PUBLISH Responses . . . . . . . . . . . . . . . .  10\n   6.\
    \   Processing PUBLISH Requests  . . . . . . . . . . . . . . . .  10\n   7.  \
    \ Processing OPTIONS Requests  . . . . . . . . . . . . . . . .  13\n   8.   Use\
    \ of Entity-tags in PUBLISH  . . . . . . . . . . . . . . .  13\n        8.1. \
    \ General Notes. . . . . . . . . . . . . . . . . . . . .  13\n        8.2.  Client\
    \ Usage . . . . . . . . . . . . . . . . . . . . .  14\n        8.3.  Server Usage\
    \ . . . . . . . . . . . . . . . . . . . . .  14\n   9.   Controlling the Rate\
    \ of Publication  . . . . . . . . . . . .  15\n   10.  Considerations for Event\
    \ Packages using PUBLISH  . . . . . .  15\n        10.1. PUBLISH Bodies . . .\
    \ . . . . . . . . . . . . . . . . .  16\n        10.2. PUBLISH Response Bodies.\
    \ . . . . . . . . . . . . . . .  16\n        10.3. Multiple Sources for Event\
    \ State . . . . . . . . . . .  16\n        10.4. Event State Segmentation . .\
    \ . . . . . . . . . . . . .  17\n        10.5. Rate of Publication. . . . . .\
    \ . . . . . . . . . . . .  17\n   11.  Protocol Element Definitions . . . . .\
    \ . . . . . . . . . . .  17\n        11.1. New Methods. . . . . . . . . . . .\
    \ . . . . . . . . . .  17\n              11.1.1. PUBLISH Method . . . . . . .\
    \ . . . . . . . . .  17\n        11.2. New Response Codes . . . . . . . . . .\
    \ . . . . . . . .  19\n              11.2.1. \"412 Conditional Request Failed\"\
    \ Response Code  19\n        11.3. New Header Fields  . . . . . . . . . . . .\
    \ . . . . . .  20\n              11.3.1. \"SIP-ETag\" Header Field  . . . . .\
    \ . . . . . .  20\n              11.3.2. \"SIP-If-Match\" Header Field  . . .\
    \ . . . . . .  20\n   12.  Augmented BNF Definitions  . . . . . . . . . . . .\
    \ . . . . .  21\n   13.  IANA Considerations  . . . . . . . . . . . . . . . .\
    \ . . . .  21\n        13.1. Methods  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  21\n        13.2. Response Codes . . . . . . . . . . . . . . . . . .\
    \ . .  21\n        13.3. Header Field Names . . . . . . . . . . . . . . . . .\
    \ .  21\n   14.  Security Considerations  . . . . . . . . . . . . . . . . . .\
    \  22\n        14.1. Access Control . . . . . . . . . . . . . . . . . . . .  22\n\
    \        14.2. Denial of Service Attacks  . . . . . . . . . . . . . .  22\n  \
    \      14.3. Replay Attacks . . . . . . . . . . . . . . . . . . . .  22\n    \
    \    14.4. Man in the Middle Attacks  . . . . . . . . . . . . . .  23\n      \
    \  14.5. Confidentiality  . . . . . . . . . . . . . . . . . . .  23\n   15.  Examples\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  24\n   16.  Contributors\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  29\n   17.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . .  30\n   18.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  30\n        18.1. Normative References\
    \ . . . . . . . . . . . . . . . . .  30\n        18.2. Informative References\
    \ . . . . . . . . . . . . . . . .  31\n   Author's Address. . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  31\n   Full Copyright Statement. . . . . . .\
    \ . . . . . . . . . . . . . .  32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification provides a framework for the publication\
    \ of event\n   state from a user agent to an entity that is responsible for\n\
    \   compositing this event state and distributing it to interested\n   parties\
    \ through the SIP Events [1] framework.\n   In addition to defining an event publication\
    \ framework, this\n   specification defines a concrete usage of that framework\
    \ for the\n   publication of presence state [2] by a presence user agent [3] to\
    \ a\n   presence compositor, which has a tightly coupled relationship with\n \
    \  the presence agent [1].\n   The requirements and model for presence publication\
    \ are documented in\n   [10].  This specification will address each of those requirements.\n\
    \   The mechanism described in this document can be extended to support\n   publication\
    \ of any event state for which there exists an appropriate\n   event package as\
    \ defined in [1].  For instance, an application of SIP\n   events for message\
    \ waiting indications [11] might choose to collect\n   the statuses of voice-mail\
    \ boxes across a set of user agents using\n   the PUBLISH mechanism.  The compositor\
    \ in such an application would\n   then be responsible for collecting and distributing\
    \ this state to the\n   subscribers of the event package.\n   Each application\
    \ that makes use of the PUBLISH mechanism in the\n   publication of event state\
    \ will need to adhere to the guidelines set\n   in Section 10.  The mechanism\
    \ described in this document is not\n   intended to be a general-purpose mechanism\
    \ for transport of arbitrary\n   data, as there are better-suited mechanisms for\
    \ this purpose.\n"
- title: 2.  Definitions and Document Conventions
  contents:
  - "2.  Definitions and Document Conventions\n   In addition to the definitions of\
    \ RFC 2778 [3], RFC 3265 [1], and RFC\n   3261 [4], this document introduces some\
    \ new concepts:\n   Event State: State information for a resource, associated\
    \ with an\n      event package and an address-of-record.\n   Event Publication\
    \ Agent (EPA): The User Agent Client (UAC) that\n      issues PUBLISH requests\
    \ to publish event state.\n   Event State Compositor (ESC): The User Agent Server\
    \ (UAS) that\n      processes PUBLISH requests, and is responsible for compositing\n\
    \      event state into a complete, composite event state of a resource.\n   Presence\
    \ Compositor: A type of Event State Compositor that is\n      responsible for\
    \ compositing presence state for a presentity.\n   Publication: The act of an\
    \ EPA sending a PUBLISH request to an ESC to\n      publish event state.\n   Event\
    \ Hard State: The steady-state or default event state of a\n      resource, which\
    \ the ESC may use in the absence of, or in addition\n      to, soft state publications.\n\
    \   Event Soft State: Event state published by an EPA using the PUBLISH\n    \
    \  mechanism.  A protocol element (i.e., an entity-tag) is used to\n      identify\
    \ a specific soft state entity at the ESC.  Soft state has\n      a defined lifetime\
    \ and will expire after a negotiated amount of\n      time.\n   The key words\
    \ \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\"\
    , \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in BCP 14, RFC 2119 [5]\n   and indicate\
    \ requirement levels for compliant implementations.\n      Indented passages such\
    \ as this one are used in this document to\n      provide additional information\
    \ and clarifying text.  They do not\n      contain descriptions of normative protocol\
    \ behavior.\n"
- title: 3.  Overall Operation
  contents:
  - "3.  Overall Operation\n   This document defines a new SIP method, PUBLISH, for\
    \ publishing event\n   state.  PUBLISH is similar to REGISTER in that it allows\
    \ a user to\n   create, modify, and remove state in another entity which manages\
    \ this\n   state on behalf of the user.  Addressing a PUBLISH request is\n   identical\
    \ to addressing a SUBSCRIBE request.  The Request-URI of a\n   PUBLISH request\
    \ is populated with the address of the resource for\n   which the user wishes\
    \ to publish event state.  The user may in turn\n   have multiple User Agents\
    \ or endpoints that publish event state.\n   Each endpoint may publish its own\
    \ unique state, out of which the\n   event state compositor generates the composite\
    \ event state of the\n   resource.  In addition to a particular resource, all\
    \ published event\n   state is associated with a specific event package.  Through\
    \ a\n   subscription to that event package, the user is able to discover the\n\
    \   composite event state of all of the active publications.\n   A User Agent\
    \ Client (UAC) that publishes event state is labeled an\n   Event Publication\
    \ Agent (EPA).  For presence, this is the familiar\n   Presence User Agent (PUA)\
    \ role as defined in [2].  The entity that\n   processes the PUBLISH request is\
    \ known as an Event State Compositor\n   (ESC).  For presence, this is the familiar\
    \ Presence Agent (PA) role\n   as defined in [2].\n   PUBLISH requests create\
    \ soft state in the ESC.  This event soft state\n   has a defined lifetime and\
    \ will expire after a negotiated amount of\n   time, requiring the publication\
    \ to be refreshed by subsequent PUBLISH\n   requests.  There may also be event\
    \ hard state provisioned for each\n   resource for a particular event package.\
    \  This event state represents\n   the resource state that is present at all times,\
    \ and does not expire.\n   The ESC may use event hard state in the absence of,\
    \ or in addition\n   to, event soft state provided through the PUBLISH mechanism.\
    \  Setting\n   this event hard state or configuring the ESC policy regarding the\n\
    \   aggregation of different event state is out of the scope of this\n   specification.\n\
    \   The body of a PUBLISH request carries the published event state.  In\n   response\
    \ to every successful PUBLISH request, the ESC assigns an\n   identifier to the\
    \ publication in the form of an entity-tag.  This\n   identifier is then used\
    \ by the EPA in any subsequent PUBLISH request\n   that modifies, refreshes or\
    \ removes the event state of that\n   publication.  When event state expires or\
    \ is explicitly removed, the\n   entity-tag associated with it becomes invalid.\
    \  A publication for an\n   invalid entity-tag will naturally fail, and the EPA\
    \ needs to start\n   anew and resend its event state without referencing a previous\n\
    \   entity-tag.\n"
- title: 4.  Constructing PUBLISH Requests
  contents:
  - "4.  Constructing PUBLISH Requests\n   PUBLISH requests create, modify, and remove\
    \ event state associated\n   with an address-of-record.  A suitably authorized\
    \ third party may\n   also perform publication on behalf of a particular address-of-record.\n\
    \   Except as noted, the construction of the PUBLISH request and the\n   behavior\
    \ of clients sending a PUBLISH request are identical to the\n   general UAC behavior\
    \ described in Section 8.1 and Section 17.1 of RFC\n   3261 [4].\n   If necessary,\
    \ clients may probe for the support of PUBLISH using the\n   OPTIONS request defined\
    \ in SIP [4].  The presence of \"PUBLISH\" in the\n   \"Allow\" header field in\
    \ a response to an OPTIONS request indicates\n   support for the PUBLISH method.\
    \  In addition, the \"Allow-Events\"\n   header field indicates the supported\
    \ event packages.\n      Note that it is possible for the OPTIONS request to fork,\
    \ and\n      consequently return a response from a User Agent other than the\n\
    \      ESC.  In that case, support for the PUBLISH method may not be\n      appropriately\
    \ represented for that particular Request-URI.\n   A PUBLISH request does not\
    \ establish a dialog.  A UAC MAY include a\n   Route header field in a PUBLISH\
    \ request based on a pre-existing route\n   set as described in Section 8.1 of\
    \ RFC 3261 [4].  The Record-Route\n   header field has no meaning in PUBLISH requests\
    \ or responses, and\n   MUST be ignored if present.  In particular, the UAC MUST\
    \ NOT create a\n   new route set based on the presence or absence of a Record-Route\n\
    \   header field in any response to a PUBLISH request.\n   The PUBLISH request\
    \ MAY contain a Contact header field, but including\n   one in a PUBLISH request\
    \ has no meaning in the event publication\n   context and will be ignored by the\
    \ ESC.  An EPA MAY send a PUBLISH\n   request within an existing dialog.  In that\
    \ case, the request is\n   received in the context of any media session or sessions\
    \ associated\n   with that dialog.\n      Note that while sending a PUBLISH request\
    \ within an existing\n      dialog is not prohibited, it will typically not result\
    \ in the\n      expected behavior.  Unless the other end of the dialog is also\
    \ an\n      ESC, it will probably reject the request.\n   EPAs MUST NOT send a\
    \ new PUBLISH request (not a re-transmission) for\n   the same Request-URI, until\
    \ they have received a final response from\n   the ESC for the previous one or\
    \ the previous PUBLISH request has\n   timed out.\n"
- title: 4.1.  Identification of Published Event State
  contents:
  - "4.1.  Identification of Published Event State\n   Identification of published\
    \ event state is provided by three pieces\n   of information: Request-URI, event\
    \ type, and (optionally) an entity-\n   tag.\n   The Request-URI of a PUBLISH\
    \ request contains enough information to\n   route the request to the appropriate\
    \ entity per the request routing\n   procedures outlined in RFC 3261 [4].  It\
    \ also contains enough\n   information to identify the resource whose event state\
    \ is to be\n   published, but not enough information to determine the type of\
    \ the\n   published event state.\n   For determining the type of the published\
    \ event state, the EPA MUST\n   include a single Event header field in PUBLISH\
    \ requests.  The value\n   of this header field indicates the event package for\
    \ which this\n   request is publishing event state.\n   For each successful PUBLISH\
    \ request, the ESC will generate and assign\n   an entity-tag and return it in\
    \ the SIP-ETag header field of the 2xx\n   response.\n   When updating previously\
    \ published event state, PUBLISH requests MUST\n   contain a single SIP-If-Match\
    \ header field identifying the specific\n   event state that the request is refreshing,\
    \ modifying or removing.\n   This header field MUST contain a single entity-tag\
    \ that was returned\n   by the ESC in the SIP-ETag header field of the response\
    \ to a previous\n   publication.\n   The PUBLISH request MAY contain a body, which\
    \ contains event state\n   that the client wishes to publish.  The content format\
    \ and semantics\n   are dependent on the event package identified in the Event\
    \ header\n   field.\n   The presence of a body and the SIP-If-Match header field\
    \ determine\n   the specific operation that the request is performing, as described\n\
    \   in Table 1.\n      +-----------+-------+---------------+---------------+\n\
    \      | Operation | Body? | SIP-If-Match? | Expires Value |\n      +-----------+-------+---------------+---------------+\n\
    \      | Initial   | yes   | no            | > 0           |\n      | Refresh\
    \   | no    | yes           | > 0           |\n      | Modify    | yes   | yes\
    \           | > 0           |\n      | Remove    | no    | yes           | 0 \
    \            |\n      +-----------+-------+---------------+---------------+\n\
    \                 Table 1: Publication Operations\n   An 'Initial' publication\
    \ sets the initial event state for a\n   particular EPA. There may, of course,\
    \ already be event state\n   published by other EPAs (for the same address-of-record).\
    \ That state\n   is unaffected by an initial publication.  A 'Refresh' publication\n\
    \   refreshes the lifetime of a previous publication, whereas a 'Modify'\n   publication\
    \ modifies the event state of a previous publication.  A\n   'Remove' publication\
    \ requests immediate removal of event state.\n   These operations are described\
    \ in more detail in the following\n   sections.\n"
- title: 4.2.  Creating Initial Publication
  contents:
  - "4.2.  Creating Initial Publication\n   An initial publication is a PUBLISH request\
    \ created by the EPA and\n   sent to the ESC that establishes soft state for the\
    \ event package\n   indicated in the Event header field of the request, and bound\
    \ to the\n   address in the Request-URI of the request.\n   An initial PUBLISH\
    \ request MUST NOT contain a SIP-If-Match header\n   field.  However, if the EPA\
    \ expects an appropriate, locally stored\n   entity-tag to still be valid, it\
    \ SHOULD first try to modify that\n   event state as described in Section 4.4,\
    \ instead of submitting an\n   initial publication.\n   An initial PUBLISH request\
    \ MUST contain a body that contains the\n   published event state.\n   An initial\
    \ PUBLISH request MAY contain a single Expires header field.\n   This value indicates\
    \ the suggested lifetime of the event state\n   publication.\n   The ESC may lower\
    \ the suggested lifetime of the publication, but it\n   will never extend it.\
    \  If an Expires header field is not present, the\n   EPA is indicating its desire\
    \ for the ESC to choose.  The Expires\n   header field in a 2xx response to the\
    \ initial PUBLISH indicates the\n   actual duration for which the publication\
    \ will remain active.  Unless\n   refreshed before this lifetime is exceeded,\
    \ the publication will\n   expire.\n"
- title: 4.3.  Refreshing Event State
  contents:
  - "4.3.  Refreshing Event State\n   An EPA is responsible for refreshing its previously\
    \ established\n   publications before their expiration interval has elapsed. \
    \ To\n   refresh a publication, the EPA MUST create a PUBLISH request that\n \
    \  includes in a SIP-If-Match header field the entity-tag of the\n   publication\
    \ to be refreshed.\n   The SIP-If-Match header field containing an entity-tag\
    \ conditions the\n   PUBLISH request to refresh a specific event state established\
    \ by a\n   prior publication.  If the entity-tag matches previously published\n\
    \   event state at the ESC, the refresh succeeds, and the EPA receives a\n   2xx\
    \ response.\n   Like the 2xx response to an initial PUBLISH request, the 2xx response\n\
    \   to a refresh PUBLISH request will contain a SIP-ETag header field\n   with\
    \ an entity-tag.  The EPA MUST store this entity-tag, replacing\n   any existing\
    \ entity-tag for the refreshed event state.  See Section\n   8.2 for more information\
    \ on the EPA handling of entity-tags.\n   If there is no matching event state,\
    \ e.g., the event state to be\n   refreshed has already expired, the EPA receives\
    \ a 412 (Conditional\n   Request Failed) response to the PUBLISH request.\n  \
    \ A publication refresh MAY contain a single Expires header field.\n   This value\
    \ indicates the suggested lifetime of the event state.\n   The ESC may lower the\
    \ suggested lifetime of the publication refresh,\n   but it will never extend\
    \ it.  If an Expires header field is not\n   present, the EPA is indicating its\
    \ desire for the ESC to choose.  The\n   Expires header field in a 2xx response\
    \ to the publication refresh\n   indicates the actual duration for which the publication\
    \ will remain\n   active.\n   A publication refresh only extends the expiration\
    \ time of already\n   existing event state.  It does not affect that event state\
    \ in any\n   other way.  Therefore, a PUBLISH request that refreshes event state\n\
    \   MUST NOT have a body.\n"
- title: 4.4.  Modifying Event State
  contents:
  - "4.4.  Modifying Event State\n   Modifying event state closely resembles the creation\
    \ of initial event\n   state.  However, instead of establishing completely new\
    \ event state\n   at the ESC, already existing event state is updated with modified\n\
    \   event state.  The nature of this update depends on the content of the\n  \
    \ body, and the semantics associated with the format of that body.\n   To modify\
    \ event state, the EPA MUST construct a PUBLISH request that\n   includes in a\
    \ SIP-If-Match header field the entity-tag of the event\n   state publication\
    \ to be modified.  A PUBLISH request that modifies\n   event state MUST contain\
    \ a body that includes the modified event\n   state.\n   The SIP-If-Match header\
    \ field conditions the PUBLISH request to\n   modify a specific event state established\
    \ by a prior publication, and\n   identified by the entity-tag.  If the entity-tag\
    \ matches previously\n   published event state at the ESC, that event state is\
    \ replaced by the\n   event state carried in the PUBLISH request, and the EPA\
    \ receives a\n   2xx response.\n   Like the 2xx response to an initial PUBLISH\
    \ request, the 2xx response\n   to a modifying PUBLISH request will contain a\
    \ SIP-ETag header field\n   with an entity-tag.  The EPA MUST store this entity-tag,\
    \ replacing\n   any existing entity-tag for the modified event state.  See Section\n\
    \   8.2 for more information on the EPA handling of entity-tags.\n   If there\
    \ is no matching event state at the ESC, e.g., the event state\n   to be modified\
    \ has already expired, the EPA receives a 412\n   (Conditional Request Failed)\
    \ response to the PUBLISH request.\n   A modifying PUBLISH request MAY contain\
    \ a single Expires header\n   field.  This value indicates the suggested lifetime\
    \ of the event\n   state publication.\n   The ESC may lower the suggested lifetime\
    \ of the publication, but it\n   will never extend it.  If an Expires header field\
    \ is not present, the\n   EPA is indicating its desire for the ESC to choose.\
    \  The Expires\n   header field in a 2xx response to the modifying PUBLISH request\n\
    \   indicates the actual duration for which the publication will remain\n   active.\
    \  Unless refreshed before this lifetime is exceeded, the\n   publication will\
    \ expire.\n"
- title: 4.5.  Removing Event State
  contents:
  - "4.5.  Removing Event State\n   Event state established by a prior publication\
    \ may also be explicitly\n   removed.\n   To request the immediate removal of\
    \ event state, an EPA MUST create a\n   PUBLISH request with an Expires value\
    \ of \"0\", and set the SIP-If-\n   Match header field to contain the entity-tag\
    \ of the event state\n   publication to be removed.\n      Note that removing\
    \ event state is effectively a publication\n      refresh suggesting an infinitesimal\
    \ expiration interval.\n      Consequently, the refreshed event state expires\
    \ immediately after\n      being refreshed.\n   Similar to an event state refresh,\
    \ the removal of event state only\n   affects the expiry of the event state. \
    \ Therefore, a PUBLISH request\n   that removes event state MUST NOT contain a\
    \ body.\n"
- title: 5.  Processing PUBLISH Responses
  contents:
  - "5.  Processing PUBLISH Responses\n   When processing responses to PUBLISH requests,\
    \ the steps in Section\n   8.1.2 of RFC 3261 [4] apply.\n   If an EPA receives\
    \ a 412 (Conditional Request Failed) response, it\n   MUST NOT reattempt the PUBLISH\
    \ request.  Instead, to publish event\n   state, the EPA SHOULD perform an initial\
    \ publication, i.e., a PUBLISH\n   request without a SIP-If-Match header field,\
    \ as described in Section\n   4.2.  The EPA MUST also discard the entity-tag that\
    \ produced this\n   error response.\n   If an EPA receives a 423 (Interval Too\
    \ Brief) response to a PUBLISH\n   request, it MAY retry the publication after\
    \ changing the expiration\n   interval in the Expires header field to be equal\
    \ to or greater than\n   the expiration interval within the Min-Expires header\
    \ field of the\n   423 (Interval Too Brief) response.\n"
- title: 6.  Processing PUBLISH Requests
  contents:
  - "6.  Processing PUBLISH Requests\n   The Event State Compositor (ESC) is a User\
    \ Agent Server (UAS) that\n   processes and responds to PUBLISH requests, and\
    \ maintains a list of\n   publications for a given address-of-record.  The ESC\
    \ has to know\n   (e.g., through configuration) the set of addresses for which\
    \ it\n   maintains event state.\n   The ESC MUST ignore the Record-Route header\
    \ field if it is included\n   in a PUBLISH request.  The ESC MUST NOT include\
    \ a Record-Route header\n   field in any response to a PUBLISH request.  The ESC\
    \ MUST ignore the\n   Contact header field if one is present in a PUBLISH request.\n\
    \   PUBLISH requests with the same Request-URI MUST be processed in the\n   order\
    \ that they are received.  PUBLISH requests MUST also be\n   processed atomically,\
    \ meaning that a particular PUBLISH request is\n   either processed completely\
    \ or not at all.\n   When receiving a PUBLISH request, the ESC follows the steps\
    \ defining\n   general UAS behavior in Section 8.2 of RFC 3261 [4].  In addition,\n\
    \   for PUBLISH specific behavior the ESC follows these steps:\n   1. The ESC\
    \ inspects the Request-URI to determine whether this request\n      is targeted\
    \ to a resource for which the ESC is responsible for\n      maintaining event\
    \ state.  If not, the ESC MUST return a 404 (Not\n      Found) response and skip\
    \ the remaining steps.\n      It may also be that the Request-URI points to a\
    \ domain that the\n      ESC is not responsible for.  In that case, the UAS receiving\
    \ the\n      request can assume the role of a proxy server and forward the\n \
    \     request to a more appropriate target.\n   2. The ESC examines the Event\
    \ header field of the PUBLISH request.\n      If the Event header field is missing\
    \ or contains an event package\n      which the ESC does not support, the ESC\
    \ MUST respond to the\n      PUBLISH request with a 489 (Bad Event) response,\
    \ and skip the\n      remaining steps.\n   3. The ESC examines the SIP-If-Match\
    \ header field of the PUBLISH\n      request for the presence of a request precondition.\n\
    \      *  If the request does not contain a SIP-If-Match header field,\n     \
    \    the ESC MUST generate and store a locally unique entity-tag for\n       \
    \  identifying the publication.  This entity-tag is associated\n         with\
    \ the event-state carried in the body of the PUBLISH\n         request.\n    \
    \  *  Else, if the request has a SIP-If-Match header field, the ESC\n        \
    \ checks whether the header field contains a single entity-tag.\n         If not,\
    \ the request is invalid, and the ESC MUST return with a\n         400 (Invalid\
    \ Request) response and skip the remaining steps.\n      *  Else, the ESC extracts\
    \ the entity-tag contained in the SIP-If-\n         Match header field and matches\
    \ that entity-tag against all\n         locally stored entity-tags for this resource\
    \ and event package.\n         If no match is found, the ESC MUST reject the publication\
    \ with\n         a response of 412 (Conditional Request Failed), and skip the\n\
    \         remaining steps.\n   4. The ESC processes the Expires header field value\
    \ from the PUBLISH\n      request.\n      *  If the request has an Expires header\
    \ field, that value MUST be\n         taken as the requested expiration.\n   \
    \   *  Else, a locally-configured default value MUST be taken as the\n       \
    \  requested expiration.\n      *  The ESC MAY choose an expiration less than\
    \ the requested\n         expiration interval.  Only if the requested expiration\
    \ interval\n         is greater than zero and less than a locally-configured\n\
    \         minimum, the ESC MAY reject the publication with a response of\n   \
    \      423 (Interval Too Brief), and skip the remaining steps.  This\n       \
    \  response MUST contain a Min-Expires header field that states\n         the\
    \ minimum expiration interval the ESC is willing to honor.\n   5. The ESC processes\
    \ the published event state contained in the body\n      of the PUBLISH request.\
    \  If the content type of the request does\n      not match the event package,\
    \ or is not understood by the ESC, the\n      ESC MUST reject the request with\
    \ an appropriate response, such as\n      415 (Unsupported Media Type), and skip\
    \ the remainder of the steps.\n      *  The ESC stores the event state delivered\
    \ in the body of the\n         PUBLISH request and identified by the associated\
    \ entity-tag,\n         updating any existing event state for that entity-tag.\
    \  The\n         expiration value is set to the chosen expiration interval.\n\
    \      *  If the request has no message body and contained no entity-tag,\n  \
    \       the ESC SHOULD reject the request with an appropriate response,\n    \
    \     such as 400 (Invalid Request), and skip the remainder of the\n         steps.\
    \  Alternatively, in case either ESC local policy or the\n         event package\
    \ has defined semantics for an initial publication\n         containing no message\
    \ body, the ESC MAY accept it.\n      *  Else, the event state identified by the\
    \ entity-tag is\n         refreshed, setting the expiration value to the chosen\n\
    \         expiration interval.\n      *  If the chosen expiration interval has\
    \ a special value of \"0\",\n         the event state identified by the entity-tag\
    \ MUST be\n         immediately removed.  The ESC MUST NOT store any event state\
    \ as\n         a result of such a request.\n      The processing of the PUBLISH\
    \ request MUST be atomic.  If internal\n      errors (such as the inability to\
    \ access a back-end database) occur\n      before processing is complete, the\
    \ publication MUST NOT succeed,\n      and the ESC MUST fail with an appropriate\
    \ error response, such as\n      504 (Server Time-out), and skip the last step.\n\
    \   6. The ESC returns a 200 (OK) response.  The response MUST contain an\n  \
    \    Expires header field indicating the expiration interval chosen by\n     \
    \ the ESC.  The response MUST also contain a SIP-ETag header field\n      that\
    \ contains a single entity-tag identifying the publication.\n      The ESC MUST\
    \ generate a new entity-tag for each successful\n      publication, replacing\
    \ any previous entity-tag associated with\n      that event state. The generated\
    \ entity-tag MUST be unique from any\n      other entity-tags currently assigned\
    \ to event state associated\n      with that Request-URI, and MUST be different\
    \ from any entity-tag\n      assigned previously to event state for that Request-URI.\
    \  See\n      Section 8.3 for more information on the ESC handling of entity-\n\
    \      tags.\n"
- title: 7.  Processing OPTIONS Requests
  contents:
  - "7.  Processing OPTIONS Requests\n   A client may probe the ESC for the support\
    \ of PUBLISH using the\n   OPTIONS request defined in SIP [4].  The ESC processes\
    \ OPTIONS\n   requests as defined in Section 11.2 of RFC 3261 [4].  In the response\n\
    \   to an OPTIONS request, the ESC SHOULD include \"PUBLISH\" to the list\n  \
    \ of allowed methods in the Allow header field.  Also, it SHOULD list\n   the\
    \ supported event packages in an Allow-Events header field.\n   The Allow header\
    \ field may also be used to specifically announce\n   support for PUBLISH messages\
    \ when registering.  (See SIP Capabilities\n   [12] for details).\n"
- title: 8.  Use of Entity-tags in PUBLISH
  contents:
  - "8.  Use of Entity-tags in PUBLISH\n   This section makes a general overview of\
    \ the entity-tags usage in\n   PUBLISH.  It is informative in nature and thus\
    \ contains no normative\n   protocol description.\n"
- title: 8.1.  General Notes
  contents:
  - "8.1.  General Notes\n   The PUBLISH mechanism makes use of entity-tags, as defined\
    \ in HTTP/\n   1.1 [13].  While the main functionality is preserved, the syntax\
    \ and\n   semantics for entity-tags and the corresponding header fields is\n \
    \  adapted specifically for use with the PUBLISH method.  The main\n   differences\
    \ are:\n   o  The syntax for entity-tags is a token instead of quoted-string.\n\
    \      There is also no prefix defined for indicating a weak entity-tag.\n   o\
    \  A PUBLISH precondition can only apply to a single entity-tag, so\n      request\
    \ preconditions with multiple entity-tags are not allowed.\n   o  A request precondition\
    \ can't apply to \"any\" entity, namely there\n      is no special \"*\" entity-tag\
    \ value defined for PUBLISH.\n   o  Whereas in HTTP/1.1 returning an entity-tag\
    \ is optional for origin\n      servers, in PUBLISH ESCs are required to always\
    \ return an entity-\n      tag for a successful publication.\n   The main motivation\
    \ for the above adaptation is that PUBLISH is\n   conceptually an HTTP PUT, for\
    \ which only a subset of the features in\n   cache validation using entity-tags\
    \ is allowed in HTTP/1.1.  It makes\n   little sense to enable features other\
    \ than this subset for event\n   state publication.\n   To make it apparent that\
    \ the entity-tags usage in PUBLISH is similar\n   but not identical to HTTP/1.1,\
    \ we have not adopted the header field\n   names directly from HTTP/1.1, but rather\
    \ have created similar but\n   distinct names, as can be seen in Section 11.\n"
- title: 8.2.  Client Usage
  contents:
  - "8.2.  Client Usage\n   Each successful publication will get assigned an entity-tag\
    \ which is\n   then delivered to the EPA in the response to the PUBLISH request.\n\
    \   The EPA needs to store that entity-tag, replacing any previous\n   entity-tag\
    \ for that event state.  If a request fails with a 412\n   (Conditional Request\
    \ Failed) response, the EPA discards the entity-\n   tag that caused the failure.\n\
    \   Entity-tags are opaque tokens to the EPA.  The EPA cannot infer any\n   further\
    \ semantics from an entity-tag beyond a simple identifier, or\n   assume a specific\
    \ formatting.  An entity-tag may be a monotonically\n   increasing counter, but\
    \ it may also be a totally random token.  It is\n   up to the ESC implementation\
    \ as to what the formatting of an entity-\n   tag is.\n"
- title: 8.3.  Server Usage
  contents:
  - "8.3.  Server Usage\n   Entity-tags are generated and maintained by the ESC. \
    \ They are part\n   of the state maintained by the ESC that also includes the\
    \ actual\n   event state and its remaining expiration interval.  An entity-tag\
    \ is\n   generated and stored for each successful event state publication, and\n\
    \   returned to the EPA in a 200 (OK) response.  Each event state\n   publication\
    \ from the EPA that updates a previous publication will\n   include an entity-tag\
    \ that the ESC can use as a search key in the set\n   of active publications.\n\
    \   The way in which an entity-tag is generated is an implementation\n   decision.\
    \  One possible way to generate an entity-tag is to implement\n   it as an integer\
    \ counter that is incremented by one for each\n   successfully processed publication.\
    \  Other, equally valid ways for\n   generating entity-tags exist, and this document\
    \ makes no\n   recommendations or preference for a single way.\n"
- title: 9.  Controlling the Rate of Publication
  contents:
  - "9.  Controlling the Rate of Publication\n   As an entity responsible for aggregating\
    \ state information from\n   potentially many sources, the ESC can be subject\
    \ to considerable\n   amounts of publication traffic.  There are ways to reduce\
    \ the amount\n   of PUBLISH requests that the ESC receives:\n   o  Choice of the\
    \ expiration interval for a publication can be\n      affected by the ESC.  It\
    \ can insist that an EPA chooses a longer\n      expiration value to what it suggests,\
    \ in case the ESC's local\n      default minimum expiration value is not reached.\
    \  Maintaining a\n      longer default minimum expiration value at the ESC reduces\
    \ the\n      rate at which publications are refreshed.\n   o  Another way of reducing\
    \ publication traffic is to use a SIP-level\n      push-back to quench a specific\
    \ source of publication traffic.  To\n      push back on publications from a particular\
    \ source, the ESC MAY\n      respond to a PUBLISH request with a 503 (Service\
    \ Unavailable), as\n      defined in RFC 3261 [4].  This response SHOULD contain\
    \ a Retry-\n      After header field indicating the time interval that the\n \
    \     publication source is required to wait until sending another\n      PUBLISH\
    \ request.\n   At the time of writing this specification, work on managing load\
    \ in\n   SIP is starting, which may be able to provide further tools for\n   managing\
    \ load in event state publication systems.\n"
- title: 10.  Considerations for Event Packages using PUBLISH
  contents:
  - "10.  Considerations for Event Packages using PUBLISH\n   This section discusses\
    \ several issues which should be taken into\n   consideration when applying the\
    \ PUBLISH mechanism to event packages.\n   It also demonstrates how these issues\
    \ are handled when using PUBLISH\n   for presence publication.\n   Any future\
    \ event package specification SHOULD include a discussion of\n   its considerations\
    \ for using PUBLISH.  At a minimum those\n   considerations SHOULD address the\
    \ issues presented in this chapter,\n   and MAY include additional considerations.\n"
- title: 10.1.  PUBLISH Bodies
  contents:
  - "10.1.  PUBLISH Bodies\n   The body of the PUBLISH request typically carries the\
    \ published event\n   state.  Any application of the PUBLISH mechanism for a given\
    \ event\n   package MUST define what content type or types are expected in\n \
    \  PUBLISH requests.  Each event package MUST also describe the\n   semantics\
    \ associated with that content type, and MUST prescribe a\n   default, mandatory\
    \ to implement MIME type.\n   This document defines the semantics of the presence\
    \ publication\n   requests (event package \"presence\") when the Common Profile\
    \ for\n   Presence (CPP) Presence Information Data Format (PIDF) [6] is used.\n\
    \   A PUA that uses PUBLISH to publish presence state to the PA MUST\n   support\
    \ the PIDF presence format.  It MAY support other formats.\n"
- title: 10.2.  PUBLISH Response Bodies
  contents:
  - "10.2.  PUBLISH Response Bodies\n   The response to a PUBLISH request indicates\
    \ whether the request was\n   successful or not.  In general, the body of such\
    \ a response will be\n   empty unless the event package defines explicit meaning\
    \ for such a\n   body.\n   There is no such meaning for the body of a response\
    \ to a presence\n   publication.\n"
- title: 10.3.  Multiple Sources for Event State
  contents:
  - "10.3.  Multiple Sources for Event State\n   For some event packages, the underlying\
    \ model is that of a single\n   entity responsible for aggregating event state\
    \ (ESC), and multiple\n   sources, out of which only some may be using the PUBLISH\
    \ mechanism.\n      Note that sources for event state other than those using the\n\
    \      PUBLISH mechanism are explicitly allowed.  However, it is beyond\n    \
    \  the scope of this document to define such interfaces.\n   Event packages that\
    \ make use of the PUBLISH mechanism SHOULD describe\n   whether this model for\
    \ event state publication is applicable, and MAY\n   describe specific mechanisms\
    \ used for aggregating publications from\n   multiple sources.\n   For presence,\
    \ a PUA can publish presence state for just a subset of\n   the tuples that may\
    \ be composited into the presence document that\n   watchers receive in a NOTIFY.\
    \  The mechanism by which the ESC\n   aggregates this information is a matter\
    \ of local policy and out of\n   the scope of this specification.\n"
- title: 10.4.  Event State Segmentation
  contents:
  - "10.4.  Event State Segmentation\n   For some event packages, there exists a natural\
    \ decomposition of\n   event state into segments.  Each segment is defined as\
    \ one of\n   potentially many identifiable sections in the published event state.\n\
    \   Any event package whose content type supports such segmentation of\n   event\
    \ state, SHOULD describe the way in which these event state\n   segments are identified\
    \ by the ESC.\n   In presence publication, the EPA MUST keep the \"id\" attributes\
    \ of\n   tuples consistent in the context of an entity-tag.  If a publication\n\
    \   modifies the contents of a tuple, that tuple MUST maintain its\n   original\
    \ \"id\".  The ESC will interpret each tuple in the context of\n   the entity-tag\
    \ with which the request arrived.  A tuple whose \"id\" is\n   missing compared\
    \ to the original publication will be considered as\n   being removed.  Similarly,\
    \ a tuple is interpreted as being added if\n   its \"id\" attribute is one that\
    \ the original publication did not\n   contain.\n"
- title: 10.5.  Rate of Publication
  contents:
  - "10.5.  Rate of Publication\n   Controlling the rate of publication is discussed\
    \ in Section 9.\n   Individual event packages MAY in turn define recommendations\
    \ (SHOULD\n   or MUST strength) on absolute maximum rates at which publications\
    \ are\n   allowed to be generated by a single EPA.\n   There are no rate limiting\
    \ recommendations for presence publication.\n"
- title: 11.  Protocol Element Definitions
  contents:
  - "11.  Protocol Element Definitions\n   This section describes the extensions required\
    \ for event publication\n   in SIP.\n"
- title: 11.1.  New Methods
  contents:
  - '11.1.  New Methods

    '
- title: 11.1.1.  PUBLISH Method
  contents:
  - "11.1.1.  PUBLISH Method\n   \"PUBLISH\" is added to the definition of the element\
    \ \"Method\" in the\n   SIP message grammar.  As with all other SIP methods, the\
    \ method name\n   is case sensitive.  PUBLISH is used to publish event state to\
    \ an\n   entity responsible for compositing this event state.\n   Table 2 and\
    \ Table 3 extend Tables 2 and 3 of RFC 3261 [4] by adding\n   an additional column,\
    \ defining the header fields that can be used in\n   PUBLISH requests and responses.\
    \  The keys in these tables are\n   specified in Section 20 of RFC 3261 [4].\n\
    \   +---------------------+---------+---------+\n   | Header Field        |  where\
    \  | PUBLISH |\n   +---------------------+---------+---------+\n   | Accept  \
    \            |    R    |    o    |\n   | Accept              |   2xx   |    -\
    \    |\n   | Accept              |   415   |    m*   |\n   | Accept-Encoding \
    \    |    R    |    o    |\n   | Accept-Encoding     |   2xx   |    -    |\n \
    \  | Accept-Encoding     |   415   |    m*   |\n   | Accept-Language     |   \
    \ R    |    o    |\n   | Accept-Language     |   2xx   |    -    |\n   | Accept-Language\
    \     |   415   |    m*   |\n   | Alert-Info          |         |    -    |\n\
    \   | Allow               |    R    |    o    |\n   | Allow               |  \
    \  r    |    o    |\n   | Allow               |   405   |    m    |\n   | Allow-Events\
    \        |    R    |    o    |\n   | Allow-Events        |   489   |    m    |\n\
    \   | Authentication-Info |   2xx   |    o    |\n   | Authorization       |  \
    \  R    |    o    |\n   | Call-ID             |    c    |    m    |\n   | Call-Info\
    \           |         |    o    |\n   | Contact             |    R    |    - \
    \   |\n   | Contact             |   1xx   |    -    |\n   | Contact          \
    \   |   2xx   |    -    |\n   | Contact             |   3xx   |    o    |\n  \
    \ | Contact             |   485   |    o    |\n   | Content-Disposition |    \
    \     |    o    |\n   | Content-Encoding    |         |    o    |\n   | Content-Language\
    \    |         |    o    |\n   | Content-Length      |         |    t    |\n \
    \  | Content-Type        |         |    *    |\n   | CSeq                |   \
    \ c    |    m    |\n   | Date                |         |    o    |\n   | Event\
    \               |    R    |    m    |\n   | Error-Info          | 300-699 |  \
    \  o    |\n   | Expires             |         |    o    |\n   | Expires      \
    \       |   2xx   |    m    |\n   | From                |    c    |    m    |\n\
    \   | In-Reply-To         |    R    |    -    |\n   | Max-Forwards        |  \
    \  R    |    m    |\n   | Min-Expires         |   423   |    m    |\n   | MIME-Version\
    \        |         |    o    |\n   | Organization        |         |    o    |\n\
    \   +---------------------+---------+---------+\n     Table 2: Summary of header\
    \ fields, A--O\n   +---------------------+-----------------+---------+\n   | Header\
    \ Field        |      where      | PUBLISH |\n   +---------------------+-----------------+---------+\n\
    \   | Priority            |        R        |    o    |\n   | Proxy-Authenticate\
    \  |       407       |    m    |\n   | Proxy-Authenticate  |       401       |\
    \    o    |\n   | Proxy-Authorization |        R        |    o    |\n   | Proxy-Require\
    \       |        R        |    o    |\n   | Record-Route        |            \
    \     |    -    |\n   | Reply-To            |                 |    -    |\n  \
    \ | Require             |                 |    o    |\n   | Retry-After      \
    \   | 404,413,480,486 |    o    |\n   | Retry-After         |     500,503    \
    \ |    o    |\n   | Retry-After         |     600,603     |    o    |\n   | Route\
    \               |        R        |    c    |\n   | Server              |    \
    \    r        |    o    |\n   | Subject             |        R        |    o \
    \   |\n   | Supported           |        R        |    o    |\n   | Supported\
    \           |       2xx       |    o    |\n   | Timestamp           |        \
    \         |    o    |\n   | To                  |       c(1)      |    m    |\n\
    \   | Unsupported         |       420       |    o    |\n   | User-Agent     \
    \     |                 |    o    |\n   | Via                 |        R     \
    \   |    m    |\n   | Via                 |        rc       |    m    |\n   |\
    \ Warning             |        r        |    o    |\n   | WWW-Authenticate   \
    \ |       401       |    m    |\n   | WWW-Authenticate    |       407       |\
    \    o    |\n   +---------------------+-----------------+---------+\n        \
    \ Table 3: Summary of header fields, P--Z\n"
- title: 11.2.  New Response Codes
  contents:
  - '11.2.  New Response Codes

    '
- title: 11.2.1.  "412 Conditional Request Failed" Response Code
  contents:
  - "11.2.1.  \"412 Conditional Request Failed\" Response Code\n   The 412 (Conditional\
    \ Request Failed) response is added to the\n   \"Client-Error\" header field definition.\
    \  412 (Conditional Request\n   Failed) is used to indicate that the precondition\
    \ given for the\n   request has failed.\n"
- title: 11.3.  New Header Fields
  contents:
  - "11.3.  New Header Fields\n   Table 4, Table 5, and Table 6 expand on Table 3\
    \ in SIP [4], as\n   amended by the changes in Section 11.1.\n   +--------------+-------+-------+-----+-----+-----+-----+-----+\n\
    \   | Header Field | where | proxy | ACK | BYE | CAN | INF | INV |\n   +--------------+-------+-------+-----+-----+-----+-----+-----+\n\
    \   | SIP-ETag     |  2xx  |       |  -  |  -  |  -  |  -  |  -  |\n   | SIP-If-Match\
    \ |   R   |       |  -  |  -  |  -  |  -  |  -  |\n   +--------------+-------+-------+-----+-----+-----+-----+-----+\n\
    \              Table 4: Summary of header fields, P--Z\n   +--------------+-------+-------+-----+-----+-----+-----+-----+\n\
    \   | Header Field | where | proxy | NOT | OPT | PRA | REG | SUB |\n   +--------------+-------+-------+-----+-----+-----+-----+-----+\n\
    \   | SIP-ETag     |  2xx  |       |  -  |  -  |  -  |  -  |  -  |\n   | SIP-If-Match\
    \ |   R   |       |  -  |  -  |  -  |  -  |  -  |\n   +--------------+-------+-------+-----+-----+-----+-----+-----+\n\
    \              Table 5: Summary of header fields, P--Z\n    +--------------+-------+-------+-----+-----+-----+---------+\n\
    \    | Header Field | where | proxy | UPD | MSG | REF | PUBLISH |\n    +--------------+-------+-------+-----+-----+-----+---------+\n\
    \    | SIP-ETag     |  2xx  |       |  -  |  -  |  -  |    m    |\n    | SIP-If-Match\
    \ |   R   |       |  -  |  -  |  -  |    o    |\n    +--------------+-------+-------+-----+-----+-----+---------+\n\
    \              Table 6: Summary of header fields, P--Z\n"
- title: 11.3.1.  "SIP-ETag" Header Field
  contents:
  - "11.3.1.  \"SIP-ETag\" Header Field\n   SIP-ETag is added to the definition of\
    \ the element \"general-header\"\n   in the SIP message grammar.  Usage of this\
    \ header is described in\n   Section 4 and Section 6.\n"
- title: 11.3.2.  "SIP-If-Match" Header Field
  contents:
  - "11.3.2.  \"SIP-If-Match\" Header Field\n   SIP-If-Match is added to the definition\
    \ of the element \"general-\n   header\" in the SIP message grammar.  Usage of\
    \ this header is\n   described in Section 4 and Section 6.\n"
- title: 12.  Augmented BNF Definitions
  contents:
  - "12.  Augmented BNF Definitions\n   This section describes the syntax extensions\
    \ required for event\n   publication in SIP.  The formal syntax definitions described\
    \ in this\n   section are expressed in the Augmented BNF [7] format used in SIP\n\
    \   [4], and contain references to elements defined therein.\n      PUBLISHm \
    \          = %x50.55.42.4C.49.53.48 ; PUBLISH in caps.\n      extension-method\
    \   = PUBLISHm / token\n      SIP-ETag           = \"SIP-ETag\" HCOLON entity-tag\n\
    \      SIP-If-Match       = \"SIP-If-Match\" HCOLON entity-tag\n      entity-tag\
    \         = token\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This document registers a new method name, a new\
    \ response code and\n   two new header field names.\n"
- title: 13.1.  Methods
  contents:
  - "13.1.  Methods\n   This document registers a new SIP method, defined by the following\n\
    \   information, which has been added to the method and response-code\n   sub-registry\
    \ under http://www.iana.org/assignments/sip-parameters.\n      Method Name:  \
    \ PUBLISH\n      Reference:     [RFC3903]\n"
- title: 13.2.  Response Codes
  contents:
  - "13.2.  Response Codes\n   This document registers a new response code.  This\
    \ response code is\n   defined by the following information, which has been added\
    \ to the\n   method and response-code sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n\
    \      Response Code Number:   412\n      Default Reason Phrase:  Conditional\
    \ Request Failed\n"
- title: 13.3.  Header Field Names
  contents:
  - "13.3.  Header Field Names\n   This document registers two new SIP header field\
    \ names.  These\n   headers are defined by the following information, which has\
    \ been\n   added to the header sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n\
    \      Header Name:    SIP-ETag\n      Compact Form:   (none)\n      Header Name:\
    \    SIP-If-Match\n      Compact Form:   (none)\n"
- title: 14.  Security Considerations
  contents:
  - '14.  Security Considerations

    '
- title: 14.1.  Access Control
  contents:
  - "14.1.  Access Control\n   Since event state may be considered sensitive information,\
    \ the ESC\n   should have the ability to selectively accept publications from\n\
    \   authorized sources only, based on the identity of the EPA.\n   The state agent\
    \ SHOULD authenticate the EPA, and SHOULD apply its\n   authorization policies\
    \ (e.g., based on access control lists) to all\n   requests.  The composition\
    \ model makes no assumptions that all input\n   sources for an ESC are on the\
    \ same network, or in the same\n   administrative domain.\n   ESCs and EPAs MUST\
    \ implement Digest for authenticating PUBLISH\n   requests, as defined in RFC\
    \ 3261 [4].  The exact methods for creating\n   and manipulating access control\
    \ policies in the ESC are outside the\n   scope of this document.\n"
- title: 14.2.  Denial of Service Attacks
  contents:
  - "14.2.  Denial of Service Attacks\n   The creation of state at the ESC upon receipt\
    \ of a PUBLISH request\n   can be used by attackers to consume resources on a\
    \ victim's machine,\n   possibly rendering it unusable.\n   To reduce the chances\
    \ of such an attack, implementations of ESCs\n   SHOULD require authentication\
    \ of PUBLISH requests.  Implementations\n   MUST support Digest authentication,\
    \ as defined in RFC 3261 [4].\n   Also, the ESC SHOULD throttle incoming publications\
    \ and the\n   corresponding notifications resulting from the changes in event\n\
    \   state.  As a first step, careful selection of default minimum Expires\n  \
    \ header field values for the supported event packages at an ESC can\n   help\
    \ limit refreshes of event state.\n   Additional throttling and debounce logic\
    \ at the ESC is advisable to\n   further reduce the notification traffic produced\
    \ as a result of a\n   PUBLISH request.\n"
- title: 14.3.  Replay Attacks
  contents:
  - "14.3.  Replay Attacks\n   Replaying a PUBLISH request can have detrimental effects.\
    \  An\n   attacker may be able to perform any event state publication it\n   witnessed\
    \ being performed at some point in the past, by replaying\n   that PUBLISH request.\
    \  Among other things, such a replay message may\n   be used to spoof old event\
    \ state information, although a versioning\n   mechanism, e.g., a timestamp, in\
    \ the state information may help\n   mitigate such an attack.\n   To prevent replay\
    \ attacks, implementations MUST support Digest\n   authentication with replay\
    \ protection, as defined in RFC 3261 [4].\n   Further mechanisms for countering\
    \ replay attacks are discussed in SIP\n   [4].\n"
- title: 14.4.  Man in the Middle Attacks
  contents:
  - "14.4.  Man in the Middle Attacks\n   Even with authentication, man-in-the-middle\
    \ attacks using PUBLISH may\n   be used to install arbitrary event state information,\
    \ modify or\n   remove existing event state information in publications, or even\n\
    \   remove event state altogether at an ESC.\n   To prevent such attacks, implementations\
    \ SHOULD, at a minimum,\n   provide integrity protection across the To, From,\
    \ Event, SIP-If-\n   Match, Route, and Expires header fields and the bodies of\
    \ PUBLISH\n   requests.\n   If the ESC receives event state in a PUBLISH request\
    \ which is\n   integrity protected using a security association that is not with\
    \ the\n   ESC (e.g., integrity protection is applied end-to-end, from publisher\n\
    \   to subscriber), the state agent coupled with the ESC MUST NOT modify\n   the\
    \ event state before exposing it to the subscribers of this event\n   state in\
    \ NOTIFY requests.  This is to preserve the end-to-end\n   integrity of the event\
    \ state.\n   For integrity protection, ESCs MUST implement TLS [8], and MUST\n\
    \   support both mutual and one-way authentication, and MUST also support\n  \
    \ the SIPS URI scheme defined in SIP [4].  EPAs SHOULD be capable of\n   initiating\
    \ TLS and SHOULD support the SIPS URI scheme.  ESCs and EPAs\n   MAY support S/MIME\
    \ [9] for integrity protection, as defined in SIP\n   [4].\n"
- title: 14.5.  Confidentiality
  contents:
  - "14.5.  Confidentiality\n   The state information contained in a PUBLISH message\
    \ may potentially\n   contain sensitive information.  Implementations MAY encrypt\
    \ such\n   information to ensure confidentiality.\n   For providing confidentiality,\
    \ ESCs MUST implement TLS [8], MUST\n   support both mutual and one-way authentication,\
    \ and MUST also support\n   the SIPS URI scheme defined in SIP [4].  EPAs SHOULD\
    \ be capable of\n   initiating TLS and SHOULD support the SIPS URI scheme.  ESCs\
    \ and EPAs\n   MAY support S/MIME [9] for encryption of event state information,\
    \ as\n   defined in SIP [4].\n"
- title: 15.  Examples
  contents:
  - "15.  Examples\n   This section shows an example of using the PUBLISH method for\n\
    \   publishing a presence document from a presence user agent to a\n   presence\
    \ agent.  The watcher in this example is subscribing to the\n   presentity's presence\
    \ information from the PA.  The PUA may also\n   SUBSCRIBE to its own presence\
    \ to see the composite presence state\n   exposed by the PA.  This is an optional\
    \ but likely step for the PUA,\n   and is not shown in this example.\n   When\
    \ the value of the Content-Length header field is \"...\" this means\n   that\
    \ the value should be whatever the computed length of the body is.\n         \
    \ PUA                     PA                      WATCHER\n         (EPA)    \
    \               (ESC)\n           |                       |                  \
    \       |\n           |                       | <---- M1: SUBSCRIBE --- |\n  \
    \         |                       |                         |\n           |  \
    \                     | ----- M2: 200 OK -----> |\n           |              \
    \         |                         |\n           |                       | -----\
    \ M3: NOTIFY -----> |\n           |                       |                  \
    \       |\n           |                       | <---- M4: 200 OK ------ |\n  \
    \         |                       |                         |\n           |  \
    \                     |                         |\n           | ---- M5: PUBLISH\
    \ ---> |                         |\n           |                       |     \
    \                    |\n           | <--- M6: 200 OK ----  |                 \
    \        |\n           |                       |                         |\n \
    \          |                       | ----- M7: NOTIFY -----> |\n           | \
    \                      |                         |\n           |             \
    \          | <---- M8: 200 OK ------ |\n           |                       | \
    \                        |\n           | ---- M9: PUBLISH ---> |             \
    \            |\n           |                       |                         |\n\
    \           | <--- M10: 200 OK ---  |                         |\n           |\
    \                       |                         |\n           |            \
    \           |                         |\n           | --- M11: PUBLISH ---> |\
    \                         |\n           |                       |            \
    \             |\n           | <-- M12: 200 OK ----  |                        \
    \ |\n           |                       |                         |\n        \
    \   |                       | ----- M13: NOTIFY ----> |\n           |        \
    \               |                         |\n           |                    \
    \   | <---- M14: 200 OK ----- |\n           |                       |        \
    \                 |\n   Message flow:\n   M1: The watcher initiates a new subscription\
    \ to the\n      presentity@example.com's presence agent.\n      SUBSCRIBE sip:presentity@example.com\
    \ SIP/2.0\n      Via: SIP/2.0/UDP host.example.com;branch=z9hG4bKnashds7\n   \
    \   To: <sip:presentity@example.com>\n      From: <sip:watcher@example.com>;tag=12341234\n\
    \      Call-ID: 12345678@host.example.com\n      CSeq: 1 SUBSCRIBE\n      Max-Forwards:\
    \ 70\n      Expires: 3600\n      Event: presence\n      Contact: sip:user@host.example.com\n\
    \      Content-Length: 0\n   M2: The presence agent for presentity@example.com\
    \ processes the\n      subscription request and creates a new subscription.  A\
    \ 200 (OK)\n      response is sent to confirm the subscription.\n      SIP/2.0\
    \ 200 OK\n      Via: SIP/2.0/UDP host.example.com;branch=z9hG4bKnashds7\n    \
    \   ;received=192.0.2.1\n      To: <sip:presentity@example.com>;tag=abcd1234\n\
    \      From: <sip:watcher@example.com>;tag=12341234\n      Call-ID: 12345678@host.example.com\n\
    \      CSeq: 1 SUBSCRIBE\n      Contact: sip:pa.example.com\n      Expires: 3600\n\
    \      Content-Length: 0\n   M3: In order to complete the process, the presence\
    \ agent sends the\n      watcher a NOTIFY with the current presence state of the\n\
    \      presentity.\n      NOTIFY sip:user@host.example.com SIP/2.0\n      Via:\
    \ SIP/2.0/UDP pa.example.com;branch=z9hG4bK8sdf2\n      To: <sip:watcher@example.com>;tag=12341234\n\
    \      From: <sip:presentity@example.com>;tag=abcd1234\n      Call-ID: 12345678@host.example.com\n\
    \      CSeq: 1 NOTIFY\n      Max-Forwards: 70\n      Event: presence\n      Subscription-State:\
    \ active; expires=3599\n      Contact: sip:pa.example.com\n      Content-Type:\
    \ application/pidf+xml\n      Content-Length: ...\n      [PIDF document]\n   M4:\
    \ The watcher confirms receipt of the NOTIFY request.\n      SIP/2.0 200 OK\n\
    \      Via: SIP/2.0/UDP pa.example.com;branch=z9hG4bK8sdf2\n       ;received=192.0.2.2\n\
    \      To: <sip:watcher@example.com>;tag=12341234\n      From: <sip:presentity@example.com>;tag=abcd1234\n\
    \      Call-ID: 12345678@host.example.com\n      CSeq: 1 NOTIFY\n   M5: A presence\
    \ user agent (acting for the presentity) initiates a\n       PUBLISH request to\
    \ the presence agent in order to update it with\n       new presence information.\
    \  The Expires header field indicates the\n       suggested duration for this\
    \ event soft state.\n      PUBLISH sip:presentity@example.com SIP/2.0\n      Via:\
    \ SIP/2.0/UDP pua.example.com;branch=z9hG4bK652hsge\n      To: <sip:presentity@example.com>\n\
    \      From: <sip:presentity@example.com>;tag=1234wxyz\n      Call-ID: 81818181@pua.example.com\n\
    \      CSeq: 1 PUBLISH\n      Max-Forwards: 70\n      Expires: 3600\n      Event:\
    \ presence\n      Content-Type: application/pidf+xml\n      Content-Length: ...\n\
    \      [Published PIDF document]\n   M6: The presence agent receives, and accepts\
    \ the presence\n      publication.  The published data is incorporated into the\n\
    \      presentity's presence information.\n      SIP/2.0 200 OK\n      Via: SIP/2.0/UDP\
    \ pua.example.com;branch=z9hG4bK652hsge\n       ;received=192.0.2.3\n      To:\
    \ <sip:presentity@example.com>;tag=1a2b3c4d\n      From: <sip:presentity@example.com>;tag=1234wxyz\n\
    \      Call-ID: 81818181@pua.example.com\n      CSeq: 1 PUBLISH\n      SIP-ETag:\
    \ dx200xyz\n      Expires: 1800\n   M7: The presence agent determines that a reportable\
    \ change has been\n      made to the presentity's presence information, and sends\
    \ a\n      new presence notification to the watcher.\n      NOTIFY sip:user@host.example.com\
    \ SIP/2.0\n      Via: SIP/2.0/UDP pa.example.com;branch=z9hG4bK4cd42a\n      To:\
    \ <sip:watcher@example.com>;tag=12341234\n      From: <sip:presentity@example.com>;tag=abcd1234\n\
    \      Call-ID: 12345678@host.example.com\n      CSeq: 2 NOTIFY\n      Max-Forwards:\
    \ 70\n      Event: presence\n      Subscription-State: active; expires=3400\n\
    \      Contact: sip:pa.example.com\n      Content-Type: application/pidf+xml\n\
    \      Content-Length: ...\n      [New PIDF document]\n   M8: The watcher confirms\
    \ receipt of the NOTIFY request.\n      SIP/2.0 200 OK\n      Via: SIP/2.0/UDP\
    \ pa.example.com;branch=z9hG4bK4cd42a\n       ;received=192.0.2.2\n      To: <sip:watcher@example.com>;tag=12341234\n\
    \      From: <sip:presentity@example.com>;tag=abcd1234\n      Call-ID: 12345678@host.example.com\n\
    \      CSeq: 2 NOTIFY\n      Content-Length: 0\n   M9: The PUA determines that\
    \ the event state it previously published\n      is about to expire, and refreshes\
    \ that event state.\n      PUBLISH sip:presentity@example.com SIP/2.0\n      Via:\
    \ SIP/2.0/UDP pua.example.com;branch=z9hG4bK771ash02\n      To: <sip:presentity@example.com>\n\
    \      From: <sip:presentity@example.com>;tag=1234kljk\n      Call-ID: 98798798@pua.example.com\n\
    \      CSeq: 1 PUBLISH\n      Max-Forwards: 70\n      SIP-If-Match: dx200xyz\n\
    \      Expires: 3600\n      Event: presence\n      Content-Length: 0\n   M10:\
    \ The presence agent receives, and accepts the publication\n      refresh.  The\
    \ timers regarding the expiration of the specific\n      event state identified\
    \ by the entity-tag are updated.  As always,\n      the ESC returns an entity-tag\
    \ in the response to a successful\n      PUBLISH.  Note that no actual state change\
    \ has occurred, so the\n      watchers will receive no NOTIFYs.\n      SIP/2.0\
    \ 200 OK\n      Via: SIP/2.0/UDP pua.example.com;branch=z9hG4bK771ash02\n    \
    \   ;received=192.0.2.3\n      To: <sip:presentity@example.com>;tag=2affde434\n\
    \      From: <sip:presentity@example.com>;tag=1234kljk\n      Call-ID: 98798798@pua.example.com\n\
    \      CSeq: 1 PUBLISH\n      SIP-ETag: kwj449x\n      Expires: 1800\n   M11:\
    \ The PUA of the presentity detects a change in the user's\n      presence state.\
    \  It initiates a PUBLISH request to the presence\n      agent to modify the published\
    \ presence information with the recent\n      change.\n      PUBLISH sip:presentity@example.com\
    \ SIP/2.0\n      Via: SIP/2.0/UDP pua.example.com;branch=z9hG4bKcdad2\n      To:\
    \ <sip:presentity@example.com>\n      From: <sip:presentity@example.com>;tag=54321mm\n\
    \      Call-ID: 5566778@pua.example.com\n      CSeq: 1 PUBLISH\n      Max-Forwards:\
    \ 70\n      SIP-If-Match: kwj449x\n      Expires: 3600\n      Event: presence\n\
    \      Content-Type: application/pidf+xml\n      Content-Length: ...\n      [Published\
    \ PIDF Document]\n   M12: The presence agent receives, and accepts the modifying\n\
    \       publication.  The published data is incorporated into the\n       presentity's\
    \ presence information, updating the previous\n       publication from the same\
    \ PUA.\n      SIP/2.0 200 OK\n      Via: SIP/2.0/UDP pua.example.com;branch=z9hG4bKcdad2\n\
    \       ;received=192.0.2.3\n      To: <sip:presentity@example.com>;tag=effe22aa\n\
    \      From: <sip:presentity@example.com>;tag=54321mm\n      Call-ID: 5566778@pua.example.com\n\
    \      CSeq: 1 PUBLISH\n      SIP-ETag: qwi982ks\n      Expires: 3600\n   M13:\
    \ The presence agent determines that a reportable change has been\n       made\
    \ to the presentity's presence document, and sends a\n       new presence notification\
    \ to all active subscriptions.\n      NOTIFY sip:user@host.example.com SIP/2.0\n\
    \      Via: SIP/2.0/UDP pa.example.com;branch=z9hG4bK32defd3\n      To: <sip:watcher@example.com>;tag=12341234\n\
    \      From: <sip:presentity@example.com>;tag=abcd1234\n      Call-ID: 12345678@host.example.com\n\
    \      CSeq: 2 NOTIFY\n      Max-Forwards: 70\n      Event: presence\n      Subscription-State:\
    \ active; expires=3400\n      Contact: sip:pa.example.com\n      Content-Type:\
    \ application/pidf+xml\n      Content-Length: ...\n      [New PIDF document]\n\
    \   M14: The watcher confirms receipt of the NOTIFY request.\n      SIP/2.0 200\
    \ OK\n      Via: SIP/2.0/UDP pa.example.com;branch=z9hG4bK32defd3\n       ;received=192.0.2.3\n\
    \      To: <sip:watcher@example.com>;tag=12341234\n      From: <sip:presentity@example.com>;tag=abcd1234\n\
    \      Call-ID: 12345678@host.example.com\n      CSeq: 2 NOTIFY\n      Content-Length:\
    \ 0\n"
- title: 16.  Contributors
  contents:
  - "16.  Contributors\n   The original contributors to this specification are:\n\
    \      Ben Campbell\n      Estacado Systems\n      Sean Olson\n      Microsoft\n\
    \      Jon Peterson\n      Neustar, Inc.\n      Jonathan Rosenberg\n      dynamicsoft\n\
    \      Brian Stucker\n      Nortel Networks, Inc.\n"
- title: 17.  Acknowledgements
  contents:
  - "17.  Acknowledgements\n   The authors would like to thank the SIMPLE Working\
    \ Group for their\n   collective effort, and specifically the following people\
    \ for their\n   review and support of this work: Henning Schulzrinne, Paul Kyzivat,\n\
    \   Hisham Khartabil, George Foti, Keith Drage, Samir Srivastava, Arun\n   Kumar,\
    \ Adam Roach, Pekka Pessi, Kai Wang, Cullen Jennings, Mikko\n   Lonnfors, Eva-Maria\
    \ Leppanen, Ernst Horvath, Thanos Diacakis, Oded\n   Cnaan, Rohan Mahy, and Dean\
    \ Willis.\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [1]  Roach, A., \"Session Initiation Protocol\
    \ (SIP)-Specific Event\n        Notification\", RFC 3265, June 2002.\n   [2] \
    \ Rosenberg, J., \"A Presence Event Package for the Session\n        Initiation\
    \ Protocol (SIP)\", RFC 3856, August 2004.\n   [3]  Day, M., Rosenberg, J., and\
    \ H. Sugano, \"A Model for Presence and\n        Instant Messaging\", RFC 2778,\
    \ February 2000.\n   [4]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\
    \ A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n\
    \        Session Initiation Protocol\", RFC 3261, June 2002.\n   [5]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [6]  Sugano, H., Fujimoto, S., Klyne, G., Bateman,\
    \ A., Carr, W., and\n        J.  Peterson, \"Presence Information Data Format\
    \ (PIDF)\", RFC\n        3863, August 2004.\n   [7]  Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC 2234, November\
    \ 1997.\n   [8]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC\n\
    \        2246, January 1999.\n   [9]  Ramsdell, B., Ed., \"Secure/Multipurpose\
    \ Internet Mail Extensions\n        (S/MIME) Version 3.1 Message Specification\"\
    , RFC 3851, July\n        2004.\n"
- title: 19.2.  Informative References
  contents:
  - "19.2.  Informative References\n   [10] Campbell, B., \"SIMPLE Presence Publication\
    \ Requirements\", Work\n        in Progress, February 2003.\n   [11] Mahy, R.,\
    \ \"A Message Summary and Message Waiting Indication\n        Event Package for\
    \ the  Session Initiation Protocol (SIP)\", RFC\n        3842, August 2004.\n\
    \   [12] Rosenberg, J., Schulzrinne, H., and P. Kyzivat, \"Indicating User\n \
    \       Agent Capabilities in the Session Initiation Protocol (SIP)\",\n     \
    \   RFC 3840, August 2004.\n   [13] Fielding, R., Gettys, J., Mogul, J., Frystyk,\
    \ H., Masinter, L.,\n        Leach, P., and T. Berners-Lee, \"Hypertext Transfer\
    \ Protocol --\n        HTTP/1.1\", RFC 2616, June 1999.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Aki Niemi (editor)\n   Nokia\n   P.O. Box 407\n   NOKIA\
    \ GROUP, FIN  00045\n   Finland\n   Phone: +358 50 389 1644\n   EMail: aki.niemi@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
