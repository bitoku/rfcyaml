- title: __initial_text__
  contents:
  - '                Segment Routing with the MPLS Data Plane

    '
- title: Abstract
  contents:
  - "Abstract\n   Segment Routing (SR) leverages the source-routing paradigm.  A node\n\
    \   steers a packet through a controlled set of instructions, called\n   segments,\
    \ by prepending the packet with an SR header.  In the MPLS\n   data plane, the\
    \ SR header is instantiated through a label stack.\n   This document specifies\
    \ the forwarding behavior to allow\n   instantiating SR over the MPLS data plane\
    \ (SR-MPLS).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8660.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n  \
    \ 2.  MPLS Instantiation of Segment Routing\n     2.1.  Multiple Forwarding Behaviors\
    \ for the Same Prefix\n     2.2.  SID Representation in the MPLS Forwarding Plane\n\
    \     2.3.  Segment Routing Global Block and Local Block\n     2.4.  Mapping a\
    \ SID Index to an MPLS Label\n     2.5.  Incoming Label Collision\n       2.5.1.\
    \  Tiebreaking Rules\n       2.5.2.  Redistribution between Routing Protocol Instances\n\
    \     2.6.  Effect of Incoming Label Collision on Outgoing Label\n           \
    \ Programming\n     2.7.  PUSH, CONTINUE, and NEXT\n       2.7.1.  PUSH\n    \
    \   2.7.2.  CONTINUE\n       2.7.3.  NEXT\n     2.8.  MPLS Label Downloaded to\
    \ the FIB for Global and Local SIDs\n     2.9.  Active Segment\n     2.10. Forwarding\
    \ Behavior for Global SIDs\n       2.10.1.  Forwarding for PUSH and CONTINUE of\
    \ Global SIDs\n       2.10.2.  Forwarding for the NEXT Operation for Global SIDs\n\
    \     2.11. Forwarding Behavior for Local SIDs\n       2.11.1.  Forwarding for\
    \ the PUSH Operation on Local SIDs\n       2.11.2.  Forwarding for the CONTINUE\
    \ Operation for Local SIDs\n       2.11.3.  Outgoing Label for the NEXT Operation\
    \ for Local SIDs\n   3.  IANA Considerations\n   4.  Manageability Considerations\n\
    \   5.  Security Considerations\n   6.  References\n     6.1.  Normative References\n\
    \     6.2.  Informative References\n   Appendix A.  Examples\n     A.1.  IGP Segment\
    \ Examples\n     A.2.  Incoming Label Collision Examples\n       A.2.1.  Example\
    \ 1\n       A.2.2.  Example 2\n       A.2.3.  Example 3\n       A.2.4.  Example\
    \ 4\n       A.2.5.  Example 5\n       A.2.6.  Example 6\n       A.2.7.  Example\
    \ 7\n       A.2.8.  Example 8\n       A.2.9.  Example 9\n       A.2.10. Example\
    \ 10\n       A.2.11. Example 11\n       A.2.12. Example 12\n       A.2.13. Example\
    \ 13\n       A.2.14. Example 14\n     A.3.  Examples for the Effect of Incoming\
    \ Label Collision on an\n           Outgoing Label\n       A.3.1.  Example 1\n\
    \       A.3.2.  Example 2\n   Acknowledgements\n   Contributors\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Segment Routing architecture [RFC8402] can be directly\
    \ applied to\n   the MPLS architecture with no change in the MPLS forwarding plane.\n\
    \   This document specifies forwarding-plane behavior to allow Segment\n   Routing\
    \ to operate on top of the MPLS data plane (SR-MPLS).  This\n   document does\
    \ not address control-plane behavior.  Control-plane\n   behavior is specified\
    \ in other documents such as [RFC8665],\n   [RFC8666], and [RFC8667].\n   The\
    \ Segment Routing problem statement is described in [RFC7855].\n   Coexistence\
    \ of SR over the MPLS forwarding plane with LDP [RFC5036]\n   is specified in\
    \ [RFC8661].\n   Policy routing and traffic engineering using Segment Routing\
    \ can be\n   found in [ROUTING-POLICY].\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  MPLS Instantiation of Segment Routing
  contents:
  - "2.  MPLS Instantiation of Segment Routing\n   MPLS instantiation of Segment Routing\
    \ fits in the MPLS architecture\n   as defined in [RFC3031] from both a control-plane\
    \ and forwarding-\n   plane perspective:\n   *  From a control-plane perspective,\
    \ [RFC3031] does not mandate a\n      single signaling protocol.  Segment Routing\
    \ makes use of various\n      control-plane protocols such as link-state IGPs\
    \ [RFC8665]\n      [RFC8666] [RFC8667].  The flooding mechanisms of link-state\
    \ IGPs\n      fit very well with label stacking on the ingress.  A future\n  \
    \    control-layer protocol and/or policy/configuration can be used to\n     \
    \ specify the label stack.\n   *  From a forwarding-plane perspective, Segment\
    \ Routing does not\n      require any change to the forwarding plane because Segment\
    \ IDs\n      (SIDs) are instantiated as MPLS labels, and the Segment Routing\n\
    \      header is instantiated as a stack of MPLS labels.\n   We call the \"MPLS\
    \ Control Plane Client (MCC)\" any control-plane\n   entity installing forwarding\
    \ entries in the MPLS data plane.  Local\n   configuration and policies applied\
    \ on a router are examples of MCCs.\n   In order to have a node segment reach\
    \ the node, a network operator\n   SHOULD configure at least one node segment\
    \ per routing instance,\n   topology, or algorithm.  Otherwise, the node is not\
    \ reachable within\n   the routing instance, within the topology, or along the\
    \ routing\n   algorithm, which restricts its ability to be used by an SR Policy\
    \ and\n   as a Topology Independent Loop-Free Alternate (TI-LFA).\n"
- title: 2.1.  Multiple Forwarding Behaviors for the Same Prefix
  contents:
  - "2.1.  Multiple Forwarding Behaviors for the Same Prefix\n   The SR architecture\
    \ does not prohibit having more than one SID for\n   the same prefix.  In fact,\
    \ by allowing multiple SIDs for the same\n   prefix, it is possible to have different\
    \ forwarding behaviors (such\n   as different paths, different ECMP and Unequal-Cost\
    \ Multipath (UCMP)\n   behaviors, etc.) for the same destination.\n   Instantiating\
    \ Segment Routing over the MPLS forwarding plane fits\n   seamlessly with this\
    \ principle.  An operator may assign multiple MPLS\n   labels or indices to the\
    \ same prefix and assign different forwarding\n   behaviors to each label/SID.\
    \  The MCC in the network downloads\n   different MPLS labels/SIDs to the FIB\
    \ for different forwarding\n   behaviors.  The MCC at the entry of an SR domain\
    \ or at any point in\n   the domain can choose to apply a particular forwarding\
    \ behavior to a\n   particular packet by applying the PUSH action to that packet\
    \ using\n   the corresponding SID.\n"
- title: 2.2.  SID Representation in the MPLS Forwarding Plane
  contents:
  - "2.2.  SID Representation in the MPLS Forwarding Plane\n   When instantiating\
    \ SR over the MPLS forwarding plane, a SID is\n   represented by an MPLS label\
    \ or an index [RFC8402].\n   A global SID is a label, or an index that may be\
    \ mapped to an MPLS\n   label within the Segment Routing Global Block (SRGB),\
    \ of the node\n   that installs a global SID in its FIB and receives the labeled\n\
    \   packet.  Section 2.4 specifies the procedure to map a global segment\n   represented\
    \ by an index to an MPLS label within the SRGB.\n   The MCC MUST ensure that any\
    \ label value corresponding to any SID it\n   installs in the forwarding plane\
    \ follows the rules below:\n   *  The label value MUST be unique within the router\
    \ on which the MCC\n      is running, i.e., the label MUST only be used to represent\
    \ the SID\n      and MUST NOT be used to represent more than one SID or for any\n\
    \      other forwarding purpose on the router.\n   *  The label value MUST NOT\
    \ come from the range of special-purpose\n      labels [RFC7274].\n   Labels allocated\
    \ in this document are considered per-platform\n   downstream allocated labels\
    \ [RFC3031].\n"
- title: 2.3.  Segment Routing Global Block and Local Block
  contents:
  - "2.3.  Segment Routing Global Block and Local Block\n   The concepts of SRGB and\
    \ global SID are explained in [RFC8402].  In\n   general, the SRGB need not be\
    \ a contiguous range of labels.\n   For the rest of this document, the SRGB is\
    \ specified by the list of\n   MPLS label ranges [Ll(1),Lh(1)], [Ll(2),Lh(2)],...,\
    \ [Ll(k),Lh(k)]\n   where Ll(i) =< Lh(i).\n   The following rules apply to the\
    \ list of MPLS ranges representing the\n   SRGB:\n   *  The list of ranges comprising\
    \ the SRGB MUST NOT overlap.\n   *  Every range in the list of ranges specifying\
    \ the SRGB MUST NOT\n      cover or overlap with a reserved label value or range\
    \ [RFC7274],\n      respectively.\n   *  If the SRGB of a node does not conform\
    \ to the structure specified\n      in this section or to the previous two rules,\
    \ the SRGB MUST be\n      completely ignored by all routers in the routing domain,\
    \ and the\n      node MUST be treated as if it does not have an SRGB.\n   *  The\
    \ list of label ranges MUST only be used to instantiate global\n      SIDs into\
    \ the MPLS forwarding plane.\n   A local segment MAY be allocated from the Segment\
    \ Routing Local Block\n   (SRLB) [RFC8402] or from any unused label as long as\
    \ it does not use\n   a special-purpose label.  The SRLB consists of the range\
    \ of local\n   labels reserved by the node for certain local segments.  In a\n\
    \   controller-driven network, some controllers or applications MAY use\n   the\
    \ control plane to discover the available set of Local SIDs on a\n   particular\
    \ router [ROUTING-POLICY].  The rules applicable to the SRGB\n   are also applicable\
    \ to the SRLB, except the SRGB MUST only be used to\n   instantiate global SIDs\
    \ into the MPLS forwarding plane.  The\n   recommended, minimum, or maximum size\
    \ of the SRGB and/or SRLB is a\n   matter of future study.\n"
- title: 2.4.  Mapping a SID Index to an MPLS Label
  contents:
  - "2.4.  Mapping a SID Index to an MPLS Label\n   This subsection specifies how\
    \ the MPLS label value is calculated\n   given the index of a SID.  The value\
    \ of the index is determined by an\n   MCC such as IS-IS [RFC8667] or OSPF [RFC8665].\
    \  This section only\n   specifies how to map the index to an MPLS label.  The\
    \ calculated MPLS\n   label is downloaded to the FIB, sent out with a forwarded\
    \ packet, or\n   both.\n   Consider a SID represented by the index \"I\".  Consider\
    \ an SRGB as\n   specified in Section 2.3.  The total size of the SRGB, represented\
    \ by\n   the variable \"Size\", is calculated according to the formula:\n   size\
    \ = Lh(1)- Ll(1) + 1 + Lh(2)- Ll(2) + 1 + ... + Lh(k)- Ll(k) + 1\n   The following\
    \ rules MUST be applied by the MCC when calculating the\n   MPLS label value corresponding\
    \ to the SID index value \"I\".\n      0 =< I < size.  If index \"I\" does not\
    \ satisfy the previous\n      inequality, then the label cannot be calculated.\n\
    \      The label value corresponding to the SID index \"I\" is calculated\n  \
    \    as follows:\n         j = 1 , temp = 0\n         While temp + Lh(j)- Ll(j)\
    \ < I\n            temp = temp + Lh(j)- Ll(j) + 1\n            j = j+1\n     \
    \    label = I - temp + Ll(j)\n   An example for how a router calculates labels\
    \ and forwards traffic\n   based on the procedure described in this section can\
    \ be found in\n   Appendix A.1.\n"
- title: 2.5.  Incoming Label Collision
  contents:
  - "2.5.  Incoming Label Collision\n   The MPLS Architecture [RFC3031] defines the\
    \ term Forwarding\n   Equivalence Class (FEC) as the set of packets with similar\
    \ and/or\n   identical characteristics that are forwarded the same way and are\n\
    \   bound to the same MPLS incoming (local) label.  In Segment Routing\n   MPLS,\
    \ a local label serves as the SID for a given FEC.\n   We define SR FEC [RFC8402]\
    \ as one of the following:\n   *  (Prefix, Routing Instance, Topology, Algorithm)\
    \ [RFC8402], where a\n      topology identifies a set of links with metrics. \
    \ For the purpose\n      of incoming label collision resolution, the same Topology\n\
    \      numerical value SHOULD be used on all routers to identify the same\n  \
    \    set of links with metrics.  For MCCs where the \"Topology\" and/or\n    \
    \  \"Algorithm\" fields are not defined, the numerical value of zero\n      MUST\
    \ be used for these two fields.  For the purpose of incoming\n      label collision\
    \ resolution, a routing instance is identified by a\n      single incoming label\
    \ downloader to the FIB.  Two MCCs running on\n      the same router are considered\
    \ different routing instances if the\n      only way the two instances know about\
    \ each other's incoming labels\n      is through redistribution.  The numerical\
    \ value used to identify a\n      routing instance MAY be derived from other configuration\
    \ or MAY be\n      explicitly configured.  If it is derived from other configuration,\n\
    \      then the same numerical value SHOULD be derived from the same\n      configuration\
    \ as long as the configuration survives router reload.\n      If the derived numerical\
    \ value varies for the same configuration,\n      then an implementation SHOULD\
    \ make the numerical value used to\n      identify a routing instance configurable.\n\
    \   *  (next hop, outgoing interface), where the outgoing interface is\n     \
    \ physical or virtual.\n   *  (number of adjacencies, list of next hops, list\
    \ of outgoing\n      interfaces IDs in ascending numerical order).  This FEC represents\n\
    \      parallel adjacencies [RFC8402].\n   *  (Endpoint, Color).  This FEC represents\
    \ an SR Policy [RFC8402].\n   *  (Mirror SID).  The Mirror SID (see [RFC8402],\
    \ Section 5.1) is the\n      IP address advertised by the advertising node to\
    \ identify the\n      Mirror SID.  The IP address is encoded as specified in\n\
    \      Section 2.5.1.\n   This section covers the RECOMMENDED procedure for handling\
    \ the\n   scenario where, because of an error/misconfiguration, more than one\n\
    \   SR FEC as defined in this section maps to the same incoming MPLS\n   label.\
    \  Examples illustrating the behavior specified in this section\n   can be found\
    \ in Appendix A.2.\n   An incoming label collision occurs if the SIDs of the set\
    \ of FECs\n   {FEC1, FEC2, ..., FECk} map to the same incoming SR MPLS label \"\
    L1\".\n   Suppose an anycast prefix is advertised with a Prefix-SID by some,\n\
    \   but not all, of the nodes that advertise that prefix.  If the Prefix-\n  \
    \ SID sub-TLVs result in mapping that anycast prefix to the same\n   incoming\
    \ label, then the advertisement of the Prefix-SID by some, but\n   not all, of\
    \ the advertising nodes MUST NOT be treated as a label\n   collision.\n   An implementation\
    \ MUST NOT allow the MCCs belonging to the same\n   router to assign the same\
    \ incoming label to more than one SR FEC.\n   The objective of the following steps\
    \ is to deterministically install\n   in the MPLS Incoming Label Map, also known\
    \ as label FIB, a single FEC\n   with the incoming label \"L1\".  By \"deterministically\
    \ install\", we\n   mean if the set of FECs {FEC1, FEC2,..., FECk} map to the\
    \ same\n   incoming SR MPLS label \"L1\", then the steps below assign the same\
    \ FEC\n   to the label \"L1\" irrespective of the order by which the mappings\
    \ of\n   this set of FECs to the label \"L1\" are received.  For example, first-\n\
    \   come, first-served tiebreaking is not allowed.  The remaining FECs\n   may\
    \ be installed in the IP FIB without an incoming label.\n   The procedure in this\
    \ section relies completely on the local FEC and\n   label database within a given\
    \ router.\n   The collision resolution procedure is as follows:\n   1.  Given\
    \ the SIDs of the set of FECs, {FEC1, FEC2,..., FECk} map to\n       the same\
    \ MPLS label \"L1\".\n   2.  Within an MCC, apply tiebreaking rules to select\
    \ one FEC only,\n       and assign the label to it.  The losing FECs are handled\
    \ as if no\n       labels are attached to them.  The losing FECs with algorithms\n\
    \       other than the shortest path first [RFC8402] are not installed in\n  \
    \     the FIB.\n       a.  If the same set of FECs are attached to the same label\
    \ \"L1\",\n           then the tiebreaking rules MUST always select the same FEC\n\
    \           irrespective of the order in which the FECs and the label\n      \
    \     \"L1\" are received.  In other words, the tiebreaking rule MUST\n      \
    \     be deterministic.\n   3.  If there is still collision between the FECs belonging\
    \ to\n       different MCCs, then reapply the tiebreaking rules to the\n     \
    \  remaining FECs to select one FEC only, and assign the label to\n       that\
    \ FEC.\n   4.  Install the selected FEC into the IP FIB and its incoming label\n\
    \       into the label FIB.\n   5.  The remaining FECs with the default algorithm\
    \ (see the Prefix-SID\n       algorithm specification [RFC8402]) may be installed\
    \ in the FIB\n       natively, such as pure IP entries in case of Prefix FEC,\
    \ without\n       any incoming labels corresponding to their SIDs.  The remaining\n\
    \       FECs with algorithms other than the shortest path first [RFC8402]\n  \
    \     are not installed in the FIB.\n"
- title: 2.5.1.  Tiebreaking Rules
  contents:
  - "2.5.1.  Tiebreaking Rules\n   The default tiebreaking rules are specified as\
    \ follows:\n   1.  Determine the lowest administrative distance among the competing\n\
    \       FECs as defined in the section below.  Then filter away all the\n    \
    \   competing FECs with a higher administrative distance.\n   2.  If more than\
    \ one competing FEC remains after step 1, select the\n       smallest numerical\
    \ FEC value.  The numerical value of the FEC is\n       determined according to\
    \ the FEC encoding described later in this\n       section.\n   These rules deterministically\
    \ select which FEC to install in the MPLS\n   forwarding plane for the given incoming\
    \ label.\n   This document defines the default tiebreaking rules that SHOULD be\n\
    \   implemented.  An implementation MAY choose to support different\n   tiebreaking\
    \ rules and MAY use one of these instead of the default\n   tiebreaking rules.\
    \  To maximize MPLS forwarding consistency in case\n   of a SID configuration\
    \ error, the network operator MUST deploy,\n   within an IGP flooding area, routers\
    \ implementing the same\n   tiebreaking rules.\n   Each FEC is assigned an administrative\
    \ distance.  The FEC\n   administrative distance is encoded as an 8-bit value.\
    \  The lower the\n   value, the better the administrative distance.\n   The default\
    \ FEC administrative distance order starting from the\n   lowest value SHOULD\
    \ be:\n   *  Explicit SID assignment to a FEC that maps to a label outside the\n\
    \      SRGB irrespective of the owner MCC.  An explicit SID assignment is\n  \
    \    a static assignment of a label to a FEC such that the assignment\n      survives\
    \ a router reboot.\n      -  An example of explicit SID allocation is static assignment\
    \ of a\n         specific label to an Adj-SID.\n      -  An implementation of\
    \ explicit SID assignment MUST guarantee\n         collision freeness on the same\
    \ router.\n   *  Dynamic SID assignment:\n      -  All FEC types, except for the\
    \ SR Policy, are ordered using the\n         default administrative distance defined\
    \ by the implementation.\n      -  The Binding SID [RFC8402] assigned to the SR\
    \ Policy always has\n         a higher default administrative distance than the\
    \ default\n         administrative distance of any other FEC type.\n   To maximize\
    \ MPLS forwarding consistency, if the same FEC is\n   advertised in more than\
    \ one protocol, a user MUST ensure that the\n   administrative distance preference\
    \ between protocols is the same on\n   all routers of the IGP flooding domain.\
    \  Note that this is not really\n   new as this already applies to IP forwarding.\n\
    \   The numerical sort across FECs SHOULD be performed as follows:\n   *  Each\
    \ FEC is assigned a FEC type encoded in 8 bits.  The type\n      codepoints for\
    \ each SR FEC defined at the beginning of this\n      section are as follows:\n\
    \         120:  (Prefix, Routing Instance, Topology, Algorithm)\n         130:\
    \  (next hop, outgoing interface)\n         140:  Parallel Adjacency [RFC8402]\n\
    \         150:  SR Policy [RFC8402]\n         160:  Mirror SID [RFC8402]\n   \
    \   The numerical values above are mentioned to guide implementation.\n      If\
    \ other numerical values are used, then the numerical values must\n      maintain\
    \ the same greater-than ordering of the numbers mentioned\n      here.\n   * \
    \ The fields of each FEC are encoded as follows:\n      -  All fields in all FECs\
    \ are encoded in big endian order.\n      -  The Routing Instance ID is represented\
    \ by 16 bits.  For routing\n         instances that are identified by less than\
    \ 16 bits, encode the\n         Instance ID in the least significant bits while\
    \ the most\n         significant bits are set to zero.\n      -  The address family\
    \ is represented by 8 bits, where IPv4 is\n         encoded as 100, and IPv6 is\
    \ encoded as 110.  These numerical\n         values are mentioned to guide implementations.\
    \  If other\n         numerical values are used, then the numerical value of IPv4\n\
    \         MUST be less than the numerical value for IPv6.\n      -  All addresses\
    \ are represented in 128 bits as follows:\n         o  The IPv6 address is encoded\
    \ natively.\n         o  The IPv4 address is encoded in the most significant bits,\n\
    \            and the remaining bits are set to zero.\n      -  All prefixes are\
    \ represented by (8 + 128) bits.\n         o  A prefix is encoded in the most\
    \ significant bits, and the\n            remaining bits are set to zero.\n   \
    \      o  The prefix length is encoded before the prefix in an 8-bit\n       \
    \     field.\n      -  The Topology ID is represented by 16 bits.  For routing\n\
    \         instances that identify topologies using less than 16 bits,\n      \
    \   encode the topology ID in the least significant bits while the\n         most\
    \ significant bits are set to zero.\n      -  The Algorithm is encoded in a 16-bit\
    \ field.\n      -  The Color ID is encoded using 32 bits.\n   *  Choose the set\
    \ of FECs of the smallest FEC type codepoint.\n   *  Out of these FECs, choose\
    \ the FECs with the smallest address\n      family codepoint.\n   *  Encode the\
    \ remaining set of FECs as follows:\n      -  (Prefix, Routing Instance, Topology,\
    \ Algorithm) is encoded as\n         (Prefix Length, Prefix, routing_instance_id,\
    \ Topology, SR\n         Algorithm).\n      -  (next hop, outgoing interface)\
    \ is encoded as (next hop,\n         outgoing_interface_id).\n      -  (number\
    \ of adjacencies, list of next hops in ascending\n         numerical order, list\
    \ of outgoing interface IDs in ascending\n         numerical order) is used to\
    \ encode a parallel adjacency\n         [RFC8402].\n      -  (Endpoint, Color)\
    \ is encoded as (Endpoint_address, Color_id).\n      -  (IP address) is the encoding\
    \ for a Mirror SID FEC.  The IP\n         address is encoded as described above\
    \ in this section.\n   *  Select the FEC with the smallest numerical value.\n\
    \   The numerical values mentioned in this section are for guidance only.\n  \
    \ If other numerical values are used, then the other numerical values\n   MUST\
    \ maintain the same numerical ordering among different SR FECs.\n"
- title: 2.5.2.  Redistribution between Routing Protocol Instances
  contents:
  - "2.5.2.  Redistribution between Routing Protocol Instances\n   The following rule\
    \ SHOULD be applied when redistributing SIDs with\n   prefixes between routing\
    \ protocol instances:\n   *  If the SRGB of the receiving instance is the same\
    \ as the SRGB of\n      the origin instance, then:\n      -  the index is redistributed\
    \ with the route.\n   *  Else,\n      -  the index is not redistributed and if\
    \ the receiving instance\n         decides to advertise an index with the redistributed\
    \ route, it\n         is the duty of the receiving instance to allocate a fresh\
    \ index\n         relative to its own SRGB.  Note that in this case, the\n   \
    \      receiving instance MUST compute the local label it assigns to\n       \
    \  the route according to Section 2.4 and install it in FIB.\n   It is outside\
    \ the scope of this document to define local node\n   behaviors that would allow\
    \ the mapping of the original index into a\n   new index in the receiving instance\
    \ via the addition of an offset or\n   other policy means.\n"
- title: 2.5.2.1.  Illustration
  contents:
  - "2.5.2.1.  Illustration\n           A----IS-IS----B---OSPF----C-192.0.2.1/32 (20001)\n\
    \   Consider the simple topology above, where:\n   *  A and B are in the IS-IS\
    \ domain with SRGB = [16000-17000]\n   *  B and C are in the OSPF domain with\
    \ SRGB = [20000-21000]\n   *  B redistributes 192.0.2.1/32 into the IS-IS domain\n\
    \   In this case, A learns 192.0.2.1/32 as an IP leaf connected to B,\n   which\
    \ is usual for IP prefix redistribution\n   However, according to the redistribution\
    \ rule above, B decides not to\n   advertise any index with 192.0.2.1/32 into\
    \ IS-IS because the SRGB is\n   not the same.\n"
- title: 2.5.2.2.  Illustration 2
  contents:
  - "2.5.2.2.  Illustration 2\n   Consider the example in the illustration described\
    \ in\n   Section 2.5.2.1.\n   When router B redistributes the prefix 192.0.2.1/32,\
    \ router B decides\n   to allocate and advertise the same index 1 with the prefix\n\
    \   192.0.2.1/32.\n   Within the SRGB of the IS-IS domain, index 1 corresponds\
    \ to the local\n   label 16001.  Hence, according to the redistribution rule above,\n\
    \   router B programs the incoming label 16001 in its FIB to match\n   traffic\
    \ arriving from the IS-IS domain destined to the prefix\n   192.0.2.1/32.\n"
- title: 2.6.  Effect of Incoming Label Collision on Outgoing Label Programming
  contents:
  - "2.6.  Effect of Incoming Label Collision on Outgoing Label Programming\n   When\
    \ determining what outgoing label to use, the ingress node that\n   pushes new\
    \ segments, and hence a stack of MPLS labels, MUST use, for\n   a given FEC, the\
    \ label that has been selected by the node receiving\n   the packet with that\
    \ label exposed as the top label.  So in case of\n   incoming label collision\
    \ on this receiving node, the ingress node\n   MUST resolve this collision by\
    \ using this same \"Incoming Label\n   Collision resolution procedure\" and by\
    \ using the data of the\n   receiving node.\n   In the general case, the ingress\
    \ node may not have the exact same\n   data as the receiving node, so the result\
    \ may be different.  This is\n   under the responsibility of the network operator.\
    \  But in a typical\n   case, e.g., where a centralized node or a distributed\
    \ link-state IGP\n   is used, all nodes would have the same database.  However,\
    \ to\n   minimize the chance of misforwarding, a FEC that loses its incoming\n\
    \   label to the tiebreaking rules specified in Section 2.5 MUST NOT be\n   installed\
    \ in FIB with an outgoing Segment Routing label based on the\n   SID corresponding\
    \ to the lost incoming label.\n   Examples for the behavior specified in this\
    \ section can be found in\n   Appendix A.3.\n"
- title: 2.7.  PUSH, CONTINUE, and NEXT
  contents:
  - "2.7.  PUSH, CONTINUE, and NEXT\n   PUSH, NEXT, and CONTINUE are operations applied\
    \ by the forwarding\n   plane.  The specifications of these operations can be\
    \ found in\n   [RFC8402].  This subsection specifies how to implement each of\
    \ these\n   operations in the MPLS forwarding plane.\n"
- title: 2.7.1.  PUSH
  contents:
  - "2.7.1.  PUSH\n   As described in [RFC8402], PUSH corresponds to pushing one or\
    \ more\n   labels on top of an incoming packet then sending it out of a\n   particular\
    \ physical interface or virtual interface, such as a UDP\n   tunnel [RFC7510]\
    \ or the Layer 2 Tunneling Protocol version 3 (L2TPv3)\n   [RFC4817], towards\
    \ a particular next hop.  When pushing labels onto a\n   packet's label stack,\
    \ the Time-to-Live (TTL) field [RFC3032]\n   [RFC3443] and the Traffic Class (TC)\
    \ field [RFC3032] [RFC5462] of\n   each label stack entry must, of course, be\
    \ set.  This document does\n   not specify any set of rules for setting these\
    \ fields; that is a\n   matter of local policy.  Sections 2.10 and 2.11 specify\
    \ additional\n   details about forwarding behavior.\n"
- title: 2.7.2.  CONTINUE
  contents:
  - "2.7.2.  CONTINUE\n   As described in [RFC8402], the CONTINUE operation corresponds\
    \ to\n   swapping the incoming label with an outgoing label.  The value of the\n\
    \   outgoing label is calculated as specified in Sections 2.10 and 2.11.\n"
- title: 2.7.3.  NEXT
  contents:
  - "2.7.3.  NEXT\n   As described in [RFC8402], NEXT corresponds to popping the topmost\n\
    \   label.  The action before and/or after the popping depends on the\n   instruction\
    \ associated with the active SID on the received packet\n   prior to the popping.\
    \  For example, suppose the active SID in the\n   received packet was an Adj-SID\
    \ [RFC8402]; on receiving the packet,\n   the node applies the NEXT operation,\
    \ which corresponds to popping the\n   topmost label, and then sends the packet\
    \ out of the physical or\n   virtual interface (e.g., the UDP tunnel [RFC7510]\
    \ or L2TPv3 tunnel\n   [RFC4817]) towards the next hop corresponding to the Adj-SID.\n"
- title: 2.7.3.1.  Mirror SID
  contents:
  - "2.7.3.1.  Mirror SID\n   If the active SID in the received packet was a Mirror\
    \ SID (see\n   [RFC8402], Section 5.1) allocated by the receiving router, the\n\
    \   receiving router applies the NEXT operation, which corresponds to\n   popping\
    \ the topmost label, and then performs a lookup using the\n   contents of the\
    \ packet after popping the outermost label in the\n   mirrored forwarding table.\
    \  The method by which the lookup is made,\n   and/or the actions applied to the\
    \ packet after the lookup in the\n   mirror table, depends on the contents of\
    \ the packet and the mirror\n   table.  Note that the packet exposed after popping\
    \ the topmost label\n   may or may not be an MPLS packet.  A Mirror SID can be\
    \ viewed as a\n   generalization of the context label in [RFC5331] because a Mirror\
    \ SID\n   does not make any assumptions about the packet underneath the top\n\
    \   label.\n"
- title: 2.8.  MPLS Label Downloaded to the FIB for Global and Local SIDs
  contents:
  - "2.8.  MPLS Label Downloaded to the FIB for Global and Local SIDs\n   The label\
    \ corresponding to the global SID \"Si\", which is represented\n   by the global\
    \ index \"I\" and downloaded to the FIB, is used to match\n   packets whose active\
    \ segment (and hence topmost label) is \"Si\".  The\n   value of this label is\
    \ calculated as specified in Section 2.4.\n   For Local SIDs, the MCC is responsible\
    \ for downloading the correct\n   label value to the FIB.  For example, an IGP\
    \ with SR extensions\n   [RFC8667] [RFC8665] downloads the MPLS label corresponding\
    \ to an Adj-\n   SID [RFC8402].\n"
- title: 2.9.  Active Segment
  contents:
  - "2.9.  Active Segment\n   When instantiated in the MPLS domain, the active segment\
    \ on a packet\n   corresponds to the topmost label and is calculated according\
    \ to the\n   procedure specified in Sections 2.10 and 2.11.  When arriving at\
    \ a\n   node, the topmost label corresponding to the active SID matches the\n\
    \   MPLS label downloaded to the FIB as specified in Section 2.4.\n"
- title: 2.10.  Forwarding Behavior for Global SIDs
  contents:
  - "2.10.  Forwarding Behavior for Global SIDs\n   This section specifies the forwarding\
    \ behavior, including the\n   calculation of outgoing labels, that corresponds\
    \ to a global SID when\n   applying the PUSH, CONTINUE, and NEXT operations in\
    \ the MPLS\n   forwarding plane.\n   This document covers the calculation of the\
    \ outgoing label for the\n   top label only.  The case where the outgoing label\
    \ is not the top\n   label and is part of a stack of labels that instantiates\
    \ a routing\n   policy or a traffic-engineering tunnel is outside the scope of\
    \ this\n   document and may be covered in other documents such as\n   [ROUTING-POLICY].\n"
- title: 2.10.1.  Forwarding for PUSH and CONTINUE of Global SIDs
  contents:
  - "2.10.1.  Forwarding for PUSH and CONTINUE of Global SIDs\n   Suppose an MCC on\
    \ router \"R0\" determines that, before sending the\n   packet towards a neighbor\
    \ \"N\", the PUSH or CONTINUE operation is to\n   be applied to an incoming packet\
    \ related to the global SID \"Si\".  SID\n   \"Si\" is represented by the global\
    \ index \"I\" and owned by the router\n   Ri.  Neighbor \"N\" may be directly\
    \ connected to \"R0\" through either a\n   physical or a virtual interface (e.g.,\
    \ UDP tunnel [RFC7510] or L2TPv3\n   tunnel [RFC4817]).\n   The method by which\
    \ the MCC on router \"R0\" determines that the PUSH\n   or CONTINUE operation\
    \ must be applied using the SID \"Si\" is beyond\n   the scope of this document.\
    \  An example of a method to determine the\n   SID \"Si\" for the PUSH operation\
    \ is the case where IS-IS [RFC8667]\n   receives the Prefix-SID \"Si\" sub-TLV\
    \ advertised with the prefix \"P/m\"\n   in TLV 135, and the prefix \"P/m\" is\
    \ the longest matching network\n   prefix for the incoming IPv4 packet.\n   For\
    \ the CONTINUE operation, an example of a method used to determine\n   the SID\
    \ \"Si\" is the case where IS-IS [RFC8667] receives the Prefix-\n   SID \"Si\"\
    \ sub-TLV advertised with prefix \"P\" in TLV 135, and the top\n   label of the\
    \ incoming packet matches the MPLS label in the FIB\n   corresponding to the SID\
    \ \"Si\" on router \"R0\".\n   The forwarding behavior for PUSH and CONTINUE corresponding\
    \ to the\n   SID \"Si\" is as follows:\n   *  If neighbor \"N\" does not support\
    \ SR or advertises an invalid SRGB\n      or a SRGB that is too small for the\
    \ SID \"Si\", then:\n      -  If it is possible to send the packet towards neighbor\
    \ \"N\" using\n         standard MPLS forwarding behavior as specified in [RFC3031]\
    \ and\n         [RFC3032], forward the packet.  The method by which a router\n\
    \         decides whether it is possible to send the packet to \"N\" or not\n\
    \         is beyond the scope of this document.  For example, the router\n   \
    \      \"R0\" can use the downstream label determined by another MCC,\n      \
    \   such as LDP [RFC5036], to send the packet.\n      -  Else, if there are other\
    \ usable next hops, use them to forward\n         the incoming packet.  The method\
    \ by which the router \"R0\"\n         decides on the possibility of using other\
    \ next hops is beyond\n         the scope of this document.  For example, the\
    \ MCC on \"R0\" may\n         chose the send an IPv4 packet without pushing any\
    \ label to\n         another next hop.\n      -  Otherwise, drop the packet.\n\
    \   *  Else,\n      -  Calculate the outgoing label as specified in Section 2.4\
    \ using\n         the SRGB of neighbor \"N\".\n      -  Determine the outgoing\
    \ label stack\n         o  If the operation is PUSH:\n            +  Push the\
    \ calculated label according to the MPLS label\n               pushing rules specified\
    \ in [RFC3032].\n         o  Else,\n            +  swap the incoming label with\
    \ the calculated label\n               according to the label-swapping rules in\
    \ [RFC3031].\n         o  Send the packet towards neighbor \"N\".\n"
- title: 2.10.2.  Forwarding for the NEXT Operation for Global SIDs
  contents:
  - "2.10.2.  Forwarding for the NEXT Operation for Global SIDs\n   As specified in\
    \ Section 2.7.3, the NEXT operation corresponds to\n   popping the topmost label.\
    \  The forwarding behavior is as follows:\n   *  Pop the topmost label\n   * \
    \ Apply the instruction associated with the incoming label that has\n      been\
    \ popped\n   The action on the packet after popping the topmost label depends\
    \ on\n   the instruction associated with the incoming label as well as the\n \
    \  contents of the packet right underneath the top label that was\n   popped.\
    \  Examples of the NEXT operation are described in Appendix A.1\n"
- title: 2.11.  Forwarding Behavior for Local SIDs
  contents:
  - "2.11.  Forwarding Behavior for Local SIDs\n   This section specifies the forwarding\
    \ behavior for Local SIDs when SR\n   is instantiated over the MPLS forwarding\
    \ plane.\n"
- title: 2.11.1.  Forwarding for the PUSH Operation on Local SIDs
  contents:
  - "2.11.1.  Forwarding for the PUSH Operation on Local SIDs\n   Suppose an MCC on\
    \ router \"R0\" determines that the PUSH operation is\n   to be applied to an\
    \ incoming packet using the Local SID \"Si\" before\n   sending the packet towards\
    \ neighbor \"N\", which is directly connected\n   to R0 through a physical or\
    \ virtual interface such as a UDP tunnel\n   [RFC7510] or L2TPv3 tunnel [RFC4817].\n\
    \   An example of such a Local SID is an Adj-SID allocated and advertised\n  \
    \ by IS-IS [RFC8667].  The method by which the MCC on \"R0\" determines\n   that\
    \ the PUSH operation is to be applied to the incoming packet is\n   beyond the\
    \ scope of this document.  An example of such a method is\n   the backup path\
    \ used to protect against a failure using TI-LFA\n   [FAST-REROUTE].\n   As mentioned\
    \ in [RFC8402], a Local SID is specified by an MPLS label.\n   Hence, the PUSH\
    \ operation for a Local SID is identical to the label\n   push operation using\
    \ any MPLS label [RFC3031].  The forwarding action\n   after pushing the MPLS\
    \ label corresponding to the Local SID is also\n   determined by the MCC.  For\
    \ example, if the PUSH operation was done\n   to forward a packet over a backup\
    \ path calculated using TI-LFA, then\n   the forwarding action may be sending\
    \ the packet to a certain neighbor\n   that will in turn continue to forward the\
    \ packet along the backup\n   path.\n"
- title: 2.11.2.  Forwarding for the CONTINUE Operation for Local SIDs
  contents:
  - "2.11.2.  Forwarding for the CONTINUE Operation for Local SIDs\n   A Local SID\
    \ on router \"R0\" corresponds to a local label.  In such a\n   scenario, the\
    \ outgoing label towards next hop \"N\" is determined by\n   the MCC running on\
    \ the router \"R0\", and the forwarding behavior for\n   the CONTINUE operation\
    \ is identical to the swap operation on an MPLS\n   label [RFC3031].\n"
- title: 2.11.3.  Outgoing Label for the NEXT Operation for Local SIDs
  contents:
  - "2.11.3.  Outgoing Label for the NEXT Operation for Local SIDs\n   The NEXT operation\
    \ for Local SIDs is identical to the NEXT operation\n   for global SIDs as specified\
    \ in Section 2.10.2.\n"
- title: 3.  IANA Considerations
  contents:
  - "3.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 4.  Manageability Considerations
  contents:
  - "4.  Manageability Considerations\n   This document describes the applicability\
    \ of Segment Routing over the\n   MPLS data plane.  Segment Routing does not introduce\
    \ any change in\n   the MPLS data plane.  Manageability considerations described\
    \ in\n   [RFC8402] apply to the MPLS data plane when used with Segment\n   Routing.\
    \  SR Operations, Administration, and Maintenance (OAM) use\n   cases for the\
    \ MPLS data plane are defined in [RFC8403].  SR OAM\n   procedures for the MPLS\
    \ data plane are defined in [RFC8287].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document does not introduce additional security\
    \ requirements and\n   mechanisms other than the ones described in [RFC8402].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3031]  Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol\n  \
    \            Label Switching Architecture\", RFC 3031,\n              DOI 10.17487/RFC3031,\
    \ January 2001,\n              <https://www.rfc-editor.org/info/rfc3031>.\n  \
    \ [RFC3032]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n             \
    \ Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\"\
    , RFC 3032, DOI 10.17487/RFC3032, January 2001,\n              <https://www.rfc-editor.org/info/rfc3032>.\n\
    \   [RFC3443]  Agarwal, P. and B. Akyol, \"Time To Live (TTL) Processing\n   \
    \           in Multi-Protocol Label Switching (MPLS) Networks\",\n           \
    \   RFC 3443, DOI 10.17487/RFC3443, January 2003,\n              <https://www.rfc-editor.org/info/rfc3443>.\n\
    \   [RFC5462]  Andersson, L. and R. Asati, \"Multiprotocol Label Switching\n \
    \             (MPLS) Label Stack Entry: \"EXP\" Field Renamed to \"Traffic\n \
    \             Class\" Field\", RFC 5462, DOI 10.17487/RFC5462, February\n    \
    \          2009, <https://www.rfc-editor.org/info/rfc5462>.\n   [RFC7274]  Kompella,\
    \ K., Andersson, L., and A. Farrel, \"Allocating\n              and Retiring Special-Purpose\
    \ MPLS Labels\", RFC 7274,\n              DOI 10.17487/RFC7274, June 2014,\n \
    \             <https://www.rfc-editor.org/info/rfc7274>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8402]  Filsfils, C., Ed., Previdi, S., Ed., Ginsberg, L.,\n          \
    \    Decraene, B., Litkowski, S., and R. Shakir, \"Segment\n              Routing\
    \ Architecture\", RFC 8402, DOI 10.17487/RFC8402,\n              July 2018, <https://www.rfc-editor.org/info/rfc8402>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [FAST-REROUTE]\n              Litkowski, S.,\
    \ Bashandy, A., Filsfils, C., Decraene, B.,\n              Francois, P., Voyer,\
    \ D., Clad, F., and P. Camarillo,\n              \"Topology Independent Fast Reroute\
    \ using Segment Routing\",\n              Work in Progress, Internet-Draft, draft-ietf-rtgwg-\n\
    \              segment-routing-ti-lfa-01, 5 March 2019,\n              <https://tools.ietf.org/html/draft-ietf-rtgwg-segment-\n\
    \              routing-ti-lfa-01>.\n   [RFC4817]  Townsley, M., Pignataro, C.,\
    \ Wainner, S., Seely, T., and\n              J. Young, \"Encapsulation of MPLS\
    \ over Layer 2 Tunneling\n              Protocol Version 3\", RFC 4817, DOI 10.17487/RFC4817,\
    \ March\n              2007, <https://www.rfc-editor.org/info/rfc4817>.\n   [RFC5036]\
    \  Andersson, L., Ed., Minei, I., Ed., and B. Thomas, Ed.,\n              \"LDP\
    \ Specification\", RFC 5036, DOI 10.17487/RFC5036,\n              October 2007,\
    \ <https://www.rfc-editor.org/info/rfc5036>.\n   [RFC5331]  Aggarwal, R., Rekhter,\
    \ Y., and E. Rosen, \"MPLS Upstream\n              Label Assignment and Context-Specific\
    \ Label Space\",\n              RFC 5331, DOI 10.17487/RFC5331, August 2008,\n\
    \              <https://www.rfc-editor.org/info/rfc5331>.\n   [RFC7510]  Xu, X.,\
    \ Sheth, N., Yong, L., Callon, R., and D. Black,\n              \"Encapsulating\
    \ MPLS in UDP\", RFC 7510,\n              DOI 10.17487/RFC7510, April 2015,\n\
    \              <https://www.rfc-editor.org/info/rfc7510>.\n   [RFC7855]  Previdi,\
    \ S., Ed., Filsfils, C., Ed., Decraene, B.,\n              Litkowski, S., Horneffer,\
    \ M., and R. Shakir, \"Source\n              Packet Routing in Networking (SPRING)\
    \ Problem Statement\n              and Requirements\", RFC 7855, DOI 10.17487/RFC7855,\
    \ May\n              2016, <https://www.rfc-editor.org/info/rfc7855>.\n   [RFC8287]\
    \  Kumar, N., Ed., Pignataro, C., Ed., Swallow, G., Akiya,\n              N.,\
    \ Kini, S., and M. Chen, \"Label Switched Path (LSP)\n              Ping/Traceroute\
    \ for Segment Routing (SR) IGP-Prefix and\n              IGP-Adjacency Segment\
    \ Identifiers (SIDs) with MPLS Data\n              Planes\", RFC 8287, DOI 10.17487/RFC8287,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8287>.\n \
    \  [RFC8403]  Geib, R., Ed., Filsfils, C., Pignataro, C., Ed., and N.\n      \
    \        Kumar, \"A Scalable and Topology-Aware MPLS Data-Plane\n            \
    \  Monitoring System\", RFC 8403, DOI 10.17487/RFC8403, July\n              2018,\
    \ <https://www.rfc-editor.org/info/rfc8403>.\n   [RFC8661]  Bashandy, A., Ed.,\
    \ Filsfils, C., Ed., Previdi, S.,\n              Decraene, B., and S. Litkowski,\
    \ \"Segment Routing MPLS\n              Interworking with LDP\", RFC 8661, DOI\
    \ 10.17487/RFC8661,\n              December 2019, <https://www.rfc-editor.org/info/rfC8661>.\n\
    \   [RFC8665]  Psenak, P., Ed., Previdi, S., Ed., Filsfils, C., Gredler,\n   \
    \           H., Shakir, R., Henderickx, W., and J. Tantsura, \"OSPF\n        \
    \      Extensions for Segment Routing\", RFC 8665,\n              DOI 10.17487/RFC8665,\
    \ December 2019,\n              <https://www.rfc-editor.org/info/rfc8665>.\n \
    \  [RFC8666]  Psenak, P., Ed. and S. Previdi, Ed., \"OSPFv3 Extensions\n     \
    \         for Segment Routing\", RFC 8666, DOI 10.17487/RFC8666,\n           \
    \   December 2019, <https://www.rfc-editor.org/info/rfc8666>.\n   [RFC8667]  Previdi,\
    \ S., Ed., Ginsberg, L., Ed., Filsfils, C.,\n              Bashandy, A., Gredler,\
    \ H., and B. Decraene, \"IS-IS\n              Extensions for Segment Routing\"\
    , RFC 8667,\n              DOI 10.17487/RFC8667, December 2019,\n            \
    \  <https://www.rfc-editor.org/info/rfc8667>.\n   [ROUTING-POLICY]\n         \
    \     Filsfils, C., Sivabalan, S., Voyer, D., Bogdanov, A., and\n            \
    \  P. Mattes, \"Segment Routing Policy Architecture\", Work in\n             \
    \ Progress, Internet-Draft, draft-ietf-spring-segment-\n              routing-policy-05,\
    \ 17 November 2019,\n              <https://tools.ietf.org/html/draft-ietf-spring-segment-\n\
    \              routing-policy-05>.\n"
- title: Appendix A.  Examples
  contents:
  - 'Appendix A.  Examples

    '
- title: A.1.  IGP Segment Examples
  contents:
  - "A.1.  IGP Segment Examples\n   Consider the network diagram of Figure 1 and the\
    \ IP addresses and IGP\n   segment allocations of Figure 2.  Assume that the network\
    \ is running\n   IS-IS with SR extensions [RFC8667], and all links have the same\n\
    \   metric.  The following examples can be constructed.\n                R0-----R1-----R2----------R3-----R8\n\
    \                   Figure 1: IGP Segments -- Illustration\n          | IP addresses\
    \ allocated by the operator:                   |\n          |              198.51.100.9/32\
    \ as an anycast loopback of R4 |\n          |              198.51.100.9/32 as\
    \ an anycast loopback of R5 |\n          | SRGB defined by the operator as [1000,5000]\
    \               |\n          | Global IGP SID indices allocated by the operator:\
    \         |\n          |                   1009 allocated to 198.51.100.9/32 \
    \      |\n          | Local IGP SID allocated dynamically by R2              \
    \   |\n        Figure 2: IGP Address and Segment Allocation -- Illustration\n\
    \   Suppose R1 wants to send IPv4 packet P1 to R8.  In this case, R1\n   needs\
    \ to apply the PUSH operation to the IPv4 packet.\n   Remember that the SID index\
    \ \"8\" is a global IGP segment attached to\n   the IP prefix 192.0.2.8/32.  Its\
    \ semantic is global within the IGP\n   domain: any router forwards a packet received\
    \ with active segment 8\n   to the next hop along the ECMP-aware shortest path\
    \ to the related\n   prefix.\n   R2 is the next hop along the shortest path towards\
    \ R8.  By applying\n   the steps in Section 2.8, the outgoing label downloaded\
    \ to R1's FIB\n   corresponding to the global SID index \"8\" is 1008 because\
    \ the SRGB of\n   R2 = [1000,5000] as shown in Figure 2.\n   Because the packet\
    \ is IPv4, R1 applies the PUSH operation using the\n   label value 1008 as specified\
    \ in Section 2.10.1.  The resulting MPLS\n   header will have the \"S\" bit [RFC3032]\
    \ set because it is followed\n   directly by an IPv4 packet.\n   The packet arrives\
    \ at router R2.  Because top label 1008 corresponds\n   to the IGP SID index \"\
    8\", which is the Prefix-SID attached to the\n   prefix 192.0.2.8/32 owned by\
    \ Node R8, the instruction associated with\n   the SID is \"forward the packet\
    \ using one of the ECMP interfaces or\n   next hops along the shortest path(s)\
    \ towards R8\".  Because R2 is not\n   the penultimate hop, R2 applies the CONTINUE\
    \ operation to the packet\n   and sends it to R3 using one of the two links connected\
    \ to R3 with\n   top label 1008 as specified in Section 2.10.1.\n   R3 receives\
    \ the packet with top label 1008.  Because top label 1008\n   corresponds to the\
    \ IGP SID index \"8\", which is the Prefix-SID\n   attached to the prefix 192.0.2.8/32\
    \ owned by Node R8, the instruction\n   associated with the SID is \"send the\
    \ packet using one of the ECMP\n   interfaces and next hops along the shortest\
    \ path towards R8\".\n   Because R3 is the penultimate hop, we assume that R3\
    \ performs\n   penultimate hop popping, which corresponds to the NEXT operation;\
    \ the\n   packet is then sent to R8.  The NEXT operation results in popping the\n\
    \   outer label and sending the packet as a pure IPv4 packet to R8.\n   In conclusion,\
    \ the path followed by P1 is R1-R2--R3-R8.  The ECMP\n   awareness ensures that\
    \ the traffic is load-shared between any ECMP\n   path; in this case, it's the\
    \ two links between R2 and R3.\n"
- title: A.2.  Incoming Label Collision Examples
  contents:
  - "A.2.  Incoming Label Collision Examples\n   This section outlines several examples\
    \ to illustrate the handling of\n   label collision described in Section 2.5.\n\
    \   For the examples in this section, we assume that Node A has the\n   following:\n\
    \   *  OSPF default admin distance for implementation=50\n   *  IS-IS default\
    \ admin distance for implementation=60\n"
- title: A.2.1.  Example 1
  contents:
  - "A.2.1.  Example 1\n   The following example illustrates incoming label collision\
    \ resolution\n   for the same FEC type using MCC administrative distance.\n  \
    \ FEC1:\n   Node A receives an OSPF Prefix-SID Advertisement from Node B for\n\
    \   198.51.100.5/32 with index=5.  Assuming that OSPF SRGB on Node A =\n   [1000,1999],\
    \ the incoming label is 1005.\n   FEC2:\n   IS-IS on Node A receives a Prefix-SID\
    \ Advertisement from Node C for\n   203.0.113.105/32 with index=5.  Assuming that\
    \ IS-IS SRGB on Node A =\n   [1000,1999], the incoming label is 1005.\n   FEC1\
    \ and FEC2 both use dynamic SID assignment.  Since neither of the\n   FECs are\
    \ of type 'SR Policy', we use the default admin distances of\n   50 and 60 to\
    \ break the tie.  So FEC1 wins.\n"
- title: A.2.2.  Example 2
  contents:
  - "A.2.2.  Example 2\n   The following example Illustrates incoming label collision\
    \ resolution\n   for different FEC types using the MCC administrative distance.\n\
    \   FEC1:\n   Node A receives an OSPF Prefix-SID Advertisement from Node B for\n\
    \   198.51.100.6/32 with index=6.  Assuming that OSPF SRGB on Node A =\n   [1000,1999],\
    \ the incoming label on Node A corresponding to\n   198.51.100.6/32 is 1006.\n\
    \   FEC2:\n   IS-IS on Node A assigns label 1006 to the globally significant Adj-\n\
    \   SID (i.e., when advertised, the L-Flag is clear in the Adj-SID sub-\n   TLV\
    \ as described in [RFC8667]).  Hence, the incoming label\n   corresponding to\
    \ this Adj-SID is 1006.  Assume Node A allocates this\n   Adj-SID dynamically,\
    \ and it may differ across router reboots.\n   FEC1 and FEC2 both use dynamic\
    \ SID assignment.  Since neither of the\n   FECs are of type 'SR Policy', we use\
    \ the default admin distances of\n   50 and 60 to break the tie.  So FEC1 wins.\n"
- title: A.2.3.  Example 3
  contents:
  - "A.2.3.  Example 3\n   The following example illustrates incoming label collision\
    \ resolution\n   based on preferring static over dynamic SID assignment.\n   FEC1:\n\
    \   OSPF on Node A receives a Prefix-SID Advertisement from Node B for\n   198.51.100.7/32\
    \ with index=7.  Assuming that the OSPF SRGB on Node A\n   = [1000,1999], the\
    \ incoming label corresponding to 198.51.100.7/32 is\n   1007.\n   FEC2:\n   The\
    \ operator on Node A configures IS-IS on Node A to assign label\n   1007 to the\
    \ globally significant Adj-SID (i.e., when advertised, the\n   L-Flag is clear\
    \ in the Adj-SID sub-TLV as described in [RFC8667]).\n   Node A assigns this Adj-SID\
    \ explicitly via configuration, so the Adj-\n   SID survives router reboots.\n\
    \   FEC1 uses dynamic SID assignment, while FEC2 uses explicit SID\n   assignment.\
    \  So FEC2 wins.\n"
- title: A.2.4.  Example 4
  contents:
  - "A.2.4.  Example 4\n   The following example illustrates incoming label collision\
    \ resolution\n   using FEC type default administrative distance.\n   FEC1:\n \
    \  OSPF on Node A receives a Prefix-SID Advertisement from Node B for\n   198.51.100.8/32\
    \ with index=8.  Assuming that OSPF SRGB on Node A =\n   [1000,1999], the incoming\
    \ label corresponding to 198.51.100.8/32 is\n   1008.\n   FEC2:\n   Suppose the\
    \ SR Policy Advertisement from the controller to Node A for\n   the policy identified\
    \ by (Endpoint = 192.0.2.208, color = 100) that\n   consists of SID-List=<S1,\
    \ S2> assigns the globally significant\n   Binding-SID label 1008.\n   From the\
    \ point of view of Node A, FEC1 and FEC2 both use dynamic SID\n   assignment.\
    \  Based on the default administrative distance outlined in\n   Section 2.5.1,\
    \ the Binding SID has a higher administrative distance\n   than the Prefix-SID;\
    \ hence, FEC1 wins.\n"
- title: A.2.5.  Example 5
  contents:
  - "A.2.5.  Example 5\n   The following example illustrates incoming label collision\
    \ resolution\n   based on FEC type preference.\n   FEC1:\n   IS-IS on Node A receives\
    \ a Prefix-SID Advertisement from Node B for\n   203.0.113.110/32 with index=10.\
    \  Assuming that the IS-IS SRGB on Node\n   A = [1000,1999], the incoming label\
    \ corresponding to 203.0.113.110/32\n   is 1010.\n   FEC2:\n   IS-IS on Node A\
    \ assigns label 1010 to the globally significant Adj-\n   SID (i.e., when advertised,\
    \ the L-Flag is clear in the Adj-SID sub-\n   TLV as described in [RFC8667]).\n\
    \   Node A allocates this Adj-SID dynamically, and it may differ across\n   router\
    \ reboots.  Hence, both FEC1 and FEC2 both use dynamic SID\n   assignment.\n \
    \  Since both FECs are from the same MCC, they have the same default\n   admin\
    \ distance.  So we compare the FEC type codepoints.  FEC1 has FEC\n   type codepoint=120,\
    \ while FEC2 has FEC type codepoint=130.\n   Therefore, FEC1 wins.\n"
- title: A.2.6.  Example 6
  contents:
  - "A.2.6.  Example 6\n   The following example illustrates incoming label collision\
    \ resolution\n   based on address family preference.\n   FEC1:\n   IS-IS on Node\
    \ A receives a Prefix-SID Advertisement from Node B for\n   203.0.113.111/32 with\
    \ index=11.  Assuming that the IS-IS SRGB on Node\n   A = [1000,1999], the incoming\
    \ label on Node A for 203.0.113.111/32 is\n   1011.\n   FEC2:\n   IS-IS on Node\
    \ A receives a Prefix-SID Advertisement from Node C for\n   2001:DB8:1000::11/128\
    \ with index=11.  Assuming that the IS-IS SRGB on\n   Node A = [1000,1999], the\
    \ incoming label on Node A for\n   2001:DB8:1000::11/128 is 1011.\n   FEC1 and\
    \ FEC2 both use dynamic SID assignment.  Since both FECs are\n   from the same\
    \ MCC, they have the same default admin distance.  So we\n   compare the FEC type\
    \ codepoints.  Both FECs have FEC type\n   codepoint=120.  So we compare the address\
    \ family.  Since IPv4 is\n   preferred over IPv6, FEC1 wins.\n"
- title: A.2.7.  Example 7
  contents:
  - "A.2.7.  Example 7\n   The following example illustrates incoming label collision\
    \ resolution\n   based on prefix length.\n   FEC1:\n   IS-IS on Node A receives\
    \ a Prefix-SID Advertisement from Node B for\n   203.0.113.112/32 with index=12.\
    \  Assuming that IS-IS SRGB on Node A =\n   [1000,1999], the incoming label for\
    \ 203.0.113.112/32 on Node A is\n   1012.\n   FEC2:\n   IS-IS on Node A receives\
    \ a Prefix-SID Advertisement from Node C for\n   203.0.113.128/30 with index=12.\
    \  Assuming that the IS-IS SRGB on Node\n   A = [1000,1999], the incoming label\
    \ for 203.0.113.128/30 on Node A is\n   1012.\n   FEC1 and FEC2 both use dynamic\
    \ SID assignment.  Since both FECs are\n   from the same MCC, they have the same\
    \ default admin distance.  So we\n   compare the FEC type codepoints.  Both FECs\
    \ have FEC type\n   codepoint=120.  So we compare the address family.  Both are\
    \ a part of\n   the IPv4 address family, so we compare the prefix length.  FEC1\
    \ has\n   prefix length=32, and FEC2 has prefix length=30, so FEC2 wins.\n"
- title: A.2.8.  Example 8
  contents:
  - "A.2.8.  Example 8\n   The following example illustrates incoming label collision\
    \ resolution\n   based on the numerical value of the FECs.\n   FEC1:\n   IS-IS\
    \ on Node A receives a Prefix-SID Advertisement from Node B for\n   203.0.113.113/32\
    \ with index=13.  Assuming that IS-IS SRGB on Node A =\n   [1000,1999], the incoming\
    \ label for 203.0.113.113/32 on Node A is\n   1013.\n   FEC2:\n   IS-IS on Node\
    \ A receives a Prefix-SID Advertisement from Node C for\n   203.0.113.213/32 with\
    \ index=13.  Assuming that IS-IS SRGB on Node A =\n   [1000,1999], the incoming\
    \ label for 203.0.113.213/32 on Node A is\n   1013.\n   FEC1 and FEC2 both use\
    \ dynamic SID assignment.  Since both FECs are\n   from the same MCC, they have\
    \ the same default admin distance.  So we\n   compare the FEC type codepoints.\
    \  Both FECs have FEC type\n   codepoint=120.  So we compare the address family.\
    \  Both are a part of\n   the IPv4 address family, so we compare the prefix length.\
    \  Prefix\n   lengths are the same, so we compare the prefix.  FEC1 has the lower\n\
    \   prefix, so FEC1 wins.\n"
- title: A.2.9.  Example 9
  contents:
  - "A.2.9.  Example 9\n   The following example illustrates incoming label collision\
    \ resolution\n   based on the Routing Instance ID.\n   FEC1:\n   IS-IS on Node\
    \ A receives a Prefix-SID Advertisement from Node B for\n   203.0.113.114/32 with\
    \ index=14.  Assume that this IS-IS instance on\n   Node A has Routing Instance\
    \ ID = 1000 and SRGB = [1000,1999].  Hence,\n   the incoming label for 203.0.113.114/32\
    \ on Node A is 1014.\n   FEC2:\n   IS-IS on Node A receives a Prefix-SID Advertisement\
    \ from Node C for\n   203.0.113.114/32 with index=14.  Assume that this is another\
    \ instance\n   of IS-IS on Node A but Routing Instance ID = 2000 is different\
    \ and\n   SRGB = [1000,1999] is the same.  Hence, the incoming label for\n   203.0.113.114/32\
    \ on Node A is 1014.\n   These two FECs match all the way through the prefix length\
    \ and\n   prefix.  So the Routing Instance ID breaks the tie, and FEC1 wins.\n"
- title: A.2.10.  Example 10
  contents:
  - "A.2.10.  Example 10\n   The following example illustrates incoming label collision\
    \ resolution\n   based on the topology ID.\n   FEC1:\n   IS-IS on Node A receives\
    \ a Prefix-SID Advertisement from Node B for\n   203.0.113.115/32 with index=15.\
    \  Assume that this IS-IS instance on\n   Node A has Routing Instance ID = 1000.\
    \  Assume that the prefix\n   advertisement of 203.0.113.115/32 was received in\
    \ the IS-IS Multi-\n   topology advertisement with ID = 50.  If the IS-IS SRGB\
    \ for this\n   routing instance on Node A = [1000,1999], then the incoming label\
    \ of\n   203.0.113.115/32 for topology 50 on Node A is 1015.\n   FEC2:\n   IS-IS\
    \ on Node A receives a Prefix-SID Advertisement from Node C for\n   203.0.113.115/32\
    \ with index=15.  Assume that it has the same Routing\n   Instance ID = 1000,\
    \ but 203.0.113.115/32 was advertised with IS-IS\n   Multi-topology ID = 40, which\
    \ is different.  If the IS-IS SRGB on\n   Node A = [1000,1999], then the incoming\
    \ label of 203.0.113.115/32 for\n   topology 40 on Node A is also 1015.\n   Since\
    \ these two FECs match all the way through the prefix length,\n   prefix, and\
    \ Routing Instance ID, we compare the IS-IS Multi-topology\n   ID, so FEC2 wins.\n"
- title: A.2.11.  Example 11
  contents:
  - "A.2.11.  Example 11\n   The following example illustrates incoming label collision\
    \ for\n   resolution based on the algorithm ID.\n   FEC1:\n   IS-IS on Node A\
    \ receives a Prefix-SID Advertisement from Node B for\n   203.0.113.116/32 with\
    \ index=16.  Assume that IS-IS on Node A has\n   Routing Instance ID = 1000. \
    \ Assume that Node B advertised\n   203.0.113.116/32 with IS-IS Multi-topology\
    \ ID = 50 and SR algorithm =\n   0.  Assume that the IS-IS SRGB on Node A = [1000,1999].\
    \  Hence, the\n   incoming label corresponding to this advertisement of\n   203.0.113.116/32\
    \ is 1016.\n   FEC2:\n   IS-IS on Node A receives a Prefix-SID Advertisement from\
    \ Node C for\n   203.0.113.116/32 with index=16.  Assume that it is the same IS-IS\n\
    \   instance on Node A with Routing Instance ID = 1000.  Also assume that\n  \
    \ Node C advertised 203.0.113.116/32 with IS-IS Multi-topology ID = 50\n   but\
    \ with SR algorithm = 22.  Since it is the same routing instance,\n   the SRGB\
    \ on Node A = [1000,1999].  Hence, the incoming label\n   corresponding to this\
    \ advertisement of 203.0.113.116/32 by Node C is\n   also 1016.\n   Since these\
    \ two FECs match all the way through in terms of the prefix\n   length, prefix,\
    \ Routing Instance ID, and Multi-topology ID, we\n   compare the SR algorithm\
    \ IDs, so FEC1 wins.\n"
- title: A.2.12.  Example 12
  contents:
  - "A.2.12.  Example 12\n   The following example illustrates incoming label collision\
    \ resolution\n   based on the FEC numerical value, independent of how the SID\
    \ is\n   assigned to the colliding FECs.\n   FEC1:\n   IS-IS on Node A receives\
    \ a Prefix-SID Advertisement from Node B for\n   203.0.113.117/32 with index=17.\
    \  Assume that the IS-IS SRGB on Node A\n   = [1000,1999]; thus, the incoming\
    \ label is 1017.\n   FEC2:\n   Suppose there is an IS-IS Mapping Server Advertisement\
    \ (SID / Label\n   Binding TLV) from Node D that has range = 100 and prefix =\n\
    \   203.0.113.1/32.  Suppose this Mapping Server Advertisement generates\n   100\
    \ mappings, one of which maps 203.0.113.17/32 to index=17.\n   Assuming that it\
    \ is the same IS-IS instance, the SRGB = [1000,1999]\n   and hence the incoming\
    \ label for 1017.\n   Even though FEC1 comes from a normal Prefix-SID Advertisement\
    \ and\n   FEC2 is generated from a Mapping Server Advertisement, it is not used\n\
    \   as a tiebreaking parameter.  Both FECs use dynamic SID assignment,\n   are\
    \ from the same MCC, and have the same FEC type codepoint=120.\n   Their prefix\
    \ lengths are the same as well.  FEC2 wins based on its\n   lower numerical prefix\
    \ value, since 203.0.113.17 is less than\n   203.0.113.117.\n"
- title: A.2.13.  Example 13
  contents:
  - "A.2.13.  Example 13\n   The following example illustrates incoming label collision\
    \ resolution\n   based on address family preference.\n   FEC1:\n   SR Policy Advertisement\
    \ from the controller to Node A.  Endpoint\n   address=2001:DB8:3000::100, color=100,\
    \ SID-List=<S1, S2>, and the\n   Binding-SID label=1020.\n   FEC2:\n   SR Policy\
    \ Advertisement from controller to Node A.  Endpoint\n   address=192.0.2.60, color=100,\
    \ SID-List=<S3, S4>, and the Binding-SID\n   label=1020.\n   The FEC tiebreakers\
    \ match, and they have the same FEC type\n   codepoint=140.  Thus, FEC2 wins based\
    \ on the IPv4 address family\n   being preferred over IPv6.\n"
- title: A.2.14.  Example 14
  contents:
  - "A.2.14.  Example 14\n   The following example illustrates incoming label resolution\
    \ based on\n   the numerical value of the policy endpoint.\n   FEC1:\n   SR Policy\
    \ Advertisement from the controller to Node A.  Endpoint\n   address=192.0.2.70,\
    \ color=100, SID-List=<S1, S2>, and Binding-SID\n   label=1021.\n   FEC2:\n  \
    \ SR Policy Advertisement from the controller to Node A.  Endpoint\n   address=192.0.2.71,\
    \ color=100, SID-List=<S3, S4>, and Binding-SID\n   label=1021.\n   The FEC tiebreakers\
    \ match, and they have the same address family.\n   Thus, FEC1 wins by having\
    \ the lower numerical endpoint address value.\n"
- title: A.3.  Examples for the Effect of Incoming Label Collision on an Outgoing
  contents:
  - "A.3.  Examples for the Effect of Incoming Label Collision on an Outgoing\n  \
    \    Label\n   This section presents examples to illustrate the effect of incoming\n\
    \   label collision on the selection of the outgoing label as described\n   in\
    \ Section 2.6.\n"
- title: A.3.1.  Example 1
  contents:
  - "A.3.1.  Example 1\n   The following example illustrates the effect of incoming\
    \ label\n   resolution on the outgoing label.\n   FEC1:\n   IS-IS on Node A receives\
    \ a Prefix-SID Advertisement from Node B for\n   203.0.113.122/32 with index=22.\
    \  Assuming that the IS-IS SRGB on Node\n   A = [1000,1999], the corresponding\
    \ incoming label is 1022.\n   FEC2:\n   IS-IS on Node A receives a Prefix-SID\
    \ Advertisement from Node C for\n   203.0.113.222/32 with index=22.  Assuming\
    \ that the IS-IS SRGB on Node\n   A = [1000,1999], the corresponding incoming\
    \ label is 1022.\n   FEC1 wins based on the lowest numerical prefix value.  This\
    \ means\n   that Node A installs a transit MPLS forwarding entry to swap incoming\n\
    \   label 1022 with outgoing label N and to use outgoing interface I.  N\n   is\
    \ determined by the index associated with FEC1 (index=22) and the\n   SRGB advertised\
    \ by the next-hop node on the shortest path to reach\n   203.0.113.122/32.\n \
    \  Node A will generally also install an imposition MPLS forwarding\n   entry\
    \ corresponding to FEC1 for incoming prefix=203.0.113.122/32\n   pushing outgoing\
    \ label N, and using outgoing interface I.\n   The rule in Section 2.6 means Node\
    \ A MUST NOT install an ingress MPLS\n   forwarding entry corresponding to FEC2\
    \ (the losing FEC, which would\n   be for prefix 203.0.113.222/32).\n"
- title: A.3.2.  Example 2
  contents:
  - "A.3.2.  Example 2\n   The following example illustrates the effect of incoming\
    \ label\n   collision resolution on outgoing label programming on Node A.\n  \
    \ FEC1:\n   SR Policy Advertisement from the controller to Node A.  Endpoint\n\
    \   address=192.0.2.80, color=100, SID-List=<S1, S2>, and Binding-SID\n   label=1023.\n\
    \   FEC2:\n   SR Policy Advertisement from controller to Node A.  Endpoint\n \
    \  address=192.0.2.81, color=100, SID-List=<S3, S4>, and Binding-SID\n   label=1023.\n\
    \   FEC1 wins by having the lower numerical endpoint address value.  This\n  \
    \ means that Node A installs a transit MPLS forwarding entry to swap\n   incoming\
    \ label=1023 with outgoing labels, and the outgoing interface\n   is determined\
    \ by the SID-List for FEC1.\n   In this example, we assume that Node A receives\
    \ two BGP/VPN routes:\n   *  R1 with VPN label=V1, BGP next hop = 192.0.2.80,\
    \ and color=100\n   *  R2 with VPN label=V2, BGP next hop = 192.0.2.81, and color=100\n\
    \   We also assume that Node A has a BGP policy that matches color=100\n   and\
    \ allows its usage as Service Level Agreement (SLA) steering\n   information.\
    \  In this case, Node A will install a VPN route with\n   label stack = <S1,S2,V1>\
    \ (corresponding to FEC1).\n   The rule described in Section 2.6 means that Node\
    \ A MUST NOT install\n   a VPN route with label stack = <S3,S4,V1> (corresponding\
    \ to FEC2.)\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Les Ginsberg, Chris Bowers,\
    \ Himanshu\n   Shah, Adrian Farrel, Alexander Vainshtein, Przemyslaw Krol, Darren\n\
    \   Dukes, Zafar Ali, and Martin Vigoureux for their valuable comments on\n  \
    \ this document.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following contributors have substantially helped the definition\n\
    \   and editing of the content of this document:\n   Martin Horneffer\n   Deutsche\
    \ Telekom\n   Email: Martin.Horneffer@telekom.de\n   Wim Henderickx\n   Nokia\n\
    \   Email: wim.henderickx@nokia.com\n   Jeff Tantsura\n   Email: jefftant@gmail.com\n\
    \   Edward Crabbe\n   Email: edward.crabbe@gmail.com\n   Igor Milojevic\n   Email:\
    \ milojevicigor@gmail.com\n   Saku Ytti\n   Email: saku@ytti.fi\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ahmed Bashandy (editor)\n   Arrcus\n   Email: abashandy.ietf@gmail.com\n\
    \   Clarence Filsfils (editor)\n   Cisco Systems, Inc.\n   Brussels\n   Belgium\n\
    \   Email: cfilsfil@cisco.com\n   Stefano Previdi\n   Cisco Systems, Inc.\n  \
    \ Italy\n   Email: stefano@previdi.net\n   Bruno Decraene\n   Orange\n   France\n\
    \   Email: bruno.decraene@orange.com\n   Stephane Litkowski\n   Orange\n   France\n\
    \   Email: slitkows.ietf@gmail.com\n   Rob Shakir\n   Google\n"
