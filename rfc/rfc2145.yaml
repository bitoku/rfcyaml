- title: __initial_text__
  contents:
  - "                       Use and Interpretation of\n                          HTTP\
    \ Version Numbers\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   Distribution of this document is unlimited.\
    \  Please send comments to\n   the HTTP working group at <http-wg@cuckoo.hpl.hp.com>.\
    \  Discussions\n   of the working group are archived at\n   <URL:http://www.ics.uci.edu/pub/ietf/http/>.\
    \  General discussions\n   about HTTP and the applications which use HTTP should\
    \ take place on\n   the <www-talk@w3.org> mailing list.\n"
- title: Abstract
  contents:
  - "Abstract\n   HTTP request and response messages include an HTTP protocol version\n\
    \   number.  Some confusion exists concerning the proper use and\n   interpretation\
    \ of HTTP version numbers, and concerning\n   interoperability of HTTP implementations\
    \ of different protocol\n   versions.  This document is an attempt to clarify\
    \ the situation.  It\n   is not a modification of the intended meaning of the\
    \ existing\n   HTTP/1.0 and HTTP/1.1 documents, but it does describe the intention\n\
    \   of the authors of those documents, and can be considered definitive\n   when\
    \ there is any ambiguity in those documents concerning HTTP\n   version numbers,\
    \ for all versions of HTTP.\n"
- title: TABLE OF CONTENTS
  contents:
  - "TABLE OF CONTENTS\n   1 Introduction. . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n        1.1 Robustness Principle . . . . . . . . . . . . . . .\
    \ . . .  3\n   2 HTTP version numbers. . . . . . . . . . . . . . . . . . . . .\
    \ .  3\n   2.1 Proxy behavior. . . . . . . . . . . . . . . . . . . . . . . . \
    \ 4\n        2.2 Compatibility between minor versions of the same major\n    \
    \        version. . . . . . . .  . . . . . . . .  . . . . . . . .  4\n       \
    \ 2.3 Which version number to send in a message. . . . . . . .  5\n   3 Security\
    \ Considerations . . . . . . . . . . . . . . . . . . . .  6\n   4 References.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  6\n   5 Authors' addresses.\
    \ . . . . . . . . . . . . . . . . . . . . . .  6\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   HTTP request and response messages include an HTTP protocol\
    \ version\n   number.  According to section 3.1 of the HTTP/1.1 specification\
    \ [2],\n         HTTP uses a \"<major>.<minor>\" numbering scheme to indicate\n\
    \      versions of the protocol. The protocol versioning policy is\n      intended\
    \ to allow the sender to indicate the format of a message\n      and its capacity\
    \ for understanding further HTTP communication,\n      rather than the features\
    \ obtained via that communication.  No\n      change is made to the version number\
    \ for the addition of message\n      components which do not affect communication\
    \ behavior or which\n      only add to extensible field values.  The <minor> number\
    \ is\n      incremented when the changes made to the protocol add features\n \
    \     which do not change the general message parsing algorithm, but\n      which\
    \ may add to the message semantics and imply additional\n      capabilities of\
    \ the sender. The <major> number is incremented when\n      the format of a message\
    \ within the protocol is changed.\n   The same language appears in the description\
    \ of HTTP/1.0 [1].\n   Many readers of these documents have expressed some confusion\
    \ about\n   the intended meaning of this policy.  Also, some people who wrote\n\
    \   HTTP implementations before RFC1945 [1] was issued were not aware of\n   the\
    \ intentions behind the introduction of version numbers in\n   HTTP/1.0.  This\
    \ has led to debate and inconsistency regarding the use\n   and interpretation\
    \ of HTTP version numbers, and has led to\n   interoperability problems in certain\
    \ cases.\n   This document is an attempt to clarify the situation.  It is not\
    \ a\n   modification of the intended meaning of the existing HTTP/1.0 and\n  \
    \ HTTP/1.1 documents, but it does describe the intention of the authors\n   of\
    \ those documents.  In any case where either of those two documents\n   is ambiguous\
    \ regarding the use and interpretation of HTTP version\n   numbers, this document\
    \ should be considered the definitive as to the\n   intentions of the designers\
    \ of HTTP.\n   The specification described in this document is not part of the\n\
    \   specification of any individual version of HTTP, such as HTTP/1.0 or\n   HTTP/1.1.\
    \  Rather, this document describes the use of HTTP version\n   numbers in any\
    \ version of HTTP (except for HTTP/0.9, which did not\n   include version numbers).\n\
    \   No vendor or other provider of an HTTP implementation should claim\n   any\
    \ compliance with any IETF HTTP specification unless the\n   implementation conditionally\
    \ complies with the rules in this\n   document.\n"
- title: 1.1 Robustness Principle
  contents:
  - "1.1 Robustness Principle\n   RFC791 [4] defines the \"robustness principle\"\
    \ in section 3.2:\n          an implementation must be conservative in its sending\n\
    \       behavior, and liberal in its receiving behavior.\n   This principle applies\
    \ to HTTP, as well.  It is the fundamental basis\n   for interpreting any part\
    \ of the HTTP specification that might still\n   be ambiguous.  In particular,\
    \ implementations of HTTP SHOULD NOT\n   reject messages or generate errors unnecessarily.\n"
- title: 2 HTTP version numbers
  contents:
  - "2 HTTP version numbers\n   We start by restating the language quoted above from\
    \ section 3.1 of\n   the HTTP/1.1 specification [2]:\n         It is, and has\
    \ always been, the explicit intent of the\n      HTTP specification that the interpretation\
    \ of an HTTP message\n      header does not change between minor versions of the\
    \ same major\n      version.\n         It is, and has always been, the explicit\
    \ intent of the\n      HTTP specification that an implementation receiving a message\n\
    \      header that it does not understand MUST ignore that header.  (The\n   \
    \   word \"ignore\" has a special meaning for proxies; see section 2.1\n     \
    \ below.)\n   To make this as clear as possible:  The major version sent in a\n\
    \   message MAY indicate the interpretation of other header fields.  The\n   minor\
    \ version sent in a message MUST NOT indicate the interpretation\n   of other\
    \ header fields.  This reflects the principle that the minor\n   version labels\
    \ the capability of the sender, not the interpretation\n   of the message.\n \
    \     Note: In a future version of HTTP, we may introduce a mechanism\n      that\
    \ explicitly requires a receiving implementation to reject a\n      message if\
    \ it does not understand certain headers.  For example,\n      this might be implemented\
    \ by means of a header that lists a set of\n      other message headers that must\
    \ be understood by the recipient.\n      Any implementation claiming at least\
    \ conditional compliance with\n      this future version of HTTP would have to\
    \ implement this\n      mechanism.  However, no implementation claiming compliance\
    \ with a\n      lower HTTP version (in particular, HTTP/1.1) will have to\n  \
    \    implement this mechanism.\n      This future change may be required to support\
    \ the Protocol\n      Extension Protocol (PEP) [3].\n   One consequence of these\
    \ rules is that an HTTP/1.1 message sent to an\n   HTTP/1.0 recipient (or a recipient\
    \ whose version is unknown) MUST be\n   constructed so that it remains a valid\
    \ HTTP/1.0 message when all\n   headers not defined in the HTTP/1.0 specification\
    \ [1] are removed.\n"
- title: 2.1 Proxy behavior
  contents:
  - "2.1 Proxy behavior\n   A proxy MUST forward an unknown header, unless it is protected\
    \ by a\n   Connection header.  A proxy implementing an HTTP version >= 1.1 MUST\n\
    \   NOT forward unknown headers that are protected by a Connection\n   header,\
    \ as described in section 14.10 of the HTTP/1.1 specification\n   [2].\n   We\
    \ remind the reader that that HTTP version numbers are hop-by-hop\n   components\
    \ of HTTP messages, and are not end-to-end.  That is, an\n   HTTP proxy never\
    \ \"forwards\" an HTTP version number in either a\n   request or response.\n"
- title: 2.2 Compatibility between minor versions of the same major version
  contents:
  - "2.2 Compatibility between minor versions of the same major version\n   An implementation\
    \ of HTTP/x.b sending a message to a recipient whose\n   version is known to be\
    \ HTTP/x.a, a < b, MAY send a header that is not\n   defined in the specification\
    \ for HTTP/x.a.  For example, an HTTP/1.1\n   server may send a \"Cache-control\"\
    \ header to an HTTP/1.0 client; this\n   may be useful if the immediate recipient\
    \ is an HTTP/1.0 proxy, but\n   the ultimate recipient is an HTTP/1.1 client.\n\
    \   An implementation of HTTP/x.b sending a message to a recipient whose\n   version\
    \ is known to be HTTP/x.a, a < b, MUST NOT depend on the\n   recipient understanding\
    \ a header not defined in the specification for\n   HTTP/x.a.  For example, HTTP/1.0\
    \ clients cannot be expected to\n   understand chunked encodings, and so an HTTP/1.1\
    \ server must never\n   send \"Transfer-Encoding: chunked\" in response to an\
    \ HTTP/1.0 request.\n"
- title: 2.3 Which version number to send in a message
  contents:
  - "2.3 Which version number to send in a message\n   The most strenuous debate over\
    \ the use of HTTP version numbers has\n   centered on the problem of implementations\
    \ that do not follow the\n   robustness principle, and which fail to produce useful\
    \ results when\n   they receive a message with an HTTP minor version higher than\
    \ the\n   minor version they implement.  We consider these implementations\n \
    \  buggy, but we recognize that the robustness principle also implies\n   that\
    \ message senders should make concessions to buggy implementations\n   when this\
    \ is truly necessary for interoperation.\n   An HTTP client SHOULD send a request\
    \ version equal to the highest\n   version for which the client is at least conditionally\
    \ compliant, and\n   whose major version is no higher than the highest version\
    \ supported\n   by the server, if this is known.  An HTTP client MUST NOT send\
    \ a\n   version for which it is not at least conditionally compliant.\n   An HTTP\
    \ client MAY send a lower request version, if it is known that\n   the server\
    \ incorrectly implements the HTTP specification, but only\n   after the client\
    \ has determined that the server is actually buggy.\n   An HTTP server SHOULD\
    \ send a response version equal to the highest\n   version for which the server\
    \ is at least conditionally compliant, and\n   whose major version is less than\
    \ or equal to the one received in the\n   request.  An HTTP server MUST NOT send\
    \ a version for which it is not\n   at least conditionally compliant.  A server\
    \ MAY send a 505 (HTTP\n   Version Not Supported) response if cannot send a response\
    \ using the\n   major version used in the client's request.\n   An HTTP server\
    \ MAY send a lower response version, if it is known or\n   suspected that the\
    \ client incorrectly implements the HTTP\n   specification, but this should not\
    \ be the default, and this SHOULD\n   NOT be done if the request version is HTTP/1.1\
    \ or greater.\n"
- title: 3 Security Considerations
  contents:
  - "3 Security Considerations\n   None, except to the extent that security mechanisms\
    \ introduced in one\n   version of HTTP might depend on the proper interpretation\
    \ of HTTP\n   version numbers in older implementations.\n"
- title: 4 References
  contents:
  - "4 References\n   1.  Berners-Lee, T.,  R. Fielding, and H. Frystyk.  Hypertext\n\
    \   Transfer Protocol -- HTTP/1.0.  RFC 1945, HTTP Working Group, May,\n   1996.\n\
    \   2.  Fielding, Roy T., Jim Gettys, Jeffrey C. Mogul, Henrik Frystyk\n   Nielsen,\
    \ and Tim Berners-Lee.  Hypertext Transfer Protocol --\n   HTTP/1.1.  RFC 2068,\
    \ HTTP Working Group, January, 1997.\n   3.  Khare, Rohit.  HTTP/1.2 Extension\
    \ Protocol (PEP).  HTTP Working\n   Group, Work in Progress.\n   4.  Postel, Jon.\
    \  Internet Protocol.  RFC 791, NIC, September, 1981.\n"
- title: 5 Authors' addresses
  contents:
  - "5 Authors' addresses\n   Jeffrey C. Mogul\n   Western Research Laboratory\n \
    \  Digital Equipment Corporation\n   250 University Avenue\n   Palo Alto, California,\
    \ 94305, USA\n   Email: mogul@wrl.dec.com\n   Roy T. Fielding\n   Department of\
    \ Information and Computer Science\n   University of California\n   Irvine, CA\
    \ 92717-3425, USA\n   Fax: +1 (714) 824-4056\n   Email: fielding@ics.uci.edu\n\
    \   Jim Gettys\n   MIT Laboratory for Computer Science\n   545 Technology Square\n\
    \   Cambridge, MA 02139, USA\n   Fax: +1 (617) 258 8682\n   Email: jg@w3.org\n\
    \   Henrik Frystyk Nielsen\n   W3 Consortium\n   MIT Laboratory for Computer Science\n\
    \   545 Technology Square\n   Cambridge, MA 02139, USA\n   Fax: +1 (617) 258 8682\n\
    \   Email: frystyk@w3.org\n"
