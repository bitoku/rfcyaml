This document outlines a possible, but not recommended, method to mitigate the effect of collisions in the DNS namespace by providing a means for end users to disambiguate the conflict.
Introduction/Background Collisions in the DNS occur in multiple ways.
One common case is that an organization has used a subdomain (foo) of its primary domain (example.com) for corporate infrastructure, and then the string 'foo' is delegated as a Top Level Domain (TLD).
When an employee of the organization enters 'www.foo', is the goal to reach a machine in the internal namespace (www.foo.example.com) or the hostname 'www' in the 'foo' TLD?
This document describes a means of disambiguating this and similar cases.
Implementation of this method is not recommended; it is documented here to explain some of the pitfalls with such an approach.
The mitigation described in this document involves presenting multiple options to the user and allowing them to indicate which of the names is the one they are trying to reach.
The mitigation would look up the name in multiple namespaces.
If a conflict is detected, it would then provide a means for the user to indicate which one of the colliding names they wish to connect to, and return the disambiguated answer to the application.
An additional feature of mitigation could be to cache the user's choice and/or provide a means to set priorities.
This could be accomplished in a number of ways, including:  Intercepting the resolution requests from the application in a "shim" type library  Replacing the resolver library entirely  Integrating this type of mitigation into applications (some web browsers already do something similar to this)  Proxying the request to a server that provides an interstitial page that allows the user to indicate the intended name (for applications such as HTTP)
There are a number of issues with this solution, including but not limited to:  There may not be a human available to disambiguate the answer (unattended machines, mail servers, etc.).
The human/user may have no idea which is the correct choice, especially in the case of a phishing attack or other malicious intent.
The additional latency introduced may cause the originating application to time out.
The experience would be time consuming for users as they must select each site and subsite intended (e.g., www.intranet, images.intranet, etc.).
Caching the responses could lead to problems when the user changes location (internal sites would fail when offsite or otherwise lead to incorrect sites being loaded).
For these and other reasons, implementation of this technique is not recommended.
This document does not reference an implementation.
Due to the numerous issues described above, we do not recommend that this solution be implemented.
This is a very slight mitigation, and we do not recommend that it be viewed as a solution to the namespace collision problem.
While this method may make some users more aware of which version of a name they are going to use (and so careful users may avoid some phishing attacks), the security risks described above outweigh this potential benefit.
There are numerous security implications in this approach, including leaking internal names (e.g., secret project.corp.example.com), users being tricked into selecting the incorrect choice when trying to disambiguate answers, etc.
For these reasons, it is not recommended that this solution be deployed.
