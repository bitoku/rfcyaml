- title: __initial_text__
  contents:
  - '                Trust Anchor Management Protocol (TAMP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a transport independent protocol for the\n\
    \   management of trust anchors (TAs) and community identifiers stored in\n  \
    \ a trust anchor store.  The protocol makes use of the Cryptographic\n   Message\
    \ Syntax (CMS), and a digital signature is used to provide\n   integrity protection\
    \ and data origin authentication.  The protocol\n   can be used to manage trust\
    \ anchor stores containing trust anchors\n   represented as Certificate, TBSCertificate,\
    \ or TrustAnchorInfo\n   objects.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5934.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................5\n  \
    \    1.2. Trust Anchors ..............................................5\n    \
    \       1.2.1. Apex Trust Anchors ..................................6\n      \
    \     1.2.2. Management Trust Anchors ............................7\n        \
    \   1.2.3. Identity Trust Anchors ..............................7\n      1.3.\
    \ Architectural Elements .....................................8\n           1.3.1.\
    \ Cryptographic Module ................................8\n           1.3.2. Trust\
    \ Anchor Store ..................................9\n           1.3.3. TAMP Processing\
    \ Dependencies ........................9\n           1.3.4. Application-Specific\
    \ Protocol Processing ...........10\n      1.4. ASN.1 Encoding ............................................11\n\
    \   2. Cryptographic Message Syntax Profile ...........................12\n  \
    \    2.1. ContentInfo ...............................................13\n    \
    \  2.2. SignedData Info ...........................................14\n      \
    \     2.2.1. SignerInfo .........................................15\n        \
    \   2.2.2. EncapsulatedContentInfo ............................16\n          \
    \ 2.2.3. Signed Attributes ..................................16\n           2.2.4.\
    \ Unsigned Attributes ................................18\n   3. Trust Anchor Formats\
    \ ...........................................18\n   4. Trust Anchor Management\
    \ Protocol Messages ......................19\n      4.1. TAMP Status Query .........................................21\n\
    \      4.2. TAMP Status Query Response ................................24\n  \
    \    4.3. Trust Anchor Update .......................................27\n    \
    \       4.3.1. Trust Anchor List ..................................31\n      4.4.\
    \ Trust Anchor Update Confirm ...............................32\n      4.5. Apex\
    \ Trust Anchor Update ..................................34\n      4.6. Apex Trust\
    \ Anchor Update Confirm ..........................36\n      4.7. Community Update\
    \ ..........................................38\n      4.8. Community Update Confirm\
    \ ..................................40\n      4.9. Sequence Number Adjust ....................................42\n\
    \      4.10. Sequence Number Adjust Confirm ...........................43\n  \
    \    4.11. TAMP Error ...............................................44\n   5.\
    \ Status Codes ...................................................45\n   6. Sequence\
    \ Number Processing .....................................50\n   7. Subordination\
    \ Processing .......................................51\n   8. Implementation Considerations\
    \ ..................................54\n   9. Wrapped Apex Contingency Key Certificate\
    \ Extension .............54\n   10. Security Considerations .......................................55\n\
    \   11. IANA Considerations ...........................................58\n  \
    \ 12. References ....................................................58\n    \
    \  12.1. Normative References .....................................58\n      12.2.\
    \ Informative References ...................................59\n   Appendix A.\
    \  ASN.1 Modules ........................................61\n     A.1.  ASN.1\
    \ Module Using 1993 Syntax ............................61\n     A.2.  ASN.1 Module\
    \ Using 1988 Syntax ............................70\n   Appendix B.  Media Type\
    \ Registrations .............................77\n     B.1.  application/tamp-status-query\
    \ .............................77\n     B.2.  application/tamp-status-response\
    \ ..........................78\n     B.3.  application/tamp-update ...................................79\n\
    \     B.4.  application/tamp-update-confirm ...........................80\n  \
    \   B.5.  application/tamp-apex-update ..............................81\n    \
    \ B.6.  application/tamp-apex-update-confirm ......................82\n     B.7.\
    \  application/tamp-community-update .........................83\n     B.8.  application/tamp-community-update-confirm\
    \ .................84\n     B.9.  application/tamp-sequence-adjust ..........................85\n\
    \     B.10. application/tamp-sequence-adjust-confirm ..................86\n  \
    \   B.11. application/tamp-error ....................................87\n   Appendix\
    \ C.  TAMP over HTTP .......................................88\n     C.1.  TAMP\
    \ Status Query Message .................................89\n     C.2.  TAMP Status\
    \ Response Message ..............................89\n     C.3.  Trust Anchor Update\
    \ Message ...............................89\n     C.4.  Trust Anchor Update Confirm\
    \ Message .......................89\n     C.5.  Apex Trust Anchor Update Message\
    \ ..........................89\n     C.6.  Apex Trust Anchor Update Confirm Message\
    \ ..................90\n     C.7.  Community Update Message ..................................90\n\
    \     C.8.  Community Update Confirm Message ..........................90\n  \
    \   C.9.  Sequence Number Adjust Message ............................90\n    \
    \ C.10. Sequence Number Adjust Confirm Message ....................90\n     C.11.\
    \ TAMP Error Message ........................................91\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Trust Anchor Management Protocol\
    \ (TAMP).\n   TAMP may be used to manage the trust anchors and community\n   identifiers\
    \ in any device that uses digital signatures; however, this\n   specification\
    \ was written with the requirements of cryptographic\n   modules in mind.  For\
    \ example, TAMP can support signed firmware\n   packages [RFC4108], where the\
    \ trust anchor public key can be used to\n   validate digital signatures on firmware\
    \ packages or validate the\n   X.509 certification path [RFC5280][X.509] of the\
    \ firmware package\n   signer.\n   Most TAMP messages are digitally signed to\
    \ provide integrity\n   protection and data origin authentication.  Both signed\
    \ and unsigned\n   TAMP messages employ the Cryptographic Message Syntax (CMS)\n\
    \   [RFC5652].  The CMS is a data protection encapsulation syntax that\n   makes\
    \ use of ASN.1 [X.680].\n   This specification does not provide for confidentiality\
    \ of TAMP\n   messages.  If confidentiality is required, then the communications\n\
    \   environment that is used to transfer TAMP messages must provide it.\n   This\
    \ specification is intended to satisfy the protocol-related\n   requirements expressed\
    \ in \"Trust Anchor Management Requirements\"\n   [TA-MGMT-REQS] and uses vocabulary\
    \ from that document.\n   TAMP messages may be exchanged in real time over a network,\
    \ such as\n   via HTTP as described in Appendix A, or may be stored and transferred\n\
    \   using other means.  TAMP exchanges consist of a request message that\n   includes\
    \ instructions for a trust anchor store and, optionally, a\n   corresponding response\
    \ message that reports the result of carrying\n   out the instructions in the\
    \ request.  Response messages need not be\n   propagated in all cases.  For example,\
    \ a GPS receiver may be unable\n   to transmit a response and may instead use\
    \ an attached display to\n   indicate the results of processing a TAMP request.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n"
- title: 1.2.  Trust Anchors
  contents:
  - "1.2.  Trust Anchors\n   TAMP manages trust anchors.  A trust anchor contains\
    \ a public key\n   that is used to validate digital signatures.  TAMP recognizes\
    \ three\n   formats for representing trust anchor information: Certificate\n \
    \  [RFC5280], TBSCertificate [RFC5280], and TrustAnchorInfo [RFC5914].\n   All\
    \ trust anchors are distinguished by the public key, and all trust\n   anchors\
    \ consist of the following components:\n   o  A public key signature algorithm\
    \ identifier and associated public\n      key, which MAY include parameters\n\
    \   o  A public key identifier\n   Other information may appear in a trust anchor,\
    \ including\n   certification path processing controls and a human readable name.\n\
    \   TAMP recognizes three types of trust anchors based on functionality:\n   apex\
    \ trust anchors, management trust anchors, and identity trust\n   anchors.\n \
    \  In addition to the information described above, apex trust anchors\n   and\
    \ management trust anchors that sign TAMP messages have an\n   associated sequence\
    \ number that is used for replay detection.\n   The public key is used to name\
    \ a trust anchor, and the public key\n   identifier is used to identify the trust\
    \ anchor as a signer of a\n   particular object, such as a SignedData object or\
    \ a public key\n   certificate.  This public key identifier can be stored with\
    \ the trust\n   anchor, or in most public key identifier assignment methods, it\
    \ can\n   be computed from the public key whenever needed.\n   A trust anchor\
    \ public key can be used in two different ways to\n   support digital signature\
    \ validation.  In the first approach, the\n   trust anchor public key is used\
    \ directly to validate the digital\n   signature.  In the second approach, the\
    \ trust anchor public key is\n   used to validate an X.509 certification path,\
    \ and then the subject\n   public key in the final certificate in the certification\
    \ path is used\n   to validate the digital signature.  When the second approach\
    \ is\n   employed, the certified public key may be used for things other than\n\
    \   digital signature validation; the other possible actions are\n   constrained\
    \ by the key usage certificate extension.\n   TAMP implementations MUST support\
    \ validation of TAMP messages that\n   are directly validated using a trust anchor.\
    \  Support for TAMP\n   messages validated using an X.509 certificate validated\
    \ using a trust\n   anchor, or using longer certification paths, is OPTIONAL.\
    \  The CMS\n   provides a location to carry X.509 certificates, and this facility\n\
    \   can be used to transfer certificates to aid in the construction of\n   the\
    \ certification path.\n"
- title: 1.2.1.  Apex Trust Anchors
  contents:
  - "1.2.1.  Apex Trust Anchors\n   Within the context of a single trust anchor store,\
    \ one trust anchor\n   is superior to all others.  This trust anchor is referred\
    \ to as the\n   apex trust anchor.  This trust anchor represents the ultimate\n\
    \   authority over the trust anchor store.  Much of this authority can be\n  \
    \ delegated to other trust anchors.\n   The apex trust anchor private key is expected\
    \ to be controlled by an\n   entity with information assurance responsibility\
    \ for the trust anchor\n   store.  The apex trust anchor is by definition unconstrained\
    \ and\n   therefore does not have explicit authorization information associated\n\
    \   with it.\n   Due to the special nature of the apex trust anchor, TAMP includes\n\
    \   separate facilities to change it.  In particular, TAMP includes a\n   facility\
    \ to securely replace the apex trust anchor.  This action\n   might be taken for\
    \ one or more of the following reasons:\n   o  The crypto period for the apex\
    \ trust anchor public/private key\n      pair has come to an end\n   o  The apex\
    \ trust anchor private key is no longer available\n   o  The apex trust anchor\
    \ public/private key pair needs to be revoked\n   o  The authority has decided\
    \ to use a different digital signature\n      algorithm or the same digital signature\
    \ algorithm with different\n      parameters, such as a different elliptic curve\n\
    \   o  The authority has decided to use a different key size\n   o  The authority\
    \ has decided to transfer control to another authority\n   To accommodate these\
    \ requirements, the apex trust anchor MAY include\n   two public keys.  Whenever\
    \ the apex trust anchor is updated, both\n   public keys will be replaced.  The\
    \ first public key, called the\n   operational public key, is used in the same\
    \ manner as other trust\n   anchors.  Any type of TAMP message, including an Apex\
    \ Trust Anchor\n   Update message, can be validated with the operational public\
    \ key.\n   The second public key, called the contingency public key, can only\
    \ be\n   used to update the apex trust anchor.  The contingency private key\n\
    \   SHOULD be used at only one point in time; it is used only to sign an\n   Apex\
    \ Trust Anchor Update message that results in its own replacement\n   (as well\
    \ as the replacement of the operational public key).  The\n   contingency public\
    \ key is distributed in encrypted form.  When the\n   contingency public key is\
    \ used to validate an Apex Trust Anchor\n   Update message, the symmetric key\
    \ needed to decrypt the contingency\n   public key is provided as part of the\
    \ signed Apex Trust Anchor Update\n   message that is to be verified with the\
    \ contingency public key.\n"
- title: 1.2.2.  Management Trust Anchors
  contents:
  - "1.2.2.  Management Trust Anchors\n   Management trust anchors are used in the\
    \ management of cryptographic\n   modules.  For example, the TAMP messages specified\
    \ in this document\n   are validated to a management trust anchor.  Likewise,\
    \ a signed\n   firmware package as specified in [RFC4108] is validated to a\n\
    \   management trust anchor.\n"
- title: 1.2.3.  Identity Trust Anchors
  contents:
  - "1.2.3.  Identity Trust Anchors\n   Identity trust anchors are used to validate\
    \ certification paths, and\n   they represent the trust anchor for a public key\
    \ infrastructure.\n   They are most often used in the validation of certificates\
    \ associated\n   with non-management applications.\n"
- title: 1.3.  Architectural Elements
  contents:
  - "1.3.  Architectural Elements\n   TAMP does not assume any particular architecture.\
    \  However, TAMP\n   REQUIRES the following architectural elements: a cryptographic\n\
    \   module, a trust anchor store, TAMP protocol processing, and other\n   application-specific\
    \ protocol processing.\n   A globally unique algorithm identifier MUST be assigned\
    \ for each one-\n   way hash function, digital signature generation/validation\
    \ algorithm,\n   and symmetric key unwrapping algorithm that is implemented. \
    \ To\n   support CMS, an object identifier (OID) is assigned to name a one-way\n\
    \   hash function, and another OID is assigned to name each combination\n   of\
    \ a one-way hash function when used with a digital signature\n   algorithm.  Similarly,\
    \ certificates associate OIDs assigned to public\n   key algorithms with subject\
    \ public keys, and certificates make use of\n   an OID that names both the one-way\
    \ hash function and the digital\n   signature algorithm for the certificate issuer\
    \ digital signature.\n   [RFC3279], [RFC3370], [RFC5753], and [RFC5754] provide\
    \ OIDs for a\n   number of commonly used algorithms; however, OIDs may be defined\
    \ in\n   later or different specifications.\n"
- title: 1.3.1.  Cryptographic Module
  contents:
  - "1.3.1.  Cryptographic Module\n   The cryptographic module MUST include the following\
    \ capabilities:\n   o  The cryptographic module SHOULD support the secure storage\
    \ of a\n      digital signature private key to sign TAMP responses and either\
    \ a\n      certificate containing the associated public key or a certificate\n\
    \      designator.  In the latter case, the certificate is stored\n      elsewhere\
    \ but is available to parties that need to validate\n      cryptographic module\
    \ digital signatures.  The designator is a\n      public key identifier.\n   o\
    \  The cryptographic module MUST support at least one one-way hash\n      function,\
    \ one digital signature validation algorithm, one digital\n      signature generation\
    \ algorithm, and, if contingency keys are\n      supported, one symmetric key\
    \ unwrapping algorithm.  If only one\n      one-way hash function is present,\
    \ it MUST be consistent with the\n      digital signature validation and digital\
    \ signature generation\n      algorithms.  If only one digital signature validation\
    \ algorithm is\n      present, it MUST be consistent with the apex trust anchor\n\
    \      operational public key.  If only one digital signature generation\n   \
    \   algorithm is present, it MUST be consistent with the cryptographic\n     \
    \ module digital signature private key.  These algorithms MUST be\n      available\
    \ for processing TAMP messages, including the content\n      types defined in\
    \ [RFC5652], and for validation of X.509\n      certification paths.  As with\
    \ similar specifications, such as\n      RFC 5280, this specification does not\
    \ mandate support for any\n      cryptographic algorithms.  However, algorithm\
    \ requirements may be\n      imposed by specifications that use trust anchors\
    \ managed via TAMP.\n"
- title: 1.3.2.  Trust Anchor Store
  contents:
  - "1.3.2.  Trust Anchor Store\n   The trust anchor store MUST include the following\
    \ capabilities:\n   o  Each trust anchor store MUST have a unique name.  For example,\
    \ a\n      cryptographic module containing a single trust anchor store may be\n\
    \      identified by a unique serial number with respect to other modules\n  \
    \    within the same family where the family is represented as an ASN.1\n    \
    \  object identifier (OID) and the unique serial number is\n      represented\
    \ as a string of octets.  Other means of establishing a\n      unique name are\
    \ also possible.\n   o  Each trust anchor store SHOULD have the capability to\
    \ securely\n      store one or more community identifiers.  The community identifier\n\
    \      is an OID, and it identifies a collection of cryptographic modules\n  \
    \    that can be the target of a single TAMP message or the intended\n      recipients\
    \ for a particular management message.\n   o  The trust anchor store SHOULD support\
    \ the use of an apex trust\n      anchor.  If apex support is provided, the trust\
    \ anchor store MUST\n      support the secure storage of exactly one apex trust\
    \ anchor.  The\n      trust anchor store SHOULD support the secure storage of\
    \ at least\n      one additional trust anchor.  Each trust anchor MUST contain\
    \ a\n      unique public key.  A public key MUST NOT appear more than once in\n\
    \      a trust anchor store.\n   o  The trust anchor store MUST have the capability\
    \ to securely store\n      a sequence number for each trust anchor authorized\
    \ to generate\n      TAMP messages and be able to report the sequence number along\
    \ with\n      the key identifier of the trust anchor.\n"
- title: 1.3.3.  TAMP Processing Dependencies
  contents:
  - "1.3.3.  TAMP Processing Dependencies\n   TAMP processing MUST include the following\
    \ capabilities:\n   o  TAMP processing MUST have a means of locating an appropriate\
    \ trust\n      anchor.  Two mechanisms are available.  The first mechanism is\n\
    \      based on the public key identifier for digital signature\n      verification,\
    \ and the second mechanism is based on the trust\n      anchor X.500 distinguished\
    \ name and other X.509 certification path\n      controls for certificate path\
    \ discovery and validation.  The first\n      mechanism MUST be supported, but\
    \ the second mechanism MAY be\n      supported.\n   o  TAMP processing MUST be\
    \ able to invoke the digital signature\n      validation algorithm using the public\
    \ key held in secure storage\n      for trust anchors.\n   o  TAMP processing\
    \ MUST have read and write access to secure storage\n      for sequence numbers\
    \ associated with each TAMP message signer as\n      described in Section 6.\n\
    \   o  TAMP processing MUST have read and write access to secure storage\n   \
    \   for trust anchors in order to update them.  Update operations\n      include\
    \ adding trust anchors, removing trust anchors, and\n      modifying trust anchors.\
    \  Application-specific constraints MUST be\n      securely stored with each management\
    \ trust anchor as described in\n      Section 1.3.4.\n   o  TAMP processing MUST\
    \ have read access to secure storage for the\n      community membership list,\
    \ if any, to determine whether a targeted\n      message ought to be accepted.\n\
    \   o  To implement the OPTIONAL community identifier update feature,\n      TAMP\
    \ processing MUST have read and write access to secure storage\n      for the\
    \ community membership list.\n   o  To generate signed confirmation messages,\
    \ TAMP processing MUST be\n      able to invoke the digital signature generation\
    \ algorithm using\n      the cryptographic module digital signature private key,\
    \ and it\n      MUST have read access to the cryptographic module certificate\
    \ or\n      its designator.  TAMP uses X.509 certificates [RFC5280].\n   o  The\
    \ TAMP processing MUST have read access to the trust anchor\n      store unique\
    \ name.\n"
- title: 1.3.4.  Application-Specific Protocol Processing
  contents:
  - "1.3.4.  Application-Specific Protocol Processing\n   The apex trust anchor and\
    \ management trust anchors managed with TAMP\n   can be used by the TAMP application.\
    \  Other management applications\n   MAY make use of all three types of trust\
    \ anchors, but non-management\n   applications SHOULD only make use of identity\
    \ trust anchors.\n   Applications MUST ensure that usage of a trust anchor is\
    \ consistent\n   with any constraints associated with the trust anchor.  For example,\n\
    \   if name constraints are associated with a trust anchor, certification\n  \
    \ paths that start with the trust anchor and contain certificates with\n   names\
    \ that violate the name constraints MUST be rejected.\n   The application-specific\
    \ protocol processing MUST be provided with\n   the following services:\n   o\
    \  The application-specific protocol processing MUST have a means of\n      locating\
    \ an appropriate trust anchor.  Two mechanisms are\n      available to applications.\
    \  The first mechanism is based on the\n      public key identifier for digital\
    \ signature verification, and the\n      second mechanism is based on the trust\
    \ anchor X.500 distinguished\n      name and other X.509 certification path controls\
    \ for certificate\n      path discovery and validation.\n   o  The application-specific\
    \ protocol processing MUST be able to\n      invoke the digital signature validation\
    \ algorithm using the public\n      key held in secure storage for trust anchors.\n\
    \   o  The application-specific protocol processing MUST have read access\n  \
    \    to data associated with trust anchors to ensure that constraints\n      can\
    \ be enforced appropriately.  For example, an application MUST\n      have read\
    \ access to any name constraints associated with a TA to\n      ensure that certification\
    \ paths terminated by that TA do not\n      include certificates issued to entities\
    \ outside the TA manager-\n      designated namespace.\n   o  The application-specific\
    \ protocol processing MUST have read access\n      to secure storage for the community\
    \ membership list, if any, to\n      determine whether a targeted message ought\
    \ to be accepted.\n   o  If the application-specific protocol requires digital\
    \ signatures\n      on confirmation messages or receipts, then the application-\n\
    \      specific protocol processing MUST be able to invoke the digital\n     \
    \ signature generation algorithm with the cryptographic module\n      digital\
    \ signature private key and its associated certificate or\n      certificate designator.\
    \  Digital signature generation MUST be\n      controlled in a manner that ensures\
    \ that the content type of\n      signed confirmation messages or receipts is\
    \ appropriate for the\n      application-specific protocol processing.\n   o \
    \ The application-specific protocol processing MUST have read access\n      to\
    \ the trust anchor store unique name.\n"
- title: 1.4.  ASN.1 Encoding
  contents:
  - "1.4.  ASN.1 Encoding\n   The CMS uses Abstract Syntax Notation One (ASN.1) [X.680].\
    \  ASN.1 is\n   a formal notation used for describing data protocols, regardless\
    \ of\n   the programming language used by the implementation.  Encoding rules\n\
    \   describe how the values defined in ASN.1 will be represented for\n   transmission.\
    \  The Basic Encoding Rules (BER) [X.690] are the most\n   widely employed rule\
    \ set, but they offer more than one way to\n   represent data structures.  For\
    \ example, definite-length encoding and\n   indefinite-length encoding are supported.\
    \  This flexibility is not\n   desirable when digital signatures are used.  As\
    \ a result, the\n   Distinguished Encoding Rules (DER) [X.690] were invented.\
    \  DER is a\n   subset of BER that ensures a single way to represent a given value.\n\
    \   For example, DER always employs definite-length encoding.\n   Digitally signed\
    \ structures MUST be encoded with DER.  In other\n   specifications, structures\
    \ that are not digitally signed do not\n   require DER, but in this specification,\
    \ DER is REQUIRED for all\n   structures.  By always using DER, the TAMP processor\
    \ will have fewer\n   options to implement.\n   ASN.1 is used throughout the text\
    \ of this document for illustrative\n   purposes.  The authoritative source of\
    \ ASN.1 for the structures\n   defined in this document is Appendix A.\n"
- title: 2.  Cryptographic Message Syntax Profile
  contents:
  - "2.  Cryptographic Message Syntax Profile\n   TAMP makes use of signed and unsigned\
    \ messages.  The Cryptographic\n   Message Syntax (CMS) is used in both cases.\
    \  A digital signature is\n   used to protect the message from undetected modification\
    \ and provide\n   data origin authentication.  TAMP makes no general provision\
    \ for\n   encryption of content.\n   CMS is used to construct a signed TAMP message.\
    \  The CMS ContentInfo\n   content type MUST always be present.  For signed messages,\n\
    \   ContentInfo MUST encapsulate the CMS SignedData content type; for\n   unsigned\
    \ messages, ContentInfo MUST encapsulate the TAMP message\n   directly.  The CMS\
    \ SignedData content type MUST encapsulate the TAMP\n   message.  A unique content\
    \ type identifier identifies the particular\n   type of TAMP message.  The CMS\
    \ encapsulation of a signed TAMP message\n   is summarized by:\n    ContentInfo\
    \ {\n      contentType id-signedData, -- (1.2.840.113549.1.7.2)\n      content\
    \     SignedData\n    }\n    SignedData {\n      version           CMSVersion,\
    \ -- Always set to 3\n      digestAlgorithms  DigestAlgorithmIdentifiers, -- Only\
    \ one\n      encapContentInfo  EncapsulatedContentInfo,\n      certificates  \
    \    CertificateSet, -- OPTIONAL signer certificates\n      crls             \
    \ CertificateRevocationLists, -- OPTIONAL\n      signerInfos       SET OF SignerInfo\
    \ -- Only one\n    }\n    SignerInfo {\n      version             CMSVersion,\
    \ -- Always set to 3\n      sid                 SignerIdentifier,\n      digestAlgorithm\
    \     DigestAlgorithmIdentifier,\n      signedAttrs         SignedAttributes,\n\
    \                                          -- REQUIRED in TAMP messages\n    \
    \  signatureAlgorithm  SignatureAlgorithmIdentifier,\n      signature        \
    \   SignatureValue,\n      unsignedAttrs       UnsignedAttributes -- OPTIONAL;\
    \ may only be\n    }                                        -- present in Apex\
    \ Trust\n                                             -- Anchor Update messages\n\
    \    EncapsulatedContentInfo {\n      eContentType  OBJECT IDENTIFIER, -- Names\
    \ TAMP message type\n      eContent      OCTET STRING       -- Contains TAMP message\n\
    \    }\n   When a TAMP message is used to update the apex trust anchor, this\n\
    \   same structure is used; however, the digital signature will be\n   validated\
    \ with either the apex trust anchor operational public key or\n   the contingency\
    \ public key.  When the contingency public key is used,\n   the symmetric key\
    \ needed to decrypt the previously stored contingency\n   public key is provided\
    \ as a contingency-public-key-decrypt-key\n   unsigned attribute.  Section 4.5\
    \ of this document describes the Apex\n   Trust Anchor Update message.\n   CMS\
    \ is also used to construct an unsigned TAMP message.  The CMS\n   ContentInfo\
    \ structure MUST always be present, and it MUST be the\n   outermost layer of\
    \ encapsulation.  A unique content type identifier\n   identifies the particular\
    \ TAMP message.  The CMS encapsulation of an\n   unsigned TAMP message is summarized\
    \ by:\n    ContentInfo {\n      contentType  OBJECT IDENTIFIER, -- Names TAMP\
    \ message type\n      content      OCTET STRING       -- Contains TAMP message\n\
    \    }\n"
- title: 2.1.  ContentInfo
  contents:
  - "2.1.  ContentInfo\n   CMS requires the outermost encapsulation to be ContentInfo\
    \ [RFC5652].\n   The fields of ContentInfo are used as follows:\n   o  contentType\
    \ indicates the type of the associated content, and for\n      TAMP, the encapsulated\
    \ type is either SignedData or the content\n      type identifier associated with\
    \ an unsigned TAMP message.  When\n      the id-signedData (1.2.840.113549.1.7.2)\
    \ object identifier is\n      present in this field, then a signed TAMP message\
    \ is in the\n      content.  Otherwise, an unsigned TAMP message is in the content.\n\
    \   o  content holds the content, and for TAMP, the content is either a\n    \
    \  SignedData content or an unsigned TAMP message.\n"
- title: 2.2.  SignedData Info
  contents:
  - "2.2.  SignedData Info\n   The SignedData content type [RFC5652] contains the\
    \ signed TAMP\n   message and a digital signature value; the SignedData content\
    \ type\n   MAY also contain the certificates needed to validate the digital\n\
    \   signature.  The fields of SignedData are used as follows:\n   o  version is\
    \ the syntax version number, and for TAMP, the version\n      number MUST be set\
    \ to 3.\n   o  digestAlgorithms is a collection of one-way hash function\n   \
    \   identifiers, and for TAMP, it contains a single one-way hash\n      function\
    \ identifier.  The one-way hash function employed by the\n      TAMP message originator\
    \ in generating the digital signature MUST\n      be present.\n   o  encapContentInfo\
    \ is the signed content, consisting of a content\n      type identifier and the\
    \ content itself.  The use of the\n      EncapsulatedContentInfo type is discussed\
    \ further in\n      Section 2.2.2.\n   o  certificates is an OPTIONAL collection\
    \ of certificates.  It MAY be\n      omitted, or it MAY include the X.509 certificates\
    \ needed to\n      construct the certification path of the TAMP message originator.\n\
    \      For TAMP messages sent to a trust anchor store where an apex trust\n  \
    \    anchor or management trust anchor is used directly to validate the\n    \
    \  TAMP message digital signature, this field SHOULD be omitted.\n      When an\
    \ apex trust anchor or management trust anchor is used to\n      validate an X.509\
    \ certification path [RFC5280], and the subject\n      public key from the final\
    \ certificate in the certification path is\n      used to validate the TAMP message\
    \ digital signature, the\n      certificate of the TAMP message originator SHOULD\
    \ be included, and\n      additional certificates to support certification path\
    \ construction\n      MAY be included.  For TAMP messages sent by a trust anchor\
    \ store,\n      this field SHOULD include only the signer's certificate or should\n\
    \      be omitted.  A TAMP message recipient MUST NOT reject a valid TAMP\n  \
    \    message that contains certificates that are not needed to validate\n    \
    \  the digital signature.  PKCS#6 extended certificates [PKCS#6] and\n      attribute\
    \ certificates (either version 1 or version 2) [RFC5755]\n      MUST NOT be included\
    \ in the set of certificates; these certificate\n      formats are not used in\
    \ TAMP.  Certification authority (CA)\n      certificates and end entity certificates\
    \ MUST conform to the\n      profiles defined in [RFC5280].\n   o  crls is an\
    \ OPTIONAL collection of certificate revocation lists\n      (CRLs).\n   o  signerInfos\
    \ is a collection of per-signer information, and for\n      TAMP, the collection\
    \ MUST contain exactly one SignerInfo.  The use\n      of the SignerInfo type\
    \ is discussed further in Section 2.2.1.\n"
- title: 2.2.1.  SignerInfo
  contents:
  - "2.2.1.  SignerInfo\n   The TAMP message originator is represented in the SignerInfo\
    \ type.\n   The fields of SignerInfo are used as follows:\n   o  version is the\
    \ syntax version number.  With TAMP, the version MUST\n      be set to 3.\n  \
    \ o  sid identifies the TAMP message originator's public key.  The\n      subjectKeyIdentifier\
    \ alternative is always used with TAMP, which\n      identifies the public key\
    \ directly.  When the public key is\n      included in a TrustAnchorInfo object,\
    \ this identifier is included\n      in the keyId field.  When the public key\
    \ is included in a\n      Certificate or TBSCertificate, this identifier is included\
    \ in the\n      subjectKeyIdentifier certificate extension.\n   o  digestAlgorithm\
    \ identifies the one-way hash function, and any\n      associated parameters,\
    \ used by the TAMP message originator.  It\n      MUST contain the one-way hash\
    \ functions employed by the\n      originator.  This message digest algorithm\
    \ identifier MUST match\n      the one carried in the digestAlgorithms field in\
    \ SignedData.  The\n      message digest algorithm identifier is carried in two\
    \ places to\n      facilitate stream processing by the receiver.\n   o  signedAttrs\
    \ is an OPTIONAL set of attributes that are signed along\n      with the content.\
    \  The signedAttrs are OPTIONAL in the CMS, but\n      signedAttrs is REQUIRED\
    \ for all signed TAMP messages.  The SET OF\n      Attribute MUST be encoded with\
    \ the Distinguished Encoding Rules\n      (DER) [X.690].  Section 2.2.3 of this\
    \ document lists the signed\n      attributes that MUST be included in the collection.\
    \  Other signed\n      attributes MAY be included, but any unrecognized signed\
    \ attributes\n      MUST be ignored.\n   o  signatureAlgorithm identifies the\
    \ digital signature algorithm, and\n      any associated parameters, used by the\
    \ TAMP message originator to\n      generate the digital signature.\n   o  signature\
    \ is the digital signature value generated by the TAMP\n      message originator.\n\
    \   o  unsignedAttrs is an OPTIONAL set of attributes that are not\n      signed.\
    \  For TAMP, this field is usually omitted.  It is present\n      only in Apex\
    \ Trust Anchor Update messages that are to be validated\n      using the apex\
    \ trust anchor contingency public key.  In this case,\n      the SET OF Attribute\
    \ MUST include the symmetric key needed to\n      decrypt the contingency public\
    \ key in the contingency-public-key-\n      decrypt-key unsigned attribute.  Section\
    \ 2.2.4 of this document\n      describes this unsigned attribute.\n"
- title: 2.2.2.  EncapsulatedContentInfo
  contents:
  - "2.2.2.  EncapsulatedContentInfo\n   The EncapsulatedContentInfo structure contains\
    \ the TAMP message.  The\n   fields of EncapsulatedContentInfo are used as follows:\n\
    \   o  eContentType is an object identifier that uniquely specifies the\n    \
    \  content type, and for TAMP, the value identifies the TAMP message.\n      The\
    \ list of TAMP message content types is provided in Section 4.\n   o  eContent\
    \ is the TAMP message, encoded as an octet string.  In\n      general, the CMS\
    \ does not require the eContent to be DER-encoded\n      before constructing the\
    \ octet string.  However, TAMP messages MUST\n      be DER-encoded.\n"
- title: 2.2.3.  Signed Attributes
  contents:
  - "2.2.3.  Signed Attributes\n   The TAMP message originator MUST digitally sign\
    \ a collection of\n   attributes along with the TAMP message.  Each attribute\
    \ in the\n   collection MUST be DER-encoded.  The syntax for attributes is defined\n\
    \   in [RFC5912].\n   Each of the attributes used with this CMS profile has a\
    \ single\n   attribute value.  Even though the syntax is defined as a SET OF\n\
    \   AttributeValue, there MUST be exactly one instance of AttributeValue\n   present.\n\
    \   The SignedAttributes syntax within SignerInfo is defined as a SET OF\n   Attribute.\
    \  The SignedAttributes MUST include only one instance of\n   any particular attribute.\
    \  TAMP messages that violate this rule MUST\n   be rejected as malformed.\n \
    \  The TAMP message originator MUST include the content-type and\n   message-digest\
    \ attributes.  The TAMP message originator MAY also\n   include the binary-signing-time\
    \ attribute.\n   The TAMP message originator MAY include any other attribute that\
    \ it\n   deems appropriate.  The intent is to allow additional signed\n   attributes\
    \ to be included if a future need is identified.  This does\n   not cause an interoperability\
    \ concern because unrecognized signed\n   attributes MUST be ignored.\n   The\
    \ following summarizes the signed attribute requirements for TAMP\n   messages:\n\
    \   o  content-type MUST be supported.\n   o  message-digest MUST be supported.\n\
    \   o  binary-signing-time MAY be supported.  When present, it is\n      generally\
    \ ignored by the recipient.\n   o  other attributes MAY be supported.  Unrecognized\
    \ attributes MUST\n      be ignored by the recipient.\n"
- title: 2.2.3.1.  Content-Type Attribute
  contents:
  - "2.2.3.1.  Content-Type Attribute\n   The TAMP message originator MUST include\
    \ a content-type attribute; it\n   is an object identifier that uniquely specifies\
    \ the content type.\n   Section 11.1 of [RFC5652] defines the content-type attribute.\
    \  For\n   TAMP, the value identifies the TAMP message.  The list of TAMP\n  \
    \ message content types and their identifiers is provided in Section 4.\n   A\
    \ content-type attribute MUST contain the same object identifier as\n   the content\
    \ type contained in the EncapsulatedContentInfo.\n"
- title: 2.2.3.2.  Message-Digest Attribute
  contents:
  - "2.2.3.2.  Message-Digest Attribute\n   The TAMP message originator MUST include\
    \ a message-digest attribute,\n   having as its value the output of a one-way\
    \ hash function computed on\n   the TAMP message that is being signed.  Section\
    \ 11.2 of [RFC5652]\n   defines the message-digest attribute.\n"
- title: 2.2.3.3.  Binary-Signing-Time Attribute
  contents:
  - "2.2.3.3.  Binary-Signing-Time Attribute\n   The TAMP message originator MAY include\
    \ a binary-signing-time\n   attribute, specifying the time at which the digital\
    \ signature was\n   applied to the TAMP message.  The binary-signing-time attribute\
    \ is\n   defined in [RFC4049].\n   No processing of the binary-signing-time attribute\
    \ is REQUIRED of a\n   TAMP message recipient; however, the binary-signing-time\
    \ attribute\n   MAY be included by the TAMP message originator as a form of message\n\
    \   identifier.\n"
- title: 2.2.4.  Unsigned Attributes
  contents:
  - "2.2.4.  Unsigned Attributes\n   For TAMP, unsigned attributes are usually omitted.\
    \  An unsigned\n   attribute is present only in Apex Trust Anchor Update messages\
    \ that\n   are to be validated by the apex trust anchor contingency public key.\n\
    \   In this case, the symmetric key to decrypt the previous contingency\n   public\
    \ key is provided in the contingency-public-key-decrypt-key\n   unsigned attribute.\
    \  This attribute MUST be supported, and it is\n   described in Section 2.2.4.1.\n\
    \   The TAMP message originator SHOULD NOT include other unsigned\n   attributes,\
    \ and any unrecognized unsigned attributes MUST be ignored.\n   The UnsignedAttributes\
    \ syntax within SignerInfo is defined as a SET\n   OF Attribute.  The UnsignedAttributes\
    \ MUST include only one instance\n   of any particular attribute.  TAMP messages\
    \ that violate this rule\n   MUST be rejected as malformed.\n"
- title: 2.2.4.1.  Contingency-Public-Key-Decrypt-Key Attribute
  contents:
  - "2.2.4.1.  Contingency-Public-Key-Decrypt-Key Attribute\n   The contingency-public-key-decrypt-key\
    \ attribute provides the\n   plaintext symmetric key needed to decrypt the previously\
    \ distributed\n   apex trust anchor contingency public key.  The symmetric key\
    \ MUST be\n   useable with the symmetric algorithm used to previously encrypt\
    \ the\n   contingency public key.\n   The contingency-public-key-decrypt-key attribute\
    \ has the following\n   syntax:\n    contingency-public-key-decrypt-key ATTRIBUTE\
    \ ::= {\n      WITH SYNTAX PlaintextSymmetricKey\n      SINGLE VALUE TRUE\n  \
    \    ID id-aa-TAMP-contingencyPublicKeyDecryptKey }\n    id-aa-TAMP-contingencyPublicKeyDecryptKey\n\
    \      OBJECT IDENTIFIER ::= { id-attributes 63 }\n    PlaintextSymmetricKey ::=\
    \ OCTET STRING\n"
- title: 3.  Trust Anchor Formats
  contents:
  - "3.  Trust Anchor Formats\n   TAMP recognizes three formats for representing trust\
    \ anchor\n   information within the protocol itself: Certificate [RFC5280],\n\
    \   TBSCertificate [RFC5280], and TrustAnchorInfo [RFC5914].  The\n   TrustAnchorChoice\
    \ structure, defined in [RFC5914], is used to select\n   one of these options.\n\
    \    TrustAnchorChoice ::= CHOICE {\n     certificate  Certificate,\n     tbsCert\
    \      [1] EXPLICIT TBSCertificate,\n     taInfo       [2] EXPLICIT TrustAnchorInfo\
    \ }\n   The Certificate structure is commonly used to represent trust\n   anchors.\
    \  Certificates include a signature, which removes the ability\n   for relying\
    \ parties to customize the information within the structure\n   itself.  TBSCertificate\
    \ contains all of the information of the\n   Certificate structure except for\
    \ the signature, enabling tailoring of\n   the information.  TrustAnchorInfo is\
    \ intended to serve as a\n   minimalist representation of trust anchor information\
    \ for scenarios\n   where storage or bandwidth is highly constrained.\n   Implementations\
    \ are not required to support all three options.  The\n   unsupportedTrustAnchorFormat\
    \ error code should be indicated when\n   generating a TAMPError due to receipt\
    \ of an unsupported trust anchor\n   format.\n"
- title: 4.  Trust Anchor Management Protocol Messages
  contents:
  - "4.  Trust Anchor Management Protocol Messages\n   TAMP makes use of signed and\
    \ unsigned messages.  The CMS is used in\n   both cases.  An object identifier\
    \ is assigned to each TAMP message\n   type, and this object identifier is used\
    \ as a content type in the\n   CMS.\n   TAMP specifies eleven message types. \
    \ The following provides the\n   content type identifier for each TAMP message\
    \ type, and it indicates\n   whether a digital signature is required.  If the\
    \ following indicates\n   that the TAMP message MUST be signed, then implementations\
    \ MUST\n   reject a message of that type that is not signed.\n   o  The TAMP Status\
    \ Query message MUST be signed.  It uses the\n      following object identifier:\
    \ { id-tamp 1 }.\n   o  The TAMP Status Response message SHOULD be signed.  It\
    \ uses the\n      following object identifier: { id-tamp 2 }.\n   o  The Trust\
    \ Anchor Update message MUST be signed.  It uses the\n      following object identifier:\
    \ { id-tamp 3 }.\n   o  The Trust Anchor Update Confirm message SHOULD be signed.\
    \  It uses\n      the following object identifier: { id-tamp 4 }.\n   o  The Apex\
    \ Trust Anchor Update message MUST be signed.  It uses the\n      following object\
    \ identifier: { id-tamp 5 }.\n   o  The Apex Trust Anchor Update Confirm message\
    \ SHOULD be signed.  It\n      uses the following object identifier: { id-tamp\
    \ 6 }.\n   o  The Community Update message MUST be signed.  It uses the\n    \
    \  following object identifier: { id-tamp 7 }.\n   o  The Community Update Confirm\
    \ message SHOULD be signed.  It uses\n      the following object identifier: {\
    \ id-tamp 8 }.\n   o  The Sequence Number Adjust MUST be signed.  It uses the\
    \ following\n      object identifier: { id-tamp 10 }.\n   o  The Sequence Number\
    \ Adjust Confirm message SHOULD be signed.  It\n      uses the following object\
    \ identifier: { id-tamp 11 }.\n   o  The TAMP Error message SHOULD be signed.\
    \  It uses the following\n      object identifier: { id-tamp 9 }.\n   Trust anchor\
    \ managers generate TAMP Status Query, Trust Anchor\n   Update, Apex Trust Anchor\
    \ Update, Community Update, and Sequence\n   Number Adjust messages.  Trust anchor\
    \ stores generate TAMP Status\n   Response, Trust Anchor Update Confirm, Apex\
    \ Trust Anchor Update\n   Confirm, Community Update Confirm, Sequence Number Adjust\
    \ Confirm,\n   and TAMP Error messages.\n   Support for Trust Anchor Update messages\
    \ is REQUIRED.  Support for\n   all other message formats is RECOMMENDED.  Implementations\
    \ that\n   support the HTTP binding described in Appendix C MUST additionally\n\
    \   support Trust Anchor Update Confirm and TAMP Error messages and MAY\n   support\
    \ 0 or more of the following pairs of messages: TAMP Status\n   Query and TAMP\
    \ Status Query Response; Apex Trust Anchor Update and\n   Apex Trust Anchor Update\
    \ Confirm; Community Update and Community\n   Update Confirm; Sequence Number\
    \ Adjust and Sequence Number Adjust\n   Confirm.  Implementations that operate\
    \ in a disconnected manner MUST\n   NOT assume a response will be received from\
    \ each consumer of a TAMP\n   message.\n   A typical interaction between a trust\
    \ anchor manager and a trust\n   anchor store will follow the message flow shown\
    \ in Figure 1.  Figure\n   1 does not illustrate a flow where an error occurs.\n\
    \      +---------+                                +----------+\n      |      \
    \   |  Trust Anchor Status Query     |          |\n      |         |------------------------------->|\
    \          |\n      |         |                                |          |\n\
    \      |         |  Trust Anchor Status Response  |          |\n      | Trust\
    \   |<-------------------------------| Trust    |\n      | Anchor  |         \
    \                       | Anchor   |\n      | Manager |  Trust Anchor Update \
    \          | Store    |\n      |         |------------------------------->|  \
    \        |\n      |         |                                |          |\n  \
    \    |         |  Trust Anchor Update Confirm   |          |\n      |        \
    \ |<-------------------------------|          |\n      |         |           \
    \                     |          |\n      +---------+                        \
    \        +----------+\n                   Figure 1.  Typical TAMP Message Flow\n\
    \   Each TAMP query and update message includes an indication of the type\n  \
    \ of response that is desired.  The response can either be terse or\n   verbose.\
    \  All trust anchor stores MUST support both the terse and\n   verbose responses\
    \ and SHOULD generate a response of the type\n   indicated in the corresponding\
    \ request.  TAMP response processors\n   MUST support processing of both terse\
    \ and verbose responses.\n   Trust anchor stores SHOULD be able to process and\
    \ properly act upon\n   the valid payload of the TAMP Status Query message, the\
    \ Trust Anchor\n   Update message, the Apex Trust Anchor Update message, and the\n\
    \   Sequence Number Adjust message.  TAMP implementations MAY also\n   process\
    \ and act upon the valid payload of the Community Update\n   message.\n   TAMP\
    \ implementations SHOULD support generation of the TAMP Status\n   Response message,\
    \ the Trust Anchor Update Confirm message, the Apex\n   Trust Anchor Update Confirm\
    \ message, the Sequence Number Adjust\n   Confirm message, and the TAMP Error\
    \ message.  If a TAMP\n   implementation supports the Community Update message,\
    \ then generation\n   of Community Update Confirm messages SHOULD also be supported.\n"
- title: 4.1.  TAMP Status Query
  contents:
  - "4.1.  TAMP Status Query\n   The TAMP Status Query message is used to request\
    \ information about\n   the trust anchors that are currently installed in a trust\
    \ anchor\n   store, and for the list of communities to which the store belongs.\n\
    \   The TAMP Status Query message MUST be signed.  For the query message\n   to\
    \ be valid, the trust anchor store MUST be an intended recipient of\n   the query;\
    \ the sequence number checking described in Section 6 MUST\n   be successful when\
    \ the TAMP message signer is a trust anchor; and the\n   digital signature MUST\
    \ be validated by the apex trust anchor\n   operational public key, an authorized\
    \ management trust anchor, or via\n   an authorized X.509 certification path originating\
    \ with such a trust\n   anchor.\n   If the digital signature on the TAMP Status\
    \ Query message is valid,\n   sequence number checking is successful, the signer\
    \ is authorized, and\n   the trust anchor store is an intended recipient of the\
    \ TAMP message,\n   then a TAMP Status Response message SHOULD be returned.  If\
    \ a TAMP\n   Status Response message is not returned, then a TAMP Error message\n\
    \   SHOULD be returned.\n   The TAMP Status Query content type has the following\
    \ syntax:\n    CONTENT-TYPE  ::= TYPE-IDENTIFIER\n    tamp-status-query CONTENT-TYPE\
    \  ::=\n       { TAMPStatusQuery IDENTIFIED BY id-ct-TAMP-statusQuery }\n    id-ct-TAMP-statusQuery\
    \ OBJECT IDENTIFIER ::= { id-tamp 1 }\n    TAMPStatusQuery ::= SEQUENCE {\n  \
    \    Version  [0] TAMPVersion DEFAULT v2,\n      terse    [1] TerseOrVerbose DEFAULT\
    \ verbose,\n      query    TAMPMsgRef }\n    TAMPVersion ::= INTEGER { v1(1),\
    \ v2(2) }\n    TerseOrVerbose ::= ENUMERATED { terse(1), verbose(2) }\n    TAMPMsgRef\
    \ ::= SEQUENCE {\n      target  TargetIdentifier,\n      seqNum  SeqNumber }\n\
    \    SeqNumber ::= INTEGER (0..9223372036854775807)\n    TargetIdentifier ::=\
    \ CHOICE {\n      hwModules    [1] HardwareModuleIdentifierList,\n      communities\
    \  [2] CommunityIdentifierList,\n      allModules   [3] NULL,\n      uri     \
    \     [4] IA5String,\n      otherName    [5] AnotherName }\n    HardwareModuleIdentifierList\
    \ ::= SEQUENCE SIZE (1..MAX) OF\n                                     HardwareModules\n\
    \    HardwareModules ::= SEQUENCE {\n      hwType           OBJECT IDENTIFIER,\n\
    \      hwSerialEntries  SEQUENCE SIZE (1..MAX) OF HardwareSerialEntry }\n    HardwareSerialEntry\
    \ ::= CHOICE {\n      all     NULL,\n      single  OCTET STRING,\n      block\
    \   SEQUENCE {\n        low     OCTET STRING,\n        high    OCTET STRING }\
    \ }\n    CommunityIdentifierList ::= SEQUENCE SIZE (0..MAX) OF Community\n   \
    \ Community ::= OBJECT IDENTIFIER\n   The fields of TAMPStatusQuery are used as\
    \ follows:\n   o  version identifies version of TAMP.  For this version of the\n\
    \      specification, the default value, v2, MUST be used.\n   o  terse indicates\
    \ the type of response that is desired.  A terse\n      response is indicated\
    \ by a value of 1, and a verbose response is\n      indicated by a value of 2,\
    \ which is omitted during encoding since\n      it is the default value.\n   o\
    \  query contains two items: the target and the seqNum.  target\n      identifies\
    \ the target(s) of the query message.  seqNum is a\n      single-use value that\
    \ will be used to match the TAMP Status Query\n      message with the TAMP Status\
    \ Response message.  The sequence\n      number is also used to detect TAMP message\
    \ replay.  The sequence\n      number processing described in Section 6 MUST successfully\n\
    \      complete before a response is returned.\n   The fields of TAMPMsgRef are\
    \ used as follows:\n   o  target identifies the target(s) of the query.  Several\n\
    \      alternatives for naming a target are provided.  To identify a\n      cryptographic\
    \ module, a combination of a cryptographic type and\n      serial number are used.\
    \  The cryptographic type is represented as\n      an ASN.1 object identifier,\
    \ and the unique serial number is\n      represented as a string of octets.  To\
    \ facilitate compact\n      representation of serial numbers, a contiguous block\
    \ can be\n      specified by the lowest included serial number and the highest\n\
    \      included serial number.  When present, the high and low octet\n      strings\
    \ MUST have the same length.  The\n      HardwareModuleIdentifierList sequence\
    \ MUST NOT contain duplicate\n      hwType values, so that each member of the\
    \ sequence names all of\n      the cryptographic modules of this type.  Object\
    \ identifiers are\n      also used to identify communities of trust anchor stores.\
    \  A\n      sequence of these object identifiers is used if more than one\n  \
    \    community is the target of the message.  A trust anchor store is\n      considered\
    \ a target if it is a member of any of the listed\n      communities.  An explicit\
    \ NULL value is used to identify all\n      modules that consider the signer of\
    \ the TAMP message to be an\n      authorized source for that message type.  The\
    \ uri field can be\n      used to identify a target, i.e., a trust anchor store,\
    \ using a\n      Uniform Resource Identifier [RFC3986].  Additional name types\
    \ are\n      supported via the otherName field, which is of type AnotherName.\n\
    \      AnotherName is defined in [RFC5280].  The format and semantics of\n   \
    \   the name are indicated through the OBJECT IDENTIFIER in the type-\n      id\
    \ field.  The name itself is conveyed as a value field in\n      otherName.  Implementations\
    \ MUST support the allModules option and\n      SHOULD support all TargetIdentifier\
    \ options.\n   o  seqNum contains a single-use value that will be used to match\
    \ the\n      TAMP Status Query message with the successful TAMP Status Response\n\
    \      message.  The sequence number processing described in Section 6\n     \
    \ MUST successfully complete before a response is returned.\n   To determine whether\
    \ a particular cryptographic module serial number\n   is considered part of a\
    \ specified block, all of the following\n   conditions MUST be met.  First, the\
    \ cryptographic module serial\n   number MUST be the same length as both the high\
    \ and low octet\n   strings.  Second, the cryptographic module serial number MUST\
    \ be\n   greater than or equal to the low octet string.  Third, the\n   cryptographic\
    \ module serial number MUST be less than or equal to the\n   high octet string.\n\
    \   One octet string is equal to another if they are of the same length\n   and\
    \ are the same at each octet position.  An octet string, S1, is\n   greater than\
    \ another, S2, where S1 and S2 have the same length, if\n   and only if S1 and\
    \ S2 have different octets in one or more positions,\n   and in the first such\
    \ position, the octet in S1 is greater than that\n   in S2, considering the octets\
    \ as unsigned binary numbers.  Note that\n   these octet string comparison definitions\
    \ are consistent with those\n   in clause 6 of [X.690].\n"
- title: 4.2.  TAMP Status Query Response
  contents:
  - "4.2.  TAMP Status Query Response\n   The TAMP Status Response message is a reply\
    \ by a trust anchor store\n   to a valid TAMP Status Query message.  The TAMP\
    \ Status Response\n   message provides information about the trust anchors that\
    \ are\n   currently installed in the trust anchor store and the list of\n   communities\
    \ to which the trust anchor store belongs, if any.  The\n   TAMP Status Response\
    \ message MAY be signed or unsigned.  A TAMP\n   Status Response message MUST\
    \ be signed if the implementation is\n   capable of signing it.\n   The TAMP Status\
    \ Response content type has the following syntax:\n    tamp-status-response CONTENT-TYPE\
    \  ::=\n       { TAMPStatusResponse IDENTIFIED BY id-ct-TAMP-statusResponse }\n\
    \    id-ct-TAMP-statusResponse OBJECT IDENTIFIER ::= { id-tamp 2 }\n    TAMPStatusResponse\
    \ ::= SEQUENCE {\n      version   [0] TAMPVersion DEFAULT v2,\n      query   \
    \  TAMPMsgRef,\n      response  StatusResponse,\n      usesApex  BOOLEAN DEFAULT\
    \ TRUE }\n    StatusResponse ::= CHOICE {\n      terseResponse          [0] TerseStatusResponse,\n\
    \      verboseResponse        [1] VerboseStatusResponse }\n    TerseStatusResponse\
    \ ::= SEQUENCE {\n      taKeyIds               KeyIdentifiers,\n      communities\
    \            CommunityIdentifierList OPTIONAL }\n    KeyIdentifiers ::= SEQUENCE\
    \ SIZE (1..MAX) OF KeyIdentifier\n    VerboseStatusResponse ::= SEQUENCE {\n \
    \     taInfo                 TrustAnchorChoiceList,\n      continPubKeyDecryptAlg\
    \ [0] AlgorithmIdentifier OPTIONAL,\n      communities            [1] CommunityIdentifierList\
    \ OPTIONAL,\n      tampSeqNumbers         [2] TAMPSequenceNumbers OPTIONAL }\n\
    \    TrustAnchorChoiceList ::= SEQUENCE SIZE (1..MAX) OF\n        TrustAnchorChoice\n\
    \    TAMPSequenceNumbers ::= SEQUENCE SIZE (1..MAX) OF TAMPSequenceNumber\n  \
    \  TAMPSequenceNumber ::= SEQUENCE {\n      keyId       KeyIdentifier,\n     \
    \ seqNumber   SeqNumber }\n   The fields of TAMPStatusResponse are used as follows:\n\
    \   o  version identifies version of TAMP.  For this version of the\n      specification,\
    \ the default value, v2, MUST be used.\n   o  query identifies the TAMPStatusQuery\
    \ to which the trust anchor\n      store is responding.  The query structure repeats\
    \ the TAMPMsgRef\n      from the TAMP Status Query message (see Section 4.1).\
    \  The\n      sequence number processing described in Section 6 MUST\n      successfully\
    \ complete before any response is returned.\n   o  response contains either a\
    \ terse response or a verbose response.\n      The terse response is represented\
    \ by TerseStatusResponse, and the\n      verbose response is represented by VerboseStatusResponse.\n\
    \   o  usesApex is a Boolean value that indicates whether the first item\n   \
    \   in the TerseStatusResponse.taKeyIds or\n      VerboseStatusResponse.taInfo\
    \ field identifies the apex TA.\n   The fields of TerseStatusResponse are used\
    \ as follows:\n   o  taKeyIds contains a sequence of key identifiers.  Each trust\n\
    \      anchor contained in the trust anchor store is represented by one\n    \
    \  key identifier.  When TAMPStatusResponse.usesApex is TRUE, the\n      apex\
    \ trust anchor is represented by the first key identifier in\n      the sequence,\
    \ which contains the key identifier of the operational\n      public key.\n  \
    \ o  communities is OPTIONAL.  When present, it contains a sequence of\n     \
    \ object identifiers.  Each object identifier names one community to\n      which\
    \ this trust anchor store belongs.  When the trust anchor\n      store belongs\
    \ to no communities, this field is omitted.\n   The fields of VerboseStatusResponse\
    \ are used as follows:\n   o  taInfo contains a sequence of TrustAnchorChoice\
    \ structures.  One\n      entry in the sequence is provided for each trust anchor\
    \ contained\n      in the trust anchor store.  When TAMPStatusResponse.usesApex\
    \ is\n      TRUE, the apex trust anchor is the first trust anchor in the\n   \
    \   sequence.\n   o  continPubKeyDecryptAlg is OPTIONAL.  When present, it indicates\n\
    \      the decryption algorithm needed to decrypt the currently installed\n  \
    \    apex trust anchor contingency public key, if a contingency key is\n     \
    \ associated with the apex trust anchor.  When present,\n      TAMPStatusResponse.usesApex\
    \ MUST be TRUE.\n   o  communities is OPTIONAL.  When present, it contains a sequence\
    \ of\n      object identifiers.  Each object identifier names one community to\n\
    \      which this trust anchor store belongs.  When the trust anchor\n      store\
    \ belongs to no communities, this field is omitted.\n   o  tampSeqNumbers is OPTIONAL.\
    \  When present, it is used to indicate\n      the currently held sequence number\
    \ for each trust anchor\n      authorized to sign TAMP messages.  The keyId field\
    \ identifies the\n      trust anchor, and the seqNumber field provides the current\n\
    \      sequence number associated with the trust anchor.\n"
- title: 4.3.  Trust Anchor Update
  contents:
  - "4.3.  Trust Anchor Update\n   The Trust Anchor Update message is used to add,\
    \ remove, and change\n   management and identity trust anchors.  The Trust Anchor\
    \ Update\n   message cannot be used to update the apex trust anchor.  The Trust\n\
    \   Anchor Update message MUST be signed.  For a Trust Anchor Update\n   message\
    \ to be valid, the trust anchor store MUST be an intended\n   recipient of the\
    \ update; the sequence number checking described in\n   Section 6 MUST be successful\
    \ when the TAMP message signer is a trust\n   anchor; and the digital signature\
    \ MUST be validated using the apex\n   trust anchor operational public key, an\
    \ authorized management trust\n   anchor, or via an authorized X.509 certification\
    \ path originating\n   with such a trust anchor.\n   If the digital signature\
    \ on the Trust Anchor Update message is valid,\n   sequence number checking is\
    \ successful, the signer is authorized, and\n   the trust anchor store is an intended\
    \ recipient of the TAMP message,\n   then the trust anchor store MUST perform\
    \ the specified updates and\n   return a Trust Anchor Update Confirm message.\
    \  If a Trust Anchor\n   Update Confirm message is not returned, then a TAMP Error\
    \ message\n   SHOULD be returned.\n   The Trust Anchor Update content type has\
    \ the following syntax:\n    tamp-update CONTENT-TYPE  ::=\n       { TAMPUpdate\
    \ IDENTIFIED BY id-ct-TAMP-update }\n    id-ct-TAMP-update OBJECT IDENTIFIER ::=\
    \ { id-tamp 3 }\n    TAMPUpdate ::= SEQUENCE {\n      version  [0] TAMPVersion\
    \ DEFAULT v2,\n      terse    [1] TerseOrVerbose DEFAULT verbose,\n      msgRef\
    \   TAMPMsgRef,\n      updates  SEQUENCE SIZE (1..MAX) OF TrustAnchorUpdate,\n\
    \      tampSeqNumbers [2]TAMPSequenceNumbers OPTIONAL }\n    TrustAnchorUpdate\
    \ ::= CHOICE {\n      add     [1] TrustAnchorChoice,\n      remove  [2] SubjectPublicKeyInfo,\n\
    \      change  [3] EXPLICIT TrustAnchorChangeInfoChoice }\n    TrustAnchorChangeInfoChoice\
    \ ::= CHOICE {\n      tbsCertChange  [0] TBSCertificateChangeInfo,\n      taChange\
    \       [1] TrustAnchorChangeInfo }\n    TBSCertificateChangeInfo  ::=  SEQUENCE\
    \  {\n      serialNumber         CertificateSerialNumber OPTIONAL,\n      signature\
    \            [0] AlgorithmIdentifier OPTIONAL,\n      issuer               [1]\
    \ Name OPTIONAL,\n      validity             [2] Validity OPTIONAL,\n      subject\
    \              [3] Name OPTIONAL,\n      subjectPublicKeyInfo [4] SubjectPublicKeyInfo,\n\
    \      exts                 [5] EXPLICIT Extensions OPTIONAL }\n    TrustAnchorChangeInfo\
    \ ::= SEQUENCE {\n      pubKey          SubjectPublicKeyInfo,\n      keyId   \
    \        KeyIdentifier OPTIONAL,\n      taTitle         TrustAnchorTitle OPTIONAL,\n\
    \      certPath        CertPathControls OPTIONAL,\n      exts            [1] Extensions\
    \ OPTIONAL }\n   The fields of TAMPUpdate are used as follows:\n   o  version\
    \ identifies version of TAMP.  For this version of the\n      specification, the\
    \ default value, v2, MUST be used.\n   o  terse indicates the type of response\
    \ that is desired.  A terse\n      response is indicated by a value of 1, and\
    \ a verbose response is\n      indicated by a value of 2, which is omitted during\
    \ encoding since\n      it is the default value.\n   o  msgRef contains two items:\
    \ the target and the seqNum.  target\n      identifies the target(s) of the update\
    \ message.  The\n      TargetIdentifier syntax is described in Section 4.1.  seqNum\
    \ is a\n      single-use value that will be used to match the Trust Anchor\n \
    \     Update message with the Trust Anchor Update Confirm message.  The\n    \
    \  sequence number is also used to detect TAMP message replay.  The\n      sequence\
    \ number processing described in Section 6 MUST\n      successfully complete before\
    \ any of the updates are processed.\n   o  updates contains a sequence of updates,\
    \ which are used to add,\n      remove, and change management or identity trust\
    \ anchors.  Each\n      entry in the sequence represents one of these actions,\
    \ and is\n      indicated by an instance of TrustAnchorUpdate.  The actions are\
    \ a\n      batch of updates that MUST be processed in the order that they\n  \
    \    appear, but each of the updates is processed independently.  Each\n     \
    \ of the updates MUST satisfy the subordination checks described in\n      Section\
    \ 7.  Even if one or more of the updates fail, then the\n      remaining updates\
    \ MUST be processed.  These updates MUST NOT make\n      any changes to the apex\
    \ trust anchor.\n   o  tampSeqNumbers MAY be included to provide the initial or\
    \ new\n      sequence numbers for trust anchors added or changed by the updates\n\
    \      field.  Elements included in the tampSeqNumbers field that do not\n   \
    \   correspond to an element in the updates field are ignored.\n      Elements\
    \ included in the tampSeqNumbers field that do correspond\n      to an element\
    \ in the updates field and contain a sequence number\n      less than or equal\
    \ to the most recently stored sequence number for\n      the trust anchor are\
    \ ignored.  Elements included in the\n      tampSeqNumbers field that do correspond\
    \ to an element in the\n      updates field and contain a sequence number greater\
    \ than the most\n      recently stored sequence number for the indicated trust\
    \ anchor are\n      processed by setting the stored sequence number for the trust\n\
    \      anchor equal to the new value.\n   The TrustAnchorUpdate is a choice of\
    \ three structures, and each\n   alternative represents one of the three possible\
    \ actions: add,\n   remove, and change.  A description of the syntax associated\
    \ with each\n   of these actions follows:\n   o  add is used to insert a new management\
    \ or identity trust anchor\n      into the trust anchor store.  The TrustAnchorChoice\
    \ structure is\n      used to provide the trusted public key and all of the information\n\
    \      associated with it.  However, the action MUST fail with the error\n   \
    \   code notAuthorized if the subordination checks described in\n      Section\
    \ 7 are not satisfied.  See Section 3 for a discussion of\n      the TrustAnchorChoice\
    \ structure.  The apex trust anchor cannot be\n      introduced into a trust anchor\
    \ store using this action; therefore,\n      the id-pe-wrappedApexContinKey MUST\
    \ NOT be present in the\n      extensions field.  The constraints of the existing\
    \ trust anchors\n      are unchanged by this action.  An attempt to add a management\
    \ or\n      identity trust anchor that is already in place with the same\n   \
    \   values for every field in the TrustAnchorChoice structure MUST be\n      treated\
    \ as a successful addition.  An attempt to add a management\n      or identity\
    \ trust anchor that is already present with the same\n      pubKey values, but\
    \ with different values for any of the fields in\n      the TrustAnchorChoice\
    \ structure, MUST fail with the error code\n      improperTAAddition.  This means\
    \ a trust anchor may not be added\n      twice using different TrustAnchorChoice\
    \ options.  If a different\n      format is desired, the existing trust anchor\
    \ must be removed and\n      the new format added.\n   o  remove is used to delete\
    \ an existing management or identity trust\n      anchor from the trust anchor\
    \ store, including the deletion of the\n      management trust anchor associated\
    \ with the TAMP message signer.\n      However, the action MUST fail with the\
    \ error code notAuthorized if\n      the subordination checks described in Section\
    \ 7 are not satisfied.\n      The public key contained in SubjectPublicKeyInfo\
    \ names the\n      management or identity trust anchor to be deleted.  An attempt\
    \ to\n      delete a trust anchor that is not present MUST be treated as a\n \
    \     successful deletion.  The constraints of the deleted trust anchor\n    \
    \  are not distributed to other trust anchors in any manner.  The\n      apex\
    \ trust anchor cannot be removed using this action, which\n      ensures that\
    \ this action cannot place the trust anchor store in an\n      unrecoverable configuration.\n\
    \   o  change is used to update the information associated with an\n      existing\
    \ management or identity trust anchor in the trust anchor\n      store.  Attempts\
    \ to change a trust anchor added as a Certificate\n      MUST fail with the error\
    \ code improperTAChange.  The public key\n      contained in the SubjectPublicKeyInfo\
    \ field of\n      TrustAnchorChangeInfo or in the subjectPublicKeyInfo field of\
    \ a\n      TBSCertificateChangeInfo names the to-be-updated trust anchor.\n  \
    \    However, the action MUST fail with the error code notAuthorized if\n    \
    \  the subordination checks described in Section 7 are not satisfied.\n      An\
    \ attempt to change a trust anchor that is not present MUST\n      result in a\
    \ failure with the trustAnchorNotFound status code.  The\n      TrustAnchorChangeInfo\
    \ structure or the TBSCertificateChangeInfo\n      structure is used to provide\
    \ the revised configuration of the\n      management or identity trust anchor.\
    \  If the update fails for any\n      reason, then the original trust anchor configuration\
    \ MUST be\n      preserved.  The apex trust anchor information cannot be changed\n\
    \      using this action.  Attempts to change a trust anchor added as a\n    \
    \  TBSCertificate using a TrustAnchorChangeInfo MUST fail with an\n      improperTAChange\
    \ error.  Attempts to change a trust anchor added\n      as a TrustAnchorInfo\
    \ using a TBSCertificateChangeInfo MUST fail\n      with an improperTAChange error.\n\
    \   The fields of TrustAnchorChangeInfo are used as follows:\n   o  pubKey contains\
    \ the algorithm identifier and the public key of the\n      management or identity\
    \ trust anchor.  It is used to locate the\n      to-be-updated trust anchor in\
    \ the trust anchor store.\n   o  keyId is OPTIONAL, and when present, it contains\
    \ the public key\n      identifier of the trust anchor public key, which is contained\
    \ in\n      the pubKey field.  If this field is not present, then the public\n\
    \      key identifier remains unchanged.  If this field is present, the\n    \
    \  provided public key identifier replaces the previous one.\n   o  taTitle is\
    \ OPTIONAL, and when present, it provides a human\n      readable name for the\
    \ management or identity trust anchor.  When\n      absent in a change trust anchor\
    \ update, any title that was\n      previously associated with the trust anchor\
    \ is removed.\n      Similarly, when present in a change trust anchor update,\
    \ the title\n      in the message is associated with the trust anchor.  If a previous\n\
    \      title was associated with the trust anchor, then the title is\n      replaced.\
    \  If a title was not previously associated with the trust\n      anchor, then\
    \ the title from the update message is added.\n   o  certPath is OPTIONAL, and\
    \ when present, it provides the controls\n      needed to construct and validate\
    \ an X.509 certification path.\n      When absent in a change trust anchor update,\
    \ any controls that\n      were previously associated with the management or identity\
    \ trust\n      anchor are removed, which means that delegation is no longer\n\
    \      permitted.  Similarly, when present in a change trust anchor\n      update,\
    \ the controls in the message are associated with the\n      management or identity\
    \ trust anchor.  If previous controls,\n      including the trust anchor distinguished\
    \ name, were associated\n      with the trust anchor, then the controls are replaced,\
    \ which means\n      that delegation continues to be supported, but that different\n\
    \      certification paths will be valid.  If controls were not\n      previously\
    \ associated with the management or identity trust\n      anchor, then the controls\
    \ from the update message are added, which\n      enables delegation.  The syntax\
    \ and semantics of CertPathControls\n      are discussed in [RFC5914].\n   o \
    \ exts is OPTIONAL, and when present, it provides the extensions\n      values\
    \ that are associated with the trust anchor.  When absent in\n      a change trust\
    \ anchor update, any extensions that were previously\n      associated with the\
    \ trust anchor are removed.  Similarly, when\n      present in a change trust\
    \ anchor update, the extensions in the\n      message are associated with the\
    \ trust anchor.  Any extensions\n      previously associated with the trust anchor\
    \ are replaced or\n      removed.\n   The fields of TBSCertificateChangeInfo are\
    \ used to alter the fields\n   within a TBSCertificate structure.  TBSCertificate\
    \ is described in\n   [RFC5280].  For all fields except exts, if the field is\
    \ absent in a\n   change trust anchor update, then any previous value associated\
    \ with a\n   trust anchor is unchanged.  For the exts field, if the field is\n\
    \   absent in a change trust anchor update, then any previous value\n   associated\
    \ with a trust anchor is removed.  For all fields, if the\n   field is present\
    \ in a change trust anchor update, then any previous\n   value associated with\
    \ a trust anchor is replaced with the value from\n   the update message.\n"
- title: 4.3.1.  Trust Anchor List
  contents:
  - "4.3.1.  Trust Anchor List\n   [RFC5914] defines the TrustAnchorList structure\
    \ to convey a list of\n   trust anchors.  TAMP implementations MAY process TrustAnchorList\n\
    \   objects (with eContentType (or contentType) using the id-ct-\n   trustAnchorList\
    \ OID defined in [RFC5914]) as equivalent to TAMPUpdate\n   objects with terse\
    \ set to terse, msgRef set to allModules (with a\n   suitable sequence number),\
    \ and all elements within the list contained\n   within the add field.  This alternative\
    \ to TrustAnchorUpdate is\n   provided for implementations that perform integrity\
    \ and authorization\n   checks out-of-band as a simple means of transferring trust\
    \ anchors\n   from one trust anchor store to another.  It does not provide a means\n\
    \   of removing or changing trust anchors and has no HTTP binding.\n"
- title: 4.4.  Trust Anchor Update Confirm
  contents:
  - "4.4.  Trust Anchor Update Confirm\n   The Trust Anchor Update Confirm message\
    \ is a reply by a trust anchor\n   store to a valid Trust Anchor Update message.\
    \  The Trust Anchor\n   Update Confirm message provides success and failure information\
    \ for\n   each of the requested updates.  The Trust Anchor Update Confirm\n  \
    \ message MAY be signed or unsigned.  A Trust Anchor Update Confirm\n   message\
    \ MUST be signed if the implementation is capable of\n   signing it.\n   The Trust\
    \ Anchor Update Confirm content type has the following\n   syntax:\n    tamp-update-confirm\
    \ CONTENT-TYPE  ::=\n       { TAMPUpdateConfirm IDENTIFIED BY id-ct-TAMP-updateConfirm\
    \ }\n    id-ct-TAMP-updateConfirm OBJECT IDENTIFIER ::= { id-tamp 4 }\n    TAMPUpdateConfirm\
    \ ::= SEQUENCE {\n      version  [0] TAMPVersion DEFAULT v2,\n      update   TAMPMsgRef,\n\
    \      confirm  UpdateConfirm }\n    UpdateConfirm ::= CHOICE {\n      terseConfirm\
    \    [0] TerseUpdateConfirm,\n      verboseConfirm  [1] VerboseUpdateConfirm }\n\
    \    TerseUpdateConfirm ::= StatusCodeList\n    StatusCodeList ::= SEQUENCE SIZE\
    \ (1..MAX) OF StatusCode\n    VerboseUpdateConfirm ::= SEQUENCE {\n      status\
    \          StatusCodeList,\n      taInfo          TrustAnchorChoiceList,\n   \
    \   tampSeqNumbers  TAMPSequenceNumbers OPTIONAL,\n      usesApex        BOOLEAN\
    \ DEFAULT TRUE }\n   The fields of TAMPUpdateConfirm are used as follows:\n  \
    \ o  version identifies version of TAMP.  For this version of the\n      specification,\
    \ the default value, v2, MUST be used.\n   o  update identifies the TAMPUpdate\
    \ message to which the trust anchor\n      store is responding.  The update structure\
    \ repeats the TAMPMsgRef\n      from the Trust Anchor Update message (see Section\
    \ 4.3).  The\n      sequence number processing described in Section 6 MUST\n \
    \     successfully complete before any of the updates are processed.\n   o  confirm\
    \ contains either a terse update confirmation or a verbose\n      update confirmation.\
    \  The terse update confirmation is represented\n      by TerseUpdateConfirm,\
    \ and the verbose response is represented by\n      VerboseUpdateConfirm.\n  \
    \ The TerseUpdateConfirm contains a sequence of status codes, one for\n   each\
    \ TrustAnchorUpdate structure in the Trust Anchor Update message.\n   The status\
    \ codes MUST appear in the same order as the\n   TrustAnchorUpdate structures\
    \ to which they apply, and the number of\n   elements in the status code list\
    \ MUST be the same as the number of\n   elements in the trust anchor update list.\
    \  Each of the status codes\n   is discussed in Section 5.\n   The fields of VerboseUpdateConfirm\
    \ are used as follows:\n   o  status contains a sequence of status codes, one\
    \ for each\n      TrustAnchorUpdate structure in the Trust Anchor Update message.\n\
    \      The status codes appear in the same order as the TrustAnchorUpdate\n  \
    \    structures to which they apply, and the number of elements in the\n     \
    \ status code list MUST be the same as the number of elements in the\n      trust\
    \ anchor update list.  Each of the status codes is discussed\n      in Section\
    \ 5.\n   o  taInfo contains a sequence of TrustAnchorChoice structures.  One\n\
    \      entry in the sequence is provided for each trust anchor contained\n   \
    \   in the trust anchor store.  These represent the state of the trust\n     \
    \ anchors after the updates have been processed.  When usesApex is\n      true,\
    \ the apex trust anchor is the first trust anchor in the\n      sequence.\n  \
    \ o  tampSeqNumbers is used to indicate the currently held sequence\n      number\
    \ for each trust anchor authorized to sign TAMP messages.\n      The keyId field\
    \ identifies the trust anchor, and the seqNumber\n      field provides the current\
    \ sequence number associated with the\n      trust anchor.\n   o  usesApex is\
    \ a Boolean value that indicates whether the first item\n      in the taInfo field\
    \ identifies the apex TA.\n"
- title: 4.5.  Apex Trust Anchor Update
  contents:
  - "4.5.  Apex Trust Anchor Update\n   The Apex Trust Anchor Update message replaces\
    \ the operational public\n   key and, optionally, the contingency public key associated\
    \ with the\n   apex trust anchor.  Each trust anchor store has exactly one apex\n\
    \   trust anchor.  No constraints are associated with the apex trust\n   anchor.\
    \  The public key identifier of the operational public key is\n   used to identify\
    \ the apex trust anchor in subsequent TAMP messages.\n   The digital signature\
    \ on the Apex Trust Anchor Update message is\n   validated with either the current\
    \ operational public key or the\n   current contingency public key.  For the Apex\
    \ Trust Anchor Update\n   message that is validated with the operational public\
    \ key to be\n   valid, the trust anchor store MUST be a target of the update,\
    \ the\n   sequence number MUST be larger than the most recently stored sequence\n\
    \   number for the operational public key, and the digital signature MUST\n  \
    \ be validated directly with the operational public key.  That is, no\n   delegation\
    \ via a certification path is permitted.  For the Apex Trust\n   Anchor Update\
    \ message that is validated with the contingency public\n   key to be valid, the\
    \ trust anchor store MUST be a target of the\n   update, the provided decryption\
    \ key MUST properly decrypt the\n   contingency public key, and the digital signature\
    \ MUST be validated\n   directly with the decrypted contingency public key.  Again,\
    \ no\n   delegation via a certification path is permitted.\n   If the Apex Trust\
    \ Anchor Update message is validated using the\n   operational public key, then\
    \ sequence number processing is handled\n   normally, as described in Section\
    \ 6.  If the Apex Trust Anchor Update\n   message is validated using the contingency\
    \ public key, then the\n   TAMPMsgRef sequence number MUST contain a zero value.\
    \  A sequence\n   number for subsequent messages that will be validated with the\
    \ new\n   operational public key can optionally be provided.  If no value is\n\
    \   provided, then the trust anchor store MUST be prepared to accept any\n   sequence\
    \ number in the next TAMP message validated with the newly\n   installed apex\
    \ trust anchor operational public key.  If the Apex\n   Trust Anchor Update message\
    \ is valid and the clearTrustAnchors flag\n   is set to TRUE, then all of the\
    \ management and identity trust anchors\n   stored in the trust anchor store MUST\
    \ be deleted.  That is, the new\n   apex trust anchor MUST be the only trust anchor\
    \ remaining in the\n   trust anchor store.  If the Apex Trust Anchor Update message\
    \ is valid\n   and the clearCommunities flag is set to TRUE, then all community\n\
    \   identifiers stored in the trust anchor store MUST be deleted.\n   The SignedData\
    \ structure includes a SignerInfo.sid value, and it\n   identifies the apex trust\
    \ anchor public key that will be used to\n   validate the digital signature on\
    \ this TAMP message.  The public key\n   identifier for the operational public\
    \ key is known in advance, and it\n   is stored as part of the apex trust anchor.\
    \  The public key\n   identifier for the contingency public key is not known in\
    \ advance;\n   however, the presence of the unsigned attribute containing the\n\
    \   symmetric key needed to decrypt the contingency public key\n   unambiguously\
    \ indicates that the TAMP message signer used the\n   contingency private key\
    \ to sign the Apex Trust Anchor Update message.\n   If the digital signature on\
    \ the Apex Trust Anchor Update message is\n   valid using either the apex trust\
    \ anchor operational public key or\n   the apex trust anchor contingency public\
    \ key, sequence number\n   checking is successful, and the trust anchor store\
    \ is an intended\n   recipient of the TAMP message, then the trust anchor store\
    \ MUST\n   update the apex trust anchor and return an Apex Trust Anchor Update\n\
    \   Confirm message.  If an Apex Trust Anchor Update Confirm message is\n   not\
    \ returned, then a TAMP Error message SHOULD be returned.  Note\n   that the sequence\
    \ number MUST be zero if the Apex Trust Anchor Update\n   message is validated\
    \ with the apex trust anchor contingency public\n   key.\n   The Apex Trust Anchor\
    \ Update content type has the following syntax:\n    tamp-apex-update CONTENT-TYPE\
    \  ::=\n       { TAMPApexUpdate IDENTIFIED BY id-ct-TAMP-apexUpdate }\n    id-ct-TAMP-apexUpdate\
    \ OBJECT IDENTIFIER ::= { id-tamp 5 }\n    TAMPApexUpdate ::= SEQUENCE {\n   \
    \   version            [0] TAMPVersion DEFAULT v2,\n      terse              [1]\
    \ TerseOrVerbose DEFAULT verbose,\n      msgRef             TAMPMsgRef,\n    \
    \  clearTrustAnchors  BOOLEAN,\n      clearCommunities   BOOLEAN,\n      seqNumber\
    \          SeqNumber OPTIONAL,\n      apexTA             TrustAnchorChoice }\n\
    \   The fields of TAMPApexUpdate are used as follows:\n   o  version identifies\
    \ version of TAMP.  For this version of the\n      specification, the default\
    \ value, v2, MUST be used.\n   o  terse indicates the type of response that is\
    \ desired.  A terse\n      response is indicated by a value of 1, and a verbose\
    \ response is\n      indicated by a value of 2, which is omitted during encoding\
    \ since\n      it is the default value.\n   o  msgRef contains two items: the\
    \ target and the seqNum.  target\n      identifies the target(s) of the Apex Trust\
    \ Anchor Update message.\n      The TargetIdentifier syntax as described in Section\
    \ 4.1 is used.\n      seqNum is a single-use value that will be used to match\
    \ the Apex\n      Trust Anchor Update message with the Apex Trust Anchor Update\n\
    \      Confirm message.  The sequence number is also used to detect TAMP\n   \
    \   message replay if the message is validated with the apex trust\n      anchor\
    \ operational public key.  The sequence number processing\n      described in\
    \ Section 6 MUST successfully complete before any\n      action is taken.  However,\
    \ seqNum MUST contain a zero value if the\n      message is validated with the\
    \ apex trust anchor contingency\n      public key.\n   o  clearTrustAnchors is\
    \ a Boolean.  If the value is set to TRUE, then\n      all of the management and\
    \ identity trust anchors stored in the\n      trust anchor store MUST be deleted,\
    \ leaving the newly installed\n      apex trust anchor as the only trust anchor\
    \ in the trust anchor\n      store.  If the value is set to FALSE, the other trust\
    \ anchors MUST\n      NOT be changed.\n   o  clearCommunities is a Boolean.  If\
    \ the value is set to TRUE, then\n      all of the community identifiers stored\
    \ in the trust anchor store\n      MUST be deleted, leaving none.  If the value\
    \ is set to FALSE, the\n      list of community identifiers MUST NOT be changed.\n\
    \   o  seqNumber is OPTIONAL, and when present, it provides the initial\n    \
    \  sequence number for the apex trust anchor.  If seqNumber is\n      absent,\
    \ the trust anchor store is prepared to accept any sequence\n      number value\
    \ for the apex trust anchor operational public key.\n   o  apexTA provides the\
    \ information for the replacement apex trust\n      anchor.  The TrustAnchorChoice\
    \ structure is used to provide the\n      trusted public key and all of the information\
    \ associated with it.\n      The pubKey, keyId, taTitle, certPath, and exts fields\
    \ apply to the\n      operational public key of the apex trust anchor.  The\n\
    \      ApexTrustAnchorInfo certificate extension MAY appear as an\n      extension.\
    \  Section 9 describes the WrappedApexContingencyKey\n      certificate extension.\n"
- title: 4.6.  Apex Trust Anchor Update Confirm
  contents:
  - "4.6.  Apex Trust Anchor Update Confirm\n   The Apex Trust Anchor Update Confirm\
    \ message is a reply by a trust\n   anchor store to a valid Apex Trust Anchor\
    \ Update message.  The Apex\n   Trust Anchor Update Confirm message provides success\
    \ or failure\n   information for the apex trust anchor update.  The Apex Trust\
    \ Anchor\n   Update Confirm message MAY be signed or unsigned.  An Apex Trust\n\
    \   Anchor Update Confirm message MUST be signed if the trust anchor\n   store\
    \ is capable of signing it.\n   The Apex Trust Anchor Update Confirm content type\
    \ has the following\n   syntax:\n    tamp-apex-update-confirm CONTENT-TYPE  ::=\n\
    \       { TAMPApexUpdateConfirm IDENTIFIED BY\n         id-ct-TAMP-apexUpdateConfirm\
    \ }\n    id-ct-TAMP-apexUpdateConfirm OBJECT IDENTIFIER ::= { id-tamp 6 }\n  \
    \  TAMPApexUpdateConfirm ::= SEQUENCE {\n      version      [0] TAMPVersion DEFAULT\
    \ v2,\n      apexReplace  TAMPMsgRef,\n      apexConfirm  ApexUpdateConfirm }\n\
    \    ApexUpdateConfirm ::= CHOICE {\n      terseApexConfirm    [0] TerseApexUpdateConfirm,\n\
    \      verboseApexConfirm  [1] VerboseApexUpdateConfirm }\n    TerseApexUpdateConfirm\
    \ ::= StatusCode\n    VerboseApexUpdateConfirm ::= SEQUENCE {\n      status  \
    \               StatusCode,\n      taInfo                 TrustAnchorChoiceList,\n\
    \      communities            [0] CommunityIdentifierList OPTIONAL,\n      tampSeqNumbers\
    \         [1] TAMPSequenceNumbers OPTIONAL }\n   The fields of TAMPApexUpdateConfirm\
    \ are used as follows:\n   o  version identifies version of TAMP.  For this version\
    \ of the\n      specification, the default value, v2, MUST be used.\n   o  apexReplace\
    \ identifies the Apex Trust Anchor Update message to\n      which the trust anchor\
    \ store is responding.  The apexReplace\n      structure repeats the TAMPMsgRef\
    \ from the beginning of the Apex\n      Trust Anchor Update message (see Section\
    \ 4.5).  When the Apex\n      Trust Anchor Update message is validated with the\
    \ operational\n      public key, the sequence number processing described in Section\
    \ 6\n      MUST successfully complete before an Apex Trust Anchor Update\n   \
    \   Confirm message is generated.  When the Apex Trust Anchor Update\n      message\
    \ is validated with the contingency public key, normal\n      sequence number\
    \ processing is ignored, but the seqNum MUST be\n      zero.\n   o  apexConfirm\
    \ contains either a terse update confirmation or a\n      verbose update confirmation.\
    \  The terse update confirmation is\n      represented by TerseApexUpdateConfirm,\
    \ and the verbose response is\n      represented by VerboseApexUpdateConfirm.\n\
    \   The TerseApexUpdateConfirm contains a single status code, indicating\n   the\
    \ success or failure of the apex trust anchor update.  If the apex\n   trust anchor\
    \ update failed, then the status code provides the reason\n   for the failure.\
    \  Each of the status codes is discussed in Section 5.\n   The fields of VerboseApexUpdateConfirm\
    \ are used as follows:\n   o  status contains a single status code, indicating\
    \ the success or\n      failure of the apex trust anchor update.  If the apex\
    \ trust anchor\n      update failed, then the status code provides the reason\
    \ for the\n      failure.  Each of the status codes is discussed in Section 5.\n\
    \   o  taInfo contains a sequence of TrustAnchorChoice structures.  One\n    \
    \  entry in the sequence is provided for each trust anchor contained\n      in\
    \ the trust anchor store.  These represent the state of the trust\n      anchors\
    \ after the apex trust anchor update has been processed.\n      See [RFC5914]\
    \ for a description of the TrustAnchorInfo structure.\n      The apex trust anchor\
    \ is the first trust anchor in the sequence.\n   o  communities is OPTIONAL. \
    \ When present, it contains a sequence of\n      object identifiers.  Each object\
    \ identifier names one community to\n      which this trust anchor store belongs.\
    \  When the trust anchor\n      store belongs to no communities, this field is\
    \ omitted.\n   o  tampSeqNumbers is used to indicate the currently held sequence\n\
    \      number for each trust anchor authorized to sign TAMP messages.\n      The\
    \ keyId field identifies the trust anchor, and the seqNumber\n      field provides\
    \ the current sequence number associated with the\n      trust anchor.\n"
- title: 4.7.  Community Update
  contents:
  - "4.7.  Community Update\n   The trust anchor store maintains a list of identifiers\
    \ for the\n   communities of which it is a member.  The Community Update message\n\
    \   can be used to remove or add community identifiers from this list.\n   The\
    \ Community Update message MUST be signed.  For the Community\n   Update message\
    \ to be valid, the trust anchor store MUST be a target\n   of the update; the\
    \ sequence number checking described in Section 6\n   MUST be successful when\
    \ the TAMP message signer is a trust anchor;\n   and the digital signature MUST\
    \ be validated by the apex trust anchor\n   operational public key, an authorized\
    \ management trust anchor, or via\n   an authorized X.509 certification path originating\
    \ with such a trust\n   anchor.\n   If the trust anchor store supports the Community\
    \ Update message, the\n   digital signature on the Community Update message is\
    \ valid, sequence\n   number checking is successful, the signer is authorized,\
    \ and the\n   trust anchor store is an intended recipient of the TAMP message,\
    \ then\n   the trust anchor store MUST make the specified updates and return a\n\
    \   Community Update Confirm message.  If a Community Update Confirm\n   message\
    \ is not returned, then a TAMP Error message SHOULD be\n   returned.\n   The Community\
    \ Update message contains a batch of updates, and all of\n   the updates MUST\
    \ be accepted for the trust anchor store to return a\n   successful Community\
    \ Update Confirm message.  The remove updates, if\n   present, MUST be processed\
    \ before the add updates.  Where remove is\n   present with an empty list, all\
    \ community identifiers MUST be\n   removed.  This approach prevents community\
    \ identifiers that are\n   intended to be mutually exclusive from being installed\
    \ by a\n   successful addition and a failed removal.  Where add is present, at\n\
    \   least one community identifier MUST appear in the list.\n   The Community\
    \ Update content type has the following syntax:\n    tamp-community-update CONTENT-TYPE\
    \  ::=\n       { TAMPCommunityUpdate IDENTIFIED BY id-ct-TAMP-communityUpdate\
    \ }\n    id-ct-TAMP-communityUpdate OBJECT IDENTIFIER ::= { id-tamp 7 }\n    TAMPCommunityUpdate\
    \ ::= SEQUENCE {\n      version  [0] TAMPVersion DEFAULT v2,\n      terse    [1]\
    \ TerseOrVerbose DEFAULT verbose,\n      msgRef   TAMPMsgRef,\n      updates \
    \ CommunityUpdates }\n    CommunityUpdates ::= SEQUENCE {\n      remove     [1]\
    \ CommunityIdentifierList OPTIONAL,\n      add        [2] CommunityIdentifierList\
    \ OPTIONAL }\n       -- At least one MUST be present\n   The fields of TAMPCommunityUpdate\
    \ are used as follows:\n   o  version identifies version of TAMP.  For this version\
    \ of the\n      specification, the default value, v2, MUST be used.\n   o  terse\
    \ indicates the type of response that is desired.  A terse\n      response is\
    \ indicated by a value of 1, and a verbose response is\n      indicated by a value\
    \ of 2, which is omitted during encoding since\n      it is the default value.\n\
    \   o  msgRef contains two items: the target and the seqNum.  target\n      identifies\
    \ the target(s) of the update message.  The\n      TargetIdentifier syntax as\
    \ described in Section 4.1 is used.\n      seqNum is a single-use value that will\
    \ be used to match the\n      Community Update message with the Community Update\
    \ Confirm\n      message.  The sequence number is also used to detect TAMP message\n\
    \      replay.  The sequence number processing described in Section 6\n      MUST\
    \ successfully complete before any of the updates are\n      processed.\n   o\
    \  updates contains a sequence of community identifiers to be removed\n      and\
    \ a sequence of community identifiers to be added.  These are\n      represented\
    \ by the CommunityUpdates structure.\n   The CommunityUpdates is a sequence of\
    \ two OPTIONAL sequences, but at\n   least one of these sequences MUST be present.\
    \  The first sequence\n   contains community identifiers to be removed, and if\
    \ there are none,\n   it is absent.  Where remove is present with an empty list,\
    \ all\n   community identifiers MUST be removed.  The second sequence contains\n\
    \   community identifiers to be added, and if there are none, it is\n   absent.\
    \  The remove updates, if present, MUST be processed before the\n   add updates.\
    \  An error is generated if any of the requested removals\n   or additions cannot\
    \ be accomplished.  However, requests to remove\n   community identifiers that\
    \ are not present are treated as successful\n   removals.  Likewise, requests\
    \ to add community identifiers that are\n   already present are treated as successful\
    \ additions.  If an error is\n   generated, the trust anchor store community list\
    \ MUST NOT be changed.\n   A description of the syntax associated with each of\
    \ these actions\n   follows:\n   o  remove is used to remove one, multiple, or\
    \ all community\n      identifiers from the trust anchor store.\n   o  add is\
    \ used to insert one or more new community identifiers into\n      the trust anchor\
    \ store.\n"
- title: 4.8.  Community Update Confirm
  contents:
  - "4.8.  Community Update Confirm\n   The Community Update Confirm message is a\
    \ reply by a trust anchor\n   store to a valid Community Update message.  The\
    \ Community Update\n   Confirm message provides success or failure information\
    \ for the\n   requested updates.  Success is returned only if the whole batch\
    \ of\n   updates is successfully processed.  If any of the requested updates\n\
    \   cannot be performed, then a failure is indicated, and the set of\n   community\
    \ identifiers stored in the trust anchor store is unchanged.\n   The Community\
    \ Update Confirm message MAY be signed or unsigned.  A\n   Community Update Confirm\
    \ message MUST be signed if the trust anchor\n   store is capable of signing it.\n\
    \   The Community Update Confirm content type has the following syntax:\n    tamp-community-update-confirm\
    \ CONTENT-TYPE  ::=\n       { TAMPCommunityUpdateConfirm IDENTIFIED BY\n     \
    \    id-ct-TAMP-communityUpdateConfirm }\n    id-ct-TAMP-communityUpdateConfirm\
    \ OBJECT IDENTIFIER ::=\n       { id-tamp 8 }\n    TAMPCommunityUpdateConfirm\
    \ ::= SEQUENCE {\n      version      [0] TAMPVersion DEFAULT v2,\n      update\
    \       TAMPMsgRef,\n      commConfirm  CommunityConfirm }\n    CommunityConfirm\
    \ ::= CHOICE {\n      terseCommConfirm     [0] TerseCommunityConfirm,\n      verboseCommConfirm\
    \   [1] VerboseCommunityConfirm }\n    TerseCommunityConfirm ::= StatusCode\n\
    \    VerboseCommunityConfirm ::= SEQUENCE {\n      status       StatusCode,\n\
    \      communities  CommunityIdentifierList OPTIONAL }\n   The fields of TAMPCommunityUpdateConfirm\
    \ are used as follows:\n   o  version identifies version of TAMP.  For this version\
    \ of the\n      specification, the default value, v2, MUST be used.\n   o  update\
    \ identifies the Community Update message to which the trust\n      anchor store\
    \ is responding.  The update structure repeats the\n      TAMPMsgRef from the\
    \ Community Update message (see Section 4.7).\n      The sequence number processing\
    \ described in Section 6 MUST\n      successfully complete before any of the updates\
    \ are processed.\n   o  commConfirm contains either a terse community update confirmation\n\
    \      or a verbose community update confirmation.  The terse response is\n  \
    \    represented by TerseCommunityConfirm, and the verbose response is\n     \
    \ represented by VerboseCommunityConfirm.\n   The TerseCommunityConfirm contains\
    \ a single status code, indicating\n   the success or failure of the Community\
    \ Update message processing.\n   If the community update failed, then the status\
    \ code indicates the\n   reason for the failure.  Each of the status codes is\
    \ discussed in\n   Section 5.\n   The fields of VerboseCommunityConfirm are used\
    \ as follows:\n   o  status contains a single status code, indicating the success\
    \ or\n      failure of the Community Update message processing.  If the\n    \
    \  community update failed, then the status code indicates the reason\n      for\
    \ the failure.  Each of the status codes is discussed in\n      Section 5.\n \
    \  o  communities is OPTIONAL.  When present, it contains the sequence\n     \
    \ of community identifiers present in the trust anchor store after\n      the\
    \ update is processed.  When the trust anchor store belongs to\n      no communities,\
    \ this field is omitted.\n"
- title: 4.9.  Sequence Number Adjust
  contents:
  - "4.9.  Sequence Number Adjust\n   The trust anchor store maintains the current\
    \ sequence number for the\n   apex trust anchor and each management trust anchor\
    \ authorized for\n   TAMP messages.  Sequence number processing is discussed in\
    \ Section 6.\n   The Sequence Number Adjust message can be used to provide the\
    \ most\n   recently used sequence number to one or more targets, thereby\n   reducing\
    \ the possibility of replay.  The Sequence Number Adjust\n   message MUST be signed.\
    \  For the Sequence Number Adjust message to be\n   valid, the trust anchor store\
    \ MUST be an intended recipient of the\n   Sequence Number Adjust message, the\
    \ sequence number MUST be equal to\n   or larger than the most recently stored\
    \ sequence number for the\n   originating trust anchor, and the digital signature\
    \ MUST be validated\n   by the apex trust anchor operational public key or an\
    \ authorized\n   management trust anchor.\n   If the digital signature on the\
    \ Sequence Number Adjust message is\n   valid, the sequence number is equal to\
    \ or larger than the most\n   recently stored sequence number for the originating\
    \ trust anchor, the\n   signer is authorized, and the trust anchor store is an\
    \ intended\n   recipient of the TAMP message, then the trust anchor store MUST\n\
    \   update the sequence number associated with the originating trust\n   anchor\
    \ and return a Sequence Number Adjust Confirm message.  If a\n   Sequence Number\
    \ Adjust Confirm message is not returned, then a TAMP\n   Error message SHOULD\
    \ be returned.\n   The Sequence Number Adjust message contains an adjustment for\
    \ the\n   sequence number of the TAMP message signer.\n   The Sequence Number\
    \ Adjust content type has the following syntax:\n    tamp-sequence-number-adjust\
    \ CONTENT-TYPE  ::=\n       { SequenceNumberAdjust IDENTIFIED BY id-ct-TAMP-seqNumAdjust\
    \ }\n    id-ct-TAMP-seqNumAdjust OBJECT IDENTIFIER ::= { id-tamp 10 }\n    SequenceNumberAdjust\
    \ ::= SEQUENCE {\n      Version  [0] TAMPVersion DEFAULT v2,\n      msgRef   TAMPMsgRef\
    \ }\n   The fields of SequenceNumberAdjust are used as follows:\n   o  version\
    \ identifies version of TAMP.  For this version of the\n      specification, the\
    \ default value, v2, MUST be used.\n   o  msgRef contains two items: the target\
    \ and the seqNum.  target\n      identifies the target(s) of the sequence number\
    \ adjust message.\n      The TargetIdentifier syntax as described in Section 4.1\
    \ is used.\n      The allModules target is expected to be used for Sequence Number\n\
    \      Adjust messages.  seqNum MUST be equal to or larger than the most\n   \
    \   recently stored sequence number for this TAMP message signer, and\n      the\
    \ value will be used to match the Sequence Number Adjust message\n      with the\
    \ Sequence Number Adjust Confirm message.  The sequence\n      number processing\
    \ described in Section 6 applies, except that the\n      sequence number in a\
    \ Sequence Number Adjust message is acceptable\n      if it matches the most recently\
    \ stored sequence number for this\n      TAMP message signer.  If sequence number\
    \ checking completes\n      successfully, then the sequence number is adjusted;\
    \ otherwise, it\n      remains unchanged.\n"
- title: 4.10.  Sequence Number Adjust Confirm
  contents:
  - "4.10.  Sequence Number Adjust Confirm\n   The Sequence Number Adjust Confirm\
    \ message is a reply by a trust\n   anchor store to a valid Sequence Number Adjust\
    \ message.  The Sequence\n   Number Adjust Confirm message provides success or\
    \ failure\n   information.  Success is returned only if the sequence number for\
    \ the\n   trust anchor that signed the Sequence Number Adjust message\n   originator\
    \ is adjusted.  If the sequence number cannot be adjusted,\n   then a failure\
    \ is indicated, and the sequence number stored in the\n   trust anchor store is\
    \ unchanged.  The Sequence Number Adjust Confirm\n   message MAY be signed or\
    \ unsigned.  A Sequence Number Adjust Confirm\n   message MUST be signed if the\
    \ trust anchor store is capable of\n   signing it.\n   The Sequence Number Adjust\
    \ Confirm content type has the following\n   syntax:\n    tamp-sequence-number-adjust-confirm\
    \ CONTENT-TYPE  ::=\n       { SequenceNumberAdjustConfirm IDENTIFIED BY\n    \
    \     id-ct-TAMP-seqNumAdjustConfirm }\n    id-ct-TAMP-seqNumAdjustConfirm OBJECT\
    \ IDENTIFIER ::=\n       { id-tamp 11 }\n    SequenceNumberAdjustConfirm ::= SEQUENCE\
    \ {\n      version  [0] TAMPVersion DEFAULT v2,\n      adjust   TAMPMsgRef,\n\
    \      status   StatusCode }\n   The fields of SequenceNumberAdjustConfirm are\
    \ used as follows:\n   o  version identifies version of TAMP.  For this version\
    \ of the\n      specification, the default value, v2, MUST be used.\n   o  adjust\
    \ identifies the Sequence Number Adjust message to which the\n      trust anchor\
    \ store is responding.  The adjust structure repeats\n      the TAMPMsgRef from\
    \ the Sequence Number Adjust message (see\n      Section 4.9).  The sequence number\
    \ processing described in\n      Section 6 MUST successfully complete to adjust\
    \ the sequence number\n      associated with the Sequence Number Adjust message\
    \ originator.\n   o  status contains a single status code, indicating the success\
    \ or\n      failure of the Sequence Number Adjust message processing.  If the\n\
    \      adjustment failed, then the status code indicates the reason for\n    \
    \  the failure.  Each of the status codes is discussed in Section 5.\n"
- title: 4.11.  TAMP Error
  contents:
  - "4.11.  TAMP Error\n   The TAMP Error message is a reply by a trust anchor store\
    \ to any\n   invalid TAMP message.  The TAMP Error message provides an indication\n\
    \   of the reason for the error.  The TAMP Error message MAY be signed or\n  \
    \ unsigned.  A TAMP Error message MUST be signed if the trust anchor\n   store\
    \ is capable of signing it.  For the request types defined in\n   this specification,\
    \ TAMP Error messages MUST NOT be used to indicate\n   a request message was successfully\
    \ processed.  Each TAMP Error\n   message identifies the type of TAMP message\
    \ that caused the error.\n   In cases where the TAMP message type cannot be determined,\
    \ errors MAY\n   be returned via other means, such as at the protocol level, via\
    \ an\n   attached display, etc.\n   The TAMP Error message content type has the\
    \ following syntax:\n    tamp-error CONTENT-TYPE  ::=\n       { TAMPError IDENTIFIED\
    \ BY id-ct-TAMP-error }\n    id-ct-TAMP-error OBJECT IDENTIFIER ::= { id-tamp\
    \ 9 }\n    TAMPError ::= SEQUENCE {\n      version  [0] TAMPVersion DEFAULT v2,\n\
    \      msgType  OBJECT IDENTIFIER,\n      status   StatusCode,\n      msgRef \
    \  TAMPMsgRef OPTIONAL }\n   The fields of TAMPError are used as follows:\n  \
    \ o  version identifies version of TAMP.  For this version of the\n      specification,\
    \ the default value, v2, MUST be used.\n   o  msgType indicates the content type\
    \ of the TAMP message that caused\n      the error.\n   o  status contains a status\
    \ code that indicates the reason for the\n      error.  Each of the status codes\
    \ is discussed in Section 5.\n   o  msgRef is OPTIONAL, but whenever possible\
    \ it SHOULD be present.\n      It identifies the TAMP message that caused the\
    \ error.  It repeats\n      the target and seqNum from the TAMP message that caused\
    \ the error\n      (see Sections 4.1, 4.3, 4.5, 4.7, and 4.9).\n"
- title: 5.  Status Codes
  contents:
  - "5.  Status Codes\n   The Trust Anchor Update Confirm, the Apex Trust Anchor Update\n\
    \   Confirm, the Community Update Confirm, the Sequence Number Adjust\n   Confirm,\
    \ and the TAMP Error messages include status codes.  The\n   syntax for the status\
    \ codes is:\n     StatusCode ::= ENUMERATED {\n       success                \
    \            (0),\n       decodeFailure                      (1),\n       badContentInfo\
    \                     (2),\n       badSignedData                      (3),\n \
    \      badEncapContent                    (4),\n       badCertificate        \
    \             (5),\n       badSignerInfo                      (6),\n       badSignedAttrs\
    \                     (7),\n       badUnsignedAttrs                   (8),\n \
    \      missingContent                     (9),\n       noTrustAnchor         \
    \            (10),\n       notAuthorized                     (11),\n       badDigestAlgorithm\
    \                (12),\n       badSignatureAlgorithm             (13),\n     \
    \  unsupportedKeySize                (14),\n       unsupportedParameters     \
    \        (15),\n       signatureFailure                  (16),\n       insufficientMemory\
    \                (17),\n       unsupportedTAMPMsgType            (18),\n     \
    \  apexTAMPAnchor                    (19),\n       improperTAAddition        \
    \        (20),\n       seqNumFailure                     (21),\n       contingencyPublicKeyDecrypt\
    \       (22),\n       incorrectTarget                   (23),\n       communityUpdateFailed\
    \             (24),\n       trustAnchorNotFound               (25),\n       unsupportedTAAlgorithm\
    \            (26),\n       unsupportedTAKeySize              (27),\n       unsupportedContinPubKeyDecryptAlg\
    \ (28),\n       missingSignature                  (29),\n       resourcesBusy\
    \                     (30),\n       versionNumberMismatch             (31),\n\
    \       missingPolicySet                  (32),\n       revokedCertificate   \
    \             (33),\n       unsupportedTrustAnchorFormat      (34),\n       improperTAChange\
    \                  (35),\n       malformed                         (36),\n   \
    \    cmsError                          (37),\n       unsupportedTargetIdentifier\
    \       (38),\n       other                            (127) }\n   The various\
    \ values of StatusCode are used as follows:\n   o  success is used to indicate\
    \ that an update, portion of an update,\n      or adjust was processed successfully.\n\
    \   o  decodeFailure is used to indicate that the trust anchor store was\n   \
    \   unable to successfully decode the provided message.  The specified\n     \
    \ content type and the provided content do not match.\n   o  badContentInfo is\
    \ used to indicate that the ContentInfo syntax is\n      invalid or that the contentType\
    \ carried within the ContentInfo is\n      unknown or unsupported.\n   o  badSignedData\
    \ is used to indicate that the SignedData syntax is\n      invalid, the version\
    \ is unknown or unsupported, or more than one\n      entry is present in digestAlgorithms.\n\
    \   o  badEncapContent is used to indicate that the\n      EncapsulatedContentInfo\
    \ syntax is invalid.  This error can be\n      generated due to problems located\
    \ in SignedData.\n   o  badCertificate is used to indicate that the syntax for\
    \ one or more\n      certificates in CertificateSet is invalid.\n   o  badSignerInfo\
    \ is used to indicate that the SignerInfo syntax is\n      invalid, or the version\
    \ is unknown or unsupported.\n   o  badSignedAttrs is used to indicate that the\
    \ signedAttrs syntax\n      within SignerInfo is invalid.\n   o  badUnsignedAttrs\
    \ is used to indicate that the unsignedAttrs syntax\n      within SignerInfo is\
    \ invalid.\n   o  missingContent is used to indicate that the OPTIONAL eContent\
    \ is\n      missing in EncapsulatedContentInfo, which is REQUIRED in this\n  \
    \    specification.  This error can be generated due to problems\n      located\
    \ in SignedData.\n   o  noTrustAnchor is used to indicate one of two possible\
    \ error\n      situations.  In one case, the subjectKeyIdentifier does not\n \
    \     identify the public key of a trust anchor or a certification path\n    \
    \  that terminates with an installed trust anchor.  In the other\n      case,\
    \ the issuerAndSerialNumber is used to identify the TAMP\n      message signer,\
    \ which is prohibited by this specification.\n   o  notAuthorized is used to indicate\
    \ one of two possible error\n      situations.  In one case, the sid within SignerInfo\
    \ leads to an\n      installed trust anchor, but that trust anchor is not an authorized\n\
    \      signer for the received TAMP message content type.  Identity trust\n  \
    \    anchors are not authorized signers for any of the TAMP message\n      content\
    \ types.  In the other case, the signer of a Trust Anchor\n      Update message\
    \ is not authorized to manage the to-be-updated trust\n      anchor as determined\
    \ by a failure of the subordination processing\n      in Section 7.\n   o  badDigestAlgorithm\
    \ is used to indicate that the digestAlgorithm in\n      either SignerInfo or\
    \ SignedData is unknown or unsupported.\n   o  badSignatureAlgorithm is used to\
    \ indicate that the\n      signatureAlgorithm in SignerInfo is unknown or unsupported.\n\
    \   o  unsupportedKeySize is used to indicate that the signatureAlgorithm\n  \
    \    in SignerInfo is known and supported, but the TAMP message digital\n    \
    \  signature could not be validated because an unsupported key size\n      was\
    \ employed by the signer.\n   o  unsupportedParameters is used to indicate that\
    \ the\n      signatureAlgorithm in SignerInfo is known, but the TAMP message\n\
    \      digital signature could not be validated because unsupported\n      parameters\
    \ were employed by the signer.\n   o  signatureFailure is used to indicate that\
    \ the signatureAlgorithm\n      in SignerInfo is known and supported, but the\
    \ digital signature in\n      the signature field within SignerInfo could not\
    \ be validated.\n   o  insufficientMemory indicates that the update could not\
    \ be\n      processed because the trust anchor store did not have sufficient\n\
    \      memory to store the resulting trust anchor configuration or\n      community\
    \ identifier.\n   o  unsupportedTAMPMsgType indicates that the TAMP message could\
    \ not\n      be processed because the trust anchor store does not support the\n\
    \      provided TAMP message type.  This code will be used if the\n      id-ct-TAMP-communityUpdate\
    \ content type is provided and the trust\n      anchor store does not support\
    \ the Community Update message.  This\n      status code will also be used if\
    \ the contentType value within\n      eContentType is not one that is defined\
    \ in this specification.\n   o  apexTAMPAnchor indicates that the update could\
    \ not be processed\n      because the Trust Anchor Update message tried to remove\
    \ the apex\n      trust anchor.\n   o  improperTAAddition indicates that a trust\
    \ anchor update is trying\n      to add a new trust anchor that may already exist,\
    \ but some\n      attributes of the to-be-added trust anchor are being modified\
    \ in\n      an improper manner.  The desired trust anchor configuration may be\n\
    \      attainable with a change operation instead of an add operation.\n   o \
    \ seqNumFailure indicates that the TAMP message could not be\n      processed\
    \ because the processing of the sequence number, which is\n      described in\
    \ Section 6, resulted in an error.\n   o  contingencyPublicKeyDecrypt indicates\
    \ that the update could not be\n      processed because an error occurred while\
    \ decrypting the\n      contingency public key.\n   o  incorrectTarget indicates\
    \ that the query, update, or adjust\n      message could not be processed because\
    \ the trust anchor store is\n      not the intended recipient.\n   o  communityUpdateFailed\
    \ indicates that the community update\n      requested the addition of a community\
    \ identifier or the removal of\n      a community identifier, but the request\
    \ could not be honored.\n   o  trustAnchorNotFound indicates that a change to\
    \ a trust anchor was\n      requested, but the referenced trust anchor is not\
    \ represented in\n      the trust anchor store.\n   o  unsupportedTAAlgorithm\
    \ indicates that an update message would\n      result in the trust anchor with\
    \ a public key associated with a\n      digital signature validation algorithm\
    \ that is not implemented.\n      In addition, this status code is used if the\
    \ algorithm is\n      supported, but the parameters associated with the algorithm\
    \ are\n      not supported.\n   o  unsupportedTAKeySize indicates that the trust\
    \ anchor would include\n      a public key of a size that is not supported.\n\
    \   o  unsupportedContinPubKeyDecryptAlg indicates that the decryption\n     \
    \ algorithm for the apex trust anchor contingency public key is not\n      supported.\n\
    \   o  missingSignature indicates that an unsigned TAMP message was\n      received,\
    \ but the received TAMP message type MUST be signed.\n   o  resourcesBusy indicates\
    \ that the resources necessary to process\n      the TAMP message are not available\
    \ at the present time, but the\n      resources might be available at some point\
    \ in the future.\n   o  versionNumberMismatch indicates that the version number\
    \ in a\n      received TAMP message is not acceptable.\n   o  missingPolicySet\
    \ indicates that the policyFlags associated with a\n      trust anchor are set\
    \ in a fashion that requires the policySet to\n      be present, but the policySet\
    \ is missing.\n   o  revokedCertificate indicates that one or more of the certificates\n\
    \      needed to properly process the TAMP message have been revoked.\n   o  unsupportedTrustAnchorFormat\
    \ indicates that an unsupported trust\n      anchor format was presented or the\
    \ version is unknown or\n      unsupported.\n   o  improperTAChange indicates\
    \ that a trust anchor update is trying to\n      change a new trust anchor using\
    \ a format different than the format\n      of the existing trust anchor.\n  \
    \ o  malformed indicates an error in the composition of the CMS\n      structure\
    \ encapsulating a TAMP message.\n   o  cmsError indicates an error processing\
    \ a CMS structure that\n      encapsulated a TAMP message, such as an error processing\n\
    \      ContentType or MessageDigest attributes.\n   o  unsupportedTargetIdentifier\
    \ indicates that a msgRef with an\n      unsupported TargetIdentifier option was\
    \ encountered.\n   o  other indicates that the update could not be processed,\
    \ but the\n      reason is not covered by any of the assigned status codes.  Use\
    \ of\n      this status code SHOULD be avoided.\n"
- title: 6.  Sequence Number Processing
  contents:
  - "6.  Sequence Number Processing\n   The sequence number processing facilities\
    \ in TAMP represent a balance\n   between replay protection, operational considerations,\
    \ and trust\n   anchor store memory management.  The goal is to provide replay\n\
    \   protection without making TAMP difficult to use, creating an\n   environment\
    \ where surprising error conditions occur on a regular\n   basis, or imposing\
    \ onerous memory management requirements on\n   implementations.  This balance\
    \ is achieved by performing sequence\n   number checking on TAMP messages that\
    \ are validated directly using a\n   trust anchor, and allowing these checks to\
    \ be skipped whenever the\n   TAMP message originator is not represented by a\
    \ trust anchor.\n   Implementations MUST perform sequence number checking on TAMP\n\
    \   messages that are validated directly using a trust anchor and MAY\n   perform\
    \ sequence number checking for TAMP messages validated using a\n   certification\
    \ path.\n   The TAMP Status Query, Trust Anchor Update, Apex Trust Anchor Update,\n\
    \   Community Update, and Sequence Number Adjust messages include a\n   sequence\
    \ number.  This single-use identifier is used to match a TAMP\n   message with\
    \ the response to that TAMP message.  When the TAMP\n   message is validated directly\
    \ using a trust anchor, the sequence\n   number is also used to detect TAMP message\
    \ replay.\n   To provide replay protection, each TAMP message originator MUST\
    \ treat\n   the sequence number as a monotonically increasing non-negative\n \
    \  integer.  The sequence number counter is associated with the signing\n   operation\
    \ performed by the private key.  The trust anchor store MUST\n   ensure that a\
    \ newly received TAMP message that is validated directly\n   by a trust anchor\
    \ public key contains a sequence number that is\n   greater than the most recent\
    \ successfully processed TAMP message from\n   that originator.  Note that the\
    \ Sequence Number Adjust message is\n   considered valid if the sequence number\
    \ is greater than or equal to\n   the most recent successfully processed TAMP\
    \ message from that\n   originator.  If the sequence number in a received TAMP\
    \ message does\n   not meet these conditions, then the trust anchor store MUST\
    \ reject\n   the TAMP message, returning a sequence number failure (seqNumFailure)\n\
    \   error.\n   Whenever a trust anchor is authorized for TAMP messages, either\
    \ as a\n   newly installed trust anchor or as a modification to an existing\n\
    \   trust anchor, if a sequence number value is not provided in the Trust\n  \
    \ Anchor Update message, memory MUST be allocated for the sequence\n   number\
    \ and set to zero.  The first TAMP message received that is\n   validated using\
    \ that trust anchor is not rejected based on sequence\n   number checks, and the\
    \ sequence number from that first TAMP message\n   is stored.  The TAMP message\
    \ recipient MUST maintain a database of\n   the most recent sequence number from\
    \ a successfully processed TAMP\n   message from a trust anchor.  The index for\
    \ this database is the\n   trust anchor public key.  This could be the apex trust\
    \ anchor\n   operational public key or a management trust anchor public key. \
    \ In\n   the first case, the apex trust anchor operational public key is used\n\
    \   directly to validate the TAMP message digital signature.  In the\n   second\
    \ case, a management trust anchor public key is used directly to\n   validate\
    \ the TAMP message digital signature.\n   Sequence number values MUST be 64-bit\
    \ non-negative integers.  Since\n   ASN.1 encoding of an INTEGER always includes\
    \ a sign bit, a TAMP\n   message signer can generate 9,223,372,036,854,775,807\
    \ TAMP messages\n   before exhausting the 64-bit sequence number space, before\
    \ which the\n   TAMP message signer MUST transition to a different public/private\
    \ key\n   pair.  The ability to reset a sequence number provided by the Trust\n\
    \   Anchor Update and Sequence Number Adjust messages is not intended to\n   avoid\
    \ the transition to a different key pair; rather, it is intended\n   to aid recovery\
    \ from operational errors.  A relatively small non-\n   volatile storage requirement\
    \ is imposed on the trust anchor store for\n   the apex trust anchor and each\
    \ management trust anchor authorized for\n   TAMP messages.\n   When the apex\
    \ trust anchor or a management trust anchor is replaced\n   or removed from the\
    \ trust anchor store, the associated sequence\n   number storage SHOULD be reclaimed.\n"
- title: 7.  Subordination Processing
  contents:
  - "7.  Subordination Processing\n   When a TAMP update message is processed, several\
    \ checks are\n   performed:\n   o  TAMP message authentication is checked including,\
    \ if necessary,\n      building and validating a certification path to the signer.\n\
    \   o  The signer's authorization is checked, including authorization to\n   \
    \   manage trust anchors included in the update message.\n   o  Calculation of\
    \ the trust anchor information to be stored.\n   This section describes how to\
    \ perform the second and third steps.\n   Section 1.2 discusses authentication\
    \ of TAMP messages.  Where a trust\n   anchor is represented as a certificate\
    \ and the calculation of the\n   trust anchor information to be stored is different\
    \ than the\n   information in the certificate, the TAMP update fails.  The TAMP\n\
    \   message signer may then wrap the certificate inside a TrustAnchorInfo\n  \
    \ structure to assert the intended information.\n   The apex trust anchor is unconstrained,\
    \ which means that\n   subordination checking need not be performed on Trust Anchor\
    \ Update\n   messages signed with the apex trust anchor operational public key\
    \ and\n   that trust anchor information can be stored as it appears in the\n \
    \  update message.  Subordination checking is performed as part of the\n   validation\
    \ process of all other Trust Anchor Update messages.\n   For a Trust Anchor Update\
    \ message that is not signed with the apex\n   trust anchor operational public\
    \ key to be valid, the digital\n   signature MUST be validated using an authorized\
    \ trust anchor, either\n   directly or via an X.509 certification path originating\
    \ with the apex\n   trust anchor operational public key or an authorized management\
    \ trust\n   anchor.  The following subordination checks MUST also be performed\
    \ as\n   part of validation of the update message.\n   Each Trust Anchor Update\
    \ message contains one or more individual\n   updates, each of which is used to\
    \ add, modify, or remove a trust\n   anchor.  For each individual update, the\
    \ constraints of the TAMP\n   message signer MUST be greater than or equal to\
    \ the constraints of\n   the trust anchor in the update.  Specifically, constraints\
    \ included\n   in the CertPathControls field of a TrustAnchorInfo object (or\n\
    \   equivalent extensions in Certificate or TBSCertificate objects) must\n   be\
    \ checked as described below.  [RFC5280] describes how the\n   intersection and\
    \ union operations referenced below are performed.\n   o  The values of the policy\
    \ flags stored with a trust anchor as the\n      result of a TAMPUpdate are either\
    \ true or equal to the value of\n      the policy flags associated with the TAMP\
    \ message signer, i.e., an\n      update may set a flag to false only if the value\
    \ associated with\n      the TAMP message signer is false.  The policy flags associated\n\
    \      with the TAMP message signer are read from the policyFlags field\n    \
    \  or policyConstraints and inhibitAnyPolicy extensions if the signer\n      is\
    \ represented as a trust anchor or from the explicit_policy,\n      policy_mapping,\
    \ and inhibit_anyPolicy state variables following\n      path validation if the\
    \ signer is not represented as a trust\n      anchor.\n   o  The certificate policies\
    \ stored with a trust anchor as the result\n      of a TAMPUpdate are equal to\
    \ the intersection of the value of the\n      certificate policies associated\
    \ with the TAMP message signer and\n      the value of the policySet field or\
    \ certificatePolicies extension\n      from the update.  The certificate policies\
    \ associated with the\n      TAMP message signer are read from the policySet field\
    \ in a\n      TrustAnchorInfo or certificatePolicies extension in a Certificate\n\
    \      or TBSCertificate if the signer is represented as a trust anchor\n    \
    \  or from the valid_policy_tree returned following path validation\n      if\
    \ the signer is not represented by a trust anchor.  Where the\n      TAMP message\
    \ signer is represented as a trust anchor, no policy\n      mapping is performed.\
    \  If the intersection is NULL and the\n      to-be-stored requireExplicitPolicy\
    \ value is true, the TAMP update\n      fails.\n   o  The excluded names stored\
    \ with a trust anchor as the result of a\n      TAMPUpdate are equal to the union\
    \ of the excluded names associated\n      with the TAMP message signer and the\
    \ value from the nameConstr\n      field or nameConstraints extension from the\
    \ update.  The name\n      constraints associated with the TAMP message signer\
    \ are read from\n      the nameConstr field in a TrustAnchorInfo or nameConstraints\n\
    \      extension in a Certificate or TBSCertificate if the signer is a\n     \
    \ trust anchor or from the excludedSubtrees state variable following\n      path\
    \ validation if the signer is not a trust anchor.  The name of\n      the trust\
    \ anchor included in the update MUST NOT fall within the\n      excluded name\
    \ space of the TAMP signer.  If the name of the trust\n      anchor falls within\
    \ the excluded name space of the TAMP signer,\n      the TAMP update fails.\n\
    \   o  The permitted names stored with a trust anchor as the result of a\n   \
    \   TAMPUpdate are equal to the intersection of the permitted names\n      associated\
    \ with the TAMP message signer and the value from the\n      nameConstr field\
    \ or nameConstraints extension from the update.\n      The name constraints associated\
    \ with the TAMP message signer are\n      read from the nameConstr field in a\
    \ TrustAnchorInfo or\n      nameConstraints extension in a Certificate or TBSCertificate\
    \ if\n      the signer is a trust anchor or from the permittedSubtrees state\n\
    \      variable following path validation if the signer is not a trust\n     \
    \ anchor.  The name of the trust anchor included in the update MUST\n      fall\
    \ within the permitted name space of the TAMP signer.  If the\n      name of the\
    \ trust anchor does not fall within the permitted name\n      space of the TAMP\
    \ signer, the TAMP update fails.  If the\n      intersection is NULL for all name\
    \ forms, the TAMP update fails.\n   No other extensions defined in [RFC5280] must\
    \ be processed as part of\n   subordination processing.  Other extensions may\
    \ define subordination\n   rules.\n"
- title: 8.  Implementation Considerations
  contents:
  - "8.  Implementation Considerations\n   A public key identifier is used to identify\
    \ a TAMP message signer.\n   Since there is no guarantee that the same public\
    \ key identifier is\n   not associated with more than one public key, implementations\
    \ MUST be\n   prepared for one or more trust anchors to have the same public key\n\
    \   identifier.  In practical terms, this means that when a digital\n   signature\
    \ validation fails, the implementation MUST see if there is\n   another trust\
    \ anchor with the same public key identifier that can be\n   used to validate\
    \ the digital signature.  While duplicate public key\n   identifiers are expected\
    \ to be rare, implementations MUST NOT fail to\n   find the correct trust anchor\
    \ when they do occur.\n   An X.500 distinguished name is used to identify certificate\
    \ issuers\n   and certificate subjects.  The same X.500 distinguished name can\
    \ be\n   associated with more than one trust anchor.  However, the trust\n   anchor\
    \ public key will be different.  The probability that two trust\n   anchors will\
    \ have the same X.500 distinguished name and the same\n   public key identifier\
    \ but a different public key is diminishingly\n   small.  Therefore, the authority\
    \ key identifier certificate extension\n   can be used to resolve X.500 distinguished\
    \ name collisions.\n   TAMP assumes a reliable underlying transport protocol.\n"
- title: 9.  Wrapped Apex Contingency Key Certificate Extension
  contents:
  - "9.  Wrapped Apex Contingency Key Certificate Extension\n   An apex trust anchor\
    \ MAY contain contingency key information using\n   the WrappedApexContingencyKey\
    \ extension.  The extension uses the\n   ApexContingencyKey structure as defined\
    \ below.\n    ApexContingencyKey ::= SEQUENCE {\n      wrapAlgorithm        AlgorithmIdentifier\
    \ OPTIONAL,\n      wrappedContinPubKey  OCTET STRING  OPTIONAL }\n   The fields\
    \ of ApexContingencyKey are used as described below.  When\n   one field is present,\
    \ both MUST be present.  When one field is\n   absent, both MUST be absent.  The\
    \ fields are allowed to be absent to\n   enable usage of this extension as a means\
    \ of indicating that the\n   corresponding public key is recognized as an apex\
    \ trust anchor by\n   some relying parties.\n   o  wrapAlgorithm identifies the\
    \ symmetric algorithm used to encrypt\n      the apex trust anchor contingency\
    \ public key.  If this public key\n      is ever needed, the symmetric key needed\
    \ to decrypt it will be\n      provided in the message that is to be validated\
    \ using it.  The\n      algorithm identifier is an AlgorithmIdentifier, which\
    \ contains an\n      object identifier and OPTIONAL parameters.  The object identifier\n\
    \      indicates the syntax of the parameters, if present.\n   o  wrappedContinPubKey\
    \ is the encrypted apex trust anchor contingency\n      public key.  Once decrypted,\
    \ it yields the PublicKeyInfo\n      structure, which consists of the algorithm\
    \ identifier followed by\n      the public key itself.  The algorithm identifier\
    \ is an\n      AlgorithmIdentifier that contains an object identifier and\n  \
    \    OPTIONAL parameters.  The object identifier indicates the format\n      of\
    \ the public key and the syntax of the parameters, if present.\n      The public\
    \ key is encoded as a BIT STRING.\n   The WrappedApexContingencyKey certificate\
    \ extension MAY be critical,\n   and it MUST appear at most one time in a set\
    \ of extensions. The apex\n   trust anchor info extension is identified by the\n\
    \   id-pe-wrappedApexContinKey object identifier:\n         id-pe-wrappedApexContinKey\
    \ OBJECT IDENTIFIER ::=\n             { iso(1) identified-organization(3) dod(6)\
    \ internet(1)\n               security(5) mechanisms(5) pkix(7) pe(1) 20 }\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The majority of this specification is devoted\
    \ to the syntax and\n   semantics of TAMP messages.  It relies on other specifications,\n\
    \   especially [RFC5914], [RFC3852], and [RFC5280], for the syntax and\n   semantics\
    \ of trust anchors, intermediate CMS content types, and X.509\n   certificates,\
    \ respectively.  Since TAMP messages that change the\n   trust anchor state of\
    \ a trust anchor store are always signed by a\n   Trust Anchor Manager, no further\
    \ data integrity or data origin\n   authentication mechanisms are needed; however,\
    \ no confidentiality for\n   these messages is provided.  Similarly, certificates\
    \ are digitally\n   signed, and no additional data integrity or data origin\n\
    \   authentication mechanisms are needed.  Trust anchor configurations,\n   Trust\
    \ Anchor Manager certificates, and trust anchor store\n   certificates are not\
    \ intended to be sensitive.  As a result, this\n   specification does not provide\
    \ for confidentiality of TAMP messages.\n   Security factors outside the scope\
    \ of this specification greatly\n   affect the assurance provided.  The procedures\
    \ used by certification\n   authorities (CAs) to validate the binding of the subject\
    \ identity to\n   their public key greatly affect the assurance associated with\
    \ the\n   resulting certificate.  This is particularly important when issuing\n\
    \   certificates to other CAs.  In the context of TAMP, the issuance of\n   an\
    \ end entity certificate under a management trust anchor is an act\n   of delegation.\
    \  However, such end entities cannot further delegate.\n   On the other hand,\
    \ issuance of a CA certificate under a management\n   trust anchor is an act of\
    \ delegation where the CA can perform further\n   delegation.  The scope of the\
    \ delegation can be constrained by\n   including appropriate certificate extensions\
    \ in a CA certificate.\n   X.509 certification path construction involves comparison\
    \ of X.500\n   distinguished names.  Inconsistent application of name comparison\n\
    \   rules can result in acceptance of invalid X.509 certification paths\n   or\
    \ rejection of valid ones.  Name comparison can be extremely\n   complex.  To\
    \ avoid imposing this complexity on trust anchor stores,\n   any certificate profile\
    \ used with TAMP SHOULD employ simple name\n   structures and impose rigorous\
    \ restrictions on acceptable\n   distinguished names, including the way that they\
    \ are encoded.  The\n   goal of that certificate profile should be to enable simple\
    \ binary\n   comparison.  That is, case conversion, character set conversion,\n\
    \   white space compression, and leading and trailing white space\n   trimming\
    \ SHOULD be avoided.\n   Some digital signature algorithms (DSAs) require the\
    \ generation of\n   random one-time values.  For example, when generating a DSA\
    \ digital\n   signature, the signer MUST generate a random k value [DSS].  Also,\n\
    \   the generation of public/private key pairs relies on random numbers.\n   The\
    \ use of an inadequate random number generator (RNG) or an\n   inadequate pseudo-random\
    \ number generator (PRNG) to generate such\n   cryptographic values can result\
    \ in little or no security.  An\n   attacker may find it much easier to reproduce\
    \ the random number\n   generation environment, searching the resulting small\
    \ set of\n   possibilities, rather than brute-force searching the whole space.\n\
    \   Compromise of an identity trust anchor private key permits\n   unauthorized\
    \ parties to issue certificates that will be acceptable to\n   all trust anchor\
    \ stores configured with the corresponding identity\n   trust anchor.  The unauthorized\
    \ private key holder will be limited by\n   the certification path controls associated\
    \ with the identity trust\n   anchor.  For example, clearance constraints in the\
    \ identity trust\n   anchor will determine the clearances that will be accepted\
    \ in\n   certificates that are issued by the unauthorized private key holder.\n\
    \   Compromise of a management trust anchor private key permits\n   unauthorized\
    \ parties to generate signed messages that will be\n   acceptable to all trust\
    \ anchor stores configured with the\n   corresponding management trust anchor.\
    \  All devices that include the\n   compromised management trust anchor can be\
    \ configured as desired by\n   the unauthorized private key holder within the\
    \ limits of the\n   subordination checks described in Section 7.  If the management\
    \ trust\n   anchor is associated with content types other than TAMP, then the\n\
    \   unauthorized private key holder can generate signed messages of that\n   type.\
    \  For example, if the management trust anchor is associated with\n   firmware\
    \ packages, then the unauthorized private key holder can\n   install different\
    \ firmware.\n   Compromise of the apex trust anchor operational private key permits\n\
    \   unauthorized parties to generate signed messages that will be\n   acceptable\
    \ to all trust anchor stores configured with the\n   corresponding apex trust\
    \ anchor.  All devices that include that apex\n   trust anchor can be configured\
    \ as desired by the unauthorized private\n   key holder, and the unauthorized\
    \ private key holder can generate\n   signed messages of any content type.  The\
    \ optional contingency\n   private key offers a potential way to recover from\
    \ such a compromise.\n   The compromise of a CA's private key leads to the same\
    \ type of\n   problems as the compromise of an identity or a management trust\n\
    \   anchor private key.  The unauthorized private key holder will be\n   limited\
    \ by the certification path controls and extensions associated\n   with the trust\
    \ anchor.\n   The compromise of an end entity private key leads to the same type\
    \ of\n   problems as the compromise of an identity or a management trust\n   anchor\
    \ private key, except that the end entity is unable to issue any\n   certificates.\
    \  The unauthorized private key holder will be limited by\n   the certification\
    \ path controls and extensions associated with the\n   trust anchor.\n   Compromise\
    \ of a trust anchor store's digital signature private key\n   permits unauthorized\
    \ parties to generate signed TAMP response\n   messages, masquerading as the trust\
    \ anchor store.\n   Premature disclosure of the key-encryption key used to encrypt\
    \ the\n   apex trust anchor contingency public key may result in early exposure\n\
    \   of the apex trust anchor contingency public key.\n   TAMP implementations\
    \ need to be able to parse messages and\n   certificates.  Care must be taken\
    \ to ensure that there are no\n   implementation defects in the TAMP message parser\
    \ or the processing\n   that acts on the message content.  A validation suite\
    \ is one way to\n   increase confidence in the parsing of TAMP messages, CMS content\n\
    \   types, attributes, certificates, and extensions.\n   TrustAnchorList messages\
    \ do not provide a replay detection mechanism.\n   Where TrustAnchorList messages\
    \ are accepted as an alternative means\n   of adding trust anchors to a trust\
    \ anchor store, applications may\n   require additional mechanisms to address\
    \ the risks associated with\n   replay of old TrustAnchorList messages.\n   As\
    \ sequence number values are used to detect replay attempts, trust\n   anchor\
    \ store managers must take care to maintain their own sequence\n   number state,\
    \ i.e., knowledge of which sequence number to include in\n   the next TAMP message\
    \ generated by the trust anchor store manager.\n   Loss of sequence number state\
    \ can result in generation of TAMP\n   messages that cannot be processed due to\
    \ seqNumFailure.  In the event\n   of loss, sequence number state can be restored\
    \ by inspecting the most\n   recently generated TAMP message, provided the messages\
    \ are logged, or\n   in collaboration with a trust anchor store manager who can\n\
    \   successfully issue a TAMPStatusQuery message.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   The details of TAMP requests and responses are communicated\
    \ using\n   object identifiers (OIDs).  The objects are defined in an arc\n  \
    \ delegated by IANA to the PKIX working group.  This document also\n   includes\
    \ eleven media type registrations in Appendix B.  No further\n   action by IANA\
    \ is necessary for this document or any anticipated\n   updates.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]       Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                   Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC2616]       Fielding, R., Gettys, J., Mogul, J., Frystyk,\
    \ H.,\n                   Masinter, L., Leach, P., and T. Berners-Lee,\n     \
    \              \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616,\n      \
    \             June 1999.\n   [RFC3986]       Berners-Lee, T., Fielding, R., and\
    \ L. Masinter,\n                   \"Uniform Resource Identifier (URI): Generic\
    \ Syntax\",\n                   STD 66, RFC 3986, January 2005.\n   [RFC5280]\
    \       Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n                \
    \   Housley, R., and W. Polk, \"Internet X.509 Public Key\n                  \
    \ Infrastructure Certificate and Certificate Revocation\n                   List\
    \ (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5652]       Housley, R., \"Cryptographic\
    \ Message Syntax (CMS)\",\n                   RFC 5652, September 2009.\n   [RFC5912]\
    \       Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n             \
    \      Public Key Infrastructure Using X.509 (PKIX)\", RFC\n                 \
    \  5912, June 2010.\n   [RFC5914]       Housley, R., Ashmore, S., and C. Wallace,\
    \ \"Trust\n                   Anchor Format\", RFC 5914, June 2010.\n   [X.680]\
    \         \"ITU-T Recommendation X.680 - Information Technology\n            \
    \       - Abstract Syntax Notation One\", 1997.\n   [X.690]         \"ITU-T Recommendation\
    \ X.690 - Information Technology\n                   - ASN.1 encoding rules: Specification\
    \ of Basic\n                   Encoding Rules (BER), Canonical Encoding Rules\
    \ (CER)\n                   and Distinguished Encoding Rules (DER)\", 1997.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [DSS]           \"FIPS Pub 186: Digital Signature\
    \ Standard\", May 1994.\n   [PKCS#6]        \"PKCS #6: Extended-Certificate Syntax\
    \ Standard,\n                   Version 1.5\", November 1993.\n   [RFC3279]  \
    \     Bassham, L., Polk, W., and R. Housley, \"Algorithms\n                  \
    \ and Identifiers for the Internet X.509 Public Key\n                   Infrastructure\
    \ Certificate and Certificate Revocation\n                   List (CRL) Profile\"\
    , RFC 3279, April 2002.\n   [RFC3370]       Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\n                   Algorithms\", RFC 3370, August 2002.\n   [RFC4049]\
    \       Housley, R., \"BinaryTime: An Alternate Format for\n                 \
    \  Representing Date and Time in ASN.1\", RFC 4049, April\n                  \
    \ 2005.\n   [RFC4108]       Housley, R., \"Using Cryptographic Message Syntax\n\
    \                   (CMS) to Protect Firmware Packages\", RFC 4108, August\n \
    \                  2005.\n   [RFC5753]       Turner, S. and D. Brown, \"Use of\
    \ Elliptic Curve\n                   Cryptography (ECC) Algorithms in Cryptographic\n\
    \                   Message Syntax (CMS)\", RFC 5753, January 2010.\n   [RFC5754]\
    \       Turner, S., \"Using SHA2 Algorithms with Cryptographic\n             \
    \      Message Syntax\", RFC 5754, January 2010.\n   [RFC5755]       Farrell,\
    \ S., Housley, R., and S. Turner, \"An Internet\n                   Attribute\
    \ Certificate Profile for Authorization\", RFC\n                   5755, January\
    \ 2010.\n   [TA-MGMT-REQS]  Reddy, R. and C. Wallace, \"Trust Anchor Management\n\
    \                   Requirements\", Work in Progress, March 2010.\n   [X.208]\
    \         \"ITU-T Recommendation X.208 - Specification of\n                  \
    \ Abstract Syntax Notation One (ASN.1)\", 1988.\n   [X.509]         \"ITU-T Recommendation\
    \ X.509 - The Directory -\n                   Authentication Framework\", 2000.\n"
- title: Appendix A.  ASN.1 Modules
  contents:
  - "Appendix A.  ASN.1 Modules\n   Appendix A.1 provides the normative ASN.1 definitions\
    \ for the\n   structures described in this specification using ASN.1 as defined\
    \ in\n   [X.680].  Appendix A.2 provides a module using ASN.1 as defined in\n\
    \   [X.208].  The module in Appendix A.2 removes usage of newer ASN.1\n   features\
    \ that provide support for limiting the types of elements that\n   may appear\
    \ in certain SEQUENCE and SET constructions.  Otherwise, the\n   modules are compatible\
    \ in terms of encoded representation, i.e., the\n   modules are bits-on-the-wire\
    \ compatible aside from the limitations on\n   SEQUENCE and SET constituents.\
    \  Extension markers are not used due to\n   lack of support in [X.208].  Appendix\
    \ A.2 is included as a courtesy\n   to developers using ASN.1 compilers that do\
    \ not support current\n   ASN.1.  Appendix A.1 includes definitions imported from\
    \ [RFC5280],\n   [RFC5912], and [RFC5914].\n"
- title: A.1.  ASN.1 Module Using 1993 Syntax
  contents:
  - "A.1.  ASN.1 Module Using 1993 Syntax\n   TAMP-Protocol-v2\n   { joint-iso-ccitt(2)\
    \ country(16) us(840) organization(1)\n     gov(101) dod(2) infosec(1) modules(0)\
    \ 30 }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   IMPORTS\n   TrustAnchorChoice,\
    \ TrustAnchorTitle, CertPathControls\n   FROM TrustAnchorInfoModule\n      { joint-iso-ccitt(2)\
    \ country(16) us(840)\n      organization(1) gov(101) dod(2) infosec(1)\n    \
    \  modules(0) 33 }\n   AlgorithmIdentifier{}, SIGNATURE-ALGORITHM, KEY-WRAP\n\
    \   FROM AlgorithmInformation-2009\n      {iso(1) identified-organization(3) dod(6)\
    \ internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n      id-mod-algorithmInformation-02(58)}\n\
    \   Certificate, Name, TBSCertificate,\n   CertificateSerialNumber, Validity,\
    \ SubjectPublicKeyInfo\n   FROM PKIX1Explicit-2009 -- from [RFC5912]\n      {iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n      security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n      id-mod-pkix1-explicit-02(51)}\n   KeyIdentifier, OTHER-NAME\n\
    \   FROM PKIX1Implicit-2009 -- from [RFC5912]\n      {iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n    \
    \  id-mod-pkix1-implicit-02(59)}\n   EXTENSION, Extensions {}, ATTRIBUTE, SingleAttribute{}\n\
    \   FROM PKIX-CommonTypes-2009 -- from [RFC5912]\n      { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n      security(5) mechanisms(5) pkix(7) id-mod(0)\n    \
    \  id-mod-pkixCommon-02(57) }         ;\n   -- Object Identifier Arc for TAMP\
    \ Message Content Types\n   id-tamp OBJECT IDENTIFIER ::= {\n   joint-iso-ccitt(2)\
    \ country(16) us(840) organization(1)\n   gov(101) dod(2) infosec(1) formats(2)\
    \ 77 }\n   SupportedSigAlgorithms SIGNATURE-ALGORITHM ::= {\n      -- add any\
    \ locally defined algorithms here\n      ...\n   }\n   SupportedWrapAlgorithms\
    \ KEY-WRAP ::= {\n      -- add any locally defined algorithms here\n      ...\n\
    \   }\n   -- CMS Content Types\n   CONTENT-TYPE  ::= TYPE-IDENTIFIER\n   TAMPContentTypes\
    \ CONTENT-TYPE  ::= {\n     tamp-status-query |\n     tamp-status-response |\n\
    \     tamp-update |\n     tamp-update-confirm |\n     tamp-apex-update |\n   \
    \  tamp-apex-update-confirm |\n     tamp-community-update |\n     tamp-community-update-confirm\
    \ |\n     tamp-sequence-number-adjust |\n     tamp-sequence-number-adjust-confirm\
    \ |\n     tamp-error,\n     ... -- Expect additional content types --\n     }\n\
    \   -- TAMP Status Query Message\n   tamp-status-query CONTENT-TYPE  ::=\n   \
    \  { TAMPStatusQuery IDENTIFIED BY id-ct-TAMP-statusQuery }\n   id-ct-TAMP-statusQuery\
    \ OBJECT IDENTIFIER ::= { id-tamp 1 }\n   TAMPStatusQuery ::= SEQUENCE {\n   \
    \  version         [0] TAMPVersion DEFAULT v2,\n     terse           [1] TerseOrVerbose\
    \ DEFAULT verbose,\n     query           TAMPMsgRef }\n   TAMPVersion ::= INTEGER\
    \ { v1(1), v2(2) }\n   TerseOrVerbose ::= ENUMERATED { terse(1), verbose(2) }\n\
    \   SeqNumber ::= INTEGER (0..9223372036854775807)\n   TAMPMsgRef ::= SEQUENCE\
    \ {\n     target          TargetIdentifier,\n     seqNum          SeqNumber }\n\
    \   TargetIdentifier ::= CHOICE {\n     hwModules    [1] HardwareModuleIdentifierList,\n\
    \     communities  [2] CommunityIdentifierList,\n     allModules   [3] NULL,\n\
    \     uri          [4] IA5String,\n     otherName    [5] INSTANCE OF OTHER-NAME\
    \ }\n   HardwareModuleIdentifierList ::= SEQUENCE SIZE (1..MAX) OF\n         \
    \                            HardwareModules\n   HardwareModules ::= SEQUENCE\
    \ {\n     hwType          OBJECT IDENTIFIER,\n     hwSerialEntries SEQUENCE SIZE\
    \ (1..MAX) OF HardwareSerialEntry }\n   HardwareSerialEntry ::= CHOICE {\n   \
    \  all             NULL,\n     single          OCTET STRING,\n     block     \
    \      SEQUENCE {\n       low             OCTET STRING,\n       high         \
    \   OCTET STRING } }\n   CommunityIdentifierList ::= SEQUENCE SIZE (0..MAX) OF\
    \ Community\n   Community ::= OBJECT IDENTIFIER\n   -- TAMP Status Response Message\n\
    \   tamp-status-response CONTENT-TYPE  ::=\n     { TAMPStatusResponse IDENTIFIED\
    \ BY id-ct-TAMP-statusResponse }\n   id-ct-TAMP-statusResponse OBJECT IDENTIFIER\
    \ ::= { id-tamp 2 }\n   TAMPStatusResponse ::= SEQUENCE {\n     version   [0]\
    \ TAMPVersion DEFAULT v2,\n     query     TAMPMsgRef,\n     response  StatusResponse,\n\
    \     usesApex  BOOLEAN DEFAULT TRUE }\n   StatusResponse ::= CHOICE {\n     terseResponse\
    \         [0] TerseStatusResponse,\n     verboseResponse       [1] VerboseStatusResponse\
    \ }\n   TerseStatusResponse ::= SEQUENCE {\n     taKeyIds              KeyIdentifiers,\n\
    \     communities           CommunityIdentifierList OPTIONAL }\n   KeyIdentifiers\
    \ ::= SEQUENCE SIZE (1..MAX) OF KeyIdentifier\n   VerboseStatusResponse ::= SEQUENCE\
    \ {\n     taInfo                 TrustAnchorChoiceList,\n     continPubKeyDecryptAlg\
    \ [0] AlgorithmIdentifier\n                   {KEY-WRAP, {SupportedWrapAlgorithms}}\
    \ OPTIONAL,\n     communities            [1] CommunityIdentifierList OPTIONAL,\n\
    \     tampSeqNumbers         [2] TAMPSequenceNumbers OPTIONAL }\n   TrustAnchorChoiceList\
    \ ::= SEQUENCE SIZE (1..MAX) OF\n        TrustAnchorChoice\n   TAMPSequenceNumber\
    \ ::= SEQUENCE {\n     keyId       KeyIdentifier,\n     seqNumber   SeqNumber\
    \ }\n   TAMPSequenceNumbers ::= SEQUENCE SIZE (1..MAX) OF TAMPSequenceNumber\n\
    \   -- Trust Anchor Update Message\n   tamp-update CONTENT-TYPE  ::=\n     { TAMPUpdate\
    \ IDENTIFIED BY id-ct-TAMP-update }\n   id-ct-TAMP-update OBJECT IDENTIFIER ::=\
    \ { id-tamp 3 }\n   TAMPUpdate ::= SEQUENCE {\n     version  [0] TAMPVersion DEFAULT\
    \ v2,\n     terse    [1] TerseOrVerbose DEFAULT verbose,\n     msgRef   TAMPMsgRef,\n\
    \     updates  SEQUENCE SIZE (1..MAX) OF TrustAnchorUpdate,\n     tampSeqNumbers\
    \ [2]TAMPSequenceNumbers OPTIONAL }\n   TrustAnchorUpdate ::= CHOICE {\n     add\
    \             [1] TrustAnchorChoice,\n     remove          [2] SubjectPublicKeyInfo,\n\
    \     change          [3] EXPLICIT TrustAnchorChangeInfoChoice }\n   TrustAnchorChangeInfoChoice\
    \ ::= CHOICE {\n     tbsCertChange  [0] TBSCertificateChangeInfo,\n     taChange\
    \       [1] TrustAnchorChangeInfo }\n   TBSCertificateChangeInfo  ::=  SEQUENCE\
    \  {\n     serialNumber         CertificateSerialNumber OPTIONAL,\n     signature\
    \            [0] AlgorithmIdentifier\n             {SIGNATURE-ALGORITHM, {SupportedSigAlgorithms}}\
    \ OPTIONAL,\n     issuer               [1] Name OPTIONAL,\n     validity     \
    \        [2] Validity OPTIONAL,\n     subject              [3] Name OPTIONAL,\n\
    \     subjectPublicKeyInfo [4] SubjectPublicKeyInfo,\n     exts              \
    \   [5] EXPLICIT Extensions{{...}} OPTIONAL }\n   TrustAnchorChangeInfo ::= SEQUENCE\
    \ {\n     pubKey          SubjectPublicKeyInfo,\n     keyId           KeyIdentifier\
    \ OPTIONAL,\n     taTitle         TrustAnchorTitle OPTIONAL,\n     certPath  \
    \      CertPathControls OPTIONAL,\n     exts            [1] Extensions{{...}}\
    \ OPTIONAL }\n   -- Trust Anchor Update Confirm Message\n   tamp-update-confirm\
    \ CONTENT-TYPE  ::=\n     { TAMPUpdateConfirm IDENTIFIED BY id-ct-TAMP-updateConfirm\
    \ }\n   id-ct-TAMP-updateConfirm OBJECT IDENTIFIER ::= { id-tamp 4 }\n   TAMPUpdateConfirm\
    \ ::= SEQUENCE {\n     version               [0] TAMPVersion DEFAULT v2,\n   \
    \  update                TAMPMsgRef,\n     confirm               UpdateConfirm\
    \ }\n   UpdateConfirm ::= CHOICE {\n     terseConfirm          [0] TerseUpdateConfirm,\n\
    \     verboseConfirm        [1] VerboseUpdateConfirm }\n   TerseUpdateConfirm\
    \ ::= StatusCodeList\n   StatusCodeList ::= SEQUENCE SIZE (1..MAX) OF StatusCode\n\
    \   VerboseUpdateConfirm ::= SEQUENCE {\n     status          StatusCodeList,\n\
    \     taInfo          TrustAnchorChoiceList,\n     tampSeqNumbers  TAMPSequenceNumbers\
    \ OPTIONAL,\n     usesApex        BOOLEAN DEFAULT TRUE }\n   -- Apex Trust Anchor\
    \ Update Message\n   tamp-apex-update CONTENT-TYPE  ::=\n       { TAMPApexUpdate\
    \ IDENTIFIED BY id-ct-TAMP-apexUpdate }\n   id-ct-TAMP-apexUpdate OBJECT IDENTIFIER\
    \ ::= { id-tamp 5 }\n   TAMPApexUpdate ::= SEQUENCE {\n     version          \
    \  [0] TAMPVersion DEFAULT v2,\n     terse              [1] TerseOrVerbose DEFAULT\
    \ verbose,\n     msgRef             TAMPMsgRef,\n     clearTrustAnchors  BOOLEAN,\n\
    \     clearCommunities   BOOLEAN,\n     seqNumber          SeqNumber OPTIONAL,\n\
    \     apexTA             TrustAnchorChoice }\n   -- Apex Trust Anchor Update Confirm\
    \ Message\n   tamp-apex-update-confirm CONTENT-TYPE  ::=\n     { TAMPApexUpdateConfirm\
    \ IDENTIFIED BY\n         id-ct-TAMP-apexUpdateConfirm }\n   id-ct-TAMP-apexUpdateConfirm\
    \ OBJECT IDENTIFIER ::= { id-tamp 6 }\n   TAMPApexUpdateConfirm ::= SEQUENCE {\n\
    \     version               [0] TAMPVersion DEFAULT v2,\n     apexReplace    \
    \       TAMPMsgRef,\n     apexConfirm           ApexUpdateConfirm }\n   ApexUpdateConfirm\
    \ ::= CHOICE {\n     terseApexConfirm      [0] TerseApexUpdateConfirm,\n     verboseApexConfirm\
    \    [1] VerboseApexUpdateConfirm }\n   TerseApexUpdateConfirm ::= StatusCode\n\
    \   VerboseApexUpdateConfirm ::= SEQUENCE {\n     status                  StatusCode,\n\
    \     taInfo                  TrustAnchorChoiceList,\n     communities       \
    \     [0] CommunityIdentifierList OPTIONAL,\n     tampSeqNumbers         [1] TAMPSequenceNumbers\
    \ OPTIONAL }\n   -- Community Update Message\n   tamp-community-update CONTENT-TYPE\
    \  ::=\n     { TAMPCommunityUpdate IDENTIFIED BY id-ct-TAMP-communityUpdate }\n\
    \   id-ct-TAMP-communityUpdate OBJECT IDENTIFIER ::= { id-tamp 7 }\n   TAMPCommunityUpdate\
    \ ::= SEQUENCE {\n     version         [0] TAMPVersion DEFAULT v2,\n     terse\
    \           [1] TerseOrVerbose DEFAULT verbose,\n     msgRef          TAMPMsgRef,\n\
    \     updates         CommunityUpdates }\n   CommunityUpdates ::= SEQUENCE {\n\
    \     remove       [1] CommunityIdentifierList OPTIONAL,\n     add          [2]\
    \ CommunityIdentifierList OPTIONAL }\n     -- At least one must be present\n \
    \  -- Community Update Confirm Message\n   tamp-community-update-confirm CONTENT-TYPE\
    \  ::=\n     { TAMPCommunityUpdateConfirm IDENTIFIED BY\n       id-ct-TAMP-communityUpdateConfirm\
    \ }\n   id-ct-TAMP-communityUpdateConfirm OBJECT IDENTIFIER ::=\n     { id-tamp\
    \ 8 }\n   TAMPCommunityUpdateConfirm ::= SEQUENCE {\n     version         [0]\
    \ TAMPVersion DEFAULT v2,\n     update          TAMPMsgRef,\n     commConfirm\
    \     CommunityConfirm }\n   CommunityConfirm ::= CHOICE {\n     terseCommConfirm\
    \      [0] TerseCommunityConfirm,\n     verboseCommConfirm    [1] VerboseCommunityConfirm\
    \ }\n   TerseCommunityConfirm ::= StatusCode\n   VerboseCommunityConfirm ::= SEQUENCE\
    \ {\n     status          StatusCode,\n     communities     CommunityIdentifierList\
    \ OPTIONAL }\n   -- Sequence Number Adjust Message\n   tamp-sequence-number-adjust\
    \ CONTENT-TYPE  ::=\n     { SequenceNumberAdjust IDENTIFIED BY id-ct-TAMP-seqNumAdjust\
    \ }\n   id-ct-TAMP-seqNumAdjust OBJECT IDENTIFIER ::= { id-tamp 10 }\n   SequenceNumberAdjust\
    \ ::= SEQUENCE {\n     version         [0] TAMPVersion DEFAULT v2,\n     msgRef\
    \          TAMPMsgRef }\n   -- Sequence Number Adjust Confirm Message\n   tamp-sequence-number-adjust-confirm\
    \ CONTENT-TYPE  ::=\n     { SequenceNumberAdjustConfirm IDENTIFIED BY\n      \
    \ id-ct-TAMP-seqNumAdjustConfirm }\n   id-ct-TAMP-seqNumAdjustConfirm OBJECT IDENTIFIER\
    \ ::= { id-tamp 11 }\n   SequenceNumberAdjustConfirm ::= SEQUENCE {\n     version\
    \         [0] TAMPVersion DEFAULT v2,\n     adjust          TAMPMsgRef,\n    \
    \ status          StatusCode }\n   -- TAMP Error Message\n   tamp-error CONTENT-TYPE\
    \  ::=\n     { TAMPError IDENTIFIED BY id-ct-TAMP-error }\n   id-ct-TAMP-error\
    \ OBJECT IDENTIFIER ::= { id-tamp 9 }\n   TAMPError ::= SEQUENCE {\n     version\
    \         [0] TAMPVersion DEFAULT v2,\n     msgType         OBJECT IDENTIFIER,\n\
    \     status          StatusCode,\n     msgRef          TAMPMsgRef OPTIONAL }\n\
    \   -- Status Codes\n   StatusCode ::= ENUMERATED {\n     success            \
    \                (0),\n     decodeFailure                      (1),\n     badContentInfo\
    \                     (2),\n     badSignedData                      (3),\n   \
    \  badEncapContent                    (4),\n     badCertificate              \
    \       (5),\n     badSignerInfo                      (6),\n     badSignedAttrs\
    \                     (7),\n     badUnsignedAttrs                   (8),\n   \
    \  missingContent                     (9),\n     noTrustAnchor               \
    \      (10),\n     notAuthorized                     (11),\n     badDigestAlgorithm\
    \                (12),\n     badSignatureAlgorithm             (13),\n     unsupportedKeySize\
    \                (14),\n     unsupportedParameters             (15),\n     signatureFailure\
    \                  (16),\n     insufficientMemory                (17),\n     unsupportedTAMPMsgType\
    \            (18),\n     apexTAMPAnchor                    (19),\n     improperTAAddition\
    \                (20),\n     seqNumFailure                     (21),\n     contingencyPublicKeyDecrypt\
    \       (22),\n     incorrectTarget                   (23),\n     communityUpdateFailed\
    \             (24),\n     trustAnchorNotFound               (25),\n     unsupportedTAAlgorithm\
    \            (26),\n     unsupportedTAKeySize              (27),\n     unsupportedContinPubKeyDecryptAlg\
    \ (28),\n     missingSignature                  (29),\n     resourcesBusy    \
    \                 (30),\n     versionNumberMismatch             (31),\n     missingPolicySet\
    \                  (32),\n     revokedCertificate                (33),\n     unsupportedTrustAnchorFormat\
    \      (34),\n     improperTAChange                  (35),\n     malformed   \
    \                      (36),\n     cmsError                          (37),\n \
    \    unsupportedTargetIdentifier       (38),\n     other                     \
    \       (127) }\n   -- Object Identifier Arc for Attributes\n   id-attributes\
    \ OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) country(16)\n     us(840) organization(1)\
    \ gov(101) dod(2) infosec(1) 5 }\n   -- TAMP Unsigned Attributes\n   -- These\
    \ attributes are unsigned attributes and go into the\n   --    UnsignedAttributes\
    \ set in [RFC5652]\n   TAMPUnsignedAttributes ATTRIBUTE ::= {\n     contingency-public-key-decrypt-key,\n\
    \     ... -- Expect additional attributes --\n     }\n   -- contingency-public-key-decrypt-key\
    \ unsigned attribute\n   contingency-public-key-decrypt-key ATTRIBUTE ::= {\n\
    \     TYPE PlaintextSymmetricKey IDENTIFIED BY\n     id-aa-TAMP-contingencyPublicKeyDecryptKey\
    \ }\n   id-aa-TAMP-contingencyPublicKeyDecryptKey OBJECT IDENTIFIER ::= {\n  \
    \   id-attributes 63 }\n   PlaintextSymmetricKey ::= OCTET STRING\n   -- id-pe-wrappedApexContinKey\
    \ extension\n   wrappedApexContinKey EXTENSION ::= {\n        SYNTAX         ApexContingencyKey\n\
    \        IDENTIFIED BY  id-pe-wrappedApexContinKey }\n   id-pe-wrappedApexContinKey\
    \ OBJECT IDENTIFIER ::=\n        { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \          security(5) mechanisms(5) pkix(7) pe(1) 20 }\n   ApexContingencyKey\
    \ ::= SEQUENCE {\n     wrapAlgorithm\n         AlgorithmIdentifier{KEY-WRAP, {SupportedWrapAlgorithms}},\n\
    \     wrappedContinPubKey  OCTET STRING }\n   END\n"
- title: A.2.  ASN.1 Module Using 1988 Syntax
  contents:
  - "A.2.  ASN.1 Module Using 1988 Syntax\n   TAMP-Protocol-v2-88\n      { joint-iso-ccitt(2)\
    \ country(16) us(840) organization(1)\n        gov(101) dod(2) infosec(1) modules(0)\
    \ 31 }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   IMPORTS\n     TrustAnchorChoice,\
    \ TrustAnchorTitle, CertPathControls\n     FROM TrustAnchorInfoModule-88 -- from\
    \ [RFC5914]\n          { joint-iso-ccitt(2) country(16) us(840) organization(1)\n\
    \            gov(101) dod(2) infosec(1) modules(0) 37 }\n     AlgorithmIdentifier,\
    \ Certificate, Name, Attribute, TBSCertificate,\n     SubjectPublicKeyInfo, CertificateSerialNumber,\
    \ Validity, Extensions\n       FROM PKIX1Explicit88 -- from [RFC5280]\n      \
    \   { iso(1) identified-organization(3) dod(6) internet(1)\n           security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n           id-pkix1-explicit(18) }\n     KeyIdentifier,\
    \ AnotherName\n       FROM PKIX1Implicit88 -- from [RFC5280]\n         { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n           security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n           id-pkix1-implicit(19) } ;\n   -- Object Identifier\
    \ Arc for TAMP Message Content Types\n   id-tamp OBJECT IDENTIFIER ::= { joint-iso-ccitt(2)\
    \ country(16)\n   us(840) organization(1) gov(101) dod(2) infosec(1) formats(2)\
    \ 77 }\n   -- CMS Content Types\n   -- TAMP Status Query Message\n   id-ct-TAMP-statusQuery\
    \ OBJECT IDENTIFIER ::= { id-tamp 1 }\n   TAMPStatusQuery ::= SEQUENCE {\n   \
    \  version         [0] TAMPVersion DEFAULT v2,\n     terse           [1] TerseOrVerbose\
    \ DEFAULT verbose,\n     query           TAMPMsgRef }\n   TAMPVersion ::= INTEGER\
    \ { v1(1), v2(2) }\n   TerseOrVerbose ::= ENUMERATED { terse(1), verbose(2) }\n\
    \   SeqNumber ::= INTEGER (0..9223372036854775807)\n   TAMPMsgRef ::= SEQUENCE\
    \ {\n     target          TargetIdentifier,\n     seqNum          SeqNumber }\n\
    \   TargetIdentifier ::= CHOICE {\n     hwModules    [1] HardwareModuleIdentifierList,\n\
    \     communities  [2] CommunityIdentifierList,\n     allModules   [3] NULL,\n\
    \     uri          [4] IA5String,\n     otherName    [5] AnotherName }\n   HardwareModuleIdentifierList\
    \ ::= SEQUENCE SIZE (1..MAX) OF\n                                     HardwareModules\n\
    \   HardwareModules ::= SEQUENCE {\n     hwType          OBJECT IDENTIFIER,\n\
    \     hwSerialEntries SEQUENCE SIZE (1..MAX) OF HardwareSerialEntry }\n   HardwareSerialEntry\
    \ ::= CHOICE {\n     all             NULL,\n     single          OCTET STRING,\n\
    \     block           SEQUENCE {\n       low             OCTET STRING,\n     \
    \  high            OCTET STRING } }\n   CommunityIdentifierList ::= SEQUENCE SIZE\
    \ (0..MAX) OF Community\n   Community ::= OBJECT IDENTIFIER\n   -- TAMP Status\
    \ Response Message\n   id-ct-TAMP-statusResponse OBJECT IDENTIFIER ::= { id-tamp\
    \ 2 }\n   TAMPStatusResponse ::= SEQUENCE {\n     version   [0] TAMPVersion DEFAULT\
    \ v2,\n     query     TAMPMsgRef,\n     response  StatusResponse,\n     usesApex\
    \  BOOLEAN DEFAULT TRUE }\n   StatusResponse ::= CHOICE {\n     terseResponse\
    \         [0] TerseStatusResponse,\n     verboseResponse       [1] VerboseStatusResponse\
    \ }\n   TerseStatusResponse ::= SEQUENCE {\n     taKeyIds              KeyIdentifiers,\n\
    \     communities           CommunityIdentifierList OPTIONAL }\n   KeyIdentifiers\
    \ ::= SEQUENCE SIZE (1..MAX) OF KeyIdentifier\n   VerboseStatusResponse ::= SEQUENCE\
    \ {\n     taInfo                 TrustAnchorChoiceList,\n     continPubKeyDecryptAlg\
    \ [0] AlgorithmIdentifier OPTIONAL,\n     communities            [1] CommunityIdentifierList\
    \ OPTIONAL,\n     tampSeqNumbers         [2] TAMPSequenceNumbers OPTIONAL }\n\
    \   TrustAnchorChoiceList ::= SEQUENCE SIZE (1..MAX) OF\n        TrustAnchorChoice\n\
    \   TAMPSequenceNumber ::= SEQUENCE {\n     keyId       KeyIdentifier,\n     seqNumber\
    \   SeqNumber }\n   TAMPSequenceNumbers ::= SEQUENCE SIZE (1..MAX) OF\n      \
    \  TAMPSequenceNumber\n   -- Trust Anchor Update Message\n   id-ct-TAMP-update\
    \ OBJECT IDENTIFIER ::= { id-tamp 3 }\n   TAMPUpdate ::= SEQUENCE {\n     version\
    \  [0] TAMPVersion DEFAULT v2,\n     terse    [1] TerseOrVerbose DEFAULT verbose,\n\
    \     msgRef   TAMPMsgRef,\n     updates  SEQUENCE SIZE (1..MAX) OF TrustAnchorUpdate,\n\
    \     tampSeqNumbers [2]TAMPSequenceNumbers OPTIONAL }\n   TrustAnchorUpdate ::=\
    \ CHOICE {\n     add             [1] TrustAnchorChoice,\n     remove         \
    \ [2] SubjectPublicKeyInfo,\n     change          [3] EXPLICIT TrustAnchorChangeInfoChoice\
    \ }\n   TrustAnchorChangeInfoChoice ::= CHOICE {\n     tbsCertChange [0] TBSCertificateChangeInfo,\n\
    \     taChange      [1] TrustAnchorChangeInfo }\n   TBSCertificateChangeInfo \
    \ ::=  SEQUENCE  {\n     serialNumber         CertificateSerialNumber OPTIONAL,\n\
    \     signature            [0] AlgorithmIdentifier OPTIONAL,\n     issuer    \
    \           [1] Name OPTIONAL,\n     validity             [2] Validity OPTIONAL,\n\
    \     subject              [3] Name OPTIONAL,\n     subjectPublicKeyInfo [4] SubjectPublicKeyInfo,\n\
    \     exts                 [5] EXPLICIT Extensions OPTIONAL }\n   TrustAnchorChangeInfo\
    \ ::= SEQUENCE {\n     pubKey          SubjectPublicKeyInfo,\n     keyId     \
    \      KeyIdentifier OPTIONAL,\n     taTitle         TrustAnchorTitle OPTIONAL,\n\
    \     certPath        CertPathControls OPTIONAL,\n     exts            [1] Extensions\
    \ OPTIONAL }\n   -- Trust Anchor Update Confirm Message\n   id-ct-TAMP-updateConfirm\
    \ OBJECT IDENTIFIER ::= { id-tamp 4 }\n   TAMPUpdateConfirm ::= SEQUENCE {\n \
    \    version               [0] TAMPVersion DEFAULT v2,\n     update          \
    \      TAMPMsgRef,\n     confirm               UpdateConfirm }\n   UpdateConfirm\
    \ ::= CHOICE {\n     terseConfirm          [0] TerseUpdateConfirm,\n     verboseConfirm\
    \        [1] VerboseUpdateConfirm }\n   TerseUpdateConfirm ::= StatusCodeList\n\
    \   StatusCodeList ::= SEQUENCE SIZE (1..MAX) OF StatusCode\n   VerboseUpdateConfirm\
    \ ::= SEQUENCE {\n     status          StatusCodeList,\n     taInfo          TrustAnchorChoiceList,\n\
    \     tampSeqNumbers  TAMPSequenceNumbers OPTIONAL,\n     usesApex        BOOLEAN\
    \ DEFAULT TRUE }\n   -- Apex Trust Anchor Update Message\n   id-ct-TAMP-apexUpdate\
    \ OBJECT IDENTIFIER ::= { id-tamp 5 }\n   TAMPApexUpdate ::= SEQUENCE {\n    \
    \ version            [0] TAMPVersion DEFAULT v2,\n     terse              [1]\
    \ TerseOrVerbose DEFAULT verbose,\n     msgRef             TAMPMsgRef,\n     clearTrustAnchors\
    \  BOOLEAN,\n     clearCommunities   BOOLEAN,\n     seqNumber          SeqNumber\
    \ OPTIONAL,\n     apexTA             TrustAnchorChoice }\n   -- Apex Trust Anchor\
    \ Update Confirm Message\n   id-ct-TAMP-apexUpdateConfirm OBJECT IDENTIFIER ::=\
    \ { id-tamp 6 }\n   TAMPApexUpdateConfirm ::= SEQUENCE {\n     version       \
    \        [0] TAMPVersion DEFAULT v2,\n     apexReplace           TAMPMsgRef,\n\
    \     apexConfirm           ApexUpdateConfirm }\n   ApexUpdateConfirm ::= CHOICE\
    \ {\n     terseApexConfirm      [0] TerseApexUpdateConfirm,\n     verboseApexConfirm\
    \    [1] VerboseApexUpdateConfirm }\n   TerseApexUpdateConfirm ::= StatusCode\n\
    \   VerboseApexUpdateConfirm ::= SEQUENCE {\n     status                  StatusCode,\n\
    \     taInfo                  TrustAnchorChoiceList,\n     communities       \
    \     [0] CommunityIdentifierList OPTIONAL,\n     tampSeqNumbers         [1] TAMPSequenceNumbers\
    \ OPTIONAL }\n   -- Community Update Message\n   id-ct-TAMP-communityUpdate OBJECT\
    \ IDENTIFIER ::= { id-tamp 7 }\n   TAMPCommunityUpdate ::= SEQUENCE {\n     version\
    \         [0] TAMPVersion DEFAULT v2,\n     terse           [1] TerseOrVerbose\
    \ DEFAULT verbose,\n     msgRef          TAMPMsgRef,\n     updates         CommunityUpdates\
    \ }\n   CommunityUpdates ::= SEQUENCE {\n     remove          [1] CommunityIdentifierList\
    \ OPTIONAL,\n     add             [2] CommunityIdentifierList OPTIONAL }\n   \
    \  -- At least one must be present\n   -- Community Update Confirm Message\n \
    \  id-ct-TAMP-communityUpdateConfirm OBJECT IDENTIFIER ::= { id-tamp 8 }\n   TAMPCommunityUpdateConfirm\
    \ ::= SEQUENCE {\n     version         [0] TAMPVersion DEFAULT v2,\n     update\
    \          TAMPMsgRef,\n     commConfirm     CommunityConfirm }\n   CommunityConfirm\
    \ ::= CHOICE {\n     terseCommConfirm      [0] TerseCommunityConfirm,\n     verboseCommConfirm\
    \    [1] VerboseCommunityConfirm }\n   TerseCommunityConfirm ::= StatusCode\n\
    \   VerboseCommunityConfirm ::= SEQUENCE {\n     status          StatusCode,\n\
    \     communities     CommunityIdentifierList OPTIONAL }\n   -- Sequence Number\
    \ Adjust Message\n   id-ct-TAMP-seqNumAdjust OBJECT IDENTIFIER ::= { id-tamp 10\
    \ }\n   SequenceNumberAdjust ::= SEQUENCE {\n     version         [0] TAMPVersion\
    \ DEFAULT v2,\n     msgRef          TAMPMsgRef }\n   -- Sequence Number Adjust\
    \ Confirm Message\n   id-ct-TAMP-seqNumAdjustConfirm OBJECT IDENTIFIER ::= { id-tamp\
    \ 11 }\n   SequenceNumberAdjustConfirm ::= SEQUENCE {\n     version         [0]\
    \ TAMPVersion DEFAULT v2,\n     adjust          TAMPMsgRef,\n     status     \
    \     StatusCode }\n   -- TAMP Error Message\n   id-ct-TAMP-error OBJECT IDENTIFIER\
    \ ::= { id-tamp 9 }\n   TAMPError ::= SEQUENCE {\n     version         [0] TAMPVersion\
    \ DEFAULT v2,\n     msgType         OBJECT IDENTIFIER,\n     status          StatusCode,\n\
    \     msgRef          TAMPMsgRef OPTIONAL }\n   -- Status Codes\n   StatusCode\
    \ ::= ENUMERATED {\n     success                            (0),\n     decodeFailure\
    \                      (1),\n     badContentInfo                     (2),\n  \
    \   badSignedData                      (3),\n     badEncapContent            \
    \        (4),\n     badCertificate                     (5),\n     badSignerInfo\
    \                      (6),\n     badSignedAttrs                     (7),\n  \
    \   badUnsignedAttrs                   (8),\n     missingContent             \
    \        (9),\n     noTrustAnchor                     (10),\n     notAuthorized\
    \                     (11),\n     badDigestAlgorithm                (12),\n  \
    \   badSignatureAlgorithm             (13),\n     unsupportedKeySize         \
    \       (14),\n     unsupportedParameters             (15),\n     signatureFailure\
    \                  (16),\n     insufficientMemory                (17),\n     unsupportedTAMPMsgType\
    \            (18),\n     apexTAMPAnchor                    (19),\n     improperTAAddition\
    \                (20),\n     seqNumFailure                     (21),\n     contingencyPublicKeyDecrypt\
    \       (22),\n     incorrectTarget                   (23),\n     communityUpdateFailed\
    \             (24),\n     trustAnchorNotFound               (25),\n     unsupportedTAAlgorithm\
    \            (26),\n     unsupportedTAKeySize              (27),\n     unsupportedContinPubKeyDecryptAlg\
    \ (28),\n     missingSignature                  (29),\n     resourcesBusy    \
    \                 (30),\n     versionNumberMismatch             (31),\n     missingPolicySet\
    \                  (32),\n     revokedCertificate                (33),\n     unsupportedTrustAnchorFormat\
    \      (34),\n     improperTAChange                  (35),\n     malformed   \
    \                      (36),\n     cmsError                          (37),\n \
    \    unsupportedTargetIdentifier       (38),\n     other                     \
    \       (127) }\n   -- Object Identifier Arc for Attributes\n   id-attributes\
    \ OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) country(16)\n       us(840) organization(1)\
    \ gov(101) dod(2) infosec(1) 5 }\n   -- id-aa-TAMP-contingencyPublicKeyDecryptKey\
    \ uses\n   -- PlaintextSymmetricKey syntax\n   id-aa-TAMP-contingencyPublicKeyDecryptKey\
    \ OBJECT IDENTIFIER ::= {\n     id-attributes 63 }\n   PlaintextSymmetricKey ::=\
    \ OCTET STRING\n   -- id-pe-wrappedApexContinKey extension\n   id-pe-wrappedApexContinKey\
    \ OBJECT IDENTIFIER ::=\n        { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \          security(5) mechanisms(5) pkix(7) pe(1) 20 }\n   ApexContingencyKey\
    \ ::= SEQUENCE {\n     wrapAlgorithm        AlgorithmIdentifier,\n     wrappedContinPubKey\
    \  OCTET STRING }\n   END\n"
- title: Appendix B.  Media Type Registrations
  contents:
  - "Appendix B.  Media Type Registrations\n   Eleven media type registrations are\
    \ provided in this appendix, one\n   for each content type defined in this specification.\
    \  As noted in\n   Section 2, in all cases TAMP messages are encapsulated within\n\
    \   ContentInfo structures.  Signed messages are additionally\n   encapsulated\
    \ within a SignedData structure.\n"
- title: B.1.  application/tamp-status-query
  contents:
  - "B.1.  application/tamp-status-query\n   Media type name: application\n   Subtype\
    \ name: tamp-status-query\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: binary\n   Security considerations: Carries\
    \ a signed request for status\n   information.  Integrity protection is discussed\
    \ in Section 4.1.\n   Replay detection is discussed in Section 6.\n   Interoperability\
    \ considerations: None\n   Published specification: RFC 5934\n   Applications\
    \ that use this media type: TAMP clients responding to\n   requests for status\
    \ information.\n   Additional information:\n      Magic number(s): None\n    \
    \  File extension(s): .tsq\n      Macintosh File Type Code(s):\n   Person & email\
    \ address to contact for further information:\n   Sam Ashmore - srashmo@radium.ncsc.mil\n\
    \   Intended usage: LIMITED USE\n   Restrictions on usage: None\n   Author: Sam\
    \ Ashmore - srashmo@radium.ncsc.mil\n   Change controller: IESG\n"
- title: B.2.  application/tamp-status-response
  contents:
  - "B.2.  application/tamp-status-response\n   Media type name: application\n   Subtype\
    \ name: tamp-status-response\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: binary\n   Security considerations: Carries\
    \ optionally signed status\n   information.  Integrity protection is discussed\
    \ in Section 4.2.\n   Interoperability considerations: None\n   Published specification:\
    \ RFC 5934\n   Applications that use this media type: TAMP clients responding\
    \ to\n   requests for status information.\n   Additional information:\n      Magic\
    \ number(s): None\n      File extension(s): .tsr\n      Macintosh File Type Code(s):\n\
    \   Person & email address to contact for further information:\n   Sam Ashmore\
    \ - srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n   Restrictions on\
    \ usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n   Change controller:\
    \ IESG\n"
- title: B.3.  application/tamp-update
  contents:
  - "B.3.  application/tamp-update\n   Media type name: application\n   Subtype name:\
    \ tamp-update\n   Required parameters: None\n   Optional parameters: None\n  \
    \ Encoding considerations: binary\n   Security considerations: Carries a signed\
    \ trust anchor update\n   message.  Integrity protection is discussed in Section\
    \ 4.3.  Replay\n   detection is discussed in Section 6.\n   Interoperability considerations:\
    \ None\n   Published specification: RFC 5934\n   Applications that use this media\
    \ type: TAMP clients responding to\n   requests to update trust anchor information.\n\
    \   Additional information:\n      Magic number(s): None\n      File extension(s):\
    \ .tur\n      Macintosh File Type Code(s):\n   Person & email address to contact\
    \ for further information:\n   Sam Ashmore - srashmo@radium.ncsc.mil\n   Intended\
    \ usage: LIMITED USE\n   Restrictions on usage: None\n   Author: Sam Ashmore -\
    \ srashmo@radium.ncsc.mil\n   Change controller: IESG\n"
- title: B.4.  application/tamp-update-confirm
  contents:
  - "B.4.  application/tamp-update-confirm\n   Media type name: application\n   Subtype\
    \ name: tamp-update-confirm\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: binary\n   Security considerations: Carries\
    \ an optionally signed TAMP update\n   response.  Integrity protection is discussed\
    \ in Section 4.4.\n   Interoperability considerations: None\n   Published specification:\
    \ RFC 5934\n   Applications that use this media type: TAMP clients responding\
    \ to\n   requests to update trust anchor information.\n   Additional information:\n\
    \      Magic number(s): None\n      File extension(s): .tuc\n      Macintosh File\
    \ Type Code(s):\n   Person & email address to contact for further information:\n\
    \   Sam Ashmore - srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n  \
    \ Restrictions on usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n\
    \   Change controller: IESG\n"
- title: B.5.  application/tamp-apex-update
  contents:
  - "B.5.  application/tamp-apex-update\n   Media type name: application\n   Subtype\
    \ name: tamp-apex-update\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: binary\n   Security considerations: Carries\
    \ a signed request to update an apex\n   trust anchor information.  Integrity\
    \ protection is discussed in\n   Section 4.5.  Replay detection is discussed in\
    \ Section 6.\n   Interoperability considerations: None\n   Published specification:\
    \ RFC 5934\n   Applications that use this media type: TAMP clients responding\
    \ to\n   requests to update an apex trust anchor.\n   Additional information:\n\
    \      Magic number(s): None\n      File extension(s): .tau\n      Macintosh File\
    \ Type Code(s):\n   Person & email address to contact for further information:\n\
    \   Sam Ashmore - srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n  \
    \ Restrictions on usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n\
    \   Change controller: IESG\n"
- title: B.6.  application/tamp-apex-update-confirm
  contents:
  - "B.6.  application/tamp-apex-update-confirm\n   Media type name: application\n\
    \   Subtype name: tamp-apex-update-confirm\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: binary\n   Security considerations:\
    \ Carries an optionally signed response to an\n   apex update request.  Integrity\
    \ protection is discussed in\n   Section 4.6.\n   Interoperability considerations:\
    \ None\n   Published specification: RFC 5934\n   Applications that use this media\
    \ type: TAMP clients responding to\n   requests to update an apex trust anchor.\n\
    \   Additional information:\n      Magic number(s): None\n      File extension(s):\
    \ .auc\n      Macintosh File Type Code(s):\n   Person & email address to contact\
    \ for further information:\n   Sam Ashmore - srashmo@radium.ncsc.mil\n   Intended\
    \ usage: LIMITED USE\n   Restrictions on usage: None\n   Author: Sam Ashmore -\
    \ srashmo@radium.ncsc.mil\n   Change controller: IESG\n"
- title: B.7.  application/tamp-community-update
  contents:
  - "B.7.  application/tamp-community-update\n   Media type name: application\n  \
    \ Subtype name: tamp-community-update\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: binary\n   Security considerations:\
    \ Carries a signed request to update community\n   membership information.  Integrity\
    \ protection is discussed in\n   Section 4.7.  Replay detection is discussed in\
    \ Section 6.\n   Interoperability considerations: None\n   Published specification:\
    \ RFC 5934\n   Applications that use this media type: TAMP clients responding\
    \ to\n   requests to update community membership.\n   Additional information:\n\
    \      Magic number(s): None\n      File extension(s): .tcu\n      Macintosh File\
    \ Type Code(s):\n   Person & email address to contact for further information:\n\
    \   Sam Ashmore - srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n  \
    \ Restrictions on usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n\
    \   Change controller: IESG\n"
- title: B.8.  application/tamp-community-update-confirm
  contents:
  - "B.8.  application/tamp-community-update-confirm\n   Media type name: application\n\
    \   Subtype name: tamp-community-update-confirm\n   Required parameters: None\n\
    \   Optional parameters: None\n   Encoding considerations: binary\n   Security\
    \ considerations: Carries an optionally signed response to a\n   community update\
    \ request.  Integrity protection is discussed in\n   Section 4.8.\n   Interoperability\
    \ considerations: None\n   Published specification: RFC 5934\n   Applications\
    \ that use this media type: TAMP clients responding to\n   requests to update\
    \ community membership.\n   Additional information:\n      Magic number(s): None\n\
    \      File extension(s): .cuc\n      Macintosh File Type Code(s):\n   Person\
    \ & email address to contact for further information:\n   Sam Ashmore - srashmo@radium.ncsc.mil\n\
    \   Intended usage: LIMITED USE\n   Restrictions on usage: None\n   Author: Sam\
    \ Ashmore - srashmo@radium.ncsc.mil\n   Change controller: IESG\n"
- title: B.9.  application/tamp-sequence-adjust
  contents:
  - "B.9.  application/tamp-sequence-adjust\n   Media type name: application\n   Subtype\
    \ name: tamp-sequence-adjust\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: binary\n   Security considerations: Carries\
    \ a signed request to update sequence\n   number information.  Integrity protection\
    \ is discussed in\n   Section 4.9.  Replay detection is discussed in Section 6.\n\
    \   Interoperability considerations: None\n   Published specification: RFC 5934\n\
    \   Applications that use this media type: TAMP clients responding to\n   requests\
    \ to update sequence number information.\n   Additional information:\n      Magic\
    \ number(s): None\n      File extension(s): .tsa\n      Macintosh File Type Code(s):\n\
    \   Person & email address to contact for further information:\n   Sam Ashmore\
    \ - srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n   Restrictions on\
    \ usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n   Change controller:\
    \ IESG\n"
- title: B.10.  application/tamp-sequence-adjust-confirm
  contents:
  - "B.10.  application/tamp-sequence-adjust-confirm\n   Media type name: application\n\
    \   Subtype name: tamp-sequence-adjust-confirm\n   Required parameters: None\n\
    \   Optional parameters: None\n   Encoding considerations: binary\n   Security\
    \ considerations: Carries an optionally signed sequence number\n   adjust confirmation\
    \ message.  Integrity protection is discussed in\n   Section 4.10.\n   Interoperability\
    \ considerations: None\n   Published specification: RFC 5934\n   Applications\
    \ that use this media type: TAMP clients responding to\n   requests to update\
    \ sequence number information.\n   Additional information:\n      Magic number(s):\
    \ None\n      File extension(s): .sac\n      Macintosh File Type Code(s):\n  \
    \ Person & email address to contact for further information:\n   Sam Ashmore -\
    \ srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n   Restrictions on\
    \ usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n   Change controller:\
    \ IESG\n"
- title: B.11.  application/tamp-error
  contents:
  - "B.11.  application/tamp-error\n   Media type name: application\n   Subtype name:\
    \ tamp-error\n   Required parameters: None\n   Optional parameters: None\n   Encoding\
    \ considerations: binary\n   Security considerations: Carries optionally signed\
    \ error information\n   collecting during TAMP processing.  Integrity protection\
    \ is discussed\n   in Section 4.11.\n   Interoperability considerations: None\n\
    \   Published specification: RFC 5934\n   Applications that use this media type:\
    \ TAMP clients processing TAMP\n   messages.\n   Additional information:\n   \
    \   Magic number(s): None\n      File extension(s): .ter\n      Macintosh File\
    \ Type Code(s):\n   Person & email address to contact for further information:\n\
    \   Sam Ashmore - srashmo@radium.ncsc.mil\n   Intended usage: LIMITED USE\n  \
    \ Restrictions on usage: None\n   Author: Sam Ashmore - srashmo@radium.ncsc.mil\n\
    \   Change controller: IESG\n"
- title: Appendix C.  TAMP over HTTP
  contents:
  - "Appendix C.  TAMP over HTTP\n   This appendix describes the formatting and transportation\
    \ conventions\n   for the TAMP messages when carried by HTTP [RFC2616].  Each\
    \ TAMP\n   message type is covered by a subsection below.  Each TAMP request\n\
    \   message sent via HTTP is responded to either with an HTTP response\n   containing\
    \ a TAMP response or error or, if failure occurs prior to\n   invoking TAMP, an\
    \ HTTP error.  TAMP response, confirmation, and error\n   messages are not suitable\
    \ for caching.  In order for TAMP clients and\n   servers using HTTP to interoperate,\
    \ the following rules apply.\n   o  Clients MUST use the POST method to submit\
    \ their requests.\n   o  Servers MUST use the 200 response code for successful\
    \ responses.\n   o  Clients MAY attempt to send HTTPS requests using Transport\
    \ Layer\n      Security (TLS) 1.0 or later, although servers are not required\
    \ to\n      support TLS.\n   o  Servers MUST NOT assume client support for any\
    \ type of HTTP\n      authentication such as cookies, Basic authentication, or\
    \ Digest\n      authentication.\n   o  Clients and servers are expected to follow\
    \ the other rules and\n      restrictions in [RFC2616].  Note that some of those\
    \ rules are for\n      HTTP methods other than POST; clearly, only the rules that\
    \ apply\n      to POST are relevant for this specification.\n"
- title: C.1.  TAMP Status Query Message
  contents:
  - "C.1.  TAMP Status Query Message\n   A TAMP Status Query Message using the POST\
    \ method is constructed as\n   follows: The Content-Type header MUST have the\
    \ value \"application/\n   tamp-status-query\".\n   The body of the message is\
    \ the binary value of the DER encoding of\n   the TAMPStatusQuery, wrapped in\
    \ a CMS body as described in Section 2.\n"
- title: C.2.  TAMP Status Response Message
  contents:
  - "C.2.  TAMP Status Response Message\n   An HTTP-based TAMP Status Response message\
    \ is composed of the\n   appropriate HTTP headers, followed by the binary value\
    \ of the DER\n   encoding of the TAMPStatusResponse, wrapped in a CMS body as\n\
    \   described in Section 2.\n   The Content-Type header MUST have the value \"\
    application/\n   tamp-status-response.\"\n"
- title: C.3.  Trust Anchor Update Message
  contents:
  - "C.3.  Trust Anchor Update Message\n   A Trust Anchor Update Message using the\
    \ POST method is constructed as\n   follows: The Content-Type header MUST have\
    \ the value \"application/\n   tamp-update\".\n   The body of the message is the\
    \ binary value of the DER encoding of\n   the TAMPUpdate, wrapped in a CMS body\
    \ as described in Section 2.\n"
- title: C.4.  Trust Anchor Update Confirm Message
  contents:
  - "C.4.  Trust Anchor Update Confirm Message\n   An HTTP-based Trust Anchor Update\
    \ Confirm message is composed of the\n   appropriate HTTP headers, followed by\
    \ the binary value of the DER\n   encoding of the TAMPUpdateConfirm, wrapped in\
    \ a CMS body as described\n   in Section 2.\n   The Content-Type header MUST have\
    \ the value \"application/\n   tamp-update-confirm\".\n"
- title: C.5.  Apex Trust Anchor Update Message
  contents:
  - "C.5.  Apex Trust Anchor Update Message\n   An Apex Trust Anchor Update Message\
    \ using the POST method is\n   constructed as follows: The Content-Type header\
    \ MUST have the value\n   \"application/tamp-apex-update\".\n   The body of the\
    \ message is the binary value of the DER encoding of\n   the TAMPApexUpdate, wrapped\
    \ in a CMS body as described in Section 2.\n"
- title: C.6.  Apex Trust Anchor Update Confirm Message
  contents:
  - "C.6.  Apex Trust Anchor Update Confirm Message\n   An HTTP-based Apex Trust Anchor\
    \ Update Confirm message is composed of\n   the appropriate HTTP headers, followed\
    \ by the binary value of the DER\n   encoding of the TAMPApexUpdateConfirm, wrapped\
    \ in a CMS body as\n   described in Section 2.\n   The Content-Type header MUST\
    \ have the value \"application/\n   tamp-apex-update-confirm\".\n"
- title: C.7.  Community Update Message
  contents:
  - "C.7.  Community Update Message\n   A Community Update Message using the POST\
    \ method is constructed as\n   follows: The Content-Type header MUST have the\
    \ value \"application/\n   tamp-community-update\".\n   The body of the message\
    \ is the binary value of the DER encoding of\n   the TAMPCommunityUpdate, wrapped\
    \ in a CMS body as described in\n   Section 2.\n"
- title: C.8.  Community Update Confirm Message
  contents:
  - "C.8.  Community Update Confirm Message\n   An HTTP-based Community Update Confirm\
    \ message is composed of the\n   appropriate HTTP headers, followed by the binary\
    \ value of the DER\n   encoding of the TAMPCommunityUpdateConfirm, wrapped in\
    \ a CMS body as\n   described in Section 2.\n   The Content-Type header MUST have\
    \ the value \"application/\n   tamp-community-update-confirm\".\n"
- title: C.9.  Sequence Number Adjust Message
  contents:
  - "C.9.  Sequence Number Adjust Message\n   A Sequence Number Adjust Message using\
    \ the POST method is constructed\n   as follows: The Content-Type header MUST\
    \ have the value \"application/\n   tamp-sequence-adjust\".\n   The body of the\
    \ message is the binary value of the DER encoding of\n   the SequenceNumberAdjust,\
    \ wrapped in a CMS body as described in\n   Section 2.\n"
- title: C.10.  Sequence Number Adjust Confirm Message
  contents:
  - "C.10.  Sequence Number Adjust Confirm Message\n   An HTTP-based Sequence Number\
    \ Adjust Confirm message is composed of\n   the appropriate HTTP headers, followed\
    \ by the binary value of the DER\n   encoding of the SequenceNumberAdjustConfirm,\
    \ wrapped in a CMS body as\n   described in Section 2.\n   The Content-Type header\
    \ MUST have the value \"application/\n   tamp-sequence-adjust-confirm\".\n"
- title: C.11.  TAMP Error Message
  contents:
  - "C.11.  TAMP Error Message\n   An HTTP-based TAMP Error message is composed of\
    \ the appropriate HTTP\n   headers, followed by the binary value of the DER encoding\
    \ of the\n   TAMPError, wrapped in a CMS body as described in Section 2.\n   The\
    \ Content-Type header MUST have the value \"application/tamp-error\".\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russ Housley\n   Vigil Security, LLC\n   918 Spring Knoll\
    \ Drive\n   Herndon, VA  20170\n   USA\n   EMail: housley@vigilsec.com\n   Sam\
    \ Ashmore\n   National Security Agency\n   Suite 6751\n   9800 Savage Road\n \
    \  Fort Meade, MD  20755\n   USA\n   EMail: srashmo@radium.ncsc.mil\n   Carl Wallace\n\
    \   Cygnacom Solutions\n   Suite 5400\n   7925 Jones Branch Drive\n   McLean,\
    \ VA  22102\n   USA\n   EMail: cwallace@cygnacom.com\n"
