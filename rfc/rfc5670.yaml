- title: __initial_text__
  contents:
  - '              Metering and Marking Behaviour of PCN-Nodes

    '
- title: Abstract
  contents:
  - "Abstract\n   The objective of Pre-Congestion Notification (PCN) is to protect\
    \ the\n   quality of service (QoS) of inelastic flows within a Diffserv domain\n\
    \   in a simple, scalable, and robust fashion.  This document defines the\n  \
    \ two metering and marking behaviours of PCN-nodes.  Threshold-metering\n   and\
    \ -marking marks all PCN-packets if the rate of PCN-traffic is\n   greater than\
    \ a configured rate (\"PCN-threshold-rate\").  Excess-\n   traffic-metering and\
    \ -marking marks a proportion of PCN-packets, such\n   that the amount marked\
    \ equals the rate of PCN-traffic in excess of a\n   configured rate (\"PCN-excess-rate\"\
    ).  The level of marking allows\n   PCN-boundary-nodes to make decisions about\
    \ whether to admit or\n   terminate PCN-flows.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n   This document may\
    \ contain material from IETF Documents or IETF\n   Contributions published or\
    \ made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................4\n  \
    \         1.1.1. Requirements Language ...............................5\n   2.\
    \ Specified PCN-Metering and -Marking Behaviours ..................5\n      2.1.\
    \ Behaviour Aggregate Classification Function ................5\n      2.2. Dropping\
    \ Function ..........................................5\n      2.3. Threshold-Meter\
    \ Function ...................................6\n      2.4. Excess-Traffic-Meter\
    \ Function ..............................6\n      2.5. Marking Function ...........................................7\n\
    \   3. Security Considerations .........................................7\n  \
    \ 4. Acknowledgements ................................................8\n   5.\
    \ References ......................................................8\n      5.1.\
    \ Normative Reference ........................................8\n      5.2. Informative\
    \ References .....................................8\n   Appendix A.  Example Algorithms\
    \ ...................................11\n     A.1.  Threshold-Metering and -Marking\
    \ ...........................11\n     A.2.  Excess-Traffic-Metering and -Marking\
    \ ......................12\n   Appendix B.  Implementation Notes .................................13\n\
    \     B.1.  Competing-Non-PCN-Traffic .................................13\n  \
    \   B.2.  Scope .....................................................14\n    \
    \ B.3.  Behaviour Aggregate Classification ........................15\n     B.4.\
    \  Dropping ..................................................15\n     B.5.  Threshold-Metering\
    \ ........................................17\n     B.6.  Excess-Traffic-Metering\
    \ ...................................18\n     B.7.  Marking ...................................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The objective of Pre-Congestion Notification (PCN) is to\
    \ protect the\n   quality of service (QoS) of inelastic flows within a Diffserv\
    \ domain\n   in a simple, scalable, and robust fashion.  Two mechanisms are used:\n\
    \   admission control to decide whether to admit or block a new flow\n   request,\
    \ and (in abnormal circumstances) flow termination to decide\n   whether to terminate\
    \ some of the existing flows.  To achieve this,\n   the overall rate of PCN-traffic\
    \ is metered on every link in the\n   domain, and PCN-packets are appropriately\
    \ marked when certain\n   configured rates are exceeded.  These configured rates\
    \ are below the\n   rate of the link, thus providing notification to boundary\
    \ nodes about\n   overloads before any congestion occurs (hence \"Pre-Congestion\n\
    \   Notification\").  The level of marking allows boundary nodes to make\n   decisions\
    \ about whether to admit or terminate.  Within the domain,\n   PCN-traffic is\
    \ forwarded in a prioritised Diffserv traffic class\n   [RFC2475].\n   This document\
    \ defines the two metering and marking behaviours of PCN-\n   nodes.  Their aim\
    \ is to enable PCN-nodes to give an \"early warning\"\n   of potential congestion\
    \ before there is any significant build-up of\n   PCN-packets in their queues.\
    \  In summary, their objectives are:\n   o  Threshold-metering and -marking: to\
    \ mark all PCN-packets (with a\n      \"threshold-mark\") when the bit rate of\
    \ PCN-traffic is greater than\n      its configured reference rate (\"PCN-threshold-rate\"\
    ).\n   o  Excess-traffic-metering and -marking: when the bit rate of PCN-\n  \
    \    packets is greater than its configured reference rate (\"PCN-\n      excess-rate\"\
    ), to mark PCN-packets (with an \"excess-traffic-mark\")\n      at a rate equal\
    \ to the difference between the rate of PCN-traffic\n      and the PCN-excess-rate.\n\
    \   Note that although [RFC3168] defines a broadly RED-like (Random Early\n  \
    \ Detection) default congestion marking behaviour, it allows\n   alternatives\
    \ to be defined; this document defines such an\n   alternative.\n   Section 2\
    \ below describes the functions involved, which in outline\n   (see Figure 1)\
    \ are:\n   o  Behaviour aggregate (BA) classification: decide whether or not an\n\
    \      incoming packet is a PCN-packet.\n   o  Dropping (optional): drop packets\
    \ if the link is overloaded.\n   o  Threshold-meter: determine whether the bit\
    \ rate of PCN-traffic\n      exceeds its configured reference rate (PCN-threshold-rate).\
    \  The\n      meter operates on all PCN-packets on the link, and not on\n    \
    \  individual flows.\n   o  Excess-traffic-meter: measure by how much the bit\
    \ rate of PCN-\n      traffic exceeds its configured reference rate (PCN-excess-rate).\n\
    \      The meter operates on all PCN-packets on the link, and not on\n      individual\
    \ flows.\n   o  PCN-mark: actually mark the PCN-packets, if the meter functions\n\
    \      indicate to do so.\n                                        +---------+\
    \    Result\n                                     +->|Threshold|-------+\n   \
    \                                  |  |  Meter  |       |\n                  \
    \                   |  +---------+       V\n         +----------+   +- - - - -+\
    \  |                +------+\n         |   BA     |   |         |  |         \
    \       |      |    Marked\n"
- title: Packet =>|Classifier|==>| Dropper |==?===============>|Marker|==> Packet
  contents:
  - 'Packet =>|Classifier|==>| Dropper |==?===============>|Marker|==> Packet

    '
- title: Stream   |          |   |         |  |                |      |    Stream
  contents:
  - "Stream   |          |   |         |  |                |      |    Stream\n  \
    \       +----------+   +- - - - -+  |                +------+\n              \
    \                       |  +---------+       ^\n                             \
    \        |  | Excess  |       |\n                                     +->| Traffic\
    \ |-------+\n                                        |  Meter  |    Result\n \
    \                                       +---------+\n       Figure 1: Schematic\
    \ of PCN-interior-node functionality\n   Appendix A gives an example of algorithms\
    \ that fulfil the\n   specification of Section 2, and Appendix B provides some\
    \ explanations\n   of and comments on Section 2.  Both the Appendices are informative.\n\
    \   The general architecture for PCN is described in [RFC5559], whilst\n   [Menth10]\
    \ is an overview of PCN.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   In addition to the terminology defined in [RFC5559] and\
    \ [RFC2474],\n   the following terms are defined:\n   o  Competing-non-PCN-packet:\
    \ a non-PCN-packet that shares a link with\n      PCN-packets and competes with\
    \ them for its forwarding bandwidth.\n      Competing-non-PCN-packets MUST NOT\
    \ be PCN-marked (only PCN-packets\n      can be PCN-marked).\n      Note: In general,\
    \ it is not advised to have any competing-non-PCN-\n      traffic.\n      Note:\
    \ There is likely to be traffic (such as best effort) that is\n      forwarded\
    \ at lower priority than PCN-traffic; although it shares\n      the link with\
    \ PCN-traffic, it doesn't compete for forwarding\n      bandwidth, and hence it\
    \ is not competing-non-PCN-traffic.  See\n      Appendix B.1 for further discussion\
    \ about competing-non-PCN-\n      traffic.\n   o  Metered-packet: a packet that\
    \ is metered by the metering functions\n      specified in Sections 2.3 and 2.4.\
    \  A PCN-packet MUST be treated\n      as a metered-packet (with the minor exception\
    \ noted below in\n      Section 2.4).  A competing-non-PCN-packet MAY be treated\
    \ as a\n      metered-packet.\n"
- title: 1.1.1.  Requirements Language
  contents:
  - "1.1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Specified PCN-Metering and -Marking Behaviours
  contents:
  - "2.  Specified PCN-Metering and -Marking Behaviours\n   This section defines the\
    \ two PCN-metering and -marking behaviours.\n   The descriptions are functional\
    \ and are not intended to restrict the\n   implementation.  The informative Appendices\
    \ supplement this section.\n"
- title: 2.1.  Behaviour Aggregate Classification Function
  contents:
  - "2.1.  Behaviour Aggregate Classification Function\n   A PCN-node MUST classify\
    \ a packet as a PCN-packet if the value of its\n   Differentiated Services Code\
    \ Point (DSCP) and Explicit Congestion\n   Notification (ECN) fields correspond\
    \ to a PCN-enabled codepoint, as\n   defined in the encoding scheme applicable\
    \ to the PCN-domain (for\n   example, [RFC5696] defines the baseline encoding).\
    \  Otherwise, the\n   packet MUST NOT be classified as a PCN-packet.\n   A PCN-node\
    \ MUST classify a packet as a competing-non-PCN-packet if it\n   is not a PCN-packet\
    \ and it competes with PCN-packets for its\n   forwarding bandwidth on a link.\n"
- title: 2.2.  Dropping Function
  contents:
  - "2.2.  Dropping Function\n   Note: If the PCN-node's queue overflows, then naturally\
    \ packets are\n   dropped.  This section describes additional action.\n   On all\
    \ links in the PCN-domain, dropping MAY be done by first\n   metering all metered-packets\
    \ to determine if the rate of metered-\n   traffic on the link is greater than\
    \ the rate allowed for such\n   traffic; if the rate of metered-traffic is too\
    \ high, then drop\n   metered-packets.\n   If the PCN-node drops PCN-packets,\
    \ then:\n   o  PCN-packets that arrive at the PCN-node already excess-traffic-\n\
    \      marked SHOULD be preferentially dropped.\n   o  the PCN-node's excess-traffic-meter\
    \ SHOULD NOT meter the PCN-\n      packets that it drops.\n"
- title: 2.3.  Threshold-Meter Function
  contents:
  - "2.3.  Threshold-Meter Function\n   A PCN-node MUST implement a threshold-meter\
    \ that has behaviour\n   functionally equivalent to the following.\n   The meter\
    \ acts like a token bucket, which is sized in bits and has a\n   configured reference\
    \ rate (bits per second).  The amount of tokens in\n   the token bucket is termed\
    \ F_tm.  Tokens are added at the reference\n   rate (PCN-threshold-rate), to a\
    \ maximum value BS_tm.  Tokens are\n   removed equal to the size in bits of the\
    \ metered-packet, to a minimum\n   F_tm = 0.  (Explanation of abbreviations: F\
    \ is short for Fill of the\n   token bucket, BS for bucket size, and tm for threshold-meter.)\n\
    \   The token bucket has a configured intermediate depth, termed\n   threshold.\
    \  If F_tm < threshold, then the meter indicates to the\n   marking function that\
    \ the packet is to be threshold-marked;\n   otherwise, it does not.\n"
- title: 2.4.  Excess-Traffic-Meter Function
  contents:
  - "2.4.  Excess-Traffic-Meter Function\n   A packet SHOULD NOT be metered (by this\
    \ excess-traffic-meter\n   function) in the following two cases:\n   o  if the\
    \ PCN-packet is already excess-traffic-marked on arrival at\n      the PCN-node.\n\
    \   o  if this PCN-node drops the packet.\n   Otherwise, the PCN-packet MUST be\
    \ treated as a metered-packet -- that\n   is, it is metered by the excess-traffic-meter.\n\
    \   A PCN-node MUST implement an excess-traffic-meter.  The excess-\n   traffic-meter\
    \ SHOULD indicate packets to be excess-traffic-marked,\n   independent of their\
    \ size (\"packet size independent marking\"); if\n   \"packet size independent\
    \ marking\" is not implemented, then the\n   excess-traffic-meter MUST use the\
    \ \"classic\" metering behaviour.\n   For the \"classic\" metering behaviour,\
    \ the excess-traffic-meter has\n   behaviour functionally equivalent to the following.\n\
    \   The meter acts like a token bucket, which is sized in bits and has a\n   configured\
    \ reference rate (bits per second).  The amount of tokens in\n   the token bucket\
    \ is termed F_etm.  Tokens are added at the reference\n   rate (PCN-excess-rate),\
    \ to a maximum value BS_etm.  Tokens are\n   removed equal to the size in bits\
    \ of the metered-packet, to a minimum\n   F_etm = 0.  If the token bucket is empty\
    \ (F_etm = 0), then the meter\n   indicates to the marking function that the packet\
    \ is to be excess-\n   traffic-marked.  (Explanation of abbreviations: F is short\
    \ for Fill\n   of the token bucket, BS for bucket size, and etm for excess-traffic-\n\
    \   meter.)\n   For \"packet size independent marking\", the excess-traffic-meter\
    \ has\n   behaviour functionally equivalent to the following.\n   The meter acts\
    \ like a token bucket, which is sized in bits and has a\n   configured reference\
    \ rate (bits per second).  The amount of tokens in\n   the token bucket is termed\
    \ F_etm.  Tokens are added at the reference\n   rate (PCN-excess-rate), to a maximum\
    \ value BS_etm.  If the token\n   bucket is not negative, then tokens are removed\
    \ equal to the size in\n   bits of the metered-packet (and the meter does not\
    \ indicate to the\n   marking function that the packet is to be excess-traffic-marked).\
    \  If\n   the token bucket is negative (F_etm < 0), then the meter indicates to\n\
    \   the marking function that the packet is to be excess-traffic-marked\n   (and\
    \ no tokens are removed).  (Explanation of abbreviations: F is\n   short for Fill\
    \ of the token bucket, BS for bucket size, and etm for\n   excess-traffic-meter.)\n\
    \   Otherwise, the meter MUST NOT indicate marking.\n"
- title: 2.5.  Marking Function
  contents:
  - "2.5.  Marking Function\n   A PCN-packet MUST be marked to reflect the metering\
    \ results by\n   setting its encoding state appropriately, as specified by the\n\
    \   specific encoding scheme that applies in the PCN-domain.  A\n   consistent\
    \ choice of encoding scheme MUST be made throughout a PCN-\n   domain.\n   A PCN-node\
    \ MUST NOT:\n   o  PCN-mark a packet that is not a PCN-packet;\n   o  change a\
    \ non-PCN-packet into a PCN-packet;\n   o  change a PCN-packet into a non-PCN-packet.\n\
    \   Note: Although competing-non-PCN-packets MAY be metered, they MUST\n   NOT\
    \ be PCN-marked.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   It is assumed that all PCN-nodes are PCN-enabled\
    \ and are trusted for\n   truthful PCN-metering and PCN-marking.  If this isn't\
    \ the case, then\n   there are numerous potential attacks.  For instance, a rogue\
    \ PCN-\n   interior-node could PCN-mark all packets so that no flows were\n  \
    \ admitted.  Another possibility is that it doesn't PCN-mark any\n   packets,\
    \ even when it is pre-congested.\n   Note that PCN-interior-nodes are not flow-aware.\
    \  This prevents some\n   security attacks where an attacker targets specific\
    \ flows in the data\n   plane -- for instance, for Denial-of-Service (DoS) or\
    \ eavesdropping.\n   As regards Security Operations and Management, PCN adds few\
    \ specifics\n   to the general good practice required in this field [RFC4778].\
    \  For\n   example, it may be sensible for a PCN-node to raise an alarm if it\
    \ is\n   persistently PCN-marking.\n   Security considerations are further discussed\
    \ in [RFC5559].\n"
- title: 4.  Acknowledgements
  contents:
  - "4.  Acknowledgements\n   This document is the result of extensive collaboration\
    \ within the PCN\n   WG.  Amongst the most active other contributors to the development\
    \ of\n   the ideas specified in this document have been Jozef Babiarz, Bob\n \
    \  Briscoe, Kwok-Ho Chan, Anna Charny, Georgios Karagiannis, Michael\n   Menth,\
    \ Toby Moncaster, Daisuke Satoh, and Joy Zhang.  Appendix A is\n   based on text\
    \ from Michael Menth.\n   This document is a development of [Briscoe06-2].  Its\
    \ authors are\n   therefore also contributors to this document: Jozef Babiarz,\
    \ Attila\n   Bader, Bob Briscoe, Kwok-Ho Chan, Anna Charny, Stephen Dudley, Philip\n\
    \   Eardley, Georgios Karagiannis, Francois Le Faucheur, Vassilis\n   Liatsos,\
    \ Dave Songhurst, and Lars Westberg.\n   Thanks to those who've made comments\
    \ on the document: Joe Babiarz,\n   Fred Baker, David Black, Bob Briscoe, Ken\
    \ Carlberg, Anna Charny,\n   Ralph Droms, Mehmet Ersue, Adrian Farrel, Ruediger\
    \ Geib, Wei Gengyu,\n   Fortune Huang, Christian Hublet, Ingemar Johansson, Georgios\n\
    \   Karagiannis, Alexey Melnikov, Michael Menth, Toby Moncaster, Dimitri\n   Papadimitriou,\
    \ Tim Polk, Daisuke Satoh, and Magnus Westerlund.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative Reference
  contents:
  - "5.1.  Normative Reference\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [Baker08]      Baker, F., Polk, J., and M. Dolly,\
    \ \"DSCP for Capacity-\n                  Admitted Traffic\", Work in Progress,\
    \ November 2008.\n   [Briscoe06-1]  Briscoe, B., Eardley, P., Songhurst, D., Le\
    \ Faucheur,\n                  F., Charny, A., Babiarz, J., Chan, K., Dudley,\
    \ S.,\n                  Karagiannis, G., Bader, A., and L. Westberg, \"An edge-\n\
    \                  to-edge Deployment Model for Pre-Congestion\n             \
    \     Notification: Admission Control over a DiffServ\n                  Region\"\
    , Work in Progress, October 2006.\n   [Briscoe06-2]  Briscoe, B., Eardley, P.,\
    \ Songhurst, D., Le Faucheur,\n                  F., Charny, A., Liatsos, V.,\
    \ Babiarz, J., Chan, K.,\n                  Dudley, S., Karagiannis, G., Bader,\
    \ A., and L.\n                  Westberg, \"Pre-Congestion Notification marking\"\
    , Work\n                  in Progress, October 2006.\n   [Briscoe08]    Briscoe,\
    \ B., \"Byte and Packet Congestion\n                  Notification\", Work in\
    \ Progress, August 2008.\n   [Charny07]     Charny, A., Babiarz, J., Menth, M.,\
    \ and X. Zhang,\n                  \"Comparison of Proposed PCN Approaches\",\
    \ Work\n                  in Progress, November 2007.\n   [Menth10]      Menth,\
    \ M., Lehrieder, F., Briscoe, B., Eardley, P.,\n                  Moncaster, T.,\
    \ Babiarz, J., Chan, K., Charny, A.,\n                  Karagiannis, G., Zhang,\
    \ X., Taylor, T., Satoh, D., and\n                  R. Geib, \"A Survey of PCN-Based\
    \ Admission Control and\n                  Flow Termination\", IEEE Communications\
    \ Surveys and\n                  Tutorials, 2010 (third issue), <http://\n   \
    \               www3.informatik.uni-wuerzburg.de/staff/menth/\n              \
    \    Publications/papers/Menth08-PCN-Overview.pdf>.\n   [RFC2474]      Nichols,\
    \ K., Blake, S., Baker, F., and D. Black,\n                  \"Definition of the\
    \ Differentiated Services Field (DS\n                  Field) in the IPv4 and\
    \ IPv6 Headers\", RFC 2474,\n                  December 1998.\n   [RFC2475]  \
    \    Blake, S., Black, D., Carlson, M., Davies, E., Wang,\n                  Z.,\
    \ and W. Weiss, \"An Architecture for Differentiated\n                  Services\"\
    , RFC 2475, December 1998.\n   [RFC3168]      Ramakrishnan, K., Floyd, S., and\
    \ D. Black, \"The\n                  Addition of Explicit Congestion Notification\
    \ (ECN) to\n                  IP\", RFC 3168, September 2001.\n   [RFC4778]  \
    \    Kaeo, M., \"Operational Security Current Practices in\n                 \
    \ Internet Service Provider Environments\", RFC 4778,\n                  January\
    \ 2007.\n   [RFC5127]      Chan, K., Babiarz, J., and F. Baker, \"Aggregation\
    \ of\n                  DiffServ Service Classes\", RFC 5127, February 2008.\n\
    \   [RFC5559]      Eardley, P., \"Pre-Congestion Notification (PCN)\n        \
    \          Architecture\", RFC 5559, June 2009.\n   [RFC5696]      Moncaster,\
    \ T., Briscoe, B., and M. Menth, \"Baseline\n                  Encoding and Transport\
    \ of Pre-Congestion Information\",\n                  RFC 5696, November 2009.\n\
    \   [Taylor09]     Charny, A., Huang, F., Menth, M., and T. Taylor, \"PCN\n  \
    \                Boundary Node Behaviour for the Controlled Load (CL)\n      \
    \            Mode of Operation\", Work in Progress, March 2009.\n"
- title: Appendix A.  Example Algorithms
  contents:
  - "Appendix A.  Example Algorithms\n   Note: This Appendix is informative, not normative.\
    \  It is an example\n   of algorithms that implement Section 2 and is based on\
    \ [Charny07] and\n   [Menth10].\n   There is no attempt to optimise the algorithms.\
    \  The metering and\n   marking functions are implemented together.  It is assumed\
    \ that three\n   encoding states are available (one for threshold-marked, one\
    \ for\n   excess-traffic-marked, and one for not-marked).  It is assumed that\n\
    \   all metered-packets are PCN-packets and that the link is never\n   overloaded.\
    \  For excess-traffic-marking, \"packet size independent\n   marking\" applies.\n"
- title: A.1.  Threshold-Metering and -Marking
  contents:
  - "A.1.  Threshold-Metering and -Marking\n   A token bucket with the following parameters:\n\
    \      *  PCN-threshold-rate: token rate of token bucket (bits/second)\n     \
    \ *  BS_tm: depth of token bucket (bits)\n      *  threshold: marking threshold\
    \ of token bucket (bits)\n      *  lastUpdate: time the token bucket was last\
    \ updated (seconds)\n      *  F_tm: amount of tokens in token bucket (bits)\n\
    \   A PCN-packet has the following parameters:\n      *  packet_size: the size\
    \ of the PCN-packet (bits)\n      *  packet_mark: the PCN encoding state of the\
    \ packet\n   In addition there is the parameter:\n         now: the current time\
    \ (seconds)\n   The following steps are performed when a PCN-packet arrives on\
    \ a\n   link:\n      *  F_tm = min(BS_tm, F_tm + (now - lastUpdate) * PCN-threshold-\n\
    \         rate); // add tokens to token bucket\n      *  F_tm = max(0, F_tm -\
    \ packet_size); // remove tokens from token\n         bucket\n      *  if ((F_tm\
    \ < threshold) AND (packet_mark != excess-traffic-\n         marked)) then packet_mark\
    \ = threshold-marked; // do threshold-\n         marking, but don't re-mark packets\
    \ that are already excess-\n         traffic-marked\n      *  lastUpdate = now\
    \ // Note: 'now' has the same value as in step 1\n"
- title: A.2.  Excess-Traffic-Metering and -Marking
  contents:
  - "A.2.  Excess-Traffic-Metering and -Marking\n   A token bucket with the following\
    \ parameters:\n      *  PCN-excess-rate: token rate of token bucket (bits/second)\n\
    \      *  BS_etm: depth of TB in token bucket (bits)\n      *  lastUpdate: time\
    \ the token bucket was last updated (seconds)\n      *  F_etm: amount of tokens\
    \ in token bucket (bits)\n   A PCN-packet has the following parameters:\n    \
    \  *  packet_size: the size of the PCN-packet (bits)\n      *  packet_mark: the\
    \ PCN encoding state of the packet\n   In addition there is the parameter:\n \
    \     *  now: the current time (seconds)\n   The following steps are performed\
    \ when a PCN-packet arrives on a\n   link:\n      *  F_etm = min(BS_etm, F_etm\
    \ + (now - lastUpdate) * PCN-excess-\n         rate); // add tokens to token bucket\n\
    \      *  if (packet_mark != excess-traffic-marked) then // do not meter\n   \
    \      packets that are already excess-traffic-marked\n         +  if (F_etm <\
    \ 0) then packet_mark = excess-traffic-marked; //\n            do excess-traffic-marking.\
    \  The algorithm ensures this is\n            independent of packet size\n   \
    \      +  else F_etm = F_etm - packet_size; // remove tokens from\n          \
    \  token bucket if don't mark packet\n      *  lastUpdate = now // Note: 'now'\
    \ has the same value as in step 1\n"
- title: Appendix B.  Implementation Notes
  contents:
  - "Appendix B.  Implementation Notes\n   Note: This Appendix is informative, not\
    \ normative.  It comments on\n   Section 2, including reasoning about whether\
    \ MUSTs or SHOULDs are\n   required.  For guidance on Operations and Management\
    \ considerations,\n   please see [RFC5559].\n"
- title: B.1.  Competing-Non-PCN-Traffic
  contents:
  - "B.1.  Competing-Non-PCN-Traffic\n   In general, it is not advised to have any\
    \ competing-non-PCN-traffic,\n   essentially because the unpredictable amount\
    \ of competing-non-PCN-\n   traffic makes the PCN mechanisms less accurate and\
    \ so reduces PCN's\n   ability to protect the QoS of admitted PCN-flows [RFC5559].\
    \  But if\n   there is competing-non-PCN-traffic, then:\n   1.  There should be\
    \ a mechanism to limit it, for example:\n       *  limit the rate at which competing-non-PCN-traffic\
    \ can be\n          forwarded on each link in the PCN-domain.  One method for\n\
    \          achieving this is to queue competing-non-PCN-packets\n          separately\
    \ from PCN-packets and to limit the scheduling rate\n          of the former.\
    \  Another method is to drop competing-non-PCN-\n          packets in excess of\
    \ some rate.\n       *  police competing-non-PCN-traffic at the PCN-ingress-nodes,\
    \ as\n          in the Diffserv architecture, for example.  However,\n       \
    \   Diffserv's static traffic conditioning agreements risk a\n          focused\
    \ overload of traffic from several PCN-ingress-nodes\n          onto one link.\n\
    \       *  by design, it is known that the level of competing-non-PCN-\n     \
    \     traffic is always very small -- perhaps it consists of\n          operator\
    \ control messages only.\n   2.  In general, PCN's mechanisms should take account\
    \ of competing-\n       non-PCN-traffic, in order to improve the accuracy of the\
    \ decision\n       about whether to admit (or terminate) a PCN-flow.  For example:\n\
    \       *  competing-non-PCN-traffic contributes to the PCN-meters;\n        \
    \  competing-non-PCN-packets are treated as metered-packets.\n       *  each PCN-node,\
    \ on its links: (1) reduces the reference rates\n          (PCN-threshold-rate\
    \ and PCN-excess-rate), in order to allow\n          'headroom' for the competing-non-PCN-traffic;\
    \ (2) limits the\n          maximum forwarding rate of competing-non-PCN-traffic\
    \ to be\n          less than the 'headroom'.  In this case, competing-non-PCN-\n\
    \          packets are not treated as metered-packets.\n   3.  The operator should\
    \ decide on appropriate action.  Dropping is\n       discussed further in Appendix\
    \ B.4.\n   One specific example of competing-non-PCN-traffic occurs if the PCN-\n\
    \   compatible Diffserv codepoint is one of those that [Baker08] defines\n   as\
    \ suitable for use with admission control and there is such non-PCN-\n   traffic\
    \ in the PCN-domain.  A similar example could occur for\n   Diffserv codepoints\
    \ of the Real-Time Treatment Aggregate [RFC5127].\n   In such cases, PCN-traffic\
    \ and competing-non-PCN-traffic are\n   distinguished by different values of the\
    \ ECN field [RFC5696].\n   Another example would occur if there is more than one\
    \ PCN-compatible\n   Diffserv codepoint in a PCN-domain.  For instance, suppose\
    \ there are\n   two PCN-BAs treated at different priorities.  Then as far as the\n\
    \   lower priority PCN-BA is concerned, the higher priority PCN-traffic\n   needs\
    \ to be treated as competing-non-PCN-traffic.\n"
- title: B.2.  Scope
  contents:
  - "B.2.  Scope\n   It may be known, for instance by the design of the network topology,\n\
    \   that some links can never be pre-congested (even in unusual\n   circumstances,\
    \ such as after the failure of some links).  There is\n   then no need to deploy\
    \ the PCN-metering and -marking behaviour on\n   those links.\n   The meters can\
    \ be implemented on the ingoing or outgoing interface of\n   a PCN-node.  It may\
    \ be that existing hardware can support only one\n   meter per ingoing interface\
    \ and one per outgoing interface.  Then,\n   for instance, threshold-metering\
    \ could be run on all the ingoing\n   interfaces and excess-traffic-metering on\
    \ all the outgoing\n   interfaces; note that the same choice must be made for\
    \ all the links\n   in a PCN-domain to ensure that the two metering behaviours\
    \ are\n   applied exactly once for all the links.\n   The baseline encoding [RFC5696]\
    \ specifies only two encoding states\n   (PCN-marked and not-marked).  In this\
    \ case, \"excess-traffic-marked\"\n   means a packet that is PCN-marked as a result\
    \ of the excess-traffic-\n   meter function, and \"threshold-marked\" means a\
    \ packet that is PCN-\n   marked as a result of the threshold-meter function.\
    \  As far as\n   terminology is concerned, this interpretation is consistent with\
    \ that\n   defined in [RFC5559].  Note that a deployment needs to make a\n   consistent\
    \ choice throughout the PCN-domain whether PCN-marked is\n   interpreted as excess-traffic-marked\
    \ or threshold-marked.\n   Note that even if there are only two encoding states,\
    \ it is still\n   required that both the meters are implemented, in order to ease\n\
    \   compatibility between equipment and to remove a configuration option\n   and\
    \ associated complexity.  Hardware with limited availability of\n   token buckets\
    \ could be configured to run only one of the meters, but\n   it must be possible\
    \ to enable either meter.  Although, in the\n   scenario with two encoding states,\
    \ indications from one of the meters\n   are ignored by the marking function,\
    \ they may be logged or acted upon\n   in some other way, for example, by the\
    \ management system or an\n   explicit signalling protocol; such considerations\
    \ are out of the\n   scope of this document.\n"
- title: B.3.  Behaviour Aggregate Classification
  contents:
  - "B.3.  Behaviour Aggregate Classification\n   Configuration of PCN-nodes will\
    \ define what values of the DSCP and\n   ECN fields indicate a PCN-packet in a\
    \ particular PCN-domain.  For\n   instance, [RFC5696] defines the baseline encoding.\n\
    \   Configuration will also define what values of the DSCP and ECN fields\n  \
    \ indicate a competing-non-PCN-packet in a particular PCN-domain.\n"
- title: B.4.  Dropping
  contents:
  - "B.4.  Dropping\n   The objective of the dropping function is to minimise the\
    \ queueing\n   delay suffered by metered-traffic at a PCN-node, since PCN-traffic\n\
    \   (and perhaps competing-non-PCN-traffic) is expected to be inelastic\n   traffic\
    \ generated by real-time applications.  In practice, it would\n   be defined as\
    \ exceeding a specific traffic profile, typically based\n   on a token bucket.\n\
    \   If there is no competing-non-PCN-traffic, then it is not expected\n   that\
    \ the dropping function is needed, since PCN's flow admission and\n   termination\
    \ mechanisms limit the amount of PCN-traffic.  Even so, it\n   still might be\
    \ implemented as a back stop against misconfiguration of\n   the PCN-domain, for\
    \ instance.\n   If there is competing-non-PCN-traffic, then the details of the\n\
    \   dropping function will depend on how the router's implementation\n   handles\
    \ the two sorts of traffic:\n   1.  a common queue for PCN-traffic and competing-non-PCN-traffic,\n\
    \       with a traffic conditioner for the competing-non-PCN-traffic; or\n   2.\
    \  separate queues, in which case the amount of competing-non-PCN-\n       traffic\
    \ can be limited by limiting the rate at which the\n       scheduler (for the\
    \ competing-non-PCN-traffic) forwards packets.\n   (The discussion here is based\
    \ on that in [Baker08].)\n   Note that only dropping of packets is allowed.  Downgrading\
    \ of\n   packets to a lower priority BA is not allowed (see Appendix B.7),\n \
    \  since it would lead to packet mis-ordering.  Shaping (\"the process of\n  \
    \ delaying packets\" [RFC2475]) is not suitable if the traffic comes\n   from\
    \ real-time applications.\n   Preferential dropping of competing-non-PCN-traffic:\n\
    \      In general, it is reasonable for competing-non-PCN-traffic to get\n   \
    \   harsher treatment than PCN-traffic (that is, competing-non-PCN-\n      packets\
    \ are preferentially dropped) because PCN's flow admission\n      and termination\
    \ mechanisms are stronger than the mechanisms that\n      are likely to be applied\
    \ to the competing-non-PCN-traffic.  The\n      PCN mechanisms also mean that\
    \ a dropper should not be needed for\n      the PCN-traffic.\n   Preferential\
    \ dropping of excess-traffic-marked packets:\n      Section 2.2 specifies, \"\
    If the PCN-node drops PCN-packets, then\n      ...  PCN-packets that arrive at\
    \ the PCN-node already excess-\n      traffic-marked SHOULD be preferentially\
    \ dropped\".  In brief, the\n      reason is that, with the \"controlled load\"\
    \ edge behaviour\n      [Taylor09], this avoids over-termination in the event\
    \ of multiple\n      bottlenecks in the PCN-domain [Charny07].  A fuller explanation\
    \ is\n      as follows.  The optimal dropping behaviour depends on the\n     \
    \ particular edge behaviour [Menth10].  A single dropping behaviour\n      is\
    \ defined, as it is simpler to standardise, implement, and\n      operate.  The\
    \ standardised dropping behaviour is at least adequate\n      for all edge behaviours\
    \ (and good for some), whereas others are\n      not (for example, with tail dropping,\
    \ far too much traffic may be\n      terminated with the \"controlled load\" edge\
    \ behaviour, in the event\n      of multiple bottlenecks in the PCN-domain [Charny07]).\
    \  The\n      dropping behaviour is defined as a 'SHOULD', rather than a 'MUST',\n\
    \      in recognition that other dropping behaviour may be preferred in\n    \
    \  particular circumstances, for example: (1) with the \"marked flow\"\n     \
    \ termination edge behaviour, preferential dropping of unmarked\n      packets\
    \ may be better [Menth10]; (2) tail dropping may make PCN-\n      marking behaviour\
    \ easier to implement on current routers.\n   Exactly what \"preferentially dropped\"\
    \ means is left to the\n   implementation.  It is also left to the implementation\
    \ what to do if\n   there are no excess-traffic-marked PCN-packets available at\
    \ a\n   particular instant.\n   Section 2.2 also specifies, \"the PCN-node's excess-traffic-meter\n\
    \   SHOULD NOT meter the PCN-packets that it drops.\"  This avoids over-\n   termination\
    \ [Menth10].  Effectively, it means that the dropping\n   function (if present)\
    \ should be done before the meter functions --\n   which is natural.\n"
- title: B.5.  Threshold-Metering
  contents:
  - "B.5.  Threshold-Metering\n   The description is in terms of a 'token bucket with\
    \ threshold' (which\n   [Briscoe06-1] views as a virtual queue).  However, the\
    \ description is\n   not intended to standardise implementation.\n   The reference\
    \ rate of the threshold-meter (PCN-threshold-rate) is\n   configured at less than\
    \ the rate allocated to the PCN-traffic class.\n   Also, the PCN-threshold-rate\
    \ is less than, or possibly equal to, the\n   PCN-excess-rate.\n   Section 2.3\
    \ specifies, \"If F_tm < threshold, then the meter indicates\n   to the marking\
    \ function that the packet is to be threshold-marked;\n   otherwise, it does not.\"\
    \  Note that a PCN-packet is marked without\n   explicit additional bias for the\
    \ packet's size.\n   The behaviour must be functionally equivalent to the description\
    \ in\n   Section 2.3.  \"Functionally equivalent\" means the observable 'black\n\
    \   box' behaviour is the same or very similar, for example, if either\n   precisely\
    \ the same set of packets is marked or if the set is shifted\n   by one packet.\
    \  It is intended to allow implementation freedom over\n   matters such as:\n\
    \   o  whether tokens are added to the token bucket at regular time\n      intervals\
    \ or only when a packet is processed.\n   o  whether the new token bucket depth\
    \ is calculated before or after\n      it is decided whether to PCN-mark the packet.\
    \  The effect of this\n      is simply to shift the sequence of marks by one packet.\n\
    \   o  when the token bucket is very nearly empty and a packet arrives\n     \
    \ larger than F_tm, then the precise change in F_tm is up to the\n      implementation.\
    \  For instance:\n      *  set F_tm = 0 and indicate threshold-mark to the marking\n\
    \         function.\n      *  check whether F_tm < threshold and if it is, then\
    \ indicate\n         threshold-mark to the marking function; then set F_tm = 0.\n\
    \      *  leave F_tm unaltered and indicate threshold-mark to the marking\n  \
    \       function.\n   o  similarly, when the token bucket is very nearly full\
    \ and a packet\n      arrives larger than (BS_tm - F_tm), then the precise change\
    \ in\n      F_tm is up to the implementation.\n   Note that all PCN-packets, even\
    \ if already marked, are metered by the\n   threshold-meter function (unlike the\
    \ excess-traffic-meter function),\n   because all packets should contribute to\
    \ the decision whether there\n   is room for a new flow.\n"
- title: B.6.  Excess-Traffic-Metering
  contents:
  - "B.6.  Excess-Traffic-Metering\n   The description is in terms of a token bucket,\
    \ however the\n   implementation is not standardised.\n   The reference rate of\
    \ the excess-traffic-meter (PCN-excess-rate) is\n   configured at less than (or\
    \ possibly equal to) the rate allocated to\n   the PCN-traffic class.  Also, the\
    \ PCN-excess-rate is greater than, or\n   possibly equal to, the PCN-threshold-rate.\n\
    \   As in Section B.5, \"functionally equivalent\" allows some\n   implementation\
    \ flexibility, for example, the exact algorithm when the\n   token bucket is very\
    \ nearly empty or very nearly full.\n   Section 2.4 specifies, \"A packet SHOULD\
    \ NOT be metered (by this\n   excess-traffic-meter function) ... if the packet\
    \ is already excess-\n   traffic-marked on arrival at the PCN-node\".  This avoids\
    \ over-\n   termination (with some edge behaviours) in the event that the PCN-\n\
    \   traffic passes through multiple bottlenecks in the PCN-domain\n   [Charny07].\
    \  Note that an implementation could determine whether the\n   packet is already\
    \ excess-traffic-marked as an integral part of its BA\n   classification function.\
    \  The behaviour is defined as a 'SHOULD NOT',\n   rather than a 'MUST NOT', because\
    \ it may be slightly harder to\n   implement than a metering function that is\
    \ blind to previous packet\n   markings.\n   Section 2.4 specifies, \"A packet\
    \ SHOULD NOT be metered (by this\n   excess-traffic-meter function) ... if this\
    \ PCN-node drops the\n   packet.\"  This avoids over-termination [Menth10].  (A\
    \ similar\n   statement could also be made for the threshold-meter function but\
    \ is\n   irrelevant, as a link that is overloaded will already be\n   substantially\
    \ pre-congested and hence threshold-marking all packets.)\n   It seems natural\
    \ to perform the dropping function before the metering\n   functions, although\
    \ for some equipment it may be harder to implement;\n   hence, the behaviour is\
    \ defined as a 'SHOULD NOT', rather than a\n   'MUST NOT'.\n   \"Packet size independent\
    \ marking\" -- excess-traffic-marking that is\n   independent of packet size --\
    \ is specified as a 'SHOULD' rather than\n   a 'MUST' in Section 2.4 because it\
    \ may be slightly harder for some\n   equipment to implement, and the impact of\
    \ not doing so is undesirable\n   but moderate (sufficient traffic is terminated,\
    \ but flows with large\n   packets are more likely to be terminated).  With the\
    \ \"classic\"\n   excess-traffic-meter behaviour, large packets are more likely\
    \ to be\n   excess-traffic-marked than small packets (because packets are marked\n\
    \   if the number of tokens in the token bucket is smaller than the\n   packet\
    \ size).  This means that, with some edge behaviours, flows with\n   large packets\
    \ are more likely to be terminated than flows with small\n   packets ([Briscoe08],\
    \ [Menth10]).  \"Packet size independent marking\"\n   can be achieved by a small\
    \ modification of the \"classic\" excess-\n   traffic-meter.  The number of tokens\
    \ in the bucket can become\n   negative; if this number is negative at a packet's\
    \ arrival, the\n   packet is marked; otherwise, the amount of tokens equal to\
    \ the packet\n   size is removed from the bucket.  Note that with \"packet size\n\
    \   independent marking\", either the packet is marked or tokens are\n   removed\
    \ -- never both.  Hence, the token bucket cannot become more\n   negative than\
    \ the maximum packet size on the link.  The algorithm\n   described in Appendix\
    \ A implements this behaviour.\n   Note that BS_etm is independent of BS_tm, F_etm\
    \ is independent of\n   F_tm (except in that a packet can change both), and the\
    \ two\n   configured rates (PCN-excess-rate and PCN-threshold-rate) are\n   independent\
    \ (except that PCN-excess-rate >= PCN-threshold-rate).\n"
- title: B.7.  Marking
  contents:
  - "B.7.  Marking\n   Section 2.5 defines, \"A PCN-node MUST NOT ...change a PCN-packet\
    \ into\n   a non-PCN-packet\".  This means that a PCN-node is not allowed to\n\
    \   downgrade a PCN-packet into a lower priority Diffserv BA (hence,\n   downgrading\
    \ is not allowed as an alternative to dropping).\n   Section 2.5 defines, \"A\
    \ PCN-node MUST NOT ...PCN-mark a packet that\n   is not a PCN-packet\".  This\
    \ means that in the scenario where\n   competing-non-PCN-packets are treated as\
    \ metered-packets, a meter may\n   indicate a packet is to be PCN-marked, but\
    \ the marking function knows\n   it cannot be marked.  It is left open to the\
    \ implementation exactly\n   what to do in this case; one simple possibility is\
    \ to mark the next\n   PCN-packet.  Note that unless the PCN-packets are a large\
    \ fraction of\n   all the metered-packets, the PCN mechanisms may not work well.\n\
    \   Although the metering functions are described separately from the\n   marking\
    \ function, they can be implemented in an integrated fashion.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Philip Eardley (editor)\n   BT\n   Adastral Park, Martlesham\
    \ Heath\n   Ipswich  IP5 3RE\n   UK\n   EMail: philip.eardley@bt.com\n"
