- title: __initial_text__
  contents:
  - '                Microsoft PPP CHAP Extensions, Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n\
    \   defines an extensible Link Control Protocol and a family of Network\n   Control\
    \ Protocols (NCPs) for establishing and configuring different\n   network-layer\
    \ protocols.\n   This document describes version two of Microsoft's PPP CHAP dialect\n\
    \   (MS-CHAP-V2).  MS-CHAP-V2 is similar to, but incompatible with, MS-\n   CHAP\
    \ version one (MS-CHAP-V1, described in [9]).  In particular,\n   certain protocol\
    \ fields have been deleted or reused but with\n   different semantics.  In addition,\
    \ MS-CHAP-V2 features mutual\n   authentication.\n   The algorithms used in the\
    \ generation of various MS-CHAP-V2 protocol\n   fields are described in section\
    \ 8.  Negotiation and hash generation\n   examples are provided in section 9.\n"
- title: Specification of Requirements
  contents:
  - "Specification of Requirements\n   In this document, the key words \"MAY\", \"\
    MUST, \"MUST NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"SHOULD\
    \ NOT\" are to be interpreted as\n   described in [3].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2. LCP Configuration . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3. Challenge Packet  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   4. Response Packet . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   5. Success Packet  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n   6. Failure Packet  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  5\n   7. Change-Password Packet  . . . . . . . . . . . . . . . . . . . .\
    \  6\n   8. Pseudocode  . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \   8.1. GenerateNTResponse()  . . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 8.2. ChallengeHash() . . . . . . . . . . . . . . . . . . . . . . .  8\n   8.3.\
    \ NtPasswordHash()  . . . . . . . . . . . . . . . . . . . . . .  9\n   8.4. HashNtPasswordHash()\
    \  . . . . . . . . . . . . . . . . . . . .  9\n   8.5. ChallengeResponse() . .\
    \ . . . . . . . . . . . . . . . . . . .  9\n   8.6. DesEncrypt()  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 10\n   8.7. GenerateAuthenticatorResponse()\
    \ . . . . . . . . . . . . . . . 10\n   8.8. CheckAuthenticatorResponse()  . .\
    \ . . . . . . . . . . . . . . 12\n   8.9. NewPasswordEncryptedWithOldNtPasswordHash()\
    \ . . . . . . . . . 12\n   8.10. EncryptPwBlockWithPasswordHash() . . . . . .\
    \ . . . . . . . . 13\n   8.11. Rc4Encrypt() . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 13\n   8.12. OldNtPasswordHashEncryptedWithNewNtPasswordHash()\
    \  . . . . . 14\n   8.13. NtPasswordHashEncryptedWithBlock() . . . . . . . . .\
    \ . . . . 14\n   9. Examples  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 14\n   9.1. Negotiation Examples  . . . . . . . . . . . . . . . . . .\
    \ . . 14\n   9.1.1. Successful authentication . . . . . . . . . . . . . . . .\
    \ . 15\n   9.1.2. Authenticator authentication failure  . . . . . . . . . . .\
    \ 15\n   9.1.3. Failed authentication with no retry allowed . . . . . . . . 15\n\
    \   9.1.4. Successful authentication after retry . . . . . . . . . . . 15\n  \
    \ 9.1.5. Failed hack attack with 3 attempts allowed  . . . . . . . . 15\n   9.1.6.\
    \ Successful authentication with password change  . . . . . . 16\n   9.1.7. Successful\
    \ authentication with retry and password change. . 16\n   9.2. Hash Example  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 16\n   9.3. Example of DES Key\
    \ Generation . . . . . . . . . . . . . . . . 17\n   10. Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 17\n   11. References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 18\n   12. Acknowledgements . . . . . .\
    \ . . . . . . . . . . . . . . . . . 19\n   13. Author's Address . . . . . . .\
    \ . . . . . . . . . . . . . . . . 19\n   14. Full Copyright Statement . . . .\
    \ . . . . . . . . . . . . . . . 20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Where possible, MS-CHAP-V2 is consistent with both MS-CHAP-V1\
    \ and\n   standard CHAP.  Briefly, the differences between MS-CHAP-V2 and MS-\n\
    \   CHAP-V1 are:\n   *  MS-CHAP-V2 is enabled by negotiating CHAP Algorithm 0x81\
    \ in LCP\n      option 3, Authentication Protocol.\n   *  MS-CHAP-V2 provides\
    \ mutual authentication between peers by\n      piggybacking a peer challenge\
    \ on the Response packet and an\n      authenticator response on the Success packet.\n\
    \   *  The calculation of the \"Windows NT compatible challenge response\"\n \
    \     sub-field in the Response packet has been changed to include the\n     \
    \ peer challenge and the user name.\n   *  In MS-CHAP-V1, the \"LAN Manager compatible\
    \ challenge response\"\n      sub-field was always sent in the Response packet.\
    \  This field has\n      been replaced in MS-CHAP-V2 by the Peer-Challenge field.\n\
    \   *  The format of the Message field in the Failure packet has been\n      changed.\n\
    \   *  The Change Password (version 1) and Change Password (version 2)\n     \
    \ packets are no longer supported. They have been replaced with a\n      single\
    \ Change-Password packet.\n"
- title: 2.  LCP Configuration
  contents:
  - "2.  LCP Configuration\n   The LCP configuration for MS-CHAP-V2 is identical to\
    \ that for\n   standard CHAP, except that the Algorithm field has value 0x81,\
    \ rather\n   than the MD5 value 0x05.  PPP implementations which do not support\n\
    \   MS-CHAP-V2, but correctly implement LCP Config-Rej, should have no\n   problem\
    \ dealing with this non-standard option.\n"
- title: 3.  Challenge Packet
  contents:
  - "3.  Challenge Packet\n   The MS-CHAP-V2 Challenge packet is identical in format\
    \ to the\n   standard CHAP Challenge packet.\n   MS-CHAP-V2 authenticators send\
    \ an 16-octet challenge Value field.\n   Peers need not duplicate Microsoft's\
    \ algorithm for selecting the 16-\n   octet value, but the standard guidelines\
    \ on randomness [1,2,7] SHOULD\n   be observed.\n   Microsoft authenticators do\
    \ not currently provide information in the\n   Name field.  This may change in\
    \ the future.\n"
- title: 4.  Response Packet
  contents:
  - "4.  Response Packet\n   The MS-CHAP-V2 Response packet is identical in format\
    \ to the standard\n   CHAP Response packet.  However, the Value field is sub-formatted\n\
    \   differently as follows:\n   16 octets: Peer-Challenge\n    8 octets: Reserved,\
    \ must be zero\n   24 octets: NT-Response\n    1 octet : Flags\n   The Peer-Challenge\
    \ field is a 16-octet random number.  As the name\n   implies, it is generated\
    \ by the peer and is used in the calculation\n   of the NT-Response field, below.\
    \  Peers need not duplicate\n   Microsoft's algorithm for selecting the 16-octet\
    \ value, but the\n   standard guidelines on randomness [1,2,7] SHOULD be observed.\n\
    \   The NT-Response field is an encoded function of the password, the\n   user\
    \ name, the contents of the Peer-Challenge field and the received\n   challenge\
    \ as output by the routine GenerateNTResponse() (see section\n   8.1, below).\
    \  The Windows NT password is a string of 0 to\n   (theoretically) 256 case-sensitive\
    \ Unicode [8] characters.  Current\n   versions of Windows NT limit passwords\
    \ to 14 characters, mainly for\n   compatibility reasons; this may change in the\
    \ future.  When computing\n   the NT-Response field contents, only the user name\
    \ is used, without\n   any associated Windows NT domain name.  This is true regardless\
    \ of\n   whether a Windows NT domain name is present in the Name field (see\n\
    \   below).\n   The Flag field is reserved for future use and MUST be zero.\n\
    \   The Name field is a string of 0 to (theoretically) 256 case-sensitive\n  \
    \ ASCII characters which identifies the peer's user account name.  The\n   Windows\
    \ NT domain name may prefix the user's account name (e.g.\n   \"BIGCO\\johndoe\"\
    \ where \"BIGCO\" is a Windows NT domain containing the\n   user account \"johndoe\"\
    ).  If a domain is not provided, the backslash\n   should also be omitted, (e.g.\
    \ \"johndoe\").\n"
- title: 5.  Success Packet
  contents:
  - "5.  Success Packet\n   The Success packet is identical in format to the standard\
    \ CHAP\n   Success packet.  However, the Message field contains a 42-octet\n \
    \  authenticator response string and a printable message.  The format of\n   the\
    \ message field is illustrated below.\n   \"S=<auth_string> M=<message>\"\n  \
    \ The <auth_string> quantity is a 20 octet number encoded in ASCII as\n   40 hexadecimal\
    \ digits.  The hexadecimal digits A-F (if present) MUST\n   be uppercase.  This\
    \ number is derived from the challenge from the\n   Challenge packet, the Peer-Challenge\
    \ and NT-Response fields from the\n   Response packet, and the peer password as\
    \ output by the routine\n   GenerateAuthenticatorResponse() (see section 8.7,\
    \ below).  The\n   authenticating peer MUST verify the authenticator response\
    \ when a\n   Success packet is received.  The method for verifying the\n   authenticator\
    \ is described in section 8.8, below.  If the\n   authenticator response is either\
    \ missing or incorrect, the peer MUST\n   end the session.\n   The <message> quantity\
    \ is human-readable text in the appropriate\n   charset and language [12].\n"
- title: 6.  Failure Packet
  contents:
  - "6.  Failure Packet\n   The Failure packet is identical in format to the standard\
    \ CHAP\n   Failure packet.  There is, however, formatted text stored in the\n\
    \   Message field which, contrary to the standard CHAP rules, does affect\n  \
    \ the operation of the protocol.  The Message field format is:\n      \"E=eeeeeeeeee\
    \ R=r C=cccccccccccccccccccccccccccccccc V=vvvvvvvvvv\n"
- title: M=<msg>"
  contents:
  - "M=<msg>\"\n      where\n      The \"eeeeeeeeee\" is the ASCII representation\
    \ of a decimal error\n      code (need not be 10 digits) corresponding to one\
    \ of those listed\n      below, though implementations should deal with codes\
    \ not on this\n      list gracefully.\n         646 ERROR_RESTRICTED_LOGON_HOURS\n\
    \         647 ERROR_ACCT_DISABLED\n         648 ERROR_PASSWD_EXPIRED\n       \
    \  649 ERROR_NO_DIALIN_PERMISSION\n         691 ERROR_AUTHENTICATION_FAILURE\n\
    \         709 ERROR_CHANGING_PASSWORD\n      The \"r\" is an ASCII flag set to\
    \ '1' if a retry is allowed, and '0'\n      if not.  When the authenticator sets\
    \ this flag to '1' it disables\n      short timeouts, expecting the peer to prompt\
    \ the user for new\n      credentials and resubmit the response.\n      The \"\
    cccccccccccccccccccccccccccccccc\" is the ASCII representation\n      of a hexadecimal\
    \ challenge value.  This field MUST be exactly 32\n      octets long and MUST\
    \ be present.\n      The \"vvvvvvvvvv\" is the ASCII representation of a decimal\
    \ version\n      code (need not be 10 digits) indicating the password changing\n\
    \      protocol version supported on the server.  For MS-CHAP-V2, this\n     \
    \ value SHOULD always be 3.\n      <msg> is human-readable text in the appropriate\
    \ charset and\n      language [12].\n"
- title: 7.  Change-Password Packet
  contents:
  - "7.  Change-Password Packet\n   The Change-Password packet does not appear in\
    \ either standard CHAP or\n   MS-CHAP-V1.  It allows the peer to change the password\
    \ on the account\n   specified in the preceding Response packet.  The Change-Password\n\
    \   packet should be sent only if the authenticator reports\n   ERROR_PASSWD_EXPIRED\
    \ (E=648) in the Message field of the Failure\n   packet.\n   This packet type\
    \ is supported by recent versions of Windows NT 4.0,\n   Windows 95 and Windows\
    \ 98.  It is not supported by Windows NT 3.5,\n   Windows NT 3.51, or early versions\
    \ of Windows NT 4.0, Windows 95 and\n   Windows 98.\n   The format of this packet\
    \ is as follows:\n        1 octet  : Code\n        1 octet  : Identifier\n   \
    \     2 octets : Length\n      516 octets : Encrypted-Password\n       16 octets\
    \ : Encrypted-Hash\n       16 octets : Peer-Challenge\n        8 octets : Reserved\n\
    \       24 octets : NT-Response\n        2-octet  : Flags\n   Code\n      7\n\
    \   Identifier\n      The Identifier field is one octet and aids in matching requests\n\
    \      and replies.  The value is the Identifier of the received Failure\n   \
    \   packet to which this packet responds plus 1.\n   Length\n      586\n   Encrypted-Password\n\
    \      This field contains the PWBLOCK form of the new Windows NT\n      password\
    \ encrypted with the old Windows NT password hash, as\n      output by the NewPasswordEncryptedWithOldNtPasswordHash()\
    \ routine\n      (see section 8.9, below).\n   Encrypted-Hash\n      This field\
    \ contains the old Windows NT password hash encrypted\n      with the new Windows\
    \ NT password hash, as output by the\n      OldNtPasswordHashEncryptedWithNewNtPasswordHash()\
    \ routine (see\n      section 8.12, below).\n   Peer-Challenge\n      A 16-octet\
    \ random quantity, as described in the Response packet\n      description.\n \
    \  Reserved\n      8 octets, must be zero.\n   NT-Response\n      The NT-Response\
    \ field (as described in the Response packet\n      description), but calculated\
    \ on the new password and the challenge\n      received in the Failure packet.\n\
    \   Flags\n      This field is two octets in length.  It is a bit field of option\n\
    \      flags where 0 is the least significant bit of the 16-bit quantity.\n  \
    \    The format of this field is illustrated in the following diagram:\n     \
    \               1\n          5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         |                               |\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Bits 0-15\n            Reserved, always clear (0).\n"
- title: 8.  Pseudocode
  contents:
  - "8.  Pseudocode\n   The routines mentioned in the text above are described in\
    \ pseudocode\n   in the following sections.\n"
- title: 8.1.  GenerateNTResponse()
  contents:
  - "8.1.  GenerateNTResponse()\n   GenerateNTResponse(\n   IN  16-octet         \
    \     AuthenticatorChallenge,\n   IN  16-octet              PeerChallenge,\n \
    \  IN  0-to-256-char         UserName,\n   IN  0-to-256-unicode-char Password,\n\
    \   OUT 24-octet              Response )\n   {\n      8-octet  Challenge\n   \
    \   16-octet PasswordHash\n      ChallengeHash( PeerChallenge, AuthenticatorChallenge,\
    \ UserName,\n                     giving Challenge)\n      NtPasswordHash( Password,\
    \ giving PasswordHash )\n      ChallengeResponse( Challenge, PasswordHash, giving\
    \ Response )\n   }\n"
- title: 8.2.  ChallengeHash()
  contents:
  - "8.2.  ChallengeHash()\n   ChallengeHash(\n   IN 16-octet               PeerChallenge,\n\
    \   IN 16-octet               AuthenticatorChallenge,\n   IN  0-to-256-char  \
    \       UserName,\n   OUT 8-octet               Challenge\n   {\n      /*\n  \
    \     * SHAInit(), SHAUpdate() and SHAFinal() functions are an\n       * implementation\
    \ of Secure Hash Algorithm (SHA-1) [11]. These are\n       * available in public\
    \ domain or can be licensed from\n       * RSA Data Security, Inc.\n       */\n\
    \      SHAInit(Context)\n      SHAUpdate(Context, PeerChallenge, 16)\n      SHAUpdate(Context,\
    \ AuthenticatorChallenge, 16)\n      /*\n       * Only the user name (as presented\
    \ by the peer and\n       * excluding any prepended domain name)\n       * is\
    \ used as input to SHAUpdate().\n       */\n      SHAUpdate(Context, UserName,\
    \ strlen(Username))\n      SHAFinal(Context, Digest)\n      memcpy(Challenge,\
    \ Digest, 8)\n   }\n"
- title: 8.3.  NtPasswordHash()
  contents:
  - "8.3.  NtPasswordHash()\n   NtPasswordHash(\n   IN  0-to-256-unicode-char Password,\n\
    \   OUT 16-octet              PasswordHash )\n   {\n      /*\n       * Use the\
    \ MD4 algorithm [5] to irreversibly hash Password\n       * into PasswordHash.\
    \  Only the password is hashed without\n       * including any terminating 0.\n\
    \       */\n   }\n"
- title: 8.4.  HashNtPasswordHash()
  contents:
  - "8.4.  HashNtPasswordHash()\n   HashNtPasswordHash(\n   IN  16-octet PasswordHash,\n\
    \   OUT 16-octet PasswordHashHash )\n   {\n      /*\n       * Use the MD4 algorithm\
    \ [5] to irreversibly hash\n       * PasswordHash into PasswordHashHash.\n   \
    \    */\n   }\n"
- title: 8.5.  ChallengeResponse()
  contents:
  - "8.5.  ChallengeResponse()\n   ChallengeResponse(\n   IN  8-octet  Challenge,\n\
    \   IN  16-octet PasswordHash,\n   OUT 24-octet Response )\n   {\n      Set ZPasswordHash\
    \ to PasswordHash zero-padded to 21 octets\n      DesEncrypt( Challenge,\n   \
    \               1st 7-octets of ZPasswordHash,\n                  giving 1st 8-octets\
    \ of Response )\n      DesEncrypt( Challenge,\n                  2nd 7-octets\
    \ of ZPasswordHash,\n                  giving 2nd 8-octets of Response )\n   \
    \   DesEncrypt( Challenge,\n                  3rd 7-octets of ZPasswordHash,\n\
    \                  giving 3rd 8-octets of Response )\n   }\n"
- title: 8.6.  DesEncrypt()
  contents:
  - "8.6.  DesEncrypt()\n   DesEncrypt(\n   IN  8-octet Clear,\n   IN  7-octet Key,\n\
    \   OUT 8-octet Cypher )\n   {\n      /*\n       * Use the DES encryption algorithm\
    \ [4] in ECB mode [10]\n       * to encrypt Clear into Cypher such that Cypher\
    \ can\n       * only be decrypted back to Clear by providing Key.\n       * Note\
    \ that the DES algorithm takes as input a 64-bit\n       * stream where the 8th,\
    \ 16th, 24th, etc.  bits are\n       * parity bits ignored by the encrypting algorithm.\n\
    \       * Unless you write your own DES to accept 56-bit input\n       * without\
    \ parity, you will need to insert the parity bits\n       * yourself.\n      \
    \ */\n   }\n"
- title: 8.7.  GenerateAuthenticatorResponse()
  contents:
  - "8.7.  GenerateAuthenticatorResponse()\n   GenerateAuthenticatorResponse(\n  \
    \ IN  0-to-256-unicode-char Password,\n   IN  24-octet              NT-Response,\n\
    \   IN  16-octet              PeerChallenge,\n   IN  16-octet              AuthenticatorChallenge,\n\
    \   IN  0-to-256-char         UserName,\n   OUT 42-octet              AuthenticatorResponse\
    \ )\n   {\n      16-octet              PasswordHash\n      16-octet          \
    \    PasswordHashHash\n      8-octet               Challenge\n      /*\n     \
    \  * \"Magic\" constants used in response generation\n       */\n      Magic1[39]\
    \ =\n         {0x4D, 0x61, 0x67, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76,\n \
    \         0x65, 0x72, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x69, 0x65,\n      \
    \    0x6E, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67,\n          0x20,\
    \ 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74};\n      Magic2[41] =\n     \
    \    {0x50, 0x61, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x61, 0x6B,\n          0x65,\
    \ 0x20, 0x69, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x6D, 0x6F,\n          0x72, 0x65,\
    \ 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x6F, 0x6E,\n          0x65, 0x20, 0x69,\
    \ 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F,\n          0x6E};\n      /*\n    \
    \   * Hash the password with MD4\n       */\n      NtPasswordHash( Password, giving\
    \ PasswordHash )\n      /*\n       * Now hash the hash\n       */\n      HashNtPasswordHash(\
    \ PasswordHash, giving PasswordHashHash)\n      SHAInit(Context)\n      SHAUpdate(Context,\
    \ PasswordHashHash, 16)\n      SHAUpdate(Context, NTResponse, 24)\n      SHAUpdate(Context,\
    \ Magic1, 39)\n      SHAFinal(Context, Digest)\n      ChallengeHash( PeerChallenge,\
    \ AuthenticatorChallenge, UserName,\n                     giving Challenge)\n\
    \      SHAInit(Context)\n      SHAUpdate(Context, Digest, 20)\n      SHAUpdate(Context,\
    \ Challenge, 8)\n      SHAUpdate(Context, Magic2, 41)\n      SHAFinal(Context,\
    \ Digest)\n      /*\n       * Encode the value of 'Digest' as \"S=\" followed\
    \ by\n       * 40 ASCII hexadecimal digits and return it in\n       * AuthenticatorResponse.\n\
    \       * For example,\n       *   \"S=0123456789ABCDEF0123456789ABCDEF01234567\"\
    \n       */\n   }\n"
- title: 8.8.  CheckAuthenticatorResponse()
  contents:
  - "8.8.  CheckAuthenticatorResponse()\n   CheckAuthenticatorResponse(\n   IN  0-to-256-unicode-char\
    \ Password,\n   IN  24-octet              NtResponse,\n   IN  16-octet       \
    \       PeerChallenge,\n   IN  16-octet              AuthenticatorChallenge,\n\
    \   IN  0-to-256-char         UserName,\n   IN  42-octet              ReceivedResponse,\n\
    \   OUT Boolean               ResponseOK )\n   {\n      20-octet MyResponse\n\
    \      set ResponseOK = FALSE\n      GenerateAuthenticatorResponse( Password,\
    \ NtResponse, PeerChallenge,\n                                     AuthenticatorChallenge,\
    \ UserName,\n                                     giving MyResponse)\n      if\
    \ (MyResponse = ReceivedResponse) then set ResponseOK = TRUE\n      return ResponseOK\n\
    \   }\n"
- title: 8.9.  NewPasswordEncryptedWithOldNtPasswordHash()
  contents:
  - "8.9.  NewPasswordEncryptedWithOldNtPasswordHash()\n   datatype-PWBLOCK\n   {\n\
    \      256-unicode-char Password\n      4-octets         PasswordLength\n   }\n\
    \   NewPasswordEncryptedWithOldNtPasswordHash(\n   IN  0-to-256-unicode-char NewPassword,\n\
    \   IN  0-to-256-unicode-char OldPassword,\n   OUT datatype-PWBLOCK      EncryptedPwBlock\
    \ )\n   {\n      NtPasswordHash( OldPassword, giving PasswordHash )\n      EncryptPwBlockWithPasswordHash(\
    \ NewPassword,\n                                      PasswordHash,\n        \
    \                              giving EncryptedPwBlock )\n   }\n"
- title: 8.10.  EncryptPwBlockWithPasswordHash()
  contents:
  - "8.10.  EncryptPwBlockWithPasswordHash()\n   EncryptPwBlockWithPasswordHash(\n\
    \   IN  0-to-256-unicode-char Password,\n   IN  16-octet              PasswordHash,\n\
    \   OUT datatype-PWBLOCK      PwBlock )\n   {\n      Fill ClearPwBlock with random\
    \ octet values\n         PwSize = lstrlenW( Password ) * sizeof( unicode-char\
    \ )\n         PwOffset = sizeof( ClearPwBlock.Password ) - PwSize\n         Move\
    \ PwSize octets to (ClearPwBlock.Password + PwOffset ) from\n   Password\n   \
    \      ClearPwBlock.PasswordLength = PwSize\n         Rc4Encrypt( ClearPwBlock,\n\
    \                     sizeof( ClearPwBlock ),\n                     PasswordHash,\n\
    \                     sizeof( PasswordHash ),\n                     giving PwBlock\
    \ )\n      }\n"
- title: 8.11.  Rc4Encrypt()
  contents:
  - "8.11.  Rc4Encrypt()\n   Rc4Encrypt(\n   IN  x-octet Clear,\n   IN  integer ClearLength,\n\
    \   IN  y-octet Key,\n   IN  integer KeyLength,\n   OUT x-octet Cypher )\n   {\n\
    \      /*\n       * Use the RC4 encryption algorithm [6] to encrypt Clear of\n\
    \       * length ClearLength octets into a Cypher of the same length\n       *\
    \ such that the Cypher can only be decrypted back to Clear\n       * by providing\
    \ a Key of length KeyLength octets.\n       */\n   }\n"
- title: 8.12.  OldNtPasswordHashEncryptedWithNewNtPasswordHash()
  contents:
  - "8.12.  OldNtPasswordHashEncryptedWithNewNtPasswordHash()\n   OldNtPasswordHashEncryptedWithNewNtPasswordHash(\n\
    \   IN  0-to-256-unicode-char NewPassword,\n   IN  0-to-256-unicode-char OldPassword,\n\
    \   OUT 16-octet              EncryptedPasswordHash )\n   {\n      NtPasswordHash(\
    \ OldPassword, giving OldPasswordHash )\n      NtPasswordHash( NewPassword, giving\
    \ NewPasswordHash )\n      NtPasswordHashEncryptedWithBlock( OldPasswordHash,\n\
    \                                        NewPasswordHash,\n                  \
    \                      giving EncryptedPasswordHash )\n   }\n"
- title: 8.13.  NtPasswordHashEncryptedWithBlock()
  contents:
  - "8.13.  NtPasswordHashEncryptedWithBlock()\n   NtPasswordHashEncryptedWithBlock(\n\
    \   IN  16-octet PasswordHash,\n   IN  16-octet Block,\n   OUT 16-octet Cypher\
    \ )\n   {\n      DesEncrypt( 1st 8-octets PasswordHash,\n                  1st\
    \ 7-octets Block,\n                  giving 1st 8-octets Cypher )\n      DesEncrypt(\
    \ 2nd 8-octets PasswordHash,\n                  2nd 7-octets Block,\n        \
    \          giving 2nd 8-octets Cypher )\n   }\n"
- title: 9.  Examples
  contents:
  - "9.  Examples\n   The following sections include protocol negotiation and hash\n\
    \   generation examples.\n"
- title: 9.1.  Negotiation Examples
  contents:
  - "9.1.  Negotiation Examples\n   Here are some examples of typical negotiations.\
    \  The peer is on the\n   left and the authenticator is on the right.\n   The\
    \ packet sequence ID is incremented on each authentication retry\n   response\
    \ and on the change password response.  All cases where the\n   packet sequence\
    \ ID is updated are noted below.\n   Response retry is never allowed after Change\
    \ Password.  Change\n   Password may occur after response retry.\n"
- title: 9.1.1.  Successful authentication
  contents:
  - "9.1.1.  Successful authentication\n                         <- Authenticator\
    \ Challenge\n       Peer Response/Challenge ->\n                         <- Success/Authenticator\
    \ Response\n   (Authenticator Response verification succeeds, call continues)\n"
- title: 9.1.2.  Authenticator authentication failure
  contents:
  - "9.1.2.  Authenticator authentication failure\n                         <- Authenticator\
    \ Challenge\n       Peer Response/Challenge ->\n                         <- Success/Authenticator\
    \ Response\n   (Authenticator Response verification fails, peer disconnects)\n"
- title: 9.1.3.  Failed authentication with no retry allowed
  contents:
  - "9.1.3.  Failed authentication with no retry allowed\n                       \
    \  <- Authenticator Challenge\n       Peer Response/Challenge ->\n           \
    \              <- Failure (E=691 R=0)\n   (Authenticator disconnects)\n"
- title: 9.1.4.  Successful authentication after retry
  contents:
  - "9.1.4.  Successful authentication after retry\n                         <- Authenticator\
    \ Challenge\n       Peer Response/Challenge ->\n                         <- Failure\
    \ (E=691 R=1), disable short timeout\n       Response (++ID) to challenge in failure\
    \ message ->\n                         <- Success/Authenticator Response\n   (Authenticator\
    \ Response verification succeeds, call continues)\n"
- title: 9.1.5.  Failed hack attack with 3 attempts allowed
  contents:
  - "9.1.5.  Failed hack attack with 3 attempts allowed\n                        \
    \ <- Authenticator Challenge\n       Peer Response/Challenge ->\n            \
    \             <- Failure (E=691 R=1), disable short timeout\n       Response (++ID)\
    \ to challenge in Failure message ->\n                         <- Failure (E=691\
    \ R=1), disable short timeout\n       Response (++ID) to challenge in Failure\
    \ message ->\n                         <- Failure (E=691 R=0)\n"
- title: 9.1.6.  Successful authentication with password change
  contents:
  - "9.1.6.  Successful authentication with password change\n                    \
    \     <- Authenticator Challenge\n       Peer Response/Challenge ->\n        \
    \                 <- Failure (E=648 R=0 V=3), disable short\n   timeout\n    \
    \   ChangePassword (++ID) to challenge in Failure message ->\n               \
    \          <- Success/Authenticator Response\n   (Authenticator Response verification\
    \ succeeds, call continues)\n"
- title: 9.1.7.  Successful authentication with retry and password change
  contents:
  - "9.1.7.  Successful authentication with retry and password change\n          \
    \               <- Authenticator Challenge\n       Peer Response/Challenge ->\n\
    \                         <- Failure (E=691 R=1), disable short timeout\n    \
    \   Response (++ID) to first challenge+23 ->\n                         <- Failure\
    \ (E=648 R=0 V=2), disable short\n   timeout\n       ChangePassword (++ID) to\
    \ first challenge+23 ->\n                         <- Success/Authenticator Response\n\
    \   (Authenticator Response verification succeeds, call continues)\n"
- title: 9.2.  Hash Example
  contents:
  - "9.2.  Hash Example\n   Intermediate values for user name \"User\" and password\
    \ \"clientPass\".\n   All numeric values are hexadecimal.\n"
- title: '0-to-256-char UserName:'
  contents:
  - '0-to-256-char UserName:

    '
- title: 55 73 65 72
  contents:
  - '55 73 65 72

    '
- title: '0-to-256-unicode-char Password:'
  contents:
  - '0-to-256-unicode-char Password:

    '
- title: 63 00 6C 00 69 00 65 00 6E 00 74 00 50 00 61 00 73 00 73 00
  contents:
  - '63 00 6C 00 69 00 65 00 6E 00 74 00 50 00 61 00 73 00 73 00

    '
- title: '16-octet AuthenticatorChallenge:'
  contents:
  - '16-octet AuthenticatorChallenge:

    '
- title: 5B 5D 7C 7D 7B 3F 2F 3E 3C 2C 60 21 32 26 26 28
  contents:
  - '5B 5D 7C 7D 7B 3F 2F 3E 3C 2C 60 21 32 26 26 28

    '
- title: '16-octet PeerChallenge:'
  contents:
  - '16-octet PeerChallenge:

    '
- title: 21 40 23 24 25 5E 26 2A 28 29 5F 2B 3A 33 7C 7E
  contents:
  - '21 40 23 24 25 5E 26 2A 28 29 5F 2B 3A 33 7C 7E

    '
- title: '8-octet Challenge:'
  contents:
  - '8-octet Challenge:

    '
- title: D0 2E 43 86 BC E9 12 26
  contents:
  - 'D0 2E 43 86 BC E9 12 26

    '
- title: '16-octet PasswordHash:'
  contents:
  - '16-octet PasswordHash:

    '
- title: 44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE
  contents:
  - '44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE

    '
- title: '24 octet NT-Response:'
  contents:
  - '24 octet NT-Response:

    '
- title: 82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33 11 4A 3D 85 D6 DF
  contents:
  - '82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33 11 4A 3D 85 D6 DF

    '
- title: '16-octet PasswordHashHash:'
  contents:
  - '16-octet PasswordHashHash:

    '
- title: 41 C0 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F
  contents:
  - '41 C0 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F

    '
- title: '42-octet AuthenticatorResponse:'
  contents:
  - '42-octet AuthenticatorResponse:

    '
- title: '"S=407A5589115FD0D6209F510FE9C04566932CDA56"'
  contents:
  - '"S=407A5589115FD0D6209F510FE9C04566932CDA56"

    '
- title: 9.3.  Example of DES Key Generation
  contents:
  - "9.3.  Example of DES Key Generation\n   DES uses 56-bit keys, expanded to 64\
    \ bits by the insertion of parity\n   bits.  After the parity of the key has been\
    \ fixed, every eighth bit\n   is a parity bit and the number of bits that are\
    \ set (1) in each octet\n   is odd; i.e., odd parity.  Note that many DES engines\
    \ do not check\n   parity, however, simply stripping the parity bits.  The following\n\
    \   example illustrates the values resulting from the use of the password\n  \
    \ \"MyPw\" to generate a pair of DES keys (e.g., for use in the\n   NtPasswordHashEncryptedWithBlock()\
    \ described in section 8.13).\n   0-to-256-unicode-char Password:\n   4D 79 50\
    \ 77\n   16-octet PasswordHash:\n   FC 15 6A F7 ED CD 6C 0E DD E3 33 7D 42 7F\
    \ 4E AC\n   First \"raw\" DES key (initial 7 octets of password hash):\n   FC\
    \ 15 6A F7 ED CD 6C\n   First parity-corrected DES key (eight octets):\n   FD\
    \ 0B 5B 5E 7F 6E 34 D9\n   Second \"raw\" DES key (second 7 octets of password\
    \ hash)\n   0E DD E3 33 7D 42 7F\n   Second parity-corrected DES key (eight octets):\n\
    \   0E 6E 79 67 37 EA 08 FE\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   As an implementation detail, the authenticator\
    \ SHOULD limit the\n   number of password retries allowed to make brute-force\
    \ password\n   guessing attacks more difficult.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1]  Simpson, W., \"The Point-to-Point Protocol (PPP)\",\
    \ STD 51, RFC\n        1661, July 1994.\n   [2]  Simpson, W., \"PPP Challenge\
    \ Handshake Authentication Protocol\n        (CHAP)\", RFC 1994, August 1996.\n\
    \   [3]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n  \
    \      Levels\", BCP 14, RFC 2119, March 1997.\n   [4]  \"Data Encryption Standard\
    \ (DES)\", Federal Information Processing\n        Standard Publication 46-2,\
    \ National Institute of Standards and\n        Technology, December 1993.\n  \
    \ [5]  Rivest, R., \"MD4 Message Digest Algorithm\", RFC 1320, April\n       \
    \ 1992.\n   [6]  RC4 is a proprietary encryption algorithm available under\n \
    \       license from RSA Data Security Inc.  For licensing information,\n    \
    \    contact:\n             RSA Data Security, Inc.\n             100 Marine Parkway\n\
    \             Redwood City, CA 94065-1031\n   [7]  Eastlake, D., Crocker, S. and\
    \ J. Schiller, \"Randomness\n        Recommendations for Security\", RFC 1750,\
    \ December 1994.\n   [8]  \"The Unicode Standard, Version 2.0\", The Unicode Consortium,\n\
    \        Addison-Wesley, 1996. ISBN 0-201-48345-9.\n   [9]  Zorn, G. and Cobb,\
    \ S., \"Microsoft PPP CHAP Extensions\", RFC\n        2433, October 1998.\n  \
    \ [10] \"DES Modes of Operation\", Federal Information Processing\n        Standards\
    \ Publication 81, National Institute of Standards and\n        Technology, December\
    \ 1980.\n   [11] \"Secure Hash Standard\", Federal Information Processing Standards\n\
    \        Publication 180-1, National Institute of Standards and\n        Technology,\
    \ April 1995.\n   [12] Zorn, G., \"PPP LCP Internationalization Configuration\
    \ Option\",\n        RFC 2484, January 1999.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   Thanks (in no particular order) to Bruce Johnson, Tony\
    \ Bell, Paul\n   Leach, Terence Spies, Dan Simon, Narendra Gidwani, Gurdeep Singh\n\
    \   Pall, Jody Terrill, Brad Robel-Forrest, and Joe Davies for useful\n   suggestions\
    \ and feedback.\n"
- title: 13.  Author's Address
  contents:
  - "13.  Author's Address\n   Questions about this memo can also be directed to:\n\
    \   Glen Zorn\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, Washington\
    \ 98052\n   Phone: +1 425 703 1559\n   Fax:   +1 425 936 7329\n   EMail: gwz@acm.org\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
