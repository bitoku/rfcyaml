This document proposes to add mutual authentication, based on a human memorizable password, to the basic, unauthenticated Diffie  Hellman key exchange.
The proposed algorithm is called the Password  Authenticated Key (PAK) exchange.
PAK allows two parties to authenticate themselves while performing the Diffie Hellman exchange.
The protocol is secure against all passive and active attacks.
In particular, it does not allow either type of attacker to obtain any information that would enable an offline dictionary attack on the password.
Introduction PAK has the following advantages:
It provides a secure, authenticated key exchange protocol.
It is secure against offline dictionary attacks when passwords are used.
It has been proven to be as secure as the Diffie Hellman solution.
The PAK protocol ([BMP00], [MP05], [X.1035]) has been proven to be as secure as the Diffie Hellman ([RFC2631], [DH76]) in the random oracle model [BR93].
That is, PAK retains its security when used with low  entropy passwords.
Therefore, it can be seamlessly integrated into existing applications, requiring secure authentication based on such low entropy shared secrets.
Conventions  A is an identity of Alice.
B is an identity of Bob.
Ra is a secret random exponent selected by A.  Rb is a secret random exponent selected by B.  Xab denotes a value (X presumably computed by A) as derived by B.  Yba
denotes a value (Y presumably computed by B) as derived by A.  A mod b
denotes the least non negative remainder when a is divided by b.  Hi(u)
denotes an agreed on function (e.g., based on SHA 1, SHA 256, etc.)
computed over a string u
; the various H() act as independent random functions.
H1(u) and H2(u) are the key derivation functions.
H3(u), H4(u), and H5(u) are the hash functions.
Multiplication, division, and exponentiation are performed over (Zp) ; in other words: 1) a b always means a b (mod p).
a/b always means a   x (mod p), where x is the multiplicative inverse of b modulo p. 3)
Key Exchange Diffie Hellman key agreement requires that both the sender and recipient of a message create their own secret, random numbers and exchange the exponentiation of their respective numbers.
PAK has two parties, Alice (A) and Bob (B), sharing a secret password PW that satisfies the following conditions: H1(A B PW) !
0 H2(A B PW) !
The global Diffie Hellman publicly known constants, a prime p and a generator g, are carefully selected so that: 1.
A safe prime p is large enough to make the computation of discrete logarithms infeasible, and 2.
Powers of g modulo p cover the entire range of p 1 integers from 1 to p 1.
(References demonstrate working examples of selections).
Initially, Alice (A) selects a secret, random exponent Ra and computes g^Ra; Bob (B) selects a secret, random exponent Rb and computes g^Rb.
For efficiency purposes, short exponents could be used for Ra and Rb, provided they have a certain minimum size.
Then: A   B: {A, X   H1(A B PW)
(The above precondition on PW ensures that X !
0) Bob receives Q (presumably Q   X), verifies that Q !
(if Q   0, Bob aborts the procedure); divides Q by H1(A B PW) to get Xab, the recovered value of g^Ra B   A: {Y   H2(A B PW) (g^Rb), S1   H3(A B PW Xab g^Rb (Xab)^Rb)} (The above precondition on PW ensures that Y !
Alice verifies that Y !  0; divides Y by H2(A B PW) to get Yba, the recovered value of g^Rb, and computes S1'   H3(A B PW g^Ra Yba (Yba)^Ra); authenticates Bob by checking whether S1'   S1; if authenticated, then sets key K   H5(A B PW g^Ra Yba (
Bob Computes S2'   H4(A B PW Xab g^Rb (Xab)^Rb) and authenticates Alice by checking whether S2'   S2; if authenticated, then sets K   H5(A B PW Xab g^Rb (Xab)^Rb)
If any of the above verifications fails, the protocol halts; otherwise, both parties have authenticated each other and established the key.
This section provides guidance on selection of the PAK parameters.
First, it addresses general considerations, then it reports on specific implementations.
In general implementations, the parameters must be selected to meet algorithm requirements of [BMP00].
Over the Air Service Provisioning (OTASP)
and Wireless Local Area Network (WLAN) Diffie Hellman Parameters and Key Expansion Functions [OTASP], [TIA683], and [WLAN] pre set public parameters p and g to their "published" values.
This is necessary to protect against an attacker sending bogus p and g values, tricking the legitimate user to engage in improper Diffie Hellman exponentiation and leaking some information about the password.
According to [OTASP], [TIA683], and [WLAN], g shall be set to 00001101, and p to the following 1024 bit prime number (most significant bit first):
In addition, if short exponents [MP05] are used for Diffie Hellman parameters Ra and Rb, then they should have a minimum size of 384 bits.
The independent, random functions H1 and H2 should each output 1152 bits, assuming prime p is 1024 bits long and
session keys K are 128 bits long.
H3, H4, and H5 each output 128 bits.
More information on instantiating random functions using hash functions can be found in [BR93].
We use the FIPS 180 SHA 1 hashing function [FIPS180]
below to instantiate the random function as done in [WLAN]; however, SHA 256 can also be used: H1(z):
z z) mod 2^128 H4(z):
z z) mod 2^128 H5(z):
In order to create 1152 output bits for H1 and H2, nine calls to SHA 1 are made and the 128 least significant bits of each output are used.
The input payload of each call to SHA 1 consists of: a) 32 bits of function type, which for H1 is set to 1 and for H2 is set to 2; b) a 32 bit counter value, which is incremented from 1 to 9 for each call to SHA 1; c)
the argument z [for (A B PW)].
The functions H3, H4, and H5 require only one call to the SHA 1 hashing function and
their respective payloads consist of: a) 32 bits of function type (e.g., 3 for H3); b) a 32 bit value for the bit length of the argument z; c) the actual argument repeated twice.
Finally, the 128 least significant bits of the output are used.
Security Considerations Security considerations are as follows:
Any protocol that uses PAK must specify a method for producing a single representation of identity strings.
Shared secret PAK involves the use of a shared secret.
Protection of the shared values and managing (limiting)
their exposure over time is essential and can be achieved using well known security policies and measures.
If a single secret is shared among more than two entities (e.g., Alice, Bob, and Mallory), then Mallory can represent himself as Alice to Bob without Bob being any the wiser.
Selection of Diffie Hellman parameters The parameters p and g must be carefully selected in order not to compromise the shared secret.
Only previously agreed upon values for parameters p and g
should be used in the PAK protocol.
This is necessary to protect against an attacker sending bogus p and g values and thus tricking the other communicating party in an improper Diffie Hellman exponentiation.
Both parties also need to randomly select a new exponent each time the key agreement protocol is executed.
If both parties re use the same values, then Forward Secrecy property is lost.
In addition, if short exponents Ra and Rb are used, then they should have a minimum size of 384 bits (assuming that 128 bit session keys are used).
Historically, the developers, who strived for 128 bit security (and thus selected 256 bit exponents), added 128 bits to the exponents to ensure the security reduction proofs.
This should explain how an "odd" length of 384 has been arrived at.
There is a potential attack, the so called discrete logarithm attack on the multiplicative group of congruencies modulo p, in which an adversary can construct a table of discrete logarithms to be used as a "dictionary".
sufficiently large prime, p, must be selected to protect against such an attack.
A proper 1024 bit value for p and an appropriate value for g are published in [WLAN] and [TIA683].
For the moment, this is what has been implemented; however, a larger prime (i.e., one that is 2048 bits long, or even larger) will definitely provide better protection.
It is important to note that once this is done, the generator must be changed too, so this task must be approached with extreme care.
An online password attack can be launched by an attacker by repeatedly guessing the password and attempting to authenticate.
The implementers of PAK should consider employing mechanisms (such as lockouts) for preventing such attacks.
The independent, random functions H1 and H2 should output 1152 bits each, assuming prime p is 1024 bits long and
session keys K are 128 bits long.
The random functions H3, H4, and H5 should output 128 bits.
An example of secure implementation of PAK is provided in [Plan9].
