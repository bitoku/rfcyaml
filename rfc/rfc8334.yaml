- contents:
  - '  Launch Phase Mapping for the Extensible Provisioning Protocol (EPP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an Extensible Provisioning Protocol (EPP)\n
    \  extension mapping for the provisioning and management of domain name\n   registrations
    and applications during the launch of a domain name\n   registry.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8334.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Conventions Used in This Document . . . . . . . . .
    . . .   3\n   2.  Object Attributes . . . . . . . . . . . . . . . . . . . . .
    .   4\n     2.1.  Application Identifier  . . . . . . . . . . . . . . . . .   4\n
    \    2.2.  Validator Identifier  . . . . . . . . . . . . . . . . . .   5\n     2.3.
    \ Launch Phases . . . . . . . . . . . . . . . . . . . . . .   5\n       2.3.1.
    \ Trademark Claims Phase  . . . . . . . . . . . . . . .   6\n     2.4.  Status
    Values . . . . . . . . . . . . . . . . . . . . . .   9\n       2.4.1.  State Transition
    \ . . . . . . . . . . . . . . . . . .  11\n     2.5.  Poll Messaging  . . . .
    . . . . . . . . . . . . . . . . .  12\n     2.6.  Mark Validation Models  . .
    . . . . . . . . . . . . . . .  14\n       2.6.1.  <launch:codeMark> Element .
    . . . . . . . . . . . . .  15\n       2.6.2.  <mark:mark> Element . . . . . .
    . . . . . . . . . . .  16\n       2.6.3.  Digital Signature . . . . . . . . .
    . . . . . . . . .  16\n         2.6.3.1.  <smd:signedMark> Element  . . . . .
    . . . . . . .  16\n         2.6.3.2.  <smd:encodedSignedMark> Element . . . .
    . . . . .  16\n   3.  EPP Command Mapping . . . . . . . . . . . . . . . . . .
    . . .  17\n     3.1.  EPP <check> Command . . . . . . . . . . . . . . . . . .
    .  17\n       3.1.1.  Claims Check Form . . . . . . . . . . . . . . . . . .  17\n
    \      3.1.2.  Availability Check Form . . . . . . . . . . . . . . .  22\n       3.1.3.
    \ Trademark Check Form  . . . . . . . . . . . . . . . .  23\n     3.2.  EPP <info>
    Command  . . . . . . . . . . . . . . . . . . .  26\n     3.3.  EPP <create> Command
    \ . . . . . . . . . . . . . . . . . .  30\n       3.3.1.  Sunrise Create Form
    . . . . . . . . . . . . . . . . .  30\n       3.3.2.  Claims Create Form  . .
    . . . . . . . . . . . . . . .  36\n       3.3.3.  General Create Form . . . .
    . . . . . . . . . . . . .  39\n       3.3.4.  Mixed Create Form . . . . . . .
    . . . . . . . . . . .  40\n       3.3.5.  Create Response . . . . . . . . . .
    . . . . . . . . .  42\n     3.4.  EPP <update> Command  . . . . . . . . . . .
    . . . . . . .  43\n     3.5.  EPP <delete> Command  . . . . . . . . . . . . .
    . . . . .  44\n     3.6.  EPP <renew> Command . . . . . . . . . . . . . . . .
    . . .  46\n     3.7.  EPP <transfer> Command  . . . . . . . . . . . . . . . .
    .  46\n   4.  Formal Syntax . . . . . . . . . . . . . . . . . . . . . . . .  46\n
    \    4.1.  Launch Schema . . . . . . . . . . . . . . . . . . . . . .  46\n   5.
    \ IANA Considerations . . . . . . . . . . . . . . . . . . . . .  54\n     5.1.
    \ XML Namespace . . . . . . . . . . . . . . . . . . . . . .  54\n     5.2.  EPP
    Extension Registry  . . . . . . . . . . . . . . . . .  55\n   6.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  55\n   7.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  56\n     7.1.  Normative References  . . .
    . . . . . . . . . . . . . . .  56\n     7.2.  Informative References  . . . .
    . . . . . . . . . . . . .  57\n   Acknowledgements  . . . . . . . . . . . . .
    . . . . . . . . . . .  57\n   Authors' Addresses  . . . . . . . . . . . . . .
    . . . . . . . . .  58\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes an extension mapping for version
    1.0 of the\n   Extensible Provisioning Protocol (EPP) [RFC5730].  This EPP mapping\n
    \  specifies a flexible schema that can be used to implement several\n   common
    use cases related to the provisioning and management of domain\n   name registrations
    and applications during the launch of a domain\n   name registry.\n   It is typical
    for domain registries to operate in special modes as\n   they begin operation
    to facilitate allocation of domain names, often\n   according to special rules.
    \ This document uses the term \"launch\n   phase\" and the shorter form \"launch\"
    to refer to such a period.\n   Multiple launch phases and multiple models are
    supported to enable\n   the launch of a domain name registry.  Server policy determines
    what\n   is supported and validated.  Communication of the server policy is\n
    \  typically performed using an out-of-band mechanism that is not\n   specified
    in this document.\n   The EPP domain name mapping [RFC5731] is designed for the
    steady-\n   state operation of a registry.  During a launch period, the model
    in\n   place may be different from what is defined in the EPP domain name\n   mapping
    [RFC5731].  For example, registries often accept multiple\n   applications for
    the same domain name during the \"sunrise\" launch\n   phase, referred to as a
    Launch Application.  A Launch Registration\n   refers to a registration made during
    a launch phase when the server\n   uses a \"first-come, first-served\" model.
    \ Even in a \"first-come,\n   first-served\" model, additional steps and information
    might be\n   required, such as trademark information.  In addition, RFC 7848\n
    \  [RFC7848] defines a registry interface for the Trademark Claims or\n   \"claims\"
    launch phase that includes support for presenting a\n   Trademark Claims Notice
    to the registrant.  This document proposes an\n   extension to the domain name
    mapping in order to provide a uniform\n   interface for the management of Launch
    Applications and Launch\n   Registrations in launch phases.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]
      when, and only when, they appear in all\n   capitals, as shown here.\n   XML
      [W3C.REC-xml11-20060816] is case sensitive.  Unless stated\n   otherwise, XML
      specifications and examples provided in this document\n   MUST be interpreted
      in the character case presented in order to\n   develop a conforming implementation.\n
      \  In examples, \"C:\" represents lines sent by a protocol client and \"S:\"\n
      \  represents lines returned by a protocol server.  Indentation and\n   whitespace
      in examples are provided only to illustrate element\n   relationships and are
      not a REQUIRED feature of this protocol.  The\n   use of \"...\" is used as
      shorthand for elements defined outside this\n   document.\n   A Launch Registration
      is a domain name registration during a launch\n   phase when the server uses
      a \"first-come, first-served\" model.  Only\n   a single registration for a
      domain name can exist in the server at a\n   time.\n   A Launch Application
      represents the intent to register a domain name\n   during a launch phase when
      the server accepts multiple applications\n   for a domain name, and the server
      later selects one of the\n   applications to allocate as a registration.  Many
      Launch Applications\n   for a domain name can exist in the server at a time.\n
      \  The XML namespace prefix \"launch\" is used for the namespace\n   \"urn:ietf:params:xml:ns:launch-1.0\",
      but implementations MUST NOT\n   depend on it and instead employ a proper namespace-aware
      XML parser\n   and serializer to interpret and output the XML documents.\n   The
      XML namespace prefix \"smd\" is used for the namespace\n   \"urn:ietf:params:xml:ns:signedMark-1.0\"
      [RFC7848], but\n   implementations MUST NOT depend on it and instead employ
      a proper\n   namespace-aware XML parser and serializer to interpret and output
      the\n   XML documents.\n   The XML namespace prefix \"mark\" is used for the
      namespace\n   \"urn:ietf:params:xml:ns:mark-1.0\" [RFC7848], but implementations
      MUST\n   NOT depend on it and instead employ a proper namespace-aware XML\n
      \  parser and serializer to interpret and output the XML documents.\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Object Attributes\n   This extension adds additional elements to the EPP
    domain name\n   mapping [RFC5731].  Only those new elements are described here.\n"
  - contents:
    - "2.1.  Application Identifier\n   Servers MAY allow multiple applications, referred
      to as a Launch\n   Application, of the same domain name during its launch phase\n
      \  operations.  Upon receiving a valid <domain:create> command to create\n   a
      Launch Application, the server MUST create an application object\n   corresponding
      to the request, assign an application identifier for\n   the Launch Application,
      set the pendingCreate status [RFC5731], and\n   return the application identifier
      to the client with the\n   <launch:applicationID> element.  In order to facilitate
      correlation,\n   all subsequent launch operations on the Launch Application
      MUST be\n   qualified by the previously assigned application identifier using
      the\n   <launch:applicationID> element.\n"
    title: 2.1.  Application Identifier
  - contents:
    - "2.2.  Validator Identifier\n   The Validator Identifier is unique to the server
      and is the\n   identifier for a Trademark Validator, which validates marks and
      has a\n   repository of validated marks.  The OPTIONAL \"validatorID\" attribute\n
      \  is used to define the Validator Identifier of the Trademark\n   Validator.
      \ Registries MAY support more than one third-party\n   Trademark Validator.
      \ The unique set of Validator Identifier values\n   supported by the server
      is up to server policy.  The Internet\n   Corporation for Assigned Names and
      Numbers (ICANN) Trademark\n   Clearinghouse (TMCH) is the default Trademark
      Validator and is\n   reserved for the Validator Identifier of \"tmch\".  If
      the ICANN TMCH\n   is not used or multiple Trademark Validators are used, the
      Validator\n   Identifier MUST be defined using the \"validatorID\" attribute.\n
      \  The Validator Identifier MAY be related to one or more issuer\n   identifiers
      of the <mark:id> and <smd:id> elements defined in\n   [RFC7848].  Both the Validator
      Identifier and the Issuer Identifier\n   used MUST be unique in the server.
      \ If the ICANN TMCH is not used or\n   multiple Trademark Validators are used,
      the server MUST define the\n   list of supported validator identifiers and MUST
      make this\n   information available to clients using a mutually acceptable,
      out-of-\n   band mechanism.\n   The Validator Identifier may define a non-Trademark
      Validator that\n   supports a form of claims, where claims and a Validator Identifier\n
      \  can be used for purposes beyond trademarks.\n"
    title: 2.2.  Validator Identifier
  - contents:
    - "2.3.  Launch Phases\n   The server MAY support multiple launch phases sequentially
      or\n   simultaneously.  The <launch:phase> element MUST be included by the\n
      \  client to define the target launch phase of the command.  The server\n   SHOULD
      validate the phase and MAY validate the sub-phase of the\n   <launch:phase>
      element against the active phase and OPTIONAL sub-\n   phase of the server,
      and return an EPP error result code of 2306\n   [RFC5730] if there is a mismatch.\n
      \  The following launch phase values are defined:\n   sunrise:  The phase during
      which trademark holders can submit\n      registrations or applications with
      trademark information that can\n      be validated by the server.\n   landrush:
      \ A post-\"sunrise\" launch phase when non-trademark holders\n      are allowed
      to register domain names with steps taken to address a\n      large volume of
      initial registrations.\n   claims:  The phase, as defined in Section 2.3.1,
      in which a claims\n      notice must be displayed to a prospective registrant
      of a domain\n      name that matches trademarks.\n   open:  A phase that is
      also referred to as \"steady state\".  Servers\n      may require additional
      trademark protection during this phase.\n   custom:  A custom server launch
      phase that is defined using the\n      \"name\" attribute.\n   For extensibility,
      the <launch:phase> element includes an OPTIONAL\n   \"name\" attribute that
      can define a sub-phase or the full name of the\n   phase when the <launch:phase>
      element has the \"custom\" value.  For\n   example, the \"claims\" launch phase
      could have two sub-phases that\n   include \"landrush\" and \"open\".\n   Launch
      phases MAY overlap to support the \"claims\" launch phase,\n   defined in Section
      2.3.1, and to support a traditional \"landrush\"\n   launch phase.  The overlap
      of the \"claims\" and \"landrush\" launch\n   phases SHOULD be handled by setting
      \"claims\" as the <launch:phase>\n   value and setting \"landrush\" as the sub-phase
      with the \"name\"\n   attribute.  For example, the <launch:phase> element should
      be\n   <launch:phase name=\"landrush\">claims</launch:phase>.\n"
    - contents:
      - "2.3.1.  Trademark Claims Phase\n   The Trademark Claims Phase is when a claims
        notice must be displayed\n   to a prospective registrant of a domain name
        that matches trademarks.\n   See [ICANN-TMCH] for additional details of trademark
        claims handling.\n   The source of the trademarks is a Trademark Validator,
        and the source\n   of the claims notice information is a Claims Notice Information\n
        \  Service (CNIS), which may be directly linked to a Trademark\n   Validator.
        \ The client interfaces with 1) the server to determine if\n   a trademark
        exists for a domain name, 2) a CNIS to get the claims\n   notice information,
        and 3) the server to pass the claims notice\n   acceptance information in
        a create command.  This document supports\n   the Trademark Claims Phase in
        two ways, including:\n   Claims Check Form:  Is defined in Section 3.1.1 and
        is used to\n      determine whether or not there are any matching trademarks
        for a\n      domain name.  If there is at least one matching trademark that\n
        \     exists for the domain name, a claims key is returned.  The mapping\n
        \     of domain names and the claims keys is based on an out-of-band\n      interface
        between the server and the Trademark Validator.  The\n      CNIS associated
        with the claims key Validator Identifier\n      (Section 2.2) MUST accept
        the claims key as the basis for\n      retrieving the claims information.\n
        \  Claims Create Form:  Is defined in Section 3.3.2 and is used to pass\n
        \     the claims notice acceptance information in a create command.  The\n
        \     notice identifier (<launch:noticeID>) format, validation rules,\n      and
        server processing is up to the interface between the server\n      and the
        Trademark Validator.  The CNIS associated with the\n      Validator Identifier
        (Section 2.2) MUST generate a notice\n      identifier compliant with the
        <launch:noticeID> element.\n   The following shows the Trademark Claims Phase
        registration flow:\n    .------------.     .--------.                   .--------.
        \ .------.\n    | Registrant |     | Client |                   | Server |
        \ | CNIS |\n    '------------'     '--------'                   '--------'
        \ '------'\n           | Request Domain |                            |          |\n
        \          |   Registration |                            |          |\n           |--------------->|
        Domain Check               |          |\n           |                |--------------------------->|
        \         |\n           | Domain         | Domain Unavailable   .------------.
        \  |\n           |   Unavailable  |<---------------------( Available? )   |\n
        \          |<---------------|                  No  '------------'   |\n           |
        \               | Domain Available           | Yes      |\n           |                |<---------------------------|
        \         |\n           |                | Domain Claims Check        |          |\n
        \          |                |--------------------------->|          |\n           |
        \               |                       .---------.     |\n           |                |
        Claims Don't Exist   /    Does   \\    |\n           |                |<--------------------(
        Domain have )   |\n           |                |                   No \\  Claims?
        \ /    |\n           |                |                       '---------'
        \    |\n           |                | Domain Create              |  | Yes
        \  |\n           |                |--------------------------->|  |       |\n
        \          | Domain         | Domain Registered          |  |       |\n           |
        \  Registered   |<---------------------------|  |       |\n           |<---------------|
        \                              |       |\n           |                                                |
        \      |\n           |                | Claims Exist with Claims Keys |       |\n
        \          |                |<------------------------------'       |\n           |
        \               |                                       |\n   .-----. |                |
        Request Claims Info with Claims Key   |\n   |Abort| | Display        |-------------------------------------->|\n
        \  '-----' | Claims         | Return Claims Info                    |\n    ^
        \     | Notice         |<--------------------------------------|\n    | No
        \  |<---------------|                                       |\n    |  .------.
        \ Yes        |                                       |\n    '-(  Ack?  )----------->|
        Domain Claims Create Form  |          |\n       '------'             |--------------------------->|
        \         |\n           | Registration   | Error       .----------------------.
        \ |\n           |   Error        |<-----------( Validation Successful? ) |\n
        \          |<---------------|          No '----------------------'  |\n           |
        \               |                            | Yes      |\n           | Domain
        \        | Domain Registered          |          |\n           |   Registered
        \  |<---------------------------|          |\n           |<---------------|
        \                           |          |\n                                 Figure
        1\n"
      title: 2.3.1.  Trademark Claims Phase
    title: 2.3.  Launch Phases
  - contents:
    - "2.4.  Status Values\n   A Launch Application or Launch Registration object
      MAY have a launch\n   status value.  The <launch:status> element is used to
      convey the\n   launch status pertaining to the object, beyond what is specified
      in\n   the object mapping.  A Launch Application or Launch Registration MUST\n
      \  set the \"pendingCreate\" status [RFC5731] if a launch status is\n   supported
      and is not one of the final statuses (\"allocated\" and\n   \"rejected\").\n
      \  The following status values are defined using the required \"s\"\n   attribute:\n
      \  pendingValidation:  The initial state of a newly created application\n      or
      registration object.  The application or registration requires\n      validation,
      but the validation process has not yet completed.\n   validated:  The application
      or registration meets relevant registry\n      rules.\n   invalid:  The application
      or registration does not validate according\n      to registry rules.  Server
      policies permitting, it may transition\n      back into \"pendingValidation\"
      for revalidation, after\n      modifications are made to ostensibly correct
      attributes that\n      caused the validation failure.\n   pendingAllocation:
      \ The allocation of the application or registration\n      is pending based
      on the results of some out-of-band process (for\n      example, an auction).\n
      \  allocated:  The object corresponding to the application or\n      registration
      has been provisioned.  This is a possible end state\n      of an application
      or registration object.\n   rejected:  The application or registration object
      was not\n      provisioned.  This is a possible end state of an application
      or\n      registration object.\n   custom:  A custom status that is defined
      using the \"name\" attribute.\n   Each status value MAY be accompanied by a
      string of human-readable\n   text that describes the rationale for the status
      applied to the\n   object.  The OPTIONAL \"lang\" attribute, as defined in [RFC5646],
      MAY\n   be present to identify the language if the negotiated value is\n   something
      other than the default value of \"en\" (English).\n   For extensibility, the
      <launch:status> element includes an OPTIONAL\n   \"name\" attribute that can
      define a sub-status or the full name of the\n   status when the status value
      is \"custom\".  The server SHOULD use one\n   of the non-\"custom\" status values.\n
      \  Status values MAY be skipped.  For example, an application or\n   registration
      MAY immediately start at the \"allocated\" status, or an\n   application or
      registration MAY skip the \"pendingAllocation\" status.\n   If the launch phase
      does not require validation of a request, an\n   application or registration
      MAY immediately skip to\n   \"pendingAllocation\".\n"
    - contents:
      - "2.4.1.  State Transition\n   The transitions between the states is a matter
        of server policy.\n   This diagram defines one possible set of permitted transitions.\n
        \                     | request\n                      |\n                      |
        \    +--------------------------+\n                      |     |                          |\n
        \                     v     v                          |\n            +-------------------+
        \                     |\n            |                   |                      |\n
        \           | pendingValidation +--------------+       |\n            |                   |
        \             |       |\n            +---------+---------+              |
        \      |\n                      |                        |       |\n                      |
        \                       |       |\n                      v                        v
        \      |\n                +-----------+             +---------+  |\n                |
        \          |             |         |  |\n                | validated |             |
        invalid +--+\n                |           |             |         |\n                +-----+-----+
        \            +----+----+\n                      |                        |\n
        \                     |                        |\n                      v
        \                       |\n            +-------------------+              |\n
        \           |                   |              |\n            | pendingAllocation
        +-----------+  |\n            |                   |           |  |\n            +---------+---------+
        \          |  |\n                      |                     |  |\n                      |
        \                    |  |\n                      |                     |  |\n
        \                     |                     |  |\n                      |
        \                    |  |\n                      v                     v  v\n
        \                +---------+             +--------+\n                /           \\
        \          /          \\\n                | allocated |           | rejected
        |\n                \\           /           \\          /\n                 +---------+
        \            +--------+\n                                 Figure 2\n"
      title: 2.4.1.  State Transition
    title: 2.4.  Status Values
  - contents:
    - "2.5.  Poll Messaging\n   A Launch Application MUST be handled as an EPP domain
      name object as\n   specified in RFC 5731 [RFC5731], with the \"pendingCreate\"
      status and\n   launch status values defined in Section 2.4.  A Launch Registration\n
      \  MAY be handled as an EPP domain name object as specified in RFC 5731\n   [RFC5731],
      with the \"pendingCreate\" status and launch status values\n   defined in Section
      2.4.  As a Launch Application or Launch\n   Registration transitions between
      the status values defined in\n   Section 2.4, the server SHOULD insert poll
      messages, per [RFC5730],\n   for the applicable intermediate statuses, including
      the\n   \"pendingValidation\", \"validated\", \"pendingAllocation\", and \"invalid\"\n
      \  statuses, using the <domain:infData> element with the\n   <launch:infData>
      extension.  The <domain:infData> element MAY contain\n   non-mandatory information,
      like contact and name server information.\n   Also, further extensions that
      would normally be included in the\n   response of a <domain:info> command, per
      [RFC5731], MAY be included.\n   For the final statuses, including the \"allocated\"
      and \"rejected\"\n   statuses, the server MUST insert a <domain:panData> poll
      message, per\n   [RFC5731], with the <launch:infData> extension.\n   The following
      is an example poll message for a Launch Application\n   that has transitioned
      to the \"pendingAllocation\" state.\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
      standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:
      \ <response>\n   S:    <result code=\"1301\">\n   S:      <msg>Command completed
      successfully; ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ count=\"5\"
      id=\"12345\">\n   S:      <qDate>2013-04-04T22:01:00.0Z</qDate>\n   S:      <msg>Application
      pendingAllocation.</msg>\n   S:    </msgQ>\n   S:    <resData>\n   S:      <domain:infData\n
      \  S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n   S:        <domain:name>domain.example</domain:name>\n
      \  S:        ...\n   S:      </domain:infData>\n   S:    </resData>\n   S:    <extension>\n
      \  S:      <launch:infData\n   S:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  S:        <launch:phase>sunrise</launch:phase>\n   S:        <launch:applicationID>abc123</launch:applicationID>\n
      \  S:        <launch:status s=\"pendingAllocation\"/>\n   S:      </launch:infData>\n
      \  S:    </extension>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
      \  S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
      \  S:</epp>\n   The following is an example <domain:panData> poll message for
      an\n   \"allocated\" Launch Application.\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
      standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:
      \ <response>\n   S:    <result code=\"1301\">\n   S:      <msg>Command completed
      successfully; ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ count=\"5\"
      id=\"12345\">\n   S:      <qDate>2013-04-04T22:01:00.0Z</qDate>\n   S:      <msg>Application
      successfully allocated.</msg>\n   S:    </msgQ>\n   S:    <resData>\n   S:      <domain:panData\n
      \  S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n   S:        <domain:name
      paResult=\"1\">domain.example</domain:name>\n   S:        <domain:paTRID>\n
      \  S:          <clTRID>ABC-12345</clTRID>\n   S:          <svTRID>54321-XYZ</svTRID>\n
      \  S:        </domain:paTRID>\n   S:        <domain:paDate>2013-04-04T22:00:00.0Z</domain:paDate>\n
      \  S:      </domain:panData>\n   S:    </resData>\n   S:    <extension>\n   S:
      \     <launch:infData\n   S:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  S:        <launch:phase>sunrise</launch:phase>\n   S:        <launch:applicationID>abc123</launch:applicationID>\n
      \  S:        <launch:status s=\"allocated\"/>\n   S:      </launch:infData>\n
      \  S:    </extension>\n   S:    <trID>\n   S:      <clTRID>BCD-23456</clTRID>\n
      \  S:      <svTRID>65432-WXY</svTRID>\n   S:    </trID>\n   S:  </response>\n
      \  S:</epp>\n   The following is an example <domain:panData> poll message for
      an\n   \"allocated\" Launch Registration.\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
      standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:
      \ <response>\n   S:    <result code=\"1301\">\n   S:      <msg>Command completed
      successfully; ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ count=\"5\"
      id=\"12345\">\n   S:      <qDate>2013-04-04T22:01:00.0Z</qDate>\n   S:      <msg>Registration
      successfully allocated.</msg>\n   S:    </msgQ>\n   S:    <resData>\n   S:      <domain:panData\n
      \  S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n   S:        <domain:name
      paResult=\"1\">domain.example</domain:name>\n   S:        <domain:paTRID>\n
      \  S:          <clTRID>ABC-12345</clTRID>\n   S:          <svTRID>54321-XYZ</svTRID>\n
      \  S:        </domain:paTRID>\n   S:        <domain:paDate>2013-04-04T22:00:00.0Z</domain:paDate>\n
      \  S:      </domain:panData>\n   S:    </resData>\n   S:    <extension>\n   S:
      \     <launch:infData\n   S:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  S:        <launch:phase>sunrise</launch:phase>\n   S:        <launch:status
      s=\"allocated\"/>\n   S:      </launch:infData>\n   S:    </extension>\n   S:
      \   <trID>\n   S:      <clTRID>BCD-23456</clTRID>\n   S:      <svTRID>65432-WXY</svTRID>\n
      \  S:    </trID>\n   S:  </response>\n   S:</epp>\n"
    title: 2.5.  Poll Messaging
  - contents:
    - "2.6.  Mark Validation Models\n   A server MUST support at least one of the
      following models for\n   validating trademark information:\n   code:  Use of
      a mark code by itself to validate that the mark matches\n      the domain name.
      \ This model is supported using the\n      <launch:codeMark> element with just
      the <launch:code> element.\n   mark:  The mark information is passed without
      any other validation\n      element.  The server will use some custom form of
      validation to\n      validate that the mark information is authentic.  This
      model is\n      supported using the <launch:codeMark> element with just the\n
      \     <mark:mark> (Section 2.6.2) element.\n   code with mark:  A code is used
      along with the mark information by\n      the server to validate the mark utilizing
      an external party.  The\n      code represents some form of secret that matches
      the mark\n      information passed.  This model is supported using the\n      <launch:codeMark>
      element that contains both the <launch:code> and\n      the <mark:mark> (Section
      2.6.2) elements.\n   signed mark:  The mark information is digitally signed
      as described\n      in the Digital Signature section (Section 2.6.3).  The digital\n
      \     signature can be directly validated by the server using the public\n      key
      of the external party that created the signed mark using its\n      private
      key.  This model is supported using the <smd:signedMark>\n      (Section 2.6.3.1)
      and <smd:encodedSignedMark> (Section 2.6.3.2)\n      elements.\n   More than
      one <launch:codeMark>, <smd:signedMark> (Section 2.6.3.1),\n   or <smd:encodedSignedMark>
      (Section 2.6.3.2) element MAY be\n   specified.  The maximum number of marks
      per domain name is up to\n   server policy.\n"
    - contents:
      - "2.6.1.  <launch:codeMark> Element\n   The <launch:codeMark> element is used
        by the \"code\", \"mark\", and\n   \"code with mark\" validation models and
        has the following child\n   elements:\n   <launch:code>:  OPTIONAL mark code
        used to validate the <mark:mark>\n      (Section 2.6.2) information.  The
        mark code is a mark-specific\n      secret that the server can verify against
        a third party.  The\n      OPTIONAL \"validatorID\" attribute is the Validator
        Identifier\n      (Section 2.2) whose value indicates which Trademark Validator
        the\n      code originated from, with no default value.\n   <mark:mark>:  OPTIONAL
        mark information with child elements defined\n      in the Mark section (Section
        2.6.2).\n   The following is an example <launch:codeMark> element with both
        a\n   <launch:code> and <mark:mark> (Section 2.6.2) element.\n   <launch:codeMark>\n
        \    <launch:code validatorID=\"sample\">\n       49FD46E6C4B45C55D4AC</launch:code>\n
        \    <mark:mark xmlns:mark=\"urn:ietf:params:xml:ns:mark-1.0\">\n       ...\n
        \    </mark:mark>\n   </launch:codeMark>\n"
      title: 2.6.1.  <launch:codeMark> Element
    - contents:
      - "2.6.2.  <mark:mark> Element\n   A <mark:mark> element describes an applicant's
        prior right to a given\n   domain name that is used with the \"mark\", \"mark
        with code\", and\n   \"signed mark\" validation models.  The <mark:mark> element
        is defined\n   in [RFC7848].  A new mark format can be supported by creating
        a new\n   XML schema for the mark that has an element that substitutes for
        the\n   <mark:abstractMark> element from [RFC7848].\n"
      title: 2.6.2.  <mark:mark> Element
    - contents:
      - "2.6.3.  Digital Signature\n   Digital signatures MAY be used by the server
        to validate the mark\n   information, when using the \"signed mark\" validation
        model with the\n   <smd:signedMark> (Section 2.6.3.1) and <smd:encodedSignedMark>\n
        \  (Section 2.6.3.2) elements.  When using digital signatures, the\n   server
        MUST validate the digital signature.\n"
      - contents:
        - "2.6.3.1.  <smd:signedMark> Element\n   The <smd:signedMark> element contains
          the digitally signed mark\n   information.  The <smd:signedMark> element
          is defined in [RFC7848].\n   A new signed mark format can be supported by
          creating a new XML\n   schema for the signed mark that has an element that
          substitutes for\n   the <smd:abstractSignedMark> element from [RFC7848].\n"
        title: 2.6.3.1.  <smd:signedMark> Element
      - contents:
        - "2.6.3.2.  <smd:encodedSignedMark> Element\n   The <smd:encodedSignedMark>
          element contains an encoded form of the\n   digitally signed <smd:signedMark>
          (Section 2.6.3.1) element.  The\n   <smd:encodedSignedMark> element is defined
          in [RFC7848].  A new\n   encoded signed mark format can be supported by
          creating a new XML\n   schema for the encoded signed mark that has an element
          that\n   substitutes for the <smd:encodedSignedMark> element from [RFC7848].\n"
        title: 2.6.3.2.  <smd:encodedSignedMark> Element
      title: 2.6.3.  Digital Signature
    title: 2.6.  Mark Validation Models
  title: 2.  Object Attributes
- contents:
  - "3.  EPP Command Mapping\n   A detailed description of the EPP syntax and semantics
    can be found\n   in the EPP core protocol specification [RFC5730].  The command\n
    \  mappings described here are specifically for use in the Launch Phase\n   Extension.\n
    \  This mapping is designed to be flexible, requiring only a minimum set\n   of
    required elements.\n   While it is meant to serve several use cases, it does not
    prescribe\n   any interpretation by the client or server.  Such processing is\n
    \  typically highly policy dependent and therefore specific to\n   implementations.\n
    \  Operations on application objects are done via one or more of the\n   existing
    EPP commands defined in the EPP domain name mapping\n   [RFC5731].  Registries
    MAY choose to support a subset of the\n   operations.\n"
  - contents:
    - "3.1.  EPP <check> Command\n   There are three forms of the extension to the
      EPP <check> command:\n   the Claims Check Form (Section 3.1.1), the Availability
      Check Form\n   (Section 3.1.2), and the Trademark Check Form (Section 3.1.3).
      \ The\n   <launch:check> element \"type\" attribute defines the form, with the\n
      \  value of \"claims\" for the Claims Check Form (Section 3.1.1), \"avail\"\n
      \  for the Availability Check Form (Section 3.1.2), and \"trademark\" for\n
      \  the Trademark Check Form (Section 3.1.3).  The default value of the\n   \"type\"
      attribute is \"claims\".  The forms supported by the server is\n   determined
      by server policy.  The server MUST return an EPP error\n   result code of 2307
      [RFC5730] if it receives a check form that is not\n   supported.\n"
    - contents:
      - "3.1.1.  Claims Check Form\n   The Claims Check Form defines a new command
        called the Claims Check\n   Command that is used to determine whether or not
        there are any\n   matching trademarks, in the specified launch phase, for
        each domain\n   name passed in the command, that require the use of the \"Claims\n
        \  Create Form\" on a Domain Create Command.  The availability check\n   information
        defined in the EPP domain name mapping [RFC5731] MUST NOT\n   be returned
        for the Claims Check Command.  This form is the default\n   form and MAY be
        explicitly identified by setting the <launch:check>\n   \"type\" attribute
        to \"claims\".\n   Instead of returning whether the domain name is available,
        the Claims\n   Check Command will return whether or not at least one matching\n
        \  trademark exists for the domain name, which requires the use of the\n   \"Claims
        Create Form\" on a Domain Create Command.  If there is at\n   least one matching
        trademark that exists for the domain name, a\n   <launch:claimKey> element
        is returned.  The client MAY then use the\n   value of the <launch:claimKey>
        element to obtain information needed\n   to generate the Trademark Claims
        Notice from the Trademark Validator\n   based on the Validator Identifier
        (Section 2.2).  The unique notice\n   identifier of the Trademark Claims Notice
        MUST be passed in the\n   <launch:noticeID> element of the extension to the
        Create Command\n   (Section 3.3).\n   The <domain:name> elements in the EPP
        <check> command of EPP domain\n   name mapping [RFC5731] define the domain
        names to check for matching\n   trademarks.  The <launch:check> element contains
        the following child\n   element:\n   <launch:phase>:  Contains the value of
        the active launch phase of the\n       server.  The server SHOULD validate
        the value according to\n       Section 2.3.\n   The following is an example
        Claims Check Command using the <check>\n   domain command and the <launch:check>
        extension with the \"type\"\n   explicitly set to \"claims\", to determine
        if \"domain1.example\",\n   \"domain2.example\", and \"domain3.example\" require
        claims notices\n   during the \"claims\" launch phase:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:   <check>\n   C:    <domain:check\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:      <domain:name>domain1.example</domain:name>\n   C:      <domain:name>domain2.example</domain:name>\n
        \  C:      <domain:name>domain3.example</domain:name>\n   C:    </domain:check>\n
        \  C:   </check>\n   C:   <extension>\n   C:    <launch:check\n   C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
        \  C:     type=\"claims\">\n   C:      <launch:phase>claims</launch:phase>\n
        \  C:    </launch:check>\n   C:   </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   If the <check> command has been processed
        successfully, the EPP\n   <response> MUST contain an <extension> <launch:chkData>
        element that\n   identifies the launch namespace.  The <launch:chkData> element\n
        \  contains the following child elements:\n   <launch:phase>:  The phase that
        mirrors the <launch:phase> element\n       included in the <launch:check>.\n
        \  <launch:cd>:  One or more <launch:cd> elements that contain the\n       following
        child elements:\n       <launch:name>:  Contains the fully qualified name
        of the queried\n           domain name.  This element MUST contain an \"exists\"
        attribute\n           whose value indicates if a matching trademark exists
        for the\n           domain name that requires the use of the \"Claims Create
        Form\"\n           on a Domain Create Command.  A value of \"1\" (or \"true\")
        means\n           that a matching trademark does exist and that the \"Claims\n
        \          Create Form\" is required on a Domain Create Command.  A value\n
        \          of \"0\" (or \"false\") means that a matching trademark does not\n
        \          exist or that the \"Claims Create Form\" is NOT required on a\n
        \          Domain Create Command.\n       <launch:claimKey>:  Zero or more
        OPTIONAL claim keys that MAY be\n           passed to a third-party Trademark
        Validator such as the ICANN\n           TMCH for querying the information
        needed to generate a\n           Trademark Claims Notice.  The <launch:claimKey>
        is used as\n           the key for the query in place of the domain name to
        securely\n           query the service without using a well-known value like
        a\n           domain name.  The OPTIONAL \"validatorID\" attribute is the\n
        \          Validator Identifier (Section 2.2) whose value indicates\n           which
        Trademark Validator to query for the claims notice\n           information,
        with the default being the ICANN TMCH.  The\n           \"validatorID\" attribute
        MAY reference a non-trademark claims\n           clearinghouse identifier
        to support other forms of claims\n           notices.\n   The following is
        an example Claims Check response when a claims\n   notice for the \"claims\"
        launch phase is not required for the domain\n   name domain1.example, is required
        for the domain name domain2.example\n   in the \"tmch\", and is required for
        the domain name domain3.example in\n   the \"tmch\" and \"custom-tmch\":\n
        \  S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result
        code=\"1000\">\n   S:     <msg>Command completed successfully</msg>\n   S:
        \   </result>\n   S:    <extension>\n   S:     <launch:chkData\n   S:      xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  S:      <launch:phase>claims</launch:phase>\n   S:      <launch:cd>\n   S:
        \       <launch:name exists=\"0\">domain1.example</launch:name>\n   S:      </launch:cd>\n
        \  S:      <launch:cd>\n   S:        <launch:name exists=\"1\">domain2.example</launch:name>\n
        \  S:        <launch:claimKey validatorID=\"tmch\">\n   S:        2013041500/2/6/9/rJ1NrDO92vDsAzf7EQzgjX4R0000000001\n
        \  S:        </launch:claimKey>\n   S:      </launch:cd>\n   S:      <launch:cd>\n
        \  S:        <launch:name exists=\"1\">domain3.example</launch:name>\n   S:
        \       <launch:claimKey validatorID=\"tmch\">\n   S:        2013041500/2/6/9/rJ1NrDO92vDsAzf7EQzgjX4R0000000001\n
        \  S:        </launch:claimKey>\n   S:        <launch:claimKey validatorID=\"custom-tmch\">\n
        \  S:        20140423200/1/2/3/rJ1Nr2vDsAzasdff7EasdfgjX4R000000002\n   S:
        \       </launch:claimKey>\n   S:      </launch:cd>\n   S:     </launch:chkData>\n
        \  S:    </extension>\n   S:    <trID>\n   S:     <clTRID>ABC-12345</clTRID>\n
        \  S:     <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n"
      title: 3.1.1.  Claims Check Form
    - contents:
      - "3.1.2.  Availability Check Form\n   The Availability Check Form defines additional
        elements to extend the\n   EPP <check> command described in the EPP domain
        name mapping\n   [RFC5731].  No additional elements are defined for the EPP
        <check>\n   response.  This form MUST be identified by setting the <launch:check>\n
        \  \"type\" attribute to \"avail\".\n   The EPP <check> command is used to
        determine if an object can be\n   provisioned within a repository.  Domain
        names may be made available\n   only in unique launch phases, whilst remaining
        unavailable for\n   concurrent launch phases.  In addition to the elements
        expressed in\n   the <domain:check>, the command is extended with the <launch:check>\n
        \  element that contains the following child element:\n   <launch:phase>:
        \ The launch phase to which domain name availability\n       should be determined.
        \ The server SHOULD validate the value and\n       return an EPP error result
        code of 2306 [RFC5730] if it is\n       invalid.\n   The following is an example
        Availability Check Form Command using the\n   <check> domain command and the
        <launch:check> extension with the\n   \"type\" set to \"avail\", to determine
        the availability of two domain\n   names in the \"idn-release\" custom launch
        phase:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \  <check>\n   C:    <domain:check\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:      <domain:name>domain1.example</domain:name>\n   C:      <domain:name>domain2.example</domain:name>\n
        \  C:    </domain:check>\n   C:   </check>\n   C:   <extension>\n   C:    <launch:check\n
        \  C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n   C:     type=\"avail\">\n
        \  C:      <launch:phase name=\"idn-release\">custom</launch:phase>\n   C:
        \   </launch:check>\n   C:   </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   The Availability Check Form does not define
        any extension to the\n   response of a <check> domain command.  After processing
        the command,\n   the server replies with a standard EPP response as defined
        in the EPP\n   domain name mapping [RFC5731].\n"
      title: 3.1.2.  Availability Check Form
    - contents:
      - "3.1.3.  Trademark Check Form\n   The Trademark Check Form defines a new command
        called the Trademark\n   Check Command that is used to determine whether or
        not there are any\n   matching trademarks for each domain name passed in the
        command,\n   independent of the active launch phase of the server and whether
        the\n   \"Claims Create Form\" is required on a Domain Create Command.  The\n
        \  availability check information defined in the EPP domain name mapping\n
        \  [RFC5731] MUST NOT be returned for the Trademark Check Command.  This\n
        \  form MUST be identified by setting the <launch:check> \"type\"\n   attribute
        to \"trademark\".\n   Instead of returning whether the domain name is available,
        the\n   Trademark Check Command will return whether or not at least one\n
        \  matching trademark exists for the domain name.  If there is at least\n
        \  one matching trademark that exists for the domain name, a\n   <launch:claimKey>
        element is returned.  The client MAY then use the\n   value of the <launch:claimKey>
        element to obtain Trademark Claims\n   Notice information from the Trademark
        Validator based on the\n   Validator Identifier (Section 2.2).\n   The <domain:name>
        elements in the EPP <check> command of EPP domain\n   name mapping [RFC5731]
        define the domain names to check for matching\n   trademarks.  The <launch:check>
        element does not contain any child\n   elements with the \"Trademark Check
        Form\":\n   The following is an example Trademark Check Command using the
        <check>\n   domain command and the <launch:check> extension with the \"type\"
        set\n   to \"trademark\", to determine if \"domain1.example\", \"domain2.example\",\n
        \  and \"domain3.example\" have any matching trademarks:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:   <check>\n   C:    <domain:check\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:      <domain:name>domain1.example</domain:name>\n   C:      <domain:name>domain2.example</domain:name>\n
        \  C:      <domain:name>domain3.example</domain:name>\n   C:    </domain:check>\n
        \  C:   </check>\n   C:   <extension>\n   C:    <launch:check\n   C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
        \  C:     type=\"trademark\"/>\n   C:   </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   If the <check> command has been processed
        successfully, the EPP\n   <response> MUST contain an <extension> <launch:chkData>
        element that\n   identifies the launch namespace.  The <launch:chkData> element\n
        \  contains the following child elements:\n   <launch:cd>:  One or more <launch:cd>
        elements that contain the\n       following child elements:\n       <launch:name>:
        \ Contains the fully qualified name of the queried\n           domain name.
        \ This element MUST contain an \"exists\" attribute\n           whose value
        indicates if a matching trademark exists for the\n           domain name.
        \ A value of \"1\" (or \"true\") means that a\n           matching trademark
        does exist.  A value of \"0\" (or \"false\")\n           means that a matching
        trademark does not exist.\n       <launch:claimKey>:  Zero or more OPTIONAL
        claim keys that MAY be\n           passed to a third-party Trademark Validator
        such as the ICANN\n           TMCH for querying the information needed to
        generate a\n           Trademark Claims Notice.  The <launch:claimKey> is
        used as\n           the key for the query in place of the domain name to securely\n
        \          query the service without using a well-known value like a\n           domain
        name.  The OPTIONAL \"validatorID\" attribute is the\n           Validator
        Identifier (Section 2.2) whose value indicates\n           which Trademark
        Validator to query for the claims notice\n           information, with the
        default being the ICANN TMCH.  The\n           \"validatorID\" attribute MAY
        reference a non-trademark claims\n           clearinghouse identifier to support
        other forms of claims\n           notices.\n   The following is an example
        Trademark Check response for the \"claims\"\n   launch phase when no matching
        trademarks are found for the domain\n   name domain1.example, matching trademarks
        are found for the domain\n   name domain2.example in the \"tmch\", and matching
        trademarks are found\n   for domain name domain3.example in the \"tmch\" and
        \"custom-tmch\":\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:
        \   <result code=\"1000\">\n   S:     <msg>Command completed successfully</msg>\n
        \  S:    </result>\n   S:    <extension>\n   S:     <launch:chkData\n   S:
        \     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n   S:      <launch:cd>\n
        \  S:        <launch:name exists=\"0\">domain1.example</launch:name>\n   S:
        \     </launch:cd>\n   S:      <launch:cd>\n   S:        <launch:name exists=\"1\">domain2.example</launch:name>\n
        \  S:        <launch:claimKey validatorID=\"tmch\">\n   S:        2013041500/2/6/9/rJ1NrDO92vDsAzf7EQzgjX4R0000000001\n
        \  S:        </launch:claimKey>\n   S:      </launch:cd>\n   S:      <launch:cd>\n
        \  S:        <launch:name exists=\"1\">domain3.example</launch:name>\n   S:
        \       <launch:claimKey validatorID=\"tmch\">\n   S:        2013041500/2/6/9/rJ1NrDO92vDsAzf7EQzgjX4R0000000001\n
        \  S:        </launch:claimKey>\n   S:        <launch:claimKey validatorID=\"custom-tmch\">\n
        \  S:        20140423200/1/2/3/rJ1Nr2vDsAzasdff7EasdfgjX4R000000002\n   S:
        \       </launch:claimKey>\n   S:      </launch:cd>\n   S:     </launch:chkData>\n
        \  S:    </extension>\n   S:    <trID>\n   S:     <clTRID>ABC-12345</clTRID>\n
        \  S:     <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n"
      title: 3.1.3.  Trademark Check Form
    title: 3.1.  EPP <check> Command
  - contents:
    - "3.2.  EPP <info> Command\n   This extension defines additional elements to
      extend the EPP <info>\n   command and response to be used in conjunction with
      the EPP domain\n   name mapping [RFC5731].\n   The EPP <info> command is used
      to retrieve information for a Launch\n   Registration or Launch Application.
      \ The Application Identifier\n   (Section 2.1) returned in the <launch:creData>
      element of the create\n   response (Section 3.3) can be used for retrieving
      information for a\n   Launch Application.  A <launch:info> element is sent along
      with the\n   regular <info> domain command.  The <launch:info> element includes
      an\n   OPTIONAL \"includeMark\" boolean attribute, with a default value of\n
      \  \"false\", to indicate whether or not to include the mark in the\n   response.
      \ The <launch:info> element contains the following child\n   elements:\n   <launch:phase>:
      \ The phase during which the application or\n       registration was submitted
      or is associated with.  Server policy\n       defines the phases that are supported.
      \ The server SHOULD\n       validate the value and return an EPP error result
      code of 2306\n       [RFC5730] if it is invalid.\n   <launch:applicationID>:
      \ OPTIONAL application identifier of the\n       Launch Application.\n   The
      following is an example <info> domain command with the\n   <launch:info> extension
      to retrieve information for the sunrise\n   application for domain.example and
      application identifier \"abc123\":\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
      standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:
      \ <command>\n   C:   <info>\n   C:    <domain:info\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  C:      <domain:name>domain.example</domain:name>\n   C:    </domain:info>\n
      \  C:   </info>\n   C:   <extension>\n   C:    <launch:info\n   C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
      \  C:       includeMark=\"true\">\n   C:      <launch:phase>sunrise</launch:phase>\n
      \  C:      <launch:applicationID>abc123</launch:applicationID>\n   C:    </launch:info>\n
      \  C:   </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
      \  C:</epp>\n   The following is an example <info> domain command with the\n
      \  <launch:info> extension to retrieve information for the sunrise\n   registration
      for domain.example:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
      \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
      \  <info>\n   C:    <domain:info\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  C:      <domain:name>domain.example</domain:name>\n   C:    </domain:info>\n
      \  C:   </info>\n   C:   <extension>\n   C:    <launch:info\n   C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  C:      <launch:phase>sunrise</launch:phase>\n   C:    </launch:info>\n   C:
      \  </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n
      \  If the query was successful, the server replies with a\n   <launch:infData>
      element along with the regular EPP <resData>.  The\n   <launch:infData> contains
      the following child elements:\n   <launch:phase>:  The phase during which the
      application was submitted\n       or is associated with that matches the associated
      <info> command\n       <launch:phase>.\n   <launch:applicationID>:  OPTIONAL
      Application Identifier of the\n       Launch Application.\n   <launch:status>:
      \ OPTIONAL status of the Launch Application using one\n       of the supported
      status values (Section 2.4).\n   <mark:mark>:  Zero or more <mark:mark> (Section
      2.6.2) elements only\n       if the \"includeMark\" attribute is \"true\" in
      the command.\n   The following is an example <info> domain response using the\n
      \  <launch:infData> extension with the mark information:\n   S:<?xml version=\"1.0\"
      encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
      \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
      completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
      \     <domain:infData\n   S:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  S:        <domain:name>domain.example</domain:name>\n   S:        <domain:roid>EXAMPLE1-REP</domain:roid>\n
      \  S:        <domain:status s=\"pendingCreate\"/>\n   S:        <domain:registrant>jd1234</domain:registrant>\n
      \  S:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   S:        <domain:contact
      type=\"tech\">sh8013</domain:contact>\n   S:        <domain:clID>ClientX</domain:clID>\n
      \  S:        <domain:crID>ClientY</domain:crID>\n   S:        <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate>\n
      \  S:        <domain:authInfo>\n   S:          <domain:pw>2fooBAR</domain:pw>\n
      \  S:        </domain:authInfo>\n   S:      </domain:infData>\n   S:    </resData>\n
      \  S:    <extension>\n   S:      <launch:infData\n   S:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  S:        <launch:phase>sunrise</launch:phase>\n   S:          <launch:applicationID>abc123</launch:applicationID>\n
      \  S:          <launch:status s=\"pendingValidation\"/>\n   S:          <mark:mark\n
      \  S:            xmlns:mark=\"urn:ietf:params:xml:ns:mark-1.0\">\n   S:             ...\n
      \  S:         </mark:mark>\n   S:      </launch:infData>\n   S:    </extension>\n
      \  S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54321-XYZ</svTRID>\n
      \  S:    </trID>\n   S:  </response>\n   S:</epp>\n"
    title: 3.2.  EPP <info> Command
  - contents:
    - "3.3.  EPP <create> Command\n   There are four forms of the extension to the
      EPP <create> command\n   that include the Sunrise Create Form (Section 3.3.1),
      the Claims\n   Create Form (Section 3.3.2), the General Create Form (Section
      3.3.3),\n   and the Mixed Create Form (Section 3.3.4).  The form used is\n   dependent
      on the supported launch phases (Section 2.3) as defined\n   below.\n   sunrise:
      \ The EPP <create> command with the \"sunrise\" launch phase is\n      used
      to submit a registration with trademark information that can\n      be verified
      by the server with the <domain:name> value.  The\n      Sunrise Create Form
      (Section 3.3.1) is used for the \"sunrise\"\n      launch phase.\n   landrush:
      \ The EPP <create> command with the \"landrush\" launch phase\n      MAY use
      the General Create Form (Section 3.3.3) to explicitly\n      specify the phase
      and optionally define the expected type of\n      object to create.\n   claims:
      \ The EPP <create> command with the \"claims\" launch phase is\n      used to
      pass the information associated with the presentation and\n      acceptance
      of the claims notice.  The Claims Create Form\n      (Section 3.3.2) is used,
      and the General Create Form\n      (Section 3.3.3) MAY be used for the \"claims\"
      launch phase.\n   open:  The EPP <create> command with the \"open\" launch phase
      is\n      undefined, but the form supported is up to server policy.  The\n      Claims
      Create Form (Section 3.3.2) MAY be used to pass the\n      information associated
      with the presentation and acceptance of the\n      claims notice if required
      for the domain name.\n   custom:  The EPP <create> command with the \"custom\"
      launch phase is\n      undefined, but the form supported is up to server policy.\n"
    - contents:
      - "3.3.1.  Sunrise Create Form\n   The Sunrise Create Form of the extension
        to the EPP domain name\n   mapping [RFC5731] includes the verifiable trademark
        information that\n   the server uses to match against the domain name to authorize
        the\n   domain create.  A server MUST support one of four models in Mark\n
        \  Validation Models (Section 2.6) to verify the trademark information\n   passed
        by the client.\n   A <launch:create> element is sent along with the regular
        <create>\n   domain command.  The <launch:create> element has an OPTIONAL
        \"type\"\n   attribute that defines the expected type of object (\"application\"
        or\n   \"registration\") to create.  The server SHOULD validate the \"type\"\n
        \  attribute, when passed, against the type of object that will be\n   created,
        and return an EPP error result code of 2306 [RFC5730] if the\n   type is incorrect.
        \ The <launch:create> element contains the\n   following child elements:\n
        \  <launch:phase>:  The identifier for the launch phase.  The server\n       SHOULD
        validate the value according to Section 2.3.\n   <launch:codeMark> or <smd:signedMark>
        or <smd:encodedSignedMark>:\n       <launch:codeMark>:  Zero or more <launch:codeMark>
        elements.  The\n           <launch:codeMark> child elements are defined in\n
        \          \"<launch:codeMark> Element\" (Section 2.6.1).\n       <smd:signedMark>:
        \ Zero or more <smd:signedMark> elements.  The\n           <smd:signedMark>
        child elements are defined in\n           \"<smd:signedMark> Element\" (Section
        2.6.3.1).\n       <smd:encodedSignedMark>:  Zero or more <smd:encodedSignedMark>\n
        \          elements.  The <smd:encodedSignedMark> child elements are\n           defined
        in \"<smd:encodedSignedMark> Element\"\n           (Section 2.6.3.2).\n   The
        following is an example <create> domain command using the\n   <launch:create>
        extension, following the \"code\" validation model,\n   with multiple sunrise
        codes:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \   <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domain.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  C:        <launch:phase>sunrise</launch:phase>\n   C:        <launch:codeMark>\n
        \  C:          <launch:code validatorID=\"sample1\">\n   C:            49FD46E6C4B45C55D4AC</launch:code>\n
        \  C:        </launch:codeMark>\n   C:        <launch:codeMark>\n   C:          <launch:code>49FD46E6C4B45C55D4AD</launch:code>\n
        \  C:        </launch:codeMark>\n   C:        <launch:codeMark>\n   C:          <launch:code
        validatorID=\"sample2\">\n   C:            49FD46E6C4B45C55D4AE</launch:code>\n
        \  C:        </launch:codeMark>\n   C:      </launch:create>\n   C:    </extension>\n
        \  C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n   The
        following is an example <create> domain command using the\n   <launch:create>
        extension, following the \"mark\" validation model,\n   with the mark information:\n
        \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <create>\n
        \  C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domainone.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  C:        <launch:phase>sunrise</launch:phase>\n   C:        <launch:codeMark>\n
        \  C:          <mark:mark\n   C:            xmlns:mark=\"urn:ietf:params:xml:ns:mark-1.0\">\n
        \  C:            ...\n   C:          </mark:mark>\n   C:        </launch:codeMark>\n
        \  C:      </launch:create>\n   C:    </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   The following is an example <create> domain
        command using the\n   <launch:create> extension, following the \"code with
        mark\" validation\n   model, with the code and mark information:\n   C:<?xml
        version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domain.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  C:        <launch:phase>sunrise</launch:phase>\n   C:        <launch:codeMark>\n
        \  C:          <launch:code validatorID=\"sample\">\n   C:            49FD46E6C4B45C55D4AC</launch:code>\n
        \  C:          <mark:mark\n   C:           xmlns:mark=\"urn:ietf:params:xml:ns:mark-1.0\">\n
        \  C:           ...\n   C:          </mark:mark>\n   C:        </launch:codeMark>\n
        \  C:      </launch:create>\n   C:    </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   The following is an example <create> domain
        command using the\n   <launch:create> extension, following the \"signed mark\"
        validation\n   model, with the signed mark information for a sunrise application:\n
        \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <create>\n
        \  C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domainone.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
        \  C:       type=\"application\">\n   C:        <launch:phase>sunrise</launch:phase>\n
        \  C:        <smd:signedMark id=\"signedMark\"\n   C:         xmlns:smd=\"urn:ietf:params:xml:ns:signedMark-1.0\">\n
        \  C:         ...\n   C:        </smd:signedMark>\n   C:      </launch:create>\n
        \  C:    </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   The following is an example <create> domain command using
        the\n   <launch:create> extension, following the \"signed mark\" validation\n
        \  model, with the base64-encoded signed mark information:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domainone.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  C:        <launch:phase>sunrise</launch:phase>\n   C:        <smd:encodedSignedMark\n
        \  C:         xmlns:smd=\"urn:ietf:params:xml:ns:signedMark-1.0\">\n   C:
        \        ...\n   C:        </smd:encodedSignedMark>\n   C:      </launch:create>\n
        \  C:    </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n"
      title: 3.3.1.  Sunrise Create Form
    - contents:
      - "3.3.2.  Claims Create Form\n   The Claims Create Form of the extension to
        the EPP domain name\n   mapping [RFC5731] includes the information related
        to the\n   registrant's acceptance of the claims notice.\n   A <launch:create>
        element is sent along with the regular <create>\n   domain command.  The <launch:create>
        element has an OPTIONAL \"type\"\n   attribute that defines the expected type
        of object (\"application\" or\n   \"registration\") to create.  The server
        SHOULD validate the \"type\"\n   attribute, when passed, against the type
        of object that will be\n   created, and return an EPP error result code of
        2306 [RFC5730] if the\n   type is incorrect.  The <launch:create> element
        contains the\n   following child elements:\n   <launch:phase>:  Contains the
        value of the active launch phase of the\n       server.  The server SHOULD
        validate the value according to\n       Section 2.3.\n   <launch:notice>:
        \ One or more <launch:notice> elements that contain\n       the following
        child elements:\n       <launch:noticeID>:  Unique notice identifier for the
        claims\n           notice.  The <launch:noticeID> element has an OPTIONAL\n
        \          \"validatorID\" attribute that is used to define the Validator\n
        \          Identifier (Section 2.2); it's value indicates which\n           Trademark
        Validator is the source of the claims notice, with\n           the default
        being the ICANN TMCH.\n       <launch:notAfter>:  Expiry of the claims notice.\n
        \      <launch:acceptedDate>:  Contains the date and time that the\n           claims
        notice was accepted.\n   The following is an example <create> domain command
        using the\n   <launch:create> extension with the <launch:notice> information
        for\n   the \"tmch\" and the \"custom-tmch\" validators, for the \"claims\"
        launch\n   phase:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \   <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domain.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  C:        <launch:phase>claims</launch:phase>\n   C:        <launch:notice>\n
        \  C:          <launch:noticeID validatorID=\"tmch\">\n   C:          370d0b7c9223372036854775807</launch:noticeID>\n
        \  C:          <launch:notAfter>2014-06-19T10:00:00.0Z\n   C:          </launch:notAfter>\n
        \  C:          <launch:acceptedDate>2014-06-19T09:00:00.0Z\n   C:          </launch:acceptedDate>\n
        \  C:        </launch:notice>\n   C:        <launch:notice>\n   C:          <launch:noticeID
        validatorID=\"custom-tmch\">\n   C:          470d0b7c9223654313275808</launch:noticeID>\n
        \  C:          <launch:notAfter>2014-06-19T10:00:00.0Z\n   C:          </launch:notAfter>\n
        \  C:          <launch:acceptedDate>2014-06-19T09:00:30.0Z\n   C:          </launch:acceptedDate>\n
        \  C:        </launch:notice>\n   C:      </launch:create>\n   C:    </extension>\n
        \  C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n"
      title: 3.3.2.  Claims Create Form
    - contents:
      - "3.3.3.  General Create Form\n   The General Create Form of the extension
        to the EPP domain name\n   mapping [RFC5731] includes the launch phase and
        optionally the object\n   type to create.  The OPTIONAL \"type\" attribute
        defines the expected\n   type of object (\"application\" or \"registration\")
        to create.  The\n   server SHOULD validate the \"type\" attribute, when passed,
        against the\n   type of object that will be created, and return an EPP error
        result\n   code of 2306 [RFC5730] if the type is incorrect.\n   A <launch:create>
        element is sent along with the regular <create>\n   domain command.  The <launch:create>
        element contains the following\n   child element:\n   <launch:phase>:  Contains
        the value of the active launch phase of the\n       server.  The server SHOULD
        validate the value according to\n       Section 2.3.\n   The following is
        an example <create> domain command using the\n   <launch:create> extension
        for a \"landrush\" launch phase application:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domain.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
        \  C:       type=\"application\">\n   C:        <launch:phase>landrush</launch:phase>\n
        \  C:      </launch:create>\n   C:    </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n"
      title: 3.3.3.  General Create Form
    - contents:
      - "3.3.4.  Mixed Create Form\n   The Mixed Create Form supports a mix of the
        create forms where, for\n   example, the Sunrise Create Form (Section 3.3.1)
        and the Claims\n   Create Form (Section 3.3.2) MAY be supported in a single
        command by\n   including both the verified trademark information and the information\n
        \  related to the registrant's acceptance of the claims notice.  The\n   server
        MAY support the Mixed Create Form.  The \"custom\" launch phase\n   SHOULD
        be used when using the Mixed Create Form.\n   The following is an example
        <create> domain command using the\n   <launch:create> extension, with a mix
        of the Sunrise Create Form\n   (Section 3.3.1) and the Claims Create Form
        (Section 3.3.2), including\n   both a mark and a notice:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <create>\n   C:      <domain:create\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  C:        <domain:name>domainone.example</domain:name>\n   C:        <domain:registrant>jd1234</domain:registrant>\n
        \  C:        <domain:contact type=\"admin\">sh8013</domain:contact>\n   C:
        \       <domain:contact type=\"tech\">sh8013</domain:contact>\n   C:        <domain:authInfo>\n
        \  C:          <domain:pw>2fooBAR</domain:pw>\n   C:        </domain:authInfo>\n
        \  C:      </domain:create>\n   C:    </create>\n   C:    <extension>\n   C:
        \     <launch:create\n   C:       xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
        \  C:       type=\"application\">\n   C:        <launch:phase name=\"non-tmch-sunrise\">custom</launch:phase>\n
        \  C:        <launch:codeMark>\n   C:          <mark:mark\n   C:            xmlns:mark=\"urn:ietf:params:xml:ns:mark-1.0\">\n
        \  C:            ...\n   C:          </mark:mark>\n   C:        </launch:codeMark>\n
        \  C:        <launch:notice>\n   C:          <launch:noticeID validatorID=\"tmch\">\n
        \  C:            49FD46E6C4B45C55D4AC\n   C:          </launch:noticeID>\n
        \  C:          <launch:notAfter>2012-06-19T10:00:10.0Z\n   C:          </launch:notAfter>\n
        \  C:          <launch:acceptedDate>2012-06-19T09:01:30.0Z\n   C:          </launch:acceptedDate>\n
        \  C:        </launch:notice>\n   C:      </launch:create>\n   C:    </extension>\n
        \  C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n"
      title: 3.3.4.  Mixed Create Form
    - contents:
      - "3.3.5.  Create Response\n   If the create was successful, the server MAY
        add a <launch:creData>\n   element to the regular EPP <resData> to indicate
        that the server\n   generated an Application Identifier (Section 2.1), when
        multiple\n   applications of a given domain name are supported; otherwise,
        no\n   extension is included with the regular EPP <resData>.  The\n   <launch:creData>
        element contains the following child elements:\n   <launch:phase>:  The phase
        of the application that mirrors the\n       <launch:phase> element included
        in the <launch:create>.\n   <launch:applicationID>:  The application identifier
        of the\n       application.\n   The following is an example response when
        multiple overlapping\n   applications are supported by the server:\n   S:<?xml
        version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1001\">\n   S:      <msg>Command
        completed successfully; action pending</msg>\n   S:    </result>\n   S:    <resData>\n
        \  S:      <domain:creData\n   S:         xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
        \  S:       <domain:name>domain.example</domain:name>\n   S:       <domain:crDate>2010-08-10T15:38:26.623854Z</domain:crDate>\n
        \  S:      </domain:creData>\n   S:    </resData>\n   S:    <extension>\n
        \  S:      <launch:creData\n   S:        xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
        \  S:        <launch:phase>sunrise</launch:phase>\n   S:        <launch:applicationID>2393-9323-E08C-03B1\n
        \  S:        </launch:applicationID>\n   S:      </launch:creData>\n   S:
        \   </extension>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n"
      title: 3.3.5.  Create Response
    title: 3.3.  EPP <create> Command
  - contents:
    - "3.4.  EPP <update> Command\n   This extension defines additional elements to
      extend the EPP <update>\n   command to be used in conjunction with the domain
      name mapping.\n   When an EPP <update> command with the extension is sent to
      a server\n   that does not support Launch Applications, it will fail.  A server\n
      \  that does not support Launch Applications during its launch phase\n   MUST
      return an EPP error result code of 2102 [RFC5730] when receiving\n   an EPP
      <update> command with the extension.\n   Registry policies permitting, clients
      may update an application\n   object by submitting an EPP <update> command along
      with a\n   <launch:update> element to indicate the application object to be\n
      \  updated.  The <launch:update> element contains the following child\n   elements:\n
      \  <launch:phase>:  The phase during which the application was submitted\n       or
      is associated with.  The server SHOULD validate the value and\n       return
      an EPP error result code of 2306 [RFC5730] if it is\n       invalid.\n   <launch:applicationID>:
      \ The application identifier for which the\n       client wishes to update.\n
      \  The following is an example <update> domain command with the\n   <launch:update>
      extension to add and remove a name server of a\n   sunrise application with
      the application identifier \"abc123\":\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
      standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:
      \ <command>\n   C:    <update>\n   C:      <domain:update\n   C:       xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  C:        <domain:name>domain.example</domain:name>\n   C:        <domain:add>\n
      \  C:            <domain:ns>\n   C:              <domain:hostObj>ns2.domain.example</domain:hostObj>\n
      \  C:            </domain:ns>\n   C:          </domain:add>\n   C:          <domain:rem>\n
      \  C:            <domain:ns>\n   C:              <domain:hostObj>ns1.domain.example</domain:hostObj>\n
      \  C:            </domain:ns>\n   C:          </domain:rem>\n   C:      </domain:update>\n
      \  C:    </update>\n   C:    <extension>\n   C:    <launch:update\n   C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  C:      <launch:phase>sunrise</launch:phase>\n   C:      <launch:applicationID>abc123</launch:applicationID>\n
      \  C:    </launch:update>\n   C:    </extension>\n   C:    <clTRID>ABC-12345</clTRID>\n
      \  C:  </command>\n   C:</epp>\n   This extension does not define any extension
      to the response of an\n   <update> domain command.  After processing the command,
      the server\n   replies with a standard EPP response as defined in the EPP domain\n
      \  name mapping [RFC5731].\n"
    title: 3.4.  EPP <update> Command
  - contents:
    - "3.5.  EPP <delete> Command\n   This extension defines additional elements to
      extend the EPP <delete>\n   command to be used in conjunction with the domain
      name mapping.\n   A client MUST NOT pass the extension on an EPP <delete> command
      to a\n   server that does not support Launch Applications.  A server that does\n
      \  not support Launch Applications during its launch phase MUST return\n   an
      EPP error result code of 2102 [RFC5730] when receiving an EPP\n   <delete> command
      with the extension.\n   Registry policies permitting, clients MAY withdraw an
      application by\n   submitting an EPP <delete> command along with a <launch:delete>\n
      \  element to indicate the application object to be deleted.  The\n   <launch:delete>
      element contains the following child elements:\n   <launch:phase>:  The phase
      during which the application was submitted\n       or is associated with.  The
      server SHOULD validate the value and\n       return an EPP error result code
      of 2306 [RFC5730] if it is\n       invalid.\n   <launch:applicationID>:  The
      application identifier for which the\n       client wishes to delete.\n   The
      following is an example <delete> domain command with the\n   <launch:delete>
      extension:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
      \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
      \  <delete>\n   C:    <domain:delete\n   C:     xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\">\n
      \  C:      <domain:name>domain.example</domain:name>\n   C:    </domain:delete>\n
      \  C:   </delete>\n   C:   <extension>\n   C:    <launch:delete\n   C:     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\">\n
      \  C:      <launch:phase>sunrise</launch:phase>\n   C:      <launch:applicationID>abc123</launch:applicationID>\n
      \  C:    </launch:delete>\n   C:   </extension>\n   C:   <clTRID>ABC-12345</clTRID>\n
      \  C:  </command>\n   C:</epp>\n   This extension does not define any extension
      to the response of a\n   <delete> domain command.  After processing the command,
      the server\n   replies with a standard EPP response as defined in the EPP domain\n
      \  name mapping [RFC5731].\n"
    title: 3.5.  EPP <delete> Command
  - contents:
    - "3.6.  EPP <renew> Command\n   This extension does not define any extension
      to the EPP <renew>\n   command or response described in the EPP domain name
      mapping\n   [RFC5731].\n"
    title: 3.6.  EPP <renew> Command
  - contents:
    - "3.7.  EPP <transfer> Command\n   This extension does not define any extension
      to the EPP <transfer>\n   command or response described in the EPP domain name
      mapping\n   [RFC5731].\n"
    title: 3.7.  EPP <transfer> Command
  title: 3.  EPP Command Mapping
- contents:
  - "4.  Formal Syntax\n   The EPP Launch Phase Mapping schema is presented in Section
    4.1.\n   The formal syntax presented is a complete schema representation of\n
    \  the object mapping suitable for automated validation of EPP XML\n   instances.
    \ The BEGIN and END tags are not part of the schema; they\n   are used to note
    the beginning and ending of the schema for URI\n   registration purposes.\n"
  - contents:
    - "4.1.  Launch Schema\n   Copyright (c) 2018 IETF Trust and the persons identified
      as authors\n   of the code.  All rights reserved.\n   Redistribution and use
      in source and binary forms, with or without\n   modification, are permitted
      provided that the following conditions\n   are met:\n   o  Redistributions of
      source code must retain the above copyright\n      notice, this list of conditions
      and the following disclaimer.\n   o  Redistributions in binary form must reproduce
      the above copyright\n      notice, this list of conditions and the following
      disclaimer in\n      the documentation and/or other materials provided with
      the\n      distribution.\n   o  Neither the name of Internet Society, IETF or
      IETF Trust, nor the\n      names of specific contributors, may be used to endorse
      or promote\n      products derived from this software without specific prior
      written\n      permission.\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
      AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
      BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
      FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n
      \  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT
      OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS
      INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN
      CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE)
      ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE
      POSSIBILITY OF SUCH DAMAGE.\n   BEGIN\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \  <schema\n     targetNamespace=\"urn:ietf:params:xml:ns:launch-1.0\"\n     xmlns:launch=\"urn:ietf:params:xml:ns:launch-1.0\"\n
      \    xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\"\n     xmlns:mark=\"urn:ietf:params:xml:ns:mark-1.0\"\n
      \    xmlns:smd=\"urn:ietf:params:xml:ns:signedMark-1.0\"\n     xmlns=\"http://www.w3.org/2001/XMLSchema\"\n
      \    elementFormDefault=\"qualified\">\n     <!-- Import common element types
      -->\n     <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\"/>\n     <import
      namespace=\"urn:ietf:params:xml:ns:mark-1.0\"/>\n     <import namespace=\"urn:ietf:params:xml:ns:signedMark-1.0\"/>\n
      \    <annotation>\n       <documentation>\n         Extensible Provisioning
      Protocol v1.0\n         domain name\n         extension schema\n         for
      the launch phase processing.\n       </documentation>\n     </annotation>\n
      \    <!-- Child elements found in EPP commands -->\n     <element\n       name=\"check\"\n
      \      type=\"launch:checkType\"/>\n     <element\n       name=\"info\"\n       type=\"launch:infoType\"/>\n
      \    <element\n       name=\"create\"\n       type=\"launch:createType\"/>\n
      \    <element\n       name=\"update\"\n       type=\"launch:idContainerType\"/>\n
      \    <element\n       name=\"delete\"\n       type=\"launch:idContainerType\"/>\n
      \    <!-- Common container of id (identifier) element -->\n     <complexType
      name=\"idContainerType\">\n       <sequence>\n         <element\n           name=\"phase\"\n
      \          type=\"launch:phaseType\"/>\n         <element\n           name=\"applicationID\"\n
      \          type=\"launch:applicationIDType\"/>\n       </sequence>\n     </complexType>\n
      \    <!-- Definition for application identifier -->\n     <simpleType name=\"applicationIDType\">\n
      \      <restriction base=\"token\"/>\n     </simpleType>\n     <!-- Definition
      for launch phase.  Name is an\n          optional attribute used to extend the
      phase type.\n          For example, when using the phase type value\n          of
      \"custom\", the \"name\" can be used to specify the\n          custom phase.
      -->\n     <complexType name=\"phaseType\">\n       <simpleContent>\n         <extension
      base=\"launch:phaseTypeValue\">\n           <attribute\n             name=\"name\"\n
      \            type=\"token\"/>\n         </extension>\n       </simpleContent>\n
      \    </complexType>\n     <!-- Enumeration of launch phase values -->\n     <simpleType
      name=\"phaseTypeValue\">\n       <restriction base=\"token\">\n         <enumeration
      value=\"sunrise\"/>\n         <enumeration value=\"landrush\"/>\n         <enumeration
      value=\"claims\"/>\n         <enumeration value=\"open\"/>\n         <enumeration
      value=\"custom\"/>\n       </restriction>\n     </simpleType>\n     <!-- Definition
      for the sunrise code -->\n     <simpleType name=\"codeValue\">\n       <restriction
      base=\"token\">\n         <minLength value=\"1\"/>\n       </restriction>\n
      \    </simpleType>\n     <complexType name=\"codeType\">\n       <simpleContent>\n
      \        <extension base=\"launch:codeValue\">\n           <attribute\n             name=\"validatorID\"\n
      \            type=\"launch:validatorIDType\"\n             use=\"optional\"/>\n
      \        </extension>\n       </simpleContent>\n     </complexType>\n     <!--
      Definition for the notice identifier -->\n     <simpleType name=\"noticeIDValue\">\n
      \      <restriction base=\"token\">\n         <minLength value=\"1\"/>\n       </restriction>\n
      \    </simpleType>\n     <complexType name=\"noticeIDType\">\n       <simpleContent>\n
      \        <extension base=\"launch:noticeIDValue\">\n           <attribute\n
      \            name=\"validatorID\"\n             type=\"launch:validatorIDType\"\n
      \            use=\"optional\"/>\n         </extension>\n       </simpleContent>\n
      \    </complexType>\n     <!-- Definition for the validator identifier -->\n
      \    <simpleType name=\"validatorIDType\">\n       <restriction base=\"token\">\n
      \        <minLength value=\"1\"/>\n       </restriction>\n     </simpleType>\n
      \    <!-- Possible status values for sunrise application -->\n     <simpleType
      name=\"statusValueType\">\n       <restriction base=\"token\">\n         <enumeration
      value=\"pendingValidation\"/>\n         <enumeration value=\"validated\"/>\n
      \        <enumeration value=\"invalid\"/>\n         <enumeration value=\"pendingAllocation\"/>\n
      \        <enumeration value=\"allocated\"/>\n         <enumeration value=\"rejected\"/>\n
      \        <enumeration value=\"custom\"/>\n       </restriction>\n     </simpleType>\n
      \    <!-- Status type definition -->\n     <complexType name=\"statusType\">\n
      \      <simpleContent>\n         <extension base=\"normalizedString\">\n           <attribute\n
      \            name=\"s\"\n             type=\"launch:statusValueType\"\n             use=\"required\"/>\n
      \          <attribute\n             name=\"lang\"\n             type=\"language\"\n
      \            default=\"en\"/>\n           <attribute\n             name=\"name\"\n
      \            type=\"token\"/>\n         </extension>\n       </simpleContent>\n
      \    </complexType>\n     <!-- codeMark Type that contains an optional\n          code
      with mark information -->\n     <complexType name=\"codeMarkType\">\n       <sequence>\n
      \        <element\n           name=\"code\"\n           type=\"launch:codeType\"\n
      \          minOccurs=\"0\"/>\n         <element\n           ref=\"mark:abstractMark\"\n
      \          minOccurs=\"0\"/>\n       </sequence>\n     </complexType>\n     <!--
      Child elements for the create command -->\n     <complexType name=\"createType\">\n
      \      <sequence>\n         <element\n           name=\"phase\"\n           type=\"launch:phaseType\"/>\n
      \        <choice minOccurs=\"0\">\n           <element\n             name=\"codeMark\"\n
      \            type=\"launch:codeMarkType\"\n             maxOccurs=\"unbounded\"/>\n
      \          <element\n             ref=\"smd:abstractSignedMark\"\n             maxOccurs=\"unbounded\"/>\n
      \          <element\n             ref=\"smd:encodedSignedMark\"\n             maxOccurs=\"unbounded\"/>\n
      \        </choice>\n         <element\n           name=\"notice\"\n           type=\"launch:createNoticeType\"\n
      \          minOccurs=\"0\"\n           maxOccurs=\"unbounded\"/>\n       </sequence>\n
      \      <attribute\n         name=\"type\"\n         type=\"launch:objectType\"/>\n
      \    </complexType>\n     <!-- Type of launch object -->\n     <simpleType name=\"objectType\">\n
      \      <restriction base=\"token\">\n         <enumeration value=\"application\"/>\n
      \        <enumeration value=\"registration\"/>\n       </restriction>\n     </simpleType>\n
      \    <!-- Child elements of the create notice element -->\n     <complexType
      name=\"createNoticeType\">\n       <sequence>\n         <element\n           name=\"noticeID\"\n
      \          type=\"launch:noticeIDType\"/>\n         <element\n           name=\"notAfter\"\n
      \          type=\"dateTime\"/>\n         <element\n           name=\"acceptedDate\"\n
      \          type=\"dateTime\"/>\n       </sequence>\n     </complexType>\n     <!--
      Child elements of check (Claims Check Command) -->\n     <complexType name=\"checkType\">\n
      \      <sequence>\n         <element\n           name=\"phase\"\n           type=\"launch:phaseType\"\n
      \          minOccurs=\"0\"/>\n       </sequence>\n       <attribute\n         name=\"type\"\n
      \        type=\"launch:checkFormType\"\n         default=\"claims\"/>\n     </complexType>\n
      \    <!-- Type of check form (Claims Check or Availability Check) -->\n     <simpleType
      name=\"checkFormType\">\n       <restriction base=\"token\">\n         <enumeration
      value=\"claims\"/>\n         <enumeration value=\"avail\"/>\n         <enumeration
      value=\"trademark\"/>\n       </restriction>\n     </simpleType>\n     <!--
      Child elements of info command -->\n     <complexType name=\"infoType\">\n       <sequence>\n
      \        <element\n           name=\"phase\"\n           type=\"launch:phaseType\"/>\n
      \        <element\n           name=\"applicationID\"\n           type=\"launch:applicationIDType\"\n
      \          minOccurs=\"0\"/>\n       </sequence>\n       <attribute\n         name=\"includeMark\"\n
      \        type=\"boolean\"\n         default=\"false\"/>\n     </complexType>\n
      \    <!-- Child response elements -->\n     <element\n       name=\"chkData\"\n
      \      type=\"launch:chkDataType\"/>\n     <element\n       name=\"creData\"\n
      \      type=\"launch:idContainerType\"/>\n     <element\n       name=\"infData\"\n
      \      type=\"launch:infDataType\"/>\n     <!-- <check> response elements -->\n
      \    <complexType name=\"chkDataType\">\n       <sequence>\n         <element\n
      \          name=\"phase\"\n           type=\"launch:phaseType\"\n           minOccurs=\"0\"/>\n
      \        <element\n           name=\"cd\"\n           type=\"launch:cdType\"\n
      \          maxOccurs=\"unbounded\"/>\n       </sequence>\n     </complexType>\n
      \    <complexType name=\"cdType\">\n       <sequence>\n         <element\n           name=\"name\"\n
      \          type=\"launch:cdNameType\"/>\n         <element\n           name=\"claimKey\"\n
      \          type=\"launch:claimKeyType\"\n           minOccurs=\"0\"\n           maxOccurs=\"unbounded\"/>\n
      \      </sequence>\n     </complexType>\n     <complexType name=\"cdNameType\">\n
      \      <simpleContent>\n         <extension base=\"eppcom:labelType\">\n           <attribute\n
      \            name=\"exists\"\n             type=\"boolean\"\n             use=\"required\"/>\n
      \        </extension>\n       </simpleContent>\n     </complexType>\n     <complexType
      name=\"claimKeyType\">\n       <simpleContent>\n         <extension base=\"token\">\n
      \          <attribute\n             name=\"validatorID\"\n             type=\"launch:validatorIDType\"\n
      \            use=\"optional\"/>\n         </extension>\n       </simpleContent>\n
      \    </complexType>\n     <!-- <info> response elements -->\n     <complexType
      name=\"infDataType\">\n       <sequence>\n         <element\n           name=\"phase\"\n
      \          type=\"launch:phaseType\"/>\n         <element\n           name=\"applicationID\"\n
      \          type=\"launch:applicationIDType\"\n           minOccurs=\"0\"/>\n
      \        <element\n           name=\"status\"\n           type=\"launch:statusType\"\n
      \          minOccurs=\"0\"/>\n         <element\n           ref=\"mark:abstractMark\"\n
      \          minOccurs=\"0\"\n           maxOccurs=\"unbounded\"/>\n       </sequence>\n
      \    </complexType>\n   </schema>\n   END\n"
    title: 4.1.  Launch Schema
  title: 4.  Formal Syntax
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  XML Namespace\n   This document uses URNs to describe XML namespaces
      and XML schemas\n   conforming to a registry mechanism described in [RFC3688].\n
      \  IANA has registered the launch namespace as follows:\n      URI: urn:ietf:params:xml:ns:launch-1.0\n
      \     Registrant Contact: IESG\n      XML: None.  Namespace URIs do not represent
      an XML specification.\n   IANA has registered the launch XML schema as follows:\n
      \     URI: urn:ietf:params:xml:schema:launch-1.0\n      Registrant Contact:
      IESG\n      XML: See the \"Formal Syntax\" section of this document.\n"
    title: 5.1.  XML Namespace
  - contents:
    - "5.2.  EPP Extension Registry\n   IANA has registered the EPP extension described
      in this document in\n   the \"Extensions for the Extensible Provisioning Protocol
      (EPP)\"\n   registry described in [RFC7451].  The details of the registration
      are\n   as follows:\n   Name of Extension: \"Launch Phase Mapping for the Extensible\n
      \  Provisioning Protocol (EPP)\"\n   Document Status: Standards Track\n   Reference:
      RFC 8334\n   Registrant Name and Email Address: IESG, <iesg@ietf.org>\n   TLDs:
      Any\n   IPR Disclosure: None\n   Status: Active\n   Notes: None\n"
    title: 5.2.  EPP Extension Registry
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The mapping extensions described in this document
    do not provide any\n   security services beyond those described by EPP [RFC5730],
    the EPP\n   domain name mapping [RFC5731], and protocol layers used by EPP.  The\n
    \  security considerations described in these other specifications apply\n   to
    this specification as well.\n   Updates to, and deletion of, an application object
    MUST be restricted\n   to clients authorized to perform the said operation on
    the object.\n   Information contained within an application, or even the mere
    fact\n   that an application exists, may be confidential.  Any attempt to\n   operate
    on an application object by an unauthorized client MUST be\n   rejected with an
    EPP 2201 (authorization error) return code.  Server\n   policy may allow an <info>
    operation with filtered output by clients\n   other than the sponsoring client,
    in which case the <domain:infData>\n   and <launch:infData> responses SHOULD be
    filtered to include only\n   fields that are publicly accessible.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC5646]  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n
      \             Languages\", BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n              September
      2009, <https://www.rfc-editor.org/info/rfc5646>.\n   [RFC5730]  Hollenbeck,
      S., \"Extensible Provisioning Protocol (EPP)\",\n              STD 69, RFC 5730,
      DOI 10.17487/RFC5730, August 2009,\n              <https://www.rfc-editor.org/info/rfc5730>.\n
      \  [RFC5731]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Domain
      Name Mapping\", STD 69, RFC 5731,\n              DOI 10.17487/RFC5731, August
      2009,\n              <https://www.rfc-editor.org/info/rfc5731>.\n   [RFC7848]
      \ Lozano, G., \"Mark and Signed Mark Objects Mapping\",\n              RFC 7848,
      DOI 10.17487/RFC7848, June 2016,\n              <https://www.rfc-editor.org/info/rfc7848>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [W3C.REC-xml11-20060816]\n              Bray,
      T., Paoli, J., Sperberg-McQueen, M., Maler, E.,\n              Yergeau, F.,
      and J. Cowan, \"Extensible Markup Language\n              (XML) 1.1 (Second
      Edition)\", World Wide Web Consortium\n              Recommendation REC-xml11-20060816,
      August 2006,\n              <http://www.w3.org/TR/2006/REC-xml11-20060816>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [ICANN-TMCH]\n              Lozano, G., \"ICANN
      TMCH functional specifications\", Work\n              in Progress, draft-ietf-regext-tmch-func-spec-03,
      July\n              2017.\n   [RFC7451]  Hollenbeck, S., \"Extension Registry
      for the Extensible\n              Provisioning Protocol\", RFC 7451, DOI 10.17487/RFC7451,\n
      \             February 2015, <https://www.rfc-editor.org/info/rfc7451>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   The authors wish to acknowledge the efforts of the leading\n
    \  participants of the Community TMCH Model that led to many of the\n   changes
    to this document, which include Chris Wright, Jeff Neuman,\n   Jeff Eckhaus, and
    Will Shorter.\n   Special suggestions that have been incorporated into this document\n
    \  were provided by Harald Alvestrand, Ben Campbell, Spencer Dawkins,\n   Jothan
    Frakes, Keith Gaughan, Seth Goldman, Scott Hollenbeck, Michael\n   Holloway, Jan
    Jansen, Rubens Kuhl, Mirja Kuehlewind, Warren Kumari,\n   Ben Levac, Gustavo Lozano,
    Klaus Malorny, Alexander Mayrhofer, Alexey\n   Melnikov, Patrick Mevzek, James
    Mitchell, Francisco Obispo, Mike\n   O'Connell, Eric Rescorla, Bernhard Reutner-Fischer,
    Sabrina Tanamal,\n   Trung Tran, Ulrich Wisser, and Sharon Wodjenski.\n   Some
    of the description of the Trademark Claims Phase was based on\n   the work done
    by Gustavo Lozano in the ICANN TMCH functional\n   specifications.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   James Gould\n   VeriSign, Inc.\n   12061 Bluemont Way\n
    \  Reston, VA  20190\n   United States of America\n   Email: jgould@verisign.com\n
    \  URI:   http://www.verisign.com\n   Wil Tan\n   Cloud Registry\n   Suite 32
    Seabridge House\n   377 Kent St\n   Sydney, NSW  2000\n   Australia\n   Phone:
    +61 414 710899\n   Email: wil@cloudregistry.net\n   URI:   http://www.cloudregistry.net\n
    \  Gavin Brown\n   CentralNic Ltd\n   35-39 Mooregate\n   London, England  EC2R
    6AR\n   United Kingdom\n   Phone: +44 20 33 88 0600\n   Email: gavin.brown@centralnic.com\n
    \  URI:   https://www.centralnic.com\n"
  title: Authors' Addresses
