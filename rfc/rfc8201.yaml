- title: __initial_text__
  contents:
  - '                  Path MTU Discovery for IP version 6

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes Path MTU Discovery (PMTUD) for IP version\
    \ 6.\n   It is largely derived from RFC 1191, which describes Path MTU\n   Discovery\
    \ for IP version 4.  It obsoletes RFC 1981.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8201.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Protocol Overview . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n   4.  Protocol Requirements . . . . . . . . . . . . . . . . . .\
    \ . .   7\n   5.  Implementation Issues . . . . . . . . . . . . . . . . . . .\
    \ .   8\n     5.1.  Layering  . . . . . . . . . . . . . . . . . . . . . . . .\
    \   8\n     5.2.  Storing PMTU Information  . . . . . . . . . . . . . . . .  \
    \ 9\n     5.3.  Purging Stale PMTU Information  . . . . . . . . . . . . .  11\n\
    \     5.4.  Packetization Layer Actions . . . . . . . . . . . . . . .  12\n  \
    \   5.5.  Issues for Other Transport Protocols  . . . . . . . . . .  13\n    \
    \ 5.6.  Management Interface  . . . . . . . . . . . . . . . . . .  14\n   6. \
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  14\n   7.  IANA\
    \ Considerations . . . . . . . . . . . . . . . . . . . . .  15\n   8.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  15\n     8.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  15\n     8.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  15\n   Appendix A.  Comparison\
    \ to RFC 1191 . . . . . . . . . . . . . . .  17\n   Appendix B.  Changes Since\
    \ RFC 1981 . . . . . . . . . . . . . . .  17\n   Acknowledgements  . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  19\n   Authors' Addresses  . . . . . .\
    \ . . . . . . . . . . . . . . . . .  19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When one IPv6 node has a large amount of data to send to\
    \ another\n   node, the data is transmitted in a series of IPv6 packets.  These\n\
    \   packets can have a size less than or equal to the Path MTU (PMTU).\n   Alternatively,\
    \ they can be larger packets that are fragmented into a\n   series of fragments\
    \ each with a size less than or equal to the PMTU.\n   It is usually preferable\
    \ that these packets be of the largest size\n   that can successfully traverse\
    \ the path from the source node to the\n   destination node without the need for\
    \ IPv6 fragmentation.  This\n   packet size is referred to as the Path MTU, and\
    \ it is equal to the\n   minimum link MTU of all the links in a path.  This document\
    \ defines a\n   standard mechanism for a node to discover the PMTU of an arbitrary\n\
    \   path.\n   IPv6 nodes should implement Path MTU Discovery in order to discover\n\
    \   and take advantage of paths with PMTU greater than the IPv6 minimum\n   link\
    \ MTU [RFC8200].  A minimal IPv6 implementation (e.g., in a boot\n   ROM) may\
    \ choose to omit implementation of Path MTU Discovery.\n   Nodes not implementing\
    \ Path MTU Discovery must use the IPv6 minimum\n   link MTU defined in [RFC8200]\
    \ as the maximum packet size.  In most\n   cases, this will result in the use\
    \ of smaller packets than necessary,\n   because most paths have a PMTU greater\
    \ than the IPv6 minimum link\n   MTU.  A node sending packets much smaller than\
    \ the Path MTU allows is\n   wasting network resources and probably getting suboptimal\
    \ throughput.\n   Nodes implementing Path MTU Discovery and sending packets larger\
    \ than\n   the IPv6 minimum link MTU are susceptible to problematic connectivity\n\
    \   if ICMPv6 [ICMPv6] messages are blocked or not transmitted.  For\n   example,\
    \ this will result in connections that complete the TCP three-\n   way handshake\
    \ correctly but then hang when data is transferred.  This\n   state is referred\
    \ to as a black-hole connection [RFC2923].  Path MTU\n   Discovery relies on ICMPv6\
    \ Packet Too Big (PTB) to determine the MTU\n   of the path.\n   An extension\
    \ to Path MTU Discovery defined in this document can be\n   found in [RFC4821].\
    \  RFC 4821 defines a method for Packetization\n   Layer Path MTU Discovery (PLPMTUD)\
    \ designed for use over paths where\n   delivery of ICMPv6 messages to a host\
    \ is not assured.\n   Note: This document is an update to [RFC1981] that was published\n\
    \   prior to [RFC2119] being published.  Consequently, although RFC 1981\n   used\
    \ the \"should/must\" style language in upper and lower case, this\n   document\
    \ does not cite the RFC 2119 definitions and only uses lower\n   case for these\
    \ words.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   node                a device that implements IPv6.\n   router\
    \              a node that forwards IPv6 packets not explicitly\n            \
    \           addressed to itself.\n   host                any node that is not\
    \ a router.\n   upper layer         a protocol layer immediately above IPv6.\n\
    \                       Examples are transport protocols such as TCP and\n   \
    \                    UDP, control protocols such as ICMPv6, routing\n        \
    \               protocols such as OSPF, and internet-layer or\n              \
    \         lower-layer protocols being \"tunneled\" over\n                    \
    \   (i.e., encapsulated in) IPv6 such as Internetwork\n                      \
    \ Packet Exchange (IPX), AppleTalk, or IPv6 itself.\n   link                a\
    \ communication facility or medium over which\n                       nodes can\
    \ communicate at the link layer, i.e.,\n                       the layer immediately\
    \ below IPv6.  Examples are\n                       Ethernets (simple or bridged);\
    \ PPP links; X.25,\n                       Frame Relay, or ATM networks; and internet-layer\n\
    \                       or higher-layer \"tunnels\", such as tunnels over\n  \
    \                     IPv4 or IPv6 itself.\n   interface           a node's attachment\
    \ to a link.\n   address             an IPv6-layer identifier for an interface\
    \ or a\n                       set of interfaces.\n   packet              an IPv6\
    \ header plus payload.  The packet can have\n                       a size less\
    \ than or equal to the PMTU.\n                       Alternatively, this can be\
    \ a larger packet that\n                       is fragmented into a series of\
    \ fragments each\n                       with a size less than or equal to the\
    \ PMTU.\n   link MTU            the maximum transmission unit, i.e., maximum\n\
    \                       packet size in octets, that can be conveyed in\n     \
    \                  one piece over a link.\n   path                the set of links\
    \ traversed by a packet between a\n                       source node and a destination\
    \ node.\n   path MTU            the minimum link MTU of all the links in a path\n\
    \                       between a source node and a destination node.\n   PMTU\
    \                path MTU.\n   Path MTU Discovery  the process by which a node\
    \ learns the PMTU of a\n                       path.\n   EMTU_S              Effective\
    \ MTU for sending; used by upper-layer\n                       protocols to limit\
    \ the size of IP packets they\n                       queue for sending [RFC6691]\
    \ [RFC1122].\n   EMTU_R              Effective MTU for receiving; the largest\
    \ packet\n                       that can be reassembled at the receiver\n   \
    \                    [RFC1122].\n   flow                a sequence of packets\
    \ sent from a particular\n                       source to a particular (unicast\
    \ or multicast)\n                       destination for which the source desires\
    \ special\n                       handling by the intervening routers.\n   flow\
    \ id             a combination of a source address and a non-zero\n          \
    \             flow label.\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   This memo describes a technique to dynamically discover\
    \ the PMTU of a\n   path.  The basic idea is that a source node initially assumes\
    \ that\n   the PMTU of a path is the (known) MTU of the first hop in the path.\n\
    \   If any of the packets sent on that path are too large to be forwarded\n  \
    \ by some node along the path, that node will discard them and return\n   ICMPv6\
    \ Packet Too Big messages.  Upon receipt of such a message, the\n   source node\
    \ reduces its assumed PMTU for the path based on the MTU of\n   the constricting\
    \ hop as reported in the Packet Too Big message.  The\n   decreased PMTU causes\
    \ the source to send smaller packets or change\n   EMTU_S to cause the upper layer\
    \ to reduce the size of IP packets it\n   sends.\n   The Path MTU Discovery process\
    \ ends when the source node's estimate\n   of the PMTU is less than or equal to\
    \ the actual PMTU.  Note that\n   several iterations of the packet-sent/Packet-Too-Big-message-received\n\
    \   cycle may occur before the Path MTU Discovery process ends, as there\n   may\
    \ be links with smaller MTUs further along the path.\n   Alternatively, the node\
    \ may elect to end the discovery process by\n   ceasing to send packets larger\
    \ than the IPv6 minimum link MTU.\n   The PMTU of a path may change over time,\
    \ due to changes in the\n   routing topology.  Reductions of the PMTU are detected\
    \ by Packet Too\n   Big messages.  To detect increases in a path's PMTU, a node\n\
    \   periodically increases its assumed PMTU.  This will almost always\n   result\
    \ in packets being discarded and Packet Too Big messages being\n   generated,\
    \ because in most cases the PMTU of the path will not have\n   changed.  Therefore,\
    \ attempts to detect increases in a path's PMTU\n   should be done infrequently.\n\
    \   Path MTU Discovery supports multicast as well as unicast\n   destinations.\
    \  In the case of a multicast destination, copies of a\n   packet may traverse\
    \ many different paths to many different nodes.\n   Each path may have a different\
    \ PMTU, and a single multicast packet\n   may result in multiple Packet Too Big\
    \ messages, each reporting a\n   different next-hop MTU.  The minimum PMTU value\
    \ across the set of\n   paths in use determines the size of subsequent packets\
    \ sent to the\n   multicast destination.\n   Note that Path MTU Discovery must\
    \ be performed even in cases where a\n   node \"thinks\" a destination is attached\
    \ to the same link as itself,\n   as it might have a PMTU lower than the link\
    \ MTU.  In a situation such\n   as when a neighboring router acts as proxy [ND]\
    \ for some destination,\n   the destination can appear to be directly connected,\
    \ but it is in\n   fact more than one hop away.\n"
- title: 4.  Protocol Requirements
  contents:
  - "4.  Protocol Requirements\n   As discussed in Section 1, IPv6 nodes are not required\
    \ to implement\n   Path MTU Discovery.  The requirements in this section apply\
    \ only to\n   those implementations that include Path MTU Discovery.\n   Nodes\
    \ should appropriately validate the payload of ICMPv6 PTB\n   messages to ensure\
    \ these are received in response to transmitted\n   traffic (i.e., a reported\
    \ error condition that corresponds to an IPv6\n   packet actually sent by the\
    \ application) per [ICMPv6].\n   If a node receives a Packet Too Big message reporting\
    \ a next-hop MTU\n   that is less than the IPv6 minimum link MTU, it must discard\
    \ it.  A\n   node must not reduce its estimate of the Path MTU below the IPv6\n\
    \   minimum link MTU on receipt of a Packet Too Big message.\n   When a node receives\
    \ a Packet Too Big message, it must reduce its\n   estimate of the PMTU for the\
    \ relevant path, based on the value of the\n   MTU field in the message.  The\
    \ precise behavior of a node in this\n   circumstance is not specified, since\
    \ different applications may have\n   different requirements, and since different\
    \ implementation\n   architectures may favor different strategies.\n   After receiving\
    \ a Packet Too Big message, a node must attempt to\n   avoid eliciting more such\
    \ messages in the near future.  The node must\n   reduce the size of the packets\
    \ it is sending along the path.  Using a\n   PMTU estimate larger than the IPv6\
    \ minimum link MTU may continue to\n   elicit Packet Too Big messages.  Because\
    \ each of these messages (and\n   the dropped packets they respond to) consume\
    \ network resources, nodes\n   using Path MTU Discovery must detect decreases\
    \ in PMTU as fast as\n   possible.\n   Nodes may detect increases in PMTU, but\
    \ because doing so requires\n   sending packets larger than the current estimated\
    \ PMTU, and because\n   the likelihood is that the PMTU will not have increased,\
    \ this must be\n   done at infrequent intervals.  An attempt to detect an increase\
    \ (by\n   sending a packet larger than the current estimate) must not be done\n\
    \   less than 5 minutes after a Packet Too Big message has been received\n   for\
    \ the given path.  The recommended setting for this timer is twice\n   its minimum\
    \ value (10 minutes).\n   A node must not increase its estimate of the Path MTU\
    \ in response to\n   the contents of a Packet Too Big message.  A message purporting\
    \ to\n   announce an increase in the Path MTU might be a stale packet that has\n\
    \   been floating around in the network, a false packet injected as part\n   of\
    \ a denial-of-service (DoS) attack, or the result of having multiple\n   paths\
    \ to the destination, each with a different PMTU.\n"
- title: 5.  Implementation Issues
  contents:
  - "5.  Implementation Issues\n   This section discusses a number of issues related\
    \ to the\n   implementation of Path MTU Discovery.  This is not a specification,\n\
    \   but rather a set of notes provided as an aid for implementers.\n   The issues\
    \ include:\n   -  What layer or layers implement Path MTU Discovery?\n   -  How\
    \ is the PMTU information cached?\n   -  How is stale PMTU information removed?\n\
    \   -  What must transport and higher layers do?\n"
- title: 5.1.  Layering
  contents:
  - "5.1.  Layering\n   In the IP architecture, the choice of what size packet to\
    \ send is\n   made by a protocol at a layer above IP.  This memo refers to such\
    \ a\n   protocol as a \"packetization protocol\".  Packetization protocols are\n\
    \   usually transport protocols (for example, TCP) but can also be\n   higher-layer\
    \ protocols (for example, protocols built on top of UDP).\n   Implementing Path\
    \ MTU Discovery in the packetization layers\n   simplifies some of the inter-layer\
    \ issues but has several drawbacks:\n   the implementation may have to be redone\
    \ for each packetization\n   protocol, it becomes hard to share PMTU information\
    \ between different\n   packetization layers, and the connection-oriented state\
    \ maintained by\n   some packetization layers may not easily extend to save PMTU\n\
    \   information for long periods.\n   It is therefore suggested that the IP layer\
    \ store PMTU information\n   and that the ICMPv6 layer process received Packet\
    \ Too Big messages.\n   The packetization layers may respond to changes in the\
    \ PMTU by\n   changing the size of the messages they send.  To support this\n\
    \   layering, packetization layers require a way to learn of changes in\n   the\
    \ value of MMS_S, the \"maximum send transport-message size\"\n   [RFC1122].\n\
    \   MMS_S is a transport message size calculated by subtracting the size\n   of\
    \ the IPv6 header (including IPv6 extension headers) from the\n   largest IP packet\
    \ that can be sent, EMTU_S.  MMS_S is limited by a\n   combination of factors,\
    \ including the PMTU, support for packet\n   fragmentation and reassembly, and\
    \ the packet reassembly limit (see\n   \"Fragment Header\", Section 4.5 of [RFC8200]).\
    \  When source\n   fragmentation is available, EMTU_S is set to EMTU_R, as indicated\
    \ by\n   the receiver using an upper-layer protocol or based on protocol\n   requirements\
    \ (1500 octets for IPv6).  When a message larger than PMTU\n   is to be transmitted,\
    \ the source creates fragments, each limited by\n   PMTU.  When source fragmentation\
    \ is not desired, EMTU_S is set to\n   PMTU, and the upper-layer protocol is expected\
    \ to either perform its\n   own fragmentation and reassembly or otherwise limit\
    \ the size of its\n   messages accordingly.\n   However, packetization layers\
    \ are encouraged to avoid sending\n   messages that will require source fragmentation\
    \ (for the case against\n   fragmentation, see [FRAG]).\n"
- title: 5.2.  Storing PMTU Information
  contents:
  - "5.2.  Storing PMTU Information\n   Ideally, a PMTU value should be associated\
    \ with a specific path\n   traversed by packets exchanged between the source and\
    \ destination\n   nodes.  However, in most cases a node will not have enough\n\
    \   information to completely and accurately identify such a path.\n   Rather,\
    \ a node must associate a PMTU value with some local\n   representation of a path.\
    \  It is left to the implementation to select\n   the local representation of\
    \ a path.  For nodes with multiple\n   interfaces, Path MTU information should\
    \ be maintained for each IPv6\n   link.\n   In the case of a multicast destination\
    \ address, copies of a packet\n   may traverse many different paths to reach many\
    \ different nodes.  The\n   local representation of the \"path\" to a multicast\
    \ destination must\n   represent a potentially large set of paths.\n   Minimally,\
    \ an implementation could maintain a single PMTU value to be\n   used for all\
    \ packets originated from the node.  This PMTU value would\n   be the minimum\
    \ PMTU learned across the set of all paths in use by the\n   node.  This approach\
    \ is likely to result in the use of smaller\n   packets than is necessary for\
    \ many paths.  In the case of multipath\n   routing (e.g., Equal-Cost Multipath\
    \ Routing (ECMP)), a set of paths\n   can exist even for a single source and destination\
    \ pair.\n   An implementation could use the destination address as the local\n\
    \   representation of a path.  The PMTU value associated with a\n   destination\
    \ would be the minimum PMTU learned across the set of all\n   paths in use to\
    \ that destination.  This approach will result in the\n   use of optimally sized\
    \ packets on a per-destination basis.  This\n   approach integrates nicely with\
    \ the conceptual model of a host as\n   described in [ND]: a PMTU value could\
    \ be stored with the\n   corresponding entry in the destination cache.\n   If\
    \ flows [RFC8200] are in use, an implementation could use the flow\n   id as the\
    \ local representation of a path.  Packets sent to a\n   particular destination\
    \ but belonging to different flows may use\n   different paths, as with ECMP,\
    \ in which the choice of path might\n   depend on the flow id.  This approach\
    \ might result in the use of\n   optimally sized packets on a per-flow basis,\
    \ providing finer\n   granularity than PMTU values maintained on a per-destination\
    \ basis.\n   For source-routed packets (i.e. packets containing an IPv6 Routing\n\
    \   header [RFC8200]), the source route may further qualify the local\n   representation\
    \ of a path.\n   Initially, the PMTU value for a path is assumed to be the (known)\
    \ MTU\n   of the first-hop link.\n   When a Packet Too Big message is received,\
    \ the node determines which\n   path the message applies to based on the contents\
    \ of the Packet Too\n   Big message.  For example, if the destination address\
    \ is used as the\n   local representation of a path, the destination address from\
    \ the\n   original packet would be used to determine which path the message\n\
    \   applies to.\n      Note: if the original packet contained a Routing header,\
    \ the\n      Routing header should be used to determine the location of the\n\
    \      destination address within the original packet.  If Segments Left\n   \
    \   is equal to zero, the destination address is in the Destination\n      Address\
    \ field in the IPv6 header.  If Segments Left is greater\n      than zero, the\
    \ destination address is the last address\n      (Address[n]) in the Routing header.\n\
    \   The node then uses the value in the MTU field in the Packet Too Big\n   message\
    \ as a tentative PMTU value or the IPv6 minimum link MTU if\n   that is larger,\
    \ and compares the tentative PMTU to the existing PMTU.\n   If the tentative PMTU\
    \ is less than the existing PMTU estimate, the\n   tentative PMTU replaces the\
    \ existing PMTU as the PMTU value for the\n   path.\n   The packetization layers\
    \ must be notified about decreases in the\n   PMTU.  Any packetization layer instance\
    \ (for example, a TCP\n   connection) that is actively using the path must be\
    \ notified if the\n   PMTU estimate is decreased.\n      Note: even if the Packet\
    \ Too Big message contains an Original\n      Packet Header that refers to a UDP\
    \ packet, the TCP layer must be\n      notified if any of its connections use\
    \ the given path.\n   Also, the instance that sent the packet that elicited the\
    \ Packet Too\n   Big message should be notified that its packet has been dropped,\
    \ even\n   if the PMTU estimate has not changed, so that it may retransmit the\n\
    \   dropped data.\n      Note: An implementation can avoid the use of an asynchronous\n\
    \      notification mechanism for PMTU decreases by postponing\n      notification\
    \ until the next attempt to send a packet larger than\n      the PMTU estimate.\
    \  In this approach, when an attempt is made to\n      SEND a packet that is larger\
    \ than the PMTU estimate, the SEND\n      function should fail and return a suitable\
    \ error indication.  This\n      approach may be more suitable to a connectionless\
    \ packetization\n      layer (such as one using UDP), which (in some implementations)\
    \ may\n      be hard to \"notify\" from the ICMPv6 layer.  In this case, the\n\
    \      normal timeout-based retransmission mechanisms would be used to\n     \
    \ recover from the dropped packets.\n   It is important to understand that the\
    \ notification of the\n   packetization layer instances using the path about the\
    \ change in the\n   PMTU is distinct from the notification of a specific instance\
    \ that a\n   packet has been dropped.  The latter should be done as soon as\n\
    \   practical (i.e., asynchronously from the point of view of the\n   packetization\
    \ layer instance), while the former may be delayed until\n   a packetization layer\
    \ instance wants to create a packet.\n"
- title: 5.3.  Purging Stale PMTU Information
  contents:
  - "5.3.  Purging Stale PMTU Information\n   Internetwork topology is dynamic; routes\
    \ change over time.  While the\n   local representation of a path may remain constant,\
    \ the actual\n   path(s) in use may change.  Thus, PMTU information cached by\
    \ a node\n   can become stale.\n   If the stale PMTU value is too large, this\
    \ will be discovered almost\n   immediately once a large enough packet is sent\
    \ on the path.  No such\n   mechanism exists for realizing that a stale PMTU value\
    \ is too small,\n   so an implementation should \"age\" cached values.  When a\
    \ PMTU value\n   has not been decreased for a while (on the order of 10 minutes),\
    \ it\n   should probe to find if a larger PMTU is supported.\n      Note: an implementation\
    \ should provide a means for changing the\n      timeout duration, including setting\
    \ it to \"infinity\".  For\n      example, nodes attached to a link with a large\
    \ MTU that is then\n      attached to the rest of the Internet via a link with\
    \ a small MTU\n      are never going to discover a new non-local PMTU, so they\
    \ should\n      not have to put up with dropped packets every 10 minutes.\n"
- title: 5.4.  Packetization Layer Actions
  contents:
  - "5.4.  Packetization Layer Actions\n   A packetization layer (e.g., TCP) must\
    \ use the PMTU for the path(s)\n   in use by a connection; it should not send\
    \ segments that would result\n   in packets larger than the PMTU, except to probe\
    \ during PMTU\n   Discovery (this probe packet must not be fragmented to the PMTU).\
    \  A\n   simple implementation could ask the IP layer for this value each time\n\
    \   it created a new segment, but this could be inefficient.  An\n   implementation\
    \ typically caches other values derived from the PMTU.\n   It may be simpler to\
    \ receive asynchronous notification when the PMTU\n   changes, so that these variables\
    \ may be also updated.\n   A TCP implementation must also store the Maximum Segment\
    \ Size (MSS)\n   value received from its peer, which represents the EMTU_R, the\n\
    \   largest packet that can be reassembled by the receiver, and must not\n   send\
    \ any segment larger than this MSS, regardless of the PMTU.\n   The value sent\
    \ in the TCP MSS option is independent of the PMTU; it\n   is determined by the\
    \ receiver reassembly limit EMTU_R.  This MSS\n   option value is used by the\
    \ other end of the connection, which may be\n   using an unrelated PMTU value.\
    \  See Section 5, \"Packet Size Issues\",\n   and Section 8.3, \"Maximum Upper-Layer\
    \ Payload Size\", of [RFC8200] for\n   information on selecting a value for the\
    \ TCP MSS option.\n   Reception of a Packet Too Big message implies that a packet\
    \ was\n   dropped by the node that sent the ICMPv6 message.  A reliable upper-\n\
    \   layer protocol will detect this loss by its own means, and recover it\n  \
    \ by its normal retransmission methods.  The retransmission could\n   result in\
    \ delay, depending on the loss detection method used by the\n   upper-layer protocol.\
    \  If the Path MTU Discovery process requires\n   several steps to find the PMTU\
    \ of the full path, this could finally\n   delay the retransmission by many round-trip\
    \ times.\n   Alternatively, the retransmission could be done in immediate response\n\
    \   to a notification that the Path MTU was decreased, but only for the\n   specific\
    \ connection specified by the Packet Too Big message.  The\n   packet size used\
    \ in the retransmission should be no larger than the\n   new PMTU.\n      Note:\
    \ A packetization layer that determines a probe packet is lost\n      needs to\
    \ adapt the segment size of the retransmission.  Using the\n      reported size\
    \ in the last Packet Too Big message, however, can\n      lead to further losses\
    \ as there might be smaller PMTU limits at\n      the routers further along the\
    \ path.  This would lead to loss of\n      all retransmitted segments and therefore\
    \ cause unnecessary\n      congestion as well as additional packets to be sent\
    \ each time a\n      new router announces a smaller MTU.  Any packetization layer\
    \ that\n      uses retransmission is therefore also responsible for congestion\n\
    \      control of its retransmissions [RFC8085].\n   A loss caused by a PMTU probe\
    \ indicated by the reception of a Packet\n   Too Big message must not be considered\
    \ as a congestion notification,\n   and hence the congestion window may not change.\n"
- title: 5.5.  Issues for Other Transport Protocols
  contents:
  - "5.5.  Issues for Other Transport Protocols\n   Some transport protocols are not\
    \ allowed to repacketize when doing a\n   retransmission.  That is, once an attempt\
    \ is made to transmit a\n   segment of a certain size, the transport cannot split\
    \ the contents of\n   the segment into smaller segments for retransmission.  In\
    \ such a\n   case, the original segment can be fragmented by the IP layer during\n\
    \   retransmission.  Subsequent segments, when transmitted for the first\n   time,\
    \ should be no larger than allowed by the Path MTU.\n   Path MTU Discovery for\
    \ IPv4 [RFC1191] used NFS as an example of a\n   UDP-based application that benefits\
    \ from PMTU Discovery.  Since then,\n   [RFC7530] states that the supported transport\
    \ layer between NFS and\n   IP must be an IETF standardized transport protocol\
    \ that is specified\n   to avoid network congestion; such transports include TCP,\
    \ Stream\n   Control Transmission Protocol (SCTP) [RFC4960], and the Datagram\n\
    \   Congestion Control Protocol (DCCP) [RFC4340].  In this case, the\n   transport\
    \ is responsible for ensuring that transmitted segments\n   (except probes) conform\
    \ to the Path MTU, including supporting PMTU\n   Discovery probe transmissions\
    \ as needed.\n"
- title: 5.6.  Management Interface
  contents:
  - "5.6.  Management Interface\n   It is suggested that an implementation provides\
    \ a way for a system\n   utility program to:\n   -  Specify that Path MTU Discovery\
    \ not be done on a given path.\n   -  Change the PMTU value associated with a\
    \ given path.\n   The former can be accomplished by associating a flag with the\
    \ path;\n   when a packet is sent on a path with this flag set, the IP layer does\n\
    \   not send packets larger than the IPv6 minimum link MTU.\n   These features\
    \ might be used to work around an anomalous situation or\n   by a routing protocol\
    \ implementation that is able to obtain Path MTU\n   values.\n   The implementation\
    \ should also provide a way to change the timeout\n   period for aging stale PMTU\
    \ information.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This Path MTU Discovery mechanism makes possible\
    \ two DoS attacks,\n   both based on a malicious party sending false Packet Too\
    \ Big messages\n   to a node.\n      In the first attack, the false message indicates\
    \ a PMTU much\n      smaller than reality.  In response, the victim node should\
    \ never\n      set its PMTU estimate below the IPv6 minimum link MTU.  A sender\n\
    \      that falsely reduces to this MTU would observe suboptimal\n      performance.\n\
    \      In the second attack, the false message indicates a PMTU larger\n     \
    \ than reality.  If believed, this could cause temporary blockage as\n      the\
    \ victim sends packets that will be dropped by some router.\n      Within one\
    \ round-trip time, the node would discover its mistake\n      (receiving Packet\
    \ Too Big messages from that router), but frequent\n      repetition of this attack\
    \ could cause lots of packets to be\n      dropped.  A node, however, must not\
    \ raise its estimate of the PMTU\n      based on a Packet Too Big message, so\
    \ it should not be vulnerable\n      to this attack.\n   Both of these attacks\
    \ can cause a black-hole connection, that is, the\n   TCP three-way handshake\
    \ completes correctly but the connection hangs\n   when data is transferred.\n\
    \   A malicious party could also cause problems if it could stop a victim\n  \
    \ from receiving legitimate Packet Too Big messages, but in this case\n   there\
    \ are simpler DoS attacks available.\n   If ICMPv6 filtering prevents reception\
    \ of ICMPv6 Packet Too Big\n   messages, the source will not learn the actual\
    \ path MTU.\n   \"Packetization Layer Path MTU Discovery\" [RFC4821] does not\
    \ rely upon\n   network support for ICMPv6 messages and is therefore considered\
    \ more\n   robust than standard PMTUD.  It is not susceptible to \"black-holed\"\
    \n   connections caused by the filtering of ICMPv6 messages.  See\n   [RFC4890]\
    \ for recommendations regarding filtering ICMPv6 messages.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ICMPv6]   Conta, A., Deering, S., and M. Gupta,\
    \ Ed., \"Internet\n              Control Message Protocol (ICMPv6) for the Internet\n\
    \              Protocol Version 6 (IPv6) Specification\", STD 89,\n          \
    \    RFC 4443, DOI 10.17487/RFC4443, March 2006,\n              <http://www.rfc-editor.org/info/rfc4443>.\n\
    \   [RFC8200]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", STD 86, RFC 8200,\n              DOI 10.17487/RFC8200,\
    \ July 2017,\n              <http://www.rfc-editor.org/info/rfc8200>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [FRAG]     Kent, C. and J. Mogul, \"Fragmentation\
    \ Considered Harmful\",\n              In Proc. SIGCOMM '87 Workshop on Frontiers\
    \ in Computer\n              Communications Technology, DOI 10.1145/55483.55524,\
    \ August\n              1987.\n   [ND]       Narten, T., Nordmark, E., Simpson,\
    \ W., and H. Soliman,\n              \"Neighbor Discovery for IP version 6 (IPv6)\"\
    , RFC 4861,\n              DOI 10.17487/RFC4861, September 2007,\n           \
    \   <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC1122]  Braden, R., Ed.,\
    \ \"Requirements for Internet Hosts -\n              Communication Layers\", STD\
    \ 3, RFC 1122,\n              DOI 10.17487/RFC1122, October 1989,\n          \
    \    <http://www.rfc-editor.org/info/rfc1122>.\n   [RFC1191]  Mogul, J. and S.\
    \ Deering, \"Path MTU discovery\", RFC 1191,\n              DOI 10.17487/RFC1191,\
    \ November 1990,\n              <http://www.rfc-editor.org/info/rfc1191>.\n  \
    \ [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n   \
    \           for IP version 6\", RFC 1981, DOI 10.17487/RFC1981, August\n     \
    \         1996, <http://www.rfc-editor.org/info/rfc1981>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2923]  Lahey, K., \"\
    TCP Problems with Path MTU Discovery\",\n              RFC 2923, DOI 10.17487/RFC2923,\
    \ September 2000,\n              <http://www.rfc-editor.org/info/rfc2923>.\n \
    \  [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n            \
    \  Congestion Control Protocol (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340,\
    \ March 2006,\n              <http://www.rfc-editor.org/info/rfc4340>.\n   [RFC4821]\
    \  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n              Discovery\"\
    , RFC 4821, DOI 10.17487/RFC4821, March 2007,\n              <http://www.rfc-editor.org/info/rfc4821>.\n\
    \   [RFC4890]  Davies, E. and J. Mohacsi, \"Recommendations for Filtering\n  \
    \            ICMPv6 Messages in Firewalls\", RFC 4890,\n              DOI 10.17487/RFC4890,\
    \ May 2007,\n              <http://www.rfc-editor.org/info/rfc4890>.\n   [RFC4960]\
    \  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n             \
    \ RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <http://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC6691]  Borman, D., \"TCP Options and Maximum Segment Size (MSS)\",\n \
    \             RFC 6691, DOI 10.17487/RFC6691, July 2012,\n              <http://www.rfc-editor.org/info/rfc6691>.\n\
    \   [RFC7530]  Haynes, T., Ed. and D. Noveck, Ed., \"Network File System\n   \
    \           (NFS) Version 4 Protocol\", RFC 7530, DOI 10.17487/RFC7530,\n    \
    \          March 2015, <http://www.rfc-editor.org/info/rfc7530>.\n   [RFC8085]\
    \  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n              Guidelines\"\
    , BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n              March 2017, <http://www.rfc-editor.org/info/rfc8085>.\n"
- title: Appendix A.  Comparison to RFC 1191
  contents:
  - "Appendix A.  Comparison to RFC 1191\n   RFC 1981 (obsoleted by this document)\
    \ was based in large part on RFC\n   1191, which describes Path MTU Discovery\
    \ for IPv4.  Certain portions\n   of RFC 1191 were not needed in RFC 1981:\n \
    \  router specification  Packet Too Big messages and corresponding\n         \
    \                router behavior are defined in [ICMPv6]\n   Don't Fragment bit\
    \    there is no DF bit in IPv6 packets\n   TCP MSS discussion    selecting a\
    \ value to send in the TCP MSS option\n                         is discussed in\
    \ [RFC8200]\n   old-style messages    all Packet Too Big messages report the MTU\
    \ of\n                         the constricting link\n   MTU plateau tables  \
    \  not needed because there are no old-style\n                         messages\n"
- title: Appendix B.  Changes Since RFC 1981
  contents:
  - "Appendix B.  Changes Since RFC 1981\n   This document is based on RFC 1981 and\
    \ has the following changes from\n   RFC 1981:\n   o  Clarified in Section 1,\
    \ \"Introduction\", that the purpose of PMTUD\n      is to reduce the need for\
    \ IPv6 fragmentation.\n   o  Added text to Section 1, \"Introduction\", about\
    \ the effects on\n      PMTUD when ICMPv6 messages are blocked.\n   o  Added a\
    \ \"Note\" to the introduction to document that this\n      specification doesn't\
    \ cite RFC 2119 and only uses lower case\n      \"should/must\" language.  Changed\
    \ all upper case \"should/must\" to\n      lower case.\n   o  Added a short summary\
    \ to Section 1, \"Introduction\", about PLPMTUD\n      and a reference to RFC\
    \ 4821 that defines it.\n   o  Aligned text in Section 2, \"Terminology\", to\
    \ match current\n      packetization layer terminology.\n   o  Added clarification\
    \ in Section 4, \"Protocol Requirements\", that\n      nodes should validate the\
    \ payload of ICMP PTB messages per RFC\n      4443, and that nodes should detect\
    \ decreases in PMTU as fast as\n      possible.\n   o  Removed a \"Note\" from\
    \ Section 4, \"Protocol Requirements\", about a\n      Packet Too Big message\
    \ reporting a next-hop MTU that is less than\n      the IPv6 minimum link MTU\
    \ because this was removed from [RFC8200].\n   o  Added clarification in Section\
    \ 5.2, \"Storing PMTU Information\", to\n      discard an ICMPv6 Packet Too Big\
    \ message if it contains an MTU\n      less than the IPv6 minimum link MTU.\n\
    \   o  Added clarification in Section 5.2, \"Storing PMTU Information\",\n   \
    \   that for nodes with multiple interfaces, Path MTU information\n      should\
    \ be stored for each link.\n   o  Removed text in Section 5.2, \"Storing PMTU\
    \ Information\", about\n      Routing Header type 0 (RH0) because it was deprecated\
    \ by RFC 5095.\n   o  Removed text about obsolete security classification from\n\
    \      Section 5.2, \"Storing PMTU Information\".\n   o  Changed the title of\
    \ Section 5.4 to \"Packetization Layer Actions\"\n      and changed the text in\
    \ the first paragraph to generalize this\n      section to cover all packetization\
    \ layers, not just TCP.\n   o  Clarified text in Section 5.4, \"Packetization\
    \ Layer Actions\", to\n      use normal packetization layer retransmission methods.\n\
    \   o  Removed text in Section 5.4, \"Packetization Layer Actions\", that\n  \
    \    described 4.2 BSD because it is obsolete, and removed reference to\n    \
    \  TP4.\n   o  Updated text in Section 5.5, \"Issues for Other Transport\n   \
    \   Protocols\", about NFS, including adding a current reference to NFS\n    \
    \  and removing obsolete text.\n   o  Added a paragraph to Section 6, \"Security\
    \ Considerations\", about\n      black-hole connections if PTB messages are not\
    \ received and\n      comparison to PLPMTUD.\n   o  Updated \"Acknowledgements\"\
    .\n   o  Editorial Changes.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to acknowledge the authors of and contributors\
    \ to\n   [RFC1191], from which the majority of this document was derived.  We\n\
    \   would also like to acknowledge the members of the IPng Working Group\n   for\
    \ their careful review and constructive criticisms.\n   We would also like to\
    \ acknowledge the contributors to this update of\n   \"Path MTU Discovery for\
    \ IP Version 6\".  This includes members of the\n   6MAN Working Group, area directorate\
    \ reviewers, the IESG, and\n   especially Joe Touch and Gorry Fairhurst.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jack McCann\n   Digital Equipment Corporation\n   Stephen\
    \ E. Deering\n   Retired\n   Vancouver, British Columbia\n   Canada\n   Jeffrey\
    \ Mogul\n   Digital Equipment Corporation\n   Robert M. Hinden (editor)\n   Check\
    \ Point Software\n   959 Skyway Road\n   San Carlos, CA  94070\n   United States\
    \ of America\n   Email: bob.hinden@gmail.com\n"
