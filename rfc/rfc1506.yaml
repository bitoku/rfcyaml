- title: __initial_text__
  contents:
  - ''
- title: 'RARE Technical Report: 6                                   August 1993'
  contents:
  - "RARE Technical Report: 6                                   August 1993\n    \
    \    A Tutorial on Gatewaying between X.400 and Internet Mail\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   There are many ways in which X.400 and Internet (STD 11, RFC\
    \ 822)\n   mail systems can be interconnected. Addresses and service elements\n\
    \   can be mapped onto each other in different ways. From the early\n   available\
    \ gateway implementations, one was not necessarily better\n   than another, but\
    \ the sole fact that each handled the mappings in a\n   different way led to major\
    \ interworking problems, especially when a\n   message (or address) crossed more\
    \ than one gateway. The need for one\n   global standard on how to implement X.400\
    \ - Internet mail gatewaying\n   was satisfied by the Internet Request For Comments\
    \ 1327, titled\n   \"Mapping between X.400(1988)/ISO 10021 and RFC 822.\"\n  \
    \ This tutorial was produced especially to help new gateway managers\n   find\
    \ their way into the complicated subject of mail gatewaying\n   according to RFC\
    \ 1327. The need for such a tutorial can be\n   illustrated by quoting the following\
    \ discouraging paragraph from RFC\n   1327, chapter 1: \"Warning: the remainder\
    \ of this specification is\n   technically detailed. It will not make sense, except\
    \ in the context\n   of RFC 822 and X.400 (1988). Do not attempt to read this\
    \ document\n   unless you are familiar with these specifications.\"\n   The introduction\
    \ of this tutorial is general enough to be read not\n   only by gateway managers,\
    \ but also by e-mail managers who are new to\n   gatewaying or to one of the two\
    \ e-mail worlds in general. Parts of\n   this introduction can be skipped as needed.\n\
    \   For novice end-users, even this tutorial will be difficult to read.\n   They\
    \ are encouraged to use the COSINE MHS pocket user guide [14]\n   instead.\n \
    \  To a certain extent, this document can also be used as a reference\n   guide\
    \ to X.400 <-> RFC 822 gatewaying. Wherever there is a lack of\n   detail in the\
    \ tutorial, it will at least point to the corresponding\n   chapters in other\
    \ documents. As such, it shields the RFC 1327 novice\n   from too much detail.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This tutorial is heavily based on other documents, such\
    \ as [2], [6],\n   [7], [8], and [11], from which large parts of text were reproduced\n\
    \   (slightly edited) by kind permission from the authors.\n   The author would\
    \ like to thank the following persons for their\n   thorough reviews: Peter Cowen\
    \ (Nexor), Urs Eppenberger (SWITCH), Erik\n   Huizer (SURFnet), Steve Kille (ISODE\
    \ Consortium), Paul Klarenberg\n   (NetConsult), Felix Kugler (SWITCH), Sabine\
    \ Luethi.\n"
- title: Disclaimer
  contents:
  - "Disclaimer\n   This document is not everywhere exact and/or complete in describing\n\
    \   the involved standards. Irrelevant details are left out and some\n   concepts\
    \ are simplified for the ease of understanding. For reference\n   purposes, always\
    \ use the original documents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       1. An overview of relevant standards ........................\
    \   4\n         1.1. What is X.400 ? ......................................  \
    \ 5\n         1.2. What is an RFC ? .....................................   8\n\
    \         1.3. What is RFC 822 ? ....................................   9\n  \
    \       1.4. What is RFC 1327 ? ...................................  11\n    \
    \   2. Service Elements .........................................  12\n      \
    \ 3. Address mapping ..........................................  14\n        \
    \ 3.1. X.400 addresses ......................................  15\n          \
    \ 3.1.1. Standard Attributes ..............................  15\n           3.1.2.\
    \ Domain Defined Attributes ........................  17\n           3.1.3. X.400\
    \ address notation ...........................  17\n         3.2. RFC 822 addresses\
    \ ....................................  19\n         3.3. RFC 1327 address mapping\
    \ .............................  20\n           3.3.1. Default mapping ..................................\
    \  20\n             3.3.1.1. X.400 -> RFC 822 .............................  20\n\
    \             3.3.1.2. RFC 822 -> X.400 .............................  22\n  \
    \         3.3.2. Exception mapping ................................  23\n    \
    \         3.3.2.1. PersonalName and localpart mapping ...........  25\n      \
    \       3.3.2.2. X.400 domain and domainpart mapping ..........  26\n        \
    \       3.3.2.2.1. X.400 -> RFC 822 .........................  27\n          \
    \     3.3.2.2.2. RFC 822 -> X.400 .........................  28\n         3.4.\
    \ Table co-ordination ..................................  31\n         3.5. Local\
    \ additions ......................................  31\n         3.6. Product\
    \ specific formats .............................  32\n         3.7. Guidelines\
    \ for mapping rule definition ...............  34\n       4. Conclusion ...............................................\
    \  35\n       Appendix A. References ......................................  36\n\
    \       Appendix B. Index  (Only available in the Postscript version)  37\n  \
    \     Appendix C. Abbreviations ...................................  37\n    \
    \   Appendix D. How to access the MHS Co-ordination Server ......  38\n      \
    \ Security Considerations .....................................  39\n       Author's\
    \ Address ............................................  39\n"
- title: 1. An overview of relevant standards
  contents:
  - "1. An overview of relevant standards\n   This chapter describes the history,\
    \ status, future, and contents of\n   the involved standards.\n   There is a major\
    \ difference between mail systems used in the USA and\n   Europe. Mail systems\
    \ originated mainly in the USA, where their\n   explosive growth started as early\
    \ as in the seventies. Different\n   company-specific mail systems were developed\
    \ simultaneously, which,\n   of course, led to a high degree of incompatibility.\
    \ The Advanced\n   Research Projects Agency (ARPA), which had to use machines\
    \ of many\n   different manufacturers, triggered the development of the Internet\n\
    \   and the TCP/IP protocol suite, which was later accepted as a standard\n  \
    \ by the US Department of Defense (DoD). The Internet mail format is\n   defined\
    \ in STD 11, RFC 822 and the protocol used for exchanging mail\n   is known as\
    \ the simple mail transfer protocol (SMTP) [1]. Together\n   with UUCP and the\
    \ BITNET protocol NJE, SMTP has become one of the\n   main de facto mail standards\
    \ in the US.\n   Unfortunately, all these protocols were incompatible, which explains\n\
    \   the need to come to an acceptable global mail standard.  CCITT and\n   ISO\
    \ began working on a norm and their work converged in what is now\n   known as\
    \ the X.400 Series Recommendations. One of the objectives was\n   to define a\
    \ superset of the existing systems, allowing for easier\n   integration later\
    \ on. Some typical positive features of X.400 are the\n   store-and-forward mechanism,\
    \ the hierarchical address space and the\n   possibility of combining different\
    \ types of body parts into one\n   message body.\n   In Europe, the mail system\
    \ boom came later. Since there was not much\n   equipment in place yet, it made\
    \ sense to use X.400 as much as\n   possible right from the beginning. A strong\
    \ X.400 lobby existed,\n   especially in West-Germany (DFN). In the R&D world,\
    \ mostly EAN was\n   used because it was the only affordable X.400 product at\
    \ that time\n   (Source-code licenses were free for academic institutions).\n\
    \   At the moment, the two worlds of X.400 and SMTP are moving closer\n   together.\
    \ For instance, the United States Department of Defense, one\n   of the early\
    \ forces behind the Internet, has decided that future DoD\n   networking should\
    \ be based on ISO standards, implying a migration\n   from SMTP to X.400. As an\
    \ important example of harmonisation in the\n   other direction, X.400 users in\
    \ Europe have a need to communicate\n   with the Internet. Due to the large traffic\
    \ volume between the two\n   nets it is not enough interconnecting them with a\
    \ single\n   international gateway.  The load on such a gateway would be too\n\
    \   heavy. Direct access using local gateways is more feasible.\n   Although the\
    \ expected success of X.400 has been a bit disappointing\n   (mainly because no\
    \ good products were available), many still see the\n   future of e-mail systems\
    \ in the context of this standard.\n   And regardless if in the long run X.400\
    \ will or will not take over\n   the world of e-mail systems, SMTP cannot be neglected\
    \ over the next\n   ten years. Especially the simple installation procedures and\
    \ the high\n   degree of connectivity will contribute to a growing number of RFC\
    \ 822\n   installations in Europe and world-wide in the near future.\n"
- title: 1.1. What is X.400 ?
  contents:
  - "1.1. What is X.400 ?\n   In October 1984, the Plenary Assembly of the CCITT accepted\
    \ a\n   standard to facilitate international message exchange between\n   subscribers\
    \ to computer based store-and-forward message services.\n   This standard is known\
    \ as the CCITT X.400 series recommendations\n   ([16], from now on called X.400(84))\
    \ and happens to be the first\n   CCITT recommendation for a network application.\
    \ It should be noted\n   that X.400(84) is based on work done in the IFIP Working\
    \ Group 6.5,\n   and that ISO at the same time was proceeding towards a compatible\n\
    \   document. However, the standardisation efforts of CCITT and ISO did\n   not\
    \ converge in time (not until the 1988 version), to allow the\n   publication\
    \ of a common text.\n   X.400(84) triggered the development of software implementing\
    \ (parts\n   of) the standard in the laboratories of almost all major computer\n\
    \   vendors and many software houses. Similarly, public carriers in many\n   countries\
    \ started to plan X.400(84) based message systems that would\n   be offered to\
    \ the users as value added services. Early\n   implementations appeared shortly\
    \ after first drafts of the standard\n   were published and a considerable number\
    \ of commercial systems are\n   available nowadays.\n   X.400(84) describes a\
    \ functional model for a Message Handling System\n   (MHS) and associates services\
    \ and protocols. The model illustrated in\n   Figure 1.1. defines the components\
    \ of a distributed messaging system.\n   Users in the MHS environment are provided\
    \ with the capability of\n   sending and receiving messages. Users in the context\
    \ of an MHS may be\n   humans or application processes. The User Agent (UA) is\
    \ a process\n   that makes the services of the MTS available to the user. A UA\
    \ may be\n   implemented as a computer program that provides utilities to create,\n\
    \   send, receive and perhaps archive messages. Each UA, and thus each\n   user,\
    \ is identified by a name (each user has its own UA).\n    -----------------------------------------------------------------\n\
    \    |                user        user   Message Handling Environment|\n    |\
    \                 |            |                                |\n    |     ----------------------------------------------------------|\n\
    \    |     |           |            |    Message Handling System    ||\n    |\
    \     |         ----          ----                             ||\n    |     |\
    \         |UA|          |UA|                             ||\n    |     |     \
    \    ----          ----                             ||\n    |     |          \
    \ |             |                              ||\n    |     |       -------------------------------------------------||\n\
    \    |     |       |   |             |   Message Transfer System   |||\n    |\
    \     | ----  |  -----         -----                          |||\n    |user-|-|UA|--|--|MTA|\
    \         |MTA|                          |||\n    |     | ----  |  -----     \
    \    -----                          |||\n    |     |       |    \\           \
    \  /                            |||\n    |     |       |     \\           /  \
    \                           |||\n    |     |       |      \\         /       \
    \                       |||\n    |     |       |       \\       /            \
    \                   |||\n    |     |       |        \\     /                 \
    \               |||\n    |     | ----  |         -----                       \
    \          |||\n    |user-|-|UA|--|---------|MTA|                            \
    \     |||\n    |     | ----  |         -----                                 |||\n\
    \    |     |       -------------------------------------------------||\n    |\
    \     ----------------------------------------------------------|\n    -----------------------------------------------------------------\n\
    \                    Fig. 1.1. X.400 functional model\n   The Message Transfer\
    \ system (MTS) transfers messages from an\n   originating UA to a recipient UA.\
    \ As implied by the Figure 1.1, data\n   sent from UA to UA may be stored temporarily\
    \ in several intermediate\n   Message Transfer Agents (MTA), i.e., a store-and-\
    \ forward mechanism\n   is being used. An MTA forwards received messages to a\
    \ next MTA or to\n   the recipient UA.\n   X.400(84) divides layer 7 of the OSI\
    \ Reference Model into 2\n   sublayers, the User Agent Layer (UAL) and the Message\
    \ Transfer Layer\n   (MTL) as shown in the Figure 1.2.\n   The MTL is involved\
    \ in the transport of messages from UA to UA, using\n   one or several MTAs as\
    \ intermediaries. By consequence, routing issues\n   are entirely dealt with in\
    \ the MTL. The MTL in fact corresponds to\n   the postal service that forwards\
    \ letters consisting of an envelope\n   and a content. Two protocols, P1 and P3,\
    \ are used between the MTL\n   entities (MTA Entity (MTAE), and Submission and\
    \ Delivery Entity\n   (SDE)) to reliably transport messages. The UAL embodies\
    \  peer UA\n   Entities (UAE), which interpret the content of a message and offer\n\
    \   specific services to the application process.  Depending on the\n   application\
    \ to be supported on top of the MTL, one of several end-\n   to-end protocols\
    \ (Pc) is used between UAEs. For electronic mail,\n   X.400(84) defines the protocol\
    \ P2 as part of the InterPersonal\n   Messaging Service (IPMS). Conceivably other\
    \ UAL protocols may be\n   defined, e.g., a protocol to support the exchange of\
    \ electronic\n   business documents.\n       --------------------------------------------------------------\n\
    \                   -----                          -----\n       UA layer    |UAE|<-----\
    \ P2, Pc ----------->|UAE|\n                   -----                         \
    \ -----\n       --------------------------------------------------------------\n\
    \                   ------          ------         -----\n       MTA layer   |MTAE|<--\
    \ P1 -->|MTAE|<-- P3-->|SDE|\n                   ------          ------      \
    \   -----\n       --------------------------------------------------------------\n\
    \             xxxE = xxx Entity ;   SDE = Submission & Delivery Entity\n     \
    \  --------------------------------------------------------------\n          \
    \                 Fig. 1.2. X.400 Protocols\n   The structure of an InterPersonal\
    \ Message (IPM) can be visualised as\n   in Figure 1.3. (Note that the envelope\
    \ is not a part of the IPM; it\n   is generated by the MTL).\n               \
    \                                             Forwarded\n    Message         \
    \                                        IP-message\n    -                   \
    \  ----------      --- ----------    -\n    |  message-           |envelope| \
    \    /    | PDI    |    |\n    |  content   IPM      ----------    /     ----------\
    \    |\n    |  -         -        ----------   /      ----------    |\n    | \
    \ |         |  IPM-  |heading |  /       |heading |    |\n    |  |         | \
    \ body  ---------- /        ----------    |\n    |  |         |  -     ----------/\
    \         ----------    |\n    |  |         |  |     |bodypart|          |bodypart|\
    \    |\n    |  |         |  |     ----------\\         ----------    |\n    |\
    \  |         |  |     ---------- \\        ----------    |\n    |  |         |\
    \  |     |bodypart|  \\       |bodypart|    |\n    |  |         |  |     ----------\
    \   \\      ----------    |\n    |  |         |  |          .        \\      \
    \             |\n    |  |         |  |          .         \\                 \
    \ |\n    |  |         |  |     ----------      \\   ----------    |\n    |  |\
    \         |  |     |bodypart|       \\  |bodypart|    |\n    -  -         -  -\
    \     ----------        - ----------    -\n                                  \
    \    (PDI = Previous Delivery Info.)\n                    Fig. 1.3. X.400 message\
    \ structure\n   An IPM heading contains information that is specific for an\n\
    \   interpersonal message like 'originator', 'subject', etc. Each\n   bodypart\
    \ can contain one information type, text, voice or as a\n   special case, a forwarded\
    \ message. A forwarded message consists of\n   the original message together with\
    \ Previous Delivery Information\n   (PDI), which is drawn from the original delivery\
    \ envelope.\n   Early experience with X.400(84) showed that the standard had various\n\
    \   shortcomings. Therefore CCITT, in parallel with ISO, corrected and\n   extended\
    \ the specification during its 1984 to 1988 study period and\n   produced a revised\
    \ standard [17], which was accepted at the 1988\n   CCITT Plenary Meeting [10].\
    \  Amongst others, X.400(88) differs from\n   X.400(84) in that it defines a Message\
    \ Store (MS), which can be seen\n   as a kind of database for messages. An MS\
    \ enables the end-user to run\n   a UA locally, e.g., on a PC, whilst the messages\
    \ are stored in the\n   MS, which is co-located with the MTA. The MTA can thus\
    \ always deliver\n   incoming messages to the MS instead of to the UA. The MS\
    \ can even\n   automatically file incoming messages according to certain criteria.\n\
    \   Other enhancements in the 88 version concern security and\n   distribution\
    \ lists.\n"
- title: 1.2. What is an RFC ?
  contents:
  - "1.2. What is an RFC ?\n   The Internet, a loosely-organised international collaboration\
    \ of\n   autonomous, interconnected networks, supports host-to-host\n   communication\
    \ through voluntary adherence to open protocols and\n   procedures defined by\
    \ Internet Standards. There are also many\n   isolated internets, i.e., sets of\
    \ interconnected networks, that are\n   not connected to the Internet but use\
    \ the Internet Standards. The\n   architecture and technical specifications of\
    \ the Internet are the\n   result of numerous research and development activities\
    \ conducted over\n   a period of two decades, performed by the network R&D community,\
    \ by\n   service and equipment vendors, and by government agencies around the\n\
    \   world.\n   In general, an Internet Standard is a specification that is stable\n\
    \   and well-understood, is technically competent, has multiple,\n   independent,\
    \ and interoperable implementations with operational\n   experience, enjoys significant\
    \ public support, and is recognisably\n   useful in some or all parts of the Internet.\n\
    \   The principal set of Internet Standards is commonly known as the\n   \"TCP/IP\
    \ protocol suite\". As the Internet evolves, new protocols and\n   services, in\
    \ particular those for Open Systems Interconnection (OSI),\n   have been and will\
    \ be deployed in traditional TCP/IP environments,\n   leading to an Internet that\
    \ supports multiple protocol suites.\n   The following organisations are involved\
    \ in setting Internet\n   standards.\n   Internet standardisation is an organised\
    \ activity of the Internet\n   Society (ISOC). The ISOC is a professional society\
    \ that is concerned\n   with the growth and evolution of the world-wide Internet,\
    \ with the\n   way in which the Internet is and can be used, and with the social,\n\
    \   political, and technical issues that arise as a result.\n   The Internet Engineering\
    \ Task Force (IETF) is the primary body\n   developing new Internet Standard specifications.\
    \ The IETF is composed\n   of many Working Groups, which are organised into areas,\
    \ each of which\n   is co-ordinated by one or more Area Directors.\n   The Internet\
    \ Engineering Steering Group (IESG) is responsible for\n   technical management\
    \ of IETF activities and the approval of Internet\n   standards specifications,\
    \ using well-defined rules. The IESG is\n   composed of the IETF Area Directors,\
    \ some at-large members, and the\n   chairperson of the IESG/IETF.\n   The Internet\
    \ Architecture Board (IAB) has been chartered by the\n   Internet Society Board\
    \ of Trustees to provide quality control and\n   process appeals for the standards\
    \ process, as well as external\n   technical liaison, organizational oversight,\
    \ and long-term\n   architectural planning and research.\n   Any individual or\
    \ group (e.g., an IETF or RARE working group) can\n   submit a document as a so-called\
    \ Internet Draft. After the document\n   is proven stable, the IESG may turn the\
    \ Internet-Draft into a\n   \"Requests For Comments\" (RFC). RFCs cover a wide\
    \ range of topics,\n   from early discussion of new research concepts to status\
    \ memos about\n   the Internet. All Internet Standards (STDs) are published as\
    \ RFCs,\n   but not all RFCs specify standards. Another sub-series of the RFCs\n\
    \   are the RARE Technical Reports (RTRs).\n   As an example, this tutorial also\
    \ started out as an Internet-Draft.\n   After almost one year of discussions and\
    \ revisions it was approved by\n   the IESG as an Informational RFC.\n   Once\
    \ a document is assigned an RFC number and published, that RFC is\n   never revised\
    \ or re-issued with the same number. Instead, a revision\n   will lead to the\
    \ document being re-issued with a higher number\n   indicating that an older one\
    \ is obsoleted.\n"
- title: 1.3. What is RFC 822 ?
  contents:
  - "1.3. What is RFC 822 ?\n   STD 11, RFC 822 defines a standard for the format\
    \ of Internet text\n   messages. Messages consist of lines of text. No special\
    \ provisions\n   are made for encoding drawings, facsimile, speech, or structured\n\
    \   text. No significant consideration has been given to questions of\n   data\
    \ compression or to transmission and storage efficiency, and the\n   standard\
    \ tends to be free with the number of bits consumed. For\n   example, field names\
    \ are specified as free text, rather than special\n   terse codes.\n   A general\
    \ \"memo\" framework is used. That is, a message consists of\n   some information\
    \ in a rigid format (the 'headers'), followed by the\n   main part of the message\
    \ (the 'body'), with a format that is not\n   specified in STD 11, RFC 822. It\
    \ does define the syntax of several\n   fields of the headers section; some of\
    \ these fields must be included\n   in all messages.\n   STD 11, RFC 822 is used\
    \ in conjunction with a number of different\n   message transfer protocol environments\
    \ (822-MTSs).\n        - SMTP Networks: On the Internet and other TCP/IP networks,\n\
    \          STD 11, RFC 822 is used in conjunction with two other\n          standards:\
    \ STD 10, RFC 821, also known as Simple Mail\n          Transfer Protocol (SMTP)\
    \ [1], and RFCs 1034 and 1035\n          which specify the Domain Name System\
    \ [3].\n        - UUCP Networks: UUCP is the UNIX to UNIX CoPy protocol, which\n\
    \          is usually used over dialup telephone networks to provide a\n     \
    \     simple message transfer mechanism.\n        - BITNET: Some parts of Bitnet\
    \ and related networks use STD\n          11, RFC 822 related protocols, with\
    \ EBCDIC encoding.\n        - JNT Mail Networks: A number of X.25 networks, particularly\n\
    \          those associated with the UK Academic Community, use the JNT\n    \
    \      (Joint Network Team) Mail Protocol, also known as Greybook.\n   STD 11,\
    \ RFC 822 is based on the assumption that there is an\n   underlying service,\
    \ which in RFC 1327 is called the 822-MTS service.\n   The 822-MTS service provides\
    \ three basic functions:\n        1. Identification of a list of recipients.\n\
    \        2. Identification of an error return address.\n        3. Transfer of\
    \ an RFC 822 message.\n   It is possible to achieve 2) within the RFC 822 header.\
    \  Some 822-\n   MTS protocols, in particular SMTP, can provide additional\n \
    \  functionality, but as these are neither mandatory in SMTP, nor\n   available\
    \ in other 822-MTS protocols, they are not considered here.\n   Details of aspects\
    \ specific to two 822-MTS protocols are given in\n   Appendices B and C of RFC\
    \ 1327. An RFC 822 message consists of a\n   header, and content which is uninterpreted\
    \ ASCII text. The header is\n   divided into fields, which are the protocol elements.\
    \ Most of these\n   fields are analogous to P2 heading fields, although some are\n\
    \   analogous to MTS Service Elements.\n"
- title: 1.4. What is RFC 1327 ?
  contents:
  - "1.4. What is RFC 1327 ?\n   There is a large community using STD 11, RFC 822\
    \ based protocols for\n   mail services, who will wish to communicate with users\
    \ of the\n   InterPersonal Messaging Service (IPMS) provided by X.400 systems,\
    \ and\n   the other way around. This will also be a requirement in cases where\n\
    \   RFC 822 communities intend to make a transition to use X.400 (or the\n   other\
    \ way around, which also happens), as conversion will be needed\n   to ensure\
    \ a smooth service transition.\n   The basic function of a mail gateway can be\
    \ described as follows:\n   receive a mail from one mail world, translate it into\
    \ the formats of\n   the other mail world and send it out again using the routing\
    \ rules\n   and protocols of that other world.\n   Especially if a message crosses\
    \ more than one gateway, it is\n   important that all gateways have the same understanding\
    \ of how things\n   should be mapped. A simple example of what could go wrong\
    \ otherwise\n   is the following: A sends a message to B through a gateway and\
    \ B's\n   reply to A is being routed through another gateway.\n   If the two gateways\
    \ don't use the same mappings, it can be expected\n   that the From and To addresses\
    \ in the original mail and in the answer\n   don't match, which is, to say the\
    \ least, very confusing for the end-\n   users (consider what happens if automated\
    \ processes communicate via\n   mail). More serious things can happen to addresses\
    \ if a message\n   crosses more than one gateway on its way from the originator\
    \ to the\n   recipient. As a real-life example, consider receiving a message from:\n\
    \      Mary Plork <MMP_+a_ARG_+lMary_Plork+r%MHS+d_A0CD8A2B01F54FDC-\n      A0CB9A2B03F53FDC%ARG_Incorporated@argmail.com>\n\
    \   This is not what you would call user-friendly addressing.... RFC 1327\n  \
    \ describes a set of mappings that will enable a more transparent\n   interworking\
    \ between systems operating X.400 (both 84 and 88) and\n   systems using RFC 822,\
    \ or protocols derived from STD 11, RFC 822.\n   RFC 1327 describes all mappings\
    \ in term of X.400(88). It defines how\n   these mappings should be applied to\
    \ X.400(84) systems in its Appendix\n   G.\n   Some words about the history of\
    \ RFC 1327: It started out in June\n   1986, when RFC 987 defined for X.400(84)\
    \ what RFC 1327 defines for\n   X.400(84 and 88). RFC 1026 specified a number\
    \ of additions and\n   corrections to RFC 987. In December 1989, RFC 1138, which\
    \ had a very\n   short lifetime, was the first one to deal with X.400(88). It\
    \ was\n   obsoleted by RFC 1148 in March 1990. Finally, in May 1992, RFC 1327\n\
    \   obsoleted all of its ancestors.\n"
- title: 2. Service Elements
  contents:
  - "2. Service Elements\n   Both RFC 822 and X.400 messages consist of certain service\
    \ elements\n   (such as 'originator' and 'subject'). As long as a message stays\n\
    \   within its own world, the behaviour of such service elements is well\n   defined.\
    \ An important goal for a gateway is to maintain the highest\n   possible service\
    \ level when a message crosses the boundary between\n   the two mail worlds.\n\
    \   When a user originates a message, a number of services are available.\n  \
    \ RFC 1327 describes, for each service elements, to what extent it is\n   supported\
    \ for a recipient accessed through a gateway.  There are\n   three levels of support:\n\
    \        - Supported: Some of the mappings are quite straight-forward,\n     \
    \     such as '822.Subject:' <-> 'IPMS.Subject'.\n        - Not supported: There\
    \ may be a complete mismatch: certain\n          service elements exist only in\
    \ one of the two worlds (e.g.,\n          interpersonal notifications).\n    \
    \    - Partially supported: When similar service elements exist in\n         \
    \ both worlds, but with slightly different interpretations,\n          some tricks\
    \ may be needed to provide the service over the\n          gateway border.\n \
    \  Apart from mapping between the service elements, a gateway must also\n   map\
    \ the types and values assigned to these service elements.  Again,\n   this may\
    \ in certain cases be very simple, e.g., 'IA5 -> ASCII'. The\n   most complicated\
    \ example is mapping address spaces. The problem is\n   that address spaces are\
    \ not something static that can be defined\n   within RFC 1327. Address spaces\
    \ change continuously, and they are\n   defined by certain addressing authorities,\
    \ which are not always\n   parallel in the RFC 822 and the X.400 world. A valid\
    \ mapping between\n   two addresses assumes however that there is 'administrative\n\
    \   equivalence' between the two domains in which the addresses exist\n   (see\
    \ also [13]).\n   The following basic mappings are defined in RFC 1327. When going\
    \ from\n   RFC 822 to X.400, an RFC 822 message and the associated 822- MTS\n\
    \   information is always mapped into an IPM (MTA, MTS, and IPMS\n   Services).\
    \ Going from X.400 to RFC 822, an RFC 822 message and the\n   associated 822-MTS\
    \ information may be derived from:\n        - A Report (MTA, and MTS Services)\n\
    \        - An InterPersonal Notification (IPN) (MTA, MTS, and IPMS\n         \
    \ services)\n        - An InterPersonal Message (IPM) (MTA, MTS, and IPMS services)\n\
    \   Probes (MTA Service) have no equivalent in STD 10, RFC 821 or STD 11,\n  \
    \ RFC 822 and are thus handled by the gateway. The gateway's Probe\n   confirmation\
    \ should be interpreted as if the gateway were the final\n   MTA to which the\
    \ Probe was sent. Optionally, if the gateway uses RFC\n   821 as an 822-MTS, it\
    \ may use the results of the 'VRFY' command to\n   test whether it would be able\
    \ to deliver (or forward) mail to the\n   mailbox under probe.\n   MTS Messages\
    \ containing Content Types other than those defined by the\n   IPMS are not mapped\
    \ by the gateway, and should be rejected at the\n   gateway.\n   Some basic examples\
    \ of mappings between service elements are listed\n   below.\n    Service elements:\n\
    \         RFC 822         X.400\n         ------------------------------------------------\n\
    \         Reply-To:       IPMS.Heading.reply-recipients\n         Subject:   \
    \     IPMS.Heading.subject\n         In-Reply-To:    IPMS.Heading.replied-to-ipm\n\
    \         References:     IPMS.Heading.related-IPMs\n         To:            \
    \ IPMS.Heading.primary-recipients\n         Cc:             IPMS.Heading.copy-recipients\n\
    \    Service element types:\n         RFC 822         X.400\n         ------------------------------------------------\n\
    \         ASCII           PrintableString\n         Boolean         Boolean\n\
    \    Service element values:\n         RFC 822         X.400\n         ------------------------------------------------\n\
    \         oh_dear         oh(u)dear\n         False           00000000\n   There\
    \ are some mappings between service elements that are rather\n   tricky and important\
    \ enough to mention in this tutorial. These are\n   the mappings of origination-related\
    \ headers and some envelope fields:\n    RFC 822 -> X.400:\n        - If Sender:\
    \ is present, Sender: is mapped to\n          IPMS.Heading.originator, and From:\
    \ is mapped to\n          IPMS.Heading.authorizing-users. If not, From: is mapped\
    \ to\n          IPMS.Heading.originator.\n    X.400 -> RFC 822\n        - If IPMS.Heading.authorizing-users\
    \ is present,\n          IPMS.Heading.originator is mapped to Sender:, and\n \
    \         IPMS.Heading.authorizing-users is mapped to From: . If not,\n      \
    \    IPMS.Heading.originator is mapped to From:.\n    Envelope attributes\n  \
    \      - RFC 1327 doesn't define how to map the MTS.OriginatorName and\n     \
    \     the MTS.RecipientName (often referred to as the P1.originator\n        \
    \  and P1.recipient), since this depends on which underlying 822-\n          MTS\
    \ is used. In the very common case that RFC 821 (SMTP) is\n          used for\
    \ this purpose, the mapping is normally as follows:\n            MTS.Originator-name\
    \ <->   MAIL FROM:\n            MTS.Recipient-name  <->   RCPT TO:\n   For more\
    \ details, refer to RFC 1327, chapters 2.2 and 2.3.\n"
- title: 3. Address mapping
  contents:
  - "3. Address mapping\n   As address mapping is often considered the most complicated\
    \ part of\n   mapping between service element values, this subject is given a\n\
    \   separate chapter in this tutorial.\n   Both RFC 822 and X.400 have their own\
    \ specific address formats. RFC\n   822 addresses are text strings (e.g., \"plork@tlec.nl\"\
    ), whereas X.400\n   addresses are binary encoded sets of attributes with values.\
    \ Such\n   binary addresses can be made readable for a human user by a number\
    \ of\n   notations; for instance:\n        C=zz\n        ADMD=ade\n        PRMD=fhbo\n\
    \        O=a bank\n        S=plork\n        G=mary\n   The rest of this chapter\
    \ deals with addressing issues and mappings\n   between the two address forms\
    \ in more detail.\n"
- title: 3.1. X.400 addresses
  contents:
  - "3.1. X.400 addresses\n   As already stated above, an X.400 address is modelled\
    \ as a set of\n   attributes. Some of these attributes are mandatory, others are\n\
    \   optional. Each attribute has a type and a value, e.g., the Surname\n   attribute\
    \ has type IA5text, and an instance of this attribute could\n   have the value\
    \ 'Kille'. Attributes are divided into Standard\n   Attributes (SAs) and Domain\
    \ Defined Attributes (DDAs).\n   X.400 defines four basic forms of addresses ([17],\
    \ 18.5), of which\n   the 'Mnemonic O/R Address' is the form that is most used,\
    \ and is the\n   only form that is dealt with in this tutorial. This is roughly\
    \ the\n   same address format as what in the 84 version was known as 'O/R\n  \
    \ names: form 1, variant 1' ([16] 3.3.2).\n"
- title: 3.1.1. Standard Attributes
  contents:
  - "3.1.1. Standard Attributes\n   Standard Attributes (SAs) are attributes that\
    \ all X.400 installations\n   are supposed to 'understand' (i.e., use for routing),\
    \ for example:\n   'country name', 'given name' or 'organizational unit'.  The\
    \ most\n   commonly used SAs in X.400(84) are:\n        surName (S)\n        givenName\
    \ (G)\n        initials (I*) (Zero or more)\n        generationQualifier (GQ)\n\
    \        OrganizationalUnits (OU1 OU2 OU3 OU4)\n        OrganizationName (O)\n\
    \        PrivateDomainName (PRMD)\n        AdministrationDomainName (ADMD)\n \
    \       CountryName (C)\n   The combination of S, G, I* and GQ is often referred\
    \ to as the\n   PersonalName (PN).\n   Although there is no hierarchy (of addressing\
    \ authorities) defined by\n   the standards, the following hierarchy is considered\
    \ natural:\n        PersonalName < OU4 < OU3 < OU2 < OU1 < O < P < A < C\n   In\
    \ addition to the SAs listed above, X.400(88) defines some extra\n   attributes,\
    \ the most important of which is\n        Common Name (CN)\n   CN can be used\
    \ instead of or even together with PN. The problem in\n   X.400(84) was that PN\
    \ (S G I* GQ) was well suited to represent\n   persons, but not roles and abstract\
    \ objects, such as distribution\n   lists. Even though postmaster clearly is a\
    \ role, not someone's real\n   surname, it is quite usual in X.400(84) to address\
    \ a postmaster with\n   S=postmaster. In X.400(88), the same postmaster would\
    \ be addressed\n   with CN=postmaster .\n   The attributes C and ADMD are mandatory\
    \ (i.e., they must be present),\n   and may not be empty. At least one of the\
    \ attributes PRMD, O, OU, PN\n   and CN must be present.\n   PRMD and ADMD are\
    \ often felt to be routing attributes that don't\n   really belong in addresses.\
    \ As an example of how such address\n   attributes can be used for the purpose\
    \ of routing, consider two\n   special values for ADMD:\n        - ADMD=0; (zero)\
    \ should be interpreted as 'the PRMD in this\n          address is not connected\
    \ to any ADMD'\n        - ADMD= ; (single SPACE) should be interpreted as 'the\
    \ PRMD in\n          this address is reachable via any ADMD in this country'.\
    \ It\n          is expected that ISO will express this 'any' value by means\n\
    \          of a missing ADMD attribute in future versions of MOTIS.\n        \
    \  This representation can uniquely identify the meaning 'any',\n          as\
    \ a missing or empty ADMD field as such is not allowed.\n   Addresses are defined\
    \ in X.400 using the Abstract Syntax Notation One\n   (ASN.1). X.409 defines how\
    \ definitions in ASN.1 should be encoded\n   into binary format. Note that the\
    \ meaning, and thus the ASN.1\n   encoding, of a missing attribute is not the\
    \ same as that of an empty\n   attribute. In addressing, this difference is often\
    \ represented as\n   follows:\n        - PRMD=; means that this attribute is present\
    \ in the address,\n          but its value is empty. Since this is not very useful,\
    \ it's\n          hardly ever used. The only examples the author knows of\n  \
    \        were caused by mail managers who should have had this\n          tutorial\
    \ before they started defining their addresses :-)\n        - PRMD=@; means that\
    \ this attribute is not present in the\n          address. {NB. This is only necessary\
    \ if an address notation\n          (see 3.1.3) requires that every single attribute\
    \ in the\n          hierarchy is somehow listed. Otherwise, a missing attribute\n\
    \          can of course be represented by simply not mentioning it.\n       \
    \   This means that this syntax is mostly used in mapping rules,\n          not\
    \ by end users.}\n   Addresses that only contain SAs are often referred to as\
    \ Standard\n   Attribute Addresses (SAAs).\n"
- title: 3.1.2. Domain Defined Attributes
  contents:
  - "3.1.2. Domain Defined Attributes\n   Domain Defined Attributes (DDAs) can be\
    \ used in addition to Standard\n   Attributes. An instance of a DDA consists of\
    \ a type and a value. DDAs\n   are meant to have a meaning only within a certain\
    \ context (originally\n   this was supposed to be the context of a certain management\
    \ domain,\n   hence the name DDA), such as a company context.\n   As an example,\
    \ a company might want to define a DDA for describing\n   internal telephone numbers:\
    \ DDA type=phone value=9571.\n   A bit tricky is the use of DDAs to encode service\
    \ element types or\n   values that are only available on one side of a service\
    \ gateway.  The\n   most important examples of such usage are defined in:\n  \
    \     RFC 1327 (e.g., DDA type=RFC-822 value=u(u)ser(a)isode.com)\n       RFC\
    \ 1328 (e.g., DDA type=CommonName value=mhs-discussion-list)\n   Addresses that\
    \ contain both SAs and DDAs are often referred to as DDA\n   addresses.\n"
- title: 3.1.3. X.400 address notation
  contents:
  - "3.1.3. X.400 address notation\n   X.400 only prescribes the binary encoding of\
    \ addresses, it doesn't\n   standardise how such addresses should be written on\
    \ paper or what\n   they should look like in a user interface on a computer screen.\n\
    \   There exist a number of recommendations for X.400 address\n   representation\
    \ though.\n  - JTC proposed an annex to CCITT Rec. F.401 and ISO/IEC 10021-2,\n\
    \    called 'Representation of O/R addresses for human usage'. According\n   \
    \ to this proposal, an X.400 address would look as follows:\n    G=jo; S=plork;\
    \ O=a bank; OU1=owe; OU2=you; P=fhbo; A=ade; C=zz\n      Note that in this format,\
    \ the order of O and the OUs is exactly\n      the opposite of what one would\
    \ expect intuitively (the attribute\n      hierarchy is increasing from left to\
    \ right, except for the O and\n      OUs, where it's right to left. The reasoning\
    \ behind this is that\n      this sequence is following the example of a postal\
    \ address). This\n      proposal has been added (as a recommendation) to the 1992\
    \ version\n      of the standards.\n  - Following what was originally used in\
    \ the DFN-EAN software, most\n    EAN versions today use an address representation\
    \ similar to the JTC\n    proposal, with a few differences:\n            - natural\
    \ ordering for O and OUs\n            - no numbering of OUs.\n            - allows\
    \ writing ADMD and PRMD instead of A and P\n    The address in the example above\
    \ could, in EAN, be represented as:\n    G=jo; S=plork; OU=you; OU=owe; O=a bank;\
    \ PRMD=fhbo; ADMD=ade; C=zz\n    This DFN-EAN format is still often referred to\
    \ as _the_ 'readable\n    format'.\n  - The RARE Working Group on Mail and Messaging,\
    \ WG-MSG, has made a\n    recommendation that is very similar to the DFN-EAN format,\
    \ but with\n    the hierarchy reversed. Further, ADMD and PRMD are used instead\
    \ of\n    A and P. This results in the address above being represented as:\n \
    \   C=zz; ADMD=ade; PRMD=fhbo; O=a bank; OU=owe; OU=you; S=plork; G=jo\n    This\
    \ format is recognised by most versions of the EAN software. In\n    the R&D community,\
    \ this is one of the most popular address\n    representations for business cards,\
    \ letter heads, etc. It is also\n    the format that will be used for the examples\
    \ in this tutorial.\n    (NB. The syntax used here for describing DDAs is as follows:\n\
    \    DD.'type'='value', e.g., DD.phone=9571)\n  - RFC 1327 defines a slash separated\
    \ address representation:\n    /G=jo/S=plork/OU=you/OU=owe/O=a bank/P=fhbo/A=ade/C=zz/\n\
    \    Not only is this format used by the PP software, it is also\n    widespread\
    \ for business cards and letter heads in the R&D\n    community.\n  - RFC 1327\
    \ finally defines yet another format for X.400 _domains_\n    (not for human users):\n\
    \    OU$you.OU$owe.O$a bank.P$fhbo.A$ade.C$zz\n    The main advantage of this\
    \ format is that it is better machine-\n    parseble than the others, which also\
    \ immediately implies its main\n    disadvantage: it is barely readable for humans.\
    \ Every attribute\n    within the hierarchy should be listed, thus a missing attribute\n\
    \    must be represented by the '@' sign\n    (e.g., $a bank.P$@.A$ade.C$zz).\n\
    \  - Paul-Andre Pays (INRIA) has proposed a format that combines the\n    readability\
    \ of the JTC format with the parsebility of the RFC 1327\n    domain format. Although\
    \ a number of operational tools within the GO-\n    MHS community are already\
    \ based on (variants of) this proposal, its\n    future is still uncertain.\n"
- title: 3.2. RFC 822 addresses
  contents:
  - "3.2. RFC 822 addresses\n   An RFC 822 address is an ASCII string of the following\
    \ form:\n        localpart@domainpart\n    \"domainpart\" is sub-divided into\n\
    \    domainpart = sdom(n).sdom(n-1)....sdom(2).sdom(1).dom\n    \"sdom\" stands\
    \ for \"subdomain\", \"dom\" stands for \"top-level-domain\".\n    \"localpart\"\
    \ ;is normally a login name, and thus typically is a\n    surname or an abbreviation\
    \ for this. It can also designate a local\n    distribution list.\n    The hierarchy\
    \ (of addressing authorities) in an RFC 822 address is\n    as follows:\n    \
    \    localpart < sdom(n) < sdom(n-1) <...< dom\n    Some virtual real-life examples:\n\
    \        joemp@tlec.nl\n        tsjaka.kahn@walhalla.diku.dk\n        a13_vk@cs.rochester.edu\n\
    \    In the above examples, 'nl', 'dk', and 'edu' are valid,\n    registered,\
    \ top level domains. Note that some networks that have\n    their own addressing\
    \ schemes are also reachable by way of 'RFC\n    822-like' addressing. Consider\
    \ the following addresses:\n        oops!user          (a UUCP address)\n    \
    \    V13ENZACC@CZKETH5A (a BITNET address)\n    These addresses can be expressed\
    \ in RFC 822 format:\n        user@oops.uucp\n        V13ENZACC@CZKETH5A.BITNET\n\
    \   Note that the domains '.uucp' and '.bitnet' have no registered\n   Internet\
    \ routing.  Such addresses must always be routed to a gateway\n   (how this is\
    \ done is outside the scope of this tutorial).\n   As for mapping such addresses\
    \ to X.400, there is no direct mapping\n   defined between X.400 on the one hand\
    \ and UUCP and BITNET on the\n   other, so they are normally mapped to RFC 822\
    \ style first, and then\n   to X.400 if needed.\n"
- title: 3.3. RFC 1327 address mapping
  contents:
  - "3.3. RFC 1327 address mapping\n   Despite the difference in address formats,\
    \ the address spaces defined\n   by RFC 822 and X.400 are quite similar. The most\
    \ important parallels\n   are:\n        - both address spaces are hierarchical\n\
    \        - top level domains and country codes are often the same\n        - localparts\
    \ and surnames are often the same\n   This similarity can of course be exploited\
    \ in address mapping\n   algorithms. This is also done in RFC 1327 (NB only in\
    \ the exception\n   mapping algorithm. See chapter 3.3.2).\n   Note that the actual\
    \ mapping algorithm is much more complicated than\n   shown below. For details,\
    \ see RFC 1327, chapter 4.\n"
- title: 3.3.1. Default mapping
  contents:
  - "3.3.1. Default mapping\n   The default RFC 1327 address mapping can be visualised\
    \ as a function\n   with input and output parameters:\n          address information\
    \ of the gateway performing the mapping\n                                    \
    \  |\n                                      v\n                             +-----------------+\n\
    \        RFC 822 address <--->| address mapping | <---> X.400 address\n      \
    \                       +-----------------+\n   I.e., to map an address from X.400\
    \ to RFC 822 or vice versa, the only\n   extra input needed is the address information\
    \ of the local gateway.\n"
- title: 3.3.1.1. X.400 -> RFC 822
  contents:
  - "3.3.1.1. X.400 -> RFC 822\n   There are two kinds of default address mapping\
    \ from X.400 to RFC 822:\n   one to map a real X.400 address to RFC 822, and another\
    \ to decode an\n   RFC 822 address that was mapped to X.400 (i.e., to reverse\
    \ the\n   default RFC 822 -> X.400 mapping).\n   To map a real X.400 address to\
    \ RFC 822, the slash separated notation\n   of the X.400 address (see chapter\
    \ 3.1.) is mapped to 'localpart', and\n   the local RFC 822 domain of the gateway\
    \ that performs the mapping is\n   used as the domain part. As an example, the\
    \ gateway 'gw.switch.ch'\n   would perform the following mappings:\n        C=zz;\
    \ ADMD=ade; PRMD=fhbo; O=tlec; S=plork; ->\n        /C=zz/ADMD=ade/PRMD=fhbo/O=tlec/S=plork/@gw.switch.ch\n\
    \        C=zz; ADMD=ade; PRMD=fhbo; O=a bank; S=plork->\n        \"/C=zz/ADMD=ade/PRMD=fhbo/O=a\
    \ bank/S=plork/\"@gw.switch.ch\n   The quotes in the second example are mandatory\
    \ if the X.400 address\n   contains spaces, otherwise the syntax rules for the\
    \ RFC 822 localpart\n   would be violated.\n   This default mapping algorithm\
    \ is generally referred to as 'left-\n   hand-side encoding'.\n   To reverse the\
    \ default RFC 822 -> X.400 mapping (see chapter\n   3.3.1.2): if the X.400 address\
    \ contains a DDA of the type RFC-822,\n   the SAs can be discarded, and the value\
    \ of this DDA is the desired\n   RFC 822 address (NB. Some characters in the DDA\
    \ value must be decoded\n   first. See chapter 3.3.1.2.). For example, the gateway\n\
    \        DD.RFC-822=bush(a)dole.us; C=nl; ADMD=tlec; PRMD=GW\n        ->\n   \
    \     bush@dole.us\n"
- title: 3.3.1.2. RFC 822 -> X.400
  contents:
  - "3.3.1.2. RFC 822 -> X.400\n   There are also two kinds of default address mapping\
    \ from RFC 822 to\n   X.400: one to map a real RFC 822 address to X.400, and another\
    \ to\n   decode an X.400 address that was mapped to RFC 822 (i.e., to reverse\n\
    \   the default X.400 -> RFC 822 mapping).\n   To map a real RFC 822 address to\
    \ X.400, the RFC 822 address is\n   encoded in a DDA of type RFC-822 , and the\
    \ SAs of the local gateway\n   performing the mapping are added to form the complete\
    \ X.400 address.\n   This mapping is generally referred to as 'DDA mapping'. As\
    \ an\n   example, the gateway 'C=nl; ADMD=tlec; PRMD=GW' would perform the\n \
    \  following mapping:\n        bush@dole.us  ->\n        DD.RFC-822=bush(a)dole.us;\
    \ C=nl; ADMD=tlec; PRMD=GW\n   As for the encoding/decoding of RFC 822 addresses\
    \ in DDAs, it is\n   noted that RFC 822 addresses may contain characters (@ !\
    \ % etc.) that\n   cannot directly be represented in a DDA. DDAs are of the restricted\n\
    \   character set type 'PrintableString', which is a subset of IA5\n   (=ASCII).\
    \ Characters not in this set need a special encoding. Some\n   examples (For details,\
    \ refer to RFC 1327, chapter 3.4.):\n        100%name@address   -> DD.RFC-822;=100(p)name(a)address\n\
    \        u_ser!name@address -> DD.RFC-822;=u(u)ser(b)name(a)address\n   To decode\
    \ an X.400 address that was mapped to RFC 822: if the RFC 822\n   address has\
    \ a slash separated representation of a complete X.400\n   mnemonic O/R address\
    \ in its localpart, that address is the result of\n   the mapping. As an example,\
    \ the gateway 'gw.switch.ch' would perform\n   the following mapping:\n      \
    \  /C=zz/ADMD=ade/PRMD=fhbo/O=tlec/S=plork/G=mary/@gw.switch.ch\n        ->\n\
    \        C=zz; ADMD=ade; PRMD=fhbo; O=tlec; S=plork; G=mary\n"
- title: 3.3.2. Exception mapping according to mapping tables
  contents:
  - "3.3.2. Exception mapping according to mapping tables\n   Chapter 3.3.1. showed\
    \ that it is theoretically possible to use RFC\n   1327 with default mapping only.\
    \ Although this provides a very simple,\n   straightforward way to map addresses,\
    \ there are some very good\n   reasons not to use RFC 1327 this way:\n       \
    \ - RFC 822 users are used to writing simple addresses of the\n          form\
    \ 'localpart@domainpart'. They often consider X.400\n          addresses, and\
    \ thus also the left-hand-side encoded\n          equivalents, as unnecessarily\
    \ long and complicated. They\n          would rather be able to address an X.400\
    \ user as if she had a\n          'normal' RFC 822 address. For example, take\
    \ the mapping\n            C=zz; ADMD=ade; PRMD=fhbo; O=tlec; S=plork;     ->\n\
    \            /C=zz/ADMD=ade/PRMD=fhbo/O=tlec/S=plork/@gw.switch.ch\n         \
    \ from chapter 3.3.1.1. RFC 822 users would find it much more\n          'natural'\
    \ if this address could be expressed in RFC 822 as:\n            plork@tlec.fhbo.ade.nl\n\
    \        - X.400 users are used to using X.400 addresses with SAs only.\n    \
    \      They often consider DDA addresses as complicated, especially\n        \
    \  if they have to encode the special characters, @ % ! etc,\n          manually.\
    \ They would rather be able to address an RFC 822\n          user as if he had\
    \ a 'normal' X.400 address. For example, take\n          the mapping\n       \
    \     bush@dole.us\n            ->\n            DD.RFC-822=bush(a)dole.us;\n \
    \           C=nl; ADMD= ; PRMD=tlec; O=gateway\n          from chapter 3.3.1.2.\
    \ X.400 users would find it much more\n          'natural' if this address could\
    \ be expressed in X.400 as:\n            C=us; ADMD=dole; S=bush\n        - Many\
    \ organisations are using both RFC 822 and X.400\n          internally, and still\
    \ want all their users to have a simple,\n          unique address in both mail\
    \ worlds. Note that in the default\n          mapping, the mapped form of an address\
    \ completely depends on\n          which gateway  performed the mapping. This\
    \ also results in a\n          complication of a more technical nature:\n    \
    \    - The tricky 'third party problem'. This problem need not\n          necessarily\
    \ be understood to read the rest of this chapter.\n          If it looks too complicated,\
    \ please feel free to skip it\n          until you are more familiar with the\
    \ basics.\n          The third party problem is a routing problem caused by\n\
    \          mapping. As an example for DDA mappings (the example holds\n      \
    \    just as well for left-hand-side encoding), consider the\n          following\
    \ situation (see Fig. 3.1.): RFC 822 user X in\n          country A sends a message\
    \ to two recipients: RFC 822 user Y,\n          and X.400 user Z, both in country\
    \ B:\n            From: X@A\n            To:   Y@B ,\n                  /C=B/.../S=Z/@GW.A\n\
    \          Since the gateway in country A maps all addresses in the\n        \
    \  message, Z will see both X's and Y's address as DDA-encoded\n          RFC\
    \ 822 addresses, with the SAs of the gateway in country A:\n            From:\
    \ DD.RFC-822=X(a)A; C=A;....;O=GW\n            To:   DD.RFC-822=Y(a)B; C=A;....;O=GW\
    \ ,\n                  C=B;...;S=Z\n            |       ------------         ---------\n\
    \            |       |X: RFC 822|<------->|gateway|\n            |       ------------\
    \         ---------\n            | A           |                  ^\n        \
    \    \\             |                  |\n             \\---------------------------------------------\n\
    \                          |                  |\n             /---------------------------------------------\n\
    \            /             |                  |\n            | B           | \
    \                 v\n            |             |              -----------\n  \
    \          |             |              |Z: X.400 |\n            |           \
    \  |              -----------\n            |             |                  .\n\
    \            |             |                  .\n            |             | \
    \                 .\n            |             |                  .\n        \
    \    |             |                  .\n            |             v         \
    \         v\n            |        ------------         ---------\n           \
    \ |        |Y: RFC 822|<........|gateway|\n            |        ------------ \
    \        ---------\n                    Fig. 3.1 The third party problem\n   \
    \      Now if Z wants to 'group reply' to both X and Y, his reply to Y\n     \
    \    will be routed over the gateway in country A, even though Y is\n        \
    \ located in the same country:\n                     From: C=B;...;S=Z\n     \
    \                To:   DD.RFC-822=Y(a)B; C=A;....;O=GW ,\n                   \
    \        DD.RFC-822=X(a)A; C=A;....;O=GW\n         The best way to travel for\
    \ a message from Z to Y would of\n         course have been over the gateway in\
    \ country B:\n                     From: C=B;...;S=Z\n                     To:\
    \   DD.RFC-822=Y(a)B; C=B;....;O=GW ,\n                           DD.RFC-822=X(a)A;\
    \ C=A;....;O=GW\n         The third party problem is caused by the fact that routing\n\
    \         information is mapped into addresses.\n         Ideally, the third party\
    \ problem shouldn't exist. After all,\n         address mapping affects addresses,\
    \ and an address is not a\n         route.... The reality is different however.\
    \ For instance, very\n         few X.400 products are capable to route messages\
    \ on the\n         contents of a DDA (actually, only RFC 1327 gateways will be\n\
    \         able to interpret this type of DDA, and who says that the reply\n  \
    \       will pass a local gateway on its route back?).  Similar\n         limitations\
    \ hold for the other direction: an RFC 822 based\n         mailer is not even\
    \ allowed (see [5]) to make routing decisions\n         of the content of a left-hand-side\
    \ encoded X.400 address if the\n         domain part is not its own.  So in practice,\
    \ addressing and\n         (thus also mapping) will very well affect routing.\n\
    \   To make mapping between addresses more user friendly, and to avoid\n   the\
    \ problems shown above, RFC 1327 allows for overruling the default\n   left-hand-side\
    \ encoding and DDA mapping algorithms. This is done by\n   specifying associations\
    \ (mapping rules) between certain domainparts\n   and X.400 domains. An X.400\
    \ domain (for our purposes; CCITT has a\n   narrower definition...) consists of\
    \ the domain-related SAs of a\n   Mnemonic O/R address (i.e., all SAs except PN\
    \ and CN). The idea is to\n   use the similarities between both address spaces,\
    \ and directly map\n   similar address parts onto each other. If, for the domain\
    \ in the\n   address to be mapped, an explicit mapping rule can be found, the\n\
    \   mapping is performed between:\n        localpart     <->   PersonalName\n\
    \        domainpart    <->   X.400 domain\n   The address information of the gateway\
    \ is only used as an input\n   parameter if no mapping rule can be found, i.e.,\
    \ if the address\n   mapping must fall back to its default algorithm.\n   The\
    \ complete mapping function can thus be visualised as follows:\n          address\
    \ information of the gateway performing the mapping\n                        \
    \              |\n                                      v\n                  \
    \           +-----------------+\n        RFC 822 address <--->| address mapping\
    \ | <---> X.400 address\n                             +-----------------+\n  \
    \                                    ^\n                                     \
    \ |\n                    domain associations (mapping rules)\n"
- title: 3.3.2.1. PersonalName and localpart mapping
  contents:
  - "3.3.2.1. PersonalName and localpart mapping\n   Since the mapping between these\
    \ address parts is independent of the\n   mapping rules that are used, and because\
    \ it follows a simple, two-\n   way algorithmic approach, this subject is discussed\
    \ in a separate\n   sub-chapter first.\n   The X.400 PersonalName consists of\
    \ givenName, initials, and surName.\n   RFC 1327 assumes that generationQualifier\
    \ is not used.\n   To map a localpart to an X.400 PN, the localpart is scanned\
    \ for dots,\n   which are considered delimiters between the components of PN,\
    \ and\n   also between single initials. In order not to put too much detail in\n\
    \   this tutorial, only a few examples are shown here. For the detailed\n   algorithm,\
    \ see RFC 1327, chapter 4.2.1.\n        Marshall.Rose             <->   G=Marshall;S=Rose\n\
    \        M.T.Rose                  <->   I=MT;S=Rose\n        Marshall.M.T.Rose\
    \         <->   G=Marshall;I=MT;S=Rose\n   To map an X.400 PN to an RFC 822 localpart,\
    \ take the non-empty PN\n   attributes, put them into their hierarchical order\
    \ (G I* S), and\n   connect them with periods.\n   Some exceptions are caused\
    \ by the fact that left-hand-side encoding\n   can also be mixed with exception\
    \ mapping. This is shown in more\n   detail in the following sub-chapters.\n"
- title: 3.3.2.2. X.400 domain and domainpart mapping
  contents:
  - "3.3.2.2. X.400 domain and domainpart mapping\n   A mapping rule associates two\
    \ domains: an X.400 domain and an RFC 822\n   domain. The X.400 domain is written\
    \ in the RFC 1327 domain notation\n   (See 3.1.3.), so that both domains have\
    \ the same hierarchical order.\n   The domains are written on one line, separated\
    \ by a '#' sign. For\n   instance:\n        arcom.ch#ADMD$arcom.C$ch#\n      \
    \  PRMD$tlec.ADMD$ade.C$nl#tlec.nl#\n   A mapping rule must at least contain a\
    \ top level domain and a country\n   code. If an address must be mapped, a mapping\
    \ rule with the longest\n   domain match is sought. The associated domain in the\
    \ mapping rule is\n   used as the domain of the mapped address. The remaining\
    \ domains are\n   mapped one by one following the natural hierarchy. Concrete\
    \ examples\n   are shown in the following subchapters.\n"
- title: 3.3.2.2.1. X.400 -> RFC 822
  contents:
  - "3.3.2.2.1. X.400 -> RFC 822\n   As an example, assume the following mapping rule\
    \ is defined:\n           PRMD$tlec.ADMD$ade.C$nl#tlec.nl#\n   Then the address\
    \ C=nl; ADMD=ade; PRMD=tlec; O=you; OU=owe; S=plork\n           S      OU  O \
    \ PRMD  ADMD  Country\n           |      |   |  |     |     |\n           plork\
    \ owe you tlec  ade   nl\n   would be mapped as follows. The Surname 'plork' is\
    \ mapped to the\n   localpart 'plork', see chapter 3.3.2.1. The domain\n     \
    \      localpart\n              |  sdom3\n              |    | sdom2\n       \
    \       |    |   |  sdom1\n              |    |   |   |  top-level-domain\n  \
    \            |    |   |   |   |\n           plork@         tlec.nl\n   The remaining\
    \ SAs (O and one OU) are mapped one by one following the\n   natural hierarchy:\
    \ O is mapped to sdom2, OU is mapped to sdom3:\n           localpart\n       \
    \       | sdom3\n              |  | sdom2\n              |  |   |  sdom1\n   \
    \           |  |   |   |  top-level-domain\n              |  |   |   |    |\n\
    \           plork@owe.you.tlec.nl\n   Thus the mapped address is:\n          \
    \ plork@owe.you.tlec.nl\n   The table containing the listing of all such mapping\
    \ rules, which is\n   distributed to all gateways world-wide, is normally referred\
    \ to as\n   'mapping table 1'. Other commonly used filenames (also depending on\n\
    \   which software your are using) are:\n           'or2rfc'\n           'mapping\
    \ 1'\n           'map1'\n           'table 1'\n           'X2R'\n   As already\
    \ announced, there is an exceptional case were localpart and\n   PN are not directly\
    \ mapped onto each other: sometimes it is necessary\n   to use the localpart for\
    \ other purposes. If the X.400 address\n   contains attributes that would not\
    \ allow for the simple mapping:\n           localpart     <->   PersonalName\n\
    \           domainpart    <->   X.400 domain\n   (e.g., spaces are not allowed\
    \ in an RFC 822 domain, GQ and CN cannot\n   be directly mapped into localpart,\
    \ DDAs of another type than RFC-\n   822), such attributes, together with the\
    \ PN, are left-hand-side\n   encoded. The domainpart must still be mapped according\
    \ to the mapping\n   rule as far as possible. This probably needs some examples:\n\
    \           C=nl; ADMD=ade; PRMD=tlec; O=owe; OU=you; S=plork; GQ=jr\n       \
    \    ->\n           /S=plork/GQ=jr/@you.owe.tlec.nl\n           C=nl; ADMD=ade;\
    \ PRMD=tlec; O=owe; OU=spc ctr; OU=u; S=plork\n           ->\n           \"/S=plork/OU=u/OU=spc\
    \ ctr/\"@owe.tlec.nl\n   Note that in the second example, 'O=owe' is still mapped\
    \ to a\n   subdomain following the natural hierarchy. The problems start with\n\
    \   the space in 'OU=spc ctr'.\n"
- title: 3.3.2.2.2. RFC 822 -> X.400
  contents:
  - "3.3.2.2.2. RFC 822 -> X.400\n   As an example, assume the following mapping rule\
    \ is defined:\n           tlec.nl#PRMD$tlec.ADMD$ade.C$nl#\n   Then the address\
    \ 'plork@owe.you.tlec.nl' :\n           localpart\n              |  sdom3\n  \
    \            |    | sdom2\n              |    |   |  sdom1\n              |  \
    \  |   |   |  top-level-domain\n              |    |   |   |   |\n           plork@owe.you.tlec.nl\n\
    \   would be mapped as follows.\n   The localpart 'plork' is mapped to 'S=plork',\
    \ see chapter 3.3.2.1.\n   The domain 'tlec.nl' is mapped according to the mapping\
    \ rule:\n           S     OU  OU  O  PRMD  ADMD  Country\n           |       \
    \         |     |    |\n           plork            tlec  ade  nl\n   The remaining\
    \ domains (owe.you) are mapped one by one following the\n   natural hierarchy:\
    \ sdom2 is mapped to O, sdom3 is mapped to OU:\n           S     OU  OU  O  PRMD\
    \  ADMD  Country\n           |         |   |  |     |     |\n           plork\
    \     |   |  tlec  ade   nl\n                     owe you\n   Thus the mapped\
    \ address is (in a readable notation):\n           C=nl; ADMD=ade; PRMD=tlec;\
    \ O=you; OU=owe; S=plork\n   Had there been any left-hand-side encoded SAs in\
    \ the localpart that\n   didn't represent a complete mnemonic O/R address, the\
    \ localpart would\n   be mapped to those SAs. E.g.,\n           \"/S=plork/GQ=jr/OU=u/OU=spc\
    \ ctr/\"@owe.tlec.nl\n           ->\n           C=nl; ADMD=ade; PRMD=tlec; O=owe;\
    \ OU=space ctr;\n           OU=u; S=plork; GQ=jr\n   This is necessary to reverse\
    \ the special use of localpart to left-\n   hand-side encode certain attributes.\
    \ See 3.3.2.2.1.\n   You might ask yourself by now why such rules are needed at\
    \ all. Why\n   don't we just use map1 in the other direction? The problem is that\
    \ a\n   symmetric mapping function (a bijection) would indeed be ideal, but\n\
    \   it's not feasible. Asymmetric mappings exist for a number of reasons:\n  \
    \         - To make sure that uucp addresses etc. get routed over local\n    \
    \         gateways.\n           - Preferring certain address forms, while still\
    \ not forbidding\n             others to use another form. Examples of such reasons\
    \ are:\n               - Phasing out old address forms.\n               - If an\
    \ RFC 822 address is mapped to ADMD= ; it means that\n                 the X.400\
    \ mail can be routed over any ADMD in that\n                 country. One single\
    \ ADMD may of course send out an\n                 address containing: ADMD=ade;\
    \ . It must also be possible\n                 to map such an address back.\n\
    \   So we do need mapping rules from RFC 822 to X.400 too. The table\n   containing\
    \ the listing of all such mapping rules, which is\n   distributed to all gateways\
    \ world-wide, is normally referred to as on\n   which software your are using)\
    \ are:\n           'rfc2or'\n           'mapping 2'\n           'map2'\n     \
    \      'table 2'\n           'R2X'\n   If the RFC 822 localpart and/or domainpart\
    \ contain characters that\n   would not immediately fit in the value of a PN attribute\
    \ (! % _), the\n   mapping algorithm falls back to DDA mapping. In this case,\
    \ the SAs\n   that will be used are still determined by mapping the domainpart\n\
    \   according to the mapping rule. In our case:\n           100%user@work.tlec.nl\n\
    \           ->\n           DD.RFC-822=100(p)user(a)work.tlec.nl;\n           C=nl;\
    \ ADMD=ade; PRMD=tlec; O=work\n   If no map2 rule can be found, a third table\
    \ of rules is scanned: the\n   gateway table. This table has the same syntax as\
    \ mapping table 2, but\n   its semantics are different. First of all, a domain\
    \ that only has an\n   entry in the gateway table is always mapped into an RFC\
    \ 822 DDA. For\n   a domain that is purely RFC 822 based, but whose mail may be\
    \ relayed\n   over an X.400 network, the gateway table associates with such a\n\
    \   domain the SAs of the gateway to which the X.400 message should be\n   routed.\
    \ That gateway will then be responsible for gatewaying the\n   message back into\
    \ the RFC 822 world. E.g., if we have the gateway\n   table entry:\n         \
    \  gov#PRMD$gateway.ADMD$Internet.C$us#\n   (and we assume that no overruling\
    \ map2 rule for the top level domain\n   'gov' exists), this would force all gateways\
    \ to perform the following\n   mapping:\n           bush@dole.gov\n          \
    \ ->\n           DD.RFC-822=bush(a)dole.gov;\n           C=us; ADMD=Internet;\
    \ PRMD=gateway\n   This is very similar to the default DDA mapping, except the\
    \ SAs are\n   those of a gateway that has declared to be responsible for a certain\n\
    \   RFC 822 domain, not those of the local gateway. And thus, this\n   mechanism\
    \ helps avoid the third party problem discussed in chapter\n   3.2.2.\n   The\
    \ table containing the listing of all such gateway rules, which is\n   distributed\
    \ to all gateways world-wide, is normally referred to as\n   the 'gateway table'.\
    \ Other commonly used filenames (also depending on\n   which software your are\
    \ using) are:\n           'rfc1148gate' {From the predecessor of RFC 1327, RFC\
    \ 1148}\n           'gate table'\n           'GW'\n   Only when no rule at all\
    \ (map2 or gateway rule) is defined for a\n   domain, the algorithm falls back\
    \ to the default DDA mapping as\n   described in 3.3.1.2.\n"
- title: 3.4. Table co-ordination
  contents:
  - "3.4. Table co-ordination\n   As already stated, the use of mapping tables will\
    \ only function\n   smoothly if all gateways in the world use the same tables.\
    \ On the\n   global level, the collection and distribution of RFC 1327 address\n\
    \   mapping tables is co-ordinated by the MHS Co-ordination Service:\n       \
    \   SWITCH Head Office\n          MHS Co-ordination Service\n          Limmatquai\
    \ 138\n          CH-8001 Zurich, Europe\n          Tel. +41 1 268 1550\n     \
    \     Fax. +41 1 268 1568\n          RFC 822: project-team@switch.ch\n       \
    \   X.400:   C=ch;ADMD=arcom;PRMD=switch;O=switch;S=project-team;\n   The procedures\
    \ for collection and distribution of mapping rules can\n   be found on the MHS\
    \ Co-ordination Server, in the directory\n   \"/procedures\".  Appendix D describes\
    \ how this server can be accessed.\n   If you want to define mapping rules for\
    \ your own local domain, you\n   can find the right contact person in your country\
    \ or network (the\n   gateway manager) on the same server, in the directory \"\
    /mhs-\n   services\".\n"
- title: 3.5. Local additions
  contents:
  - "3.5. Local additions\n   Since certain networks want to define rules that should\
    \ only be used\n   within their networks, such rules should not be distributed\
    \ world-\n   wide. Consider two networks that both want to reach the old top-\n\
    \   level-domain 'arpa' over their local gateway. They would both like to\n  \
    \ use a mapping 2 rule for this purpose:\n           TLec in NL:     arpa#PRMD$gateway.ADMD$tlec.C$nl#\n\
    \           SWITCH in CH:   arpa#PRMD$gateway.ADMD$switch.C$ch#\n   (You may have\
    \ noticed correctly that they should have defined such\n   rules in the gateway\
    \ table, but for the sake of the example, we\n   assume they defined it in mapping\
    \ table 2. This was the way things\n   were done in the days of RFC 987, and many\
    \ networks are still doing\n   it this way these days.)\n   Since a mapping table\
    \ cannot contain two mapping rules with the same\n   domain on the left hand side,\
    \ such 'local mappings' are not\n   distributed globally. There exists a RARE\
    \ draft proposal [13] which\n   defines a mechanism for allowing and automatically\
    \ dealing with\n   conflicting mapping rules, but this mechanism has not been\n\
    \   implemented as to date. After having received the global mapping\n   tables\
    \ from the MHS Co-ordination Service, many networks add 'local'\n   rules to map2\
    \ and the gateway table before installing them on their\n   gateways. Note that\
    \ the reverse mapping 2 rules for such local\n   mappings _are_ globally unique,\
    \ and can thus be distributed world-\n   wide. This is even necessary, because\
    \ addresses that were mapped with\n   a local mapping rule may leak out to other\
    \ networks (here comes the\n   third party problem again...). Such other networks\
    \ should at least be\n   given the possibility to map the addresses back. So the\
    \ global\n   mapping table 1 would in this case contain the two rules:\n     \
    \      PRMD$gateway.ADMD$tlec.C$nl#arpa#\n           PRMD$gateway.ADMD$switch.C$ch#arpa#\n\
    \   Note that if such rules would have been defined as local gate table\n   entries\
    \ instead of map2 entries, there would have been no need to\n   distribute the\
    \ reverse mappings world-wide (the reverse mapping of a\n   DDA encoded RFC 822\
    \ address is simply done by stripping the SAs, see\n   3.3.1.1.).\n"
- title: 3.6. Product specific formats
  contents:
  - "3.6. Product specific formats\n   Not all software uses the RFC 1327 format of\
    \ the mapping tables\n   internally. Almost all formats allow comments on a line\
    \ starting with\n   a # sign. Some examples of different formats:\n    RFC 1327\n\
    \        # This is pure RFC 1327 format\n        # table 1: X.400 -> RFC 822\n\
    \        #\n        PRMD$tlec.ADMD$ade.C$nl#tlec.nl#\n        # etc.\n       \
    \ # table 2: RFC 822 -> X.400\n        #\n        arcom.ch#ADMD$arcom.C$ch#\n\
    \        # etc.\n    EAN\n        # This is EAN format\n        # It uses the\
    \ readable format for X.400 domains and TABs\n        # to make a 'readable mapping\
    \ table format'.\n        # table 1: X.400 -> RFC 822\n        #\n        P=tlec;\
    \ A=ade; C=nl;       # tlec.nl\n        # etc.\n        # table 2: RFC 822 ->\
    \ X.400\n        #\n        arcom.ch                   # A=arcom; C=ch;\n    \
    \    # etc.\n    PP\n        # This is PP format\n        # table 1: X.400 ->\
    \ RFC 822\n        #\n        PRMD$tlec.ADMD$ade.C$nl:tlec.nl\n        # etc.\n\
    \        # table 2: RFC 822 -> X.400\n        #\n        arcom.ch:ADMD$arcom.C$ch\n\
    \        # etc.\n   Most R&D networks have tools to automatically generate these\
    \ formats\n   from the original RFC 1327 tables;, some even distribute the tables\n\
    \   within their networks in several formats. If you need mapping tables\n   in\
    \ a specific format, please contact your national or R&D network's\n   gateway\
    \ manager. See chapter 3.4.\n"
- title: 3.7. Guidelines for mapping rule definition
  contents:
  - "3.7. Guidelines for mapping rule definition\n   Beware that defining mapping\
    \ rules without knowing what you are doing\n   can be disastrous not only for\
    \ your network, but also for others. You\n   should be rather safe if you follow\
    \ at least these rules:\n           - First of all, read this tutorial;.\n   \
    \        - Avoid local mappings; prefer gate table entries. (See chapter\n   \
    \          3.5)\n           - Make sure any domain you map to can also be mapped\
    \ back;.\n           - Aim for symmetry.\n           - Don't define a gateway\
    \ table entry if the same domain already\n             has a map2 entry. Such\
    \ a rule would be redundant.\n           - Map to \"ADMD=0;\" if you will not\
    \ be connected to any ADMD for\n             the time being.\n           - Only\
    \ map to \"ADMD= ;\" if you are indeed reachable through\n             _any_ ADMD\
    \ in your country.\n           - Mind the difference between \"PRMD=;\" and \"\
    PRMD=@;\" and make\n             sure which one you need. (Try to avoid empty\
    \ or unused\n             attributes in the O/R address hierarchy from the beginning!)\n\
    \           - Don't define mappings for domains over which you have no\n     \
    \        naming authority.\n           - Before defining a mapping rule, make\
    \ sure you have the\n             permission from the naming authority of the\
    \ domain you want\n             to map to. Normally, this should be the same organisation\
    \ as\n             the mapping authority of the domain in the left hand side of\n\
    \             the mapping rule. This principle is called 'administrative\n   \
    \          equivalence'.\n           - Avoid redundant mappings. E.g., if all\
    \ domains under 'tlec.nl'\n             are in your control, don't define:\n \
    \              first.tlec.nl#O$first.PRMD$tlec.ADMD$ade.C$nl#\n              \
    \ last.tlec.nl#O$last.PRMD$tlec.ADMD$ade.C$nl#\n               always.tlec.nl#O$always.PRMD$tlec.ADMD$ade.C$nl#\n\
    \             but rather have only one mapping rule:\n               tlec.nl#PRMD$tlec.ADMD$ade.C$nl#\n\
    \           - Before introducing a new mapped version of a domain, make\n    \
    \         sure the world can route to that mapped domain;.\n             E.g.,\
    \ If you are operating a PRMD: C=zz; ADMD=ade; PRMD=ergo;\n             and you\
    \ want to define the mapping rules:\n               map1: PRMD$ergo.ADMD$ade.C$zz#ergo.zz#\n\
    \               map2: ergo.zz#PRMD$ergo.ADMD$ade.C$zz#\n             Make sure\
    \ that ergo.zz (or at least all of its subdomains) is\n             DNS routeable\
    \ (register an MX or A record) and will be routed\n             to a gateway that\
    \ agreed to route the messages from the\n             Internet to you over X.400.\n\
    \             In the other direction, if you are operating the Internet\n    \
    \         domain cs.woodstock.edu, and you want to define a mapping for\n    \
    \         that domain:\n               map2: cs.woodstock.edu#O$cs.PRMD$woodstock.ADMD$\
    \ .C$us#\n               map1: O$cs.PRMD$woodstock.ADMD$ .C$us#cs.woodstock.edu#\n\
    \             Make sure that C=us; ADMD= ; PRMD=woodstock; O=cs; (or at\n    \
    \         least all of its subdomains) is routeable in the X.400 world,\n    \
    \         and will be routed to a gateway that agreed to route the\n         \
    \    messages from X.400 to your RFC 822 domain over SMTP. Within\n          \
    \   the GO-MHS community, this would be done by registering a\n             line\
    \ in a so-called domain document, which will state to\n             which mail\
    \ relay this domain should be routed.\n             Co-ordinate any such actions\
    \ with your national or MHS'\n             gateway manager. See chapter 3.4.\n"
- title: 4. Conclusion
  contents:
  - "4. Conclusion\n   Mail gatewaying remains a complicated subject. If after reading\
    \ this\n   tutorial, you feel you understand the basics, try solving some real-\n\
    \   life problems. This is indeed a very rewarding area to work in: even\n   after\
    \ having worked with it for many years, you can make amazing\n   discoveries every\
    \ other week........\n"
- title: Appendix A. References
  contents:
  - "Appendix A. References\n   [1]  Postel, J., \"Simple Mail Transfer Protocol\"\
    , STD 10, RFC 821,\n        USC/Information Sciences Institute, August 1982.\n\
    \   [2]  Crocker, D., \"Standard for the Format of ARPA Internet Text\n      \
    \  Messages\", STD 11, RFC 822, University of Delaware, August 1982.\n   [3] \
    \ Mockapetris, P., \"Domain Names - Concepts and Facilities\", and\n        \"\
    Domain Names - Implementation and Specification\", STD 13, RFCs\n        1034\
    \ and 1035, USC/Information Sciences Institute, November\n        1987.\n   [4]\
    \  Kille, S., \"Mapping Between X.400 and RFC 822\", RFC 987, UK\n        Academic\
    \ Community Report (MG.19), UCL, June 1986.\n   [5]  Braden, R., Editor, \"Requirements\
    \ for Internet Hosts --\n        Application and Support\", STD 3, RFC 1123, USC/Information\n\
    \        Sciences Institute, October 1989.\n   [6]  Postel, J., Editor, \"Internet\
    \ Official Protocol Standards\", STD\n        1, RFC 1500, USC/Information Sciences\
    \ Institute, August 1993.\n   [7]  Chapin, L., Chair, \"The Internet Standards\
    \ Process\", RFC 1310,\n        Internet Activities Board, March 1992.\n   [8]\
    \  Kille, S., \"Mapping between X.400(1988) / ISO 10021 and RFC\n        822\"\
    , RFC 1327 / RARE RTR 2, University College London, May\n        1992.\n   [9]\
    \  Kille, S., \"X.400 1988 to 1984 downgrading\", RFC 1328 / RARE RTR\n      \
    \  3, University College London, May 1992.\n   [10] Plattner, B., and H. Lubich,\
    \ \"Electronic Mail Systems and\n        Protocols Overview and Case Study\",\
    \ Proceedings of the IFIP WG\n        6.5 International working conference on\
    \ message handling systems\n        and distributed applications; Costa Mesa 1988;\
    \ North-Holland,\n        1989.\n   [11] Houttuin, J., \"@route:100%name@address,\
    \ a practical guide to MHS\n        configuration\", Top-Level EC, 1993, (not\
    \ yet published).\n   [12] Alvestrand, H., \"Frequently asked questions on X.400\"\
    , regularly\n        posted on USEnet in newsgroup comp.protocols.iso.x400.\n\
    \   [13] Houttuin, J., Hansen, K., and S. Aumont, \"RFC 1327 Address\n       \
    \ Mapping Authorities\", RARE WG-MSG Working Draft, Work in\n        Progress,\
    \ May 1993.\n   [14] \"COSINE MHS Pocket User Guide\", COSINE MHS Project Team\
    \ 1992.\n        Also available in several languages from the MHS Co-ordination\n\
    \        Server:/user-guides. See Appendix D.\n   [15] Grimm, R., and S. Haug,\
    \ \"A Minimum Profile for RFC 987\", GMD,\n        November 1987; RARE MHS Project\
    \ Team; July 1990. Also available\n        from the MHS Co-ordination Server:/procedures/min-rfc987-\n\
    \        profile. See Appendix D.\n   [16] CCITT Recommendations X.400 - X.430.\
    \ Data Communication\n        Networks: Message Handling Systems.  CCITT Red Book,\
    \ Vol. VIII -\n        Fasc. VIII.7, Malaga-Torremolinos 1984.\n   [17] CCITT\
    \ Recommendations X.400 - X.420. Data Communication\n        Networks: Message\
    \ Handling Systems.  CCITT Blue Book, Vol. VIII\n        - Fasc. VIII.7, Melbourne\
    \ 1988.\n"
- title: Appendix B. Index
  contents:
  - "Appendix B. Index\n   <<Only available in the Postscript version>>\n"
- title: Appendix C. Abbreviations
  contents:
  - "Appendix C. Abbreviations\n      ADMD     Administration Management Domain\n\
    \      ARPA     Advanced Research Projects Agency\n      ASCII    American Standard\
    \ Code for Information Exchange\n      ASN.1    Abstract Syntax Notation One\n\
    \      BCD      Binary-Coded Decimal\n      BITNET   Because It's Time NETwork\n\
    \      CCITT    Comite Consultatif International de Telegraphique et\n       \
    \        Telephonique\n      COSINE   Co-operation for OSI networking in Europe\n\
    \      DFN      Deutsches Forschungsnetz\n      DL       Distribution List\n \
    \     DNS      Domain Name System\n      DoD      Department of Defense\n    \
    \  EBCDIC   Extended BCD Interchange Code\n      IAB      Internet Architecture\
    \ Board\n      IEC      International Electrotechnical Commission\n      IESG\
    \     Internet Engineering Steering Group\n      IETF     Internet Engineering\
    \ Task Force\n      IP       Internet Protocol\n      IPM      Inter-Personal\
    \ Message\n      IPMS     Inter-Personal Messaging Service\n      IPN      Inter-Personal\
    \ Notification\n      ISO      International Organisation for Standardisation\n\
    \      ISOC     Internet Society\n      ISODE    ISO Development Environment\n\
    \      JNT      Joint Network Team (UK)\n      JTC      Joint Technical Committee\
    \ (ISO/IEC)\n      MHS      Message Handling System\n      MOTIS    Message-Oriented\
    \ Text Interchange Systems\n      MTA      Message Transfer Agent\n      MTL \
    \     Message Transfer Layer\n      MTS      Message Transfer System\n      MX\
    \       Mail eXchanger\n      OSI      Open Systems Interconnection\n      OU(s)\
    \    Organizational Unit(s)\n      PP       Mail gatewaying software (not an abbreviation)\n\
    \      PRMD     Private Management Domain\n      RARE     Reseaux Associes pour\
    \ la Recherche Europeenne\n      RFC      Request for comments\n      RTC    \
    \  RARE Technical Committee\n      RTR      RARE Technical Report\n      SMTP\
    \     simple mail transfer protocol\n      STD      Internet Standard\n      TCP\
    \      Transmission Control Protocol\n      UUCP     Unix to Unix CoPy\n"
- title: Appendix D. How to access the MHS Co-ordination Server
  contents:
  - "Appendix D. How to access the MHS Co-ordination Server\n   Here is an at-a-glance\
    \ sheet on the access possibilities of the MHS\n   Co-ordination server:\n   \
    \   E-mail\n        address:\n          RFC822: mhs-server@nic.switch.ch\n   \
    \       X.400:  S=mhs-server; OU1=nic; O=switch; P=switch; A=arcom;\n        \
    \          C=CH\n        body\n          help                       # you receive\
    \ this document\n          index ['directory']        # you receive a directory\
    \ listing\n          send 'directory''filename' # you receive the specified file\n\
    \      FTP\n        address:  Internet: nic.switch.ch\n        account:  cosine\n\
    \        password: 'your email address'\n      Interactive\n        address: \
    \  Internet: nic.switch.ch\n        address:   PSPDN:    +22847971014540\n   \
    \     address:   EMPB/IXI: 20432840100540\n        account:   info\n        directory:\
    \ e-mail/COSINE-MHS/\n      FTAM\n        address:  Internet: nic.switch.ch\n\
    \        address:  PSPDN   : +22847971014540\n        address:  EMPB/IXI: 20432840100540\n\
    \        address:  ISO CLNS: NSAP=39756f11112222223333aa0004000ae100,\n      \
    \                      TSEL=0103Hex\n        account:  ANON\n      gopher\n  \
    \      address:  Internet: nic.switch.ch\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jeroen Houttuin\n   RARE Secretariat\n   Singel 466-468\n\
    \   NL-1017 AW Amsterdam\n   Europe\n   Tel. +31 20 6391131\n   Fax. +31 20 6393289\n\
    \   RFC 822: houttuin@rare.nl\n   X.400:   C=nl;ADMD=400net;PRMD=surf;O=rare;S=houttuin\n"
