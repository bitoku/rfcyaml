- contents:
  - "                   Transport Layer Security (TLS) and\n      Datagram Transport
    Layer Security (DTLS) Heartbeat Extension\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the Heartbeat Extension for the Transport\n
    \  Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\n   protocols.\n
    \  The Heartbeat Extension provides a new protocol for TLS/DTLS allowing\n   the
    usage of keep-alive functionality without performing a\n   renegotiation and a
    basis for path MTU (PMTU) discovery for DTLS.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6520.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Heartbeat Hello Extension . . . . . . . . . . . . . . .
    . . . . 3\n   3.  Heartbeat Protocol  . . . . . . . . . . . . . . . . . . . .
    . . 4\n   4.  Heartbeat Request and Response Messages . . . . . . . . . . . .
    5\n   5.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n
    \  6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 7\n   7.
    \ Security Considerations . . . . . . . . . . . . . . . . . . . . 7\n   8.  Acknowledgments
    . . . . . . . . . . . . . . . . . . . . . . . . 7\n   9.  References  . . . .
    . . . . . . . . . . . . . . . . . . . . . . 7\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Overview\n   This document describes the Heartbeat Extension for the
      Transport\n   Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\n
      \  protocols, as defined in [RFC5246] and [RFC6347] and their\n   adaptations
      to specific transport protocols described in [RFC3436],\n   [RFC5238], and [RFC6083].\n
      \  DTLS is designed to secure traffic running on top of unreliable\n   transport
      protocols.  Usually, such protocols have no session\n   management.  The only
      mechanism available at the DTLS layer to figure\n   out if a peer is still alive
      is a costly renegotiation, particularly\n   when the application uses unidirectional
      traffic.  Furthermore, DTLS\n   needs to perform path MTU (PMTU) discovery but
      has no specific\n   message type to realize it without affecting the transfer
      of user\n   messages.\n   TLS is based on reliable protocols, but there is not
      necessarily a\n   feature available to keep the connection alive without continuous\n
      \  data transfer.\n   The Heartbeat Extension as described in this document
      overcomes these\n   limitations.  The user can use the new HeartbeatRequest
      message,\n   which has to be answered by the peer with a HeartbeartResponse\n
      \  immediately.  To perform PMTU discovery, HeartbeatRequest messages\n   containing
      padding can be used as probe packets, as described in\n   [RFC4821].\n"
    title: 1.1.  Overview
  - contents:
    - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 1.2.  Conventions
  title: 1.  Introduction
- contents:
  - "2.  Heartbeat Hello Extension\n   The support of Heartbeats is indicated with
    Hello Extensions.  A peer\n   cannot only indicate that its implementation supports
    Heartbeats, it\n   can also choose whether it is willing to receive HeartbeatRequest\n
    \  messages and respond with HeartbeatResponse messages or only willing\n   to
    send HeartbeatRequest messages.  The former is indicated by using\n   peer_allowed_to_send
    as the HeartbeatMode; the latter is indicated by\n   using peer_not_allowed_to_send
    as the Heartbeat mode.  This decision\n   can be changed with every renegotiation.
    \ HeartbeatRequest messages\n   MUST NOT be sent to a peer indicating peer_not_allowed_to_send.
    \ If\n   an endpoint that has indicated peer_not_allowed_to_send receives a\n
    \  HeartbeatRequest message, the endpoint SHOULD drop the message\n   silently
    and MAY send an unexpected_message Alert message.\n   The format of the Heartbeat
    Hello Extension is defined by:\n   enum {\n      peer_allowed_to_send(1),\n      peer_not_allowed_to_send(2),\n
    \     (255)\n   } HeartbeatMode;\n   struct {\n      HeartbeatMode mode;\n   }
    HeartbeatExtension;\n   Upon reception of an unknown mode, an error Alert message
    using\n   illegal_parameter as its AlertDescription MUST be sent in response.\n"
  title: 2.  Heartbeat Hello Extension
- contents:
  - "3.  Heartbeat Protocol\n   The Heartbeat protocol is a new protocol running on
    top of the Record\n   Layer.  The protocol itself consists of two message types:\n
    \  HeartbeatRequest and HeartbeatResponse.\n   enum {\n      heartbeat_request(1),\n
    \     heartbeat_response(2),\n      (255)\n   } HeartbeatMessageType;\n   A HeartbeatRequest
    message can arrive almost at any time during the\n   lifetime of a connection.
    \ Whenever a HeartbeatRequest message is\n   received, it SHOULD be answered with
    a corresponding\n   HeartbeatResponse message.\n   However, a HeartbeatRequest
    message SHOULD NOT be sent during\n   handshakes.  If a handshake is initiated
    while a HeartbeatRequest is\n   still in flight, the sending peer MUST stop the
    DTLS retransmission\n   timer for it.  The receiving peer SHOULD discard the message\n
    \  silently, if it arrives during the handshake.  In case of DTLS,\n   HeartbeatRequest
    messages from older epochs SHOULD be discarded.\n   There MUST NOT be more than
    one HeartbeatRequest message in flight at\n   a time.  A HeartbeatRequest message
    is considered to be in flight\n   until the corresponding HeartbeatResponse message
    is received, or\n   until the retransmit timer expires.\n   When using an unreliable
    transport protocol like the Datagram\n   Congestion Control Protocol (DCCP) or
    UDP, HeartbeatRequest messages\n   MUST be retransmitted using the simple timeout
    and retransmission\n   scheme DTLS uses for flights as described in Section 4.2.4
    of\n   [RFC6347].  In particular, after a number of retransmissions without\n
    \  receiving a corresponding HeartbeatResponse message having the\n   expected
    payload, the DTLS connection SHOULD be terminated.  The\n   threshold used for
    this SHOULD be the same as for DTLS handshake\n   messages.  Please note that
    after the timer supervising a\n   HeartbeatRequest messages expires, this message
    is no longer\n   considered in flight.  Therefore, the HeartbeatRequest message
    is\n   eligible for retransmission.  The retransmission scheme, in\n   combination
    with the restriction that only one HeartbeatRequest is\n   allowed to be in flight,
    ensures that congestion control is handled\n   appropriately in case of the transport
    protocol not providing one,\n   like in the case of DTLS over UDP.\n   When using
    a reliable transport protocol like the Stream Control\n   Transmission Protocol
    (SCTP) or TCP, HeartbeatRequest messages only\n   need to be sent once.  The transport
    layer will handle\n   retransmissions.  If no corresponding HeartbeatResponse
    message has\n   been received after some amount of time, the DTLS/TLS connection
    MAY\n   be terminated by the application that initiated the sending of the\n   HeartbeatRequest
    message.\n"
  title: 3.  Heartbeat Protocol
- contents:
  - "4.  Heartbeat Request and Response Messages\n   The Heartbeat protocol messages
    consist of their type and an\n   arbitrary payload and padding.\n   struct {\n
    \     HeartbeatMessageType type;\n      uint16 payload_length;\n      opaque payload[HeartbeatMessage.payload_length];\n
    \     opaque padding[padding_length];\n   } HeartbeatMessage;\n   The total length
    of a HeartbeatMessage MUST NOT exceed 2^14 or\n   max_fragment_length when negotiated
    as defined in [RFC6066].\n   type:  The message type, either heartbeat_request
    or\n      heartbeat_response.\n   payload_length:  The length of the payload.\n
    \  payload:  The payload consists of arbitrary content.\n   padding:  The padding
    is random content that MUST be ignored by the\n      receiver.  The length of
    a HeartbeatMessage is TLSPlaintext.length\n      for TLS and DTLSPlaintext.length
    for DTLS.  Furthermore, the\n      length of the type field is 1 byte, and the
    length of the\n      payload_length is 2.  Therefore, the padding_length is\n
    \     TLSPlaintext.length - payload_length - 3 for TLS and\n      DTLSPlaintext.length
    - payload_length - 3 for DTLS.  The\n      padding_length MUST be at least 16.\n
    \  The sender of a HeartbeatMessage MUST use a random padding of at\n   least
    16 bytes.  The padding of a received HeartbeatMessage message\n   MUST be ignored.\n
    \  If the payload_length of a received HeartbeatMessage is too large,\n   the
    received HeartbeatMessage MUST be discarded silently.\n   When a HeartbeatRequest
    message is received and sending a\n   HeartbeatResponse is not prohibited as described
    elsewhere in this\n   document, the receiver MUST send a corresponding HeartbeatResponse\n
    \  message carrying an exact copy of the payload of the received\n   HeartbeatRequest.\n
    \  If a received HeartbeatResponse message does not contain the expected\n   payload,
    the message MUST be discarded silently.  If it does contain\n   the expected payload,
    the retransmission timer MUST be stopped.\n"
  title: 4.  Heartbeat Request and Response Messages
- contents:
  - "5.  Use Cases\n   Each endpoint sends HeartbeatRequest messages at a rate and
    with the\n   padding required for the particular use case.  The endpoint should\n
    \  not expect its peer to send HeartbeatRequests.  The directions are\n   independent.\n"
  - contents:
    - "5.1.  Path MTU Discovery\n   DTLS performs path MTU discovery as described
      in Section 4.1.1.1 of\n   [RFC6347].  A detailed description of how to perform
      path MTU\n   discovery is given in [RFC4821].  The necessary probe packets are
      the\n   HeartbeatRequest messages.\n   This method of using HeartbeatRequest
      messages for DTLS is similar to\n   the one for the Stream Control Transmission
      Protocol (SCTP) using the\n   padding chunk (PAD-chunk) defined in [RFC4820].\n"
    title: 5.1.  Path MTU Discovery
  - contents:
    - "5.2.  Liveliness Check\n   Sending HeartbeatRequest messages allows the sender
      to make sure that\n   it can reach the peer and the peer is alive.  Even in
      the case of\n   TLS/TCP, this allows a check at a much higher rate than the
      TCP keep-\n   alive feature would allow.\n   Besides making sure that the peer
      is still reachable, sending\n   HeartbeatRequest messages refreshes the NAT
      state of all involved\n   NATs.\n   HeartbeatRequest messages SHOULD only be
      sent after an idle period\n   that is at least multiple round-trip times long.
      \ This idle period\n   SHOULD be configurable up to a period of multiple minutes
      and down to\n   a period of one second.  A default value for the idle period
      SHOULD\n   be configurable, but it SHOULD also be tunable on a per-peer basis.\n"
    title: 5.2.  Liveliness Check
  title: 5.  Use Cases
- contents:
  - "6.  IANA Considerations\n   IANA has assigned the heartbeat content type (24)
    from the \"TLS\n   ContentType Registry\" as specified in [RFC5246].  The reference
    is to\n   RFC 6520.\n   IANA has created and now maintains a new registry for
    Heartbeat\n   Message Types.  The message types are numbers in the range from
    0 to\n   255 (decimal).  IANA has assigned the heartbeat_request (1) and the\n
    \  heartbeat_response (2) message types.  The values 0 and 255 should be\n   reserved.
    \ This registry uses the Expert Review policy as described\n   in [RFC5226].  The
    reference is to RFC 6520.\n   IANA has assigned the heartbeat extension type (15)
    from the TLS\n   \"ExtensionType Values\" registry as specified in [RFC5246].
    \ The\n   reference is to RFC 6520.\n   IANA has created and now maintains a new
    registry for Heartbeat\n   Modes.  The modes are numbers in the range from 0 to
    255 (decimal).\n   IANA has assigned the peer_allowed_to_send (1) and the\n   peer_not_allowed_to_send
    (2) modes.  The values 0 and 255 should be\n   reserved.  This registry uses the
    Expert Review policy as described\n   in [RFC5226].  The reference is to RFC 6520.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   The security considerations of [RFC5246] and
    [RFC6347] apply to this\n   document.  This document does not introduce any new
    security\n   considerations.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgments\n   The authors wish to thank Pasi Eronen, Adrian Farrel,
    Stephen\n   Farrell, Adam Langley, Nikos Mavrogiannopoulos, Tom Petch, Eric\n
    \  Rescorla, Peter Saint-Andre, and Juho Vaehae-Herttua for their\n   invaluable
    comments.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing
      an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n
      \             May 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport
      Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August
      2008.\n   [RFC6066]  Eastlake, D., \"Transport Layer Security (TLS) Extensions:\n
      \             Extension Definitions\", RFC 6066, January 2011.\n   [RFC6347]
      \ Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security
      Version 1.2\", RFC 6347, January 2012.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC3436]  Jungmaier, A., Rescorla, E., and
      M. Tuexen, \"Transport\n              Layer Security over Stream Control Transmission
      Protocol\",\n              RFC 3436, December 2002.\n   [RFC4820]  Tuexen, M.,
      Stewart, R., and P. Lei, \"Padding Chunk and\n              Parameter for the
      Stream Control Transmission Protocol\n              (SCTP)\", RFC 4820, March
      2007.\n   [RFC4821]  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n
      \             Discovery\", RFC 4821, March 2007.\n   [RFC5238]  Phelan, T.,
      \"Datagram Transport Layer Security (DTLS) over\n              the Datagram
      Congestion Control Protocol (DCCP)\",\n              RFC 5238, May 2008.\n   [RFC6083]
      \ Tuexen, M., Seggelmann, R., and E. Rescorla, \"Datagram\n              Transport
      Layer Security (DTLS) for Stream Control\n              Transmission Protocol
      (SCTP)\", RFC 6083, January 2011.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Robin Seggelmann\n   Muenster University of Applied Sciences\n
    \  Stegerwaldstr. 39\n   48565 Steinfurt\n   DE\n   EMail: seggelmann@fh-muenster.de\n
    \  Michael Tuexen\n   Muenster University of Applied Sciences\n   Stegerwaldstr.
    39\n   48565 Steinfurt\n   DE\n   EMail: tuexen@fh-muenster.de\n   Michael Glenn
    Williams\n   GWhiz Arts & Sciences\n   2885 Denise Court\n   Newbury Park, CA,
    91320\n   USA\n   EMail: michael.glenn.williams@gmail.com\n"
  title: Authors' Addresses
