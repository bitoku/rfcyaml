- title: __initial_text__
  contents:
  - '              TOTP: Time-Based One-Time Password Algorithm

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an extension of the One-Time Password (OTP)\n\
    \   algorithm, namely the HMAC-based One-Time Password (HOTP) algorithm,\n   as\
    \ defined in RFC 4226, to support the time-based moving factor.  The\n   HOTP\
    \ algorithm specifies an event-based OTP algorithm, where the\n   moving factor\
    \ is an event counter.  The present work bases the moving\n   factor on a time\
    \ value.  A time-based variant of the OTP algorithm\n   provides short-lived OTP\
    \ values, which are desirable for enhanced\n   security.\n   The proposed algorithm\
    \ can be used across a wide range of network\n   applications, from remote Virtual\
    \ Private Network (VPN) access and\n   Wi-Fi network logon to transaction-oriented\
    \ Web applications.  The\n   authors believe that a common and shared algorithm\
    \ will facilitate\n   adoption of two-factor authentication on the Internet by\
    \ enabling\n   interoperability across commercial and open-source implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6238.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Scope ......................................................2\n  \
    \    1.2. Background .................................................3\n   2.\
    \ Notation and Terminology ........................................3\n   3. Algorithm\
    \ Requirements ..........................................3\n   4. TOTP Algorithm\
    \ ..................................................4\n      4.1. Notations ..................................................4\n\
    \      4.2. Description ................................................4\n  \
    \ 5. Security Considerations .........................................5\n    \
    \  5.1. General ....................................................5\n      5.2.\
    \ Validation and Time-Step Size ..............................6\n   6. Resynchronization\
    \ ...............................................7\n   7. Acknowledgements ................................................7\n\
    \   8. References ......................................................8\n  \
    \    8.1. Normative References .......................................8\n    \
    \  8.2. Informative References .....................................8\n   Appendix\
    \ A. TOTP Algorithm: Reference Implementation ...............9\n   Appendix B.\
    \ Test Vectors ..........................................14\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document describes an extension of the One-Time Password\
    \ (OTP)\n   algorithm, namely the HMAC-based One-Time Password (HOTP) algorithm,\n\
    \   as defined in [RFC4226], to support the time-based moving factor.\n"
- title: 1.2.  Background
  contents:
  - "1.2.  Background\n   As defined in [RFC4226], the HOTP algorithm is based on\
    \ the\n   HMAC-SHA-1 algorithm (as specified in [RFC2104]) and applied to an\n\
    \   increasing counter value representing the message in the HMAC\n   computation.\n\
    \   Basically, the output of the HMAC-SHA-1 calculation is truncated to\n   obtain\
    \ user-friendly values:\n      HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))\n   where\
    \ Truncate represents the function that can convert an HMAC-SHA-1\n   value into\
    \ an HOTP value.  K and C represent the shared secret and\n   counter value; see\
    \ [RFC4226] for detailed definitions.\n   TOTP is the time-based variant of this\
    \ algorithm, where a value T,\n   derived from a time reference and a time step,\
    \ replaces the counter C\n   in the HOTP computation.\n   TOTP implementations\
    \ MAY use HMAC-SHA-256 or HMAC-SHA-512 functions,\n   based on SHA-256 or SHA-512\
    \ [SHA2] hash functions, instead of the\n   HMAC-SHA-1 function that has been\
    \ specified for the HOTP computation\n   in [RFC4226].\n"
- title: 2.  Notation and Terminology
  contents:
  - "2.  Notation and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Algorithm Requirements
  contents:
  - "3.  Algorithm Requirements\n   This section summarizes the requirements taken\
    \ into account for\n   designing the TOTP algorithm.\n   R1: The prover (e.g.,\
    \ token, soft token) and verifier (authentication\n       or validation server)\
    \ MUST know or be able to derive the current\n       Unix time (i.e., the number\
    \ of seconds elapsed since midnight UTC\n       of January 1, 1970) for OTP generation.\
    \  See [UT] for a more\n       detailed definition of the commonly known \"Unix\
    \ time\".  The\n       precision of the time used by the prover affects how often\
    \ the\n       clock synchronization should be done; see Section 6.\n   R2: The\
    \ prover and verifier MUST either share the same secret or the\n       knowledge\
    \ of a secret transformation to generate a shared secret.\n   R3: The algorithm\
    \ MUST use HOTP [RFC4226] as a key building block.\n   R4: The prover and verifier\
    \ MUST use the same time-step value X.\n   R5: There MUST be a unique secret (key)\
    \ for each prover.\n   R6: The keys SHOULD be randomly generated or derived using\
    \ key\n       derivation algorithms.\n   R7: The keys MAY be stored in a tamper-resistant\
    \ device and SHOULD be\n       protected against unauthorized access and usage.\n"
- title: 4.  TOTP Algorithm
  contents:
  - "4.  TOTP Algorithm\n   This variant of the HOTP algorithm specifies the calculation\
    \ of a\n   one-time password value, based on a representation of the counter as\n\
    \   a time factor.\n"
- title: 4.1.  Notations
  contents:
  - "4.1.  Notations\n   o  X represents the time step in seconds (default value X\
    \ =\n      30 seconds) and is a system parameter.\n   o  T0 is the Unix time to\
    \ start counting time steps (default value is\n      0, i.e., the Unix epoch)\
    \ and is also a system parameter.\n"
- title: 4.2.  Description
  contents:
  - "4.2.  Description\n   Basically, we define TOTP as TOTP = HOTP(K, T), where T\
    \ is an integer\n   and represents the number of time steps between the initial\
    \ counter\n   time T0 and the current Unix time.\n   More specifically, T = (Current\
    \ Unix time - T0) / X, where the\n   default floor function is used in the computation.\n\
    \   For example, with T0 = 0 and Time Step X = 30, T = 1 if the current\n   Unix\
    \ time is 59 seconds, and T = 2 if the current Unix time is\n   60 seconds.\n\
    \   The implementation of this algorithm MUST support a time value T\n   larger\
    \ than a 32-bit integer when it is beyond the year 2038.  The\n   value of the\
    \ system parameters X and T0 are pre-established during\n   the provisioning process\
    \ and communicated between a prover and\n   verifier as part of the provisioning\
    \ step.  The provisioning flow is\n   out of scope of this document; refer to\
    \ [RFC6030] for such\n   provisioning container specifications.\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  General
  contents:
  - "5.1.  General\n   The security and strength of this algorithm depend on the properties\n\
    \   of the underlying building block HOTP, which is a construction based\n   on\
    \ HMAC [RFC2104] using SHA-1 as the hash function.\n   The conclusion of the security\
    \ analysis detailed in [RFC4226] is\n   that, for all practical purposes, the\
    \ outputs of the dynamic\n   truncation on distinct inputs are uniformly and independently\n\
    \   distributed strings.\n   The analysis demonstrates that the best possible\
    \ attack against the\n   HOTP function is the brute force attack.\n   As indicated\
    \ in the algorithm requirement section, keys SHOULD be\n   chosen at random or\
    \ using a cryptographically strong pseudorandom\n   generator properly seeded\
    \ with a random value.\n   Keys SHOULD be of the length of the HMAC output to\
    \ facilitate\n   interoperability.\n   We RECOMMEND following the recommendations\
    \ in [RFC4086] for all\n   pseudorandom and random number generations.  The pseudorandom\
    \ numbers\n   used for generating the keys SHOULD successfully pass the randomness\n\
    \   test specified in [CN], or a similar well-recognized test.\n   All the communications\
    \ SHOULD take place over a secure channel, e.g.,\n   Secure Socket Layer/Transport\
    \ Layer Security (SSL/TLS) [RFC5246] or\n   IPsec connections [RFC4301].\n   We\
    \ also RECOMMEND storing the keys securely in the validation system,\n   and,\
    \ more specifically, encrypting them using tamper-resistant\n   hardware encryption\
    \ and exposing them only when required: for\n   example, the key is decrypted\
    \ when needed to verify an OTP value, and\n   re-encrypted immediately to limit\
    \ exposure in the RAM to a short\n   period of time.\n   The key store MUST be\
    \ in a secure area, to avoid, as much as\n   possible, direct attack on the validation\
    \ system and secrets\n   database.  Particularly, access to the key material should\
    \ be limited\n   to programs and processes required by the validation system only.\n"
- title: 5.2.  Validation and Time-Step Size
  contents:
  - "5.2.  Validation and Time-Step Size\n   An OTP generated within the same time\
    \ step will be the same.  When an\n   OTP is received at a validation system,\
    \ it doesn't know a client's\n   exact timestamp when an OTP was generated.  The\
    \ validation system may\n   typically use the timestamp when an OTP is received\
    \ for OTP\n   comparison.  Due to network latency, the gap (as measured by T,\
    \ that\n   is, the number of time steps since T0) between the time that the OTP\n\
    \   was generated and the time that the OTP arrives at the receiving\n   system\
    \ may be large.  The receiving time at the validation system and\n   the actual\
    \ OTP generation may not fall within the same time-step\n   window that produced\
    \ the same OTP.  When an OTP is generated at the\n   end of a time-step window,\
    \ the receiving time most likely falls into\n   the next time-step window.  A\
    \ validation system SHOULD typically set\n   a policy for an acceptable OTP transmission\
    \ delay window for\n   validation.  The validation system should compare OTPs\
    \ not only with\n   the receiving timestamp but also the past timestamps that\
    \ are within\n   the transmission delay.  A larger acceptable delay window would\n\
    \   expose a larger window for attacks.  We RECOMMEND that at most one\n   time\
    \ step is allowed as the network delay.\n   The time-step size has an impact on\
    \ both security and usability.  A\n   larger time-step size means a larger validity\
    \ window for an OTP to be\n   accepted by a validation system.  There are implications\
    \ for using a\n   larger time-step size, as follows:\n   First, a larger time-step\
    \ size exposes a larger window to attack.\n   When an OTP is generated and exposed\
    \ to a third party before it is\n   consumed, the third party can consume the\
    \ OTP within the time-step\n   window.\n   We RECOMMEND a default time-step size\
    \ of 30 seconds.  This default\n   value of 30 seconds is selected as a balance\
    \ between security and\n   usability.\n   Second, the next different OTP must\
    \ be generated in the next time-\n   step window.  A user must wait until the\
    \ clock moves to the next\n   time-step window from the last submission.  The\
    \ waiting time may not\n   be exactly the length of the time step, depending on\
    \ when the last\n   OTP was generated.  For example, if the last OTP was generated\
    \ at the\n   halfway point in a time-step window, the waiting time for the next\n\
    \   OTP is half the length of the time step.  In general, a larger time-\n   step\
    \ window means a longer waiting time for a user to get the next\n   valid OTP\
    \ after the last successful OTP validation.  A too-large\n   window (for example,\
    \ 10 minutes) most probably won't be suitable for\n   typical Internet login use\
    \ cases; a user may not be able to get the\n   next OTP within 10 minutes and\
    \ therefore will have to re-login to the\n   same site in 10 minutes.\n   Note\
    \ that a prover may send the same OTP inside a given time-step\n   window multiple\
    \ times to a verifier.  The verifier MUST NOT accept\n   the second attempt of\
    \ the OTP after the successful validation has\n   been issued for the first OTP,\
    \ which ensures one-time only use of an\n   OTP.\n"
- title: 6.  Resynchronization
  contents:
  - "6.  Resynchronization\n   Because of possible clock drifts between a client and\
    \ a validation\n   server, we RECOMMEND that the validator be set with a specific\
    \ limit\n   to the number of time steps a prover can be \"out of synch\" before\n\
    \   being rejected.\n   This limit can be set both forward and backward from the\
    \ calculated\n   time step on receipt of the OTP value.  If the time step is\n\
    \   30 seconds as recommended, and the validator is set to only accept\n   two\
    \ time steps backward, then the maximum elapsed time drift would be\n   around\
    \ 89 seconds, i.e., 29 seconds in the calculated time step and\n   60 seconds\
    \ for two backward time steps.\n   This would mean the validator could perform\
    \ a validation against the\n   current time and then two further validations for\
    \ each backward step\n   (for a total of 3 validations).  Upon successful validation,\
    \ the\n   validation server can record the detected clock drift for the token\n\
    \   in terms of the number of time steps.  When a new OTP is received\n   after\
    \ this step, the validator can validate the OTP with the current\n   timestamp\
    \ adjusted with the recorded number of time-step clock drifts\n   for the token.\n\
    \   Also, it is important to note that the longer a prover has not sent\n   an\
    \ OTP to a validation system, the longer (potentially) the\n   accumulated clock\
    \ drift between the prover and the verifier.  In such\n   cases, the automatic\
    \ resynchronization described above may not work\n   if the drift exceeds the\
    \ allowed threshold.  Additional\n   authentication measures should be used to\
    \ safely authenticate the\n   prover and explicitly resynchronize the clock drift\
    \ between the\n   prover and the validator.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors of this document would like to thank the\
    \ following people\n   for their contributions and support to make this a better\n\
    \   specification: Hannes Tschofenig, Jonathan Tuliani, David Dix,\n   Siddharth\
    \ Bajaj, Stu Veath, Shuh Chang, Oanh Hoang, John Huang, and\n   Siddhartha Mohapatra.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC: Keyed-\n              Hashing for Message Authentication\", RFC 2104,\n\
    \              February 1997.\n   [RFC2119]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n     \
    \         \"Randomness Recommendations for Security\", BCP 106,\n            \
    \  RFC 4086, June 2005.\n   [RFC4226]  M'Raihi, D., Bellare, M., Hoornaert, F.,\
    \ Naccache, D., and\n              O. Ranen, \"HOTP: An HMAC-Based One-Time Password\n\
    \              Algorithm\", RFC 4226, December 2005.\n   [SHA2]     NIST, \"FIPS\
    \ PUB 180-3: Secure Hash Standard (SHS)\",\n              October 2008, <http://csrc.nist.gov/publications/fips/\n\
    \              fips180-3/fips180-3_final.pdf>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [CN]       Coron, J. and D. Naccache, \"An Accurate\
    \ Evaluation of\n              Maurer's Universal Test\", LNCS 1556, February\
    \ 1999,\n              <http://www.gemplus.com/smart/rd/publications/pdf/\n  \
    \            CN99maur.pdf>.\n   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n              Internet Protocol\", RFC 4301, December 2005.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC6030]  Hoyer, P., Pei,\
    \ M., and S. Machani, \"Portable Symmetric\n              Key Container (PSKC)\"\
    , RFC 6030, October 2010.\n   [UT]       Wikipedia, \"Unix time\", February 2011,\n\
    \              <http://en.wikipedia.org/wiki/Unix_time>.\n"
- title: 'Appendix A.  TOTP Algorithm: Reference Implementation'
  contents:
  - "Appendix A.  TOTP Algorithm: Reference Implementation\n <CODE BEGINS>\n /**\n\
    \ Copyright (c) 2011 IETF Trust and the persons identified as\n authors of the\
    \ code. All rights reserved.\n Redistribution and use in source and binary forms,\
    \ with or without\n modification, is permitted pursuant to, and subject to the\
    \ license\n terms contained in, the Simplified BSD License set forth in Section\n\
    \ 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents\n (http://trustee.ietf.org/license-info).\n\
    \ */\n import java.lang.reflect.UndeclaredThrowableException;\n import java.security.GeneralSecurityException;\n\
    \ import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n\
    \ import javax.crypto.Mac;\n import javax.crypto.spec.SecretKeySpec;\n import\
    \ java.math.BigInteger;\n import java.util.TimeZone;\n /**\n  * This is an example\
    \ implementation of the OATH\n  * TOTP algorithm.\n  * Visit www.openauthentication.org\
    \ for more information.\n  *\n  * @author Johan Rydell, PortWise, Inc.\n  */\n\
    \ public class TOTP {\n     private TOTP() {}\n     /**\n      * This method uses\
    \ the JCE to provide the crypto algorithm.\n      * HMAC computes a Hashed Message\
    \ Authentication Code with the\n      * crypto hash algorithm as a parameter.\n\
    \      *\n      * @param crypto: the crypto algorithm (HmacSHA1, HmacSHA256,\n\
    \      *                             HmacSHA512)\n      * @param keyBytes: the\
    \ bytes to use for the HMAC key\n      * @param text: the message or text to be\
    \ authenticated\n      */\n     private static byte[] hmac_sha(String crypto,\
    \ byte[] keyBytes,\n             byte[] text){\n         try {\n             Mac\
    \ hmac;\n             hmac = Mac.getInstance(crypto);\n             SecretKeySpec\
    \ macKey =\n                 new SecretKeySpec(keyBytes, \"RAW\");\n         \
    \    hmac.init(macKey);\n             return hmac.doFinal(text);\n         } catch\
    \ (GeneralSecurityException gse) {\n             throw new UndeclaredThrowableException(gse);\n\
    \         }\n     }\n     /**\n      * This method converts a HEX string to Byte[]\n\
    \      *\n      * @param hex: the HEX string\n      *\n      * @return: a byte\
    \ array\n      */\n     private static byte[] hexStr2Bytes(String hex){\n    \
    \     // Adding one byte to get the right conversion\n         // Values starting\
    \ with \"0\" can be converted\n         byte[] bArray = new BigInteger(\"10\"\
    \ + hex,16).toByteArray();\n         // Copy all the REAL bytes, not the \"first\"\
    \n         byte[] ret = new byte[bArray.length - 1];\n         for (int i = 0;\
    \ i < ret.length; i++)\n             ret[i] = bArray[i+1];\n         return ret;\n\
    \     }\n     private static final int[] DIGITS_POWER\n     // 0 1  2   3    4\
    \     5      6       7        8\n     = {1,10,100,1000,10000,100000,1000000,10000000,100000000\
    \ };\n     /**\n      * This method generates a TOTP value for the given\n   \
    \   * set of parameters.\n      *\n      * @param key: the shared secret, HEX\
    \ encoded\n      * @param time: a value that reflects a time\n      * @param returnDigits:\
    \ number of digits to return\n      *\n      * @return: a numeric String in base\
    \ 10 that includes\n      *              {@link truncationDigits} digits\n   \
    \   */\n     public static String generateTOTP(String key,\n             String\
    \ time,\n             String returnDigits){\n         return generateTOTP(key,\
    \ time, returnDigits, \"HmacSHA1\");\n     }\n     /**\n      * This method generates\
    \ a TOTP value for the given\n      * set of parameters.\n      *\n      * @param\
    \ key: the shared secret, HEX encoded\n      * @param time: a value that reflects\
    \ a time\n      * @param returnDigits: number of digits to return\n      *\n \
    \     * @return: a numeric String in base 10 that includes\n      *          \
    \    {@link truncationDigits} digits\n      */\n     public static String generateTOTP256(String\
    \ key,\n             String time,\n             String returnDigits){\n      \
    \   return generateTOTP(key, time, returnDigits, \"HmacSHA256\");\n     }\n  \
    \   /**\n      * This method generates a TOTP value for the given\n      * set\
    \ of parameters.\n      *\n      * @param key: the shared secret, HEX encoded\n\
    \      * @param time: a value that reflects a time\n      * @param returnDigits:\
    \ number of digits to return\n      *\n      * @return: a numeric String in base\
    \ 10 that includes\n      *              {@link truncationDigits} digits\n   \
    \   */\n     public static String generateTOTP512(String key,\n             String\
    \ time,\n             String returnDigits){\n         return generateTOTP(key,\
    \ time, returnDigits, \"HmacSHA512\");\n     }\n     /**\n      * This method\
    \ generates a TOTP value for the given\n      * set of parameters.\n      *\n\
    \      * @param key: the shared secret, HEX encoded\n      * @param time: a value\
    \ that reflects a time\n      * @param returnDigits: number of digits to return\n\
    \      * @param crypto: the crypto function to use\n      *\n      * @return:\
    \ a numeric String in base 10 that includes\n      *              {@link truncationDigits}\
    \ digits\n      */\n     public static String generateTOTP(String key,\n     \
    \        String time,\n             String returnDigits,\n             String\
    \ crypto){\n         int codeDigits = Integer.decode(returnDigits).intValue();\n\
    \         String result = null;\n         // Using the counter\n         // First\
    \ 8 bytes are for the movingFactor\n         // Compliant with base RFC 4226 (HOTP)\n\
    \         while (time.length() < 16 )\n             time = \"0\" + time;\n   \
    \      // Get the HEX in a Byte[]\n         byte[] msg = hexStr2Bytes(time);\n\
    \         byte[] k = hexStr2Bytes(key);\n         byte[] hash = hmac_sha(crypto,\
    \ k, msg);\n         // put selected bytes into result int\n         int offset\
    \ = hash[hash.length - 1] & 0xf;\n         int binary =\n             ((hash[offset]\
    \ & 0x7f) << 24) |\n             ((hash[offset + 1] & 0xff) << 16) |\n       \
    \      ((hash[offset + 2] & 0xff) << 8) |\n             (hash[offset + 3] & 0xff);\n\
    \         int otp = binary % DIGITS_POWER[codeDigits];\n         result = Integer.toString(otp);\n\
    \         while (result.length() < codeDigits) {\n             result = \"0\"\
    \ + result;\n         }\n         return result;\n     }\n     public static void\
    \ main(String[] args) {\n         // Seed for HMAC-SHA1 - 20 bytes\n         String\
    \ seed = \"3132333435363738393031323334353637383930\";\n         // Seed for HMAC-SHA256\
    \ - 32 bytes\n         String seed32 = \"3132333435363738393031323334353637383930\"\
    \ +\n         \"313233343536373839303132\";\n         // Seed for HMAC-SHA512\
    \ - 64 bytes\n         String seed64 = \"3132333435363738393031323334353637383930\"\
    \ +\n         \"3132333435363738393031323334353637383930\" +\n         \"3132333435363738393031323334353637383930\"\
    \ +\n         \"31323334\";\n         long T0 = 0;\n         long X = 30;\n  \
    \       long testTime[] = {59L, 1111111109L, 1111111111L,\n                 1234567890L,\
    \ 2000000000L, 20000000000L};\n         String steps = \"0\";\n         DateFormat\
    \ df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n         df.setTimeZone(TimeZone.getTimeZone(\"\
    UTC\"));\n         try {\n             System.out.println(\n                 \
    \    \"+---------------+-----------------------+\" +\n             \"------------------+--------+--------+\"\
    );\n             System.out.println(\n                     \"|  Time(sec)    |\
    \   Time (UTC format)   \" +\n             \"| Value of T(Hex)  |  TOTP  | Mode\
    \   |\");\n             System.out.println(\n                     \"+---------------+-----------------------+\"\
    \ +\n             \"------------------+--------+--------+\");\n             for\
    \ (int i=0; i<testTime.length; i++) {\n                 long T = (testTime[i]\
    \ - T0)/X;\n                 steps = Long.toHexString(T).toUpperCase();\n    \
    \             while (steps.length() < 16) steps = \"0\" + steps;\n           \
    \      String fmtTime = String.format(\"%1$-11s\", testTime[i]);\n           \
    \      String utcTime = df.format(new Date(testTime[i]*1000));\n             \
    \    System.out.print(\"|  \" + fmtTime + \"  |  \" + utcTime +\n            \
    \             \"  | \" + steps + \" |\");\n                 System.out.println(generateTOTP(seed,\
    \ steps, \"8\",\n                 \"HmacSHA1\") + \"| SHA1   |\");\n         \
    \        System.out.print(\"|  \" + fmtTime + \"  |  \" + utcTime +\n        \
    \                 \"  | \" + steps + \" |\");\n                 System.out.println(generateTOTP(seed32,\
    \ steps, \"8\",\n                 \"HmacSHA256\") + \"| SHA256 |\");\n       \
    \          System.out.print(\"|  \" + fmtTime + \"  |  \" + utcTime +\n      \
    \                   \"  | \" + steps + \" |\");\n                 System.out.println(generateTOTP(seed64,\
    \ steps, \"8\",\n                 \"HmacSHA512\") + \"| SHA512 |\");\n       \
    \          System.out.println(\n                         \"+---------------+-----------------------+\"\
    \ +\n                 \"------------------+--------+--------+\");\n          \
    \   }\n         }catch (final Exception e){\n             System.out.println(\"\
    Error : \" + e);\n         }\n     }\n }\n <CODE ENDS>\n"
- title: Appendix B.  Test Vectors
  contents:
  - "Appendix B.  Test Vectors\n   This section provides test values that can be used\
    \ for the HOTP time-\n   based variant algorithm interoperability test.\n   The\
    \ test token shared secret uses the ASCII string value\n   \"12345678901234567890\"\
    .  With Time Step X = 30, and the Unix epoch as\n   the initial value to count\
    \ time steps, where T0 = 0, the TOTP\n   algorithm will display the following\
    \ values for specified modes and\n   timestamps.\n  +-------------+--------------+------------------+----------+--------+\n\
    \  |  Time (sec) |   UTC Time   | Value of T (hex) |   TOTP   |  Mode  |\n  +-------------+--------------+------------------+----------+--------+\n\
    \  |      59     |  1970-01-01  | 0000000000000001 | 94287082 |  SHA1  |\n  |\
    \             |   00:00:59   |                  |          |        |\n  |   \
    \   59     |  1970-01-01  | 0000000000000001 | 46119246 | SHA256 |\n  |      \
    \       |   00:00:59   |                  |          |        |\n  |      59 \
    \    |  1970-01-01  | 0000000000000001 | 90693936 | SHA512 |\n  |            \
    \ |   00:00:59   |                  |          |        |\n  |  1111111109 | \
    \ 2005-03-18  | 00000000023523EC | 07081804 |  SHA1  |\n  |             |   01:58:29\
    \   |                  |          |        |\n  |  1111111109 |  2005-03-18  |\
    \ 00000000023523EC | 68084774 | SHA256 |\n  |             |   01:58:29   |   \
    \               |          |        |\n  |  1111111109 |  2005-03-18  | 00000000023523EC\
    \ | 25091201 | SHA512 |\n  |             |   01:58:29   |                  | \
    \         |        |\n  |  1111111111 |  2005-03-18  | 00000000023523ED | 14050471\
    \ |  SHA1  |\n  |             |   01:58:31   |                  |          | \
    \       |\n  |  1111111111 |  2005-03-18  | 00000000023523ED | 67062674 | SHA256\
    \ |\n  |             |   01:58:31   |                  |          |        |\n\
    \  |  1111111111 |  2005-03-18  | 00000000023523ED | 99943326 | SHA512 |\n  |\
    \             |   01:58:31   |                  |          |        |\n  |  1234567890\
    \ |  2009-02-13  | 000000000273EF07 | 89005924 |  SHA1  |\n  |             | \
    \  23:31:30   |                  |          |        |\n  |  1234567890 |  2009-02-13\
    \  | 000000000273EF07 | 91819424 | SHA256 |\n  |             |   23:31:30   |\
    \                  |          |        |\n  |  1234567890 |  2009-02-13  | 000000000273EF07\
    \ | 93441116 | SHA512 |\n  |             |   23:31:30   |                  | \
    \         |        |\n  |  2000000000 |  2033-05-18  | 0000000003F940AA | 69279037\
    \ |  SHA1  |\n  |             |   03:33:20   |                  |          | \
    \       |\n  |  2000000000 |  2033-05-18  | 0000000003F940AA | 90698825 | SHA256\
    \ |\n  |             |   03:33:20   |                  |          |        |\n\
    \  |  2000000000 |  2033-05-18  | 0000000003F940AA | 38618901 | SHA512 |\n  |\
    \             |   03:33:20   |                  |          |        |\n  | 20000000000\
    \ |  2603-10-11  | 0000000027BC86AA | 65353130 |  SHA1  |\n  |             | \
    \  11:33:20   |                  |          |        |\n  | 20000000000 |  2603-10-11\
    \  | 0000000027BC86AA | 77737706 | SHA256 |\n  |             |   11:33:20   |\
    \                  |          |        |\n  | 20000000000 |  2603-10-11  | 0000000027BC86AA\
    \ | 47863826 | SHA512 |\n  |             |   11:33:20   |                  | \
    \         |        |\n  +-------------+--------------+------------------+----------+--------+\n\
    \                            Table 1: TOTP Table\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David M'Raihi\n   Verisign, Inc.\n   685 E. Middlefield\
    \ Road\n   Mountain View, CA  94043\n   USA\n   EMail: davidietf@gmail.com\n \
    \  Salah Machani\n   Diversinet Corp.\n   2225 Sheppard Avenue East, Suite 1801\n\
    \   Toronto, Ontario  M2J 5C2\n   Canada\n   EMail: smachani@diversinet.com\n\
    \   Mingliang Pei\n   Symantec\n   510 E. Middlefield Road\n   Mountain View,\
    \ CA  94043\n   USA\n   EMail: Mingliang_Pei@symantec.com\n   Johan Rydell\n \
    \  Portwise, Inc.\n   275 Hawthorne Ave., Suite 119\n   Palo Alto, CA  94301\n\
    \   USA\n   EMail: johanietf@gmail.com\n"
