- title: __initial_text__
  contents:
  - '                        FTP extension: XRSQ/XRCP

    '
- title: This RFC describes an extension to FTP which allows the user of an ITS
  contents:
  - 'This RFC describes an extension to FTP which allows the user of an ITS

    '
- title: FTP server (i.e. on MIT-(AI/ML/MC/DMS)) to mail the text of a message to
  contents:
  - 'FTP server (i.e. on MIT-(AI/ML/MC/DMS)) to mail the text of a message to

    '
- title: several recipients simultaneously; such message transmission is far more
  contents:
  - 'several recipients simultaneously; such message transmission is far more

    '
- title: efficient than the current practice of sending the text again and again
  contents:
  - 'efficient than the current practice of sending the text again and again

    '
- title: for each additional recipient at a site.
  contents:
  - 'for each additional recipient at a site.

    '
- title: Within this extension, there are two basic ways of sending a single text
  contents:
  - 'Within this extension, there are two basic ways of sending a single text

    '
- title: to several recipients.  In one, all recipients are specified first, and
  contents:
  - 'to several recipients.  In one, all recipients are specified first, and

    '
- title: then the text is sent; in the other, the order is reversed and the text
  contents:
  - 'then the text is sent; in the other, the order is reversed and the text

    '
- title: is sent first, followed by the recipients.  Both schemes are necessary
  contents:
  - 'is sent first, followed by the recipients.  Both schemes are necessary

    '
- title: becaue neither by itself is optimal for all systems, as will be
  contents:
  - 'becaue neither by itself is optimal for all systems, as will be

    '
- title: explained later.  To select a particular scheme, the XRSQ command is
  contents:
  - 'explained later.  To select a particular scheme, the XRSQ command is

    '
- title: used; to specify recipients after a scheme is chosen, XRCP commands are
  contents:
  - 'used; to specify recipients after a scheme is chosen, XRCP commands are

    '
- title: given; and to furnish text, the usual MAIL or MLFL commands apply.
  contents:
  - 'given; and to furnish text, the usual MAIL or MLFL commands apply.

    '
- title: 'Scheme Selection: XRSQ'
  contents:
  - "Scheme Selection: XRSQ\n   XRSQ is the means by which a user program can test\
    \ for implementation\n   of XRSQ/XRCP, select a particular scheme, reset its state\
    \ thereof,\n   and even do some rudimentary negotiation.  Its format is like that\
    \ of\n   the TYPE command, as follows:\n      XRSQ [<SP> <scheme>] <CRLF>\n  \
    \    <scheme> = a single character.  The following are defined:\n         R  Recipients\
    \ first.  If not implemented, T must be.\n         T  Text first.  If this is\
    \ not implemented, R must be.\n         ?  Request for preference.  Must always\
    \ be implemented.\n         No argument means a \"selection\" of none of the schemes\
    \ (the\n         default).\n      Replies:\n         200 OK, we'll use specified\
    \ scheme.\n         215 <scheme> This is the scheme I prefer.\n         501 I\
    \ understand XRSQ but can't use that scheme.\n         5xx Command unrecognized\
    \ or unimplemented.\n         See Appendix A for more about the choice of reply\
    \ codes.\n   Three aspects of XRSQ need to be pointed out here.  The first is\
    \ that\n"
- title: An Extension to FTP
  contents:
  - "An Extension to FTP\n   an XRSQ with no argument must always return a 200 reply\
    \ and restore\n   the default state of having no scheme selected.  Any other reply\n\
    \   implies that XRSQ and hence XRCP are not understood or cannot be\n   performed\
    \ correctly.\n   The second is that the use of \"?\" as a <scheme> asks the FTP\
    \ server\n   to return a 215 reply in which the server specifies a \"preferred\"\
    \n   scheme.  The format of this reply is simple:\n      215 <SP> <scheme> [<SP>\
    \ <arbitrary text>] <CRLF>\n      Any other reply (e.g. 4xx or 5xx) implies that\
    \ XRSQ and XRCP are\n      not implemented, because \"?\" must always be implemented\
    \ if XRSQ\n      is.\n   The third important thing about XRSQ is that it always\
    \ has the side\n   effect of resetting all schemes to their initial state.  This\
    \ reset\n   must be done no matter what the reply will be - 200, 215, or 501.\n\
    \   The actions necessary for a reset will be explained when discussing\n   how\
    \ each scheme actually works.\n"
- title: 'Message Text Specification: MAIL/MLFL'
  contents:
  - "Message Text Specification: MAIL/MLFL\n   Regardless of which scheme (if any)\
    \ has been selected, a MAIL or MLFL\n   with a non-null argument will behave exactly\
    \ as before; this\n   extension has no effect on them.  However, such normal MAIL/MLFL\n\
    \   commands do have the same side effect as XRSQ; they \"reset\" the\n   current\
    \ scheme to its initial state.\n   It is only when the argument is null (e.g.\
    \ MAIL<CRLF> or MLFL<CRLF>)\n   that the particular scheme being used is important,\
    \ because rather\n   than producing an error (as most servers currently do), the\
    \ server\n   will accept message text for this \"null\" specification; what it\
    \ does\n   with it depends on which scheme is in effect, and will be described\n\
    \   in \"Scheme Mechanics\".\n"
- title: 'Recipient specification: XRCP'
  contents:
  - "Recipient specification: XRCP\n   In order to specify recipient names and receive\
    \ some acknowledgement\n   (or refusal) for each name, the following new command\
    \ is also\n   defined:\n      XRCP <SP> <Recipient name> <CRLF>\n      Reply for\
    \ no scheme:\n         507 No scheme specified yet; use XRSQ.\n      Replies for\
    \ scheme T are identical to those for MAIL/MLFL.\n"
- title: An Extension to FTP
  contents:
  - "An Extension to FTP\n      Replies for scheme R (recipients first):\n       \
    \  200 OK, name stored.\n         440 Recipient table full, this name not stored.\n\
    \         450 Recipient name rejected. (Permanent!)\n         520 Recipient name\
    \ rejected.\n         4xx Temporary error, try this name again later.\n      \
    \   5xx Permanent error, report to sender.\n         See Appendix A for more about\
    \ the choice of reply codes.\n   Note that use of this command is an error if\
    \ no scheme has been\n   selected yet; an XRSQ <scheme> must have been given if\
    \ XRCP is to be\n   used.\n"
- title: 'Scheme mechanics: XRSQ R (Recipients first)'
  contents:
  - "Scheme mechanics: XRSQ R (Recipients first)\n   In the recipients-first scheme,\
    \ XRCP is used to specify names which\n   the FTP server stores in a list or table.\
    \  Normally the reply for\n   each XRCP will be either a 200 for acceptance, or\
    \ a 4xx/5xx code for\n   rejection; 450 and all 5xx codes are permanent rejections\
    \ (e.g. user\n   not known) which should be reported to the human sender, whereas\
    \ 4xx\n   codes in general connote some temporary error that may be rectified\n\
    \   later.  None of the 4xx/5xx replies impinge on previous or succeeding\n  \
    \ XRCP commands, except for 440 which indicates that no further XRCP's\n   will\
    \ succeed unless a message is sent to the already stored\n   recipients or a reset\
    \ is done.\n   Sending message text to stored recipients is done by giving a MAIL\
    \ or\n   MLFL command with no argument; that is, just MAIL<CRLF> or\n   MLFL<CRLF>.\
    \  Transmission of the message text is exactly the same as\n   for normal MAIL/MLFL;\
    \ however, a positive acknowledgement at the end\n   of transmission means that\
    \ the message has been sent to ALL\n   recipients that were remembered with XRCP,\
    \ and a failure code means\n   that it should be considered to have failed for\
    \ ALL of these\n   specified recipients.  This applies regardless of the actual\
    \ error\n   code; and whether the reply signifies success or failure, all stored\n\
    \   recipient names are flushed and forgotten - in other words, things\n   are\
    \ reset to their initial state.  This purging of the recipient name\n   list must\
    \ also be done as the \"reset\" side effect of any use of XRSQ.\n   A 440 reply\
    \ to an XRCP can thus be handled by using a MAIL/MLFL to\n   specify the message\
    \ for currently stored recipients, and then sending\n   more XRCP's and another\
    \ MAIL/MLFL, as many times as necessary; for\n   example, if a server only had\
    \ room for 10 names this would result in\n   a 50-recipient message being sent\
    \ 5 times, to 10 different recipients\n   each time.\n   If a user attempts to\
    \ specify message text (MAIL/MLFL with no\n"
- title: An Extension to FTP
  contents:
  - "An Extension to FTP\n   argument) before any successful XRCP's have been given,\
    \ this should\n   be treated exactly as a \"normal\" MAIL/MLFL with a null recipient\n\
    \   would be; most servers will return an error of some type, such as\n   \"450\
    \ Null recipient\".\n   See Appendix B for an example using XRSQ R.\n"
- title: 'Scheme mechanics: XRSQ T (Text first)'
  contents:
  - "Scheme mechanics: XRSQ T (Text first)\n   In the text-first scheme, MAIL/MLFL\
    \ with no argument is used to\n   specify message text, which the server stores\
    \ away.  Succeeding\n   XRCP's are then treated as if they were MAIL/MLFL commands,\
    \ except\n   that none of the text transfer manipulations are done; the stored\n\
    \   message text is sent to the specified recipient, and a reply code is\n   returned\
    \ identical to that which an actual MAIL/MLFL would invoke.\n   (Note ANY 2xx\
    \ code indicates success.)\n   The stored message text is not forgotten until\
    \ the next MAIL/MLFL or\n   XRSQ, which will either replace it with new text or\
    \ flush it\n   entirely.  Any use of XRSQ will reset this scheme by flushing stored\n\
    \   text, as will any use of MAIL/MLFL with a non-null argument.\n   If an XRCP\
    \ is seen before any message text has been stored, the user\n   in effect is trying\
    \ to send a null message; some servers might allow\n   this, others would return\
    \ an error code.\n   See Appendix C for an example using XRSQ T.\n"
- title: Why two schemes anyway?
  contents:
  - "Why two schemes anyway?\n   Because neither by itself is optimal for all systems.\
    \  XRSQ R allows\n   more of a \"bulk\" mailing, because everything is saved up\
    \ and then\n   mailed simultaneously; this is very useful for systems such as\
    \ ITS\n   where the FTP server does not itself write mail directly, but hands\n\
    \   it on to a central mailer demon of great power; the more information\n   (e.g.\
    \ recipients) associated with a single \"hand-off\", the more\n   efficiently\
    \ mail can be delivered.\n   By contrast, XRSQ T is geared to FTP servers which\
    \ want to deliver\n   mail directly, in one-by-one incremental fashion.  This\
    \ way they can\n   return an individual success/failure reply code for each recipient\n\
    \   given which may depend on variable file system factors such as\n   exceeding\
    \ disk allocation, mailbox access conflicts, and so forth; if\n   they tried to\
    \ emulate XRSQ R's bulk mailing, they would have to\n   ensure that a success\
    \ reply to the MAIL/MLFL indeed meant that it had\n   been delivered to ALL recipients\
    \ specified - not just some.\n"
- title: An Extension to FTP
  contents:
  - 'An Extension to FTP

    '
- title: 'Stray notes:'
  contents:
  - "Stray notes:\n   * Because this is after all an extension of FTP protocol, one\
    \ must be\n   prepared to deal with sites which don't recognize either XRSQ or\n\
    \   XRCP.  \"XRSQ\" and \"XRSQ ?\" are explicitly designed as tests to see\n \
    \  whether either scheme is implemented; XRCP is not, and a failure\n   return\
    \ of the \"unimplemented\" variety could be confused with \"No\n   scheme selected\
    \ yet\", or even with \"Recipient unknown\".  Be safe, be\n   sure, use XRSQ!\n\
    \   * There is no way to indicate in a positive response to \"XRSQ ?\" that\n\
    \   the preferred \"scheme\" for a server is that of the default state;\n   i.e.\
    \ none of the multi-recipient schemes.  The rationale is that in\n   this case,\
    \ it would be pointless to implement XRSQ/XRCP at all, and\n   the response would\
    \ therefore be negative.\n   * One reason that the use of MAIL/MLFL is restricted\
    \ to null\n   arguments with this multi-recipient extension is the ambiguity that\n\
    \   would result if a non-null argument were allowed; for example, if\n   XRSQ\
    \ R was in effect and some XRCP's had been given, and a MAIL\n   FOO<CRLF> was\
    \ done, there would be no way to distinguish a failure\n   reply for mailbox \"\
    FOO\" from a global failure for all recipients\n   specified.  A similar situation\
    \ exists for XRSQ T; it would not be\n   clear whether the text was stored and\
    \ the mailbox failed, or vice\n   versa, or both.\n   * \"Resets\" are done by\
    \ all XRSQ's and \"normal\" MAIL/MLFL's to avoid\n   confusion and overly complicated\
    \ implementation.  The XRSQ command\n   implies a change or uncertainty of status,\
    \ and the latter commands\n   would otherwise have to use some independent mechanisms\
    \ to avoid\n   clobbering the data bases (e.g. message text storage area) used\
    \ by\n   the T/R schemes.  However, once a scheme is selected, it remains \"in\n\
    \   effect\" just as a \"TYPE A\" or \"BYTE 8\" remains selected.  The\n   recommended\
    \ way for doing a reset, without changing the current\n   selection, is with \"\
    XRSQ ?\".  Remember that \"XRSQ\" alone reverts to\n   the no-scheme state.\n\
    \   * It is permissible to intersperse other FTP commands among the\n   XRSQ/XRCP/MAIL\
    \ sequences.\n"
- title: Appendix A - on FTP reply codes
  contents:
  - "Appendix A - on FTP reply codes\n                           On FTP reply codes\n\
    \   The choice of appropriate reply codes for new or experimental\n   commands\
    \ is difficult because there have been three possible\n   \"official\" sets of\
    \ codes which one may draw on, and it is not clear\n   which of them might be\
    \ in use at any particular site; these are (1)\n   Old FTP, (2) New FTP, (3) Revised\
    \ New FTP.  In my choice of code\n   assignments, I have for the most part ignored\
    \ these and used RFC 691,\n   \"One More Try on the FTP\", by Brian Harvey.  My\
    \ motivation for this\n   is the simple observation that I know of no site which\
    \ implements\n   \"new FTP\", and RFC 691 incorporates much of the \"new FTP\"\
    \ reply code\n   logic into the framework of \"old FTP\".  The only sharp conflict\
    \ is\n   treated by allowing 450 to have its \"old\" meaning, equivalent to 520\n\
    \   - permanent failure.  Note that when testing to see whether a site\n   understands\
    \ a FTP command, a reply of 5xx (specifically, 500) will\n   generally indicate,\
    \ for all sets of codes, that the command is\n   unrecognized.\n   By the way,\
    \ I recommend RFC 691 as required reading for FTP\n   implementors; maybe if enough\
    \ people get together this mess can be\n   straightened out.\n"
- title: Appendix B - Example of XRSQ R
  contents:
  - "Appendix B - Example of XRSQ R\n                  Example of XRSQ R (Recipients\
    \ first)\n   This is an example of how XRSQ R is used; first the user must\n \
    \  establish that the server in fact implements XRSQ:\n      U: XRSQ\n      S:\
    \ 200 OK, no scheme selected.\n   An XRSQ with a null argument always returns\
    \ a 200 if implemented,\n   selecting the \"scheme\" of null, i.e. none of them.\
    \  If XRSQ were not\n   implemented, a code of 4xx or 5xx would be returned.\n\
    \      U: XRSQ R\n      S: 200 OK, using that scheme\n   All's well; now the recipients\
    \ can be specified.\n      U: XRCP Foo\n      S: 200 OK\n      U: XRCP Raboof\n\
    \      S: 520 Who's that?  No such user here.\n      U: XRCP bar\n      S: 200\
    \ OK\n   Well, two out of three ain't bad.  Note that the demise of \"Raboof\"\
    \n   has no effect on the storage of \"Foo\" or \"bar\".  Now to furnish the\n\
    \   message text, by giving a MAIL or MLFL with no argument:\n      U: MAIL\n\
    \      S: 350 Type mail, ended by <CRLF>.<CRLF>\n      U: Blah blah blah blah....etc\
    \ etc etc\n      U: .\n      S: 256 Mail sent.\n   The text has now been sent\
    \ to both \"Foo\" and \"bar\".\n"
- title: Appendix C - Example of XRSQ T
  contents:
  - "Appendix C - Example of XRSQ T\n                     Example of XRSQ T (Text\
    \ first)\n   Using the same message as the previous example:\n      U: XRSQ ?\n\
    \      S: 215 T Text first, please.\n   XRSQ is indeed implemented, and the server\
    \ says that it prefers \"T\",\n   but that needn't stop the user from trying something\
    \ else:\n      U: XRSQ R\n      S: 501 Sorry, I really can't do that.\n   Oh well.\
    \  It's possible that it could have understood \"R\" also, but\n   in general\
    \ it's best to use the \"preferred\" scheme, since the server\n   knows which\
    \ is most efficient for its particular site.  Anyway:\n      U: XRSQ T\n     \
    \ S: 200 OK, using that scheme.\n   Scheme \"T\" is now selected, and the text\
    \ must be sent:\n      U: MAIL\n      S: 350 Type mail, ended by <CRLF>.<CRLF>\n\
    \      U: Blah blah blah blah....etc etc etc\n      U: .\n      S: 256 Mail stored.\n\
    \   Now recipients can be specified:\n      U: XRCP Foo\n      S: 256 Stored mail\
    \ sent.\n      U: XRCP Raboof\n      S: 520 Who's that?  No such user here.\n\
    \      U: XRCP bar\n      S: 256 Stored mail sent.\n   Again, the text has now\
    \ been sent to both \"Foo\" and \"bar\", and still\n   remains stored.  A new\
    \ message can be sent with another MAIL/XRCP...\n   sequence, but the fastidious\
    \ or paranoid could chose to do:\n      U: XRSQ ?\n      S: 215 T Text first,\
    \ please.\n   Which resets things without altering the scheme in effect.\n"
