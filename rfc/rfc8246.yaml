- contents:
  - '                        HTTP Immutable Responses

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The immutable HTTP response Cache-Control extension allows servers
    to\n   identify resources that will not be updated during their freshness\n   lifetime.
    \ This ensures that a client never needs to revalidate a\n   cached fresh resource
    to be certain it has not been modified.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8246.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   3\n   2.  The Immutable Cache-Control Extension . . . . . . . . . . .
    .   3\n     2.1.  About Intermediaries  . . . . . . . . . . . . . . . . . .   4\n
    \    2.2.  Example . . . . . . . . . . . . . . . . . . . . . . . . .   4\n   3.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .   4\n   4.  IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .   5\n   5.  References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .   5\n     5.1.  Normative
    References  . . . . . . . . . . . . . . . . . .   5\n     5.2.  Informative References
    \ . . . . . . . . . . . . . . . . .   5\n   Acknowledgments . . . . . . . . .
    . . . . . . . . . . . . . . . .   6\n   Author's Address  . . . . . . . . . .
    . . . . . . . . . . . . . .   6\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   HTTP's freshness lifetime mechanism [RFC7234] allows a client
    to\n   safely reuse a stored response to satisfy future requests for a\n   specified
    period of time.  However, it is still possible that the\n   resource will be modified
    during that period.\n   For instance, a front-page newspaper photo with a freshness
    lifetime\n   of one hour would mean that no user would see a cached photo more\n
    \  than one hour old.  However, the photo could be updated at any time,\n   resulting
    in different users seeing different photos depending on the\n   contents of their
    caches for up to one hour.  This is compliant with\n   the caching mechanism defined
    in [RFC7234].\n   Users that need to confirm there have been no updates to their
    cached\n   responses typically use the reload (or refresh) mechanism in their\n
    \  user agents.  This in turn generates a conditional request [RFC7232],\n   and
    either a new representation or, if unmodified, a 304 (Not\n   Modified) response
    [RFC7232] is returned.  A user agent that\n   understands HTML and fetches its
    dependent sub-resources might issue\n   hundreds of conditional requests to refresh
    all portions of a common\n   page [REQPERPAGE].\n   However, some content providers
    never create more than one variant of\n   a sub-resource, because they use \"versioned\"
    URLs.  When these\n   resources need an update, they are simply published under
    a new URL,\n   typically embedding an identifier unique to that version of the\n
    \  resource in the path, and references to the sub-resource are updated\n   with
    the new path information.\n   For example, \"https://www.example.com/101016/main.css\"
    might be\n   updated and republished as \"https://www.example.com/102026/main.css\",\n
    \  with any links that reference it being changed at the same time.\n   This design
    pattern allows a very large freshness lifetime to be used\n   for the sub-resource
    without guessing when it will be updated in the\n   future.\n   Unfortunately,
    the user agent does not know when this versioned URL\n   design pattern is used.
    \ As a result, user-driven refreshes still\n   translate into wasted conditional
    requests for each sub-resource as\n   each will return 304 responses.\n   The
    immutable HTTP response Cache-Control extension allows servers to\n   identify
    responses that will not be updated during their freshness\n   lifetimes.\n   This
    effectively informs clients that any conditional request for\n   that response
    can be safely skipped without worrying that it has been\n   updated.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  The Immutable Cache-Control Extension\n   When present in an HTTP response,
    the immutable Cache-Control\n   extension indicates that the origin server will
    not update the\n   representation of that resource during the freshness lifetime
    of the\n   response.\n   Clients SHOULD NOT issue a conditional request during
    the response's\n   freshness lifetime (e.g., upon a reload) unless explicitly
    overridden\n   by the user (e.g., a force reload).\n   The immutable extension
    only applies during the freshness lifetime of\n   the stored response.  Stale
    responses SHOULD be revalidated as they\n   normally would be in the absence of
    the immutable extension.\n   The immutable extension takes no arguments.  If any
    arguments are\n   present, they have no meaning and MUST be ignored.  Multiple\n
    \  instances of the immutable extension are equivalent to one instance.\n   The
    presence of an immutable Cache-Control extension in a request has\n   no effect.\n"
  - contents:
    - "2.1.  About Intermediaries\n   An immutable response has the same semantic
      meaning when received by\n   proxy clients as it does when received by user-agent-based
      clients.\n   Therefore, proxies SHOULD skip conditionally revalidating fresh\n
      \  responses containing the immutable extension unless there is a signal\n   from
      the client that a validation is necessary (e.g., a no-cache\n   Cache-Control
      request directive defined in Section 5.2.1.4 of\n   [RFC7234]).\n   A proxy
      that uses the immutable extension to bypass a conditional\n   revalidation can
      choose whether to reply with a 304 or 200 response\n   to its requesting client
      based on the request headers the proxy\n   received.\n"
    title: 2.1.  About Intermediaries
  - contents:
    - "2.2.  Example\n   Cache-Control: max-age=31536000, immutable\n"
    title: 2.2.  Example
  title: 2.  The Immutable Cache-Control Extension
- contents:
  - "3.  Security Considerations\n   The immutable mechanism acts as form of soft
    pinning and, as with all\n   pinning mechanisms, creates a vector for amplification
    of cache\n   corruption incidents.  These incidents include cache-poisoning\n
    \  attacks.  Three mechanisms are suggested for mitigation of this risk:\n   o
    \ Clients SHOULD ignore the immutable extension from resources that\n      are
    not part of an authenticated context such as HTTPS.\n      Authenticated resources
    are less vulnerable to cache poisoning.\n   o  User agents often provide two different
    refresh mechanisms: reload\n      and some form of force-reload.  The latter is
    used to rectify\n      interrupted loads and other corruption.  These reloads,
    typically\n      indicated through no-cache request attributes, SHOULD ignore
    the\n      immutable extension as well.\n   o  Clients SHOULD ignore the immutable
    extension for resources that\n      do not provide a strong indication that the
    stored response size\n      is the correct response size such as responses delimited
    by\n      connection close.\n"
  title: 3.  Security Considerations
- contents:
  - "4.  IANA Considerations\n   The immutable extension has been registered in the
    \"Hypertext\n   Transfer Protocol (HTTP) Cache Directive Registry\" per the guidelines\n
    \  described in Section 7.1 of [RFC7234].\n   o  Cache Directive: immutable\n
    \  o  Reference: RFC 8246\n"
  title: 4.  IANA Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n              DOI
      10.17487/RFC7232, June 2014,\n              <https://www.rfc-editor.org/info/rfc7232>.\n
      \  [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [REQPERPAGE]\n              HTTP Archive,
      \"Total Requests per Page\",\n              <http://httparchive.org/interesting.php#reqTotal>.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Acknowledgments\n   Thank you to Ben Maurer for partnership in developing and
    testing\n   this idea.  Thank you to Amos Jeffries for help with proxy\n   interactions
    and to Mark Nottingham for help with the documentation.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Patrick McManus\n   Mozilla\n   Email: mcmanus@ducksong.com\n"
  title: Author's Address
