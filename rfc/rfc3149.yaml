- title: __initial_text__
  contents:
  - "                      MGCP Business Phone Packages\nStatus of this Memo\n   This\
    \ memo provides information for the Internet community.  It does\n   not specify\
    \ an Internet standard of any kind.  Distribution of this\n   memo is unlimited.\n\
    Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n\
    Abstract\n   This document describes a collection of MGCP (Media Gateway Control\n\
    \   Protocol) packages that can be used to take advantage of the feature\n   keys\
    \ and displays on digital business phones and IP-Phones.\nIESG Note\n   This document\
    \ is being published for the information of the\n   community.  It describes a\
    \ non-IETF protocol that is currently being\n   deployed in a number of products.\
    \  Implementers should be aware that\n   the IETF Megaco working group and the\
    \ ITU-T Study Group 16 have\n   produced a standards track RFC \"Megaco Protocol\
    \ Version 1.0\" (RFC\n   3015, also published as ITU recommendation H.248) which\
    \ addresses the\n   same problem space and are developing extensions to that protocol\
    \ for\n   functions of this type.\nTable of Contents\n   1. Introduction. . .\
    \ . . . . . . . . . . . . . . . . . . . . . 3\n       1.1 General Information.\
    \ . . . . . . . . . . . . . . . . . 4\n       1.2 Objectives . . . . . . . . .\
    \ . . . . . . . . . . . . . 5\n   2. MGCP Packages for Business Phones . . . .\
    \ . . . . . . . . . 5\n       2.1 Feature Key Package. . . . . . . . . . . . .\
    \ . . . . . 6\n       2.2 Business Phone Package . . . . . . . . . . . . . . .\
    \ . 9\n       2.3 Display XML Package. . . . . . . . . . . . . . . . . . 9\n \
    \  3. Endpoint Naming and Phone Type Determination. . . . . . . .10\n   4. Functions\
    \ that should be Locally Implemented. . . . . . . .11\n       4.1 Volume Control\
    \ . . . . . . . . . . . . . . . . . . . .11\n       4.2 Audio Path . . . . . .\
    \ . . . . . . . . . . . . . . . .11\n       4.3 Microphone mute button and light\
    \ . . . . . . . . . . .11\n   5. XML Package Support . . . . . . . . . . . . .\
    \ . . . . . . .12\n       5.1 XML Documents. . . . . . . . . . . . . . . . . .\
    \ . . .12\n       5.2 XML Requests . . . . . . . . . . . . . . . . . . . . .13\n\
    \       5.3 XML Request History. . . . . . . . . . . . . . . . . .15\n       5.4\
    \ XML Events . . . . . . . . . . . . . . . . . . . . . .15\n       5.5 XML Tags\
    \ . . . . . . . . . . . . . . . . . . . . . . .15\n       5.5.1 XML Tag. . . .\
    \ . . . . . . . . . . . . . . . . . . .17\n       5.5.2 Card Tag . . . . . . .\
    \ . . . . . . . . . . . . . . .18\n       5.5.3 P Tag. . . . . . . . . . . . .\
    \ . . . . . . . . . . .18\n       5.5.4 Select Tag . . . . . . . . . . . . . .\
    \ . . . . . . .18\n       5.5.5 Option Tag . . . . . . . . . . . . . . . . . .\
    \ . . .19\n       5.5.6 Input Tag. . . . . . . . . . . . . . . . . . . . . .20\n\
    \       5.5.7 Echo Tag . . . . . . . . . . . . . . . . . . . . . .20\n       5.5.8\
    \ Calltimer Tag. . . . . . . . . . . . . . . . . . . .21\n       5.5.9 Time Tag\
    \ . . . . . . . . . . . . . . . . . . . . . .21\n       5.5.10 Timer Tag . . .\
    \ . . . . . . . . . . . . . . . . . .21\n       5.5.11 Do Tag. . . . . . . . .\
    \ . . . . . . . . . . . . . .22\n       5.5.12 Go Tag. . . . . . . . . . . . .\
    \ . . . . . . . . . .22\n       5.5.13 Prev Tag. . . . . . . . . . . . . . . .\
    \ . . . . . .23\n   6. Security Considerations . . . . . . . . . . . . . . . .\
    \ . .23\n   7. Acknowledgements. . . . . . . . . . . . . . . . . . . . . .23\n\
    \   8. References. . . . . . . . . . . . . . . . . . . . . . . . .23\n   9. Authors'\
    \ Addresses. . . . . . . . . . . . . . . . . . . . .24\n   Appendix A: BNF description\
    \ of XML grammar . . . . . . . . . .25\n   Appendix B: Sample XML Documents, Renderings\
    \ and Events. . . .27\n       B.1 Sample Deck 1 (Itemized List Box). . . . . .\
    \ . . . . .27\n       B.2 Sample Deck 2 (Enumerated List Box). . . . . . . . .\
    \ .28\n       B.3 Sample Deck 3 (Text Box) . . . . . . . . . . . . . . .29\n \
    \      B.4 Sample Deck 4 (Echo Box) . . . . . . . . . . . . . . .30\n       B.5\
    \ Sample Deck 5 (Input Box). . . . . . . . . . . . . . .31\n       B.6 Sample\
    \ Deck 6 (Timers) . . . . . . . . . . . . . . . .32\n   Appendix C: Example usage\
    \ of MGCP extension packages . . . . .33\n       C.1 Setting Labels on Phone.\
    \ . . . . . . . . . . . . . . .33\n       C.2 Activating a Feature on a Feature\
    \ Key. . . . . . . . .33\n       C.3 Generating a Call using Feature Key as a\
    \ Line Key. . .35\n       C.4 Determining Make and Model of a Phone. . . . . .\
    \ . . .38\n   Appendix D: BNF Description of X-UA Parameter. . . . . . . . .39\n\
    \   Full Copyright Statement . . . . . . . . . . . . . . . . . . .41\n1. Introduction\n\
    \   The Media Gateway Control Protocol (MGCP) Version 1.0 defines a\n   protocol\
    \ for controlling Voice over IP Telephony Gateways from\n   external call control\
    \ elements.  As defined, it supports external\n   call control elements called\
    \ Media Gateway Controllers and assumes\n   that these Gateways can support collections\
    \ of endpoints.  The\n   endpoint type known as an \"analog line\" can be used\
    \ as a client\n   interface to provide service to a basic analog telephone unit.\
    \  The\n   packages that are currently defined to handle events and signals\n\
    \   allow for only a basic level of audio connection and signaling to\n   such\
    \ endpoints.  To handle more advanced capabilities commonly found\n   on business\
    \ phones such as feature keys, speaker phones and displays,\n   it is necessary\
    \ to define additional packages as extensions to the\n   MGCP protocol.\n   These\
    \ packages, when used in conjunction with the packages currently\n   defined in\
    \ RFC 2705 (Media Gateway Control Protocol Version 1.0) [1],\n   allow an MGCP\
    \ Call Agent to control business phone endpoints.\n   The MGCP extension packages\
    \ defined here are as follows:\n      - Feature Key Package\n         o  Groups\
    \ events and signals associated with the additional\n            keys available\
    \ on business phones that are non-DTMF and not\n            locally-implemented.\
    \  These include:\n            -  Feature Key event to allow mapping of key numbers\
    \ to\n               features.\n            -  Key State signal to indicate the\
    \ state of feature keys.\n            -  Set Label signal to display a label on\
    \ the LCD next to a\n               feature key.\n      -  Business Phone Package\n\
    \         o  Groups signals that are not related to feature keys,\n          \
    \  including:\n            -  Force Off-hook and Force On-hook signals to allow\n\
    \               application integration with speaker phone capabilities.\n   \
    \         -  Beep signal to play a beep on the phone.\n      - Display XML Package\n\
    \         o  Used to convey XML [2] script data to and from the phone to\n   \
    \         control the display and assign functions to the display\n          \
    \  soft-keys for event reporting.  These include:\n            -  XML event to\
    \ report user input or selection.\n            -  XML signal to render text to\
    \ the LCD display.\n   An MGCP experimental parameter is also defined here:\n\
    \      -  User Agent Parameter\n         o  Used to determine the make and model\
    \ of a phone\n1.1     General Information\n   A generic business phone typically\
    \ includes a number of features that\n   provide access to additional functionality\
    \ useful in a business\n   environment.  Beyond the basic handset and dial pad,\
    \ a business phone\n   may optionally include a number of fixed buttons, line\
    \ keys and\n   programmable feature keys, along with an LCD display and soft-keys.\n\
    \   Specific examples of items that may be included on a business phone\n   are:\n\
    \   - Speaker phone microphone and speaker\n   - Speaker phone button and light\n\
    \   - Messages button and light\n   - Redial button\n   - Volume up and down buttons\n\
    \   - Hold button and light\n   - Transfer button and light\n   - Forward button\
    \ and light\n   - Conference button and light\n   - Microphone mute button and\
    \ light\n   - Multiple feature keys with lights\n   - Multi-line LCD Display\n\
    \   - Multiple soft-keys next to the LCD display\n   - Navigation keys\n   Examples\
    \ of fixed buttons functionality are 'hold', 'transfer',\n   'redial', 'conference',\
    \ 'call-logs', 'directories', and 'messages'.\n   Fixed buttons may vary from\
    \ phone to phone.  While the packages\n   described here would allow these to\
    \ be reported to a Call Agent, the\n   Call Agent would also need to determine\
    \ which feature key number\n   corresponds to a particular pre-assigned function.\n\
    \   Since MGCP assumes a call control architecture where the call control\n  \
    \ \"intelligence\" is outside the Gateways and handled by external call\n   control\
    \ elements, the programming of the feature keys would be\n   resident in the Call\
    \ Agent.  If the user were to press the 'hold'\n   button, the phone would simply\
    \ report the key number, and the burden\n   of recognizing that this feature key\
    \ is assigned to the 'hold'\n   function, and providing such functionality, is\
    \ left to the Call\n   Agent.\n1.2 Objectives\n   The high level objectives that\
    \ were considered in generating the\n   packages described here are:\n   -  Provide\
    \ a minimum set of extension packages to the MGCP Version\n      1.0 protocol\
    \ to allow applications to take advantage of generic\n      business phone capabilities.\n\
    \   -  Provide event and control extensions at a sufficiently low level\n    \
    \  for an application to implement generic business phone functions\n      without\
    \ generating excessive or redundant data traffic.  (e.g.,\n      sending feature\
    \ key information on both press and release would be\n      a \"don't care\" for\
    \ a Call Agent.  All it cares about is that the\n      key was pressed.)\n   -\
    \  Provide a mechanism to interface with LCD displays and allow the\n      flexibility\
    \ to accommodate a variety of application needs and the\n      different types\
    \ of displays available.\n2. MGCP Packages for Business Phones\n   The following\
    \ packages should be implemented for business phones.\n   The G,D,L, and H packages\
    \ are defined in RFC 2705 [1].  Packages KY,\n   BP and XML are defined in this\
    \ specification.\n    ______________________________________________________\n\
    \   | Package                      |   Name  | Defined     |\n   |______________________________|_________|_____________|\n\
    \   | Generic Media Package        |   G     |in RFC 2705  |\n   | DTMF package\
    \                 |   D     |in RFC 2705  |\n   | Line Package               \
    \  |   L     |in RFC 2705  |\n   | Handset Package              |   H     |in\
    \ RFC 2705  |\n   | Feature Key Package          |   KY    |in this spec |\n \
    \  | Business Phone Package       |   BP    |in this spec |\n   | Display XML\
    \ Package          |   XML   |in this spec |\n   |______________________________|_________|_____________|\n\
    \   In the tables of events for each package, there are five columns:\n   Symbol:\
    \ the unique symbol used for the event\n   Definition: a short description of\
    \ the event\n   R: an x appears in this column if the event can be requested by\
    \ the\n      Call Agent.\n   S: if nothing appears in this column for an event,\
    \ then the event\n      cannot be signalled on command by the Call Agent.  Otherwise,\
    \ the\n      following symbols identify the type of signal:\n      OO On/Off signal.\
    \  The signal is turned on until requested by the\n         Call Agent to turn\
    \ it off, and vice versa.\n      TO Timeout signal.  The signal lasts for a given\
    \ duration unless\n         it is superseded by a new signal.\n      BR Brief\
    \ signal.  The event has a short, known duration.\n      Duration: specifies the\
    \ duration of TO signals.\n2.1 Feature Key Package\n   Package Name: KY\n   The\
    \ Feature Key Package groups events and signals that are associated\n   with the\
    \ additional keys that are available on business phones.\n ____________________________________________________________________\n\
    | Symbol   |   Definition               |   R |   S      Duration    |\n|__________|____________________________|_____|______________________|\n\
    | fk1-fk99 | Feature Key                |   x |                      |\n| ks \
    \      | Key State                  |     |   OO                 |\n| ls     \
    \  | Set Label                  |     |   OO                 |\n|__________|____________________________|_____|______________________|\n\
    \   Feature Key (fk1-fk99)\n      These events map to all the keys on the phone\
    \ that are not DTMF\n      keys or locally implemented functions (such as volume).\
    \  The\n      mapping of fk number to key is expected to vary between phones.\n\
    \      Note: Some have suggested parameterizing the fk event, i.e.,\n      sending\
    \ an RQNT with \"R: KY/fk\" and an NTFY with \"O: KY/fk(1)\",\n      but this\
    \ is problematic;  It is desirable to request only the keys\n      that can be\
    \ pressed in a given state, to eliminate the chance that\n      a mis-pressed\
    \ button will cancel a timeout signal, as well as to\n      reduce message traffic.\
    \  This is not possible within the confines\n      of MGCP, as requested events\
    \ cannot be parameterized.\n   Key State (ks)\n      This signal is used to indicate\
    \ the state of a feature key.  It\n      should be ignored by phones without this\
    \ capability.\n      This signal has two parameters: key number and state.  The\
    \ key\n      number maps directly to the feature key number.  The state is a\n\
    \      high level description of the state of the key.  This allows\n      different\
    \ phones to implement different indications of state.  For\n      example, Phone\
    \ A may have a multi-color LED associated with\n      feature keys that can blink\
    \ at different cadences.  Phone B might\n      have an LCD beside the keys that\
    \ can display text or icons.  It is\n      up to each phone vendor to determine\
    \ how to present the state\n      indication.\n      The following states are\
    \ used:\n       ______________________\n      | State | Definition   |\n     \
    \ |_______|______________|\n      |  en   | enabled      |\n      |  db   | disabled\
    \     |\n      |  id   | idle         |\n      |  dt   | dial tone    |\n    \
    \  |  cn   | connected    |\n      |  dc   | disconnected |\n      |  rg   | ringing\
    \      |\n      |  rb   | ringback     |\n      |  ho   | holding      |\n   \
    \   |  he   | held         |\n      |_______|______________|\n      For example:\
    \ an RQNT with \"S: KY/ks(5,en)\" will cause an indicator\n      corresponding\
    \ to fk5 to indicate that it is enabled.  An RQNT with\n      \"S: KY/ks(2,rg)\"\
    \ will cause an indicator corresponding to fk2 to\n      indicate that it is ringing.\n\
    \   \"en\" state\n      The associated feature is enabled.  Used for keys that\
    \ turn a\n      feature on or off, such as \"Do Not Disturb.\"\n   \"db\" state\n\
    \      The associated feature is disabled.  Used for keys that turn a\n      feature\
    \ on or off, such as \"Do Not Disturb.\"\n   \"id\" state\n      The specified\
    \ line appearance is in the idle state, available for\n      a call.\n   \"dt\"\
    \ state\n      The specified line appearance is providing dial-tone.\n   \"cn\"\
    \ state\n      The specified line appearance is actively in a call, in the\n \
    \     connected state.\n   \"dc\" state\n      The specified line appearance is\
    \ disconnected, but the\n      corresponding line is still active (the user is\
    \ still offhook).\n   \"rg\" state\n      The specified line appearance is terminating\
    \ an incoming call, in\n      the ringing state.\n   \"rb\" state\n      The specified\
    \ line appearance is originating an outgoing call, in\n      the ringing-back\
    \ state.\n   \"ho\" state\n      The specified line appearance is in the holding\
    \ state, with the\n      far end held.\n   \"he\" state\n      The specified line\
    \ appearance is in the held state, with the far\n      end holding.\n   Set Label\
    \ (ls)\n      This signal is used to set the label on a key.  This is used for\n\
    \      phones that have an LCD next to the feature keys.  It should be\n     \
    \ ignored by phones without this capability.\n      This signal has 2 parameters:\
    \ key number and label.  The key\n      number maps directly to the feature key\
    \ number.  The label is free\n      form text, restricted to the capabilities\
    \ of the phone.\n      For example, an RQNT with \"S: KY/ls(1,2200)\" sets the\
    \ label next\n      to the fk1 feature key to the string \"2200\" (a phone extension).\n\
    2.2 Business Phone Package\n   Package Name: BP\n   The Business Phone Package\
    \ groups signals other than those related to\n   feature keys and displays.\n\
    \ ____________________________________________________________________\n| Symbol\
    \   |   Definition               |   R |   S      Duration    |\n|__________|____________________________|_____|______________________|\n\
    | hd       | Force Offhook              |     |   OO                 |\n| hu \
    \      | Force Onhook               |     |   OO                 |\n| beep   \
    \  | Beep                       |     |   BR                 |\n|__________|____________________________|_____|______________________|\n\
    \   Force Offhook (hd)\n      This signal is used to force the phone offhook.\
    \  If the phone has\n      a speaker phone, it should be activated.  This signal\
    \ can be\n      negated by the user by hanging up.\n      This can be used if\
    \ a feature key causes a call to be initiated.\n      See the sample call flow\
    \ in Appendix C.\n      This can also be used for application integration.  For\
    \ example, a\n      user could select a number in an application on their PC,\
    \ and the\n      phone would be forced offhook and a call initiated.\n   Force\
    \ Onhook (hu)\n      This signal forces the phone onhook.  This can be used when\
    \ the\n      far-end disconnects, or if a feature key causes a call to be\n  \
    \    terminated.\n   Beep (beep)\n      Play a beep on the phone.\n2.3 Display\
    \ XML Package\n   Package Name: XML\n   The XML Package contains one event/signal\
    \ that is used to convey XML\n   data to and from the phone.\n _____________________________________________________________________\n\
    | Symbol   |   Definition               |   R |   S      Duration    |\n|__________|____________________________|_____|______________________|\n\
    | xml      | XML Data                   |   x |   OO                 |\n|__________|____________________________|_____|______________________|\n\
    \   XML Data (xml)\n      As an event, if this event is requested in an RQNT with\
    \ \"R:\n      XML/xml\", any posts of data from an XML script are returned in\
    \ an\n      NTFY with \"O: XML/xml(post data here)\".\n      As a signal, the\
    \ parameterized data indicates a URL to an XML\n      script (possibly local),\
    \ as well as substitution values that\n      depend on the XML script selected.\
    \  See section 5 for more\n      information.\n3. Endpoint Naming and Phone Type\
    \ Determination\n   Because the display state can be asynchronous from the signaling\n\
    \   state of the phone, it is desirable to address the display as a\n   separate\
    \ MGCP endpoint.\n   For example, suppose a call is presented to the phone, and\
    \ a display\n   is presented that gives the user the option of redirecting the\
    \ caller\n   immediately to voice-mail.  Selecting the option via the display\n\
    \   would cause an XML post to occur, cancelling any timeout signals (the\n  \
    \ ringing).\n   In order to simplify the handling of such scenarios, it is expected\n\
    \   that the related display have a different MGCP endpoint name, created\n  \
    \ by inserting a prefix before the phone endpoint name.  The prefix\n   used shall\
    \ be \"disp/\".\n   For example, if the phone endpoint has the name\n   \"ep1@foo.whatever.net\"\
    , the display endpoint would be named\n   \"disp/ep1@foo.whatever.net\".\n   The\
    \ Call Agent must be able to determine which feature key number\n   corresponds\
    \ to a particular pre-assigned function.  For example, one\n   phone may have\
    \ the pre-assigned functions of 'redial' and 'hold'\n   mapped to feature keys\
    \ numbered fk1 and fk23, respectively. Another\n   phone may not report fk23 at\
    \ all, and have the pre-assigned function\n   of 'transfer' mapped to fk1.  Also,\
    \ since the programming of feature\n   keys would be resident in the Call Agent,\
    \ a user-interface that\n   allows the programming of these keys must know the\
    \ keys supported on\n   the phone, in order for the Call Agent to request the\
    \ appropriate\n   feature keys.\n   Determination of such basic capabilities must\
    \ occur at the moment\n   when the phone sends its first RSIP message to a Call\
    \ Agent.  While\n   it might be possible to define packages with events and signals\
    \ that\n   allow for an exhaustive discovery of the layout of a particular\n \
    \  phone, a simpler and more reasonable approach would be for the Call\n   Agent\
    \ to discover the make and model of the phone, and thus determine\n   the capabilities\
    \ of the phone.  To this end, an experimental\n   parameter, \"X-UA\" has been\
    \ introduced for use in the Requested-Info\n   field (F:) of the AUEP method.\
    \  The response to the \"X-UA\" is\n   expected to be a string that uniquely identifies\
    \ the make and model\n   of the phone.  Note that per RFC 2705, a Gateway must\
    \ ignore\n   experimental parameters prefixed as \"X-\" that it cannot support,\n\
    \   versus respond with an error code such as 511 (Unrecognized\n   extension).\
    \  See the sample call flow in Appendix C.\n4. Functions that should be Locally\
    \ Implemented\n   Some functions should be implemented locally on the Gateway.\
    \  These\n   are listed in the following sections.\n4.1 Volume Control\n   Volume\
    \ for ringing, handset, and speaker phone should be implemented\n   locally on\
    \ the Gateway.\n4.2 Audio Path\n   If the phone includes a speaker phone, activating\
    \ the speaker phone\n   from the idle state should generate an offhook (L/hd)\
    \ event.  The\n   user should then be able to switch to handset mode by lifting\
    \ the\n   handset, and be able to switch back to speaker phone mode without any\n\
    \   interaction with the Call Agent.  De-activating the speaker phone\n   with\
    \ the handset on-hook should generate an onhook (L/hu) event.\n4.3 Microphone\
    \ mute button and light\n   If the phone includes a microphone mute button and\
    \ (optionally) an\n   associated indicator (e.g., light), the functionality of\
    \ these items\n   should be implemented locally on the Gateway.\n5. XML Package\
    \ Support\n   Not all business phones have the same display and keypad\n   capabilities.\
    \  To support these varying devices in a consistent\n   manner, this section outlines\
    \ an XML framework that is used to drive\n   the phone.  In this framework, the\
    \ Call Agent pushes XML requests to\n   the Gateway using MGCP signals.  These\
    \ XML requests indicate the XML\n   document that is to be rendered on the phone.\n\
    \   When a user inputs data or makes a selection from a display, the\n   Gateway\
    \ \"posts\" an XML request to the Call Agent using MGCP events.\n5.1 XML Documents\n\
    \   When an XML signal request is sent to an endpoint, it indicates the\n   XML\
    \ documents that the endpoint must process.  These documents\n   contain tags\
    \ that are a subset of the Wireless Markup Language (WML)\n   [3] plus some non-WML\
    \ additions.  These tags specify items to be\n   displayed as well as XML events\
    \ that may be reported as the result of\n   user input.\n   Each XML document,\
    \ known as a card, defines a user interaction.  A\n   group of cards is called\
    \ a deck.  One or more decks define an\n   application.  The cards define soft\
    \ key behavior as well as display\n   behavior, and are mapped to components that\
    \ implement the behavior of\n   a basic graphical user interface on the display\
    \ phone.  Based on the\n   available requirements, the components needed are:\n\
    \      - Input box:\n        allows user input, including editing capabilities,\
    \ via the\n        keypad.\n      - Enumerated list box:\n        allows the user\
    \ to select one of a list of items.\n      - Itemized list box:\n        allows\
    \ the user to select an item using a soft key.\n      - Text box:\n        displays\
    \ read-only text to the user.\n      - Echo box:\n        displays but does not\
    \ process user input.\n   A card may have the following properties.\n      1.\
    \ Timed content (e.g., card expiration)\n      2. Static content  (e.g., text)\n\
    \      3. Dynamic content (e.g., call timers/time)\n   Additionally, cards may\
    \ also contain variables to be substituted for\n   values that are specified in\
    \ an XML request.  See section 5.2 for\n   details on variable substitution.\n\
    \   There are cases where the XML scripts handling the display need to\n   use\
    \ keys that are also used by the phone.  For example, the display\n   could present\
    \ an enumerated list, where a particular item is selected\n   by pressing the\
    \ associated number on the dial pad.  All user key\n   presses must be routed\
    \ through the XML component layer.  The display\n   layer either consumes the\
    \ key presses or passes them on to the phone\n   layer for consumption.\n   The\
    \ code handling key presses should thus present a key press to the\n   display\
    \ code first.  If the display code does not \"use\" the key\n   press, then the\
    \ key press should be presented to the phone code.\n   This gives precedence to\
    \ the XML scripts for key presses.\n5.2 XML Requests\n   The XML framework uses\
    \ MGCP as its transport for making requests to\n   the display phone.  MGCP is\
    \ also used to receive asynchronous events\n   from the display phone (e.g., an\
    \ item has been selected, or the user\n   has entered text).\n   An XML request\
    \ is made to an endpoint using the XML/xml signal.  The\n   signal has the following\
    \ format:\n   S: XML/xml(<url>?<card>?$<variable1>=<value1>?$<variable2>=<value2>)\n\
    \   The first component of the signal parameter is a URL to the deck.  If\n  \
    \ no scheme is indicated, the deck is assumed to be local to the phone.\n   Here\
    \ are some examples:\n   ftp://server.company.com/deck1?card1?$var1=val1\n   http://www.company.com/deck1?card1?$var1=val1\n\
    \   file://deck1?card1?$var1=val1\n   deck1?card1?$var1=val1\n   A card identifier\
    \ and a list of variable/value pairs follow the URL.\n   The card identifier indicates\
    \ the card within the deck to display.\n   The variable/value pairs are substituted\
    \ into the deck before it is\n   rendered to the display.  This means that the\
    \ variables are deck-\n   scoped, and variables not defined in the requested card\
    \ must be\n   populated in other cards in the same deck if defined therein.\n\
    \   For example, a deck may contain the following cards:\n   <card id=\"one\"\
    >\n   <p>$line1</p>\n   <timer value=\"2\"/>\n   <do type=\"ontimer\">\n   <go\
    \ href=\"#two\"/>\n   </do>\n   </card>\n   <card id=\"two\">\n   <p>$line2</p>\n\
    \   </card>\n   And an XML request may look like:\n   S: XML/xml(deck?one?$line1=abc$line2=xyz)\n\
    \   After variable substitution, the deck will look like:\n   <card id=\"one\"\
    >\n   <p>abc</p>\n   </card>\n   <card id=\"two\">\n   <p>$line2</p>\n   </card>\n\
    \   Once variable substitution is complete, the card is rendered.  If a\n   parameter\
    \ variable does not exist anywhere in the deck it should be\n   ignored.\n   When\
    \ card two is invoked from card1 in response to the timeout\n   action, card two's\
    \ variables are substituted with the variables\n   values passed as a request\
    \ to card one.  Card two will look like:\n   <card id=\"two\">\n   <p>xyz</p>\n\
    \   </card>\n5.3 XML Request History\n   In order to support navigation through\
    \ a request history such as when\n   a user cancels a card, the XML layer must\
    \ maintain a last-in-first-\n   out history of requests made for the endpoint.\
    \  (See the <prev> tag\n   definition in section 5.5.13.)\n5.4 XML Events\n  \
    \ Whenever the XML layer determines that an event has occurred, it\n   reports\
    \ the event using the MGCP observed event field:\n   O:\n   XML/xml(post?<deck>?<card>?<variable1>=<value1>?<variable2>=<value2>)\n\
    \   Here, the event parameter contains the deck and card that generated\n   the\
    \ event, as well as data that is to be processed by the Call Agent.\n   The data\
    \ being posted is in the form of a list of variable/value\n   pairs.\n   In order\
    \ for the Gateway to properly generate the XML event, it is\n   necessary for\
    \ the Call Agent to request the event using the requested\n   events field:\n\
    \   R: XML/xml\n   This requested event should be combined with the signal request\
    \ in an\n   RQNT.\n5.5 XML Tags\n   Any XML implementation must at a minimum support\
    \ the XML tags listed\n   in the table that follows.  All tags have a terminator\
    \ tag of the\n   form </tag> to indicate the end of the tag.  See the XML grammar\
    \ in\n   Appendix A.\n _____________________________________________________________________\n\
    |  Name         |  Usage                                              |\n|_______________|_____________________________________________________|\n\
    |  <xml>        |  Marks the beginning of a deck.                     |\n|_______________|_____________________________________________________|\n\
    |  <card>       |  Marks the beginning of a card.                     |\n|_______________|_____________________________________________________|\n\
    |  <p>          |  Marks the beginning of a paragraph.                |\n|_______________|_____________________________________________________|\n\
    |  <select>     |  Defines a list of items that may be selected (an   |\n|   \
    \            |  enumerated or itemized list box).                  |\n|_______________|_____________________________________________________|\n\
    |  <option>     |  Used in conjunction with the <select> tag to       |\n|   \
    \            |  specify an individual item that may be selected.   |\n|_______________|_____________________________________________________|\n\
    |  <input>      |  Marks the beginning of user input (an input box).  |\n|_______________|_____________________________________________________|\n\
    |  <echo>       |  Marks the beginning of an echo box.                |\n|_______________|_____________________________________________________|\n\
    |  <calltimer>  |  Call Timer. An incremental timer usually used to   |\n|   \
    \            |  maintain the duration of a call.                   |\n|_______________|_____________________________________________________|\n\
    |  <timer>      |  Card timer. Allows an event to be generated when   |\n|   \
    \            |  the timer expires.                                 |\n|_______________|_____________________________________________________|\n\
    |  <time>       |  A tag indicating the current time.                 |\n|_______________|_____________________________________________________|\n\
    |  <do>         |  Event consumer.                                    |\n|_______________|_____________________________________________________|\n\
    |  <go>         |  Used in conjunction with the <do> tag to indicate  |\n|   \
    \            |  a new page to be displayed.                        |\n|_______________|_____________________________________________________|\n\
    |  <prev>       |  Used in conjunction with the <do> tag to indicate  |\n|   \
    \            |  that the previous card in the history should be    |\n|      \
    \         |  displayed.                                         |\n|_______________|_____________________________________________________|\n\
    \   Most of these tags have attributes. Each attribute has one of the\n   following\
    \ types: String, Time, Enum, Align, Action or URL:\n _______________ _____________________________________________________\n\
    |  Type         |  Format                                             |\n|_______________|_____________________________________________________|\n\
    |  String       |  Any string. May not contain any white spaces       |\n|   \
    \            | (tab, space or newline).                            |\n|_______________|_____________________________________________________|\n\
    |  Time         |  A string of the format hh:mm:ss where hh indicates |\n|   \
    \            |  the hour (24-hour format), mm indicates the        |\n|      \
    \         |  minutes and ss indicates the seconds.              |\n|_______________|_____________________________________________________|\n\
    |  Enum         |  Enumeration. A list of acceptable string values.   |\n|_______________|_____________________________________________________|\n\
    |  Align        |  Indicates text alignment (left justified, centered |\n|   \
    \            |  or right justified). Valid values are: left,       |\n|      \
    \         |  center, right.  The default value is: left.        |\n|_______________|_____________________________________________________|\n\
    |  Action       |  Defines a string to be sent to the Call Agent.     |\n|   \
    \            |  This string has the format:                        |\n|      \
    \         |        post?%var1[=%val1[?%var2[=%val2]]]           |\n|         \
    \      |  where variables that should be substituted before  |\n|            \
    \   |  sending the string to the Call Agent begin         |\n|               |\
    \  with a '%'.                                        |\n|               |  The\
    \ tags that make up the card determine what      |\n|               |  variables\
    \ are available to this string. See the    |\n|               |  following sections\
    \ for variables that are defined  |\n|               |  for each tag.        \
    \                              |\n|_______________|_____________________________________________________|\n\
    |  URL          |  The URL may have take several forms:               |\n|   \
    \            |     1. #<card> to indicate another card within      |\n|      \
    \         |        the same deck                                |\n|         \
    \      |     2. A string of type Action                      |\n|            \
    \   |     3. #<prev> to indicate the previous card in     |\n|               |\
    \        the history                                  |\n|_______________|_____________________________________________________|\n\
    5.5.1 XML Tag\n   The <xml> tag must be the first tag specified in the deck. \
    \ It\n   indicates the beginning of the deck.\n   This tag has no attributes.\n\
    5.5.2 Card Tag\n   The <card> tag marks the beginning of a new card.\n   This\
    \ tag has the following attributes:\n _______________ _____________________ _______________________________\n\
    |Attribute Name |  Values             | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    |  Id           |  String             | Defines the card identifier.  |\n|   \
    \            |                     | This identifier is referenced |\n|      \
    \         |                     | in XML requests.              |\n|_______________|_____________________|_______________________________|\n\
    5.5.3 P Tag\n   The <p> tag marks the beginning of a new paragraph.\n   This tag\
    \ has the following attributes:\n _______________ _____________________ _______________________________\n\
    |Attribute Name |  Values (default)   | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    |Mode           |  Enum: wrap/nowrap  | Specifies whether the         |\n|   \
    \            |        (wrap)       | paragraph wraps or is         |\n|      \
    \         |                     | truncated when it extends past|\n|         \
    \      |                     | the display width.            |\n|_______________|_____________________|_______________________________|\n\
    | Align         |  Align              | Specifies alignment of the    |\n|   \
    \            |                     | paragraph.                    |\n|_______________|_____________________|_______________________________|\n\
    5.5.4 Select Tag\n   The <select> tag marks the beginning of a list of items that\
    \ may be\n   selected.  Each item is defined using an <option> tag described in\n\
    \   section 5.5.5.\n   This tag has the following attributes:\n _______________\
    \ _____________________ _______________________________\n|Attribute Name | Values\
    \ (default)    | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    | type          | Enum: item/enum     | Specifies the type of list:   |\n|   \
    \            |       (enum)        | itemized or enumerated.  An   |\n|      \
    \         |                     | itemized list maps options to |\n|         \
    \      |                     | soft keys.                    |\n|_______________|_____________________|_______________________________|\n\
    | name          | String              | Specifies name of the list.   |\n|   \
    \            |                     | This attribute is available to|\n|      \
    \         |                     | any Action string in the card |\n|         \
    \      |                     | by using the %name variable.  |\n|_______________|_____________________|_______________________________|\n\
    | iname         | String              | Defines an index variable with|\n|   \
    \            |                     | the specified name.  This     |\n|      \
    \         |                     | variable is used in the       |\n|         \
    \      |                     | <option> tag to specify the   |\n|            \
    \   |                     | index of an item that is      |\n|               |\
    \                     | selected.  The value of this  |\n|               |   \
    \                  | attribute is available to any |\n|               |      \
    \               | Action string in the card by  |\n|               |         \
    \            | using the %iname variable. The|\n|               |            \
    \         | value of the index variable is|\n|               |               \
    \      | available by using the        |\n|               |                  \
    \   | %<string value> variable.     |\n|               |                     |\
    \ See examples below.           |\n|_______________|_____________________|_______________________________|\n\
    5.5.5 Option Tag\n   When used in conjunction with the <select> tag, the <option>\
    \ tag\n   specifies an individual item that may be selected from a list.\n   This\
    \ tag has the following attributes:\n _______________ _____________________ _______________________________\n\
    |Attribute Name | Values              | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    | value         | String              | Defines the value of the item.|\n|   \
    \            |                     | This is used when reporting an|\n|      \
    \         |                     | event to the Call Agent.  The |\n|         \
    \      |                     | value of this attribute is    |\n|            \
    \   |                     | available to any Action string|\n|               |\
    \                     | in the card by using the      |\n|               |   \
    \                  | %value variable.              |\n|_______________|_____________________|_______________________________|\n\
    | onpick        | Action              | Defines the string to be sent |\n|   \
    \            |                     | to the Call Agent when the    |\n|      \
    \         |                     | item is selected.             |\n|_______________|_____________________|_______________________________|\n\
    5.5.6 Input Tag\n   The <input> tag specifies that user input is required.\n \
    \  This tag has the following attributes:\n _______________ _____________________\
    \ _______________________________\n|Attribute Name | Values              | Usage\
    \                         |\n|_______________|_____________________|_______________________________|\n\
    | name          | String              | Specifies the name of the     |\n|   \
    \            |                     | input tag.  The value of this |\n|      \
    \         |                     | attribute is available to any |\n|         \
    \      |                     | Action string in the card by  |\n|            \
    \   |                     | using the %name variable.     |\n|_______________|_____________________|_______________________________|\n\
    | type          | Enum: password/text | Specifies whether the input   |\n|   \
    \            |       (text)        | box is in password mode       |\n|      \
    \         |                     | (password) or normal mode     |\n|         \
    \      |                     | (text). When in password mode,|\n|            \
    \   |                     | user input should be masked.  |\n|_______________|_____________________|_______________________________|\n\
    5.5.7 Echo Tag\n   The <echo> tag indicates that user input is required.  Any\
    \ keypad\n   activity is reported to the XML layer but not consumed when this\
    \ tag\n   is used.\n   This tag has the following attributes:\n _______________\
    \ _____________________ _______________________________\n|Attribute Name | Values\
    \ (default)    | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    | mode          | Enum: on/off (on)   | Specifies whether the echo box|\n|   \
    \            |                     | is in password mode (off) or  |\n|      \
    \         |                     | normal mode (on).  When in    |\n|         \
    \      |                     | password mode, user input     |\n|            \
    \   |                     | should be masked.             |\n|_______________|_____________________|_______________________________|\n\
    | align         | Align               | Specifies the alignment of the|\n|   \
    \            |                     | echo tag.                     |\n|_______________|_____________________|_______________________________|\n\
    5.5.8 Calltimer Tag\n   The <calltimer> tag is used to indicate that an incrementing\
    \ timer is\n   to be displayed.\n   This tag has the following attributes:\n _______________\
    \ _____________________ _______________________________\n|Attribute Name | Values\
    \              | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    | value         | Time                | Specifies the initial value of|\n|   \
    \            |                     | the call timer.               |\n|_______________|_____________________|_______________________________|\n\
    | align         |Align                | Specifies the alignment of the|\n|   \
    \            |                     | call timer.                   |\n|_______________|_____________________|_______________________________|\n\
    5.5.9 Time Tag\n   The <time> tag is used to display the current time on the phone.\n\
    \   This tag has the following attributes:\n _______________ _____________________\
    \ _______________________________\n|Attribute Name | Values              | Usage\
    \                         |\n|_______________|_____________________|_______________________________|\n\
    | align         | Align               | Specifies the alignment of the|\n|   \
    \            |                     | time.                         |\n|_______________|_____________________|_______________________________|\n\
    5.5.10 Timer Tag\n   The <timer> tag is used to define a timeout for the card.\
    \  When the\n   timeout occurs, the XML Layer looks for the appropriate <do> tag\
    \ to\n   take appropriate action.\n   This tag has the following attributes:\n\
    \ _______________ _____________________ _______________________________\n|Attribute\
    \ Name | Values              | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    | Value         | Time                | Specifies the initial value of|\n|   \
    \            |                     | the timer.  The timer will    |\n|      \
    \         |                     | decrement the time until it   |\n|         \
    \      |                     | reaches zero at which point   |\n|            \
    \   |                     | the <do> tag is consulted.    |\n|_______________|_____________________|_______________________________|\n\
    5.5.11 Do Tag\n   The <do> tag indicates an action to be performed when the specified\n\
    \   event occurs.\n   Currently, the <do> tag can process three events: prev,\
    \ ontimer and\n   accept.  The prev event indicates that the user has requested\
    \ to\n   cancel the current card.\n   The ontimer event indicates that the timer\
    \ defined using the <timer>\n   tag has expired.\n   The accept event indicates\
    \ that the user has completed inputting from\n   the keypad.\n   This tag has\
    \ the following attributes:\n _______________ _____________________ _______________________________\n\
    |Attribute Name | Values (default)    | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    |Type           | Enum:               | Indicates the event on which  |\n|   \
    \            | prev/ontimer/accept | the tag operates.             |\n|_______________|_____________________|_______________________________|\n\
    5.5.12 Go Tag\n   The <go> tag is used in conjunction with the <do> tag to specify\
    \ a\n   URL to be loaded when the event occurs.\n   This tag has the following\
    \ attributes:\n _______________ _____________________ _______________________________\n\
    |Attribute Name | Values (default)    | Usage                         |\n|_______________|_____________________|_______________________________|\n\
    | href          | URL                 | Defines the URL of the next   |\n|   \
    \            |                     | XML page.                     |\n|_______________|_____________________|_______________________________|\n\
    5.5.13 Prev Tag\n   The <prev> tag is used in conjunction with the <do> tag to\
    \ indicate\n   that the previous page in the display history should be rendered.\n\
    \   This tag has no attributes.\n6. Security Considerations\n   This extension\
    \ introduces no new security considerations beyond those\n   discussed in RFC\
    \ 2705 [1].\n7. Acknowledgements\n   Thanks to the following companies and individuals\
    \ for contributing\n   their experience and thoughts for inclusion in this document.\n\
    \   Arnie Chencinski, Sylantro Systems\n   Bill Foster,      Cisco Systems\n \
    \  Howard Holgate,   Cisco Systems\n   John Weald,       Sylantro Systems\n  \
    \ Michael Chack,    Sylantro Systems\n   Naga Surendran,   Sylantro Systems\n\
    \   Sunil Veluvali,   Sylantro Systems\n8. References\n   [1]   Arango, M., Dugan\
    \ A., Elliot, I., Huitema, C. and S. Pickett,\n         \"Media Gateway Control\
    \ Protocol (MGCP)\" RFC 2705, October 1999.\n   [2]   Bray, T., Paoli, J. and\
    \ C. Sperberg-McQueen, \"Extensible Markup\n         Language (XML) 1.0\", W3C\
    \ Proposed Recommendation, February 10,\n         1998.\n   [3]   \"Wireless Application\
    \ Protocol Wireless Markup Language\n         Specification Version 1.2\", WAP\
    \ Forum, November 1999.\n9. Authors' Addresses\n   Ashok Srinath\n   Sylantro\
    \ Systems\n   910 E. Hamilton Avenue\n   Campbell, Ca. 95008\n   EMail: Ashok.Srinath@sylantro.com\n\
    \   Gil Levendel\n   Sylantro Systems\n   910 E. Hamilton Avenue\n   Campbell,\
    \ Ca. 95008\n   EMail: Gil.Levendel@sylantro.com\n   Kent Fritz\n   Sylantro Systems\n\
    \   910 E. Hamilton Avenue\n   Campbell, Ca. 95008\n   EMail: Kent.Fritz@sylantro.com\n\
    \   Raghuraman Kalyanaram\n   Wipro Systems\n   Keonics Electronic City\n   Hosur\
    \ Road, Bangalore-561 229, India\n   EMail: Raghuraman.Kal@wipro.com\nAppendix\
    \ A: BNF description of XML grammar\n   The parser is case sensitive.  In this\
    \ section we will use the\n   following conventions:\n   1. Small letters means\
    \ terminals.\n   2. Capital strings are non-terminals.\n   3. [A | B] means either\
    \ A or B must appear in this place.\n   4. \\t, \\n, \\r, blank space are separators.\n\
    \ ______________ _ ____________________________________________________\n|ACTION\
    \        |:|<go href=\"HREFSTRING\"/> | <prev/>                   |\n|______________|_|____________________________________________________|\n\
    |ALIGN         |:|Align=[\"left\" | \"right\" ]                           |\n\
    |______________|_|____________________________________________________|\n|CALLTIMER\
    \     |:|<calltimer CALLTIMERATTRS/>                         |\n|______________|_|____________________________________________________|\n\
    |CALLTIMERATTRS|:|CALLTIMERATTR | CALLTIMERATTR CALLTIMERATTRS        |\n|______________|_|____________________________________________________|\n\
    |CALLTIMERATTR |:|value=STRING | ALIGN                                |\n|______________|_|____________________________________________________|\n\
    |CARDS         |:|CARD | CARD CARDS                                   |\n|______________|_|____________________________________________________|\n\
    |CARD          |:|<card id=STRING> CLUSTERS </card>                   |\n|______________|_|____________________________________________________|\n\
    |CARDREFERENCE |:|#STRING                                             |\n|______________|_|____________________________________________________|\n\
    |CLUSTERS      |:|CLUSTER | CLUSTER CLUSTERS                          |\n|______________|_|____________________________________________________|\n\
    |CLUSTER       |:|CONTROL | TIMER | ECHO  | PARAGRAPH COMPONENTS </p> |\n|______________|_|____________________________________________________|\n\
    |COMPONENTS    |:|COMPONENT | COMPONENT COMPONENTS                    |\n|______________|_|____________________________________________________|\n\
    |COMPONENT     |:|TEXT | INPUTBOX | SELECTBOX | STIME | CALLTIMER     |\n|______________|_|____________________________________________________|\n\
    |CONTROL       |:|<do CONDITION> ACTION </do>                         |\n|______________|_|____________________________________________________|\n\
    |CONDITION     | |type=[\"accept\" | \"prev\" | \"ontimer\"] label=STRING | |\n\
    |              | |type=[\"accept\" | \"prev\" |\"ontimer\"]                 |\n\
    |______________|_|____________________________________________________|\n|DIGITS\
    \        |:|DIGIT | DIGIT DIGITS                                |\n|______________|_|____________________________________________________|\n\
    |DIGIT         |:|0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9               |\n|______________|_|____________________________________________________|\n\
    |DECK          |:|<xml id=STRING> CARDS </xml>                        |\n|______________|_|____________________________________________________|\n\
    |ECHO          |:|<echo/> | <echo ECHOMODE/>                          |\n|______________|_|____________________________________________________|\n\
    |ECHOMODE      |:|mode=[\"on\" | \"off\"]                                 |\n\
    |______________|_|____________________________________________________|\n|HREFSTRING\
    \    |:|CARDREFERENCE | POSTSTRING                          |\n|______________|_|____________________________________________________|\n\
    |INPUTBOX      |:|<input INPUTATTRS/>                                 |\n|______________|_|____________________________________________________|\n\
    |INPUTATTRS    |:|INPUTATTR | INPUTATTR INPUTATTRS                    |\n|______________|_|____________________________________________________|\n\
    |INPUTATTR     |:|name=STRING  | type=[\"text\" | \"password\"] |         |\n\
    |              | | value=STRING                                       |\n|______________|_|____________________________________________________|\n\
    |NAMEVALUES    |:|NAMEVALUE | NAMEVALUE?NAMEVALUES                    |\n|______________|_|____________________________________________________|\n\
    |NAMEVALUE     |:|NAMEVALUEELEM | NAMEVALUEELEM=NAMEVALUELEM          |\n|______________|_|____________________________________________________|\n\
    |NAMEVALUELEM  |:|%TEXT | TEXT                                        |\n|______________|_|____________________________________________________|\n\
    |OPTIONS       |:|OPTION | OPTION OPTIONS                             |\n|______________|_|____________________________________________________|\n\
    |OPTION        |:|<option value=STRING onpick=HREFSTRING> TEXT        |\n|   \
    \           | | </option>                                          |\n|______________|_|____________________________________________________|\n\
    |PARAGRAPH     |:|<p TXTFORMAT>  | <p>                                |\n|______________|_|____________________________________________________|\n\
    |POSTSTRING    |:|post?%deck?%id?NAMEVALUES | post?NAMEVALUES         |\n|______________|_|____________________________________________________|\n\
    |SELECTBOX     |:|<select SELECTATTRS> OPTIONS </select>              |\n|______________|_|____________________________________________________|\n\
    |SELECTATTRS   |:|SELECTATTR | SELECTATTR SELECTATTRS                 |\n|______________|_|____________________________________________________|\n\
    |SELECTATTR    |:|name=STRING  | iname=STRING | type=\"item\"           |\n|______________|_|____________________________________________________|\n\
    |STIME         |:|<time STIMEATTRS/>                                  |\n|______________|_|____________________________________________________|\n\
    |STIMEATTRS    |:|STIMEATTR | STIMEATTR STIMEATTRS                    |\n|______________|_|____________________________________________________|\n\
    |STIMEATTR     |:|value=STRING | format=STRING | ALIGN                |\n|______________|_|____________________________________________________|\n\
    |STRING        |:|Any string enclosed in a pair of quotes (\"\")        |\n|______________|_|____________________________________________________|\n\
    |TEXT          |:|TEXTELEM | TEXTELEM TEXT                            |\n|______________|_|____________________________________________________|\n\
    |TEXTELEM      |:|any string outside of the < .. > and which consists |\n|   \
    \           | |of any symbols except '<' and '\\n'                  |\n|______________|_|____________________________________________________|\n\
    |TIMER         |:|<timer value=\"DIGITS\"/>                             |\n|______________|_|____________________________________________________|\n\
    |TXTFORMAT     |:|ALIGN | TXTMODE | ALIGN TXTMODE | TXTMODE ALIGN     |\n|______________|_|____________________________________________________|\n\
    |TXTMODE       |:|mode=[\"wrap\" | \"nowrap\"]                            |\n\
    |______________|_|____________________________________________________|\n ______________\
    \ _ ____________________________________________________\n|              | |\\\
    t, \\n, \\r, blank space are separators.             |\n|______________|_|____________________________________________________|\n\
    Appendix B:  Sample XML Documents, Renderings and Events\n   This section presents\
    \ some sample XML documents and details how they\n   are translated to a business\
    \ phone with a simple LCD display.\nB.1 Sample Deck 1 (Itemized List Box)\n  \
    \ Below is a simple deck containing one card that defines a simple main\n   menu\
    \ interface using an itemized list box:\n   <xml>\n   <card id=\"home\">\n   <p\
    \ mode=\"nowrap\">$dn <time align=\"right\"></time>\n   <select type=\"item\"\
    \ name=\"Menu\" iname=\"StrMenu\">\n   <option value=\"1\" onpick=\"post?%deck?%id?%name=%value\"\
    >MENU</option>\n   </select>\n   </p>\n   </card>\n   </xml>\n   The card (home)\
    \ contains three components:\n      1. A paragraph (<p>).  The paragraph contains\
    \ a variable ($dn)\n         that shows the phone's extension.\n      2. A clock\
    \ (<time>).  The clock is aligned to the right.\n      3. An itemized list (<select>)\
    \ containing one item (MENU).\n   An XML request for this deck and card might\
    \ look like:\n   S: XML/xml(deck?home?$dn=2344)\n   After variable substitution,\
    \ the phone may render the XML to the\n   display as follows:\n   --------------------\n\
    \   |2344         11:59|\n   | MENU             |\n   --------------------\n \
    \    [XX]  [XX]  [XX]\n   Here, MENU maps to the first soft key below the display.\
    \  If the user\n   presses the first soft key, the following event will be generated:\n\
    \   O: XML/xml(post?basic?home?Menu=1).\nB.2 Sample Deck 2 (Enumerated List Box)\n\
    \   The next sample deck defines a simple enumerated list box card:\n   <xml>\n\
    \   <card id=\"gelist\">\n   <p>$title\n   <select name=\"x-name\" iname=\"x-iname\"\
    >\n   <option value=\"$value1\"\n   onpick=\"post?%deck?%id?%name=%value?%iname=%x-iname\"\
    >$opt1\n   </option>\n   <option value=\"$value2\"\n   onpick=\"post?%deck?%id?%name=%value?%iname=%x-iname\"\
    >$opt2\n   </option>\n   <option value=\"$value3\"\n   onpick=\"post?%deck?%id?%name=%value?%iname=%x-iname\"\
    >$opt3\n   </option>\n   <option value=\"$value4\"\n   onpick=\"post?%deck?%id?%name=%value?%iname=%x-iname\"\
    >$opt4\n   </option>\n   <option value=\"$value5\"\n   onpick=\"post?%deck?%id?%name=%value?%iname=%x-iname\"\
    >$opt5\n   </option>\n   </select>\n   </p>\n   <do type=\"prev\">\n   <prev></prev>\n\
    \   </do>\n   </card>\n   </xml>\n   The card (gelist) contains four components:\n\
    \      1. A paragraph (<p>).  The paragraph contains a title variable\n      \
    \   describing the list contents.\n      2. An enumerated list (<select>) containing\
    \ five items.  When an\n         item is selected, the XML layer sends the XML/xml\
    \ event to the\n         Call Agent.\n      3. A do tag (<do>) indicating that\
    \ when a \"previous\" event has\n         occurred, to go to the previous page\
    \ (<prev>).\n   An XML request for this deck and card might look like:\n   S:\
    \ XML/xml(list?gelist?$title=Select a Car?\n   $value1=Item1?$opt1=Porsche?\n\
    \   $value2=Item2?$opt2=Chevrolet?\n   $value3=Item3?$opt3=Toyota?\n   $value4=Item4?$opt4=Daewoo?\n\
    \   $value5=Item5?$opt5=Yugo)\n   After variable substitution, the phone may render\
    \ the XML to the\n   display as follows:\n   --------------------\n   |SELECT\
    \ A CAR      |\n   |1. Porsche       v|\n   --------------------\n     [XX]  [XX]\
    \  [XX]\n   Here, the display may be scrolled to reveal the additional items that\n\
    \   may be selected and the keypad '1', '2', etc may be used to select\n   the\
    \ item.  These details are phone-specific.  For instance, on a\n   larger 4-line\
    \ display containing navigation keys, the XML may be\n   rendered as follows:\n\
    \   --------------------\n   |SELECT A CAR      |\n   |=>Porsche<=       |\n \
    \  |  Chevrolet       |\n   |  Toyota         v|\n   --------------------\n  \
    \ When the user selects item 1, the following message will be sent to\n   the\
    \ Call Agent:\n   O: XML/xml(post?list?gelist?x-name=Item1?x-iname=1)\nB.3 Sample\
    \ Deck 3 (Text Box)\n   This sample shows how to implement a simple text box:\n\
    \   <xml>\n   <card id=\"generic\">\n   <p>$cldpty</p>\n   <p>CALL FAILED</p>\n\
    \   </card>\n   </xml>\n   The card (generic) contains two paragraphs.  The absence\
    \ of a\n   selectable list, input box or echo box indicates that this is a text\n\
    \   box.\n   An XML request for this deck and card might look like:\n   S: XML/xml(deck?generic?$cldpty=John\
    \ Doe)\n   After variable substitution, the phone may render the XML to the\n\
    \   display as follows:\n   --------------------\n   |JOHN DOE          |\n  \
    \ |CALL FAILED       |\n   --------------------\n     [XX]  [XX]  [XX]\nB.4 Sample\
    \ Deck 4 (Echo Box)\n   This sample show how to implement a simple echo box. \
    \ The XML layer\n   does not consume any keystrokes.\n   <xml>\n   <card id=\"\
    getdigits\">\n   <p>Dial Number:</p>\n   <echo mode=\"$mode\" align=\"left\"/>\n\
    \   </card>\n   </xml>\n   The card (getdigits) contains a paragraph of text and\
    \ an echo box.\n   An XML request for this deck and card might look like:\n  \
    \ S: XML/xml(deck?getdigits?$mode=on)\n   After variable substitution, the phone\
    \ may render the XML to the\n   display as follows:\n   --------------------\n\
    \   |DIAL NUMBER:      |\n   |                  |\n   --------------------\n \
    \    [XX]  [XX]  [XX]\n   All user input is displayed but not consumed by the\
    \ XML layer.\nB.5 Sample Deck 5 (Input Box)\n   This sample implements a basic\
    \ input box:\n   <xml>\n   <card id=\"ginput\">\n   <p>$title\n   <input name=\"\
    x-name\"/>\n   </p>\n   <do type=\"accept\">\n   <go href=\"post?%deck?%id?%name=%value\"\
    />\n   </do>\n   <do type=\"prev\">\n   <prev></prev>\n   </do>\n   </card>\n\
    \   </xml>\n   The card (ginput) contains:\n      1. A paragraph <p>.  The paragraph\
    \ contains a title.\n      2. An input box <input>.  The input box consumes keypad\
    \ events and\n         reports them when input is complete.\n      3. Two event\
    \ handlers <do>.  The first handles the accept event.\n         This event indicates\
    \ that the user has completed keypad input\n         and posts an observed event\
    \ to the Call Agent.  The second\n         handles the prev event.  This event\
    \ indicates that the user has\n         requested to revert back to the previous\
    \ card.\n   An XML request for this deck and card might look like:\n   S: XML/xml(deck?ginput?$title=Enter\
    \ Digits:)\n   After variable substitution, the phone may render the XML to the\n\
    \   display as follows:\n   --------------------\n   |ENTER DIGITS:     |\n  \
    \ |_                 |\n   --------------------\n     [XX]  [XX]  [XX]\n   It\
    \ is up to the individual business phone implementation to determine\n   which\
    \ soft keys or keypad keys map to functions such as \"backspace\",\n   \"reset\
    \ line\", etc.\nB.6 Sample Deck 6 (Timers)\n   To illustrate timers and deck-scoped\
    \ variable substitution, a two-\n   card deck is provided:\n   <xml>\n   <card\
    \ id=\"connected1\">\n   <timer value=\"$tvalue\"/>\n   <p mode=\"nowrap\">$cldpty\n\
    \   <select type=\"item\" name=\"x-name\" iname=\"x-iname\">\n   <option value=\"\
    1\"\n   onpick=\"post?TRNSINIT\">TRNS\n   </option>\n   <option value=\"2\"\n\
    \   onpick=\"post?CONFINIT\">CONF\n   </option>\n   <option value=\"3\"\n   onpick=\"\
    post?%deck?%card?%name=%value\">MENU\n   </option>\n   </select>\n   </p>\n  \
    \ <do type=\"ontimer\">\n   <go href=\"#connected2\"/>\n   </do>\n   </card>\n\
    \   <card id=\"connected2\">\n   <p mode=\"nowrap\">\n   <calltimer value=\"$calltimer\"\
    \ align=\"right\"/>\n   <select type=\"item\" name=\"x-name\">\n   <option value=\"\
    1\"\n   onpick=\"post?TRNSINIT\">TRNS\n   </option>\n   <option value=\"2\"\n\
    \   onpick=\"post?CONFINIT\">CONF\n   </option>\n   <option value=\"3\"\n   onpick=\"\
    post?%deck?%card?%name=%value\" >MENU\n   </option>\n   </select>\n   </p>\n \
    \  </card>\n   </xml>\n   In this example, when the timer expires in card connected1,\
    \ it\n   generates an ontimer event.  This event is consumed by the <do> tag\n\
    \   and causes the XML layer to load card with the identifier connected2.\n  \
    \ An XML request for these cards might look like:\n   S: XML/xml(deck?connected1?$tvalue=00:00:05?$cldpty=John\n\
    \   Doe?$calltimer=00:00:00)\n   And might be rendered as:\n   --------------------\n\
    \   |JOHN DOE          |\n   | TRNS  CONF  MENU |\n   --------------------\n \
    \    [XX]  [XX]  [XX]\n   Once the timer expires, the XML layer loads the referenced\
    \ page:\n   --------------------\n   |          00:00:05|\n   | TRNS  CONF  MENU\
    \ |\n   --------------------\n     [XX]  [XX]  [XX]\nAppendix C: Example usage\
    \ of MGCP extension packages\nC.1 Setting Labels on a Phone\n   Step 1. Call Agent\
    \ sets labels on several used keys.  Should be done\n   at startup.  The first\
    \ 2 keys are line appearance keys.  fk8 is a Do\n   Not Disturb function.\n  \
    \    RQNT 1876 d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n\
    \      X: 45\n      S: KY/ls(1,2315), KY/ls(2,2315), KY/ls(8,DND)\n      R: KY/fk1,\
    \ KY/fk2, KY/fk8, KY/fk22, KY/fk23, L/hd\n      T: L/hu\n      K: 1873\n   Step\
    \ 2. Gateway responds.\n         200 1876 OK\nC.2 Activating a Function on a Feature\
    \ Key\n   This example shows a feature key that is assigned to \"Do Not Disturb\"\
    \n   being activated and deactivated.\n   Step 1. User presses DND key, which\
    \ is assigned to fk8.  Gateway\n   sends NTFY to Call Agent.\n      NTFY 957 d003@da-003.syltrx.com\
    \ MGCP 1.0\n      K: 956\n      N: cs@sage.syltrx.com:2427\n      X: 45\n    \
    \  O: KY/fk8\n   Step 2. Call Agent responds.\n      200 957 OK\n   Step 3. Call\
    \ Agent sends new RQNT, indicating that DND indicator be\n   activated.  Note\
    \ that the Call Agent also re-sends the state of fk1,\n   which is not actually\
    \ necessary.  The Call Agent requests\n   notification of several of the feature\
    \ keys: fk1 and fk2 are line\n   keys, fk8 is DND, fk22 is redial, and fk23 is\
    \ messages.\n      RQNT 2822 d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n\
    \      X: 45\n      S: KY/ks(1,id), KY/ks(8,en)\n      R: KY/fk1, KY/fk2, KY/fk8,\
    \ KY/fk22, KY/fk23, L/hd\n      T: L/hu\n      K: 2743-2744\n   Step 4. Gateway\
    \ responds.\n      200 2822 OK\n   Step 5. User presses DND key again to de-activate\
    \ DND.  Gateway sends\n   NTFY to Call Agent.\n      NTFY 958 d003@da-003.syltrx.com\
    \ MGCP 1.0\n      K: 957\n      N: cs@sage.syltrx.com:2427\n      X: 45\n    \
    \  O: KY/fk8\n   Step 6. Call Agent responds.\n      200 958 OK\n   Step 7. Call\
    \ Agent sends new RQNT, DND indicator is de-activated.\n      RQNT 2823 d003@da-003.syltrx.com\
    \ MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n      X: 45\n      S: KY/ks(1,id),\
    \ KY/ks(8,db)\n      R: KY/fk1, KY/fk2, KY/fk8, KY/fk22, KY/fk23, L/hd\n     \
    \ T: L/hu\n      K: 2822\n   Step 8. Gateway responds.\n      200 2823 OK\nC.3\
    \ Generating a Call using a Feature Key as a Line Key\n   This example shows the\
    \ MGCP messages for dialing an extension after\n   pressing a feature key that\
    \ is configured as a line appearance key.\n   Step 1. User presses fk1, which\
    \ is configured as a line key.\n      NTFY 959 d003@da-003.syltrx.com MGCP 1.0\n\
    \      K: 958\n      N: cs@sage.syltrx.com:2427\n      X: 45\n      O: KY/fk1\n\
    \   Step 2. Call Agent responds.\n      200 959 OK\n   Step 3. Call Agent puts\
    \ the line key in the \"dial tone\" state and\n   forces the phone offhook.\n\
    \      RQNT 2833 d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n\
    \      X: 45\n      S: KY/ks(1,dt), BP/hd\n      R: KY/fk1, KY/fk2, KY/fk8, KY/fk22,\
    \ KY/fk23, L/hu\n      T: L/hd\n      K: 2823\n   Step 4. Gateway responds.\n\
    \      200 2833 OK\n   Step 5. Call Agent applies dial-tone.\n      RQNT 2834\
    \ d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n      X:\
    \ 45\n      S: L/dl, KY/ks(1,dt)\n      R: D/[0-9*#T](D), KY/fk1, KY/fk2, KY/fk8,\
    \ KY/fk22, KY/fk23, L/hu\n      T: L/hd\n      D: (*xx|[1-7]xxx|9)\n   Step 6.\
    \ Gateway responds.\n      200 2834 OK\n   Step 7. User dials 2362.  Gateway sends\
    \ NTFY.\n      NTFY 960 d003@da-003.syltrx.com MGCP 1.0\n      K: 959\n      N:\
    \ cs@sage.syltrx.com:2427\n      X: 45\n      O: D/2,D/3,D/6,D/2\n   Step 8. Call\
    \ Agent responds.\n      200 960 OK\n   Step 9. Call Agent puts line in the ringback\
    \ state.  Ringback not\n   applied yet.\n      RQNT 2836 d003@da-003.syltrx.com\
    \ MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n      X: 45\n      S: KY/ks(1,rb)\n\
    \      R: KY/fk1, KY/fk2, KY/fk8, KY/fk22, KY/fk23, L/hu\n      T: L/hd\n    \
    \  K: 2833, 2834\n   Step 10. Gateway responds.\n      200 2836 OK\n   Step 11.\
    \ Call Agent creates connection.\n      CRCX 2838 d003@da-003.syltrx.com MGCP\
    \ 1.0\n      C: 10B\n      M: RECVONLY\n   Step 12. Gateway responds.\n      200\
    \ 2838 OK\n      I: 101\n      v=0\n      o=- 998557784 998557784 IN IP4 38.187.114.41\n\
    \      s=MGCP RTP Session\n      c=IN IP4 172.16.130.32\n      t=0 0\n      m=audio\
    \ 1108 RTP/AVP 0\n      a=rtpmap:0 PCMU/8000\n   Step 13. Call Agent applies ringback.\n\
    \      RQNT 2841 d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n\
    \      X: 45\n      S: KY/ks(1,rb), G/rt\n      R: KY/fk1, KY/fk2, KY/fk8, KY/fk22,\
    \ KY/fk23, L/hu\n      T: L/hd\n   Step 14. Gateway responds.\n      200 2841\
    \ OK\n   Step 15. Call Agent modifies connection.\n      MDCX 2848 d003@da-003.syltrx.com\
    \ MGCP 1.0\n      C: 10B\n      I: 101\n      M: SENDRECV\n      K: 2841-2842\n\
    \      v=0\n      o=- 7960 7960 IN IP4 38.187.114.215\n      s=MGCP Call\n   \
    \   c=IN IP4 172.16.130.31\n      t=0 0\n      m=audio 1124 RTP/AVP 0\n   Step\
    \ 16. Gateway responds.\n      200 2848 OK\n   Step 17. Call Agent puts line in\
    \ connected state.  Added requested\n   events looking for hold (fk21) and conference/transfer\
    \ (fk24).\n      RQNT 2849 d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n\
    \      X: 45\n      S: KY/ks(1,cn)\n      R: KY/fk1, KY/fk2, KY/fk8, KY/fk21,\
    \ KY/fk24, L/hu\n      T: L/hd\n      K: 2842\n   Step 18. Gateway responds.\n\
    \      200 2849 OK\n   Step 19. Far end disconnects.  Call Agent deletes connection.\n\
    \      DLCX 2873 d003@da-003.syltrx.com MGCP 1.0\n      C: 10B\n      I: 101\n\
    \      K: 2848, 2849\n   Step 20. Gateway responds.\n      250 2873 Connection\
    \ Deleted\n   Step 21. Call Agent forces endpoint onhook/idle.\n      RQNT 2876\
    \ d003@da-003.syltrx.com MGCP 1.0\n      N: cs@sage.syltrx.com:2427\n      X:\
    \ 45\n      S: KY/ks(1,id), BP/hu\n      R: KY/fk1, KY/fk2, KY/fk8, KY/fk22, KY/fk23,\
    \ L/hd\n      T: L/hu\n      K: 2873\n   Step 22. Gateway responds.\n      200\
    \ 2876 OK\nC.4 Determining the Make and Model of a Phone\n   Step 1. Gateway restarts.\n\
    \      RSIP 1 *@alpha175.sylantro.com MGCP 1.0\n      RM: restart\n   Step 2.\
    \ Call Agent responds.\n      200 1 OK\n   Step 3. Call Agent audits the Gateway\
    \ to determine list of endpoints\n      AUEP 1000 *@alpha175.sylantro.com MGCP\
    \ 1.0\n   Step 4. Gateway responds.\n      200 1000 OK\n      Z: a004@alpha175.sylantro.com\n\
    \      Z: d001@alpha175.sylantro.com\n      Z: d002@alpha175.sylantro.com\n  \
    \    Z: d003@alpha175.sylantro.com\n   Step 5. For each endpoint, Call Agent determines\
    \ capabilities and\n   user-agent (phone-type)\n      AUEP 1040 d003@alpha175.sylantro.com\
    \ MGCP 1.0\n      K: 1039\n      F: A,X-UA\n   Step 6. Gateway responds.\n   \
    \   200 1040 OK\n      A: v:D;L;KY;X-BP;G;BP\n      X-UA: Sylantro/DKT2010-CA204#CA010\n\
    Appendix D: BNF Description of X-UA Parameter\n   Since parts of the X-UA parameter\
    \ must be parseable in order for a\n   Call Agent to treat similar phones in a\
    \ similar manner, a formal\n   grammar for this parameter is provided.\n ______________\
    \ _ ____________________________________________________\n|X-UA          |:|ENDPOINTINFO\
    \                                        |\n|______________|_|____________________________________________________|\n\
    |ENDPOINTINFO  |:|MAKE/MODEL[-VENDORINFO]                             |\n|______________|_|____________________________________________________|\n\
    |MAKE          |:|1*32 MAKECHAR                                       |\n|______________|_|____________________________________________________|\n\
    |MODEL         |:|1*32 MODELCHAR                                      |\n|______________|_|____________________________________________________|\n\
    |VENDORINFO    |:|1*32 VENDORCHAR                                     |\n|______________|_|____________________________________________________|\n\
    |MAKECHAR      |:|ALPHA | DIGIT                                       |\n|______________|_|____________________________________________________|\n\
    |MODELCHAR     |:|ALPHA | DIGIT                                       |\n|______________|_|____________________________________________________|\n\
    |VENDORCHAR    |:|ALPHA | DIGIT | OTHER                               |\n|______________|_|____________________________________________________|\n\
    Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All Rights\
    \ Reserved.\n   This document and translations of it may be copied and furnished\
    \ to\n   others, and derivative works that comment on or otherwise explain it\n\
    \   or assist in its implementation may be prepared, copied, published\n   and\
    \ distributed, in whole or in part, without restriction of any\n   kind, provided\
    \ that the above copyright notice and this paragraph are\n   included on all such\
    \ copies and derivative works.  However, this\n   document itself may not be modified\
    \ in any way, such as by removing\n   the copyright notice or references to the\
    \ Internet Society or other\n   Internet organizations, except as needed for the\
    \ purpose of\n   developing Internet standards in which case the procedures for\n\
    \   copyrights defined in the Internet Standards process must be\n   followed,\
    \ or as required to translate it into languages other than\n   English.\n   The\
    \ limited permissions granted above are perpetual and will not be\n   revoked\
    \ by the Internet Society or its successors or assigns.\n   This document and\
    \ the information contained herein is provided on an\n   \"AS IS\" basis and THE\
    \ INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES\
    \ OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\nAcknowledgement\n\
    \   Funding for the RFC Editor function is currently provided by the\n   Internet\
    \ Society.\n"
