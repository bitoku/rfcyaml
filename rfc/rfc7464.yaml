- title: __initial_text__
  contents:
  - '            JavaScript Object Notation (JSON) Text Sequences

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the JavaScript Object Notation (JSON) text\n\
    \   sequence format and associated media type \"application/json-seq\".  A\n \
    \  JSON text sequence consists of any number of JSON texts, all encoded\n   in\
    \ UTF-8, each prefixed by an ASCII Record Separator (0x1E), and each\n   ending\
    \ with an ASCII Line Feed character (0x0A).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7464.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Motivation .....................................2\n\
    \      1.1. Conventions Used in This Document ..........................2\n  \
    \ 2. JSON Text Sequence Format .......................................3\n    \
    \  2.1. JSON Text Sequence Parsing .................................3\n      2.2.\
    \ JSON Text Sequence Encoding ................................4\n      2.3. Incomplete/Invalid\
    \ JSON Texts Need Not Be Fatal ............4\n      2.4. Top-Level Values: numbers,\
    \ true, false, and null ...........5\n   3. Security Considerations .........................................6\n\
    \   4. IANA Considerations .............................................6\n  \
    \ 5. Normative References ............................................7\n   Acknowledgements\
    \ ...................................................8\n   Author's Address ...................................................8\n"
- title: 1.  Introduction and Motivation
  contents:
  - "1.  Introduction and Motivation\n   The JavaScript Object Notation (JSON) [RFC7159]\
    \ is a very handy\n   serialization format.  However, when serializing a large\
    \ sequence of\n   values as an array, or a possibly indeterminate-length or never-\n\
    \   ending sequence of values, JSON becomes difficult to work with.\n   Consider\
    \ a sequence of one million values, each possibly one kilobyte\n   when encoded\
    \ -- roughly one gigabyte.  It is often desirable to\n   process such a dataset\
    \ in an incremental manner without having to\n   first read all of it before beginning\
    \ to produce results.\n   Traditionally, the way to do this with JSON is to use\
    \ a \"streaming\"\n   parser, but these are not widely available, widely used,\
    \ or easy to\n   use.\n   This document describes the concept and format of \"\
    JSON text\n   sequences\", which are specifically not JSON texts themselves but\
    \ are\n   composed of (possible) JSON texts.  JSON text sequences can be parsed\n\
    \   (and produced) incrementally without having to have a streaming\n   parser\
    \ (nor streaming encoder).\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119].\n"
- title: 2.  JSON Text Sequence Format
  contents:
  - "2.  JSON Text Sequence Format\n   Two different sets of ABNF rules are provided\
    \ for the definition of\n   JSON text sequences: one for parsers and one for encoders.\
    \  Having\n   two different sets of rules permits recovery by parsers from\n \
    \  sequences where some of the elements are truncated for whatever\n   reason.\
    \  The syntax for parsers is specified in terms of octet\n   strings that are\
    \ then interpreted as JSON texts, if possible.  The\n   syntax for encoders, on\
    \ the other hand, assumes that sequence\n   elements are not truncated.\n   JSON\
    \ text sequences MUST use UTF-8 encoding; other encodings of JSON\n   (i.e., UTF-16\
    \ and UTF-32) MUST NOT be used.\n"
- title: 2.1.  JSON Text Sequence Parsing
  contents:
  - "2.1.  JSON Text Sequence Parsing\n   The ABNF [RFC5234] for the JSON text sequence\
    \ parser is as given in\n   Figure 1.\n      input-JSON-sequence = *(1*RS possible-JSON)\n\
    \      RS = %x1E; \"record separator\" (RS), see RFC 20\n               ; Also\
    \ known as: Unicode Character INFORMATION SEPARATOR\n               ;        \
    \        TWO (U+001E)\n      possible-JSON = 1*(not-RS); attempt to parse as UTF-8-encoded\n\
    \                                ; JSON text (see RFC 7159)\n      not-RS = %x00-1d\
    \ / %x1f-ff; any octets other than RS\n                     Figure 1: JSON Text\
    \ Sequence ABNF\n   In prose: a series of octet strings, each containing any octet\
    \ other\n   than a record separator (RS) (0x1E) [RFC20].  All octet strings are\n\
    \   preceded by an RS byte.  Each octet string in the sequence is to be\n   parsed\
    \ as a JSON text in the UTF-8 encoding [RFC3629].\n   If parsing of such an octet\
    \ string as a UTF-8-encoded JSON text\n   fails, the parser SHOULD nonetheless\
    \ continue parsing the remainder\n   of the sequence.  The parser can report such\
    \ failures to\n   applications, which might then choose to terminate parsing of\
    \ a\n   sequence.  Multiple consecutive RS octets do not denote empty\n   sequence\
    \ elements between them and can be ignored.\n   This document does not define\
    \ a mechanism for reliably identifying\n   text sequence by position (for example,\
    \ when sending individual\n   elements of an array as unique text sequences).\
    \  For applications\n   where truncation is a possibility, this means that intended\
    \ sequence\n   elements can be truncated and can even be missing entirely;\n \
    \  therefore, a reference to an nth element would be unreliable.\n   There is\
    \ no end of sequence indicator.\n"
- title: 2.2.  JSON Text Sequence Encoding
  contents:
  - "2.2.  JSON Text Sequence Encoding\n   The ABNF for the JSON text sequence encoder\
    \ is given in Figure 2.\n      JSON-sequence = *(RS JSON-text LF)\n      RS =\
    \ %x1E; see RFC 20\n               ; Also known as: Unicode Character INFORMATION\
    \ SEPARATOR\n               ;                TWO (U+001E)\n      LF = %x0A; \"\
    line feed\" (LF), see RFC 20\n      JSON-text = <given by RFC 7159, using UTF-8\
    \ encoding>\n                     Figure 2: JSON Text Sequence ABNF\n   In prose:\
    \ any number of JSON texts, each encoded in UTF-8 [RFC3629],\n   each preceded\
    \ by one ASCII RS character, and each followed by a line\n   feed (LF).  Since\
    \ RS is an ASCII control character, it may only\n   appear in JSON strings in\
    \ escaped form (see [RFC7159]), and since RS\n   may not appear in JSON texts\
    \ in any other form, RS unambiguously\n   delimits the start of any element in\
    \ the sequence.  RS is sufficient\n   to unambiguously delimit all top-level JSON\
    \ value types other than\n   numbers.  Following each JSON text in the sequence\
    \ with an LF allows\n   detection of truncated JSON texts consisting of a number\
    \ at the top-\n   level; see Section 2.4.\n   JSON text sequence encoders are\
    \ expected to ensure that the sequence\n   elements are properly formed.  When\
    \ the JSON text sequence encoder\n   does the JSON text encoding, the sequence\
    \ elements will naturally be\n   properly formed.  When the JSON text sequence\
    \ encoder accepts\n   already-encoded JSON texts, the JSON text sequence encoder\
    \ ought to\n   parse them before adding them to a sequence.\n   Note that on some\
    \ systems it\"s possible to input RS by typing\n   \"ctrl-^\"; on some system\
    \ or applications, the correct sequence may be\n   \"ctrl-v ctrl-^\".  This is\
    \ helpful when constructing a sequence\n   manually with a text editor.\n"
- title: 2.3.  Incomplete/Invalid JSON Texts Need Not Be Fatal
  contents:
  - "2.3.  Incomplete/Invalid JSON Texts Need Not Be Fatal\n   Per Section 2.1, JSON\
    \ text sequence parsers should not abort when an\n   octet string contains a malformed\
    \ JSON text.  Instead, the JSON text\n   sequence parser should skip to the next\
    \ RS.  Such a situation may\n   arise in contexts where, for example, data that\
    \ is appended to log\n   files to log files is truncated by the filesystem (e.g.,\
    \ due to a\n   crash or administrative process termination).\n   Incremental JSON\
    \ text parsers may be used, though of course failure\n   to parse a given text\
    \ may result after first producing some\n   incremental parse results.\n   Sequence\
    \ parsers should have an option to warn about truncated JSON\n   texts.\n"
- title: '2.4.  Top-Level Values: numbers, true, false, and null'
  contents:
  - "2.4.  Top-Level Values: numbers, true, false, and null\n   While objects, arrays,\
    \ and strings are self-delimited in JSON texts,\n   numbers and the values 'true',\
    \ 'false', and 'null' are not.  Only\n   whitespace can delimit the latter four\
    \ kinds of values.\n   JSON text sequences use 0x0A as a \"canary\" octet to detect\n\
    \   truncation.\n   Parsers MUST check that any JSON texts that are a top-level\
    \ number,\n   or that might be 'true', 'false', or 'null', include JSON whitespace\n\
    \   (at least one byte matching the \"ws\" ABNF rule from [RFC7159]) after\n \
    \  that value; otherwise, the JSON-text may have been truncated.  Note\n   that\
    \ the LF following each JSON text matches the \"ws\" ABNF rule.\n   Parsers MUST\
    \ drop JSON-text sequence elements consisting of non-self-\n   delimited top-level\
    \ values that may have been truncated (that are not\n   delimited by whitespace).\
    \  Parsers can report such texts as warnings\n   (including, optionally, the parsed\
    \ text and/or the original octet\n   string).\n   For example, '<RS>123<RS>' might\
    \ have been intended to carry the top-\n   level number 1234, but it got truncated.\
    \  Similarly, '<RS>true<RS>'\n   might have been intended to carry the invalid\
    \ text 'trueish'.\n   '<RS>truefalse<RS>' is not two top-level values, 'true',\
    \ and 'false';\n   it is simply not a valid JSON text.\n   Implementations may\
    \ produce a value when parsing '<RS>\"foo\"<RS>'\n   because their JSON text parser\
    \ might be able to consume bytes\n   incrementally; since the JSON text in this\
    \ case is a self-delimiting\n   top-level value, the parser can produce the result\
    \ without consuming\n   an additional byte.  Such implementations ought to skip\
    \ to the next\n   RS byte, possibly reporting any intervening non-whitespace bytes.\n\
    \   Detection of truncation of non-self-delimited sequence elements\n   (numbers,\
    \ true, false, and null) is only possible when the sequence\n   encoder produces\
    \ or receives complete JSON texts.  Implementations\n   where the sequence encoder\
    \ is not also in charge of encoding the\n   individual JSON texts should ensure\
    \ that those JSON texts are\n   complete.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   All the security considerations of JSON [RFC7159]\
    \ apply.  This format\n   provides no cryptographic integrity protection of any\
    \ kind.\n   As usual, parsers must operate on input that is assumed to be\n  \
    \ untrusted.  This means that parsers must fail gracefully in the face\n   of\
    \ malicious inputs.\n   Note that incremental JSON text parsers can produce partial\
    \ results\n   and later indicate failure to parse the remainder of a text.  A\n\
    \   sequence parser that uses an incremental JSON text parser might treat\n  \
    \ a sequence like '<RS>\"foo\"<LF>456<LF><RS>' as a sequence of one\n   element\
    \ (\"foo\"), while a sequence parser that uses a non-incremental\n   JSON text\
    \ parser might treat the same sequence as being empty.  This\n   effect, and texts\
    \ that fail to parse and are ignored, can be used to\n   smuggle data past sequence\
    \ parsers that don't warn about JSON text\n   failures.\n   Repeated parsing and\
    \ re-encoding of a JSON text sequence can result\n   in the addition (or stripping)\
    \ of trailing LF bytes from (to)\n   individual sequence element JSON texts. \
    \ This can break signature\n   validation.  JSON has no canonical form for JSON\
    \ texts, therefore\n   neither does the JSON text sequence format.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   The MIME media type for JSON text sequences is application/json-seq.\n\
    \   Type name: application\n   Subtype name: json-seq\n   Required parameters:\
    \ N/A\n   Optional parameters: N/A\n   Encoding considerations: binary\n   Security\
    \ considerations: See RFC 7464, Section 3.\n   Interoperability considerations:\
    \ Described herein.\n   Published specification: RFC 7464.\n   Applications that\
    \ use this media type:\n      <https://stedolan.github.io/jq>\n      <https://github.com/mapbox/cligj>\n\
    \      <https://github.com/hildjj/json-text-sequence>\n   Fragment identifier\
    \ considerations: N/A\n   Additional information:\n   o  Deprecated alias names\
    \ for this type: N/A\n   o  Magic number(s): N/A\n   o  File extension(s): N/A\n\
    \   o  Macintosh file type code(s): N/A\n   Person & email address to contact\
    \ for further information:\n      json@ietf.org\n   Intended usage: COMMON\n \
    \  Author: Nicolas Williams (nico@cryptonector.com)\n   Change controller: IETF\n"
- title: 5.  Normative References
  contents:
  - "5.  Normative References\n   [RFC20]    Cerf, V., \"ASCII format for network\
    \ interchange\", STD 80,\n              RFC 20, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, November 2003,\n              <http://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234, January 2008,\n      \
    \        <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7159]  Bray, T., Ed.,\
    \ \"The JavaScript Object Notation (JSON) Data\n              Interchange Format\"\
    , RFC 7159, March 2014,\n              <http://www.rfc-editor.org/info/rfc7159>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Phillip Hallam-Baker proposed the use of JSON text sequences\
    \ for\n   logfiles and pointed out the need for resynchronization.  Stephen\n\
    \   Dolan created <https://github.com/stedolan/jq>, which uses something\n   like\
    \ JSON text sequences (with LF as the separator between texts on\n   output, and\
    \ requiring only such whitespace as needed to disambiguate\n   on input).  Carsten\
    \ Bormann suggested the use of ASCII RS, and Joe\n   Hildebrand suggested the\
    \ use of LF in addition to RS for\n   disambiguating top-level number values.\
    \  Paul Hoffman shepherded the\n   document.  Many others contributed reviews\
    \ and comments on the JSON\n   Working Group mailing list.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Nicolas Williams\n   Cryptonector, LLC\n   EMail: nico@cryptonector.com\n"
