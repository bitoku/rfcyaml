- title: __initial_text__
  contents:
  - "                 Internet Open Trading Protocol - IOTP\n                    \
    \          Version 1.0\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Open Trading Protocol (IOTP) provides an interoperable\n\
    \   framework for Internet commerce. It is payment system independent and\n  \
    \ encapsulates payment systems such as SET, Secure Channel\n   Credit/Debit, Mondex,\
    \ CyberCoin, GeldKarte, etc. IOTP is able to\n   handle cases where such merchant\
    \ roles as the shopping site, the\n   Payment Handler, the Delivery Handler of\
    \ goods or services, and the\n   provider of customer support are performed by\
    \ different parties or by\n   one party.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   3.  Protocol Structure ............................................31\n\
    \     3.1  Overview ...................................................32\n  \
    \       3.1.1  IOTP Message Structure ...............................32\n    \
    \     3.1.2  IOTP Transactions ....................................34\n     3.2\
    \  IOTP Message ...............................................35\n         3.2.1\
    \  XML Document Prolog ..................................37\n     3.3  Transaction\
    \ Reference Block ................................37\n         3.3.1  Transaction\
    \ Id Component .............................38\n         3.3.2  Message Id Component\
    \ .................................39\n         3.3.3  Related To Component .................................41\n\
    \     3.4  ID Attributes ..............................................42\n  \
    \       3.4.1  IOTP Message ID Attribute Definition .................43\n    \
    \     3.4.2  Block and Component ID Attribute Definitions .........44\n      \
    \   3.4.3  Example of use of ID Attributes ......................46\n     3.5\
    \  Element References .........................................46\n     3.6  Extending\
    \ IOTP .............................................48\n         3.6.1  Extra\
    \ XML Elements ...................................49\n         3.6.2  Opaque Embedded\
    \ Data .................................50\n     3.7  Packaged Content Element\
    \ ...................................50\n         3.7.1  Packaging HTML .......................................52\n\
    \         3.7.2  Packaging XML ........................................53\n  \
    \   3.8  Identifying Languages ......................................54\n    \
    \ 3.9  Secure and Insecure Net Locations ..........................54\n     3.10\
    \ Cancelled Transactions .....................................55\n         3.10.1\
    \ Cancelling Transactions ..............................55\n         3.10.2 Handling\
    \ Cancelled Transactions ......................56\n   4.  IOTP Error Handling\
    \ ...........................................56\n     4.1  Technical Errors ...........................................57\n\
    \     4.2  Business Errors ............................................57\n  \
    \   4.3  Error Depth ................................................58\n    \
    \     4.3.1  Transport Level ......................................58\n      \
    \   4.3.2  Message Level ........................................58\n        \
    \ 4.3.3  Block Level ..........................................59\n     4.4  Idempotency,\
    \ Processing Sequence, and Message Flow .........61\n     4.5  Server Role Processing\
    \ Sequence ............................62\n         4.5.1  Initiating Transactions\
    \ ..............................62\n         4.5.2  Processing Input Messages\
    \ ............................63\n         4.5.3  Cancelling a Transaction .............................70\n\
    \         4.5.4  Retransmitting Messages ..............................70\n  \
    \   4.6  Client Role Processing Sequence ............................71\n    \
    \     4.6.1  Initiating Transactions ..............................71\n      \
    \   4.6.2  Processing Input Messages ............................72\n        \
    \ 4.6.3  Cancelling a Transaction .............................74\n         4.6.4\
    \  Retransmitting Messages ..............................74\n   5.  Security Considerations\
    \ .......................................74\n     5.1  Determining whether to\
    \ use digital signatures ..............74\n     5.2  Symmetric and Asymmetric\
    \ Cryptography ......................76\n     5.3  Data Privacy ...............................................77\n\
    \     5.4  Payment Protocol Security ..................................77\n  \
    \ 6.  Digital Signatures and IOTP ...................................77\n    \
    \ 6.1  How IOTP uses Digital Signatures ...........................77\n      \
    \   6.1.1  IOTP Signature Example ...............................80\n        \
    \ 6.1.2  OriginatorInfo and RecipientInfo Elements ............82\n         6.1.3\
    \  Using signatures to Prove Actions Complete\n                Successfully .........................................83\n\
    \     6.2  Checking a Signature is Correctly Calculated ...............84\n  \
    \   6.3  Checking a Payment or Delivery can occur ...................85\n    \
    \     6.3.1  Check Request Block sent Correct Organisation ........86\n      \
    \   6.3.2  Check Correct Components present in Request Block ....91\n        \
    \ 6.3.3  Check an Action is Authorised ........................91\n   7.  Trading\
    \ Components ............................................93\n     7.1  Protocol\
    \ Options Component .................................96\n     7.2  Authentication\
    \ Request Component ...........................97\n     7.3  Authentication Response\
    \ Component ..........................98\n     7.4  Trading Role Information Request\
    \ Component .................99\n     7.5  Order Component ...........................................100\n\
    \         7.5.1  Order Description Content ...........................101\n  \
    \       7.5.2  OkFrom and OkTo Timestamps ..........................101\n    \
    \ 7.6  Organisation Component ....................................102\n      \
    \   7.6.1  Organisation IDs ....................................104\n        \
    \ 7.6.2  Trading Role Element ................................105\n         7.6.3\
    \  Contact Information Element .........................108\n         7.6.4  Person\
    \ Name Element .................................109\n         7.6.5  Postal Address\
    \ Element ..............................110\n     7.7  Brand List Component ......................................111\n\
    \         7.7.1  Brand Element .......................................113\n  \
    \       7.7.2  Protocol Brand Element ..............................115\n    \
    \     7.7.3  Protocol Amount Element .............................116\n      \
    \   7.7.4  Currency Amount Element .............................117\n        \
    \ 7.7.5  Pay Protocol Element ................................118\n     7.8  Brand\
    \ Selection Component .................................120\n         7.8.1  Brand\
    \ Selection Brand Info Element ..................122\n         7.8.2  Brand Selection\
    \ Protocol Amount Info Element ........122\n         7.8.3  Brand Selection Currency\
    \ Amount Info Element ........123\n     7.9  Payment Component .........................................123\n\
    \     7.10 Payment Scheme Component ..................................125\n  \
    \   7.11 Payment Receipt Component .................................126\n    \
    \ 7.12 Payment Note Component ....................................128\n     7.13\
    \ Delivery Component ........................................129\n         7.13.1\
    \ Delivery Data Element ...............................130\n     7.14 Consumer\
    \ Delivery Data Component ..........................132\n     7.15 Delivery Note\
    \ Component ...................................133\n     7.16 Status Component\
    \ ..........................................134\n         7.16.1 Offer Completion\
    \ Codes ..............................137\n         7.16.2 Payment Completion\
    \ Codes ............................138\n         7.16.3 Delivery Completion Codes\
    \ ...........................140\n         7.16.4 Authentication Completion Codes\
    \ .....................142\n         7.16.5 Undefined Completion Codes ..........................144\n\
    \         7.16.6 Transaction Inquiry Completion Codes ................144\n  \
    \   7.17 Trading Role Data Component ...............................144\n    \
    \     7.17.1 Who Receives a Trading Role Data Component ..........145\n     7.18\
    \ Inquiry Type Component ....................................146\n     7.19 Signature\
    \ Component .......................................147\n         7.19.1 IOTP usage\
    \ of signature elements and attributes .....148\n         7.19.2 Offer Response\
    \ Signature Component ..................150\n         7.19.3 Payment Receipt Signature\
    \ Component .................151\n         7.19.4 Delivery Response Signature\
    \ Component ...............152\n         7.19.5 Authentication Request Signature\
    \ Component ..........152\n         7.19.6 Authentication Response Signature Component\
    \ .........153\n         7.19.7 Inquiry Request Signature Component .................153\n\
    \         7.19.8 Inquiry Response Signature Component ................153\n  \
    \       7.19.9 Ping Request Signature Component ....................153\n    \
    \     7.19.10 Ping Response Signature Component...................154\n     7.20\
    \ Certificate Component .....................................154\n         7.20.1\
    \ IOTP usage of signature elements and attributes .....154\n     7.21 Error Component\
    \ ...........................................154\n         7.21.1 Error Processing\
    \ Guidelines .........................157\n         7.21.2 Error Codes .........................................158\n\
    \         7.21.3 Error Location Element ..............................162\n  \
    \ 8.  Trading Blocks ...............................................163\n    \
    \ 8.1  Trading Protocol Options Block ............................166\n     8.2\
    \  TPO Selection Block .......................................167\n     8.3  Offer\
    \ Response Block ......................................168\n     8.4  Authentication\
    \ Request Block ..............................169\n     8.5  Authentication Response\
    \ Block .............................170\n     8.6  Authentication Status Block\
    \ ...............................171\n     8.7  Payment Request Block .....................................171\n\
    \     8.8  Payment Exchange Block ....................................173\n  \
    \   8.9  Payment Response Block ....................................173\n    \
    \ 8.10 Delivery Request Block ....................................175\n     8.11\
    \ Delivery Response Block ...................................176\n     8.12 Inquiry\
    \ Request Trading Block .............................177\n     8.13 Inquiry Response\
    \ Trading Block ............................177\n     8.14 Ping Request Block\
    \ ........................................179\n     8.15 Ping Response Block .......................................179\n\
    \     8.16 Signature Block ...........................................181\n  \
    \       8.16.1 Signature Block with Offer Response .................182\n    \
    \     8.16.2 Signature Block with Payment Request ................182\n      \
    \   8.16.3 Signature Block with Payment Response ...............182\n        \
    \ 8.16.4 Signature Block with Delivery Request ...............182\n         8.16.5\
    \ Signature Block with Delivery Response ..............182\n     8.17 Error Block\
    \ ...............................................183\n     8.18 Cancel Block ..............................................184\n\
    \   9.  Internet Open Trading Protocol Transactions ..................184\n  \
    \   9.1  Authentication and Payment Related IOTP Transactions ......185\n    \
    \     9.1.1  Authentication Document Exchange ....................188\n      \
    \   9.1.2  Offer Document Exchange .............................194\n        \
    \ 9.1.3  Payment Document Exchange ...........................203\n         9.1.4\
    \  Delivery Document Exchange ..........................209\n         9.1.5  Payment\
    \ and Delivery Document Exchange ..............212\n         9.1.6  Baseline Authentication\
    \ IOTP Transaction ............216\n         9.1.7  Baseline Deposit IOTP Transaction\
    \ ...................218\n         9.1.8  Baseline Purchase IOTP Transaction ..................220\n\
    \         9.1.9  Baseline Refund IOTP Transaction ....................222\n  \
    \       9.1.10 Baseline Withdrawal IOTP Transaction ................224\n    \
    \     9.1.11 Baseline Value Exchange IOTP Transaction ............226\n      \
    \   9.1.12 Valid Combinations of Document Exchanges ............230\n        \
    \ 9.1.13 Combining Authentication Transactions with other\n                Transactions\
    \ ........................................234\n     9.2  Infrastructure Transactions\
    \ ...............................235\n         9.2.1  Baseline Transaction Status\
    \ Inquiry IOTP Transaction 235\n         9.2.2  Baseline Ping IOTP Transaction\
    \ ......................241\n   10. Retrieving Logos .............................................244\n\
    \     10.1 Logo Size .................................................245\n  \
    \   10.2 Logo Color Depth ..........................................245\n    \
    \ 10.3 Logo Net Location Examples ................................246\n   11.\
    \ Brands .......................................................246\n     11.1\
    \ Brand Definitions and Brand Selection .....................246\n         11.1.1\
    \ Definition of Payment Instrument ....................247\n         11.1.2 Definition\
    \ of Brand .................................247\n         11.1.3 Definition of\
    \ Dual Brand ............................248\n         11.1.4 Definition of Promotional\
    \ Brand .....................248\n         11.1.5 Identifying Promotional Brands\
    \ ......................249\n     11.2 Brand List Examples .......................................251\n\
    \         11.2.1 Simple Credit Card Based Example ....................252\n  \
    \       11.2.2 Credit Card Brand List Including Promotional Brands..253\n    \
    \     11.2.3 Brand Selection Example .............................254\n      \
    \   11.2.4 Complex Electronic Cash Based Brand List ............255\n   12. IANA\
    \ Considerations ..........................................257\n     12.1 Codes\
    \ Controlled by IANA ..................................257\n     12.2 Codes not\
    \ controlled by IANA ..............................263\n   13. Internet Open Trading\
    \ Protocol Data Type Definition ..........263\n   14. Glossary .....................................................277\n\
    \   15. References ...................................................284\n  \
    \ 16. Author's Address .............................................287\n   17.\
    \ Full Copyright Statement .....................................290\n"
- title: Table of Figures
  contents:
  - "Table of Figures\n   Figure 1 IOTP Trading Roles                            \
    \           16\n   Figure 2 Offer Exchange                                   \
    \        19\n   Figure 3 Payment Exchange                                    \
    \     22\n   Figure 4 Delivery Exchange                                      \
    \  25\n   Figure 5 Authentication Exchange                                  27\n\
    \   Figure 6 IOTP Message Structure                                   33\n   Figure\
    \ 7 An IOTP Transaction                                      34\n   Figure 8 Example\
    \ use of ID attributes                             46\n   Figure 9 Element References\
    \                                       48\n   Figure 10 Signature Digests   \
    \                                    79\n   Figure 11 Example use of Signatures\
    \ for Baseline Purchase         81\n   Figure 12 Checking a Payment Handler can\
    \ carry out a Payment      87\n   Figure 13 Checking a Delivery Handler can carry\
    \ out a Delivery    90\n   Figure 14 Trading Components                      \
    \                94\n   Figure 15 Brand List Element Relationships           \
    \            113\n   Figure 16 Trading Blocks                                \
    \         164\n   Figure 17 Payment and Authentication Message Flow Combinations\
    \   187\n   Figure 18 Authentication Document Exchange                       190\n\
    \   Figure 19 Brand Dependent Offer Document Exchange                196\n   Figure\
    \ 20 Brand Independent Offer Exchange                       198\n   Figure 21\
    \ Payment Document Exchange                              204\n   Figure 22 Delivery\
    \ Document Exchange                             210\n   Figure 23 Payment and\
    \ Delivery Document Exchange                 214\n   Figure 24 Baseline Authentication\
    \ IOTP Transaction               217\n   Figure 25 Baseline Deposit IOTP Transaction\
    \                      219\n   Figure 26 Baseline Purchase IOTP Transaction  \
    \                   221\n   Figure 27 Baseline Refund IOTP Transaction       \
    \                223\n   Figure 28 Baseline Withdrawal IOTP Transaction      \
    \             225\n   Figure 29 Baseline Value Exchange IOTP Transaction     \
    \          228\n   Figure 30 Baseline Value Exchange Signatures              \
    \       230\n   Figure 31 Valid Combinations of Document Exchanges           \
    \    231\n   Figure 32 Baseline Transaction Status Inquiry                   \
    \ 238\n   Figure 33 Baseline Ping Messages                                 242\n"
- title: 1. Background
  contents:
  - "1. Background\n   The Internet Open Trading Protocol (IOTP) provides an interoperable\n\
    \   framework for Internet commerce. It is payment system independent and\n  \
    \ encapsulates payment systems such as SET, Mondex, CyberCash,\n   DigiCash, GeldKarte,\
    \ etc. IOTP is able to handle cases where such\n   merchant roles as the shopping\
    \ site, the Payment Handler, the\n   Delivery Handler of goods or services, and\
    \ the provider of customer\n   support are performed by different parties or by\
    \ one party.\n   The developers of IOTP seek to provide a virtual capability that\n\
    \   safely replicates the real world, the paper based, traditional,\n   understood,\
    \ accepted methods of trading, buying, selling, value\n   exchanging that has\
    \ existed for many hundreds of years.  The\n   negotiation of who will be the\
    \ parties to the trade, how it will be\n   conducted, the presentment of an offer,\
    \ the method of payment, the\n   provision of a payment receipt, the delivery\
    \ of goods and the receipt\n   of goods. These are events that are taken for granted\
    \ in the course\n   of real world trade. IOTP has been produced to provide the\
    \ same for\n   the virtual world, and to prepare and provide for the introduction\
    \ of\n   new models of trading made possible by the expanding presence of the\n\
    \   virtual world.\n   The other fundamental ideal of the IOTP effort is to produce\
    \ a\n   definition of these trading events in such a way that no matter where\n\
    \   produced, two unfamiliar parties using electronic commerce\n   capabilities\
    \ to buy and sell that conform to the IOTP specifications\n   will be able to\
    \ complete the business safely and successfully.\n   In summary, IOTP supports:\n\
    \   o Familiar trading models\n   o New trading models\n   o Global interoperability\n\
    \   The remainder of this section provides background to why IOTP was\n   developed.\
    \ The specification itself starts in the next chapter.\n"
- title: 1.1 Commerce on the Internet, a Different Model
  contents:
  - "1.1 Commerce on the Internet, a Different Model\n   The growth of the Internet\
    \ and the advent of electronic commerce are\n   bringing about enormous changes\
    \ around the world in society, politics\n   and government, and in business. The\
    \ ways in which trading partners\n   communicate, conduct commerce, are governed\
    \ have been enriched and\n   changed forever.\n   One of the very fundamental\
    \ changes about which IOTP is concerned is\n   taking place in the way consumers\
    \ and merchants trade.\n   Characteristics of trading that have changed markedly\
    \ include:\n   o  Presence: Face-to-face transactions become the exception, not\
    \ the\n      rule.  Already with the rise of mail order and telephone order\n\
    \      placement this change has been felt in western commerce.\n      Electronic\
    \ commerce over the Internet will further expand the\n      scope and volume of\
    \ transactions conducted without ever seeing the\n      people who are a part\
    \ of the enterprise with whom one does\n      business.\n   o  Authentication:\
    \ An important part of personal presence is the\n      ability of the parties\
    \ to use familiar objects and dialogue to\n      confirm they are who they claim\
    \ to be. The seller displays one or\n      several well known financial logos\
    \ that declaim his ability to\n      accept widely used credit and debit instruments\
    \ in the payment\n      part of a purchase. The buyer brings government or financial\n\
    \      institution identification that assures the seller she will be\n      paid.\
    \ People use intangibles such as personal appearance and\n      conduct, location\
    \ of the store, apparent quality and familiarity\n      with brands of merchandise,\
    \ and a good clear look in the eye to\n      reinforce formal means of authentication.\n\
    \   o  Payment Instruments: Despite the enormous size of bank card\n      financial\
    \ payments associations and their members, most of the\n      world's trade still\
    \ takes place using the coin of the realm or\n      barter. The present infrastructure\
    \ of the payments business cannot\n      economically support low value transactions\
    \ and could not survive\n      under the consequent volumes of transactions if\
    \ it did accept low\n      value transactions.\n   o  Transaction Values: New\
    \ meaning for low value transactions arises\n      in the Internet where sellers\
    \ may wish to offer for example, pages\n      of information for fractions of\
    \ currency that do not exist in the\n      real world.\n   o  Delivery: New modes\
    \ of delivery must be accommodated such as\n      direct electronic delivery.\
    \ The means by which receipt is\n      confirmed and the execution of payment\
    \ change dramatically where\n      the goods or services have extremely low delivery\
    \ cost but may in\n      fact have very high value.  Or, maybe the value is not\
    \ high, but\n      once delivery occurs the value is irretrievably delivered so\n\
    \      payment must be final and non-refundable but delivery nonetheless\n   \
    \   must still be confirmed before payment.  Incremental delivery such\n     \
    \ as listening or viewing time or playing time are other models that\n      operate\
    \ somewhat differently in the virtual world.\n"
- title: 1.2 Benefits of IOTP
  contents:
  - "1.2 Benefits of IOTP\n   ELECTRONIC COMMERCE SOFTWARE VENDORS\n   Electronic\
    \ Commerce Software Vendors will be able to develop e-\n   commerce products which\
    \ are more attractive as they will inter-\n   operate with any other vendors'\
    \ software. However, since IOTP focuses\n   on how these solutions communicate,\
    \ there is still plenty of\n   opportunity for product differentiation.\n   PAYMENT\
    \ BRANDS\n   IOTP provides a standard framework for encapsulating payment\n  \
    \ protocols.  This means that it is easier for payment products to be\n   incorporated\
    \ into IOTP solutions. As a result the payment brands will\n   be more widely\
    \ distributed and available on a wider variety of\n   platforms.\n   MERCHANTS\n\
    \   There are several benefits for Merchants:\n   o  they will be able to offer\
    \ a wider variety of payment brands,\n   o  they can be more certain that the\
    \ customer will have the software\n      needed to complete the purchase\n   o\
    \  through receiving payment and delivery receipts from their\n      customers,\
    \ they will be able to provide customer care knowing that\n      they are dealing\
    \ with the individual or organisation with which\n      they originally traded\n\
    \   o  new merchants will be able to enter this new (Internet) market-\n     \
    \ place with new products and services, using the new trading\n      opportunities\
    \ which IOTP presents\n   BANKS AND FINANCIAL INSTITUTIONS\n   There are also\
    \ several benefits for Banks and Financial Institutions:\n   o  they will be able\
    \ to provide IOTP support for merchants\n   o  they will find new opportunities\
    \ for IOTP related services:\n      -  providing customer care for merchants\n\
    \      -  fees from processing new payments and deposits\n   o  they have an opportunity\
    \ to build relationships with new types of\n      merchants\n   CUSTOMERS\n  \
    \ For Customers there are several benefits:\n   o  they will have a larger selection\
    \ of merchants with whom they can\n      trade\n   o  there is a more consistent\
    \ interface when making the purchase\n   o  there are ways in which they can get\
    \ their problems fixed through\n      the merchant (rather than the bank!)\n \
    \  o  there is a record of their transaction which can be used, for\n      example,\
    \ to feed into accounting systems or, potentially, to\n      present to the tax\
    \ authorities\n"
- title: 1.3 Baseline IOTP
  contents:
  - "1.3 Baseline IOTP\n   This specification is Baseline IOTP. It is a Baseline in\
    \ that it\n   contains ways of doing trades on the Internet which are the most\n\
    \   common, for example purchases and refunds.\n   The group that has worked on\
    \ the IOTP see an extended version being\n   developed over time but feel a need\
    \ to focus on a limited function\n   but completely usable specification in order\
    \ that implementers can\n   develop solutions that work now.\n   During this period\
    \ it is anticipated that there will be no changes to\n   the scope of this specification\
    \ with the only changes made being\n   limited to corrections where problems are\
    \ found. Software solutions\n   have been developed based on earlier versions\
    \ of this specification\n   (for example version 0.9 published in early 1998 and\
    \ earlier\n   revisions of version 1.0 published during 1999) which prove that\
    \ the\n   IOTP works.\n"
- title: 1.4 Objectives of Document
  contents:
  - "1.4 Objectives of Document\n   The objectives of this document are to provide\
    \ a specification of\n   version 1.0 of the Internet Open Trading Protocols which\
    \ can be used\n   to design and implement systems which support electronic trading\
    \ on\n   the Internet using the Internet Open Trading Protocols.\n   The purpose\
    \ of the document is:\n   o  to allow potential developers of products based on\
    \ the protocol to\n      develop software/hardware solutions which use the protocol\n\
    \   o  to allow the financial services industry to understand a\n      developing\
    \ electronic commerce trading protocol that encapsulates\n      (without modification)\
    \ any of the current or developing payment\n      schemes now being used or considered\
    \ by their merchant customer\n      base\n"
- title: 1.5 Scope of Document
  contents:
  - "1.5 Scope of Document\n   The protocol describes the content, format and sequences\
    \ of messages\n   that pass among the participants in an electronic trade - consumers,\n\
    \   merchants and banks or other financial institutions, and customer\n   care\
    \ providers.  These are required to support the electronic\n   commerce transactions\
    \ outlined in the objectives above.\n   The protocol is designed to be applicable\
    \ to any electronic payment\n   scheme since it targets the complete purchase\
    \ process where the\n   movement of electronic value from the payer to the payee\
    \ is only one,\n   but important, step of many that may be involved to complete\
    \ the\n   trade.\n   Payment Scheme which IOTP could support include MasterCard\
    \ Credit,\n   Visa Credit, Mondex Cash, Visa Cash, GeldKarte, eCash, CyberCoin,\n\
    \   Millicent, Proton, etc.\n   Each payment scheme contains some message flows\
    \ which are specific to\n   that scheme. These scheme-specific parts of the protocol\
    \ are\n   contained in a set of payment scheme supplements to this\n   specification.\n\
    \   The document does not prescribe the software and processes that will\n   need\
    \ to be implemented by each participant. It does describe the\n   framework necessary\
    \ for trading to take place.\n   This document also does not address any legal\
    \ or regulatory issues\n   surrounding the implementation of the protocol or the\
    \ information\n   systems which use them.\n"
- title: 1.6 Document Structure
  contents:
  - "1.6 Document Structure\n   The document consists of the following sections:\n\
    \   o  Section 1 - Background: This section gives a brief background on\n    \
    \  electronic commerce and the benefits IOTP offers.\n   o  Section 2 - Introduction:\
    \ This section describes the various\n      Trading Exchanges and shows how these\
    \ trading exchanges are used\n      to construct the IOTP Transactions. This section\
    \ also explains\n      various Trading Roles that would participate in electronic\
    \ trade.\n   o  Section 3 - Protocol Structure: This section summarises how\n\
    \      various IOTP transactions are constructed using the Trading Blocks\n  \
    \    and Trading Components that are the fundamental building blocks\n      for\
    \ IOTP transactions. All IOTP transaction messages are well\n      formed XML\
    \ documents.\n   o  Section 4 - IOTP Error Handling: This section describes how\
    \ to\n      process exceptions and errors during the protocol message exchange\n\
    \      and trading exchange processing. This section provides a generic\n    \
    \  overview of the exception handling. This section should be read\n      carefully.\n\
    \   o  Section 5 - Security Considerations: This section considers from\n    \
    \  an IETF perspective, how IOTP addresses security. It includes: how\n      to\
    \ determine whether to use digital signatures with IOTP, how IOTP\n      address\
    \ data privacy, and how security built into payment\n      protocols relate to\
    \ IOTP security.\n   o  Section 6 - Digital Signatures and IOTP: This section\
    \ provides an\n      overview of how IOTP uses digital signatures; how to check\
    \ a\n      signature is correctly calculated and how the various Trading\n   \
    \   Roles that participate in trade should check signatures when\n      required.\n\
    \   o  Section 7 - Trading Components: This section defines the XML\n      elements\
    \ required by Trading Components.\n   o  Section 8 - Trading Blocks: This section\
    \ describes how Trading\n      Blocks are constructed from Trading Components.\n\
    \   o  Section 9 - Internet Open Trading Protocol Transactions: This\n      section\
    \ describes all the IOTP Baseline transactions. It refers to\n      Trading Blocks\
    \ and Trading Components and Signatures. This section\n      doesn't directly\
    \ link error handling during the protocol\n      exchanges, the reader is advised\
    \ to understand Error Handling as\n      defined in section before reading this\
    \ section.\n   o  Section 10 - Retrieving Logos: This section describes how IOTP\n\
    \      specific logos can be retrieved.\n   o  Section 11 - Brands: This section\
    \ provides: an overview of Brand\n      Definitions and Brand Selection which\
    \ describe how a Consumer can\n      select a Brand from a list provided by the\
    \ Merchant; as well as\n      some examples of Brand Lists.\n   o  Section 12\
    \ - IANA Considerations: This section describes how new\n      values for codes\
    \ used by IOTP are co-ordinated.\n   o  Section 13 - Internet Open Trading Protocol\
    \ Data Type Definition:\n      This section contains the XML Data Type Definitions\
    \ for IOTP.\n   o  Section 14 - Glossary. This describes all the major terminology\n\
    \      used by IOTP.\n   o  Section 15 - A list of the other documents referenced\
    \ by the IOTP\n      specification.\n   o  Section 16 - The Author's Address\n\
    \   o  Section 17 - Full Copyright Statement\n"
- title: 1.7 Intended Readership
  contents:
  - "1.7 Intended Readership\n   Software and hardware developers; development analysts;\
    \ business and\n   technical planners; industry analysts; merchants; bank and\
    \ other\n   payment handlers; owners, custodians, and users of payment protocols.\n"
- title: 1.7.1 Reading Guidelines
  contents:
  - "1.7.1 Reading Guidelines\n   This IOTP specification is structured primarily\
    \ in a sequence\n   targeted at people who want to understand the principles of\
    \ IOTP.\n   However from practical implementation experience by implementers of\n\
    \   earlier of versions of the protocol new readers who plan to implement\n  \
    \ IOTP may prefer to read the document in a different sequence as\n   described\
    \ below.\n   Review the transport independent parts of the specification. This\n\
    \   covers:\n   o Section 14 - Glossary\n   o Section 1 - Background\n   o Section\
    \ 2 - Introduction\n   o Section 3 - Protocol Structure\n   o Section 4 - IOTP\
    \ Error Handling\n   o Section 5 - Security Considerations\n   o Section 9 - Internet\
    \ Open Trading Protocol Transactions\n   o Section 11 - Brands\n   o Section 12\
    \ - IANA Considerations\n   o Section 10 - Retrieving Logos\n   Review the detailed\
    \ XML definitions:\n   o Section 8 - Trading Blocks\n   o Section 7 - Trading\
    \ Components\n   o Section 6 - Digital Signatures and IOTP\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   The Internet Open Trading Protocols (IOTP) define a number\
    \ of\n   different types of IOTP Transactions:\n   o  Purchase. This supports\
    \ a purchase involving an offer, a payment\n      and optionally a delivery\n\
    \   o  Refund. This supports the refund of a payment as a result of,\n      typically,\
    \ an earlier purchase\n   o  Value Exchange. This involves two payments which\
    \ result in the\n      exchange of value from one combination of currency and\
    \ payment\n      method to another\n   o  Authentication. This supports one organisation\
    \ or individual to\n      check that another organisation or individual are who\
    \ they appear\n      to be.\n   o  Withdrawal. This supports the withdrawal of\
    \ electronic cash from a\n      financial institution\n   o  Deposit. This supports\
    \ the deposit of electronic cash at a\n      financial institution\n   o  Inquiry.\
    \ This supports inquiries on the status of an IOTP\n      transaction which is\
    \ either in progress or is complete\n   o  Ping. This supports a simple query\
    \ which enables one IOTP aware\n      application to determine whether another\
    \ IOTP application running\n      elsewhere is working or not.\n   These IOTP\
    \ Transactions are \"Baseline\" transactions since they have\n   been identified\
    \ as a minimum useful set of transactions. Later\n   versions of IOTP may include\
    \ additional types of transactions.\n   Each of the IOTP Transactions above involve:\n\
    \   o  a number of organisations playing a Trading Role, and\n   o  a set of Trading\
    \ Exchanges. Each Trading Exchange involves the\n      exchange of data, between\
    \ Trading Roles, in the form of a set of\n      Trading Components.\n   Trading\
    \ Roles, Trading Exchanges and Trading Components are described\n   below.\n"
- title: 2.1 Trading Roles
  contents:
  - "2.1 Trading Roles\n   The Trading Roles identify the different parts which organisations\n\
    \   can take in a trade. The five Trading Roles used within IOTP are\n   illustrated\
    \ in the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \              Merchant Customer Care Provider resolves   ----------\n       \
    \  ---------------------------------------------->| Merchant |\n        |    \
    \      Consumer disputes and problems       |Cust.Care.|\n        |          \
    \                                     | Provider |\n        |                \
    \                                ----------\n        |\n                   Payment\
    \ Handler accepts or makes     ----------\n        |    ------------------------------------------>|\
    \ Payment  |\n        |   |             Payment for Merchant          | Handler\
    \  |\n        |   |                                            ----------\n  \
    \      v   v\n    ----------    Consumer makes purchases or obtains    ----------\n\
    \   | Consumer |<--------------------------------------->| Merchant |\n    ----------\
    \             refund from Merchant          ----------\n        ^\n        | \
    \        Delivery Handler supplies goods or     ----------\n        |---------------------------------------------->|Deliverer\
    \ |\n                       services for Merchant            | Handler  |\n  \
    \                                                       ----------\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                    Figure 1 IOTP Trading Roles\n   The roles are:\n   o  Consumer.\
    \ The person or organisation which is to receive and pay\n      for the goods\
    \ or services\n   o  Merchant. The person or organisation from whom the purchase\
    \ is\n      being made and who is legally responsible for providing the goods\n\
    \      or services and receives the benefit of the payment made\n   o  Payment\
    \ Handler. The entity that physically receives the payment\n      from the Consumer\
    \ on behalf of the Merchant\n   o  Delivery Handler. The entity that physically\
    \ delivers the goods or\n      services to the Consumer on behalf of the Merchant.\n\
    \   o  Merchant Customer Care Provider. The entity that is involved with\n   \
    \   customer dispute negotiation and resolution on behalf of the\n      Merchant\n\
    \   Roles may be carried out by the same organisation or different\n   organisations.\
    \ For example:\n   o  in the simplest case one physical organisation (e.g., a\
    \ merchant)\n      could handle the purchase, accept the payment, deliver the\
    \ goods\n      and provide merchant customer care\n   o  at the other extreme,\
    \ a merchant could handle the purchase but\n      instruct the consumer to pay\
    \ a bank or financial institution,\n      request that delivery be made by an\
    \ overnight courier firm and to\n      contact an organisation which provides\
    \ 24x7 service if problems\n      arise.\n   Note that in this specification,\
    \ unless stated to the contrary, when\n   the words Consumer, Merchant, Payment\
    \ Handler, Delivery Handler or\n   Customer Care Provider are used, they refer\
    \ to the Trading Role\n   rather than an actual organisation.\n   An individual\
    \ organisation may take multiple roles. For example a\n   company which is selling\
    \ goods and services on the Internet could\n   take the role of Merchant when\
    \ selling goods or services and the role\n   of Consumer when the company is buying\
    \ goods or services itself.\n   As roles occur in different places there is a\
    \ need for the\n   organisations involved in the trade to exchange data, i.e.\
    \ to carry\n   out Trading Exchanges, so that the trade can be completed.\n"
- title: 2.2 Trading Exchanges
  contents:
  - "2.2 Trading Exchanges\n   The Internet Open Trading Protocols identify four Trading\
    \ Exchanges\n   which involve the exchange of data between the Trading Roles.\
    \ The\n   Trading Exchanges are:\n   o  Offer. The Offer Exchange results in the\
    \ Merchant providing the\n      Consumer with the reason why the trade is taking\
    \ place. It is\n      called an Offer since the Consumer must accept the Offer\
    \ if a\n      trade is to continue\n   o  Payment. The Payment Exchange results\
    \ in a payment of some kind\n      between the Consumer and the Payment Handler.\
    \ This may occur in\n      either direction\n   o  Delivery. The Delivery Exchange\
    \ transmits either the on-line\n      goods, or delivery information about physical\
    \ goods from the\n      Delivery Handler to the Consumer, and\n   o  Authentication.\
    \ The Authentication Exchange can be used by any\n      Trading Role to authenticate\
    \ another Trading Role to check that\n      they are who they appear to be.\n\
    \   IOTP Transactions are composed of various combinations of these\n   Trading\
    \ Exchanges.  For example, an IOTP Purchase transaction\n   includes Offer, Payment,\
    \ and Delivery Trading Exchanges.  As another\n   example, an IOTP Value Exchange\
    \ transaction is composed of an Offer\n   Trading Exchange and two Payment Trading\
    \ Exchanges.\n   Trading Exchanges consist of Trading Components that are transmitted\n\
    \   between the various Trading Roles.  Where possible, the number of\n   round-trip\
    \ delays in an IOTP Transaction is minimised by packing the\n   Components from\
    \ several Trading Exchanges into combination IOTP\n   Messages.  For example,\
    \ the IOTP Purchase transaction combines a\n   Delivery Organisation Component\
    \ with an Offer Response Component in\n   order to avoid an extra Consumer request\
    \ and response.\n   Each of the IOTP Trading Exchanges is described in more detail\
    \ below.\n   For clarity of description, these describe the Trading Exchanges\
    \ as\n   though they were standalone operations.  For performance reasons, the\n\
    \   Trading Exchanges are intermingled in the actual IOTP Transaction\n   definitions.\n"
- title: 2.2.1 Offer Exchange
  contents:
  - "2.2.1 Offer Exchange\n   The goal of the Offer Exchange is for the Merchant to\
    \ provide the\n   Consumer with information about the trade so that the Consumer\
    \ can\n   decide whether to continue with the trade. This is illustrated in the\n\
    \   figure below.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Consumer\n     |  Merchant\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          Consumer decides to trade and sends information about\
    \ the\n             transaction (requests an offer) to the Merchant e.g.,\n  \
    \           using HTML.\n     C --> M Data: Information on what is being purchased\
    \ (Offer Request)\n             - outside scope of IOTP\n 2.          Merchant\
    \ checks the information provided by the Consumer,\n             creates an Offer\
    \ optionally signs it and sends it to the\n             Consumer.\n     C <--\
    \ M OFFER RESPONSE. Components: Status; Organisation(s)\n             (Consumer,\
    \ DelivTo, Merchant, Payment Handler, Customer\n             Care); Order; Payment;\
    \ Delivery; TradingRoleData (optional)\n             Offer Response Signature\
    \ (optional) that signs other\n             components\n 3.          Consumer\
    \ checks the information from the Merchant and\n             decides whether to\
    \ continue.\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                           Figure 2 Offer Exchange\n   An Offer Exchange uses\
    \ the following Trading Components that are\n   passed between the Consumer and\
    \ the Merchant:\n   o  the Status component is used to indicate to other parties\
    \ that a\n      valid Offer Response has been generated\n   o  the Organisation\
    \ Component contains information which describes\n      the Organisations which\
    \ are taking a role in the trade:\n      -  the consumer provides information,\
    \ about who the consumer is\n         and, if goods or services are being delivered,\
    \ where the goods\n         or services are to be delivered to\n      -  the merchant\
    \ augments this information by providing information\n         about the merchant,\
    \ the Payment Handler, the customer care\n         provider and, if goods or services\
    \ are being delivered, the\n         Delivery Handler\n   o  the Order Component\
    \ contains descriptions of the goods or services\n      which will result from\
    \ the trade if the consumer agrees to the\n      offer.  This information is sent\
    \ by the Merchant to the consumer\n      who should verify it\n   o  the Payment\
    \ Component generated by the Merchant, contains details\n      of how much to\
    \ pay, the currency and the payment direction, for\n      example the consumer\
    \ could be asking for a refund. Note that there\n      may be more than one payment\
    \ in a trade\n   o  the Delivery Component, also generated by the Merchant, is\
    \ used if\n      goods or services are being delivered. This contains information\n\
    \      about how delivery will occur, for example by post or using e-mail\n  \
    \ o  the Trading Role Data component contains data the Merchant wants\n      to\
    \ forward to another Trading Role such as a Payment Handler or\n      Delivery\
    \ Handler\n   o  the \"Offer Response\" Signature Component, if present, digitally\n\
    \      signs all of the above components to ensure their integrity.\n   The exact\
    \ content of the information provided by the Merchant to the\n   Consumer will\
    \ vary depending on the type of IOTP Transaction. For\n   example:\n   o  low\
    \ value purchases may not need a signature\n   o  the amount to be paid may vary\
    \ depending on the payment brand and\n      payment protocol used\n   o  some\
    \ offers may not involve the delivery of any goods\n   o  a value exchange will\
    \ involve two payments\n   o  a merchant may not offer customer care.\n   Information\
    \ provided by the consumer to the merchant is provided\n   using a variety of\
    \ methods, for example, it could be provided:\n   o  using [HTML] pages as part\
    \ of the \"shopping experience\" of the\n      consumer.\n   o  Using the Open\
    \ Profiling Standard [OPS] which has recently been\n      proposed,\n   o  in\
    \ the form of Organisation Components associated with an\n      authentication\
    \ of a Consumer by a Merchant\n   o  as Order Components in a later version of\
    \ IOTP.\n"
- title: 2.2.2 Payment Exchange
  contents:
  - "2.2.2 Payment Exchange\n   The goal of the Payment Exchange is for a payment\
    \ to be made from the\n   Consumer to a Payment Handler or vice versa using a\
    \ payment brand and\n   payment protocol selected by the Consumer. A secondary\
    \ goal is to\n   optionally provide the Consumer with a digitally signed Payment\n\
    \   Receipt which can be used to link the payment to the reason for the\n   payment\
    \ as described in the Offer Exchange.\n   Payment Exchanges can work in a variety\
    \ of ways. The most general\n   case where the trade is dependent on the payment\
    \ brand and protocol\n   used is illustrated in the diagram below. Simpler payment\
    \ exchanges\n   are possible.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \  Consumer  Pay Handler\n     |  Merchant |\n"
- title: STEP |     |     |
  contents:
  - "STEP |     |     |\n 1.                 Consumer decides to trade and sends information\n\
    \                    about the transaction (requests an offer) to the\n      \
    \              Merchant e.g., using HTML.\n     C --> M        Information on\
    \ what is being paid for (outside\n                    scope of IOTP\n 2.    \
    \             Merchant decides which payment brand, payment\n                \
    \    protocols and currencies/amounts to offer,\n                    places then\
    \ in a Brand List Component and sends\n                    them to the Consumer\n\
    \     C <-- M        Components: Brand List\n 3.                 Consumer selects\
    \ the payment brand, protocol and\n                    currency/amount to use,\
    \ creates a Brand Selection\n                    component and sends it to the\
    \ Merchant\n     C --> M        Component: Brand List Selection\n 4.         \
    \        Merchant checks Brand Selection, creates a Payment\n                \
    \    Amount information, optionally signs it to\n                    authorise\
    \ payment and sends it to the Consumer\n     C <-- M        Component: Payment;\
    \ Organisation(s) (Merchant and\n                    Payment Handler); Optional\
    \ Offer Response Signature\n                    that signs other components\n\
    \ 5.                 Consumer checks the Payment Amount information and\n    \
    \                if OK requests that the payment starts by sending\n         \
    \           information to the Payment Handler\n     C --------> P  PAYMENT REQUEST.\
    \ Components: Status, Payment;\n                    Organisations (Merchant and\
    \ Payment Handler);\n                    Trading Role Data (optional); Optional\
    \ Offer\n                    Response Signature that signs other components;\n\
    \                    Pay Scheme Data\n 6.                 Payment Handler checks\
    \ information including\n                    optional signature and if OK starts\
    \ exchanging Pay\n                    Scheme Data components for selected payment\
    \ brand\n                    and payment protocol\n     C <-------> P  PAYMENT\
    \ EXCHANGE. Component: Pay Scheme Data\n 7.                 Eventually payment\
    \ protocol messages finish so\n                    Payment Handler sends Pay Receipt\
    \ and optional\n                    signature to the Consumer as proof of payment\n\
    \     C <-------> P  PAYMENT RESPONSE. Components: Status, Pay Receipt;\n    \
    \                Payment Note; Trading Role Data (optional);\n               \
    \     Optional Offer Response Signature; Optional\n                    Payment\
    \ Receipt Signature that binds the payment\n                    to the Offer\n\
    \ 8.                 Consumer checks Payment Receipt is OK\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                          Figure 3 Payment Exchange\n   A Payment Exchange uses\
    \ the following Trading Components that are\n   passed between the Consumer, the\
    \ Merchant and the Payment Handler:\n   o  The Brand List Component contains a\
    \ list of payment brands (for\n      example, MasterCard, Visa, Mondex, GeldKarte),\
    \ payment protocols\n      (for example SET Version 1.0, Secure Channel Credit\
    \ Debit (SCCD -\n      the name used for a credit or debit card payment where\n\
    \      unauthorised access to account information is prevented through\n     \
    \ use of secure channel transport mechanisms such as SSL/TLS) as\n      well as\
    \ currencies/amounts that apply. The Merchant sends the\n      Brand List to the\
    \ Consumer. The consumer compares the payment\n      brands, protocols and currencies/amounts\
    \ on offer with those that\n      the Consumer supports and makes a selection.\n\
    \   o  The Brand Selection Component contains the Consumer's selection.\n    \
    \  Payment brand, protocol, currency/amount and possibly protocol-\n      specific\
    \ information is sent back to the Merchant. This\n      information may be used\
    \ to change information in the Offer\n      Exchange. For example, a merchant\
    \ could choose to offer a discount\n      to encourage the use of a store card.\n\
    \   o  the Status component is used to indicate to the Payment Handler\n     \
    \ that an earlier exchange (e.g., an Offer Exchange) has\n      successfully completed\
    \ and by the Payment Handler to indicate the\n      completion status of the Payment\
    \ Exchange.\n   o  The Organisation Components are generated by the Merchant.\
    \ They\n      contain details of the Merchant and Payment Handler Roles:\n   \
    \   -  the Merchant role is required so that the Payment Handler can\n       \
    \  identify which Merchant initiated the payment. Typically, the\n         result\
    \ of the Payment Handler accepting (or making) a payment\n         on behalf of\
    \ the Merchant will be a credit or debit transaction\n         to the Merchant's\
    \ account held by the Payment Handler. These\n         transactions are outside\
    \ the scope of this version of IOTP\n      -  the Payment Handler role is required\
    \ so that the Payment\n         Handler can check that it is the correct Payment\
    \ Handler to be\n         used for the payment\n   o  The Payment Component contains\
    \ details of how much to pay, the\n      currency and the payment direction\n\
    \   o  The \"Offer Response\" Signature Component, if present, digitally\n   \
    \   signs all of the above components to ensure their integrity. Note\n      that\
    \ the Brand List and Brand Selection Components are not signed\n      until the\
    \ payment information is created (step 4 in the diagram)\n   o  the Trading Role\
    \ Data component contains from other roles (e.g., a\n      Merchant) that needs\
    \ to be  forwarded to the Payment Handler\n   o  The Payment Scheme Component\
    \ contains messages from the payment\n      protocol used in the Trade. For example\
    \ they could be SET\n      messages, Mondex messages, GeldKarte Messages or one\
    \ of the other\n      payment methods supported by IOTP. The content of the Payment\n\
    \      Scheme Component is defined in the supplements that describe how\n    \
    \  IOTP works with various payment protocols.\n   o  The Payment Receipt Component\
    \ contains a record of the payment.\n      The content depends upon the payment\
    \ protocol used.\n   o  The \"Payment Receipt\" Signature Component provides proof\
    \ of\n      payment by digitally signing both the Payment Receipt Component\n\
    \      and the Offer Response Signature. The signature on the offer\n      digitally\
    \ signs the Order, Organisation and Delivery Components\n      contained in the\
    \ Offer.  This signature effectively binds the\n      payment to the offer.\n\
    \   The example of a Payment Exchange above is the most general case.\n   Simpler\
    \ cases are also possible. For example, if the amount paid is\n   not dependent\
    \ on the payment brand and protocol selected then the\n   payment information\
    \ generated by step 3 can be sent to the Consumer\n   at the same time as the\
    \ Brand List Component generated by step 1.\n   These and other variations are\
    \ described in the Baseline Purchase\n   IOTP Transaction (see section 9.1.8).\n"
- title: 2.2.3 Delivery Exchange
  contents:
  - "2.2.3 Delivery Exchange\n   The goal of the Delivery Exchange is to cause purchased\
    \ goods to be\n   delivered to the consumer either online or via physical delivery.\
    \ A\n   second goal is to provide a \"delivery note\" to the consumer,\n   providing\
    \ details about the delivery, such as shipping tracking\n   number. The result\
    \ of the delivery may also be signed so that it can\n   be used for customer care\
    \ in the case of problems with physical\n   delivery. The message flow is illustrated\
    \ in the diagram below.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \  CONSUMER  DELIVERY\n     |        HANDLER\n     |  Merchant |\n"
- title: STEP |     |     |
  contents:
  - "STEP |     |     |\n 1.                 Consumer decides to trade and sends information\n\
    \                    about what to deliver and who is to take delivery,\n    \
    \                to the Merchant e.g., using HTML.\n     C --> M        Information\
    \ on what is being delivered (outside\n                    scope of IOTP)\n 2.\
    \                 Merchant checks the information provided by the\n          \
    \          Consumer, adds information about how the delivery\n               \
    \     will occur, information about the Organisations\n                    involved\
    \ in the delivery and optionally sings it\n                    and sends it to\
    \ the Consumer\n     C <-- M        Components: Delivery; Organisations (Delivery\n\
    \                    Handler, Deliver To); Order, Optional Offer\n           \
    \         Response Signature\n 3.                 Consumer checks delivery information\
    \ is OK,\n                    obtains authorisation for the delivery, for\n  \
    \                  example by making a payment, and sends the\n              \
    \      delivery information to the Delivery Handler\n     C --------> D  DELIVERY\
    \ REQUEST. Components: Status; Delivery,\n                    Organisations: (Merchant,\
    \ Delivery Handler,\n                    DelivTo); Order, Trading Role Data (optional);\n\
    \                    Optional Offer Response Signature, Optional\n           \
    \         Payment Receipt Signature (from Payment Exchange)\n 4.             \
    \    Delivery Handler checks information and\n                    authorisation.\
    \ Starts or schedules delivery and\n                    creates and then sends\
    \ a delivery not tot the\n                    Consumer which can optionally be\
    \ signed.\n     C <-------- D  DELIVERY RESPONSE. Components: Status; Delivery\n\
    \                    Note, Trading Role Data (optional); Optional\n          \
    \          Delivery Response Signature\n 5.                 Consumer checks delivery\
    \ note is OK and accepts or\n                    waits for delivery as described\
    \ in the the Delivery\n                    Note.\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                         Figure 4 Delivery Exchange\n"
- title: A Delivery Exchange uses the following Trading Components that are
  contents:
  - 'A Delivery Exchange uses the following Trading Components that are

    '
- title: 'passed between the Consumer, the Merchant and the Delivery Handler:'
  contents:
  - "passed between the Consumer, the Merchant and the Delivery Handler:\n   o  the\
    \ Status component is used to indicate to the Delivery Handler\n      that an\
    \ earlier exchange (e.g., an Offer Exchange or Payment\n      Exchange) has successfully\
    \ completed and by the Delivery Handler\n      to indicate the completion status\
    \ of the Delivery Exchange.\n   o  The Organisation Component(s) contain details\
    \ of the Deliver To,\n      Delivery Handler and Merchant Roles:\n      -  the\
    \ Deliver To role indicates where the goods or services are\n         to be delivered\
    \ to\n      -  the Delivery Handler role is required so that the Delivery\n  \
    \       Handler can check that she is the correct Delivery Handler to\n      \
    \   do the delivery\n      -  the Merchant role is required so that the Delivery\
    \ Handler can\n         identify which Merchant initiated the delivery\n   o \
    \ The Order Component, contains information about the goods or\n      services\
    \ to be delivered\n   o  The Delivery Component contains information about how\
    \ delivery\n      will occur, for example by post or using e-mail.\n   o  The\
    \ \"Offer Response\" Signature Component, if present, digitally\n      signs all\
    \ of the above components to ensure their integrity.\n   o  The \"Payment Receipt\"\
    \ Signature Component provides proof of\n      payment by digitally signing the\
    \ Payment Receipt Component and the\n      Offer Signature. This is used by the\
    \ Delivery Handler to check\n      that delivery is authorised\n   o  The Delivery\
    \ Note Component contains customer care information\n      related to a physical\
    \ delivery, or alternatively the actual\n      \"electronic goods\".  The Consumer's\
    \ software does not interpret\n      information about a physical delivery but\
    \ should have the ability\n      to display the information, both at the time\
    \ of the delivery and\n      later if the Consumer selects the Trade to which\
    \ this delivery\n      relates from a transaction list\n   o  The \"Delivery Response\"\
    \ Signature Component, if present, provides\n      proof of the results of the\
    \ Delivery by digitally signing the\n      Delivery Note and any Offer Response\
    \ or Payment Response\n      signatures that the Delivery Handler received.\n"
- title: 2.2.4 Authentication Exchange
  contents:
  - "2.2.4 Authentication Exchange\n   The goal of the Authentication Exchange is\
    \ to allow one Organisation,\n   for example a financial institution, to be able\
    \ to check that another\n   Organisation, for example a consumer, is who they\
    \ appear to be.\n   An Authentication Exchange involves:\n   o  an Authenticator\
    \ - the Organisation which is requesting the\n      authentication, and\n   o\
    \  an Authenticatee - the Organisation being authenticated.\n   This is illustrated\
    \ in the diagram below.\n +*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \ Organisation 1\n (Authenticatee)\n     |   Organisation 2\n     |  (Authenticator)\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          First Organisation, e.g., a Consumer, takes an action\
    \ (for\n             example by pressing a button on an HTML page) which\n   \
    \          requires that the Organisation is authenticated\n     1 --> 2 Need\
    \ for Authentication (outside scope of IOTP)\n 2.          The second Organisation\
    \ generates an Authentication\n             Request - including challenge data,\
    \ and a list of the\n             algorithms that may be used for the authentication\
    \ -\n             and/or a request for the Organisation information then\n   \
    \          sends it to the first Organisation\n     1 <-- 2 AUTHENTICATION REQUEST.\
    \ Components: Authentication\n             Request, Trading Role Information Request\n\
    \ 3.          The first Organisation optionally checks any signature\n       \
    \      associated with the Authentication Request then uses the\n            \
    \ specified authentication algorithm to generate an\n             Authentication\
    \ Response which is sent back to the second\n             Organisation together\
    \ with details of any Organisation\n             information requested\n     1\
    \ --> 2 AUTHENTICATION RESPONSE. Component: Authentication\n             Response,\
    \ Organisation(s)\n 4.          The Authentication Response is checked against\
    \ the\n             challenge data to check that the first Organisation is\n \
    \            who they appear to be and the result recorded in a Status\n     \
    \        Component which is then sent back to the first\n             Organisation.\n\
    \     1 <-- 2 AUTHENTICATION STATUS. Component: Status\n 5.          The first\
    \ Organisation then optionally checks the results\n             indicated by the\
    \ Status and any associated signature and\n             takes the appropriate\
    \ action or stops.\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                      Figure 5 Authentication Exchange\n   An Authentication\
    \ Exchange uses the following Trading Components that\n   are passed between the\
    \ two Organisations:\n   o  the Authentication Request Component that requests\
    \ an\n      Authentication and indicates the authentication algorithm and\n  \
    \    optional challenge data to be used.\n   o  A Trading Role Information Request\
    \ Component that requests\n      information about an Organisation, for example\
    \ a ship to address.\n   o  The Authentication Response Component which contains\
    \ the challenge\n      response generated by the recipient of the Authentication\
    \ Request\n      Component.\n   o  Organisation Components that contain the result\
    \ of the Trading\n      Role Information Request\n   o  the Status Component which\
    \ contains the results of the second\n      party's verification of the Authentication\
    \ Response.\n"
- title: 2.3 Scope of Baseline IOTP
  contents:
  - "2.3 Scope of Baseline IOTP\n   This specification describes the IOTP Transactions\
    \ which make up\n   Baseline IOTP. As described in the preface, IOTP will evolve\
    \ over\n   time. This section defines the initial conformance criteria for\n \
    \  implementations that claim to \"support IOTP.\"\n   The main determinant on\
    \ the scope of an IOTP implementation is the\n   roles which the solution is designed\
    \ to support. The roles within\n   IOTP are described in more detail in section\
    \ 2.1 Trading Roles. To\n   summarise the roles are: Merchant, Consumer, Payment\
    \ Handler,\n   Delivery Handler and Customer Care Provider.\n   Payment Handlers\
    \ who can be of three types:\n   o  those who accept a payment as part of a purchase\
    \ or make a payment\n      as part of a refund,\n   o  those who accept value\
    \ as part of a deposit transaction, or\n   o  those that issue value a withdrawal\
    \ transaction\n   The following table defines, for each role, the IOTP Transactions\
    \ and\n   Trading Blocks which must be supported for that role.\n            \
    \           Merchants\n                        ECash    ECash\n              \
    \  Store   Value    Value    Consumer  Payment   Delivery\n                  \
    \      Issuer Acquirer             Handler   Handler\n TRANSACTIONS\n"
- title: Purchase        Must                        Must
  contents:
  - "Purchase        Must                        Must\n                       Merchants\n\
    \                        ECash    ECash\n                Store   Value    Value\
    \    Consumer  Payment   Delivery\n                        Issuer Acquirer   \
    \          Handler   Handler\n"
- title: Refund          Must                         b)
  contents:
  - "Refund          Must                         b)\n                           \
    \               Depends\n"
- title: Authentication   May     Must     May        b)
  contents:
  - "Authentication   May     Must     May        b)\n                           \
    \               Depends\n"
- title: Value Exchange   May                        Must
  contents:
  - 'Value Exchange   May                        Must

    '
- title: Withdrawal               Must                b)
  contents:
  - "Withdrawal               Must                b)\n                           \
    \               Depends\n"
- title: Deposit                          Must        b)
  contents:
  - "Deposit                          Must        b)\n                           \
    \               Depends\n"
- title: Inquiry         Must     Must    Must       May       Must      Must
  contents:
  - 'Inquiry         Must     Must    Must       May       Must      Must

    '
- title: Ping            Must     Must    Must       May       Must      Must
  contents:
  - 'Ping            Must     Must    Must       May       Must      Must

    '
- title: TRADING BLOCKS
  contents:
  - 'TRADING BLOCKS

    '
- title: TPO             Must     Must    Must       Must
  contents:
  - 'TPO             Must     Must    Must       Must

    '
- title: TPO Selection   Must     Must    Must       Must
  contents:
  - 'TPO Selection   Must     Must    Must       Must

    '
- title: Auth-Request     a)               a)         a)
  contents:
  - "Auth-Request     a)               a)         a)\n               Depends     \
    \     Depends   Depends\n"
- title: Auth-Reply       a)               a)         a)
  contents:
  - "Auth-Reply       a)               a)         a)\n               Depends     \
    \     Depends   Depends\n"
- title: Offer Response  Must     Must    Must       Must
  contents:
  - 'Offer Response  Must     Must    Must       Must

    '
- title: Payment                                     Must      Must
  contents:
  - 'Payment                                     Must      Must

    '
- title: Request
  contents:
  - 'Request

    '
- title: Payment                                     Must      Must
  contents:
  - 'Payment                                     Must      Must

    '
- title: Exchange
  contents:
  - 'Exchange

    '
- title: Payment                                     Must      Must
  contents:
  - 'Payment                                     Must      Must

    '
- title: Response
  contents:
  - 'Response

    '
- title: Delivery                                    Must                Must
  contents:
  - 'Delivery                                    Must                Must

    '
- title: Request
  contents:
  - 'Request

    '
- title: Delivery                                    Must                Must
  contents:
  - 'Delivery                                    Must                Must

    '
- title: Response
  contents:
  - "Response\n                       Merchants\n                        ECash   \
    \ ECash\n                Store   Value    Value    Consumer  Payment   Delivery\n\
    \                        Issuer Acquirer             Handler   Handler\n"
- title: Inquiry         Must     Must    Must       Must      Must      Must
  contents:
  - 'Inquiry         Must     Must    Must       Must      Must      Must

    '
- title: Request
  contents:
  - 'Request

    '
- title: Inquiry         Must     Must    Must       Must      Must      Must
  contents:
  - 'Inquiry         Must     Must    Must       Must      Must      Must

    '
- title: Response
  contents:
  - 'Response

    '
- title: Ping Request    Must     Must    Must       Must      Must      Must
  contents:
  - 'Ping Request    Must     Must    Must       Must      Must      Must

    '
- title: Ping Response   Must     Must    Must       Must      Must      Must
  contents:
  - 'Ping Response   Must     Must    Must       Must      Must      Must

    '
- title: Signature       Must     Must    Must     Limited     Must      Must
  contents:
  - 'Signature       Must     Must    Must     Limited     Must      Must

    '
- title: Error           Must     Must    Must       Must      Must      Must
  contents:
  - "Error           Must     Must    Must       Must      Must      Must\n   In the\
    \ above table:\n   o  \"Must\" means that a Trading Role must support the Transaction\
    \ or\n      Trading Block.\n   o  \"May\" means that an implementation may support\
    \ the Transaction or\n      Trading Block at the option of the developer.\n  \
    \ o  \"Depends\" means implementation of the Transaction or Trading Block\n  \
    \    depends on one of the following conditions:\n      -  if Baseline Authentication\
    \ IOTP Transaction is supported;\n      -  if required by a Payment Method as\
    \ defined in its IOTP\n         Supplement document.\n   o  \"Limited\" means\
    \ the Trading Block must be understood and its\n      content manipulated but\
    \ not in every respect. Specifically, on the\n      Signature Block, Consumers\
    \ do not have to be able to validate\n      digital signatures.\n   An IOTP solution\
    \ must support all the IOTP Transactions and Trading\n   Blocks required by at\
    \ least one role (column) as described in the\n   above table for that solution\
    \ to be described as \"supporting IOTP\".\n"
- title: 3. Protocol Structure
  contents:
  - "3. Protocol Structure\n   The previous section provided an introduction which\
    \ explained:\n   o  Trading Roles which are the different roles which Organisations\n\
    \      can take in a trade: Consumer, Merchant, Payment Handler, Delivery\n  \
    \    Handler and Customer Care Provider, and\n   o  Trading Exchanges where each\
    \ Trading Exchange involves the\n      exchange of data, between Trading Roles,\
    \ in the form of a set of\n      Trading Components.\n   This section describes:\n\
    \   o  how Trading Components are constructed into Trading Blocks and the\n  \
    \    IOTP Messages which are physically sent in the form of [XML]\n      documents\
    \ between the different Trading Roles,\n   o  how IOTP Messages are exchanged\
    \ between Trading Roles to create an\n      IOTP Transaction\n   o  the XML definitions\
    \ of an IOTP Message including a Transaction\n      Reference Block - an XML element\
    \ which identifies an IOTP\n      Transaction and the IOTP Message within it\n\
    \   o  the definitions of the XML ID Attributes which are used to\n      identify\
    \ IOTP Messages, Trading Blocks and Trading Components and\n      how these are\
    \ referred to using Element References from other XML\n      elements\n   o  how\
    \ extra XML Elements and new user defined values for existing\n      IOTP codes\
    \ can be used when Extending IOTP,\n   o  how IOTP uses the Packaged Content Element\
    \ to embed data such as\n      payment protocol messages or detailed order definitions\
    \ within an\n      IOTP Message\n   o  how IOTP Identifies Languages so that different\
    \ languages can be\n      used within IOTP Messages\n   o  how IOTP handles both\
    \ Secure and Insecure Net Locations when\n      sending messages\n   o  how an\
    \ IOTP Transaction can be cancelled.\n"
- title: 3.1 Overview
  contents:
  - '3.1 Overview

    '
- title: 3.1.1 IOTP Message Structure
  contents:
  - "3.1.1 IOTP Message Structure\n   The structure of an IOTP Message and its relationship\
    \ with Trading\n   Blocks and Trading Components is illustrated in the diagram\
    \ below.\n"
- title: '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*'
  contents:
  - '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*

    '
- title: IOTP MESSAGE  <---------- IOTP Message - an XML Document which is
  contents:
  - "IOTP MESSAGE  <---------- IOTP Message - an XML Document which is\n |       \
    \                 transported between the Trading Roles\n |-Trans Ref Block <-----\
    \ Trans Ref Block - contains information which\n |  |                     describes\
    \ the IOTP Transaction and the IOTP\n |  |                     Message.\n |  |-Trans\
    \ Id Comp. <--- Transaction Id Component - uniquely\n |  |                   \
    \  identifies the IOTP Transaction. The Trans Id\n |  |                     Components\
    \ are the same across all IOTP\n |  |                     messages that comprise\
    \ a single IOTP\n |  |                     transaction.\n |  |-Msg Id Comp. <-----\
    \ Message Id Component - identifies and\n |                        describes an\
    \ IOTP Message within an IOTP\n |                        Transaction\n |-Signature\
    \ Block <----- Signature Block (optional) - contains one or\n |  |           \
    \          more Signature Components and their\n |  |                     associated\
    \ Certificates\n |  |-Signature Comp. <-- Signature Component - contains digital\n\
    \ |  |                     signatures. Signatures may sign digests of\n |  | \
    \                    the Trans Ref Block and any Trading Component\n |  |    \
    \                 in any IOTP Message in the same IOTP\n |  |                \
    \     transaction.\n |  |-Certificate Comp. < Certificate Component (Optional)\
    \ Used to check\n |                        the signature.\n |-Trading Block <-------\
    \ Trading Block - an XML Element within an IOTP\n |  |-Trading Comp.       Message\
    \ that contains a predefined set of\n |  |-Trading Comp.      Trading Components\n\
    \ |  |-Trading Comp.\n |  |-Trading Comp. <--- Trading Components - XML Elements\
    \ within a\n |                        Trading Block that contain a predefined\
    \ set\n |-Trading Block          of XML elements and attributes containing\n |\
    \  |-Trading Comp.       information required to support a Trading\n |  |-Trading\
    \ Comp.       Exchange\n |  |-Trading Comp.\n |  |-Trading Comp.\n |  |-Trading\
    \ Comp.\n"
- title: '*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'
  contents:
  - "*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n      \
    \                Figure 6 IOTP Message Structure\n   The diagram also introduces\
    \ the concept of a Transaction Reference\n   Block.  This block contains, amongst\
    \ other things, a globally unique\n   identifier for the IOTP Transaction. Also\
    \ each block and component is\n   given an ID Attribute (see section 3.4) which\
    \ is unique within an\n   IOTP Transaction.  Therefore the combination of the\
    \ ID attribute and\n   the globally unique identifier in the Transaction Reference\
    \ Block is\n   sufficient to uniquely identify any Trading Block or Trading\n\
    \   Component.\n"
- title: 3.1.2 IOTP Transactions
  contents:
  - "3.1.2 IOTP Transactions\n   A predefined set of IOTP Messages exchanged between\
    \ the Trading Roles\n   constitute an IOTP Transaction. This is illustrated in\
    \ the diagram\n   below.\n"
- title: '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*'
  contents:
  - "*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n     CONSUMER\
    \                                              MERCHANT\n                    \
    \                                   Generate first\n                         \
    \                               IOTP Message\n                               \
    \    ---                        |\n                                  |   |   \
    \                    v\n Process incoming                 | I |              \
    \   -------------\n  IOTP Message &   <------------- |   | ------------ | IOTP\
    \ Message |\n"
- title: generate next IOTP                |   |                 -------------
  contents:
  - "generate next IOTP                |   |                 -------------\n     Message\
    \                      | N |\n        |                         |   |\n      \
    \  v                         |   |\n  -------------                   | T |  \
    \            Process incoming\n | IOTP Message |  -------------- |   | ----------->\
    \  IOTP Message &\n  -------------                   |   |                 generate\
    \ next\n                                  | E |                  IOTP Message\n\
    \                                  |   |                       |\n           \
    \                       |   |                       v\n Process incoming     \
    \            | R |                 -------------\n   IOTP Message    <-------------\
    \ |   | ------------ | IOTP Message |\n"
- title: generate last IOTP                |   |                 -------------
  contents:
  - "generate last IOTP                |   |                 -------------\n  Message\
    \ & stop                  | N |\n        |                         |   |\n   \
    \     v                         |   |\n  -------------                   | E |\
    \                  Process last\n | IOTP Message |  -------------- |   | ------------->\
    \  incoming IOTP\n  -------------                   |   |                Message\
    \ & stop\n        |                         | T |                       |\n  \
    \      v                         |   |                       v\n       STOP  \
    \                      ---                       STOP\n"
- title: '*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-'
  contents:
  - "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\n      \
    \                 Figure 7 An IOTP Transaction\n   In the above diagram the Internet\
    \ is shown as the transport\n   mechanism.  This is not necessarily the case.\
    \ IOTP Messages can be\n   transported using a variety of transport mechanisms.\n\
    \   The IOTP Transactions (see section 9) in this version of IOTP are\n   specifically:\n\
    \   o  Purchase. This supports a purchase involving an offer, a payment\n    \
    \  and optionally a delivery\n   o  Refund. This supports the refund of a payment\
    \ as a result of,\n      typically, an earlier purchase\n   o  Value Exchange.\
    \ This involves two payments which result in the\n      exchange of value from\
    \ one combination of currency and payment\n      method to another\n   o  Authentication.\
    \ This supports the remote authentication of one\n      Trading Role by another\
    \ Trading Role using a variety of\n      authentication algorithms, and the provision\
    \ of an Organisation\n      Information about the Trading Role that is being authenticated\
    \ for\n      use in, for example, the creation of an offer\n   o  Withdrawal.\
    \ This supports the withdrawal of electronic cash from a\n      financial institution\n\
    \   o  Deposit. This supports the deposit of electronic cash at a\n      financial\
    \ institution\n   o  Inquiry This supports inquiries on the status of an IOTP\n\
    \      transaction which is either in progress or is complete\n   o  Ping This\
    \ supports a simple query which enables one IOTP aware\n      application to determine\
    \ whether another IOTP application running\n      elsewhere is working or not.\n"
- title: 3.2 IOTP Message
  contents:
  - "3.2 IOTP Message\n   As described earlier, IOTP Messages are [XML] documents\
    \ which are\n   physically sent between the different Trading Roles that are taking\n\
    \   part in a trade.\n   The XML definition of an IOTP Message is as follows.\n\
    \   <!ELEMENT IotpMessage\n      ( TransRefBlk,\n        SigBlk?,\n        ErrorBlk?,\n\
    \        ( AuthReqBlk |\n          AuthRespBlk |\n          AuthStatusBlk |\n\
    \          CancelBlk |\n          DeliveryReqBlk |\n          DeliveryRespBlk\
    \ |\n          InquiryReqBlk |\n          InquiryRespBlk |\n          OfferRespBlk\
    \ |\n          PayExchBlk |\n          PayReqBlk |\n          PayRespBlk |\n \
    \         PingReqBlk |\n          PingRespBlk |\n          TpoBlk |\n        \
    \  TpoSelectionBlk\n        )*\n      ) >\n   <!ATTLIST IotpMessage\n     xmlns\
    \                     CDATA\n     'iotp:ietf.org/iotp-v1.0'\n   Content:\n   TransRefBlk\
    \        This contains information which describes an IOTP\n                 \
    \     Message within an IOTP Transaction (see section\n                      3.3\
    \ immediately below)\n   AuthReqBlk,        These are the Trading Blocks.\n  \
    \ AuthRespBlk,\n   DeliveryReqBlk,    The Trading Blocks present within an IOTP\
    \ Message,\n   DeliveryRespBlk    and the content of a Trading Block itself is\n\
    \   ErrorBlk           dependent on the type of IOTP Transaction being\n   InquiryReqBlk,\
    \     carried out - see the definition of each\n   InquiryRespBlk,    transaction\
    \ in section 9 Internet Open Trading\n   OfferRespBlk,      Protocol Transactions.\n\
    \   PayExchBlk,\n   PayReqBlk,         Full definitions of each Trading Block\
    \ are\n   PayRespBlk,        described in section 8.\n   PingReqBlk,\n   PingRespBlk,\n\
    \   SigBlk,\n   TpoBlk,\n   TpoSelectionBlk\n   Attributes:\n   xmlns        \
    \      The [XML Namespace] definition for IOTP messages.\n"
- title: 3.2.1 XML Document Prolog
  contents:
  - "3.2.1 XML Document Prolog\n   The IOTP Message is the root element of the XML\
    \ document. It\n   therefore needs to be preceded by an appropriate XML Document\
    \ Prolog.\n   For example:\n   <?XML Version='1.0'?>\n   <!DOCTYPE IotpMessage\
    \ >\n   <IotpMessage>\n    ...\n   </IotpMessage>\n"
- title: 3.3 Transaction Reference Block
  contents:
  - "3.3 Transaction Reference Block\n   A Transaction Reference Block contains information\
    \ which identifies\n   the IOTP Transaction and IOTP Message. The Transaction\
    \ Reference\n   Block contains:\n   o  a Transaction Id Component which globally\
    \ uniquely identifies the\n      IOTP Transaction. The Transaction Id Components\
    \ are the same\n      across all IOTP messages that comprise a single IOTP transaction,\n\
    \   o  a Message Id Component which provides control information about\n     \
    \ the IOTP Message as well as uniquely identifying the IOTP Message\n      within\
    \ an IOTP Transaction, and\n   o  zero or more Related To Components which link\
    \ this IOTP\n      Transaction to either other IOTP Transactions or other events\n\
    \      using the identifiers of those events.\n   The definition of a Transaction\
    \ Reference Block is as follows:\n   <!ELEMENT TransRefBlk (TransId, MsgId, RelatedTo*)\
    \ >\n   <!ATTLIST TransRefBlk\n    ID                 ID      #REQUIRED >\n  \
    \ Attributes:\n   ID                 An identifier which uniquely identifies the\n\
    \                      Transaction Reference Block within the IOTP\n         \
    \             Transaction (see section 3.4 ID Attributes).\n   Content:\n   TransId\
    \            See 3.3.1 Transaction Id Component immediately\n                \
    \      below.\n   MsgId              See 3.3.2 Message Id Component immediately\
    \ below.\n   RelatedTo          See 3.3.3 Related To Component immediately below.\n"
- title: 3.3.1 Transaction Id Component
  contents:
  - "3.3.1 Transaction Id Component\n   This contains information which globally uniquely\
    \ identifies the IOTP\n   Transaction. Its definition is as follows:\n   <!ELEMENT\
    \ TransId EMPTY >\n   <!ATTLIST TransId\n    ID                 ID      #REQUIRED\n\
    \    Version            NMTOKEN #FIXED '1.0'\n    IotpTransId        CDATA   #REQUIRED\n\
    \    IotpTransType      CDATA   #REQUIRED\n    TransTimeStamp     CDATA   #REQUIRED\
    \ >\n   Attributes:\n   ID                 An identifier which uniquely identifies\
    \ the\n                      Transaction Id Component within the IOTP\n      \
    \                Transaction.\n   Version            This identifies the version\
    \ of IOTP, and therefore\n                      the structure of the IOTP Messages,\
    \ which the IOTP\n                      Transaction is using.\n   IotpTransId\
    \        Contains data which uniquely identifies the IOTP\n                  \
    \    Transaction. It must conform to the rules for\n                      Message\
    \ Ids in [RFC 822].\n   IotpTransTyp       This is the type of IOTP Transaction\
    \ being carried\n                      out. For Baseline IOTP it identifies a\
    \ \"standard\"\n                      IOTP Transaction and implies the sequence\
    \ and\n                      content of the IOTP Messages exchanged between the\n\
    \                      Trading Roles. The valid values for Baseline IOTP\n   \
    \                   are:\n                       o BaselineAuthentication\n  \
    \                     o BaselineDeposit\n                       o BaselinePurchase\n\
    \                       o BaselineRefund\n                       o BaselineWithdrawal\n\
    \                       o BaselineValueExchange\n                       o BaselineInquiry\n\
    \                       o BaselinePing\n                      Values of IotpTransType\
    \ are managed under the\n                      procedure described in section\
    \ 12 IANA\n                      Considerations which also allows user defined\n\
    \                      values of IotpTransType to be defined.\n              \
    \        In later versions of IOTP, this list will be\n                      extended\
    \ to support different types of standard\n                      IOTP Transaction.\
    \ It is also likely to support the\n                      type Dynamic which indicates\
    \ that the sequence of\n                      steps within the transaction are\
    \ non-standard.\n   TransTimeStamp     Where the system initiating the IOTP Transaction\n\
    \                      has an internal clock, it is set to the time at\n     \
    \                 which the IOTP Transaction started in [UTC]\n              \
    \        format.\n                      The main purpose of this attribute is\
    \ to provide\n                      an alternative way of identifying a transaction\
    \ by\n                      specifying the time at which it started.\n       \
    \               Some systems, for example, hand held devices may\n           \
    \           not be able to generate a  time stamp. In this\n                 \
    \     case this attribute should contain the value \"NA\"\n                  \
    \    for Not Available.\n"
- title: 3.3.2 Message Id Component
  contents:
  - "3.3.2 Message Id Component\n   The Message Id Component provides control information\
    \ about the IOTP\n   Message as well as uniquely identifying the IOTP Message\
    \ within an\n   IOTP Transaction. Its definition is as follows.\n   <!ELEMENT\
    \ MsgId EMPTY >\n   <!ATTLIST MsgId\n    ID                 ID      #REQUIRED\n\
    \    RespIotpMsg        NMTOKEN #IMPLIED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    LangPrefList       NMTOKENS #IMPLIED\n    CharSetPrefList    NMTOKENS #IMPLIED\n\
    \    SenderTradingRoleRef NMTOKEN #IMPLIED\n    SoftwareId         CDATA   #REQUIRED\n\
    \    TimeStamp          CDATA   #IMPLIED >\n   Attributes:\n   ID            \
    \         An identifier which uniquely identifies the\n                      \
    \    IOTP Message within the IOTP Transaction (see\n                         \
    \ section 3.4 ID Attributes). Note that if an\n                          IOTP\
    \ Message is resent then the value of this\n                          attribute\
    \ remains the same.\n   RespIotpMsg            This contains the ID attribute\
    \ of the Message\n                          Id Component of the IOTP Message to\
    \ which this\n                          IOTP Message is a response. In this way\
    \ all\n                          the IOTP Messages in an IOTP Transaction are\n\
    \                          unambiguously linked together. This field is\n    \
    \                      required on every IOTP Message except the\n           \
    \               first IOTP Message in an IOTP Transaction.\n   SenderTradingRoleRef\
    \   The Element Reference (see section 3.5) of the\n                         \
    \ Trading Role which has generated the IOTP\n                          message.\
    \ It is used to identify the Net\n                          Locations (see section\
    \ 3.9) of the Trading\n                          Role to which problems Technical\
    \ Errors (see\n                          section 4.1) with any of Trading Blocks\
    \ should\n                          be reported.\n   Xml:lang               Defines\
    \ the language used by attributes or\n                          child elements\
    \ within this component, unless\n                          overridden by an xml:lang\
    \ attribute on a child\n                          element. See section 3.8 Identifying\n\
    \                          Languages.\n   LangPrefList           Optional list\
    \ of Language codes that conform\n                          to [XML] Language\
    \ Identification. It is used\n                          by the sender to indicate,\
    \ in preference\n                          sequence, the languages that the receiver\
    \ of\n                          the message ideally should use when generating\n\
    \                          a response. There is no obligation on the\n       \
    \                   receiver to respond using one of the indicated\n         \
    \                 languages, but using one of the languages is\n             \
    \             likely to provide an improved user experience.\n   CharSetPrefList\
    \        Optional list of Character Set identifiers\n                        \
    \  that conform to [XML] Characters. It is used\n                          by\
    \ the sender to indicate, in preference\n                          sequence, the\
    \ character sets that the receiver\n                          of the message ideally\
    \ should use when\n                          generating a response. There is no\
    \ obligation\n                          on the receiver to respond using one of\
    \ the\n                          character sets indicated, but using one of the\n\
    \                          character sets is likely to provide an\n          \
    \                improved user experience.\n   SoftwareId             This contains\
    \ information which identifies the\n                          software which generated\
    \ the IOTP Message. Its\n                          purpose is to help resolve\
    \ interoperability\n                          problems that might occur as a result\
    \ of\n                          incompatibilities between messages produced by\n\
    \                          different software. It is a single text string\n  \
    \                        in the language defined by xml:lang. It must\n      \
    \                    contain, as a minimum:\n                          o the name\
    \ of the software manufacturer\n                          o the name of the software\n\
    \                          o the version of the software, and\n              \
    \            o the build of the software\n   TimeStamp              Where the\
    \ device sending the message has an\n                          internal clock,\
    \ it is set to the time at which\n                          the IOTP Message was\
    \ created in [UTC] format.\n"
- title: 3.3.3 Related To Component
  contents:
  - "3.3.3 Related To Component\n   The Related To Component links IOTP Transactions\
    \ to either other IOTP\n   Transactions or other events using the identifiers\
    \ of those events.\n   Its definition is as follows.\n   <!ELEMENT RelatedTo (PackagedContent)\
    \ >\n   <!ATTLIST RelatedTo\n    ID                 ID      #REQUIRED\n    xml:lang\
    \           NMTOKEN #REQUIRED\n    RelationshipType   NMTOKEN #REQUIRED\n    Relation\
    \           CDATA   #REQUIRED\n    RelnKeyWords       NMTOKENS #IMPLIED >\n  \
    \ Attributes:\n   ID                 An identifier which uniquely identifies the\n\
    \                      Related To Component within the IOTP Transaction.\n   xml:lang\
    \           Defines the language used by attributes or child\n               \
    \       elements within this component, unless overridden\n                  \
    \    by an xml:lang attribute on a child element. See\n                      section\
    \ 3.8 Identifying Languages.\n   RelationshipType   Defines the type of the relationship.\
    \ Valid values\n                      are:\n                       o IotpTransaction.\
    \ in which case the Packaged\n                         Content Element contains\
    \ an IotpTransId of\n                         another IOTP Transaction\n     \
    \                  o Reference in which case the Packaged Content\n          \
    \               Element contains the reference of some other,\n              \
    \           non-IOTP document.\n                      Values of RelationshipType\
    \ are controlled under\n                      the procedures defined in section\
    \ 12 IANA\n                      Considerations which also allows user defined\n\
    \                      values to be defined.\n   Relation           The Relation\
    \ attribute contains a phrase in the\n                      language defined by\
    \ xml:lang which describes the\n                      nature of the relationship\
    \ between the IOTP\n                      transaction that contains this component\
    \ and\n                      another IOTP Transaction or other event. The exact\n\
    \                      words to be used are left to the implementers of\n    \
    \                  the IOTP software.\n                      The purpose of the\
    \ attribute is to provide the\n                      Trading Roles involved in\
    \ an IOTP Transaction with\n                      an explanation of the nature\
    \ of the relationship\n                      between the transactions.\n     \
    \                 Care should be taken that the words used to in the\n       \
    \               Relation attribute indicate the \"direction\" of the\n       \
    \               relationship correctly. For example: one\n                   \
    \   transaction might be a refund for another earlier\n                      transaction.\
    \ In this case the transaction which is\n                      a refund should\
    \ contain in the Relation attribute\n                      words such as \"refund\
    \ for\" rather than \"refund to\"\n                      or just \"refund\".\n\
    \   RelnKeyWords       This attribute contains keywords which could be\n     \
    \                 used to help identify similar relationships, for\n         \
    \             example all refunds. It is anticipated that\n                  \
    \    recommended keywords will be developed through\n                      examination\
    \ of actual usage. In this version of\n                      the specification\
    \ there are no specific\n                      recommendations and the keywords\
    \ used are at the\n                      discretion of implementers.\n   Content:\n\
    \   PackagedContent    The Packaged Content (see section 3.7) contains\n     \
    \                 data which identifies the related transaction. Its\n       \
    \               format varies depending on the value of the\n                \
    \      RelationshipType.\n"
- title: 3.4 ID Attributes
  contents:
  - "3.4 ID Attributes\n   IOTP Messages, Blocks (i.e. Transaction Reference Blocks\
    \ and Trading\n   Blocks), Trading Components (including the Transaction Id Component\n\
    \   and the Signature Component) and some of their child elements are\n   each\
    \ given an XML \"ID\" attribute which is used to identify an\n   instance of these\
    \ XML elements. These identifiers are used so that\n   one element can be referenced\
    \ by another. All these attributes are\n   given the attribute name ID.\n   The\
    \ values of each ID attribute are unique within an IOTP transaction\n   i.e. the\
    \ set of IOTP Messages which have the same globally unique\n   Transaction ID\
    \ Component. Also, once the ID attribute of an element\n   has been assigned a\
    \ value it is never changed. This means that\n   whenever an element is copied,\
    \ the value of the ID attribute remains\n   the same.\n   As a result it is possible\
    \ to use these IDs to refer to and locate\n   the content of any IOTP Message,\
    \ Block or Component from any other\n   IOTP Message, Block or Component in the\
    \ same IOTP Transaction using\n   Element References (see section 3.5).\n   This\
    \ section defines the rules for setting the values for the ID\n   attributes of\
    \ IOTP Messages, Blocks and Components.\n"
- title: 3.4.1 IOTP Message ID Attribute Definition
  contents:
  - "3.4.1 IOTP Message ID Attribute Definition\n   The ID attribute of the Message\
    \ Id Component of an IOTP Message must\n   be unique within an IOTP Transaction.\
    \ It's definition is as follows:\n   IotpMsgId_value  ::= IotpMsgIdPrefix IotpMsgIdSuffix\n\
    \   IotpMsgIdPrefix  ::= NameChar (NameChar)*\n   IotpMsgIdSuffix  ::= Digit (Digit)*\n\
    \   IotpMsgIdPrefix    Apart from messages which contain: an Inquiry\n       \
    \               Request Trading Block, an Inquiry Response Trading\n         \
    \             Block, a Ping Request Trading Block or a Ping\n                \
    \      Response Trading Block; then the same prefix is\n                     \
    \ used for all messages sent by the Merchant or\n                      Consumer\
    \ role as follows:\n                       o \"M\" - Merchant\n              \
    \         o \"C\" - Consumer\n                      For messages which contain\
    \ an Inquiry Request\n                      Trading Block or a Ping Request Trading\
    \ Block, the\n                      prefix is set to \"I\" for Inquiry.\n    \
    \                  For messages which contain an Inquiry Response\n          \
    \            Trading Block or a Ping Response Trading Block,\n               \
    \       the prefix is set to \"Q\".\n                      The prefix for the\
    \ other roles in a trade is\n                      contained within the Organisation\
    \ Component for\n                      the role and are typically set by the Merchant.\n\
    \                      The following is recommended as a guideline and\n     \
    \                 must not be relied upon:\n                       o \"P\" - First\
    \ (only) Payment Handler\n                       o \"R\" - Second Payment Handler\n\
    \                       o \"D\" - Delivery Handler\n                       o \"\
    C\" - Deliver To\n                      As a guideline, prefixes should be limited\
    \ to one\n                      character.\n                      NameChar has\
    \ the same definition as the [XML]\n                      definition of NameChar.\n\
    \   IotpMsgIdSuffix    The suffix consists of one or more digits. The\n      \
    \                suffix must be unique within a Trading Role within\n        \
    \              an IOTP Transaction. The following is recommended\n           \
    \           as a guideline and must not be relied upon:\n                    \
    \   o the first IOTP Message sent by a trading role\n                        \
    \ is given the suffix \"1\"\n                       o the second and subsequent\
    \ IOTP Messages sent\n                         by the same trading role are incremented\
    \ by one\n                         for each message\n                       o\
    \ no leading zeroes are included in the suffix\n                      Put more\
    \ simply the Message Id Component of the\n                      first IOTP Message\
    \ sent by a Consumer would have\n                      an ID attribute of, \"\
    C1\", the second \"C2\", the\n                      third \"C3\" etc.\n      \
    \                Digit has the same definition as the [XML]\n                \
    \      definition of Digit.\n"
- title: 3.4.2 Block and Component ID Attribute Definitions
  contents:
  - "3.4.2 Block and Component ID Attribute Definitions\n   The ID Attribute of Blocks\
    \ and Components must also be unique within\n   an IOTP Transaction. Their definition\
    \ is as follows:\n   BlkOrCompId_value ::= IotpMsgId_value \".\" IdSuffix\n  \
    \ IdSuffix ::= Digit (Digit)*\n   IotpMsgId_value    The ID attribute of the Message\
    \ ID Component of\n                      the IOTP Message where the Block or Component\
    \ is\n                      first used.\n                      In IOTP, Trading\
    \ Components and Trading Blocks are\n                      copied from one IOTP\
    \ Message to another. The ID\n                      attribute does not change\
    \ when an existing Trading\n                      Block or Component is copied\
    \ to another IOTP\n                      Message.\n   IdSuffix           The suffix\
    \ consists of one or more digits. The\n                      suffix must be unique\
    \ within the ID attribute of\n                      the Message ID Component used\
    \ to generate the ID\n                      attribute. The following is recommended\
    \ as a\n                      guideline and must not be relied upon:\n       \
    \                o the first Block or Component sent by a trading\n          \
    \               role is given the suffix \"1\"\n                       o the ID\
    \ attributes of the second and subsequent\n                         Blocks or\
    \ Components are incremented by one for\n                         each new Block\
    \ or Component added to an IOTP\n                         Message\n          \
    \             o no leading zeroes are included in the suffix\n               \
    \       Put more simply, the first new Block or Component\n                  \
    \    added to the second IOTP Message sent, for\n                      example,\
    \ by a consumer would have a an ID\n                      attribute of \"C2.1\"\
    , the second \"C2.2\", the third\n                      \"C2.3\" etc.\n      \
    \                Digit has the same definition as the [XML]\n                \
    \      definition of Digit.\n"
- title: 3.4.3 Example of use of ID Attributes
  contents:
  - "3.4.3 Example of use of ID Attributes\n   The diagram below illustrates how ID\
    \ attribute values are used.\n"
- title: '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*'
  contents:
  - "*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n     \
    \ 1st  IOTP MESSAGE                          2nd IOTP MESSAGE\n    (e.g., from\
    \ Merchant to                    (e.g., from Consumer to\n           Consumer\
    \                              Payment Handler)\n"
- title: IOTP MESSAGE                               IOTP MESSAGE *
  contents:
  - "IOTP MESSAGE                               IOTP MESSAGE *\n |-Trans Ref Block.\
    \ ID=M1.1                 |-Trans Ref Block.ID=C1.1*\n |  |-Trans Id Comp. ID\
    \ = M1.2 ------------>|  |-Trans Id Comp.\n |  |                         Copy\
    \ Element  |  |  ID=M1.2\n |  |-Msg Id Comp. ID = M1                  |  |-Msg\
    \ Id Comp. ID=C1 *\n |                                          |\n |-Signature\
    \ Block. ID=M1.8                 |-Signature Block.ID=C1.5*\n |  |-Sig Comp. ID=M1.15\
    \ ------------------>|  |-Comp. ID=M1.15\n |                            Copy Element\
    \  |\n |-Trading Block. ID=M1.3                   |-Trading Block.ID=C1.2 *\n\
    \ |  |-Comp. ID=M1.4 -------------------------->|-Comp. ID=M1.4\n |  |       \
    \                  Copy Element     |\n |  |-Comp. ID=M1.5 -------------------------->|-Comp.\
    \ ID=M1.5\n |  |                         Copy Element     |\n |  |-Comp. ID=M1.6\
    \                            |-Comp. ID=C1.3 *\n |  |-Comp. ID=M1.7          \
    \                  |-Comp. ID=C1.4 *\n |\n |-Trading Block. ID=M1.9\n    |-Comp.\
    \ ID=M1.10                             * = new elements\n    |-Comp. ID=M1.11\n\
    \    |-Comp. ID=M1.12\n    |-Comp. ID=M1.13\n"
- title: '*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-'
  contents:
  - "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\n      \
    \             Figure 8 Example use of ID attributes\n"
- title: 3.5 Element References
  contents:
  - "3.5 Element References\n   A Trading Component or one of its child XML elements,\
    \ may contain an\n   XML attribute that refers to another Block (i.e. a Transaction\n\
    \   Reference Block or a Trading Block) or Trading Component (including a\n  \
    \ Transaction Id and Signature Component). These Element References are\n   used\
    \ for many purposes, a few examples include:\n   o  identifying an XML element\
    \ whose Digest is included in a Signature\n      Component,\n   o  referring to\
    \ the Payment Handler Organisation Component which is\n      used when making\
    \ a Payment\n   An Element Reference always contains the value of an ID attribute\
    \ of\n   a Block or Component.\n   Identifying the IOTP Message, Trading Block\
    \ or Trading Component\n   which is referred to by an Element Reference, involves\
    \ finding the\n   XML element which:\n   o  belongs to the same IOTP Transaction\
    \ (i.e. the Transaction Id\n      Components of the IOTP Messages match), and\n\
    \   o  where the value of the ID attribute of the element matches the\n      value\
    \ of the Element Reference.\n   Note: The term \"match\" in this specification\
    \ has the same definition\n   as the [XML] definition of match.\n   An example\
    \ of \"matching\" an Element Reference is illustrated in the\n   example below.\n\
    \   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n  \
    \       1st  IOTP MESSAGE                          2nd IOTP MESSAGE\n       (e.g.,\
    \ from Merchant to                    (e.g., from Consumer to\n              Consumer\
    \                              Payment Handler)\n   IOTP MESSAGE             \
    \                  IOTP MESSAGE\n    |-Trans Ref Block. ID=M1.1     Trans ID \
    \   |-Trans RefBlock. ID=C1.1\n    |  |-Trans Id Comp. ID = M1.2 <-Components-|->|-TransId\
    \ Comp.ID=M1.2\n    |  |                            must be    |  |\n    |  |-Msg\
    \ Id Comp. ID = M1      Identical   |  |-Msg Id Comp. ID=C1\n    |           \
    \                       ^       |\n    |-Signature Block. ID=M1.8         |  \
    \     |-Signature Block.ID=C1.5\n    |  |-Sig Comp. ID=M1.15            |    \
    \   |  |-Comp. ID=M1.15\n    |                                 AND      |\n  \
    \  |-Trading Block. ID=M1.3           |       |-Trading Block. ID=C1.2\n    |\
    \  |-Comp. ID=M1.4                 |          |-Comp. ID=M1.4\n    |  |      \
    \                         v          |\n    |  |-Comp. ID=M1.5 <-------- -ID Attribute\
    \    |-Comp. ID=M1.5\n    |  |                          and El Ref      |\n  \
    \  |  |-Comp. ID=M1.6            values must     |-Comp. ID=C1.3\n    |  |   \
    \                          match--------|--> El Ref=M1.5\n    |  |-Comp. ID=M1.7\
    \                            |-Comp. ID=C1.4\n    |\n    |-Trading Block. ID=M1.9\n\
    \       |-Comp. ID=M1.10\n       |-Comp. ID=M1.11\n       |-Comp. ID=M1.12\n \
    \      |-Comp. ID=M1.13\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\n\
    \                           Figure 9 Element References\n   Note: Element Reference\
    \ attributes are defined as \"NMTOKEN\" rather\n   than \"IDREF\" (see [XML]).\
    \ This is because an IDREF requires that the\n   XML element referred to is in\
    \ the same XML Document.  With IOTP this\n   is not necessarily the case.\n"
- title: 3.6 Extending IOTP
  contents:
  - "3.6 Extending IOTP\n   Baseline IOTP defines a minimum protocol which systems\
    \ supporting\n   IOTP must be able to accept. As new versions of IOTP are developed,\n\
    \   additional types of IOTP Transactions will be defined. In addition to\n  \
    \ this, Baseline and future versions of IOTP will support user\n   extensions\
    \ to IOTP through two mechanisms:\n   o  extra XML elements, and\n   o  new values\
    \ for existing IOTP codes.\n"
- title: 3.6.1 Extra XML Elements
  contents:
  - "3.6.1 Extra XML Elements\n   The XML element and attribute names used within\
    \ IOTP constitute an\n   [XML Namespace] as identified by the xmlns attribute\
    \ on the\n   IotpMessage element. This allows IOTP to support the inclusion of\n\
    \   additional XML elements within IOTP messages through the use of [XML\n   Namespaces].\n\
    \   Using XML Namespaces, extra XML elements may be included at any level\n  \
    \ within an IOTP message including:\n   o  new Trading Blocks\n   o  new Trading\
    \ Components\n   o  new XML elements within a Trading Component.\n   The following\
    \ rules apply:\n   o  any new XML element must be declared according to the rules\
    \ for\n      [XML Namespaces]\n   o  new XML elements which are either Trading\
    \ Blocks or Trading\n      Components must contain an ID attributes with an attribute\
    \ name of\n      ID.\n   In order to make sure that extra XML elements can be\
    \ processed\n   properly, IOTP reserves the use of a special attribute,\n   IOTP:Critical,\
    \ which takes the values True or False and may appear in\n   extra elements added\
    \ to an IOTP message.\n   The purpose of this attribute is to allow an IOTP aware\
    \ application\n   to determine if the IOTP transaction can safely continue.\n\
    \   Specifically:\n   o  if an extra XML element has an \"IOTP:Critical\" attribute\
    \ with a\n      value of \"True\" and an IOTP aware application does not know\
    \ how to\n      process the element and its child elements, then the IOTP\n  \
    \    transaction has a Technical Error (see section 4.1) and must fail.\n   o\
    \  if an extra XML element has an \"IOTP:Critical\" attribute with a\n      value\
    \ of \"False\" then the IOTP transaction may continue if the\n      IOTP aware\
    \ application does not know how to process it. In this\n      case:\n      - \
    \ any extra XML elements contained within an XML element defined\n         within\
    \ the IOTP namespace, must be included with that element\n         whenever the\
    \ IOTP XML element is used or copied by IOTP\n      -  the content of the extra\
    \ element must be ignored except that it\n         must be included when it is\
    \ used in the creation of a digest as\n         part of the generation of a signature\n\
    \   o  if an extra XML element has no \"IOTP:Critical\" attribute then it\n  \
    \    must be treated as if it had an \"IOTP:Critical\" attribute with a\n    \
    \  value of \"True\"\n   o  if an XML element contains an \"IOTP:Critical\" attribute,\
    \ then the\n      value of that attribute is assumed to apply to all the child\n\
    \      elements within that element\n   In order to ensure that documents containing\
    \ \"IOTP:Critical\" are\n   valid, it is declared as part of the DTD for the extra\
    \ element as:\n   IOTP:Critical     (True | False ) 'True'\n"
- title: 3.6.2 Opaque Embedded Data
  contents:
  - "3.6.2 Opaque Embedded Data\n   If IOTP is to be extended using Opaque Embedded\
    \ Data then a Packaged\n   Content Element (see section 3.7) should be used to\
    \ encapsulate the\n   data.\n"
- title: 3.7 Packaged Content Element
  contents:
  - "3.7 Packaged Content Element\n   The Packaged Content element supports the concept\
    \ of an embedded data\n   stream, transformed to both protect it against misinterpretation\
    \ by\n   transporting systems and to ensure XML compatibility. Examples of its\n\
    \   use in IOTP include:\n   o  to encapsulate payment scheme messages, such as\
    \ SET messages,\n   o  to encapsulate a description of an order, a payment note,\
    \ or a\n      delivery note.\n   In general it is used to encapsulate one or more\
    \ data streams.\n   This data stream has three standardised attributes that allow\
    \ for\n   identification, decoding and interpretation of the contents. Its\n \
    \  definition is as follows.\n   <!ELEMENT PackagedContent (#PCDATA) >\n   <!ATTLIST\
    \ PackagedContent\n    Name             CDATA     #IMPLIED\n    Content      \
    \    NMTOKEN   \"PCDATA\"\n    Transform (NONE|BASE64)    \"NONE\" >\n   Attributes:\n\
    \   Name               Optional. Distinguishes between multiple\n            \
    \          occurrences of Packaged Content Elements at the\n                 \
    \     same point in IOTP. For example:\n                        <ABCD>\n     \
    \                     <PackagedContent Name='FirstPiece'>\n                  \
    \          snroasdfnas934k\n                          </PackagedContent>\n   \
    \                       <PackagedContent Name='SecondPiece'>\n               \
    \             dvdsjnl5poidsdsflkjnw45\n                          </PackagedContent>\n\
    \                        </ABCD>\n                      The name attribute may\
    \ be omitted, for example if\n                      there is only one Packaged\
    \ Content element.\n   Content            This identifies what type of data is\
    \ contained\n                      within the Content of the Packaged Content\n\
    \                      Element. The valid values for the Content\n           \
    \           attribute are as follows:\n                       o PCDATA. The content\
    \ of the Packaged Content\n                         Element can be treated as\
    \ PCDATA with no\n                         further processing.\n             \
    \          o MIME. The content of the Packaged Content\n                     \
    \    Element is a complete MIME item. Processing\n                         should\
    \ include looking for MIME headers inside\n                         the Packaged\
    \ Content Element.\n                       o MIME:mimetype. The content of the\
    \ Packaged\n                         Content Element is MIME content, with the\n\
    \                         following header \"Content-Type: mimetype\".\n     \
    \                    Although it is possible to have MIME:mimetype\n         \
    \                with the Transform attribute set to NONE, it is\n           \
    \              far more likely to have Transform attribute set\n             \
    \            to BASE64. Note that if Transform is NONE is\n                  \
    \       used, then the entire content must still\n                         conform\
    \ to PCDATA. Some characters will need to\n                         be encoded\
    \ either as the XML default entities,\n                         or as numeric\
    \ character entities.\n                       o XML. The content of the Packaged\
    \ Content\n                         Element can be treated as an XML document.\n\
    \                         Entities and CDATA sections, or Transform set\n    \
    \                     to BASE64, must be used to ensure that the\n           \
    \              Packaged Content Element contents are\n                       \
    \  legitimate PCDATA.\n                      Values of the Content attribute are\
    \ controlled\n                      under the procedures defined in section 12\
    \ IANA\n                      Considerations which also allows user defined\n\
    \                      values to be defined.\n   Transform          This identifies\
    \ the transformation that has been\n                      done to the data before\
    \ it was placed in the\n                      content. Valid values are:\n   \
    \                    o NONE. The PCDATA content of the Packaged\n            \
    \             Content Element is the correct representation\n                \
    \         of the data. Note that entity expansion must\n                     \
    \    occur first (i.e. replacement of &amp; and\n                         &#9;)\
    \ before the data is examined. CDATA\n                         sections may legitimately\
    \ occur in a Packaged\n                         Content Element where the Transform\
    \ attribute\n                         is set to NONE.\n                      \
    \ o BASE64. The PCDATA content of the Packaged\n                         Content\
    \ Element represents a BASE64 encoding of\n                         the actual\
    \ content.\n   Content:\n   PCDATA             This is the actual data which has\
    \ been embedded.\n                      The format of the data and rules on how\
    \ to decode\n                      it are contained in the Content and the Transform\n\
    \                      attributes\n   Note that any special details, especially\
    \ custom attributes, must be\n   represented at a higher level.\n"
- title: 3.7.1 Packaging HTML
  contents:
  - "3.7.1 Packaging HTML\n   The packaged content may contain HTML. In this case\
    \ the following\n   conventions are followed:\n   o  references to any documents,\
    \ images or other things, such as\n      sounds or web pages, which can affect\
    \ the recipient's\n      understanding of the data which is being packaged must\
    \ refer to\n      other Packaged Elements contained within the same parent element,\n\
    \      e.g., an Order Description\n   o  if more than one Packaged Content element\
    \ is included within a\n      parent element in order to meet the previous requirement,\
    \ then the\n      Name attribute of the top level Packaged Content from which\n\
    \      references to all other Packaged Elements can be determined,\n      should\
    \ have a value of Main\n   o  relative references to other documents, images,\
    \ etc. from one\n      Packaged Content element to another are realised by setting\
    \ the\n      value of the relative reference to the Name attribute of another\n\
    \      Packaged Content element at the same level and within the same\n      parent\
    \ element\n   o  no external references that require the reference to be resolved\n\
    \      immediately should be used. As this could make the HTML difficult\n   \
    \   or impossible to display completely\n   o  [MIME] is used to encapsulate the\
    \ data inside each Packaged\n      Element.  This means that the information in\
    \ the MIME header used\n      to identify the type of data which has been encapsulated\
    \ and\n      therefore how it should be displayed.\n   If the above conventions\
    \ are not followed by, for example, including\n   external references which must\
    \ be resolved, then the recipient of the\n   HTML should be informed.\n   Note:\
    \ As an implementation guideline the values of the Name\n   Attributes allocated\
    \ to Packaged Content elements should make it\n   possible to extract each Packaged\
    \ Content into a directory and then\n   display the HTML directly\n"
- title: 3.7.2 Packaging XML
  contents:
  - "3.7.2 Packaging XML\n   Support for XML is recommended. When XML needs to be\
    \ displayed, for\n   example to display the content of an Order Description to\
    \ a Consumer,\n   then implementers should follow the latest recommendations of\
    \ the\n   World Wide Web Consortium.\n   Note: At the time of writing this specification,\
    \ standards are under\n   development that specify XML style sheets that show\
    \ how XML documents\n   should be displayed. See:\n   o \"Extensible Stylesheet\
    \ Language (XSL) Specification\" at\n     http://www.w3.org/TR/WD-xsl, and\n \
    \  o \"Associating stylesheets with XML documents\" at\n     http://www.w3.org/TR/xml-stylesheet.\n\
    \   Once these standards become W3C \"Recommendations\", then it is\n   anticipated\
    \ that this specification will be amended if practical.\n"
- title: 3.8 Identifying Languages
  contents:
  - "3.8 Identifying Languages\n   IOTP uses [XML] Language Identification to specify\
    \ which languages\n   are used within the content and attributes of IOTP Messages.\n\
    \   The following principles have been used in order to determine which\n   XML\
    \ elements contain an xml:lang Attributes:\n   o  a mandatory xml:lang attribute\
    \ is contained on every Trading\n      Component which contains attributes or\
    \ content which may need to\n      be displayed or printed in a particular language\n\
    \   o  an optional xml:lang attribute is included on child elements of\n     \
    \ these Trading Components. In this case the value of xml:lang, if\n      present,\
    \ overrides the value for the Trading Component.\n   xml:lang attributes which\
    \ follow these principles are included in the\n   Trading Components and their\
    \ child XML elements defined in section 7.\n   A sender of a message, typically\
    \ a Consumer can indicate a preference\n   for a language, and a character set\
    \ by specifying a list of preferred\n   languages/character sets in a Message\
    \ Id Component (see section\n   3.3.2).  Note that there is no obligation on the\
    \ receiver of such a\n   message to respond using one of the listed languages/character\
    \ sets\n   as they may not have the technology to be able to do it. It also\n\
    \   means that the ability to handle these lists is not a requirement for\n  \
    \ conformance to this specification. However the ability to respond,\n   for example\
    \ using one of the stated languages/character sets is\n   likely to provide a\
    \ better user experience.\n"
- title: 3.9 Secure and Insecure Net Locations
  contents:
  - "3.9 Secure and Insecure Net Locations\n   IOTP contains several \"Net Locations\"\
    \ which identify places where,\n   typically, IOTP Messages may be sent. Net Locations\
    \ come in two\n   types:\n   o  \"Secure\" Net Locations which are net locations\
    \ where privacy of\n      data is secured using, for example, encryption methods\
    \ such as\n      [SSL/TLS], and\n   o  \"Insecure\" Net Locations where privacy\
    \ of data is not assured.\n   Note that either a Secure Net Location or an Insecure\
    \ Net Location or\n   both must be present.\n   If only one of the two Net Locations\
    \ is present, then the one present\n   must be used.\n   Where both types of net\
    \ location are present then either may be used\n   depending on the preference\
    \ of the sender of the message.\n"
- title: 3.10 Cancelled Transactions
  contents:
  - "3.10 Cancelled Transactions\n   Any Trading Role involved in an IOTP transaction\
    \ may cancel that\n   transaction at any time.\n"
- title: 3.10.1 Cancelling Transactions
  contents:
  - "3.10.1 Cancelling Transactions\n   IOTP Transactions are cancelled by sending\
    \ an IOTP message containing\n   just a Cancel Block with an appropriate Status\
    \ Component to the other\n   Trading Role involved in the Trading Exchange.\n\
    \   Note: The Cancel Block can be sent asynchronously of any other IOTP\n   Message.\
    \ Specifically it can be sent either before sending or after\n   receiving an\
    \ IOTP Message from the other Trading Role\n   If an IOTP Transaction is cancelled\
    \ during a Trading Exchange (i.e.\n   the interval between sending a \"request\"\
    \ block and receiving the\n   matching \"response\" block) then the Cancel Block\
    \ is sent to the same\n   location as the next IOTP Message in the Trading Exchange\
    \ would have\n   been sent.\n   If a Consumer cancels a transaction after a Trading\
    \ Exchange has\n   completed (i.e. the \"response\" block for the Trading Exchange\
    \ has\n   been received), but before the IOTP Transaction has finished then the\n\
    \   Consumer sends a Cancel Block with an appropriate Status Component to\n  \
    \ the net location identified by the SenderNetLocn or\n   SecureSenderNetLocn\
    \ contained in the Protocol Options Component (see\n   section 7.1) contained\
    \ in the TPO Block (see section 8.1) for the\n   transaction. This is normally\
    \ the Merchant Trading Role.\n   A Consumer should not send a Cancel Block after\
    \ the IOTP Transaction\n   has completed. Cancelling a complete transaction should\
    \ be treated as\n   a technical error.\n   After cancelling the IOTP Transaction,\
    \ the Consumer should go to the\n   net location specified by the CancelNetLocn\
    \ attribute contained in\n   the Trading Role Element for the Organisation that\
    \ was sent the\n   Cancel Block.\n   A non-Consumer Trading Role should only cancel\
    \ a transaction:\n   o after a request block has been received and\n   o before\
    \ the response block has been sent\n   If a non-Consumer Trading Role cancels\
    \ a transaction at any other\n   time it should be treated by the recipient as\
    \ an error.\n"
- title: 3.10.2 Handling Cancelled Transactions
  contents:
  - "3.10.2 Handling Cancelled Transactions\n   If a Cancel Block is received by a\
    \ Consumer at a point in the IOTP\n   Transaction when cancellation is allowed,\
    \ then the Consumer should\n   stop the transaction.\n   If a Cancel Block is\
    \ received by a non-Consumer role, then the\n   Trading Role should anticipate\
    \ that the Consumer may go to the\n   location specified by the CancelNetLocn\
    \ attribute contained in the\n   Trading Role Element for the Trading Role.\n"
- title: 4. IOTP Error Handling
  contents:
  - "4. IOTP Error Handling\n   IOTP is designed as a request/response protocol where\
    \ each message is\n   composed of a number of Trading Blocks which contain a number\
    \ of\n   Trading Components. There are several interrelated considerations in\n\
    \   handling errors, re-transmissions, duplicates, and the like. These\n   factors\
    \ mean IOTP aware applications must manage message flows more\n   complex than\
    \ the simple request/response model. Also a wide variety\n   of errors can occur\
    \ in messages as well as at the transport level or\n   in Trading Blocks or Components.\n\
    \   This section describes at a high level how IOTP handles errors,\n   retries\
    \ and idempotency. It covers:\n   o  the different types of errors which can occur.\
    \ This is divided\n      into:\n      -  \"technical errors\" which are independent\
    \ of the purpose of the\n         IOTP Message,\n      -  \"business errors\"\
    \ which indicate that there is a problem\n         specific to the process (e.g.,\
    \ payment or delivery) which is\n         being carried out, and\n   o  the depth\
    \ of the error which indicates whether the error is at the\n      transport, message\
    \ or block/component level\n   o  how the different trading roles should handle\
    \ the different types\n      of messages which they may receive.\n"
- title: 4.1 Technical Errors
  contents:
  - "4.1 Technical Errors\n   Technical Errors are those which are independent of\
    \ the meaning of\n   the message. This means, they can affect any attempt at IOTP\n\
    \   communication.  Typically they are handled in a standard fashion with\n  \
    \ a limited number of standard options for the user. Specifically these\n   are:\n\
    \   o retrying the transmission, or\n   o cancelling the transaction.\n   When\
    \ communications are operating sufficiently well, a technical\n   error is indicated\
    \ by an Error Component (see section 7.21) in an\n   Error Block (see section\
    \ 8.17) sent by the party which detected the\n   error in an IOTP message to the\
    \ party which sent the erroneous\n   message.\n   If communications are too poor,\
    \ a message which was sent may not\n   reach its destination. In this case a time-out\
    \ might occur.\n   The Error Codes associated with Technical Errors are recorded\
    \ in the\n   Error Component which lists all the different technical errors which\n\
    \   can be set.\n"
- title: 4.2 Business Errors
  contents:
  - "4.2 Business Errors\n   Business Errors may occur when the IOTP messages are\
    \ \"technically\"\n   correct. They are connected with a particular process, for\
    \ example,\n   an offer, payment, delivery or authentication, where each process\
    \ has\n   a different set of possible business errors.\n   For example, \"Insufficient\
    \ funds\" is a reasonable payment error but\n   makes no sense for a delivery\
    \ while \"Back ordered\" is a reasonable\n   delivery error but not meaningful\
    \ for a payment. Business errors are\n   indicated in the Status Component (see\
    \ section 7.16) of a \"response\n   block\" of the appropriate type, for example\
    \ a Payment Response Block\n   or a Delivery Response Block. This allows whatever\
    \ additional\n   response related information is needed to accompany the error\n\
    \   indication.\n   Business errors must usually be presented to the user so that\
    \ they\n   can decide what to do next. For example, if the error is insufficient\n\
    \   funds in a Brand Independent Offer (see section 9.1.2.2), the user\n   might\
    \ wish to choose a different payment instrument/account of the\n   same brand\
    \ or a different brand or payment system. Alternatively, if\n   the IOTP based\
    \ implementation allows it and it makes sense for that\n   instrument, the user\
    \ might want to put more funds into the\n   instrument/account and try again.\n"
- title: 4.3 Error Depth
  contents:
  - "4.3 Error Depth\n   The three levels at which IOTP errors can occur are the transport\n\
    \   level, the message level, and the block level. Each is described\n   below.\n"
- title: 4.3.1 Transport Level
  contents:
  - "4.3.1 Transport Level\n   This level of error indicates a fundamental problem\
    \ in the transport\n   mechanism over which the IOTP communication is taking place.\n\
    \   All transport level errors are technical errors and are indicated by\n   either\
    \ an explicit transport level error indication, such as a \"No\n   route to destination\"\
    \ error from TCP/IP, or by a time out where no\n   response has been received\
    \ to a request.\n   The only reasonable automatic action when faced with transport\
    \ level\n   errors is to retry and, after some number of automatic retries, to\n\
    \   inform the user.\n   The explicit error indications that can be received are\
    \ transport\n   dependent and the documentation for the appropriate IOTP Transport\n\
    \   supplement should be consulted for errors and appropriate actions.\n   Appropriate\
    \ time outs to use are a function of both the transport\n   being used and of\
    \ the payment system if the request encapsulates\n   payment information. The\
    \ transport and payment system specific\n   documentation should be consulted\
    \ for time out and automatic retry\n   parameters.  Frequently there is no way\
    \ to directly inform the other\n   party of transport level errors but they should\
    \ generally be logged\n   and if automatic recovery is unsuccessful and there\
    \ is a human user,\n   the user should be informed.\n"
- title: 4.3.2 Message Level
  contents:
  - "4.3.2 Message Level\n   This level of error indicates a fundamental technical\
    \ problem with an\n   entire IOTP message. For example, the XML is not \"Well\
    \ Formed\", or\n   the message is too large for the receiver to handle or there\
    \ are\n   errors in the Transaction Reference Block (see section 3.3) so it is\n\
    \   not possible to figure out what transaction the message relates to.\n   All\
    \ message level errors are technical errors and are indicated by\n   Error Components\
    \ (see section 7.21) sent to the other party. The\n   Error Component includes\
    \ a Severity attribute which indicates whether\n   the error is a Warning and\
    \ may be ignored, a TransientError which\n   indicates that a retry may resolve\
    \ the problem or a HardError in\n   which case the transaction must fail.\n  \
    \ The Technical Errors (see section 7.21.2 Error Codes) that are\n   Message Level\
    \ errors are:\n   o  XML not well formed. The document is not well formed XML\
    \ (see\n      [XML])\n   o  XML not valid. The document is not valid XML (see\
    \ [XML])\n   o  block level technical errors (see section 4.3.3) on the\n    \
    \  Transaction Reference Block (see section 3.3) and the Signature\n      Block\
    \ only. Checks on these blocks should only be carried out if\n      the XML is\
    \ valid\n   Note that checks on the Signature Block include checking, where\n\
    \   possible, that each Signature Component is correctly calculated. If\n   the\
    \ Signature is incorrectly calculated then the data that should\n   have been\
    \ covered by the signature can not be trusted and must be\n   treated as erroneous.\
    \ A description of how to check a signature is\n   correctly calculated is contained\
    \ in section 6.2.\n"
- title: 4.3.3 Block Level
  contents:
  - "4.3.3 Block Level\n   A Block level error indicates a problem with a block or\
    \ one of its\n   components in an IOTP message (apart from Transaction Reference\
    \ or\n   Signature Blocks). The message has been transported properly, the\n \
    \  overall message structure and the block/component(s) including the\n   Transaction\
    \ Reference and Signature Blocks are meaningful but there\n   is some error related\
    \ to one of the other blocks.\n   Block level errors can be either:\n   o  technical\
    \ errors, or\n   o  business errors\n   Technical Errors are further divided into:\n\
    \   o  Block Level Attribute and Element Checks, and\n   o  Block and Component\
    \ Consistency Checks\n   o  Transient Technical Errors\n   If a technical error\
    \ occurs related to a block or component, then an\n   Error Component is generated\
    \ for return.\n"
- title: 4.3.3.1 Block Level Attribute and Element Checks
  contents:
  - "4.3.3.1 Block Level Attribute and Element Checks\n   Block Level Attribute and\
    \ Element Checks occur only within the same\n   block. Checks which involve cross-checking\
    \ against other blocks are\n   covered by Block and Component Consistency Checks.\n\
    \   The Block Level Attribute & Element checks are:\n   o  checking that each\
    \ attribute value within each element in a block\n      conforms to any rules\
    \ contained within this IOTP specification\n   o  checking that the content of\
    \ each element conforms to any rules\n      contained within this IOTP specification\n\
    \   o  if the previous checks are OK, then checking the consistency of\n     \
    \ attribute values and element content against other attribute\n      values or\
    \ element content within any other components in the same\n      block.\n"
- title: 4.3.3.2 Block and Component Consistency Checks
  contents:
  - "4.3.3.2 Block and Component Consistency Checks\n   Block and Component Consistency\
    \ Checks consist of:\n   o  checking that the combination of blocks and/or components\
    \ present\n      in the IOTP Message are consistent with the rules contained within\n\
    \      this IOTP specification\n   o  checking for consistency between attributes\
    \ and element content\n      within the blocks within the same IOTP message.\n\
    \   o  checking for consistency between attributes and elements in blocks\n  \
    \    in this IOTP message and blocks received in earlier IOTP messages\n     \
    \ for the same IOTP transaction\n   If the block passes the \"Block Level Attribute\
    \ and Element Checks\"\n   and the \"Block and Component Consistency Checks\"\
    \ then it is processed\n   either by the IOTP Aware application or perhaps by\
    \ some \"back-end\"\n   system such as a payment server.\n"
- title: 4.3.3.3 Transient Technical Errors
  contents:
  - "4.3.3.3 Transient Technical Errors\n   During the processing of the Block some\
    \ temporary failure may occur\n   that can potentially be recovered by the other\
    \ trading role re-\n   transmitting, at some slightly later time, the original\
    \ message that\n   they sent.  In this case the other role is informed of the\
    \ Transient\n   Error by sending them an Error Component (see section 7.21) with\
    \ the\n   Severity Attribute set to TransientError and the MinRetrySecs\n   attribute\
    \ set to some value suitable for the Transport Mechanism\n   and/or payment protocol\
    \ being used (see appropriate Transport and\n   payment protocol Supplements).\n\
    \   Note that transient technical errors can be generated by any of the\n   Trading\
    \ Roles involved in transaction.\n"
- title: 4.3.3.4 Block Level Business Errors
  contents:
  - "4.3.3.4 Block Level Business Errors\n   If a business error occurs in a process\
    \ such as a Payment or a\n   Delivery, then the appropriate type of response block\
    \ is returned\n   containing a Status Component (see section 7.16) with the\n\
    \   ProcessState attribute set to Failed and the CompletionCode\n   indicating\
    \ the nature of the problem.\n   Some business errors may be \"transient\" in\
    \ that the Consumer role may\n   be able to recover and complete the transaction\
    \ in some other way.\n   For example if the Credit Card that a consumer provided\
    \ had\n   insufficient funds for a purchase, then the Consumer may recover by\n\
    \   using a different credit card.\n   Recovery from \"transient\" business errors\
    \ is dependent on the\n   CompletionCode. See the definition of the Status Component\
    \ for what\n   is possible.\n   Note that no Error Component or Error Block is\
    \ generated for business\n   errors.\n"
- title: 4.4 Idempotency, Processing Sequence, and Message Flow
  contents:
  - "4.4 Idempotency, Processing Sequence, and Message Flow\n   IOTP messages are\
    \ actually a combination of blocks and components as\n   described in 3.1.1 IOTP\
    \ Message Structure. Especially in future\n   extensions of IOTP, a rich variety\
    \ of combinations of such blocks and\n   components can occur. It is important\
    \ that the multiple\n   transmission/receipt of the \"same\" request for an action\
    \ that will\n   change state does not result in that action occurring more than\
    \ once.\n   This is called idempotency. For example, a customer paying for an\n\
    \   order would want to pay the full amount only once. Most network\n   transport\
    \ mechanisms have some probability of delivering a message\n   more than once\
    \ or not at all, perhaps requiring retransmission. On\n   the other hand, a request\
    \ for status can reasonably be repeated and\n   should be processed fresh each\
    \ time it is received.\n   Correct implementation of IOTP can be modelled by a\
    \ particular\n   processing order as detailed below. Any other method that is\n\
    \   indistinguishable in the messages sent between the parties is equally\n  \
    \ acceptable.\n"
- title: 4.5 Server Role Processing Sequence
  contents:
  - "4.5 Server Role Processing Sequence\n   \"Server roles\" are any Trading Role\
    \ which is not the Consumer role.\n   They are \"Server roles\" since they typically\
    \ receive a request which\n   they must service and then produce a response. However\
    \ server roles\n   can also initiate transactions. More specifically Server Roles\
    \ must\n   be able to:\n   o  Initiate a transaction (see section 4.5.1). These\
    \ are divided\n      into:\n      -  payment related transactions and\n      -\
    \  infrastructure transactions\n   o  Accept and process a message received from\
    \ another role (see\n      section 4.5.2). This includes:\n      -  identifying\
    \ if the message belongs to a transaction that has\n         been received before\n\
    \      -  handling duplicate messages\n      -  generating Transient errors if\
    \ the servers that process the\n         input message are too busy to handle\
    \ it\n      -  processing the message if it is error free, authorised and, if\n\
    \         appropriate, producing a response to send back to the other\n      \
    \   role\n   o  Cancel a current transaction if requested (see section 4.5.3)\n\
    \   o  Re-transmit messages if a response was expected but has not been\n    \
    \  received in a reasonable time (see section 4.5.4).\n"
- title: 4.5.1 Initiating Transactions
  contents:
  - "4.5.1 Initiating Transactions\n   Server Roles may initiate a variety of different\
    \ types of\n   transaction.  Specifically:\n   o  an Inquiry Transaction (see\
    \ section 9.2.1)\n   o  a Ping Transaction (see section 9.2.2)\n   o  an Authentication\
    \ Transaction (see section 9.1.6)\n   o  a Payment Related Transaction such as:\n\
    \      -  a Deposit (see section 9.1.7)\n      -  a Purchase (see section 9.1.8)\n\
    \      -  a Refund (see section 9.1.9)\n      -  a Withdrawal (see section 9.1.10)\n\
    \      -  a Value Exchange (see section 9.1.11)\n"
- title: 4.5.2 Processing Input Messages
  contents:
  - "4.5.2 Processing Input Messages\n   Processing input messages involves the following:\n\
    \   o  checking the structure and identity of the message\n   o  checking for\
    \ and handling duplicate messages\n   o  processing non-duplicate original messages\
    \ which includes:\n      -  checking for errors, then if no errors are found\n\
    \      -  processing the message to produce an output message if\n         appropriate\n\
    \   Each of these is discussed in more detail below.\n"
- title: 4.5.2.1 Checking Structure and Message Identity
  contents:
  - "4.5.2.1 Checking Structure and Message Identity\n   It is critical to check that\
    \ the message is \"well formed\" XML and\n   that the transaction identifier (IotpTransId\
    \ attribute on the TransId\n   Component) within the IOTP message can be successfully\
    \ identified\n   since an IotpTransId will be needed to generate a response.\n\
    \   If the input message is not well formed then generate an Error\n   Component\
    \ with a Severity of HardError and ErrorCode of\n   XmlNotWellFrmd.\n   If the\
    \ message is well formed but the IotpTransId cannot be\n   identified then generate\
    \ an ErrorComponent with:\n   o  a Severity of HardError and an ErrorCode of AttMissing,\n\
    \   o  a PackagedContent containing \"IotpTransId\" - the missing\n      attribute.\n\
    \   Insert the Error Component inside an Error Block with a new\n   TransactionId\
    \ component with a new IotpTransId and return it to the\n   sender of the original\
    \ message.\n"
- title: 4.5.2.2 Checking/Handling Duplicate Messages
  contents:
  - "4.5.2.2 Checking/Handling Duplicate Messages\n   If the input message can be\
    \ identified as potentially a valid input\n   message then check to see if an\
    \ \"identical\" input message has been\n   received before. Identical means that\
    \ all blocks, components,\n   elements, attribute values and element content in\
    \ the input message\n   are the same.\n   Note: The recommended way of checking\
    \ for identical messages is to\n   check for equal values of their [DOM-HASH]\n\
    \   If an identical message has been received before then check to see if\n  \
    \ the processing of the previous message has completed.\n   If processing has\
    \ not completed then generate an Error Component with\n   a Severity of Transient\
    \ Error and an Error Code of MsgBeingProc to\n   indicate the message is being\
    \ processed and send it back to the\n   sender of the Input Message requesting\
    \ that the original message be\n   resent after an appropriate period of time.\n\
    \   Otherwise, if processing has completed and resulted in an output\n   message\
    \ then retrieve the last message that was sent and send it\n   again.\n   If the\
    \ message is not a duplicate then it should be processed.\n"
- title: 4.5.2.3 Processing Non-Duplicate Message
  contents:
  - "4.5.2.3 Processing Non-Duplicate Message\n   Once it's been established that\
    \ the message is not a duplicate, then\n   it can be processed. This involves:\n\
    \   o  checking that a server is available to handle the message,\n      generating\
    \ a Transient Error if it is not\n   o  checking the Transaction is Not Already\
    \ in error or cancelled\n   o  validating the input message. This includes:\n\
    \      -  checking for message level errors\n      -  checking for block level\
    \ errors\n      -  checking any encapsulated data\n   o  checking for errors in\
    \ the sequence that blocks have been received\n   o  generating error components\
    \ for any errors that result\n   o  if neither hard errors nor transient errors\
    \ result, then\n      processing the message and generating an output message,\
    \ if\n      required, for return to the sender of the Input Message\n   Note:\
    \ This approach to handling of duplicate input messages means, if\n   absolutely\
    \ \"identical\" messages are received then absolutely\n   \"identical\" messages\
    \ are returned. This also applies to Inquiry and\n   Ping transactions when in\
    \ reality the state of a transaction or the\n   processing ability of the servers\
    \ may have changed. If up-to-date\n   status of transactions or servers is required,\
    \ then an IOTP\n   transaction with a new value for the ID attribute of the MsgId\n\
    \   component must be used.\n   Each of the above steps is discussed below.\n\
    \   CHECKING A SERVER IS AVAILABLE\n   The process that is handling the input\
    \ message should check that the\n   rest of the system is not so busy that a response\
    \ in a reasonable\n   time cannot be produced.\n   If the server is too busy,\
    \ then it should generate an Error Component\n   with a Severity of Transient\
    \ Error and an Error Code of SystemBusy\n   and send it back to the sender of\
    \ the Input Message requesting that\n   the original message be resent after an\
    \ appropriate period of time.\n   Note: Some servers may occasionally become very\
    \ busy due to\n   unexpected increases in workload. This approach allows short\
    \ peaks in\n   workloads to be handled by delaying the input of messages by asking\n\
    \   the sender of the message to resubmit later.\n   CHECKING THE TRANSACTION\
    \ IS NOT ALREADY IN ERROR OR CANCELLED\n   Check that:\n   o  previous messages\
    \ received or sent did not contain or result in\n      Hard Errors, and\n   o\
    \  the Transaction has not been cancelled by either the Consumer or\n      the\
    \ Server Trading Role\n   If it has then, ignore the message. A transaction with\
    \ hard errors or\n   that has been cancelled, cannot be restarted.\n   CHECK FOR\
    \ MESSAGE AND BLOCK LEVEL ERRORS\n   If the transaction is still OK then check\
    \ for message level errors.\n   This involves:\n   o  checking the XML is valid\n\
    \   o  checking that the elements, attributes and content of the\n      Transaction\
    \ Reference Block are without error and conform to this\n      specification\n\
    \   o  checking the digital signature which involves:\n      -  checking that\
    \ the Signature value is correctly calculated, and\n      -  the hash values in\
    \ the digests are correctly calculated where\n         the source of the hash\
    \ value is available.\n   Checking for block level errors involves:\n   o  checking\
    \ within each block (apart from the Transaction Reference\n      Block) that:\n\
    \      -  the attributes, elements and element contents are valid\n      -  the\
    \ values of the attributes, elements and element contents are\n         consistent\
    \ within the block\n   o  checking that the combination of blocks are valid\n\
    \   o  checking that the values of the attribute, elements and element\n     \
    \ contents are consistent between the blocks in the input message\n      and blocks\
    \ in earlier messages either sent or received. This\n      includes checking that\
    \ the presence of a block is valid for a\n      particular transaction type\n\
    \   If the message contains any encapsulated data, then if possible check\n  \
    \ the encapsulated data for errors using additional software to check\n   the\
    \ data where appropriate.\n"
- title: 4.5.2.4 Check for Errors in Block Sequence
  contents:
  - "4.5.2.4 Check for Errors in Block Sequence\n   Note: For reasons of brevity,\
    \ the following explanations of how to\n   check for errors in Block sequence,\
    \ the phrase \"refers to an IOTP\n   transaction\" is interpreted as \"is contained\
    \ in an IOTP Message where\n   the Trans Ref Block contains an IotpTransId that\
    \ refers to\". So, for\n   example, \" If an Error or Cancel Block refers to an\
    \ IOTP transaction\n   that is not recognised then ...\"  should be interpreted\
    \ as \" If an\n   Error or Cancel Block is contained in an IOTP Message where\
    \ the Trans\n   Ref Block contains an IotpTransId that refers to an IOTP transaction\n\
    \   that is not recognised then ...\n   Errors in the sequence that blocks arrive\
    \ depends on the block.\n   Blocks where checking for sequence is required are:\n\
    \   o  Error and Cancel Blocks. If an Error or Cancel Block refers to an\n   \
    \   IOTP transaction that is not recognised then it is a Hard Error.\n      Do\
    \ not return an error if Error or Cancel Blocks have been\n      received for\
    \ the IOTP Transaction before to avoid looping.\n   o  Inquiry Request and Response\
    \ Blocks. If an Inquiry Request or an\n      Inquiry Response Block refers to\
    \ an IOTP transaction that is not\n      recognised then it is a Hard Error\n\
    \   o  Authentication Request Block. If an Authentication Request Block\n    \
    \  refers to an IOTP transaction that is recognised it is a Hard\n      Error\n\
    \   o  Authentication Response Block. Check as follows:\n      -  if an Authentication\
    \ Response Block does not refer to an IOTP\n         transaction that is recognised\
    \ it is a Hard Error, otherwise\n      -  if the Authentication Response Block\
    \ doesn't refer to an\n         Authentication Request that had been previously\
    \ sent then it is\n         a Hard Error, otherwise\n      -  if an Authentication\
    \ Response for the same IOTP transaction has\n         been received before and\
    \ the Authentication was successful then\n         it is a Hard Error.\n   o \
    \ Authentication Status Block. Check as follows:\n      -  if an Authentication\
    \ Status Block does not refer to an IOTP\n         transaction that is recognised\
    \ it is a Hard Error, otherwise\n      -  if the Authentication Status Block doesn't\
    \ refer to an\n         Authentication Response that had been previously sent\
    \ then it\n         is a Hard Error, otherwise\n      -  if an Authentication\
    \ Status for the same IOTP transaction has\n         been received before then\
    \ it is a Warning Error\n   o  TPO Selection Block (Merchant only). Check as follows:\n\
    \      -  if the TPO Selection Block doesn't refer to an IOTP Transaction\n  \
    \       that is recognised then it is a Hard Error, otherwise\n      -  if the\
    \ TPO Selection Block refers to an IOTP Transaction where\n         a TPO Block\
    \ and Offer Response (in one message) had previously\n         been sent then\
    \ it is a Hard Error, otherwise\n      -  if the TPO Selection Block does not\
    \ refer to an IOTP\n         Transaction where a TPO Block only (i.e. without\
    \ an Offer\n         Response) had previously been sent then it is a Hard Error,\n\
    \         otherwise\n      -  if a TPO Selection Block for the same TPO Block\
    \ has been\n         received before then it is a Hard Error\n   o  Payment Request\
    \ Block (Payment Handler only). Check as follows:\n      -  if the Payment Request\
    \ Block refers to an IOTP Transaction that\n         is not recognised then its\
    \ OK, otherwise\n      -  if the Payment Request Block refers to IOTP Transaction\
    \ that\n         was not for a Payment then it is a Hard Error, otherwise\n  \
    \    -  if there was a previous payment that failed with a non-\n         recoverable\
    \ Completion Code then it is a Hard Error, otherwise\n      -  if a previous payment\
    \ is still in progress then it is a Hard\n         Error\n   o Payment Exchange\
    \ Block (Payment Handler only). Check as follows:\n      -  if the Payment Exchange\
    \ Block doesn't refer to an IOTP\n         Transaction that is recognised then\
    \ it is a Hard Error,\n         otherwise\n      -  if the Payment Exchange doesn't\
    \ refer to an IOTP Transaction\n         where a Payment Exchange had previously\
    \ been sent then it a\n         Hard Error\n   o  Delivery Request (Delivery Handler\
    \ Only). If the Delivery Request\n      Block refers to an IOTP Transaction that\
    \ is recognised by the\n      Server then it is a Hard Error\n   If any Error\
    \ Components have been generated then collect them into an\n   Error Block for\
    \ sending to the sender of the Input message. Note that\n   Error Blocks should\
    \ be sent back to the sender of the message and to\n   the ErrorLogNetLocn for\
    \ the Trading Role of the sender if one is\n   specified.\n   Note: The above\
    \ checking on the sequence of Authentication Responses\n   and Payment Requests\
    \ supports the Consumer re-submitting a repeat\n   action request since the previous\
    \ one failed, for example:\n   o  because they did not know the correct response\
    \ (e.g., a password)\n      on an authentication or,\n   o  they were unable to\
    \ pay as there were insufficient funds on a\n      credit card\n   PROCESS THE\
    \ ERROR FREE INPUT MESSAGE\n   If the input message passes the previous checks\
    \ then it can be\n   processed to produce an output message if required. Note\
    \ that:\n   o  Inquiry Requests on Ping Transactions should be ignored\n   o \
    \ if the Input message contains an Error Block with a Transient\n      Error then\
    \ wait for the required time then resend the previous\n      message, if a response\
    \ to the earlier message has not been\n      received\n   o  if the input message\
    \ contains a Error Component with a  HardError\n      or a Cancel Block then stop\
    \ all further processing of the\n      transaction. This includes suppressing\
    \ the sending of any messages\n      currently being generated or responding to\
    \ any new non-duplicate\n      messages that are received\n   o  processing of\
    \ encapsulated messages (e.g., Payment Protocol\n      Messages) may result in\
    \ additional transient errors\n   o  a digital signature can only safely be generated\
    \ once all the\n      blocks and components have been generated and it is known\
    \ which\n      elements in the message need to be signed.\n   If an output message\
    \ is generated then it should be saved so that it\n   can be resent as required\
    \ if an identical input message is received\n   again.  Note that output messages\
    \ that contain transient errors are\n   not saved so that they can be processed\
    \ afresh when the input message\n   is received again.\n"
- title: 4.5.3 Cancelling a Transaction
  contents:
  - "4.5.3 Cancelling a Transaction\n   This process is used to cancel a transaction\
    \ running on an IOTP\n   server.  It is initiated by some other process as a result\
    \ of an\n   external request from another system or server that is being run by\n\
    \   the same Trading Role.  The processing required is as follows:\n   o  if the\
    \ IotpTransId of the transaction to be cancelled is not\n      recognised, or\
    \ complete then fail the request, otherwise\n   o  if the IotpTransId refers to\
    \ a Ping Transaction then fail the\n      request, otherwise\n   o  determine\
    \ which Document Exchange to cancel and generate a Cancel\n      Block and send\
    \ it to the other party\n   Note: Cancelling a transaction on an IOTP server typically\
    \ arises for\n   a business reason. For example a merchant may have attempted\n\
    \   authentication several times without success and as a result decides\n   to\
    \ cancel the transaction. Therefore the process that decides to take\n   this\
    \ action needs to send a message from the process/server that made\n   the business\
    \ decision to the IOTP server with the instruction that\n   the IOTP transaction\
    \ should be cancelled.\n"
- title: 4.5.4 Retransmitting Messages
  contents:
  - "4.5.4 Retransmitting Messages\n   The server should periodically check for transactions\
    \ where a message\n   is expected in return but none has been received after a\
    \ time that is\n   dependent on factors such as:\n   o  the Transport Mechanism\
    \ being used;\n   o  the time required to process encapsulated messages (e.g.,\
    \ Payment\n      messages) and\n   o  whether or not human input is required.\n\
    \   If no message has been received the original message should be\n   resent.\
    \  This should occur up to a maximum number of times dependent\n   on the reliability\
    \ of the Transport Mechanism being used.\n   If no response is received after\
    \ the required time then the\n   Transaction should be \"timed out\". In this\
    \ case, set the process\n   state of the transaction to Failed, and a completion\
    \ code of either:\n   o  TimedOutRcvr if the transaction can potentially recovered\
    \ later,\n      or\n   o  TimedOutNoRcvr if the transaction is non-recoverable\n"
- title: 4.6 Client Role Processing Sequence
  contents:
  - "4.6 Client Role Processing Sequence\n   The \"Client role\" in IOTP is the Consumer\
    \ Trading Role.\n   Note: A company or Organisation that is a Merchant, for example,\
    \ may\n   take on the Trading Role of a Consumer when making purchases or\n  \
    \ downloading or withdrawing electronic cash.\n   More specifically the Consumer\
    \ Role must be able to:\n   o  Initiate a transaction (see section 4.6.1). These\
    \ are divided\n      into:\n      -  payment related transactions and\n      -\
    \  infrastructure transactions\n   o  Accept and process a message received from\
    \ another role (see\n      section 4.6.2). This includes:\n      -  identifying\
    \ if the message belongs to a transaction that has\n         been received before\n\
    \      -  handling duplicate messages\n      -  generating Transient errors if\
    \ the servers that process the\n         input message are too busy to handle\
    \ it\n      -  processing the message if it is error free and, if appropriate,\n\
    \         producing a response to send back to the other role\n   o  Cancel a\
    \ current transaction if requested, for example by the User\n      (see section\
    \ 4.6.3)\n   o  Re-transmit messages if a response was expected but has not been\n\
    \      received in a reasonable time (see section 4.6.4).\n"
- title: 4.6.1 Initiating Transactions
  contents:
  - "4.6.1 Initiating Transactions\n   The Consumer Role may initiate a number of\
    \ different types of\n   transaction. Specifically:\n   o an Inquiry Transaction\
    \ (see section 9.2.1)\n   o a Ping Transaction (see section 9.2.2)\n   o an Authentication\
    \ Transaction (see section 9.1.6)\n"
- title: 4.6.2 Processing Input Messages
  contents:
  - "4.6.2 Processing Input Messages\n   Processing of Input Messages for a Consumer\
    \ Role is the same as for\n   an IOTP Server (see section 4.5.2) except in the\
    \ area of checking for\n   Errors in Block Sequence (for an IOTP Server see section\
    \ 4.5.2.4).\n   This is described below\n   Note: The description of the processing\
    \ for an IOTP Server includes\n   consideration of multi-threading of input messages\
    \ and multi-tasking\n   of requests. For the Consumer Role - particularly if running\
    \ on a\n   stand-alone system such as a PC - use of multi-threading is a\n   decision\
    \ of the implementer of the consumer role IOTP solution.\n"
- title: 4.6.2.1 Check for Errors in Block Sequence
  contents:
  - "4.6.2.1 Check for Errors in Block Sequence\n   The handling of the following\
    \ blocks is the same as for an IOTP\n   Server (see section 4.5.2.4) except that\
    \ the Consumer Role is\n   substituted for IOTP Server Role:\n   o Error and Cancel\
    \ Blocks,\n   o Inquiry Request and Response Blocks,\n   o Authentication Request,\
    \ Response and Status Blocks.\n   For the other blocks a Consumer role might receive,\
    \ the potential\n   errors in the sequence that blocks arrive depends on the block.\n\
    \   Blocks where checking for sequence is required are:\n   o  TPO Block. Check\
    \ as follows:\n      -  if the input message also contains an Authentication Request\n\
    \         block and an Offer Response Block then there is a Hard Error,\n    \
    \     otherwise\n      -  if the input message also contains an Authentication\
    \ Request\n         block and Authentication Status block then there is Hard Error\n\
    \         otherwise,\n      -  if the input message also contains an Authentication\
    \ Request\n         block and the IOTP Transaction is recognised by the Consumer\n\
    \         role's system, then there is a Hard Error, otherwise\n      -  if the\
    \ input message also contains an Authentication Status\n         block and the\
    \ IOTP Transaction is not recognised by the\n         Consumer role's system then\
    \ there is a Hard Error, otherwise\n      -  if input message also contains an\
    \ Authentication Status Block\n         and the Authentication Status Block has\
    \ not been sent after an\n         earlier Authentication Response message then\
    \ there is a hard\n         error\n      -  if input message also contains an\
    \ Offer Response Block and the\n         IOTP Transaction is recognised by the\
    \ Consumer role's system\n         then there is a Hard Error, otherwise\n   \
    \   -  if the TPO Block occurs on its own and the IOTP Transaction is\n      \
    \   recognised by the Consumer role's system then there is a Hard\n         Error\n\
    \   o Offer Response Block. Check as follows:\n      -  if the Offer Response\
    \ Block is part of a Brand Independent\n         Offer Exchange (see section 9.1.2.2)\
    \ then there is no sequence\n         checking as it is part of the first message\
    \ received, otherwise\n      -  if the Offer Response Block is not part of an\
    \ IOTP Transaction\n         that is recognised by the Consumer role then there\
    \ is a Hard\n         Error, otherwise\n      -  if the Offer Response Block does\
    \ not refer to an IOTP\n         transaction where a TPO Selection Block was the\
    \ last message\n         sent then there is a Hard Error\n   o  Payment Exchange\
    \ Block. Check as follows:\n      -  if the Payment Exchange Block doesn't refer\
    \ to an IOTP\n         Transaction that is recognised by the Consumer role's system\n\
    \         then there is a Hard Error, otherwise\n      -  if the Payment Exchange\
    \ doesn't refer to an IOTP Transaction\n         where either a Payment Request\
    \ or a Payment Exchange block was\n         most recently sent then there is a\
    \ Hard Error\n   o  Payment Response Block. Check as follows:\n      -  if the\
    \ Payment Response Block doesn't refer to an IOTP\n         Transaction that is\
    \ recognised by the Consumer role's system\n         then there is a Hard Error,\
    \ otherwise\n      -  if the Payment Response doesn't refer to an IOTOP Transaction\n\
    \         where either a Payment Request or a Payment Exchange block was\n   \
    \      most recently sent then there is a Hard Error\n   o  Delivery Response\
    \ Block. Check as follows:\n      -  if the Delivery Response Block doesn't refer\
    \ to an IOTP\n         Transaction that is recognised by the Consumer role's system\n\
    \         then there is a Hard Error, otherwise\n      -  If the Delivery Response\
    \ doesn't refer to an IOTP Transaction\n         where either a Payment Request\
    \ or a Payment Exchange block was\n         most recently sent then there is a\
    \ Hard Error\n"
- title: 4.6.3 Cancelling a Transaction
  contents:
  - "4.6.3 Cancelling a Transaction\n   This process cancels a current transaction\
    \ on an Consumer role's\n   system as a result of an external request from the\
    \ user, or another\n   system or server in the Consumer's role. The processing\
    \ is the same\n   as for an IOTP Server (see section 4.5.3).\n"
- title: 4.6.4 Retransmitting Messages
  contents:
  - "4.6.4 Retransmitting Messages\n   The process of retransmitting messages is the\
    \ same as for an IOTP\n   Server (see section 4.5.4).\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This section considers, from an IETF perspective\
    \ how IOTP addresses\n   security. The next section (see section 6. Digital Signatures\
    \ and\n   IOTP) describes how IOTP uses Digital Signatures when these are\n  \
    \ needed.\n   This section covers:\n   o determining whether to use digital signatures\n\
    \   o data privacy, and\n   o payment protocol security.\n"
- title: 5.1 Determining whether to use digital signatures
  contents:
  - "5.1 Determining whether to use digital signatures\n   The use of digital signatures\
    \ within IOTP are entirely optional. IOTP\n   can work successfully entirely without\
    \ the use of digital signatures.\n   Ultimately it is up to the Merchant, or other\
    \ trading role, to decide\n   whether IOTP Messages will include signatures, and\
    \ for the Consumer\n   to decide whether carrying out a transaction without signatures\
    \ is an\n   acceptable risk. If Merchants discover that transactions without\n\
    \   signatures are not being accepted, then they will either:\n   o start using\
    \ signatures,\n   o find a method of working which does not need signatures, or\n\
    \   o accept a lower volume and value of business.\n   A non-exhaustive list of\
    \ the reasons why digital signatures might be\n   used follows:\n   o  the Merchant\
    \ (or other trading role) wants to demonstrate that\n      they can be trusted.\
    \ If, for example, a merchant generates an\n      Offer Response Signature (see\
    \ section 7.19.2) using a certificate\n      from a trusted third party, known\
    \ to the Consumer, then the\n      Consumer can check the signature and certificate\
    \ and so more\n      reasonably rely on the offer being from the actual Organisation\n\
    \      the Merchant claims to be. In this case signatures using\n      asymmetric\
    \ cryptography are likely to be required\n   o  the Merchant, or other Trading\
    \ Role, want to generate a record of\n      the transaction that is fit for a\
    \ particular purpose. For example,\n      with appropriate trust hierarchies,\
    \ digital signatures could be\n      checked by the Consumer to determine:\n \
    \     -  if it would be accepted by tax authorities as a valid record of\n   \
    \      a transaction, or\n      -  if some warranty, for example from a \"Better\
    \ Business Bureau\"\n         orsimilar was being provided\n   o  the Payment\
    \ Handler, or Delivery Handler, needs to know that the\n      request is unaltered\
    \ and authorised. For example, in IOTP, details\n      of how much to pay is sent\
    \ to the Consumer in the Offer Response\n      and then forwarded to the Payment\
    \ Handler in a Payment Request. If\n      the request is not signed, the Consumer\
    \ could change the amount\n      due by, for example, removing a digit. If the\
    \ Payment Handler has\n      no access to the original payment information in\
    \ the Offer\n      Response, then, without signatures, the Payment Handler cannot\
    \ be\n      sure that the data has not been altered. Similarly, if the payment\n\
    \      information is not digitally signed, the Payment Handler cannot be\n  \
    \    sure who is the Merchant that is requesting the payment\n   o  a Payment\
    \ Handler or Delivery Handler wants to provide a non-\n      refutable record\
    \ of the completion status of a Payment or\n      Delivery. If a Payment Response\
    \ or Delivery Response is signed,\n      then the Consumer can later use the record\
    \ of the Payment or\n      Delivery to prove that it occurred.  This could be\
    \ used, for\n      example, for customer care purposes.\n   A non-exhaustive list\
    \ of the reasons why digital signatures might not\n   be used follows:\n   o \
    \ trading roles are combined therefore changes to data made by the\n      consumer\
    \ can be detected. One of the reasons for using signatures\n      is so that one\
    \ trading role can determine if data has been changed\n      by the Consumer or\
    \ some other party. However if the trading roles\n      have access to the necessary\
    \ data, then it might be possible to\n      compare, for example, the payment\
    \ information in the Payment\n      Request with the payment information in the\
    \ Offer Response. Access\n      to the data necessary could be realised by, for\
    \ example, the\n      Merchant and Payment Handler roles being carried out by\
    \ the same\n      Organisation on the same system, or the Merchant and Payment\n\
    \      Handler roles being carried out on different systems but the\n      systems\
    \ can communicate in some way. (Note this type of\n      communication is outside\
    \ the current scope of IOTP)\n   o  the processing cost of the cryptography is\
    \ too high. For example,\n      if a payment is being made of only a few cents,\
    \ the cost of\n      carrying out all the cryptography associated with generating\
    \ and\n      checking digital signatures might make the whole transaction\n  \
    \    uneconomic. Co-locating trading roles, could help avoid this\n      problem.\n"
- title: 5.2 Symmetric and Asymmetric Cryptography
  contents:
  - "5.2 Symmetric and Asymmetric Cryptography\n   The advantage of using symmetric\
    \ keys with IOTP is that no Public Key\n   Infrastructure need be set up and just\
    \ the Merchant, Payment Handler\n   and Delivery Handler need to agree on the\
    \ shared secrets to use.\n   However the disadvantage of symmetric cryptography\
    \ is that the\n   Consumer cannot easily check the credentials of the Merchant,\
    \ Payment\n   Handler, etc. that they are dealing with. This is likely to reduce,\n\
    \   somewhat, the trust that the Consumer will have carrying out the\n   transaction.\n\
    \   However it should be noted that even if asymmetric cryptography is\n   being\
    \ used, the Consumer does not NEED to be provided with any\n   digital certificates\
    \ as the integrity of the transaction is\n   determined by, for example, the Payment\
    \ Handler checking the Offer\n   Response Signature copied to the Payment Request.\n\
    \   Note that symmetric, asymmetric or both types of cryptography may be\n   used\
    \ in a single transaction.\n"
- title: 5.3 Data Privacy
  contents:
  - "5.3 Data Privacy\n   Privacy of information is provided by sending IOTP Messages\
    \ between\n   the various Trading Roles using a secure channel such as [SSL/TLS].\n\
    \   Use of a secure channel within IOTP is optional.\n"
- title: 5.4 Payment Protocol Security
  contents:
  - "5.4 Payment Protocol Security\n   IOTP is designed to be completely blind to\
    \ the payment protocol being\n   used to effect a payment. From the security perspective,\
    \ this means\n   that IOTP neither helps, nor hinders, the achievement of payment\n\
    \   security.\n   If it is necessary to consider payment security from an IOTP\n\
    \   perspective, then this should be included in the payment protocol\n   supplement\
    \ which describes how IOTP supports that payment protocol.\n   However what IOTP\
    \ is designed to do is to use digital signatures to\n   bind together the record,\
    \ contained in a \"response\" message, of each\n   trading exchange in a transaction.\
    \ For example IOTP can bind\n   together: an Offer, a Payment and a Delivery.\n"
- title: 6. Digital Signatures and IOTP
  contents:
  - "6. Digital Signatures and IOTP\n   IOTP can work successfully without using any\
    \ digital signatures\n   although in an open networking environment it will be\
    \ less secure -\n   see 5.  Security Considerations for a description of the factors\
    \ that\n   need to be considered.\n   However, this section describes how to use\
    \ digital signatures in the\n   many situations when they will be needed. Topics\
    \ covered are:\n   o  an overview of how IOTP uses digital signatures\n   o  how\
    \ to check a signature is correctly calculated\n   o  how Payment Handlers and\
    \ Delivery Handlers check they can carry\n      out payments or deliveries on\
    \ behalf of a Merchant.\n"
- title: 6.1 How IOTP uses Digital Signatures
  contents:
  - "6.1 How IOTP uses Digital Signatures\n   In general, signatures when used with\
    \ IOTP:\n   o  are always treated as IOTP Components (see section 7)\n   o  contain\
    \ digests of one or more IOTP Components or Trading Blocks,\n      possibly including\
    \ other Signature Components, in any IOTP message\n      within the same IOTP\
    \ Transaction\n   o  identify:\n      -  which Organisation signed (originated)\
    \ the signature, and\n      -  which Organisation(s) should process the signature\
    \ in order to\n         check that the Action the Organisation should take can\
    \ occur.\n   Digital certificates may be associated with digital signatures if\n\
    \   asymmetric cryptography is being used. However if symmetric\n   cryptography\
    \ is being used, then the digital certificate will be\n   replaced by some identifier\
    \ of the secret key to use.\n   The way in which Signatures Components digest\
    \ one or more elements is\n   illustrated in the figure below.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \ IOTP MESSAGE                                  SIGNATURE COMPONENT\n IOTP Message\
    \                                   Signature Id = P1.3\n  |-Trans Ref Block \
    \       digest TransRefBlk   |-Manifest\n  |  |      ID=P1.1-----------------------------|->|-Digest\
    \ of P1.1--\n  |  |-Trans Id Comp       digest TransIdComp   |  |            \
    \     |\n  |  |     ID = M1.2----------------------------|->|-Digest of M1.2--|\n\
    \  |  |-Msg Id Comp.           digest Signature  |  |                 |\n  | \
    \ |      ID = P1          -------------------|->|-Digest of M1.5--|\n  |     \
    \                    |   digest element  |  |                 |\n  |-Signatures\
    \ Block        |  -----------------|->|-Digest of M1.7--|\n  |  |       ID=P1.2\
    \        | |  digest element |  |                 |\n  |  |-Signature ID=P1.3\
    \    | |  ---------------|->|-Digest of C1.4--|\n  |  |-Signature ID=M1.5----\
    \  | |               |  |                 |\n  |  |-Signature ID=P1.4      | |\
    \ Points to     |   -RecipientInfo*  |\n  |  |-Certificate ID=M1.6<---|-|---------------|------CertRef=M1.6\
    \  |\n  |  |                        | | Certs to use  |  Sig.ValueRef=P1.4 |\n\
    \  |  |                        | |               |        |           |\n  | \
    \ |                        | |               |        |           |\n  |-Trading\
    \ Block. ID=P1.5    | |               |        v           |\n  |  |-Comp. ID=M1.7----------\
    \  |                -Value* ID=P1.4:    |\n  |  |                          | \
    \                  JtvwpMdmSfMbhK<--\n  |  |-Comp. ID=P1.6            |      \
    \             r1Ln3vovbMQttbBI\n  |  |                          |            \
    \       J8pxLjoSRfe1o6k\n  |  |-Comp. ID=C1.4------------                    OGG7nTFzTi+/0<-\n\
    \  |  |-Comp. ID=C1.5\n                             Digital signature of Manifest\
    \ element\n                             using certificate identified by CertRef\n\
    \   Elements that are digested can be in any IOTP Message\n        within the\
    \ same IOTP Transaction\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                         Figure 10 Signature Digests\n   Note: The classic example\
    \ of one signature signing another in IOTP,\n   is when an Offer is first signed\
    \ by a Merchant creating an \"Offer\n   Response\" signature, which is then later\
    \ signed by a Payment Handler\n   together with a record of the payment creating\
    \ a \"Payment Receipt\"\n   signature. In this way, the payment in an IOTP Transaction\
    \ is bound\n   to the Merchant's offer.\n   Note that one Manifest may be associated\
    \ with multiple signature\n   \"Value\" elements where each Value element contains\
    \ a digital\n   signature over the same Manifest, perhaps using the same (or\n\
    \   different) signature algorithm but using a different certificate or\n   shared\
    \ secret key. Specifically it will allow the Merchant to agree\n   on different\
    \ shared secrets keys with their Payment Handler and\n   Delivery Handler.\n \
    \  The detailed definitions of a Signature component are contained in\n   section\
    \ 7.19.\n   The remainder of this section contains:\n   o  an example of how IOTP\
    \ uses signatures\n   o  how the OriginatorInfo and RecipientInfo elements within\
    \ a\n      Signature Component are used to identify the Organisations\n      associated\
    \ with the signature\n   o  how IOTP uses signatures to prove actions complete\
    \ successfully\n"
- title: 6.1.1 IOTP Signature Example
  contents:
  - "6.1.1 IOTP Signature Example\n   An example of how signatures are used is illustrated\
    \ in the figure\n   below which shows how the various components and elements\
    \ in a\n   Baseline Purchase relate to one another. Refer to this example in the\n\
    \   later description of how signatures are used to check a payment or\n   delivery\
    \ can occur (see section 6.3).\n   Note: A Baseline Purchase transaction has been\
    \ used for illustration\n   purposes. The usage of the elements and attributes\
    \ is the same for\n   all types of IOTP Transactions.\n"
- title: '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*'
  contents:
  - '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*

    '
- title: TPO SELECTION BLOCK          TPO BLOCK           IOTPSIGNATURE BLOCK
  contents:
  - "TPO SELECTION BLOCK          TPO BLOCK           IOTPSIGNATURE BLOCK\n      \
    \                                           | (Offer Response)\n Brand Selection\
    \             Organisation<---    |------Signature\n   Component             \
    \    Component       |   |      Component\n      |                       |   \
    \           |           -Manifest\n      |BrandList               -Trading Role\
    \ |            |\n      |  Ref                     Element     | Originator |-Orig.\n\
    \      v                         (Merchant)    ------------|--Info\n    Brand\
    \ List                                    Ref     |\n  >Component            \
    \                                  |\n | |-Protocol       ------>  Organisation\
    \     Recipient   |-Recipient\n | | Amount Elem   |         Component <------------------|--Info\n\
    \ | |   |           |          |                 Refs      |\n | |Pay|Protocol\
    \   |Action     -Trading Role              |\n | |   | Ref       |OrgRef     \
    \  Element                  |\n | |   v           |          (Payment Handler)\
    \           |\n |  -PayProtocol--                                        |\n |\
    \    Elem                  ->Organisation    Recipient   |-Recipient\n |     \
    \                    |  Component <--------------------Info\n |              \
    \           |  |                 Refs\n |                         |   -Trading\
    \ Role\n |                         |     Element\n |                         |\
    \ (Delivery Handler\n |\n |           OFFER RESPONSE BLOCK\n |               \
    \          |\n |BrandListRef             |ActionOrgRef\n |                   \
    \      |\n  --Payment                 ---Delivery\n   Component              \
    \    Component\n"
- title: 'The Manifest element in the Signature Component contains digests of:'
  contents:
  - 'The Manifest element in the Signature Component contains digests of:

    '
- title: the Trans Ref Block (not shown); the Transaction ID Component (not
  contents:
  - 'the Trans Ref Block (not shown); the Transaction ID Component (not

    '
- title: shown); Organisation Components (Merchant, Payment Handler, Delivery
  contents:
  - 'shown); Organisation Components (Merchant, Payment Handler, Delivery

    '
- title: Handler); the Brand List Component; the Order Component, the Payment
  contents:
  - 'Handler); the Brand List Component; the Order Component, the Payment

    '
- title: Component the Delivery Component and the Brand Selection Component (if a
  contents:
  - 'Component the Delivery Component and the Brand Selection Component (if a

    '
- title: Brand Dependent Purchase).
  contents:
  - 'Brand Dependent Purchase).

    '
- title: '*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'
  contents:
  - "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n     \
    \    Figure 11 Example use of Signatures for Baseline Purchase\n"
- title: 6.1.2 OriginatorInfo and RecipientInfo Elements
  contents:
  - "6.1.2 OriginatorInfo and RecipientInfo Elements\n   The OriginatorRef attribute\
    \ of the OriginatorInfo element in the\n   Signature Component contains an Element\
    \ Reference (see section 3.5)\n   that points to the Organisation Component of\
    \ the Organisation which\n   generated the Signature. In this example its the\
    \ Merchant.\n   Note that the value of the content of the Attribute element with\
    \ a\n   Type attribute set to IOTP Signature Type must match the Trading Role\n\
    \   of the Organisation which signed it. If it does not, then it is an\n   error.\
    \ Valid combinations are given in the table below.\n         IOTP Signature Type\
    \    Valid Trading Role\n         OfferResponse           Merchant\n         PaymentResponse\
    \         PaymentHandler\n         DeliveryResponse        DeliveryHandler\n \
    \        AuthenticationRequest   any role\n         AuthenticationResponse  any\
    \ role\n         PingRequest             any role\n         PingResponse     \
    \       any role\n   The RecipientRefs attribute of the RecipientInfo element\
    \ in the\n   Signature Component contains Element References to the Organisation\n\
    \   Components of the Organisations that should use the signature to\n   verify\
    \ that:\n   o  they have a pre-existing relationship with the Organisation that\n\
    \      generated the signature,\n   o  the data which is secured by the signature\
    \ has not been changed,\n   o  the data has been signed correctly, and\n   o \
    \ the action they are required to undertake on behalf of the\n      Merchant is\
    \ therefore authorised.\n   Note that if symmetric cryptography is being used\
    \ then a separate\n   RecipientInfo and Value elements for each different set\
    \ of shared\n   secret keys are likely within the Signature Component.\n   Alternatively\
    \ if asymmetric cryptography is being used then the\n   RecpientRefs attribute\
    \ of one RecipientInfo element may refer to\n   multiple Organisation Components\
    \ if they are all using the same\n   certificates.\n"
- title: 6.1.3 Using signatures to Prove Actions Complete Successfully
  contents:
  - "6.1.3 Using signatures to Prove Actions Complete Successfully\n   Proving an\
    \ action completed successfully, is achieved by signing data\n   on Response messages.\
    \ Specifically:\n   o  on the Offer Response, when a Merchant is making an Offer\
    \ to the\n      Consumer which can then be sent to either:\n      -  a Payment\
    \ Handler to prove that the Merchant authorises\n         Payment, or\n      -\
    \  a Delivery Handler to prove that Merchant authorises Delivery,\n         provided\
    \ other necessary authorisations are complete (see\n         below)\n   o  on\
    \ the Payment Response, when a Payment Handler is generating a\n      Payment\
    \ Receipt which can be sent to either:\n      -  a Delivery Handler, in a Delivery\
    \ Request Block to authorise\n         Delivery together with the Offer Response\
    \ signature, or\n      -  another Payment Handler, in a second Payment Request,\
    \ to\n         authorise the second payment in a Value Exchange IOTP\n       \
    \  Transaction\n   o  Delivery Response, when a Delivery Handler is generating\
    \ a\n      Delivery Note. This can be used to prove after the event what the\n\
    \      Delivery Handler said they would do\n   o  Authentication Response. One\
    \ method of authenticating another\n      party to a trade is to send an Authentication\
    \ Request specifying\n      that a Digital Signature should be used for authentication\n\
    \   o  Transaction Status Inquiry. The Inquiry Response Block may be\n      digitally\
    \ signed to attest to the authenticity of the response\n   o  Ping. The Ping Response\
    \ may be digitally signed so that checks can\n      be made that the signature\
    \ can be understood.\n   This proof of an action may, in future versions of IOTP,\
    \ also be used\n   to prove after the event that the IOTP transaction occurred.\
    \ For\n   example to a Customer Care Provider.\n"
- title: 6.2 Checking a Signature is Correctly Calculated
  contents:
  - "6.2 Checking a Signature is Correctly Calculated\n   Checking a signature is\
    \ correctly calculated is part of checking for\n   Message Level Errors (see section\
    \ 4.3.2). It is included here so that\n   all signature and security related considerations\
    \ are kept together.\n   Before a Trading Role can check a signature it must identify\
    \ which of\n   the potentially multiple Signature elements should be checked.\
    \ The\n   steps involved are as follows:\n   o  check that a Signature Block is\
    \ present and it contains one or\n      more Signature Components\n   o  identify\
    \ the Organisation Component which contains an OrgId\n      attribute for the\
    \ Organisation which is carrying out the signature\n      check. If no or more\
    \ than one Organisation Component is found then\n      it is an error\n   o  use\
    \ the ID attribute of the Organisation Component to find the\n      RecipientInfo\
    \ element that contains a RecipientRefs attribute that\n      refers to that Organisation\
    \ Component. Note there may be no\n      signatures to verify\n   o  check the\
    \ Signature Component that contains the identified\n      RecipientInfo element\
    \ as follows:\n      -  use the SignatureValueRef and the SignatureAlgorithmRef\n\
    \         attributes to identify, respectively: the Value element that\n     \
    \    contains the signature to be checked and the Signature\n         Algorithm\
    \ element that describes the signature algorithm to be\n         used to verify\
    \ the Signature, then\n      -  if the Signature Algorithm element indicates that\
    \ asymmetric\n         cryptography is being used then use the SignatureCertRef\
    \ to\n         identify the Certificate to be used by the signature algorithm\n\
    \      -  if Signature Algorithm element indicates that symmetric\n         cryptography\
    \ is being used then the content of the\n         RecipientInfo element is used\
    \ to identify the correct shared\n         secret key to use\n      -  use the\
    \ specified signature algorithm to check that the Value\n         Element correctly\
    \ signs the Manifest Element\n      -  check that the Digest Elements in the Manifest\
    \ Element are\n         correctly calculated where Components or Blocks referenced\
    \ by\n         the Digest have been received by the Organisation checking the\n\
    \         signature.\n"
- title: 6.3 Checking a Payment or Delivery can occur
  contents:
  - "6.3 Checking a Payment or Delivery can occur\n   This section describes the processes\
    \ required for a Payment Handler\n   or Delivery Handler to check that a payment\
    \ or delivery can occur.\n   This may include checking signatures if this is specified\
    \ by the\n   Merchant.\n   In outline the steps are:\n   o  check that the Payment\
    \ Request or Delivery Request has been sent\n      to the correct Organisation\n\
    \   o  check that correct IOTP components are present in the request, and\n  \
    \ o  check that the payment or delivery is authorised\n   For clarity and brevity\
    \ the following terms or phrases are used in\n   this section:\n   o  a \"Request\
    \ Block\" is used to refer to either a Payment Request\n      Block (see section\
    \ 8.7) or a Delivery Request Block (see section\n      8.10) unless specified\
    \ to the contrary\n   o  a \"Response Block\" is used to refer to either a Payment\
    \ Response\n      Block (see section 8.9) or a Delivery Response Block (see section\n\
    \      8.11)\n   o  an \"Action\" is used to refer to an action which occurs on\
    \ receipt\n      of a Request Block. Actions can be either a Payment or a Delivery\n\
    \   o  an \"Action Organisation\", is used to refer to the Payment Handler\n \
    \     or Delivery Handler that carries out an Action\n   o  a \"Signer of an Action\"\
    , is used to refer to the Organisations\n      that sign data about an Action\
    \ to authorise the Action, either in\n      whole or in part\n   o  a \"Verifier\
    \ of an Action\", is used to refer to the Organisations\n      that verify data\
    \ to determine if they are authorised to carry out\n      the Action\n   o  an\
    \ ActionOrgRef attribute contains Element References which can be\n      used\
    \ to identify the \"Action Organisation\" that should carry out\n      an Action\n"
- title: 6.3.1 Check Request Block sent Correct Organisation
  contents:
  - "6.3.1 Check Request Block sent Correct Organisation\n   Checking the Request\
    \ Block was sent to the correct Organisation\n   varies depending on whether the\
    \ request refers to a Payment or a\n   Delivery.\n"
- title: 6.3.1.1 Payment
  contents:
  - "6.3.1.1 Payment\n   In outline a Payment Handler checks if it can accept or make\
    \ a\n   payment by identifying the Payment Component in the Payment Request\n\
    \   Block it has received, then using the ID of the Payment Component to\n   track\
    \ through the Brand List and Brand Selection Components to\n   identify the Organisation\
    \ selected by the Consumer and then checking\n   that this Organisation is itself.\n\
    \   The way data is accessed to do this is illustrated in the figure\n   below.\n\
    \   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n    \
    \                                                 Start\n                    \
    \                                  |\n                                       \
    \               v\n   Brand List<--------------------------+-----------Payment\n\
    \   Component         BrandListRef       |          Component\n    |         \
    \                          |\n    |-Brand<--------------------------  |\n    |\
    \ Element        BrandRef         | |\n    |  |                          Brand\
    \ Selection\n    |  |Protocol                     Component\n    |  | AmountRefs\
    \                   | |\n    |  v                  Protocol    | |\n    |-Protocol\
    \ Amount<----------------  |\n    | Element----------  AmountRef      |\n    |\
    \  |               |                |\n    |  |Currency       |Pay           \
    \  |\n    |  | AmountRefs    |Protocol        |\n    |  v               |Ref \
    \            |\n    |-Currency Amount  |                |\n    | Element<---------|----------------\n\
    \    |                  |\n     -PayProtocol<-----\n      Element---------------------->Organisation\n\
    \                     Action         Component\n                     OrgRef  \
    \        |\n                                      -Trading Role\n            \
    \                            Element\n                                     (Payment\
    \ Handler)\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \      Figure 12 Checking a Payment Handler can carry out a Payment\n   The following\
    \ describes the steps involved and the checks which need\n   to be made:\n   o\
    \  Identify the Payment Component (see section 7.9) in the Payment\n      Request\
    \ Block that was received.\n   o  Identify the Brand List and Brand Selection\
    \ Components for the\n      Payment Component. This involves:\n      -  identifying\
    \ the Brand List Component (see section 7.7) where\n         the value of its\
    \ ID attribute matches the BrandListRef\n         attribute of the Payment Component.\
    \ If no or more than one\n         Brand List Component is found there is an error.\n\
    \      -  identifying the Brand Selection Component (see section 7.8)\n      \
    \   where the value of its BrandListRef attribute matches the\n         BrandListRef\
    \ of the Payment Component. If no or more than one\n         matching Brand Selection\
    \ Component is found there is an error.\n   o  Identify the Brand, Protocol Amount,\
    \ Pay Protocol and Currency\n      Amount elements within the Brand List that\
    \ have been selected by\n      the Consumer as follows:\n      -  the Brand Element\
    \ (see section 7.7.1) selected is the element\n         where the value of its\
    \ Id attribute matches the value of the\n         BrandRef attribute in the Brand\
    \ Selection. If no or more than\n         one matching Brand Element is found\
    \ then there is an error.\n      -  the Protocol Amount Element (see section 7.7.3)\
    \ selected is the\n         element where the value of its Id attribute matches\
    \ the value\n         of the ProtocolAmountRef attribute in the Brand Selection\n\
    \         Component. If no or more than one matching Protocol Amount\n       \
    \  Element is found there is an error\n      -  the Pay Protocol Element (see\
    \ section 7.7.5) selected is the\n         element where the value of its Id attribute\
    \ matches the value\n         of the PayProtocolRef attribute in the identified\
    \ Protocol\n         Amount Element.  If no or more than one matching Pay Protocol\n\
    \         Element is found there is an error\n      -  the Currency Amount Element\
    \ (see section 7.7.4) selected is the\n         element where the value of its\
    \ Id attribute matches the value\n         of the CurrencyAmountRef attribute\
    \ in the Brand Selection\n         Component. If no or more than one matching\
    \ Currency Amount\n         element is found there is an error\n   o  Check the\
    \ consistency of the references in the Brand List and\n      Brand Selection Components:\n\
    \      -  check that an Element Reference exists in the\n         ProtocolAmountRefs\
    \ attribute of the identified Brand Element\n         that matches the Id attribute\
    \ of the identified Protocol Amount\n         Element. If no or more than one\
    \ matching Element Reference can\n         be found there is an error\n      -\
    \  check that the CurrencyAmountRefs attribute of the identified\n         Protocol\
    \ Amount element contains an element reference that\n         matches the Id attribute\
    \ of the identified Currency Amount\n         element. If no or more than one\
    \ matching Element Reference is\n         found there is an error.\n      -  check\
    \ the consistency of the elements in the Brand List.\n         Specifically, the\
    \ selected Brand, Protocol Amount, Pay Protocol\n         and Currency Amount\
    \ Elements are all child elements of the\n         identified Brand List Component.\
    \ If they are not there is an\n         error.\n   o  Check that the Payment Handler\
    \ that received the Payment Request\n      Block is the Payment Handler selected\
    \ by the Consumer. This\n      involves:\n      -  identifying the Organisation\
    \ Component for the Payment Handler.\n         This is the Organisation Component\
    \ where its ID attribute\n         matches the ActionOrgRef attribute in the identified\
    \ Pay\n         Protocol Element. If no or more than one matching Organisation\n\
    \         Component is found there is an error\n      -  checking the Organisation\
    \ Component has a Trading Role Element\n         with a Role attribute of PaymentHandler.\
    \ If not there is an\n         error\n      -  finally, if the identified Organisation\
    \ Component is not the\n         same as the Organisation that received the Payment\
    \ Request\n         Block, then there is an error.\n"
- title: 6.3.1.2 Delivery
  contents:
  - "6.3.1.2 Delivery\n   The way data is accessed by a Delivery Handler in order\
    \ to check that\n   it may carry out a delivery is illustrated in the figure below.\n\
    \   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n    \
    \                        Start\n                              |\n            \
    \                  v\n                           Delivery\n                  \
    \         Component\n                              |\n                       \
    \       |ActionOrgRef\n                              |\n                     \
    \         v\n                           Organisation\n                       \
    \    Component\n                           |\n                            -Trading\
    \ Role\n                              Element\n                           (Delivery\
    \ Handler)\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \         Figure 13 Checking a Delivery Handler can carry out a Delivery\n   The\
    \ steps involved are as follows:\n   o  Identify the Delivery Component in the\
    \ Delivery Request Block. If\n      there is no or more than one matching Delivery\
    \ Component there is\n      an error\n   o  Use the ActionOrgRef attribute of\
    \ the Delivery Component to\n      identify the Organisation Component of the\
    \ Delivery Handler. If\n      there is no or more than one matching Organisation\
    \ Component there\n      is an error\n   o  If the Organisation Component for\
    \ the Delivery Handler does not\n      have a Trading Role Element with a Role\
    \ attribute of\n      DeliveryHandler there is an error\n   o  Finally, if the\
    \ Organisation that received the Delivery Request\n      Block does not identify\
    \ the Organisation Component for the\n      Delivery Handler as itself, then there\
    \ is an error.\n"
- title: 6.3.2 Check Correct Components present in Request Block
  contents:
  - "6.3.2 Check Correct Components present in Request Block\n   Check that the correct\
    \ components are present in the Payment Request\n   Block (see section 8.7) or\
    \ in the Delivery Request Block (see section\n   8.10).\n   If components are\
    \ missing, there is an error.\n"
- title: 6.3.3 Check an Action is Authorised
  contents:
  - "6.3.3 Check an Action is Authorised\n   The previous steps identified the Action\
    \ Organisation and that all\n   the necessary components are present. This step\
    \ checks that the\n   Action Organisation is authorised to carry out the Action.\n\
    \   In outline the Action Organisation will identifies the Merchant,\n   checks\
    \ that it has a pre-existing agreement with the Merchant that\n   allows it carry\
    \ out the Action and that any constraints implied by\n   that agreement are being\
    \ followed, then, if signatures are required,\n   it checks that they sign the\
    \ correct data.\n   The steps involved are as follows:\n   o  Identify the Merchant.\
    \ This is the Organisation Component with a\n      Trading Role Element which\
    \ has a Role attribute with a value of\n      Merchant. If no or more than one\
    \ Trading Role Element is found,\n      there is an error\n   o  Check the Action\
    \ Organisation's agreements with the Merchant\n      allows the Action to be carried\
    \ out. To do this the Action\n      Organisation must check that:\n      -  the\
    \ Merchant is known and a pre-existing agreement exists for\n         the Action\
    \ Organisation to be their agent for the payment or\n         delivery\n     \
    \ -  they are allowed to take part in the type of IOTP transaction\n         that\
    \ is occurring. For example a Payment Handler may have\n         agreed to accept\
    \ payments as part of a Baseline Purchase, but\n         not make payments as\
    \ part of a Baseline Refund\n      -  any constraints in their agreement with\
    \ the Merchant are being\n         followed, for example, whether or not an Offer\
    \ Response\n         signature is required\n   o  Check the signatures are correct.\
    \ If signatures are required then\n      they need to be checked. This involves:\n\
    \      -  Identifying the correct signatures to check. This involves the\n   \
    \      Action Organisation identifying the Signature Components that\n       \
    \  contain references to the Action Organisation (see 6.3.1).\n         Depending\
    \ on the IOTP Transaction being carried out (see\n         section 9) either one\
    \ or two signatures may be identified\n      -  checking that the Signature Components\
    \ are correct. This\n         involves checking that Digest elements exist within\
    \ the\n         Manifest Element that refer to the necessary Trading Components\n\
    \         (see section 6.3.3.1).\n"
- title: 6.3.3.1 Check the Signatures Digests are correct
  contents:
  - "6.3.3.1 Check the Signatures Digests are correct\n   All Signature Components\
    \ contained within IOTP Messages must include\n   Digest elements that refer to:\n\
    \   o  the Transaction Id Component (see section 3.3.1) of the IOTP\n      message\
    \ that contains the Signature Component. This binds the\n      globally unique\
    \ IotpTransId to other components which make up the\n      IOTP Transaction\n\
    \   o  the Transaction Reference Block (see section 3.3) of the first\n      IOTP\
    \ Message that contained the signature. This binds the\n      IotpTransId with\
    \ information about the IOTP Message contained\n      inside the Message Id Component\
    \ (see section 3.3.2).\n   Check that each Signature Component contains Digest\
    \ elements that\n   refer to the correct data required.\n   The Digest elements\
    \ that need to be present depend on the Trading\n   Role of the Organisation which\
    \ generated (signed) the signature:\n   o  if the signer of the signature is a\
    \ Merchant then:\n      -  Digest elements must be present for all the components\
    \ in the\n         Request Block apart from the Brand Selection Component which\
    \ is\n         optional\n   o  if the signer of the signature is a Payment Handler\
    \ then Digest\n      elements must be present for:\n      -  the Signature Component\
    \ signed by the Merchant, and optionally\n      -  one or more Signature Components\
    \ signed by the previous Payment\n         Handler(s) in the Transaction.\n"
- title: 7. Trading Components
  contents:
  - "7. Trading Components\n   This section describes the Trading Components used\
    \ within IOTP.\n   Trading Components are the child XML elements which occur immediately\n\
    \   below a Trading Block as illustrated in the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \             IOTP MESSAGE  <----------- IOTP Message - an XML Document\n    \
    \          |                         which is transported between the\n      \
    \        |                         Trading Roles\n              |-Trans Ref Block\
    \ <-----  Trans Ref Block - contains\n              |  |                     \
    \ information which describes the\n              |  |                      IOTP\
    \ Transaction and the IOTP\n                                        Message.\n\
    \    --------> |  |-Trans Id Comp. <---  Transaction Id Component -\n   |    \
    \      |  |                      uniquely identifies the IOTP\n   |          |\
    \  |                      Transaction. The Trans Id\n   |          |  |      \
    \                Components are the same across\n   |          |  |          \
    \            all IOTP messages that comprise\n   |          |  |             \
    \         a single IOTP transaction.\n   |          |  |-Msg Id Comp. <----- \
    \ Message Id Component -\n   |          |                         identifies and\
    \ describes an IOTP\n   |          |                         Message within an\
    \ IOTP\n   |          |                         Transaction\n   |          |-Signature\
    \ Block <-----  Signature Block (optional) -\n   |          |  |             \
    \         contains one or more Signature\n   |          |  |                 \
    \     Components and their associated\n   |          |  |                    \
    \  Certificates\n   |     ---> |  |-Signature Comp. <--  Signature Component -\
    \ contains\n   |    |     |  |                      digital signatures. Signatures\n\
    \   |    |     |  |                      may sign digests of the Trans Ref\n \
    \  |    |     |  |                      Block and any Trading Component\n   |\
    \    |     |  |                      in any IOTP Message in the same\n   |   \
    \ |     |  |                      IOTP Transaction.\n   |    |     |  |-Certificate\
    \ Comp. <- Certificate Component. Used to\n   |    |     |                   \
    \      check the signature.\n     Trading  |-Trading Block <-------- Trading Block\
    \ - an XML Element\n   Components |  |-Trading Comp.        within an IOTP Message\
    \ that\n   |    |     |  |-Trading Comp.        contains a predefined set of\n\
    \   |     ---> |  |-Trading Comp.        Trading Components\n   |          | \
    \ |-Trading Comp.\n   |          |  |-Trading Comp. <----- Trading Components\
    \ - XML\n   |          |                         Elements within a Trading Block\n\
    \   |          |-Trading Block           that contain a predefined set of\n  \
    \  --------> |  |-Trading Comp.        XML elements and attributes\n         \
    \     |  |-Trading Comp.        containing information required\n            \
    \  |  |-Trading Comp.        to support a Trading Exchange\n              |  |-Trading\
    \ Comp.\n              |  |-Trading Comp.\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                          Figure 14 Trading Components\n   The Trading Components\
    \ described in this section are listed below in\n   approximately the sequence\
    \ they are likely to be used:\n   o  Protocol Options Component\n   o  Authentication\
    \ Request Component\n   o  Authentication Response Component\n   o  Trading Role\
    \ Information Request Component\n   o  Order Component\n   o  Organisation Component\n\
    \   o  Brand List Component\n   o  Brand Selection Component\n   o  Payment Component\n\
    \   o  Payment Scheme Component\n   o  Payment Receipt Component\n   o  Delivery\
    \ Component\n   o  Delivery Data Component\n   o  Delivery Note Component\n  \
    \ o  Signature Component\n   o  Certificate Component\n   o  Error Component\n\
    \   Note that the following components are listed in other sections of\n   this\
    \ specification:\n   o  Transaction Id Component (see section 3.3.1)\n   o  Message\
    \ Id Component (see section 3.3.2)\n"
- title: 7.1 Protocol Options Component
  contents:
  - "7.1 Protocol Options Component\n   Protocol options are options which apply to\
    \ the IOTP Transaction as a\n   whole. Essentially it provides a short description\
    \ of the entire\n   transaction and the net location which the Consumer role should\n\
    \   branch to if the IOTP Transaction is successful.\n   The definition of a Protocol\
    \ Options Component is as follows.\n   <!ELEMENT ProtocolOptions EMPTY >\n   <!ATTLIST\
    \ ProtocolOptions\n    ID                 ID      #REQUIRED\n    xml:lang    \
    \       NMTOKEN #REQUIRED\n    ShortDesc          CDATA   #REQUIRED\n    SenderNetLocn\
    \      CDATA   #IMPLIED\n    SecureSenderNetLocn CDATA  #IMPLIED\n    SuccessNetLocn\
    \     CDATA   #REQUIRED >\n   Attributes:\n   ID                   An identifier\
    \ which uniquely identifies the\n                        Protocol Options Component\
    \ within the IOTP\n                        Transaction.\n   Xml:lang         \
    \    Defines the language used by attributes or child\n                      \
    \  elements within this component, unless\n                        overridden\
    \ by an xml:lang attribute on a child\n                        element. See section\
    \ 3.8 Identifying Languages.\n   ShortDesc            This contains a short description\
    \ of the IOTP\n                        Transaction in the language defined by\
    \ xml:lang.\n                        Its purpose is to provide an explanation\
    \ of what\n                        type of IOTP Transaction is being conducted\
    \ by\n                        the parties involved.\n                        It\
    \ is used to facilitate selecting an individual\n                        transaction\
    \ from a list of similar transactions,\n                        for example from\
    \ a database of IOTP transactions\n                        which has been stored\
    \ by a Consumer, Merchant,\n                        etc.\n   SenderNetLocn   \
    \     This contains the non secured net location of\n                        the\
    \ sender of the TPO Block in which the\n                        Protocol Options\
    \ Component is contained.\n                        It is the net location to which\
    \ the recipient of\n                        the TPO block should send a TPO Selection\
    \ Block\n                        if required.\n                        The content\
    \ of this attribute is dependent on\n                        the Transport Mechanism\
    \ see the Transport\n                        Mechanism Supplement.\n   SecureSenderNetLocn\
    \  This contains the secured net location of the\n                        sender\
    \ of the TPO Block in which the Protocol\n                        Options Component\
    \ is contained.\n                        The content of this attribute is dependent\
    \ on\n                        the Transport Mechanism see the Transport\n    \
    \                    Mechanism Supplement.\n   SuccessNetLocn       This contains\
    \ the net location that should be\n                        displayed after the\
    \ IOTP Transaction has\n                        successfully completed.\n    \
    \                    The content of this attribute is dependent on\n         \
    \               the Transport Mechanism see the Transport\n                  \
    \      Mechanism Supplement.\n   Either SenderNetLocn, SecureSenderNetLocn or\
    \ both must be present.\n"
- title: 7.2 Authentication Request Component
  contents:
  - "7.2 Authentication Request Component\n   This Trading Component contains parameter\
    \ data that is used in an\n   Authentication of one Trading Role by another. Its\
    \ definition is as\n   follows.\n   <!ELEMENT AuthReq (Algorithm, PackagedContent*)>\n\
    \   <!ATTLIST AuthReq\n    ID                 ID      #REQUIRED\n    AuthenticationId\
    \   CDATA   #REQUIRED\n    ContentSoftwareId  CDATA   #IMPLIED >\n   If required\
    \ the Algorithm may use the challenge data, contained in\n   the Packaged Content\
    \ elements within the Authentication Request\n   Component in its calculation.\
    \ The format of the Packaged Contents are\n   Algorithm dependent.\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the\n         \
    \             Authentication Request Component within the IOTP\n             \
    \         Transaction.\n   AuthenticationId   An identifier specified by the Authenticator\n\
    \                      which, if returned by the Organisation that\n         \
    \             receives the Authentication Request, will enable\n             \
    \         the Authenticator to identify which Authentication\n               \
    \       is being referred to.\n   ContentSoftwareId  See section 14.Glossary\n\
    \   Content:\n   PackagedContent    This contains the challenge data as one or\
    \ more\n                      Packaged Content (see section 3.7) that is to be\n\
    \                      responded to using the Algorithm defined by the\n     \
    \                 Algorithm element.\n   Algorithm          This contains information\
    \ which describes the\n                      Algorithm (see 7.19 Signature Components)\
    \ that\n                      must be used to generate the Authentication\n  \
    \                    Response.\n                      The Algorithms that may\
    \ be used are identified by\n                      the Name attribute of the Algorithm\
    \ element. For\n                      valid values see section 12. IANA Considerations.\n"
- title: 7.3 Authentication Response Component
  contents:
  - "7.3 Authentication Response Component\n   The Authentication Response Component\
    \ contains the results of an\n   authentication request.  It uses the Algorithm\
    \ contained in the\n   Authentication Request Component (see section 7.2) selected\
    \ from the\n   Authentication Request Block (see section 8.4).\n   Depending on\
    \ the Algorithm selected, the results of applying the\n   algorithm will either\
    \ be contained in a Signature Component that\n   signs both the Authentication\
    \ Response and potentially other data, or\n   in the Packaged Content elements\
    \ within the Authentication Response\n   Component.  Its definition is as follows.\n\
    \   <!ELEMENT AuthResp (PackagedContent*) >\n   <!ATTLIST AuthResp\n    ID   \
    \              ID      #REQUIRED\n    AuthenticationId   CDATA   #REQUIRED\n \
    \   SelectedAlgorithmRef NMTOKEN #REQUIRED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   Attributes:\n   ID                     An identifier which uniquely identifies\
    \ the\n                          Authentication Response Component within the\n\
    \                          IOTP Transaction.\n   AuthenticationId       The Authentication\
    \ identifier specified by the\n                          Authenticator that was\
    \ included in the\n                          Authentication Request Component(see\
    \ section\n                          7.2). This will enable the Authenticator\
    \ to\n                          identify the Authentication that is being\n  \
    \                        referred to.\n   SelectedAlgorithmRef   An Element Reference\
    \ that identifies the\n                          Algorithm element used to generate\
    \ the\n                          Authentication Response.\n   ContentSoftwareId\
    \      See section 14.Glossary.\n   Content:\n   PackagedContent    This may contain\
    \ the response generated as a\n                      result of applying the Algorithm\
    \ selected from the\n                      Authentication Request Component see\
    \ section 7.2.\n                      For example, for a payment specific scheme,\
    \ it may\n                      contain scheme-specific data. Refer to the scheme-\n\
    \                      specific supplemental documentation for\n             \
    \         definitions of its content.\n"
- title: 7.4 Trading Role Information Request Component
  contents:
  - "7.4 Trading Role Information Request Component\n   This Trading Component contains\
    \ a list of Trading Roles (see section\n   2.1) about which information is being\
    \ requested. The result of a\n   Trading Role Request is a set of Organisation\
    \ Components (see section\n   7.6) that describe each of the Trading Roles requested.\n\
    \   Example usage includes:\n   o  a Merchant requesting that a Consumer provides\
    \ Organisation\n      Components for the Consumer and DelivTo Trading Roles\n\
    \   o  a Consumer requesting from a Merchant, information about the\n      Payment\
    \ Handlers and Delivery Handlers that the Merchant uses.\n   Its definition is\
    \ as follows.\n   <!ELEMENT TradingRoleInfoReq EMPTY>\n   <!ATTLIST TradingRoleInfoReq\n\
    \    ID                 ID      #REQUIRED\n    TradingRoleList    NMTOKENS #REQUIRED\
    \ >\n   Attributes:\n   ID                 An identifier which uniquely identifies\
    \ the\n                      Trading Role Information Request Component within\n\
    \                      the IOTP Transaction.\n   TradingRoleList    Contains a\
    \ list of one or more Trading Roles (see\n                      the TradingRole\
    \ attribute of the Trading Role\n                      Element - section 7.6.2)\
    \ for which information is\n                      being requested.\n"
- title: 7.5 Order Component
  contents:
  - "7.5 Order Component\n   An Order Component contains information about an order.\
    \ Its\n   definition is as follows.\n   <!ELEMENT Order (PackagedContent*) >\n\
    \   <!ATTLIST Order\n    ID                 ID      #REQUIRED\n    xml:lang  \
    \         NMTOKEN #REQUIRED\n    OrderIdentifier    CDATA   #REQUIRED\n    ShortDesc\
    \          CDATA   #REQUIRED\n    OkFrom             CDATA   #REQUIRED\n    OkTo\
    \               CDATA   #REQUIRED\n    ApplicableLaw      CDATA   #REQUIRED\n\
    \    ContentSoftwareId  CDATA   #IMPLIED >\n   Attributes:\n   ID            \
    \     An identifier which uniquely identifies the Order\n                    \
    \  Component within the IOTP Transaction.\n   xml:lang           Defines the language\
    \ used by attributes or child\n                      elements within this component,\
    \ unless overridden\n                      by an xml:lang attribute on a child\
    \ element. See\n                      section 3.8 Identifying Languages.\n   OrderIdentifier\
    \    This is a code, reference number or other\n                      identifier\
    \ which the creator of the Order may use\n                      to identify the\
    \ order. It must be unique within an\n                      IOTP Transaction.\
    \ If it is used in this way, then\n                      it may remove the need\
    \ to specify any content for\n                      the Order element as the reference\
    \ can be used to\n                      look up the necessary information in a\
    \ database.\n   ShortDesc          A short description of the order in the language\n\
    \                      defined by xml:lang. It is used to facilitate\n       \
    \               selecting an individual order from a list of\n               \
    \       orders, for example from a database of orders\n                      which\
    \ has been stored by a Consumer, Merchant,\n                      etc.\n   OkFrom\
    \             The date and time in [UTC] format after which the\n            \
    \          offer made by the Merchant lapses.\n   OkTo               The date\
    \ and time in [UTC] format before which a\n                      Value Acquirer\
    \ may accept the offer made by the\n                      Merchant is not valid.\n\
    \   ApplicableLaw      A phrase in the language defined by xml:lang which\n  \
    \                    describes the state or country of jurisdiction\n        \
    \              which will apply in resolving problems or\n                   \
    \   disputes.\n   ContentSoftwareId  See section 14.Glossary.\n   Content:\n \
    \  PackagedContent    An optional description of the order information\n     \
    \                 as one or more Packaged Contents (see section\n            \
    \          3.7).\n"
- title: 7.5.1 Order Description Content
  contents:
  - "7.5.1 Order Description Content\n   The Packaged Content element will normally\
    \ be required, however it\n   may be omitted where sufficient information about\
    \ the purchase can be\n   provided in the ShortDesc attribute. If the full Order\
    \ Description\n   requires it several Packaged Content elements may be used.\n\
    \   Although the amount and currency are likely to appear in the Packaged\n  \
    \ Content of the Order Description it is the amount and currency\n   contained\
    \ in the payment related trading components (Brand List,\n   Brand Selection and\
    \ Payment) that is authoritative. This means it is\n   important that the amount\
    \ actually being paid (as contained in the\n   payment related trading components)\
    \ is prominently displayed to the\n   Consumer.\n   For interoperability, implementations\
    \ must support Plain Text, HTML\n   and XML as a minimum so that it can be easily\
    \ displayed.\n"
- title: 7.5.2 OkFrom and OkTo Timestamps
  contents:
  - "7.5.2 OkFrom and OkTo Timestamps\n   Note that:\n   o  the OkFrom date may be\
    \ later than the OkFrom date on the Payment\n      Component (see section 7.9)\
    \ associated with this order, and\n   o  similarly, the OkTo date may be earlier\
    \ that the OkTo date on the\n      Payment Component (see section 7.9).\n   Note:\
    \ Disclaimer. The following information provided in this note\n   does not represent\
    \ formal advice of any of the authors of this\n   specification. Readers of this\
    \ specification must form their own\n   views and seek their own legal counsel\
    \ on the usefulness and\n   applicability of this information.\n   The merchant\
    \ in the context of Internet commerce with anonymous\n   consumers initially frames\
    \ the terms of the offer on the web page,\n   and in order to obtain the goods\
    \ or services, the consumer must\n   accept them.\n   If there is to be a time-limited\
    \ offer, it is recommended that\n   merchants communicate this to the consumer\
    \ and state in the order\n   description in a manner which is clear to the consumer\
    \ that:\n   o  the offer is time limited\n   o  the OkFrom and OkTo timestamps\
    \ specify the validity of the offer\n   o  the clock, e.g., the merchant's clock,\
    \ that will be used to\n      determine the validity of the offer\n   Also note\
    \ that although the OkFrom and OkTo dates are likely to\n   appear in the Packaged\
    \ Content of the Order Description it is the\n   dates contained in the Order\
    \ Component that is authoritative. This\n   means it is important that the OkFrom\
    \ and OkTo dates actually being\n   used is prominently displayed to the Consumer.\n"
- title: 7.6 Organisation Component
  contents:
  - "7.6 Organisation Component\n   The Organisation Component provides information\
    \ about an individual\n   or an Organisation. This can be used for a variety of\
    \ purposes. For\n   example:\n   o to describe the merchant who is selling the\
    \ goods,\n   o to identify who made a purchase,\n   o to identify who will take\
    \ delivery of goods,\n   o to provide a customer care contact,\n   o to describe\
    \ who will be the Payment Handler.\n   Note that the Organisation Components which\
    \ must be present in an\n   IOTP Message are dependent on the particular transaction\
    \ being\n   carried out.  Refer to section 9. Internet Open Trading Protocol\n\
    \   Transactions, for more details.\n   Its definition is as follows.\n   <!ELEMENT\
    \ Org (TradingRole+, ContactInfo?,\n        PersonName?, PostalAddress?)>\n  \
    \ <!ATTLIST Org\n    ID                 ID      #REQUIRED\n    xml:lang      \
    \     NMTOKEN #REQUIRED\n    OrgId              CDATA   #REQUIRED\n    LegalName\
    \          CDATA   #IMPLIED\n    ShortDesc          CDATA   #IMPLIED\n    LogoNetLocn\
    \        CDATA   #IMPLIED >\n   Attributes:\n   ID                 An identifier\
    \ which uniquely identifies the\n                      Organisation Component\
    \ within the IOTP\n                      Transaction.\n   xml:lang           Defines\
    \ the language used by attributes or child\n                      elements within\
    \ this component, unless overridden\n                      by an xml:lang attribute\
    \ on a child element. See\n                      section 3.8 Identifying Languages.\n\
    \   OrgId              A code which identifies the Organisation described\n  \
    \                    by the Organisation Component. See 7.6.1\n              \
    \        Organisation IDs, below.\n   LegalName          For Organisations which\
    \ are companies this is\n                      their legal name in the language\
    \ defined by\n                      xml:lang. It is required for Organisations\
    \ who\n                      have a Trading Role other than Consumer or\n    \
    \                  DelivTo.\n   ShortDesc          A short description of the\
    \ Organisation in the\n                      language defined by xml:lang. It\
    \ is typically the\n                      name by which the Organisation is commonly\
    \ known.\n                      For example, if the legal name was \"Blue Meadows\n\
    \                      Financial Services Inc.\". Then its short name\n      \
    \                would likely be \"Blue Meadows\".\n                      It is\
    \ used to facilitate selecting an individual\n                      Organisation\
    \ from a list of Organisations, for\n                      example from a database\
    \ of Organisations involved\n                      in IOTP Transactions which\
    \ has been stored by a\n                      consumer.\n   LogoNetLocn      \
    \  The net location which can be used to download the\n                      logo\
    \ for the Organisation.\n                      See section 10 Retrieving Logos.\n\
    \                      The content of this attribute must conform to\n       \
    \               [RFC1738].\n   Content:\n   TradingRole        See 7.6.2 Trading\
    \ Role Element below.\n   ContactInfo        See 7.6.3 Contact Information Element\
    \ below.\n   PersonName         See 7.6.4 Person Name below.\n   PostalAddress\
    \      See 7.6.5 Postal Address below.\n"
- title: 7.6.1 Organisation IDs
  contents:
  - "7.6.1 Organisation IDs\n   Organisation IDs are used by one IOTP Trading Role\
    \ to identify\n   another.  In order to avoid confusion, this means that these\
    \ IDs must\n   be globally unique.\n   In principle this is achieved in the following\
    \ way:\n   o  the Organisation Id for all trading roles, apart from the Consumer\n\
    \      Trading Role, uses a domain name as their globally unique\n      identifier,\n\
    \   o  the Organisation Id for a Consumer Trading Role is allocated by\n     \
    \ one of the other Trading Roles in an IOTP Transaction and is made\n      unique\
    \ by concatenating it with that other roles' Organisation Id,\n   o  once a Consumer\
    \ is allocated an Organisation Id within an IOTP\n      Transaction the same Organisation\
    \ Id is used by all the other\n      trading roles in that IOTP transaction to\
    \ identify that Consumer.\n   Specifically, the content of the Organisation ID\
    \ is defined as\n   follows:\n   OrgId ::= NonConsumerOrgId | ConsumerOrgId\n\
    \   NonConsumerOrgId ::= DomainName\n   ConsumerOrgId ::= ConsumerOrgIdPrefix\
    \ (namechar)+ \"/\" NonConsumerOrgId\n   ConsumerOrgIdPrefix ::= \"Consumer:\"\
    \n   ConsumerOrgId      The Organisation ID for a Consumer consists of:\n    \
    \                   o a standard prefix to identify that the\n               \
    \          Organisation Id is for a consumer, followed by\n                  \
    \     o one or more characters which conform to the\n                        \
    \ definition of an XML \"namechar\". See [XML]\n                         specifications,\
    \ followed by\n                       o the NonConsumerOrgId for the Organisation\n\
    \                         which allocated the ConsumerOrgId. It is\n         \
    \                normally the Merchant role.\n                      Use of upper\
    \ and lower case is not significant.\n   NonConsumerOrgId   If the Role is not\
    \ Consumer then this contains the\n                      Canonical Name for the\
    \ non-consumer Organisation\n                      being described by the Organisation\
    \ Component. See\n                      [DNS] optionally followed by additional\n\
    \                      characters, if required, to make the\n                \
    \      NonConsumerOrgId unique.\n                      Note that a NonConsumerOrgId\
    \ may not start with\n                      the ConsumerOrgIdPrefix.\n       \
    \               Use of upper and lower case is not significant.\n   Examples of\
    \ Organisation Ids follow:\n   o  newjerseybooks.com - a merchant Organisation\
    \ id\n   o  westernbank.co.uk - a Payment Handler Organisation id\n   o  consumer:1000247ABH/newjerseybooks.com\
    \ - a consumer Organisation\n      id allocated by a merchant\n"
- title: 7.6.2 Trading Role Element
  contents:
  - "7.6.2 Trading Role Element\n   This identifies the Trading Role of an individual\
    \ or Organisation in\n   the IOTP Transaction. Note, an Organisation may have\
    \ more than one\n   Trading Role and several roles may be present in one Organisation\n\
    \   element. Its definition is as follows:\n   <!ELEMENT TradingRole EMPTY >\n\
    \   <!ATTLIST TradingRole\n    ID                 ID      #REQUIRED\n    TradingRole\
    \        NMTOKEN #REQUIRED\n    IotpMsgIdPrefix    NMTOKEN #REQUIRED\n    CancelNetLocn\
    \      CDATA   #IMPLIED\n    ErrorNetLocn       CDATA   #IMPLIED\n    ErrorLogNetLocn\
    \    CDATA   #IMPLIED >\n   Attributes:\n   ID                 An identifier which\
    \ uniquely identifies the\n                      Trading Role Element within the\
    \ IOTP Transaction.\n   TradingRole        The trading role of the Organisation.\
    \ Valid values\n                      are:\n                       o Consumer.\
    \ The person or Organisation that is\n                         acting in the role\
    \ of a consumer in the IOTP\n                         Transaction.\n         \
    \              o Merchant. The person or Organisation that is\n              \
    \           acting in the role of merchant in the IOTP\n                     \
    \    Transaction.\n                       o PaymentHandler. The financial institution\
    \ or\n                         other Organisation which is a Payment Handler\n\
    \                         for the IOTP Transaction\n                       o DeliveryHandler.\
    \ The person or Organisation\n                         that is the delivering\
    \ the goods or services\n                         for the IOTP Transaction\n \
    \                      o DelivTo. The person or Organisation that is\n       \
    \                  receiving the delivery of goods or services in\n          \
    \               the IOTP Transaction\n                       o CustCare. The Organisation\
    \ and/or individual\n                         who will provide customer care for\
    \ an IOTP\n                         Transaction.\n                      Values\
    \ of TradingRole are controlled under the\n                      procedures defined\
    \ in section 12 IANA\n                      Considerations which also allows user\
    \ defined\n                      values to be defined.\n   IotpMsgIdPrefix   \
    \ Contains the prefix which must be used for all\n                      IOTP Messages\
    \ sent by the Trading Role in this\n                      IOTP Transaction. The\
    \ values to be used are\n                      defined in 3.4.1 IOTP Message ID\
    \ Attribute\n                      Definition.\n   CancelNetLocn      This contains\
    \ the net location of where the\n                      Consumer should go to if\
    \ the Consumer cancels the\n                      transaction for some reason.\
    \ It can be used by the\n                      Trading Role to provide a response\
    \ which is more\n                      tailored to the circumstances of a particular\n\
    \                      transaction.\n                      This attribute:\n \
    \                      o must not be present when TradingRole is set to\n    \
    \                     Consumer role or DelivTo,\n                       o must\
    \ be present when TradingRole is set to\n                         Merchant, PaymentHandler\
    \ or DeliveryHandler.\n                      The content of this attribute is\
    \ dependent on the\n                      Transport Mechanism see the Transport\
    \ Mechanism\n                      Supplement.\n   ErrorNetLocn       This contains\
    \ the net location that should be\n                      displayed by the Consumer\
    \ after the Consumer has\n                      either received or generated an\
    \ Error Block\n                      containing an Error Component with the Severity\n\
    \                      attribute set to either:\n                       o HardError,\n\
    \                       o Warning but the Consumer decides to not\n          \
    \               continue with the transaction\n                       o TransientError\
    \ and the transaction has\n                         subsequently timed out.\n\
    \                      See section 7.21.1 Error Processing Guidelines for\n  \
    \                    more details.\n                      This attribute:\n  \
    \                     o must not be present when TradingRole is set to\n     \
    \                    Consumer or DelivTo,\n                       o must be present\
    \ when TradingRole is set to\n                         Merchant, PaymentHandler\
    \ or DeliveryHandler.\n                      The content of this attribute is\
    \ dependent on the\n                      Transport Mechanism see the Transport\
    \ Mechanism\n                      Supplement.\n   ErrorLogNetLocn    Optional.\
    \ This contains the net location that\n                      Consumers should\
    \ send IOTP Messages that contain\n                      Error Blocks with an\
    \ Error Component with the\n                      Severity attribute set to either:\n\
    \                       o HardError,\n                       o Warning but the\
    \ Consumer decides to not\n                         continue with the transaction\n\
    \                       o TransientError and the transaction has\n           \
    \              subsequently timed out.\n                      This attribute:\n\
    \                       o must not be present when TradingRole is set to\n   \
    \                      Consumer role,\n                       o must be present\
    \ when TradingRole is set to\n                         Merchant, PaymentHandler\
    \ or DeliveryHandler.\n                      The content of this attribute is\
    \ dependent on the\n                      Transport Mechanism see the Transport\
    \ Mechanism\n                      Supplement.\n                      The ErrorLogNetLocn\
    \ can be used to send error\n                      messages to the software company\
    \ or some other\n                      Organisation responsible for fixing problems\
    \ in\n                      the software which sent the incoming message. See\n\
    \                      section 7.21.1 Error Processing Guidelines for\n      \
    \                more details.\n"
- title: 7.6.3 Contact Information Element
  contents:
  - "7.6.3 Contact Information Element\n   This contains information which can be\
    \ used to contact an\n   Organisation or an individual. All attributes are optional\
    \ however at\n   least one item of contact information should be present. Its\n\
    \   definition is as follows.\n   <!ELEMENT ContactInfo EMPTY >\n   <!ATTLIST\
    \ ContactInfo\n    xml:lang           NMTOKEN #IMPLIED\n    Tel              \
    \  CDATA   #IMPLIED\n    Fax                CDATA   #IMPLIED\n    Email      \
    \        CDATA   #IMPLIED\n    NetLocn            CDATA   #IMPLIED >\n   Attributes:\n\
    \   xml:lang           Defines the language used by attributes within\n      \
    \                this element. See section 3.8 Identifying\n                 \
    \     Languages.\n   Tel                A telephone number by which the Organisation\
    \ may\n                      be contacted. Note that this is a text field and\n\
    \                      no validation is carried out on it.\n   Fax           \
    \     A fax number by which the Organisation may be\n                      contacted.\
    \ Note that this is a text field and no\n                      validation is carried\
    \ out on it.\n   Email              An email address by which the Organisation\
    \ may be\n                      contacted. Note that this field should conform\
    \ to\n                      the conventions for address specifications\n     \
    \                 contained in [RFC822].\n   NetLocn            A location on\
    \ the Internet by which information\n                      about the Organisation\
    \ may be obtained that can be\n                      displayed using a web browser.\n\
    \                      The content of this attribute must conform to\n       \
    \               [RFC1738].\n"
- title: 7.6.4 Person Name Element
  contents:
  - "7.6.4 Person Name Element\n   This contains the name of an individual person.\
    \ All fields are\n   optional however as a minimum either the GivenName or the\
    \ FamilyName\n   should be present. Its definition is as follows.\n   <!ELEMENT\
    \ PersonName EMPTY >\n   <!ATTLIST PersonName\n    xml:lang           NMTOKEN\
    \ #IMPLIED\n    Title              CDATA   #IMPLIED\n    GivenName          CDATA\
    \   #IMPLIED\n    Initials           CDATA   #IMPLIED\n    FamilyName        \
    \ CDATA   #IMPLIED >\n   Attributes:\n   xml:lang           Defines the language\
    \ used by attributes within\n                      this element. See section 3.8\
    \ Identifying\n                      Languages.\n   Title              A distinctive\
    \ name; personal appellation,\n                      hereditary or not, denoting\
    \ or implying office\n                      (e.g., judge, mayor) or nobility (e.g.,\
    \ duke,\n                      duchess, earl), or used in addressing or referring\n\
    \                      to a person (e.g., Mr, Mrs, Miss)\n   GivenName       \
    \   The primary or main name by which a person is\n                      known\
    \ amongst and identified by their family,\n                      friends and acquaintances.\
    \ Otherwise known as\n                      first name or Christian Name.\n  \
    \ Initials           The first letter of the secondary names (other\n        \
    \              than the Given Name) by which a person is known\n             \
    \         amongst or identified by their family, friends and\n               \
    \       acquaintances.\n   FamilyName         The name by which family of related\
    \ individuals\n                      are known. It is typically the part of an\n\
    \                      individual's name which is passed on by parents to\n  \
    \                    their children.\n"
- title: 7.6.5 Postal Address Element
  contents:
  - "7.6.5 Postal Address Element\n   This contains an address which can be used,\
    \ for example, for the\n   physical delivery of goods, services or letters. Its\
    \ definition is as\n   follows.\n   <!ELEMENT PostalAddress EMPTY >\n   <!ATTLIST\
    \ PostalAddress\n    xml:lang           NMTOKEN #IMPLIED\n    AddressLine1   \
    \    CDATA   #IMPLIED\n    AddressLine2       CDATA   #IMPLIED\n    CityOrTown\
    \         CDATA   #IMPLIED\n    StateOrRegion      CDATA   #IMPLIED\n    PostalCode\
    \         CDATA   #IMPLIED\n    Country            CDATA   #IMPLIED\n    LegalLocation\
    \ (True | False) 'False' >\n   Attributes:\n   xml:lang           Defines the\
    \ language used by attributes within\n                      this element. See\
    \ section 3.8 Identifying\n                      Languages.\n   AddressLine1 \
    \      The first line of a postal address. e.g., \"The\n                     \
    \ Meadows\"\n   AddressLine2       The second line of a postal address. e.g.,\
    \ \"Sandy\n                      Lane\"\n   CityOrTown         The city of town\
    \ of the address. e.g., \"Carpham\"\n   StateOrRegion      The state or region\
    \ within a country where the\n                      city or town is placed. e.g.,\
    \ \"Surrey\"\n   PostalCode        The code known as, for example a post code\
    \ or zip\n                      code, that is typically used by Postal\n     \
    \                 Organisations to organise postal deliveries into\n         \
    \             efficient sequences. e.g., \"KT22 1AA\"\n   Country            The\
    \ country for the address. e.g., \"UK\"\n   LegalLocation      This identifies\
    \ whether the address is the\n                      Registered Address for the\
    \ Organisation. At least\n                      one address for the Organisation\
    \ must have a value\n                      set to True unless the Trading Role\
    \ is either\n                      Consumer or DeliverTo.\n"
- title: 7.7 Brand List Component
  contents:
  - "7.7 Brand List Component\n   Brand List Components are contained within the Trading\
    \ Protocol\n   Options Block (see section 8.1) of the IOTP Transaction. They\n\
    \   contains lists of:\n   o  payment Brands (see also section 11.1 Brand Definitions\
    \ and Brand\n      Selection),\n   o  amounts to be paid in the currencies that\
    \ are accepted or offered\n      by the Merchant,\n   o  the payment protocols\
    \ which can be used to make payments with a\n      Brand, and\n   o  the net locations\
    \ of the Payment Handlers which accept payment for\n      a payment protocol\n\
    \   The definition of a Brand List Component is as follows.\n   <!ELEMENT BrandList\
    \ (Brand+, ProtocolAmount+,\n    CurrencyAmount+, PayProtocol+) >\n   <!ATTLIST\
    \ BrandList\n    ID                 ID      #REQUIRED\n    xml:lang          \
    \ NMTOKEN #REQUIRED\n    ShortDesc          CDATA   #REQUIRED\n    PayDirection\
    \ (Debit | Credit) #REQUIRED >\n   Attributes:\n   ID                 An identifier\
    \ which uniquely identifies the Brand\n                      List Component within\
    \ the IOTP Transaction.\n   xml:lang           Defines the language used by attributes\
    \ or child\n                      elements within this component, unless overridden\n\
    \                      by an xml:lang attribute on a child element. See\n    \
    \                  section 3.8 Identifying Languages.\n   ShortDesc          A\
    \ text description in the language defined by\n                      xml:Lang\
    \ giving details of the purpose of the\n                      Brand List.  This\
    \ information must be displayed to\n                      the receiver of the\
    \ Brand List in order to assist\n                      with making the selection.\
    \ It is of particular\n                      benefit in allowing a Consumer to\
    \ distinguish the\n                      purpose of a Brand List when an IOTP\
    \ Transaction\n                      involves more than one payment.\n   PayDirection\
    \       Indicates the direction in which the payment for\n                   \
    \   which a Brand is being selected is to be made. Its\n                     \
    \ values may be:\n                       o Debit The sender of the Payment Request\
    \ Block\n                         (e.g., the Consumer) to which this Brand List\n\
    \                         relates will make the payment to the Payment\n     \
    \                    Handler, or\n                       o Credit The sender of\
    \ the Payment Request Block\n                         to which this Brand List\
    \ relates will receive a\n                         payment from the Payment Handler.\n\
    \   Content:\n   Brand              This describes a Brand. The sequence of the\
    \ Brand\n                      elements (see section 7.7.1) within the Brand List\n\
    \                      does not indicate any preference. It is\n             \
    \         recommended that software which processes this\n                   \
    \   Brand List presents Brands in a sequence which the\n                     \
    \ receiver of the Brand List prefers.\n   ProtocolAmount     This links a particular\
    \ Brand to:\n                       o the currencies and amounts in CurrencyAmount\n\
    \                         elements that can be used with the Brand, and\n    \
    \                   o the Payment Protocols and Payment Handlers,\n          \
    \               which can be used with those currencies and\n                \
    \         amounts, and a particular Brand\n   CurrencyAmount     This contains\
    \ a currency code and an amount.\n   PayProtocol        This contains information\
    \ about a Payment Protocol\n                      and the Payment Handler which\
    \ may be used with a\n                      particular Brand.\n   The relationships\
    \ between the elements which make up the content of\n   the Brand List is illustrated\
    \ in the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                    Brand List Component\n                      |           \
    \        ProtocolAmountRefs\n                      |-Brand Element-----------------------------\n\
    \                      |  |                                        |\n       \
    \               |   - Protocol Brand Element--------        |\n              \
    \        |                                   |       |\n                     \
    \ |                         ProtocolId|       |\n                      |     \
    \                              |       |\n                      |-Protocol Amount\
    \ Element<----------+-------\n                      |  |                     \
    \ |         |\n                      |  |                      |         |\n \
    \                     |  |CurrencyAmountRefs    |Pay      |\n                \
    \      |  |                      |Protocol |\n                      |  v     \
    \                 |Ref      |\n                      |-Currency Amount Element\
    \ |         |\n                      | Element                 |         |\n \
    \                     |                         |         |\n                \
    \       -PayProtocolElement<------<--------\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                   Figure 15 Brand List Element Relationships\n   Examples of\
    \ complete Brand Lists are contained in section 11.2 Brand\n   List Examples.\n"
- title: 7.7.1 Brand Element
  contents:
  - "7.7.1 Brand Element\n   A Brand Element describes a brand that can be used for\
    \ making a\n   payment.  One or more of these elements is carried in each Brand\
    \ List\n   Component that has the PayDirection attribute set to Debit.  Exactly\n\
    \   one Brand Element may be carried in a Brand List Component that has\n   the\
    \ PayDirection attribute set to Credit.\n   <!ELEMENT Brand (ProtocolBrand*, PackagedContent*)\
    \ >\n   <!ATTLIST Brand\n    ID                 ID      #REQUIRED\n    xml:lang\
    \           NMTOKEN #IMPLIED\n    BrandId            CDATA   #REQUIRED\n    BrandName\
    \          CDATA   #REQUIRED\n    BrandLogoNetLocn   CDATA   #REQUIRED\n    BrandNarrative\
    \     CDATA   #IMPLIED\n    ProtocolAmountRefs IDREFS  #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   Attributes:\n   ID                  Element identifier,\
    \ potentially referenced in a\n                       Brand Selection Component\
    \ contained in a later\n                       Payment Request message and uniquely\
    \ identifies\n                       the Brand element within the IOTP Transaction.\n\
    \   xml:lang            Defines the language used by attributes and\n        \
    \               content of this element. See section 3.8\n                   \
    \    Identifying Languages.\n   BrandId             This contains a unique identifier\
    \ for the brand\n                       (or promotional brand). It is used to\
    \ match\n                       against a list of Payment Instruments which the\n\
    \                       Consumer holds to determine whether or not the\n     \
    \                  Consumer can pay using the Brand.\n                       Values\
    \ of BrandId are managed under the procedure\n                       described\
    \ in section 12 IANA Considerations.\n                       As values of BrandId\
    \ are controlled under the\n                       procedures defined in section\
    \ 12 IANA\n                       Considerations user defined values may be\n\
    \                       defined.\n   BrandName           This contains the name\
    \ of the brand, for example\n                       MasterCard Credit. This is\
    \ the description of the\n                       Brand which is displayed to the\
    \ consumer in the\n                       Consumers language defined by xml:lang.\
    \ For\n                       example it might be \"American Airlines Advantage\n\
    \                       Visa\". Note that this attribute is not used for\n   \
    \                    matching against the payment instruments held by\n      \
    \                 the Consumer.\n   BrandLogoNetLocn    The net location which\
    \ can be used to download\n                       the logo for the Organisation.\
    \ See section\n                       Retrieving Logos (see section 10).\n   \
    \                    The content of this attribute must conform to\n         \
    \              [RFC1738].\n   BrandNarrative      This optional attribute is designed\
    \ to be used by\n                       the Merchant to indicate some special\
    \ conditions\n                       or benefit which would apply if the Consumer\n\
    \                       selected that brand. For example \"5% discount\",\n  \
    \                     \"free shipping and handling\", \"free breakage\n      \
    \                 insurance for 1 year\", \"double air miles apply\",\n      \
    \                 etc.\n   ProtocolAmountRefs  Identifies the protocols and related\
    \ currencies\n                       and amounts which can be used with this Brand.\n\
    \                       Specified as a list of ID's of Protocol Amount\n     \
    \                  Elements (see section 7.7.3) contained within the\n       \
    \                Brand List.\n   ContentSoftwareId   See section 14.Glossary.\n\
    \   Content:\n   ProtocolBrand      Protocol Brand elements contain brand information\n\
    \                      to be used with a specific payment protocol (see\n    \
    \                  section 7.7.2)\n   PackagedContent    Optional Packaged Content\
    \ (see section 3.7)\n                      elements containing information about\
    \ the brand\n                      which may be used by the payment protocol.\
    \ The\n                      content of this information is defined in the\n \
    \                     supplement for a payment protocol which describes\n    \
    \                  how the payment protocol works with IOTP.\n   Example Brand\
    \ Elements are contained in section 11.2 Brand List\n   Examples.\n"
- title: 7.7.2 Protocol Brand Element
  contents:
  - "7.7.2 Protocol Brand Element\n   The Protocol Brand Element contains information\
    \ that is specific to\n   the use of a particular Protocol with a Brand. Its definition\
    \ is as\n   follows.\n   <!ELEMENT ProtocolBrand (PackagedContent*) >\n   <!ATTLIST\
    \ ProtocolBrand\n    ProtocolId         CDATA   #REQUIRED\n    ProtocolBrandId\
    \    CDATA   #REQUIRED >\n   Attributes:\n   ProtocolId         This must match\
    \ the value of a ProtocolId\n                      attribute in a Pay Protocol\
    \ Element (see section\n                      7.7.5).\n                      The\
    \ values of ProtocolId should be unique within a\n                      Brand\
    \ Element otherwise there is an error.\n   ProtocolBrandId    This is the Payment\
    \ Brand Id to be used with a\n                      particular payment protocol.\
    \ For example, SET and\n                      EMV have their own well defined,\
    \ yet different,\n                      values for the Brand Id to be used with\
    \ each\n                      protocol.\n                      The valid values\
    \ of this attribute are defined in\n                      the supplement for the\
    \ payment protocol identified\n                      by ProtocolId that describes\
    \ how the payment\n                      protocol works with IOTP.\n   Content:\n\
    \   PackagedContent    Optional Packaged Content (see section 3.7)\n         \
    \             elements containing information about the\n                    \
    \  protocol/brand which may be used by the payment\n                      protocol.\
    \ The content of this information is\n                      defined in the supplement\
    \ for a payment protocol\n                      which describes how the payment\
    \ protocol works\n                      with IOTP.\n"
- title: 7.7.3 Protocol Amount Element
  contents:
  - "7.7.3 Protocol Amount Element\n   The Protocol Amount element links a Brand to:\n\
    \   o  the currencies and amounts in Currency Amount Elements (see\n      section\
    \ 7.7.4) that can be used with the Brand, and\n   o  the Payment Protocols and\
    \ Payment Handlers defined in a Pay\n      Protocol Element (see section 7.7.5),\
    \ which can be used with those\n      currencies and amounts.\n   Its definition\
    \ is as follows:\n   <!ELEMENT ProtocolAmount (PackagedContent*) >\n   <!ATTLIST\
    \ ProtocolAmount\n    ID                 ID      #REQUIRED\n    PayProtocolRef\
    \     IDREF   #REQUIRED\n    CurrencyAmountRefs IDREFS  #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   Attributes:\n   ID                  Element identifier,\
    \ potentially referenced in a\n                       Brand element; or in a Brand\
    \ Selection Component\n                       contained in a later Payment Request\
    \ message\n                       which uniquely identifies the Protocol Amount\n\
    \                       element within the IOTP Transaction.\n   PayProtocolRef\
    \      Contains an Element Reference (see section 3.5)\n                     \
    \  that refers to the Pay Protocol Element (see\n                       section\
    \ 7.7.5) that contains the Payment Protocol\n                       and Payment\
    \ Handlers that can be used with the\n                       Brand.\n   CurrencyAmountRefs\
    \  Contains a list of  Element References (see\n                       section\
    \ 3.5) that refer to the Currency Amount\n                       Element (see\
    \ section 7.7.4) that describes the\n                       currencies and amounts\
    \ that can be used with the\n                       Brand.\n   ContentSoftwareId\
    \   See section 14. Glossary.\n   Content:\n   PackagedContent    Optional Packaged\
    \ Content (see section 3.7)\n                      elements containing information\
    \ about the protocol\n                      amount which may be used by the payment\
    \ protocol.\n                      The content of this information is defined\
    \ in the\n                      supplement for a payment protocol which describes\n\
    \                      how the payment protocol works with IOTP.\n   Examples\
    \ of Protocol Amount Elements are contained in section 11.2\n   Brand List Examples.\n"
- title: 7.7.4 Currency Amount Element
  contents:
  - "7.7.4 Currency Amount Element\n   A Currency Amount element contains:\n   o a\
    \ currency code (and its type), and\n   o an amount.\n   One or more of these\
    \ elements is carried in each Brand List\n   Component.  Its definition is as\
    \ follows:\n   <!ELEMENT CurrencyAmount EMPTY >\n   <!ATTLIST CurrencyAmount\n\
    \    ID                 ID      #REQUIRED\n    Amount             CDATA   #REQUIRED\n\
    \    CurrCodeType       NMTOKEN 'ISO4217-A'\n    CurrCode           CDATA   #REQUIRED\
    \ >\n   Attributes:\n   ID                 Element identifier, potentially referenced\
    \ in a\n                      Brand element; or in a Brand Selection Component\n\
    \                      contained in a later Payment Request message which\n  \
    \                    uniquely identifies the Currency Amount Element\n       \
    \               within the IOTP Transaction.\n   Amount             Indicates\
    \ the amount to be paid in whole and\n                      fractional units of\
    \ the currency. For example\n                      $245.35 would be expressed\
    \ \"245.35\". Note that\n                      values smaller than the smallest\
    \ denomination are\n                      allowed. For example one tenth of a\
    \ cent would be\n                      \"0.001\".\n   CurrCodeType       Indicates\
    \ the domain of the CurrCode. This\n                      attribute is included\
    \ so that the currency code\n                      may support non-standard \"\
    currencies\" such as\n                      frequent flyer points, trading stamps,\
    \ etc. Its\n                      values may be:\n                       o ISO4217-A\
    \ (the default) indicates the currency\n                         code is a three\
    \ character alphabetic currency\n                         code that conforms to\
    \ [ISO 4217]\n                       o IOTP indicates that values of CurrCode\
    \ are\n                         managed under the procedure described in\n   \
    \                      section 12 IANA Considerations\n   CurrCode           A\
    \ code which identifies the currency to be used in\n                      the\
    \ payment. The domain of valid currency codes is\n                      defined\
    \ by CurrCodeType\n                      As values of CurrCodeType are managed\
    \ under the\n                      procedure described in section 12 IANA\n  \
    \                    Considerations user defined values of CurrCodeType\n    \
    \                  may be defined.\n   Examples of Currency Amount Elements are\
    \ contained in section 11.2\n   Brand List Examples.\n"
- title: 7.7.5 Pay Protocol Element
  contents:
  - "7.7.5 Pay Protocol Element\n   A Pay Protocol element specifies details of a\
    \ Payment Protocol and\n   the Payment Handler that can be used with a Brand.\
    \ One or more of\n   these elements is carried in each Brand List.\n   <!ELEMENT\
    \ PayProtocol (PackagedContent*) >\n   <!ATTLIST PayProtocol\n    ID         \
    \        ID      #REQUIRED\n    xml:lang           NMTOKEN #IMPLIED\n    ProtocolId\
    \         NMTOKEN #REQUIRED\n    ProtocolName       CDATA   #REQUIRED\n    ActionOrgRef\
    \       NMTOKEN #REQUIRED\n    PayReqNetLocn      CDATA   #IMPLIED\n    SecPayReqNetLocn\
    \   CDATA   #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED >\n   Attributes:\n\
    \   ID                 Element identifier, potentially referenced in a\n     \
    \                 Brand element; or in a Brand Selection Component\n         \
    \             contained in a later Payment Request message which\n           \
    \           uniquely identifies the Pay Protocol element\n                   \
    \   within the IOTP Transaction.\n   xml:lang           Defines the language used\
    \ by attributes and\n                      content of this element. See section\
    \ 3.8\n                      Identifying Languages.\n   ProtocolId         Consists\
    \ of a protocol name and version. For\n                      example \"SETv1.0\"\
    .\n                      The values of ProtocolId are defined by the\n       \
    \               payment scheme/method owners in the document that\n          \
    \            describes how to encapsulate a payment protocol\n               \
    \       within IOTP.\n   ProtocolName       A narrative description of the payment\
    \ protocol\n                      and its version in the language identified by\n\
    \                      xml:lang. For example \"Secure Electronic\n           \
    \           Transaction Version 1.0\". Its purpose is to help\n              \
    \        provide information on the payment protocol being\n                 \
    \     used if problems arise.\n   ActionOrgRef       An Element Reference (see\
    \ section 3.5) to the\n                      Organisation Component for the Payment\
    \ Handler for\n                      the Payment Protocol.\n   PayReqNetLocn \
    \     The Net Location indicating where an unsecured\n                      Payment\
    \ Request message should be sent if this\n                      protocol choice\
    \ is used.\n                      The content of this attribute is dependent on\
    \ the\n                      Transport Mechanism (such must conform to\n     \
    \                 [RFC1738].\n   SecPayReqNetLocn   The Net Location indicating\
    \ where a secured\n                      Payment Request message should be sent\
    \ if this\n                      protocol choice is used.\n                  \
    \    A secured payment involves the use of a secure\n                      channel\
    \ such as [SSL/TLS] in order to communicate\n                      with the Payment\
    \ Handler.\n                      The content of this attribute must conform to\n\
    \                      [RFC1738]. See also See section 3.9 Secure and\n      \
    \                Insecure Net Locations.\n   ContentSoftwareId  See section 14.\
    \ Glossary.\n   Content:\n   PackagedContent    Optional Packaged Content elements\
    \ (see section\n                      3.7) containing information about the protocol\n\
    \                      which is used by the payment protocol. The content\n  \
    \                    of this information is defined in the supplement\n      \
    \                for a payment protocol which describes how the\n            \
    \          payment protocol works with IOTP. An example of\n                 \
    \     its use could be to include a payment protocol\n                      message.\n\
    \   Examples of Pay Protocol Elements are contained in section 11.2 Brand\n  \
    \ List Examples.\n"
- title: 7.8 Brand Selection Component
  contents:
  - "7.8 Brand Selection Component\n   A Brand Selection Component identifies the\
    \ choice of payment brand,\n   payment protocol and the Payment Handler.  This\
    \ element is used:\n   o  in Payment Request messages within Baseline Purchase\
    \ and Baseline\n      Value Exchange IOTP Transactions to identify the brand,\
    \ protocol\n      and payment handler for a payment, or\n   o  to, optionally,\
    \ inform a merchant in a purchase of the payment\n      brand being used so that\
    \ the offer and order details can be\n      amended accordingly.\n   In Baseline\
    \ IOTP, the integrity of Brand Selection Components is not\n   guaranteed.  However,\
    \ modification of Brand Selection Components can\n   only cause denial of service\
    \ if the payment protocol itself is secure\n   against message modification, duplication,\
    \ and swapping attacks.\n   The definition of a Brand Selection Component is as\
    \ follows.\n   <!ELEMENT BrandSelection (BrandSelBrandInfo?,\n        BrandSelProtocolAmountInfo?,\n\
    \        BrandSelCurrencyAmountInfo?) >\n   <!ATTLIST BrandSelection\n    ID \
    \                ID      #REQUIRED\n    BrandListRef       NMTOKEN #REQUIRED\n\
    \    BrandRef           NMTOKEN #REQUIRED\n    ProtocolAmountRef  NMTOKEN #REQUIRED\n\
    \    CurrencyAmountRef  NMTOKEN #REQUIRED >\n   Attributes:\n   ID           \
    \      An identifier which uniquely identifies the Brand\n                   \
    \   Selection Component within the IOTP Transaction.\n   BrandListRef       The\
    \ Element Reference (see section 3.5) of the\n                      Brand List\
    \ Component from which a Brand is being\n                      selected\n   BrandRef\
    \           The Element Reference of a Brand element within\n                \
    \      the Brand List Component that is being selected\n                     \
    \ that is to be used in the payment.\n   ProtocolAmountRef  The Element Reference\
    \ of a Protocol Amount element\n                      within the Brand List Component\
    \ which is to be\n                      used when making the payment.\n   CurrencyAmountRef\
    \  The Element Reference of a Currency Amount element\n                      within\
    \ the Brand List Component which is to be\n                      used when making\
    \ the payment.\n   Content:\n   BrandSelBrandInfo,           This contains any\
    \ additional data that\n   BrandSelProtocolAmountInfo,  may be required by a particular\
    \ payment\n   BrandSelCurrencyAmountInfo   brand or protocol. See sections 7.8.1,\n\
    \                                 7.8.2, and 7.8.3.\n   The following rules apply:\n\
    \   o  the BrandListRef must contain the ID of a Brand List Component in\n   \
    \   the same IOTP Transaction\n   o  every Brand List Component in the Trading\
    \ Protocol Options Block\n      (see section 8.1) must be referenced by one and\
    \ only one Brand\n      Selection Component\n   o  the BrandRef must refer to\
    \ the ID of a Brand contained within the\n      Brand List Component referred\
    \ to by BrandListRef\n   o  the ProtocolAmountRef must refer to one of the Element\
    \ IDs listed\n      in the ProtocolAmountRefs attribute of the Brand element\n\
    \      identified by BrandRef\n   o  the CurrencyAmountRef must refer to one of\
    \ the Element IDs listed\n      in the CurrencyAmountRefs attribute of the Protocol\
    \ Amount Element\n      identified by ProtocolAmountRef.\n   An example of a Brand\
    \ Selection Component is included in 11.2 Brand\n   List Examples.\n"
- title: 7.8.1 Brand Selection Brand Info Element
  contents:
  - "7.8.1 Brand Selection Brand Info Element\n   The Brand Selection Brand Info Element\
    \ contains any additional data\n   that may be required by a particular payment\
    \ brand. See the IOTP\n   payment method supplement for a description of how and\
    \ when it used.\n   <!ELEMENT BrandSelBrandInfo (PackagedContent+) >\n   <!ATTLIST\
    \ BrandSelBrandInfo\n    ID                 ID      #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   Attributes:\n   ContentSoftwareId  See section 14. Glossary.\n\
    \   Content:\n   PackagedContent    Packaged Content elements (see section 3.7)\
    \ that\n                      contain additional data that may be required by\
    \ a\n                      particular payment brand. See the payment method\n\
    \                      supplement for IOTP for rules on how this is used.\n"
- title: 7.8.2 Brand Selection Protocol Amount Info Element
  contents:
  - "7.8.2 Brand Selection Protocol Amount Info Element\n   The Brand Selection Protocol\
    \ Amount Info Element contains any\n   additional data that is payment protocol\
    \ specific that may be\n   required by a particular payment brand or payment protocol.\
    \ See the\n   IOTP payment method supplement for a description of how and when\
    \ it\n   used.\n   <!ELEMENT BrandSelProtocolAmountInfo (PackagedContent+) >\n\
    \   <!ATTLIST BrandSelProtocolAmountInfo\n    ID                 ID      #REQUIRED\n\
    \    ContentSoftwareId  CDATA   #IMPLIED >\n   Attributes:\n   ContentSoftwareId\
    \  See section 14. Glossary.\n   Content:\n   PackagedContent    Packaged Content\
    \ elements (see section 3.7) that\n                      may contain additional\
    \ data that may be required\n                      by a particular payment brand.\
    \ See the payment\n                      method supplement for IOTP for rules\
    \ on how this\n                      is used.\n"
- title: 7.8.3 Brand Selection Currency Amount Info Element
  contents:
  - "7.8.3 Brand Selection Currency Amount Info Element\n   The Brand Selection Currency\
    \ Amount Info Element contains any\n   additional data that is payment brand and\
    \ currency specific that may\n   be required by a particular payment brand. See\
    \ the IOTP payment\n   method supplement for a description of how and when it\
    \ used.\n   <!ELEMENT BrandSelCurrencyAmountInfo (PackagedContent+) >\n   <!ATTLIST\
    \ BrandSelCurrencyAmountInfo\n    ID                 ID      #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   Attributes:\n   ContentSoftwareId  See section 14. Glossary.\n\
    \   Content:\n   PackagedContent    Packaged Content elements (see section 3.7)\
    \ that\n                      contain additional data relating to the payment\n\
    \                      brand and currency. See the payment method\n          \
    \            supplement for IOTP for rules on how this is used.\n"
- title: 7.9 Payment Component
  contents:
  - "7.9 Payment Component\n   A Payment Component contains information used to control\
    \ how a\n   payment is carried out. Its provides information on:\n   o  the times\
    \ within which a Payment with a Payment Handler may be\n      started\n   o  a\
    \ reference to the Brand List (see section 7.7) which identifies\n      the Brands,\
    \ protocols, currencies and amounts which can be used to\n      make a payment\n\
    \   o  whether or not a payment receipt will be provided\n   o  whether another\
    \ payment precedes this payment.\n   Its definition is as follows.\n   <!ELEMENT\
    \ Payment EMPTY >\n   <!ATTLIST Payment\n    ID                 ID      #REQUIRED\n\
    \    OkFrom             CDATA   #REQUIRED\n    OkTo               CDATA   #REQUIRED\n\
    \    BrandListRef       NMTOKEN #REQUIRED\n    SignedPayReceipt (True | False)\
    \ #REQUIRED\n    StartAfterRefs     NMTOKENS #IMPLIED >\n   Attributes:\n   ID\
    \                 An identifier which uniquely identifies the\n              \
    \        Payment Component within the IOTP Transaction.\n   OkFrom           \
    \  The date and time in [UTC] format after which a\n                      Payment\
    \ Handler may accept for processing a\n                      Payment Request Block\
    \ (see section 8.7) containing\n                      the Payment Component.\n\
    \   OkTo               The date and time in [UTC] format before which a\n    \
    \                  Payment Handler may accept for processing a\n             \
    \         Payment Request Block containing the Payment\n                     \
    \ Component.\n   BrandListRef       An Element Reference (see section 3.5) of\
    \ a Brand\n                      List Component (see section 7.7) within the TPO\n\
    \                      Trading Block for the IOTP Transaction. The Brand\n   \
    \                   List identifies the alternative ways in which the\n      \
    \                payment can be made.\n   SignedPayReceipt   Indicates whether\
    \ or not the Payment Response\n                      Block (see section 8.9) generated\
    \ by the Payment\n                      Handler for the payment must be digitally\
    \ signed.\n   StartAfter         Contains Element References (see section 3.5)\
    \ of\n                      other Payment Components which describe payments\n\
    \                      which must be complete before this payment can\n      \
    \                start. If no StartAfter attribute is present then\n         \
    \             there are no dependencies and the payment can\n                \
    \      start immediately\n"
- title: 7.10 Payment Scheme Component
  contents:
  - "7.10 Payment Scheme Component\n   A Payment Scheme Component contains payment\
    \ protocol information for\n   a specific payment scheme which is transferred\
    \ between the parties\n   involved in a payment for example a [SET] message. Its\
    \ definition is\n   as follows.\n   <!ELEMENT PaySchemeData (PackagedContent+)\
    \ >\n   <!ATTLIST PaySchemeData\n    ID                 ID      #REQUIRED\n  \
    \  PaymentRef         NMTOKEN #IMPLIED\n    ConsumerPaymentId  CDATA   #IMPLIED\n\
    \    PaymentHandlerPayId CDATA  #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   Attributes:\n   ID                   An identifier which uniquely identifies\
    \ the\n                        Payment Scheme Component within the IOTP\n    \
    \                    Transaction.\n   PaymentRef           An Element Reference\
    \ (see section 3.5) to the\n                        Payment Component (see section\
    \ 7.9) to which\n                        this Payment Scheme Component relates.\
    \ It is\n                        required unless the Payment Scheme Component\
    \ is\n                        part of an Transaction Inquiry Status\n        \
    \                Transaction (see section 9.2.1).\n   ConsumerPaymentId    An\
    \ identifier specified by the Consumer which,\n                        if returned\
    \ by the Payment Handler in another\n                        Payment Scheme Component\
    \ or by other means, will\n                        enable the Consumer to identify\
    \ which payment is\n                        being referred to.\n   PaymentHandlerPayId\
    \  An identifier specified by the Payment Handler\n                        which,\
    \ if returned by the Consumer in another\n                        Payment Scheme\
    \ Component, or by other means,\n                        will enable the Payment\
    \ Handler to identify\n                        which payment is being referred\
    \ to. It is\n                        required on every Payment Scheme Component\
    \ apart\n                        from the one contained in a Payment Request\n\
    \                        Block.\n   ContentSoftwareId    See section 14. Glossary.\n\
    \   Content:\n   PackagedContent    Contains payment scheme protocol information\
    \ as\n                      Packaged Content elements (see section 3.7). See\n\
    \                      the payment scheme supplement for the definition\n    \
    \                  of its content.\n                      Note that:\n       \
    \                o the values of the Name attribute of each\n                \
    \         packaged content element are defined by the\n                      \
    \   Payment Protocol Supplement\n                       o the value of each Name\
    \ must be unique within a\n                         Payment where a Payment is\
    \ defined as all\n                         Payment Scheme or Payment Receipt Components\n\
    \                         with the same value of the PaymentRef attribute\n"
- title: 7.11 Payment Receipt Component
  contents:
  - "7.11 Payment Receipt Component\n   A Payment Receipt is a record of a payment\
    \ which demonstrates how\n   much money has been paid or received. It is distinct\
    \ from a purchase\n   receipt in that it contains no record of what was being\
    \ purchased.\n   Typically the content of a Payment Receipt Component will contain\n\
    \   data which describes:\n   o  the amount paid and its currency\n   o  the date\
    \ and time of the payment\n   o  internal reference numbers which identify the\
    \ payment to the\n      payment system\n   o  potentially digital signatures generated\
    \ by the payment method\n      which can be used to prove after the event that\
    \ the payment\n      occurred.\n   If the Payment Method being used provides the\
    \ facility then the\n   Payment Receipt Component should contain payment protocol\
    \ messages,\n   or references to messages, which prove the payment occurred.\n\
    \   The precise definition of the content is Payment Method dependent.\n   Refer\
    \ to the supplement for the payment method being used to\n   determine the rules\
    \ that apply.\n   Information contained in the Payment Receipt Component should\
    \ be\n   displayed or otherwise made available to the Consumer.\n   Note: If the\
    \ Payment Receipt Component contains Payment Protocol\n   Messages, then the Messages\
    \ will need to be processed by Payment\n   Method software to convert it into\
    \ a format which can be understood\n   by the Consumer\n    The definition of\
    \ a Payment Receipt Component is as follows.\n   <!ELEMENT PayReceipt (PackagedContent*)\
    \ >\n   <!ATTLIST PayReceipt\n    ID                 ID      #REQUIRED\n    PaymentRef\
    \         NMTOKEN #REQUIRED\n    PayReceiptNameRefs NMTOKENS #IMPLIED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   Attributes:\n   ID                  An identifier which\
    \ uniquely identifies the\n                       Payment Receipt Component within\
    \ the IOTP\n                       Transaction.\n   PaymentRef          Contains\
    \ an Element Reference (see section 3.5)\n                       to the Payment\
    \ Component (see section 7.9) to\n                       which this payment receipt\
    \ applies\n   PayReceiptNameRefs  Optionally contains a list of the values of\
    \ the\n                       Name attributes of Packaged Content elements that\n\
    \                       together make up the receipt. The Packaged\n         \
    \              Content elements are contained either within:\n               \
    \         o Payment Scheme Data components exchanged\n                       \
    \   between the Payment Handler and the Consumer\n                          roles\
    \ during the Payment, and/or\n                        o the Payment Receipt component\
    \ itself.\n                       Note that:\n                        o each payment\
    \ scheme defines in its supplement\n                          the Names of the\
    \ Packaged Content elements\n                          that must be listed in\
    \ this attribute (if\n                          any).\n                      \
    \  o if a Payment Scheme Component contains\n                          Packaged\
    \ Content elements with a name that\n                          matches a name\
    \ within PayReceiptNameRefs, then\n                          those Payment Scheme\
    \ Components must be\n                          referenced by Digests in the Payment\
    \ Response\n                          signature component (if such a signature\
    \ is\n                          being used)\n                       The client\
    \ software should save all the\n                       components referenced so\
    \ that the payment receipt\n                       can be reconstructed when required.\n\
    \   ContentSoftwareId   See section 14. Glossary.\n   Content:\n   PackagedContent\
    \    Optionally contains payment scheme payment receipt\n                    \
    \  information as Packaged Content elements (see\n                      section\
    \ 3.7). See the payment scheme supplement\n                      for the definition\
    \ of its content.\n                      Note that:\n                       o\
    \ the values of the Name attribute of each\n                         packaged\
    \ content element are defined by the\n                         Payment Protocol\
    \ Supplement\n                       o the value of each Name must be unique within\
    \ a\n                         Payment where a Payment is defined as all\n    \
    \                     Payment Scheme or Payment Receipt Components,\n        \
    \                 with the same value of the PaymentRef attribute\n   Note that\
    \ either the PayReceiptNameRefs attribute, the\n   PackagedContent element, or\
    \ both must be present.\n"
- title: 7.12 Payment Note Component
  contents:
  - "7.12 Payment Note Component\n   The Payment Note Component contains additional,\
    \ non payment related,\n   information which the Payment Handler wants to provide\
    \ to the\n   Consumer.  For example, if a withdrawal or deposit were being made\n\
    \   then it could contain information on the remaining balance on the\n   account\
    \ after the transfer was complete. The information should\n   duplicate information\
    \ contained within the Payment Receipt Component.\n   Information contained in\
    \ the Payment Note Component should be\n   displayed or otherwise made available\
    \ to the Consumer. For\n   interoperability, the Payment Note Component should\
    \ support, as a\n   minimum, the content types of \"Plain Text\", HTML and XML.\
    \ Its\n   definition is as follows.\n   <!ELEMENT PaymentNote (PackagedContent+)\
    \ >\n   <!ATTLIST PaymentNote\n     ID                ID      #REQUIRED\n    \
    \ ContentSoftwareId CDATA   #IMPLIED >\n   Attributes:\n   ID                \
    \ An identifier which uniquely identifies the\n                      Payment Receipt\
    \ Component within the IOTP\n                      Transaction.\n   ContentSoftwareId\
    \  See section 14. Glossary.\n   Content:\n   PackagedContent    Contains additional,\
    \ non payment related,\n                      information which the Payment Handler\
    \ wants to\n                      provide to the Consumer as one or more Packaged\n\
    \                      Content elements (see section 3.7).\n"
- title: 7.13 Delivery Component
  contents:
  - "7.13 Delivery Component\n   The Delivery Element contains information required\
    \ to deliver goods\n   or services. Its definition is as follows.\n   <!ELEMENT\
    \ Delivery (DeliveryData?, PackagedContent*) >\n   <!ATTLIST Delivery\n    ID\
    \                 ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    DelivExch          (True | False) #REQUIRED\n    DelivAndPayResp    (True\
    \ | False) #REQUIRED\n    ActionOrgRef       NMTOKEN #IMPLIED >\n   Attributes:\n\
    \   ID                  An identifier which uniquely identifies the\n        \
    \               Delivery Component within the IOTP Transaction.\n   xml:lang \
    \           Defines the language used by attributes or child\n               \
    \        elements within this component, unless overridden\n                 \
    \      by an xml:lang attribute on a child element. See\n                    \
    \   section 3.8 Identifying Languages.\n   DelivExch           Indicates if this\
    \ IOTP Transaction includes the\n                       messages associated with\
    \ a Delivery Exchange.\n                       Valid values are:\n           \
    \             o True indicates it does include a Delivery\n                  \
    \        Exchange\n                        o False indicates it does not include\
    \ a\n                          Delivery Exchange\n                       If set\
    \ to true then a DeliveryData element must\n                       be present.\
    \ If set to false it may be absent.\n   DelivAndPayResp     Indicates if the Delivery\
    \ Response Block (see\n                       section 8.11) and the Payment Response\
    \ Block (see\n                       section 8.9 ) are combined into one IOTP\
    \ Message.\n                       Valid values are:\n                       \
    \ o True indicates both blocks will be in the\n                          same\
    \ IOTP Message, and\n                        o False indicates each block will\
    \ be in a\n                          different IOTP Message\n                \
    \       DelivAndPayResp should not be true if DelivExch\n                    \
    \   is False.\n                       In practice combining the Delivery Response\
    \ Block\n                       and Payment Response Block is only likely to be\n\
    \                       practical if the Merchant, the Payment Handler\n     \
    \                  and the Delivery Handler are the same\n                   \
    \    Organisation since:\n                        o the Payment Handler must have\
    \ access to Order\n                          Component information so that they\
    \ know what\n                          to deliver, and\n                     \
    \   o the Payment Handler must be able to carry out\n                        \
    \  the delivery\n   ActionOrgRef        An Element Reference to the Organisation\n\
    \                       Component of the Delivery Handler for this\n         \
    \              delivery.\n   Content:\n   DeliveryData       Contains details\
    \ about how the delivery will be\n                      carried out. See 7.13.1\
    \ Delivery Data Element\n                      below.\n   PackagedContent    Contains\
    \ \"user\" data defined for the Merchant\n                      which is required\
    \ by the Delivery Handler as one\n                      or more Packaged Content\
    \ Elements see section 3.7.\n"
- title: 7.13.1 Delivery Data Element
  contents:
  - "7.13.1 Delivery Data Element\n   The DeliveryData element contains information\
    \ about where and how\n   goods are to be delivered. Its definition is as follows.\n\
    \   <!ELEMENT DeliveryData (PackagedContent*) >\n   <!ATTLIST DeliveryData\n \
    \   xml:lang           NMTOKEN #IMPLIED\n    OkFrom             CDATA   #REQUIRED\n\
    \    OkTo               CDATA   #REQUIRED\n    DelivMethod        NMTOKEN #REQUIRED\n\
    \    DelivToRef         NMTOKEN #REQUIRED\n    DelivReqNetLocn    CDATA   #REQUIRED\n\
    \    SecDelivReqNetLocn CDATA   #REQUIRED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   Attributes:\n   xml:lang            Defines the language used by attributes\
    \ within\n                       this component. See section 3.8 Identifying\n\
    \                       Languages.\n   OkFrom              The date and time in\
    \ [UTC] format after which the\n                       Delivery Handler may accept\
    \ for processing a\n                       Delivery Request Block (see section\
    \ 8.10).\n   OkTo                The date and time in [UTC] format before which\n\
    \                       the Delivery Handler may accept for processing a\n   \
    \                    Delivery Request Block.\n   DelivMethod         Indicates\
    \ the method by which goods or services\n                       may be delivered.\
    \ Valid values are:\n                        o Post the goods will be delivered\
    \ by post or\n                          courier\n                        o Web\
    \ the goods will be delivered\n                          electronically in the\
    \ Delivery Note Component\n                        o Email the goods will be delivered\n\
    \                          electronically by e-mail\n                       Values\
    \ of DelivMethod are managed under the\n                       procedure described\
    \ in section 12 IANA\n                       Considerations which allows user\
    \ defined codes to\n                       be defined.\n   DelivToRef        \
    \  The Element Reference (see section 3.4) of an\n                       Organisation\
    \ Component within the IOTP\n                       Transaction which has a role\
    \ of DelivTo. The\n                       information in this block is used to\
    \ determine\n                       where delivery is to be made. It must be\n\
    \                       compatible with DelivMethod. Specifically if the\n   \
    \                    DelivMethod is:\n                        o Post, then the\
    \ there must be a Postal Address\n                          Element containing\
    \ sufficient information for\n                          a postal delivery,\n \
    \                       o Web, then there are no specific requirements.\n    \
    \                      The information will be sent in a web page\n          \
    \                back to the Consumer\n                        o Email, then there\
    \ must be Contact Information\n                          Element with a valid\
    \ e-mail address\n   DelivReqNetLocn     This contains the Net Location to which\
    \ an\n                       unsecured Delivery Request Block (see section\n \
    \                      8.10) which contains the Delivery Component\n         \
    \              should be sent.\n                       The content of this attribute\
    \ is dependent on the\n                       Transport Mechanism and must conform\
    \ to\n                       [RFC1738].\n   SecDelivReqNetLocn  This contains\
    \ the Net Location to which a secured\n                       Delivery Request\
    \ Block (see section 8.10) which\n                       contains the Delivery\
    \ Component should be sent.\n                       A secured delivery request\
    \ involves the use of a\n                       secure channel such as [SSL/TLS]\
    \ in order to\n                       communicate with the Payment Handler.\n\
    \                       The content of this attribute is dependent on the\n  \
    \                     Transport Mechanism must conform to [RFC1738].\n       \
    \                See also Section 3.9 Secure and Insecure Net\n              \
    \         Locations.\n   ContentSoftwareId   See section 14. Glossary.\n   Content:\n\
    \   PackagedContent    Additional information about the delivery as one\n    \
    \                  or more Packaged Content elements (see section\n          \
    \            3.7) provided to the Delivery Handler by the\n                  \
    \    merchant.\n"
- title: 7.14 Consumer Delivery Data Component
  contents:
  - "7.14 Consumer Delivery Data Component\n   A Consumer Delivery Data Component\
    \ is used by a Consumer to specify\n   an identifier that can be used by the Consumer\
    \ to identify the\n   Delivery.\n   Its definition is as follows:\n   <!ELEMENT\
    \ ConsumerDeliveryData EMPTY >\n   <!ATTLIST ConsumerDeliveryData\n    ID    \
    \             ID      #REQUIRED\n    ConsumerDeliveryId CDATA   #REQUIRED>\n \
    \  Attributes:\n   ID                  An identifier which uniquely identifies\
    \ the\n                       Consumer Delivery Data Component within the IOTP\n\
    \                       Transaction.\n   ConsumerDeliveryId  An identifier specified\
    \ by the Consumer which, if\n                       returned by the Delivery Handler\
    \ will enable the\n                       Consumer to identify which Delivery\
    \ is being\n                       referred to.\n"
- title: 7.15 Delivery Note Component
  contents:
  - "7.15 Delivery Note Component\n   A Delivery Note contains delivery instructions\
    \ about the delivery of\n   goods or services or potentially the actual Delivery\
    \ Information\n   itself.  It is information which the person or Organisation\
    \ receiving\n   the Delivery Note can use when delivery occurs.\n   For interoperability,\
    \ the Delivery Note Component Packaged Content\n   should support both Plain Text,\
    \ HTML and XML.\n   It's definition is as follows.\n   <!ELEMENT DeliveryNote\
    \ (PackagedContent+) >\n   <!ATTLIST DeliveryNote\n    ID                 ID \
    \     #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n    DelivHandlerDelivId\
    \ CDATA  #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED >\n   Attributes:\n\
    \   ID                   An identifier which uniquely identifies the\n       \
    \                 Delivery Note Component within the IOTP\n                  \
    \      Transaction.\n   xml:lang             Defines the language used by attributes\
    \ or child\n                        elements within this component, unless\n \
    \                       overridden by an xml:lang attribute on a child\n     \
    \                   element. See section 3.8 Identifying Languages.\n   DelivHandlerDelivId\
    \  An optional identifier specified by the Delivery\n                        Handler\
    \ which, if returned by the Consumer in\n                        another Delivery\
    \ Component, or by other means,\n                        will enable the Delivery\
    \ Handler to identify\n                        which Delivery is being referred\
    \ to. It is\n                        required on every Delivery Component apart\
    \ from\n                        the one contained in a Delivery Request Block.\n\
    \                        An example use of this attribute is to contain a\n  \
    \                      delivery tracking number.\n   ContentSoftwareId    See\
    \ section 14. Glossary.\n   Content:\n   PackagedContent    Contains actual delivery\
    \ note information as one\n                      or more Packaged Content elements\
    \ (see section\n                      3.7).\n   Note: If the content of the Delivery\
    \ Message is a Mime message then\n   the Delivery Note may trigger an application\
    \ which causes the actual\n   delivery to occur.\n"
- title: 7.16 Status Component
  contents:
  - "7.16 Status Component\n   A Status Component contains status information about\
    \ the business\n   success or failure (see section 4.2) of a process.\n   Its\
    \ definition is as follows.\n   <!ELEMENT Status EMPTY >\n   <!ATTLIST Status\n\
    \    ID                 ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    StatusType         NMTOKEN #REQUIRED\n    ElRef              NMTOKEN #IMPLIED\n\
    \    ProcessState (NotYetStarted | InProgress |\n        CompletedOk | Failed\
    \ | ProcessError) #REQUIRED\n    CompletionCode     NMTOKEN #IMPLIED\n    ProcessReference\
    \   CDATA   #IMPLIED\n    StatusDesc         CDATA   #IMPLIED >\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the Status\n  \
    \                    Component within the IOTP Transaction.\n   xml:lang     \
    \      Defines the language used by attributes within\n                      this\
    \ component. See section 3.8 Identifying\n                      Languages.\n \
    \  StatusType         Indicates the type of Document Exchange which the\n    \
    \                  Status is reporting on. It may be set to either\n         \
    \             Offer, Payment, Delivery, Authentication or\n                  \
    \    Undefined.\n                      Undefined means that the type of document\
    \ exchange\n                      could not be identified. This is caused by an\n\
    \                      error in the initial input message of the\n           \
    \           exchange.\n                      Values of StatusType are managed\
    \ under the\n                      procedure described in section 12 IANA\n  \
    \                    Considerations which also allows user defined\n         \
    \             values of StatusType to be defined.\n   ElRef              If the\
    \ StatusType is not set to Undefined then\n                      ElRef contains\
    \ an Element Reference (see section\n                      3.5) to the Component\
    \ for which the Status is\n                      being described. It must refer\
    \ to either:\n                       o an Order Component (see section 7.5), if\
    \ the\n                         StatusType is Offer,\n                       o\
    \ a Payment Component (see section 7.9), if the\n                         StatusType\
    \ is Payment, or\n                       o a Delivery Component (see section 7.13),\
    \ if\n                         the StatusType is Delivery\n                  \
    \     o an Authentication Request Component (see\n                         section\
    \ 7.2) if the StatusType is\n                         Authentication.\n   ProcessState\
    \       Contains a State Code which indicates the current\n                  \
    \    state of the process being carried out. Valid\n                      values\
    \ for ProcessState are:\n                       o NotYetStarted. A Request Block\
    \ has been\n                         received but the process has not yet started\n\
    \                       o InProgress. Processing of the Request Block\n      \
    \                   has started but it is not yet complete\n                 \
    \      o CompletedOk. The processing of the Request\n                        \
    \ Block has completed successfully without any\n                         errors\n\
    \                       o Failed. The processing of the Request Block\n      \
    \                   has failed because of a Business Error (see\n            \
    \             section 4.2)\n                       o ProcessError. This value\
    \ is only used when the\n                         Status Component is being used\
    \ in connection\n                         with an Inquiry Request Trading Block\
    \ (see\n                         section 8.12). It indicates there was a\n   \
    \                      Technical Error (see section 4.1) in the\n            \
    \             Request Block which is being processed or some\n               \
    \          internal processing error.\n                      Note that this code\
    \ reports on the processing of a\n                      Request Block. Further,\
    \ asynchronous processing\n                      may occur after the Response\
    \ Block associated with\n                      the Process has been sent.\n  \
    \ CompletionCode     Indicates how the process completed. Valid values\n     \
    \                 for the CompletionCode are given below together\n          \
    \            with the conditions when it must be present and\n               \
    \       indications on when recovery from failures are\n                     \
    \ possible.\n                      A CompletionCode is a maximum of 14 characters\n\
    \                      long.\n   ProcessReference   This optional attribute holds\
    \ a reference for the\n                      process whose status is being reported.\
    \ It may\n                      hold the following values:\n                 \
    \      o when StatusType is set to Offer, it should\n                        \
    \ contain the OrderIdentifier from the Order\n                         Component\n\
    \                       o when StatusType is set to Payment, it should\n     \
    \                    contain the PaymentHandlerPayId from the\n              \
    \           Payment Scheme Data Component\n                       o when StatusType\
    \ is set to Delivery, it should\n                         contain the DelivHandlerDelivId\
    \ from the\n                         Delivery Note Component\n               \
    \        o when StatusType is set to Authentication, it\n                    \
    \     should contain the AuthenticationId from the\n                         Authentication\
    \ Request Component\n                      This attribute should be absent in\
    \ the Inquiry\n                      Request message when the Consumer has not\
    \ been\n                      given such a reference number by the IOTP Service\n\
    \                      Provider.\n                      This attribute can be\
    \ used inside an Inquiry\n                      Response Block (see section 8.13)\
    \ to give the\n                      reference number for a transaction which\
    \ has\n                      previously been unavailable.\n                  \
    \    For example, the package tracking number might not\n                    \
    \  be assigned at the time a delivery response was\n                      received.\
    \ However, if the Consumer issues a\n                      Baseline Transaction\
    \ Status Inquiry later, the\n                      Delivery Handler can put the\
    \ package tracking\n                      number into this attribute in the Inquiry\
    \ Response\n                      message and send it back to the Consumer.\n\
    \   StatusDesc         An optional textual description of the current\n      \
    \                status of the process in the language identified\n          \
    \            by xml:lang.\n"
- title: 7.16.1 Offer Completion Codes
  contents:
  - "7.16.1 Offer Completion Codes\n   The Completion Code is only required if the\
    \ ProcessState attribute is\n   set to Failed. The following table contains the\
    \ valid values for the\n   CompletionCode that may be used and indicates whether\
    \ or not recovery\n   might be possible. It is recommended that the StatusDesc\
    \ attribute is\n   used to provide further explanation where appropriate.\n  \
    \     Value                            Description\n   AuthError        Authentication\
    \ Error. The check of the\n                    Authentication Response which was\
    \ carried out has\n                    failed.\n                    Recovery may\
    \ be possible by the Consumer re-\n                    submitting a new Authentication\
    \ Response Block with\n                    corrected information.\n   ConsCancelled\
    \    Consumer Cancelled. The Consumer decides to cancel\n                    the\
    \ transaction for some reason. This code is only\n                    valid in\
    \ a Status Component contained in a Cancel\n                    Block or an Inquiry\
    \ Response Block.\n                    No recovery possible.\n   MerchCancelled\
    \   Offer Cancelled. The Merchant declines to generate\n                    an\
    \ offer for some reason and cancels the\n                    transaction. This\
    \ code is only valid in a Status\n                    Component contained in a\
    \ Cancel Block or an Inquiry\n                    Response Block.\n          \
    \          No recovery possible.\n   Unspecified      Unspecified error. There\
    \ is some unknown problem or\n                    error which does not fall into\
    \ one of the other\n                    CompletionCodes.\n                   \
    \ No recovery possible.\n   TimedOutRcvr     Recoverable Time Out. Messages were\
    \ resent but no\n                    response received. The document exchange\
    \ has\n                    therefore \"Timed Out\". This code is only valid on\
    \ a\n                    Transaction Inquiry.\n                    Recovery is\
    \ possible if the last message from the\n                    other Trading Role\
    \ is received again.\n   TimedOutNoRcvr   Non Recoverable Time Out. Messages were\
    \ resent but\n                    no response received. The document exchange\
    \ has\n                    therefore \"Timed Out\". This code is only valid on\
    \ a\n                    Transaction Inquiry.\n                    No recovery\
    \ possible.\n"
- title: 7.16.2 Payment Completion Codes
  contents:
  - "7.16.2 Payment Completion Codes\n   The CompletionCode is only required if the\
    \ ProcessState attribute is\n   set to Failed. The following table contains the\
    \ valid values for the\n   CompletionCode that may be used and indicates where\
    \ recovery may be\n   possible. It is recommended that the StatusDesc attribute\
    \ is used by\n   individual payment schemes to provide further explanation where\n\
    \   appropriate.\n         Value                           Description\n   BrandNotSupp\
    \       Brand not supported. The payment brand is not\n                      supported\
    \ by the Payment Handler.\n                      See below for recovery options.\n\
    \   CurrNotSupp        Currency not supported. The currency in which the\n   \
    \                   payment is to be made is not supported by either\n       \
    \               the Payment Instrument or the Payment Handler.\n             \
    \         If the payment is Brand Independent, then the\n                    \
    \  Consumer may recover by selecting a different\n                      currency,\
    \ if available, or a different brand. Note\n                      that this may\
    \ involve a different Payment Handler.\n   ConsCancelled      Consumer Cancelled.\
    \ The Consumer decides to cancel\n                      the payment for some reason.\
    \ This code is only\n                      valid in a Status Component contained\
    \ in a Cancel\n                      Block or an Inquiry Response Block.\n   \
    \                   Recovery is not possible.\n   PaymtCancelled     Payment Cancelled.\
    \ The Payment Handler declines to\n                      complete the payment\
    \ for some reason and cancels\n                      the transaction. This code\
    \ is only valid in a\n                      Status Component contained in a Cancel\
    \ Block or an\n                      Inquiry Response Block.\n               \
    \       See below for recovery options.\n   AuthError          Authentication\
    \ Error. The Payment Scheme specific\n                      authentication check\
    \ which was carried out has\n                      failed.\n                 \
    \     Recovery may be possible. See the payment scheme\n                     \
    \ supplement to determine what is allowed.\n   InsuffFunds        Insufficient\
    \ funds. There are insufficient funds\n                      available for the\
    \ payment to be made.\n                      See below for recovery options.\n\
    \   InstBrandInvalid   Payment Instrument not valid for Brand. A Payment\n   \
    \                   Instrument is being used which does not correspond\n     \
    \                 with the Brand selected. For example a Visa credit\n       \
    \               card is being used when MasterCard was selected as\n         \
    \             the Brand.\n                      See below for recovery options.\n\
    \   InstNotValid       Payment instrument not valid for trade. The\n         \
    \             Payment Instrument cannot be used for the proposed\n           \
    \           type of trade, for some reason.\n                      See below for\
    \ recovery options.\n   BadInstrument      Bad instrument. There is a problem\
    \ with the\n                      Payment Instrument being used which means that\
    \ it\n                      is unable to be used for the payment.\n          \
    \            See below for recovery options.\n   Unspecified        Unspecified\
    \ error. There is some unknown problem\n                      or error which does\
    \ not fall into one of the other\n                      CompletionCodes. The StatusDesc\
    \ attribute should\n                      provide the explanation of the cause.\n\
    \                      See below for recovery options.\n   TimedOutRcvr      \
    \ Recoverable Time Out. Messages were resent but no\n                      response\
    \ received. The document exchange has\n                      therefore \"Timed\
    \ Out\". This code is only valid on\n                      a Transaction Inquiry.\n\
    \                      Recovery is possible if the last message from the\n   \
    \                   other Trading Role is received again.\n   TimedOutNoRcvr \
    \    Non Recoverable Time Out. Messages were resent but\n                    \
    \  no response received. The document exchange has\n                      therefore\
    \ \"Timed Out\". This code is only valid on\n                      a Transaction\
    \ Inquiry.\n                      No recovery possible.\n   If the Payment is\
    \ Brand Independent, then recovery may be possible\n   for some values of the\
    \ Completion Code, by the Consumer selecting\n   either a different payment brand\
    \ or a different payment instrument\n   for the same brand. Note that this might\
    \ involve a different Payment\n   Handler. The codes to which this applies are:\
    \ BrandNotSupp,\n   PaymtCancelled, InsuffFunds, InstBrandInvalid, InstNotValid,\n\
    \   BadInstrument and Unspecified.\n   Recovery from Payments associated with\
    \ Brand Dependent purchases is\n   only possible, if the Brand Selection component\
    \ sent by the Merchant\n   to the Consumer does not change. In practice this means\
    \ that the same\n   Brand, Protocol Amount and PayProtocol elements must be used.\
    \ All\n   that can change is the Payment Instrument. Any other change will\n \
    \  invalidate the Merchant's Offer as a changed selection will\n   invalidate\
    \ the Offer Response.\n"
- title: 7.16.3 Delivery Completion Codes
  contents:
  - "7.16.3 Delivery Completion Codes\n   The following table contains the valid values\
    \ for the CompletionCode\n   attribute for a Delivery. It is recommended that\
    \ the StatusDesc\n   attribute is used to provide further explanation where appropriate.\n\
    \        Value                           Description\n   BackOrdered     Back\
    \ Ordered. The goods to be delivered are on order\n                   but they\
    \ have not yet been received. Shipping will be\n                   arranged when\
    \ they are received. This is only valid\n                   if ProcessState is\
    \ CompletedOk.\n                   Recovery is not possible.\n   PermNotAvail\
    \    Permanently Not Available. The goods are permanently\n                  \
    \ unavailable and cannot be re-ordered. This is only\n                   valid\
    \ if ProcessState is Failed.\n                   Recovery is not possible.\n \
    \  TempNotAvail    Temporarily Not Available. The goods are temporarily\n    \
    \               unavailable and may become available if they can be\n        \
    \           ordered. This is only valid if ProcessState is\n                 \
    \  CompletedOk.\n                   Recovery is not possible.\n   ShipPending\
    \     Shipping Pending. The goods are available and are\n                   scheduled\
    \ for shipping but they have not yet been\n                   shipped. This is\
    \ only valid if ProcessState is\n                   CompletedOk.\n           \
    \        Recovery is not possible.\n   Shipped         Goods Shipped. The goods\
    \ have been shipped.\n                   Confirmation of delivery is awaited.\
    \ This is only\n                   valid if ProcessState is CompletedOk.\n   \
    \                Recovery is not possible.\n   ShippedNoConf   Shipped - No Delivery\
    \ Confirmation. The goods have\n                   been shipped but it is not\
    \ possible to confirm\n                   delivery of the goods. This is only\
    \ valid if\n                   ProcessState is CompletedOk.\n                \
    \   Recovery is not possible.\n   ConsCancelled   Consumer Cancelled. The Consumer\
    \ decides to cancel\n                   the delivery for some reason. This code\
    \ is only valid\n                   in a Status Component contained in a Cancel\
    \ Block or\n                   an Inquiry Response Block.\n                  \
    \ Recovery is not possible.\n   DelivCancelled  Delivery Cancelled. The Delivery\
    \ Handler declines to\n                   complete the Delivery for some reason\
    \ and cancels the\n                   transaction. This code is only valid in\
    \ a Status\n                   Component contained in a Cancel Block or an Inquiry\n\
    \                   Response Block.\n                   Recovery is not possible.\n\
    \   Confirmed       Confirmed. All goods have been delivered and\n           \
    \        confirmation of their delivery has been received.\n                 \
    \  This is only valid if ProcessState is CompletedOk.\n                   Recovery\
    \ is not possible.\n   Unspecified     Unspecified error. There is some unknown\
    \ problem or\n                   error which does not fall into one of the other\n\
    \                   CompletionCodes. The StatusDesc attribute should\n       \
    \            provide the explanation of the cause.\n                   Recovery\
    \ is not possible.\n   TimedOutRcvr    Recoverable Time Out. Messages were resent\
    \ but no\n                   response received. The document exchange has\n  \
    \                 therefore \"Timed Out\". This code is only valid on a\n    \
    \               Transaction Inquiry.\n                   Recovery is possible\
    \ if the last message from the\n                   other Trading Role is received\
    \ again.\n   TimedOutNoRcvr  Non Recoverable Time Out. Messages were resent but\
    \ no\n                   response received. The document exchange has\n      \
    \             therefore \"Timed Out\". This code is only valid on a\n        \
    \           Transaction Inquiry.\n                   No recovery possible.\n \
    \  Note: Recovery from failed, or partially completed deliveries is not\n   possible.\
    \ The Consumer should use the Transaction Status Inquiry\n   Transaction (see\
    \ section 9.2.1) to determine up-to- date information\n   on the current state.\n"
- title: 7.16.4 Authentication Completion Codes
  contents:
  - "7.16.4 Authentication Completion Codes\n   The Completion Code is only required\
    \ if the ProcessState attribute is\n   set to Failed. The following table contains\
    \ the valid values for the\n   CompletionCode that may be used. It is recommended\
    \ that the\n   StatusDesc attribute is used to provide further explanation where\n\
    \   appropriate.\n        Value                           Description\n   AutEeCancel\
    \     Authenticatee Cancel. The Organisation being\n                   authenticated\
    \ declines to be authenticated for some\n                   reason. This could\
    \ be, for example because the\n                   signature on an Authentication\
    \ Request was invalid or\n                   the Authenticator was not known or\
    \ acceptable to the\n                   Authenticatee.\n                   Recovery\
    \ is not possible.\n   AutOrCancel     Authenticator Cancel. The Organisation\
    \ requesting\n                   authentication declines to validate the\n   \
    \                Authentication Response received for some reason and\n      \
    \             cancels the transaction.\n                   Recovery is not possible.\n\
    \   NoAuthReq       Authentication Request Not Available. The\n              \
    \     Authenticatee does not have the data that must be\n                   provided\
    \ so that they may be successfully\n                   authenticated. For example\
    \ a password may have been\n                   forgotten, the Authenticatee has\
    \ not yet become a\n                   member, or a smart card token is not present.\n\
    \                   Recovery is not possible\n   AuthFailed      Authentication\
    \ Failed. The Authenticator checked the\n                   Authentication Response\
    \ but the authentication failed\n                   for some reason. For example\
    \ a password may have been\n                   incorrect.\n                  \
    \ Recovery may be possible by the Authenticatee re-\n                   sending\
    \ a revised Authentication Response with\n                   corrected data.\n\
    \   TradRolesIncon  Trading Roles Inconsistent. The Trading Roles\n          \
    \         contained within the TradingRoleList attribute of the\n            \
    \       Trading Role Information Request Component (see\n                   section\
    \ 7.4) are inconsistent with the Trading Role\n                   which the Authenticatee\
    \ is taking in the IOTP\n                   Transaction or is able to take. Examples\
    \ of\n                   inconsistencies include:\n                    o asking\
    \ a PaymentHandler for DeliveryHandler\n                     information\n   \
    \                 o asking a Consumer for Merchant information\n             \
    \      Recovery may be possible by the Authenticator re-\n                   sending\
    \ a revised Authentication Request Block with\n                   corrected information.\n\
    \   Unspecified     Unspecified error. There is some unknown problem or\n    \
    \               error which does not fall into one of the other\n            \
    \       CompletionCodes.\n                   Recovery is not possible.\n   TimedOutRcvr\
    \    Recoverable Time Out. Messages were resent but no\n                   response\
    \ received. The document exchange has\n                   therefore \"Timed Out\"\
    . This code is only valid on a\n                   Transaction Inquiry.\n    \
    \               Recovery is possible if the last message from the\n          \
    \         other Trading Role is received again.\n   TimedOutNoRcvr  Non Recoverable\
    \ Time Out. Messages were resent but no\n                   response received.\
    \ The document exchange has\n                   therefore \"Timed Out\". This\
    \ code is only valid on a\n                   Transaction Inquiry.\n         \
    \          No recovery possible.\n"
- title: 7.16.5 Undefined Completion Codes
  contents:
  - "7.16.5 Undefined Completion Codes\n   The Completion Code is only required if\
    \ the ProcessState attribute is\n   set to Failed. The following table contains\
    \ the valid values for the\n   CompletionCode that may be used. It is recommended\
    \ that the\n   StatusDesc attribute is used to provide further explanation where\n\
    \   appropriate.\n        Value                           Description\n   InMsgHardError\
    \  Input Message Hard Error. The type of Request Block\n                   could\
    \ not be identified or was inconsistent.\n                   Therefore no single\
    \ Document Exchange could be\n                   identified. This will cause a\
    \ Hard Error in the\n                   transaction\n"
- title: 7.16.6 Transaction Inquiry Completion Codes
  contents:
  - "7.16.6 Transaction Inquiry Completion Codes\n   The Completion Code is only required\
    \ if the ProcessState attribute is\n   set to Failed. The following table contains\
    \ the valid values for the\n   CompletionCode that may be used. It is recommended\
    \ that the\n   StatusDesc attribute is used to provide further explanation where\n\
    \   appropriate.\n        Value                           Description\n   UnAuthReq\
    \       Unauthorised Request. The recipient of the\n                   Transaction\
    \ Status Request declines to respond to the\n                   request.\n"
- title: 7.17 Trading Role Data Component
  contents:
  - "7.17 Trading Role Data Component\n   The Trading Role Data Component contains\
    \ opaque data which needs to\n   be communicated between the Trading Roles involved\
    \ in an IOTP\n   Transaction.\n   Trading Role Components identify:\n   o the\
    \ Organisation that generated the component, and\n   o the Organisation that is\
    \ to receive it.\n   They are first generated and included in a \"Response\" Block,\
    \ and then\n   copied to the appropriate \"Request\" Block. For example a Payment\n\
    \   Handler might need to inform a Delivery Handler that a credit card\n   payment\
    \ had been authorised but not captured. There may also be other\n   information\
    \ that the Payment Handler has generated where the format\n   is privately agreed\
    \ with the Delivery Handler which needs to be\n   communicated. In another example\
    \ a Merchant might need to provide a\n   Payment Handler with some specific information\
    \ about a Consumer so\n   that consumer can acquire double loyalty points with\
    \ the payment.\n   Its definition is as follows.\n   <!ELEMENT TradingRoleData\
    \ (PackagedContent+) >\n   <!ATTLIST TradingRoleData\n     ID                ID\
    \      #REQUIRED\n     OriginatorElRef   NMTOKEN #REQUIRED\n     DestinationElRefs\
    \ NMTOKENS #REQUIRED >\n   Attributes:\n   ID                 An identifier which\
    \ uniquely identifies the\n                      Trading Role Data Component within\
    \ the IOTP\n                      Transaction.\n   OrginatorElRef     Contains\
    \ an element reference to the Organisation\n                      Component of\
    \ the Organisation that created the\n                      Trading Role Data Component\
    \ and included it in a\n                      \"Response\" Block (e.g., an Offer\
    \ Response or a\n                      Payment Response Block).\n   DestinationElRefs\
    \  Contains element references to the Organisation\n                      Components\
    \ of the Organisations that are to\n                      receive the Trading\
    \ Role Data Component in a\n                      \"Request\" Block (e.g., either\
    \ a Payment Request or\n                      a Delivery Request Block).\n   Content:\n\
    \   PackagedContent    This contains the data which is to be sent between\n  \
    \                    the various Trading Roles as one or more\n              \
    \        PackagedContent elements see section 3.7.\n"
- title: 7.17.1 Who Receives a Trading Role Data Component
  contents:
  - "7.17.1 Who Receives a Trading Role Data Component\n   The rules for deciding\
    \ what to do with Trading Role Data Components\n   are described below.\n   o\
    \  whenever a Trading Role Data Component is received in a \"Response\"\n    \
    \  block identify the Organisation Components of the Organisations\n      that\
    \ are to receive it as identified by the DestinationElRefs\n      attribute.\n\
    \   o  whenever a \"Request\" Block is being sent, check to see if it is\n   \
    \   being sent to one of the Organisations identified by the\n      DestinationElRefs\
    \ attribute. If it is then include in the\n      \"Request\" block:\n      - \
    \ the Trading Role Data Component as well as,\n      -  the Organisation Component\
    \ of the Organisation identified by\n         the OriginatorElRef attribute (if\
    \ not already present)\n"
- title: 7.18 Inquiry Type Component
  contents:
  - "7.18 Inquiry Type Component\n   The Inquiry Type Component contains the information\
    \ which indicates\n   the type of process that is being inquired upon. Its definition\
    \ is as\n   follows.\n   <!ELEMENT InquiryType EMPTY >\n   <!ATTLIST InquiryType\n\
    \    ID                 ID      #REQUIRED\n    Type               NMTOKEN #REQUIRED\n\
    \    ElRef              NMTOKEN #IMPLIED\n    ProcessReference   CDATA   #IMPLIED\
    \ >\n   Attributes:\n   ID                 An identifier which uniquely identifies\
    \ the\n                      Inquiry Type Component within the IOTP\n        \
    \              Transaction.\n   Type               Contains the type of inquiry.\
    \ Valid values for\n                      Type are:\n                       o\
    \ Offer. The inquiry is about the status of an\n                         offer\
    \ and is addressed to the Merchant.\n                       o Payment. The inquiry\
    \ is about the status of a\n                         payment and is addressed\
    \ to the Payment\n                         Handler.\n                       o\
    \ Delivery. The inquiry is about the status of a\n                         delivery\
    \ and addressed to the Delivery Handler.\n   ElRef              Contains an Element\
    \ Reference (see section 3.5) to\n                      the component to which\
    \ this Inquiry Type Component\n                      applies. That is,\n     \
    \                  o TPO Block when Type is Offer\n                       o Payment\
    \ Component when Type is Payment\n                       o Delivery Component\
    \ when Type is Delivery\n   ProcessReference   Optionally contains a reference\
    \ to the process\n                      being inquired upon. It should be set\
    \ if the\n                      information is available. For the definition of\n\
    \                      the values it may contain, see the\n                  \
    \    ProcessReference attribute of the Status Component\n                    \
    \  (see section 7.16).\n"
- title: 7.19 Signature Component
  contents:
  - "7.19 Signature Component\n   Note: Definitions of the XML structures for signatures\
    \ and\n   certificates are described in the document titled \"Digital Signatures\n\
    \   for the Internet Open Trading Protocol\" by Kent Davidson and Yoshiaki\n \
    \  Kawatsura published at the same time as this document - see\n   [IOTPDSIG].\n\
    \   In the future it is anticipated that future versions of IOTP will\n   adopt\
    \ a whatever method for digitally signing XML becomes the\n   standard.\n   Each\
    \ Signature Component digitally signs one or more Blocks or\n   Components including\
    \ other Signature Components.\n   The Signature Component:\n   o  contains digests\
    \ of one or more Blocks or Components in one or\n      more IOTP Messages within\
    \ the same IOTP Transaction and places the\n      result in a Digest Element\n\
    \   o  concatenates these Digest elements with other information on the\n    \
    \  type of signature, the originator and potential recipients of the\n      signature\
    \ and details of the signature algorithms being used and\n      places them in\
    \ a Manifest element, and\n   o  signs the Manifest element using the optional\
    \ certificate\n      identified in the Certificate element within the Signature\
    \ Block\n      placing the result in a Value element within a Signature Component\n\
    \   Note that there may be multiple Value elements that contain\n   signatures\
    \ of a Manifest Element.\n   A Signature Component can be one of four types either:\n\
    \   o an Offer Response Signature,\n   o a Payment Response Signature,\n   o a\
    \ Delivery Response Signature, or\n   o an Authentication Response Signature.\n\
    \   For a general explanation of signatures see section 6 Digital\n   Signatures.\n"
- title: 7.19.1 IOTP usage of signature elements and attributes
  contents:
  - "7.19.1 IOTP usage of signature elements and attributes\n   Definitions of the\
    \ elements and attributes are contained in\n   [IOTPDSIG].  The following contains\
    \ additional information that\n   describes how these elements and attributes\
    \ are used by IOTP.\n   SIGNATURE ELEMENT\n   The ID attribute is mandatory.\n\
    \   MANIFEST ELEMENT\n   The optional LocatorHrefBase attribute contains text\
    \ which should be\n   concatenated before the text contained in the LocatorHREF\
    \ attribute\n   of all Digest elements within the Manifest.\n   Its purpose is\
    \ to reduce the size of LocatorHREF attribute values\n   since the first part\
    \ of the LocatorHREF attributes in the same\n   signature are likely to be the\
    \ same.\n   Typically, within IOTP, it will contain all the characters in a\n\
    \   LocatorHref attribute up to the sharp (\"#\") character (see\n   immediately\
    \ below).\n   ALGORITHM AND PARAMETER ELEMENTS\n   The algorithm element identifies\
    \ the algorithms used in generating\n   the signature. The type of the algorithm\
    \ is defined by the value of\n   the Type attribute which indicates if it is to\
    \ be used as a Digest\n   algorithm, a Signature algorithm or a Key Agreement\
    \ algorithm.\n   The following Digest algorithms must be implemented:\n   o  a\
    \ [DOM-HASH] algorithm. This is identified by setting the Name\n      attribute\
    \ of the Algorithm element to \"urn:ibm:dom-hash\"\n   o  a [SHA1] algorithm.\
    \ This is identified by setting the Name\n      attribute of the Algorithm element\
    \ to \"urn:fips:sha1\", and\n   o  a [MD5] algorithm. This is identified by setting\
    \ the Name\n      attribute of the Algorithm element to \"urn:rsa:md5\"\n   o\
    \  The following Signature algorithms must be implemented:\n   o  a [DSA] algorithm.\
    \ This is identified by setting the Name\n      attribute of the Algorithm element\
    \ to \"urn:us.gov:dsa\"\n   o  a [HMAC] algorithm. This is identified by setting\
    \ the Name\n      attribute of the Algorithm element to \"urn:ibm:hmac\"\n   It\
    \ is recommended that the following Signature algorithm is also\n   implemented:\n\
    \   o  a [RSA] algorithm. This is identified by setting the Name\n      attribute\
    \ of the Algorithm element to \"urn:rsa:rsa\"\n   In addition other payment scheme\
    \ specific algorithms may be used. In\n   this case the value of the name attribute\
    \ to use is specified in the\n   payment scheme supplement for that algorithm.\n\
    \   One algorithm may make use of other algorithms by use of the\n   Parameter\
    \ element, for example:\n   <Algorithm ID=A1 type=\"digest\" name=\"urn:ibm:dom-hash\"\
    >\n     <Parameter type='AlgorithmRef'>A2</Parameter>\n   </Algorithm>\n   <Algorithm\
    \ ID=A2 type=\"digest\" name=\"urn:fips:sha1\">\n   </Algorithm>\n   <Algorithm\
    \ ID=A3 type=\"signature\" name=\"urn:ibm:hmac\">\n       <Parameter type='AlgorithmRef'>A1</Parameter>\n\
    \   </Algorithm>\n   DIGEST ELEMENT\n   The LocatorHREF attribute identifies the\
    \ IOTP element which is being\n   digitally signed. Specifically it consists of:\n\
    \   o  the value of the IotpTransId attribute of the Transaction ID\n      Component,\
    \ followed by:\n   o  a sharp character, i.e. \"#\", followed by\n   o  an Element\
    \ Reference (see section 3.5) to the element within the\n      IOTP Transaction\
    \ which is the subject of the digest.\n   Before analysing the structure of the\
    \ LocatorHREF attribute, it must\n   be concatenated with the value of the LocatorHrefBase\
    \ attribute of\n   the Manifest element (see immediately above).\n   ATTRIBUTE\
    \ ELEMENT\n   There must be one and only one Attribute Element that contains a\
    \ Type\n   attribute with a value of IOTP Signature Type and with content set\
    \ to\n   either: OfferResponse, PaymentResponse, DeliveryResponse,\n   AuthenticationRequest,\
    \ AuthenticationResponse, PingRequest or\n   PingResponse; depending on the type\
    \ of the signature.\n   Values of the content of the Attribute element are controlled\
    \ under\n   the procedures defined in section 12 IANA Considerations which also\n\
    \   allows user defined values to be defined.\n   The Critical attribute must\
    \ be set to true.\n   ORIGINATORINFO ELEMENT\n   The OriginatorRef attribute of\
    \ the OriginatorInfo element must always\n   be present and contain an Element\
    \ Reference (see section 3.5) to the\n   Organisation Component of the Organisation\
    \ that generated the\n   Signature Component.\n   RECIPIENTINFO ELEMENT\n   The\
    \ RecipientRefs attribute contains a list of Element References\n   (see section\
    \ 3.5), that point to the Organisations that might need to\n   validate the signature.\
    \ For details see below.\n"
- title: 7.19.2 Offer Response Signature Component
  contents:
  - "7.19.2 Offer Response Signature Component\n   The Manifest Element of a signature\
    \ which has a type of OfferResponse\n   should contain Digest elements for the\
    \ following Components:\n   o  the Transaction Id Component (see section 3.3.1)\
    \ of the IOTP\n      message that contains the Offer Response Signature\n   o\
    \  the Transaction Reference Block (see section 3.3) of the IOTP\n      Message\
    \ that contains the Offer Response Signature\n   o  from the TPO Block:\n    \
    \  -  the Protocol Options Component\n      -  each of the Organisation Components\n\
    \      -  each of the Brand List Components\n   o  optionally, all the Brand Selection\
    \ Components if they were sent\n      to the Merchant in a TPO Selection Block\n\
    \   o  from the Offer Response Block:\n      - the Order Component\n      - each\
    \ of the Payment Components\n      - the Delivery Component\n      - each of the\
    \ Authentication Request Components\n      - any Trading Role Data Components\n\
    \   The Offer Response Signature should also contain Digest elements for\n   the\
    \ components that describe each of the Organisations that may or\n   will need\
    \ to verify the signature. This involves:\n   o  if the Merchant has received\
    \ a TPO Selection Block containing\n      Brand Selection Components, then generate\
    \ a Digest element for the\n      Payment Handler identified by the Brand Selection\
    \ Component and\n      the Delivery Handler identified by the Delivery Component.\
    \ See\n      section 6.3.1 Check Request Block sent Correct Organisation for a\n\
    \      description of how this can be done.\n   o  if the Merchant is not expecting\
    \ to receive a TPO Selection Block\n      then generate a Digest element for the\
    \ Delivery Handler and all\n      the Payment Handlers that are involved.\n"
- title: 7.19.3 Payment Receipt Signature Component
  contents:
  - "7.19.3 Payment Receipt Signature Component\n   The Manifest Element of the Payment\
    \ Receipt Signature Component\n   should contain Digest Elements for the following\
    \ Components:\n   o  the Transaction Id Component (see section 3.3.1) of the IOTP\n\
    \      message that contains the Payment Receipt Signature\n   o  the Transaction\
    \ Reference Block (see section 3.3) of the IOTP\n      Message that contains the\
    \ Payment Receipt Signature\n   o  the Offer Response Signature Component\n  \
    \ o  the Payment Receipt Component\n   o  the Payment Note Component\n   o  the\
    \ Status Component\n   o  the Brand Selection Component.\n   o  any Trading Role\
    \ Data Components\n"
- title: 7.19.4 Delivery Response Signature Component
  contents:
  - "7.19.4 Delivery Response Signature Component\n   The Manifest Element of the\
    \ Delivery Response Signature Component\n   should contain Digest Elements for\
    \ the following Components:\n   o  the Transaction Id Component (see section 3.3.1)\
    \ of the IOTP\n      message that contains the Delivery  Response Signature\n\
    \   o  the Transaction Reference Block (see section 3.3) of the IOTP\n      Message\
    \ that contains the Delivery Response Signature\n   o  the Consumer Delivery Data\
    \ component contained in the preceding\n      Delivery Request (if any)\n   o\
    \  the Signature Components contained in the preceding Delivery\n      Request\
    \ (if any)\n   o  the Status Component\n   o  the Delivery Note Component\n"
- title: 7.19.5 Authentication Request Signature Component
  contents:
  - "7.19.5 Authentication Request Signature Component\n   The Manifest Element of\
    \ the Authentication Request Signature\n   Component should contain Digest Elements\
    \ for the following\n   Components:\n   o  the Transaction Reference Block (see\
    \ section 3.3) for the IOTP\n      Message that contains information that describes\
    \ the IOTP Message\n      and IOTP Transaction\n   o  the Transaction Id Component\
    \ (see section 3.3.1) which globally\n      uniquely identifies the IOTP Transaction\n\
    \   o  the following components of the TPO Block :\n      -  the Protocol Options\
    \ Component\n      -  the Organisation Component\n   o  the following components\
    \ of the Authentication Request Block:\n      -  the Authentication Request Component(s)\
    \ (if present)\n      -  the Trading Role Information Request Component (if present)\n"
- title: 7.19.6 Authentication Response Signature Component
  contents:
  - "7.19.6 Authentication Response Signature Component\n   The Manifest Element of\
    \ the Authentication Response Signature\n   Component should contain Digest Elements\
    \ for the following\n   Components:\n   o  the Transaction Reference Block (see\
    \ section 3.3) for the IOTP\n      Message that contains information that describes\
    \ the IOTP Message\n      and IOTP Transaction\n   o  the Transaction Id Component\
    \ (see section 3.3.1) which globally\n      uniquely identifies the IOTP Transaction\n\
    \   o  the following components of the Authentication Request Block:\n      -\
    \  the Authentication Request Component that was used in the\n         Authentication\
    \ (if present)\n      -  the Trading Role Information Request Component (if present)\n\
    \   o  the Organisation Components contained in the Authentication\n      Response\
    \ Block\n"
- title: 7.19.7 Inquiry Request Signature Component
  contents:
  - "7.19.7 Inquiry Request Signature Component\n   If the Inquiry Request is being\
    \ signed (see section 9.2.1) the\n   Manifest Element of the Inquiry Request Signature\
    \ Component should\n   contain Digest elements of the Inquiry Type Component,\
    \ and if\n   present, the Payment Scheme Component.\n"
- title: 7.19.8 Inquiry Response Signature Component
  contents:
  - "7.19.8 Inquiry Response Signature Component\n   If the Inquiry Response is being\
    \ signed (see section 9.2.1) the\n   Manifest Element of the Inquiry Response\
    \ Signature Component should\n   contain Digest elements of the Trading Response\
    \ Block and the Status\n   Component.\n"
- title: 7.19.9 Ping Request Signature Component
  contents:
  - "7.19.9 Ping Request Signature Component\n   If the Ping Request is being singed\
    \ (see section 9.2.2), the Manifest\n   Element of the Ping Request Signature\
    \ Component should contain Digest\n   elements for all the Organisation Components.\n"
- title: 7.19.10 Ping Response Signature Component
  contents:
  - "7.19.10 Ping Response Signature Component\n   If the Ping Response is being singed\
    \ (see section 9.2.2), the\n   Manifest Element of the Ping Response Signature\
    \ Component should\n   contain Digest elements fir all the Organisation Components.\n"
- title: 7.20 Certificate Component
  contents:
  - "7.20 Certificate Component\n   Note: Definitions of the XML structures for signatures\
    \ and\n   certificates are described in the paper \"Digital Signatures for the\n\
    \   Internet Open Trading Protocol\", see [IOTPDSIG].\n   See note at the start\
    \ of section 7.19 Signature Component for more\n   details.\n   A Certificate\
    \ Component contains a Digital Certificate. They are used\n   only when required,\
    \ for example, when asymmetric cryptography is\n   being used and the recipient\
    \ of the signature that needs to check has\n   not already received the Public\
    \ Key.\n   The structure of a Certificate Component is defined in [IOTPDSIG].\n"
- title: 7.20.1 IOTP usage of signature elements and attributes
  contents:
  - "7.20.1 IOTP usage of signature elements and attributes\n   Detailed definitions\
    \ of the above elements and attributes are\n   contained in [IOTPDSIG]. The following\
    \ contains additional\n   information that describes how these elements and attributes\
    \ are used\n   by IOTP.\n   CERTIFICATE COMPONENT\n   The ID attribute is mandatory.\n\
    \   VALUE ELEMENT\n   The ID attribute is mandatory.\n"
- title: 7.21 Error Component
  contents:
  - "7.21 Error Component\n   The Error Component contains information about Technical\
    \ Errors (see\n   section 4.1) in an IOTP Message which has been received by one\
    \ of the\n   Trading Roles involved in the trade.\n   For clarity two phrases\
    \ are defined which are used in the description\n   of an Error Component:\n \
    \  o  message in error. An IOTP message which contains or causes an\n      error\
    \ of some kind\n   o  message reporting the error. An IOTP message that contains\
    \ an\n      Error Component that describes the error found in a message in\n \
    \     error.\n   The definition of the Error Component is as follows.\n   <!ELEMENT\
    \ ErrorComp (ErrorLocation+, PackagedContent*) >\n   <!ATTLIST ErrorComp\n   \
    \ ID                 NMTOKEN #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    ErrorCode          NMTOKEN #REQUIRED\n    ErrorDesc          CDATA   #REQUIRED\n\
    \    Severity (Warning|TransientError|HardError) #REQUIRED\n    MinRetrySecs \
    \      CDATA   #IMPLIED\n    SwVendorErrorRef   CDATA   #IMPLIED >\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the Error\n   \
    \                   Component within the IOTP Transaction.\n   xml:lang      \
    \     Defines the language used by attributes or child\n                     \
    \ elements within this component, unless overridden\n                      by\
    \ an xml:lang attribute on a child element. See\n                      section\
    \ 3.8 Identifying Languages.\n   ErrorCode          Contains an error code which\
    \ indicates the nature\n                      of the error in the message in error.\
    \ Valid values\n                      for the ErrorCode are given in section 7.21.2\n\
    \                      Error Codes.\n   ErrorDesc          Contains a narrative\
    \ description of the error in\n                      the language defined by xml:lang.\
    \ The content of\n                      this attribute is defined by the vendor/developer\n\
    \                      of the software which generated the Error\n           \
    \           Component\n   Severity           Indicates the severity of the error.\
    \  Valid values\n                      are:\n                       o Warning.\
    \ This indicates that although there is\n                         a message in\
    \ error the IOTP Transaction can\n                         still continue.\n \
    \                      o TransientError. This indicates that the error\n     \
    \                    in the message in error may be recovered if the\n       \
    \                  message in error  that is referred to by the\n            \
    \             ErrorLocation element is resent\n                       o HardError.\
    \ This indicates that there is an\n                         unrecoverable error\
    \ in the message in error and\n                         the IOTP Transaction must\
    \ stop.\n   MinRetrySecs       This attribute should be present if Severity is\n\
    \                      set to TransientError. It is the minimum number of\n  \
    \                    whole seconds which the IOTP aware application\n        \
    \              which received the message reporting the error\n              \
    \        should wait before re-sending the message in error\n                \
    \      identified by the ErrorLocation element.\n                      If Severity\
    \ is not set to TransientError then the\n                      value of this attribute\
    \ is ignored.\n   SwVendorErrorRef   This attribute is a reference whose value\
    \ is set\n                      by the vendor/developer of the software which\n\
    \                      generated the Error Component. It should contain\n    \
    \                  data which enables the vendor to identify the\n           \
    \           precise location in their software and the set of\n              \
    \        circumstances which caused the software to\n                      generate\
    \ a message reporting the error. See also\n                      the SoftwareId\
    \ attribute of the Message Id element\n                      in the Transaction\
    \ Reference Block (section 3.3).\n   Content:\n   ErrorLocation      This identifies\
    \ the IOTP Transaction Id of the\n                      message in error  and,\
    \ where possible, the element\n                      and attribute in the message\
    \ in error that caused\n                      the Error Component to be generated.\n\
    \                      If the Severity of the error is not\n                 \
    \     TransientError, more than one ErrorLocation may be\n                   \
    \   specified as appropriate depending on the nature\n                      of\
    \ the error (see section 7.21.2 Error Codes) and\n                      at the\
    \ discretion of  the vendor/developer of the\n                      IOTP Aware\
    \ Application.\n   PackagedContent    This contains additional data which can\
    \ be used to\n                      understand the error. Its content may vary\
    \ as\n                      appropriate depending on the nature of the error\n\
    \                      (see section 7.21.2 Error Codes) and at the\n         \
    \             discretion of the vendor/developer of the IOTP\n               \
    \       Aware Application. For a definition of\n                      PackagedContent\
    \ see section 3.7.\n"
- title: 7.21.1 Error Processing Guidelines
  contents:
  - "7.21.1 Error Processing Guidelines\n   If there is more than one Error Component\
    \ in a message reporting the\n   error, carry out the actions appropriate for\
    \ the Error Component with\n   the highest severity. In this context, HardError\
    \ has a higher\n   severity than TransientError, which has a higher severity than\n\
    \   Warning.\n"
- title: 7.21.1.1 Severity - Warning
  contents:
  - "7.21.1.1 Severity - Warning\n   If an IOTP aware application is generating a\
    \ message reporting the\n   error with an Error Component where the Severity attribute\
    \ is set to\n   Warning, then if the message reporting the error does not contain\n\
    \   another Error Component with a severity higher than Warning, the IOTP\n  \
    \ Message must also include the Trading Blocks and Trading Components\n   that\
    \ would have been included if no error was being reported.\n   If a message reporting\
    \ the error is received with an Error Component\n   where Severity is set to Warning,\
    \ then:\n   o  it is recommended that information about the error is either\n\
    \      logged, or otherwise reported to the user,\n   o  the implementer of the\
    \ IOTP aware application must either, at\n      their or the user's discretion:\n\
    \      -  continue the IOTP transaction as normal, or\n      -  fail the IOTP\
    \ transaction by generating a message reporting the\n         error with an Error\
    \ Component with Severity set to HardError\n         (see section 7.21.1.3).\n\
    \   If the intention is to continue the IOTP transaction then, if there\n   are\
    \ no other Error Components with a higher severity, check that the\n   necessary\
    \ Trading Blocks and Trading Components for normal processing\n   of the transaction\
    \ to continue are present. If they are not then\n   generate a message reporting\
    \ the error with an Error Component with\n   Severity set to HardError.\n"
- title: 7.21.1.2 Severity - Transient Error
  contents:
  - "7.21.1.2 Severity - Transient Error\n   If an IOTP Aware Application is generating\
    \ a message reporting the\n   error with an Error Component where the Severity\
    \ attribute is set to\n   TransientError, then there should be only one Error\
    \ Component in the\n   message reporting the error. In addition, the MinRetrySecs\
    \ attribute\n   should be present.\n   If a message reporting the error is received\
    \ with an Error Component\n   where Severity is set to TransientError then:\n\
    \   o  if the MinRetrySecs attribute is present and a valid number, then\n   \
    \   use the MinRetrySecs value given. Otherwise if MinRetrySecs is\n      missing\
    \ or is invalid, then:\n      -  generate a message reporting the error containing\
    \ an Error\n         Component with a Severity of Warning and send it on the next\n\
    \         IOTP message (if any) to be sent to the Trading Role which sent\n  \
    \       the message reporting the error with the invalid MinRetrySecs,\n     \
    \    and\n      -  use a value for MinRetrySecs which is set by the\n        \
    \ vendor/developer of the IOTP Aware Application.\n   o  check that only one ErrorLocation\
    \ element is contained within the\n      Error Component and that it refers to\
    \ an IOTP Message which was\n      sent by the recipient of the Error Component\
    \ with a Severity of\n      TransientError. If more than one ErrorLocation is\
    \ present then\n      generate a message reporting the error with a Severity of\n\
    \      HardError.\n"
- title: 7.21.1.3 Severity - Hard Error
  contents:
  - "7.21.1.3 Severity - Hard Error\n   If an IOTP Aware Application is generating\
    \ a message reporting the\n   error with an Error Component where the Severity\
    \ attribute set to\n   HardError, then there should be only one Error Component\
    \ in the\n   message reporting the error.\n   If a message reporting the error\
    \ is received with an Error Component\n   where Severity is set to HardError then\
    \ terminate the IOTP\n   Transaction.\n"
- title: 7.21.2 Error Codes
  contents:
  - "7.21.2 Error Codes\n   The following table contains the valid values for the\
    \ ErrorCode\n   attribute of the Error Component. The first sentence of the\n\
    \   description contains the text that should be used to describe the\n   error\
    \ when displayed or otherwise reported. Individual\n   implementations may translate\
    \ this into alternative languages at\n   their discretion.\n   An Error Code must\
    \ not be more that 14 characters long.\n        Value                        \
    \   Description\n   Reserved        Reserved. This error is reserved by the\n\
    \                   vendor/developer of the software. Contact the\n          \
    \         vendor/developer of the software for more information\n            \
    \       See the SoftwareId attribute of the Message Id\n                   element\
    \ in the Transaction Reference Block(section\n                   3.3).\n   XmlNotWellFrmd\
    \  XML not well formed. The XML document is not well\n                   formed.\
    \ See [XML] for the meaning of \"well formed\".\n                   Even if the\
    \ XML is not well formed, it should still\n                   be scanned to find\
    \ the Transaction Reference Block so\n                   that a properly formed\
    \ Error Response may be\n                   generated.\n   XmlNotValid     XML\
    \ not valid. The XML document is well formed but\n                   the document\
    \ is not valid. See [XML] for the meaning\n                   of \"valid\". Specifically:\n\
    \                    o the XML document does not comply with the\n           \
    \          constraints defined in the IOTP document type\n                   \
    \  declaration (DTD) (see section 13 Internet Open\n                     Trading\
    \ Protocol Data Type Definition), and\n                    o the XML document\
    \ does not comply with the\n                     constraints defined in the document\
    \ type\n                     declaration of any additional [XML Namespace] that\n\
    \                     are declared.\n                   As for XML not well formed,\
    \ attempts should still be\n                   made to extract the Transaction\
    \ Reference Block so\n                   that a properly formed Error Response\
    \ may be\n                   generated.\n   ElUnexpected    Unexpected element.\
    \ Although the XML document is well\n                   formed and valid, an element\
    \ is present that is not\n                   expected in the particular context\
    \ according to the\n                   rules and constraints contained in this\n\
    \                   specification.\n   ElNotSupp       Element not supported.\
    \ Although the document is well\n                   formed and valid, an element\
    \ is present that:\n                    o is consistent with the rules and constraints\n\
    \                     contained in this specification, but\n                 \
    \   o is not supported by the IOTP Aware Application\n                     which\
    \ is processing the IOTP Message.\n   ElMissing       Element missing. Although\
    \ the document is well formed\n                   and valid, an element is missing\
    \ that should have\n                   been present if the rules and constraints\
    \ contained\n                   in this specification are followed.\n        \
    \           In this case set the PackagedContent of the Error\n              \
    \     Component to the type of the missing element.\n   ElContIllegal   Element\
    \ content illegal. Although the document is\n                   well formed and\
    \ valid, the element Content contains\n                   values which do not\
    \ conform to the rules and\n                   constraints contained in this specification.\n\
    \   EncapProtErr    Encapsulated protocol error. Although the document is\n  \
    \                 well formed and valid, the PackagedContent of an\n         \
    \          element contains data from an encapsulated protocol\n             \
    \      which contains errors.\n   AttUnexpected   Unexpected attribute. Although\
    \ the XML document is\n                   well formed and valid, the presence\
    \ of the attribute\n                   is not expected in the particular context\
    \ according\n                   to the rules and constraints contained in this\n\
    \                   specification.\n   AttNotSupp      Attribute not supported.\
    \ Although the XML document is\n                   well formed and valid, and\
    \ the presence of the\n                   attribute in an element is consistent\
    \ with the rules\n                   and constraints contained in this specification,\
    \ it\n                   is not supported by the IOTP Aware Application which\n\
    \                   is processing the IOTP Message.\n   AttMissing      Attribute\
    \ missing. Although the document is well\n                   formed and valid,\
    \ an attribute is missing that should\n                   have been present if\
    \ the rules and constraints\n                   contained in this specification\
    \ are followed.\n                   In this case set the PackagedContent of the\
    \ Error\n                   Component to the type of the missing attribute.\n\
    \   AttValIllegal   Attribute value illegal. The attribute contains a\n      \
    \             value which does not conform to the rules and\n                \
    \   constraints contained in this specification.\n   AttValNotRecog  Attribute\
    \ Value Not Recognised. The attribute\n                   contains a value which\
    \ the IOTP Aware Application\n                   generating the message reporting\
    \ the error could not\n                   recognise.\n   MsgTooLarge     Message\
    \ too large. The message is too large to be\n                   processed by the\
    \ IOTP Aware Application.\n   ElTooLarge      Element too large. The element is\
    \ too large to be\n                   processed by the IOTP Aware Application\n\
    \   ValueTooSmall   Value too small or early. The value of all or part of\n  \
    \                 the Content of an element or an attribute, although\n      \
    \             valid, is too small.\n   ValueTooLarge   Value too large or in the\
    \ future. The value of all or\n                   part of the Content of an element\
    \ or an attribute,\n                   although valid, is too large.\n   ElInconsistent\
    \  Element Inconsistent. Although the document is well\n                   formed\
    \ and valid, according to the rules and\n                   constraints contained\
    \ in this specification:\n                    o the content of an element is inconsistent\
    \ with the\n                     content of other elements or their attributes,\
    \ or\n                    o the value of an attribute is inconsistent with the\n\
    \                     value of one or more other attributes.\n               \
    \    In this case create ErrorLocation elements which\n                   identify\
    \ all the attributes or elements which are\n                   inconsistent.\n\
    \   TransportError  Transport Error. This error code is used to indicate\n   \
    \                that there is a problem with the Transport Mechanism\n      \
    \             which is preventing the message from being received.\n         \
    \          It is typically associated with a Transient Error.\n              \
    \     Explanation of the Transport Error is contained\n                   within\
    \ the ErrorDesc attribute. The values which can\n                   be used inside\
    \ ErrorDesc with a TransportError is\n                   specified in the IOTP\
    \ supplement for the Transport\n                   mechanism.\n   MsgBeingProc\
    \    Message Being Processed. This error code is only used\n                 \
    \  with a Severity of Transient Error. It indicates that\n                   the\
    \ previous message, which may be an exchange\n                   message or a\
    \ request message, is being processed and,\n                   if no response\
    \ is received by the time indicated by\n                   the MinRetrySecs attribute,\
    \ then the original message\n                   should be resent.\n   SystemBusy\
    \      System Busy. This error code is only used with a\n                   Severity\
    \ of Transient Error. It indicates that the\n                   server that received\
    \ a message is currently too busy\n                   to handle the message. If\
    \ no response is received by\n                   the time indicated by the MinRetrySecs\
    \ attribute,\n                   then the original message should be resent.\n\
    \   Note: If the server/system handling the Transport Mechanism (e.g.,\n   HTTP)\
    \ is busy then a Transport Specific error message should be used\n   instead of\
    \ an IOTP Error message. This code should be used in\n   association with IOTP\
    \ servers/systems or other servers/systems to\n   which the IOTP server is connected.\n\
    \   UnknownError    Unknown Error. Indicates that the transaction cannot\n   \
    \                complete for some reason that is not covered\n              \
    \     explicitly by any of the other errors.  The ErrorDesc\n                \
    \   attribute should be used to indicate the nature of\n                   the\
    \ problem.\n                   This could be used to indicate, for example, an\n\
    \                   internal error in a backend server or client process\n   \
    \                of some kind.\n"
- title: 7.21.3 Error Location Element
  contents:
  - "7.21.3 Error Location Element\n   An Error Location Element identifies an element\
    \ and optionally an\n   attribute in the message in error which is associated\
    \ with the error.\n   It contains a reference to the IOTP Message, Trading Block,\
    \ Trading\n   Component, element and attribute, which is in error.\n   <!ELEMENT\
    \ ErrorLocation EMPTY >\n   <!ATTLIST ErrorLocation\n    ElementType        NMTOKEN\
    \ #REQUIRED\n    IotpMsgRef         NMTOKEN #IMPLIED\n    BlkRef             NMTOKEN\
    \ #IMPLIED\n    CompRef            NMTOKEN #IMPLIED\n    ElementRef         NMTOKEN\
    \ #IMPLIED\n    AttName            NMTOKEN #IMPLIED >\n   Attributes:\n   ElementType\
    \        This is the name of the type of the element where\n                 \
    \     the error is located. For example if the element\n                     \
    \ was declared as <!ELEMENT Org ... then its name is\n                      \"\
    Org\".\n   IotpMsgRef         This is the value of the ID attribute of the of\n\
    \                      the Message Id Component (see section 3.3.2) of\n     \
    \                 the message in error to which this Error Component\n       \
    \               applies.\n   BlkRef             If the error is associated with\
    \ a specific Trading\n                      Block, then this is the value of the\
    \ ID attribute\n                      of the Trading Block where the error is\
    \ located.\n   CompRef            If the error is associated with a specific Trading\n\
    \                      Component, then this is the value of the ID\n         \
    \             attribute of the Trading Component where the error\n           \
    \           is located.\n   ElementRef         If the error is associated with\
    \ a specific element\n                      within a Trading Component then, if\
    \ the element\n                      has an attribute with an \"attribute type\"\
    \ (see\n                      [XML]) of \"ID\", then this is the value of that\n\
    \                      attribute.\n   AttName            If the error is associated\
    \ with the value of an\n                      attribute, then this is the name\
    \ of that\n                      attribute. In this case the PackagedContent of\
    \ the\n                      Error Component should contain the value of the\n\
    \                      attribute.\n   Note that as many as the attributes as possible\
    \ should be included.\n   For example if an attribute in a child element of a\
    \ Trading Component\n   contains an incorrect value, then all the attributes of\
    \ ErrorLocation\n   should be present.\n"
- title: 8. Trading Blocks
  contents:
  - "8. Trading Blocks\n   Trading Blocks are child elements of the top level IOTP\
    \ Messages that\n   are sent in the form of [XML] documents directly between the\n\
    \   different Trading Roles that are taking part in a trade.\n   Each Trading\
    \ Blocks consist of one or more Trading Components (see\n   section 7).  This\
    \ is illustrated in the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \             IOTP MESSAGE  <-----------IOTP Message - an XML Document\n     \
    \         |                        which is transported between the\n        \
    \      |                        Trading Roles\n              |-Trans Ref Block\
    \ <----- Trans Ref Block - contains\n              |  |                     information\
    \ which describes the\n              |  |                     IOTP Transaction\
    \ and the IOTP\n              |  |                     Message.\n            \
    \  |  |-Trans Id Comp. <--- Transaction Id Component -\n              |  |   \
    \                  uniquely identifies the IOTP\n              |  |          \
    \           Transaction. The Trans Id\n              |  |                    \
    \ Components are the same across\n              |  |                     all IOTP\
    \ messages that comprise a\n              |  |                     single IOTP\
    \ transaction.\n              |  |-Msg Id Comp. <----- Message Id Component -\
    \ identifies\n              |                        and describes an IOTP Message\n\
    \              |                        within an IOTP Transaction\n         \
    \     |-Signature Block <----- Signature Block (optional) -\n              | \
    \ |                     contains one or more Signature\n              |  |   \
    \                  Components and their associated\n              |  |       \
    \              Certificates\n              |  |-Signature Comp. <-- Signature\
    \ Component - contains\n              |  |                     digital signatures.\
    \ Signatures\n              |  |                     may sign digests of the Trans\
    \ Ref\n              |  |                     Block and any Trading Component\n\
    \              |  |                     in any IOTP Message in the same\n    \
    \          |  |                     IOTP Transaction.\n              |  |-Certificate\
    \ Comp. <-Certificate Component. Used to\n              |                    \
    \    check the signature. (Optional)\n      ------> |-Trading Block <--------Trading\
    \ Block - an XML Element\n     |        |  |-Trading Comp.       within an IOTP\
    \ Message that\n   Trading    |  |-Trading Comp.       contains a predefined set\
    \ of\n   Blocks     |  |-Trading Comp.       Trading Components\n     |      \
    \  |  |-Trading Comp.\n     |        |  |-Trading Comp. <-----Trading Components\
    \ - XML Elements\n     |        |                        within a Trading Block\
    \ that\n      ------> |-Trading Block          contain a predefined set of XML\n\
    \              |  |-Trading Comp.       elements and attributes\n            \
    \  |  |-Trading Comp.       containing information required\n              | \
    \ |-Trading Comp.       to support a Trading Exchange\n              |  |-Trading\
    \ Comp.\n              |  |-Trading Comp.\n              |\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                            Figure 16 Trading Blocks\n   Trading Blocks are defined\
    \ as part of the definition of an IOTP\n   Message (see section 3.1.1). The definition\
    \ of an IOTP Message\n   element is repeated here:\n   <!ELEMENT IotpMessage\n\
    \      ( TransRefBlk,\n        SigBlk?,\n        ErrorBlk?,\n        ( AuthReqBlk\
    \ |\n          AuthRespBlk |\n          AuthStatusBlk |\n          CancelBlk |\n\
    \          DeliveryReqBlk |\n          DeliveryRespBlk |\n          InquiryReqBlk\
    \ |\n          InquiryRespBlk |\n          OfferRespBlk |\n          PayExchBlk\
    \ |\n          PayReqBlk |\n          PayRespBlk |\n          PingReqBlk |\n \
    \         PingRespBlk |\n          TpoBlk |\n          TpoSelectionBlk\n     \
    \   )*\n      ) >\n   The remainder of this section defines the Trading Blocks\
    \ in this\n   version of IOTP. They are:\n   o  Authentication Request Block\n\
    \   o  Authentication Response Block\n   o  Authentication Status Block\n   o\
    \  Cancel Block\n   o  Delivery Request Block\n   o  Delivery Response Block\n\
    \   o  Error Block\n   o  Inquiry Request Block\n   o  Inquiry Response Block\n\
    \   o  Offer Response Block\n   o  Payment Exchange Block\n   o  Payment Request\
    \ Block\n   o  Payment Response Block\n   o  Signature Block\n   o  Trading Protocol\
    \ Options Block\n   o  TPO Selection Block\n   The Transaction Reference Block\
    \ is described in section 3.3.\n"
- title: 8.1 Trading Protocol Options Block
  contents:
  - "8.1 Trading Protocol Options Block\n   The TPO Trading Block contains options\
    \ which apply to the IOTP\n   Transaction. The definition of a TPO Trading Block\
    \ is as follows.\n   <!ELEMENT TpoBlk ( ProtocolOptions, BrandList*, Org* ) >\n\
    \   <!ATTLIST TpoBlk\n    ID                 ID      #REQUIRED >\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the\n         \
    \             Trading Protocol Options Block within the IOTP\n               \
    \       Transaction (see section 3.4 ID Attributes).\n   Content:\n   ProtocolOptions\
    \    The Protocol Options Component (see section\n                      7.1)defines\
    \ the options which apply to the whole\n                      IOTP Transaction\
    \ (see section 9).\n   BrandList          This Brand List Component contains one\
    \ or more\n                      payment brands and protocols which may be selected\n\
    \                      (see section 7.7).\n   Org                The Organisation\
    \ Components (see section 7.6)\n                      identify the Organisations\
    \ and their roles in the\n                      IOTP Transaction. The roles and\
    \ Organisations\n                      which must be present will depend on the\n\
    \                      particular type of IOTP Transaction. See the\n        \
    \              definition of each transaction in section 9.\n                \
    \      Internet Open Trading Protocol Transactions.\n   The TPO Block should contain:\n\
    \   o  the Protocol Options Component\n   o  the Organisation Component with the\
    \ Trading Role of Merchant\n   o  the Organisation Component with the Trading\
    \ Role of Consumer\n   o  optionally, the Organisation Component with the Trading\
    \ Role of\n      DeliverTo, if there is a Delivery included in the IOTP Transaction\n\
    \   o  Brand List Components for each payment in the IOTP Transaction\n   o  Organisation\
    \ Components for all the Payment Handlers involved\n   o  optionally, Organisation\
    \ Components for the Delivery Handler (if\n      any) for the transaction\n  \
    \ o  additional Organisation Components that the Merchant may want to\n      include.\
    \ For example\n      -  a Customer Care Provider\n      -  an Certificate Authority\
    \ that offers Merchant \"Credentials\" or\n         some other warranty on the\
    \ goods or services being offered.\n"
- title: 8.2 TPO Selection Block
  contents:
  - "8.2 TPO Selection Block\n   The TPO Selection Block contains the results of selections\
    \ made from\n   the options contained in the Trading Protocol Options Block (see\n\
    \   section 8.1).The definition of a TPO Selection Block is as follows.\n   <!ELEMENT\
    \ TpoSelectionBlk (BrandSelection+) >\n   <!ATTLIST TpoSelectionBlk\n    ID  \
    \               ID      #REQUIRED >\n   Attributes:\n   ID                 An\
    \ identifier which uniquely identifies the TPO\n                      Selection\
    \ Block within the IOTP Transaction.\n   Content:\n   BrandSelection     This\
    \ identifies the choice of payment brand and\n                      payment protocol\
    \ to be used in a payment within\n                      the IOTP Transaction.\
    \ There is one Brand Selection\n                      Component (see section 7.8)\
    \ for each payment to be\n                      made in the IOTP Transaction.\n\
    \   The TPO Selection Block should contain one Brand Selection Component\n   for\
    \ each Brand List in the TPO Block.\n"
- title: 8.3 Offer Response Block
  contents:
  - "8.3 Offer Response Block\n   The Offer Response Block contains details of the\
    \ goods, services,\n   amount, delivery instructions or financial transaction\
    \ which is to\n   take place.  Its definition is as follows.\n   <!ELEMENT OfferRespBlk\
    \ (Status, Order?, Payment*,\n                Delivery?, TradingRoleData*) >\n\
    \   <!ATTLIST OfferRespBlk\n    ID                 ID      #REQUIRED >\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the Offer\n   \
    \                   Response Block within the IOTP Transaction.\n   Content:\n\
    \   Status             Contains status information about the business\n      \
    \                success (see section 4.2) or failure of the\n               \
    \       generation of the Offer. Note that in an Offer\n                     \
    \ Response Block, a ProcessState of NotYetStarted or\n                      InProgress\
    \ are illegal values.\n   Order              The Order Component contains details\
    \ about the\n                      goods, services or financial transaction which\
    \ is\n                      taking place see section 7.5.\n                  \
    \    The Order Component must be present unless the\n                      ProcessState\
    \ attribute of the Status Component is\n                      set to Failed.\n\
    \   Payment            The Payment Components contain information about\n    \
    \                  the payments which are to be made see section 7.9.\n   Delivery\
    \           The Delivery Component contains details of the\n                 \
    \     delivery to be made (see section 7.13).\n   TradingRoleData    The Trading\
    \ Role Data Component contains opaque\n                      data which is needs\
    \ to be communicated between the\n                      Trading Roles involved\
    \ in an IOTP Transaction (see\n                      section 7.17).\n   The Offer\
    \ Response Block should contain:\n   o  the Order Component for the IOTP Transaction\n\
    \   o  Payment Components for each Payment in the IOTP Transaction\n   o  the\
    \ Delivery Component the IOTP Transaction requires (if any).\n"
- title: 8.4 Authentication Request Block
  contents:
  - "8.4 Authentication Request Block\n   The Authentication Request Block contains\
    \ the data which is used by\n   one Trading Role to obtain information about and\
    \ optionally\n   authenticate another Trading Role.\n   In outline it contains:\n\
    \   o  information about how the authentication itself will be carried\n     \
    \ out, and/or\n   o  a request for additional information about the Organisation\
    \ being\n      authenticated.\n   Its definition is as follows.\n   <!ELEMENT\
    \ AuthReqBlk (AuthReq*, TradingRoleInfoReq?) >\n   <!ATTLIST AuthReqBlk\n    ID\
    \                 ID      #REQUIRED >\n   Attributes:\n   ID                 An\
    \ identifier which uniquely identifies the\n                      Authentication\
    \ Request Block within the IOTP\n                      Transaction.\n   Content:\n\
    \   AuthReq             Each Authentication Request (see section 7.2)\n      \
    \                 component describes an alternative way in which\n          \
    \             the recipient of the Authentication Request may\n              \
    \         authenticate themselves by generating an\n                       Authentication\
    \ Response Component (see section\n                       7.3).\n            \
    \           If one Authentication Request Component is\n                     \
    \  present then that Authentication Request\n                       Component\
    \ should be used.\n                       If more than one Authentication Request\
    \ Component\n                       is present then the recipient should choose\
    \ one\n                       of the components based on personal preference of\n\
    \                       the recipient or their software.\n                   \
    \    If no Authentication Request Component is present\n                     \
    \  it means that the Authentication Request Block is\n                       requesting\
    \ the return of Organisation Components\n                       as specified in\
    \ the Trading Role Information\n                       Request Component.\n  \
    \ TradingRoleInfoReq  The Trading Role Information Request Component\n       \
    \                (see section 7.4) contains a list of Trading\n              \
    \         Roles about which information is being requested\n   There must be at\
    \ least one Component (either an Authentication\n   Request or a Trading Role\
    \ Information Request) within the\n   Authentication Block otherwise it is an\
    \ error.\n"
- title: 8.5 Authentication Response Block
  contents:
  - "8.5 Authentication Response Block\n   The Authentication Response Block contains\
    \ the response which results\n   from processing the Authentication Request Block.\
    \ Its definition is\n   as follows.\n   <!ELEMENT AuthRespBlk (AuthResp?, Org*)\
    \ >\n   <!ATTLIST AuthRespBlk\n    ID                 ID      #REQUIRED >\n  \
    \ Attributes:\n   ID                 An identifier which uniquely identifies the\n\
    \                      Authentication Response Block within the IOTP\n       \
    \               Transaction.\n   Content:\n   AuthResp           The optional\
    \ Authentication Response Component\n                      which contains the\
    \ results of processing the\n                      Authentication Request Component\
    \ - see section\n                      7.3.\n   Org                Optional Organisation\
    \ Components that contain\n                      information corresponding to\
    \ the Trading Roles as\n                      requested by the TradingRoleList\
    \ attribute of the\n                      Trading Role Information Request component.\n\
    \   The components present in the Authentication Response Block must\n   match\
    \ the requirement of the corresponding Authentication Request\n   Block otherwise\
    \ it is an error.\n"
- title: 8.6 Authentication Status Block
  contents:
  - "8.6 Authentication Status Block\n   The Authentication Status Block indicates\
    \ the success or failure of\n   the validation of an Authentication Response Block\
    \ by an\n   Authenticator. Its definition is as follows.\n   <!ELEMENT AuthStatusBlk\
    \ (Status) >\n   <!ATTLIST AuthStatusBlk\n    ID                 ID      #REQUIRED\
    \ >\n   Attributes:\n   ID                 An identifier which uniquely identifies\
    \ the\n                      Authentication Status Block within the IOTP\n   \
    \                   Transaction.\n   Content:\n   Status             Contains\
    \ status information about the business\n                      success (see section\
    \ 4.2) or failure of the\n                      authentication\n"
- title: 8.7 Payment Request Block
  contents:
  - "8.7 Payment Request Block\n   The Payment Request Block contains information\
    \ which requests that a\n   payment is started. Its definition is as follows.\n\
    \   <!ELEMENT PayReqBlk (Status+, BrandList, BrandSelection,\n        Payment,\
    \ PaySchemeData?, Org*, TradingRoleData*) >\n   <!ATTLIST PayReqBlk\n    ID  \
    \               ID      #REQUIRED >\n   Attributes:\n   ID                 An\
    \ identifier which uniquely identifies the\n                      Payment Request\
    \ Block within the IOTP Transaction.\n   Content:\n   Status             Contains\
    \ the Status Components (see section 7.13)\n                      of the responses\
    \ of the steps (e.g., an Offer\n                      Response and/or a Payment\
    \ Response) on which this\n                      step depends. It is used to indicate\
    \ the success\n                      or failure of those steps. Payment should\
    \ only\n                      occur if the previous steps were successful.\n \
    \  BrandList          The Brand List Component contains a list of one or\n   \
    \                   more payment brands and protocols which may be\n         \
    \             selected (see section 7.7).\n   BrandSelection     This identifies\
    \ the choice of payment brand, the\n                      payment protocol and\
    \ the Payment Handler to be\n                      used in a payment within the\
    \ IOTP Transaction.\n                      There is one Brand Selection Component\
    \ (see\n                      section 7.8) for each payment to be made in the\n\
    \                      IOTP Transaction.\n   Payment            The Payment Components\
    \ contain information about\n                      the payment which is being\
    \ made see section 7.9.\n   PaySchemeData      The Payment Scheme Component contains\
    \ payment\n                      scheme specific data see section 7.10.\n   Org\
    \                The Organisation Component contains details of\n            \
    \          Organisations involved in the payment (see section\n              \
    \        7.6). The Organisations present are dependent on\n                  \
    \    the IOTP Transaction and the data which is to be\n                      signed.\
    \ See section 6 Digital Signatures for more\n                      details.\n\
    \   TradingRoleData    The Trading Role Data Component contains opaque\n     \
    \                 data which is needs to be communicated between the\n       \
    \               Trading Roles involved in an IOTP Transaction (see\n         \
    \             section 7.17).\n   The Payment Request Block should contain:\n \
    \  o  the Organisation Component with a Trading Role of Merchant\n   o  the Organisation\
    \ Component with the Trading Role of Consumer\n   o  the Payment Component for\
    \ the Payment\n   o  the Brand List Component for the Payment\n   o  the Brand\
    \ Selection Component for the Brand List\n   o  the Organisation Component for\
    \ the Payment Handler of the Payment\n   o  the Organisation Component (if any)\
    \ for the Organisation which\n      carried out the previous step, for example\
    \ another Payment Handler\n   o  the Organisation Component for the Organisation\
    \ which is to carry\n      out the next step, if any. This may be, for example,\
    \ either a\n      Delivery Handler or a Payment Handler.\n   o  the Organisation\
    \ Components for any additional Organisations that\n      the Merchant has included\
    \ in the Offer Response Block\n   o  an Optional Payment Scheme Data Component,\
    \ if required by the\n      Payment Method as defined in the IOTP supplement for\
    \ the payment\n      method\n   o  any Trading Role Data Components that may be\
    \ required (see section\n      7.17.1).\n"
- title: 8.8 Payment Exchange Block
  contents:
  - "8.8 Payment Exchange Block\n   The Payment Exchange Block contains payment scheme\
    \ specific data\n   which is exchanged between two of the roles in a trade. Its\n\
    \   definition is as follows.\n   <!ELEMENT PayExchBlk (PaySchemeData+) >\n  \
    \ <!ATTLIST PayExchBlk\n    ID                 ID      #REQUIRED >\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the\n         \
    \             Payment Exchange Block within the IOTP\n                      Transaction.\n\
    \   Content:\n   PaySchemeData      This Trading Component contains payment scheme\n\
    \                      specific data see section 7.10 Payment Scheme\n       \
    \               Component.\n"
- title: 8.9 Payment Response Block
  contents:
  - "8.9 Payment Response Block\n   This Payment Response Block contains a information\
    \ about the Payment\n   Status, an optional Payment Receipt, and an optional payment\
    \ protocol\n   message. Its definition is as follows.\n   <!ELEMENT PayRespBlk\
    \ (Status, PayReceipt?, PaySchemeData?,\n        PaymentNote?, TradingRoleData*)\
    \ >\n   <!ATTLIST PayRespBlk\n    ID                 ID      #REQUIRED >\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the\n         \
    \             Payment Response Block within the IOTP\n                      Transaction.\n\
    \   Content:\n   Status             Contains status information about the business\n\
    \                      success (see section 4.2) or failure of the\n         \
    \             payment. Note that in a Pay Response Block, a\n                \
    \      ProcessState of NotYetStarted or InProgress are\n                     \
    \ illegal values.\n   PayReceipt         Contains payment scheme specific data\
    \ which can be\n                      used to verify the payment occurred. See\
    \ section\n                      7.11 Payment Receipt Component. It must be present\n\
    \                      if the ProcessState attribute of the Status\n         \
    \             Component is set to CompletedOk. PayReceipt is\n               \
    \       optional for other values as specified by the\n                      appropriate\
    \ Payment Scheme supplement.\n   PaySchemeData      Contains payment scheme specific\
    \ data see section,\n                      for example a payment protocol message.\
    \ See 7.10\n                      Payment Scheme Component.\n   PaymentNote  \
    \      Contains additional, non payment related,\n                      information\
    \ which the Payment Handler wants to\n                      provide to the Consumer.\
    \ For example, if a\n                      withdrawal or deposit were being made\
    \ then it\n                      could contain information on the remaining balance\n\
    \                      on the account after the transfer was complete.\n     \
    \                 See section 7.12 Payment Note Component.\n   TradingRoleData\
    \    The Trading Role Data Component contains opaque\n                      data\
    \ which is needs to be communicated between the\n                      Trading\
    \ Roles involved in an IOTP Transaction (see\n                      section 7.17).\n"
- title: 8.10 Delivery Request Block
  contents:
  - "8.10 Delivery Request Block\n   The Delivery Request Block contains details of\
    \ the goods or services\n   which are to be delivered together with a signature\
    \ which can be used\n   to check that delivery is authorised. Its definition is\
    \ as follows.\n   <!ELEMENT DeliveryReqBlk (Status+, Order, Org*, Delivery,\n\
    \        ConsumerDeliveryData?, TradingRoleData*) >\n   <!ATTLIST DeliveryReqBlk\n\
    \    ID                 ID      #REQUIRED >\n   Attributes:\n   ID           \
    \      An identifier which uniquely identifies the\n                      Delivery\
    \ Request Block within the IOTP\n                      Transaction.\n   Content:\n\
    \   Status                Contains the Status Components (see section\n      \
    \                   7.13) of the responses of the steps (e.g., a\n           \
    \              Payment Response) on which this step is\n                     \
    \    dependent. It is used to indicate the success\n                         or\
    \ failure of those steps. Delivery should only\n                         occur\
    \ if the previous steps were successful.\n   Order                 The Order Component\
    \ contains details about the\n                         goods, services or financial\
    \ transaction which\n                         is taking place see section 7.5.\n\
    \                         The Organisation Components (see section 7.6)\n    \
    \                     identify the Organisations and their roles in\n   Org  \
    \                 the IOTP Transaction. The roles and\n                      \
    \   Organisations which must be present will depend\n                        \
    \ on the particular type of IOTP Transaction. See\n                         the\
    \ definition of each transaction in section\n                         9. Internet\
    \ Open Trading Protocol Transactions.\n   Delivery              The Delivery Component\
    \ contains details of the\n                         delivery to be made (see section\
    \ 7.13).\n   ConsumerDeliveryData  Optional. Contains an identifier specified\
    \ by\n                         the Consumer which, if returned by the Delivery\n\
    \                         Handler will enable the Consumer to identify\n     \
    \                    which Delivery is being referred to.\n   TradingRoleData\
    \       The Trading Role Data Component contains opaque\n                    \
    \     data which is needs to be communicated between\n                       \
    \  the Trading Roles involved in an IOTP\n                         Transaction\
    \ (see section 7.17).\n   The Delivery Request Block contains:\n   o  the Organisation\
    \ Component with a Trading Role of Merchant\n   o  the Organisation Component\
    \ for the Consumer and DeliverTo Trading\n      Roles\n   o  the Delivery Component\
    \ for the Delivery\n   o  the Organisation Component for the Delivery Handler.\
    \ Specifically\n      the Organisation Component identified by the ActionOrgRef\n\
    \      attribute on the Delivery Component\n   o  the Organisation Component (if\
    \ any) for the Organisation which\n      carried out the previous step, for example\
    \ a Payment Handler\n   o  the Organisation Components for any additional Organisations\
    \ that\n      the Merchant has included in the Offer Response Block\n   o  any\
    \ Trading Role Data Components that may be required (see section\n      7.17.1).\n"
- title: 8.11 Delivery Response Block
  contents:
  - "8.11 Delivery Response Block\n   The Delivery Response Block contains a Delivery\
    \ Note containing\n   details on how the goods will be delivered. Its definition\
    \ is as\n   follows. Note that in a Delivery Response Block a Delivery Status\n\
    \   Element with a DeliveryStatusCode of NotYetStarted or InProgress is\n   invalid.\n\
    \   <!ELEMENT DeliveryRespBlk (Status, DeliveryNote) >\n   <!ATTLIST DeliveryRespBlk\n\
    \    ID                 ID      #REQUIRED >\n   Attributes:\n   ID           \
    \      An identifier which uniquely identifies the\n                      Delivery\
    \ Response Block within the IOTP\n                      Transaction.\n   Content:\n\
    \   Status             Contains status information about the business\n      \
    \                success (see section 4.2) or failure of the\n               \
    \       delivery.  Note that in a Delivery Response Block,\n                 \
    \     a ProcessState of NotYetStarted or InProgress are\n                    \
    \  illegal values.\n   DeliveryNote       The Delivery Note Component contains\
    \ details about\n                      how the goods or services will be delivered\
    \ (see\n                      section 7.15).\n"
- title: 8.12 Inquiry Request Trading Block
  contents:
  - "8.12 Inquiry Request Trading Block\n   The Inquiry Request Trading Block contains\
    \ an Inquiry Type Component\n   and an optional Payment Scheme Component to contain\
    \ payment scheme\n   specific inquiry messages.\n   <!ELEMENT InquiryReqBlk (\
    \ InquiryType, PaySchemeData? ) >\n   <!ATTLIST InquiryReqBlk\n    ID        \
    \         ID      #REQUIRED >\n   Attributes:\n   ID                 An identifier\
    \ which uniquely identifies the\n                      Inquiry Request Trading\
    \ Block within the IOTP\n                      Transaction.\n   Content:\n   InquiryType\
    \        Inquiry Type Component (see section 7.18) that\n                    \
    \  contains the type of inquiry.\n   PaySchemeData      Payment Scheme Component\
    \ (see section 7.10) that\n                      contains payment scheme specific\
    \ inquiry messages\n                      for inquiries on payments. This is present\
    \ when\n                      the Type attribute of Inquiry Type Component is\n\
    \                      Payment.\n"
- title: 8.13 Inquiry Response Trading Block
  contents:
  - "8.13 Inquiry Response Trading Block\n   The Inquiry Response Trading Block contains\
    \ a Status Component and an\n   optional Payment Scheme Component to contain payment\
    \ scheme specific\n   inquiry messages. Its purpose is to enquire on the current\
    \ status of\n   an IOTP transaction at a server.\n   <!ELEMENT InquiryRespBlk\
    \ (Status, PaySchemeData?) >\n   <!ATTLIST InquiryRespBlk\n    ID            \
    \     ID      #REQUIRED\n    LastReceivedIotpMsgRef NMTOKEN #IMPLIED\n    LastSentIotpMsgRef\
    \  NMTOKEN #IMPLIED >\n   Attributes:\n   ID                      An identifier\
    \ which uniquely identifies the\n                           Inquiry Response Trading\
    \ Block within the\n                           IOTP Transaction.\n   LastReceivedIotpMsgRef\
    \  Contains an Element Reference (see section\n                           3.5)\
    \ to the Message Id Component (see section\n                           3.3.2)\
    \ of the last message this server has\n                           received from\
    \ the Consumer. If there is no\n                           previously received\
    \ message from the Consumer\n                           in the pertinent transaction,\
    \ this attribute\n                           should be contain the value Null.\
    \ This\n                           attribute exists for debugging purposes.\n\
    \   LastSentIotpMsgRef      Contains an Element Reference (see section\n     \
    \                      3.5) to the Message Id Component (see section\n       \
    \                    3.3.2) of the last message this server has\n            \
    \               sent to the Consumer. If there is no\n                       \
    \    previously sent message to the Consumer in\n                           the\
    \ pertinent transaction, this attribute\n                           should contain\
    \ the value Null. This attribute\n                           exists for debugging\
    \ purposes.\n   Content:\n   Status             Contains status information about\
    \ the business\n                      success (see section 4.2) or failure of\
    \ a certain\n                      trading exchange (i.e., Offer, Payment, or\n\
    \                      Delivery).\n   PaySchemeData      Payment Scheme Component\
    \ (see section 7.10) that\n                      contains payment scheme specific\
    \ inquiry messages\n                      for inquiries on payments. This is present\
    \ when\n                      the Type attribute of StatusType attribute of the\n\
    \                      Status Component is set to Payment.\n"
- title: 8.14 Ping Request Block
  contents:
  - "8.14 Ping Request Block\n   The Ping Request Block is used to determine if a\
    \ Server is operating\n   and whether or not cryptography is compatible.\n   The\
    \ definition of a Ping Request Block is as follows.\n   <!ELEMENT PingReqBlk (Org*)>\n\
    \   <!ATTLIST PingReqBlk\n    ID                 ID      #REQUIRED>\n   Attributes:\n\
    \   ID                 An identifier which uniquely identifies the Ping\n    \
    \                  Request Trading Block within the IOTP Transaction.\n   Content:\n\
    \   Org                Optional Organisation Components (see section\n       \
    \               7.6).\n                      If no Organisation Component is present\
    \ then the\n                      Ping Request is anonymous and simply determines\
    \ if\n                      the server is operating.\n                      However\
    \ if Organisation Components are present,\n                      then it indicates\
    \ that the sender of the Ping\n                      Request wants to verify that\
    \ digital signatures\n                      can be handled.\n                \
    \      In this case the sender includes:\n                       o an Organisation\
    \ Component that identifies\n                         itself specifying the Trading\
    \ Role(s) it is\n                         taking in IOTP transactions (Merchant,\
    \ Payment\n                         Handler, etc.)\n                       o an\
    \ Organisation Component that identifies the\n                         intended\
    \ recipient of the message.\n                      These are then used to generate\
    \ a signature over\n                      the Ping Response Block.\n"
- title: 8.15 Ping Response Block
  contents:
  - "8.15 Ping Response Block\n   The Ping Response Trading Block provides the result\
    \ of a Ping\n   Request.\n   It contains an Organisation Component that identifies\
    \ the sender of\n   the Ping Response.\n   If the Ping Request to which this block\
    \ is a response contained\n   Organisation Components, then it also contains those\
    \ Organisation\n   Components.\n   <!ELEMENT PingRespBlk (Org+)>\n   <!ATTLIST\
    \ PingRespBlk\n    ID                 ID      #REQUIRED\n    PingStatusCode (Ok\
    \ | Busy | Down) #REQUIRED\n    SigVerifyStatusCode (Ok | NotSupported | Fail)\
    \ #IMPLIED\n    xml:lang           NMTOKEN #IMPLIED\n    PingStatusDesc     CDATA\
    \   #IMPLIED>\n   Attributes:\n   ID                   An identifier which uniquely\
    \ identifies the Ping\n                        Request Trading Block within the\
    \ IOTP\n                        Transaction.\n   PingStatusCode       Contains\
    \ a code which shows the status of the\n                        sender software\
    \ which processes IOTP messages.\n                        Valid values are:\n\
    \                         o Ok. Everything with the service is working\n     \
    \                     normally, including the signature\n                    \
    \      verification.\n                         o Busy. Things are working normally\
    \ but there\n                          may be some delays.\n                 \
    \        o Down. The server is not functioning fully but\n                   \
    \       can still provide a Ping response.\n   SigVerifyStatusCode  Contains a\
    \ code which shows the status of\n                        signature verification.\
    \ This is present only\n                        when the message containing the\
    \ Ping Request\n                        Block also contains a Signature Block.\
    \ Valid\n                        values are:\n                         o Ok. The\
    \ signature has successfully been\n                          verified and proved\
    \ compatible.\n                         o NotSupported The receiver of this Ping\n\
    \                          Request Block does not support validation of\n    \
    \                      signatures.\n                         o Fail. Signature\
    \ verification failed.\n   Xml:lang             Defines the language used in PingStatusDesc.\n\
    \                        This is present when PingStatusDesc is present.\n   PingStatusDesc\
    \       Contains a short description of the status of\n                      \
    \  the server which sends this Ping Response Block.\n                        Servers,\
    \ if their designers want, can use this\n                        attribute to\
    \ send more refined status\n                        information than PingStatusCode\
    \ which can be\n                        used for debugging purposes, for example.\n\
    \   Content:\n   Org                These are Organisation Components (see section\n\
    \                      7.6).\n                      The Organisation Components\
    \ of the sender of the\n                      Ping Response is always included\
    \ in addition to\n                      the Organisation Components sent in the\
    \ Ping\n                      Request.\n   Note: Ping Status Code values do not\
    \ include a value such as Fail,\n   since, when the software receiving the Ping\
    \ Request message is not\n   working at all, no Ping Response message will be\
    \ sent back.\n"
- title: 8.16 Signature Block
  contents:
  - "8.16 Signature Block\n   The Signature Block contains one or more Signature Components\
    \ and\n   associated Certificates (if required) which sign data associated with\n\
    \   the IOTP Transaction. For a general discussion and introduction to\n   how\
    \ IOTP uses signatures, see section 6 Digital Signatures. The\n   definition of\
    \ the Signature Component and certificates is contained\n   in the paper \"Digital\
    \ Signatures for the Internet Open Trading\n   Protocol\", see [IOTPDSIG].  Descriptions\
    \ of how these are used by\n   IOTP is contained in sections 7.19 and 7.20.\n\
    \   The definition of a Signature Block is as follows:\n   <!ELEMENT IotpSignatures\
    \ (Signature+, Certificate*) >\n   <!ATTLIST IotpSignatures\n     ID         \
    \       ID      #IMPLIED >\n   Attributes:\n   ID                 An identifier\
    \ which uniquely identifies the\n                      Signature Block within\
    \ the IOTP Transaction.\n   Content:\n   Signature          A Signature Component.\
    \ See section 7.19.\n   Certificate        A Certificate Component. See section\
    \ 7.20.\n   The contents of a Signature Block depends on the Trading Block that\n\
    \   is contained in the same IOTP Message as the Signature Block.\n"
- title: 8.16.1 Signature Block with Offer Response
  contents:
  - "8.16.1 Signature Block with Offer Response\n   A Signature Block which is in\
    \ the same message as an Offer Response\n   Block contains just an Offer Response\
    \ Signature Component (see\n   section 7.19.2).\n"
- title: 8.16.2 Signature Block with Payment Request
  contents:
  - "8.16.2 Signature Block with Payment Request\n   A Signature Block which is in\
    \ the same message as a Payment Request\n   Block contains:\n   o  an Offer Response\
    \ Signature Component (see section 7.19.2), and\n   o  if the Payment is dependent\
    \ on an earlier step (as indicated by\n      the StartAfter attribute on the Payment\
    \ Component), then the\n      Payment Receipt Signature Component (see section\
    \ 7.19.3) generated\n      by the previous step\n"
- title: 8.16.3 Signature Block with Payment Response
  contents:
  - "8.16.3 Signature Block with Payment Response\n      A Signature Block which is\
    \ in the same message as a Payment\n      Response Block contains just a Payment\
    \ Receipt Signature Component\n      (see section 7.19.3) generated by the step.\n"
- title: 8.16.4 Signature Block with Delivery Request
  contents:
  - "8.16.4 Signature Block with Delivery Request\n      A Signature Block which is\
    \ in the same message as a Delivery\n      Request Block contains:\n   o  an Offer\
    \ Response Signature Component (see section 7.19.2), and\n   o  the Payment Receipt\
    \ Signature Component (see section 7.19.3)\n      generated by the previous step.\n"
- title: 8.16.5 Signature Block with Delivery Response
  contents:
  - "8.16.5 Signature Block with Delivery Response\n   A Signature Block which is\
    \ in the same message as a Delivery Response\n   Block contains just a Delivery\
    \ Response Signature component (see\n   section 7.19.4) generated by the step.\n"
- title: 8.17 Error Block
  contents:
  - "8.17 Error Block\n   The Error Trading Block contains one or more Error Components\
    \ (see\n   section 7.21) which contain information about Technical Errors (see\n\
    \   section 4.1) in an IOTP Message which has been received by one of the\n  \
    \ Trading Roles involved in the trade.\n   For clarity two phrases are defined\
    \ which are used in the description\n   of an Error Trading Block:\n   o  message\
    \ in error. An IOTP message which contains or causes an\n      error of some kind\n\
    \   o  message reporting the error. An IOTP message that contains an\n      Error\
    \ Trading Block that describes the error found in a message in\n      error.\n\
    \   An Error Trading Block may be contained in any message reporting the\n   error.\
    \ The action which then follows depends on the severity of the\n   error. See\
    \ the definition of an Error Component, for an explanation\n   of the different\
    \ types of severity and the actions which can then\n   occur.\n   in3 Note: Although,\
    \ an Error Trading Block can report multiple\n   different errors using multiple\
    \ Error Components, there is no\n   obligation on a developer of an IOTP Aware\
    \ Application to do so.\n   The structure of an Error Trading Block is as follows.\n\
    \   <!ELEMENT ErrorBlk (ErrorComp+, PaySchemeData*) >\n   <!ATTLIST ErrorBlk\n\
    \    ID                 ID      #REQUIRED >\n   Attributes:\n   ID           \
    \      An identifier which uniquely identifies the Error\n                   \
    \   Trading Block within the IOTP Transaction.\n   Content:\n   ErrorComp    \
    \      An Error Components (see section 7.21) that\n                      contains\
    \ information about an individual Technical\n                      Error.\n  \
    \ PaySchemeData      An optional Payment Scheme Component (see section\n     \
    \                 7.10) which contains a Payment Scheme Message. See\n       \
    \               the appropriate payment scheme supplement to\n               \
    \       determine whether or not this component needs to\n                   \
    \   be present and for the definition of what it must\n                      contain.\n"
- title: 8.18 Cancel Block
  contents:
  - "8.18 Cancel Block\n   The Cancel Block is used by one Trading Role to inform\
    \ any other that\n   a transaction has been cancelled. Example usage includes:\n\
    \   o  a Consumer Role informing a non-Consumer role that it no longer\n     \
    \ plans to continue with the transaction. This will allow the server\n      to\
    \ close down the transaction tidily without a waiting for a\n      time-out to\
    \ occur\n   o  a non-Consumer Role to inform a Consumer role that the Transaction\n\
    \      is being stopped. In this case, the Consumer is then unlikely to\n    \
    \  re-send the previous message that was sent in the mistaken\n      understanding\
    \ that the original was not received.\n   Its definition is as follows.\n   <!ELEMENT\
    \ CancelBlk (Status) >\n   <!ATTLIST CancelBlk\n    ID                 ID    \
    \  #REQUIRED >\n   Attributes:\n   ID                 An identifier which uniquely\
    \ identifies the Cancel\n                      Block within the IOTP Transaction.\n\
    \   Content:\n   Status             Contains status information indicating that\
    \ the\n                      IOTP transaction has been cancelled.\n"
- title: 9. Internet Open Trading Protocol Transactions
  contents:
  - "9. Internet Open Trading Protocol Transactions\n   The Baseline Internet Open\
    \ Trading Protocol supports three types of\n   transactions for different purposes.\
    \ These are\n   o  an Authentication IOTP transaction which supports authentication\n\
    \      of one party in a trade by another and/or requests information\n      about\
    \ another Trading Role\n   o  IOTP Transactions that involve one or more payments.\
    \ Specifically:\n      -  Deposit\n      -  Purchase\n      -  Refund\n      -\
    \  Withdrawal, and\n      -  Value Exchange\n   o  IOTP Transactions designed\
    \ to check the correct function of the\n      IOTP infrastructure. Specifically:\n\
    \      -  Transaction Status Inquiry, and\n      -  Ping\n   Although the Authentication\
    \ IOTP Transaction can operate on its own,\n   authentication can optionally precede\
    \ any of the \"payment\"\n   transactions.  Therefore, the rest of this section\
    \ is divided into\n   two parts covering:\n   o  Authentication and Payment transactions\
    \ (Authentication, Deposit,\n      Purchase, Refund, Withdrawal and Value Exchange)\n\
    \   o  Infrastructure Transactions (Transaction Status Inquiry and Ping)\n   \
    \   that are designed to support inquiries on whether or not a\n      transaction\
    \ has succeeded or a Trading Role's servers are\n      operating correctly, and\n"
- title: 9.1 Authentication and Payment Related IOTP Transactions
  contents:
  - "9.1 Authentication and Payment Related IOTP Transactions\n      The Authentication\
    \ and Payment related IOTP Transactions consist\n      of six Document Exchanges\
    \ which are then combined in sequence to\n      implement a specific transaction.\n\
    \      Generally, there is a close, but not exact, correspondence between\n  \
    \    a Document Exchange and a Trading Exchange. The main difference is\n    \
    \  that some Document Exchanges implement part or all of two Trading\n      Exchanges\
    \ simultaneously in order to minimise the number of actual\n      IOTP Messages\
    \ which must be sent over the Internet.\n      The six Document Exchanges are:\n\
    \   o  Authentication. This is a direct implementation of the\n      Authentication\
    \ Trading Exchange\n   o  Brand Dependent Offer. This is the Offer Trading Exchange\
    \ combined\n      with the Brand Selection part of the Payment Trading Exchange.\
    \ Its\n      purpose is to provide the Merchant with information on the Brand\n\
    \      selected so that the content of the Offer Response may be adapted\n   \
    \   accordingly\n   o  Brand Independent Offer. This is also an Offer Trading\
    \ Exchange.\n      However, in this instance, the content of the Offer Response\
    \ does\n      not depend on the Brand selected.\n   o  Payment. This is a direct\
    \ implementation of the Payment part of a\n      Payment Trading Exchange\n  \
    \ o  Delivery. This is a direct implementation of the Delivery Exchange\n   o\
    \  Delivery with Payment. This is an implementation of combined\n      Payment\
    \ and Delivery Trading Exchanges\n   These Document Exchanges are combined together\
    \ in different sequences\n   to implement each IOTP Transaction. The way in which\
    \ they may be\n   combined is illustrated by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \     START -----------------------------------------------------\n      |   \
    \                                                      v\n      |            \
    \                                    ----------------\n      |               \
    \                                | AUTHENTICATION |\n      |                 \
    \                               ----------------\n       --------------------------------------\
    \               |    |\n                       |                     |       \
    \       |    |\n                       |      -------------- | ------------- \
    \    |\n                       v      v              v      v            |\n \
    \                 -------------------     -----------------      |\n         \
    \        | BRAND INDEPENDENT |   | BRAND DEPENDENT |     |\n                 |\
    \       OFFER       |   |      OFFER      |     |\n                  -------------------\
    \     -----------------      |\n                        |    |               \
    \    |   |           |\n                        |     ---------------    |   |\
    \           |\n                        |                    |   |   |        \
    \   |\n                        |     -------------- | --    |           |\n  \
    \                      v    v               v       v           |\n          \
    \            ---------           --------------         |\n                  \
    \   | PAYMENT |         | PAYMENT WITH |        |\n                     | (first)\
    \ |         |   DELIVERY   |        |\n                      ---------       \
    \    --------------         |\n                          |                   \
    \   |               |\n              -----------------------------      |    \
    \           |\n              v                v           |     |            \
    \   |\n         ----------        ---------       |     |               |\n  \
    \      | DELIVERY |      | PAYMENT |      |     |               |\n        | \
    \         |      | {second)|      |     |               |\n         ----------\
    \        ---------       |     |               |\n              |            \
    \    |           |     |               v\n               ---------------------------------------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \         Figure 17 Payment and Authentication Message Flow Combinations\n   The\
    \ combinations of Document Exchanges that are valid depend on the\n   particular\
    \ IOTP transaction.\n   The remainder of this sub-section describes:\n   o  each\
    \ Document Exchange in more detail including descriptions of\n      the content\
    \ of each Trading Block in the Document Exchanges, and\n   o  descriptions of\
    \ how each IOTP Transaction uses the Document\n      Exchanges to effect the desired\
    \ result.\n   Note: The descriptions of the Document Exchanges which follow\n\
    \   describe the ways in which various Business Errors (see section 4.2)\n   are\
    \ handled. No reference is made however to the handling of\n   Technical Errors\
    \ (see section 4.1) in any of the messages since these\n   are handled the same\
    \ way irrespective of the context in which the\n   message is being sent. See\
    \ section 4 for more details.\n"
- title: 9.1.1 Authentication Document Exchange
  contents:
  - "9.1.1 Authentication Document Exchange\n   The Authentication Document Exchange\
    \ is a direct implementation of\n   the Authentication Trading Exchange (see section\
    \ 2.2.4). It involves:\n   o  an Authenticator - the Organisation which is requesting\
    \ the\n      authentication, and\n   o  an Authenticatee - the Organisation being\
    \ authenticated.\n   The authentication consists of:\n   o  an Authentication\
    \ Request being sent by the Authenticator to the\n      Authenticatee,\n   o \
    \ an Authentication Response being sent in return by the\n      Authenticatee\
    \ to the Authenticator which is then checked, and\n   o  an Authentication Status\
    \ being sent by the Authenticator to the\n      Authenticatee to provide an indication\
    \ of the success or failure\n      of the authentication.\n   An Authentication\
    \ Document Exchange also:\n   o  provides an Authenticatee with an Organisation\
    \ Component which\n      describes the Authenticator, and\n   o  optionally provides\
    \ the Authenticator with Organisation Components\n      which describe the Authenticatee.\n\
    \   The Authentication Request may also be digitally signed which allows\n   the\
    \ Authenticatee to verify the credentials of the Authenticator.\n   The IOTP Messages\
    \ which are involved are illustrated by the diagram\n   below.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \ Organisation 1\n (Authenticatee)\n     |   Organisation 2\n     |  (Authenticator)\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          First Organisation takes an action (for example by\n\
    \             pressing a button on an HTML page) which requires that\n       \
    \      the Organisation is authenticated\n     1 --> 2 Authentication Need (outside\
    \ scope of IOTP)\n 2.          The second Organisation generates: an Authentication\n\
    \             Request Block containing one or more Authentication\n          \
    \   Request Components and/or a Trading Role Information\n             Request\
    \ Component, then sends it to the first\n             Organisation\n     1 <--\
    \ 2 TPO & AUTHENTICATION REQUEST. IotpMsg: Trans Ref Block;\n             Signature\
    \ Block (optional); TPO Block; Auth Request Block\n 3.          IOTP aware application\
    \ started. If a Signature Block is\n             present, the first Organisation\
    \ may use this to check the\n             credentials of the second Organisation.\
    \ If credentials are\n             OK, the first Organisation selects an Authentication\n\
    \             Request to use (if present and more than one), then uses\n     \
    \        the authentication algorithm selected to generate an\n             Authentication\
    \ Response Block. If present, the Trading\n             Role Information Request\
    \ Component is used to generate\n             Organisation Components. Finally\
    \ a Signature Component is\n             created if required and all components\
    \ are then sent back\n             to the second Organisation for validation.\n\
    \     1 --> 2 AUTHENTICATION RESPONSE. IotpMsg; Trans Ref Block;\n           \
    \  Signature Block (optional) ; Auth Response Block\n 4.          The second Organisation\
    \ checks the Authentication\n             Response against the data in the Authentication\
    \ Request\n             Block to check that the first Organisation is who they\n\
    \             appear to be, and sends an Authentication Status Block to\n    \
    \         the first Organisation to indicate the result then\n             stops.\n\
    \     1 <-- 2 AUTHENTICATION STATUS. IotpMsg: Trans Ref Block;\n             Signature\
    \ Block (optional); Auth Response Block\n 5.          The first Organisation checks\
    \ the authentication Status\n             Block and optionally keeps information\
    \ on the IOTP\n             transaction for record keeping purposes and stops.\n\
    \ *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n    \
    \             Figure 18 Authentication Document Exchange\n"
- title: 9.1.1.1 Message Processing Guidelines
  contents:
  - "9.1.1.1 Message Processing Guidelines\n   On receiving a TPO & Authentication\
    \ Request IOTP Message (see below),\n   an Authenticatee may either:\n   o  generate\
    \ and send an Authentication Response IOTP Message back to\n      the Authenticator,\
    \ or\n   o  indicate failure to comply with the Authentication Request by\n  \
    \    sending a Cancel Block back to the Authenticator containing a\n      Status\
    \ Component with a StatusType of Authentication a\n      ProcessState of Failed\
    \ and the CompletionCode (see section 7.16.4)\n      set to either: AutEeCancel,\
    \ NoAuthReq, TradRolesIncon or\n      Unspecified.\n   On receiving an Authentication\
    \ Response IOTP Message (see below), an\n   Authenticator should send in return,\
    \ an Authentication Status IOTP\n   Message (see below) containing a Status Block\
    \ with a Status Component\n   where the StatusType is set to Authentication, and:\n\
    \   o  the ProcessState attribute of the Status Component is set to\n      CompletedOk\
    \ which indicates a successful completion, or\n   o  the ProcessState attribute\
    \ is set to Failed and the CompletionCode\n      attribute is set to either: AutOrCancel,\
    \ AuthFailed or Unspecified\n      which indicates a failed authentication,\n\
    \   On receiving an Authentication Status IOTP Message (see below), the\n   Authenticatee\
    \ should check the Status Component in the Status Block.\n   If this indicates:\n\
    \   o  a successful authentication, then the Authenticatee should either:\n  \
    \    -  continue with the next step in the IOTP Transaction of which\n       \
    \  the Authentication Document Exchange is part (if any), or\n      -  indicate\
    \ a failure to continue with the rest of the IOTP\n         Transaction, by sending\
    \ back to the Authenticator a Cancel\n         Block containing a Status Component\
    \ with a StatusType of\n         Authentication, a ProcessState of Failed and\
    \ the CompletionCode\n         (see section 7.16.4) set to AutEeCancel.\n   o\
    \  a failed authentication, then the failure should be reported to\n      the\
    \ Authenticatee and any further processing stopped.\n   If the Authenticator receives\
    \ an IOTP Message containing a Cancel\n   block from a Consumer, then the Authenticatee\
    \ may go to the\n   CancelNetLocn specified on the Trading Role Element in the\n\
    \   Organisation Component for the Authenticator contained in the Trading\n  \
    \ Protocol Options Block.\n"
- title: 9.1.1.2 TPO & Authentication Request IOTP Message
  contents:
  - "9.1.1.2 TPO & Authentication Request IOTP Message\n   Apart from a Transaction\
    \ Reference Block (see section 3.3), this\n   message consists of:\n   o a Trading\
    \ Protocol Options Block (see section 8.1)\n   o an Authentication Request Block\
    \ (see section 8.4), and\n   o an optional Signature Block (see section 8.16).\n\
    \   Each of these are described below.\n   TRADING PROTOCOL OPTIONS BLOCK\n  \
    \ The Trading Protocol Options Block (see section 8.1) must contain the\n   following\
    \ Trading Components:\n   o  one Protocol Options Component (see Section 7.1)\
    \ which defines the\n      options which apply to the whole Authentication Document\
    \ Exchange.\n   o  one Organisation Component (see section 7.6) which describes\
    \ the\n      Authenticator. The Trading Role on the Organisation Component\n \
    \     should indicate the role which the Authenticator is taking in the\n    \
    \  Trade, for example a Merchant or a Consumer.\n   AUTHENTICATION REQUEST BLOCK\n\
    \   The Authentication Request Block (see section 8.4) must contain the\n   following\
    \ Trading Components:\n   o  one Authentication Request Component (see section\
    \ 7.2), and\n   SIGNATURE BLOCK (AUTHENTICATION REQUEST)\n   If the Authentication\
    \ Request is being digitally signed then a\n   Signature Block must be included.\
    \ It contains Digests of the\n   following XML elements:\n   o  the Transaction\
    \ Reference Block (see section 3.3) for the IOTP\n      Message that contains\
    \ information that describes the IOTP Message\n      and IOTP Transaction\n  \
    \ o  the Transaction Id Component (see section 3.3.1) which globally\n      uniquely\
    \ identifies the IOTP Transaction\n   o  the following components of the TPO Block\
    \ :\n      -  the Protocol Options Component\n      -  the Organisation Component\n\
    \   o  the following components of the Authentication Request Block:\n      -\
    \  the Authentication Request Component\n      -  the Trading Role Information\
    \ Request Component\n"
- title: 9.1.1.3 Authentication Response IOTP Message
  contents:
  - "9.1.1.3 Authentication Response IOTP Message\n   Apart from a Transaction Reference\
    \ Block (see section 3.3), this\n   message consists of:\n   o  an Authentication\
    \ Response Block (see section 8.5), and\n   o  an optional Signature Block (see\
    \ section 8.16).\n   Each of these are described below.\n   AUTHENTICATION RESPONSE\
    \ BLOCK\n   The Authentication Response Block must contain the following Trading\n\
    \   Component:\n   o  one Authentication Response Component (see section 7.3)\n\
    \   o  one Organisation Component for every Trading Role identified in\n     \
    \ the TradingRoleList attribute of the Trading Role Information\n      Request\
    \ Component contained in the Authentication Request Block.\n   SIGNATURE BLOCK\
    \ (AUTHENTICATION RESPONSE)\n   If the Algorithm element (see section 12. IANA\
    \ Considerations) within\n   the Authentication Request Component contained in\
    \ the Authentication\n   Request Block indicates that the Authentication Response\
    \ should\n   consist of a digital signature then a Signature Block must be\n \
    \  included in the same IOTP message that contains an Authentication\n   Response\
    \ Block. The Signature Component contains Digest Elements for\n   the following\
    \ XML elements:\n   o  the Transaction Reference Block (see section 3.3) for the\
    \ IOTP\n      Message that contains information that describes the IOTP Message\n\
    \      and IOTP Transaction\n   o  the Transaction Id Component (see section 3.3.1)\
    \ which globally\n      uniquely identifies the IOTP Transaction\n   o  the following\
    \ components of the Authentication Request Block:\n      -  the Authentication\
    \ Request Component\n      -  the Trading Role Information Request Component\n\
    \   o  the Organisation Components contained in the Authentication\n      Response\
    \ Block\n   Note: It should not be assumed that all trading roles can support\
    \ the\n   signing of data. Particularly it should not be assumed that Consumers\n\
    \   support the signing of data.\n"
- title: 9.1.1.4 Authentication Status IOTP Message
  contents:
  - "9.1.1.4 Authentication Status IOTP Message\n   Apart from a Transaction Reference\
    \ Block (see section 3.3), this\n   message consists of:\n   o  an Authentication\
    \ Status Block (see section 8.5), and\n   o  an optional Signature Block (see\
    \ section 8.16).\n   Each of these are described below.\n   AUTHENTICATION STATUS\
    \ BLOCK\n   The Authentication Status Block (see section 8.6) must contain the\n\
    \   following Trading Components:\n   o  one Status Component (see section 7.16)\
    \ with a ProcessState\n      attribute set to CompletedOk.\n      SIGNATURE BLOCK\
    \ (AUTHENTICATION STATUS)\n      If the Authentication Status Block is being digitally\
    \ signed then\n      a Signature Block must be included that contains a Signature\n\
    \      Component with Digest elements for the following XML elements:\n   o  the\
    \ Transaction Reference Block (see section 3.3) for the IOTP\n      Message that\
    \ contains information that describes the IOTP Message\n      and IOTP Transaction\n\
    \   o  the Transaction Id Component (see section 3.3.1) which globally\n     \
    \ uniquely identifies the IOTP Transaction\n   o  the following components of\
    \ the Authentication Status Block:\n      -  the Status Component (see section\
    \ 7.16).\n   Note: If the Authentication Document Exchange is followed by an Offer\n\
    \   Document Exchange (see section 9.1.2) then the Authentication Status\n   Block\
    \ and the Signature Block (Authentication Status) may be combined\n   with either:\n\
    \   o a TPO IOTP Message (see section 9.1.2.3), or\n   o a TPO and Offer Response\
    \ IOTP Message (see section 9.1.2.6)\n"
- title: 9.1.2 Offer Document Exchange
  contents:
  - "9.1.2 Offer Document Exchange\n   The Offer Document Exchange occurs in two basic\
    \ forms:\n   o  Brand Dependent Offer Exchange. Where the content of the offer,\n\
    \      e.g., the order details, amount, delivery details, etc., are\n      dependent\
    \ on the payment brand and protocol selected by the\n      consumer, and\n   o\
    \  Brand Independent Offer Exchange. Where the content of the offer\n      is\
    \ not dependent on the payment brand and protocol selected.\n      Each of these\
    \ types of Offer Document Exchange may be preceded by\n      an Authentication\
    \ Document Exchange (see section 9.1.1).\n"
- title: 9.1.2.1 Brand Dependent Offer Document Exchange
  contents:
  - "9.1.2.1 Brand Dependent Offer Document Exchange\n      In a Brand Dependent Offer\
    \ Document Exchange the TPO Block and the\n      Offer Response Block are sent\
    \ separately by the Merchant to the\n      Consumer, i.e.:\n   o  the Brand List\
    \ Component is sent to the Consumer in a TPO Block,\n   o  the Consumer selects\
    \ a Payment Brand, Payment Protocol and\n      optionally a Currency and amount\
    \ from the Brand List Component\n   o  the Consumer sends the selected brand,\
    \ protocol and\n      currency/amount back to the Merchant in a TPO Selection\
    \ Block, and\n   o  the Merchant uses the information received to define the content\n\
    \      of and then send the Offer Response Block to the Consumer.\n This is illustrated\
    \ by the diagram below.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Consumer\n     |  Merchant\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          Consumer decides to trade and sends to the Merchant\n\
    \             information (e.g., using HTML) that enables the Merchant\n     \
    \        to create an offer,\n     C --> M Offer information - outside scope of\
    \ IOTP\n 2.          Merchant decides which payment brand protocols,\n       \
    \      currencies and amounts apply, places then in a Brand List\n           \
    \  Component inside a TPO Block and sends to Consumer\n     C <-- M TPO. IotpMsg:\
    \ Trans Ref Block; TPO Block\n 3.          IOTP aware application started. Consumer\
    \ selects the\n             payment brand, payment protocol and currency/amount\
    \ to\n             use. Records selection in a Brand Selection Component and\n\
    \             sends back to Merchant.\n     C --> M TPO SELECTION. IotpMsg: Trans\
    \ Ref Block; TPO Selection\n             Block\n 4.          Merchant uses selected\
    \ payment brand, payment protocol,\n             currency/amount and the offer\
    \ information to create an\n             Offer Response Block containing details\
    \ about the IOTP\n             Transaction including price, etc. Optionally signs\
    \ it and\n             sends to the Consumer\n     C <-- M OFFER RESPONSE. IotpMsg:\
    \ Trans Ref Block; Signature Block\n             (optional); Offer Response Block\n\
    \ 5.          Consumer checks the Offer is OK, then combines components\n    \
    \         from the TPO Block, the TPO Selection Block and the Offer\n        \
    \     Response Block to create the next IOTP Message for the\n             Transaction\
    \ and sends it together with the Signature\n             block if present to the\
    \ required Trading Role\n     CONTINUED ...\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \              Figure 19 Brand Dependent Offer Document Exchange\n   Note, a Consumer\
    \ identifies a Brand Dependent Offer Document\n   Exchange, by the absence of\
    \ an Offer Response Block in the first IOTP\n   Message.\n   MESSAGE PROCESSING\
    \ GUIDELINES\n   On receiving a TPO IOTP Message (see below), the Consumer may\
    \ either:\n   o  generate and send a TPO Selection IOTP Message back to the\n\
    \      Merchant, or\n   o  indicate failure to continue with the IOTP Transaction\
    \ by sending\n      a Cancel Block back to the Merchant containing a Status Component\n\
    \      with a StatusType of Offer, a ProcessState of Failed and the\n      CompletionCode\
    \ (see section 7.16.4) set to either: ConsCancelled\n      or Unspecified.\n \
    \  On receiving a TPO Selection IOTP Message (see below) the Merchant\n   may\
    \ either:\n   o  generate and send an Offer Response IOTP Message back to the\n\
    \      Consumer, or\n   o  indicate failure to continue with the IOTP Transaction\
    \ by sending\n      a Cancel Block back to the Consumer containing a Status Component\n\
    \      with a StatusType of Offer, a ProcessState of Failed and the\n      CompletionCode\
    \ (see section 7.16.4) set to either: MerchCancelled\n      or Unspecified.\n\
    \   On receiving an Offer Response IOTP Message (see below) the Consumer\n   may\
    \ either:\n   o  generate and send the next IOTP Message in the IOTP transaction\n\
    \      and send it to the required Trading Role. This is dependent on the\n  \
    \    IOTP Transaction, or\n   o  indicate failure to continue with the IOTP Transaction\
    \ by sending\n      a Cancel Block back to the Merchant containing a Status Component\n\
    \      with a StatusType of Offer, a ProcessState of Failed and the\n      CompletionCode\
    \ (see section 7.16.4) set to either: ConsCancelled\n      or Unspecified.\n \
    \  If the Merchant receives an IOTP Message containing a Cancel block,\n   then\
    \ the Consumer is likely to go to the CancelNetLocn specified on\n   the Trading\
    \ Role Element in the Organisation Component for the\n   Merchant.\n   If the\
    \ Consumer receives an IOTP Message containing a Cancel block,\n   then the information\
    \ contained in the IOTP Message should be reported\n   to the Consumer but no\
    \ further action taken.\n"
- title: 9.1.2.2 Brand Independent Offer Document Exchange
  contents:
  - "9.1.2.2 Brand Independent Offer Document Exchange\n   In a Brand Independent\
    \ Offer Document Exchange the TPO Block and the\n   Offer Response Block are sent\
    \ together by the Merchant to the\n   Consumer, i.e. there is one IOTP Message\
    \ that contains both a TPO\n   Block, and an Offer Response Block.\n   The message\
    \ flow is illustrated by the diagram below:\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \ Consumer\n     |  Merchant\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          Consumer decides to trade and sends to the Merchant\n\
    \             information (e.g., using HTML) that enables the Merchant\n     \
    \        to create an offer,\n     C --> M Offer information - outside scope of\
    \ IOTP\n 2.          Merchant decides which payment brand protocols,\n       \
    \      currencies and amounts apply, places then in a Brand List\n           \
    \  Component inside a TPO Block, creates an Offer Response\n             containing\
    \ details about the IOTP Transaction including\n             price, etc., optionally\
    \ signs it  and sends to Consumer\n     C <-- M TPO & OFFER RESPONSE. IotpMsg:\
    \ Trans Ref Block; Signature\n             Block; TPO Block; Offer Response Block\n\
    \ 3.          IOTP aware application started. Consumer selects the\n         \
    \    payment brand, payment protocol and currency/amount to\n             use.\
    \ Records selection in a Brand Selection Component,\n             checks offer\
    \ is OK, combines the Brand Selection\n             Component with information\
    \ from the TPO Block and Offer\n             Response Block to create the next\
    \ IOTP Message for the\n             Transaction and sends it together with the\
    \ Signature\n             Block if present to the required Trading Role.\n   \
    \  CONTINUED ...\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                 Figure 20 Brand Independent Offer Exchange\n   Note that a Brand\
    \ Independent Offer Document Exchange always occurs\n   when only one payment\
    \ brand, protocol and currency/amount is being\n   offered to the Consumer by\
    \ the Merchant. It is also likely to, but\n   will not necessarily, occur when\
    \ multiple brands are being offered,\n   the Payment Handler is the same, and\
    \ all brands use the same set of\n   protocols.\n   Note that the TPO Block and\
    \ the Offer Response Block can be sent in\n   separate IOTP messages (see Brand\
    \ Dependent Offer Document Exchange)\n   even if the Offer Response Block does\
    \ not change. However this\n   increases the number of messages in the transaction\
    \ and is therefore\n   likely to increase transaction response times.\n   IOTP\
    \ aware applications supporting the Consumer Trading Role must\n   check for the\
    \ existence of an Offer Response Block in the first IOTP\n   Message to determine\
    \ whether the Offer Document Exchange is brand\n   dependent or not.\n   MESSAGE\
    \ PROCESSING GUIDELINES\n   On receiving a TPO and Offer Response IOTP Message\
    \ (see below), the\n   Consumer may either:\n   o  generate and send the next\
    \ IOTP Message in the IOTP transaction\n      and send it to the required Trading\
    \ Role. This is dependent on the\n      IOTP Transaction, or\n   o  indicate failure\
    \ to continue with the IOTP Transaction by sending\n      a Cancel Block back\
    \ to the Merchant containing a Status Component\n      with a StatusType of Offer,\
    \ a ProcessState of Failed and the\n      CompletionCode (see section 7.16.1)\
    \ set to either: ConsCancelled\n      or Unspecified.\n   If the Merchant receives\
    \ an IOTP Message containing a Cancel block,\n   then the Consumer is likely to\
    \ go to the CancelNetLocn specified on\n   the Trading Role Element in the Organisation\
    \ Component for the\n   Merchant.\n"
- title: 9.1.2.3 TPO IOTP Message
  contents:
  - "9.1.2.3 TPO IOTP Message\n   The TPO IOTP Message is only used with a Brand Dependent\
    \ Offer\n   Document Exchange. Apart from a Transaction Reference Block (see\n\
    \   section 3.3), this message consists of just a Trading Protocol\n   Options\
    \ Block (see section 8.1) which is described below.\n   TPO (TRADING PROTOCOL\
    \ OPTIONS) BLOCK\n   The Trading Protocol Options Block (see section 8.1) must\
    \ contain the\n   following Trading Components:\n   o  one Protocol Options Component\
    \ which defines the options which\n      apply to the whole IOTP Transaction.\
    \ See Section 7.1.\n   o  one Brand List Component (see section 7.7) for each\
    \ Payment in the\n      IOTP Transaction that contain one or more payment brands\
    \ and\n      protocols which may be selected for use in each payment\n   o  Organisation\
    \ Components (see section 7.6) with the following\n      roles:\n      -  Merchant\
    \ who is making the offer\n      -  Consumer who is carrying out the transaction\n\
    \      -  the PaymentHandler(s) for the payment. The \"ID\" of the Payment\n \
    \        Handler Organisation Component is contained within the PhOrgRef\n   \
    \      attribute of the Payment Component\n   If the IOTP Transaction includes\
    \ a Delivery then the TPO Block must\n   also contain:\n   o  Organisation Components\
    \ with the following roles:\n      -  DeliveryHandler who will be delivering the\
    \ goods or services\n      -  DelivTo i.e. the person or Organisation which is\
    \ to take\n         delivery\n   AUTHENTICATION STATUS AND SIGNATURE BLOCKS\n\
    \   If the Offer Document Exchange was preceded by an Authentication\n   Document\
    \ Exchange, then the TPO IOTP Message may also contain:\n   o  an Authentication\
    \ Status Block (see section 8.6), and\n   o  an optional Signature Block (Authentication\
    \ Status) Signature\n      Block\n   See section 9.1.1.4 Authentication Status\
    \ IOTP Message for more\n   details.\n"
- title: 9.1.2.4 TPO Selection IOTP Message
  contents:
  - "9.1.2.4 TPO Selection IOTP Message\n   The TPO Selection IOTP Message is only\
    \ used with a Brand Dependent\n   Offer Document Exchange. Apart from a Transaction\
    \ Reference Block\n   (see section 3.3), this message consists of just a TPO Selection\n\
    \   Block (see section 8.1) which is described below.\n   TPO SELECTION BLOCK\n\
    \   The TPO Selection Block (see section 8.2) contains:\n   o  one Brand Selection\
    \ Component (see section 7.8) for use in a\n      later Payment Exchange. It contains\
    \ the results of the consumer\n      selecting a Payment Brand, Payment Protocol\
    \ and currency/amount\n      from the list provided in the Brand List Component.\n"
- title: 9.1.2.5 Offer Response IOTP Message
  contents:
  - "9.1.2.5 Offer Response IOTP Message\n   The Offer Response IOTP Message is only\
    \ used with a Brand Dependent\n   Offer Document Exchange. Apart from a Transaction\
    \ Reference Block\n   (see section 3.3), this message consists of:\n   o  an Offer\
    \ Response Block (see section 8.1) and\n   o  an optional Signature Block (see\
    \ section 8.16).\n   OFFER RESPONSE BLOCK\n   The Offer Response Block (see section\
    \ 8.3) contains the following\n   components:\n   o  one Status Component (see\
    \ section 7.16) which indicates the status\n      of the Offer Response. The ProcessState\
    \ attribute should be set to\n      CompletedOk\n   o  one Order Component (see\
    \ section 7.5) which contains details about\n      the goods and services which\
    \ are being purchased or the financial\n      transaction which is taking place\n\
    \   o  one or more Payment Component(s) (see section 7.9) for each\n      payment\
    \ which is to be made\n   o  zero or one Delivery Components (see section 7.13)\
    \ containing\n      details of the delivery to be made if the IOTP Transaction\n\
    \      includes a delivery\n   o  zero or more Trading Role Data Components (see\
    \ section 7.17) if\n      required by the Merchant.\n   SIGNATURE BLOCK (OFFER\
    \ RESPONSE)\n   If the Authentication Status Block is being digitally signed then\
    \ a\n   Signature Block must be included that contains a Signature Component\n\
    \   (see section 7.19) with Digest Elements for the following XML\n   elements:\n\
    \   If the Offer Response is being digitally signed then a Signature\n   Block\
    \ must be included that contains a Signature Component (see\n   section 7.19)\
    \ with Digest Elements for the following XML elements:\n   o  the Transaction\
    \ Reference Block (see section 3.3) for the IOTP\n      Message that contains\
    \ information that describes the IOTP Message\n      and IOTP Transaction\n  \
    \ o  the Transaction Id Component (see section 3.3.1) which globally\n      uniquely\
    \ identifies the IOTP Transaction\n   o  the following components of the TPO Block\
    \ :\n      -  the Protocol Options Component, and\n      -  the Brand List Component\n\
    \      -  all the Organisation Components present\n   o  the following components\
    \ of the Offer Response Block:\n      -  the Order Component\n      -  all the\
    \ Payment Components present\n      -  the Delivery Component if present\n   \
    \   -  any Trading Role Data Components present\n"
- title: 9.1.2.6 TPO and Offer Response IOTP Message
  contents:
  - "9.1.2.6 TPO and Offer Response IOTP Message\n   The TPO and Offer Response IOTP\
    \ Message is only used with a Brand\n   Independent Offer Document Exchange. Apart\
    \ from a Transaction\n   Reference Block (see section 3.3), this message consists\
    \ of:\n   o  a Trading Protocol Options Block (see section 8.1)\n   o  an Offer\
    \ Response Block (see section 8.1) and\n   o  an optional Signature Block (see\
    \ section 8.16).\n   TPO (TRADING PROTOCOL OPTIONS) BLOCK\n   This is the same\
    \ as the Trading Protocol Options Block described in\n   TPO IOTP Message (see\
    \ section 9.1.2.3).\n   OFFER RESPONSE BLOCK\n   This the same as the Offer Response\
    \ Block in the Offer Response IOTP\n   Message (see section 9.1.2.5).\n   AUTHENTICATION\
    \ STATUS\n   If the Offer Document Exchange was preceded by an Authentication\n\
    \   Document Exchange, then the TPO and Offer Response IOTP Message may\n   also\
    \ contain an Authentication Status Block (see section 8.6).\n   SIGNATURE BLOCK\n\
    \   This is the same as the Signature Block in the Offer Response IOTP\n   Message\
    \ (see section 9.1.2.5) with the addition that:\n   o  if the Offer Document Exchange\
    \ is Brand Dependent then the\n      Signature Component in the Signature Block\
    \ additionally contains a\n      Digest Element for the Brand Selection Component\
    \ contained in the\n      TPO Selection Block\n   o  if the Offer Document Exchange\
    \ was preceded by an Authentication\n      Document Exchange then the Signature\
    \ Component in the Signature\n      Block additionally contains a Digest Element\
    \ for the\n      Authentication Status Block.\n"
- title: 9.1.3 Payment Document Exchange
  contents:
  - "9.1.3 Payment Document Exchange\n   The Payment Document Exchange is a direct\
    \ implementation of the last\n   part of a Payment Trading Exchange (see section\
    \ 2.2.2) after the\n   Brand has been selected by the Consumer. A Payment Exchange\
    \ consists\n   of:\n   o  the Consumer requesting that a payment starts by generating\n\
    \      Payment Request IOTP Message using information from previous IOTP\n   \
    \   Messages in the Transaction and then sending it to the Payment\n      Handler\n\
    \   o  the Payment Handler and the Consumer then swapping Payment\n      Exchange\
    \ IOTP Messages encapsulating payment protocol messages\n      until the payment\
    \ is complete, and finally\n   o  the Payment Handler sending a Payment Response\
    \ IOTP Message to the\n      Consumer containing a receipt for the payment.\n\
    \   The IOTP Messages which are involved are illustrated by the diagram\n   below.\n\
    \ *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n   Consumer\n\
    \     |  Payment\n     |  Handler\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          Consumer generates Pay Request Block encapsulating\
    \ a\n             payment protocol message if required and sends to Payment\n\
    \             Handler with the Signature Block if present\n     C --> P PAYMENT\
    \ REQUEST. IotpMsg: Trans Ref Block; Signature\n             Block (optional);\
    \ Pay Request Block\n 2.          Payment Handler processes Pay Request Block,\
    \ checks\n             optional signature and starts exchanging payment protocol\n\
    \             messages encapsulated in a Pay Exchange Block, with the\n      \
    \       Consumer\n     C <-> P PAYMENT EXCHANGE. IotpMsg: Trans Ref Block; Pay\
    \ Exchange\n             Block\n 3.          Consumer and Payment Handler keep\
    \ on exchanging Payment\n             Exchange blocks until eventually payment\
    \ protocol\n             messages finish so Payment Handler creates a Pay Receipt\n\
    \             Component inside a Pay Response Block, and an optional\n       \
    \      Signature Component inside a Signature Block, sends them\n            \
    \ to the Consumer and stops.\n     C <-- P PAYMENT RESPONSE. IotpMsg: Trans Ref\
    \ Block; Signature\n             Block (optional); Pay Response Block\n 4.   \
    \       Consumer checks Payment Response is OK. Optionally keeps\n           \
    \  information on IOTP Transaction for record keeping\n             purposes and\
    \ either stops or creates the next IOTP\n             message for the Transaction\
    \ and sends it together with\n             the Signature Block, if present, to\
    \ the required Trading\n             Role\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                     Figure 21 Payment Document Exchange\n"
- title: 9.1.3.1 Message Processing Guidelines
  contents:
  - "9.1.3.1 Message Processing Guidelines\n   On receiving a Payment Request IOTP\
    \ Message, the Payment Handler\n   should check that they are authorised to carry\
    \ out the Payment (see\n   section 6 Digital Signatures). They may then either:\n\
    \   o  generate and send a Payment Exchange IOTP Message back to the\n      Consumer,\
    \ if more payment protocol messages need to be exchanged,\n      or\n   o  generate\
    \ and send a Payment Response IOTP Message if the exchange\n      of payment protocol\
    \ messages is complete, or\n   o  indicate failure to continue with the Payment\
    \ by sending a Cancel\n      Block back to the Consumer containing a Status Component\
    \ with a\n      StatusType of Payment, a ProcessState of Failed and the\n    \
    \  CompletionCode (see section 7.16.4) set to either: BrandNotSupp,\n      CurrNotSupp,\
    \ PaymtCancelled, AuthError, InsuffFunds,\n      InstBrandInvalid, InstNotValid,\
    \ BadInstrument or Unspecified.\n   On receiving a Payment Exchange IOTP Message,\
    \ the Consumer may\n   either:\n   o  generate and send a Payment Exchange Message\
    \ back to the Payment\n      Handler or\n   o  indicate failure to continue with\
    \ the Payment by sending a Cancel\n      Block back to the Payment Handler containing\
    \ a Status Component\n      with a StatusType of Payment, a ProcessState of Failed\
    \ and the\n      CompletionCode (see section 7.16.2) set to either: ConsCancelled\n\
    \      or Unspecified.\n   On receiving a Payment Exchange IOTP Message, the Payment\
    \ Handler may\n   either:\n   o  generate and send a Payment Exchange IOTP Message\
    \ back to the\n      Consumer, if more payment protocol messages need to be exchanged,\n\
    \      or\n   o  generate and send a Payment Response IOTP Message if the exchange\n\
    \      of payment protocol messages is complete, or\n   o  indicate failure to\
    \ continue with the Payment by sending a Cancel\n      Block back to the Consumer\
    \ containing a Status Component with a\n      StatusType of Payment, a ProcessState\
    \ of Failed and the\n      CompletionCode (see section 7.16.2) set to either:\
    \ PaymtCancelled\n      or Unspecified.\n   On receiving a Payment Response IOTP\
    \ Message, the Consumer may\n      either:\n   o  generate and send the next IOTP\
    \ Message in the IOTP transaction\n      and send it to the required Trading Role.\
    \ This is dependent on the\n      IOTP Transaction,\n   o  stop, since the IOTP\
    \ Transaction has ended, or\n   o  indicate failure to continue with the IOTP\
    \ Transaction by sending\n      a Cancel Block back to the Merchant containing\
    \ a Status Component\n      with a StatusType of Payment, a ProcessState of Failed\
    \ and the\n      CompletionCode (see section 7.16.1) set to either: ConsCancelled\n\
    \      or Unspecified.\n   If the Consumer receives an IOTP Message containing\
    \ a Cancel block,\n   then the information contained in the IOTP Message should\
    \ be reported\n   to the Consumer but no further action taken.\n   If the Payment\
    \ Handler receives an IOTP Message containing a Cancel\n   block, then the Consumer\
    \ is likely to go to the CancelNetLocn\n   specified on the Trading Role Element\
    \ in the Organisation Component\n   for the Payment Handler from which any further\
    \ action may take place.\n   If the Merchant receives an IOTP Message containing\
    \ a Cancel block,\n   then the Consumer should have completed the payment but\
    \ not\n   continuing with the transaction for some reason. In this case the\n\
    \   Consumer is likely to go to the CancelNetLocn specified on the\n   Trading\
    \ Role Element in the Organisation Component for the Merchant\n   from which any\
    \ further action may take place.\n"
- title: 9.1.3.2 Payment Request IOTP Message
  contents:
  - "9.1.3.2 Payment Request IOTP Message\n   Apart from a Transaction Reference Block\
    \ (see section 3.3), this\n   message consists of:\n   o  a Payment Request Block,\
    \ and\n   o  an optional Signature Block\n   PAYMENT REQUEST BLOCK\n   The Payment\
    \ Request Block (see section 8.7) contains:\n   o  the following components copied\
    \ from the Offer Response Block from\n      the preceding Offer Document Exchange:\n\
    \      -  the Status Component\n      -  the Payment Component for the payment\
    \ which is being carried\n         out\n   o  the following components from the\
    \ TPO Block:\n      -  the Organisation Components with the roles of Merchant\
    \ and for\n         the PaymentHandler that is being sent the Payment Request\
    \ Block\n      -  the Brand List Component for the payment, i.e. the Brand List\n\
    \         referred to by the BrandListRef attribute on the Payment\n         Component\n\
    \   o  one Brand Selection Component for the Brand List, i.e. the Brand\n    \
    \  Selection Component where BrandListRef attribute points to the\n      Brand\
    \ List. This component can be either:\n      -  copied from the TPO Selection\
    \ Block if the payment was preceded\n         by a Brand Dependent Offer Document\
    \ Exchange (see section\n         9.1.2.1), or\n      -  created by the Consumer,\
    \ containing the payment brand, payment\n         protocol and currency/amount\
    \ selected from the Brand List, if\n         the payment was preceded by a Brand\
    \ Independent Offer Document\n         Exchange (see section 9.1.2.2)\n   o  an\
    \ optional Payment Scheme Component (see section 7.10) if\n      required by the\
    \ payment method used (see the Payment Method\n      supplement to determine if\
    \ this is needed).\n   o  zero or more Trading Role Data Components (see section\
    \ 7.17).\n   Note that:\n   o  if there is more than one Payment Components in\
    \ an Offer Response\n      Block, then the second payment is the one within the\
    \ Offer\n      Response Block that contains a StartAfter attribute (see section\n\
    \      7.9) that identifies the Payment Component for the first payment\n   o\
    \  the Payment Handler to include is identified by the Brand\n      Selection\
    \ Component (see section 7.8) for the payment. Also see\n      section 6.3.1 Check\
    \ Request Block sent Correct Organisation for an\n      explanation on how Payment\
    \ Handlers are identified\n   o  the Brand List Component to include is the one\
    \ identified by the\n      BrandListRef attribute of the Payment Component for\
    \ the identified\n      payment\n   o  the Brand Selection Component to include\
    \ from the Offer Response\n      Block is the one that contains an BrandListRef\
    \ attribute (see\n      section 3.5) which identifies the Brand List Component\
    \ for the\n      second payment.\n   SIGNATURE BLOCK (PAYMENT REQUEST)\n   If\
    \ the either the preceding Offer Document Exchange included an Offer\n   Response\
    \ Signature (see section 9.1.2.5 Offer Response IOTP Message),\n   or a preceding\
    \ Payment Exchange included a Payment Response Signature\n   (see section 9.1.3.4\
    \ Payment Response IOTP Message) then they should\n   both be copied to the Signature\
    \ Block in the Payment Request IOTP\n   Message.\n"
- title: 9.1.3.3 Payment Exchange IOTP Message
  contents:
  - "9.1.3.3 Payment Exchange IOTP Message\n   Apart from a Transaction Reference\
    \ Block (see section 3.3), this\n   message consists of just a Payment Exchange\
    \ Block.\n   PAYMENT EXCHANGE BLOCK\n   The Payment Exchange Block (see section\
    \ 8.8) contains:\n   o  one Payment Scheme Component (see section 7.10) which\
    \ contains\n      payment method specific data. See the Payment Method supplement\n\
    \      for the payment method being used to determine what this should\n     \
    \ contain.\n"
- title: 9.1.3.4 Payment Response IOTP Message
  contents:
  - "9.1.3.4 Payment Response IOTP Message\n   Apart from a Transaction Reference\
    \ Block (see section 3.3), this\n   message consists of:\n   o  a Payment Response\
    \ Block, and\n   o  an optional Signature Block\n   PAYMENT RESPONSE BLOCK\n \
    \  The Payment Response Block (see section 8.9) contains:\n   o  one Payment Receipt\
    \ Component (see section 7.11) which contains\n      scheme specific data which\
    \ can be used to verify the payment\n      occurred\n   o  one Payment Scheme\
    \ Component (see section 7.10) if required which\n      contains payment method\
    \ specific data. See the Payment Method\n      supplement for the payment method\
    \ being used to determine what\n      this should contain\n   o  an optional Payment\
    \ Note Component (see section 7.12)\n   o  zero or more Trading Role Data Components\
    \ (see section 7.17).\n   SIGNATURE BLOCK (PAYMENT RESPONSE)\n   If a signed Payment\
    \ Receipt is being provided, indicated by the\n   SignedPayReceipt attribute of\
    \ the Payment Component being set to\n   True, then the Signature Block should\
    \ contain a Signature Component\n   which contains Digest Elements for the following:\n\
    \   o  the Transaction Reference Block (see section 3.3) for the IOTP\n      Message\
    \ which contains the first usage of the Payment Response\n      Block,\n   o \
    \ the Transaction Id Component (see section 3.3.1) within the\n      Transaction\
    \ Reference Block that globally uniquely identifies the\n      IOTP Transaction,\n\
    \   o  the Payment Receipt Component from the Payment Response Block,\n   o  the\
    \ Payment Note Component from the Payment Response Block,\n   o  the other Components\
    \ referenced by the PayReceiptNameRefs\n      attribute (if present) of the Payment\
    \ Receipt Component,\n   o  the Status Component from the Payment Response Block,\n\
    \   o  any Trading Role Data Components in the Payment Response Block,\n     \
    \ and\n   o  all the Signature Components contained in the Payment Request\n \
    \     Block if present.\n"
- title: 9.1.4 Delivery Document Exchange
  contents:
  - "9.1.4 Delivery Document Exchange\n   The Delivery Document Exchange is a direct\
    \ implementation of a\n   Delivery Trading Exchange (see section 2.2.3). It consists\
    \ of:\n   o  the Consumer requesting a Delivery by generating Delivery Request\n\
    \      IOTP Message using information from previous IOTP Messages in the\n   \
    \   Transaction and then sending it to the Delivery Handler\n   o  the Delivery\
    \ Handler sending a Delivery Response IOTP Message to\n      the Consumer containing\
    \ details about the Handler's response to\n      the request together with an\
    \ optional signature.\n   The message flow is illustrated by the diagram below.\n\
    \ *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n Consumer\n\
    \     |  Delivery\n     |  Handler\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          Consumer generates Delivery Request Block and sends\
    \ it to\n             the Delivery Handler with the Signature Block if present\n\
    \     C --> D DELIVERY REQUEST. IotpMsg: Trans Ref Block; Signature\n        \
    \     Block; Delivery Request Block\n 2.          Delivery Handler checks the\
    \ Status and Order Components\n             in the Delivery Request and the optional\
    \ Signatures,\n             creates a Delivery Response Block, sends to the Consumer\n\
    \             and stops.\n     C <-- D DELIVERY RESPONSE. IotpMsg: Trans Ref Block;\
    \ Signature\n             Block; Delivery Response Block\n"
- title: 3.           Consumer checks Delivery Response Block and optional
  contents:
  - "3.           Consumer checks Delivery Response Block and optional\n         \
    \    Signature Block are OK. Optionally keeps information on\n             IOTP\
    \ Transaction for record keeping purposes and stops.\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                    Figure 22 Delivery Document Exchange\n"
- title: 9.1.4.1 Message Processing Guidelines
  contents:
  - "9.1.4.1 Message Processing Guidelines\n   On receiving a Delivery Request IOTP\
    \ Message, the Delivery Handler\n   should check that they are authorised to carry\
    \ out the Delivery (see\n   section 6 Digital Signatures). They may then either:\n\
    \   o  generate and send a Delivery Response IOTP Message to the\n      Consumer,\
    \ or\n   o  indicate failure to continue with the Delivery by sending a Cancel\n\
    \      Block back to the Consumer containing a Status Component with a\n     \
    \ StatusType of Delivery, a ProcessState of Failed and the\n      CompletionCode\
    \ (see section 7.16.4) set to either: DelivCanceled,\n      or Unspecified.\n\
    \   On receiving a Delivery Response IOTP Message, the Consumer should\n   just\
    \ stop since the IOTP Transaction is complete.\n   If the Consumer receives an\
    \ IOTP Message containing a Cancel block,\n   then the information contained in\
    \ the IOTP Message should be reported\n   to the Consumer but no further action\
    \ taken.\n"
- title: 9.1.4.2 Delivery Request IOTP Message
  contents:
  - "9.1.4.2 Delivery Request IOTP Message\n   The Delivery Request IOTP Message consists\
    \ of:\n   o  a Delivery Request Block, and\n   o  an optional Signature Block\n\
    \   DELIVERY REQUEST BLOCK\n   The Delivery Request Block (see section 8.10) contains:\n\
    \   o  the following components copied from the Offer Response Block:\n      -\
    \  the Status Component (see section 7.16)\n      -  the Order Component (see\
    \ section 7.5)\n      -  the Organisation Component (see section 7.6) with the\
    \ roles of:\n         Merchant, DeliveryHandler and DeliverTo\n      -  the Delivery\
    \ Component (see section 7.13)\n   o  the following Component from the Payment\
    \ Response Block:\n      -  the Status Component (see section 7.16).\n   o  zero\
    \ or more Trading Role Data Components (see section 7.17).\n   SIGNATURE BLOCK\
    \ (DELIVERY REQUEST)\n   If the preceding Offer Document Exchange included an\
    \ Offer Response\n   Signature or the Payment Document Exchange included a Payment\n\
    \   Response Signature, then they should both be copied to the Signature\n   Block.\n"
- title: 9.1.4.3 Delivery Response IOTP Message
  contents:
  - "9.1.4.3 Delivery Response IOTP Message\n   The Delivery Response IOTP Message\
    \ contains a Delivery Response Block\n   and an optional Signature Block.\n  \
    \ DELIVERY RESPONSE BLOCK\n   The Delivery Response Block contains:\n   o  one\
    \ Delivery Note Component (see section 7.15) which contains\n      delivery instructions\
    \ about the delivery of goods or services\n      in3 SIGNATURE BLOCK (DELIVERY\
    \ RESPONSE)\n      The Signature Block should contain one Signature Component\
    \ that\n      contains Digest elements that refer to\n   o  the Transaction Id\
    \ Component (see section 3.3.1) of the IOTP\n      message that contains the Delivery\
    \  Response Signature\n   o  the Transaction Reference Block (see section 3.3)\
    \ of the IOTP\n      Message that contains the Delivery  Response Signature\n\
    \   o  the Consumer Delivery Data component contained in the Delivery\n      Request\
    \ Block (if any)\n   o  the Signature Components contained in the Delivery Request\
    \ Block\n      (if any)\n   o  the Status Component\n   o  the Delivery Note Component\n"
- title: 9.1.5 Payment and Delivery Document Exchange
  contents:
  - "9.1.5 Payment and Delivery Document Exchange\n   The Payment and Delivery Document\
    \ Exchange is a combination of the\n   last part of the Payment Trading Exchange\
    \ (see section 2.2.2) and a\n   Delivery Trading Exchange (see section 2.2.3).\
    \ It consists of:\n   o  the Consumer requesting that a payment starts by generating\n\
    \      Payment Request IOTP Message using information from previous IOTP\n   \
    \   Messages in the Transaction and then sending it to the Payment\n      Handler\n\
    \   o  the Payment Handler and the Consumer then swapping Payment\n      Exchange\
    \ IOTP Messages encapsulating payment protocol messages\n      until the payment\
    \ is complete, and finally\n   o  the Payment Handler sending to the Consumer\
    \ in one IOTP Message:\n      -  a Payment Response Block containing a receipt\
    \ for the payment,\n         and\n      -  a Delivery Response Block containing\
    \ details of the goods or\n         services to be delivered\n   The IOTP Messages\
    \ which are involved are illustrated by the diagram\n   below.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \ Consumer\n     |  Payment\n     |  Handler\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          Consumer generates Pay Request Block encapsulating\
    \ a\n             payment protocol message if required and sends to Payment\n\
    \             Handler with the Signature Block if present\n     C --> P PAYMENT\
    \ REQUEST. IotpMsg: Trans Ref Block; Signature\n             Block; Pay Request\
    \ Block\n 2.          Payment Handler processes Pay Request Block, checks\n  \
    \           optional signature and starts exchanging payment protocol\n      \
    \       messages encapsulated in a Pay Exchange Block, with the\n            \
    \ Consumer\n     C <-> P PAYMENT EXCHANGE. IotpMsg: Trans Ref Block; Pay Exchange\n\
    \             Block\n 3.          Consumer and Payment Handler keep on exchanging\
    \ Payment\n             Exchange blocks until eventually payment protocol\n  \
    \           messages finish so Payment Handler creates a Pay Receipt\n       \
    \      Component inside a Pay Response Block, and an optional\n             Signature\
    \ Component inside a Signature Block, then uses\n             information from\
    \ the Offer Response Bock to create a\n             Delivery Response Block and\
    \ sends both to the Consumer\n             and stops.\n     C <-- P PAYMENT RESPONSE\
    \ & DELIVERY RESPONSE. IotpMsg: Trans Ref\n             Block; Signature Block;\
    \ Pay Response Block; Delivery\n             Response Block\n 4.          Consumer\
    \ checks Payment Response and Delivery Response\n             Blocks are OK. Optionally\
    \ keeps information on IOTP\n             Transaction for record keeping purposes\
    \ and either stops\n             or creates the next IOTP message for the Transaction\
    \ and\n             sends it together with the Signature Block, if present,\n\
    \             to the required Trading Role\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \              Figure 23 Payment and Delivery Document Exchange\n   The Delivery\
    \ Response Block and the Payment Response Block may be\n   combined into the same\
    \ IOTP Message only if the Payment Handler has\n   the information available so\
    \ that she can send the Delivery Response\n   Block.  This is likely to, but will\
    \ not necessarily, occur when the\n   Merchant, the Payment Handler and the Delivery\
    \ Handler Roles are\n   combined.\n   The DelivAndPayResp attribute of the Delivery\
    \ Component (see section\n   7.13) contained within the Offer Response Block (see\
    \ section 8.3) is\n   set to True if the Delivery Response Block and the Payment\
    \ Response\n   Block are combined into the same IOTP Message and is set to False\
    \ if\n   the Delivery Response Block and the Payment Response Block are sent\n\
    \   in separate IOTP Messages.\n"
- title: 9.1.5.1 Message Processing Guidelines
  contents:
  - "9.1.5.1 Message Processing Guidelines\n   On receiving a Payment Request IOTP\
    \ Message or a Payment Exchange\n   IOTP Message, the Payment Handler should carry\
    \ out the same actions\n   as for a Payment Document Exchange (see section 9.1.3.1).\n\
    \   On receiving a Payment Exchange IOTP Message, the Consumer should\n   also\
    \ carry out the same actions as for a Payment Document Exchange\n   (see section\
    \ 9.1.3.1).\n   On receiving a Payment Response and Delivery Response IOTP Message\n\
    \   then the IOTP Transaction is complete and should take no further\n   action.\n\
    \   If the Consumer receives an IOTP Message containing a Cancel block,\n   then\
    \ the information contained in the IOTP Message should be reported\n   to the\
    \ Consumer but no further action taken.\n   If the Payment Handler receives an\
    \ IOTP Message containing a Cancel\n   block, then the Consumer is likely to go\
    \ to the CancelNetLocn\n   specified on the Trading Role Element in the Organisation\
    \ Component\n   for the Payment Handler from which any further action may take\
    \ place.\n   If the Merchant receives an IOTP Message containing a Cancel block,\n\
    \   then the Consumer should have completed the payment but not\n   continuing\
    \ with the transaction for some reason. In this case the\n   Consumer is likely\
    \ to go to the CancelNetLocn specified on the\n   Trading Role Element in the\
    \ Organisation Component for the Merchant\n   from which any further action may\
    \ take place.\n"
- title: 9.1.5.2 Payment Request IOTP Message
  contents:
  - "9.1.5.2 Payment Request IOTP Message\n   The content of this message is the same\
    \ as for a Payment Request IOTP\n   Message in a Payment Document Exchange (see\
    \ section 9.1.3.2).\n"
- title: 9.1.5.3 Payment Exchange IOTP Message
  contents:
  - "9.1.5.3 Payment Exchange IOTP Message\n   The content of this message is the\
    \ same as for a Payment Exchange\n   IOTP Message in a Payment Document Exchange\
    \ (see section 9.1.3.3).\n"
- title: 9.1.5.4 Payment Response and Delivery Response IOTP Message
  contents:
  - "9.1.5.4 Payment Response and Delivery Response IOTP Message\n   The content of\
    \ this message consists of:\n   o  a Payment Response Block,\n   o  an optional\
    \ Signature Block (Payment Response), and\n   o  a Delivery Response Block.\n\
    \   PAYMENT RESPONSE BLOCK\n   The content of this block is the same as the Payment\
    \ Response Block\n   in the Payment Response IOTP Message associated with a Payment\n\
    \   Document Exchange (see section 9.1.3.4).\n   SIGNATURE BLOCK (PAYMENT RESPONSE)\n\
    \   The content of this block is the same as the Signature Block (Payment\n  \
    \ Response) in the Payment Response IOTP Message associated with a\n   Payment\
    \ Document Exchange (see section 9.1.3.4).\n   DELIVERY RESPONSE BLOCK\n   The\
    \ content of this block is the same as the Delivery Response Block\n   in the\
    \ Delivery Response IOTP Message associated with a Delivery\n   Document Exchange\
    \ (see section 9.1.4.3).\n"
- title: 9.1.6 Baseline Authentication IOTP Transaction
  contents:
  - "9.1.6 Baseline Authentication IOTP Transaction\n   A Baseline Authentication\
    \ IOTP Transaction may occur at any time\n   between any of the Trading Roles\
    \ involved in IOTP Transactions. This\n   means it could occur:\n   o  before\
    \ another IOTP Transaction\n   o  at the same time as another IOTP Transaction\n\
    \   o  independently of any other IOTP Transaction.\n   The Baseline Authentication\
    \ IOTP Transaction consists of just an\n   Authentication Document Exchange (see\
    \ section 9.1.1) as illustrated\n   by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START -------------------------------------------------------\n          \
    \                                                      v\n                   \
    \                                    ----------------\n                      \
    \                                | AUTHENTICATION |\n                        \
    \                               ----------------\n                           \
    \                                      |\n                                   \
    \                              |\n                                           \
    \                      |\n                                                   \
    \              |\n                  -------------------     -----------------\
    \      |\n                 | BRAND INDEPENDENT |   | BRAND DEPENDENT |     |\n\
    \                 |       OFFER       |   |      OFFER      |     |\n        \
    \          -------------------     -----------------      |\n                \
    \                                                 |\n                        \
    \                                         |\n                                \
    \                                 |\n                                        \
    \                         |\n                                                \
    \                 |\n                      ---------           --------------\
    \         |\n                     | PAYMENT |         | PAYMENT WITH |       \
    \ |\n                     | (first) |         |   DELIVERY   |        |\n    \
    \                  ---------           --------------         |\n            \
    \                                                     |\n                    \
    \                                             |\n                            \
    \                                     |\n         ----------        ---------\
    \                             |\n        | DELIVERY |      | PAYMENT |       \
    \                     |\n        |          |      | {second)|               \
    \             |\n         ----------        ---------                        \
    \     |\n                                                                 v\n\
    \                                                               STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \               Figure 24 Baseline Authentication IOTP Transaction\n   Example\
    \ uses of the Baseline Authentication IOTP Transaction include:\n   o  when the\
    \ Baseline Authentication IOTP Transaction takes place as\n      an early part\
    \ of a session where strong continuity exists. For\n      example, a Financial\
    \ Institution could:\n      -  set up a secure channel (e.g., using [SSL/TLS])\
    \ with a customer\n      -  authenticate the customer using the Baseline Authentication\n\
    \         IOTP Transaction, and then\n      -  provide the customer with access\
    \ to account information and\n         other services with the confidence that\
    \ they are communicating\n         with a bona fide customer.\n   o  as a means\
    \ of providing a Merchant role with Organisation\n      Components that contain\
    \ information about Consumer and DelivTo\n      Trading Roles\n   o  so that a\
    \ Consumer may authenticate a Payment Handler before\n      starting a payment.\n"
- title: 9.1.7 Baseline Deposit IOTP Transaction
  contents:
  - "9.1.7 Baseline Deposit IOTP Transaction\n   The Baseline Deposit IOTP Transaction\
    \ supports the deposit of\n   electronic cash with a Financial Institution.\n\
    \   Note: The Financial Institution has, in IOTP terminology, a role of\n   merchant\
    \ in that a service (i.e. a deposit of electronic cash) is\n   being offered in\
    \ return for a fee, for example bank charges of some\n   kind. The term \"Financial\
    \ Institution\" is used in the diagrams and in\n   the text for clarity.\n   The\
    \ Baseline Deposit IOTP Transaction consists of the following\n   Document Exchanges:\n\
    \   o  an optional Authentication Document Exchange (see section 9.1.1)\n   o\
    \  an Offer Document Exchange (see section 9.1.2), and\n   o  a Payment Document\
    \ Exchange (see section 9.1.3).\n   The way in which these Document Exchanges\
    \ may be combined together is\n   illustrated by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START -----------------------------------------------------\n      |     \
    \                                                  v\n      |                \
    \                                ----------------\n      |                   \
    \                            | AUTHENTICATION |\n      |                     \
    \                           ----------------\n       --------------------------------------\
    \               |\n                       |                     |            \
    \  |\n                       |      -------------- | -------------\n         \
    \              v      v              v      v\n                  -------------------\
    \     -----------------\n                 | BRAND INDEPENDENT |   | BRAND DEPENDENT\
    \ |\n                 |       OFFER       |   |      OFFER      |\n          \
    \        -------------------     -----------------\n                        |\
    \                        |\n                        |                        |\n\
    \                        |                        |\n                        |\
    \     -------------------\n                        v    v\n                  \
    \    ---------           --------------\n                     | PAYMENT |    \
    \     | PAYMENT WITH |\n                     | (first) |         |   DELIVERY\
    \   |\n                      ---------           --------------\n            \
    \              |\n                           ----------------\n              \
    \                             |\n         ----------        ---------       |\n\
    \        | DELIVERY |      | PAYMENT |      |\n        |          |      | {second)|\
    \      |\n         ----------        ---------       |\n                     \
    \                      |\n                                            ----------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                   Figure 25 Baseline Deposit IOTP Transaction\n   See section\
    \ 9.1.12 \"Valid Combinations of Document Exchanges\" to\n   determine which combination\
    \ of document exchanges apply to a\n   particular instance of an IOTP Transaction\n\
    \   Note that:\n   o  a Merchant (Financial Institution) may be able to accept\
    \ a deposit\n      in several different types of electronic cash although, since\
    \ the\n      Consumer role that is depositing the electronic cash usually knows\n\
    \      what type of cash they want to deposit, it is usually constrained\n   \
    \   in practice to only one type. However, there may be several\n      different\
    \ protocols which may be used for the same \"brand\" of\n      electronic cash.\
    \ In this case a Brand Dependent Offer may be\n      appropriate to negotiate\
    \ the protocol to be used.\n   o  the Merchant (Financial Institution) may use\
    \ the results of the\n      authentication to identify not only the consumer but\
    \ also the\n      account to which the payment is to be deposited. If no single\n\
    \      account can be identified, then it must be obtained by other\n      means.\
    \ For example:\n      -  the consumer could specify the account number prior to\
    \ the\n         Baseline Deposit IOTP Transaction starting, or\n      -  the consumer\
    \ could have been identified earlier, for example\n         using a Baseline Authentication\
    \ IOTP Transaction, and an\n         account selected from a list provided by\
    \ the Financial\n         Institution.\n   o  The Baseline Deposit IOTP Transaction\
    \ without an Authentication\n      Document Exchange might be used:\n      - \
    \ if a previous IOTP transaction, for example a Baseline\n         Withdrawal\
    \ or a Baseline Authentication, authenticated the\n         consumer, and a secure\
    \ channel has been maintained, therefore\n         the authenticity of the consumer\
    \ is known\n      -  if authentication is achieved as part of a proprietary payment\n\
    \         protocol and is therefore included in the Payment Document\n       \
    \  Exchange\n      -  if authentication of the consumer has been achieved by some\n\
    \         other means outside of the scope of IOTP, for example, by using\n  \
    \       a pass phrase, or a proprietary banking software solution.\n"
- title: 9.1.8 Baseline Purchase IOTP Transaction
  contents:
  - "9.1.8 Baseline Purchase IOTP Transaction\n   The Baseline Purchase IOTP Transaction\
    \ supports the purchase of goods\n   or services using any payment method. It\
    \ consists of the following\n   Document Exchanges:\n   o  an optional Authentication\
    \ Document Exchange (see section 9.1.1)\n   o  an Offer Document Exchange (see\
    \ section 9.1.2)\n   o  either:\n      -  a Payment Document Exchange (see section\
    \ 9.1.3) followed by\n      -  a Delivery Document Exchange (see section 9.1.4)\n\
    \   o  a Payment Document Exchange only, or\n   o  a combined Payment and Delivery\
    \ Document Exchange (see section\n      9.1.5).\n   The ways in which these Document\
    \ Exchanges are combined is\n   illustrated by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START -----------------------------------------------------\n      |     \
    \                                                  v\n      |                \
    \                                ----------------\n      |                   \
    \                            | AUTHENTICATION |\n      |                     \
    \                           ----------------\n       --------------------------------------\
    \               |    |\n                       |                     |       \
    \       |    |\n                       |      -------------- | ------------- \
    \    |\n                       v      v              v      v            |\n \
    \                 -------------------     -----------------      |\n         \
    \        | BRAND INDEPENDENT |   | BRAND DEPENDENT |     |\n                 |\
    \       OFFER       |   |      OFFER      |     |\n                  -------------------\
    \     -----------------      |\n                        |    |               \
    \    |   |           |\n                        |     ---------------    |   |\
    \           |\n                        |                    |   |   |        \
    \   |\n                        |     -------------- | --    |           |\n  \
    \                      v    v               v       v           |\n          \
    \            ---------           --------------         |\n                  \
    \   | PAYMENT |         | PAYMENT WITH |        |\n                     | (first)\
    \ |         |   DELIVERY   |        |\n                      ---------       \
    \    --------------         |\n                          |                   \
    \   |               |\n              -----------------------------      |    \
    \           |\n              v                            |     |            \
    \   |\n         ----------        ---------       |     |               |\n  \
    \      | DELIVERY |      | PAYMENT |      |     |               |\n        | \
    \         |      | {second)|      |     |               |\n         ----------\
    \        ---------       |     |               |\n              |            \
    \                |     |               v\n               ---------------------------------------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                  Figure 26 Baseline Purchase IOTP Transaction\n   See section\
    \ 9.1.12 \"Valid Combinations of Document Exchanges\" to\n   determine which combination\
    \ of document exchanges apply to a\n   particular instance of an IOTP Transaction.\n"
- title: 9.1.9 Baseline Refund IOTP Transaction
  contents:
  - "9.1.9 Baseline Refund IOTP Transaction\n   In business terms the refund process\
    \ typically consists of:\n   o  a request for a refund being made by the Consumer\
    \ to the Merchant,\n      typically supported by evidence to demonstrate:\n  \
    \    -  the original trade took place, for example by providing a\n         receipt\
    \ for the original transaction\n      -  using some type of authentication, that\
    \ the consumer requesting\n         the refund is the consumer, or a representative\
    \ of the\n         consumer, who carried out the original trade\n      -  the\
    \ reason why the merchant should make the refund\n   o  the merchant agreeing\
    \ (or not) to the refund. This may involve\n      some negotiation between the\
    \ Consumer and the Merchant, and, if\n      the merchant agrees,\n   o  a refund\
    \ payment by the Merchant to the Consumer.\n   The Baseline Refund IOTP Transaction\
    \ supports a subset of the above,\n   specifically it supports:\n   o  stand alone\
    \ authentication of the Consumer using a separate\n      Baseline Authentication\
    \ IOTP Transaction (see section 9.1.6)\n   o  a refund payment by the Merchant\
    \ to the Consumer using the\n      following two Trading Exchanges:\n      - \
    \ an optional Authentication Document Exchange (see section\n         9.1.1)\n\
    \      -  an Offer Document Exchange (see section 9.1.2), and\n      -  a Payment\
    \ Document Exchange (see section 9.1.3).\n   The ways in which these Document\
    \ Exchanges are combined is\n   illustrated by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START -----------------------------------------------------\n      |     \
    \                                                  v\n      |                \
    \                                ----------------\n      |                   \
    \                            | AUTHENTICATION |\n      |                     \
    \                           ----------------\n       --------------------------------------\
    \               |\n                       |                     |            \
    \  |\n                       |      -------------- | -------------\n         \
    \              v      v              v      v\n                  -------------------\
    \     -----------------\n                 | BRAND INDEPENDENT |   | BRAND DEPENDENT\
    \ |\n                 |       OFFER       |   |      OFFER      |\n          \
    \        -------------------     -----------------\n                        |\
    \                        |\n                        |                        |\n\
    \                        |                        |\n                        |\
    \     -------------------\n                        v    v\n                  \
    \    ---------           --------------\n                     | PAYMENT |    \
    \     | PAYMENT WITH |\n                     | (first) |         |   DELIVERY\
    \   |\n                      ---------           --------------\n            \
    \              |\n                           ----------------\n              \
    \                             |\n         ----------        ---------       |\n\
    \        | DELIVERY |      | PAYMENT |      |\n        |          |      | {second)|\
    \      |\n         ----------        ---------       |\n                     \
    \                      |\n                                            ----------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                   Figure 27 Baseline Refund IOTP Transaction\n   A Baseline\
    \ Refund IOTP Transaction without an Authentication Document\n   Exchange might\
    \ be used:\n   o  when authentication of the consumer has been achieved by some\n\
    \      other means, for example, the consumer has entered some previously\n  \
    \    supplied code in order to identify herself and the refund to which\n    \
    \  the code applies. The code could be supplied, for example on a web\n      page\
    \ or by e-mail.\n   o  when a previous IOTP transaction, for example a Baseline\n\
    \      Authentication, authenticated the consumer, and a secure channel\n    \
    \  has been maintained, therefore the authenticity of the consumer is\n      known\
    \ and therefore the previously agreed refund can be\n      identified.\n   o \
    \ when the authentication of the consumer is carried out by the\n      Payment\
    \ Handler using a payment scheme authentication algorithm.\n"
- title: 9.1.10 Baseline Withdrawal IOTP Transaction
  contents:
  - "9.1.10 Baseline Withdrawal IOTP Transaction\n   The Baseline Withdrawal IOTP\
    \ Transaction supports the withdrawal of\n   electronic cash from a Financial\
    \ Institution.\n   Note: The Financial Institution has, in IOTP terminology, a\
    \ role of\n   merchant in that a service (i.e. a withdrawal of electronic cash)\
    \ is\n   being offered in return for a fee, for example bank charges of some\n\
    \   kind. The term \"Financial Institution\" is used in the diagrams and in\n\
    \   the text for clarity.\n   The Baseline Withdrawal IOTP Transaction consists\
    \ of the following\n   Document Exchanges:\n   o  an optional Authentication Document\
    \ Exchange (see section 9.1.1)\n   o  an Offer Document Exchange (see section\
    \ 9.1.2), and\n   o  a Payment Document Exchange (see section 9.1.3).\n   The\
    \ way in which these Document Exchanges may be combined together is\n   illustrated\
    \ by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START -----------------------------------------------------\n      |     \
    \                                                  v\n      |                \
    \                                ----------------\n      |                   \
    \                            | AUTHENTICATION |\n      |                     \
    \                           ----------------\n       --------------------------------------\
    \               |\n                       |                     |            \
    \  |\n                       |      -------------- | -------------\n         \
    \              v      v              v      v\n                  -------------------\
    \     -----------------\n                 | BRAND INDEPENDENT |   | BRAND DEPENDENT\
    \ |\n                 |       OFFER       |   |      OFFER      |\n          \
    \        -------------------     -----------------\n                        |\
    \                        |\n                        |                        |\n\
    \                        |                        |\n                        |\
    \     -------------------\n                        v    v\n                  \
    \    ---------           --------------\n                     | PAYMENT |    \
    \     | PAYMENT WITH |\n                     | (first) |         |   DELIVERY\
    \   |\n                      ---------           --------------\n            \
    \              |\n                           ----------------\n              \
    \                             |\n         ----------        ---------       |\n\
    \        | DELIVERY |      | PAYMENT |      |\n        |          |      | {second)|\
    \      |\n         ----------        ---------       |\n                     \
    \                      |\n                                            ----------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                 Figure 28 Baseline Withdrawal IOTP Transaction\n   Note that:\n\
    \   o  a Merchant (Financial Institution) may be able to offer withdrawal\n  \
    \    of several different types of electronic cash. In practice usually\n    \
    \  only one form of electronic cash may be offered. However, there\n      may\
    \ be several different protocols which may be used for the same\n      \"brand\"\
    \ of electronic cash.\n   o  the Merchant (Financial Institution) may use the\
    \ results of the\n      authentication to identify not only the consumer but also\
    \ the\n      account from which the withdrawal is to be made. If no single\n \
    \     account can be identified, then it must be obtained by other\n      means.\
    \ For example:\n      -  the consumer could specify the account number prior to\
    \ the\n         Baseline Withdrawal IOTP Transaction starting, or\n      -  the\
    \ consumer could have been identified earlier, for example\n         using a Baseline\
    \ Authentication IOTP Transaction, and an\n         account selected from a list\
    \ provided by the Financial\n         Institution.\n   o  a Baseline Withdrawal\
    \ without an authentication might be used:\n      -  if a previous IOTP transaction,\
    \ for example a Baseline Deposit\n         or a Baseline Authentication, authenticated\
    \ the consumer, and a\n         secure channel has been maintained, therefore\
    \ the authenticity\n         of the consumer is known\n      -  if authentication\
    \ is achieved as part of a proprietary payment\n         protocol and is therefore\
    \ included in the Payment Document\n         Exchange\n      -  if authentication\
    \ of the consumer has been achieved by some\n         other means, for example,\
    \ by using a pass phrase, or a\n         proprietary banking software solution.\n"
- title: 9.1.11 Baseline Value Exchange IOTP Transaction
  contents:
  - "9.1.11 Baseline Value Exchange IOTP Transaction\n   The Baseline Value Exchange\
    \ Transaction uses Payment Document\n   Exchanges to support the exchange of value\
    \ in one currency obtained\n   using one payment method with value in the same\
    \ or another currency\n   using the same or another payment method. Examples of\
    \ its use\n   include:\n   o  electronic cash advance on a credit card. For example\
    \ the first\n      payment could be a \"dollar SET Payment\" using a credit card\
    \ with\n      the second payment being a download of Visa Cash e-cash in\n   \
    \   dollars.\n   o  foreign exchange using the same payment method. For example\
    \ the\n      payment could be an upload of Mondex value in British Pounds and\n\
    \      the second a download of Mondex value in Euros\n   o  foreign exchange\
    \ using different payment methods. For example the\n      first payment could\
    \ be a SET payment in Canadian Dollars followed\n      a download of GeldKarte\
    \ in Deutchmarks.\n   The Baseline Value Exchange uses the following Document\
    \ Exchanges:\n   o  an optional Authentication Document Exchange (see section\
    \ 9.1.1)\n   o  an Offer Document Exchange (see section 9.1.2), which provides\n\
    \      details of what values and currencies will be exchanged, and\n   o  two\
    \ Payment Document Exchanges (see section 9.1.3) which carry out\n      the two\
    \ payments involved.\n   The way in which these Document Exchanges may be combined\
    \ together is\n   illustrated by the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START -----------------------------------------------------\n      |     \
    \                                                    v\n      |              \
    \                                  ----------------\n      |                 \
    \                              | AUTHENTICATION |\n      |                   \
    \                             ----------------\n       --------------------------------------\
    \               |\n                       |                     |            \
    \  |\n                       |      -------------- | -------------\n         \
    \              v      v              v      v\n                  -------------------\
    \     -----------------\n                 | BRAND INDEPENDENT |   | BRAND DEPENDENT\
    \ |\n                 |       OFFER       |   |      OFFER      |\n          \
    \        -------------------     -----------------\n                        |\
    \                        |\n                        |                        |\n\
    \                        |                        |\n                        |\
    \     -------------------\n                        v    v\n                  \
    \    ---------           --------------\n                     | PAYMENT |    \
    \     | PAYMENT WITH |\n                     | (first) |         |   DELIVERY\
    \   |\n                      ---------           --------------\n            \
    \              |\n                           ----\n                          \
    \     v\n         ----------        ---------\n        | DELIVERY |      | PAYMENT\
    \ |\n        |          |      | {second)|\n         ----------        ---------\n\
    \                               |\n                                ----------------------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \               Figure 29 Baseline Value Exchange IOTP Transaction\n   The Baseline\
    \ Value Exchange IOTP Transaction occurs in two basic\n   forms:\n   o  Brand\
    \ Dependent Value Exchange. Where the content of the offer,\n      for example\
    \ the rate at which one form of value is exchanged for\n      another, is dependent\
    \ on the payment brands and protocols selected\n      by the consumer, and\n \
    \  o  Brand Independent Value Exchange. Where the content of the offer\n     \
    \ is not dependent on the payment brands and protocols selected.\n   Note: In\
    \ the above the role is a Merchant even though the\n   Organisation carrying out\
    \ the Value Exchange may be a Bank or some\n   other Financial Institution. This\
    \ is because the Bank is acting as a\n   merchant in that they are making an offer\
    \ which the Consumer can\n   either accept or decline.\n   The TPO Block and Offer\
    \ Response Block may only be combined into the\n   same IOTP Message if the content\
    \ of the Offer Response Block does not\n   change as a result of selecting the\
    \ payment brands and payment\n   protocols to be used in the Value Exchange.\n\
    \   BASELINE VALUE EXCHANGE SIGNATURES\n   The use of signatures to ensure the\
    \ integrity of a Baseline Value\n   Exchange is illustrated by the diagram below.\n"
- title: '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*'
  contents:
  - '*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*

    '
- title: Signature generated                  IotpMsg (TPO)
  contents:
  - 'Signature generated                  IotpMsg (TPO)

    '
- title: by Merchant ensures                  - Trans Ref Block
  contents:
  - 'by Merchant ensures                  - Trans Ref Block

    '
- title: integrity of the Offer -------->  -  - Signature Block
  contents:
  - "integrity of the Offer -------->  -  - Signature Block\n                    \
    \             |   - TPO Block              MERCHANT\n                        \
    \         |   - Offer Response Block\n                                 |\n"
- title: Signature generated by           |
  contents:
  - 'Signature generated by           |

    '
- title: the Payment Handler of           |   IotpMsg (Pay Resp 1)
  contents:
  - 'the Payment Handler of           |   IotpMsg (Pay Resp 1)

    '
- title: the first payment binds          |   - Trans Ref Block         PAYMENT
  contents:
  - 'the first payment binds          |   - Trans Ref Block         PAYMENT

    '
- title: Pay Receipt for the first ----->  -> - Signature Block -----   HANDLER
  contents:
  - 'Pay Receipt for the first ----->  -> - Signature Block -----   HANDLER

    '
- title: payment to the Offer                 - Pay Response Block 1 |    1
  contents:
  - "payment to the Offer                 - Pay Response Block 1 |    1\n        \
    \                                                    |\n"
- title: Signature generated by                                      |
  contents:
  - 'Signature generated by                                      |

    '
- title: the Payment Handler of           IotpMsg (Pay Resp 2)       |  PAYMENT
  contents:
  - 'the Payment Handler of           IotpMsg (Pay Resp 2)       |  PAYMENT

    '
- title: the second payment binds           - Trans Ref Block        |  HANDLER
  contents:
  - 'the second payment binds           - Trans Ref Block        |  HANDLER

    '
- title: the second payment to the ----->   - Signature Block <------     2
  contents:
  - 'the second payment to the ----->   - Signature Block <------     2

    '
- title: first payment and therefore        - Pay Response Block 2
  contents:
  - 'first payment and therefore        - Pay Response Block 2

    '
- title: to the Offer
  contents:
  - 'to the Offer

    '
- title: '*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'
  contents:
  - "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n     \
    \         Figure 30 Baseline Value Exchange Signatures\n"
- title: 9.1.12 Valid Combinations of Document Exchanges
  contents:
  - "9.1.12 Valid Combinations of Document Exchanges\n   The following diagram illustrates\
    \ the data conditions in the various\n   IOTP messages which can be used by a\
    \ Consumer Trading Role to\n   determine whether the combination of Document Exchanges\
    \ are valid.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   START\n     |\n     v\n   Auth Request Block in  =TRUE\n    first IOTP Message\
    \ ? ---------------------------------------\n      | = FALSE                 \
    \                                |\n      v                                  \
    \                       v\n   Offer Response Block in                        \
    \     ----------------\n     first IOTP Message ?                            \
    \ | AUTHENTICATION |\n      |=TRUE         |=FALSE                           ----------------\n\
    \      |              |                                        |\n      |    \
    \          |                                        v\n      |               \
    \ ----------------------       TPO & Offer Response\n       -------------    \
    \                     |   Blocks in last IOTP Msg\n                    |     \
    \                   |     |=TRUE        |=FALSE\n                    |       \
    \                 |     |             v\n                    |          -------------\
    \ | ----    TPO Block only if\n                    |         |              |\
    \         last IOTP Message\n                    |         |              |  \
    \       of Authentication\n                    |         |              |    \
    \      |=TRUE   |=FALSE\n                    v         v              v      \
    \    v        |\n                  -------------------     ----------------- \
    \     |\n                 | BRAND INDEPENDENT |   | BRAND DEPENDENT |     |\n\
    \                 |       OFFER       |   |      OFFER      |     |\n        \
    \          -------------------     -----------------      |\n                \
    \          |                   |                  |\n                        \
    \  v                   v                  |\n                       Offer Response\
    \ Block contains             |\n                             Delivery Component\
    \ ?                |\n                            |=FALSE        |=TRUE      \
    \          |\n                         ---               v                   \
    \  |\n                        |        Value of DelivAndPayResp        |\n   \
    \                     |    attribute of Delivery Component ?   |\n           \
    \             |    |=FALSE         |=TRUE              |\n                   \
    \     |    |               |                   |\n                        v  \
    \  v               v                   |\n                      ---------    \
    \       --------------         |\n                     | PAYMENT |         | PAYMENT\
    \ WITH |        |\n                     | (first) |         |   DELIVERY   | \
    \       |\n                      ---------           --------------         |\n\
    \                          |                      |               |\n        \
    \                  v                      |               |\n            Offer\
    \ and Response Block contains     -------------->|\n                  Delivery\
    \ Component ?                           |\n                  |=TRUE          \
    \ |=FALSE                       |\n                  |                v      \
    \                       |\n                  |         Two Payment Components\
    \               |\n                  |      present in Offer Response Block? \
    \       |\n                  |           |=TRUE             |=FALSE         |\n\
    \                  v           v                  |               |\n        \
    \ ----------        ---------             |               |\n        | DELIVERY\
    \ |      | PAYMENT |            |               |\n        |          |      |\
    \ {second)|            |               |\n         ----------        ---------\
    \             |               |\n              |                |            \
    \     |               v\n               ---------------------------------------------->\
    \ STOP\n   *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \               Figure 31 Valid Combinations of Document Exchanges\n   1) If first\
    \ IOTP Message of an IOTP Transaction contains an\n      Authentication Request\
    \ then:\n      a) IOTP Transaction includes an Authentication Document Exchange\n\
    \         (see section 9.1.1). (Note 1)\n      b) If the last IOTP Message of\
    \ the Authentication Document\n         Exchange includes a TPO Block and an Offer\
    \ Response Block then:\n         i) IOTP Transaction includes a Brand Independent\
    \ Offer Document\n            Exchange (see section 9.1.2.2). (Note 2)\n     \
    \ c) Otherwise, if the last IOTP Message of the Authentication\n         Exchange\
    \ includes a TPO Block but NO Offer Response Block,\n         then:\n        \
    \ i) IOTP Transaction includes a Brand Dependent Offer Document\n            Exchange\
    \ (see section 9.1.2.1). (Note 2)\n      d) Otherwise (Authentication Status IOTP\
    \ Message of the\n         Authentication Document Exchange contains neither a\
    \ TPO Block\n         but nor an Offer Response Block)\n         i) IOTP Transaction\
    \ consists of just an Authentication Document\n            Exchange. (Note 3)\n\
    \   2) Otherwise (no Authentication Request in first IOTP Message):\n      e)\
    \ IOTP Transaction does not include an Authentication Document\n         Exchange\
    \ (Note 2)\n      f) If first IOTP Message contains an Offer Response Block, then:\n\
    \         i) the IOTP Transaction contains a Brand Independent Offer\n       \
    \     Document Exchange (Note 2)\n      g) Otherwise (no Offer Response Block\
    \ in first IOTP Message):\n         i) the IOTP Transaction includes a Brand Dependent\
    \ Offer\n            Document Exchange (Note 2)\n   3) If an Offer Response Block\
    \ exists in any IOTP message then:\n      h) If the Offer Response Block contains\
    \ a Delivery Component then:\n         i) If the DelivAndPayResp attribute of\
    \ the Delivery Component\n            is set to True, then:\n            (1) the\
    \ IOTP Transaction consists of a Payment And Delivery\n                Document\
    \ Exchange (see section 9.1.5) (Note 4)\n        ii) otherwise (the DelivAndPayResp\
    \ attribute of the Delivery\n            Component is set to False)\n        \
    \    (1) the IOTP Transaction consists of a Payment Document\n               \
    \ Exchange (see section 9.1.3) followed by a Delivery\n                Document\
    \ Exchange (see section 9.1.4) (Note 4)\n      i) otherwise (the Offer Response\
    \ Block does not contain a Delivery\n         Component)\n         i) if the Offer\
    \ Response Block contains just one Payment\n            Component, then:\n   \
    \         (1) the IOTP Transaction contains just one Payment Document\n      \
    \          Exchange (Note 5)\n        ii) if the Offer Response Block contains\
    \ two Payment Components,\n            then:\n            (1) the IOTP Transaction\
    \ contains two Payment Document\n                Exchanges.  The StartAfter attribute\
    \ of the Payment\n                Components is used to indicate which payment\
    \ occurs\n                first (Note 6)\n       iii) if the Offer Response Block\
    \ contains no or more than two\n            Payment Components, then there is\
    \ an error\n   4) Otherwise (no Offer Response Block) there is an error.\n   The\
    \ following table indicates the types of IOTP Transactions which\n   can validly\
    \ have the conditions indicated above.\n   Note                     IOTP Transaction\
    \ Validity\n   1. Any Payment and Authentication IOTP Transaction\n   2. Any Payment\
    \ and Authentication IOTP Transaction except Baseline\n      Authentication\n\
    \   3. Either Baseline Authentication, or a Baseline Purchase, Refund,\n     \
    \ Deposit, Withdrawal or Value Exchange with a failed Authentication\n   4. Baseline\
    \ Purchase only\n   5. Baseline Purchase, Refund, Deposit or Withdrawal\n   6.\
    \ Baseline Value Exchange only\n"
- title: 9.1.13 Combining Authentication Transactions with other Transactions
  contents:
  - "9.1.13 Combining Authentication Transactions with other Transactions\n   In the\
    \ previous sections an Authentication Document Exchange is shown\n   preceding\
    \ an Offer Document Exchange as part of a single IOTP\n   Transaction with the\
    \ same IOTP Transaction Id.\n   It is also possible to run a separate Authentication\
    \ Transaction at\n   any point, even in parallel with another IOTP Transaction.\
    \ Typically\n   this will be used:\n   o  by a Consumer to authenticate a Merchant,\
    \ Payment Handler or a\n      Delivery Handler, or\n   o  by a Payment Handler\
    \ or Delivery Handler to authenticate a\n      Consumer.\n   In outline the basic\
    \ process consists of:\n   o  the Trading Role that decides it wants to carry\
    \ out an\n      authentication of another role suspends the current IOTP\n   \
    \   transaction being carried out\n   o  a stand-alone Authentication transaction\
    \ is then carried out. This\n      may, at implementer's option, be linked to\
    \ the original IOTP\n      Transaction using a Related To Component (see section\
    \ 3.3.3) in\n      the Transaction Reference Block.\n   o  if the Authentication\
    \ transaction is successful, then the original\n      IOTP Transaction is restarted\n\
    \   o  if the Authentication fails then the original IOTP Transaction is\n   \
    \   cancelled.\n   For example, a Consumer could:\n   o  authenticate the Payment\
    \ Handler for a Payment between receiving\n      an Offer Response from a Merchant\
    \ and before sending the Payment\n      Request to that Payment Handler\n   o\
    \  authenticate a Delivery Handler for a Delivery between receiving\n      the\
    \ Payment Response from a Payment Handler and before sending the\n      Delivery\
    \ Request\n   A Payment Handler could authenticate a Consumer after receiving\
    \ the\n   Payment Request and before sending the next Payment related message.\n\
    \   A Delivery Handler could authenticate a Consumer after receiving the\n   Delivery\
    \ Request and before sending the Delivery Response.\n   Note: Some Payment Methods\
    \ may carry out an authentication within the\n   Payment Exchange. In this case\
    \ the information required to carry out\n   the authentication will be included\
    \ in Payment Scheme Components.\n   In this instance IOTP aware application will\
    \ not be aware that an\n   authentication has occurred since the Payment Scheme\
    \ Components that\n   contain authentication request information will be indistinguishable\n\
    \   from other Payment Scheme Components.\n"
- title: 9.2 Infrastructure Transactions
  contents:
  - "9.2 Infrastructure Transactions\n   Infrastructure Transactions are designed\
    \ to support inquiries about\n   whether or not a transaction has succeeded or\
    \ a Trading Role's\n   servers are operating correctly. There are two types of\
    \ transaction:\n   o  a Transaction Status Inquiry Transaction which provides\n\
    \      information on the status of an existing or complete IOTP\n      transaction,\
    \ and\n   o  Ping Transaction that enables one IOTP aware application to\n   \
    \   determine if the IOTP aware application at another Trading Role is\n     \
    \ operating and verify whether or not signatures can be handled.\n   Each of these\
    \ is described below\n"
- title: 9.2.1 Baseline Transaction Status Inquiry IOTP Transaction
  contents:
  - "9.2.1 Baseline Transaction Status Inquiry IOTP Transaction\n   The Baseline IOTP\
    \ Transaction Status Inquiry provides information on\n   the status of an existing\
    \ or complete IOTP transaction.\n   The Trading Blocks used by the Baseline Transaction\
    \ Status Inquiry\n   Transaction are:\n   o  an Inquiry Request Trading Block\
    \ (see section 8.12),\n   o  an Inquiry Response Trading Block (see section 8.13)\n\
    \   o  an optional Signature Block (see section 8.16).\n   The Inquiry IOTP Transaction\
    \ can be used for a variety of reasons.\n   For example:\n   o  to help in resuming\
    \ a suspended transaction to determine the\n      current state of processing\
    \ of one of the other roles,\n   o  for a merchant to determine if a payment,\
    \ delivery, etc., was\n      completed.  For example, a Consumer might claim that\
    \ payment was\n      made but no signed IOTP payment receipt was available to\
    \ prove it.\n      If the Merchant makes an inquiry of the Payment Handler then\
    \ the\n      Merchant can determine whether or not payment was made.\n   Note:\
    \ Inquiries on Baseline Ping IOTP Transactions (see section\n   9.2.2) are ignored.\n\
    \   MAKING INQUIRIES OF ANOTHER TRADING ROLE\n   One Trading Role may make an\
    \ inquiry of any other Trading Role at any\n   point in time.\n   IOTP aware software\
    \ that supports the Consumer Trading Role may not:\n   o  digitally sign a response\
    \ if requested, since it may not have the\n      capability, or\n   o  respond\
    \ to an Inquiry Request at all since it may not be on-line,\n      or may consider\
    \ that the request is not reasonable since, for\n      example, the Request was\
    \ not digitally signed.\n   As a guideline:\n   o  the Consumer should send a\
    \ Transaction Status Inquiry Block to a\n      Trading Role only after the following\
    \ events have occurred:\n      - to the Merchant, after sending a TPO Selection\
    \ Block,\n      - to the Payment Handler, after sending a Payment Request Block,\n\
    \      - to the Delivery Handler, after sending a Delivery Request Block,\n  \
    \ o  other Trading Roles should send a Transaction Status Inquiry Block\n    \
    \  to the Consumer only after receiving a message from the Consumer\n      and\
    \ before sending the final \"Response\" message to the Consumer\n   o  there are\
    \ no restrictions on non-Consumer Trading Roles sending\n      Inquiries to other\
    \ trading roles.\n   TRANSACTION STATUS INQUIRY TRANSPORT SESSION\n   For a Transaction\
    \ Status Inquiry on an ongoing transaction a\n   different transport session from\
    \ the ongoing transaction is used. For\n   a Transaction Status Inquiry on a past\
    \ transaction, how the IOTP\n   module on the software at the Trading Role is\
    \ started upon the\n   receipt of Inquiry Request message is defined in each Mapping\
    \ to\n   Transport supplement for IOTP.\n   TRANSACTION STATUS INQUIRY ERROR HANDLING\n\
    \   Errors in a Transaction Status Inquiry can be categorised into one of\n  \
    \ the following three cases:\n   o  Business errors (see section 4.2) in the original\
    \ (inquired)\n      messages\n   o  Technical errors (see section 4.1) - both\
    \ IOTP and payment scheme\n      specific ones - in the original IOTP (inquired)\
    \ messages\n   o  Technical errors in the message containing the Inquiry Request\n\
    \      Block itself\n   The following outlines what the software should do in\
    \ each case\n   BUSINESS ERRORS IN THE ORIGINAL MESSAGES\n   Return an Inquiry\
    \ Response Block containing the Status Component\n   which was last sent to the\
    \ Consumer Role.\n   TECHNICAL ERRORS IN THE ORIGINAL MESSAGES\n   Return an Inquiry\
    \ Response Block containing a Status Component. The\n   Status Component should\
    \ contain a ProcessState attribute set to\n   ProcessError. In this case send\
    \ back an Error Block indicating where\n   the error was found in the original\
    \ message.\n   TECHNICAL ERRORS IN THE INQUIRY REQUEST BLOCK\n   Return an Error\
    \ message. That is, send back an Error Block containing\n   the Error Code (see\
    \ section 7.21.2) which describes the nature of the\n   error in the Inquiry Request\
    \ message.\n   INQUIRY TRANSACTION MESSAGES\n   The following Figure outlines\
    \ the Baseline IOTP Transaction Status\n   Inquiry process.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   1st Role\n     |  2nd Role\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          The first role decides to inquire on an IOTP Transaction\n\
    \             by, for example, clicking on the inquiry button of an\n        \
    \     IOTP Aware Application. This will then generate an\n             Inquiry\
    \ Request Block and send it to the appropriate\n             Trading Role.\n \
    \    1 --> 2 INQUIRY REQUEST. IotpMsg: TransRef Block; Signature Block\n     \
    \        (optional); Inquiry Request Block\n 2.          The Trading Role checks\
    \ the digital signature (if\n             present). If the recipient wants to\
    \ respond, then the\n             Trading Role checks the transaction status of\
    \ the\n             transaction that is being inquired upon by using the\n   \
    \          IotpTransId in the Transaction ID Component of the\n             Transaction\
    \ Reference Block, then generates the\n             appropriate Inquiry Response\
    \ Block, sends the message\n             back to the 1st Role and stops\n    \
    \ 1 <-- 2 INQUIRY RESPONSE. IotpMsg: TransRef Block; Inquiry\n             Response\
    \ Block; Signature Block (Optional)\n"
- title: 3.           First role checks the Inquiry Response Block and optional
  contents:
  - "3.           First role checks the Inquiry Response Block and optional\n    \
    \         signature, takes whatever action is appropriate or\n             perhaps\
    \ stops. This may include displaying status\n             information to the end\
    \ user.\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                Figure 32 Baseline Transaction Status Inquiry\n   The remainder\
    \ of this sub-section on the Baseline Transaction Status\n   Inquiry IOTP Transaction\
    \ defines the contents of each Trading Block.\n   Note that the term \"original\
    \ transaction\" is the transaction which a\n   trading role wants to discover\
    \ some information about.\n   TRANSACTION REFERENCE BLOCK\n   A Trading Role making\
    \ an inquiry must use a Transaction Id Component\n   (see section 3.3.1) where\
    \ both the IotpTransId and TransTimeStamp\n   attributes are the same as in the\
    \ Transaction Id Component of the\n   original transaction that is being inquired\
    \ upon. The IotpTransId\n   attribute in this component serves as the key in querying\
    \ the\n   transaction logs maintained at the Trading Role's site. The value of\n\
    \   the ID attribute of the Message Id Component should be different from\n  \
    \ those of any in the original transaction (see section 3.4.1).\n   If up-to-date\
    \ status information is required then the MsgId\n   Component, and in particular\
    \ the ID attribute for the MsgId Component\n   must be different from any other\
    \ IOTP Message that has been sent by\n   the Trading Role. This is required because\
    \ of the way that\n   Idempotency is handled by IOTP (see section 4.5.2.2 Checking/Handling\n\
    \   Duplicate Messages).\n   INQUIRY REQUEST BLOCK\n   The Inquiry Request Block\
    \ (see section 8.12) contains the following\n   components:\n   o  one Inquiry\
    \ Type Component (see section 7.18). This identifies\n      whether the inquiry\
    \ is on an offer, payment, or delivery.\n   o  zero or one Payment Scheme Components\
    \ (see section 7.10). This is\n      for encapsulating payment scheme specific\
    \ inquiry messages for\n      inquiries on a payment.\n   SIGNATURE BLOCK (INQUIRY\
    \ REQUEST)\n   If a signature block is present on the message containing the Inquiry\n\
    \   Request Block then it may be checked to determine if the Inquiry\n   Request\
    \ is authorised.\n   If present, the Inquiry Request Signature Block (see section\
    \ 8.12)\n   contains the following components:\n   o  one Signature Component\
    \ (see section 7.19)\n   o  one or more Certificate Components, if required.\n\
    \   Inquiry Response Blocks should only be generated if the Transaction\n   is\
    \ authorised.\n   Note: Digital signatures on an Inquiry Request is only likely\
    \ to\n   occur if the recipient of the request expects the Inquiry Request to\n\
    \   be signed. In this version of IOTP this will require some kind of\n   pre-existing\
    \ agreement. This means that:\n   o  Consumers are unlikely to generate requests\
    \ with signatures,\n      although it is not an error if they do\n   o  the other\
    \ trading roles may agree that digital signatures are\n      required. For example\
    \ a Payment Handler may require that an\n      Inquiry Request is digitally signed\
    \ by the Merchant so that they\n      can check that the request is valid.\n \
    \  On the other hand if the original transaction to which the Inquiry\n   relates\
    \ was carried out over a secure channel (e.g., [SSL]) then it\n   is probably\
    \ reasonable to presume that if the sender of the Inquiry\n   knows the Transaction\
    \ Id component of the original message (including\n   for example the timestamp)\
    \ then the inquiry is likely to be genuine.\n   INQUIRY RESPONSE BLOCK\n   The\
    \ Inquiry Response Block (see section 8.13) contains the following\n   components:\n\
    \   o  one Status Component (see section 7.16). This component holds the\n   \
    \   status information on the inquired transaction,\n   o  zero or one Payment\
    \ Scheme Components. These contain encapsulated\n      payment scheme specific\
    \ inquiry messages for inquiries on payment.\n   SIGNATURE BLOCK (INQUIRY RESPONSE)\n\
    \   If a signature block is present on the message containing the Inquiry\n  \
    \ Response Block then it may be checked by the receiver of the block to\n   determine\
    \ if the Inquiry Response is valid.\n   If present, the Inquiry Response Signature\
    \ Block (see section 8.13)\n   contains the following components:\n   o one Signature\
    \ Component (see section 7.19)\n   o one or more Certificate Components, if required.\n\
    \   Note: Digital signatures on an Inquiry Response is only likely to\n   occur\
    \ if the recipient of the response expects the Inquiry Request to\n   be signed.\
    \ In this version of IOTP this will require some kind of\n   pre-existing agreement.\
    \ This means that:\n   o  Consumers are unlikely to generate responses with signatures,\n\
    \      although it is not an error if they do\n   o  the other trading roles may\
    \ agree that digital signatures are\n      required. For example a Merchant may\
    \ require that an Inquiry\n      Response is digitally signed by the Payment Handler\
    \ so that they\n      can check that the request response is valid.\n"
- title: 9.2.2 Baseline Ping IOTP Transaction
  contents:
  - "9.2.2 Baseline Ping IOTP Transaction\n   The purpose of the Baseline IOTP Ping\
    \ Transaction is to test basic\n   connectivity between the Trading Roles that\
    \ may take part in an IOTP\n   Transaction.\n   It enables IOTP aware application\
    \ software to:\n   o  determine if the IOTP aware application at another Trading\
    \ Role is\n      operating, and\n   o  verify whether or not the two trading roles\
    \ signatures can be\n      processed.\n   For example it can be used by a Merchant\
    \ to determine if a Payment\n   Handler or Delivery Handler is up and running\
    \ prior to starting a\n   Purchase transaction that uses those trading roles.\n\
    \   The Trading Blocks used by the Baseline Ping IOTP Transaction are:\n   o a\
    \ Ping Request Block (see section 8.14)\n   o a Ping Response Block (see section\
    \ 8.15), and\n   o a Signature Block (see section 8.16).\n   PING MESSAGES\n \
    \  The following figure outlines the message flows in the Baseline IOTP\n   Ping\
    \ Transaction.\n *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \    1st Role\n     |  2nd Role\n"
- title: STEP |     |
  contents:
  - "STEP |     |\n 1.          The IOTP Aware Application in the first Trading Role\n\
    \             decides to check whether the counterparty IOTP\n             application\
    \ is up and running. It generates a Ping\n             Request Block and optional\
    \ Signature Block and sends them\n             to the second trading role.\n \
    \    1 --> 2 PING REQUEST. IotpMsg: Trans Ref Block; Signature Block\n       \
    \      (Optional); Ping Request Block\n 2.          The second Trading Role which\
    \ receives the Ping Request\n             Block generates a Ping Response Block\
    \ and sends it back\n             to the sender of the original Ping Request with\
    \ a\n             signature block if required.\n     1 <-- 2 PING Response. IotpMsg:\
    \ Trans Ref Block; Signature Block\n             (Optional); Ping Response Block\n\
    \ 3.          The first Trading Role checks the Ping Response Block and\n    \
    \         takes appropriate action, if necessary\n *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n\
    \                      Figure 33 Baseline Ping Messages\n   The verification that\
    \ signatures can be handled is indicated by the\n   sender of the Ping Request\
    \ Block including:\n   o  Organisation Components that identify itself and the\
    \ intended\n      recipient of the Ping Request Block, and\n   o  a Signature\
    \ Block that signs data in the Ping Request.\n   In this way the receiver of the\
    \ Ping Request:\n   o  knows who is sending the Ping Request and can therefore\
    \ verify the\n      Signature on the Request, and\n   o  knows who to generate\
    \ a signature for on the Ping Response.\n   Note that a Ping Request:\n   o  does\
    \ not affect any on-going transaction\n   o  does NOT initiate an IOTP transaction,\
    \ unlike other IOTP\n      transaction messages such as TPO or Transaction Status\
    \ Inquiry.\n   All IOTP aware applications must return a Ping Response message\
    \ to\n   the sender of a Ping Request message when it is received.\n   A Baseline\
    \ IOTP Ping request can also contain an optional Signature\n   Block. IOTP aware\
    \ applications can, for example, use the Signature\n   Block to check the recipient\
    \ of a Ping Request can successfully\n   process and check signatures it has received.\n\
    \   For each Baseline Ping IOTP Transaction, each IOTP role shall\n   establish\
    \ a different transport session from other IOTP transactions.\n   Any IOTP Trading\
    \ Role can send a Ping request to any other IOTP\n   Trading Role at any time\
    \ it wants. A Ping message has its own\n   IotpTransId, which is different from\
    \ other IOTP transactions.\n   The remainder of this sub-section on the Baseline\
    \ Ping IOTP\n   Transaction defines the contents of each Trading Block.\n   TRANSACTION\
    \ REFERENCE BLOCK\n   The IotpTransId of a Ping transaction should be different\
    \ from any\n   other IOTP transaction.\n   PING REQUEST BLOCK\n   If the Ping\
    \ Transaction is anonymous then no Organisation Components\n   are included in\
    \ the Ping Request Block (see section 8.7).\n   If the Ping Transaction is not\
    \ anonymous then the Ping Request Block\n   contains Organisation Components for:\n\
    \   o  the sender of the Ping Request Block, and\n   o  the verifier of the Signature\
    \ Component\n   If Organisation Components are present, then it indicates that\
    \ the\n   sender of the Ping Request message has generated a Signature Block.\n\
    \   The signature block must be verified by the Trading Role that\n   receives\
    \ the Ping Request Block.\n   SIGNATURE BLOCK (PING REQUEST)\n   The Ping Request\
    \ Signature Block (see section 8.16) contains the\n   following components:\n\
    \   o  one Signature Component (see section 7.19)\n   o  one or more Certificate\
    \ Components, if required.\n   PING RESPONSE BLOCK\n   The Ping Response Block\
    \ (see section 8.15) contains the following\n   component:\n   o  the Organisation\
    \ Component of the sender of the Ping Response\n      message\n   If the Ping\
    \ Transaction is not anonymous then the Ping Response\n   additionally contains:\n\
    \   o  copies of the Organisation Components contained in the Ping\n      Request\
    \ Block.\n   SIGNATURE BLOCK (PING RESPONSE)\n   The Ping Response Signature Block\
    \ (see section 8.16) contains the\n   following components:\n   o  one Signature\
    \ Component (see section 7.19)\n   o  one or more Certificate Components, if required.\n"
- title: 10. Retrieving Logos
  contents:
  - "10. Retrieving Logos\n   This section describes how to retrieve logos for display\
    \ by IOTP\n   aware software using the Logo Net Locations attribute contained\
    \ in\n   the Brand Element (see section 7.7.1) and the Organisation Component\n\
    \   (see section 7.6).\n   The full address of a logo is defined as follows: \
    \ Logo_address ::=\n   Logo_net_location \"/\" Logo_size Logo_color_depth \".gif\"\
    \n   Where:\n   o  Logo_net_location is obtained from the LogoNetLocn attribute\
    \ in\n      the Brand Element (see section 7.7.1) or the Organisation\n      Component.\
    \ Note that:\n      -  the content of this attribute is dependent on the Transport\n\
    \         Mechanism (such as HTTP) that is used. See the Transport\n         Mechanism\
    \ supplement,\n      -  implementers should check that if the rightmost character\
    \ of\n         Logo Net Location is set to right-slash \"/\" then another, right\n\
    \         slash should not be included when generating the Logo Address,\n   o\
    \  Logo_size identifies the size of the logo,\n   o  Logo_color_depth identifies\
    \ the colour depth of the logo\n   o  \"gif\" indicates that the logos are in\
    \ \"gif\" format\n   Logo_size and Logo_color_depth are specified by the implementer\
    \ of\n   the IOTP software that is retrieving the logo depending on the size\n\
    \   and colour that they want to use.\n"
- title: 10.1 Logo Size
  contents:
  - "10.1 Logo Size\n   There are five standard sizes for logos. The sizes in pixels\
    \ and the\n   corresponding values for Logo Size are given in the table below.\n\
    \           Size in     Logo Size\n           Pixels        Value\n        32\
    \ x 32 or   exsmall\n        32 x 20\n        53 x 33      small\n        103\
    \ x 65     medium\n        180 x 114    large\n        263 x 166    exlarge\n"
- title: 10.2 Logo Color Depth
  contents:
  - "10.2 Logo Color Depth\n   There are three standard colour depths. The colour\
    \ depth (including\n   bits per pixel) and the corresponding value for Logo_Color_Depth\
    \ are\n   given in the table below.\n                Color Depth          Logo\
    \ Color\n             (bits per pixel)        Depth Value\n         4 (16 colors)\
    \            4\n         8 (256 colors)           nothing\n         24 (16 million\
    \ colors)   24\n   Note that if Logo Color Depth is omitted then a logo with the\
    \ default\n   colour depth of 256 colours will be retrieved.\n"
- title: 10.3 Logo Net Location Examples
  contents:
  - "10.3 Logo Net Location Examples\n   If Logo Net Location was set to \"ftp://logos.xzpay.com\"\
    , then:\n   o  \"ftp://logos.xzpay.com/medium.gif\" would retrieve a medium size\n\
    \      256 colour logo\n   o  \"http://logos.xzpay.com/small4.gif\" would retrieve\
    \ a small size 16\n      colour logo\n   Note: Organisations which make logos\
    \ available for use with IOTP\n   should always make available \"small\" and \"\
    medium\" size logos and use\n   the \"gif\" format.\n"
- title: 11. Brands
  contents:
  - "11. Brands\n   This section contains:\n   o  a definition of Brands and an outline\
    \ of Brand Selection using\n      Brand Lists, and\n   o  some XML examples of\
    \ Brand Lists\n"
- title: 11.1 Brand Definitions and Brand Selection
  contents:
  - "11.1 Brand Definitions and Brand Selection\n   One of the key features of IOTP\
    \ is the ability for a merchant to\n   offer a list of Brands from which a consumer\
    \ may make a selection.\n   This section provides an overview of what is involved\
    \ and provides\n   guidance on how selection of a brand and associated payment\n\
    \   instrument can be carried out by a Consumer. It covers:\n   o  definitions\
    \ of Payment Instruments and Brands - what are Payment\n      Instruments and\
    \ Brands in an IOTP context. Further categorises\n      Brands as optionally a\
    \ \"Dual Brand\" or a \"Promotional Brand\",\n   o  identification and selection\
    \ of Promotional Brands - Promotional\n      Brands offer a Consumer some additional\
    \ benefit, for example\n      loyalty points or a discount. This means that both\
    \ Consumers and\n      Merchant must be able to correctly identify that a valid\n\
    \      Promotional Brand is being used.\n   Also see the following sections:\n\
    \   o  Brand List Component (section 7.7) which contains definitions of\n    \
    \  the XML elements which contain the list of Brands offered by a\n      Merchant\
    \ to a Consumer, and\n   o  Brand Selection Component (section 7.8) for details\
    \ of how a\n      Consumer records the Brand, currency, amount and payment protocol\n\
    \      that was selected.\n"
- title: 11.1.1 Definition of Payment Instrument
  contents:
  - "11.1.1 Definition of Payment Instrument\n   A Payment Instrument is the means\
    \ by which a Consumer pays for goods\n   or services offered by a Merchant. It\
    \ can be, for example:\n   o  a credit card such as MasterCard or Visa;\n   o\
    \  a debit card such as MasterCard's Maestro;\n   o  a smart card based electronic\
    \ cash payment instrument such as a\n      Mondex Card, a GeldKarte card or a\
    \ Visa Cash card\n   o  a software based electronic payment account such as a\
    \ CyberCash or\n      DigiCash account.\n   Most Payment Instruments have a number,\
    \ typically an account number,\n   by which the Payment Instrument can be identified.\n"
- title: 11.1.2 Definition of Brand
  contents:
  - "11.1.2 Definition of Brand\n   A Brand is the mark which identifies a particular\
    \ type of Payment\n   Instrument. A list of Brands are the payment options which\
    \ are\n   presented by the Merchant to the Consumer and from which the Consumer\n\
    \   makes a selection. Each Brand may have a different Payment Handler.\n   Examples\
    \ of Brands include:\n   o  payment association and proprietary Brands, for example\n\
    \      MasterCard, Visa, American Express, Diners Club, Mondex,\n      GeldKarte,\
    \ CyberCash, etc.\n   o  promotional brands (see below). These include:\n    \
    \  -  store brands, where the Payment Instrument is issued to a\n         Consumer\
    \ by a particular Merchant, for example Walmart, Sears,\n         or Marks and\
    \ Spencer (UK)\n      -  cobrands, for example American Advantage Visa, where\
    \ an\n         Organisation uses their own brand in conjunction with,\n      \
    \   typically, a payment association Brand.\n"
- title: 11.1.3 Definition of Dual Brand
  contents:
  - "11.1.3 Definition of Dual Brand\n   A Dual Brand means that a single payment\
    \ instrument may be used as if\n   it were two separate Brands. For example there\
    \ could be a single\n   Japanese \"UC\" MasterCard which can be used as either\
    \ a UC card or a\n   regular MasterCard. The UC card Brand and the MasterCard\
    \ Brand could\n   each have their own separate Payment Handlers. This means that:\n\
    \   o  the merchant treats, for example \"UC\" and \"MasterCard\" as two\n   \
    \   separate Brands when offering a list of Brands to the Consumer,\n   o  the\
    \ consumer chooses a Brand, for example either \"UC\" or\n      \"MasterCard,\n\
    \   o  the consumer IOTP aware application determines which Payment\n      Instrument(s)\
    \ match the chosen Brand, and selects, perhaps with\n      user assistance, the\
    \ correct Payment Instrument to use.\n   Note: Dual Brands need no special treatment\
    \ by the Merchant and\n   therefore no explicit reference is made to Dual Brands\
    \ in the DTD.\n   This is because, as far as the Merchant is concerned, each Brand\
    \ in a\n   Dual Brand is treated as a separate Brand. It is at the Consumer,\n\
    \   that the matching of a Brand to a Dual Brand Payment Instrument needs\n  \
    \ to be done.\n"
- title: 11.1.4 Definition of Promotional Brand
  contents:
  - "11.1.4 Definition of Promotional Brand\n   A Promotional Brand means that, if\
    \ the Consumer pays with that Brand,\n   then the Consumer will receive some additional\
    \ benefit which can be\n   received in two ways:\n   o  at the time of purchase.\
    \ For example if a Consumer pays with a\n      \"Walmart MasterCard\" at a Walmart\
    \ web site, then a 5% discount\n      might apply, which means the consumer actually\
    \ pays less,\n   o  from their Payment Instrument (card) issuer when the payment\n\
    \      appears on their statement. For example loyalty points in a\n      frequent\
    \ flyer scheme could be awarded based on the total payments\n      made with the\
    \ Payment Instrument since the last statement was\n      issued.\n   Note that:\n\
    \   o  the first example (obtaining the benefit at the time of purchase),\n  \
    \    requires that:\n      -  the Consumer is informed of the benefits which arise\
    \ if that\n         Brand is selected\n      -  if the Brand is selected, the\
    \ Merchant changes the relevant\n         IOTP Components in the Offer Response\
    \ to reflect the correct\n         amount to be paid\n   o  the second (obtaining\
    \ a benefit through the Payment Instrument\n      issuer) does not require that\
    \ the Offer Response is changed\n   o  each Promotional Brand should be identified\
    \ as a separate Brand in\n      the list of Brands offered by the Merchant. For\
    \ example:\n      \"Walmart\", \"Sears\", \"Marks and Spencer\" and \"American\
    \ Advantage\n      Visa\", would each be a separate Brand.\n"
- title: 11.1.5 Identifying Promotional Brands
  contents:
  - "11.1.5 Identifying Promotional Brands\n   There are two problems which need to\
    \ handled in identifying\n   Promotional Brands:\n   o  how does the Merchant\
    \ or their Payment Handler positively identify\n      the promotional brand being\
    \ used at the time of purchase\n   o  how does the Consumer reliably identify\
    \ the correct promotional\n      brand from the Brand List presented by the Merchant\n\
    \   The following is a description of how this could be achieved.\n   Note: Please\
    \ note that the approach described here is a model\n   approach that solves the\
    \ problem. Other equivalent methods may be\n   used.\n"
- title: 11.1.5.1 Merchant/Payment Handler Identification of Promotional Brands
  contents:
  - "11.1.5.1 Merchant/Payment Handler Identification of Promotional Brands\n   Correct\
    \ identification that the Consumer is paying using a\n   Promotional Brand is\
    \ important since a Consumer might fraudulently\n   claim to have a Promotional\
    \ Brand that offers a reduced payment\n   amount when in reality they do not.\n\
    \   Two approaches seem possible:\n   o  use some feature of the Payment Instrument\
    \ or the payment method\n      to positively identify the Brand being used. For\
    \ example, the SET\n      certificate for the Brand could be used, if one is available,\
    \ or\n   o  use the Payment Instrument (card) number to look up information\n\
    \      about the Payment Instrument on a Payment Instrument issuer\n      database\
    \ to determine if the Payment Instrument is a promotional\n      brand.\n   Note\
    \ that:\n   o  the first assumes that SET is available.\n   o  the second is only\
    \ possible if the Merchant, or alternatively the\n      Payment Handler, has access\
    \ to card issuer information.\n   IOTP does not provide the Merchant with Payment\
    \ Instrument\n   information (e.g., a card or account number). This is only sent\
    \ as\n   part of the encapsulated payment protocol to a Payment Handler. This\n\
    \   means that:\n   o  the Merchant would have to assume that the Payment Instrument\n\
    \      selected was a valid Promotional Brand, or\n   o  the Payment Handler would\
    \ have to check that the Payment\n      Instrument was for the valid Promotional\
    \ Brand and fail the\n      payment if it was not.\n   A Payment Handler checking\
    \ that a brand is a valid Promotional Brand\n   is most likely if the Payment\
    \ Handler is also the Card Issuer.\n"
- title: 11.1.5.2 Consumer Selection of Promotional Brands
  contents:
  - "11.1.5.2 Consumer Selection of Promotional Brands\n   Two ways by which a Consumer\
    \ can correctly select a Promotional Brand\n   are:\n   o  the Consumer visually\
    \ matching a logo for the Promotional Brand\n      which has been provided to\
    \ the Consumer by the Merchant,\n   o  the Consumer's IOTP aware application matching\
    \ a code for the\n      Promotional Brand which the application has registered\
    \ against a\n      similar code contained in the list of Brands offered by the\n\
    \      Merchant.\n   In the latter case, the code contained in the Consumer wallet\
    \ must\n   match exactly the code in the list offered by the Merchant otherwise\n\
    \   no match will be found. Ways in which the Consumer's IOTP Aware\n   Application\
    \ could obtain such a code include:\n   o  the Consumer types the code in directly.\
    \ This is error prone and\n      not user friendly, also the consumer needs to\
    \ be provided with the\n      code.  This approach is not recommended,\n   o \
    \ using one of the Brand Identifiers defined by IOTP and pre-loaded\n      into\
    \ the Consumers IOTP Aware application or wallet by the\n      developer of the\
    \ Wallet,\n   o  using some information contained in the software or other data\n\
    \      associated with the Payment Instrument. This could be:\n      -  a SET\
    \ certificate for Brands which use this payment method\n      -  a code provided\
    \ by the payment software which handles the\n         particular payment method,\
    \ this could apply to, for example,\n         GeldKarte, Mondex, CyberCash and\
    \ DigiCash,\n   o  the consumer making an initial \"manual\" link between a Promotional\n\
    \      Brand in the list of Brands offered by the Merchant and an\n      individual\
    \ Payment Instrument, the first time the promotional\n      brand is used. The\
    \ IOTP Aware application would then \"remember\"\n      the code for the Promotional\
    \ Brand for use in future purchases.\n"
- title: 11.1.5.3 Consumer Software Brand Id recommendation
  contents:
  - "11.1.5.3 Consumer Software Brand Id recommendation\n   New Brand Ids are allocated\
    \ under IANA procedures (see section 12\n   IANA Considerations). Which also contains\
    \ an initial list of Brand\n   Identifiers.\n   It is recommended that implementers\
    \ of consumer IOTP aware\n   applications (e.g., software wallets) pre-load their\
    \ software with\n   the then current set of Brand Ids and provide a method by\
    \ which they\n   can be updated. For example, by going to the software developer's\
    \ web\n   site.\n"
- title: 11.2 Brand List Examples
  contents:
  - "11.2 Brand List Examples\n   This example contains three examples of the XML\
    \ for a Brand List\n   Component. It covers:\n   o  a simple credit card based\
    \ example\n   o  a credit card based brand list including promotional credit card\n\
    \      brands, and\n   o  a complex electronic cash based brand list\n   Note\
    \ that:\n   o  brand lists can be as complex or as simple as required\n   o  all\
    \ example techniques described in this appendix can be included\n      in one\
    \ brand list.\n"
- title: 11.2.1 Simple Credit Card Based Example
  contents:
  - "11.2.1 Simple Credit Card Based Example\n   This is a simple example involving:\n\
    \   o  only major credit card payment brands\n   o  a single price in a single\
    \ currency\n   o  a single Payment Handler, and\n   o  a single payment protocol\n\
    \   <BrandList ID='M1.2'\n     XML:Lang='us-en'\n     ShortDesc='Purchase book\
    \ including s&h'\n     PayDirection='Debit' >\n     <Brand ID ='M1.30'\n     \
    \  BrandId='MasterCard'\n       BrandName='MasterCard Credit'\n       BrandLogoNetLocn='ftp://otplogos.mastercard.com/mastercardcredit'\n\
    \       ProtocolAmountRefs='M1.33'>\n     </Brand>\n     <Brand ID ='M.31'\n \
    \      BrandId='Visa'\n       BrandName='Visa Credit'\n       BrandLogoNetLocn='ftp://otplogos.visa.com/visacredit'\n\
    \       ProtocolAmountRefs='M1.33'>\n     </Brand>\n     <Brand ID ='M1.32'\n\
    \       BrandId='AmericanExpress'\n       BrandName='American Express'\n     \
    \  BrandLogoNetLocn='ftp://otplogos.amex.com'\n       ProtocolAmountRefs ='M1.33'\
    \ >\n     </Brand >\n     <ProtocolAmount ID ='M1.33'\n       PayProtocolRef='M1.35'\n\
    \       CurrencyAmountRefs='M1.34'>\n     </ProtocolAmount>\n     <CurrencyAmount\
    \ ID ='M1.34'\n       Amount='10.95'\n       CurrCode='USD'/>\n     <PayProtocol\
    \ ID ='M1.35'\n       ProtocolId='SCCD1.0'\n       ProtocolName='Secure Channel\
    \ Credit/Debit'\n       PayReqNetLocn='http://www.example.com/etill/sccd1' >\n\
    \     </PayProtocol>\n   </BrandList>\n"
- title: 11.2.2 Credit Card Brand List Including Promotional Brands
  contents:
  - "11.2.2 Credit Card Brand List Including Promotional Brands\n   An example of\
    \ a Credit Card based Brand List follows. It includes:\n   o  two ordinary card\
    \ association brands and two promotional credit\n      card brands. The promotional\
    \ brands consist of one loyalty based\n      (British Airways MasterCard) which\
    \ offers additional loyalty\n      points and one store based (Walmart) which\
    \ offers a discount on\n      purchases over a certain amount\n   o  two payment\
    \ protocols:\n      -  SET (Secure Electronic Transactions) see [SET], and\n \
    \     -  SCCD (Secure Channel Credit Debit) see [SCCD].\n <BrandList ID='M1.2'\n\
    \   XML:Lang='us-en'\n   ShortDesc='Purchase ladies coat'\n   PayDirection='Debit'\
    \ >\n   <Brand ID ='M1.3'\n     BrandId='MasterCard'\n     BrandName='MasterCard\
    \ Credit'\n     BrandLogoNetLocn='ftp://otplogos.mastercard.com'\n     ProtocolAmountRefs='M1.7\
    \ M1.8'>\n     <ProtocolBrand ProtocolId='SET1.0' ProtocolBrandId='MasterCard:'>\n\
    \     </ProtocolBrand>\n   </Brand>\n   <Brand ID ='M1.4'\n     BrandId='Visa'\n\
    \     BrandName='Visa Credit'\n     BrandLogoNetLocn='ftp://otplogos.visa.com'\n\
    \     ProtocolAmountRefs='M1.7 M1.8'>\n     <ProtocolBrand ProtocolId='SET1.0'\
    \ ProtocolBrandId='Visa:'>\n     </ProtocolBrand>\n   </Brand>\n   <Brand ID ='M1.5'\n\
    \     BrandId='BritishAirwaysMC'\n     BrandName='British Airways MasterCard'\n\
    \     BrandLogoNetLocn='ftp://otplogos.britishairways.co.uk'\n     BrandNarrative='Double\
    \ air miles with British Airways MasterCard'\n     ProtocolAmountRefs ='M1.7 M1.8'\
    \ >\n     <ProtocolBrand ProtocolId='SET1.0' ProtocolBrandId='MasterCard:BA'>\n\
    \     </ProtocolBrand>\n   </Brand >\n   <Brand ID ='M1.6'\n     BrandId='Walmart'\n\
    \     BrandName='Walmart Store Card'\n     BrandLogoNetLocn='ftp://otplogos.walmart.com'\n\
    \     BrandNarrative='5% off with your Walmart Card\n                   on purchases\
    \ over $150'\n     ProtocolAmountRefs='M1.8'>\n   </Brand>\n   <ProtocolAmount\
    \ ID ='M1.7'\n     PayProtocolRef='M1.10'\n     CurrencyAmountRefs='M1.9' >\n\
    \     <PackagedContent Transform=\"BASE64\">\n        238djqw1298erh18dhoire\n\
    \     </PackagedContent>\n   </ProtocolAmount>\n   <ProtocolAmount ID ='M1.8'\n\
    \     PayProtocolRef='M1.11'\n     CurrencyAmountRefs='M1.9' >\n     <PackagedContent\
    \ Transform=\"BASE64\">\n        238djqw1298erh18dhoire\n     </PackagedContent>\n\
    \   </ProtocolAmount>\n   <CurrencyAmount ID ='M1.9'\n     Amount='157.53'\n \
    \    CurrCode='USD'/>\n   <PayProtocol ID ='M1.10'\n     ProtocolId='SET1.0'\n\
    \     ProtocolName='Secure Electronic Transaction Version 1.0'\n     PayReqNetLocn='http://www.example.com/etill/set1'\
    \ >\n     <PackagedContent Transform=\"BASE64\">\n       8ueu26e482hd82he82\n\
    \     </PackagedContent>\n   </PayProtocol>\n   <PayProtocol ID ='M1.11'\n   \
    \  ProtocolId='SCCD1.0'\n     ProtocolName='Secure Channel Credit/Debit'\n   \
    \  PayReqNetLocn='http://www.example.com/etill/sccd1' >\n     <PackagedContent\
    \ Transform=\"BASE64\">\n        82hd82he8226e48ueu\n     </PackagedContent>\n\
    \   </PayProtocol>\n  </BrandList>\n"
- title: 11.2.3 Brand Selection Example
  contents:
  - "11.2.3 Brand Selection Example\n   In order to pay by 'British Airways' MasterCard\
    \ using the example\n   above using SET and therefore getting double air miles,\
    \ the Brand\n   Selection would be:\n   <BrandSelection ID='C1.2'\n     BrandListRef='M1.3'\n\
    \     BrandRef='M1.5'\n     ProtocolAmountRef='M1.7'\n     CurrencyAmountRef='M1.9'\
    \ >\n   </BrandSelection>\n"
- title: 11.2.4 Complex Electronic Cash Based Brand List
  contents:
  - "11.2.4 Complex Electronic Cash Based Brand List\n   The following is an fairly\
    \ complex example which includes:\n   o  payments using either Mondex, GeldKarte,\
    \ CyberCash or DigiCash\n   o  in currencies including US dollars, British Pounds,\
    \ Italian Lira,\n      German Marks and Canadian Dollars\n   o  a discount on\
    \ the price if the payment is made in Mondex using\n      British pounds or US\
    \ dollars, and\n   o  more than one Payment Handler is used for payments involving\n\
    \      Mondex or CyberCash\n   o  support for more than one version of a CyberCash\
    \ CyberCoin payment\n      protocol.\n   <BrandList ID='M1.2'\n     XML:Lang='us-en'\n\
    \     ShortDesc='Company report on XYZ Co'\n     PayDirection='Debit' >\n    \
    \ <Brand ID ='M1.13'\n       BrandId='Mondex'\n       BrandName='Mondex Electronic\
    \ Cash'\n       BrandLogoNetLocn='ftp://otplogos.mondex.com'\n       ProtocolAmountRefs='M1.17\
    \ M1.18'>\n     </Brand>\n     <Brand ID ='M1.14'\n       BrandId='GeldKarte'\n\
    \       BrandName='GeldKarte Electronic Cash'\n       BrandLogoNetLocn='ftp://otplogos.geldkarte.co.de'\n\
    \       ProtocolAmountRefs='M1.19'>\n     </Brand>\n     <Brand ID ='M1.15'\n\
    \       BrandId='CyberCoin'\n       BrandName='CyberCoin Eletronic Cash'\n   \
    \    BrandLogoNetLocn='http://otplogos.cybercash.com'\n       ProtocolAmountRefs\
    \ ='M1.20' >\n     </Brand >\n     <Brand ID ='M1.16'\n       BrandId='DigiCash'\n\
    \       BrandName='DigiCash Electronic Cash'\n       BrandLogoNetLocn='http://otplogos.digicash.com'\n\
    \       BrandNarrative='5% off with your Walmart Card\n                     on\
    \ purchases over $150'\n       ProtocolAmountRefs='M1.22'>\n     </Brand>\n  \
    \   <ProtocolAmount ID ='M1.17'\n       PayProtocolRef='M1.31'\n       CurrencyAmountRefs='M1.25\
    \ M1.29'>\n     </ProtocolAmount>\n     <ProtocolAmount ID ='M1.18'\n       PayProtocolRef='M1.32'\n\
    \       CurrencyAmountRefs='M1.26 M1.27 M1.28 M1.30'>\n     </ProtocolAmount>\n\
    \     <ProtocolAmount ID ='M1.19'\n       PayProtocolRef='M1.35'\n       CurrencyAmountRefs='M1.28'>\n\
    \     </ProtocolAmount>\n     <ProtocolAmount ID ='M1.20'\n       PayProtocolRef='M1.34\
    \ M1.33'\n       CurrencyAmountRefs='M1.23 M1.24 M1.27 M1.28 M1.29 M1.30'>\n \
    \    </ProtocolAmount>\n     <ProtocolAmount ID ='M1.21'\n       PayProtocolRef='M1.36'\n\
    \       CurrencyAmountRefs='M1.23 M1.24 M1.27 M1.28 M1.29 M1.30'>\n     </ProtocolAmount>\n\
    \     <CurrencyAmount ID ='M1.23'\n       Amount='20.00'\n       CurrCode='USD'/>\n\
    \     <CurrencyAmount ID ='M1.24'\n       Amount='12.00'\n       CurrCode='GBP'/>\n\
    \     <CurrencyAmount ID ='M1.25'\n       Amount='19.50'\n       CurrCode='USD'/>\n\
    \     <CurrencyAmount ID ='M1.26'\n       Amount='11.75'\n       CurrCode='GBP'/>\n\
    \     <CurrencyAmount ID ='M1.27'\n       Amount='36.00'\n       CurrCode='DEM'/>\n\
    \     <CurrencyAmount ID ='M1.28'\n       Amount='100.00'\n       CurrCode='FFR'/>\n\
    \     <CurrencyAmount ID ='M1.29'\n       Amount='22.00'\n       CurrCode='CAD'/>\n\
    \     <CurrencyAmount ID ='M1.30'\n       Amount='15000'\n       CurrCode='ITL'/>\n\
    \     <PayProtocol ID ='M1.31'\n       ProtocolId='MXv1.0'\n       ProtocolName='Mondex\
    \ IOTP Protocol Version 1.0'\n       PayReqNetLocn='http://www.mxbankus.com/etill/mx'\
    \ >\n     </PayProtocol>\n     <PayProtocol ID ='M1.32'\n       ProtocolId='MXv1.0'\n\
    \       ProtocolName='Mondex IOTP Protocol Version 1.0'\n       PayReqNetLocn='http://www.mxbankuk.com/vserver'\
    \ >\n     </PayProtocol>\n     <PayProtocol ID ='M1.33'\n       ProtocolId='Ccashv1.0'\n\
    \       ProtocolName='CyberCoin Version 1.0'\n       PayReqNetLocn='http://www.cybercash.com/ccoin'\
    \ >\n     </PayProtocol>\n     <PayProtocol ID ='M1.34'\n       ProtocolId='CCashv2.0'\n\
    \       ProtocolName='CyberCoin Version 2.0'\n       PayReqNetLocn='http://www.cybercash.com/ccoin'\
    \ >\n     </PayProtocol>\n     <PayProtocol ID ='M1.35'\n       ProtocolId='GKv1.0'\n\
    \       ProtocolName='GeldKarte Version 1.0'\n       PayReqNetLocn='http://www.example.com/pgway'\
    \ >\n     </PayProtocol>\n     <PayProtocol ID ='M1.36'\n       ProtocolId='DCashv1.0'\n\
    \       ProtocolName='DigiCash Protocol Version 1.0'\n       PayReqNetLocn='http://www.example.com/digicash'\
    \ >\n     </PayProtocol>\n     </BrandList>\n"
- title: 12. IANA Considerations
  contents:
  - "12. IANA Considerations\n   This section describes the codes that are controlled\
    \ by IANA, and\n   also how new codes can be created for testing purposes that\
    \ are not\n   controlled by IANA.\n"
- title: 12.1 Codes Controlled by IANA
  contents:
  - "12.1 Codes Controlled by IANA\n   To help ensure interoperability, there is a\
    \ need for codes used by\n   IOTP to be maintained in a controlled environment\
    \ so that their\n   meaning and usage are well defined and duplicate codes avoided.\n\
    \   [IANA] is the mechanism to be used for this purpose as described in\n   RFC\
    \ 2434.\n   The element types and attributes names to which this procedure\n \
    \  applies is shown in the table below together with the initial values\n   that\
    \ are valid for these attributes.\n   Note that:\n   o  the IETF Trade mailing\
    \ list's email address is ietf-\n      trade@elistx.com\n   o  \"Designated Experts\"\
    \ (see [IANA]) are appointed by the IESG.\n     Element Type/                \
    \     Attribute Values\n     Attribute Name\n   Algorithm/         \"sha1\" -\
    \ indicates that a [SHA1] authentication\n   Name               will apply\n \
    \  (When Algorithm\n   is a child of an   \"signature\" - indicates that authentication\n\
    \   AuthReq            consists of the generation of a digital signature.\n  \
    \ Component)\n                      \"Pay:ppp\" where \"ppp\" may be set to any\
    \ valid\n                      value for \"iotpbrand\" (see below)\n         \
    \             With the exception of Algorithms that begin with\n             \
    \         \"pay:\", new values are allocated following review\n              \
    \        on the IETF Trade mailing list and by the\n                      Designated\
    \ Expert.\n   Note:     The Algorithm element is likely to be eventually defined\n\
    \   within the [DSIG] name space. It is likely that the maintenance\n   procedure\
    \ defined here may need to vary over time, as the DSIG\n   proposals become more\
    \ widely adopted.\n     Element Type/                     Attribute Values\n \
    \    Attribute Name\n   Brand/BrandId      The following list of initial BrandIds\
    \ have been\n                      taken from those Organisations that have applied\n\
    \                      for SET certificates as at 1st June 1999:\n           \
    \           \"Amex\" - American Express\n                      \"Dankort\" - Dankort\n\
    \                      \"JCB\" - JCB\n                      \"Maestro\" - Maestro\n\
    \                      \"MasterCard\" - MasterCard\n                      \"NICOS\"\
    \ - NICOS\n                      \"VISA\" - Visa\n                      In addition\
    \ the following Brand Id values are\n                      defined:\n        \
    \              \"Mondex\"\n                      \"GeldKarte\"\n             \
    \         New values of BrandId must be announced to the\n                   \
    \   IETF Trade mailing list and, if there are no\n                      objections\
    \ within three weeks, are allocated on a\n                      \"first come first\
    \ served\" basis.\n   CurrencyAmount/    Currency codes are dependent on CurrCodeType\
    \ (see\n   CurrCode           below).\n                      If CurrCodeType is\
    \ \"ISO4217-A\" then the currency\n                      code is an alphabetic\
    \ currency code as defined by\n                      [ISO4217].\n            \
    \          If CurrCodeType is \"IOTP\" then new values must be\n             \
    \         announced to the IETF Trade mailing list and, if\n                 \
    \     there are no objections within three weeks, are\n                      allocated\
    \ on a \"first come first served\" basis.\n   Note:     The Currency Code Type\
    \ of IOTP, is designed to allow the\n   support of \"new\" psuedo currencies such\
    \ as loyalty or frequent flyer\n   points. At the time of writing this specification,\
    \ no currency codes\n   of this type have been defined.\n     Element Type/  \
    \                   Attribute Values\n     Attribute Name\n   CurrencyAmount/\
    \    \"ISO4217-A\"\n   CurrCodeType\n                      \"IOTP\"\n        \
    \              New values of CurrCodeType attribute are allocated\n          \
    \            following review on the IETF Trade mailing list\n               \
    \       and by the Designated Expert.\n   DeliveryData/      \"Post\"\n   DelivMethod\n\
    \                      \"Web\"\n                      \"Email\"\n            \
    \          New values of Delivery Method attribute are\n                     \
    \ allocated following review on the IETF Trade\n                      mailing\
    \ list and by the Designated Expert. This\n                      may require the\
    \ publication of additional\n                      documentation to describe how\
    \ the delivery method\n                      is used.\n   PackagedContent/   \"\
    PCDATA\"\n   Content\n                      \"MIME\"\n                      \"\
    MIME:mimetype\" (where mimetype must be the same\n                      as content-type\
    \ as defined by [MIME] )\n                      \"XML\"\n                    \
    \  If the Content attribute is of the form\n                      \"MIME\"mimetype\"\
    , then control of new values for\n                      \"mimetype\" is as defined\
    \ in [MIME].\n                      Otherwise, new values of the Content attribute\
    \ are\n                      allocated following review on the IETF Trade\n  \
    \                    mailing list and by the Designated Expert. This\n       \
    \               may require the publication of additional\n                  \
    \    documentation to describe how the new attribute is\n                    \
    \  used within a Packaged Content element.\n   RelatedTo/         \"IotpTransaction\"\
    \n   RelationshipType\n                      \"Reference\"\n                 \
    \     New values of the RelationshipType attribute are\n                     \
    \ allocated following review on the IETF Trade\n                      Working\
    \ Group mailing list and by the Designated\n                      Expert. This\
    \ may require the publication of\n                      additional documentation\
    \ to describe how the\n     Element Type/                     Attribute Values\n\
    \     Attribute Name\n                      delivery method is used.\n   Status/\
    \            Offer\n   StatusType\n                      Payment\n           \
    \           Delivery\n                      Authentication\n                 \
    \     Unidentified\n                      New values of the Status Type attribute\
    \ are\n                      allocated following:\n                       o publication\
    \ to the IETF Trade Working Group,\n                         of an RFC describing\
    \ the Trading Exchange,\n                         Trading Roles and associated\
    \ components that\n                         relate to the Status, and\n      \
    \                 o review of the document on the IETF Trade\n               \
    \          mailing list and by the Designated Expert.\n   Note: The document describing\
    \ new values for the Status Type\n   attribute may be combined with documents\
    \ that describe new Trading\n   Roles and types of signatures (see below).\n \
    \  TradingRole/       \"Consumer\"\n   TradingRole\n                      \"Merchant\"\
    \n                      \"PaymentHandler\"\n                      \"DeliveryHandler\"\
    \n                      \"DelivTo\"\n                      \"CustCare\"\n    \
    \                  New values of the Trading Role attribute are\n            \
    \          allocated following:\n                       o publication to the IETF\
    \ Trade Working Group,\n                         of an RFC describing the Trading\
    \ Exchange,\n                         Trading Roles and associated components\
    \ that\n                         relate to the Trading Role, and\n           \
    \            o review of the document on the IETF Trade\n                    \
    \     mailing list and by the Designated Expert.\n   Note: The document describing\
    \ new values for the Trading Role\n   attribute may be\n     Element Type/   \
    \                  Attribute Values\n     Attribute Name\n                   \
    \                combined with documents that describe\n                     \
    \              new Status Types (see above) and\n                            \
    \       types of signatures (see below).\n   TransId/           \"BaselineAuthentication\"\
    \n   IotpTransType\n                      \"BaselineDeposit\"\n              \
    \        \"BaselinePurchase\"\n                      \"BaselineRefund\"\n    \
    \                  \"BaselineWithdrawal\"\n                      \"BaselineValueExchange\"\
    \n                      \"BaselineInquiry\"\n                      \"BaselinePing\"\
    \n                      New values of the IotpTransType attribute are\n      \
    \                allocated following:\n                       o publication to\
    \ the IETF Trade mailing list, of\n                         an RFC describing\
    \ the new IOTP Transaction, and\n                       o review of the document\
    \ on the IETF Trade\n                         Working Group mailing list and by\
    \ the\n                         Designated Expert.\n   Attribute/ Content\n  \
    \ (see Signature\n                      \"OfferResponse\"\n   Component)     \
    \    \"PaymentResponse\"\n                      \"DeliveryResponse\"\n       \
    \               \"AuthenticationRequest\"\n                      \"AuthenticationResponse\"\
    \n                      \"PingRequest\"\n                      \"PingResponse\"\
    \n                      New values of the code that define the type of a\n   \
    \                   signature are allocated following:\n                     \
    \  o publication to the IETF Trade Working Group,\n                         of\
    \ an RFC describing the Trading Exchange where\n                         the signature\
    \ is being used, and\n                       o review of the document on the IETF\
    \ Trade\n                         mailing list and by the Designated Expert.\n\
    \     Element Type/                     Attribute Values\n     Attribute Name\n\
    \   Note: The document describing new values for the types of signatures\n   may\
    \ be combined with documents that describe new Status Types and\n   Trading Roles\
    \ (see above).\n"
- title: 12.2 Codes not controlled by IANA
  contents:
  - "12.2 Codes not controlled by IANA\n   In addition to the formal development and\
    \ registration of codes as\n   described above, there is still a need for developers\
    \ to experiment\n   using new IOTP codes. For this reason, \"user defined codes\"\
    \ may be\n   used to identify additional values for the codes contained within\n\
    \   this specification without the need for them to be registered with\n   IANA.\n\
    \   The definition of a user defined code is as follows:\n   user_defined_code\
    \ ::= ( \"x-\" | \"X-\" ) NameChar (NameChar)*\n     NameChar           NameChar\
    \ has the same definition as the [XML]\n                        definition of\
    \ NameChar\n   Use of domain names (see [DNS]) to make user defined codes unique\
    \ is\n   recommended although this method cannot be relied upon.\n"
- title: 13. Internet Open Trading Protocol Data Type Definition
  contents:
  - "13. Internet Open Trading Protocol Data Type Definition\n   This section contains\
    \ the XML DTD for the Internet Open Trading\n   Protocols.\n   <!--\n   ******************************************************\n\
    \   *                                                    *\n   * INTERNET OPEN\
    \ TRADING PROTOCOL VERSION 1.0 DTD     *\n   * Filename: ietf.org/rfc/rfc2801.dtd\
    \                 *\n   *                                                    *\n\
    \   * Changes from version 07 (iotp-v1.0-protocol-07.dtd)*\n   *   - NO CHANGES\
    \                                     *\n   *                                \
    \                    *\n   *                                                 \
    \   *\n   *                                                    *\n   *       \
    \                                             *\n   * Copyright Internet Engineering\
    \ Task Force 1998-2000*\n   *                                                \
    \    *\n   ******************************************************\n   ******************************************************\n\
    \   * IOTP MESSAGE DEFINITION                            *\n   ******************************************************\n\
    \    -->\n   <!ELEMENT IotpMessage\n      ( TransRefBlk,\n        IotpSignatures?,\n\
    \        ErrorBlk?,\n        ( AuthReqBlk |\n          AuthRespBlk |\n       \
    \   AuthStatusBlk |\n          CancelBlk |\n          DeliveryReqBlk |\n     \
    \     DeliveryRespBlk |\n          InquiryReqBlk |\n          InquiryRespBlk |\n\
    \          OfferRespBlk |\n          PayExchBlk |\n          PayReqBlk |\n   \
    \       PayRespBlk |\n          PingReqBlk |\n          PingRespBlk |\n      \
    \    TpoBlk |\n          TpoSelectionBlk\n        )*\n      ) >\n   <!ATTLIST\
    \ IotpMessage\n     xmlns              CDATA\n      'iotp:ietf.org/iotp-v1.0'\
    \ >\n   <!--\n   ******************************************************\n   *\
    \ TRANSACTION REFERENCE BLOCK DEFINITION             *\n   ******************************************************\n\
    \    -->\n   <!ELEMENT TransRefBlk (TransId, MsgId, RelatedTo*) >\n   <!ATTLIST\
    \ TransRefBlk\n    ID                 ID      #REQUIRED >\n   <!ELEMENT TransId\
    \ EMPTY >\n   <!ATTLIST TransId\n    ID                 ID      #REQUIRED\n  \
    \  Version            NMTOKEN #FIXED '1.0'\n    IotpTransId        CDATA   #REQUIRED\n\
    \    IotpTransType      CDATA   #REQUIRED\n    TransTimeStamp     CDATA   #REQUIRED\
    \ >\n   <!ELEMENT MsgId EMPTY >\n   <!ATTLIST MsgId\n    ID                 ID\
    \      #REQUIRED\n    RespIotpMsg        NMTOKEN #IMPLIED\n    xml:lang      \
    \     NMTOKEN #REQUIRED\n    LangPrefList       NMTOKENS #IMPLIED\n    CharSetPrefList\
    \    NMTOKENS #IMPLIED\n    SenderTradingRoleRef NMTOKEN #IMPLIED\n    SoftwareId\
    \         CDATA   #REQUIRED\n    TimeStamp          CDATA   #IMPLIED >\n   <!ELEMENT\
    \ RelatedTo (PackagedContent) >\n   <!ATTLIST RelatedTo\n    ID              \
    \   ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n    RelationshipType\
    \   NMTOKEN #REQUIRED\n    Relation           CDATA   #REQUIRED\n    RelnKeyWords\
    \       NMTOKENS #IMPLIED >\n   <!--\n   ******************************************************\n\
    \   * Packaged Content Common Element                    *\n   ******************************************************\n\
    \    -->\n   <!ELEMENT PackagedContent (#PCDATA) >\n   <!ATTLIST PackagedContent\n\
    \    Name             CDATA     #IMPLIED\n    Content          NMTOKEN   \"PCDATA\"\
    \n    Transform (NONE|BASE64)    \"NONE\" >\n   <!--\n   ******************************************************\n\
    \   * TRADING COMPONENTS                                 *\n   ******************************************************\n\
    \    -->\n   <!-- PROTOCOL OPTIONS COMPONENT -->\n   <!ELEMENT ProtocolOptions\
    \ EMPTY >\n   <!ATTLIST ProtocolOptions\n    ID                 ID      #REQUIRED\n\
    \    xml:lang           NMTOKEN #REQUIRED\n    ShortDesc          CDATA   #REQUIRED\n\
    \    SenderNetLocn      CDATA   #IMPLIED\n    SecureSenderNetLocn CDATA  #IMPLIED\n\
    \    SuccessNetLocn     CDATA   #REQUIRED >\n   <!-- AUTHENTICATION DATA COMPONENT\
    \ -->\n   <!ELEMENT AuthReq (Algorithm, PackagedContent*)>\n   <!ATTLIST AuthReq\n\
    \    ID                 ID      #REQUIRED\n    AuthenticationId   CDATA   #REQUIRED\n\
    \    ContentSoftwareId  CDATA   #IMPLIED >\n   <!-- AUTHENTICATION RESPONSE COMPONENT\
    \ -->\n   <!ELEMENT AuthResp (PackagedContent*) >\n   <!ATTLIST AuthResp\n   \
    \ ID                 ID      #REQUIRED\n    AuthenticationId   CDATA   #REQUIRED\n\
    \    SelectedAlgorithmRef NMTOKEN #REQUIRED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!-- TRADING ROLE INFO REQUEST COMPONENT -->\n   <!ELEMENT TradingRoleInfoReq\
    \ EMPTY>\n   <!ATTLIST TradingRoleInfoReq\n    ID                 ID      #REQUIRED\n\
    \    TradingRoleList    NMTOKENS #REQUIRED >\n   <!-- ORDER COMPONENT -->\n  \
    \ <!ELEMENT Order (PackagedContent*) >\n   <!ATTLIST Order\n    ID           \
    \      ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n    OrderIdentifier\
    \    CDATA   #REQUIRED\n    ShortDesc          CDATA   #REQUIRED\n    OkFrom \
    \            CDATA   #REQUIRED\n    OkTo               CDATA   #REQUIRED\n   \
    \ ApplicableLaw      CDATA   #REQUIRED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!-- ORGANISATION COMPONENT -->\n   <!ELEMENT Org (TradingRole+, ContactInfo?,\n\
    \        PersonName?, PostalAddress?)>\n   <!ATTLIST Org\n    ID             \
    \    ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n    OrgId  \
    \            CDATA   #REQUIRED\n    LegalName          CDATA   #IMPLIED\n    ShortDesc\
    \          CDATA   #IMPLIED\n    LogoNetLocn        CDATA   #IMPLIED >\n   <!ELEMENT\
    \ TradingRole EMPTY >\n   <!ATTLIST TradingRole\n    ID      ID#REQUIRED\n   \
    \ TradingRole        NMTOKEN #REQUIRED\n    IotpMsgIdPrefix    NMTOKEN #REQUIRED\n\
    \    CancelNetLocn      CDATA   #IMPLIED\n    ErrorNetLocn       CDATA   #IMPLIED\n\
    \    ErrorLogNetLocn  CDATA           #IMPLIED >\n   <!ELEMENT ContactInfo EMPTY\
    \ >\n   <!ATTLIST ContactInfo\n    xml:lang           NMTOKEN #IMPLIED\n    Tel\
    \                CDATA   #IMPLIED\n    Fax                CDATA   #IMPLIED\n \
    \   Email              CDATA   #IMPLIED\n    NetLocn            CDATA   #IMPLIED\
    \ >\n   <!ELEMENT PersonName EMPTY >\n   <!ATTLIST PersonName\n    xml:lang  \
    \         NMTOKEN #IMPLIED\n    Title              CDATA   #IMPLIED\n    GivenName\
    \          CDATA   #IMPLIED\n    Initials           CDATA   #IMPLIED\n    FamilyName\
    \         CDATA   #IMPLIED >\n   <!ELEMENT PostalAddress EMPTY >\n   <!ATTLIST\
    \ PostalAddress\n    xml:lang           NMTOKEN #IMPLIED\n    AddressLine1   \
    \    CDATA   #IMPLIED\n    AddressLine2       CDATA   #IMPLIED\n    CityOrTown\
    \         CDATA   #IMPLIED\n    StateOrRegion      CDATA   #IMPLIED\n    PostalCode\
    \         CDATA   #IMPLIED\n    Country            CDATA   #IMPLIED\n    LegalLocation\
    \ (True | False) 'False' >\n   <!-- BRAND LIST COMPONENT -->\n   <!ELEMENT BrandList\
    \ (Brand+, ProtocolAmount+,\n    CurrencyAmount+, PayProtocol+) >\n   <!ATTLIST\
    \ BrandList\n    ID                 ID      #REQUIRED\n    xml:lang          \
    \ NMTOKEN #REQUIRED\n    ShortDesc          CDATA   #REQUIRED\n    PayDirection\
    \ (Debit | Credit) #REQUIRED >\n   <!ELEMENT Brand (ProtocolBrand*, PackagedContent*)\
    \ >\n   <!ATTLIST Brand\n    ID                 ID      #REQUIRED\n    xml:lang\
    \           NMTOKEN #IMPLIED\n    BrandId            CDATA   #REQUIRED\n    BrandName\
    \          CDATA   #REQUIRED\n    BrandLogoNetLocn   CDATA   #REQUIRED\n    BrandNarrative\
    \     CDATA   #IMPLIED\n    ProtocolAmountRefs IDREFS  #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   <!ELEMENT ProtocolBrand (PackagedContent*) >\n   <!ATTLIST\
    \ ProtocolBrand\n    ProtocolId         CDATA   #REQUIRED\n    ProtocolBrandId\
    \    CDATA   #REQUIRED >\n   <!ELEMENT ProtocolAmount (PackagedContent*) >\n \
    \  <!ATTLIST ProtocolAmount\n    ID                 ID      #REQUIRED\n    PayProtocolRef\
    \     IDREF   #REQUIRED\n    CurrencyAmountRefs IDREFS  #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   <!ELEMENT CurrencyAmount EMPTY >\n   <!ATTLIST CurrencyAmount\n\
    \    ID                 ID      #REQUIRED\n    Amount             CDATA   #REQUIRED\n\
    \    CurrCodeType       NMTOKEN 'ISO4217-A'\n    CurrCode           CDATA   #REQUIRED\
    \ >\n   <!ELEMENT PayProtocol (PackagedContent*) >\n   <!ATTLIST PayProtocol\n\
    \    ID                 ID      #REQUIRED\n    xml:lang           NMTOKEN #IMPLIED\n\
    \    ProtocolId         NMTOKEN #REQUIRED\n    ProtocolName       CDATA   #REQUIRED\n\
    \    ActionOrgRef       NMTOKEN #REQUIRED\n    PayReqNetLocn      CDATA   #IMPLIED\n\
    \    SecPayReqNetLocn   CDATA   #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!-- BRAND SELECTION COMPONENT -->\n   <!ELEMENT BrandSelection (BrandSelBrandInfo?,\n\
    \        BrandSelProtocolAmountInfo?,\n        BrandSelCurrencyAmountInfo?) >\n\
    \   <!ATTLIST BrandSelection\n    ID                 ID      #REQUIRED\n    BrandListRef\
    \       NMTOKEN #REQUIRED\n    BrandRef           NMTOKEN #REQUIRED\n    ProtocolAmountRef\
    \  NMTOKEN #REQUIRED\n    CurrencyAmountRef  NMTOKEN #REQUIRED >\n   <!ELEMENT\
    \ BrandSelBrandInfo (PackagedContent+) >\n   <!ATTLIST BrandSelBrandInfo\n   \
    \ ID                 ID      #REQUIRED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!ELEMENT BrandSelProtocolAmountInfo (PackagedContent+) >\n   <!ATTLIST\
    \ BrandSelProtocolAmountInfo\n    ID                 ID      #REQUIRED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   <!ELEMENT BrandSelCurrencyAmountInfo (PackagedContent+)\
    \ >\n   <!ATTLIST BrandSelCurrencyAmountInfo\n    ID                 ID      #REQUIRED\n\
    \    ContentSoftwareId  CDATA   #IMPLIED >\n   <!-- PAYMENT COMPONENT -->\n  \
    \ <!ELEMENT Payment EMPTY >\n   <!ATTLIST Payment\n    ID                 ID \
    \     #REQUIRED\n    OkFrom             CDATA   #REQUIRED\n    OkTo          \
    \     CDATA   #REQUIRED\n    BrandListRef       NMTOKEN #REQUIRED\n    SignedPayReceipt\
    \ (True | False) #REQUIRED\n    StartAfterRefs     NMTOKENS #IMPLIED >\n   <!--\
    \ PAYMENT SCHEME COMPONENT -->\n   <!ELEMENT PaySchemeData (PackagedContent+)\
    \ >\n   <!ATTLIST PaySchemeData\n    ID                 ID      #REQUIRED\n  \
    \  PaymentRef         NMTOKEN #IMPLIED\n    ConsumerPaymentId  CDATA   #IMPLIED\n\
    \    PaymentHandlerPayId CDATA  #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!-- PAYMENT RECEIPT COMPONENT -->\n   <!ELEMENT PayReceipt (PackagedContent*)\
    \ >\n   <!ATTLIST PayReceipt\n    ID                 ID      #REQUIRED\n    PaymentRef\
    \         NMTOKEN #REQUIRED\n    PayReceiptNameRefs NMTOKENS #IMPLIED\n    ContentSoftwareId\
    \  CDATA   #IMPLIED >\n   <!-- PAYMENT NOTE COMPONENT -->\n   <!ELEMENT PaymentNote\
    \ (PackagedContent+) >\n   <!ATTLIST PaymentNote\n     ID                ID  \
    \    #REQUIRED\n     ContentSoftwareId CDATA   #IMPLIED >\n   <!-- DELIVERY COMPONENT\
    \ -->\n   <!ELEMENT Delivery (DeliveryData?, PackagedContent*) >\n   <!ATTLIST\
    \ Delivery\n    ID                 ID      #REQUIRED\n    xml:lang           NMTOKEN\
    \ #REQUIRED\n    DelivExch          (True | False) #REQUIRED\n    DelivAndPayResp\
    \    (True | False) #REQUIRED\n    ActionOrgRef       NMTOKEN #IMPLIED >\n   <!ELEMENT\
    \ DeliveryData (PackagedContent*) >\n   <!ATTLIST DeliveryData\n    xml:lang \
    \          NMTOKEN #IMPLIED\n    OkFrom             CDATA   #REQUIRED\n    OkTo\
    \               CDATA   #REQUIRED\n    DelivMethod        NMTOKEN #REQUIRED\n\
    \    DelivToRef         NMTOKEN #REQUIRED\n    DelivReqNetLocn    CDATA   #IMPLIED\n\
    \    SecDelivReqNetLocn CDATA   #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!-- CONSUMER DELIVERY DATA COMPONENT -->\n   <!ELEMENT ConsumerDeliveryData\
    \ EMPTY >\n   <!ATTLIST ConsumerDeliveryData\n    ID                 ID      #REQUIRED\n\
    \    ConsumerDeliveryId CDATA   #REQUIRED >\n   <!-- DELIVERY NOTE COMPONENT -->\n\
    \   <!ELEMENT DeliveryNote (PackagedContent+) >\n   <!ATTLIST DeliveryNote\n \
    \   ID                 ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    DelivHandlerDelivId CDATA  #IMPLIED\n    ContentSoftwareId  CDATA   #IMPLIED\
    \ >\n   <!-- STATUS COMPONENT -->\n   <!ELEMENT Status EMPTY >\n   <!ATTLIST Status\n\
    \    ID                 ID      #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    StatusType         NMTOKEN #REQUIRED\n    ElRef              NMTOKEN #IMPLIED\n\
    \    ProcessState (NotYetStarted | InProgress |\n        CompletedOk | Failed\
    \ | ProcessError) #REQUIRED\n    CompletionCode     NMTOKEN #IMPLIED\n    ProcessReference\
    \   CDATA   #IMPLIED\n    StatusDesc         CDATA   #IMPLIED >\n   <!-- TRADING\
    \ ROLE DATA COMPONENT -->\n   <!ELEMENT TradingRoleData (PackagedContent+) >\n\
    \   <!ATTLIST TradingRoleData\n     ID                ID      #REQUIRED\n    \
    \ OriginatorElRef   NMTOKEN #REQUIRED\n     DestinationElRefs NMTOKENS #REQUIRED\
    \ >\n   <!-- INQUIRY TYPE COMPONENT -->\n   <!ELEMENT InquiryType EMPTY >\n  \
    \ <!ATTLIST InquiryType\n    ID                 ID      #REQUIRED\n    Type  \
    \             NMTOKEN #REQUIRED\n    ElRef              NMTOKEN #IMPLIED\n   \
    \ ProcessReference   CDATA   #IMPLIED >\n   <!-- ERROR COMPONENT -->\n   <!ELEMENT\
    \ ErrorComp (ErrorLocation+, PackagedContent*) >\n   <!ATTLIST ErrorComp\n   \
    \ ID                 NMTOKEN #REQUIRED\n    xml:lang           NMTOKEN #REQUIRED\n\
    \    ErrorCode          NMTOKEN #REQUIRED\n    ErrorDesc          CDATA   #REQUIRED\n\
    \    Severity (Warning|TransientError|HardError) #REQUIRED\n    MinRetrySecs \
    \      CDATA   #IMPLIED\n    SwVendorErrorRef   CDATA   #IMPLIED >\n   <!ELEMENT\
    \ ErrorLocation EMPTY >\n   <!ATTLIST ErrorLocation\n    ElementType        NMTOKEN\
    \ #REQUIRED\n    IotpMsgRef         NMTOKEN #IMPLIED\n    BlkRef             NMTOKEN\
    \ #IMPLIED\n    CompRef            NMTOKEN #IMPLIED\n    ElementRef         NMTOKEN\
    \ #IMPLIED\n    AttName            NMTOKEN #IMPLIED >\n   <!--\n   ******************************************************\n\
    \   * TRADING BLOCKS                                     *\n   ******************************************************\n\
    \    -->\n   <!-- TRADING PROTOCOL OPTIONS BLOCK -->\n   <!ELEMENT TpoBlk ( ProtocolOptions,\
    \ BrandList*, Org* ) >\n   <!ATTLIST TpoBlk\n    ID                 ID      #REQUIRED\
    \ >\n   <!-- TPO SELECTION BLOCK -->\n   <!ELEMENT TpoSelectionBlk (BrandSelection+)\
    \ >\n   <!ATTLIST TpoSelectionBlk\n    ID                 ID      #REQUIRED >\n\
    \   <!-- OFFER RESPONSE BLOCK -->\n   <!ELEMENT OfferRespBlk (Status, Order?,\
    \ Payment*,\n                Delivery?, TradingRoleData*) >\n   <!ATTLIST OfferRespBlk\n\
    \    ID                 ID      #REQUIRED >\n   <!-- AUTHENTICATION REQUEST BLOCK\
    \ -->\n   <!ELEMENT AuthReqBlk (AuthReq*, TradingRoleInfoReq?) >\n   <!ATTLIST\
    \ AuthReqBlk\n    ID                 ID      #REQUIRED >\n   <!-- AUTHENTICATION\
    \ RESPONSE BLOCK -->\n   <!ELEMENT AuthRespBlk (AuthResp?, Org*) >\n   <!ATTLIST\
    \ AuthRespBlk\n    ID                 ID      #REQUIRED >\n   <!-- AUTHENTICATION\
    \ STATUS BLOCK -->\n   <!ELEMENT AuthStatusBlk (Status) >\n   <!ATTLIST AuthStatusBlk\n\
    \    ID                 ID      #REQUIRED >\n   <!-- PAYMENT REQUEST BLOCK -->\n\
    \   <!ELEMENT PayReqBlk (Status+, BrandList, BrandSelection,\n        Payment,\
    \ PaySchemeData?, Org*, TradingRoleData*) >\n   <!ATTLIST PayReqBlk\n    ID  \
    \               ID      #REQUIRED >\n   <!-- PAYMENT EXCHANGE BLOCK -->\n   <!ELEMENT\
    \ PayExchBlk (PaySchemeData) >\n   <!ATTLIST PayExchBlk\n    ID              \
    \   ID      #REQUIRED >\n   <!-- PAYMENT RESPONSE BLOCK -->\n   <!ELEMENT PayRespBlk\
    \ (Status, PayReceipt?, PaySchemeData?,\n        PaymentNote?, TradingRoleData*)\
    \ >\n   <!ATTLIST PayRespBlk\n    ID                 ID      #REQUIRED >\n   <!--\
    \ DELIVERY REQUEST BLOCK -->\n   <!ELEMENT DeliveryReqBlk (Status+, Order, Org*,\
    \ Delivery,\n        ConsumerDeliveryData?, TradingRoleData*) >\n   <!ATTLIST\
    \ DeliveryReqBlk\n    ID                 ID      #REQUIRED >\n   <!-- DELIVERY\
    \ RESPONSE BLOCK -->\n   <!ELEMENT DeliveryRespBlk (Status, DeliveryNote) >\n\
    \   <!ATTLIST DeliveryRespBlk\n    ID                 ID      #REQUIRED >\n  \
    \ <!-- INQUIRY REQUEST BLOCK -->\n   <!ELEMENT InquiryReqBlk ( InquiryType, PaySchemeData?\
    \ ) >\n   <!ATTLIST InquiryReqBlk\n    ID                 ID      #REQUIRED >\n\
    \   <!-- INQUIRY RESPONSE BLOCK -->\n   <!ELEMENT InquiryRespBlk (Status, PaySchemeData?)\
    \ >\n   <!ATTLIST InquiryRespBlk\n    ID                 ID      #REQUIRED\n \
    \   LastReceivedIotpMsgRef NMTOKEN #IMPLIED\n    LastSentIotpMsgRef NMTOKEN #IMPLIED\
    \ >\n   <!-- PING REQUEST BLOCK -->\n   <!ELEMENT PingReqBlk (Org*)>\n   <!ATTLIST\
    \ PingReqBlk\n    ID                 ID      #REQUIRED>\n   <!-- PING RESPONSE\
    \ BLOCK -->\n   <!ELEMENT PingRespBlk (Org+)>\n   <!ATTLIST PingRespBlk\n    ID\
    \                 ID      #REQUIRED\n    PingStatusCode (Ok | Busy | Down) #REQUIRED\n\
    \    SigVerifyStatusCode (Ok | NotSupported | Fail) #IMPLIED\n    xml:lang   \
    \        NMTOKEN #IMPLIED\n    PingStatusDesc     CDATA   #IMPLIED>\n   <!-- ERROR\
    \ BLOCK -->\n   <!ELEMENT ErrorBlk (ErrorComp+, PaySchemeData*) >\n   <!ATTLIST\
    \ ErrorBlk\n    ID                 ID      #REQUIRED >\n   <!-- CANCEL BLOCK -->\n\
    \   <!ELEMENT CancelBlk (Status) >\n   <!ATTLIST CancelBlk\n    ID           \
    \      ID      #REQUIRED >\n   <!--\n   ******************************************************\n\
    \   * IOTP SIGNATURES BLOCK DEFINITION                   *\n   ******************************************************\n\
    \   -->\n   <!ELEMENT IotpSignatures (Signature+ ,Certificate*) >\n   <!ATTLIST\
    \ IotpSignatures\n       ID        ID        #IMPLIED\n   >\n   <!--\n   ******************************************************\n\
    \   * IOTP SIGNATURE COMPONENT DEFINITION                *\n   ******************************************************\n\
    \   -->\n   <!ELEMENT Signature (Manifest, Value+) >\n   <!ATTLIST Signature\n\
    \       ID         ID        #IMPLIED\n   >\n   <!ELEMENT Manifest\n       ( \
    \      Algorithm+,\n               Digest+,\n               Attribute*,\n    \
    \           OriginatorInfo,\n               RecipientInfo+\n       )\n   >\n \
    \  <!ATTLIST Manifest\n       LocatorHRefBase       CDATA             #IMPLIED\n\
    \   >\n   <!ELEMENT Algorithm (Parameter*) >\n   <!ATTLIST Algorithm\n       ID\
    \                     ID                #REQUIRED\n       type            (digest|signature)\
    \      #IMPLIED\n       name                  NMTOKEN           #REQUIRED\n  \
    \ >\n   <!ELEMENT Digest (Locator, Value) >\n   <!ATTLIST Digest\n       DigestAlgorithmRef\
    \    IDREF             #REQUIRED\n   >\n   <!ELEMENT Attribute ( ANY ) >\n   <!ATTLIST\
    \ Attribute\n       type                   NMTOKEN           #REQUIRED\n     \
    \  critical            ( true | false )     #REQUIRED\n   >\n   <!ELEMENT OriginatorInfo\
    \ ANY >\n   <!ATTLIST OriginatorInfo\n       OriginatorRef           NMTOKEN \
    \         #IMPLIED\n   >\n   <!ELEMENT RecipientInfo ANY >\n   <!ATTLIST RecipientInfo\n\
    \       SignatureAlgorithmRef   IDREF            #REQUIRED\n       SignatureValueRef\
    \       IDREF            #IMPLIED\n       SignatureCertRef        IDREF      \
    \      #IMPLIED\n       RecipientRefs           NMTOKENS         #IMPLIED\n  \
    \ >\n   <!ELEMENT KeyIdentifier EMPTY>\n   <!ATTLIST KeyIdentifier\n       value\
    \                    CDATA           #REQUIRED\n   >\n   <!ELEMENT Parameter ANY\
    \ >\n   <!ATTLIST Parameter\n       type                     CDATA           #REQUIRED\n\
    \   >\n   <!--\n   ******************************************************\n  \
    \ * IOTP CERTIFICATE COMPONENT DEFINITION              *\n   ******************************************************\n\
    \   -->\n   <!ELEMENT Certificate\n    (  IssuerAndSerialNumber,  ( Value | Locator\
    \ ) )\n   >\n   <!ATTLIST Certificate\n       ID                        ID   \
    \             #IMPLIED\n       type                      NMTOKEN           #REQUIRED\n\
    \   >\n   <!ELEMENT IssuerAndSerialNumber EMPTY >\n   <!ATTLIST IssuerAndSerialNumber\n\
    \       issuer                     CDATA            #REQUIRED\n       number \
    \                    CDATA            #REQUIRED\n   >\n   <!--\n   ******************************************************\n\
    \   * IOTP SHARED COMPONENT DEFINITION                   *\n   ******************************************************\n\
    \   -->\n   <!ELEMENT Value ( #PCDATA ) >\n   <!ATTLIST Value\n       ID     \
    \          ID           #IMPLIED\n       encoding    (base64|none)    'base64'\n\
    \   >\n   <!ELEMENT Locator EMPTY>\n   <!ATTLIST Locator\n       xml:link    \
    \    CDATA         #FIXED        'simple'\n       href            CDATA      \
    \   #REQUIRED\n   >\n"
- title: 14. Glossary
  contents:
  - "14. Glossary\n   This section contains a glossary of some of the terms used within\n\
    \   this specification in alphabetical order.\n          NAME                \
    \            DESCRIPTION\n   Authenticator      The Organisation which is requesting\
    \ the\n                      authentication of another Organisation, and\n   Authenticatee\
    \      The Organisation being authenticated by an\n                      Authenticator\n\
    \   Business Error     See Status Component.\n   Brand              A Brand is\
    \ the mark which identifies a particular\n                      type of Payment\
    \ Instrument. A list of Brands are\n                      the payment options\
    \ which are presented by the\n                      Merchant to the Consumer and\
    \ from which the\n                      Consumer makes a selection. Each Brand\
    \ may have a\n                      different Payment Handler. Examples of Brands\n\
    \                      include:\n                       o payment association\
    \ and proprietary Brands,\n                         for example MasterCard, Visa,\
    \ American Express,\n                         Diners Club, American Express, Mondex,\n\
    \                         GeldKarte, CyberCash, etc.\n                       o\
    \ Promotional Brands (see below). These include:\n                       o store\
    \ Brands, where the Payment Instrument is\n                         issued to\
    \ a Consumer by a particular Merchant,\n                         for example Walmart,\
    \ Sears, or Marks and\n                         Spencer (UK)\n               \
    \        o coBrands, for example American Advantage Visa,\n                  \
    \       where an a company uses their own Brand in\n                         conjunction\
    \ with, typically, a payment\n                         association Brand.\n  \
    \ Consumer           The Organisation which is to receive the benefit\n      \
    \                of and typically pay for the goods or services.\n   ContentSoftwareId\
    \  This contains information which identifies the\n                      software\
    \ which generated the content of the\n                      element. Its purpose\
    \ is to help resolve\n                      interoperability problems that might\
    \ occur as a\n                      result of incompatibilities between messages\n\
    \                      produced by different software. It is a single\n      \
    \                text string in the language defined by xml:lang.\n          \
    \            It must contain, as a minimum:\n                       o the name\
    \ of the software manufacturer\n                       o the name of the software\n\
    \                       o the version of the software, and\n                 \
    \      o the build of the software\n                      It is recommended that\
    \ this attribute is included\n                      whenever the software which\
    \ generated the content\n                      cannot be identified from the SoftwareId\
    \ attribute\n                      on the Message Id Component (see section 3.3.2)\n\
    \   Customer Care      An Organisation that is providing customer care\n   Provider\
    \           typically on behalf of a Merchant. Examples of\n                 \
    \     customer care include, responding to problems\n                      raised\
    \ by a Consumer arising from an IOTP\n                      Transaction that the\
    \ Consumer took part in.\n   Delivery Handler   The Organisation that directly\
    \ delivers the goods\n                      or services to the Consumer on behalf\
    \ of the\n                      Merchant. Delivery can be in the form of either\n\
    \                      digital goods (e.g., a [MIME] message), or\n          \
    \            physically delivered using the post or a courier.\n   Document Exchange\
    \  A Document Exchange consists of a set of IOTP\n                      Messages\
    \ exchanged between two parties that\n                      implement part or\
    \ all of two Trading Exchanges\n                      simultaneously in order\
    \ to minimise the number of\n                      actual IOTP Messages which\
    \ must be sent over the\n                      Internet.\n                   \
    \   Document Exchanges are combined together in\n                      sequence\
    \ to implement a particular IOTP\n                      Transaction.\n   Dual\
    \ Brand         A Dual Brand means that a single Payment\n                   \
    \   Instrument may be used as if it were two separate\n                      Brands.\
    \ For example there could be a single\n                      Japanese \"UC\" MasterCard\
    \ which can be used as\n                      either a UC card or a regular MasterCard.\
    \ The UC\n                      card Brand and the MasterCard Brand could each\n\
    \                      have their own separate Payment Handlers. This\n      \
    \                means that:\n                       o the Merchant treats, for\
    \ example \"UC\" and\n                         \"MasterCard\" as two separate\
    \ Brands when\n                         offering a list of Brands to the Consumer,\n\
    \                       o the Consumer chooses a Brand, for example\n        \
    \                 either \"UC\" or \"MasterCard,\n                       o the\
    \ Consumer IOTP aware application determines\n                         which Payment\
    \ Instrument(s) match the chosen\n                         Brand, and selects,\
    \ perhaps with user\n                         assistance, the correct Payment\
    \ Instrument to\n                         use.\n   Error Block        An Error\
    \ Block reports that a Technical Error was\n                      found in an\
    \ IOTP Message that was previously\n                      received. Typically\
    \ Technical Errors are caused by\n                      errors in the XML which\
    \ has been received or some\n                      technical failure of the processing\
    \ of the IOTP\n                      Message. Frequently the generation or receipt\
    \ of\n                      an Error Block will result in failure of the IOTP\n\
    \                      Transaction. They are distinct from Business\n        \
    \              Errors, reported in a Status Component, which can\n           \
    \           also cause failure of an IOTP Transaction.\n   Exchange Block    \
    \ An Exchange Block is sent between the two Trading\n                      Roles\
    \ involved in a Trading Exchange. It contains\n                      one or more\
    \ Trading Components. Exchange Blocks\n                      are always sent after\
    \ a Request Block and before a\n                      Response Block in a Trading\
    \ Exchange. The content\n                      of an Exchange Block is dependent\
    \ on the type of\n                      Trading Exchange being carried out.\n\
    \   IOTP Message       An IOTP Message is the outermost wrapper for the\n    \
    \                  document(s) which are sent between Trading Roles\n        \
    \              that are taking part in a trade. It is a well\n               \
    \       formed XML document. The documents it contains\n                     \
    \ consist of:\n                       o a Transaction Reference Block to uniquely\n\
    \                         identify the IOTP Transaction of which the IOTP\n  \
    \                       Message is part,\n                       o an optional\
    \ Signature Block to digitally sign\n                         the Trading Blocks\
    \ or Trading Components\n                         associated with the IOTP Transaction\n\
    \                       o an optional Error Block to report on technical\n   \
    \                      errors contained in a previously received IOTP\n      \
    \                   Message, and\n                       o a collection of IOTP\
    \ Trading Blocks which\n                         carries the data required to\
    \ carry out an IOTP\n                         Transaction.\n   IOTP Transaction\
    \   An instance of an Internet Open Trading Protocol\n                      Transaction\
    \ consists of a set of IOTP Messages\n                      transferred between\
    \ Trading Roles. The rules for\n                      what may be contained in\
    \ the IOTP Messages is\n                      defined by the Transaction Type\
    \ of the IOTP\n                      Transaction.\n   IOTP Transaction   A Transaction\
    \ Type identifies the type an of IOTP\n   Type               Transaction. Examples\
    \ of Transaction Type include:\n                      Purchase, Refund, Authentication,\
    \ Withdrawal,\n                      Deposit (of electronic cash). The Transaction\
    \ Type\n                      specifies for an IOTP Transaction:\n           \
    \            o the Trading Exchanges which may be included in\n              \
    \           the transaction,\n                       o how those Trading Exchanges\
    \ may be combined to\n                         meet the business needs of the\
    \ transaction\n                       o which Trading Blocks may be included in\
    \ the\n                         IOTP Messages that make up the transaction\n \
    \                      o Consult this specification for the rules that\n     \
    \                    apply for each Transaction Type.\n   Merchant           The\
    \ Organisation from whom the service or goods\n                      are being\
    \ obtained, who is legally responsible for\n                      providing the\
    \ goods or services and receives the\n                      benefit of any payment\
    \ made\n   Merchant Customer  The Organisation that is involved with customer\n\
    \   Care Provider      dispute negotiation and resolution on behalf of\n     \
    \                 the Merchant\n   Organisation       A company or individual\
    \ that takes part in a Trade\n                      as a Trading Role. The Organisations\
    \ may take one\n                      or more of the roles involved in the Trade\n\
    \   Payment Handler    The Organisation that physically receives the\n       \
    \               payment from the Consumer on behalf of the\n                 \
    \     Merchant\n   Payment            A Payment Instrument is the means by which\n\
    \   Instrument         Consumer pays for goods or services offered by a\n    \
    \                  Merchant. It can be, for example:\n                       o\
    \ a credit card such as MasterCard or Visa;\n                       o a debit\
    \ card such as MasterCard's Maestro;\n                       o a smart card based\
    \ electronic cash Payment\n                         Instrument such as a Mondex\
    \ Card, a GeldKarte\n                         card or a Visa Cash card\n     \
    \                  o a software based electronic payment account\n           \
    \              such as a CyberCash's CyberCoin or DigiCash\n                 \
    \        account.\n                      All Payment Instruments have a number,\
    \ typically\n                      an account number, by which the Payment Instrument\n\
    \                      can be identified.\n   Promotional Brand  A Promotional\
    \ Brand means that, if the Consumer\n                      pays with that Brand,\
    \ then the Consumer will\n                      receive some additional benefit\
    \ which can be\n                      received in two ways:\n                \
    \       o at the time of purchase. For example if a\n                        \
    \ Consumer pays with a \"Walmart MasterCard\" at a\n                         Walmart\
    \ web site, then a 5% discount might\n                         apply, which means\
    \ the Consumer actually pays\n                         less,\n               \
    \        o from their Payment Instrument (card) issuer\n                     \
    \    when the payment appears on their statement.\n                         For\
    \ example loyalty points in a frequent flyer\n                         scheme\
    \ could be awarded based on the total\n                         payments made\
    \ with the Payment Instrument since\n                         the last statement\
    \ was issued.\n                      Each Promotional Brand should be identified\
    \ as a\n                      separate Brand in the list of Brands offered by\n\
    \                      the Merchant.\n   Receipt Component  A Receipt Component\
    \ is a record of the successful\n                      completion of a Trading\
    \ Exchange. Examples of\n                      Receipt Components include: Payment\
    \ Receipts, and\n                      Delivery Notes. It's content may dependent\
    \ on the\n                      technology used to perform the Trading Exchange.\n\
    \                      For example a Secure Electronic Transaction (SET)\n   \
    \                   payment receipt consists of SET payment messages\n       \
    \               which record the result of the payment.\n   Request Block    \
    \  A Request Block is Trading Block that contains a\n                      request\
    \ for a Trading Exchange to start. The\n                      Trading Components\
    \ in a Request Block may be\n                      signed by a Signature Block\
    \ so that their\n                      authenticity may be checked and to determine\
    \ that\n                      the Trading Exchange being requested is\n      \
    \                authorised. Authorisation for a Trading Exchange\n          \
    \            to start can be provided by the signatures\n                    \
    \  contained on Receipt Components contained in\n                      Response\
    \ Blocks resulting from previously\n                      completed Trading Exchanges.\
    \  Examples of Request\n                      Blocks are Payment Request and Delivery\
    \ Request\n   Response Block     A Response Block is a Trading Block that indicates\n\
    \                      that a Trading Exchange is complete. It is sent by\n  \
    \                    the Trading Role that received a Request Block to\n     \
    \                 the Trading Role that sent the Request Block. The\n        \
    \              Response Block contains a Status Component that\n             \
    \         contains information about the completion of the\n                 \
    \     Trading Exchange, for example it indicates whether\n                   \
    \   or not the Trading Exchange completed\n                      successfully.\
    \ For some Trading Exchanges the\n                      Response Block contains\
    \ a Receipt Component that\n                      forms a record of the Trading\
    \ Exchange. Receipt\n                      Components may be digitally signed\
    \ using a\n                      Signature Block to make completion non-refutable.\n\
    \                      Examples of Response Blocks include Offer\n           \
    \           Response, Payment Response and Delivery Response.\n   Signature Block\
    \    A Signature Block is a Trading Block that contains\n                    \
    \  one or more digital signatures in the form of\n                      Signature\
    \ Components. A Signature Component may\n                      digitally sign\
    \ any Block or Component in any IOTP\n                      Message in the same\
    \ IOTP Transaction.\n   Status Component   A Status Component contains information\
    \ that\n                      describes the state of a Trading Exchange.\n   \
    \                   Before the Trading Exchange is complete the Status\n     \
    \                 Component can indicate information about how the\n         \
    \             Trading Exchange is progressing.\n                      Once a Trading\
    \ Exchange is complete the Status\n                      Component can only indicate\
    \ the success of the\n                      Trading Exchange or that a Business\
    \ Error has\n                      occurred.\n                      A Business\
    \ Error indicates that continuation with\n                      the Trading Exchange\
    \ was not possible because of\n                      some business rule or logic,\
    \ for example,\n                      \"insufficient funds available\", rather\
    \ than any\n                      Technical Error associated with the content\
    \ or\n                      format of the IOTP Messages in the IOTP\n        \
    \              Transaction.\n   Technical Error    See Error Block.\n   Trading\
    \ Block      A Trading Block consists of one or more Trading\n               \
    \       Components. One or more Trading Blocks may be\n                      contained\
    \ within the IOTP Messages which are\n                      physically sent in\
    \ the form of [XML] documents\n                      between the different Trading\
    \ Roles that are\n                      taking part in a trade. Trading Blocks\
    \ are of\n                      three main types:\n                       o a\
    \ Request Block,\n                       o an Exchange Block, or a\n         \
    \              o a Response Block\n   Trading Component  A Trading Component is\
    \ a collection of XML\n                      elements and attributes. Trading\
    \ Components are\n                      the child elements of the Trading Blocks.\
    \ Examples\n                      of Trading Components are: Offer, Brand List,\n\
    \                      Payment Receipt, Delivery [information], Payment\n    \
    \                  Amount [information]\n   Trading Exchange   A Trading Exchange\
    \ consists of the exchange,\n                      between two Trading Roles,\
    \ of a sequence of\n                      documents. The documents may be in the\
    \ form of\n                      Trading Blocks or they may be transferred by\
    \ some\n                      other means, for example through entering data\n\
    \                      into a web page. Each Trading Exchange consists of\n  \
    \                    three main parts:\n                       o the sending of\
    \ a Request Block by one Trading\n                         Role (the initiator)\
    \ to another Trading Role\n                         (the recipient),\n       \
    \                o the optional exchange of one or more Exchange\n           \
    \              Blocks between the recipient and the initiator,\n             \
    \            until eventually,\n                       o the Trading Role that\
    \ received the Request\n                         Block sends a Response Block\
    \ to the initiator.\n                      A Trading Exchange is designed to implement\
    \ a\n                      useful service of some kind. Examples of Trading\n\
    \                      Exchanges/services are:\n                       o Offer,\
    \ which results in a Consumer receiving\n                         an offer from\
    \ a Merchant to carry out a\n                         business transaction of\
    \ some kind,\n                       o Payment, where a Consumer makes a payment\
    \ to a\n                         Payment Handler,\n                       o Delivery,\
    \ where a Consumer requests, and\n                         optionally obtains,\
    \ delivery of goods or\n                         services from a Delivery Handler,\
    \ and\n                       o Authentication, where any Trading Role may\n \
    \                        request and receive information about another\n     \
    \                    Trading Role.\n   Trading Role       A Trading Role identifies\
    \ the different ways in\n                      which Organisations can participate\
    \ in a trade.\n                      There are five Trading Roles: Consumer, Merchant,\n\
    \                      Payment Handler, Delivery Handler, and Merchant\n     \
    \                 Customer Care Provider.\n   Transaction        A Transaction\
    \ Reference Block identifies an IOTP\n   Reference Block    Transaction. It contains\
    \ data that identifies:\n                       o the Transaction Type,\n    \
    \                   o the IOTP Transaction uniquely, through a\n             \
    \            globally unique transaction identifier\n                       o\
    \ the IOTP Message uniquely within the IOTP\n                         Transaction,\
    \ through a message identifier\n                      The Transaction Reference\
    \ Block may also contain\n                      references to other transactions\
    \ which may or may\n                      not be IOTP Transactions\n"
- title: 15. References
  contents:
  - "15. References\n   This section contains references to related documents identified\
    \ in\n   this specification.\n   [Base64]    Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n               Extensions (MIME) Part One: Format of Internet\
    \ Message\n               Bodies\", RFC 2045, November 1996.\n   [DOM-HASH]  Maruyama,\
    \ H., Tamura, K. and N. Uramoto, \"Digest Values\n               for DOM (DOMHASH)\"\
    , RFC 2803, April 2000.\n   [DNS]       Mockapetris, P., \"Domain names - concepts\
    \ and\n               facilities\", STD 13, RFC 1034, November 1987.\n   [DNS]\
    \       Mockapetris, P., \"Domain names - implementation and\n               specification\"\
    , STD 13, RFC 1035, November 1987.\n   [DSA]       The Digital Signature Algorithm\
    \ (DSA) published by the\n               National Institute of Standards and Technology\
    \ (NIST) in\n               the Digital Signature Standard (DSS), which is a part\
    \ of\n               the US government's Capstone project.\n   [ECCDSA]    Elliptic\
    \ Curve Cryptosystems Digital Signature Algorithm\n               (ECCDSA). Elliptic\
    \ curve cryptosystems are analogues of\n               public-key cryptosystems\
    \ such as RSA in which modular\n               multiplication is replaced by the\
    \ elliptic curve addition\n               operation. See: V. S. Miller. Use of\
    \ elliptic curves in\n               cryptography. In Advances in Cryptology -\
    \ Crypto '85,\n               pages 417-426, Springer-Verlag, 1986.\n   [HMAC]\
    \      Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:  Keyed-\n           \
    \    Hashing for Message Authentication\", RFC 2104, February\n              \
    \ 1997.\n   [HTML]      Berners-Lee, T. and D. Connolly, \"Hypertext Markup\n\
    \               Language - 2.0\", RFC 1866, November 1995.\n   [HTML]      Hyper\
    \ Text Mark Up Language. The Hypertext Mark-up\n               Language (HTML)\
    \ is a simple mark-up language used to\n               create hypertext documents\
    \ that are platform independent.\n               See the World Wide Web (W3C)\
    \ consortium web site at:\n               http://www.w3.org/MarkUp/\n   [HTTP]\
    \      Berners-Lee, T., Fielding, R. and H. Frystyk, \"Hypertext\n           \
    \    Transfer Protocol -- HTTP/1.0\", RFC 1945, May 1996.\n   [HTTP]      Fielding,\
    \ R., Gettys, J., Mogul, J., Frystyk, T. and T.\n               Berners-Lee, \"\
    Hypertext Transfer Protocol -- HTTP/1.1.\",\n               RFC 2616, June 1999.\n\
    \   [IANA]      The Internet Assigned Numbers Authority. The organisation\n  \
    \             responsible for co-ordinating the names and numbers\n          \
    \     associated with the Internet. See http://www.iana.org/\n   [ISO4217]   ISO\
    \ 4217: Codes for the Representation of Currencies.\n               Available\
    \ from ANSI or ISO.\n   [IOTPDSIG]  Davidson, K. and Y. Kawatsura, \"Digital Signatures\
    \ for\n               the v1.0 Internet Open Trading Protocol (IOTP)\", RFC\n\
    \               2802, April 2000.\n   [MD5]       Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n               April 1992.\n   [MIME]      Crocker,\
    \ D., \"Standard for the Format of ARPA Internet\n               Text Messages\"\
    , STD 11, RFC 822, August 1982.\n   [MIME]      Freed, N. and N. Borenstein, \"\
    Multipurpose Internet Mail\n               Extensions (MIME) Part One: Format\
    \ of Internet Message\n               Bodies\", RFC 2045, November 1996.\n   [MIME]\
    \      Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n           \
    \    Extensions (MIME) Part Two: Media Types\", RFC 2046,\n               November\
    \ 1996.\n   [MIME]      Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n\
    \               Part Three: Message Header Extensions for Non-ASCII Text\"\n \
    \              RFC 2047, November 1996.\n   [MIME]      Freed, N., Klensin, J.\
    \ and J. Postel, \"Multipurpose\n               Internet Mail Extensions (MIME)\
    \ Part Four: Registration\n               Procedures\", RFC 2048, November 1996.\n\
    \   [MIME]      Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n  \
    \             Extensions (MIME) Part Five: Conformance Criteria and\n        \
    \       Examples\" RFC 2049, November 1996.\n   [OPS]       Open Profiling Standard.\
    \ A proposed standard which\n               provides a framework with built-in\
    \ privacy safeguards for\n               the trusted exchange of profile information\
    \ between\n               individuals and web sites.  Being developed by Netscape\n\
    \               and Microsoft amongst others.\n   [RFC1738]   Berners-Lee, T.,\
    \ Masinter, L. and M. McCahill, \"Uniform\n               Resource Locators (URL)\"\
    , RFC 1738, December 1994.\n   [RFC2434]   Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an\n               IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 2434,\n               October 1998.\n   [RSA]       RSA is a public-key\
    \ cryptosystem for both encryption and\n               authentication supported\
    \ by RSA Data Security Inc. See:\n               R. L. Rivest, A. Shamir, and\
    \ L.M. Adleman. A method for\n               obtaining digital signatures and\
    \ public-key\n               cryptosystems. Communications of the ACM, 21(2):\
    \ 120-126,\n               February 1978.\n   [SCCD]      Secure Channel Credit\
    \ Debit. A method of conducting a\n               credit or debit card payment\
    \ where unauthorised access to\n               account information is prevented\
    \ through use of secure\n               channel transport mechanisms such as SSL/TLS.\
    \ An IOTP\n               supplement describing how SCCD works is under\n    \
    \           development.\n   [SET]       Secure Electronic Transaction Specification,\
    \ Version 1.0,\n               May 31, 1997. Supports credit and debit card payments\n\
    \               using certificates at the Consumer and Merchant to help\n    \
    \           ensure authenticity.  Download from:\n               <http://www.setco.org>.\n\
    \   [SSL/TLS]   Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n \
    \              RFC 2246, January 1999.\n   [SHA1]      [FIPS-180-1]\"Secure Hash\
    \ Standard\", National Institute of\n               Standards and Technology,\
    \ US Department Of Commerce,\n               April 1995. Also known as: 59 Fed\
    \ Reg. 35317 (1994). See\n               http://www.itl.nist.gov/div897/pubs/fip180-1.htm\n\
    \   [UTC]       Universal Time Co-ordinated. A method of defining time\n     \
    \          absolutely relative to Greenwich Mean Time (GMT).\n               Typically\
    \ of the form:  \"CCYY-MM-DDTHH:MM:SS.sssZ+n\"\n               where the \"+n\"\
    \ defines the number of hours from GMT. See\n               ISO DIS8601.\n   [UTF16]\
    \     The Unicode Standard, Version 2.0.  The Unicode\n               Consortium,\
    \ Reading, Massachusetts. See ISO/IEC 10646 1\n               Proposed Draft Amendment\
    \ 1\n   [X.509]     ITU Recommendation X.509 1993 | ISO/IEC 9594-8: 1995,\n  \
    \             Including Draft Amendment 1: Certificate Extensions\n          \
    \     (Version 3 Certificate)\n   [XML        Recommendation for Namespaces in\
    \ XML, World Wide Web\n   Namespace]  Consortium, 14 January 1999, \"http://www.w3.org/TR/REC-\n\
    \               xml-names\"\n   [XML]       Extensible Mark Up Language. A W3C\
    \ recommendation. See\n               http://www.w3.org/TR/1998/REC-xml-19980210\
    \ for the 10\n               February 1998 version.\n"
- title: 16. Author's Address
  contents:
  - "16. Author's Address\n   The author of this document is:\n   David Burdett\n\
    \   Commerce One\n   4440 Rosewood Drive, Bldg 4\n   Pleasanton\n   California\
    \ 94588\n   USA\n   Phone: +1 (925) 520 4422\n   EMail: david.burdett@commerceone.com\n\
    \   The author of this document particularly wants to thank Mondex\n   International\
    \ Limited (www.mondex.com) for the tremendous support\n   provided in the formative\
    \ stages of the development of this\n   specification.\n   In addition the author\
    \ appreciates the following contributors to this\n   protocol (in alphabetic order\
    \ of company) without which it could not\n   have been developed.\n      -  Phillip\
    \ Mullarkey, British Telecom plc\n      -  Andrew Marchewka, Canadian Imperial\
    \ Bank of Commerce\n      -  Brian Boesch, CyberCash Inc.\n      -  Tom Arnold,\
    \ CyberSource\n      -  Terry Allen, Commerce One (formally Veo Systems)\n   \
    \   -  Richard Brown, GlobeSet Inc.\n      -  Peter Chang, Hewlett Packard\n \
    \     -  Masaaki Hiroya, Hitachi Ltd\n      -  Yoshiaki Kawatsura, Hitachi Ltd\n\
    \      -  Mark Linehan, International Business Machines\n      -  Jonathan Sowler,\
    \ JCP Computer Services Ltd\n      -  John Wankmueller, MasterCard International\n\
    \      -  Steve Fabes, Mondex International Ltd\n      -  Donald Eastlake 3rd,\
    \ Motorola Inc (formerly International\n         Business Machines Inc)\n    \
    \  -  Surendra Reddy, Oracle Corporation\n      -  Akihiro Nakano, Plat Home,\
    \ Inc. (ex Hitachi Ltd)\n      -  Chris Smith, Royal Bank of Canada\n      - \
    \ Hans Bernhard-Beykirch, SIZ (IT Development and Coordination\n         Centre\
    \ of the German Savings Banks Organisation)\n      -  W. Reid Carlisle, Spyrus\
    \ (ex Citibank Universal Card Services,\n         formally AT&T Universal Card\
    \ Services)\n      -  Efrem Lipkin, Sun Microsystems\n      -  Tony Lewis, Visa\
    \ International\n   The author would also like to thank the following organisations\
    \ for\n   their support:\n      -  Amino Communications\n      -  DigiCash\n \
    \     -  Fujitsu\n      -  General Information Systems\n      -  Globe Id Software\n\
    \      -  Hyperion\n      -  InterTrader\n      -  Nobil I T Corp\n      -  Mercantec\n\
    \      -  Netscape\n      -  Nippon Telegraph and Telephone Corporation\n    \
    \  -  Oracle Corporation\n      -  Smart Card Integrations Ltd.\n      -  Spyrus\n\
    \      -  Verifone\n      -  Unisource nv\n      -  Wells Fargo Bank\n"
- title: 17. Full Copyright Statement
  contents:
  - "17. Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
