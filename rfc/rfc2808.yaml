- title: __initial_text__
  contents:
  - '                     The SecurID(r) SASL Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   SecurID is a hardware token card product (or software emulation\n\
    \   thereof) produced by RSA Security Inc., which is used for end-user\n   authentication.\
    \ This document defines a SASL [RFC2222] authentication\n   mechanism using these\
    \ tokens, thereby providing a means for such\n   tokens to be used in SASL environments.\
    \ This mechanism is only for\n   authentication, and has no effect on the protocol\
    \ encoding and is not\n   designed to provide integrity or confidentiality services.\n\
    \   This memo assumes the reader has basic familiarity with the SecurID\n   token,\
    \ its associated authentication protocol and SASL.\n"
- title: How to read this document
  contents:
  - "How to read this document\n   The key words \"MUST\", \"MUST NOT\", \"SHALL\"\
    , \"SHOULD\" and \"MAY\" in this\n   document are to be interpreted as defined\
    \ in [RFC2119].\n   In examples, \"C:\" and \"S:\" indicate messages sent by the\
    \ client and\n   server respectively.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The SECURID SASL mechanism is a good choice for usage scenarios\
    \ where\n   a client, acting on behalf of a user, is untrusted, as a one-time\n\
    \   passcode will only give the client a single opportunity to act\n   maliciously.\
    \ This mechanism provides authentication only.\n   The SECURID SASL mechanism\
    \ provides a formal way to integrate the\n   existing SecurID authentication method\
    \ into SASL-enabled protocols\n   including IMAP [RFC2060], ACAP [RFC2244], POP3\
    \ [RFC1734] and LDAPv3\n   [RFC2251].\n"
- title: 2. Authentication Model
  contents:
  - "2. Authentication Model\n   The SECURID SASL mechanism provides two-factor based\
    \ user\n   authentication as defined below.\n   There are basically three entities\
    \ in the authentication mechanism\n   described here: A user, possessing a SecurID\
    \ token, an application\n   server, to which the user wants to connect, and an\
    \ authentication\n   server, capable of authenticating the user. Even though the\n\
    \   application server in practice may function as a client with respect\n   to\
    \ the authentication server, relaying authentication credentials\n   etc. as needed,\
    \ both servers are, unless explicitly mentioned,\n   collectively termed \"the\
    \ server\" here. The protocol used between the\n   application server and the\
    \ authentication server is outside the scope\n   of this memo. The application\
    \ client, acting on behalf of the user,\n   is termed \"the client\".\n   The\
    \ mechanism is based on the use of a shared secret key, or \"seed\",\n   and a\
    \ personal identification number (PIN), which is known both by\n   the user and\
    \ the authentication server. The secret seed is stored on\n   a token that the\
    \ user possesses, as well as on the authentication\n   server. Hence the term\
    \ \"two-factor authentication\", a user needs not\n   only physical access to\
    \ the token but also knowledge about the PIN in\n   order to perform an authentication.\
    \ Given the seed, current time of\n   day, and the PIN, a \"PASSCODE(r)\" is generated\
    \ by the user's token\n   and sent to the server.\n   The SECURID SASL mechanism\
    \ provides one service:\n   -    User authentication where the user provides information\
    \ to the\n        server, so that the server can authenticate the user.\n   This\
    \ mechanism is identified with the SASL key \"SECURID\".\n"
- title: 3. Authentication Procedure
  contents:
  - "3. Authentication Procedure\n   a) The client generates the credentials using\
    \ local information\n      (seed, current time and user PIN/password).\n   b)\
    \ If the underlying protocol permits, the client sends credentials\n      to the\
    \ server in an initial response message. Otherwise, the\n      client sends a\
    \ request to the server to initiate the\n      authentication mechanism, and sends\
    \ credentials after the server's\n      response (see [RFC2222] section 5.1 for\
    \ more information regarding\n      the initial response option).\n      Unless\
    \ the server requests a new PIN (see below), the contents of\n      the client's\
    \ initial response SHALL be as follows:\n      (1) An authorization identity.\
    \ When this field is empty, it\n      defaults to the authentication identity.\
    \  This field MAY be used\n      by system administrators or proxy servers to\
    \ login with a\n      different user identity. This field MUST NOT be longer than\
    \ 255\n      octets, SHALL be terminated by a NUL (0) octet, and MUST consist\n\
    \      of UTF-8-encoded [RFC2279] printable characters only (US-ASCII\n      [X3.4]\
    \ is a subset of UTF-8).\n      (2) An authentication identity. The identity whose\
    \ passcode will\n      be used. If this field is empty, it is assumed to have\
    \ been\n      transferred by other means (e.g. if the underlying protocol has\n\
    \      support for this, like [RFC2251]). This field MUST NOT be longer\n    \
    \  than 255 octets, SHALL be terminated by a NUL (0) octet, and MUST\n      consist\
    \ of UTF-8-encoded printable characters only.\n      (3) A passcode. The one-time\
    \ password that will be used to grant\n      access. This field MUST NOT be shorter\
    \ than 4 octets, MUST NOT be\n      longer than 32 octets, SHALL be terminated\
    \ by a NUL (0) octet, and\n      MUST consist of UTF-8-encoded printable characters\
    \ only.\n      Passcodes usually consist of 4-8 digits.\n      The ABNF [RFC2234]\
    \ form of this message is as follows:\n      credential-pdu = authorization-id\
    \ authentication-id passcode [pin]\n      authorization-id = 0*255VUTF8 %x00\n\
    \      authentication-id = 0*255VUTF8 %x00\n      passcode = 4*32VUTF8 %x00\n\
    \      pin ::= 4*32VUTF8 %x00\n      VUTF8 = <Visible (printable) UTF8-encoded\
    \ characters>\n      Regarding the <pin> rule, see d) below.\n   c) The server\
    \ verifies these credentials using its own information.\n      If the verification\
    \ succeeds, the server sends back a response\n      indicating success to the\
    \ client. After receiving this response,\n      the client is authenticated. Otherwise,\
    \ the verification either\n      failed or the server needs an additional set\
    \ of credentials from\n      the client in order to authenticate the user.\n \
    \  d) If the server needs an additional set of credentials, it requests\n    \
    \  them now. This request has the following format, described in ABNF\n      notation:\n\
    \      server-request = passcode | pin\n      passcode      = \"passcode\" %x00\n\
    \      pin           = \"pin\" %x00 [suggested-pin]\n      suggested-pin = 4*32VUTF8\
    \ %x00 ; Between 4 and 32 UTF-8 characters\n      The 'passcode' choice will be\
    \ sent when the server requests\n      another passcode. The 'pin' choice will\
    \ be sent when the server\n      requests a new user PIN. The server will either\
    \ send an empty\n      string or suggest a new user PIN in this message.\n   e)\
    \ The client generates a new set of credentials using local\n      information\
    \ and depending on the server's request and sends them\n      to the server. Authentication\
    \ now continues as in c) above.\n   Note 1: Case d) above may occur e.g. when\
    \ the clocks on which the\n   server and the client relies are not synchronized.\n\
    \   Note 2: If the server requests a new user PIN, the client MUST\n   respond\
    \ with a new user PIN (together with a passcode), encoded as a\n   UTF-8 string.\
    \ If the server supplies the client with a suggested PIN,\n   the client accepts\
    \ this by replying with the same PIN, but MAY\n   replace it with another one.\
    \ The length of the PIN is application-\n   dependent as are any other requirements\
    \ for the PIN, e.g. allowed\n   characters.  If the server for some reason does\
    \ not accept the\n   received PIN, the client MUST be prepared to receive either\
    \ a message\n   indicating the failure of the authentication or a repeated request\n\
    \   for a new PIN. Mechanisms for transferring knowledge about PIN\n   requirements\
    \ from the server to the client are outside the scope of\n   this memo. However,\
    \ some information MAY be provided in error\n   messages transferred from the\
    \ server to the client when applicable.\n"
- title: 4. Examples
  contents:
  - '4. Examples

    '
- title: 4.1 IMAP4
  contents:
  - "4.1 IMAP4\n   The following example shows the use of the SECURID SASL mechanism\n\
    \   with IMAP4. The example is only designed to illustrate the protocol\n   interaction\
    \ but do provide valid encoding examples.\n   The base64 encoding of the last\
    \ client response, as well as the \"+ \"\n   preceding the response, is part of\
    \ the IMAP4 profile, and not a part\n   of this specification itself.\n   S: *\
    \ OK IMAP4 server ready\n   C: A001 CAPABILITY\n   S: * CAPABILITY IMAP4 AUTH=CRAM-MD5\
    \ AUTH=SECURID\n   S: A001 OK done\n   C: A002 AUTHENTICATE SECURID\n   S: +\n\
    \   C: AG1hZ251cwAxMjM0NTY3OAA=\n   S: A002 OK Welcome, SECURID authenticated\
    \ user: magnus\n"
- title: 4.2 LDAPv3
  contents:
  - "4.2 LDAPv3\n   The following examples show the use of the SECURID SASL mechanism\n\
    \   with LDAPv3. The examples are only designed to illustrate the\n   protocol\
    \ interaction, but do provide valid encoding examples.\n   Usernames, passcodes\
    \ and PINs are of course fictitious. For\n   readability, all messages are shown\
    \ in the value-notation defined in\n   [X680]. <credential-pdu> values are shown\
    \ hex-encoded in the\n   'credentials' field of LDAP's 'BindRequest' and <server-request>\n\
    \   values are shown hex-encoded in the 'serverSaslCreds' field of LDAP's\n  \
    \ 'BindResponse'.\n"
- title: 4.2.1 LDAPv3 Example 1
  contents:
  - "4.2.1 LDAPv3 Example 1\n   Initial response message, successful authentication.\n\
    \   C: { messageID 1,\n        protocolOp bindRequest :\n          { version 1,\n\
    \            name '434E3D4D41474E5553'H, -- \"CN=MAGNUS\"\n            authentication\
    \ sasl :\n              { mechanism '53454355524944'H, -- \"SECURID\"\n      \
    \          credentials '006d61676e757300313233343536373800'H\n              }\n\
    \          }\n      }\n   S: { messageID 1,\n        protocolOp bindResponse :\n\
    \          { resultCode success,\n            matchedDN  ''H,\n            errorMessage\
    \ ''H,\n          }\n      }\n"
- title: 4.2.2 LDAPv3 Example 2
  contents:
  - "4.2.2 LDAPv3 Example 2\n   Initial response message, server requires second passcode.\n\
    \   C:  {\n       messageID 1,\n       protocolOp bindRequest : {\n          \
    \ version 1,\n           name '434E3D4D41474E5553'H, -- \"CN=MAGNUS\"\n      \
    \     authentication sasl : {\n               mechanism '53454355524944'H, --\
    \ \"SECURID\"\n               credentials '006d61676e757300313233343536373800'H\n\
    \           }\n       }\n   }\n   S:  {\n       messageID 1,\n       protocolOp\
    \ bindResponse : {\n           resultCode saslBindInProgress,\n           matchedDN\
    \  ''H,\n           errorMessage ''H,\n           serverSaslCreds '70617373636f646500'H\n\
    \       }\n   }\n   C:  {\n       messageID 1,\n       protocolOp bindRequest\
    \ : {\n           version 1,\n           name '434E3D4D41474E5553'H, -- \"CN=MAGNUS\"\
    \n           authentication sasl : {\n               mechanism '53454355524944'H,\
    \ -- \"SECURID\"\n               credentials '006d61676e757300383736353433323100'H\n\
    \           }\n       }\n   }\n   S:  {\n       messageID 1,\n       protocolOp\
    \ bindResponse : {\n           resultCode success,\n           matchedDN  ''H,\n\
    \           errorMessage ''H,\n       }\n   }\n"
- title: 4.2.3 LDAPv3 Example 3
  contents:
  - "4.2.3 LDAPv3 Example 3\n   Initial response message, server requires new PIN\
    \ and passcode, and\n   supplies client with a suggested new PIN (which the client\
    \ accepts).\n   C:  {\n       messageID 1,\n       protocolOp bindRequest : {\n\
    \           version 1,\n           name '434E3D4D41474E5553'H, -- \"CN=MAGNUS\"\
    \n           authentication sasl : {\n               mechanism '53454355524944'H,\
    \ -- \"SECURID\"\n               credentials '006d61676e757300313233343536373800'H\n\
    \           }\n       }\n   }\n   S:  {\n       messageID 1,\n       protocolOp\
    \ bindResponse : {\n           resultCode saslBindInProgress,\n           matchedDN\
    \  ''H,\n           errorMessage ''H,\n           serverSaslCreds '70696e006b616c6c6500'H\n\
    \       }\n   }\n   C:  {\n       messageID 1,\n       protocolOp bindRequest\
    \ : {\n           version 1,\n           name '434E3D4D41474E5553'H, -- \"CN=MAGNUS\"\
    \n           authentication sasl : {\n               mechanism '53454355524944'H,\
    \ -- \"SECURID\"\n           credentials '006d61676e7573003837343434363734006b616c6c6500'H\n\
    \           }\n       }\n   }\n   S:  {\n       messageID 1,\n       protocolOp\
    \ bindResponse : {\n           resultCode success,\n           matchedDN  ''H,\n\
    \           errorMessage ''H,\n       }\n   }\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This mechanism only provides protection against\
    \ passive eavesdropping\n   attacks. It does not provide session privacy, server\
    \ authentication\n   or protection from active attacks. In particular, man-in-the-middle\n\
    \   attacks, were an attacker acts as an application server in order to\n   acquire\
    \ a valid passcode are possible.\n   In order to protect against such attacks,\
    \ the client SHOULD make sure\n   that the server is properly authenticated. When\
    \ user PINs are\n   transmitted, user authentication SHOULD take place on a server-\n\
    \   authenticated and confidentiality-protected connection.\n   Server implementations\
    \ MUST protect against replay attacks, since an\n   attacker could otherwise gain\
    \ access by replaying a previous, valid\n   request. Clients MUST also protect\
    \ against replay of PIN-change\n   messages.\n"
- title: 5.1 The Race Attack
  contents:
  - "5.1 The Race Attack\n   It is possible for an attacker to listen to most of a\
    \ passcode, guess\n   the remainder, and then race the legitimate user to complete\
    \ the\n   authentication. As for OTP [RFC2289], conforming server\n   implementations\
    \ MUST protect against this race condition. One defense\n   against this attack\
    \ is outlined below and borrowed from [RFC2289];\n   implementations MAY use this\
    \ approach or MAY select an alternative\n   defense.\n   One possible defense\
    \ is to prevent a user from starting multiple\n   simultaneous authentication\
    \ sessions. This means that once the\n   legitimate user has initiated authentication,\
    \ an attacker would be\n   blocked until the first authentication process has\
    \ completed.  In\n   this approach, a timeout is necessary to thwart a denial\
    \ of service\n   attack.\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   By registering the SecurID protocol as a SASL mechanism,\
    \ implementers\n   will have a well-defined way of adding this authentication\
    \ mechanism\n   to their product. Here is the registration template for the SECURID\n\
    \   SASL mechanism:\n      SASL mechanism name:      SECURID\n      Security Considerations:\
    \  See corresponding section of this memo\n      Published specification:  This\
    \ memo\n      Person & email address to\n      contact for further\n      information:\
    \              See author's address section below\n      Intended usage:     \
    \      COMMON\n      Author/Change controller: See author's address section below\n"
- title: 7. Intellectual Property Considerations
  contents:
  - "7. Intellectual Property Considerations\n   RSA Security Inc. does not make any\
    \ claims on the general\n   constructions described in this memo, although underlying\
    \ techniques\n   may be covered. Among the underlying techniques, the SecurID\n\
    \   technology is covered by a number of US patents (and foreign\n   counterparts),\
    \ in particular US patent no. 4,885,778, no. 5,097,505,\n   no. 5,168,520, and\
    \ 5,657,388.\n   SecurID is a registered trademark, and PASSCODE is a trademark,\
    \ of\n   RSA Security Inc.\n"
- title: 8. References
  contents:
  - "8. References\n   [RFC1734] Myers, J., \"POP3 AUTHentication command\", RFC 1734,\n\
    \             December 1994.\n   [RFC2026] Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n             3\", BCP 9, RFC 2026, October 1996.\n   [RFC2060]\
    \ Crispin, M., \"Internet Message Access Protocol - Version\n             4rev1\"\
    , RFC 2060, December 1996.\n   [RFC2119] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2222] Myers, J., \"Simple Authentication and Security Layer\", RFC\n \
    \            2222, October 1997.\n   [RFC2234] Crocker, D. and P. Overell, \"\
    Augmented BNF for Syntax\n             Specifications: ABNF\", RFC 2234, November\
    \ 1997.\n   [RFC2244] Newman, C. and J. Myers, \"ACAP -- Application Configuration\n\
    \             Access Protocol\", RFC 2244, November 1997.\n   [RFC2251] Wahl,\
    \ M., Howes, T. and S. Kille, \"Lightweight Directory\n             Access Protocol\
    \ (v3)\", RFC 2251, December 1997.\n   [RFC2279] Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO 10646\",\n             RFC 2279, January 1998.\n   [RFC2289] Haller,\
    \ N., Metz, C., Nesser, P. and M. Straw, \"A One-Time\n             Password System\"\
    , RFC 2289, February 1998.\n   [X3.4]    ANSI, \"ANSI X3.4: Information Systems\
    \ - Coded Character\n             Sets - 7-Bit American National Standard Code\
    \ for\n             Information Interchange (7-Bit ASCII),\" American National\n\
    \             Standards Institute.\n   [X680]    ITU-T, \"Information Technology\
    \ - Abstract Syntax Notation\n             One (ASN.1): Specification of Basic\
    \ Notation,\"\n             International Telecommunication Union, 1997.\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   The author gratefully acknowledges the contributions\
    \ of various\n   reviewers of this memo, in particular the ones from John Myers.\
    \  They\n   have significantly clarified and improved the utility of this\n  \
    \ specification.\n"
- title: 10. Author's Address
  contents:
  - "10. Author's Address\n   Magnus Nystrom\n   RSA Laboratories\n   Box 10704\n\
    \   121 29 Stockholm\n   Sweden\n   Phone: +46 8 725 0900\n   EMail: magnus@rsasecurity.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
