- contents:
  - "   Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 4.0\n                         Message
    Specification\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines Secure/Multipurpose Internet Mail Extensions\n
    \  (S/MIME) version 4.0.  S/MIME provides a consistent way to send and\n   receive
    secure MIME data.  Digital signatures provide authentication,\n   message integrity,
    and non-repudiation with proof of origin.\n   Encryption provides data confidentiality.
    \ Compression can be used to\n   reduce data size.  This document obsoletes RFC
    5751.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8551.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   5\n     1.1.  Specification Overview  . . . . . . . . . . . . . .
    . . .   5\n     1.2.  Definitions . . . . . . . . . . . . . . . . . . . . . .
    .   6\n     1.3.  Conventions Used in This Document . . . . . . . . . . . .   7\n
    \    1.4.  Compatibility with Prior Practice of S/MIME . . . . . . .   8\n     1.5.
    \ Changes from S/MIME v3 to S/MIME v3.1 . . . . . . . . . .   9\n     1.6.  Changes
    from S/MIME v3.1 to S/MIME v3.2 . . . . . . . . .   9\n     1.7.  Changes for
    S/MIME v4.0 . . . . . . . . . . . . . . . . .  11\n   2.  CMS Options . . . .
    . . . . . . . . . . . . . . . . . . . . .  12\n     2.1.  DigestAlgorithmIdentifier
    . . . . . . . . . . . . . . . .  12\n     2.2.  SignatureAlgorithmIdentifier  .
    . . . . . . . . . . . . .  12\n     2.3.  KeyEncryptionAlgorithmIdentifier  .
    . . . . . . . . . . .  13\n     2.4.  General Syntax  . . . . . . . . . . . .
    . . . . . . . . .  13\n       2.4.1.  Data Content Type . . . . . . . . . . .
    . . . . . . .  14\n       2.4.2.  SignedData Content Type . . . . . . . . . .
    . . . . .  14\n       2.4.3.  EnvelopedData Content Type  . . . . . . . . . .
    . . .  14\n       2.4.4.  AuthEnvelopedData Content Type  . . . . . . . . . .
    .  14\n       2.4.5.  CompressedData Content Type . . . . . . . . . . . . .  14\n
    \    2.5.  Attributes and the SignerInfo Type  . . . . . . . . . . .  15\n       2.5.1.
    \ Signing Time Attribute  . . . . . . . . . . . . . . .  15\n       2.5.2.  SMIMECapabilities
    Attribute . . . . . . . . . . . . .  16\n       2.5.3.  Encryption Key Preference
    Attribute . . . . . . . . .  17\n     2.6.  SignerIdentifier SignerInfo Type  .
    . . . . . . . . . . .  19\n     2.7.  ContentEncryptionAlgorithmIdentifier  .
    . . . . . . . . .  19\n       2.7.1.  Deciding Which Encryption Method to Use
    . . . . . . .  19\n       2.7.2.  Choosing Weak Encryption  . . . . . . . . .
    . . . . .  21\n       2.7.3.  Multiple Recipients . . . . . . . . . . . . . .
    . . .  21\n   3.  Creating S/MIME Messages  . . . . . . . . . . . . . . . . .
    .  21\n     3.1.  Preparing the MIME Entity for Signing, Enveloping, or\n           Compressing
    . . . . . . . . . . . . . . . . . . . . . . .  22\n       3.1.1.  Canonicalization
    \ . . . . . . . . . . . . . . . . . .  23\n       3.1.2.  Transfer Encoding .
    . . . . . . . . . . . . . . . . .  24\n       3.1.3.  Transfer Encoding for Signing
    Using multipart/signed   25\n       3.1.4.  Sample Canonical MIME Entity  . .
    . . . . . . . . . .  25\n     3.2.  The application/pkcs7-mime Media Type . .
    . . . . . . . .  26\n       3.2.1.  The name and filename Parameters  . . . .
    . . . . . .  27\n       3.2.2.  The smime-type Parameter  . . . . . . . . . .
    . . . .  28\n     3.3.  Creating an Enveloped-Only Message  . . . . . . . . .
    . .  29\n     3.4.  Creating an Authenticated Enveloped-Only Message  . . . .
    \ 30\n     3.5.  Creating a Signed-Only Message  . . . . . . . . . . . . .  31\n
    \      3.5.1.  Choosing a Format for Signed-Only Messages  . . . . .  32\n       3.5.2.
    \ Signing Using application/pkcs7-mime with SignedData   32\n       3.5.3.  Signing
    Using the multipart/signed Format . . . . . .  33\n     3.6.  Creating a Compressed-Only
    Message  . . . . . . . . . . .  36\n     3.7.  Multiple Operations . . . . . .
    . . . . . . . . . . . . .  37\n     3.8.  Creating a Certificate Management Message
    . . . . . . . .  38\n     3.9.  Registration Requests . . . . . . . . . . . .
    . . . . . .  38\n     3.10. Identifying an S/MIME Message . . . . . . . . . .
    . . . .  39\n   4.  Certificate Processing  . . . . . . . . . . . . . . . . .
    . .  39\n     4.1.  Key Pair Generation . . . . . . . . . . . . . . . . . . .
    \ 40\n     4.2.  Signature Generation  . . . . . . . . . . . . . . . . . .  40\n
    \    4.3.  Signature Verification  . . . . . . . . . . . . . . . . .  40\n     4.4.
    \ Encryption  . . . . . . . . . . . . . . . . . . . . . . .  41\n     4.5.  Decryption
    \ . . . . . . . . . . . . . . . . . . . . . . .  41\n   5.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  41\n     5.1.  Media Type for application/pkcs7-mime
    . . . . . . . . . .  42\n     5.2.  Media Type for application/pkcs7-signature
    \ . . . . . . .  43\n     5.3.  authEnveloped-data smime-type . . . . . . . .
    . . . . . .  44\n     5.4.  Reference Updates . . . . . . . . . . . . . . . .
    . . . .  44\n   6.  Security Considerations . . . . . . . . . . . . . . . . .
    . .  44\n   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 48\n     7.1.  Reference Conventions . . . . . . . . . . . . . . . . . .  48\n
    \    7.2.  Normative References  . . . . . . . . . . . . . . . . . .  49\n     7.3.
    \ Informative References  . . . . . . . . . . . . . . . . .  52\n   Appendix A.
    \ ASN.1 Module . . . . . . . . . . . . . . . . . . . .  57\n   Appendix B.  Historic
    Mail Considerations . . . . . . . . . . . .  59\n     B.1.  DigestAlgorithmIdentifier
    . . . . . . . . . . . . . . . .  59\n     B.2.  Signature Algorithms  . . . .
    . . . . . . . . . . . . . .  59\n     B.3.  ContentEncryptionAlgorithmIdentifier
    \ . . . . . . . . . .  61\n     B.4.  KeyEncryptionAlgorithmIdentifier  . . .
    . . . . . . . . .  62\n   Appendix C.  Moving S/MIME v2 Message Specification
    to Historic\n                Status . . . . . . . . . . . . . . . . . . . . .
    . .  62\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 62\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  63\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides
    a\n   consistent way to send and receive secure MIME data.  Based on the\n   popular
    Internet MIME standard, S/MIME provides the following\n   cryptographic security
    services for electronic messaging\n   applications: authentication, message integrity,
    and non-repudiation\n   of origin (using digital signatures), and data confidentiality
    (using\n   encryption).  As a supplementary service, S/MIME provides message\n
    \  compression.\n   S/MIME can be used by traditional mail user agents (MUAs)
    to add\n   cryptographic security services to mail that is sent, and to\n   interpret
    cryptographic security services in mail that is received.\n   However, S/MIME
    is not restricted to mail; it can be used with any\n   transport mechanism that
    transports MIME data, such as HTTP or SIP.\n   As such, S/MIME takes advantage
    of the object-based features of MIME\n   and allows secure messages to be exchanged
    in mixed-transport\n   systems.\n   Further, S/MIME can be used in automated message
    transfer agents that\n   use cryptographic security services that do not require
    any human\n   intervention, such as the signing of software-generated documents
    and\n   the encryption of FAX messages sent over the Internet.\n   This document
    defines version 4.0 of the S/MIME Message\n   Specification.  As such, this document
    obsoletes version 3.2 of the\n   S/MIME Message Specification [RFC5751].\n   This
    specification contains a number of references to documents that\n   have been
    obsoleted or replaced.  This is intentional, as the updated\n   documents often
    do not have the same information or protocol\n   requirements in them.\n"
  - contents:
    - "1.1.  Specification Overview\n   This document describes a protocol for adding
      cryptographic signature\n   and encryption services to MIME data.  The MIME
      standard [MIME-SPEC]\n   provides a general structure for the content of Internet
      messages and\n   allows extensions for new applications based on content-type.\n
      \  This specification defines how to create a MIME body part that has\n   been
      cryptographically enhanced according to the Cryptographic\n   Message Syntax
      (CMS) [CMS], which is derived from PKCS #7 [RFC2315].\n   This specification
      also defines the application/pkcs7-mime media\n   type, which can be used to
      transport those body parts.\n   This document also discusses how to use the
      multipart/signed media\n   type defined in [RFC1847] to transport S/MIME signed
      messages.\n   multipart/signed is used in conjunction with the\n   application/pkcs7-signature
      media type, which is used to transport a\n   detached S/MIME signature.\n   In
      order to create S/MIME messages, an S/MIME agent MUST follow the\n   specifications
      in this document, as well as the specifications listed\n   in [CMS], [RFC3370],
      [RFC4056], [RFC3560], and [RFC5754].\n   Throughout this specification, there
      are requirements and\n   recommendations made for how receiving agents handle
      incoming\n   messages.  There are separate requirements and recommendations
      for\n   how sending agents create outgoing messages.  In general, the best\n
      \  strategy is to follow the Robustness Principle (be liberal in what\n   you
      receive and conservative in what you send).  Most of the\n   requirements are
      placed on the handling of incoming messages, while\n   the recommendations are
      mostly on the creation of outgoing messages.\n   The separation for requirements
      on receiving agents and sending\n   agents also derives from the likelihood
      that there will be S/MIME\n   systems that involve software other than traditional
      Internet mail\n   clients.  S/MIME can be used with any system that transports
      MIME\n   data.  An automated process that sends an encrypted message might not\n
      \  be able to receive an encrypted message at all, for example.  Thus,\n   the
      requirements and recommendations for the two types of agents are\n   listed
      separately when appropriate.\n"
    title: 1.1.  Specification Overview
  - contents:
    - "1.2.  Definitions\n   For the purposes of this specification, the following
      definitions\n   apply.\n   ASN.1:\n      Abstract Syntax Notation One, as defined
      in ITU-T Recommendations\n      X.680, X.681, X.682, and X.683 [ASN.1].\n   BER:\n
      \     Basic Encoding Rules for ASN.1, as defined in ITU-T Recommendation\n      X.690
      [X.690].\n   Certificate:\n      A type that binds an entity's name to a public
      key with a digital\n      signature.\n   DER:\n      Distinguished Encoding
      Rules for ASN.1, as defined in ITU-T\n      Recommendation X.690 [X.690].\n
      \  7-bit data:\n      Text data with lines less than 998 characters long, where
      none of\n      the characters have the 8th bit set, and there are no NULL\n
      \     characters.  <CR> and <LF> occur only as part of a <CR><LF>\n      end-of-line
      delimiter.\n   8-bit data:\n      Text data with lines less than 998 characters,
      and where none of\n      the characters are NULL characters.  <CR> and <LF>
      occur only as\n      part of a <CR><LF> end-of-line delimiter.\n   Binary data:\n
      \     Arbitrary data.\n   Transfer encoding:\n      A reversible transformation
      made on data so 8-bit or binary data\n      can be sent via a channel that only
      transmits 7-bit data.\n   Receiving agent:\n      Software that interprets and
      processes S/MIME CMS objects, MIME\n      body parts that contain CMS content
      types, or both.\n   Sending agent:\n      Software that creates S/MIME CMS content
      types, MIME body parts\n      that contain CMS content types, or both.\n   S/MIME
      agent:\n      User software that is a receiving agent, a sending agent, or both.\n
      \  Data integrity service:\n      A security service that protects against unauthorized
      changes to\n      data by ensuring that changes to the data are detectable\n
      \     [RFC4949].\n   Data confidentiality:\n      The property that data is
      not disclosed to system entities unless\n      they have been authorized to
      know the data [RFC4949].\n"
    title: 1.2.  Definitions
  - contents:
    - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this
      document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]
      when, and only when, they appear in all\n   capitals, as shown here.\n   We
      define the additional requirement levels:\n   SHOULD+   This term means the
      same as SHOULD.  However, the authors\n             expect that a requirement
      marked as SHOULD+ will be\n             promoted at some future time to be a
      MUST.\n   SHOULD-   This term means the same as SHOULD.  However, the authors\n
      \            expect that a requirement marked as SHOULD- will be demoted\n             to
      a MAY in a future version of this document.\n   MUST-     This term means the
      same as MUST.  However, the authors\n             expect that this requirement
      will no longer be a MUST in a\n             future document.  Although its status
      will be determined at\n             a later time, it is reasonable to expect
      that if a future\n             revision of a document alters the status of a
      MUST-\n             requirement, it will remain at least a SHOULD or a SHOULD-.\n
      \  The term \"RSA\" in this document almost always refers to the\n   PKCS #1
      v1.5 RSA [RFC2313] signature or encryption algorithms even\n   when not qualified
      as such.  There are a couple of places where it\n   refers to the general RSA
      cryptographic operation; these can be\n   determined from the context where
      it is used.\n"
    title: 1.3.  Conventions Used in This Document
  - contents:
    - "1.4.  Compatibility with Prior Practice of S/MIME\n   S/MIME version 4.0 agents
      ought to attempt to have the greatest\n   interoperability possible with agents
      for prior versions of S/MIME.\n   -  S/MIME version 2 is described in RFC 2311
      through RFC 2315\n      inclusive [SMIMEv2].\n   -  S/MIME version 3 is described
      in RFC 2630 through RFC 2634\n      inclusive and RFC 5035 [SMIMEv3].\n   -
      \ S/MIME version 3.1 is described in RFC 2634, RFC 3850, RFC 3851,\n      RFC
      3852, and RFC 5035 [SMIMEv3.1].\n   -  S/MIME version 3.2 is described in RFC
      2634, RFC 5035, RFC 5652,\n      RFC 5750, and RFC 5751 [SMIMEv3.2].\n   -  [RFC2311]
      also has historical information about the development of\n      S/MIME.\n"
    title: 1.4.  Compatibility with Prior Practice of S/MIME
  - contents:
    - "1.5.  Changes from S/MIME v3 to S/MIME v3.1\n   This section describes the
      changes made between S/MIME v3 and\n   S/MIME v3.1.  Note that the requirement
      levels indicated by the\n   capitalized key words (\"MUST\", \"SHOULD\", etc.)
      may have changed in\n   later versions of S/MIME.\n   -  The RSA public key
      algorithm was changed to a MUST implement.  The\n      key wrap algorithm and
      the Diffie-Hellman (DH) algorithm [RFC2631]\n      were changed to a SHOULD
      implement.\n   -  The AES symmetric encryption algorithm has been included as
      a\n      SHOULD implement.\n   -  The RSA public key algorithm was changed to
      a MUST implement\n      signature algorithm.\n   -  Ambiguous language about
      the use of \"empty\" SignedData messages to\n      transmit certificates was
      clarified to reflect that transmission\n      of Certificate Revocation Lists
      is also allowed.\n   -  The use of binary encoding for some MIME entities is
      now\n      explicitly discussed.\n   -  Header protection through the use of
      the message/rfc822 media type\n      has been added.\n   -  Use of the CompressedData
      CMS type is allowed, along with required\n      media type and file extension
      additions.\n"
    title: 1.5.  Changes from S/MIME v3 to S/MIME v3.1
  - contents:
    - "1.6.  Changes from S/MIME v3.1 to S/MIME v3.2\n   This section describes the
      changes made between S/MIME v3.1 and\n   S/MIME v3.2.  Note that the requirement
      levels indicated by the\n   capitalized key words (\"MUST\", \"SHOULD\", etc.)
      may have changed in\n   later versions of S/MIME.  Note that the section numbers
      listed here\n   (e.g., 3.4.3.2) are from [RFC5751].\n   -  Made editorial changes,
      e.g., replaced \"MIME type\" with \"media\n      type\", \"content-type\" with
      \"Content-Type\".\n   -  Moved \"Conventions Used in This Document\" to Section
      1.3.  Added\n      definitions for SHOULD+, SHOULD-, and MUST-.\n   -  Section
      1.1 and Appendix A: Added references to RFCs for\n      RSASSA-PSS, RSAES-OAEP,
      and SHA2 CMS algorithms.  Added CMS\n      Multiple Signers Clarification to
      CMS reference.\n   -  Section 1.2: Updated references to ASN.1 to X.680, and
      BER and DER\n      to X.690.\n   -  Section 1.4: Added references to S/MIME
      v3.1 RFCs.\n   -  Section 2.1 (digest algorithm): SHA-256 added as MUST, SHA-1
      and\n      MD5 made SHOULD-.\n   -  Section 2.2 (signature algorithms): RSA
      with SHA-256 added as\n      MUST; DSA with SHA-256 added as SHOULD+; RSA with
      SHA-1, DSA with\n      SHA-1, and RSA with MD5 changed to SHOULD-; and RSASSA-PSS
      with\n      SHA-256 added as SHOULD+.  Also added note about what S/MIME v3.1\n
      \     clients support.\n   -  Section 2.3 (key encryption): DH changed to SHOULD-,
      and RSAES-\n      OAEP added as SHOULD+.  Elaborated on requirements for key
      wrap\n      algorithm.\n   -  Section 2.5.1: Added requirement that receiving
      agents MUST\n      support both GeneralizedTime and UTCTime.\n   -  Section
      2.5.2: Replaced reference \"sha1WithRSAEncryption\" with\n      \"sha256WithRSAEncryption\",
      replaced \"DES-3EDE-CBC\" with \"AES-128\n      CBC\", and deleted the RC5 example.\n
      \  -  Section 2.5.2.1: Deleted entire section (discussed\n      deprecated RC2).\n
      \  -  Section 2.7, Section 2.7.1, and Appendix A: References to RC2/40\n      removed.\n
      \  -  Section 2.7 (content encryption): AES-128 CBC added as MUST,\n      AES-192
      and AES-256 CBC SHOULD+, and tripleDES now SHOULD-.\n   -  Section 2.7.1: Updated
      pointers from 2.7.2.1 through 2.7.2.4 to\n      2.7.1.1 and 2.7.1.2.\n   -  Section
      3.1.1: Removed text about MIME character sets.\n   -  Sections 3.2.2 and 3.6:
      Replaced \"encrypted\" with \"enveloped\".\n      Updated OID example to use
      AES-128 CBC OID.\n   -  Section 3.4.3.2: Replaced \"micalg\" parameter for \"SHA-1\"
      with\n      \"sha-1\".\n   -  Section 4: Updated reference to CERT v3.2.\n   -
      \ Section 4.1: Updated RSA and DSA key size discussion.  Moved last\n      four
      sentences to security considerations.  Updated reference to\n      randomness
      requirements for security.\n   -  Section 5: Added IANA registration templates
      to update media type\n      registry to point to this document as opposed to
      RFC 2311.\n   -  Section 6: Updated security considerations.\n   -  Section
      7: Moved references from Appendix B to this section.\n      Updated references.
      \ Added informative references to SMIMEv2,\n      SMIMEv3, and SMIMEv3.1.\n
      \  -  Appendix B: Added Appendix B to move S/MIME v2 to Historic status.\n"
    title: 1.6.  Changes from S/MIME v3.1 to S/MIME v3.2
  - contents:
    - "1.7.  Changes for S/MIME v4.0\n   This section describes the changes made between
      S/MIME v3.2 and\n   S/MIME v4.0.\n   -  Added the use of AuthEnvelopedData,
      including defining and\n      registering an smime-type value (Sections 2.4.4
      and 3.4).\n   -  Updated the content-encryption algorithms (Sections 2.7 and\n
      \     2.7.1.2): added AES-256 Galois/Counter Mode (GCM), added\n      ChaCha20-Poly1305,
      removed mention of AES-192 Cipher Block\n      Chaining (CBC), and marked tripleDES
      as historic.\n   -  Updated the set of signature algorithms (Section 2.2): added
      the\n      Edwards-curve Digital Signature Algorithm (EdDSA), added the\n      Elliptic
      Curve Digital Signature Algorithm (ECDSA), and marked DSA\n      as historic.\n
      \  -  Updated the set of digest algorithms (Section 2.1): added SHA-512,\n      and
      marked SHA-1 as historic.\n   -  Updated the size of keys to be used for RSA
      encryption and RSA\n      signing (Section 4).\n   -  Created Appendix B, which
      discusses considerations for dealing\n      with historic email messages.\n"
    title: 1.7.  Changes for S/MIME v4.0
  title: 1.  Introduction
- contents:
  - "2.  CMS Options\n   CMS allows for a wide variety of options in content, attributes,
    and\n   algorithm support.  This section puts forth a number of support\n   requirements
    and recommendations in order to achieve a base level of\n   interoperability among
    all S/MIME implementations.  [RFC3370] and\n   [RFC5754] provide additional details
    regarding the use of the\n   cryptographic algorithms.  [ESS] provides additional
    details\n   regarding the use of additional attributes.\n"
  - contents:
    - "2.1.  DigestAlgorithmIdentifier\n   The algorithms here are used for digesting
      the body of the message\n   and are not the same as the digest algorithms used
      as part of the\n   signature algorithms.  The result of this is placed in the\n
      \  message-digest attribute of the signed attributes.  It is RECOMMENDED\n   that
      the algorithm used for digesting the body of the message be of\n   similar strength
      to, or greater strength than, the signature\n   algorithm.\n   Sending and receiving
      agents:\n   -  MUST support SHA-256.\n   -  MUST support SHA-512.\n   [RFC5754]
      provides the details for using these algorithms with\n   S/MIME.\n"
    title: 2.1.  DigestAlgorithmIdentifier
  - contents:
    - "2.2.  SignatureAlgorithmIdentifier\n   There are different sets of requirements
      placed on receiving and\n   sending agents.  By having the different requirements,
      the maximum\n   amount of interoperability is achieved, as it allows for specialized\n
      \  protection of private key material but maximum signature validation.\n   Receiving
      agents:\n   -  MUST support ECDSA with curve P-256 and SHA-256.\n   -  MUST
      support EdDSA with curve25519 using PureEdDSA mode [RFC8419].\n   -  MUST- support
      RSA PKCS #1 v1.5 with SHA-256.\n   -  SHOULD support the RSA Probabilistic Signature
      Scheme (RSASSA-PSS)\n      with SHA-256.\n   Sending agents:\n   -  MUST support
      at least one of the following algorithms: ECDSA with\n      curve P-256 and
      SHA-256, or EdDSA with curve25519 using PureEdDSA\n      mode.\n   -  MUST-
      support RSA PKCS #1 v1.5 with SHA-256.\n   -  SHOULD support RSASSA-PSS with
      SHA-256.\n   See Section 4.1 for information on key size and algorithm references.\n"
    title: 2.2.  SignatureAlgorithmIdentifier
  - contents:
    - "2.3.  KeyEncryptionAlgorithmIdentifier\n   Receiving and sending agents:\n
      \  -  MUST support Elliptic Curve Diffie-Hellman (ECDH) ephemeral-static\n      mode
      for P-256, as specified in [RFC5753].\n   -  MUST support ECDH ephemeral-static
      mode for X25519 using HKDF-256\n      (\"HKDF\" stands for \"HMAC-based Key
      Derivation Function\") for the\n      KDF, as specified in [RFC8418].\n   -
      \ MUST- support RSA encryption, as specified in [RFC3370].\n   -  SHOULD+ support
      RSA Encryption Scheme - Optimal Asymmetric\n      Encryption Padding (RSAES-OAEP),
      as specified in [RFC3560].\n   When ECDH ephemeral-static is used, a key wrap
      algorithm is also\n   specified in the KeyEncryptionAlgorithmIdentifier [RFC5652].
      \ The\n   underlying encryption functions for the key wrap and content-\n   encryption
      algorithms [RFC3370] [RFC3565] and the key sizes for the\n   two algorithms
      MUST be the same (e.g., AES-128 key wrap algorithm\n   with AES-128 content-encryption
      algorithm).  As both 128-bit and\n   256-bit AES modes are mandatory to implement
      as content-encryption\n   algorithms (Section 2.7), both the AES-128 and AES-256
      key wrap\n   algorithms MUST be supported when ECDH ephemeral-static is used.\n
      \  Recipients MAY enforce this but MUST use the weaker of the two as\n   part
      of any cryptographic strength computations they might do.\n   Appendix B provides
      information on algorithm support in older\n   versions of S/MIME.\n"
    title: 2.3.  KeyEncryptionAlgorithmIdentifier
  - contents:
    - "2.4.  General Syntax\n   There are several CMS content types.  Of these, only
      the Data,\n   SignedData, EnvelopedData, AuthEnvelopedData, and CompressedData\n
      \  content types are currently used for S/MIME.\n"
    - contents:
      - "2.4.1.  Data Content Type\n   Sending agents MUST use the id-data content
        type identifier to\n   identify the \"inner\" MIME message content.  For example,
        when\n   applying a digital signature to MIME data, the CMS SignedData\n   encapContentInfo
        eContentType MUST include the id-data object\n   identifier (OID), and the
        media type MUST be stored in the SignedData\n   encapContentInfo eContent
        OCTET STRING (unless the sending agent is\n   using multipart/signed, in which
        case the eContent is absent, per\n   Section 3.5.3 of this document).  As
        another example, when applying\n   encryption to MIME data, the CMS EnvelopedData
        encryptedContentInfo\n   contentType MUST include the id-data OID and the
        encrypted MIME\n   content MUST be stored in the EnvelopedData encryptedContentInfo\n
        \  encryptedContent OCTET STRING.\n"
      title: 2.4.1.  Data Content Type
    - contents:
      - "2.4.2.  SignedData Content Type\n   Sending agents MUST use the SignedData
        content type to apply a\n   digital signature to a message or, in a degenerate
        case where there\n   is no signature information, to convey certificates.
        \ Applying a\n   signature to a message provides authentication, message integrity,\n
        \  and non-repudiation of origin.\n"
      title: 2.4.2.  SignedData Content Type
    - contents:
      - "2.4.3.  EnvelopedData Content Type\n   This content type is used to apply
        data confidentiality to a message.\n   In order to distribute the symmetric
        key, a sender needs to have\n   access to a public key for each intended message
        recipient to use\n   this service.\n"
      title: 2.4.3.  EnvelopedData Content Type
    - contents:
      - "2.4.4.  AuthEnvelopedData Content Type\n   This content type is used to apply
        data confidentiality and message\n   integrity to a message.  This content
        type does not provide\n   authentication or non-repudiation.  In order to
        distribute the\n   symmetric key, a sender needs to have access to a public
        key for each\n   intended message recipient to use this service.\n"
      title: 2.4.4.  AuthEnvelopedData Content Type
    - contents:
      - "2.4.5.  CompressedData Content Type\n   This content type is used to apply
        data compression to a message.\n   This content type does not provide authentication,
        message integrity,\n   non-repudiation, or data confidentiality; it is only
        used to reduce\n   the message's size.\n   See Section 3.7 for further guidance
        on the use of this type in\n   conjunction with other CMS types.\n"
      title: 2.4.5.  CompressedData Content Type
    title: 2.4.  General Syntax
  - contents:
    - "2.5.  Attributes and the SignerInfo Type\n   The SignerInfo type allows the
      inclusion of unsigned and signed\n   attributes along with a signature.  These
      attributes can be required\n   for the processing of messages (e.g., message
      digest), information\n   the signer supplied (e.g., SMIME capabilities) that
      should be\n   processed, or attributes that are not relevant to the current\n
      \  situation (e.g., mlExpansionHistory [RFC2634] for mail viewers).\n   Receiving
      agents MUST be able to handle zero or one instance of each\n   of the signed
      attributes listed here.  Sending agents SHOULD generate\n   one instance of
      each of the following signed attributes in each\n   S/MIME message:\n   -  Signing
      time (Section 2.5.1 in this document)\n   -  SMIME capabilities (Section 2.5.2
      in this document)\n   -  Encryption key Preference (Section 2.5.3 in this document)\n
      \  -  Message digest (Section 11.2 in [RFC5652])\n   -  Content type (Section
      11.1 in [RFC5652])\n   Further, receiving agents SHOULD be able to handle zero
      or one\n   instance of the signingCertificate and signingCertificateV2 signed\n
      \  attributes, as defined in Section 5 of RFC 2634 [ESS] and Section 3\n   of
      RFC 5035 [ESS], respectively.\n   Sending agents SHOULD generate one instance
      of the signingCertificate\n   or signingCertificateV2 signed attribute in each
      SignerInfo\n   structure.\n   Additional attributes and values for these attributes
      might be\n   defined in the future.  Receiving agents SHOULD handle attributes
      or\n   values that they do not recognize in a graceful manner.\n   Interactive
      sending agents that include signed attributes that are\n   not listed here SHOULD
      display those attributes to the user, so that\n   the user is aware of all of
      the data being signed.\n"
    - contents:
      - "2.5.1.  Signing Time Attribute\n   The signingTime attribute is used to convey
        the time that a message\n   was signed.  The time of signing will most likely
        be created by a\n   signer and therefore is only as trustworthy as that signer.\n
        \  Sending agents MUST encode signing time through the year 2049 as\n   UTCTime;
        signing times in 2050 or later MUST be encoded as\n   GeneralizedTime.  When
        the UTCTime CHOICE is used, S/MIME agents MUST\n   interpret the year field
        (YY) as follows:\n      If YY is greater than or equal to 50, the year is
        interpreted as\n      19YY; if YY is less than 50, the year is interpreted
        as 20YY.\n   Receiving agents MUST be able to process signingTime attributes
        that\n   are encoded in either UTCTime or GeneralizedTime.\n"
      title: 2.5.1.  Signing Time Attribute
    - contents:
      - "2.5.2.  SMIMECapabilities Attribute\n   The SMIMECapabilities attribute includes
        signature algorithms (such\n   as \"sha256WithRSAEncryption\"), symmetric
        algorithms (such as \"AES-128\n   CBC\"), authenticated symmetric algorithms
        (such as \"AES-128 GCM\"),\n   and key encipherment algorithms (such as \"rsaEncryption\").
        \ The\n   presence of an SMIMECapability attribute containing an algorithm\n
        \  implies that the sender can deal with the algorithm as well as\n   understand
        the ASN.1 structures associated with that algorithm.\n   There are also several
        identifiers that indicate support for other\n   optional features such as
        binary encoding and compression.  The\n   SMIMECapabilities attribute was
        designed to be flexible and\n   extensible so that, in the future, a means
        of identifying other\n   capabilities and preferences such as certificates
        can be added in a\n   way that will not cause current clients to break.\n
        \  If present, the SMIMECapabilities attribute MUST be a\n   SignedAttribute.
        \ CMS defines SignedAttributes as a SET OF Attribute.\n   The SignedAttributes
        in a signerInfo MUST include a single instance\n   of the SMIMECapabilities
        attribute.  CMS defines the ASN.1 syntax for\n   Attribute to include attrValues
        SET OF AttributeValue.  An\n   SMIMECapabilities attribute MUST only include
        a single instance of\n   AttributeValue.  If a signature is detected as violating
        these\n   requirements, the signature SHOULD be treated as failing.\n   The
        semantics of the SMIMECapabilities attribute specify a partial\n   list as
        to what the client announcing the SMIMECapabilities can\n   support.  A client
        does not have to list every capability it\n   supports, and it need not list
        all its capabilities so that the\n   capabilities list doesn't get too long.
        \ In an SMIMECapabilities\n   attribute, the OIDs are listed in order of their
        preference but\n   SHOULD be separated logically along the lines of their
        categories\n   (signature algorithms, symmetric algorithms, key encipherment\n
        \  algorithms, etc.).\n   The structure of the SMIMECapabilities attribute
        is to facilitate\n   simple table lookups and binary comparisons in order
        to determine\n   matches.  For instance, the encoding for the SMIMECapability
        for\n   sha256WithRSAEncryption includes rather than omits the NULL\n   parameter.
        \ Because of the requirement for identical encoding,\n   individuals documenting
        algorithms to be used in the\n   SMIMECapabilities attribute SHOULD explicitly
        document the correct\n   byte sequence for the common cases.\n   For any capability,
        the associated parameters for the OID MUST\n   specify all of the parameters
        necessary to differentiate between two\n   instances of the same algorithm.\n
        \  The same OID that is used to identify an algorithm SHOULD also be\n   used
        in the SMIMECapability for that algorithm.  There are cases\n   where a single
        OID can correspond to multiple algorithms.  In these\n   cases, a single algorithm
        MUST be assigned to the SMIMECapability\n   using that OID.  Additional OIDs
        from the smimeCapabilities OID tree\n   are then allocated for the other algorithms
        usages.  For instance, in\n   an earlier specification, rsaEncryption was
        ambiguous because it\n   could refer to either a signature algorithm or a
        key encipherment\n   algorithm.  In the event that an OID is ambiguous, it
        needs to be\n   arbitrated by the maintainer of the registered SMIMECapabilities
        list\n   as to which type of algorithm will use the OID, and a new OID MUST
        be\n   allocated under the smimeCapabilities OID to satisfy the other use
        of\n   the OID.\n   The registered SMIMECapabilities list specifies the parameters
        for\n   OIDs that need them, most notably key lengths in the case of\n   variable-length
        symmetric ciphers.  In the event that there are no\n   differentiating parameters
        for a particular OID, the parameters MUST\n   be omitted and MUST NOT be encoded
        as NULL.  Additional values for\n   the SMIMECapabilities attribute might
        be defined in the future.\n   Receiving agents MUST handle an SMIMECapabilities
        object that has\n   values that it does not recognize in a graceful manner.\n
        \  Section 2.7.1 explains a strategy for caching capabilities.\n"
      title: 2.5.2.  SMIMECapabilities Attribute
    - contents:
      - "2.5.3.  Encryption Key Preference Attribute\n   The encryption key preference
        attribute allows the signer to\n   unambiguously describe which of the signer's
        certificates has the\n   signer's preferred encryption key.  This attribute
        is designed to\n   enhance behavior for interoperating with those clients
        that use\n   separate keys for encryption and signing.  This attribute is
        used to\n   convey to anyone viewing the attribute which of the listed\n   certificates
        is appropriate for encrypting a session key for future\n   encrypted messages.\n
        \  If present, the SMIMEEncryptionKeyPreference attribute MUST be a\n   SignedAttribute.
        \ CMS defines SignedAttributes as a SET OF Attribute.\n   The SignedAttributes
        in a signerInfo MUST include a single instance\n   of the SMIMEEncryptionKeyPreference
        attribute.  CMS defines the ASN.1\n   syntax for Attribute to include attrValues
        SET OF AttributeValue.  An\n   SMIMEEncryptionKeyPreference attribute MUST
        only include a single\n   instance of AttributeValue.  If a signature is detected
        as violating\n   these requirements, the signature SHOULD be treated as failing.\n
        \  The sending agent SHOULD include the referenced certificate in the\n   set
        of certificates included in the signed message if this attribute\n   is used.
        \ The certificate MAY be omitted if it has been previously\n   made available
        to the receiving agent.  Sending agents SHOULD use\n   this attribute if the
        commonly used or preferred encryption\n   certificate is not the same as the
        certificate used to sign the\n   message.\n   Receiving agents SHOULD store
        the preference data if the signature on\n   the message is valid and the signing
        time is greater than the\n   currently stored value.  (As with the SMIMECapabilities,
        the clock\n   skew SHOULD be checked and the data not used if the skew is
        too\n   great.)  Receiving agents SHOULD respect the sender's encryption key\n
        \  preference attribute if possible.  This, however, represents only a\n   preference,
        and the receiving agent can use any certificate in\n   replying to the sender
        that is valid.\n   Section 2.7.1 explains a strategy for caching preference
        data.\n"
      - contents:
        - "2.5.3.1.  Selection of Recipient Key Management Certificate\n   In order
          to determine the key management certificate to be used when\n   sending
          a future CMS EnvelopedData message for a particular\n   recipient, the following
          steps SHOULD be followed:\n   -  If an SMIMEEncryptionKeyPreference attribute
          is found in a\n      SignedData object received from the desired recipient,
          this\n      identifies the X.509 certificate that SHOULD be used as the
          X.509\n      key management certificate for the recipient.\n   -  If an
          SMIMEEncryptionKeyPreference attribute is not found in a\n      SignedData
          object received from the desired recipient, the set of\n      X.509 certificates
          SHOULD be searched for an X.509 certificate\n      with the same subject
          name as the signer of an X.509 certificate\n      that can be used for key
          management.\n   -  Or, use some other method of determining the user's key
          management\n      key.  If an X.509 key management certificate is not found,
          then\n      encryption cannot be done with the signer of the message.  If\n
          \     multiple X.509 key management certificates are found, the S/MIME\n
          \     agent can make an arbitrary choice between them.\n"
        title: 2.5.3.1.  Selection of Recipient Key Management Certificate
      title: 2.5.3.  Encryption Key Preference Attribute
    title: 2.5.  Attributes and the SignerInfo Type
  - contents:
    - "2.6.  SignerIdentifier SignerInfo Type\n   S/MIME v4.0 implementations MUST
      support both issuerAndSerialNumber\n   and subjectKeyIdentifier.  Messages that
      use the subjectKeyIdentifier\n   choice cannot be read by S/MIME v2 clients.\n
      \  It is important to understand that some certificates use a value for\n   subjectKeyIdentifier
      that is not suitable for uniquely identifying a\n   certificate.  Implementations
      MUST be prepared for multiple\n   certificates for potentially different entities
      to have the same\n   value for subjectKeyIdentifier and MUST be prepared to
      try each\n   matching certificate during signature verification before indicating\n
      \  an error condition.\n"
    title: 2.6.  SignerIdentifier SignerInfo Type
  - contents:
    - "2.7.  ContentEncryptionAlgorithmIdentifier\n   Sending and receiving agents:\n
      \  -  MUST support encryption and decryption with AES-128 GCM and\n      AES-256
      GCM [RFC5084].\n   -  MUST- support encryption and decryption with AES-128 CBC\n
      \     [RFC3565].\n   -  SHOULD+ support encryption and decryption with ChaCha20-Poly1305\n
      \     [RFC7905].\n"
    - contents:
      - "2.7.1.  Deciding Which Encryption Method to Use\n   When a sending agent
        creates an encrypted message, it has to decide\n   which type of encryption
        to use.  The decision process involves using\n   information garnered from
        the capabilities lists included in messages\n   received from the recipient,
        as well as out-of-band information such\n   as private agreements, user preferences,
        legal restrictions, and\n   so on.\n   Section 2.5.2 defines a method by which
        a sending agent can\n   optionally announce, among other things, its decrypting
        capabilities\n   in its order of preference.  The following method for processing
        and\n   remembering the encryption capabilities attribute in incoming signed\n
        \  messages SHOULD be used.\n   -  If the receiving agent has not yet created
        a list of capabilities\n      for the sender's public key, then, after verifying
        the signature\n      on the incoming message and checking the timestamp, the
        receiving\n      agent SHOULD create a new list containing at least the signing\n
        \     time and the symmetric capabilities.\n   -  If such a list already exists,
        the receiving agent SHOULD verify\n      that the signing time in the incoming
        message is greater than the\n      signing time stored in the list and that
        the signature is valid.\n      If so, the receiving agent SHOULD update both
        the signing time and\n      capabilities in the list.  Values of the signing
        time that lie far\n      in the future (that is, a greater discrepancy than
        any reasonable\n      clock skew), or a capabilities list in messages whose
        signature\n      could not be verified, MUST NOT be accepted.\n   The list
        of capabilities SHOULD be stored for future use in creating\n   messages.\n
        \  Before sending a message, the sending agent MUST decide whether it is\n
        \  willing to use weak encryption for the particular data in the\n   message.
        \ If the sending agent decides that weak encryption is\n   unacceptable for
        this data, then the sending agent MUST NOT use a\n   weak algorithm.  The
        decision to use or not use weak encryption\n   overrides any other decision
        in this section about which encryption\n   algorithm to use.\n   Sections
        2.7.1.1 and 2.7.1.2 describe the decisions a sending agent\n   SHOULD use
        when choosing which type of encryption will be applied to\n   a message.  These
        rules are ordered, so the sending agent SHOULD make\n   its decision in the
        order given.\n"
      - contents:
        - "2.7.1.1.  Rule 1: Known Capabilities\n   If the sending agent has received
          a set of capabilities from the\n   recipient for the message the agent is
          about to encrypt, then the\n   sending agent SHOULD use that information
          by selecting the first\n   capability in the list (that is, the capability
          most preferred by the\n   intended recipient) that the sending agent knows
          how to encrypt.  The\n   sending agent SHOULD use one of the capabilities
          in the list if the\n   agent reasonably expects the recipient to be able
          to decrypt the\n   message.\n"
        title: '2.7.1.1.  Rule 1: Known Capabilities'
      - contents:
        - "2.7.1.2.  Rule 2: Unknown Capabilities, Unknown Version of S/MIME\n   If
          the following two conditions are met, the sending agent SHOULD use\n   AES-256
          GCM, as AES-256 GCM is a stronger algorithm and is required\n   by S/MIME
          v4.0:\n   -  The sending agent has no knowledge of the encryption capabilities\n
          \     of the recipient.\n   -  The sending agent has no knowledge of the
          version of S/MIME used\n      or supported by the recipient.\n   If the
          sending agent chooses not to use AES-256 GCM in this step,\n   given the
          presumption is that a client implementing AES-GCM would do\n   both AES-256
          and AES-128, it SHOULD use AES-128 CBC.\n"
        title: '2.7.1.2.  Rule 2: Unknown Capabilities, Unknown Version of S/MIME'
      title: 2.7.1.  Deciding Which Encryption Method to Use
    - contents:
      - "2.7.2.  Choosing Weak Encryption\n   Algorithms such as RC2 are considered
        to be weak encryption\n   algorithms.  Algorithms such as TripleDES are not
        state of the art\n   and are considered to be weaker algorithms than AES.
        \ A sending agent\n   that is controlled by a human SHOULD allow a human sender
        to\n   determine the risks of sending data using a weaker encryption\n   algorithm
        before sending the data, and possibly allow the human to\n   use a stronger
        encryption algorithm such as AES GCM or AES CBC even\n   if there is a possibility
        that the recipient will not be able to\n   process that algorithm.\n"
      title: 2.7.2.  Choosing Weak Encryption
    - contents:
      - "2.7.3.  Multiple Recipients\n   If a sending agent is composing an encrypted
        message to a group of\n   recipients where the encryption capabilities of
        some of the\n   recipients do not overlap, the sending agent is forced to
        send more\n   than one message.  Please note that if the sending agent chooses
        to\n   send a message encrypted with a strong algorithm and then send the\n
        \  same message encrypted with a weak algorithm, someone watching the\n   communications
        channel could learn the contents of the strongly\n   encrypted message simply
        by decrypting the weakly encrypted message.\n"
      title: 2.7.3.  Multiple Recipients
    title: 2.7.  ContentEncryptionAlgorithmIdentifier
  title: 2.  CMS Options
- contents:
  - "3.  Creating S/MIME Messages\n   This section describes the S/MIME message formats
    and how they are\n   created.  S/MIME messages are a combination of MIME bodies
    and CMS\n   content types.  Several media types as well as several CMS content\n
    \  types are used.  The data to be secured is always a canonical MIME\n   entity.
    \ The MIME entity and other data, such as certificates and\n   algorithm identifiers,
    are given to CMS processing facilities that\n   produce a CMS object.  Finally,
    the CMS object is wrapped in MIME.\n   The \"Enhanced Security Services for S/MIME\"
    documents [ESS] provide\n   descriptions of how nested, secured S/MIME messages
    are formatted.\n   ESS provides a description of how a triple-wrapped S/MIME message
    is\n   formatted using multipart/signed and application/pkcs7-mime for the\n   signatures.\n
    \  S/MIME provides one format for enveloped-only data, several formats\n   for
    signed-only data, and several formats for signed and enveloped\n   data.  Several
    formats are required to accommodate several\n   environments -- in particular,
    for signed messages.  The criteria for\n   choosing among these formats are also
    described.\n   Anyone reading this section is expected to understand MIME as\n
    \  described in [MIME-SPEC] and [RFC1847].\n"
  - contents:
    - "3.1.  Preparing the MIME Entity for Signing, Enveloping, or Compressing\n   S/MIME
      is used to secure MIME entities.  A MIME message is composed\n   of a MIME header
      and a MIME body.  A body can consist of a single\n   MIME entity or a tree of
      MIME entities (rooted with a multipart).\n   S/MIME can be used to secure either
      a single MIME entity or a tree of\n   MIME entities.  These entities can be
      in locations other than the\n   root.  S/MIME can be applied multiple times
      to different entities in\n   a single message.  A MIME entity that is the whole
      message includes\n   only the MIME message headers and MIME body and does not
      include the\n   rfc822 header.  Note that S/MIME can also be used to secure
      MIME\n   entities used in applications other than Internet mail.  For cases\n
      \  where protection of the rfc822 header is required, the use of the\n   message/rfc822
      media type is explained later in this section.\n   The MIME entity that is secured
      and described in this section can be\n   thought of as the \"inside\" MIME entity.
      \ That is, it is the\n   \"innermost\" object in what is possibly a larger MIME
      message.\n   Processing \"outside\" MIME entities into CMS EnvelopedData,\n
      \  CompressedData, and AuthEnvelopedData content types is described in\n   Sections
      3.2 and 3.5.  Other documents define additional CMS content\n   types; those
      documents should be consulted for processing those CMS\n   content types.\n
      \  The procedure for preparing a MIME entity is given in [MIME-SPEC].\n   The
      same procedure is used here with some additional restrictions\n   when signing.
      \ The description of the procedures from [MIME-SPEC] is\n   repeated here, but
      it is suggested that the reader refer to those\n   documents for the exact procedures.
      \ This section also describes\n   additional requirements.\n   A single procedure
      is used for creating MIME entities that are to\n   have any combination of signing,
      enveloping, and compressing applied.\n   Some additional steps are recommended
      to defend against known\n   corruptions that can occur during mail transport
      that are of\n   particular importance for clear-signing using the multipart/signed\n
      \  format.  It is recommended that these additional steps be performed\n   on
      enveloped messages, or signed and enveloped messages, so that the\n   messages
      can be forwarded to any environment without modification.\n   These steps are
      descriptive rather than prescriptive.  The\n   implementer is free to use any
      procedure as long as the result is\n   the same.\n   Step 1.  The MIME entity
      is prepared according to local conventions.\n   Step 2.  The leaf parts of the
      MIME entity are converted to\n            canonical form.\n   Step 3.  Appropriate
      transfer encoding is applied to the leaves\n            of the MIME entity.\n
      \  When an S/MIME message is received, the security services on the\n   message
      are processed, and the result is the MIME entity.  That MIME\n   entity is typically
      passed to a MIME-capable user agent where it is\n   further decoded and presented
      to the user or receiving application.\n   In order to protect outer, non-content-related
      message header fields\n   (for instance, the \"Subject\", \"To\", \"From\",
      and \"Cc\" fields), the\n   sending client MAY wrap a full MIME message in a
      message/rfc822\n   wrapper in order to apply S/MIME security services to these
      header\n   fields.  It is up to the receiving client to decide how to present\n
      \  this \"inner\" header along with the unprotected \"outer\" header.  Given\n
      \  the security difference between headers, it is RECOMMENDED that the\n   receiving
      client provide a distinction between header fields,\n   depending on where they
      are located.\n   When an S/MIME message is received, if the top-level protected
      MIME\n   entity has a Content-Type of message/rfc822, it can be assumed that\n
      \  the intent was to provide header protection.  This entity SHOULD be\n   presented
      as the top-level message, taking into account\n   header-merging issues as previously
      discussed.\n"
    - contents:
      - "3.1.1.  Canonicalization\n   Each MIME entity MUST be converted to a canonical
        form that is\n   uniquely and unambiguously representable in the environment
        where the\n   signature is created and the environment where the signature
        will be\n   verified.  MIME entities MUST be canonicalized for enveloping
        and\n   compressing as well as signing.\n   The exact details of canonicalization
        depend on the actual media type\n   and subtype of an entity and are not described
        here.  Instead, the\n   standard for the particular media type SHOULD be consulted.
        \ For\n   example, canonicalization of type text/plain is different from\n
        \  canonicalization of audio/basic.  Other than text types, most types\n   have
        only one representation, regardless of computing platform or\n   environment,
        that can be considered their canonical representation.\n   In general, canonicalization
        will be performed by the non-security\n   part of the sending agent rather
        than the S/MIME implementation.\n   The most common and important canonicalization
        is for text, which is\n   often represented differently in different environments.
        \ MIME\n   entities of major type \"text\" MUST have both their line endings
        and\n   character set canonicalized.  The line ending MUST be the pair of\n
        \  characters <CR><LF>, and the charset SHOULD be a registered charset\n   [CHARSETS].
        \ The details of the canonicalization are specified in\n   [MIME-SPEC].\n
        \  Note that some charsets such as ISO-2022 have multiple\n   representations
        for the same characters.  When preparing such text\n   for signing, the canonical
        representation specified for the charset\n   MUST be used.\n"
      title: 3.1.1.  Canonicalization
    - contents:
      - "3.1.2.  Transfer Encoding\n   When generating any of the secured MIME entities
        below, except the\n   signing using the multipart/signed format, no transfer
        encoding is\n   required at all.  S/MIME implementations MUST be able to deal
        with\n   binary MIME objects.  If no Content-Transfer-Encoding header field
        is\n   present, the transfer encoding is presumed to be 7BIT.\n   As a rule,
        S/MIME implementations SHOULD use transfer encoding as\n   described in Section
        3.1.3 for all MIME entities they secure.  The\n   reason for securing only
        7-bit MIME entities, even for enveloped data\n   that is not exposed to the
        transport, is that it allows the MIME\n   entity to be handled in any environment
        without changing it.  For\n   example, a trusted gateway might remove the
        envelope, but not the\n   signature, of a message, and then forward the signed
        message on to\n   the end recipient so that they can verify the signatures
        directly.\n   If the transport internal to the site is not 8-bit clean, such
        as on\n   a wide-area network with a single mail gateway, verifying the\n
        \  signature will not be possible unless the original MIME entity was\n   only
        7-bit data.\n   In the case where S/MIME implementations can determine that
        all\n   intended recipients are capable of handling inner (all but the\n   outermost)
        binary MIME objects, implementations SHOULD use binary\n   encoding as opposed
        to a 7-bit-safe transfer encoding for the inner\n   entities.  The use of
        a 7-bit-safe encoding (such as base64)\n   unnecessarily expands the message
        size.  Implementations MAY\n   determine that recipient implementations are
        capable of\n   handling inner binary MIME entities by (1) interpreting the\n
        \  id-cap-preferBinaryInside SMIMECapabilities attribute, (2) prior\n   agreement,
        or (3) other means.\n   If one or more intended recipients are unable to handle
        inner binary\n   MIME objects or if this capability is unknown for any of
        the intended\n   recipients, S/MIME implementations SHOULD use transfer encoding
        as\n   described in Section 3.1.3 for all MIME entities they secure.\n"
      title: 3.1.2.  Transfer Encoding
    - contents:
      - "3.1.3.  Transfer Encoding for Signing Using multipart/signed\n   If a multipart/signed
        entity is ever to be transmitted over the\n   standard Internet SMTP infrastructure
        or other transport that is\n   constrained to 7-bit text, it MUST have transfer
        encoding applied so\n   that it is represented as 7-bit text.  MIME entities
        that are already\n   7-bit data need no transfer encoding.  Entities such
        as 8-bit text\n   and binary data can be encoded with quoted-printable or
        base64\n   transfer encoding.\n   The primary reason for the 7-bit requirement
        is that the Internet\n   mail transport infrastructure cannot guarantee transport
        of 8-bit or\n   binary data.  Even though many segments of the transport\n
        \  infrastructure now handle 8-bit and even binary data, it is sometimes\n
        \  not possible to know whether the transport path is 8-bit clean.  If a\n
        \  mail message with 8-bit data were to encounter a message transfer\n   agent
        that cannot transmit 8-bit or binary data, the agent has three\n   options,
        none of which are acceptable for a clear-signed message:\n   -  The agent
        could change the transfer encoding; this would\n      invalidate the signature.\n
        \  -  The agent could transmit the data anyway, which would most likely\n
        \     result in the 8th bit being corrupted; this too would invalidate\n      the
        signature.\n   -  The agent could return the message to the sender.\n   [RFC1847]
        prohibits an agent from changing the transfer encoding of\n   the first part
        of a multipart/signed message.  If a compliant agent\n   that cannot transmit
        8-bit or binary data encountered a\n   multipart/signed message with 8-bit
        or binary data in the first part,\n   it would have to return the message
        to the sender as undeliverable.\n"
      title: 3.1.3.  Transfer Encoding for Signing Using multipart/signed
    - contents:
      - "3.1.4.  Sample Canonical MIME Entity\n   This example shows a multipart/mixed
        message with full transfer\n   encoding.  This message contains a text part
        and an attachment.  The\n   sample message text includes characters that are
        not ASCII and thus\n   need to be transfer encoded.  Though not shown here,
        the end of each\n   line is <CR><LF>.  The line ending of the MIME headers,
        the text, and\n   the transfer-encoded parts all MUST be <CR><LF>.\n   Note
        that this example is not an example of an S/MIME message.\n   Content-Type:
        multipart/mixed; boundary=bar\n   --bar\n   Content-Type: text/plain; charset=iso-8859-1\n
        \  Content-Transfer-Encoding: quoted-printable\n   =A1Hola Michael!\n   How
        do you like the new S/MIME specification?\n   It's generally a good idea to
        encode lines that begin with\n   From=20because some mail transport agents
        will insert a\n   greater-than (>) sign, thus invalidating the signature.\n
        \  Also, in some cases it might be desirable to encode any =20\n   trailing
        whitespace that occurs on lines in order to ensure =20\n   that the message
        signature is not invalidated when passing =20\n   a gateway that modifies
        such whitespace (like BITNET). =20\n   --bar\n   Content-Type: image/jpeg\n
        \  Content-Transfer-Encoding: base64\n   iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n
        \  jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n   uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n
        \  HOxEa44b+EI=\n   --bar--\n"
      title: 3.1.4.  Sample Canonical MIME Entity
    title: 3.1.  Preparing the MIME Entity for Signing, Enveloping, or Compressing
  - contents:
    - "3.2.  The application/pkcs7-mime Media Type\n   The application/pkcs7-mime
      media type is used to carry CMS content\n   types, including EnvelopedData,
      SignedData, and CompressedData.  The\n   details of constructing these entities
      are described in subsequent\n   sections.  This section describes the general
      characteristics of the\n   application/pkcs7-mime media type.\n   The carried
      CMS object always contains a MIME entity that is prepared\n   as described in
      Section 3.1 if the eContentType is id-data.  Other\n   contents MAY be carried
      when the eContentType contains different\n   values.  See [ESS] for an example
      of this with signed receipts.\n   Since CMS content types are binary data, in
      most cases base64\n   transfer encoding is appropriate -- in particular, when
      used with\n   SMTP transport.  The transfer encoding used depends on the transport\n
      \  through which the object is to be sent and is not a characteristic of\n   the
      media type.\n   Note that this discussion refers to the transfer encoding of
      the CMS\n   object or \"outside\" MIME entity.  It is completely distinct from,
      and\n   unrelated to, the transfer encoding of the MIME entity secured by the\n
      \  CMS object -- the \"inside\" object, which is described in Section 3.1.\n
      \  Because there are several types of application/pkcs7-mime objects, a\n   sending
      agent SHOULD do as much as possible to help a receiving agent\n   know about
      the contents of the object without forcing the receiving\n   agent to decode
      the ASN.1 for the object.  The Content-Type header\n   field of all application/pkcs7-mime
      objects SHOULD include the\n   optional \"smime-type\" parameter, as described
      in the following\n   sections.\n"
    - contents:
      - "3.2.1.  The name and filename Parameters\n   For application/pkcs7-mime,
        sending agents SHOULD emit the\n   optional \"name\" parameter to the Content-Type
        field for compatibility\n   with older systems.  Sending agents SHOULD also
        emit the optional\n   Content-Disposition field [RFC2183] with the \"filename\"
        parameter.\n   If a sending agent emits the above parameters, the value of
        the\n   parameters SHOULD be a filename with the appropriate extension:\n
        \                                                               File\n   Media
        Type                                                Extension\n   -------------------------------------------------------------------\n
        \  application/pkcs7-mime (SignedData, EnvelopedData,           .p7m\n      AuthEnvelopedData)\n
        \  application/pkcs7-mime (degenerate SignedData certificate    .p7c\n      management
        message)\n   application/pkcs7-mime (CompressedData)                      .p7z\n
        \  application/pkcs7-signature (SignedData)                     .p7s\n   In
        addition, the filename SHOULD be limited to eight characters\n   followed
        by a three-letter extension.  The eight-character filename\n   base can be
        any distinct name; the use of the filename base \"smime\"\n   SHOULD be used
        to indicate that the MIME entity is associated with\n   S/MIME.\n   Including
        a filename serves two purposes.  It facilitates easier use\n   of S/MIME objects
        as files on disk.  It also can convey type\n   information across gateways.
        \ When a MIME entity of type\n   application/pkcs7-mime (for example) arrives
        at a gateway that has no\n   special knowledge of S/MIME, it will default
        the entity's media type\n   to application/octet-stream and treat it as a
        generic attachment,\n   thus losing the type information.  However, the suggested
        filename\n   for an attachment is often carried across a gateway.  This often\n
        \  allows the receiving systems to determine the appropriate application\n
        \  to hand the attachment off to -- in this case, a standalone S/MIME\n   processing
        application.  Note that this mechanism is provided as a\n   convenience for
        implementations in certain environments.  A proper\n   S/MIME implementation
        MUST use the media types and MUST NOT rely on\n   the file extensions.\n"
      title: 3.2.1.  The name and filename Parameters
    - contents:
      - "3.2.2.  The smime-type Parameter\n   The application/pkcs7-mime content type
        defines the optional\n   \"smime-type\" parameter.  The intent of this parameter
        is to convey\n   details about the security applied (signed or enveloped)
        along with\n   information about the contained content.  This specification
        defines\n   the following smime-types.\n       Name                   CMS
        Type              Inner Content\n       ----------------------------------------------------------\n
        \      enveloped-data         EnvelopedData         id-data\n       signed-data
        \           SignedData            id-data\n       certs-only             SignedData
        \           id-data\n       compressed-data        CompressedData        id-data\n
        \      authEnveloped-data     AuthEnvelopedData     id-data\n   In order for
        consistency to be obtained with future specifications,\n   the following guidelines
        SHOULD be followed when assigning a new\n   smime-type parameter.\n   1.  If
        both signing and encryption can be applied to the content,\n       then three
        values for smime-type SHOULD be assigned: \"signed-*\",\n       \"authEnv-*\",
        and \"enveloped-*\".  If one operation can be\n       assigned, then this
        can be omitted.  Thus, since \"certs-only\" can\n       only be signed, \"signed-\"
        is omitted.\n   2.  A common string for a content OID SHOULD be assigned.
        \ We use\n       \"data\" for the id-data content OID when MIME is the inner\n
        \      content.\n   3.  If no common string is assigned, then the common string
        of\n       \"OID.<oid>\" is recommended (for example,\n       \"OID.2.16.840.1.101.3.4.1.2\"
        would be AES-128 CBC).\n   It is explicitly intended that this field be a
        suitable hint for mail\n   client applications to indicate whether a message
        is \"signed\",\n   \"authEnveloped\", or \"enveloped\" without having to tunnel
        into the CMS\n   payload.\n   A registry for additional smime-type parameter
        values has been\n   defined in [RFC7114].\n"
      title: 3.2.2.  The smime-type Parameter
    title: 3.2.  The application/pkcs7-mime Media Type
  - contents:
    - "3.3.  Creating an Enveloped-Only Message\n   This section describes the format
      for enveloping a MIME entity\n   without signing it.  It is important to note
      that sending enveloped\n   but not signed messages does not provide for data
      integrity.  The\n   \"enveloped-only\" structure does not support authenticated
      symmetric\n   algorithms.  Use the \"authenticated enveloped\" structure for
      these\n   algorithms.  Thus, it is possible to replace ciphertext in such a
      way\n   that the processed message will still be valid, but the meaning can\n
      \  be altered.\n   Step 1.  The MIME entity to be enveloped is prepared according
      to\n            Section 3.1.\n   Step 2.  The MIME entity and other required
      data are processed into a\n            CMS object of type EnvelopedData.  In
      addition to encrypting\n            a copy of the content-encryption key (CEK)
      for each\n            recipient, a copy of the CEK SHOULD be encrypted for the\n
      \           originator and included in the EnvelopedData (see [RFC5652],\n            Section
      6).\n   Step 3.  The EnvelopedData object is wrapped in a CMS ContentInfo\n
      \           object.\n   Step 4.  The ContentInfo object is inserted into an\n
      \           application/pkcs7-mime MIME entity.\n   The smime-type parameter
      for enveloped-only messages is\n   \"enveloped-data\".  The file extension for
      this type of message\n   is \".p7m\".\n   A sample message would be:\n   Content-Type:
      application/pkcs7-mime; name=smime.p7m;\n      smime-type=enveloped-data\n   Content-Transfer-Encoding:
      base64\n   Content-Disposition: attachment; filename=smime.p7m\n   MIIBHgYJKoZIhvcNAQcDoIIBDzCCAQsCAQAxgcAwgb0CAQAwJjASMRAwDgYDVQQDEw\n
      \  dDYXJsUlNBAhBGNGvHgABWvBHTbi7NXXHQMA0GCSqGSIb3DQEBAQUABIGAC3EN5nGI\n   iJi2lsGPcP2iJ97a4e8kbKQz36zg6Z2i0yx6zYC4mZ7mX7FBs3IWg+f6KgCLx3M1eC\n
      \  bWx8+MDFbbpXadCDgO8/nUkUNYeNxJtuzubGgzoyEd8Ch4H/dd9gdzTd+taTEgS0ip\n   dSJuNnkVY4/M652jKKHRLFf02hosdR8wQwYJKoZIhvcNAQcBMBQGCCqGSIb3DQMHBA\n
      \  gtaMXpRwZRNYAgDsiSf8Z9P43LrY4OxUk660cu1lXeCSFOSOpOJ7FuVyU=\n"
    title: 3.3.  Creating an Enveloped-Only Message
  - contents:
    - "3.4.  Creating an Authenticated Enveloped-Only Message\n   This section describes
      the format for enveloping a MIME entity\n   without signing it.  Authenticated
      enveloped messages provide\n   confidentiality and data integrity.  It is important
      to note that\n   sending authenticated enveloped messages does not provide for
      proof\n   of origination when using S/MIME.  It is possible for a third party\n
      \  to replace ciphertext in such a way that the processed message will\n   still
      be valid, but the meaning can be altered.  However, this is\n   substantially
      more difficult than it is for an enveloped-only\n   message, as the algorithm
      does provide a level of authentication.\n   Any recipient for whom the message
      is encrypted can replace it\n   without detection.\n   Step 1.  The MIME entity
      to be enveloped is prepared according to\n            Section 3.1.\n   Step
      2.  The MIME entity and other required data are processed into a\n            CMS
      object of type AuthEnvelopedData.  In addition to\n            encrypting a
      copy of the CEK for each recipient, a copy of\n            the CEK SHOULD be
      encrypted for the originator and included\n            in the AuthEnvelopedData
      (see [RFC5083]).\n   Step 3.  The AuthEnvelopedData object is wrapped in a CMS
      ContentInfo\n            object.\n   Step 4.  The ContentInfo object is inserted
      into an\n            application/pkcs7-mime MIME entity.\n   The smime-type
      parameter for authenticated enveloped-only messages is\n   \"authEnveloped-data\".
      \ The file extension for this type of message\n   is \".p7m\".\n   A sample
      message would be:\n   Content-Type: application/pkcs7-mime; smime-type=authEnveloped-data;\n
      \     name=smime.p7m\n   Content-Transfer-Encoding: base64\n   Content-Disposition:
      attachment; filename=smime.p7m\n   MIIDWQYLKoZIhvcNAQkQARegggNIMIIDRAIBADGBvjCBuwIBADAmMBIxEDAO\n
      \  BgNVBAMTB0NhcmxSU0ECEEY0a8eAAFa8EdNuLs1dcdAwCwYJKoZIhvcNAQEB\n   BIGAgyZJo0ERTxA4xdTri5P5tVMyh0RARepTUCORZvlUbcUlaI8IpJZH3/J1\n
      \  Fv6MxTRS4O/K+ZcTlQmYeWLQvwdltQdOIP3mhpqXzTnOYhTK1IDtF2zx75Lg\n   vE+ilpcLIzXfJB4RCBPtBWaHAof4Wb+VMQvLkk9OolX4mRSH1LPktgAwggJq\n
      \  BgkqhkiG9w0BBwEwGwYJYIZIAWUDBAEGMA4EDGPizioC9OHSsnNx4oCCAj7Y\n   Cb8rOy8+55106newEJohC/aDgWbJhrMKzSOwa7JraXOV3HXD3NvKbl665dRx\n
      \  vmDwSCNaLCRU5q8/AxQx2SvnAbM+JKcEfC/VFdd4SiHNiUECAApLku2rMi5B\n   WrhW/FXmx9d+cjum2BRwB3wj0q1wajdB0/kVRbQwg697dnlYyUog4vpJERjr\n
      \  7KAkawZx1RMHaM18wgZjUNpCBXFS3chQi9mTBp2i2Hf5iZ8OOtTx+rCQUmI6\n   Jhy03vdcPCCARBjn3v0d3upZYDZddMA41CB9fKnnWFjadV1KpYwv80tqsEfx\n
      \  Vo0lJQ5VtJ8MHJiBpLVKadRIZ4iH2ULC0JtN5mXE1SrFKh7cqbJ4+7nqSRL3\n   oBTud3rX41DGshOjpqcYHT4sqYlgZkc6dp0g1+hF1p3cGmjHdpysV2NVSUev\n
      \  ghHbvSqhIsXFzRSWKiZOigmlkv3R5LnjpYyP4brM62Jl7y0qborvV4dNMz7m\n   D+5YxSlH0KAe8z6TT3LHuQdN7QCkFoiUSCaNhpAFaakkGIpqcqLhpOK4lXxt\n
      \  kptCG93eUwNCcTxtx6bXufPR5TUHohvZvfeqMp42kL37FJC/A8ZHoOxXy8+X\n   X5QYxCQNuofWlvnIWv0Nr8w65x6lgVjPYmd/cHwzQKBTBMXN6pBud/PZL5zF\n
      \  tw3QHlQkBR+UflMWZKeN9L0KdQ27mQlCo5gQS85aifxoiiA2v9+0hxZw91rP\n   IW4D+GS7oMMoKj8ZNyCJJsyf5smRZ+WxeBoolb3+TiGcBBCsRnfe6noLZiFO\n
      \  6Zeu2ZwE\n"
    title: 3.4.  Creating an Authenticated Enveloped-Only Message
  - contents:
    - "3.5.  Creating a Signed-Only Message\n   There are two formats for signed messages
      defined for S/MIME:\n   -  application/pkcs7-mime with SignedData.\n   -  multipart/signed.\n
      \  In general, the multipart/signed form is preferred for sending, and\n   receiving
      agents MUST be able to handle both.\n"
    - contents:
      - "3.5.1.  Choosing a Format for Signed-Only Messages\n   There are no hard-and-fast
        rules as to when a particular signed-only\n   format is chosen.  It depends
        on the capabilities of all the\n   receivers and the relative importance of
        receivers with S/MIME\n   facilities being able to verify the signature versus
        the importance\n   of receivers without S/MIME software being able to view
        the message.\n   Messages signed using the multipart/signed format can always
        be\n   viewed by the receiver whether or not they have S/MIME software.\n
        \  They can also be viewed whether they are using a MIME-native user\n   agent
        or they have messages translated by a gateway.  In this\n   context, \"be
        viewed\" means the ability to process the message\n   essentially as if it
        were not a signed message, including any other\n   MIME structure the message
        might have.\n   Messages signed using the SignedData format cannot be viewed
        by a\n   recipient unless they have S/MIME facilities.  However, the\n   SignedData
        format protects the message content from being changed by\n   benign intermediate
        agents.  Such agents might do line wrapping or\n   content-transfer encoding
        changes that would break the signature.\n"
      title: 3.5.1.  Choosing a Format for Signed-Only Messages
    - contents:
      - "3.5.2.  Signing Using application/pkcs7-mime with SignedData\n   This signing
        format uses the application/pkcs7-mime media type.  The\n   steps to create
        this format are as follows:\n   Step 1.  The MIME entity is prepared according
        to Section 3.1.\n   Step 2.  The MIME entity and other required data are processed
        into a\n            CMS object of type SignedData.\n   Step 3.  The SignedData
        object is wrapped in a CMS ContentInfo\n            object.\n   Step 4.  The
        ContentInfo object is inserted into an\n            application/pkcs7-mime
        MIME entity.\n   The smime-type parameter for messages using application/pkcs7-mime\n
        \  with SignedData is \"signed-data\".  The file extension for this type\n
        \  of message is \".p7m\".\n   A sample message would be:\n   Content-Type:
        application/pkcs7-mime; smime-type=signed-data;\n      name=smime.p7m\n   Content-Transfer-Encoding:
        base64\n   Content-Disposition: attachment; filename=smime.p7m\n   MIIDmQYJKoZIhvcNAQcCoIIDijCCA4YCAQExCTAHBgUrDgMCGjAtBgkqhkiG9w0BBw\n
        \  GgIAQeDQpUaGlzIGlzIHNvbWUgc2FtcGxlIGNvbnRlbnQuoIIC4DCCAtwwggKboAMC\n   AQICAgDIMAkGByqGSM44BAMwEjEQMA4GA1UEAxMHQ2FybERTUzAeFw05OTA4MTcwMT\n
        \  EwNDlaFw0zOTEyMzEyMzU5NTlaMBMxETAPBgNVBAMTCEFsaWNlRFNTMIIBtjCCASsG\n   ByqGSM44BAEwggEeAoGBAIGNze2D6gqeOT7CSCij5EeT3Q7XqA7sU8WrhAhP/5Thc0\n
        \  h+DNbzREjR/p+vpKGJL+HZMMg23j+bv7dM3F9piuR10DcMkQiVm96nXvn89J8v3UOo\n   i1TxP7AHCEdNXYjDw7Wz41UIddU5dhDEeL3/nbCElzfy5FEbteQJllzzflvbAhUA4k\n
        \  emGkVmuBPG2o+4NyErYov3k80CgYAmONAUiTKqOfs+bdlLWWpMdiM5BAI1XPLLGjDD\n   HlBd3ZtZ4s2qBT1YwHuiNrhuB699ikIlp/R1z0oIXks+kPht6pzJIYo7dhTpzi5dow\n
        \  fNI4W4LzABfG1JiRGJNkS9+MiVSlNWteL5c+waYTYfEX/Cve3RUP+YdMLRgUpgObo2\n   OQOBhAACgYBc47ladRSWC6l63eM/qeysXty9txMRNKYWiSgRI9k0hmd1dRMSPUNbb+\n
        \  VRv/qJ8qIbPiR9PQeNW2PIu0WloErjhdbOBoA/6CN+GvIkq1MauCcNHu8Iv2YUgFxi\n   rGX6FYvxuzTU0pY39mFHssQyhPB+QUD9RqdjTjPypeL08oPluKOBgTB/MAwGA1UdEw\n
        \  EB/wQCMAAwDgYDVR0PAQH/BAQDAgbAMB8GA1UdIwQYMBaAFHBEPoIub4feStN14z0g\n   vEMrk/EfMB0GA1UdDgQWBBS+bKGz48H37UNwpM4TAeL945f+zTAfBgNVHREEGDAWgR\n
        \  RBbGljZURTU0BleGFtcGxlLmNvbTAJBgcqhkjOOAQDAzAAMC0CFFUMpBkfQiuJcSIz\n   jYNqtT1na79FAhUAn2FTUlQLXLLd2ud2HeIQUltDXr0xYzBhAgEBMBgwEjEQMA4GA1\n
        \  UEAxMHQ2FybERTUwICAMgwBwYFKw4DAhowCQYHKoZIzjgEAwQuMCwCFD1cSW6LIUFz\n   eXle3YI5SKSBer/sAhQmCq7s/CTFHOEjgASeUjbMpx5g6A==\n"
      title: 3.5.2.  Signing Using application/pkcs7-mime with SignedData
    - contents:
      - "3.5.3.  Signing Using the multipart/signed Format\n   This format is a clear-signing
        format.  Recipients without any S/MIME\n   or CMS processing facilities are
        able to view the message.  It makes\n   use of the multipart/signed media
        type described in [RFC1847].  The\n   multipart/signed media type has two
        parts.  The first part contains\n   the MIME entity that is signed; the second
        part contains the\n   \"detached signature\" CMS SignedData object in which
        the\n   encapContentInfo eContent field is absent.\n"
      - contents:
        - "3.5.3.1.  The application/pkcs7-signature Media Type\n   This media type
          always contains a CMS ContentInfo containing a single\n   CMS object of
          type SignedData.  The SignedData encapContentInfo\n   eContent field MUST
          be absent.  The signerInfos field contains the\n   signatures for the MIME
          entity.\n   The file extension for signed-only messages using\n   application/pkcs7-signature
          is \".p7s\".\n"
        title: 3.5.3.1.  The application/pkcs7-signature Media Type
      - contents:
        - "3.5.3.2.  Creating a multipart/signed Message\n   Step 1.  The MIME entity
          to be signed is prepared according to\n            Section 3.1, taking special
          care for clear-signing.\n   Step 2.  The MIME entity is presented to CMS
          processing in order to\n            obtain an object of type SignedData
          in which the\n            encapContentInfo eContent field is absent.\n   Step
          3.  The MIME entity is inserted into the first part of a\n            multipart/signed
          message with no processing other than that\n            described in Section
          3.1.\n   Step 4.  Transfer encoding is applied to the \"detached signature\"
          CMS\n            SignedData object, and it is inserted into a MIME entity
          of\n            type application/pkcs7-signature.\n   Step 5.  The MIME
          entity of the application/pkcs7-signature is\n            inserted into
          the second part of the multipart/signed\n            entity.\n   The multipart/signed
          Content-Type has two required parameters: the\n   protocol parameter and
          the micalg parameter.\n   The protocol parameter MUST be \"application/pkcs7-signature\".
          \ Note\n   that quotation marks are required around the protocol parameter\n
          \  because MIME requires that the \"/\" character in the parameter value\n
          \  MUST be quoted.\n   The micalg parameter allows for one-pass processing
          when the\n   signature is being verified.  The value of the micalg parameter
          is\n   dependent on the message digest algorithm(s) used in the calculation\n
          \  of the Message Integrity Check.  If multiple message digest\n   algorithms
          are used, they MUST be separated by commas per [RFC1847].\n   The values
          to be placed in the micalg parameter SHOULD be from the\n   following:\n
          \       Algorithm      Value Used\n        -----------------------------------------------------------\n
          \       MD5*           md5\n        SHA-1*         sha-1\n        SHA-224
          \       sha-224\n        SHA-256        sha-256\n        SHA-384        sha-384\n
          \       SHA-512        sha-512\n        Any other      (defined separately
          in the algorithm profile\n                        or \"unknown\" if not
          defined)\n   *Note: MD5 and SHA-1 are historical and no longer considered
          secure.\n   See Appendix B for details.\n   (Historical note: Some early
          implementations of S/MIME emitted and\n   expected \"rsa-md5\", \"rsa-sha1\",
          and \"sha1\" for the micalg parameter.)\n   Receiving agents SHOULD be able
          to recover gracefully from a micalg\n   parameter value that they do not
          recognize.  Future values for this\n   parameter will be taken from the
          IANA \"Hash Function Textual Names\"\n   registry.\n"
        title: 3.5.3.2.  Creating a multipart/signed Message
      - contents:
        - "3.5.3.3.  Sample multipart/signed Message\n   Content-Type: multipart/signed;\n
          \      micalg=sha-256;\n       boundary=\"----=_NextBoundary____Fri,_06_Sep_2002_00:25:21\";\n
          \      protocol=\"application/pkcs7-signature\"\n   This is a multipart
          message in MIME format.\n   ------=_NextBoundary____Fri,_06_Sep_2002_00:25:21\n
          \  This is some sample content.\n   ------=_NextBoundary____Fri,_06_Sep_2002_00:25:21\n
          \  Content-Type: application/pkcs7-signature; name=smime.p7s\n   Content-Transfer-Encoding:
          base64\n   Content-Disposition: attachment; filename=smime.p7s\n   MIIBJgYJKoZIhvcNAQcCoIIBFzCCARMCAQExADALBgkqhkiG9w0BBwExgf4w\n
          \  gfsCAQIwJjASMRAwDgYDVQQDEwdDYXJsUlNBAhBGNGvHgABWvBHTbi7EELOw\n   MAsGCWCGSAFlAwQCAaAxMC8GCSqGSIb3DQEJBDEiBCCxwpZGNZzTSsugsn+f\n
          \  lEidzQK4mf/ozKqfmbxhcIkKqjALBgkqhkiG9w0BAQsEgYB0XJV7fjPa5Nuh\n   oth5msDfP8A5urYUMjhNpWgXG8ae3XpppqVrPi2nVO41onHnkByjkeD/wc31\n
          \  A9WH8MzFQgSTsrJ65JvffTTXkOpRPxsSHn3wJFwP/atWHkh8YK/jR9bULhUl\n   Mv5jQEDiwVX5DRasxu6Ld8zv9u5/TsdBNiufGw==\n
          \  ------=_NextBoundary____Fri,_06_Sep_2002_00:25:21--\n   The content that
          is digested (the first part of the multipart/signed)\n   consists of the
          bytes:\n   54 68 69 73 20 69 73 20 73 6f 6d 65 20 73 61 6d 70 6c 65 20 63
          6f 6e\n   74 65 6e 74 2e 0d 0a\n"
        title: 3.5.3.3.  Sample multipart/signed Message
      title: 3.5.3.  Signing Using the multipart/signed Format
    title: 3.5.  Creating a Signed-Only Message
  - contents:
    - "3.6.  Creating a Compressed-Only Message\n   This section describes the format
      for compressing a MIME entity.\n   Please note that versions of S/MIME prior
      to version 3.1 did not\n   specify any use of CompressedData and will not recognize
      it.  The use\n   of a capability to indicate the ability to receive CompressedData
      is\n   described in [RFC3274] and is the preferred method for compatibility.\n
      \  Step 1.  The MIME entity to be compressed is prepared according to\n            Section
      3.1.\n   Step 2.  The MIME entity and other required data are processed into
      a\n            CMS object of type CompressedData.\n   Step 3.  The CompressedData
      object is wrapped in a CMS ContentInfo\n            object.\n   Step 4.  The
      ContentInfo object is inserted into an\n            application/pkcs7-mime MIME
      entity.\n   The smime-type parameter for compressed-only messages is\n   \"compressed-data\".
      \ The file extension for this type of message\n   is \".p7z\".\n   A sample
      message would be:\n   Content-Type: application/pkcs7-mime; smime-type=compressed-data;\n
      \     name=smime.p7z\n   Content-Transfer-Encoding: base64\n   Content-Disposition:
      attachment; filename=smime.p7z\n   eNoLycgsVgCi4vzcVIXixNyCnFSF5Py8ktS8Ej0AlCkKVA==\n"
    title: 3.6.  Creating a Compressed-Only Message
  - contents:
    - "3.7.  Multiple Operations\n   The signed-only, enveloped-only, and compressed-only
      MIME formats can\n   be nested.  This works because these formats are all MIME
      entities\n   that encapsulate other MIME entities.\n   An S/MIME implementation
      MUST be able to receive and process\n   arbitrarily nested S/MIME within reasonable
      resource limits of the\n   recipient computer.\n   It is possible to apply any
      of the signing, encrypting, and\n   compressing operations in any order.  It
      is up to the implementer and\n   the user to choose.  When signing first, the
      signatories are then\n   securely obscured by the enveloping.  When enveloping
      first, the\n   signatories are exposed, but it is possible to verify signatures\n
      \  without removing the enveloping.  This can be useful in an\n   environment
      where automatic signature verification is desired, as no\n   private key material
      is required to verify a signature.\n   There are security ramifications related
      to choosing whether to sign\n   first or encrypt first.  A recipient of a message
      that is encrypted\n   and then signed can validate that the encrypted block
      was unaltered\n   but cannot determine any relationship between the signer and
      the\n   unencrypted contents of the message.  A recipient of a message that\n
      \  is signed and then encrypted can assume that the signed message\n   itself
      has not been altered but that a careful attacker could have\n   changed the
      unauthenticated portions of the encrypted message.\n   When using compression,
      keep the following guidelines in mind:\n   -  Compression of encrypted data
      that is transferred as binary data\n   is discouraged, since it will not yield
      significant compression.\n   Encrypted data that is transferred as base64-encoded
      data could\n   benefit as well.\n   -  If a lossy compression algorithm is used
      with signing, you will\n   need to compress first, then sign.\n"
    title: 3.7.  Multiple Operations
  - contents:
    - "3.8.  Creating a Certificate Management Message\n   The certificate management
      message or MIME entity is used to\n   transport certificates and/or Certificate
      Revocation Lists (CRLs),\n   such as in response to a registration request.\n
      \  Step 1.  The certificates and/or CRLs are made available to the CMS\n            generating
      process that creates a CMS object of type\n            SignedData.  The SignedData
      encapContentInfo eContent field\n            MUST be absent, and the signerInfos
      field MUST be empty.\n   Step 2.  The SignedData object is wrapped in a CMS
      ContentInfo\n            object.\n   Step 3.  The ContentInfo object is enclosed
      in an\n            application/pkcs7-mime MIME entity.\n   The smime-type parameter
      for a certificate management message is\n   \"certs-only\".  The file extension
      for this type of message is \".p7c\".\n"
    title: 3.8.  Creating a Certificate Management Message
  - contents:
    - "3.9.  Registration Requests\n   A sending agent that signs messages MUST have
      a certificate for the\n   signature so that a receiving agent can verify the
      signature.  There\n   are many ways of getting certificates, such as through
      an exchange\n   with a certification authority, through a hardware token or
      diskette,\n   and so on.\n   S/MIME v2 [SMIMEv2] specified a method for \"registering\"
      public keys\n   with certificate authorities using an application/pkcs10 body
      part.\n   Since that time, the IETF PKIX Working Group has developed other\n
      \  methods for requesting certificates.  However, S/MIME v4.0 does not\n   require
      a particular certificate request mechanism.\n"
    title: 3.9.  Registration Requests
  - contents:
    - "3.10.  Identifying an S/MIME Message\n   Because S/MIME takes into account
      interoperation in non-MIME\n   environments, several different mechanisms are
      employed to carry the\n   type information, and it becomes a bit difficult to
      identify S/MIME\n   messages.  The following table lists criteria for determining
      whether\n   or not a message is an S/MIME message.  A message is considered
      an\n   S/MIME message if it matches any of the criteria listed below.\n   The
      file suffix in the table below comes from the \"name\" parameter in\n   the
      Content-Type header field or the \"filename\" parameter in the\n   Content-Disposition
      header field.  The MIME parameters that carry the\n   file suffix are not listed
      below.\n   Media Type                 Parameters                     File Suffix\n
      \  ---------------------------------------------------------------------\n   application/pkcs7-mime
      \    N/A                            N/A\n   multipart/signed           protocol=
      \                     N/A\n                              \"application/pkcs7-signature\"\n
      \  application/octet-stream   N/A                            p7m, p7s,\n                                                             p7c,
      p7z\n"
    title: 3.10.  Identifying an S/MIME Message
  title: 3.  Creating S/MIME Messages
- contents:
  - "4.  Certificate Processing\n   A receiving agent MUST provide some certificate
    retrieval mechanism\n   in order to gain access to certificates for recipients
    of digital\n   envelopes.  This specification does not cover how S/MIME agents\n
    \  handle certificates -- only what they do after a certificate has been\n   validated
    or rejected.  S/MIME certificate issues are covered in\n   [RFC5750].\n   At a
    minimum, for initial S/MIME deployment, a user agent could\n   automatically generate
    a message to an intended recipient requesting\n   that recipient's certificate
    in a signed return message.  Receiving\n   and sending agents SHOULD also provide
    a mechanism to allow a user to\n   \"store and protect\" certificates for correspondents
    in such a way as\n   to guarantee their later retrieval.\n"
  - contents:
    - "4.1.  Key Pair Generation\n   All key pairs MUST be generated from a good source
      of\n   non-deterministic random input [RFC4086], and the private key MUST be\n
      \  protected in a secure fashion.\n   An S/MIME user agent MUST NOT generate
      asymmetric keys less than\n   2048 bits for use with an RSA signature algorithm.\n
      \  For 2048-bit through 4096-bit RSA with SHA-256, see [RFC5754] and\n   [FIPS186-4].
      \ The first reference provides the signature algorithm's\n   OID, and the second
      provides the signature algorithm's definition.\n   For RSASSA-PSS with SHA-256,
      see [RFC4056].  For RSAES-OAEP, see\n   [RFC3560].\n"
    title: 4.1.  Key Pair Generation
  - contents:
    - "4.2.  Signature Generation\n   The following are the requirements for an S/MIME
      agent when\n   generating RSA and RSASSA-PSS signatures:\n           key size
      <= 2047 : SHOULD NOT (Note 2)\n   2048 <= key size <= 4096 : SHOULD     (Note
      1)\n   4096 <  key size         : MAY        (Note 1)\n   Note 1: See Security
      Considerations in Section 6.\n   Note 2: See Historical Mail Considerations
      in Appendix B.\n   Key sizes for ECDSA and EdDSA are fixed by the curve.\n"
    title: 4.2.  Signature Generation
  - contents:
    - "4.3.  Signature Verification\n   The following are the requirements for S/MIME
      receiving agents during\n   verification of RSA and RSASSA-PSS signatures:\n
      \          key size <= 2047 : SHOULD NOT (Note 2)\n   2048 <= key size <= 4096
      : MUST       (Note 1)\n   4096 <  key size         : MAY        (Note 1)\n   Note
      1: See Security Considerations in Section 6.\n   Note 2: See Historical Mail
      Considerations in Appendix B.\n   Key sizes for ECDSA and EdDSA are fixed by
      the curve.\n"
    title: 4.3.  Signature Verification
  - contents:
    - "4.4.  Encryption\n   The following are the requirements for an S/MIME agent
      when\n   establishing keys for content encryption using the RSA and RSA-OAEP\n
      \  algorithms:\n           key size <= 2047 : SHOULD NOT (Note 2)\n   2048 <=
      key size <= 4096 : SHOULD     (Note 1)\n   4096 <  key size         : MAY        (Note
      1)\n   Note 1: See Security Considerations in Section 6.\n   Note 2: See Historical
      Mail Considerations in Appendix B.\n   Key sizes for ECDH are fixed by the curve.\n"
    title: 4.4.  Encryption
  - contents:
    - "4.5.  Decryption\n   The following are the requirements for an S/MIME agent
      when\n   establishing keys for content decryption using the RSA and RSAES-OAEP\n
      \  algorithms:\n           key size <= 2047 : MAY        (Note 2)\n   2048 <=
      key size <= 4096 : MUST       (Note 1)\n   4096 <  key size         : MAY        (Note
      1)\n   Note 1: See Security Considerations in Section 6.\n   Note 2: See Historical
      Mail Considerations in Appendix B.\n   Key sizes for ECDH are fixed by the curve.\n"
    title: 4.5.  Decryption
  title: 4.  Certificate Processing
- contents:
  - "5.  IANA Considerations\n   This section (1) updates the media type registrations
    for\n   application/pkcs7-mime and application/pkcs7-signature to refer to\n   this
    document as opposed to RFC 5751, (2) adds authEnveloped-data to\n   the list of
    values for smime-type, and (3) updates references from\n   RFC 5751 to this document
    in general.\n   Note that other documents can define additional media types for\n
    \  S/MIME.\n"
  - contents:
    - "5.1.  Media Type for application/pkcs7-mime\n   Type name: application\n   Subtype
      Name: pkcs7-mime\n   Required Parameters: NONE\n   Optional Parameters: smime-type\n
      \                       name\n   Encoding Considerations: See Section 3 of this
      document\n   Security Considerations: See Section 6 of this document\n   Interoperability
      Considerations: See Sections 1-6 of this document\n   Published Specification:
      RFC 2311, RFC 2633, RFC 5751,\n                            and this document\n
      \  Applications that use this media type: Security applications\n   Fragment
      identifier considerations: N/A\n   Additional information:\n       Deprecated
      alias names for this type: N/A\n       Magic number(s): N/A\n       File extensions(s):
      See Section 3.2.1 of this document\n       Macintosh file type code(s): N/A\n
      \  Person & email address to contact for further information:\n      The IESG
      <iesg@ietf.org>\n   Intended usage: COMMON\n   Restrictions on usage: NONE\n
      \  Author: Sean Turner\n   Change Controller: LAMPS working group delegated
      from the IESG\n"
    title: 5.1.  Media Type for application/pkcs7-mime
  - contents:
    - "5.2.  Media Type for application/pkcs7-signature\n   Type name: application\n
      \  Subtype Name: pkcs7-signature\n   Required Parameters: N/A\n   Optional Parameters:
      N/A\n   Encoding Considerations: See Section 3 of this document\n   Security
      Considerations: See Section 6 of this document\n   Interoperability Considerations:
      See Sections 1-6 of this document\n   Published Specification: RFC 2311, RFC
      2633, RFC 5751,\n                            and this document\n   Applications
      that use this media type: Security applications\n   Fragment identifier considerations:
      N/A\n   Additional information:\n       Deprecated alias names for this type:
      N/A\n       Magic number(s): N/A\n       File extensions(s): See Section 3.2.1
      of this document\n       Macintosh file type code(s): N/A\n   Person & email
      address to contact for further information:\n      The IESG <iesg@ietf.org>\n
      \  Intended usage: COMMON\n   Restrictions on usage: N/A\n   Author: Sean Turner\n
      \  Change Controller: LAMPS working group delegated from the IESG\n"
    title: 5.2.  Media Type for application/pkcs7-signature
  - contents:
    - "5.3.  authEnveloped-data smime-type\n   IANA has registered the following value
      in the \"Parameter Values for\n   the smime-type Parameter\" registry.\n      smime-type
      value: authEnveloped-data\n      Reference: RFC 8551, Section 3.2.2\n"
    title: 5.3.  authEnveloped-data smime-type
  - contents:
    - "5.4.  Reference Updates\n   IANA is to update all references to RFC 5751 to
      this document.  Known\n   registries to be updated are \"CoAP Content-Formats\"
      and \"media-\n   types\".\n"
    title: 5.4.  Reference Updates
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   Cryptographic algorithms will be broken or weakened
    over time.\n   Implementers and users need to check that the cryptographic\n   algorithms
    listed in this document continue to provide the expected\n   level of security.
    \ The IETF from time to time may issue documents\n   dealing with the current
    state of the art.  For example:\n   -  The Million Message Attack described in
    RFC 3218 [RFC3218].\n   -  The Diffie-Hellman \"small-subgroup\" attacks described
    in RFC 2785\n      [RFC2785].\n   -  The attacks against hash algorithms described
    in RFC 4270\n      [RFC4270].\n   This specification uses Public-Key Cryptography
    technologies.  It is\n   assumed that the private key is protected to ensure that
    it is not\n   accessed or altered by unauthorized parties.\n   It is impossible
    for most people or software to estimate the value of\n   a message's content.
    \ Further, it is impossible for most people or\n   software to estimate the actual
    cost of recovering an encrypted\n   message's content that is encrypted with a
    key of a particular size.\n   Further, it is quite difficult to determine the
    cost of a failed\n   decryption if a recipient cannot process a message's content.
    \ Thus,\n   choosing between different key sizes (or choosing whether to just
    use\n   plaintext) is also impossible for most people or software.  However,\n
    \  decisions based on these criteria are made all the time, and\n   therefore
    this specification gives a framework for using those\n   estimates in choosing
    algorithms.\n   The choice of 2048 bits as an RSA asymmetric key size in this\n
    \  specification is based on the desire to provide at least 100 bits of\n   security.
    \ The key sizes that must be supported to conform to this\n   specification seem
    appropriate for the Internet, based on [RFC3766].\n   Of course, there are environments,
    such as financial and medical\n   systems, that may select different key sizes.
    \ For this reason, an\n   implementation MAY support key sizes beyond those recommended
    in this\n   specification.\n   Receiving agents that validate signatures and sending
    agents that\n   encrypt messages need to be cautious of cryptographic processing\n
    \  usage when validating signatures and encrypting messages using keys\n   larger
    than those mandated in this specification.  An attacker could\n   send certificates
    with keys that would result in excessive\n   cryptographic processing -- for example,
    keys larger than those\n   mandated in this specification, as such keys could
    swamp the\n   processing element.  Agents that use such keys without first\n   validating
    the certificate to a trust anchor are advised to have some\n   sort of cryptographic
    resource management system to prevent such\n   attacks.\n   Some cryptographic
    algorithms such as RC2 offer little actual\n   security over sending plaintext.
    \ Other algorithms such as TripleDES\n   provide security but are no longer considered
    to be state of the art.\n   S/MIME requires the use of current state-of-the-art
    algorithms such\n   as AES and provides the ability to announce cryptographic\n
    \  capabilities to parties with whom you communicate.  This allows the\n   sender
    to create messages that can use the strongest common\n   encryption algorithm.
    \ Using algorithms such as RC2 is never\n   recommended unless the only alternative
    is no cryptography.\n   RSA and DSA keys of less than 2048 bits are now considered
    by many\n   experts to be cryptographically insecure (due to advances in\n   computing
    power) and should no longer be used to protect messages.\n   Such keys were previously
    considered secure, so processing previously\n   received signed and encrypted
    mail will often result in the use of\n   weak keys.  Implementations that wish
    to support previous versions of\n   S/MIME or process old messages need to consider
    the security risks\n   that result from smaller key sizes (e.g., spoofed messages)
    versus\n   the costs of denial of service.  If an implementation supports\n   verification
    of digital signatures generated with RSA and DSA keys of\n   less than 1024 bits,
    it MUST warn the user.  Implementers should\n   consider providing different warnings
    for newly received messages and\n   previously stored messages.  Server implementations
    (e.g., secure\n   mail list servers) where user warnings are not appropriate SHOULD\n
    \  reject messages with weak signatures.\n   Implementers SHOULD be aware that
    multiple active key pairs can be\n   associated with a single individual.  For
    example, one key pair can\n   be used to support confidentiality, while a different
    key pair can be\n   used for digital signatures.\n   If a sending agent is sending
    the same message using different\n   strengths of cryptography, an attacker watching
    the communications\n   channel might be able to determine the contents of the
    strongly\n   encrypted message by decrypting the weakly encrypted version.  In\n
    \  other words, a sender SHOULD NOT send a copy of a message using\n   weaker
    cryptography than they would use for the original of the\n   message.\n   Modification
    of the ciphertext in EnvelopedData can go undetected if\n   authentication is
    not also used, which is the case when sending\n   EnvelopedData without wrapping
    it in SignedData or enclosing\n   SignedData within it.  This is one of the reasons
    for moving from\n   EnvelopedData to AuthEnvelopedData, as the authenticated encryption\n
    \  algorithms provide the authentication without needing the SignedData\n   layer.\n
    \  If an implementation is concerned about compliance with National\n   Institute
    of Standards and Technology (NIST) key size\n   recommendations, then see [SP800-57].\n
    \  If messaging environments make use of the fact that a message is\n   signed
    to change the behavior of message processing (examples would\n   be running rules
    or UI display hints), without first verifying that\n   the message is actually
    signed and knowing the state of the\n   signature, this can lead to incorrect
    handling of the message.\n   Visual indicators on messages may need to have the
    signature\n   validation code checked periodically if the indicator is supposed
    to\n   give information on the current status of a message.\n   Many people assume
    that the use of an authenticated encryption\n   algorithm is all that is needed
    for the sender of the message to be\n   authenticated.  In almost all cases, this
    is not a correct statement.\n   There are a number of preconditions that need
    to hold for an\n   authenticated encryption algorithm to provide this service:\n
    \  -  The starting key must be bound to a single entity.  The use of a\n      group
    key only would allow for the statement that a message was\n      sent by one of
    the entities that held the key but will not\n      identify a specific entity.\n
    \  -  The message must have exactly one sender and one recipient.\n      Having
    more than one recipient would allow for the second\n      recipient to create
    a message that the first recipient would\n      believe is from the sender by
    stripping the second recipient from\n      the message.\n   -  A direct path needs
    to exist from the starting key to the key used\n      as the CEK.  That path needs
    to guarantee that no third party\n      could have seen the resulting CEK.  This
    means that one needs to\n      be using an algorithm that is called a \"Direct
    Encryption\" or a\n      \"Direct Key Agreement\" algorithm in other contexts.
    \ This means\n      that the starting key is (1) used directly as the CEK or (2)
    used\n      to create a secret that is then transformed into the CEK via a\n      KDF
    step.\n   S/MIME implementations almost universally use ephemeral-static rather\n
    \  than static-static key agreement and do not use a shared secret for\n   encryption.
    \ This means that the first precondition is not met.\n   [RFC6278] defines how
    to use static-static key agreement with CMS, so\n   the first precondition can
    be met.  Currently, all S/MIME key\n   agreement methods derive a key-encryption
    key (KEK) and wrap a CEK.\n   This violates the third precondition above.  New
    key agreement\n   algorithms that directly created the CEK without creating an\n
    \  intervening KEK would need to be defined.\n   Even when all of the preconditions
    are met and origination of a\n   message is established by the use of an authenticated
    encryption\n   algorithm, users need to be aware that there is no way to prove
    this\n   to a third party.  This is because either of the parties can\n   successfully
    create the message (or just alter the content) based on\n   the fact that the
    CEK is going to be known to both parties.  Thus,\n   the origination is always
    built on a presumption that \"I did not send\n   this message to myself.\"\n   All
    of the authenticated encryption algorithms in this document use\n   counter mode
    for the encryption portion of the algorithm.  This means\n   that the length of
    the plaintext will always be known, as the\n   ciphertext length and the plaintext
    length are always the same.  This\n   information can enable passive observers
    to infer information based\n   solely on the length of the message.  Applications
    for which this is\n   a concern need to provide some type of padding so that the
    length of\n   the message does not provide this information.\n   When compression
    is used with encryption, it has the potential to\n   provide an additional layer
    of security.  However, care needs to be\n   taken when designing a protocol that
    relies on using compression, so\n   as not to create a compression oracle.  Compression
    oracle attacks\n   require an adaptive input to the process and attack the unknown\n
    \  content of a message based on the length of the compressed output.\n   This
    means that no attack on the encryption key is necessarily\n   required.\n   A
    recent paper on S/MIME and OpenPGP email security [Efail] has\n   pointed out
    a number of problems with the current S/MIME\n   specifications and how people
    have implemented mail clients.  Due to\n   the nature of how CBC mode operates,
    the modes allow for malleability\n   of plaintexts.  This malleability allows
    for attackers to make\n   changes in the ciphertext and, if parts of the plaintext
    are known,\n   create arbitrary blocks of plaintext.  These changes can be made\n
    \  without the weak integrity check in CBC mode being triggered.  This\n   type
    of attack can be prevented by the use of an Authenticated\n   Encryption with
    Associated Data (AEAD) algorithm with a more robust\n   integrity check on the
    decryption process.  It is therefore\n   recommended that mail systems migrate
    to using AES-GCM as quickly as\n   possible and that the decrypted content not
    be acted on prior to\n   finishing the integrity check.\n   The other attack that
    is highlighted in [Efail] is due to an error in\n   how mail clients deal with
    HTML and multipart/mixed messages.\n   Clients MUST require that a text/html content
    type be a complete HTML\n   document (per [RFC1866]).  Clients SHOULD treat each
    of the different\n   pieces of the multipart/mixed construct as being of different\n
    \  origins.  Clients MUST treat each encrypted or signed piece of a MIME\n   message
    as being of different origins both from unprotected content\n   and from each
    other.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Reference Conventions\n   [ASN.1] refers to [X.680], [X.681], [X.682],
      and [X.683].\n   [CMS] refers to [RFC5083] and [RFC5652].\n   [ESS] refers to
      [RFC2634] and [RFC5035].\n   [MIME-SPEC] refers to [RFC2045], [RFC2046], [RFC2047],
      [RFC2049],\n   [RFC6838], and [RFC4289].\n   [SMIMEv2] refers to [RFC2311],
      [RFC2312], [RFC2313], [RFC2314], and\n   [RFC2315].\n   [SMIMEv3] refers to
      [RFC2630], [RFC2631], [RFC2632], [RFC2633],\n   [RFC2634], and [RFC5035].\n
      \  [SMIMEv3.1] refers to [RFC2634], [RFC5035], [RFC5652], [RFC5750], and\n   [RFC5751].\n
      \  [SMIMEv3.2] refers to [RFC2634], [RFC3850], [RFC3851], [RFC3852], and\n   [RFC5035].\n
      \  [SMIMEv4] refers to [RFC2634], [RFC5035], [RFC5652], [RFC8550], and\n   this
      document.\n"
    title: 7.1.  Reference Conventions
  - contents:
    - "7.2.  Normative References\n   [CHARSETS] IANA, \"Character sets assigned by
      IANA\",\n              <http://www.iana.org/assignments/character-sets>.\n   [FIPS186-4]\n
      \             National Institute of Standards and Technology (NIST),\n              \"Digital
      Signature Standard (DSS)\", Federal Information\n              Processing Standards
      Publication 186-4,\n              DOI 10.6028/NIST.FIPS.186-4, July 2013,\n
      \             <https://nvlpubs.nist.gov/nistpubs/fips/\n              nist.fips.186-4.pdf>.\n
      \  [RFC1847]  Galvin, J., Murphy, S., Crocker, S., and N. Freed,\n              \"Security
      Multiparts for MIME: Multipart/Signed and\n              Multipart/Encrypted\",
      RFC 1847, DOI 10.17487/RFC1847,\n              October 1995, <https://www.rfc-editor.org/info/rfc1847>.\n
      \  [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part One: Format of Internet Message\n              Bodies\", RFC 2045,
      DOI 10.17487/RFC2045, November 1996,\n              <https://www.rfc-editor.org/info/rfc2045>.\n
      \  [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part Two: Media Types\", RFC 2046,\n              DOI 10.17487/RFC2046,
      November 1996,\n              <https://www.rfc-editor.org/info/rfc2046>.\n   [RFC2047]
      \ Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n              Part
      Three: Message Header Extensions for Non-ASCII Text\",\n              RFC 2047,
      DOI 10.17487/RFC2047, November 1996,\n              <https://www.rfc-editor.org/info/rfc2047>.\n
      \  [RFC2049]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part Five: Conformance Criteria and\n              Examples\", RFC 2049,
      DOI 10.17487/RFC2049, November 1996,\n              <https://www.rfc-editor.org/info/rfc2049>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2183]  Troost,
      R., Dorner, S., and K. Moore, Ed., \"Communicating\n              Presentation
      Information in Internet Messages: The\n              Content-Disposition Header
      Field\", RFC 2183,\n              DOI 10.17487/RFC2183, August 1997,\n              <https://www.rfc-editor.org/info/rfc2183>.\n
      \  [RFC2634]  Hoffman, P., Ed., \"Enhanced Security Services for S/MIME\",\n
      \             RFC 2634, DOI 10.17487/RFC2634, June 1999,\n              <https://www.rfc-editor.org/info/rfc2634>.\n
      \  [RFC3274]  Gutmann, P., \"Compressed Data Content Type for\n              Cryptographic
      Message Syntax (CMS)\", RFC 3274,\n              DOI 10.17487/RFC3274, June
      2002,\n              <https://www.rfc-editor.org/info/rfc3274>.\n   [RFC3370]
      \ Housley, R., \"Cryptographic Message Syntax (CMS)\n              Algorithms\",
      RFC 3370, DOI 10.17487/RFC3370, August 2002,\n              <https://www.rfc-editor.org/info/rfc3370>.\n
      \  [RFC3560]  Housley, R., \"Use of the RSAES-OAEP Key Transport\n              Algorithm
      in Cryptographic Message Syntax (CMS)\",\n              RFC 3560, DOI 10.17487/RFC3560,
      July 2003,\n              <https://www.rfc-editor.org/info/rfc3560>.\n   [RFC3565]
      \ Schaad, J., \"Use of the Advanced Encryption Standard (AES)\n              Encryption
      Algorithm in Cryptographic Message Syntax\n              (CMS)\", RFC 3565,
      DOI 10.17487/RFC3565, July 2003,\n              <https://www.rfc-editor.org/info/rfc3565>.\n
      \  [RFC4289]  Freed, N. and J. Klensin, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part Four: Registration Procedures\",\n              BCP 13, RFC 4289,
      DOI 10.17487/RFC4289, December 2005,\n              <https://www.rfc-editor.org/info/rfc4289>.\n
      \  [RFC4056]  Schaad, J., \"Use of the RSASSA-PSS Signature Algorithm in\n              Cryptographic
      Message Syntax (CMS)\", RFC 4056,\n              DOI 10.17487/RFC4056, June
      2005,\n              <https://www.rfc-editor.org/info/rfc4056>.\n   [RFC4086]
      \ Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness
      Requirements for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086,
      June 2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC5083]
      \ Housley, R., \"Cryptographic Message Syntax (CMS)\n              Authenticated-Enveloped-Data
      Content Type\", RFC 5083,\n              DOI 10.17487/RFC5083, November 2007,\n
      \             <https://www.rfc-editor.org/info/rfc5083>.\n   [RFC5084]  Housley,
      R., \"Using AES-CCM and AES-GCM Authenticated\n              Encryption in the
      Cryptographic Message Syntax (CMS)\",\n              RFC 5084, DOI 10.17487/RFC5084,
      November 2007,\n              <https://www.rfc-editor.org/info/rfc5084>.\n   [RFC5652]
      \ Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC
      5652, DOI 10.17487/RFC5652, September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n
      \  [RFC5753]  Turner, S. and D. Brown, \"Use of Elliptic Curve\n              Cryptography
      (ECC) Algorithms in Cryptographic Message\n              Syntax (CMS)\", RFC
      5753, DOI 10.17487/RFC5753,\n              January 2010, <https://www.rfc-editor.org/info/rfc5753>.\n
      \  [RFC5754]  Turner, S., \"Using SHA2 Algorithms with Cryptographic\n              Message
      Syntax\", RFC 5754, DOI 10.17487/RFC5754,\n              January 2010, <https://www.rfc-editor.org/info/rfc5754>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8418]  Housley, R., \"Use
      of the Elliptic Curve Diffie-Hellman Key\n              Agreement Algorithm
      with X25519 and X448 in the\n              Cryptographic Message Syntax (CMS)\",
      RFC 8418,\n              DOI 10.17487/RFC8418, August 2018,\n              <https://www.rfc-editor.org/info/rfc8418>.\n
      \  [RFC8419]  Housley, R., \"Use of Edwards-Curve Digital Signature\n              Algorithm
      (EdDSA) Signatures in the Cryptographic Message\n              Syntax (CMS)\",
      RFC 8419, DOI 10.17487/RFC8419,\n              August 2018, <https://www.rfc-editor.org/info/rfc8419>.\n
      \  [RFC8550]  Schaad, J., Ramsdell, B., and S. Turner,\n              \"Secure/Multipurpose
      Internet Mail Extensions (S/MIME)\n              Version 4.0 Certificate Handling\",
      RFC 8550,\n              DOI 10.17487/RFC8550, April 2019,\n              <https://www.rfc-editor.org/info/rfc8550>.\n
      \  [X.680]    \"Information Technology - Abstract Syntax Notation One\n              (ASN.1):
      Specification of basic notation\", ITU-T\n              Recommendation X.680,
      ISO/IEC 8824-1:2015, August 2015,\n              <https://www.itu.int/rec/T-REC-X.680>.\n
      \  [X.681]    \"Information Technology - Abstract Syntax Notation One\n              (ASN.1):
      Information object specification\", ITU-T\n              Recommendation X.681,
      ISO/IEC 8824-2:2015, August 2015,\n              <https://www.itu.int/rec/T-REC-X.681>.\n
      \  [X.682]    \"Information Technology - Abstract Syntax Notation One\n              (ASN.1):
      Constraint specification\", ITU-T\n              Recommendation X.682, ISO/IEC
      8824-3:2015, August 2015,\n              <https://www.itu.int/rec/T-REC-X.682>.\n
      \  [X.683]    \"Information Technology - Abstract Syntax Notation One\n              (ASN.1):
      Parameterization of ASN.1 specifications\", ITU-T\n              Recommendation
      X.683, ISO/IEC 8824-4:2015, August 2015,\n              <https://www.itu.int/rec/T-REC-X.683>.\n
      \  [X.690]    \"Information Technology - ASN.1 encoding rules:\n              Specification
      of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)
      and Distinguished Encoding Rules\n              (DER)\", ITU-T Recommendation
      X.690, ISO/IEC 8825-1:2015,\n              August 2015, <https://www.itu.int/rec/T-REC-X.690>.\n"
    title: 7.2.  Normative References
  - contents:
    - "7.3.  Informative References\n   [Efail]    Poddebniak, D., Dresen, C., Muller,
      J., Ising, F.,\n              Schinzel, S., Friedberger, S., Somorovsky, J.,
      and J.\n              Schwenk, \"Efail: Breaking S/MIME and OpenPGP Email\n
      \             Encryption using Exfiltration Channels\",\n              UsenixSecurity
      2018, August 2018,\n              <https://www.usenix.org/system/files/conference/\n
      \             usenixsecurity18/sec18-poddebniak.pdf>.\n   [FIPS186-2]\n              National
      Institute of Standards and Technology (NIST),\n              \"Digital Signature
      Standard (DSS) (also with Change\n              Notice 1)\", Federal Information
      Processing Standards\n              Publication 186-2, January 2000,\n              <https://csrc.nist.gov/publications/detail/fips/186/2/\n
      \             archive/2000-01-27>.\n   [RFC1866]  Berners-Lee, T. and D. Connolly,
      \"Hypertext Markup\n              Language - 2.0\", RFC 1866, DOI 10.17487/RFC1866,\n
      \             November 1995, <https://www.rfc-editor.org/info/rfc1866>.\n   [RFC2268]
      \ Rivest, R., \"A Description of the RC2(r) Encryption\n              Algorithm\",
      RFC 2268, DOI 10.17487/RFC2268, March 1998,\n              <https://www.rfc-editor.org/info/rfc2268>.\n
      \  [RFC2311]  Dusse, S., Hoffman, P., Ramsdell, B., Lundblade, L., and\n              L.
      Repka, \"S/MIME Version 2 Message Specification\",\n              RFC 2311,
      DOI 10.17487/RFC2311, March 1998,\n              <https://www.rfc-editor.org/info/rfc2311>.\n
      \  [RFC2312]  Dusse, S., Hoffman, P., Ramsdell, B., and J. Weinstein,\n              \"S/MIME
      Version 2 Certificate Handling\", RFC 2312, DOI\n              10.17487/RFC2312,
      March 1998,\n              <https://www.rfc-editor.org/info/rfc2312>.\n   [RFC2313]
      \ Kaliski, B., \"PKCS #1: RSA Encryption Version 1.5\",\n              RFC 2313,
      DOI 10.17487/RFC2313, March 1998,\n              <https://www.rfc-editor.org/info/rfc2313>.\n
      \  [RFC2314]  Kaliski, B., \"PKCS #10: Certification Request Syntax\n              Version
      1.5\", RFC 2314, DOI 10.17487/RFC2314, March 1998,\n              <https://www.rfc-editor.org/info/rfc2314>.\n
      \  [RFC2315]  Kaliski, B., \"PKCS #7: Cryptographic Message Syntax\n              Version
      1.5\", RFC 2315, DOI 10.17487/RFC2315, March 1998,\n              <https://www.rfc-editor.org/info/rfc2315>.\n
      \  [RFC2630]  Housley, R., \"Cryptographic Message Syntax\", RFC 2630,\n              DOI
      10.17487/RFC2630, June 1999,\n              <https://www.rfc-editor.org/info/rfc2630>.\n
      \  [RFC2631]  Rescorla, E., \"Diffie-Hellman Key Agreement Method\",\n              RFC
      2631, DOI 10.17487/RFC2631, June 1999,\n              <https://www.rfc-editor.org/info/rfc2631>.\n
      \  [RFC2632]  Ramsdell, B., Ed., \"S/MIME Version 3 Certificate\n              Handling\",
      RFC 2632, DOI 10.17487/RFC2632, June 1999,\n              <https://www.rfc-editor.org/info/rfc2632>.\n
      \  [RFC2633]  Ramsdell, B., Ed., \"S/MIME Version 3 Message\n              Specification\",
      RFC 2633, DOI 10.17487/RFC2633, June 1999,\n              <https://www.rfc-editor.org/info/rfc2633>.\n
      \  [RFC2785]  Zuccherato, R., \"Methods for Avoiding the \"Small-Subgroup\"\n
      \             Attacks on the Diffie-Hellman Key Agreement Method for\n              S/MIME\",
      RFC 2785, DOI 10.17487/RFC2785, March 2000,\n              <https://www.rfc-editor.org/info/rfc2785>.\n
      \  [RFC3218]  Rescorla, E., \"Preventing the Million Message Attack on\n              Cryptographic
      Message Syntax\", RFC 3218,\n              DOI 10.17487/RFC3218, January 2002,\n
      \             <https://www.rfc-editor.org/info/rfc3218>.\n   [RFC3766]  Orman,
      H. and P. Hoffman, \"Determining Strengths For\n              Public Keys Used
      For Exchanging Symmetric Keys\", BCP 86,\n              RFC 3766, DOI 10.17487/RFC3766,
      April 2004,\n              <https://www.rfc-editor.org/info/rfc3766>.\n   [RFC3850]
      \ Ramsdell, B., Ed., \"Secure/Multipurpose Internet Mail\n              Extensions
      (S/MIME) Version 3.1 Certificate Handling\",\n              RFC 3850, DOI 10.17487/RFC3850,
      July 2004,\n              <https://www.rfc-editor.org/info/rfc3850>.\n   [RFC3851]
      \ Ramsdell, B., Ed., \"Secure/Multipurpose Internet Mail\n              Extensions
      (S/MIME) Version 3.1 Message Specification\",\n              RFC 3851, DOI 10.17487/RFC3851,
      July 2004,\n              <https://www.rfc-editor.org/info/rfc3851>.\n   [RFC3852]
      \ Housley, R., \"Cryptographic Message Syntax (CMS)\",\n              RFC 3852,
      DOI 10.17487/RFC3852, July 2004,\n              <https://www.rfc-editor.org/info/rfc3852>.\n
      \  [RFC4134]  Hoffman, P., Ed., \"Examples of S/MIME Messages\", RFC 4134,\n
      \             DOI 10.17487/RFC4134, July 2005,\n              <https://www.rfc-editor.org/info/rfc4134>.\n
      \  [RFC4270]  Hoffman, P. and B. Schneier, \"Attacks on Cryptographic\n              Hashes
      in Internet Protocols\", RFC 4270,\n              DOI 10.17487/RFC4270, November
      2005,\n              <https://www.rfc-editor.org/info/rfc4270>.\n   [RFC4949]
      \ Shirey, R., \"Internet Security Glossary, Version 2\",\n              FYI
      36, RFC 4949, DOI 10.17487/RFC4949, August 2007,\n              <https://www.rfc-editor.org/info/rfc4949>.\n
      \  [RFC5035]  Schaad, J., \"Enhanced Security Services (ESS) Update:\n              Adding
      CertID Algorithm Agility\", RFC 5035, DOI\n              10.17487/RFC5035, August
      2007,\n              <https://www.rfc-editor.org/info/rfc5035>.\n   [RFC5750]
      \ Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n              Mail
      Extensions (S/MIME) Version 3.2 Certificate\n              Handling\", RFC 5750,
      DOI 10.17487/RFC5750, January 2010,\n              <https://www.rfc-editor.org/info/rfc5750>.\n
      \  [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n              Mail
      Extensions (S/MIME) Version 3.2 Message\n              Specification\", RFC
      5751, DOI 10.17487/RFC5751,\n              January 2010, <https://www.rfc-editor.org/info/rfc5751>.\n
      \  [RFC6151]  Turner, S. and L. Chen, \"Updated Security Considerations\n              for
      the MD5 Message-Digest and the HMAC-MD5 Algorithms\",\n              RFC 6151,
      DOI 10.17487/RFC6151, March 2011,\n              <https://www.rfc-editor.org/info/rfc6151>.\n
      \  [RFC6194]  Polk, T., Chen, L., Turner, S., and P. Hoffman, \"Security\n              Considerations
      for the SHA-0 and SHA-1 Message-Digest\n              Algorithms\", RFC 6194,
      DOI 10.17487/RFC6194, March 2011,\n              <https://www.rfc-editor.org/info/rfc6194>.\n
      \  [RFC6268]  Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n              for
      the Cryptographic Message Syntax (CMS) and the Public\n              Key Infrastructure
      Using X.509 (PKIX)\", RFC 6268,\n              DOI 10.17487/RFC6268, July 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6268>.\n   [RFC6278]  Herzog,
      J. and R. Khazan, \"Use of Static-Static Elliptic\n              Curve Diffie-Hellman
      Key Agreement in Cryptographic\n              Message Syntax\", RFC 6278, DOI
      10.17487/RFC6278,\n              June 2011, <https://www.rfc-editor.org/info/rfc6278>.\n
      \  [RFC7114]  Leiba, B., \"Creation of a Registry for smime-type\n              Parameter
      Values\", RFC 7114, DOI 10.17487/RFC7114,\n              January 2014, <https://www.rfc-editor.org/info/rfc7114>.\n
      \  [RFC7905]  Langley, A., Chang, W., Mavrogiannopoulos, N.,\n              Strombergson,
      J., and S. Josefsson, \"ChaCha20-Poly1305\n              Cipher Suites for Transport
      Layer Security (TLS)\",\n              RFC 7905, DOI 10.17487/RFC7905, June
      2016,\n              <https://www.rfc-editor.org/info/rfc7905>.\n   [SP800-56A]\n
      \             National Institute of Standards and Technology (NIST),\n              \"Recommendation
      for Pair-Wise Key Establishment Schemes\n              Using Discrete Logarithm
      Cryptography\", NIST Special\n              Publication 800-56A Revision 2,\n
      \             DOI 10.6028/NIST.SP.800-56Ar2, May 2013,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n
      \             NIST.SP.800-56Ar2.pdf>.\n   [SP800-57] National Institute of Standards
      and Technology (NIST),\n              \"Recommendation for Key Management -
      Part 1: General\",\n              NIST Special Publication 800-57 Revision 4,\n
      \             DOI 10.6028/NIST.SP.800-57pt1r4, January 2016,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n
      \             NIST.SP.800-57pt1r4.pdf>.\n   [TripleDES]\n              Tuchman,
      W., \"Hellman Presents No Shortcut Solutions to\n              the DES\", IEEE
      Spectrum v. 16, n. 7, pp. 40-41,\n              DOI 10.1109/MSPEC.1979.6368160,
      July 1979.\n"
    title: 7.3.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  ASN.1 Module\n   Note: The ASN.1 module contained herein is unchanged
    from RFC 5751\n   [SMIMEv2] and RFC 3851 [SMIMEv3.1], with the exception of a
    change to\n   the preferBinaryInside ASN.1 comment in RFC 3851 [SMIMEv3.1].  If
    a\n   module is needed that is compatible with current ASN.1 standards, one\n
    \  can be found in [RFC6268].  This module uses the 1988 version\n   of ASN.1.\n
    \  SecureMimeMessageV3dot1\n     { iso(1) member-body(2) us(840) rsadsi(113549)\n
    \           pkcs(1) pkcs-9(9) smime(16) modules(0) msg-v3dot1(21) }\n   DEFINITIONS
    IMPLICIT TAGS ::=\n   BEGIN\n   IMPORTS\n   -- Cryptographic Message Syntax [CMS]\n
    \     SubjectKeyIdentifier, IssuerAndSerialNumber,\n      RecipientKeyIdentifier\n
    \         FROM  CryptographicMessageSyntax\n                { iso(1) member-body(2)
    us(840) rsadsi(113549)\n                  pkcs(1) pkcs-9(9) smime(16) modules(0)
    cms-2001(14) };\n   -- id-aa is the arc with all new authenticated and unauthenticated\n
    \  -- attributes produced by the S/MIME Working Group.\n   id-aa OBJECT IDENTIFIER
    ::= {iso(1) member-body(2) usa(840)\n           rsadsi(113549) pkcs(1) pkcs-9(9)
    smime(16) attributes(2)}\n   -- S/MIME Capabilities provides a method of broadcasting
    the\n   -- symmetric capabilities understood.  Algorithms SHOULD be ordered\n
    \  -- by preference and grouped by type.\n   smimeCapabilities OBJECT IDENTIFIER
    ::= {iso(1) member-body(2)\n           us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
    15}\n   SMIMECapability ::= SEQUENCE {\n      capabilityID OBJECT IDENTIFIER,\n
    \     parameters ANY DEFINED BY capabilityID OPTIONAL }\n   SMIMECapabilities
    ::= SEQUENCE OF SMIMECapability\n   -- Encryption Key Preference provides a method
    of broadcasting the\n   -- preferred encryption certificate.\n   id-aa-encrypKeyPref
    OBJECT IDENTIFIER ::= {id-aa 11}\n   SMIMEEncryptionKeyPreference ::= CHOICE {\n
    \     issuerAndSerialNumber   [0] IssuerAndSerialNumber,\n      receipentKeyId
    \         [1] RecipientKeyIdentifier,\n      subjectAltKeyIdentifier [2] SubjectKeyIdentifier\n
    \  }\n   -- \"receipentKeyId\" is spelled incorrectly but is kept for\n   -- historical
    reasons.\n   id-smime OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n
    \          rsadsi(113549) pkcs(1) pkcs-9(9) 16 }\n   id-cap  OBJECT IDENTIFIER
    ::= { id-smime 11 }\n   -- The preferBinaryInside OID indicates an ability to
    receive\n   -- messages with binary encoding inside the CMS wrapper.\n   -- The
    preferBinaryInside attribute's value field is ABSENT.\n   id-cap-preferBinaryInside
    \ OBJECT IDENTIFIER ::= { id-cap 1 }\n   -- The following is a list of OIDs to
    be used with S/MIME v3.\n   -- Signature Algorithms Not Found in [RFC3370], [RFC5754],
    [RFC4056],\n   -- and [RFC3560]\n   --\n   -- md2WithRSAEncryption OBJECT IDENTIFIER
    ::=\n   --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)\n
    \  --     2}\n   --\n   -- Other Signed Attributes\n   --\n   -- signingTime OBJECT
    IDENTIFIER ::=\n   --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
    pkcs-9(9)\n   --     5}\n   --    See [CMS] for a description of how to encode
    the attribute\n   --    value.\n   SMIMECapabilitiesParametersForRC2CBC ::= INTEGER\n
    \  --        (RC2 Key Length (number of bits))\n   END\n"
  title: Appendix A.  ASN.1 Module
- contents:
  - "Appendix B.  Historic Mail Considerations\n   Over the course of updating the
    S/MIME specifications, the set of\n   recommended algorithms has been modified
    each time the documents have\n   been updated.  This means that if a user has
    historic emails and\n   their user agent has been updated to only support the
    current set of\n   recommended algorithms, some of those old emails will no longer
    be\n   accessible.  It is strongly suggested that user agents implement some\n
    \  of the following algorithms for dealing with historic emails.\n   This appendix
    contains a number of references to documents that have\n   been obsoleted or replaced.
    \ This is intentional, as the updated\n   documents often do not have the same
    information in them.\n"
  - contents:
    - "B.1.  DigestAlgorithmIdentifier\n   The following algorithms have been called
      out for some level of\n   support by previous S/MIME specifications:\n   -  SHA-1
      was dropped in [SMIMEv4].  SHA-1 is no longer considered to\n      be secure,
      as it is no longer collision resistant.  The IETF\n      statement on SHA-1
      can be found in [RFC6194], but it is out of\n      date relative to the most
      recent advances.\n   -  MD5 was dropped in [SMIMEv4].  MD5 is no longer considered
      to be\n      secure, as it is no longer collision resistant.  Details can be\n
      \     found in [RFC6151].\n"
    title: B.1.  DigestAlgorithmIdentifier
  - contents:
    - "B.2.  Signature Algorithms\n   There are a number of problems with validating
      signatures on\n   sufficiently historic messages.  For this reason, it is strongly\n
      \  suggested that user agents treat these signatures differently from\n   those
      on current messages.  These problems include the following:\n   -  Certification
      authorities are not required to keep certificates on\n      a CRL beyond one
      update after a certificate has expired.  This\n      means that unless CRLs
      are cached as part of the message it is not\n      always possible to check
      to see if a certificate has been revoked.\n      The same problems exist with
      Online Certificate Status Protocol\n      (OCSP) responses, as they may be based
      on a CRL rather than on the\n      certificate database.\n   -  RSA and DSA
      keys of less than 2048 bits are now considered by many\n      experts to be
      cryptographically insecure (due to advances in\n      computing power).  Such
      keys were previously considered secure, so\n      the processing of historic
      signed messages will often result in\n      the use of weak keys.  Implementations
      that wish to support\n      previous versions of S/MIME or process old messages
      need to\n      consider the security risks that result from smaller key sizes\n
      \     (e.g., spoofed messages) versus the costs of denial of service.\n      [SMIMEv3.1]
      set the lower limit on suggested key sizes for\n      creating and validation
      at 1024 bits.  Prior to that, the lower\n      bound on key sizes was 512 bits.\n
      \  -  Hash functions used to validate signatures on historic messages\n      may
      no longer be considered to be secure (see below).  While there\n      are not
      currently any known practical pre-image or second\n      pre-image attacks against
      MD5 or SHA-1, the fact that they are no\n      longer considered to be collision
      resistant implies that the\n      security levels of the signatures are generally
      considered\n      suspect.  If a message is known to be historic and it has
      been in\n      the possession of the client for some time, then it might still
      be\n      considered to be secure.\n   -  The previous two issues apply to the
      certificates used to validate\n      the binding of the public key to the identity
      that signed the\n      message as well.\n   The following algorithms have been
      called out for some level of\n   support by previous S/MIME specifications:\n
      \  -  RSA with MD5 was dropped in [SMIMEv4].  MD5 is no longer\n      considered
      to be secure, as it is no longer collision resistant.\n      Details can be
      found in [RFC6151].\n   -  RSA and DSA with SHA-1 were dropped in [SMIMEv4].
      \ SHA-1 is no\n      longer considered to be secure, as it is no longer collision\n
      \     resistant.  The IETF statement on SHA-1 can be found in [RFC6194],\n      but
      it is out of date relative to the most recent advances.\n   -  DSA with SHA-256
      was dropped in [SMIMEv4].  DSA has been replaced\n      by elliptic curve versions.\n
      \  As requirements for \"mandatory to implement\" have changed over time,\n
      \  some issues have been created that can cause interoperability\n   problems:\n
      \  -  S/MIME v2 clients are only required to verify digital signatures\n      using
      the rsaEncryption algorithm with SHA-1 or MD5 and might not\n      implement
      id-dsa-with-sha1 or id-dsa at all.\n   -  S/MIME v3 clients might only implement
      signing or signature\n      verification using id-dsa-with-sha1 and might also
      use id-dsa as\n      an AlgorithmIdentifier in this field.\n   -  Note that
      S/MIME v3.1 clients support verifying id-dsa-with-sha1\n      and rsaEncryption
      and might not implement sha256WithRSAEncryption.\n   NOTE: Receiving clients
      SHOULD recognize id-dsa as equivalent to\n   id-dsa-with-sha1.\n   For 512-bit
      RSA with SHA-1, see [RFC3370] and [FIPS186-2] without\n   Change Notice 1; for
      512-bit RSA with SHA-256, see [RFC5754] and\n   [FIPS186-2] without Change Notice
      1; and for 1024-bit through\n   2048-bit RSA with SHA-256, see [RFC5754] and
      [FIPS186-2] with Change\n   Notice 1.  The first reference provides the signature
      algorithm's\n   OID, and the second provides the signature algorithm's definition.\n
      \  For 512-bit DSA with SHA-1, see [RFC3370] and [FIPS186-2] without\n   Change
      Notice 1; for 512-bit DSA with SHA-256, see [RFC5754] and\n   [FIPS186-2] without
      Change Notice 1; for 1024-bit DSA with SHA-1, see\n   [RFC3370] and [FIPS186-2]
      with Change Notice 1; and for 1024-bit and\n   above DSA with SHA-256, see [RFC5754]
      and [FIPS186-4].  The first\n   reference provides the signature algorithm's
      OID, and the second\n   provides the signature algorithm's definition.\n"
    title: B.2.  Signature Algorithms
  - contents:
    - "B.3.  ContentEncryptionAlgorithmIdentifier\n   The following algorithms have
      been called out for some level of\n   support by previous S/MIME specifications:\n
      \  -  RC2/40 [RFC2268] was dropped in [SMIMEv3.2].  The algorithm is\n      known
      to be insecure and, if supported, should only be used to\n      decrypt existing
      email.\n   -  DES EDE3 CBC [TripleDES], also known as \"tripleDES\", was dropped\n
      \     in [SMIMEv4].  This algorithm is removed from the list of\n      supported
      algorithms because (1) it has a 64-bit block size and\n      (2) it offers less
      than 128 bits of security.  This algorithm\n      should be supported only to
      decrypt existing email; it should not\n      be used to encrypt new emails.\n"
    title: B.3.  ContentEncryptionAlgorithmIdentifier
  - contents:
    - "B.4.  KeyEncryptionAlgorithmIdentifier\n   The following algorithms have been
      called out for some level of\n   support by previous S/MIME specifications:\n
      \  -  DH ephemeral-static mode, as specified in [RFC3370] and\n      [SP800-57],
      was dropped in [SMIMEv4].\n   -  RSA key sizes have been increased over time.
      \ Decrypting old mail\n      with smaller key sizes is reasonable; however,
      new mail should use\n      the updated key sizes.\n   For 1024-bit DH, see [RFC3370].
      \ For 1024-bit and larger DH, see\n   [SP800-56A]; regardless, use the KDF,
      which is from X9.42, specified\n   in [RFC3370].\n"
    title: B.4.  KeyEncryptionAlgorithmIdentifier
  title: Appendix B.  Historic Mail Considerations
- contents:
  - "Appendix C.  Moving S/MIME v2 Message Specification to Historic Status\n   The
    S/MIME v3 [SMIMEv3], v3.1 [SMIMEv3.1], and v3.2 [SMIMEv3.2]\n   specifications
    are backward compatible with the S/MIME v2 Message\n   Specification [SMIMEv2],
    with the exception of the algorithms\n   (dropped RC2/40 requirement and added
    DSA and RSASSA-PSS\n   requirements).  Therefore, RFC 2311 [SMIMEv2] was moved
    to Historic\n   status.\n"
  title: Appendix C.  Moving S/MIME v2 Message Specification to Historic Status
- contents:
  - "Acknowledgements\n   Many thanks go out to the other authors of the S/MIME version
    2\n   Message Specification RFC: Steve Dusse, Paul Hoffman, Laurence\n   Lundblade,
    and Lisa Repka.  Without v2, there wouldn't be a v3, v3.1,\n   v3.2, or v4.0.\n
    \  Some of the examples in this document were copied from [RFC4134].\n   Thanks
    go to the people who wrote and verified the examples in that\n   document.\n   A
    number of the members of the S/MIME Working Group have also worked\n   very hard
    and contributed to this document.  Any list of people is\n   doomed to omission,
    and for that I apologize.  In alphabetical order,\n   the following people stand
    out in my mind because they made direct\n   contributions to this document:\n
    \  Tony Capel, Piers Chivers, Dave Crocker, Bill Flanigan, Peter\n   Gutmann,
    Alfred Hoenes, Paul Hoffman, Russ Housley, William Ottaway,\n   and John Pawling.\n
    \  The version 4 update to the S/MIME documents was done under the\n   auspices
    of the LAMPS Working Group.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Jim Schaad\n   August Cellars\n   Email: ietf@augustcellars.com\n
    \  Blake Ramsdell\n   Brute Squad Labs, Inc.\n   Email: blaker@gmail.com\n   Sean
    Turner\n   sn3rd\n   Email: sean@sn3rd.com\n"
  title: Authors' Addresses
