This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular it defines objects for managing bridges based on the IEEE 802.1d draft standard between Local Area Network (LAN) segments.
Provisions are made for support of transparent and source route bridging.
Provisions are also made so that these objects apply to bridges connected by subnetworks other than LAN segments.
The Internet standard Network Management Framework consists of three components.
They are: RFC 1155 which defines the SMI, the mechanisms used for describing and naming objects for the purpose of management.
RFC 1212 defines a more concise description mechanism, which is wholly consistent with the SMI.
RFC 1156 which defines MIB I, the core set of managed objects for the Internet suite of protocols.
RFC 1213, defines MIB II, an evolution of MIB I based on implementation experience and new operational requirements.
RFC 1157 which defines the SNMP, the protocol used for network access to managed objects.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
Objects Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1)
[7] defined in the SMI.
In particular, each object has a name, a syntax, and an encoding.
The name is an object identifier, an administratively assigned name, which specifies an object type.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the OBJECT DESCRIPTOR, to also refer to the object type.
The syntax of an object type defines the abstract data structure corresponding to that object type.
The ASN.1 language is used for this purpose.
However, the SMI [3] purposely restricts the ASN.1 constructs which may be used.
These restrictions are explicitly made for simplicity.
The encoding of an object type is simply how that object type is represented using the object type's syntax.
Implicitly tied to the notion of an object type's syntax and encoding
is how the object type is represented when being transmitted on the network.
The SMI specifies the use of the basic encoding rules of ASN.1 [8], subject to the additional requirements imposed by the SNMP.
Format of Definitions Section 5 contains the specification of all object types contained in this MIB module.
The object types are defined using the conventions defined in the SMI, as amended by the extensions specified in [9,10].
A common device present in many networks is the Bridge.
This device is used to connect Local Area Network segments below the network layer.
There are two major modes defined for this bridging; transparent and source route.
The transparent method of bridging is defined in the draft IEEE 802.1d specification [11].
Source route bridging has been defined by I.B.M. and is described in the Token Ring Architecture Reference [12].
IEEE 802.1d is currently working on combining the source route and transparent techniques in a compatible fashion.
This memo defines those objects needed for the management of a bridging entity operating in one of these modes.
To be consistent with IAB directives and good engineering practice, an explicit attempt was made to keep this MIB as simple as possible.
This was accomplished by applying the following criteria to objects proposed for inclusion:
(1)  Start with a small set of essential objects and add only as further objects are needed.
(2)  Require objects be essential for either fault or configuration management.
(3)  Consider evidence of current use and/or utility.
(4)  Limit the total of objects.
(5)  Exclude objects which are simply derivable from others in this or other MIBs.
(6)  Avoid causing critical sections to be heavily instrumented.
The guideline that was followed is one counter per critical section per layer.
Structure of MIB Objects in this MIB are arranged into groups.
Each group is organized as a set of related objects.
The overall structure and assignment of objects to their groups is shown below.
Where appropriate the corresponding IEEE 802.1d [11] management object name is also included.
AgingTime FdbTable Address Status Port
The following IEEE 802.1d management objects have not been included in the Bridge MIB for the indicated reasons.
Same as sysDescr (MIB II) Bridge.
Same as ifPhysAddress (MIB II) BridgePort.
Same as ifDescr (MIB II) BridgePort.
Combination of dot1dStpPriority and dot1dBaseBridgeAddress .TopologyChange
Since this is transitory, it is not considered useful.
Same as ifLastChange (MIB II) .PortIdentifier
Combination of dot1dStpPortNum and dot1dStpPortPriority .TopologyChangeAcknowledged
Since this is transitory, it is not considered useful.
These objects are not required as per the Pics Proforma and not considered useful.
The Source Routing Supplement, at the time of this writing, is not stable.
The following objects were NOT included in this MIB because they are redundant or not considered useful.
This mandatory group contains the objects which are applicable to all types of bridges.
This group contains the objects that denote the bridge's state with respect to the Spanning Tree Protocol.
If a node does not implemented the Spanning Tree Protocol, this group will not be implemented.
This group is applicable to any transparent only, source route, or SRT bridge which implements the Spanning Tree Protocol.
This group contains the objects that describe the entity's state with respect to source route bridging.
If source routing is not supported this group will not be implemented.
This group is applicable to source route only, and SRT bridges.
This group contains objects that describe the entity's state with respect to transparent bridging.
If transparent bridging is not supported this group will not be implemented.
This group is applicable to transparent only and SRT bridges.
This group contains objects that describe the entity's state with respect to destination address filtering.
If destination address filtering is not supported this group will not be implemented.
This group is applicable to any type of bridge which performs destination address filtering.
As described above, some IEEE 802.1d management objects have not been included in this MIB because they overlap with objects in other MIBs applicable to a bridge implementing this MIB.
In particular, it is assumed that a bridge implementing this MIB will also implement (at least)
the 'system' group and the 'interfaces' group defined in MIB  II [6].
Relationship to the 'system' group
the 'system' group is defined as being mandatory for all systems such that each managed entity contains one instance of each object in the 'system' group.
Thus, those objects apply to the entity as a whole irrespective of whether the entity's sole functionality is bridging, or whether bridging is only a subset of the entity's functionality.
Relationship to the 'interfaces' group In MIB II, the 'interfaces' group is defined as being mandatory for all systems and contains information on an entity's interfaces, where each interface is thought of as being attached to a `subnetwork'.
(Note that this term is not to be confused with `subnet' which refers to an addressing partitioning scheme used in the Internet suite of protocols.)
The term 'segment' is used in this memo to refer to such a subnetwork, whether it be an Ethernet segment, a 'ring', a WAN link, or even an X.25 virtual circuit.
Implicit in this Bridge MIB is the notion of ports on a bridge.
Each of these ports is associated with one interface of the 'interfaces' group, and in most situations, each port is associated with a different interface.
However, there are situations in which multiple ports are associated with the same interface.
An example of such a situation would be several ports each corresponding one to one with several X.25 virtual circuits but all on the same interface.
Each port is uniquely identified by a port number.
A port number has no mandatory relationship to an interface number, but in the simple case a port number will have the same value as the corresponding interface's interface number.
Port numbers are in the range (1..dot1dBaseNumPorts).
Some entities perform other functionality as well as bridging through the sending and receiving of data on their interfaces.
In such situations, only a subset of the data sent/received on an interface is within the domain of the entity's bridging functionality.
This subset is considered to be delineated according to a set of protocols, with some protocols being bridged, and other protocols not being bridged.
For example, in an entity which exclusively performed bridging, all protocols would be considered as being bridged, whereas in an entity which performed IP routing on IP datagrams and only bridged other protocols, only the non IP data would be considered as being bridged.
Thus, this Bridge MIB (and in particular, its counters) are applicable only to that subset of the data on an entity's interfaces which is sent/received for a protocol being bridged.
All such data is sent/received via the ports of the bridge.
The datatypes, MacAddress, BridgeId and Timeout, are used as textual conventions in this document.
These textual conventions have NO effect on either the syntax nor the semantics of any managed object.
Objects defined using these conventions are always encoded by means of the rules that define their primitive type.
Hence, no changes to the SMI or the SNMP are necessary to accommodate these textual conventions which are adopted merely for the convenience of readers.
IMPORTS Counter, Gauge, TimeTicks FROM RFC1155
TYPE FROM RFC 1212 TRAP TYPE FROM RFC 1215;
the "canonical" order   defined by IEEE 802.1a, i.e., as if it were transmitted least   significant bit first, even though 802.5 (in contrast to other   802.x protocols) requires MAC addresses to be transmitted most   significant bit first.
16 bit addresses, if needed, are represented by setting their   upper 4 octets to all 0's, i.e., AAFF would be represented   as 00000000AAFF.
Similarly, all representations of Bridge Id in this MIB Module   use, as a textual convention (i.e. this convention does not affect   their encoding), the data type:
Its first two octets   (in network byte order) contain a priority value and its last   6 octets contain the MAC address used to refer to a bridge in a   unique fashion (typically, the numerically smallest MAC address   of all ports on the bridge).
Several objects in this MIB module represent values of timers   used by the Spanning Tree Protocol.
In this MIB, these timers   have values in units of hundreths of a second (i.e. 1/100 secs).
These timers, when stored in a Spanning Tree Protocol's BPDU,   are in units of 1/256 seconds.
Note, however, that 802.1d/D9   specifies a settable granularity of no more than 1 second for   these timers.
To avoid ambiguity, a data type is defined here   as a textual convention and all representation of these timers   in this MIB module are defined using this data type.
An algorithm   is also defined for converting between the different units, to   ensure a timer's value is not distorted by multiple conversions.
is the value in 1/256 second units
is the value in 1/256 second units
Note: it is important that the arithmetic operations are done   in the order specified (i.e., multiply first, divide second).
the dot1dBase group   Implementation of the dot1dBase group is mandatory for all   bridges.
read only STATUS  mandatory DESCRIPTION
"The MAC address used by this bridge when it must be referred to in a unique fashion.
It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge.
However it is only required to be unique.
When concatenated with dot1dStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol."
REFERENCE "P802.1d/D9, July 14, 1989:
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"Indicates what type of bridging this bridge can perform.
If a bridge is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type."
"A table that contains generic information about every port that is associated with this bridge.
Transparent, source route, and srt ports are included."
"A list of information for each port of the bridge."
REFERENCE "P802.1d/D9, July 14, 1989:
Counter } dot1dBasePort OBJECT TYPE SYNTAX
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"The port number of the port for which this entry contains bridge management information."
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION "For a port which (potentially) has the same value of dot1dBasePortIfIndex as another port on the same bridge, this object contains the name of an object instance unique to this port.
For example, in the case where multiple ports correspond one  to one with multiple X.25 virtual circuits, this value might identify an (e.g., the first) object instance associated with the X.25 virtual circuit corresponding to this port.
For a port which has a unique value of dot1dBasePortIfIndex, this object can have the value { 0 0 }."
read only STATUS  mandatory DESCRIPTION
"The number of frames discarded by this port due to excessive transit delay through the bridge.
It is incremented by both transparent and source route bridges.
REFERENCE "P802.1d/D9, July 14, 1989:
read only STATUS  mandatory DESCRIPTION
"The number of frames discarded by this port due to an excessive size.
It is incremented by both transparent and source route bridges.
REFERENCE "P802.1d/D9, July 14, 1989:
It is   implemented by those bridges that support the Spanning Tree   Protocol.
Transparent, Source Route, and SRT bridges will   implement this group only if they support the Spanning Tree   Protocol.
INTEGER { unknown(1), decLb100(2), ieee8021d(3) } ACCESS  read only STATUS  mandatory DESCRIPTION
"An indication of what version of the Spanning Tree Protocol is being run.
The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol.
IEEE 802.1d implementations will return 'ieee8021d(3)'.
If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined."
"The value of the write able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.
The other (last) 6 octets of the Bridge ID are given by the value of dot1dBaseBridgeAddress."
read only STATUS  mandatory DESCRIPTION
"The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity."
REFERENCE "P802.1d/D9, July 14, 1989:
read only STATUS  mandatory DESCRIPTION
"The total number of topology changes detected by this bridge since the management entity was last reset or initialized."
REFERENCE "P802.1d/D9, July 14, 1989:
read only STATUS  mandatory DESCRIPTION
"The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node.
This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node."
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"The cost of the path to the root as seen from this bridge.
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"The port number of the port which offers the lowest cost path from this bridge to the root bridge.
read only STATUS  mandatory DESCRIPTION
"The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second.
This is the actual value that this bridge is currently using."
REFERENCE "P802.1d/D9, July 14, 1989: Section 4.5.3.4" ::
{ dot1dStp 8 } dot1dStpHelloTime OBJECT TYPE SYNTAX
read only STATUS  mandatory DESCRIPTION
"The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second.
This is the actual value that this bridge is currently using."
REFERENCE "P802.1d/D9, July 14, 1989:
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second."
read only STATUS  mandatory DESCRIPTION
"This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state.
The value determines how long the port stays in a particular state before moving to the next state.
For example, how long a port stays in the Listening state when moving from Blocking to Learning.
This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database.
[Note that this value is the one that this bridge is currently using, in contrast to dot1dStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]
"The value that all bridges use for MaxAge when this bridge is acting as the root.
Note that 802.1d/D9 specifies that the range for this parameter is related to the value of dot1dStpBridgeHelloTime.
The granularity of this timer is specified by 802.1d/D9 to be 1 second.
An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds."
"The value that all bridges use for HelloTime when this bridge is acting as the root.
The granularity of this timer is specified by 802.1d/D9 to be 1 second.
An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds."
REFERENCE "P802.1d/D9, July 14, 1989:
"The value that all bridges use for ForwardDelay when this bridge is acting as the root.
Note that 802.1d/D9 specifies that the range for this parameter is related to the value of dot1dStpBridgeMaxAge.
The granularity of this timer is specified by 802.1d/D9 to be 1 second.
An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds."
REFERENCE "P802.1d/D9, July 14, 1989:
The Spanning Tree Port Table dot1dStpPortTable OBJECT TYPE SYNTAX
"A list of information maintained by every port about the Spanning Tree Protocol state for that port.
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"The port number of the port for which this entry contains Spanning Tree Protocol management information.
REFERENCE "P802.1d/D9, July 14, 1989:
"The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID.
read only STATUS  mandatory DESCRIPTION
"The port's current state as defined by application of the Spanning Tree Protocol.
This state controls what action a port takes on reception of a frame.
If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state.
For ports which are disabled (see dot1dStpPortEnable), this object will have a value of disabled(1).
INTEGER { enabled(1), disabled(2) } ACCESS
"The enabled/disabled status of the port."
read only STATUS  mandatory DESCRIPTION
"The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached."
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"The path cost of the Designated Port of the segment connected to this port.
This value is compared to the Root Path Cost field in received bridge PDUs."
read only STATUS  mandatory DESCRIPTION
"The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment."
REFERENCE "P802.1d/D9, July 14, 1989:
ACCESS  read only STATUS  mandatory DESCRIPTION "
The Port Identifier of the port on the Designated Bridge for this port's segment."
read only STATUS  mandatory DESCRIPTION
"The number of times this port has transitioned from the Learning state to the Forwarding state."
It is   implemented by those bridges that support the source route
bridging mode, including Source Route and SRT bridges.
"A table that contains information about every port that is associated with this source route bridge."
dot1dSrPortSteOutFrames Counter, dot1dSrPortSegmentMismatchDiscards Counter, dot1dSrPortDuplicateSegmentDiscards Counter, dot1dSrPortHopCountExceededDiscards
Counter } dot1dSrPort OBJECT TYPE SYNTAX
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
"The segment number that uniquely identifies the segment to which this port is connected.
Current source routing protocols limit this value to the range: 0 through 4095.
A value of 65535 signifies that no segment number is assigned to this port."
"A bridge number uniquely identifies a bridge when more than one bridge is used to span the same two segments.
Current source routing protocols limit this value to the range: 0 through 15.
A value of 65535 signifies that no bridge number is assigned to this bridge."
"The segment number that corresponds to the target segment this port is considered to be connected to by the bridge.
Current source routing protocols limit this value to the range: 0 through 4095.
A value of 65535 signifies that no target segment is assigned to this port."
INTEGER { dot1dSrMtu516   (516), dot1dSrMtu1500  (1500), dot1dSrMtu2052  (2052), dot1dSrMtu4472  (4472), dot1dSrMtu8144  (8144), dot1dSrMtu11407 (11407),
ask me where it came from.
"The maximum size of the INFO field (LLC and above) that this port can send/receive.
It does not include any MAC level (framing) octets.
The value of this object is used by this bridge to determine whether a modification of the LargestFrame (LF, see [14])
field of the Routing Control field of the Routing Information Field is necessary.
Valid values as defined by the 802.5 source routing bridging specification[14] are 516, 1500, 2052, 4472, 8144, 11407, 17800, and 65535 octets.
Behavior of the port when an illegal value is written is implementation specific.
It is recommended that a reasonable legal value be chosen."
{ dot1dSrPortEntry 6 } dot1dSrPortSTESpanMode OBJECT
INTEGER { auto span(1), disabled(2), forced(3) } ACCESS  read write
"Determines how this port behaves when presented with a Spanning Tree Explorer frame.
The value 'disabled(2)' indicates that the port will not accept or send Spanning Tree Explorer packets; any STE packets received will be silently discarded.
The value 'forced(3)' indicates the port will always accept and propagate Spanning Tree Explorer frames.
This allows a manually configured Spanning Tree for this class of packet to be configured.
Note that unlike transparent bridging this is not catastrophic to the network if there are loops.
The value 'auto span(1)' can only be returned by a bridge that both implements the Spanning Tree Protocol and has use of the protocol enabled on this port.
The behavior of the port for Spanning Tree Explorer frames is determined by the state of dot1dStpPortState.
If the port is in the 'forwarding' state, the frame will be accepted or propagated.
Otherwise it will be silently discarded."
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
It is   implemented by those bridges that support the transparent   bridging mode.
A transparent or SRT bridge will implement   this group.
read only STATUS  mandatory DESCRIPTION
"The total number of Forwarding Database entries, which have been or would have been learnt, but have been discarded due to a lack of space to store them in the Forwarding Database.
If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition which has unpleasant performance effects on the subnetwork).
If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent."
REFERENCE "P802.1d/D9, July 14, 1989:
INTEGER ACCESS   read write STATUS
"The timeout period in seconds for aging out dynamically learned forwarding information."
REFERENCE "P802.1d/D9, July 14, 1989:
The Forwarding Database for Transparent Bridges
"A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information.
This information is used by the transparent bridging function in determining how to propagate a received frame."
} dot1dTpFdbEntry OBJECT TYPE SYNTAX
mandatory DESCRIPTION "Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information."
read only STATUS  mandatory DESCRIPTION
"A unicast MAC address for which the bridge has forwarding and/or filtering information."
1 } dot1dTpFdbPort OBJECT TYPE SYNTAX
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of dot1dTpFdbAddress has been seen.
A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address (e.g. in the dot1dStaticTable).
Implementors are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of dot1dTpFdbStatus is not learned(3)."
INTEGER { other(1), invalid(2), learned(3), self(4)
read only STATUS  mandatory DESCRIPTION
"The status of this entry.
This would include the case where some other MIB object (not the corresponding instance of dot1dTpFdbPort, nor an entry in the dot1dStaticTable) is being used to determine if and how frames addressed to the value of the corresponding instance of dot1dTpFdbAddress are being forwarded.
invalid(2) : this entry is not longer valid (e.g., it was learned but has since aged out), but has not yet been flushed from the table.
learned(3) : the value of the corresponding instance of dot1dTpFdbPort was learned, and is being used.
: the value of the corresponding instance of dot1dTpFdbAddress represents one of the bridge's addresses.
The corresponding instance of dot1dTpFdbPort indicates which of the bridge's ports has this address.
: the value of the corresponding instance of dot1dTpFdbAddress is also the value of an existing instance of dot1dStaticAddress."
"A list of information for each port of a transparent bridge."
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
INTEGER ACCESS  read only STATUS  mandatory DESCRIPTION
read only STATUS  mandatory DESCRIPTION
"The number of frames that have been received by this port from its segment.
Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function."
REFERENCE "P802.1d/D9, July 14, 1989:
read only STATUS  mandatory DESCRIPTION
"The number of frames that have been transmitted by this port to its segment.
Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function.
REFERENCE "P802.1d/D9, July 14, 1989:
"Count of valid frames received which were discarded (i.e., filtered) by the Forwarding Process."
REFERENCE "P802.1d/D9, July 14, 1989:
The Static (Destination Address Filtering)
Database   Implementation of this group is optional.
A table containing filtering information configured into the bridge by (local or network) management specifying the set of ports to which frames received from specific ports and containing specific destination addresses are allowed to be forwarded.
The value of zero in this table as the port number from which frames with a specific destination address are received, is used to specify all ports for which there is no specific entry in this table for that particular destination address.
Entries are valid for unicast and for group/broadcast addresses.
"Filtering information configured into the bridge by (local or network) management specifying the set of ports to which frames received from a specific port and containing a specific destination address are allowed to be forwarded."
"The destination MAC address in a frame to which this entry's filtering information applies.
This object can take the value of a unicast address, a group address or the broadcast address."
Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply.
A value of zero indicates that this entry applies on all ports of the bridge for which there is no other applicable entry."
"The set of ports to which frames received from a specific port and destined for a specific MAC address, are allowed to be forwarded.
Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc.
Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.
Thus, each port of the bridge is represented by a single bit within the value of this object.
If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.
"This object indicates the status of this entry.
other(1) this entry is currently in use but the conditions under which it will remain so are different from each of the following values.
invalid(2) writing this value to the object removes the corresponding entry.
this entry is currently in use and will remain so after the next reset of the bridge.
this entry is currently in use and will remain so until the next reset of the bridge.
this entry is currently in use and will remain so until it is aged out."
Traps for use by Bridges   Traps for the Spanning Tree Protocol newRoot TRAP
The newRoot trap indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer immediately subsequent to its election."
::  1 topologyChange TRAP TYPE ENTERPRISE  dot1dBridge DESCRIPTION "A topologyChange trap is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state.
The trap is not sent if a newRoot trap is sent for the same transition."
Security Considerations Security issues are not discussed in this memo.
