- contents:
  - '           The JSON Meta Application Protocol (JMAP) for Mail

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies a data model for synchronising email data\n
    \  with a server using the JSON Meta Application Protocol (JMAP).\n   Clients
    can use this to efficiently search, access, organise, and\n   send messages, and
    to get push notifications for fast\n   resynchronisation when new messages are
    delivered or a change is made\n   in another client.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8621.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   5\n     1.3.  Additions to the Capabilities Object  . . . . . . . . . .   5\n
    \      1.3.1.  urn:ietf:params:jmap:mail . . . . . . . . . . . . . .   5\n       1.3.2.
    \ urn:ietf:params:jmap:submission . . . . . . . . . . .   7\n       1.3.3.  urn:ietf:params:jmap:vacationresponse
    . . . . . . . .   8\n     1.4.  Data Type Support in Different Accounts . . .
    . . . . . .   8\n     1.5.  Push  . . . . . . . . . . . . . . . . . . . . . .
    . . . .   8\n       1.5.1.  Example . . . . . . . . . . . . . . . . . . . . .
    . .   9\n     1.6.  Ids . . . . . . . . . . . . . . . . . . . . . . . . . . .
    \  9\n   2.  Mailboxes . . . . . . . . . . . . . . . . . . . . . . . . . .   9\n
    \    2.1.  Mailbox/get . . . . . . . . . . . . . . . . . . . . . . .  14\n     2.2.
    \ Mailbox/changes . . . . . . . . . . . . . . . . . . . . .  14\n     2.3.  Mailbox/query
    . . . . . . . . . . . . . . . . . . . . . .  14\n     2.4.  Mailbox/queryChanges
    \ . . . . . . . . . . . . . . . . . .  15\n     2.5.  Mailbox/set . . . . . .
    . . . . . . . . . . . . . . . . .  16\n     2.6.  Example . . . . . . . . . .
    . . . . . . . . . . . . . . .  17\n   3.  Threads . . . . . . . . . . . . . .
    . . . . . . . . . . . . .  20\n     3.1.  Thread/get  . . . . . . . . . . . .
    . . . . . . . . . . .  22\n       3.1.1.  Example . . . . . . . . . . . . . .
    . . . . . . . . .  22\n     3.2.  Thread/changes  . . . . . . . . . . . . . .
    . . . . . . .  22\n   4.  Emails  . . . . . . . . . . . . . . . . . . . . . .
    . . . . .  22\n     4.1.  Properties of the Email Object  . . . . . . . . . .
    . . .  23\n       4.1.1.  Metadata  . . . . . . . . . . . . . . . . . . . . .
    .  24\n       4.1.2.  Header Fields Parsed Forms  . . . . . . . . . . . . .  26\n
    \      4.1.3.  Header Fields Properties  . . . . . . . . . . . . . .  32\n       4.1.4.
    \ Body Parts  . . . . . . . . . . . . . . . . . . . . .  35\n     4.2.  Email/get
    . . . . . . . . . . . . . . . . . . . . . . . .  42\n       4.2.1.  Example .
    . . . . . . . . . . . . . . . . . . . . . .  44\n     4.3.  Email/changes . .
    . . . . . . . . . . . . . . . . . . . .  45\n     4.4.  Email/query . . . . .
    . . . . . . . . . . . . . . . . . .  45\n       4.4.1.  Filtering . . . . . .
    . . . . . . . . . . . . . . . .  46\n       4.4.2.  Sorting . . . . . . . . .
    . . . . . . . . . . . . . .  49\n       4.4.3.  Thread Collapsing . . . . . .
    . . . . . . . . . . . .  50\n     4.5.  Email/queryChanges  . . . . . . . . .
    . . . . . . . . . .  51\n     4.6.  Email/set . . . . . . . . . . . . . . . .
    . . . . . . . .  51\n     4.7.  Email/copy  . . . . . . . . . . . . . . . . .
    . . . . . .  53\n     4.8.  Email/import  . . . . . . . . . . . . . . . . . .
    . . . .  54\n     4.9.  Email/parse . . . . . . . . . . . . . . . . . . . . .
    . .  56\n     4.10. Examples  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 58\n   5.  Search Snippets . . . . . . . . . . . . . . . . . . . . . . .  68\n
    \    5.1.  SearchSnippet/get . . . . . . . . . . . . . . . . . . . .  69\n     5.2.
    \ Example . . . . . . . . . . . . . . . . . . . . . . . . .  71\n   6.  Identities
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  72\n     6.1.  Identity/get
    \ . . . . . . . . . . . . . . . . . . . . . .  73\n     6.2.  Identity/changes
    \ . . . . . . . . . . . . . . . . . . . .  73\n     6.3.  Identity/set  . . .
    . . . . . . . . . . . . . . . . . . .  73\n     6.4.  Example . . . . . . . .
    . . . . . . . . . . . . . . . . .  73\n   7.  Email Submission  . . . . . . .
    . . . . . . . . . . . . . . .  74\n     7.1.  EmailSubmission/get . . . . . .
    . . . . . . . . . . . . .  80\n     7.2.  EmailSubmission/changes . . . . . .
    . . . . . . . . . . .  80\n     7.3.  EmailSubmission/query . . . . . . . . .
    . . . . . . . . .  80\n     7.4.  EmailSubmission/queryChanges  . . . . . . .
    . . . . . . .  81\n     7.5.  EmailSubmission/set . . . . . . . . . . . . . .
    . . . . .  81\n       7.5.1.  Example . . . . . . . . . . . . . . . . . . . .
    . . .  84\n   8.  Vacation Response . . . . . . . . . . . . . . . . . . . . .
    .  86\n     8.1.  VacationResponse/get  . . . . . . . . . . . . . . . . . .  87\n
    \    8.2.  VacationResponse/set  . . . . . . . . . . . . . . . . . .  88\n   9.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  88\n     9.1.
    \ EmailBodyPart Value . . . . . . . . . . . . . . . . . . .  88\n     9.2.  HTML
    Email Display  . . . . . . . . . . . . . . . . . . .  88\n     9.3.  Multiple
    Part Display . . . . . . . . . . . . . . . . . .  91\n     9.4.  Email Submission
    \ . . . . . . . . . . . . . . . . . . . .  91\n     9.5.  Partial Account Access
    \ . . . . . . . . . . . . . . . . .  92\n     9.6.  Permission to Send from an
    Address  . . . . . . . . . . .  92\n   10. IANA Considerations . . . . . . . .
    . . . . . . . . . . . . .  93\n     10.1.  JMAP Capability Registration for \"mail\"
    \ . . . . . . . .  93\n     10.2.  JMAP Capability Registration for \"submission\"
    \ . . . . .  93\n     10.3.  JMAP Capability Registration for \"vacationresponse\"
    \ . .  94\n     10.4.  IMAP and JMAP Keywords Registry  . . . . . . . . . . .
    .  94\n       10.4.1.  Registration of JMAP Keyword \"$draft\"  . . . . . . .
    \ 95\n       10.4.2.  Registration of JMAP Keyword \"$seen\" . . . . . . . .  96\n
    \      10.4.3.  Registration of JMAP Keyword \"$flagged\"  . . . . . .  97\n       10.4.4.
    \ Registration of JMAP Keyword \"$answered\" . . . . . .  98\n       10.4.5.  Registration
    of \"$recent\" Keyword  . . . . . . . . .  99\n     10.5.  IMAP Mailbox Name Attributes
    Registry  . . . . . . . . .  99\n       10.5.1.  Registration of \"inbox\" Role
    . . . . . . . . . . . .  99\n     10.6.  JMAP Error Codes Registry  . . . . .
    . . . . . . . . . . 100\n       10.6.1.  mailboxHasChild  . . . . . . . . . .
    . . . . . . . . 100\n       10.6.2.  mailboxHasEmail  . . . . . . . . . . . .
    . . . . . . 100\n       10.6.3.  blobNotFound . . . . . . . . . . . . . . . .
    . . . . 100\n       10.6.4.  tooManyKeywords  . . . . . . . . . . . . . . . .
    . . 101\n       10.6.5.  tooManyMailboxes . . . . . . . . . . . . . . . . . .
    101\n       10.6.6.  invalidEmail . . . . . . . . . . . . . . . . . . . . 101\n
    \      10.6.7.  tooManyRecipients  . . . . . . . . . . . . . . . . . 102\n       10.6.8.
    \ noRecipients . . . . . . . . . . . . . . . . . . . . 102\n       10.6.9.  invalidRecipients
    \ . . . . . . . . . . . . . . . . . 102\n       10.6.10. forbiddenMailFrom  .
    . . . . . . . . . . . . . . . . 103\n       10.6.11. forbiddenFrom  . . . . .
    . . . . . . . . . . . . . . 103\n       10.6.12. forbiddenToSend  . . . . . .
    . . . . . . . . . . . . 103\n   11. References  . . . . . . . . . . . . . . .
    . . . . . . . . . . 104\n     11.1.  Normative References . . . . . . . . . .
    . . . . . . . . 104\n     11.2.  Informative References . . . . . . . . . . .
    . . . . . . 107\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . .
    . . . . 108\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The JSON Meta Application Protocol (JMAP) [RFC8620] is a
    generic\n   protocol for synchronising data, such as mail, calendars, or contacts\n
    \  between a client and a server.  It is optimised for mobile and web\n   environments
    and aims to provide a consistent interface to different\n   data types.\n   This
    specification defines a data model for accessing a mail store\n   over JMAP, allowing
    you to query, read, organise, and submit mail for\n   sending.\n   The data model
    is designed to allow a server to provide consistent\n   access to the same data
    via IMAP [RFC3501] as well as JMAP.  As in\n   IMAP, a message must belong to
    a mailbox; however, in JMAP, its id\n   does not change if you move it between
    mailboxes, and the server may\n   allow it to belong to multiple mailboxes simultaneously
    (often\n   exposed in a user agent as labels rather than folders).\n   As in IMAP,
    messages may also be assigned zero or more keywords:\n   short arbitrary strings.
    \ These are primarily intended to store\n   metadata to inform client display,
    such as unread status or whether a\n   message has been replied to.  An IANA registry
    allows common\n   semantics to be shared between clients and extended easily in
    the\n   future.\n   A message and its replies are linked on the server by a common
    Thread\n   id.  Clients may fetch the list of messages with a particular Thread\n
    \  id to more easily present a threaded or conversational interface.\n   Permissions
    for message access happen on a per-mailbox basis.\n   Servers may give the user
    restricted permissions for certain\n   mailboxes, for example, if another user's
    inbox has been shared as\n   read-only with them.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n   Type signatures, examples, and property
      descriptions in this document\n   follow the conventions established in Section
      1.1 of [RFC8620].  Data\n   types defined in the core specification are also
      used in this\n   document.\n   Servers MUST support all properties specified
      for the new data types\n   defined in this document.\n"
    title: 1.1.  Notational Conventions
  - contents:
    - "1.2.  Terminology\n   This document uses the same terminology as in the core
      JMAP\n   specification.\n   The terms Mailbox, Thread, Email, SearchSnippet,
      EmailSubmission and\n   VacationResponse (with that specific capitalisation)
      are used to\n   refer to the data types defined in this document and instances
      of\n   those data types.\n   The term message refers to a document in Internet
      Message Format, as\n   described in [RFC5322].  The Email data type represents
      messages in\n   the mail store and associated metadata.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Additions to the Capabilities Object\n   The capabilities object is returned
      as part of the JMAP Session\n   object; see [RFC8620], Section 2.\n   This document
      defines three additional capability URIs.\n"
    - contents:
      - "1.3.1.  urn:ietf:params:jmap:mail\n   This represents support for the Mailbox,
        Thread, Email, and\n   SearchSnippet data types and associated API methods.
        \ The value of\n   this property in the JMAP session \"capabilities\" property
        is an empty\n   object.\n   The value of this property in an account's \"accountCapabilities\"\n
        \  property is an object that MUST contain the following information on\n
        \  server capabilities and permissions for that account:\n   o  maxMailboxesPerEmail:
        \"UnsignedInt|null\"\n      The maximum number of Mailboxes (see Section 2)
        that can be can\n      assigned to a single Email object (see Section 4).
        \ This MUST be\n      an integer >= 1, or null for no limit (or rather, the
        limit is\n      always the number of Mailboxes in the account).\n   o  maxMailboxDepth:
        \"UnsignedInt|null\"\n      The maximum depth of the Mailbox hierarchy (i.e.,
        one more than\n      the maximum number of ancestors a Mailbox may have),
        or null for\n      no limit.\n   o  maxSizeMailboxName: \"UnsignedInt\"\n
        \     The maximum length, in (UTF-8) octets, allowed for the name of a\n      Mailbox.
        \ This MUST be at least 100, although it is recommended\n      servers allow
        more.\n   o  maxSizeAttachmentsPerEmail: \"UnsignedInt\"\n      The maximum
        total size of attachments, in octets, allowed for a\n      single Email object.
        \ A server MAY still reject the import or\n      creation of an Email with
        a lower attachment size total (for\n      example, if the body includes several
        megabytes of text, causing\n      the size of the encoded MIME structure to
        be over some server-\n      defined limit).\n      Note that this limit is
        for the sum of unencoded attachment sizes.\n      Users are generally not
        knowledgeable about encoding overhead,\n      etc., nor should they need to
        be, so marketing and help materials\n      normally tell them the \"max size
        attachments\".  This is the\n      unencoded size they see on their hard drive,
        so this capability\n      matches that and allows the client to consistently
        enforce what\n      the user understands as the limit.\n      The server may
        separately have a limit for the total size of the\n      message [RFC5322],
        created by combining the attachments (often\n      base64 encoded) with the
        message headers and bodies.  For example,\n      suppose the server advertises
        \"maxSizeAttachmentsPerEmail:\n      50000000\" (50 MB).  The enforced server
        limit may be for a message\n      size of 70000000 octets.  Even with base64
        encoding and a 2 MB\n      HTML body, 50 MB attachments would fit under this
        limit.\n   o  emailQuerySortOptions: \"String[]\"\n      A list of all the
        values the server supports for the \"property\"\n      field of the Comparator
        object in an \"Email/query\" sort (see\n      Section 4.4.2).  This MAY include
        properties the client does not\n      recognise (for example, custom properties
        specified in a vendor\n      extension).  Clients MUST ignore any unknown
        properties in the\n      list.\n   o  mayCreateTopLevelMailbox: \"Boolean\"\n
        \     If true, the user may create a Mailbox (see Section 2) in this\n      account
        with a null parentId.  (Permission for creating a child of\n      an existing
        Mailbox is given by the \"myRights\" property on that\n      Mailbox.)\n"
      title: 1.3.1.  urn:ietf:params:jmap:mail
    - contents:
      - "1.3.2.  urn:ietf:params:jmap:submission\n   This represents support for the
        Identity and EmailSubmission data\n   types and associated API methods.  The
        value of this property in the\n   JMAP session \"capabilities\" property is
        an empty object.\n   The value of this property in an account's \"accountCapabilities\"\n
        \  property is an object that MUST contain the following information on\n
        \  server capabilities and permissions for that account:\n   o  maxDelayedSend:
        \"UnsignedInt\"\n      The number in seconds of the maximum delay the server
        supports in\n      sending (see the EmailSubmission object description).  This
        is 0\n      if the server does not support delayed send.\n   o  submissionExtensions:
        \"String[String[]]\"\n      The set of SMTP submission extensions supported
        by the server,\n      which the client may use when creating an EmailSubmission
        object\n      (see Section 7).  Each key in the object is the \"ehlo-name\",
        and\n      the value is a list of \"ehlo-args\".\n      A JMAP implementation
        that talks to a submission server [RFC6409]\n      SHOULD have a configuration
        setting that allows an administrator\n      to modify the set of submission
        EHLO capabilities it may expose on\n      this property.  This allows a JMAP
        server to easily add access to\n      a new submission extension without code
        changes.  By default, the\n      JMAP server should hide EHLO capabilities
        that have to do with the\n      transport mechanism and thus are only relevant
        to the JMAP server\n      (for example, PIPELINING, CHUNKING, or STARTTLS).\n
        \     Examples of Submission extensions to include:\n      *  FUTURERELEASE
        [RFC4865]\n      *  SIZE [RFC1870]\n      *  DSN [RFC3461]\n      *  DELIVERYBY
        [RFC2852]\n      *  MT-PRIORITY [RFC6710]\n      A JMAP server MAY advertise
        an extension and implement the\n      semantics of that extension locally
        on the JMAP server even if a\n      submission server used by JMAP doesn't
        implement it.\n      The full IANA registry of submission extensions can be
        found at\n      <https://www.iana.org/assignments/mail-parameters>.\n"
      title: 1.3.2.  urn:ietf:params:jmap:submission
    - contents:
      - "1.3.3.  urn:ietf:params:jmap:vacationresponse\n   This represents support
        for the VacationResponse data type and\n   associated API methods.  The value
        of this property is an empty\n   object in both the JMAP session \"capabilities\"
        property and an\n   account's \"accountCapabilities\" property.\n"
      title: 1.3.3.  urn:ietf:params:jmap:vacationresponse
    title: 1.3.  Additions to the Capabilities Object
  - contents:
    - "1.4.  Data Type Support in Different Accounts\n   The server MUST include the
      appropriate capability strings as keys in\n   the \"accountCapabilities\" property
      of any account with which the user\n   may use the data types represented by
      that URI.  Supported data types\n   may differ between accounts the user has
      access to.  For example, in\n   the user's personal account, they may have access
      to all three sets\n   of data, but in a shared account, they may only have data
      for\n   \"urn:ietf:params:jmap:mail\".  This means they can access\n   Mailbox/Thread/Email
      data in the shared account but are not allowed\n   to send as that account (and
      so do not have access to Identity/\n   EmailSubmission objects) or view/set
      its VacationResponse.\n"
    title: 1.4.  Data Type Support in Different Accounts
  - contents:
    - "1.5.  Push\n   Servers MUST support the JMAP push mechanisms, as specified
      in\n   [RFC8620], Section 7, to receive notifications when the state changes\n
      \  for any of the types defined in this specification.\n   In addition, servers
      that implement the \"urn:ietf:params:jmap:mail\"\n   capability MUST support
      pushing state changes for a type called\n   \"EmailDelivery\".  There are no
      methods to act on this type; it only\n   exists as part of the push mechanism.
      \ The state string for this MUST\n   change whenever a new Email is added to
      the store, but it SHOULD NOT\n   change upon any other change to the Email objects,
      for example, if\n   one is marked as read or deleted.\n   Clients in battery-constrained
      environments may wish to delay\n   fetching changes initiated by the user but
      fetch new Emails\n   immediately so they can notify the user.  To do this, they
      can\n   register for pushes for the EmailDelivery type rather than the Email\n
      \  type (as defined in Section 4).\n"
    - contents:
      - "1.5.1.  Example\n   The client has registered for push notifications (see
        [RFC8620]) just\n   for the EmailDelivery type.  The user marks an Email as
        read on\n   another device, causing the state string for the Email type to\n
        \  change; however, as nothing new was added to the store, the\n   EmailDelivery
        state does not change and nothing is pushed to the\n   client.  A new message
        arrives in the user's inbox, again causing the\n   Email state to change.
        \ This time, the EmailDelivery state also\n   changes, and a StateChange object
        is pushed to the client with the\n   new state string.  The client may then
        resync to fetch the new Email\n   immediately.\n"
      title: 1.5.1.  Example
    title: 1.5.  Push
  - contents:
    - "1.6.  Ids\n   If a JMAP Mail server also provides an IMAP interface to the
      data and\n   supports IMAP Extension for Object Identifiers [RFC8474], the ids\n
      \  SHOULD be the same for Mailbox, Thread, and Email objects in JMAP.\n"
    title: 1.6.  Ids
  title: 1.  Introduction
- contents:
  - "2.  Mailboxes\n   A Mailbox represents a named set of Email objects.  This is
    the\n   primary mechanism for organising messages within an account.  It is\n
    \  analogous to a folder or a label in other systems.  A Mailbox may\n   perform
    a certain role in the system; see below for more details.\n   For compatibility
    with IMAP, an Email MUST belong to one or more\n   Mailboxes.  The Email id does
    not change if the Email changes\n   Mailboxes.\n   A *Mailbox* object has the
    following properties:\n   o  id: \"Id\" (immutable; server-set)\n      The id
    of the Mailbox.\n   o  name: \"String\"\n      User-visible name for the Mailbox,
    e.g., \"Inbox\".  This MUST be a\n      Net-Unicode string [RFC5198] of at least
    1 character in length,\n      subject to the maximum size given in the capability
    object.  There\n      MUST NOT be two sibling Mailboxes with both the same parent
    and\n      the same name.  Servers MAY reject names that violate server\n      policy
    (e.g., names containing a slash (/) or control characters).\n   o  parentId: \"Id|null\"
    (default: null)\n      The Mailbox id for the parent of this Mailbox, or null
    if this\n      Mailbox is at the top level.  Mailboxes form acyclic graphs\n      (forests)
    directed by the child-to-parent relationship.  There\n      MUST NOT be a loop.\n
    \  o  role: \"String|null\" (default: null)\n      Identifies Mailboxes that have
    a particular common purpose (e.g.,\n      the \"inbox\"), regardless of the \"name\"
    property (which may be\n      localised).\n      This value is shared with IMAP
    (exposed in IMAP via the SPECIAL-\n      USE extension [RFC6154]).  However, unlike
    in IMAP, a Mailbox MUST\n      only have a single role, and there MUST NOT be
    two Mailboxes in\n      the same account with the same role.  Servers providing
    IMAP\n      access to the same data are encouraged to enforce these extra\n      restrictions
    in IMAP as well.  Otherwise, modifying the IMAP\n      attributes to ensure compliance
    when exposing the data over JMAP\n      is implementation dependent.\n      The
    value MUST be one of the Mailbox attribute names listed in the\n      IANA \"IMAP
    Mailbox Name Attributes\" registry at\n      <https://www.iana.org/assignments/imap-mailbox-name-attributes/>,\n
    \     as established in [RFC8457], converted to lowercase.  New roles\n      may
    be established here in the future.\n      An account is not required to have Mailboxes
    with any particular\n      roles.\n   o  sortOrder: \"UnsignedInt\" (default:
    0)\n      Defines the sort order of Mailboxes when presented in the client's\n
    \     UI, so it is consistent between devices.  The number MUST be an\n      integer
    in the range 0 <= sortOrder < 2^31.\n      A Mailbox with a lower order should
    be displayed before a Mailbox\n      with a higher order (that has the same parent)
    in any Mailbox\n      listing in the client's UI.  Mailboxes with equal order
    SHOULD be\n      sorted in alphabetical order by name.  The sorting should take\n
    \     into account locale-specific character order convention.\n   o  totalEmails:
    \"UnsignedInt\" (server-set)\n      The number of Emails in this Mailbox.\n   o
    \ unreadEmails: \"UnsignedInt\" (server-set)\n      The number of Emails in this
    Mailbox that have neither the \"$seen\"\n      keyword nor the \"$draft\" keyword.\n
    \  o  totalThreads: \"UnsignedInt\" (server-set)\n      The number of Threads
    where at least one Email in the Thread is in\n      this Mailbox.\n   o  unreadThreads:
    \"UnsignedInt\" (server-set)\n      An indication of the number of \"unread\"
    Threads in the Mailbox.\n      For compatibility with existing implementations,
    the way \"unread\n      Threads\" is determined is not mandated in this document.
    \ The\n      simplest solution to implement is simply the number of Threads\n
    \     where at least one Email in the Thread is both in this Mailbox and\n      has
    neither the \"$seen\" nor \"$draft\" keywords.\n      However, a quality implementation
    will return the number of unread\n      items the user would see if they opened
    that Mailbox.  A Thread is\n      shown as unread if it contains any unread Emails
    that will be\n      displayed when the Thread is opened.  Therefore, \"unreadThreads\"\n
    \     should be the number of Threads where at least one Email in the\n      Thread
    has neither the \"$seen\" nor the \"$draft\" keyword AND at\n      least one Email
    in the Thread is in this Mailbox.  Note that the\n      unread Email does not
    need to be the one in this Mailbox.  In\n      addition, the trash Mailbox (that
    is, a Mailbox whose \"role\" is\n      \"trash\") requires special treatment:\n
    \     1.  Emails that are *only* in the trash (and no other Mailbox) are\n          ignored
    when calculating the \"unreadThreads\" count of other\n          Mailboxes.\n
    \     2.  Emails that are *not* in the trash are ignored when\n          calculating
    the \"unreadThreads\" count for the trash Mailbox.\n      The result of this is
    that Emails in the trash are treated as\n      though they are in a separate Thread
    for the purposes of unread\n      counts.  It is expected that clients will hide
    Emails in the trash\n      when viewing a Thread in another Mailbox, and vice
    versa.  This\n      allows you to delete a single Email to the trash out of a
    Thread.\n      For example, suppose you have an account where the entire contents\n
    \     is a single Thread with 2 Emails: an unread Email in the trash and\n      a
    read Email in the inbox.  The \"unreadThreads\" count would be 1\n      for the
    trash and 0 for the inbox.\n   o  myRights: \"MailboxRights\" (server-set)\n      The
    set of rights (Access Control Lists (ACLs)) the user has in\n      relation to
    this Mailbox.  These are backwards compatible with\n      IMAP ACLs, as defined
    in [RFC4314].  A *MailboxRights* object has\n      the following properties:\n
    \     *  mayReadItems: \"Boolean\"\n         If true, the user may use this Mailbox
    as part of a filter in\n         an \"Email/query\" call, and the Mailbox may
    be included in the\n         \"mailboxIds\" property of Email objects.  Email
    objects may be\n         fetched if they are in *at least one* Mailbox with this\n
    \        permission.  If a sub-Mailbox is shared but not the parent\n         Mailbox,
    this may be false.  Corresponds to IMAP ACLs \"lr\" (if\n         mapping from
    IMAP, both are required for this to be true).\n      *  mayAddItems: \"Boolean\"\n
    \        The user may add mail to this Mailbox (by either creating a new\n         Email
    or moving an existing one).  Corresponds to IMAP ACL \"i\".\n      *  mayRemoveItems:
    \"Boolean\"\n         The user may remove mail from this Mailbox (by either changing\n
    \        the Mailboxes of an Email or destroying the Email).\n         Corresponds
    to IMAP ACLs \"te\" (if mapping from IMAP, both are\n         required for this
    to be true).\n      *  maySetSeen: \"Boolean\"\n         The user may add or remove
    the \"$seen\" keyword to/from an\n         Email.  If an Email belongs to multiple
    Mailboxes, the user may\n         only modify \"$seen\" if they have this permission
    for *all* of\n         the Mailboxes.  Corresponds to IMAP ACL \"s\".\n      *
    \ maySetKeywords: \"Boolean\"\n         The user may add or remove any keyword
    other than \"$seen\" to/\n         from an Email.  If an Email belongs to multiple
    Mailboxes, the\n         user may only modify keywords if they have this permission
    for\n         *all* of the Mailboxes.  Corresponds to IMAP ACL \"w\".\n      *
    \ mayCreateChild: \"Boolean\"\n         The user may create a Mailbox with this
    Mailbox as its parent.\n         Corresponds to IMAP ACL \"k\".\n      *  mayRename:
    \"Boolean\"\n         The user may rename the Mailbox or make it a child of another\n
    \        Mailbox.  Corresponds to IMAP ACL \"x\" (although this covers\n         both
    rename and delete permissions).\n      *  mayDelete: \"Boolean\"\n         The
    user may delete the Mailbox itself.  Corresponds to IMAP\n         ACL \"x\" (although
    this covers both rename and delete\n         permissions).\n      *  maySubmit:
    \"Boolean\"\n         Messages may be submitted directly to this Mailbox.\n         Corresponds
    to IMAP ACL \"p\".\n   o  isSubscribed: \"Boolean\"\n      Has the user indicated
    they wish to see this Mailbox in their\n      client?  This SHOULD default to
    false for Mailboxes in shared\n      accounts the user has access to and true
    for any new Mailboxes\n      created by the user themself.  This MUST be stored
    separately per\n      user where multiple users have access to a shared Mailbox.\n
    \     A user may have permission to access a large number of shared\n      accounts,
    or a shared account with a very large set of Mailboxes,\n      but only be interested
    in the contents of a few of these.  Clients\n      may choose to only display
    Mailboxes where the \"isSubscribed\"\n      property is set to true, and offer
    a separate UI to allow the user\n      to see and subscribe/unsubscribe from the
    full set of Mailboxes.\n      However, clients MAY choose to ignore this property,
    either\n      entirely for ease of implementation or just for an account where\n
    \     \"isPersonal\" is true (indicating it is the user's own rather than\n      a
    shared account).\n      This property corresponds to IMAP [RFC3501] mailbox subscriptions.\n
    \  For IMAP compatibility, an Email in both the trash and another\n   Mailbox
    SHOULD be treated by the client as existing in both places\n   (i.e., when emptying
    the trash, the client should just remove it from\n   the trash Mailbox and leave
    it in the other Mailbox).\n   The following JMAP methods are supported.\n"
  - contents:
    - "2.1.  Mailbox/get\n   This is a standard \"/get\" method as described in [RFC8620],\n
      \  Section 5.1.  The \"ids\" argument may be \"null\" to fetch all at once.\n"
    title: 2.1.  Mailbox/get
  - contents:
    - "2.2.  Mailbox/changes\n   This is a standard \"/changes\" method as described
      in [RFC8620],\n   Section 5.2 but with one extra argument to the response:\n
      \  o  updatedProperties: \"String[]|null\"\n      If only the \"totalEmails\",
      \"unreadEmails\", \"totalThreads\", and/or\n      \"unreadThreads\" Mailbox
      properties have changed since the old\n      state, this will be the list of
      properties that may have changed.\n      If the server is unable to tell if
      only counts have changed, it\n      MUST just be null.\n   Since counts frequently
      change but other properties are generally\n   only changed rarely, the server
      can help the client optimise data\n   transfer by keeping track of changes to
      Email/Thread counts separate\n   from other state changes.  The \"updatedProperties\"
      array may be used\n   directly via a back-reference in a subsequent \"Mailbox/get\"
      call in\n   the same request, so only these properties are returned if nothing\n
      \  else has changed.\n"
    title: 2.2.  Mailbox/changes
  - contents:
    - "2.3.  Mailbox/query\n   This is a standard \"/query\" method as described in
      [RFC8620],\n   Section 5.5 but with the following additional request argument:\n
      \  o  sortAsTree: \"Boolean\" (default: false)\n      If true, when sorting
      the query results and comparing Mailboxes A\n      and B:\n      *  If A is
      an ancestor of B, it always comes first regardless of\n         the sort comparators.
      \ Similarly, if A is descendant of B, then\n         B always comes first.\n
      \     *  Otherwise, if A and B do not share a \"parentId\", find the\n         nearest
      ancestors of each that do have the same \"parentId\" and\n         compare the
      sort properties on those Mailboxes instead.\n      The result of this is that
      the Mailboxes are sorted as a tree\n      according to the parentId properties,
      with each set of children\n      with a common parent sorted according to the
      standard sort\n      comparators.\n   o  filterAsTree: \"Boolean\" (default:
      false)\n      If true, a Mailbox is only included in the query if all its\n
      \     ancestors are also included in the query according to the filter.\n   A
      *FilterCondition* object has the following properties, any of which\n   may
      be omitted:\n   o  parentId: \"Id|null\"\n      The Mailbox \"parentId\" property
      must match the given value\n      exactly.\n   o  name: \"String\"\n      The
      Mailbox \"name\" property contains the given string.\n   o  role: \"String|null\"\n
      \     The Mailbox \"role\" property must match the given value exactly.\n   o
      \ hasAnyRole: \"Boolean\"\n      If true, a Mailbox matches if it has any non-null
      value for its\n      \"role\" property.\n   o  isSubscribed: \"Boolean\"\n      The
      \"isSubscribed\" property of the Mailbox must be identical to\n      the value
      given to match the condition.\n   A Mailbox object matches the FilterCondition
      if and only if all of\n   the given conditions match.  If zero properties are
      specified, it is\n   automatically true for all objects.\n   The following Mailbox
      properties MUST be supported for sorting:\n   o  \"sortOrder\"\n   o  \"name\"\n"
    title: 2.3.  Mailbox/query
  - contents:
    - "2.4.  Mailbox/queryChanges\n   This is a standard \"/queryChanges\" method
      as described in [RFC8620],\n   Section 5.6.\n"
    title: 2.4.  Mailbox/queryChanges
  - contents:
    - "2.5.  Mailbox/set\n   This is a standard \"/set\" method as described in [RFC8620],\n
      \  Section 5.3 but with the following additional request argument:\n   o  onDestroyRemoveEmails:
      \"Boolean\" (default: false)\n      If false, any attempt to destroy a Mailbox
      that still has Emails\n      in it will be rejected with a \"mailboxHasEmail\"
      SetError.  If\n      true, any Emails that were in the Mailbox will be removed
      from it,\n      and if in no other Mailboxes, they will be destroyed when the\n
      \     Mailbox is destroyed.\n   The following extra SetError types are defined:\n
      \  For \"destroy\":\n   o  \"mailboxHasChild\": The Mailbox still has at least
      one child\n      Mailbox.  The client MUST remove these before it can delete
      the\n      parent Mailbox.\n   o  \"mailboxHasEmail\": The Mailbox has at least
      one Email assigned to\n      it, and the \"onDestroyRemoveEmails\" argument
      was false.\n"
    title: 2.5.  Mailbox/set
  - contents:
    - "2.6.  Example\n   Fetching all Mailboxes in an account:\n                        [[
      \"Mailbox/get\", {\n                          \"accountId\": \"u33084183\",\n
      \                         \"ids\": null\n                        }, \"0\" ]]\n
      \  And the response:\n                      [[ \"Mailbox/get\", {\n                        \"accountId\":
      \"u33084183\",\n                        \"state\": \"78540\",\n                        \"list\":
      [{\n                          \"id\": \"MB23cfa8094c0f41e6\",\n                          \"name\":
      \"Inbox\",\n                          \"parentId\": null,\n                          \"role\":
      \"inbox\",\n                          \"sortOrder\": 10,\n                          \"totalEmails\":
      16307,\n                          \"unreadEmails\": 13905,\n                          \"totalThreads\":
      5833,\n                          \"unreadThreads\": 5128,\n                          \"myRights\":
      {\n                            \"mayAddItems\": true,\n                            \"mayRename\":
      false,\n                            \"maySubmit\": true,\n                            \"mayDelete\":
      false,\n                            \"maySetKeywords\": true,\n                            \"mayRemoveItems\":
      true,\n                            \"mayCreateChild\": true,\n                            \"maySetSeen\":
      true,\n                            \"mayReadItems\": true\n                          },\n
      \                         \"isSubscribed\": true\n                        },
      {\n                          \"id\": \"MB674cc24095db49ce\",\n                          \"name\":
      \"Important mail\",\n                          ...\n                        },
      ... ],\n                        \"notFound\": []\n                      }, \"0\"
      ]]\n   Now suppose an Email is marked read, and we get a push update that\n
      \  the Mailbox state has changed.  You might fetch the updates like\n   this:\n
      \                    [[ \"Mailbox/changes\", {\n                       \"accountId\":
      \"u33084183\",\n                       \"sinceState\": \"78540\"\n                     },
      \"0\" ],\n                     [ \"Mailbox/get\", {\n                       \"accountId\":
      \"u33084183\",\n                       \"#ids\": {\n                         \"resultOf\":
      \"0\",\n                         \"name\": \"Mailbox/changes\",\n                         \"path\":
      \"/created\"\n                       }\n                     }, \"1\" ],\n                     [
      \"Mailbox/get\", {\n                       \"accountId\": \"u33084183\",\n                       \"#ids\":
      {\n                         \"resultOf\": \"0\",\n                         \"name\":
      \"Mailbox/changes\",\n                         \"path\": \"/updated\"\n                       },\n
      \                      \"#properties\": {\n                         \"resultOf\":
      \"0\",\n                         \"name\": \"Mailbox/changes\",\n                         \"path\":
      \"/updatedProperties\"\n                       }\n                     }, \"2\"
      ]]\n   This fetches the list of ids for created/updated/destroyed Mailboxes,\n
      \  then using back-references, it fetches the data for just the created/\n   updated
      Mailboxes in the same request.  The response may look\n   something like this:\n
      \                  [[ \"Mailbox/changes\", {\n                     \"accountId\":
      \"u33084183\",\n                     \"oldState\": \"78541\",\n                     \"newState\":
      \"78542\",\n                     \"hasMoreChanges\": false,\n                     \"updatedProperties\":
      [\n                       \"totalEmails\", \"unreadEmails\",\n                       \"totalThreads\",
      \"unreadThreads\"\n                     ],\n                     \"created\":
      [],\n                     \"updated\": [\"MB23cfa8094c0f41e6\"],\n                     \"destroyed\":
      []\n                   }, \"0\" ],\n                   [ \"Mailbox/get\", {\n
      \                    \"accountId\": \"u33084183\",\n                     \"state\":
      \"78542\",\n                     \"list\": [],\n                     \"notFound\":
      []\n                   }, \"1\" ],\n                   [ \"Mailbox/get\", {\n
      \                    \"accountId\": \"u33084183\",\n                     \"state\":
      \"78542\",\n                     \"list\": [{\n                       \"id\":
      \"MB23cfa8094c0f41e6\",\n                       \"totalEmails\": 16307,\n                       \"unreadEmails\":
      13903,\n                       \"totalThreads\": 5833,\n                       \"unreadThreads\":
      5127\n                     }],\n                     \"notFound\": []\n                   },
      \"2\" ]]\n   Here's an example where we try to rename one Mailbox and destroy\n
      \  another:\n                   [[ \"Mailbox/set\", {\n                     \"accountId\":
      \"u33084183\",\n                     \"ifInState\": \"78542\",\n                     \"update\":
      {\n                       \"MB674cc24095db49ce\": {\n                         \"name\":
      \"Maybe important mail\"\n                       }\n                     },\n
      \                    \"destroy\": [ \"MB23cfa8094c0f41e6\" ]\n                   },
      \"0\" ]]\n   Suppose the rename succeeds, but we don't have permission to destroy\n
      \  the Mailbox we tried to destroy; we might get back:\n                     [[
      \"Mailbox/set\", {\n                       \"accountId\": \"u33084183\",\n                       \"oldState\":
      \"78542\",\n                       \"newState\": \"78549\",\n                       \"updated\":
      {\n                           \"MB674cc24095db49ce\": null\n                       },\n
      \                      \"notDestroyed\": {\n                         \"MB23cfa8094c0f41e6\":
      {\n                           \"type\": \"forbidden\"\n                         }\n
      \                      }\n                     }, \"0\" ]]\n"
    title: 2.6.  Example
  title: 2.  Mailboxes
- contents:
  - "3.  Threads\n   Replies are grouped together with the original message to form
    a\n   Thread.  In JMAP, a Thread is simply a flat list of Emails, ordered\n   by
    date.  Every Email MUST belong to a Thread, even if it is the only\n   Email in
    the Thread.\n   The exact algorithm for determining whether two Emails belong
    to the\n   same Thread is not mandated in this spec to allow for compatibility\n
    \  with different existing systems.  For new implementations, it is\n   suggested
    that two messages belong in the same Thread if both of the\n   following conditions
    apply:\n   1.  An identical message id [RFC5322] appears in both messages in any\n
    \      of the Message-Id, In-Reply-To, and References header fields.\n   2.  After
    stripping automatically added prefixes such as \"Fwd:\",\n       \"Re:\", \"[List-Tag]\",
    etc., and ignoring white space, the subjects\n       are the same.  This avoids
    the situation where a person replies\n       to an old message as a convenient
    way of finding the right\n       recipient to send to but changes the subject
    and starts a new\n       conversation.\n   If messages are delivered out of order
    for some reason, a user may\n   have two Emails in the same Thread but without
    headers that associate\n   them with each other.  The arrival of a third Email
    may provide the\n   missing references to join them all together into a single
    Thread.\n   Since the \"threadId\" of an Email is immutable, if the server wishes\n
    \  to merge the Threads, it MUST handle this by deleting and reinserting\n   (with
    a new Email id) the Emails that change \"threadId\".\n   A *Thread* object has
    the following properties:\n   o  id: \"Id\" (immutable; server-set)\n      The
    id of the Thread.\n   o  emailIds: \"Id[]\" (server-set)\n      The ids of the
    Emails in the Thread, sorted by the \"receivedAt\"\n      date of the Email, oldest
    first.  If two Emails have an identical\n      date, the sort is server dependent
    but MUST be stable (sorting by\n      id is recommended).\n   The following JMAP
    methods are supported.\n"
  - contents:
    - "3.1.  Thread/get\n   This is a standard \"/get\" method as described in [RFC8620],\n
      \  Section 5.1.\n"
    - contents:
      - "3.1.1.  Example\n   Request:\n                       [[ \"Thread/get\", {\n
        \                        \"accountId\": \"acme\",\n                         \"ids\":
        [\"f123u4\", \"f41u44\"]\n                       }, \"#1\" ]]\n   with response:\n
        \                [[ \"Thread/get\", {\n                   \"accountId\": \"acme\",\n
        \                  \"state\": \"f6a7e214\",\n                   \"list\":
        [\n                     {\n                       \"id\": \"f123u4\",\n                       \"emailIds\":
        [ \"eaa623\", \"f782cbb\"]\n                     },\n                     {\n
        \                      \"id\": \"f41u44\",\n                       \"emailIds\":
        [ \"82cf7bb\" ]\n                     }\n                   ],\n                   \"notFound\":
        []\n                 }, \"#1\" ]]\n"
      title: 3.1.1.  Example
    title: 3.1.  Thread/get
  - contents:
    - "3.2.  Thread/changes\n   This is a standard \"/changes\" method as described
      in [RFC8620],\n   Section 5.2.\n"
    title: 3.2.  Thread/changes
  title: 3.  Threads
- contents:
  - "4.  Emails\n   An *Email* object is a representation of a message [RFC5322],
    which\n   allows clients to avoid the complexities of MIME parsing, transfer\n
    \  encoding, and character encoding.\n"
  - contents:
    - "4.1.  Properties of the Email Object\n   Broadly, a message consists of two
      parts: a list of header fields and\n   then a body.  The Email data type provides
      a way to access the full\n   structure or to use simplified properties and avoid
      some complexity\n   if this is sufficient for the client application.\n   While
      raw headers can be fetched and set, the vast majority of\n   clients should
      use an appropriate parsed form for each of the header\n   fields it wants to
      process, as this allows it to avoid the\n   complexities of various encodings
      that are required in a valid\n   message per RFC 5322.\n   The body of a message
      is normally a MIME-encoded set of documents in\n   a tree structure.  This may
      be arbitrarily nested, but the majority\n   of email clients present a flat
      model of a message body (normally\n   plaintext or HTML) with a set of attachments.
      \ Flattening the MIME\n   structure to form this model can be difficult and
      causes\n   inconsistency between clients.  Therefore, in addition to the\n   \"bodyStructure\"
      property, which gives the full tree, the Email object\n   contains 3 alternate
      properties with flat lists of body parts:\n   o  \"textBody\"/\"htmlBody\":
      These provide a list of parts that should\n      be rendered sequentially as
      the \"body\" of the message.  This is a\n      list rather than a single part
      as messages may have headers and/or\n      footers appended/prepended as separate
      parts when they are\n      transmitted, and some clients send text and images
      intended to be\n      displayed inline in the body (or even videos and sound
      clips) as\n      multiple parts rather than a single HTML part with referenced\n
      \     images.\n      Because MIME allows for multiple representations of the
      same data\n      (using \"multipart/alternative\"), there is a \"textBody\"
      property\n      (which prefers a plaintext representation) and an \"htmlBody\"\n
      \     property (which prefers an HTML representation) to accommodate the\n      two
      most common client requirements.  The same part may appear in\n      both lists
      where there is no alternative between the two.\n   o  \"attachments\": This
      provides a list of parts that should be\n      presented as \"attachments\"
      to the message.  Some images may be\n      solely there for embedding within
      an HTML body part; clients may\n      wish to not present these as attachments
      in the user interface if\n      they are displaying the HTML with the embedded
      images directly.\n      Some parts may also be in htmlBody/textBody; again,
      clients may\n      wish to not present these as attachments in the user interface
      if\n      rendered as part of the body.\n   The \"bodyValues\" property allows
      for clients to fetch the value of\n   text parts directly without having to
      do a second request for the\n   blob and to have the server handle decoding
      the charset into unicode.\n   This data is in a separate property rather than
      on the EmailBodyPart\n   object to avoid duplication of large amounts of data,
      as the same\n   part may be included twice if the client fetches more than one
      of\n   bodyStructure, textBody, and htmlBody.\n   In the following subsections,
      the common notational convention for\n   wildcards has been adopted for content
      types, so \"foo/*\" means any\n   content type that starts with \"foo/\".\n
      \  Due to the number of properties involved, the set of Email properties\n   is
      specified over the following four subsections.  This is purely for\n   readability;
      all properties are top-level peers.\n"
    - contents:
      - "4.1.1.  Metadata\n   These properties represent metadata about the message
        in the mail\n   store and are not derived from parsing the message itself.\n
        \  o  id: \"Id\" (immutable; server-set)\n      The id of the Email object.
        \ Note that this is the JMAP object id,\n      NOT the Message-ID header field
        value of the message [RFC5322].\n   o  blobId: \"Id\" (immutable; server-set)\n
        \     The id representing the raw octets of the message [RFC5322] for\n      this
        Email.  This may be used to download the raw original message\n      or to
        attach it directly to another Email, etc.\n   o  threadId: \"Id\" (immutable;
        server-set)\n      The id of the Thread to which this Email belongs.\n   o
        \ mailboxIds: \"Id[Boolean]\"\n      The set of Mailbox ids this Email belongs
        to.  An Email in the\n      mail store MUST belong to one or more Mailboxes
        at all times\n      (until it is destroyed).  The set is represented as an
        object,\n      with each key being a Mailbox id.  The value for each key in
        the\n      object MUST be true.\n   o  keywords: \"String[Boolean]\" (default:
        {})\n      A set of keywords that apply to the Email.  The set is represented\n
        \     as an object, with the keys being the keywords.  The value for\n      each
        key in the object MUST be true.\n      Keywords are shared with IMAP.  The
        six system keywords from IMAP\n      get special treatment.  The following
        four keywords have their\n      first character changed from \"\\\" in IMAP
        to \"$\" in JMAP and have\n      particular semantic meaning:\n      *  \"$draft\":
        The Email is a draft the user is composing.\n      *  \"$seen\": The Email
        has been read.\n      *  \"$flagged\": The Email has been flagged for urgent/special\n
        \        attention.\n      *  \"$answered\": The Email has been replied to.\n
        \     The IMAP \"\\Recent\" keyword is not exposed via JMAP.  The IMAP\n      \"\\Deleted\"
        keyword is also not present: IMAP uses a delete+expunge\n      model, which
        JMAP does not.  Any message with the \"\\Deleted\"\n      keyword MUST NOT
        be visible via JMAP (and so are not counted in\n      the \"totalEmails\",
        \"unreadEmails\", \"totalThreads\", and\n      \"unreadThreads\" Mailbox properties).\n
        \     Users may add arbitrary keywords to an Email.  For compatibility\n      with
        IMAP, a keyword is a case-insensitive string of 1-255\n      characters in
        the ASCII subset %x21-%x7e (excludes control chars\n      and space), and
        it MUST NOT include any of these characters:\n                              (
        ) { ] % * \" \\\n      Because JSON is case sensitive, servers MUST return
        keywords in\n      lowercase.\n      The IANA \"IMAP and JMAP Keywords\" registry
        at\n      <https://www.iana.org/assignments/imap-jmap-keywords/> as\n      established
        in [RFC5788] assigns semantic meaning to some other\n      keywords in common
        use.  New keywords may be established here in\n      the future.  In particular,
        note:\n      *  \"$forwarded\": The Email has been forwarded.\n      *  \"$phishing\":
        The Email is highly likely to be phishing.\n         Clients SHOULD warn users
        to take care when viewing this Email\n         and disable links and attachments.\n
        \     *  \"$junk\": The Email is definitely spam.  Clients SHOULD set this\n
        \        flag when users report spam to help train automated spam-\n         detection
        systems.\n      *  \"$notjunk\": The Email is definitely not spam.  Clients
        SHOULD\n         set this flag when users indicate an Email is legitimate,
        to\n         help train automated spam-detection systems.\n   o  size: \"UnsignedInt\"
        (immutable; server-set)\n      The size, in octets, of the raw data for the
        message [RFC5322] (as\n      referenced by the \"blobId\", i.e., the number
        of octets in the file\n      the user would download).\n   o  receivedAt:
        \"UTCDate\" (immutable; default: time of creation on\n      server)\n      The
        date the Email was received by the message store.  This is the\n      \"internal
        date\" in IMAP [RFC3501].\n"
      title: 4.1.1.  Metadata
    - contents:
      - "4.1.2.  Header Fields Parsed Forms\n   Header field properties are derived
        from the message header fields\n   [RFC5322] [RFC6532].  All header fields
        may be fetched in a raw form.\n   Some header fields may also be fetched in
        a parsed form.  The\n   structured form that may be fetched depends on the
        header.  The forms\n   are defined in the subsections that follow.\n"
      - contents:
        - "4.1.2.1.  Raw\n   Type: \"String\"\n   The raw octets of the header field
          value from the first octet\n   following the header field name terminating
          colon, up to but\n   excluding the header field terminating CRLF.  Any standards-compliant\n
          \  message MUST be either ASCII (RFC 5322) or UTF-8 (RFC 6532); however,\n
          \  other encodings exist in the wild.  A server SHOULD replace any octet\n
          \  or octet run with the high bit set that violates UTF-8 syntax with\n
          \  the unicode replacement character (U+FFFD).  Any NUL octet MUST be\n
          \  dropped.\n   This form will typically have a leading space, as most generated\n
          \  messages insert a space after the colon that terminates the header\n
          \  field name.\n"
        title: 4.1.2.1.  Raw
      - contents:
        - "4.1.2.2.  Text\n   Type: \"String\"\n   The header field value with:\n
          \  1.  White space unfolded (as defined in [RFC5322], Section 2.2.3).\n
          \  2.  The terminating CRLF at the end of the value removed.\n   3.  Any
          SP characters at the beginning of the value removed.\n   4.  Any syntactically
          correct encoded sections [RFC2047] with a known\n       character set decoded.
          \ Any NUL octets or control characters\n       encoded per [RFC2047] are
          dropped from the decoded value.  Any\n       text that looks like syntax
          per [RFC2047] but violates placement\n       or white space rules per [RFC2047]
          MUST NOT be decoded.\n   5.  The resulting unicode converted to Normalization
          Form C (NFC)\n       form.\n   If any decodings fail, the parser SHOULD
          insert a unicode replacement\n   character (U+FFFD) and attempt to continue
          as much as possible.\n   To prevent obviously nonsense behaviour, which
          can lead to\n   interoperability issues, this form may only be fetched or
          set for the\n   following header fields:\n   o  Subject\n   o  Comments\n
          \  o  Keywords\n   o  List-Id\n   o  Any header field not defined in [RFC5322]
          or [RFC2369]\n"
        title: 4.1.2.2.  Text
      - contents:
        - "4.1.2.3.  Addresses\n   Type: \"EmailAddress[]\"\n   The header field is
          parsed as an \"address-list\" value, as specified\n   in [RFC5322], Section
          3.4, into the \"EmailAddress[]\" type.  There is\n   an EmailAddress item
          for each \"mailbox\" parsed from the \"address-\n   list\".  Group and comment
          information is discarded.\n   An *EmailAddress* object has the following
          properties:\n   o  name: \"String|null\"\n      The \"display-name\" of
          the \"mailbox\" [RFC5322].  If this is a\n      \"quoted-string\":\n      1.
          \ The surrounding DQUOTE characters are removed.\n      2.  Any \"quoted-pair\"
          is decoded.\n      3.  White space is unfolded, and then any leading and
          trailing\n          white space is removed.\n      If there is no \"display-name\"
          but there is a \"comment\" immediately\n      following the \"addr-spec\",
          the value of this SHOULD be used\n      instead.  Otherwise, this property
          is null.\n   o  email: \"String\"\n      The \"addr-spec\" of the \"mailbox\"
          [RFC5322].\n   Any syntactically correct encoded sections [RFC2047] with
          a known\n   encoding MUST be decoded, following the same rules as for the
          Text\n   form (see Section 4.1.2.2).\n   Parsing SHOULD be best effort in
          the face of invalid structure to\n   accommodate invalid messages and semi-complete
          drafts.  EmailAddress\n   objects MAY have an \"email\" property that does
          not conform to the\n   \"addr-spec\" form (for example, may not contain
          an @ symbol).\n   For example, the following \"address-list\" string:\n
          \             \"  James Smythe\" <james@example.com>, Friends:\n                jane@example.com,
          =?UTF-8?Q?John_Sm=C3=AEth?=\n                <john@example.com>;\n   would
          be parsed as:\n        [\n          { \"name\": \"James Smythe\", \"email\":
          \"james@example.com\" },\n          { \"name\": null, \"email\": \"jane@example.com\"
          },\n          { \"name\": \"John Smith\", \"email\": \"john@example.com\"
          }\n        ]\n   To prevent obviously nonsense behaviour, which can lead
          to\n   interoperability issues, this form may only be fetched or set for
          the\n   following header fields:\n   o  From\n   o  Sender\n   o  Reply-To\n
          \  o  To\n   o  Cc\n   o  Bcc\n   o  Resent-From\n   o  Resent-Sender\n
          \  o  Resent-Reply-To\n   o  Resent-To\n   o  Resent-Cc\n   o  Resent-Bcc\n
          \  o  Any header field not defined in [RFC5322] or [RFC2369]\n"
        title: 4.1.2.3.  Addresses
      - contents:
        - "4.1.2.4.  GroupedAddresses\n   Type: \"EmailAddressGroup[]\"\n   This is
          similar to the Addresses form but preserves group\n   information.  The
          header field is parsed as an \"address-list\" value,\n   as specified in
          [RFC5322], Section 3.4, into the \"GroupedAddresses[]\"\n   type.  Consecutive
          \"mailbox\" values that are not part of a group are\n   still collected
          under an EmailAddressGroup object to provide a\n   uniform type.\n   An
          *EmailAddressGroup* object has the following properties:\n   o  name: \"String|null\"\n
          \     The \"display-name\" of the \"group\" [RFC5322], or null if the\n
          \     addresses are not part of a group.  If this is a \"quoted-string\",\n
          \     it is processed the same as the \"name\" in the EmailAddress type.\n
          \  o  addresses: \"EmailAddress[]\"\n      The \"mailbox\" values that belong
          to this group, represented as\n      EmailAddress objects.\n   Any syntactically
          correct encoded sections [RFC2047] with a known\n   encoding MUST be decoded,
          following the same rules as for the Text\n   form (see Section 4.1.2.2).\n
          \  Parsing SHOULD be best effort in the face of invalid structure to\n   accommodate
          invalid messages and semi-complete drafts.\n   For example, the following
          \"address-list\" string:\n              \"  James Smythe\" <james@example.com>,
          Friends:\n                jane@example.com, =?UTF-8?Q?John_Sm=C3=AEth?=\n
          \               <john@example.com>;\n   would be parsed as:\n       [\n
          \        { \"name\": null, \"addresses\": [\n           { \"name\": \"James
          Smythe\", \"email\": \"james@example.com\" }\n         ]},\n         { \"name\":
          \"Friends\", \"addresses\": [\n           { \"name\": null, \"email\": \"jane@example.com\"
          },\n           { \"name\": \"John Smith\", \"email\": \"john@example.com\"
          }\n         ]}\n       ]\n   To prevent obviously nonsense behaviour, which
          can lead to\n   interoperability issues, this form may only be fetched or
          set for the\n   same header fields as the Addresses form (see Section 4.1.2.3).\n"
        title: 4.1.2.4.  GroupedAddresses
      - contents:
        - "4.1.2.5.  MessageIds\n   Type: \"String[]|null\"\n   The header field is
          parsed as a list of \"msg-id\" values, as specified\n   in [RFC5322], Section
          3.6.4, into the \"String[]\" type.  Comments and/\n   or folding white space
          (CFWS) and surrounding angle brackets (\"<>\")\n   are removed.  If parsing
          fails, the value is null.\n   To prevent obviously nonsense behaviour, which
          can lead to\n   interoperability issues, this form may only be fetched or
          set for the\n   following header fields:\n   o  Message-ID\n   o  In-Reply-To\n
          \  o  References\n   o  Resent-Message-ID\n   o  Any header field not defined
          in [RFC5322] or [RFC2369]\n"
        title: 4.1.2.5.  MessageIds
      - contents:
        - "4.1.2.6.  Date\n   Type: \"Date|null\"\n   The header field is parsed as
          a \"date-time\" value, as specified in\n   [RFC5322], Section 3.3, into
          the \"Date\" type.  If parsing fails, the\n   value is null.\n   To prevent
          obviously nonsense behaviour, which can lead to\n   interoperability issues,
          this form may only be fetched or set for the\n   following header fields:\n
          \  o  Date\n   o  Resent-Date\n   o  Any header field not defined in [RFC5322]
          or [RFC2369]\n"
        title: 4.1.2.6.  Date
      - contents:
        - "4.1.2.7.  URLs\n   Type: \"String[]|null\"\n   The header field is parsed
          as a list of URLs, as described in\n   [RFC2369], into the \"String[]\"
          type.  Values do not include the\n   surrounding angle brackets or any comments
          in the header field with\n   the URLs.  If parsing fails, the value is null.\n
          \  To prevent obviously nonsense behaviour, which can lead to\n   interoperability
          issues, this form may only be fetched or set for the\n   following header
          fields:\n   o  List-Help\n   o  List-Unsubscribe\n   o  List-Subscribe\n
          \  o  List-Post\n   o  List-Owner\n   o  List-Archive\n   o  Any header
          field not defined in [RFC5322] or [RFC2369]\n"
        title: 4.1.2.7.  URLs
      title: 4.1.2.  Header Fields Parsed Forms
    - contents:
      - "4.1.3.  Header Fields Properties\n   The following low-level Email property
        is specified for complete\n   access to the header data of the message:\n
        \  o  headers: \"EmailHeader[]\" (immutable)\n      This is a list of all
        header fields [RFC5322], in the same order\n      they appear in the message.
        \ An *EmailHeader* object has the\n      following properties:\n      *  name:
        \"String\"\n         The header \"field name\" as defined in [RFC5322], with
        the same\n         capitalization that it has in the message.\n      *  value:
        \"String\"\n         The header \"field value\" as defined in [RFC5322], in
        Raw form.\n   In addition, the client may request/send properties representing\n
        \  individual header fields of the form:\n                        header:{header-field-name}\n
        \  Where \"{header-field-name}\" means any series of one or more printable\n
        \  ASCII characters (i.e., characters that have values between 33 and\n   126,
        inclusive), except for colon (:).  The property may also have\n   the following
        suffixes:\n   o  :as{header-form}\n      This means the value is in a parsed
        form, where \"{header-form}\" is\n      one of the parsed-form names specified
        above.  If not given, the\n      value is in Raw form.\n   o  :all\n      This
        means the value is an array, with the items corresponding to\n      each instance
        of the header field, in the order they appear in the\n      message.  If this
        suffix is not used, the result is the value of\n      the *last* instance
        of the header field (i.e., identical to the\n      last item in the array
        if :all is used), or null if none.\n   If both suffixes are used, they MUST
        be specified in the order above.\n   Header field names are matched case insensitively.
        \ The value is\n   typed according to the requested form or to an array of
        that type if\n   :all is used.  If no header fields exist in the message with
        the\n   requested name, the value is null if fetching a single instance or
        an\n   empty array if requesting :all.\n   As a simple example, if the client
        requests a property called\n   \"header:subject\", this means find the *last*
        header field in the\n   message named \"subject\" (matched case insensitively)
        and return the\n   value in Raw form, or null if no header field of this name
        is found.\n   For a more complex example, consider the client requesting a
        property\n   called \"header:Resent-To:asAddresses:all\".  This means:\n   1.
        \ Find *all* header fields named Resent-To (matched case\n       insensitively).\n
        \  2.  For each instance, parse the header field value in the Addresses\n
        \      form.\n   3.  The result is of type \"EmailAddress[][]\" -- each item
        in the\n       array corresponds to the parsed value (which is itself an array)\n
        \      of the Resent-To header field instance.\n   The following convenience
        properties are also specified for the Email\n   object:\n   o  messageId:
        \"String[]|null\" (immutable)\n      The value is identical to the value of
        \"header:Message-\n      ID:asMessageIds\".  For messages conforming to RFC
        5322, this will\n      be an array with a single entry.\n   o  inReplyTo:
        \"String[]|null\" (immutable)\n      The value is identical to the value of
        \"header:In-Reply-\n      To:asMessageIds\".\n   o  references: \"String[]|null\"
        (immutable)\n      The value is identical to the value of\n      \"header:References:asMessageIds\".\n
        \  o  sender: \"EmailAddress[]|null\" (immutable)\n      The value is identical
        to the value of\n      \"header:Sender:asAddresses\".\n   o  from: \"EmailAddress[]|null\"
        (immutable)\n      The value is identical to the value of \"header:From:asAddresses\".\n
        \  o  to: \"EmailAddress[]|null\" (immutable)\n      The value is identical
        to the value of \"header:To:asAddresses\".\n   o  cc: \"EmailAddress[]|null\"
        (immutable)\n      The value is identical to the value of \"header:Cc:asAddresses\".\n
        \  o  bcc: \"EmailAddress[]|null\" (immutable)\n      The value is identical
        to the value of \"header:Bcc:asAddresses\".\n   o  replyTo: \"EmailAddress[]|null\"
        (immutable)\n      The value is identical to the value of \"header:Reply-\n
        \     To:asAddresses\".\n   o  subject: \"String|null\" (immutable)\n      The
        value is identical to the value of \"header:Subject:asText\".\n   o  sentAt:
        \"Date|null\" (immutable; default on creation: current\n      server time)\n
        \     The value is identical to the value of \"header:Date:asDate\".\n"
      title: 4.1.3.  Header Fields Properties
    - contents:
      - "4.1.4.  Body Parts\n   These properties are derived from the message body
        [RFC5322] and its\n   MIME entities [RFC2045].\n   An *EmailBodyPart* object
        has the following properties:\n   o  partId: \"String|null\"\n      Identifies
        this part uniquely within the Email.  This is scoped to\n      the \"emailId\"
        and has no meaning outside of the JMAP Email object\n      representation.
        \ This is null if, and only if, the part is of type\n      \"multipart/*\".\n
        \  o  blobId: \"Id|null\"\n      The id representing the raw octets of the
        contents of the part,\n      after decoding any known Content-Transfer-Encoding
        (as defined in\n      [RFC2045]), or null if, and only if, the part is of
        type\n      \"multipart/*\".  Note that two parts may be transfer-encoded\n
        \     differently but have the same blob id if their decoded octets are\n
        \     identical and the server is using a secure hash of the data for\n      the
        blob id.  If the transfer encoding is unknown, it is treated\n      as though
        it had no transfer encoding.\n   o  size: \"UnsignedInt\"\n      The size,
        in octets, of the raw data after content transfer\n      decoding (as referenced
        by the \"blobId\", i.e., the number of\n      octets in the file the user
        would download).\n   o  headers: \"EmailHeader[]\"\n      This is a list of
        all header fields in the part, in the order they\n      appear in the message.
        \ The values are in Raw form.\n   o  name: \"String|null\"\n      This is
        the decoded \"filename\" parameter of the Content-\n      Disposition header
        field per [RFC2231], or (for compatibility with\n      existing systems) if
        not present, then it's the decoded \"name\"\n      parameter of the Content-Type
        header field per [RFC2047].\n   o  type: \"String\"\n      The value of the
        Content-Type header field of the part, if\n      present; otherwise, the implicit
        type as per the MIME standard\n      (\"text/plain\" or \"message/rfc822\"
        if inside a \"multipart/digest\").\n      CFWS is removed and any parameters
        are stripped.\n   o  charset: \"String|null\"\n      The value of the charset
        parameter of the Content-Type header\n      field, if present, or null if
        the header field is present but not\n      of type \"text/*\".  If there is
        no Content-Type header field, or it\n      exists and is of type \"text/*\"
        but has no charset parameter, this\n      is the implicit charset as per the
        MIME standard: \"us-ascii\".\n   o  disposition: \"String|null\"\n      The
        value of the Content-Disposition header field of the part, if\n      present;
        otherwise, it's null.  CFWS is removed and any parameters\n      are stripped.\n
        \  o  cid: \"String|null\"\n      The value of the Content-Id header field
        of the part, if present;\n      otherwise, it's null.  CFWS and surrounding
        angle brackets (\"<>\")\n      are removed.  This may be used to reference
        the content from\n      within a \"text/html\" body part [HTML] using the
        \"cid:\" protocol,\n      as defined in [RFC2392].\n   o  language: \"String[]|null\"\n
        \     The list of language tags, as defined in [RFC3282], in the\n      Content-Language
        header field of the part, if present.\n   o  location: \"String|null\"\n      The
        URI, as defined in [RFC2557], in the Content-Location header\n      field
        of the part, if present.\n   o  subParts: \"EmailBodyPart[]|null\"\n      If
        the type is \"multipart/*\", this contains the body parts of each\n      child.\n
        \  In addition, the client may request/send EmailBodyPart properties\n   representing
        individual header fields, following the same syntax and\n   semantics as for
        the Email object, e.g., \"header:Content-Type\".\n   The following Email properties
        are specified for access to the body\n   data of the message:\n   o  bodyStructure:
        \"EmailBodyPart\" (immutable)\n      This is the full MIME structure of the
        message body, without\n      recursing into \"message/rfc822\" or \"message/global\"
        parts.  Note\n      that EmailBodyParts may have subParts if they are of type\n
        \     \"multipart/*\".\n   o  bodyValues: \"String[EmailBodyValue]\" (immutable)\n
        \     This is a map of \"partId\" to an EmailBodyValue object for none,\n
        \     some, or all \"text/*\" parts.  Which parts are included and whether\n
        \     the value is truncated is determined by various arguments to\n      \"Email/get\"
        and \"Email/parse\".  An *EmailBodyValue* object has the\n      following
        properties:\n      *  value: \"String\"\n         The value of the body part
        after decoding Content-Transfer-\n         Encoding and the Content-Type charset,
        if both known to the\n         server, and with any CRLF replaced with a single
        LF.  The\n         server MAY use heuristics to determine the charset to use
        for\n         decoding if the charset is unknown, no charset is given, or
        it\n         believes the charset given is incorrect.  Decoding is best\n
        \        effort; the server SHOULD insert the unicode replacement\n         character
        (U+FFFD) and continue when a malformed section is\n         encountered.\n
        \        Note that due to the charset decoding and line ending\n         normalisation,
        the length of this string will probably not be\n         exactly the same
        as the \"size\" property on the corresponding\n         EmailBodyPart.\n      *
        \ isEncodingProblem: \"Boolean\" (default: false)\n         This is true if
        malformed sections were found while decoding\n         the charset, the charset
        was unknown, or the content-transfer-\n         encoding was unknown.\n      *
        \ isTruncated: \"Boolean\" (default: false)\n         This is true if the
        \"value\" has been truncated.\n      See the Security Considerations section
        for issues related to\n      truncation and heuristic determination of the
        content-type and\n      charset.\n   o  textBody: \"EmailBodyPart[]\" (immutable)\n
        \     A list of \"text/plain\", \"text/html\", \"image/*\", \"audio/*\", and/or\n
        \     \"video/*\" parts to display (sequentially) as the message body,\n      with
        a preference for \"text/plain\" when alternative versions are\n      available.\n
        \  o  htmlBody: \"EmailBodyPart[]\" (immutable)\n      A list of \"text/plain\",
        \"text/html\", \"image/*\", \"audio/*\", and/or\n      \"video/*\" parts to
        display (sequentially) as the message body,\n      with a preference for \"text/html\"
        when alternative versions are\n      available.\n   o  attachments: \"EmailBodyPart[]\"
        (immutable)\n      A list, traversing depth-first, of all parts in \"bodyStructure\"\n
        \     that satisfy either of the following conditions:\n      *  not of type
        \"multipart/*\" and not included in \"textBody\" or\n         \"htmlBody\"\n
        \     *  of type \"image/*\", \"audio/*\", or \"video/*\" and not in both\n
        \        \"textBody\" and \"htmlBody\"\n      None of these parts include
        subParts, including \"message/*\" types.\n      Attached messages may be fetched
        using the \"Email/parse\" method\n      and the \"blobId\".\n      Note that
        a \"text/html\" body part [HTML] may reference image parts\n      in attachments
        by using \"cid:\" links to reference the Content-Id,\n      as defined in
        [RFC2392], or by referencing the Content-Location.\n   o  hasAttachment: \"Boolean\"
        (immutable; server-set)\n      This is true if there are one or more parts
        in the message that a\n      client UI should offer as downloadable.  A server
        SHOULD set\n      hasAttachment to true if the \"attachments\" list contains
        at least\n      one item that does not have \"Content-Disposition: inline\".
        \ The\n      server MAY ignore parts in this list that are processed\n      automatically
        in some way or are referenced as embedded images in\n      one of the \"text/html\"
        parts of the message.\n      The server MAY set hasAttachment based on implementation-defined\n
        \     or site-configurable heuristics.\n   o  preview: \"String\" (immutable;
        server-set)\n      A plaintext fragment of the message body.  This is intended
        to be\n      shown as a preview line when listing messages in the mail store\n
        \     and may be truncated when shown.  The server may choose which part\n
        \     of the message to include in the preview; skipping quoted sections\n
        \     and salutations and collapsing white space can result in a more\n      useful
        preview.\n      This MUST NOT be more than 256 characters in length.\n      As
        this is derived from the message content by the server, and the\n      algorithm
        for doing so could change over time, fetching this for\n      an Email a second
        time MAY return a different result.  However,\n      the previous value is
        not considered incorrect, and the change\n      SHOULD NOT cause the Email
        object to be considered as changed by\n      the server.\n   The exact algorithm
        for decomposing bodyStructure into textBody,\n   htmlBody, and attachments
        part lists is not mandated, as this is a\n   quality-of-service implementation
        issue and likely to require\n   workarounds for malformed content discovered
        over time.  However, the\n   following algorithm (expressed here in JavaScript)
        is suggested as a\n   starting point, based on real-world experience:\n  function
        isInlineMediaType ( type ) {\n    return type.startsWith( 'image/' ) ||\n
        \          type.startsWith( 'audio/' ) ||\n           type.startsWith( 'video/'
        );\n  }\n  function parseStructure ( parts, multipartType, inAlternative,\n
        \         htmlBody, textBody, attachments ) {\n      // For multipartType
        == alternative\n      let textLength = textBody ? textBody.length : -1;\n
        \     let htmlLength = htmlBody ? htmlBody.length : -1;\n      for ( let i
        = 0; i < parts.length; i += 1 ) {\n          let part = parts[i];\n          let
        isMultipart = part.type.startsWith( 'multipart/' );\n          // Is this
        a body part rather than an attachment\n          let isInline = part.disposition
        != \"attachment\" &&\n              // Must be one of the allowed body types\n
        \             ( part.type == \"text/plain\" ||\n                part.type
        == \"text/html\" ||\n                isInlineMediaType( part.type ) ) &&\n
        \             // If multipart/related, only the first part can be inline\n
        \             // If a text part with a filename, and not the first item\n
        \             // in the multipart, assume it is an attachment\n              (
        i === 0 ||\n                ( multipartType != \"related\" &&\n                  (
        isInlineMediaType( part.type ) || !part.name ) ) );\n          if ( isMultipart
        ) {\n              let subMultiType = part.type.split( '/' )[1];\n              parseStructure(
        part.subParts, subMultiType,\n                  inAlternative || ( subMultiType
        == 'alternative' ),\n                  htmlBody, textBody, attachments );\n
        \         } else if ( isInline ) {\n              if ( multipartType == 'alternative'
        ) {\n                  switch ( part.type ) {\n                  case 'text/plain':\n
        \                     textBody.push( part );\n                      break;\n
        \                 case 'text/html':\n                      htmlBody.push(
        part );\n                      break;\n                  default:\n                      attachments.push(
        part );\n                      break;\n                  }\n                  continue;\n
        \             } else if ( inAlternative ) {\n                  if ( part.type
        == 'text/plain' ) {\n                      htmlBody = null;\n                  }\n
        \                 if ( part.type == 'text/html' ) {\n                      textBody
        = null;\n                  }\n              }\n              if ( textBody
        ) {\n                  textBody.push( part );\n              }\n              if
        ( htmlBody ) {\n                  htmlBody.push( part );\n              }\n
        \             if ( ( !textBody || !htmlBody ) &&\n                      isInlineMediaType(
        part.type ) ) {\n                  attachments.push( part );\n              }\n
        \         } else {\n              attachments.push( part );\n          }\n
        \     }\n      if ( multipartType == 'alternative' && textBody && htmlBody
        ) {\n          // Found HTML part only\n          if ( textLength == textBody.length
        &&\n                  htmlLength != htmlBody.length ) {\n              for
        ( let i = htmlLength; i < htmlBody.length; i += 1 ) {\n                  textBody.push(
        htmlBody[i] );\n              }\n          }\n          // Found plaintext
        part only\n          if ( htmlLength == htmlBody.length &&\n                  textLength
        != textBody.length ) {\n              for ( let i = textLength; i < textBody.length;
        i += 1 ) {\n                  htmlBody.push( textBody[i] );\n              }\n
        \         }\n      }\n  }\n  // Usage:\n  let htmlBody = [];\n  let textBody
        = [];\n  let attachments = [];\n  parseStructure( [ bodyStructure ], 'mixed',
        false,\n      htmlBody, textBody, attachments );\n   For instance, consider
        a message with both text and HTML versions\n   that has gone through a list
        software manager that attaches a header\n   and footer.  It might have a MIME
        structure something like:\n            multipart/mixed\n              text/plain,
        content-disposition=inline - A\n              multipart/mixed\n                multipart/alternative\n
        \                 multipart/mixed\n                    text/plain, content-disposition=inline
        - B\n                    image/jpeg, content-disposition=inline - C\n                    text/plain,
        content-disposition=inline - D\n                  multipart/related\n                    text/html
        - E\n                    image/jpeg - F\n                image/jpeg, content-disposition=attachment
        - G\n                application/x-excel - H\n                message/rfc822
        - J\n              text/plain, content-disposition=inline - K\n   In this
        case, the above algorithm would decompose this to:\n                     textBody
        => [ A, B, C, D, K ]\n                     htmlBody => [ A, E, K ]\n                     attachments
        => [ C, F, G, H, J ]\n"
      title: 4.1.4.  Body Parts
    title: 4.1.  Properties of the Email Object
  - contents:
    - "4.2.  Email/get\n   This is a standard \"/get\" method as described in [RFC8620],\n
      \  Section 5.1 with the following additional request arguments:\n   o  bodyProperties:
      \"String[]\"\n      A list of properties to fetch for each EmailBodyPart returned.
      \ If\n      omitted, this defaults to:\n         [ \"partId\", \"blobId\", \"size\",
      \"name\", \"type\", \"charset\",\n           \"disposition\", \"cid\", \"language\",
      \"location\" ]\n   o  fetchTextBodyValues: \"Boolean\" (default: false)\n      If
      true, the \"bodyValues\" property includes any \"text/*\" part in\n      the
      \"textBody\" property.\n   o  fetchHTMLBodyValues: \"Boolean\" (default: false)\n
      \     If true, the \"bodyValues\" property includes any \"text/*\" part in\n
      \     the \"htmlBody\" property.\n   o  fetchAllBodyValues: \"Boolean\" (default:
      false)\n      If true, the \"bodyValues\" property includes any \"text/*\" part
      in\n      the \"bodyStructure\" property.\n   o  maxBodyValueBytes: \"UnsignedInt\"
      (default: 0)\n      If greater than zero, the \"value\" property of any EmailBodyValue\n
      \     object returned in \"bodyValues\" MUST be truncated if necessary so\n
      \     it does not exceed this number of octets in size.  If 0 (the\n      default),
      no truncation occurs.\n      The server MUST ensure the truncation results in
      valid UTF-8 and\n      does not occur mid-codepoint.  If the part is of type
      \"text/html\",\n      the server SHOULD NOT truncate inside an HTML tag, e.g.,
      in the\n      middle of \"<a href=\"https://example.com\">\".  There is no\n
      \     requirement for the truncated form to be a balanced tree or valid\n      HTML
      (indeed, the original source may well be neither of these\n      things).\n
      \  If the standard \"properties\" argument is omitted or null, the\n   following
      default MUST be used instead of \"all\" properties:\n [ \"id\", \"blobId\",
      \"threadId\", \"mailboxIds\", \"keywords\", \"size\",\n \"receivedAt\", \"messageId\",
      \"inReplyTo\", \"references\", \"sender\", \"from\",\n \"to\", \"cc\", \"bcc\",
      \"replyTo\", \"subject\", \"sentAt\", \"hasAttachment\",\n \"preview\", \"bodyValues\",
      \"textBody\", \"htmlBody\", \"attachments\" ]\n   The following properties are
      expected to be fast to fetch in a\n   quality implementation:\n   o  id\n   o
      \ blobId\n   o  threadId\n   o  mailboxIds\n   o  keywords\n   o  size\n   o
      \ receivedAt\n   o  messageId\n   o  inReplyTo\n   o  sender\n   o  from\n   o
      \ to\n   o  cc\n   o  bcc\n   o  replyTo\n   o  subject\n   o  sentAt\n   o
      \ hasAttachment\n   o  preview\n   Clients SHOULD take care when fetching any
      other properties, as there\n   may be significantly longer latency in fetching
      and returning the\n   data.\n   As specified above, parsed forms of headers
      may only be used on\n   appropriate header fields.  Attempting to fetch a form
      that is\n   forbidden (e.g., \"header:From:asDate\") MUST result in the method
      call\n   being rejected with an \"invalidArguments\" error.\n   Where a specific
      header field is requested as a property, the\n   capitalization of the property
      name in the response MUST be identical\n   to that used in the request.\n"
    - contents:
      - "4.2.1.  Example\n   Request:\n      [[ \"Email/get\", {\n        \"ids\":
        [ \"f123u456\", \"f123u457\" ],\n        \"properties\": [ \"threadId\", \"mailboxIds\",
        \"from\", \"subject\",\n          \"receivedAt\", \"header:List-POST:asURLs\",\n
        \         \"htmlBody\", \"bodyValues\" ],\n        \"bodyProperties\": [ \"partId\",
        \"blobId\", \"size\", \"type\" ],\n        \"fetchHTMLBodyValues\": true,\n
        \       \"maxBodyValueBytes\": 256\n      }, \"#1\" ]]\n   and response:\n
        \  [[ \"Email/get\", {\n     \"accountId\": \"abc\",\n     \"state\": \"41234123231\",\n
        \    \"list\": [\n       {\n         \"id\": \"f123u457\",\n         \"threadId\":
        \"ef1314a\",\n         \"mailboxIds\": { \"f123\": true },\n         \"from\":
        [{ \"name\": \"Joe Bloggs\", \"email\": \"joe@example.com\" }],\n         \"subject\":
        \"Dinner on Thursday?\",\n         \"receivedAt\": \"2013-10-13T14:12:00Z\",\n
        \        \"header:List-POST:asURLs\": [\n           \"mailto:partytime@lists.example.com\"\n
        \        ],\n         \"htmlBody\": [{\n           \"partId\": \"1\",\n           \"blobId\":
        \"B841623871\",\n           \"size\": 283331,\n           \"type\": \"text/html\"\n
        \        }, {\n           \"partId\": \"2\",\n           \"blobId\": \"B319437193\",\n
        \          \"size\": 10343,\n           \"type\": \"text/plain\"\n         }],\n
        \        \"bodyValues\": {\n           \"1\": {\n             \"isEncodingProblem\":
        false,\n             \"isTruncated\": true,\n             \"value\": \"<html><body><p>Hello
        ...\"\n           },\n           \"2\": {\n             \"isEncodingProblem\":
        false,\n             \"isTruncated\": false,\n             \"value\": \"--
        Sent by your friendly mailing list ...\"\n           }\n         }\n       }\n
        \    ],\n     \"notFound\": [ \"f123u456\" ]\n   }, \"#1\" ]]\n"
      title: 4.2.1.  Example
    title: 4.2.  Email/get
  - contents:
    - "4.3.  Email/changes\n   This is a standard \"/changes\" method as described
      in [RFC8620],\n   Section 5.2.  If generating intermediate states for a large
      set of\n   changes, it is recommended that newer changes be returned first,
      as\n   these are generally of more interest to users.\n"
    title: 4.3.  Email/changes
  - contents:
    - "4.4.  Email/query\n   This is a standard \"/query\" method as described in
      [RFC8620],\n   Section 5.5 but with the following additional request arguments:\n
      \  o  collapseThreads: \"Boolean\" (default: false)\n      If true, Emails in
      the same Thread as a previous Email in the list\n      (given the filter and
      sort order) will be removed from the list.\n      This means only one Email
      at most will be included in the list for\n      any given Thread.\n   In quality
      implementations, the query \"total\" property is expected to\n   be fast to
      calculate when the filter consists solely of a single\n   \"inMailbox\" property,
      as it is the same as the totalEmails or\n   totalThreads properties (depending
      on whether collapseThreads is\n   true) of the associated Mailbox object.\n"
    - contents:
      - "4.4.1.  Filtering\n   A *FilterCondition* object has the following properties,
        any of which\n   may be omitted:\n   o  inMailbox: \"Id\"\n      A Mailbox
        id.  An Email must be in this Mailbox to match the\n      condition.\n   o
        \ inMailboxOtherThan: \"Id[]\"\n      A list of Mailbox ids.  An Email must
        be in at least one Mailbox\n      not in this list to match the condition.
        \ This is to allow\n      messages solely in trash/spam to be easily excluded
        from a search.\n   o  before: \"UTCDate\"\n      The \"receivedAt\" date-time
        of the Email must be before this date-\n      time to match the condition.\n
        \  o  after: \"UTCDate\"\n      The \"receivedAt\" date-time of the Email
        must be the same or after\n      this date-time to match the condition.\n
        \  o  minSize: \"UnsignedInt\"\n      The \"size\" property of the Email must
        be equal to or greater than\n      this number to match the condition.\n   o
        \ maxSize: \"UnsignedInt\"\n      The \"size\" property of the Email must
        be less than this number to\n      match the condition.\n   o  allInThreadHaveKeyword:
        \"String\"\n      All Emails (including this one) in the same Thread as this
        Email\n      must have the given keyword to match the condition.\n   o  someInThreadHaveKeyword:
        \"String\"\n      At least one Email (possibly this one) in the same Thread
        as this\n      Email must have the given keyword to match the condition.\n
        \  o  noneInThreadHaveKeyword: \"String\"\n      All Emails (including this
        one) in the same Thread as this Email\n      must *not* have the given keyword
        to match the condition.\n   o  hasKeyword: \"String\"\n      This Email must
        have the given keyword to match the condition.\n   o  notKeyword: \"String\"\n
        \     This Email must not have the given keyword to match the condition.\n
        \  o  hasAttachment: \"Boolean\"\n      The \"hasAttachment\" property of
        the Email must be identical to the\n      value given to match the condition.\n
        \  o  text: \"String\"\n      Looks for the text in Emails.  The server MUST
        look up text in the\n      From, To, Cc, Bcc, and Subject header fields of
        the message and\n      SHOULD look inside any \"text/*\" or other body parts
        that may be\n      converted to text by the server.  The server MAY extend
        the search\n      to any additional textual property.\n   o  from: \"String\"\n
        \     Looks for the text in the From header field of the message.\n   o  to:
        \"String\"\n      Looks for the text in the To header field of the message.\n
        \  o  cc: \"String\"\n      Looks for the text in the Cc header field of the
        message.\n   o  bcc: \"String\"\n      Looks for the text in the Bcc header
        field of the message.\n   o  subject: \"String\"\n      Looks for the text
        in the Subject header field of the message.\n   o  body: \"String\"\n      Looks
        for the text in one of the body parts of the message.  The\n      server MAY
        exclude MIME body parts with content media types other\n      than \"text/*\"
        and \"message/*\" from consideration in search\n      matching.  Care should
        be taken to match based on the text content\n      actually presented to an
        end user by viewers for that media type\n      or otherwise identified as
        appropriate for search indexing.\n      Matching document metadata uninteresting
        to an end user (e.g.,\n      markup tag and attribute names) is undesirable.\n
        \  o  header: \"String[]\"\n      The array MUST contain either one or two
        elements.  The first\n      element is the name of the header field to match
        against.  The\n      second (optional) element is the text to look for in
        the header\n      field value.  If not supplied, the message matches simply
        if it\n      has a header field of the given name.\n   If zero properties
        are specified on the FilterCondition, the\n   condition MUST always evaluate
        to true.  If multiple properties are\n   specified, ALL must apply for the
        condition to be true (it is\n   equivalent to splitting the object into one-property
        conditions and\n   making them all the child of an AND filter operator).\n
        \  The exact semantics for matching \"String\" fields is *deliberately not\n
        \  defined* to allow for flexibility in indexing implementation, subject\n
        \  to the following:\n   o  Any syntactically correct encoded sections [RFC2047]
        of header\n      fields with a known encoding SHOULD be decoded before attempting\n
        \     to match text.\n   o  When searching inside a \"text/html\" body part,
        any text considered\n      markup rather than content SHOULD be ignored, including
        HTML tags\n      and most attributes, anything inside the \"<head>\" tag,
        Cascading\n      Style Sheets (CSS), and JavaScript.  Attribute content intended\n
        \     for presentation to the user such as \"alt\" and \"title\" SHOULD be\n
        \     considered in the search.\n   o  Text SHOULD be matched in a case-insensitive
        manner.\n   o  Text contained in either (but matched) single (') or double
        (\")\n      quotes SHOULD be treated as a *phrase search*; that is, a match
        is\n      required for that exact word or sequence of words, excluding the\n
        \     surrounding quotation marks.\n      Within a phrase, to match one of
        the following characters you MUST\n      escape it by prefixing it with a
        backslash (\\):\n                                    ' \" \\\n   o  Outside
        of a phrase, white space SHOULD be treated as dividing\n      separate tokens
        that may be searched for separately but MUST all\n      be present for the
        Email to match the filter.\n   o  Tokens (not part of a phrase) MAY be matched
        on a whole-word basis\n      using stemming (for example, a text search for
        \"bus\" would match\n      \"buses\" but not \"business\").\n"
      title: 4.4.1.  Filtering
    - contents:
      - "4.4.2.  Sorting\n   The following value for the \"property\" field on the
        Comparator object\n   MUST be supported for sorting:\n   o  \"receivedAt\"
        - The \"receivedAt\" date as returned in the Email\n      object.\n   The
        following values for the \"property\" field on the Comparator\n   object SHOULD
        be supported for sorting.  When specifying a\n   \"hasKeyword\", \"allInThreadHaveKeyword\",
        or \"someInThreadHaveKeyword\"\n   sort, the Comparator object MUST also have
        a \"keyword\" property.\n   o  \"size\" - The \"size\" as returned in the
        Email object.\n   o  \"from\" - This is taken to be either the \"name\" property
        or if\n      null/empty, the \"email\" property of the *first* EmailAddress\n
        \     object in the Email's \"from\" property.  If still none, consider\n
        \     the value to be the empty string.\n   o  \"to\" - This is taken to be
        either the \"name\" property or if null/\n      empty, the \"email\" property
        of the *first* EmailAddress object in\n      the Email's \"to\" property.
        \ If still none, consider the value to\n      be the empty string.\n   o  \"subject\"
        - This is taken to be the base subject of the message,\n      as defined in
        Section 2.1 of [RFC5256].\n   o  \"sentAt\" - The \"sentAt\" property on the
        Email object.\n   o  \"hasKeyword\" - This value MUST be considered true if
        the Email has\n      the keyword given as an additional \"keyword\" property
        on the\n      Comparator object, or false otherwise.\n   o  \"allInThreadHaveKeyword\"
        - This value MUST be considered true for\n      the Email if *all* of the
        Emails in the same Thread have the\n      keyword given as an additional \"keyword\"
        property on the\n      Comparator object.\n   o  \"someInThreadHaveKeyword\"
        - This value MUST be considered true for\n      the Email if *any* of the
        Emails in the same Thread have the\n      keyword given as an additional \"keyword\"
        property on the\n      Comparator object.\n   The server MAY support sorting
        based on other properties as well.  A\n   client can discover which properties
        are supported by inspecting the\n   account's \"capabilities\" object (see
        Section 1.3).\n   Example sort:\n                 [{\n                   \"property\":
        \"someInThreadHaveKeyword\",\n                   \"keyword\": \"$flagged\",\n
        \                  \"isAscending\": false\n                 }, {\n                   \"property\":
        \"subject\",\n                   \"collation\": \"i;ascii-casemap\"\n                 },
        {\n                   \"property\": \"receivedAt\",\n                   \"isAscending\":
        false\n                 }]\n   This would sort Emails in flagged Threads first
        (the Thread is\n   considered flagged if any Email within it is flagged),
        in subject\n   order second, and then from newest first for messages with
        the same\n   subject.  If two Emails have identical values for all three\n
        \  properties, then the order is server dependent but must be stable.\n"
      title: 4.4.2.  Sorting
    - contents:
      - "4.4.3.  Thread Collapsing\n   When \"collapseThreads\" is true, then after
        filtering and sorting the\n   Email list, the list is further winnowed by
        removing any Emails for a\n   Thread id that has already been seen (when passing
        through the list\n   sequentially).  A Thread will therefore only appear *once*
        in the\n   result, at the position of the first Email in the list that belongs\n
        \  to the Thread (given the current sort/filter).\n"
      title: 4.4.3.  Thread Collapsing
    title: 4.4.  Email/query
  - contents:
    - "4.5.  Email/queryChanges\n   This is a standard \"/queryChanges\" method as
      described in [RFC8620],\n   Section 5.6 with the following additional request
      argument:\n   o  collapseThreads: \"Boolean\" (default: false)\n      The \"collapseThreads\"
      argument that was used with \"Email/query\".\n"
    title: 4.5.  Email/queryChanges
  - contents:
    - "4.6.  Email/set\n   This is a standard \"/set\" method as described in [RFC8620],\n
      \  Section 5.3.  The \"Email/set\" method encompasses:\n   o  Creating a draft\n
      \  o  Changing the keywords of an Email (e.g., unread/flagged status)\n   o
      \ Adding/removing an Email to/from Mailboxes (moving a message)\n   o  Deleting
      Emails\n   The format of the \"keywords\"/\"mailboxIds\" properties means that
      when\n   updating an Email, you can either replace the entire set of keywords/\n
      \  Mailboxes (by setting the full value of the property) or add/remove\n   individual
      ones using the JMAP patch syntax (see [RFC8620],\n   Section 5.3 for the specification
      and Section 5.7 for an example).\n   Due to the format of the Email object,
      when creating an Email, there\n   are a number of ways to specify the same information.
      \ To ensure that\n   the message [RFC5322] to create is unambiguous, the following\n
      \  constraints apply to Email objects submitted for creation:\n   o  The \"headers\"
      property MUST NOT be given on either the top-level\n      Email or an EmailBodyPart
      -- the client must set each header field\n      as an individual property.\n
      \  o  There MUST NOT be two properties that represent the same header\n      field
      (e.g., \"header:from\" and \"from\") within the Email or\n      particular EmailBodyPart.\n
      \  o  Header fields MUST NOT be specified in parsed forms that are\n      forbidden
      for that particular field.\n   o  Header fields beginning with \"Content-\"
      MUST NOT be specified on\n      the Email object, only on EmailBodyPart objects.\n
      \  o  If a \"bodyStructure\" property is given, there MUST NOT be\n      \"textBody\",
      \"htmlBody\", or \"attachments\" properties.\n   o  If given, the \"bodyStructure\"
      EmailBodyPart MUST NOT contain a\n      property representing a header field
      that is already defined on\n      the top-level Email object.\n   o  If given,
      textBody MUST contain exactly one body part and it MUST\n      be of type \"text/plain\".\n
      \  o  If given, htmlBody MUST contain exactly one body part and it MUST\n      be
      of type \"text/html\".\n   o  Within an EmailBodyPart:\n      *  The client
      may specify a partId OR a blobId, but not both.  If\n         a partId is given,
      this partId MUST be present in the\n         \"bodyValues\" property.\n      *
      \ The \"charset\" property MUST be omitted if a partId is given\n         (the
      part's content is included in bodyValues, and the server\n         may choose
      any appropriate encoding).\n      *  The \"size\" property MUST be omitted if
      a partId is given.  If a\n         blobId is given, it may be included but is
      ignored by the\n         server (the size is actually calculated from the blob
      content\n         itself).\n      *  A Content-Transfer-Encoding header field
      MUST NOT be given.\n   o  Within an EmailBodyValue object, isEncodingProblem
      and isTruncated\n      MUST be either false or omitted.\n   Creation attempts
      that violate any of this SHOULD be rejected with an\n   \"invalidProperties\"
      error; however, a server MAY choose to modify the\n   Email (e.g., choose between
      conflicting headers, use a different\n   content-encoding, etc.) to comply with
      its requirements instead.\n   The server MAY also choose to set additional headers.
      \ If not\n   included, the server MUST generate and set a Message-ID header
      field\n   in conformance with [RFC5322], Section 3.6.4 and a Date header field\n
      \  in conformance with Section 3.6.1.\n   The final message generated may be
      invalid per RFC 5322.  For\n   example, if it is a half-finished draft, the
      To header field may have\n   a value that does not conform to the required syntax
      for this header.\n   The message will be checked for strict conformance when
      submitted for\n   sending (see the EmailSubmission object description).\n   Destroying
      an Email removes it from all Mailboxes to which it\n   belonged.  To just delete
      an Email to trash, simply change the\n   \"mailboxIds\" property, so it is now
      in the Mailbox with a \"role\"\n   property equal to \"trash\", and remove all
      other Mailbox ids.\n   When emptying the trash, clients SHOULD NOT destroy Emails
      that are\n   also in a Mailbox other than trash.  For those Emails, they SHOULD\n
      \  just remove the trash Mailbox from the Email.\n   For successfully created
      Email objects, the \"created\" response\n   contains the \"id\", \"blobId\",
      \"threadId\", and \"size\" properties of the\n   object.\n   The following extra
      SetError types are defined:\n   For \"create\":\n   o  \"blobNotFound\": At
      least one blob id given for an EmailBodyPart\n      doesn't exist.  An extra
      \"notFound\" property of type \"Id[]\" MUST\n      be included in the SetError
      object containing every \"blobId\"\n      referenced by an EmailBodyPart that
      could not be found on the\n      server.\n   For \"create\" and \"update\":\n
      \  o  \"tooManyKeywords\": The change to the Email's keywords would exceed\n
      \     a server-defined maximum.\n   o  \"tooManyMailboxes\": The change to the
      set of Mailboxes that this\n      Email is in would exceed a server-defined
      maximum.\n"
    title: 4.6.  Email/set
  - contents:
    - "4.7.  Email/copy\n   This is a standard \"/copy\" method as described in [RFC8620],\n
      \  Section 5.4, except only the \"mailboxIds\", \"keywords\", and\n   \"receivedAt\"
      properties may be set during the copy.  This method\n   cannot modify the message
      represented by the Email.\n   The server MAY forbid two Email objects with identical
      message\n   content [RFC5322], or even just with the same Message-ID [RFC5322],\n
      \  to coexist within an account; if the target account already has the\n   Email,
      the copy will be rejected with a standard \"alreadyExists\"\n   error.\n   For
      successfully copied Email objects, the \"created\" response\n   contains the
      \"id\", \"blobId\", \"threadId\", and \"size\" properties of the\n   new object.\n"
    title: 4.7.  Email/copy
  - contents:
    - "4.8.  Email/import\n   The \"Email/import\" method adds messages [RFC5322]
      to the set of\n   Emails in an account.  The server MUST support messages with
      Email\n   Address Internationalization (EAI) headers [RFC6532].  The messages\n
      \  must first be uploaded as blobs using the standard upload mechanism.\n   The
      method takes the following arguments:\n   o  accountId: \"Id\"\n      The id
      of the account to use.\n   o  ifInState: \"String|null\"\n      This is a state
      string as returned by the \"Email/get\" method.  If\n      supplied, the string
      must match the current state of the account\n      referenced by the accountId;
      otherwise, the method will be aborted\n      and a \"stateMismatch\" error returned.
      \ If null, any changes will\n      be applied to the current state.\n   o  emails:
      \"Id[EmailImport]\"\n      A map of creation id (client specified) to EmailImport
      objects.\n   An *EmailImport* object has the following properties:\n   o  blobId:
      \"Id\"\n      The id of the blob containing the raw message [RFC5322].\n   o
      \ mailboxIds: \"Id[Boolean]\"\n      The ids of the Mailboxes to assign this
      Email to.  At least one\n      Mailbox MUST be given.\n   o  keywords: \"String[Boolean]\"
      (default: {})\n      The keywords to apply to the Email.\n   o  receivedAt:
      \"UTCDate\" (default: time of most recent Received\n      header, or time of
      import on server if none)\n      The \"receivedAt\" date to set on the Email.\n
      \  Each Email to import is considered an atomic unit that may succeed or\n   fail
      individually.  Importing successfully creates a new Email object\n   from the
      data referenced by the blobId and applies the given\n   Mailboxes, keywords,
      and receivedAt date.\n   The server MAY forbid two Email objects with the same
      exact content\n   [RFC5322], or even just with the same Message-ID [RFC5322],
      to\n   coexist within an account.  In this case, it MUST reject attempts to\n
      \  import an Email considered to be a duplicate with an \"alreadyExists\"\n
      \  SetError.  An \"existingId\" property of type \"Id\" MUST be included on\n
      \  the SetError object with the id of the existing Email.  If duplicates\n   are
      allowed, the newly created Email object MUST have a separate id\n   and independent
      mutable properties to the existing object.\n   If the \"blobId\", \"mailboxIds\",
      or \"keywords\" properties are invalid\n   (e.g., missing, wrong type, id not
      found), the server MUST reject the\n   import with an \"invalidProperties\"
      SetError.\n   If the Email cannot be imported because it would take the account\n
      \  over quota, the import should be rejected with an \"overQuota\"\n   SetError.\n
      \  If the blob referenced is not a valid message [RFC5322], the server\n   MAY
      modify the message to fix errors (such as removing NUL octets or\n   fixing
      invalid headers).  If it does this, the \"blobId\" on the\n   response MUST
      represent the new representation and therefore be\n   different to the \"blobId\"
      on the EmailImport object.  Alternatively,\n   the server MAY reject the import
      with an \"invalidEmail\" SetError.\n   The response has the following arguments:\n
      \  o  accountId: \"Id\"\n      The id of the account used for this call.\n   o
      \ oldState: \"String|null\"\n      The state string that would have been returned
      by \"Email/get\" on\n      this account before making the requested changes,
      or null if the\n      server doesn't know what the previous state string was.\n
      \  o  newState: \"String\"\n      The state string that will now be returned
      by \"Email/get\" on this\n      account.\n   o  created: \"Id[Email]|null\"\n
      \     A map of the creation id to an object containing the \"id\",\n      \"blobId\",
      \"threadId\", and \"size\" properties for each successfully\n      imported
      Email, or null if none.\n   o  notCreated: \"Id[SetError]|null\"\n      A map
      of the creation id to a SetError object for each Email that\n      failed to
      be created, or null if all successful.  The possible\n      errors are defined
      above.\n   The following additional errors may be returned instead of the\n
      \  \"Email/import\" response:\n   \"stateMismatch\": An \"ifInState\" argument
      was supplied, and it does\n   not match the current state.\n"
    title: 4.8.  Email/import
  - contents:
    - "4.9.  Email/parse\n   This method allows you to parse blobs as messages [RFC5322]
      to get\n   Email objects.  The server MUST support messages with EAI headers\n
      \  [RFC6532].  This can be used to parse and display attached messages\n   without
      having to import them as top-level Email objects in the mail\n   store in their
      own right.\n   The following metadata properties on the Email objects will be
      null\n   if requested:\n   o  id\n   o  mailboxIds\n   o  keywords\n   o  receivedAt\n
      \  The \"threadId\" property of the Email MAY be present if the server can\n
      \  calculate which Thread the Email would be assigned to were it to be\n   imported.
      \ Otherwise, this too is null if fetched.\n   The \"Email/parse\" method takes
      the following arguments:\n   o  accountId: \"Id\"\n      The id of the account
      to use.\n   o  blobIds: \"Id[]\"\n      The ids of the blobs to parse.\n   o
      \ properties: \"String[]\"\n      If supplied, only the properties listed in
      the array are returned\n      for each Email object.  If omitted, defaults to:\n
      \     [ \"messageId\", \"inReplyTo\", \"references\", \"sender\", \"from\",
      \"to\",\n      \"cc\", \"bcc\", \"replyTo\", \"subject\", \"sentAt\", \"hasAttachment\",\n
      \     \"preview\", \"bodyValues\", \"textBody\", \"htmlBody\", \"attachments\"
      ]\n   o  bodyProperties: \"String[]\"\n      A list of properties to fetch for
      each EmailBodyPart returned.  If\n      omitted, defaults to the same value
      as the \"Email/get\"\n      \"bodyProperties\" default argument.\n   o  fetchTextBodyValues:
      \"Boolean\" (default: false)\n      If true, the \"bodyValues\" property includes
      any \"text/*\" part in\n      the \"textBody\" property.\n   o  fetchHTMLBodyValues:
      \"Boolean\" (default: false)\n      If true, the \"bodyValues\" property includes
      any \"text/*\" part in\n      the \"htmlBody\" property.\n   o  fetchAllBodyValues:
      \"Boolean\" (default: false)\n      If true, the \"bodyValues\" property includes
      any \"text/*\" part in\n      the \"bodyStructure\" property.\n   o  maxBodyValueBytes:
      \"UnsignedInt\" (default: 0)\n      If greater than zero, the \"value\" property
      of any EmailBodyValue\n      object returned in \"bodyValues\" MUST be truncated
      if necessary so\n      it does not exceed this number of octets in size.  If
      0 (the\n      default), no truncation occurs.\n      The server MUST ensure
      the truncation results in valid UTF-8 and\n      does not occur mid-codepoint.
      \ If the part is of type \"text/html\",\n      the server SHOULD NOT truncate
      inside an HTML tag, e.g., in the\n      middle of \"<a href=\"https://example.com\">\".
      \ There is no\n      requirement for the truncated form to be a balanced tree
      or valid\n      HTML (indeed, the original source may well be neither of these\n
      \     things).\n   The response has the following arguments:\n   o  accountId:
      \"Id\"\n      The id of the account used for the call.\n   o  parsed: \"Id[Email]|null\"\n
      \     A map of blob id to parsed Email representation for each\n      successfully
      parsed blob, or null if none.\n   o  notParsable: \"Id[]|null\"\n      A list
      of ids given that corresponded to blobs that could not be\n      parsed as Emails,
      or null if none.\n   o  notFound: \"Id[]|null\"\n      A list of blob ids given
      that could not be found, or null if none.\n   As specified above, parsed forms
      of headers may only be used on\n   appropriate header fields.  Attempting to
      fetch a form that is\n   forbidden (e.g., \"header:From:asDate\") MUST result
      in the method call\n   being rejected with an \"invalidArguments\" error.\n
      \  Where a specific header field is requested as a property, the\n   capitalization
      of the property name in the response MUST be identical\n   to that used in the
      request.\n"
    title: 4.9.  Email/parse
  - contents:
    - "4.10.  Examples\n   A client logs in for the first time.  It first fetches
      the set of\n   Mailboxes.  Now it will display the inbox to the user, which
      we will\n   presume has Mailbox id \"fb666a55\".  The inbox may be (very!) large,\n
      \  but the user's screen is only so big, so the client can just load the\n   Threads
      it needs to fill the screen and then load in more only when\n   the user scrolls.
      \ The client sends this request:\n                      [[ \"Email/query\",{\n
      \                       \"accountId\": \"ue150411c\",\n                        \"filter\":
      {\n                          \"inMailbox\": \"fb666a55\"\n                        },\n
      \                       \"sort\": [{\n                          \"isAscending\":
      false,\n                          \"property\": \"receivedAt\"\n                        }],\n
      \                       \"collapseThreads\": true,\n                        \"position\":
      0,\n                        \"limit\": 30,\n                        \"calculateTotal\":
      true\n                      }, \"0\" ],\n                      [ \"Email/get\",
      {\n                        \"accountId\": \"ue150411c\",\n                        \"#ids\":
      {\n                          \"resultOf\": \"0\",\n                          \"name\":
      \"Email/query\",\n                          \"path\": \"/ids\"\n                        },\n
      \                       \"properties\": [\n                          \"threadId\"\n
      \                       ]\n                      }, \"1\" ],\n                      [
      \"Thread/get\", {\n                        \"accountId\": \"ue150411c\",\n                        \"#ids\":
      {\n                          \"resultOf\": \"1\",\n                          \"name\":
      \"Email/get\",\n                          \"path\": \"/list/*/threadId\"\n                        }\n
      \                     }, \"2\" ],\n                      [ \"Email/get\", {\n
      \                       \"accountId\": \"ue150411c\",\n                        \"#ids\":
      {\n                          \"resultOf\": \"2\",\n                          \"name\":
      \"Thread/get\",\n                          \"path\": \"/list/*/emailIds\"\n
      \                       },\n                        \"properties\": [\n                          \"threadId\",\n
      \                         \"mailboxIds\",\n                          \"keywords\",\n
      \                         \"hasAttachment\",\n                          \"from\",\n
      \                         \"subject\",\n                          \"receivedAt\",\n
      \                         \"size\",\n                          \"preview\"\n
      \                       ]\n                      }, \"3\" ]]\n   Let's break
      down the 4 method calls to see what they're doing:\n   \"0\": This asks the
      server for the ids of the first 30 Email objects\n   in the inbox, sorted newest
      first, ignoring Emails from the same\n   Thread as a newer Email in the Mailbox
      (i.e., it is the first 30\n   unique Threads).\n   \"1\": Now we use a back-reference
      to fetch the Thread ids for each of\n   these Email ids.\n   \"2\": Another
      back-reference fetches the Thread object for each of\n   these Thread ids.\n
      \  \"3\": Finally, we fetch the information we need to display the Mailbox\n
      \  listing (but no more!) for every Email in each of these 30 Threads.\n   The
      client may aggregate this data for display, for example, by\n   showing the
      Thread as \"flagged\" if any of the Emails in it has the\n   \"$flagged\" keyword.\n
      \  The response from the server may look something like this:\n    [[ \"Email/query\",
      {\n      \"accountId\": \"ue150411c\",\n      \"queryState\": \"09aa9a075588-780599:0\",\n
      \     \"canCalculateChanges\": true,\n      \"position\": 0,\n      \"total\":
      115,\n      \"ids\": [ \"Ma783e5cdf5f2deffbc97930a\",\n        \"M9bd17497e2a99cb345fc1d0a\",
      ... ]\n    }, \"0\" ],\n    [ \"Email/get\", {\n      \"accountId\": \"ue150411c\",\n
      \     \"state\": \"780599\",\n      \"list\": [{\n        \"id\": \"Ma783e5cdf5f2deffbc97930a\",\n
      \       \"threadId\": \"T36703c2cfe9bd5ed\"\n      }, {\n        \"id\": \"M9bd17497e2a99cb345fc1d0a\",\n
      \       \"threadId\": \"T0a22ad76e9c097a1\"\n      }, ... ],\n      \"notFound\":
      []\n    }, \"1\" ],\n    [ \"Thread/get\", {\n      \"accountId\": \"ue150411c\",\n
      \     \"state\": \"22a8728b\",\n      \"list\": [{\n        \"id\": \"T36703c2cfe9bd5ed\",\n
      \       \"emailIds\": [ \"Ma783e5cdf5f2deffbc97930a\" ]\n      }, {\n        \"id\":
      \"T0a22ad76e9c097a1\",\n        \"emailIds\": [ \"M3b568670a63e5d100f518fa5\",\n
      \         \"M9bd17497e2a99cb345fc1d0a\" ]\n      },  ... ],\n      \"notFound\":
      []\n    }, \"2\" ],\n    [ \"Email/get\", {\n      \"accountId\": \"ue150411c\",\n
      \     \"state\": \"780599\",\n      \"list\": [{\n        \"id\": \"Ma783e5cdf5f2deffbc97930a\",\n
      \       \"threadId\": \"T36703c2cfe9bd5ed\",\n        \"mailboxIds\": {\n          \"fb666a55\":
      true\n        },\n        \"keywords\": {\n          \"$seen\": true,\n          \"$flagged\":
      true\n        },\n        \"hasAttachment\": true,\n        \"from\": [{\n          \"email\":
      \"jdoe@example.com\",\n          \"name\": \"Jane Doe\"\n        }],\n        \"subject\":
      \"The Big Reveal\",\n        \"receivedAt\": \"2018-06-27T00:20:35Z\",\n        \"size\":
      175047,\n        \"preview\": \"As you may be aware, we are required to prepare
      a\n          presentation where we wow a panel of 5 random members of the\n
      \         public, on or before 30 June each year.  We have drafted...\"\n      },\n
      \     ...\n      ],\n      \"notFound\": []\n    }, \"3\" ]]\n   Now, on another
      device, the user marks the first Email as unread,\n   sending this API request:\n
      \                   [[ \"Email/set\", {\n                      \"accountId\":
      \"ue150411c\",\n                      \"update\": {\n                        \"Ma783e5cdf5f2deffbc97930a\":
      {\n                          \"keywords/$seen\": null\n                        }\n
      \                     }\n                    }, \"0\" ]]\n   The server applies
      this and sends the success response:\n                   [[ \"Email/set\", {\n
      \                    \"accountId\": \"ue150411c\",\n                     \"oldState\":
      \"780605\",\n                     \"newState\": \"780606\",\n                     \"updated\":
      {\n                       \"Ma783e5cdf5f2deffbc97930a\": null\n                     },\n
      \                    ...\n                   }, \"0\" ]]\n   The user also deletes
      a few Emails, and then a new message arrives.\n   Back on our original machine,
      we receive a push update that the state\n   string for Email is now \"780800\".
      \ As this does not match the\n   client's current state, it issues a request
      for the changes:\n               [[ \"Email/changes\", {\n                 \"accountId\":
      \"ue150411c\",\n                 \"sinceState\": \"780605\",\n                 \"maxChanges\":
      50\n               }, \"3\" ],\n               [ \"Email/queryChanges\", {\n
      \                \"accountId\": \"ue150411c\",\n                 \"filter\":
      {\n                   \"inMailbox\": \"fb666a55\"\n                 },\n                 \"sort\":
      [{\n                   \"property\": \"receivedAt\",\n                   \"isAscending\":
      false\n                 }],\n                 \"collapseThreads\": true,\n                 \"sinceQueryState\":
      \"09aa9a075588-780599:0\",\n                 \"upToId\": \"Mc2781d5e856a908d8a35a564\",\n
      \                \"maxChanges\": 25,\n                 \"calculateTotal\": true\n
      \              }, \"11\" ]]\n   The response:\n            [[ \"Email/changes\",
      {\n              \"accountId\": \"ue150411c\",\n              \"oldState\":
      \"780605\",\n              \"newState\": \"780800\",\n              \"hasMoreChanges\":
      false,\n              \"created\": [ \"Me8de6c9f6de198239b982ea2\" ],\n              \"updated\":
      [ \"Ma783e5cdf5f2deffbc97930a\" ],\n              \"destroyed\": [ \"M9bd17497e2a99cb345fc1d0a\",
      ... ]\n            }, \"3\" ],\n            [ \"Email/queryChanges\", {\n              \"accountId\":
      \"ue150411c\",\n              \"oldQueryState\": \"09aa9a075588-780599:0\",\n
      \             \"newQueryState\": \"e35e9facf117-780615:0\",\n              \"added\":
      [{\n                \"id\": \"Me8de6c9f6de198239b982ea2\",\n                \"index\":
      0\n              }],\n              \"removed\": [ \"M9bd17497e2a99cb345fc1d0a\"
      ],\n              \"total\": 115\n            }, \"11\" ]]\n   The client can
      update its local cache of the query results by\n   removing \"M9bd17497e2a99cb345fc1d0a\"
      and then splicing in\n   \"Me8de6c9f6de198239b982ea2\" at position 0.  As it
      does not have the\n   data for this new Email, it will then fetch it (it also
      could have\n   done this in the same request using back-references).\n   It
      knows something has changed about \"Ma783e5cdf5f2deffbc97930a\", so\n   it will
      refetch the Mailbox ids and keywords (the only mutable\n   properties) for this
      Email too.\n   The user starts composing a new Email.  The email is plaintext
      and\n   the client knows the email in English so adds this metadata to the\n
      \  body part.  The user saves a draft while the composition is still in\n   progress.
      \ The client sends:\n     [[ \"Email/set\", {\n       \"accountId\": \"ue150411c\",\n
      \      \"create\": {\n         \"k192\": {\n           \"mailboxIds\": {\n             \"2ea1ca41b38e\":
      true\n           },\n           \"keywords\": {\n             \"$seen\": true,\n
      \            \"$draft\": true\n           },\n           \"from\": [{\n             \"name\":
      \"Joe Bloggs\",\n             \"email\": \"joe@example.com\"\n           }],\n
      \          \"subject\": \"World domination\",\n           \"receivedAt\": \"2018-07-10T01:03:11Z\",\n
      \          \"sentAt\": \"2018-07-10T11:03:11+10:00\",\n           \"bodyStructure\":
      {\n             \"type\": \"text/plain\",\n             \"partId\": \"bd48\",\n
      \            \"header:Content-Language\": \"en\"\n           },\n           \"bodyValues\":
      {\n             \"bd48\": {\n               \"value\": \"I have the most brilliant
      plan.  Let me tell\n                 you all about it.  What we do is, we\",\n
      \              \"isTruncated\": false\n             }\n           }\n         }\n
      \      }\n     }, \"0\" ]]\n   The server creates the message and sends the
      success response:\n       [[ \"Email/set\", {\n         \"accountId\": \"ue150411c\",\n
      \        \"oldState\": \"780823\",\n         \"newState\": \"780839\",\n         \"created\":
      {\n           \"k192\": {\n             \"id\": \"Mf40b5f831efa7233b9eb1c7f\",\n
      \            \"blobId\": \"Gf40b5f831efa7233b9eb1c7f8f97d84eeeee64f7\",\n             \"threadId\":
      \"Td957e72e89f516dc\",\n             \"size\": 359\n           }\n         },\n
      \        ...\n       }, \"0\" ]]\n   The message created on the server looks
      something like this:\n Message-Id: <bbce0ae9-58be-4b24-ac82-deb840d58016@sloti7d1t02>\n
      User-Agent: Cyrus-JMAP/3.1.6-736-gdfb8e44\n Mime-Version: 1.0\n Date: Tue, 10
      Jul 2018 11:03:11 +1000\n From: \"Joe Bloggs\" <joe@example.com>\n Subject:
      World domination\n Content-Language: en\n Content-Type: text/plain\n I have
      the most brilliant plan.  Let me tell you all about it.  What we\n do is, we\n
      \  The user adds a recipient and converts the message to HTML so they\n   can
      add formatting, then saves an updated draft:\n [[ \"Email/set\", {\n   \"accountId\":
      \"ue150411c\",\n   \"create\": {\n     \"k1546\": {\n       \"mailboxIds\":
      {\n         \"2ea1ca41b38e\": true\n       },\n       \"keywords\": {\n         \"$seen\":
      true,\n         \"$draft\": true\n       },\n       \"from\": [{\n         \"name\":
      \"Joe Bloggs\",\n         \"email\": \"joe@example.com\"\n       }],\n       \"to\":
      [{\n         \"name\": \"John\",\n         \"email\": \"john@example.com\"\n
      \      }],\n       \"subject\": \"World domination\",\n       \"receivedAt\":
      \"2018-07-10T01:05:08Z\",\n       \"sentAt\": \"2018-07-10T11:05:08+10:00\",\n
      \      \"bodyStructure\": {\n         \"type\": \"multipart/alternative\",\n
      \        \"subParts\": [{\n           \"partId\": \"a49d\",\n           \"type\":
      \"text/html\",\n           \"header:Content-Language\": \"en\"\n         },
      {\n           \"partId\": \"bd48\",\n           \"type\": \"text/plain\",\n
      \          \"header:Content-Language\": \"en\"\n         }]\n       },\n       \"bodyValues\":
      {\n         \"bd48\": {\n           \"value\": \"I have the most brilliant plan.
      \ Let me tell\n             you all about it.  What we do is, we\",\n           \"isTruncated\":
      false\n         },\n         \"a49d\": {\n           \"value\": \"<!DOCTYPE
      html><html><head><title></title>\n             <style type=\\\"text/css\\\">div{font-size:16px}</style></head>\n
      \            <body><div>I have the most <b>brilliant</b> plan.  Let me\n             tell
      you all about it.  What we do is, we</div></body>\n             </html>\",\n
      \          \"isTruncated\": false\n         }\n       }\n     }\n   },\n   \"destroy\":
      [ \"Mf40b5f831efa7233b9eb1c7f\" ]\n }, \"0\" ]]\n   The server creates the new
      draft, deletes the old one, and sends the\n   success response:\n       [[ \"Email/set\",
      {\n         \"accountId\": \"ue150411c\",\n         \"oldState\": \"780839\",\n
      \        \"newState\": \"780842\",\n         \"created\": {\n           \"k1546\":
      {\n             \"id\": \"Md45b47b4877521042cec0938\",\n             \"blobId\":
      \"Ge8de6c9f6de198239b982ea214e0f3a704e4af74\",\n             \"threadId\": \"Td957e72e89f516dc\",\n
      \            \"size\": 11721\n           }\n         },\n         \"destroyed\":
      [ \"Mf40b5f831efa7233b9eb1c7f\" ],\n         ...\n       }, \"0\" ]]\n   The
      client moves this draft to a different account.  The only way to\n   do this
      is via the \"Email/copy\" method.  It MUST set a new\n   \"mailboxIds\" property,
      since the current value will not be valid\n   Mailbox ids in the destination
      account:\n                 [[ \"Email/copy\", {\n                   \"fromAccountId\":
      \"ue150411c\",\n                   \"accountId\": \"u6c6c41ac\",\n                   \"create\":
      {\n                     \"k45\": {\n                       \"id\": \"Md45b47b4877521042cec0938\",\n
      \                      \"mailboxIds\": {\n                         \"75a4c956\":
      true\n                       }\n                     }\n                   },\n
      \                  \"onSuccessDestroyOriginal\": true\n                 }, \"0\"
      ]]\n   The server successfully copies the Email and deletes the original.\n
      \  Due to the implicit call to \"Email/set\", there are two responses to\n   the
      single method call, both with the same method call id:\n       [[ \"Email/copy\",
      {\n         \"fromAccountId\": \"ue150411c\",\n         \"accountId\": \"u6c6c41ac\",\n
      \        \"oldState\": \"7ee7e9263a6d\",\n         \"newState\": \"5a0d2447ed26\",\n
      \        \"created\": {\n           \"k45\": {\n             \"id\": \"M138f9954a5cd2423daeafa55\",\n
      \            \"blobId\": \"G6b9fb047cba722c48c611e79233d057c6b0b74e8\",\n             \"threadId\":
      \"T2f242ea424a4079a\",\n             \"size\": 11721\n           }\n         },\n
      \        \"notCreated\": null\n       }, \"0\" ],\n       [ \"Email/set\", {\n
      \        \"accountId\": \"ue150411c\",\n         \"oldState\": \"780842\",\n
      \        \"newState\": \"780871\",\n         \"destroyed\": [ \"Md45b47b4877521042cec0938\"
      ],\n         ...\n       }, \"0\" ]]\n"
    title: 4.10.  Examples
  title: 4.  Emails
- contents:
  - "5.  Search Snippets\n   When doing a search on a \"String\" property, the client
    may wish to\n   show the relevant section of the body that matches the search
    as a\n   preview and to highlight any matching terms in both this and the\n   subject
    of the Email.  Search snippets represent this data.\n   A *SearchSnippet* object
    has the following properties:\n   o  emailId: \"Id\"\n      The Email id the snippet
    applies to.\n   o  subject: \"String|null\"\n      If text from the filter matches
    the subject, this is the subject\n      of the Email with the following transformations:\n
    \     1.  Any instance of the following three characters MUST be\n          replaced
    by an appropriate HTML entity: & (ampersand), <\n          (less-than sign), and
    > (greater-than sign) [HTML].  Other\n          characters MAY also be replaced
    with an HTML entity form.\n      2.  The matching words/phrases from the filter
    are wrapped in HTML\n          \"<mark></mark>\" tags.\n      If the subject does
    not match text from the filter, this property\n      is null.\n   o  preview:
    \"String|null\"\n      If text from the filter matches the plaintext or HTML body,
    this\n      is the relevant section of the body (converted to plaintext if\n      originally
    HTML), with the same transformations as the \"subject\"\n      property.  It MUST
    NOT be bigger than 255 octets in size.  If the\n      body does not contain a
    match for the text from the filter, this\n      property is null.\n   What is
    a relevant section of the body for preview is server defined.\n   If the server
    is unable to determine search snippets, it MUST return\n   null for both the \"subject\"
    and \"preview\" properties.\n   Note that unlike most data types, a SearchSnippet
    DOES NOT have a\n   property called \"id\".\n   The following JMAP method is supported.\n"
  - contents:
    - "5.1.  SearchSnippet/get\n   To fetch search snippets, make a call to \"SearchSnippet/get\".
      \ It\n   takes the following arguments:\n   o  accountId: \"Id\"\n      The
      id of the account to use.\n   o  filter: \"FilterOperator|FilterCondition|null\"\n
      \     The same filter as passed to \"Email/query\"; see the description of\n
      \     this method in Section 4.4 for details.\n   o  emailIds: \"Id[]\"\n      The
      ids of the Emails to fetch snippets for.\n   The response has the following
      arguments:\n   o  accountId: \"Id\"\n      The id of the account used for the
      call.\n   o  list: \"SearchSnippet[]\"\n      An array of SearchSnippet objects
      for the requested Email ids.\n      This may not be in the same order as the
      ids that were in the\n      request.\n   o  notFound: \"Id[]|null\"\n      An
      array of Email ids requested that could not be found, or null\n      if all
      ids were found.\n   As the search snippets are derived from the message content
      and the\n   algorithm for doing so could change over time, fetching the same\n
      \  snippets a second time MAY return a different result.  However, the\n   previous
      value is not considered incorrect, so there is no state\n   string or update
      mechanism needed.\n   The following additional errors may be returned instead
      of the\n   \"SearchSnippet/get\" response:\n   \"requestTooLarge\": The number
      of \"emailIds\" requested by the client\n   exceeds the maximum number the server
      is willing to process in a\n   single method call.\n   \"unsupportedFilter\":
      The server is unable to process the given\n   \"filter\" for any reason.\n"
    title: 5.1.  SearchSnippet/get
  - contents:
    - "5.2.  Example\n   Here, we did an \"Email/query\" to search for any Email in
      the account\n   containing the word \"foo\"; now, we are fetching the search
      snippets\n   for some of the ids that were returned in the results:\n                     [[
      \"SearchSnippet/get\", {\n                       \"accountId\": \"ue150411c\",\n
      \                      \"filter\": {\n                         \"text\": \"foo\"\n
      \                      },\n                       \"emailIds\": [\n                         \"M44200ec123de277c0c1ce69c\",\n
      \                        \"M7bcbcb0b58d7729686e83d99\",\n                         \"M28d12783a0969584b6deaac0\",\n
      \                        ...\n                       ]\n                     },
      \"0\" ]]\n   Example response:\n   [[ \"SearchSnippet/get\", {\n     \"accountId\":
      \"ue150411c\",\n     \"list\": [{\n         \"emailId\": \"M44200ec123de277c0c1ce69c\",\n
      \        \"subject\": null,\n         \"preview\": null\n     }, {\n         \"emailId\":
      \"M7bcbcb0b58d7729686e83d99\",\n         \"subject\": \"The <mark>Foo</mark>sball
      competition\",\n         \"preview\": \"...year the <mark>foo</mark>sball competition
      will\n           be held in the Stadium de ...\"\n     }, {\n         \"emailId\":
      \"M28d12783a0969584b6deaac0\",\n         \"subject\": null,\n         \"preview\":
      \"...the <mark>Foo</mark>/bar method results often\n           returns &lt;1
      widget rather than the complete...\"\n     },\n     ...\n     ],\n     \"notFound\":
      null\n   }, \"0\" ]]\n"
    title: 5.2.  Example
  title: 5.  Search Snippets
- contents:
  - "6.  Identities\n   An *Identity* object stores information about an email address
    or\n   domain the user may send from.  It has the following properties:\n   o
    \ id: \"Id\" (immutable; server-set)\n      The id of the Identity.\n   o  name:
    \"String\" (default: \"\")\n      The \"From\" name the client SHOULD use when
    creating a new Email\n      from this Identity.\n   o  email: \"String\" (immutable)\n
    \     The \"From\" email address the client MUST use when creating a new\n      Email
    from this Identity.  If the \"mailbox\" part of the address\n      (the section
    before the \"@\") is the single character \"*\" (e.g.,\n      \"*@example.com\"),
    the client may use any valid address ending in\n      that domain (e.g., \"foo@example.com\").\n
    \  o  replyTo: \"EmailAddress[]|null\" (default: null)\n      The Reply-To value
    the client SHOULD set when creating a new Email\n      from this Identity.\n   o
    \ bcc: \"EmailAddress[]|null\" (default: null)\n      The Bcc value the client
    SHOULD set when creating a new Email from\n      this Identity.\n   o  textSignature:
    \"String\" (default: \"\")\n      A signature the client SHOULD insert into new
    plaintext messages\n      that will be sent from this Identity.  Clients MAY ignore
    this\n      and/or combine this with a client-specific signature preference.\n
    \  o  htmlSignature: \"String\" (default: \"\")\n      A signature the client
    SHOULD insert into new HTML messages that\n      will be sent from this Identity.
    \ This text MUST be an HTML\n      snippet to be inserted into the \"<body></body>\"
    section of the\n      HTML.  Clients MAY ignore this and/or combine this with
    a client-\n      specific signature preference.\n   o  mayDelete: \"Boolean\"
    (server-set)\n      Is the user allowed to delete this Identity?  Servers may
    wish to\n      set this to false for the user's username or other default\n      address.
    \ Attempts to destroy an Identity with \"mayDelete: false\"\n      will be rejected
    with a standard \"forbidden\" SetError.\n   See the \"Addresses\" header form
    description in the Email object\n   (Section 4.1.2.3) for the definition of EmailAddress.\n
    \  Multiple identities with the same email address MAY exist, to allow\n   for
    different settings the user wants to pick between (for example,\n   with different
    names/signatures).\n   The following JMAP methods are supported.\n"
  - contents:
    - "6.1.  Identity/get\n   This is a standard \"/get\" method as described in [RFC8620],\n
      \  Section 5.1.  The \"ids\" argument may be null to fetch all at once.\n"
    title: 6.1.  Identity/get
  - contents:
    - "6.2.  Identity/changes\n   This is a standard \"/changes\" method as described
      in [RFC8620],\n   Section 5.2.\n"
    title: 6.2.  Identity/changes
  - contents:
    - "6.3.  Identity/set\n   This is a standard \"/set\" method as described in [RFC8620],\n
      \  Section 5.3.  The following extra SetError types are defined:\n   For \"create\":\n
      \  o  \"forbiddenFrom\": The user is not allowed to send from the address\n
      \     given as the \"email\" property of the Identity.\n"
    title: 6.3.  Identity/set
  - contents:
    - "6.4.  Example\n   Request:\n                           [ \"Identity/get\",
      {\n                             \"accountId\": \"acme\"\n                           },
      \"0\" ]\n   with response:\n        [ \"Identity/get\", {\n          \"accountId\":
      \"acme\",\n          \"state\": \"99401312ae-11-333\",\n          \"list\":
      [\n            {\n              \"id\": \"XD-3301-222-11_22AAz\",\n              \"name\":
      \"Joe Bloggs\",\n              \"email\": \"joe@example.com\",\n              \"replyTo\":
      null,\n              \"bcc\": [{\n                \"name\": null,\n                \"email\":
      \"joe+archive@example.com\"\n              }],\n              \"textSignature\":
      \"-- \\nJoe Bloggs\\nMaster of Email\",\n              \"htmlSignature\": \"<div><b>Joe
      Bloggs</b></div>\n                <div>Master of Email</div>\",\n              \"mayDelete\":
      false\n            },\n            {\n              \"id\": \"XD-9911312-11_22AAz\",\n
      \             \"name\": \"Joe B\",\n              \"email\": \"*@example.com\",\n
      \             \"replyTo\": null,\n              \"bcc\": null,\n              \"textSignature\":
      \"\",\n              \"htmlSignature\": \"\",\n              \"mayDelete\":
      true\n            }\n          ],\n          \"notFound\": []\n        }, \"0\"
      ]\n"
    title: 6.4.  Example
  title: 6.  Identities
- contents:
  - "7.  Email Submission\n   An *EmailSubmission* object represents the submission
    of an Email for\n   delivery to one or more recipients.  It has the following
    properties:\n   o  id: \"Id\" (immutable; server-set)\n      The id of the EmailSubmission.\n
    \  o  identityId: \"Id\" (immutable)\n      The id of the Identity to associate
    with this submission.\n   o  emailId: \"Id\" (immutable)\n      The id of the
    Email to send.  The Email being sent does not have\n      to be a draft, for example,
    when \"redirecting\" an existing Email\n      to a different address.\n   o  threadId:
    \"Id\" (immutable; server-set)\n      The Thread id of the Email to send.  This
    is set by the server to\n      the \"threadId\" property of the Email referenced
    by the \"emailId\".\n   o  envelope: \"Envelope|null\" (immutable)\n      Information
    for use when sending via SMTP.  An *Envelope* object\n      has the following
    properties:\n      *  mailFrom: \"Address\"\n         The email address to use
    as the return address in the SMTP\n         submission, plus any parameters to
    pass with the MAIL FROM\n         address.  The JMAP server MAY allow the address
    to be the empty\n         string.\n         When a JMAP server performs an SMTP
    message submission, it MAY\n         use the same id string for the ENVID parameter
    [RFC3461] and\n         the EmailSubmission object id.  Servers that do this MAY\n
    \        replace a client-provided value for ENVID with a server-\n         provided
    value.\n      *  rcptTo: \"Address[]\"\n         The email addresses to send the
    message to, and any RCPT TO\n         parameters to pass with the recipient.\n
    \     An *Address* object has the following properties:\n      *  email: \"String\"\n
    \        The email address being represented by the object.  This is a\n         \"Mailbox\"
    as used in the Reverse-path or Forward-path of the\n         MAIL FROM or RCPT
    TO command in [RFC5321].\n      *  parameters: \"Object|null\"\n         Any parameters
    to send with the email address (either mail-\n         parameter or rcpt-parameter
    as appropriate, as specified in\n         [RFC5321]).  If supplied, each key in
    the object is a parameter\n         name, and the value is either the parameter
    value (type\n         \"String\") or null if the parameter does not take a value.
    \ For\n         both name and value, any xtext or unitext encodings are removed\n
    \        (see [RFC3461] and [RFC6533]) and JSON string encoding is\n         applied.\n
    \     If the \"envelope\" property is null or omitted on creation, the\n      server
    MUST generate this from the referenced Email as follows:\n      *  \"mailFrom\":
    The email address in the Sender header field, if\n         present; otherwise,
    it's the email address in the From header\n         field, if present.  In either
    case, no parameters are added.\n         If multiple addresses are present in
    one of these header\n         fields, or there is more than one Sender/From header
    field, the\n         server SHOULD reject the EmailSubmission as invalid; otherwise,\n
    \        it MUST take the first address in the last Sender/From header\n         field.\n
    \        If the address found from this is not allowed by the Identity\n         associated
    with this submission, the \"email\" property from the\n         Identity MUST
    be used instead.\n      *  \"rcptTo\": The deduplicated set of email addresses
    from the To,\n         Cc, and Bcc header fields, if present, with no parameters
    for\n         any of them.\n   o  sendAt: \"UTCDate\" (immutable; server-set)\n
    \     The date the submission was/will be released for delivery.  If the\n      client
    successfully used FUTURERELEASE [RFC4865] with the\n      submission, this MUST
    be the time when the server will release the\n      message; otherwise, it MUST
    be the time the EmailSubmission was\n      created.\n   o  undoStatus: \"String\"\n
    \     This represents whether the submission may be canceled.  This is\n      server
    set on create and MUST be one of the following values:\n      *  \"pending\":
    It may be possible to cancel this submission.\n      *  \"final\": The message
    has been relayed to at least one recipient\n         in a manner that cannot be
    recalled.  It is no longer possible\n         to cancel this submission.\n      *
    \ \"canceled\": The submission was canceled and will not be\n         delivered
    to any recipient.\n      On systems that do not support unsending, the value of
    this\n      property will always be \"final\".  On systems that do support\n      canceling
    submission, it will start as \"pending\" and MAY\n      transition to \"final\"
    when the server knows it definitely cannot\n      recall the message, but it MAY
    just remain \"pending\".  If in\n      pending state, a client can attempt to
    cancel the submission by\n      setting this property to \"canceled\"; if the
    update succeeds, the\n      submission was successfully canceled, and the message
    has not been\n      delivered to any of the original recipients.\n   o  deliveryStatus:
    \"String[DeliveryStatus]|null\" (server-set)\n      This represents the delivery
    status for each of the submission's\n      recipients, if known.  This property
    MAY not be supported by all\n      servers, in which case it will remain null.
    \ Servers that support\n      it SHOULD update the EmailSubmission object each
    time the status\n      of any of the recipients changes, even if some recipients
    are\n      still being retried.\n      This value is a map from the email address
    of each recipient to a\n      DeliveryStatus object.\n      A *DeliveryStatus*
    object has the following properties:\n      *  smtpReply: \"String\"\n         The
    SMTP reply string returned for this recipient when the\n         server last tried
    to relay the message, or in a later Delivery\n         Status Notification (DSN,
    as defined in [RFC3464]) response for\n         the message.  This SHOULD be the
    response to the RCPT TO stage,\n         unless this was accepted and the message
    as a whole was\n         rejected at the end of the DATA stage, in which case
    the DATA\n         stage reply SHOULD be used instead.\n         Multi-line SMTP
    responses should be concatenated to a single\n         string as follows:\n         +
    \ The hyphen following the SMTP code on all but the last line\n            is
    replaced with a space.\n         +  Any prefix in common with the first line is
    stripped from\n            lines after the first.\n         +  CRLF is replaced
    by a space.\n         For example:\n          550-5.7.1 Our system has detected
    that this message is\n          550 5.7.1 likely spam.\n         would become:\n
    \   550 5.7.1 Our system has detected that this message is likely spam.\n         For
    messages relayed via an alternative to SMTP, the server MAY\n         generate
    a synthetic string representing the status instead.\n         If it does this,
    the string MUST be of the following form:\n         +  A 3-digit SMTP reply code,
    as defined in [RFC5321],\n            Section 4.2.3.\n         +  Then a single
    space character.\n         +  Then an SMTP Enhanced Mail System Status Code as
    defined in\n            [RFC3463], with a registry defined in [RFC5248].\n         +
    \ Then a single space character.\n         +  Then an implementation-specific
    information string with a\n            human-readable explanation of the response.\n
    \     *  delivered: \"String\"\n         Represents whether the message has been
    successfully delivered\n         to the recipient.  This MUST be one of the following
    values:\n         +  \"queued\": The message is in a local mail queue and the\n
    \           status will change once it exits the local mail queues.  The\n            \"smtpReply\"
    property may still change.\n         +  \"yes\": The message was successfully
    delivered to the mail\n            store of the recipient.  The \"smtpReply\"
    property is final.\n         +  \"no\": Delivery to the recipient permanently
    failed.  The\n            \"smtpReply\" property is final.\n         +  \"unknown\":
    The final delivery status is unknown, (e.g., it\n            was relayed to an
    external machine and no further\n            information is available).  The \"smtpReply\"
    property may\n            still change if a DSN arrives.\n         Note that successful
    relaying to an external SMTP server SHOULD\n         NOT be taken as an indication
    that the message has successfully\n         reached the final mail store.  In
    this case though, the server\n         may receive a DSN response, if requested.\n
    \        If a DSN is received for the recipient with Action equal to\n         \"delivered\",
    as per [RFC3464], Section 2.3.3, then the\n         \"delivered\" property SHOULD
    be set to \"yes\"; if the Action\n         equals \"failed\", the property SHOULD
    be set to \"no\".  Receipt\n         of any other DSN SHOULD NOT affect this property.\n
    \        The server MAY also set this property based on other feedback\n         channels.\n
    \     *  displayed: \"String\"\n         Represents whether the message has been
    displayed to the\n         recipient.  This MUST be one of the following values:\n
    \        +  \"unknown\": The display status is unknown.  This is the\n            initial
    value.\n         +  \"yes\": The recipient's system claims the message content
    has\n            been displayed to the recipient.  Note that there is no\n            guarantee
    that the recipient has noticed, read, or\n            understood the content.\n
    \        If a Message Disposition Notification (MDN) is received for\n         this
    recipient with Disposition-Type (as per [RFC8098],\n         Section 3.2.6.2)
    equal to \"displayed\", this property SHOULD be\n         set to \"yes\".\n         The
    server MAY also set this property based on other feedback\n         channels.\n
    \  o  dsnBlobIds: \"Id[]\" (server-set)\n      A list of blob ids for DSNs [RFC3464]
    received for this\n      submission, in order of receipt, oldest first.  The blob
    is the\n      whole MIME message (with a top-level content-type of \"multipart/\n
    \     report\"), as received.\n   o  mdnBlobIds: \"Id[]\" (server-set)\n      A
    list of blob ids for MDNs [RFC8098] received for this\n      submission, in order
    of receipt, oldest first.  The blob is the\n      whole MIME message (with a top-level
    content-type of \"multipart/\n      report\"), as received.\n   JMAP servers MAY
    choose not to expose DSN and MDN responses as Email\n   objects if they correlate
    to an EmailSubmission object.  It SHOULD\n   only do this if it exposes them in
    the \"dsnBlobIds\" and \"mdnblobIds\"\n   fields instead, and it expects the user
    to be using clients capable\n   of fetching and displaying delivery status via
    the EmailSubmission\n   object.\n   For efficiency, a server MAY destroy EmailSubmission
    objects at any\n   time after the message is successfully sent or after it has
    finished\n   retrying to send the message.  For very basic SMTP proxies, this
    MAY\n   be immediately after creation, as it has no way to assign a real id\n
    \  and return the information again if fetched later.\n   The following JMAP methods
    are supported.\n"
  - contents:
    - "7.1.  EmailSubmission/get\n   This is a standard \"/get\" method as described
      in [RFC8620],\n   Section 5.1.\n"
    title: 7.1.  EmailSubmission/get
  - contents:
    - "7.2.  EmailSubmission/changes\n   This is a standard \"/changes\" method as
      described in [RFC8620],\n   Section 5.2.\n"
    title: 7.2.  EmailSubmission/changes
  - contents:
    - "7.3.  EmailSubmission/query\n   This is a standard \"/query\" method as described
      in [RFC8620],\n   Section 5.5.\n   A *FilterCondition* object has the following
      properties, any of which\n   may be omitted:\n   o  identityIds: \"Id[]\"\n
      \     The EmailSubmission \"identityId\" property must be in this list to\n
      \     match the condition.\n   o  emailIds: \"Id[]\"\n      The EmailSubmission
      \"emailId\" property must be in this list to\n      match the condition.\n   o
      \ threadIds: \"Id[]\"\n      The EmailSubmission \"threadId\" property must
      be in this list to\n      match the condition.\n   o  undoStatus: \"String\"\n
      \     The EmailSubmission \"undoStatus\" property must be identical to the\n
      \     value given to match the condition.\n   o  before: \"UTCDate\"\n      The
      \"sendAt\" property of the EmailSubmission object must be before\n      this
      date-time to match the condition.\n   o  after: \"UTCDate\"\n      The \"sendAt\"
      property of the EmailSubmission object must be the\n      same as or after this
      date-time to match the condition.\n   An EmailSubmission object matches the
      FilterCondition if and only if\n   all of the given conditions match.  If zero
      properties are specified,\n   it is automatically true for all objects.\n   The
      following EmailSubmission properties MUST be supported for\n   sorting:\n   o
      \ \"emailId\"\n   o  \"threadId\"\n   o  \"sentAt\"\n"
    title: 7.3.  EmailSubmission/query
  - contents:
    - "7.4.  EmailSubmission/queryChanges\n   This is a standard \"/queryChanges\"
      method as described in [RFC8620],\n   Section 5.6.\n"
    title: 7.4.  EmailSubmission/queryChanges
  - contents:
    - "7.5.  EmailSubmission/set\n   This is a standard \"/set\" method as described
      in [RFC8620],\n   Section 5.3 with the following two additional request arguments:\n
      \  o  onSuccessUpdateEmail: \"Id[PatchObject]|null\"\n      A map of EmailSubmission
      id to an object containing properties to\n      update on the Email object referenced
      by the EmailSubmission if\n      the create/update/destroy succeeds.  (For references
      to\n      EmailSubmissions created in the same \"/set\" invocation, this is\n
      \     equivalent to a creation-reference, so the id will be the creation\n      id
      prefixed with a \"#\".)\n   o  onSuccessDestroyEmail: \"Id[]|null\"\n      A
      list of EmailSubmission ids for which the Email with the\n      corresponding
      \"emailId\" should be destroyed if the create/update/\n      destroy succeeds.
      \ (For references to EmailSubmission creations,\n      this is equivalent to
      a creation-reference, so the id will be the\n      creation id prefixed with
      a \"#\".)\n   After all create/update/destroy items in the \"EmailSubmission/set\"\n
      \  invocation have been processed, a single implicit \"Email/set\" call\n   MUST
      be made to perform any changes requested in these two arguments.\n   The response
      to this MUST be returned after the \"EmailSubmission/set\"\n   response.\n   An
      Email is sent by creating an EmailSubmission object.  When\n   processing each
      create, the server must check that the message is\n   valid, and the user has
      sufficient authorisation to send it.  If the\n   creation succeeds, the message
      will be sent to the recipients given\n   in the envelope \"rcptTo\" parameter.
      \ The server MUST remove any Bcc\n   header field present on the message during
      delivery.  The server MAY\n   add or remove other header fields from the submitted
      message or make\n   further alterations in accordance with the server's policy
      during\n   delivery.\n   If the referenced Email is destroyed at any point after
      the\n   EmailSubmission object is created, this MUST NOT change the behaviour\n
      \  of the submission (i.e., it does not cancel a future send).  The\n   \"emailId\"
      and \"threadId\" properties of the EmailSubmission object\n   remain, but trying
      to fetch them (with a standard \"Email/get\" call)\n   will return a \"notFound\"
      error if the corresponding objects have been\n   destroyed.\n   Similarly, destroying
      an EmailSubmission object MUST NOT affect the\n   deliveries it represents.
      \ It purely removes the record of the\n   submission.  The server MAY automatically
      destroy EmailSubmission\n   objects after some time or in response to other
      triggers, and MAY\n   forbid the client from manually destroying EmailSubmission
      objects.\n   If the message to be sent is larger than the server supports sending,\n
      \  a standard \"tooLarge\" SetError MUST be returned.  A \"maxSize\"\n   \"UnsignedInt\"
      property MUST be present on the SetError specifying the\n   maximum size of
      a message that may be sent, in octets.\n   If the Email or Identity id given
      cannot be found, the submission\n   creation is rejected with a standard \"invalidProperties\"
      SetError.\n   The following extra SetError types are defined:\n   For \"create\":\n
      \  o  \"invalidEmail\" - The Email to be sent is invalid in some way.  The\n
      \     SetError SHOULD contain a property called \"properties\" of type\n      \"String[]\"
      that lists *all* the properties of the Email that were\n      invalid.\n   o
      \ \"tooManyRecipients\" - The envelope (supplied or generated) has\n      more
      recipients than the server allows.  A \"maxRecipients\"\n      \"UnsignedInt\"
      property MUST also be present on the SetError\n      specifying the maximum
      number of allowed recipients.\n   o  \"noRecipients\" - The envelope (supplied
      or generated) does not\n      have any rcptTo email addresses.\n   o  \"invalidRecipients\"
      - The \"rcptTo\" property of the envelope\n      (supplied or generated) contains
      at least one rcptTo value, which\n      is not a valid email address for sending
      to.  An\n      \"invalidRecipients\" \"String[]\" property MUST also be present
      on\n      the SetError, which is a list of the invalid addresses.\n   o  \"forbiddenMailFrom\"
      - The server does not permit the user to send\n      a message with the envelope
      From address [RFC5321].\n   o  \"forbiddenFrom\" - The server does not permit
      the user to send a\n      message with the From header field [RFC5322] of the
      message to be\n      sent.\n   o  \"forbiddenToSend\" - The user does not have
      permission to send at\n      all right now for some reason.  A \"description\"
      \"String\" property\n      MAY be present on the SetError object to display
      to the user why\n      they are not permitted.\n   For \"update\":\n   o  \"cannotUnsend\"
      - The client attempted to update the \"undoStatus\"\n      of a valid EmailSubmission
      object from \"pending\" to \"canceled\",\n      but the message cannot be unsent.\n"
    - contents:
      - "7.5.1.  Example\n   The following example presumes a draft of the Email to
        be sent has\n   already been saved, and its Email id is \"M7f6ed5bcfd7e2604d1753f6c\".\n
        \  This call then sends the Email immediately, and if successful,\n   removes
        the \"$draft\" flag and moves it from the drafts folder (which\n   has Mailbox
        id \"7cb4e8ee-df87-4757-b9c4-2ea1ca41b38e\") to the sent\n   folder (which
        we presume has Mailbox id \"73dbcb4b-bffc-48bd-8c2a-\n   a2e91ca672f6\").\n
        \     [[ \"EmailSubmission/set\", {\n        \"accountId\": \"ue411d190\",\n
        \       \"create\": {\n          \"k1490\": {\n            \"identityId\":
        \"I64588216\",\n            \"emailId\": \"M7f6ed5bcfd7e2604d1753f6c\",\n
        \           \"envelope\": {\n              \"mailFrom\": {\n                \"email\":
        \"john@example.com\",\n                \"parameters\": null\n              },\n
        \             \"rcptTo\": [{\n                \"email\": \"jane@example.com\",\n
        \               \"parameters\": null\n              },\n              ...\n
        \             ]\n            }\n          }\n        },\n        \"onSuccessUpdateEmail\":
        {\n          \"#k1490\": {\n            \"mailboxIds/7cb4e8ee-df87-4757-b9c4-2ea1ca41b38e\":
        null,\n            \"mailboxIds/73dbcb4b-bffc-48bd-8c2a-a2e91ca672f6\": true,\n
        \           \"keywords/$draft\": null\n          }\n        }\n      }, \"0\"
        ]]\n   A successful response might look like this.  Note that there are two\n
        \  responses due to the implicit \"Email/set\" call, but both have the\n   same
        method call id as they are due to the same call in the request:\n           [[
        \"EmailSubmission/set\", {\n             \"accountId\": \"ue411d190\",\n             \"oldState\":
        \"012421s6-8nrq-4ps4-n0p4-9330r951ns21\",\n             \"newState\": \"355421f6-8aed-4cf4-a0c4-7377e951af36\",\n
        \            \"created\": {\n               \"k1490\": {\n                 \"id\":
        \"ES-3bab7f9a-623e-4acf-99a5-2e67facb02a0\"\n               }\n             }\n
        \          }, \"0\" ],\n           [ \"Email/set\", {\n             \"accountId\":
        \"ue411d190\",\n             \"oldState\": \"778193\",\n             \"newState\":
        \"778197\",\n             \"updated\": {\n                 \"M7f6ed5bcfd7e2604d1753f6c\":
        null\n             }\n           }, \"0\" ]]\n   Suppose instead an admin
        has removed sending rights for the user, so\n   the submission is rejected
        with a \"forbiddenToSend\" error.  The\n   description argument of the error
        is intended for display to the\n   user, so it should be localised appropriately.
        \ Let's suppose the\n   request was sent with an Accept-Language header like
        this:\n                    Accept-Language: de;q=0.9,en;q=0.8\n   The server
        should attempt to choose the best localisation from those\n   it has available
        based on the Accept-Language header, as described in\n   [RFC8620], Section
        3.8.  If the server has English, French, and\n   German translations, it would
        choose German as the preferred language\n   and return a response like this:\n"
      - "[[ \"EmailSubmission/set\", {\n  \"accountId\": \"ue411d190\",\n  \"oldState\":
        \"012421s6-8nrq-4ps4-n0p4-9330r951ns21\",\n  \"newState\": \"012421s6-8nrq-4ps4-n0p4-9330r951ns21\",\n
        \ \"notCreated\": {\n    \"k1490\": {\n      \"type\": \"forbiddenToSend\",\n
        \     \"description\": \"Verzeihung, wegen verdaechtiger Aktivitaeten Ihres\n
        \      Benutzerkontos haben wir den Versand von Nachrichten gesperrt.\n       Bitte
        wenden Sie sich fuer Hilfe an unser Support Team.\"\n    }\n  }\n"
      - '}, "0" ]]

        '
      title: 7.5.1.  Example
    title: 7.5.  EmailSubmission/set
  title: 7.  Email Submission
- contents:
  - "8.  Vacation Response\n   A vacation response sends an automatic reply when a
    message is\n   delivered to the mail store, informing the original sender that
    their\n   message may not be read for some time.\n   Automated message sending
    can produce undesirable behaviour.  To\n   avoid this, implementors MUST follow
    the recommendations set forth in\n   [RFC3834].\n   The *VacationResponse* object
    represents the state of vacation-\n   response-related settings for an account.
    \ It has the following\n   properties:\n   o  id: \"Id\" (immutable; server-set)\n
    \     The id of the object.  There is only ever one VacationResponse\n      object,
    and its id is \"singleton\".\n   o  isEnabled: \"Boolean\"\n      Should a vacation
    response be sent if a message arrives between\n      the \"fromDate\" and \"toDate\"?\n
    \  o  fromDate: \"UTCDate|null\"\n      If \"isEnabled\" is true, messages that
    arrive on or after this\n      date-time (but before the \"toDate\" if defined)
    should receive the\n      user's vacation response.  If null, the vacation response
    is\n      effective immediately.\n   o  toDate: \"UTCDate|null\"\n      If \"isEnabled\"
    is true, messages that arrive before this date-time\n      (but on or after the
    \"fromDate\" if defined) should receive the\n      user's vacation response.  If
    null, the vacation response is\n      effective indefinitely.\n   o  subject:
    \"String|null\"\n      The subject that will be used by the message sent in response
    to\n      messages when the vacation response is enabled.  If null, an\n      appropriate
    subject SHOULD be set by the server.\n   o  textBody: \"String|null\"\n      The
    plaintext body to send in response to messages when the\n      vacation response
    is enabled.  If this is null, the server SHOULD\n      generate a plaintext body
    part from the \"htmlBody\" when sending\n      vacation responses but MAY choose
    to send the response as HTML\n      only.  If both \"textBody\" and \"htmlBody\"
    are null, an appropriate\n      default body SHOULD be generated for responses
    by the server.\n   o  htmlBody: \"String|null\"\n      The HTML body to send in
    response to messages when the vacation\n      response is enabled.  If this is
    null, the server MAY choose to\n      generate an HTML body part from the \"textBody\"
    when sending\n      vacation responses or MAY choose to send the response as plaintext\n
    \     only.\n   The following JMAP methods are supported.\n"
  - contents:
    - "8.1.  VacationResponse/get\n   This is a standard \"/get\" method as described
      in [RFC8620],\n   Section 5.1.\n   There MUST only be exactly one VacationResponse
      object in an account.\n   It MUST have the id \"singleton\".\n"
    title: 8.1.  VacationResponse/get
  - contents:
    - "8.2.  VacationResponse/set\n   This is a standard \"/set\" method as described
      in [RFC8620],\n   Section 5.3.\n"
    title: 8.2.  VacationResponse/set
  title: 8.  Vacation Response
- contents:
  - "9.  Security Considerations\n   All security considerations of JMAP [RFC8620]
    apply to this\n   specification.  Additional considerations specific to the data
    types\n   and functionality introduced by this document are described in the\n
    \  following subsections.\n"
  - contents:
    - "9.1.  EmailBodyPart Value\n   Service providers typically perform security
      filtering on incoming\n   messages, and it's important that the detection of
      content-type and\n   charset for the security filter aligns with the heuristics
      performed\n   by JMAP servers.  Servers that apply heuristics to determine the\n
      \  content-type or charset for an EmailBodyValue SHOULD document the\n   heuristics
      and provide a mechanism to turn them off in the event they\n   are misaligned
      with the security filter used at a particular mail\n   host.\n   Automatic conversion
      of charsets that allow hidden channels for ASCII\n   text, such as UTF-7, have
      been problematic for security filters in\n   the past, so server implementations
      can mitigate this risk by having\n   such conversions off-by-default and/or
      separately configurable.\n   To allow the client to restrict the volume of data
      it can receive in\n   response to a request, a maximum length may be requested
      for the data\n   returned for a textual body part.  However, truncating the
      data may\n   change the semantic meaning, for example, truncating a URL changes\n
      \  its location.  Servers that scan for links to malicious sites should\n   take
      care to either ensure truncation is not at a semantically\n   significant point
      or rescan the truncated value for malicious content\n   before returning it.\n"
    title: 9.1.  EmailBodyPart Value
  - contents:
    - "9.2.  HTML Email Display\n   HTML message bodies provide richer formatting
      for messages but\n   present a number of security challenges, especially when
      embedded in\n   a webmail context in combination with interface HTML.  Clients
      that\n   render HTML messages should carefully consider the potential risks,\n
      \  including:\n   o  Embedded JavaScript can rewrite the message to change its
      content\n      on subsequent opening, allowing users to be mislead.  In webmail\n
      \     systems, if run in the same origin as the interface, it can access\n      and
      exfiltrate all private data accessible to the user, including\n      all other
      messages and potentially contacts, calendar events,\n      settings, and credentials.
      \ It can also rewrite the interface to\n      undetectably phish passwords.
      \ A compromise is likely to be\n      persistent, not just for the duration
      of page load, due to\n      exfiltration of session credentials or installation
      of a service\n      worker that can intercept all subsequent network requests\n
      \     (however, this would only be possible if blob downloads are also\n      available
      on the same origin, and the service worker script is\n      attached to the
      message).\n   o  HTML documents may load content directly from the Internet
      rather\n      than just referencing attached resources.  For example, you may\n
      \     have an \"<img>\" tag with an external \"src\" attribute.  This may\n
      \     leak to the sender when a message is opened, as well as the IP\n      address
      of the recipient.  Cookies may also be sent and set by the\n      server, allowing
      tracking between different messages and even\n      website visits and advertising
      profiles.\n   o  In webmail systems, CSS can break the layout or create phishing\n
      \     vulnerabilities.  For example, the use of \"position:fixed\" can\n      allow
      a message to draw content outside of its normal bounds,\n      potentially clickjacking
      a real interface element.\n   o  If in a webmail context and not inside a separate
      frame, any\n      styles defined in CSS rules will apply to interface elements
      as\n      well if the selector matches, allowing the interface to be\n      modified.
      \ Similarly, any interface styles that match elements in\n      the message
      will alter their appearance, potentially breaking the\n      layout of the message.\n
      \  o  The link text in HTML has no necessary correlation with the actual\n      target
      of the link, which can be used to make phishing attacks\n      more convincing.\n
      \  o  Links opened from a message or embedded external content may leak\n      private
      info in the Referer header sent by default in most\n      systems.\n   o  Forms
      can be used to mimic login boxes, providing a potent\n      phishing vector
      if allowed to submit directly from the message\n      display.\n   There are
      a number of ways clients can mitigate these issues, and a\n   defence-in-depth
      approach that uses a combination of techniques will\n   provide the strongest
      security.\n   o  HTML can be filtered before rendering, stripping potentially\n
      \     malicious content.  Sanitising HTML correctly is tricky, and\n      implementors
      are strongly recommended to use a well-tested library\n      with a carefully
      vetted whitelist-only approach.  New features\n      with unexpected security
      characteristics may be added to HTML\n      rendering engines in the future;
      a blacklist approach is likely to\n      result in security issues.\n      Subtle
      differences in parsing of HTML can introduce security\n      flaws: to filter
      with 100% accuracy, you need to use the same\n      parser that the HTML rendering
      engine will use.\n   o  Encapsulating the message in an \"<iframe sandbox>\",
      as defined in\n      [HTML], Section 4.7.6, can help mitigate a number of risks.
      \ This\n      will:\n      *  Disable JavaScript.\n      *  Disable form submission.\n
      \     *  Prevent drawing outside of its bounds or conflicts between\n         message
      CSS and interface CSS.\n      *  Establish a unique anonymous origin, separate
      to the containing\n         origin.\n   o  A strong Content Security Policy
      (see <https://www.w3.org/TR/\n      CSP3/>) can, among other things, block JavaScript
      and the loading\n      of external content should it manage to evade the filter.\n
      \  o  The leakage of information in the Referer header can be mitigated\n      with
      the use of a referrer policy (see <https://www.w3.org/TR/\n      referrer-policy/>).\n
      \  o  A \"crossorigin=anonymous\" attribute on tags that load remote\n      content
      can prevent cookies from being sent.\n   o  If adding \"target=_blank\" to open
      links in new tabs, also add\n      \"rel=noopener\" to ensure the page that
      opens cannot change the URL\n      in the original tab to redirect the user
      to a phishing site.\n   As highly complex software components, HTML rendering
      engines\n   increase the attack surface of a client considerably, especially
      when\n   being used to process untrusted, potentially malicious content.\n   Serious
      bugs have been found in image decoders, JavaScript engines,\n   and HTML parsers
      in the past, which could lead to full system\n   compromise.  Clients using
      an engine should ensure they get the\n   latest version and continue to incorporate
      any security patches\n   released by the vendor.\n"
    title: 9.2.  HTML Email Display
  - contents:
    - "9.3.  Multiple Part Display\n   Messages may consist of multiple parts to be
      displayed sequentially\n   as a body.  Clients MUST render each part in isolation
      and MUST NOT\n   concatenate the raw text values to render.  Doing so may change
      the\n   overall semantics of the message.  If the client or server is\n   decrypting
      a Pretty Good Privacy (PGP) or S/MIME encrypted part,\n   concatenating with
      other parts may leak the decrypted text to an\n   attacker, as described in
      [EFAIL].\n"
    title: 9.3.  Multiple Part Display
  - contents:
    - "9.4.  Email Submission\n   SMTP submission servers [RFC6409] use a number of
      mechanisms to\n   mitigate damage caused by compromised user accounts and end-user\n
      \  systems including rate limiting, anti-virus/anti-spam milters (mail\n   filters),
      and other technologies.  The technologies work better when\n   they have more
      information about the client connection.  If JMAP\n   email submission is implemented
      as a proxy to an SMTP submission\n   server, it is useful to communicate this
      information from the JMAP\n   proxy to the submission server.  The de facto
      XCLIENT extension to\n   SMTP [XCLIENT] can be used to do this, but use of an
      authenticated\n   channel is recommended to limit use of that extension to explicitly\n
      \  authorised proxies.\n   JMAP servers that proxy to an SMTP submission server
      SHOULD allow use\n   of the submissions port [RFC8314].  Implementation of a
      mechanism\n   similar to SMTP XCLIENT is strongly encouraged.  While Simple\n
      \  Authentication and Security Layer (SASL) PLAIN over TLS [RFC4616] is\n   presently
      the mandatory-to-implement mechanism for interoperability\n   with SMTP submission
      servers [RFC4954], a JMAP submission proxy\n   SHOULD implement and prefer a
      stronger mechanism for this use case\n   such as TLS client certificate authentication
      with SASL EXTERNAL\n   ([RFC4422], Appendix A) or Salted Challenge Response
      Authentication\n   Mechanism (SCRAM) [RFC7677].\n   In the event the JMAP server
      directly relays mail to SMTP servers in\n   other administrative domains, implementation
      of the de facto [milter]\n   protocol is strongly encouraged to integrate with
      third-party\n   products that address security issues including anti-virus/anti-spam,\n
      \  reputation protection, compliance archiving, and data loss\n   prevention.
      \ Proxying to a local SMTP submission server may be a\n   simpler way to provide
      such security services.\n"
    title: 9.4.  Email Submission
  - contents:
    - "9.5.  Partial Account Access\n   A user may only have permission to access
      a subset of the data that\n   exists in an account.  To avoid leaking unauthorised
      information, in\n   such a situation, the server MUST treat any data the user
      does not\n   have permission to access the same as if it did not exist.\n   For
      example, suppose user A has an account with two Mailboxes, inbox\n   and sent,
      but only shares the inbox with user B.  In this case, when\n   user B fetches
      Mailboxes for this account, the server MUST behave as\n   though the sent Mailbox
      did not exist.  Similarly, when querying or\n   fetching Email objects, it MUST
      treat any messages that just belong\n   to the sent Mailbox as though they did
      not exist.  Fetching Thread\n   objects MUST only return ids for Email objects
      the user has\n   permission to access; if none, the Thread again MUST be treated
      the\n   same as if it did not exist.\n   If the server forbids a single account
      from having two identical\n   messages, or two messages with the same Message-Id
      header field, a\n   user with write access can use the error returned by trying
      to\n   create/import such a message to detect whether it already exists in\n
      \  an inaccessible portion of the account.\n"
    title: 9.5.  Partial Account Access
  - contents:
    - "9.6.  Permission to Send from an Address\n   In recent years, the email ecosystem
      has moved towards associating\n   trust with the From address in the message
      [RFC5322], particularly\n   with schemes such as Domain-based Message Authentication,
      Reporting,\n   and Conformance (DMARC) [RFC7489].\n   The set of Identity objects
      (see Section 6) in an account lets the\n   client know which email addresses
      the user has permission to send\n   from.  Each email submission is associated
      with an Identity, and\n   servers SHOULD reject submissions where the From header
      field of the\n   message does not correspond to the associated Identity.\n   The
      server MAY allow an exception to send an exact copy of an\n   existing message
      received into the mail store to another address\n   (otherwise known as \"redirecting\"
      or \"bouncing\"), although it is\n   RECOMMENDED the server limit this to destinations
      the user has\n   verified they also control.\n   If the user attempts to create
      a new Identity object, the server MUST\n   reject it with the appropriate error
      if the user does not have\n   permission to use that email address to send from.\n
      \  The SMTP MAIL FROM address [RFC5321] is often confused with the From\n   message
      header field [RFC5322].  The user generally only ever sees\n   the address in
      the message header field, and this is the primary one\n   to enforce.  However,
      the server MUST also enforce appropriate\n   restrictions on the MAIL FROM address
      [RFC5321] to stop the user from\n   flooding a third-party address with bounces
      and non-delivery notices.\n   The JMAP submission model provides separate errors
      for impermissible\n   addresses in either context.\n"
    title: 9.6.  Permission to Send from an Address
  title: 9.  Security Considerations
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  JMAP Capability Registration for \"mail\"\n   IANA has registered the
      \"mail\" JMAP Capability as follows:\n   Capability Name: urn:ietf:params:jmap:mail\n
      \  Specification document: this document\n   Intended use: common\n   Change
      Controller: IETF\n   Security and privacy considerations: this document, Section
      9\n"
    title: 10.1.  JMAP Capability Registration for "mail"
  - contents:
    - "10.2.  JMAP Capability Registration for \"submission\"\n   IANA has registered
      the \"submission\" JMAP Capability as follows:\n   Capability Name: urn:ietf:params:jmap:submission\n
      \  Specification document: this document\n   Intended use: common\n   Change
      Controller: IETF\n   Security and privacy considerations: this document, Section
      9\n"
    title: 10.2.  JMAP Capability Registration for "submission"
  - contents:
    - "10.3.  JMAP Capability Registration for \"vacationresponse\"\n   IANA has registered
      the \"vacationresponse\" JMAP Capability as\n   follows:\n   Capability Name:
      urn:ietf:params:jmap:vacationresponse\n   Specification document: this document\n
      \  Intended use: common\n   Change Controller: IETF\n   Security and privacy
      considerations: this document, Section 9\n"
    title: 10.3.  JMAP Capability Registration for "vacationresponse"
  - contents:
    - "10.4.  IMAP and JMAP Keywords Registry\n   This document makes two changes
      to the IMAP keywords registry as\n   defined in [RFC5788].\n   First, the name
      of the registry is changed to the \"IMAP and JMAP\n   Keywords\" registry.\n
      \  Second, a scope column is added to the template and registry\n   indicating
      whether a keyword applies to \"IMAP-only\", \"JMAP-only\",\n   \"both\", or
      \"reserved\".  All keywords already in the IMAP keyword\n   registry have been
      marked with a scope of \"both\".  The \"reserved\"\n   status can be used to
      prevent future registration of a name that\n   would be confusing if registered.
      \ Registration of keywords with\n   scope \"reserved\" omit most fields in the
      registration template (see\n   registration of \"$recent\" below for an example);
      such registrations\n   are intended to be infrequent.\n   IMAP clients MAY silently
      ignore any keywords marked \"JMAP-only\" or\n   \"reserved\" in the event they
      appear in protocol.  JMAP clients MAY\n   silently ignore any keywords marked
      \"IMAP-only\" or \"reserved\" in the\n   event they appear in protocol.\n   New
      \"JMAP-only\" keywords are registered in the following subsections.\n   These
      keywords correspond to IMAP system keywords and are thus not\n   appropriate
      for use in IMAP.  These keywords cannot be subsequently\n   registered for use
      in IMAP except via standards action.\n"
    - contents:
      - "10.4.1.  Registration of JMAP Keyword \"$draft\"\n   This registers the \"JMAP-only\"
        keyword \"$draft\" in the \"IMAP and JMAP\n   Keywords\" registry.\n   Keyword
        name: $draft\n   Scope: JMAP-only\n   Purpose (description): This is set when
        the user wants to treat the\n   message as a draft the user is composing.
        \ This is the JMAP\n   equivalent of the IMAP \\Draft flag.\n   Private or
        Shared on a server: BOTH\n   Is it an advisory keyword or may it cause an
        automatic action:\n   Automatic.  If the account has an IMAP mailbox marked
        with the\n   \\Drafts special use attribute [RFC6154], setting this flag MAY
        cause\n   the message to appear in that mailbox automatically.  Certain JMAP\n
        \  computed values such as \"unreadEmails\" will change as a result of\n   changing
        this flag.  In addition, mail clients will typically present\n   draft messages
        in a composer window rather than a viewer window.\n   When/by whom the keyword
        is set/cleared: This is typically set by a\n   JMAP client when referring
        to a draft message.  One model for draft\n   Emails would result in clearing
        this flag in an \"EmailSubmission/set\"\n   operation with an \"onSuccessUpdateEmail\"
        argument.  In a mail store\n   shared by JMAP and IMAP, this is also set and
        cleared as necessary so\n   it matches the IMAP \\Draft flag.\n   Related
        keywords: None\n   Related IMAP/JMAP Capabilities: SPECIAL-USE [RFC6154]\n
        \  Security Considerations: A server implementing this keyword as a\n   shared
        keyword may disclose that a user considers the message a draft\n   message.
        \ This information would be exposed to other users with read\n   permission
        for the Mailbox keywords.\n   Published specification: this document\n   Person
        & email address to contact for further information:\n   JMAP mailing list
        <jmap@ietf.org>\n   Intended usage: COMMON\n   Owner/Change controller: IESG\n"
      title: 10.4.1.  Registration of JMAP Keyword "$draft"
    - contents:
      - "10.4.2.  Registration of JMAP Keyword \"$seen\"\n   This registers the \"JMAP-only\"
        keyword \"$seen\" in the \"IMAP and JMAP\n   Keywords\" registry.\n   Keyword
        name: $seen\n   Scope: JMAP-only\n   Purpose (description): This is set when
        the user wants to treat the\n   message as read.  This is the JMAP equivalent
        of the IMAP \\Seen flag.\n   Private or Shared on a server: BOTH\n   Is it
        an advisory keyword or may it cause an automatic action:\n   Advisory.  However,
        certain JMAP computed values such as\n   \"unreadEmails\" will change as a
        result of changing this flag.\n   When/by whom the keyword is set/cleared:
        This is set by a JMAP client\n   when it presents the message content to the
        user; clients often offer\n   an option to clear this flag.  In a mail store
        shared by JMAP and\n   IMAP, this is also set and cleared as necessary so
        it matches the\n   IMAP \\Seen flag.\n   Related keywords: None\n   Related
        IMAP/JMAP Capabilities: None\n   Security Considerations: A server implementing
        this keyword as a\n   shared keyword may disclose that a user considers the
        message to have\n   been read.  This information would be exposed to other
        users with\n   read permission for the Mailbox keywords.\n   Published specification:
        this document\n   Person & email address to contact for further information:\n
        \  JMAP mailing list <jmap@ietf.org>\n   Intended usage: COMMON\n   Owner/Change
        controller: IESG\n"
      title: 10.4.2.  Registration of JMAP Keyword "$seen"
    - contents:
      - "10.4.3.  Registration of JMAP Keyword \"$flagged\"\n   This registers the
        \"JMAP-only\" keyword \"$flagged\" in the \"IMAP and\n   JMAP Keywords\" registry.\n
        \  Keyword name: $flagged\n   Scope: JMAP-only\n   Purpose (description):
        This is set when the user wants to treat the\n   message as flagged for urgent/special
        attention.  This is the JMAP\n   equivalent of the IMAP \\Flagged flag.\n
        \  Private or Shared on a server: BOTH\n   Is it an advisory keyword or may
        it cause an automatic action:\n   Automatic.  If the account has an IMAP mailbox
        marked with the\n   \\Flagged special use attribute [RFC6154], setting this
        flag MAY cause\n   the message to appear in that mailbox automatically.\n
        \  When/by whom the keyword is set/cleared: JMAP clients typically allow\n
        \  a user to set/clear this flag as desired.  In a mail store shared by\n
        \  JMAP and IMAP, this is also set and cleared as necessary so it\n   matches
        the IMAP \\Flagged flag.\n   Related keywords: None\n   Related IMAP/JMAP
        Capabilities: SPECIAL-USE [RFC6154]\n   Security Considerations: A server
        implementing this keyword as a\n   shared keyword may disclose that a user
        considers the message as\n   flagged for urgent/special attention.  This information
        would be\n   exposed to other users with read permission for the Mailbox keywords.\n
        \  Published specification: this document\n   Person & email address to contact
        for further information:\n   JMAP mailing list <jmap@ietf.org>\n   Intended
        usage: COMMON\n   Owner/Change controller: IESG\n"
      title: 10.4.3.  Registration of JMAP Keyword "$flagged"
    - contents:
      - "10.4.4.  Registration of JMAP Keyword \"$answered\"\n   This registers the
        \"JMAP-only\" keyword \"$answered\" in the \"IMAP and\n   JMAP Keywords\"
        registry.\n   Keyword name: $answered\n   Scope: JMAP-only\n   Purpose (description):
        This is set when the message has been\n   answered.\n   Private or Shared
        on a server: BOTH\n   Is it an advisory keyword or may it cause an automatic
        action:\n   Advisory.\n   When/by whom the keyword is set/cleared: JMAP clients
        typically set\n   this when submitting a reply or answer to the message.  It
        may be set\n   by the \"EmailSubmission/set\" operation with an \"onSuccessUpdateEmail\"\n
        \  argument.  In a mail store shared by JMAP and IMAP, this is also set\n
        \  and cleared as necessary so it matches the IMAP \\Answered flag.\n   Related
        keywords: None\n   Related IMAP/JMAP Capabilities: None\n   Security Considerations:
        A server implementing this keyword as a\n   shared keyword may disclose that
        a user has replied to a message.\n   This information would be exposed to
        other users with read permission\n   for the Mailbox keywords.\n   Published
        specification: this document\n   Person & email address to contact for further
        information:\n   JMAP mailing list <jmap@ietf.org>\n   Intended usage: COMMON\n
        \  Owner/Change controller: IESG\n"
      title: 10.4.4.  Registration of JMAP Keyword "$answered"
    - contents:
      - "10.4.5.  Registration of \"$recent\" Keyword\n   This registers the keyword
        \"$recent\" in the \"IMAP and JMAP Keywords\"\n   registry.\n   Keyword name:
        $recent\n   Scope: reserved\n   Purpose (description): This keyword is not
        used to avoid confusion\n   with the IMAP \\Recent system flag.\n   Published
        specification: this document\n   Person & email address to contact for further
        information:\n   JMAP mailing list <jmap@ietf.org>\n   Owner/Change controller:
        IESG\n"
      title: 10.4.5.  Registration of "$recent" Keyword
    title: 10.4.  IMAP and JMAP Keywords Registry
  - contents:
    - '10.5.  IMAP Mailbox Name Attributes Registry

      '
    - contents:
      - "10.5.1.  Registration of \"inbox\" Role\n   This registers the \"JMAP-only\"
        \"inbox\" attribute in the \"IMAP Mailbox\n   Name Attributes\" registry,
        as established in [RFC8457].\n   Attribute Name: Inbox\n   Description: New
        mail is delivered here by default.\n   Reference: This document, Section 10.5.1\n
        \  Usage Notes: JMAP only\n"
      title: 10.5.1.  Registration of "inbox" Role
    title: 10.5.  IMAP Mailbox Name Attributes Registry
  - contents:
    - "10.6.  JMAP Error Codes Registry\n   The following subsections register several
      new error codes in the\n   \"JMAP Error Codes\" registry, as defined in [RFC8620].\n"
    - contents:
      - "10.6.1.  mailboxHasChild\n   JMAP Error Code: mailboxHasChild\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        2.5\n   Description: The Mailbox still has at least one child Mailbox.  The\n
        \  client MUST remove these before it can delete the parent Mailbox.\n"
      title: 10.6.1.  mailboxHasChild
    - contents:
      - "10.6.2.  mailboxHasEmail\n   JMAP Error Code: mailboxHasEmail\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        2.5\n   Description: The Mailbox has at least one message assigned to it,
        and\n   the onDestroyRemoveEmails argument was false.\n"
      title: 10.6.2.  mailboxHasEmail
    - contents:
      - "10.6.3.  blobNotFound\n   JMAP Error Code: blobNotFound\n   Intended use:
        common\n   Change controller: IETF\n   Reference: This document, Section 4.6\n
        \  Description: At least one blob id referenced in the object doesn't\n   exist.\n"
      title: 10.6.3.  blobNotFound
    - contents:
      - "10.6.4.  tooManyKeywords\n   JMAP Error Code: tooManyKeywords\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        4.6\n   Description: The change to the Email's keywords would exceed a\n   server-defined
        maximum.\n"
      title: 10.6.4.  tooManyKeywords
    - contents:
      - "10.6.5.  tooManyMailboxes\n   JMAP Error Code: tooManyMailboxes\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        4.6\n   Description: The change to the set of Mailboxes that this Email is
        in\n   would exceed a server-defined maximum.\n"
      title: 10.6.5.  tooManyMailboxes
    - contents:
      - "10.6.6.  invalidEmail\n   JMAP Error Code: invalidEmail\n   Intended use:
        common\n   Change controller: IETF\n   Reference: This document, Section 7.5\n
        \  Description: The Email to be sent is invalid in some way.\n"
      title: 10.6.6.  invalidEmail
    - contents:
      - "10.6.7.  tooManyRecipients\n   JMAP Error Code: tooManyRecipients\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        7.5\n   Description: The envelope [RFC5321] (supplied or generated) has more\n
        \  recipients than the server allows.\n"
      title: 10.6.7.  tooManyRecipients
    - contents:
      - "10.6.8.  noRecipients\n   JMAP Error Code: noRecipients\n   Intended use:
        common\n   Change controller: IETF\n   Reference: This document, Section 7.5\n
        \  Description: The envelope [RFC5321] (supplied or generated) does not\n
        \  have any rcptTo email addresses.\n"
      title: 10.6.8.  noRecipients
    - contents:
      - "10.6.9.  invalidRecipients\n   JMAP Error Code: invalidRecipients\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        7.5\n   Description: The rcptTo property of the envelope [RFC5321] (supplied\n
        \  or generated) contains at least one rcptTo value that is not a valid\n
        \  email address for sending to.\n"
      title: 10.6.9.  invalidRecipients
    - contents:
      - "10.6.10.  forbiddenMailFrom\n   JMAP Error Code: forbiddenMailFrom\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        7.5\n   Description: The server does not permit the user to send a message\n
        \  with this envelope From address [RFC5321].\n"
      title: 10.6.10.  forbiddenMailFrom
    - contents:
      - "10.6.11.  forbiddenFrom\n   JMAP Error Code: forbiddenFrom\n   Intended use:
        common\n   Change controller: IETF\n   Reference: This document, Sections
        6.3 and 7.5\n   Description: The server does not permit the user to send a
        message\n   with the From header field [RFC5322] of the message to be sent.\n"
      title: 10.6.11.  forbiddenFrom
    - contents:
      - "10.6.12.  forbiddenToSend\n   JMAP Error Code: forbiddenToSend\n   Intended
        use: common\n   Change controller: IETF\n   Reference: This document, Section
        7.5\n   Description: The user does not have permission to send at all right\n
        \  now.\n"
      title: 10.6.12.  forbiddenToSend
    title: 10.6.  JMAP Error Codes Registry
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [HTML]     Faulkner, S., Eicholz, A., Leithead,
      T., Danilo, A., and\n              S. Moon, \"HTML 5.2\", World Wide Web Consortium\n
      \             Recommendation REC-html52-20171214, December 2017,\n              <https://www.w3.org/TR/html52/>.\n
      \  [RFC1870]  Klensin, J., Freed, N., and K. Moore, \"SMTP Service\n              Extension
      for Message Size Declaration\", STD 10, RFC 1870,\n              DOI 10.17487/RFC1870,
      November 1995,\n              <https://www.rfc-editor.org/info/rfc1870>.\n   [RFC2045]
      \ Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part One: Format of Internet Message\n              Bodies\", RFC 2045,
      DOI 10.17487/RFC2045, November 1996,\n              <https://www.rfc-editor.org/info/rfc2045>.\n
      \  [RFC2047]  Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n              Part
      Three: Message Header Extensions for Non-ASCII Text\",\n              RFC 2047,
      DOI 10.17487/RFC2047, November 1996,\n              <https://www.rfc-editor.org/info/rfc2047>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2231]  Freed,
      N. and K. Moore, \"MIME Parameter Value and Encoded\n              Word Extensions:
      Character Sets, Languages, and\n              Continuations\", RFC 2231, DOI
      10.17487/RFC2231, November\n              1997, <https://www.rfc-editor.org/info/rfc2231>.\n
      \  [RFC2369]  Neufeld, G. and J. Baer, \"The Use of URLs as Meta-Syntax\n              for
      Core Mail List Commands and their Transport through\n              Message Header
      Fields\", RFC 2369, DOI 10.17487/RFC2369,\n              July 1998, <https://www.rfc-editor.org/info/rfc2369>.\n
      \  [RFC2392]  Levinson, E., \"Content-ID and Message-ID Uniform Resource\n              Locators\",
      RFC 2392, DOI 10.17487/RFC2392, August 1998,\n              <https://www.rfc-editor.org/info/rfc2392>.\n
      \  [RFC2557]  Palme, J., Hopmann, A., and N. Shelness, \"MIME\n              Encapsulation
      of Aggregate Documents, such as HTML\n              (MHTML)\", RFC 2557, DOI
      10.17487/RFC2557, March 1999,\n              <https://www.rfc-editor.org/info/rfc2557>.\n
      \  [RFC2852]  Newman, D., \"Deliver By SMTP Service Extension\", RFC 2852,\n
      \             DOI 10.17487/RFC2852, June 2000,\n              <https://www.rfc-editor.org/info/rfc2852>.\n
      \  [RFC3282]  Alvestrand, H., \"Content Language Headers\", RFC 3282,\n              DOI
      10.17487/RFC3282, May 2002,\n              <https://www.rfc-editor.org/info/rfc3282>.\n
      \  [RFC3461]  Moore, K., \"Simple Mail Transfer Protocol (SMTP) Service\n              Extension
      for Delivery Status Notifications (DSNs)\",\n              RFC 3461, DOI 10.17487/RFC3461,
      January 2003,\n              <https://www.rfc-editor.org/info/rfc3461>.\n   [RFC3463]
      \ Vaudreuil, G., \"Enhanced Mail System Status Codes\",\n              RFC 3463,
      DOI 10.17487/RFC3463, January 2003,\n              <https://www.rfc-editor.org/info/rfc3463>.\n
      \  [RFC3464]  Moore, K. and G. Vaudreuil, \"An Extensible Message Format\n              for
      Delivery Status Notifications\", RFC 3464,\n              DOI 10.17487/RFC3464,
      January 2003,\n              <https://www.rfc-editor.org/info/rfc3464>.\n   [RFC3834]
      \ Moore, K., \"Recommendations for Automatic Responses to\n              Electronic
      Mail\", RFC 3834, DOI 10.17487/RFC3834, August\n              2004, <https://www.rfc-editor.org/info/rfc3834>.\n
      \  [RFC4314]  Melnikov, A., \"IMAP4 Access Control List (ACL) Extension\",\n
      \             RFC 4314, DOI 10.17487/RFC4314, December 2005,\n              <https://www.rfc-editor.org/info/rfc4314>.\n
      \  [RFC4422]  Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n              Authentication
      and Security Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422,
      June 2006,\n              <https://www.rfc-editor.org/info/rfc4422>.\n   [RFC4616]
      \ Zeilenga, K., Ed., \"The PLAIN Simple Authentication and\n              Security
      Layer (SASL) Mechanism\", RFC 4616,\n              DOI 10.17487/RFC4616, August
      2006,\n              <https://www.rfc-editor.org/info/rfc4616>.\n   [RFC4865]
      \ White, G. and G. Vaudreuil, \"SMTP Submission Service\n              Extension
      for Future Message Release\", RFC 4865,\n              DOI 10.17487/RFC4865,
      May 2007,\n              <https://www.rfc-editor.org/info/rfc4865>.\n   [RFC4954]
      \ Siemborski, R., Ed. and A. Melnikov, Ed., \"SMTP Service\n              Extension
      for Authentication\", RFC 4954,\n              DOI 10.17487/RFC4954, July 2007,\n
      \             <https://www.rfc-editor.org/info/rfc4954>.\n   [RFC5198]  Klensin,
      J. and M. Padlipsky, \"Unicode Format for Network\n              Interchange\",
      RFC 5198, DOI 10.17487/RFC5198, March 2008,\n              <https://www.rfc-editor.org/info/rfc5198>.\n
      \  [RFC5248]  Hansen, T. and J. Klensin, \"A Registry for SMTP Enhanced\n              Mail
      System Status Codes\", BCP 138, RFC 5248,\n              DOI 10.17487/RFC5248,
      June 2008,\n              <https://www.rfc-editor.org/info/rfc5248>.\n   [RFC5256]
      \ Crispin, M. and K. Murchison, \"Internet Message Access\n              Protocol
      - SORT and THREAD Extensions\", RFC 5256,\n              DOI 10.17487/RFC5256,
      June 2008,\n              <https://www.rfc-editor.org/info/rfc5256>.\n   [RFC5321]
      \ Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n              DOI
      10.17487/RFC5321, October 2008,\n              <https://www.rfc-editor.org/info/rfc5321>.\n
      \  [RFC5322]  Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n              DOI
      10.17487/RFC5322, October 2008,\n              <https://www.rfc-editor.org/info/rfc5322>.\n
      \  [RFC5788]  Melnikov, A. and D. Cridland, \"IMAP4 Keyword Registry\",\n              RFC
      5788, DOI 10.17487/RFC5788, March 2010,\n              <https://www.rfc-editor.org/info/rfc5788>.\n
      \  [RFC6154]  Leiba, B. and J. Nicolson, \"IMAP LIST Extension for\n              Special-Use
      Mailboxes\", RFC 6154, DOI 10.17487/RFC6154,\n              March 2011, <https://www.rfc-editor.org/info/rfc6154>.\n
      \  [RFC6409]  Gellens, R. and J. Klensin, \"Message Submission for Mail\",\n
      \             STD 72, RFC 6409, DOI 10.17487/RFC6409, November 2011,\n              <https://www.rfc-editor.org/info/rfc6409>.\n
      \  [RFC6532]  Yang, A., Steele, S., and N. Freed, \"Internationalized\n              Email
      Headers\", RFC 6532, DOI 10.17487/RFC6532, February\n              2012, <https://www.rfc-editor.org/info/rfc6532>.\n
      \  [RFC6533]  Hansen, T., Ed., Newman, C., and A. Melnikov,\n              \"Internationalized
      Delivery Status and Disposition\n              Notifications\", RFC 6533, DOI
      10.17487/RFC6533, February\n              2012, <https://www.rfc-editor.org/info/rfc6533>.\n
      \  [RFC6710]  Melnikov, A. and K. Carlberg, \"Simple Mail Transfer\n              Protocol
      Extension for Message Transfer Priorities\",\n              RFC 6710, DOI 10.17487/RFC6710,
      August 2012,\n              <https://www.rfc-editor.org/info/rfc6710>.\n   [RFC7677]
      \ Hansen, T., \"SCRAM-SHA-256 and SCRAM-SHA-256-PLUS Simple\n              Authentication
      and Security Layer (SASL) Mechanisms\",\n              RFC 7677, DOI 10.17487/RFC7677,
      November 2015,\n              <https://www.rfc-editor.org/info/rfc7677>.\n   [RFC8098]
      \ Hansen, T., Ed. and A. Melnikov, Ed., \"Message Disposition\n              Notification\",
      STD 85, RFC 8098, DOI 10.17487/RFC8098,\n              February 2017, <https://www.rfc-editor.org/info/rfc8098>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8314]  Moore, K. and C. Newman,
      \"Cleartext Considered Obsolete:\n              Use of Transport Layer Security
      (TLS) for Email Submission\n              and Access\", RFC 8314, DOI 10.17487/RFC8314,
      January 2018,\n              <https://www.rfc-editor.org/info/rfc8314>.\n   [RFC8457]
      \ Leiba, B., Ed., \"IMAP \"$Important\" Keyword and\n              \"\\Important\"
      Special-Use Attribute\", RFC 8457,\n              DOI 10.17487/RFC8457, September
      2018,\n              <https://www.rfc-editor.org/info/rfc8457>.\n   [RFC8474]
      \ Gondwana, B., Ed., \"IMAP Extension for Object\n              Identifiers\",
      RFC 8474, DOI 10.17487/RFC8474, September\n              2018, <https://www.rfc-editor.org/info/rfc8474>.\n
      \  [RFC8620]  Jenkins, N. and C. Newman, \"The JSON Meta Application\n              Protocol\",
      RFC 8620, DOI 10.17487/RFC8620, June 2019,\n              <https://www.rfc-editor.org/info/rfc8620>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [EFAIL]    Poddebniak, D., Dresen, C., Mueller,
      J., Ising, F.,\n              Schinzel, S., Friedberger, S., Somorovsky, J.,
      and J.\n              Schwenk, \"Efail: Breaking S/MIME and OpenPGP Email\n
      \             Encryption using Exfiltration Channels\", August 2018,\n              <https://www.usenix.org/system/files/conference/\n
      \             usenixsecurity18/sec18-poddebniak.pdf>.\n   [milter]   Postfix,
      \"Postfix before-queue Milter support\", 2019,\n              <http://www.postfix.org/MILTER_README.html>.\n
      \  [RFC3501]  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\",
      RFC 3501, DOI 10.17487/RFC3501, March 2003,\n              <https://www.rfc-editor.org/info/rfc3501>.\n
      \  [RFC7489]  Kucherawy, M., Ed. and E. Zwicky, Ed., \"Domain-based\n              Message
      Authentication, Reporting, and Conformance\n              (DMARC)\", RFC 7489,
      DOI 10.17487/RFC7489, March 2015,\n              <https://www.rfc-editor.org/info/rfc7489>.\n
      \  [XCLIENT]  Postfix, \"Postfix XCLIENT Howto\", 2019,\n              <http://www.postfix.org/XCLIENT_README.html>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Neil Jenkins\n   Fastmail\n   PO Box 234, Collins St.
    West\n   Melbourne, VIC  8007\n   Australia\n   Email: neilj@fastmailteam.com\n
    \  URI:   https://www.fastmail.com\n   Chris Newman\n   Oracle\n   440 E. Huntington
    Dr., Suite 400\n   Arcadia, CA  91006\n   United States of America\n   Email:
    chris.newman@oracle.com\n"
  title: Authors' Addresses
