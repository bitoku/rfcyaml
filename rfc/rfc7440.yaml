- title: __initial_text__
  contents:
  - '                         TFTP Windowsize Option

    '
- title: Abstract
  contents:
  - "Abstract\n   The \"Trivial File Transfer Protocol\" (RFC 1350) is a simple,\n\
    \   lockstep, file transfer protocol that allows a client to get or put a\n  \
    \ file onto a remote host.  One of its primary uses is in the early\n   stages\
    \ of nodes booting from a Local Area Network (LAN).  TFTP has\n   been used for\
    \ this application because it is very simple to\n   implement.  The employment\
    \ of a lockstep scheme limits throughput\n   when used on a LAN.\n   This document\
    \ describes a TFTP option that allows the client and\n   server to negotiate a\
    \ window size of consecutive blocks to send as an\n   alternative for replacing\
    \ the single-block lockstep schema.  The TFTP\n   option mechanism employed is\
    \ described in \"TFTP Option Extension\"\n   (RFC 2347).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7440.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conventions Used in This Document ...............................3\n  \
    \ 3. Windowsize Option Specification .................................3\n   4.\
    \ Traffic Flow and Error Handling .................................4\n   5. Proof\
    \ of Concept and Windowsize Evaluation ......................6\n   6. Congestion\
    \ and Error Control ....................................7\n   7. Security Considerations\
    \ .........................................8\n   8. References ......................................................9\n\
    \      8.1. Normative References .......................................9\n  \
    \ Author's Address ...................................................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   TFTP is virtually unused for Internet transfers today, TFTP\
    \ is still\n   massively used in network boot/installation scenarios including\
    \ EFI\n   (Extensible Firmware Interface).  TFTP's inherently low transfer rate\n\
    \   has been, so far, partially mitigated by the use of the blocksize\n   negotiated\
    \ extension [RFC2348].  Using this method, the original\n   limitation of 512-byte\
    \ blocks are, in practice, replaced in Ethernet\n   environments by blocks no\
    \ larger than 1468 Bytes to avoid IP block\n   fragmentation.  This strategy produces\
    \ insufficient results when\n   transferring big files, for example, the initial\
    \ ramdisk of Linux\n   distributions or the PE images used in network installations\
    \ by\n   Microsoft WDS/MDT/SCCM.  Considering TFTP looks far from extinction\n\
    \   today, this document presents a negotiated extension, under the terms\n  \
    \ of the \"TFTP Option Extension\" [RFC2347], that produces TFTP transfer\n  \
    \ rates comparable to those achieved by modern file transfer protocols.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119].\n   In this document, these words\
    \ will appear with that interpretation\n   only when in ALL CAPS.  Lowercase uses\
    \ of these words are not to be\n   interpreted as carrying the significance given\
    \ in RFC 2119.\n"
- title: 3.  Windowsize Option Specification
  contents:
  - "3.  Windowsize Option Specification\n   The TFTP Read Request or Write Request\
    \ packet is modified to include\n   the windowsize option as follows.  Note that\
    \ all fields except \"opc\"\n   MUST be ASCII strings followed by a single-byte\
    \ NULL character.\n      2B     string   1B   string   1B     string     1B  \
    \ string   1B\n   +-------+---~~---+----+---~~---+----+-----~~-----+----+---~~---+----+\n\
    \   |  opc  |filename|  0 |  mode  |  0 | windowsize |  0 | #blocks|  0 |\n  \
    \ +-------+---~~---+----+---~~---+----+-----~~-----+----+---~~---+----+\n   opc\n\
    \      The opcode field contains either a 1 for Read Requests or a 2 for\n   \
    \   Write Requests, as defined in [RFC1350].\n   filename\n      The name of the\
    \ file to be read or written, as defined in\n      [RFC1350].\n   mode\n     \
    \ The mode of the file transfer: \"netascii\", \"octet\", or \"mail\", as\n  \
    \    defined in [RFC1350].\n   windowsize\n      The windowsize option, \"windowsize\"\
    \ (case insensitive).\n   #blocks\n      The base-10 ASCII string representation\
    \ of the number of blocks in\n      a window.  The valid values range MUST be\
    \ between 1 and 65535\n      blocks, inclusive.  The windowsize refers to the\
    \ number of\n      consecutive blocks transmitted before stopping and waiting\
    \ for the\n      reception of the acknowledgment of the last block transmitted.\n\
    \   For example:\n   +------+--------+----+-------+----+------------+----+----+----+\n\
    \   |0x0001| foobar |0x00| octet |0x00| windowsize |0x00| 16 |0x00|\n   +------+--------+----+-------+----+------------+----+----+----+\n\
    \   is a Read Request for the file named \"foobar\" in octet transfer mode\n \
    \  with a windowsize of 16 blocks (option blocksize is not negotiated in\n   this\
    \ example, the default of 512 Bytes per block applies).\n   If the server is willing\
    \ to accept the windowsize option, it sends an\n   Option Acknowledgment (OACK)\
    \ to the client.  The specified value MUST\n   be less than or equal to the value\
    \ specified by the client.  The\n   client MUST then either use the size specified\
    \ in the OACK or send an\n   ERROR packet, with error code 8, to terminate the\
    \ transfer.\n   The rules for determining the final packet are unchanged from\n\
    \   [RFC1350] and [RFC2348].\n   The reception of a data window with a number\
    \ of blocks less than the\n   negotiated windowsize is the final window.  If the\
    \ windowsize is\n   greater than the amount of data to be transferred, the first\
    \ window\n   is the final window.\n"
- title: 4.  Traffic Flow and Error Handling
  contents:
  - "4.  Traffic Flow and Error Handling\n   The next diagram depicts a section of\
    \ the traffic flow between the\n   Data Sender (DSND) and the Data Receiver (DRCV)\
    \ parties on a generic\n   windowsize TFTP file transfer.\n   The DSND MUST cyclically\
    \ send to the DRCV the agreed windowsize\n   consecutive data blocks before normally\
    \ stopping and waiting for the\n   ACK of the transferred window.  The DRCV MUST\
    \ send to the DSND the\n   ACK of the last data block of the window in order to\
    \ confirm a\n   successful data block window reception.\n   In the case of an\
    \ expected ACK not timely reaching the DSND\n   (timeout), the last received ACK\
    \ SHALL set the beginning of the next\n   windowsize data block window to be sent.\n\
    \   In the case of a data block sequence error, the DRCV SHOULD notify\n   the\
    \ DSND by sending an ACK corresponding to the last data block\n   correctly received.\
    \  The notified DSND SHOULD send a new data block\n   window whose beginning MUST\
    \ be set based on the ACK received out of\n   sequence.\n   Traffic with windowsize\
    \ = 1 MUST be equivalent to traffic specified\n   by [RFC1350].\n   For normative\
    \ traffic not specifically addressed in this section,\n   please refer to [RFC1350]\
    \ and its updates.\n         [ DRCV ]      <---traffic--->      [ DSND ]\n   \
    \        ACK#      ->               <-   Data Block#   window block#\n       \
    \                       ...\n                              <-           |DB n+01|\
    \          1\n                              <-           |DB n+02|          2\n\
    \                              <-           |DB n+03|          3\n           \
    \                   <-           |DB n+04|          4\n         |ACK n+04|   \
    \        ->\n                              <-           |DB n+05|          1\n\
    \                       Error |<-           |DB n+06|          2\n           \
    \                   <-           |DB n+07|          3\n         |ACK n+05|   \
    \        ->\n                              <-           |DB n+06|          1\n\
    \                              <-           |DB n+07|          2\n           \
    \                   <-           |DB n+08|          3\n                      \
    \        <-           |DB n+09|          4\n         |ACK n+09|           ->\n\
    \                              <-           |DB n+10|          1\n           \
    \            Error |<-           |DB n+11|          2\n                      \
    \        <-           |DB n+12|          3\n         |ACK n+10|           ->|\
    \ Error\n                              <-           |DB n+13|          4\n   \
    \                                       - timeout -\n                        \
    \      <-           |DB n+10|          1\n                              <-   \
    \        |DB n+11|          2\n                              <-           |DB\
    \ n+12|          3\n                              <-           |DB n+13|     \
    \     4\n         |ACK n+13|           ->\n                              ...\n\
    \                 Section of a Windowsize = 4 TFTP Transfer\n                \
    \    Including Errors and Error Recovery\n"
- title: 5.  Proof of Concept and Windowsize Evaluation
  contents:
  - "5.  Proof of Concept and Windowsize Evaluation\n   Performance tests were run\
    \ on the prototype implementation using a\n   variety of windowsizes and a fixed\
    \ blocksize of 1456 bytes.  The\n   tests were run on a lightly loaded Gigabit\
    \ Ethernet, between two\n   Toshiba Tecra Core 2 Duo 2.2 Ghz laptops, in \"octet\"\
    \ mode,\n   transferring a 180 MByte file.\n              ^\n              |\n\
    \          300 +\n      Seconds |                           windowsize | time\
    \ (s)\n              |                           ----------   ------\n       \
    \       |     x                         1         257\n          250 +       \
    \                        2         131\n              |                      \
    \         4          76\n              |                               8     \
    \     54\n              |                              16          42\n      \
    \    200 +                              32          38\n              |      \
    \                        64          35\n              |\n              |\n  \
    \        150 +\n              |\n              |           x\n              |\n\
    \          100 +\n              |\n              |                 x\n       \
    \       |\n           50 +                       x\n              |          \
    \                   x\n              |                                   x   \
    \  x\n              |\n            0 +-//--+-----+-----+-----+-----+-----+-----+-->\n\
    \                    1     2     4     8    16    32    64\n                 \
    \  Windowsize (in Blocks of 1456 Bytes)\n   Comparatively, the same 180 MB transfer\
    \ performed over a drive mapped\n   on Server Message Block (SMB) / Common Internet\
    \ File System (CIFS) on\n   the same scenario took 23 seconds.\n   The comparison\
    \ of transfer times (without a gateway) between the\n   standard lockstep schema\
    \ and the negotiated windowsizes are:\n               Windowsize  |  Time Reduction\
    \ (%)\n               ----------     -----------------\n                    1\
    \              -0%\n                    2             -49%\n                 \
    \   4             -70%\n                    8             -79%\n             \
    \      16             -84%\n                   32             -85%\n         \
    \          64             -86%\n   The transfer time decreases with the use of\
    \ a windowed schema.  The\n   reason for the reduction in time is the reduction\
    \ in the number of\n   the required synchronous acknowledgements exchanged.\n\
    \   The choice of appropriate windowsize values on a particular scenario\n   depends\
    \ on the underlying networking technology and topology, and\n   likely other factors\
    \ as well.  Operators SHOULD test various values\n   and SHOULD be conservative\
    \ when selecting a windowsize value because\n   as the former table and chart\
    \ shows, there is a point where the\n   benefit of continuing to increase the\
    \ windowsize is subject to\n   diminishing returns.\n"
- title: 6.  Congestion and Error Control
  contents:
  - "6.  Congestion and Error Control\n   From a congestion control (CC) standpoint,\
    \ the number of blocks in a\n   window does not pose an intrinsic threat to the\
    \ ability of\n   intermediate devices to signal congestion through drops.  The\
    \ rate at\n   which TFTP UDP datagrams are sent SHOULD follow the CC guidelines\
    \ in\n   Section 3.1 of [RFC5405].\n   From an error control standpoint, while\
    \ [RFC1350] and subsequent\n   updates do not specify a circuit breaker (CB),\
    \ existing\n   implementations have always chosen to fail under certain\n   circumstances.\
    \  Implementations SHOULD always set a maximum number of\n   retries for datagram\
    \ retransmissions, imposing an appropriate\n   threshold on error recovery attempts,\
    \ after which a transfer SHOULD\n   always be aborted to prevent pathological\
    \ retransmission conditions.\n   An implementation example scaled for an Ethernet\
    \ environment\n   (1 Gbit/s, MTU=1500) would be to set:\n   windowsize = 8\n \
    \  blksize = 1456\n   maximum retransmission attempts per block/window = 6\n \
    \  timeout between retransmissions = 1 S\n   minimum inter-packet delay = 80 uS\n\
    \   Implementations might well choose other values based on expected\n   and/or\
    \ tested operating conditions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   TFTP includes no login or access control mechanisms.\
    \  Care must be\n   taken when using TFTP for file transfers where authentication,\
    \ access\n   control, confidentiality, or integrity checking are needed.  Note\n\
    \   that those security services could be supplied above or below the\n   layer\
    \ at which TFTP runs.  Care must also be taken in the rights\n   granted to a\
    \ TFTP server process so as not to violate the security of\n   the server's file\
    \ system.  TFTP is often installed with controls such\n   that only files that\
    \ have public read access are available via TFTP.\n   Also listing, deleting,\
    \ renaming, and writing files via TFTP are\n   typically disallowed.  TFTP file\
    \ transfers are NOT RECOMMENDED where\n   the inherent protocol limitations could\
    \ raise insurmountable\n   liability concerns.\n   TFTP includes no protection\
    \ against an on-path attacker; care must be\n   taken in controlling windowsize\
    \ values according to data sender, data\n   receiver, and network environment\
    \ capabilities.  TFTP service is\n   frequently associated with bootstrap and\
    \ initial provisioning\n   activities; servers in such an environment are in a\
    \ position to\n   impose device or network specific throughput limitations as\n\
    \   appropriate.\n   This document does not add any security controls to TFTP;\
    \ however,\n   the specified extension does not pose additional security risks\n\
    \   either.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1350]   Sollins, K., \"The TFTP Protocol (Revision\
    \ 2)\", STD 33,\n               RFC 1350, July 1992,\n               <http://www.rfc-editor.org/info/rfc1350>.\n\
    \   [RFC2347]   Malkin, G. and A. Harkin, \"TFTP Option Extension\", RFC\n   \
    \            2347, May 1998, <http://www.rfc-editor.org/info/rfc2347>.\n   [RFC2348]\
    \   Malkin, G. and A. Harkin, \"TFTP Blocksize Option\", RFC\n               2348,\
    \ May 1998, <http://www.rfc-editor.org/info/rfc2348>.\n   [RFC5405]   Eggert,\
    \ L. and G. Fairhurst, \"Unicast UDP Usage\n               Guidelines for Application\
    \ Designers\", BCP 145, RFC 5405,\n               November 2008, <http://www.rfc-editor.org/info/rfc5405>.\n\
    \   [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n       \
    \        Requirement Levels\", BCP 14, RFC 2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Patrick Masotta\n   Serva\n   EMail: patrick.masotta.ietf@vercot.com\n\
    \   URI:   http://www.vercot.com/~serva/\n"
