- title: __initial_text__
  contents:
  - '        Requirements for NFSv4 Multi-Domain Namespace Deployment

    '
- title: Abstract
  contents:
  - "Abstract\n   This document presents requirements for the deployment of the NFSv4\n\
    \   protocols for the construction of an NFSv4 file namespace in\n   environments\
    \ with multiple NFSv4 Domains.  To participate in an NFSv4\n   multi-domain file\
    \ namespace, the server must offer a multi-domain-\n   capable file system and\
    \ support RPCSEC_GSS for user authentication.\n   In most instances, the server\
    \ must also support identity-mapping\n   services.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8000.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   3.  Federated File System . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   4.  Identity Mapping  . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     4.1.  NFSv4 Server Identity Mapping . . . . . . . . . . . . . .\
    \   6\n     4.2.  NFSv4 Client Identity Mapping . . . . . . . . . . . . . .  \
    \ 7\n   5.  Stand-Alone NFSv4 Domain Deployment Examples  . . . . . . . .   7\n\
    \     5.1.  AUTH_SYS with Stringified UID/GID . . . . . . . . . . . .   7\n  \
    \   5.2.  AUTH_SYS with Name@domain . . . . . . . . . . . . . . . .   8\n    \
    \ 5.3.  RPCSEC_GSS with Name@domain . . . . . . . . . . . . . . .   8\n   6. \
    \ Multi-Domain Constraints to the NFSv4 Protocol  . . . . . . .   9\n     6.1.\
    \  Name@domain Constraints . . . . . . . . . . . . . . . . .   9\n       6.1.1.\
    \  NFSv4 Domain and DNS Services . . . . . . . . . . . .   9\n       6.1.2.  NFSv4\
    \ Domain and Name Services  . . . . . . . . . . .  10\n     6.2.  RPC Security\
    \ Constraints  . . . . . . . . . . . . . . . .  10\n       6.2.1.  NFSv4 Domain\
    \ and Security Services  . . . . . . . . .  11\n   7.  Stand-Alone Examples in\
    \ an NFSv4 Multi-Domain Deployment  . .  11\n   8.  Resolving Multi-Domain Authorization\
    \ Information  . . . . . .  12\n   9.  Security Considerations . . . . . . . .\
    \ . . . . . . . . . . .  13\n   10. References  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  14\n     10.1.  Normative References . . . . . . . . .\
    \ . . . . . . . . .  14\n     10.2.  Informative References . . . . . . . . .\
    \ . . . . . . . .  15\n   Acknowledgments . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  17\n   Authors' Addresses  . . . . . . . . . . . . . . . . .\
    \ . . . . . .  17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The NFSv4 protocols NFSv4.0 [RFC7530], NFSv4.1 [RFC5661],\
    \ and NFSv4.2\n   [RFC7862] introduce the concept of an NFS Domain.  An NFSv4\
    \ Domain is\n   defined as a set of users and groups using the NFSv4 name@domain\
    \ user\n   and group identification syntax with the same specified @domain.\n\
    \   Previous versions of the NFS protocol, such as NFSv3 [RFC1813], use\n   the\
    \ UNIX-centric user identification mechanism of numeric user and\n   group ID\
    \ for the uid3 and gid3 [RFC1813] file attributes and for\n   identity in the\
    \ authsys_parms AUTH_SYS credential defined in the Open\n   Network Computing\
    \ (ONC) Remote Procedure Call (RPC) protocol\n   [RFC5531].  Section 6.1 of [RFC2624]\
    \ notes that the use of UNIX-\n   centric numeric IDs limits the scale of NFS\
    \ to large local work\n   groups.  UNIX-centric numeric IDs are not unique across\
    \ NFSv3\n   deployments and so are not designed for Internet scaling achieved\
    \ by\n   taking into account multiple naming domains and multiple naming\n   mechanisms\
    \ (see Section 6.2).  The NFSv4 Domain's use of the\n   name@domain syntax provides\
    \ this Internet scaling by allowing servers\n   and clients to translate between\
    \ the external name@domain string\n   representation to a local or internal numeric\
    \ (or other identifier)\n   representation, which matches internal implementation\
    \ needs.\n   Multi-domain deployments require support for unique identities across\n\
    \   the deployment's name services and security services, as well as the\n   use\
    \ of multi-domain file systems capable of the on-disk\n   representation of identities\
    \ belonging to multiple NFSv4 Domains.\n   The name@domain syntax can provide\
    \ unique identities and thus enables\n   the NFSv4 multi-domain file namespace.\n\
    \   Unlike previous versions of NFS, the NFSv4 protocols define a\n   referral\
    \ mechanism (Section 8.4.3 of [RFC7530]) that allows a single\n   server or a\
    \ set of servers to present a multi-server namespace that\n   encompasses file\
    \ systems located on multiple servers.  This enables\n   the establishment of\
    \ site-wide, organization-wide, or even a truly\n   global file namespace.\n \
    \  The NFSv4 protocols' name@domain syntax and referral mechanism along\n   with\
    \ the use of RPCSEC_GSS security mechanisms enables the\n   construction of an\
    \ NFSv4 multi-domain file namespace.\n   This document presents requirements on\
    \ the deployment of the NFSv4\n   protocols for the construction of an NFSv4 file\
    \ namespace in\n   environments with multiple NFSv4 Domains.  To participate in\
    \ an NFSv4\n   multi-domain file namespace, the server must offer a multi-domain-\n\
    \   capable file system and support RPCSEC_GSS [RFC2203] for user\n   authentication.\
    \  In most instances, the server must also support\n   identity-mapping services.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   NFSv4 Domain:  A set of users and groups using the NFSv4\
    \ name@domain\n      user and group identification syntax with the same specified\n\
    \      @domain.\n   Stand-alone NFSv4 Domain:  A deployment of the NFSv4 protocols\
    \ and\n      NFSv4 file namespace in an environment with a single NFSv4 Domain.\n\
    \   Local representation of identity:  A representation of a user or a\n     \
    \ group of users capable of being stored persistently within a file\n      system.\
    \  Typically, such representations are identical to the form\n      in which users\
    \ and groups are represented within internal server\n      APIs.  Examples are\
    \ numeric IDs such as a uidNumber (UID),\n      gidNumber (GID) [RFC2307], or\
    \ a Windows Security Identifier (SID)\n      [CIFS].  In some cases, the identifier\
    \ space for user and groups\n      overlap, requiring anyone using such an ID\
    \ to know a priori\n      whether the identifier is for a user or a group.\n \
    \  Unique identity:  An on-the-wire form of identity that is unique\n      across\
    \ an NFSv4 multi-domain namespace that can be mapped to a\n      local representation.\
    \  For example, the NFSv4 name@domain or the\n      Kerberos principal [RFC4120].\n\
    \   Multi-domain:  In this document, the term \"multi-domain\" always\n      refers\
    \ to multiple NFSv4 Domains.\n   Multi-domain-capable file system:  A local file\
    \ system that uses a\n      local ID form that can represent NFSv4 identities\
    \ from multiple\n      domains.\n   Principal:  An RPCSEC_GSS [RFC2203] authentication\
    \ identity.  It is\n      usually, but not always, a user; rarely, if ever, a\
    \ group; and\n      sometimes a host or server.\n   Authorization Context:  A\
    \ collection of information about a principal\n      such as user name, userID,\
    \ group membership, etc., used in\n      authorization decisions.\n   Stringified\
    \ UID or GID:  NFSv4 owner and group strings that consist\n      of decimal numeric\
    \ values with no leading zeros and that do not\n      contain an '@' sign.  See\
    \ Section 5.9 of [RFC5661].\n   Name Service:  Facilities that provide the mapping\
    \ between {NFSv4\n      Domain, group, or user name} and the appropriate local\n\
    \      representation of identity.  Also includes facilities providing\n     \
    \ mapping between a security principal and local representation of\n      identity.\
    \  Can be applied to unique identities or principals from\n      within local\
    \ and remote domains.  Often provided by a Directory\n      Service such as the\
    \ Lightweight Directory Access Protocol (LDAP)\n      [RFC4511].\n   Name Service\
    \ Switch (nsswitch):  A facility that provides a variety\n      of sources for\
    \ common configuration databases and name resolution\n      mechanisms.\n   FedFS:\
    \  The Federated File System (FedFS) [RFC5716] describes the\n      requirements\
    \ and administrative tools to construct a uniform NFSv4\n      file-server-based\
    \ namespace that is capable of spanning a whole\n      enterprise and that is\
    \ easy to manage.\n   Domain:  This term is used in multiple contexts where it\
    \ has\n      different meanings.  \"NFSv4 Domain\" and \"multi-domain\" are defined\n\
    \      above.\n      DNS domain:  A set of computers, services, or any Internet\n\
    \         resource identified by a DNS domain name [RFC1034].\n      Security\
    \ realm or domain:  A set of configured security providers,\n         users, groups,\
    \ security roles, and security policies running a\n         single security protocol\
    \ and administered by a single entity,\n         for example, a Kerberos realm.\n\
    \      FedFS domain:  A file namespace that can cross multiple shares on\n   \
    \      multiple file servers using file-access protocols such as\n         NFSv4.\
    \  A FedFS domain is typically a single administrative\n         entity and has\
    \ a name that is similar to a DNS domain name.\n         Also known as a \"Federation\"\
    .\n      Administrative domain:  A set of users, groups, computers, and\n    \
    \     services administered by a single entity.  Can include multiple\n      \
    \   DNS domains, NFSv4 Domains, security domains, and FedFS\n         domains.\n"
- title: 3.  Federated File System
  contents:
  - "3.  Federated File System\n   The FedFS is the standardized method of constructing\
    \ and\n   administrating an enterprise-wide NFSv4 file system and is thus\n  \
    \ referenced in this document.  The requirements for multi-domain\n   deployments\
    \ described in this document apply to all NFSv4 multi-\n   domain deployments,\
    \ whether or not they are run as a FedFS.\n   Stand-alone NFSv4 Domain deployments\
    \ can be run in many ways.  While\n   a FedFS can be run within all stand-alone\
    \ NFSv4 Domain\n   configurations, some of these configurations (Section 5) are\
    \ not\n   compatible with joining a multi-domain FedFS namespace.\n"
- title: 4.  Identity Mapping
  contents:
  - '4.  Identity Mapping

    '
- title: 4.1.  NFSv4 Server Identity Mapping
  contents:
  - "4.1.  NFSv4 Server Identity Mapping\n   NFSv4 servers deal with two kinds of\
    \ identities: authentication\n   identities (referred to here as \"principals\"\
    ) and authorization\n   identities (\"users\" and \"groups\" of users).  NFSv4\
    \ supports multiple\n   authentication methods, each authenticating an \"initiator\
    \ principal\"\n   (typically representing a user) to an \"acceptor principal\"\
    \ (always\n   corresponding to the NFSv4 server).  NFSv4 does not prescribe how\
    \ to\n   represent authorization identities on file systems.  All file access\n\
    \   decisions constitute \"authorization\" and are made by NFSv4 servers\n   using\
    \ authorization context information and file metadata related to\n   authorization,\
    \ such as a file's access control list (ACL).\n   NFSv4 servers may be required\
    \ to perform two kinds of mappings\n   depending upon what authentication and\
    \ authorization information is\n   sent on the wire and what is stored in the\
    \ exported file system.  For\n   example, if an authentication identity such as\
    \ a Kerberos principal\n   is sent with authorization information such as a \"\
    privilege attribute\n   certificate\" (PAC) [PAC], then mapping is not required\
    \ (see\n   Section 8).\n   1.  Auth-to-authz: A mapping between the authentication\
    \ identity and\n       the authorization context information.\n   2.  Wire-to-disk:\
    \ A mapping between the on-the-wire authorization\n       identity representation\
    \ and the on-disk authorization identity\n       representation.\n   A name service\
    \ such as LDAP often provides these mappings.\n   Many aspects of these mappings\
    \ are entirely implementation specific,\n   but some require multi-domain-capable\
    \ name resolution and security\n   services in order to interoperate in a multi-domain\
    \ environment.\n   NFSv4 servers use these mappings for:\n   1.  File access:\
    \ Both the auth-to-authz and the wire-to-disk mappings\n       may be required\
    \ for file access decisions.\n   2.  Metadata setting and listing: The auth-to-authz\
    \ mapping is\n       usually required to service file metadata setting or listing\n\
    \       requests such as ACL or UNIX permission setting or listing.  This\n  \
    \     mapping is needed because NFSv4 messages use identity\n       representations\
    \ of the form name@domain, which normally differs\n       from the server's local\
    \ representation of identity.\n"
- title: 4.2.  NFSv4 Client Identity Mapping
  contents:
  - "4.2.  NFSv4 Client Identity Mapping\n   A client setting the owner or group attribute\
    \ will often need access\n   to identity-mapping services.  This is because APIs\
    \ within the client\n   will specify the identity in a local form (e.g., UNIX\
    \ using a UID/\n   GID) so that when stringified id's cannot be used, the ID must\
    \ be\n   converted to a unique identity form.\n   A client obtaining values for\
    \ the owner or group attributes will\n   similarly need access to identity-mapping\
    \ services.  This is because\n   the client API will need these attributes in\
    \ a local form, as above.\n   As a result, name services need to be available\
    \ to convert the unique\n   identity to a local form.\n   Note that each of these\
    \ situations arises because client-side APIs\n   require a particular local identity\
    \ representation.  The need for\n   mapping services would not arise if the clients\
    \ could use the unique\n   representation of identity directly.\n"
- title: 5.  Stand-Alone NFSv4 Domain Deployment Examples
  contents:
  - "5.  Stand-Alone NFSv4 Domain Deployment Examples\n   The purpose of this section\
    \ is to list some typical stand-alone\n   deployment examples to highlight the\
    \ need for the required restraints\n   to the NFSv4 protocol, name service configuration,\
    \ and security\n   service choices in an NFSv4 multi-domain environment described\
    \ in\n   Section 6.\n   Section 7 notes how these stand-alone deployment examples\
    \ would need\n   to change to participate in an NFSv4 multi-domain deployment.\n\
    \   In order to service as many environments as possible, the NFSv4\n   protocol\
    \ is designed to allow administrators freedom to configure\n   their NFSv4 Domains\
    \ as they please.  Stand-alone NFSv4 Domains can be\n   run in many ways.\n  \
    \ These examples are for an NFSv4 server exporting a POSIX UID/GID-\n   based\
    \ file system, a typical deployment.  These examples are listed\n   in the order\
    \ of increasing NFSv4 administrative complexity.\n"
- title: 5.1.  AUTH_SYS with Stringified UID/GID
  contents:
  - "5.1.  AUTH_SYS with Stringified UID/GID\n   This example is the closest NFSv4\
    \ gets to being run as NFSv3 as there\n   is no need for a name service for file\
    \ metadata listing.\n   File access: The AUTH_SYS RPC credential [RFC5531] provides\
    \ a UID as\n   the authentication identity, and a list of GIDs as authorization\n\
    \   context information.  File access decisions require no name service\n   interaction\
    \ as the on-the-wire and on-disk representation are the\n   same and the auth-to-authz\
    \ UID and GID authorization context\n   information is provided in the RPC credential.\n\
    \   Metadata setting and listing: When the NFSv4 clients and servers\n   implement\
    \ a stringified UID/GID scheme, where a stringified UID or\n   GID is used for\
    \ the NFSv4 name@domain on-the-wire identity, then a\n   name service is not required\
    \ for file metadata listing as the UID, or\n   GID can be constructed from the\
    \ stringified form on the fly by the\n   server.\n"
- title: 5.2.  AUTH_SYS with Name@domain
  contents:
  - "5.2.  AUTH_SYS with Name@domain\n   Another possibility is to express identity\
    \ using the form\n   'name@domain', rather than using a stringified UID/GID scheme\
    \ for\n   file metadata setting and listing.\n   File access: This is the same\
    \ as in Section 5.1.\n   Metadata setting and listing: The NFSv4 server will need\
    \ to use a\n   name service for the wire-to-disk mappings to map between the on-the-\n\
    \   wire name@domain syntax and the on-disk UID/GID representation.\n   Often,\
    \ the NFSv4 server will use the nsswitch interface for these\n   mappings.  A\
    \ typical use of the nsswitch name service interface uses\n   no domain component,\
    \ just the UID attribute [RFC2307] (or login name)\n   as the name component.\
    \  This is not an issue in a stand-alone NFSv4\n   Domain deployment as the NFSv4\
    \ Domain is known to the NFSv4 server\n   and can be combined with the login name\
    \ to form the name@domain\n   syntax after the return of the name service call.\n"
- title: 5.3.  RPCSEC_GSS with Name@domain
  contents:
  - "5.3.  RPCSEC_GSS with Name@domain\n   RPCSEC_GSS uses Generic Security Service\
    \ Application Program\n   Interface (GSS-API) [RFC2743] security mechanisms to\
    \ securely\n   authenticate users to servers.  The most common mechanism is Kerberos\n\
    \   [RFC4121].\n   This final example adds the use of RPCSEC_GSS with the Kerberos\
    \ 5 GSS\n   security mechanism.\n   File Access: The forms of GSS principal names\
    \ are mechanism specific.\n   For Kerberos, these are of the form principal@REALM.\
    \  Sometimes\n   authorization context information is delivered with authentication,\n\
    \   but this cannot be counted on.  Authorization context information not\n  \
    \ delivered with authentication has timely update considerations (i.e.,\n   generally\
    \ it's not possible to get a timely update).  File access\n   decisions therefore\
    \ require a wire-to-disk mapping of the GSS\n   principal to a UID and an auth-to-authz\
    \ mapping to obtain the list of\n   GIDs as the authorization context.\n   Metadata\
    \ setting and listing: This is the same as in Section 5.2.\n"
- title: 6.  Multi-Domain Constraints to the NFSv4 Protocol
  contents:
  - "6.  Multi-Domain Constraints to the NFSv4 Protocol\n   Joining NFSv4 Domains\
    \ under a single file namespace imposes slightly\n   on the NFSv4 administrative\
    \ freedom.  In this section, we describe\n   the required constraints.\n"
- title: 6.1.  Name@domain Constraints
  contents:
  - "6.1.  Name@domain Constraints\n   NFSv4 uses a syntax of the form \"name@domain\"\
    \ (see Section 5.9 of\n   [RFC7530]) as the on-the-wire representation of the\
    \ \"who\" field of an\n   NFSv4 access control entry (ACE) for users and groups.\
    \  This design\n   provides a level of indirection that allows NFSv4 clients and\
    \ servers\n   with different internal representations of authorization identity\
    \ to\n   interoperate even when referring to authorization identities from\n \
    \  different NFSv4 Domains.\n   Multi-domain-capable sites need to meet the following\
    \ requirements in\n   order to ensure that NFSv4 clients and servers can map between\n\
    \   name@domain and internal representations reliably.  While some of\n   these\
    \ constraints are basic assumptions in NFSv4.0 [RFC7530] and\n   NFSv4.1 [RFC5661],\
    \ they need to be clearly stated for the multi-\n   domain case.\n   o  The NFSv4\
    \ Domain portion of name@domain MUST be unique within the\n      multi-domain\
    \ namespace.  See [RFC5661], Section 5.9 (\"Interpreting\n      owner and owner_group\"\
    ) for a discussion on NFSv4 Domain\n      configuration.\n   o  The name portion\
    \ of name@domain MUST be unique within the\n      specified NFSv4 Domain.\n  \
    \ Due to UID and GID collisions, stringified UID/GIDs MUST NOT be used\n   in\
    \ a multi-domain deployment.  This means that multi-domain-capable\n   servers\
    \ MUST reject requests that use stringified UID/GIDs.\n"
- title: 6.1.1.  NFSv4 Domain and DNS Services
  contents:
  - "6.1.1.  NFSv4 Domain and DNS Services\n   Here we address the relationship between\
    \ NFSv4 Domain name and DNS\n   domain name in a multi-domain deployment.\n  \
    \ The definition of an NFSv4 Domain name, the @domain portion of the\n   name@domain\
    \ syntax, needs clarification to work in a multi-domain\n   file system namespace.\
    \  [RFC5661], Section 5.9 loosely defines the\n   NFSv4 Domain name as a DNS domain\
    \ name.  This loose definition for\n   the NFSv4 Domain name is a good one, as\
    \ DNS domain names are globally\n   unique.  As noted in Section 6.1, any choice\
    \ of NFSv4 Domain name can\n   work within a stand-alone NFSv4 Domain deployment\
    \ whereas the NFSv4\n   Domain name is required to be unique across a multi-domain\n\
    \   deployment.\n   A typical configuration is that there is a single NFSv4 Domain\
    \ that\n   is served by a single DNS domain.  In this case, the NFSv4 Domain\n\
    \   name can be the same as the DNS domain name.\n   An NFSv4 Domain can span\
    \ multiple DNS domains.  In this case, one of\n   the DNS domain names can be\
    \ chosen as the NFSv4 Domain name.\n   Multiple NFSv4 Domains can also share a\
    \ DNS domain.  In this case,\n   only one of the NFSv4 Domains can use the DNS\
    \ domain name, the other\n   NFSv4 Domains must choose another unique NFSv4 Domain\
    \ name.\n"
- title: 6.1.2.  NFSv4 Domain and Name Services
  contents:
  - "6.1.2.  NFSv4 Domain and Name Services\n   As noted in Section 6.1, each name@domain\
    \ is unique across the multi-\n   domain namespace and maps, on each NFSv4 server,\
    \ to the local\n   representation of identity used by that server.  Typically,\
    \ this\n   representation consists of an indication of the particular domain\n\
    \   combined with the UID/GID corresponding to the name component.  To\n   support\
    \ such an arrangement, each NFSv4 Domain needs to have a single\n   name resolution\
    \ service capable of converting the names defined\n   within the domain to the\
    \ corresponding local representation.\n"
- title: 6.2.  RPC Security Constraints
  contents:
  - "6.2.  RPC Security Constraints\n   As described in [RFC5661], Section 2.2.1.1\
    \ (\"RPC Security Flavors\"):\n      NFSv4.1 clients and servers MUST implement\
    \ RPCSEC_GSS.  (This\n      requirement to implement is not a requirement to use.)\
    \  Other\n      flavors, such as AUTH_NONE and AUTH_SYS, MAY be implemented as\n\
    \      well.\n   The underlying RPCSEC_GSS GSS-API [RFC2203] security mechanism\
    \ used\n   in a multi-domain namespace is REQUIRED to employ a method of cross\n\
    \   NFSv4 Domain trust so that a principal from a security service in one\n  \
    \ NFSv4 Domain can be authenticated in another NFSv4 Domain that uses a\n   security\
    \ service with the same security mechanism.  Kerberos is an\n   example of such\
    \ a security service.\n   The AUTH_NONE [RFC5531] security flavor can be useful\
    \ in a multi-\n   domain deployment to grant universal read-only access to public\
    \ data\n   without any credentials.\n   The AUTH_SYS security flavor [RFC5531]\
    \ uses a host-based\n   authentication model where the weakly authenticated host\
    \ (the NFSv4\n   client) asserts the user's authorization identities using small\n\
    \   integers, uidNumber, and gidNumber [RFC2307] as user and group\n   identity\
    \ representations.  Because this authorization ID\n   representation has no domain\
    \ component, AUTH_SYS can only be used in\n   a namespace where all NFSv4 clients\
    \ and servers share a name service\n   as described in [RFC2307].  A shared name\
    \ service is required because\n   uidNumbers and gidNumbers are passed in the\
    \ RPC credential; there is\n   no negotiation of namespace in AUTH_SYS.  Collisions\
    \ can occur if\n   multiple name services are used, so AUTH_SYS MUST NOT be used\
    \ in a\n   multi-domain file system deployment.\n"
- title: 6.2.1.  NFSv4 Domain and Security Services
  contents:
  - "6.2.1.  NFSv4 Domain and Security Services\n   As noted in Section 6.2 regarding\
    \ AUTH_NONE, multiple NFSv4 Domain\n   security services are RPCSEC_GSS based\
    \ with the Kerberos 5 security\n   mechanism being the most commonly (and as of\
    \ this writing, the only)\n   deployed service.\n   A single Kerberos 5 security\
    \ service per NFSv4 Domain with the upper\n   case NFSv4 Domain name as the Kerberos\
    \ 5 REALM name is a common\n   deployment.\n   Multiple security services per\
    \ NFSv4 Domain is allowed and brings the\n   need of mapping multiple Kerberos\
    \ 5 principal@REALMs to the same\n   local ID.  Methods of achieving this are\
    \ beyond the scope of this\n   document.\n"
- title: 7.  Stand-Alone Examples in an NFSv4 Multi-Domain Deployment
  contents:
  - "7.  Stand-Alone Examples in an NFSv4 Multi-Domain Deployment\n   In this section,\
    \ we revisit the stand-alone NFSv4 Domain deployment\n   examples in Section 5\
    \ and note what is prohibiting them from\n   participating in an NFSv4 multi-domain\
    \ deployment.\n   Note that because all on-disk identities participating in a\
    \ stand-\n   alone NFSv4 Domain belong to the same NFSv4 Domain, stand-alone NFSv4\n\
    \   Domain deployments have no requirement for exporting multi-domain-\n   capable\
    \ file systems.  To participate in an NFSv4 multi-domain\n   deployment, all three\
    \ examples in Section 5 would need to export\n   multi-domain-capable file systems.\n\
    \   Due to the use of AUTH_SYS and stringified UID/GIDs, the first stand-\n  \
    \ alone deployment example (described in Section 5.1) is not suitable\n   for\
    \ participation in an NFSv4 multi-domain deployment.\n   The second example (described\
    \ in Section 5.2) does use the\n   name@domain syntax, but the use of AUTH_SYS\
    \ prohibits its\n   participation in an NFSv4 multi-domain deployment.\n   The\
    \ third example (described in Section 5.3) can participate in a\n   multi-domain\
    \ namespace deployment if:\n   o  The NFSv4 Domain name is unique across the namespace.\n\
    \   o  All exported file systems are multi-domain capable.\n   o  A secure method\
    \ is used to resolve the remote NFSv4 Domain\n      principal's authorization\
    \ information from an authoritative\n      source.\n"
- title: 8.  Resolving Multi-Domain Authorization Information
  contents:
  - "8.  Resolving Multi-Domain Authorization Information\n   When an RPCSEC_GSS principal\
    \ is seeking access to files on an NFSv4\n   server, after authenticating the\
    \ principal, the server SHOULD obtain\n   in a secure manner the principal's authorization\
    \ context information\n   from an authoritative source such as the name service\
    \ in the\n   principal's NFSv4 Domain.\n   In the stand-alone NFSv4 Domain case\
    \ where the principal is seeking\n   access to files on an NFSv4 server in the\
    \ principal's home NFSv4\n   Domain, the server administrator has knowledge of\
    \ the local policies\n   and methods for obtaining the principal's authorization\
    \ information\n   and the mappings to local representation of identity from an\n\
    \   authoritative source.  For example, the administrator can configure\n   secure\
    \ access to the local NFSv4 Domain name service.\n   In the multi-domain case\
    \ where a principal is seeking access to files\n   on an NFSv4 server not in the\
    \ principal's home NFSv4 Domain, the\n   NFSv4 server may be required to contact\
    \ the remote name service in\n   the principal's NFSv4 Domain.  In this case,\
    \ there is no assumption\n   of:\n   o  Remote name service configuration knowledge.\n\
    \   o  The syntax of the remote authorization context information\n      presented\
    \ to the NFSv4 server by the remote name service for\n      mapping to a local\
    \ representation.\n   There are several methods the NFSv4 server can use to obtain\
    \ the\n   NFSv4 Domain authoritative authorization information for a remote\n\
    \   principal from an authoritative source.  While detailing these\n   methods\
    \ is beyond the scope of this document, some general methods\n   are listed here.\n\
    \   1.  A mechanism-specific GSS-API authorization payload containing\n      \
    \ credential authorization data such as a \"privilege attribute\n       certificate\"\
    \ (PAC) [PAC] or a \"principal authorization data\"\n       (PAD) [GEN-PAC]. \
    \ This is the preferred method as the payload is\n       delivered as part of\
    \ GSS-API authentication, avoids requiring any\n       knowledge of the remote\
    \ authoritative service configuration, and\n       has a well-known syntax.\n\
    \   2.  When there is a security agreement between the local and remote\n    \
    \   NFSv4 Domain name services plus regular update data feeds, the\n       NFSv4\
    \ server local NFSv4 Domain name service can be authoritative\n       for principals\
    \ in the remote NFSv4 Domain.  In this case, the\n       NFSv4 server makes a\
    \ query to its local NFSv4 Domain name service\n       just as it does when servicing\
    \ a local domain principal.  While\n       this requires detailed knowledge of\
    \ the remote NFSv4 Domain name\n       service for the update data feeds, the\
    \ authorization context\n       information presented to the NFSv4 server is in\
    \ the same form as\n       a query for a local principal.\n   3.  An authenticated\
    \ direct query from the NFSv4 server to the\n       principal's NFSv4 Domain authoritative\
    \ name service.  This\n       requires the NFSv4 server to have detailed knowledge\
    \ of the\n       remote NFSv4 Domain's authoritative name service and detailed\n\
    \       knowledge of the syntax of the resultant authorization context\n     \
    \  information.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This RFC discusses security throughout.  All\
    \ the security\n   considerations of the relevant protocols, such as NFSv4.0 [RFC7530],\n\
    \   NFSv4.1 [RFC5661], RPCSEC_GSS [RFC2203], GSS-API [RFC4121], LDAP\n   [RFC4511],\
    \ Requirements for Federated FS [RFC5716], FedFS Namespace\n   Database Protocol\
    \ [RFC7532], FedFS Administration Protocol [RFC7533],\n   and FedFS Security Addendum\
    \ [SEC-ADD] apply.\n   Authentication and authorization across administrative\
    \ domains\n   present security considerations, most of which are treated elsewhere,\n\
    \   but we repeat some of them here:\n   o  latency in propagation of revocation\
    \ of authentication credentials\n   o  latency in propagation of revocation of\
    \ authorizations\n   o  latency in propagation of granting of authorizations\n\
    \   o  complications in establishing a complete authorization context for\n  \
    \    users of a foreign domain (only parts may be available to servers)\n   o\
    \  privacy considerations in a federated environment\n   Most of these are security\
    \ considerations of the mechanisms used to\n   authenticate users to servers and\
    \ servers to users and of the\n   mechanisms used to evaluate a user's authorization\
    \ context.\n   Implementors may be tempted to assume that \"realm\" (or \"issuer\"\
    ) and\n   \"NFSv4 Domain\" are roughly the same thing, but they are not.\n   Configuration\
    \ and/or lookup protocols (such as LDAP) and associated\n   schemas are generally\
    \ required in order to evaluate a user\n   principal's authorization context (see\
    \ Section 8).  In the simplest\n   scheme, a server has access to a database mapping\
    \ all known principal\n   names to user names whose authorization context can\
    \ be evaluated\n   using operating system interfaces that deal in user names rather\
    \ than\n   principal names.\n   Note that clients may also need to evaluate a\
    \ server's authorization\n   context when using labeled security [RFC7862] (e.g.,\
    \ is the server\n   authorized to handle content at a given security level for\
    \ the given\n   client process subject label).\n   When the server accepts user\
    \ credentials from more than one realm, it\n   is important to remember that the\
    \ server must verify that the client\n   it is talking to has a credential for\
    \ the name the client has\n   presented the server and that the credential's issuer\
    \ (i.e., its\n   realm) is allowed to issue it.  Usually, the service principal\
    \ realm\n   authorization function is implemented by the security mechanism, but\n\
    \   the implementor should check this.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names -\
    \ concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,\
    \ November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n  \
    \ [RFC1813]  Callaghan, B., Pawlowski, B., and P. Staubach, \"NFS\n          \
    \    Version 3 Protocol Specification\", RFC 1813,\n              DOI 10.17487/RFC1813,\
    \ June 1995,\n              <http://www.rfc-editor.org/info/rfc1813>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2203]  Eisler,\
    \ M., Chiu, A., and L. Ling, \"RPCSEC_GSS Protocol\n              Specification\"\
    , RFC 2203, DOI 10.17487/RFC2203, September\n              1997, <http://www.rfc-editor.org/info/rfc2203>.\n\
    \   [RFC2743]  Linn, J., \"Generic Security Service Application Program\n    \
    \          Interface Version 2, Update 1\", RFC 2743,\n              DOI 10.17487/RFC2743,\
    \ January 2000,\n              <http://www.rfc-editor.org/info/rfc2743>.\n   [RFC4121]\
    \  Zhu, L., Jaganathan, K., and S. Hartman, \"The Kerberos\n              Version\
    \ 5 Generic Security Service Application Program\n              Interface (GSS-API)\
    \ Mechanism: Version 2\", RFC 4121,\n              DOI 10.17487/RFC4121, July\
    \ 2005,\n              <http://www.rfc-editor.org/info/rfc4121>.\n   [RFC4511]\
    \  Sermersheim, J., Ed., \"Lightweight Directory Access\n              Protocol\
    \ (LDAP): The Protocol\", RFC 4511,\n              DOI 10.17487/RFC4511, June\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4511>.\n   [RFC5661]\
    \  Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed.,\n              \"Network\
    \ File System (NFS) Version 4 Minor Version 1\n              Protocol\", RFC 5661,\
    \ DOI 10.17487/RFC5661, January 2010,\n              <http://www.rfc-editor.org/info/rfc5661>.\n\
    \   [RFC7530]  Haynes, T., Ed. and D. Noveck, Ed., \"Network File System\n   \
    \           (NFS) Version 4 Protocol\", RFC 7530, DOI 10.17487/RFC7530,\n    \
    \          March 2015, <http://www.rfc-editor.org/info/rfc7530>.\n   [RFC7862]\
    \  Haynes, T., \"Network File System (NFS) Version 4 Minor\n              Version\
    \ 2 Protocol\", RFC 7862, DOI 10.17487/RFC7862,\n              November 2016,\
    \ <http://www.rfc-editor.org/info/rfc7862>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [CIFS]     Microsoft Corporation, \"[MS-CIFS]:\
    \ Common Internet File\n              System (CIFS) Protocol\", MS-CIFS v20160714\
    \ (Rev 26.0),\n              July 2016.\n   [GEN-PAC]  Sorce, S., Ed., Yu, T.,\
    \ Ed., and T. Hardjono, Ed., \"A\n              Generalized PAC for Kerberos V5\"\
    , Work in Progress,\n              draft-ietf-krb-wg-general-pac-01, October 2011.\n\
    \   [PAC]      Brezak, J., \"Utilizing the Windows 2000 Authorization Data\n \
    \             in Kerberos Tickets for Access Control to Resources\",\n       \
    \       February 2002.\n   [RFC2307]  Howard, L., \"An Approach for Using LDAP\
    \ as a Network\n              Information Service\", RFC 2307, DOI 10.17487/RFC2307,\n\
    \              March 1998, <http://www.rfc-editor.org/info/rfc2307>.\n   [RFC2624]\
    \  Shepler, S., \"NFS Version 4 Design Considerations\",\n              RFC 2624,\
    \ DOI 10.17487/RFC2624, June 1999,\n              <http://www.rfc-editor.org/info/rfc2624>.\n\
    \   [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n      \
    \        Kerberos Network Authentication Service (V5)\", RFC 4120,\n         \
    \     DOI 10.17487/RFC4120, July 2005,\n              <http://www.rfc-editor.org/info/rfc4120>.\n\
    \   [RFC5531]  Thurlow, R., \"RPC: Remote Procedure Call Protocol\n          \
    \    Specification Version 2\", RFC 5531, DOI 10.17487/RFC5531,\n            \
    \  May 2009, <http://www.rfc-editor.org/info/rfc5531>.\n   [RFC5716]  Lentini,\
    \ J., Everhart, C., Ellard, D., Tewari, R., and M.\n              Naik, \"Requirements\
    \ for Federated File Systems\", RFC 5716,\n              DOI 10.17487/RFC5716,\
    \ January 2010,\n              <http://www.rfc-editor.org/info/rfc5716>.\n   [RFC7532]\
    \  Lentini, J., Tewari, R., and C. Lever, Ed., \"Namespace\n              Database\
    \ (NSDB) Protocol for Federated File Systems\",\n              RFC 7532, DOI 10.17487/RFC7532,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7532>.\n   [RFC7533]\
    \  Lentini, J., Tewari, R., and C. Lever, Ed.,\n              \"Administration\
    \ Protocol for Federated File Systems\",\n              RFC 7533, DOI 10.17487/RFC7533,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7533>.\n   [SEC-ADD]\
    \  Lever, C., \"Federated Filesystem Security Addendum\", Work\n             \
    \ in Progress, draft-cel-nfsv4-federated-fs-security-\n              addendum-06,\
    \ October 2016.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Andy Adamson would like to thank NetApp, Inc., for its funding\
    \ of his\n   time on this project.\n   We thank Chuck Lever, Tom Haynes, Brian\
    \ Reitz, Bruce Fields, and\n   David Noveck for their review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   William A. (Andy) Adamson\n   NetApp\n   Email: andros@netapp.com\n\
    \   Nicolas Williams\n   Cryptonector\n   Email: nico@cryptonector.com\n"
