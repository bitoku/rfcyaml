- title: __initial_text__
  contents:
  - '                  The text/enriched MIME Content-type

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   MIME [RFC-1341, RFC-1521] defines a format and general framework\
    \ for\n   the representation of a wide variety of data types in Internet mail.\n\
    \   This document defines one particular type of MIME data, the\n   text/enriched\
    \ type, a refinement of the \"text/richtext\" type defined\n   in RFC 1341.  The\
    \ text/enriched MIME type is intended to facilitate\n   the wider interoperation\
    \ of simple enriched text across a wide\n   variety of hardware and software platforms.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   The Text/enriched MIME type..............................\
    \  2\n   Formatting Commands......................................  4\n      \
    \   Font-Alteration Commands...........................  4\n         Fill/Justification\
    \ Commands........................  5\n         Indentation Commands...............................\
    \  6\n         Miscellaneous Commands.............................  6\n      \
    \   Balancing and Nesting of Formatting Commands.......  7\n         Unrecognized\
    \ formatting commands...................  8\n   White Space in Text/enriched Data........................\
    \  8\n   Initial State of a text/enriched interpreter.............  8\n   Non-ASCII\
    \ character sets.................................  8\n   Minimal text/enriched\
    \ conformance........................  9\n   Notes for Implementors...................................\
    \  9\n   Extensions to text/enriched.............................. 10\n   An Example...............................................\
    \ 11\n   Security Considerations.................................. 12\n   Author's\
    \ Address......................................... 12\n   Acknowledgements.........................................\
    \ 12\n   References............................................... 12\n   Appendix\
    \ A -- A Simple enriched-to-plain Translator in C. 13\n   Appendix B -- Differences\
    \ from RFC 1341 text/richtext.... 15\n"
- title: The Text/enriched MIME type
  contents:
  - "The Text/enriched MIME type\n   In order to promote the wider interoperability\
    \ of simple formatted\n   text, this document defines an extremely simple subtype\
    \ of the MIME\n   content-type \"text\", the \"text/enriched\" subtype.  This\
    \ subtype was\n   designed to meet the following criteria:\n      1.  The syntax\
    \ must be extremely simple to parse,\n          so that even teletype-oriented\
    \ mail systems can\n          easily strip away the formatting information and\n\
    \          leave only the readable text.\n      2.  The syntax must be extensible\
    \ to allow for new\n          formatting commands that are deemed essential for\n\
    \          some application.\n      3.  If the character set in use is ASCII or\
    \ an 8-\n          bit ASCII superset, then the raw form of the data\n       \
    \   must be readable enough to be largely\n          unobjectionable in the event\
    \ that it is displayed\n          on the screen of the user of a non-MIME-conformant\n\
    \          mail reader.\n      4.  The capabilities must be extremely limited,\
    \ to\n          ensure that it can represent no more than is\n          likely\
    \ to be representable by the user's primary\n          word processor.  While\
    \ this limits what can be\n          sent, it increases the likelihood that what\
    \ is\n          sent can be properly displayed.\n   This document defines a new\
    \ MIME content-type, \"text/enriched\".  The\n   content-type line for this type\
    \ may have one optional parameter, the\n   \"charset\" parameter, with the same\
    \ values permitted for the\n   \"text/plain\" MIME content-type.\n   The syntax\
    \ of \"text/enriched\" is very simple.  It represents text in\n   a single character\
    \ set -- US-ASCII by default, although a different\n   character set can be specified\
    \ by the use of the \"charset\" parameter.\n   (The semantics of text/enriched\
    \ in non-ASCII character sets are\n   discussed later in this document.)  All\
    \ characters represent\n   themselves, with the exception of the \"<\" character\
    \ (ASCII 60), which\n   is used to mark the beginning of a formatting command.\
    \  Formatting\n   instructions consist of formatting commands surrounded by angle\n\
    \   brackets (\"<>\", ASCII 60 and 62).  Each formatting command may be no\n \
    \  more than 60 characters in length, all in US-ASCII, restricted to the\n   alphanumeric\
    \ and hyphen (\"-\") characters.  Formatting commands may be\n   preceded by a\
    \ solidus (\"/\", ASCII 47), making them negations, and\n   such negations must\
    \ always exist to balance the initial opening\n   commands.  Thus, if the formatting\
    \ command \"<bold>\" appears at some\n   point, there must later be a \"</bold>\"\
    \ to balance it.  (NOTE: The 60\n   character limit on formatting commands does\
    \ NOT include the \"<\", \">\",\n   or \"/\" characters that might be attached\
    \ to such commands.)\n   Formatting commands are always case-insensitive.  That\
    \ is, \"bold\" and\n   \"BoLd\" are equivalent in effect, if not in good taste.\n\
    \   Beyond tokens delimited by \"<\" and \">\", there are two other special\n\
    \   processing rules.  First, a literal less-than sign (\"<\") can be\n   represented\
    \ by a sequence of two such characters, \"<<\".  Second, line\n   breaks (CRLF\
    \ pairs in standard network representation) are handled\n   specially.  In particular,\
    \ isolated CRLF pairs are translated into a\n   single SPACE character.  Sequences\
    \ of N consecutive CRLF pairs,\n   however, are translated into N-1 actual line\
    \ breaks.  This permits\n   long lines of data to be represented in a natural-\
    \ looking manner\n   despite the frequency of line-wrapping in Internet mailers.\
    \  When\n   preparing the data for mail transport, isolated line breaks should\
    \ be\n   inserted wherever necessary to keep each line shorter than 80\n   characters.\
    \  When preparing such data for presentation to the user,\n   isolated line breaks\
    \ should be replaced by a single SPACE character,\n   and N consecutive CRLF pairs\
    \ should be presented to the user as N-1\n   line breaks.\n   Thus text/enriched\
    \ data that looks like this:\n                 This is\n                 a single\n\
    \                 line\n                 This is the\n                 next line.\n\
    \                 This is the\n                 next paragraph.\n   should be\
    \ displayed by a text/enriched interpreter as follows:\n                 This\
    \ is a single line\n                 This is the next line.\n                \
    \ This is the next paragraph.\n   The formatting commands, not all of which will\
    \ be implemented by all\n   implementations, are described in the following sections.\n"
- title: Formatting Commands
  contents:
  - "Formatting Commands\n   The text/enriched formatting commands all begin with\
    \ <commandname>\n   and end with </commandname>, affecting the formatting of the\
    \ text\n   between those two tokens.  The commands are described here, grouped\n\
    \   according to type.\n"
- title: Font-Alteration Commands
  contents:
  - "Font-Alteration Commands\n   The following formatting commands are intended to\
    \ alter the font in\n   which text is displayed, but not to alter the indentation\
    \ or\n   justification state of the text:\n         Bold -- causes the affected\
    \ text to be in a bold font.  Nested\n              bold commands have the same\
    \ effect as a single bold\n              command.\n         Italic -- causes the\
    \ affected text to be in an italic font.\n              Nested italic commands\
    \ have the same effect as a single\n              italic command.\n         Fixed\
    \ -- causes the affected text to be in a fixed width font.\n              Nested\
    \ fixed commands have the same effect as a single\n              fixed command.\n\
    \         Smaller -- causes the affected text to be in a smaller font.\n     \
    \         It is recommended that the font size be changed by two\n           \
    \   points, but other amounts may be more appropriate in some\n              environments.\
    \  Nested smaller commands produce ever-\n              smaller fonts, to the\
    \ limits of the implementation's\n              capacity to reasonably display\
    \ them, after which further\n              smaller commands have no incremental\
    \ effect.\n         Bigger -- causes the affected text to be in a bigger font.\
    \  It\n              is recommended that the font size be changed by two\n   \
    \           points, but other amounts may be more appropriate in some\n      \
    \        environments.  Nested bigger commands produce ever-bigger\n         \
    \     fonts, to the limits of the implementation's capacity to\n             \
    \ reasonably display them, after which further bigger\n              commands\
    \ have no incremental effect.\n         Underline -- causes the affected text\
    \ to be underlined.  Nested\n              underline commands have the same effect\
    \ as a single\n              underline command.\n   While the \"bigger\" and \"\
    smaller\" operators are effectively inverses,\n   it is not recommended, for example,\
    \ that \"<smaller>\" be used to end\n   the effect of \"<bigger>\".  This is properly\
    \ done with \"</bigger>\".\n"
- title: Fill/Justification Commands
  contents:
  - "Fill/Justification Commands\n   Initially, text/enriched text is intended to\
    \ be displayed fully\n   filled with appropriate kerning and letter-tracking as\
    \ suits the\n   capabilities of the receiving user agent software.  Actual line\
    \ width\n   is left to the discretion of the receiver, which is expected to fold\n\
    \   lines intelligently (preferring soft line breaks) to the best of its\n   ability.\n\
    \   The following commands alter that state.  Each of these commands\n   force\
    \ a line break before and after the formatting environment if\n   there is not\
    \ otherwise a line break.  For example, if one of these\n   commands occurs anywhere\
    \ other than the beginning of a line of text\n   as presented, a new line is begun.\n\
    \      Center -- causes the affected text to be centered.\n      FlushLeft --\
    \ causes the affected text to be left-justified with a\n           ragged right\
    \ margin.\n      FlushRight -- causes the affected text to be right-justified\
    \ with a\n           ragged left margin.\n      FlushBoth -- causes the affected\
    \ text to be filled and padded so\n           as to create smooth left and right\
    \ margins, i.e., to be\n           fully justified.\n      Nofill -- causes the\
    \ affected text to be displayed without filling\n           or justification.\n\
    \   The center, flushleft, flushright, and flushboth commands are\n   mutually\
    \ exclusive, and, when nested, the inner command takes\n   precedence.\n   Whether\
    \ or not text is justified by default (that is, whether the\n   default environment\
    \ is flushleft, flushright, or flushboth) is\n   unspecified, and depends on the\
    \ preferences of the user, the\n   capabilities of the local software and hardware,\
    \ and the nature of\n   the character set in use.  On systems where justification\
    \ is\n   considered undesirable, the flushboth environment may be identical to\n\
    \   the default environment.  Note that justification should never be\n   performed\
    \ inside of center, flushleft, flushright, or nofill\n   environments.  Note also\
    \ that for some non-ASCII character sets, full\n   justification may be fundamentally\
    \ inappropriate.\n"
- title: Indentation Commands
  contents:
  - "Indentation Commands\n   Initially, text/enriched text is displayed using the\
    \ maximum\n   available margins.  Two formatting commands may be used to affect\
    \ the\n   margins.\n         Indent -- causes the running left margin to be moved\
    \ to the\n              right.  The recommended indentation change is the width\
    \ of\n              four characters, but this may differ among\n             \
    \ implementations.\n         IndentRight -- causes the running right margin to\
    \ be moved to\n              the left.  The recommended indentation change is\
    \ the width\n              of four characters, but this may differ among\n   \
    \           implementations.\n   A line break is NOT forced by a change of the\
    \ margin, to permit the\n   description of \"hanging\" text.  Thus for example\
    \ the following text:\n   Now <indent> is the time for all good horses to come\
    \ to the aid of\n   their stable, assuming that </indent> any stable is really\
    \ stable.\n   would be displayed in a 40-character-wide window as follows:\n \
    \              Now is the time for all good horses to\n                   come\
    \ to the aid of their stable,\n                   assuming that any stable is\n\
    \               really stable.\n"
- title: Miscellaneous Commands
  contents:
  - "Miscellaneous Commands\n         Excerpt -- causes the affected text to be interpreted\
    \ as a\n              textual excerpt from another source, probably a message\n\
    \              being responded to.  Typically this will be displayed\n       \
    \       using indentation and an alternate font, or by indenting\n           \
    \   lines and preceding them with \"> \", but such decisions are\n           \
    \   up to the implementation.  (Note that this is the only\n              truly\
    \ declarative markup construct in text/enriched, and\n              as such doesn't\
    \ fit very well with the other facilities,\n              but it describes a type\
    \ of markup that is very commonly\n              used in email and has no procedural\
    \ analogue.)  Note that\n              as with the justification commands, the\
    \ excerpt command\n              implicitly begins and ends with a line break\
    \ if one is not\n              already there.\n         Param -- Marks the affected\
    \ text as command parameters, to be\n              interpreted or ignored by the\
    \ text/enriched interpreter,\n              but NOT to be shown to the reader.\
    \  The syntax of the\n              parameter data (whatever appears between the\
    \ initial\n              \"<param>\" and the terminating \"</param>\") is left\n\
    \              undefined by this memo, to be defined by text/enriched\n      \
    \        extensions in the future.  However, the format of such\n            \
    \  data must NOT contain nested <param> commands, and either\n              must\
    \ NOT use the \"<\" character or must use it in a way\n              that is compatible\
    \ with text/enriched parsing.  That is,\n              the end of the parameter\
    \ data should be recognizable with\n              EITHER of two algorithms: simply\
    \ searching for the first\n              occurence of \"</param>\" or parsing\
    \ until a balanced\n              \"</param>\" command is found.  In either case,\
    \ however, the\n              parameter data should NOT be shown to the human\
    \ reader.\n"
- title: Balancing and Nesting of Formatting Commands
  contents:
  - "Balancing and Nesting of Formatting Commands\n   Pairs of formatting commands\
    \ must be properly balanced and nested.\n   Thus, a proper way to describe text\
    \ in bold italics is:\n                      <bold><italic>the-text</italic></bold>\n\
    \                 or, alternately,\n                      <italic><bold>the-text</bold></italic>\n\
    \                 but, in particular, the following is illegal\n             \
    \    text/enriched:\n                      <bold><italic>the-text</bold></italic>\n\
    \   The nesting requirement for formatting commands imposes a slightly\n   higher\
    \ burden upon the composers of text/enriched bodies, but\n   potentially simplifies\
    \ text/enriched displayers by allowing them to\n   be stack-based.  The main goal\
    \ of text/enriched is to be simple\n   enough to make multifont, formatted email\
    \ widely readable, so that\n   those with the capability of sending it will be\
    \ able to do so with\n   confidence.  Thus slightly increased complexity in the\
    \ composing\n   software was deemed a reasonable tradeoff for simplified reading\n\
    \   software.  Nonetheless, implementors of text/enriched readers are\n   encouraged\
    \ to follow the general Internet guidelines of being\n   conservative in what\
    \ you send and liberal in what you accept.  Those\n   implementations that can\
    \ do so are encouraged to deal reasonably with\n   improperly nested text/enriched\
    \ data.\n"
- title: Unrecognized formatting commands
  contents:
  - "Unrecognized formatting commands\n   Implementations must regard any unrecognized\
    \ formatting command as\n   \"no-op\" commands, that is, as commands having no\
    \ effect, thus\n   facilitating future extensions to \"text/enriched\".  Private\n\
    \   extensions may be defined using formatting commands that begin with\n   \"\
    X-\", by analogy to Internet mail header field names.\n   In order to formally\
    \ define extended commands, a new Internet\n   document should be published.\n"
- title: White Space in Text/enriched Data
  contents:
  - "White Space in Text/enriched Data\n   No special behavior is required for the\
    \ SPACE or TAB (HT) character.\n   It is recommended, however, that, at least\
    \ when fixed-width fonts are\n   in use, the common semantics of the TAB (HT)\
    \ character should be\n   observed, namely that it moves to the next column position\
    \ that is a\n   multiple of 8.  (In other words, if a TAB (HT) occurs in column\
    \ n,\n   where the leftmost column is column 0, then that TAB (HT) should be\n\
    \   replaced by 8-(n mod 8) SPACE characters.)  It should also be noted\n   that\
    \ some mail gateways are notorious for losing (or, less commonly,\n   adding)\
    \ white space at the end of lines, so reliance on SPACE or TAB\n   characters\
    \ at the end of a line is not recommended.\n"
- title: Initial State of a text/enriched interpreter
  contents:
  - "Initial State of a text/enriched interpreter\n   Text/enriched is assumed to\
    \ begin with filled text in a variable-\n   width font in a normal typeface and\
    \ a size that is average for the\n   current display and user.  The left and right\
    \ margins are assumed to\n   be maximal, that is, at the leftmost and rightmost\
    \ acceptable\n   positions.\n"
- title: Non-ASCII character sets
  contents:
  - "Non-ASCII character sets\n   If the character set specified by the charset parameter\
    \ on the\n   Content-type line is anything other than \"US-ASCII\", this means\
    \ that\n   the text being described by text/enriched formatting commands is in\
    \ a\n   non-ASCII character set.  However, the commands themselves are still\n\
    \   the same ASCII commands that are defined in this document.  This\n   creates\
    \ an ambiguity only with reference to the \"<\" character, the\n   octet with\
    \ numeric value 60.  In single byte character sets, such as\n   the ISO-8859 family,\
    \ this is not a problem; the octet 60 can be\n   quoted by including it twice,\
    \ just as for ASCII.  The problem is more\n   complicated, however, in the case\
    \ of multi-byte character sets, where\n   the octet 60 might appear at any point\
    \ in the byte sequence for any\n   of several characters.\n   In practice, however,\
    \ most multibyte character sets address this\n   problem internally.  For example,\
    \ the ISO-2022 family of character\n   sets can switch back into ASCII at any\
    \ moment.  Therefore it is\n   specified that, before text/enriched formatting\
    \ commands, the\n   prevailing character set should be \"switched back\" into\
    \ ASCII, and\n   that only those characters which would be interpreted as \"<\"\
    \ in plain\n   text should be interpreted as token delimiters in text/enriched.\n\
    \   The question of what to do for hypothetical future character sets\n   that\
    \ do NOT subsume ASCII is not addressed in this memo.\n"
- title: Minimal text/enriched conformance
  contents:
  - "Minimal text/enriched conformance\n   A minimal text/enriched implementation\
    \ is one that converts \"<<\" to\n   \"<\", removes everything between a <param>\
    \ command and the next\n   balancing </param> command, removes all other formatting\
    \ commands\n   (all text enclosed in angle brackets), and, outside of <nofill>\n\
    \   environments, converts any series of n CRLFs to n-1 CRLFs, and\n   converts\
    \ any lone CRLF pairs to SPACE.\n"
- title: Notes for Implementors
  contents:
  - "Notes for Implementors\n   It is recognized that implementors of future mail\
    \ systems will want\n   rich text functionality far beyond that currently defined\
    \ for\n   text/enriched.  The intent of text/enriched is to provide a common\n\
    \   format for expressing that functionality in a form in which much of\n   it,\
    \ at least, will be understood by interoperating software.  Thus,\n   in particular,\
    \ software with a richer notion of formatted text than\n   text/enriched can still\
    \ use text/enriched as its basic\n   representation, but can extend it with new\
    \ formatting commands and by\n   hiding information specific to that software\
    \ system in text/enriched\n   <param> constructs.  As such systems evolve, it\
    \ is expected that the\n   definition of text/enriched will be further refined\
    \ by future\n   published specifications, but text/enriched as defined here provides\n\
    \   a platform on which evolutionary refinements can be based.\n   An expected\
    \ common way that sophisticated mail programs will generate\n   text/enriched\
    \ data is as part of a multipart/alternative construct.\n   For example, a mail\
    \ agent that can generate enriched mail in ODA\n   format can generate that mail\
    \ in a more widely interoperable form by\n   generating both text/enriched and\
    \ ODA versions of the same data,\n   e.g.:\n                 Content-type: multipart/alternative;\
    \ boundary=foo\n                 --foo\n                 Content-type: text/enriched\n\
    \                 [text/enriched version of data]\n                 --foo\n  \
    \               Content-type: application/oda\n                 [ODA version of\
    \ data]\n                 --foo--\n   If such a message is read using a MIME-conformant\
    \ mail reader that\n   understands ODA, the ODA version will be displayed; otherwise,\
    \ the\n   text/enriched version will be shown.\n   In some environments, it might\
    \ be impossible to combine certain\n   text/enriched formatting commands, whereas\
    \ in others they might be\n   combined easily.  For example, the combination of\
    \ <bold> and <italic>\n   might produce bold italics on systems that support such\
    \ fonts, but\n   there exist systems that can make text bold or italicized, but\
    \ not\n   both.  In such cases, the most recently issued (innermost) recognized\n\
    \   formatting command should be preferred.\n   One of the major goals in the\
    \ design of text/enriched was to make it\n   so simple that even text-only mailers\
    \ will implement enriched-to-\n   plain-text translators, thus increasing the\
    \ likelihood that enriched\n   text will become \"safe\" to use very widely. \
    \ To demonstrate this\n   simplicity, an extremely simple C program that converts\
    \ text/enriched\n   input into plain text output is included in Appendix A.\n"
- title: Extensions to text/enriched
  contents:
  - "Extensions to text/enriched\n   It is expected that various mail system authors\
    \ will desire\n   extensions to text/enriched.  The simple syntax of text/enriched,\
    \ and\n   the specification that unrecognized formatting commands should simply\n\
    \   be ignored, are intend to promote such extensions.\n   Beyond simply defining\
    \ new formatting commands, however, it may\n   sometimes be necessary to define\
    \ formatting commands that can take\n   arguments.  This is the intended use of\
    \ the <param> construct.  In\n   particular, software that wished to extend text/enriched\
    \ to include\n   colored text might define an \"x-color\" environment which always\
    \ began\n   with a color name parameter, to indicate the desired color for the\n\
    \   affected text.\n"
- title: An Example
  contents:
  - "An Example\n   Putting all this together, the following \"text/enriched\" body\n\
    \   fragment:\n                      From: Nathaniel Borenstein <nsb@bellcore.com>\n\
    \                      To: Ned Freed <ned@innosoft.com>\n                    \
    \  Content-type: text/enriched\n                      <bold>Now</bold> is the\
    \ time for\n                      <italic>all</italic> good men\n            \
    \           <smaller>(and <<women>)</smaller> to\n                      <ignoreme>come</ignoreme>\n\
    \                      to the aid of their\n                      <x-color><param>red</param>beloved</x-color>\n\
    \                      country.\n                      By the way, I think that\
    \ <<smaller>\n                      should\n                      REALLY be called\n\
    \                      <<tinier>\n                      and that I am always right.\n\
    \                      -- the end\n   represents the following formatted text\
    \ (which will, no doubt, look\n   somewhat cryptic in the text-only version of\
    \ this document):\n                 Now is the time for all good men (and <women>)\
    \  to\n                 come\n                 to the aid of their\n         \
    \        beloved country.\n                 By the way, I think that <smaller>\n\
    \                 should\n                 REALLY be called\n                \
    \ <tinier>\n                 and that I am always right.\n                 --\
    \ the end\n   where the word \"beloved\" would be in red on a color display if\
    \ the\n   receiving software implemented the \"x-color\" extension.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo, as\
    \ the mechanism\n   raises no security issues.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   For more information, the author of this document may be\
    \ contacted\n   via Internet mail:\n   Nathaniel S. Borenstein\n   MRE 2D-296,\
    \ Bellcore\n   445 South St.\n   Morristown, NJ 07962-1910\n   Phone: +1 201 829\
    \ 4270\n   Fax:  +1 201 829 5963\n   EMail: nsb@bellcore.com\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document reflects the input of many contributors, readers,\
    \ and\n   implementors of the original MIME specification, RFC 1341.  It also\n\
    \   reflects particular contributions and comments from Terry Crowley,\n   Rhys\
    \ Weatherley, and John LoVerso.\n"
- title: References
  contents:
  - "References\n   [RFC-1341] Borenstein, N., and N.  Freed, \"MIME (Multipurpose\n\
    \              Internet Mail Extensions): Mechanisms for Specifying\n        \
    \      and Describing the Format of Internet Message Bodies\",\n             \
    \ RFC 1341, Bellcore, Innosoft, June 1992.\n   [RFC-1521] Borenstein, N., and\
    \ N.  Freed, \"MIME (Multipurpose\n              Internet Mail Extensions) Part\
    \ One: Mechanisms for\n              Specifying and Describing the Format of Internet\n\
    \              Message Bodies\", RFC 1521, Bellcore, Innosoft,\n             \
    \ September 1993.\n"
- title: Appendix A -- A Simple enriched-to-plain Translator in C
  contents:
  - "Appendix A -- A Simple enriched-to-plain Translator in C\n   One of the major\
    \ goals in the design of the text/enriched subtype of\n   the text Content-Type\
    \ is to make formatted text so simple that even\n   text-only mailers will implement\
    \ enriched-to-plain-text translators,\n   thus increasing the likelihood that\
    \ multifont text will become \"safe\"\n   to use very widely.  To demonstrate\
    \ this simplicity, what follows is\n   a simple C program that converts text/enriched\
    \ input into plain text\n   output.  Note that the local newline convention (the\
    \ single character\n   represented by \"\\n\") is assumed by this program, but\
    \ that special\n   CRLF handling might be necessary on some systems.\n"
- title: '#include <stdio.h>'
  contents:
  - '#include <stdio.h>

    '
- title: '#include <ctype.h>'
  contents:
  - '#include <ctype.h>

    '
- title: main() {
  contents:
  - "main() {\n    int c, i, paramct=0, newlinect=0, nofill=0;\n    char token[62],\
    \ *p;\n    while ((c=getc(stdin)) != EOF) {\n        if (c == '<') {\n       \
    \     if (newlinect == 1) putc(' ', stdout);\n            newlinect = 0;\n   \
    \         c = getc(stdin);\n            if (c == '<') {\n                if (paramct\
    \ <= 0) putc(c, stdout);\n            } else {\n                  ungetc(c, stdin);\n\
    \                  for (i=0, p=token; (c=getc(stdin)) != EOF && c != '>';\n  \
    \                i++)\n                  { if (i < sizeof(token)-1)\n        \
    \            *p++ = isupper(c) ? tolower(c) : c;\n                  }\n      \
    \            *p = '\\0';\n                  if (c == EOF) break;\n           \
    \       if (strcmp(token, \"param\") == 0)\n                      paramct++;\n\
    \                  else if (strcmp(token, \"nofill\") == 0)\n                \
    \      nofill++;\n                  else if (strcmp(token, \"/param\") == 0)\n\
    \                      paramct--;\n                  else if (strcmp(token, \"\
    /nofill\") == 0)\n                      nofill--;\n              }\n        }\
    \ else {\n            if (paramct > 0)\n                ; /* ignore params */\n\
    \            else if (c == '\\n' && nofill <= 0) {\n                if (++newlinect\
    \ > 1) putc(c, stdout);\n            } else {\n                if (newlinect ==\
    \ 1) putc(' ', stdout);\n                newlinect = 0;\n                putc(c,\
    \ stdout);\n            }\n        }\n     }\n     /* The following line is only\
    \ needed with line-buffering */\n     putc('\\n', stdout);\n     exit(0);\n"
- title: '}'
  contents:
  - "}\n   It should be noted that one can do considerably better than this in\n \
    \  displaying text/enriched data on a dumb terminal.  In particular, one\n   can\
    \ replace font information such as \"bold\" with textual emphasis\n   (like *this*\
    \ or _T_H_I_S_).  One can also properly handle the\n   text/enriched formatting\
    \ commands regarding indentation,\n   justification, and others.  However, the\
    \ above program is all that is\n   necessary in order to present text/enriched\
    \ on a dumb terminal\n   without showing the user any formatting artifacts.\n"
- title: Appendix B -- Differences from RFC 1341 text/richtext
  contents:
  - "Appendix B -- Differences from RFC 1341 text/richtext\n   Text/enriched is a\
    \ clarification, simplification, and refinement of\n   the type defined as text/richtext\
    \ in RFC 1341.  For the benefit of\n   those who are already familiar with text/richtext,\
    \ or for those who\n   want to exploit the similarities to be able to display\
    \ text/richtext\n   data with their text/enriched software, the differences between\
    \ the\n   two are summarized here. Note, however, that text/enriched is\n   intended\
    \ to make text/richtext obsolete, so it is not recommended\n   that new software\
    \ generate text/richtext.\n   0.  The name \"richtext\" was changed to \"enriched\"\
    , both to\n       differentiate the two versions and because \"richtext\"\n  \
    \     created widespread confusion with Microsoft's Rich Text\n       Format (RTF).\n\
    \   1.  Clarifications.  Many things were ambiguous or\n       unspecified in\
    \ the text/richtext definition, particularly\n       the initial state and the\
    \ semantics of richtext with\n       multibyte character sets.  However, such\
    \ differences are\n       OPERATIONALLY irrelevant, since the clarifications offered\n\
    \       in this document are at least reasonable interpretations of\n       the\
    \ text/richtext specification.\n   2.  Newline semantics have changed.  In text/richtext,\
    \ all\n       CRLFs were mapped to spaces, and line breaks were indicated\n  \
    \     by \"<nl>\".  This has been replaced by the \"n-1\" rule for\n       CRLFs.\n\
    \   3.  The representation of a literal \"<\" character was \"<lt>\"\n       in\
    \ text/richtext, but is \"<<\" in text/enriched.\n   4.  The \"nofill\" command\
    \ did not exist in text/richtext.\n   5.  The \"param\" command did not exist\
    \ in text/richtext.\n   6.  The following commands from text/richtext have been\n\
    \       REMOVED from text/enriched: <COMMENT>, <OUTDENT>,\n       <OUTDENTRIGHT>,\
    \ <SAMEPAGE>, <SUBSCRIPT>, <SUPERSCRIPT>,\n       <HEADING>, <FOOTING>, <ISO-8859-[1-9]>,\
    \ <US-ASCII>,\n       <PARAGRAPH>, <SIGNATURE>, <NO-OP>, <LT>, <NL>, and <NP>.\n\
    \   7.  All claims of SGML compatibility have been dropped.\n       However, with\
    \ the possible exceptions of the new semantics\n       for CRLF and \"<<\" can\
    \ be implemented, text/enriched should\n       be no less SGML-friendly than text/richtext\
    \ was.\n   8.  In text/richtext, there were three commands (<NL>, <NP>,\n    \
    \   and <LT>) that did not use balanced closing delimiters.\n       Since all\
    \ of these have been eliminated, there are NO\n       exceptions to the nesting/balancing\
    \ rules in text/enriched.\n   9.  The limit on the size of formatting tokens has\
    \ been\n       increased from 40 to 60 characters.\n"
