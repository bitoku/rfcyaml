- title: __initial_text__
  contents:
  - "              Time-out Mechanism in the Host-Host Protocol\nOn sending a message\
    \ to a foreign site, the following situations can\noccur:\n1. Destination IMP\
    \ down - Type 7 message is returned\n2. Destination IMP up but destination IMP-HOST\
    \ interface is\n   down - Type 7 message is returned.\n3. Destination IMP and\
    \ IMP-HOST interface up, but IMP-HOST inter-\n   face is not taking messages -\
    \ Type 9 message is returned after\n   IMP time-out (ask BBN for time).\n4. Destination\
    \ IMP and IMP-HOST interface up and IMP-HOST inter-\n   face is taking messages\
    \ - Type 5 (rfnm) message is returned.\nA suggestion for handling type 7 and type\
    \ 9 messages has been made in\nproblem: what should happen to the HOST-HOST protocol\
    \ on receiving a\nrfnm?\nWhen a NCP sends out a STR or RTS control command on\
    \ a pair of sockets\nand gets a rfnm back, this pair of sockets will be in a wait-match\n\
    state.  Everything is fine if a matching RTS or STR, or CLS is\nreturned after\
    \ a reasonable amount of delay.  Trouble will arise when\nnothing is returned\
    \ after a long time.\nThis can happen if the NCP is not running at all but its\
    \ host is\ntaking in messages (e.g. UCLA's host will receive messages even if\
    \ the\nNCP is not running), or if the NCP is running very slowly.  The same\n\
    problem exists on sending out a CLS control command and a matching CLS\nis never\
    \ returned.  The trouble is that resources are tied up, e.g.\nsockets, links and\
    \ table space in the NCP; and one would like to\nrelease these resources.  In\
    \ our implementation, when a user does a\nCLOSE, we can't release the sockets\
    \ until the matching CLS is\nreturned.  This protects us from getting confused\
    \ if a seconds request\nis made for the same pair of sockets.  This problem can\
    \ be solved by\nincluding a time-out mechanism in the Host-Host protocol.  This\n\
    operates as follows:\n    ing RTS or STR, or a CLS in T time units a CLS will\
    \ be sent.\n    After sending the time-out CLS race condition can be avoided\n\
    \    by ignoring the matching RTS or STR that arrives before the\n    matching\
    \ CLS.\nb.  On sending out a CLS (any kind, including the time-out CLS),\n   \
    \ and if you do not get back a matching CLS in T time units, the\n    matching\
    \ CLS is assumed to have returned.  However, if a RTS or\n    STR is sent on the\
    \ same pair of sockets anytime after the time\n    out and before a CLS is returned,\
    \ and then we receive the CLS,\n    there is no way to determine whether this\
    \ returning CLS is for\n    matching the previous CLS or for refusing the RTS\
    \ or STR.  (See\n    the figure for detail).  So far we could not solve this race\n\
    \    condition except by assigning sequence number to connection\n    throughout\
    \ the Network which we don't think is a good solution\n    at all.  Hence, we\
    \ would like to bring the attention of the\n    Host-Host Protocol Glitch Cleaning\
    \ Committe to this problem.\n    The time limit T should be a Network Standard\
    \ and its value should\n    be decided also.\n       Reason                  \
    \              Our NCP\n       ------                                -------\n\
    \    1. User requests connection              1. RTS ->\n    2. User gets tired\
    \ requests CLS\n       (or NCP timeout)                      2. CLS ->\n    3.\
    \ No matching CLS returned in\n       T time units                          3.\
    \ CLS assumed returned\n                                                free socket\
    \ and other\n                                                resources\n    4.\
    \ User requests another connection\n       over same socket pair             \
    \    4. RTS ->\n    5. CLS received                          ?? does it belong\
    \ to\n                                             2 or 4?\n                 \
    \                  Figure\n         [ This RFC was put into machine readable form\
    \ for entry ]\n            [ into the online RFC archives by Gert Doering 4/97]\n"
