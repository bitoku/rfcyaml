- title: __initial_text__
  contents:
  - '                    Security Negotiation for WebNFS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol for a WebNFS client [RFC2054]\
    \ to\n   negotiate the desired security mechanism with a WebNFS server\n   [RFC2055]\
    \ before the WebNFS client falls back to the MOUNT v3\n   protocol [RFC1813].\
    \  This document is provided so that people can\n   write compatible implementations.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The MOUNT protocol is used by an NFS client to obtain the\
    \ necessary\n   filehandle for data access.  MOUNT versions 1 and 2 [RFC1094]\
    \ return\n   NFS version 2 filehandles, whereas MOUNT version 3 [RFC1813] returns\n\
    \   NFS version 3 filehandles.\n   Among the existing versions of the MOUNT protocol,\
    \ only the MOUNT v3\n   provides an RPC procedure (MOUNTPROC3_MNT) which facilitates\
    \ security\n   negotiation between an NFS v3 client and an NSF v3 server.  When\
    \ this\n   RPC procedure succeeds (MNT3_OK) the server returns to the client an\n\
    \   array of security mechanisms it supports for the specified pathname,\n   in\
    \ addition to an NFS v3 filehandle.\n   A security mechanism referred to in this\
    \ document is a generalized\n   security flavor which can be an RPC authentication\
    \ flavor [RFC1831]\n   or a security flavor referred to in the RPCSEC_GSS protocol\n\
    \   [RFC2203]. A security mechanism is represented as a four-octet\n   integer.\n\
    \   No RPC procedures are available for security negotiation in versions\n   1\
    \ or 2 of the MOUNT protocol.\n   The NFS mount command provides a \"sec=\" option\
    \ for an NFS client to\n   specify the desired security mechanism to use for NFS\
    \ transactions.\n   If this mount option is not specified, the default action\
    \ is to use\n   the default security mechanism over NFS v2 mounts, or to negotiate\
    \ a\n   security mechanism via the MOUNTPROC3_MNT procedure of MOUNT v3 and\n\
    \   use it over NFS v3 mounts.  In the latter, the client picks the first\n  \
    \ security mechanism in the array returned from the server that is also\n   supported\
    \ on the client.\n   As specified in RFC 2054, a WebNFS client first assumes that\
    \ the\n   server supports WebNFS and uses the publsc filehandle as the initial\n\
    \   filehandle for data access, eliminating the need for the MOUNT\n   protocol.\
    \  The WebNFS client falls back to MOUNT if the server does\n   not support WebNFS.\n\
    \   Since a WebNFS client does not use MOUNT initially, the\n   MOUNTPROC3_MNT\
    \ procedure of MOUNT v3 is not available for security\n   negotiation until the\
    \ WebNFS client falls back to MOUNT.  A viable\n   protocol needs to be devised\
    \ for the WebNFS client to negotiate\n   security mechanisms with the server in\
    \ the absence of the\n   MOUNTPROC3_MNT procedure.\n   The WebNFS security negotiation\
    \ protocol must meet the following\n   requirements:\n      - Must work seamlessly\
    \ with NFS v2 and v3, and the WebNFS\n         protocols\n      - Must be backward\
    \ compatible with servers that do not support\n         this negotiation\n   \
    \   - Minimum number of network turnarounds (latency)\n   This document describes\
    \ the WebNFS security negotiation protocol\n   developed by Sun Microsystems,\
    \ Inc.  Terminology and definitions from\n   RFCs 2054 and 2055 are used in this\
    \ document.  The reader is expected\n   to be familiar with them.\n"
- title: 2. Security Negotiation Multi-component LOOKUP
  contents:
  - "2. Security Negotiation Multi-component LOOKUP\n   The goal of the WebNFS security\
    \ negotiation is to allow a WebNFS\n   client to identify a security mechanism\
    \ which is used by the WebNFS\n   server to protect a specified path and is also\
    \ supported by the\n   client.  The WebNFS client initiates the negotiation by\
    \ sending the\n   WebNFS server the path. The WebNFS server responds with the\
    \ array of\n   security mechanisms it uses to secure the specified path.  From\
    \ the\n   array of security mechanisms the WebNFS client selects the first one\n\
    \   that it also supports.\n   Without introducing a new WebNFS request, the WebNFS\
    \ security\n   negotiation is achieved by modifying the request and response of\
    \ the\n   existing multi-component LOOKUP (MCL) operation [RFC2055].  Note that\n\
    \   the MCL operation is accomplished using the LOOKUP procedure\n   (NFSPROC3_LOOKUP\
    \ for NFS v3 and NFSPROC_LOOKUP for NFS v2).  This and\n   the next sections describe\
    \ how the MCL request and response are\n   modified to facilitate WebNFS security\
    \ negotiation.\n   For ease of reference, the modified MCL request is henceforth\n\
    \   referred to as SNEGO-MCL (security negotiation multi-component\n   LOOKUP)\
    \ request.\n   A multi-component LOOKUP request [RFC2055] is composed of a public\n\
    \   filehandle and a multi-component path:\n        For Canonical Path:\n    \
    \            LOOKUP FH=0x0, \"/a/b/c\"\n        For Native Path:\n           \
    \     LOOKUP FH=0x0, 0x80 \"a:b:c\"\n   A multi-component path is either an ASCII\
    \ string of slash separated\n   components or a 0x80 character followed by a native\
    \ path.  Note that\n   a multi-component LOOKUP implies the use of the public\
    \ filehandle in\n   the LOOKUP.\n   Similar to the MCL request, a SNEGO-MCL request\
    \ consists of a public\n   filehandle and a pathname.  However, the pathname is\
    \ uniquely\n   composed, as described below, to distinguish it from other pathnames.\n\
    \   The pathname used in a SNEGO-MCL is the regular WebNFS multi-\n   component\
    \ path prefixed with two octets.  The first prefixed octet is\n   the 0x81 non-ascii\
    \ character, similar to the 0x80 non-ascii character\n   for the native paths.\
    \  This octet represents client's indication to\n   negotiate security mechanisms.\
    \  It is followed by the security index\n   octet which stores the current value\
    \ of the index into the array of\n   security mechanisms to be returned from the\
    \ server.  The security\n   index always starts with one and gets incremented\
    \ as negotiation\n   continues.  It is then followed by the pathname, either an\
    \ ASCII\n   string of slash separated canonical components or 0x80 and a native\n\
    \   path.\n   A security negotiation multi-component LOOKUP request looks like\n\
    \   this:\n        For Canonical Path:\n                LOOKUP FH=0x0, 0x81 <sec-index>\
    \ \"/a/b/c\"\n        For Native Path:\n                LOOKUP FH=0x0, 0x81 <sec-index>\
    \ 0x80 \"a:b:c\"\n   In the next section we will see how the MCL response is modified\
    \ for\n   WebNFS security negotiation.\n"
- title: 3. Overloaded Filehandle
  contents:
  - "3. Overloaded Filehandle\n   As described in RFC2054, if a multi-component LOOKUP\
    \ request\n   succeeds, the server responds with a valid filehandle:\n       \
    \ LOOKUP FH=0x0, \"a/b/c\"\n                        ----------->\n           \
    \             <-----------\n                                       FH=0x3\n  \
    \ NFS filehandles are used to uniquely identify a particular file or\n   directory\
    \ on the server and are opaque to the client.  The client\n   neither examines\
    \ a filehandle nor has any knowledge of its contents.\n   Thus, filehandles make\
    \ an ideal repository for the server to return\n   the array of security mechanisms\
    \ to the client in response to a\n   SNEGO-MCL request.\n   To a successful SNEGO-MCL\
    \ request the server responds, in place of\n   the filehandle, with an array of\
    \ integers that represents the valid\n   security mechanisms the client must use\
    \ to access the given path. A\n   length field is introduced to store the size\
    \ (in octets) of the array\n   of integers.\n   As the filehandles are limited\
    \ in size (32 octets for NFS v2 and up\n   to 64 octets for NFS v3), it can happen\
    \ that there are more security\n   mechanisms than the filehandles can accommodate.\
    \  To circumvent this\n   problem, a one-octet status field is introduced which\
    \ indicates\n   whether there are more security mechanisms (1 means yes, 0 means\
    \ no)\n   that require the client to perform another SNEGO-MCL to get them.\n\
    \   To summarize, the response to a SNEGO-MCL request contains, in place\n   of\
    \ the filehandle, the length field, the status field, and the array\n   of security\
    \ mechanisms:\n        FH: length, status, {sec_1  sec_2 ... sec_n}\n   The next\
    \ two sub-sections describe how NFS v2 and v3 filehandles are\n   \"overloaded\"\
    \ to carry the length and status fields and the array of\n   security mechanisms.\n"
- title: 3.1 Overloaded NFS Version 2 Filehandle
  contents:
  - "3.1 Overloaded NFS Version 2 Filehandle\n   A regular NFS v2 filehandle is defined\
    \ in RFC1094 as an opaque value\n   occupying 32 octets:\n     1   2   3   4 \
    \                                               32\n   +---+---+---+---+---+---+---+---+\
    \     +---+---+---+---+---+---+---+\n   |   |   |   |   |   |   |   |   | ...\
    \ |   |   |   |   |   |   |   |\n   +---+---+---+---+---+---+---+---+     +---+---+---+---+---+---+---+\n\
    \   An overloaded NFS v2 filehandle looks like this:\n     1   2   3   4   5 \
    \          8                                  32\n   +---+---+---+---+---+---+---+---+\
    \     +---+---+---+---+     +---+---+\n   | l | s |   |   |     sec_1     | ...\
    \ |     sec_n     | ... |   |   |\n   +---+---+---+---+---+---+---+---+     +---+---+---+---+\
    \     +---+---+\n   Note that the first four octets of an overloaded NFS v2 filehandle\n\
    \   contain the length octet, the status octet, and two padded octets to\n   make\
    \ them XDR four-octet aligned.  The length octet l = 4 * n, where\n   n is the\
    \ number of security mechanisms sent in the current overloaded\n   filehandle.\
    \  Apparently, an overloaded NFS v2 filehandle can carry up\n   to seven security\
    \ mechanisms.\n"
- title: 3.2 Overloaded NFS Version 3 Filehandle
  contents:
  - "3.2 Overloaded NFS Version 3 Filehandle\n   A regular NFS v3 filehandle is defined\
    \ in RFC1813 as a variable\n   length opaque value occupying up to 64 octets.\
    \  The length of the\n   filehandle is indicated by an integer value contained\
    \ in a four octet\n   value which describes the number of valid octets that follow:\n\
    \  1           4\n"
- title: +---+---+---+---+
  contents:
  - '+---+---+---+---+

    '
- title: '|      len      |'
  contents:
  - '|      len      |

    '
- title: +---+---+---+---+
  contents:
  - "+---+---+---+---+\n  1           4                                          \
    \    up to 64\n"
- title: +---+---+---+---+---+---+---+---+---+---+---+---+     +---+---+---+---+
  contents:
  - '+---+---+---+---+---+---+---+---+---+---+---+---+     +---+---+---+---+

    '
- title: '|   |   |   |   |   |   |   |   |   |   |   |   | ... |   |   |   |   |'
  contents:
  - '|   |   |   |   |   |   |   |   |   |   |   |   | ... |   |   |   |   |

    '
- title: +---+---+---+---+---+---+---+---+---+---+---+---+     +---+---+---+---+
  contents:
  - '+---+---+---+---+---+---+---+---+---+---+---+---+     +---+---+---+---+

    '
- title: 'An overloaded NFS v3 filehandle looks like the following:'
  contents:
  - "An overloaded NFS v3 filehandle looks like the following:\n  1           4\n"
- title: +---+---+---+---+
  contents:
  - '+---+---+---+---+

    '
- title: '|      len      |'
  contents:
  - '|      len      |

    '
- title: +---+---+---+---+
  contents:
  - "+---+---+---+---+\n  1           4   5           8\n"
- title: +---+---+---+---+---+---+---+---+     +---+---+---+---+
  contents:
  - '+---+---+---+---+---+---+---+---+     +---+---+---+---+

    '
- title: '| s |   |   |   |     sec_1     | ... |     sec_n     |'
  contents:
  - '| s |   |   |   |     sec_1     | ... |     sec_n     |

    '
- title: +---+---+---+---+---+---+---+---+     +---+---+---+---+
  contents:
  - "+---+---+---+---+---+---+---+---+     +---+---+---+---+\n   Here, len = 4 * (n+1).\
    \  Again, n is the number of security mechanisms\n   contained in the current\
    \ overloaded filehandle.  Three octets are\n   padded after the status octet to\
    \ meet the XDR four-octet alignment\n   requirement.  An overloaded NFS v3 filehandle\
    \ can carry up to fifteen\n   security mechanisms.\n"
- title: 4. WebNFS Security Negotiation
  contents:
  - "4. WebNFS Security Negotiation\n   With the SNEGO-MCL request and the overloaded\
    \ NFS v2 and v3\n   filehandles defined above, the following diagram depicts the\
    \ WebNFS\n   security negotiation protocol:\n    Client                      \
    \                Server\n    ------                                      ------\n\
    \        LOOKUP FH=0x0, 0x81 <sec-index> \"path\"\n                        ----------->\n\
    \                        <-----------\n                            FH: length,\
    \ status, {sec_1  sec_2 ... sec_n}\n   where\n      0x81 represents client's indication\
    \ to negotiate security\n      mechanisms with the server,\n      path is either\
    \ an ASCII string of slash separated components or\n      0x80 and a native path,\n\
    \      sec-index, one octet, contains the index into the array of\n      security\
    \ mechanisms the server uses to protect the specified path,\n      status, one\
    \ octet, indicates whether there are more security\n      mechanisms (1 means\
    \ yes, 0 means no) that require the client to\n      perform another SNEGO-MCL\
    \ to get them,\n      length (one octet for NFS v2 and four octets for NFS v3)\
    \ describes\n      the number of valid octets that follow,\n      {sec_1 sec_2\
    \ ... sec_n} represents the array of security\n      mechanisms.  As noted earlier,\
    \ each security mechanism is\n      represented by a four-octet integer.\n   Here\
    \ is an example showing the WebNFS security negotiation protocol\n   with NFS\
    \ v2.  In the example it is assumed the server shares /export\n   with 10 security\
    \ mechanisms {0x3900 0x3901 0x3902 ... 0x3909} on the\n   export, two SNEGO-MCL\
    \ requests would be needed for the client to get\n   the complete security information:\n\
    \    LOOKUP FH=0x0, 0x81 0x01 \"/export\"\n                        ----------->\n\
    \                        <-----------\n        0x1c, 0x01, {0x3900 0x3901 0x3902\
    \ 0x3903 0x3904 0x3905 0x3906}\n    LOOKUP FH=0x0, 0x81 0x08 \"/export\"\n   \
    \                     ----------->\n                        <-----------\n   \
    \     0x0c, 0x00, {0x3907 0x3908 0x3909}\n   The order of the security mechanisms\
    \ returned in an overloaded\n   filehandle implies preferences, i.e., one is more\
    \ recommended than\n   those following it.  The ordering is the same as that returned\
    \ by the\n   MOUNT v3 protocol.\n   The following shows a typical scenario which\
    \ illustrates how the\n   WebNFS security negotiation is accomplished in the course\
    \ of\n   accessing publicly shared filesystems.\n   Normally, a WebNFS client\
    \ first makes a regular multi-component\n   LOOKUP request using the public filehandle\
    \ to obtain the filehandle\n   for the specified path.  Since the WebNFS client\
    \ does not have any\n   prior knowledge as to how the path is protected by the\
    \ server the\n   default security mechanism is used in this first multi-component\n\
    \   LOOKUP.  If the default security mechanism does not meet server's\n   requirements,\
    \ the server replies with the AUTH_TOOWEAK RPC\n   authentication error, indicating\
    \ that the default security mechanism\n   is not valid and the WebNFS client needs\
    \ to use a stronger one.\n   Upon receiving the AUTH_TOOWEAK error, to find out\
    \ what security\n   mechanisms are required to access the specified path the WebNFS\n\
    \   client sends a SNEGO-qMCL request, using the default security\n   mechanism.\n\
    \   If the SNEGO-MCL request succeeds the server responds with the\n   filehandle\
    \ overloaded with the array of security mechanisms required\n   for the specified\
    \ path.  If the server does not support WebNFS\n   security negotiation, the SNEGO-MCL\
    \ request fails with NFSERR_IO for\n   NFS v2 or NFS3ERR_IO for NFS v3 [RFC2055].\n\
    \   Depending on the size of the array of security mechanisms, the WebNFS\n  \
    \ client may have to make more SNEGO-MCL requests to get the complete\n   array.\n\
    \   For successful SNEGO-MCL requests, the WebNFS client retrieves the\n   array\
    \ of security mechanisms from the overloaded filehandle, selects\n   an appropriate\
    \ one, and issues a regular multi-component LOOKUP using\n   the selected security\
    \ mechanism to acquire the filehandle.\n   All subsequent NFS requests are then\
    \ made using the selected security\n   mechanism and the filehandle.\n   The following\
    \ depicts the scenario outlined above.  It is assumed\n   that the server shares\
    \ /export/home as follows:\n        share -o sec=sec_1:sec_2:sec_3,public /export/home\n\
    \   and AUTH_SYS is the client's default security mechanism and is not\n   one\
    \ of {sec_1, sec_2, sec_3}.\n        Client                                  \
    \        Server\n        ------                                          ------\n\
    \            LOOKUP FH=0x0, \"/export/home\"\n                               \
    \      AUTH_SYS\n                                    ----------->\n          \
    \                          <-----------\n                                    \
    \                    AUTH_TOOWEAK\n            LOOKUP FH=0x0, 0x81 0x01 \"/export/home\"\
    \n                                     AUTH_SYS\n                            \
    \        ----------->\n                                    <-----------\n    \
    \                 overloaded FH: length, status, {sec_1 sec_2 sec_3}\n       \
    \     LOOKUP FH=0x0, \"/export/home\"\n                                      \
    \  sec_n\n                                    ----------->\n                 \
    \                   <-----------\n                                           \
    \             FH = 0x01\n            NFS request with FH=0x01\n              \
    \                          sec_n\n                                    ----------->\n\
    \                                    <-----------\n                          \
    \                              ...\n   In the above scenario, the first request\
    \ is a regular multi-component\n   LOOKUP which fails with the AUTH_TOOWEAK error.\
    \  The client then\n   issues a SNEGO-MCL request to get the security information.\n\
    \   There are WebNFS implementations that allow the public filehandle to\n   work\
    \ with NFS protocol procedures other than LOOKUP.  For those\n   WebNFS implementations,\
    \ if the first request is not a regular multi-\n   component LOOKUP and it fails\
    \ with AUTH_TOOWEAK, the client should\n   issue a SNEGO-MCL with\n        0x81\
    \ 0x01 \".\"\n   as the path to get the security information.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   The reader may note that no mandatory security\
    \ mechanisms are\n   specified in the protocol that the client must use in making\
    \ SNEGO-\n   MCL requests.  Normally, the client uses the default security\n \
    \  mechanism configured on his system in the first SNEGO-MCL request.\n   If the\
    \ default security mechanism is not valid the server replies\n   with the AUTH_TOOWEAK\
    \ error. In this case the server does not return\n   the array of security mechanisms\
    \ to the client.  The client can then\n   make another SNEGO-MCL request using\
    \ a stronger security mechanism.\n   This continues until the client hits a valid\
    \ one or has exhausted all\n   the supported security mechanisms.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC1094] Sun Microsystems, Inc., \"NFS: Network File System\
    \ Protocol\n             Specification\", RFC 1094, March 1989.\n            \
    \ http://www.ietf.org/rfc/rfc1094.txt\n   [RFC1813] Callaghan, B., Pawlowski,\
    \ B. and P. Staubach, \"NFS Version\n             3 Protocol Specification\",\
    \ RFC 1813, June 1995.\n             http://www.ietf.org/rfc/rfc1813.txt\n   [RFC2054]\
    \ Callaghan, B., \"WebNFS Client Specification\", RFC 2054,\n             October\
    \ 1996.  http://www.ietf.org/rfc/rfc2054.txt\n   [RFC2055] Callaghan, B., \"WebNFS\
    \ Server Specification\", RFC 2055,\n             October 1996.  http://www.ietf.org/rfc/rfc2055.txt\n\
    \   [RFC2203] Eisler, M., Chiu, A. and Ling, L., \"RPCSEC_GSS Protocol\n     \
    \        Specification\", RFC 2203, September 1997.\n             http://www.ietf.org/rfc/rfc2203.txt\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   This specification was extensively brainstormed and reviewed\
    \ by the\n   NFS group of Solaris Software Division.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Alex Chiu\n   Sun Microsystems, Inc.\n   901 San Antonio\
    \ Road\n   Palo Alto, CA 94303\n   Phone: +1 (650) 786-6465\n   EMail: alex.chiu@Eng.sun.com\n\
    \   Mike Eisler\n   Sun Microsystems, Inc.\n   901 San Antonio Road\n   Palo Alto,\
    \ CA 94303\n   Phone: +1 (719) 599-9026\n   EMail: michael.eisler@Eng.sun.com\n\
    \   Brent Callaghan\n   Sun Microsystems, Inc.\n   901 San Antonio Road\n   Palo\
    \ Alto, CA 94303\n   Phone: +1 (650) 786-5067\n   EMail: brent.callaghan@Eng.sun.com\n"
- title: 9. Full Copyright Statement
  contents:
  - "9. Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
