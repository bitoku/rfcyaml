- title: __initial_text__
  contents:
  - '               Stringprep Revision and Problem Statement

    '
- title: for the Preparation and Comparison of Internationalized Strings (PRECIS)
  contents:
  - 'for the Preparation and Comparison of Internationalized Strings (PRECIS)

    '
- title: Abstract
  contents:
  - "Abstract\n   If a protocol expects to compare two strings and is prepared only\
    \ for\n   those strings to be ASCII, then using Unicode code points in those\n\
    \   strings requires they be prepared somehow.  Internationalizing Domain\n  \
    \ Names in Applications (here called IDNA2003) defined and used\n   Stringprep\
    \ and Nameprep.  Other protocols subsequently defined\n   Stringprep profiles.\
    \  A new approach different from Stringprep and\n   Nameprep is used for a revision\
    \ of IDNA2003 (called IDNA2008).  Other\n   Stringprep profiles need to be similarly\
    \ updated, or a replacement of\n   Stringprep needs to be designed.  This document\
    \ outlines the issues\n   to be faced by those designing a Stringprep replacement.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6885.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Keywords . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  6\n   3.  Conventions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  6\n   4.  Stringprep Profiles Limitations  . . . . . . . . . . . .\
    \ . . .  6\n   5.  Major Topics for Consideration . . . . . . . . . . . . . .\
    \ . .  8\n     5.1.  Comparison . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n       5.1.1.  Types of Identifiers . . . . . . . . . . . . . . . . .\
    \  8\n       5.1.2.  Effect of Comparison . . . . . . . . . . . . . . . . .  8\n\
    \     5.2.  Dealing with Characters  . . . . . . . . . . . . . . . . .  9\n  \
    \     5.2.1.  Case Folding, Case Sensitivity, and Case\n               Preservation\
    \ . . . . . . . . . . . . . . . . . . . . .  9\n       5.2.2.  Stringprep and\
    \ NFKC  . . . . . . . . . . . . . . . . .  9\n       5.2.3.  Character Mapping\
    \  . . . . . . . . . . . . . . . . . . 10\n       5.2.4.  Prohibited Characters\
    \  . . . . . . . . . . . . . . . . 10\n       5.2.5.  Internal Structure, Delimiters,\
    \ and Special\n               Characters . . . . . . . . . . . . . . . . . . .\
    \ . . . 10\n       5.2.6.  Restrictions Because of Glyph Similarity . . . . .\
    \ . . 11\n     5.3.  Where the Data Comes from and Where It Goes  . . . . . .\
    \ . 11\n       5.3.1.  User Input and the Source of Protocol Elements . . . .\
    \ 11\n       5.3.2.  User Output  . . . . . . . . . . . . . . . . . . . . . 12\n\
    \       5.3.3.  Operations . . . . . . . . . . . . . . . . . . . . . . 12\n  \
    \ 6.  Considerations for Stringprep Replacement  . . . . . . . . . . 13\n   7.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 14\n   8.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 14\n   9.  Informative References\
    \ . . . . . . . . . . . . . . . . . . . . 15\n   Appendix A.  Classification of\
    \ Stringprep Profiles . . . . . . . . 19\n   Appendix B.  Evaluation of Stringprep\
    \ Profiles . . . . . . . . . . 19\n     B.1.  iSCSI Stringprep Profile: RFC 3720,\
    \ RFC 3721, RFC 3722 . . 19\n     B.2.  SMTP/POP3/ManageSieve Stringprep Profiles:\
    \ RFC 4954,\n           RFC 5034, RFC 5804 . . . . . . . . . . . . . . . . . .\
    \ . . 21\n     B.3.  IMAP Stringprep Profiles for Usernames: RFC 4314, RFC\n \
    \          5738 . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n   \
    \  B.4.  IMAP Stringprep Profiles for Passwords: RFC 5738 . . . . . 26\n     B.5.\
    \  Anonymous SASL Stringprep Profiles: RFC 4505 . . . . . . . 28\n     B.6.  XMPP\
    \ Stringprep Profiles for Nodeprep: RFC 3920  . . . . . 30\n     B.7.  XMPP Stringprep\
    \ Profiles for Resourceprep: RFC 3920  . . . 31\n     B.8.  EAP Stringprep Profiles:\
    \ RFC 3748  . . . . . . . . . . . . 33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Internationalizing Domain Names in Applications (here called\n\
    \   IDNA2003) [RFC3490] [RFC3491] [RFC3492] and [RFC3454] describes a\n   mechanism\
    \ for encoding Unicode labels that make up the\n   Internationalized Domain Names\
    \ (IDNs) as standard DNS labels.  The\n   labels were processed using a method\
    \ called Nameprep [RFC3491] and\n   Punycode [RFC3492].  That method was specific\
    \ to IDNA2003 but is\n   generalized as Stringprep [RFC3454].  The general mechanism\
    \ is used\n   by other protocols with similar needs but with different constraints\n\
    \   than IDNA2003.\n   Stringprep defines a framework within which protocols define\
    \ their\n   Stringprep profiles.  Some known IETF specifications using Stringprep\n\
    \   are listed below:\n   o  The Nameprep profile [RFC3490] for use in Internationalized\
    \ Domain\n      Names (IDNs);\n   o  The Inter-Asterisk eXchange (IAX) using Nameprep\
    \ [RFC5456];\n   o  NFSv4 [RFC3530] and NFSv4.1 [RFC5661];\n   o  The Internet\
    \ Small Computer System Interface (iSCSI) profile\n      [RFC3722] for use in\
    \ iSCSI names;\n   o  The Extensible Authentication Protocol (EAP) [RFC3748];\n\
    \   o  The Nodeprep and Resourceprep profiles [RFC3920] (which was\n      obsoleted\
    \ by [RFC6120]) for use in the Extensible Messaging and\n      Presence Protocol\
    \ (XMPP), and the XMPP to Common Presence and\n      Instant Messaging (CPIM)\
    \ mapping [RFC3922] (the latter of these\n      relies on the former);\n   o \
    \ The Internationalized Resource Identifier (IRI) and URI in XMPP\n      [RFC5122];\n\
    \   o  The Policy MIB profile [RFC4011] for use in the Simple Network\n      Management\
    \ Protocol (SNMP);\n   o  Transport Layer Security (TLS) [RFC4279];\n   o  The\
    \ Lightweight Directory Access Protocol (LDAP) profile [RFC4518]\n      for use\
    \ with LDAP [RFC4511] and its authentication methods\n      [RFC4513];\n   o \
    \ PKIX subject identification using LDAPprep [RFC4683];\n   o  PKIX Certificate\
    \ Revocation List (CRL) using LDAPprep [RFC5280];\n   o  The Simple Authentication\
    \ and Security Layer (SASL) [RFC4422] and\n      SASLprep profile [RFC4013] for\
    \ use in SASL;\n   o  Plain SASL using SASLprep [RFC4616];\n   o  SMTP Auth using\
    \ SASLprep [RFC4954];\n   o  The Post Office Protocol (POP3) Auth using SASLprep\
    \ [RFC5034];\n   o  TLS Secure Remote Password (SRP) using SASLprep [RFC5054];\n\
    \   o  SASL Salted Challenge Response Authentication Mechanism (SCRAM)\n     \
    \ using SASLprep [RFC5802];\n   o  Remote management of Sieve using SASLprep [RFC5804];\n\
    \   o  The Network News Transfer Protocol (NNTP) using SASLprep\n      [RFC4643];\n\
    \   o  IMAP4 using SASLprep [RFC4314];\n   o  The trace profile [RFC4505] for\
    \ use with the SASL ANONYMOUS\n      mechanism;\n   o  Internet Application Protocol\
    \ Collation Registry [RFC4790];\n   o  The unicode-casemap Unicode Collation [RFC5051].\n\
    \   However, a review (see [78PRECIS]) of these protocol specifications\n   found\
    \ that they are very similar and can be grouped into a short\n   number of classes.\
    \  Moreover, many reuse the same Stringprep profile,\n   such as the SASL one.\n\
    \   IDNA2003 was replaced because of some limitations described in\n   [RFC4690].\
    \  The new IDN specification, called IDNA2008 [RFC5890],\n   [RFC5891], [RFC5892],\
    \ [RFC5893] was designed based on the\n   considerations found in [RFC5894]. \
    \ One of the effects of IDNA2008 is\n   that Nameprep and Stringprep are not used\
    \ at all.  Instead, an\n   algorithm based on Unicode properties of code points\
    \ is defined.\n   That algorithm generates a stable and complete table of the\
    \ supported\n   Unicode code points for each Unicode version.  This algorithm\
    \ uses an\n   inclusion-based approach, instead of the exclusion-based approach\
    \ of\n   Stringprep/Nameprep.  That is, IDNA2003 created an explicit list of\n\
    \   excluded or mapped-away characters; anything in Unicode 3.2 that was\n   not\
    \ so listed could be assumed to be allowed under the protocol.\n   IDNA2008 begins\
    \ instead from the assumption that code points are\n   disallowed and then relies\
    \ on Unicode properties to derive whether a\n   given code point actually is allowed\
    \ in the protocol.\n   This document lists the shortcomings and issues found by\
    \ protocols\n   listed above that defined Stringprep profiles.  It also lists\
    \ the\n   requirements for any potential replacement of Stringprep.\n"
- title: 2.  Keywords
  contents:
  - "2.  Keywords\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This document uses various internationalization terms, which are\n   defined\
    \ and discussed in [RFC6365].\n   Additionally, this document defines the following\
    \ keyword:\n      PRECIS: Preparation and Comparison of Internationalized Strings\n"
- title: 3.  Conventions
  contents:
  - "3.  Conventions\n   A single Unicode code point in this memo is denoted by \"\
    U+\" followed\n   by four to six hexadecimal digits, as used in [Unicode61],\n\
    \   Appendix A.\n"
- title: 4.  Stringprep Profiles Limitations
  contents:
  - "4.  Stringprep Profiles Limitations\n   During IETF 77 (March 2010), a BOF discussed\
    \ the current state of the\n   protocols that have defined Stringprep profiles\
    \ [NEWPREP].  The main\n   conclusions from that discussion were as follows:\n\
    \   o  Stringprep is bound to Version 3.2 of Unicode.  Stringprep has not\n  \
    \    been updated to new versions of Unicode.  Therefore, the protocols\n    \
    \  using Stringprep are stuck at Unicode 3.2, and their\n      specifications\
    \ need to be updated to support new versions of\n      Unicode.\n   o  The protocols\
    \ would like to not be bound to a specific version of\n      Unicode, but rather\
    \ have better Unicode version agility in the way\n      of IDNA2008.  This is\
    \ important partly because it is usually\n      impossible for an application\
    \ to require Unicode 3.2; the\n      application gets whatever version of Unicode\
    \ is available on the\n      host.\n   o  The protocols require better bidirectional\
    \ support (bidi) than\n      currently offered by Stringprep.\n   o  If the protocols\
    \ are updated to use a new version of Stringprep or\n      another framework,\
    \ then backward compatibility is an important\n      requirement.  For example,\
    \ Stringprep normalization is based on\n      and profiles may use Unicode Normalization\
    \ Form KC (NFKC) [UAX15],\n      while IDNA2008 mostly uses Unicode Normalization\
    \ Form C (NFC)\n      [UAX15].\n   o  Identifiers are passed between protocols.\
    \  For example, the same\n      username string of code points may be passed between\
    \ SASL, XMPP,\n      LDAP, and EAP.  Therefore, a common set of rules or classes\
    \ of\n      strings are preferred over specific rules for each protocol.\n   \
    \   Without real planning in advance, many Stringprep profiles reuse\n      other\
    \ profiles, so this goal was accomplished by accident with\n      Stringprep.\n\
    \   Protocols that use Stringprep profiles use strings for different\n   purposes:\n\
    \   o  XMPP uses a different Stringprep profile for each part of the XMPP\n  \
    \    address Jabber Identifier (JID): a localpart, which is similar to\n     \
    \ a username and used for authentication; a domainpart, which is a\n      domain\
    \ name; and a resourcepart, which is less restrictive than\n      the localpart.\n\
    \   o  iSCSI uses a Stringprep profile for the names of protocol\n      participants\
    \ (called initiators and targets).  The iSCSI Qualified\n      Name (IQN) format\
    \ of iSCSI names contains a reversed DNS domain\n      name.\n   o  SASL and LDAP\
    \ use a Stringprep profile for usernames.\n   o  LDAP uses a set of Stringprep\
    \ profiles.\n   The apparent judgement of the BOF attendees [NEWPREP] was that\
    \ it\n   would be highly desirable to have a replacement of Stringprep, with\n\
    \   similar characteristics to IDNA2008.  That replacement should be\n   defined\
    \ so that the protocols could use internationalized strings\n   without a lot\
    \ of specialized internationalization work, since\n   internationalization expertise\
    \ is not available in the respective\n   protocols or working groups.  Accordingly,\
    \ the IESG formed the PRECIS\n   working group to undertake the task.\n   Notwithstanding\
    \ the desire evident in [NEWPREP] and the chartering of\n   a working group, IDNA2008\
    \ may be a poor model for what other\n   protocols ought to do, because it is\
    \ designed to support an old\n   protocol that is designed to operate on the scale\
    \ of the entire\n   Internet.  Moreover, IDNA2008 is intended to be deployed without\
    \ any\n   change to the base DNS protocol.  Other protocols may aim at\n   deployment\
    \ in more local environments, or may have protocol version\n   negotiation built\
    \ in.\n"
- title: 5.  Major Topics for Consideration
  contents:
  - "5.  Major Topics for Consideration\n   This section provides an overview of major\
    \ topics that a Stringprep\n   replacement needs to address.  The headings correspond\
    \ roughly with\n   categories under which known Stringprep-using protocol RFCs\
    \ have been\n   evaluated.  For the details of those evaluations, see Appendix\
    \ A.\n"
- title: 5.1.  Comparison
  contents:
  - '5.1.  Comparison

    '
- title: 5.1.1.  Types of Identifiers
  contents:
  - "5.1.1.  Types of Identifiers\n   Following [ID-COMP], it is possible to organize\
    \ identifiers into\n   three classes in respect of how they may be compared with\
    \ one\n   another:\n   Absolute Identifiers:  Identifiers that can be compared\
    \ byte-by-byte\n      for equality.\n   Definite Identifiers:  Identifiers that\
    \ have a well-defined\n      comparison algorithm on which all parties agree.\n\
    \   Indefinite Identifiers:  Identifiers that have no single comparison\n    \
    \  algorithm on which all parties agree.\n   Definite Identifiers include cases\
    \ like the comparison of Unicode\n   code points in different encodings: they\
    \ do not match byte for byte\n   but can all be converted to a single encoding\
    \ which then does match\n   byte for byte.  Indefinite Identifiers are sometimes\
    \ algorithmically\n   comparable by well-specified subsets of parties.  For more\
    \ discussion\n   of these categories, see [ID-COMP].\n   The section on treating\
    \ the existing known cases, Appendix A, uses\n   the categories above.\n"
- title: 5.1.2.  Effect of Comparison
  contents:
  - "5.1.2.  Effect of Comparison\n   The three classes of comparison style outlined\
    \ in Section 5.1.1 may\n   have different effects when applied.  It is necessary\
    \ to evaluate the\n   effects if a comparison results in a false positive or a\
    \ false\n   negative, especially in terms of the consequences to security and\n\
    \   usability.\n"
- title: 5.2.  Dealing with Characters
  contents:
  - "5.2.  Dealing with Characters\n   This section outlines a range of issues having\
    \ to do with characters\n   in the target protocols, the ways in which IDNA2008\
    \ might be a good\n   analogy to other protocols, and ways in which it might be\
    \ a poor one.\n"
- title: 5.2.1.  Case Folding, Case Sensitivity, and Case Preservation
  contents:
  - "5.2.1.  Case Folding, Case Sensitivity, and Case Preservation\n   In IDNA2003,\
    \ labels are always mapped to lowercase before the\n   Punycode transformation.\
    \  In IDNA2008, there is no mapping at all:\n   input is either a valid U-label\
    \ or it is not.  At the same time,\n   uppercase characters are by definition\
    \ not valid U-labels, because\n   they fall into the Unstable category (category\
    \ B) of [RFC5892].\n   If there are protocols that require case be preserved,\
    \ then the\n   analogy with IDNA2008 will break down.  Accordingly, existing\n\
    \   protocols are to be evaluated according to the following criteria:\n   1.\
    \  Does the protocol use case folding?  For all blocks of code\n       points\
    \ or just for certain subsets?\n   2.  Is the system or protocol case-sensitive?\n\
    \   3.  Does the system or protocol preserve case?\n"
- title: 5.2.2.  Stringprep and NFKC
  contents:
  - "5.2.2.  Stringprep and NFKC\n   Stringprep profiles may use normalization.  If\
    \ they do, they use NFKC\n   [UAX15] (most profiles do).  It is not clear that\
    \ NFKC is the right\n   normalization to use in all cases.  In [UAX15], there\
    \ is the\n   following observation regarding Normalization Forms KC and KD: \"\
    It is\n   best to think of these Normalization Forms as being like uppercase or\n\
    \   lowercase mappings: useful in certain contexts for identifying core\n   meanings,\
    \ but also performing modifications to the text that may not\n   always be appropriate.\"\
    \  In general, it can be said that NFKC is more\n   aggressive about finding matches\
    \ between code points than NFC.  For\n   things like the spelling of users' names,\
    \ NFKC may not be the best\n   form to use.  At the same time, one of the nice\
    \ things about NFKC is\n   that it deals with the width of characters that are\
    \ otherwise\n   similar, by canonicalizing half-width to full-width.  This mapping\n\
    \   step can be crucial in practice.  A replacement for Stringprep\n   depends\
    \ on analyzing the different use profiles and considering\n   whether NFKC or\
    \ NFC is a better normalization for each profile.\n   For the purposes of evaluating\
    \ an existing example of Stringprep use,\n   it is helpful to know whether it\
    \ uses no normalization, NFKC, or NFC.\n"
- title: 5.2.3.  Character Mapping
  contents:
  - "5.2.3.  Character Mapping\n   Along with the case mapping issues raised in Section\
    \ 5.2.1, there is\n   the question of whether some characters are mapped either\
    \ to other\n   characters or to nothing during Stringprep.  [RFC3454], Section\
    \ 3,\n   outlines a number of characters that are mapped to nothing, and also\n\
    \   permits Stringprep profiles to define their own mappings.\n"
- title: 5.2.4.  Prohibited Characters
  contents:
  - "5.2.4.  Prohibited Characters\n   Along with case folding and other character\
    \ mappings, many protocols\n   have characters that are simply disallowed.  For\
    \ example, control\n   characters and special characters such as \"@\" or \"/\"\
    \ may be\n   prohibited in a protocol.\n   One of the primary changes of IDNA2008\
    \ is in the way it approaches\n   Unicode code points, using the new inclusion-based\
    \ approach (see\n   Section 1).\n   Because of the default assumption in IDNA2008\
    \ that a code point is\n   not allowed by the protocol, it has more than one class\
    \ of \"allowed\n   by the protocol\"; this is unlike IDNA2003.  While some code\
    \ points\n   are disallowed outright, some are allowed only in certain contexts.\n\
    \   The reasons for the context-dependent rules have to do with the way\n   some\
    \ characters are used.  For instance, the ZERO WIDTH JOINER and\n   ZERO WIDTH\
    \ NON-JOINER (ZWJ, U+200D and ZWNJ, U+200C) are allowed with\n   contextual rules\
    \ because they are required in some circumstances, yet\n   are considered punctuation\
    \ by Unicode and would therefore be\n   DISALLOWED under the usual IDNA2008 derivation\
    \ rules.  The goal of\n   IDNA2008 is to provide the widest repertoire of code\
    \ points possible\n   and consistent with the traditional DNS \"LDH\" (letters,\
    \ digits,\n   hyphen) rule (see [RFC0952]), trusting to the operators of individual\n\
    \   zones to make sensible (and usually more restrictive) policies for\n   their\
    \ zones.\n"
- title: 5.2.5.  Internal Structure, Delimiters, and Special Characters
  contents:
  - "5.2.5.  Internal Structure, Delimiters, and Special Characters\n   IDNA2008 has\
    \ a special problem with delimiters, because the delimiter\n   \"character\" in\
    \ the DNS wire format is not really part of the data.\n   In DNS, labels are not\
    \ separated exactly; instead, a label carries\n   with it an indicator that says\
    \ how long the label is.  When the label\n   is displayed in presentation format\
    \ as part of a fully qualified\n   domain name, the label separator FULL STOP,\
    \ U+002E (.) is used to\n   break up the labels.  But because that label separator\
    \ does not\n   travel with the wire format of the domain name, there is no way\
    \ to\n   encode a different, \"internationalized\" separator in IDNA2008.\n  \
    \ Other protocols may include characters with similar special meaning\n   within\
    \ the protocol.  Common characters for these purposes include\n   FULL STOP, U+002E\
    \ (.); COMMERCIAL AT, U+0040 (@); HYPHEN-MINUS,\n   U+002D (-); SOLIDUS, U+002F\
    \ (/); and LOW LINE, U+005F (_).  The mere\n   inclusion of such a character in\
    \ the protocol is not enough for it to\n   be considered similar to another protocol\
    \ using the same character;\n   instead, handling of the character must be taken\
    \ into consideration\n   as well.\n   An important issue to tackle here is whether\
    \ it is valuable to map to\n   or from these special characters as part of the\
    \ Stringprep\n   replacement.  In some locales, the analogue to FULL STOP, U+002E\
    \ is\n   some other character, and users may expect to be able to substitute\n\
    \   their normal stop for FULL STOP, U+002E.  At the same time, there are\n  \
    \ predictability arguments in favor of treating identifiers with FULL\n   STOP,\
    \ U+002E in them just the way they are treated under IDNA2008.\n"
- title: 5.2.6.  Restrictions Because of Glyph Similarity
  contents:
  - "5.2.6.  Restrictions Because of Glyph Similarity\n   Homoglyphs are similarly\
    \ (or identically) rendered glyphs of\n   different code points.  For DNS names,\
    \ homoglyphs may enable\n   phishing.  If a protocol requires some visual comparison\
    \ by end-\n   users, then the issue of homoglyphs is to be considered.  In the\
    \ DNS\n   context, these issues are documented in [RFC5894] and [RFC4690].\n \
    \  However, IDNA2008 does not have a mechanism to deal with them,\n   trusting\
    \ DNS zone operators to enact sensible policies for the subset\n   of Unicode\
    \ they wish to support, given their user community.  A\n   similar policy/protocol\
    \ split may not be desirable in every protocol.\n"
- title: 5.3.  Where the Data Comes from and Where It Goes
  contents:
  - '5.3.  Where the Data Comes from and Where It Goes

    '
- title: 5.3.1.  User Input and the Source of Protocol Elements
  contents:
  - "5.3.1.  User Input and the Source of Protocol Elements\n   Some protocol elements\
    \ are provided by users, and others are not.\n   Those that are not may presumably\
    \ be subject to greater restrictions,\n   whereas those that users provide likely\
    \ need to permit the broadest\n   range of code points.  The following questions\
    \ are helpful:\n   1.  Do users input the strings directly?\n   2.  If so, how?\
    \ (keyboard, stylus, voice, copy-paste, etc.)\n   3.  Where do we place the dividing\
    \ line between user interface and\n       protocol? (see [RFC5895])\n"
- title: 5.3.2.  User Output
  contents:
  - "5.3.2.  User Output\n   Just as only some protocol elements are expected to be\
    \ entered\n   directly by users, only some protocol elements are intended to be\n\
    \   consumed directly by users.  It is important to know how users are\n   expected\
    \ to be able to consume the protocol elements, because\n   different environments\
    \ present different challenges.  An element that\n   is only ever delivered as\
    \ part of a vCard remains in machine-readable\n   format, so the problem of visual\
    \ confusion is not a great one.  Is\n   the protocol element published as part\
    \ of a vCard, a web directory,\n   on a business card, or on \"the side of a bus\"\
    ?  Do users use the\n   protocol element as an identifier (which means that they\
    \ might enter\n   it again in some other context)?  (See also Section 5.2.6.)\n"
- title: 5.3.3.  Operations
  contents:
  - "5.3.3.  Operations\n   Some strings are useful as part of the protocol but are\
    \ not used as\n   input to other operations (for instance, purely informative\
    \ or\n   descriptive text).  Other strings are used directly as input to other\n\
    \   operations (such as cryptographic hash functions), or are used\n   together\
    \ with other strings to (such as concatenating a string with\n   some others to\
    \ form a unique identifier).\n"
- title: 5.3.3.1.  String Classes
  contents:
  - "5.3.3.1.  String Classes\n   Strings often have a similar function in different\
    \ protocols.  For\n   instance, many different protocols contain user identifiers\
    \ or\n   passwords.  A single profile for all such uses might be desirable.\n\
    \   Often, a string in a protocol is effectively a protocol element from\n   another\
    \ protocol.  For instance, different systems might use the same\n   credentials\
    \ database for authentication.\n"
- title: 5.3.3.2.  Community Considerations
  contents:
  - "5.3.3.2.  Community Considerations\n   A Stringprep replacement that does anything\
    \ more than just update\n   Stringprep to the latest version of Unicode will probably\
    \ entail some\n   changes.  It is important to identify the willingness of the\n\
    \   protocol-using community to accept backwards-incompatible changes.\n   By\
    \ the same token, it is important to evaluate the desire of the\n   community\
    \ for features not available under Stringprep.\n"
- title: 5.3.3.3.  Unicode Incompatible Changes
  contents:
  - "5.3.3.3.  Unicode Incompatible Changes\n   IDNA2008 uses an algorithm to derive\
    \ the validity of a Unicode code\n   point for use under IDNA2008.  It does this\
    \ by using the properties\n   of each code point to test its validity.\n   This\
    \ approach depends crucially on the idea that code points, once\n   valid for\
    \ a protocol profile, will not later be made invalid.  That\n   is not a guarantee\
    \ currently provided by Unicode.  Properties of code\n   points may change between\
    \ versions of Unicode.  Rarely, such a change\n   could cause a given code point\
    \ to become invalid under a protocol\n   profile, even though the code point would\
    \ be valid with an earlier\n   version of Unicode.  This is not merely a theoretical\
    \ possibility,\n   because it has occurred [RFC6452].\n   Accordingly, as in IDNA2008,\
    \ a Stringprep replacement that intends to\n   be Unicode version agnostic will\
    \ need to work out a mechanism to\n   address cases where incompatible changes\
    \ occur because of new Unicode\n   versions.\n"
- title: 6.  Considerations for Stringprep Replacement
  contents:
  - "6.  Considerations for Stringprep Replacement\n   The above suggests the following\
    \ guidance:\n   o  A Stringprep replacement should be defined.\n   o  The replacement\
    \ should take an approach similar to IDNA2008 (e.g.,\n      by using properties\
    \ of code points instead of whitelisting of code\n      points), in that it enables\
    \ better Unicode agility.\n   o  Protocols share similar characteristics of strings.\
    \  Therefore,\n      defining internationalization preparation algorithms for\
    \ the\n      smallest set of string classes may be sufficient for most cases,\n\
    \      providing coherence among a set of related protocols or protocols\n   \
    \   where identifiers are exchanged.\n   o  The sets of string classes need to\
    \ be evaluated according to the\n      considerations that make up the headings\
    \ in Section 5\n   o  It is reasonable to limit scope to Unicode code points and\
    \ rule\n      the mapping of data from other character encodings outside the\n\
    \      scope of this effort.\n   o  The replacement ought to at least provide\
    \ guidance to applications\n      using the replacement on how to handle protocol\
    \ incompatibilities\n      resulting from changes to Unicode.  In an ideal world,\
    \ the\n      Stringprep replacement would handle the changes automatically, but\n\
    \      it appears that such automatic handling would require magic and\n     \
    \ cannot be expected.\n   o  Compatibility within each protocol between a technique\
    \ that is\n      Stringprep-based and the technique's replacement has to be\n\
    \      considered very carefully.\n   Existing deployments already depend on Stringprep\
    \ profiles.\n   Therefore, a replacement must consider the effects of any new\n\
    \   strategy on existing deployments.  By way of comparison, it is worth\n   noting\
    \ that some characters were acceptable in IDNA labels under\n   IDNA2003, but\
    \ are not protocol-valid under IDNA2008 (and conversely);\n   disagreement about\
    \ what to do during the transition has resulted in\n   different approaches to\
    \ mapping.  Different implementers may make\n   different decisions about what\
    \ to do in such cases; this could have\n   interoperability effects.  It is necessary\
    \ to trade better support\n   for different linguistic environments against the\
    \ potential side\n   effects of backward incompatibility.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document merely states what problems are\
    \ to be solved and does\n   not define a protocol.  There are undoubtedly security\
    \ implications\n   of the particular results that will come from the work to be\n\
    \   completed.  Moreover, the Stringprep Security Considerations\n   [RFC3454]\
    \ Section applies.  See also the analysis in the subsections\n   of Appendix B,\
    \ below.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document is the product of the PRECIS IETF Working\
    \ Group, and\n   participants in that working group were helpful in addressing\
    \ issues\n   with the text.\n   Specific contributions came from David Black,\
    \ Alan DeKok, Simon\n   Josefsson, Bill McQuillan, Alexey Melnikov, Peter Saint-Andre,\
    \ Dave\n   Thaler, and Yoshiro Yoneya.\n   Dave Thaler provided the \"buckets\"\
    \ insight in Section 5.1.1, central\n   to the organization of the problem.\n\
    \   Evaluations of Stringprep profiles that are included in Appendix B\n   were\
    \ done by David Black, Alexey Melnikov, Peter Saint-Andre, and\n   Dave Thaler.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [78PRECIS]   Blanchet, M., \"PRECIS Framework\"\
    , Proceedings of IETF\n                78, July 2010, <http://www.ietf.org/proceedings/78/\n\
    \                slides/precis-2.pdf>.\n   [ID-COMP]    Thaler, D., Ed., \"Issues\
    \ in Identifier Comparison for\n                Security Purposes\", Work in Progress,\
    \ March 2013.\n   [NEWPREP]    \"Newprep BoF Meeting Minutes\", March 2010,\n\
    \                <http://www.ietf.org/proceedings/77/minutes/\n              \
    \  newprep.txt>.\n   [RFC0952]    Harrenstien, K., Stahl, M., and E. Feinler,\
    \ \"DoD\n                Internet host table specification\", RFC 952,\n     \
    \           October 1985.\n   [RFC2119]    Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3454]    Hoffman, P. and M. Blanchet, \"Preparation of\n     \
    \           Internationalized Strings (\"stringprep\")\", RFC 3454,\n        \
    \        December 2002.\n   [RFC3490]    Faltstrom, P., Hoffman, P., and A. Costello,\n\
    \                \"Internationalizing Domain Names in Applications\n         \
    \       (IDNA)\", RFC 3490, March 2003.\n   [RFC3491]    Hoffman, P. and M. Blanchet,\
    \ \"Nameprep: A Stringprep\n                Profile for Internationalized Domain\
    \ Names (IDN)\",\n                RFC 3491, March 2003.\n   [RFC3492]    Costello,\
    \ A., \"Punycode: A Bootstring encoding of\n                Unicode for Internationalized\
    \ Domain Names in\n                Applications (IDNA)\", RFC 3492, March 2003.\n\
    \   [RFC3530]    Shepler, S., Callaghan, B., Robinson, D., Thurlow, R.,\n    \
    \            Beame, C., Eisler, M., and D. Noveck, \"Network File\n          \
    \      System (NFS) version 4 Protocol\", RFC 3530, April 2003.\n   [RFC3722]\
    \    Bakke, M., \"String Profile for Internet Small Computer\n               \
    \ Systems Interface (iSCSI) Names\", RFC 3722, April 2004.\n   [RFC3748]    Aboba,\
    \ B., Blunk, L., Vollbrecht, J., Carlson, J., and\n                H. Levkowetz,\
    \ \"Extensible Authentication Protocol\n                (EAP)\", RFC 3748, June\
    \ 2004.\n   [RFC3920]    Saint-Andre, P., Ed., \"Extensible Messaging and Presence\n\
    \                Protocol (XMPP): Core\", RFC 3920, October 2004.\n   [RFC3922]\
    \    Saint-Andre, P., \"Mapping the Extensible Messaging and\n               \
    \ Presence Protocol (XMPP) to Common Presence and Instant\n                Messaging\
    \ (CPIM)\", RFC 3922, October 2004.\n   [RFC4011]    Waldbusser, S., Saperia,\
    \ J., and T. Hongal, \"Policy\n                Based Management MIB\", RFC 4011,\
    \ March 2005.\n   [RFC4013]    Zeilenga, K., \"SASLprep: Stringprep Profile for\
    \ User\n                Names and Passwords\", RFC 4013, February 2005.\n   [RFC4279]\
    \    Eronen, P. and H. Tschofenig, \"Pre-Shared Key\n                Ciphersuites\
    \ for Transport Layer Security (TLS)\",\n                RFC 4279, December 2005.\n\
    \   [RFC4314]    Melnikov, A., \"IMAP4 Access Control List (ACL)\n           \
    \     Extension\", RFC 4314, December 2005.\n   [RFC4422]    Melnikov, A. and\
    \ K. Zeilenga, \"Simple Authentication and\n                Security Layer (SASL)\"\
    , RFC 4422, June 2006.\n   [RFC4505]    Zeilenga, K., \"Anonymous Simple Authentication\
    \ and\n                Security Layer (SASL) Mechanism\", RFC 4505, June 2006.\n\
    \   [RFC4511]    Sermersheim, J., \"Lightweight Directory Access Protocol\n  \
    \              (LDAP): The Protocol\", RFC 4511, June 2006.\n   [RFC4513]    Harrison,\
    \ R., \"Lightweight Directory Access Protocol\n                (LDAP): Authentication\
    \ Methods and Security Mechanisms\",\n                RFC 4513, June 2006.\n \
    \  [RFC4518]    Zeilenga, K., \"Lightweight Directory Access Protocol\n      \
    \          (LDAP): Internationalized String Preparation\", RFC 4518,\n       \
    \         June 2006.\n   [RFC4616]    Zeilenga, K., \"The PLAIN Simple Authentication\
    \ and\n                Security Layer (SASL) Mechanism\", RFC 4616, August 2006.\n\
    \   [RFC4643]    Vinocur, J. and K. Murchison, \"Network News Transfer\n     \
    \           Protocol (NNTP) Extension for Authentication\", RFC 4643,\n      \
    \          October 2006.\n   [RFC4683]    Park, J., Lee, J., Lee, H., Park, S.,\
    \ and T. Polk,\n                \"Internet X.509 Public Key Infrastructure Subject\n\
    \                Identification Method (SIM)\", RFC 4683, October 2006.\n   [RFC4690]\
    \    Klensin, J., Faltstrom, P., Karp, C., and IAB, \"Review\n               \
    \ and Recommendations for Internationalized Domain Names\n                (IDNs)\"\
    , RFC 4690, September 2006.\n   [RFC4790]    Newman, C., Duerst, M., and A. Gulbrandsen,\
    \ \"Internet\n                Application Protocol Collation Registry\", RFC 4790,\n\
    \                March 2007.\n   [RFC4954]    Siemborski, R. and A. Melnikov,\
    \ \"SMTP Service Extension\n                for Authentication\", RFC 4954, July\
    \ 2007.\n   [RFC5034]    Siemborski, R. and A. Menon-Sen, \"The Post Office\n\
    \                Protocol (POP3) Simple Authentication and Security Layer\n  \
    \              (SASL) Authentication Mechanism\", RFC 5034, July 2007.\n   [RFC5051]\
    \    Crispin, M., \"i;unicode-casemap - Simple Unicode\n                Collation\
    \ Algorithm\", RFC 5051, October 2007.\n   [RFC5054]    Taylor, D., Wu, T., Mavrogiannopoulos,\
    \ N., and T.\n                Perrin, \"Using the Secure Remote Password (SRP)\
    \ Protocol\n                for TLS Authentication\", RFC 5054, November 2007.\n\
    \   [RFC5122]    Saint-Andre, P., \"Internationalized Resource Identifiers\n \
    \               (IRIs) and Uniform Resource Identifiers (URIs) for the\n     \
    \           Extensible Messaging and Presence Protocol (XMPP)\",\n           \
    \     RFC 5122, February 2008.\n   [RFC5280]    Cooper, D., Santesson, S., Farrell,\
    \ S., Boeyen, S.,\n                Housley, R., and W. Polk, \"Internet X.509\
    \ Public Key\n                Infrastructure Certificate and Certificate Revocation\n\
    \                List (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5456]    Spencer,\
    \ M., Capouch, B., Guy, E., Miller, F., and K.\n                Shumard, \"IAX:\
    \ Inter-Asterisk eXchange Version 2\",\n                RFC 5456, February 2010.\n\
    \   [RFC5661]    Shepler, S., Eisler, M., and D. Noveck, \"Network File\n    \
    \            System (NFS) Version 4 Minor Version 1 Protocol\",\n            \
    \    RFC 5661, January 2010.\n   [RFC5802]    Newman, C., Menon-Sen, A., Melnikov,\
    \ A., and N.\n                Williams, \"Salted Challenge Response Authentication\n\
    \                Mechanism (SCRAM) SASL and GSS-API Mechanisms\",\n          \
    \      RFC 5802, July 2010.\n   [RFC5804]    Melnikov, A. and T. Martin, \"A Protocol\
    \ for Remotely\n                Managing Sieve Scripts\", RFC 5804, July 2010.\n\
    \   [RFC5890]    Klensin, J., \"Internationalized Domain Names for\n         \
    \       Applications (IDNA): Definitions and Document\n                Framework\"\
    , RFC 5890, August 2010.\n   [RFC5891]    Klensin, J., \"Internationalized Domain\
    \ Names in\n                Applications (IDNA): Protocol\", RFC 5891, August\
    \ 2010.\n   [RFC5892]    Faltstrom, P., \"The Unicode Code Points and\n      \
    \          Internationalized Domain Names for Applications (IDNA)\",\n       \
    \         RFC 5892, August 2010.\n   [RFC5893]    Alvestrand, H. and C. Karp,\
    \ \"Right-to-Left Scripts for\n                Internationalized Domain Names\
    \ for Applications (IDNA)\",\n                RFC 5893, August 2010.\n   [RFC5894]\
    \    Klensin, J., \"Internationalized Domain Names for\n                Applications\
    \ (IDNA): Background, Explanation, and\n                Rationale\", RFC 5894,\
    \ August 2010.\n   [RFC5895]    Resnick, P. and P. Hoffman, \"Mapping Characters\
    \ for\n                Internationalized Domain Names in Applications (IDNA)\n\
    \                2008\", RFC 5895, September 2010.\n   [RFC6120]    Saint-Andre,\
    \ P., \"Extensible Messaging and Presence\n                Protocol (XMPP): Core\"\
    , RFC 6120, March 2011.\n   [RFC6365]    Hoffman, P. and J. Klensin, \"Terminology\
    \ Used in\n                Internationalization in the IETF\", BCP 166, RFC 6365,\n\
    \                September 2011.\n   [RFC6452]    Faltstrom, P. and P. Hoffman,\
    \ \"The Unicode Code Points\n                and Internationalized Domain Names\
    \ for Applications\n                (IDNA) - Unicode 6.0\", RFC 6452, November\
    \ 2011.\n   [UAX15]      \"Unicode Standard Annex #15: Unicode Normalization\n\
    \                Forms\", UAX 15, September 2009.\n   [Unicode61]  The Unicode\
    \ Consortium.  The Unicode Standard, Version\n                6.1.0, (Mountain\
    \ View, CA: The Unicode Consortium, 2012.\n                ISBN 978-1-936213-02-3).\n\
    \                <http://www.unicode.org/versions/Unicode6.1.0/>.\n"
- title: Appendix A.  Classification of Stringprep Profiles
  contents:
  - "Appendix A.  Classification of Stringprep Profiles\n   A number of the known\
    \ cases of Stringprep use were evaluated during\n   the preparation of this document.\
    \  The known cases are here described\n   in two ways.  The types of identifiers\
    \ the protocol uses is first\n   called out in the ID type column (from Section\
    \ 5.1.1) using the short\n   forms \"a\" for Absolute, \"d\" for Definite, and\
    \ \"i\" for Indefinite.\n   Next, there is a column that contains an \"i\" if\
    \ the protocol string\n   comes from user input, an \"o\" if the protocol string\
    \ becomes user-\n   facing output, \"b\" if both are true, and \"n\" if neither\
    \ is true.\n                         +------+--------+-------+\n             \
    \            |  RFC | IDtype | User? |\n                         +------+--------+-------+\n\
    \                         | 3722 |    a   |   b   |\n                        \
    \ | 3748 |    -   |   -   |\n                         | 3920 |   a,d  |   b  \
    \ |\n                         | 4505 |    a   |   i   |\n                    \
    \     | 4314 |   a,d  |   b   |\n                         | 4954 |   a,d  |  \
    \ b   |\n                         | 5034 |   a,d  |   b   |\n                \
    \         | 5804 |   a,d  |   b   |\n                         +------+--------+-------+\n\
    \                                  Table 1\n"
- title: Appendix B.  Evaluation of Stringprep Profiles
  contents:
  - "Appendix B.  Evaluation of Stringprep Profiles\n   This section is a summary\
    \ of evaluation of Stringprep profiles that\n   was done to get a good understanding\
    \ of the usage of Stringprep.\n   This summary is by no means normative nor the\
    \ actual evaluations\n   themselves.  A template was used for reviewers to get\
    \ a coherent view\n   of all evaluations.\n"
- title: 'B.1.  iSCSI Stringprep Profile: RFC 3720, RFC 3721, RFC 3722'
  contents:
  - "B.1.  iSCSI Stringprep Profile: RFC 3720, RFC 3721, RFC 3722\n   Description:\
    \  An iSCSI session consists of an initiator (i.e., host\n      or server that\
    \ uses storage) communicating with a target (i.e., a\n      storage array or other\
    \ system that provides storage).  Both the\n      iSCSI initiator and target are\
    \ named by iSCSI names.  The iSCSI\n      Stringprep profile is used for iSCSI\
    \ names.\n   How it is used:  iSCSI initiators and targets (see above).  They\
    \ can\n      also be used to identify SCSI ports (these are software entities\n\
    \      in the iSCSI protocol, not hardware ports) and iSCSI logical units\n  \
    \    (storage volumes), although both are unusual in practice.\n   What entities\
    \ create these identifiers?  Generally, a human user (1)\n      configures an\
    \ automated system (2) that generates the names.\n      Advance configuration\
    \ of the system is required due to the\n      embedded use of external unique\
    \ identifier (from the DNS or IEEE).\n   How is the string input in the system?\
    \  Keyboard and copy-paste are\n      common.  Copy-paste is common because iSCSI\
    \ names are long enough\n      to be problematic for humans to remember, causing\
    \ use of email,\n      sneaker-net, text files, etc., to avoid mistype mistakes.\n\
    \   Where do we place the dividing line between user interface and\n      protocol?\
    \  The iSCSI protocol requires that all\n      internationalization string preparation\
    \ occur in the user\n      interface.  The iSCSI protocol treats iSCSI names as\
    \ opaque\n      identifiers that are compared byte-by-byte for equality. iSCSI\n\
    \      names are generally not checked for correct formatting by the\n      protocol.\n\
    \   What entities enforce the rules?  There are no iSCSI-specific\n      enforcement\
    \ entities, although the use of unique identifier\n      information in the names\
    \ relies on DNS registrars and the IEEE\n      Registration Authority.\n   Comparison:\
    \  Byte-by-byte.\n   Case Folding, Sensitivity, Preservation:  Case folding is\
    \ required\n      for the code blocks specified in RFC 3454, Table B.2.  The overall\n\
    \      iSCSI naming system (UI + protocol) is case-insensitive.\n   What is the\
    \ impact if the comparison results in a false positive?\n      Potential access\
    \ to the wrong storage.\n      -  If the initiator has no access to the wrong\
    \ storage, an\n         authentication failure is the probable result.\n     \
    \ -  If the initiator has access to the wrong storage, the resulting\n       \
    \  misidentification could result in use of the wrong data and\n         possible\
    \ corruption of stored data.\n   What is the impact if the comparison results\
    \ in a false negative?\n      Denial of authorized storage access.\n   What are\
    \ the security impacts?  iSCSI names may be used as the\n      authentication\
    \ identities for storage systems.  Comparison\n      problems could result in\
    \ authentication problems, although note\n      that authentication failure ameliorates\
    \ some of the false positive\n      cases.\n   Normalization:  NFKC, as specified\
    \ by RFC 3454.\n   Mapping:  Yes, as specified by Table B.1 in RFC 3454.\n   Disallowed\
    \ Characters:  Only the following characters are allowed:\n      -  ASCII dash,\
    \ dot, colon\n      -  ASCII lowercase letters and digits\n      -  Unicode lowercase\
    \ characters as specified by RFC 3454.\n      All other characters are disallowed.\n\
    \   Which other strings or identifiers are these most similar to?\n      None\
    \ -- iSCSI names are unique to iSCSI.\n   Are these strings or identifiers sometimes\
    \ the same as strings or\n      identifiers from other protocols?  No.\n   Does\
    \ the identifier have internal structure that needs to be\n      respected?  Yes.\
    \ ASCII dot, dash, and colon are used for internal\n      name structure.  These\
    \ are not reserved characters, in that they\n      can occur in the name in locations\
    \ other than those used for\n      structuring purposes (e.g., only the first\
    \ occurrence of a colon\n      character is structural, others are not).\n   How\
    \ are users exposed to these strings?  How are they published?\n      iSCSI names\
    \ appear in server and storage system configuration\n      interfaces.  They also\
    \ appear in system logs.\n   Is the string / identifier used as input to other\
    \ operations?\n      Effectively, no.  The rarely used port and logical unit names\n\
    \      involve concatenation, which effectively extends a unique iSCSI\n     \
    \ name for a target to uniquely identify something within that\n      target.\n\
    \   How much tolerance for change from existing Stringprep approach?\n      Good\
    \ tolerance; the community would prefer that\n      internationalization experts\
    \ solve internationalization problems.\n   How strong a desire for change (e.g.,\
    \ for Unicode agility)?  Unicode\n      agility is desired, in principle, as long\
    \ as nothing significant\n      breaks.\n"
- title: 'B.2.  SMTP/POP3/ManageSieve Stringprep Profiles: RFC 4954, RFC 5034,'
  contents:
  - "B.2.  SMTP/POP3/ManageSieve Stringprep Profiles: RFC 4954, RFC 5034,\n      RFC\
    \ 5804\n   Description:  Authorization identity (user identifier) exchanged\n\
    \      during SASL authentication: AUTH (SMTP/POP3) or AUTHENTICATE\n      (ManageSieve)\
    \ command.\n   How It's Used:  Used for proxy authorization, e.g., to [lawfully]\n\
    \      impersonate a particular user after a privileged authentication.\n   Who\
    \ Generates It:\n      -  Typically generated by email system administrators using\
    \ some\n         tools/conventions, sometimes from some backend database.\n  \
    \    -  In some setups, human users can register their own usernames\n       \
    \  (e.g., webmail self-registration).\n   User Input Methods:\n      -  typing\
    \ or selecting from a list\n      -  copy and paste\n      -  voice input\n  \
    \    -  in configuration files or on the command line\n   Enforcement:  Rules\
    \ enforced by server / add-on service (e.g.,\n      gateway service) on registration\
    \ of account.\n   Comparison Method:  \"Type 1\" (byte-for-byte) or \"Type 2\"\
    \ (compare by\n      a common algorithm that everyone agrees on (e.g., normalize\
    \ and\n      then compare the result byte-by-byte).\n   Case Folding, Sensitivity,\
    \ Preservation:  Most likely case-sensitive.\n      Exact requirements on case-sensitivity/case-preservation\
    \ depend on\n      a specific implementation, e.g., an implementation might treat\
    \ all\n      user identifiers as case-insensitive (or case-insensitive for\n \
    \     US-ASCII subset only).\n   Impact of Comparison:  False positives: an unauthorized\
    \ user is\n      allowed email service access (login).  False negatives: an\n\
    \      authorized user is denied email service access.\n   Normalization:  NFKC\
    \ (as per RFC 4013).\n   Mapping:  (see Section 2 of RFC 4013 for the full list)\
    \ Non-ASCII\n      spaces are mapped to space, etc.\n   Disallowed Characters:\
    \  (see Section 2 of RFC 4013 for the full list)\n      Unicode Control characters,\
    \ etc.\n   String Classes:  Simple username.  See Section 2 of RFC 4013 for\n\
    \      details on restrictions.  Note that some implementations allow\n      spaces\
    \ in these.  While implementations are not required to use a\n      specific format,\
    \ an authorization identity frequently has the same\n      format as an email\
    \ address (and Email Address Internationalization\n      (EAI) email address in\
    \ the future), or as a left hand side of an\n      email address.  Note: whatever\
    \ is recommended for SMTP/POP/\n      ManageSieve authorization identity should\
    \ also be used for IMAP\n      authorization identities, as IMAP/POP3/SMTP/ManageSieve\
    \ are\n      frequently implemented together.\n   Internal Structure:  None\n\
    \   User Output:  Unlikely, but possible.  For example, if it is the same\n  \
    \    as an email address.\n   Operations:  Sometimes concatenated with other data\
    \ and then used as\n      input to a cryptographic hash function.\n   How much\
    \ tolerance for change from existing Stringprep approach?  Not\n      sure.\n\
    \   Background Information:\n      In RFC 5034, when describing the POP3 AUTH\
    \ command:\n         The authorization identity generated by the SASL exchange\
    \ is a\n         simple username, and SHOULD use the SASLprep profile (see\n \
    \        [RFC4013]) of the StringPrep algorithm (see [RFC3454]) to\n         prepare\
    \ these names for matching.  If preparation of the\n         authorization identity\
    \ fails or results in an empty string\n         (unless it was transmitted as\
    \ the empty string), the server\n         MUST fail the authentication.\n    \
    \  In RFC 4954, when describing the SMTP AUTH command:\n         The authorization\
    \ identity generated by this [SASL] exchange is\n         a \"simple username\"\
    \ (in the sense defined in [SASLprep]), and\n         both client and server SHOULD\
    \ (*) use the [SASLprep] profile of\n         the [StringPrep] algorithm to prepare\
    \ these names for\n         transmission or comparison.  If preparation of the\n\
    \         authorization identity fails or results in an empty string\n       \
    \  (unless it was transmitted as the empty string), the server\n         MUST\
    \ fail the authentication.\n         (*) Note: Future revision of this specification\
    \ may change this\n         requirement to MUST.  Currently, the SHOULD is used\
    \ in order to\n         avoid breaking the majority of existing implementations.\n\
    \      In RFC 5804, when describing the ManageSieve AUTHENTICATE command:\n  \
    \       The authorization identity generated by this [SASL] exchange is\n    \
    \     a \"simple username\" (in the sense defined in [SASLprep]), and\n      \
    \   both client and server MUST use the [SASLprep] profile of the\n         [StringPrep]\
    \ algorithm to prepare these names for transmission\n         or comparison. \
    \ If preparation of the authorization identity\n         fails or results in an\
    \ empty string (unless it was transmitted\n         as the empty string), the\
    \ server MUST fail the authentication.\n"
- title: 'B.3.  IMAP Stringprep Profiles for Usernames: RFC 4314, RFC 5738'
  contents:
  - "B.3.  IMAP Stringprep Profiles for Usernames: RFC 4314, RFC 5738\n   Evaluation\
    \ Note:  These documents have 2 types of strings (usernames\n      and passwords),\
    \ so there are two separate templates.\n   Description:  \"username\" parameter\
    \ to the IMAP LOGIN command,\n      identifiers in IMAP Access Control List (ACL)\
    \ commands.  Note that\n      any valid username is also an IMAP ACL identifier,\
    \ but IMAP ACL\n      identifiers can include other things like the name of a\
    \ group of\n      users.\n   How It's Used:  Used for authentication (Usernames),\
    \ or in IMAP\n      Access Control Lists (Usernames or Group names).\n   Who Generates\
    \ It:\n      -  Typically generated by email system administrators using some\n\
    \         tools/conventions, sometimes from some backend database.\n      -  In\
    \ some setups, human users can register own usernames (e.g.,\n         webmail\
    \ self-registration).\n   User Input Methods:\n      -  typing or selecting from\
    \ a list\n      -  copy and paste\n      -  voice input\n      -  in configuration\
    \ files or on the command line\n   Enforcement:  Rules enforced by server / add-on\
    \ service (e.g.,\n      gateway service) on registration of account.\n   Comparison\
    \ Method:  \"Type 1\" (byte-for-byte) or \"Type 2\" (compare by\n      a common\
    \ algorithm that everyone agrees on (e.g., normalize and\n      then compare the\
    \ result byte-by-byte).\n   Case Folding, Sensitivity, Preservation:  Most likely\
    \ case-sensitive.\n      Exact requirements on case-sensitivity/case-preservation\
    \ depend on\n      a specific implementation, e.g., an implementation might treat\
    \ all\n      user identifiers as case-insensitive (or case-insensitive for\n \
    \     US-ASCII subset only).\n   Impact of Comparison:  False positives: an unauthorized\
    \ user is\n      allowed IMAP access (login), privileges improperly granted (e.g.,\n\
    \      access to a specific mailbox, ability to manage ACLs for a\n      mailbox).\
    \  False negatives: an authorized user is denied IMAP\n      access, unable to\
    \ use granted privileges (e.g., access to a\n      specific mailbox, ability to\
    \ manage ACLs for a mailbox).\n   Normalization:  NFKC (as per RFC 4013)\n   Mapping:\
    \  (see Section 2 of RFC 4013 for the full list) Non-ASCII\n      spaces are mapped\
    \ to space.\n   Disallowed Characters:  (see Section 2 of RFC 4013 for the full\
    \ list)\n      Unicode Control characters, etc.\n   String Classes:  Simple username.\
    \  See Section 2 of RFC 4013 for\n      details on restrictions.  Note that some\
    \ implementations allow\n      spaces in these.  While IMAP implementations are\
    \ not required to\n      use a specific format, an IMAP username frequently has\
    \ the same\n      format as an email address (and EAI email address in the future),\n\
    \      or as a left hand side of an email address.  Note: whatever is\n      recommended\
    \ for the IMAP username should also be used for\n      ManageSieve, POP3 and SMTP\
    \ authorization identities, as IMAP/POP3/\n      SMTP/ManageSieve are frequently\
    \ implemented together.\n   Internal Structure:  None.\n   User Output:  Unlikely,\
    \ but possible.  For example, if it is the same\n      as an email address, access\
    \ control lists (e.g. in IMAP ACL\n      extension), both when managing membership\
    \ and listing membership\n      of existing access control lists.  Often shows\
    \ up as mailbox names\n      (under Other Users IMAP namespace).\n   Operations:\
    \  Sometimes concatenated with other data and then used as\n      input to a cryptographic\
    \ hash function.\n   How much tolerance for change from existing Stringprep approach?\
    \  Not\n      sure.  Non-ASCII IMAP usernames are currently prohibited by IMAP\n\
    \      (RFC 3501).  However, they are allowed when used in IMAP ACL\n      extension.\n"
- title: 'B.4.  IMAP Stringprep Profiles for Passwords: RFC 5738'
  contents:
  - "B.4.  IMAP Stringprep Profiles for Passwords: RFC 5738\n   Description:  \"Password\"\
    \ parameter to the IMAP LOGIN command.\n   How It's Used:  Used for authentication\
    \ (Passwords).\n   Who Generates It:  Either generated by email system administrators\n\
    \      using some tools/conventions, or specified by the human user.\n   User\
    \ Input Methods:\n      -  typing or selecting from a list\n      -  copy and\
    \ paste\n      -  voice input\n      -  in configuration files or on the command\
    \ line\n   Enforcement:  Rules enforced by server / add-on service (e.g.,\n  \
    \    gateway service or backend database) on registration of account.\n   Comparison\
    \ Method:  \"Type 1\" (byte-for-byte).\n   Case Folding, Sensitivity, Preservation:\
    \  Most likely case-sensitive.\n   Impact of Comparison:  False positives: an\
    \ unauthorized user is\n      allowed IMAP access (login).  False negatives: an\
    \ authorized user\n      is denied IMAP access.\n   Normalization:  NFKC (as per\
    \ RFC 4013).\n   Mapping:  (see Section 2 of RFC 4013 for the full list) Non-ASCII\n\
    \      spaces are mapped to space.\n   Disallowed Characters:  (see Section 2\
    \ of RFC 4013 for the full list)\n      Unicode Control characters, etc.\n   String\
    \ Classes:  Currently defined as \"simple username\" (see Section\n      2 of\
    \ RFC 4013 for details on restrictions); however, this is\n      likely to be\
    \ a different class from usernames.  Note that some\n      implementations allow\
    \ spaces in these.  Password in all email\n      related protocols should be treated\
    \ in the same way.  Same\n      passwords are frequently shared with web, IM,\
    \ and etc.\n      applications.\n   Internal Structure:  None.\n   User Output:\
    \  Text of email messages (e.g. in \"you forgot your\n      password\" email messages),\
    \ web page / directory, side of the bus /\n      in ads -- possible.\n   Operations:\
    \  Sometimes concatenated with other data and then used as\n      input to a cryptographic\
    \ hash function.  Frequently stored as is,\n      or hashed.\n   How much tolerance\
    \ for change from existing Stringprep approach?  Not\n      sure.  Non-ASCII IMAP\
    \ passwords are currently prohibited by IMAP\n      (RFC 3501); however, they\
    \ are likely to be in widespread use.\n   Background Information:\n      RFC 5738,\
    \ Section 5 (\"UTF8=USER Capability\"):\n         If the \"UTF8=USER\" capability\
    \ is advertised, that indicates the\n         server accepts UTF-8 user names\
    \ and passwords and applies\n         SASLprep [RFC4013] to both arguments of\
    \ the LOGIN command.  The\n         server MUST reject UTF-8 that fails to comply\
    \ with the formal\n         syntax in RFC 3629 [RFC3629] or if it encounters Unicode\n\
    \         characters listed in Section 2.3 of SASLprep RFC 4013\n         [RFC4013].\n\
    \      RFC 4314, Section 3 (\"Access control management commands and\n      responses\"\
    ):\n         Servers, when processing a command that has an identifier as a\n\
    \         parameter (i.e., any of SETACL, DELETEACL, and LISTRIGHTS\n        \
    \ commands), SHOULD first prepare the received identifier using\n         \"SASLprep\"\
    \ profile [SASLprep] of the \"stringprep\" algorithm\n         [Stringprep]. \
    \ If the preparation of the identifier fails or\n         results in an empty\
    \ string, the server MUST refuse to perform\n         the command with a BAD response.\
    \  Note that Section 6\n         recommends additional identifier's verification\
    \ steps.\n      RFC 4314, Section 6 (\"Security Considerations\"):\n         This\
    \ document relies on [SASLprep] to describe steps required\n         to perform\
    \ identifier canonicalization (preparation).  The\n         preparation algorithm\
    \ in SASLprep was specifically designed\n         such that its output is canonical,\
    \ and it is well-formed.\n         However, due to an anomaly [PR29] in the specification\
    \ of\n         Unicode normalization, canonical equivalence is not guaranteed\n\
    \         for a select few character sequences.  Identifiers prepared\n      \
    \   with SASLprep can be stored and returned by an ACL server.  The\n        \
    \ anomaly affects ACL manipulation and evaluation of identifiers\n         containing\
    \ the selected character sequences.  These sequences,\n         however, do not\
    \ appear in well-formed text.  In order to\n         address this problem, an\
    \ ACL server MAY reject identifiers\n         containing sequences described in\
    \ [PR29] by sending the tagged\n         BAD response.  This is in addition to\
    \ the requirement to reject\n         identifiers that fail SASLprep preparation\
    \ as described in\n         Section 3.\n"
- title: 'B.5.  Anonymous SASL Stringprep Profiles: RFC 4505'
  contents:
  - "B.5.  Anonymous SASL Stringprep Profiles: RFC 4505\n   Description:  RFC 4505\
    \ defines a \"trace\" field:\n   Comparison:  this field is not intended for comparison\
    \ (only used for\n      logging)\n   Case folding; case-sensitivity, preserve\
    \ case:  No case folding/\n      case-sensitive\n   Do users input the strings\
    \ directly?  Yes. Possibly entered in\n      configuration UIs, or on a command\
    \ line.  Can also be stored in\n      configuration files.  The value can also\
    \ be automatically\n      generated by clients (e.g., a fixed string is used,\
    \ or a user's\n      email address).\n   How users input strings?  Keyboard/voice,\
    \ stylus (pick from a list).\n      Copy-paste - possibly.\n   Normalization:\
    \  None.\n   Disallowed Characters:  Control characters are disallowed.  (See\n\
    \      Section 3 of RFC 4505).\n   Which other strings or identifiers are these\
    \ most similar to?\n      RFC 4505 says that the trace \"should take one of two\
    \ forms: an\n      Internet email address, or an opaque string that does not contain\n\
    \      the '@' (U+0040) character and that can be interpreted by the\n      system\
    \ administrator of the client's domain\".  In practice, this\n      is a free-form\
    \ text, so it belongs to a different class from\n      \"email address\" or \"\
    username\".\n   Are these strings or identifiers sometimes the same as strings\
    \ or\n      identifiers from other protocols (e.g., does an IM system\n      sometimes\
    \ use the same credentials database for authentication as\n      an email system)?\
    \  Yes: see above.  However, there is no strong\n      need to keep them consistent\
    \ in the future.\n   How are users exposed to these strings, how are they published?\
    \  No.\n      However, the value can be seen in server logs.\n   Impacts of false\
    \ positives and false negatives:\n      False positive: a user can be confused\
    \ with another user.\n      False negative: two distinct users are treated as\
    \ the same user.\n      But note that the trace field is not authenticated, so\
    \ it can be\n      easily falsified.\n   Tolerance of changes in the community:\
    \  The community would be\n      flexible.\n   Delimiters:  No internal structure,\
    \ but see comments above about\n      frequent use of email addresses.\n   Background\
    \ Information:\n      RFC 4505, Section 2 (\"The Anonymous Mechanism\"):\n   \
    \   The mechanism consists of a single message from the client to the\n      server.\
    \  The client may include in this message trace information\n      in the form\
    \ of a string of [UTF-8]-encoded [Unicode] characters\n      prepared in accordance\
    \ with [StringPrep] and the \"trace\"\n      stringprep profile defined in Section\
    \ 3 of this document.  The\n      trace information, which has no semantical value,\
    \ should take one\n      of two forms: an Internet email address, or an opaque\
    \ string that\n      does not contain the '@' (U+0040) character and that can\
    \ be\n      interpreted by the system administrator of the client's domain.\n\
    \      For privacy reasons, an Internet email address or other\n      information\
    \ identifying the user should only be used with\n      permission from the user.\n\
    \      RFC 4505, Section 3 ('The \"trace\" Profile of \"Stringprep\"'):\n    \
    \  This section defines the \"trace\" profile of [StringPrep].  This\n      profile\
    \ is designed for use with the SASL ANONYMOUS Mechanism.\n      Specifically,\
    \ the client is to prepare the <message> production in\n      accordance with\
    \ this profile.\n      The character repertoire of this profile is Unicode 3.2\
    \ [Unicode].\n      No mapping is required by this profile.\n      No Unicode\
    \ normalization is required by this profile.\n      The list of unassigned code\
    \ points for this profile is that\n      provided in Appendix A of [StringPrep].\
    \  Unassigned code points\n      are not prohibited.\n      Characters from the\
    \ following tables of [StringPrep] are\n      prohibited:\n         - C.2.1 (ASCII\
    \ control characters)\n         - C.2.2 (Non-ASCII control characters)\n     \
    \    - C.3 (Private use characters)\n         - C.4 (Non-character code points)\n\
    \         - C.5 (Surrogate codes)\n         - C.6 (Inappropriate for plain text)\n\
    \         - C.8 (Change display properties are deprecated)\n         - C.9 (Tagging\
    \ characters)\n   No additional characters are prohibited.\n   This profile requires\
    \ bidirectional character checking per Section 6\n   of [StringPrep].\n"
- title: 'B.6.  XMPP Stringprep Profiles for Nodeprep: RFC 3920'
  contents:
  - "B.6.  XMPP Stringprep Profiles for Nodeprep: RFC 3920\n   Description:  Localpart\
    \ of JabberID (\"JID\"), as in:\n      localpart@domainpart/resourcepart\n   How\
    \ It's Used:\n      -  Usernames (e.g., stpeter@jabber.org)\n      -  Chatroom\
    \ names (e.g., precis@jabber.ietf.org)\n      -  Publish-subscribe nodes\n   \
    \   -  Bot names\n   Who Generates It:\n      -  Typically, end users via an XMPP\
    \ client\n      -  Sometimes created in an automated fashion\n   User Input Methods:\n\
    \      -  typing\n      -  copy and paste\n      -  voice input\n      -  clicking\
    \ a URI/IRI\n   Enforcement:  Rules enforced by server / add-on service (e.g.,\n\
    \      chatroom service) on registration of account, creation of room,\n     \
    \ etc.\n   Comparison Method:  \"Type 2\" (common algorithm)\n   Case Folding,\
    \ Sensitivity, Preservation:\n      -  Strings are always folded to lowercase\n\
    \      -  Case is not preserved\n   Impact of Comparison:\n      False positives:\n\
    \      -  unable to authenticate at server (or authenticate to wrong\n       \
    \  account)\n      -  add wrong person to buddy list\n      -  join the wrong\
    \ chatroom\n      -  improperly grant privileges (e.g., chatroom admin)\n    \
    \  -  subscribe to wrong pubsub node\n      -  interact with wrong bot\n     \
    \ -  allow communication with blocked entity\n      False negatives:\n      -\
    \  unable to authenticate\n      -  unable to add someone to buddy list\n    \
    \  -  unable to join desired chatroom\n      -  unable to use granted privileges\
    \ (e.g., chatroom admin)\n      -  unable to subscribe to desired pubsub node\n\
    \      -  unable to interact with desired bot\n      -  disallow communication\
    \ with unblocked entity\n   Normalization:  NFKC\n   Mapping:  Spaces are mapped\
    \ to nothing\n   Disallowed Characters:  \",&,',/,:,<,>,@\n   String Classes:\n\
    \      -  Often similar to generic username\n      -  Often similar to localpart\
    \ of email address\n      -  Sometimes same as localpart of email address\n  \
    \ Internal Structure:  None\n   User Output:\n      -  vCard\n      -  email signature\n\
    \      -  web page / directory\n      -  text of message (e.g., in a chatroom)\n\
    \   Operations:  Sometimes concatenated with other data and then used as\n   \
    \   input to a cryptographic hash function\n"
- title: 'B.7.  XMPP Stringprep Profiles for Resourceprep: RFC 3920'
  contents:
  - "B.7.  XMPP Stringprep Profiles for Resourceprep: RFC 3920\n   Description:\n\
    \      -  Resourcepart of JabberID (\"JID\"), as in:\n         localpart@domainpart/resourcepart\n\
    \      -  Typically free-form text\n   How It's Used:\n      -  Device / session\
    \ names (e.g., stpeter@jabber.org/Home)\n      -  Nicknames (e.g., precis@jabber.ietf.org/StPeter)\n\
    \   Who Generates It:\n      -  Often human users via an XMPP client\n      -\
    \  Often generated in an automated fashion by client or server\n   User Input\
    \ Methods:\n      -  typing\n      -  copy and paste\n      -  voice input\n \
    \     -  clicking a URI/IRI\n   Enforcement:  Rules enforced by server / add-on\
    \ service (e.g.,\n      chatroom service) on account login, joining a chatroom,\
    \ etc.\n   Comparison Method:  \"Type 2\" (byte-for-byte)\n   Case Folding, Sensitivity,\
    \ Preservation:\n      -  Strings are never folded\n      -  Case is preserved\n\
    \   Impact of Comparison:\n      False positives:\n      -  interact with wrong\
    \ device (e.g., for file transfer or voice\n         call)\n      -  interact\
    \ with wrong chatroom participant\n      -  improperly grant privileges (e.g.,\
    \ chatroom moderator)\n      -  allow communication with blocked entity\n    \
    \  False negatives:\n      -  unable to choose desired chatroom nickname\n   \
    \   -  unable to use granted privileges (e.g., chatroom moderator)\n      -  disallow\
    \ communication with unblocked entity\n   Normalization:  NFKC\n   Mapping:  Spaces\
    \ are mapped to nothing\n   Disallowed Characters:  None\n   String Classes: \
    \ Basically a free-form identifier\n   Internal Structure:  None\n   User Output:\n\
    \      -  text of message (e.g., in a chatroom)\n      -  device names often not\
    \ exposed to human users\n   Operations:  Sometimes concatenated with other data\
    \ and then used as\n      input to a cryptographic hash function\n"
- title: 'B.8.  EAP Stringprep Profiles: RFC 3748'
  contents:
  - "B.8.  EAP Stringprep Profiles: RFC 3748\n   Description:  RFC 3748, Section 5,\
    \ references Stringprep, but the WG\n      did not agree with the text (was added\
    \ by IESG) and there are no\n      known implementations that use Stringprep.\
    \  The main problem with\n      that text is that the use of strings is a per-method\
    \ concept, not\n      a generic EAP concept and so RFC 3748 itself does not really\
    \ use\n      Stringprep, but individual EAP methods could.  As such, the\n   \
    \   answers to the template questions are mostly not applicable, but a\n     \
    \ few answers are universal across methods.  The list of IANA\n      registered\
    \ EAP methods is at\n      <http://www.iana.org/assignments/eap-numbers/eap-numbers.xml>.\n\
    \   Comparison Methods:  n/a (per-method)\n   Case Folding, Case-Sensitivity,\
    \ Case Preservation:  n/a (per-method)\n   Impact of comparison:  A false positive\
    \ results in unauthorized\n      network access (and possibly theft of service\
    \ if some else is\n      billed).  A false negative results in lack of authorized\
    \ network\n      access (no connectivity).\n   User input:  n/a (per-method)\n\
    \   Normalization:  n/a (per-method)\n   Mapping:  n/a (per-method)\n   Disallowed\
    \ characters:  n/a (per-method)\n   String classes:  Although some EAP methods\
    \ may use a syntax similar\n      to other types of identifiers, EAP mandates\
    \ that the actual values\n      must not be assumed to be identifiers usable with\
    \ anything else.\n   Internal structure:  n/a (per-method)\n   User output:  Identifiers\
    \ are never human displayed except perhaps as\n      they're typed by a human.\n\
    \   Operations:  n/a (per-method)\n   Community considerations:  There is no resistance\
    \ to change for the\n      base EAP protocol (as noted, the WG didn't want the\
    \ existing\n      text).  However, actual use of Stringprep, if any, within specific\n\
    \      EAP methods may have resistance.  It is currently unknown whether\n   \
    \   any EAP methods use Stringprep.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marc Blanchet\n   Viagenie\n   246 Aberdeen\n   Quebec,\
    \ QC  G1R 2E1\n   Canada\n   EMail: Marc.Blanchet@viagenie.ca\n   URI:   http://viagenie.ca\n\
    \   Andrew Sullivan\n   Dyn, Inc.\n   150 Dow St\n   Manchester, NH  03101\n \
    \  U.S.A.\n   EMail: asullivan@dyn.com\n"
