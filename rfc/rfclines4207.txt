Synchronous Optical Network (SONET)/Synchronous Digital Hierarchy (SDH) Encoding for Link Management Protocol (LMP)
This document details the Synchronous Optical Network (SONET)/Synchronous Digital Hierarchy (SDH) technology specific information needed when sending Link Management Protocol (LMP) test messages.
, multiple physical resources that interconnect Label Switching Routers (LSRs) can be combined to form a single traffic engineering (TE) link for the purposes of path computation and signaling.
These resources may represent one or more physical links that connect the LSRs, or they may represent a Label Switched Path (LSP) if LSP hierarchy [RFC4206] is used.
The management of TE links is not restricted to in band messaging, but instead can be done using out of band techniques.
The Link Management Protocol (LMP)
[RFC4204] has been developed as part of the Generalized MPLS (GMPLS) protocol suite to manage TE links.
LMP currently consists of four main procedures, of which the first two are mandatory and the last two are optional: 1.
Fault management Control channel management is used to establish and maintain control channel connectivity between adjacent nodes.
This is done using a Config message exchange followed by a lightweight keep alive message exchange.
Link property correlation is used to aggregate multiple data links into a single TE Link and to synchronize the link properties.
Link verification is used to verify the physical connectivity of the data links and to exchange the Interface Ids of the data links.
Fault management is primarily used to suppress alarms and to localize failures in both opaque and transparent networks.
When LMP is used with SONET/SDH, however, the fault management procedures may not be needed as existing SONET/SDH mechanisms can be used.
In this document, the SONET/SDH technology specific information for LMP is defined.
Specifically, the SONET/SDH test procedures used for link verification and link property correlation are detailed.
These procedures include the trace correlation transport mechanism (defined for J0, J1, J2) that supports a separation of the transport and control plane identifiers.
The latter procedure requires a new trace monitoring function that is discussed in this document.
Once the data links have been verified, they can be grouped to form TE links.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The reader is assumed to be familiar with the terminology in [RFC4204], [G.707], and [T1.105].
The following abbreviations are used in this document:
Synchronous Transport Module ( N) (SDH).
Synchronous Transport Signal Level N (SONET).
In [RFC4204], a link verification procedure is defined whereby Test messages are transmitted in band over the data links.
This is used for data plane discovery,
(Interface Ids are used in GMPLS signaling, either as port labels
[RFC3471] or component link identifiers [RFC4201], depending on the configuration), and physical connectivity verification.
Multiple data links can be verified using a single verification procedure; the correlation is done using the Verify
that is assigned to the procedure.
As part of the link verification procedure, a BeginVerify message exchange is used to agree upon parameters for the Test procedure.
This can be initiated by sending a BeginVerify message over the control channel.
This message includes a BEGIN VERIFY object that contains a number of fields specifying, among other things, the transmission (bit) rate, encoding type, and transport mechanisms for the Test Messages.
If the remote node receives a BeginVerify message and is ready to begin the procedure, it sends a BeginVerifyAck message specifying the desired transport mechanism for the Test messages.
The remote node also assigns a Verify Id to the procedure and includes it in the BeginVerifyAck message.
The transmission rate of the data link over which the Test Messages will be transmitted is represented in IEEE floating point format using a 32 bit number field and expressed in bytes per second.
See [RFC3471] for values defined for SONET/SDH.
The encoding type identifies the encoding supported by an interface.
The defined encoding is consistent with the LSP Encoding Type as defined in [RFC3471].
For SONET/SDH, this value must equal the value given for "SDH ITU T G.707/SONET ANSI T1.105".
The transport mechanism is defined using the Verify Transport Mechanism bit mask.
The scope of this bit mask is restricted to the link encoding type.
Multiple bits may be set when this field is included in the BeginVerify message; however, only one bit may be set when it is included in the BeginVerifyAck message.
In the following subsection, the various options for Verify Transport Mechanism are defined when the encoding is SONET/SDH.
The trace correlation transport mechanism (defined for J0, J1, J2) supports a separation of the transport and control plane identifiers.
This field is 16 bits in length.
In this document, the flags for SONET/SDH encoding are defined.
Note that all values are defined in network byte order (i.e., big endian byte order). 0x0001
Test Message over the Section/RS
DCC Capable of transmitting Test Messages using the DCC Section
Overhead bytes with bit oriented High Level Data Link Control (HDLC)
The Test Message is sent as defined in [RFC4204].
Test Message over the Line/MS DCC Capable of transmitting Test Messages using the DCC Line/MS Overhead bytes with bit oriented HDLC framing format [RFC1662].
The Test Message is sent as defined in [RFC4204]. 0x0008
J0 trace: J0 Section Trace Correlation Capable of transmitting SONET/SDH Section/RS trace over J0 Section/RS overhead byte as defined in [T1.105] and [G.707].
The Test Message is not transmitted using the J0 bytes (i.e., over the data link), but is sent over the control channel and correlated for consistency to the received J0 pattern.
In order to get the mapping between the Interface
Id over which the J0 Test Message is sent and the J0 pattern sent in band
, the transmitting node must provide the correlation between this pattern and the J0 Test Message.
This correlation is done using the TRACE object as defined in Section 4.
The format of the Test Message is as follows:
J1 Path Trace Correlation Capable of transmitting SONET/SDH STS SPE/HOVC Path trace over J1 Path overhead byte as defined in [T1.105] and [G.707].
The Test Message is not transmitted using the J1 bytes (i.e., over the data link), but is sent over the control channel and correlated for consistency to the received J1 pattern.
In order to get the mapping between the Interface
Id over which the J1 Test Message is sent and the J1 pattern sent in band
, the transmitting node must provide the correlation between this pattern and the J1 Test Message.
This correlation is done using the TRACE object as defined in Section 4.
The Test Message format is identical to that defined above in J0 trace.
J2 Path Trace Correlation Capable of transmitting
SONET/SDH VT SPE/LOVC Path trace over J2 Path
overhead byte as defined in [T1.105] and [G.707].
The Test Message is not transmitted using the J2 bytes (i.e., over the data link), but is sent over the control channel and correlated for consistency to the received J2 pattern.
In order to get the mapping between the Interface
Id over which the J2 Test Message is sent and the J2 pattern sent in band
, the transmitting node must provide the correlation between this pattern and the J2 Test Message.
This correlation is done using the TRACE object as defined in Section 4.
The Test Message format is identical to that defined above in J0 trace.
The trace monitoring features described in this section allow a node to do trace monitoring by using the SONET/SDH capabilities.
A node may request its neighbor (the remote node) to monitor a link for a specific pattern in the overhead using the TraceMonitor Message.
An example of this overhead is the SONET Section Trace message transmitted in the J0 byte.
If the actual trace message does not match the expected trace message, the remote node MUST report the mismatch condition.
A node may request the value of the current trace message on a given data link using the TraceReq Message.
A node may request a remote node to send a specific trace message over a data link using the InsertTrace Message.
The TraceMonitor message (Message Type 21) is sent over the control channel and is used to request the remote node to monitor a data link for a specific trace value.
This value is inserted in the <TRACE> object.
The format of the TraceMonitor message is as follows:
The above transmission order SHOULD be followed.
The remote node MUST respond to a TraceMonitor message with either a TraceMonitorAck or TraceMonitorNack Message.
The type of the trace message.
The following values are defined.
All other values are reserved.
SONET Section Trace (J0 Byte)
SONET Path Trace (J1 Byte)
SONET Path Trace (J2 Byte)
SDH Section Trace (J0 Byte)
SDH Path Trace (J1 Byte)
SDH Path Trace (J2 Byte)
This is the length in bytes of the trace message (as specified by the Trace Type).
Trace Message: This is the value of the expected message to be received in band.
The valid length and value combinations are determined by the specific technology: for SONET see [T1.105] and for SDH see [G.707].
The message MUST be padded with zeros to a 32 bit boundary, if necessary.
Trace Length does not include padding zeroes.
The TraceMonitorAck message (Message Type 22) is used to acknowledge receipt of the TraceMonitor message and indicate that all of the TRACE Objects in the TraceMonitor message have been received and processed correctly (i.e., no Trace Mismatch).
The format is as follows:
The above transmission order SHOULD be followed.
The MESSAGE ID ACK object is defined in [RFC4204].
The contents of the MESSAGE ID ACK object MUST be obtained from the TraceMonitor message being acknowledged.
The TraceMonitorNack message (Message Type 23) is used to acknowledge receipt of the TraceMonitor message and indicate that the TRACE Object in the TraceMonitor message was not processed correctly.
This could be because the trace monitoring requested is not supported or there was an error in the TRACE object value(s).
The format is as follows:
<MESSAGE ID ACK> <ERROR CODE
The above transmission order SHOULD be followed.
The MESSAGE ID ACK and ERROR CODE objects are defined in [RFC4204].
The contents of the MESSAGE ID ACK object MUST be obtained from the TraceMonitor message being acknowledged.
If the Trace type is not supported, the ERROR CODE MUST indicate "Unsupported Trace Type" defined in Section 4.1.3.1.
If the TRACE object was not equal to the value seen in the trace, the TraceMonitorNack message MUST include the ERROR CODE indicating "Invalid Trace Message".
The TraceMismatch message (see Section 4.1.4) SHOULD NOT be sent as a result of the mismatch.
The TraceMonitorNack message uses a new ERROR CODE C Type defined in Section 4.1.3.1.
ERROR CODE Class C Type   3, TRACE ERROR
The following new error code bit values are defined: 0x01
All other values are Reserved.
Multiple bits may be set to indicate multiple errors.
The TraceMismatch message (Message Type 24) is sent over the control channel and is used to report a trace mismatch on a data link for which trace monitoring was requested.
The format is as follows:
The above transmission order SHOULD be followed.
A neighboring node that receives a TraceMismatch message MUST respond with a TraceMismatchAck message.
The LOCAL INTERFACE ID object is defined in [RFC4204].
The LOCAL INTERFACE ID in this message is the local Interface Id of the data link that has a trace mismatch.
A trace mismatch for multiple LOCAL INTERFACE IDs may be reported in the same message.
The TraceMismatchAck message (Message Type 25) is used to acknowledge receipt of a TraceMismatch message.
The format is as follows:
The MESSAGE ID ACK object is defined in [RFC4204].
The contents of the MESSAGE ID ACK object MUST be obtained from the TraceMismatch message being acknowledged.
The TraceReq message (Message Type 26) is sent over the control channel and is used to request the current trace value of a data link.
The above transmission order SHOULD be followed.
The format of the TRACE REQ object is as follows:
Trace Type: 16 bits Defined in Section 4.1.1.1.
Reserved: 16 bits This field MUST be set to zero when sent and ignored when received 4.1.7.
The TraceReport message (Message Type 27) is sent over the control channel after receiving a TraceReq message.
The TraceReport message MUST include a TRACE Object (as described in Section 4.1.1.1) for the requested data link.
The MESSAGE ID ACK object is defined in [RFC4204].
The contents of the MESSAGE ID ACK object MUST be obtained from the TraceReq message being acknowledged.
The TraceReqNack message (Message Type 28) is sent over the control channel after receiving a TraceReq message.
<MESSAGE ID ACK> <ERROR CODE
The above transmission order SHOULD be followed.
The MESSAGE ID ACK object is defined in [RFC4204].
The contents of the MESSAGE ID ACK object MUST be obtained from the TraceReq message being acknowledged.
The TraceReqNack message MUST include an ERROR CODE Object (as defined in Section 4.1.3.1) for the requested data link.
The InsertTrace message (Message Type 29) is sent over the control channel and is used to request a remote node to send a specific trace message over a data link (this assumes that the remote knows the mapping between the local and remote interface Ids before fulfilling such request).
The format is as follows:
The above transmission order SHOULD be followed.
A node that receives an InsertTrace message MUST respond with either an InsertTraceAck or an InsertTraceNack Message.
Once the InsertTraceAck message is received, the TraceMismatch message (see Section 4.1.4) is used to indicate a trace mismatch has occurred.
The MESSAGE ID object is defined in [RFC4204].
The InsertTraceAck message (Message Type 30) is used to acknowledge receipt of the InsertTrace message and indicate that the TRACE Object in the InsertTrace message has been received and processed correctly (i.e., no Trace Mismatch).
The format is as follows:
The MESSAGE ID ACK object is defined in [RFC4204].
The contents of the MESSAGE ID ACK object MUST be obtained from the InsertTrace message being acknowledged.
The InsertTraceNack message (Message Type 31) is used to acknowledge receipt of the InsertTrace message and to indicate that the TRACE Object in the InsertTrace message was not processed correctly.
This could be because the trace monitoring requested is not supported or there was an error in the value.
The format is as follows:
<MESSAGE ID ACK> <ERROR CODE
The above transmission order SHOULD be followed.
The MESSAGE ID ACK object is defined in [RFC4204].
The InsertTraceNack message MUST include an ERROR CODE Object (as defined in Section 4.1.3.1) for the requested data link.
Security Considerations LMP message security uses IPsec as described in [RFC4204].
This document introduces no other new security considerations not covered in [RFC4204].
IANA Considerations LMP [RFC4204] defines the following name spaces and how IANA can make assignments in those namespaces:
LMP Object Class type (C Type)
unique within the Object Class.
LMP Sub object Class type (Type) unique within the Object Class.
This memo introduces the following new assignments:
LMP Object Class name space and Class type (C Type):
