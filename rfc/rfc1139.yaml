- title: __initial_text__
  contents:
  - '                     An Echo Function for ISO 8473

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an echo function for the connection-less\
    \ network\n   layer protocol.  This memo is not intended to compete with an ISO\n\
    \   standard.  This is a Proposed Elective Standard for the Internet.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines an echo function for the connection-less network\n\
    \   layer protocol.  Two mechanisms are introduced that may be used to\n   implement\
    \ the echo function.  The first mechanism is recommended as\n   an interim solution\
    \ for the Internet community.  The second mechanism\n   will be progressed to\
    \ the ANSI X3S3.3 working group for consideration\n   as a work item.\n   When\
    \ an ISO standard is adopted that provides functionality similar\n   to that described\
    \ by this memo, then this memo will become obsolete\n   and superceded by the\
    \ ISO standard.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The OSI Connection-less network layer protocol (ISO 8473)\
    \ defines a\n   means for transmitting and relaying data and error report PDUs\n\
    \   through an OSI internet.  Unfortunately, the world that these packets\n  \
    \ travel through is imperfect.  Gateways and links may fail.  This memo\n   defines\
    \ an echo function to be used in the debugging and testing of\n   the OSI network\
    \ layer.\n   Network management protocols can be used to determine the state of\
    \ a\n   gateway or link.  However, since these protocols themselves utilize a\n\
    \   protocol that may experience packet loss, it cannot be guaranteed\n   that\
    \ the network management applications can be utilized.  A simple\n   mechanism\
    \ in the network layer is required so that systems can be\n   probed to determine\
    \ if the lowest levels of the networking software\n   are operating correctly.\
    \  This mechanism is not intended to compete\n   with or replace network management;\
    \ rather it should be viewed as an\n   addition to the facilities offered by network\
    \ management.\n   There are three important issues to consider when defining an\
    \ echo\n   extension to ISO 8473: complexity, code-path divergence, and backward\n\
    \   compatibility.  The complexity of the echo facility must be kept low.\n  \
    \ If it is not, then there is a good chance that the facility will not\n   be\
    \ universally provided.  The code-path consideration requires that\n   the echo\
    \ path through a system is identical (or very close) to the\n   path used by normal\
    \ data.  An echo path must succeed and fail in\n   unison with the normal data\
    \ path or else it will not provide a useful\n   diagnostic tool.\n   Backward\
    \ compatibility is an important consideration whenever a\n   change is made to\
    \ a protocol.  For this reason, this memo defines two\n   implementation mechanisms:\
    \ the short term approach and the long term\n   approach.  The short term approach\
    \ will produce echo packets that are\n   indistinguishable from normal data ISO\
    \ 8473 PDUs.  These echo packets\n   may be switched through ISO 8473 routers\
    \ that do not implement the\n   echo function.  The short term approach will be\
    \ adopted as an\n   Elective Internet Standard because it is backward compatible\
    \ with ISO\n   8473.  However, due to its nature, the short term approach will\
    \ never\n   be incorporated into future versions of ISO 8473.\n   The long term\
    \ approach will produce echo packets that are not\n   compatible with the existing\
    \ standard.  However, the long term\n   approach may be acceptable by ISO as an\
    \ addendum to ISO 8473.  In\n   this event, backward compatibility will no longer\
    \ be an issue.  At\n   that juncture, the short term approach defined by this\
    \ memo will be\n   obsolete and superseded by the ISO addendum.\n"
- title: 2.  The Generic Echo Function
  contents:
  - "2.  The Generic Echo Function\n   The following section will describe the echo\
    \ function in a generic\n   fashion.  This memo defines an echo-request entity.\
    \  The function of\n   the echo-request entity is to accept an incoming echo-request\
    \ PDU,\n   perform some processing, and generate an echo-reply PDU.  Depending\n\
    \   on the echo implementation, the echo-request entity may be thought of\n  \
    \ as an entity that exists above the network layer, or as an entity\n   that co-exists\
    \ with the network layer.  Subsequent sections will\n   detail the short and long\
    \ term implementation mechanisms.\n   For the purposes of this memo, the term\
    \ \"ping\" shall be used to mean\n   the act of transmitting an echo-request PDU\
    \ to a remote system (with\n   the expectation that an echo-reply PDU will be\
    \ sent back to the\n   transmitter).\n   2.1  The Echo Request\n      When a system\
    \ decides to ping a remote system, an echo-request is\n      built.  All fields\
    \ of the PDU header are assigned normal values\n      (see implementation specific\
    \ sections for more information).  The\n      address of the system to be pinged\
    \ is inserted as the destination\n      NSAP address.  The rules of segmentation\
    \ defined for a DT PDU also\n      apply to the echo-request PDU.\n      The echo-request\
    \ is switched through the network toward its\n      destination.  Upon reaching\
    \ the destination system, the PDU is\n      processed according to normal processing\
    \ rules.  At the end of the\n      input processing, the echo-request PDU is delivered\
    \ to the echo-\n      request entity.\n      The echo-request entity will build\
    \ and dispatch the echo-reply\n      PDU.  This is a new PDU.  Except as noted\
    \ below, this second PDU\n      is built using the normal construction procedures.\
    \  The\n      destination address of the echo-reply PDU is taken from the source\n\
    \      address of the echo-request PDU.  Most options present in the\n      echo-request\
    \ PDU are copied into the echo-reply PDU (see\n      implementation notes for\
    \ more information).\n   2.2  The Echo Reply\n      The entire echo-request PDU\
    \ is included in the data portion of the\n      echo-reply PDU.  This includes\
    \ the echo-request PDU header as well\n      as the any data that accompanies\
    \ the echo-request PDU.  The entire\n      echo-request PDU is included in the\
    \ echo-reply so that fields such\n      as the echo-request lifetime may be examined\
    \ when the reply is\n      received.  After the echo-reply PDU is built, it is\
    \ transmitted\n      toward the new destination (the original source of the echo-\n\
    \      request).  The rules of segmentation defined for a DT PDU also\n      apply\
    \ to the echo-reply PDU.\n      The echo-reply PDU is relayed through the network\
    \ toward its\n      destination.  Upon reaching its destination, it is processed\
    \ by\n      the PDU input function and delivered to the entity that created\n\
    \      the echo-request.\n"
- title: 3.  The Short Term Implementation Mechanism
  contents:
  - "3.  The Short Term Implementation Mechanism\n   The short term implementation\
    \ mechanism  will use an ISO 8473 normal\n   data PDU as the echo-request and\
    \ echo-reply PDU.  A special NSAP\n   selector value will be used to identify\
    \ the echo-request and insure\n   that it reaches the echo-request entity.  This\
    \ selector value is\n   known as the echo-request selector.  In addition, an echo-reply\n\
    \   selector is defined so that the echo-reply PDU may be identified at\n   the\
    \ destination system.  It is important to note that (except for the\n   NSAP selector)\
    \ the echo-request PDU and the echo-reply PDU are\n   indistinguishable from a\
    \ DT PDU.\n   This approach has the advantage that it is simple and does not allow\n\
    \   any code-path divergence.  In addition, this approach requires that\n   only\
    \ the systems which wish to generate an echo-reply PDU must\n   change.  Systems\
    \ that do not adhere to this memo will not generate an\n   echo-reply PDU, but\
    \ will still switch other echo-request and echo-\n   reply PDUs.\n   3.1  The\
    \ Echo Request\n      An echo-request is built using the normal DT PDU construction\n\
    \      procedures.  All fields of the PDU header are assigned normal\n      values\
    \ (see implementation notes).  The address of the system to\n      be pinged is\
    \ inserted as the destination NSAP address.  The\n      selector field of the\
    \ destination NSAP address must contain the\n      echo-request selector.  The\
    \ selector field of the source NSAP\n      address must contain the echo-reply\
    \ selector.\n   3.2  The Echo Reply\n      Except as noted below (see implementation\
    \ notes), an echo-reply is\n      built using the normal DT PDU construction procedures.\
    \  The\n      destination NSAP address is taken from the source address of the\n\
    \      echo-request PDU.\n   3.3  Use of NSAP Selectors\n      The choice of echo-request\
    \ and echo-reply NSAP selectors is a\n      local matter.  However, to insure\
    \ interoperability, and as an\n      interim measure until use of the directory\
    \ service becomes\n      widespread, this memo will recommend the following default\
    \ values\n      (specified in decimal):\n         Echo Request Selector - 30\n\
    \         Echo Reply Selector - 31\n"
- title: 4.  The Long Term Implementation Mechanism
  contents:
  - "4.  The Long Term Implementation Mechanism\n   The long term implementation mechanism\
    \ will define two new 8473 PDU\n   types: ERQ (echo-request) and ERP (echo-reply).\
    \  With the exception\n   of a new type code, these PDUs will be identical to\
    \ the DT PDU in\n   every respect.\n   4.1  The Echo Request\n      The type code\
    \ for the ERQ PDU is decimal 30.\n   4.2  The Echo Reply\n      The type code\
    \ for the ERP PDU is decimal 31.\n"
- title: 5.  Implementation Notes
  contents:
  - "5.  Implementation Notes\n   The following notes are an integral part of memo.\
    \  It is important\n   that implementors take heed of these points.\n   5.1  Discarding\
    \ PDUs\n      The rules used for discarding a DT PDU (8473, sec 6.9 - sec 6.10)\n\
    \      are applied when an echo-request or echo-reply is discarded.\n   5.2  Error\
    \ Report Flag\n      The error report flag may be set on the echo-request PDU,\
    \ the\n      echo-reply PDU, or both.  If an echo-request is discarded, the\n\
    \      associated ER PDU will be sent to the echo-request source address\n   \
    \   on the originating machine.  If an echo-reply is discarded, the\n      associated\
    \ ER PDU will be sent to the echo-reply source address.\n      In general, this\
    \ will be the address of the echo-request entity.\n      It should be noted that\
    \ the echo-request entity and the originator\n      of the echo-request PDU are\
    \ not required to process ER PDUs.\n   5.3  Use of the Lifetime Field\n      The\
    \ lifetime field of the echo-request and echo-reply PDU should\n      be set to\
    \ the value normally used for a DT PDU.  Note: although\n      this memo does\
    \ not prohibit the generation of a PDU with a\n      smaller-than-normal lifetime\
    \ field, this memo explicitly does not\n      attempt to define a mechanism for\
    \ varying the lifetime field set\n      in the echo-reply PDU.  This memo recommends\
    \ that the normal DT\n      lifetime value should be set in the echo-request and\
    \ echo-reply\n      PDU.\n   5.4  Transfer of Options from the echo-request\n\
    \        PDU to the echo-reply PDU\n      With two exceptions, all options present\
    \ in the echo-request\n      header are copied directly into the echo-reply header.\
    \  The two\n      exceptions are the record route option and the source route\n\
    \      option.  A record route option present in an echo-request PDU is\n    \
    \  copied into the echo-reply PDU, but the routes recorded in the\n      option\
    \ are \"erased\" by resetting the second octet of the option to\n      3.  This\
    \ allows the entire record route option space to be used by\n      the echo-reply\
    \ PDU.  Note: the record route present on the echo-\n      request is not lost\
    \ because the echo-request PDU is wholly\n      contained in the data part of\
    \ the echo-reply PDU.\n      The second exception concerns the source route option.\
    \  A source\n      route option present on the echo-request PDU is not copied\
    \ into\n      the echo-reply PDU.\n   5.5  Use of the Priority Option\n      If\
    \ the priority option is included, it will normally be set to\n      value 0 (default\
    \ priority).  This memo allows for priority values\n      higher than 0 to be\
    \ set in the echo-request or echo-reply header,\n      but cautions against this\
    \ practice.\n   5.6  Use of the Source Route Option\n      Use of the source route\
    \ option in ISO 8473 may cause packets to\n      loop until their lifetime expires.\
    \  For this reason, this memo\n      recommends against the use of the source\
    \ route option in either an\n      echo-request or echo-reply PDU.  If the source\
    \ route option is\n      used to specify the route that the echo-request PDU takes\
    \ toward\n      its destination, this memo does not recommend the use of an\n\
    \      automatically generated source route on the echo-reply PDU.\n   5.7  Transmission\
    \ of Multiple Echo Requests\n      The echo function may be utilized by more than\
    \ one process on any\n      individual machine.  The mechanism by which multiple\
    \ echo-requests\n      and echo-replies are correlated between multiple processes\
    \ on a\n      single machine is a local matter and not defined by this memo.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not addressed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Robert A. Hagens\n   Computer Science Department\n   1210\
    \ West Dayton Street\n   Madison, WI  53706\n   Phone: (608) 262-1204\n   EMail:\
    \  hagens@CS.WISC.EDU\n"
