- title: __initial_text__
  contents:
  - "        Using Extensible Messaging and Presence Protocol (XMPP)\n           \
    \        for Security Information Exchange\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use the Extensible Messaging and\n\
    \   Presence Protocol (XMPP) to collect and distribute security incident\n   reports\
    \ and other security-relevant information between network-\n   connected devices,\
    \ primarily for the purpose of communication among\n   Computer Security Incident\
    \ Response Teams and associated entities.\n   To illustrate the principles involved,\
    \ this document describes such a\n   usage for the Incident Object Description\
    \ Exchange Format (IODEF).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8600.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Architecture  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  Workflow  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   5.  Service Discovery . . . . . . . . . . . . . . . . . . . . .\
    \ .   8\n   6.  Publish-Subscribe . . . . . . . . . . . . . . . . . . . . . .\
    \  10\n   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13\n\
    \   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  14\n  \
    \   8.1.  Trust Model . . . . . . . . . . . . . . . . . . . . . . .  14\n    \
    \ 8.2.  Threat Model  . . . . . . . . . . . . . . . . . . . . . .  16\n     8.3.\
    \  Countermeasures . . . . . . . . . . . . . . . . . . . . .  20\n     8.4.  Summary\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  23\n   9.  Privacy Considerations\
    \  . . . . . . . . . . . . . . . . . . .  24\n   10. Operations and Management\
    \ Considerations  . . . . . . . . . .  25\n   11. References  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . .  25\n     11.1.  Normative References . .\
    \ . . . . . . . . . . . . . . . .  25\n     11.2.  Informative References . .\
    \ . . . . . . . . . . . . . . .  27\n   Acknowledgements  . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  27\n   Authors' Addresses  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines an architecture, i.e., \"XMPP-Grid\"\
    , as a method\n   for using the Extensible Messaging and Presence Protocol (XMPP)\n\
    \   [RFC6120] to collect and distribute security incident reports and\n   other\
    \ security-relevant information among network platforms,\n   endpoints, and any\
    \ other network-connected device, primarily for the\n   purpose of communication\
    \ among Computer Security Incident Response\n   Teams and associated entities.\
    \  In effect, this document specifies an\n   Applicability Statement ([RFC2026],\
    \ Section 3.2) that defines how to\n   use XMPP for the exchange of security notifications\
    \ on a controlled-\n   access network among authorized entities.\n   Among other\
    \ things, XMPP provides a publish-subscribe service\n   [XEP-0060] that acts as\
    \ a broker, enabling control-plane functions by\n   which entities can discover\
    \ available information to be published or\n   consumed.  Although such information\
    \ can take the form of any\n   structured data (XML, JSON, etc.), this document\
    \ illustrates the\n   principles of XMPP-Grid with examples that use the Incident\
    \ Object\n   Description Exchange Format (IODEF) [RFC7970].  That is, while other\n\
    \   security information formats can be shared using XMPP, this document\n   uses\
    \ IODEF as one such example format that can be published and\n   consumed using\
    \ XMPP.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses XMPP terminology defined in [RFC6120]\
    \ and\n   [XEP-0060].  Because the intended audience for this document is those\n\
    \   who implement and deploy security reporting systems, mappings are\n   provided\
    \ for the benefit of XMPP developers and operators.\n   Broker:  A specific type\
    \ of controller containing control-plane\n      functions; as used here, the term\
    \ refers to an XMPP publish-\n      subscribe service.\n   Broker Flow:  A method\
    \ by which security incident reports and other\n      security-relevant information\
    \ are published and consumed in a\n      mediated fashion through a Broker.  In\
    \ this flow, the Broker\n      handles authorization of Consumers and Providers\
    \ to Topics,\n      receives messages from Providers, and delivers published messages\n\
    \      to Consumers.\n   Consumer:  An entity that contains functions to receive\
    \ information\n      from other components; as used here, the term refers to an\
    \ XMPP\n      publish-subscribe Subscriber.\n   Controller:  A component containing\
    \ control-plane functions that\n      manage and facilitate information sharing\
    \ or execute on security\n      functions; as used here, the term refers to an\
    \ XMPP server, which\n      provides core message delivery [RFC6120] used by publish-subscribe\n\
    \      entities.\n   Node:  The XMPP term for a Topic.\n   Platform:  Any entity\
    \ that connects to the XMPP-Grid in order to\n      publish or consume security-relevant\
    \ information.\n   Provider:  An entity that contains functions to provide information\n\
    \      to other components; as used here, the term refers to an XMPP\n      publish-subscribe\
    \ Publisher.\n   Topic:  A contextual information channel created on a Broker\
    \ on which\n      messages generated by a Provider are propagated in real time\
    \ to\n      one or more Consumers.  Each Topic is limited to a specific type\n\
    \      and format of security data (e.g., IODEF namespace) and provides\n    \
    \  an XMPP interface by which the data can be obtained.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in\
    \ this document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]\
    \ when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 3.  Architecture
  contents:
  - "3.  Architecture\n   The following figure illustrates the architecture of XMPP-Grid.\n\
    \             +--------------------------------------+\n             | +--------------------------------------+\n\
    \             | | +--------------------------------------+\n             | | |\
    \                                      |\n             +-| |             Platforms\
    \                |\n               +-|                                      |\n\
    \                 +--------------------------------------+\n                 \
    \  /   \\         /   \\            /   \\\n                  /  C  \\       /\
    \     \\          /     \\\n                  -  o  -       -  d  -          -\
    \     -\n                   ||n||A        | a  |B          |   |C\n          \
    \         ||t||         | t  |           |   |\n                  -  r  -    \
    \   -  a  -           |   |\n                  \\  o  /       \\     /       \
    \    |   |\n                   \\ l /         \\   /            |   |\n      \
    \          /|---------------------|\\         |   |\n         /|----/        \
    \                 \\--------| d |--|\\\n        /     /        Controller    \
    \     \\ ctrl  | a |    \\\n        \\     \\        & Broker           / plane\
    \ | t |    /\n         \\|----\\                         /--------| a |--|/\n\
    \                \\|---------------------|/         |   |\n                  \
    \ /   \\         /   \\            |   |\n                  /  C  \\       / \
    \    \\           |   |\n                  -  o  -       -  d  -           | \
    \  |\n                   ||n||A        | a |B           |   |C\n             \
    \      ||t||         | t |            |   |\n                  -  r  -       -\
    \  a  -          -     -\n                  \\  o  /       \\     /          \\\
    \     /\n                   \\ l /         \\   /            \\   /\n        \
    \         +------------------------------------+\n                 |         \
    \                           |-+\n                 |            Platforms     \
    \          | |\n                 |                                    | |-+\n\
    \                 +------------------------------------+ | |\n               \
    \    +------------------------------------+ |\n                     +------------------------------------+\n\
    \                     Figure 1: XMPP-Grid Architecture\n   Platforms connect to\
    \ the Controller (XMPP server) to authenticate and\n   then establish appropriate\
    \ authorizations to be a Provider or\n   Consumer of topics of interest at the\
    \ Broker.  The control-plane\n   messaging is established through XMPP and is\
    \ shown as \"A\" (control-\n   plane interface) in Figure 1.  Authorized Platforms\
    \ can then share\n   data either through the Broker (shown as \"B\" in Figure\
    \ 1) or, in some\n   cases, directly (shown as \"C\" in Figure 1).  This document\
    \ focuses\n   primarily on the Broker Flow for information sharing (\"direct flow\"\
    \n   interactions can be used for specialized purposes, such as bulk data\n  \
    \ transfer, but methods for doing so are outside the scope of this\n   document).\n"
- title: 4.  Workflow
  contents:
  - "4.  Workflow\n   Implementations of XMPP-Grid adhere to the following workflow:\n\
    \   a.  A Platform with a source of security data requests connection to\n   \
    \    the XMPP-Grid via a Controller.\n   b.  The Controller authenticates the\
    \ Platform.\n   c.  The Platform establishes authorized privileges (e.g., privilege\n\
    \       to publish and/or subscribe to one or more Topics) with a Broker.\n  \
    \ d.  The Platform can publish security incident reports and other\n       security-relevant\
    \ information to a Topic, subscribe to a Topic,\n       query a Topic, or perform\
    \ any combination of these operations.\n   e.  A Provider unicasts its Topic updates\
    \ to the Grid in real time\n       through a Broker.  The Broker handles replication\
    \ and\n       distribution of the Topic to Consumers.  A Provider can publish\n\
    \       the same or different data to multiple Topics.\n   f.  Any Platform on\
    \ the Grid can subscribe to any Topic published to\n       the Grid (as permitted\
    \ by the authorization policy) and (as\n       Consumers) will then receive a\
    \ continual, real-time stream of\n       updates from the Topics to which it is\
    \ subscribed.\n   The general workflow is summarized in the figure below.\n  \
    \ +--------------+        +------------+           +---------------+\n   | IODEF\
    \ Client |        | Controller |           | IODEF Service |\n   |  (Consumer)\
    \  |        |  & Broker  |           |  (Provider)   |\n   +--------------+  \
    \      +------------+           +---------------+\n           |              \
    \        |                         |\n           |  Establish XMPP      |    \
    \                     |\n           |  Client Session      |                 \
    \        |\n           |  (RFC 6120)          |                         |\n  \
    \         |--------------------->|                         |\n           |   \
    \                   | Establish XMPP          |\n           |                \
    \      | Client Session          |\n           |                      | (RFC 6120)\
    \              |\n           |                      |<------------------------|\n\
    \           |                      | Request Topic Creation  |\n           | \
    \                     | (XEP-0060)              |\n           |              \
    \        |<------------------------|\n           |                      | Topic\
    \ Creation Success  |\n           |                      | (XEP-0060)        \
    \      |\n           |                      |------------------------>|\n    \
    \       | Request Topic List   |                         |\n           | (XEP-0030)\
    \           |                         |\n           |--------------------->| \
    \                        |\n           | Return Topic List    |              \
    \           |\n           | (XEP-0030)           |                         |\n\
    \           |<---------------------|                         |\n           | \
    \                     |                         |\n           | Query Each Topic\
    \     |                         |\n           | (XEP-0030)           |       \
    \                  |\n           |--------------------->|                    \
    \     |\n           | Return Topic Data    |                         |\n     \
    \      | Including Topic Type |                         |\n           | (XEP-0030)\
    \           |                         |\n           |<---------------------| \
    \                        |\n           |                      |              \
    \           |\n           | Subscribe to IODEF   |                         |\n\
    \           | Topic (XEP-0060)     |                         |\n           |--------------------->|\
    \                         |\n           | Subscription Success |             \
    \            |\n           | (XEP-0060)           |                         |\n\
    \           |<---------------------|                         |\n           | \
    \                     | Publish IODEF Incident  |\n           |              \
    \        | (XEP-0060)              |\n           | Receive IODEF        |<------------------------|\n\
    \           | Incident (XEP-0060)  |                         |\n           |<---------------------|\
    \                         |\n           |                      |             \
    \            |\n                     Figure 2: IODEF Example Workflow\n   XMPP-Grid\
    \ implementations MUST adhere to the mandatory-to-implement\n   and mandatory-to-negotiate\
    \ features as defined in [RFC6120].\n   Similarly, implementations MUST implement\
    \ the publish-subscribe\n   extension [XEP-0060] to facilitate the asynchronous\
    \ sharing of\n   information.  Implementations SHOULD implement Service Discovery\
    \ as\n   defined in [XEP-0030] to facilitate the means to dynamically discover\n\
    \   the available information and namespaces (Topics) to be published or\n   consumed.\
    \  Care should be taken with implementations if their\n   deployments allow for\
    \ a large number of Topics.  The result set\n   management as defined in [XEP-0059]\
    \ SHOULD be used to allow the\n   requesting entity to explicitly request Service\
    \ Discovery result sets\n   to be returned in pages or a limited size, if the\
    \ discovery results\n   are larger in size.  Note that the control plane may optionally\
    \ also\n   implement [XEP-0203] to facilitate delayed delivery of messages to\n\
    \   the connected consumer as described in [XEP-0060].  Since information\n  \
    \ may be timely and sensitive, capability providers should communicate\n   to\
    \ the Controller whether its messages can be cached for delayed\n   delivery during\
    \ configuration; such a function is out of scope for\n   this document.\n   The\
    \ following sections provide protocol examples for the service\n   discovery and\
    \ publish-subscribe parts of the workflow.\n"
- title: 5.  Service Discovery
  contents:
  - "5.  Service Discovery\n   Using the XMPP service discovery extension [XEP-0030],\
    \ a Controller\n   enables Platforms to discover what information can be consumed\n\
    \   through the Broker and at which Topics.  Platforms could use\n   [XEP-0059]\
    \ to restrict the size of the result sets the Controller\n   returns in a Service\
    \ Discovery response.  As an example, the\n   Controller at 'security-grid.example'\
    \ might provide a Broker at\n   'broker.security-grid.example', which hosts a\
    \ number of Topics.  A\n   Platform at 'xmpp-grid-client@mile-host.example' would\
    \ query the\n   Broker about its available Topics by sending an XMPP \"disco#items\"\
    \n   request to the Broker:\n   <iq type='get'\n       from='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n\
    \       to='broker.security-grid.example'\n       id='B3C17F7B-B9EF-4ABA-B08D-805DA9F34626'>\n\
    \     <query xmlns='http://jabber.org/protocol/disco#items'/>\n   </iq>\n   The\
    \ Broker responds with the Topics it hosts:\n   <iq type='result'\n       from='broker.security-grid.example'\n\
    \       to='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n       id='B3C17F7B-B9EF-4ABA-B08D-805DA9F34626'>\n\
    \     <query xmlns='http://jabber.org/protocol/disco#items'>\n       <item node='NEA1'\n\
    \             name='Endpoint Posture Information'\n             jid='broker.security-grid.example'/>\n\
    \       <item node='MILEHost'\n             name='MILE Host Data'\n          \
    \   jid='broker.security-grid.example'/>\n     </query>\n   </iq>\n   In order\
    \ to determine the exact nature of each Topic (i.e., in order\n   to find Topics\
    \ that publish incidents in the IODEF format), a\n   Platform would send an XMPP\
    \ \"disco#info\" request to each Topic:\n   <iq type='get'\n       from='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n\
    \       to='broker.security-grid.example'\n       id='D367D4ED-2795-489C-A83E-EAAFA07A0356'>\n\
    \     <query xmlns='http://jabber.org/protocol/disco#info'\n            node='MILEHost'/>\n\
    \   </iq>\n   The Broker responds with the \"disco#info\" description, which MUST\n\
    \   include an XMPP data form [XEP-0004] with a 'pubsub#type' field that\n   specifies\
    \ the supported namespace (in this example, the IODEF\n   namespace defined in\
    \ [RFC7970]):\n  <iq type='result'\n      from='broker.security-grid.example'\n\
    \      to='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n      id='D367D4ED-2795-489C-A83E-EAAFA07A0356'>\n\
    \    <query xmlns='http://jabber.org/protocol/disco#info'\n         node='MILEHost'>\n\
    \      <identity category='pubsub' type='leaf'/>\n      <feature var='http://jabber.org/protocol/pubsub'/>\n\
    \      <x xmlns='jabber:x:data' type='result'>\n       <field var='FORM_TYPE'\
    \ type='hidden'>\n        <value>http://jabber.org/protocol/pubsub#meta-data</value>\n\
    \       </field>\n       <field var='pubsub#type' label='Payload type' type='text-single'>\n\
    \        <value>urn:ietf:params:xml:ns:iodef-2.0</value>\n       </field>\n  \
    \    </x>\n    </query>\n  </iq>\n   The Platform discovers the Topics by obtaining\
    \ the Broker's response\n   and obtaining the namespaces returned in the \"pubsub#type\"\
    \ field (in\n   the foregoing example, IODEF 2.0).\n"
- title: 6.  Publish-Subscribe
  contents:
  - "6.  Publish-Subscribe\n   Using the XMPP publish-subscribe extension [XEP-0060],\
    \ a Consumer\n   subscribes to a Topic, and a Provider publishes information to\
    \ that\n   Topic, which the Broker then distributes to all subscribed Consumers.\n\
    \   First, a Provider would create a Topic as follows:\n   <iq type='set'\n  \
    \     from='datasource@provider.example/F12C2EFC9BB0'\n       to='broker.security-grid.example'\n\
    \       id='A67507DF-2F22-4937-8D30-88D2F7DBA279'>\n     <pubsub xmlns='http://jabber.org/protocol/pubsub'>\n\
    \       <create node='MILEHost'/>\n     </pubsub>\n   </iq>\n   Note: The foregoing\
    \ example is the minimum protocol needed to create\n   a Topic with the default\
    \ node configuration on the XMPP publish-\n   subscribe service specified in the\
    \ 'to' address of the creation\n   request stanza.  Depending on security requirements,\
    \ the Provider\n   might need to request a non-default configuration for the node;\
    \ see\n   [XEP-0060] for detailed examples.  To also help with the Topic\n   configuration,\
    \ the Provider may also optionally include configuration\n   parameters such as:\n\
    \   <configure>\n     <x xmlns='jabber:x:data' type='submit'>\n       <field var='FORM_TYPE'\
    \ type='hidden'>\n         <value>http://jabber.org/protocol/pubsub#node_config</value>\n\
    \       </field>\n       <field var='pubsub#access_model'><value>authorize</value></field>\n\
    \       <field var='pubsub#persist_items'><value>1</value></field>\n       <field\
    \ var='pubsub#send_last_published_item'>\n         <value>never</value>\n    \
    \   </field>\n     </x>\n   </configure>\n   The above configuration indicates\
    \ the Topic is configured so that the\n   Broker will a) explicitly approve subscription\
    \ requests, b)\n   persistently store all messages posted to the Topic, and c)\
    \ not\n   deliver the most recently published when an entity initially\n   subscribes\
    \ to the Topic.  Please refer to [XEP-0060] for a more\n   detailed description\
    \ of this configuration and other available\n   configuration options.\n   Unless\
    \ an error occurs (see [XEP-0060] for various error flows), the\n   Broker responds\
    \ with success:\n   <iq type='result'\n       from='broker.security-grid.example'\n\
    \       to='datasource@provider.example/F12C2EFC9BB0'\n       id='A67507DF-2F22-4937-8D30-88D2F7DBA279'/>\n\
    \   Second, a Consumer would subscribe as follows:\n   <iq type='set'\n      \
    \ from='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n       to='broker.security-grid.example'\n\
    \       id='9C6EEE9E-F09A-4418-8D68-3BA6AF852522'>\n     <pubsub xmlns='http://jabber.org/protocol/pubsub'>\n\
    \       <subscribe node='MILEHost'\n                  jid='xmpp-grid-client@mile-host.example'/>\n\
    \     </pubsub>\n   </iq>\n   Unless an error occurs (see [XEP-0060] for various\
    \ error flows), the\n   Broker makes an appropriate authorization decision.  If\
    \ access is\n   granted, it responds with success:\n   <iq type='result'\n   \
    \    from='broker.security-grid.example'\n       to='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n\
    \       id='9C6EEE9E-F09A-4418-8D68-3BA6AF852522'>\n     <pubsub xmlns='http://jabber.org/protocol/pubsub'>\n\
    \       <subscription\n           node='MILEHost'\n           jid='xmpp-grid-client@mile-host.example'\n\
    \           subscription='subscribed'/>\n     </pubsub>\n   </iq>\n   Third, a\
    \ Provider would publish an incident to the Broker using the\n   MILEHost Topic\
    \ as follows:\n  <iq type='set'\n      from='datasource@provider.example/F12C2EFC9BB0'\n\
    \      to='broker.security-grid.example'\n      id='2A17D283-0DAE-4A6C-85A9-C10B1B40928C'>\n\
    \    <pubsub xmlns='http://jabber.org/protocol/pubsub'>\n      <publish node='MILEHost'>\n\
    \        <item id='8bh1g27skbga47fh9wk7'>\n          <IODEF-Document version=\"\
    2.00\" xml:lang=\"en\"\n            xmlns=\"urn:ietf:params:xml:ns:iodef-2.0\"\
    \n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      \
    \      xsi:schemaLocation=\n              \"http://www.iana.org/assignments/xml-registry/\n\
    \               schema/iodef-2.0.xsd\">\n            <Incident purpose=\"reporting\"\
    \ restriction=\"private\">\n              <IncidentID name=\"csirt.example.com\"\
    >492382</IncidentID>\n              <GenerationTime>2015-07-18T09:00:00-05:00</GenerationTime>\n\
    \              <Contact type=\"organization\" role=\"creator\">\n            \
    \    <Email>\n                  <EmailTo>contact@csirt.example.com</EmailTo>\n\
    \                </Email>\n              </Contact>\n            </Incident>\n\
    \          </IODEF-Document>\n        </item>\n      </publish>\n    </pubsub>\n\
    \  </iq>\n   (The payload in the foregoing example is from [RFC7970]; payloads\
    \ for\n   additional use cases can be found in [RFC8274].)\n   The Broker would\
    \ then deliver that incident report to all Consumers\n   who are subscribed to\
    \ the Topic:\n  <message\n      from='broker.security-grid.example'\n      to='xmpp-grid-client@mile-host.example/2EBE702A97D6'\n\
    \      id='37B3921D-4F7F-450F-A589-56119A88BC2E'>\n    <event xmlns='http://jabber.org/protocol/pubsub#event'>\n\
    \      <items node='MILEHost'>\n        <item id='iah37s61s964gquqy47aksbx9453ks77'>\n\
    \          <IODEF-Document version=\"2.00\" xml:lang=\"en\"\n            xmlns=\"\
    urn:ietf:params:xml:ns:iodef-2.0\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n            xsi:schemaLocation=\n              \"http://www.iana.org/assignments/xml-registry/\n\
    \               schema/iodef-2.0.xsd\">\n            <Incident purpose=\"reporting\"\
    \ restriction=\"private\">\n              <IncidentID name=\"csirt.example.com\"\
    >492382</IncidentID>\n              <GenerationTime>2015-07-18T09:00:00-05:00</GenerationTime>\n\
    \              <Contact type=\"organization\" role=\"creator\">\n            \
    \    <Email>\n                  <EmailTo>contact@csirt.example.com</EmailTo>\n\
    \                </Email>\n              </Contact>\n            </Incident>\n\
    \          </IODEF-Document>\n        </item>\n      </items>\n    </event>\n\
    \  </message>\n   Note that [XEP-0060] uses the XMPP \"<message />\" stanza for\
    \ delivery\n   of content.  To ensure that messages are delivered to the Consumer\n\
    \   even if the Consumer is not online at the same time that the\n   Publisher\
    \ generates the message, an XMPP-Grid Controller MUST support\n   \"offline messaging\"\
    \ delivery semantics as specified in [RFC6121], the\n   best practices of which\
    \ are further explained in [XEP-0160].\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document has no actions for IANA.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   An XMPP-Grid Controller serves as a controlling\
    \ broker for XMPP-Grid\n   Platforms such as enforcement points, policy servers,\
    \ Configuration\n   Management Databases (CMDBs), and sensors, using a publish-subscribe-\n\
    \   search model of information exchange and lookup.  By increasing the\n   ability\
    \ of XMPP-Grid Platforms to learn about and respond to security\n   incident reports\
    \ and other security-relevant information, XMPP-Grid\n   can improve the timeliness\
    \ and utility of the security system.\n   However, this integrated security system\
    \ can also be exploited by\n   attackers if they can compromise it.  Therefore,\
    \ strong security\n   protections for XMPP-Grid are essential.\n   As XMPP is\
    \ the core of this document, the security considerations of\n   [RFC6120] apply.\
    \  In addition, as XMPP-Grid defines a specific\n   instance, this section provides\
    \ a security analysis of the XMPP-Grid\n   data transfer protocol and the architectural\
    \ elements that employ it,\n   specifically with respect to their use of this\
    \ protocol.  Three\n   subsections define the trust model (which elements are\
    \ trusted to do\n   what), the threat model (attacks that can be mounted on the\
    \ system),\n   and the countermeasures (ways to address or mitigate the threats\n\
    \   previously identified).\n"
- title: 8.1.  Trust Model
  contents:
  - "8.1.  Trust Model\n   The first step in analyzing the security of the XMPP-Grid\
    \ transport\n   protocol is to describe the trust model and list what each\n \
    \  architectural element is trusted to do.  The items listed here are\n   assumptions,\
    \ but provisions are made in \"Threat Model\" (Section 8.2)\n   and \"Countermeasures\"\
    \ (Section 8.3) for elements that fail to perform\n   as they were trusted to\
    \ do.\n"
- title: 8.1.1.  Network
  contents:
  - "8.1.1.  Network\n   The network used to carry XMPP-Grid messages (i.e., the underlying\n\
    \   network transport layer over which XMPP runs) is trusted to:\n   o  Perform\
    \ best-effort delivery of network traffic\n   The network used to carry XMPP-Grid\
    \ messages is not expected\n   (trusted) to:\n   o  Provide confidentiality or\
    \ integrity protection for messages sent\n      over it\n   o  Provide timely\
    \ or reliable service\n"
- title: 8.1.2.  XMPP-Grid Platforms
  contents:
  - "8.1.2.  XMPP-Grid Platforms\n   Authorized XMPP-Grid Platforms are trusted to:\n\
    \   o  Preserve the confidentiality of sensitive data retrieved via the\n    \
    \  XMPP-Grid Controller\n"
- title: 8.1.3.  XMPP-Grid Controller
  contents:
  - "8.1.3.  XMPP-Grid Controller\n   The XMPP-Grid Controller (including its associated\
    \ Broker) is trusted\n   to:\n   o  Broker requests for data and enforce authorization\
    \ of access to\n      this data throughout its lifecycle\n   o  Perform service\
    \ requests in a timely and accurate manner\n   o  Create and maintain accurate\
    \ operational attributes\n   o  Only reveal data to and accept service requests\
    \ from authorized\n      parties\n   o  Preserve the integrity (and confidentiality\
    \ against unauthorized\n      parties) of the data flowing through it.\n   The\
    \ XMPP-Grid Controller is not expected (trusted) to:\n   o  Verify the truth (correctness)\
    \ of data\n"
- title: 8.1.4.  Certification Authority
  contents:
  - "8.1.4.  Certification Authority\n   To allow XMPP-Grid Platforms to mutually\
    \ authenticate with XMPP-Grid\n   Controllers, it is expected that a Certification\
    \ Authority (CA) is\n   employed to issue certificates.  Such a CA (or each CA,\
    \ if there are\n   several) is trusted to:\n   o  Ensure that only proper certificates\
    \ are issued and that all\n      certificates are issued in accordance with the\
    \ CA's policies\n   o  Revoke certificates previously issued when necessary\n\
    \   o  Regularly and securely distribute certificate revocation\n      information\n\
    \   o  Promptly detect and report any violations of this trust so that\n     \
    \ they can be handled\n   The CA is not expected (trusted) to:\n   o  Issue certificates\
    \ that go beyond the XMPP-Grid needs or other\n      constraints imposed by a\
    \ relying party.\n"
- title: 8.2.  Threat Model
  contents:
  - "8.2.  Threat Model\n   To secure the XMPP-Grid data transfer protocol and the\
    \ architectural\n   elements that implement it, this section identifies the attacks\
    \ that\n   can be mounted against the protocol and elements.\n"
- title: 8.2.1.  Network Attacks
  contents:
  - "8.2.1.  Network Attacks\n   A variety of attacks can be mounted using the network.\
    \  For the\n   purposes of this subsection, the phrase \"network traffic\" can\
    \ be\n   taken to mean messages and/or parts of messages.  Any of these\n   attacks\
    \ can be mounted by network elements, by parties who control\n   network elements,\
    \ and (in many cases) by parties who control network-\n   attached devices.\n\
    \   o  Network traffic can be passively monitored to glean information\n     \
    \ from any unencrypted traffic\n   o  Even if all traffic is encrypted, valuable\
    \ information can be\n      gained by traffic analysis (volume, timing, source\
    \ and destination\n      addresses, etc.)\n   o  Network traffic can be modified\
    \ in transit\n   o  Previously transmitted network traffic can be replayed\n \
    \  o  New network traffic can be added\n   o  Network traffic can be blocked,\
    \ perhaps selectively\n   o  A man-in-the-middle (MITM) attack can be mounted\
    \ where an attacker\n      interposes itself between two communicating parties\
    \ and\n      impersonates the other end to either or both parties\n   o  Undesired\
    \ network traffic can be sent in an effort to overload an\n      architectural\
    \ component, thus mounting a denial-of-service attack\n"
- title: 8.2.2.  XMPP-Grid Platforms
  contents:
  - "8.2.2.  XMPP-Grid Platforms\n   An unauthorized XMPP-Grid Platform (one that\
    \ is not recognized by the\n   XMPP-Grid Controller or is recognized but not authorized\
    \ to perform\n   any actions) cannot mount any attacks other than those listed\
    \ in\n   \"Network Attacks\" (Section 8.2.1).\n   An authorized XMPP-Grid Platform,\
    \ on the other hand, can mount many\n   attacks.  These attacks might occur because\
    \ the XMPP-Grid Platform is\n   controlled by a malicious, careless, or incompetent\
    \ party (whether\n   because its owner is malicious, careless, or incompetent\
    \ or because\n   the XMPP-Grid Platform has been compromised and is now controlled\
    \ by\n   a party other than its owner).  They might also occur because the\n \
    \  XMPP-Grid Platform is running malicious software, the XMPP-Grid\n   Platform\
    \ is running buggy software (which can fail in a state that\n   floods the network\
    \ with traffic), or the XMPP-Grid Platform has been\n   configured improperly.\
    \  From a security standpoint, it generally\n   makes no difference why an attack\
    \ is initiated.  The same\n   countermeasures can be employed in any case.\n \
    \  Here is a list of attacks that can be mounted by an authorized XMPP-\n   Grid\
    \ Platform:\n   o  Cause many false alarms or otherwise overload the XMPP-Grid\n\
    \      Controller or other elements in the network security system\n      (including\
    \ human administrators), leading to a denial of service\n      or parts of the\
    \ network security system being disabled.\n   o  Omit important actions (such\
    \ as posting incriminating data),\n      resulting in incorrect access.\n   o\
    \  Use confidential information obtained from the XMPP-Grid\n      Controller\
    \ to enable further attacks (such as using endpoint\n      health check results\
    \ to exploit vulnerable endpoints).\n   o  Advertise data crafted to exploit vulnerabilities\
    \ in the XMPP-Grid\n      Controller or in other XMPP-Grid Platforms with the\
    \ goal of\n      compromising those systems.\n   o  Issue a search request or\
    \ set up a subscription that matches an\n      enormous result, leading to resource\
    \ exhaustion on the XMPP-Grid\n      Controller, the publishing XMPP-Grid Platform,\
    \ and/or the network.\n   o  Establish a communication channel using another XMPP-Grid\n\
    \      Platform's session-id.\n   o  Advertise false data that leads to incorrect\
    \ (e.g., potentially\n      attacker-controlled or -induced) behavior of XMPP-Grid\
    \ Platforms\n      by virtue of applying correct procedures to the falsified input.\n\
    \   Dependencies or vulnerabilities of authorized XMPP-Grid Platforms can\n  \
    \ be exploited to effect these attacks.  Another way to effect these\n   attacks\
    \ is to gain the ability to impersonate an XMPP-Grid Platform\n   (through theft\
    \ of the XMPP-Grid Platform's identity credentials or\n   through other means).\
    \  Even a clock skew between the XMPP-Grid\n   Platform and XMPP-Grid Controller\
    \ can cause problems if the XMPP-Grid\n   Platform assumes that old XMPP-Grid\
    \ Platform data should be ignored.\n"
- title: 8.2.3.  XMPP-Grid Controllers
  contents:
  - "8.2.3.  XMPP-Grid Controllers\n   An unauthorized XMPP-Grid Controller (one that\
    \ is not trusted by\n   XMPP-Grid Platforms) cannot mount any attacks other than\
    \ those listed\n   in \"Network Attacks\" (Section 8.2.1).\n   An authorized XMPP-Grid\
    \ Controller can mount many attacks.  Similar\n   to the XMPP-Grid Platform case\
    \ described above, these attacks might\n   occur because the XMPP-Grid Controller\
    \ is controlled by a malicious,\n   careless, or incompetent party (either an\
    \ XMPP-Grid Controller\n   administrator or an attacker who has seized control\
    \ of the XMPP-Grid\n   Controller).  They might also occur because the XMPP-Grid\
    \ Controller\n   is running malicious software, the XMPP-Grid Controller is running\n\
    \   buggy software (which can fail in a state that corrupts data or\n   floods\
    \ the network with traffic), or the XMPP-Grid Controller has\n   been configured\
    \ improperly.\n   All of the attacks listed for XMPP-Grid Platform above can be\
    \ mounted\n   by the XMPP-Grid Controller.  Detection of these attacks will be\
    \ more\n   difficult since the XMPP-Grid Controller can create false operational\n\
    \   attributes and/or logs that imply some other party created any bad\n   data.\n\
    \   Additional XMPP-Grid Controller attacks can include:\n   o  Exposing different\
    \ data to different XMPP-Grid Platforms to\n      mislead investigators or cause\
    \ inconsistent behavior.\n   o  Mounting an even more effective denial-of-service\
    \ attack than a\n      single XMPP-Grid Platform could; some mechanisms include\
    \ inducing\n      many platforms to perform the same operation in an amplification-\n\
    \      style attack, completely refusing to pass any traffic at all, or\n    \
    \  sending floods of traffic to (certain) platforms or other targets.\n   o  Obtaining\
    \ and caching XMPP-Grid Platform credentials so they can\n      be used to impersonate\
    \ XMPP-Grid Platforms even after a breach of\n      the XMPP-Grid Controller is\
    \ repaired.  Some Simple Authentication\n      and Security Layer (SASL) mechanisms\
    \ (including the mandatory-to-\n      implement SCRAM and EXTERNAL with TLS mutual\
    \ certificate-based\n      authentication) do not admit this class of attack,\
    \ but others\n      (such as PLAIN) are susceptible.\n   o  Obtaining and caching\
    \ XMPP-Grid Controller administrator\n      credentials so they can be used to\
    \ regain control of the XMPP-Grid\n      Controller after the breach of the XMPP-Grid\
    \ Controller is\n      repaired.\n   o  Eavesdropping, injecting, or modifying\
    \ the data being transferred\n      between Provider and Consumer.\n   Dependencies\
    \ or vulnerabilities of the XMPP-Grid Controller can be\n   exploited to obtain\
    \ control of the XMPP-Grid Controller and effect\n   these attacks.\n"
- title: 8.2.4.  Certification Authority
  contents:
  - "8.2.4.  Certification Authority\n   A Certification Authority trusted to issue\
    \ certificates for the XMPP-\n   Grid Controller and/or XMPP-Grid Platforms can\
    \ mount several attacks:\n   o  Issue certificates for unauthorized parties, enabling\
    \ them to\n      impersonate authorized parties such as the XMPP-Grid Controller\
    \ or\n      an XMPP-Grid Platform.  This can lead to all the threats that can\n\
    \      be mounted by the certificate's subject.\n   o  Issue certificates without\
    \ following all of the CA's policies.\n      Because this can result in issuing\
    \ certificates that can be used\n      to impersonate authorized parties, this\
    \ can lead to all the\n      threats that can be mounted by the certificate's\
    \ subject.\n   o  Fail to revoke previously issued certificates that need to be\n\
    \      revoked.  This can lead to undetected impersonation of the\n      certificate's\
    \ subject or failure to revoke authorization of the\n      subject and therefore\
    \ can lead to all of the threats that can be\n      mounted by that subject.\n\
    \   o  Fail to regularly and securely distribute certificate revocation\n    \
    \  information.  This can cause a relying party to accept a revoked\n      certificate,\
    \ leading to undetected impersonation of the\n      certificate's subject or failure\
    \ to revoke authorization of the\n      subject and therefore can lead to all\
    \ of the threats that can be\n      mounted by that subject.  It can also cause\
    \ a relying party to\n      refuse to proceed with a transaction because timely\
    \ revocation\n      information is not available, even though the transaction\
    \ should\n      be permitted to proceed.\n   o  Allow the CA's private key to\
    \ be revealed to an unauthorized\n      party.  This can lead to all the threats\
    \ above.  Even worse, the\n      actions taken with the private key will not be\
    \ known to the CA.\n   o  Fail to promptly detect and report errors and violations\
    \ of trust\n      so that relying parties can be promptly notified.  This can\
    \ cause\n      the threats listed earlier in this section to persist longer than\n\
    \      necessary, leading to many knock-on effects.\n"
- title: 8.3.  Countermeasures
  contents:
  - "8.3.  Countermeasures\n   Below are countermeasures for specific attack scenarios\
    \ to the XMPP-\n   Grid infrastructure.\n"
- title: 8.3.1.  Securing the XMPP-Grid Data Transfer Protocol
  contents:
  - "8.3.1.  Securing the XMPP-Grid Data Transfer Protocol\n   To address network\
    \ attacks, the XMPP-Grid data transfer protocol\n   described in this document\
    \ requires that the XMPP-Grid messages MUST\n   be carried over TLS (minimally\
    \ TLS 1.2 and preferably TLS 1.3\n   [RFC8446]) as described in [RFC6120] and\
    \ updated by [RFC7590].  The\n   XMPP-Grid Controller and XMPP-Grid Platforms\
    \ SHOULD mutually\n   authenticate.  The XMPP-Grid Platform MUST verify the XMPP-Grid\n\
    \   Controller's certificate and determine whether the XMPP-Grid\n   Controller\
    \ is trusted by this XMPP-Grid Platform before completing\n   the TLS handshake.\
    \  To ensure interoperability, implementations MUST\n   implement at least either\
    \ the SASL EXTERNAL mechanism [RFC4422] or\n   the SASL SCRAM mechanism.  When\
    \ using the SASL SCRAM mechanism, the\n   SCRAM-SHA-256-PLUS variant SHOULD be\
    \ preferred over the SCRAM-SHA-256\n   variant, and SHA-256 variants [RFC7677]\
    \ SHOULD be preferred over\n   SHA-1 variants [RFC5802]).  XMPP-Grid Platforms\
    \ and XMPP-Grid\n   Controllers using certificate-based authentication SHOULD\
    \ each verify\n   the revocation status of the other party's certificate.  The\n\
    \   selection of the XMPP-Grid Platform authentication technique to use\n   in\
    \ any particular deployment is left to the administrator.\n   These protocol security\
    \ measures provide protection against all the\n   network attacks listed in Section\
    \ 8.2 except denial-of-service\n   attacks.  If protection against these denial-of-service\
    \ attacks is\n   desired, ingress filtering, rate limiting per source IP address,\
    \ and\n   other denial-of-service mitigation measures can be employed.  In\n \
    \  addition, an XMPP-Grid Controller MAY automatically disable a\n   misbehaving\
    \ XMPP-Grid Platform.\n"
- title: 8.3.2.  Securing XMPP-Grid Platforms
  contents:
  - "8.3.2.  Securing XMPP-Grid Platforms\n   XMPP-Grid Platforms can be deployed\
    \ in locations that are susceptible\n   to physical attacks.  Physical security\
    \ measures can be taken to\n   avoid compromise of XMPP-Grid Platforms, but these\
    \ are not always\n   practical or completely effective.  An alternative measure\
    \ is to\n   configure the XMPP-Grid Controller to provide read-only access for\n\
    \   such systems.  The XMPP-Grid Controller SHOULD also include a full\n   authorization\
    \ model so that individual XMPP-Grid Platforms can be\n   configured to have only\
    \ the privileges that they need.  The XMPP-Grid\n   Controller MAY provide functional\
    \ templates so that the administrator\n   can configure a specific XMPP-Grid Platform\
    \ as a DHCP [RFC2131]\n   server and authorize only the operations and metadata\
    \ types needed by\n   a DHCP server to be permitted for that XMPP-Grid Platform.\
    \  These\n   techniques can reduce the negative impacts of a compromised XMPP-Grid\n\
    \   Platform without diminishing the utility of the overall system.\n   To handle\
    \ attacks within the bounds of this authorization model, the\n   XMPP-Grid Controller\
    \ MAY also include rate limits and alerts for\n   unusual XMPP-Grid Platform behavior.\
    \  XMPP-Grid Controllers SHOULD\n   make it easy to revoke an XMPP-Grid Platform's\
    \ authorization when\n   necessary.  The XMPP-Grid Controller SHOULD include auditable\
    \ logs of\n   XMPP-Grid Platform activities.\n   To avoid compromise of XMPP-Grid\
    \ Platforms, they SHOULD be hardened\n   against attack and minimized to reduce\
    \ their attack surface.  They\n   should be well managed to minimize vulnerabilities\
    \ in the underlying\n   platform and in systems upon which the XMPP-Grid Platform\
    \ depends.\n   Personnel with administrative access should be carefully screened\
    \ and\n   monitored to detect problems as soon as possible.\n"
- title: 8.3.3.  Securing XMPP-Grid Controllers
  contents:
  - "8.3.3.  Securing XMPP-Grid Controllers\n   Because of the serious consequences\
    \ of XMPP-Grid Controller\n   compromise, XMPP-Grid Controllers need to be especially\
    \ well hardened\n   against attack and minimized to reduce their attack surface.\
    \  They\n   need to be well managed to minimize vulnerabilities in the underlying\n\
    \   platform and in systems upon which the XMPP-Grid Controller depends.\n   Network\
    \ security measures such as firewalls or intrusion detection\n   systems can be\
    \ used to monitor and limit traffic to and from the\n   XMPP-Grid Controller.\
    \  Personnel with administrative access ought to\n   be carefully screened and\
    \ monitored to detect problems as soon as\n   possible.  Administrators SHOULD\
    \ NOT use password-based\n   authentication but SHOULD instead use non-reusable\
    \ credentials and\n   multi-factor authentication (where available).  Physical\
    \ security\n   measures ought to be employed to prevent physical attacks on XMPP-\n\
    \   Grid Controllers.\n   To ease detection of XMPP-Grid Controller compromise\
    \ should it occur,\n   XMPP-Grid Controller behavior should be monitored to detect\
    \ unusual\n   behavior (such as a reboot, a large increase in traffic, or different\n\
    \   views of an information repository for similar XMPP-Grid Platforms).\n   It\
    \ is a matter of local policy whether XMPP-Grid Platforms log and/or\n   notify\
    \ administrators when peculiar XMPP-Grid Controller behavior is\n   detected and\
    \ whether read-only audit logs of security-relevant\n   information (especially\
    \ administrative actions) are maintained;\n   however, such behavior is encouraged\
    \ to aid in forensic analysis.\n   Furthermore, if compromise of an XMPP-Grid\
    \ Controller is detected, a\n   careful analysis should be performed, and any\
    \ reusable credentials\n   that could have been compromised should be reissued.\n\
    \   To address the potential for the XMPP-Grid Controller to eavesdrop,\n   modify\
    \ or inject data, it would be desirable to deploy end-to-end\n   encryption between\
    \ the Provider and the Consumer(s).  Unfortunately,\n   because there is no standardized\
    \ method for encryption of one-to-many\n   messages within XMPP, techniques for\
    \ enforcing end-to-end encryption\n   are out of scope for this specification.\n"
- title: 8.3.4.  Broker Access Models for Topics
  contents:
  - "8.3.4.  Broker Access Models for Topics\n   The XMPP publish-subscribe specification\
    \ [XEP-0060] defines five\n   access models for subscribing to Topics at a Broker:\
    \ open, presence,\n   roster, authorize, and whitelist.  The first model allows\n\
    \   uncontrolled access, and the next two models are appropriate only in\n   instant-messaging\
    \ applications.  Therefore, a Broker SHOULD support\n   only the authorize model\
    \ (under which the Topic owner needs to\n   approve all subscription requests\
    \ and only subscribers can retrieve\n   data items) and the whitelist model (under\
    \ which only preconfigured\n   Platforms can subscribe or retrieve data items).\
    \  In order to ease\n   the deployment burden, subscription approvals and whitelist\n\
    \   management can be automated (e.g., the Topic \"owner\" can be a policy\n \
    \  server).  The choice between \"authorize\" and \"whitelist\" as the\n   default\
    \ access model is a matter for local service policy.\n"
- title: 8.3.5.  Limit on Search Result Size
  contents:
  - "8.3.5.  Limit on Search Result Size\n   While XMPP-Grid is designed for high\
    \ scalability to hundreds of\n   thousands of Platforms, an XMPP-Grid Controller\
    \ MAY establish a limit\n   to the amount of data it is willing to return in search\
    \ or\n   subscription results.  Platforms could use [XEP-0059] to restrict the\n\
    \   size of the result sets the Controller returns in search or\n   subscription\
    \ results or topics' service discovery.  This mitigates\n   the threat of an XMPP-Grid\
    \ Platform causing resource exhaustion by\n   issuing a search or subscription\
    \ that leads to an enormous result.\n"
- title: 8.3.6.  Securing the Certification Authority
  contents:
  - "8.3.6.  Securing the Certification Authority\n   As noted above, compromise of\
    \ a Certification Authority (CA) trusted\n   to issue certificates for the XMPP-Grid\
    \ Controller and/or XMPP-Grid\n   Platforms is a major security breach.  Many\
    \ guidelines for proper CA\n   security have been developed: the CA/Browser Forum's\
    \ Baseline\n   Requirements, the American Institute of Certified Public Accountants\n\
    \   (AICPA) / Canadian Institute of Chartered Accountants (CICA) Trust\n   Service\
    \ Principles, the IETF's Certificate Transparency [RFC6962],\n   etc.  The CA\
    \ operator and relying parties should agree on\n   appropriately rigorous security\
    \ practices to be used.\n   Even with the most rigorous security practices, a\
    \ CA can be\n   compromised.  If this compromise is detected quickly, relying\
    \ parties\n   can remove the CA from their list of trusted CAs, and other CAs\
    \ can\n   revoke any certificates issued to the CA.  However, CA compromise may\n\
    \   go undetected for some time, and there's always the possibility that\n   a\
    \ CA is being operated improperly or in a manner that is not in the\n   interests\
    \ of the relying parties.  For this reason, relying parties\n   may wish to \"\
    pin\" a small number of particularly critical\n   certificates (such as the certificate\
    \ for the XMPP-Grid Controller).\n   Once a certificate has been pinned, the relying\
    \ party will not accept\n   another certificate in its place unless the Administrator\
    \ explicitly\n   commands it to do so.  This does not mean that the relying party\
    \ will\n   not check the revocation status of pinned certificates.  However, the\n\
    \   Administrator can still be consulted if a pinned certificate is\n   revoked,\
    \ since the CA and revocation process are not completely\n   trusted.  By \"pinning\"\
    \ one or a small set of certificates, the\n   relying party has identified the\
    \ effective XMPP-Grid Controller(s)\n   authorized for connection.\n"
- title: 8.3.7.  End-to-End Encryption of Messages
  contents:
  - "8.3.7.  End-to-End Encryption of Messages\n   Because it is expected that there\
    \ will be a relatively large number\n   of Consumers for every Topic, for the\
    \ purposes of content discovery\n   and scaling, this document specifies a \"\
    one-to-many\" communications\n   pattern using the XMPP Publish-Subscribe extension.\
    \  Unfortunately,\n   there is no standardized technology for end-to-end encryption\
    \ of one-\n   to-many messages in XMPP.  This implies that messages can be subject\n\
    \   to eavesdropping, data injection, and data modification attacks\n   within\
    \ a Broker or Controller.  If it is necessary to mitigate\n   against such attacks,\
    \ implementers would need to select a messaging\n   pattern other than [XEP-0060],\
    \ most likely the basic \"instant\n   messaging\" pattern specified in [RFC6121]\
    \ with a suitable XMPP\n   extension for end-to-end encryption.  The description\
    \ of such an\n   approach is out of scope for this document.\n"
- title: 8.4.  Summary
  contents:
  - "8.4.  Summary\n   XMPP-Grid's considerable value as a broker for security-sensitive\n\
    \   data exchange distribution also makes the protocol and the network\n   security\
    \ elements that implement it a target for attack.  Therefore,\n   strong security\
    \ has been included as a basic design principle within\n   the XMPP-Grid design\
    \ process.\n   The XMPP-Grid data transfer protocol provides strong protection\n\
    \   against a variety of different attacks.  In the event that an XMPP-\n   Grid\
    \ Platform or XMPP-Grid Controller is compromised, the effects of\n   this compromise\
    \ are reduced and limited with the recommended role-\n   based authorization model\
    \ and other provisions, and best practices\n   for managing and protecting XMPP-Grid\
    \ systems have been described.\n   Taken together, these measures should provide\
    \ protection commensurate\n   with the threat to XMPP-Grid systems, thus ensuring\
    \ that they fulfill\n   their promise as a network security clearinghouse.\n"
- title: 9.  Privacy Considerations
  contents:
  - "9.  Privacy Considerations\n   XMPP-Grid Platforms can publish information about\
    \ endpoint health,\n   network access, events (which can include information about\
    \ which\n   services an endpoint is accessing), roles and capabilities, and the\n\
    \   identity of the end user operating the endpoint.  Any of this\n   published\
    \ information can be queried by other XMPP-Grid Platforms and\n   could potentially\
    \ be used to correlate network activity to a\n   particular end user.\n   Dynamic\
    \ and static information brokered by an XMPP-Grid Controller,\n   ostensibly for\
    \ the purposes of correlation by XMPP-Grid Platforms for\n   intrusion detection,\
    \ could be misused by a broader set of XMPP-Grid\n   Platforms that hitherto have\
    \ been performing specific roles with a\n   strict, well-defined separation of\
    \ duties.\n   Care needs to be taken by deployers of XMPP-Grid to ensure that\
    \ the\n   information published by XMPP-Grid Platforms does not violate\n   agreements\
    \ with end users or local and regional laws and regulations.\n   This can be accomplished\
    \ either by configuring XMPP-Grid Platforms to\n   not publish certain information\
    \ or by restricting access to sensitive\n   data to trusted XMPP-Grid Platforms.\
    \  That is, the easiest means to\n   ensure privacy or protect sensitive data\
    \ is to omit or not share it\n   at all.\n   Similarly, care must be taken by\
    \ deployers and XMPP-Grid Controller\n   implementations as they implement the\
    \ appropriate auditing tools.  In\n   particular, any information, such as logs,\
    \ must be sensitive to the\n   type of information stored to ensure that the information\
    \ does not\n   violate privacy and agreements with end users or local and regional\n\
    \   laws and regulations.\n   Another consideration for deployers is to enable\
    \ end-to-end\n   encryption to ensure the data is protected while in transit between\n\
    \   data layers and thus protected from the transport layer.  The means\n   to\
    \ achieve end-to-end encryption is beyond the scope of this\n   document.\n"
- title: 10.  Operations and Management Considerations
  contents:
  - "10.  Operations and Management Considerations\n   In order to facilitate the\
    \ management of Providers and the onboarding\n   of Consumers, it is helpful to\
    \ generate the following ahead of time:\n   o  Agreement between the operators\
    \ of Provider services and the\n      implementers of Consumer software regarding\
    \ identifiers for common\n      Topics (e.g., these could be registered with the\
    \ XMPP Software\n      Foundation's registry of well-known nodes for service discovery\n\
    \      and publish-subscribe, located at <https://xmpp.org/registrar/\n      nodes.html>).\n\
    \   o  Security certificates (including appropriate certificate chains)\n    \
    \  for Controllers, including identification of any Providers\n      associated\
    \ with the Controllers (which might be located at\n      subdomains).\n   o  Consistent\
    \ and secure access control policies for publishing and\n      subscribing to\
    \ Topics.\n   These matters are out of scope for this document but ought to be\n\
    \   addressed by the XMPP-Grid community.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2026]  Bradner, S., \"The Internet Standards\
    \ Process -- Revision\n              3\", BCP 9, RFC 2026, DOI 10.17487/RFC2026,\
    \ October 1996,\n              <https://www.rfc-editor.org/info/rfc2026>.\n  \
    \ [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n          \
    \    Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4422]\
    \  Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n              Authentication\
    \ and Security Layer (SASL)\", RFC 4422,\n              DOI 10.17487/RFC4422,\
    \ June 2006,\n              <https://www.rfc-editor.org/info/rfc4422>.\n   [RFC5802]\
    \  Newman, C., Menon-Sen, A., Melnikov, A., and N. Williams,\n              \"\
    Salted Challenge Response Authentication Mechanism\n              (SCRAM) SASL\
    \ and GSS-API Mechanisms\", RFC 5802,\n              DOI 10.17487/RFC5802, July\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc5802>.\n   [RFC6120]\
    \  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol\
    \ (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n              March 2011, <https://www.rfc-editor.org/info/rfc6120>.\n\
    \   [RFC6121]  Saint-Andre, P., \"Extensible Messaging and Presence\n        \
    \      Protocol (XMPP): Instant Messaging and Presence\",\n              RFC 6121,\
    \ DOI 10.17487/RFC6121, March 2011,\n              <https://www.rfc-editor.org/info/rfc6121>.\n\
    \   [RFC7590]  Saint-Andre, P. and T. Alkemade, \"Use of Transport Layer\n   \
    \           Security (TLS) in the Extensible Messaging and Presence\n        \
    \      Protocol (XMPP)\", RFC 7590, DOI 10.17487/RFC7590, June\n             \
    \ 2015, <https://www.rfc-editor.org/info/rfc7590>.\n   [RFC7677]  Hansen, T.,\
    \ \"SCRAM-SHA-256 and SCRAM-SHA-256-PLUS Simple\n              Authentication\
    \ and Security Layer (SASL) Mechanisms\",\n              RFC 7677, DOI 10.17487/RFC7677,\
    \ November 2015,\n              <https://www.rfc-editor.org/info/rfc7677>.\n \
    \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n      \
    \        2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n         \
    \     May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [XEP-0004] Eatmon,\
    \ R., Hildebrand, J., Miller, J., Muldowney, T., and\n              P. Saint-Andre,\
    \ \"Data Forms\", XSF XEP 0004, August 2007,\n              <https://xmpp.org/extensions/xep-0004.html>.\n\
    \   [XEP-0030] Hildebrand, J., Millard, P., Eatmon, R., and P. Saint-\n      \
    \        Andre, \"Service Discovery\", XSF XEP 0030, October 2017,\n         \
    \     <https://xmpp.org/extensions/xep-0030.html>.\n   [XEP-0059] Paterson, I.,\
    \ Saint-Andre, P., Mercier, V., and J.\n              Seguineau, \"Result Set\
    \ Management\", XSF XEP 0059,\n              September 2006,\n              <https://xmpp.org/extensions/xep-0059.html>.\n\
    \   [XEP-0060] Millard, P., Saint-Andre, P., and R. Meijer, \"Publish-\n     \
    \         Subscribe\", XSF XEP 0060, January 2019,\n              <https://xmpp.org/extensions/xep-0060.html>.\n\
    \   [XEP-0203] Saint-Andre, P., \"Delayed Delivery\", XSF XEP 0203,\n        \
    \      September 2009,\n              <https://xmpp.org/extensions/xep-0203.html>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration\
    \ Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131, March 1997,\n   \
    \           <https://www.rfc-editor.org/info/rfc2131>.\n   [RFC6962]  Laurie,\
    \ B., Langley, A., and E. Kasper, \"Certificate\n              Transparency\"\
    , RFC 6962, DOI 10.17487/RFC6962, June 2013,\n              <https://www.rfc-editor.org/info/rfc6962>.\n\
    \   [RFC7970]  Danyliw, R., \"The Incident Object Description Exchange\n     \
    \         Format Version 2\", RFC 7970, DOI 10.17487/RFC7970,\n              November\
    \ 2016, <https://www.rfc-editor.org/info/rfc7970>.\n   [RFC8274]  Kampanakis,\
    \ P. and M. Suzuki, \"Incident Object Description\n              Exchange Format\
    \ Usage Guidance\", RFC 8274,\n              DOI 10.17487/RFC8274, November 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8274>.\n   [RFC8446]  Rescorla,\
    \ E., \"The Transport Layer Security (TLS) Protocol\n              Version 1.3\"\
    , RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n\
    \   [XEP-0160] Saint-Andre, P., \"Best Practices for Handling Offline\n      \
    \        Messages\", XSF XEP 0160, October 2016,\n              <https://xmpp.org/extensions/xep-0160.html>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge the contributions,\
    \ authoring\n   and/or editing of the following people: Joseph Salowey, Lisa\n\
    \   Lorenzin, Clifford Kahn, Henk Birkholz, Jessica Fitzgerald-McKay,\n   Steve\
    \ Hanna, and Steve Venema.  In addition, we want to thank Takeshi\n   Takahashi,\
    \ Panos Kampanakis, Adam Montville, Chris Inacio, and Dave\n   Cridland for reviewing\
    \ and providing valuable comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nancy Cam-Winget (editor)\n   Cisco Systems\n   3550 Cisco\
    \ Way\n   San Jose, CA  95134\n   United States of America\n   Email: ncamwing@cisco.com\n\
    \   Syam Appala\n   Cisco Systems\n   3550 Cisco Way\n   San Jose, CA  95134\n\
    \   United States of America\n   Email: syam1@cisco.com\n   Scott Pope\n   Cisco\
    \ Systems\n   5400 Meadows Road\n   Suite 300\n   Lake Oswego, OR  97035\n   United\
    \ States of America\n   Email: scottp@cisco.com\n   Peter Saint-Andre\n   Mozilla\n\
    \   Email: stpeter@mozilla.com\n"
