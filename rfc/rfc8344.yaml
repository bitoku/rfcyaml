- contents:
  - '                  A YANG Data Model for IP Management

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a YANG data model for management of IP\n   implementations.
    \ The data model includes configuration and system\n   state.\n   The YANG data
    model in this document conforms to the Network\n   Management Datastore Architecture
    defined in RFC 8342.\n   This document obsoletes RFC 7277.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8344.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Summary of Changes from RFC 7277 ...........................2\n      1.2.
    Terminology ................................................3\n      1.3. Tree
    Diagrams ..............................................3\n   2. IP Data Model
    ...................................................4\n   3. Relationship to the
    IP-MIB ......................................5\n   4. IP Management YANG Module
    .......................................7\n   5. IANA Considerations ............................................27\n
    \  6. Security Considerations ........................................27\n   7.
    References .....................................................29\n      7.1.
    Normative References ......................................29\n      7.2. Informative
    References ....................................31\n   Appendix A. Example: NETCONF
    <get-config> Reply ...................32\n   Appendix B. Example: NETCONF <get-data>
    Reply .....................33\n   Acknowledgments ...................................................34\n
    \  Author's Address ..................................................34\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a YANG data model [RFC7950] for management
    of\n   IP implementations.\n   The data model covers configuration of per-interface
    IPv4 and IPv6\n   parameters as well as mappings of IP addresses to link-layer\n
    \  addresses.  It also provides information about which IP addresses are\n   operationally
    used and which link-layer mappings exist.\n   Per-interface parameters are added
    through augmentation of the\n   interface data model defined in [RFC8343].\n   This
    version of the IP data model supports the Network Management\n   Datastore Architecture
    (NMDA) [RFC8342].\n"
  - contents:
    - "1.1.  Summary of Changes from RFC 7277\n   The \"ipv4\" and \"ipv6\" subtrees
      with \"config false\" data nodes in the\n   \"/interfaces-state/interface\"
      subtree are deprecated.  All\n   \"config false\" data nodes are now present
      in the \"ipv4\" and \"ipv6\"\n   subtrees in the \"/interfaces/interface\" subtree.\n
      \  Servers that do not implement NMDA or that wish to support clients\n   that
      do not implement NMDA MAY implement the deprecated \"ipv4\" and\n   \"ipv6\"
      subtrees in the \"/interfaces-state/interface\" subtree.\n"
    title: 1.1.  Summary of Changes from RFC 7277
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n   The following terms are defined in [RFC8342]
      and are not redefined\n   here:\n   o  client\n   o  server\n   o  configuration\n
      \  o  system state\n   o  intended configuration\n   o  running configuration
      datastore\n   o  operational state\n   o  operational state datastore\n   The
      following terms are defined in [RFC7950] and are not redefined\n   here:\n   o
      \ augment\n   o  data model\n   o  data node\n   The terminology for describing
      YANG data models is found in\n   [RFC7950].\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Tree Diagrams\n   Tree diagrams used in this document follow the notation
      defined in\n   [RFC8340].\n"
    title: 1.3.  Tree Diagrams
  title: 1.  Introduction
- contents:
  - "2.  IP Data Model\n   This document defines the YANG module \"ietf-ip\", which
    augments the\n   \"interface\" lists defined in the \"ietf-interfaces\" module
    [RFC8343]\n   with IP-specific data nodes.\n   The data model has the following
    structure for IP data nodes per\n   interface, excluding the deprecated data nodes:\n
    \  module: ietf-ip\n     augment /if:interfaces/if:interface:\n       +--rw ipv4!\n
    \      |  +--rw enabled?      boolean\n       |  +--rw forwarding?   boolean\n
    \      |  +--rw mtu?          uint16\n       |  +--rw address* [ip]\n       |
    \ |  +--rw ip               inet:ipv4-address-no-zone\n       |  |  +--rw (subnet)\n
    \      |  |  |  +--:(prefix-length)\n       |  |  |  |  +--rw prefix-length?   uint8\n
    \      |  |  |  +--:(netmask)\n       |  |  |     +--rw netmask?         yang:dotted-quad\n
    \      |  |  |             {ipv4-non-contiguous-netmasks}?\n       |  |  +--ro
    origin?          ip-address-origin\n       |  +--rw neighbor* [ip]\n       |     +--rw
    ip                    inet:ipv4-address-no-zone\n       |     +--rw link-layer-address
    \   yang:phys-address\n       |     +--ro origin?               neighbor-origin\n
    \      +--rw ipv6!\n          +--rw enabled?                     boolean\n          +--rw
    forwarding?                  boolean\n          +--rw mtu?                         uint32\n
    \         +--rw address* [ip]\n          |  +--rw ip               inet:ipv6-address-no-zone\n
    \         |  +--rw prefix-length    uint8\n          |  +--ro origin?          ip-address-origin\n
    \         |  +--ro status?          enumeration\n          +--rw neighbor* [ip]\n
    \         |  +--rw ip                    inet:ipv6-address-no-zone\n          |
    \ +--rw link-layer-address    yang:phys-address\n          |  +--ro origin?               neighbor-origin\n
    \         |  +--ro is-router?            empty\n          |  +--ro state?                enumeration\n
    \         +--rw dup-addr-detect-transmits?   uint32\n          +--rw autoconf\n
    \            +--rw create-global-addresses?        boolean\n             +--rw
    create-temporary-addresses?     boolean\n             |       {ipv6-privacy-autoconf}?\n
    \            +--rw temporary-valid-lifetime?       uint32\n             |       {ipv6-privacy-autoconf}?\n
    \            +--rw temporary-preferred-lifetime?   uint32\n                     {ipv6-privacy-autoconf}?\n
    \  The data model defines two containers per interface -- \"ipv4\" and\n   \"ipv6\",
    representing the IPv4 and IPv6 address families.  In each\n   container, there
    is a leaf \"enabled\" that controls whether or not the\n   address family is enabled
    on that interface, and a leaf \"forwarding\"\n   that controls whether or not
    IP packet forwarding for the address\n   family is enabled on the interface.  In
    each container, there is also\n   a list of addresses and a list of mappings from
    IP addresses to\n   link-layer addresses.\n"
  title: 2.  IP Data Model
- contents:
  - "3.  Relationship to the IP-MIB\n   If the device implements the IP-MIB [RFC4293],
    each entry in the\n   \"ipv4/address\" and \"ipv6/address\" lists is mapped to
    one\n   ipAddressEntry, where the ipAddressIfIndex refers to the \"address\"\n
    \  entry's interface.\n   The IP-MIB defines objects to control IPv6 Router Advertisement\n
    \  messages.  The corresponding YANG data nodes are defined in\n   [RFC8022].\n
    \  The entries in \"ipv4/neighbor\" and \"ipv6/neighbor\" are mapped to\n   ipNetToPhysicalTable.\n
    \  The following table lists the YANG data nodes with corresponding\n   objects
    in the IP-MIB.\n   +----------------------------------+--------------------------------+\n
    \  | YANG data node in                | IP-MIB object                  |\n   |
    /if:interfaces/if:interface      |                                |\n   +----------------------------------+--------------------------------+\n
    \  | ipv4                             | ipv4InterfaceEnableStatus      |\n   |
    ipv4/enabled                     | ipv4InterfaceEnableStatus      |\n   | ipv4/address
    \                    | ipAddressEntry                 |\n   | ipv4/address/ip
    \                 | ipAddressAddrType              |\n   |                                  |
    ipAddressAddr                  |\n   | ipv4/neighbor                    | ipNetToPhysicalEntry
    \          |\n   | ipv4/neighbor/ip                 | ipNetToPhysicalNetAddressType
    \ |\n   |                                  | ipNetToPhysicalNetAddress      |\n
    \  | ipv4/neighbor/link-layer-address | ipNetToPhysicalPhysAddress     |\n   |
    ipv4/neighbor/origin             | ipNetToPhysicalType            |\n   | ipv6
    \                            | ipv6InterfaceEnableStatus      |\n   | ipv6/enabled
    \                    | ipv6InterfaceEnableStatus      |\n   | ipv6/forwarding
    \                 | ipv6InterfaceForwarding        |\n   | ipv6/address                     |
    ipAddressEntry                 |\n   | ipv6/address/ip                  | ipAddressAddrType
    \             |\n   |                                  | ipAddressAddr                  |\n
    \  | ipv4/address/origin              | ipAddressOrigin                |\n   |
    ipv6/address/status              | ipAddressStatus                |\n   | ipv6/neighbor
    \                   | ipNetToPhysicalEntry           |\n   | ipv6/neighbor/ip
    \                | ipNetToPhysicalNetAddressType  |\n   |                                  |
    ipNetToPhysicalNetAddress      |\n   | ipv6/neighbor/link-layer-address | ipNetToPhysicalPhysAddress
    \    |\n   | ipv6/neighbor/origin             | ipNetToPhysicalType            |\n
    \  | ipv6/neighbor/state              | ipNetToPhysicalState           |\n   +----------------------------------+--------------------------------+\n
    \          YANG Interface Data Nodes and Related IP-MIB Objects\n"
  title: 3.  Relationship to the IP-MIB
- contents:
  - "4.  IP Management YANG Module\n   This module imports typedefs from [RFC6991]
    and [RFC8343], and it\n   references [RFC791], [RFC826], [RFC4861], [RFC4862],
    [RFC4941],\n   [RFC7217], and [RFC8200].\n   <CODE BEGINS> file \"ietf-ip@2018-02-22.yang\"\n
    \  module ietf-ip {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n
    \    prefix ip;\n     import ietf-interfaces {\n       prefix if;\n     }\n     import
    ietf-inet-types {\n       prefix inet;\n     }\n     import ietf-yang-types {\n
    \      prefix yang;\n     }\n     organization\n       \"IETF NETMOD (Network
    Modeling) Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n
    \       WG List:  <mailto:netmod@ietf.org>\n        Editor:   Martin Bjorklund\n
    \                 <mailto:mbj@tail-f.com>\";\n     description\n       \"This
    module contains a collection of YANG definitions for\n        managing IP implementations.\n
    \       Copyright (c) 2018 IETF Trust and the persons identified as\n        authors
    of the code.  All rights reserved.\n        Redistribution and use in source and
    binary forms, with or\n        without modification, is permitted pursuant to,
    and subject\n        to the license terms contained in, the Simplified BSD License\n
    \       set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
    to IETF Documents\n        (https://trustee.ietf.org/license-info).\n        This
    version of this YANG module is part of RFC 8344; see\n        the RFC itself for
    full legal notices.\";\n     revision 2018-02-22 {\n       description\n         \"Updated
    to support NMDA.\";\n       reference\n         \"RFC 8344: A YANG Data Model
    for IP Management\";\n     }\n     revision 2014-06-16 {\n       description\n
    \        \"Initial revision.\";\n       reference\n         \"RFC 7277: A YANG
    Data Model for IP Management\";\n     }\n     /*\n      * Features\n      */\n
    \    feature ipv4-non-contiguous-netmasks {\n       description\n         \"Indicates
    support for configuring non-contiguous\n          subnet masks.\";\n     }\n     feature
    ipv6-privacy-autoconf {\n       description\n         \"Indicates support for
    privacy extensions for stateless address\n          autoconfiguration in IPv6.\";\n
    \      reference\n         \"RFC 4941: Privacy Extensions for Stateless Address\n
    \                   Autoconfiguration in IPv6\";\n     }\n     /*\n      * Typedefs\n
    \     */\n     typedef ip-address-origin {\n       type enumeration {\n         enum
    other {\n           description\n             \"None of the following.\";\n         }\n
    \        enum static {\n           description\n             \"Indicates that
    the address has been statically\n              configured -- for example, using
    the Network Configuration\n              Protocol (NETCONF) or a command line
    interface.\";\n         }\n         enum dhcp {\n           description\n             \"Indicates
    an address that has been assigned to this\n              system by a DHCP server.\";\n
    \        }\n         enum link-layer {\n           description\n             \"Indicates
    an address created by IPv6 stateless\n              autoconfiguration that embeds
    a link-layer address in its\n              interface identifier.\";\n         }\n
    \        enum random {\n           description\n             \"Indicates an address
    chosen by the system at\n              random, e.g., an IPv4 address within 169.254/16,
    a\n              temporary address as described in RFC 4941, or a\n              semantically
    opaque address as described in RFC 7217.\";\n           reference\n             \"RFC
    4941: Privacy Extensions for Stateless Address\n                        Autoconfiguration
    in IPv6\n              RFC 7217: A Method for Generating Semantically Opaque\n
    \                       Interface Identifiers with IPv6 Stateless\n                        Address
    Autoconfiguration (SLAAC)\";\n         }\n       }\n       description\n         \"The
    origin of an address.\";\n     }\n     typedef neighbor-origin {\n       type
    enumeration {\n         enum other {\n           description\n             \"None
    of the following.\";\n         }\n         enum static {\n           description\n
    \            \"Indicates that the mapping has been statically\n              configured
    -- for example, using NETCONF or a command line\n              interface.\";\n
    \        }\n         enum dynamic {\n           description\n             \"Indicates
    that the mapping has been dynamically resolved\n              using, for example,
    IPv4 ARP or the IPv6 Neighbor\n              Discovery protocol.\";\n         }\n
    \      }\n       description\n         \"The origin of a neighbor entry.\";\n
    \    }\n     /*\n      * Data nodes\n      */\n     augment \"/if:interfaces/if:interface\"
    {\n       description\n         \"IP parameters on interfaces.\n          If an
    interface is not capable of running IP, the server\n          must not allow the
    client to configure these parameters.\";\n       container ipv4 {\n         presence\n
    \          \"Enables IPv4 unless the 'enabled' leaf\n            (which defaults
    to 'true') is set to 'false'\";\n         description\n           \"Parameters
    for the IPv4 address family.\";\n         leaf enabled {\n           type boolean;\n
    \          default true;\n           description\n             \"Controls whether
    IPv4 is enabled or disabled on this\n              interface.  When IPv4 is enabled,
    this interface is\n              connected to an IPv4 stack, and the interface
    can send\n              and receive IPv4 packets.\";\n         }\n         leaf
    forwarding {\n           type boolean;\n           default false;\n           description\n
    \            \"Controls IPv4 packet forwarding of datagrams received by,\n              but
    not addressed to, this interface.  IPv4 routers\n              forward datagrams.
    \ IPv4 hosts do not (except those\n              source-routed via the host).\";\n
    \        }\n         leaf mtu {\n           type uint16 {\n             range
    \"68..max\";\n           }\n           units \"octets\";\n           description\n
    \            \"The size, in octets, of the largest IPv4 packet that the\n              interface
    will send and receive.\n              The server may restrict the allowed values
    for this leaf,\n              depending on the interface's type.\n              If
    this leaf is not configured, the operationally used MTU\n              depends
    on the interface's type.\";\n           reference\n             \"RFC 791: Internet
    Protocol\";\n         }\n         list address {\n           key \"ip\";\n           description\n
    \            \"The list of IPv4 addresses on the interface.\";\n           leaf
    ip {\n             type inet:ipv4-address-no-zone;\n             description\n
    \              \"The IPv4 address on the interface.\";\n           }\n           choice
    subnet {\n             mandatory true;\n             description\n               \"The
    subnet can be specified as a prefix length or,\n                if the server
    supports non-contiguous netmasks, as\n                a netmask.\";\n             leaf
    prefix-length {\n               type uint8 {\n                 range \"0..32\";\n
    \              }\n               description\n                 \"The length of
    the subnet prefix.\";\n             }\n             leaf netmask {\n               if-feature
    ipv4-non-contiguous-netmasks;\n               type yang:dotted-quad;\n               description\n
    \                \"The subnet specified as a netmask.\";\n             }\n           }\n
    \          leaf origin {\n             type ip-address-origin;\n             config
    false;\n             description\n               \"The origin of this address.\";\n
    \          }\n         }\n         list neighbor {\n           key \"ip\";\n           description\n
    \            \"A list of mappings from IPv4 addresses to\n              link-layer
    addresses.\n              Entries in this list in the intended configuration are\n
    \             used as static entries in the ARP Cache.\n              In the operational
    state, this list represents the ARP\n              Cache.\";\n           reference\n
    \            \"RFC 826: An Ethernet Address Resolution Protocol\";\n           leaf
    ip {\n             type inet:ipv4-address-no-zone;\n             description\n
    \              \"The IPv4 address of the neighbor node.\";\n           }\n           leaf
    link-layer-address {\n             type yang:phys-address;\n             mandatory
    true;\n             description\n               \"The link-layer address of the
    neighbor node.\";\n           }\n           leaf origin {\n             type neighbor-origin;\n
    \            config false;\n             description\n               \"The origin
    of this neighbor entry.\";\n           }\n         }\n       }\n       container
    ipv6 {\n         presence\n           \"Enables IPv6 unless the 'enabled' leaf\n
    \           (which defaults to 'true') is set to 'false'\";\n         description\n
    \          \"Parameters for the IPv6 address family.\";\n         leaf enabled
    {\n           type boolean;\n           default true;\n           description\n
    \            \"Controls whether IPv6 is enabled or disabled on this\n              interface.
    \ When IPv6 is enabled, this interface is\n              connected to an IPv6
    stack, and the interface can send\n              and receive IPv6 packets.\";\n
    \        }\n         leaf forwarding {\n           type boolean;\n           default
    false;\n           description\n             \"Controls IPv6 packet forwarding
    of datagrams received by,\n              but not addressed to, this interface.
    \ IPv6 routers\n              forward datagrams.  IPv6 hosts do not (except those\n
    \             source-routed via the host).\";\n           reference\n             \"RFC
    4861: Neighbor Discovery for IP version 6 (IPv6)\n                        Section
    6.2.1, IsRouter\";\n         }\n         leaf mtu {\n           type uint32 {\n
    \            range \"1280..max\";\n           }\n           units \"octets\";\n
    \          description\n             \"The size, in octets, of the largest IPv6
    packet that the\n              interface will send and receive.\n              The
    server may restrict the allowed values for this leaf,\n              depending
    on the interface's type.\n              If this leaf is not configured, the operationally
    used MTU\n              depends on the interface's type.\";\n           reference\n
    \            \"RFC 8200: Internet Protocol, Version 6 (IPv6)\n                        Specification\n
    \                       Section 5\";\n         }\n         list address {\n           key
    \"ip\";\n           description\n             \"The list of IPv6 addresses on
    the interface.\";\n           leaf ip {\n             type inet:ipv6-address-no-zone;\n
    \            description\n               \"The IPv6 address on the interface.\";\n
    \          }\n           leaf prefix-length {\n             type uint8 {\n               range
    \"0..128\";\n             }\n             mandatory true;\n             description\n
    \              \"The length of the subnet prefix.\";\n           }\n           leaf
    origin {\n             type ip-address-origin;\n             config false;\n             description\n
    \              \"The origin of this address.\";\n           }\n           leaf
    status {\n             type enumeration {\n               enum preferred {\n                 description\n
    \                  \"This is a valid address that can appear as the\n                    destination
    or source address of a packet.\";\n               }\n               enum deprecated
    {\n                 description\n                   \"This is a valid but deprecated
    address that should\n                    no longer be used as a source address
    in new\n                    communications, but packets addressed to such an\n
    \                   address are processed as expected.\";\n               }\n
    \              enum invalid {\n                 description\n                   \"This
    isn't a valid address, and it shouldn't appear\n                    as the destination
    or source address of a packet.\";\n               }\n               enum inaccessible
    {\n                 description\n                   \"The address is not accessible
    because the interface\n                    to which this address is assigned is
    not\n                    operational.\";\n               }\n               enum
    unknown {\n                 description\n                   \"The status cannot
    be determined for some reason.\";\n               }\n               enum tentative
    {\n                 description\n                   \"The uniqueness of the address
    on the link is being\n                    verified.  Addresses in this state should
    not be\n                    used for general communication and should only be\n
    \                   used to determine the uniqueness of the address.\";\n               }\n
    \              enum duplicate {\n                 description\n                   \"The
    address has been determined to be non-unique on\n                    the link
    and so must not be used.\";\n               }\n               enum optimistic
    {\n                 description\n                   \"The address is available
    for use, subject to\n                    restrictions, while its uniqueness on
    a link is\n                    being verified.\";\n               }\n             }\n
    \            config false;\n             description\n               \"The status
    of an address.  Most of the states correspond\n                to states from
    the IPv6 Stateless Address\n                Autoconfiguration protocol.\";\n             reference\n
    \              \"RFC 4293: Management Information Base for the\n                          Internet
    Protocol (IP)\n                          - IpAddressStatusTC\n                RFC
    4862: IPv6 Stateless Address Autoconfiguration\";\n           }\n         }\n
    \        list neighbor {\n           key \"ip\";\n           description\n             \"A
    list of mappings from IPv6 addresses to\n              link-layer addresses.\n
    \             Entries in this list in the intended configuration are\n              used
    as static entries in the Neighbor Cache.\n              In the operational state,
    this list represents the\n              Neighbor Cache.\";\n           reference\n
    \            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n           leaf
    ip {\n             type inet:ipv6-address-no-zone;\n             description\n
    \              \"The IPv6 address of the neighbor node.\";\n           }\n           leaf
    link-layer-address {\n             type yang:phys-address;\n             mandatory
    true;\n             description\n               \"The link-layer address of the
    neighbor node.\n                In the operational state, if the neighbor's 'state'
    leaf\n                is 'incomplete', this leaf is not instantiated.\";\n           }\n
    \          leaf origin {\n             type neighbor-origin;\n             config
    false;\n             description\n               \"The origin of this neighbor
    entry.\";\n           }\n           leaf is-router {\n             type empty;\n
    \            config false;\n             description\n               \"Indicates
    that the neighbor node acts as a router.\";\n           }\n           leaf state
    {\n             type enumeration {\n               enum incomplete {\n                 description\n
    \                  \"Address resolution is in progress, and the\n                    link-layer
    address of the neighbor has not yet been\n                    determined.\";\n
    \              }\n               enum reachable {\n                 description\n
    \                  \"Roughly speaking, the neighbor is known to have been\n                    reachable
    recently (within tens of seconds ago).\";\n               }\n               enum
    stale {\n                 description\n                   \"The neighbor is no
    longer known to be reachable, but\n                    until traffic is sent to
    the neighbor no attempt\n                    should be made to verify its reachability.\";\n
    \              }\n               enum delay {\n                 description\n
    \                  \"The neighbor is no longer known to be reachable, and\n                    traffic
    has recently been sent to the neighbor.\n                    Rather than probe
    the neighbor immediately, however,\n                    delay sending probes for
    a short while in order to\n                    give upper-layer protocols a chance
    to provide\n                    reachability confirmation.\";\n               }\n
    \              enum probe {\n                 description\n                   \"The
    neighbor is no longer known to be reachable, and\n                    unicast
    Neighbor Solicitation probes are being sent\n                    to verify reachability.\";\n
    \              }\n             }\n             config false;\n             description\n
    \              \"The Neighbor Unreachability Detection state of this\n                entry.\";\n
    \            reference\n               \"RFC 4861: Neighbor Discovery for IP version
    6 (IPv6)\n                          Section 7.3.2\";\n           }\n         }\n
    \        leaf dup-addr-detect-transmits {\n           type uint32;\n           default
    1;\n           description\n             \"The number of consecutive Neighbor
    Solicitation messages\n              sent while performing Duplicate Address Detection
    on a\n              tentative address.  A value of zero indicates that\n              Duplicate
    Address Detection is not performed on\n              tentative addresses.  A value
    of one indicates a single\n              transmission with no follow-up retransmissions.\";\n
    \          reference\n             \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n
    \        }\n         container autoconf {\n           description\n             \"Parameters
    to control the autoconfiguration of IPv6\n              addresses, as described
    in RFC 4862.\";\n           reference\n             \"RFC 4862: IPv6 Stateless
    Address Autoconfiguration\";\n           leaf create-global-addresses {\n             type
    boolean;\n             default true;\n             description\n               \"If
    enabled, the host creates global addresses as\n                described in RFC
    4862.\";\n             reference\n               \"RFC 4862: IPv6 Stateless Address
    Autoconfiguration\n                          Section 5.5\";\n           }\n           leaf
    create-temporary-addresses {\n             if-feature ipv6-privacy-autoconf;\n
    \            type boolean;\n             default false;\n             description\n
    \              \"If enabled, the host creates temporary addresses as\n                described
    in RFC 4941.\";\n             reference\n               \"RFC 4941: Privacy Extensions
    for Stateless Address\n                          Autoconfiguration in IPv6\";\n
    \          }\n           leaf temporary-valid-lifetime {\n             if-feature
    ipv6-privacy-autoconf;\n             type uint32;\n             units \"seconds\";\n
    \            default 604800;\n             description\n               \"The time
    period during which the temporary address\n                is valid.\";\n             reference\n
    \              \"RFC 4941: Privacy Extensions for Stateless Address\n                          Autoconfiguration
    in IPv6\n                          - TEMP_VALID_LIFETIME\";\n           }\n           leaf
    temporary-preferred-lifetime {\n             if-feature ipv6-privacy-autoconf;\n
    \            type uint32;\n             units \"seconds\";\n             default
    86400;\n             description\n               \"The time period during which
    the temporary address is\n                preferred.\";\n             reference\n
    \              \"RFC 4941: Privacy Extensions for Stateless Address\n                          Autoconfiguration
    in IPv6\n                          - TEMP_PREFERRED_LIFETIME\";\n           }\n
    \        }\n       }\n     }\n     /*\n      * Legacy operational state data nodes\n
    \     */\n     augment \"/if:interfaces-state/if:interface\" {\n       status
    deprecated;\n       description\n         \"Data nodes for the operational state
    of IP on interfaces.\";\n       container ipv4 {\n         presence\n           \"Present
    if IPv4 is enabled on this interface\";\n         config false;\n         status
    deprecated;\n         description\n           \"Interface-specific parameters
    for the IPv4 address family.\";\n         leaf forwarding {\n           type boolean;\n
    \          status deprecated;\n           description\n             \"Indicates
    whether IPv4 packet forwarding is enabled or\n              disabled on this interface.\";\n
    \        }\n         leaf mtu {\n           type uint16 {\n             range
    \"68..max\";\n           }\n           units \"octets\";\n           status deprecated;\n
    \          description\n             \"The size, in octets, of the largest IPv4
    packet that the\n              interface will send and receive.\";\n           reference\n
    \            \"RFC 791: Internet Protocol\";\n         }\n         list address
    {\n           key \"ip\";\n           status deprecated;\n           description\n
    \            \"The list of IPv4 addresses on the interface.\";\n           leaf
    ip {\n             type inet:ipv4-address-no-zone;\n             status deprecated;\n
    \            description\n               \"The IPv4 address on the interface.\";\n
    \          }\n           choice subnet {\n             status deprecated;\n             description\n
    \              \"The subnet can be specified as a prefix length or,\n                if
    the server supports non-contiguous netmasks, as\n                a netmask.\";\n
    \            leaf prefix-length {\n               type uint8 {\n                 range
    \"0..32\";\n               }\n               status deprecated;\n               description\n
    \                \"The length of the subnet prefix.\";\n             }\n             leaf
    netmask {\n               if-feature ipv4-non-contiguous-netmasks;\n               type
    yang:dotted-quad;\n               status deprecated;\n               description\n
    \                \"The subnet specified as a netmask.\";\n             }\n           }\n
    \          leaf origin {\n             type ip-address-origin;\n             status
    deprecated;\n             description\n               \"The origin of this address.\";\n
    \          }\n         }\n         list neighbor {\n           key \"ip\";\n           status
    deprecated;\n           description\n             \"A list of mappings from IPv4
    addresses to\n              link-layer addresses.\n              This list represents
    the ARP Cache.\";\n           reference\n             \"RFC 826: An Ethernet Address
    Resolution Protocol\";\n           leaf ip {\n             type inet:ipv4-address-no-zone;\n
    \            status deprecated;\n             description\n               \"The
    IPv4 address of the neighbor node.\";\n           }\n           leaf link-layer-address
    {\n             type yang:phys-address;\n             status deprecated;\n             description\n
    \              \"The link-layer address of the neighbor node.\";\n           }\n
    \          leaf origin {\n             type neighbor-origin;\n             status
    deprecated;\n             description\n               \"The origin of this neighbor
    entry.\";\n           }\n         }\n       }\n       container ipv6 {\n         presence\n
    \          \"Present if IPv6 is enabled on this interface\";\n         config
    false;\n         status deprecated;\n         description\n           \"Parameters
    for the IPv6 address family.\";\n         leaf forwarding {\n           type boolean;\n
    \          default false;\n           status deprecated;\n           description\n
    \            \"Indicates whether IPv6 packet forwarding is enabled or\n              disabled
    on this interface.\";\n           reference\n             \"RFC 4861: Neighbor
    Discovery for IP version 6 (IPv6)\n                        Section 6.2.1, IsRouter\";\n
    \        }\n         leaf mtu {\n           type uint32 {\n             range
    \"1280..max\";\n           }\n           units \"octets\";\n           status
    deprecated;\n           description\n             \"The size, in octets, of the
    largest IPv6 packet that the\n              interface will send and receive.\";\n
    \          reference\n             \"RFC 8200: Internet Protocol, Version 6 (IPv6)\n
    \                       Specification\n                        Section 5\";\n
    \        }\n         list address {\n           key \"ip\";\n           status
    deprecated;\n           description\n             \"The list of IPv6 addresses
    on the interface.\";\n           leaf ip {\n             type inet:ipv6-address-no-zone;\n
    \            status deprecated;\n             description\n               \"The
    IPv6 address on the interface.\";\n           }\n           leaf prefix-length
    {\n             type uint8 {\n               range \"0..128\";\n             }\n
    \            mandatory true;\n             status deprecated;\n             description\n
    \              \"The length of the subnet prefix.\";\n           }\n           leaf
    origin {\n             type ip-address-origin;\n             status deprecated;\n
    \            description\n               \"The origin of this address.\";\n           }\n
    \          leaf status {\n             type enumeration {\n               enum
    preferred {\n                 description\n                   \"This is a valid
    address that can appear as the\n                    destination or source address
    of a packet.\";\n               }\n               enum deprecated {\n                 description\n
    \                  \"This is a valid but deprecated address that should\n                    no
    longer be used as a source address in new\n                    communications,
    but packets addressed to such an\n                    address are processed as
    expected.\";\n               }\n               enum invalid {\n                 description\n
    \                  \"This isn't a valid address, and it shouldn't appear\n                    as
    the destination or source address of a packet.\";\n               }\n               enum
    inaccessible {\n                 description\n                   \"The address
    is not accessible because the interface\n                    to which this address
    is assigned is not\n                    operational.\";\n               }\n               enum
    unknown {\n                 description\n                   \"The status cannot
    be determined for some reason.\";\n               }\n               enum tentative
    {\n                 description\n                   \"The uniqueness of the address
    on the link is being\n                    verified.  Addresses in this state should
    not be\n                    used for general communication and should only be\n
    \                   used to determine the uniqueness of the address.\";\n               }\n
    \              enum duplicate {\n                 description\n                   \"The
    address has been determined to be non-unique on\n                    the link
    and so must not be used.\";\n               }\n               enum optimistic
    {\n                 description\n                   \"The address is available
    for use, subject to\n                    restrictions, while its uniqueness on
    a link is\n                    being verified.\";\n               }\n             }\n
    \            status deprecated;\n             description\n               \"The
    status of an address.  Most of the states correspond\n                to states
    from the IPv6 Stateless Address\n                Autoconfiguration protocol.\";\n
    \            reference\n               \"RFC 4293: Management Information Base
    for the\n                          Internet Protocol (IP)\n                          -
    IpAddressStatusTC\n                RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n
    \          }\n         }\n         list neighbor {\n           key \"ip\";\n           status
    deprecated;\n           description\n             \"A list of mappings from IPv6
    addresses to\n              link-layer addresses.\n              This list represents
    the Neighbor Cache.\";\n           reference\n             \"RFC 4861: Neighbor
    Discovery for IP version 6 (IPv6)\";\n           leaf ip {\n             type
    inet:ipv6-address-no-zone;\n             status deprecated;\n             description\n
    \              \"The IPv6 address of the neighbor node.\";\n           }\n           leaf
    link-layer-address {\n             type yang:phys-address;\n             status
    deprecated;\n             description\n               \"The link-layer address
    of the neighbor node.\";\n           }\n           leaf origin {\n             type
    neighbor-origin;\n             status deprecated;\n             description\n
    \              \"The origin of this neighbor entry.\";\n           }\n           leaf
    is-router {\n             type empty;\n             status deprecated;\n             description\n
    \              \"Indicates that the neighbor node acts as a router.\";\n           }\n
    \          leaf state {\n             type enumeration {\n               enum
    incomplete {\n                 description\n                   \"Address resolution
    is in progress, and the\n                    link-layer address of the neighbor
    has not yet been\n                    determined.\";\n               }\n               enum
    reachable {\n                 description\n                   \"Roughly speaking,
    the neighbor is known to have been\n                    reachable recently (within
    tens of seconds ago).\";\n               }\n               enum stale {\n                 description\n
    \                  \"The neighbor is no longer known to be reachable, but\n                    until
    traffic is sent to the neighbor no attempt\n                    should be made
    to verify its reachability.\";\n               }\n               enum delay {\n
    \                description\n                   \"The neighbor is no longer known
    to be reachable, and\n                    traffic has recently been sent to the
    neighbor.\n                    Rather than probe the neighbor immediately, however,\n
    \                   delay sending probes for a short while in order to\n                    give
    upper-layer protocols a chance to provide\n                    reachability confirmation.\";\n
    \              }\n               enum probe {\n                 description\n
    \                  \"The neighbor is no longer known to be reachable, and\n                    unicast
    Neighbor Solicitation probes are being sent\n                    to verify reachability.\";\n
    \              }\n             }\n             status deprecated;\n             description\n
    \              \"The Neighbor Unreachability Detection state of this\n                entry.\";\n
    \            reference\n               \"RFC 4861: Neighbor Discovery for IP version
    6 (IPv6)\n                          Section 7.3.2\";\n           }\n         }\n
    \      }\n     }\n   }\n   <CODE ENDS>\n"
  title: 4.  IP Management YANG Module
- contents:
  - "5.  IANA Considerations\n   This document registers a URI in the \"IETF XML Registry\"
    [RFC3688].\n   Following the format in RFC 3688, the following registration has
    been\n   made.\n      URI: urn:ietf:params:xml:ns:yang:ietf-ip\n      Registrant
    Contact: The NETMOD WG of the IETF.\n      XML: N/A; the requested URI is an XML
    namespace.\n   This document registers a YANG module in the \"YANG Module Names\"\n
    \  registry [RFC6020].\n      Name:         ietf-ip\n      Namespace:    urn:ietf:params:xml:ns:yang:ietf-ip\n
    \     Prefix:       ip\n      Reference:    RFC 8344\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The YANG module specified in this document defines
    a schema for data\n   that is designed to be accessed via network management protocols
    such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer\n
    \  is the secure transport layer, and the mandatory-to-implement secure\n   transport
    is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is HTTPS, and
    the mandatory-to-implement secure transport is TLS\n   [RFC5246].\n   The NETCONF
    access control model [RFC8341] provides the means to\n   restrict access for particular
    NETCONF or RESTCONF users to a\n   preconfigured subset of all available NETCONF
    or RESTCONF protocol\n   operations and content.\n   There are a number of data
    nodes defined in this YANG module that are\n   writable/creatable/deletable (i.e.,
    config true, which is the\n   default).  These data nodes may be considered sensitive
    or vulnerable\n   in some network environments.  Write operations (e.g., edit-config)\n
    \  to these data nodes without proper protection can have a negative\n   effect
    on network operations.  These are the subtrees and data nodes\n   and their sensitivity/vulnerability:\n
    \  ipv4/enabled and ipv6/enabled:  These leafs are used to enable or\n      disable
    IPv4 and IPv6 on a specific interface.  By enabling a\n      protocol on an interface,
    an attacker might be able to create an\n      unsecured path into a node (or through
    it if routing is also\n      enabled).  By disabling a protocol on an interface,
    an attacker\n      might be able to force packets to be routed through some other\n
    \     interface or deny access to some or all of the network via that\n      protocol.\n
    \  ipv4/address and ipv6/address:  These lists specify the configured IP\n      addresses
    on an interface.  By modifying this information, an\n      attacker can cause
    a node to either ignore messages destined to it\n      or accept (at least at
    the IP layer) messages it would otherwise\n      ignore.  The use of filtering
    or security associations may reduce\n      the potential damage in the latter
    case.\n   ipv4/forwarding and ipv6/forwarding:  These leafs allow a client to\n
    \     enable or disable the forwarding functions on the entity.  By\n      disabling
    the forwarding functions, an attacker would possibly be\n      able to deny service
    to users.  By enabling the forwarding\n      functions, an attacker could open
    a conduit into an area.  This\n      might result in the area providing transit
    for packets it\n      shouldn't, or it might allow the attacker access to the
    area,\n      bypassing security safeguards.\n   ipv6/autoconf:  The leafs in this
    branch control the\n      autoconfiguration of IPv6 addresses and, in particular,
    whether or\n      not temporary addresses are used.  By modifying the corresponding\n
    \     leafs, an attacker might impact the addresses used by a node and\n      --
    thus, indirectly -- the privacy of the users using the node.\n   ipv4/mtu and
    ipv6/mtu:  Setting these leafs to very small values can\n      be used to slow
    down interfaces.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC791]   Postel, J., \"Internet Protocol\",
      STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September 1981,\n              <https://www.rfc-editor.org/info/rfc791>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3688]  Mealling,
      M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688,
      January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC4861]
      \ Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861,
      September 2007,\n              <https://www.rfc-editor.org/info/rfc4861>.\n
      \  [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address
      Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862, September
      2007,\n              <https://www.rfc-editor.org/info/rfc4862>.\n   [RFC4941]
      \ Narten, T., Draves, R., and S. Krishnan, \"Privacy\n              Extensions
      for Stateless Address Autoconfiguration in\n              IPv6\", RFC 4941,
      DOI 10.17487/RFC4941, September 2007,\n              <https://www.rfc-editor.org/info/rfc4941>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6020]
      \ Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC
      6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC
      2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May
      2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]
      \ Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)
      Specification\", STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July
      2017,\n              <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8341]
      \ Bierman, A. and M. Bjorklund, \"Network Configuration\n              Access
      Control Model\", STD 91, RFC 8341,\n              DOI 10.17487/RFC8341, March
      2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8342]
      \ Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\",
      RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n
      \  [RFC8343]  Bjorklund, M., \"A YANG Data Model for Interface\n              Management\",
      RFC 8343, DOI 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n
      \  [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,
      M., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)
      1.0\n              (Fifth Edition)\", World Wide Web Consortium Recommendation\n
      \             REC-xml-20081126, November 2008,\n              <https://www.w3.org/TR/2008/REC-xml-20081126>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC826]   Plummer, D., \"An Ethernet Address
      Resolution Protocol: Or\n              Converting Network Protocol Addresses
      to 48.bit Ethernet\n              Address for Transmission on Ethernet Hardware\",
      STD 37,\n              RFC 826, DOI 10.17487/RFC0826, November 1982,\n              <https://www.rfc-editor.org/info/rfc826>.\n
      \  [RFC4293]  Routhier, S., Ed., \"Management Information Base for the\n              Internet
      Protocol (IP)\", RFC 4293, DOI 10.17487/RFC4293,\n              April 2006,
      <https://www.rfc-editor.org/info/rfc4293>.\n   [RFC7217]  Gont, F., \"A Method
      for Generating Semantically Opaque\n              Interface Identifiers with
      IPv6 Stateless Address\n              Autoconfiguration (SLAAC)\", RFC 7217,\n
      \             DOI 10.17487/RFC7217, April 2014,\n              <https://www.rfc-editor.org/info/rfc7217>.\n
      \  [RFC8022]  Lhotka, L. and A. Lindem, \"A YANG Data Model for Routing\n              Management\",
      RFC 8022, DOI 10.17487/RFC8022,\n              November 2016, <https://www.rfc-editor.org/info/rfc8022>.\n
      \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP
      215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Example: NETCONF <get-config> Reply\n   This section gives an example
    of a reply to the NETCONF <get-config>\n   request for the running configuration
    datastore for a device that\n   implements the data model defined in this document.\n
    \  The XML [W3C.REC-xml-20081126] snippets that follow in this section\n   and
    in Appendix B are provided as examples only.\n   <rpc-reply\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n
    \      message-id=\"101\">\n     <data>\n       <interfaces\n           xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n
    \          xmlns:ianaift=\"urn:ietf:params:xml:ns:yang:iana-if-type\">\n         <interface>\n
    \          <name>eth0</name>\n           <type>ianaift:ethernetCsmacd</type>\n
    \          <ipv4 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\">\n             <address>\n
    \              <ip>192.0.2.1</ip>\n               <prefix-length>24</prefix-length>\n
    \            </address>\n           </ipv4>\n           <ipv6 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\">\n
    \            <mtu>1280</mtu>\n             <address>\n               <ip>2001:db8::10</ip>\n
    \              <prefix-length>32</prefix-length>\n             </address>\n             <dup-addr-detect-transmits>0</dup-addr-detect-transmits>\n
    \          </ipv6>\n         </interface>\n       </interfaces>\n     </data>\n
    \  </rpc-reply>\n"
  title: 'Appendix A.  Example: NETCONF <get-config> Reply'
- contents:
  - "Appendix B.  Example: NETCONF <get-data> Reply\n   This section gives an example
    of a reply to the NETCONF <get-data>\n   request for the operational state datastore
    for a device that\n   implements the data model defined in this document.\n   This
    example uses the \"origin\" annotation, which is defined in the\n   module \"ietf-origin\"
    [RFC8342].\n   <rpc-reply\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n
    \      message-id=\"101\">\n     <data xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-datastores\">\n
    \      <interfaces\n           xmlns=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n
    \          xmlns:ianaift=\"urn:ietf:params:xml:ns:yang:iana-if-type\"\n           xmlns:or=\"urn:ietf:params:xml:ns:yang:ietf-origin\">\n
    \        <interface or:origin=\"or:intended\">\n           <name>eth0</name>\n
    \          <type>ianaift:ethernetCsmacd</type>\n           <!-- other parameters
    from ietf-interfaces omitted -->\n           <ipv4 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\">\n
    \            <enabled or:origin=\"or:default\">true</enabled>\n             <forwarding
    or:origin=\"or:default\">false</forwarding>\n             <mtu or:origin=\"or:system\">1500</mtu>\n
    \            <address>\n               <ip>192.0.2.1</ip>\n               <prefix-length>24</prefix-length>\n
    \              <origin>static</origin>\n             </address>\n             <neighbor
    or:origin=\"or:learned\">\n               <ip>192.0.2.2</ip>\n               <link-layer-address>\n
    \                00:00:5E:00:53:AB\n               </link-layer-address>\n             </neighbor>\n
    \          </ipv4>\n           <ipv6 xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ip\">\n
    \            <enabled or:origin=\"or:default\">true</enabled>\n             <forwarding
    or:origin=\"or:default\">false</forwarding>\n             <mtu>1280</mtu>\n             <address>\n
    \              <ip>2001:db8::10</ip>\n               <prefix-length>32</prefix-length>\n
    \              <origin>static</origin>\n               <status>preferred</status>\n
    \            </address>\n             <address or:origin=\"or:learned\">\n               <ip>2001:db8::1:100</ip>\n
    \              <prefix-length>32</prefix-length>\n               <origin>dhcp</origin>\n
    \              <status>preferred</status>\n             </address>\n             <dup-addr-detect-transmits>0</dup-addr-detect-transmits>\n
    \            <neighbor or:origin=\"or:learned\">\n               <ip>2001:db8::1</ip>\n
    \              <link-layer-address>\n                 00:00:5E:00:53:AB\n               </link-layer-address>\n
    \              <origin>dynamic</origin>\n               <is-router/>\n               <state>reachable</state>\n
    \            </neighbor>\n             <neighbor or:origin=\"or:learned\">\n               <ip>2001:db8::4</ip>\n
    \              <origin>dynamic</origin>\n               <state>incomplete</state>\n
    \            </neighbor>\n           </ipv6>\n         </interface>\n       </interfaces>\n
    \    </data>\n   </rpc-reply>\n"
  title: 'Appendix B.  Example: NETCONF <get-data> Reply'
- contents:
  - "Acknowledgments\n   The author wishes to thank Jeffrey Lange, Ladislav Lhotka,
    Juergen\n   Schoenwaelder, and Dave Thaler for their helpful comments.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n"
  title: Author's Address
