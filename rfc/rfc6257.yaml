- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                         S. Symington
  contents:
  - "Internet Research Task Force (IRTF)                         S. Symington\n  \
    \               Bundle Security Protocol Specification\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the bundle security protocol, which provides\n\
    \   data integrity and confidentiality services for the Bundle Protocol.\n   Separate\
    \ capabilities are provided to protect the bundle payload and\n   additional data\
    \ that may be included within the bundle.  We also\n   describe various security\
    \ considerations including some policy\n   options.\n   This document is a product\
    \ of the Delay-Tolerant Networking Research\n   Group and has been reviewed by\
    \ that group.  No objections to its\n   publication as an RFC were raised.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Research Task\n   Force (IRTF).\
    \  The IRTF publishes the results of Internet-related\n   research and development\
    \ activities.  These results might not be\n   suitable for deployment.  This RFC\
    \ represents the consensus of the\n   Delay-Tolerant Networking Research Group\
    \ of the Internet Research\n   Task Force (IRTF).  Documents approved for publication\
    \ by the IRSG\n   are not a candidate for any level of Internet Standard; see\
    \ Section 2\n   of RFC 5741.\n   Information about the current status of this\
    \ document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6257.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Related Documents ..........................................4\n  \
    \    1.2. Terminology ................................................5\n   2.\
    \ Security Blocks .................................................8\n      2.1.\
    \ Abstract Security Block ....................................9\n      2.2. Bundle\
    \ Authentication Block ...............................13\n      2.3. Payload Integrity\
    \ Block ...................................15\n      2.4. Payload Confidentiality\
    \ Block .............................16\n      2.5. Extension Security Block ..................................20\n\
    \      2.6. Parameters and Result Fields ..............................21\n  \
    \    2.7. Key Transport .............................................23\n    \
    \  2.8. PIB and PCB Combinations ..................................24\n   3. Security\
    \ Processing ............................................25\n      3.1. Nodes\
    \ as Policy Enforcement Points ........................26\n      3.2. Processing\
    \ Order of Security Blocks .......................26\n      3.3. Security Regions\
    \ ..........................................29\n      3.4. Canonicalization of\
    \ Bundles ...............................31\n      3.5. Endpoint ID Confidentiality\
    \ ...............................37\n      3.6. Bundles Received from Other Nodes\
    \ .........................38\n      3.7. The At-Most-Once-Delivery Option ..........................39\n\
    \      3.8. Bundle Fragmentation and Reassembly .......................40\n  \
    \    3.9. Reactive Fragmentation ....................................41\n    \
    \  3.10. Attack Model .............................................42\n   4. Mandatory\
    \ Ciphersuites .........................................42\n      4.1. BAB-HMAC\
    \ ..................................................42\n      4.2. PIB-RSA-SHA256\
    \ ............................................43\n      4.3. PCB-RSA-AES128-PAYLOAD-PIB-PCB\
    \ ............................44\n      4.4. ESB-RSA-AES128-EXT ........................................48\n\
    \   5. Key Management .................................................51\n  \
    \ 6. Default Security Policy ........................................51\n   7.\
    \ Security Considerations ........................................53\n   8. Conformance\
    \ ....................................................55\n   9. IANA Considerations\
    \ ............................................56\n      9.1. Bundle Block Types\
    \ ........................................56\n      9.2. Ciphersuite Numbers .......................................56\n\
    \      9.3. Ciphersuite Flags .........................................56\n  \
    \    9.4. Parameters and Results ....................................57\n   10.\
    \ References ....................................................58\n      10.1.\
    \ Normative References .....................................58\n      10.2. Informative\
    \ References ...................................59\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines security features for the Bundle Protocol\n\
    \   [DTNBP] intended for use in delay-tolerant networks, in order to\n   provide\
    \ Delay-Tolerant Networking (DTN) security services.\n   The Bundle Protocol is\
    \ used in DTNs that overlay multiple networks,\n   some of which may be challenged\
    \ by limitations such as intermittent\n   and possibly unpredictable loss of connectivity,\
    \ long or variable\n   delay, asymmetric data rates, and high error rates.  The\
    \ purpose of\n   the Bundle Protocol is to support interoperability across such\n\
    \   stressed networks.  The Bundle Protocol is layered on top of\n   underlay-network-specific\
    \ convergence layers, on top of network-\n   specific lower layers, to enable\
    \ an application in one network to\n   communicate with an application in another\
    \ network, both of which are\n   spanned by the DTN.\n   Security will be important\
    \ for the Bundle Protocol.  The stressed\n   environment of the underlying networks\
    \ over which the Bundle Protocol\n   will operate makes it important for the DTN\
    \ to be protected from\n   unauthorized use, and this stressed environment poses\
    \ unique\n   challenges for the mechanisms needed to secure the Bundle Protocol.\n\
    \   Furthermore, DTNs may very likely be deployed in environments where a\n  \
    \ portion of the network might become compromised, posing the usual\n   security\
    \ challenges related to confidentiality, integrity, and\n   availability.\n  \
    \ Different security processing applies to the payload and extension\n   blocks\
    \ that may accompany it in a bundle, and different rules apply\n   to various\
    \ extension blocks.\n   This document describes both the base Bundle Security\
    \ Protocol (BSP)\n   and a set of mandatory ciphersuites.  A ciphersuite is a\
    \ specific\n   collection of various cryptographic algorithms and implementation\n\
    \   rules that are used together to provide certain security services.\n   The\
    \ Bundle Security Protocol applies, by definition, only to those\n   nodes that\
    \ implement it, known as \"security-aware\" nodes.  There MAY\n   be other nodes\
    \ in the DTN that do not implement BSP.  All nodes can\n   interoperate with the\
    \ exception that BSP security operations can only\n   happen at security-aware\
    \ nodes.\n"
- title: 1.1.  Related Documents
  contents:
  - "1.1.  Related Documents\n   This document is best read and understood within\
    \ the context of the\n   following other DTN documents:\n      \"Delay-Tolerant\
    \ Networking Architecture\" [DTNarch] defines the\n      architecture for delay-tolerant\
    \ networks, but does not discuss\n      security at any length.\n      The DTN\
    \ Bundle Protocol [DTNBP] defines the format and processing\n      of the blocks\
    \ used to implement the Bundle Protocol, excluding the\n      security-specific\
    \ blocks defined here.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   We introduce the following terminology for\
    \ purposes of clarity:\n      source - the bundle node from which a bundle originates\n\
    \      destination - the bundle node to which a bundle is ultimately\n      destined\n\
    \      forwarder - the bundle node that forwarded the bundle on its most\n   \
    \   recent hop\n      intermediate receiver or \"next hop\" - the neighboring\
    \ bundle node\n      to which a forwarder forwards a bundle.\n      path - the\
    \ ordered sequence of nodes through which a bundle passes\n      on its way from\
    \ source to destination\n   In the figure below, which is adapted from figure\
    \ 1 in the Bundle\n   Protocol Specification [DTNBP], four bundle nodes (denoted\
    \ BN1, BN2,\n   BN3, and BN4) reside above some transport layer(s).  Three distinct\n\
    \   transport and network protocols (denoted T1/N1, T2/N2, and T3/N3) are\n  \
    \ also shown.\n   +---------v-|   +->>>>>>>>>>v-+     +->>>>>>>>>>v-+   +-^---------+\n\
    \   | BN1     v |   | ^   BN2   v |     | ^   BN3   v |   | ^  BN4    |\n   +---------v-+\
    \   +-^---------v-+     +-^---------v-+   +-^---------+\n   | T1      v |   +\
    \ ^  T1/T2  v |     + ^  T2/T3  v |   | ^  T3     |\n   +---------v-+   +-^---------v-+\
    \     +-^---------v +   +-^---------+\n   | N1      v |   | ^  N1/N2  v |    \
    \ | ^  N2/N3  v |   | ^  N3     |\n   +---------v-+   +-^---------v +     +-^---------v-+\
    \   +-^---------+\n   |         >>>>>>>>^         >>>>>>>>>>^         >>>>>>>>^\
    \         |\n   +-----------+   +------------+      +-------------+   +-----------+\n\
    \   |                     |                    |                      |\n   |<--\
    \  An Internet --->|                    |<--- An Internet  --->|\n   |       \
    \              |                    |                      |\n   BN = \"Bundle\
    \ Node\" as defined in the Bundle Protocol Specification\n            Figure 1:\
    \ Bundle Nodes Sit at the Application Layer\n                           of the\
    \ Internet Model\n   Bundle node BN1 originates a bundle that it forwards to BN2.\
    \  BN2\n   forwards the bundle to BN3, and BN3 forwards the bundle to BN4.  BN1\n\
    \   is the source of the bundle and BN4 is the destination of the bundle.\n  \
    \ BN1 is the first forwarder, and BN2 is the first intermediate\n   receiver;\
    \ BN2 then becomes the forwarder, and BN3 the intermediate\n   receiver; BN3 then\
    \ becomes the last forwarder, and BN4 the last\n   intermediate receiver, as well\
    \ as the destination.\n   If node BN2 originates a bundle (for example, a bundle\
    \ status report\n   or a custodial signal), which is then forwarded on to BN3,\
    \ and then\n   to BN4, then BN2 is the source of the bundle (as well as being\
    \ the\n   first forwarder of the bundle) and BN4 is the destination of the\n \
    \  bundle (as well as being the final intermediate receiver).\n   We introduce\
    \ the following security-specific DTN terminology:\n      security-source - a\
    \ bundle node that adds a security block to a\n      bundle\n      security-destination\
    \ - a bundle node that processes a security\n      block of a bundle\n      security\
    \ path - the ordered sequence of security-aware nodes\n      through which a bundle\
    \ passes on its way from the security-source\n      to the security-destination\n\
    \   Referring to Figure 1 again:\n   If the bundle that originates at BN1 is given\
    \ a security block by\n   BN1, then BN1 is the security-source of this bundle\
    \ with respect to\n   that security block, as well as being the source of the\
    \ bundle.\n   If the bundle that originates at BN1 is given a security block by\n\
    \   BN2, then BN2 is the security-source of this bundle with respect to\n   that\
    \ security block, even though BN1 is the source.\n   If the bundle that originates\
    \ at BN1 is given a security block by BN1\n   that is intended to be processed\
    \ by BN3, then BN1 is the security-\n   source and BN3 is the security-destination\
    \ with respect to this\n   security block.  The security path for this block is\
    \ BN1 to BN3.\n   A bundle MAY have multiple security blocks.  The security-source\
    \ of a\n   bundle, with respect to a given security block in the bundle, MAY be\n\
    \   the same as or different from the security-source of the bundle with\n   respect\
    \ to a different security block in the bundle.  Similarly, the\n   security-destination\
    \ of a bundle, with respect to each of that\n   bundle's security blocks, MAY\
    \ be the same or different.  Therefore,\n   the security paths for various blocks\
    \ MAY be, and often will be,\n   different.\n   If the bundle that originates\
    \ at BN1 is given a security block by BN1\n   that is intended to be processed\
    \ by BN3, and BN2 adds a security\n   block with security-destination BN4, the\
    \ security paths for the two\n   blocks overlap but not completely.  This problem\
    \ is discussed further\n   in Section 3.3.\n   As required in [DTNBP], forwarding\
    \ nodes MUST transmit blocks in a\n   bundle in the same order in which they were\
    \ received.  This\n   requirement applies to all DTN nodes, not just ones that\
    \ implement\n   security processing.  Blocks in a bundle MAY be added or deleted\n\
    \   according to the applicable specification, but those blocks that are\n   both\
    \ received and transmitted MUST be transmitted in the same order\n   that they\
    \ were received.\n   If a node is not security-aware, then it forwards the security\
    \ blocks\n   in the bundle unchanged unless the bundle's block processing flags\n\
    \   specify otherwise.  If a network has some nodes that are not\n   security-aware,\
    \ then the block processing flags SHOULD be set such\n   that security blocks\
    \ are not discarded at those nodes solely because\n   they cannot be processed\
    \ there.  Except for this, the non-security-\n   aware nodes are transparent relay\
    \ points and are invisible as far as\n   security processing is concerned.\n \
    \  The block sequence also indicates the order in which certain\n   significant\
    \ actions have affected the bundle, and therefore the\n   sequence in which actions\
    \ MUST occur in order to produce the bundle\n   at its destination.\n"
- title: 2.  Security Blocks
  contents:
  - "2.  Security Blocks\n   There are four types of security blocks that MAY be included\
    \ in a\n   bundle.  These are the Bundle Authentication Block (BAB), the Payload\n\
    \   Integrity Block (PIB), the Payload Confidentiality Block (PCB), and\n   the\
    \ Extension Security Block (ESB).\n      The BAB is used to ensure the authenticity\
    \ and integrity of the\n      bundle along a single hop from forwarder to intermediate\
    \ receiver.\n      Since security blocks are only processed at security-aware\
    \ nodes,\n      a \"single hop\" from a security-aware forwarder to the next\n\
    \      security-aware intermediate receiver might be more than one actual\n  \
    \    hop.  This situation is discussed further in Section 2.2.\n      The PIB\
    \ is used to ensure the authenticity and integrity of the\n      payload from\
    \ the PIB security-source, which creates the PIB, to\n      the PIB security-destination,\
    \ which verifies the PIB\n      authenticator.  The authentication information\
    \ in the PIB MAY (if\n      the ciphersuite allows) be verified by any node in\
    \ between the PIB\n      security-source and the PIB security-destination that\
    \ has access\n      to the cryptographic keys and revocation status information\n\
    \      required to do so.\n      Since a BAB protects a bundle on a \"hop-by-hop\"\
    \ basis and other\n      security blocks MAY be protecting over several hops or\
    \ end-to-end,\n      whenever both are present, the BAB MUST form the \"outer\"\
    \ layer of\n      protection -- that is, the BAB MUST always be calculated and\
    \ added\n      to the bundle after all other security blocks have been calculated\n\
    \      and added to the bundle.\n      The PCB indicates that the payload has\
    \ been encrypted, in whole or\n      in part, at the PCB security-source in order\
    \ to protect the bundle\n      content while in transit to the PCB security-destination.\n\
    \      PIB and PCB protect the payload and are regarded as \"payload-\n      related\"\
    \ for purposes of the security discussion in this document.\n      Other blocks\
    \ are regarded as \"non-payload\" blocks.  Of course, the\n      primary block\
    \ is unique and has separate rules.\n      The ESB provides security for non-payload\
    \ blocks in a bundle.\n      Therefore, ESB is not applied to PIBs or PCBs and,\
    \ of course, is\n      not appropriate for either the payload block or primary\
    \ block.\n   Each of the security blocks uses the Canonical Bundle Block Format\
    \ as\n   defined in the Bundle Protocol Specification.  That is, each security\n\
    \   block is comprised of the following elements:\n   o  Block-type code\n   o\
    \  Block processing control flags\n   o  Block EID-reference list (OPTIONAL)\n\
    \   o  Block data length\n   o  Block-type-specific data fields\n   Since the\
    \ four security blocks have most fields in common, we can\n   shorten the description\
    \ of the Block-type-specific data fields of\n   each security block if we first\
    \ define an abstract security block\n   (ASB) and then specify each of the real\
    \ blocks in terms of the fields\n   that are present/absent in an ASB.  Note that\
    \ no bundle ever contains\n   an actual ASB, which is simply a specification artifact.\n"
- title: 2.1.  Abstract Security Block
  contents:
  - "2.1.  Abstract Security Block\n   Many of the fields below use the \"SDNV\" type\
    \ defined in [DTNBP].\n   SDNV stands for Self-Delimiting Numeric Value.\n   An\
    \ ASB consists of the following mandatory and optional fields:\n   o  Block-type\
    \ code (one byte) - as in all bundle protocol blocks\n      except the primary\
    \ bundle block.  The block-type codes for the\n      security blocks are:\n  \
    \       BundleAuthenticationBlock - BAB: 0x02\n         PayloadIntegrityBlock\
    \ - PIB: 0x03\n         PayloadConfidentialityBlock - PCB: 0x04\n         ExtensionSecurityBlock\
    \ - ESB: 0x09\n   o  Block processing control flags (SDNV) - defined as in all\
    \ bundle\n      protocol blocks except the primary bundle block (as described\
    \ in\n      the Bundle Protocol Specification [DTNBP]).  SDNV encoding is\n  \
    \    described in the Bundle Protocol.  There are no general\n      constraints\
    \ on the use of the block processing control flags, and\n      some specific requirements\
    \ are discussed later.\n   o  EID-references - composite field defined in [DTNBP]\
    \ containing\n      references to one or two endpoint identifiers (EIDs).  Presence\
    \ of\n      the EID-reference field is indicated by the setting of the \"Block\n\
    \      contains an EID-reference field\" (EID_REF) bit of the block\n      processing\
    \ control flags.  If one or more references are present,\n      flags in the ciphersuite\
    \ ID field, described below, specify which.\n      If no EID fields are present,\
    \ then the composite field itself MUST\n      be omitted entirely and the EID_REF\
    \ bit MUST be unset.  A count\n      field of zero is not permitted.\n   o  The\
    \ possible EIDs are:\n      *  (OPTIONAL) Security-source - specifies the security-source\
    \ for\n         the block.  If this is omitted, then the source of the bundle\n\
    \         is assumed to be the security-source unless otherwise\n         indicated.\n\
    \      *  (OPTIONAL) Security-destination - specifies the security-\n        \
    \ destination for the block.  If this is omitted, then the\n         destination\
    \ of the bundle is assumed to be the security-\n         destination unless otherwise\
    \ indicated.\n      If two EIDs are present, security-source is first and security-\n\
    \      destination comes second.\n   o  Block data length (SDNV) - as in all bundle\
    \ protocol blocks except\n      the primary bundle block.  SDNV encoding is described\
    \ in the\n      Bundle Protocol.\n   o  Block-type-specific data fields as follows:\n\
    \      *  Ciphersuite ID (SDNV)\n      *  Ciphersuite flags (SDNV)\n      *  (OPTIONAL)\
    \ Correlator - when more than one related block is\n         inserted, then this\
    \ field MUST have the same value in each\n         related block instance.  This\
    \ is encoded as an SDNV.  See the\n         note in Section 3.8 with regard to\
    \ correlator values in bundle\n         fragments.\n      *  (OPTIONAL) Ciphersuite-parameters\
    \ - compound field of the next\n         two items\n         +  Ciphersuite-parameters\
    \ length - specifies the length of the\n            following Ciphersuite-parameters\
    \ data field and is encoded\n            as an SDNV.\n         +  Ciphersuite-parameters\
    \ data - parameters to be used with the\n            ciphersuite in use, e.g.,\
    \ a key identifier or initialization\n            vector (IV).  See Section 2.6\
    \ for a list of potential\n            parameters and their encoding rules.  The\
    \ particular set of\n            parameters that is included in this field is\
    \ defined as part\n            of the ciphersuite specification.\n      *  (OPTIONAL)\
    \ Security-result - compound field of the next two\n         items\n         +\
    \  Security-result length - contains the length of the next\n            field\
    \ and is encoded as an SDNV.\n         +  Security-result data - contains the\
    \ results of the\n            appropriate ciphersuite-specific calculation (e.g.,\
    \ a\n            signature, Message Authentication Code (MAC), or ciphertext\n\
    \            block key).\n   Although the diagram hints at a 32-bit layout, this\
    \ is purely for the\n   purpose of exposition.  Except for the \"type\" field,\
    \ all fields are\n   variable in length.\n   +----------------+----------------+----------------+----------------+\n\
    \   | type           |  flags (SDNV)  |  EID-ref list(comp)             |\n  \
    \ +----------------+----------------+----------------+----------------+\n   |\
    \ length (SDNV)                   |  ciphersuite (SDNV)             |\n   +----------------+----------------+----------------+----------------+\n\
    \   | ciphersuite flags (SDNV)        |  correlator  (SDNV)             |\n  \
    \ +----------------+----------------+----------------+----------------+\n   |params\
    \ len(SDNV)| ciphersuite params data                          |\n   +----------------+----------------+----------------+----------------+\n\
    \   |res-len (SDNV)  | security-result data                             |\n  \
    \ +----------------+----------------+----------------+----------------+\n    \
    \            Figure 2: Abstract Security Block Structure\n   Some ciphersuites\
    \ are specified in Section 4, which also specifies\n   the rules that MUST be\
    \ satisfied by ciphersuite specifications.\n   Additional ciphersuites MAY be\
    \ defined in separate specifications.\n   Ciphersuite IDs not specified are reserved.\
    \  Implementations of the\n   Bundle Security Protocol decide which ciphersuites\
    \ to support,\n   subject to the requirements of Section 4.  It is RECOMMENDED\
    \ that\n   implementations that allow additional ciphersuites permit ciphersuite\n\
    \   ID values at least up to and including 127, and they MAY decline to\n   allow\
    \ larger ID values.\n   The structure of the ciphersuite flags field is shown\
    \ in Figure 3.\n   In each case, the presence of an optional field is indicated\
    \ by\n   setting the value of the corresponding flag to one.  A value of zero\n\
    \   indicates the corresponding optional field is missing.  Presently,\n   there\
    \ are five flags defined for the field; for convenience, these\n   are shown as\
    \ they would be extracted from a single-byte SDNV.  Future\n   additions may cause\
    \ the field to grow to the left so, as with the\n   flags fields defined in [DTNBP],\
    \ the description below numbers the\n   bit positions from the right rather than\
    \ the standard RFC definition,\n   which numbers bits from the left.\n      src\
    \ - bit 4 indicates whether the EID-reference field of the ASB\n      contains\
    \ the optional reference to the security-source.\n      dest - bit 3 indicates\
    \ whether the EID-reference field of the ASB\n      contains the optional reference\
    \ to the security-destination.\n      parm - bit 2 indicates whether or not the\
    \ ciphersuite-parameters\n      length and ciphersuite-parameters data fields\
    \ are present.\n      corr - bit 1 indicates whether or not the ASB contains an\
    \ optional\n      correlator.\n      res - bit 0 indicates whether or not the\
    \ ASB contains the\n      security-result length and security-result data fields.\n\
    \      bits 5-6 are reserved for future use.\n   Bit   Bit   Bit   Bit   Bit \
    \  Bit   Bit\n    6     5     4     3     2     1     0\n   +-----+-----+-----+-----+-----+-----+-----+\n\
    \   | reserved  | src |dest |parm |corr |res  |\n   +-----+-----+-----+-----+-----+-----+-----+\n\
    \            Figure 3: Ciphersuite Flags\n   A little bit more terminology: if\
    \ the block is a PIB, when we refer\n   to the PIB-source, we mean the security-source\
    \ for the PIB as\n   represented by the EID-reference in the EID-reference field.\n\
    \   Similarly, we may refer to the \"PCB-dest\", meaning the security-\n   destination\
    \ of the PCB, again as represented by an EID reference.\n   For example, referring\
    \ to Figure 1 again, if the bundle that\n   originates at BN1 is given a Payload\
    \ Confidentiality Block (PCB) by\n   BN1 that is protected using a key held by\
    \ BN3, and it is given a\n   Payload Integrity Block (PIB) by BN1, then BN1 is\
    \ both the PCB-source\n   and the PIB-source of the bundle, and BN3 is the PCB-destination\
    \ of\n   the bundle.\n   The correlator field is used to associate several related\
    \ instances\n   of a security block.  This can be used to place a BAB that contains\n\
    \   the ciphersuite information at the \"front\" of a (probably large)\n   bundle,\
    \ and another correlated BAB that contains the security-result\n   at the \"end\"\
    \ of the bundle.  This allows even very memory-constrained\n   nodes to be able\
    \ to process the bundle and verify the BAB.  There are\n   similar use cases for\
    \ multiple related instances of PIB and PCB as\n   will be seen below.\n   The\
    \ ciphersuite specification MUST make it clear whether or not\n   multiple block\
    \ instances are allowed, and if so, under what\n   conditions.  Some ciphersuites\
    \ can, of course, leave flexibility to\n   the implementation, whereas others\
    \ might mandate a fixed number of\n   instances.\n   For convenience, we use the\
    \ term \"first block\" to refer to the\n   initial block in a group of correlated\
    \ blocks or to the single block\n   if there are no others in the set.  Obviously,\
    \ there can be several\n   unrelated groups in a bundle, each containing only\
    \ one block or more\n   than one, and each having its own \"first block\".\n"
- title: 2.2.  Bundle Authentication Block
  contents:
  - "2.2.  Bundle Authentication Block\n   In this section, we describe typical BAB\
    \ field values for two\n   scenarios -- where a single instance of the BAB contains\
    \ all the\n   information and where two related instances are used, one \"up front\"\
    ,\n   which contains the ciphersuite, and another following the payload,\n   which\
    \ contains the security-result (e.g., a MAC).\n   For the case where a single\
    \ BAB is used:\n      The block-type code field value MUST be 0x02.\n      The\
    \ block processing control flags value can be set to whatever\n      values are\
    \ required by local policy.  Ciphersuite designers should\n      carefully consider\
    \ the effect of setting flags that either discard\n      the block or delete the\
    \ bundle in the event that this block cannot\n      be processed.\n      The ciphersuite\
    \ ID MUST be documented as a hop-by-hop\n      authentication-ciphersuite that\
    \ requires one instance of the BAB.\n      The correlator field MUST NOT be present.\n\
    \      The ciphersuite-parameters field MAY be present, if so specified\n    \
    \  in the ciphersuite specification.\n      An EID-reference to the security-source\
    \ MAY be present.  The\n      security-source can also be specified as part of\
    \ key-information\n      described in Section 2.6 or another block such as the\
    \ Previous-Hop\n      Insertion Block [PHIB].  The security-source might also\
    \ be\n      inferred from some implementation-specific means such as the\n   \
    \   convergence layer.\n      An EID-reference to the security-destination MAY\
    \ be present and is\n      useful to ensure that the bundle has been forwarded\
    \ to the correct\n      next-hop node.\n      The security-result MUST be present\
    \ as it is effectively the\n      \"output\" from the ciphersuite calculation\
    \ (e.g., the MAC or\n      signature) applied to the (relevant parts of the) bundle\
    \ (as\n      specified in the ciphersuite definition).\n   For the case using\
    \ two related BAB instances, the first instance is\n   as defined above, except\
    \ the ciphersuite ID MUST be documented as a\n   hop-by-hop authentication ciphersuite\
    \ that requires two instances of\n   the BAB.  In addition, the correlator MUST\
    \ be present and the\n   security-result length and security-result fields MUST\
    \ be absent.\n   The second instance of the BAB MUST have the same correlator\
    \ value\n   present and MUST contain security-result length and security-result\n\
    \   data fields.  The other optional fields MUST NOT be present.\n   Typically,\
    \ this second instance of a BAB will be the last block of\n   the bundle.\n  \
    \ The details of key transport for BAB are specified by the particular\n   ciphersuite.\
    \  In the absence of conflicting requirements, the\n   following should be noted\
    \ by implementors:\n   o  the key-information item in Section 2.6 is OPTIONAL,\
    \ and if not\n      provided, then the key SHOULD be inferred from the source-\n\
    \      destination tuple, being the previous key used, a key created from\n  \
    \    a key-derivation function, or a pre-shared key.\n   o  if all the nodes are\
    \ security-aware, the capabilities of the\n      underlying convergence layer\
    \ might be useful for identifying the\n      security-source.\n   o  depending\
    \ upon the key mechanism used, bundles can be signed by\n      the sender, or\
    \ authenticated for one or more recipients, or both.\n"
- title: 2.3.  Payload Integrity Block
  contents:
  - "2.3.  Payload Integrity Block\n   A PIB is an ASB with the following additional\
    \ restrictions:\n      The block-type code value MUST be 0x03.\n      The block\
    \ processing control flags value can be set to whatever\n      values are required\
    \ by local policy.  Ciphersuite designers should\n      carefully consider the\
    \ effect of setting flags that either discard\n      the block or delete the bundle\
    \ in the event that this block cannot\n      be processed.\n      The ciphersuite\
    \ ID MUST be documented as an end-to-end\n      authentication-ciphersuite or\
    \ as an end-to-end error-detection-\n      ciphersuite.\n      The correlator\
    \ MUST be present if the ciphersuite requires that\n      more than one related\
    \ instance of a PIB be present in the bundle.\n      The correlator MUST NOT be\
    \ present if the ciphersuite only\n      requires one instance of the PIB in the\
    \ bundle.\n      The ciphersuite-parameters field MAY be present.\n      An EID-reference\
    \ to the security-source MAY be present.  The\n      security-source can also\
    \ be specified as part of key-information\n      described in Section 2.6.\n \
    \     An EID-reference to the security-destination MAY be present.\n      The\
    \ security-result is effectively the \"output\" from the\n      ciphersuite calculation\
    \ (e.g., the MAC or signature) applied to\n      the (relevant parts of the) bundle.\
    \  As in the case of the BAB,\n      this field MUST be present if the correlator\
    \ is absent.  If more\n      than one related instance of the PIB is required,\
    \ then this is\n      handled in the same way as described for the BAB above.\n\
    \      The ciphersuite MAY process less than the entire original bundle\n    \
    \  payload.  This might be because it is defined to process some\n      subset\
    \ of the bundle, or perhaps because the current payload is a\n      fragment of\
    \ an original bundle.  For whatever reason, if the\n      ciphersuite processes\
    \ less than the complete, original bundle\n      payload, the ciphersuite-parameters\
    \ of this block MUST specify\n      which bytes of the bundle payload are protected.\n\
    \   For some ciphersuites, (e.g., those using asymmetric keying to\n   produce\
    \ signatures or those using symmetric keying with a group key),\n   the security\
    \ information can be checked at any hop on the way to the\n   security-destination\
    \ that has access to the required keying\n   information.  This possibility is\
    \ further discussed in Section 3.6.\n   The use of a generally available key is\
    \ RECOMMENDED if custodial\n   transfer is employed and all nodes SHOULD verify\
    \ the bundle before\n   accepting custody.\n   Most asymmetric PIB ciphersuites\
    \ will use the PIB-source to indicate\n   who the signer is and will not require\
    \ the PIB-dest field because the\n   key needed to verify the PIB authenticator\
    \ will be a public key\n   associated with the PIB-source.\n"
- title: 2.4.  Payload Confidentiality Block
  contents:
  - "2.4.  Payload Confidentiality Block\n   A typical confidentiality ciphersuite\
    \ will encrypt the payload using\n   a randomly generated bundle encrypting key\
    \ (BEK) and will use a key-\n   information item in the PCB security-parameters\
    \ to carry the BEK\n   encrypted with some long-term key encryption key (KEK)\
    \ or well-known\n   public key.  If neither the destination nor security-destination\n\
    \   resolves the key to use for decryption, the key-information item in\n   the\
    \ ciphersuite-parameters field can also be used to indicate the\n   decryption\
    \ key with which the BEK can be recovered.  If the bundle\n   already contains\
    \ PIBs and/or PCBs, these SHOULD also be encrypted\n   using this same BEK, as\
    \ described just below for \"super-encryption\".\n   The encrypted block is encapsulated\
    \ into a new PCB that replaces the\n   original block at the same place in the\
    \ bundle.\n   It is strongly RECOMMENDED that a data integrity mechanism be used\
    \ in\n   conjunction with confidentiality, and that encryption-only\n   ciphersuites\
    \ NOT be used.  AES-Galois/Counter Mode (AES-GCM)\n   satisfies this requirement.\
    \  The \"authentication tag\" or \"integrity\n   check value\" is stored into\
    \ the security-result rather than being\n   appended to the payload as is common\
    \ in some protocols since, as\n   described below, it is important that there\
    \ be no change in the size\n   of the payload.\n   The payload is encrypted \"\
    in-place\", that is, following encryption,\n   the payload block payload field\
    \ contains ciphertext, not plaintext.\n   The payload block processing control\
    \ flags are unmodified.\n   The \"in-place\" encryption of payload bytes is to\
    \ allow bundle payload\n   fragmentation and reassembly, and custody transfer,\
    \ to operate\n   without knowledge of whether or not encryption has occurred and,\
    \ if\n   so, how many times.\n   Fragmentation, reassembly, and custody transfer\
    \ are adversely\n   affected by a change in size of the payload due to ambiguity\
    \ about\n   what byte range of the original payload is actually in any particular\n\
    \   fragment.  Ciphersuites SHOULD place any payload expansion, such as\n   authentication\
    \ tags (integrity check values) and any padding\n   generated by a block-mode\
    \ cipher, into an integrity check value item\n   in the security-result field\
    \ (see Section 2.6) of the confidentiality\n   block.\n   Payload super-encryption\
    \ is allowed, that is, encrypting a payload\n   that has already been encrypted,\
    \ perhaps more than once.\n   Ciphersuites SHOULD define super-encryption such\
    \ that, as well as re-\n   encrypting the payload, it also protects the parameters\
    \ of earlier\n   encryption.  Failure to do so may represent a vulnerability in\
    \ some\n   circumstances.\n   Confidentiality is normally applied to the payload,\
    \ and possibly to\n   additional blocks.  It is RECOMMENDED to apply a Payload\n\
    \   Confidentiality ciphersuite to non-payload blocks only if these\n   SHOULD\
    \ be super-encrypted with the payload.  If super-encryption of\n   the block is\
    \ not desired, then protection of the block SHOULD be done\n   using the Extension\
    \ Security Block mechanism rather than PCB.\n   Multiple related PCB instances\
    \ are required if both the payload and\n   PIBs and PCBs in the bundle are to\
    \ be encrypted.  These multiple PCB\n   instances require correlators to associate\
    \ them with each other since\n   the key-information is provided only in the first\
    \ PCB.\n   There are situations where more than one PCB instance is required but\n\
    \   the instances are not \"related\" in the sense that requires\n   correlators.\
    \  One example is where a payload is encrypted for more\n   than one security-destination\
    \ so as to be robust in the face of\n   routing uncertainties.  In this scenario,\
    \ the payload is encrypted\n   using a BEK.  Several PCBs contain the BEK encrypted\
    \ using different\n   KEKs, one for each destination.  These multiple PCB instances\
    \ are not\n   \"related\" and SHOULD NOT contain correlators.\n   The ciphersuite\
    \ MAY apply different rules to confidentiality for non-\n   payload blocks.\n\
    \   A PCB is an ASB with the following additional restrictions:\n      The block-type\
    \ code value MUST be 0x04.\n      The block processing control flags value can\
    \ be set to whatever\n      values are required by local policy, except that a\
    \ PCB \"first\n      block\" MUST have the \"replicate in every fragment\" flag\
    \ set.  This\n      flag SHOULD NOT be set otherwise.  Ciphersuite designers should\n\
    \      carefully consider the effect of setting flags that either discard\n  \
    \    the block or delete the bundle in the event that this block cannot\n    \
    \  be processed.\n      The ciphersuite ID MUST be documented as a confidentiality\n\
    \      ciphersuite.\n      The correlator MUST be present if there is more than\
    \ one related\n      PCB instance.  The correlator MUST NOT be present if there\
    \ are no\n      related PCB instances.\n      If a correlator is present, the\
    \ key-information MUST be placed in\n      the PCB \"first block\".\n      Any\
    \ additional bytes generated as a result of encryption and/or\n      authentication\
    \ processing of the payload SHOULD be placed in an\n      \"integrity check value\"\
    \ field (see Section 2.6) in the security-\n      result of the first PCB.\n \
    \     The ciphersuite-parameters field MAY be present.\n      An EID-reference\
    \ to the security-source MAY be present.  The\n      security-source can also\
    \ be specified as part of key-information\n      described in Section 2.6.\n \
    \     An EID-reference to the security-destination MAY be present.\n      The\
    \ security-result MAY be present and normally contains fields\n      such as an\
    \ encrypted bundle encryption key, authentication tag, or\n      the encrypted\
    \ versions of bundle blocks other than the payload\n      block.\n   The ciphersuite\
    \ MAY process less than the entire original bundle\n   payload, either because\
    \ the current payload is a fragment of the\n   original bundle or just because\
    \ it is defined to process some subset.\n   For whatever reason, if the ciphersuite\
    \ processes less than the\n   complete, original bundle payload, the \"first\"\
    \ PCB MUST specify, as\n   part of the ciphersuite-parameters, which bytes of\
    \ the bundle payload\n   are protected.\n   PCB ciphersuites MUST specify which\
    \ blocks are to be encrypted.  The\n   specification MAY be flexible and be dependent\
    \ upon block type,\n   security policy, various data values, and other inputs,\
    \ but it MUST\n   be deterministic.  The determination of whether or not a block\
    \ is to\n   be encrypted MUST NOT be ambiguous.\n   As was the case for the BAB\
    \ and PIB, if the ciphersuite requires more\n   than one instance of the PCB,\
    \ then the \"first block\" MUST contain any\n   optional fields (e.g., security-destination,\
    \ etc.) that apply to all\n   instances with this correlator.  These MUST be contained\
    \ in the first\n   instance and MUST NOT be repeated in other correlated blocks.\
    \  Fields\n   that are specific to a particular instance of the PCB MAY appear\
    \ in\n   that PCB.  For example, security-result fields MAY (and probably\n  \
    \ will) be included in multiple related PCB instances, with each result\n   being\
    \ specific to that particular block.  Similarly, several PCBs\n   might each contain\
    \ a ciphersuite-parameters field with an IV specific\n   to that PCB instance.\n\
    \   Put another way: when confidentiality will generate multiple blocks,\n   it\
    \ MUST create a \"first\" PCB with the required ciphersuite ID,\n   parameters,\
    \ etc., as specified above.  Typically, this PCB will\n   appear early in the\
    \ bundle.  This \"first\" PCB contains the parameters\n   that apply to the payload\
    \ and also to the other correlated PCBs.  The\n   correlated PCBs follow the \"\
    first\" PCB and MUST NOT repeat the\n   ciphersuite-parameters, security-source,\
    \ or security-destination\n   fields from the first PCB.  These correlated PCBs\
    \ need not follow\n   immediately after the \"first\" PCB, and probably will not\
    \ do so.  Each\n   correlated block, encapsulating an encrypted PIB or PCB, is\
    \ at the\n   same place in the bundle as the original PIB or PCB.\n   A ciphersuite\
    \ MUST NOT mix payload data and a non-payload block in a\n   single PCB.\n   Even\
    \ if a to-be-encrypted block has the \"discard\" flag set, whether\n   or not\
    \ the PCB's \"discard\" flag is set is an implementation/policy\n   decision for\
    \ the encrypting node.  (The \"discard\" flag is more\n   properly called the\
    \ \"Discard if block can't be processed\" flag.)\n   Any existing EID-list in\
    \ the to-be-encapsulated original block\n   remains exactly as-is, and is copied\
    \ to become the EID-list for the\n   replacing block.  The encapsulation process\
    \ MUST NOT replace or\n   remove the existing EID-list entries.  This is critically\
    \ important\n   for correct updating of entries at the security-destination.\n\
    \   At the security-destination, either the specific destination or the\n   bundle-destination,\
    \ the processes described above are reversed.  The\n   payload is decrypted \"\
    in-place\" using the salt, IV, and key values in\n   the first PCB, including\
    \ verification using the ICV.  These values\n   are described in Section 2.6.\
    \  Each correlated PCB is also processed\n   at the same destination, using the\
    \ salt and key values from the first\n   PCB and the block-specific IV item. \
    \ The encapsulated block item in\n   the security-result is decrypted and validated,\
    \ using also the tag\n   that SHOULD have been appended to the ciphertext of the\
    \ original\n   block data.  Assuming the validation succeeds, the resultant\n\
    \   plaintext, which is the entire content of the original block,\n   replaces\
    \ the PCB at the same place in the bundle.  The block type\n   reverts to that\
    \ of the original block prior to encapsulation, and the\n   other block-specific\
    \ data fields also return to their original\n   values.  Implementors are cautioned\
    \ that this \"replacement\" process\n   requires delicate stitchery, as the EID-list\
    \ contents in the\n   decapsulated block are invalid.  As noted above, the EID-list\n\
    \   references in the original block were preserved in the \"replacing\"\n   PCB,\
    \ and will have been updated as necessary as the bundle has toured\n   the DTN.\
    \  The references from the PCB MUST replace the references\n   within the EID-list\
    \ of the newly decapsulated block.  Caveat\n   implementor.\n"
- title: 2.5.  Extension Security Block
  contents:
  - "2.5.  Extension Security Block\n   Extension security blocks provide protection\
    \ for non-payload-related\n   portions of a bundle.  ESBs MUST NOT be used for\
    \ the primary block or\n   payload, including payload-related security blocks\
    \ (PIBs and PCBs).\n   It is sometimes desirable to protect certain parts of a\
    \ bundle in\n   ways other than those applied to the bundle payload.  One such\n\
    \   example is bundle metadata that might specify the kind of data in the\n  \
    \ payload but not the actual payload detail, as described in [DTNMD].\n   ESBs\
    \ are typically used to apply confidentiality protection.  While\n   it is possible\
    \ to create an integrity-only ciphersuite, the block\n   protection is not transparent\
    \ and makes access to the data more\n   difficult.  For simplicity, this discussion\
    \ describes the use of a\n   confidentiality ciphersuite.\n   The protection mechanisms\
    \ in ESBs are similar to other security\n   blocks with two important differences:\n\
    \   o  different key values are used (using the same key as that for\n      payload\
    \ would defeat the purpose)\n   o  the block is not encrypted or super-encrypted\
    \ with the payload\n   A typical ESB ciphersuite will encrypt the extension block\
    \ using a\n   randomly generated ephemeral key and will use the key-information\n\
    \   item in the security-parameters field to carry the key encrypted with\n  \
    \ some long-term key encryption key (KEK) or well-known public key.  If\n   neither\
    \ the destination nor security-destination resolves the key to\n   use for decryption,\
    \ the key-information item in the ciphersuite-\n   parameters field can be used\
    \ also to indicate the decryption key with\n   which the BEK can be recovered.\n\
    \   It is strongly RECOMMENDED that a data integrity mechanism be used in\n  \
    \ conjunction with confidentiality, and that encryption-only\n   ciphersuites\
    \ NOT be used.  AES-GCM satisfies this requirement.\n   The ESB is placed in the\
    \ bundle in the same position as the block\n   being protected.  That is, the\
    \ entire original block is processed\n   (encrypted, etc.) and encapsulated in\
    \ a \"replacing\" ESB-type block,\n   and this appears in the bundle at the same\
    \ sequential position as the\n   original block.  The processed data is placed\
    \ in the security-result\n   field.\n   The process is reversed at the security-destination\
    \ with the\n   recovered plaintext block replacing the ESB that had encapsulated\
    \ it.\n   Processing of EID-list entries, if any, is described in Section 2.4,\n\
    \   and this MUST be followed in order to correctly recover EIDs.\n   An ESB is\
    \ an ASB with the following additional restrictions:\n      The block type is\
    \ 0x09.\n      Ciphersuite flags indicate which fields are present in this block.\n\
    \      Ciphersuite designers should carefully consider the effect of\n      setting\
    \ flags that either discard the block or delete the bundle\n      in the event\
    \ that this block cannot be processed.\n      EID-references MUST be stored in\
    \ the EID-reference list.\n      The security-source MAY be present.  The security-source\
    \ can also\n      be specified as part of key-information described in Section\
    \ 2.6.\n      If neither is present, then the bundle-source is used as the\n \
    \     security-source.\n      The security-destination MAY be present.  If not\
    \ present, then the\n      bundle-destination is used as the security-destination.\n\
    \   The security-parameters MAY optionally contain a block-type code\n   field\
    \ to indicate the type of the encapsulated block.  Since this\n   replicates a\
    \ field in the encrypted portion of the block, it is a\n   slight security risk,\
    \ and its use is therefore OPTIONAL.\n"
- title: 2.6.  Parameters and Result Fields
  contents:
  - "2.6.  Parameters and Result Fields\n   Various ciphersuites include several items\
    \ in the security-parameters\n   and/or security-result fields.  Which items MAY\
    \ appear is defined by\n   the particular ciphersuite description.  A ciphersuite\
    \ MAY support\n   several instances of the same type within a single block.\n\
    \   Each item is represented as a type-length-value.  Type is a single\n   byte\
    \ indicating which item this is.  Length is the count of data\n   bytes to follow,\
    \ and is an SDNV-encoded integer.  Value is the data\n   content of the item.\n\
    \   Item types are\n      0: reserved\n      1: initialization vector (IV)\n \
    \     2: reserved\n      3: key-information\n      4: fragment-range (offset and\
    \ length as a pair of SDNVs)\n      5: integrity signature\n      6: unassigned\n\
    \      7: salt\n      8: PCB integrity check value (ICV)\n      9: reserved\n\
    \      10: encapsulated block\n      11: block type of encapsulated block\n  \
    \    12 - 191: reserved\n      192 - 250: private use\n      251 - 255: reserved\n\
    \   The following descriptions apply to the usage of these items for all\n   ciphersuites.\
    \  Additional characteristics are noted in the discussion\n   for specific suites.\n\
    \   o  initialization vector (IV): random value, typically eight to\n      sixteen\
    \ bytes.\n   o  key-information: key material encoded or protected by the key\n\
    \      management system and used to transport an ephemeral key protected\n  \
    \    by a long-term key.  This item is discussed further in\n      Section 2.7.\n\
    \   o  fragment-range: pair of SDNV values (offset then length)\n      specifying\
    \ the range of payload bytes to which a particular\n      operation applies. \
    \ This is termed \"fragment-range\" since that is\n      its typical use, even\
    \ though sometimes it describes a subset range\n      that is not a fragment.\
    \  The offset value MUST be the offset\n      within the original bundle, which\
    \ might not be the offset within\n      the current bundle if the current bundle\
    \ is already a fragment.\n   o  integrity signature: result of BAB or PIB digest\
    \ or signing\n      operation.  This item is discussed further in Section 2.7.\n\
    \   o  salt: an IV-like value used by certain confidentiality suites.\n   o  PCB\
    \ integrity check value (ICV): output from certain\n      confidentiality ciphersuite\
    \ operations to be used at the\n      destination to verify that the protected\
    \ data has not been\n      modified.\n   o  encapsulated block: result of confidentiality\
    \ operation on certain\n      blocks, contains the ciphertext of the block and\
    \ MAY also contain\n      an integrity check value appended to the ciphertext;\
    \ MAY also\n      contain padding if required by the encryption mode; used for\
    \ non-\n      payload blocks only.\n   o  block type of encapsulated block: block-type\
    \ code for a block that\n      has been encapsulated in ESB.\n"
- title: 2.7.  Key Transport
  contents:
  - "2.7.  Key Transport\n   This specification endeavors to maintain separation between\
    \ the\n   security protocol and key management.  However, these two interact in\n\
    \   the transfer of key-information, etc., from security-source to\n   security-destination.\
    \  The intent of the separation is to facilitate\n   the use of a variety of key\
    \ management systems without needing to\n   tailor a ciphersuite to each individually.\n\
    \   The key management process deals with such things as long-term keys,\n   specifiers\
    \ for long-term keys, certificates for long-term keys, and\n   integrity signatures\
    \ using long-term keys.  The ciphersuite itself\n   SHOULD NOT require a knowledge\
    \ of these, and separation is improved\n   if it treats these as opaque entities\
    \ to be handled by the key\n   management process.\n   The key management process\
    \ deals specifically with the content of two\n   of the items defined in Section\
    \ 2.6: key-information (item type 3)\n   and integrity signature (item type 5).\
    \  The ciphersuite MUST define\n   the details and format for these items.  To\
    \ facilitate\n   interoperability, it is strongly RECOMMENDED that the implementations\n\
    \   use the appropriate definitions from the Cryptographic Message Syntax\n  \
    \ (CMS) [RFC5652] and related RFCs.\n   Many situations will require several pieces\
    \ of key-information.\n   Again, ciphersuites MUST define whether they accept\
    \ these packed into\n   a single key-information item and/or separated into multiple\n\
    \   instances of key-information.  For interoperability, it is\n   RECOMMENDED\
    \ that ciphersuites accept these packed into a single key-\n   information item,\
    \ and that they MAY additionally choose to accept\n   them sent as separate items.\n"
- title: 2.8.  PIB and PCB Combinations
  contents:
  - "2.8.  PIB and PCB Combinations\n   Given the above definitions, nodes are free\
    \ to combine applications\n   of PIB and PCB in any way they wish -- the correlator\
    \ value allows\n   for multiple applications of security services to be handled\n\
    \   separately.  Since PIB and PCB apply to the payload and ESB to non-\n   payload\
    \ blocks, combinations of ESB with PIB and/or PCB are not\n   considered.\n  \
    \ There are some obvious security problems that could arise when\n   applying\
    \ multiple services.  For example, if we encrypted a payload\n   but left a PIB\
    \ security-result containing a signature in the clear,\n   payload guesses could\
    \ be confirmed.\n   We cannot, in general, prevent all such problems since we\
    \ cannot\n   assume that every ciphersuite definition takes account of every other\n\
    \   ciphersuite definition.  However, we can limit the potential for such\n  \
    \ problems by requiring that any ciphersuite that applies to one\n   instance\
    \ of a PIB or PCB MUST be applied to all instances with the\n   same correlator.\n\
    \   We now list the PIB and PCB combinations that we envisage as being\n   useful\
    \ to support:\n      Encrypted tunnels - a single bundle MAY be encrypted many\
    \ times en\n      route to its destination.  Clearly, it has to be decrypted an\n\
    \      equal number of times, but we can imagine each encryption as\n      representing\
    \ the entry into yet another layer of tunnel.  This is\n      supported by using\
    \ multiple instances of PCB, but with the payload\n      encrypted multiple times,\
    \ \"in-place\".  Depending upon the\n      ciphersuite definition, other blocks\
    \ can and should be encrypted,\n      as discussed above and in Section 2.4 to\
    \ ensure that parameters\n      are protected in the case of super-encryption.\n\
    \      Multiple parallel authenticators - a single security-source might\n   \
    \   wish to protect the integrity of a bundle in multiple ways.  This\n      could\
    \ be required if the bundle's path is unpredictable and if\n      various nodes\
    \ might be involved as security-destinations.\n      Similarly, if the security-source\
    \ cannot determine in advance\n      which algorithms to use, then using all might\
    \ be reasonable.  This\n      would result in uses of PIB that, presumably, all\
    \ protect the\n      payload, and which cannot in general protect one another.\
    \  Note\n      that this logic can also apply to a BAB, if the unpredictable\n\
    \      routing happens in the convergence layer, so we also envisage\n      support\
    \ for multiple parallel uses of BAB.\n      Multiple sequential authenticators\
    \ - if some security-destination\n      requires assurance about the route that\
    \ bundles have taken, then\n      it might insist that each forwarding node add\
    \ its own PIB.  More\n      likely, however, would be that outbound \"bastion\"\
    \ nodes would be\n      configured to sign bundles as a way of allowing the sending\n\
    \      \"domain\" to take accountability for the bundle.  In this case, the\n\
    \      various PIBs will likely be layered, so that each protects the\n      earlier\
    \ applications of PIB.\n      Authenticated and encrypted bundles - a single bundle\
    \ MAY require\n      both authentication and confidentiality.  Some specifications\n\
    \      first apply the authenticator and follow this by encrypting the\n     \
    \ payload and authenticator.  As noted previously in the case where\n      the\
    \ authenticator is a signature, there are security reasons for\n      this ordering.\
    \  (See the PCB-RSA-AES128-PAYLOAD-PIB-PCB\n      ciphersuite defined in Section\
    \ 4.3.)  Others apply the\n      authenticator after encryption, that is, to the\
    \ ciphertext.  This\n      ordering is generally RECOMMENDED and minimizes attacks\
    \ that, in\n      some cases, can lead to recovery of the encryption key.\n  \
    \ There are, no doubt, other valid ways to combine PIB and PCB\n   instances,\
    \ but these are the \"core\" set supported in this\n   specification.  Having\
    \ said that, as will be seen, the mandatory\n   ciphersuites defined here are\
    \ quite specific and restrictive in terms\n   of limiting the flexibility offered\
    \ by the correlator mechanism.\n   This is primarily designed to keep this specification\
    \ as simple as\n   possible, while at the same time supporting the above scenarios.\n"
- title: 3.  Security Processing
  contents:
  - "3.  Security Processing\n   This section describes the security aspects of bundle\
    \ processing.\n"
- title: 3.1.  Nodes as Policy Enforcement Points
  contents:
  - "3.1.  Nodes as Policy Enforcement Points\n   All nodes are REQUIRED to have and\
    \ enforce their own configurable\n   security policies, whether these policies\
    \ be explicit or default, as\n   defined in Section 6.\n   All nodes serve as\
    \ Policy Enforcement Points (PEPs) insofar as they\n   enforce polices that MAY\
    \ restrict the permissions of bundle nodes to\n   inject traffic into the network.\
    \  Policies MAY apply to traffic that\n   originates at the current node, traffic\
    \ that terminates at the\n   current node, and traffic that is to be forwarded\
    \ by the current node\n   to other nodes.  If a particular transmission request,\
    \ originating\n   either locally or remotely, satisfies the node's policy or policies\n\
    \   and is therefore accepted, then an outbound bundle can be created and\n  \
    \ dispatched.  If not, then in its role as a PEP, the node will not\n   create\
    \ or forward a bundle.  Error handling for such cases is\n   currently considered\
    \ out of scope for this document.\n   Policy enforcing code MAY override all other\
    \ processing steps\n   described here and elsewhere in this document.  For example,\
    \ it is\n   valid to implement a node that always attempts to attach a PIB.\n\
    \   Similarly, it is also valid to implement a node that always rejects\n   all\
    \ requests that imply the use of a PIB.\n   Nodes MUST consult their security\
    \ policy to determine the criteria\n   that a received bundle ought to meet before\
    \ it will be forwarded.\n   These criteria MUST include a determination of whether\
    \ or not the\n   received bundle MUST include a valid BAB, PIB, PCB, or ESB. \
    \ If the\n   bundle does not meet the node's policy criteria, then the bundle\
    \ MUST\n   be discarded and processed no further; in this case, a bundle status\n\
    \   report indicating the failure MAY be generated.\n   The node's policy MAY\
    \ call for the node to add or subtract some\n   security blocks.  For example,\
    \ it might require that the node attempt\n   to encrypt (parts of) the bundle\
    \ for some security-destination or\n   that it add a PIB.  If the node's policy\
    \ requires a BAB to be added\n   to the bundle, it MUST be added last so that\
    \ the calculation of its\n   security-result MAY take into consideration the values\
    \ of all other\n   blocks in the bundle.\n"
- title: 3.2.  Processing Order of Security Blocks
  contents:
  - "3.2.  Processing Order of Security Blocks\n   The processing order of security\
    \ actions for a bundle is critically\n   important for the actions to complete\
    \ successfully.  In general, the\n   actions performed at the originating node\
    \ MUST be executed in the\n   reverse sequence at the destination.  There are\
    \ variations and\n   exceptions, and these are noted below.\n   The sequence is\
    \ maintained in the ordering of security blocks in the\n   bundle.  It is for\
    \ this reason that blocks MUST NOT be rearranged at\n   forwarding nodes, whether\
    \ or not they support the security protocols.\n   The only blocks that participate\
    \ in this ordering are the primary and\n   payload blocks, and the PIB and PCB\
    \ security blocks themselves.  All\n   other extension blocks, including ESBs,\
    \ are ignored for purposes of\n   determining the processing order.\n   The security\
    \ blocks are added to and removed from a bundle in a last-\n   in-first-out (LIFO)\
    \ manner, with the top of the stack immediately\n   after the primary block. \
    \ A newly created bundle has just the primary\n   and payload blocks, and the\
    \ stack is empty.  As security actions are\n   requested for the bundle, security\
    \ blocks are pushed onto the stack\n   immediately after the primary block.  The\
    \ early actions have security\n   blocks close to the payload, later actions have\
    \ blocks nearer to the\n   primary block.  The actions deal with only those blocks\
    \ in the bundle\n   at the time, so, for example, the first to be added processes\
    \ only\n   the payload and primary blocks, the next might process the first if\n\
    \   it chooses and the payload and primary, and so on.  The last block to\n  \
    \ be added can process all the blocks.\n   When the bundle is received, this process\
    \ is reversed and security\n   processing begins at the top of the stack, immediately\
    \ after the\n   primary block.  The security actions are performed, and the block\
    \ is\n   popped from the stack.  Processing continues with the next security\n\
    \   block until finally only the payload and primary blocks remain.\n   The simplicity\
    \ of this description is undermined by various real-\n   world requirements. \
    \ Nonetheless, it serves as a helpful initial\n   framework for understanding\
    \ the bundle security process.\n   The first issue is a very common one and easy\
    \ to handle.  The bundle\n   may be sent indirectly to its destination, requiring\
    \ several\n   forwarding hops to finally arrive there.  Security processing happens\n\
    \   at each node, assuming that the node supports bundle security.  For\n   the\
    \ following discussion, we assume that a bundle is created and that\n   confidentiality,\
    \ then payload integrity, and finally bundle\n   authentication are applied to\
    \ it.  The block sequence would therefore\n   be primary-BAB-PIB-PCB-payload.\
    \  Traveling from source to destination\n   requires going through one intermediate\
    \ node, so the trip consists of\n   two hops.\n   When the bundle is received\
    \ at the intermediate node, the receive\n   processing validates the BAB and pops\
    \ it from the stack.  However,\n   the PIBs and PCBs have the final destination\
    \ as their security-\n   destination, so these cannot be processed and removed.\
    \  The\n   intermediate node then begins the send process with the four\n   remaining\
    \ blocks in the bundle.  The outbound processing adds any\n   security blocks\
    \ required by local policy, and these are pushed on the\n   stack immediately\
    \ after the primary block, ahead of the PIB.  In this\n   example, the intermediate\
    \ node adds a PIB as a signature that the\n   bundle has passed through the node.\n\
    \   The receive processing at the destination first handles the\n   intermediate\
    \ node's PIB and pops it, next is the originator's PIB,\n   also popped, and finally\
    \ the originator's confidentiality block that\n   allows the payload to be decrypted\
    \ and the bundle handled for\n   delivery.\n   In practice, DTNs are likely to\
    \ be more complex.  The security policy\n   for a node specifies the security\
    \ requirements for a bundle.  The\n   policy will possibly cause one or more security\
    \ operations to be\n   applied to the bundle at the current node, each with its\
    \ own\n   security-destination.  Application of policy at subsequent nodes\n \
    \  might cause additional security operations, each with a security-\n   destination.\
    \  The list of security-destinations in the security\n   blocks (BAB, PIB and\
    \ PCB, not ESB) creates a partial-ordering of\n   nodes that MUST be visited en\
    \ route to the bundle-destination.\n   The bundle security scheme does not deal\
    \ with security paths that\n   overlap partially but not completely.  The security\
    \ policy for a node\n   MUST avoid specifying, for a bundle, a security-destination\
    \ that\n   causes a conflict with any existing security-destination in that\n\
    \   bundle.  This is discussed further in Section 3.3.\n   The second issue relates\
    \ to the reversibility of certain security\n   process actions.  In general, the\
    \ actions fall into two categories:\n   those that do not affect other parts of\
    \ the bundle and those that are\n   fully reversible.  Creating a bundle signature,\
    \ for example, does not\n   change the bundle content except for the result. \
    \ The encryption\n   performed as part of the confidentiality processing does\
    \ change the\n   bundle, but the reverse processing at the destination restores\
    \ the\n   original content.\n   The third category is the one where the bundle\
    \ content has changed\n   slightly and in a non-destructive way, but there is\
    \ no mechanism to\n   reverse the change.  The simplest example is the addition\
    \ of an EID-\n   reference to a security block.  The addition of the reference\
    \ causes\n   the text to be added to the bundle's dictionary.  The text may also\n\
    \   be used by other references, so removal of the block and this\n   specific\
    \ EID-reference does not cause removal of the text from the\n   dictionary.  This\
    \ shortcoming is of no impact to the \"sequential\" or\n   \"wrapping\" security\
    \ schemes described above, but does cause failures\n   with \"parallel\" authentication\
    \ mechanisms.  Solutions for this\n   problem are implementation specific and\
    \ typically involve multi-pass\n   processing such that blocks are added at one\
    \ stage and the security-\n   results calculated at a later stage of the overall\
    \ process.\n   Certain ciphersuites have sequence requirements for their correct\n\
    \   operation, most notably the bundle authentication ciphersuites.\n   Processing\
    \ for bundle authentication is required to happen after all\n   other sending\
    \ operations, and prior to any receive operations at the\n   next-hop node.  Therefore,\
    \ it follows that BABs MUST always be pushed\n   onto the stack after all others.\n\
    \   Although we describe the security block list as a stack, there are\n   some\
    \ blocks that are placed after the payload and therefore are not\n   part of the\
    \ stack.  The BundleAuthentication ciphersuite #1 (\"BA1\")\n   requires a second,\
    \ correlated block to contain the security-result,\n   and this block is placed\
    \ after the payload, usually as the last block\n   in the bundle.  We can apply\
    \ the stack rules even to these blocks by\n   specifying that they be added to\
    \ the end of the bundle at the same\n   time that their \"owner\" or \"parent\"\
    \ block is pushed on the stack.  In\n   fact, they form a stack beginning at the\
    \ payload but growing in the\n   other direction.  Also, not all blocks in the\
    \ main stack have a\n   corresponding entry in the trailing stack.  The only blocks\
    \ that MUST\n   follow the payload are those mandated by ciphersuites as correlated\n\
    \   blocks for holding a security-result.  No other blocks are required\n   to\
    \ follow the payload block and it is NOT RECOMMENDED that they do\n   so.\n  \
    \ ESBs are effectively placeholders for the blocks they encapsulate\n   and, since\
    \ those do not form part of the processing sequence\n   described above, ESBs\
    \ themselves do not either.  ESBs MAY be\n   correlated, however, so the \"no\
    \ reordering\" requirement applies to\n   them as well.\n"
- title: 3.3.  Security Regions
  contents:
  - "3.3.  Security Regions\n   Each security block has a security path, as described\
    \ in the\n   discussion for Figure 1, and the paths for various blocks are often\n\
    \   different.\n   BABs are always for a single hop, and these restricted paths\
    \ never\n   cause conflict.\n   The paths for PIBs and PCBs are often from bundle-source\
    \ to bundle-\n   destination, to provide end-to-end protection.  A bundle-source-to-\n\
    \   bundle-destination path likewise never causes a problem.\n   Another common\
    \ scenario is for gateway-to-gateway protection of\n   traffic between two sub-networks\
    \ (\"tunnel-mode\").\n   Looking at Figure 1 and the simplified version shown\
    \ in Figure 4, we\n   can regard BN2 and BN3 as gateways connecting the two sub-networks\n\
    \   labeled \"An internet\".  As long as they provide security for the BN2-\n\
    \   BN3 path, all is well.  Problems begin, for example, when BN2 adds\n   blocks\
    \ with BN4 as the security-destination, and the originating node\n   BN1 has created\
    \ blocks with BN3 as security-destination.  We now have\n   two paths, and neither\
    \ is a subset of the other.\n   This scenario should be prevented by node BN2's\
    \ security policy being\n   aware of the already existing block with BN3 as the\
    \ security-\n   destination.  This policy SHOULD NOT specify a security-destination\n\
    \   that is further distant than any existing security-destination.\n   +---------v-|\
    \   +->>>>>>>>>>v-+     +->>>>>>>>>>v-+   +-^---------+\n   | BN1     v |   |\
    \ ^   BN2   v |     | ^   BN3   v |   | ^  BN4    |\n   +---------v-+   +-^---------v-+\
    \     +-^---------v-+   +-^---------+\n             >>>>>>>>^         >>>>>>>>>>^\
    \         >>>>>>>>^\n    <-------------  BN1 to BN3 path  ------------>\n    \
    \                   <-------------  BN2 to BN4 path  ------------>\n         \
    \          Figure 4: Overlapping Security Paths\n   Consider the case where the\
    \ security concern is for data integrity,\n   so the blocks are PIBs.  BN1 creates\
    \ one (\"PIa\") along with the new\n   bundle, and BN2 pushes its own PIB \"PIb\"\
    \ on the stack, with security-\n   destination BN4.  When this bundle arrives\
    \ at BN3, the bundle blocks\n   are\n   primary - PIb - PIa - payload\n   Block\
    \ PIb is not destined for this node BN3, so it has to be\n   forwarded.  This\
    \ is the security-destination for block PIa so, after\n   validation, it should\
    \ be removed from the bundle; however, that will\n   invalidate the PIb signature\
    \ when the block is checked at the final\n   destination.  The PIb signature includes\
    \ the primary block, PIb\n   itself, PIa and the payload block, so PIa MUST remain\
    \ in the bundle.\n   This is why security blocks are treated as a stack and add/remove\n\
    \   operations are permitted only at the top-of-stack.\n   The situation would\
    \ be worse if the security concern is\n   confidentiality, and PCBs are employed,\
    \ using the confidentiality\n   ciphersuite #3 (\"PC3\") described in Section\
    \ 4.3.  In this scenario,\n   BN1 would encrypt the bundle with BN3 as security-destination,\
    \ BN2\n   would create an overlapping security path by super-encrypting the\n\
    \   payload and encapsulating the PC3 block for security-destination BN4.\n  \
    \ BN3 forwards all the blocks without change.  BN4 decrypts the payload\n   from\
    \ its super-encryption and decapsulates the PC3 block, only to\n   find that it\
    \ should have been processed earlier.  Assuming that BN4\n   has no access to\
    \ BN3's key store, BN4 has no way to decrypt the\n   bundle and recover the original\
    \ content.\n   As mentioned above, authors of security policy need to use care\
    \ to\n   ensure that their policies do not cause overlaps.  These guidelines\n\
    \   should prove helpful.\n      The originator of a bundle can always specify\
    \ the bundle-\n      destination as the security-destination and should be cautious\n\
    \      about doing otherwise.\n      In the \"tunnel-mode\" scenario where two\
    \ sub-networks are connected\n      by a tunnel through a network, the gateways\
    \ can each specify the\n      other as security-destination and should be cautious\
    \ about doing\n      otherwise.\n      BAB is never a problem because it is always\
    \ only a single hop.\n      PIB for a bundle without PCB will usually specify\
    \ the bundle-\n      destination as security-destination.\n      PIB for a bundle\
    \ containing a PCB should specify as its security-\n      destination the security-destination\
    \ of the PCB (outermost PCB if\n      there are more than one).\n"
- title: 3.4.  Canonicalization of Bundles
  contents:
  - "3.4.  Canonicalization of Bundles\n   In order to verify a signature or MAC on\
    \ a bundle, the exact same\n   bits, in the exact same order, MUST be input to\
    \ the calculation upon\n   verification as were input upon initial computation\
    \ of the original\n   signature or MAC value.  Consequently, a node MUST NOT change\
    \ the\n   encoding of any URI [RFC3986] in the dictionary field, e.g., changing\n\
    \   the DNS part of some HTTP URL from lower case to upper case.  Because\n  \
    \ bundles MAY be modified while in transit (either correctly or due to\n   implementation\
    \ errors), a canonical form of any given bundle (that\n   contains a BAB or PIB)\
    \ MUST be defined.\n   This section defines bundle canonicalization algorithms\
    \ used in\n   Sections 4.1 and 4.2 ciphersuites.  Other ciphersuites can use these\n\
    \   or define their own canonicalization procedures.\n"
- title: 3.4.1.  Strict Canonicalization
  contents:
  - "3.4.1.  Strict Canonicalization\n   The first algorithm that can be used permits\
    \ no changes at all to the\n   bundle between the security-source and the security-destination.\
    \  It\n   is mainly intended for use in BAB ciphersuites.  This algorithm\n  \
    \ conceptually catenates all blocks in the order presented, but omits\n   all\
    \ security-result data fields in blocks of this ciphersuite type.\n   That is,\
    \ when a BAB ciphersuite specifies this algorithm, we omit all\n   BAB security-results\
    \ for all BAB ciphersuites.  When a PIB\n   ciphersuite specifies this algorithm,\
    \ we omit all PIB security-\n   results for all PIB ciphersuites.  All security-result\
    \ length fields\n   are included, even though their corresponding security-result\
    \ data\n   fields are omitted.\n   Notes:\n   o  In the above, we specify that\
    \ security-result data is omitted.\n      This means that no bytes of the security-result\
    \ data are input.\n      We do not set the security-result length to zero.  Rather,\
    \ we\n      assume that the security-result length will be known to the module\n\
    \      that implements the ciphersuite before the security-result is\n      calculated,\
    \ and require that this value be in the security-result\n      length field even\
    \ though the security-result data itself will be\n      omitted.\n   o  The 'res'\
    \ bit of the ciphersuite ID, which indicates whether or\n      not the security-result\
    \ length and security-result data field are\n      present, is part of the canonical\
    \ form.\n   o  The value of the block data length field, which indicates the\n\
    \      length of the block, is also part of the canonical form.  Its\n      value\
    \ indicates the length of the entire bundle when the bundle\n      includes the\
    \ security-result data field.\n   o  BABs are always added to bundles after PIBs,\
    \ so when a PIB\n      ciphersuite specifies this strict canonicalization algorithm\
    \ and\n      the PIB is received with a bundle that also includes one or more\n\
    \      BABs, application of strict canonicalization as part of the PIB\n     \
    \ security-result verification process requires that all BABs in the\n      bundle\
    \ be ignored entirely.\n"
- title: 3.4.2.  Mutable Canonicalization
  contents:
  - "3.4.2.  Mutable Canonicalization\n   This algorithm is intended to protect parts\
    \ of the bundle that SHOULD\n   NOT be changed in transit.  Hence, it omits the\
    \ mutable parts of the\n   bundle.\n   The basic approach is to define a canonical\
    \ form of the primary block\n   and catenate it with the security (PIBs and PCBs\
    \ only) and payload\n   blocks in the order that they will be transmitted.  This\
    \ algorithm\n   ignores all other blocks, including ESBs, because it cannot be\n\
    \   determined whether or not they will change as the bundle transits the\n  \
    \ network.  In short, this canonicalization protects the payload,\n   payload-related\
    \ security blocks, and parts of the primary block.\n   Many fields in various\
    \ blocks are stored as variable-length SDNVs.\n   These are canonicalized in unpacked\
    \ form, as eight-byte fixed-width\n   fields in network byte order.  The size\
    \ of eight bytes is chosen\n   because implementations MAY handle larger values\
    \ as invalid, as noted\n   in [DTNBP].\n   The canonical form of the primary block\
    \ is shown in Figure 5.\n   Essentially, it de-references the dictionary block,\
    \ adjusts lengths\n   where necessary, and ignores flags that MAY change in transit.\n\
    \   +----------------+----------------+----------------+----------------+\n  \
    \ |    Version     |      Processing flags (incl. COS and  SRR)       |\n   +----------------+----------------+---------------------------------+\n\
    \   |                Canonical primary block length                     |\n  \
    \ +----------------+----------------+---------------------------------+\n   |\
    \                Destination endpoint ID length                     |\n   +----------------+----------------+---------------------------------+\n\
    \   |                                                                   |\n  \
    \ |                      Destination endpoint ID                      |\n   |\
    \                                                                   |\n   +----------------+----------------+---------------------------------+\n\
    \   |                    Source endpoint ID length                      |\n  \
    \ +----------------+----------------+----------------+----------------+\n   |\
    \                                                                   |\n   |  \
    \                      Source endpoint ID                         |\n   |    \
    \                                                               |\n   +----------------+----------------+---------------------------------+\n\
    \   |                  Report-to endpoint ID length                     |\n  \
    \ +----------------+----------------+----------------+----------------+\n   |\
    \                                                                   |\n   |  \
    \                    Report-to endpoint ID                        |\n   |    \
    \                                                               |\n   +----------------+----------------+----------------+----------------+\n\
    \   |                                                                   |\n  \
    \ +                    Creation Timestamp (2 x SDNV)                  +\n   |\
    \                                                                   |\n   +---------------------------------+---------------------------------+\n\
    \   |                             Lifetime                              |\n  \
    \ +----------------+----------------+----------------+----------------+\n    \
    \     Figure 5: The Canonical Form of the Primary Bundle Block\n   The fields\
    \ shown in Figure 5 are as follows:\n      The version value is the single-byte\
    \ value in the primary block.\n      The processing flags value in the primary\
    \ block is an SDNV, and\n      includes the class-of-service (COS) and status\
    \ report request\n      (SRR) fields.  For purposes of canonicalization, the SDNV\
    \ is\n      unpacked into a fixed-width field, and some bits are masked out.\n\
    \      The unpacked field is ANDed with mask 0x0000 0000 0007 C1BE to set\n  \
    \    to zero all reserved bits and the \"bundle is a fragment\" bit.\n      The\
    \ canonical primary block length value is a four-byte value\n      containing\
    \ the length (in bytes) of this structure, in network\n      byte order.\n   \
    \   The destination endpoint ID length and value are the length (as a\n      four-byte\
    \ value in network byte order) and value of the\n      destination endpoint ID\
    \ from the primary bundle block.  The URI is\n      simply copied from the relevant\
    \ part(s) of the dictionary block\n      and is not itself canonicalized.  Although\
    \ the dictionary entries\n      contain \"null-terminators\", the null-terminators\
    \ are not included\n      in the length or the canonicalization.\n      The source\
    \ endpoint ID length and value are handled similarly to\n      the destination.\n\
    \      The report-to endpoint ID length and value are handled similarly\n    \
    \  to the destination.\n      The creation timestamp (2 x SDNV) and lifetime (SDNV)\
    \ are simply\n      copied from the primary block, with the SDNV values being\n\
    \      represented as eight-byte unpacked values.\n      Fragment offset and total\
    \ application data unit length are\n      ignored, as is the case for the \"bundle\
    \ is a fragment\" bit\n      mentioned above.  If the payload data to be canonicalized\
    \ is less\n      than the complete, original bundle payload, the offset and length\n\
    \      are specified in the security-parameters.\n   For non-primary blocks being\
    \ included in the canonicalization, the\n   block processing control flags value\
    \ used for canonicalization is the\n   unpacked SDNV value with reserved and mutable\
    \ bits masked to zero.\n   The unpacked value is ANDed with mask 0x0000 0000 0000\
    \ 0077 to zero\n   reserved bits and the \"last block\" flag.  The \"last block\"\
    \ flag is\n   ignored because BABs and other security blocks MAY be added for\
    \ some\n   parts of the journey but not others, so the setting of this bit might\n\
    \   change from hop to hop.\n   Endpoint ID references in security blocks are\
    \ canonicalized using the\n   de-referenced text form in place of the reference\
    \ pair.  The\n   reference count is not included, nor is the length of the endpoint\
    \ ID\n   text.\n   The block-length is canonicalized as an eight-byte unpacked\
    \ value in\n   network byte order.  If the payload data to be canonicalized is\
    \ less\n   than the complete, original bundle payload, this field contains the\n\
    \   size of the data being canonicalized (the \"effective block\") rather\n  \
    \ that the actual size of the block.\n   Payload blocks are generally canonicalized\
    \ as-is, with the exception\n   that, in some instances, only a portion of the\
    \ payload data is to be\n   protected.  In such a case, only those bytes are included\
    \ in the\n   canonical form, and additional ciphersuite-parameters are required\
    \ to\n   specify which part of the payload is protected, as discussed further\n\
    \   below.\n   Security blocks are handled likewise, except that the ciphersuite\n\
    \   will likely specify that the \"current\" security block security-result\n\
    \   field not be considered part of the canonical form.  This differs\n   from\
    \ the strict canonicalization case since we might use the mutable\n   canonicalization\
    \ algorithm to handle sequential signatures such that\n   signatures cover earlier\
    \ ones.\n   ESBs MUST NOT be included in the canonicalization.\n   Notes:\n  \
    \ o  The canonical form of the bundle is not transmitted.  It is simply\n    \
    \  an artifact used as input to digesting.\n   o  We omit the reserved flags because\
    \ we cannot determine if they\n      will change in transit.  The masks specified\
    \ above will have to be\n      revised if additional flags are defined and they\
    \ need to be\n      protected.\n   o  Our URI encoding does not preserve the null-termination\
    \ convention\n      from the dictionary field, nor do we separate the scheme and\
    \ the\n      scheme-specific part (SSP) as is done there.\n   o  The URI encoding\
    \ will cause errors if any node rewrites the\n      dictionary content (e.g.,\
    \ changing the DNS part of an HTTP URL\n      from lower case to upper case).\
    \  This could happen transparently\n      when a bundle is synched to disk using\
    \ one set of software and\n      then read from disk and forwarded by a second\
    \ set of software.\n      Because there are no general rules for canonicalizing\
    \ URIs (or\n      IRIs), this problem may be an unavoidable source of integrity\n\
    \      failures.\n   o  All SDNV fields here are canonicalized as eight-byte unpacked\n\
    \      values in network byte order.  Length fields are canonicalized as\n   \
    \   four-byte values in network byte order.  Encoding does not need\n      optimization\
    \ since the values are never sent over the network.\n      If a bundle is fragmented\
    \ before the PIB is applied, then the PIB\n      applies to a fragment and not\
    \ the entire bundle.  However, the\n      protected fragment could be subsequently\
    \ further fragmented, which\n      would leave the verifier unable to know which\
    \ bytes were protected\n      by the PIB.  Even in the absence of fragmentation,\
    \ the same\n      situation applies if the ciphersuite is defined to allow\n \
    \     protection of less than the entire, original bundle payload.\n      For\
    \ this reason, PIB ciphersuites that support applying a PIB to\n      less than\
    \ the complete, original bundle payload MUST specify, as\n      part of the ciphersuite-parameters,\
    \ which bytes of the bundle\n      payload are protected.  When verification occurs,\
    \ only the\n      specified range of the payload bytes are input to PIB\n    \
    \  verification.  It is valid for a ciphersuite to be specified so as\n      to\
    \ only apply to entire bundles and not to fragments.  A\n      ciphersuite MAY\
    \ be specified to apply to only a portion of the\n      payload, regardless of\
    \ whether the payload is a fragment or the\n      complete, original bundle payload.\n\
    \      The same fragmentation issue applies equally to PCB ciphersuites.\n   \
    \   Ciphersuites that support applying confidentiality to fragments\n      MUST\
    \ specify, as part of the ciphersuite-parameters, which bytes\n      of the bundle\
    \ payload are protected.  When decrypting a fragment,\n      only the specified\
    \ bytes are processed.  It is also valid for a\n      confidentiality ciphersuite\
    \ to be specified so as to only apply to\n      entire bundles and not to fragments.\n\
    \   This definition of mutable canonicalization assumes that endpoint IDs\n  \
    \ themselves are immutable and is unsuitable for use in environments\n   where\
    \ that assumption might be violated.\n   The canonicalization applies to a specific\
    \ bundle and not a specific\n   payload.  If a bundle is forwarded in some way,\
    \ the recipient is not\n   able to verify the original integrity signature since\
    \ the source EID\n   will be different, and possibly other fields.\n   The solution\
    \ for either of these issues is to define and use a PIB\n   ciphersuite having\
    \ an alternate version of mutable canonicalization\n   any fields from the primary\
    \ block.\n"
- title: 3.5.  Endpoint ID Confidentiality
  contents:
  - "3.5.  Endpoint ID Confidentiality\n   Every bundle MUST contain a primary block\
    \ that contains the source\n   and destination endpoint IDs, and possibly other\
    \ EIDs (in the\n   dictionary field), and that cannot be encrypted.  If endpoint\
    \ ID\n   confidentiality is required, then bundle-in-bundle encapsulation can\n\
    \   solve this problem in some instances.\n   Similarly, confidentiality requirements\
    \ MAY also apply to other parts\n   of the primary block (e.g., the current-custodian),\
    \ and that is\n   supported in the same manner.\n"
- title: 3.6.  Bundles Received from Other Nodes
  contents:
  - "3.6.  Bundles Received from Other Nodes\n   Nodes implementing this specification\
    \ SHALL consult their security\n   policy to determine whether or not a received\
    \ bundle is required by\n   policy to include a BAB.  If the bundle has no BAB,\
    \ and one is not\n   required, then BAB processing on the received bundle is complete,\
    \ and\n   the bundle is ready to be further processed for PIB/PCB/ESB handling\n\
    \   or delivery or forwarding.\n   If the bundle is required to have a BAB but\
    \ does not, then the bundle\n   MUST be discarded and processed no further.  If\
    \ the bundle is\n   required to have a BAB but all of its BABs identify a node\
    \ other than\n   the receiving node as the BAB security-destination, then the\
    \ bundle\n   MUST be discarded and processed no further.\n   If the bundle is\
    \ required to have a BAB, and has one or more BABs\n   that identify the receiving\
    \ node as the BAB security-destination, or\n   for which there is no security-destination,\
    \ then the value in the\n   security-result field(s) of the BAB(s) MUST be verified\
    \ according to\n   the ciphersuite specification.  If, for all such BABs in the\
    \ bundle,\n   either the BAB security source cannot be determined or the security-\n\
    \   result value check fails, the bundle has failed to authenticate, and\n   the\
    \ bundle MUST be discarded and processed no further.  If any of the\n   BABs present\
    \ verify, or if a BAB is not required, the bundle is ready\n   for further processing\
    \ as determined by extension blocks and/or\n   policy.\n   BABs received in a\
    \ bundle MUST be stripped before the bundle is\n   forwarded.  New BABs MAY be\
    \ added as required by policy.  This MAY\n   require correcting the \"last block\"\
    \ field of the to-be-forwarded\n   bundle.\n   Further processing of the bundle\
    \ MUST take place in the order\n   indicated by the various blocks from the primary\
    \ block to the payload\n   block, except as defined by an applicable specification.\n\
    \   If the bundle has a PCB and the receiving node is the PCB-destination\n  \
    \ for the bundle (either because the node is listed as the bundle's\n   PCB-destination\
    \ or because the node is listed as the bundle-\n   destination and there is no\
    \ PCB-dest), the node MUST decrypt the\n   relevant parts of the bundle in accordance\
    \ with the ciphersuite\n   specification.  The PCB SHALL be deleted.  If the relevant\
    \ parts of\n   the bundle cannot be decrypted (i.e., the decryption key cannot\
    \ be\n   deduced or decryption fails), then the bundle MUST be discarded and\n\
    \   processed no further; in this case, a bundle deletion status report\n   (see\
    \ the Bundle Protocol Specification [DTNBP]) indicating the\n   decryption failure\
    \ MAY be generated.  If the PCB security-result\n   included the ciphertext of\
    \ a block other than the payload block, the\n   recovered plaintext block MUST\
    \ be placed in the bundle at the\n   location from which the PCB was deleted.\n\
    \   If the bundle has one or more PIBs for which the receiving node is\n   the\
    \ bundle's PIB-destination (either because the node is listed in\n   the bundle's\
    \ PIB-destination or because the node is listed as the\n   bundle-destination\
    \ and there is no PIB-dest), the node MUST verify\n   the value in the PIB security-result\
    \ field(s) in accordance with the\n   ciphersuite specification.  If all the checks\
    \ fail, the bundle has\n   failed to authenticate and the bundle SHALL be processed\
    \ according to\n   the security policy.  A bundle status report indicating the\
    \ failure\n   MAY be generated.  Otherwise, if the PIB verifies, the bundle is\n\
    \   ready to be processed for either delivery or forwarding.  Before\n   forwarding\
    \ the bundle, the node SHOULD remove the PIB from the\n   bundle, subject to the\
    \ requirements of Section 3.2, unless it is\n   likely that some downstream node\
    \ will also be able to verify the PIB.\n   If the bundle has a PIB and the receiving\
    \ node is not the bundle's\n   PIB-dest, the receiving node MAY attempt to verify\
    \ the value in the\n   security-result field.  If it is able to check and the\
    \ check fails,\n   the node SHALL discard the bundle and it MAY send a bundle\
    \ status\n   report indicating the failure.\n   If the bundle has an ESB and the\
    \ receiving node is the ESB-\n   destination for the bundle (either because the\
    \ node is listed as the\n   bundle's ESB-destination or because the node is listed\
    \ as the bundle-\n   destination and there is no ESB-destination), the node MUST\
    \ decrypt\n   and/or decapsulate the encapsulated block in accordance with the\n\
    \   ciphersuite specification.  The decapsulated block replaces the ESB\n   in\
    \ the bundle block sequence, and the ESB is thereby deleted.  If the\n   content\
    \ cannot be decrypted (i.e., the decryption key cannot be\n   deduced or decryption\
    \ fails), then the bundle MAY be discarded and\n   processed no further unless\
    \ the security policy specifies otherwise.\n   In this case, a bundle deletion\
    \ status report (see the Bundle\n   Protocol Specification [DTNBP]) indicating\
    \ the decryption failure MAY\n   be generated.\n"
- title: 3.7.  The At-Most-Once-Delivery Option
  contents:
  - "3.7.  The At-Most-Once-Delivery Option\n   An application MAY request (in an\
    \ implementation-specific manner)\n   that a node be registered as a member of\
    \ an endpoint and that\n   received bundles destined for that endpoint be delivered\
    \ to that\n   application.\n   An option for use in such cases is known as \"\
    at-most-once-delivery\".\n   If this option is chosen, the application indicates\
    \ that it wants the\n   node to check for duplicate bundles, discard duplicates,\
    \ and deliver\n   at most one copy of each received bundle to the application.\
    \  If this\n   option is not chosen, the application indicates that it wants the\n\
    \   node to deliver all received bundle copies to the application.  If\n   this\
    \ option is chosen, the node SHALL deliver at most one copy of\n   each received\
    \ bundle to the application.  If the option is not\n   chosen, the node SHOULD,\
    \ subject to policy, deliver all bundles.\n   To enforce this, the node MUST look\
    \ at the source/timestamp pair\n   value of each complete (reassembled, if necessary)\
    \ bundle received\n   and determine if this pair, which uniquely identifies a\
    \ bundle, has\n   been previously received.  If it has, then the bundle is a duplicate.\n\
    \   If it has not, then the bundle is not a duplicate.  The source/\n   timestamp\
    \ pair SHALL be added to the list of pair values already\n   received by that\
    \ node.\n   Each node implementation MAY decide how long to maintain a table of\n\
    \   pair value state.\n"
- title: 3.8.  Bundle Fragmentation and Reassembly
  contents:
  - "3.8.  Bundle Fragmentation and Reassembly\n   If it is necessary for a node to\
    \ fragment a bundle and security\n   services have been applied to that bundle,\
    \ the fragmentation rules\n   described in [DTNBP] MUST be followed.  As defined\
    \ there and repeated\n   here for completeness, only the payload MAY be fragmented;\
    \ security\n   blocks, like all extension blocks, can never be fragmented.  In\n\
    \   addition, the following security-specific processing is REQUIRED:\n   The\
    \ security policy requirements for a bundle MUST be applied\n   individually to\
    \ all the bundles resulting from a fragmentation event.\n   If the original bundle\
    \ contained a PIB, then each of the PIB\n   instances MUST be included in some\
    \ fragment.\n   If the original bundle contained one or more PCBs, then any PCB\n\
    \   instances containing a key-information item MUST have the \"replicate\n  \
    \ in every fragment\" flag set, and thereby be replicated in every\n   fragment.\
    \  This is to ensure that the canonical block-sequence can be\n   recovered during\
    \ reassembly.\n   If the original bundle contained one or more correlated PCBs\
    \ not\n   containing a key-information item, then each of these MUST be\n   included\
    \ in some fragment, but SHOULD NOT be sent more than once.\n   They MUST be placed\
    \ in a fragment in accordance with the\n   fragmentation rules described in [DTNBP].\n\
    \   Note: various fragments MAY have additional security blocks added at\n   this\
    \ or later stages, and it is possible that correlators will\n   collide.  In order\
    \ to facilitate uniqueness, ciphersuites SHOULD\n   include the fragment-offset\
    \ of the fragment as a high-order component\n   of the correlator.\n"
- title: 3.9.  Reactive Fragmentation
  contents:
  - "3.9.  Reactive Fragmentation\n   When a partial bundle has been received, the\
    \ receiving node SHALL\n   consult its security policy to determine if it MAY\
    \ fragment the\n   bundle, converting the received portion into a bundle fragment\
    \ for\n   further forwarding.  Whether or not reactive fragmentation is\n   permitted\
    \ SHALL depend on the security policy and the ciphersuite\n   used to calculate\
    \ the BAB authentication information, if required.\n   (Some BAB ciphersuites,\
    \ i.e., the mandatory BAB-HMAC (Hashed Message\n   Authentication Code) ciphersuite\
    \ defined in Section 4.1, do not\n   accommodate reactive fragmentation because\
    \ the security-result in the\n   BAB requires that the entire bundle be signed.\
    \  It is conceivable,\n   however, that a BAB ciphersuite could be defined such\
    \ that multiple\n   security-results are calculated, each on a different segment\
    \ of a\n   bundle, and that these security-results could be interspersed between\n\
    \   bundle payload segments such that reactive fragmentation could be\n   accommodated.)\n\
    \   If the bundle is reactively fragmented by the intermediate receiver\n   and\
    \ the BAB-ciphersuite is of an appropriate type (e.g., with\n   multiple security-results\
    \ embedded in the payload), the bundle MUST\n   be fragmented immediately after\
    \ the last security-result value in the\n   partial payload that is received.\
    \  Any data received after the last\n   security-result value MUST be dropped.\n\
    \   If a partial bundle is received at the intermediate receiver and is\n   reactively\
    \ fragmented and forwarded, only the part of the bundle that\n   was not received\
    \ MUST be retransmitted, though more of the bundle MAY\n   be retransmitted. \
    \ Before retransmitting a portion of the bundle, it\n   SHALL be changed into\
    \ a fragment and, if the original bundle included\n   a BAB, the fragmented bundle\
    \ MUST also, and its BAB SHALL be\n   recalculated.\n   This specification does\
    \ not define any ciphersuite that can handle\n   this reactive fragmentation case.\n\
    \   An interesting possibility is a ciphersuite definition such that the\n   transmission\
    \ of a follow-up fragment would be accompanied by the\n   signature for the payload\
    \ up to the restart point.\n"
- title: 3.10.  Attack Model
  contents:
  - "3.10.  Attack Model\n   An evaluation of resilience to cryptographic attack necessarily\n\
    \   depends upon the algorithms chosen for bulk data protection and for\n   key\
    \ transport.  The mandatory ciphersuites described in the following\n   section\
    \ use AES, RSA, and SHA algorithms in ways that are believed to\n   be reasonably\
    \ secure against ciphertext-only, chosen-ciphertext,\n   known-plaintext, and\
    \ chosen-plaintext attacks.\n   The design has carefully preserved the resilience\
    \ of the algorithms\n   against attack.  For example, if a message is encrypted,\
    \ then any\n   message integrity signature is also encrypted so that guesses cannot\n\
    \   be confirmed.\n"
- title: 4.  Mandatory Ciphersuites
  contents:
  - "4.  Mandatory Ciphersuites\n   This section defines the mandatory ciphersuites\
    \ for this\n   specification.  There is currently one mandatory ciphersuite for\
    \ use\n   with each of the security block types BAB, PIB, PCB, and ESB.  The\n\
    \   BAB ciphersuite is based on shared secrets using HMAC.  The PIB\n   ciphersuite\
    \ is based on digital signatures using RSA with SHA-256.\n   The PCB and ESB ciphersuites\
    \ are based on using RSA for key transport\n   and AES for bulk encryption.\n\
    \   In all uses of CMS eContent in this specification, the relevant\n   eContentType\
    \ to be used is id-data as specified in [RFC5652].\n   The ciphersuites use the\
    \ mechanisms defined in Cryptographic Message\n   Syntax (CMS) [RFC5652] for packaging\
    \ the keys, signatures, etc., for\n   transport in the appropriate security block.\
    \  The data in the CMS\n   object is not the bundle data, as would be the typical\
    \ usage for CMS.\n   Rather, the \"message data\" packaged by CMS is the ephemeral\
    \ key,\n   message digest, etc., used in the core code of the ciphersuite.\n \
    \  In all cases where we use CMS, implementations SHOULD NOT include\n   additional\
    \ attributes whether signed or unsigned, authenticated or\n   unauthenticated.\n"
- title: 4.1.  BAB-HMAC
  contents:
  - "4.1.  BAB-HMAC\n   The BAB-HMAC ciphersuite has ciphersuite ID value 0x001.\n\
    \   BAB-HMAC uses the strict canonicalization algorithm in Section 3.4.1.\n  \
    \ Strict canonicalization supports digesting of a fragment-bundle.  It\n   does\
    \ not permit the digesting of only a subset of the payload, but\n   only the complete\
    \ contents of the payload of the current bundle,\n   which might be a fragment.\
    \  The fragment-range item for security-\n   parameters is not used to indicate\
    \ a fragment, as this information is\n   digested within the primary block.\n\
    \   The variant of HMAC to be used is HMAC-SHA1 as defined in [RFC2104].\n   This\
    \ ciphersuite requires the use of two related instances of the\n   BAB.  It involves\
    \ placing the first BAB instance (as defined in\n   Section 2.2) just after the\
    \ primary block.  The second (correlated)\n   instance of the BAB MUST be placed\
    \ after all other blocks (except\n   possibly other BAB blocks) in the bundle.\n\
    \   This means that, normally, the BAB will be the second and last blocks\n  \
    \ of the bundle.  If a forwarder wishes to apply more than one\n   correlated\
    \ BAB pair, then this can be done.  There is no requirement\n   that each application\
    \ \"wrap\" the others, but the forwarder MUST\n   insert all the \"up front\"\
    \ BABs, and their \"at back\" \"partners\"\n   (without any security-result),\
    \ before canonicalizing.\n   Inserting more than one correlated BAB pair would\
    \ be useful if the\n   bundle could be routed to more than one potential \"next\
    \ hop\" or if\n   both an old and a new key were valid at sending time, with no\n\
    \   certainty about the situation that will obtain at reception time.\n   The\
    \ security-result is the output of the HMAC-SHA1 calculation with\n   the input\
    \ being the result of running the entire bundle through the\n   strict canonicalization\
    \ algorithm.  Both required BAB instances MUST\n   be included in the bundle before\
    \ canonicalization.\n   Security-parameters are OPTIONAL with this scheme, but\
    \ if used, then\n   the only field that can be present is key-information (see\n\
    \   Section 2.6).\n   In the absence of key-information, the receiver is expected\
    \ to be\n   able to find the correct key based on the sending identity.  The\n\
    \   sending identity MAY be known from the security-source field or the\n   content\
    \ of a previous-hop block in the bundle.  It MAY also be\n   determined using\
    \ implementation-specific means such as the\n   convergence layer.\n"
- title: 4.2.  PIB-RSA-SHA256
  contents:
  - "4.2.  PIB-RSA-SHA256\n   The PIB-RSA-SHA256 ciphersuite has ciphersuite ID value\
    \ 0x02.\n   PIB-RSA-SHA256 uses the mutable canonicalization algorithm in\n  \
    \ Section 3.4.2, with the security-result data field for only the\n   \"current\"\
    \ block being excluded from the canonical form.  The\n   resulting canonical form\
    \ of the bundle is the input to the signing\n   process.  This ciphersuite requires\
    \ the use of a single instance of\n   the PIB.\n   Because the signature field\
    \ in SignedData SignatureValue is a\n   security-result field, the entire key-information\
    \ item MUST be placed\n   in the block's security-result field, rather than security-\n\
    \   parameters.\n   If the bundle being signed has been fragmented before signing,\
    \ then\n   we have to specify which bytes were signed in case the signed bundle\n\
    \   is subsequently fragmented for a second time.  If the bundle is a\n   fragment,\
    \ then the ciphersuite-parameters MUST include a fragment-\n   range field, as\
    \ described in Section 2.6, specifying the offset and\n   length of the signed\
    \ fragment.  If the entire bundle is signed, then\n   these numbers MUST be omitted.\n\
    \   Implementations MUST support the use of the \"SignedData\" type as\n   defined\
    \ in [RFC5652], Section 5.1, with SignerInfo type\n   SignerIdentifier containing\
    \ the issuer and serial number of a\n   suitable certificate.  The data to be\
    \ signed is the output of the\n   SHA256 mutable canonicalization process.\n \
    \  RSA is used with SHA256 as specified for the id-sha256 signature\n   scheme\
    \ in [RFC4055], Section 5.  The output of the signing process is\n   the SignatureValue\
    \ field for the PIB.\n   \"Commensurate strength\" cryptography is generally held\
    \ to be a good\n   idea.  A combination of RSA with SHA-256 is reckoned to require\
    \ a\n   3076-bit RSA key according to this logic.  Few implementations will\n\
    \   choose this length by default (and probably some just will not\n   support\
    \ such long keys).  Since this is an experimental protocol, we\n   expect that\
    \ 1024- or 2048-bit RSA keys will be used in many cases,\n   and that this will\
    \ be fine since we also expect that the hash\n   function \"issues\" will be resolved\
    \ before any standard would be\n   derived from this protocol.\n"
- title: 4.3.  PCB-RSA-AES128-PAYLOAD-PIB-PCB
  contents:
  - "4.3.  PCB-RSA-AES128-PAYLOAD-PIB-PCB\n   The PCB-RSA-AES128-PAYLOAD-PIB-PCB ciphersuite\
    \ has ciphersuite ID\n   value 0x003.\n   This scheme encrypts PIBs, PCBs, and\
    \ the payload.  The key size for\n   this ciphersuite is 128 bits.\n   Encryption\
    \ is done using the AES algorithm in Galois/Counter Mode\n   (GCM) as described\
    \ in [RFC5084].  Note: parts of the following\n   description are borrowed from\
    \ [RFC4106].\n   The choice of GCM avoids expansion of the payload, which causes\n\
    \   problems with fragmentation/reassembly and custody transfer.  GCM\n   also\
    \ includes authentication, essential in preventing attacks that\n   can alter\
    \ the decrypted plaintext or even recover the encryption key.\n   GCM is a block\
    \ cipher mode of operation providing both\n   confidentiality and data integrity.\
    \  The GCM encryption operation has\n   four inputs: a secret key, an initialization\
    \ vector (IV), a\n   plaintext, and an input for additional authenticated data\
    \ (AAD),\n   which is not used here.  It has two outputs, a ciphertext whose\n\
    \   length is identical to the plaintext, and an authentication tag, also\n  \
    \ known as the integrity check value (ICV).\n   For consistency with the description\
    \ in [RFC5084], we refer to the\n   GCM IV as a nonce.  The same key and nonce\
    \ combination MUST NOT be\n   used more than once.  The nonce has the following\
    \ layout:\n   +----------------+----------------+----------------+----------------+\n\
    \   |                               salt                                |\n  \
    \ +----------------+----------------+----------------+----------------+\n   |\
    \                                                                   |\n   |  \
    \                    initialization vector                        |\n   |    \
    \                                                               |\n   +----------------+----------------+----------------+----------------+\n\
    \         Figure 6: Nonce Format for PCB-RSA-AES128-PAYLOAD-PIB-PCB\n   The salt\
    \ field is a four-octet value, usually chosen at random.  It\n   MUST be the same\
    \ for all PCBs that have the same correlator value.\n   The salt need not be kept\
    \ secret.\n   The initialization vector (IV) is an eight-octet value, usually\n\
    \   chosen at random.  It MUST be different for all PCBs that have the\n   same\
    \ correlator value.  The value need not be kept secret.\n   The key (bundle encryption\
    \ key, BEK) is a 16-octet (128 bits) value,\n   usually chosen at random.  The\
    \ value MUST be kept secret, as\n   described below.\n   The integrity check value\
    \ is a 16-octet value used to verify that the\n   protected data has not been\
    \ altered.  The value need not be kept\n   secret.\n   This ciphersuite requires\
    \ the use of a single PCB instance to deal\n   with payload confidentiality. \
    \ If the bundle already contains PIBs or\n   PCBs, then the ciphersuite will create\
    \ additional correlated blocks\n   to protect these PIBs and PCBs.  These \"additional\"\
    \ blocks replace\n   the original blocks on a one-to-one basis, so the number\
    \ of blocks\n   remains unchanged.  All of these related blocks MUST have the\
    \ same\n   correlator value.  The term \"first PCB\" in this section refers to\
    \ the\n   single PCB if there is only one or, if there are several, then to the\n\
    \   one containing the key-information.  This MUST be the first of the\n   set.\n\
    \   First PCB - the first PCB MAY contain a correlator value, and MAY\n   specify\
    \ security-source and/or security-destination in the EID-list.\n   If not specified,\
    \ the bundle-source and bundle-destination,\n   respectively, are used for these\
    \ values, as with other ciphersuites.\n   The block MUST contain security-parameters\
    \ and security-result\n   fields.  Each field MAY contain several items formatted\
    \ as described\n   in Section 2.6.\n   Security-parameters\n      key-information\n\
    \      salt\n      IV (this instance applies only to payload)\n      fragment\
    \ offset and length, if bundle is a fragment\n   Security-result\n      ICV\n\
    \   Subsequent PCBs MUST contain a correlator value to link them to the\n   first\
    \ PCB.  Security-source and security-destination are implied from\n   the first\
    \ PCB; however, see the discussion in Section 2.4 concerning\n   EID-list entries.\
    \  They MUST contain security-parameters and\n   security-result fields as follows:\n\
    \   Security-parameters\n      IV for this specific block\n   Security-result\n\
    \      encapsulated block\n   The security-parameters and security-result fields\
    \ in the subsequent\n   PCBs MUST NOT contain any items other than these two.\
    \  Items such as\n   key and salt are supplied in the first PCB and MUST NOT be\
    \ repeated.\n   Implementations MUST support use of \"enveloped-data\" type as\
    \ defined\n   in [RFC5652], Section 6, with RecipientInfo type\n   KeyTransRecipientInfo\
    \ containing the issuer and serial number of a\n   suitable certificate.  They\
    \ MAY support additional RecipientInfo\n   types.  The \"encryptedContent\" field\
    \ in EncryptedContentInfo contains\n   the encrypted BEK that protects the payload\
    \ and certain security\n   blocks of the bundle.\n   The Integrity Check Value\
    \ from the AES-GCM encryption of the payload\n   is placed in the security-result\
    \ field of the first PCB.\n   If the bundle being encrypted is a fragment-bundle,\
    \ we have to\n   specify which bytes are encrypted in case the bundle is subsequently\n\
    \   fragmented again.  If the bundle is a fragment, the ciphersuite-\n   parameters\
    \ MUST include a fragment-range field, as described in\n   Section 2.6, specifying\
    \ the offset and length of the encrypted\n   fragment.  Note that this is not\
    \ the same pair of fields that appear\n   in the primary block as \"offset and\
    \ length\".  The \"length\" in this\n   case is the length of the fragment, not\
    \ the original length.  If the\n   bundle is not a fragment, then this field MUST\
    \ be omitted.\n   The confidentiality processing for payload and other blocks\
    \ is\n   different, mainly because the payload might be fragmented later at\n\
    \   some other node.\n   For the payload, only the bytes of the bundle payload\
    \ field are\n   affected, being replaced by ciphertext.  The salt, IV, and key\
    \ values\n   specified in the first PCB are used to encrypt the payload, and the\n\
    \   resultant authentication tag (ICV) is placed in an ICV item in the\n   security-result\
    \ field of that first PCB.  The other bytes of the\n   payload block, such as\
    \ type, flags, and length, are not modified.\n   For each PIB or PCB to be protected,\
    \ the entire original block is\n   encapsulated in a \"replacing\" PCB.  This\
    \ replacing PCB is placed in\n   the outgoing bundle in the same position as the\
    \ original block, PIB\n   or PCB.  As mentioned above, this is one-to-one replacement,\
    \ and\n   there is no consolidation of blocks or mixing of data in any way.\n\
    \   The encryption process uses AES-GCM with the salt and key values from\n  \
    \ the first PCB, and an IV unique to this PCB.  The process creates\n   ciphertext\
    \ for the entire original block and an authentication tag\n   for validation at\
    \ the security-destination.  For this encapsulation\n   process, unlike the processing\
    \ of the bundle payload, the\n   authentication tag is appended to the ciphertext\
    \ for the block, and\n   the combination is stored into the encapsulated block\
    \ item in the\n   security-result.\n   The replacing block, of course, also has\
    \ the same correlator value as\n   the first PCB with which it is associated.\
    \  It also contains the\n   block-specific IV in security-parameters, and the\
    \ combination of\n   original-block-ciphertext and authentication tag, stored\
    \ as an\n   encapsulated block item in the security-result.\n   If the payload\
    \ was fragmented after encryption, then all those\n   fragments MUST be present\
    \ and reassembled before decryption.  This\n   process might be repeated several\
    \ times at different destinations if\n   multiple fragmentation actions have occurred.\n\
    \   The size of the GCM counter field limits the payload size to 2^39 -\n   256\
    \ bytes, about half a terabyte.  A future revision of this\n   specification will\
    \ address the issue of handling payloads in excess\n   of this size.\n"
- title: 4.4.  ESB-RSA-AES128-EXT
  contents:
  - "4.4.  ESB-RSA-AES128-EXT\n   The ESB-RSA-AES128-EXT ciphersuite has ciphersuite\
    \ ID value 0x004.\n   This scheme encrypts non-payload-related blocks.  It MUST\
    \ NOT be used\n   to encrypt PIBs, PCBs, or primary or payload blocks.  The key\
    \ size\n   for this ciphersuite is 128 bits.\n   Encryption is done using the\
    \ AES algorithm in Galois/Counter Mode\n   (GCM) as described in [RFC5084].  Note:\
    \ parts of the following\n   description are borrowed from [RFC4106].\n   GCM\
    \ is a block cipher mode of operation providing both\n   confidentiality and data\
    \ origin authentication.  The GCM\n   authenticated encryption operation has four\
    \ inputs: a secret key, an\n   initialization vector (IV), a plaintext, and an\
    \ input for additional\n   authenticated data (AAD), which is not used here. \
    \ It has two\n   outputs, a ciphertext whose length is identical to the plaintext,\
    \ and\n   an authentication tag, also known as the Integrity Check Value (ICV).\n\
    \   For consistency with the description in [RFC5084], we refer to the\n   GCM\
    \ IV as a nonce.  The same key and nonce combination MUST NOT be\n   used more\
    \ than once.  The nonce has the following layout:\n   +----------------+----------------+---------------------------------+\n\
    \   |                               salt                                |\n  \
    \ +----------------+----------------+---------------------------------+\n   |\
    \                                                                   |\n   |  \
    \                    initialization vector                        |\n   |    \
    \                                                               |\n   +----------------+----------------+---------------------------------+\n\
    \               Figure 7: Nonce Format for ESB-RSA-AES128-EXT\n   The salt field\
    \ is a four-octet value, usually chosen at random.  It\n   MUST be the same for\
    \ all ESBs that have the same correlator value.\n   The salt need not be kept\
    \ secret.\n   The initialization vector (IV) is an eight-octet value, usually\n\
    \   chosen at random.  It MUST be different for all ESBs that have the\n   same\
    \ correlator value.  The value need not be kept secret.\n   The data encryption\
    \ key is a 16-octet (128 bits) value, usually\n   chosen at random.  The value\
    \ MUST be kept secret, as described below.\n   The integrity check value is a\
    \ 16-octet value used to verify that the\n   protected data has not been altered.\
    \  The value need not be kept\n   secret.\n   This ciphersuite replaces each BP\
    \ extension block to be protected\n   with a \"replacing\" ESB, and each can be\
    \ individually specified.\n   If a number of related BP extension blocks are to\
    \ be protected, they\n   can be grouped as a correlated set and protected using\
    \ a single key.\n   These blocks replace the original blocks on a one-to-one basis,\
    \ so\n   the number of blocks remains unchanged.  All these related blocks\n \
    \  MUST have the same correlator value.  The term \"first ESB\" in this\n   section\
    \ refers to the single ESB if there is only one or, if there\n   are several,\
    \ then to the one containing the key or key-identifier.\n   This MUST be the first\
    \ of the set.  If the blocks are individually\n   specified, then there is no\
    \ correlated set and each block is its own\n   \"first ESB\".\n   First ESB -\
    \ the first ESB MAY contain a correlator value, and MAY\n   specify security-source\
    \ and/or security-destination in the EID-list.\n   If not specified, the bundle-source\
    \ and bundle-destination,\n   respectively, are used for these values, as with\
    \ other ciphersuites.\n   The block MUST contain security-parameters and security-result\n\
    \   fields.  Each field MAY contain several items formatted as described\n   in\
    \ Section 2.6.\n   Security-parameters\n      key-information\n      salt\n  \
    \    IV for this specific block\n      block type of encapsulated block (OPTIONAL)\n\
    \   Security-result\n      encapsulated block\n   Subsequent ESBs MUST contain\
    \ a correlator value to link them to the\n   first ESB.  Security-source and security-destination\
    \ are implied from\n   the first ESB; however, see the discussion in Section 2.4\
    \ concerning\n   EID-list entries.  Subsequent ESBs MUST contain security-parameters\n\
    \   and security-result fields as follows:\n   Security-parameters\n      IV for\
    \ this specific block\n      block type of encapsulated block (OPTIONAL)\n   Security-result\n\
    \      encapsulated block\n   The security-parameters and security-result fields\
    \ in the subsequent\n   ESBs MUST NOT contain any items other than those listed.\
    \  Items such\n   as key-information and salt are supplied in the first ESB and\
    \ MUST\n   NOT be repeated.\n   Implementations MUST support the use of \"enveloped-data\"\
    \ type as\n   defined in [RFC5652], Section 6, with RecipientInfo type\n   KeyTransRecipientInfo\
    \ containing the issuer and serial number of a\n   suitable certificate.  They\
    \ MAY support additional RecipientInfo\n   types.  The \"encryptedContent\" field\
    \ in EncryptedContentInfo contains\n   the encrypted BEK used to encrypt the content\
    \ of the block being\n   protected.\n   For each block to be protected, the entire\
    \ original block is\n   encapsulated in a \"replacing\" ESB.  This replacing ESB\
    \ is placed in\n   the outgoing bundle in the same position as the original block.\
    \  As\n   mentioned above, this is one-to-one replacement, and there is no\n \
    \  consolidation of blocks or mixing of data in any way.\n   The encryption process\
    \ uses AES-GCM with the salt and key values from\n   the first ESB and an IV unique\
    \ to this ESB.  The process creates\n   ciphertext for the entire original block,\
    \ and an authentication tag\n   for validation at the security-destination.  The\
    \ authentication tag\n   is appended to the ciphertext for the block and the combination\
    \ is\n   stored into the encapsulated block item in security-result.\n   The replacing\
    \ block, of course, also has the same correlator value as\n   the first ESB with\
    \ which it is associated.  It also contains the\n   block-specific IV in security-parameters,\
    \ and the combination of\n   original-block-ciphertext and authentication tag,\
    \ stored as an\n   encapsulated block item in security-result.\n"
- title: 5.  Key Management
  contents:
  - "5.  Key Management\n   Key management in delay-tolerant networks is recognized\
    \ as a\n   difficult topic and is one that this specification does not attempt\n\
    \   to solve.  However, solely in order to support implementation and\n   testing,\
    \ implementations SHOULD support:\n   o  The use of well-known RSA public keys\
    \ for all ciphersuites.\n   o  Long-term pre-shared-symmetric keys for the BAB-HMAC\
    \ ciphersuite.\n   Since endpoint IDs are URIs and URIs can be placed in X.509\
    \ [RFC5280]\n   public key certificates (in the subjectAltName extension),\n \
    \  implementations SHOULD support this way of distributing public keys.\n   RFC\
    \ 5280 does not insist that implementations include revocation\n   checking. \
    \ In the context of a DTN, it is reasonably likely that some\n   nodes would not\
    \ be able to use revocation checking services (either\n   Certificate Revocation\
    \ Lists (CRLs) or the Online Certificate Status\n   Protocol (OCSP)) and deployments\
    \ SHOULD take this into account when\n   planning any public key infrastructure\
    \ to support this specification.\n"
- title: 6.  Default Security Policy
  contents:
  - "6.  Default Security Policy\n   Every node serves as a Policy Enforcement Point\
    \ insofar as it\n   enforces some policy that controls the forwarding and delivery\
    \ of\n   bundles via one or more convergence layer protocol implementation.\n\
    \   Consequently, every node SHALL have and operate according to its own\n   configurable\
    \ security policy, whether the policy be explicit or\n   default.  The policy\
    \ SHALL specify:\n      Under what conditions received bundles SHALL be forwarded.\n\
    \      Under what conditions received bundles SHALL be required to\n      include\
    \ valid BABs.\n      Under what conditions the authentication information provided\
    \ in a\n      bundle's BAB SHALL be deemed adequate to authenticate the bundle.\n\
    \      Under what conditions received bundles SHALL be required to have\n    \
    \  valid PIBs and/or PCBs.\n      Under what conditions the authentication information\
    \ provided in a\n      bundle's PIB SHALL be deemed adequate to authenticate the\
    \ bundle.\n      Under what conditions a BAB SHALL be added to a received bundle\n\
    \      before that bundle is forwarded.\n      Under what conditions a PIB SHALL\
    \ be added to a received bundle\n      before that bundle is forwarded.\n    \
    \  Under what conditions a PCB SHALL be added to a received bundle\n      before\
    \ that bundle is forwarded.\n      Under what conditions an ESB SHALL be applied\
    \ to one or more\n      blocks in a received bundle before that bundle is forwarded.\n\
    \      The actions that SHALL be taken in the event that a received\n      bundle\
    \ does not meet the receiving node's security policy\n      criteria.\n   This\
    \ specification does not address how security policies get\n   distributed to\
    \ nodes.  It only REQUIRES that nodes have and enforce\n   security policies.\n\
    \   If no security policy is specified at a given node, or if a security\n   policy\
    \ is only partially specified, that node's default policy\n   regarding unspecified\
    \ criteria SHALL consist of the following:\n      Bundles that are not well-formed\
    \ do not meet the security policy\n      criteria.\n      The mandatory ciphersuites\
    \ MUST be used.\n      All bundles received MUST have a BAB that MUST be verified\
    \ to\n      contain a valid security-result.  If the bundle does not have a\n\
    \      BAB, then the bundle MUST be discarded and processed no further; a\n  \
    \    bundle status report indicating the authentication failure MAY be\n     \
    \ generated.\n      No received bundles SHALL be required to have a PIB; if a\
    \ received\n      bundle does have a PIB, however, the PIB can be ignored unless\
    \ the\n      receiving node is the PIB-destination, in which case the PIB MUST\n\
    \      be verified.\n      No received bundles SHALL be required to have a PCB;\
    \ if a received\n      bundle does have a PCB, however, the PCB can be ignored\
    \ unless the\n      receiving node is the PCB-destination, in which case the PCB\
    \ MUST\n      be processed.  If processing a PCB yields a PIB, that PIB SHALL\
    \ be\n      processed by the node according to the node's security policy.\n \
    \     A PIB SHALL NOT be added to a bundle before sourcing or forwarding\n   \
    \   it.\n      A PCB SHALL NOT be added to a bundle before sourcing or forwarding\n\
    \      it.\n      A BAB MUST always be added to a bundle before that bundle is\n\
    \      forwarded.\n      If a destination node receives a bundle that has a PIB-destination\n\
    \      but the value in that PIB-destination is not the EID of the\n      destination\
    \ node, the bundle SHALL be delivered at that\n      destination node.\n     \
    \ If a destination node receives a bundle that has an ESB-\n      destination\
    \ but the value in that ESB-destination is not the EID\n      of the destination\
    \ node, the bundle SHALL be delivered at that\n      destination node.\n     \
    \ If a received bundle does not satisfy the node's security policy\n      for\
    \ any reason, then the bundle MUST be discarded and processed no\n      further;\
    \ in this case, a bundle deletion status report (see the\n      Bundle Protocol\
    \ Specification [DTNBP]) indicating the failure MAY\n      be generated.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The Bundle Security Protocol builds upon much\
    \ work of others, in\n   particular, \"Cryptographic Message Syntax (CMS)\" [RFC5652]\
    \ and\n   \"Internet X.509 Public Key Infrastructure Certificate and Certificate\n\
    \   Revocation List (CRL) Profile\" [RFC5280].  The security\n   considerations\
    \ in these two documents apply here as well.\n   Several documents specifically\
    \ consider the use of Galois/Counter\n   Mode (GCM) and of AES and are important\
    \ to consider when building\n   ciphersuites.  These are \"The Use of Galois/Counter\
    \ Mode (GCM) in\n   IPsec Encapsulating Security Payload (ESP)\" [RFC4106] and\
    \ \"Using AES-\n   CCM and AES-GCM Authenticated Encryption in the Cryptographic\
    \ Message\n   Syntax (CMS)\" [RFC5084].  Although the BSP is not identical, many\
    \ of\n   the security issues considered in these documents also apply here.\n\
    \   Certain applications of DTN need to both sign and encrypt a message,\n   and\
    \ there are security issues to consider with this.\n   If the intent is to provide\
    \ an assurance that a message did, in fact,\n   come from a specific source and\
    \ has not been changed, then it should\n   be signed first and then encrypted.\
    \  A signature on an encrypted\n   message does not establish any relationship\
    \ between the signer and\n   the original plaintext message.\n   On the other\
    \ hand, if the intent is to reduce the threat of denial-\n   of-service attacks,\
    \ then signing the encrypted message is\n   appropriate.  A message that fails\
    \ the signature check will not be\n   processed through the computationally intensive\
    \ decryption pass.  A\n   more extensive discussion of these points is in S/MIME\
    \ 3.2 Message\n   Specification [RFC5751], especially in Section 3.6.\n   Additional\
    \ details relating to these combinations can be found in\n   Section 2.8 where\
    \ it is RECOMMENDED that the encrypt-then-sign\n   combination is usually appropriate\
    \ for usage in a DTN.\n   In a DTN, encrypt-then-sign potentially allows intermediate\
    \ nodes to\n   verify a signature (over the ciphertext) and thereby apply policy\
    \ to\n   manage possibly scarce storage or other resources at intermediate\n \
    \  nodes in the path the bundle takes from source to destination EID.\n   An encrypt-then-sign\
    \ scheme does not further expose identity in most\n   cases since the BP mandates\
    \ that the source EID (which is commonly\n   expected to be the security-source)\
    \ is already exposed in the primary\n   block of the bundle.  Should exposure\
    \ of either the source EID or the\n   signerInfo be considered an interesting\
    \ vulnerability, then some form\n   of bundle-in-bundle encapsulation would be\
    \ required as a mitigation.\n   If a BAB ciphersuite uses digital signatures but\
    \ doesn't include the\n   security-destination (which for a BAB is the next host),\
    \ then this\n   allows the bundle to be sent to some node other than the intended\n\
    \   adjacent node.  Because the BAB will still authenticate, the\n   receiving\
    \ node might erroneously accept and forward the bundle.  When\n   asymmetric BAB\
    \ ciphersuites are used, the security-destination field\n   SHOULD therefore be\
    \ included in the BAB.\n   If a bundle's PIB-destination is not the same as its\
    \ destination,\n   then some node other than the destination (the node identified\
    \ as the\n   PIB-destination) is expected to validate the PIB security-result\n\
    \   while the bundle is en route.  However, if for some reason the PIB is\n  \
    \ not validated, there is no way for the destination to become aware of\n   this.\
    \  Typically, a PIB-destination will remove the PIB from the\n   bundle after\
    \ verifying the PIB and before forwarding it.  However, if\n   there is a possibility\
    \ that the PIB will also be verified at a\n   downstream node, the PIB-destination\
    \ will leave the PIB in the\n   bundle.  Therefore, if a destination receives\
    \ a bundle with a PIB\n   that has a PIB-destination (which isn't the destination),\
    \ this might,\n   but does not necessarily, indicate a possible problem.\n   If\
    \ a bundle is fragmented after being forwarded by its PIB-source but\n   before\
    \ being received by its PIB-destination, the payload in the\n   bundle MUST be\
    \ reassembled before validating the PIB security-result\n   in order for the security-result\
    \ to validate correctly.  Therefore,\n   if the PIB-destination is not capable\
    \ of performing payload\n   reassembly, its utility as a PIB-destination will\
    \ be limited to\n   validating only those bundles that have not been fragmented\
    \ since\n   being forwarded from the PIB-source.  Similarly, if a bundle is\n\
    \   fragmented after being forwarded by its PIB-source but before being\n   received\
    \ by its PIB-destination, all fragments MUST be received at\n   that PIB-destination\
    \ in order for the bundle payload to be able to be\n   reassembled.  If not all\
    \ fragments are received at the PIB-\n   destination node, the bundle will not\
    \ be able to be authenticated,\n   and will therefore never be forwarded by this\
    \ PIB-destination node.\n   Specification of a security-destination other than\
    \ the bundle-\n   destination creates a routing requirement that the bundle somehow\
    \ be\n   directed to the security-destination node on its way to the final\n \
    \  destination.  This requirement is presently private to the\n   ciphersuite,\
    \ since routing nodes are not required to implement\n   security processing.\n\
    \   If a security target were to generate reports in the event that some\n   security\
    \ validation step fails, then that might leak information\n   about the internal\
    \ structure or policies of the DTN containing the\n   security target.  This is\
    \ sometimes considered bad security practice,\n   so it SHOULD only be done with\
    \ care.\n"
- title: 8.  Conformance
  contents:
  - "8.  Conformance\n   As indicated above, this document describes both BSP and\n\
    \   ciphersuites.  A conformant implementation MUST implement both BSP\n   support\
    \ and the four ciphersuites described in Section 4.  It MAY\n   also support other\
    \ ciphersuites.\n   Implementations that support BSP but not all four mandatory\n\
    \   ciphersuites MUST claim only \"restricted compliance\" with this\n   specification,\
    \ even if they provide other ciphersuites.\n   All implementations are strongly\
    \ RECOMMENDED to provide at least a\n   BAB ciphersuite.  A relay node, for example,\
    \ might not deal with end-\n   to-end confidentiality and data integrity, but\
    \ it SHOULD exclude\n   unauthorized traffic and perform hop-by-hop bundle verification.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This protocol has fields that have been registered\
    \ by IANA.\n"
- title: 9.1.  Bundle Block Types
  contents:
  - "9.1.  Bundle Block Types\n   This specification allocates four codepoints from\
    \ the existing\n   \"Bundle Block Types\" registry defined in [RFC6255].\n   \
    \   Additional Entries for the Bundle Block-Type Codes Registry:\n      +-------+--------------------------------------+----------------+\n\
    \      | Value | Description                          | Reference      |\n   \
    \   +-------+--------------------------------------+----------------+\n      |\
    \     2 | Bundle Authentication Block          | This document  |\n      |   \
    \  3 | Payload Integrity Block              | This document  |\n      |     4\
    \ | Payload Confidentiality Block        | This document  |\n      |     9 | Extension\
    \ Security Block             | This document  |\n      +-------+--------------------------------------+----------------+\n"
- title: 9.2.  Ciphersuite Numbers
  contents:
  - "9.2.  Ciphersuite Numbers\n   This protocol has a ciphersuite number field and\
    \ certain ciphersuites\n   are defined.  An IANA registry has been set up as follows.\n\
    \   The registration policy for this registry is: Specification Required\n   The\
    \ Value range is: Variable Length\n      Ciphersuite Numbers Registry:\n     \
    \ +-------+--------------------------------------+----------------+\n      | Value\
    \ | Description                          | Reference      |\n      +-------+--------------------------------------+----------------+\n\
    \      |     0 | unassigned                           | This document  |\n   \
    \   |     1 | BAB-HMAC                             | This document  |\n      |\
    \     2 | PIB-RSA-SHA256                       | This document  |\n      |   \
    \  3 | PCB-RSA-AES128-PAYLOAD-PIB-PCB       | This document  |\n      |     4\
    \ | ESB-RSA-AES128-EXT                   | This document  |\n      |    >4 | Reserved\
    \                             | This document  |\n      +-------+--------------------------------------+----------------+\n"
- title: 9.3.  Ciphersuite Flags
  contents:
  - "9.3.  Ciphersuite Flags\n   This protocol has a ciphersuite flags field and certain\
    \ flags are\n   defined.  An IANA registry has been set up as follows.\n   The\
    \ registration policy for this registry is: Specification Required\n   The Value\
    \ range is: Variable Length\n      Ciphersuite Flags Registry:\n      +-----------------+----------------------------+----------------+\n\
    \      |    Bit Position | Description                | Reference      |\n   \
    \   | (right to left) |                            |                |\n      +-----------------+----------------------------+----------------+\n\
    \      |               0 | Block contains result      | This document  |\n   \
    \   |               1 | Block contains correlator  | This document  |\n      |\
    \               2 | Block contains parameters  | This document  |\n      |   \
    \            3 | Destination EIDref present | This document  |\n      |      \
    \         4 | Source EIDref present      | This document  |\n      |         \
    \     >4 | Reserved                   | This document  |\n      +-----------------+----------------------------+----------------+\n"
- title: 9.4.  Parameters and Results
  contents:
  - "9.4.  Parameters and Results\n   This protocol has fields for ciphersuite-parameters\
    \ and results.  The\n   field is a type-length-value triple and a registry is\
    \ required for\n   the \"type\" sub-field.  The values for \"type\" apply to both\
    \ the\n   ciphersuite-parameters and the ciphersuite results fields.  Certain\n\
    \   values are defined.  An IANA registry has been set up as follows.\n   The\
    \ registration policy for this registry is: Specification Required\n   The Value\
    \ range is: 8-bit unsigned integer\n      Ciphersuite-Parameters and Results Type\
    \ Registry:\n      +---------+------------------------------------+----------------+\n\
    \      | Value   | Description                        | Reference      |\n   \
    \   +---------+------------------------------------+----------------+\n      |\
    \       0 | reserved                           | This document  |\n      |   \
    \    1 | initialization vector (IV)         | This document  |\n      |      \
    \ 2 | reserved                           | This document  |\n      |       3 |\
    \ key-information                    | This document  |\n      |       4 | fragment-range\
    \ (pair of SDNVs)     | This document  |\n      |       5 | integrity signature\
    \                | This document  |\n      |       6 | unassigned            \
    \             | This document  |\n      |       7 | salt                     \
    \          | This document  |\n      |       8 | PCB integrity check value (ICV)\
    \    | This document  |\n      |       9 | reserved                          \
    \ | This document  |\n      |      10 | encapsulated block                 | This\
    \ document  |\n      |      11 | block type of encapsulated block   | This document\
    \  |\n      |  12-191 | reserved                           | This document  |\n\
    \      | 192-250 | private use                        | This document  |\n   \
    \   | 251-255 | reserved                           | This document  |\n      +-------+--------------------------------------+----------------+\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [DTNBP]    Scott, K. and S. Burleigh, \"Bundle\
    \ Protocol\n              Specification\", RFC 5050, November 2007.\n   [DTNMD]\
    \    Symington, S., \"Delay-Tolerant Networking Metadata\n              Extension\
    \ Block\", RFC 6258, May 2011.\n   [RFC2104]  Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\"\
    , RFC 2104,\n              February 1997.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC4055]  Schaad, J., Kaliski, B., and R. Housley, \"\
    Additional\n              Algorithms and Identifiers for RSA Cryptography for\
    \ use in\n              the Internet X.509 Public Key Infrastructure Certificate\n\
    \              and Certificate Revocation List (CRL) Profile\", RFC 4055,\n  \
    \            June 2005.\n   [RFC4106]  Viega, J. and D. McGrew, \"The Use of Galois/Counter\
    \ Mode\n              (GCM) in IPsec Encapsulating Security Payload (ESP)\",\n\
    \              RFC 4106, June 2005.\n   [RFC5280]  Cooper, D., Santesson, S.,\
    \ Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5652]  Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652,\
    \ September 2009.\n   [RFC6255]  Blanchet, M., \"Delay-Tolerant Networking (DTN)\
    \ Bundle\n              Protocol IANA Registries\", RFC 6255, May 2011.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [DTNarch]  Cerf, V., Burleigh, S., Hooke, A.,\
    \ Torgerson, L., Durst,\n              R., Scott, K., Fall, K., and H. Weiss,\
    \ \"Delay-Tolerant\n              Networking Architecture\", RFC 4838, April 2007.\n\
    \   [PHIB]     Symington, S., \"Delay-Tolerant Networking Previous-Hop\n     \
    \         Insertion Block\", RFC 6259, May 2011.\n   [RFC3986]  Berners-Lee, T.,\
    \ Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, January 2005.\n  \
    \ [RFC5084]  Housley, R., \"Using AES-CCM and AES-GCM Authenticated\n        \
    \      Encryption in the Cryptographic Message Syntax (CMS)\",\n             \
    \ RFC 5084, November 2007.\n   [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose\
    \ Internet\n              Mail Extensions (S/MIME) Version 3.2 Message\n     \
    \         Specification\", RFC 5751, January 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Susan Flynn Symington\n   The MITRE Corporation\n   7515\
    \ Colshire Drive\n   McLean, VA  22102\n   US\n   Phone: +1 (703) 983-7209\n \
    \  EMail: susan@mitre.org\n   URI:   http://mitre.org/\n   Stephen Farrell\n \
    \  Trinity College Dublin\n   Distributed Systems Group\n   Department of Computer\
    \ Science\n   Trinity College\n   Dublin  2\n   Ireland\n   Phone: +353-1-896-2354\n\
    \   EMail: stephen.farrell@cs.tcd.ie\n   Howard Weiss\n   SPARTA, Inc.\n   7110\
    \ Samuel Morse Drive\n   Columbia, MD  21046\n   US\n   Phone: +1-443-430-8089\n\
    \   EMail: howard.weiss@sparta.com\n   Peter Lovell\n   SPARTA, Inc.\n   7110\
    \ Samuel Morse Drive\n   Columbia, MD  21046\n   US\n   Phone: +1-443-430-8052\n\
    \   EMail: dtnbsp@gmail.com\n"
