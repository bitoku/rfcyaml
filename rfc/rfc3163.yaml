- title: __initial_text__
  contents:
  - '              ISO/IEC 9798-3 Authentication SASL Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   It is the opinion of the Security Area Directors that this document\n\
    \   defines a mechanism to use a complex system (namely PKI certificates)\n  \
    \ for authentication, but then intentionally discards the key benefits\n   (namely\
    \ integrity on each transmission).  Put another way, it has all\n   of the pain\
    \ of implementing a PKI and none of the benefits.  We\n   should not support it\
    \ in use in Internet protocols.\n   The same effect, with the benefits of PKI,\
    \ can be had by using\n   TLS/SSL, an existing already standards track protocol.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a SASL (Simple Authentication and Security\n\
    \   Layer) authentication mechanism based on ISO/IEC 9798-3 and FIPS PUB\n   196\
    \ entity authentication.\n"
- title: 1. Introduction
  contents:
  - '1. Introduction

    '
- title: 1.1. Overview
  contents:
  - "1.1. Overview\n   This document defines a SASL [RFC2222] authentication mechanism\
    \ based\n   on ISO/IEC 9798-3 [ISO3] and FIPS PUB 196 [FIPS] entity\n   authentication.\n\
    \   This mechanism only provides authentication using X.509 certificates\n   [X509].\
    \  It has no effect on the protocol encodings and does not\n   provide integrity\
    \ or confidentiality services.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   The key benefit of asymmetric (public key) security,\
    \ is that the\n   secret (private key) only needs to be placed with the entity\
    \ that is\n   being authenticated.  Thus, a private key can be issued to a client,\n\
    \   which can then be authenticated by ANY server based on a token\n   generated\
    \ by the client and the generally available public key.\n   Symmetric authentication\
    \ mechanisms (password mechanisms such as\n   CRAM-MD5 [RFC2195]) require a shared\
    \ secret, and the need to maintain\n   it at both endpoints.  This means that\
    \ a secret key for the client\n   needs to be maintained at every server that\
    \ may need to authenticate\n   the client.\n   The service described in this memo\
    \ provides authentication only.\n   There are a number of places where an authentication\
    \ only service is\n   useful, e.g., where confidentiality and integrity are provided\
    \ by\n   lower layers, or where confidentiality or integrity services are\n  \
    \ provided by the application.\n"
- title: 1.2. Relationship to TLS
  contents:
  - "1.2. Relationship to TLS\n   The functionality defined here can be provided by\
    \ TLS, and it is\n   important to consider why it is useful to have it in both\
    \ places.\n   There are several reasons for this, e.g.:\n      -  Simplicity.\
    \  This mechanism is simpler than TLS.  If there is\n         only a requirement\
    \ for this functionality (as distinct from all\n         of TLS), this simplicity\
    \ will facilitate deployment.\n      -  Layering.  The SASL mechanism to establish\
    \ authentication works\n         cleanly with most protocols.  This mechanism\
    \ can fit more\n         cleanly than TLS for some protocols.\n      -  Proxies.\
    \  In some architectures the endpoint of the TLS session\n         may not be\
    \ the application endpoint.  In these situations, this\n         mechanism can\
    \ be used to obtain end-to-end authentication.\n      -  Upgrade of authentication.\
    \  In some applications it may not be\n         clear at the time of TLS session\
    \ negotiation what type of\n         authentication may be required (e.g., anonymous,\
    \ server,\n         client-server).  This mechanism allows the negotiation of\
    \ an\n         anonymous or server authenticated TLS session which can, at a\n\
    \         later time, be upgraded to provide the desired level of\n         authentication.\n"
- title: 2.  Description of Mechanism
  contents:
  - '2.  Description of Mechanism

    '
- title: 2.1. Scope
  contents:
  - "2.1. Scope\n   The mechanism described in this memo provides either mutual or\n\
    \   unilateral entity authentication as defined in ISO/IEC 9798-1 [ISO1]\n   using\
    \ an asymmetric (public-key) digital signature mechanism.\n"
- title: 2.2. Authentication modes
  contents:
  - "2.2. Authentication modes\n   This SASL mechanism contains two authentication\
    \ modes:\n      -  Unilateral client authentication: The client digitally signs\
    \ a\n         challenge from the server, thus authenticating itself to the\n \
    \        server.\n      -  Mutual authentication: The client digitally signs a\
    \ challenge\n         from the server and the server digitally signs a challenge\
    \ from\n         the client.  Thus both the client and server authenticate each\n\
    \         other.\n"
- title: 2.3. SASL key
  contents:
  - "2.3. SASL key\n   This mechanism has two SASL keys corresponding to the two different\n\
    \   modes:\n      -  \"9798-U-<algorithm>\" for unilateral client authentication.\n\
    \      -  \"9798-M-<algorithm>\" for mutual authentication.\n   Each SASL key\
    \ may be used with a list of algorithms.  A list of\n   supported algorithms is\
    \ given in Section 4.\n"
- title: 2.4. Unilateral Client Authentication
  contents:
  - "2.4. Unilateral Client Authentication\n   This section gives a brief description\
    \ of the steps that are\n   performed for unilateral client authentication.  The\
    \ actual data\n   structures are described fully in Section 3.\n      a) The server\
    \ generates a random challenge value R_B and sends it\n         to the client.\n\
    \      b) The client generates a random value R_A and creates a token\n      \
    \   TokenAB.  The token contains R_A, the client's certificate and\n         also\
    \ a digital signature created by the client over both R_A\n         and R_B. \
    \ Optionally, it also contains an identifier for the\n         server.\n     \
    \ c) The client sends the token to the server.\n      d) The server verifies the\
    \ token by:\n         -  verifying the client's signature in TokenAB (this includes\n\
    \            full certificate path processing as described in [RFC2459]),\n  \
    \       -  verifying that the random number R_B, sent to the client in\n     \
    \       Step 1, agrees with the random number contained in the\n            signed\
    \ data of TokenAB, and\n         -  verifying that the identifier for the server,\
    \ if present,\n            matches the server's distinguishing identifier.\n"
- title: 2.5. Mutual Authentication
  contents:
  - "2.5. Mutual Authentication\n   This section gives a brief description of the\
    \ steps that are\n   performed for mutual authentication.  The actual data structures\
    \ are\n   described fully in Section 3.\n      a) The server generates a random\
    \ challenge value R_B and sends it\n         to the client.\n      b) The client\
    \ generates a random value R_A and creates a token\n         TokenAB.  The token\
    \ contains R_A, the client's certificate and\n         also a digital signature\
    \ created by the client over both R_A\n         and R_B.  Optionally, it also\
    \ contains an identifier for the\n         server.\n      c) The client sends\
    \ the token to the server.\n      d) The server verifies the token by:\n     \
    \    -  verifying the client's signature in TokenAB (this includes\n         \
    \   full certificate path processing as described in [RFC2459]),\n         - \
    \ verifying that the random number R_B, sent to the client in\n            Step\
    \ 1, agrees with the random number contained in the\n            signed data of\
    \ TokenAB, and\n         -  verifying that the identifier for the server, if present,\n\
    \            matches the server's distinguishing identifier.\n      e) The server\
    \ creates a token TokenBA.  The token contains a third\n         random value\
    \ R_C, the server's certificate and a digital\n         signature created by the\
    \ server over R_A, R_B and R_C.\n         Optionally, it also contains an identifier\
    \ for the client.\n      f) The server sends the token to the client.\n      g)\
    \ The client verifies the token by:\n         -  verifying the server's signature\
    \ in TokenBA (this includes\n            full certificate path processing as described\
    \ in [RFC2459]),\n         -  verifying that the random number R_B, received by\
    \ the client\n            in Step 1, agrees with the random number contained in\
    \ the\n            signed data of TokenBA,\n         -  verifying that the random\
    \ number R_A, sent to the server in\n            Step 2, agrees with the random\
    \ number contained in the\n            signed data of Token BA and\n         -\
    \  verifying that the identifier for the client, if present,\n            matches\
    \ the client's distinguishing identifier.\n"
- title: 3.  Token and Message Definition
  contents:
  - "3.  Token and Message Definition\n   Note -   Protocol data units (PDUs) SHALL\
    \ be DER-encoded [X690]\n            before transmitted.\n"
- title: 3.1. The "TokenBA1" PDU
  contents:
  - "3.1. The \"TokenBA1\" PDU\n   TokenBA1 is used in both the unilateral client\
    \ authentication and\n   mutual authentication modes and is sent by the server\
    \ to the client.\n   TokenBA1 contains a random value, and, optionally, the servers\
    \ name\n   and certificate information.\n   TokenBA1 ::= SEQUENCE {\n        randomB\
    \   RandomNumber,\n        entityB   [0] GeneralNames OPTIONAL,\n        certPref\
    \  [1] SEQUENCE SIZE (1..MAX) OF TrustedAuth OPTIONAL\n   }\n"
- title: 3.2. The "TokenAB" PDU
  contents:
  - "3.2. The \"TokenAB\" PDU\n   TokenAB is used in the unilateral client authentication\
    \ and mutual\n   authentication modes and is sent by the client to the server.\n\
    \   TokenAB contains a random number, entity B's name (optionally),\n   entity\
    \ certification information, an (optional) authorization\n   identity, and a signature\
    \ of a DER-encoded value of type TBSDataAB.\n   The certA field is used to send\
    \ the client's X.509 certificate (or a\n   URL to it) and a related certificate\
    \ chain to the server.\n   The authID field is to be used when the identity to\
    \ be used for\n   access control is different than the identity contained in the\n\
    \   certificate of the signer.  If this field is not present, then the\n   identity\
    \ from the client's X.509 certificate shall be used.\n   TokenAB ::= SEQUENCE\
    \ {\n        randomA   RandomNumber,\n        entityB   [0] GeneralNames OPTIONAL,\n\
    \        certA     [1] CertData,\n        authID    [2] GeneralNames OPTIONAL,\n\
    \        signature SIGNATURE { TBSDataAB }\n   }(CONSTRAINED BY {-- The entityB\
    \ and authID fields shall be included\n     -- in TokenAB if and only if they\
    \ are also included in TBSDataAB.\n     -- The entityB field SHOULD be present\
    \ in TokenAB whenever the\n     -- client believes it knows the identity of the\
    \ server.--})\n   TBSDataAB ::= SEQUENCE {\n        randomA RandomNumber,\n  \
    \      randomB RandomNumber,\n        entityB [0] GeneralNames OPTIONAL,\n   \
    \     authID  [1] GeneralNames OPTIONAL\n   }\n"
- title: 3.3. The "TokenBA2" PDU
  contents:
  - "3.3. The \"TokenBA2\" PDU\n   TokenBA2 is used in the mutual authentication mode\
    \ and is sent by the\n   server to the client.  TokenBA2 contains a random number,\
    \ entity A's\n   name (optionally), certification information, and a signature\
    \ of a\n   DER-encoded value of type TBSDataBA.  The certB field is to be used\n\
    \   to send the server's X.509 certificate and a related certificate\n   chain\
    \ to the client.\n   TokenBA2 ::= SEQUENCE {\n        randomC   RandomNumber,\n\
    \        entityA   [0] GeneralNames OPTIONAL,\n        certB     [1] CertData,\n\
    \        signature SIGNATURE { TBSDataBA }\n   }(CONSTRAINED BY {-- The entityA\
    \ field shall be included in TokenBA2\n     -- if and only if it is also included\
    \ in TBSDataBA.  The entityA\n     -- field SHOULD be present and MUST contain\
    \ the client's name\n     -- from their X.509 certificate.--})\n   TBSDataBA ::=\
    \ SEQUENCE {\n        randomB RandomNumber,\n        randomA RandomNumber,\n \
    \       randomC RandomNumber,\n        entityA GeneralNames OPTIONAL\n   }\n"
- title: 3.4. The "TrustedAuth" type
  contents:
  - "3.4. The \"TrustedAuth\" type\n   TrustedAuth ::= CHOICE {\n        authorityName\
    \         [0] Name,\n             -- SubjectName from CA certificate\n       \
    \ issuerNameHash        [1] OCTET STRING,\n             -- SHA-1 hash of Authority's\
    \ DN\n        issuerKeyHash         [2] OCTET STRING,\n             -- SHA-1 hash\
    \ of Authority's public key\n        authorityCertificate  [3] Certificate,\n\
    \             -- CA certificate\n        pkcs15KeyHash         [4] OCTET STRING\n\
    \             -- PKCS #15 key hash\n   }\n   The TrustedAuth type can be used\
    \ by a server in its initial message\n   (\"TokenBA1\") to indicate to a client\
    \ preferred certificates/public\n   key pairs to use in the authentication.\n\
    \   A trusted authority is identified by its name, hash of its name, hash\n  \
    \ of its public key, its certificate, or PKCS #15 key hash.  If\n   identified\
    \ by its name, then the authorityName field in TrustedAuth\n   contains the SubjectName\
    \ of its CA certificate.  If it is identified\n   by the hash of its name then\
    \ the issuerNameHash field contains the\n   SHA-1 hash of the DER encoding of\
    \ SubjectName from its CA\n   certificate.  If it is identified by the hash of\
    \ its public key then\n   the issuerKeyHash field contains the SHA-1 hash of the\
    \ authority's\n   public key.  The hash shall be calculated over the value (excluding\n\
    \   tag and length) of the subject public key field in the issuer's\n   certificate.\
    \  If it is identified by its certificate then the\n   authorityCertificate field\
    \ contains its CA certificate.  If it is\n   identified by the PKCS #15 key hash\
    \ then the pkcs15KeyHash field\n   contains the hash of the CA's public key as\
    \ defined in PKCS #15\n   [PKCS15] Section 6.1.4.\n"
- title: 3.5. The "CertData" type
  contents:
  - "3.5. The \"CertData\" type\n   The certification data is a choice between a set\
    \ of certificates and\n   a certificate URL.\n   The certificate set alternative\
    \ is as in [RFC2630], meaning it is\n   intended that the set be sufficient to\
    \ contain chains from a\n   recognized \"root\" or \"top-level certification authority\"\
    \ to all of\n   the sender certificates with which the set is associated.  However,\n\
    \   there may be more certificates than necessary, or there may be fewer\n   than\
    \ necessary.\n   Note -   The precise meaning of a \"chain\" is outside the scope\
    \ of\n            this document.  Some applications may impose upper limits on\n\
    \            the length of a chain; others may enforce certain\n            relationships\
    \ between the subjects and issuers of\n            certificates within a chain.\n\
    \   When the certURL type is used to specify the location at which the\n   user's\
    \ certificate can be found, it MUST be a non-relative URL, and\n   MUST follow\
    \ the URL syntax and encoding rules specified in [RFC1738].\n   The URL must include\
    \ both a scheme (e.g., \"http\" or \"ldap\") and a\n   scheme-specific part. \
    \ The scheme-specific part must include a fully\n   qualified domain name or IP\
    \ address as the host.\n   CertData ::= CHOICE {\n        certificateSet     SET\
    \ SIZE (1..MAX) OF Certificate,\n        certURL            IA5String,\n     \
    \   ... -- For future extensions\n   }\n"
- title: 3.6. The "RandomNumber" type
  contents:
  - "3.6. The \"RandomNumber\" type\n   A random number is simply defined as an octet\
    \ string, at least 8\n   bytes long.\n   RandomNumber ::= OCTET STRING (SIZE(8..MAX))\n"
- title: 3.7. The "SIGNATURE" type
  contents:
  - "3.7. The \"SIGNATURE\" type\n   This is similar to the \"SIGNED\" parameterized\
    \ type defined in\n   [RFC2459], the difference being that the \"SIGNATURE\" type\
    \ does not\n   include the data to be signed.\n   SIGNATURE { ToBeSigned } ::=\
    \ SEQUENCE {\n        algorithm AlgorithmIdentifier,\n        signature BIT STRING\n\
    \   }(CONSTRAINED BY {-- Must be the result of applying the signing\n     -- operation\
    \ indicated in \"algorithm\" to the DER-encoded octets of\n     -- a value of\
    \ type -- ToBeSigned })\n"
- title: 3.8. Other types
  contents:
  - "3.8. Other types\n   The \"GeneralNames\" type is defined in [RFC2459].\n"
- title: 4.  Supported Algorithms
  contents:
  - "4.  Supported Algorithms\n   The following signature algorithms are recognized\
    \ for use with this\n   mechanism, and identified by a key.  Each key would be\
    \ combined to\n   make two possible SASL mechanisms.  For example the DSA-SHA1\n\
    \   algorithm would give 9798-U-DSA-SHA1, and 9798-M-DSA-SHA1.  All\n   algorithm\
    \ names are constrained to 13 characters, to keep within the\n   total SASL limit\
    \ of 20 characters.\n   The following table gives a list of algorithm keys, noting\
    \ the object\n   identifier and the body that assigned the identifier.\n     \
    \ Key              Object Id           Body\n      RSA-SHA1-ENC   1.2.840.113549.1.1.5\
    \  RSA\n      DSA-SHA1       1.2.840.10040.4.3     ANSI\n      ECDSA-SHA1    \
    \ 1.2.840.10045.4.1     ANSI\n   Support of the RSA-SHA1-ENC algorithm is RECOMMENDED\
    \ for use with\n   this mechanism.\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1. IMAP4 example
  contents:
  - "5.1. IMAP4 example\n   The following example shows the use of the ISO/IEC 9798-3\n\
    \   Authentication SASL mechanism with IMAP4 [RFC2060].\n   The base64 encoding\
    \ of challenges and responses, as well as the \"+ \"\n   preceding the responses\
    \ are part of the IMAP4 profile, not part of\n   this specification itself (note\
    \ that the line breaks in the sample\n   authenticators are for editorial clarity\
    \ and are not in real\n   authenticators).\n   S: * OK IMAP4 server ready\n  \
    \ C: A001 AUTHENTICATE 9798-U-RSA-SHA1\n   S: + MAoECBI4l1h5h0eY\n   C: MIIBAgQIIxh5I0h5RYegD4INc2FzbC1yLXVzLmNvbaFPFk1odHRwOi8vY2VydHMt\n\
    \      ci11cy5jb20vY2VydD9paD1odmNOQVFFRkJRQURnWUVBZ2hBR2hZVFJna0ZqJnNu\n    \
    \  PUVQOXVFbFkzS0RlZ2pscjCBkzANBgkqhkiG9w0BAQUFAAOBgQCkuC2GgtYcxGG1\n      NEzLA4bh5lqJGOZySACMmc+mDrV7A7KAgbpO2OuZpMCl7zvNt/L3OjQZatiX8d1X\n\
    \      buQ40l+g2TJzJt06o7ogomxdDwqlA/3zp2WMohlI0MotHmfDSWEDZmEYDEA3/eGg\n    \
    \  kWyi1v1lEVdFuYmrTr8E4wE9hxdQrA==\n   S: A001 OK Welcome, 9798-U-RSA-SHA1 authenticated\
    \ user: Magnus\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   By registering the 9798-<U/M>-<algorithm> protocols\
    \ as SASL\n   mechanisms, implementers will have a well-defined way of adding\
    \ this\n   authentication mechanism to their product.  Here is the registration\n\
    \   template for the SASL mechanisms defined in this memo:\n        SASL mechanism\
    \ names:     9798-U-RSA-SHA1-ENC\n                                  9798-M-RSA-SHA1-ENC\n\
    \                                  9798-U-DSA-SHA1\n                         \
    \         9798-M-DSA-SHA1\n                                  9798-U-ECDSA-SHA1\n\
    \                                  9798-M-ECDSA-SHA1\n                       \
    \           ; For a definition of the algorithms\n                           \
    \       see Section 4 of this memo.\n        Security Considerations:  See Section\
    \ 7 of this memo\n        Published specification:  This memo\n        Person\
    \ & email address to\n        contact for further\n        information:      \
    \        See Section 9 of this memo.\n        Intended usage:           COMMON\n\
    \        Author/Change controller: See Section 9 of this memo.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The mechanisms described in this memo only provides\
    \ protection\n   against passive eavesdropping attacks.  They do not provide session\n\
    \   privacy or protection from active attacks.  In particular, man-in-\n   the-middle\
    \ attacks aimed at session \"hi-jacking\" are possible.\n   The random numbers\
    \ used in this protocol MUST be generated by a\n   cryptographically strong random\
    \ number generator.  If the number is\n   chosen from a small set or is otherwise\
    \ predictable by a third party,\n   then this mechanism can be attacked.\n   The\
    \ inclusion of the random number R_A in the signed part of TokenAB\n   prevents\
    \ the server from obtaining the signature of the client on\n   data chosen by\
    \ the server prior to the start of the authentication\n   mechanism.  This measure\
    \ may be required, for example, when the same\n   key is used by the client for\
    \ purposes other than entity\n   authentication.  However, the inclusion of R_B\
    \ in TokenBA2, whilst\n   necessary for security reasons which dictate that the\
    \ client should\n   check that it is the same as the value sent in the first message,\
    \ may\n   not offer the same protection to the server, since R_B is known to\n\
    \   the client before R_A is chosen.  For this reason a third random\n   number,\
    \ R_C, is included in the TokenBA2 PDU.\n"
- title: 8.  Bibliography
  contents:
  - "8.  Bibliography\n   [FIPS]      FIPS 196, \"Entity authentication using public\
    \ key\n               cryptography,\" Federal Information Processing Standards\n\
    \               Publication 196, U.S. Department of Commerce/N.I.S.T.,\n     \
    \          National Technical Information Service, Springfield,\n            \
    \   Virginia, 1997.\n   [ISO1]      ISO/IEC 9798-1:  1997, Information technology\
    \ - Security\n               techniques - Entity authentication - Part 1: General.\n\
    \   [ISO3]      ISO/IEC 9798-3:  1997, Information technology - Security\n   \
    \            techniques - Entity authentication - Part 3: Mechanisms\n       \
    \        using digital signature techniques.\n   [PKCS15]    RSA Laboratories,\
    \ \"The Public-Key Cryptography Standards\n               - PKCS #15 v1.1:  Cryptographic\
    \ token information syntax\n               standard\", June 6, 2000.\n   [RFC1738]\
    \   Berners-Lee, T., Masinter L. and M. McCahill \"Uniform\n               Resource\
    \ Locators (URL)\", RFC 1738, December 1994.\n   [RFC2026]   Bradner, S., \"The\
    \ Internet Standards Process -- Revision\n               3\", BCP 9, RFC 2026,\
    \ October 1996.\n   [RFC2060]   Crispin, M., \"Internet Message Access Protocol\
    \ - Version\n               4rev1\", RFC 2060, December 1996.\n   [RFC2119]  \
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2195]   Klensin, J., Catoe,\
    \ R. and P. Krumviede \"IMAP/POP\n               AUTHorize Extension for Simple\
    \ Challenge/Response\", RFC\n               2195, September 1997.\n   [RFC2222]\
    \   J. Meyers, \"Simple Authentication and Security Layer\",\n               RFC\
    \ 2222, October 1997.\n   [RFC2459]   Housley, R., Ford, W., Polk, W. and D. Solo\
    \ \"Internet\n               X.509 Public Key Infrastructure: X.509 Certificate\
    \ and\n               CRL Profile\", RFC 2459, January 1999.\n   [RFC2630]   R.\
    \ Housley, \"Cryptographic Message Syntax\", RFC 2630,\n               June 1999.\n\
    \   [X509]      ITU-T Recommendation X.509 (1997) | ISO/IEC 9594-8:1998,\n   \
    \            Information Technology - Open Systems Interconnection -\n       \
    \        The Directory: Authentication Framework.\n   [X690]      ITU-T Recommendation\
    \ X.690 (1997) | ISO/IEC 8825-1:1998,\n               Information Technology -\
    \ ASN.1 Encoding Rules:\n               Specification of Basic Encoding Rules\
    \ (BER), Canonical\n               Encoding Rules (CER) and Distinguished Encoding\
    \ Rules\n               (DER).\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Robert Zuccherato\n   Entrust Technologies\n   1000\
    \ Innovation Drive\n   Ottawa, Ontario\n   Canada K2K 3E7\n   Phone: +1 613 247\
    \ 2598\n   EMail: robert.zuccherato@entrust.com\n   Magnus Nystrom\n   RSA Security\n\
    \   Box 10704\n   121 29 Stockholm\n   Sweden\n   Phone: +46 8 725 0900\n   EMail:\
    \ magnus@rsasecurity.com\n"
- title: APPENDICES
  contents:
  - 'APPENDICES

    '
- title: A. ASN.1 modules
  contents:
  - 'A. ASN.1 modules

    '
- title: A.1. 1988 ASN.1 module
  contents:
  - "A.1. 1988 ASN.1 module\n   SASL-9798-3-1988\n   DEFINITIONS IMPLICIT TAGS ::=\n\
    \   BEGIN\n   -- EXPORTS ALL --\n   IMPORTS\n   Name, AlgorithmIdentifier, Certificate\n\
    \        FROM PKIX1Explicit88 {iso(1) identified-organization(3) dod(6)\n    \
    \    internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n        id-pkix1-explicit-88(1)}\n\
    \   GeneralNames\n        FROM PKIX1Implicit88 {iso(1) identified-organization(3)\
    \ dod(6)\n        internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n  \
    \      id-pkix1-implicit-88(2)};\n   TokenBA1 ::= SEQUENCE {\n        randomB\
    \   RandomNumber,\n        entityB   [0] GeneralNames OPTIONAL,\n        certPref\
    \  [1] SEQUENCE SIZE (1..MAX) OF TrustedAuth OPTIONAL\n   }\n   TokenAB ::= SEQUENCE\
    \ {\n        randomA   RandomNumber,\n        entityB   [0] GeneralNames OPTIONAL,\n\
    \        certA     [1] CertData,\n        authID    [2] GeneralNames OPTIONAL,\n\
    \        signature SEQUENCE {\n             algorithm AlgorithmIdentifier,\n \
    \            signature BIT STRING\n       }\n   } -- The entityB and authID fields\
    \ shall be included in TokenAB\n     -- if and only if they are also included\
    \ in TBSDataAB.  The entityB\n     -- field SHOULD be present in TokenAB whenever\
    \ the client\n     -- believes it knows the identity of the server.\n     -- The\
    \ signature operation shall be done on a\n     -- DER-encoded value of type TBSDataAB.\n\
    \   TBSDataAB ::= SEQUENCE {\n        randomA RandomNumber,\n        randomB RandomNumber,\n\
    \        entityB [0] GeneralNames OPTIONAL,\n        authID  [1] GeneralNames\
    \ OPTIONAL\n   }\n   TokenBA2 ::= SEQUENCE {\n        randomC   RandomNumber,\n\
    \        entityA   [0] GeneralNames OPTIONAL,\n        certB     [1] CertData,\n\
    \        signature SEQUENCE {\n             algorithm AlgorithmIdentifier,\n \
    \            signature BIT STRING\n        }\n   } -- The entityA field shall\
    \ be included in TokenBA2\n     -- if and only if it is also included in TBSDataBA.\
    \  The entityA\n     -- field SHOULD be present and MUST contain the client's\
    \ name\n     -- from their X.509 certificate.  The signature shall be done\n \
    \    -- on a DER-encoded value of type TBSDataBA.\n   TBSDataBA ::= SEQUENCE {\n\
    \        randomB RandomNumber,\n        randomA RandomNumber,\n        randomC\
    \ RandomNumber,\n        entityA GeneralNames OPTIONAL\n   }\n   TrustedAuth ::=\
    \ CHOICE {\n        authorityName         [0] Name,\n             -- SubjectName\
    \ from CA certificate\n        issuerNameHash        [1] OCTET STRING,\n     \
    \        -- SHA-1 hash of Authority's DN\n        issuerKeyHash         [2] OCTET\
    \ STRING,\n             -- SHA-1 hash of Authority's public key\n        authorityCertificate\
    \  [3] Certificate,\n             -- CA certificate\n        pkcs15KeyHash   \
    \      [4] OCTET STRING\n             -- PKCS #15 key hash\n   }\n   CertData\
    \ ::= CHOICE {\n        certificateSet     SET SIZE (1..MAX) OF Certificate,\n\
    \        certURL            IA5String\n   }\n   RandomNumber ::= OCTET STRING\
    \ (SIZE(8..MAX))\n   END\n"
- title: A.2. 1997 ASN.1 module
  contents:
  - "A.2. 1997 ASN.1 module\n   SASL-9798-3-1997\n   DEFINITIONS IMPLICIT TAGS ::=\n\
    \   BEGIN\n   -- EXPORTS ALL --\n   IMPORTS\n   AlgorithmIdentifier, Name, Certificate\n\
    \        FROM PKIX1Explicit93 {iso(1) identified-organization(3) dod(6)\n    \
    \    internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n        id-pkix1-explicit-93(3)}\n\
    \   GeneralNames\n        FROM PKIX1Implicit93 {iso(1) identified-organization(3)\
    \ dod(6)\n        internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n  \
    \      id-pkix1-implicit-93(4)};\n   TokenBA1 ::= SEQUENCE {\n        randomB\
    \   RandomNumber,\n        entityB   [0] GeneralNames OPTIONAL,\n        certPref\
    \  [1] SEQUENCE SIZE (1..MAX) OF TrustedAuth OPTIONAL\n   }\n   TokenAB ::= SEQUENCE\
    \ {\n        randomA   RandomNumber,\n        entityB   [0] GeneralNames OPTIONAL,\n\
    \        certA     [1] CertData,\n        authID    [2] GeneralNames OPTIONAL,\n\
    \        signature SIGNATURE { TBSDataAB }\n   }(CONSTRAINED BY {-- The entityB\
    \ and authID fields shall be included\n     -- in TokenAB if and only if they\
    \ are also included in TBSDataAB.\n     -- The entityB field SHOULD be present\
    \ in TokenAB whenever the\n     -- client believes it knows the identity of the\
    \ server.--})\n   TBSDataAB ::= SEQUENCE {\n        randomA RandomNumber,\n  \
    \      randomB RandomNumber,\n        entityB [0] GeneralNames OPTIONAL,\n   \
    \     authID  [1] GeneralNames OPTIONAL\n   }\n   TokenBA2 ::= SEQUENCE {\n  \
    \      randomC   RandomNumber,\n        entityA   [0] GeneralNames OPTIONAL,\n\
    \        certB     [1] CertData,\n        signature SIGNATURE { TBSDataBA }\n\
    \   }(CONSTRAINED BY {-- The entityA field shall be included in TokenBA2\n   \
    \  -- if and only if it is also included in TBSDataBA.  The entityA\n     -- field\
    \ SHOULD be present and MUST contain the client's name\n     -- from their X.509\
    \ certificate.--})\n   TBSDataBA ::= SEQUENCE {\n        randomB RandomNumber,\n\
    \        randomA RandomNumber,\n        randomC RandomNumber,\n        entityA\
    \ GeneralNames OPTIONAL\n   }\n   TrustedAuth ::= CHOICE {\n        authorityName\
    \         [0] Name,\n             -- SubjectName from CA certificate\n       \
    \ issuerNameHash        [1] OCTET STRING,\n             -- SHA-1 hash of Authority's\
    \ DN\n        issuerKeyHash         [2] OCTET STRING,\n             -- SHA-1 hash\
    \ of Authority's public key\n        authorityCertificate  [3] Certificate,\n\
    \             -- CA certificate\n        pkcs15KeyHash         [4] OCTET STRING\n\
    \             -- PKCS #15 key hash\n   }\n   CertData ::= CHOICE {\n        certificateSet\
    \     SET SIZE (1..MAX) OF Certificate,\n        certURL            IA5String,\n\
    \        ... -- For future extensions\n   }\n   RandomNumber ::= OCTET STRING\
    \ (SIZE(8..MAX))\n   SIGNATURE { ToBeSigned } ::= SEQUENCE {\n        algorithm\
    \ AlgorithmIdentifier,\n        signature BIT STRING\n   }(CONSTRAINED BY {--\
    \ Must be the result of applying the signing\n     -- operation indicated in \"\
    algorithm\" to the DER-encoded octets of\n     -- a value of type -- ToBeSigned\
    \ })\n   END\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
