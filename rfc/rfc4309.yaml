- contents:
  - "           Using Advanced Encryption Standard (AES) CCM Mode\n            with
    IPsec Encapsulating Security Payload (ESP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the use of Advanced Encryption Standard
    (AES)\n   in Counter with CBC-MAC (CCM) Mode, with an explicit initialization\n
    \  vector (IV), as an IPsec Encapsulating Security Payload (ESP)\n   mechanism
    to provide confidentiality, data origin authentication, and\n   connectionless
    integrity.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Conventions Used in This Document ..........................2\n   2.
    AES CCM Mode ....................................................2\n   3. ESP
    Payload .....................................................4\n      3.1. Initialization
    Vector (IV) .................................4\n      3.2. Encrypted Payload ..........................................4\n
    \     3.3. Authentication Data ........................................5\n   4.
    Nonce Format ....................................................5\n   5. AAD
    Construction ................................................6\n   6. Packet Expansion
    ................................................7\n   7. IKE Conventions .................................................7\n
    \     7.1. Keying Material and Salt Values ............................7\n      7.2.
    Phase 1 Identifier .........................................8\n      7.3. Phase
    2 Identifier .........................................8\n      7.4. Key Length
    Attribute .......................................8\n   8. Test Vectors ....................................................8\n
    \  9. Security Considerations .........................................8\n   10.
    Design Rationale ...............................................9\n   11. IANA
    Considerations ...........................................11\n   12. Acknowledgements
    ..............................................11\n   13. References ....................................................11\n
    \     13.1. Normative References .....................................11\n      13.2.
    Informative References ...................................12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Advanced Encryption Standard (AES) [AES] is a block
    cipher, and\n   it can be used in many different modes.  This document describes
    the\n   use of AES in CCM (Counter with CBC-MAC) mode (AES CCM), with an\n   explicit
    initialization vector (IV), as an IPsec Encapsulating\n   Security Payload (ESP)
    [ESP] mechanism to provide confidentiality,\n   data origin authentication, and
    connectionless integrity.\n   This document does not provide an overview of IPsec.
    \ However,\n   information about how the various components of IPsec and the way
    in\n   which they collectively provide security services is available in\n   [ARCH]
    and [ROAD].\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [STDWORDS].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  AES CCM Mode\n   CCM is a generic authenticate-and-encrypt block cipher mode
    [CCM].\n   In this specification, CCM is used with the AES [AES] block cipher.\n
    \  AES CCM has two parameters:\n      M  M indicates the size of the integrity
    check value (ICV).  CCM\n         defines values of 4, 6, 8, 10, 12, 14, and 16
    octets; However,\n         to maintain alignment and provide adequate security,
    only the\n         values that are a multiple of four and are at least eight are\n
    \        permitted.  Implementations MUST support M values of 8 octets\n         and
    16 octets, and implementations MAY support an M value of 12\n         octets.\n
    \     L  L indicates the size of the length field in octets.  CCM\n         defines
    values of L between 2 octets and 8 octets.  This\n         specification only
    supports L = 4.  Implementations MUST\n         support an L value of 4 octets,
    which accommodates a full\n         Jumbogram [JUMBO]; however, the length includes
    all of the\n         encrypted data, which also includes the ESP Padding, Pad\n
    \        Length, and Next Header fields.\n   There are four inputs to CCM originator
    processing:\n      key\n         A single key is used to calculate the ICV using
    CBC-MAC and to\n         perform payload encryption using counter mode.  AES supports\n
    \        key sizes of 128 bits, 192 bits, and 256 bits.  The default key\n         size
    is 128 bits, and implementations MUST support this key\n         size.  Implementations
    MAY also support key sizes of 192 bits\n         and 256 bits.\n      nonce\n
    \        The size of the nonce depends on the value selected for the\n         parameter
    L.  It is 15-L octets.  Implementations MUST support\n         a nonce of 11 octets.
    \ The construction of the nonce is\n         described in Section 4.\n      payload\n
    \        The payload of the ESP packet.  The payload MUST NOT be longer\n         than
    4,294,967,295 octets, which is the maximum size of a\n         Jumbogram [JUMBO];
    however, the ESP Padding, Pad Length, and\n         Next Header fields are also
    part of the payload.\n      AAD\n         CCM provides data integrity and data
    origin authentication for\n         some data outside the payload.  CCM does not
    allow additional\n         authenticated data (AAD) to be longer than\n         18,446,744,073,709,551,615
    octets.  The ICV is computed from\n         the ESP header, Payload, and ESP trailer
    fields, which is\n         significantly smaller than the CCM-imposed limit.  The\n
    \        construction of the AAD described in Section 5.\n   AES CCM requires
    the encryptor to generate a unique per-packet value\n   and to communicate this
    value to the decryptor.  This per-packet\n   value is one of the component parts
    of the nonce, and it is referred\n   to as the initialization vector (IV).  The
    same IV and key\n   combination MUST NOT be used more than once.  The encryptor
    can\n   generate the IV in any manner that ensures uniqueness.  Common\n   approaches
    to IV generation include incrementing a counter for each\n   packet and linear
    feedback shift registers (LFSRs).\n   AES CCM employs counter mode for encryption.
    \ As with any stream\n   cipher, reuse of the same IV value with the same key
    is catastrophic.\n   An IV collision immediately leaks information about the plaintext
    in\n   both packets.  For this reason, it is inappropriate to use this CCM\n   with
    statically configured keys.  Extraordinary measures would be\n   needed to prevent
    reuse of an IV value with the static key across\n   power cycles.  To be safe,
    implementations MUST use fresh keys with\n   AES CCM.  The Internet Key Exchange
    (IKE) [IKE] protocol or IKEv2\n   [IKEv2] can be used to establish fresh keys.\n"
  title: 2.  AES CCM Mode
- contents:
  - "3.  ESP Payload\n   The ESP payload is composed of the IV followed by the ciphertext.\n
    \  The payload field, as defined in [ESP], is structured as shown in\n   Figure
    1.\n       0                   1                   2                   3\n       0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                     Initialization Vector                     |\n      |
    \                           (8 octets)                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                                                               |\n      ~
    \                 Encrypted Payload (variable)                 ~\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |
    \                                                              |\n      ~                 Authentication
    Data (variable)                ~\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                Figure
    1.  ESP Payload Encrypted with AES CCM\n"
  - contents:
    - "3.1.  Initialization Vector (IV)\n   The AES CCM IV field MUST be eight octets.
      \ The IV MUST be chosen by\n   the encryptor in a manner that ensures that the
      same IV value is used\n   only once for a given key.  The encryptor can generate
      the IV in any\n   manner that ensures uniqueness.  Common approaches to IV generation\n
      \  include incrementing a counter for each packet and linear feedback\n   shift
      registers (LFSRs).\n   Including the IV in each packet ensures that the decryptor
      can\n   generate the key stream needed for decryption, even when some\n   datagrams
      are lost or reordered.\n"
    title: 3.1.  Initialization Vector (IV)
  - contents:
    - "3.2.  Encrypted Payload\n    The encrypted payload contains the ciphertext.\n
      \   AES CCM mode does not require plaintext padding.  However, ESP does\n    require
      padding to 32-bit word-align the authentication data.  The\n    Padding, Pad
      Length, and Next Header fields MUST be concatenated\n    with the plaintext
      before performing encryption, as described in\n    [ESP].  When padding is required,
      it MUST be generated and checked\n    in accordance with the conventions specified
      in [ESP].\n"
    title: 3.2.  Encrypted Payload
  - contents:
    - "3.3.  Authentication Data\n   AES CCM provides an encrypted ICV.  The ICV provided
      by CCM is\n   carried in the Authentication Data fields without further encryption.\n
      \  Implementations MUST support ICV sizes of 8 octets and 16 octets.\n   Implementations
      MAY also support ICV 12 octets.\n"
    title: 3.3.  Authentication Data
  title: 3.  ESP Payload
- contents:
  - "4.  Nonce Format\n   Each packet conveys the IV that is necessary to construct
    the\n   sequence of counter blocks used by counter mode to generate the key\n
    \  stream.  The AES counter block is 16 octets.  One octet is used for\n   the
    CCM Flags, and 4 octets are used for the block counter, as\n   specified by the
    CCM L parameter.  The remaining octets are the\n   nonce.  These octets occupy
    the second through the twelfth octets in\n   the counter block.  Figure 2 shows
    the format of the nonce.\n       0                   1                   2                   3\n
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                     |                  Salt                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                     Initialization Vector                     |\n      |
    \                                                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                          Figure 2.  Nonce Format\n   The components of the nonce
    are as follows:\n      Salt The salt field is 24 bits.  As the name implies, it
    contains\n         an unpredictable value.  It MUST be assigned at the beginning\n
    \        of the security association.  The salt value need not be\n         secret,
    but it MUST NOT be predictable prior to the beginning\n         of the security
    association.\n      Initialization Vector The IV field is 64 bits.  As described
    in\n         Section 3.1, the IV MUST be chosen by the encryptor in a manner\n
    \        that ensures that the same IV value is used only once for a\n         given
    key.\n   This construction permits each packet to consist of up to:\n         2^32
    blocks  =  4,294,967,296 blocks\n                      = 68,719,476,736 octets\n
    \  This construction provides more key stream for each packet than is\n   needed
    to handle any IPv6 Jumbogram [JUMBO].\n"
  title: 4.  Nonce Format
- contents:
  - "5.  AAD Construction\n   The data integrity and data origin authentication for
    the Security\n   Parameters Index (SPI) and (Extended) Sequence Number fields
    is\n   provided without encrypting them.  Two formats are defined: one for\n   32-bit
    sequence numbers and one for 64-bit extended sequence numbers.\n   The format
    with 32-bit sequence numbers is shown in Figure 3, and the\n   format with 64-bit
    extended sequence numbers is shown in Figure 4.\n   Sequence Numbers are conveyed
    canonical network byte order.  Extended\n   Sequence Numbers are conveyed canonical
    network byte order, placing\n   the high-order 32 bits first and the low-order
    32 bits second.\n   Canonical network byte order is fully described in RFC 791,
    Appendix\n   B.\n       0                   1                   2                   3\n
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                               SPI                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                     32-bit Sequence Number                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \             Figure 3.  AAD Format with 32-bit Sequence Number\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                               SPI                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                 64-bit Extended Sequence Number               |\n      |
    \                                                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \         Figure 4.  AAD Format with 64-bit Extended Sequence Number\n"
  title: 5.  AAD Construction
- contents:
  - "6.  Packet Expansion\n   The initialization vector (IV) and the integrity check
    value (ICV)\n   are the only sources of packet expansion.  The IV always adds
    8\n   octets to the front of the payload.  The ICV is added at the end of\n   the
    payload, and the CCM parameter M determines the size of the ICV.\n   Implementations
    MUST support M values of 8 octets and 16 octets, and\n   implementations MAY also
    support an M value of 12 octets.\n"
  title: 6.  Packet Expansion
- contents:
  - "7.  IKE Conventions\n   This section describes the conventions used to generate
    keying\n   material and salt values for use with AES CCM using the Internet Key\n
    \  Exchange (IKE) [IKE] protocol.  The identifiers and attributes needed\n   to
    negotiate a security association that uses AES CCM are also\n   defined.\n"
  - contents:
    - "7.1.  Keying Material and Salt Values\n   As previously described, implementations
      MUST use fresh keys with AES\n   CCM.  IKE can be used to establish fresh keys.
      \ This section\n   describes the conventions for obtaining the unpredictable
      salt value\n   for use in the nonce from IKE.  Note that this convention provides
      a\n   salt value that is secret as well as unpredictable.\n   IKE makes use
      of a pseudo-random function (PRF) to derive keying\n   material.  The PRF is
      used iteratively to derive keying material of\n   arbitrary size, called KEYMAT.
      \ Keying material is extracted from the\n   output string without regard to
      boundaries.\n   The size of KEYMAT MUST be three octets longer than is needed
      for the\n   associated AES key.  The keying material is used as follows:\n      AES
      CCM with a 128-bit key\n         The KEYMAT requested for each AES CCM key is
      19 octets.  The\n         first 16 octets are the 128-bit AES key, and the remaining\n
      \        three octets are used as the salt value in the counter block.\n      AES
      CCM with a 192-bit key\n         The KEYMAT requested for each AES CCM key is
      27 octets.  The\n         first 24 octets are the 192-bit AES key, and the remaining\n
      \        three octets are used as the salt value in the counter block.\n      AES
      CCM with a 256-bit key\n         The KEYMAT requested for each AES CCM key is
      35 octets.  The\n         first 32 octets are the 256-bit AES key, and the remaining\n
      \        three octets are used as the salt value in the counter block.\n"
    title: 7.1.  Keying Material and Salt Values
  - contents:
    - "7.2.  Phase 1 Identifier\n   This document does not specify the conventions
      for using AES CCM for\n   IKE Phase 1 negotiations.  For AES CCM to be used
      in this manner, a\n   separate specification is needed, and an Encryption Algorithm\n
      \  Identifier needs to be assigned.\n"
    title: 7.2.  Phase 1 Identifier
  - contents:
    - "7.3.  Phase 2 Identifier\n   For IKE Phase 2 negotiations, IANA has assigned
      three ESP Transform\n   Identifiers for AES CCM with an explicit IV:\n      14
      for AES CCM with an 8-octet ICV;\n      15 for AES CCM with a 12-octet ICV;
      and\n      16 for AES CCM with a 16-octet ICV.\n"
    title: 7.3.  Phase 2 Identifier
  - contents:
    - "7.4.  Key Length Attribute\n   Because the AES supports three key lengths,
      the Key Length attribute\n   MUST be specified in the IKE Phase 2 exchange [DOI].
      \ The Key Length\n   attribute MUST have a value of 128, 192, or 256.\n"
    title: 7.4.  Key Length Attribute
  title: 7.  IKE Conventions
- contents:
  - "8.  Test Vectors\n   Section 8 of [CCM] provides test vectors that will assist\n
    \  implementers with AES CCM mode.\n"
  title: 8.  Test Vectors
- contents:
  - "9.  Security Considerations\n   AES CCM employs counter (CTR) mode for confidentiality.
    \ If a counter\n   value is ever used for more that one packet with the same key,
    then\n   the same key stream will be used to encrypt both packets, and the\n   confidentiality
    guarantees are voided.\n   What happens if the encryptor XORs the same key stream
    with two\n   different packet plaintexts?  Suppose two packets are defined by
    two\n   plaintext byte sequences P1, P2, P3 and Q1, Q2, Q3, then both are\n   encrypted
    with key stream K1, K2, K3.  The two corresponding\n   ciphertexts are:\n      (P1
    XOR K1), (P2 XOR K2), (P3 XOR K3)\n      (Q1 XOR K1), (Q2 XOR K2), (Q3 XOR K3)\n
    \  If both of these two ciphertext streams are exposed to an attacker,\n   then
    a catastrophic failure of confidentiality results, because:\n      (P1 XOR K1)
    XOR (Q1 XOR K1) = P1 XOR Q1\n      (P2 XOR K2) XOR (Q2 XOR K2) = P2 XOR Q2\n      (P3
    XOR K3) XOR (Q3 XOR K3) = P3 XOR Q3\n   Once the attacker obtains the two plaintexts
    XORed together, it is\n   relatively straightforward to separate them.  Thus,
    using any stream\n   cipher, including AES CTR, to encrypt two plaintexts under
    the same\n   key stream leaks the plaintext.\n   Therefore, AES CCM should not
    be used with statically configured\n   keys.  Extraordinary measures would be
    needed to prevent the reuse of\n   a counter block value with the static key across
    power cycles.  To be\n   safe, implementations MUST use fresh keys with AES CCM.
    \ The IKE\n   [IKE] protocol can be used to establish fresh keys.\n   When IKE
    is used to establish fresh keys between two peer entities,\n   separate keys are
    established for the two traffic flows.  If a\n   different mechanism is used to
    establish fresh keys, one that\n   establishes only a single key to encrypt packets,
    then there is a\n   high probability that the peers will select the same IV values
    for\n   some packets.  Thus, to avoid counter block collisions, ESP\n   implementations
    that permit use of the same key for encrypting and\n   decrypting packets with
    the same peer MUST ensure that the two peers\n   assign different salt values
    to the security association (SA).\n   Regardless of the mode used, AES with a
    128-bit key is vulnerable to\n   the birthday attack after 2^64 blocks are encrypted
    with a single\n   key.  Since ESP with Extended Sequence Numbers allows for up
    to 2^64\n   packets in a single SA, there is real potential for more than 2^64\n
    \  blocks to be encrypted with one key.  Implementations SHOULD generate\n   a
    fresh key before 2^64 blocks are encrypted with the same key, or\n   implementations
    SHOULD make use of the longer AES key sizes.  Note\n   that ESP with 32-bit Sequence
    Numbers will not exceed 2^64 blocks\n   even if all of the packets are maximum-length
    Jumbograms.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Design Rationale\n   In the development of this specification, the use of
    the ESP sequence\n   number field instead of an explicit IV field was considered.
    \ This\n   section documents the rationale for the selection of an explicit IV.\n
    \  This selection is not a cryptographic security issue, as either\n   approach
    will prevent counter block collisions.\n   The use of the explicit IV does not
    dictate the manner that the\n   encryptor uses to assign the per-packet value
    in the counter block.\n   This is desirable for several reasons.\n      1.  Only
    the encryptor can ensure that the value is not used for\n      more than one packet,
    so there is no advantage to selecting a\n      mechanism that allows the decryptor
    to determine whether counter\n      block values collide.  Damage from the collision
    is done, whether\n      the decryptor detects it or not.\n      2.  The use of
    explicit IVs allows adders, LFSRs, and any other\n      technique that meets the
    time budget of the encryptor, so long as\n      the technique results in a unique
    value for each packet.  Adders\n      are simple and straightforward to implement,
    but due to carries,\n      they do not execute in constant time.  LFSRs offer
    an alternative\n      that executes in constant time.\n      3.  Complexity is
    in control of the implementer.  Furthermore, the\n      decision made by the implementer
    of the encryptor does not make\n      the decryptor more (or less) complex.\n
    \     4.  The assignment of the per-packet counter block value needs to\n      be
    inside the assurance boundary.  Some implementations assign the\n      sequence
    number inside the assurance boundary, but others do not.\n      A sequence number
    collision does not have the dire consequences,\n      but, as described in Section
    6, a collision in counter block\n      values has disastrous consequences.\n      5.
    \ Using the sequence number as the IV is possible in those\n      architectures
    where the sequence number assignment is performed\n      within the assurance
    boundary.  In this situation, the sequence\n      number and the IV field will
    contain the same value.\n      6.  By decoupling the IV and the sequence number,
    architectures\n      where the sequence number assignment is performed outside
    the\n      assurance boundary are accommodated.\n   The use of an explicit IV
    field directly follows from the decoupling\n   of the sequence number and the
    per-packet counter block value.  The\n   additional overhead (64 bits for the
    IV field) is acceptable.  This\n   overhead is significantly less overhead associated
    with Cipher Block\n   Chaining (CBC) mode.  As normally employed, CBC requires
    a full block\n   for the IV and, on average, half of a block for padding.  AES
    CCM\n   confidentiality processing with an explicit IV has about one-third of\n
    \  the overhead as AES CBC, and the overhead is constant for each\n   packet.\n"
  title: 10.  Design Rationale
- contents:
  - "11.  IANA Considerations\n   IANA has assigned three ESP transform numbers for
    use with AES CCM\n   with an explicit IV:\n      14 for AES CCM with an 8-octet
    ICV;\n      15 for AES CCM with a 12-octet ICV; and\n      16 for AES CCM with
    a 16-octet ICV.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Acknowledgements\n   Doug Whiting and Niels Ferguson worked with me to develop
    CCM mode.\n   We developed CCM mode as part of the IEEE 802.11i security effort.\n
    \  One of the most attractive aspects of CCM mode is that it is\n   unencumbered
    by patents.  I acknowledge the companies that supported\n   the development of
    an unencumbered authenticated encryption mode (in\n   alphabetical order):\n      Hifn\n
    \     Intersil\n      MacFergus\n      RSA Security\n   Also, I thank Tero Kivinen
    for his comprehensive review of this\n   document.\n"
  title: 12.  Acknowledgements
- contents:
  - "13.  References\n   This section provides normative and informative references.\n"
  - contents:
    - "13.1.  Normative References\n   [AES]       NIST, FIPS PUB 197, \"Advanced
      Encryption Standard (AES),\"\n               November 2001.\n   [DOI]       Piper,
      D., \"The Internet IP Security Domain of\n               Interpretation for
      ISAKMP\", RFC 2407, November 1998.\n   [ESP]       Kent, S., \"IP Encapsulating
      Security Payload (ESP)\", RFC\n               4303, December 2005.\n   [CCM]
      \      Whiting, D., Housley, R., and N. Ferguson, \"Counter with\n               CBC-MAC
      (CCM)\", RFC 3610, September 2003.\n   [STDWORDS]  Bradner, S., \"Key words
      for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [ARCH]      Kent, S. and K. Seo, \"Security
      Architecture for the\n               Internet Protocol\", RFC 4301, December
      2005.\n   [IKE]       Harkins, D. and D. Carrel, \"The Internet Key Exchange\n
      \              (IKE)\", RFC 2409, November 1998.\n   [IKEv2]     Kaufman, C.,
      \"Internet Key Exchange (IKEv2) Protocol\",\n               RFC 4306, December
      2005.\n   [ROAD]      Thayer, R., Doraswamy, N., and R. Glenn, \"IP Security\n
      \              Document Roadmap\", RFC 2411, November 1998.\n   [JUMBO]     Borman,
      D., Deering, S., and R. Hinden, \"IPv6\n               Jumbograms\", RFC 2675,
      August 1999.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Author's Address\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring Knoll
    Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
