- title: __initial_text__
  contents:
  - "                 Network News Transfer Protocol (NNTP)\n                    \
    \  Extension for Authentication\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines an extension to the Network News Transfer\n\
    \   Protocol (NNTP) that allows a client to indicate an authentication\n   mechanism\
    \ to the server, to perform an authentication protocol\n   exchange, and optionally\
    \ to negotiate a security layer for subsequent\n   protocol interactions during\
    \ the remainder of an NNTP session.\n   This document updates and formalizes the\
    \ AUTHINFO USER/PASS\n   authentication method specified in RFC 2980 and deprecates\
    \ the\n   AUTHINFO SIMPLE and AUTHINFO GENERIC authentication methods.\n   Additionally,\
    \ this document defines a profile of the Simple\n   Authentication and Security\
    \ Layer (SASL) for NNTP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction .............................................\
    \  3\n      1.1. Conventions Used in This Document ...................  3\n  \
    \ 2. The AUTHINFO Extension ...................................  4\n      2.1.\
    \ Advertising the AUTHINFO Extension ..................  4\n      2.2. Authenticating\
    \ with the AUTHINFO Extension ..........  5\n      2.3. AUTHINFO USER/PASS Command\
    \ ..........................  6\n           2.3.1. Usage ........................................\
    \  7\n           2.3.2. Description ..................................  7\n  \
    \         2.3.3. Examples .....................................  9\n      2.4.\
    \ AUTHINFO SASL Command ...............................  9\n           2.4.1.\
    \ Usage ........................................ 10\n           2.4.2. Description\
    \ .................................. 11\n           2.4.3. Examples .....................................\
    \ 14\n   3. Augmented BNF Syntax for the AUTHINFO Extension .......... 16\n  \
    \    3.1. Commands ............................................ 16\n      3.2.\
    \ Command Continuation ................................ 17\n      3.3. Responses\
    \ ........................................... 17\n      3.4. Capability Entries\
    \ .................................. 17\n      3.5. General Non-terminals ...............................\
    \ 18\n   4. Summary of Response Codes ................................ 18\n  \
    \ 5. Authentication Tracking/Logging .......................... 18\n   6. Security\
    \ Considerations .................................. 19\n   7. IANA Considerations\
    \ ...................................... 20\n      7.1. IANA Considerations for\
    \ SASL/GSSAPI Services ........ 20\n      7.2. IANA Considerations for NNTP Extensions\
    \ ............. 20\n   8. Acknowledgements .........................................\
    \ 21\n   9. References ............................................... 22\n  \
    \    9.1. Normative References ................................ 22\n      9.2.\
    \ Informative References .............................. 22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Although NNTP [NNTP] has traditionally been used to provide\
    \ public\n   access to newsgroups, authentication is often useful for several\n\
    \   purposes; for example, to control resource consumption, to allow\n   abusers\
    \ of the POST command to be identified, and to restrict access\n   to \"local\"\
    \ newsgroups.\n   The ad-hoc AUTHINFO USER and AUTHINFO PASS commands, documented\
    \ in\n   [NNTP-COMMON], provide a very weak authentication mechanism in\n   widespread\
    \ use by the installed base.  Due to their ubiquity, they\n   are formalized in\
    \ this specification but (because of their\n   insecurity) only for use in combination\
    \ with appropriate security\n   layers.\n   The ad hoc AUTHINFO GENERIC command,\
    \ also documented in [NNTP-COMMON]\n   but much less ubiquitous, provided an NNTP-specific\
    \ equivalent of the\n   generic SASL [SASL] facility.  This document deprecates\
    \ AUTHINFO\n   GENERIC in favor of an AUTHINFO SASL replacement so that NNTP can\n\
    \   benefit from authentication mechanisms developed for other SASL-\n   enabled\
    \ application protocols, including Simple Mail Transfer\n   Protocol (SMTP) [SMTP-AUTH],\
    \ Post Office Protocol (POP) [POP-AUTH],\n   Internet Message Access Protocol\
    \ (IMAP) [IMAP], Lightweight Directory\n   Access Protocol (LDAP) [LDAP-AUTH],\
    \ and Blocks Extensive Exchange\n   Protocol (BEEP) [BEEP].\n   This specification\
    \ is to be read in conjunction with the NNTP base\n   specification [NNTP].  Except\
    \ where specifically stated otherwise, in\n   the case of a conflict between these\
    \ two documents, [NNTP] takes\n   precedence over this one.\n   It is also recommended\
    \ that this specification be read in conjunction\n   with the SASL base specification\
    \ [SASL].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The notational conventions used in\
    \ this document are the same as\n   those in [NNTP], and any term not defined\
    \ in this document has the\n   same meaning as it does in that one.\n   The key\
    \ words \"REQUIRED\", \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\",\n  \
    \ \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as\n   described\
    \ in \"Key words for use in RFCs to Indicate Requirement\n   Levels\" [KEYWORDS].\n\
    \   Terms related to authentication are defined in \"On Internet\n   Authentication\"\
    \ [AUTH].\n   In the examples, commands from the client are indicated with [C],\
    \ and\n   responses from the server are indicated with [S].\n"
- title: 2.  The AUTHINFO Extension
  contents:
  - "2.  The AUTHINFO Extension\n   The AUTHINFO extension is used to authenticate\
    \ a user.  Note that\n   authorization is a matter of site policy, not network\
    \ protocol, and\n   therefore it is not discussed in this document.  The server\n\
    \   determines authorization in whatever manner is defined by its\n   implementation\
    \ as configured by the site administrator.\n   This extension provides three new\
    \ commands: AUTHINFO USER, AUTHINFO\n   PASS, and AUTHINFO SASL.  The capability\
    \ label for this extension is\n   AUTHINFO.\n"
- title: 2.1.  Advertising the AUTHINFO Extension
  contents:
  - "2.1.  Advertising the AUTHINFO Extension\n   A server MUST implement at least\
    \ one of the AUTHINFO USER or AUTHINFO\n   SASL commands in order to advertise\
    \ the \"AUTHINFO\" capability label\n   in response to the CAPABILITIES command\
    \ ([NNTP] Section 5.2).\n   However, this capability MUST NOT be advertised after\
    \ successful\n   authentication (see Section 2.2).  This capability MAY be advertised\n\
    \   both before and after any use of the MODE READER command ([NNTP]\n   Section\
    \ 5.3), with the same semantics.\n   The AUTHINFO capability label contains an\
    \ argument list detailing\n   which authentication commands are available.\n \
    \  The \"USER\" argument indicates that AUTHINFO USER/PASS is supported as\n \
    \  defined by Section 2.3 of this document.  The \"USER\" argument MUST\n   NOT\
    \ be advertised, and the AUTHINFO USER/PASS commands SHOULD NOT be\n   provided,\
    \ unless a strong encryption layer (e.g., Transport Layer\n   Security (TLS) [NNTP-TLS])\
    \ is in use or backward compatibility\n   dictates otherwise.\n   The \"SASL\"\
    \ argument indicates that AUTHINFO SASL is supported as\n   defined by Section\
    \ 2.4 of this document.  If the server advertises\n   the \"SASL\" argument, then\
    \ it MUST also advertise the \"SASL\"\n   capability in response to the CAPABILITIES\
    \ command.  The SASL\n   capability is followed by a whitespace-separated list\
    \ of available\n   SASL mechanism names.\n   The server MAY list the AUTHINFO\
    \ capability with no arguments, which\n   indicates that it complies with this\
    \ specification and does not\n   permit any authentication commands in its current\
    \ state.  In this\n   case, the client MUST NOT attempt to utilize any AUTHINFO\
    \ commands,\n   even if it contains logic that might otherwise cause it to do\
    \ so\n   (e.g., for backward compatibility with servers that are not compliant\n\
    \   with this specification).\n   Future extensions may add additional arguments\
    \ to this capability.\n   Unrecognized arguments MUST be ignored by the client.\n\
    \   As the AUTHINFO command is related to security, cached results of\n   CAPABILITIES\
    \ from a previous session MUST NOT be relied on, as per\n   Section 12.6 of [NNTP].\
    \  However, a client MAY use such cached\n   results in order to detect active\
    \ down-negotiation attacks.\n   Example of AUTHINFO capabilities before and after\
    \ the use of the\n   STARTTLS [NNTP-TLS] extension:\n      [C] CAPABILITIES\n\
    \      [S] 101 Capability list:\n      [S] VERSION 2\n      [S] READER\n     \
    \ [S] IHAVE\n      [S] STARTTLS\n      [S] AUTHINFO SASL\n      [S] SASL CRAM-MD5\
    \ DIGEST-MD5 GSSAPI\n      [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n      [C]\
    \ STARTTLS\n      [S] 382 Continue with TLS negotiation\n      [TLS negotiation\
    \ proceeds, further commands protected by TLS]\n      [C] CAPABILITIES\n     \
    \ [S] 101 Capability list:\n      [S] VERSION 2\n      [S] READER\n      [S] IHAVE\n\
    \      [S] AUTHINFO USER SASL\n      [S] SASL CRAM-MD5 DIGEST-MD5 GSSAPI PLAIN\
    \ EXTERNAL\n      [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n"
- title: 2.2.  Authenticating with the AUTHINFO Extension
  contents:
  - "2.2.  Authenticating with the AUTHINFO Extension\n   An NNTP server responds\
    \ to a client command with a 480 response to\n   indicate that the client MUST\
    \ authenticate and/or authorize in order\n   to use that command or access the\
    \ indicated resource.  Use of the\n   AUTHINFO command as described below is one\
    \ such way that a client can\n   authenticate/authorize to the server.  The client\
    \ MAY therefore use\n   an AUTHINFO command after receiving a 480 response.  A\
    \ client\n   intending to use an AUTHINFO command SHOULD issue the CAPABILITIES\n\
    \   command to obtain the available authentication commands and\n   mechanisms\
    \ before attempting authentication.\n   If a server advertises the AUTHINFO capability,\
    \ a client MAY attempt\n   the first step of authentication at any time during\
    \ a session to\n   acquire additional privileges without having received a 480\
    \ response.\n   Servers SHOULD accept such unsolicited authentication requests.\
    \  A\n   server MUST NOT under any circumstances reply to an AUTHINFO command\n\
    \   with a 480 response.\n   A client MUST NOT under any circumstances continue\
    \ with any steps of\n   authentication beyond the first, unless the response code\
    \ from the\n   server indicates that the authentication exchange is welcomed.\
    \  In\n   particular, anything other than a 38x response code indicates that\n\
    \   the client MUST NOT continue the authentication exchange.\n   After a successful\
    \ authentication, the client MUST NOT issue another\n   AUTHINFO command in the\
    \ same session.  A server MUST NOT return the\n   AUTHINFO capability in response\
    \ to a CAPABILITIES command, and a\n   server MUST reject any subsequent AUTHINFO\
    \ commands with a 502\n   response.  Additionally, the client MUST NOT issue a\
    \ MODE READER\n   command after authentication, and a server MUST NOT advertise\
    \ the\n   MODE-READER capability.\n   In agreement with [SASL], the server MUST\
    \ continue to advertise the\n   SASL capability in response to a CAPABILITIES\
    \ command with the same\n   list of SASL mechanisms that it did before authentication\
    \ (thereby\n   enabling the client to detect a possible active down-negotiation\n\
    \   attack).  Other capabilities returned in response to a CAPABILITIES\n   command\
    \ received after authentication MAY be different from those\n   returned before\
    \ authentication.  For example, an NNTP server may not\n   want to advertise support\
    \ for a specific extension unless a client\n   has been authenticated.\n   Note\
    \ that a server may perform a successful authentication exchange\n   with a client\
    \ and yet still deny access to some or all resources; the\n   permanent 502 response\
    \ indicates that a resource is unavailable even\n   though authentication has\
    \ been performed (this is in contrast to the\n   temporary 480 error, which indicates\
    \ that a resource is unavailable\n   now but may become available after authentication).\n"
- title: 2.3.  AUTHINFO USER/PASS Command
  contents:
  - "2.3.  AUTHINFO USER/PASS Command\n   This section supersedes the definition of\
    \ the AUTHINFO USER and\n   AUTHINFO PASS commands as documented in Section 3.1.1\
    \ of\n   [NNTP-COMMON].\n"
- title: 2.3.1.  Usage
  contents:
  - "2.3.1.  Usage\n   These commands MUST NOT be pipelined.\n   Syntax\n     AUTHINFO\
    \ USER username\n     AUTHINFO PASS password\n   Responses\n     281 Authentication\
    \ accepted\n     381 Password required [1]\n     481 Authentication failed/rejected\n\
    \     482 Authentication commands issued out of sequence\n     502 Command unavailable\
    \ [2]\n     [1] Only valid for AUTHINFO USER.  Note that unlike traditional 3xx\n\
    \         codes, which indicate that the client may continue the current\n   \
    \      command, the legacy 381 code means that the AUTHINFO PASS\n         command\
    \ must be used to complete the authentication exchange.\n     [2] If authentication\
    \ has already occurred, AUTHINFO USER/PASS are\n         not valid commands (see\
    \ Section 2.2).\n         NOTE: Notwithstanding Section 3.2.1 of [NNTP], the server\
    \ MUST\n         NOT return 480 in response to AUTHINFO USER/PASS.\n   Parameters\n\
    \     username = string identifying the user/client\n     password = string representing\
    \ the user's password\n"
- title: 2.3.2.  Description
  contents:
  - "2.3.2.  Description\n   The AUTHINFO USER and AUTHINFO PASS commands are used\
    \ to present\n   clear text credentials to the server.  These credentials consist\
    \ of a\n   username or a username plus a password (the distinction is that a\n\
    \   password is expected to be kept secret, whereas a username is not;\n   this\
    \ does not directly affect the protocol but may have an impact on\n   user interfaces).\
    \  The username is supplied through the AUTHINFO USER\n   command, and the password\
    \ through the AUTHINFO PASS command.\n   If the server requires only a username,\
    \ it MUST NOT give a 381\n   response to AUTHINFO USER and MUST give a 482 response\
    \ to AUTHINFO\n   PASS.\n   If the server requires both username and password,\
    \ the former MUST be\n   sent before the latter.  The server will need to cache\
    \ the username\n   until the password is received; it MAY require that the password\
    \ be\n   sent in the immediately next command (in other words, only caching\n\
    \   the username until the next command is sent).  The server:\n   -  MUST return\
    \ a 381 response to AUTHINFO USER;\n   -  MUST return a 482 response to AUTHINFO\
    \ PASS if there is no cached\n      username;\n   -  MUST use the argument of\
    \ the most recent AUTHINFO USER for\n      authentication; and\n   -  MUST NOT\
    \ return a 381 response to AUTHINFO PASS.\n   The server MAY determine whether\
    \ a password is needed for a given\n   username.  Thus the same server can respond\
    \ with both 381 and other\n   response codes to AUTHINFO USER.\n   Should the\
    \ client successfully present proper credentials, the server\n   issues a 281\
    \ reply.  If the server is unable to authenticate the\n   client, it MUST reject\
    \ the AUTHINFO USER/PASS command with a 481\n   reply.  If an AUTHINFO USER/PASS\
    \ command fails, the client MAY\n   proceed without authentication.  Alternatively,\
    \ the client MAY try\n   another authentication mechanism or present different\
    \ credentials by\n   issuing another AUTHINFO command.\n   The AUTHINFO PASS command\
    \ permits the client to use a clear-text\n   password to authenticate.  A compliant\
    \ implementation MUST NOT\n   implement this command without also implementing\
    \ support for TLS\n   [NNTP-TLS].  Use of this command without an active strong\
    \ encryption\n   layer is deprecated, as it exposes the user's password to all\
    \ parties\n   on the network between the client and the server.  Any implementation\n\
    \   of this command SHOULD be configurable to disable it whenever a\n   strong\
    \ encryption layer (such as that provided by [NNTP-TLS]) is not\n   active, and\
    \ this configuration SHOULD be the default.  The server\n   will use the 483 response\
    \ code to indicate that the datastream is\n   insufficiently secure for the command\
    \ being attempted (see Section\n   3.2.1 of [NNTP]).\n   Note that a server MAY\
    \ (but is not required to) allow white space\n   characters in usernames and passwords.\
    \  A server implementation MAY\n   blindly split command arguments at white space\
    \ and therefore may not\n   preserve the exact sequence of white space characters\
    \ in the username\n   or password.  Therefore, a client SHOULD scan the username\
    \ and\n   password for white space and, if any is detected, warn the user of\n\
    \   the likelihood of problems.  The SASL PLAIN [PLAIN] mechanism is\n   recommended\
    \ as an alternative, as it does not suffer from these\n   issues.\n   Also note\
    \ that historically the username is not canonicalized in any\n   way.  Servers\
    \ MAY use the [SASLprep] profile of the [StringPrep]\n   algorithm to prepare\
    \ usernames for comparison, but doing so may cause\n   interoperability problems\
    \ with legacy implementations.  If\n   canonicalization is desired, the SASL PLAIN\
    \ [PLAIN] mechanism is\n   recommended as an alternative.\n"
- title: 2.3.3.  Examples
  contents:
  - "2.3.3.  Examples\n   Example of successful AUTHINFO USER:\n      [C] AUTHINFO\
    \ USER wilma\n      [S] 281 Authentication accepted\n   Example of successful\
    \ AUTHINFO USER/PASS:\n      [C] AUTHINFO USER fred\n      [S] 381 Enter passphrase\n\
    \      [C] AUTHINFO PASS flintstone\n      [S] 281 Authentication accepted\n \
    \  Example of AUTHINFO USER/PASS requiring a security layer:\n      [C] AUTHINFO\
    \ USER fred@stonecanyon.example.com\n      [S] 483 Encryption or stronger authentication\
    \ required\n   Example of failed AUTHINFO USER/PASS:\n      [C] AUTHINFO USER\
    \ barney\n      [S] 381 Enter passphrase\n      [C] AUTHINFO PASS flintstone\n\
    \      [S] 481 Authentication failed\n   Example of AUTHINFO PASS before AUTHINFO\
    \ USER:\n      [C] AUTHINFO PASS flintstone\n      [S] 482 Authentication commands\
    \ issued out of sequence\n"
- title: 2.4.  AUTHINFO SASL Command
  contents:
  - "2.4.  AUTHINFO SASL Command\n   This section defines a formal profile of the\
    \ Simple Authentication\n   and Security Layer [SASL].  The use of the AUTHINFO\
    \ GENERIC command\n   as documented in Section 3.1.3 of [NNTP-COMMON], as a way\
    \ to perform\n   SASL authentication, is deprecated in favor of the AUTHINFO SASL\n\
    \   command.  A server SHOULD NOT advertise AUTHINFO GENERIC in the list\n   of\
    \ capabilities returned by CAPABILITIES.\n"
- title: 2.4.1.  Usage
  contents:
  - "2.4.1.  Usage\n   This command MUST NOT be pipelined.\n   Syntax\n      AUTHINFO\
    \ SASL mechanism [initial-response]\n   This command MAY exceed 512 octets.  The\
    \ maximum length of this\n   command is increased to that which can accommodate\
    \ the largest\n   encoded initial response possible for any of the SASL mechanisms\n\
    \   supported by the implementation.\n   Responses\n     281             Authentication\
    \ accepted\n     283 challenge   Authentication accepted (with success data) [1]\n\
    \     383 challenge   Continue with SASL exchange [1]\n     481             Authentication\
    \ failed/rejected\n     482             SASL protocol error\n     502        \
    \     Command unavailable [2]\n     [1] These responses MAY exceed 512 octets.\
    \  The maximum length of\n         these responses is increased to that which\
    \ can accommodate the\n         largest encoded challenge possible for any of\
    \ the SASL\n         mechanisms supported by the implementation.\n     [2] If\
    \ authentication has already occurred, AUTHINFO SASL is not a\n         valid\
    \ command (see Section 2.2).\n         NOTE: Notwithstanding Section 3.2.1 of\
    \ [NNTP], the server MUST\n         NOT return 480 in response to AUTHINFO SASL.\n\
    \   Parameters\n     mechanism         = String identifying a [SASL] authentication\n\
    \                         mechanism.\n     initial-response  = Optional initial\
    \ client response.\n                         If present, the response MUST be\
    \ encoded as\n                         specified in Section 4 of [BASE64]. [3]\n\
    \     challenge         = Server challenge.\n                         The challenge\
    \ MUST be encoded as specified\n                         in Section 4 of [BASE64].\n\
    \     [3] This argument MAY exceed 497 octets.  The maximum length of\n      \
    \   this argument is increased to that which can accommodate the\n         largest\
    \ encoded initial response possible for any of the SASL\n         mechanisms supported\
    \ by the implementation.\n"
- title: 2.4.2.  Description
  contents:
  - "2.4.2.  Description\n   The AUTHINFO SASL command initiates a [SASL] exchange\
    \ between the\n   client and the server.  The client identifies the SASL mechanism\
    \ to\n   be used with the first parameter of the AUTHINFO SASL command.  If\n\
    \   the server supports the requested authentication mechanism, it\n   performs\
    \ the SASL exchange to authenticate the user.  Optionally, it\n   also negotiates\
    \ a security layer for subsequent protocol interactions\n   during this session.\
    \  If the requested authentication mechanism is\n   invalid (e.g., is not supported),\
    \ the server rejects the AUTHINFO\n   SASL command with a 503 reply (see Section\
    \ 3.2.1 of [NNTP]).  If the\n   requested authentication mechanism requires an\
    \ encryption layer, the\n   server rejects the AUTHINFO SASL command with a 483\
    \ reply (see\n   Section 3.2.1 of [NNTP]).\n   The service name specified by this\
    \ protocol's profile of SASL is\n   \"nntp\".\n   The SASL exchange consists of\
    \ a series of server challenges and\n   client responses that are specific to\
    \ the chosen [SASL] mechanism.\n   A server challenge is sent as a 383 reply with\
    \ a single argument\n   containing the [BASE64]-encoded string supplied by the\
    \ SASL\n   mechanism.  A server challenge that has zero length MUST be sent as\
    \ a\n   single equals sign (\"=\") and MUST be included (in order to comply\n\
    \   with the [NNTP] requirement that responses always have the same\n   number\
    \ of arguments).\n   A client response consists of a line containing a [BASE64]-encoded\n\
    \   string.  A client response that has zero length MUST be sent as a\n   single\
    \ equals sign (\"=\") and MUST be included (for consistency with\n   the server\
    \ challenge format).  If the client wishes to cancel the\n   authentication exchange,\
    \ it issues a line with a single \"*\".  If the\n   server receives such a response,\
    \ it MUST reject the AUTHINFO SASL\n   command by sending a 481 reply.\n   Note\
    \ that these [BASE64]-encoded strings can be much longer than\n   normal NNTP\
    \ responses.  Clients and servers MUST be able to handle\n   the maximum encoded\
    \ size of challenges and responses generated by\n   their supported authentication\
    \ mechanisms.  This requirement is\n   independent of any line length limitations\
    \ the client or server may\n   have in other parts of its protocol implementation.\n\
    \   The optional initial response argument to the AUTHINFO SASL command\n   is\
    \ used to save a round trip when using authentication mechanisms\n   that support\
    \ an initial client response.  If the initial response\n   argument is omitted\
    \ and the chosen mechanism requires an initial\n   client response, the server\
    \ MUST proceed as defined in section 5.1 of\n   [SASL].  In NNTP, a server challenge\
    \ that contains no data is\n   equivalent to a zero-length challenge and is encoded\
    \ as a single\n   equals sign (\"=\").\n   Note that the [BASE64]-encoded initial\
    \ response argument can exceed\n   497 octets, and therefore that the AUTHINFO\
    \ SASL command can exceed\n   512 octets.  Clients SHOULD and servers MUST be\
    \ able to handle the\n   maximum encoded size of initial responses possible for\
    \ their\n   supported authentication mechanisms.  This requirement is independent\n\
    \   of any command or argument length limitations the client or server\n   may\
    \ have in other parts of its protocol implementation.\n   If use of the initial\
    \ response argument would cause the AUTHINFO SASL\n   command to exceed 512 octets,\
    \ the client MAY choose to omit the\n   initial response parameter (and instead\
    \ proceed as defined in Section\n   5.1 of [SASL]).\n   If the client is transmitting\
    \ an initial response of zero length, it\n   MUST instead transmit the response\
    \ as a single equals sign (\"=\").\n   This indicates that the response is present,\
    \ but that it contains no\n   data.\n   If the client uses an initial-response\
    \ argument to the AUTHINFO SASL\n   command with a SASL mechanism that does not\
    \ support an initial client\n   response, the server MUST reject the AUTHINFO\
    \ SASL command with a 482\n   reply.\n   If the server cannot [BASE64] decode\
    \ any client response, it MUST\n   reject the AUTHINFO SASL command with a 504\
    \ reply (see Section 3.2.1\n   of [NNTP]).  If the client cannot BASE64 decode\
    \ any of the server's\n   challenges, it MUST cancel the authentication using\
    \ the \"*\" response.\n   In particular, servers and clients MUST reject (and\
    \ not ignore) any\n   character not explicitly allowed by the BASE64 alphabet,\
    \ and they\n   MUST reject any sequence of BASE64 characters that contains the\
    \ pad\n   character ('=') anywhere other than the end of the string (e.g.,\n \
    \  \"=AAA\" and \"AAA=BBB\" are not allowed).\n   The authorization identity generated\
    \ by this [SASL] exchange is a\n   simple username, and both client and server\
    \ MUST use the [SASLprep]\n   profile of the [StringPrep] algorithm to prepare\
    \ these names for\n   transmission or comparison.  If preparation of the authorization\n\
    \   identity fails or results in an empty string (unless it was\n   transmitted\
    \ as the empty string), the server MUST fail the\n   authentication with a 481\
    \ reply.\n   Should the client successfully complete the exchange, the server\n\
    \   issues either a 281 or a 283 reply.  If the server is unable to\n   authenticate\
    \ the client, it MUST reject the AUTHINFO SASL command\n   with a 481 reply. \
    \ If an AUTHINFO SASL command fails, the client MAY\n   proceed without authentication.\
    \  Alternatively, the client MAY try\n   another authentication mechanism, or\
    \ present different credentials by\n   issuing another AUTHINFO command.\n   If\
    \ the SASL mechanism returns additional data on success (e.g.,\n   server authentication),\
    \ the NNTP server issues a 283 reply with a\n   single argument containing the\
    \ [BASE64]-encoded string supplied by\n   the SASL mechanism.  If no additional\
    \ data is returned on success,\n   the server issues a 281 reply.\n   If a security\
    \ layer is negotiated during the SASL exchange, it takes\n   effect for the client\
    \ on the octet immediately following the CRLF\n   that concludes the last response\
    \ generated by the client.  For the\n   server, it takes effect immediately following\
    \ the CRLF of its success\n   reply.\n   When a security layer takes effect, the\
    \ NNTP protocol is reset to the\n   state immediately after the initial greeting\
    \ response (see 5.1 of\n   [NNTP]) has been sent, with the exception that if a\
    \ MODE READER\n   command has been issued, the effects of it (if any) are not\
    \ reversed.\n   The server MUST discard any knowledge obtained from the client,\
    \ such\n   as the current newsgroup and article number, that was not obtained\n\
    \   from the SASL negotiation itself.  Likewise, the client SHOULD\n   discard\
    \ and MUST NOT rely on any knowledge obtained from the server,\n   such as the\
    \ capability list, that was not obtained from the SASL\n   negotiation itself.\
    \  (Note that a client MAY compare the advertised\n   SASL mechanisms before and\
    \ after authentication in order to detect an\n   active down-negotiation attack.)\n\
    \   When both TLS [NNTP-TLS] and SASL security layers are in effect, the\n   TLS\
    \ encoding MUST be applied after the SASL encoding (the cleartext\n   data is\
    \ always SASL encoded first, and then the resultant data is TLS\n   encoded).\n\
    \   To ensure interoperability, client and server implementations of this\n  \
    \ extension MUST implement the [DIGEST-MD5] SASL mechanism.\n   If AUTHINFO USER/PASS\
    \ and AUTHINFO SASL are both implemented, the\n   SASL [PLAIN] mechanism SHOULD\
    \ also be implemented, as the\n   functionality of DIGEST-MD5 is insufficient\
    \ for some environments\n   (e.g., the server may need to pass off the plaintext\
    \ password to an\n   external authentication service).  The SASL PLAIN mechanism\
    \ is\n   preferred over AUTHINFO USER, even if there is not a strong\n   encryption\
    \ layer active, because it eliminates limitations that\n   AUTHINFO USER/PASS\
    \ has with regards to the use of white space\n   characters being used in usernames\
    \ and passwords.\n"
- title: 2.4.3.  Examples
  contents:
  - "2.4.3.  Examples\n   Example of the [PLAIN] SASL mechanism under a TLS layer,\
    \ using an\n   initial client response:\n      [C] CAPABILITIES\n      [S] 101\
    \ Capability list:\n      [S] VERSION 2\n      [S] READER\n      [S] STARTTLS\n\
    \      [S] AUTHINFO SASL\n      [S] SASL CRAM-MD5 DIGEST-MD5 GSSAPI\n      [S]\
    \ LIST ACTIVE NEWSGROUPS\n      [S] .\n      [C] STARTTLS\n      [S] 382 Continue\
    \ with TLS negotiation\n      [TLS negotiation proceeds, further commands protected\
    \ by TLS]\n      [C] CAPABILITIES\n      [S] 101 Capability list:\n      [S] VERSION\
    \ 2\n      [S] READER\n      [S] AUTHINFO USER SASL\n      [S] SASL CRAM-MD5 DIGEST-MD5\
    \ GSSAPI PLAIN EXTERNAL\n      [S] LIST ACTIVE NEWSGROUPS\n      [S] .\n     \
    \ [C] AUTHINFO SASL PLAIN AHRlc3QAMTIzNA==\n      [S] 281 Authentication accepted\n\
    \   Example of the EXTERNAL SASL mechanism under a TLS layer, using the\n   authorization\
    \ identity derived from the client TLS certificate, and\n   thus a zero-length\
    \ initial client response (commands prior to\n   AUTHINFO SASL are the same as\
    \ the previous example and have been\n   omitted):\n      [C] AUTHINFO SASL EXTERNAL\
    \ =\n      [S] 281 Authentication accepted\n   Example of the [DIGEST-MD5] SASL\
    \ mechanism, which includes a server\n   challenge and server success data (white\
    \ space has been inserted for\n   clarity; base64-encoded data is actually sent\
    \ as a single line with\n   no embedded white space):\n      [C] AUTHINFO SASL\
    \ DIGEST-MD5\n      [S] 383 bm9uY2U9InNheUFPaENFS0dJZFBNSEMwd3RsZUxxT0ljT0kyd1FZSWU0\n\
    \          enplQXR1aVE9IixyZWFsbT0iZWFnbGUub2NlYW5hLmNvbSIscW9wPSJhdXRo\n    \
    \      LGF1dGgtaW50LGF1dGgtY29uZiIsY2lwaGVyPSJyYzQtNDAscmM0LTU2LHJj\n        \
    \  NCxkZXMsM2RlcyIsbWF4YnVmPTQwOTYsY2hhcnNldD11dGYtOCxhbGdvcml0\n          aG09bWQ1LXNlc3M=\n\
    \      [C] dXNlcm5hbWU9InRlc3QiLHJlYWxtPSJlYWdsZS5vY2VhbmEuY29tIixub25j\n    \
    \      ZT0ic2F5QU9oQ0VLR0lkUE1IQzB3dGxlTHFPSWNPSTJ3UVlJZTR6emVBdHVp\n        \
    \  UT0iLGNub25jZT0iMFkzSlFWMlRnOVNjRGlwK08xU1ZDMHJoVmcvLytkbk9J\n          aUd6LzdDZU5KOD0iLG5jPTAwMDAwMDAxLHFvcD1hdXRoLWNvbmYsY2lwaGVy\n\
    \          PXJjNCxtYXhidWY9MTAyNCxkaWdlc3QtdXJpPSJubnRwL2xvY2FsaG9zdCIs\n    \
    \      cmVzcG9uc2U9ZDQzY2Y2NmNmZmE5MDNmOWViMDM1NmMwOGEzZGIwZjI=\n      [S] 283\
    \ cnNwYXV0aD1kZTJlMTI3ZTVhODFjZGE1M2Q5N2FjZGEzNWNkZTgzYQ==\n   Example of a failed\
    \ authentication due to bad [GSSAPI] credentials.\n   Note that although the mechanism\
    \ can utilize the initial response,\n   the client chooses not to use it because\
    \ of its length, resulting in\n   a zero-length server challenge (here, white\
    \ space has been inserted\n   for clarity; base64-encoded data is actually sent\
    \ as a single line\n   with no embedded white space):\n      [C] AUTHINFO SASL\
    \ GSSAPI\n      [S] 383 =\n      [C] YIICOAYJKoZIhvcSAQICAQBuggInMIICI6ADAgEFoQMCAQ6iBwMFACAAAACj\n\
    \          ggE/YYIBOzCCATegAwIBBaEYGxZURVNULk5FVC5JU0MuVVBFTk4uRURVoiQw\n    \
    \      IqADAgEDoRswGRsEbmV3cxsRbmV0bmV3cy51cGVubi5lZHWjge8wgeygAwIB\n        \
    \  EKEDAgECooHfBIHcSQfLKC8vm2i17EXmomwk6hHvjBY/BnKnvvDTrbno3198\n          vlX2RSUt+CjuAKhcDcj4DW0gvZEqH7t5v9yWedzztlpaThebBat6hQNr9NJP\n\
    \          ozh1/+74HUwhGWb50KtjuftO/ftQ8q0nTuYKgIq6PM4tp2ddo1IfpjfdNR9E\n    \
    \      95GFi3y1uBT7lQOwtQbRJUjPSO3ijdue9V7cNNVmYsBsqNsaHhvlBJEXf4WJ\n        \
    \  djH8yG+Dw/gX8fUTtC5fDpB5zLt01mkSXh6Wc4UhqQtwZBI2t/+TpX1okbg6\n          Hr1ZZupeH6SByjCBx6ADAgEQooG/BIG8GnCmcXWtqhXh48dGTLHQgJ04K5Fj\n\
    \          RMMq2qPSbiha9lq0osqR2KAnQA6LioWYxU+6yPKpBDSC5WOT441fUfkM8iAL\n    \
    \      kW3uNc+luFCGcnDsacrmoVU7Y6Akcp9m7Fm7orRc+TWSWPpBg3OR2oG3ATW0\n        \
    \  0NAz8TT06VOLVxIMUTINKdYVI/Ja7f3sy+/N4LGkJqScCQOwlo5tfDWn/UQF\n          iTWo5Zw435rH8pjy2smQCnqC14v3NMAWTu4j+dzHUNw=\n\
    \      [S] 481 Authentication error\n   Example of a client aborting in the midst\
    \ of an exchange:\n      [C] AUTHINFO SASL GSSAPI\n      [S] 383 =\n      [C]\
    \ *\n      [S] 481 Authentication aborted as requested\n   Example of attempting\
    \ to use a mechanism that is not supported by the\n   server:\n      [C] AUTHINFO\
    \ SASL EXAMPLE\n      [S] 503 Mechanism not recognized\n   Example of attempting\
    \ to use a mechanism that requires a security\n   layer:\n      [C] AUTHINFO SASL\
    \ PLAIN\n      [S] 483 Encryption or stronger authentication required\n   Example\
    \ of using an initial response with a mechanism that doesn't\n   support it (the\
    \ server must start the exchange when using\n   [CRAM-MD5]):\n      [C] AUTHINFO\
    \ SASL CRAM-MD5 AHRlc3QAMTIzNA==\n      [S] 482 SASL protocol error\n   Example\
    \ of an authentication that failed due to an incorrectly\n   encoded response:\n\
    \      [C] AUTHINFO SASL CRAM-MD5\n      [S] 383 PDE1NDE2NzQ5My4zMjY4MzE3QHRlc3RAZXhhbXBsZS5jb20+\n\
    \      [C] abcd=efg\n      [S] 504 Base64 encoding error\n"
- title: 3.  Augmented BNF Syntax for the AUTHINFO Extension
  contents:
  - "3.  Augmented BNF Syntax for the AUTHINFO Extension\n   This section describes\
    \ the formal syntax of the AUTHINFO extension\n   using ABNF [ABNF].  It extends\
    \ the syntax in Section 9 of [NNTP], and\n   non-terminals not defined in this\
    \ document are defined there.  The\n   [NNTP] ABNF should be imported first before\
    \ attempting to validate\n   these rules.\n"
- title: 3.1.  Commands
  contents:
  - "3.1.  Commands\n   This syntax extends the non-terminal \"command\", which represents\
    \ an\n   NNTP command.\n   command =/ authinfo-sasl-command /\n        authinfo-user-command\
    \ /\n        authinfo-pass-command\n   authinfo-sasl-command = \"AUTHINFO\" WS\
    \ \"SASL\" WS mechanism\n        [WS initial-response]\n   authinfo-user-command\
    \ = \"AUTHINFO\" WS \"USER\" WS username\n   authinfo-pass-command = \"AUTHINFO\"\
    \ WS \"PASS\" WS password\n   initial-response = base64-opt\n   username = 1*user-pass-char\n\
    \   password = 1*user-pass-char\n   user-pass-char = B-CHAR\n   NOTE: a server\
    \ implementation MAY parse AUTHINFO USER and AUTHINFO\n   PASS specially so as\
    \ to allow white space to be used within the\n   username or password.  Such implementations\
    \ accept the additional\n   syntax (making these two items inconsistent with \"\
    token\" in Section\n   9.8 of [NNTP]):\n   user-pass-char =/ SP / TAB\n   In doing\
    \ so, the grammar can become ambiguous if the username or\n   password begins\
    \ or ends with white space.  To solve this ambiguity,\n   such implementations\
    \ typically treat everything after the first white\n   space character following\
    \ \"USER\"/\"PASS\", up to, but not including,\n   the CRLF, as the username/password.\n"
- title: 3.2.  Command Continuation
  contents:
  - "3.2.  Command Continuation\n   This syntax extends the non-terminal \"command-continuation\"\
    , which\n   represents the further material sent by the client in the case of\n\
    \   multi-stage commands.\n   command-continuation =/ authinfo-sasl-383-continuation\n\
    \   authinfo-sasl-383-continuation = (\"*\" / base64-opt) CRLF\n"
- title: 3.3.  Responses
  contents:
  - "3.3.  Responses\n   This syntax extends the non-terminal \"initial-response-content\"\
    ,\n   which represents an initial response line sent by the server.\n   initial-response-content\
    \ =/ response-283-content /\n        response-383-content\n   response-283-content\
    \ = \"283\" SP base64\n   response-383-content = \"383\" SP base64-opt\n"
- title: 3.4.  Capability Entries
  contents:
  - "3.4.  Capability Entries\n   This syntax extends the non-terminal \"capability-entry\"\
    , which\n   represents a capability that may be advertised by the server.\n  \
    \ capability-entry =/ authinfo-capability /\n        sasl-capability\n   authinfo-capability\
    \ = \"AUTHINFO\" *(WS authinfo-variant)\n   authinfo-variant = \"USER\" / \"SASL\"\
    \n   sasl-capability = \"SASL\" 1*(WS mechanism)\n"
- title: 3.5.  General Non-terminals
  contents:
  - "3.5.  General Non-terminals\n   base64-opt = \"=\" / base64\n   mechanism = 1*20mech-char\n\
    \   mech-char = UPPER / DIGIT / \"-\" / \"_\"\n"
- title: 4.  Summary of Response Codes
  contents:
  - "4.  Summary of Response Codes\n   This section contains a list of each new response\
    \ code defined in\n   this document and indicates whether it is multi-line, which\
    \ commands\n   can generate it, what arguments it has, and what its meaning is.\n\
    \   Response code 281\n      Generated by: AUTHINFO USER, AUTHINFO PASS, AUTHINFO\
    \ SASL\n      Meaning: authentication accepted\n   Response code 283\n      Generated\
    \ by: AUTHINFO SASL\n      1 argument: challenge\n      Meaning: authentication\
    \ accepted (with success data)\n   Response code 381\n      Generated by: AUTHINFO\
    \ USER\n      Meaning: password required via AUTHINFO PASS command.  Note\n  \
    \    that this code is used for backwards compatibility and does\n      not conform\
    \ to the traditional use of 3xx codes.\n   Response code 383\n      Generated\
    \ by: AUTHINFO SASL\n      1 argument: challenge\n      Meaning: continue with\
    \ SASL exchange\n   Response code 481\n      Generated by: AUTHINFO USER, AUTHINFO\
    \ PASS, AUTHINFO SASL\n      Meaning: authentication failed/rejected\n   Response\
    \ code 482\n      Generated by: AUTHINFO USER, AUTHINFO PASS, AUTHINFO SASL\n\
    \      Meaning: authentication commands issued out of sequence or\n      SASL\
    \ protocol error\n"
- title: 5.  Authentication Tracking/Logging
  contents:
  - "5.  Authentication Tracking/Logging\n   This section contains implementation\
    \ suggestions and notes of best\n   current practice; it does not specify further\
    \ network protocol\n   requirements.\n   Once authenticated, the authorization\
    \ identity presented in the\n   AUTHINFO exchange (username when using USER/PASS)\
    \ SHOULD be included\n   in an audit trail associating the identity with any articles\
    \ supplied\n   during a POST operation, and this configuration SHOULD be the\n\
    \   default.  This may be accomplished, for example, by inserting headers\n  \
    \ in the posted articles or by a server logging mechanism.  The server\n   MAY\
    \ provide a facility for disabling the procedure described above,\n   as some\
    \ users or administrators may consider it a violation of\n   privacy.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n   In general, the security considerations of [SASL] and any implemented\n\
    \   SASL mechanisms are applicable here; only the most important are\n   highlighted\
    \ specifically below.  Also, this extension is not intended\n   to cure the security\
    \ considerations described in section 12 of\n   [NNTP]; those considerations remain\
    \ relevant to any NNTP\n   implementation.\n   Before the [SASL] negotiation has\
    \ begun, any protocol interactions\n   may have been performed in the clear and\
    \ may have been modified by an\n   active attacker.  For this reason, clients\
    \ and servers MUST discard\n   any sensitive knowledge obtained prior to the start\
    \ of the SASL\n   negotiation upon the establishment of a security layer.  Furthermore,\n\
    \   the CAPABILITIES command SHOULD be re-issued upon the establishment\n   of\
    \ a security layer, and other protocol state SHOULD be re-negotiated\n   as well.\n\
    \   Servers MAY implement a policy whereby the connection is dropped\n   after\
    \ a number of failed authentication attempts.  If they do so,\n   they SHOULD\
    \ NOT drop the connection until at least 3 attempts at\n   authentication have\
    \ failed.\n   Implementations MUST support a configuration where authentication\n\
    \   mechanisms that are vulnerable to passive eavesdropping attacks (such\n  \
    \ as AUTHINFO USER/PASS and SASL [PLAIN]) are not advertised or used\n   without\
    \ the presence of an external security layer such as TLS\n   [NNTP-TLS], and this\
    \ configuration SHOULD be the default.\n   When multiple authentication mechanisms\
    \ are permitted by both client\n   and server, an active attacker can cause a\
    \ down-negotiation to the\n   weakest mechanism.  For this reason, both clients\
    \ and servers SHOULD\n   be configurable to forbid use of weak mechanisms.  The\
    \ minimum\n   strength acceptable is a policy decision that is outside the scope\
    \ of\n   this specification.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  IANA Considerations for SASL/GSSAPI Services
  contents:
  - "7.1.  IANA Considerations for SASL/GSSAPI Services\n   The IANA has registered\
    \ the SASL/GSSAPI service name \"nntp\".  This\n   service name refers to authenticated\
    \ use of Usenet news service when\n   it is provided via the [NNTP] protocol.\n\
    \   o  Published Specification: This document.\n   o  Contact for Further Information:\
    \ Authors of this document.\n   o  Change Controller: IESG <iesg@ietf.org>.\n"
- title: 7.2.  IANA Considerations for NNTP Extensions
  contents:
  - "7.2.  IANA Considerations for NNTP Extensions\n   This section gives a formal\
    \ definition of the AUTHINFO extension, as\n   required by Section 3.3.3 of [NNTP]\
    \ for the IANA registry.\n   o  This extension provides an extensible mechanism\
    \ for NNTP\n      authentication via a variety of methods.\n   o  The capability\
    \ label for this extension is \"AUTHINFO\".\n   o  The \"AUTHINFO\" capability\
    \ label has two possible optional\n      arguments, \"USER\" and \"SASL\" (as\
    \ defined in Section 2.1),\n      indicating which variants of the AUTHINFO command\
    \ are supported.\n   o  This extension also provides the \"SASL\" capability label,\
    \ whose\n      arguments list the available SASL mechanisms.\n   o  This extension\
    \ defines three new commands, AUTHINFO USER, AUTHINFO\n      PASS, and AUTHINFO\
    \ SASL, whose behavior, arguments, and responses\n      are defined in Sections\
    \ 2.3 and 2.4.\n   o  This extension does not associate any new responses with\
    \ pre-\n      existing NNTP commands.\n   o  This extension may affect the overall\
    \ behavior of both server and\n      client in that the AUTHINFO SASL command\
    \ may require that\n      subsequent communication be transmitted via an intermediary\n\
    \      security layer.\n   o  The length of the AUTHINFO SASL command (as defined\
    \ in this\n      document) may exceed 512 octets.  The maximum length of this\n\
    \      command is increased to that which can accommodate the largest\n      initial\
    \ response possible for any of the SASL mechanisms supported\n      by the implementation.\n\
    \   o  This extension defines two new responses, 283 and 383, whose\n      lengths\
    \ may exceed 512 octets.  The maximum length of these\n      responses is increased\
    \ to that which can accommodate the largest\n      challenge possible for any\
    \ of the SASL mechanisms supported by the\n      implementation.\n   o  This extension\
    \ does not alter pipelining, but AUTHINFO commands\n      cannot be pipelined.\n\
    \   o  Use of this extension may alter the capabilities list; once the\n     \
    \ AUTHINFO command has been used successfully, the AUTHINFO\n      capability\
    \ can no longer be advertised by CAPABILITIES.\n      Additionally, the MODE-READER\
    \ capability MUST NOT be advertised\n      after successful authentication.\n\
    \   o  This extension does not cause any pre-existing command to produce\n   \
    \   a 401, 480, or 483 response.\n   o  This extension is unaffected by any use\
    \ of the MODE READER\n      command; however, the MODE READER command MUST NOT\
    \ be used in the\n      same session following successful authentication.\n  \
    \ o  Published Specification: This document.\n   o  Contact for Further Information:\
    \ Authors of this document.\n   o  Change Controller: IESG <iesg@ietf.org>.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This RFC originated from a document initially written\
    \ by Chris\n   Newman.\n   A significant amount of the authentication text was\
    \ originally from\n   the NNTP revision or common authentication specs written\
    \ by Stan\n   Barber.  A significant amount of the SASL text was lifted from the\n\
    \   revisions to RFC 1734 and RFC 2554 by Rob Siemborski.\n   Special acknowledgement\
    \ also goes to Russ Allbery, Clive Feather, and\n   others who commented privately\
    \ on intermediate revisions of this\n   document, as well as the members of the\
    \ IETF NNTP Working Group for\n   continual (yet sporadic) insight in discussion.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ABNF]        Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for\n                 Syntax Specifications: ABNF\", RFC 4234,\
    \ October 2005.\n   [AUTH]        Haller, N. and R. Atkinson, \"On Internet\n\
    \                 Authentication\", RFC 1704, October 1994.\n   [BASE64]     \
    \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n                 Encodings\"\
    , RFC 4648, October 2006.\n   [DIGEST-MD5]  Leach, P. and C. Newman, \"Using Digest\
    \ Authentication\n                 as a SASL Mechanism\", RFC 2831, May 2000.\n\
    \   [KEYWORDS]    Bradner, S., \"Key words for use in RFCs to Indicate\n     \
    \            Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [NNTP]  \
    \      Feather, C., \"Network News Transfer Protocol (NNTP)\",\n             \
    \    RFC 3977, October 2006.\n   [NNTP-TLS]    Murchison, K., Vinocur, J., and\
    \ C. Newman, \"Using\n                 Transport Layer Security (TLS) with Network\
    \ News\n                 Transfer Protocol (NNTP)\", RFC 4642, October 2006.\n\
    \   [SASL]        Melnikov, A. and K. Zeilenga, \"Simple Authentication\n    \
    \             and Security Layer (SASL)\", RFC 4422, June 2006.\n   [SASLprep]\
    \    Zeilenga, K., \"SASLprep: Stringprep Profile for User\n                 Names\
    \ and Passwords\", RFC 4013, February 2005.\n   [StringPrep]  Hoffman, P. and\
    \ M. Blanchet, \"Preparation of\n                 Internationalized Strings (\"\
    stringprep\")\", RFC 3454,\n                 December 2002.\n"
- title: 9.2. Informative References
  contents:
  - "9.2. Informative References\n   [BEEP]        Rose, M., \"The Blocks Extensible\
    \ Exchange Protocol\n                 Core\", RFC 3080, March 2001.\n   [CRAM-MD5]\
    \    Nerenberg, L., \"The CRAM-MD5 SASL Mechanism\", Work in\n               \
    \  Progress.\n   [GSSAPI]      Melnikov, A., \"SASL GSSAPI mechanisms\", Work\
    \ in\n                 Progress.\n   [IMAP]        Crispin, M., \"INTERNET MESSAGE\
    \ ACCESS PROTOCOL -\n                 VERSION 4rev1\", RFC 3501, March 2003.\n\
    \   [LDAP-AUTH]   Harrison, R., \"Lightweight Directory Access Protocol\n    \
    \             (LDAP): Authentication Methods and Security\n                 Mechanisms\"\
    , RFC 4513, June 2006.\n   [NNTP-COMMON] Barber, S., \"Common NNTP Extensions\"\
    , RFC 2980, October\n                 2000.\n   [PLAIN]       Zeilenga, K., Ed.,\
    \ \"The PLAIN Simple Authentication and\n                 Security Layer (SASL)\
    \ Mechanism\", RFC 4616, August\n                 2006.\n   [POP-AUTH]    Myers,\
    \ J., \"POP3 AUTHentication command\", RFC 1734,\n                 December 1994.\n\
    \   [SMTP-AUTH]   Myers, J., \"SMTP Service Extension for Authentication\",\n\
    \                 RFC 2554, March 1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jeffrey M. Vinocur\n   Department of Computer Science\n\
    \   Upson Hall\n   Cornell University\n   Ithaca, NY 14853 USA\n   EMail: vinocur@cs.cornell.edu\n\
    \   Kenneth Murchison\n   Carnegie Mellon University\n   5000 Forbes Avenue\n\
    \   Cyert Hall 285\n   Pittsburgh, PA  15213 USA\n   EMail: murch@andrew.cmu.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
