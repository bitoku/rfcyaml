- title: __initial_text__
  contents:
  - "                General Characterization Parameters for\n                  Integrated\
    \ Service Network Elements\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a set of general control and characterization\n\
    \   parameters for network elements supporting the IETF integrated\n   services\
    \ QoS control framework. General parameters are those with\n   common, shared\
    \ definitions across all QoS control services.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo defines the set of general control and characterization\n\
    \   parameters used by network elements supporting the integrated\n   services\
    \ framework.  \"General\" means that the parameter has a common\n   definition\
    \ and shared meaning across all QoS control services.\n   Control parameters are\
    \ used by applications to provide information to\n   the network related to QoS\
    \ control requests. An example is the\n   traffic specification (TSpec) generated\
    \ by application senders and\n   receivers.\n   Characterization parameters are\
    \ used to discover or characterize the\n   QoS management environment along the\
    \ path of a packet flow requesting\n   active end-to-end QoS control.  These characterizations\
    \ may\n   eventually be used by the application requesting QoS control, or by\n\
    \   other network elements along the path. Examples include information\n   about\
    \ which QoS control services are available along a network path\n   and estimates\
    \ of the available path bandwidth.\n   Individual QoS control service specifications\
    \ may refer to these\n   parameter definitions as well as defining additional\
    \ parameters\n   specific to the needs of that service.\n   Parameters are assigned\
    \ machine-oriented ID's using a method\n   described in [RFC 2216] and summarized\
    \ here.  These ID's may be used\n   within protocol messages (e.g., as described\
    \ in [RFC 2210]) or\n   management interfaces to describe the parameter values\
    \ present. Each\n   parameter ID is composed from two numerical fields, one identifying\n\
    \   the service associated with the parameter (the <service_number>), and\n  \
    \ the other (the <parameter_number>) identifying the parameter itself.\n   Because\
    \ the definitions of the parameters defined in this note are\n   common to all\
    \ QoS control services, the <parameter_number> values for\n   the parameters defined\
    \ here are assigned from the \"general\n   parameters\" range (1 - 127).\n   \
    \   NOTE: <parameter_numbers> in the range 128 - 254 name parameters\n      with\
    \ definitions specific to a particular QoS control service. In\n      contrast\
    \ to the general parameters described here, it is necessary\n      to consider\
    \ both the <service_number> and <parameter_number> to\n      determine the meaning\
    \ of the parameter.\n      Service number 1 is reserved for use as described in\
    \ Section 2 of\n      this note. Service numbers 2 through 254 will be allocated\
    \ to\n      individual QoS control services. Currently, Guaranteed service\n \
    \     [RFC 2212] is allocated number 2, and Controlled-load service [RFC\n   \
    \   2211] is allocated number 5.\n   In this note, the textual form\n        \
    \            <service_number, parameter_number>\n   is used to write a service_number,\
    \ parameter_number pair.  The range\n   of possible of service_number and parameter_number\
    \ values specified\n   in [RFC 2216] allow the parameter ID to directly form the\
    \ tail\n   portion of a MIB object ID representing the parameter. This\n   simplifies\
    \ the task of making parameter values available to network\n   management applications.\n\
    \   The definition of each parameter used to characterize a path through\n   the\
    \ network describes two types of values; local and composed.  A\n   Local value\
    \ gives information about a single network element.\n   Composed values reflect\
    \ the running composition of local values along\n   a path, specified by some\
    \ composition rule.  Each parameter\n   definition specifies the composition rule\
    \ for that parameter. The\n   composition rule tells how to combine an incoming\
    \ composed value\n   (from the already-traversed portion of the path) and the\
    \ local value,\n   to give a new composed value which is passed to the next network\n\
    \   element in the path. Note that the composition may proceed either\n   downstream,\
    \ toward the receiver(s), or upstream, toward the sender.\n   Each parameter may\
    \ give only one definition for the local value, but\n   may potentially give more\
    \ than one definition for composition rules\n   and composed values. This is because\
    \ it may be useful to compose the\n   same local value several times following\
    \ different composition rules.\n   Because characterization parameters are used\
    \ to compute the\n   properties of a specific path through the internetwork, all\n\
    \   characterization parameter definitions are conceptually \"per-next-\n   hop\"\
    , as opposed to \"per interface\" or \"per network element\".  In\n   cases where\
    \ the network element is (or is controlling) a shared media\n   or large-cloud\
    \ subnet, the element may need to provide different\n   values for different next-hops\
    \ within the cloud.  In practice, it may\n   be appropriate for vendors to choose\
    \ and document a tolerance range,\n   such that if all next-hop values are within\
    \ the tolerance range only\n   a single value need be stored and provided.\n \
    \  Local and composed characterization parameter values have distinct\n   ID's\
    \ so that a network management entity can examine the value of\n   either a local\
    \ or path-composed parameter at any point within the\n   network.\n   Each parameter\
    \ definition includes a description of the minimal\n   properties, such as range\
    \ and precision, required of any wire\n   representation of that parameter's values.\
    \ Each definition also\n   includes an XDR [RFC 1832] description of the parameter,\
    \ describing\n   an appropriate external (wire) data representation for the\n\
    \   parameter's values. This dual definition is intended to encourage a\n   common\
    \ wire representation format whenever possible, while still\n   allowing other\
    \ representations when required by the specific\n   circumstances (e.g., ASN.1\
    \ within SNMP).\n   The message formats specified in [RFC 2210] for use with the\
    \ RSVP\n   setup protocol use the XDR data representation parameters.\n   All\
    \ of the parameters described in this note are mandatory, in the\n   sense that\
    \ a network element claiming to support integrated service\n   must recognize\
    \ arriving values in setup and management protocol\n   messages, process them\
    \ correctly, and export a reasonable value in\n   response. For some parameters,\
    \ the specification requires that the\n   network element compute and export an\
    \ *accurate* local value. For\n   other parameters, it is acceptable for the network\
    \ element to\n   indicate that it cannot compute and export an accurate local\
    \ value.\n   The definition of these parameters provides a reserved value which\n\
    \   indicates \"indeterminate\" or \"invalid\". This value signals that an\n \
    \  element cannot process the parameter accurately, and consequently\n   that\
    \ the result of the end-to-end composition is also questionable.\n      NOTE (temporary):\
    \ Previous versions of this and the RSVP use\n      document used both the reserved-value\
    \ approach and a separate\n      INVALID flag to record this fact.  Now, the reserved-value\n\
    \      approach is used exclusively. This is so that any protocol which\n    \
    \  retrieves a parameter value, including SNMP, can carry the invalid\n      indication\
    \ without needing a separate flag. The INVALID flag\n      remains in the RSVP\
    \ message format but is reserved for use only\n      with a possible future service-composition\
    \ scheme.\n"
- title: 2. Default and Service-Specific Values for General Parameters
  contents:
  - "2. Default and Service-Specific Values for General Parameters\n   General parameters\
    \ have a common *definition* across all QoS control\n   services. Frequently,\
    \ the same *value* of a general parameter will be\n   correct for all QoS control\
    \ services offered by a network element. In\n   this circumstance, there is no\
    \ need to export a separate copy of the\n   value for each QoS control service;\
    \ instead the node can export one\n   number which applies to all supported services.\n\
    \   A general parameter value which applies to all services supported at\n   a\
    \ network node is called a default or global value. For example, if\n   all of\
    \ the QoS control services provided at a node support the same\n   maximum packet\
    \ size, the node may export a single default value for\n   the PATH_MTU parameter\
    \ described in Section 3, rather than providing\n   a separate copy of the value\
    \ for each QoS control service. In the\n   common case, this reduces both message\
    \ size and processing overhead\n   for the setup protocol.\n   Occasionally an\
    \ individual service needs to report a value differing\n   from the default value\
    \ for a particular general parameter. For\n   example, if the implementation of\
    \ Guaranteed Service [RFC 2212] at a\n   router is restricted by scheduler or\
    \ hardware considerations to a\n   maximum packet size smaller than supported\
    \ by the router's best-\n   effort forwarding path, the implementation may wish\
    \ to export a\n   \"service-specific\" value of the PATH_MTU parameter so that\n\
    \   applications using the Guaranteed service will function correctly.\n   In\
    \ the example above, the router might supply a value of 1500 for the\n   default\
    \ PATH_MTU parameter, and a value of 250 for the PATH_MTU\n   parameter applying\
    \ to guaranteed service. In this case, the setup\n   protocol providing path characterization\
    \ carries (and delivers to the\n   application) both a value for Guaranteed service\
    \ and a value for\n   other services.\n   The distinction between default and\
    \ service-specific parameter values\n   makes no sense for non-general parameters\
    \ (those defined by a\n   specific QoS control service, rather than this note),\
    \ because both\n   the definition and value of the parameter are always specific\
    \ to the\n   particular service.\n   The distinction between default and service-specific\
    \ values for\n   general parameters is reflected in the parameter ID name space.\
    \  This\n   allows network nodes, setup protocols, and network management tools\n\
    \   to distinguish default from service-specific values, and to determine\n  \
    \ which service a service-specific parameter value is associated with.\n   Service\
    \ number 1 is used to indicate the default value. A parameter\n   value identified\
    \ by the ID:\n                           <1, parameter_number>\n   is a default\
    \ value, which applies to all services unless it is\n   overridden by a service-specific\
    \ value for the same parameter.\n   A parameter value identified by the ID:\n\
    \                    <service_number, parameter_number>\n   where service_number\
    \ is not equal to 1, is a service-specific value.\n   It applies only to the service\
    \ identified by service_number.\n   These service-specific values are also called\
    \ override values.  This\n   is because when both service-specific and default\
    \ values are present\n   for a parameter, the service-specific value overrides\
    \ the default\n   value (for the service to which it applies). The rules for composing\n\
    \   service-specific and global general parameters support this override\n   capability.\
    \  The basic rule is to use the service-specific value if\n   it exists, and otherwise\
    \ the global value.\n   A complete summary of the characterization parameter composition\n\
    \   process is given below. In this summary, the \"arriving value\" is the\n \
    \  incompletely composed parameter value arriving from a neighbor node.\n   The\
    \ \"local value\" is the (global or service-specific) value made\n   available\
    \ by the local node. The \"result\" is the newly composed value\n   to be sent\
    \ to the next node on the data path.\n     1. Examine the <service_number, parameter_number>\
    \ pair associated\n     with the arriving value. This information is conveyed\
    \ by the setup\n     protocol together with the arriving value.\n     2. If the\
    \ arriving value is for a parameter specific to a single\n     service (this is\
    \ true when the parameter_number is larger than\n     128), compose the arriving\
    \ value with the local value exported by\n     the specified service, and pass\
    \ the result to the next hop. In this\n     case there is no need to consider\
    \ global values, because the\n     parameter itself is specific to just one service.\n\
    \     3. If the arriving value is a service-specific value for a\n     generally\
    \ defined parameter (the parameter_number is 127 or less,\n     and the service_number\
    \ is other than 1), and the local\n     implementation of that service also exports\
    \ a service-specific\n     value for the parameter, compose the service-specific\
    \ arriving\n     value and the service-specific local value of the parameter,\
    \ and\n     pass the result as a service-specific value to the next-hop node.\n\
    \     4. If the arriving value is a service-specific value for a general\n   \
    \  parameter (the parameter_number is 127 or less, and the\n     service_number\
    \ is other than 1), and the local implementation of\n     that service does *not*\
    \ export a service-specific value, compose\n     the service-specific arriving\
    \ value with the global value for that\n     parameter exported by the local node,\
    \ and pass the result as a\n     service-specific value to the next-hop node.\n\
    \     5. If the arriving value is a global value for a general parameter\n   \
    \  (parameter_number is 127 or less, and the service_number is 1), and\n     the\
    \ local implementation of *any* service exports a service-\n     specific value\
    \ for that general parameter, compose the arriving\n     (global) value with the\
    \ service-specific value for that parameter\n     exported by the local service,\
    \ and pass the result as a service-\n     specific value to the next-hop node.\
    \ This will require adding a new\n     data field to the message passed to the\
    \ next hop, to hold the newly\n     generated service-specific value. Repeat this\
    \ process for each\n     service that exports a service-specific value for the\
    \ parameter.\n     6. If the arriving value is a global value for a general parameter\n\
    \     (the service_number is 1, and the parameter_number is 127 or less),\n  \
    \   compose the arriving (global) value with the global parameter value\n    \
    \ exported by the local node, and pass the result as a global\n     (service 1)\
    \ value to the next-hop node. This step is performed\n     whether or not any\
    \ service-specific values were generated and\n     exported in step 5.\n"
- title: 3. General Parameter Definitions
  contents:
  - "3. General Parameter Definitions\n 3.1 NON-IS_HOP flag parameter\n   This parameter\
    \ provides information about the presence of network\n   elements which do not\
    \ implement QoS control services along the data\n   path.\n   The local value\
    \ of the parameter is 1 if the network element does not\n   implement the relevant\
    \ QoS control service, or knows that there is a\n   break in the chain of elements\
    \ which implement the service.  The\n   local parameter is 0 otherwise.  The local\
    \ parameter is assigned\n   parameter_number 1.\n   The composition rule for this\
    \ parameter is the OR function. A\n   composed parameter value of 1 arriving at\
    \ the endpoint of a path\n   indicates that at least one point along the path\
    \ does not offer the\n   indicated QoS control service.  The parameter_number\
    \ for the composed\n   quantity is 2.\n   The global NON_IS_HOP flag parameter\
    \ thus has the ID <1,2>. If this\n   flag is set, it indicates that one or more\
    \ network elements along the\n   application's data path does not support the\
    \ integrated services\n   framework at all. An example of such an element would\
    \ be an IP router\n   offering only best-effort packet delivery and not supporting\
    \ any\n   resource reservation requests.\n   Obviously, a network element which\
    \ does not support this\n   specification will not know to set this flag.  The\
    \ actual\n   responsibility for determining that a network node does not support\n\
    \   integrated services may fall to the network element, the setup\n   protocol,\
    \ or a manual configuration operation and is dependent on\n   implementation and\
    \ usage.  This calculation must be conservative.\n   For example, a router sending\
    \ packets into an IP tunnel must assume\n   that the tunneled packets will not\
    \ receive QoS control services\n   unless it or the setup protocol can prove otherwise.\n\
    \   Service-specific versions of the NON_IS_HOP flag indicate that one or\n  \
    \ more network elements along a path don't support the particular\n   service.\
    \ For example, the flag parameter identified by ID <2,2> being\n   set indicates\
    \ that some network element along the path does not\n   support the Guaranteed\
    \ service, though it might support another\n   service such as Controlled-Load.\n\
    \   If the global NON_IS_HOP flag <1,2> is set for a path, the receiver\n   (network\
    \ element or application) should consider the values of all\n   other parameters\
    \ defined in this specification, including service-\n   specific NON_IS_HOP flags,\
    \ as possibly inaccurate. If a service\n   specific NON_IS_HOP flag is set for\
    \ a path, the receiver should\n   consider the values of all other parameters\
    \ associated with that\n   service as possibly inaccurate.\n   The NON_IS_HOP\
    \ parameter may be represented in any form which can\n   express boolean true\
    \ and false. However, note that a network element\n   must set this flag precisely\
    \ when it does *not* fully understand the\n   format or data representation of\
    \ an arriving protocol message\n   (because it does not support the specified\
    \ service). Therefore, the\n   data representation used for this parameter by\
    \ setup and management\n   protocols must allow the parameter value to be read\
    \ and set even if\n   the network element cannot otherwise parse the protocol\
    \ message.\n   An appropriate XDR description of this parameter is:\n        \
    \                     bool NON_IS_HOP;\n   However, the standard XDR data encoding\
    \ for this description will not\n   meet the requirement described above unless\
    \ other restrictions are\n   placed on message formats. An alternative data representation\
    \ may be\n   more appropriate.\n      NOTE: The message format described for RSVP\
    \ in [RFC 2210] carries\n      this parameter as a single-bit flag, referred to\
    \ as the \"break\n      bit\".\n 3.2 NUMBER_OF_IS_HOPS\n   IS stands for \"integrated\
    \ services aware\".  An integrated services\n   aware network element is one that\
    \ conforms to the various\n   requirements described in this and other referenced\
    \ documents.  The\n   network element need not offer a specific service, but if\
    \ it does it\n   must support and characterize the service in conformance with\
    \ the\n   relevant specification, and if it does not it must correctly set the\n\
    \   NON_IS_HOP flag parameter for the service. For completeness, the\n   local\
    \ parameter is assigned the parameter_number 3.\n   The composition rule for this\
    \ parameter is to increment the counter\n   by one at each IS-aware hop.  This\
    \ quantity, when composed end-to-\n   end, informs the endpoint of the number\
    \ of integrated-services aware\n   network elements traversed along the path.\
    \  The parameter_number for\n   this composed parameter is 4.\n   Values of the\
    \ composed parameter will range from 1 to 255, limited by\n   the bound on IP\
    \ hop count.\n   The XDR representation of this parameter is:\n              \
    \        unsigned int NUMBER_OF_IS_HOPS;\n 3.3. AVAILABLE_PATH_BANDWIDTH\n   This\
    \ parameter provides information about the bandwidth available\n   along the path\
    \ followed by a data flow.  The local parameter is an\n   estimate of the bandwidth\
    \ the network element has available for\n   packets following the path.  Computation\
    \ of the value of this\n   parameter should take into account all information\
    \ available to the\n   network element about the path, taking into consideration\n\
    \   administrative and policy controls on bandwidth, as well as physical\n   resources.\n\
    \      NOTE: This parameter should reflect, as closely as possible, the\n    \
    \  actual bandwidth available to packets following a path. However,\n      the\
    \ bandwidth available may depend on a number of factors not\n      known to the\
    \ network element until a specific QoS request is in\n      place, such as the\
    \ destination(s) of the packet flow, the service\n      to be requested by the\
    \ flow, or external policy information\n      associated with a reservation request.\
    \  Because the parameter must\n      in fact be provided before any specific QoS\
    \ request is made, it is\n      frequently difficult to provide the parameter\
    \ accurately. In\n      circumstances where the parameter cannot be provided accurately,\n\
    \      the network element should make the best attempt possible, but it\n   \
    \   is acceptable to overestimate the available bandwidth by a\n      significant\
    \ amount.\n   The parameter_number for AVAILABLE_PATH_BANDWIDTH is 5. The global\n\
    \   parameter <1, 5> is an estimate of the bandwidth available to any\n   packet\
    \ following the path, without consideration of which (if any)\n   QoS control\
    \ service the packets may be subject to.\n   In cases where a particular service\
    \ is administratively or\n   technically restricted to a limited portion of the\
    \ overall available\n   bandwidth, the service module may wish to export an override\n\
    \   parameter which specifies this smaller bandwidth value.\n   The composition\
    \ rule for this parameter is the MIN function. The\n   composed value is the minimum\
    \ of the network element's value and the\n   previously composed value. This quantity,\
    \ when composed end-to-end,\n   informs the endpoint of the minimal bandwidth\
    \ link along the path\n   from sender to receiver.  The parameter_number for the\
    \ composed\n   minimal bandwidth along the path is 6.\n   Values of this parameter\
    \ are measured in bytes per second.  The\n   representation must be able to express\
    \ values ranging from 1 byte per\n   second to 40 terabytes per second, about\
    \ what is believed to be the\n   maximum theoretical bandwidth of a single strand\
    \ of fiber.\n   Particularly for large bandwidths, only the first few digits are\n\
    \   significant, so the use of a floating point representation, accurate\n   to\
    \ at least 0.1%, is encouraged.\n   The XDR representation for this parameter\
    \ is:\n                      float AVAILABLE_PATH_BANDWIDTH;\n   For values of\
    \ this parameter only valid non-negative floating point\n   numbers are allowed.\
    \ Negative numbers (including \"negative zero\"),\n   infinities, and NAN's are\
    \ not allowed.\n      NOTE: An implementation which utilizes general-purpose hardware\
    \ or\n      software IEEE floating-point support may wish to verify that\n   \
    \   arriving parameter values meet these requirements before using the\n     \
    \ values in floating-point computations, in order to avoid\n      unexpected exceptions\
    \ or traps.\n   If the network element cannot or chooses not to provide an estimate\n\
    \   of path bandwidth, it may export a local value of zero for this\n   parameter.\
    \  A network element or application receiving a composed\n   value of zero for\
    \ this parameter must assume that the actual\n   bandwidth available is unknown.\n\
    \ 3.4 MINIMUM_PATH_LATENCY\n   The local parameter is the latency of the packet\
    \ forwarding process\n   associated with the network element, where the latency\
    \ is defined to\n   be the *smallest* possible packet delay added by the network\
    \ element.\n   This delay results from speed-of-light propagation delay, from\
    \ packet\n   processing limitations, or both. It does not include any variable\n\
    \   queuing delay which may be present.\n   The purpose of this parameter is to\
    \ provide a baseline minimum path\n   latency for use with services which provide\
    \ estimates or bounds on\n   additional path delay, such as Guaranteed [RFC 2212].\
    \  Together with\n   the queuing delay bound offered by Guaranteed and similar\
    \ services,\n   this parameter gives the application knowledge of both the minimum\n\
    \   and maximum packet delivery delay.  Knowing both the minimum and\n   maximum\
    \ latency experienced by data packets allows the receiving\n   application to\
    \ accurately compute its de-jitter buffer requirements.\n   Note that the quantity\
    \ characterized by this parameter is the\n   absolute smallest possible value\
    \ for the packet processing and\n   transmission latency of the network element.\
    \ This value is the\n   quantity required to provide the end hosts with jitter\
    \ bounds. The\n   parameter does *not* provide an upper-bound estimate of minimum\n\
    \   latency, which might be of interest for best-effort traffic and QoS\n   control\
    \ services which do not explicitly offer delay bounds. In other\n   words, the\
    \ parameter will always underestimate, rather than\n   overestimate, latency,\
    \ particularly in multicast and large cloud\n   situations.\n   When packets traversing\
    \ a network element may experience different\n   minimal latencies over different\
    \ paths, this parameter should, if\n   possible, report an accurate latency value\
    \ for each path. For\n   example, when an ATM point-multipoint virtual circuit\
    \ is used to\n   implement IP multicast, the mechanism that implements this parameter\n\
    \   for the ATM cloud should ideally compute a separate value for each\n   destination.\
    \ Doing this may require cooperation between the ingress\n   and egress elements\
    \ bounding the multi-access communication cloud.\n   The method by which this\
    \ cooperation is achieved, and the choice of\n   which IP-level network element\
    \ actually provides and composes the\n   value, is technology-dependent.\n   An\
    \ alternative choice is to provide the same value of this parameter\n   for all\
    \ paths through the cloud. The value reported must be the\n   smallest latency\
    \ for any possible path. Note that in this situation,\n   QoS control services\
    \ (e.g., Guaranteed) which provide an upper bound\n   on latency cannot simply\
    \ add their queuing delay to the value\n   computed by this parameter; they must\
    \ also compensate for path delays\n   above the minimum. In this case the range\
    \ between the minimum and\n   maximum packet delays reported to the application\
    \ may be larger than\n   actually occurs, because the application will be told\
    \ about the\n   minimum delay along the shortest path and the maximum delay along\
    \ the\n   actual path.  This is acceptable in most situations.\n   A third alternative\
    \ is to report the \"indeterminate\" value, as\n   specified below.  In this circumstance\
    \ the client application may\n   either deduce a minimum path latency through\
    \ measurement, or assume a\n   value of zero.\n   The composition rule for this\
    \ parameter is summation with a clamp of\n   (2**32 - 1) on the maximum value.\
    \ This quantity, when composed end-\n   to-end, informs the endpoint of the minimal\
    \ packet delay along the\n   path from sender to receiver. The parameter_number\
    \ for the latency of\n   the network element's link is 7. The parameter_number\
    \ for the\n   cumulative latency along the path is 8.\n   The latencies are reported\
    \ in units of one microsecond. An individual\n   element can advertise a latency\
    \ value between 1 and 2**28 (somewhat\n   over two minutes) and the total latency\
    \ added across all elements can\n   range as high as (2**32)-2. If the sum of\
    \ the different elements\n   delays exceeds (2**32)-2, the end-to-end advertised\
    \ delay should be\n   reported as indeterminate. This is described below.\n  \
    \ Note that while the granularity of measurement is microseconds, a\n   conforming\
    \ element is free to actually measure delays more loosely.\n   The minimum requirement\
    \ is that the element estimate its delay\n   accurately to the nearest 100 microsecond\
    \ granularity. Elements that\n   can measure more accurately are, of course, encouraged\
    \ to do so.\n      NOTE: Measuring in milliseconds is not acceptable, because\
    \ if the\n      minimum delay value is a millisecond, a path with several hops\n\
    \      will lead to a composed delay of at least several milliseconds,\n     \
    \ which is likely to be misleading.\n   The XDR description of this parameter\
    \ is:\n                    unsigned int MINIMUM_PATH_LATENCY;\n   The distinguished\
    \ value (2**32)-1 is taken to mean \"indeterminate\n   latency\". A network element\
    \ which cannot accurately predict the\n   latency of packets it is processing\
    \ should set its local parameter to\n   this value. Because the composition function\
    \ limits the composed sum\n   to this value, receipt of this value at a network\
    \ element or\n   application indicates that the true path latency is not known.\
    \ This\n   may happen because one or more network elements could not supply a\n\
    \   value, or because the range of the composition calculation was\n   exceeded.\n\
    \ 3.5. PATH_MTU\n   This parameter computes the maximum transmission unit (MTU)\
    \ for\n   packets following a data path.  This value is required to invoke QoS\n\
    \   control services which require that IP packet size be strictly\n   limited\
    \ to a specific MTU. Existing MTU discovery mechanisms cannot\n   be used because\
    \ they provide information only to the sender and they\n   do not directly allow\
    \ for QoS control services to specify MTU's\n   smaller than the physical MTU.\n\
    \   The local characterization parameter is the IP MTU, where the MTU of\n   a\
    \ network element is defined to be the maximum transmission unit the\n   network\
    \ element can accommodate without fragmentation, including IP\n   and upper-layer\
    \ protocol headers but not including link level\n   headers.  The composition\
    \ rule is to take the minimum of the network\n   element's MTU and the previously\
    \ composed value.  This quantity, when\n   composed end-to-end, informs the endpoint\
    \ of the maximum transmission\n   unit that can traverse the path from sender\
    \ to receiver without\n   fragmentation.  The parameter_number for the MTU of\
    \ the network\n   element's link is 9.  The parameter_number for the composed\
    \ MTU along\n   the path is 10.\n   A correct and valid value of this parameter\
    \ must be provided by all\n   IS-aware network elements.\n   A specific service\
    \ module may specify an MTU smaller than that of the\n   overall network element\
    \ by overriding this parameter with one giving\n   the service's MTU value. A\
    \ service module may not specify an MTU\n   value larger than that given by the\
    \ global parameter.\n   Values of this parameter are measured in bytes.  The representation\n\
    \   must be able to express values ranging from 1 byte to 2**32-1 bytes.\n   The\
    \ XDR description of this parameter is:\n                          unsigned int\
    \ PATH_MTU;\n 3.6. TOKEN_BUCKET_TSPEC\n   This parameter is used to describe data\
    \ traffic parameters using a\n   simple token bucket filter. This parameter is\
    \ used by data senders to\n   describe the traffic parameters of traffic it expects\
    \ to generate,\n   and by QoS control services to describe the parameters of traffic\
    \ for\n   which the reservation should apply. It is defined as a general rather\n\
    \   than service-specific parameter because the same traffic description\n   may\
    \ be used by several QoS control services in some situations.\n      NOTE: All\
    \ previous definitions in this note have described\n      \"characterization parameters\"\
    , with local values set by network\n      elements to characterize their behavior\
    \ and composition rules to\n      give the resulting end-to-end behavior. The\
    \ TOKEN_BUCKET_TSPEC is\n      not a characterization parameter, because intermediate\
    \ nodes\n      within the network do not export local values for\n      TOKEN_BUCKET_TSPECs.\
    \ The TOKEN_BUCKET_TSPEC is simply a data\n      structure definition given here\
    \ because it is common to more than\n      one QoS control service.\n   The TOKEN_BUCKET_TSPEC\
    \ parameter is assigned parameter_number 127.\n   The TOKEN_BUCKET_TSPEC takes\
    \ the form of a token bucket specification\n   plus a peak rate [p], minimum policed\
    \ unit [m], and a maximum packet\n   size [M].\n   The token bucket specification\
    \ includes an average or token rate [r]\n   and a bucket depth [b].  Both [r]\
    \ and [b] must be positive.\n   The token rate [r] is measured in bytes of IP\
    \ datagrams per second.\n   Values of this parameter may range from 1 byte per\
    \ second to 40\n   terabytes per second. In practice, only the first few digits\
    \ of the\n   [r] and [p] parameters are significant, so the use of floating point\n\
    \   representations, accurate to at least 0.1% is encouraged.\n   The bucket depth,\
    \ [b], is measured in bytes. Values of this parameter\n   may range from 1 byte\
    \ to 250 gigabytes. In practice, only the first\n   few digits of the [b] parameter\
    \ are significant, so the use of\n   floating point representations, accurate\
    \ to at least 0.1% is\n   encouraged.\n   The peak traffic rate [p] is measured\
    \ in bytes of IP datagrams per\n   second. Values of this parameter may range\
    \ from 1 byte per second to\n   40 terabytes per second. In practice, only the\
    \ first few digits of\n   the [r] and [p] parameters are significant, so the use\
    \ of floating\n   point representations, accurate to at least 0.1% is encouraged.\
    \ The\n   peak rate value may be set to positive infinity, indicating that it\n\
    \   is unknown or unspecified.\n   The range of values allowed for these parameters\
    \ is intentionally\n   large to allow for future network technologies. A particular\
    \ network\n   element is not expected to support the full range of values.\n \
    \  The minimum policed unit, [m], is an integer measured in bytes.  This\n   size\
    \ includes the application data and all protocol headers at or\n   above the IP\
    \ level (IP, TCP, UDP, RTP, etc.). It does not include the\n   link-level header\
    \ size, because these headers will change in size as\n   the packet crosses different\
    \ portions of the internetwork.\n   All IP datagrams less than size [m] are treated\
    \ as being of size m\n   for purposes of resource allocation and policing. The\
    \ purpose of this\n   parameter is to allow reasonable estimation of the per-packet\n\
    \   resources needed to process a flow's packets (maximum packet rate can\n  \
    \ be computed from the [b] and [m] terms) and to reasonably bound the\n   bandwidth\
    \ overhead consumed by the flow's link-level packet headers.\n   The maximum bandwidth\
    \ overhead consumed by link-level headers when\n   carrying a flow's packets is\
    \ bounded by the ratio of the link-level\n   header size to [m]. Without the [m]\
    \ term, it would be necessary to\n   compute this bandwidth overhead assuming\
    \ that every flow was always\n   sending minimum-sized packets, which is unacceptable.\n\
    \   The maximum packet size, [M], is the biggest packet that will conform\n  \
    \ to the traffic specification; it is also measured in bytes.  Any\n   packets\
    \ of larger size sent into the network may not receive QoS-\n   controlled service,\
    \ since they are considered to not meet the traffic\n   specification.\n   Both\
    \ [m] and [M] must be positive, and [m] must be less then or equal\n   to [M].\n\
    \   The XDR description of this parameter is:\n         struct {\n           float\
    \ r;\n           float b;\n           float p;\n           unsigned m;\n     \
    \      unsigned M;\n         } TOKEN_BUCKET_TSPEC;\n   For the fields [r] and\
    \ [b] only valid non-negative floating point\n   numbers are allowed. Negative\
    \ numbers (including \"negative zero),\n   infinities, and NAN's are not allowed.\n\
    \   For the field [p], only valid non-negative floating point numbers or\n   positive\
    \ infinity are allowed. Negative numbers (including \"negative\n   zero), negative\
    \ infinities, and NAN's are not allowed.\n      NOTE: An implementation which\
    \ utilizes general-purpose hardware or\n      software IEEE floating-point support\
    \ may wish to verify that\n      arriving parameter values meet these requirements\
    \ before using the\n      values in floating-point computations, in order to avoid\n\
    \      unexpected exceptions or traps.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Implementation of the characterization parameters\
    \ described in this\n   memo creates no known new avenues for malicious attack\
    \ on the network\n   infrastructure.  Implementation of these characterization\
    \ parameters\n   does, of necessity, reveal some additional information about\
    \ a\n   network's performance, which in extremely rare circumstances could be\n\
    \   viewed as a security matter by the network provider.\n"
- title: 5. References
  contents:
  - "5. References\n   [RFC 2005] Braden, R., Ed., et. al., \"Resource Reservation\
    \ Protocol\n   (RSVP) - Version 1 Functional Specification\", RFC 2205, September\n\
    \   1997.\n   [RFC 2210] Wroclawski, J., \"The Use of RSVP with IETF Integrated\n\
    \   Services\", RFC 2210, September 1997.\n   [RFC 2216] Shenker, S., and J. Wroclawski,\
    \ \"Network Element QoS\n   Control Service Specification Template\", RFC 2216,\
    \ September 1997.\n   [RFC 2212] Shenker, S., Partridge, C., and R. Guerin \"\
    Specification\n   of the Guaranteed Quality of Service\", RFC 2212, September\
    \ 1997.\n   [RFC 2211] Wroclawski, J., \"Specification of the Controlled Load\n\
    \   Quality of Service\", RFC 2211, September 1997.\n   [RFC 1832] Srinivansan,\
    \ R., \"XDR: External Data Representation\n   Standard\", RFC 1832, August 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Scott Shenker\n   Xerox PARC\n   3333 Coyote Hill Road\n\
    \   Palo Alto, CA 94304-1314\n   Phone: 415-812-4840\n   Fax:   415-812-4471\n\
    \   EMail: shenker@parc.xerox.com\n   John Wroclawski\n   MIT Laboratory for Computer\
    \ Science\n   545 Technology Sq.\n   Cambridge, MA  02139\n   Phone: 617-253-7885\n\
    \   Ffax:  617-253-2673 (FAX)\n   EMail: jtw@lcs.mit.edu\n"
