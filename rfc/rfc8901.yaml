- title: __initial_text__
  contents:
  - '                       Multi-Signer DNSSEC Models

    '
- title: Abstract
  contents:
  - "Abstract\n   Many enterprises today employ the service of multiple DNS providers\n\
    \   to distribute their authoritative DNS service.  Deploying DNSSEC in\n   such\
    \ an environment may present some challenges, depending on the\n   configuration\
    \ and feature set in use.  In particular, when each DNS\n   provider independently\
    \ signs zone data with their own keys,\n   additional key-management mechanisms\
    \ are necessary.  This document\n   presents deployment models that accommodate\
    \ this scenario and\n   describes these key-management requirements.  These models\
    \ do not\n   require any changes to the behavior of validating resolvers, nor\
    \ do\n   they impose the new key-management requirements on authoritative\n  \
    \ servers not involved in multi-signer configurations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8901.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction and Motivation\n   2.  Deployment Models\n\
    \     2.1.  Multiple-Signer Models\n       2.1.1.  Model 1: Common KSK Set, Unique\
    \ ZSK Set per Provider\n       2.1.2.  Model 2: Unique KSK Set and ZSK Set per\
    \ Provider\n   3.  Validating Resolver Behavior\n   4.  Signing-Algorithm Considerations\n\
    \   5.  Authenticated-Denial Considerations\n     5.1.  Single Method\n     5.2.\
    \  Mixing Methods\n   6.  Key Rollover Considerations\n     6.1.  Model 1: Common\
    \ KSK, Unique ZSK per Provider\n     6.2.  Model 2: Unique KSK and ZSK per Provider\n\
    \   7.  Using Combined Signing Keys\n   8.  Use of CDS and CDNSKEY\n   9.  Key-Management-Mechanism\
    \ Requirements\n   10. DNS Response-Size Considerations\n   11. IANA Considerations\n\
    \   12. Security Considerations\n   13. References\n     13.1.  Normative References\n\
    \     13.2.  Informative References\n   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction and Motivation
  contents:
  - "1.  Introduction and Motivation\n   Many enterprises today employ the service\
    \ of multiple Domain Name\n   System (DNS) [RFC1034] [RFC1035] providers to distribute\
    \ their\n   authoritative DNS service.  This is primarily done for redundancy\
    \ and\n   availability, and it allows the DNS service to survive a complete,\n\
    \   catastrophic failure of any single provider.  Additionally,\n   enterprises\
    \ or providers occasionally have requirements that preclude\n   standard zone-transfer\
    \ techniques [RFC1995][RFC5936]: either\n   nonstandardized DNS features are in\
    \ use that are incompatible with\n   zone transfer, or operationally a provider\
    \ must be able to (re-)sign\n   DNS records using their own keys.  This document\
    \ outlines some\n   possible models of DNSSEC [RFC4033] [RFC4034] [RFC4035] deployment\
    \ in\n   such an environment.\n   This document assumes a reasonable level of\
    \ familiarity with DNS\n   operations and protocol terms.  Much of the terminology\
    \ is explained\n   in further detail in \"DNS Terminology\" [RFC8499].\n"
- title: 2.  Deployment Models
  contents:
  - "2.  Deployment Models\n   If a zone owner can use standard zone-transfer techniques,\
    \ then the\n   presence of multiple providers does not require modifications to\
    \ the\n   normal deployment models.  In these deployments, there is a single\n\
    \   signing entity (which may be the zone owner, one of the providers, or\n  \
    \ a separate entity), while the providers act as secondary\n   authoritative servers\
    \ for the zone.\n   Occasionally, however, standard zone-transfer techniques cannot\
    \ be\n   used.  This could be due to the use of nonstandard DNS features or\n\
    \   the operational requirements of a given provider (e.g., a provider\n   that\
    \ only supports \"online signing\").  In these scenarios, the\n   multiple providers\
    \ each act like primary servers, independently\n   signing data received from\
    \ the zone owner and serving it to DNS\n   queriers.  This configuration presents\
    \ some novel challenges and\n   requirements.\n"
- title: 2.1.  Multiple-Signer Models
  contents:
  - "2.1.  Multiple-Signer Models\n   In this category of models, multiple providers\
    \ each independently\n   sign and serve the same zone.  The zone owner typically\
    \ uses\n   provider-specific APIs to update zone content identically at each of\n\
    \   the providers and relies on the provider to perform signing of the\n   data.\
    \  A key requirement here is to manage the contents of the DNSKEY\n   and Delegation\
    \ Signer (DS) RRsets in such a way that validating\n   resolvers always have a\
    \ viable path to authenticate the DNSSEC\n   signature chain, no matter which\
    \ provider is queried.  This\n   requirement is achieved by having each provider\
    \ import the public\n   Zone Signing Keys (ZSKs) of all other providers into their\
    \ DNSKEY\n   RRsets.\n   These models can support DNSSEC even for the nonstandard\
    \ features\n   mentioned previously, if the DNS providers have the capability\
    \ of\n   signing the response data generated by those features.  Since these\n\
    \   responses are often generated dynamically at query time, one method\n   is\
    \ for the provider to perform online signing (also known as on-the-\n   fly signing).\
    \  However, another possible approach is to precompute\n   all the possible response\
    \ sets and associated signatures and then\n   algorithmically determine at query\
    \ time which response set and\n   signature need to be returned.\n   In the models\
    \ presented, the function of coordinating the DNSKEY or\n   DS RRset does not\
    \ involve the providers communicating directly with\n   each other.  Feedback\
    \ from several commercial managed-DNS providers\n   indicates that they may be\
    \ unlikely to directly communicate, since\n   they typically have a contractual\
    \ relationship only with the zone\n   owner.  However, if the parties involved\
    \ are agreeable, it may be\n   possible to devise a protocol mechanism by which\
    \ the providers\n   directly communicate to share keys.  Details of such a protocol\
    \ are\n   deferred to a future specification document, should there be\n   interest.\n\
    \   In the descriptions below, the Key Signing Key (KSK) and Zone Signing\n  \
    \ Key (ZSK) correspond to the definitions in [RFC8499], with the caveat\n   that\
    \ the KSK not only signs the zone apex DNSKEY RRset but also\n   serves as the\
    \ Secure Entry Point (SEP) into the zone.\n"
- title: '2.1.1.  Model 1: Common KSK Set, Unique ZSK Set per Provider'
  contents:
  - "2.1.1.  Model 1: Common KSK Set, Unique ZSK Set per Provider\n   *  The zone\
    \ owner holds the KSK set, manages the DS record set, and\n      is responsible\
    \ for signing the DNSKEY RRset and distributing it to\n      the providers.\n\
    \   *  Each provider has their own ZSK set, which is used to sign data in\n  \
    \    the zone.\n   *  The providers have an API that the zone owner uses to query\
    \ the\n      ZSK public keys and insert a combined DNSKEY RRset that includes\n\
    \      the ZSK sets of each provider and the KSK set, signed by the KSK.\n   *\
    \  Note that even if the contents of the DNSKEY RRset do not change,\n      the\
    \ zone owner needs to periodically re-sign it as signature\n      expiration approaches.\
    \  The provider API is also used to thus\n      periodically redistribute the\
    \ refreshed DNSKEY RRset.\n   *  Key rollovers need coordinated participation\
    \ of the zone owner to\n      update the DNSKEY RRset (for KSK or ZSK) and the\
    \ DS RRset (for\n      KSK).\n   *  (One specific variant of this model that may\
    \ be interesting is a\n      configuration in which there is only a single provider.\
    \  A\n      possible use case for this is where the zone owner wants to\n    \
    \  outsource the signing and operation of their DNS zone to a single\n      third-party\
    \ provider but still control the KSK, so that they can\n      authorize and/or\
    \ revoke the use of specific zone signing keys.)\n"
- title: '2.1.2.  Model 2: Unique KSK Set and ZSK Set per Provider'
  contents:
  - "2.1.2.  Model 2: Unique KSK Set and ZSK Set per Provider\n   *  Each provider\
    \ has their own KSK and ZSK sets.\n   *  Each provider offers an API that the\
    \ zone owner uses to import the\n      ZSK sets of the other providers into their\
    \ DNSKEY RRset.\n   *  The DNSKEY RRset is signed independently by each provider\
    \ using\n      their own KSK.\n   *  The zone owner manages the DS RRset located\
    \ in the parent zone.\n      This is comprised of DS records corresponding to\
    \ the KSKs of each\n      provider.\n   *  Key rollovers need coordinated participation\
    \ of the zone owner to\n      update the DS RRset (for KSK) and the DNSKEY RRset\
    \ (for ZSK).\n"
- title: 3.  Validating Resolver Behavior
  contents:
  - "3.  Validating Resolver Behavior\n   The central requirement for both of the\
    \ multiple-signer models\n   (Section 2.1) is to ensure that the ZSKs from all\
    \ providers are\n   present in each provider's apex DNSKEY RRset and vouched for\
    \ by\n   either the single KSK (in Model 1) or each provider's KSK (in Model\n\
    \   2.)  If this is not done, the following situation can arise (assuming\n  \
    \ two providers, A and B):\n   *  The validating resolver follows a referral (i.e.,\
    \ secure\n      delegation) to the zone in question.\n   *  It retrieves the zone's\
    \ DNSKEY RRset from one of Provider A's\n      nameservers, authenticates it against\
    \ the parent DS RRset, and\n      caches it.\n   *  At some point in time, the\
    \ resolver attempts to resolve a name in\n      the zone while the DNSKEY RRset\
    \ received from Provider A is still\n      viable in its cache.\n   *  It queries\
    \ one of Provider B's nameservers to resolve the name and\n      obtains a response\
    \ that is signed by Provider B's ZSK, which it\n      cannot authenticate because\
    \ this ZSK is not present in its cached\n      DNSKEY RRset for the zone that\
    \ it received from Provider A.\n   *  The resolver will not accept this response.\
    \  It may still be able\n      to ultimately authenticate the name by querying\
    \ other nameservers\n      for the zone until it elicits a response from one of\
    \ Provider A's\n      nameservers.  But it has incurred the penalty of additional\
    \ round\n      trips with other nameservers, with the corresponding latency and\n\
    \      processing costs.  The exact number of additional round trips\n      depends\
    \ on details of the resolver's nameserver-selection\n      algorithm and the number\
    \ of nameservers configured at Provider B.\n   *  It may also be the case that\
    \ a resolver is unable to provide an\n      authenticated response, because it\
    \ gave up after a certain number\n      of retries or a certain amount of delay;\
    \ or it is possible that\n      downstream clients of the resolver that originated\
    \ the query timed\n      out waiting for a response.\n   Hence, it is important\
    \ that the DNSKEY RRset at each provider is\n   maintained with the active ZSKs\
    \ of all participating providers.  This\n   ensures that resolvers can validate\
    \ a response no matter which\n   provider's nameservers it came from.\n   Details\
    \ of how the DNSKEY RRset itself is validated differ.  In Model\n   1 (Section\
    \ 2.1.1), one unique KSK managed by the zone owner signs an\n   identical DNSKEY\
    \ RRset deployed at each provider, and the signed DS\n   record in the parent\
    \ zone refers to this KSK.  In Model 2\n   (Section 2.1.2), each provider has\
    \ a distinct KSK and signs the\n   DNSKEY RRset with it.  The zone owner deploys\
    \ a DS RRset at the\n   parent zone that contains multiple DS records, each referring\
    \ to a\n   distinct provider's KSK.  Hence, it does not matter which provider's\n\
    \   nameservers the resolver obtains the DNSKEY RRset from; the signed DS\n  \
    \ record in each model can authenticate the associated KSK.\n"
- title: 4.  Signing-Algorithm Considerations
  contents:
  - "4.  Signing-Algorithm Considerations\n   DNS providers participating in multi-signer\
    \ models need to use a\n   common DNSSEC signing algorithm (or a common set of\
    \ algorithms if\n   several are in use).  This is because the current specifications\n\
    \   require that if there are multiple algorithms in the DNSKEY RRset,\n   then\
    \ RRsets in the zone need to be signed with at least one DNSKEY of\n   each algorithm,\
    \ as described in [RFC4035], Section 2.2.  If providers\n   employ distinct signing\
    \ algorithms, then this requirement cannot be\n   satisfied.\n"
- title: 5.  Authenticated-Denial Considerations
  contents:
  - "5.  Authenticated-Denial Considerations\n   Authenticated denial of existence\
    \ enables a resolver to validate that\n   a record does not exist.  For this purpose,\
    \ an authoritative server\n   presents, in a response to the resolver, signed\
    \ NSEC (Section 3.1.3\n   of [RFC4035]) or NSEC3 (Section 7.2 of [RFC5155]) records\
    \ that\n   provide cryptographic proof of this nonexistence.  The NSEC3 method\n\
    \   enhances NSEC by providing opt-out for signing insecure delegations\n   and\
    \ also adds limited protection against zone-enumeration attacks.\n   An authoritative\
    \ server response carrying records for authenticated\n   denial is always self-contained,\
    \ and the receiving resolver doesn't\n   need to send additional queries to complete\
    \ the proof of denial.  For\n   this reason, no rollover is needed when switching\
    \ between NSEC and\n   NSEC3 for a signed zone.\n   Since authenticated-denial\
    \ responses are self-contained, NSEC and\n   NSEC3 can be used by different providers\
    \ to serve the same zone.\n   Doing so, however, defeats the protection against\
    \ zone enumeration\n   provided by NSEC3 (because an adversary can trivially enumerate\
    \ the\n   zone by just querying the providers that employ NSEC).  A better\n \
    \  configuration involves multiple providers using different\n   authenticated\
    \ denial-of-existence mechanisms that all provide zone-\n   enumeration defense,\
    \ such as precomputed NSEC3, NSEC3 white lies\n   [RFC7129], NSEC black lies [BLACKLIES],\
    \ etc.  Note, however, that\n   having multiple providers offering different authenticated-denial\n\
    \   mechanisms may impact how effectively resolvers are able to make use\n   of\
    \ the caching of negative responses.\n"
- title: 5.1.  Single Method
  contents:
  - "5.1.  Single Method\n   Usually, the NSEC and NSEC3 methods are used exclusively\
    \ (i.e., the\n   methods are not used at the same time by different servers).\
    \  This\n   configuration is preferred, because the behavior is well defined and\n\
    \   closest to current operational practice.\n"
- title: 5.2.  Mixing Methods
  contents:
  - "5.2.  Mixing Methods\n   Compliant resolvers should be able to validate zone\
    \ data when\n   different authoritative servers for the same zone respond with\n\
    \   different authenticated-denial methods, because this is normally\n   observed\
    \ when NSEC and NSEC3 are being switched or when NSEC3PARAM is\n   updated.\n\
    \   Resolver software may, however, be designed to handle a single\n   transition\
    \ between two authenticated denial configurations more\n   optimally than a permanent\
    \ setup with mixed authenticated-denial\n   methods.  This could make caching\
    \ on the resolver side less\n   efficient, and the authoritative servers may observe\
    \ a higher number\n   of queries.  This aspect should be considered especially\
    \ in the\n   context of \"Aggressive Use of DNSSEC-Validated Cache\" [RFC8198].\n\
    \   In case all providers cannot be configured with the same\n   authenticated-denial\
    \ mechanism, it is recommended to limit the\n   distinct configurations to the\
    \ lowest number feasible.\n   Note that NSEC3 configuration on all providers with\
    \ different\n   NSEC3PARAM values is considered a mixed setup.\n"
- title: 6.  Key Rollover Considerations
  contents:
  - "6.  Key Rollover Considerations\n   The multiple-signer (Section 2.1) models\
    \ introduce some new\n   requirements for DNSSEC key rollovers.  Since this process\n\
    \   necessarily involves coordinated actions on the part of providers and\n  \
    \ the zone owner, one reasonable strategy is for the zone owner to\n   initiate\
    \ key-rollover operations.  But other operationally plausible\n   models may also\
    \ suit, such as a DNS provider initiating a key\n   rollover and signaling their\
    \ intent to the zone owner in some manner.\n   The mechanism to communicate this\
    \ intent could be some secure out-of-\n   band channel that has been agreed upon,\
    \ or the provider could offer\n   an API function that could be periodically polled\
    \ by the zone owner.\n   For simplicity, the descriptions in this section assume\
    \ two DNS\n   providers.  They also assume that KSK rollovers employ the commonly\n\
    \   used Double-Signature KSK rollover method and that ZSK rollovers\n   employ\
    \ the Pre-Publish ZSK rollover method, as described in detail in\n   [RFC6781].\
    \  With minor modifications, they can be easily adapted to\n   other models, such\
    \ as Double-DS KSK rollover or Double-Signature ZSK\n   rollover, if desired.\
    \  Key-use timing should follow the\n   recommendations outlined in [RFC6781],\
    \ but taking into account the\n   additional operations needed by the multi-signer\
    \ models.  For\n   example, \"time to propagate data to all the authoritative\
    \ servers\"\n   now includes the time to import the new ZSKs into each provider.\n"
- title: '6.1.  Model 1: Common KSK, Unique ZSK per Provider'
  contents:
  - "6.1.  Model 1: Common KSK, Unique ZSK per Provider\n   *  Key Signing Key Rollover:\
    \ In this model, the two managed-DNS\n      providers share a common KSK (public\
    \ key) in their respective\n      zones, and the zone owner has sole access to\
    \ the private key\n      portion of the KSK.  To initiate the rollover, the zone\
    \ owner\n      generates a new KSK and obtains the DNSKEY RRset of each DNS\n\
    \      provider using their respective APIs.  The new KSK is added to\n      each\
    \ provider's DNSKEY RRset, and the RRset is re-signed with both\n      the new\
    \ and the old KSK.  This new DNSKEY RRset is then\n      transferred to each provider.\
    \  The zone owner then updates the DS\n      RRset in the parent zone to point\
    \ to the new KSK and, after the\n      necessary DS record TTL period has expired,\
    \ proceeds with updating\n      the DNSKEY RRset to remove the old KSK.\n   *\
    \  Zone Signing Key Rollover: In this model, each DNS provider has\n      separate\
    \ Zone Signing Keys.  Each provider can choose to roll\n      their ZSK independently\
    \ by coordinating with the zone owner.\n      Provider A would generate a new\
    \ ZSK and communicate their intent\n      to perform a rollover (note that Provider\
    \ A cannot immediately\n      insert this new ZSK into their DNSKEY RRset, because\
    \ the RRset has\n      to be signed by the zone owner).  The zone owner obtains\
    \ the new\n      ZSK from Provider A.  It then obtains the current DNSKEY RRset\n\
    \      from each provider (including Provider A), inserts the new ZSK\n      into\
    \ each DNSKEY RRset, re-signs the DNSKEY RRset, and sends it\n      back to each\
    \ provider for deployment via their respective key-\n      management APIs.  Once\
    \ the necessary time period has elapsed\n      (i.e., all zone data has been re-signed\
    \ by the new ZSK and\n      propagated to all authoritative servers for the zone,\
    \ plus the\n      maximum zone-TTL value of any of the data in the zone that has\n\
    \      been signed by the old ZSK), Provider A and the zone owner can\n      initiate\
    \ the next phase of removing the old ZSK and re-signing the\n      resulting new\
    \ DNSKEY RRset.\n"
- title: '6.2.  Model 2: Unique KSK and ZSK per Provider'
  contents:
  - "6.2.  Model 2: Unique KSK and ZSK per Provider\n   *  Key Signing Key Rollover:\
    \ In Model 2, each managed-DNS provider\n      has their own KSK.  A KSK roll\
    \ for Provider A does not require any\n      change in the DNSKEY RRset of Provider\
    \ B but does require co-\n      ordination with the zone owner in order to get\
    \ the DS record set\n      in the parent zone updated.  The KSK roll starts with\
    \ Provider A\n      generating a new KSK and including it in their DNSKEY RRSet.\
    \  The\n      DNSKey RRset would then be signed by both the new and old KSK.\n\
    \      The new KSK is communicated to the zone owner, after which the\n      zone\
    \ owner updates the DS RRset to replace the DS record for the\n      old KSK with\
    \ a DS record for the new KSK.  After the necessary DS\n      RRset TTL period\
    \ has elapsed, the old KSK can be removed from\n      Provider A's DNSKEY RRset.\n\
    \   *  Zone Signing Key Rollover: In Model 2, each managed-DNS provider\n    \
    \  has their own ZSK.  The ZSK roll for Provider A would start with\n      them\
    \ generating a new ZSK, including it in their DNSKEY RRset, and\n      re-signing\
    \ the new DNSKEY RRset with their KSK.  The new ZSK of\n      Provider A would\
    \ then be communicated to the zone owner, who would\n      initiate the process\
    \ of importing this ZSK into the DNSKEY RRsets\n      of the other providers,\
    \ using their respective APIs.  Before\n      signing zone data with the new ZSK,\
    \ Provider A should wait for the\n      DNSKEY TTL plus the time to import the\
    \ ZSK into Provider B, plus\n      the time to propagate the DNSKEY RRset to all\
    \ authoritative\n      servers of both providers.  Once the necessary Pre-Publish\
    \ key-\n      rollover time periods have elapsed, Provider A and the zone owner\n\
    \      can initiate the process of removing the old ZSK from the DNSKEY\n    \
    \  RRsets of all providers.\n"
- title: 7.  Using Combined Signing Keys
  contents:
  - "7.  Using Combined Signing Keys\n   A Combined Signing Key (CSK) is one in which\
    \ the same key serves the\n   purposes of both being the secure entry point (SEP)\
    \ key for the zone\n   and signing all the zone data, including the DNSKEY RRset\
    \ (i.e.,\n   there is no KSK/ZSK split).\n   Model 1 is not compatible with CSKs\
    \ because the zone owner would then\n   hold the sole signing key, and providers\
    \ would not be able to sign\n   their own zone data.\n   Model 2 can accommodate\
    \ CSKs without issue.  In this case, any or all\n   of the providers could employ\
    \ a CSK.  The DS record in the parent\n   zone would reference the provider's\
    \ CSK instead of KSK, and the\n   public CSK would need to be imported into the\
    \ DNSKEY RRsets of all of\n   the other providers.  A CSK key rollover for such\
    \ a provider would\n   involve the following: The provider generates a new CSK,\
    \ installs the\n   new CSK into the DNSKEY RRset, and signs it with both the old\
    \ and new\n   CSKs.  The new CSK is communicated to the zone owner.  The zone\
    \ owner\n   exports this CSK into the other provider's DNSKEY RRsets and replaces\n\
    \   the DS record referencing the old CSK with one referencing the new\n   one\
    \ in the parent DS RRset.  Once all the zone data has been re-\n   signed with\
    \ the new CSK, the old CSK is removed from the DNSKEY\n   RRset, and the latter\
    \ is re-signed with only the new CSK.  Finally,\n   the old CSK is removed from\
    \ the DNSKEY RRsets of the other providers.\n"
- title: 8.  Use of CDS and CDNSKEY
  contents:
  - "8.  Use of CDS and CDNSKEY\n   CDS and CDNSKEY records [RFC7344][RFC8078] are\
    \ used to facilitate\n   automated updates of DNSSEC secure-entry-point keys between\
    \ parent\n   and child zones.  Multi-signer DNSSEC configurations can support\n\
    \   this, too.  In Model 1, CDS/CDNSKEY changes are centralized at the\n   zone\
    \ owner.  However, the zone owner will still need to push down\n   updated signed\
    \ CDNS/DNSKEY RRsets to the providers via the key-\n   management mechanism. \
    \ In Model 2, the key-management mechanism needs\n   to support cross-importation\
    \ of the CDS/CDNSKEY records, so that a\n   common view of the RRset can be constructed\
    \ at each provider and is\n   visible to the parent zone attempting to update\
    \ the DS RRset.\n"
- title: 9.  Key-Management-Mechanism Requirements
  contents:
  - "9.  Key-Management-Mechanism Requirements\n   Managed-DNS providers typically\
    \ have their own proprietary zone\n   configuration and data-management APIs,\
    \ commonly utilizing HTTPS and\n   Representational State Transfer (REST) interfaces.\
    \  So, rather than\n   outlining a new API for key management here, we describe\
    \ the specific\n   functions that the provider API needs to support in order to\
    \ enable\n   the multi-signer models.  The zone owner is expected to use these\
    \ API\n   functions to perform key-management tasks.  Other mechanisms that can\n\
    \   partly offer these functions, if supported by the providers, include\n   the\
    \ DNS UPDATE protocol [RFC2136] and Extensible Provisioning\n   Protocol (EPP)\
    \ [RFC5731].\n   *  The API must offer a way to query the current DNSKEY RRset\
    \ of the\n      provider.\n   *  For Model 1, the API must offer a way to import\
    \ a signed DNSKEY\n      RRset and replace the current one at the provider.  Additionally,\n\
    \      if CDS/CDNSKEY is supported, the API must also offer a way to\n      import\
    \ a signed CDS/CDNSKEY RRset.\n   *  For Model 2, the API must offer a way to\
    \ import a DNSKEY record\n      from an external provider into the current DNSKEY\
    \ RRset.\n      Additionally, if CDS/CDNSKEY is supported, the API must offer\
    \ a\n      mechanism to import individual CDS/CDNSKEY records from an\n      external\
    \ provider.\n   In Model 2, once initially bootstrapped with each other's zone-\n\
    \   signing keys via these API mechanisms, providers could, if desired,\n   periodically\
    \ query each other's DNSKEY RRsets, authenticate their\n   signatures, and automatically\
    \ import or withdraw ZSKs in the keyset\n   as key-rollover events happen.\n"
- title: 10.  DNS Response-Size Considerations
  contents:
  - "10.  DNS Response-Size Considerations\n   The multi-signer models result in larger\
    \ DNSKEY RRsets, so the size\n   of a response to a query for the DNSKEY RRset\
    \ will be larger.  The\n   actual size increase depends on multiple factors: DNSKEY\
    \ algorithm\n   and keysize choices, the number of providers, whether additional\
    \ keys\n   are prepublished, how many simultaneous key rollovers are in\n   progress,\
    \ etc.  Newer elliptic-curve algorithms produce keys small\n   enough that the\
    \ responses will typically be far below the common\n   Internet-path MTU.  Thus,\
    \ operational concerns related to IP\n   fragmentation or truncation and TCP fallback\
    \ are unlikely to be\n   encountered.  In any case, DNS operators need to ensure\
    \ that they can\n   emit and process large DNS UDP responses when necessary, and\
    \ a future\n   migration to alternative transports like DNS over TLS [RFC7858]\
    \ or\n   DNS over HTTPS [RFC8484] may make this topic moot.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   The multi-signer models necessarily involve\
    \ third-party providers\n   holding the private keys that sign the zone-owner's\
    \ data.  Obviously,\n   this means that the zone owner has decided to place a\
    \ great deal of\n   trust in these providers.  By contrast, the more traditional\
    \ model in\n   which the zone owner runs a hidden master and uses the zone-transfer\n\
    \   protocol with the providers is arguably more secure, because only the\n  \
    \ zone owner holds the private signing keys, and the third-party\n   providers\
    \ cannot serve bogus data without detection by validating\n   resolvers.\n   The\
    \ zone-key import and export APIs required by these models need to\n   be strongly\
    \ authenticated to prevent tampering of key material by\n   malicious third parties.\
    \  Many providers today offer REST/HTTPS APIs\n   that utilize a number of client-authentication\
    \ mechanisms (username/\n   password, API keys etc) and whose HTTPS layer provides\
    \ transport\n   security and server authentication.  Multifactor authentication\
    \ could\n   be used to further strengthen security.  If DNS protocol mechanisms\n\
    \   like UPDATE are being used for key insertion and deletion, they\n   should\
    \ similarly be strongly authenticated -- e.g., by employing\n   Transaction Signatures\
    \ (TSIG) [RFC2845].  Key generation and other\n   general security-related operations\
    \ should follow the guidance\n   specified in [RFC6781].\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names -\
    \ concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,\
    \ November 1987,\n              <https://www.rfc-editor.org/info/rfc1034>.\n \
    \  [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n         \
    \     specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n             \
    \ November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2845]  Vixie,\
    \ P., Gudmundsson, O., Eastlake 3rd, D., and B.\n              Wellington, \"\
    Secret Key Transaction Authentication for DNS\n              (TSIG)\", RFC 2845,\
    \ DOI 10.17487/RFC2845, May 2000,\n              <https://www.rfc-editor.org/info/rfc2845>.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, DOI 10.17487/RFC4033, March 2005,\n              <https://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Resource Records for the DNS Security Extensions\",\n      \
    \        RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <https://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <https://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC5155]  Laurie, B., Sisson, G., Arends, R., and D. Blacka, \"DNS\n    \
    \          Security (DNSSEC) Hashed Authenticated Denial of\n              Existence\"\
    , RFC 5155, DOI 10.17487/RFC5155, March 2008,\n              <https://www.rfc-editor.org/info/rfc5155>.\n\
    \   [RFC6781]  Kolkman, O., Mekking, W., and R. Gieben, \"DNSSEC\n           \
    \   Operational Practices, Version 2\", RFC 6781,\n              DOI 10.17487/RFC6781,\
    \ December 2012,\n              <https://www.rfc-editor.org/info/rfc6781>.\n \
    \  [RFC7344]  Kumari, W., Gudmundsson, O., and G. Barwood, \"Automating\n    \
    \          DNSSEC Delegation Trust Maintenance\", RFC 7344,\n              DOI\
    \ 10.17487/RFC7344, September 2014,\n              <https://www.rfc-editor.org/info/rfc7344>.\n\
    \   [RFC8078]  Gudmundsson, O. and P. Wouters, \"Managing DS Records from\n  \
    \            the Parent via CDS/CDNSKEY\", RFC 8078,\n              DOI 10.17487/RFC8078,\
    \ March 2017,\n              <https://www.rfc-editor.org/info/rfc8078>.\n   [RFC8198]\
    \  Fujiwara, K., Kato, A., and W. Kumari, \"Aggressive Use of\n              DNSSEC-Validated\
    \ Cache\", RFC 8198, DOI 10.17487/RFC8198,\n              July 2017, <https://www.rfc-editor.org/info/rfc8198>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [BLACKLIES]\n              Valsorda, F. and\
    \ O. Gudmundsson, \"Compact DNSSEC Denial of\n              Existence or Black\
    \ Lies\", Work in Progress, Internet-\n              Draft, draft-valsorda-dnsop-black-lies-00,\
    \ 21 March 2016,\n              <https://tools.ietf.org/html/draft-valsorda-dnsop-black-\n\
    \              lies-00>.\n   [RFC1995]  Ohta, M., \"Incremental Zone Transfer\
    \ in DNS\", RFC 1995,\n              DOI 10.17487/RFC1995, August 1996,\n    \
    \          <https://www.rfc-editor.org/info/rfc1995>.\n   [RFC2136]  Vixie, P.,\
    \ Ed., Thomson, S., Rekhter, Y., and J. Bound,\n              \"Dynamic Updates\
    \ in the Domain Name System (DNS UPDATE)\",\n              RFC 2136, DOI 10.17487/RFC2136,\
    \ April 1997,\n              <https://www.rfc-editor.org/info/rfc2136>.\n   [RFC5731]\
    \  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Domain\
    \ Name Mapping\", STD 69, RFC 5731,\n              DOI 10.17487/RFC5731, August\
    \ 2009,\n              <https://www.rfc-editor.org/info/rfc5731>.\n   [RFC5936]\
    \  Lewis, E. and A. Hoenes, Ed., \"DNS Zone Transfer Protocol\n              (AXFR)\"\
    , RFC 5936, DOI 10.17487/RFC5936, June 2010,\n              <https://www.rfc-editor.org/info/rfc5936>.\n\
    \   [RFC7129]  Gieben, R. and W. Mekking, \"Authenticated Denial of\n        \
    \      Existence in the DNS\", RFC 7129, DOI 10.17487/RFC7129,\n             \
    \ February 2014, <https://www.rfc-editor.org/info/rfc7129>.\n   [RFC7858]  Hu,\
    \ Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n              and P. Hoffman,\
    \ \"Specification for DNS over Transport\n              Layer Security (TLS)\"\
    , RFC 7858, DOI 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n\
    \   [RFC8484]  Hoffman, P. and P. McManus, \"DNS Queries over HTTPS\n        \
    \      (DoH)\", RFC 8484, DOI 10.17487/RFC8484, October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n\
    \   [RFC8499]  Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n           \
    \   Terminology\", BCP 219, RFC 8499, DOI 10.17487/RFC8499,\n              January\
    \ 2019, <https://www.rfc-editor.org/info/rfc8499>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The initial version of this document benefited from discussions\
    \ with\n   and review from Duane Wessels.  Additional helpful comments were\n\
    \   provided by Steve Crocker, Ulrich Wisser, Tony Finch, Olafur\n   Gudmundsson,\
    \ Matthijs Mekking, Daniel Migault, and Ben Kaduk.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Shumon Huque\n   Salesforce\n   415 Mission Street, 3rd\
    \ Floor\n   San Francisco, CA 94105\n   United States of America\n   Email: shuque@gmail.com\n\
    \   Pallavi Aras\n   Salesforce\n   415 Mission Street, 3rd Floor\n   San Francisco,\
    \ CA 94105\n   United States of America\n   Email: paras@salesforce.com\n   John\
    \ Dickinson\n   Sinodun IT\n   Magdalen Centre\n   Oxford Science Park\n   Oxford\n\
    \   OX4 4GA\n   United Kingdom\n   Email: jad@sinodun.com\n   Jan Vcelak\n   NS1\n\
    \   55 Broad Street, 19th Floor\n   New York, NY 10004\n   United States of America\n\
    \   Email: jvcelak@ns1.com\n   David Blacka\n   Verisign\n   12061 Bluemont Way\n\
    \   Reston, VA 20190\n"
