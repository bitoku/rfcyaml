- title: __initial_text__
  contents:
  - "        A MORE FAULT TOLERANT APPROACH TO ADDRESS RESOLUTION FOR\n          \
    \          A MULTI-LAN SYSTEM OF ETHERNETS\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This memo discusses an extension to a Bridge Protocol\
    \ to detect and\n   disclose changes in neighbouring host address parameters in\
    \ a Multi-\n   LAN system of Ethernets.  The problem is one which is appearing\
    \ more\n   and more regularly as the interconnected systems grow larger on\n \
    \  Campuses and in Commercial Institutions.  This RFC suggests a\n   protocol\
    \ enhancement for the Internet community, and requests\n   discussion and suggestions\
    \ for improvements.  Distribution of this\n   memo is unlimited.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   Executing a protocol P, a sending host S decides, through P's routing\n\
    \   mechanism, that it wants to transmit to a target host T located\n   somewhere\
    \ on a connected piece of 10Mbit Ethernet cable which\n   conforms to IEEE 802.3.\
    \  To actually transmit the Ethernet packet, a\n   48 bit Ethernet/hardware address\
    \ must be generated.  The addresses\n   assigned to hosts within protocol P are\
    \ not always compatible with\n   the corresponding Ethernet address (being different\
    \ address space\n   byte orderings or values).  A protocol is presented which\
    \ allows\n   dynamic distribution of the information required to build tables\
    \ that\n   translate a host's address in protocol P's address space into a 48\n\
    \   bit Ethernet address.  An extension is incorporated to allow such a\n   protocol\
    \ to be flexible enough to exist in a Transparent Bridge, or\n   generic Host.\
    \  The capability of the Bridge to detect host reboot\n   conditions in a multi-LAN\
    \ environment is also discussed, emphasising\n   particularly the effect on channel\
    \ bandwidth.  To illustrate the\n   operation of the protocol mechanisms, the\
    \ Internet Protocol (IP) is\n   used as a benchmark [6], [8].  Part 1 presents\
    \ an introduction to\n   Address Resolution, whilst Part 2 discusses a reboot\
    \ detection\n   process.\n"
- title: 'DEFINITIONS:'
  contents:
  - "DEFINITIONS:\n      CATENET: a group of IP networks linked together\n      IP\
    \     : Internet Protocol\n                                 PART 1\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   In the Ethernet, while all packets are broadcast, the hardware\n\
    \   interface selects only those with either the explicit hardware\n   broadcast\
    \ address or the individual hardware address of this\n   interface.  Packets which\
    \ do not have one of these two addresses are\n   rejected by the interface and\
    \ do not get passed to the host software.\n   This saves a great deal of otherwise\
    \ wasted effort by the host\n   software having to examine packets and reject\
    \ them.  If the interface\n   hardware selected packets to pass to the host software\
    \ by means of\n   the protocol address, there would be no need for any translation\
    \ from\n   protocol to Ethernet address.  Although it is very important to\n \
    \  minimize the number of packets which each host must examine, so\n   reducing\
    \ especially needless inspections, use of the hardware\n   broadcast address should\
    \ be confined to those situations where it is\n   uniquely beneficial.  Perhaps\
    \ if one were designing a new local\n   network one could eliminate the need for\
    \ an address translation, but\n   in the real world of existing networks it fills\
    \ a very important\n   purpose.  A rare use of the broadcast hardware address,\
    \ which avoids\n   putting any processing load on the other hosts of the Ethernet,\
    \ is\n   where hosts obtain the information they need to use the specific and\n\
    \   individual hardware addresses to exchange most of their packets.\n"
- title: REASONING BEHIND ADDRESS RESOLUTION
  contents:
  - "REASONING BEHIND ADDRESS RESOLUTION\n   The process of converting from the logical\
    \ host address to the\n   physical Ethernet address has been termed ADDRESS RESOLUTION,\
    \ and has\n   prompted research into a method which can be easily interfaced,\n\
    \   whilst at the same time remaining portable.\n   The Ethernet requires 48 bit\
    \ addresses on the physical cable [11] due\n   to the fact that the manufacturers\
    \ of the LAN interface controllers\n   assign a unique 48 bit address during production.\
    \  Of course, Network\n   Managers do not want to be bothered using this address\
    \ to identify\n   the destination at the higher-level.  Rather, they would prefer\
    \ to\n   assign their logical names to the hosts within their supervision, and\n\
    \   allow some lower level protocol to perform a resolving operation.\n   Most\
    \ of these logical protocol addresses are not 48 bits long, nor do\n   they necessarily\
    \ have any relationship to the 48 bit address space.\n   For example, IP addresses\
    \ have a 32 bit address space [6], thus\n   giving rise to the need to distribute\
    \ dynamically the correspondences\n   between a <PROTOCOLTYPE,PROTOCOL-ADDRESS>\
    \ pair, and a 48 bit Ethernet\n   address.\n"
- title: EXAMPLE ARP OPERATION
  contents:
  - "EXAMPLE ARP OPERATION\n   Here is a review of the operation of ARP as defined\
    \ in RFC-826 [5].\n   Let hosts X and Y exist on the same Ethernet cable.  They\
    \ have\n   physical Ethernet addresses EA(X), and EA(Y), and DoD Internet\n  \
    \ addresses IPA(X), and IPA(Y).  Let the Ethernet type of Internet be\n   ET(IP).\
    \  Host X begins an application, and sooner or later wishes to\n   communicate\
    \ an Internet packet to host Y.  Host X has knowledge of\n   the Internet address\
    \ of Y, i.e., (IPA(Y)), and informs the lower\n   level that it wishes to talk\
    \ to IPA(Y).  The lower-level subsequently\n   consults the ARP Module (ARM) to\
    \ convert <ET(IP),IPA(Y)> into a 48\n   bit Ethernet address but because X has\
    \ not talked to Y previously, it\n   does not have this information in its Translation\
    \ Cache (TC).  It\n   discards (or queues) the Internet packet, and creates a\
    \ new Address\n   Resolution packet with:\n       PACKET FIELD             VALUE\
    \ ASSIGNED\n        HRDTYP                   ETHERNET\n        PROTYP        \
    \           ET(IP)\n        HRDLEN                   length (EA(X))\n        PROTLEN\
    \                  length (IPA(X))\n        ARPOPC                   REQUEST\n\
    \        SOURCE HWR               EA(X)\n        SOURCE PROT              IPA(X)\n\
    \        TARGET HWR               don't know\n        TARGET PROT            \
    \  IPA(Y)\n   It then broadcasts this packet to all hosts on the connecting cable.\n\
    \   Host Y picks up this packet and determines that it understands the\n   hardware\
    \ type (Ethernet), that it speaks the indicated protocol\n   (Internet), and that\
    \ the packet is for it, that is, TARGET PROTOCOL\n   ADDRESS = IPA(Y).  Replacing\
    \ any previous entry, it enters the\n   information that <ET(IP),IPA(X) translates\
    \ to EA(X).  It then learns\n   that this is an ARREQ packet, so it swaps fields,\
    \ placing EA(Y) in\n   the new sender Ethernet address field SOURCE HARDWARE ADDRESS,\
    \ EA(X)\n   as TARGET HARDWARE ADDRESS, IPA(X) as TARGET PROTOCOL ADDRESS, IPA(Y)\n\
    \   as SOURCE PROTOCOL ADDRESS, and sets the opcode to REPLY.  The packet\n  \
    \ is then sent with direct routing address information to EA(X).  Thus,\n   Y\
    \ now knows how to send to X, but X still doesn't know EA(Y).\n   When X receives\
    \ the ARREP packet from Y, it gets the address\n   information into its translation\
    \ cache ET(IP),IPA(Y)>-->EA(Y),\n   notices that it is a REPLY, and discards the\
    \ packet (i.e., disposes\n   of the dynamic packet buffer).  However, if the original\
    \ Internet\n   Module packet had been queued, it could have been accessed and\
    \ given\n   the full addressing information from the translation cache.\n   Alternatively,\
    \ had it been discarded, the higher level would have\n   succeeded on a subsequent\
    \ attempt, and the Internet packet would be\n   transmitted immediately.\n"
- title: OBTAINING GREATER NETWORKING RANGE
  contents:
  - "OBTAINING GREATER NETWORKING RANGE\n   There are many benefits to be gained in\
    \ dividing a large multiuser\n   network into smaller, more manageable networks.\
    \  These include : Data\n   Security; Overall Network Reliability; Performance\
    \ Enhancement; not\n   to mention the most obvious: Greater Networking Range.\
    \  In some\n   network technologies, cable length may be stipulated not to exceed\
    \ a\n   certain range due to electrical limitations.  By installing a Bridge,\n\
    \   this restriction is effectively eliminated.  An important\n   consideration\
    \ is the effect the induced Bridge delays will have on\n   the protocol timeouts\
    \ in operation on each LAN/Subnet.  Careful\n   analysis of upper bounds on timeouts\
    \ would have to be made in order\n   to gain full benefit from the increased range.\
    \  In the case of\n   Ethernet the following system parameters exist [11], [12]:\n\
    \        - the bus bandwidth is 10Mbit/s\n        - the maximum node-to-node cable\
    \ length is 1500 m\n        - the maximum point-to-point link cable length is\
    \ 1000 m\n        - the maximum number of repeaters between two nodes is two\n\
    \        - the worst case end-to-end bus propagation delay is 22.5 us\n      \
    \  - the jam time after collision is 32bit\n        - the minimum interframe time\
    \ is 9.6 us\n        - the slot size is 512 bit = 51.2 us\n   Once a decision\
    \ has being taken to subnet, the resulting subLANs may\n   be connected by including\
    \ a Bridge to link them together and\n   providing a protocol which makes the\
    \ collection of subnets appear as\n   a single network.  The basic idea of the\
    \ Bridge providing 'repeater'\n   facilities would not suffice in this application.\
    \  Moreover, the\n   Bridge would have to have further 'intelligence' to enable\
    \ it to\n   select those packets which are destined for remote networks based\
    \ on\n   the protocol address of the target host.  Thereby preventing it from\n\
    \   forwarding packets needlessly that will not be accepted.  If this\n   procedure\
    \ was not adhered to, the channel bandwidth on the remote\n   networks would be\
    \ inundated with packets, causing local valid traffic\n   to backoff and the efficiency\
    \ of the respective networks to rapidly\n   decrease.\n   One problem fundamental\
    \ to the operation of the Bridge is how it\n   discovers on which LAN a particular\
    \ host is interfaced.  If there are\n   only two LANs in the system, each will\
    \ have a dedicated cache at the\n   Bridge, and when a packet is received at the\
    \ particular interface,\n   the source host's address parameters are entered in\
    \ the respective\n   LAN cache.  However, when we consider a Multi-LAN environment,\
    \ the\n   procedure becomes more complicated.\n   ___\n    |\n    |-----h3\n \
    \   |                                            E4\n    |-----hq            \
    \                |-----------------------|\n    |                _           \
    \                  |        |\n    |-----hx        | | B1                    \
    \     |        |\n    |---------------| |                            |       \
    \ |\n    |-----h1        |_|                            |        |\n    |    \
    \            |     h19                     |        |      ______\n    |     \
    \           |    |                       | |        -----|______|  B4\n    | \
    \               |    |                       | | B3              |\n    |-----he\
    \       |-------------------| E2       |_|                 |\n    |          \
    \          |                         |                  |\n    |-----h5      \
    \       |                         |                  |\n    |                \
    \    |                         |                  |\n    |                   ---\
    \                ---     |                  |\n   ---                  | |   \
    \              |-------                  |\n   E1                   | | B2   \
    \           |                         |\n                        | |-----------------|\
    \                         |\n                        ---                 |   \
    \                      |\n                                            |      \
    \    |---------------------\n                                           ---  \
    \                            |\n                                            E3\
    \                              |\n                                           \
    \                                 |\n                      FIGURE 1.  A MULTI-LAN\
    \ TOPOLOGY\n   In the normal set-up, whenever B3 or B4 would receive a packet\
    \ on E4,\n   they would both update the caches on their E4 interface.  In\n  \
    \ addition, a method must be provided to permit B4 to distinguish\n   between\
    \ packets arriving on E4 from E1, E2, E3, and those which\n   actually originated\
    \ on E4.\n   This is so that packets can be categorized as being of remote or\n\
    \   local source and processed accordingly.  The most obvious solution is\n  \
    \ for each Bridge to act as an AGENT and plug in its address as the\n   source\
    \ of any packets it cascades to a remote network, instead of the\n   packet being\
    \ cascaded with its original source address.  At Bridge\n   boot, it may issue\
    \ a broadcast request for all locally connected\n   hosts/devices to return their\
    \ local network protocol addresses.  On\n   subsequent receipt of this information,\
    \ the Bridge could then update\n   the cache for each of its interfaces so that\
    \ it would now have a base\n   from which to perform future operations.\n   The\
    \ alternative to this automatic procedure is to permit manual\n   intervention\
    \ in the Bridge software which could be activated by the\n   network manager in\
    \ order to key in the addresses of the hosts\n   connected to each LAN interface.\n\
    \   Thus, having provided a means for the Bridge to obtain the original\n   state\
    \ of the LAN addresses when it boots, how then does the Bridge\n   distinguish\
    \ the arrival of a new host on the locally connected system\n   from transmissions\
    \ which were sent from a remote source and cascaded\n   by an adjacent Bridge?\
    \  Two approaches are currently under\n   consideration to solve this problem,\
    \ namely Explicit Subnets, and\n   Transparent Subnets [4], [7], [9], [14].\n\
    \   In the Explicit Subnet approach, the location of the host in the\n   system\
    \ is important.  The address of the host in the protocol suite\n   will reflect\
    \ which subnet the host is interfaced to.  Consequently\n   the protocol address\
    \ space is divided into a three level hierarchy of\n   <network,subnet,host>.\
    \  Within the Internet there are five addressing\n   divisions in operation [10],\
    \ classes A, B, C, D, and E.  Classes D\n   and E relate to an addressing technique\
    \ that will be used for\n   management of multi-casting groups and will not be\
    \ discussed here.\n   With such a structure, it is possible to provide an address\
    \ mask at\n   each interface so that received packets may have their source address\n\
    \   fields examined and compared with the address mask of this LAN.  In\n   so\
    \ doing, the component which is being verified is actually the\n   subnet address.\
    \  If the masking operation is successful the source\n   must exist on this LAN,\
    \ otherwise it must be remote.\n   With the Transparent scheme, the first time\
    \ a newly booted host\n   'speaks' it will be looking for addressing information\
    \ (probably\n   using BOOTSTRAP [1], RARP [2] or ARP [5]).  Accordingly, the Bridge\n\
    \   will detect these respective requests and be in a position to perform\n  \
    \ operations on the address parameters.  The current approach in\n   Transparent\
    \ Subnetting is that before any such requests can be\n   cascaded by the Bridge\
    \ to an adjacent LAN, that Bridge will place its\n   interface address parameters\
    \ into the source address fields, thus\n   acting as the AGENT.  Therefore, this\
    \ Bridge will 'see' either\n   packets arriving from the remote Bridge address,\
    \ or local packets.\n   By virtue of the RARP/ARP operation, which hosts perform\
    \ when they\n   first come up, any hi-level packets received on to the network\
    \ not\n   having the bridge address, and not having a mapping in the cache for\n\
    \   that LAN, can be considered as being remote.\n   Currently, there is a move\
    \ toward the Transparent subnet proposal\n   originally described by Postel [7].\
    \  This has been due mainly to\n   practical problems of incompatible implementations\
    \ from different\n   vendors, and the restrictions that the Explicit address space\
    \ place\n   on the adaptability of the system to change (class C addresses are\n\
    \   not flexible enough for the Explicit scheme).  It is also the opinion\n  \
    \ of the Author of this paper that the Agent technique adopted by the\n   Bridges\
    \ could have shortcomings in a dynamic environment which would\n   be detrimental\
    \ to its operation; for example, where the bridges\n   themselves relocate or\
    \ crash, or in the management of the \"Agent For\n   Who\" cache at the bridge.\
    \  Insofar as Loop Resolution and\n   SelfStabilization after failure are Bridge\
    \ problems that need to be\n   addressed, it is strongly felt their satisfactory\
    \ solution will be\n   supported by elimination of the Agent technique [13].\n"
- title: BRIDGE OPERATIONS
  contents:
  - "BRIDGE OPERATIONS\n   Referring to figure 1, assume that at some stage during\
    \ its\n   processing [E1H3] wishes to communicate with [E2H19].  [E1H3] obtains\n\
    \   knowledge of the Internet address of [E2H19] from its translation\n   cache,\
    \ but will not require the knowledge that [E2H19] exists on a\n   completely different\
    \ subnet.  [E1H3] calls its Internet Module to\n   transmit the packet.  As detailed,\
    \ the usual procedure of passing\n   control to its ARM is performed in an attempt\
    \ to obtain a\n   translation.  If we assume that [E1H3], and [E2H19] have not\
    \ talked\n   before, the ARM in [E1H3] will not be able to resolve the addresses\n\
    \   on the first attempt.\n   In such a case, an ARREQ packet is assembled and\
    \ broadcast to all\n   hosts on the network [E1].  The packet traverses the cable\
    \ and is\n   eventually picked up by the (B1) Bridge Address Resolution Module\n\
    \   (BARM), whereupon it determines whether or not it should intervene in\n  \
    \ the request.  If the target is determined as remote (i.e., having no\n   match\
    \ in the local cache), the BARM examines its Global Translation\n   Cache (GTC)\
    \ to determine if it has an entry for <protocol,[E2H19]>.\n   Should a mapping\
    \ be obtained at the Bridge, there is no need for the\n   broadcast REQUEST packet\
    \ to be cascaded on to the remote network\n   [E2].  It is therefore assumed that\
    \ the entries in the GTC reflect\n   the most current addressing information.\
    \  A match thus obtained, the\n   original ARREQ packet buffer is adapted as required\
    \ and returned\n   directly to [E1H3] via the Bridges hardware interface IFE1.\n\
    \   On the other hand, should the Bridges' GTC have no information on\n   [E2H19],\
    \ the BARM would have to perform the following steps:\n      1.  drop the current\
    \ ARREQ from [E1H3],\n      2.  create its own ARREQ using the Bridge source addresses\n\
    \          and copy the target_internet_addr from the original\n          [E1H3]\
    \ ARREQ packet,\n      3.  broadcast the ARREQ on network E2 via network interface\n\
    \          IFE2, and go into a timeout awaiting a REPLY.\n   Should this timeout\
    \ period expire, a number of retries will be\n   permitted under control of the\
    \ BARM.  Alternatively, if a REPLY is\n   received within the timeout interval,\
    \ then the BARM will update its\n   GTC.  The ARM of [E1H3] next will attempt\
    \ to transmit another ARREQ,\n   but this time a mapping will be obtained at the\
    \ BARM'S GTC, and the\n   appropriate REPLY will be returned.\n   Part 1 has described\
    \ the state of the art of the behaviour of Address\n   Resolution.  Part 2 now\
    \ extends the study to the more serious problem\n   of rebooting hosts in a multi-LAN\
    \ system of Ethernets, and the\n   effects such changes have on the integrity\
    \ of state information held\n   in ARP caches and routing tables.\n          \
    \                       PART 2\n"
- title: THE CAPTURE OF REBOOTS
  contents:
  - "THE CAPTURE OF REBOOTS\n   Because Address Resolution packets are broadcast,\
    \ all hosts on the\n   connecting cable including the Transparent Bridge will\
    \ pick them up\n   and determine what they are.  Referring to figure 1, it may\
    \ well be\n   the case that a host on E1 wishes to communicate with a fellow host\n\
    \   on the same physical ether.  Hence, if Hx wishes to talk to Hw on the\n  \
    \ same ether, but has not done so previously, it will broadcast an\n   Address\
    \ Resolution packet in the normal fashion.  The Bridge will\n   also 'see' the\
    \ packet as it passes by, and will act as described\n   above, unless that is,\
    \ there is some method of preventing it doing\n   so; there is no point in the\
    \ Bridge invoking its ARM, and wasting\n   processing time if the problem is going\
    \ to be resolved locally.\n   It may occur however, that H1 wants to communicate\
    \ with H5.  If\n   however, H5 has not talked with anyone before (i.e., it has\
    \ been\n   \"dormant\"), H1 will issue an ARREQ.  The Bridge will not know that\
    \ H5\n   is local because it won't have been entered in the local address\n  \
    \ cache from previous conversations.  To avoid broadcasting an ARREQ to\n   all\
    \ networks/subnets, one way around this problem is to set up the\n   contents\
    \ of the local cache at Bridge startup time.  Therefore, the\n   Bridge will already\
    \ know not to intervene.  Thus, if the Bridge (with\n   2 nets) finds that a particular\
    \ IP destination address is not in the\n   local cache of interface 1, it would\
    \ have to examine its GTC and scan\n   it for a mapping.  Should no mapping be\
    \ obtained at interface 2, one\n   of two possibilities exist:\n        1. the\
    \ target host doesn't exist locally\n        2. the caches are corrupt (the eventuality\
    \ of this should\n           be negligible!)\n   If it is assumed that each of\
    \ the translation caches contains have\n   the most recent addressing information\
    \ regarding its own domain of\n   the network then, in this example, if the Bridge\
    \ does not get a\n   mapping at the GTC it would appear that the host must exist\
    \ remotely\n   from E1, and E2.\n   Such a conclusion would ignore cases in which\
    \ a host unplugs from a\n   particular hardware interface and plugs into another\
    \ hardware\n   interface, or where logical names are reassigned to different\n\
    \   interfaces due to host user change.  Either of these events could\n   happen\
    \ had the host being accessed on E2, which would mean that a\n   REBOOT has taken\
    \ place.\n   Anticipating these possiblities local caches are essential.  In\n\
    \   normal operation, the Bridge will process and forward IP packets\n   received\
    \ from one network, and destined for another.  If the Bridge\n   picks up an ARREQ,\
    \ it will first look for a mapping in its GTC before\n   discarding the original\
    \ ARREQ, and transmitting its own to the remote\n   network.  In any case, the\
    \ Bridge will always examine the local cache\n   entries at the receiving interface,\
    \ so that it may determine if the\n   target address is local or remote.  When\
    \ the Bridge first scans the\n   local cache, it does so with the source IP address\
    \ as the key.  If no\n   mapping is retrieved, it then scans the GTC with the\
    \ same key.\n   Should a mapping now be obtained, it remains for the Bridge to\
    \ insert\n   the source IP into the local cache, where it has either been\n  \
    \ previously deleted or corrupted.\n   However, if the source IP exists in the\
    \ respective local cache, the\n   validity of the source Ethernet address should\
    \ also be verified by\n   examining the respective entry in the GTC.  A scan of\
    \ the GTC is then\n   performed with <protocol,source_prot_addr> as the key. \
    \ If a mapping\n   is retrieved, the respective <et_addr> should be checked against\
    \ the\n   source Ethernet address in the packet header.  If the addresses do\n\
    \   not match, then we have uncovered a Hardware Reboot condition (i.e.,\n   a\
    \ change in Ethernet ID).  On the other hand, should the scan of the\n   GTC with\
    \ <protocol,source_prot_addr> fail to obtain a mapping, then\n   the Bridge would\
    \ scan the GTC with the current Ethernet address in\n   the packet header.  If\
    \ this obtains a mapping, then a Protocol Reboot\n   condition (i.e., change in\
    \ logical ID) has been detected.\n   In the next section, the implications of\
    \ these forms of 'Reboot' are\n   discussed.\n"
- title: REBOOT SCENARIO
  contents:
  - "REBOOT SCENARIO\n   In normal operation, packets will uneventfully traverse each\
    \ subnet\n   either as complete Internet packets, broadcast ARREQ's, or direct\n\
    \   ARREP's.  The Bridge attached to each subnet will 'hear', and 'see'\n   all\
    \ packets as they travel past its connected interfaces.  Because of\n   the existence\
    \ of the local caches at each interface, the Bridge can\n   decide whether or\
    \ not to intervene.  In general circumstances, each\n   host on the Catenet will\
    \ have a translation cache containing\n   <protocol,source_prot_addr,source_et_addr>\
    \ entries for all packets it\n   has observed.  Most of these entries will have\
    \ been due to processing\n   ARREQ packets, which were broadcast, and by receiving\
    \ REPLY packets.\n   In accordance with the foregoing , the Bridge will have a\
    \ cache\n   attached to each subnet interface containing entries for protocol\n\
    \   addresses.\n   Within the Bridge's Global Translation Cache (GTC) will be\
    \ entries of\n   all <protocol,source_prot_addr,source_hrd_addr> triplets relating\
    \ to\n   valid hosts which have been recognised.  If we assume that we have\n\
    \   just connected up a Catenet such as that illustrated in figure 1,\n   then\
    \ at power-up no stations will have knowledge about their\n   neighbours.  If\
    \ the Bridges are to remain transparent, the\n   translation caches at each host\
    \ will be totally empty.  The only\n   addressing details that will be in existence\
    \ will be the protocol\n   addresses stored in the local caches of the Bridges.\n\
    \   The hosts subsequently begin to run applications and will want to\n   communicate\
    \ with one another.  The first ARREQ is broadcast on the\n   respective subnet\
    \ and all hosts, including the Bridge's interface to\n   the subnet, will pick\
    \ it up and store the details.  If, for example,\n   Hx issues an ARREQ for Hq,\
    \ the Bridge will not intervene since there\n   is no need (providing no reboot\
    \ has occurred at Hq).  However, if Hx\n   wishes to talk with Hz, B1 will determine\
    \ that the target IP in the\n   respective ARREQ does not exist in the local cache\
    \ of IFE1, so it\n   will examine the GTC, with the <protocol,target_prot_addr>\
    \ of Hw as\n   the key.\n   It is assumed that there will be a timeout mechanism\
    \ in operation at\n   the source of any packet.  In addition, the Bridge may also\
    \ place the\n   target address in a 'search list' of currently sought hosts, so\
    \ as to\n   prevent ARREQs from different sources being cascaded for the same\n\
    \   target.  Under these conditions, Hx may re-issue its original ARREQ,\n   but\
    \ will be ignored until the host Hw has replied to the ARREQ\n   transmitted by\
    \ the Bridge.\n"
- title: NORMAL RUNNING STATE
  contents:
  - "NORMAL RUNNING STATE\n   Assuming that a few ARP's have been issued, IP packets\
    \ will start\n   traversing the Catenet with full addressing information.  Again,\
    \ the\n   Bridges will 'see' all the packets.  If we extend the situation one\n\
    \   step further, and assume that several conversations have taken place\n   across\
    \ the Catenet, there will be entries in the translation caches\n   of the hosts\
    \ concerned, regarding the\n   <protocol,target_prot_addr,target_hrd_addr> triplets\
    \ of those hosts\n   with which the conversations took place.  The Bridges also,\
    \ will have\n   details in their GTC's for packets which they cascaded.\n   If\
    \ a host is relocated, any connections initiated by that host will\n   still work,\
    \ provided that its own translation cache is cleared when\n   it does physically\
    \ move.  However, any connections subsequently\n   initiated to it by other hosts\
    \ on the Catenet will have no particular\n   reason to know to discard their old\
    \ translation for that host.\n   Ideally, 48 bit Ethernet addresses will be unique\
    \ and fixed for all\n   time.\n"
- title: RECOGNITION OF THESE REBOOT CONDITIONS
  contents:
  - "RECOGNITION OF THESE REBOOT CONDITIONS\n   With reference to figure 1, assume\
    \ that for some reason a fault\n   occurs on the hardware interface of <E1He>.\
    \  The result of this is\n   that a new interface is installed with a newly acquired\
    \ hardware\n   address.  When <E1He> is powered up, the previous contents of its\n\
    \   translation cache are cleared and it has no recollection of local, or\n  \
    \ remote host addresses.  Accordingly, <E1He> begins to issue ARREQ's\n   to hosts\
    \ it requires.  Whenever <E1He> transmits its first ARREQ, it\n   could be termed\
    \ a 'HELLO PACKET', since everyone on the subnet can\n   pick up the packet, and\
    \ store the relevant information in their\n   translation caches.  Within hosts,\
    \ a mapping will be found on the old\n   <protocol,source_prot_addr> pair, and\
    \ the current <et_addr> of the\n   packet header will replace whatever is entered\
    \ in the translation\n   cache.\n   At this point it would be easy for each host\
    \ with an entry to\n   recognise the Hardware Reboot situation and inform the\
    \ subnet with a\n   respective broadcast reboot packet.  But allowing such a procedure\n\
    \   would be extremly inefficient on the broadcast medium, and would\n   drastically\
    \ outweigh any improvements in performance which might be\n   obtained in the\
    \ long term.  In any case, given the fact that the\n   ARREQ is broadcast, all\
    \ stations on the subnet will recognise the\n   reboot.  The important point to\
    \ consider is the effect such a reboot\n   will have on subsequent conversations\
    \ which are initiated remotely.\n   Can redundant transmissions be thwarted before\
    \ they tie up processing\n   time on hosts en-route to the rebooted target?  How\
    \ these\n   difficulties are resolved is critical to the level of performance\n\
    \   obtained in a Catenet configuration.  Since it is not optimal for\n   hosts\
    \ to inform the system of a reboot, it is left to the Bridge.\n   Whenever the\
    \ Bridge receives a packet, be it IP, or ARP, it examines\n   the source address\
    \ parameters in the packet header, in the hope of\n   detecting any incompatibilities\
    \ between them and the entries in its\n   caches.  There are three distinct possibilities,\
    \ namely, a difference\n   in the 48 bit hardware address only, a difference in\
    \ the protocol\n   address, and two completely new addresses.  If an incompatibility\
    \ is\n   discovered, a \"REBOOT\" packet is constructed and issued on all remote\n\
    \   interfaces containing the appropiate information, allowing Bridges to\n  \
    \ update their GTC's and generic hosts their ARP caches.\n   The structure of\
    \ the Reboot packet is as depicted in figure 2.\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | P A C K E T     O P C O D E   |REB OPC|      S O U R C E      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        H A R D W A R E            A D D R E S S               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       S O U R C E   P R O T O C O L     A D D R E S S         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     M U L T I C A S T   T A R G E T    H A R D W A R E        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    A D D R E S S      |   M U L T I C A S T     T A R G E T   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   P R O T O C O L     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+\n          --------->\
    \ NEXT FOLLOWS A VARIANT FIELD ON REBOOT  OPCODE\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  O L D         S O U R C E        H A R D W A R E             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  A D D R E S S        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+\n    OR\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  O L D     S O U R C E    P R O T O C O L      A D D R E S S  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                          FIGURE 2. REBOOT PACKET\n   The following definitions\
    \ apply:\n        PACKET FIELD              VALUE\n        OPCODE            \
    \        REBOOT\n        REBOOT OPCODE             HARDWARE\n        REBOOT OPCODE\
    \             PROTOCOL\n   The format is then as follows:\n        48 bit broadcast\
    \ Ethernet address for the destination,\n        48 bit Ethernet address of source\
    \ Bridge,\n        16 bit Protocol type = PACKET OPCODE - REBOOT.\n   For completeness\
    \ and error checking it may be an advantage to have a\n   field which specifies\
    \ the length of addresses in the Ethernet and\n   protocol address spaces.  Thus,\
    \ the Reboot packet structure contains\n   the following:\n   FIELD          FIELD\
    \ SIZE                    DESCRIPTION\n   HRDLEN          4 bit             byte\
    \ length of Ethernet address\n   PROTLEN         4 bit             byte length\
    \ of Protocol address\n   SOURCE\n   PROTOCOL\n   ADDRESS        32 bit      \
    \      current protocol address of host\n   TARGET\n   PROTOCOL\n   ADDRESS  \
    \      32 bit           broadcast target protocol address\n   REBOOT\n   OPCODE\
    \          4 bit            will be either PROTOCOL or HARDWARE\n   if   PROTOCOL\
    \       32 bit         old protocol address\n   else HARDWARE       48 bit   \
    \      old hardware  address\n   As shown, depending on the REBOOT-OPCODE, the\
    \ structure will continue\n   with either the 48 bit old hardware address or the\
    \ 32 bit old\n   protocol address.  The choice of a variant packet structure is\
    \ for\n   reasons of curtailing the size of the packet to the fields that are\n\
    \   truely necessary in each situation.  From this Reboot packet\n   structure,\
    \ the process of generating such a packet can be considered.\n   When the Bridge\
    \ algorithm detects a reboot, it should create a reboot\n   packet structure containing\
    \ the relevant addressing information and\n   subsequently multicast it on the\
    \ interface(s) which access(es) the\n   remote subnet(s).  The decision as to\
    \ which interface(s) is/are\n   local, and which is/are remote, can be resolved\
    \ automatically\n   whenever a packet is received.  With respect to this packet\
    \ transfer\n   the receive interface at the Bridge becomes local, and all others\
    \ are\n   tagged as remote.\n   Thus, hosts on the subnet remote from the reboot\
    \ are informed of the\n   situation immediately as it is detected by the Bridge.\
    \  In the\n   Catenet configuration illustrated in fig 1, this will have the effect\n\
    \   of updating the Translation Cache within each host, whenever it\n   receives\
    \ the packet.  If for example, <E4Hw> reboots under hardware,\n   B3 will detect\
    \ this occurance.  There is no reason for the subnets\n   E1, E2, E3 to be aware\
    \ of this episode.  In normal operation, B3 will\n   recognise the reboot from\
    \ the first ARREQ issued from <E4Hw>.  With\n   this reboot detection facility,\
    \ B3 will be in a position to inform\n   the hosts on E1, E2, and E3.  B3 can\
    \ then create and issue the Reboot\n   packet via its interface with E3.  When\
    \ B3 picks it up, it will\n   update its own caches and subsequently cascade the\
    \ packet onto E2,\n   where it will be passed on to E1 via B1.\n"
- title: ARGUMENTS FOR REBOOT PACKETS
  contents:
  - "ARGUMENTS FOR REBOOT PACKETS\n   It is envisaged that introducing Reboot packets,\
    \ will serve to\n   enhance the bandwidth achievable within a Catenet system.\
    \  Problems\n   of addressing 'dead' hosts will no longer exist in a correctly\n\
    \   functioning configuration.  Translation Caches will have on hand the\n   most\
    \ recent addressing information available, which should also serve\n   to enhance\
    \ the performance of the routing strategy in operation.\n   Multiple, redundant\
    \ processing of packets destined for 'dead' hosts\n   will be avoided.  Weighing\
    \ this against the processing involved with\n   a single multicast of Reboot packets,\
    \ it is expected that the latter\n   will be is the most economically viable in\
    \ relation to the long-term\n   traffic presented to the system.\n"
- title: CONCLUSION
  contents:
  - "CONCLUSION\n   It appears that reboots are becoming increasingly common on internet\n\
    \   networks.  Many sites use Personal Computers (PC) as terminals and\n   the\
    \ typical way to finish a session is to switch them off!  With the\n   increasing\
    \ popularity of multitasking Operating Systems on these\n   types of machines,\
    \ problems are more likely to occur, particularly\n   when the PCs are diskless,\
    \ or participating in a distributed file\n   system of some kind.  Given the importance\
    \ of correct addressing in\n   communications networks running Ethernet, it is\
    \ anticipated the\n   reboot mechanism described will serve to improve the correctness\
    \ and\n   validity of the protocol/network address mappings which may be stored\n\
    \   in the translation caches.  To this degree, simulation is expected to\n  \
    \ show that the volume of invalid traffic will decrease, to the benefit\n   of\
    \ hosts, Bridges and servers alike.  Likewise, ratification of the\n   routing\
    \ policy is anticipated and since redundant/obsolete packets\n   will be thwarted,\
    \ the efficient utilization of available channel\n   bandwidth across the catenet\
    \ is also expected to improve.  Thus,\n   effectively increasing Catenet throughput\
    \ for 'valid' packets, and\n   therefore enhancing the level of service provided\
    \ to the end users.\n   It is obvious that the proposed scheme implies the alteration\
    \ of the\n   packet processing code in Bridges/Gateways.  The point to remember\
    \ is\n   the increased favour with which larger, more complex Multi-LAN\n   systems\
    \ of Ethernets are being received.  The recent adaption of\n   extra telephone\
    \ cables to serve as the transmission media for the\n   Ethernet can only result\
    \ in installation costs being reduced, therein\n   making the Ethernet more attractive\
    \ within large corporate buildings,\n   etc.  It is sensible to suggest that the\
    \ probability of host address\n   re-assignment shall increase in proportion to\
    \ the number of physical\n   systems attached, component failure rate (for whatever\
    \ reason),\n   relocation of resources, and the size and turnover of the workforce\n\
    \   (i.e., people moving from one room to another).  Simulation\n   experiments\
    \ are currently being developed to analyse the resultant\n   traffic patterns\
    \ under this scheme, and it is hoped to highlight\n   thresholds where adoption\
    \ of the scheme becomes a necessity.\n   In addition, the Author is currently\
    \ extending the boundaries of this\n   problem to encompass the reboot, or relocation\
    \ of Bridges themselves.\n   Involved with this are the phenomena of loop resolution,\
    \ load sharing\n   and duplicate packet suppression.  It is envisaged that a Self-\n\
    \   Stabilizationg Bridge Protocol will result that will be more \"light-\n  \
    \ weight\" than those adhering to the Spanning Tree Algorithm.\n   The Author\
    \ would appreciate feedback/comments on this RFC.  My\n   network address is:\
    \ CBAD13%UCVAX.ULSTER.AC.UK@CUNYVM.CUNY.EDU.\n"
- title: ACKNOWLEDGEMENTS
  contents:
  - "ACKNOWLEDGEMENTS\n   The Author acknowledges with gratitute the help and comments\n\
    \   contributed by Mr. Piotr Bielkowitz (Supervisor) of the Computing\n   Science\
    \ Department, and the time devoted my Mr. Raymond Robinson for\n   painstakingly\
    \ preparing the first draft of this paper on 'Pagemaker'.\n   Thanks are due also\
    \ to Dr. M. W. A. Smith of Information Systems for\n   his assistance.  Finally,\
    \ this work was supported under a grant from\n   the Department of Education for\
    \ Northern Ireland of which the Author\n   is extremely grateful.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  Croft, Bill, and John Gilmore, \"Bootstrap Protocol\", RFC-951,\n\
    \        Stanford University, September 1985.\n   [2]  Finlayson, Mann, Mogul,\
    \ and Theimer, \"A Reverse Address\n        Resolution Protocol\", RFC-903, Computer\
    \ Science Dept, Stanford\n        University, June 1984.\n   [3]  Lorimer, Alan,\
    \ and Jim Reid, \"ARP Information Communique\",\n        Computer Science Dept,\
    \ Strathclyde University, 1987.\n   [4]  Mogul, Jeffrey, \"Internet Subnets\"\
    , RFC-917, Computer Science\n        Dept, Stanford University, October 1984.\n\
    \   [5]  Plummer, David, \"An Ethernet Address Resolution Protocol\", RFC-\n \
    \       826, MIT, November 1982.\n   [6]  Postel, Jon, \"DARPA Internet Program\
    \ Protocol Specification\",\n        RFC-791, USC/Information Sciences Institute,\
    \ September 1981.\n   [7]  Postel, Jon, \"Multi-LAN Address Resolution\", RFC-925,\n\
    \        USC/Information Sciences Institute, October 1984.\n   [8]  Postel, Jon,\
    \ Carl Sunshine, and Danny Cohen, \"The ARPA Internet\n        Protocol\", Computer\
    \ Networks, no. 5, pp. 261-271, 1981.\n   [9]  Postel, Jon, and Jeff Mogul, \"\
    Internet Standard Subnetting\n        Procedure\", RFC-950, USC/Information Sciences\
    \ Institute and\n        Stanford University, August 1985.\n   [10] Reynolds,\
    \ Joyce, and Jon Postel, \"Assigned Numbers\", RFC-1010,\n        USC/Information\
    \ Sciences Institute, May 1987.\n   [11] \"The Ethernet: a local area network,\
    \ data link layer and\n        physical layer specification\", Version 1.0 DEC,\
    \ Intel and Xerox\n        Corporations, USA 30 September 1980).\n   [12] Hughes,\
    \ H.D., and L. Li, \"Simulation model of an Ethernet\",\n        Computer Performance,\
    \ Vol 3, no. 4, December 1982.\n   [13] Parr, Gerald P., \"Address Resolution\
    \ For An Intelligent\n        Filtering Bridge Running On A Subnetted Ethernet\
    \ System\", ACM\n        SIGCOMM Computer Communication Review, (July/August 1987),\
    \ vol.\n        17, no. 3.\n   [14] Smoot, Carl-Mitchell, and John S. Quarterman,\
    \ \"Using ARP to\n        Implement Transparent Subnet Gateways\", RFC-1027, Texas\
    \ Internet\n        Consulting, October 1987.\n"
