- title: __initial_text__
  contents:
  - '                    Message Encryption for Web Push

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a message encryption scheme for the Web\
    \ Push\n   protocol.  This scheme provides confidentiality and integrity for\n\
    \   messages sent from an application server to a user agent.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8291.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Notational Conventions .....................................3\n  \
    \ 2. Push Message Encryption Overview ................................3\n    \
    \  2.1. Key and Secret Distribution ................................4\n   3. Push\
    \ Message Encryption .........................................4\n      3.1. Diffie-Hellman\
    \ Key Agreement ...............................5\n      3.2. Push Message Authentication\
    \ ................................5\n      3.3. Combining Shared and Authentication\
    \ Secrets ................5\n      3.4. Encryption Summary .........................................6\n\
    \   4. Restrictions on Use of \"aes128gcm\" Content Coding ...............7\n\
    \   5. Push Message Encryption Example .................................8\n  \
    \ 6. IANA Considerations .............................................8\n   7.\
    \ Security Considerations .........................................8\n   8. References\
    \ .....................................................10\n      8.1. Normative\
    \ References ......................................10\n      8.2. Informative\
    \ References ....................................11\n   Appendix A.  Intermediate\
    \ Values for Encryption ...................12\n   Author's Address ..................................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Web Push protocol [RFC8030] is an intermediated protocol\
    \ by\n   necessity.  Messages from an application server are delivered to a\n\
    \   user agent (UA) via a push service, as shown in Figure 1.\n    +-------+ \
    \          +--------------+       +-------------+\n    |  UA   |           | Push\
    \ Service |       | Application |\n    +-------+           +--------------+  \
    \     +-------------+\n        |                      |                      |\n\
    \        |        Setup         |                      |\n        |<====================>|\
    \                      |\n        |           Provide Subscription           \
    \   |\n        |-------------------------------------------->|\n        |    \
    \                  |                      |\n        :                      :\
    \                      :\n        |                      |     Push Message  \
    \   |\n        |    Push Message      |<---------------------|\n        |<---------------------|\
    \                      |\n        |                      |                   \
    \   |\n                                 Figure 1\n   This document describes how\
    \ messages sent using this protocol can be\n   secured against inspection, modification,\
    \ and forgery by a push\n   service.\n   Web Push messages are the payload of\
    \ an HTTP message [RFC7230].\n   These messages are encrypted using an encrypted\
    \ content encoding\n   [RFC8188].  This document describes how this content encoding\
    \ is\n   applied and describes a recommended key management scheme.\n   Multiple\
    \ users of Web Push at the same user agent often share a\n   central agent that\
    \ aggregates push functionality.  This agent can\n   enforce the use of this encryption\
    \ scheme by applications that use\n   push messaging.  An agent that only delivers\
    \ messages that are\n   properly encrypted strongly encourages the end-to-end\
    \ protection of\n   messages.\n   A web browser that implements the Push API [API]\
    \ can enforce the use\n   of encryption by forwarding only those messages that\
    \ were properly\n   encrypted.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   This document uses the terminology from\
    \ [RFC8030], primarily \"user\n   agent\", \"push service\", and \"application\
    \ server\".\n"
- title: 2.  Push Message Encryption Overview
  contents:
  - "2.  Push Message Encryption Overview\n   Encrypting a push message uses Elliptic\
    \ Curve Diffie-Hellman (ECDH)\n   [ECDH] on the P-256 curve [FIPS186] to establish\
    \ a shared secret (see\n   Section 3.1) and a symmetric secret for authentication\
    \ (see\n   Section 3.2).\n   A user agent generates an ECDH key pair and authentication\
    \ secret\n   that it associates with each subscription it creates.  The ECDH\n\
    \   public key and the authentication secret are sent to the application\n   server\
    \ with other details of the push subscription.\n   When sending a message, an\
    \ application server generates an ECDH key\n   pair and a random salt.  The ECDH\
    \ public key is encoded into the\n   \"keyid\" parameter of the encrypted content\
    \ coding header, and the\n   salt is encoded into the \"salt\" parameter of that\
    \ same header (see\n   Section 2.1 of [RFC8188]).  The ECDH key pair can be discarded\
    \ after\n   encrypting the message.\n   The content of the push message is encrypted\
    \ or decrypted using a\n   content encryption key and nonce.  These values are\
    \ derived by taking\n   the \"keyid\" and \"salt\" as input to the process described\
    \ in\n   Section 3.\n"
- title: 2.1.  Key and Secret Distribution
  contents:
  - "2.1.  Key and Secret Distribution\n   The application using the subscription\
    \ distributes the subscription\n   public key and authentication secret to an\
    \ authorized application\n   server.  This could be sent along with other subscription\
    \ information\n   that is provided by the user agent, such as the push subscription\n\
    \   URI.\n   An application MUST use an authenticated, confidentiality-protected\n\
    \   communications medium for this purpose.  In addition to the reasons\n   described\
    \ in [RFC8030], this use ensures that the authentication\n   secret is not revealed\
    \ to unauthorized entities, which would allow\n   those entities to generate push\
    \ messages that will be accepted by the\n   user agent.\n   Most applications\
    \ that use push messaging have a preexisting\n   relationship with an application\
    \ server that can be used for\n   distribution of subscription data.  An authenticated\
    \ communication\n   mechanism that provides adequate confidentiality and integrity\n\
    \   protection, such as HTTPS [RFC2818], is sufficient.\n"
- title: 3.  Push Message Encryption
  contents:
  - "3.  Push Message Encryption\n   Push message encryption happens in four phases:\n\
    \   o  A shared secret is derived using ECDH [ECDH] (see Section 3.1 of\n    \
    \  this document).\n   o  The shared secret is then combined with the authentication\
    \ secret\n      to produce the input keying material (IKM) used in [RFC8188] (see\n\
    \      Section 3.3 of this document).\n   o  A content encryption key and nonce\
    \ are derived using the process\n      in [RFC8188].\n   o  Encryption or decryption\
    \ follows according to [RFC8188].\n   The key derivation process is summarized\
    \ in Section 3.4.\n   Restrictions on the use of the encrypted content coding\
    \ are described\n   in Section 4.\n"
- title: 3.1.  Diffie-Hellman Key Agreement
  contents:
  - "3.1.  Diffie-Hellman Key Agreement\n   For each new subscription that the user\
    \ agent generates for an\n   application, it also generates a P-256 [FIPS186]\
    \ key pair for use in\n   ECDH [ECDH].\n   When sending a push message, the application\
    \ server also generates a\n   new ECDH key pair on the same P-256 curve.\n   The\
    \ ECDH public key for the application server is included as the\n   \"keyid\"\
    \ parameter in the encrypted content coding header (see\n   Section 2.1 of [RFC8188]).\n\
    \   An application server combines its ECDH private key with the public\n   key\
    \ provided by the user agent using the process described in [ECDH];\n   on receipt\
    \ of the push message, a user agent combines its private key\n   with the public\
    \ key provided by the application server in the \"keyid\"\n   parameter in the\
    \ same way.  These operations produce the same value\n   for the ECDH shared secret.\n"
- title: 3.2.  Push Message Authentication
  contents:
  - "3.2.  Push Message Authentication\n   To ensure that push messages are correctly\
    \ authenticated, a symmetric\n   authentication secret is added to the information\
    \ generated by a user\n   agent.  The authentication secret is mixed into the\
    \ key derivation\n   process described in Section 3.3.\n   A user agent MUST generate\
    \ and provide a hard-to-guess sequence of 16\n   octets that is used for authentication\
    \ of push messages.  This SHOULD\n   be generated by a cryptographically strong\
    \ random number generator\n   [RFC4086].\n"
- title: 3.3.  Combining Shared and Authentication Secrets
  contents:
  - "3.3.  Combining Shared and Authentication Secrets\n   The shared secret produced\
    \ by ECDH is combined with the\n   authentication secret using the HMAC-based\
    \ key derivation function\n   (HKDF) [RFC5869].  This produces the input keying\
    \ material used by\n   [RFC8188].\n   The HKDF function uses the SHA-256 hash\
    \ algorithm [FIPS180-4] with\n   the following inputs:\n   salt: the authentication\
    \ secret\n   IKM:  the shared secret derived using ECDH\n   info: the concatenation\
    \ of the ASCII-encoded string \"WebPush: info\"\n         (this string is not\
    \ NUL-terminated), a zero octet, the user\n         agent ECDH public key, and\
    \ the application server ECDH public\n         key, (both ECDH public keys are\
    \ in the uncompressed point form\n         defined in [X9.62].  That is:\n   key_info\
    \ = \"WebPush: info\" || 0x00 || ua_public || as_public\n   L:    32 octets (i.e.,\
    \ the output is the length of the underlying\n         SHA-256 HMAC function output)\n"
- title: 3.4.  Encryption Summary
  contents:
  - "3.4.  Encryption Summary\n   This results in a final content encryption key and\
    \ nonce generation\n   using the following sequence, which is shown here in pseudocode\
    \ with\n   HKDF expanded into separate discrete steps using HMAC with SHA-256:\n\
    \      -- For a user agent:\n      ecdh_secret = ECDH(ua_private, as_public)\n\
    \      auth_secret = random(16)\n      salt = <from content coding header>\n \
    \     -- For an application server:\n      ecdh_secret = ECDH(as_private, ua_public)\n\
    \      auth_secret = <from user agent>\n      salt = random(16)\n      -- For\
    \ both:\n      ## Use HKDF to combine the ECDH and authentication secrets\n  \
    \    # HKDF-Extract(salt=auth_secret, IKM=ecdh_secret)\n      PRK_key = HMAC-SHA-256(auth_secret,\
    \ ecdh_secret)\n      # HKDF-Expand(PRK_key, key_info, L_key=32)\n      key_info\
    \ = \"WebPush: info\" || 0x00 || ua_public || as_public\n      IKM = HMAC-SHA-256(PRK_key,\
    \ key_info || 0x01)\n      ## HKDF calculations from RFC 8188\n      # HKDF-Extract(salt,\
    \ IKM)\n      PRK = HMAC-SHA-256(salt, IKM)\n      # HKDF-Expand(PRK, cek_info,\
    \ L_cek=16)\n      cek_info = \"Content-Encoding: aes128gcm\" || 0x00\n      CEK\
    \ = HMAC-SHA-256(PRK, cek_info || 0x01)[0..15]\n      # HKDF-Expand(PRK, nonce_info,\
    \ L_nonce=12)\n      nonce_info = \"Content-Encoding: nonce\" || 0x00\n      NONCE\
    \ = HMAC-SHA-256(PRK, nonce_info || 0x01)[0..11]\n   Note that this omits the\
    \ exclusive-OR of the final nonce with the\n   record sequence number, since push\
    \ messages contain only a single\n   record (see Section 4) and the sequence number\
    \ of the first record is\n   zero.\n"
- title: 4.  Restrictions on Use of "aes128gcm" Content Coding
  contents:
  - "4.  Restrictions on Use of \"aes128gcm\" Content Coding\n   An application server\
    \ MUST encrypt a push message with a single\n   record.  This allows for a minimal\
    \ receiver implementation that\n   handles a single record.  An application server\
    \ MUST set the \"rs\"\n   parameter in the \"aes128gcm\" content coding header\
    \ to a size that is\n   greater than the sum of the lengths of the plaintext,\
    \ the padding\n   delimiter (1 octet), any padding, and the authentication tag\
    \ (16\n   octets).\n   A push message MUST include the application server ECDH\
    \ public key in\n   the \"keyid\" parameter of the encrypted content coding header.\
    \  The\n   uncompressed point form defined in [X9.62] (that is, a 65-octet\n \
    \  sequence that starts with a 0x04 octet) forms the entirety of the\n   \"keyid\"\
    .  Note that this means that the \"keyid\" parameter will not be\n   valid UTF-8\
    \ as recommended in [RFC8188].\n   A push service is not required to support more\
    \ than 4096 octets of\n   payload body (see Section 7.2 of [RFC8030]).  Absent\
    \ header (86\n   octets), padding (minimum 1 octet), and expansion for\n   AEAD_AES_128_GCM\
    \ (16 octets), this equates to, at most, 3993 octets\n   of plaintext.\n   An\
    \ application server MUST NOT use other content encodings for push\n   messages.\
    \  In particular, content encodings that compress could\n   result in leaking\
    \ of push message contents.  The Content-Encoding\n   header field therefore has\
    \ exactly one value, which is \"aes128gcm\".\n   Multiple \"aes128gcm\" values\
    \ are not permitted.\n   A user agent is not required to support multiple records.\
    \  A user\n   agent MAY ignore the \"rs\" parameter.  If a record size is unchecked,\n\
    \   decryption will fail with high probability for all valid cases.  The\n   padding\
    \ delimiter octet MUST be checked; values other than 0x02 MUST\n   cause the message\
    \ to be discarded.\n"
- title: 5.  Push Message Encryption Example
  contents:
  - "5.  Push Message Encryption Example\n   The following example shows a push message\
    \ being sent to a push\n   service.\n   POST /push/JzLQ3raZJfFBR0aqvOMsLrt54w4rJUsV\
    \ HTTP/1.1\n   Host: push.example.net\n   TTL: 10\n   Content-Length: 145\n  \
    \ Content-Encoding: aes128gcm\n   DGv6ra1nlYgDCS1FRnbzlwAAEABBBP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27ml\n\
    \   mlMoZIIgDll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A_yl95bQpu6cVPT\n   pK4Mqgkf1CXztLVBSt2Ks3oZwbuwXPXLWyouBWLVWGNWQexSgSxsj_Qulcy4a-fN\n\
    \   This example shows the ASCII-encoded string, \"When I grow up, I want\n  \
    \ to be a watermelon\".  The content body is shown here with line\n   wrapping\
    \ and URL-safe base64url [RFC4648] encoding to meet\n   presentation constraints.\n\
    \   The keys used are shown below using the uncompressed form [X9.62]\n   encoded\
    \ using base64url.\n      Authentication Secret: BTBZMqHH6r4Tts7J_aSIgg\n    \
    \  Receiver:\n         private key: q1dXpw3UpT5VOmu_cf_v6ih07Aems3njxI-JWgLcM94\n\
    \         public key: BCVxsr7N_eNgVRqvHtD0zTZsEc6-VV-JvLexhqUzORcx\n         \
    \            aOzi6-AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4\n      Sender:\n    \
    \     private key: yfWPiYE-n46HLnH0KqZOF1fJJU3MYrct3AELtAQ-oRw\n         public\
    \ key: BP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27mlmlMoZIIg\n                     Dll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A8\n\
    \   Intermediate values for this example are included in Appendix A.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The privacy and security considerations of [RFC8030]\
    \ all apply to the\n   use of this mechanism.\n   The Security Considerations\
    \ section of [RFC8188] describes the\n   limitations of the content encoding.\
    \  In particular, no HTTP header\n   fields are protected by the content encoding\
    \ scheme.  A user agent\n   MUST consider HTTP header fields to have come from\
    \ the push service.\n   Though header fields might be necessary for processing\
    \ an HTTP\n   response correctly, they are not needed for correct operation of\
    \ the\n   protocol.  An application on the user agent that uses information\n\
    \   from header fields to alter their processing of a push message is\n   exposed\
    \ to a risk of attack by the push service.\n   The timing and length of communication\
    \ cannot be hidden from the push\n   service.  While an outside observer might\
    \ see individual messages\n   intermixed with each other, the push service will\
    \ see which\n   application server is talking to which user agent and the\n  \
    \ subscription that is used.  Additionally, the length of messages\n   could be\
    \ revealed unless the padding provided by the content encoding\n   scheme is used\
    \ to obscure length.\n   The user agent and application MUST verify that the public\
    \ key they\n   receive is on the P-256 curve.  Failure to validate a public key\
    \ can\n   allow an attacker to extract a private key.  The appropriate\n   validation\
    \ procedures are defined in Section 4.3.7 of [X9.62] and,\n   alternatively, in\
    \ Section 5.6.2.3 of [KEYAGREEMENT].  This process\n   consists of three steps:\n\
    \   1.  Verify that Y is not the point at infinity (O),\n   2.  Verify that for\
    \ Y = (x, y), both integers are in the correct\n       interval,\n   3.  Ensure\
    \ that (x, y) is a correct solution to the elliptic curve\n       equation.\n\
    \   For these curves, implementers do not need to verify membership in\n   the\
    \ correct subgroup.\n   In the event that this encryption scheme would need to\
    \ be replaced, a\n   new content coding scheme could be defined.  In order to\
    \ manage\n   progressive deployment of the new scheme, the user agent can expose\n\
    \   information on the content coding schemes that it supports.  The\n   \"supportedContentEncodings\"\
    \ parameter of the Push API [API] is an\n   example of how this might be done.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ECDH]     SECG, \"SEC 1: Elliptic Curve Cryptography\"\
    , Version 2.0,\n              May 2009, <http://www.secg.org/>.\n   [FIPS180-4]\n\
    \              National Institute of Standards and Technology (NIST),\n      \
    \        \"Secure Hash Standard (SHS)\", FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015.\n   [FIPS186]  National Institute of Standards and Technology (NIST),\n\
    \              \"Digital Signature Standard (DSS)\", FIPS PUB 186-4,\n       \
    \       DOI 10.6028/NIST.FIPS.186-4, July 2013.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n           \
    \   <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4086]  Eastlake 3rd, D.,\
    \ Schiller, J., and S. Crocker,\n              \"Randomness Requirements for Security\"\
    , BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086, June 2005,\n       \
    \       <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC5869]  Krawczyk, H.\
    \ and P. Eronen, \"HMAC-based Extract-and-Expand\n              Key Derivation\
    \ Function (HKDF)\", RFC 5869,\n              DOI 10.17487/RFC5869, May 2010,\n\
    \              <https://www.rfc-editor.org/info/rfc5869>.\n   [RFC8030]  Thomson,\
    \ M., Damaggio, E., and B. Raymor, Ed., \"Generic\n              Event Delivery\
    \ Using HTTP Push\", RFC 8030,\n              DOI 10.17487/RFC8030, December 2016,\n\
    \              <https://www.rfc-editor.org/info/rfc8030>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8188]  Thomson, M., \"Encrypted Content-Encoding for HTTP\",\n       \
    \       RFC 8188, DOI 10.17487/RFC8188, June 2017,\n              <https://www.rfc-editor.org/info/rfc8188>.\n\
    \   [X9.62]    ANSI, \"Public Key Cryptography for the Financial Services\n  \
    \            Industry: the Elliptic Curve Digital Signature Algorithm\n      \
    \        (ECDSA)\", ANSI X9.62, 2005.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [API]      Beverloo, P., Thomson, M., van Ouwerkerk,\
    \ M., Sullivan,\n              B., and E. Fullea, \"Push API\", October 2017,\n\
    \              <https://www.w3.org/TR/push-api/>.\n   [KEYAGREEMENT]\n       \
    \       Barker, E., Chen, L., Roginsky, A., and M. Smid,\n              \"Recommendation\
    \ for Pair-Wise Key Establishment Schemes\n              Using Discrete Logarithm\
    \ Cryptography\", NIST Special\n              Publication 800-56A, Revision 2,\n\
    \              DOI 10.6028/NIST.SP.800-56Ar2, May 2013.\n   [RFC2818]  Rescorla,\
    \ E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n\
    \              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC4648]  Josefsson,\
    \ S., \"The Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648,\
    \ DOI 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n"
- title: Appendix A.  Intermediate Values for Encryption
  contents:
  - "Appendix A.  Intermediate Values for Encryption\n   The intermediate values calculated\
    \ for the example in Section 5 are\n   shown here.  The base64url values in these\
    \ examples include\n   whitespace that can be removed.\n   The following are inputs\
    \ to the calculation:\n   Plaintext:  V2hlbiBJIGdyb3cgdXAsIEkgd2FudCB0byBiZSBhIHdhdGVybWVsb24\n\
    \   Application server public key (as_public):\n      BP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27mlmlMoZIIg\n\
    \      Dll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A8\n   Application server private\
    \ key (as_private):\n      yfWPiYE-n46HLnH0KqZOF1fJJU3MYrct3AELtAQ-oRw\n   User\
    \ agent public key (ua_public):  BCVxsr7N_eNgVRqvHtD0zTZsEc6-VV-\n      JvLexhqUzORcx\
    \ aOzi6-AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4\n   User agent private key (ua_private):\n\
    \      q1dXpw3UpT5VOmu_cf_v6ih07Aems3njxI-JWgLcM94\n   Salt:  DGv6ra1nlYgDCS1FRnbzlw\n\
    \   Authentication secret (auth_secret):  BTBZMqHH6r4Tts7J_aSIgg\n   Note that\
    \ knowledge of just one of the private keys is necessary.\n   The application\
    \ server randomly generates the salt value, whereas\n   salt is input to the receiver.\n\
    \   This produces the following intermediate values:\n   Shared ECDH secret (ecdh_secret):\n\
    \      kyrL1jIIOHEzg3sM2ZWRHDRB62YACZhhSlknJ672kSs\n   Pseudorandom key (PRK)\
    \ for key combining (PRK_key):\n      Snr3JMxaHVDXHWJn5wdC52WjpCtd2EIEGBykDcZW32k\n\
    \   Info for key combining (key_info):  V2ViUHVzaDogaW5mbwAEJXGyvs3942BVG\n  \
    \    q8e0PTNNmwR zr5VX4m8t7GGpTM5FzFo7OLr4BhZe9MEebhuPI-OztV3\n      ylkYfpJGmQ22ggCLDgT-M_SrDepxkU21WCP3O1SUj0Ew\n\
    \      bZIHMtu5pZpTKGSCIA5Zent7wmC6HCJ5mFgJkuk5cwAv MBKiiujwa7t45ewP\n   Input\
    \ keying material for content encryption key derivation (IKM):\n      S4lYMb_L0FxCeq0WhDx813KgSYqU26kOyzWUdsXYyrg\n\
    \   PRK for content encryption (PRK):\n      09_eUZGrsvxChDCGRCdkLiDXrReGOEVeSCdCcPBSJSc\n\
    \   Info for content encryption key derivation (cek_info):\n      Q29udGVudC1FbmNvZGluZzogYWVzMTI4Z2NtAA\n\
    \   Content encryption key (CEK):  oIhVW04MRdy2XN9CiKLxTg\n   Info for content\
    \ encryption nonce derivation (nonce_info):\n      Q29udGVudC1FbmNvZGluZzogbm9uY2UA\n\
    \   Nonce (NONCE):  4h_95klXJ5E_qnoN\n   The salt, record size of 4096, and application\
    \ server public key\n   produce an 86-octet header of:\n   DGv6ra1nlYgDCS1FRnbzlwAAEABBBP4z\
    \ 9KsN6nGRTbVYI_c7VJSPQTBtkgcy27ml\n   mlMoZIIgDll6e3vCYLocInmYWAmS6Tlz AC8wEqKK6PBru3jl7A8\n\
    \   The push message plaintext has the padding delimiter octet (0x02)\n   appended\
    \ to produce:\n   V2hlbiBJIGdyb3cgdXAsIEkgd2FudCB0 byBiZSBhIHdhdGVybWVsb24C\n\
    \   The plaintext is then encrypted with AES-GCM, which emits ciphertext\n   of:\n\
    \   8pfeW0KbunFT06SuDKoJH9Ql87S1QUrd irN6GcG7sFz1y1sqLgVi1VhjVkHsUoEs\n   bI_0LpXMuGvnzQ\n\
    \   The header and ciphertext are concatenated and produce the result\n   shown\
    \ in Section 5.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Martin Thomson\n   Mozilla\n   Email: martin.thomson@gmail.com\n"
