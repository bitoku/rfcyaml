- title: __initial_text__
  contents:
  - "       Enhancements for Authenticated Identity Management in the\n          \
    \         Session Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The existing security mechanisms in the Session Initiation Protocol\n\
    \   (SIP) are inadequate for cryptographically assuring the identity of\n   the\
    \ end users that originate SIP requests, especially in an\n   interdomain context.\
    \  This document defines a mechanism for securely\n   identifying originators\
    \ of SIP messages.  It does so by defining two\n   new SIP header fields, Identity,\
    \ for conveying a signature used for\n   validating the identity, and Identity-Info,\
    \ for conveying a reference\n   to the certificate of the signer.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Background ......................................................3\n   4.\
    \ Overview of Operations ..........................................6\n   5. Authentication\
    \ Service Behavior .................................7\n      5.1. Identity within\
    \ a Dialog and Retargeting ..................10\n   6. Verifier Behavior ..............................................11\n\
    \   7. Considerations for User Agent ..................................12\n  \
    \ 8. Considerations for Proxy Servers ...............................13\n   9.\
    \ Header Syntax ..................................................13\n   10. Compliance\
    \ Tests and Examples .................................16\n      10.1. Identity-Info\
    \ with a Singlepart MIME body ................17\n      10.2. Identity for a Request\
    \ with No MIME Body or Contact ......20\n   11. Identity and the TEL URI Scheme\
    \ ...............................22\n   12. Privacy Considerations ........................................23\n\
    \   13. Security Considerations .......................................24\n  \
    \    13.1. Handling of digest-string Elements .......................24\n    \
    \  13.2. Display-Names and Identity ...............................27\n      13.3.\
    \ Securing the Connection to the Authentication Service ....28\n      13.4. Domain\
    \ Names and Subordination ...........................29\n      13.5. Authorization\
    \ and Transitional Strategies ................30\n   14. IANA Considerations ...........................................31\n\
    \      14.1. Header Field Names .......................................31\n  \
    \    14.2. 428 'Use Identity Header' Response Code ..................32\n    \
    \  14.3. 436 'Bad Identity-Info' Response Code ....................32\n      14.4.\
    \ 437 'Unsupported Certificate' Response Code ..............32\n      14.5. 438\
    \ 'Invalid Identity Header' Response Code ..............33\n      14.6. Identity-Info\
    \ Parameters .................................33\n      14.7. Identity-Info Algorithm\
    \ Parameter Values .................33\n   Appendix A. Acknowledgements ......................................34\n\
    \   Appendix B. Bit-Exact Archive of Examples of Messages .............34\n  \
    \    B.1. Encoded Reference Files ...................................35\n   Appendix\
    \ C. Original Requirements .................................38\n   References\
    \ ........................................................39\n      Normative\
    \ References ...........................................39\n      Informative\
    \ References .........................................39\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides enhancements to the existing mechanisms\
    \ for\n   authenticated identity management in the Session Initiation Protocol\n\
    \   (SIP, RFC 3261 [1]).  An identity, for the purposes of this document,\n  \
    \ is defined as a SIP URI, commonly a canonical address-of-record (AoR)\n   employed\
    \ to reach a user (such as 'sip:alice@atlanta.example.com').\n   RFC 3261 stipulates\
    \ several places within a SIP request where a user\n   can express an identity\
    \ for themselves, notably the user-populated\n   From header field.  However,\
    \ the recipient of a SIP request has no\n   way to verify that the From header\
    \ field has been populated\n   appropriately, in the absence of some sort of cryptographic\n\
    \   authentication mechanism.\n   RFC 3261 specifies a number of security mechanisms\
    \ that can be\n   employed by SIP user agents (UAs), including Digest, Transport\
    \ Layer\n   Security (TLS), and S/MIME (implementations may support other\n  \
    \ security schemes as well).  However, few SIP user agents today\n   support the\
    \ end-user certificates necessary to authenticate\n   themselves (via S/MIME,\
    \ for example), and furthermore Digest\n   authentication is limited by the fact\
    \ that the originator and\n   destination must share a prearranged secret.  It\
    \ is desirable for SIP\n   user agents to be able to send requests to destinations\
    \ with which\n   they have no previous association -- just as in the telephone\
    \ network\n   today, one can receive a call from someone with whom one has no\n\
    \   previous association, and still have a reasonable assurance that the\n   person's\
    \ displayed Caller-ID is accurate.  A cryptographic approach,\n   like the one\
    \ described in this document, can probably provide a much\n   stronger and less-spoofable\
    \ assurance of identity than the telephone\n   network provides today.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT\n   RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n\
    \   described in RFC 2119 [2] and indicate requirement levels for\n   compliant\
    \ SIP implementations.\n"
- title: 3.  Background
  contents:
  - "3.  Background\n   The usage of many SIP applications and services is governed\
    \ by\n   authorization policies.  These policies may be automated, or they may\n\
    \   be applied manually by humans.  An example of the latter would be an\n   Internet\
    \ telephone application that displays the Caller-ID of a\n   caller, which a human\
    \ may review before answering a call.  An example\n   of the former would be a\
    \ presence service that compares the identity\n   of potential subscribers to\
    \ a whitelist before determining whether it\n   should accept or reject the subscription.\
    \  In both of these cases,\n   attackers might attempt to circumvent these authorization\
    \ policies\n   through impersonation.  Since the primary identifier of the sender\
    \ of\n   a SIP request, the From header field, can be populated arbitrarily by\n\
    \   the controller of a user agent, impersonation is very simple today.\n   The\
    \ mechanism described in this document aspires to provide a strong\n   identity\
    \ system for SIP in which authorization policies cannot be\n   circumvented by\
    \ impersonation.\n   All RFC 3261-compliant user agents support Digest authentication,\n\
    \   which utilizes a shared secret, as a means for authenticating\n   themselves\
    \ to a SIP registrar.  Registration allows a user agent to\n   express that it\
    \ is an appropriate entity to which requests should be\n   sent for a particular\
    \ SIP AoR URI (e.g.,\n   'sip:alice@atlanta.example.com').\n   By the definition\
    \ of identity used in this document, registration is\n   a proof of the identity\
    \ of the user to a registrar.  However, the\n   credentials with which a user\
    \ agent proves its identity to a\n   registrar cannot be validated by just any\
    \ user agent or proxy server\n   -- these credentials are only shared between\
    \ the user agent and their\n   domain administrator.  So this shared secret does\
    \ not immediately\n   help a user to authenticate to a wide range of recipients.\n\
    \   Recipients require a means of determining whether or not the 'return\n   address'\
    \ identity of a non-REGISTER request (i.e., the From header\n   field value) has\
    \ legitimately been asserted.\n   The AoR URI used for registration is also the\
    \ URI with which a UA\n   commonly populates the From header field of requests\
    \ in order to\n   provide a 'return address' identity to recipients.  From an\n\
    \   authorization perspective, if you can prove you are eligible to\n   register\
    \ in a domain under a particular AoR, you can prove you can\n   legitimately receive\
    \ requests for that AoR, and accordingly, when you\n   place that AoR in the From\
    \ header field of a SIP request other than a\n   registration (like an INVITE),\
    \ you are providing a 'return address'\n   where you can legitimately be reached.\
    \  In other words, if you are\n   authorized to receive requests for that 'return\
    \ address', logically,\n   it follows that you are also authorized to assert that\
    \ 'return\n   address' in your From header field.  This is of course only one\n\
    \   manner in which a domain might determine how a particular user is\n   authorized\
    \ to populate the From header field; as an aside, for other\n   sorts of URIs\
    \ in the From (like anonymous URIs), other authorization\n   policies would apply.\n\
    \   Ideally, then, SIP user agents should have some way of proving to\n   recipients\
    \ of SIP requests that their local domain has authenticated\n   them and authorized\
    \ the population of the From header field.  This\n   document proposes a mediated\
    \ authentication architecture for SIP in\n   which requests are sent to a server\
    \ in the user's local domain, which\n   authenticates such requests (using the\
    \ same practices by which the\n   domain would authenticate REGISTER requests).\
    \  Once a message has\n   been authenticated, the local domain then needs some\
    \ way to\n   communicate to other SIP entities that the sending user has been\n\
    \   authenticated and its use of the From header field has been\n   authorized.\
    \  This document addresses how that imprimatur of\n   authentication can be shared.\n\
    \   RFC 3261 already describes an architecture very similar to this in\n   Section\
    \ 26.3.2.2, in which a user agent authenticates itself to a\n   local proxy server,\
    \ which in turn authenticates itself to a remote\n   proxy server via mutual TLS,\
    \ creating a two-link chain of transitive\n   authentication between the originator\
    \ and the remote domain.  While\n   this works well in some architectures, there\
    \ are a few respects in\n   which this is impractical.  For one, transitive trust\
    \ is inherently\n   weaker than an assertion that can be validated end-to-end.\
    \  It is\n   possible for SIP requests to cross multiple intermediaries in\n \
    \  separate administrative domains, in which case transitive trust\n   becomes\
    \ even less compelling.\n   One solution to this problem is to use 'trusted' SIP\
    \ intermediaries\n   that assert an identity for users in the form of a privileged\
    \ SIP\n   header.  A mechanism for doing so (with the P-Asserted-Identity\n  \
    \ header) is given in [12].  However, this solution allows only hop-\n   by-hop\
    \ trust between intermediaries, not end-to-end cryptographic\n   authentication,\
    \ and it assumes a managed network of nodes with strict\n   mutual trust relationships,\
    \ an assumption that is incompatible with\n   widespread Internet deployment.\n\
    \   Accordingly, this document specifies a means of sharing a\n   cryptographic\
    \ assurance of end-user SIP identity in an interdomain or\n   intradomain context\
    \ that is based on the concept of an\n   'authentication service' and a new SIP\
    \ header, the Identity header.\n   Note that the scope of this document is limited\
    \ to providing this\n   identity assurance for SIP requests; solving this problem\
    \ for SIP\n   responses is more complicated and is a subject for future work.\n\
    \   This specification allows either a user agent or a proxy server to\n   provide\
    \ identity services and to verify identities.  To maximize\n   end-to-end security,\
    \ it is obviously preferable for end-users to\n   acquire their own certificates\
    \ and corresponding private keys; if\n   they do, they can act as an authentication\
    \ service.  However, end-\n   user certificates may be neither practical nor affordable,\
    \ given the\n   difficulties of establishing a Public Key Infrastructure (PKI)\
    \ that\n   extends to end-users, and moreover, given the potentially large\n \
    \  number of SIP user agents (phones, PCs, laptops, PDAs, gaming\n   devices)\
    \ that may be employed by a single user.  In such\n   environments, synchronizing\
    \ keying material across multiple devices\n   may be very complex and requires\
    \ quite a good deal of additional\n   endpoint behavior.  Managing several certificates\
    \ for the various\n   devices is also quite problematic and unpopular with users.\n\
    \   Accordingly, in the initial use of this mechanism, it is likely that\n   intermediaries\
    \ will instantiate the authentication service role.\n"
- title: 4.  Overview of Operations
  contents:
  - "4.  Overview of Operations\n   This section provides an informative (non-normative)\
    \ high-level\n   overview of the mechanisms described in this document.\n   Imagine\
    \ the case where Alice, who has the home proxy of example.com\n   and the address-of-record\
    \ sip:alice@example.com, wants to communicate\n   with sip:bob@example.org.\n\
    \   Alice generates an INVITE and places her identity in the From header\n   field\
    \ of the request.  She then sends an INVITE over TLS to an\n   authentication\
    \ service proxy for her domain.\n   The authentication service authenticates Alice\
    \ (possibly by sending a\n   Digest authentication challenge) and validates that\
    \ she is authorized\n   to assert the identity that is populated in the From header\
    \ field.\n   This value may be Alice's AoR, or it may be some other value that\
    \ the\n   policy of the proxy server permits her to use.  It then computes a\n\
    \   hash over some particular headers, including the From header field\n   and\
    \ the bodies in the message.  This hash is signed with the\n   certificate for\
    \ the domain (example.com, in Alice's case) and\n   inserted in a new header field\
    \ in the SIP message, the 'Identity'\n   header.\n   The proxy, as the holder\
    \ of the private key of its domain, is\n   asserting that the originator of this\
    \ request has been authenticated\n   and that she is authorized to claim the identity\
    \ (the SIP address-\n   of-record) that appears in the From header field.  The\
    \ proxy also\n   inserts a companion header field, Identity-Info, that tells Bob\
    \ how\n   to acquire its certificate, if he doesn't already have it.\n   When\
    \ Bob's domain receives the request, it verifies the signature\n   provided in\
    \ the Identity header, and thus can validate that the\n   domain indicated by\
    \ the host portion of the AoR in the From header\n   field authenticated the user,\
    \ and permitted the user to assert that\n   From header field value.  This same\
    \ validation operation may be\n   performed by Bob's user agent server (UAS).\n"
- title: 5.  Authentication Service Behavior
  contents:
  - "5.  Authentication Service Behavior\n   This document defines a new role for\
    \ SIP entities called an\n   authentication service.  The authentication service\
    \ role can be\n   instantiated by a proxy server or a user agent.  Any entity\
    \ that\n   instantiates the authentication service role MUST possess the private\n\
    \   key of a domain certificate.  Intermediaries that instantiate this\n   role\
    \ MUST be capable of authenticating one or more SIP users that can\n   register\
    \ in that domain.  Commonly, this role will be instantiated by\n   a proxy server,\
    \ since these entities are more likely to have a static\n   hostname, hold a corresponding\
    \ certificate, and have access to SIP\n   registrar capabilities that allow them\
    \ to authenticate users in their\n   domain.  It is also possible that the authentication\
    \ service role\n   might be instantiated by an entity that acts as a redirect\
    \ server,\n   but that is left as a topic for future work.\n   SIP entities that\
    \ act as an authentication service MUST add a Date\n   header field to SIP requests\
    \ if one is not already present (see\n   Section 9 for information on how the\
    \ Date header field assists\n   verifiers).  Similarly, authentication services\
    \ MUST add a Content-\n   Length header field to SIP requests if one is not already\
    \ present;\n   this can help verifiers to double-check that they are hashing exactly\n\
    \   as many bytes of message-body as the authentication service when they\n  \
    \ verify the message.\n   Entities instantiating the authentication service role\
    \ perform the\n   following steps, in order, to generate an Identity header for\
    \ a SIP\n   request:\n   Step 1:\n   The authentication service MUST extract the\
    \ identity of the sender\n   from the request.  The authentication service takes\
    \ this value from\n   the From header field; this AoR will be referred to here\
    \ as the\n   'identity field'.  If the identity field contains a SIP or SIP Secure\n\
    \   (SIPS) URI, the authentication service MUST extract the hostname\n   portion\
    \ of the identity field and compare it to the domain(s) for\n   which it is responsible\
    \ (following the procedures in RFC 3261,\n   Section 16.4, used by a proxy server\
    \ to determine the domain(s) for\n   which it is responsible).  If the identity\
    \ field uses the TEL URI\n   scheme, the policy of the authentication service\
    \ determines whether\n   or not it is responsible for this identity; see Section\
    \ 11 for more\n   information.  If the authentication service is not responsible\
    \ for\n   the identity in question, it SHOULD process and forward the request\n\
    \   normally, but it MUST NOT add an Identity header; see below for more\n   information\
    \ on authentication service handling of an existing\n   Identity header.\n   Step\
    \ 2:\n   The authentication service MUST determine whether or not the sender\n\
    \   of the request is authorized to claim the identity given in the\n   identity\
    \ field.  In order to do so, the authentication service MUST\n   authenticate\
    \ the sender of the message.  Some possible ways in which\n   this authentication\
    \ might be performed include:\n         If the authentication service is instantiated\
    \ by a SIP\n         intermediary (proxy server), it may challenge the request\
    \ with\n         a 407 response code using the Digest authentication scheme (or\n\
    \         viewing a Proxy-Authentication header sent in the request,\n       \
    \  which was sent in anticipation of a challenge using cached\n         credentials,\
    \ as described in RFC 3261, Section 22.3).  Note\n         that if that proxy\
    \ server is maintaining a TLS connection with\n         the client over which\
    \ the client had previously authenticated\n         itself using Digest authentication,\
    \ the identity value obtained\n         from that previous authentication step\
    \ can be reused without an\n         additional Digest challenge.\n         If\
    \ the authentication service is instantiated by a SIP user\n         agent, a\
    \ user agent can be said to authenticate its user on the\n         grounds that\
    \ the user can provision the user agent with the\n         private key of the\
    \ domain, or preferably by providing a\n         password that unlocks said private\
    \ key.\n   Authorization of the use of a particular username in the From header\n\
    \   field is a matter of local policy for the authentication service, one\n  \
    \ that depends greatly on the manner in which authentication is\n   performed.\
    \  For example, one policy might be as follows: the username\n   given in the\
    \ 'username' parameter of the Proxy-Authorization header\n   MUST correspond exactly\
    \ to the username in the From header field of\n   the SIP message.  However, there\
    \ are many cases in which this is too\n   limiting or inappropriate; a realm might\
    \ use 'username' parameters in\n   Proxy-Authorization that do not correspond\
    \ to the user-portion of SIP\n   From headers, or a user might manage multiple\
    \ accounts in the same\n   administrative domain.  In this latter case, a domain\
    \ might maintain\n   a mapping between the values in the 'username' parameter\
    \ of Proxy-\n   Authorization and a set of one or more SIP URIs that might\n \
    \  legitimately be asserted for that 'username'.  For example, the\n   username\
    \ can correspond to the 'private identity' as defined in Third\n   Generation\
    \ Partnership Project (3GPP), in which case the From header\n   field can contain\
    \ any one of the public identities associated with\n   this private identity.\
    \  In this instance, another policy might be as\n   follows: the URI in the From\
    \ header field MUST correspond exactly to\n   one of the mapped URIs associated\
    \ with the 'username' given in the\n   Proxy-Authorization header.  Various exceptions\
    \ to such policies\n   might arise for cases like anonymity; if the AoR asserted\
    \ in the From\n   header field uses a form like 'sip:anonymous@example.com', then\
    \ the\n   'example.com' proxy should authenticate that the user is a valid user\n\
    \   in the domain and insert the signature over the From header field as\n   usual.\n\
    \   Note that this check is performed on the addr-spec in the From header\n  \
    \ field (e.g., the URI of the sender, like\n   'sip:alice@atlanta.example.com');\
    \ it does not convert the display-\n   name portion of the From header field (e.g.,\
    \ 'Alice Atlanta').\n   Authentication services MAY check and validate the display-name\
    \ as\n   well, and compare it to a list of acceptable display-names that may\n\
    \   be used by the sender; if the display-name does not meet policy\n   constraints,\
    \ the authentication service MUST return a 403 response\n   code.  The reason\
    \ phrase should indicate the nature of the problem;\n   for example, \"Inappropriate\
    \ Display Name\".  However, the display-name\n   is not always present, and in\
    \ many environments the requisite\n   operational procedures for display-name\
    \ validation may not exist.\n   For more information, see Section 13.2.\n   Step\
    \ 3:\n   The authentication service SHOULD ensure that any preexisting Date\n\
    \   header in the request is accurate.  Local policy can dictate\n   precisely\
    \ how accurate the Date must be; a RECOMMENDED maximum\n   discrepancy of ten\
    \ minutes will ensure that the request is unlikely\n   to upset any verifiers.\
    \  If the Date header contains a time different\n   by more than ten minutes from\
    \ the current time noted by the\n   authentication service, the authentication\
    \ service SHOULD reject the\n   request.  This behavior is not mandatory because\
    \ a user agent client\n   (UAC) could only exploit the Date header in order to\
    \ cause a request\n   to fail verification; the Identity header is not intended\
    \ to provide\n   a source of non-repudiation or a perfect record of when messages\
    \ are\n   processed.  Finally, the authentication service MUST verify that the\n\
    \   Date header falls within the validity period of its certificate.  For\n  \
    \ more information on the security properties associated with the Date\n   header\
    \ field value, see Section 9.\n   Step 4:\n   The authentication service MUST\
    \ form the identity signature and add\n   an Identity header to the request containing\
    \ this signature.  After\n   the Identity header has been added to the request,\
    \ the authentication\n   service MUST also add an Identity-Info header.  The Identity-Info\n\
    \   header contains a URI from which its certificate can be acquired.\n   Details\
    \ on the generation of both of these headers are provided in\n   Section 9.\n\
    \   Finally, the authentication service MUST forward the message\n   normally.\n"
- title: 5.1.  Identity within a Dialog and Retargeting
  contents:
  - "5.1.  Identity within a Dialog and Retargeting\n   Retargeting is broadly defined\
    \ as the alteration of the Request-URI\n   by intermediaries.  More specifically,\
    \ retargeting supplants the\n   original target URI with one that corresponds\
    \ to a different user, a\n   user that is not authorized to register under the\
    \ original target\n   URI.  By this definition, retargeting does not include translation\
    \ of\n   the Request-URI to a contact address of an endpoint that has\n   registered\
    \ under the original target URI, for example.\n   When a dialog-forming request\
    \ is retargeted, this can cause a few\n   wrinkles for the Identity mechanism\
    \ when it is applied to requests\n   sent in the backwards direction within a\
    \ dialog.  This section\n   provides some non-normative considerations related\
    \ to this case.\n   When a request is retargeted, it may reach a SIP endpoint\
    \ whose user\n   is not identified by the URI designated in the To header field\
    \ value.\n   The value in the To header field of a dialog-forming request is used\n\
    \   as the From header field of requests sent in the backwards direction\n   during\
    \ the dialog, and is accordingly the header that would be signed\n   by an authentication\
    \ service for requests sent in the backwards\n   direction.  In retargeting cases,\
    \ if the URI in the From header does\n   not identify the sender of the request\
    \ in the backwards direction,\n   then clearly it would be inappropriate to provide\
    \ an Identity\n   signature over that From header.  As specified above, if the\n\
    \   authentication service is not responsible for the domain in the From\n   header\
    \ field of the request, it MUST NOT add an Identity header to\n   the request,\
    \ and it should process/forward the request normally.\n   Any means of anticipating\
    \ retargeting, and so on, is outside the\n   scope of this document, and likely\
    \ to have equal applicability to\n   response identity as it does to requests\
    \ in the backwards direction\n   within a dialog.  Consequently, no special guidance\
    \ is given for\n   implementers here regarding the 'connected party' problem;\n\
    \   authentication service behavior is unchanged if retargeting has\n   occurred\
    \ for a dialog-forming request.  Ultimately, the\n   authentication service provides\
    \ an Identity header for requests in\n   the backwards dialog when the user is\
    \ authorized to assert the\n   identity given in the From header field, and if\
    \ they are not, an\n   Identity header is not provided.\n   For further information\
    \ on the problems of response identity and the\n   potential solution spaces,\
    \ see [15].\n"
- title: 6.  Verifier Behavior
  contents:
  - "6.  Verifier Behavior\n   This document introduces a new logical role for SIP\
    \ entities called a\n   server.  When a verifier receives a SIP message containing\
    \ an\n   Identity header, it may inspect the signature to verify the identity\n\
    \   of the sender of the message.  Typically, the results of a\n   verification\
    \ are provided as input to an authorization process that\n   is outside the scope\
    \ of this document.  If an Identity header is not\n   present in a request, and\
    \ one is required by local policy (for\n   example, based on a per-sending-domain\
    \ policy, or a per-sending-user\n   policy), then a 428 'Use Identity Header'\
    \ response MUST be sent.\n   In order to verify the identity of the sender of\
    \ a message, an entity\n   acting as a verifier MUST perform the following steps,\
    \ in the order\n   here specified.\n   Step 1:\n   The verifier MUST acquire the\
    \ certificate for the signing domain.\n   Implementations supporting this specification\
    \ SHOULD have some means\n   of retaining domain certificates (in accordance with\
    \ normal practices\n   for certificate lifetimes and revocation) in order to prevent\n\
    \   themselves from needlessly downloading the same certificate every\n   time\
    \ a request from the same domain is received.  Certificates cached\n   in this\
    \ manner should be indexed by the URI given in the Identity-\n   Info header field\
    \ value.\n   Provided that the domain certificate used to sign this message is\
    \ not\n   previously known to the verifier, SIP entities SHOULD discover this\n\
    \   certificate by dereferencing the Identity-Info header, unless they\n   have\
    \ some more efficient implementation-specific way of acquiring\n   certificates\
    \ for that domain.  If the URI scheme in the Identity-Info\n   header cannot be\
    \ dereferenced, then a 436 'Bad Identity-Info'\n   response MUST be returned.\
    \  The verifier processes this certificate\n   in the usual ways, including checking\
    \ that it has not expired, that\n   the chain is valid back to a trusted certification\
    \ authority (CA),\n   and that it does not appear on revocation lists.  Once the\n\
    \   certificate is acquired, it MUST be validated following the\n   procedures\
    \ in RFC 3280 [9].  If the certificate cannot be validated\n   (it is self-signed\
    \ and untrusted, or signed by an untrusted or\n   unknown certificate authority,\
    \ expired, or revoked), the verifier\n   MUST send a 437 'Unsupported Certificate'\
    \ response.\n   Step 2:\n   The verifier MUST follow the process described in\
    \ Section 13.4 to\n   determine if the signer is authoritative for the URI in\
    \ the From\n   header field.\n   Step 3:\n   The verifier MUST verify the signature\
    \ in the Identity header field,\n   following the procedures for generating the\
    \ hashed digest-string\n   described in Section 9.  If a verifier determines that\
    \ the signature\n   on the message does not correspond to the reconstructed digest-\n\
    \   string, then a 438 'Invalid Identity Header' response MUST be\n   returned.\n\
    \   Step 4:\n   The verifier MUST validate the Date, Contact, and Call-ID headers\
    \ in\n   the manner described in Section 13.1; recipients that wish to verify\n\
    \   Identity signatures MUST support all of the operations described\n   there.\
    \  It must furthermore ensure that the value of the Date header\n   falls within\
    \ the validity period of the certificate whose\n   corresponding private key was\
    \ used to sign the Identity header.\n"
- title: 7.  Considerations for User Agent
  contents:
  - "7.  Considerations for User Agent\n   This mechanism can be applied opportunistically\
    \ to existing SIP\n   deployments; accordingly, it requires no change to SIP user\
    \ agent\n   behavior in order for it to be effective.  However, because this\n\
    \   mechanism does not provide integrity protection between the UAC and\n   the\
    \ authentication service, a UAC SHOULD implement some means of\n   providing this\
    \ integrity.  TLS would be one such mechanism, which is\n   attractive because\
    \ it MUST be supported by SIP proxy servers, but is\n   potentially problematic\
    \ because it is a hop-by-hop mechanism.  See\n   Section 13.3 for more information\
    \ about securing the channel between\n   the UAC and the authentication service.\n\
    \   When a UAC sends a request, it MUST accurately populate the From\n   header\
    \ field with a value corresponding to an identity that it\n   believes it is authorized\
    \ to claim.  In a request, it MUST set the\n   URI portion of its From header\
    \ to match a SIP, SIPS, or TEL URI AoR\n   that it is authorized to use in the\
    \ domain (including anonymous URIs,\n   as described in RFC 3323 [3]).  In general,\
    \ UACs SHOULD NOT use the\n   TEL URI form in the From header field (see Section\
    \ 11).\n   Note that this document defines a number of new 4xx response codes.\n\
    \   If user agents support these response codes, they will be able to\n   respond\
    \ intelligently to Identity-based error conditions.\n   The UAC MUST also be capable\
    \ of sending requests, including mid-call\n   requests, through an 'outbound'\
    \ proxy (the authentication service).\n   The best way to accomplish this is using\
    \ pre-loaded Route headers and\n   loose routing.  For a given domain, if an entity\
    \ that can instantiate\n   the authentication service role is not in the path\
    \ of dialog-forming\n   requests, identity for mid-dialog requests in the backwards\
    \ direction\n   cannot be provided.\n   As a recipient of a request, a user agent\
    \ that can verify signed\n   identities should also support an appropriate user\
    \ interface to\n   render the validity of identity to a user.  User agent\n  \
    \ implementations SHOULD differentiate signed From header field values\n   from\
    \ unsigned From header field values when rendering to an end-user\n   the identity\
    \ of the sender of a request.\n"
- title: 8.  Considerations for Proxy Servers
  contents:
  - "8.  Considerations for Proxy Servers\n   Domain policy may require proxy servers\
    \ to inspect and verify the\n   identity provided in SIP requests.  A proxy server\
    \ may wish to\n   ascertain the identity of the sender of the message to provide\
    \ spam\n   prevention or call control services.  Even if a proxy server does not\n\
    \   act as an authentication service, it MAY validate the Identity header\n  \
    \ before it makes a forwarding decision for a request.  Proxy servers\n   MUST\
    \ NOT remove or modify an existing Identity or Identity-Info\n   header in a request.\n"
- title: 9.  Header Syntax
  contents:
  - "9.  Header Syntax\n   This document specifies two new SIP headers: Identity and\
    \ Identity-\n   Info.  Each of these headers can appear only once in a SIP message.\n\
    \   The grammar for these two headers is (following the ABNF [6] in RFC\n   3261\
    \ [1]):\n   Identity = \"Identity\" HCOLON signed-identity-digest\n   signed-identity-digest\
    \ = LDQUOT 32LHEX RDQUOT\n   Identity-Info = \"Identity-Info\" HCOLON ident-info\n\
    \                    *( SEMI ident-info-params )\n   ident-info = LAQUOT absoluteURI\
    \ RAQUOT\n   ident-info-params = ident-info-alg / ident-info-extension\n   ident-info-alg\
    \ = \"alg\" EQUAL token\n   ident-info-extension = generic-param\n   The signed-identity-digest\
    \ is a signed hash of a canonical string\n   generated from certain components\
    \ of a SIP request.  To create the\n   contents of the signed-identity-digest,\
    \ the following elements of a\n   SIP message MUST be placed in a bit-exact string\
    \ in the order\n   specified here, separated by a vertical line, \"|\" or %x7C,\
    \ character:\n   o  The AoR of the UA sending the message, or addr-spec of the\
    \ From\n      header field (referred to occasionally here as the 'identity\n \
    \     field').\n   o  The addr-spec component of the To header field, which is\
    \ the AoR\n      to which the request is being sent.\n   o  The callid from Call-Id\
    \ header field.\n   o  The digit (1*DIGIT) and method (method) portions from CSeq\
    \ header\n      field, separated by a single space (ABNF SP, or %x20).  Note that\n\
    \      the CSeq header field allows linear whitespace (LWS) rather than\n    \
    \  SP to separate the digit and method portions, and thus the CSeq\n      header\
    \ field may need to be transformed in order to be\n      canonicalized.  The authentication\
    \ service MUST strip leading\n      zeros from the 'digit' portion of the Cseq\
    \ before generating the\n      digest-string.\n   o  The Date header field, with\
    \ exactly one space each for each SP and\n      the weekday and month items case\
    \ set as shown in BNF in RFC 3261.\n      RFC 3261 specifies that the BNF for\
    \ weekday and month is a choice\n      amongst a set of tokens.  The RFC 2234\
    \ rules for the BNF specify\n      that tokens are case sensitive.  However, when\
    \ used to construct\n      the canonical string defined here, the first letter\
    \ of each week\n      and month MUST be capitalized, and the remaining two letters\
    \ must\n      be lowercase.  This matches the capitalization provided in the\n\
    \      definition of each token.  All requests that use the Identity\n      mechanism\
    \ MUST contain a Date header.\n   o  The addr-spec component of the Contact header\
    \ field value.  If the\n      request does not contain a Contact header, this\
    \ field MUST be\n      empty (i.e., there will be no whitespace between the fourth\
    \ and\n      fifth \"|\" characters in the canonical string).\n   o  The body\
    \ content of the message with the bits exactly as they are\n      in the Message\
    \ (in the ABNF for SIP, the message-body).  This\n      includes all components\
    \ of multipart message bodies.  Note that\n      the message-body does NOT include\
    \ the CRLF separating the SIP\n      headers from the message-body, but does include\
    \ everything that\n      follows that CRLF.  If the message has no body, then\
    \ message-body\n      will be empty, and the final \"|\" will not be followed\
    \ by any\n      additional characters.\n   For more information on the security\
    \ properties of these headers, and\n   why their inclusion mitigates replay attacks,\
    \ see Section 13 and [5].\n   The precise formulation of this digest-string is,\
    \ therefore\n   (following the ABNF [6] in RFC 3261 [1]):\n   digest-string =\
    \ addr-spec \"|\" addr-spec \"|\" callid \"|\"\n                   1*DIGIT SP\
    \ Method \"|\" SIP-date \"|\" [ addr-spec ] \"|\"\n                   message-body\n\
    \   Note again that the first addr-spec MUST be taken from the From\n   header\
    \ field value, the second addr-spec MUST be taken from the To\n   header field\
    \ value, and the third addr-spec MUST be taken from the\n   Contact header field\
    \ value, provided the Contact header is present in\n   the request.\n   After\
    \ the digest-string is formed, it MUST be hashed and signed with\n   the certificate\
    \ for the domain.  The hashing and signing algorithm is\n   specified by the 'alg'\
    \ parameter of the Identity-Info header (see\n   below for more information on\
    \ Identity-Info header parameters).  This\n   document defines only one value\
    \ for the 'alg' parameter: 'rsa-sha1';\n   further values MUST be defined in a\
    \ Standards Track RFC, see Section\n   14.7 for more information.  All implementations\
    \ of this specification\n   MUST support 'rsa-sha1'.  When the 'rsa-sha1' algorithm\
    \ is specified\n   in the 'alg' parameter of Identity-Info, the hash and signature\
    \ MUST\n   be generated as follows: compute the results of signing this string\n\
    \   with sha1WithRSAEncryption as described in RFC 3370 [7] and base64\n   encode\
    \ the results as specified in RFC 3548 [8].  A 1024-bit or\n   longer RSA key\
    \ MUST be used.  The result is placed in the Identity\n   header field.  For detailed\
    \ examples of the usage of this algorithm,\n   see Section 10.\n   The 'absoluteURI'\
    \ portion of the Identity-Info header MUST contain a\n   URI which dereferences\
    \ to a resource containing the certificate of\n   the authentication service.\
    \  All implementations of this\n   specification MUST support the use of HTTP\
    \ and HTTPS URIs in the\n   Identity-Info header.  Such HTTP and HTTPS URIs MUST\
    \ follow the\n   conventions of RFC 2585 [10], and for those URIs the indicated\n\
    \   resource MUST be of the form 'application/pkix-cert' described in\n   that\
    \ specification.  Note that this introduces key lifecycle\n   management concerns;\
    \ were a domain to change the key available at the\n   Identity-Info URI before\
    \ a verifier evaluates a request signed by an\n   authentication service, this\
    \ would cause obvious verifier failures.\n   When a rollover occurs, authentication\
    \ services SHOULD thus provide\n   new Identity-Info URIs for each new certificate,\
    \ and SHOULD continue\n   to make older key acquisition URIs available for a duration\
    \ longer\n   than the plausible lifetime of a SIP message (an hour would most\n\
    \   likely suffice).\n   The Identity-Info header field MUST contain an 'alg'\
    \ parameter.  No\n   other parameters are defined for the Identity-Info header\
    \ in this\n   document.  Future Standards Track RFCs may define additional\n \
    \  Identity-Info header parameters.\n   This document adds the following entries\
    \ to Table 2 of RFC 3261 [1]:\n      Header field         where   proxy   ACK\
    \  BYE  CAN  INV  OPT  REG\n      ------------         -----   -----   ---  ---\
    \  ---  ---  ---  ---\n      Identity               R       a      o    o    -\
    \    o    o    o\n                                           SUB  NOT  REF  INF\
    \  UPD  PRA\n                                           ---  ---  ---  ---  ---\
    \  ---\n                                            o    o    o    o    o    o\n\
    \      Header field         where   proxy   ACK  BYE  CAN  INV  OPT  REG\n   \
    \   ------------         -----   -----   ---  ---  ---  ---  ---  ---\n      Identity-Info\
    \          R       a      o    o    -    o    o    o\n                       \
    \                    SUB  NOT  REF  INF  UPD  PRA\n                          \
    \                 ---  ---  ---  ---  ---  ---\n                             \
    \               o    o    o    o    o    o\n   Note, in the table above, that\
    \ this mechanism does not protect the\n   CANCEL method.  The CANCEL method cannot\
    \ be challenged, because it is\n   hop-by-hop, and accordingly authentication\
    \ service behavior for\n   CANCEL would be significantly limited.  Note as well\
    \ that the\n   REGISTER method uses Contact header fields in very unusual ways\
    \ that\n   complicate its applicability to this mechanism, and the use of\n  \
    \ Identity with REGISTER is consequently a subject for future study,\n   although\
    \ it is left as optional here for forward-compatibility\n   reasons.  The Identity\
    \ and Identity-Info header MUST NOT appear in\n   CANCEL.\n"
- title: 10.  Compliance Tests and Examples
  contents:
  - "10.  Compliance Tests and Examples\n   The examples in this section illustrate\
    \ the use of the Identity\n   header in the context of a SIP transaction.  Implementers\
    \ are advised\n   to verify their compliance with the specification against the\n\
    \   following criteria:\n   o  Implementations of the authentication service role\
    \ MUST generate\n      identical base64 identity strings to the ones shown in\
    \ the\n      Identity headers in these examples when presented with the source\n\
    \      message and utilizing the appropriate supplied private key for the\n  \
    \    domain in question.\n   o  Implementations of the verifier role MUST correctly\
    \ validate the\n      given messages containing the Identity header when utilizing\
    \ the\n      supplied certificates (with the caveat about self-signed\n      certificates\
    \ below).\n   Note that the following examples use self-signed certificates, rather\n\
    \   than certificates issued by a recognized certificate authority.  The\n   use\
    \ of self-signed certificates for this mechanism is NOT\n   RECOMMENDED, and it\
    \ appears here only for illustrative purposes.\n   Therefore, in compliance testing,\
    \ implementations of verifiers SHOULD\n   generate appropriate warnings about\
    \ the use of self-signed\n   certificates.  Also, the example certificates in\
    \ this section have\n   placed their domain name subject in the subjectAltName\
    \ field; in\n   practice, certificate authorities may place domain names in other\n\
    \   locations in the certificate (see Section 13.4 for more information).\n  \
    \ Note that all examples in this section use the 'rsa-sha1' algorithm.\n   Bit-exact\
    \ reference files for these messages and their various\n   transformations are\
    \ supplied in Appendix B.\n"
- title: 10.1.  Identity-Info with a Singlepart MIME body
  contents:
  - "10.1.  Identity-Info with a Singlepart MIME body\n   Consider the following private\
    \ key and certificate pair assigned to\n   'atlanta.example.com' (rendered in\
    \ OpenSSL format).\n   -----BEGIN RSA PRIVATE KEY-----\n   MIICXQIBAAKBgQDPPMBtHVoPkXV+Z6jq1LsgfTELVWpy2BVUffJMPH06LL0cJSQO\n\
    \   aIeVzIojzWtpauB7IylZKlAjB5f429tRuoUiedCwMLKblWAqZt6eHWpCNZJ7lONc\n   IEwnmh2nAccKk83Lp/VH3tgAS/43DQoX2sndnYh+g8522Pzwg7EGWspzzwIDAQAB\n\
    \   AoGBAK0W3tnEFD7AjVQAnJNXDtx59Aa1Vu2JEXe6oi+OrkFysJjbZJwsLmKtrgtt\n   PXOU8t2mZpi0wK4hX4tZhntiwGKkUPC3h9Bjp+GerifP341RMyMO+6fPgjqOzUDw\n\
    \   +rPjjMpwD7AkcEcqDgbTrZnWv/QnCSaaF3xkUGfFkLx5OKcRAkEA7UxnsE8XaT30\n   tP/UUc51gNk2KGKgxQQTHopBcew9yfeCRFhvdL7jpaGatEi5iZwGGQQDVOVHUN1H\n\
    \   0YLpHQjRowJBAN+R2bvA/Nimq464ZgnelEDPqaEAZWaD3kOfhS9+vL7oqES+u5E0\n   J7kXb7ZkiSVUg9XU/8PxMKx/DAz0dUmOL+UCQH8C9ETUMI2uEbqHbBdVUGNk364C\n\
    \   DFcndSxVh+34KqJdjiYSx6VPPv26X9m7S0OydTkSgs3/4ooPxo8HaMqXm80CQB+r\n   xbB3UlpOohcBwFK9mTrlMB6Cs9ql66KgwnlL9ukEhHHYozGatdXeoBCyhUsogdSU\n\
    \   6/aSAFcvWEGtj7/vyJECQQCCS1lKgEXoNQPqONalvYhyyMZRXFLdD4gbwRPK1uXK\n   Ypk3CkfFzOyfjeLcGPxXzq2qzuHzGTDxZ9PAepwX4RSk\n\
    \   -----END RSA PRIVATE KEY-----\n   -----BEGIN CERTIFICATE-----\n   MIIC3TCCAkagAwIBAgIBADANBgkqhkiG9w0BAQUFADBZMQswCQYDVQQGEwJVUzEL\n\
    \   MAkGA1UECAwCR0ExEDAOBgNVBAcMB0F0bGFudGExDTALBgNVBAoMBElFVEYxHDAa\n   BgNVBAMME2F0bGFudGEuZXhhbXBsZS5jb20wHhcNMDUxMDI0MDYzNjA2WhcNMDYx\n\
    \   MDI0MDYzNjA2WjBZMQswCQYDVQQGEwJVUzELMAkGA1UECAwCR0ExEDAOBgNVBAcM\n   B0F0bGFudGExDTALBgNVBAoMBElFVEYxHDAaBgNVBAMME2F0bGFudGEuZXhhbXBs\n\
    \   ZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAM88wG0dWg+RdX5nqOrU\n   uyB9MQtVanLYFVR98kw8fTosvRwlJA5oh5XMiiPNa2lq4HsjKVkqUCMHl/jb21G6\n\
    \   hSJ50LAwspuVYCpm3p4dakI1knuU41wgTCeaHacBxwqTzcun9Ufe2ABL/jcNChfa\n   yd2diH6DznbY/PCDsQZaynPPAgMBAAGjgbQwgbEwHQYDVR0OBBYEFNmU/MrbVYcE\n\
    \   KDr/20WISrG1j1rNMIGBBgNVHSMEejB4gBTZlPzK21WHBCg6/9tFiEqxtY9azaFd\n   pFswWTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkdBMRAwDgYDVQQHDAdBdGxhbnRh\n\
    \   MQ0wCwYDVQQKDARJRVRGMRwwGgYDVQQDDBNhdGxhbnRhLmV4YW1wbGUuY29tggEA\n   MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADgYEADdQYtswBDmTSTq0mt211\n\
    \   7alm/XGFrb2zdbU0vorxRdOZ04qMyrIpXG1LEmnEOgcocyrXRBvq5p6WbZAcEQk0\n   DsE3Ve0Nc8x9nmvljW7GsMGFCnCuo4ODTf/1lGdVr9DeCzcj10YUQ3MRemDMXhY2\n\
    \   CtDisLWl7SXOORcZAi1oU9w=\n   -----END CERTIFICATE-----\n   A user of atlanta.example.com,\
    \ Alice, wants to send an INVITE to\n   bob@biloxi.example.org.  She therefore\
    \ creates the following INVITE\n   request, which she forwards to the atlanta.example.org\
    \ proxy server\n   that instantiates the authentication service role:\n      \
    \   INVITE sip:bob@biloxi.example.org SIP/2.0\n         Via: SIP/2.0/TLS pc33.atlanta.example.com;branch=z9hG4bKnashds8\n\
    \         To: Bob <sip:bob@biloxi.example.org>\n         From: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n\
    \         Call-ID: a84b4c76e66710\n         CSeq: 314159 INVITE\n         Max-Forwards:\
    \ 70\n         Date: Thu, 21 Feb 2002 13:02:03 GMT\n         Contact: <sip:alice@pc33.atlanta.example.com>\n\
    \         Content-Type: application/sdp\n         Content-Length: 147\n      \
    \   v=0\n         o=UserA 2890844526 2890844526 IN IP4 pc33.atlanta.example.com\n\
    \         s=Session SDP\n         c=IN IP4 pc33.atlanta.example.com\n        \
    \ t=0 0\n         m=audio 49172 RTP/AVP 0\n         a=rtpmap:0 PCMU/8000\n   When\
    \ the authentication service receives the INVITE, it authenticates\n   Alice by\
    \ sending a 407 response.  As a result, Alice adds an\n   Authorization header\
    \ to her request, and resends to the\n   atlanta.example.com authentication service.\
    \  Now that the service is\n   sure of Alice's identity, it calculates an Identity\
    \ header for the\n   request.  The canonical string over which the identity signature\
    \ will\n   be generated is the following (note that the first line wraps because\n\
    \   of RFC editorial conventions):\n   sip:alice@atlanta.example.com|sip:bob@biloxi.example.org|\n\
    \   a84b4c76e66710|314159 INVITE|Thu, 21 Feb 2002 13:02:03 GMT|\n   sip:alice@pc33.atlanta.example.com|v=0\n\
    \   o=UserA 2890844526 2890844526 IN IP4 pc33.atlanta.example.com\n   s=Session\
    \ SDP\n   c=IN IP4 pc33.atlanta.example.com\n   t=0 0\n   m=audio 49172 RTP/AVP\
    \ 0\n   a=rtpmap:0 PCMU/8000\n   The resulting signature (sha1WithRsaEncryption)\
    \ using the private RSA\n   key given above, with base64 encoding, is the following:\n\
    \   ZYNBbHC00VMZr2kZt6VmCvPonWJMGvQTBDqghoWeLxJfzB2a1pxAr3VgrB0SsSAa\n   ifsRdiOPoQZYOy2wrVghuhcsMbHWUSFxI6p6q5TOQXHMmz6uEo3svJsSH49thyGn\n\
    \   FVcnyaZ++yRlBYYQTLqWzJ+KVhPKbfU/pryhVn9Yc6U=\n   Accordingly, the atlanta.example.com\
    \ authentication service will\n   create an Identity header containing that base64\
    \ signature string\n   (175 bytes).  It will also add an HTTPS URL where its certificate\
    \ is\n   made available.  With those two headers added, the message looks like\n\
    \   the following:\n   INVITE sip:bob@biloxi.example.org SIP/2.0\n   Via: SIP/2.0/TLS\
    \ pc33.atlanta.example.com;branch=z9hG4bKnashds8\n   To: Bob <sip:bob@biloxi.example.org>\n\
    \   From: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n\
    \   CSeq: 314159 INVITE\n   Max-Forwards: 70\n   Date: Thu, 21 Feb 2002 13:02:03\
    \ GMT\n   Contact: <sip:alice@pc33.atlanta.example.com>\n   Identity:\n     \"\
    ZYNBbHC00VMZr2kZt6VmCvPonWJMGvQTBDqghoWeLxJfzB2a1pxAr3VgrB0SsSAa\n      ifsRdiOPoQZYOy2wrVghuhcsMbHWUSFxI6p6q5TOQXHMmz6uEo3svJsSH49thyGn\n\
    \      FVcnyaZ++yRlBYYQTLqWzJ+KVhPKbfU/pryhVn9Yc6U=\"\n   Identity-Info: <https://atlanta.example.com/atlanta.cer>;alg=rsa-sha1\n\
    \   Content-Type: application/sdp\n   Content-Length: 147\n   v=0\n   o=UserA\
    \ 2890844526 2890844526 IN IP4 pc33.atlanta.example.com\n   s=Session SDP\n  \
    \ c=IN IP4 pc33.atlanta.example.com\n   t=0 0\n   m=audio 49172 RTP/AVP 0\n  \
    \ a=rtpmap:0 PCMU/8000\n   atlanta.example.com then forwards the request normally.\
    \  When Bob\n   receives the request, if he does not already know the certificate\
    \ of\n   atlanta.example.com, he dereferences the URL in the Identity-Info\n \
    \  header to acquire the certificate.  Bob then generates the same\n   canonical\
    \ string given above, from the same headers of the SIP\n   request.  Using this\
    \ canonical string, the signed digest in the\n   Identity header, and the certificate\
    \ discovered by dereferencing the\n   Identity-Info header, Bob can verify that\
    \ the given set of headers\n   and the message body have not been modified.\n"
- title: 10.2.  Identity for a Request with No MIME Body or Contact
  contents:
  - "10.2.  Identity for a Request with No MIME Body or Contact\n   Consider the following\
    \ private key and certificate pair assigned to\n   \"biloxi.example.org\".\n \
    \  -----BEGIN RSA PRIVATE KEY-----\n   MIICXgIBAAKBgQC/obBYLRMPjskrAqWOiGPAUxI3/m2ti7ix4caqCTAuFX5cLegQ\n\
    \   7nmquLOHfIhxVIqT2f06UA0lOo2NVofK9G7MTkVbVNiyAlLYUDEj7XWLDICf3ZHL\n   6Fr/+CF7wrQ9r4kv7XiJKxodVCCd/DhCT9Gp+VDoe8HymqOW/KsneriyIwIDAQAB\n\
    \   AoGBAJ7fsFIKXKkjWgj8ksGOthS3Sn19xPSCyEdBxfEm2Pj7/Nzzeli/PcOaic0k\n   JALBcnqN2fHEeIGK/9xUBxTufgQYVJqvyHERs6rXX/iT4Ynm9t1905EiQ9ZpHsrI\n\
    \   /AMMUYA1QrGgAIHvZLVLzq+9KLDEZ+HQbuCLJXF+6bl0Eb5BAkEA636oMANp0Qa3\n   mYWEQ2utmGsYxkXSfyBb18TCOwCty0ndBR24zyOJF2NbZS98Lz+Ga25hfIGw/JHK\n\
    \   nD9bOE88UwJBANBRSpd4bmS+m48R/13tRESAtHqydNinX0kS/RhwHr7mkHTU3k/M\n   FxQtx34I3GKzaZxMn0A66KS9v/SHdnF+ePECQQCGe7QshyZ8uitLPtZDclCWhEKH\n\
    \   qAQHmUEZvUF2VHLrbukLLOgHUrHNa24cILv4d3yaCVUetymNcuyTwhKj24wFAkAO\n   z/jx1EplN3hwL+NsllZoWI58uvu7/Aq2c3czqaVGBbb317sHCYgKk0bAG3kwO3mi\n\
    \   93/LXWT1cdiYVpmBcHDBAkEAmpgkFj+xZu5gWASY5ujv+FCMP0WwaH5hTnXu+tKe\n   PJ3d2IJZKxGnl6itKRN7GeRh9PSK0kZSqGFeVrvsJ4Nopg==\n\
    \   -----END RSA PRIVATE KEY-----\n   -----BEGIN CERTIFICATE-----\n   MIIC1jCCAj+gAwIBAgIBADANBgkqhkiG9w0BAQUFADBXMQswCQYDVQQGEwJVUzEL\n\
    \   MAkGA1UECAwCTVMxDzANBgNVBAcMBkJpbG94aTENMAsGA1UECgwESUVURjEbMBkG\n   A1UEAwwSYmlsb3hpLmV4YW1wbGUuY29tMB4XDTA1MTAyNDA2NDAyNloXDTA2MTAy\n\
    \   NDA2NDAyNlowVzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1TMQ8wDQYDVQQHDAZC\n   aWxveGkxDTALBgNVBAoMBElFVEYxGzAZBgNVBAMMEmJpbG94aS5leGFtcGxlLmNv\n\
    \   bTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAv6GwWC0TD47JKwKljohjwFMS\n   N/5trYu4seHGqgkwLhV+XC3oEO55qrizh3yIcVSKk9n9OlANJTqNjVaHyvRuzE5F\n\
    \   W1TYsgJS2FAxI+11iwyAn92Ry+ha//ghe8K0Pa+JL+14iSsaHVQgnfw4Qk/RqflQ\n   6HvB8pqjlvyrJ3q4siMCAwEAAaOBsTCBrjAdBgNVHQ4EFgQU0Z+RL47W/APDtc5B\n\
    \   fSoQXuEFE/wwfwYDVR0jBHgwdoAU0Z+RL47W/APDtc5BfSoQXuEFE/yhW6RZMFcx\n   CzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNUzEPMA0GA1UEBwwGQmlsb3hpMQ0wCwYD\n\
    \   VQQKDARJRVRGMRswGQYDVQQDDBJiaWxveGkuZXhhbXBsZS5jb22CAQAwDAYDVR0T\n   BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOBgQBiyKHIt8TXfGNfpnJXi5jCizOxmY8Y\n\
    \   gln8tyPFaeyq95TGcvTCWzdoBLVpBD+fpRWrX/II5sE6VHbbAPjjVmKbZwzQAtpp\n   P2Fauj28t94ZeDHN2vqzjfnHjCO24kG3Juf2T80ilp9YHcDwxjUFrt86UnlC+yid\n\
    \   yaTeusW5Gu7v1g==\n   -----END CERTIFICATE-----\n   Bob (bob@biloxi.example.org)\
    \ now wants to send a BYE request to Alice\n   at the end of the dialog initiated\
    \ in the previous example.  He\n   therefore creates the following BYE request,\
    \ which he forwards to the\n   'biloxi.example.org' proxy server that instantiates\
    \ the\n   authentication service role:\n   BYE sip:alice@pc33.atlanta.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS 192.0.2.4;branch=z9hG4bKnashds10\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.org>;tag=a6c85cf\n   To: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n\
    \   Call-ID: a84b4c76e66710\n   CSeq: 231 BYE\n   Content-Length: 0\n   When the\
    \ authentication service receives the BYE, it authenticates\n   Bob by sending\
    \ a 407 response.  As a result, Bob adds an\n   Authorization header to his request,\
    \ and resends to the\n   biloxi.example.org authentication service.  Now that\
    \ the service is\n   sure of Bob's identity, it prepares to calculate an Identity\
    \ header\n   for the request.  Note that this request does not have a Date header\n\
    \   field.  Accordingly, the biloxi.example.org will add a Date header to\n  \
    \ the request before calculating the identity signature.  If the\n   Content-Length\
    \ header were not present, the authentication service\n   would add it as well.\
    \  The baseline message is thus:\n   BYE sip:alice@pc33.atlanta.example.com SIP/2.0\n\
    \   Via: SIP/2.0/TLS 192.0.2.4;branch=z9hG4bKnashds10\n   Max-Forwards: 70\n \
    \  From: Bob <sip:bob@biloxi.example.org>;tag=a6c85cf\n   To: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n\
    \   Date: Thu, 21 Feb 2002 14:19:51 GMT\n   Call-ID: a84b4c76e66710\n   CSeq:\
    \ 231 BYE\n   Content-Length: 0\n   Also note that this request contains no Contact\
    \ header field.\n   Accordingly, biloxi.example.org will place no value in the\
    \ canonical\n   string for the addr-spec of the Contact address.  Also note that\n\
    \   there is no message body, and accordingly, the signature string will\n   terminate,\
    \ in this case, with two vertical bars.  The canonical\n   string over which the\
    \ identity signature will be generated is the\n   following (note that the first\
    \ line wraps because of RFC editorial\n   conventions):\n   sip:bob@biloxi.example.org|sip:alice@atlanta.example.com|\n\
    \   a84b4c76e66710|231 BYE|Thu, 21 Feb 2002 14:19:51 GMT||\n   The resulting signature\
    \ (sha1WithRsaEncryption) using the private RSA\n   key given above for biloxi.example.org,\
    \ with base64 encoding, is the\n   following:\n   sv5CTo05KqpSmtHt3dcEiO/1CWTSZtnG3iV+1nmurLXV/HmtyNS7Ltrg9dlxkWzo\n\
    \   eU7d7OV8HweTTDobV3itTmgPwCFjaEmMyEI3d7SyN21yNDo2ER/Ovgtw0Lu5csIp\n   pPqOg1uXndzHbG7mR6Rl9BnUhHufVRbp51Mn3w0gfUs=\n\
    \   Accordingly, the biloxi.example.org authentication service will\n   create\
    \ an Identity header containing that base64 signature string.\n   It will also\
    \ add an HTTPS URL where its certificate is made\n   available.  With those two\
    \ headers added, the message looks like the\n   following:\n   BYE sip:alice@pc33.atlanta.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS 192.0.2.4;branch=z9hG4bKnashds10\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@biloxi.example.org>;tag=a6c85cf\n   To: Alice <sip:alice@atlanta.example.com>;tag=1928301774\n\
    \   Date: Thu, 21 Feb 2002 14:19:51 GMT\n   Call-ID: a84b4c76e66710\n   CSeq:\
    \ 231 BYE\n   Identity:\n     \"sv5CTo05KqpSmtHt3dcEiO/1CWTSZtnG3iV+1nmurLXV/HmtyNS7Ltrg9dlxkWzo\n\
    \      eU7d7OV8HweTTDobV3itTmgPwCFjaEmMyEI3d7SyN21yNDo2ER/Ovgtw0Lu5csIp\n    \
    \  pPqOg1uXndzHbG7mR6Rl9BnUhHufVRbp51Mn3w0gfUs=\"\n   Identity-Info: <https://biloxi.example.org/biloxi.cer>;alg=rsa-sha1\n\
    \   Content-Length: 0\n   biloxi.example.org then forwards the request normally.\n"
- title: 11.  Identity and the TEL URI Scheme
  contents:
  - "11.  Identity and the TEL URI Scheme\n   Since many SIP applications provide\
    \ a Voice over IP (VoIP) service,\n   telephone numbers are commonly used as identities\
    \ in SIP deployments.\n   In the majority of cases, this is not problematic for\
    \ the identity\n   mechanism described in this document.  Telephone numbers commonly\n\
    \   appear in the username portion of a SIP URI (e.g.,\n   'sip:+17005551008@chicago.example.com;user=phone').\
    \  That username\n   conforms to the syntax of the TEL URI scheme (RFC 3966 [13]).\
    \  For\n   this sort of SIP address-of-record, chicago.example.com is the\n  \
    \ appropriate signatory.\n   It is also possible for a TEL URI to appear in the\
    \ SIP To or From\n   header field outside the context of a SIP or SIPS URI (e.g.,\n\
    \   'tel:+17005551008').  In this case, it is much less clear which\n   signatory\
    \ is appropriate for the identity.  Fortunately for the\n   identity mechanism,\
    \ this form of the TEL URI is more common for the\n   To header field and Request-URI\
    \ in SIP than in the From header field,\n   since the UAC has no option but to\
    \ provide a TEL URI alone when the\n   remote domain to which a request is sent\
    \ is unknown.  The local\n   domain, however, is usually known by the UAC, and\
    \ accordingly it can\n   form a proper From header field containing a SIP URI\
    \ with a username\n   in TEL URI form.  Implementations that intend to send their\
    \ requests\n   through an authentication service SHOULD put telephone numbers\
    \ in the\n   From header field into SIP or SIPS URIs whenever possible.\n   If\
    \ the local domain is unknown to a UAC formulating a request, it\n   most likely\
    \ will not be able to locate an authentication service for\n   its request, and\
    \ therefore the question of providing identity in\n   these cases is somewhat\
    \ moot.  However, an authentication service MAY\n   sign a request containing\
    \ a TEL URI in the From header field.  This\n   is permitted in this specification\
    \ strictly for forward compatibility\n   purposes.  In the longer-term, it is\
    \ possible that ENUM [14] may\n   provide a way to determine which administrative\
    \ domain is responsible\n   for a telephone number, and this may aid in the signing\
    \ and\n   verification of SIP identities that contain telephone numbers.  This\n\
    \   is a subject for future work.\n"
- title: 12.  Privacy Considerations
  contents:
  - "12.  Privacy Considerations\n   The identity mechanism presented in this document\
    \ is compatible with\n   the standard SIP practices for privacy described in RFC\
    \ 3323 [3].  A\n   SIP proxy server can act both as a privacy service and as an\n\
    \   authentication service.  Since a user agent can provide any From\n   header\
    \ field value that the authentication service is willing to\n   authorize, there\
    \ is no reason why private SIP URIs that contain\n   legitimate domains (e.g.,\
    \ sip:anonymous@example.com) cannot be signed\n   by an authentication service.\
    \  The construction of the Identity\n   header is the same for private URIs as\
    \ it is for any other sort of\n   URIs.\n   Note, however, that an authentication\
    \ service must possess a\n   certificate corresponding to the host portion of\
    \ the addr-spec of the\n   From header field of any request that it signs; accordingly,\
    \ using\n   domains like 'anonymous.invalid' will not be possible for privacy\n\
    \   services that also act as authentication services.  The assurance\n   offered\
    \ by the usage of anonymous URIs with a valid domain portion is\n   \"this is\
    \ a known user in my domain that I have authenticated, but I\n   am keeping its\
    \ identity private\".  The use of the domain\n   'anonymous.invalid' entails that\
    \ no corresponding authority for the\n   domain can exist, and as a consequence,\
    \ authentication service\n   functions are meaningless.\n   The \"header\" level\
    \ of privacy described in RFC 3323 requests that a\n   privacy service alter the\
    \ Contact header field value of a SIP\n   message.  Since the Contact header field\
    \ is protected by the\n   signature in an Identity header, privacy services cannot\
    \ be applied\n   after authentication services without a resulting integrity\n\
    \   violation.\n   RFC 3325 [12] defines the \"id\" priv-value token, which is\
    \ specific to\n   the P-Asserted-Identity header.  The sort of assertion provided\
    \ by\n   the P-Asserted-Identity header is very different from the Identity\n\
    \   header presented in this document.  It contains additional\n   information\
    \ about the sender of a message that may go beyond what\n   appears in the From\
    \ header field; P-Asserted-Identity holds a\n   definitive identity for the sender\
    \ that is somehow known to a closed\n   network of intermediaries that presumably\
    \ the network will use this\n   identity for billing or security purposes.  The\
    \ danger of this\n   network-specific information leaking outside of the closed\
    \ network\n   motivated the \"id\" priv-value token.  The \"id\" priv-value token\
    \ has\n   no implications for the Identity header, and privacy services MUST\n\
    \   NOT remove the Identity header when a priv-value of \"id\" appears in a\n\
    \   Privacy header.\n   Finally, note that unlike RFC 3325, the mechanism described\
    \ in this\n   specification adds no information to SIP requests that has privacy\n\
    \   implications.\n"
- title: 13.  Security Considerations
  contents:
  - '13.  Security Considerations

    '
- title: 13.1.  Handling of digest-string Elements
  contents:
  - "13.1.  Handling of digest-string Elements\n   This document describes a mechanism\
    \ that provides a signature over\n   the Contact, Date, Call-ID, CSeq, To, and\
    \ From header fields of SIP\n   requests.  While a signature over the From header\
    \ field would be\n   sufficient to secure a URI alone, the additional headers\
    \ provide\n   replay protection and reference integrity necessary to make sure\
    \ that\n   the Identity header will not be used in cut-and-paste attacks.  In\n\
    \   general, the considerations related to the security of these headers\n   are\
    \ the same as those given in RFC 3261 for including headers in\n   tunneled 'message/sip'\
    \ MIME bodies (see Section 23 in particular).\n   The following section details\
    \ the individual security properties\n   obtained by including each of these header\
    \ fields within the\n   signature; collectively, this set of header fields provides\
    \ the\n   necessary properties to prevent impersonation.\n   The From header field\
    \ indicates the identity of the sender of the\n   message, and the SIP address-of-record\
    \ URI in the From header field\n   is the identity of a SIP user, for the purposes\
    \ of this document.\n   The To header field provides the identity of the SIP user\
    \ that this\n   request targets.  Providing the To header field in the Identity\n\
    \   signature serves two purposes: first, it prevents cut-and-paste\n   attacks\
    \ in which an Identity header from legitimate request for one\n   user is cut-and-pasted\
    \ into a request for a different user; second,\n   it preserves the starting URI\
    \ scheme of the request, which helps\n   prevent downgrade attacks against the\
    \ use of SIPS.\n   The Date and Contact headers provide reference integrity and\
    \ replay\n   protection, as described in RFC 3261, Section 23.4.2.\n   Implementations\
    \ of this specification MUST NOT deem valid a request\n   with an outdated Date\
    \ header field (the RECOMMENDED interval is that\n   the Date header must indicate\
    \ a time within 3600 seconds of the\n   receipt of a message).  Implementations\
    \ MUST also record Call-IDs\n   received in valid requests containing an Identity\
    \ header, and MUST\n   remember those Call-IDs for at least the duration of a\
    \ single Date\n   interval (i.e., commonly 3600 seconds).  Because a SIP-compliant\
    \ UA\n   never generates the same Call-ID twice, verifiers can use the Call-ID\n\
    \   to recognize cut-and-paste attacks; the Call-ID serves as a nonce.\n   The\
    \ result of this is that if an Identity header is replayed within\n   the Date\
    \ interval, verifiers will recognize that it is invalid\n   because of a Call-ID\
    \ duplication; if an Identity header is replayed\n   after the Date interval,\
    \ verifiers will recognize that it is invalid\n   because the Date is stale. \
    \ The CSeq header field contains a numbered\n   identifier for the transaction,\
    \ and the name of the method of the\n   request; without this information, an\
    \ INVITE request could be cut-\n   and-pasted by an attacker and transformed into\
    \ a BYE request without\n   changing any fields covered by the Identity header,\
    \ and moreover\n   requests within a certain transaction could be replayed in\n\
    \   potentially confusing or malicious ways.\n   The Contact header field is included\
    \ to tie the Identity header to a\n   particular user agent instance that generated\
    \ the request.  Were an\n   active attacker to intercept a request containing\
    \ an Identity header,\n   and cut-and-paste the Identity header field into its\
    \ own request\n   (reusing the From, To, Contact, Date, and Call-ID fields that\
    \ appear\n   in the original message), the attacker would not be eligible to\n\
    \   receive SIP requests from the called user agent, since those requests\n  \
    \ are routed to the URI identified in the Contact header field.\n   However, the\
    \ Contact header is only included in dialog-forming\n   requests, so it does not\
    \ provide this protection in all cases.\n   It might seem attractive to provide\
    \ a signature over some of the\n   information present in the Via header field\
    \ value(s).  For example,\n   without a signature over the sent-by field of the\
    \ topmost Via header,\n   an attacker could remove that Via header and insert\
    \ its own in a\n   cut-and-paste attack, which would cause all responses to the\
    \ request\n   to be routed to a host of the attacker's choosing.  However, a\n\
    \   signature over the topmost Via header does not prevent attacks of\n   this\
    \ nature, since the attacker could leave the topmost Via intact\n   and merely\
    \ insert a new Via header field directly after it, which\n   would cause responses\
    \ to be routed to the attacker's host \"on their\n   way\" to the valid host,\
    \ which has exactly the same end result.\n   Although it is possible that an intermediary-based\
    \ authentication\n   service could guarantee that no Via hops are inserted between\
    \ the\n   sending user agent and the authentication service, it could not\n  \
    \ prevent an attacker from adding a Via hop after the authentication\n   service,\
    \ and thereby preempting responses.  It is necessary for the\n   proper operation\
    \ of SIP for subsequent intermediaries to be capable\n   of inserting such Via\
    \ header fields, and thus it cannot be prevented.\n   As such, though it is desirable,\
    \ securing Via is not possible through\n   the sort of identity mechanism described\
    \ in this document; the best\n   known practice for securing Via is the use of\
    \ SIPS.\n   This mechanism also provides a signature over the bodies of SIP\n\
    \   requests.  The most important reason for doing so is to protect\n   Session\
    \ Description Protocol (SDP) bodies carried in SIP requests.\n   There is little\
    \ purpose in establishing the identity of the user that\n   originated a SIP request\
    \ if this assurance is not coupled with a\n   comparable assurance over the media\
    \ descriptors.  Note, however, that\n   this is not perfect end-to-end security.\
    \  The authentication service\n   itself, when instantiated at a intermediary,\
    \ could conceivably change\n   the SDP (and SIP headers, for that matter) before\
    \ providing a\n   signature.  Thus, while this mechanism reduces the chance that\
    \ a\n   replayer or man-in-the-middle will modify SDP, it does not eliminate\n\
    \   it entirely.  Since it is a foundational assumption of this mechanism\n  \
    \ that the users trust their local domain to vouch for their security,\n   they\
    \ must also trust the service not to violate the integrity of\n   their message\
    \ without good reason.  Note that RFC 3261, Section 16.6,\n   states that SIP\
    \ proxy servers \"MUST NOT add to, modify, or remove the\n   message body.\"\n\
    \   In the end analysis, the Identity and Identity-Info headers cannot\n   protect\
    \ themselves.  Any attacker could remove these headers from a\n   SIP request,\
    \ and modify the request arbitrarily afterwards.  However,\n   this mechanism\
    \ is not intended to protect requests from men-in-the-\n   middle who interfere\
    \ with SIP messages; it is intended only to\n   provide a way that SIP users can\
    \ prove definitively that they are who\n   they claim to be.  At best, by stripping\
    \ identity information from a\n   request, a man-in-the-middle could make it impossible\
    \ to distinguish\n   any illegitimate messages he would like to send from those\
    \ messages\n   sent by an authorized user.  However, it requires a considerably\n\
    \   greater amount of energy to mount such an attack than it does to\n   mount\
    \ trivial impersonations by just copying someone else's From\n   header field.\
    \  This mechanism provides a way that an authorized user\n   can provide a definitive\
    \ assurance of his identity that an\n   unauthorized user, an impersonator, cannot.\n\
    \   One additional respect in which the Identity-Info header cannot\n   protect\
    \ itself is the 'alg' parameter.  The 'alg' parameter is not\n   included in the\
    \ digest-string, and accordingly, a man-in-the-middle\n   might attempt to modify\
    \ the 'alg' parameter.  However, it is\n   important to note that preventing men-in-the-middle\
    \ is not the\n   primary impetus for this mechanism.  Moreover, changing the 'alg'\n\
    \   would at worst result in some sort of bid-down attack, and at best\n   cause\
    \ a failure in the verifier.  Note that only one valid 'alg'\n   parameter is\
    \ defined in this document and that thus there is\n   currently no weaker algorithm\
    \ to which the mechanism can be bid down.\n   'alg' has been incorporated into\
    \ this mechanism for forward-\n   compatibility reasons in case the current algorithm\
    \ exhibits\n   weaknesses, and requires swift replacement, in the future.\n"
- title: 13.2.  Display-Names and Identity
  contents:
  - "13.2.  Display-Names and Identity\n   As a matter of interface design, SIP user\
    \ agents might render the\n   display-name portion of the From header field of\
    \ a caller as the\n   identity of the caller; there is a significant precedent\
    \ in email\n   user interfaces for this practice.  As such, it might seem that\
    \ the\n   lack of a signature over the display-name is a significant omission.\n\
    \   However, there are several important senses in which a signature over\n  \
    \ the display-name does not prevent impersonation.  In the first place,\n   a\
    \ particular display-name, like \"Jon Peterson\", is not unique in the\n   world;\
    \ many users in different administrative domains might\n   legitimately claim\
    \ that name.  Furthermore, enrollment practices for\n   SIP-based services might\
    \ have a difficult time discerning the\n   legitimate display-name for a user;\
    \ it is safe to assume that\n   impersonators will be capable of creating SIP\
    \ accounts with arbitrary\n   display-names.  The same situation prevails in email\
    \ today.  Note\n   that an impersonator who attempted to replay a message with\
    \ an\n   Identity header, changing only the display-name in the From header\n\
    \   field, would be detected by the other replay protection mechanisms\n   described\
    \ in Section 13.1.\n   Of course, an authentication service can enforce policies\
    \ about the\n   display-name even if the display-name is not signed.  The exact\n\
    \   mechanics for creating and operationalizing such policies is outside\n   the\
    \ scope of this document.  The effect of this policy would not be\n   to prevent\
    \ impersonation of a particular unique identifier like a SIP\n   URI (since display-names\
    \ are not unique identifiers), but to allow a\n   domain to manage the claims\
    \ made by its users.  If such policies are\n   enforced, users would not be free\
    \ to claim any display-name of their\n   choosing.  In the absence of a signature,\
    \ man-in-the-middle attackers\n   could conceivably alter the display-names in\
    \ a request with impunity.\n   Note that the scope of this specification is impersonation\
    \ attacks,\n   however, and that a man-in-the-middle might also strip the Identity\n\
    \   and Identity-Info headers from a message.\n   There are many environments\
    \ in which policies regarding the display-\n   name aren't feasible.  Distributing\
    \ bit-exact and internationalizable\n   display-names to end-users as part of\
    \ the enrollment or registration\n   process would require mechanisms that are\
    \ not explored in this\n   document.  In the absence of policy enforcement regarding\
    \ domain\n   names, there are conceivably attacks that an adversary could mount\n\
    \   against SIP systems that rely too heavily on the display-name in\n   their\
    \ user interface, but this argues for intelligent interface\n   design, not changes\
    \ to the mechanisms.  Relying on a non-unique\n   identifier for identity would\
    \ ultimately result in a weak mechanism.\n"
- title: 13.3.  Securing the Connection to the Authentication Service
  contents:
  - "13.3.  Securing the Connection to the Authentication Service\n   The assurance\
    \ provided by this mechanism is strongest when a user\n   agent forms a direct\
    \ connection, preferably one secured by TLS, to an\n   intermediary-based authentication\
    \ service.  The reasons for this are\n   twofold:\n      If a user does not receive\
    \ a certificate from the authentication\n      service over this TLS connection\
    \ that corresponds to the expected\n      domain (especially when the user receives\
    \ a challenge via a\n      mechanism such as Digest), then it is possible that\
    \ a rogue server\n      is attempting to pose as an authentication service for\
    \ a domain\n      that it does not control, possibly in an attempt to collect\
    \ shared\n      secrets for that domain.\n      Without TLS, the various header\
    \ field values and the body of the\n      request will not have integrity protection\
    \ when the request\n      arrives at an authentication service.  Accordingly,\
    \ a prior\n      legitimate or illegitimate intermediary could modify the message\n\
    \      arbitrarily.\n   Of these two concerns, the first is most material to the\
    \ intended\n   scope of this mechanism.  This mechanism is intended to prevent\n\
    \   impersonation attacks, not man-in-the-middle attacks; integrity over\n   the\
    \ header and bodies is provided by this mechanism only to prevent\n   replay attacks.\
    \  However, it is possible that applications relying on\n   the presence of the\
    \ Identity header could leverage this integrity\n   protection, especially body\
    \ integrity, for services other than replay\n   protection.\n   Accordingly, direct\
    \ TLS connections SHOULD be used between the UAC\n   and the authentication service\
    \ whenever possible.  The opportunistic\n   nature of this mechanism, however,\
    \ makes it very difficult to\n   constrain UAC behavior, and moreover there will\
    \ be some deployment\n   architectures where a direct connection is simply infeasible\
    \ and the\n   UAC cannot act as an authentication service itself.  Accordingly,\n\
    \   when a direct connection and TLS are not possible, a UAC should use\n   the\
    \ SIPS mechanism, Digest 'auth-int' for body integrity, or both\n   when it can.\
    \  The ultimate decision to add an Identity header to a\n   request lies with\
    \ the authentication service, of course; domain\n   policy must identify those\
    \ cases where the UAC's security association\n   with the authentication service\
    \ is too weak.\n"
- title: 13.4.  Domain Names and Subordination
  contents:
  - "13.4.  Domain Names and Subordination\n   When a verifier processes a request\
    \ containing an Identity-Info\n   header, it must compare the domain portion of\
    \ the URI in the From\n   header field of the request with the domain name that\
    \ is the subject\n   of the certificate acquired from the Identity-Info header.\
    \  While it\n   might seem that this should be a straightforward process, it is\n\
    \   complicated by two deployment realities.  In the first place,\n   certificates\
    \ have varying ways of describing their subjects, and may\n   indeed have multiple\
    \ subjects, especially in 'virtual hosting' cases\n   where multiple domains are\
    \ managed by a single application.\n   Secondly, some SIP services may delegate\
    \ SIP functions to a\n   subordinate domain and utilize the procedures in RFC\
    \ 3263 [4] that\n   allow requests for, say, 'example.com' to be routed to\n \
    \  'sip.example.com'.  As a result, a user with the AoR\n   'sip:jon@example.com'\
    \ may process its requests through a host like\n   'sip.example.com', and it may\
    \ be that latter host that acts as an\n   authentication service.\n   To meet\
    \ the second of these problems, a domain that deploys an\n   authentication service\
    \ on a subordinate host MUST be willing to\n   supply that host with the private\
    \ keying material associated with a\n   certificate whose subject is a domain\
    \ name that corresponds to the\n   domain portion of the AoRs that the domain\
    \ distributes to users.\n   Note that this corresponds to the comparable case\
    \ of routing inbound\n   SIP requests to a domain.  When the NAPTR and SRV procedures\
    \ of RFC\n   3263 are used to direct requests to a domain name other than the\n\
    \   domain in the original Request-URI (e.g., for 'sip:jon@example.com',\n   the\
    \ corresponding SRV records point to the service\n   'sip1.example.org'), the\
    \ client expects that the certificate passed\n   back in any TLS exchange with\
    \ that host will correspond exactly with\n   the domain of the original Request-URI,\
    \ not the domain name of the\n   host.  Consequently, in order to make inbound\
    \ routing to such SIP\n   services work, a domain administrator must similarly\
    \ be willing to\n   share the domain's private key with the service.  This design\n\
    \   decision was made to compensate for the insecurity of the DNS, and it\n  \
    \ makes certain potential approaches to DNS-based 'virtual hosting'\n   unsecurable\
    \ for SIP in environments where domain administrators are\n   unwilling to share\
    \ keys with hosting services.\n   A verifier MUST evaluate the correspondence\
    \ between the user's\n   identity and the signing certificate by following the\
    \ procedures\n   defined in RFC 2818 [11], Section 3.1.  While RFC 2818 deals\
    \ with the\n   use of HTTP in TLS, the procedures described are applicable to\n\
    \   verifying identity if one substitutes the \"hostname of the server\" in\n\
    \   HTTP for the domain portion of the user's identity in the From header\n  \
    \ field of a SIP request with an Identity header.\n   Because the domain certificates\
    \ that can be used by authentication\n   services need to assert only the hostname\
    \ of the authentication\n   service, existing certificate authorities can provide\
    \ adequate\n   certificates for this mechanism.  However, not all proxy servers\
    \ and\n   user agents will be able to support the root certificates of all\n \
    \  certificate authorities, and moreover there are some significant\n   differences\
    \ in the policies by which certificate authorities issue\n   their certificates.\
    \  This document makes no recommendations for the\n   usage of particular certificate\
    \ authorities, nor does it describe any\n   particular policies that certificate\
    \ authorities should follow, but\n   it is anticipated that operational experience\
    \ will create de facto\n   standards for authentication services.  Some federations\
    \ of service\n   providers, for example, might only trust certificates that have\
    \ been\n   provided by a certificate authority operated by the federation.  It\n\
    \   is strongly RECOMMENDED that self-signed domain certificates should\n   not\
    \ be trusted by verifiers, unless some previous key exchange has\n   justified\
    \ such trust.\n   For further information on certificate security and practices,\
    \ see\n   RFC 3280 [9].  The Security Considerations of RFC 3280 are applicable\n\
    \   to this document.\n"
- title: 13.5.  Authorization and Transitional Strategies
  contents:
  - "13.5.  Authorization and Transitional Strategies\n   Ultimately, the worth of\
    \ an assurance provided by an Identity header\n   is limited by the security practices\
    \ of the domain that issues the\n   assurance.  Relying on an Identity header\
    \ generated by a remote\n   administrative domain assumes that the issuing domain\
    \ used its\n   administrative practices to authenticate its users.  However, it\
    \ is\n   possible that some domains will implement policies that effectively\n\
    \   make users unaccountable (e.g., ones that accept unauthenticated\n   registrations\
    \ from arbitrary users).  The value of an Identity header\n   from such domains\
    \ is questionable.  While there is no magic way for a\n   verifier to distinguish\
    \ \"good\" from \"bad\" domains by inspecting a SIP\n   request, it is expected\
    \ that further work in authorization practices\n   could be built on top of this\
    \ identity solution; without such an\n   identity solution, many promising approaches\
    \ to authorization policy\n   are impossible.  That much said, it is RECOMMENDED\
    \ that\n   authentication services based on proxy servers employ strong\n   authentication\
    \ practices such as token-based identifiers.\n   One cannot expect the Identity\
    \ and Identity-Info headers to be\n   supported by every SIP entity overnight.\
    \  This leaves the verifier in\n   a compromising position; when it receives a\
    \ request from a given SIP\n   user, how can it know whether or not the sender's\
    \ domain supports\n   Identity?  In the absence of ubiquitous support for identity,\
    \ some\n   transitional strategies are necessary.\n      A verifier could remember\
    \ when it receives a request from a domain\n      that uses Identity, and in the\
    \ future, view messages received from\n      that domain without Identity headers\
    \ with skepticism.\n      A verifier could query the domain through some sort\
    \ of callback\n      system to determine whether or not it is running an authentication\n\
    \      service.  There are a number of potential ways in which this could\n  \
    \    be implemented; use of the SIP OPTIONS method is one possibility.\n     \
    \ This is left as a subject for future work.\n   In the long term, some sort of\
    \ identity mechanism, either the one\n   documented in this specification or a\
    \ successor, must become\n   mandatory-to-use for the SIP protocol; that is the\
    \ only way to\n   guarantee that this protection can always be expected by verifiers.\n\
    \   Finally, it is worth noting that the presence or absence of the\n   Identity\
    \ headers cannot be the sole factor in making an authorization\n   decision. \
    \ Permissions might be granted to a message on the basis of\n   the specific verified\
    \ Identity or really on any other aspect of a SIP\n   request.  Authorization\
    \ policies are outside the scope of this\n   specification, but this specification\
    \ advises any future\n   authorization work not to assume that messages with valid\
    \ Identity\n   headers are always good.\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   This document requests changes to the header and\
    \ response-code sub-\n   registries of the SIP parameters IANA registry, and requests\
    \ the\n   creation of two new registries for parameters for the Identity-Info\n\
    \   header.\n"
- title: 14.1.  Header Field Names
  contents:
  - "14.1.  Header Field Names\n   This document specifies two new SIP headers: Identity\
    \ and Identity-\n   Info.  Their syntax is given in Section 9.  These headers\
    \ are defined\n   by the following information, which has been added to the header\n\
    \   sub-registry under http://www.iana.org/assignments/sip-parameters.\n     \
    \    Header Name: Identity\n         Compact Form: y\n         Header Name: Identity-Info\n\
    \         Compact Form: n\n"
- title: 14.2.  428 'Use Identity Header' Response Code
  contents:
  - "14.2.  428 'Use Identity Header' Response Code\n   This document registers a\
    \ new SIP response code, which is described\n   in Section 6.  It is sent when\
    \ a verifier receives a SIP request that\n   lacks an Identity header in order\
    \ to indicate that the request should\n   be re-sent with an Identity header.\
    \  This response code is defined by\n   the following information, which has been\
    \ added to the method and\n   response-code sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n\
    \         Response Code Number: 428\n         Default Reason Phrase: Use Identity\
    \ Header\n"
- title: 14.3.  436 'Bad Identity-Info' Response Code
  contents:
  - "14.3.  436 'Bad Identity-Info' Response Code\n   This document registers a new\
    \ SIP response code, which is described\n   in Section 6.  It is used when the\
    \ Identity-Info header contains a\n   URI that cannot be dereferenced by the verifier\
    \ (either the URI\n   scheme is unsupported by the verifier, or the resource designated\
    \ by\n   the URI is otherwise unavailable).  This response code is defined by\n\
    \   the following information, which has been added to the method and\n   response-code\
    \ sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n   \
    \      Response Code Number: 436\n         Default Reason Phrase: Bad Identity-Info\n"
- title: 14.4.  437 'Unsupported Certificate' Response Code
  contents:
  - "14.4.  437 'Unsupported Certificate' Response Code\n   This document registers\
    \ a new SIP response code, which is described\n   in Section 6.  It is used when\
    \ the verifier cannot validate the\n   certificate referenced by the URI of the\
    \ Identity-Info header,\n   because, for example, the certificate is self-signed,\
    \ or signed by a\n   root certificate authority for whom the verifier does not\
    \ possess a\n   root certificate.  This response code is defined by the following\n\
    \   information, which has been added to the method and response-code\n   sub-registry\
    \ under http://www.iana.org/assignments/sip-parameters.\n         Response Code\
    \ Number: 437\n         Default Reason Phrase: Unsupported Certificate\n"
- title: 14.5.  438 'Invalid Identity Header' Response Code
  contents:
  - "14.5.  438 'Invalid Identity Header' Response Code\n   This document registers\
    \ a new SIP response code, which is described\n   in Section 6.  It is used when\
    \ the verifier receives a message with\n   an Identity signature that does not\
    \ correspond to the digest-string\n   calculated by the verifier.  This response\
    \ code is defined by the\n   following information, which has been added to the\
    \ method and\n   response-code sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n\
    \         Response Code Number: 438\n         Default Reason Phrase: Invalid Identity\
    \ Header\n"
- title: 14.6.  Identity-Info Parameters
  contents:
  - "14.6.  Identity-Info Parameters\n   The IANA has created a new registry for Identity-Info\
    \ headers.  This\n   registry is to be prepopulated with a single entry for a\
    \ parameter\n   called 'alg', which describes the algorithm used to create the\n\
    \   signature that appears in the Identity header.  Registry entries must\n  \
    \ contain the name of the parameter and the specification in which the\n   parameter\
    \ is defined.  New parameters for the Identity-Info header\n   may be defined\
    \ only in Standards Track RFCs.\n"
- title: 14.7.  Identity-Info Algorithm Parameter Values
  contents:
  - "14.7.  Identity-Info Algorithm Parameter Values\n   The IANA has created a new\
    \ registry for Identity-Info 'alg' parameter\n   values.  This registry is to\
    \ be prepopulated with a single entry for\n   a value called 'rsa-sha1', which\
    \ describes the algorithm used to\n   create the signature that appears in the\
    \ Identity header.  Registry\n   entries must contain the name of the 'alg' parameter\
    \ value and the\n   specification in which the value is described.  New values\
    \ for the\n   'alg' parameter may be defined only in Standards Track RFCs.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The authors would like to thank Eric Rescorla,\
    \ Rohan Mahy, Robert\n   Sparks, Jonathan Rosenberg, Mark Watson, Henry Sinnreich,\
    \ Alan\n   Johnston, Patrik Faltstrom, Paul Kyzviat, Adam Roach, John Elwell,\n\
    \   Aki Niemi, and Jim Schaad for their comments.  Jonathan Rosenberg\n   provided\
    \ detailed fixes to innumerable sections of the document.  The\n   bit-archive\
    \ presented in Appendix B follows the pioneering example of\n   RFC 4475 [16].\
    \  Thanks to Hans Persson and Tao Wan for thorough nit\n   reviews.\n"
- title: Appendix B.  Bit-Exact Archive of Examples of Messages
  contents:
  - "Appendix B.  Bit-Exact Archive of Examples of Messages\n   The following text\
    \ block is an encoded, gzip-compressed TAR archive\n   of files that represent\
    \ the transformations performed on the examples\n   of messages discussed in Section\
    \ 10.  It includes for each example:\n   o  (foo).message: the original message\n\
    \   o  (foo).canonical: the canonical string constructed from that\n      message\n\
    \   o  (foo).sha1: the SHA1 hash of the canonical string (hexadecimal)\n   o \
    \ (foo).signed: the RSA-signed SHA1 hash of the canonical string\n      (binary)\n\
    \   o  (foo).signed.enc: the base64 encoding of the RSA-signed SHA1 hash\n   \
    \   of the canonical string as it would appear in the request\n   o  (foo).identity:\
    \ the original message with the Identity and\n      Identity-Info headers added\n\
    \   Also included in the archive are two public key/certificate pairs,\n   for\
    \ atlanta.example.com and biloxi.example.org, respectively,\n   including:\n \
    \  o  (foo).cer: the certificate of the domain\n   o  (foo).privkey: the private\
    \ key of the domain\n   o  (foo).pubkey: the public key of the domain, extracted\
    \ from the\n      cert file for convenience\n   To recover the compressed archive\
    \ file intact, the text of this\n   document may be passed as input to the following\
    \ Perl script (the\n   output should be redirected to a file or piped to \"tar\
    \ -xzvf -\").\n   #!/usr/bin/perl\n   use strict;\n   my $bdata = \"\";\n   use\
    \ MIME::Base64;\n   while(<>) {\n    if (/-- BEGIN MESSAGE ARCHIVE --/ .. /--\
    \ END MESSAGE ARCHIVE --/) {\n        if ( m/^\\s*[^\\s]+\\s*$/) {\n         \
    \   $bdata = $bdata . $_;\n        }\n     }\n   }\n   print decode_base64($bdata);\n\
    \   Alternatively, the base-64 encoded block can be edited by hand to\n   remove\
    \ document structure lines and fed as input to any base-64\n   decoding utility.\n"
- title: B.1.  Encoded Reference Files
  contents:
  - "B.1.  Encoded Reference Files\n   -- BEGIN MESSAGE ARCHIVE --\n   H4sICFfaz0QCA25ld2lkZW50LnRhcgDsW0us5NhZ7gUSwqiF2CAhFikiIQhFt992\n\
    \   +U46it+u8qPK5Uc9WPlVfj/KdpXtomEDCxaAhFggISE2WSHCIoIFioQQC8gqAhRA\n   QQTY8JJAbMgGIYTv7b7T09PT0xNl+mqS3F8qVd3jY/uc85//+87/nXOLoIv9oGjB\n\
    \   B2/PIAiDSBwfv1GERInxG8EwAh6/37UHMIQRKIljCI4+gGCUGKtP8Ad3YKemderJ\n   5EFSBW1QN2Xxmnp5GtblqXqUPfIffBdZcet/p82conUee0H9sfsfhiACw17nfwQa\n\
    \   y+Dra+MkQGFkrI+TOPJgAt37/63bo2tjeHGuTVh+bc6FOUub/E0poM7nLGqyLJ06\n   Id3NGTocPxytMWF6jNJYpDqIoXVLoDlmr+pNx+o7ztZ1ke8WtnXhFUClU5GGLZ6l\n\
    \   O3YN8T3P0Usm1GyG9lQGEiBXFE6+yPecSSvPykuV4TPB5ne9xNEO8KxQVXnk3cqn\n   /TaK3C3T7A08cRGokyJPUzmrV7k5pHK7i5bQyOambNcDLxUmH9zMD2sl8FGa+WGt\n\
    \   BG6bGe5nHafvFnK5n0dnT6N1nmF0mgt3EK3OxQVdiuMzZrNOhPxNOF37W7w4LmsL\n   OA0Mpeqt7RTKTrDX1CztZgezbM7rLlvQeBnhWzWOV5qDZEdMahLZTo8Wq0oZOL4X\n\
    \   FgkgMhY4pNBdU53sHVvlaIX5TjqH0+JkYXAXmmzgSI7H9N3RvHingrIOAUIzCph4\n   GhsdHGDwET+WCO5SuDtwxXKNvneGYrWiQ5WhaTEJXb0LXb6Trgd2DS0ZZscLWm6B\n\
    \   au3aO48HZK4GEWgzN2oRTuBaG/vLXA+aZKh8kDBYyJj7bHWREXgjMWxIgFQrxPyx\n   b3eUc3EEH6iEptuYL1zFRCpr22rPXujFs9EPx0s+o67pbhzRa/eOjvEZX+wjt1hH\n\
    \   gKpDHdvdXJA5er1Y22tRXXed+KwyxzFadFtZyW1st4E7V7ROO4Rqw5Cnx6ncXb/Z\n   5ztdUOmx34dX3Ck8cydPc76+a5uO4XLTMI9Q3iIwDJBOloNbUahd5OK7FnQu637t\n\
    \   L/cQdlSHel5tRVjh84Jfhl7pDfV2zZyPeEVs3D3t8XoKAVzDo3YAad6sp4r8nCUb\n   UmxUUWAL9lRiS848gHAm+nZNcQF78RIY2lk6qq6DnFO30Q4B2JaLG2WTkcZ2uVx7\n\
    \   ezqGS4vqngA30c5r3KsI8ODevsvtFf6v6vicBsMd8j+ME+Qt/0PjAnCsT5AQes//\n   d8z/a4OerNZze4z+iczvXqwBtvrI+7TMhDq3WqlMK9nlKt3a0z2RHGGlCQ8jMtub\n\
    \   akAY2zocFupKgghFgbyFoS8BZx7Yl3mZXDZt5ZwYcj5kezmjEwY/YCO4rk+lFQc+\n   26mK7GYb+rhviUDaVKy2X5DZUvOAOd8VeYQUtOfJ6QxVKtCW0DakDRBDOb3cIk3h\n\
    \   F7toGs5wBFldupDkxU1TXS7dnKN1mgFumFWGNmhb8AJH0omt08VC23Jtj1O0A9sn\n   ZMFvA6KMp8s6FYZmkbj7RdcoudzWYdsCq+3SmrVIvq9iqJOxaIu1+6ho406UU2vF\n\
    \   ohHFJNVUDOr4sEIxeK0O6nJKHFZhclxeLK4DpvUqSdSqG1+eerx35ELXrPfF5gzq\n   BWs4joD2qSUehFTp8aXsremUp0mrLxp+tnVMFALaFWhZHg6HWorIohz2um5KZcV4\n\
    \   QUcNh4BdC9HZV8ikckSn5WM83neiONKavbQlS4MlANoplaQn67JbMLQ2XSPumQa1\n   OD9iBLYPiyDjudXR4en9xuHQdHmIDGp6VsjyyBvTE85DwIJMty65T2PDtkJqa4Gz\n\
    \   Va/KPcjRF8i38qUytVhdmrEUb1rqHDnx7lFyGd+2RC1FCYwFOMErfKO3oymKyceF\n   n8Q7oyfs1eqMEFsqJw1oOfhmaoQNCmJluerLmeSox20+g1idmdZA7zKolVXLMvKY\n\
    \   TpCp3KwzlSHYhjpmBCGHXZEp1CnlI0nalZdxHPxtUDLsEFlNGfqGBRCgY9CCd97w\n   YpuQ4HlY8Kyus6wBZ3LIb0tNXx2XmpOdd9EwqPv1VlB8Dgvdbr2S4dNWBnZVirLp\n\
    \   Qbgsh0MSKJ646reXI3K8nKSLaHL9nlrRQdVtsbWRviDVDwyrTzD+n9yPGf7fhP8j\n   5kO3+I/AN/k/gZHYPf7fMf6vLEaZs++FfvGg0pDIGkfRmLsj2PLX6R5NY6JGcywT\n\
    \   6x9OCcDrOOGjUgLwOk74qJQAvJYT3o3O93f6e3b958ZZ2cdvQ/55s/6DvEf/QbBr\n   /YeAifv4/yToP3DCsnQyfZP+s32j/mOO6Tp3ub75uf6TLipXpDDH5DWVbp7VCzve\n\
    \   sGxrnfDuWEEErgvprjN2eda4aFS9PzVXGWzLmTSsmvSgcTQyfgYtK6/LkOsy4D2F\n   nX15k4AAm6p+k9Y/FxD2LOBs+nMgph+o/YgXev+u9pM/746BZ4EotJ7YZ0qunQHX\n\
    \   ZJni8v5B4wWaXjKJTnfhLmWvRYMzIXYbFjI5jFzInZwlZZR0gmoAGoi39e6ENYEk\n   HsO0UyJ7umXRkl/i+LGOLxE6zD3bkFOqoJYZrS3Mo5bYjjSc16cLjwvABjZ3Tbgw\n\
    \   EIHu51MYjruBLihkPUwjBwTDKJjJ0MqZLpQpjMVG40i2HhaHDtNTcH08ZDpASGdm\n   Vh2T7DzUC/SINbE6epSnaWfJNGP36oT2b+QcHeOFULeg/XStYOQGpFdc6+EMcDBK\n\
    \   fXviBR7sukN3IxIljBR2fkm/UvlF3SHaEOu9Kng98MJNO5PObPM9s20E9IU2zrbV\n   NVXduLbrRP35fLmVfYCXdZ9mrHGr+yzi5y5+n7CIsCNRdBx901oTYGirG/vMgJcP\n\
    \   mP/XeqHOxIMszduZuT2I2qEqFtsYT9j4suzz3WwHhFkxa4eV4ATDkcJN0Tub7Obi\n   l4xiVww3PVTrTb0F53O84Qlbcl16TBnsXHb33UWn26oCVojgnBJk1lLYPuAkDTkf\n\
    \   L8mhkBJ2iWCpiC5OB8ScQXFWUTvJ47o+sYS6nRFWkbHTIfaBwTGDU7PBxRN5hsMn\n   97rPvb3K/29B/nmz/kOit/wPI+NaYFz/49j9/s8nR/8Jb/UfFixdZqes1VXSpDV9\n\
    \   3CxjcUVb/RwFc6SNybjHPOfImvRJ2OKeEoQ6QBb58aQspcM86u350UQOEGHRULYs\n   Ec0uDzIlkqqZ2q6txQOdKTuL4xNyu1G4OXtA95ICEEINTlmB7GqdqrH0TG7jhdyX\n\
    \   vs2yPshFrEmJ1dTmymAmDflxuQHlpgjqeJi/pP8syEMjzOWtnCabMJmljbhsIwM1\n   CpjqVwY78D7TH/gcWSUkqF0uQRaDK2/pxB6UAouR+r3iqCEHiQ/mogxSvcX05ukQ\n\
    \   6jt7cTwPEr9uiHq7BWMT2xU51cIUhPOxTu0rqannADguEKwdDeu1GNJz6bxXbOVy\n   nFKywvH7qaS7J1ZZbIUp4WYQ7+LMtf5DoESp0loF6Q4K5LsNryOnNhebXZ9ujcPA\n\
    \   uPDMZJcd2w5Q4TNrBLsMy4WAaO7eoGbKZSo6CB4d5mIHLiQZKDjKXfKzmXWj/zBr\n   o/IxNzemOTZbgzDarnmDbqXj4GtxsYVSA1xHnVSTeSqZFpqCKiD0etuj2BwV5Yuz\n\
    \   79UCoglCNqgzaEh+IUyD1Y2YIgak3kTDfnaKW2XV7jkvYzcRL0vAkdal3OL3Z0tA\n   bEmp3VOqKMtQsmpJcxDMmytnzEcHh7WtoB1yzTsNZhfJCYJ1Ap3SS+ACJj3MV5mG\n\
    \   Rp0y1Zos25ebOT47nU8kSB8RD/UuR8cWGddFYbKR2F0op5BLi2jaLdE8BigUVLYb\n   E/b8eGdXOeNJ3M1I51WYCsm035/wcEMbO/yUnKcCq66gTedIeGQW29O0lQNgtUB9\n\
    \   ZL7Yy71YZETcymuNFIN1RK0MGUr3Y5osBHZ9bhaYVlYvEewnVwN6Bf8/fvnnW9N/\n   yBv9B8Wge/z/jtB/Xk8JwOs44aNSAvA6TviolAC8lhPu9Z9X4n8IHntOURax52R3\n\
    \   G//jAvD5+S8MxbGb9R8K38f/nVgTV1du6X7+OfwHvZNXWfC4rMOn15ecLPaCz9/u\n   Ddxe9cr8qTPDXMwjiYAgRtx+iqDwhNnxT83o9DMTBJ4IgTtBRkdPYOwKpq5weCKq\n\
    \   5tOn9wnXJzn+b37F7cdM/2/M/2AUe3H+E7vZ/0eg+/2fO7ExZicvAr3yUPTxB0T7\n   xJivQOQx9BCwY+fq9i/QVIwJTI2/HiOPsXfc2im86MmFikTMlQunifwGHm9Rnf6R\n\
    \   UNadU/vN1YQcS4S6zK8mTOlOPvt6/PncO60TPnEIb4Z7h4eAWV5N6OtGPrvntcD0\n   7LaxVTMUgkkSewhwThtcTT4UmB4CrJNlj+bc1eRlXBsvGMHxavIc3h4C8+chcjX5\n\
    \   dHPGWbOEcPlYGXkrtajv8fEShNmNaezbQkRjewoX+alWtjYo5e2gGaTS1iHlZ326\n   uZQPgckLCyzSJ5f2TOoC0+RK10bj1szDVccKicPn6sDPUZ80Bg2BB40rEX4NLs9h\n\
    \   20HKCfeaefXSw6rVcRnCp23hXyRXJPM1sc4oprAi6XSw126Fw2qBdlB4sJonn37R\n   p0fz4jCO8mejtq2aKxB81Sfv2SX63DtOFj6pG+dREznwOE5l0Y6PeaQERdhGV5Nx\n\
    \   6O7R9TsM//OgaZwwuOP9Pwh7cf57hH7i5vw3gd/j/z3+fyz4/1Gh/XsSwV6K/2sk\n   fwvveFP8QyRxm/9hY43r+Efg+/Ofd2KGRMM/9VLu/5knkwM5IyjUP6A4jPuI5wfU\n\
    \   GEw4jsEocX2ghnQdGMbgA3bP8N9l8R+HReDfefwj7/7/H0ZCOPHs/A95H/93YV/6\n   P0b7Veqnf3f9W3/5n9/42+/75f/65g/4f3X4+p/9w0/8wt8Mv/97f/jX/zt88Stf\n\
    \   +/Ljv/unb379+OvZvw3aN/7jn59+6vt/Q7n6sU3/RS36oT/5cS+a/8pXGLL7gy+R\n   eY1dET/8qa/+8Q9Wf/HlP6r/9DNf+J9f+8Wf/c3f/vs/z4p/Eb8Q/PePfu2Xfu53\n\
    \   rB/59381fvIfH05+Xr6PwE9c/D8OCu9u4/+F/nt9BOBG/yXuz//djf77bYoYwLcr\n   XADfilhxv+B4a/EfF+e4fTtbQG+Kfxy6Pv+D4SiMosTN+V9yzAnu4/9O4v9DN3k+\n\
    \   ZHfoffs/6JgQ4NRkrtlz84N2gdArCLmC0JtdoDfrDU/PT8bsu3xiNUFN/3875/Pa\n   NBiH8Yt6CBS0Q2SDYcYEkSl9k75Nmkmn7ebWde2WLm3646Jp2q7FtU2btq496EGc\n\
    \   KMgu4sH5a4dN8NccCMLYP6AMwcv+Bg/e1NMuZimTdlvXyWxx4/s5pQ0N5SXPk/d9\n   nrclaSuHrBhbaKb6cHiUHOYxWe8SBkK1CTFVTWbSpDDAGwjZ1vATeRvaWPWnbFIh\n\
    \   msyQmKNYmhz38Sa7yG+ckGy5vJKSlF5E8v0ev8mq3bwHPCTYqv9mVEAN9//p+Z+m\n   f9qCMMvqv/+k4fnfEiqCJbcJfVPnuyR/9XS0YxBorSR4jTK/zWywKUlfjUftlEvW\n\
    \   a4qqzKsSE0pyvrf629Ubir6awigcGnVEnP0IiZ5wjr4ezjNiqr/IZ9IBl2eo6PU5\n   BrITiUwg5p5yxcsOWqKUKXvOLE7kHEhQBbtU0/Ek4+p4NDnGZ7zh0FiJvpETJxKF\n\
    \   hKx6Is6AXxicGmYUJmvxjXmDTk+qzBSuZMxq0aUKTszlE6WhdM3FBkU5XZLCPT2l\n   8UlHKOT1ubOBsqtnREzwI5G436TkSgkxzYVkxr9bYbTDCFT/r0y9yshXUrRhlxRF\n\
    \   G0sprxm2SY0q2/NYCrMGwkDAo6GZ/t+MCqhh/4/MVf2Pvv7DDMz/wP8Pg/+DyQEH\n   yP+bUQE23P+JqD/zfxpZ9P5fewv8vwXo/d/W7OecjaRZhGWaZq04LtGUjCPIwkUQ\n\
    \   krUXmI1xEstIUQmbOVD/IdN/EyrAPfZ/Ff2z+v5P7RD03wpit+2TyoevQvtisv3j\n   fJz48e1pxN3xs+1I74vpO89MxqurnY/XnlxeLFx702lcIjvurZ8ods/MHQtevPD+\n\
    \   bbBr+dR5amnN25XtflV+/fCLPbs62/fO+OD7yqzx9EzqbtfLk4GznxZurp+JHZ0+\n   7l5+tPr8vtj2OfXr0sLKnHgrqM6DAv9H/f/bCnCP/Z+ufzOm9PyfhfVfS9hvJkXs\n\
    \   N4ci/iZ7gtkGAAAAAAAAAAAAAAAAAAAAAAAAAABAPX4DY+BfEQB4AAA=\n   -- END MESSAGE\
    \ ARCHIVE --\n"
- title: Appendix C.  Original Requirements
  contents:
  - "Appendix C.  Original Requirements\n   The following requirements were crafted\
    \ throughout the development of\n   the mechanism described in this document.\
    \  They are preserved here\n   for historical reasons.\n   o  The mechanism must\
    \ allow a UAC or a proxy server to provide a\n      strong cryptographic identity\
    \ assurance in a request that can be\n      verified by a proxy server or UAS.\n\
    \   o  User agents that receive identity assurances must be able to\n      validate\
    \ these assurances without performing any network lookup.\n   o  User agents that\
    \ hold certificates on behalf of their user must be\n      capable of adding this\
    \ identity assurance to requests.\n   o  Proxy servers that hold certificates\
    \ on behalf of their domain\n      must be capable of adding this identity assurance\
    \ to requests; a\n      UAC is not required to support this mechanism in order\
    \ for an\n      identity assurance to be added to a request in this fashion.\n\
    \   o  The mechanism must prevent replay of the identity assurance by an\n   \
    \   attacker.\n   o  In order to provide full replay protection, the mechanism\
    \ must be\n      capable of protecting the integrity of SIP message bodies (to\n\
    \      ensure that media offers and answers are linked to the signaling\n    \
    \  identity).\n   o  It must be possible for a user to have multiple AoRs (i.e.,\n\
    \      accounts or aliases) that it is authorized to use within a\n      domain,\
    \ and for the UAC to assert one identity while\n      authenticating itself as\
    \ another, related, identity, as permitted\n      by the local policy of the domain.\n"
- title: References
  contents:
  - 'References

    '
- title: Normative References
  contents:
  - "Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
    \ Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n       \
    \  Levels\", BCP 14, RFC 2119, March 1997.\n   [3]   Peterson, J., \"A Privacy\
    \ Mechanism for the Session Initiation\n         Protocol (SIP)\", RFC 3323, November\
    \ 2002.\n   [4]   Rosenberg, J. and H. Schulzrinne, \"Session Initiation Protocol\n\
    \         (SIP): Locating SIP Servers\", RFC 3263, June 2002.\n   [5]   Peterson,\
    \ J., \"Session Initiation Protocol (SIP) Authenticated\n         Identity Body\
    \ (AIB) Format\", RFC 3893, September 2004.\n   [6]   Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n         Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [7]   Housley, R., \"Cryptographic Message Syntax (CMS) Algorithms\"\
    ,\n         RFC 3370, August 2002.\n   [8]   Josefsson, S., \"The Base16, Base32,\
    \ and Base64 Data Encodings\",\n         RFC 3548, July 2003.\n   [9]   Housley,\
    \ R., Polk, W., Ford, W., and D. Solo, \"Internet X.509\n         Public Key Infrastructure\
    \ Certificate and Certificate\n         Revocation List (CRL) Profile\", RFC 3280,\
    \ April 2002.\n   [10]  Housley, R. and P. Hoffman, \"Internet X.509 Public Key\n\
    \         Infrastructure Operational Protocols: FTP and HTTP\", RFC 2585,\n  \
    \       May 1999.\n   [11]  Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n"
- title: Informative References
  contents:
  - "Informative References\n   [12]  Jennings, C., Peterson, J., and M. Watson, \"\
    Private Extensions\n         to the Session Initiation Protocol (SIP) for Asserted\
    \ Identity\n         within Trusted Networks\", RFC 3325, November 2002.\n   [13]\
    \  Schulzrinne, H., \"The tel URI for Telephone Numbers\", RFC 3966,\n       \
    \  December 2004.\n   [14]  Faltstrom, P. and M. Mealling, \"The E.164 to Uniform\
    \ Resource\n         Identifiers (URI) Dynamic Delegation Discovery System (DDDS)\n\
    \         Application (ENUM)\", RFC 3761, April 2004.\n   [15]  Peterson, J.,\
    \ \"Retargeting and Security in SIP: A Framework and\n         Requirements\"\
    , Work in Progress, February 2005.\n   [16]  Sparks, R., Ed., Hawrylyshen, A.,\
    \ Johnston, A., Rosenberg, J.,\n         and H. Schulzrinne, \"Session Initiation\
    \ Protocol (SIP) Torture\n         Test Messages, RFC 4475, May 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jon Peterson\n   NeuStar, Inc.\n   1800 Sutter St\n  \
    \ Suite 570\n   Concord, CA  94520\n   US\n   Phone: +1 925/363-8720\n   EMail:\
    \ jon.peterson@neustar.biz\n   URI:   http://www.neustar.biz/\n   Cullen Jennings\n\
    \   Cisco Systems\n   170 West Tasman Drive\n   MS: SJC-21/2\n   San Jose, CA\
    \  95134\n   USA\n   Phone: +1 408 902-3341\n   EMail: fluffy@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
