Abstract ISO 10646 defines a large character set called the Universal Character Set (UCS), which encompasses most of the world's writing systems.
The same set of codepoints is defined by Unicode, which further defines additional character properties and other implementation details.
By policy of the relevant standardization committees, changes to Unicode and amendments and additions to ISO/IEC 646 track each other, so that the character repertoires and code point assignments remain in synchronization.
The current representation formats for Unicode (UTF 7, UTF 8, UTF 16) are not storage and computation efficient on platforms that utilize the 9 bit nonet as a natural storage unit instead of the 8 bit octet.
This document describes a transformation format of Unicode that takes advantage of the nonet so that the format will be storage and computation efficient.
A number of Internet sites utilize platforms that are not based upon the traditional 8 bit byte or octet.
One such platform is the PDP  10, which is based upon a 36 bit word.
On these platforms, it is wasteful to represent data in octets, since 4 bits are left unused in each word.
The 9 bit nonet is a much more sensible representation.
Although these platforms support IETF standards, many of these platforms still utilize a text representation based upon the septet, which is only suitable for [US ASCII]
(although it has been used for various ISO 10646 national variants).
To maximize international and multi lingual interoperability, the IAB has recommended ([IAB CHARACTER]) that [ISO 10646] be the default coded character set.
Although other transformation formats of [UNICODE] exist, and conceivably can be used on nonet oriented machines (most notably [UTF 8]), they suffer significant disadvantages:
[UTF 8] requires one to three octets to represent codepoints in the Basic Multilingual Plane (BMP), four octets to represent [UNICODE] codepoints outside the BMP, and six octets to represent non [UNICODE] codepoints.
When stored in nonets, this results in as many as four wasted bits per [UNICODE] character.
[UTF 16] requires a hexadecet to represent codepoints in the BMP, and two hexadecets to represent [UNICODE] codepoints outside the BMP.
When stored in nonet pairs, this results in as many as four wasted bits per [UNICODE] character.
This transformation format requires complex surrogates to represent codepoints outside the BMP, and can not represent non [UNICODE] codepoints at all.
[UTF 7] requires one to five septets to represent codepoints in the BMP, and as many as eight septets to represent codepoints outside the BMP.
When stored in nonets, this results in as many as sixteen wasted bits per character.
This transformation format requires very complex and computationally expensive shifting and "modified BASE64" processing, and can not represent non [UNICODE] codepoints at all.
By comparison, UTF 9 uses one to two nonets to represent codepoints in the BMP, three nonets to represent [UNICODE] codepoints outside the BMP, and three or four nonets to represent non [UNICODE] codepoints.
There are no wasted bits, and as the examples in this document demonstrate, the computational processing is minimal.
Transformation between [UTF 8] and UTF 9 is straightforward, with most of the complexity in the handling of [UTF 8].
It is hoped that future extensions to protocols such as SMTP will permit the use of UTF 9 in these protocols between nonet platforms without the use of [UTF 8] as an "on the wire" format.
Similarly, transformation between [UNICODE] codepoints and UTF 18 is also quite simple.
Although (like UCS 2) UTF 18 only represents a subset of the available [UNICODE] codepoints, it encompasses the non private codepoints that are currently assigned in [UNICODE].
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, RFC 2119 [KEYWORDS].
Overview UTF 9 encodes [UNICODE] codepoints in the low order 8 bits of a nonet, using the high order bit to indicate continuation.
[UNICODE] codepoints in the range
([US ASCII] and Latin 1) are represented by a single nonet; codepoints in the range U 0100
U FFFF (the remainder of the BMP) are represented by two nonets; and codepoints in the range U 1000 U 10FFFF
(remainder of [UNICODE]) are represented by three nonets.
Non [UNICODE] codepoints in [ISO 10646]
(that is, codepoints in the range 0x110000 0x7fffffff) can also be represented in UTF 9 by obvious extension, but this is not discussed further as these codepoints have been removed from [ISO 10646] by ISO.
UTF 18 encodes [UNICODE] codepoints in the Basic Multilingual Plane (BMP, plane 0), Supplementary Multilingual Plane (SMP, plane 1), Supplementary Ideographic Plane (SIP, plane 2), and Supplementary Special purpose Plane (SSP, plane 14) in a single 18 bit value.
It does not encode planes 3 though 13, which are currently unused; nor planes 15 or 16, which are private spaces.
Normally, UTF 9 and UTF 18 should only be used in the context of 9 bit storage and transport.
Although some protocols, e.g., [FTP], support transport of nonets, the current IETF protocol suite is quite deficient in this area.
The IETF is urged to take action to improve IETF protocol support for nonets.
A UTF 9 stream represents [ISO 10646] codepoints using 9 bit nonets.
The low order 8 bits of a nonet is an octet, and the high order bit indicates continuation.
UTF 9 does not use surrogates; consequently a UTF 16 value must be transformed into the UCS 4 equivalent, and U D800 U DBFF are never transmitted in UTF 9.
codepoint value are then copied into successive UTF 9 nonets, starting with the most significant non zero octet.
All but the least significant octet have the continuation bit set in the associated nonet.
LATIN CAPITAL LETTER A WITH GRAVE
<Plane 16 Private Use, Last>
375 0x345ecf1b (UCS 4 value not in [UNICODE])
464 536 717 33 4.
A UTF 18 stream represents [ISO 10646] codepoints using a pair of 9 bit nonets to form an 18 bit value.
UTF 18 does not use surrogates; consequently a UTF 16 value must be transformed into the UCS 4 equivalent, and U D800 U DBFF are never transmitted in UTF 18.
[UNICODE] codepoint values in the range
U 0000 U 2FFFF are copied as the same value into a UTF 18 value.
[UNICODE] codepoint values in the range
U E0000 U EFFFF are copied as values 0x30000 0x3ffff; that is, these values are shifted by 0x70000.
Other codepoint values can not be represented in UTF 18.
LATIN CAPITAL LETTER A WITH GRAVE
U 0391    GREEK CAPITAL LETTER ALPHA
[UNICODE] Codepoint to UTF 9 Conversion
The following routines demonstrate conversion from UCS 4 to UTF 9.
For simplicity, these routines do not do any validity checking.
Routines used in applications SHOULD reject invalid UTF 9 sequences; that is, the first nonet with a value of 400 octal (0x100), or sequences that result in an overflow (exceeding 0x10ffff for [UNICODE]), or codepoints used for UTF 16 surrogates.
; Return UCS 4 value from UTF 9 string (PDP 10 assembly version) ; Accepts: P1/ 9 bit byte pointer to UTF 9 string ; Returns  1:
Accepts: pointer to pointer to UTF 9 string
nonet pointer updated  / UINT31 UTF9 to UCS4 (UINT9   utf9PP)
UTF 9 to UCS 4 Conversion
The following routines demonstrate conversion from UTF 9 to UCS 4.
For simplicity, these routines do not do any validity checking.
Always, P1/ updated byte pointer ; Clobbers T1, T2; (T1, T2) must be an accumulator pair
(UINT9  utf9P,UINT31 ucs4) { if (ucs4 > 0x100) { if (ucs4 > 0x10000) { if (ucs4 > 0x1000000)  utf9P    0x100
((ucs4 >> 24) & 0xff);
((ucs4 >> 16) & 0xff)
As the sample routines demonstrate, it is quite simple to implement UTF 9 and UTF 18 on a nonet based architecture.
More sophisticated routines can be found in ftp://panda.com/tops 20/utools.mac.txt or from lingling.panda.com via the file <UTF9>UTOOLS.MAC via ANONYMOUS [FTP].
We are now in the process of implementing support for nonet based text files and automated transformation between septet, octet, and nonet textual data.
As with UTF 8, UTF 9 can represent codepoints that are not in [UNICODE].
Applications should validate UTF 9 strings to ensure that all codepoints do not exceed the [UNICODE] maximum of U 10FFFF.
The sample routines in this document are for example purposes, and make no attempt to validate their arguments, e.g., test for overflow ([UNICODE] values great than 0x10ffff) or codepoints used for surrogates.
Besides resulting in invalid data, this can also create covert channels.
The IANA shall reserve the charset names "UTF 9" and "UTF 18" for future assignment.
