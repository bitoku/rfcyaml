- contents:
  - "                   Addressing Record-Route Issues in\n                 the Session
    Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   A typical function of a Session Initiation Protocol (SIP) Proxy
    is to\n   insert a Record-Route header into initial, dialog-creating requests\n
    \  in order to make subsequent, in-dialog requests pass through it.\n   This header
    contains a SIP Uniform Resource Identifier (URI) or SIPS\n   (secure SIP) URI
    indicating where and how the subsequent requests\n   should be sent to reach the
    proxy.  These SIP or SIPS URIs can\n   contain IPv4 or IPv6 addresses and URI
    parameters that could\n   influence the routing such as the transport parameter
    (for example,\n   transport=tcp), or a compression indication like \"comp=sigcomp\".\n
    \  When a proxy has to change some of those parameters between its\n   incoming
    and outgoing interfaces (multi-homed proxies, transport\n   protocol switching,
    or IPv4 to IPv6 scenarios, etc.), the question\n   arises on what should be put
    in Record-Route header(s).  It is not\n   possible to make one header have the
    characteristics of both\n   interfaces at the same time.  This document aims to
    clarify these\n   scenarios and fix bugs already identified on this topic; it
    formally\n   recommends the use of the double Record-Route technique as an\n   alternative
    to the current RFC 3261 text, which describes only a\n   Record-Route rewriting
    solution.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Problem Statement ...............................................4\n      3.1.
    Background: Multi-Homed Proxies ............................4\n      3.2. Identified
    Problems ........................................5\n   4. Record-Route Rewriting
    ..........................................6\n   5. Double Record-Routing ...........................................6\n
    \  6. Usage of Transport Protocol Parameter ..........................10\n      6.1.
    UA Implementation Problems and Recommendations ............10\n      6.2. Proxy
    Implementation Problems and Recommendations .........14\n   7. Conclusion .....................................................15\n
    \  8. Security Considerations ........................................16\n   9.
    Acknowledgments ................................................16\n   10. References
    ....................................................17\n      10.1. Normative
    References .....................................17\n      10.2. Informative References
    ...................................17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Over the years, it has been noticed in interoperability
    events like\n   SIPit, that many implementations had interoperability problems
    due to\n   various Record-Routing issues or misinterpretations of [RFC3261]; in\n
    \  particular, when a change occurs between the incoming and outgoing\n   sides
    of a proxy: transport protocol switching, \"multi-homed\" proxies\n   (including
    IPv4 to IPv6 interface changes), etc.  Multiple documents\n   have addressed the
    question, each of them generally providing an\n   adequate recommendation for
    its specific use case, but none of them\n   gives a general solution or provides
    a coherent set of\n   clarifications:\n      - [RFC3486], Section 6, describes
    the double Record-Routing as an\n        alternative to the Record-Route rewriting
    in responses.  This\n        document is limited in scope to the \"comp=sigcomp\"
    parameter\n        when doing compression with Signalling Compression (SIGCOMP).\n
    \     - [RFC3608], Section 6.2, recommends the usage of double Record-\n        Routing
    instead of the rewriting solution described in [RFC3261]\n        for \"Dual-homed\"
    proxies.  Those are defined as \"proxies\n        connected to two (or more) different
    networks such that requests\n        are received on one interface and proxied
    out through another\n        network interface\".\n      - Section 3.1.1 of [V6Tran]
    mandates double Record-Routing for\n        multi-homed proxies doing IPv4/IPv6
    transitions, when the proxy\n        inserts IP addresses in the Record-Route
    header URI.\n   The observed interoperability problems can be explained by the
    fact\n   that, despite these multiple documents, the RFC 3261 description has\n
    \  not been changed, and many implementations don't support extensions\n   like
    Service-Route ([RFC3608]) or SIGCOMP ([RFC3486]).\n   This document also aims
    to clarify an identified bug referenced in\n   [BUG664].  In particular, it takes
    into account the [BUG664]\n   recommendation, which says that \"the language that
    describes this,\n   needs to clearly capture that this applies to all types of
    different\n   interface on each side issues, including IPv4 on one side and IPv6
    on\n   the other\".\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - '3.  Problem Statement

    '
  - contents:
    - "3.1.  Background: Multi-Homed Proxies\n   A multi-homed proxy is a proxy connected,
      like a router, to two or\n   more different networks, with an interface into
      each network, such\n   that traffic comes \"in\" one network and goes \"out\"
      a different one.\n   A simple example is shown here:\n                   +-----+\n
      \                  | UA1 |\n                   +--+--+\n                      |
      .66\n       192.0.2.64/26  |\n      ----------------+---+-...\n                           |\n
      \                          | .65\n                         +-+-+\n                         |
      P |\n                         +-+-+\n                           | .129\n                           |
      \         192.0.2.128/26\n                     ...---+------+------------------\n
      \                                 |\n                                  | .130\n
      \                              +--+--+\n                               | UA2
      |\n                               +--+--+\n                   Figure 1: Multi-Homed
      Proxy Illustration\n   UA1 has one interface with IP address 192.0.2.66.\n   The
      Proxy P has two interfaces and two addresses:\n      --192.0.2.65\n      --192.0.2.129\n
      \  UA2 has one interface with address, 192.0.2.130.  There is\n   potentially
      no IP-level route between UA1 and UA2 (pinging or\n   traceroute does not work
      between these two hosts).  They live in\n   entirely different subnetworks.
      \ But they can still exchange SIP\n   messages, because P is a SIP Proxy.  This
      works in SIP because P can\n   apply Record-Routing.\n   In most cases, there
      is still some IP connectivity between UA1 and\n   UA2, but SIP proxy has to
      manage the SIP traffic between the two\n   different \"sides\", e.g., with two
      different IP addresses, or one side\n   using SIGCOMP and the other side not,
      etc.\n"
    title: '3.1.  Background: Multi-Homed Proxies'
  - contents:
    - "3.2.  Identified Problems\n   Handling of the Record-Route header in SIP Proxies
      is specified by\n   following sections of [RFC3261]:\n   On the request processing
      side, [RFC3261], item 4 of Section 16.6\n   states that:\n      The URI placed
      in the Record-Route header field value MUST be a\n      SIP or SIPS URI. [...]
      \ The URI SHOULD NOT contain the transport\n      parameter unless the proxy
      has knowledge (such as in a private\n      network) that the next downstream
      element that will be in the path\n      of subsequent requests supports that
      transport.\n   Following this statement, it is not clear how to decide when
      the\n   proxy should insert the transport protocol parameter in the Record-\n
      \  Route URI.\n   On the response processing side, [RFC3261] recommends in step
      8 of\n   Section 16.7 that:\n      If the selected response contains a Record-Route
      header field\n      value originally provided by this proxy, the proxy MAY choose
      to\n      rewrite the value before forwarding the response.  This allows the\n
      \     proxy to provide different URIs for itself to the next upstream\n      and
      downstream elements.  A proxy may choose to use this mechanism\n      for any
      reason.  For instance, it is useful for multi-homed hosts.\n      If the proxy
      received the request over Transport Layer Security\n      (TLS), and sent it
      out over a non-TLS connection, the proxy MUST\n      rewrite the URI in the
      Record-Route header field to be a SIPS URI.\n   Note that [RFC5630] has weakened
      the SIP/SIPS URI rewriting\n   requirement in the Record-Route header by removing
      this second\n   paragraph.\n   Indeed, [RFC3261] suggests rewriting the Record-Route
      header in\n   responses.\n   This list highlights the utility of rewriting and
      double Record-\n   Routing techniques that apply for any multi-homed proxy use
      case:\n   whenever the proxy changes its IP address, the transport protocol,
      or\n   the URI scheme between incoming and outgoing interfaces.  Rewriting\n
      \  and double Record-Routing are described, compared, and discussed in\n   Sections
      4 and 5; the specific question of whether or not to insert\n   the transport
      parameter in the Record-Route URI is then discussed in\n   Section 6.\n"
    title: 3.2.  Identified Problems
  title: 3.  Problem Statement
- contents:
  - "4.  Record-Route Rewriting\n   As frequently outlined in IETF mailing list discussions,
    Record-Route\n   rewriting in responses is not the optimal way of handling multi-\n
    \  homed and transport protocol switching situations.  Additionally, the\n   consequence
    of doing rewriting is that the route set seen by the\n   caller is different from
    the route set seen by the callee, and this\n   has at least two negative implications:\n
    \  1) The callee cannot sign the route set, because it gets edited by\n      the
    proxy in the response.  Consequently, end-to-end protection of\n      the route
    set cannot be supported by the protocol.  This means the\n      Internet's principles
    of openness and end-to-end connectivity are\n      broken.\n   2) A proxy must
    implement special \"multi-homed\" logic.  During the\n      request forwarding
    phase, it performs an output interface\n      calculation and writes information
    resolving to the output\n      interface into the URI of the Record-Route header.
    \ When handling\n      responses, the proxy must inspect the Record-Route header(s),
    look\n      for an input interface, and selectively edit them to reference the\n
    \     correct output interface.  Since this lookup has to be done for\n      all
    responses forwarded by the proxy, this technique implies a CPU\n      drag.\n
    \  Therefore, this document recommends using the double Record-Route\n   approach
    to avoid rewriting the Record-Route.  This recommendation\n   applies to all uses
    of Record-Route rewriting by proxies, including\n   transport protocol switching
    and multi-homed proxies.\n"
  title: 4.  Record-Route Rewriting
- contents:
  - "5.  Double Record-Routing\n   The serious drawbacks of the rewriting technique
    explain why the\n   double Record-Routing solution has consequently been recommended
    in\n   SIP extensions like [RFC3486] or [RFC3608].\n   This technique consists
    of inserting before any existing Record-Route\n   header, a Record-Route header
    with the URI reflecting to the input\n   interface, including schemes and/or URI
    parameters, and secondly, a\n   Record-Route header with the URI reflecting to
    the output interface.\n   When processing the response, no modification of the
    recorded route\n   is required.  This is completely backward compatible with [RFC3261].\n
    \  Generally speaking, the time complexity will be less in double\n   Record-Routing
    since, on processing the response, the proxy does not\n   have to do any rewrites
    (and thus, no searching).  Moreover, the\n   handling of in-dialog requests and
    responses requires no special\n   handling anymore.\n   When double Record-Routing,
    the proxy will have to handle the\n   subsequent in-dialog request(s) as a spiral,
    and consequently devote\n   resources to maintain transactions required to handle
    the spiral.\n   What is considered to be a spiraling request is explained in Section\n
    \  6 of [RFC3261].  In order to avoid a spiral, the proxy can be smart\n   and
    scan an extra Route header ahead to determine whether the request\n   will spiral
    through it.  If it does, it can optimize the second\n   spiral through itself.
    \ Even though this is an implementation\n   decision, it is much more efficient
    to avoid spiraling.  So, this\n   means, in Section 16.4, \"Route Information
    Preprocessing\" [RFC3261],\n   implementors can choose that a proxy MAY remove
    two Route headers\n   instead of one when using the double Record-Routing.\n   The
    following example is an extension of the example given in\n   [V6Tran].  It illustrates
    a basic call flow using double Record-\n   Routing in a multi-homed IPv4 to IPv6
    proxy, and annotates the dialog\n   state on each User Agent (UA).  In this example,
    proxy P1,\n   responsible for the domain biloxy.example.com, receives a request\n
    \  from an IPv4-only upstream client.  It proxies this request to an\n   IPv6-only
    downstream server.  Proxy P1 is running on a dual-stack\n   host; on the IPv4
    interface, it has an address of 192.0.2.254.  On\n   the IPv6 interface, it is
    configured with an address of 2001:db8::1.\n   Some mandatory SIP headers have
    been omitted to ease readability.\n       UA1              Proxy \"P1\"               UA2\n
    \     (IPv4)            (IPv4/IPv6)             (IPv6)\n        |                    |
    \                   |\n        |   F1 INVITE        |                    |\n        |------------------->|
    \     F2 INVITE     |\n        |                    |------------------->|\n        |
    \   100 Trying      |                    |\n        |<-------------------|                    |\n
    \       |                    |    F3 200 OK       |\n        |    F4 200 OK       |<-------------------|\n
    \       |<-------------------|                    |\n        |                    |
    \                   |\n        |       F5 ACK       |                    |\n        |------------------->|
    \      F6 ACK       |\n        |                    |------------------->|\n        |
    \                   |                    |\n        |                    |        F7
    BYE      |\n        |       F8 BYE       |<-------------------|\n        |<-------------------|
    \                   |\n            Figure 2: IPv4 to IPv6 Multi-Homed Proxy Illustration\n
    \  F1 INVITE UA1 -> P1 (192.0.2.254:5060)\n   INVITE sip:bob@biloxi.example.com
    SIP/2.0\n   Route: <sip:192.0.2.254:5060;lr>\n   From: Alice <sip:alice@atlanta.example.com>;tag=1234\n
    \  To: Bob <sip:bob@biloxi.example.com>\n   Contact: <sip:alice@192.0.2.1>\n           F2
    INVITE P1 (2001:db8::1) -> UA2\n           INVITE sip:bob@biloxi.example.com SIP/2.0\n
    \          Record-Route: <sip:[2001:db8::1];lr>\n           Record-Route: <sip:192.0.2.254:5060;lr>\n
    \          From: Alice <sip:alice@atlanta.example.com>;tag=1234\n           To:
    Bob <sip:bob@biloxi.example.com>\n           Contact: <sip:alice@192.0.2.1>\n
    \                  Dialog State at UA2:\n                   Local URI     = sip:bob@biloxi.example.com\n
    \                  Remote URI    = sip:alice@atlanta.example.com\n                   Remote
    target = sip:alice@192.0.2.1\n                   Route Set     = sip:[2001:db8::1];lr\n
    \                                  sip:192.0.2.254:5060:lr\n                   F3
    200 OK UA2 -> P1 (2001:db8::1)\n                   SIP/2.0 200 OK\n                   Record-Route:
    <sip:[2001:db8::1];lr>\n                   Record-Route: <sip:192.0.2.254:5060;lr>\n
    \                  From: Alice <sip:alice@atlanta.example.com>;tag=1234\n                   To:
    Bob <sip:bob@biloxi.example.com>;tag=4567\n                   Contact: <sip:bob@[2001:db8::33]>\n
    \          F4 200 OK P1 -> UA1\n           SIP/2.0 200 OK\n           Record-Route:
    <sip:[2001:db8::1];lr>\n           Record-Route: <sip:192.0.2.254:5060;lr>\n           From:
    Alice <sip:alice@atlanta.example.com>;tag=1234\n           To: Bob <sip:bob@biloxi.example.com>;tag=4567\n
    \          Contact: <sip:bob@[2001:db8::33]>\n   Dialog State at UA1:\n   Local
    URI     = sip:alice@atlanta.example.com\n   Remote URI    = sip:bob@biloxi.example.com\n
    \  Remote target = sip:bob@[2001:db8::33]\n   Route Set     = sip:192.0.2.254:5060:lr\n
    \                  sip:[2001:db8::1];lr\n   F5 ACK UA1 -> P1 (192.0.2.254:5060)\n
    \  ACK sip:bob@[2001:db8::33] SIP/2.0\n   Route: <sip:192.0.2.254:5060:lr>\n   Route:
    <sip:[2001:db8::1];lr>\n   From: Alice <sip:alice@atlanta.example.com>;tag=1234\n
    \  To: Bob <sip:bob@biloxi.example.com>;tag=4567\n           F6 ACK P1 (2001:db8::1)
    -> UA2\n           ACK sip:bob@[2001:db8::33] SIP/2.0\n           From: Alice
    <sip:alice@atlanta.example.com>;tag=1234\n           To: Bob <sip:bob@biloxi.example.com>;tag=4567\n
    \          (both Route headers have been removed by the proxy)\n                   F7
    BYE UA2 -> P1 (2001:db8::1)\n                   BYE sip:alice@192.0.2.1 SIP/2.0\n
    \                  Route: <sip:[2001:db8::1];lr>\n                   Route: <sip:192.0.2.254:5060:lr>\n
    \                  From: Bob <sip:bob@biloxi.example.com>;tag=4567\n                   To:
    Alice <sip:alice@atlanta.example.com>;tag=1234\n           F8 BYE P1 (192.0.2.254:5060)
    -> UA1\n           BYE sip:alice@192.0.2.1 SIP/2.0\n           From: Bob <sip:bob@biloxi.example.com>;tag=4567\n
    \          To: Alice <sip:alice@atlanta.example.com>;tag=1234\n   Figure 3: Multi-Homed
    IPv4 to IPv6 Double Record-Routing Illustration\n"
  title: 5.  Double Record-Routing
- contents:
  - "6.  Usage of Transport Protocol Parameter\n   This section describes a set of
    problems that is related to the usage\n   of transport protocol URI parameters
    in the Record-Route header.  In\n   some circumstances, interoperability problems
    occur because it is not\n   clear whether or not to include the transport parameter
    on the URI of\n   the Record-Route header.  This was identified as a frequent
    problem\n   in past SIPit events.\n   [RFC3261], step 8 of Section 16.7 says:\n
    \     The URI SHOULD NOT contain the transport parameter unless the\n      proxy
    has knowledge (such as in a private network) that the next\n      downstream element
    that will be in the path of subsequent requests\n      supports that transport.\n
    \  The preceding seems to confuse implementors, resulting in proxies\n   that
    insert a single Record-Route without a transport URI parameter,\n   resulting
    in the problems described in this section.\n"
  - contents:
    - "6.1.  UA Implementation Problems and Recommendations\n   Consider the following
      scenario: a SIP proxy, doing TCP to UDP\n   transport protocol switching.\n
      \  In this example, proxy P1, responsible for the domain\n   biloxy.example.com,
      receives a request from Alice UA1, which uses\n   TCP.  It proxies this request
      to Bob UA2, which registered with a\n   Contact specifying UDP as transport
      protocol.  Thus, P1 receives an\n   initial request from Alice over TCP and
      forwards it to Bob over UDP.\n   For subsequent requests, it is expected that
      TCP could continue to be\n   used between Alice and P1, and UDP between P1 and
      Bob, but this can\n   not happen if a numeric IP address is used and no transport
      parameter\n   is set on Record-Route URI.  This happens because of procedures\n
      \  described in [RFC3263].  Some mandatory SIP headers have been omitted\n   to
      ease readability.\n      Alice UA1 ===== TCP ===== Proxy P1 ===== UDP =====
      Bob UA2\n         |                        |                         |\n         |
      \      F1 INVITE        |                         |\n         |----------------------->|
      \        F2 INVITE       |\n         |                        |------------------------>|\n
      \        |      100 Trying        |                         |\n         |<-----------------------|
      \                        |\n         |                        |        F3 200
      OK        |\n         |       F4 200 OK        |<------------------------|\n
      \        |<-----------------------|                         |\n         |                        |
      \                        |\n         |        F5 ACK          |                         |\n
      \        |---(sent over UDP) X--->|            ACK          |\n         |                        |------------------------>|\n
      \        |                        |                         |\n         |                        |
      \         F6 BYE         |\n         |          BYE           |<------------------------|\n
      \        |<-----------------------|                         |\n                   Figure
      4: TCP to UDP Transport Protocol\n                         Switching Issue Illustration\n
      \  F1 INVITE UA1 -> P1 (192.0.2.1/tcp)\n   INVITE sip:bob@biloxi.example.com
      SIP/2.0\n   Route: <sip:192.0.2.1;lr;transport=tcp>\n   From: Alice <sip:alice@atlanta.example.com>;tag=1234\n
      \  To: Bob <sip:bob@biloxi.example.com>\n   Contact: <sip:alice@ua1.atlanta.example.com;transport=tcp>\n
      \       F2 INVITE P1 -> UA2 (ua2.biloxi.example.com/udp)\n        INVITE sip:bob@ua2.biloxi.example.com;transport=udp
      SIP/2.0\n        Record-Route: <sip:192.0.2.1;lr> (NO transport param)\n        From:
      Alice <sip:alice@atlanta.example.com>;tag=1234\n        To: Bob <sip:bob@biloxi.example.com>\n
      \       Contact: <sip:alice@ua1.atlanta.example.com;transport=tcp>\n        Dialog
      State at UA2:\n        Local URI     = sip:bob@biloxi.example.com\n        Remote
      URI    = sip:alice@atlanta.example.com\n        Remote target = sip:alice@ua1.atlanta.example.com;transport=tcp\n
      \       Route Set     = sip:192.0.2.1;lr\n             F3 200 OK UA2 -> P1 (192.0.2.1/udp)\n
      \            SIP/2.0 200 OK\n             Record-Route: <sip:192.0.2.1;lr>\n
      \            From: Alice <sip:alice@atlanta.example.com>;tag=1234\n             To:
      Bob <sip:bob@biloxi.example.com>;tag=4567\n             Contact: <sip:bob@ua2.biloxi.example.com>\n
      \       F4 200 OK P1 -> UA1 (ua1.atlanta.example.com/tcp)\n        SIP/2.0 200
      OK\n        Record-Route: <sip:192.0.2.1;lr>\n        From: Alice <sip:alice@atlanta.example.com>;tag=1234\n
      \       To: Bob <sip:bob@biloxi.example.com>;tag=4567\n        Contact: <sip:bob@ua2.biloxi.example.com>\n
      \  Dialog State at UA1:\n   Local URI     = sip:alice@atlanta.example.com\n
      \  Remote URI    = sip:bob@biloxi.example.com\n   Remote target = sip:bob@ua2.biloxi.example.com\n
      \  Route Set     = sip:192.0.2.1;lr\n   F5 ACK UA1 -> P1 (192.0.2.1/udp)\n   ACK
      sip:bob@ua2.biloxi.example.com SIP/2.0\n   Route: <sip:192.0.2.1;lr>\n   From:
      Alice <sip:alice@atlanta.example.com>;tag=1234\n   To: Bob <sip:bob@biloxi.example.com>;tag=4567\n
      \            F6 BYE UA2 -> P1 (192.0.2.1/udp)\n             BYE sip:alice@ua1.atlanta.example.com;transport=tcp
      SIP/2.0\n             Route: <sip:192.0.2.1;lr>\n             From: Bob <sip:bob@biloxi.example.com>;tag=4567\n
      \            To: Alice <sip:alice@atlanta.example.com>;tag=1234\n                 Figure
      5: TCP to UDP Transport Protocol\n                        Switching Issue Description\n
      \  Since the proxy P1 does not insert any transport parameter in the\n   Record-Route
      URI, subsequent in-dialog requests of UA1, like the ACK\n   sent in F5, will
      be sent according to the behavior specified in\n   Section 12.2 (requests within
      a Dialog) of [RFC3261].  That means\n   that the routeset is used, and then,
      applying [RFC3263], the Route\n   \"sip:192.0.2.1\" will resolve to a UDP transport
      by default (since no\n   transport parameter is present here), and no Naming
      Authority Pointer\n   (NAPTR) request will be performed since this is a numeric
      IP address.\n   In general, the interoperability problems arise when UA1 is
      trying to\n   send the ACK: it is not ready to change its transport protocol
      for a\n   mid-dialog request and just fails to do so, requiring the proxy\n
      \  implementor to insert the transport protocol in the Record-Route URI.\n   What
      happens if the proxy had Record-Routed its logical name\n   (biloxi.example.com)?
      \ Since Bob is to be contacted over UDP,\n   protocol switching will be avoided
      only if the resulting transport\n   protocol of [RFC3263] procedures is UDP.
      \ For any other resulting\n   transport protocol, the transport protocol switching
      issue described\n   above will occur.  Also, if one of the UAs sends an initial
      request\n   using a different transport than the one retrieved from DNS, this\n
      \  scenario would be problematic.\n   In practice, there are multiple situations
      where UA implementations\n   don't use logical names and NAPTR records when
      sending an initial\n   request to a proxy.  This happens, for instance, when:\n
      \  1) UAs offer the ability to \"choose\" the transport to be used for\n      initial
      requests, even if they support [RFC3263].  This is a\n      frequent UA functionality
      that is justified by the following use\n      cases:\n      - when it is not
      possible to change the DNS server configuration\n        and the implementation
      doesn't support all the transport\n        protocols that could be configured
      by default in DNS (e.g.,\n        TLS).\n      - when the end-user wants to
      choose his transport protocol for\n        whatever reason, e.g., needing to
      force TCP, avoiding\n        UDP/congestion, retransmitting, or fragmenting,
      etc.\n   This ability to force the transport protocol in UAs for initial\n   requests
      SHOULD be avoided: selecting the transport protocol in the\n   configuration
      of an outbound proxy means that [RFC3263] procedure is\n   bypassed for initial
      requests.  As a consequence, if the proxy\n   Record-Routed with no transport
      parameter as is recommended in\n   [RFC3261], the UA will be forced to use the
      [RFC3263]-preferred\n   transport for subsequent requests anyway, which leads
      to the\n   problematic scenario described in Figure 4.\n   2) UAs decide to
      always keep the same transport for a given dialog.\n      This choice is erratic,
      since if the proxy is not Record-Routing,\n      the callee MAY receive the
      subsequent request through a transport\n      that is not the one put in its
      Contact.  If a UA really wants to\n      avoid transport protocol switching
      between the initial and\n      subsequent request, it SHOULD rely on DNS records
      for that; thus,\n      it SHOULD avoid configuring statically the outbound proxy
      with a\n      numeric IP address.  A logical name, with no transport parameter,\n
      \     SHOULD be used instead.\n   3) UAs don't support [RFC3263] at all, or
      don't have any DNS server\n      available.  In that case, as illustrated previously,
      forcing UA1\n      to switch from TCP to UDP between initial request and subsequent\n
      \     request(s) is clearly not the desired default behavior, and it\n      typically
      leads to interoperability problems.  UA implementations\n      SHOULD then be
      ready to change the transport protocol between\n      initial and subsequent
      requests.  In theory, any UA or proxy using\n      UDP must also be prepared
      to use TCP for requests that exceed the\n      size limit of path MTU, as described
      in Section 18.1.1 of\n      [RFC3261].\n"
    title: 6.1.  UA Implementation Problems and Recommendations
  - contents:
    - "6.2.  Proxy Implementation Problems and Recommendations\n   In order to prevent
      UA implementation problems, and to maintain a\n   reasonable level of interoperability,
      the situation can be improved\n   on the proxy side.  Thus, if the transport
      protocol changed between\n   its incoming and outgoing sides, the proxy SHOULD
      use the double\n   Record-Route technique and SHOULD add a transport parameter
      to each\n   of the Record-Route URIs it inserts.  When TLS is used on the\n
      \  transport on either side of the proxy, the URI placed in the Record-\n   Route
      header field MUST encode a next-hop that will be reached using\n   TLS.  There
      are two ways for this to work.  The first way is for the\n   URI placed in the
      Record-Route to be a SIPS URI.  The second is for\n   the URI placed in the
      Record-Route to be constructed such that\n   application of [RFC3263] resolution
      procedures to that URI results in\n   TLS being selected.  Proxies compliant
      with this specification MUST\n   NOT use a \"transport=tls\" parameter on the
      URI placed in the Record-\n   Route because the \"transport=tls\" usage was
      deprecated by [RFC3261].\n   Record-Route rewriting MAY also be used.  However,
      the recommendation\n   to put a transport protocol parameter on Record-Route
      URI does not\n   apply when the proxy has changed the transport protocol due
      to the\n   size of UDP requests as per Section 18.1.1 of [RFC3261].  As an\n
      \  illustration of the previous example, it means one of the following\n   processing
      will be performed:\n   - Double Record-Routing: the proxy inserts two Record-Route
      headers\n     into the SIP request.  The first one is set, in this example,
      to\n     Record-Route: <sip:192.0.2.1;lr;transport=tcp>, the second one is\n
      \    set to Record-Route: <sip:192.0.2.1;lr> with no transport, or with\n     transport=udp,
      which basically means the same thing.\n   - Record-Route rewriting on responses:
      in the INVITE request sent in\n     F2, the proxy puts the outgoing transport
      protocol in the transport\n     parameter of Record-Route URI.  Doing so, UA2
      will correctly send\n     its BYE request in F6 using the same transport protocol
      as previous\n     messages of the same dialog.  The proxy rewrites the Record-Route\n
      \    when processing the 200 OK response, changing the transport\n     parameter
      \"on the fly\" to \"transport=tcp\", so that the Route set\n     will appear
      to be <sip:192.0.2.1;lr;transport=tcp> for UA1 and\n     <sip:192.0.2.1;lr;transport=udp>
      for UA2.\n   It is a common practice in proxy implementations to support double\n
      \  Record-Route AND to insert the transport parameter in the Record-\n   Route
      URI.  This practice is acceptable as long as all SIP elements\n   that may be
      in the path of subsequent requests support that\n   transport.  This restriction
      needs an explanation.  Let's imagine you\n   have two proxies, P1 at \"p1.biloxi.example.com\"
      and P2 on the path of\n   an initial request.  P1 is Record-Routing and changes
      the transport\n   from UDP to Stream Control Transmission Protocol (SCTP) because
      the\n   P2 URI resolves to SCTP applying [RFC3263].  Consequently, the proxy\n
      \  P1 inserts two Record-Route headers:\n   Record-Route: <sip:p1.biloxi.example.com;transport=udp>
      and\n   Record-Route: <sip:p1.biloxi.example.com;transport=sctp>.\n   The problem
      arises if P2 is not Record-Routing, because the SIP\n   element downstream of
      P2 will be asked to reach P1 using SCTP for any\n   subsequent, in-dialog request
      from the callee, and this downstream\n   SIP element may not support that transport.\n
      \  In order to handle this situation, this document recommends that a\n   proxy
      SHOULD apply the double Record-Routing technique as soon as it\n   changes the
      transport protocol between its incoming and outgoing\n   sides.  If proxy P2
      in the example above would follow this\n   recommendation, it would perform
      double Record-Routing and the\n   downstream element would not be forced to
      send requests over a\n   transport it does not support.\n   By extension, a
      proxy SHOULD also insert a Record-Route header for\n   any multi-homed situation
      (as the ones described in this document:\n   scheme changes, sigcomp, IPv4/IPv6,
      transport changes, etc.) that may\n   impact the processing of proxies being
      on the path of subsequent\n   requests.\n"
    title: 6.2.  Proxy Implementation Problems and Recommendations
  title: 6.  Usage of Transport Protocol Parameter
- contents:
  - "7.  Conclusion\n   As a conclusion of this document, it is to notice that:\n
    \  - Record-Route rewriting is presented as a technique that MAY be\n     used,
    with the drawbacks outlined in Section 4.\n   - Double Record-Routing is presented
    as the technique that SHOULD be\n     used, and is documented in Section 5.\n
    \  - Record-Route header interoperability problems on transport protocol\n     switching
    scenarios have been outlined and described in Section 6.\n     This last section
    gives some recommendations to UA and proxy\n     implementations to improve the
    situation.  Proxies SHOULD use\n     double Record-Routing for any multi-homed
    situation that MAY impact\n     the further processing, and they SHOULD put transport
    protocol\n     parameters on Record-Route URIs in some circumstances.  UAs SHOULD\n
    \    NOT offer options to overwrite the transport for initial requests.\n     Further,
    UAs SHOULD rely on DNS to express their desired transport\n     and SHOULD avoid
    IP addresses with transport parameters in this\n     case.  Finally, UAs SHOULD
    be ready to switch transports between\n     the initial request and further in-dialog
    messages.\n"
  title: 7.  Conclusion
- contents:
  - "8.  Security Considerations\n   The recommendations in this document describe
    a way to use the\n   existing protocol specified in RFC 3261 rather than introducing
    any\n   new protocol mechanism.  As such, they do not introduce any new\n   security
    concerns, but additional consideration of already existing\n   concerns is warranted.
    \ In particular, when a message is transiting\n   two interfaces, the double Record-Route
    technique will carry\n   information about both interfaces to each of the involved
    endpoints\n   (and any intermediaries between this proxy and those endpoints),\n
    \  where the rewriting technique would only expose information about the\n   interface
    closest to each given endpoint.  If issues such as topology\n   hiding or privacy
    (as described in [RFC3323]) are a concern, the URI\n   values placed in the Record-Route
    for each interface should be\n   carefully constructed to avoid exposing more
    information than was\n   intended.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgments\n   Thank you to Dean Willis, Vijay K. Gurbani, Joel Repiquet,
    Robert\n   Sparks, Jonathan Rosenberg, Cullen Jennings, Juha Heinanen, Paul\n
    \  Kyzivat, Nils Ohlmeier, Tim Polk, Francois Audet, Adrian Farrel,\n   Ralph
    Droms, Tom Batsele, Yannick Bourget, Keith Drage, and John\n   Elwell for their
    reviews and comments.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
      \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n
      \  [RFC3263]  Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n              Protocol
      (SIP): Locating SIP Servers\", RFC 3263, June\n              2002.\n   [RFC3323]
      \ Peterson, J., \"A Privacy Mechanism for the Session\n              Initiation
      Protocol (SIP)\", RFC 3323, November 2002.\n   [RFC5630]  Audet, F., \"The Use
      of the SIPS URI Scheme in the Session\n              Initiation Protocol (SIP)\",
      RFC 5630, October 2009.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [BUG664]   Sparks, RS., \"Bug 664: Double
      record routing,\n              http://bugs.sipit.net/show_bug.cgi?id=664\",
      October 2002.\n   [RFC3486]  Camarillo, G., \"Compressing the Session Initiation\n
      \             Protocol (SIP)\", RFC 3486, February 2003.\n   [RFC3608]  Willis,
      D. and B. Hoeneisen, \"Session Initiation Protocol\n              (SIP) Extension
      Header Field for Service Route Discovery\n              During Registration\",
      RFC 3608, October 2003.\n   [V6Tran]   Camarillo, G., El Malki, K., and V. Gurbani,
      \"IPv6\n              Transition in the Session Initiation Protocol (SIP)\",
      Work\n              in Progress, August 2009.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Thomas Froment\n   Tech-invite\n   EMail: thomas.froment@tech-invite.com\n
    \  Christophe Lebel\n   Alcatel-Lucent\n   Lieu dit Le Mail\n   Orvault  44708\n
    \  France\n   EMail: christophe.lebel@alcatel-lucent.com\n   Ben Bonnaerens\n
    \  Alcatel-Lucent\n   Copernicuslaan 50\n   Antwerpen  2018\n   Belgium\n   EMail:
    ben.bonnaerens@alcatel-lucent.com\n"
  title: Authors' Addresses
