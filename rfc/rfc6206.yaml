- title: __initial_text__
  contents:
  - '                         The Trickle Algorithm

    '
- title: Abstract
  contents:
  - "Abstract\n   The Trickle algorithm allows nodes in a lossy shared medium (e.g.,\n\
    \   low-power and lossy networks) to exchange information in a highly\n   robust,\
    \ energy efficient, simple, and scalable manner.  Dynamically\n   adjusting transmission\
    \ windows allows Trickle to spread new\n   information on the scale of link-layer\
    \ transmission times while\n   sending only a few messages per hour when information\
    \ does not\n   change.  A simple suppression mechanism and transmission point\n\
    \   selection allow Trickle's communication rate to scale logarithmically\n  \
    \ with density.  This document describes the Trickle algorithm and\n   considerations\
    \ in its use.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6206.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Trickle Algorithm Overview ......................................3\n   4.\
    \ Trickle Algorithm ...............................................5\n      4.1.\
    \ Parameters and Variables ...................................5\n      4.2. Algorithm\
    \ Description ......................................5\n   5. Using Trickle ...................................................6\n\
    \   6. Operational Considerations ......................................7\n  \
    \    6.1. Mismatched Redundancy Constants ............................7\n    \
    \  6.2. Mismatched Imin ............................................7\n      6.3.\
    \ Mismatched Imax ............................................8\n      6.4. Mismatched\
    \ Definitions .....................................8\n      6.5. Specifying the\
    \ Constant k ..................................8\n      6.6. Relationship between\
    \ k and Imin ............................8\n      6.7. Tweaks and Improvements\
    \ to Trickle .........................9\n      6.8. Uses of Trickle ............................................9\n\
    \   7. Acknowledgements ...............................................10\n  \
    \ 8. Security Considerations ........................................10\n   9.\
    \ References .....................................................11\n      9.1.\
    \ Normative References ......................................11\n      9.2. Informative\
    \ References ....................................11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Trickle algorithm establishes a density-aware local\
    \ communication\n   primitive with an underlying consistency model that guides\
    \ when a\n   node transmits.  When a node's data does not agree with its\n   neighbors,\
    \ that node communicates quickly to resolve the\n   inconsistency (e.g., in milliseconds).\
    \  When nodes agree, they slow\n   their communication rate exponentially, such\
    \ that nodes send packets\n   very infrequently (e.g., a few packets per hour).\
    \  Instead of\n   flooding a network with packets, the algorithm controls the\
    \ send rate\n   so each node hears a small trickle of packets, just enough to\
    \ stay\n   consistent.  Furthermore, by relying only on local communication\n\
    \   (e.g., broadcast or local multicast), Trickle handles network\n   re-population;\
    \ is robust to network transience, loss, and\n   disconnection; is simple to implement;\
    \ and requires very little\n   state.  Current implementations use 4-11 bytes\
    \ of RAM and are\n   50-200 lines of C code [Levis08].\n   While Trickle was originally\
    \ designed for reprogramming protocols\n   (where the data is the code of the\
    \ program being updated), experience\n   has shown it to be a powerful mechanism\
    \ that can be applied to a wide\n   range of protocol design problems, including\
    \ control traffic timing,\n   multicast propagation, and route discovery.  This\
    \ flexibility stems\n   from being able to define, on a case-by-case basis, what\
    \ constitutes\n   \"agreement\" or an \"inconsistency\"; Section 6.8 presents\
    \ a few\n   examples of how the algorithm can be used.\n   This document describes\
    \ the Trickle algorithm and provides guidelines\n   for its use.  It also states\
    \ requirements for protocol specifications\n   that use Trickle.  This document\
    \ does not provide results regarding\n   Trickle's performance or behavior, nor\
    \ does it explain the\n   algorithm's design in detail: interested readers should\
    \ refer to\n   [Levis04] and [Levis08].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   RFC 2119 [RFC2119].\n   Additionally, this document introduces the following\
    \ terminology:\n   Trickle communication rate:  the sum of the number of messages\
    \ sent\n      or received by the Trickle algorithm in an interval.\n   Trickle\
    \ transmission rate:  the sum of the number of messages sent by\n      the Trickle\
    \ algorithm in an interval.\n"
- title: 3.  Trickle Algorithm Overview
  contents:
  - "3.  Trickle Algorithm Overview\n   Trickle's basic primitive is simple: every\
    \ so often, a node transmits\n   data unless it hears a few other transmissions\
    \ whose data suggest its\n   own transmission is redundant.  Examples of such\
    \ data include routing\n   state, software update versions, and the last heard\
    \ multicast packet.\n   This primitive allows Trickle to scale to thousand-fold\
    \ variations in\n   network density, quickly propagate updates, distribute transmission\n\
    \   load evenly, be robust to transient disconnections, handle network\n   re-populations,\
    \ and impose a very low maintenance overhead: one\n   example use, routing beacons\
    \ in the Collection Tree Protocol (CTP)\n   [Gnawali09], requires sending on the\
    \ order of a few packets per hour,\n   yet CTP can respond to topology changes\
    \ in milliseconds.\n   Trickle sends all messages to a local communication address.\
    \  The\n   exact address used can depend on the underlying IP protocol as well\n\
    \   as how the higher-layer protocol uses Trickle.  In IPv6, for example,\n  \
    \ it can be the link-local multicast address or another local multicast\n   address,\
    \ while in IPv4 it can be the broadcast address\n   (255.255.255.255).\n   There\
    \ are two possible results to a Trickle message: either every\n   node that hears\
    \ the message finds that the message data is consistent\n   with its own state,\
    \ or a recipient detects an inconsistency.\n   Detection can be the result of\
    \ either an out-of-date node hearing\n   something new, or an updated node hearing\
    \ something old.  As long as\n   every node communicates somehow -- either receives\
    \ or transmits --\n   some node will detect the need for an update.\n   For example,\
    \ consider a simple case where \"up to date\" is defined by\n   version numbers\
    \ (e.g., network configuration).  If node A transmits\n   that it has version\
    \ V, but B has version V+1, then B knows that A\n   needs an update.  Similarly,\
    \ if B transmits that it has version V+1,\n   A knows that it needs an update.\
    \  If B broadcasts or multicasts\n   updates, then all of its neighbors can receive\
    \ them without having to\n   advertise their need.  Some of these recipients might\
    \ not have even\n   heard A's transmission.  In this example, it does not matter\
    \ who\n   first transmits -- A or B; the inconsistency will be detected in\n \
    \  either case.\n   The fact that Trickle communication can be either transmission\
    \ or\n   reception enables the Trickle algorithm to operate in sparse as well\n\
    \   as dense networks.  A single, disconnected node must transmit at the\n   Trickle\
    \ communication rate.  In a lossless, single-hop network of\n   size n, the Trickle\
    \ communication rate at each node equals the sum of\n   the Trickle transmission\
    \ rates across all nodes.  The Trickle\n   algorithm balances the load in such\
    \ a scenario, as each node's\n   Trickle transmission rate is 1/nth of the Trickle\
    \ communication rate.\n   Sparser networks require more transmissions per node,\
    \ but the\n   utilization of a given broadcast domain (e.g., radio channel over\n\
    \   space, shared medium) will not increase.  This is an important\n   property\
    \ in wireless networks and other shared media, where the\n   channel is a valuable\
    \ shared resource.  Additionally, reducing\n   transmissions in dense networks\
    \ conserves system energy.\n"
- title: 4.  Trickle Algorithm
  contents:
  - "4.  Trickle Algorithm\n   This section describes the Trickle algorithm.\n"
- title: 4.1.  Parameters and Variables
  contents:
  - "4.1.  Parameters and Variables\n   A Trickle timer runs for a defined interval\
    \ and has three\n   configuration parameters: the minimum interval size Imin,\
    \ the maximum\n   interval size Imax, and a redundancy constant k:\n   o  The\
    \ minimum interval size, Imin, is defined in units of time\n      (e.g., milliseconds,\
    \ seconds).  For example, a protocol might\n      define the minimum interval\
    \ as 100 milliseconds.\n   o  The maximum interval size, Imax, is described as\
    \ a number of\n      doublings of the minimum interval size (the base-2 log(max/min)).\n\
    \      For example, a protocol might define Imax as 16.  If the minimum\n    \
    \  interval is 100 ms, then the amount of time specified by Imax is\n      100\
    \ ms * 65,536, i.e., 6,553.6 seconds or approximately\n      109 minutes.\n  \
    \ o  The redundancy constant, k, is a natural number (an integer\n      greater\
    \ than zero).\n   In addition to these three parameters, Trickle maintains three\n\
    \   variables:\n   o  I, the current interval size,\n   o  t, a time within the\
    \ current interval, and\n   o  c, a counter.\n"
- title: 4.2.  Algorithm Description
  contents:
  - "4.2.  Algorithm Description\n   The Trickle algorithm has six rules:\n   1. \
    \ When the algorithm starts execution, it sets I to a value in the\n       range\
    \ of [Imin, Imax] -- that is, greater than or equal to Imin\n       and less than\
    \ or equal to Imax.  The algorithm then begins the\n       first interval.\n \
    \  2.  When an interval begins, Trickle resets c to 0 and sets t to a\n      \
    \ random point in the interval, taken from the range [I/2, I), that\n       is,\
    \ values greater than or equal to I/2 and less than I.  The\n       interval ends\
    \ at I.\n   3.  Whenever Trickle hears a transmission that is \"consistent\",\
    \ it\n       increments the counter c.\n   4.  At time t, Trickle transmits if\
    \ and only if the counter c is less\n       than the redundancy constant k.\n\
    \   5.  When the interval I expires, Trickle doubles the interval length.\n  \
    \     If this new interval length would be longer than the time\n       specified\
    \ by Imax, Trickle sets the interval length I to be the\n       time specified\
    \ by Imax.\n   6.  If Trickle hears a transmission that is \"inconsistent\" and\
    \ I is\n       greater than Imin, it resets the Trickle timer.  To reset the\n\
    \       timer, Trickle sets I to Imin and starts a new interval as in\n      \
    \ step 2.  If I is equal to Imin when Trickle hears an\n       \"inconsistent\"\
    \ transmission, Trickle does nothing.  Trickle can\n       also reset its timer\
    \ in response to external \"events\".\n   The terms \"consistent\", \"inconsistent\"\
    , and \"events\" are in quotes\n   because their meaning depends on how a protocol\
    \ uses Trickle.\n   The only time the Trickle algorithm transmits is at step 4\
    \ of the\n   above algorithm.  This means there is an inherent delay between\n\
    \   detecting an inconsistency (shrinking I to Imin) and responding to\n   that\
    \ inconsistency (transmitting at time t in the new interval).\n   This is intentional.\
    \  Immediately responding to detecting an\n   inconsistency can cause a broadcast\
    \ storm, where many nodes respond\n   at once and in a synchronized fashion. \
    \ By making responses follow\n   the Trickle algorithm (with the minimal interval\
    \ size), a protocol\n   can benefit from Trickle's suppression mechanism and scale\
    \ across a\n   huge range of node densities.\n"
- title: 5.  Using Trickle
  contents:
  - "5.  Using Trickle\n   A protocol specification that uses Trickle MUST specify:\n\
    \   o  Default values for Imin, Imax, and k.  Because link layers can\n      vary\
    \ widely in their properties, the default value of Imin SHOULD\n      be specified\
    \ in terms of the worst-case latency of a link-layer\n      transmission.  For\
    \ example, a specification should say \"the\n      default value of Imin is 4\
    \ times the worst-case link-layer\n      latency\" and should not say \"the default\
    \ value of Imin is\n      500 milliseconds\".  Worst-case latency is approximately\
    \ the time\n      until the first link-layer transmission of the frame, assuming\
    \ an\n      idle channel (does not include backoff, virtual carrier sense,\n \
    \     etc.).\n   o  What constitutes a \"consistent\" transmission.\n   o  What\
    \ constitutes an \"inconsistent\" transmission.\n   o  What \"events\", if any\
    \ -- besides inconsistent transmissions --\n      reset the Trickle timer.\n \
    \  o  What information a node transmits in Trickle messages.\n   o  What actions\
    \ outside the algorithm the protocol takes, if any,\n      when it detects an\
    \ inconsistency.\n"
- title: 6.  Operational Considerations
  contents:
  - "6.  Operational Considerations\n   It is RECOMMENDED that a protocol that uses\
    \ Trickle include\n   mechanisms to inform nodes of configuration parameters at\
    \ runtime.\n   However, it is not always possible to do so.  In the cases where\n\
    \   different nodes have different configuration parameters, Trickle may\n   have\
    \ unintended behaviors.  This section outlines some of those\n   behaviors and\
    \ operational considerations as educational exercises.\n"
- title: 6.1.  Mismatched Redundancy Constants
  contents:
  - "6.1.  Mismatched Redundancy Constants\n   If nodes do not agree on the redundancy\
    \ constant k, then nodes with\n   higher values of k will transmit more often\
    \ than nodes with lower\n   values of k.  In some cases, this increased load can\
    \ be independent\n   of the density.  For example, consider a network where all\
    \ nodes but\n   one have k=1, and this one node has k=2.  The different node can\
    \ end\n   up transmitting on every interval: it is maintaining a Trickle\n   communication\
    \ rate of 2 with only itself.  Hence, the danger of\n   mismatched k values is\
    \ uneven transmission load that can deplete the\n   energy of some nodes in a\
    \ low-power network.\n"
- title: 6.2.  Mismatched Imin
  contents:
  - "6.2.  Mismatched Imin\n   If nodes do not agree on Imin, then some nodes, on\
    \ hearing\n   inconsistent messages, will transmit sooner than others.  These\n\
    \   faster nodes will have their intervals grow to a size similar to that\n  \
    \ of the slower nodes within a single slow interval time, but in that\n   period\
    \ may suppress the slower nodes.  However, such suppression will\n   end after\
    \ the first slow interval, when the nodes generally agree on\n   the interval\
    \ size.  Hence, mismatched Imin values are usually not a\n   significant concern.\
    \  Note that mismatched Imin values and matching\n   Imax doubling constants will\
    \ lead to mismatched maximum interval\n   lengths.\n"
- title: 6.3.  Mismatched Imax
  contents:
  - "6.3.  Mismatched Imax\n   If nodes do not agree on Imax, then this can cause\
    \ long-term problems\n   with transmission load.  Nodes with small Imax values\
    \ will transmit\n   faster, suppressing those with larger Imax values.  The nodes\
    \ with\n   larger Imax values, always suppressed, will never transmit.  In the\n\
    \   base case, when the network is consistent, this can cause long-term\n   inequities\
    \ in energy cost.\n"
- title: 6.4.  Mismatched Definitions
  contents:
  - "6.4.  Mismatched Definitions\n   If nodes do not agree on what constitutes a\
    \ consistent or\n   inconsistent transmission, then Trickle may fail to operate\
    \ properly.\n   For example, if a receiver thinks a transmission is consistent,\
    \ but\n   the transmitter (if in the receiver's situation) would have thought\n\
    \   it inconsistent, then the receiver will not respond properly and\n   inform\
    \ the transmitter.  This can lead the network to not reach a\n   consistent state.\
    \  For this reason, unlike the configuration\n   constants k, Imin, and Imax,\
    \ consistency definitions MUST be clearly\n   stated in the protocol and SHOULD\
    \ NOT be configured at runtime.\n"
- title: 6.5.  Specifying the Constant k
  contents:
  - "6.5.  Specifying the Constant k\n   There are some edge cases where a protocol\
    \ may wish to use Trickle\n   with its suppression disabled (k is set to infinity).\
    \  In general,\n   this approach is highly dangerous and it is NOT RECOMMENDED.\n\
    \   Disabling suppression means that every node will always send on every\n  \
    \ interval; this can lead to congestion in dense networks.  This\n   approach\
    \ is especially dangerous if many nodes reset their intervals\n   at the same\
    \ time.  In general, it is much more desirable to set k to\n   a high value (e.g.,\
    \ 5 or 10) than infinity.  Typical values for k\n   are 1-5: these achieve a good\
    \ balance between redundancy and low cost\n   [Levis08].\n   Nevertheless, there\
    \ are situations where a protocol may wish to turn\n   off Trickle suppression.\
    \  Because k is a natural number\n   (Section 4.1), k=0 has no useful meaning.\
    \  If a protocol allows k to\n   be dynamically configured, a value of 0 remains\
    \ unused.  For ease of\n   debugging and packet inspection, having the parameter\
    \ describe k-1\n   rather than k can be confusing.  Instead, it is RECOMMENDED\
    \ that\n   protocols that require turning off suppression reserve k=0 to mean\n\
    \   k=infinity.\n"
- title: 6.6.  Relationship between k and Imin
  contents:
  - "6.6.  Relationship between k and Imin\n   Finally, a protocol SHOULD set k and\
    \ Imin such that Imin is at least\n   two to three times as long as it takes to\
    \ transmit k packets.\n   Otherwise, if more than k nodes reset their intervals\
    \ to Imin, the\n   resulting communication will lead to congestion and significant\n\
    \   packet loss.  Experimental results have shown that packet losses from\n  \
    \ congestion reduce Trickle's efficiency [Levis04].\n"
- title: 6.7.  Tweaks and Improvements to Trickle
  contents:
  - "6.7.  Tweaks and Improvements to Trickle\n   Trickle is based on a small number\
    \ of simple, tightly integrated\n   mechanisms that are highly robust to challenging\
    \ network\n   environments.  In our experiences using Trickle, attempts to tweak\n\
    \   its behavior are typically not worth the cost.  As written, the\n   algorithm\
    \ is already highly efficient: further reductions in\n   transmissions or response\
    \ time come at the cost of failures in edge\n   cases.  Based on our experiences,\
    \ we urge protocol designers to\n   suppress the instinct to tweak or improve\
    \ Trickle without a great\n   deal of experimental evidence that the change does\
    \ not violate its\n   assumptions and break the algorithm in edge cases.\n   With\
    \ this warning in mind, Trickle is far from perfect.  For example,\n   Trickle\
    \ suppression typically leads sparser nodes to transmit more\n   than denser ones;\
    \ it is far from the optimal computation of a minimum\n   cover.  However, in\
    \ dynamic network environments such as wireless and\n   low-power, lossy networks,\
    \ the coordination needed to compute the\n   optimal set of transmissions is typically\
    \ much greater than the\n   benefits it provides.  One of the benefits of Trickle\
    \ is that it is\n   so simple to implement and requires so little state yet operates\
    \ so\n   efficiently.  Efforts to improve it should be weighed against the\n \
    \  cost of increased complexity.\n"
- title: 6.8.  Uses of Trickle
  contents:
  - "6.8.  Uses of Trickle\n   The Trickle algorithm has been used in a variety of\
    \ protocols, in\n   operational as well as academic settings.  Giving a brief\
    \ overview of\n   some of these uses provides useful examples of how and when\
    \ it can be\n   used.  These examples should not be considered exhaustive.\n \
    \  Reliable flooding/dissemination: A protocol uses Trickle to\n   periodically\
    \ advertise the most recent data it has received,\n   typically through a version\
    \ number.  An inconsistency occurs when a\n   node hears a newer version number\
    \ or receives new data.  A\n   consistency occurs when a node hears an older or\
    \ equal version\n   number.  When hearing an older version number, rather than\
    \ reset its\n   own Trickle timer, the node sends an update.  Nodes with old version\n\
    \   numbers that receive the update will then reset their own timers,\n   leading\
    \ to fast propagation of the new data.  Examples of this use\n   include multicast\
    \ [Hui08a], network configuration [Lin08] [Dang09],\n   and installing new application\
    \ programs [Hui04] [Levis04].\n   Routing control traffic: A protocol uses Trickle\
    \ to control when it\n   sends beacons that contain routing state.  An inconsistency\
    \ occurs\n   when the routing topology changes in a way that could lead to loops\n\
    \   or significant stretch: examples include when the routing layer\n   detects\
    \ a routing loop or when a node's routing cost changes\n   significantly.  Consistency\
    \ occurs when the routing topology is\n   operating well and is delivering packets\
    \ successfully.  Using the\n   Trickle algorithm in this way allows a routing\
    \ protocol to react very\n   quickly to problems (Imin is small) but send very\
    \ few beacons when\n   the topology is stable.  Examples of this use include the\
    \ IPv6\n   routing protocol for low-power and lossy networks (RPL) [RPL], CTP\n\
    \   [Gnawali09], and some current commercial IPv6 routing layers\n   [Hui08b].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to acknowledge the guidance and\
    \ input provided\n   by the ROLL chairs, David Culler and JP Vasseur.\n   The\
    \ authors would also like to acknowledge the helpful comments of\n   Yoav Ben-Yehezkel,\
    \ Alexandru Petrescu, and Ulrich Herberg, which\n   greatly improved the document.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   As it is an algorithm, Trickle itself does not\
    \ have any specific\n   security considerations.  However, two security concerns\
    \ can arise\n   when Trickle is used in a protocol.  The first is that an adversary\n\
    \   can force nodes to send many more packets than needed by forcing\n   Trickle\
    \ timer resets.  In low-power networks, this increase in\n   traffic can harm\
    \ system lifetime.  The second concern is that an\n   adversary can prevent nodes\
    \ from reaching consistency.\n   Protocols can prevent adversarial Trickle resets\
    \ by carefully\n   selecting what can cause a reset and protecting these events\
    \ and\n   messages with proper security mechanisms.  For example, if a node can\n\
    \   reset nearby Trickle timers by sending a certain packet, this packet\n   should\
    \ be authenticated such that an adversary cannot forge one.\n   An adversary can\
    \ possibly prevent nodes from reaching consistency by\n   suppressing transmissions\
    \ with \"consistent\" messages.  For example,\n   imagine node A detects an inconsistency\
    \ and resets its Trickle timer.\n   If an adversary can prevent A from sending\
    \ messages that inform\n   nearby nodes of the inconsistency in order to repair\
    \ it, then A may\n   remain inconsistent indefinitely.  Depending on the security\
    \ model of\n   the network, authenticated messages or a transitive notion of\n\
    \   consistency can prevent this problem.  For example, let us suppose an\n  \
    \ adversary wishes to suppress A from notifying neighbors of an\n   inconsistency.\
    \  To do so, it must send messages that are consistent\n   with A.  These messages\
    \ are by definition inconsistent with those of\n   A's neighbors.  Correspondingly,\
    \ an adversary cannot simultaneously\n   prevent A from notifying neighbors and\
    \ not notify the neighbors\n   itself (recall that Trickle operates on shared,\
    \ broadcast media).\n   Note that this means Trickle should filter unicast messages.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [Dang09]   Dang, T., Bulusu, N., Feng, W., and\
    \ S. Park, \"DHV: A Code\n              Consistency Maintenance Protocol for Multi-hop\
    \ Wireless\n              Networks\", Wireless Sensor Networks: 6th European\n\
    \              Conference Proceedings EWSN 2009 Cork, February 2009,\n       \
    \       <http://portal.acm.org/citation.cfm?id=1506781>.\n   [Gnawali09]\n   \
    \           Gnawali, O., Fonseca, R., Jamieson, K., Moss, D., and P.\n       \
    \       Levis, \"Collection Tree Protocol\", Proceedings of the 7th\n        \
    \      ACM Conference on Embedded Networked Sensor\n              Systems, SenSys\
    \ 2009, November 2009,\n              <http://portal.acm.org/citation.cfm?id=1644038.1644040>.\n\
    \   [Hui04]    Hui, J. and D. Culler, \"The dynamic behavior of a data\n     \
    \         dissemination protocol for network programming at scale\",\n       \
    \       Proceedings of the 2nd ACM Conference on Embedded\n              Networked\
    \ Sensor Systems, SenSys 2004, November 2004,\n              <http://portal.acm.org/citation.cfm?id=1031506>.\n\
    \   [Hui08a]   Hui, J., \"An Extended Internet Architecture for Low-Power\n  \
    \            Wireless Networks - Design and Implementation\", UC\n           \
    \   Berkeley Technical Report EECS-2008-116, September 2008,\n              <http://www.eecs.berkeley.edu/Pubs/>.\n\
    \   [Hui08b]   Hui, J. and D. Culler, \"IP is dead, long live IP for\n       \
    \       wireless sensor networks\", Proceedings of the 6th ACM\n             \
    \ Conference on Embedded Networked Sensor Systems, SenSys\n              2008,\
    \ November 2008,\n              <http://portal.acm.org/citation.cfm?id=1460412.1460415>.\n\
    \   [Levis04]  Levis, P., Patel, N., Culler, D., and S. Shenker,\n           \
    \   \"Trickle: A Self-Regulating Algorithm for Code Propagation\n            \
    \  and Maintenance in Wireless Sensor Networks\", Proceedings\n              of\
    \ the First USENIX/ACM Symposium on Networked Systems\n              Design and\
    \ Implementation, NSDI 2004, March 2004,\n              <http://portal.acm.org/citation.cfm?id=1251177>.\n\
    \   [Levis08]  Levis, P., Brewer, E., Culler, D., Gay, D., Madden, S.,\n     \
    \         Patel, N., Polastre, J., Shenker, S., Szewczyk, R., and A.\n       \
    \       Woo, \"The Emergence of a Networking Primitive in Wireless\n         \
    \     Sensor Networks\", Communications of the ACM, Vol. 51 No.\n            \
    \  7, July 2008,\n              <http://portal.acm.org/citation.cfm?id=1364804>.\n\
    \   [Lin08]    Lin, K. and P. Levis, \"Data Discovery and Dissemination\n    \
    \          with DIP\", Proceedings of the 7th international conference\n     \
    \         on Information processing in sensor networks, IPSN 2008,\n         \
    \     April 2008,\n              <http://portal.acm.org/citation.cfm?id=1371607.1372753>.\n\
    \   [RPL]      Winter, T., Ed., Thubert, P., Ed., Brandt, A., Clausen,\n     \
    \         T., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik,\n          \
    \    R., and JP. Vasseur, \"RPL: IPv6 Routing Protocol for Low\n             \
    \ power and Lossy Networks\", Work in Progress, March 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Philip Levis\n   Stanford University\n   358 Gates Hall\n\
    \   Stanford, CA  94305\n   USA\n   Phone: +1 650 725 9064\n   EMail: pal@cs.stanford.edu\n\
    \   Thomas Heide Clausen\n   LIX, Ecole Polytechnique\n   Phone: +33 6 6058 9349\n\
    \   EMail: T.Clausen@computer.org\n   Jonathan Hui\n   Arch Rock Corporation\n\
    \   501 2nd St., Suite 410\n   San Francisco, CA  94107\n   USA\n   EMail: jhui@archrock.com\n\
    \   Omprakash Gnawali\n   Stanford University\n   S255 Clark Center, 318 Campus\
    \ Drive\n   Stanford, CA  94305\n   USA\n   Phone: +1 650 725 6086\n   EMail:\
    \ gnawali@cs.stanford.edu\n   JeongGil Ko\n   Johns Hopkins University\n   3400\
    \ N. Charles St., 224 New Engineering Building\n   Baltimore, MD  21218\n   USA\n\
    \   Phone: +1 410 516 4312\n   EMail: jgko@cs.jhu.edu\n"
