- title: __initial_text__
  contents:
  - '                   IS-IS Path Control and Reservation

    '
- title: Abstract
  contents:
  - "Abstract\n   IEEE 802.1Qca Path Control and Reservation (PCR) specifies explicit\n\
    \   path control via IS-IS in Layer 2 networks in order to move beyond\n   the\
    \ shortest path capabilities provided by IEEE 802.1aq Shortest Path\n   Bridging\
    \ (SPB).  IS-IS PCR provides capabilities for the\n   establishment and control\
    \ of explicit forwarding trees in a Layer 2\n   network domain.  This document\
    \ specifies the sub-TLVs for IS-IS PCR.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7813.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Conventions Used in This Document . . . . . . . . . .\
    \ . . . .   4\n   3.  Terminology and Definitions . . . . . . . . . . . . . .\
    \ . . .   4\n   4.  Explicit Trees  . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   5.  Explicit ECT Algorithms . . . . . . . . . . . . . . . . . .\
    \ .   9\n   6.  IS-IS PCR Sub-TLVs  . . . . . . . . . . . . . . . . . . . . .\
    \  11\n     6.1.  Topology Sub-TLV  . . . . . . . . . . . . . . . . . . . .  11\n\
    \     6.2.  Hop Sub-TLV . . . . . . . . . . . . . . . . . . . . . . .  15\n  \
    \   6.3.  Bandwidth Constraint Sub-TLV  . . . . . . . . . . . . . .  19\n    \
    \ 6.4.  Bandwidth Assignment Sub-TLV  . . . . . . . . . . . . . .  21\n     6.5.\
    \  Timestamp Sub-TLV . . . . . . . . . . . . . . . . . . . .  23\n   7.  MRT-FRR\
    \ Application . . . . . . . . . . . . . . . . . . . . .  24\n   8.  Summary .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  29\n   9.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  29\n   10. Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  29\n   11. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  30\n     11.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . .  30\n     11.2.  Informative References .\
    \ . . . . . . . . . . . . . . . .  31\n   Acknowledgements  . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  32\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IEEE 802.1Qca Path Control and Reservation (PCR) [IEEE8021Qca]\n\
    \   specifies extensions to IS-IS for the control of Explicit Trees\n   (ETs).\
    \  The PCR extensions are compatible with the Shortest Path\n   Bridging (SPB)\
    \ extensions to IS-IS specified by [RFC6329] and\n   [IEEE8021aq] (already rolled\
    \ into [IEEE8021Q]).  Furthermore, IS-IS\n   with PCR extensions relies on the\
    \ SPB architecture and terminology,\n   and some of the IS-IS SPB sub-TLVs are\
    \ also leveraged.  IS-IS PCR\n   builds upon IS-IS and uses IS-IS in a similar\
    \ way to SPB.  IS-IS PCR\n   only addresses point-to-point physical links, although\
    \ IS-IS also\n   supports shared media LANs.\n   This document specifies five\
    \ IS-IS sub-TLVs for the control of\n   explicit trees by IS-IS PCR in a Layer\
    \ 2 network as specified by IEEE\n   Std 802.1Qca.  In addition to the sub-TLVs\
    \ specified here, IS-IS PCR\n   relies on the following IS-IS SPB sub-TLVs specified\
    \ by [RFC6329]:\n   o  SPB Link Metric sub-TLV\n   o  SPB Base VLAN-Identifiers\
    \ sub-TLV\n   o  SPB Instance sub-TLV\n   o  SPBV MAC address sub-TLV\n   o  SPBM\
    \ Service Identifier and Unicast Address sub-TLV\n   These sub-TLVs are used to\
    \ provide the link metric and the\n   associations among bridges, Media Access\
    \ Control (MAC) addresses,\n   VLAN IDs (VIDs), and I-SIDs within an IS-IS domain.\
    \  The use of these\n   SPB sub-TLVs for PCR is specified by IEEE Std 802.1Qca.\
    \  Note that\n   IS-IS PCR does not require the implementation of the full IS-IS\
    \ SPB\n   protocol but only the support of these SPB sub-TLVs.  A bridge can\n\
    \   support both IS-IS SPB and IS-IS PCR at the same time; however, when\n   it\
    \ supports both, they are implemented by the same IS-IS entity on a\n   per-instance\
    \ basis.\n   The sub-TLVs specified in this document can also be applied for Fast\n\
    \   Reroute using Maximally Redundant Trees (MRT-FRR) [RFC7812] in a\n   Layer\
    \ 2 network.  Maximally Redundant Trees (MRTs) are computed as\n   specified in\
    \ [RFC7811].  If MRT computation is split such that the\n   Generalized Almost\
    \ Directed Acyclic Graph (GADAG) is computed\n   centrally, then these sub-TLVs\
    \ can be used to distribute the GADAG,\n   which is identical for each network\
    \ node throughout a network domain.\n   PCR uses IS-IS, the SPB sub-TLVs listed\
    \ above, and the new sub-TLVs\n   defined in this document.  IS-IS PCR has no\
    \ impact on IETF protocols.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Terminology and Definitions
  contents:
  - "3.  Terminology and Definitions\n   This document uses the terminology defined\
    \ in [RFC7812].  Only the\n   abbreviations are resolved here for the MRT terms;\
    \ please refer to\n   [RFC7812] for the complete definition.\n   ADAG:  Almost\
    \ Directed Acyclic Graph [RFC7812]\n   B-VID:  Backbone VID [IEEE8021Q]\n   Base\
    \ VID:  The VID used to identify a VLAN in management operations.\n      [IEEE8021Q]\n\
    \   BLCE:  Bridge Local Computation Engine - A computation engine in a\n     \
    \ bridge that performs path and routing computations.  The BLCE\n      implements\
    \ e.g., SPF, CSPF, or the Maximally Redundant Trees\n      algorithm.  [IEEE8021Qca]\n\
    \   Constrained tree:  A tree meeting a certain constraint, e.g.,\n      providing\
    \ minimally available bandwidth.  [IEEE8021Qca]\n   CSPF:  Constrained Shortest\
    \ Path First\n   DAG:  Directed Acyclic Graph [RFC7812]\n   DEI:  Drop Eligible\
    \ Indicator [IEEE8021Q]\n   ECT Algorithm:  Equal-Cost Tree algorithm - The algorithm\
    \ and\n      mechanism that is used for the control of the active topology,\n\
    \      i.e., forwarding trees.  It can be one of the shortest path\n      algorithms\
    \ specified by [IEEE8021Q].  It can be also one of the\n      explicit path-control\
    \ algorithms specified by [IEEE8021Qca].  Each\n      ECT Algorithm has a 32-bit\
    \ unique ID.\n   ET:  Explicit Tree - An explicitly defined tree, which is specified\n\
    \      by its Edge Bridges and the paths among the Edge Bridges.  If only\n  \
    \    the Edge Bridges are specified but the paths are not, then it is a\n    \
    \  loose explicit tree.  If the paths are also specified, then it is\n      a\
    \ strict explicit tree.  [IEEE8021Qca]\n   ETDB:  Explicit Tree Database - A database\
    \ storing explicit trees.\n      [IEEE8021Qca]\n   FDB:  Filtering Database [IEEE8021Q]\n\
    \   GADAG:  Generalized ADAG [RFC7812]\n   Hop:  A hop is specified by two nodes.\
    \  A strict hop has no\n      intermediate nodes, whereas a loose hop can have\
    \ one or more\n      intermediate nodes.  IS-IS PCR specifies an explicit tree\
    \ by an\n      ordered list of hops starting at the root, each successive hop\n\
    \      being defined by the next element of the list.  [IEEE8021Qca]\n   I-SID:\
    \  Backbone Service Instance Identifier - A 24-bit ID.\n      [IEEE8021Q]\n  \
    \ LSDB:  Link State Database\n   MRT:  Maximally Redundant Trees [RFC7812]\n \
    \  MRT-Blue:  MRT-Blue is used to describe one of the two MRTs.\n      [RFC7812]\n\
    \   MRT-Red:  MRT-Red is used to describe one of the two MRTs.  [RFC7812]\n  \
    \ MRT Root:  The common root of the two MRTs: MRT-Blue and MRT-Red.\n   MSRP:\
    \  Multiple Stream Registration Protocol, standardized as IEEE\n      Std 802.1Qat,\
    \ already rolled into [IEEE8021Q].\n   PCA:  Path Control Agent - The agent that\
    \ is part of the IS-IS domain\n      and thus can perform IS-IS operations on\
    \ behalf of a PCE, e.g.,\n      maintain the LSDB and send LSPs.  [IEEE8021Qca]\n\
    \   PCE:  Path Computation Element - An entity that is capable of\n      computing\
    \ a path through a network based on a representation of\n      the topology of\
    \ the network (obtained by undefined means external\n      to the PCE).  [RFC4655]\n\
    \   PCP:  Priority Code Point, which identifies a traffic class.\n      [IEEE8021Q]\n\
    \   PTP:  Precision Time Protocol specified by [IEEE1588].\n   SPB:  Shortest\
    \ Path Bridging\n   SPBM:  SPB MAC - The SPB mode where a MAC or its shorthand\n\
    \      (SPSourceID: Shortest Path Source ID) is used to identify an SPT.\n   \
    \   [IEEE8021Q]\n   SPBV:  SPB VID - The SPB mode where a unique VID is assigned\
    \ to each\n      SPT Root bridge and is used to identify an SPT.  [IEEE8021Q]\n\
    \   SPF:  Shortest Path First\n   SPT:  Shortest Path Tree [IEEE8021Q]\n   SRLG:\
    \  Shared Risk Link Group - A set of links that share a resource\n      whose\
    \ failure affects each link.  [RFC5307]\n   TAI:  Temps Atomique International\
    \ - International Atomic Time\n      [IEEE1588]\n   TED:  Traffic Engineering\
    \ Database - A database storing the traffic\n      engineering information propagated\
    \ by IS-IS.  [RFC5305]\n   VID:  VLAN ID [IEEE8021Q]\n   VLAN:  Virtual Local\
    \ Area Network [IEEE8021Q]\n"
- title: 4.  Explicit Trees
  contents:
  - "4.  Explicit Trees\n   Explicit trees may be determined in some fashion.  For\
    \ example, an\n   explicit tree may be determined by a Path Computation Element\
    \ (PCE)\n   [RFC4655].  A PCE is an entity that is capable of computing a\n  \
    \ topology for forwarding based on a network topology, its\n   corresponding attributes,\
    \ and potential constraints.  If a PCE is\n   used, it MUST explicitly specify\
    \ an explicit tree as described in\n   Section 6.1.  Either a single PCE or multiple\
    \ PCEs determine explicit\n   trees for a domain.  Even if there are multiple\
    \ PCEs in a domain,\n   each explicit tree MUST only be determined by one PCE,\
    \ which is\n   referred to as the owner PCE of the tree.  PCEs and IS-IS PCR can\
    \ be\n   used in combination with IS-IS SPB shortest path routing.  The\n   remainder\
    \ of this section, and subsequent sections, are written\n   assuming PCE use.\n\
    \   The PCE interacts with the active topology control protocol, i.e.,\n   with\
    \ IS-IS.  The collaboration with IS-IS can be provided by a Path\n   Control Agent\
    \ (PCA) on behalf of a PCE.  Either the PCE or the\n   corresponding PCA is part\
    \ of the IS-IS domain.  If the PCE is not\n   part of the IS-IS domain, then the\
    \ PCE MUST be associated with a PCA\n   that is part of the IS-IS domain.  The\
    \ PCE or its PCA MUST establish\n   IS-IS adjacency in order to receive all the\
    \ LSPs transmitted by the\n   bridges in the domain.  The PCE, either on its own\
    \ or via its PCA,\n   can control the establishment of explicit trees in that\
    \ domain by\n   injecting an LSP conveying an explicit tree and thus instruct\
    \ IS-IS\n   to set up the explicit tree determined by the PCE.  If instructed\
    \ to\n   do so by a PCE, IS-IS MAY also record and communicate bandwidth\n   assignments,\
    \ which MUST NOT be applied if reservation protocol (e.g.,\n   Multiple Stream\
    \ Registration Protocol (MSRP)) is used in the domain.\n   Both MSRP and IS-IS\
    \ MUST NOT be used to make bandwidth assignments in\n   the same domain.\n   The\
    \ operation details of the PCE are not specified by this document\n   or by IEEE\
    \ Std 802.1Qca.  If the PCE is part of the IS-IS domain,\n   then the PCE uses\
    \ IS-IS PDUs to communicate with the IS-IS domain and\n   the PCE has a live IS-IS\
    \ LSDB (i.e., the PCE implements the PCA\n   functions too).  A PCE can instead\
    \ communicate with the IS-IS domain\n   via a PCA, e.g., to retrieve the LSDB\
    \ or instruct the creation of an\n   explicit tree.  However, the means of communication\
    \ between the PCE\n   and the PCA is not specified by this document or by IEEE\
    \ Std\n   802.1Qca.\n   An Explicit Tree (ET) is an undirected loop-free topology,\
    \ whose use\n   is under the control of the owner PCE by means of associating\
    \ VIDs\n   and MAC addresses with it.  An ET MUST NOT contain cycles.  As it is\n\
    \   undirected, an ET contains no assumptions about the direction of any\n   flows\
    \ that use it; it can be used in either direction as specified by\n   the VIDs\
    \ and MAC addresses associated with it.  It is the\n   responsibility of the PCE\
    \ to ensure reverse-path congruency and\n   multicast-unicast congruency if that\
    \ is required.\n   An explicit tree is either strict or loose.  A strict explicit\
    \ tree\n   specifies all bridges and paths it comprises.  A loose tree only\n\
    \   specifies the bridges as a list of hops that have a special role in\n   the\
    \ tree, e.g., an Edge Bridge, and no path or path segment is\n   specified between\
    \ the bridges, which are therefore loose hops even if\n   Edge Bridges are adjacent\
    \ neighbors.  The special role of a hop can\n   be: Edge Bridge, root, leaf, a\
    \ bridge to be avoided, or a transit hop\n   in case of a tree with a single leaf.\
    \  The path for a loose hop is\n   determined by the Bridge Local Computation\
    \ Engine (BLCE) of the\n   bridges.  The shortest path is used for a loose hop\
    \ unless specified\n   otherwise by the descriptor (Section 6.1) of the tree or\
    \ by the\n   corresponding ECT Algorithm (Section 5).\n   A loose explicit tree\
    \ is constrained if the tree descriptor includes\n   one or more constraints,\
    \ e.g., the administrative group that the\n   links of the tree have to belong\
    \ to.  The BLCE of the bridges then\n   applies the Constrained Shortest Path\
    \ First (CSPF) algorithm, which\n   is Shortest Path First (SPF) on the topology\
    \ that only contains the\n   links meeting the constraint(s).\n   An explicit\
    \ tree is specified by a Topology sub-TLV (Section 6.1).\n   The Topology sub-TLV\
    \ associates one or more VIDs with an explicit\n   tree.  The Topology sub-TLV\
    \ includes two or more Hop sub-TLVs\n   (Section 6.2), and a hop is specified\
    \ by an IS-IS System ID.  A Hop\n   sub-TLV MAY include a delay constraint for\
    \ a loose hop.  A Topology\n   sub-TLV MAY also include further sub-TLVs to constrain\
    \ loose hops.\n   The bridges involved in an explicit tree store the corresponding\n\
    \   Topology sub-TLVs in their Explicit Tree Database (ETDB).\n   Explicit trees\
    \ are propagated and set up by IS-IS PCR in a domain.\n   The PCE or its PCA assembles\
    \ the Topology sub-TLVs (Section 6.1), and\n   adds it into an LSP, which is flooded\
    \ throughout the domain.  The\n   Topology sub-TLV is flooded by the same techniques\
    \ used for the SPB\n   LSPs.  The bridges then MUST process the Topology sub-TLV\
    \ upon\n   reception.  If the Topology sub-TLV specifies one or more loose\n \
    \  trees, then the path for the loose hops is determined by the BLCE of\n   the\
    \ bridges.  The bridges then install the appropriate FDB entries\n   for frame\
    \ forwarding along the tree described by the Topology sub-TLV\n   or the trees\
    \ computed based on the Topology sub-TLV.  Dynamic\n   Filtering Entries are maintained\
    \ by IS-IS for the [VID, MAC address]\n   two-tuples associated with an ET.\n\
    \   Due to the LSP aging of IS-IS, the Topology sub-TLVs (Section 6.1)\n   have\
    \ to be refreshed similar to other IS-IS TLVs in order to keep the\n   integrity\
    \ of the LSDB.  The corresponding Dynamic Filtering Entries\n   are also refreshed\
    \ in the FDB when a Topology sub-TLV is refreshed.\n   Refreshing Topology sub-TLVs\
    \ is the task of the entity being part of\n   the IS-IS domain, i.e., either the\
    \ PCE or the PCA.\n   The owner PCE can withdraw an explicit tree by sending an\
    \ updated LSP\n   that does not include the Topology sub-TLV (Section 6.1).  If\
    \ a\n   Topology sub-TLV is removed from an LSP (or has been changed) so that\n\
    \   (previous) Topology sub-TLV is no longer present (or has been\n   changed)\
    \ in the LSDB, then that (previous) Topology sub-TLV is\n   implicitly withdrawn.\
    \  IS-IS PCR then removes (or updates) the\n   explicit tree.\n   There is no\
    \ precedence order between explicit trees.  Precedence\n   order among bandwidth\
    \ assignments recorded by IS-IS PCR is specified\n   in Section 6.4.\n   If it\
    \ is not possible to install an explicit tree, e.g.,\n   constraint(s) cannot\
    \ be met or the Topology sub-TLV is ill-formed,\n   then no tree is installed,\
    \ but a management report is generated.\n   The bridges MAY support the following\
    \ IS-IS features for the\n   computation of explicit trees.  The Extended IS Reachability\
    \ TLV\n   (type 22) specified in [RFC5305] provides the following link\n   attribute\
    \ IS-IS sub-TLVs:\n   o  Administrative Group (color) (sub-TLV type 3),\n   o\
    \  Maximum Link Bandwidth (sub-TLV type 9),\n   o  Maximum Reservable Link Bandwidth\
    \ (sub-TLV type 10),\n   o  Unreserved Bandwidth (sub-TLV type 11),\n   o  TE\
    \ Default Metric (sub-TLV type 18).\n   When the Unreserved Bandwidth sub-TLV\
    \ is used in a Layer 2 bridge\n   network, the priority value encoded in the sub-TLV\
    \ provides the PCP,\n   i.e., identifies a traffic class (not a setup priority\
    \ level).\n   Further attributes are provided by the IS-IS TE Metric Extension\
    \ link\n   attribute sub-TLVs specified in [RFC7810]:\n   o  Unidirectional Link\
    \ Delay (sub-TLV type 33),\n   o  Min/Max Unidirectional Link Delay (sub-TLV type\
    \ 34),\n   o  Unidirectional Delay Variation (sub-TLV type 35),\n   o  Unidirectional\
    \ Link Loss (sub-TLV type 36),\n   o  Unidirectional Residual Bandwidth (sub-TLV\
    \ type 37),\n   o  Unidirectional Available Bandwidth (sub-TLV type 38),\n   o\
    \  Unidirectional Utilized Bandwidth (sub-TLV type 39).\n   The Shared Risk Link\
    \ Group (SRLG) information provided by the SRLG\n   TLV (type 138) [RFC5307] MAY\
    \ also be used.  In order to indicate that\n   the interface is unnumbered in\
    \ this case, the corresponding flag\n   takes value 0.  The Link Local Identifier\
    \ is an Extended Local\n   Circuit Identifier and the Link Remote Identifier is\
    \ a Neighbor\n   Extended Local Circuit ID.\n"
- title: 5.  Explicit ECT Algorithms
  contents:
  - "5.  Explicit ECT Algorithms\n   The exact IS-IS control mode of operation MUST\
    \ be selected for a VLAN\n   by associating its Base VID with the appropriate\
    \ ECT Algorithm in the\n   SPB Base VLAN-Identifiers sub-TLV [RFC6329], in addition\
    \ to\n   allocating the Base VID to IS-IS control.  There are five distinct\n\
    \   ECT Algorithms for the five explicit path control modes.  The\n   operation\
    \ details of the explicit ECT Algorithms and their\n   configuration is specified\
    \ by IEEE Std 802.1Qca; a high-level\n   overview is given here.  An ECT Algorithm\
    \ value consists of the IEEE\n   802.1 OUI (Organizationally Unique Identifier)\
    \ value 00-80-C2\n   concatenated with an index [RFC6329].\n   The Strict Tree\
    \ (ST) ECT Algorithm MUST be used for a strict explicit\n   tree.  A strict ET\
    \ is static, as no other entity can update it but\n   the owner PCE.  In case\
    \ of a topology change, it is the task of the\n   owner PCE to detect the topology\
    \ change, e.g., based on the changes\n   in the LSDB and to update the strict\
    \ trees if needed.  That is, the\n   owner PCE computes the new tree, assembles\
    \ its descriptor\n   (Section 6.1), and then instructs IS-IS PCR to install it.\
    \  The value\n   for the ST ECT Algorithm is 00-80-C2-17.\n   The Loose Tree (LT)\
    \ ECT Algorithm MAY also be supported.  It is used\n   for a single loose explicit\
    \ tree.  The path for loose hops is\n   determined by the BLCE of the bridges;\
    \ therefore, the Topology sub-\n   TLV (Section 6.1) specifying the tree MUST\
    \ indicate which hop is the\n   root of the tree.  The loose hops are maintained\
    \ by IS-IS, i.e.,\n   restored upon a topology change if a loop-free path is available.\
    \  If\n   the tree computed by the BLCE visits the same bridge twice (implying\n\
    \   that a loop or hairpin has been created), then that loop or hairpin\n   MUST\
    \ be pruned from the tree even if it contains a hop specified by\n   the Topology\
    \ sub-TLV.  It is a constraint if a bridge is not to be\n   included, which can\
    \ be specified by the Exclude flag of a Hop sub-TLV\n   (Section 6.2) conveyed\
    \ by the Topology sub-TLV specifying the tree.\n   The range of values for the\
    \ LT ECT Algorithms is\n   00-80-C2-21...00-80-C2-30.\n   The Loose Tree Set (LTS)\
    \ ECT Algorithm MAY also be supported.  It is\n   used if connectivity among the\
    \ Edge Bridges specified by the Topology\n   sub-TLV (Section 6.1) is to be provided\
    \ by a set of loose trees such\n   that one tree is rooted at each Edge Bridge.\
    \  The BLCE of the bridges\n   compute the loose trees, which are maintained by\
    \ IS-IS, i.e.,\n   restored upon a topology change.  One constraint can be to\
    \ avoid some\n   bridges in these trees, which can be specified by the Exclude\
    \ flag\n   (item c.6. in Section 6.2).  Further constraints can be specified by\n\
    \   the Topology sub-TLV.  The range of values for the LT ECT Algorithms\n   is\
    \ 00-80-C2-31...00-80-C2-40.\n   The LT and LTS ECT Algorithms use the shortest\
    \ paths after pruning\n   the topology according to the constraint(s), if any.\
    \  The shortest\n   path tie-breaking specified by Section 12 of [RFC6329] is\
    \ applied\n   (see also subclauses 28.5 - 28.8 of [IEEE8021aq]), that's why range\n\
    \   of values are associated with the LT and LTS ECT Algorithms.  In case\n  \
    \ of the LT ECT Algorithm, the indexes are 0x21...0x30, and\n   ECT-MASK{index-0x20}\
    \ is applied to retrieve the ECT-MASK of\n   Section 12 of [RFC6329].  In case\
    \ of the LTS ECT Algorithm, the\n   indexes are 0x31...0x40, and ECT-MASK{index-0x30}\
    \ is applied to\n   retrieve the ECT-MASK for shortest path tie-breaking.\n  \
    \ The MRT ECT Algorithm MAY also be supported.  It is used for the\n   establishment\
    \ and maintenance of MRTs in a distributed fashion.  The\n   MRT Lowpoint algorithm\
    \ specified by [RFC7811] MUST be used for the\n   computation of MRTs.  The MRT\
    \ Lowpoint algorithm first computes the\n   GADAG and then produces two MRTs for\
    \ each MRT Root: MRT-Blue and MRT-\n   Red.  If the level of redundancy provided\
    \ by each bridge being an MRT\n   Root is not required, then the MRT Roots can\
    \ be specified by a\n   Topology sub-TLV (Section 6.1).  Both the GADAG and the\
    \ MRT\n   computation steps are performed distributed, i.e., by each bridge.\n\
    \   The value for the MRT ECT Algorithm is 00-80-C2-18.\n   The MRT GADAG (MRTG)\
    \ ECT Algorithm MAY also be supported.  It splits\n   the computation into two.\
    \  As the GADAG is identical for each MRT\n   within a domain, it is computed\
    \ by a single entity, which is the\n   GADAG Computer.  The GADAG is then described\
    \ in a Topology sub-TLV\n   (Section 6.1), which is flooded in the domain.  The\
    \ bridges then\n   compute the MRTs for the MRT Roots based on the GADAG received.\n\
    \   Section 7 provides more details on the description of the GADAG.  The\n  \
    \ value for the MRTG ECT Algorithm is 00-80-C2-19.\n   MRTs are loose trees as\
    \ bridges are involved in their computation and\n   restoration.  Thus, both the\
    \ MRT and the MRTG ECT Algorithms provide\n   a set of loose trees: two MRTs for\
    \ each MRT Root.\n   The SPB Link Metric sub-TLV [RFC6329] specifies the metric\
    \ of each\n   link for IS-IS PCR if the LT, the LTS, the MRT, or the MRTG ECT\n\
    \   Algorithm is used.  If the SPB Link Metric values advertised by\n   different\
    \ ends of an adjacency are different, then the maximum value\n   MUST be used.\n"
- title: 6.  IS-IS PCR Sub-TLVs
  contents:
  - "6.  IS-IS PCR Sub-TLVs\n   The following sub-TLVs are specified for IS-IS PCR.\
    \  The Topology\n   sub-TLV MUST be carried in an MT-Capability TLV, the rest\
    \ of the sub-\n   TLVs are conveyed by the Topology sub-TLV.\n"
- title: 6.1.  Topology Sub-TLV
  contents:
  - "6.1.  Topology Sub-TLV\n   An explicit tree MUST be described by the variable-length\
    \ Topology\n   sub-TLV.  A Generalized Almost Directed Acyclic Graph (GADAG) MAY\
    \ be\n   described by a Topology sub-TLV as explained in Section 7 in detail.\n\
    \   The Topology sub-TLV MUST be carried in an MT-Capability TLV (type\n   144)\
    \ [RFC6329] in a Link State PDU.  A Topology sub-TLV specifying an\n   explicit\
    \ tree conveys one or more Base VIDs, two or more Hop sub-TLVs\n   (Section 6.2).\
    \  A Topology sub-TLV describing a loose tree MAY also\n   convey further sub-TLVs\
    \ to specify constraints.  Figure 1 shows the\n   format of the Topology sub-TLV.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+\n\
    \     |     Type      |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n \
    \    |    Length     |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n  \
    \   | Num Base VIDs |                   (1 byte)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Res  |  Base VID 1 (12 bits) |   (2 bytes if present)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            .................\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |\
    \  Res  |  Base VID n (12 bits) |   (2 bytes if present)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                        sub-TLV 1  (variable)                  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                      .................\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                        sub-TLV m  (variable)                  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                Figure 1: Topology Sub-TLV\n   The parameters of explicit trees\
    \ are encoded by the Topology sub-TLV\n   as follows:\n   a.  Type (8 bits): The\
    \ type of the sub-TLV, its value is 21.\n   b.  Length (8 bits): The total number\
    \ of bytes contained in the Value\n       field.\n   c.  Number of Base VIDs (8\
    \ bits): The number of Base VIDs carried in\n       the Topology sub-TLV.  Its\
    \ minimum value is 1 if the Topology\n       sub-TLV specifies one or more explicit\
    \ trees.  Its value can be 0\n       if the Topology sub-TLV specifies a GADAG.\n\
    \   d.  Reserved (Res) (4 bits): The reserved bits MUST be set to 0 on\n     \
    \  transmission and the value MUST be ignored on reception.\n   e.  Base VID (12\
    \ bits): The Base VID parameter provides the Base VID\n       of the VLAN that\
    \ is associated with the explicit tree.  Multiple\n       Base VIDs can be associated\
    \ with the same explicit tree.  In\n       addition to the Base VID, some of the\
    \ explicit ECT Algorithms\n       (Section 5) require further VIDs that are associated\
    \ with the\n       VLAN via the SPB Instance sub-TLV [RFC6329].  A Topology sub-TLV\n\
    \       specifying a GADAG can have zero Base VID parameters.  In this\n     \
    \  case, the given GADAG MUST be applied for each VLAN associated\n       with\
    \ the MRTG ECT Algorithm (Section 5).\n   f.  sub-TLVs: The rest conveys further\
    \ sub-TLVs that specify the hops\n       of the topology and can also specify\
    \ constraints as described in\n       the following.\n   A topology is specified\
    \ by a list of Hop sub-TLVs (Section 6.2), and\n   a hop is specified by an IS-IS\
    \ System ID.  An ill-formed Topology\n   sub-TLV (e.g., specifying an invalid\
    \ or inconsistent tree) is\n   ignored; no tree is installed, but a management\
    \ report is generated.\n   The Topology sub-TLV specifies a strict tree by decomposing\
    \ the tree\n   to branches.  Each branch is a point-to-point path specified by\
    \ an\n   ordered list of hops where the end of each branch is a leaf.  Each\n\
    \   element of a branch is the direct link between adjacent neighbor\n   bridges\
    \ whose Hop sub-TLV is next to each other in the Topology sub-\n   TLV.  The first\
    \ hop of the Topology sub-TLV is the root; hence, the\n   first branch originates\
    \ from the root.  The rest of the branches fork\n   from another branch.  The\
    \ first hop of a branch is a bridge that is\n   already part of a former branch,\
    \ and the last hop is a leaf bridge.\n   Therefore, the hop after a leaf hop is\
    \ the beginning of a new branch,\n   if any.  A hop of a branch is created if\
    \ and only if the bridge\n   specified for that hop is directly connected to the\
    \ preceding bridge\n   of the same branch.  The first branch MUST begin with the\
    \ root; after\n   that, the order of the branches does not matter within the Topology\n\
    \   sub-TLV.  Figure 2 shows an example strict tree and its description.\n   \
    \                                        +-----------+\n                     \
    \                      |     A     |\n                                       \
    \    +-----------+\n                                           |     I     |\n\
    \                                           +-----------+\n                  \
    \                         |     H     |\n                  [B]---[A]---[I]   \
    \       +-----------+\n                   |           |           |     G    \
    \ |\n                   |           |           +-----------+\n              \
    \     |           |           |     E     |\n                  [C]---[F]   [H]\
    \          +-----------+\n                   |           |           |     A \
    \    |\n                   |           |           +-----------+\n           \
    \        |           |           |     B     |\n                  [D]   [E]---[G]\
    \          +-----------+\n                                           |     C \
    \    |\n                                           +-----------+\n           \
    \                                |     D     |\n                             \
    \              +-----------+\n                                           |   \
    \  C     |\n                                           +-----------+\n       \
    \                                    |     F     |\n                         \
    \                  +-----------+\n        Figure 2: A Strict Tree and Its Description;\
    \ Root = Node A\n   The Topology sub-TLV of a loose tree does not provide any\
    \ path or\n   path segment other than the hops that are to participate.  The root\n\
    \   MUST be the first hop.  The leaves of a single loose tree MUST also\n   be\
    \ specified.  Hop sub-TLVs can be included in a Topology sub-TLV to\n   specify\
    \ bridges that have to be avoided.  If the Topology sub-TLV\n   only specifies\
    \ a single leaf, then one or more transit hops can be\n   specified by the Topology\
    \ sub-TLV to direct the path along a sequence\n   of bridges, specified by the\
    \ order of hops.  If bridges whose\n   respective Hop sub-TLVs are adjacent to\
    \ each other in the Topology\n   sub-TLV are not topology neighbors, then it is\
    \ a loose hop.  If a\n   Topology sub-TLV conveys one or more loose hops, then\
    \ that sub-TLV\n   defines a loose explicit tree and each hop is considered to\
    \ be a\n   loose hop.  The path of a loose hop MUST be pruned from the tree if\n\
    \   the path would create a loop or hairpin.\n   If the Base VIDs of the Topology\
    \ sub-TLV are associated with the LTS\n   ECT Algorithm or the MRT ECT Algorithm,\
    \ then the Hop sub-TLVs\n   conveyed by the Topology sub-TLV belong to Edge Bridges\
    \ or bridges to\n   be excluded.  The BLCEs compute the loose trees, e.g., MRTs,\
    \ such\n   that they span the Edge Bridges and are rooted at an Edge Bridge.\n\
    \   The Topology sub-TLV specifies a GADAG if the Base VIDs conveyed by\n   the\
    \ Topology sub-TLV are associated with the MRTG ECT Algorithm.\n   Section 7 provides\
    \ the details on the description of a GADAG by a\n   Topology sub-TLV.\n   Each\
    \ Edge Bridge of an explicit tree MUST always be specified in the\n   Topology\
    \ sub-TLV by the inclusion of the Hop sub-TLVs corresponding\n   to the Edge Bridges.\
    \  The Edge Bridges of a tree are identified by\n   setting the Edge Bridge flag\
    \ (item c.3. in Section 6.2) in the\n   appropriate Hop sub-TLVs.\n   If the explicit\
    \ tree is loose, then the Topology sub-TLV MAY convey\n   further sub-TLVs to\
    \ specify constraints, e.g., an Administrative\n   Group sub-TLV [RFC5305] or\
    \ a Bandwidth Constraint (Section 6.3).  If\n   it is not possible to meet the\
    \ constraint(s) specified by the\n   Topology sub-TLV, then no tree is installed\
    \ but a management report\n   is generated.\n   IS-IS PCR MAY be used for recording\
    \ bandwidth assignment.  In that\n   case, the Topology sub-TLV conveys Bandwidth\
    \ Assignment sub-TLV\n   (Section 6.4), and it MAY also convey Timestamp sub-TLV\n\
    \   (Section 6.5).  If assignment of the bandwidth indicated by the\n   Bandwidth\
    \ Assignment sub-TLV of the Topology sub-TLV would result in\n   overbooking any\
    \ link of the explicit tree, then bandwidth assignment\n   MUST NOT be performed\
    \ and a management report is generated.  If the\n   Topology sub-TLV specifies\
    \ a new valid explicit tree, then the tree\n   is installed without bandwidth\
    \ assignment.\n"
- title: 6.2.  Hop Sub-TLV
  contents:
  - "6.2.  Hop Sub-TLV\n   The Hop sub-TLV MUST be used to specify a hop of a topology.\
    \  Each\n   Hop sub-TLV conveys an IS-IS System ID, which specifies a hop.  A\
    \ Hop\n   sub-TLV is conveyed by a Topology sub-TLV (Section 6.1).  A strict\n\
    \   explicit tree is decomposed to branches where each branch is a point-\n  \
    \ to-point path specified by an ordered list of Hop sub-TLVs as\n   specified\
    \ in Section 6.1.  A hop of a branch is created if and only\n   if the bridge\
    \ specified for that hop is directly connected to the\n   preceding bridge in\
    \ the path.  That is, a point-to-point LAN is\n   identified by the two bridges\
    \ it interconnects; and the LAN is part\n   of the strict tree if and only if\
    \ the Hop sub-TLVs of the two bridges\n   are next to each other in the Topology\
    \ sub-TLV.  A Hop sub-TLV can\n   convey a Circuit ID in order to distinguish\
    \ multiple links between\n   adjacent neighbor bridges.  A Hop sub-TLV also specifies\
    \ the role of\n   a bridge, e.g., if it is the root or an Edge Bridge.  The Topology\n\
    \   sub-TLV of a loose tree only comprises the Hop sub-TLV of the bridges\n  \
    \ that have a special role in the tree.  The Hop sub-TLV MAY also\n   specify\
    \ a delay budget for a loose hop.\n   By default, the Edge Bridges both transmit\
    \ and receive with respect\n   to each VID associated with an explicit tree, except\
    \ for an LTS\n   (Section 5) associated with a learning VLAN, which uses a\n \
    \  unidirectional VID per bridge.  The Hop sub-TLV allows different\n   configuration\
    \ by means of the Transmit (T) and Receive (R) flags\n   conveyed in the sub-TLV.\
    \  The VID and its T/R flags are only present\n   in the Hop sub-TLV if the behavior\
    \ of the Edge Bridges differs from\n   the default.\n   Figure 3 shows the format\
    \ of the variable length Hop sub-TLV, which\n   MUST be conveyed by a Topology\
    \ sub-TLV (Section 6.1).\n      0                   1                   2    \
    \               3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+\n     |     Type      |                  \
    \     (1 byte)\n     +-+-+-+-+-+-+-+-+\n     |    Length     |               \
    \        (1 byte)\n     +-+-+-+-+-+-+-+-+\n     |C|V|B|R|L|E|Res|            \
    \           (1 byte)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                            System ID                          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \        System ID            |       (6 bytes)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |            Extended Local Circuit ID  (4 bytes if present)    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Num\
    \ of VIDs  |                       (1 byte if present)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |T|R|Res|     VID 1   (12 bits) |       (2 bytes if present)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            .................\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |T|R|Res|\
    \     VID n   (12 bits) |       (2 bytes if present)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                        Delay Constraint                       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \      Delay Constraint       |       (6 bytes if present)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                           Figure 3: Hop Sub-TLV\n   The parameters of a hop\
    \ are encoded as follows:\n   a.  Type (8 bits): The type of the sub-TLV, its\
    \ value is 22.\n   b.  Length (8 bits): The total number of bytes contained in\
    \ the Value\n       field.\n   c.  Hop Flags (8 bits): The Hop sub-TLV conveys\
    \ six one-bit flags.\n       The Circuit and the VID flags influence the length\
    \ of the Hop\n       sub-TLV.  Two bits are reserved for future use, transmitted\
    \ as 0\n       and ignored on receipt.\n       1.  Circuit (C) flag (1 bit): The\
    \ Circuit flag is a one-bit flag\n           to indicate whether or not the Extended\
    \ Local Circuit ID\n           parameter is present.  If the flag is set, then\
    \ an Extended\n           Local Circuit ID is also included in the Hop sub-TLV.\n\
    \       2.  VID (V) flag (1 bit): The VID flag is a one-bit flag to\n        \
    \   indicate whether or not one or more VIDs are conveyed by the\n           Hop\
    \ sub-TLV.  If the flag is set, then the Number of VIDs\n           parameter\
    \ is present and indicates how many VIDs are conveyed\n           by the Hop sub-TLV.\
    \  If the VID flag is reset, then neither\n           the Number of VIDs parameter\
    \ nor VIDs are present in the Hop\n           sub-TLV.\n       3.  Edge Bridge\
    \ (B) flag (1 bit): The Edge Bridge flag is a one-\n           bit flag to indicate\
    \ whether or not the given System is an\n           Edge Bridge, i.e., transmitter\
    \ and/or receiver.  If the\n           System is an Edge Bridge, then the Edge\
    \ Bridge flag MUST be\n           set.  The Edge Bridge flag indicates that FDB\
    \ entries have to\n           be installed for the given hop as specified by the\
    \ SPBV MAC\n           address sub-TLV or SPBM Service Identifier and Unicast\n\
    \           Address sub-TLV of the hop.\n       4.  Root (R) flag (1 bit): The\
    \ Root flag is a one-bit flag to\n           indicate whether or not the given\
    \ System is a root of the\n           explicit tree specified by the Topology\
    \ sub-TLV.  If the\n           System is a root of a tree, then the Root flag\
    \ MUST be set.\n           If the Topology sub-TLV specifies a single tree, i.e.,\
    \ the\n           Base VIDs conveyed by the Topology sub-TLV are associated\n\
    \           with either the ST ECT Algorithm or the LT ECT Algorithm\n       \
    \    (Section 5), then the Root flag is only set for one of the\n           Systems\
    \ conveyed by the Topology sub-TLV.  Furthermore, the\n           first Hop sub-TLV\
    \ of the Topology sub-TLV conveys the System\n           that is the root of the\
    \ tree.\n           If the Topology sub-TLV specifies a Loose Tree Set, i.e.,\
    \ the\n           Base VIDs conveyed by the Topology sub-TLV are associated\n\
    \           with the LTS ECT Algorithm (Section 5), then the Root flag is\n  \
    \         set for each Edge Bridge as each of them roots a tree.\n           If\
    \ the Topology sub-TLV is used for MRT operations, i.e., the\n           Base\
    \ VIDs conveyed by the Topology sub-TLV are associated\n           with either\
    \ the MRT ECT Algorithm or the MRTG ECT algorithm\n           (Section 5), then\
    \ the Root flag is set for each MRT Root.  If\n           no MRT Root is specified\
    \ by a Topology sub-TLV specifying a\n           GADAG, then each SPT Root is\
    \ an MRT Root as well.\n           If the Base VIDs conveyed by the Topology sub-TLV\
    \ are\n           associated with the MRTG ECT algorithm (Section 5), then the\n\
    \           Topology sub-TLV specifies a GADAG and the very first Hop\n      \
    \     sub-TLV specifies the GADAG Root.  There is no flag for\n           indicating\
    \ the GADAG Root.\n       5.  Leaf (L) flag (1 bit): The Leaf flag is a one-bit\
    \ flag to\n           indicate whether or not the given System is a leaf of the\n\
    \           explicit tree specified by the Topology sub-TLV.  If the\n       \
    \    System is a leaf, then the Leaf flag MUST be set.  The Leaf\n           flag\
    \ is only used to mark a leaf of a tree if the Topology\n           sub-TLV specifies\
    \ a single tree.  The Leaf flag MUST be used\n           to indicate the end of\
    \ a topology block if the Topology sub-\n           TLV specifies a GADAG, see\
    \ Section 7.\n       6.  Exclude (E) flag (1 bit): The Exclude flag is a one-bit\
    \ flag\n           to indicate if the given System MUST be excluded from the\n\
    \           topology.  The Exclude flag and the Root flag cannot be set\n    \
    \       for a given hop at the same time.\n       7.  Reserved (Res) (2 bits):\
    \ The reserved bits MUST be set to 0\n           on transmission, and the value\
    \ MUST be ignored on reception.\n   d.  System ID (48 bits): The six-byte IS-IS\
    \ System Identifier of the\n       bridge to which the Hop sub-TLV refers.\n \
    \  e.  Extended Local Circuit ID (32 bits): The Extended Local Circuit\n     \
    \  ID [RFC5303] parameter is not necessarily present in the Hop sub-\n       TLV.\
    \  Its presence is indicated by the Circuit flag.  Parallel\n       links corresponding\
    \ to different IS-IS adjacencies between a pair\n       of neighbor bridges can\
    \ be distinguished by means of the Extended\n       Local Circuit ID.  The Extended\
    \ Local Circuit ID is conveyed by\n       the Hop sub-TLV specifying the bridge\
    \ nearer to the root of the\n       tree, and identifies a circuit that attaches\
    \ the given bridge to\n       its neighbor cited by the next Hop sub-TLV of the\
    \ Topology sub-\n       TLV.  The Extended Local Circuit ID can only be used in\
    \ strict\n       trees.\n   f.  Number of VIDs (8 bits): The Number of VIDs parameter\
    \ is not\n       present if the Hop sub-TLV does not convey VIDs, which is\n \
    \      indicated by the VID flag.\n   g.  VID and its T/R flags (14 bits): The\
    \ VID and its T/R flags are\n       only present in the Hop sub-TLV if the given\
    \ bridge is an Edge\n       Bridge and it behaves differently from the default\
    \ with respect\n       to that particular VID.\n       1.  T flag (1 bit): This\
    \ is the Transmit allowed flag for the VID\n           following the flag.\n \
    \      2.  R flag (1 bit): This is the Receive allowed flag for the VID\n    \
    \       following the flag.\n       3.  Reserved (Res) (2 bits): The reserved\
    \ bits MUST be set to 0\n           on transmission, and the value MUST be ignored\
    \ on reception.\n       4.  VID (12 bits): A VID.\n   h.  Delay Constraint (48\
    \ bits): A Hop sub-TLV MAY specify a delay\n       constraint.  The Length of\
    \ the Hop sub-TLV indicates whether or\n       not a delay constraint is present\
    \ because the Length of a Hop\n       sub-TLV conveying a delay constraint is\
    \ six bytes greater than it\n       would be without the delay constraint.  The\
    \ last six bytes then\n       specify a delay constraint if they convey a Unidirectional\
    \ Link\n       Delay sub-TLV [RFC7810].  The delay constraint MAY be used in a\n\
    \       Topology sub-TLV that specifies a single loose tree, i.e., the\n     \
    \  Base VIDs are associated with the LT ECT Algorithm (Section 5).\n       If\
    \ the delay constraint is applied, then the loose hop MUST fit\n       in the\
    \ delay budget specified by the Delay parameter of the\n       Unidirectional\
    \ Link Delay sub-TLV conveyed by the Hop sub-TLV.\n       If the Topology sub-TLV\
    \ specifies a single leaf, then the path\n       between the preceding Hop sub-TLV\
    \ and the current Hop sub-TLV\n       MUST meet the delay budget.  If the Topology\
    \ sub-TLV specifies\n       multiple leaves, then the path between the root and\
    \ the current\n       Hop sub-TLV MUST to meet the delay budget.  If the tree\
    \ is used\n       as a reverse congruent tree, then the delay constraint applies\
    \ in\n       both directions.  If the tree is used as a directed tree, then\n\
    \       the delay constraint applies in the direction of the tree.  If it\n  \
    \     is not possible to meet the delay constraint specified by the\n       Topology\
    \ sub-TLV, then no tree is installed but a management\n       report is generated.\n"
- title: 6.3.  Bandwidth Constraint Sub-TLV
  contents:
  - "6.3.  Bandwidth Constraint Sub-TLV\n   The Bandwidth Constraint sub-TLV MAY be\
    \ included in a Topology sub-\n   TLV (Section 6.1) in order to specify how much\
    \ available bandwidth is\n   to be provided by the constrained tree.  Each loose\
    \ hop MUST meet the\n   bandwidth constraint.  The bandwidth value of the constraint\
    \ is a\n   total value or it only refers to a single PCP as specified by the\n\
    \   sub-TLV.  Figure 4 shows the format of the Bandwidth Constraint sub-\n   TLV.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+\n\
    \     |     Type      |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n \
    \    |    Length     |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n  \
    \   | PCP |D|P| Res |                   (1 byte)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |              Available Bandwidth  (4 bytes)                   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \          Figure 4: Bandwidth Constraint Sub-TLV\n   The parameters of the bandwidth\
    \ constraint are encoded as follows:\n   a.  Type (8 bits): The type of the sub-TLV,\
    \ its value is 23.\n   b.  Length (8 bits): The total number of bytes contained\
    \ in the Value\n       field.  The value of the Length field is 5 bytes.\n   c.\
    \  PCP (4 bits): The Priority Code Point (PCP) parameter identifies\n       the\
    \ traffic class the Available Bandwidth parameter refers to, if\n       any.\n\
    \   d.  DEI (D) (1 bit): This is the Drop Eligible Indicator (DEI)\n       parameter.\
    \  If the DEI parameter is clear, then the bandwidth\n       constraint refers\
    \ to committed information rate.  If the DEI\n       parameter is set, then the\
    \ bandwidth constraint refers to the\n       peak information rate.\n   e.  PCP\
    \ (P) flag (1 bit): If this flag is set, then the PCP parameter\n       is taken\
    \ into account.\n   f.  Reserved (Res) (3 bits): The reserved bits MUST be set\
    \ to 0 on\n       transmission, and the value MUST be ignored on reception.\n\
    \   g.  Available Bandwidth (32 bits): The Available Bandwidth is\n       specific\
    \ to the traffic class identified by the PCP parameter if\n       the PCP flag\
    \ is set; otherwise, it is total bandwidth.  In line\n       with the bandwidth\
    \ parameters specified in [RFC5305], the\n       Available Bandwidth is encoded\
    \ as a 32-bit IEEE floating-point\n       number [IEEE754], and the units are\
    \ bytes (not bits!) per second.\n       When the Unreserved Bandwidth sub-TLV\
    \ (sub-TLV type 11 specified\n       by [RFC5305]) is used in a Layer 2 bridge\
    \ network, the priority\n       value encoded in the Unreserved Bandwidth sub-TLV\
    \ provides the\n       PCP, i.e., identifies a traffic class (not a setup priority\n\
    \       level).  Thus, the Available Bandwidth of a traffic class is\n       easily\
    \ comparable with the Unreserved Bandwidth stored in the TED\n       for the given\
    \ traffic class.  The bandwidth constraint applies\n       for both directions\
    \ in case of symmetric explicit trees.\n       Nevertheless, a VID associated\
    \ with an explicit tree can be made\n       unidirectional by means of the T/R\
    \ flags belonging to the VID in\n       the Hop sub-TLV (item g. in Section 6.2)\
    \ of the Edge Bridges.  If\n       all the VIDs of the Topology sub-TLV (Section\
    \ 6.1) are\n       unidirectional and all belong to the traffic class identified\
    \ by\n       the PCP parameter of the Bandwidth Constraint sub-TLV, then it is\n\
    \       enough to meet the bandwidth constraint in the direction applied\n   \
    \    for those VIDs.\n"
- title: 6.4.  Bandwidth Assignment Sub-TLV
  contents:
  - "6.4.  Bandwidth Assignment Sub-TLV\n   IS-IS PCR MAY be used for recording bandwidth\
    \ assignment for\n   explicitly placed data traffic in a domain if MSRP is not\
    \ used within\n   the domain.  If MSRP is used in a domain, then only MSRP performs\n\
    \   reservations and IS-IS does not.  Both MSRP and IS-IS MUST NOT be\n   used\
    \ to make bandwidth assignments in the same domain.\n   The Bandwidth Assignment\
    \ sub-TLV can be used to define the amount of\n   bandwidth whose assignment is\
    \ to be recorded by IS-IS PCR at each hop\n   of the explicit tree described by\
    \ the corresponding Topology sub-TLV\n   (Section 6.1).  The Bandwidth Assignment\
    \ sub-TLV is used by IS-IS PCR\n   for the recording of bandwidth assignment for\
    \ a traffic class\n   identified by the PCP parameter of a VLAN tag.  If precedence\
    \ order\n   has to be determined among bandwidth assignments in a domain with\n\
    \   multiple PCEs, then IS-IS PCR does it as described below.  If the\n   bandwidth\
    \ assignment specified by the Topology sub-TLV is not\n   possible, e.g., due\
    \ to overbooking, then bandwidth recording MUST NOT\n   be performed and a management\
    \ report is generated.  If the Topology\n   sub-TLV specifies a new valid explicit\
    \ tree, then the tree is\n   installed without bandwidth assignment.  The Bandwidth\
    \ Assignment\n   sub-TLV is conveyed by a Topology sub-TLV (Section 6.1).  Figure\
    \ 5\n   shows the format of the Bandwidth Assignment sub-TLV.\n      0       \
    \            1                   2                   3\n      0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+\n  \
    \   |     Type      |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n   \
    \  |    Length     |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n    \
    \ | PCP |D| Imp |R|                   (1 byte)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                        Bandwidth  (4 bytes)                   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \          Figure 5: Bandwidth Assignment Sub-TLV\n   The parameters of the bandwidth\
    \ assignment are encoded as follows:\n   a.  Type (8 bits): The type of the sub-TLV,\
    \ its value is 24.\n   b.  Length (8 bits): The total number of bytes contained\
    \ in the Value\n       field.  The value of the Length field is 5 bytes.\n   c.\
    \  PCP (3 bits): The PCP parameter identifies the traffic class for\n       which\
    \ the bandwidth is to be assigned.\n   d.  DEI (D) (1 bit): This is the Drop Eligible\
    \ Indicator (DEI)\n       parameter.  If the DEI parameter is clear, then the\
    \ bandwidth\n       assignment is performed for providing the committed information\n\
    \       rate.  If the DEI parameter is set, then the bandwidth assignment\n  \
    \     is performed for providing the peak information rate.\n   e.  Importance\
    \ (Imp) (3 bits): This is the Importance parameter for\n       determining precedence\
    \ order among bandwidth assignments within a\n       PCP as described below. \
    \ A lower numerical value indicates more\n       important bandwidth assignment\
    \ within a PCP.  The default value\n       of the Importance parameter is 7.\n\
    \   f.  Reserved (R) (1 bit): The reserved bit MUST be set to 0 on\n       transmission,\
    \ and the value MUST be ignored on reception.\n   g.  Bandwidth (32 bits): This\
    \ is the amount of bandwidth to be\n       assigned for the traffic class identified\
    \ by the PCP parameter.\n       In line with the bandwidth values specified in\
    \ [RFC5305], the\n       Bandwidth parameter is encoded as a 32-bit IEEE floating-point\n\
    \       number [IEEE754], and the units are bytes (not bits!) per second.\n  \
    \     The bandwidth assignment applies for both directions in case of\n      \
    \ symmetric explicit trees.\n   The PCEs are collectively responsible for making\
    \ a consistent set of\n   bandwidth assignments when IS-IS PCR is used for recording\
    \ bandwidth\n   allocations.  If, despite that, precedence ordering is required\
    \ among\n   bandwidth assignments, then ordering based on the following\n   parameters\
    \ MUST be applied:\n   1.  PCP parameter of Bandwidth Assignment sub-TLV,\n  \
    \ 2.  Importance parameter of Bandwidth Assignment sub-TLV,\n   3.  Timestamp\
    \ sub-TLV (if present in the Topology sub-TLV).\n   A bandwidth assignment takes\
    \ precedence if it has a higher PCP, or a\n   higher Importance within a PCP,\
    \ or an earlier timestamp in case of\n   equal Importance within a PCP.  A bandwidth\
    \ assignment associated\n   with a timestamp takes precedence over a bandwidth\
    \ assignment without\n   a timestamp when PCP and Importance of different bandwidth\n\
    \   assignments are both equal.  If resolution is not possible based on\n   the\
    \ above parameters or they are not available, e.g., each bandwidth\n   assignment\
    \ lacks a timestamp or the precedence order has to be\n   determined for the use\
    \ of a VID, then the item is granted to the PCE\n   whose LSP has the numerically\
    \ lowest LSP ID.\n"
- title: 6.5.  Timestamp Sub-TLV
  contents:
  - "6.5.  Timestamp Sub-TLV\n   The Timestamp sub-TLV MAY be included in a Topology\
    \ sub-TLV\n   (Section 6.1) in order to provide precedence order among equally\n\
    \   important bandwidth assignments within a PCP as described in\n   Section 6.4.\
    \  Figure 6 shows the format of the Timestamp sub-TLV.\n      0              \
    \     1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+\n     |    \
    \ Type      |                   (1 byte)\n     +-+-+-+-+-+-+-+-+\n     |    Length\
    \     |                   (1 byte)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                        Time       (4 bytes)                   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                Figure 6: Timestamp Sub-TLV\n   The timestamp represents a positive\
    \ time with respect to the\n   Precision Time Protocol (PTP) epoch, and it is\
    \ encoded as follows:\n   a.  Type (8 bits): The type of the sub-TLV; its value\
    \ is 25.\n   b.  Length (8 bits): The total number of bytes contained in the Value\n\
    \       field.  The value of the Length field is 4 bytes.\n   c.  Time (32 bits):\
    \ This is the time in units of seconds with respect\n       to the PTP epoch.\n\
    \   The Timestamp sub-TLV carries the seconds portion of PTP as specified\n  \
    \ by [IEEE1588].  The epoch is 1970-01-01 00:00:00 TAI (i.e., the PTP\n   time\
    \ does not include leap seconds).\n"
- title: 7.  MRT-FRR Application
  contents:
  - "7.  MRT-FRR Application\n   The application of MRT by [IEEE8021Qca] is discussed\
    \ in detail in\n   [MRT-IEEE8021qca].  This section describes some special\n \
    \  considerations for the use of the MRT Lowpoint algorithm [RFC7811],\n   which\
    \ are applicable both to the MRT ECT Algorithm and the MRTG ECT\n   Algorithm.\
    \  This section also explains details related to the MRTG\n   ECT Algorithm and\
    \ the application of the Topology sub-TLV in\n   particular.\n   IS-IS PCR does\
    \ not use the MRT Profile specified in [RFC7812].  IS-IS\n   PCR only relies on\
    \ the algorithm specification in [RFC7811].  Both\n   the MRT ECT Algorithm and\
    \ the MRTG ECT Algorithm use the MRT Lowpoint\n   algorithm specified in [RFC7811].\n\
    \   The SPB Link Metric sub-TLV [RFC6329] specifies the metric of each\n   link\
    \ for IS-IS PCR including the MRT algorithms.  If the SPB Link\n   Metric values\
    \ advertised by different ends of an adjacency are\n   different, then the maximum\
    \ value MUST be used.  If equal cost\n   (sub-)paths are found during the MRT\
    \ computation, then the default\n   tie-breaking specified by Section 11 of [RFC6329]\
    \ MUST be used, which\n   is based on the lower BridgeID.  (The BridgeID is an\
    \ 8-byte quantity\n   whose upper 2 bytes are the node's BridgePriority and lower\
    \ 6 bytes\n   are the node's System ID.)  Note that if MRTs are used for source-\n\
    \   specific multicast (see [IEEE8021Qca] for details), then the bridges\n   have\
    \ to compute the MRTs of the other bridges in addition to their\n   own in order\
    \ to be able to install the appropriated FDB entries.\n   (This is similar to\
    \ the need for all pairs shortest path computation\n   instead of Dijkstra for\
    \ source-specific shortest path multicast\n   trees.)\n   The GADAG is identical\
    \ for all the MRTs within a network domain, as a\n   consequence of the use of\
    \ the MRT Lowpoint algorithm [RFC7811].\n   Therefore, it is beneficial to compute\
    \ the GADAG by a single entity,\n   which is referred to as the GADAG Computer\
    \ and is either a PCE or the\n   GADAG Root.  If the MRTG ECT Algorithm is applied,\
    \ then the GADAG\n   MUST be computed only by the GADAG Computer, which then MUST\
    \ flood\n   the descriptor Topology sub-TLV of the GADAG.  The bridges then\n\
    \   compute the MRTs based on the received GADAG.\n   The GADAG computation requires\
    \ the selection of the GADAG Root.  The\n   bridge with the best BridgeID MUST\
    \ be selected as the GADAG Root,\n   where the numerically lower value indicates\
    \ the better identifier.\n   The Bridge Priority component of the BridgeID allows\
    \ the\n   configuration of the GADAG Root by management action.  The Bridge\n\
    \   Priority is conveyed by the SPB Instance sub-TLV [RFC6329].\n   The GADAG\
    \ Computer MUST perform the GADAG computation as specified by\n   the MRT Lowpoint\
    \ algorithm [RFC7811].  The GADAG Computer then MUST\n   encode the GADAG in a\
    \ Topology sub-TLV (Section 6.1), which is then\n   flooded throughout the domain.\
    \  A GADAG is encoded in a Topology sub-\n   TLV by means of directed ear decomposition\
    \ as follows.  A directed\n   ear is a directed point-to-point path whose end\
    \ points can coincide\n   but no other element of the path is repeated in the\
    \ ear.  Each ear is\n   specified by an ordered list of hops such that the order\
    \ of hops is\n   according to the direction of the arcs in the GADAG.  There are\
    \ no\n   leaves in a GADAG; hence, the Leaf flag (item c.5. in Section 6.2) is\n\
    \   used to mark the end of a topology block.  (A GADAG with multiple\n   blocks\
    \ is illustrated in Figure 8.)  The sequence of ears in the\n   Topology sub-TLV\
    \ is such that the end points of an ear belong to\n   preceding ears.  The GADAG\
    \ Root is not marked by any flag, but the\n   GADAG Root is the first hop in the\
    \ Topology sub-TLV; correspondingly,\n   the first ear starts and ends with the\
    \ GADAG Root.  MRT Roots MUST be\n   marked by the Root flag (item c.4. in Section\
    \ 6.2) and all other Edge\n   Bridges are leaves of the given MRTs.  If no MRT\
    \ Root is specified,\n   then each SPT Root is also an MRT Root.\n   Figure 7\
    \ shows an example GADAG.  The figure also illustrates the\n   description of\
    \ the GADAG; it shows the System ID parameter of the Hop\n   sub-TLV (Section\
    \ 6.2) and the order of hops in the Topology sub-TLV\n   (Section 6.1).\n    \
    \                                                   Leaf\n                   \
    \                            Hop     flag\n                                  \
    \        +-----------+---+\n                                          |     A\
    \     |   |\n                                          +-----------+---+\n   \
    \                                       |     B     |   |\n                  \
    \                        +-----------+---+\n                                 \
    \         |     C     |   |\n                                          +-----------+---+\n\
    \                                          |     F     |   |\n               [B]<---[A]<---[I]\
    \          +-----------+---+\n                |      ^      ^           |    \
    \ A     |   |\n                |      |      |           +-----------+---+\n \
    \               V      |      |           |     C     |   |\n               [C]--->[F]--->[H]\
    \          +-----------+---+\n                |             ^           |    \
    \ D     |   |\n                |             |           +-----------+---+\n \
    \               V             |           |     E     |   |\n               [D]--->[E]--->[G]\
    \          +-----------+---+\n                                          |    \
    \ G     |   |\n                                          +-----------+---+\n \
    \                                         |     H     |   |\n                \
    \                          +-----------+---+\n                               \
    \           |     I     |   |\n                                          +-----------+---+\n\
    \                                          |     A     |   |\n               \
    \                           +-----------+---+\n                              \
    \            |     F     |   |\n                                          +-----------+---+\n\
    \                                          |     H     | X |\n               \
    \                           +-----------+---+\n        Figure 7: A GADAG and Its\
    \ Description; GADAG Root = Node A\n   A topology can comprise multiple blocks,\
    \ like the one illustrated in\n   Figure 8(a).  This example topology comprises\
    \ four blocks as each\n   cut-link is a block.  A-B-C-D-E-F is a block, D-G is\
    \ another block,\n   G-H, and H-J-K are further blocks.  A GADAG for this topology\
    \ is\n   shown in Figure 8(b).  Note that two arcs with opposite directions\n\
    \   represent a cut-link in a GADAG; see, for example, the cut-link\n   between\
    \ D and G.  The encoding starts with the block (ADAG) involving\n   the GADAG\
    \ Root as illustrated in Figure 8.  The first hop in the\n   Topology sub-TLV\
    \ is the GADAG Root (node A in this example).  The\n   ADAG of the first block\
    \ is then described using the ear\n   decomposition, as described above.  In this\
    \ example, the first block\n   has been completely traversed at the second occurrence\
    \ of node A in\n   the GADAG descriptor.  The end of a block is indicated by setting\
    \ the\n   Leaf flag for the last hop of the block, e.g., for the second\n   occurrence\
    \ of node A in the example GADAG descriptor.  The next node\n   that appears in\
    \ the GADAG descriptor (D in this case) is the\n   localroot for the nodes in\
    \ the next block.  Continuing this process,\n   the Leaf flag is set for the third\
    \ occurrence of D, the third\n   occurrence of G, and the third occurrence of\
    \ H, each indicating the\n   end of a block.  The first hop of the first block\
    \ is the GADAG Root,\n   the fist hop in the rest of the blocks is the localroot.\
    \  The\n   position of the set Leaf flags helps to determine the localroot,\n\
    \   which is the next hop.  In the example GADAG descriptor, one can\n   determine\
    \ that A is the localroot for B, C, D, E, F (and A is the\n   GADAG Root).  D\
    \ is the localroot for G.  G is the localroot for H.\n   And H is the localroot\
    \ for J and K.  The GADAG Root is assigned a\n   localroot of None.\n   Block\
    \ IDs are reconstructed while parsing a Topology sub-TLV\n   specifying a GADAG.\
    \  The current Block ID starts at 0 and is assigned\n   to the GADAG Root.  A\
    \ node appearing in the GADAG descriptor without\n   a previously assigned Block\
    \ ID value is assigned the current Block\n   ID.  And the current Block ID is\
    \ incremented by 1 after processing\n   the localroot of a block.  Note that the\
    \ localroot of a block will\n   keep the Block ID of the first block in which\
    \ it is assigned a Block\n   ID.  In the example in Figure 8, A has Block ID=0.\
    \  B, C, D, E, and F\n   have Block ID=1.  G has Block ID=2.  H has Block ID=3.\
    \  J and K have\n   Block ID=4.\n                                            \
    \           Leaf\n                                               Hop     flag\n\
    \               [F]--[E]        +--[K]     +-----------+---+\n               \
    \ |    |         |   |      |     A     |   |\n                |    |        \
    \ |   |      +-----------+---+\n               [A]  [D]--[G]--[H]  |      |  \
    \   B     |   |\n                |    |         |   |      +-----------+---+\n\
    \                |    |         |   |      |     C     |   |\n               [B]--[C]\
    \        +--[J]     +-----------+---+\n                                      \
    \    |     D     |   |\n                    (a) Topology          +-----------+---+\n\
    \                                          |     E     |   |\n               \
    \                           +-----------+---+\n                              \
    \            |     F     |   |\n                                          +-----------+---+\n\
    \                                          |     A     | X |\n               \
    \                           +-----------+---+\n               +-+  +-+       \
    \    +-+     |     D     |   |\n               |F|<-|E|        +--|K|     +-----------+---+\n\
    \               +-+  +-+        |  +-+     |     G     |   |\n               \
    \ |    ^         |   ^      +-----------+---+\n                |    |        \
    \ V   |      |     D     | X |\n                V   +-+  +-+  +-+  |      +-----------+---+\n\
    \               +-+  | |->| |->| |  |      |     G     |   |\n               |A|\
    \  |D|  |G|  |H|  |      +-----------+---+\n               +-+  | |<-| |<-| |\
    \  |      |     H     |   |\n                |   +-+  +-+  +-+  |      +-----------+---+\n\
    \                |    ^         |   |      |     G     | X |\n               \
    \ V    |         |   |      +-----------+---+\n               +-+  +-+       \
    \ |  +-+     |     H     |   |\n               |B|->|C|        +->|J|     +-----------+---+\n\
    \               +-+  +-+           +-+     |     J     |   |\n               \
    \                           +-----------+---+\n                     (b) GADAG\
    \            |     K     |   |\n                                          +-----------+---+\n\
    \                                          |     H     | X |\n               \
    \                           +-----------+---+\n                              \
    \         (c) GADAG Descriptor\n    Figure 8: A GADAG with Cut-Links and Its Description;\
    \ GADAG Root =\n                                  Node A\n"
- title: 8.  Summary
  contents:
  - "8.  Summary\n   This document specifies IS-IS sub-TLVs for the control of explicit\n\
    \   trees in Layer 2 networks.  These sub-TLVs can be also used for the\n   distribution\
    \ of a centrally computed GADAG or MRTs if MFT-FRR is\n   used.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document defines the following IS-IS sub-TLVs\
    \ within the\n   MT-Capability TLV (type 144).  They are listed in the \"IS-IS\
    \ TLV\n   Codepoints\" registry.\n         Type        Description           \
    \                Length\n         ----        ----------------------------   \
    \     --------\n           21        Topology                            variable\n\
    \           22        Hop                                 variable\n         \
    \  23        Bandwidth Constraint                       5\n           24     \
    \   Bandwidth Assignment                       5\n           25        Timestamp\
    \                                  4\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   This document adds no additional security risks\
    \ to IS-IS, nor does it\n   provide any additional security for IS-IS when used\
    \ in a configured\n   environment or a single-operator domain such as a data center.\
    \  IS-IS\n   PCR is not for zero-configuration environments.\n   Any mechanism\
    \ that chooses forwarding paths, and allocates resources\n   to those paths, is\
    \ potentially vulnerable to attack.  The security\n   considerations section of\
    \ [RFC4655] describes the risks associated\n   with the use of PCE for this purpose\
    \ and should be referred to.  Use\n   of any other means to determine paths should\
    \ only be used after\n   considering similar concerns.\n   Because the mechanism\
    \ assumed for distributing tree information\n   relies on IS-IS routing, IS-IS\
    \ routing security considerations\n   (Section 6, [RFC1195]) and mechanisms (e.g.,\
    \ [RFC5310]) used to\n   authenticate peer advertisements apply.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [IEEE8021Qca]\n              IEEE, \"IEEE Standard\
    \ for Local and metropolitan area\n              networks - Bridges and Bridged\
    \ Networks - Amendment 24:\n              Path Control and Reservation\", IEEE\
    \ 802.1Qca-2015,\n              DOI 10.1109/IEEESTD.2016.7434544, 2016,\n    \
    \          <https://standards.ieee.org/findstds/\n              standard/802.1Qca-2015.html>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5303]\
    \  Katz, D., Saluja, R., and D. Eastlake 3rd, \"Three-Way\n              Handshake\
    \ for IS-IS Point-to-Point Adjacencies\", RFC 5303,\n              DOI 10.17487/RFC5303,\
    \ October 2008,\n              <http://www.rfc-editor.org/info/rfc5303>.\n   [RFC5305]\
    \  Li, T. and H. Smit, \"IS-IS Extensions for Traffic\n              Engineering\"\
    , RFC 5305, DOI 10.17487/RFC5305, October\n              2008, <http://www.rfc-editor.org/info/rfc5305>.\n\
    \   [RFC5307]  Kompella, K., Ed. and Y. Rekhter, Ed., \"IS-IS Extensions\n   \
    \           in Support of Generalized Multi-Protocol Label Switching\n       \
    \       (GMPLS)\", RFC 5307, DOI 10.17487/RFC5307, October 2008,\n           \
    \   <http://www.rfc-editor.org/info/rfc5307>.\n   [RFC6329]  Fedyk, D., Ed., Ashwood-Smith,\
    \ P., Ed., Allan, D., Bragg,\n              A., and P. Unbehagen, \"IS-IS Extensions\
    \ Supporting IEEE\n              802.1aq Shortest Path Bridging\", RFC 6329,\n\
    \              DOI 10.17487/RFC6329, April 2012,\n              <http://www.rfc-editor.org/info/rfc6329>.\n\
    \   [RFC7810]  Previdi, S., Ed., Giacalone, S., Ward, D., Drake, J., and\n   \
    \           Q. Wu, \"IS-IS Traffic Engineering (TE) Metric Extensions\",\n   \
    \           RFC 7810, DOI 10.17487/RFC7810, May 2016,\n              <http://www.rfc-editor.org/info/rfc7810>.\n\
    \   [RFC7811]  Enyedi, G., Csaszar, A., Atlas, A., Bowers, C., and A.\n      \
    \        Gopalan, \"An Algorithm for Computing IP/LDP Fast Reroute\n         \
    \     Using Maximally Redundant Trees (MRT-FRR)\", RFC 7811,\n              DOI\
    \ 10.17487/RFC7811, June 2016,\n              <http://www.rfc-editor.org/info/rfc7811>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [IEEE1588] IEEE, \"IEEE Standard for a Precision\
    \ Clock Synchronization\n              Protocol for Networked Measurement and\
    \ Control Systems\",\n              IEEE 1588-2008, DOI 10.1109/IEEESTD.2008.4579760,\
    \ 2008,\n              <http://standards.ieee.org/findstds/\n              standard/1588-2008.html>.\n\
    \   [IEEE754]  IEEE, \"IEEE Standard for Floating-Point Arithmetic\",\n      \
    \        IEEE 754-2008, DOI 10.1109/IEEESTD.2008.4610935, 2008,\n            \
    \  <http://standards.ieee.org/findstds/\n              standard/754-2008.html>.\n\
    \   [IEEE8021aq]\n              IEEE, \"IEEE Standard for Local and metropolitan\
    \ area\n              networks -- Media Access Control (MAC) Bridges and Virtual\n\
    \              Bridged Local Area Networks -- Amendment 20: Shortest Path\n  \
    \            Bridging\", IEEE 802.1aq-2012,\n              DOI 10.1109/IEEESTD.2012.6231597,\
    \ 2012,\n              <https://standards.ieee.org/findstds/\n              standard/802.1aq-2012.html>.\n\
    \   [IEEE8021Q]\n              IEEE, \"IEEE Standard for Local and metropolitan\
    \ area\n              networks--Bridges and Bridged Networks\", IEEE 802.1Q-2014,\n\
    \              DOI 10.1109/IEEESTD.2014.6991462, 2014,\n              <https://standards.ieee.org/findstds/\n\
    \              standard/802.1Q-2014.html>.\n   [MRT-IEEE8021qca]\n           \
    \   Bowers, C. and J. Farkas, \"Applicability of Maximally\n              Redundant\
    \ Trees to IEEE 802.1Qca Path Control and\n              Reservation\", Work in\
    \ Progress, draft-bowers-rtgwg-mrt-\n              applicability-to-8021qca-01,\
    \ July 2015.\n   [RFC1195]  Callon, R., \"Use of OSI IS-IS for routing in TCP/IP\
    \ and\n              dual environments\", RFC 1195, DOI 10.17487/RFC1195,\n  \
    \            December 1990, <http://www.rfc-editor.org/info/rfc1195>.\n   [RFC4655]\
    \  Farrel, A., Vasseur, J., and J. Ash, \"A Path Computation\n              Element\
    \ (PCE)-Based Architecture\", RFC 4655,\n              DOI 10.17487/RFC4655, August\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4655>.\n   [RFC5310]\
    \  Bhatia, M., Manral, V., Li, T., Atkinson, R., White, R.,\n              and\
    \ M. Fanto, \"IS-IS Generic Cryptographic\n              Authentication\", RFC\
    \ 5310, DOI 10.17487/RFC5310, February\n              2009, <http://www.rfc-editor.org/info/rfc5310>.\n\
    \   [RFC7812]  Atlas, A., Bowers, C., and G. Enyedi, \"An Architecture for\n \
    \             IP/LDP Fast Reroute Using Maximally Redundant Trees (MRT-\n    \
    \          FRR)\", RFC 7812, DOI 10.17487/RFC7812, June 2016,\n              <http://www.rfc-editor.org/info/rfc7812>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Don Fedyk and Eric Gray\
    \ for their\n   comments and suggestions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Janos Farkas (editor)\n   Ericsson\n   Konyves Kalman\
    \ krt. 11/B\n   Budapest  1097\n   Hungary\n   Email: janos.farkas@ericsson.com\n\
    \   Nigel Bragg\n   Ciena\n   43-51 Worship Street\n   London  EC2A 2DX\n   United\
    \ Kingdom\n   Email: nbragg@ciena.com\n   Paul Unbehagen Jr\n   Avaya\n   1300\
    \ W. 120th Avenue\n   Westminster, CO  80234\n   United States\n   Email: unbehagen@avaya.com\n\
    \   Glenn Parsons\n   Ericsson\n   349 Terry Fox Drive\n   Ottawa  ON, K2K 2V6\n\
    \   Canada\n   Email: glenn.parsons@ericsson.com\n   Peter Ashwood-Smith\n   Huawei\
    \ Technologies\n   303 Terry Fox Drive, Suite 400\n   Ottawa  ON, K2K 3J1\n  \
    \ Canada\n   Email: Peter.AshwoodSmith@huawei.com\n   Chris Bowers\n   Juniper\
    \ Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA  94089\n   United States\n\
    \   Email: cbowers@juniper.net\n"
