- title: __initial_text__
  contents:
  - "       Algorithm Identifiers for Ed25519, Ed448, X25519, and X448\n        for\
    \ Use in the Internet X.509 Public Key Infrastructure\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies algorithm identifiers and ASN.1 encoding\n\
    \   formats for elliptic curve constructs using the curve25519 and\n   curve448\
    \ curves.  The signature algorithms covered are Ed25519 and\n   Ed448.  The key\
    \ agreement algorithms covered are X25519 and X448.\n   The encoding for public\
    \ key, private key, and Edwards-curve Digital\n   Signature Algorithm (EdDSA)\
    \ structures is provided.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8410.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Terminology  . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Curve25519 and Curve448 Algorithm Identifiers . . . . .\
    \ . . .   3\n   4.  Subject Public Key Fields . . . . . . . . . . . . . . . .\
    \ . .   4\n   5.  Key Usage Bits  . . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n   6.  EdDSA Signatures  . . . . . . . . . . . . . . . . . . . . . .\
    \   6\n   7.  Private Key Format  . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   8.  Human-Readable Algorithm Names  . . . . . . . . . . . . . . .   8\n\
    \   9.  ASN.1 Module  . . . . . . . . . . . . . . . . . . . . . . . .   9\n  \
    \ 10. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  11\n    \
    \ 10.1.  Example Ed25519 Public Key . . . . . . . . . . . . . . .  11\n     10.2.\
    \  Example X25519 Certificate . . . . . . . . . . . . . . .  12\n     10.3.  Examples\
    \ of Ed25519 Private Key  . . . . . . . . . . . .  14\n   11. IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  15\n   12. Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  15\n   13. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  16\n     13.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . .  16\n     13.2.  Informative References .\
    \ . . . . . . . . . . . . . . . .  16\n   Appendix A.  Invalid Encodings  . .\
    \ . . . . . . . . . . . . . . .  18\n   Acknowledgments . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  19\n   Authors' Addresses  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In [RFC7748], the elliptic curves curve25519 and curve448\
    \ are\n   described.  They are designed with performance and security in mind.\n\
    \   The curves may be used for Diffie-Hellman and digital signature\n   operations.\n\
    \   [RFC7748] describes the operations on these curves for the Diffie-\n   Hellman\
    \ operation.  A convention has developed that when these two\n   curves are used\
    \ with the Diffie-Hellman operation, they are referred\n   to as X25519 and X448.\
    \  This RFC defines the ASN.1 Object Identifiers\n   (OIDs) for the operations\
    \ X25519 and X448 along with the associated\n   parameters.  The use of these\
    \ OIDs is described for public and\n   private keys.\n   In [RFC8032] the elliptic\
    \ curve signature system Edwards-curve\n   Digital Signature Algorithm (EdDSA)\
    \ is described along with a\n   recommendation for the use of the curve25519 and\
    \ curve448.  EdDSA has\n   defined two modes: the PureEdDSA mode without prehashing\
    \ and the\n   HashEdDSA mode with prehashing.  The convention used for identifying\n\
    \   the algorithm/curve combinations is to use \"Ed25519\" and \"Ed448\" for\n\
    \   the PureEdDSA mode.  This document does not provide the conventions\n   needed\
    \ for the prehash versions of the signature algorithm.  The use\n   of the OIDs\
    \ is described for public keys, private keys and\n   signatures.\n   [RFC8032]\
    \ additionally defines the concept of a context.  Contexts\n   can be used to\
    \ differentiate signatures generated for different\n   purposes with the same\
    \ key.  The use of contexts is not defined in\n   this document for the following\
    \ reasons:\n   o  The current implementations of Ed25519 do not support the use\
    \ of\n      contexts; thus, if specified, it will potentially delay the use of\n\
    \      these algorithms further.\n   o  EdDSA is the only IETF algorithm that\
    \ currently supports the use\n      of contexts; however, there is a possibility\
    \ that there will be\n      confusion between which algorithms need to have separate\
    \ keys and\n      which do not.  This may result in a decrease of security for\
    \ those\n      other algorithms.\n   o  There are still ongoing discussions among\
    \ the cryptographic\n      community about how effective the use of contexts is\
    \ for\n      preventing attacks.\n   o  There needs to be discussions about the\
    \ correct way to identify\n      when context strings are to be used.  It is not\
    \ clear if different\n      OIDs should be used for different contexts or the\
    \ OID should\n      merely note that a context string needs to be provided.\n"
- title: 2.  Requirements Terminology
  contents:
  - "2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Curve25519 and Curve448 Algorithm Identifiers
  contents:
  - "3.  Curve25519 and Curve448 Algorithm Identifiers\n   Certificates conforming\
    \ to [RFC5280] can convey a public key for any\n   public key algorithm.  The\
    \ certificate indicates the algorithm\n   through an algorithm identifier.  An\
    \ algorithm identifier consists of\n   an OID and optional parameters.\n   The\
    \ AlgorithmIdentifier type, which is included for convenience, is\n   defined\
    \ as follows:\n   AlgorithmIdentifier  ::=  SEQUENCE  {\n       algorithm   OBJECT\
    \ IDENTIFIER,\n       parameters  ANY DEFINED BY algorithm OPTIONAL\n   }\n  \
    \ The fields in AlgorithmIdentifier have the following meanings:\n   o  algorithm\
    \ identifies the cryptographic algorithm with an object\n      identifier.  Four\
    \ such OIDs are defined below.\n   o  parameters, which are optional, are the\
    \ associated parameters for\n      the algorithm identifier in the algorithm field.\n\
    \   In this document, we define four new OIDs for identifying the\n   different\
    \ curve/algorithm pairs: the curves being curve25519 and\n   curve448 and the\
    \ algorithms being ECDH and EdDSA in pure mode.  For\n   all of the OIDs, the\
    \ parameters MUST be absent.\n   It is possible to find systems that require the\
    \ parameters to be\n   present.  This can be due to either a defect in the original\
    \ 1997\n   syntax or a programming error where developers never got input where\n\
    \   this was not true.  The optimal solution is to fix these systems;\n   where\
    \ this is not possible, the problem needs to be restricted to\n   that subsystem\
    \ and not propagated to the Internet.\n   The same algorithm identifiers are used\
    \ for identifying a public key,\n   a private key, and a signature (for the two\
    \ EdDSA related OIDs).\n   Additional encoding information is provided below for\
    \ each of these\n   locations.\n   id-X25519    OBJECT IDENTIFIER ::= { 1 3 101\
    \ 110 }\n   id-X448      OBJECT IDENTIFIER ::= { 1 3 101 111 }\n   id-Ed25519\
    \   OBJECT IDENTIFIER ::= { 1 3 101 112 }\n   id-Ed448     OBJECT IDENTIFIER ::=\
    \ { 1 3 101 113 }\n"
- title: 4.  Subject Public Key Fields
  contents:
  - "4.  Subject Public Key Fields\n   In the X.509 certificate, the subjectPublicKeyInfo\
    \ field has the\n   SubjectPublicKeyInfo type, which has the following ASN.1 syntax:\n\
    \   SubjectPublicKeyInfo  ::=  SEQUENCE  {\n       algorithm         AlgorithmIdentifier,\n\
    \       subjectPublicKey  BIT STRING\n   }\n   The fields in SubjectPublicKeyInfo\
    \ have the following meanings:\n   o  algorithm is the algorithm identifier and\
    \ parameters for the\n      public key (see above).\n   o  subjectPublicKey contains\
    \ the byte stream of the public key.  The\n      algorithms defined in this document\
    \ always encode the public key\n      as an exact multiple of 8 bits.\n   Both\
    \ [RFC7748] and [RFC8032] define the public key value as being a\n   byte string.\
    \  It should be noted that the public key is computed\n   differently for each\
    \ of these documents; thus, the same private key\n   will not produce the same\
    \ public key.\n   The following is an example of a public key encoded using the\
    \ textual\n   encoding defined in [RFC7468].\n   -----BEGIN PUBLIC KEY-----\n\
    \   MCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n   -----END\
    \ PUBLIC KEY-----\n"
- title: 5.  Key Usage Bits
  contents:
  - "5.  Key Usage Bits\n   The intended application for the key is indicated in the\
    \ keyUsage\n   certificate extension.\n   If the keyUsage extension is present\
    \ in a certificate that indicates\n   id-X25519 or id-X448 in SubjectPublicKeyInfo,\
    \ then the following MUST\n   be present:\n           keyAgreement;\n   one of\
    \ the following MAY also be present:\n             encipherOnly; or\n        \
    \     decipherOnly.\n   If the keyUsage extension is present in an end-entity\
    \ certificate\n   that indicates id-Ed25519 or id-Ed448, then the keyUsage extension\n\
    \   MUST contain one or both of the following values:\n           nonRepudiation;\
    \ and\n           digitalSignature.\n   If the keyUsage extension is present in\
    \ a certification authority\n   certificate that indicates id-Ed25519 or id-Ed448,\
    \ then the keyUsage\n   extension MUST contain one or more of the following values:\n\
    \          nonRepudiation;\n          digitalSignature;\n          keyCertSign;\
    \ and\n          cRLSign.\n"
- title: 6.  EdDSA Signatures
  contents:
  - "6.  EdDSA Signatures\n   Signatures can be placed in a number of different ASN.1\
    \ structures.\n   The top level structure for a certificate is given below as\
    \ being\n   illustrative of how signatures are frequently encoded with an\n  \
    \ algorithm identifier and a location for the signature.\n      Certificate  ::=\
    \  SEQUENCE  {\n           tbsCertificate       TBSCertificate,\n           signatureAlgorithm\
    \   AlgorithmIdentifier,\n           signatureValue       BIT STRING  }\n   The\
    \ same algorithm identifiers are used for signatures as are used\n   for public\
    \ keys.  When used to identify signature algorithms, the\n   parameters MUST be\
    \ absent.\n   The data to be signed is prepared for EdDSA.  Then, a private key\n\
    \   operation is performed to generate the signature value.  This value\n   is\
    \ the opaque value ENC(R) || ENC(S) described in Section 3.3 of\n   [RFC8032].\
    \  The octet string representing the signature is encoded\n   directly in the\
    \ BIT STRING without adding any additional ASN.1\n   wrapping.  For the Certificate\
    \ structure, the signature value is\n   wrapped in the \"signatureValue\" BIT\
    \ STRING field.\n"
- title: 7.  Private Key Format
  contents:
  - "7.  Private Key Format\n   \"Asymmetric Key Packages\" [RFC5958] describes how\
    \ to encode a private\n   key in a structure that both identifies what algorithm\
    \ the private\n   key is for and allows for the public key and additional attributes\n\
    \   about the key to be included as well.  For illustration, the ASN.1\n   structure\
    \ OneAsymmetricKey is replicated below.  The algorithm-\n   specific details of\
    \ how a private key is encoded are left for the\n   document describing the algorithm\
    \ itself.\n   OneAsymmetricKey ::= SEQUENCE {\n      version Version,\n      privateKeyAlgorithm\
    \ PrivateKeyAlgorithmIdentifier,\n      privateKey PrivateKey,\n      attributes\
    \ [0] IMPLICIT Attributes OPTIONAL,\n      ...,\n      [[2: publicKey [1] IMPLICIT\
    \ PublicKey OPTIONAL ]],\n      ...\n   }\n   PrivateKey ::= OCTET STRING\n  \
    \ PublicKey ::= BIT STRING\n   For the keys defined in this document, the private\
    \ key is always an\n   opaque byte sequence.  The ASN.1 type CurvePrivateKey is\
    \ defined in\n   this document to hold the byte sequence.  Thus, when encoding\
    \ a\n   OneAsymmetricKey object, the private key is wrapped in a\n   CurvePrivateKey\
    \ object and wrapped by the OCTET STRING of the\n   \"privateKey\" field.\n  \
    \ CurvePrivateKey ::= OCTET STRING\n   To encode an EdDSA, X25519, or X448 private\
    \ key, the \"privateKey\"\n   field will hold the encoded private key.  The \"\
    privateKeyAlgorithm\"\n   field uses the AlgorithmIdentifier structure.  The structure\
    \ is\n   encoded as defined above.  If present, the \"publicKey\" field will\n\
    \   hold the encoded key as defined in [RFC7748] and [RFC8032].\n   The following\
    \ is an example of a private key encoded using the\n   textual encoding defined\
    \ in [RFC7468].\n   -----BEGIN PRIVATE KEY-----\n   MC4CAQAwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\n\
    \   -----END PRIVATE KEY-----\n   The following example, in addition to encoding\
    \ the private key, has\n   an attribute included as well as the public key.  As\
    \ with the prior\n   example, the textual encoding defined in [RFC7468] is used.\n\
    \   -----BEGIN PRIVATE KEY-----\n   MHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\n\
    \   oB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB\n   Z9w7lshQhqowtrbLDFw4rXAxZuE=\n\
    \   -----END PRIVATE KEY------\n   NOTE: There exist some private key import functions\
    \ that have not\n   picked up the new ASN.1 structure OneAsymmetricKey that is\
    \ defined in\n   [RFC7748].  This means that they will not accept a private key\n\
    \   structure that contains the public key field.  This means a balancing\n  \
    \ act needs to be done between being able to do a consistency check on\n   the\
    \ key pair and widest ability to import the key.\n"
- title: 8.  Human-Readable Algorithm Names
  contents:
  - "8.  Human-Readable Algorithm Names\n   For the purpose of consistent cross-implementation\
    \ naming, this\n   section establishes human-readable names for the algorithms\
    \ specified\n   in this document.  Implementations SHOULD use these names when\n\
    \   referring to the algorithms.  If there is a strong reason to deviate\n   from\
    \ these names -- for example, if the implementation has a\n   different naming\
    \ convention and wants to maintain internal\n   consistency -- it is encouraged\
    \ to deviate as little as possible from\n   the names given here.\n   Use the\
    \ string \"ECDH\" when referring to a public key of type \"X25519\"\n   or \"\
    X448\" when the curve is not known or relevant.\n   When the curve is known, use\
    \ the more specific string of \"X25519\" or\n   \"X448\".\n   Use the string \"\
    EdDSA\" when referring to a signing public key or\n   signature when the curve\
    \ is not known or relevant.\n   When the curve is known, use a more specific string.\
    \  For the id-\n   Ed25519 value use the string \"Ed25519\".  For id-Ed448, use\
    \ \"Ed448\".\n"
- title: 9.  ASN.1 Module
  contents:
  - "9.  ASN.1 Module\n   For reference purposes, the ASN.1 syntax is presented as\
    \ an ASN.1\n   module here.\n   -- ASN.1 Module\n   Safecurves-pkix-18\n   { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n     security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n     id-mod-safecurves-pkix(93) }\n   DEFINITIONS EXPLICIT\
    \ TAGS ::=\n   BEGIN\n   IMPORTS\n     SIGNATURE-ALGORITHM, KEY-AGREE, PUBLIC-KEY,\
    \ KEY-WRAP,\n     KeyUsage, AlgorithmIdentifier\n     FROM AlgorithmInformation-2009\n\
    \       {iso(1) identified-organization(3) dod(6) internet(1) security(5)\n  \
    \     mechanisms(5) pkix(7) id-mod(0)\n       id-mod-algorithmInformation-02(58)}\n\
    \     mda-sha512\n     FROM PKIX1-PSS-OAEP-Algorithms-2009\n       { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n         security(5) mechanisms(5) pkix(7) id-mod(0)\n \
    \        id-mod-pkix1-rsa-pkalgs-02(54) }\n     kwa-aes128-wrap, kwa-aes256-wrap\n\
    \     FROM CMSAesRsaesOaep-2009\n       { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-cms-aes-02(38) }\n \
    \    ;\n   id-edwards-curve-algs OBJECT IDENTIFIER ::= { 1 3 101 }\n   id-X25519\
    \        OBJECT IDENTIFIER ::= { id-edwards-curve-algs 110 }\n   id-X448     \
    \     OBJECT IDENTIFIER ::= { id-edwards-curve-algs 111 }\n   id-Ed25519     \
    \  OBJECT IDENTIFIER ::= { id-edwards-curve-algs 112 }\n   id-Ed448         OBJECT\
    \ IDENTIFIER ::= { id-edwards-curve-algs 113 }\n    sa-Ed25519 SIGNATURE-ALGORITHM\
    \ ::= {\n       IDENTIFIER id-Ed25519\n        PARAMS ARE absent\n        PUBLIC-KEYS\
    \ {pk-Ed25519}\n        SMIME-CAPS { IDENTIFIED BY id-Ed25519 }\n    }\n    pk-Ed25519\
    \ PUBLIC-KEY ::= {\n        IDENTIFIER id-Ed25519\n        -- KEY no ASN.1 wrapping\
    \ --\n        PARAMS ARE absent\n        CERT-KEY-USAGE {digitalSignature, nonRepudiation,\n\
    \                        keyCertSign, cRLSign}\n        PRIVATE-KEY CurvePrivateKey\n\
    \    }\n    kaa-X25519 KEY-AGREE ::= {\n        IDENTIFIER id-X25519\n       \
    \ PARAMS ARE absent\n        PUBLIC-KEYS {pk-X25519}\n        UKM -- TYPE no ASN.1\
    \ wrapping -- ARE preferredPresent\n        SMIME-CAPS {\n           TYPE AlgorithmIdentifier{KEY-WRAP,\
    \ {KeyWrapAlgorithms}}\n           IDENTIFIED BY id-X25519 }\n    }\n    pk-X25519\
    \ PUBLIC-KEY ::= {\n        IDENTIFIER id-X25519\n        -- KEY no ASN.1 wrapping\
    \ --\n        PARAMS ARE absent\n        CERT-KEY-USAGE { keyAgreement }\n   \
    \     PRIVATE-KEY CurvePrivateKey\n    }\n    KeyWrapAlgorithms KEY-WRAP ::= {\n\
    \        kwa-aes128-wrap | kwa-aes256-wrap,\n        ...\n    }\n    kaa-X448\
    \ KEY-AGREE ::= {\n        IDENTIFIER id-X448\n        PARAMS ARE absent\n   \
    \     PUBLIC-KEYS {pk-X448}\n        UKM -- TYPE no ASN.1 wrapping  -- ARE preferredPresent\n\
    \        SMIME-CAPS {\n           TYPE AlgorithmIdentifier{KEY-WRAP, {KeyWrapAlgorithms}}\n\
    \           IDENTIFIED BY id-X448 }\n    }\n    pk-X448 PUBLIC-KEY ::= {\n   \
    \     IDENTIFIER id-X448\n        -- KEY no ASN.1 wrapping --\n        PARAMS\
    \ ARE absent\n        CERT-KEY-USAGE { keyAgreement }\n        PRIVATE-KEY CurvePrivateKey\n\
    \    }\n   CurvePrivateKey ::= OCTET STRING\n   END\n"
- title: 10.  Examples
  contents:
  - "10.  Examples\n   This section contains illustrations of EdDSA public keys and\n\
    \   certificates, illustrating parameter choices.\n"
- title: 10.1.  Example Ed25519 Public Key
  contents:
  - "10.1.  Example Ed25519 Public Key\n   An example of an Ed25519 public key:\n\
    \         Public Key Information:\n             Public Key Algorithm: Ed25519\n\
    \             Algorithm Security Level: High\n         Public Key Usage:\n   \
    \      Public Key ID: 9b1f5eeded043385e4f7bc623c5975b90bc8bb3b\n         -----BEGIN\
    \ PUBLIC KEY-----\n         MCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n\
    \         -----END PUBLIC KEY-----\n"
- title: 10.2.  Example X25519 Certificate
  contents:
  - "10.2.  Example X25519 Certificate\n   An example of a self-issued PKIX certificate\
    \ using Ed25519 to sign an\n   X25519 public key would be:\n     0 300: SEQUENCE\
    \ {\n     4 223:   SEQUENCE {\n     7   3:     [0] {\n     9   1:       INTEGER\
    \ 2\n          :       }\n    12   8:     INTEGER 56 01 47 4A 2A 8D C3 30\n  \
    \  22   5:     SEQUENCE {\n    24   3:       OBJECT IDENTIFIER\n          :  \
    \       Ed 25519 signature algorithm { 1 3 101 112 }\n          :       }\n  \
    \  29  25:     SEQUENCE {\n    31  23:       SET {\n    33  21:         SEQUENCE\
    \ {\n    35   3:           OBJECT IDENTIFIER commonName (2 5 4 3)\n    40  14:\
    \           UTF8String 'IETF Test Demo'\n          :           }\n          :\
    \         }\n          :       }\n    56  30:     SEQUENCE {\n    58  13:    \
    \   UTCTime 01/08/2016 12:19:24 GMT\n    73  13:       UTCTime 31/12/2040 23:59:59\
    \ GMT\n          :       }\n    88  25:     SEQUENCE {\n    90  23:       SET\
    \ {\n    92  21:         SEQUENCE {\n    94   3:           OBJECT IDENTIFIER commonName\
    \ (2 5 4 3)\n    99  14:           UTF8String 'IETF Test Demo'\n          :  \
    \         }\n          :         }\n          :       }\n   115  42:     SEQUENCE\
    \ {\n   117   5:       SEQUENCE {\n   119   3:         OBJECT IDENTIFIER\n   \
    \       :           ECDH 25519 key agreement { 1 3 101 110 }\n          :    \
    \     }\n   124  33:       BIT STRING\n          :         85 20 F0 09 89 30 A7\
    \ 54 74 8B 7D DC B4 3E F7 5A\n          :         0D BF 3A 0D 26 38 1A F4 EB A4\
    \ A9 8E AA 9B 4E 6A\n          :       }\n   159  69:     [3] {\n   161  67: \
    \      SEQUENCE {\n   163  15:         SEQUENCE {\n   165   3:           OBJECT\
    \ IDENTIFIER basicConstraints (2 5 29 19)\n   170   1:           BOOLEAN TRUE\n\
    \   173   5:           OCTET STRING, encapsulates {\n   175   3:             SEQUENCE\
    \ {\n   177   1:               BOOLEAN FALSE\n          :               }\n  \
    \        :             }\n          :           }\n   180  14:         SEQUENCE\
    \ {\n   182   3:           OBJECT IDENTIFIER keyUsage (2 5 29 15)\n   187   1:\
    \           BOOLEAN FALSE\n   190   4:           OCTET STRING, encapsulates {\n\
    \   192   2:             BIT STRING 3 unused bits\n          :               '10000'B\
    \ (bit 4)\n          :             }\n          :           }\n   196  32:   \
    \      SEQUENCE {\n   198   3:           OBJECT IDENTIFIER subjectKeyIdentifier\
    \ (2 5 29 14)\n   203   1:           BOOLEAN FALSE\n   206  22:           OCTET\
    \ STRING, encapsulates {\n   208  20:             OCTET STRING\n          :  \
    \             9B 1F 5E ED ED 04 33 85 E4 F7 BC 62 3C 59 75\n          :      \
    \         B9 0B C8 BB 3B\n          :             }\n          :           }\n\
    \          :         }\n          :       }\n          :     }\n   230   5:  \
    \ SEQUENCE {\n   232   3:     OBJECT IDENTIFIER\n          :       Ed 25519 signature\
    \ algorithm { 1 3 101 112 }\n          :     }\n   237  65:   BIT STRING\n   \
    \       :     AF 23 01 FE DD C9 E6 FF C1 CC A7 3D 74 D6 48 A4\n          :   \
    \  39 80 82 CD DB 69 B1 4E 4D 06 EC F8 1A 25 CE 50\n          :     D4 C2 C3 EB\
    \ 74 6C 4E DD 83 46 85 6E C8 6F 3D CE\n          :     1A 18 65 C5 7A C2 7B 50\
    \ A0 C3 50 07 F5 E7 D9 07\n          :   }\n   -----BEGIN CERTIFICATE-----\n \
    \  MIIBLDCB36ADAgECAghWAUdKKo3DMDAFBgMrZXAwGTEXMBUGA1UEAwwOSUVURiBUZX\n   N0IERlbW8wHhcNMTYwODAxMTIxOTI0WhcNNDAxMjMxMjM1OTU5WjAZMRcwFQYDVQQD\n\
    \   DA5JRVRGIFRlc3QgRGVtbzAqMAUGAytlbgMhAIUg8AmJMKdUdIt93LQ+91oNvzoNJj\n   ga9OukqY6qm05qo0UwQzAPBgNVHRMBAf8EBTADAQEAMA4GA1UdDwEBAAQEAwIDCDAg\n\
    \   BgNVHQ4BAQAEFgQUmx9e7e0EM4Xk97xiPFl1uQvIuzswBQYDK2VwA0EAryMB/t3J5v\n   /BzKc9dNZIpDmAgs3babFOTQbs+BolzlDUwsPrdGxO3YNGhW7Ibz3OGhhlxXrCe1Cg\n\
    \   w1AH9efZBw==\n   -----END CERTIFICATE-----\n"
- title: 10.3.  Examples of Ed25519 Private Key
  contents:
  - "10.3.  Examples of Ed25519 Private Key\n   An example of an Ed25519 private key\
    \ without the public key:\n   -----BEGIN PRIVATE KEY-----\n   MC4CAQAwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\n\
    \   -----END PRIVATE KEY-----\n   The same item dumped as ASN.1 yields:\n    0\
    \ 30   46: SEQUENCE {\n    2 02    1:   INTEGER 0\n    5 30    5:   SEQUENCE {\n\
    \    7 06    3:     OBJECT IDENTIFIER\n             :       Ed 25519 signature\
    \ algorithm { 1 3 101 112 }\n             :     }\n   12 04   34:   OCTET STRING\n\
    \             :     04 20 D4 EE 72 DB F9 13 58 4A D5 B6 D8 F1 F7 69\n        \
    \     :     F8 AD 3A FE 7C 28 CB F1 D4 FB E0 97 A8 8F 44 75\n             :  \
    \   58 42\n             :   }\n   Note that the value of the private key is:\n\
    \   D4 EE 72 DB F9 13 58 4A D5 B6 D8 F1 F7 69 F8 AD\n   3A FE 7C 28 CB F1 D4 FB\
    \ E0 97 A8 8F 44 75 58 42\n   An example of the same Ed25519 private key encoded\
    \ with an attribute\n   and the public key:\n   -----BEGIN PRIVATE KEY-----\n\
    \   MHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\n   oB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB\n\
    \   Z9w7lshQhqowtrbLDFw4rXAxZuE=\n   -----END PRIVATE KEY-----\n   The same item\
    \ dumped as ASN.1 yields:\n     0 114: SEQUENCE {\n     2   1:   INTEGER 1\n \
    \    5   5:   SEQUENCE {\n     7   3:     OBJECT IDENTIFIER '1 3 101 112'\n  \
    \        :     }\n    12  34:   OCTET STRING, encapsulates {\n          :    \
    \ 04 20 D4 EE 72 DB F9 13 58 4A D5 B6 D8 F1 F7 69\n          :     F8 AD 3A FE\
    \ 7C 28 CB F1 D4 FB E0 97 A8 8F 44 75\n          :     58 42\n          :    \
    \ }\n    48  31:   [0] {\n    50  29:     SEQUENCE {\n    52  10:       OBJECT\
    \ IDENTIFIER '1 2 840 113549 1 9 9 20'\n    64  15:       SET {\n    66  13: \
    \        UTF8String 'Curdle Chairs'\n          :         }\n          :      \
    \ }\n          :     }\n   81  33:   [1] 00 19 BF 44 09 69 84 CD FE 85 41 BA C1\
    \ 67 DC 3B\n                 96 C8 50 86 AA 30 B6 B6 CB 0C 5C 38 AD 70 31 66\n\
    \                 E1\n          :   }\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   For the ASN.1 module in Section 9, IANA has registered\
    \ value 93 for\n   \"id-mod-safecurves-pkix\" in the \"SMI Security for PKIX Module\n\
    \   Identifier\" (1.3.6.1.5.5.7.0) registry.\n   The OIDs are being independently\
    \ registered in the IANA registry \"SMI\n   Security for Cryptographic Algorithms\"\
    \ in [RFC8411].\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   The security considerations of [RFC5280], [RFC7748],\
    \ and [RFC8032]\n   apply accordingly.\n   The procedures for going from a private\
    \ key to a public key are\n   different when used with Diffie-Hellman versus when\
    \ used with Edwards\n   Signatures.  This means that the same public key cannot\
    \ be used for\n   both ECDH and EdDSA.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n         \
    \     Housley, R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 5280, DOI 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n   \
    \           \"Elliptic Curve Cryptography Subject Public Key\n              Information\"\
    , RFC 5480, DOI 10.17487/RFC5480, March 2009,\n              <https://www.rfc-editor.org/info/rfc5480>.\n\
    \   [RFC5958]  Turner, S., \"Asymmetric Key Packages\", RFC 5958,\n          \
    \    DOI 10.17487/RFC5958, August 2010,\n              <https://www.rfc-editor.org/info/rfc5958>.\n\
    \   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, \"Elliptic Curves\n  \
    \            for Security\", RFC 7748, DOI 10.17487/RFC7748, January\n       \
    \       2016, <https://www.rfc-editor.org/info/rfc7748>.\n   [RFC8032]  Josefsson,\
    \ S. and I. Liusvaara, \"Edwards-Curve Digital\n              Signature Algorithm\
    \ (EdDSA)\", RFC 8032,\n              DOI 10.17487/RFC8032, January 2017,\n  \
    \            <https://www.rfc-editor.org/info/rfc8032>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC3279]  Bassham, L., Polk, W., and R. Housley,\
    \ \"Algorithms and\n              Identifiers for the Internet X.509 Public Key\n\
    \              Infrastructure Certificate and Certificate Revocation List\n  \
    \            (CRL) Profile\", RFC 3279, DOI 10.17487/RFC3279, April\n        \
    \      2002, <https://www.rfc-editor.org/info/rfc3279>.\n   [RFC4055]  Schaad,\
    \ J., Kaliski, B., and R. Housley, \"Additional\n              Algorithms and\
    \ Identifiers for RSA Cryptography for use in\n              the Internet X.509\
    \ Public Key Infrastructure Certificate\n              and Certificate Revocation\
    \ List (CRL) Profile\", RFC 4055,\n              DOI 10.17487/RFC4055, June 2005,\n\
    \              <https://www.rfc-editor.org/info/rfc4055>.\n   [RFC5639]  Lochter,\
    \ M. and J. Merkle, \"Elliptic Curve Cryptography\n              (ECC) Brainpool\
    \ Standard Curves and Curve Generation\",\n              RFC 5639, DOI 10.17487/RFC5639,\
    \ March 2010,\n              <https://www.rfc-editor.org/info/rfc5639>.\n   [RFC7468]\
    \  Josefsson, S. and S. Leonard, \"Textual Encodings of PKIX,\n              PKCS,\
    \ and CMS Structures\", RFC 7468, DOI 10.17487/RFC7468,\n              April 2015,\
    \ <https://www.rfc-editor.org/info/rfc7468>.\n   [RFC8411]  Schaad, J. and R.\
    \ Andrews, \"IANA Registration for the\n              Cryptographic Algorithm\
    \ Object Identifier Range\",\n              RFC 8411, DOI 10.17487/RFC8411, August\
    \ 2018,\n              <http://www.rfc-editor.org/info/rfc8411>.\n"
- title: Appendix A.  Invalid Encodings
  contents:
  - "Appendix A.  Invalid Encodings\n   There are a number of things that need to\
    \ be dealt with when a new\n   key part is decoded and imported into the system.\
    \  A partial list of\n   these includes:\n   o  ASN.1 encoding errors: Two items\
    \ are highlighted here.  First, the\n      use of an OCTET STRING rather than\
    \ a BIT STRING for the public\n      key.  The use of OCTET STRING was a copy\
    \ error that existed in a\n      previous draft version of this document; the\
    \ structure is correct\n      in [RFC5958].  However, any early implementation\
    \ may have this\n      wrong.  Second, the value of the version field is required\
    \ to be 0\n      if the publicKey is absent and 1 if present.  This is called\
    \ out\n      in [RFC5958], but was not duplicated above.\n   o  Key encoding errors:\
    \ Both [RFC7748] and [RFC8032] have formatting\n      requirements for keys that\
    \ need to be enforced.  In some cases,\n      the enforcement is done at the time\
    \ of importing, for example,\n      doing masking or a mod p operation.  In other\
    \ cases, the\n      enforcement is done by rejecting the keys and having an import\n\
    \      failure.\n   o  Key mismatch errors: If a public key is provided, it may\
    \ not agree\n      with the private key because either it is wrong or the wrong\n\
    \      algorithm was used.\n   Some systems are also going to be stricter on what\
    \ they accept.  As\n   stated in [RFC5958], BER decoding of OneAsymmetricKey objects\
    \ is a\n   requirement for compliance.  Despite this requirement, some acceptors\n\
    \   will only decode DER formats.  The following is a BER encoding of a\n   private\
    \ key; it is valid, but it may not be accepted by many systems.\n   -----BEGIN\
    \ PRIVATE KEY-----\n   MIACAQAwgAYDK2VwAAAEIgQg1O5y2/kTWErVttjx92n4rTr+fCjL8dT74Jeoj0R1W\n\
    \   EIAAA==\n   -----END PRIVATE KEY-----\n   What follows here is a brief sampling\
    \ of some incorrect keys.\n   In the following example, the private key does not\
    \ match the masking\n   requirements for X25519.  For this example, the top bits\
    \ are set to\n   zero and the bottom three bits are set to 001.\n   -----BEGIN\
    \ PRIVATE KEY-----\n   MFMCAQEwBQYDK2VuBCIEIPj///////////////////////////////////////8/oS\n\
    \   MDIQCEfA0sN1I082XmYJVRh6NzWg92E9FgnTpqTYxTrqpaIg==\n   -----END PRIVATE KEY-----\n\
    \   In the following examples, the key is the wrong length because an\n   all-zero\
    \ byte has been removed.  In one case, the first byte has been\n   removed; in\
    \ the other case, the last byte has been removed.\n   -----BEGIN PRIVATE KEY-----\n\
    \   MFICAQEwBQYDK2VwBCIEIC3GfeUYbZGTAhwLEE2cbvJL7ivTlcy17VottfN6L8HwoS\n   IDIADBfk2Lv/J8H7YYwj/OmIcDx++jzVkKrKwS0/HjyQyM\n\
    \   -----END PRIVATE KEY-----\n   -----BEGIN PRIVATE KEY-----\n   MFICAQEwBQYDK2VwBCIEILJXn1VaLqvausjUaZexwI/ozmOFjfEk78KcYN+7hsNJoS\n\
    \   IDIACdQhJwzi/MCGcsQeQnIUh2JFybDxSrZxuLudJmpJLk\n   -----END PRIVATE KEY-----\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Text and/or inspiration were drawn from [RFC5280], [RFC3279],\n\
    \   [RFC4055], [RFC5480], and [RFC5639].\n   The following people discussed the\
    \ document and provided feedback:\n   Klaus Hartke, Ilari Liusvaara, Erwann Abalea,\
    \ Rick Andrews, Rob\n   Stradling, James Manger, Nikos Mavrogiannopoulos, Russ\
    \ Housley, David\n   Benjamin, Brian Smith, and Alex Wilson.\n   A big thank you\
    \ to Symantec for kindly donating the OIDs used in this\n   document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Simon Josefsson\n   SJD AB\n   Email: simon@josefsson.org\n\
    \   Jim Schaad\n   August Cellars\n   Email: ietf@augustcellars.com\n"
