- title: __initial_text__
  contents:
  - '                    Post Office Protocol - Version 3

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo suggests a simple method for workstations to\
    \ dynamically\n   access mail from a mailbox server.  This RFC specifies an IAB\n\
    \   standards track protocol for the Internet community, and requests\n   discussion\
    \ and suggestions for improvements.  Please refer to the\n   current edition of\
    \ the \"IAB Official Protocol Standards\" for the\n   standardization state and\
    \ status of this protocol.  Distribution of\n   this memo is unlimited.\n"
- title: Overview
  contents:
  - "Overview\n   This memo is a republication of RFC 1081 which was based on RFC\
    \ 918\n   (since revised as RFC 937).  Although similar in form to the original\n\
    \   Post Office Protocol (POP) proposed for the Internet community, the\n   protocol\
    \ discussed in this memo is similar in spirit to the ideas\n   investigated by\
    \ the MZnet project at the University of California,\n   Irvine.\n   Further,\
    \ substantial work was done on examining POP in a PC-based\n   environment.  This\
    \ work, which resulted in additional functionality\n   in this protocol, was performed\
    \ by the ACIS Networking Systems Group\n   at Stanford University.  The author\
    \ gratefully acknowledges their\n   interest.\n"
- title: Introduction
  contents:
  - "Introduction\n   On certain types of smaller nodes in the Internet it is often\n\
    \   impractical to maintain a message transport system (MTS).  For\n   example,\
    \ a workstation may not have sufficient resources (cycles,\n   disk space) in\
    \ order to permit a SMTP server and associated local\n   mail delivery system\
    \ to be kept resident and continuously running.\n   Similarly, it may be expensive\
    \ (or impossible) to keep a personal\n   computer interconnected to an IP-style\
    \ network for long amounts of\n   time (the node is lacking the resource known\
    \ as \"connectivity\").\n   Despite this, it is often very useful to be able to\
    \ manage mail on\n   these smaller nodes, and they often support a user agent\
    \ (UA) to aid\n   the tasks of mail handling.  To solve this problem, a node which\
    \ can\n   support an MTS entity offers a maildrop service to these less endowed\n\
    \   nodes.  The Post Office Protocol - Version 3 (POP3) is intended to\n   permit\
    \ a workstation to dynamically access a maildrop on a server\n   host in a useful\
    \ fashion.  Usually, this means that the POP3 is used\n   to allow a workstation\
    \ to retrieve mail that the server is holding\n   for it.\n   For the remainder\
    \ of this memo, the term \"client host\" refers to a\n   host making use of the\
    \ POP3 service, while the term \"server host\"\n   refers to a host which offers\
    \ the POP3 service.\n"
- title: A Short Digression
  contents:
  - "A Short Digression\n   This memo does not specify how a client host enters mail\
    \ into the\n   transport system, although a method consistent with the philosophy\
    \ of\n   this memo is presented here:\n      When the user agent on a client host\
    \ wishes to enter a message\n      into the transport system, it establishes an\
    \ SMTP connection to\n      its relay host (this relay host could be, but need\
    \ not be, the\n      POP3 server host for the client host).\n   If this method\
    \ is followed, then the client host appears to the MTS\n   as a user agent, and\
    \ should NOT be regarded as a \"trusted\" MTS entity\n   in any sense whatsoever.\
    \  This concept, along with the role of the\n   POP3 as a part of a split-UA model\
    \ is discussed later in this memo.\n   Initially, the server host starts the POP3\
    \ service by listening on\n   TCP port 110.  When a client host wishes to make\
    \ use of the service,\n   it establishes a TCP connection with the server host.\
    \  When the\n   connection is established, the POP3 server sends a greeting. \
    \ The\n   client and POP3 server then exchange commands and responses\n   (respectively)\
    \ until the connection is closed or aborted.\n   Commands in the POP3 consist\
    \ of a keyword possibly followed by an\n   argument.  All commands are terminated\
    \ by a CRLF pair.\n   Responses in the POP3 consist of a success indicator and\
    \ a keyword\n   possibly followed by additional information.  All responses are\n\
    \   terminated by a CRLF pair.  There are currently two success\n   indicators:\
    \ positive (\"+OK\") and negative (\"-ERR\").\n   Responses to certain commands\
    \ are multi-line.  In these cases, which\n   are clearly indicated below, after\
    \ sending the first line of the\n   response and a CRLF, any additional lines\
    \ are sent, each terminated\n   by a CRLF pair.  When all lines of the response\
    \ have been sent, a\n   final line is sent, consisting of a termination octet\
    \ (decimal code\n   046, \".\") and a CRLF pair.  If any line of the multi-line\
    \ response\n   begins with the termination octet, the line is \"byte-stuffed\"\
    \ by\n   pre-pending the termination octet to that line of the response.\n   Hence\
    \ a multi-line response is terminated with the five octets\n   \"CRLF.CRLF\".\
    \  When examining a multi-line response, the client checks\n   to see if the line\
    \ begins with the termination octet.  If so and if\n   octets other than CRLF\
    \ follow, the the first octet of the line (the\n   termination octet) is stripped\
    \ away.  If so and if CRLF immediately\n   follows the termination character,\
    \ then the response from the POP\n   server is ended and the line containing \"\
    .CRLF\" is not considered\n   part of the multi-line response.\n   A POP3 session\
    \ progresses through a number of states during its\n   lifetime.  Once the TCP\
    \ connection has been opened and the POP3\n   server has sent the greeting, the\
    \ session enters the AUTHORIZATION\n   state.  In this state, the client must\
    \ identify itself to the POP3\n   server.  Once the client has successfully done\
    \ this, the server\n   acquires resources associated with the client's maildrop,\
    \ and the\n   session enters the TRANSACTION state.  In this state, the client\n\
    \   requests actions on the part of the POP3 server.  When the client has\n  \
    \ finished its transactions, the session enters the UPDATE state.  In\n   this\
    \ state, the POP3 server releases any resources acquired during\n   the TRANSACTION\
    \ state and says goodbye.  The TCP connection is then\n   closed.\n"
- title: The AUTHORIZATION State
  contents:
  - "The AUTHORIZATION State\n   Once the TCP connection has been opened by a POP3\
    \ client, the POP3\n   server issues a one line greeting.  This can be any string\
    \ terminated\n   by CRLF.  An example might be:\n      S.  +OK dewey POP3 server\
    \ ready (Comments to: PostMaster@UDEL.EDU)\n   Note that this greeting is a POP3\
    \ reply.  The POP3 server should\n   always give a positive response as the greeting.\n\
    \   The POP3 session is now in the AUTHORIZATION state.  The client must\n   now\
    \ issue the USER command.  If the POP3 server responds with a\n   positive success\
    \ indicator (\"+OK\"), then the client may issue either\n   the PASS command to\
    \ complete the authorization, or the QUIT command\n   to terminate the POP3 session.\
    \  If the POP3 server responds with a\n   negative success indicator (\"-ERR\"\
    ) to the USER command, then the\n   client may either issue a new USER command\
    \ or may issue the QUIT\n   command.\n   When the client issues the PASS command,\
    \ the POP3 server uses the\n   argument pair from the USER and PASS commands to\
    \ determine if the\n   client should be given access to the appropriate maildrop.\
    \  If so,\n   the POP3 server then acquires an exclusive-access lock on the\n\
    \   maildrop.  If the lock is successfully acquired, the POP3 server\n   parses\
    \ the maildrop into individual messages (read note below),\n   determines the\
    \ last message (if any) present in the maildrop that was\n   referenced by the\
    \ RETR command, and responds with a positive success\n   indicator.  The POP3\
    \ session now enters the TRANSACTION state.  If\n   the lock can not be acquired\
    \ or the client should is denied access to\n   the appropriate maildrop or the\
    \ maildrop can't be parsed for some\n   reason, the POP3 server responds with\
    \ a negative success indicator.\n   (If a lock was acquired but the POP3 server\
    \ intends to respond with a\n   negative success indicator, the POP3 server must\
    \ release the lock\n   prior to rejecting the command.)  At this point, the client\
    \ may\n   either issue a new USER command and start again, or the client may\n\
    \   issue the QUIT command.\n                 NOTE: Minimal implementations of\
    \ the POP3 need only be\n                 able to break a maildrop into its component\
    \ messages;\n                 they need NOT be able to parse individual messages.\n\
    \                 More advanced implementations may wish to have this\n      \
    \           capability, for reasons discussed later.\n   After the POP3 server\
    \ has parsed the maildrop into individual\n   messages, it assigns a message-id\
    \ to each message, and notes the size\n   of the message in octets.  The first\
    \ message in the maildrop is\n   assigned a message-id of \"1\", the second is\
    \ assigned \"2\", and so on,\n   so that the n'th message in a maildrop is assigned\
    \ a message-id of\n   \"n\".  In POP3 commands and responses, all message-id's\
    \ and message\n   sizes are expressed in base-10 (i.e., decimal).\n   It sets\
    \ the \"highest number accessed\" to be that of the last message\n   referenced\
    \ by the RETR command.\n   Here are summaries for the three POP3 commands discussed\
    \ thus far:\n           USER name\n               Arguments: a server specific\
    \ user-id (required)\n               Restrictions: may only be given in the AUTHORIZATION\n\
    \                   state after the POP3 greeting or after an\n              \
    \     unsuccessful USER or PASS command\n               Possible Responses:\n\
    \                   +OK name is welcome here\n                   -ERR never heard\
    \ of name\n               Examples:\n                   C:    USER mrose\n   \
    \                S:    +OK mrose is a real hoopy frood\n                     ...\n\
    \                   C:    USER frated\n                   S:    -ERR sorry, frated\
    \ doesn't get his mail here\n           PASS string\n               Arguments:\
    \ a server/user-id specific password (required)\n               Restrictions:\
    \ may only be given in the AUTHORIZATION\n                   state after a successful\
    \ USER command\n               Possible Responses:\n                   +OK maildrop\
    \ locked and ready\n                   -ERR invalid password\n               \
    \    -ERR unable to lock maildrop\n               Examples:\n                \
    \   C:    USER mrose\n                   S:    +OK mrose is a real hoopy frood\n\
    \                   C:    PASS secret\n                   S:    +OK mrose's maildrop\
    \ has 2 messages\n                         (320 octets)\n                    \
    \ ...\n                   C:    USER mrose\n                   S:    +OK mrose\
    \ is a real hoopy frood\n                   C:    PASS secret\n              \
    \     S:    -ERR unable to lock mrose's maildrop, file\n                     \
    \    already locked\n           QUIT\n               Arguments: none\n       \
    \        Restrictions: none\n               Possible Responses:\n            \
    \       +OK\n               Examples:\n                   C:    QUIT\n       \
    \            S:    +OK dewey POP3 server signing off\n"
- title: The TRANSACTION State
  contents:
  - "The TRANSACTION State\n   Once the client has successfully identified itself\
    \ to the POP3 server\n   and the POP3 server has locked and burst the appropriate\
    \ maildrop,\n   the POP3 session is now in the TRANSACTION state.  The client\
    \ may now\n   issue any of the following POP3 commands repeatedly.  After each\n\
    \   command, the POP3 server issues a response.  Eventually, the client\n   issues\
    \ the QUIT command and the POP3 session enters the UPDATE state.\n   Here are\
    \ the POP3 commands valid in the TRANSACTION state:\n           STAT\n       \
    \        Arguments: none\n               Restrictions: may only be given in the\
    \ TRANSACTION state.\n               Discussion:\n                 The POP3 server\
    \ issues a positive response with a line\n                 containing information\
    \ for the maildrop.  This line is\n                 called a \"drop listing\"\
    \ for that maildrop.\n                 In order to simplify parsing, all POP3\
    \ servers are\n                 required to use a certain format for drop listings.\n\
    \                 The first octets present must indicate the number of\n     \
    \            messages in the maildrop.  Following this is the size\n         \
    \        of the maildrop in octets.  This memo makes no\n                 requirement\
    \ on what follows the maildrop size.\n                 Minimal implementations\
    \ should just end that line of\n                 the response with a CRLF pair.\
    \  More advanced\n                 implementations may include other information.\n\
    \                      NOTE: This memo STRONGLY discourages\n                \
    \      implementations from supplying additional\n                      information\
    \ in the drop listing.  Other,\n                      optional, facilities are\
    \ discussed later on\n                      which permit the client to parse the\
    \ messages\n                      in the maildrop.\n                 Note that\
    \ messages marked as deleted are not counted in\n                 either total.\n\
    \               Possible Responses:\n                   +OK nn mm\n          \
    \     Examples:\n                   C:    STAT\n                   S:    +OK 2\
    \ 320\n           LIST [msg]\n               Arguments: a message-id (optionally)\
    \  If a message-id is\n                   given, it may NOT refer to a message\
    \ marked as\n                   deleted.\n               Restrictions: may only\
    \ be given in the TRANSACTION state.\n               Discussion:\n           \
    \      If an argument was given and the POP3 server issues a\n               \
    \  positive response with a line containing information\n                 for\
    \ that message.  This line is called a \"scan listing\"\n                 for\
    \ that message.\n                 If no argument was given and the POP3 server\
    \ issues a\n                 positive response, then the response given is\n \
    \                multi-line.  After the initial +OK, for each message\n      \
    \           in the maildrop, the POP3 server responds with a line\n          \
    \       containing information for that message.  This line\n                \
    \ is called a \"scan listing\" for that message.\n                 In order to\
    \ simplify parsing, all POP3 servers are\n                 required to use a certain\
    \ format for scan listings.\n                 The first octets present must be\
    \ the message-id of\n                 the message.  Following the message-id is\
    \ the size of\n                 the message in octets.  This memo makes no requirement\n\
    \                 on what follows the message size in the scan listing.\n    \
    \             Minimal implementations should just end that line of\n         \
    \        the response with a CRLF pair.  More advanced\n                 implementations\
    \ may include other information, as\n                 parsed from the message.\n\
    \                      NOTE: This memo STRONGLY discourages\n                \
    \      implementations from supplying additional\n                      information\
    \ in the scan listing.  Other, optional,\n                      facilities are\
    \ discussed later on which permit\n                      the client to parse the\
    \ messages in the maildrop.\n                 Note that messages marked as deleted\
    \ are not listed.\n               Possible Responses:\n                   +OK\
    \ scan listing follows\n                   -ERR no such message\n            \
    \   Examples:\n                   C:    LIST\n                   S:    +OK 2 messages\
    \ (320 octets)\n                   S:    1 120\n                   S:    2 200\n\
    \                   S:    .\n                     ...\n                   C: \
    \   LIST 2\n                   S:    +OK 2 200\n                     ...\n   \
    \                C:    LIST 3\n                   S:    -ERR no such message,\
    \ only 2 messages in\n                         maildrop\n           RETR msg\n\
    \               Arguments: a message-id (required)  This message-id may\n    \
    \               NOT refer to a message marked as deleted.\n               Restrictions:\
    \ may only be given in the TRANSACTION state.\n               Discussion:\n  \
    \               If the POP3 server issues a positive response, then the\n    \
    \             response given is multi-line.  After the initial +OK,\n        \
    \         the POP3 server sends the message corresponding to the\n           \
    \      given message-id, being careful to byte-stuff the\n                 termination\
    \ character (as with all multi-line\n                 responses).\n          \
    \       If the number associated with this message is higher\n               \
    \  than the \"highest number accessed\" in the maildrop, the\n               \
    \  POP3 server updates the \"highest number accessed\" to\n                 the\
    \ number associated with this message.\n               Possible Responses:\n \
    \                  +OK message follows\n                   -ERR no such message\n\
    \               Examples:\n                   C:    RETR 1\n                 \
    \  S:    +OK 120 octets\n                   S:    <the POP3 server sends the entire\
    \ message here>\n                   S:    .\n           DELE msg\n           \
    \    Arguments: a message-id (required)  This message-id\n                   may\
    \ NOT refer to a message marked as deleted.\n               Restrictions: may\
    \ only be given in the TRANSACTION state.\n               Discussion:\n      \
    \           The POP3 server marks the message as deleted.  Any\n             \
    \    future reference to the message-id associated with the\n                \
    \ message in a POP3 command generates an error.  The POP3\n                 server\
    \ does not actually delete the message until the\n                 POP3 session\
    \ enters the UPDATE state.\n                 If the number associated with this\
    \ message is higher\n                 than the \"highest number accessed\" in\
    \ the maildrop,\n                 the POP3 server updates the \"highest number\
    \ accessed\"\n                 to the number associated with this message.\n \
    \              Possible Responses:\n                   +OK message deleted\n \
    \                  -ERR no such message\n               Examples:\n          \
    \         C:    DELE 1\n                   S:    +OK message 1 deleted\n     \
    \                ...\n                   C:    DELE 2\n                   S: \
    \   -ERR message 2 already deleted\n           NOOP\n               Arguments:\
    \ none\n               Restrictions: may only be given in the TRANSACTION state.\n\
    \               Discussion:\n                 The POP3 server does nothing, it\
    \ merely replies with a\n                 positive response.\n               Possible\
    \ Responses:\n                   +OK\n               Examples:\n             \
    \      C:    NOOP\n                   S:    +OK\n           LAST\n           \
    \    Arguments: none\n               Restrictions: may only be issued in the TRANSACTION\
    \ state.\n               Discussion:\n                 The POP3 server issues\
    \ a positive response with a line\n                 containing the highest message\
    \ number which accessed.\n                 Zero is returned in case no message\
    \ in the maildrop has\n                 been accessed during previous transactions.\
    \  A client\n                 may thereafter infer that messages, if any, numbered\n\
    \                 greater than the response to the LAST command are\n        \
    \         messages not yet accessed by the client.\n             Possible Response:\n\
    \                   +OK nn\n             Examples:\n                   C:    \
    \  STAT\n                   S:      +OK 4 320\n                   C:      LAST\n\
    \                   S:      +OK 1\n                   C:      RETR 3\n       \
    \            S:      +OK 120 octets\n                   S:      <the POP3 server\
    \ sends the entire message\n                           here>\n               \
    \    S:      .\n                   C:      LAST\n                   S:      +OK\
    \ 3\n                   C:      DELE 2\n                   S:      +OK message\
    \ 2 deleted\n                   C:      LAST\n                   S:      +OK 3\n\
    \                   C:      RSET\n                   S:      +OK\n           \
    \        C:      LAST\n                   S:      +OK 1\n           RSET\n   \
    \            Arguments: none\n               Restrictions: may only be given in\
    \ the TRANSACTION\n                   state.\n               Discussion:\n   \
    \              If any messages have been marked as deleted by the POP3\n     \
    \            server, they are unmarked.  The POP3 server then\n              \
    \   replies with a positive response.  In addition, the\n                 \"highest\
    \ number accessed\" is also reset to the value\n                 determined at\
    \ the beginning of the POP3 session.\n               Possible Responses:\n   \
    \                +OK\n               Examples:\n                   C:    RSET\n\
    \                   S:    +OK maildrop has 2 messages (320 octets)\n"
- title: The UPDATE State
  contents:
  - "The UPDATE State\n   When the client issues the QUIT command from the TRANSACTION\
    \ state,\n   the POP3 session enters the UPDATE state.  (Note that if the client\n\
    \   issues the QUIT command from the AUTHORIZATION state, the POP3\n   session\
    \ terminates but does NOT enter the UPDATE state.)\n           QUIT\n        \
    \       Arguments: none\n               Restrictions: none\n               Discussion:\n\
    \                 The POP3 server removes all messages marked as deleted\n   \
    \              from the maildrop.  It then releases the\n                 exclusive-access\
    \ lock on the maildrop and replies as\n                 to the success of\n  \
    \               these operations.  The TCP connection is then closed.\n      \
    \         Possible Responses:\n                   +OK\n               Examples:\n\
    \                   C:    QUIT\n                   S:    +OK dewey POP3 server\
    \ signing off (maildrop\n                         empty)\n                   \
    \  ...\n                   C:    QUIT\n                   S:    +OK dewey POP3\
    \ server signing off (2 messages\n                         left)\n           \
    \          ...\n"
- title: Optional POP3 Commands
  contents:
  - "Optional POP3 Commands\n   The POP3 commands discussed above must be supported\
    \ by all minimal\n   implementations of POP3 servers.\n   The optional POP3 commands\
    \ described below permit a POP3 client\n   greater freedom in message handling,\
    \ while preserving a simple POP3\n   server implementation.\n                \
    \ NOTE: This memo STRONGLY encourages implementations to\n                 support\
    \ these commands in lieu of developing augmented\n                 drop and scan\
    \ listings.  In short, the philosophy of\n                 this memo is to put\
    \ intelligence in the part of the\n                 POP3 client and not the POP3\
    \ server.\n           TOP msg n\n               Arguments: a message-id (required)\
    \ and a number.  This\n                   message-id may NOT refer to a message\
    \ marked as\n                   deleted.\n               Restrictions: may only\
    \ be given in the TRANSACTION state.\n               Discussion:\n           \
    \      If the POP3 server issues a positive response, then\n                 the\
    \ response given is multi-line.  After the initial\n                 +OK, the\
    \ POP3 server sends the headers of the message,\n                 the blank line\
    \ separating the headers from the body,\n                 and then the number\
    \ of lines indicated message's body,\n                 being careful to byte-stuff\
    \ the termination character\n                 (as with all multi-line responses).\n\
    \                 Note that if the number of lines requested by the POP3\n   \
    \              client is greater than than the number of lines in the\n      \
    \           body, then the POP3 server sends the entire message.\n           \
    \    Possible Responses:\n                   +OK top of message follows\n    \
    \               -ERR no such message\n               Examples:\n             \
    \      C:    TOP 10\n                   S:    +OK\n                   S:    <the\
    \ POP3 server sends the headers of the\n                          message, a blank\
    \ line, and the first 10 lines\n                          of the body of the message>\n\
    \                   S:    .\n                     ...\n                   C: \
    \   TOP 100\n                   S:    -ERR no such message\n           RPOP user\n\
    \               Arguments: a client specific user-id (required)\n            \
    \   Restrictions: may only be given in the AUTHORIZATION\n                   state\
    \ after a successful USER command; in addition,\n                   may only be\
    \ given if the client used a reserved\n                   (privileged) TCP port\
    \ to connect to the server.\n               Discussion:\n                 The\
    \ RPOP command may be used instead of the PASS\n                 command to authenticate\
    \ access to the maildrop.  In\n                 order for this command to be successful,\
    \ the POP3\n                 client must use a reserved TCP port (port < 1024)\
    \ to\n                 connect tothe server.  The POP3 server uses the\n     \
    \            argument pair from the USER and RPOP commands to\n              \
    \   determine if the client should be given access to\n                 the appropriate\
    \ maildrop.  Unlike the PASS command\n                 however, the POP3 server\
    \ considers if the remote user\n                 specified by the RPOP command\
    \ who resides on the POP3\n                 client host is allowed to access the\
    \ maildrop for the\n                 user specified by the USER command (e.g.,\
    \ on Berkeley\n                 UNIX, the .rhosts mechanism is used).  With the\n\
    \                 exception of this differing in authentication, this\n      \
    \           command is identical to the PASS command.\n                 Note that\
    \ the use of this feature has allowed much wider\n                 penetration\
    \ into numerous hosts on local networks (and\n                 sometimes remote\
    \ networks) by those who gain illegal\n                 access to computers by\
    \ guessing passwords or otherwise\n                 breaking into the system.\n\
    \               Possible Responses:\n                   +OK maildrop locked and\
    \ ready\n                   -ERR permission denied\n               Examples:\n\
    \                   C:    USER mrose\n                   S:    +OK mrose is a\
    \ real hoopy frood\n                   C:    RPOP mrose\n                   S:\
    \    +OK mrose's maildrop has 2 messages (320\n                         octets)\n\
    \       Minimal POP3 Commands:\n           USER name               valid in the\
    \ AUTHORIZATION state\n           PASS string\n           QUIT\n           STAT\
    \                    valid in the TRANSACTION state\n           LIST [msg]\n \
    \          RETR msg\n           DELE msg\n           NOOP\n           LAST\n \
    \          RSET\n           QUIT                    valid in the UPDATE state\n\
    \       Optional POP3 Commands:\n           RPOP user               valid in the\
    \ AUTHORIZATION state\n           TOP msg n               valid in the TRANSACTION\
    \ state\n       POP3 Replies:\n           +OK\n           -ERR\n       Note that\
    \ with the exception of the STAT command, the reply given\n       by the POP3\
    \ server to any command is significant only to \"+OK\"\n       and \"-ERR\". \
    \ Any text occurring after this reply may be ignored\n       by the client.\n"
- title: Example POP3 Session
  contents:
  - "Example POP3 Session\n    S: <wait for connection on TCP port 110>\n        ...\n\
    \    C: <open connection>\n    S:    +OK dewey POP3 server ready (Comments to:\
    \ PostMaster@UDEL.EDU)\n    C:    USER mrose\n    S:    +OK mrose is a real hoopy\
    \ frood\n    C:    PASS secret\n    S:    +OK mrose's maildrop has 2 messages\
    \ (320 octets)\n    C:    STAT\n    S:    +OK 2 320\n    C:    LIST\n    S:  \
    \  +OK 2 messages (320 octets)\n    S:    1 120\n    S:    2 200\n    S:    .\n\
    \    C:    RETR 1\n    S:    +OK 120 octets\n    S:    <the POP3 server sends\
    \ message 1>\n    S:    .\n    C:    DELE 1\n    S:    +OK message 1 deleted\n\
    \    C:    RETR 2\n    S:    +OK 200 octets\n    S:    <the POP3 server sends\
    \ message 2>\n    S:    .\n    C:    DELE 2\n    S:    +OK message 2 deleted\n\
    \    C:    QUIT\n    S:    +OK dewey POP3 server signing off (maildrop empty)\n\
    \    C:  <close connection>\n    S:  <wait for next connection>\n"
- title: Message Format
  contents:
  - "Message Format\n   All messages transmitted during a POP3 session are assumed\
    \ to conform\n   to the standard for the format of Internet text messages [RFC822].\n\
    \   It is important to note that the byte count for a message on the\n   server\
    \ host may differ from the octet count assigned to that message\n   due to local\
    \ conventions for designating end-of-line.  Usually,\n   during the AUTHORIZATION\
    \ state of the POP3 session, the POP3 client\n   can calculate the size of each\
    \ message in octets when it parses the\n   maildrop into messages.  For example,\
    \ if the POP3 server host\n   internally represents end-of-line as a single character,\
    \ then the\n   POP3 server simply counts each occurrence of this character in\
    \ a\n   message as two octets.  Note that lines in the message which start\n \
    \  with the termination octet need not be counted twice, since the POP3\n   client\
    \ will remove all byte-stuffed termination characters when it\n   receives a multi-line\
    \ response.\n"
- title: The POP and the Split-UA model
  contents:
  - "The POP and the Split-UA model\n   The underlying paradigm in which the POP3\
    \ functions is that of a\n   split-UA model.  The POP3 client host, being a remote\
    \ PC based\n   workstation, acts solely as a client to the message transport system.\n\
    \   It does not provide delivery/authentication services to others.\n   Hence,\
    \ it is acting as a UA, on behalf of the person using the\n   workstation.  Furthermore,\
    \ the workstation uses SMTP to enter mail\n   into the MTS.\n   In this sense,\
    \ we have two UA functions which interface to the\n   message transport system:\
    \ Posting (SMTP) and Retrieval (POP3).  The\n   entity which supports this type\
    \ of environment is called a split-UA\n   (since the user agent is split between\
    \ two hosts which must\n   interoperate to provide these functions).\n       \
    \          ASIDE:  Others might term this a remote-UA instead.\n             \
    \    There are arguments supporting the use of both terms.\n   This memo has explicitly\
    \ referenced TCP as the underlying transport\n   agent for the POP3.  This need\
    \ not be the case.  In the MZnet split-\n   UA, for example, personal micro-computer\
    \ systems are used which do\n   not have IP-style networking capability.  To connect\
    \ to the POP3\n   server host, a PC establishes a terminal connection using some\
    \ simple\n   protocol (PhoneNet).  A program on the PC drives the connection,\n\
    \   first establishing a login session as a normal user.  The login shell\n  \
    \ for this pseudo-user is a program which drives the other half of the\n   terminal\
    \ protocol and communicates with one of two servers.  Although\n   MZnet can support\
    \ several PCs, a single pseudo-user login is present\n   on the server host. \
    \ The user-id and password for this pseudo-user\n   login is known to all members\
    \ of MZnet.  Hence, the first action of\n   the login shell, after starting the\
    \ terminal protocol, is to demand a\n   USER/PASS authorization pair from the\
    \ PC.  This second level of\n   authorization is used to ascertain who is interacting\
    \ with the MTS.\n   Although the server host is deemed to support a \"trusted\"\
    \ MTS entity,\n   PCs in MZnet are not.  Naturally, the USER/PASS authorization\
    \ pair\n   for a PC is known only to the owner of the PC (in theory, at least).\n\
    \   After successfully verifying the identity of the client, a modified\n   SMTP\
    \ server is started, and the PC posts mail with the server host.\n   After the\
    \ QUIT command is given to the SMTP server and it terminates,\n   a modified POP3\
    \ server is started, and the PC retrieves mail from the\n   server host.  After\
    \ the QUIT command is given to the POP3 server and\n   it terminates, the login\
    \ shell for the pseudo-user terminates the\n   terminal protocol and logs the\
    \ job out.  The PC then closes the\n   terminal connection to the server host.\n\
    \   The SMTP server used by MZnet is modified in the sense that it knows\n   that\
    \ it's talking to a user agent and not a \"trusted\" entity in the\n   message\
    \ transport system.  Hence, it does performs the validation\n   activities normally\
    \ performed by an entity in the MTS when it accepts\n   a message from a UA.\n\
    \   The POP3 server used by MZnet is modified in the sense that it does\n   not\
    \ require a USER/PASS combination before entering the TRANSACTION\n   state. \
    \ The reason for this (of course) is that the PC has already\n   identified itself\
    \ during the second-level authorization step\n   described above.\n          \
    \       NOTE: Truth in advertising laws require that the author\n            \
    \     of this memo state that MZnet has not actually been\n                 fully\
    \ implemented.  The concepts presented and proven\n                 by the project\
    \ led to the notion of the MZnet\n                 split-slot model.  This notion\
    \ has inspired the\n                 split-UA concept described in this memo,\
    \ led to the\n                 author's interest in the POP, and heavily influenced\n\
    \                 the the description of the POP3 herein.\n   In fact, some UAs\
    \ present in the Internet already support the notion\n   of posting directly to\
    \ an SMTP server and retrieving mail directly\n   from a POP server, even if the\
    \ POP server and client resided on the\n   same host!\n                 ASIDE:\
    \ this discussion raises an issue which this memo\n                 purposedly\
    \ avoids: how does SMTP know that it's talking\n                 to a \"trusted\"\
    \ MTS entity?\n"
- title: References
  contents:
  - "References\n     [MZnet]   Stefferud, E., J. Sweet, and T. Domae, \"MZnet: Mail\n\
    \               Service for Personal Micro-Computer Systems\",\n             \
    \  Proceedings, IFIP 6.5 International Conference on\n               Computer\
    \ Message Systems, Nottingham, U.K., May 1984.\n     [RFC821]  Postel, J., \"\
    Simple Mail Transfer Protocol\",\n               USC/Information Sciences Institute,\
    \ August 1982.\n     [RFC822]  Crocker, D., \"Standard for the Format of ARPA-Internet\n\
    \               Text Messages\", University of Delaware, August 1982.\n     [RFC937]\
    \  Butler, M., J. Postel, D. Chase, J. Goldberger, and J.\n               Reynolds,\
    \ \"Post Office Protocol - Version 2\", RFC 937,\n               USC/Information\
    \ Sciences Institute, February 1985.\n     [RFC1060] Reynolds, J., and J. Postel,\
    \ \"Assigned Numbers\", RFC\n               1060, USC/Information Sciences Institute,\
    \ March 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   Marshall T. Rose\n   Performance Systems International\n\
    \   5201 Great America Parkway\n   Suite 3106\n   Santa Clara, CA  95054\n   Phone:\
    \ +1 408 562 6222\n   EMail: mrose@psi.com\n   X.500:  rose, psi, us\n"
