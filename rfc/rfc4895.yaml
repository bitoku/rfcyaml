- contents:
  - "                       Authenticated Chunks for\n            the Stream Control
    Transmission Protocol (SCTP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document describes a new chunk type, several parameters, and\n
    \  procedures for the Stream Control Transmission Protocol (SCTP).  This\n   new
    chunk type can be used to authenticate SCTP chunks by using\n   shared keys between
    the sender and receiver.  The new parameters are\n   used to establish the shared
    keys.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  New Parameter Types  . . . . . . . . . . . . . . . . . . .
    . .  4\n     3.1.  Random Parameter (RANDOM)  . . . . . . . . . . . . . . . .
    \ 4\n     3.2.  Chunk List Parameter (CHUNKS)  . . . . . . . . . . . . . .  5\n
    \    3.3.  Requested HMAC Algorithm Parameter (HMAC-ALGO) . . . . . .  6\n   4.
    \ New Error Cause  . . . . . . . . . . . . . . . . . . . . . . .  7\n     4.1.
    \ Unsupported HMAC Identifier Error Cause  . . . . . . . . .  7\n   5.  New Chunk
    Type . . . . . . . . . . . . . . . . . . . . . . . .  8\n     5.1.  Authentication
    Chunk (AUTH)  . . . . . . . . . . . . . . .  8\n   6.  Procedures . . . . . .
    . . . . . . . . . . . . . . . . . . . . 10\n     6.1.  Establishment of an Association
    Shared Key . . . . . . . . 10\n     6.2.  Sending Authenticated Chunks . . . .
    . . . . . . . . . . . 11\n     6.3.  Receiving Authenticated Chunks . . . . .
    . . . . . . . . . 12\n   7.  Examples . . . . . . . . . . . . . . . . . . . .
    . . . . . . . 14\n   8.  IANA Considerations  . . . . . . . . . . . . . . . .
    . . . . . 15\n     8.1.  A New Chunk Type . . . . . . . . . . . . . . . . . .
    . . . 15\n     8.2.  Three New Parameter Types  . . . . . . . . . . . . . . .
    . 15\n     8.3.  A New Error Cause  . . . . . . . . . . . . . . . . . . . . 15\n
    \    8.4.  A New Table for HMAC Identifiers . . . . . . . . . . . . . 16\n   9.
    \ Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n   10. Acknowledgments
    \ . . . . . . . . . . . . . . . . . . . . . . . 17\n   11. Normative References
    . . . . . . . . . . . . . . . . . . . . . 17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   SCTP uses 32-bit verification tags to protect itself against
    blind\n   attackers.  These values are not changed during the lifetime of an\n
    \  SCTP association.\n   Looking at new SCTP extensions, there is the need to
    have a method of\n   proving that an SCTP chunk(s) was really sent by the original
    peer\n   that started the association and not by a malicious attacker.\n   Using
    Transport Layer Security (TLS), as defined in RFC 3436 [6],\n   does not help
    because it only secures SCTP user data.\n   Therefore, an SCTP extension that
    provides a mechanism for deriving\n   shared keys for each association is presented.
    \ These association\n   shared keys are derived from endpoint pair shared keys,
    which are\n   configured and might be empty, and data that is exchanged during
    the\n   SCTP association setup.\n   The extension presented in this document allows
    an SCTP sender to\n   authenticate chunks using shared keys between the sender
    and\n   receiver.  The receiver can then verify that the chunks are sent from\n
    \  the sender and not from a malicious attacker (as long as the attacker\n   does
    not know an association shared key).\n   The extension described in this document
    places the result of a\n   Hashed Message Authentication Code (HMAC) computation
    before the data\n   covered by that computation.  Placing it at the end of the
    packet\n   would have required placing a control chunk after DATA chunks in case\n
    \  of authenticating DATA chunks.  This would break the rule that\n   control
    chunks occur before DATA chunks in SCTP packets.  It should\n   also be noted
    that putting the result of the HMAC computation after\n   the data being covered
    would not allow sending the packet during the\n   computation of the HMAC because
    the result of the HMAC computation is\n   needed to compute the CRC32C checksum
    of the SCTP packet, which is\n   placed in the common header of the SCTP packet.\n
    \  The SCTP extension for Dynamic Address Reconfiguration (ADD-IP)\n   requires
    the usage of the extension described in this document.  The\n   SCTP Partial Reliability
    Extension (PR-SCTP) can be used in\n   conjunction with the extension described
    in this document.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\", when they appear in this document, are to be interpreted\n
    \  as described in RFC 2119 [3].\n"
  title: 2.  Conventions
- contents:
  - "3.  New Parameter Types\n   This section defines the new parameter types that
    will be used to\n   negotiate the authentication during association setup.  Table
    1\n   illustrates the new parameter types.\n    +----------------+------------------------------------------------+\n
    \   | Parameter Type | Parameter Name                                 |\n    +----------------+------------------------------------------------+\n
    \   | 0x8002         | Random Parameter (RANDOM)                      |\n    |
    0x8003         | Chunk List Parameter (CHUNKS)                  |\n    | 0x8004
    \        | Requested HMAC Algorithm Parameter (HMAC-ALGO) |\n    +----------------+------------------------------------------------+\n
    \                                 Table 1\n   Note that the parameter format requires
    the receiver to ignore the\n   parameter and continue processing if the parameter
    is not understood.\n   This is accomplished (as described in RFC 2960 [5], Section
    3.2.1.)\n   by the use of the upper bits of the parameter type.\n"
  title: 3.  New Parameter Types
- contents:
  - "3.1.  Random Parameter (RANDOM)\n   This parameter is used to carry a random
    number of an arbitrary\n   length.\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Parameter Type = 0x8002   |       Parameter Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   \\                          Random
    Number                        /\n   /                               +-------------------------------\\\n
    \  |                               |           Padding             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 1\n   Parameter Type: 2 bytes (unsigned
    integer)\n      This value MUST be set to 0x8002.\n   Parameter Length: 2 bytes
    (unsigned integer)\n      This value is the length of the Random Number in bytes
    plus 4.\n   Random Number: n bytes (unsigned integer)\n      This value represents
    an arbitrary Random Number in network byte\n      order.\n   Padding: 0, 1, 2,
    or 3 bytes (unsigned integer)\n      If the length of the Random Number is not
    a multiple of 4 bytes,\n      the sender MUST pad the parameter with all zero
    bytes to make the\n      parameter 32-bit aligned.  The Padding MUST NOT be longer
    than 3\n      bytes and it MUST be ignored by the receiver.\n   The RANDOM parameter
    MUST be included once in the INIT or INIT-ACK\n   chunk, if the sender wants to
    send or receive authenticated chunks,\n   to provide a 32-byte Random Number.
    \ For 32-byte Random Numbers, the\n   Padding is empty.\n"
  title: 3.1.  Random Parameter (RANDOM)
- contents:
  - "3.2.  Chunk List Parameter (CHUNKS)\n   This parameter is used to specify which
    chunk types are required to\n   be authenticated before being sent by the peer.\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Parameter Type = 0x8003   |       Parameter Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | Chunk Type 1  | Chunk Type 2  | Chunk Type 3  | Chunk Type 4  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               /\n   \\                              ...
    \                             \\\n   /                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Chunk
    Type n  |                   Padding                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 2\n   Parameter Type: 2 bytes (unsigned
    integer)\n      This value MUST be set to 0x8003.\n   Parameter Length: 2 bytes
    (unsigned integer)\n      This value is the number of listed Chunk Types plus
    4.\n   Chunk Type n: 1 byte (unsigned integer)\n      Each Chunk Type listed is
    required to be authenticated when sent\n      by the peer.\n   Padding: 0, 1,
    2, or 3 bytes (unsigned integer)\n      If the number of Chunk Types is not a
    multiple of 4, the sender\n      MUST pad the parameter with all zero bytes to
    make the parameter\n      32-bit aligned.  The Padding MUST NOT be longer than
    3 bytes and\n      it MUST be ignored by the receiver.\n   The CHUNKS parameter
    MUST be included once in the INIT or INIT-ACK\n   chunk if the sender wants to
    receive authenticated chunks.  Its\n   maximum length is 260 bytes.\n   The chunk
    types for INIT, INIT-ACK, SHUTDOWN-COMPLETE, and AUTH\n   chunks MUST NOT be listed
    in the CHUNKS parameter.  However, if a\n   CHUNKS parameter is received then
    the types for INIT, INIT-ACK,\n   SHUTDOWN-COMPLETE, and AUTH chunks MUST be ignored.\n"
  title: 3.2.  Chunk List Parameter (CHUNKS)
- contents:
  - "3.3.  Requested HMAC Algorithm Parameter (HMAC-ALGO)\n   This parameter is used
    to list the HMAC Identifiers the peer MUST\n   use.\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Parameter Type = 0x8004   |       Parameter Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          HMAC Identifier 1    |      HMAC Identifier 2        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               /\n   \\                              ...
    \                             \\\n   /                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |        HMAC
    Identifier n      |           Padding             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 3\n   Parameter Type: 2 bytes (unsigned
    integer)\n      This value MUST be set to 0x8004.\n   Parameter Length: 2 bytes
    (unsigned integer)\n      This value is the number of HMAC Identifiers multiplied
    by 2, plus\n      4.\n   HMAC Identifier n: 2 bytes (unsigned integer)\n      The
    values expressed are a list of HMAC Identifiers that may be\n      used by the
    peer.  The values are listed by preference, with\n      respect to the sender,
    where the first HMAC Identifier listed is\n      the one most preferable to the
    sender.\n   Padding: 0 or 2 bytes (unsigned integer)\n      If the number of HMAC
    Identifiers is not even, the sender MUST pad\n      the parameter with all zero
    bytes to make the parameter 32-bit\n      aligned.  The Padding MUST be 0 or 2
    bytes long and it MUST be\n      ignored by the receiver.\n   The HMAC-ALGO parameter
    MUST be included once in the INIT or INIT-ACK\n   chunk if the sender wants to
    send or receive authenticated chunks.\n   Table 2 shows the currently defined
    values for HMAC Identifiers.\n              +-----------------+--------------------------+\n
    \             | HMAC Identifier | Message Digest Algorithm |\n              +-----------------+--------------------------+\n
    \             | 0               | Reserved                 |\n              |
    1               | SHA-1 defined in [8]     |\n              | 2               |
    Reserved                 |\n              | 3               | SHA-256 defined
    in [8]   |\n              +-----------------+--------------------------+\n                                  Table
    2\n   Every endpoint supporting SCTP chunk authentication MUST support the\n   HMAC
    based on the SHA-1 algorithm.\n"
  title: 3.3.  Requested HMAC Algorithm Parameter (HMAC-ALGO)
- contents:
  - "4.  New Error Cause\n   This section defines a new error cause that will be sent
    if an AUTH\n   chunk is received with an unsupported HMAC Identifier.  Table 3\n
    \  illustrates the new error cause.\n               +------------+-----------------------------+\n
    \              | Cause Code | Error Cause Name            |\n               +------------+-----------------------------+\n
    \              | 0x0105     | Unsupported HMAC Identifier |\n               +------------+-----------------------------+\n
    \                                 Table 3\n"
  title: 4.  New Error Cause
- contents:
  - "4.1.  Unsupported HMAC Identifier Error Cause\n   This error cause is used to
    indicate that an AUTH chunk has been\n   received with an unsupported HMAC Identifier.\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |      Cause Code = 0x0105      |       Cause Length = 6        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         HMAC Identifier       |            Padding            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 4\n   Cause Code: 2 bytes (unsigned integer)\n
    \     This value MUST be set to 0x0105.\n   Cause Length: 2 bytes (unsigned integer)\n
    \     This value MUST be set to 6.\n   HMAC Identifier: 2 bytes (unsigned integer)\n
    \     This value is the HMAC Identifier which is not supported.\n   Padding: 2
    bytes (unsigned integer)\n      The sender MUST pad the error cause with all zero
    bytes to make\n      the cause 32-bit aligned.  The Padding MUST be 2 bytes long
    and it\n      MUST be ignored by the receiver.\n"
  title: 4.1.  Unsupported HMAC Identifier Error Cause
- contents:
  - "5.  New Chunk Type\n   This section defines the new chunk type that will be used
    to\n   authenticate chunks.  Table 4 illustrates the new chunk type.\n               +------------+-----------------------------+\n
    \              | Chunk Type | Chunk Name                  |\n               +------------+-----------------------------+\n
    \              | 0x0F       | Authentication Chunk (AUTH) |\n               +------------+-----------------------------+\n
    \                                 Table 4\n   It should be noted that the AUTH-chunk
    format requires the receiver\n   to ignore the chunk if it is not understood and
    silently discard all\n   chunks that follow.  This is accomplished (as described
    in RFC 2960\n   [5], Section 3.2.) by the use of the upper bits of the chunk type.\n"
  title: 5.  New Chunk Type
- contents:
  - "5.1.  Authentication Chunk (AUTH)\n   This chunk is used to hold the result of
    the HMAC calculation.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | Type = 0x0F   |   Flags=0     |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Shared Key Identifier      |        HMAC Identifier        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   \\                             HMAC
    \                             /\n   /                                                               \\\n
    \  /                               +-------------------------------\\\n   |                               |
    \          Padding             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 5\n   Type: 1 byte (unsigned integer)\n
    \     This value MUST be set to 0x0F for all AUTH-chunks.\n   Flags: 1 byte (unsigned
    integer)\n      SHOULD be set to zero on transmit and MUST be ignored on receipt.\n
    \  Length: 2 bytes (unsigned integer)\n      This value holds the length of the
    HMAC in bytes plus 8.\n   Shared Key Identifier: 2 bytes (unsigned integer)\n
    \     This value describes which endpoint pair shared key is used.\n   HMAC Identifier:
    2 bytes (unsigned integer)\n      This value describes which message digest is
    being used.  Table 2\n      shows the currently defined values.\n   HMAC: n bytes
    (unsigned integer)\n      This holds the result of the HMAC calculation.\n   Padding:
    0, 1, 2, or 3 bytes (unsigned integer)\n      If the length of the HMAC is not
    a multiple of 4 bytes, the sender\n      MUST pad the chunk with all zero bytes
    to make the chunk 32-bit\n      aligned.  The Padding MUST NOT be longer than
    3 bytes and it MUST\n      be ignored by the receiver.\n   The control chunk AUTH
    MUST NOT appear more than once in an SCTP\n   packet.  All control and data chunks
    that are placed after the AUTH\n   chunk in the packet are sent in an authenticated
    way.  Those chunks\n   placed in a packet before the AUTH chunk are not authenticated.\n
    \  Please note that DATA chunks can not appear before control chunks in\n   an
    SCTP packet.\n"
  title: 5.1.  Authentication Chunk (AUTH)
- contents:
  - '6.  Procedures

    '
  title: 6.  Procedures
- contents:
  - "6.1.  Establishment of an Association Shared Key\n   An SCTP endpoint willing
    to receive or send authenticated chunks MUST\n   send one RANDOM parameter in
    its INIT or INIT-ACK chunk.  The RANDOM\n   parameter MUST contain a 32-byte Random
    Number.  The Random Number\n   should be generated in accordance with RFC 4086
    [7].  If the Random\n   Number is not 32 bytes, the association MUST be aborted.
    \ The ABORT\n   chunk SHOULD contain the error cause 'Protocol Violation'.  In
    case\n   of INIT collision, the rules governing the handling of this Random\n
    \  Number follow the same pattern as those for the Verification Tag, as\n   explained
    in Section 5.2.4 of RFC 2960 [5].  Therefore, each endpoint\n   knows its own
    Random Number and the peer's Random Number after the\n   association has been
    established.\n   An SCTP endpoint has a list of chunks it only accepts if they
    are\n   received in an authenticated way.  This list is included in the INIT\n
    \  and INIT-ACK, and MAY be omitted if it is empty.  Since this list\n   does
    not change during the lifetime of the SCTP endpoint there is no\n   problem in
    case of INIT collision.\n   Each SCTP endpoint MUST include in the INIT and INIT-ACK
    a HMAC-ALGO\n   parameter containing a list of HMAC Identifiers it requests the
    peer\n   to use.  The receiver of an HMAC-ALGO parameter SHOULD use the first\n
    \  listed algorithm it supports.  The HMAC algorithm based on SHA-1 MUST\n   be
    supported and included in the HMAC-ALGO parameter.  An SCTP\n   endpoint MUST
    NOT change the parameters listed in the HMAC-ALGO\n   parameter during the lifetime
    of the endpoint.\n   Both endpoints of an association MAY have endpoint pair shared
    keys\n   that are byte vectors and pre-configured or established by another\n
    \  mechanism.  They are identified by the Shared Key Identifier.  For\n   each
    endpoint pair shared key, an association shared key is computed.\n   If there
    is no endpoint pair shared key, only one association shared\n   key is computed
    by using an empty byte vector as the endpoint pair\n   shared key.\n   The RANDOM
    parameter, the CHUNKS parameter, and the HMAC-ALGO\n   parameter sent by each
    endpoint are concatenated as byte vectors.\n   These parameters include the parameter
    type, parameter length, and\n   the parameter value, but padding is omitted; all
    padding MUST be\n   removed from this concatenation before proceeding with further\n
    \  computation of keys.  Parameters that were not sent are simply\n   omitted
    from the concatenation process.  The resulting two vectors\n   are called the
    two key vectors.\n   From the endpoint pair shared keys and the key vectors, the\n
    \  association shared keys are computed.  This is performed by selecting\n   the
    numerically smaller key vector and concatenating it to the\n   endpoint pair shared
    key, and then concatenating the numerically\n   larger key vector to that.  If
    the key vectors are equal as numbers\n   but differ in length, then the concatenation
    order is the endpoint\n   shared key, followed by the shorter key vector, followed
    by the\n   longer key vector.  Otherwise, the key vectors are identical, and may\n
    \  be concatenated to the endpoint pair key in any order.  The\n   concatenation
    is performed on byte vectors, and all numerical\n   comparisons use network byte
    order to convert the key vectors to a\n   number.  The result of the concatenation
    is the association shared\n   key.\n"
  title: 6.1.  Establishment of an Association Shared Key
- contents:
  - "6.2.  Sending Authenticated Chunks\n   Endpoints MUST send all requested chunks
    that have been authenticated\n   where this has been requested by the peer.  The
    other chunks MAY be\n   sent whether or not they have been authenticated.  If
    endpoint pair\n   shared keys are used, one of them MUST be selected for\n   authentication.\n
    \  To send chunks in an authenticated way, the sender MUST include these\n   chunks
    after an AUTH chunk.  This means that a sender MUST bundle\n   chunks in order
    to authenticate them.\n   If the endpoint has no endpoint pair shared key for
    the peer, it MUST\n   use Shared Key Identifier zero with an empty endpoint pair
    shared\n   key.  If there are multiple endpoint shared keys the sender selects\n
    \  one and uses the corresponding Shared Key Identifier.\n   The sender MUST calculate
    the Message Authentication Code (MAC) (as\n   described in RFC 2104 [2]) using
    the hash function H as described by\n   the HMAC Identifier and the shared association
    key K based on the\n   endpoint pair shared key described by the Shared Key Identifier.
    \ The\n   'data' used for the computation of the AUTH-chunk is given by the\n
    \  AUTH chunk with its HMAC field set to zero (as shown in Figure 6)\n   followed
    by all the chunks that are placed after the AUTH chunk in\n   the SCTP packet.\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | Type
    = 0x0F   |   Flags=0     |         Chunk Length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Shared Key Identifier      |        HMAC Identifier        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   \\                               0
    \                              /\n   /                               +-------------------------------\\\n
    \  |                               |           Padding             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 6\n   Please note that all fields are
    in network byte order and that the\n   field that will contain the complete HMAC
    is filled with zeroes.  The\n   length of the field shown as zero is the length
    of the HMAC described\n   by the HMAC Identifier.  The padding of all chunks being\n
    \  authenticated MUST be included in the HMAC computation.\n   The sender fills
    the HMAC into the HMAC field and sends the packet.\n"
  title: 6.2.  Sending Authenticated Chunks
- contents:
  - "6.3.  Receiving Authenticated Chunks\n   The receiver has a list of chunk types
    that it expects to be received\n   only after an AUTH-chunk.  This list has been
    sent to the peer during\n   the association setup.  It MUST silently discard these
    chunks if they\n   are not placed after an AUTH chunk in the packet.\n   The receiver
    MUST use the HMAC algorithm indicated in the HMAC\n   Identifier field.  If this
    algorithm was not specified by the\n   receiver in the HMAC-ALGO parameter in
    the INIT or INIT-ACK chunk\n   during association setup, the AUTH chunk and all
    the chunks after it\n   MUST be discarded and an ERROR chunk SHOULD be sent with
    the error\n   cause defined in Section 4.1.\n   If an endpoint with no shared
    key receives a Shared Key Identifier\n   other than 0, it MUST silently discard
    all authenticated chunks.  If\n   the endpoint has at least one endpoint pair
    shared key for the peer,\n   it MUST use the key specified by the Shared Key Identifier
    if a key\n   has been configured for that Shared Key Identifier.  If no endpoint\n
    \  pair shared key has been configured for that Shared Key Identifier,\n   all
    authenticated chunks MUST be silently discarded.\n   The receiver now performs
    the same calculation as described for the\n   sender based on Figure 6.  If the
    result of the calculation is the\n   same as given in the HMAC field, all the
    chunks following the AUTH\n   chunk are processed.  If the field does not match
    the result of the\n   calculation, all the chunks following the AUTH chunk MUST
    be silently\n   discarded.\n   It should be noted that if the receiver wants to
    tear down an\n   association in an authenticated way only, the handling of malformed\n
    \  packets should not result in tearing down the association.\n   An SCTP implementation
    has to maintain state for each SCTP\n   association.  In the following, we call
    this data structure the SCTP\n   transmission control block (STCB).\n   When an
    endpoint requires COOKIE-ECHO chunks to be authenticated,\n   some special procedures
    have to be followed because the reception of\n   a COOKIE-ECHO chunk might result
    in the creation of an SCTP\n   association.  If a packet arrives containing an
    AUTH chunk as a first\n   chunk, a COOKIE-ECHO chunk as the second chunk, and
    possibly more\n   chunks after them, and the receiver does not have an STCB for
    that\n   packet, then authentication is based on the contents of the COOKIE-\n
    \  ECHO chunk.  In this situation, the receiver MUST authenticate the\n   chunks
    in the packet by using the RANDOM parameters, CHUNKS\n   parameters and HMAC_ALGO
    parameters obtained from the COOKIE-ECHO\n   chunk, and possibly a local shared
    secret as inputs to the\n   authentication procedure specified in Section 6.3.
    \ If authentication\n   fails, then the packet is discarded.  If the authentication
    is\n   successful, the COOKIE-ECHO and all the chunks after the COOKIE-ECHO\n
    \  MUST be processed.  If the receiver has an STCB, it MUST process the\n   AUTH
    chunk as described above using the STCB from the existing\n   association to authenticate
    the COOKIE-ECHO chunk and all the chunks\n   after it.\n   If the receiver does
    not find an STCB for a packet containing an AUTH\n   chunk as the first chunk
    and does not find a COOKIE-ECHO chunk as the\n   second chunk, it MUST use the
    chunks after the AUTH chunk to look up\n   an existing association.  If no association
    is found, the packet MUST\n   be considered as out of the blue.  The out of the
    blue handling MUST\n   be based on the packet without taking the AUTH chunk into
    account.\n   If an association is found, it MUST process the AUTH chunk using
    the\n   STCB from the existing association as described earlier.\n   Requiring
    ABORT chunks and COOKIE-ECHO chunks to be authenticated\n   makes it impossible
    for an attacker to bring down or restart an\n   association as long as the attacker
    does not know the association\n   shared key.  But it should also be noted that
    if an endpoint accepts\n   ABORT chunks only in an authenticated way, it may take
    longer to\n   detect that the peer is no longer available.  If an endpoint accepts\n
    \  COOKIE-ECHO chunks only in an authenticated way, the restart\n   procedure
    does not work, because the restarting endpoint most likely\n   does not know the
    association shared key of the old association to be\n   restarted.  However, if
    the restarting endpoint does know the old\n   association shared key, he can successfully
    send the COOKIE-ECHO\n   chunk in a way that it is accepted by the peer by using
    this old\n   association shared key for the packet containing the AUTH chunk.\n
    \  After this operation, both endpoints have to use the new association\n   shared
    key.\n   If a server has an endpoint pair shared key with some clients, it can\n
    \  request the COOKIE_ECHO chunk to be authenticated and can ensure that\n   only
    associations from clients with a correct endpoint pair shared\n   key are accepted.\n
    \  Furthermore, it is important that the cookie contained in an INIT-ACK\n   chunk
    and in a COOKIE-ECHO chunk MUST NOT contain any endpoint pair\n   shared keys.\n"
  title: 6.3.  Receiving Authenticated Chunks
- contents:
  - "7.  Examples\n   This section gives examples of message exchanges for association\n
    \  setup.\n   The simplest way of using the extension described in this document
    is\n   given by the following message exchange.\n       ---------- INIT[RANDOM;
    CHUNKS; HMAC-ALGO] ---------->\n       <------- INIT-ACK[RANDOM; CHUNKS; HMAC-ALGO]
    ---------\n       -------------------- COOKIE-ECHO -------------------->\n       <--------------------
    COOKIE-ACK ---------------------\n   Please note that the CHUNKS parameter is
    optional in the INIT and\n   INIT-ACK.\n   If the server wants to receive DATA
    chunks in an authenticated way,\n   the following message exchange is possible:\n
    \      ---------- INIT[RANDOM; CHUNKS; HMAC-ALGO] ---------->\n       <-------
    INIT-ACK[RANDOM; CHUNKS; HMAC-ALGO] ---------\n       --------------- COOKIE-ECHO;
    AUTH; DATA ------------->\n       <----------------- COOKIE-ACK; SACK ------------------\n
    \  Please note that if the endpoint pair shared key depends on the\n   client
    and the server, and is only known by the upper layer, this\n   message exchange
    requires an upper layer intervention between the\n   processing of the COOKIE-ECHO
    chunk and the processing of the AUTH\n   and DATA chunk at the server side.  This
    intervention may be realized\n   by a COMMUNICATION-UP notification followed by
    the presentation of\n   the endpoint pair shared key by the upper layer to the
    SCTP stack,\n   see for example Section 10 of RFC 2960 [5].  If this intervention
    is\n   not possible due to limitations of the API (for example, the socket\n   API),
    the server might discard the AUTH and DATA chunk, making a\n   retransmission
    of the DATA chunk necessary.  If the same endpoint\n   pair shared key is used
    for multiple endpoints and does not depend on\n   the client, this intervention
    might not be necessary.\n"
  title: 7.  Examples
- contents:
  - "8.  IANA Considerations\n   This document (RFC 4895) is the reference for all
    registrations\n   described in this section.  All registrations need to be listed
    in\n   the document available at SCTP-parameters [9].  The changes are\n   described
    below.\n"
  title: 8.  IANA Considerations
- contents:
  - "8.1.  A New Chunk Type\n   A chunk type for the AUTH chunk has been assigned
    by IANA.  IANA has\n   assigned the value (15), as given in Table 4.  An additional
    line has\n   been added in the \"CHUNK TYPES\" table of SCTP-parameters [9]:\n
    \  CHUNK TYPES\n   ID Value    Chunk Type                                     Reference\n
    \  -----       ----------                                     ---------\n   15
    \         Authentication Chunk (AUTH)                    [RFC4895]\n"
  title: 8.1.  A New Chunk Type
- contents:
  - "8.2.  Three New Parameter Types\n   Parameter types have been assigned for the
    RANDOM, CHUNKS, and HMAC-\n   ALGO parameter by IANA.  The values are as given
    in Table 1.  This\n   required two modifications to the \"CHUNK PARAMETER TYPES\"
    tables in\n   SCTP-parameters [9]: the first is the addition of three new lines
    to\n   the \"INIT Chunk Parameter Types\" table:\n   Chunk Parameter Type                       Value\n
    \  --------------------                       -----\n   Random                             32770
    (0x8002)\n   Chunk List                         32771 (0x8003)\n   Requested HMAC
    Algorithm Parameter 32772 (0x8004)\n   The second required change is the addition
    of the same three lines to\n   the to the \"INIT ACK Chunk Parameter Types\" table.\n"
  title: 8.2.  Three New Parameter Types
- contents:
  - "8.3.  A New Error Cause\n   An error cause for the Unsupported HMAC Identifier
    error cause has\n   been assigned.  The value (261) has been assigned as in Table
    3.\n   This requires an additional line of the \"CAUSE CODES\" table in SCTP-\n
    \  parameters [9]:\n   VALUE            CAUSE CODE                               REFERENCE\n
    \  -----            ----------------                         ---------\n   261
    (0x0105)     Unsupported HMAC Identifier              [RFC4895]\n"
  title: 8.3.  A New Error Cause
- contents:
  - "8.4.  A New Table for HMAC Identifiers\n   HMAC Identifiers have to be maintained
    by IANA.  Four initial values\n   have been assigned by IANA as described in Table
    2.  This required a\n   new table \"HMAC IDENTIFIERS\" in SCTP-parameters [9]:\n
    \  HMAC Identifier      Message Digest Algorithm             REFERENCE\n   ---------------
    \     ------------------------             ---------\n   0                    Reserved
    \                            [RFC4895]\n   1                    SHA-1                                [RFC4895]\n
    \  2                    Reserved                             [RFC4895]\n   3                    SHA-256
    \                             [RFC4895]\n   For registering a new HMAC Identifier
    with IANA, in this table, a\n   request has to be made to assign such a number.
    \ This number must be\n   unique and a message digest algorithm usable with the
    HMAC defined in\n   RFC 2104 [2] MUST be specified.  The \"Specification Required\"
    policy\n   of RFC 2434 [4] MUST be applied.\n"
  title: 8.4.  A New Table for HMAC Identifiers
- contents:
  - "9.  Security Considerations\n   Without using endpoint shared keys, this extension
    only protects\n   against modification or injection of authenticated chunks by\n
    \  attackers who did not capture the initial handshake setting up the\n   SCTP
    association.\n   If an endpoint pair shared key is used, even a true man in the
    middle\n   cannot inject chunks, which are required to be authenticated, even
    if\n   he intercepts the initial message exchange.  The endpoint also knows\n
    \  that it is accepting authenticated chunks from a peer who knows the\n   endpoint
    pair shared key.\n   The establishment of endpoint pair shared keys is out of
    the scope of\n   this document.  Other mechanisms can be used, like using TLS
    or\n   manual configuration.\n   When an endpoint accepts COOKIE-ECHO chunks only
    in an authenticated\n   way the restart procedure does not work.  Neither an attacker
    nor a\n   restarted endpoint not knowing the association shared key can perform\n
    \  an restart.  However, if the association shared key is known, it is\n   possible
    to restart the association.\n   Because SCTP already has a built-in mechanism
    that handles the\n   reception of duplicated chunks, the presented solution makes
    use of\n   this functionality and does not provide a method to avoid replay\n
    \  attacks by itself.  Of course, this only works within each SCTP\n   association.
    \ Therefore, a separate shared key is used for each SCTP\n   association to handle
    replay attacks covering multiple SCTP\n   associations.\n   Each endpoint presenting
    a list of more than one element in the HMAC-\n   ALGO parameter must be prepared
    for the peer using the weakest\n   algorithm listed.\n   When an endpoint pair
    uses non-NULL endpoint pair shared keys and one\n   of the endpoints still accepts
    a NULL key, an attacker who captured\n   the initial handshake can still inject
    or modify authenticated chunks\n   by using the NULL key.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgments\n   The authors wish to thank David Black, Sascha Grau,
    Russ Housley,\n   Ivan Arias Rodriguez, Irene Ruengeler, and Magnus Westerlund
    for\n   their invaluable comments.\n"
  title: 10.  Acknowledgments
- contents:
  - "11.  Normative References\n   [1]  Rivest, R., \"The MD5 Message-Digest Algorithm\",
    RFC 1321,\n        April 1992.\n   [2]  Krawczyk, H., Bellare, M., and R. Canetti,
    \"HMAC: Keyed-Hashing\n        for Message Authentication\", RFC 2104, February
    1997.\n   [3]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n
    \       Levels\", BCP 14, RFC 2119, March 1997.\n   [4]  Narten, T. and H. Alvestrand,
    \"Guidelines for Writing an IANA\n        Considerations Section in RFCs\", BCP
    26, RFC 2434, October 1998.\n   [5]  Stewart, R., Xie, Q., Morneault, K., Sharp,
    C., Schwarzbauer,\n        H., Taylor, T., Rytina, I., Kalla, M., Zhang, L., and
    V. Paxson,\n        \"Stream Control Transmission Protocol\", RFC 2960, October
    2000.\n   [6]  Jungmaier, A., Rescorla, E., and M. Tuexen, \"Transport Layer\n
    \       Security over Stream Control Transmission Protocol\", RFC 3436,\n        December
    2002.\n   [7]  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n        Requirements
    for Security\", BCP 106, RFC 4086, June 2005.\n   [8]  National Institute of Standards
    and Technology, \"Secure Hash\n        Standard\", FIPS PUB 180-2, August 2002,\n
    \       <http://csrc.nist.gov/publications/fips/fips180-2/\n        fips180-2.pdf>.\n
    \  [9]  <http://www.iana.org/assignments/sctp-parameters>\n"
  title: 11.  Normative References
- contents:
  - "Authors' Addresses\n   Michael Tuexen\n   Muenster Univ. of Applied Sciences\n
    \  Stegerwaldstr. 39\n   48565 Steinfurt\n   Germany\n   EMail: tuexen@fh-muenster.de\n
    \  Randall R. Stewart\n   Cisco Systems, Inc.\n   4875 Forest Drive\n   Suite
    200\n   Columbia, SC  29206\n   USA\n   EMail: rrs@cisco.com\n   Peter Lei\n   Cisco
    Systems, Inc.\n   8735 West Higgins Road\n   Suite 300\n   Chicago, IL  60631\n
    \  USA\n   Phone:\n   EMail: peterlei@cisco.com\n   Eric Rescorla\n   RTFM, Inc.\n
    \  2064 Edgewood Drive\n   Palo Alto, CA 94303\n   USA\n   Phone: +1 650-320-8549\n
    \  EMail: ekr@rtfm.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
