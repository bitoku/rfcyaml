- title: __initial_text__
  contents:
  - '          Remote Loop-Free Alternate (LFA) Fast Reroute (FRR)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an extension to the basic IP fast reroute\n\
    \   mechanism, described in RFC 5286, that provides additional backup\n   connectivity\
    \ for point-to-point link failures when none can be\n   provided by the basic\
    \ mechanisms.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7490.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n     2.1.  Requirements Language . . . . . . . . . . . . . . .\
    \ . . .   4\n   3.  Overview of Solution  . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   4.  Repair Paths  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     4.1.  Tunnels as Repair Paths . . . . . . . . . . . . . . . . .\
    \   6\n     4.2.  Tunnel Requirements . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   5.  Construction of Repair Paths  . . . . . . . . . . . . . . . .   8\n\
    \     5.1.  Identifying Required Tunneled Repair Paths  . . . . . . .   8\n  \
    \   5.2.  Determining Tunnel Endpoints  . . . . . . . . . . . . . .   8\n    \
    \   5.2.1.  Computing Repair Paths  . . . . . . . . . . . . . . .   9\n      \
    \ 5.2.2.  Selecting Repair Paths  . . . . . . . . . . . . . . .  11\n     5.3.\
    \  A Cost-Based RLFA Algorithm . . . . . . . . . . . . . . .  12\n     5.4.  Interactions\
    \ with IS-IS Overload, RFC 6987, and Costed\n           Out Links . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  17\n   6.  Example Application of Remote\
    \ LFAs  . . . . . . . . . . . . .  17\n   7.  Node Failures . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  18\n   8.  Operation in an LDP Environment .\
    \ . . . . . . . . . . . . . .  19\n   9.  Analysis of Real World Topologies .\
    \ . . . . . . . . . . . . .  21\n     9.1.  Topology Details  . . . . . . . .\
    \ . . . . . . . . . . . .  21\n     9.2.  LFA Only  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  22\n     9.3.  RLFA  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  22\n     9.4.  Comparison of LFA and RLFA results  . .\
    \ . . . . . . . . .  24\n   10. Management and Operational Considerations . .\
    \ . . . . . . . .  25\n   11. Historical Note . . . . . . . . . . . . . . . .\
    \ . . . . . . .  25\n   12. Security Considerations . . . . . . . . . . . . .\
    \ . . . . . .  25\n   13. References  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  26\n     13.1.  Normative References . . . . . . . . . . . . . .\
    \ . . . .  26\n     13.2.  Informative References . . . . . . . . . . . . . .\
    \ . . .  26\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  28\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   RFC 5714 [RFC5714] describes a framework for IP Fast Reroute\
    \ (IPFRR)\n   and provides a summary of various proposed IPFRR solutions.  A basic\n\
    \   mechanism using Loop-Free Alternates (LFAs) is described in [RFC5286]\n  \
    \ that provides good repair coverage in many topologies [RFC6571],\n   especially\
    \ those that are highly meshed.  However, some topologies,\n   notably ring-based\
    \ topologies, are not well protected by LFAs alone.\n   This is because there\
    \ is no neighbor of the Point of Local Repair\n   (PLR) that has a cost to the\
    \ destination via a path that does not\n   traverse the failure that is cheaper\
    \ than the cost to the destination\n   via the failure.\n   The method described\
    \ in this document extends the LFA approach\n   described in [RFC5286] to cover\
    \ many of these cases by tunneling the\n   packets that require IPFRR to a node\
    \ that is both reachable from the\n   PLR and can reach the destination.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses the terms defined in [RFC5714].  This\
    \ section\n   defines additional terms that are used in this document.\n   Repair\
    \ tunnel:\n      A tunnel established for the purpose of providing a virtual\n\
    \      neighbor that is a Loop-Free Alternate.\n   P-space:\n      The P-space\
    \ of a router with respect to a protected link is the\n      set of routers reachable\
    \ from that specific router using the pre-\n      convergence shortest paths without\
    \ any of those paths (including\n      equal-cost path splits) transiting that\
    \ protected link.\n      For example, the P-space of S with respect to link S-E\
    \ is the set\n      of routers that S can reach without using the protected link\
    \ S-E.\n   Extended P-space:\n      Consider the set of neighbors of a router\
    \ protecting a link.\n      Exclude from that set of routers the router reachable\
    \ over the\n      protected link.  The extended P-space of the protecting router\n\
    \      with respect to the protected link is the union of the P-spaces of\n  \
    \    the neighbors in that set of neighbors with respect to the\n      protected\
    \ link (see Section 5.2.1.2).\n   Q-space:\n      The Q-space of a router with\
    \ respect to a protected link is the\n      set of routers from which that specific\
    \ router can be reached\n      without any path (including equal-cost path splits)\
    \ transiting\n      that protected link.\n   PQ node:\n      A PQ node of a node\
    \ S with respect to a protected link S-E is a\n      node that is a member of\
    \ both the P-space (or the extended\n      P-space) of S with respect to that\
    \ protected link S-E and the\n      Q-space of E with respect to that protected\
    \ link S-E.  A repair\n      tunnel endpoint is chosen from the set of PQ-nodes.\n\
    \   Remote LFA (RLFA):\n      The use of a PQ node rather than a neighbor of the\
    \ repairing node\n      as the next hop in an LFA repair [RFC5286].\n   In this\
    \ document, the notation X-Y is used to mean the path from X to\n   Y over the\
    \ link directly connecting X and Y while the notation X->Y\n   refers to the shortest\
    \ path from X to Y via some set of unspecified\n   nodes including the null set\
    \ (i.e., including over a link directly\n   connecting X and Y).\n"
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Overview of Solution
  contents:
  - "3.  Overview of Solution\n   The problem of LFA IPFRR reachability in some networks\
    \ is illustrated\n   by the network fragment shown in Figure 1 below.\n      \
    \                              S---E\n                                   /   \
    \  \\\n                                  A       D\n                         \
    \          \\     /\n                                    B---C\n             \
    \        Figure 1: A Simple Ring Topology\n   If all link costs are equal, traffic\
    \ that is transiting link S-E\n   cannot be fully protected by LFAs.  The destination\
    \ C is an Equal-\n   Cost Multipath (ECMP) from S, and so traffic to C can be\
    \ protected\n   when S-E fails but traffic to D and E are not protectable using\
    \ LFAs.\n   This document describes extensions to the basic repair mechanism in\n\
    \   which tunnels are used to provide additional logical links that can\n   then\
    \ be used as loop-free alternates where none exist in the original\n   topology.\
    \  In Figure 1, S can reach A, B, and C without going via\n   S-E; these form\
    \ S's extended P-space with respect to S-E.  The\n   routers that can reach E\
    \ without going through S-E will be in E's\n   Q-space with respect to link S-E;\
    \ these are D and C.  B has equal-\n   cost paths to E via B-A-S-E and B-C-D-E,\
    \ and so the forwarder at S\n   might choose to send a packet to E via link S-E.\
    \  Hence, B is not in\n   the Q-space of E with respect to link S-E.  The single\
    \ node in both\n   S's extended P-space and E's Q-space is C; thus, node C is\
    \ selected\n   as the repair tunnel's endpoint.  Thus, if a tunnel is provided\n\
    \   between S and C as shown in Figure 2, then C, now being a direct\n   neighbor\
    \ of S, would become an LFA for D and E.  The definition of\n   (extended) P-space\
    \ and Q-space are provided in Section 2, and details\n   of the calculation of\
    \ the tunnel end points are provided in\n   Section 5.2.\n   The non-failure traffic\
    \ distribution is not disrupted by the\n   provision of such a tunnel since it\
    \ is only used for repair traffic\n   and MUST NOT be used for normal traffic.\
    \  Note that Operations,\n   Administration, and Maintenance (OAM) traffic used\
    \ specifically to\n   verify the viability of the repair MAY traverse the tunnel\
    \ prior to a\n   failure.\n                                    S---E\n       \
    \                            / \\   \\\n                                  A  \
    \ \\   D\n                                   \\   \\ /\n                     \
    \               B---C\n                    Figure 2: The Addition of a Tunnel\n\
    \   The use of this technique is not restricted to ring-based topologies\n   but\
    \ it is a general mechanism that can be used to enhance the\n   protection provided\
    \ by LFAs.  A study of the protection achieved\n   using remote LFA in typical\
    \ service provider core networks is\n   provided in Section 9, and a side-by-side\
    \ comparison between LFA and\n   remote LFA is provided in Section 9.4.\n   Remote\
    \ LFA is suitable for incremental deployment within a network,\n   including a\
    \ network that is already deploying LFA.  Computation of\n   the repair path requires\
    \ acceptable CPU resources and takes place\n   exclusively on the repairing node.\
    \  In MPLS networks, the targeted\n   LDP protocol needed to learn the label binding\
    \ at the repair tunnel\n   endpoint (Section 8) is a well understood and widely\
    \ deployed\n   technology.\n   The technique described in this document is directed\
    \ at providing\n   repairs in the case of link failures.  Considerations regarding\
    \ node\n   failures are discussed in Section 7.  This memo describes a solution\n\
    \   to the case where the failure occurs on a point-to-point link.  It\n   covers\
    \ the case where the repair first hop is reached via a broadcast\n   or non-broadcast\
    \ multi-access (NBMA) link such as a LAN and the case\n   where the P or Q node\
    \ is attached via such a link.  It does not,\n   however, cover the more complicated\
    \ case where the failed interface\n   is a broadcast or NBMA link.\n   This document\
    \ considers the case when the repair path is confined to\n   either a single area\
    \ or to the level two routing domain.  In all\n   other cases, the chosen PQ node\
    \ should be regarded as a tunnel\n   adjacency of the repairing node, and the\
    \ considerations described in\n   Section 6 of [RFC5286] should be taken into\
    \ account.\n"
- title: 4.  Repair Paths
  contents:
  - "4.  Repair Paths\n   As with LFA FRR, when a router detects an adjacent link\
    \ failure, it\n   uses one or more repair paths in place of the failed link. \
    \ Repair\n   paths are precomputed in anticipation of later failures so they can\n\
    \   be promptly activated when a failure is detected.\n   A tunneled repair path\
    \ tunnels traffic to some staging point in the\n   network from which it is known\
    \ that, in the absence of a worse-than-\n   anticipated failure, the traffic will\
    \ travel to its destination using\n   normal forwarding without looping back.\
    \  This is equivalent to\n   providing a virtual loop-free alternate to supplement\
    \ the physical\n   loop-free alternates; hence the name \"remote LFA FRR\".  In\
    \ its\n   simplest form, when a link cannot be entirely protected with local\n\
    \   LFA neighbors, the protecting router seeks the help of a remote LFA\n   staging\
    \ point.  Network manageability considerations may lead to a\n   repair strategy\
    \ that uses a remote LFA more frequently [LFA-MANAGE].\n   Examples of worse failures\
    \ are node failures (see Section 7), the\n   failure of a Shared Risk Link Group\
    \ (SRLG), the independent\n   concurrent failures of multiple links, or broadcast\
    \ or NBMA links\n   (Section 3); protecting against such failures is out of scope\
    \ for\n   this specification.\n"
- title: 4.1.  Tunnels as Repair Paths
  contents:
  - "4.1.  Tunnels as Repair Paths\n   Consider an arbitrary protected link S-E. \
    \ In LFA FRR, if a path to\n   the destination from a neighbor N of S does not\
    \ cause a packet to\n   loop back over the link S-E (i.e., N is a loop-free alternate),\
    \ then\n   S can send the packet to N and the packet will be delivered to the\n\
    \   destination using the pre-failure forwarding information.  If there\n   is\
    \ no such LFA neighbor, then S may be able to create a virtual LFA\n   by using\
    \ a tunnel to carry the packet to a point in the network that\n   is not a direct\
    \ neighbor of S from which the packet will be delivered\n   to the destination\
    \ without looping back to S.  In this document, such\n   a tunnel is termed a\
    \ repair tunnel.  The tail end of this tunnel (the\n   repair tunnel endpoint)\
    \ is a \"PQ node\", and the repair mechanism is a\n   \"remote LFA\".  This tunnel\
    \ MUST NOT traverse the link S-E.\n   Note that the repair tunnel terminates at\
    \ some intermediate router\n   between S and E, and not E itself.  This is clearly\
    \ the case, since\n   if it were possible to construct a tunnel from S to E, then\
    \ a\n   conventional LFA would have been sufficient to effect the repair.\n"
- title: 4.2.  Tunnel Requirements
  contents:
  - "4.2.  Tunnel Requirements\n   There are a number of IP-in-IP tunnel mechanisms\
    \ that may be used to\n   fulfill the requirements of this design, such as IP-in-IP\
    \ [RFC1853]\n   and Generic Routing Encapsulation (GRE) [RFC1701].\n   In an MPLS-enabled\
    \ network using LDP [RFC5036], a simple label stack\n   [RFC3032] may be used\
    \ to provide the required repair tunnel.  In this\n   case, the outer label is\
    \ S's neighbor's label for the repair tunnel\n   endpoint, and the inner label\
    \ is the repair tunnel endpoint's label\n   for the packet destination.  In order\
    \ for S to obtain the correct\n   inner label, it is necessary to establish a\
    \ targeted LDP session\n   [RFC5036] to the tunnel endpoint.\n   The selection\
    \ of the specific tunneling mechanism (and any necessary\n   enhancements) used\
    \ to provide a repair path is outside the scope of\n   this document.  The deployment\
    \ in an MPLS/LDP environment is\n   relatively simple in the data plane, as an\
    \ LDP Label Switched Path\n   (LSP) from S to the repair tunnel endpoint (the\
    \ selected PQ node) is\n   readily available and hence does not require any new\
    \ protocol\n   extension or design change.  This LSP is automatically established\
    \ as\n   a basic property of LDP behavior.  The performance of the\n   encapsulation\
    \ and decapsulation is efficient, as encapsulation is\n   just a push of one label\
    \ (like conventional MPLS-TE FRR) and the\n   decapsulation is normally configured\
    \ to occur at the penultimate hop\n   before the repair tunnel endpoint.  In the\
    \ control plane, a Targeted\n   LDP (TLDP) session is needed between the repairing\
    \ node and the\n   repair tunnel endpoint, which will need to be established and\
    \ the\n   labels processed before the tunnel can be used.  The time to\n   establish\
    \ the TLDP session and acquire labels will limit the speed at\n   which a new\
    \ tunnel can be put into service.  This is not anticipated\n   to be a problem\
    \ in normal operation since the managed introduction\n   and removal of links\
    \ is relatively rare, as is the incidence of\n   failure in a well-managed network.\n\
    \   When a failure is detected, it is necessary to immediately redirect\n   traffic\
    \ to the repair path.  Consequently, the repair tunnel used\n   MUST be provisioned\
    \ beforehand in anticipation of the failure.  Since\n   the location of the repair\
    \ tunnels is dynamically determined, it is\n   necessary to automatically establish\
    \ the repair tunnels.  Multiple\n   repair tunnels may share a tunnel endpoint.\n"
- title: 5.  Construction of Repair Paths
  contents:
  - '5.  Construction of Repair Paths

    '
- title: 5.1.  Identifying Required Tunneled Repair Paths
  contents:
  - "5.1.  Identifying Required Tunneled Repair Paths\n   Not all links will require\
    \ protection using a tunneled repair path.\n   Referring to Figure 1, if E can\
    \ already be protected via an LFA, S-E\n   does not need to be protected using\
    \ a repair tunnel since all\n   destinations normally reachable through E must\
    \ therefore also be\n   protectable by an LFA; such an LFA is frequently termed\
    \ a \"link LFA\".\n   Tunneled repair paths (which may be calculated per prefix)\
    \ are only\n   required for links that do not have a link or per-prefix LFA.\n\
    \   It should be noted that using the Q-space of E as a proxy for the\n   Q-space\
    \ of each destination can result in failing to identify valid\n   remote LFAs.\
    \  The extent to which this reduces the effective\n   protection coverage is topology\
    \ dependent.\n"
- title: 5.2.  Determining Tunnel Endpoints
  contents:
  - "5.2.  Determining Tunnel Endpoints\n   The repair tunnel endpoint needs to be\
    \ a node in the network\n   reachable from S without traversing S-E.  In addition,\
    \ the repair\n   tunnel endpoint needs to be a node from which packets will normally\n\
    \   flow towards their destination without being attracted back to the\n   failed\
    \ link S-E.\n   Note that once released from the tunnel, the packet will be\n\
    \   forwarded, as normal, on the shortest path from the release point to\n   its\
    \ destination.  This may result in the packet traversing the router\n   E at the\
    \ far end of the protected link S-E, but this is obviously not\n   required.\n\
    \   The properties that are required of repair tunnel endpoints are as\n   follows:\n\
    \   o  The repair tunneled point MUST be reachable from the tunnel source\n  \
    \    without traversing the failed link; and\n   o  when released from the tunnel,\
    \ packets MUST proceed towards their\n      destination without being attracted\
    \ back over the failed link.\n   Provided both these requirements are met, packets\
    \ forwarded over the\n   repair tunnel will reach their destination and will not\
    \ loop after a\n   single link failure.\n   In some topologies it will not be\
    \ possible to find a repair tunnel\n   endpoint that exhibits both the required\
    \ properties.  For example, if\n   the ring topology illustrated in Figure 1 had\
    \ a cost of four for the\n   link B-C while the remaining links were the cost\
    \ of one, then it\n   would not be possible to establish a tunnel from S to C\
    \ (without\n   resorting to some form of source routing).\n"
- title: 5.2.1.  Computing Repair Paths
  contents:
  - "5.2.1.  Computing Repair Paths\n   To compute the repair path for link S-E, it\
    \ is necessary to determine\n   the set of routers that can be reached from S\
    \ without traversing S-E\n   and match this with the set of routers from which\
    \ the node E can be\n   reached by normal forwarding without traversing the link\
    \ S-E.\n   The approach used in this memo is as follows:\n   o  The method of\
    \ computing the set of routers that can be reached\n      from S on the shortest\
    \ path tree without traversing S-E is\n      described.  This is called the S's\
    \ P-space with respect to the\n      failure of link S-E.\n   o  The distance\
    \ of the tunnel endpoint from the PLR is increased by\n      noting that S is\
    \ able to use the P-space of its neighbors with\n      respect to the failure\
    \ of link S-E since S can determine which\n      neighbor it will use as the next\
    \ hop for the repair.  This is\n      called the S's extended P-space with respect\
    \ to the failure of\n      link S-E.  The use of extended P-space allows greater\
    \ repair\n      coverage and is the preferred approach.\n   o  Finally, two methods\
    \ of computing the set of routers from which\n      the node E can be reached\
    \ by normal forwarding without traversing\n      the link S-E.  This is called\
    \ the Q-space of E with respect to the\n      link S-E.\n   The selection of the\
    \ preferred node from the set of nodes that are in\n   both extended P-space and\
    \ Q-space with respect to the S-E is\n   described in Section 5.2.2.\n   A suitable\
    \ cost-based algorithm to compute the set of nodes common to\n   both extended\
    \ P-space and Q-space with respect to the S-E is provided\n   in Section 5.3.\n"
- title: 5.2.1.1.  P-space
  contents:
  - "5.2.1.1.  P-space\n   The set of routers that can be reached from S on the shortest\
    \ path\n   tree without traversing S-E is termed the P-space of S with respect\n\
    \   to the link S-E.  This P-space can be obtained by computing a\n   Shortest\
    \ Path Tree (SPT) rooted at S and excising the subtree reached\n   via the link\
    \ S-E (including those routers that are members of an ECMP\n   that includes link\
    \ S-E).  The exclusion of routers reachable via an\n   ECMP that includes S-E\
    \ prevents the forwarding subsystem from\n   attempting to execute a repair via\
    \ the failed link S-E.  Thus, for\n   example, if the Shortest Path First (SPF)\
    \ computation stores at each\n   node the next hops to be used to reach that node\
    \ from S, then the\n   node can be added to P-space if none of its next hops are\
    \ link S-E.\n   In the case of Figure 1, this P-space comprises nodes A and B\
    \ only.\n   Expressed in cost terms, the set of routers {P} are those for which\n\
    \   the shortest path cost S->P is strictly less than the shortest path\n   cost\
    \ S->E->P.\n"
- title: 5.2.1.2.  Extended P-space
  contents:
  - "5.2.1.2.  Extended P-space\n   The description in Section 5.2.1.1 calculated\
    \ router S's P-space\n   rooted at S itself.  However, since router S will only\
    \ use a repair\n   path when it has detected the failure of the link S-E, the\
    \ initial\n   hop of the repair path need not be subject to S's normal forwarding\n\
    \   decision process.  Thus, the concept of extended P-space is\n   introduced.\
    \  Router S's extended P-space is the union of the P-spaces\n   of each of S's\
    \ neighbors (N).  This may be calculated by computing an\n   SPT at each of S's\
    \ neighbors (excluding E) and excising the subtree\n   reached via the path N->S->E.\
    \  Note this will excise those routers\n   that are reachable through all ECMPs\
    \ that include link S-E.  The use\n   of extended P-space may allow router S to\
    \ reach potential repair\n   tunnel endpoints that were otherwise unreachable.\
    \  In cost terms, a\n   router (P) is in extended P-space if the shortest path\
    \ cost N->P is\n   strictly less than the shortest path cost N->S->E->P.  In other\n\
    \   words, once the packet is forced to N by S, it is a lower cost for it\n  \
    \ to continue on to P by any path except one that takes it back to S\n   and then\
    \ across the S->E link.\n   Since in the case of Figure 1 node A is a per-prefix\
    \ LFA for the\n   destination node C, the set of extended P-space nodes with respect\
    \ to\n   link S-E comprises nodes A, B, and C.  Since node C is also in E's\n\
    \   Q-space with respect to link S-E, there is now a node common to both\n   extended\
    \ P-space and Q-space that can be used as a repair tunnel\n   endpoint to protect\
    \ the link S-E.\n"
- title: 5.2.1.3.  Q-space
  contents:
  - "5.2.1.3.  Q-space\n   The set of routers from which the node E can be reached,\
    \ by normal\n   forwarding without traversing the link S-E, is termed the Q-space\
    \ of\n   E with respect to the link S-E.  The Q-space can be obtained by\n   computing\
    \ a reverse Shortest Path Tree (rSPT) rooted at E, with the\n   subtree that might\
    \ traverse the protected link S-E excised (i.e.,\n   those nodes that would send\
    \ the packet via S-E plus those nodes that\n   have an ECMP set to E with one\
    \ or more members of that ECMP set\n   traversing the protected link S-E).  The\
    \ rSPT uses the cost towards\n   the root rather than from it and yields the best\
    \ paths towards the\n   root from other nodes in the network.  In the case of\
    \ Figure 1, the\n   Q-space of E with respect to S-E comprises nodes C and D only.\n\
    \   Expressed in cost terms, the set of routers {Q} are those for which\n   the\
    \ shortest path cost Q<-E is strictly less than the shortest path\n   cost Q<-S<-E.\
    \  In Figure 1, the intersection of the E's Q-space with\n   respect to S-E with\
    \ S's P-space with respect to S-E defines the set\n   of viable repair tunnel\
    \ endpoints, known as \"PQ nodes\".  As can be\n   seen in the case of Figure\
    \ 1, there is no common node and hence no\n   viable repair tunnel endpoint. \
    \ However, when the extended P-space\n   (Section 5.2.1.2) at S with respect to\
    \ S-E is considered, a suitable\n   intersection is found at C.\n   Note that\
    \ the Q-space calculation could be conducted for each\n   individual destination\
    \ and a per-destination repair tunnel end point\n   determined.  However, this\
    \ would, in the worst case, require an SPF\n   computation per destination that\
    \ is not currently considered to be\n   scalable.  Therefore, the Q-space of E\
    \ with respect to link S-E is\n   used as a proxy for the Q-space of each destination.\
    \  This\n   approximation is obviously correct since the repair is only used for\n\
    \   the set of destinations which were, prior to the failure, routed\n   through\
    \ node E.  This is analogous to the use of link LFAs rather\n   than per-prefix\
    \ LFAs.\n"
- title: 5.2.2.  Selecting Repair Paths
  contents:
  - "5.2.2.  Selecting Repair Paths\n   The mechanisms described above will identify\
    \ all the possible repair\n   tunnel endpoints that can be used to protect a particular\
    \ link.  In a\n   well-connected network, there are likely to be multiple possible\n\
    \   release points for each protected link.  All will deliver the packets\n  \
    \ correctly, so arguably, it does not matter which is chosen.  However,\n   one\
    \ repair tunnel endpoint may be preferred over the others on the\n   basis of\
    \ path cost or some other selection criteria.\n   There is no technical requirement\
    \ for the selection criteria to be\n   consistent across all routers, but such\
    \ consistency may be desirable\n   from an operational point of view.  In general,\
    \ there are advantages\n   in choosing the repair tunnel endpoint closest (shortest\
    \ metric) to\n   S.  Choosing the closest maximizes the opportunity for the traffic\
    \ to\n   be load balanced once it has been released from the tunnel.  For\n  \
    \ consistency in behavior, it is RECOMMENDED that the member of the set\n   of\
    \ routers {PQ} with the lowest cost S->P be the default choice for\n   P.  In\
    \ the event of a tie, the router with the lowest node identifier\n   SHOULD be\
    \ selected.\n   It is a local matter whether the repair path selection policy\
    \ used by\n   the router favors LFA repairs over RLFA repairs.  An LFA repair\
    \ has\n   the advantage of not requiring the use of a tunnel; however, network\n\
    \   manageability considerations may lead to a repair strategy that uses\n   a\
    \ remote LFA more frequently [LFA-MANAGE].\n   As described in [RFC5286], always\
    \ selecting a PQ node that is\n   downstream to the destination with respect to\
    \ the repairing node\n   prevents the formation of loops when the failure is worse\
    \ than\n   expected.  The use of downstream nodes reduces the repair coverage,\n\
    \   and operators are advised to determine whether adequate coverage is\n   achieved\
    \ before enabling this selection feature.\n"
- title: 5.3.  A Cost-Based RLFA Algorithm
  contents:
  - "5.3.  A Cost-Based RLFA Algorithm\n   The preceding text has described the computation\
    \ of the remote LFA\n   repair target (PQ) in terms of the intersection of two\
    \ reachability\n   graphs computed using an SPF algorithm.  This section describes\
    \ a\n   method of computing the remote LFA repair target for a specific\n   failed\
    \ link using a cost-based algorithm.  The pseudocode provided in\n   this section\
    \ avoids unnecessary SPF computations; for the sake of\n   readability, it does\
    \ not otherwise try to optimize the code.  The\n   algorithm covers the case where\
    \ the repair first hop is reached via a\n   broadcast or NBMA link such as a LAN.\
    \  It also covers the case where\n   the P or Q node is attached via such a link.\
    \  It does not cover the\n   case where the failed interface is a broadcast or\
    \ NBMA link.  To\n   address that case it is necessary to compute the Q-space\
    \ of each\n   neighbor of the repairing router reachable through the LAN, i.e.,\
    \ to\n   treat the pseudonode [RFC1195] as a node failure; this is because the\n\
    \   Q-spaces of the neighbors of the pseudonode may be disjoint and\n   require\
    \ use of a neighbor-specific PQ node.  The reader is referred\n   to [NODE-PROTECTION]\
    \ for further information on the use of RLFA for\n   node repairs.\n   The following\
    \ notation is used:\n   o  D_opt(a,b) is the shortest distance from node a to\
    \ node b as\n      computed by the SPF.\n   o  dest is the packet destination.\n\
    \   o  fail_intf is the failed interface (S-E in the example).\n   o  fail_intf.remote_node\
    \ is the node reachable over interface\n      fail_intf (node E in the example).\n\
    \   o  intf.remote_node is the set of nodes reachable over interface\n      intf.\n\
    \   o  root is the root of the SPF calculation.\n   o  self is the node carrying\
    \ out the computation.\n   o  y is the node in the network under consideration.\n\
    \   o  y.pseudonode is true if y is a pseudonode.\n      //////////////////////////////////////////////////////////////////\n\
    \      //\n      //   Main Function\n      //////////////////////////////////////////////////////////////////\n\
    \      //\n      // We have already computed the forward SPF from self to all\
    \ nodes\n      // y in network and thus we know D_opt (self, y).  This is needed\n\
    \      // for normal forwarding.\n      // However, for completeness:\n      Compute_and_Store_Forward_SPF(self)\n\
    \      // To extend P-space, we compute the SPF at each neighbor except\n    \
    \  // the neighbor that is reached via the link being protected.\n      // We\
    \ will also need D_opt(fail_intf.remote_node,y), so we\n      // compute that\
    \ at the same time.\n      Compute_Neighbor_SPFs()\n      // Compute the set of\
    \ nodes {P} reachable other than via the\n      // failed link.\n      Compute_Extended_P_Space(fail_intf)\n\
    \      // Compute the set of nodes that can reach the node on the far\n      //\
    \ side of the failed link without traversing the failed link.\n      Compute_Q_Space(fail_intf)\n\
    \      // Compute the set of candidate RLFA tunnel endpoints.\n      Intersect_Extended_P_and_Q_Space()\n\
    \      // Make sure that we cannot get looping repairs when the\n      // failure\
    \ is worse than expected.\n      if (guarantee_no_looping_on_worse_than_protected_failure)\n\
    \          Apply_Downstream_Constraint()\n      //\n      //  End of Main Function\n\
    \      //\n      //////////////////////////////////////////////////////////////////\n\
    \      //////////////////////////////////////////////////////////////////\n  \
    \    //\n      //  Procedures\n      //\n      /////////////////////////////////////////////////////////////////\n\
    \      //\n      // This computes the SPF from root and stores the optimum\n \
    \     // distance from root to each node y.\n      Compute_and_Store_Forward_SPF(root)\n\
    \          Compute_Forward_SPF(root)\n          foreach node y in network\n  \
    \            store D_opt(root,y)\n      /////////////////////////////////////////////////////////////////\n\
    \      //\n      // This computes the optimum distance from each neighbor (other\n\
    \      // than the neighbor reachable through the failed link) and\n      // every\
    \ other node in the network.\n      //\n      // Note that we compute this for\
    \ all neighbors, including the\n      // neighbor on the far side the failure.\
    \  This is done on the\n      // expectation that more than one link will be protected\
    \ and\n      // that the results are stored for later use.\n      //\n      Compute_Neighbor_SPFs()\n\
    \          foreach interface intf in self\n              Compute_and_Store_Forward_SPF(intf.remote_node)\n\
    \      /////////////////////////////////////////////////////////////////\n   \
    \   //\n      // The reverse SPF computes the cost from each remote node to\n\
    \      // root. This is achieved by running the normal SPF algorithm\n      //\
    \ but using the link cost in the direction from the next hop\n      // back towards\
    \ root in place of the link cost in the direction\n      // away from root towards\
    \ the next hop.\n      Compute_and_Store_Reverse_SPF(root)\n          Compute_Reverse_SPF(root)\n\
    \          foreach node y in network\n              store D_opt(y,root)\n    \
    \  /////////////////////////////////////////////////////////////////\n      //\n\
    \      // Calculate Extended P-space\n      //\n      // Note that the \"strictly\
    \ less than\" operator is needed to\n      // avoid ECMP issues.\n      Compute_Extended_P_Space(fail_intf)\n\
    \          foreach node y in network\n              y.in_extended_P_space = false\n\
    \              // Extend P-space to the P-spaces of all reachable\n          \
    \    // neighbors\n              foreach interface intf in self\n            \
    \      // Exclude failed interface, noting that\n                  // the node\
    \ reachable via that interface may be\n                  // reachable via another\
    \ interface (parallel path)\n                  if (intf != fail_intf)\n      \
    \                foreach neighbor n in intf.remote_node\n                    \
    \      // Apply RFC 5286 Inequality 1\n                          if ( D_opt(n,\
    \ y) <\n                                  D_opt(n,self) + D_opt(self, y))\n  \
    \                            y.in_extended_P_space = true\n      /////////////////////////////////////////////////////////////////\n\
    \      //\n      // Compute the Nodes in Q-space\n      //\n      Compute_Q_Space(fail_intf)\n\
    \          // Compute the cost from every node in the network to the\n       \
    \   // node normally reachable across the failed link\n          Compute_and_Store_Reverse_SPF(fail_intf.remote_node)\n\
    \          // Compute the cost from every node in the network to self\n      \
    \    Compute_and_Store_Reverse_SPF(self)\n          foreach node y in network\n\
    \              if ( D_opt(y,fail_intf.remote_node) < D_opt(y,self) +\n       \
    \               D_opt(self,fail_intf.remote_node) )\n                  y.in_Q_space\
    \ = true\n              else\n                  y.in_Q_space = false\n      /////////////////////////////////////////////////////////////////\n\
    \      //\n      // Compute Set of Nodes in Both Extended P-space and in Q-space\n\
    \      Intersect_Extended_P_and_Q_Space()\n          foreach node y in network\n\
    \              if ( y.in_extended_P_space && y.in_Q_space &&\n               \
    \       y.pseudonode == False)\n                  y.valid_tunnel_endpoint = true\n\
    \              else\n                  y.valid_tunnel_endpoint = false\n     \
    \ /////////////////////////////////////////////////////////////////\n      //\n\
    \      // A downstream route is one where the next hop is strictly\n      // closer\
    \ to the destination.  By sending the packet to a\n      // PQ node that is downstream,\
    \ we know that if the PQ node\n      // detects a failure it will not loop the\
    \ packet back to self.\n      // This is useful when there are two failures or\
    \ when a node has\n      // failed rather than a link.\n      Apply_Downstream_Constraint()\n\
    \          foreach node y in network\n              if (y.valid_tunnel_endpoint)\n\
    \                  Compute_and_Store_Forward_SPF(y)\n                  if ((D_opt(y,dest)\
    \ < D_opt(self,dest))\n                      y.valid_tunnel_endpoint = true\n\
    \                  else\n                      y.valid_tunnel_endpoint = false\n\
    \   //\n   /////////////////////////////////////////////////////////////////\n"
- title: 5.4.  Interactions with IS-IS Overload, RFC 6987, and Costed Out Links
  contents:
  - "5.4.  Interactions with IS-IS Overload, RFC 6987, and Costed Out Links\n   Since\
    \ normal link state routing takes into account the IS-IS overload\n   bit, OSPF\
    \ stub router advertisement [RFC6987], and costed out links\n   (as described\
    \ in Section 3.5 of [RFC5286]), the forward SPFs\n   performed by the PLR rooted\
    \ at the neighbors of the PLR also need to\n   take this into account.  A repair\
    \ tunnel path from a neighbor of the\n   PLR to a repair tunnel endpoint will\
    \ generally avoid the nodes and\n   links excluded by the IGP overload/costing-out\
    \ rules.  However, there\n   are two situations where this behavior may result\
    \ in a repair path\n   traversing a link or router that should be excluded:\n\
    \   1.  One situation is when the first hop on the repair tunnel path\n      \
    \ (from the PLR to a direct neighbor) does not follow the IGP\n       shortest\
    \ path.  In this case, the PLR MUST NOT use a repair\n       tunnel path whose\
    \ first hop is along a link that has a cost or\n       reverse cost equal to MaxLinkMetric\
    \ (for OSPF) or the maximum\n       cost (for IS-IS) or whose first hop has the\
    \ overload bit set (for\n       IS-IS).\n   2.  The other situation is when the\
    \ IS-IS overload bit and the\n       mechanism of [RFC6987] only prevent transit\
    \ traffic from\n       traversing a node; they do not prevent traffic destined\
    \ to a\n       node.  The per-neighbor forward SPFs using the standard IGP\n \
    \      overload rules will not prevent a PLR from choosing a repair\n       tunnel\
    \ endpoint that is advertising a desire to not carry transit\n       traffic.\
    \  Therefore, the PLR MUST NOT use a repair tunnel\n       endpoint with the IS-IS\
    \ overload bit set or where all outgoing\n       interfaces have the cost set\
    \ to MaxLinkMetric for OSPF.\n"
- title: 6.  Example Application of Remote LFAs
  contents:
  - "6.  Example Application of Remote LFAs\n   An example of a commonly deployed\
    \ topology that is not fully\n   protected by LFAs alone is shown in Figure 3.\
    \  Provider Edge (PE)1\n   and PE2 are connected in the same site.  P1 and P2\
    \ may be\n   geographically separated (intersite).  In order to guarantee the\n\
    \   lowest latency path from/to all other remote PEs, normally the\n   shortest\
    \ path follows the geographical distance of the site\n   locations.  Therefore,\
    \ to ensure this, a lower IGP metric (5) is\n   assigned between PE1 and PE2.\
    \  A high metric (1000) is set on the\n   P-PE links to prevent the PEs being\
    \ used for transit traffic.  The\n   PEs are not individually dual-homed in order\
    \ to reduce costs.\n   This is a common topology in Service Provider (SP) networks.\n\
    \   When a failure occurs on the link between PE1 and P1, PE1 does not\n   have\
    \ an LFA for traffic reachable via P1.  Similarly, by symmetry, if\n   the link\
    \ between PE2 and P2 fails, PE2 does not have an LFA for\n   traffic reachable\
    \ via P2.\n   Increasing the metric between PE1 and PE2 to allow the LFA would\n\
    \   impact the normal traffic performance by potentially increasing the\n   latency.\n\
    \                               |    100    |\n                              -P1---------P2-\n\
    \                                \\         /\n                            1000\
    \ \\       / 1000\n                                 PE1---PE2\n              \
    \                       5\n                       Figure 3: Example SP Topology\n\
    \   Clearly, full protection can be provided using the techniques\n   described\
    \ in this document by PE1 choosing P2 as the remote LFA\n   repair target node\
    \ and PE2 choosing P1 as the remote LFA repair\n   target.\n"
- title: 7.  Node Failures
  contents:
  - "7.  Node Failures\n   When the failure is a node failure rather than a point-to-point\
    \ link\n   failure, there is a danger that the RLFA repair will loop.  This is\n\
    \   discussed in detail in [IP-FRR].  In summary, the problem is that two\n  \
    \ or more of E's neighbors, each with E as the next hop to some\n   destination\
    \ D, may attempt to repair a packet addressed to\n   destination D via the other\
    \ neighbor and then E, thus causing a loop\n   to form.  A similar problem exists\
    \ in the case of a shared risk link\n   group failure where the PLR for each failure\
    \ attempts to repair via\n   the other failure.  As will be noted from [IP-FRR],\
    \ this can rapidly\n   become a complex problem to address.\n   There are a number\
    \ of ways to minimize the probability of a loop\n   forming when a node failure\
    \ occurs, and there exists the possibility\n   that two of E's neighbors may form\
    \ a mutual repair.\n   1.  Detect when a packet has arrived on some interface\
    \ I that is also\n       the interface used to reach the first hop on the RLFA\
    \ path to the\n       remote LFA repair target, and drop the packet.  This is\
    \ useful in\n       the case of a ring topology.\n   2.  Require that the path\
    \ from the remote LFA repair target to\n       destination D never passes through\
    \ E (including in the ECMP\n       case), i.e., only use node protecting paths\
    \ in which the cost\n       from the remote LFA repair target to D is strictly\
    \ less than the\n       cost from the remote LFA repair target to E plus the cost\
    \ E to D.\n   3.  Require that where the packet may pass through another neighbor\n\
    \       of E, that node is down stream (i.e., strictly closer to D than\n    \
    \   the repairing node).  This means that some neighbor of E (X) can\n       repair\
    \ via some other neighbor of E (Y), but Y cannot repair via\n       X.\n   Case\
    \ 1 accepts that loops may form and suppresses them by dropping\n   packets. \
    \ Dropping packets may be considered less detrimental than\n   looping packets.\
    \  This approach may also lead to dropping some\n   legitimate packets.  Cases\
    \ 2 and 3 above prevent the formation of a\n   loop but at the expense of a reduced\
    \ repair coverage and at the cost\n   of additional complexity in the algorithm\
    \ to compute the repair path.\n   Alternatively, one might choose to assume that\
    \ the probability of a\n   node failure is sufficiently rare that the issue of\
    \ looping RLFA\n   repairs can be ignored.\n   The probability of a node failure\
    \ and the consequences of node\n   failure in any particular topology will depend\
    \ on the node design,\n   the particular topology in use, and the strategy adopted\
    \ under node\n   failure.  It is recommended that a network operator perform an\n\
    \   analysis of the consequences and probability of node failure in their\n  \
    \ network and determine whether the incidence and consequence of\n   occurrence\
    \ are acceptable.\n   This topic is further discussed in [NODE-PROTECTION].\n"
- title: 8.  Operation in an LDP Environment
  contents:
  - "8.  Operation in an LDP Environment\n   Where this technique is used in an MPLS\
    \ network using LDP [RFC5036],\n   and S is a transit node, S will need to swap\
    \ the top label in the\n   stack for the remote LFA repair target's (PQ's) label\
    \ to the\n   destination and to then push its own label for the remote LFA repair\n\
    \   target.\n   In the example, S in Figure 2 already has the first hop (A) label\
    \ for\n   the remote LFA repair target (C) as a result of the ordinary\n   operation\
    \ of LDP.  To get the remote LFA repair target's label (C's\n   label) for the\
    \ destination (D), S needs to establish a targeted LDP\n   session with C.  The\
    \ label stack for normal operation and RLFA\n   operation is shown below in Figure\
    \ 4.\n   +-----------------+     +-----------------+     +-----------------+\n\
    \   |    datalink     |     |    datalink     |     |    datalink     |\n   +-----------------+\
    \     +-----------------+     +-----------------+\n   | S's label for D |    \
    \ | E's label for D |     | A's label for C |\n   +-----------------+     +-----------------+\
    \     +-----------------+\n   |    Payload      |     |    Payload      |    \
    \ | C's label for D |\n   +-----------------+     +-----------------+     +-----------------+\n\
    \           X                       Y               |    Payload      |\n    \
    \                                               +-----------------+\n        \
    \                                                    Z\n   X = Normal label stack\
    \ packet arriving at S\n   Y = Normal label stack packet leaving S\n   Z = RLFA\
    \ label stack to D via C as the remote LFA repair target\n                   \
    \              Figure 4\n   To establish a targeted LDP session with a candidate\
    \ remote LFA\n   repair target node, the repairing node (S) needs to know what\
    \ IP\n   address the remote LFA repair target is willing to use for targeted\n\
    \   LDP sessions.  Ideally, this is provided by the remote LFA repair\n   target\
    \ advertising this address in the IGP in use.  Which address is\n   used, how\
    \ this is advertised in the IGP, and whether this is a\n   special IP address\
    \ or an IP address also used for some other purpose\n   is out of scope for this\
    \ document and must be specified in an\n   IGP-specific RFC.\n   In the absence\
    \ of a protocol to learn the preferred IP address for\n   targeted LDP, an LSR\
    \ should attempt a targeted LDP session with the\n   Router ID [RFC2328] [RFC5305]\
    \ [RFC5340] [RFC6119] [OSPF-RI] unless it\n   is configured otherwise.\n   No\
    \ protection is available until the TLDP session has been\n   established and\
    \ a label for the destination has been learned from the\n   remote LFA repair\
    \ target.  If for any reason the TLDP session cannot\n   be established, an implementation\
    \ SHOULD advise the operator about\n   the protection setup issue through the\
    \ network management system.\n"
- title: 9.  Analysis of Real World Topologies
  contents:
  - "9.  Analysis of Real World Topologies\n   This section gives the results of analyzing\
    \ a number of real world\n   service provider topologies collected between the\
    \ end of 2012 and\n   early 2013.\n"
- title: 9.1.  Topology Details
  contents:
  - "9.1.  Topology Details\n   The figure below characterizes each topology (topo)\
    \ studied in terms\n   of:\n   o  the number of nodes (# nodes) excluding pseudonodes;\n\
    \   o  the number of bidirectional links (# links) including parallel\n      links\
    \ and links to and from pseudonodes;\n   o  the number of node pairs that are\
    \ connected by one or more links\n      (# pairs);\n   o  the number of node pairs\
    \ that are connected by more than one\n      (i.e., parallel) link (# para); and\n\
    \   o  the number of links (excluding pseudonode links, which are by\n      definition\
    \ asymmetric) that have asymmetric metrics (# asym).\n      +------+---------+---------+---------+--------+--------+\n\
    \      | topo | # nodes | # links | # pairs | # para | # asym |\n      +------+---------+---------+---------+--------+--------+\n\
    \      |    1 |     315 |     570 |     560 |     10 |      3 |\n      |    2\
    \ |     158 |     373 |     312 |     33 |      0 |\n      |    3 |     655 |\
    \    1768 |    1314 |    275 |   1195 |\n      |    4 |    1281 |    2326 |  \
    \  2248 |     70 |     10 |\n      |    5 |     364 |     811 |     659 |    \
    \ 80 |     86 |\n      |    6 |     114 |     318 |     197 |    101 |      4\
    \ |\n      |    7 |      55 |     237 |     159 |     67 |      2 |\n      | \
    \   8 |     779 |    1848 |    1441 |    199 |    437 |\n      |    9 |     263\
    \ |     482 |     413 |     41 |     12 |\n      |   10 |      86 |     375 |\
    \     145 |     64 |     22 |\n      |   11 |     162 |    1083 |     351 |  \
    \  201 |     49 |\n      |   12 |     380 |    1174 |     763 |    231 |     \
    \ 0 |\n      |   13 |    1051 |    2087 |    2037 |     48 |     64 |\n      |\
    \   14 |      92 |     291 |     204 |     64 |      2 |\n      +------+---------+---------+---------+--------+--------+\n"
- title: 9.2.  LFA Only
  contents:
  - "9.2.  LFA Only\n   The figure below shows the percentage of protected destinations\
    \ (%\n   prot) and the percentage of guaranteed node protected destinations (%\n\
    \   gtd N) for the set of topologies characterized in Section 9.1\n   achieved\
    \ using only LFA repairs.\n   These statistics were generated by considering each\
    \ node and then\n   considering each link to each next hop to each destination.\
    \  The\n   percentage of such links across the entire network that are protected\n\
    \   against link failure was determined.  This is the percentage of\n   protected\
    \ destinations.  If a link is protected against the failure\n   of the next hop\
    \ node, this is considered Guaranteed Node Protecting\n   (GNP) and the percentage\
    \ of guaranteed node protected destinations is\n   calculated using the same method\
    \ used for calculating the link\n   protection coverage.\n   GNP is identical\
    \ to node-protecting as defined in [RFC6571] and does\n   not include the additional\
    \ node protection coverage obtained by the\n   de facto node-protecting condition\
    \ described in [RFC6571].\n      +------+--------+---------+\n      | topo | %\
    \ prot | % gtd N |\n      +------+--------+---------+\n      |    1 | 78.5   |\
    \ 36.9    |\n      |    2 | 97.3   | 52.4    |\n      |    3 | 99.3   | 58   \
    \   |\n      |    4 | 83.1   | 63.1    |\n      |    5 | 99     | 59.1    |\n\
    \      |    6 | 86.4   | 21.4    |\n      |    7 | 93.9   | 35.4    |\n      |\
    \    8 | 95.3   | 48.1    |\n      |    9 | 82.2   | 49.5    |\n      |   10 |\
    \ 98.5   | 14.9    |\n      |   11 | 99.6   | 24.8    |\n      |   12 | 99.5 \
    \  | 62.4    |\n      |   13 | 92.4   | 51.6    |\n      |   14 | 99.3   | 48.6\
    \    |\n      +------+--------+---------+\n"
- title: 9.3.  RLFA
  contents:
  - "9.3.  RLFA\n   The figure below shows the percentage of protected destinations\
    \ (%\n   prot) and % guaranteed node protected destinations (% gtd N) for RLFA\n\
    \   protection in the topologies studies.  In addition, it shows the\n   percentage\
    \ of destinations using an RLFA repair (% PQ) together with\n   the total number\
    \ of unidirectional RLFA targeted LDP sessions\n   established (# PQ), and the\
    \ number of PQ sessions that would be\n   required for complete protection but\
    \ that could not be established\n   because there was no PQ node, i.e., the number\
    \ of cases whether\n   neither LFA or RLFA protection was possible (no PQ).  It\
    \ also shows\n   the 50 (p50), 90 (p90), and 100 (p100) percentiles for the number\
    \ of\n   individual LDP sessions terminating at an individual node (whether\n\
    \   used for TX, RX, or both).\n   For example, if there were LDP sessions that\
    \ required A->B, A->C,\n   C->A, and C->D, these would be counted as 2, 1, 2,\
    \ and 1 at nodes A,\n   B, C, and D respectively because:\n      A has two sessions\
    \ (to nodes B and C);\n      B has one session (to node A);\n      C has two sessions\
    \ (to nodes A and D); and\n      D has one session (to node D).\n   In this study,\
    \ remote LFA is only used when necessary, i.e., when\n   there is at least one\
    \ destination that is not reparable by a per\n   destination LFA and a single\
    \ remote LFA tunnel is used (if available)\n   to repair traffic to all such destinations.\
    \  The remote LFA repair\n   target points are computed using extended P-space\
    \ and choosing the PQ\n   node that has the lowest metric cost from the repairing\
    \ node.\n     +------+--------+--------+------+------+-------+-----+-----+------+\n\
    \     | topo | % prot |% gtd N | % PQ | # PQ | no PQ | p50 | p90 | p100 |\n  \
    \   +------+--------+--------+------+------+-------+-----+-----+------+\n    \
    \ |    1 | 99.7   | 53.3   | 21.2 |  295 |     3 |   1 |   5 |   14 |\n     |\
    \    2 | 97.5   | 52.4   | 0.2  |    7 |    40 |   0 |   0 |    2 |\n     |  \
    \  3 | 99.999 | 58.4   | 0.7  |   63 |     5 |   0 |   1 |    5 |\n     |    4\
    \ | 99     | 74.8   | 16   | 1424 |    54 |   1 |   3 |   23 |\n     |    5 |\
    \ 99.5   | 59.5   | 0.5  |  151 |     7 |   0 |   2 |    7 |\n     |    6 | 100\
    \    | 34.9   | 13.6 |   63 |     0 |   1 |   2 |    6 |\n     |    7 | 99.999\
    \ | 40.6   | 6.1  |   16 |     2 |   0 |   2 |    4 |\n     |    8 | 99.5   |\
    \ 50.2   | 4.3  |  350 |    39 |   0 |   2 |   15 |\n     |    9 | 99.5   | 55\
    \     | 17.3 |  428 |     5 |   1 |   2 |   67 |\n     |   10 | 99.6   | 14.1\
    \   | 1    |   49 |     7 |   1 |   2 |    5 |\n     |   11 | 99.9   | 24.9  \
    \ | 0.3  |   85 |     1 |   0 |   2 |    8 |\n     |   12 | 99.999 | 62.8   |\
    \ 0.5  |  512 |     4 |   0 |   0 |    3 |\n     |   13 | 97.5   | 54.6   | 5.1\
    \  | 1188 |    95 |   0 |   2 |   27 |\n     |   14 | 100    | 48.6   | 0.7  |\
    \   79 |     0 |   0 |   2 |    4 |\n     +------+--------+--------+------+------+-------+-----+-----+------+\n\
    \   Another study [ISOCORE2010] confirms the significant coverage\n   increase\
    \ provided by remote LFAs.\n"
- title: 9.4.  Comparison of LFA and RLFA results
  contents:
  - "9.4.  Comparison of LFA and RLFA results\n   The table below provides a side-by-side\
    \ comparison of the LFA and the\n   remote LFA results.  This shows a significant\
    \ improvement in the\n   percentage of protected destinations and normally a modest\n\
    \   improvement in the percentage of guaranteed node protected\n   destinations.\n\
    \      +------+--------+--------+---------+---------+\n      | topo |  LFA   |\
    \ RLFA   |  LFA    |  RLFA   |\n      |      | % prot | %prot  | % gtd N | % gtd\
    \ N |\n      +------+--------+--------+---------+---------+\n      |    1 | 78.5\
    \   | 99.7   | 36.9    | 53.3    |\n      |    2 | 97.3   | 97.5   | 52.4    |\
    \ 52.4    |\n      |    3 | 99.3   | 99.999 | 58      | 58.4    |\n      |   \
    \ 4 | 83.1   | 99     | 63.1    | 74.8    |\n      |    5 | 99     | 99.5   |\
    \ 59.1    | 59.5    |\n      |    6 | 86.4   |100     | 21.4    | 34.9    |\n\
    \      |    7 | 93.9   | 99.999 | 35.4    | 40.6    |\n      |    8 | 95.3   |\
    \ 99.5   | 48.1    | 50.2    |\n      |    9 | 82.2   | 99.5   | 49.5    | 55\
    \      |\n      |   10 | 98.5   | 99.6   | 14.9    | 14.1    |\n      |   11 |\
    \ 99.6   | 99.9   | 24.8    | 24.9    |\n      |   12 | 99.5   | 99.999 | 62.4\
    \    | 62.8    |\n      |   13 | 92.4   | 97.5   | 51.6    | 54.6    |\n     \
    \ |   14 | 99.3   |100     | 48.6    | 48.6    |\n      +------+--------+--------+---------+---------+\n\
    \   As shown in the table, remote LFA provides close to 100% prefix\n   protection\
    \ against link failure in 11 of the 14 topologies studied\n   and provides a significant\
    \ improvement in two of the remaining three\n   cases.  Note that in an MPLS network,\
    \ the tunnels to the PQ nodes are\n   always present as a property of an LDP-based\
    \ deployment.\n   In the small number of cases where there is no intersection\
    \ between\n   the (extended) P-space and the Q-space, a number of solutions to\n\
    \   providing a suitable path between such disjoint regions in the\n   network\
    \ have been discussed in the working group.  For example, an\n   explicitly routed\
    \ LSP between P and Q might be set up using RSVP-TE\n   or using Segment Routing\
    \ [SEGMENT-ROUTING].  Such extended repair\n   methods are outside the scope of\
    \ this document.\n"
- title: 10.  Management and Operational Considerations
  contents:
  - "10.  Management and Operational Considerations\n   The management of LFA and\
    \ remote LFA is the subject of ongoing work\n   within the IETF [LFA-MANAGE],\
    \ to which the reader is referred.\n   Management considerations may lead to a\
    \ preference for the use of a\n   remote LFA over an available LFA.  This preference\
    \ is a matter for\n   the network operator and not a matter of protocol correctness.\n\
    \   When the network reconverges, micro-loops [RFC5715] can form due to\n   transient\
    \ inconsistencies in the forwarding tables of different\n   routers.  If it is\
    \ determined that micro-loops are a significant\n   issue in the deployment, then\
    \ a suitable loop-free convergence\n   method, such as one of those described\
    \ in [RFC5715], [RFC6976], or\n   [ULOOP-DELAY], should be implemented.\n"
- title: 11.  Historical Note
  contents:
  - "11.  Historical Note\n   The basic concepts behind remote LFA were invented in\
    \ 2002 and were\n   later included in [IP-FRR], submitted in 2004.\n   [IP-FRR]\
    \ targeted a 100% protection coverage and hence included\n   additional mechanisms\
    \ on top of the remote LFA concept.  The addition\n   of these mechanisms made\
    \ the proposal very complex and\n   computationally intensive, and it was therefore\
    \ not pursued as a\n   working group item.\n   As explained in [RFC6571], the\
    \ purpose of the LFA FRR technology is\n   not to provide coverage at any cost.\
    \  A solution for this already\n   exists with MPLS-TE FRR.  MPLS-TE FRR is a\
    \ mature technology that is\n   able to provide protection in any topology thanks\
    \ to the explicit\n   routing capability of MPLS-TE.\n   The purpose of LFA FRR\
    \ technology is to provide for a simple FRR\n   solution when such a solution\
    \ is possible.  The first step along this\n   simplicity approach was \"local\"\
    \ LFA [RFC5286].  This specification of\n   \"remote LFA\" is a natural second\
    \ step.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   The security considerations of [RFC5286] also\
    \ apply.\n   Targeted LDP sessions and MPLS tunnels are normal features of an\
    \ MPLS\n   network, and their use in this application raises no additional\n \
    \  security concerns.\n   IP repair tunnel endpoints (where used) SHOULD be assigned\
    \ from a set\n   of addresses that are not reachable from outside the routing\
    \ domain;\n   this would prevent their use as an attack vector.\n   Other than\
    \ OAM traffic used to verify the correct operation of a\n   repair tunnel, only\
    \ traffic that is being protected as a result of a\n   link failure is placed\
    \ in a repair tunnel.  The repair tunnel MUST\n   NOT be advertised by the routing\
    \ protocol as a link that may be used\n   to carry normal user traffic or routing\
    \ protocol traffic.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5286]\
    \  Atlas, A., Ed. and A. Zinin, Ed., \"Basic Specification for\n             \
    \ IP Fast Reroute: Loop-Free Alternates\", RFC 5286,\n              September\
    \ 2008, <http://www.rfc-editor.org/info/rfc5286>.\n   [RFC5714]  Shand, M. and\
    \ S. Bryant, \"IP Fast Reroute Framework\", RFC\n              5714, January 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5714>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [IP-FRR]   Bryant, S., Filsfils, C., Previdi,\
    \ S., and M. Shand, \"IP\n              Fast Reroute using tunnels\", Work in\
    \ Progress,\n              draft-bryant-ipfrr-tunnels-03, November 2007.\n   [ISOCORE2010]\n\
    \              So, N., Lin, T., and C. Chen, \"LFA (Loop Free Alternates)\n  \
    \            Case Studies in Verizon's LDP Network\", 13th Annual MPLS\n     \
    \         Conference, 2010.\n   [LFA-MANAGE]\n              Litkowski, S., Decraene,\
    \ B., Filsfils, C., Raza, K.,\n              Horneffer, M., and P. Sarkar, \"\
    Operational management of\n              Loop Free Alternates\", Work in Progress,\
    \ draft-ietf-rtgwg-\n              lfa-manageability-08, March 2015.\n   [NODE-PROTECTION]\n\
    \              Sarkar, P., Gredler, H., Hegde, S., Bowers, C., Litkowski,\n  \
    \            S., and H. Raghuveer, \"Remote-LFA Node Protection and\n        \
    \      Manageability\", Work in Progress, draft-ietf-rtgwg-rlfa-\n           \
    \   node-protection-01, December 2014.\n   [OSPF-RI]  Xu, X., Chunduri, U., and\
    \ M. Bhatia, \"Carrying Routable IP\n              Addresses in OSPF RI LSA\"\
    , Work in Progress, draft-ietf-\n              ospf-routable-ip-address-02, April\
    \ 2015.\n   [RFC1195]  Callon, R., \"Use of OSI IS-IS for routing in TCP/IP and\n\
    \              dual environments\", RFC 1195, December 1990,\n              <http://www.rfc-editor.org/info/rfc1195>.\n\
    \   [RFC1701]  Hanks, S., Li, T., Farinacci, D., and P. Traina, \"Generic\n  \
    \            Routing Encapsulation (GRE)\", RFC 1701, October 1994,\n        \
    \      <http://www.rfc-editor.org/info/rfc1701>.\n   [RFC1853]  Simpson, W., \"\
    IP in IP Tunneling\", RFC 1853, October 1995,\n              <http://www.rfc-editor.org/info/rfc1853>.\n\
    \   [RFC2328]  Moy, J., \"OSPF Version 2\", STD 54, RFC 2328, April 1998,\n  \
    \            <http://www.rfc-editor.org/info/rfc2328>.\n   [RFC3032]  Rosen, E.,\
    \ Tappan, D., Fedorkow, G., Rekhter, Y.,\n              Farinacci, D., Li, T.,\
    \ and A. Conta, \"MPLS Label Stack\n              Encoding\", RFC 3032, January\
    \ 2001,\n              <http://www.rfc-editor.org/info/rfc3032>.\n   [RFC5036]\
    \  Andersson, L., Ed., Minei, I., Ed., and B. Thomas, Ed.,\n              \"LDP\
    \ Specification\", RFC 5036, October 2007,\n              <http://www.rfc-editor.org/info/rfc5036>.\n\
    \   [RFC5305]  Li, T. and H. Smit, \"IS-IS Extensions for Traffic\n          \
    \    Engineering\", RFC 5305, October 2008,\n              <http://www.rfc-editor.org/info/rfc5305>.\n\
    \   [RFC5340]  Coltun, R., Ferguson, D., Moy, J., and A. Lindem, \"OSPF\n    \
    \          for IPv6\", RFC 5340, July 2008,\n              <http://www.rfc-editor.org/info/rfc5340>.\n\
    \   [RFC5715]  Shand, M. and S. Bryant, \"A Framework for Loop-Free\n        \
    \      Convergence\", RFC 5715, January 2010,\n              <http://www.rfc-editor.org/info/rfc5715>.\n\
    \   [RFC6119]  Harrison, J., Berger, J., and M. Bartlett, \"IPv6 Traffic\n   \
    \           Engineering in IS-IS\", RFC 6119, February 2011,\n              <http://www.rfc-editor.org/info/rfc6119>.\n\
    \   [RFC6571]  Filsfils, C., Ed., Francois, P., Ed., Shand, M., Decraene,\n  \
    \            B., Uttaro, J., Leymann, N., and M. Horneffer, \"Loop-Free\n    \
    \          Alternate (LFA) Applicability in Service Provider (SP)\n          \
    \    Networks\", RFC 6571, June 2012,\n              <http://www.rfc-editor.org/info/rfc6571>.\n\
    \   [RFC6976]  Shand, M., Bryant, S., Previdi, S., Filsfils, C.,\n           \
    \   Francois, P., and O. Bonaventure, \"Framework for Loop-Free\n            \
    \  Convergence Using the Ordered Forwarding Information Base\n              (oFIB)\
    \ Approach\", RFC 6976, July 2013,\n              <http://www.rfc-editor.org/info/rfc6976>.\n\
    \   [RFC6987]  Retana, A., Nguyen, L., Zinin, A., White, R., and D.\n        \
    \      McPherson, \"OSPF Stub Router Advertisement\", RFC 6987,\n            \
    \  September 2013, <http://www.rfc-editor.org/info/rfc6987>.\n   [SEGMENT-ROUTING]\n\
    \              Filsfils, C., Previdi, S., Bashandy, A., Decraene, B.,\n      \
    \        Litkowski, S., Horneffer, M., Shakir, R., Tantsura, J.,\n           \
    \   and E. Crabbe, \"Segment Routing Architecture\", Work in\n              Progress,\
    \ draft-ietf-spring-segment-routing-01, February\n              2015.\n   [ULOOP-DELAY]\n\
    \              Litkowski, S., Decraene, B., Filsfils, C., and P.\n           \
    \   Francois, \"Microloop prevention by introducing a local\n              convergence\
    \ delay\", Work in Progress, draft-litkowski-\n              rtgwg-uloop-delay-03,\
    \ February 2014.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank Levente Csikor and Chris Bowers\
    \ for their\n   contribution to the cost-based algorithm text.  The authors thank\n\
    \   Alia Atlas, Ross Callon, Stephane Litkowski, Bharath R, Pushpasis\n   Sarkar,\
    \ and Adrian Farrel for their review of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stewart Bryant\n   Cisco Systems\n   9-11 New Square,\n\
    \   Bedfont Lakes,\n   Feltham,\n   Middlesex  TW14 8HA\n   United Kingdom\n \
    \  EMail: stbryant@cisco.com\n   Clarence Filsfils\n   Cisco Systems\n   De Kleetlaan\
    \ 6a\n   1831 Diegem\n   Belgium\n   EMail: cfilsfil@cisco.com\n   Stefano Previdi\n\
    \   Cisco Systems\n   EMail: sprevidi@cisco.com\n   Mike Shand\n   Independent\
    \ Contributor\n   EMail: imc.shand@gmail.com\n   Ning So\n   Vinci Systems\n \
    \  EMail: ningso@vinci-systems.com\n"
