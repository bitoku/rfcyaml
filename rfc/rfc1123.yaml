- contents:
  - '       Requirements for Internet Hosts -- Application and Support

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This RFC is an official specification for the Internet
    community.  It\n   incorporates by reference, amends, corrects, and supplements
    the\n   primary protocol standards documents relating to hosts.  Distribution\n
    \  of this document is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Summary\n   This RFC is one of a pair that defines and discusses the requirements\n
    \  for Internet host software.  This RFC covers the application and\n   support
    protocols; its companion RFC-1122 covers the communication\n   protocol layers:
    link layer, IP layer, and transport layer.\n                           Table of
    Contents\n   1.  INTRODUCTION ...............................................
    \   5\n      1.1  The Internet Architecture ..............................    6\n
    \     1.2  General Considerations .................................    6\n         1.2.1
    \ Continuing Internet Evolution .....................    6\n         1.2.2  Robustness
    Principle ..............................    7\n         1.2.3  Error Logging .....................................
    \   8\n         1.2.4  Configuration .....................................    8\n
    \     1.3  Reading this Document ..................................   10\n         1.3.1
    \ Organization ......................................   10\n         1.3.2  Requirements
    ......................................   10\n         1.3.3  Terminology .......................................
    \  11\n      1.4  Acknowledgments ........................................   12\n
    \  2.  GENERAL ISSUES .............................................   13\n      2.1
    \ Host Names and Numbers .................................   13\n      2.2  Using
    Domain Name Service ..............................   13\n      2.3  Applications
    on Multihomed hosts .......................   14\n      2.4  Type-of-Service ........................................
    \  14\n      2.5  GENERAL APPLICATION REQUIREMENTS SUMMARY ...............   15\n"
  title: Summary
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n   3.
    \ REMOTE LOGIN -- TELNET PROTOCOL ............................   16\n      3.1
    \ INTRODUCTION ...........................................   16\n      3.2  PROTOCOL
    WALK-THROUGH ..................................   16\n         3.2.1  Option Negotiation
    ................................   16\n         3.2.2  Telnet Go-Ahead Function
    ..........................   16\n         3.2.3  Control Functions .................................
    \  17\n         3.2.4  Telnet \"Synch\" Signal .............................   18\n
    \        3.2.5  NVT Printer and Keyboard ..........................   19\n         3.2.6
    \ Telnet Command Structure ..........................   20\n         3.2.7  Telnet
    Binary Option ..............................   20\n         3.2.8  Telnet Terminal-Type
    Option .......................   20\n      3.3  SPECIFIC ISSUES ........................................
    \  21\n         3.3.1  Telnet End-of-Line Convention .....................   21\n
    \        3.3.2  Data Entry Terminals ..............................   23\n         3.3.3
    \ Option Requirements ...............................   24\n         3.3.4  Option
    Initiation .................................   24\n         3.3.5  Telnet Linemode
    Option ............................   25\n      3.4  TELNET/USER INTERFACE ..................................
    \  25\n         3.4.1  Character Set Transparency ........................   25\n
    \        3.4.2  Telnet Commands ...................................   26\n         3.4.3
    \ TCP Connection Errors .............................   26\n         3.4.4  Non-Default
    Telnet Contact Port ...................   26\n         3.4.5  Flushing Output
    ...................................   26\n      3.5.  TELNET REQUIREMENTS SUMMARY
    ...........................   27\n   4.  FILE TRANSFER ..............................................
    \  29\n      4.1  FILE TRANSFER PROTOCOL -- FTP ..........................   29\n
    \        4.1.1  INTRODUCTION ......................................   29\n         4.1.2.
    \ PROTOCOL WALK-THROUGH ............................   29\n            4.1.2.1
    \ LOCAL Type ...................................   29\n            4.1.2.2  Telnet
    Format Control ........................   30\n            4.1.2.3  Page Structure
    ...............................   30\n            4.1.2.4  Data Structure Transformations
    ...............   30\n            4.1.2.5  Data Connection Management ...................
    \  31\n            4.1.2.6  PASV Command .................................   31\n
    \           4.1.2.7  LIST and NLST Commands .......................   31\n            4.1.2.8
    \ SITE Command .................................   32\n            4.1.2.9  STOU
    Command .................................   32\n            4.1.2.10  Telnet End-of-line
    Code .....................   32\n            4.1.2.11  FTP Replies .................................
    \  33\n            4.1.2.12  Connections .................................   34\n
    \           4.1.2.13  Minimum Implementation; RFC-959 Section .....   34\n         4.1.3
    \ SPECIFIC ISSUES ...................................   35\n            4.1.3.1
    \ Non-standard Command Verbs ...................   35\n            4.1.3.2  Idle
    Timeout .................................   36\n            4.1.3.3  Concurrency
    of Data and Control ..............   36\n            4.1.3.4  FTP Restart Mechanism
    ........................   36\n         4.1.4  FTP/USER INTERFACE ................................
    \  39\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n            4.1.4.1
    \ Pathname Specification .......................   39\n            4.1.4.2  \"QUOTE\"
    Command ..............................   40\n            4.1.4.3  Displaying Replies
    to User ...................   40\n            4.1.4.4  Maintaining Synchronization
    ..................   40\n         4.1.5   FTP REQUIREMENTS SUMMARY .........................
    \  41\n      4.2  TRIVIAL FILE TRANSFER PROTOCOL -- TFTP .................   44\n
    \        4.2.1  INTRODUCTION ......................................   44\n         4.2.2
    \ PROTOCOL WALK-THROUGH .............................   44\n            4.2.2.1
    \ Transfer Modes ...............................   44\n            4.2.2.2  UDP
    Header ...................................   44\n         4.2.3  SPECIFIC ISSUES
    ...................................   44\n            4.2.3.1  Sorcerer's Apprentice
    Syndrome ...............   44\n            4.2.3.2  Timeout Algorithms ...........................
    \  46\n            4.2.3.3  Extensions ...................................   46\n
    \           4.2.3.4  Access Control ...............................   46\n            4.2.3.5
    \ Broadcast Request ............................   46\n         4.2.4  TFTP REQUIREMENTS
    SUMMARY .........................   47\n   5.  ELECTRONIC MAIL -- SMTP and RFC-822
    ........................   48\n      5.1  INTRODUCTION ...........................................
    \  48\n      5.2  PROTOCOL WALK-THROUGH ..................................   48\n
    \        5.2.1  The SMTP Model ....................................   48\n         5.2.2
    \ Canonicalization ..................................   49\n         5.2.3  VRFY
    and EXPN Commands ............................   50\n         5.2.4  SEND, SOML,
    and SAML Commands .....................   50\n         5.2.5  HELO Command ......................................
    \  50\n         5.2.6  Mail Relay ........................................   51\n
    \        5.2.7  RCPT Command ......................................   52\n         5.2.8
    \ DATA Command ......................................   53\n         5.2.9  Command
    Syntax ....................................   54\n         5.2.10  SMTP Replies
    .....................................   54\n         5.2.11  Transparency .....................................
    \  55\n         5.2.12  WKS Use in MX Processing .........................   55\n
    \        5.2.13  RFC-822 Message Specification ....................   55\n         5.2.14
    \ RFC-822 Date and Time Specification ..............   55\n         5.2.15  RFC-822
    Syntax Change ............................   56\n         5.2.16  RFC-822  Local-part
    ..............................   56\n         5.2.17  Domain Literals ..................................
    \  57\n         5.2.18  Common Address Formatting Errors .................   58\n
    \        5.2.19  Explicit Source Routes ...........................   58\n      5.3
    \ SPECIFIC ISSUES ........................................   59\n         5.3.1
    \ SMTP Queueing Strategies ..........................   59\n            5.3.1.1
    Sending Strategy ..............................   59\n            5.3.1.2  Receiving
    strategy ...........................   61\n         5.3.2  Timeouts in SMTP ..................................
    \  61\n         5.3.3  Reliable Mail Receipt .............................   63\n
    \        5.3.4  Reliable Mail Transmission ........................   63\n         5.3.5
    \ Domain Name Support ...............................   65\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         5.3.6
    \ Mailing Lists and Aliases .........................   65\n         5.3.7  Mail
    Gatewaying ...................................   66\n         5.3.8  Maximum Message
    Size ..............................   68\n      5.4  SMTP REQUIREMENTS SUMMARY
    ..............................   69\n   6. SUPPORT SERVICES ............................................
    \  72\n      6.1 DOMAIN NAME TRANSLATION .................................   72\n
    \        6.1.1 INTRODUCTION .......................................   72\n         6.1.2
    \ PROTOCOL WALK-THROUGH .............................   72\n            6.1.2.1
    \ Resource Records with Zero TTL ...............   73\n            6.1.2.2  QCLASS
    Values ................................   73\n            6.1.2.3  Unused Fields
    ................................   73\n            6.1.2.4  Compression ..................................
    \  73\n            6.1.2.5  Misusing Configuration Info ..................   73\n
    \        6.1.3  SPECIFIC ISSUES ...................................   74\n            6.1.3.1
    \ Resolver Implementation ......................   74\n            6.1.3.2  Transport
    Protocols ..........................   75\n            6.1.3.3  Efficient Resource
    Usage .....................   77\n            6.1.3.4  Multihomed Hosts .............................
    \  78\n            6.1.3.5  Extensibility ................................   79\n
    \           6.1.3.6  Status of RR Types ...........................   79\n            6.1.3.7
    \ Robustness ...................................   80\n            6.1.3.8  Local
    Host Table .............................   80\n         6.1.4  DNS USER INTERFACE
    ................................   81\n            6.1.4.1  DNS Administration
    ...........................   81\n            6.1.4.2  DNS User Interface ...........................
    \  81\n            6.1.4.3 Interface Abbreviation Facilities .............   82\n
    \        6.1.5  DOMAIN NAME SYSTEM REQUIREMENTS SUMMARY ...........   84\n      6.2
    \ HOST INITIALIZATION ....................................   87\n         6.2.1
    \ INTRODUCTION ......................................   87\n         6.2.2  REQUIREMENTS
    ......................................   87\n            6.2.2.1  Dynamic Configuration
    ........................   87\n            6.2.2.2  Loading Phase ................................
    \  89\n      6.3  REMOTE MANAGEMENT ......................................   90\n
    \        6.3.1  INTRODUCTION ......................................   90\n         6.3.2
    \ PROTOCOL WALK-THROUGH .............................   90\n         6.3.3  MANAGEMENT
    REQUIREMENTS SUMMARY ...................   92\n   7.  REFERENCES .................................................
    \  93\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - 'RFC1123                       INTRODUCTION                  October 1989

    '
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "1.  INTRODUCTION\n   This document is one of a pair that defines and discusses
    the\n   requirements for host system implementations of the Internet protocol\n
    \  suite.  This RFC covers the applications layer and support protocols.\n   Its
    companion RFC, \"Requirements for Internet Hosts -- Communications\n   Layers\"
    [INTRO:1] covers the lower layer protocols: transport layer,\n   IP layer, and
    link layer.\n   These documents are intended to provide guidance for vendors,\n
    \  implementors, and users of Internet communication software.  They\n   represent
    the consensus of a large body of technical experience and\n   wisdom, contributed
    by members of the Internet research and vendor\n   communities.\n   This RFC enumerates
    standard protocols that a host connected to the\n   Internet must use, and it
    incorporates by reference the RFCs and\n   other documents describing the current
    specifications for these\n   protocols.  It corrects errors in the referenced
    documents and adds\n   additional discussion and guidance for an implementor.\n
    \  For each protocol, this document also contains an explicit set of\n   requirements,
    recommendations, and options.  The reader must\n   understand that the list of
    requirements in this document is\n   incomplete by itself; the complete set of
    requirements for an\n   Internet host is primarily defined in the standard protocol\n
    \  specification documents, with the corrections, amendments, and\n   supplements
    contained in this RFC.\n   A good-faith implementation of the protocols that was
    produced after\n   careful reading of the RFC's and with some interaction with
    the\n   Internet technical community, and that followed good communications\n
    \  software engineering practices, should differ from the requirements\n   of
    this document in only minor ways.  Thus, in many cases, the\n   \"requirements\"
    in this RFC are already stated or implied in the\n   standard protocol documents,
    so that their inclusion here is, in a\n   sense, redundant.  However, they were
    included because some past\n   implementation has made the wrong choice, causing
    problems of\n   interoperability, performance, and/or robustness.\n   This document
    includes discussion and explanation of many of the\n   requirements and recommendations.
    \ A simple list of requirements\n   would be dangerous, because:\n   o    Some
    required features are more important than others, and some\n        features are
    optional.\n   o    There may be valid reasons why particular vendor products that\n"
  title: 1.  INTRODUCTION
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n        are
    designed for restricted contexts might choose to use\n        different specifications.\n
    \  However, the specifications of this document must be followed to meet\n   the
    general goal of arbitrary host interoperation across the\n   diversity and complexity
    of the Internet system.  Although most\n   current implementations fail to meet
    these requirements in various\n   ways, some minor and some major, this specification
    is the ideal\n   towards which we need to move.\n   These requirements are based
    on the current level of Internet\n   architecture.  This document will be updated
    as required to provide\n   additional clarifications or to include additional
    information in\n   those areas in which specifications are still evolving.\n   This
    introductory section begins with general advice to host software\n   vendors,
    and then gives some guidance on reading the rest of the\n   document.  Section
    2 contains general requirements that may be\n   applicable to all application
    and support protocols.  Sections 3, 4,\n   and 5 contain the requirements on protocols
    for the three major\n   applications: Telnet, file transfer, and electronic mail,\n
    \  respectively. Section 6 covers the support applications: the domain\n   name
    system, system initialization, and management.  Finally, all\n   references will
    be found in Section 7.\n   1.1  The Internet Architecture\n      For a brief introduction
    to the Internet architecture from a host\n      viewpoint, see Section 1.1 of
    [INTRO:1].  That section also\n      contains recommended references for general
    background on the\n      Internet architecture.\n   1.2  General Considerations\n
    \     There are two important lessons that vendors of Internet host\n      software
    have learned and which a new vendor should consider\n      seriously.\n      1.2.1
    \ Continuing Internet Evolution\n         The enormous growth of the Internet
    has revealed problems of\n         management and scaling in a large datagram-based
    packet\n         communication system.  These problems are being addressed, and\n
    \        as a result there will be continuing evolution of the\n         specifications
    described in this document.  These changes will\n         be carefully planned
    and controlled, since there is extensive\n         participation in this planning
    by the vendors and by the\n         organizations responsible for operations of
    the networks.\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         Development,
    evolution, and revision are characteristic of\n         computer network protocols
    today, and this situation will\n         persist for some years.  A vendor who
    develops computer\n         communication software for the Internet protocol suite
    (or any\n         other protocol suite!) and then fails to maintain and update\n
    \        that software for changing specifications is going to leave a\n         trail
    of unhappy customers.  The Internet is a large\n         communication network,
    and the users are in constant contact\n         through it.  Experience has shown
    that knowledge of\n         deficiencies in vendor software propagates quickly
    through the\n         Internet technical community.\n      1.2.2  Robustness Principle\n
    \        At every layer of the protocols, there is a general rule whose\n         application
    can lead to enormous benefits in robustness and\n         interoperability:\n
    \               \"Be liberal in what you accept, and\n                 conservative
    in what you send\"\n         Software should be written to deal with every conceivable\n
    \        error, no matter how unlikely; sooner or later a packet will\n         come
    in with that particular combination of errors and\n         attributes, and unless
    the software is prepared, chaos can\n         ensue.  In general, it is best to
    assume that the network is\n         filled with malevolent entities that will
    send in packets\n         designed to have the worst possible effect.  This assumption\n
    \        will lead to suitable protective design, although the most\n         serious
    problems in the Internet have been caused by\n         unenvisaged mechanisms
    triggered by low-probability events;\n         mere human malice would never have
    taken so devious a course!\n         Adaptability to change must be designed into
    all levels of\n         Internet host software.  As a simple example, consider
    a\n         protocol specification that contains an enumeration of values\n         for
    a particular header field -- e.g., a type field, a port\n         number, or an
    error code; this enumeration must be assumed to\n         be incomplete.  Thus,
    if a protocol specification defines four\n         possible error codes, the software
    must not break when a fifth\n         code shows up.  An undefined code might
    be logged (see below),\n         but it must not cause a failure.\n         The
    second part of the principle is almost as important:\n         software on other
    hosts may contain deficiencies that make it\n         unwise to exploit legal
    but obscure protocol features.  It is\n         unwise to stray far from the obvious
    and simple, lest untoward\n         effects result elsewhere.  A corollary of
    this is \"watch out\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         for
    misbehaving hosts\"; host software should be prepared, not\n         just to survive
    other misbehaving hosts, but also to cooperate\n         to limit the amount of
    disruption such hosts can cause to the\n         shared communication facility.\n
    \     1.2.3  Error Logging\n         The Internet includes a great variety of
    host and gateway\n         systems, each implementing many protocols and protocol
    layers,\n         and some of these contain bugs and mis-features in their\n         Internet
    protocol software.  As a result of complexity,\n         diversity, and distribution
    of function, the diagnosis of user\n         problems is often very difficult.\n
    \        Problem diagnosis will be aided if host implementations include\n         a
    carefully designed facility for logging erroneous or\n         \"strange\" protocol
    events.  It is important to include as much\n         diagnostic information as
    possible when an error is logged.  In\n         particular, it is often useful
    to record the header(s) of a\n         packet that caused an error.  However,
    care must be taken to\n         ensure that error logging does not consume prohibitive
    amounts\n         of resources or otherwise interfere with the operation of the\n
    \        host.\n         There is a tendency for abnormal but harmless protocol
    events\n         to overflow error logging files; this can be avoided by using
    a\n         \"circular\" log, or by enabling logging only while diagnosing a\n
    \        known failure.  It may be useful to filter and count duplicate\n         successive
    messages.  One strategy that seems to work well is:\n         (1) always count
    abnormalities and make such counts accessible\n         through the management
    protocol (see Section 6.3); and (2)\n         allow the logging of a great variety
    of events to be\n         selectively enabled.  For example, it might useful to
    be able\n         to \"log everything\" or to \"log everything for host X\".\n
    \        Note that different managements may have differing policies\n         about
    the amount of error logging that they want normally\n         enabled in a host.
    \ Some will say, \"if it doesn't hurt me, I\n         don't want to know about
    it\", while others will want to take a\n         more watchful and aggressive
    attitude about detecting and\n         removing protocol abnormalities.\n      1.2.4
    \ Configuration\n         It would be ideal if a host implementation of the Internet\n
    \        protocol suite could be entirely self-configuring.  This would\n         allow
    the whole suite to be implemented in ROM or cast into\n         silicon, it would
    simplify diskless workstations, and it would\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         be
    an immense boon to harried LAN administrators as well as\n         system vendors.
    \ We have not reached this ideal; in fact, we\n         are not even close.\n
    \        At many points in this document, you will find a requirement\n         that
    a parameter be a configurable option.  There are several\n         different reasons
    behind such requirements.  In a few cases,\n         there is current uncertainty
    or disagreement about the best\n         value, and it may be necessary to update
    the recommended value\n         in the future.  In other cases, the value really
    depends on\n         external factors -- e.g., the size of the host and the\n
    \        distribution of its communication load, or the speeds and\n         topology
    of nearby networks -- and self-tuning algorithms are\n         unavailable and
    may be insufficient.  In some cases,\n         configurability is needed because
    of administrative\n         requirements.\n         Finally, some configuration
    options are required to communicate\n         with obsolete or incorrect implementations
    of the protocols,\n         distributed without sources, that unfortunately persist
    in many\n         parts of the Internet.  To make correct systems coexist with\n
    \        these faulty systems, administrators often have to \"mis-\n         configure\"
    the correct systems.  This problem will correct\n         itself gradually as
    the faulty systems are retired, but it\n         cannot be ignored by vendors.\n
    \        When we say that a parameter must be configurable, we do not\n         intend
    to require that its value be explicitly read from a\n         configuration file
    at every boot time.  We recommend that\n         implementors set up a default
    for each parameter, so a\n         configuration file is only necessary to override
    those defaults\n         that are inappropriate in a particular installation.
    \ Thus, the\n         configurability requirement is an assurance that it will
    be\n         POSSIBLE to override the default when necessary, even in a\n         binary-only
    or ROM-based product.\n         This document requires a particular value for
    such defaults in\n         some cases.  The choice of default is a sensitive issue
    when\n         the configuration item controls the accommodation to existing\n
    \        faulty systems.  If the Internet is to converge successfully to\n         complete
    interoperability, the default values built into\n         implementations must
    implement the official protocol, not\n         \"mis-configurations\" to accommodate
    faulty implementations.\n         Although marketing considerations have led some
    vendors to\n         choose mis-configuration defaults, we urge vendors to choose\n
    \        defaults that will conform to the standard.\n         Finally, we note
    that a vendor needs to provide adequate\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         documentation
    on all configuration parameters, their limits and\n         effects.\n   1.3  Reading
    this Document\n      1.3.1  Organization\n         In general, each major section
    is organized into the following\n         subsections:\n         (1)  Introduction\n
    \        (2)  Protocol Walk-Through -- considers the protocol\n              specification
    documents section-by-section, correcting\n              errors, stating requirements
    that may be ambiguous or\n              ill-defined, and providing further clarification
    or\n              explanation.\n         (3)  Specific Issues -- discusses protocol
    design and\n              implementation issues that were not included in the
    walk-\n              through.\n         (4)  Interfaces -- discusses the service
    interface to the next\n              higher layer.\n         (5)  Summary -- contains
    a summary of the requirements of the\n              section.\n         Under many
    of the individual topics in this document, there is\n         parenthetical material
    labeled \"DISCUSSION\" or\n         \"IMPLEMENTATION\".  This material is intended
    to give\n         clarification and explanation of the preceding requirements\n
    \        text.  It also includes some suggestions on possible future\n         directions
    or developments.  The implementation material\n         contains suggested approaches
    that an implementor may want to\n         consider.\n         The summary sections
    are intended to be guides and indexes to\n         the text, but are necessarily
    cryptic and incomplete.  The\n         summaries should never be used or referenced
    separately from\n         the complete RFC.\n      1.3.2  Requirements\n         In
    this document, the words that are used to define the\n         significance of
    each particular requirement are capitalized.\n         These words are:\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         *
    \   \"MUST\"\n              This word or the adjective \"REQUIRED\" means that
    the item\n              is an absolute requirement of the specification.\n         *
    \   \"SHOULD\"\n              This word or the adjective \"RECOMMENDED\" means
    that there\n              may exist valid reasons in particular circumstances
    to\n              ignore this item, but the full implications should be\n              understood
    and the case carefully weighed before choosing\n              a different course.\n
    \        *    \"MAY\"\n              This word or the adjective \"OPTIONAL\" means
    that this item\n              is truly optional.  One vendor may choose to include
    the\n              item because a particular marketplace requires it or\n              because
    it enhances the product, for example; another\n              vendor may omit the
    same item.\n         An implementation is not compliant if it fails to satisfy
    one\n         or more of the MUST requirements for the protocols it\n         implements.
    \ An implementation that satisfies all the MUST and\n         all the SHOULD requirements
    for its protocols is said to be\n         \"unconditionally compliant\"; one that
    satisfies all the MUST\n         requirements but not all the SHOULD requirements
    for its\n         protocols is said to be \"conditionally compliant\".\n      1.3.3
    \ Terminology\n         This document uses the following technical terms:\n         Segment\n
    \             A segment is the unit of end-to-end transmission in the\n              TCP
    protocol.  A segment consists of a TCP header followed\n              by application
    data.  A segment is transmitted by\n              encapsulation in an IP datagram.\n
    \        Message\n              This term is used by some application layer protocols\n
    \             (particularly SMTP) for an application data unit.\n         Datagram\n
    \             A [UDP] datagram is the unit of end-to-end transmission in\n              the
    UDP protocol.\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - "RFC1123                       INTRODUCTION                  October 1989\n         Multihomed\n
    \             A host is said to be multihomed if it has multiple IP\n              addresses
    to connected networks.\n   1.4  Acknowledgments\n      This document incorporates
    contributions and comments from a large\n      group of Internet protocol experts,
    including representatives of\n      university and research labs, vendors, and
    government agencies.\n      It was assembled primarily by the Host Requirements
    Working Group\n      of the Internet Engineering Task Force (IETF).\n      The
    Editor would especially like to acknowledge the tireless\n      dedication of
    the following people, who attended many long\n      meetings and generated 3 million
    bytes of electronic mail over the\n      past 18 months in pursuit of this document:
    Philip Almquist, Dave\n      Borman (Cray Research), Noel Chiappa, Dave Crocker
    (DEC), Steve\n      Deering (Stanford), Mike Karels (Berkeley), Phil Karn (Bellcore),\n
    \     John Lekashman (NASA), Charles Lynn (BBN), Keith McCloghrie (TWG),\n      Paul
    Mockapetris (ISI), Thomas Narten (Purdue), Craig Partridge\n      (BBN), Drew
    Perkins (CMU), and James Van Bokkelen (FTP Software).\n      In addition, the
    following people made major contributions to the\n      effort: Bill Barns (Mitre),
    Steve Bellovin (AT&T), Mike Brescia\n      (BBN), Ed Cain (DCA), Annette DeSchon
    (ISI), Martin Gross (DCA),\n      Phill Gross (NRI), Charles Hedrick (Rutgers),
    Van Jacobson (LBL),\n      John Klensin (MIT), Mark Lottor (SRI), Milo Medin (NASA),
    Bill\n      Melohn (Sun Microsystems), Greg Minshall (Kinetics), Jeff Mogul\n
    \     (DEC), John Mullen (CMC), Jon Postel (ISI), John Romkey (Epilogue\n      Technology),
    and Mike StJohns (DCA).  The following also made\n      significant contributions
    to particular areas: Eric Allman\n      (Berkeley), Rob Austein (MIT), Art Berggreen
    (ACC), Keith Bostic\n      (Berkeley), Vint Cerf (NRI), Wayne Hathaway (NASA),
    Matt Korn\n      (IBM), Erik Naggum (Naggum Software, Norway), Robert Ullmann\n
    \     (Prime Computer), David Waitzman (BBN), Frank Wancho (USA), Arun\n      Welch
    (Ohio State), Bill Westfield (Cisco), and Rayan Zachariassen\n      (Toronto).\n
    \     We are grateful to all, including any contributors who may have\n      been
    inadvertently omitted from this list.\n"
  title: RFC1123                       INTRODUCTION                  October 1989
- contents:
  - 'RFC1123              APPLICATIONS LAYER -- GENERAL          October 1989

    '
  title: RFC1123              APPLICATIONS LAYER -- GENERAL          October 1989
- contents:
  - "2.  GENERAL ISSUES\n   This section contains general requirements that may be
    applicable to\n   all application-layer protocols.\n   2.1  Host Names and Numbers\n
    \     The syntax of a legal Internet host name was specified in RFC-952\n      [DNS:4].
    \ One aspect of host name syntax is hereby changed: the\n      restriction on
    the first character is relaxed to allow either a\n      letter or a digit.  Host
    software MUST support this more liberal\n      syntax.\n      Host software MUST
    handle host names of up to 63 characters and\n      SHOULD handle host names of
    up to 255 characters.\n      Whenever a user inputs the identity of an Internet
    host, it SHOULD\n      be possible to enter either (1) a host domain name or (2)
    an IP\n      address in dotted-decimal (\"#.#.#.#\") form.  The host SHOULD check\n
    \     the string syntactically for a dotted-decimal number before\n      looking
    it up in the Domain Name System.\n      DISCUSSION:\n           This last requirement
    is not intended to specify the complete\n           syntactic form for entering
    a dotted-decimal host number;\n           that is considered to be a user-interface
    issue.  For\n           example, a dotted-decimal number must be enclosed within\n
    \          \"[ ]\" brackets for SMTP mail (see Section 5.2.17).  This\n           notation
    could be made universal within a host system,\n           simplifying the syntactic
    checking for a dotted-decimal\n           number.\n           If a dotted-decimal
    number can be entered without such\n           identifying delimiters, then a
    full syntactic check must be\n           made, because a segment of a host domain
    name is now allowed\n           to begin with a digit and could legally be entirely
    numeric\n           (see Section 6.1.2.4).  However, a valid host name can never\n
    \          have the dotted-decimal form #.#.#.#, since at least the\n           highest-level
    component label will be alphabetic.\n   2.2  Using Domain Name Service\n      Host
    domain names MUST be translated to IP addresses as described\n      in Section
    6.1.\n      Applications using domain name services MUST be able to cope with\n
    \     soft error conditions.  Applications MUST wait a reasonable\n      interval
    between successive retries due to a soft error, and MUST\n"
  title: 2.  GENERAL ISSUES
- contents:
  - "RFC1123              APPLICATIONS LAYER -- GENERAL          October 1989\n      allow
    for the possibility that network problems may deny service\n      for hours or
    even days.\n      An application SHOULD NOT rely on the ability to locate a WKS\n
    \     record containing an accurate listing of all services at a\n      particular
    host address, since the WKS RR type is not often used\n      by Internet sites.
    \ To confirm that a service is present, simply\n      attempt to use it.\n   2.3
    \ Applications on Multihomed hosts\n      When the remote host is multihomed,
    the name-to-address\n      translation will return a list of alternative IP addresses.
    \ As\n      specified in Section 6.1.3.4, this list should be in order of\n      decreasing
    preference.  Application protocol implementations\n      SHOULD be prepared to
    try multiple addresses from the list until\n      success is obtained.  More specific
    requirements for SMTP are\n      given in Section 5.3.4.\n      When the local
    host is multihomed, a UDP-based request/response\n      application SHOULD send
    the response with an IP source address\n      that is the same as the specific
    destination address of the UDP\n      request datagram.  The \"specific destination
    address\" is defined\n      in the \"IP Addressing\" section of the companion
    RFC [INTRO:1].\n      Similarly, a server application that opens multiple TCP\n
    \     connections to the same client SHOULD use the same local IP\n      address
    for all.\n   2.4  Type-of-Service\n      Applications MUST select appropriate
    TOS values when they invoke\n      transport layer services, and these values
    MUST be configurable.\n      Note that a TOS value contains 5 bits, of which only
    the most-\n      significant 3 bits are currently defined; the other two bits
    MUST\n      be zero.\n      DISCUSSION:\n           As gateway algorithms are
    developed to implement Type-of-\n           Service, the recommended values for
    various application\n           protocols may change.  In addition, it is likely
    that\n           particular combinations of users and Internet paths will want\n
    \          non-standard TOS values.  For these reasons, the TOS values\n           must
    be configurable.\n           See the latest version of the \"Assigned Numbers\"
    RFC\n           [INTRO:5] for the recommended TOS values for the major\n           application
    protocols.\n"
  title: RFC1123              APPLICATIONS LAYER -- GENERAL          October 1989
- contents:
  - "RFC1123              APPLICATIONS LAYER -- GENERAL          October 1989\n   2.5
    \ GENERAL APPLICATION REQUIREMENTS SUMMARY\n                                               |
    \         | | | |S| |\n                                               |          |
    | | |H| |F\n                                               |          | | | |O|M|o\n
    \                                              |          | |S| |U|U|o\n                                               |
    \         | |H| |L|S|t\n                                               |          |M|O|
    |D|T|n\n                                               |          |U|U|M| | |o\n
    \                                              |          |S|L|A|N|N|t\n                                               |
    \         |T|D|Y|O|O|t\n"
  title: RFC1123              APPLICATIONS LAYER -- GENERAL          October 1989
- contents:
  - 'FEATURE                                        |SECTION   | | | |T|T|e

    '
  title: FEATURE                                        |SECTION   | | | |T|T|e
- contents:
  - "-----------------------------------------------|----------|-|-|-|-|-|--\n                                               |
    \         | | | | | |\n"
  title: '-----------------------------------------------|----------|-|-|-|-|-|--'
- contents:
  - "User interfaces:                               |          | | | | | |\n  Allow
    host name to begin with digit          |2.1       |x| | | | |\n  Host names of
    up to 635 characters           |2.1       |x| | | | |\n  Host names of up to 255
    characters           |2.1       | |x| | | |\n  Support dotted-decimal host numbers
    \         |2.1       | |x| | | |\n  Check syntactically for dotted-dec first     |2.1
    \      | |x| | | |\n                                               |          |
    | | | | |\n"
  title: 'User interfaces:                               |          | | | | | |'
- contents:
  - 'Map domain names per Section 6.1               |2.2       |x| | | | |

    '
  title: Map domain names per Section 6.1               |2.2       |x| | | | |
- contents:
  - "Cope with soft DNS errors                      |2.2       |x| | | | |\n   Reasonable
    interval between retries         |2.2       |x| | | | |\n   Allow for long outages
    \                     |2.2       |x| | | | |\n"
  title: Cope with soft DNS errors                      |2.2       |x| | | | |
- contents:
  - "Expect WKS records to be available             |2.2       | | | |x| |\n                                               |
    \         | | | | | |\n"
  title: Expect WKS records to be available             |2.2       | | | |x| |
- contents:
  - 'Try multiple addr''s for remote multihomed host |2.3       | |x| | | |

    '
  title: Try multiple addr's for remote multihomed host |2.3       | |x| | | |
- contents:
  - 'UDP reply src addr is specific dest of request |2.3       | |x| | | |

    '
  title: UDP reply src addr is specific dest of request |2.3       | |x| | | |
- contents:
  - 'Use same IP addr for related TCP connections   |2.3       | |x| | | |

    '
  title: Use same IP addr for related TCP connections   |2.3       | |x| | | |
- contents:
  - "Specify appropriate TOS values                 |2.4       |x| | | | |\n  TOS
    values configurable                      |2.4       |x| | | | |\n  Unused TOS
    bits zero                         |2.4       |x| | | | |\n                                               |
    \         | | | | | |\n                                               |          |
    | | | | |\n"
  title: Specify appropriate TOS values                 |2.4       |x| | | | |
- contents:
  - 'RFC1123                  REMOTE LOGIN -- TELNET             October 1989

    '
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "3.  REMOTE LOGIN -- TELNET PROTOCOL\n   3.1  INTRODUCTION\n      Telnet is the
    standard Internet application protocol for remote\n      login.  It provides the
    encoding rules to link a user's\n      keyboard/display on a client (\"user\")
    system with a command\n      interpreter on a remote server system.  A subset
    of the Telnet\n      protocol is also incorporated within other application protocols,\n
    \     e.g., FTP and SMTP.\n      Telnet uses a single TCP connection, and its
    normal data stream\n      (\"Network Virtual Terminal\" or \"NVT\" mode) is 7-bit
    ASCII with\n      escape sequences to embed control functions.  Telnet also allows\n
    \     the negotiation of many optional modes and functions.\n      The primary
    Telnet specification is to be found in RFC-854\n      [TELNET:1], while the options
    are defined in many other RFCs; see\n      Section 7 for references.\n   3.2  PROTOCOL
    WALK-THROUGH\n      3.2.1  Option Negotiation: RFC-854, pp. 2-3\n         Every
    Telnet implementation MUST include option negotiation and\n         subnegotiation
    machinery [TELNET:2].\n         A host MUST carefully follow the rules of RFC-854
    to avoid\n         option-negotiation loops.  A host MUST refuse (i.e, reply\n
    \        WONT/DONT to a DO/WILL) an unsupported option.  Option\n         negotiation
    SHOULD continue to function (even if all requests\n         are refused) throughout
    the lifetime of a Telnet connection.\n         If all option negotiations fail,
    a Telnet implementation MUST\n         default to, and support, an NVT.\n         DISCUSSION:\n
    \             Even though more sophisticated \"terminals\" and supporting\n              option
    negotiations are becoming the norm, all\n              implementations must be
    prepared to support an NVT for any\n              user-server communication.\n
    \     3.2.2  Telnet Go-Ahead Function: RFC-854, p. 5, and RFC-858\n         On
    a host that never sends the Telnet command Go Ahead (GA),\n         the Telnet
    Server MUST attempt to negotiate the Suppress Go\n         Ahead option (i.e.,
    send \"WILL Suppress Go Ahead\").  A User or\n         Server Telnet MUST always
    accept negotiation of the Suppress Go\n"
  title: 3.  REMOTE LOGIN -- TELNET PROTOCOL
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n         Ahead
    option.\n         When it is driving a full-duplex terminal for which GA has no\n
    \        meaning, a User Telnet implementation MAY ignore GA commands.\n         DISCUSSION:\n
    \             Half-duplex (\"locked-keyboard\") line-at-a-time terminals\n              for
    which the Go-Ahead mechanism was designed have largely\n              disappeared
    from the scene.  It turned out to be difficult\n              to implement sending
    the Go-Ahead signal in many operating\n              systems, even some systems
    that support native half-duplex\n              terminals.  The difficulty is typically
    that the Telnet\n              server code does not have access to information
    about\n              whether the user process is blocked awaiting input from\n
    \             the Telnet connection, i.e., it cannot reliably determine\n              when
    to send a GA command.  Therefore, most Telnet Server\n              hosts do not
    send GA commands.\n              The effect of the rules in this section is to
    allow either\n              end of a Telnet connection to veto the use of GA commands.\n
    \             There is a class of half-duplex terminals that is still\n              commercially
    important: \"data entry terminals,\" which\n              interact in a full-screen
    manner.  However, supporting\n              data entry terminals using the Telnet
    protocol does not\n              require the Go Ahead signal; see Section 3.3.2.\n
    \     3.2.3  Control Functions: RFC-854, pp. 7-8\n         The list of Telnet
    commands has been extended to include EOR\n         (End-of-Record), with code
    239 [TELNET:9].\n         Both User and Server Telnets MAY support the control
    functions\n         EOR, EC, EL, and Break, and MUST support AO, AYT, DM, IP,
    NOP,\n         SB, and SE.\n         A host MUST be able to receive and ignore
    any Telnet control\n         functions that it does not support.\n         DISCUSSION:\n
    \             Note that a Server Telnet is required to support the\n              Telnet
    IP (Interrupt Process) function, even if the server\n              host has an
    equivalent in-stream function (e.g., Control-C\n              in many systems).
    \ The Telnet IP function may be stronger\n              than an in-stream interrupt
    command, because of the out-\n              of-band effect of TCP urgent data.\n
    \             The EOR control function may be used to delimit the\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n              stream.
    \ An important application is data entry terminal\n              support (see
    Section 3.3.2).  There was concern that since\n              EOR had not been
    defined in RFC-854, a host that was not\n              prepared to correctly ignore
    unknown Telnet commands might\n              crash if it received an EOR.  To
    protect such hosts, the\n              End-of-Record option [TELNET:9] was introduced;
    however, a\n              properly implemented Telnet program will not require
    this\n              protection.\n      3.2.4  Telnet \"Synch\" Signal: RFC-854,
    pp. 8-10\n         When it receives \"urgent\" TCP data, a User or Server Telnet\n
    \        MUST discard all data except Telnet commands until the DM (and\n         end
    of urgent) is reached.\n         When it sends Telnet IP (Interrupt Process),
    a User Telnet\n         SHOULD follow it by the Telnet \"Synch\" sequence, i.e.,
    send as\n         TCP urgent data the sequence \"IAC IP IAC DM\".  The TCP urgent\n
    \        pointer points to the DM octet.\n         When it receives a Telnet IP
    command, a Server Telnet MAY send\n         a Telnet \"Synch\" sequence back to
    the user, to flush the output\n         stream.  The choice ought to be consistent
    with the way the\n         server operating system behaves when a local user interrupts
    a\n         process.\n         When it receives a Telnet AO command, a Server
    Telnet MUST send\n         a Telnet \"Synch\" sequence back to the user, to flush
    the output\n         stream.\n         A User Telnet SHOULD have the capability
    of flushing output\n         when it sends a Telnet IP; see also Section 3.4.5.\n
    \        DISCUSSION:\n              There are three possible ways for a User Telnet
    to flush\n              the stream of server output data:\n              (1)  Send
    AO after IP.\n                   This will cause the server host to send a \"flush-\n
    \                  buffered-output\" signal to its operating system.\n                   However,
    the AO may not take effect locally, i.e.,\n                   stop terminal output
    at the User Telnet end, until\n                   the Server Telnet has received
    and processed the AO\n                   and has sent back a \"Synch\".\n              (2)
    \ Send DO TIMING-MARK [TELNET:7] after IP, and discard\n                   all
    output locally until a WILL/WONT TIMING-MARK is\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n                   received
    from the Server Telnet.\n                   Since the DO TIMING-MARK will be processed
    after the\n                   IP at the server, the reply to it should be in the\n
    \                  right place in the output data stream.  However, the\n                   TIMING-MARK
    will not send a \"flush buffered output\"\n                   signal to the server
    operating system.  Whether or\n                   not this is needed is dependent
    upon the server\n                   system.\n              (3)  Do both.\n              The
    best method is not entirely clear, since it must\n              accommodate a
    number of existing server hosts that do not\n              follow the Telnet standards
    in various ways.  The safest\n              approach is probably to provide a
    user-controllable option\n              to select (1), (2), or (3).\n      3.2.5
    \ NVT Printer and Keyboard: RFC-854, p. 11\n         In NVT mode, a Telnet SHOULD
    NOT send characters with the\n         high-order bit 1, and MUST NOT send it
    as a parity bit.\n         Implementations that pass the high-order bit to applications\n
    \        SHOULD negotiate binary mode (see Section 3.2.6).\n         DISCUSSION:\n
    \             Implementors should be aware that a strict reading of\n              RFC-854
    allows a client or server expecting NVT ASCII to\n              ignore characters
    with the high-order bit set.  In\n              general, binary mode is expected
    to be used for\n              transmission of an extended (beyond 7-bit) character
    set\n              with Telnet.\n              However, there exist applications
    that really need an 8-\n              bit NVT mode, which is currently not defined,
    and these\n              existing applications do set the high-order bit during\n
    \             part or all of the life of a Telnet connection.  Note that\n              binary
    mode is not the same as 8-bit NVT mode, since\n              binary mode turns
    off end-of-line processing.  For this\n              reason, the requirements
    on the high-order bit are stated\n              as SHOULD, not MUST.\n              RFC-854
    defines a minimal set of properties of a \"network\n              virtual terminal\"
    or NVT; this is not meant to preclude\n              additional features in a
    real terminal.  A Telnet\n              connection is fully transparent to all
    7-bit ASCII\n              characters, including arbitrary ASCII control characters.\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n              For
    example, a terminal might support full-screen commands\n              coded as
    ASCII escape sequences; a Telnet implementation\n              would pass these
    sequences as uninterpreted data.  Thus,\n              an NVT should not be conceived
    as a terminal type of a\n              highly-restricted device.\n      3.2.6
    \ Telnet Command Structure: RFC-854, p. 13\n         Since options may appear
    at any point in the data stream, a\n         Telnet escape character (known as
    IAC, with the value 255) to\n         be sent as data MUST be doubled.\n      3.2.7
    \ Telnet Binary Option: RFC-856\n         When the Binary option has been successfully
    negotiated,\n         arbitrary 8-bit characters are allowed.  However, the data\n
    \        stream MUST still be scanned for IAC characters, any embedded\n         Telnet
    commands MUST be obeyed, and data bytes equal to IAC\n         MUST be doubled.
    \ Other character processing (e.g., replacing\n         CR by CR NUL or by CR
    LF) MUST NOT be done.  In particular,\n         there is no end-of-line convention
    (see Section 3.3.1) in\n         binary mode.\n         DISCUSSION:\n              The
    Binary option is normally negotiated in both\n              directions, to change
    the Telnet connection from NVT mode\n              to \"binary mode\".\n              The
    sequence IAC EOR can be used to delimit blocks of data\n              within a
    binary-mode Telnet stream.\n      3.2.8  Telnet Terminal-Type Option: RFC-1091\n
    \        The Terminal-Type option MUST use the terminal type names\n         officially
    defined in the Assigned Numbers RFC [INTRO:5], when\n         they are available
    for the particular terminal.  However, the\n         receiver of a Terminal-Type
    option MUST accept any name.\n         DISCUSSION:\n              RFC-1091 [TELNET:10]
    updates an earlier version of the\n              Terminal-Type option defined
    in RFC-930.  The earlier\n              version allowed a server host capable
    of supporting\n              multiple terminal types to learn the type of a particular\n
    \             client's terminal, assuming that each physical terminal\n              had
    an intrinsic type.  However, today a \"terminal\" is\n              often really
    a terminal emulator program running in a PC,\n              perhaps capable of
    emulating a range of terminal types.\n              Therefore, RFC-1091 extends
    the specification to allow a\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n              more
    general terminal-type negotiation between User and\n              Server Telnets.\n
    \  3.3  SPECIFIC ISSUES\n      3.3.1  Telnet End-of-Line Convention\n         The
    Telnet protocol defines the sequence CR LF to mean \"end-\n         of-line\".
    \ For terminal input, this corresponds to a command-\n         completion or \"end-of-line\"
    key being pressed on a user\n         terminal; on an ASCII terminal, this is
    the CR key, but it may\n         also be labelled \"Return\" or \"Enter\".\n         When
    a Server Telnet receives the Telnet end-of-line sequence\n         CR LF as input
    from a remote terminal, the effect MUST be the\n         same as if the user had
    pressed the \"end-of-line\" key on a\n         local terminal.  On server hosts
    that use ASCII, in particular,\n         receipt of the Telnet sequence CR LF
    must cause the same effect\n         as a local user pressing the CR key on a
    local terminal.  Thus,\n         CR LF and CR NUL MUST have the same effect on
    an ASCII server\n         host when received as input over a Telnet connection.\n
    \        A User Telnet MUST be able to send any of the forms: CR LF, CR\n         NUL,
    and LF.  A User Telnet on an ASCII host SHOULD have a\n         user-controllable
    mode to send either CR LF or CR NUL when the\n         user presses the \"end-of-line\"
    key, and CR LF SHOULD be the\n         default.\n         The Telnet end-of-line
    sequence CR LF MUST be used to send\n         Telnet data that is not terminal-to-computer
    (e.g., for Server\n         Telnet sending output, or the Telnet protocol incorporated\n
    \        another application protocol).\n         DISCUSSION:\n              To
    allow interoperability between arbitrary Telnet clients\n              and servers,
    the Telnet protocol defined a standard\n              representation for a line
    terminator.  Since the ASCII\n              character set includes no explicit
    end-of-line character,\n              systems have chosen various representations,
    e.g., CR, LF,\n              and the sequence CR LF.  The Telnet protocol chose
    the CR\n              LF sequence as the standard for network transmission.\n
    \             Unfortunately, the Telnet protocol specification in RFC-\n              854
    [TELNET:1] has turned out to be somewhat ambiguous on\n              what character(s)
    should be sent from client to server for\n              the \"end-of-line\" key.
    \ The result has been a massive and\n              continuing interoperability
    headache, made worse by\n              various faulty implementations of both
    User and Server\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n              Telnets.\n
    \             Although the Telnet protocol is based on a perfectly\n              symmetric
    model, in a remote login session the role of the\n              user at a terminal
    differs from the role of the server\n              host.  For example, RFC-854
    defines the meaning of CR, LF,\n              and CR LF as output from the server,
    but does not specify\n              what the User Telnet should send when the
    user presses the\n              \"end-of-line\" key on the terminal; this turns
    out to be\n              the point at issue.\n              When a user presses
    the \"end-of-line\" key, some User\n              Telnet implementations send
    CR LF, while others send CR\n              NUL (based on a different interpretation
    of the same\n              sentence in RFC-854).  These will be equivalent for
    a\n              correctly-implemented ASCII server host, as discussed\n              above.
    \ For other servers, a mode in the User Telnet is\n              needed.\n              The
    existence of User Telnets that send only CR NUL when\n              CR is pressed
    creates a dilemma for non-ASCII hosts: they\n              can either treat CR
    NUL as equivalent to CR LF in input,\n              thus precluding the possibility
    of entering a \"bare\" CR,\n              or else lose complete interworking.\n
    \             Suppose a user on host A uses Telnet to log into a server\n              host
    B, and then execute B's User Telnet program to log\n              into server
    host C.  It is desirable for the Server/User\n              Telnet combination
    on B to be as transparent as possible,\n              i.e., to appear as if A
    were connected directly to C.  In\n              particular, correct implementation
    will make B transparent\n              to Telnet end-of-line sequences, except
    that CR LF may be\n              translated to CR NUL or vice versa.\n         IMPLEMENTATION:\n
    \             To understand Telnet end-of-line issues, one must have at\n              least
    a general model of the relationship of Telnet to the\n              local operating
    system.  The Server Telnet process is\n              typically coupled into the
    terminal driver software of the\n              operating system as a pseudo-terminal.
    \ A Telnet end-of-\n              line sequence received by the Server Telnet
    must have the\n              same effect as pressing the end-of-line key on a
    real\n              locally-connected terminal.\n              Operating systems
    that support interactive character-at-\n              a-time applications (e.g.,
    editors) typically have two\n              internal modes for their terminal I/O:
    a formatted mode,\n              in which local conventions for end-of-line and
    other\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n              formatting
    rules have been applied to the data stream, and\n              a \"raw\" mode,
    in which the application has direct access\n              to every character as
    it was entered.  A Server Telnet\n              must be implemented in such a
    way that these modes have\n              the same effect for remote as for local
    terminals.  For\n              example, suppose a CR LF or CR NUL is received
    by the\n              Server Telnet on an ASCII host.  In raw mode, a CR\n              character
    is passed to the application; in formatted mode,\n              the local system's
    end-of-line convention is used.\n      3.3.2  Data Entry Terminals\n         DISCUSSION:\n
    \             In addition to the line-oriented and character-oriented\n              ASCII
    terminals for which Telnet was designed, there are\n              several families
    of video display terminals that are\n              sometimes known as \"data entry
    terminals\" or DETs.  The\n              IBM 3270 family is a well-known example.\n
    \             Two Internet protocols have been designed to support\n              generic
    DETs: SUPDUP [TELNET:16, TELNET:17], and the DET\n              option [TELNET:18,
    TELNET:19].  The DET option drives a\n              data entry terminal over a
    Telnet connection using (sub-)\n              negotiation.  SUPDUP is a completely
    separate terminal\n              protocol, which can be entered from Telnet by
    negotiation.\n              Although both SUPDUP and the DET option have been
    used\n              successfully in particular environments, neither has\n              gained
    general acceptance or wide implementation.\n              A different approach
    to DET interaction has been developed\n              for supporting the IBM 3270
    family through Telnet,\n              although the same approach would be applicable
    to any DET.\n              The idea is to enter a \"native DET\" mode, in which
    the\n              native DET input/output stream is sent as binary data.\n              The
    Telnet EOR command is used to delimit logical records\n              (e.g., \"screens\")
    within this binary stream.\n         IMPLEMENTATION:\n              The rules
    for entering and leaving native DET mode are as\n              follows:\n              o
    \   The Server uses the Terminal-Type option [TELNET:10]\n                   to
    learn that the client is a DET.\n              o    It is conventional, but not
    required, that both ends\n                   negotiate the EOR option [TELNET:9].\n
    \             o    Both ends negotiate the Binary option [TELNET:3] to\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n                   enter
    native DET mode.\n              o    When either end negotiates out of binary
    mode, the\n                   other end does too, and the mode then reverts to\n
    \                  normal NVT.\n      3.3.3  Option Requirements\n         Every
    Telnet implementation MUST support the Binary option\n         [TELNET:3] and
    the Suppress Go Ahead option [TELNET:5], and\n         SHOULD support the Echo
    [TELNET:4], Status [TELNET:6], End-of-\n         Record [TELNET:9], and Extended
    Options List [TELNET:8]\n         options.\n         A User or Server Telnet SHOULD
    support the Window Size Option\n         [TELNET:12] if the local operating system
    provides the\n         corresponding capability.\n         DISCUSSION:\n              Note
    that the End-of-Record option only signifies that a\n              Telnet can
    receive a Telnet EOR without crashing;\n              therefore, every Telnet
    ought to be willing to accept\n              negotiation of the End-of-Record
    option.  See also the\n              discussion in Section 3.2.3.\n      3.3.4
    \ Option Initiation\n         When the Telnet protocol is used in a client/server
    situation,\n         the server SHOULD initiate negotiation of the terminal\n
    \        interaction mode it expects.\n         DISCUSSION:\n              The
    Telnet protocol was defined to be perfectly\n              symmetrical, but its
    application is generally asymmetric.\n              Remote login has been known
    to fail because NEITHER side\n              initiated negotiation of the required
    non-default terminal\n              modes.  It is generally the server that determines
    the\n              preferred mode, so the server needs to initiate the\n              negotiation;
    since the negotiation is symmetric, the user\n              can also initiate
    it.\n         A client (User Telnet) SHOULD provide a means for users to\n         enable
    and disable the initiation of option negotiation.\n         DISCUSSION:\n              A
    user sometimes needs to connect to an application\n              service (e.g.,
    FTP or SMTP) that uses Telnet for its\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n              control
    stream but does not support Telnet options.  User\n              Telnet may be
    used for this purpose if initiation of\n              option negotiation is  disabled.\n
    \     3.3.5  Telnet Linemode Option\n         DISCUSSION:\n              An important
    new Telnet option, LINEMODE [TELNET:12], has\n              been proposed.  The
    LINEMODE option provides a standard\n              way for a User Telnet and a
    Server Telnet to agree that\n              the client rather than the server will
    perform terminal\n              character processing.  When the client has prepared
    a\n              complete line of text, it will send it to the server in\n              (usually)
    one TCP packet.  This option will greatly\n              decrease the packet cost
    of Telnet sessions and will also\n              give much better user response
    over congested or long-\n              delay networks.\n              The LINEMODE
    option allows dynamic switching between local\n              and remote character
    processing.  For example, the Telnet\n              connection will automatically
    negotiate into single-\n              character mode while a full screen editor
    is running, and\n              then return to linemode when the editor is finished.\n
    \             We expect that when this RFC is released, hosts should\n              implement
    the client side of this option, and may\n              implement the server side
    of this option.  To properly\n              implement the server side, the server
    needs to be able to\n              tell the local system not to do any input character\n
    \             processing, but to remember its current terminal state and\n              notify
    the Server Telnet process whenever the state\n              changes.  This will
    allow password echoing and full screen\n              editors to be handled properly,
    for example.\n   3.4  TELNET/USER INTERFACE\n      3.4.1  Character Set Transparency\n
    \        User Telnet implementations SHOULD be able to send or receive\n         any
    7-bit ASCII character.  Where possible, any special\n         character interpretations
    by the user host's operating system\n         SHOULD be bypassed so that these
    characters can conveniently be\n         sent and received on the connection.\n
    \        Some character value MUST be reserved as \"escape to command\n         mode\";
    conventionally, doubling this character allows it to be\n         entered as data.
    \ The specific character used SHOULD be user\n         selectable.\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n         On
    binary-mode connections, a User Telnet program MAY provide\n         an escape
    mechanism for entering arbitrary 8-bit values, if the\n         host operating
    system doesn't allow them to be entered directly\n         from the keyboard.\n
    \        IMPLEMENTATION:\n              The transparency issues are less pressing
    on servers, but\n              implementors should take care in dealing with issues
    like:\n              masking off parity bits (sent by an older, non-conforming\n
    \             client) before they reach programs that expect only NVT\n              ASCII,
    and properly handling programs that request 8-bit\n              data streams.\n
    \     3.4.2  Telnet Commands\n         A User Telnet program MUST provide a user
    the capability of\n         entering any of the Telnet control functions IP, AO,
    or AYT,\n         and SHOULD provide the capability of entering EC, EL, and\n
    \        Break.\n      3.4.3  TCP Connection Errors\n         A User Telnet program
    SHOULD report to the user any TCP errors\n         that are reported by the transport
    layer (see \"TCP/Application\n         Layer Interface\" section in [INTRO:1]).\n
    \     3.4.4  Non-Default Telnet Contact Port\n         A User Telnet program SHOULD
    allow the user to optionally\n         specify a non-standard contact port number
    at the Server Telnet\n         host.\n      3.4.5  Flushing Output\n         A
    User Telnet program SHOULD provide the user the ability to\n         specify whether
    or not output should be flushed when an IP is\n         sent; see Section 3.2.4.\n
    \        For any output flushing scheme that causes the User Telnet to\n         flush
    output locally until a Telnet signal is received from the\n         Server, there
    SHOULD be a way for the user to manually restore\n         normal output, in case
    the Server fails to send the expected\n         signal.\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n   3.5.
    \ TELNET REQUIREMENTS SUMMARY\n                                                 |
    \       | | | |S| |\n                                                 |        |
    | | |H| |F\n                                                 |        | | | |O|M|o\n
    \                                                |        | |S| |U|U|o\n                                                 |
    \       | |H| |L|S|t\n                                                 |        |M|O|
    |D|T|n\n                                                 |        |U|U|M| | |o\n
    \                                                |        |S|L|A|N|N|t\n                                                 |
    \       |T|D|Y|O|O|t\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - 'FEATURE                                          |SECTION | | | |T|T|e

    '
  title: FEATURE                                          |SECTION | | | |T|T|e
- contents:
  - "-------------------------------------------------|--------|-|-|-|-|-|--\n                                                 |
    \       | | | | | |\n"
  title: '-------------------------------------------------|--------|-|-|-|-|-|--'
- contents:
  - "Option Negotiation                               |3.2.1   |x| | | | |\n  Avoid
    negotiation loops                        |3.2.1   |x| | | | |\n  Refuse unsupported
    options                     |3.2.1   |x| | | | |\n  Negotiation OK anytime on
    connection           |3.2.1   | |x| | | |\n  Default to NVT                                 |3.2.1
    \  |x| | | | |\n  Send official name in Term-Type option         |3.2.8   |x|
    | | | |\n  Accept any name in Term-Type option            |3.2.8   |x| | | | |\n
    \ Implement Binary, Suppress-GA options          |3.3.3   |x| | | | |\n  Echo,
    Status, EOL, Ext-Opt-List options        |3.3.3   | |x| | | |\n  Implement Window-Size
    option if appropriate    |3.3.3   | |x| | | |\n  Server initiate mode negotiations
    \             |3.3.4   | |x| | | |\n  User can enable/disable init negotiations
    \     |3.3.4   | |x| | | |\n                                                 |
    \       | | | | | |\n"
  title: Option Negotiation                               |3.2.1   |x| | | | |
- contents:
  - "Go-Aheads                                        |        | | | | | |\n  Non-GA
    server negotiate SUPPRESS-GA option     |3.2.2   |x| | | | |\n  User or Server
    accept SUPPRESS-GA option       |3.2.2   |x| | | | |\n  User Telnet ignore GA's
    \                       |3.2.2   | | |x| | |\n                                                 |
    \       | | | | | |\n"
  title: Go-Aheads                                        |        | | | | | |
- contents:
  - "Control Functions                                |        | | | | | |\n  Support
    SE NOP DM IP AO AYT SB                 |3.2.3   |x| | | | |\n  Support EOR EC
    EL Break                        |3.2.3   | | |x| | |\n  Ignore unsupported control
    functions           |3.2.3   |x| | | | |\n  User, Server discard urgent data up
    to DM      |3.2.4   |x| | | | |\n  User Telnet send \"Synch\" after IP, AO, AYT
    \    |3.2.4   | |x| | | |\n  Server Telnet reply Synch to IP                |3.2.4
    \  | | |x| | |\n  Server Telnet reply Synch to AO                |3.2.4   |x|
    | | | |\n  User Telnet can flush output when send IP      |3.2.4   | |x| | | |\n
    \                                                |        | | | | | |\n"
  title: Control Functions                                |        | | | | | |
- contents:
  - "Encoding                                         |        | | | | | |\n  Send
    high-order bit in NVT mode                |3.2.5   | | | |x| |\n  Send high-order
    bit as parity bit              |3.2.5   | | | | |x|\n  Negot. BINARY if pass high-ord.
    bit to applic  |3.2.5   | |x| | | |\n  Always double IAC data byte                    |3.2.6
    \  |x| | | | |\n"
  title: Encoding                                         |        | | | | | |
- contents:
  - "RFC1123                  REMOTE LOGIN -- TELNET             October 1989\n  Double
    IAC data byte in binary mode            |3.2.7   |x| | | | |\n  Obey Telnet cmds
    in binary mode                |3.2.7   |x| | | | |\n  End-of-line, CR NUL in binary
    mode             |3.2.7   | | | | |x|\n                                                 |
    \       | | | | | |\n"
  title: RFC1123                  REMOTE LOGIN -- TELNET             October 1989
- contents:
  - "End-of-Line                                      |        | | | | | |\n  EOL
    at Server same as local end-of-line        |3.3.1   |x| | | | |\n  ASCII Server
    accept CR LF or CR NUL for EOL    |3.3.1   |x| | | | |\n  User Telnet able to
    send CR LF, CR NUL, or LF  |3.3.1   |x| | | | |\n    ASCII user able to select
    CR LF/CR NUL       |3.3.1   | |x| | | |\n    User Telnet default mode is CR LF
    \           |3.3.1   | |x| | | |\n  Non-interactive uses CR LF for EOL             |3.3.1
    \  |x| | | | |\n                                                 |        | |
    | | | |\n"
  title: End-of-Line                                      |        | | | | | |
- contents:
  - "User Telnet interface                            |        | | | | | |\n  Input
    & output all 7-bit characters            |3.4.1   | |x| | | |\n  Bypass local
    op sys interpretation             |3.4.1   | |x| | | |\n  Escape character                               |3.4.1
    \  |x| | | | |\n     User-settable escape character              |3.4.1   | |x|
    | | |\n  Escape to enter 8-bit values                   |3.4.1   | | |x| | |\n
    \ Can input IP, AO, AYT                          |3.4.2   |x| | | | |\n  Can input
    EC, EL, Break                        |3.4.2   | |x| | | |\n  Report TCP connection
    errors to user           |3.4.3   | |x| | | |\n  Optional non-default contact
    port              |3.4.4   | |x| | | |\n  Can spec: output flushed when IP sent
    \         |3.4.5   | |x| | | |\n  Can manually restore output mode               |3.4.5
    \  | |x| | | |\n                                                 |        | |
    | | | |\n"
  title: User Telnet interface                            |        | | | | | |
- contents:
  - 'RFC1123                   FILE TRANSFER -- FTP              October 1989

    '
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "4.  FILE TRANSFER\n   4.1  FILE TRANSFER PROTOCOL -- FTP\n      4.1.1  INTRODUCTION\n
    \        The File Transfer Protocol FTP is the primary Internet standard\n         for
    file transfer.  The current specification is contained in\n         RFC-959 [FTP:1].\n
    \        FTP uses separate simultaneous TCP connections for control and\n         for
    data transfer.  The FTP protocol includes many features,\n         some of which
    are not commonly implemented.  However, for every\n         feature in FTP, there
    exists at least one implementation.  The\n         minimum implementation defined
    in RFC-959 was too small, so a\n         somewhat larger minimum implementation
    is defined here.\n         Internet users have been unnecessarily burdened for
    years by\n         deficient FTP implementations.  Protocol implementors have\n
    \        suffered from the erroneous opinion that implementing FTP ought\n         to
    be a small and trivial task.  This is wrong, because FTP has\n         a user
    interface, because it has to deal (correctly) with the\n         whole variety
    of communication and operating system errors that\n         may occur, and because
    it has to handle the great diversity of\n         real file systems in the world.\n
    \     4.1.2.  PROTOCOL WALK-THROUGH\n         4.1.2.1  LOCAL Type: RFC-959 Section
    3.1.1.4\n            An FTP program MUST support TYPE I (\"IMAGE\" or binary type)\n
    \           as well as TYPE L 8 (\"LOCAL\" type with logical byte size 8).\n            A
    machine whose memory is organized into m-bit words, where\n            m is not
    a multiple of 8, MAY also support TYPE L m.\n            DISCUSSION:\n                 The
    command \"TYPE L 8\" is often required to transfer\n                 binary data
    between a machine whose memory is organized\n                 into (e.g.) 36-bit
    words and a machine with an 8-bit\n                 byte organization.  For an
    8-bit byte machine, TYPE L 8\n                 is equivalent to IMAGE.\n                 \"TYPE
    L m\" is sometimes specified to the FTP programs\n                 on two m-bit
    word machines to ensure the correct\n                 transfer of a native-mode
    binary file from one machine\n                 to the other.  However, this command
    should have the\n                 same effect on these machines as \"TYPE I\".\n"
  title: 4.  FILE TRANSFER
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n         4.1.2.2
    \ Telnet Format Control: RFC-959 Section 3.1.1.5.2\n            A host that makes
    no distinction between TYPE N and TYPE T\n            SHOULD implement TYPE T
    to be identical to TYPE N.\n            DISCUSSION:\n                 This provision
    should ease interoperation with hosts\n                 that do make this distinction.\n
    \                Many hosts represent text files internally as strings\n                 of
    ASCII characters, using the embedded ASCII format\n                 effector characters
    (LF, BS, FF, ...) to control the\n                 format when a file is printed.
    \ For such hosts, there\n                 is no distinction between \"print\"
    files and other\n                 files.  However, systems that use record structured\n
    \                files typically need a special format for printable\n                 files
    (e.g., ASA carriage control).   For the latter\n                 hosts, FTP allows
    a choice of TYPE N or TYPE T.\n         4.1.2.3  Page Structure: RFC-959 Section
    3.1.2.3 and Appendix I\n            Implementation of page structure is NOT RECOMMENDED
    in\n            general. However, if a host system does need to implement\n            FTP
    for \"random access\" or \"holey\" files, it MUST use the\n            defined
    page structure format rather than define a new\n            private FTP format.\n
    \        4.1.2.4  Data Structure Transformations: RFC-959 Section 3.1.2\n            An
    FTP transformation between record-structure and file-\n            structure SHOULD
    be invertible, to the extent possible while\n            making the result useful
    on the target host.\n            DISCUSSION:\n                 RFC-959 required
    strict invertibility between record-\n                 structure and file-structure,
    but in practice,\n                 efficiency and convenience often preclude it.\n
    \                Therefore, the requirement is being relaxed.  There are\n                 two
    different objectives for transferring a file:\n                 processing it
    on the target host, or just storage.  For\n                 storage, strict invertibility
    is important.  For\n                 processing, the file created on the target
    host needs\n                 to be in the format expected by application programs
    on\n                 that host.\n                 As an example of the conflict,
    imagine a record-\n                 oriented operating system that requires some
    data files\n                 to have exactly 80 bytes in each record.  While STORing\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                 a
    file on such a host, an FTP Server must be able to\n                 pad each
    line or record to 80 bytes; a later retrieval\n                 of such a file
    cannot be strictly invertible.\n         4.1.2.5  Data Connection Management:
    RFC-959 Section 3.3\n            A User-FTP that uses STREAM mode SHOULD send
    a PORT command\n            to assign a non-default data port before each transfer\n
    \           command is issued.\n            DISCUSSION:\n                 This
    is required because of the long delay after a TCP\n                 connection
    is closed until its socket pair can be\n                 reused, to allow multiple
    transfers during a single FTP\n                 session.  Sending a port command
    can avoided if a\n                 transfer mode other than stream is used, by
    leaving the\n                 data transfer connection open between transfers.\n
    \        4.1.2.6  PASV Command: RFC-959 Section 4.1.2\n            A server-FTP
    MUST implement the PASV command.\n            If multiple third-party transfers
    are to be executed during\n            the same session, a new PASV command MUST
    be issued before\n            each transfer command, to obtain a unique port pair.\n
    \           IMPLEMENTATION:\n                 The format of the 227 reply to a
    PASV command is not\n                 well standardized.  In particular, an FTP
    client cannot\n                 assume that the parentheses shown on page 40 of
    RFC-959\n                 will be present (and in fact, Figure 3 on page 43 omits\n
    \                them).  Therefore, a User-FTP program that interprets\n                 the
    PASV reply must scan the reply for the first digit\n                 of the host
    and port numbers.\n                 Note that the host number h1,h2,h3,h4 is the
    IP address\n                 of the server host that is sending the reply, and
    that\n                 p1,p2 is a non-default data transfer port that PASV has\n
    \                assigned.\n         4.1.2.7  LIST and NLST Commands: RFC-959
    Section 4.1.3\n            The data returned by an NLST command MUST contain only
    a\n            simple list of legal pathnames, such that the server can use\n
    \           them directly as the arguments of subsequent data transfer\n            commands
    for the individual files.\n            The data returned by a LIST or NLST command
    SHOULD use an\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n            implied
    TYPE AN, unless the current type is EBCDIC, in which\n            case an implied
    TYPE EN SHOULD be used.\n            DISCUSSION:\n                 Many FTP clients
    support macro-commands that will get\n                 or put files matching a
    wildcard specification, using\n                 NLST to obtain a list of pathnames.
    \ The expansion of\n                 \"multiple-put\" is local to the client,
    but \"multiple-\n                 get\" requires cooperation by the server.\n
    \                The implied type for LIST and NLST is designed to\n                 provide
    compatibility with existing User-FTPs, and in\n                 particular with
    multiple-get commands.\n         4.1.2.8  SITE Command: RFC-959 Section 4.1.3\n
    \           A Server-FTP SHOULD use the SITE command for non-standard\n            features,
    rather than invent new private commands or\n            unstandardized extensions
    to existing commands.\n         4.1.2.9  STOU Command: RFC-959 Section 4.1.3\n
    \           The STOU command stores into a uniquely named file.  When it\n            receives
    an STOU command, a Server-FTP MUST return the\n            actual file name in
    the \"125 Transfer Starting\" or the \"150\n            Opening Data Connection\"
    message that precedes the transfer\n            (the 250 reply code mentioned
    in RFC-959 is incorrect).  The\n            exact format of these messages is
    hereby defined to be as\n            follows:\n                125 FILE: pppp\n
    \               150 FILE: pppp\n            where pppp represents the unique pathname
    of the file that\n            will be written.\n         4.1.2.10  Telnet End-of-line
    Code: RFC-959, Page 34\n            Implementors MUST NOT assume any correspondence
    between READ\n            boundaries on the control connection and the Telnet
    EOL\n            sequences (CR LF).\n            DISCUSSION:\n                 Thus,
    a server-FTP (or User-FTP) must continue reading\n                 characters
    from the control connection until a complete\n                 Telnet EOL sequence
    is encountered, before processing\n                 the command (or response,
    respectively).  Conversely, a\n                 single READ from the control connection
    may include\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                 more
    than one FTP command.\n         4.1.2.11  FTP Replies: RFC-959 Section 4.2, Page
    35\n            A Server-FTP MUST send only correctly formatted replies on\n            the
    control connection.  Note that RFC-959 (unlike earlier\n            versions of
    the FTP spec) contains no provision for a\n            \"spontaneous\" reply message.\n
    \           A Server-FTP SHOULD use the reply codes defined in RFC-959\n            whenever
    they apply.  However, a server-FTP MAY use a\n            different reply code
    when needed, as long as the general\n            rules of Section 4.2 are followed.
    When the implementor has\n            a choice between a 4xx and 5xx reply code,
    a Server-FTP\n            SHOULD send a 4xx (temporary failure) code when there
    is any\n            reasonable possibility that a failed FTP will succeed a few\n
    \           hours later.\n            A User-FTP SHOULD generally use only the
    highest-order digit\n            of a 3-digit reply code for making a procedural
    decision, to\n            prevent difficulties when a Server-FTP uses non-standard\n
    \           reply codes.\n            A User-FTP MUST be able to handle multi-line
    replies.  If\n            the implementation imposes a limit on the number of
    lines\n            and if this limit is exceeded, the User-FTP MUST recover,\n
    \           e.g., by ignoring the excess lines until the end of the\n            multi-line
    reply is reached.\n            A User-FTP SHOULD NOT interpret a 421 reply code
    (\"Service\n            not available, closing control connection\") specially,
    but\n            SHOULD detect closing of the control connection by the\n            server.\n
    \           DISCUSSION:\n                 Server implementations that fail to
    strictly follow the\n                 reply rules often cause FTP user programs
    to hang.\n                 Note that RFC-959 resolved ambiguities in the reply\n
    \                rules found in earlier FTP specifications and must be\n                 followed.\n
    \                It is important to choose FTP reply codes that properly\n                 distinguish
    between temporary and permanent failures,\n                 to allow the successful
    use of file transfer client\n                 daemons.  These programs depend
    on the reply codes to\n                 decide whether or not to retry a failed
    transfer; using\n                 a permanent failure code (5xx) for a temporary
    error\n                 will cause these programs to give up unnecessarily.\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                 When
    the meaning of a reply matches exactly the text\n                 shown in RFC-959,
    uniformity will be enhanced by using\n                 the RFC-959 text verbatim.
    \ However, a Server-FTP\n                 implementor is encouraged to choose
    reply text that\n                 conveys specific system-dependent information,
    when\n                 appropriate.\n         4.1.2.12  Connections: RFC-959 Section
    5.2\n            The words \"and the port used\" in the second paragraph of\n
    \           this section of RFC-959 are erroneous (historical), and they\n            should
    be ignored.\n            On a multihomed server host, the default data transfer
    port\n            (L-1) MUST be associated with the same local IP address as\n
    \           the corresponding control connection to port L.\n            A user-FTP
    MUST NOT send any Telnet controls other than\n            SYNCH and IP on an FTP
    control connection. In particular, it\n            MUST NOT attempt to negotiate
    Telnet options on the control\n            connection.  However, a server-FTP
    MUST be capable of\n            accepting and refusing Telnet negotiations (i.e.,
    sending\n            DONT/WONT).\n            DISCUSSION:\n                 Although
    the RFC says: \"Server- and User- processes\n                 should follow the
    conventions for the Telnet\n                 protocol...[on the control connection]\",
    it is not the\n                 intent that Telnet option negotiation is to be\n
    \                employed.\n         4.1.2.13  Minimum Implementation; RFC-959
    Section 5.1\n            The following commands and options MUST be supported
    by\n            every server-FTP and user-FTP, except in cases where the\n            underlying
    file system or operating system does not allow or\n            support a particular
    command.\n                 Type: ASCII Non-print, IMAGE, LOCAL 8\n                 Mode:
    Stream\n                 Structure: File, Record*\n                 Commands:\n
    \                   USER, PASS, ACCT,\n                    PORT, PASV,\n                    TYPE,
    MODE, STRU,\n                    RETR, STOR, APPE,\n                    RNFR,
    RNTO, DELE,\n                    CWD,  CDUP, RMD,  MKD,  PWD,\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                    LIST,
    NLST,\n                    SYST, STAT,\n                    HELP, NOOP, QUIT.\n
    \           *Record structure is REQUIRED only for hosts whose file\n            systems
    support record structure.\n            DISCUSSION:\n                 Vendors are
    encouraged to implement a larger subset of\n                 the protocol.  For
    example, there are important\n                 robustness features in the protocol
    (e.g., Restart,\n                 ABOR, block mode) that would be an aid to some
    Internet\n                 users but are not widely implemented.\n                 A
    host that does not have record structures in its file\n                 system
    may still accept files with STRU R, recording\n                 the byte stream
    literally.\n      4.1.3  SPECIFIC ISSUES\n         4.1.3.1  Non-standard Command
    Verbs\n            FTP allows \"experimental\" commands, whose names begin with\n
    \           \"X\".  If these commands are subsequently adopted as\n            standards,
    there may still be existing implementations using\n            the \"X\" form.
    \ At present, this is true for the directory\n            commands:\n                RFC-959
    \  \"Experimental\"\n                  MKD        XMKD\n                  RMD
    \       XRMD\n                  PWD        XPWD\n                  CDUP       XCUP\n
    \                 CWD        XCWD\n            All FTP implementations SHOULD
    recognize both forms of these\n            commands, by simply equating them with
    extra entries in the\n            command lookup table.\n            IMPLEMENTATION:\n
    \                A User-FTP can access a server that supports only the\n                 \"X\"
    forms by implementing a mode switch, or\n                 automatically using
    the following procedure: if the\n                 RFC-959 form of one of the above
    commands is rejected\n                 with a 500 or 502 response code, then try
    the\n                 experimental form; any other response would be passed\n
    \                to the user.\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n         4.1.3.2
    \ Idle Timeout\n            A Server-FTP process SHOULD have an idle timeout,
    which will\n            terminate the process and close the control connection
    if\n            the server is inactive (i.e., no command or data transfer in\n
    \           progress) for a long period of time.  The idle timeout time\n            SHOULD
    be configurable, and the default should be at least 5\n            minutes.\n
    \           A client FTP process (\"User-PI\" in RFC-959) will need\n            timeouts
    on responses only if it is invoked from a program.\n            DISCUSSION:\n
    \                Without a timeout, a Server-FTP process may be left\n                 pending
    indefinitely if the corresponding client\n                 crashes without closing
    the control connection.\n         4.1.3.3  Concurrency of Data and Control\n            DISCUSSION:\n
    \                The intent of the designers of FTP was that a user\n                 should
    be able to send a STAT command at any time while\n                 data transfer
    was in progress and that the server-FTP\n                 would reply immediately
    with status -- e.g., the number\n                 of bytes transferred so far.
    \ Similarly, an ABOR\n                 command should be possible at any time
    during a data\n                 transfer.\n                 Unfortunately, some
    small-machine operating systems\n                 make such concurrent programming
    difficult, and some\n                 other implementers seek minimal solutions,
    so some FTP\n                 implementations do not allow concurrent use of the
    data\n                 and control connections.  Even such a minimal server\n
    \                must be prepared to accept and defer a STAT or ABOR\n                 command
    that arrives during data transfer.\n         4.1.3.4  FTP Restart Mechanism\n
    \           The description of the 110 reply on pp. 40-41 of RFC-959 is\n            incorrect;
    the correct description is as follows.  A restart\n            reply message,
    sent over the control connection from the\n            receiving FTP to the User-FTP,
    has the format:\n                110 MARK ssss = rrrr\n            Here:\n            *
    \   ssss is a text string that appeared in a Restart Marker\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                 in
    the data stream and encodes a position in the\n                 sender's file
    system;\n            *    rrrr encodes the corresponding position in the\n                 receiver's
    file system.\n            The encoding, which is specific to a particular file
    system\n            and network implementation, is always generated and\n            interpreted
    by the same system, either sender or receiver.\n            When an FTP that implements
    restart receives a Restart\n            Marker in the data stream, it SHOULD force
    the data to that\n            point to be written to stable storage before encoding
    the\n            corresponding position rrrr.  An FTP sending Restart Markers\n
    \           MUST NOT assume that 110 replies will be returned\n            synchronously
    with the data, i.e., it must not await a 110\n            reply before sending
    more data.\n            Two new reply codes are hereby defined for errors\n            encountered
    in restarting a transfer:\n              554 Requested action not taken: invalid
    REST parameter.\n                 A 554 reply may result from a FTP service command
    that\n                 follows a REST command.  The reply indicates that the\n
    \                existing file at the Server-FTP cannot be repositioned\n                 as
    specified in the REST.\n              555 Requested action not taken: type or
    stru mismatch.\n                 A 555 reply may result from an APPE command or
    from any\n                 FTP service command following a REST command.  The\n
    \                reply indicates that there is some mismatch between the\n                 current
    transfer parameters (type and stru) and the\n                 attributes of the
    existing file.\n            DISCUSSION:\n                 Note that the FTP Restart
    mechanism requires that Block\n                 or Compressed mode be used for
    data transfer, to allow\n                 the Restart Markers to be included within
    the data\n                 stream.  The frequency of Restart Markers can be low.\n
    \                Restart Markers mark a place in the data stream, but\n                 the
    receiver may be performing some transformation on\n                 the data as
    it is stored into stable storage.  In\n                 general, the receiver's
    encoding must include any state\n                 information necessary to restart
    this transformation at\n                 any point of the FTP data stream.  For
    example, in TYPE\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                 A
    transfers, some receiver hosts transform CR LF\n                 sequences into
    a single LF character on disk.   If a\n                 Restart Marker happens
    to fall between CR and LF, the\n                 receiver must encode in rrrr
    that the transfer must be\n                 restarted in a \"CR has been seen
    and discarded\" state.\n                 Note that the Restart Marker is required
    to be encoded\n                 as a string of printable ASCII characters, regardless\n
    \                of the type of the data.\n                 RFC-959 says that
    restart information is to be returned\n                 \"to the user\".  This
    should not be taken literally.  In\n                 general, the User-FTP should
    save the restart\n                 information (ssss,rrrr) in stable storage,
    e.g., append\n                 it to a restart control file.  An empty restart
    control\n                 file should be created when the transfer first starts\n
    \                and deleted automatically when the transfer completes\n                 successfully.
    \ It is suggested that this file have a\n                 name derived in an easily-identifiable
    manner from the\n                 name of the file being transferred and the remote
    host\n                 name; this is analogous to the means used by many text\n
    \                editors for naming \"backup\" files.\n                 There
    are three cases for FTP restart.\n                 (1)  User-to-Server Transfer\n
    \                     The User-FTP puts Restart Markers <ssss> at\n                      convenient
    places in the data stream.  When the\n                      Server-FTP receives
    a Marker, it writes all prior\n                      data to disk, encodes its
    file system position and\n                      transformation state as rrrr,
    and returns a \"110\n                      MARK ssss = rrrr\" reply over the control\n
    \                     connection.  The User-FTP appends the pair\n                      (ssss,rrrr)
    to its restart control file.\n                      To restart the transfer, the
    User-FTP fetches the\n                      last (ssss,rrrr) pair from the restart
    control\n                      file, repositions its local file system and\n                      transformation
    state using ssss, and sends the\n                      command \"REST rrrr\" to
    the Server-FTP.\n                 (2)  Server-to-User Transfer\n                      The
    Server-FTP puts Restart Markers <ssss> at\n                      convenient places
    in the data stream.  When the\n                      User-FTP receives a Marker,
    it writes all prior\n                      data to disk, encodes its file system
    position and\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n                      transformation
    state as rrrr, and appends the pair\n                      (rrrr,ssss) to its
    restart control file.\n                      To restart the transfer, the User-FTP
    fetches the\n                      last (rrrr,ssss) pair from the restart control\n
    \                     file, repositions its local file system and\n                      transformation
    state using rrrr, and sends the\n                      command \"REST ssss\" to
    the Server-FTP.\n                 (3)  Server-to-Server (\"Third-Party\") Transfer\n
    \                     The sending Server-FTP puts Restart Markers <ssss>\n                      at
    convenient places in the data stream.  When it\n                      receives
    a Marker, the receiving Server-FTP writes\n                      all prior data
    to disk, encodes its file system\n                      position and transformation
    state as rrrr, and\n                      sends a \"110 MARK ssss = rrrr\" reply
    over the\n                      control connection to the User.  The User-FTP\n
    \                     appends the pair (ssss,rrrr) to its restart\n                      control
    file.\n                      To restart the transfer, the User-FTP fetches the\n
    \                     last (ssss,rrrr) pair from the restart control\n                      file,
    sends \"REST ssss\" to the sending Server-FTP,\n                      and sends
    \"REST rrrr\" to the receiving Server-FTP.\n      4.1.4  FTP/USER INTERFACE\n
    \        This section discusses the user interface for a User-FTP\n         program.\n
    \        4.1.4.1  Pathname Specification\n            Since FTP is intended for
    use in a heterogeneous\n            environment, User-FTP implementations MUST
    support remote\n            pathnames as arbitrary character strings, so that
    their form\n            and content are not limited by the conventions of the
    local\n            operating system.\n            DISCUSSION:\n                 In
    particular, remote pathnames can be of arbitrary\n                 length, and
    all the printing ASCII characters as well\n                 as space (0x20) must
    be allowed.  RFC-959 allows a\n                 pathname to contain any 7-bit
    ASCII character except CR\n                 or LF.\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n         4.1.4.2
    \ \"QUOTE\" Command\n            A User-FTP program MUST implement a \"QUOTE\"
    command that\n            will pass an arbitrary character string to the server
    and\n            display all resulting response messages to the user.\n            To
    make the \"QUOTE\" command useful, a User-FTP SHOULD send\n            transfer
    control commands to the server as the user enters\n            them, rather than
    saving all the commands and sending them\n            to the server only when
    a data transfer is started.\n            DISCUSSION:\n                 The \"QUOTE\"
    command is essential to allow the user to\n                 access servers that
    require system-specific commands\n                 (e.g., SITE or ALLO), or to
    invoke new or optional\n                 features that are not implemented by
    the User-FTP.  For\n                 example, \"QUOTE\" may be used to specify
    \"TYPE A T\" to\n                 send a print file to hosts that require the\n
    \                distinction, even if the User-FTP does not recognize\n                 that
    TYPE.\n         4.1.4.3  Displaying Replies to User\n            A User-FTP SHOULD
    display to the user the full text of all\n            error reply messages it
    receives.  It SHOULD have a\n            \"verbose\" mode in which all commands
    it sends and the full\n            text and reply codes it receives are displayed,
    for\n            diagnosis of problems.\n         4.1.4.4  Maintaining Synchronization\n
    \           The state machine in a User-FTP SHOULD be forgiving of\n            missing
    and unexpected reply messages, in order to maintain\n            command synchronization
    with the server.\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n      4.1.5
    \  FTP REQUIREMENTS SUMMARY\n                                           |               |
    | | |S| |\n                                           |               | | | |H|
    |F\n                                           |               | | | |O|M|o\n
    \                                          |               | |S| |U|U|o\n                                           |
    \              | |H| |L|S|t\n                                           |               |M|O|
    |D|T|n\n                                           |               |U|U|M| | |o\n
    \                                          |               |S|L|A|N|N|t\n                                           |
    \              |T|D|Y|O|O|t\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - 'FEATURE                                    |SECTION        | | | |T|T|e

    '
  title: FEATURE                                    |SECTION        | | | |T|T|e
- contents:
  - '-------------------------------------------|---------------|-|-|-|-|-|--

    '
  title: '-------------------------------------------|---------------|-|-|-|-|-|--'
- contents:
  - 'Implement TYPE T if same as TYPE N         |4.1.2.2        | |x| | | |

    '
  title: Implement TYPE T if same as TYPE N         |4.1.2.2        | |x| | | |
- contents:
  - 'File/Record transform invertible if poss.  |4.1.2.4        | |x| | | |

    '
  title: File/Record transform invertible if poss.  |4.1.2.4        | |x| | | |
- contents:
  - 'User-FTP send PORT cmd for stream mode     |4.1.2.5        | |x| | | |

    '
  title: User-FTP send PORT cmd for stream mode     |4.1.2.5        | |x| | | |
- contents:
  - "Server-FTP implement PASV                  |4.1.2.6        |x| | | | |\n  PASV
    is per-transfer                     |4.1.2.6        |x| | | | |\n"
  title: Server-FTP implement PASV                  |4.1.2.6        |x| | | | |
- contents:
  - 'NLST reply usable in RETR cmds             |4.1.2.7        |x| | | | |

    '
  title: NLST reply usable in RETR cmds             |4.1.2.7        |x| | | | |
- contents:
  - 'Implied type for LIST and NLST             |4.1.2.7        | |x| | | |

    '
  title: Implied type for LIST and NLST             |4.1.2.7        | |x| | | |
- contents:
  - 'SITE cmd for non-standard features         |4.1.2.8        | |x| | | |

    '
  title: SITE cmd for non-standard features         |4.1.2.8        | |x| | | |
- contents:
  - 'STOU cmd return pathname as specified      |4.1.2.9        |x| | | | |

    '
  title: STOU cmd return pathname as specified      |4.1.2.9        |x| | | | |
- contents:
  - "Use TCP READ boundaries on control conn.   |4.1.2.10       | | | | |x|\n                                           |
    \              | | | | | |\n"
  title: Use TCP READ boundaries on control conn.   |4.1.2.10       | | | | |x|
- contents:
  - 'Server-FTP send only correct reply format  |4.1.2.11       |x| | | | |

    '
  title: Server-FTP send only correct reply format  |4.1.2.11       |x| | | | |
- contents:
  - "Server-FTP use defined reply code if poss. |4.1.2.11       | |x| | | |\n  New
    reply code following Section 4.2     |4.1.2.11       | | |x| | |\n"
  title: Server-FTP use defined reply code if poss. |4.1.2.11       | |x| | | |
- contents:
  - 'User-FTP use only high digit of reply      |4.1.2.11       | |x| | | |

    '
  title: User-FTP use only high digit of reply      |4.1.2.11       | |x| | | |
- contents:
  - 'User-FTP handle multi-line reply lines     |4.1.2.11       |x| | | | |

    '
  title: User-FTP handle multi-line reply lines     |4.1.2.11       |x| | | | |
- contents:
  - "User-FTP handle 421 reply specially        |4.1.2.11       | | | |x| |\n                                           |
    \              | | | | | |\n"
  title: User-FTP handle 421 reply specially        |4.1.2.11       | | | |x| |
- contents:
  - 'Default data port same IP addr as ctl conn |4.1.2.12       |x| | | | |

    '
  title: Default data port same IP addr as ctl conn |4.1.2.12       |x| | | | |
- contents:
  - 'User-FTP send Telnet cmds exc. SYNCH, IP   |4.1.2.12       | | | | |x|

    '
  title: User-FTP send Telnet cmds exc. SYNCH, IP   |4.1.2.12       | | | | |x|
- contents:
  - 'User-FTP negotiate Telnet options          |4.1.2.12       | | | | |x|

    '
  title: User-FTP negotiate Telnet options          |4.1.2.12       | | | | |x|
- contents:
  - 'Server-FTP handle Telnet options           |4.1.2.12       |x| | | | |

    '
  title: Server-FTP handle Telnet options           |4.1.2.12       |x| | | | |
- contents:
  - 'Handle "Experimental" directory cmds       |4.1.3.1        | |x| | | |

    '
  title: Handle "Experimental" directory cmds       |4.1.3.1        | |x| | | |
- contents:
  - "Idle timeout in server-FTP                 |4.1.3.2        | |x| | | |\n    Configurable
    idle timeout              |4.1.3.2        | |x| | | |\n"
  title: Idle timeout in server-FTP                 |4.1.3.2        | |x| | | |
- contents:
  - 'Receiver checkpoint data at Restart Marker |4.1.3.4        | |x| | | |

    '
  title: Receiver checkpoint data at Restart Marker |4.1.3.4        | |x| | | |
- contents:
  - "Sender assume 110 replies are synchronous  |4.1.3.4        | | | | |x|\n                                           |
    \              | | | | | |\n"
  title: Sender assume 110 replies are synchronous  |4.1.3.4        | | | | |x|
- contents:
  - "Support TYPE:                              |               | | | | | |\n  ASCII
    - Non-Print (AN)                   |4.1.2.13       |x| | | | |\n  ASCII - Telnet
    (AT) -- if same as AN     |4.1.2.2        | |x| | | |\n  ASCII - Carriage Control
    (AC)            |959 3.1.1.5.2  | | |x| | |\n  EBCDIC - (any form)                      |959
    3.1.1.2    | | |x| | |\n  IMAGE                                    |4.1.2.1        |x|
    | | | |\n  LOCAL 8                                  |4.1.2.1        |x| | | |
    |\n"
  title: 'Support TYPE:                              |               | | | | | |'
- contents:
  - "RFC1123                   FILE TRANSFER -- FTP              October 1989\n  LOCAL
    m                                  |4.1.2.1        | | |x| | |2\n                                           |
    \              | | | | | |\n"
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "Support MODE:                              |               | | | | | |\n  Stream
    \                                  |4.1.2.13       |x| | | | |\n  Block                                    |959
    3.4.2      | | |x| | |\n                                           |               |
    | | | | |\n"
  title: 'Support MODE:                              |               | | | | | |'
- contents:
  - "Support STRUCTURE:                         |               | | | | | |\n  File
    \                                    |4.1.2.13       |x| | | | |\n  Record                                   |4.1.2.13
    \      |x| | | | |3\n  Page                                     |4.1.2.3        |
    | | |x| |\n                                           |               | | | |
    | |\n"
  title: 'Support STRUCTURE:                         |               | | | | | |'
- contents:
  - "Support commands:                          |               | | | | | |\n  USER
    \                                    |4.1.2.13       |x| | | | |\n  PASS                                     |4.1.2.13
    \      |x| | | | |\n  ACCT                                     |4.1.2.13       |x|
    | | | |\n  CWD                                      |4.1.2.13       |x| | | |
    |\n  CDUP                                     |4.1.2.13       |x| | | | |\n  SMNT
    \                                    |959 5.3.1      | | |x| | |\n  REIN                                     |959
    5.3.1      | | |x| | |\n  QUIT                                     |4.1.2.13       |x|
    | | | |\n                                           |               | | | | |
    |\n  PORT                                     |4.1.2.13       |x| | | | |\n  PASV
    \                                    |4.1.2.6        |x| | | | |\n  TYPE                                     |4.1.2.13
    \      |x| | | | |1\n  STRU                                     |4.1.2.13       |x|
    | | | |1\n  MODE                                     |4.1.2.13       |x| | | |
    |1\n                                           |               | | | | | |\n  RETR
    \                                    |4.1.2.13       |x| | | | |\n  STOR                                     |4.1.2.13
    \      |x| | | | |\n  STOU                                     |959 5.3.1      |
    | |x| | |\n  APPE                                     |4.1.2.13       |x| | |
    | |\n  ALLO                                     |959 5.3.1      | | |x| | |\n
    \ REST                                     |959 5.3.1      | | |x| | |\n  RNFR
    \                                    |4.1.2.13       |x| | | | |\n  RNTO                                     |4.1.2.13
    \      |x| | | | |\n  ABOR                                     |959 5.3.1      |
    | |x| | |\n  DELE                                     |4.1.2.13       |x| | |
    | |\n  RMD                                      |4.1.2.13       |x| | | | |\n
    \ MKD                                      |4.1.2.13       |x| | | | |\n  PWD
    \                                     |4.1.2.13       |x| | | | |\n  LIST                                     |4.1.2.13
    \      |x| | | | |\n  NLST                                     |4.1.2.13       |x|
    | | | |\n  SITE                                     |4.1.2.8        | | |x| |
    |\n  STAT                                     |4.1.2.13       |x| | | | |\n  SYST
    \                                    |4.1.2.13       |x| | | | |\n  HELP                                     |4.1.2.13
    \      |x| | | | |\n  NOOP                                     |4.1.2.13       |x|
    | | | |\n                                           |               | | | | |
    |\n"
  title: 'Support commands:                          |               | | | | | |'
- contents:
  - 'RFC1123                   FILE TRANSFER -- FTP              October 1989

    '
  title: RFC1123                   FILE TRANSFER -- FTP              October 1989
- contents:
  - "User Interface:                            |               | | | | | |\n  Arbitrary
    pathnames                      |4.1.4.1        |x| | | | |\n  Implement \"QUOTE\"
    command                |4.1.4.2        |x| | | | |\n  Transfer control commands
    immediately    |4.1.4.2        | |x| | | |\n  Display error messages to user           |4.1.4.3
    \       | |x| | | |\n    Verbose mode                           |4.1.4.3        |
    |x| | | |\n  Maintain synchronization with server     |4.1.4.4        | |x| |
    | |\n"
  title: 'User Interface:                            |               | | | | | |'
- contents:
  - 'Footnotes:

    '
  title: 'Footnotes:'
- contents:
  - '(1)  For the values shown earlier.

    '
  title: (1)  For the values shown earlier.
- contents:
  - '(2)  Here m is number of bits in a memory word.

    '
  title: (2)  Here m is number of bits in a memory word.
- contents:
  - "(3)  Required for host with record-structured file system, optional\n     otherwise.\n"
  title: (3)  Required for host with record-structured file system, optional
- contents:
  - "RFC1123                  FILE TRANSFER -- TFTP              October 1989\n   4.2
    \ TRIVIAL FILE TRANSFER PROTOCOL -- TFTP\n      4.2.1  INTRODUCTION\n         The
    Trivial File Transfer Protocol TFTP is defined in RFC-783\n         [TFTP:1].\n
    \        TFTP provides its own reliable delivery with UDP as its\n         transport
    protocol, using a simple stop-and-wait acknowledgment\n         system.  Since
    TFTP has an effective window of only one 512\n         octet segment, it can provide
    good performance only over paths\n         that have a small delay*bandwidth product.
    \ The TFTP file\n         interface is very simple, providing no access control
    or\n         security.\n         TFTP's most important application is bootstrapping
    a host over\n         a local network, since it is simple and small enough to
    be\n         easily implemented in EPROM [BOOT:1, BOOT:2].  Vendors are\n         urged
    to support TFTP for booting.\n      4.2.2  PROTOCOL WALK-THROUGH\n         The
    TFTP specification [TFTP:1] is written in an open style,\n         and does not
    fully specify many parts of the protocol.\n         4.2.2.1  Transfer Modes: RFC-783,
    Page 3\n            The transfer mode \"mail\" SHOULD NOT be supported.\n         4.2.2.2
    \ UDP Header: RFC-783, Page 17\n            The Length field of a UDP header is
    incorrectly defined; it\n            includes the UDP header length (8).\n      4.2.3
    \ SPECIFIC ISSUES\n         4.2.3.1  Sorcerer's Apprentice Syndrome\n            There
    is a serious bug, known as the \"Sorcerer's Apprentice\n            Syndrome,\"
    in the protocol specification.  While it does not\n            cause incorrect
    operation of the transfer (the file will\n            always be transferred correctly
    if the transfer completes),\n            this bug may cause excessive retransmission,
    which may cause\n            the transfer to time out.\n            Implementations
    MUST contain the fix for this problem: the\n            sender (i.e., the side
    originating the DATA packets) must\n            never resend the current DATA
    packet on receipt of a\n"
  title: RFC1123                  FILE TRANSFER -- TFTP              October 1989
- contents:
  - "RFC1123                  FILE TRANSFER -- TFTP              October 1989\n            duplicate
    ACK.\n            DISCUSSION:\n                 The bug is caused by the protocol
    rule that either\n                 side, on receiving an old duplicate datagram,
    may\n                 resend the current datagram.  If a packet is delayed in\n
    \                the network but later successfully delivered after\n                 either
    side has timed out and retransmitted a packet, a\n                 duplicate copy
    of the response may be generated.  If\n                 the other side responds
    to this duplicate with a\n                 duplicate of its own, then every datagram
    will be sent\n                 in duplicate for the remainder of the transfer
    (unless\n                 a datagram is lost, breaking the repetition).  Worse\n
    \                yet, since the delay is often caused by congestion,\n                 this
    duplicate transmission will usually causes more\n                 congestion,
    leading to more delayed packets, etc.\n                 The following example
    may help to clarify this problem.\n                     TFTP A                  TFTP
    B\n                 (1)  Receive ACK X-1\n                      Send DATA X\n
    \                (2)                          Receive DATA X\n                                              Send
    ACK X\n                        (ACK X is delayed in network,\n                         and
    \ A times out):\n                 (3)  Retransmit DATA X\n                 (4)
    \                         Receive DATA X again\n                                              Send
    ACK X again\n                 (5)  Receive (delayed) ACK X\n                      Send
    DATA X+1\n                 (6)                          Receive DATA X+1\n                                              Send
    ACK X+1\n                 (7)  Receive ACK X again\n                      Send
    DATA X+1 again\n                 (8)                          Receive DATA X+1
    again\n                                              Send ACK X+1 again\n                 (9)
    \ Receive ACK X+1\n                      Send DATA X+2\n                 (10)
    \                        Receive DATA X+2\n                                              Send
    ACK X+3\n                 (11) Receive ACK X+1 again\n                      Send
    DATA X+2 again\n                 (12)                         Receive DATA X+2
    again\n                                              Send ACK X+3 again\n"
  title: RFC1123                  FILE TRANSFER -- TFTP              October 1989
- contents:
  - "RFC1123                  FILE TRANSFER -- TFTP              October 1989\n                 Notice
    that once the delayed ACK arrives, the protocol\n                 settles down
    to duplicate all further packets\n                 (sequences 5-8 and 9-12).  The
    problem is caused not by\n                 either side timing out, but by both
    sides\n                 retransmitting the current packet when they receive a\n
    \                duplicate.\n                 The fix is to break the retransmission
    loop, as\n                 indicated above.  This is analogous to the behavior
    of\n                 TCP.  It is then possible to remove the retransmission\n
    \                timer on the receiver, since the resent ACK will never\n                 cause
    any action; this is a useful simplification where\n                 TFTP is used
    in a bootstrap program.  It is OK to allow\n                 the timer to remain,
    and it may be helpful if the\n                 retransmitted ACK replaces one
    that was genuinely lost\n                 in the network.  The sender still requires
    a retransmit\n                 timer, of course.\n         4.2.3.2  Timeout Algorithms\n
    \           A TFTP implementation MUST use an adaptive timeout.\n            IMPLEMENTATION:\n
    \                TCP retransmission algorithms provide a useful base to\n                 work
    from.  At least an exponential backoff of\n                 retransmission timeout
    is necessary.\n         4.2.3.3  Extensions\n            A variety of non-standard
    extensions have been made to TFTP,\n            including additional transfer
    modes and a secure operation\n            mode (with passwords).  None of these
    have been\n            standardized.\n         4.2.3.4  Access Control\n            A
    server TFTP implementation SHOULD include some\n            configurable access
    control over what pathnames are allowed\n            in TFTP operations.\n         4.2.3.5
    \ Broadcast Request\n            A TFTP request directed to a broadcast address
    SHOULD be\n            silently ignored.\n            DISCUSSION:\n                 Due
    to the weak access control capability of TFTP,\n                 directed broadcasts
    of TFTP requests to random networks\n"
  title: RFC1123                  FILE TRANSFER -- TFTP              October 1989
- contents:
  - "RFC1123                  FILE TRANSFER -- TFTP              October 1989\n                 could
    create a significant security hole.\n      4.2.4  TFTP REQUIREMENTS SUMMARY\n
    \                                                |        | | | |S| |\n                                                 |
    \       | | | |H| |F\n                                                 |        |
    | | |O|M|o\n                                                 |        | |S| |U|U|o\n
    \                                                |        | |H| |L|S|t\n                                                 |
    \       |M|O| |D|T|n\n                                                 |        |U|U|M|
    | |o\n                                                 |        |S|L|A|N|N|t\n
    \                                                |        |T|D|Y|O|O|t\n"
  title: RFC1123                  FILE TRANSFER -- TFTP              October 1989
- contents:
  - 'FEATURE                                          |SECTION | | | |T|T|e

    '
  title: FEATURE                                          |SECTION | | | |T|T|e
- contents:
  - '-------------------------------------------------|--------|-|-|-|-|-|--

    '
  title: '-------------------------------------------------|--------|-|-|-|-|-|--'
- contents:
  - 'Fix Sorcerer''s Apprentice Syndrome               |4.2.3.1 |x| | | | |

    '
  title: Fix Sorcerer's Apprentice Syndrome               |4.2.3.1 |x| | | | |
- contents:
  - "Transfer modes:                                  |        | | | | | |\n  netascii
    \                                      |RFC-783 |x| | | | |\n  octet                                          |RFC-783
    |x| | | | |\n  mail                                           |4.2.2.1 | | | |x|
    |\n  extensions                                     |4.2.3.3 | | |x| | |\n"
  title: 'Transfer modes:                                  |        | | | | | |'
- contents:
  - 'Use adaptive timeout                             |4.2.3.2 |x| | | | |

    '
  title: Use adaptive timeout                             |4.2.3.2 |x| | | | |
- contents:
  - 'Configurable access control                      |4.2.3.4 | |x| | | |

    '
  title: Configurable access control                      |4.2.3.4 | |x| | | |
- contents:
  - 'Silently ignore broadcast request                |4.2.3.5 | |x| | | |

    '
  title: Silently ignore broadcast request                |4.2.3.5 | |x| | | |
- contents:
  - '-------------------------------------------------|--------|-|-|-|-|-|--

    '
  title: '-------------------------------------------------|--------|-|-|-|-|-|--'
- contents:
  - '-------------------------------------------------|--------|-|-|-|-|-|--

    '
  title: '-------------------------------------------------|--------|-|-|-|-|-|--'
- contents:
  - 'RFC1123                  MAIL -- SMTP & RFC-822             October 1989

    '
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "5.  ELECTRONIC MAIL -- SMTP and RFC-822\n   5.1  INTRODUCTION\n      In the TCP/IP
    protocol suite, electronic mail in a format\n      specified in RFC-822 [SMTP:2]
    is transmitted using the Simple Mail\n      Transfer Protocol (SMTP) defined in
    RFC-821 [SMTP:1].\n      While SMTP has remained unchanged over the years, the
    Internet\n      community has made several changes in the way SMTP is used.  In\n
    \     particular, the conversion to the Domain Name System (DNS) has\n      caused
    changes in address formats and in mail routing.  In this\n      section, we assume
    familiarity with the concepts and terminology\n      of the DNS, whose requirements
    are given in Section 6.1.\n      RFC-822 specifies the Internet standard format
    for electronic mail\n      messages.  RFC-822 supercedes an older standard, RFC-733,
    that may\n      still be in use in a few places, although it is obsolete.  The
    two\n      formats are sometimes referred to simply by number (\"822\" and\n      \"733\").\n
    \     RFC-822 is used in some non-Internet mail environments with\n      different
    mail transfer protocols than SMTP, and SMTP has also\n      been adapted for use
    in some non-Internet environments.  Note that\n      this document presents the
    rules for the use of SMTP and RFC-822\n      for the Internet environment only;
    other mail environments that\n      use these protocols may be expected to have
    their own rules.\n   5.2  PROTOCOL WALK-THROUGH\n      This section covers both
    RFC-821 and RFC-822.\n      The SMTP specification in RFC-821 is clear and contains
    numerous\n      examples, so implementors should not find it difficult to\n      understand.
    \ This section simply updates or annotates portions of\n      RFC-821 to conform
    with current usage.\n      RFC-822 is a long and dense document, defining a rich
    syntax.\n      Unfortunately, incomplete or defective implementations of RFC-822\n
    \     are common.  In fact, nearly all of the many formats of RFC-822\n      are
    actually used, so an implementation generally needs to\n      recognize and correctly
    interpret all of the RFC-822 syntax.\n      5.2.1  The SMTP Model: RFC-821 Section
    2\n         DISCUSSION:\n              Mail is sent by a series of request/response
    transactions\n              between a client, the \"sender-SMTP,\" and a server,
    the\n"
  title: 5.  ELECTRONIC MAIL -- SMTP and RFC-822
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n              \"receiver-SMTP\".
    \ These transactions pass (1) the message\n              proper, which is composed
    of header and body, and (2) SMTP\n              source and destination addresses,
    referred to as the\n              \"envelope\".\n              The SMTP programs
    are analogous to Message Transfer Agents\n              (MTAs) of X.400.  There
    will be another level of protocol\n              software, closer to the end user,
    that is responsible for\n              composing and analyzing RFC-822 message
    headers; this\n              component is known as the \"User Agent\" in X.400,
    and we\n              use that term in this document.  There is a clear logical\n
    \             distinction between the User Agent and the SMTP\n              implementation,
    since they operate on different levels of\n              protocol.  Note, however,
    that this distinction is may not\n              be exactly reflected the structure
    of typical\n              implementations of Internet mail.  Often there is a\n
    \             program known as the \"mailer\" that implements SMTP and\n              also
    some of the User Agent functions; the rest of the\n              User Agent functions
    are included in a user interface used\n              for entering and reading
    mail.\n              The SMTP envelope is constructed at the originating site,\n
    \             typically by the User Agent when the message is first\n              queued
    for the Sender-SMTP program.  The envelope\n              addresses may be derived
    from information in the message\n              header, supplied by the user interface
    (e.g., to implement\n              a bcc: request), or derived from local configuration\n
    \             information (e.g., expansion of a mailing list).  The SMTP\n              envelope
    cannot in general be re-derived from the header\n              at a later stage
    in message delivery, so the envelope is\n              transmitted separately
    from the message itself using the\n              MAIL and RCPT commands of SMTP.\n
    \             The text of RFC-821 suggests that mail is to be delivered\n              to
    an individual user at a host.  With the advent of the\n              domain system
    and of mail routing using mail-exchange (MX)\n              resource records,
    implementors should now think of\n              delivering mail to a user at a
    domain, which may or may\n              not be a particular host.  This DOES NOT
    change the fact\n              that SMTP is a host-to-host mail exchange protocol.\n
    \     5.2.2  Canonicalization: RFC-821 Section 3.1\n         The domain names
    that a Sender-SMTP sends in MAIL and RCPT\n         commands MUST have been  \"canonicalized,\"
    i.e., they must be\n         fully-qualified principal names or domain literals,
    not\n         nicknames or domain abbreviations.  A canonicalized name either\n
    \        identifies a host directly or is an MX name; it cannot be a\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         CNAME.\n
    \     5.2.3  VRFY and EXPN Commands: RFC-821 Section 3.3\n         A receiver-SMTP
    MUST implement VRFY and SHOULD implement EXPN\n         (this requirement overrides
    RFC-821).  However, there MAY be\n         configuration information to disable
    VRFY and EXPN in a\n         particular installation; this might even allow EXPN
    to be\n         disabled for selected lists.\n         A new reply code is defined
    for the VRFY command:\n              252 Cannot VRFY user (e.g., info is not local),
    but will\n                  take message for this user and attempt delivery.\n
    \        DISCUSSION:\n              SMTP users and administrators make regular
    use of these\n              commands for diagnosing mail delivery problems.  With
    the\n              increasing use of multi-level mailing list expansion\n              (sometimes
    more than two levels), EXPN has been\n              increasingly important for
    diagnosing inadvertent mail\n              loops.  On the other hand,  some feel
    that EXPN represents\n              a significant privacy, and perhaps even a
    security,\n              exposure.\n      5.2.4  SEND, SOML, and SAML Commands:
    RFC-821 Section 3.4\n         An SMTP MAY implement the commands to send a message
    to a\n         user's terminal: SEND, SOML, and SAML.\n         DISCUSSION:\n
    \             It has been suggested that the use of mail relaying\n              through
    an MX record is inconsistent with the intent of\n              SEND to deliver
    a message immediately and directly to a\n              user's terminal.  However,
    an SMTP receiver that is unable\n              to write directly to the user terminal
    can return a \"251\n              User Not Local\" reply to the RCPT following
    a SEND, to\n              inform the originator of possibly deferred delivery.\n
    \     5.2.5  HELO Command: RFC-821 Section 3.5\n         The sender-SMTP MUST
    ensure that the <domain> parameter in a\n         HELO command is a valid principal
    host domain name for the\n         client host.  As a result, the receiver-SMTP
    will not have to\n         perform MX resolution on this name in order to validate
    the\n         HELO parameter.\n         The HELO receiver MAY verify that the
    HELO parameter really\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         corresponds
    to the IP address of the sender.  However, the\n         receiver MUST NOT refuse
    to accept a message, even if the\n         sender's HELO command fails verification.\n
    \        DISCUSSION:\n              Verifying the HELO parameter requires a domain
    name lookup\n              and may therefore take considerable time.  An alternative\n
    \             tool for tracking bogus mail sources is suggested below\n              (see
    \"DATA Command\").\n              Note also that the HELO argument is still required
    to have\n              valid <domain> syntax, since it will appear in a Received:\n
    \             line; otherwise, a 501 error is to be sent.\n         IMPLEMENTATION:\n
    \             When HELO parameter validation fails, a suggested\n              procedure
    is to insert a note about the unknown\n              authenticity of the sender
    into the message header (e.g.,\n              in the \"Received:\"  line).\n      5.2.6
    \ Mail Relay: RFC-821 Section 3.6\n         We distinguish three types of mail
    (store-and-) forwarding:\n         (1)  A simple forwarder or \"mail exchanger\"
    forwards a message\n              using private knowledge about the recipient;
    see section\n              3.2 of RFC-821.\n         (2)  An SMTP mail \"relay\"
    forwards a message within an SMTP\n              mail environment as the result
    of an explicit source route\n              (as defined in section 3.6 of RFC-821).
    \ The SMTP relay\n              function uses the \"@...:\" form of source route
    from RFC-\n              822 (see Section 5.2.19 below).\n         (3)  A mail
    \"gateway\" passes a message between different\n              environments.  The
    rules for mail gateways are discussed\n              below in Section 5.3.7.\n
    \        An Internet host that is forwarding a message but is not a\n         gateway
    to a different mail environment (i.e., it falls under\n         (1) or (2)) SHOULD
    NOT alter any existing header fields,\n         although the host will add an
    appropriate Received: line as\n         required in Section 5.2.8.\n         A
    Sender-SMTP SHOULD NOT send a RCPT TO: command containing an\n         explicit
    source route using the \"@...:\" address form.  Thus,\n         the relay function
    defined in section  3.6 of RFC-821 should\n         not be used.\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         DISCUSSION:\n
    \             The intent is to discourage all source routing and to\n              abolish
    explicit source routing for mail delivery within\n              the Internet environment.
    \ Source-routing is unnecessary;\n              the simple target address \"user@domain\"
    should always\n              suffice.  This is the result of an explicit architectural\n
    \             decision to use universal naming rather than source\n              routing
    for mail.  Thus, SMTP provides end-to-end\n              connectivity, and the
    DNS provides globally-unique,\n              location-independent names.  MX records
    handle the major\n              case where source routing might otherwise be needed.\n
    \        A receiver-SMTP MUST accept the explicit source route syntax in\n         the
    envelope, but it MAY implement the relay function as\n         defined in section
    3.6 of RFC-821.  If it does not implement\n         the relay function, it SHOULD
    attempt to deliver the message\n         directly to the host to the right of
    the right-most \"@\" sign.\n         DISCUSSION:\n              For example, suppose
    a host that does not implement the\n              relay function receives a message
    with the SMTP command:\n              \"RCPT TO:<@ALPHA,@BETA:joe@GAMMA>\", where
    ALPHA, BETA, and\n              GAMMA represent domain names.  Rather than immediately\n
    \             refusing the message with a 550 error reply as suggested\n              on
    page 20 of RFC-821, the host should try to forward the\n              message
    to GAMMA directly, using: \"RCPT TO:<joe@GAMMA>\".\n              Since this host
    does not support relaying, it is not\n              required to update the reverse
    path.\n              Some have suggested that source routing may be needed\n              occasionally
    for manually routing mail around failures;\n              however, the reality
    and importance of this need is\n              controversial.  The use of explicit
    SMTP mail relaying for\n              this purpose is discouraged, and in fact
    it may not be\n              successful, as many host systems do not support it.
    \ Some\n              have used the \"%-hack\" (see Section 5.2.16) for this\n
    \             purpose.\n      5.2.7  RCPT Command: RFC-821 Section 4.1.1\n         A
    host that supports a receiver-SMTP MUST support the reserved\n         mailbox
    \"Postmaster\".\n         The receiver-SMTP MAY verify RCPT parameters as they
    arrive;\n         however, RCPT responses MUST NOT be delayed beyond a reasonable\n
    \        time (see Section 5.3.2).\n         Therefore, a \"250 OK\" response
    to a RCPT does not necessarily\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         imply
    that the delivery address(es) are valid.  Errors found\n         after message
    acceptance will be reported by mailing a\n         notification message to an
    appropriate address (see Section\n         5.3.3).\n         DISCUSSION:\n              The
    set of conditions under which a RCPT parameter can be\n              validated
    immediately is an engineering design choice.\n              Reporting destination
    mailbox errors to the Sender-SMTP\n              before mail is transferred is
    generally desirable to save\n              time and network bandwidth, but this
    advantage is lost if\n              RCPT verification is lengthy.\n              For
    example, the receiver can verify immediately any\n              simple local reference,
    such as a single locally-\n              registered mailbox.  On the other hand,
    the \"reasonable\n              time\" limitation generally implies deferring
    verification\n              of a mailing list until after the message has been\n
    \             transferred and accepted, since verifying a large mailing\n              list
    can take a very long time.  An implementation might\n              or might not
    choose to defer validation of addresses that\n              are non-local and
    therefore require a DNS lookup.  If a\n              DNS lookup is performed but
    a soft domain system error\n              (e.g., timeout) occurs, validity must
    be assumed.\n      5.2.8  DATA Command: RFC-821 Section 4.1.1\n         Every
    receiver-SMTP (not just one that \"accepts a message for\n         relaying or
    for final delivery\" [SMTP:1]) MUST insert a\n         \"Received:\" line at the
    beginning of a message.  In this line,\n         called a \"time stamp line\"
    in RFC-821:\n         *    The FROM field SHOULD contain both (1) the name of
    the\n              source host as presented in the HELO command and (2) a\n              domain
    literal containing the IP address of the source,\n              determined from
    the TCP connection.\n         *    The ID field MAY contain an \"@\" as suggested
    in RFC-822,\n              but this is not required.\n         *    The FOR field
    MAY contain a list of <path> entries when\n              multiple RCPT commands
    have been given.\n         An Internet mail program MUST NOT change a Received:
    line that\n         was previously added to the message header.\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         DISCUSSION:\n
    \             Including both the source host and the IP source address\n              in
    the Received: line may provide enough information for\n              tracking
    illicit mail sources and eliminate a need to\n              explicitly verify
    the HELO parameter.\n              Received: lines are primarily intended for
    humans tracing\n              mail routes, primarily of diagnosis of faults.  See
    also\n              the discussion under 5.3.7.\n         When the receiver-SMTP
    makes \"final delivery\" of a message,\n         then it MUST pass the MAIL FROM:
    address from the SMTP envelope\n         with the message, for use if an error
    notification message must\n         be sent later (see Section 5.3.3).  There
    is an analogous\n         requirement when gatewaying from the Internet into a
    different\n         mail environment; see Section 5.3.7.\n         DISCUSSION:\n
    \             Note that the final reply to the DATA command depends only\n              upon
    the successful transfer and storage of the message.\n              Any problem
    with the destination address(es) must either\n              (1) have been reported
    in an SMTP error reply to the RCPT\n              command(s), or (2) be reported
    in a later error message\n              mailed to the originator.\n         IMPLEMENTATION:\n
    \             The MAIL FROM: information may be passed as a parameter or\n              in
    a Return-Path: line inserted at the beginning of the\n              message.\n
    \     5.2.9  Command Syntax: RFC-821 Section 4.1.2\n         The syntax shown
    in RFC-821 for the MAIL FROM: command omits\n         the case of an empty path:
    \ \"MAIL FROM: <>\" (see RFC-821 Page\n         15).  An empty reverse path MUST
    be supported.\n      5.2.10  SMTP Replies:  RFC-821 Section 4.2\n         A receiver-SMTP
    SHOULD send only the reply codes listed in\n         section 4.2.2 of RFC-821
    or in this document.  A receiver-SMTP\n         SHOULD use the text shown in examples
    in RFC-821 whenever\n         appropriate.\n         A sender-SMTP MUST determine
    its actions only by the reply\n         code, not by the text (except for 251
    and 551 replies); any\n         text, including no text at all, must be acceptable.
    \ The space\n         (blank) following the reply code is considered part of the\n
    \        text.  Whenever possible, a sender-SMTP SHOULD test only the\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         first
    digit of the reply code, as specified in Appendix E of\n         RFC-821.\n         DISCUSSION:\n
    \             Interoperability problems have arisen with SMTP systems\n              using
    reply codes that are not listed explicitly in RFC-\n              821 Section
    4.3 but are legal according to the theory of\n              reply codes explained
    in Appendix E.\n      5.2.11  Transparency: RFC-821 Section 4.5.2\n         Implementors
    MUST be sure that their mail systems always add\n         and delete periods to
    ensure message transparency.\n      5.2.12  WKS Use in MX Processing: RFC-974,
    p. 5\n         RFC-974 [SMTP:3] recommended that the domain system be queried\n
    \        for WKS (\"Well-Known Service\") records, to verify that each\n         proposed
    mail target does support SMTP.  Later experience has\n         shown that WKS
    is not widely supported, so the WKS step in MX\n         processing SHOULD NOT
    be used.\n      The following are notes on RFC-822, organized by section of that\n
    \     document.\n      5.2.13  RFC-822 Message Specification: RFC-822 Section
    4\n         The syntax shown for the Return-path line omits the possibility\n
    \        of a null return path, which is used to prevent looping of\n         error
    notifications (see Section 5.3.3).  The complete syntax\n         is:\n             return
    = \"Return-path\"  \":\" route-addr\n                    / \"Return-path\"  \":\"
    \"<\" \">\"\n         The set of optional header fields is hereby expanded to
    include\n         the Content-Type field defined in RFC-1049 [SMTP:7].  This\n
    \        field \"allows mail reading systems to automatically identify\n         the
    type of a structured message body and to process it for\n         display accordingly\".
    \ [SMTP:7]  A User Agent MAY support this\n         field.\n      5.2.14  RFC-822
    Date and Time Specification: RFC-822 Section 5\n         The syntax for the date
    is hereby changed to:\n            date = 1*2DIGIT month 2*4DIGIT\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         All
    mail software SHOULD use 4-digit years in dates, to ease\n         the transition
    to the next century.\n         There is a strong trend towards the use of numeric
    timezone\n         indicators, and implementations SHOULD use numeric timezones\n
    \        instead of timezone names.  However, all implementations MUST\n         accept
    either notation.  If timezone names are used, they MUST\n         be exactly as
    defined in RFC-822.\n         The military time zones are specified incorrectly
    in RFC-822:\n         they count the wrong way from UT (the signs are reversed).
    \ As\n         a result, military time zones in RFC-822 headers carry no\n         information.\n
    \        Finally, note that there is a typo in the definition of \"zone\"\n         in
    the syntax summary of appendix D; the correct definition\n         occurs in Section
    3 of RFC-822.\n      5.2.15  RFC-822 Syntax Change: RFC-822 Section 6.1\n         The
    syntactic definition of \"mailbox\" in RFC-822 is hereby\n         changed to:\n
    \           mailbox =  addr-spec            ; simple address\n                    /
    [phrase] route-addr   ; name & addr-spec\n         That is, the phrase preceding
    a route address is now OPTIONAL.\n         This change makes the following header
    field legal, for\n         example:\n             From: <craig@nnsc.nsf.net>\n
    \     5.2.16  RFC-822  Local-part: RFC-822 Section 6.2\n         The basic mailbox
    address specification has the form: \"local-\n         part@domain\".  Here \"local-part\",
    sometimes called the \"left-\n         hand side\" of the address, is domain-dependent.\n
    \        A host that is forwarding the message but is not the\n         destination
    host implied by the right-hand side \"domain\" MUST\n         NOT interpret or
    modify the \"local-part\" of the address.\n         When mail is to be gatewayed
    from the Internet mail environment\n         into a foreign mail environment (see
    Section 5.3.7), routing\n         information for that foreign environment MAY
    be embedded within\n         the \"local-part\" of the address.  The gateway will
    then\n         interpret this local part appropriately for the foreign mail\n
    \        environment.\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         DISCUSSION:\n
    \             Although source routes are discouraged within the Internet\n              (see
    Section 5.2.6), there are non-Internet mail\n              environments whose
    delivery mechanisms do depend upon\n              source routes.  Source routes
    for extra-Internet\n              environments can generally be buried in the
    \"local-part\"\n              of the address (see Section 5.2.16) while mail traverses\n
    \             the Internet.  When the mail reaches the appropriate\n              Internet
    mail gateway, the gateway will interpret the\n              local-part and build
    the necessary address or route for\n              the target mail environment.\n
    \             For example, an Internet host might send mail to:\n              \"a!b!c!user@gateway-domain\".
    \ The complex local part\n              \"a!b!c!user\" would be uninterpreted
    within the Internet\n              domain, but could be parsed and understood
    by the\n              specified mail gateway.\n              An embedded source
    route is sometimes encoded in the\n              \"local-part\" using \"%\" as
    a right-binding routing\n              operator.  For example, in:\n                 user%domain%relay3%relay2@relay1\n
    \             the \"%\" convention implies that the mail is to be routed\n              from
    \"relay1\" through \"relay2\", \"relay3\", and finally to\n              \"user\"
    at \"domain\".  This is commonly known as the \"%-\n              hack\".  It
    is suggested that \"%\" have lower precedence\n              than any other routing
    operator (e.g., \"!\") hidden in the\n              local-part; for example, \"a!b%c\"
    would be interpreted as\n              \"(a!b)%c\".\n              Only the target
    host (in this case, \"relay1\") is permitted\n              to analyze the local-part
    \"user%domain%relay3%relay2\".\n      5.2.17  Domain Literals: RFC-822 Section
    6.2.3\n         A mailer MUST be able to accept and parse an Internet domain\n
    \        literal whose content (\"dtext\"; see RFC-822) is a dotted-\n         decimal
    host address.  This satisfies the requirement of\n         Section 2.1 for the
    case of mail.\n         An SMTP MUST accept and recognize a domain literal for
    any of\n         its own IP addresses.\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n      5.2.18
    \ Common Address Formatting Errors: RFC-822 Section 6.1\n         Errors in formatting
    or parsing 822 addresses are unfortunately\n         common.  This section mentions
    only the most common errors.  A\n         User Agent MUST accept all valid RFC-822
    address formats, and\n         MUST NOT generate illegal address syntax.\n         o
    \   A common error is to leave out the semicolon after a group\n              identifier.\n
    \        o    Some systems fail to fully-qualify domain names in\n              messages
    they generate.  The right-hand side of an \"@\"\n              sign in a header
    address field MUST be a fully-qualified\n              domain name.\n              For
    example, some systems fail to fully-qualify the From:\n              address;
    this prevents a \"reply\" command in the user\n              interface from automatically
    constructing a return\n              address.\n              DISCUSSION:\n                   Although
    RFC-822 allows the local use of abbreviated\n                   domain names within
    a domain, the application of\n                   RFC-822 in Internet mail does
    not allow this.  The\n                   intent is that an Internet host must
    not send an SMTP\n                   message header containing an abbreviated
    domain name\n                   in an address field.  This allows the address
    fields\n                   of the header to be passed without alteration across\n
    \                  the Internet, as required in Section 5.2.6.\n         o    Some
    systems mis-parse multiple-hop explicit source routes\n              such as:\n
    \                 @relay1,@relay2,@relay3:user@domain.\n         o    Some systems
    over-qualify domain names by adding a\n              trailing dot to some or all
    domain names in addresses or\n              message-ids.  This violates RFC-822
    syntax.\n      5.2.19  Explicit Source Routes: RFC-822 Section 6.2.7\n         Internet
    host software SHOULD NOT create an RFC-822 header\n         containing an address
    with an explicit source route, but MUST\n         accept such headers for compatibility
    with earlier systems.\n         DISCUSSION:\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n              In
    an understatement, RFC-822 says \"The use of explicit\n              source routing
    is discouraged\".  Many hosts implemented\n              RFC-822 source routes
    incorrectly, so the syntax cannot be\n              used unambiguously in practice.
    \ Many users feel the\n              syntax is ugly.  Explicit source routes are
    not needed in\n              the mail envelope for delivery; see Section 5.2.6.
    \ For\n              all these reasons, explicit source routes using the RFC-\n
    \             822 notations are not to be used in Internet mail headers.\n              As
    stated in Section 5.2.16, it is necessary to allow an\n              explicit
    source route to be buried in the local-part of an\n              address, e.g.,
    using the \"%-hack\", in order to allow mail\n              to be gatewayed into
    another environment in which explicit\n              source routing is necessary.
    \ The vigilant will observe\n              that there is no way for a User Agent
    to detect and\n              prevent the use of such implicit source routing when
    the\n              destination is within the Internet.  We can only\n              discourage
    source routing of any kind within the Internet,\n              as unnecessary
    and undesirable.\n   5.3  SPECIFIC ISSUES\n      5.3.1  SMTP Queueing Strategies\n
    \        The common structure of a host SMTP implementation includes\n         user
    mailboxes, one or more areas for queueing messages in\n         transit, and one
    or more daemon processes for sending and\n         receiving mail.  The exact
    structure will vary depending on the\n         needs of the users on the host
    and the number and size of\n         mailing lists supported by the host.  We
    describe several\n         optimizations that have proved helpful, particularly
    for\n         mailers supporting high traffic levels.\n         Any queueing strategy
    MUST include:\n         o    Timeouts on all activities.  See Section 5.3.2.\n
    \        o    Never sending error messages in response to error\n              messages.\n
    \        5.3.1.1 Sending Strategy\n            The general model of a sender-SMTP
    is one or more processes\n            that periodically attempt to transmit outgoing
    mail.  In a\n            typical system, the program that composes a message has
    some\n            method for requesting immediate attention for a new piece of\n
    \           outgoing mail, while mail that cannot be transmitted\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n            immediately
    MUST be queued and periodically retried by the\n            sender.  A mail queue
    entry will include not only the\n            message itself but also the envelope
    information.\n            The sender MUST delay retrying a particular destination\n
    \           after one attempt has failed.  In general, the retry\n            interval
    SHOULD be at least 30 minutes; however, more\n            sophisticated and variable
    strategies will be beneficial\n            when the sender-SMTP can determine
    the reason for non-\n            delivery.\n            Retries continue until
    the message is transmitted or the\n            sender gives up; the give-up time
    generally needs to be at\n            least 4-5 days.  The parameters to the retry
    algorithm MUST\n            be configurable.\n            A sender SHOULD keep
    a list of hosts it cannot reach and\n            corresponding timeouts, rather
    than just retrying queued\n            mail items.\n            DISCUSSION:\n
    \                Experience suggests that failures are typically\n                 transient
    (the target system has crashed), favoring a\n                 policy of two connection
    attempts in the first hour the\n                 message is in the queue, and
    then backing off to once\n                 every two or three hours.\n                 The
    sender-SMTP can shorten the queueing delay by\n                 cooperation with
    the receiver-SMTP.  In particular, if\n                 mail is received from
    a particular address, it is good\n                 evidence that any mail queued
    for that host can now be\n                 sent.\n                 The strategy
    may be further modified as a result of\n                 multiple addresses per
    host (see Section 5.3.4), to\n                 optimize delivery time vs. resource
    usage.\n                 A sender-SMTP may have a large queue of messages for\n
    \                each unavailable destination host, and if it retried\n                 all
    these messages in every retry cycle, there would be\n                 excessive
    Internet overhead and the daemon would be\n                 blocked for a long
    period.  Note that an SMTP can\n                 generally determine that a delivery
    attempt has failed\n                 only after a timeout of a minute or more;
    a one minute\n                 timeout per connection will result in a very large\n
    \                delay if it is repeated for dozens or even hundreds of\n                 queued
    messages.\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n            When
    the same message is to be delivered to several users on\n            the same
    host, only one copy of the message SHOULD be\n            transmitted.  That is,
    the sender-SMTP should use the\n            command sequence: RCPT, RCPT,... RCPT,
    DATA instead of the\n            sequence: RCPT, DATA, RCPT, DATA,... RCPT, DATA.\n
    \           Implementation of this efficiency feature is strongly urged.\n            Similarly,
    the sender-SMTP MAY support multiple concurrent\n            outgoing mail transactions
    to achieve timely delivery.\n            However, some limit SHOULD be imposed
    to protect the host\n            from devoting all its resources to mail.\n            The
    use of the different addresses of a multihomed host is\n            discussed
    below.\n         5.3.1.2  Receiving strategy\n            The receiver-SMTP SHOULD
    attempt to keep a pending listen on\n            the SMTP port at all times.  This
    will require the support\n            of multiple incoming TCP connections for
    SMTP.  Some limit\n            MAY be imposed.\n            IMPLEMENTATION:\n
    \                When the receiver-SMTP receives mail from a particular\n                 host
    address, it could notify the sender-SMTP to retry\n                 any mail pending
    for that host address.\n      5.3.2  Timeouts in SMTP\n         There are two
    approaches to timeouts in the sender-SMTP:  (a)\n         limit the time for each
    SMTP command separately, or (b) limit\n         the time for the entire SMTP dialogue
    for a single mail\n         message.  A sender-SMTP SHOULD use option (a), per-command\n
    \        timeouts.  Timeouts SHOULD be easily reconfigurable, preferably\n         without
    recompiling the SMTP code.\n         DISCUSSION:\n              Timeouts are an
    essential feature of an SMTP\n              implementation.  If the timeouts are
    too long (or worse,\n              there are no timeouts), Internet communication
    failures or\n              software bugs in receiver-SMTP programs can tie up
    SMTP\n              processes indefinitely.  If the timeouts are too short,\n
    \             resources will be wasted with attempts that time out part\n              way
    through message delivery.\n              If option (b) is used, the timeout has
    to be very large,\n              e.g., an hour, to allow time to expand very large
    mailing\n              lists.  The timeout may also need to increase linearly\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n              with
    the size of the message, to account for the time to\n              transmit a
    very large message.  A large fixed timeout\n              leads to two problems:
    \ a failure can still tie up the\n              sender for a very long time, and
    very large messages may\n              still spuriously time out (which is a wasteful
    failure!).\n              Using the recommended option (a), a timer is set for
    each\n              SMTP command and for each buffer of the data transfer.\n              The
    latter means that the overall timeout is inherently\n              proportional
    to the size of the message.\n         Based on extensive experience with busy
    mail-relay hosts, the\n         minimum per-command timeout values SHOULD be as
    follows:\n         o    Initial 220 Message: 5 minutes\n              A Sender-SMTP
    process needs to distinguish between a\n              failed TCP connection and
    a delay in receiving the initial\n              220 greeting message.  Many receiver-SMTPs
    will accept a\n              TCP connection but delay delivery of the 220 message
    until\n              their system load will permit more mail to be processed.\n
    \        o    MAIL Command: 5 minutes\n         o    RCPT Command: 5 minutes\n
    \             A longer timeout would be required if processing of\n              mailing
    lists and aliases were not deferred until after\n              the message was
    accepted.\n         o    DATA Initiation: 2 minutes\n              This is while
    awaiting the \"354 Start Input\" reply to a\n              DATA command.\n         o
    \   Data Block: 3 minutes\n              This is while awaiting the completion
    of each TCP SEND\n              call transmitting a chunk of data.\n         o
    \   DATA Termination: 10 minutes.\n              This is while awaiting the \"250
    OK\" reply. When the\n              receiver gets the final period terminating
    the message\n              data, it typically performs processing to deliver the\n
    \             message to a user mailbox.  A spurious timeout at this\n              point
    would be very wasteful, since the message has been\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n              successfully
    sent.\n         A receiver-SMTP SHOULD have a timeout of at least 5 minutes\n
    \        while it is awaiting the next command from the sender.\n      5.3.3  Reliable
    Mail Receipt\n         When the receiver-SMTP accepts a piece of mail (by sending
    a\n         \"250 OK\" message in response to DATA), it is accepting\n         responsibility
    for delivering or relaying the message.  It must\n         take this responsibility
    seriously, i.e., it MUST NOT lose the\n         message for frivolous reasons,
    e.g., because the host later\n         crashes or because of a predictable resource
    shortage.\n         If there is a delivery failure after acceptance of a message,\n
    \        the receiver-SMTP MUST formulate and mail a notification\n         message.
    \ This notification MUST be sent using a null (\"<>\")\n         reverse path
    in the envelope; see Section 3.6 of RFC-821.  The\n         recipient of this
    notification SHOULD be the address from the\n         envelope return path (or
    the Return-Path: line).  However, if\n         this address is null (\"<>\"),
    \ the receiver-SMTP MUST NOT send a\n         notification.  If the address is
    an explicit source route, it\n         SHOULD be stripped down to its final hop.\n
    \        DISCUSSION:\n              For example, suppose that an error notification
    must be\n              sent for a message that arrived with:\n              \"MAIL
    FROM:<@a,@b:user@d>\".  The notification message\n              should be sent
    to: \"RCPT TO:<user@d>\".\n              Some delivery failures after the message
    is accepted by\n              SMTP will be unavoidable.  For example, it may be\n
    \             impossible for the receiver-SMTP to validate all the\n              delivery
    addresses in RCPT command(s) due to a \"soft\"\n              domain system error
    or because the target is a mailing\n              list (see earlier discussion
    of RCPT).\n         To avoid receiving duplicate messages as the result of\n         timeouts,
    a receiver-SMTP MUST seek to minimize the time\n         required to respond to
    the final \".\" that ends a message\n         transfer.  See RFC-1047 [SMTP:4]
    for a discussion of this\n         problem.\n      5.3.4  Reliable Mail Transmission\n
    \        To transmit a message, a sender-SMTP determines the IP address\n         of
    the target host from the destination address in the\n         envelope.  Specifically,
    it maps the string to the right of the\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n         \"@\"
    sign into an IP address.  This mapping or the transfer\n         itself may fail
    with a soft error, in which case the sender-\n         SMTP will requeue the outgoing
    mail for a later retry, as\n         required in Section 5.3.1.1.\n         When
    it succeeds, the mapping can result in a list of\n         alternative delivery
    addresses rather than a single address,\n         because of (a) multiple MX records,
    (b) multihoming, or both.\n         To provide reliable mail transmission, the
    sender-SMTP MUST be\n         able to try (and retry) each of the addresses in
    this list in\n         order, until a delivery attempt succeeds.  However, there
    MAY\n         also be a configurable limit on the number of alternate\n         addresses
    that can be tried.  In any case, a host SHOULD try at\n         least two addresses.\n
    \        The following information is to be used to rank the host\n         addresses:\n
    \        (1)  Multiple MX Records -- these contain a preference\n              indication
    that should be used in sorting.  If there are\n              multiple destinations
    with the same preference and there\n              is no clear reason to favor
    one (e.g., by address\n              preference), then the sender-SMTP SHOULD
    pick one at\n              random to spread the load across multiple mail exchanges\n
    \             for a specific organization; note that this is a\n              refinement
    of the procedure in [DNS:3].\n         (2)  Multihomed host -- The destination
    host (perhaps taken\n              from the preferred MX record) may be multihomed,
    in which\n              case the domain name resolver will return a list of\n
    \             alternative IP addresses.  It is the responsibility of the\n              domain
    name resolver interface (see Section 6.1.3.4 below)\n              to have ordered
    this list by decreasing preference, and\n              SMTP MUST try them in the
    order presented.\n         DISCUSSION:\n              Although the capability
    to try multiple alternative\n              addresses is required, there may be
    circumstances where\n              specific installations want to limit or disable
    the use of\n              alternative addresses.  The question of whether a sender\n
    \             should attempt retries using the different addresses of a\n              multihomed
    host has been controversial.  The main argument\n              for using the multiple
    addresses is that it maximizes the\n              probability of timely delivery,
    and indeed sometimes the\n              probability of any delivery; the counter
    argument is that\n              it may result in unnecessary resource use.\n              Note
    that resource use is also strongly determined by the\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n              sending
    strategy discussed in Section 5.3.1.\n      5.3.5  Domain Name Support\n         SMTP
    implementations MUST use the mechanism defined in Section\n         6.1 for mapping
    between domain names and IP addresses.  This\n         means that every Internet
    SMTP MUST include support for the\n         Internet DNS.\n         In particular,
    a sender-SMTP MUST support the MX record scheme\n         [SMTP:3].  See also
    Section 7.4 of [DNS:2] for information on\n         domain name support for SMTP.\n
    \     5.3.6  Mailing Lists and Aliases\n         An SMTP-capable host SHOULD support
    both the alias and the list\n         form of address expansion for multiple delivery.
    \ When a\n         message is delivered or forwarded to each address of an\n         expanded
    list form, the return address in the envelope\n         (\"MAIL FROM:\") MUST
    be changed to be the address of a person\n         who administers the list, but
    the message header MUST be left\n         unchanged; in particular, the \"From\"
    field of the message is\n         unaffected.\n         DISCUSSION:\n              An
    important mail facility is a mechanism for multi-\n              destination delivery
    of a single message, by transforming\n              or \"expanding\" a pseudo-mailbox
    address into a list of\n              destination mailbox addresses.  When a message
    is sent to\n              such a pseudo-mailbox (sometimes called an \"exploder\"),\n
    \             copies are forwarded or redistributed to each mailbox in\n              the
    expanded list.  We classify such a pseudo-mailbox as\n              an \"alias\"
    or a \"list\", depending upon the expansion\n              rules:\n              (a)
    \ Alias\n                   To expand an alias, the recipient mailer simply\n
    \                  replaces the pseudo-mailbox address in the envelope\n                   with
    each of the expanded addresses in turn; the rest\n                   of the envelope
    and the message body are left\n                   unchanged.  The message is then
    delivered or\n                   forwarded to each expanded address.\n              (b)
    \ List\n                   A mailing list may be said to operate by\n                   \"redistribution\"
    rather than by \"forwarding\".  To\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n                   expand
    a list, the recipient mailer replaces the\n                   pseudo-mailbox address
    in the envelope with each of\n                   the expanded addresses in turn.
    The return address in\n                   the envelope is changed so that all
    error messages\n                   generated by the final deliveries will be returned
    to\n                   a list administrator, not to the message originator,\n
    \                  who generally has no control over the contents of the\n                   list
    and will typically find error messages annoying.\n      5.3.7  Mail Gatewaying\n
    \        Gatewaying mail between different mail environments, i.e.,\n         different
    mail formats and protocols, is complex and does not\n         easily yield to
    standardization.  See for example [SMTP:5a],\n         [SMTP:5b].  However, some
    general requirements may be given for\n         a gateway between the Internet
    and another mail environment.\n         (A)  Header fields MAY be rewritten when
    necessary as messages\n              are gatewayed across mail environment boundaries.\n
    \             DISCUSSION:\n                   This may involve interpreting the
    local-part of the\n                   destination address, as suggested in Section
    5.2.16.\n                   The other mail systems gatewayed to the Internet\n
    \                  generally use a subset of RFC-822 headers, but some\n                   of
    them do not have an equivalent to the SMTP\n                   envelope.  Therefore,
    when a message leaves the\n                   Internet environment, it may be
    necessary to fold the\n                   SMTP envelope information into the message
    header.  A\n                   possible solution would be to create new header\n
    \                  fields to carry the envelope information (e.g., \"X-\n                   SMTP-MAIL:\"
    and \"X-SMTP-RCPT:\"); however, this would\n                   require changes
    in mail programs in the foreign\n                   environment.\n         (B)
    \ When forwarding a message into or out of the Internet\n              environment,
    a gateway MUST prepend a Received: line, but\n              it MUST NOT alter
    in any way a Received: line that is\n              already in the header.\n              DISCUSSION:\n
    \                  This requirement is a subset of the general\n                   \"Received:\"
    line requirement of Section 5.2.8; it is\n                   restated here for
    emphasis.\n                   Received: fields of messages originating from other\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n                   environments
    may not conform exactly to RFC822.\n                   However, the most important
    use of Received: lines is\n                   for debugging mail faults, and this
    debugging can be\n                   severely hampered by well-meaning gateways
    that try\n                   to \"fix\" a Received: line.\n                   The
    gateway is strongly encouraged to indicate the\n                   environment
    and protocol in the \"via\" clauses of\n                   Received field(s) that
    it supplies.\n         (C)  From the Internet side, the gateway SHOULD accept
    all\n              valid address formats in SMTP commands and in RFC-822\n              headers,
    and all valid RFC-822 messages.  Although a\n              gateway must accept
    an RFC-822 explicit source route\n              (\"@...:\" format) in either the
    RFC-822 header or in the\n              envelope, it MAY or may not act on the
    source route; see\n              Sections 5.2.6 and 5.2.19.\n              DISCUSSION:\n
    \                  It is often tempting to restrict the range of\n                   addresses
    accepted at the mail gateway to simplify\n                   the translation into
    addresses for the remote\n                   environment.  This practice is based
    on the\n                   assumption that mail users have control over the\n
    \                  addresses their mailers send to the mail gateway.  In\n                   practice,
    however, users have little control over the\n                   addresses that
    are finally sent; their mailers are\n                   free to change addresses
    into any legal RFC-822\n                   format.\n         (D)  The gateway
    MUST ensure that all header fields of a\n              message that it forwards
    into the Internet meet the\n              requirements for Internet mail.  In
    particular, all\n              addresses in \"From:\", \"To:\", \"Cc:\", etc.,
    fields must be\n              transformed (if necessary) to satisfy RFC-822 syntax,
    and\n              they must be effective and useful for sending replies.\n         (E)
    \ The translation algorithm used to convert mail from the\n              Internet
    protocols to another environment's protocol\n              SHOULD try to ensure
    that error messages from the foreign\n              mail environment are delivered
    to the return path from the\n              SMTP envelope, not to the sender listed
    in the \"From:\"\n              field of the RFC-822 message.\n              DISCUSSION:\n
    \                  Internet mail lists usually place the address of the\n                   mail
    list maintainer in the envelope but leave the\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n                   original
    message header intact (with the \"From:\"\n                   field containing
    the original sender).  This yields\n                   the behavior the average
    recipient expects: a reply\n                   to the header gets sent to the
    original sender, not\n                   to a mail list maintainer; however, errors
    get sent\n                   to the maintainer (who can fix the problem) and not\n
    \                  the sender (who probably cannot).\n         (F)  Similarly,
    when forwarding a message from another\n              environment into the Internet,
    the gateway SHOULD set the\n              envelope return path in accordance with
    an error message\n              return address, if any, supplied by the foreign\n
    \             environment.\n      5.3.8  Maximum Message Size\n         Mailer
    software MUST be able to send and receive messages of at\n         least 64K bytes
    in length (including header), and a much larger\n         maximum size is highly
    desirable.\n         DISCUSSION:\n              Although SMTP does not define
    the maximum size of a\n              message, many systems impose implementation
    limits.\n              The current de facto minimum limit in the Internet is 64K\n
    \             bytes.  However, electronic mail is used for a variety of\n              purposes
    that create much larger messages.  For example,\n              mail is often used
    instead of FTP for transmitting ASCII\n              files, and in particular
    to transmit entire documents.  As\n              a result, messages can be 1 megabyte
    or even larger.  We\n              note that the present document together with
    its lower-\n              layer companion contains 0.5 megabytes.\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n   5.4
    \ SMTP REQUIREMENTS SUMMARY\n                                               |
    \         | | | |S| |\n                                               |          |
    | | |H| |F\n                                               |          | | | |O|M|o\n
    \                                              |          | |S| |U|U|o\n                                               |
    \         | |H| |L|S|t\n                                               |          |M|O|
    |D|T|n\n                                               |          |U|U|M| | |o\n
    \                                              |          |S|L|A|N|N|t\n                                               |
    \         |T|D|Y|O|O|t\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - 'FEATURE                                        |SECTION   | | | |T|T|e

    '
  title: FEATURE                                        |SECTION   | | | |T|T|e
- contents:
  - "-----------------------------------------------|----------|-|-|-|-|-|--\n                                               |
    \         | | | | | |\n"
  title: '-----------------------------------------------|----------|-|-|-|-|-|--'
- contents:
  - "RECEIVER-SMTP:                                 |          | | | | | |\n  Implement
    VRFY                               |5.2.3     |x| | | | |\n  Implement EXPN                               |5.2.3
    \    | |x| | | |\n    EXPN, VRFY configurable                    |5.2.3     |
    | |x| | |\n  Implement SEND, SOML, SAML                   |5.2.4     | | |x| |
    |\n  Verify HELO parameter                        |5.2.5     | | |x| | |\n    Refuse
    message with bad HELO               |5.2.5     | | | | |x|\n  Accept explicit
    src-route syntax in env.     |5.2.6     |x| | | | |\n  Support \"postmaster\"
    \                        |5.2.7     |x| | | | |\n  Process RCPT when received
    (except lists)    |5.2.7     | | |x| | |\n      Long delay of RCPT responses             |5.2.7
    \    | | | | |x|\n                                               |          |
    | | | | |\n  Add Received: line                           |5.2.8     |x| | | |
    |\n      Received: line include domain literal    |5.2.8     | |x| | | |\n  Change
    previous Received: line               |5.2.8     | | | | |x|\n  Pass Return-Path
    info (final deliv/gwy)      |5.2.8     |x| | | | |\n  Support empty reverse path
    \                  |5.2.9     |x| | | | |\n  Send only official reply codes               |5.2.10
    \   | |x| | | |\n  Send text from RFC-821 when appropriate      |5.2.10    | |x|
    | | |\n  Delete \".\" for transparency                  |5.2.11    |x| | | | |\n
    \ Accept and recognize self domain literal(s)  |5.2.17    |x| | | | |\n                                               |
    \         | | | | | |\n  Error message about error message            |5.3.1     |
    | | | |x|\n  Keep pending listen on SMTP port             |5.3.1.2   | |x| | |
    |\n  Provide limit on recv concurrency            |5.3.1.2   | | |x| | |\n  Wait
    at least 5 mins for next sender cmd     |5.3.2     | |x| | | |\n  Avoidable delivery
    failure after \"250 OK\"    |5.3.3     | | | | |x|\n  Send error notification
    msg after accept     |5.3.3     |x| | | | |\n    Send using null return path                |5.3.3
    \    |x| | | | |\n    Send to envelope return path               |5.3.3     |
    |x| | | |\n    Send to null address                       |5.3.3     | | | | |x|\n
    \   Strip off explicit src route               |5.3.3     | |x| | | |\n  Minimize
    acceptance delay (RFC-1047)         |5.3.3     |x| | | | |\n"
  title: 'RECEIVER-SMTP:                                 |          | | | | | |'
- contents:
  - '-----------------------------------------------|----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|----------|-|-|-|-|-|--'
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n                                               |
    \         | | | | | |\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "SENDER-SMTP:                                   |          | | | | | |\n  Canonicalized
    domain names in MAIL, RCPT     |5.2.2     |x| | | | |\n  Implement SEND, SOML,
    SAML                   |5.2.4     | | |x| | |\n  Send valid principal host name
    in HELO       |5.2.5     |x| | | | |\n  Send explicit source route in RCPT TO:
    \      |5.2.6     | | | |x| |\n  Use only reply code to determine action      |5.2.10
    \   |x| | | | |\n  Use only high digit of reply code when poss. |5.2.10    | |x|
    | | |\n  Add \".\" for transparency                     |5.2.11    |x| | | | |\n
    \                                              |          | | | | | |\n  Retry
    messages after soft failure            |5.3.1.1   |x| | | | |\n    Delay before
    retry                         |5.3.1.1   |x| | | | |\n    Configurable retry parameters
    \             |5.3.1.1   |x| | | | |\n    Retry once per each queued dest host
    \      |5.3.1.1   | |x| | | |\n  Multiple RCPT's for same DATA                |5.3.1.1
    \  | |x| | | |\n  Support multiple concurrent transactions     |5.3.1.1   | |
    |x| | |\n    Provide limit on concurrency               |5.3.1.1   | |x| | | |\n
    \                                              |          | | | | | |\n  Timeouts
    on all activities                   |5.3.1     |x| | | | |\n    Per-command timeouts
    \                      |5.3.2     | |x| | | |\n    Timeouts easily reconfigurable
    \            |5.3.2     | |x| | | |\n    Recommended times                          |5.3.2
    \    | |x| | | |\n  Try alternate addr's in order                |5.3.4     |x|
    | | | |\n    Configurable limit on alternate tries      |5.3.4     | | |x| | |\n
    \   Try at least two alternates                |5.3.4     | |x| | | |\n  Load-split
    across equal MX alternates        |5.3.4     | |x| | | |\n  Use the Domain Name
    System                   |5.3.5     |x| | | | |\n    Support MX records                         |5.3.5
    \    |x| | | | |\n    Use WKS records in MX processing           |5.2.12    |
    | | |x| |\n"
  title: 'SENDER-SMTP:                                   |          | | | | | |'
- contents:
  - "-----------------------------------------------|----------|-|-|-|-|-|--\n                                               |
    \         | | | | | |\n"
  title: '-----------------------------------------------|----------|-|-|-|-|-|--'
- contents:
  - "MAIL FORWARDING:                               |          | | | | | |\n  Alter
    existing header field(s)               |5.2.6     | | | |x| |\n  Implement relay
    function: 821/section 3.6    |5.2.6     | | |x| | |\n    If not, deliver to RHS
    domain              |5.2.6     | |x| | | |\n  Interpret 'local-part' of addr               |5.2.16
    \   | | | | |x|\n                                               |          | |
    | | | |\n"
  title: 'MAIL FORWARDING:                               |          | | | | | |'
- contents:
  - "MAILING LISTS AND ALIASES                      |          | | | | | |\n  Support
    both                                 |5.3.6     | |x| | | |\n  Report mail list
    error to local admin.       |5.3.6     |x| | | | |\n                                               |
    \         | | | | | |\n"
  title: MAILING LISTS AND ALIASES                      |          | | | | | |
- contents:
  - "MAIL GATEWAYS:                                 |          | | | | | |\n  Embed
    foreign mail route in local-part       |5.2.16    | | |x| | |\n  Rewrite header
    fields when necessary         |5.3.7     | | |x| | |\n  Prepend Received: line
    \                      |5.3.7     |x| | | | |\n  Change existing Received: line
    \              |5.3.7     | | | | |x|\n  Accept full RFC-822 on Internet side
    \        |5.3.7     | |x| | | |\n  Act on RFC-822 explicit source route         |5.3.7
    \    | | |x| | |\n"
  title: 'MAIL GATEWAYS:                                 |          | | | | | |'
- contents:
  - "RFC1123                  MAIL -- SMTP & RFC-822             October 1989\n  Send
    only valid RFC-822 on Internet side     |5.3.7     |x| | | | |\n  Deliver error
    msgs to envelope addr          |5.3.7     | |x| | | |\n  Set env return path from
    err return addr     |5.3.7     | |x| | | |\n                                               |
    \         | | | | | |\n"
  title: RFC1123                  MAIL -- SMTP & RFC-822             October 1989
- contents:
  - "USER AGENT -- RFC-822                          |          | | | | | |\n  Allow
    user to enter <route> address          |5.2.6     | | | |x| |\n  Support RFC-1049
    Content Type field          |5.2.13    | | |x| | |\n  Use 4-digit years                            |5.2.14
    \   | |x| | | |\n  Generate numeric timezones                   |5.2.14    | |x|
    | | |\n  Accept all timezones                         |5.2.14    |x| | | | |\n
    \ Use non-num timezones from RFC-822           |5.2.14    |x| | | | |\n  Omit
    phrase before route-addr                |5.2.15    | | |x| | |\n  Accept and parse
    dot.dec. domain literals    |5.2.17    |x| | | | |\n  Accept all RFC-822 address
    formats           |5.2.18    |x| | | | |\n  Generate invalid RFC-822 address format
    \     |5.2.18    | | | | |x|\n  Fully-qualified domain names in header       |5.2.18
    \   |x| | | | |\n  Create explicit src route in header          |5.2.19    | |
    | |x| |\n  Accept explicit src route in header          |5.2.19    |x| | | | |\n
    \                                              |          | | | | | |\n"
  title: USER AGENT -- RFC-822                          |          | | | | | |
- contents:
  - 'Send/recv at least 64KB messages               |5.3.8     |x| | | | |

    '
  title: Send/recv at least 64KB messages               |5.3.8     |x| | | | |
- contents:
  - 'RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989

    '
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "6. SUPPORT SERVICES\n   6.1 DOMAIN NAME TRANSLATION\n      6.1.1 INTRODUCTION\n
    \        Every host MUST implement a resolver for the Domain Name System\n         (DNS),
    and it MUST implement a mechanism using this DNS\n         resolver to convert
    host names to IP addresses and vice-versa\n         [DNS:1, DNS:2].\n         In
    addition to the DNS, a host MAY also implement a host name\n         translation
    mechanism that searches a local Internet host\n         table.  See Section 6.1.3.8
    for more information on this\n         option.\n         DISCUSSION:\n              Internet
    host name translation was originally performed by\n              searching local
    copies of a table of all hosts.  This\n              table became too large to
    update and distribute in a\n              timely manner and too large to fit into
    many hosts, so the\n              DNS was invented.\n              The DNS creates
    a distributed database used primarily for\n              the translation between
    host names and host addresses.\n              Implementation of DNS software is
    required.  The DNS\n              consists of two logically distinct parts: name
    servers and\n              resolvers (although implementations often combine these\n
    \             two logical parts in the interest of efficiency) [DNS:2].\n              Domain
    name servers store authoritative data about certain\n              sections of
    the database and answer queries about the\n              data.  Domain resolvers
    query domain name servers for data\n              on behalf of user processes.
    \ Every host therefore needs a\n              DNS resolver; some host machines
    will also need to run\n              domain name servers.  Since no name server
    has complete\n              information, in general it is necessary to obtain\n
    \             information from more than one name server to resolve a\n              query.\n
    \     6.1.2  PROTOCOL WALK-THROUGH\n         An implementor must study references
    [DNS:1] and [DNS:2]\n         carefully.  They provide a thorough description
    of the theory,\n         protocol, and implementation of the domain name system,
    and\n         reflect several years of experience.\n"
  title: 6. SUPPORT SERVICES
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n         6.1.2.1
    \ Resource Records with Zero TTL: RFC-1035 Section 3.2.1\n            All DNS
    name servers and resolvers MUST properly handle RRs\n            with a zero TTL:
    return the RR to the client but do not\n            cache it.\n            DISCUSSION:\n
    \                Zero TTL values are interpreted to mean that the RR can\n                 only
    be used for the transaction in progress, and\n                 should not be cached;
    they are useful for extremely\n                 volatile data.\n         6.1.2.2
    \ QCLASS Values: RFC-1035 Section 3.2.5\n            A query with \"QCLASS=*\"
    SHOULD NOT be used unless the\n            requestor is seeking data from more
    than one class.  In\n            particular, if the requestor is only interested
    in Internet\n            data types, QCLASS=IN MUST be used.\n         6.1.2.3
    \ Unused Fields: RFC-1035 Section 4.1.1\n            Unused fields in a query
    or response message MUST be zero.\n         6.1.2.4  Compression: RFC-1035 Section
    4.1.4\n            Name servers MUST use compression in responses.\n            DISCUSSION:\n
    \                Compression is essential to avoid overflowing UDP\n                 datagrams;
    see Section 6.1.3.2.\n         6.1.2.5  Misusing Configuration Info: RFC-1035
    Section 6.1.2\n            Recursive name servers and full-service resolvers generally\n
    \           have some configuration information containing hints about\n            the
    location of root or local name servers.  An\n            implementation MUST NOT
    include any of these hints in a\n            response.\n            DISCUSSION:\n
    \                Many implementors have found it convenient to store\n                 these
    hints as if they were cached data, but some\n                 neglected to ensure
    that this \"cached data\" was not\n                 included in responses.  This
    has caused serious\n                 problems in the Internet when the hints were
    obsolete\n                 or incorrect.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n      6.1.3
    \ SPECIFIC ISSUES\n         6.1.3.1  Resolver Implementation\n            A name
    resolver SHOULD be able to multiplex concurrent\n            requests if the host
    supports concurrent processes.\n            In implementing a DNS resolver, one
    of two different models\n            MAY optionally be chosen: a full-service
    resolver, or a stub\n            resolver.\n            (A)  Full-Service Resolver\n
    \                A full-service resolver is a complete implementation of\n                 the
    resolver service, and is capable of dealing with\n                 communication
    failures, failure of individual name\n                 servers, location of the
    proper name server for a given\n                 name, etc.  It must satisfy the
    following requirements:\n                 o    The resolver MUST implement a local
    caching\n                      function to avoid repeated remote access for\n
    \                     identical requests, and MUST time out information\n                      in
    the cache.\n                 o    The resolver SHOULD be configurable with start-up\n
    \                     information pointing to multiple root name servers\n                      and
    multiple name servers for the local domain.\n                      This insures
    that the resolver will be able to\n                      access the whole name
    space in normal cases, and\n                      will be able to access local
    domain information\n                      should the local network become disconnected
    from\n                      the rest of the Internet.\n            (B)  Stub Resolver\n
    \                A \"stub resolver\" relies on the services of a recursive\n                 name
    server on the connected network or a \"nearby\"\n                 network.  This
    scheme allows the host to pass on the\n                 burden of the resolver
    function to a name server on\n                 another host.  This model is often
    essential for less\n                 capable hosts, such as PCs, and is also recommended\n
    \                when the host is one of several workstations on a local\n                 network,
    because it allows all of the workstations to\n                 share the cache
    of the recursive name server and hence\n                 reduce the number of
    domain requests exported by the\n                 local network.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n                 At
    a minimum, the stub resolver MUST be capable of\n                 directing its
    requests to redundant recursive name\n                 servers.  Note that recursive
    name servers are allowed\n                 to restrict the sources of requests
    that they will\n                 honor, so the host administrator must verify
    that the\n                 service will be provided.  Stub resolvers MAY implement\n
    \                caching if they choose, but if so, MUST timeout cached\n                 information.\n
    \        6.1.3.2  Transport Protocols\n            DNS resolvers and recursive
    servers MUST support UDP, and\n            SHOULD support TCP, for sending (non-zone-transfer)
    queries.\n            Specifically, a DNS resolver or server that is sending a\n
    \           non-zone-transfer query MUST send a UDP query first.  If the\n            Answer
    section of the response is truncated and if the\n            requester supports
    TCP, it SHOULD try the query again using\n            TCP.\n            DNS servers
    MUST be able to service UDP queries and SHOULD\n            be able to service
    TCP queries.  A name server MAY limit the\n            resources it devotes to
    TCP queries, but it SHOULD NOT\n            refuse to service a TCP query just
    because it would have\n            succeeded with UDP.\n            Truncated
    responses MUST NOT be saved (cached) and later\n            used in such a way
    that the fact that they are truncated is\n            lost.\n            DISCUSSION:\n
    \                UDP is preferred over TCP for queries because UDP\n                 queries
    have much lower overhead, both in packet count\n                 and in connection
    state.  The use of UDP is essential\n                 for heavily-loaded servers,
    especially the root\n                 servers.  UDP also offers additional robustness,
    since\n                 a resolver can attempt several UDP queries to different\n
    \                servers for the cost of a single TCP query.\n                 It
    is possible for a DNS response to be truncated,\n                 although this
    is a very rare occurrence in the present\n                 Internet DNS.  Practically
    speaking, truncation cannot\n                 be predicted, since it is data-dependent.
    \ The\n                 dependencies include the number of RRs in the answer,\n
    \                the size of each RR, and the savings in space realized\n                 by
    the name compression algorithm.  As a rule of thumb,\n                 truncation
    in NS and MX lists should not occur for\n                 answers containing 15
    or fewer RRs.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n                 Whether
    it is possible to use a truncated answer\n                 depends on the application.
    \ A mailer must not use a\n                 truncated MX response, since this
    could lead to mail\n                 loops.\n                 Responsible practices
    can make UDP suffice in the vast\n                 majority of cases.  Name servers
    must use compression\n                 in responses.  Resolvers must differentiate
    truncation\n                 of the Additional section of a response (which only\n
    \                loses extra information) from truncation of the Answer\n                 section
    (which for MX records renders the response\n                 unusable by mailers).
    \ Database administrators should\n                 list only a reasonable number
    of primary names in lists\n                 of name servers, MX alternatives,
    etc.\n                 However, it is also clear that some new DNS record\n                 types
    defined in the future will contain information\n                 exceeding the
    512 byte limit that applies to UDP, and\n                 hence will require TCP.
    \ Thus, resolvers and name\n                 servers should implement TCP services
    as a backup to\n                 UDP today, with the knowledge that they will
    require\n                 the TCP service in the future.\n            By private
    agreement, name servers and resolvers MAY arrange\n            to use TCP for
    all traffic between themselves.  TCP MUST be\n            used for zone transfers.\n
    \           A DNS server MUST have sufficient internal concurrency that\n            it
    can continue to process UDP queries while awaiting a\n            response or
    performing a zone transfer on an open TCP\n            connection [DNS:2].\n            A
    server MAY support a UDP query that is delivered using an\n            IP broadcast
    or multicast address.  However, the Recursion\n            Desired bit MUST NOT
    be set in a query that is multicast,\n            and MUST be ignored by name
    servers receiving queries via a\n            broadcast or multicast address.  A
    host that sends broadcast\n            or multicast DNS queries SHOULD send them
    only as occasional\n            probes, caching the IP address(es) it obtains
    from the\n            response(s) so it can normally send unicast queries.\n            DISCUSSION:\n
    \                Broadcast or (especially) IP multicast can provide a\n                 way
    to locate nearby name servers without knowing their\n                 IP addresses
    in advance.  However, general broadcasting\n                 of recursive queries
    can result in excessive and\n                 unnecessary load on both network
    and servers.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n         6.1.3.3
    \ Efficient Resource Usage\n            The following requirements on servers
    and resolvers are very\n            important to the health of the Internet as
    a whole,\n            particularly when DNS services are invoked repeatedly by\n
    \           higher level automatic servers, such as mailers.\n            (1)
    \ The resolver MUST implement retransmission controls to\n                 insure
    that it does not waste communication bandwidth,\n                 and MUST impose
    finite bounds on the resources consumed\n                 to respond to a single
    request.  See [DNS:2] pages 43-\n                 44 for specific recommendations.\n
    \           (2)  After a query has been retransmitted several times\n                 without
    a response, an implementation MUST give up and\n                 return a soft
    error to the application.\n            (3)  All DNS name servers and resolvers
    SHOULD cache\n                 temporary failures, with a timeout period of the
    order\n                 of minutes.\n                 DISCUSSION:\n                      This
    will prevent applications that immediately\n                      retry soft failures
    (in violation of Section 2.2\n                      of this document) from generating
    excessive DNS\n                      traffic.\n            (4)  All DNS name servers
    and resolvers SHOULD cache\n                 negative responses that indicate
    the specified name, or\n                 data of the specified type, does not
    exist, as\n                 described in [DNS:2].\n            (5)  When a DNS
    server or resolver retries a UDP query, the\n                 retry interval SHOULD
    be constrained by an exponential\n                 backoff algorithm, and SHOULD
    also have upper and lower\n                 bounds.\n                 IMPLEMENTATION:\n
    \                     A measured RTT and variance (if available) should\n                      be
    used to calculate an initial retransmission\n                      interval.  If
    this information is not available, a\n                      default of no less
    than 5 seconds should be used.\n                      Implementations may limit
    the retransmission\n                      interval, but this limit must exceed
    twice the\n                      Internet maximum segment lifetime plus service\n
    \                     delay at the name server.\n            (6)  When a resolver
    or server receives a Source Quench for\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n                 a
    query it has issued, it SHOULD take steps to reduce\n                 the rate
    of querying that server in the near future.  A\n                 server MAY ignore
    a Source Quench that it receives as\n                 the result of sending a
    response datagram.\n                 IMPLEMENTATION:\n                      One
    recommended action to reduce the rate is to\n                      send the next
    query attempt to an alternate\n                      server, if there is one available.
    \ Another is to\n                      backoff the retry interval for the same
    server.\n         6.1.3.4  Multihomed Hosts\n            When the host name-to-address
    function encounters a host\n            with multiple addresses, it SHOULD rank
    or sort the\n            addresses using knowledge of the immediately connected\n
    \           network number(s) and any other applicable performance or\n            history
    information.\n            DISCUSSION:\n                 The different addresses
    of a multihomed host generally\n                 imply different Internet paths,
    and some paths may be\n                 preferable to others in performance, reliability,
    or\n                 administrative restrictions.  There is no general way\n                 for
    the domain system to determine the best path.  A\n                 recommended
    approach is to base this decision on local\n                 configuration information
    set by the system\n                 administrator.\n            IMPLEMENTATION:\n
    \                The following scheme has been used successfully:\n                 (a)
    \ Incorporate into the host configuration data a\n                      Network-Preference
    List, that is simply a list of\n                      networks in preferred order.
    \ This list may be\n                      empty if there is no preference.\n                 (b)
    \ When a host name is mapped into a list of IP\n                      addresses,
    these addresses should be sorted by\n                      network number, into
    the same order as the\n                      corresponding networks in the Network-Preference\n
    \                     List.  IP addresses whose networks do not appear\n                      in
    the Network-Preference List should be placed at\n                      the end
    of the list.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n         6.1.3.5
    \ Extensibility\n            DNS software MUST support all well-known, class-independent\n
    \           formats [DNS:2], and SHOULD be written to minimize the\n            trauma
    associated with the introduction of new well-known\n            types and local
    experimentation with non-standard types.\n            DISCUSSION:\n                 The
    data types and classes used by the DNS are\n                 extensible, and thus
    new types will be added and old\n                 types deleted or redefined.
    \ Introduction of new data\n                 types ought to be dependent only
    upon the rules for\n                 compression of domain names inside DNS messages,
    and\n                 the translation between printable (i.e., master file)\n
    \                and internal formats for Resource Records (RRs).\n                 Compression
    relies on knowledge of the format of data\n                 inside a particular
    RR.  Hence compression must only be\n                 used for the contents of
    well-known, class-independent\n                 RRs, and must never be used for
    class-specific RRs or\n                 RR types that are not well-known.  The
    owner name of an\n                 RR is always eligible for compression.\n                 A
    name server may acquire, via zone transfer, RRs that\n                 the server
    doesn't know how to convert to printable\n                 format.  A resolver
    can receive similar information as\n                 the result of queries.  For
    proper operation, this data\n                 must be preserved, and hence the
    implication is that\n                 DNS software cannot use textual formats
    for internal\n                 storage.\n                 The DNS defines domain
    name syntax very generally -- a\n                 string of labels each containing
    up to 63 8-bit octets,\n                 separated by dots, and with a maximum
    total of 255\n                 octets.  Particular applications of the DNS are\n
    \                permitted to further constrain the syntax of the domain\n                 names
    they use, although the DNS deployment has led to\n                 some applications
    allowing more general names.  In\n                 particular, Section 2.1 of
    this document liberalizes\n                 slightly the syntax of a legal Internet
    host name that\n                 was defined in RFC-952 [DNS:4].\n         6.1.3.6
    \ Status of RR Types\n            Name servers MUST be able to load all RR types
    except MD and\n            MF from configuration files.  The MD and MF types are\n
    \           obsolete and MUST NOT be implemented; in particular, name\n            servers
    MUST NOT load these types from configuration files.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n            DISCUSSION:\n
    \                The RR types MB, MG, MR, NULL, MINFO and RP are\n                 considered
    experimental, and applications that use the\n                 DNS cannot expect
    these RR types to be supported by\n                 most domains.  Furthermore
    these types are subject to\n                 redefinition.\n                 The
    TXT and WKS RR types have not been widely used by\n                 Internet sites;
    as a result, an application cannot rely\n                 on the the existence
    of a TXT or WKS RR in most\n                 domains.\n         6.1.3.7  Robustness\n
    \           DNS software may need to operate in environments where the\n            root
    servers or other servers are unavailable due to network\n            connectivity
    or other problems.  In this situation, DNS name\n            servers and resolvers
    MUST continue to provide service for\n            the reachable part of the name
    space, while giving temporary\n            failures for the rest.\n            DISCUSSION:\n
    \                Although the DNS is meant to be used primarily in the\n                 connected
    Internet, it should be possible to use the\n                 system in networks
    which are unconnected to the\n                 Internet.  Hence implementations
    must not depend on\n                 access to root servers before providing service
    for\n                 local names.\n         6.1.3.8  Local Host Table\n            DISCUSSION:\n
    \                A host may use a local host table as a backup or\n                 supplement
    to the DNS.  This raises the question of\n                 which takes precedence,
    the DNS or the host table; the\n                 most flexible approach would
    make this a configuration\n                 option.\n                 Typically,
    the contents of such a supplementary host\n                 table will be determined
    locally by the site.  However,\n                 a publically-available table
    of Internet hosts is\n                 maintained by the DDN Network Information
    Center (DDN\n                 NIC), with a format documented in [DNS:4].  This
    table\n                 can be retrieved from the DDN NIC using a protocol\n                 described
    in [DNS:5].  It must be noted that this table\n                 contains only
    a small fraction of all Internet hosts.\n                 Hosts using this protocol
    to retrieve the DDN NIC host\n                 table should use the VERSION command
    to check if the\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n                 table
    has changed before requesting the entire table\n                 with the ALL
    command.  The VERSION identifier should be\n                 treated as an arbitrary
    string and tested only for\n                 equality; no numerical sequence may
    be assumed.\n                 The DDN NIC host table includes administrative\n
    \                information that is not needed for host operation and\n                 is
    therefore not currently included in the DNS\n                 database; examples
    include network and gateway entries.\n                 However, much of this additional
    information will be\n                 added to the DNS in the future.  Conversely,
    the DNS\n                 provides essential services (in particular, MX records)\n
    \                that are not available from the DDN NIC host table.\n      6.1.4
    \ DNS USER INTERFACE\n         6.1.4.1  DNS Administration\n            This document
    is concerned with design and implementation\n            issues in host software,
    not with administrative or\n            operational issues.  However, administrative
    issues are of\n            particular importance in the DNS, since errors in particular\n
    \           segments of this large distributed database can cause poor\n            or
    erroneous performance for many sites.  These issues are\n            discussed
    in [DNS:6] and [DNS:7].\n         6.1.4.2  DNS User Interface\n            Hosts
    MUST provide an interface to the DNS for all\n            application programs
    running on the host.  This interface\n            will typically direct requests
    to a system process to\n            perform the resolver function [DNS:1, 6.1:2].\n
    \           At a minimum, the basic interface MUST support a request for\n            all
    information of a specific type and class associated with\n            a specific
    name, and it MUST return either all of the\n            requested information,
    a hard error code, or a soft error\n            indication.  When there is no
    error, the basic interface\n            returns the complete response information
    without\n            modification, deletion, or ordering, so that the basic\n
    \           interface will not need to be changed to accommodate new\n            data
    types.\n            DISCUSSION:\n                 The soft error indication is
    an essential part of the\n                 interface, since it may not always
    be possible to\n                 access particular information from the DNS; see
    Section\n                 6.1.3.3.\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n            A
    host MAY provide other DNS interfaces tailored to\n            particular functions,
    transforming the raw domain data into\n            formats more suited to these
    functions.  In particular, a\n            host MUST provide a DNS interface to
    facilitate translation\n            between host addresses and host names.\n         6.1.4.3
    Interface Abbreviation Facilities\n            User interfaces MAY provide a method
    for users to enter\n            abbreviations for commonly-used names.  Although
    the\n            definition of such methods is outside of the scope of the\n            DNS
    specification, certain rules are necessary to insure\n            that these methods
    allow access to the entire DNS name space\n            and to prevent excessive
    use of Internet resources.\n            If an abbreviation method is provided,
    then:\n            (a)  There MUST be some convention for denoting that a name\n
    \                is already complete, so that the abbreviation method(s)\n                 are
    suppressed.  A trailing dot is the usual method.\n            (b)  Abbreviation
    expansion MUST be done exactly once, and\n                 MUST be done in the
    context in which the name was\n                 entered.\n            DISCUSSION:\n
    \                For example, if an abbreviation is used in a mail\n                 program
    for a destination, the abbreviation should be\n                 expanded into
    a full domain name and stored in the\n                 queued message with an
    indication that it is already\n                 complete.  Otherwise, the abbreviation
    might be\n                 expanded with a mail system search list, not the\n
    \                user's, or a name could grow due to repeated\n                 canonicalizations
    attempts interacting with wildcards.\n            The two most common abbreviation
    methods are:\n            (1)  Interface-level aliases\n                 Interface-level
    aliases are conceptually implemented as\n                 a list of alias/domain
    name pairs. The list can be\n                 per-user or per-host, and separate
    lists can be\n                 associated with different functions, e.g. one list
    for\n                 host name-to-address translation, and a different list\n
    \                for mail domains.  When the user enters a name, the\n                 interface
    attempts to match the name to the alias\n                 component of a list
    entry, and if a matching entry can\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n                 be
    found, the name is replaced by the domain name found\n                 in the
    pair.\n                 Note that interface-level aliases and CNAMEs are\n                 completely
    separate mechanisms; interface-level aliases\n                 are a local matter
    while CNAMEs are an Internet-wide\n                 aliasing mechanism which is
    a required part of any DNS\n                 implementation.\n            (2)
    \ Search Lists\n                 A search list is conceptually implemented as
    an ordered\n                 list of domain names.  When the user enters a name,
    the\n                 domain names in the search list are used as suffixes to\n
    \                the user-supplied name, one by one, until a domain name\n                 with
    the desired associated data is found, or the\n                 search list is
    exhausted.  Search lists often contain\n                 the name of the local
    host's parent domain or other\n                 ancestor domains.  Search lists
    are often per-user or\n                 per-process.\n                 It SHOULD
    be possible for an administrator to disable a\n                 DNS search-list
    facility.  Administrative denial may be\n                 warranted in some cases,
    to prevent abuse of the DNS.\n                 There is danger that a search-list
    mechanism will\n                 generate excessive queries to the root servers
    while\n                 testing whether user input is a complete domain name,\n
    \                lacking a final period to mark it as complete.  A\n                 search-list
    mechanism MUST have one of, and SHOULD have\n                 both of, the following
    two provisions to prevent this:\n                 (a)  The local resolver/name
    server can implement\n                      caching  of negative responses (see
    Section\n                      6.1.3.3).\n                 (b)  The search list
    expander can require two or more\n                      interior dots in a generated
    domain name before it\n                      tries using the name in a query to
    non-local\n                      domain servers, such as the root.\n                 DISCUSSION:\n
    \                     The intent of this requirement is to avoid\n                      excessive
    delay for the user as the search list is\n                      tested, and more
    importantly to prevent excessive\n                      traffic to the root and
    other high-level servers.\n                      For example, if the user supplied
    a name \"X\" and\n                      the search list contained the root as
    a component,\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n                      a
    query would have to consult a root server before\n                      the next
    search list alternative could be tried.\n                      The resulting load
    seen by the root servers and\n                      gateways near the root would
    be multiplied by the\n                      number of hosts in the Internet.\n
    \                     The negative caching alternative limits the effect\n                      to
    the first time a name is used.  The interior\n                      dot rule is
    simpler to implement but can prevent\n                      easy use of some top-level
    names.\n      6.1.5  DOMAIN NAME SYSTEM REQUIREMENTS SUMMARY\n                                               |
    \          | | | |S| |\n                                               |           |
    | | |H| |F\n                                               |           | | | |O|M|o\n
    \                                              |           | |S| |U|U|o\n                                               |
    \          | |H| |L|S|t\n                                               |           |M|O|
    |D|T|n\n                                               |           |U|U|M| | |o\n
    \                                              |           |S|L|A|N|N|t\n                                               |
    \          |T|D|Y|O|O|t\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - 'FEATURE                                        |SECTION    | | | |T|T|e

    '
  title: FEATURE                                        |SECTION    | | | |T|T|e
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - "GENERAL ISSUES                                 |           | | | | | |\n                                               |
    \          | | | | | |\n"
  title: GENERAL ISSUES                                 |           | | | | | |
- contents:
  - 'Implement DNS name-to-address conversion       |6.1.1      |x| | | | |

    '
  title: Implement DNS name-to-address conversion       |6.1.1      |x| | | | |
- contents:
  - 'Implement DNS address-to-name conversion       |6.1.1      |x| | | | |

    '
  title: Implement DNS address-to-name conversion       |6.1.1      |x| | | | |
- contents:
  - 'Support conversions using host table           |6.1.1      | | |x| | |

    '
  title: Support conversions using host table           |6.1.1      | | |x| | |
- contents:
  - 'Properly handle RR with zero TTL               |6.1.2.1    |x| | | | |

    '
  title: Properly handle RR with zero TTL               |6.1.2.1    |x| | | | |
- contents:
  - "Use QCLASS=* unnecessarily                     |6.1.2.2    | |x| | | |\n  Use
    QCLASS=IN for Internet class             |6.1.2.2    |x| | | | |\n"
  title: Use QCLASS=* unnecessarily                     |6.1.2.2    | |x| | | |
- contents:
  - 'Unused fields zero                             |6.1.2.3    |x| | | | |

    '
  title: Unused fields zero                             |6.1.2.3    |x| | | | |
- contents:
  - "Use compression in responses                   |6.1.2.4    |x| | | | |\n                                               |
    \          | | | | | |\n"
  title: Use compression in responses                   |6.1.2.4    |x| | | | |
- contents:
  - 'Include config info in responses               |6.1.2.5    | | | | |x|

    '
  title: Include config info in responses               |6.1.2.5    | | | | |x|
- contents:
  - 'Support all well-known, class-indep. types     |6.1.3.5    |x| | | | |

    '
  title: Support all well-known, class-indep. types     |6.1.3.5    |x| | | | |
- contents:
  - 'Easily expand type list                        |6.1.3.5    | |x| | | |

    '
  title: Easily expand type list                        |6.1.3.5    | |x| | | |
- contents:
  - 'Load all RR types (except MD and MF)           |6.1.3.6    |x| | | | |

    '
  title: Load all RR types (except MD and MF)           |6.1.3.6    |x| | | | |
- contents:
  - 'Load MD or MF type                             |6.1.3.6    | | | | |x|

    '
  title: Load MD or MF type                             |6.1.3.6    | | | | |x|
- contents:
  - 'Operate when root servers, etc. unavailable    |6.1.3.7    |x| | | | |

    '
  title: Operate when root servers, etc. unavailable    |6.1.3.7    |x| | | | |
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - "RESOLVER ISSUES:                               |           | | | | | |\n                                               |
    \          | | | | | |\n"
  title: 'RESOLVER ISSUES:                               |           | | | | | |'
- contents:
  - 'Resolver support multiple concurrent requests  |6.1.3.1    | |x| | | |

    '
  title: Resolver support multiple concurrent requests  |6.1.3.1    | |x| | | |
- contents:
  - "Full-service resolver:                         |6.1.3.1    | | |x| | |\n  Local
    caching                                |6.1.3.1    |x| | | | |\n"
  title: 'Full-service resolver:                         |6.1.3.1    | | |x| | |'
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n  Information
    in local cache times out         |6.1.3.1    |x| | | | |\n  Configurable with
    starting info              |6.1.3.1    | |x| | | |\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - "Stub resolver:                                 |6.1.3.1    | | |x| | |\n  Use
    redundant recursive name servers         |6.1.3.1    |x| | | | |\n  Local caching
    \                               |6.1.3.1    | | |x| | |\n  Information in local
    cache times out         |6.1.3.1    |x| | | | |\n"
  title: 'Stub resolver:                                 |6.1.3.1    | | |x| | |'
- contents:
  - "Support for remote multi-homed hosts:          |           | | | | | |\n  Sort
    multiple addresses by preference list   |6.1.3.4    | |x| | | |\n                                               |
    \          | | | | | |\n"
  title: 'Support for remote multi-homed hosts:          |           | | | | | |'
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - "TRANSPORT PROTOCOLS:                           |           | | | | | |\n                                               |
    \          | | | | | |\n"
  title: 'TRANSPORT PROTOCOLS:                           |           | | | | | |'
- contents:
  - 'Support UDP queries                            |6.1.3.2    |x| | | | |

    '
  title: Support UDP queries                            |6.1.3.2    |x| | | | |
- contents:
  - "Support TCP queries                            |6.1.3.2    | |x| | | |\n  Send
    query using UDP first                   |6.1.3.2    |x| | | | |1\n  Try TCP if
    UDP answers are truncated         |6.1.3.2    | |x| | | |\n"
  title: Support TCP queries                            |6.1.3.2    | |x| | | |
- contents:
  - "Name server limit TCP query resources          |6.1.3.2    | | |x| | |\n  Punish
    unnecessary TCP query                 |6.1.3.2    | | | |x| |\n"
  title: Name server limit TCP query resources          |6.1.3.2    | | |x| | |
- contents:
  - 'Use truncated data as if it were not           |6.1.3.2    | | | | |x|

    '
  title: Use truncated data as if it were not           |6.1.3.2    | | | | |x|
- contents:
  - 'Private agreement to use only TCP              |6.1.3.2    | | |x| | |

    '
  title: Private agreement to use only TCP              |6.1.3.2    | | |x| | |
- contents:
  - 'Use TCP for zone transfers                     |6.1.3.2    |x| | | | |

    '
  title: Use TCP for zone transfers                     |6.1.3.2    |x| | | | |
- contents:
  - 'TCP usage not block UDP queries                |6.1.3.2    |x| | | | |

    '
  title: TCP usage not block UDP queries                |6.1.3.2    |x| | | | |
- contents:
  - "Support broadcast or multicast queries         |6.1.3.2    | | |x| | |\n  RD
    bit set in query                          |6.1.3.2    | | | | |x|\n  RD bit ignored
    by server is b'cast/m'cast    |6.1.3.2    |x| | | | |\n  Send only as occasional
    probe for addr's     |6.1.3.2    | |x| | | |\n"
  title: Support broadcast or multicast queries         |6.1.3.2    | | |x| | |
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - "RESOURCE USAGE:                                |           | | | | | |\n                                               |
    \          | | | | | |\n"
  title: 'RESOURCE USAGE:                                |           | | | | | |'
- contents:
  - "Transmission controls, per [DNS:2]             |6.1.3.3    |x| | | | |\n  Finite
    bounds per request                    |6.1.3.3    |x| | | | |\n"
  title: Transmission controls, per [DNS:2]             |6.1.3.3    |x| | | | |
- contents:
  - 'Failure after retries => soft error            |6.1.3.3    |x| | | | |

    '
  title: Failure after retries => soft error            |6.1.3.3    |x| | | | |
- contents:
  - 'Cache temporary failures                       |6.1.3.3    | |x| | | |

    '
  title: Cache temporary failures                       |6.1.3.3    | |x| | | |
- contents:
  - 'Cache negative responses                       |6.1.3.3    | |x| | | |

    '
  title: Cache negative responses                       |6.1.3.3    | |x| | | |
- contents:
  - "Retries use exponential backoff                |6.1.3.3    | |x| | | |\n  Upper,
    lower bounds                          |6.1.3.3    | |x| | | |\n"
  title: Retries use exponential backoff                |6.1.3.3    | |x| | | |
- contents:
  - 'Client handle Source Quench                    |6.1.3.3    | |x| | | |

    '
  title: Client handle Source Quench                    |6.1.3.3    | |x| | | |
- contents:
  - 'Server ignore Source Quench                    |6.1.3.3    | | |x| | |

    '
  title: Server ignore Source Quench                    |6.1.3.3    | | |x| | |
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - "USER INTERFACE:                                |           | | | | | |\n                                               |
    \          | | | | | |\n"
  title: 'USER INTERFACE:                                |           | | | | | |'
- contents:
  - 'All programs have access to DNS interface      |6.1.4.2    |x| | | | |

    '
  title: All programs have access to DNS interface      |6.1.4.2    |x| | | | |
- contents:
  - 'Able to request all info for given name        |6.1.4.2    |x| | | | |

    '
  title: Able to request all info for given name        |6.1.4.2    |x| | | | |
- contents:
  - 'Returns complete info or error                 |6.1.4.2    |x| | | | |

    '
  title: Returns complete info or error                 |6.1.4.2    |x| | | | |
- contents:
  - "Special interfaces                             |6.1.4.2    | | |x| | |\n  Name<->Address
    translation                   |6.1.4.2    |x| | | | |\n                                               |
    \          | | | | | |\n"
  title: Special interfaces                             |6.1.4.2    | | |x| | |
- contents:
  - 'Abbreviation Facilities:                       |6.1.4.3    | | |x| | |

    '
  title: 'Abbreviation Facilities:                       |6.1.4.3    | | |x| | |'
- contents:
  - "RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989\n  Convention
    for complete names                |6.1.4.3    |x| | | | |\n  Conversion exactly
    once                      |6.1.4.3    |x| | | | |\n  Conversion in proper context
    \                |6.1.4.3    |x| | | | |\n  Search list:                                 |6.1.4.3
    \   | | |x| | |\n    Administrator can disable                  |6.1.4.3    |
    |x| | | |\n    Prevention of excessive root queries       |6.1.4.3    |x| | |
    | |\n      Both methods                             |6.1.4.3    | |x| | | |\n"
  title: RFC1123               SUPPORT SERVICES -- DOMAINS           October 1989
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - "1.   Unless there is private agreement between particular resolver and\n     particular
    server.\n"
  title: 1.   Unless there is private agreement between particular resolver and
- contents:
  - "RFC1123            SUPPORT SERVICES -- INITIALIZATION       October 1989\n   6.2
    \ HOST INITIALIZATION\n      6.2.1  INTRODUCTION\n         This section discusses
    the initialization of host software\n         across a connected network, or more
    generally across an\n         Internet path.  This is necessary for a diskless
    host, and may\n         optionally be used for a host with disk drives.  For a
    diskless\n         host, the initialization process is called \"network booting\"\n
    \        and is controlled by a bootstrap program located in a boot ROM.\n         To
    initialize a diskless host across the network, there are two\n         distinct
    phases:\n         (1)  Configure the IP layer.\n              Diskless machines
    often have no permanent storage in which\n              to store network configuration
    information, so that\n              sufficient configuration information must
    be obtained\n              dynamically to support the loading phase that follows.\n
    \             This information must include at least the IP addresses of\n              the
    host and of the boot server.  To support booting\n              across a gateway,
    the address mask and a list of default\n              gateways are also required.\n
    \        (2)  Load the host system code.\n              During the loading phase,
    an appropriate file transfer\n              protocol is used to copy the system
    code across the\n              network from the boot server.\n         A host
    with a disk may perform the first step, dynamic\n         configuration.  This
    is important for microcomputers, whose\n         floppy disks allow network configuration
    information to be\n         mistakenly duplicated on more than one host.  Also,\n
    \        installation of new hosts is much simpler if they automatically\n         obtain
    their configuration information from a central server,\n         saving administrator
    time and decreasing the probability of\n         mistakes.\n      6.2.2  REQUIREMENTS\n
    \        6.2.2.1  Dynamic Configuration\n            A number of protocol provisions
    have been made for dynamic\n            configuration.\n            o    ICMP
    Information Request/Reply messages\n"
  title: RFC1123            SUPPORT SERVICES -- INITIALIZATION       October 1989
- contents:
  - "RFC1123            SUPPORT SERVICES -- INITIALIZATION       October 1989\n                 This
    obsolete message pair was designed to allow a host\n                 to find the
    number of the network it is on.\n                 Unfortunately, it was useful
    only if the host already\n                 knew the host number part of its IP
    address,\n                 information that hosts requiring dynamic configuration\n
    \                seldom had.\n            o    Reverse Address Resolution Protocol
    (RARP) [BOOT:4]\n                 RARP is a link-layer protocol for a broadcast
    medium\n                 that allows a host to find its IP address given its\n
    \                link layer address.  Unfortunately, RARP does not work\n                 across
    IP gateways and therefore requires a RARP server\n                 on every network.
    \ In addition, RARP does not provide\n                 any other configuration
    information.\n            o    ICMP Address Mask Request/Reply messages\n                 These
    ICMP messages allow a host to learn the address\n                 mask for a particular
    network interface.\n            o    BOOTP Protocol [BOOT:2]\n                 This
    protocol allows a host to determine the IP\n                 addresses of the
    local host and the boot server, the\n                 name of an appropriate boot
    file, and optionally the\n                 address mask and list of default gateways.
    \ To locate a\n                 BOOTP server, the host broadcasts a BOOTP request
    using\n                 UDP.  Ad hoc gateway extensions have been used to\n                 transmit
    the BOOTP broadcast through gateways, and in\n                 the future the
    IP Multicasting facility will provide a\n                 standard mechanism for
    this purpose.\n            The suggested approach to dynamic configuration is
    to use\n            the BOOTP protocol with the extensions defined in \"BOOTP\n
    \           Vendor Information Extensions\" RFC-1084 [BOOT:3].  RFC-1084\n            defines
    some important general (not vendor-specific)\n            extensions.  In particular,
    these extensions allow the\n            address mask to be supplied in BOOTP;
    we RECOMMEND that the\n            address mask be supplied in this manner.\n
    \           DISCUSSION:\n                 Historically, subnetting was defined
    long after IP, and\n                 so a separate mechanism (ICMP Address Mask
    messages)\n                 was designed to supply the address mask to a host.\n
    \                However, the IP address mask and the corresponding IP\n                 address
    conceptually form a pair, and for operational\n"
  title: RFC1123            SUPPORT SERVICES -- INITIALIZATION       October 1989
- contents:
  - "RFC1123            SUPPORT SERVICES -- INITIALIZATION       October 1989\n                 simplicity
    they ought to be defined at the same time\n                 and by the same mechanism,
    whether a configuration file\n                 or a dynamic mechanism like BOOTP.\n
    \                Note that BOOTP is not sufficiently general to specify\n                 the
    configurations of all interfaces of a multihomed\n                 host.  A multihomed
    host must either use BOOTP\n                 separately for each interface, or
    configure one\n                 interface using BOOTP to perform the loading,
    and\n                 perform the complete initialization from a file later.\n
    \                Application layer configuration information is expected\n                 to
    be obtained from files after loading of the system\n                 code.\n         6.2.2.2
    \ Loading Phase\n            A suggested approach for the loading phase is to
    use TFTP\n            [BOOT:1] between the IP addresses established by BOOTP.\n
    \           TFTP to a broadcast address SHOULD NOT be used, for reasons\n            explained
    in Section 4.2.3.4.\n"
  title: RFC1123            SUPPORT SERVICES -- INITIALIZATION       October 1989
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n   6.3
    \ REMOTE MANAGEMENT\n      6.3.1  INTRODUCTION\n         The Internet community
    has recently put considerable effort\n         into the development of network
    management protocols.  The\n         result has been a two-pronged approach [MGT:1,
    MGT:6]:  the\n         Simple Network Management Protocol (SNMP) [MGT:4] and the\n
    \        Common Management Information Protocol over TCP (CMOT) [MGT:5].\n         In
    order to be managed using SNMP or CMOT, a host will need to\n         implement
    an appropriate management agent.  An Internet host\n         SHOULD include an
    agent for either SNMP or CMOT.\n         Both SNMP and CMOT operate on a Management
    Information Base\n         (MIB) that defines a collection of management values.
    \ By\n         reading and setting these values, a remote application may\n         query
    and change the state of the managed system.\n         A standard MIB [MGT:3] has
    been defined for use by both\n         management protocols, using data types
    defined by the Structure\n         of Management Information (SMI) defined in
    [MGT:2].  Additional\n         MIB variables can be introduced under the \"enterprises\"
    and\n         \"experimental\" subtrees of the MIB naming space [MGT:2].\n         Every
    protocol module in the host SHOULD implement the relevant\n         MIB variables.
    \ A host SHOULD implement the MIB variables as\n         defined in the most recent
    standard MIB, and MAY implement\n         other MIB variables when appropriate
    and useful.\n      6.3.2  PROTOCOL WALK-THROUGH\n         The MIB is intended
    to cover both hosts and gateways, although\n         there may be detailed differences
    in MIB application to the two\n         cases.  This section contains the appropriate
    interpretation of\n         the MIB for hosts.  It is likely that later versions
    of the MIB\n         will include more entries for host management.\n         A
    managed host must implement the following groups of MIB\n         object definitions:
    System, Interfaces, Address Translation,\n         IP, ICMP, TCP, and UDP.\n         The
    following specific interpretations apply to hosts:\n         o    ipInHdrErrors\n
    \             Note that the error \"time-to-live exceeded\" can occur in a\n              host
    only when it is forwarding a source-routed datagram.\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n         o
    \   ipOutNoRoutes\n              This object counts datagrams discarded because
    no route\n              can be found.  This may happen in a host if all the\n
    \             default gateways in the host's configuration are down.\n         o
    \   ipFragOKs, ipFragFails, ipFragCreates\n              A host that does not
    implement intentional fragmentation\n              (see \"Fragmentation\" section
    of [INTRO:1]) MUST return the\n              value zero for these three objects.\n
    \        o    icmpOutRedirects\n              For a host, this object MUST always
    be zero, since hosts\n              do not send Redirects.\n         o    icmpOutAddrMaskReps\n
    \             For a host, this object MUST always be zero, unless the\n              host
    is an authoritative source of address mask\n              information.\n         o
    \   ipAddrTable\n              For a host, the \"IP Address Table\" object is
    effectively a\n              table of logical interfaces.\n         o    ipRoutingTable\n
    \             For a host, the \"IP Routing Table\" object is effectively a\n              combination
    of the host's Routing Cache and the static\n              route table described
    in \"Routing Outbound Datagrams\"\n              section of [INTRO:1].\n              Within
    each ipRouteEntry, ipRouteMetric1...4 normally will\n              have no meaning
    for a host and SHOULD always be -1, while\n              ipRouteType will normally
    have the value \"remote\".\n              If destinations on the connected network
    do not appear in\n              the Route Cache (see \"Routing Outbound Datagrams
    section\n              of [INTRO:1]), there will be no entries with ipRouteType\n
    \             of \"direct\".\n         DISCUSSION:\n              The current
    MIB does not include Type-of-Service in an\n              ipRouteEntry, but a
    future revision is expected to make\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n              this
    addition.\n              We also expect the MIB to be expanded to allow the remote\n
    \             management of applications (e.g., the ability to partially\n              reconfigure
    mail systems).  Network service applications\n              such as mail systems
    should therefore be written with the\n              \"hooks\" for remote management.\n
    \     6.3.3  MANAGEMENT REQUIREMENTS SUMMARY\n                                               |
    \          | | | |S| |\n                                               |           |
    | | |H| |F\n                                               |           | | | |O|M|o\n
    \                                              |           | |S| |U|U|o\n                                               |
    \          | |H| |L|S|t\n                                               |           |M|O|
    |D|T|n\n                                               |           |U|U|M| | |o\n
    \                                              |           |S|L|A|N|N|t\n                                               |
    \          |T|D|Y|O|O|t\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - 'FEATURE                                        |SECTION    | | | |T|T|e

    '
  title: FEATURE                                        |SECTION    | | | |T|T|e
- contents:
  - '-----------------------------------------------|-----------|-|-|-|-|-|--

    '
  title: '-----------------------------------------------|-----------|-|-|-|-|-|--'
- contents:
  - 'Support SNMP or CMOT agent                     |6.3.1      | |x| | | |

    '
  title: Support SNMP or CMOT agent                     |6.3.1      | |x| | | |
- contents:
  - 'Implement specified objects in standard MIB    |6.3.1      | |x| | | |

    '
  title: Implement specified objects in standard MIB    |6.3.1      | |x| | | |
- contents:
  - 'RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989

    '
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "7.  REFERENCES\n   This section lists the primary references with which every\n
    \  implementer must be thoroughly familiar.  It also lists some\n   secondary
    references that are suggested additional reading.\n   INTRODUCTORY REFERENCES:\n
    \  [INTRO:1] \"Requirements for Internet Hosts -- Communication Layers,\"\n        IETF
    Host Requirements Working Group, R. Braden, Ed., RFC-1122,\n        October 1989.\n
    \  [INTRO:2]  \"DDN Protocol Handbook,\" NIC-50004, NIC-50005, NIC-50006,\n        (three
    volumes), SRI International, December 1985.\n   [INTRO:3]  \"Official Internet
    Protocols,\" J. Reynolds and J. Postel,\n        RFC-1011, May 1987.\n        This
    document is republished periodically with new RFC numbers;\n        the latest
    version must be used.\n   [INTRO:4]  \"Protocol Document Order Information,\"
    O. Jacobsen and J.\n        Postel, RFC-980, March 1986.\n   [INTRO:5]  \"Assigned
    Numbers,\" J. Reynolds and J. Postel, RFC-1010,\n        May 1987.\n        This
    document is republished periodically with new RFC numbers;\n        the latest
    version must be used.\n   TELNET REFERENCES:\n   [TELNET:1]  \"Telnet Protocol
    Specification,\" J. Postel and J.\n        Reynolds, RFC-854, May 1983.\n   [TELNET:2]
    \ \"Telnet Option Specification,\" J. Postel and J. Reynolds,\n        RFC-855,
    May 1983.\n   [TELNET:3]  \"Telnet Binary Transmission,\" J. Postel and J. Reynolds,\n
    \       RFC-856, May 1983.\n   [TELNET:4]  \"Telnet Echo Option,\" J. Postel and
    J. Reynolds, RFC-857,\n        May 1983.\n   [TELNET:5]  \"Telnet Suppress Go
    Ahead Option,\" J. Postel and J.\n"
  title: 7.  REFERENCES
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n        Reynolds,
    RFC-858, May 1983.\n   [TELNET:6]  \"Telnet Status Option,\" J. Postel and J.
    Reynolds, RFC-\n        859, May 1983.\n   [TELNET:7]  \"Telnet Timing Mark Option,\"
    J. Postel and J. Reynolds,\n        RFC-860, May 1983.\n   [TELNET:8]  \"Telnet
    Extended Options List,\" J. Postel and J.\n        Reynolds, RFC-861, May 1983.\n
    \  [TELNET:9]  \"Telnet End-Of-Record Option,\" J. Postel, RFC-855,\n        December
    1983.\n   [TELNET:10] \"Telnet Terminal-Type Option,\" J. VanBokkelen, RFC-1091,\n
    \       February 1989.\n        This document supercedes RFC-930.\n   [TELNET:11]
    \"Telnet Window Size Option,\" D. Waitzman, RFC-1073,\n        October 1988.\n
    \  [TELNET:12] \"Telnet Linemode Option,\" D. Borman, RFC-1116, August\n        1989.\n
    \  [TELNET:13] \"Telnet Terminal Speed Option,\" C. Hedrick, RFC-1079,\n        December
    1988.\n   [TELNET:14] \"Telnet Remote Flow Control Option,\" C. Hedrick, RFC-\n
    \       1080, November 1988.\n   SECONDARY TELNET REFERENCES:\n   [TELNET:15]
    \"Telnet Protocol,\" MIL-STD-1782, U.S. Department of\n        Defense, May 1984.\n
    \       This document is intended to describe the same protocol as RFC-\n        854.
    \ In case of conflict, RFC-854 takes precedence, and the\n        present document
    takes precedence over both.\n   [TELNET:16] \"SUPDUP Protocol,\" M. Crispin, RFC-734,
    October 1977.\n   [TELNET:17] \"Telnet SUPDUP Option,\" M. Crispin, RFC-736, October\n
    \       1977.\n   [TELNET:18] \"Data Entry Terminal Option,\" J. Day, RFC-732,
    June 1977.\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n   [TELNET:19]
    \"TELNET Data Entry Terminal option -- DODIIS\n        Implementation,\" A. Yasuda
    and T. Thompson, RFC-1043, February\n        1988.\n   FTP REFERENCES:\n   [FTP:1]
    \ \"File Transfer Protocol,\" J. Postel and J. Reynolds, RFC-\n        959, October
    1985.\n   [FTP:2]  \"Document File Format Standards,\" J. Postel, RFC-678,\n        December
    1974.\n   [FTP:3]  \"File Transfer Protocol,\" MIL-STD-1780, U.S. Department of\n
    \       Defense, May 1984.\n        This document is based on an earlier version
    of the FTP\n        specification (RFC-765) and is obsolete.\n   TFTP REFERENCES:\n
    \  [TFTP:1]  \"The TFTP Protocol Revision 2,\" K. Sollins, RFC-783, June\n        1981.\n
    \  MAIL REFERENCES:\n   [SMTP:1]  \"Simple Mail Transfer Protocol,\" J. Postel,
    RFC-821, August\n        1982.\n   [SMTP:2]  \"Standard For The Format of ARPA
    Internet Text Messages,\"\n        D. Crocker, RFC-822, August 1982.\n        This
    document obsoleted an earlier specification, RFC-733.\n   [SMTP:3]  \"Mail Routing
    and the Domain System,\" C. Partridge, RFC-\n        974, January 1986.\n        This
    RFC describes the use of MX records, a mandatory extension\n        to the mail
    delivery process.\n   [SMTP:4]  \"Duplicate Messages and SMTP,\" C. Partridge,
    RFC-1047,\n        February 1988.\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n   [SMTP:5a]
    \ \"Mapping between X.400 and RFC 822,\" S. Kille, RFC-987,\n        June 1986.\n
    \  [SMTP:5b]  \"Addendum to RFC-987,\" S. Kille, RFC-???, September 1987.\n        The
    two preceding RFC's define a proposed standard for\n        gatewaying mail between
    the Internet and the X.400 environments.\n   [SMTP:6]  \"Simple Mail Transfer
    Protocol,\"  MIL-STD-1781, U.S.\n        Department of Defense, May 1984.\n        This
    specification is intended to describe the same protocol as\n        does RFC-821.
    \ However, MIL-STD-1781 is incomplete; in\n        particular, it does not include
    MX records [SMTP:3].\n   [SMTP:7]  \"A Content-Type Field for Internet Messages,\"
    M. Sirbu,\n        RFC-1049, March 1988.\n   DOMAIN NAME SYSTEM REFERENCES:\n
    \  [DNS:1]  \"Domain Names - Concepts and Facilities,\" P. Mockapetris,\n        RFC-1034,
    November 1987.\n        This document and the following one obsolete RFC-882,
    RFC-883,\n        and RFC-973.\n   [DNS:2]  \"Domain Names - Implementation and
    Specification,\" RFC-1035,\n        P. Mockapetris, November 1987.\n   [DNS:3]
    \ \"Mail Routing and the Domain System,\" C. Partridge, RFC-974,\n        January
    1986.\n   [DNS:4]  \"DoD Internet Host Table Specification,\" K. Harrenstein,\n
    \       RFC-952, M. Stahl, E. Feinler, October 1985.\n        SECONDARY DNS REFERENCES:\n
    \  [DNS:5]  \"Hostname Server,\" K. Harrenstein, M. Stahl, E. Feinler,\n        RFC-953,
    October 1985.\n   [DNS:6]  \"Domain Administrators Guide,\" M. Stahl, RFC-1032,
    November\n        1987.\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989\n   [DNS:7]
    \ \"Domain Administrators Operations Guide,\" M. Lottor, RFC-\n        1033, November
    1987.\n   [DNS:8]  \"The Domain Name System Handbook,\" Vol. 4 of Internet\n        Protocol
    Handbook, NIC 50007, SRI Network Information Center,\n        August 1989.\n   SYSTEM
    INITIALIZATION REFERENCES:\n   [BOOT:1] \"Bootstrap Loading Using TFTP,\" R. Finlayson,
    RFC-906, June\n        1984.\n   [BOOT:2] \"Bootstrap Protocol (BOOTP),\" W. Croft
    and J. Gilmore, RFC-\n        951, September 1985.\n   [BOOT:3] \"BOOTP Vendor
    Information Extensions,\" J. Reynolds, RFC-\n        1084, December 1988.\n        Note:
    this RFC revised and obsoleted RFC-1048.\n   [BOOT:4] \"A Reverse Address Resolution
    Protocol,\" R. Finlayson, T.\n        Mann, J. Mogul, and M. Theimer, RFC-903,
    June 1984.\n   MANAGEMENT REFERENCES:\n   [MGT:1]  \"IAB Recommendations for the
    Development of Internet Network\n        Management Standards,\" V. Cerf, RFC-1052,
    April 1988.\n   [MGT:2]  \"Structure and Identification of Management Information
    for\n        TCP/IP-based internets,\" M. Rose and K. McCloghrie, RFC-1065,\n
    \       August 1988.\n   [MGT:3]  \"Management Information Base for Network Management
    of\n        TCP/IP-based internets,\" M. Rose and K. McCloghrie, RFC-1066,\n        August
    1988.\n   [MGT:4]  \"A Simple Network Management Protocol,\" J. Case, M. Fedor,\n
    \       M. Schoffstall, and C. Davin, RFC-1098, April 1989.\n   [MGT:5]  \"The
    Common Management Information Services and Protocol\n        over TCP/IP,\" U.
    Warrier and L. Besaw, RFC-1095, April 1989.\n   [MGT:6]  \"Report of the Second
    Ad Hoc Network Management Review\n        Group,\" V. Cerf, RFC-1109, August 1989.\n"
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - 'RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989

    '
  title: RFC1123              SUPPORT SERVICES -- MANAGEMENT         October 1989
- contents:
  - "Security Considerations\n   There are many security issues in the application
    and support\n   programs of host software, but a full discussion is beyond the
    scope\n   of this RFC.  Security-related issues are mentioned in sections\n   concerning
    TFTP (Sections 4.2.1, 4.2.3.4, 4.2.3.5), the SMTP VRFY and\n   EXPN commands (Section
    5.2.3), the SMTP HELO command (5.2.5), and the\n   SMTP DATA command (Section
    5.2.8).\n"
  title: Security Considerations
- contents:
  - "Author's Address\n   Robert Braden\n   USC/Information Sciences Institute\n   4676
    Admiralty Way\n   Marina del Rey, CA 90292-6695\n   Phone: (213) 822 1511\n   EMail:
    Braden@ISI.EDU\n"
  title: Author's Address
