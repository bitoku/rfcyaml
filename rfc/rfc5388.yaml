- title: __initial_text__
  contents:
  - '    Information Model and XML Data Model for Traceroute Measurements

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ (http://trustee.ietf.org/\n   license-info) in effect on the date of publication\
    \ of this document.\n   Please review these documents carefully, as they describe\
    \ your rights\n   and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a standard way to store the configuration\
    \ and\n   the results of traceroute measurements.  This document first\n   describes\
    \ the terminology used in this document and the traceroute\n   tool itself; afterwards,\
    \ the common information model is defined,\n   dividing the information elements\
    \ into two semantically separated\n   groups (configuration elements and results\
    \ elements).  Moreover, an\n   additional element is defined to relate configuration\
    \ elements and\n   results elements by means of a common unique identifier.  On\
    \ the\n   basis of the information model, a data model based on XML is defined\n\
    \   to store the results of traceroute measurements.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology Used in This Document ...............................3\n  \
    \ 3. The Traceroute Tool and Its Operations ..........................4\n   4.\
    \ Results of Traceroute Measurements ..............................5\n   5. Information\
    \ Model for Traceroute Measurements ...................5\n      5.1. Data Types\
    \ .................................................6\n      5.2. Information Elements\
    \ .......................................7\n           5.2.1. Relationships between\
    \ the Information Elements ......7\n           5.2.2. Configuration Information\
    \ Elements .................12\n           5.2.3. Results Information Elements\
    \ .......................17\n           5.2.4. Information Element Correlating\n\
    \                  Configuration and Results ..........................21\n  \
    \         5.2.5. Information Elements to Compare Traceroute\n                \
    \  Measurement Results ................................22\n   6. Data Model for\
    \ Storing Traceroute Measurements .................23\n   7. XML Schema for Traceroute\
    \ Measurements .........................24\n   8. Security Considerations ........................................38\n\
    \      8.1. Conducting Traceroute Measurements ........................39\n  \
    \    8.2. Securing Traceroute Measurement Information ...............39\n   9.\
    \ IANA Considerations ............................................40\n   10. References\
    \ ....................................................40\n      10.1. Normative\
    \ References .....................................40\n      10.2. Informative\
    \ References ...................................41\n   Appendix A. Traceroute\
    \ Default Configuration Parameters ...........43\n      A.1. Alternative Traceroute\
    \ Implementations ....................46\n   Appendix B. Known Problems with Traceroute\
    \ ........................47\n      B.1. Compatibility between Traceroute Measurement\
    \ Results\n           and IPPM Metrics ..........................................47\n\
    \   Appendix C. Differences to DISMAN-TRACEROUTE-MIB ..................47\n  \
    \    C.1. Scope .....................................................48\n    \
    \  C.2. Naming ....................................................49\n      C.3.\
    \ Semantics .................................................49\n      C.4. Additional\
    \ Information Elements ...........................50\n   Appendix D. Traceroute\
    \ Examples with XML Representation ...........50\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traceroutes are used by lots of measurement efforts, either\
    \ as\n   independent measurements or as a means of getting path information to\n\
    \   support other measurement efforts.  That is why there is the need to\n   standardize\
    \ the way the configuration and the results of traceroute\n   measurements are\
    \ stored.  The standard metrics defined by the IPPM\n   group in matters of delay,\
    \ connectivity, and losses do not apply to\n   the metrics returned by the traceroute\
    \ tool.  Therefore, in order to\n   compare results of traceroute measurements,\
    \ the only possibility is\n   to add to the stored results a specification of\
    \ the operating system\n   as well as the name and version for the traceroute\
    \ tool used.  This\n   document, in order to store results of traceroute measurements\
    \ and\n   allow comparison of them, defines a standard way to store them using\n\
    \   an XML schema.\n   The document is organized as follows: Section 2 defines\
    \ the\n   terminology used in this document; Section 3 describes the traceroute\n\
    \   tool; Section 4 describes the results of a traceroute measurement as\n   displayed\
    \ to the screen from which the traceroute tool was launched;\n   Section 5 and\
    \ Section 6, respectively, describe the information model\n   and data model for\
    \ storing configuration and results of the\n   traceroute measurements; Section\
    \ 7 contains the XML schema to be used\n   as a template for storing and/or exchanging\
    \ traceroute measurement\n   information; the document ends with security considerations\
    \ and IANA\n   considerations in Section 8 and Section 9 respectively.\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  Terminology Used in This Document
  contents:
  - "2.  Terminology Used in This Document\n   The terminology used in this document\
    \ is defined as follows:\n   o  traceroute tool: a software tool for network diagnostic\
    \ that\n      behaves as described in Section 3;\n   o  traceroute measurement:\
    \ an instance of the traceroute tool\n      launched, with specific configuration\
    \ parameters (traceroute\n      measurement configuration parameters), from a\
    \ specific host\n      (initiator of the traceroute measurement) giving as output\n\
    \      specific traceroute measurement results;\n   o  traceroute probe: one of\
    \ many IP packets sent out by the\n      traceroute tool during a traceroute measurement;\n\
    \   o  traceroute measurement configuration parameters: the configuration\n  \
    \    parameters of a traceroute measurement;\n   o  traceroute measurement results:\
    \ the results of a traceroute\n      measurement;\n   o  traceroute measurement\
    \ information: both the results and the\n      configuration parameters of a traceroute\
    \ measurement;\n   o  traceroute measurement path: a sequence of hosts transited\
    \ in\n      order by traceroute probes during a traceroute measurement.\n"
- title: 3.  The Traceroute Tool and Its Operations
  contents:
  - "3.  The Traceroute Tool and Its Operations\n   Traceroute is a network diagnostic\
    \ tool used to determine the hop-by-\n   hop path from a source to a destination\
    \ and the Round Trip Time (RTT)\n   from the source to each hop.  Traceroute can\
    \ be therefore used to\n   discover some information (hop counts, delays, etc.)\
    \ about the path\n   between the initiator of the traceroute measurement and other\
    \ hosts.\n   Typically, the traceroute tool attempts to discover the path to a\n\
    \   destination by sending UDP probes with specific time-to-live (TTL)\n   values\
    \ in the IP packet header and trying to elicit an ICMP\n   TIME_EXCEEDED response\
    \ from each gateway along the path to some host.\n   In more detail, a first set\
    \ of probes with TTL equal to 1 is sent by\n   the traceroute tool from the host\
    \ initiating the traceroute\n   measurement (some tool implementations allow setting\
    \ the initial TTL\n   to a value equal to \"n\" different from 1, so that the\
    \ first \"n-1\"\n   hops are skipped and the first hop that will be traced is\
    \ the \"n-th\"\n   in the path).  Upon receiving a probe, the first hop host decreases\n\
    \   the TTL value (by one or more).  By observing a TTL value equal to\n   zero,\
    \ the host rejects the probe and typically returns an ICMP\n   message with a\
    \ TIME_EXCEEDED value.  The traceroute tool can\n   therefore derive the IP address\
    \ of the first hop from the header of\n   the ICMP message and evaluate the RTT\
    \ between the host initiating the\n   traceroute measurement and the first hop.\
    \  The next hops are\n   discovered following the same procedure, taking care\
    \ to increase at\n   each step the TTL value of the probes by one.  The TTL value\
    \ is\n   increased until either an ICMP PORT_UNREACHABLE message is received,\n\
    \   meaning that the destination host has been reached, or the maximum\n   configured\
    \ number of hops has been hit.\n   Some implementations use ICMP Echoes, instead\
    \ of UDP datagrams.\n   However, many routers do not return ICMP messages about\
    \ ICMP\n   messages, i.e., no ICMP TIME_EXCEEDED is returned for an ICMP Echo.\n\
    \   Therefore, this document recommends to base implementations on UDP\n   datagrams.\
    \  Considerations on TCP-based implementations of the\n   traceroute tool are\
    \ reported in Appendix A.1.\n"
- title: 4.  Results of Traceroute Measurements
  contents:
  - "4.  Results of Traceroute Measurements\n   The following list reports the information\
    \ fields provided as results\n   by all traceroute tool implementations considered.\
    \  The order in\n   which they are reported here is not relevant and changes in\
    \ different\n   implementations.  For each hop, the following information is\n\
    \   reported:\n   o  the hop index;\n   o  the host symbolic address, provided\
    \ that at least one of the\n      probes received a response, the symbolic address\
    \ could be resolved\n      at the corresponding host, and the option to display\
    \ only\n      numerical addresses was not set;\n   o  the host IP address, provided\
    \ that at least one of the probes\n      received a response;\n   o  the RTT for\
    \ each response to a probe.\n   Depending on the traceroute tool implementation,\
    \ additional\n   information might be displayed in the output (for instance, MPLS-\n\
    \   related information).\n   It might happen that some probes do not receive\
    \ a response within the\n   configured timeout (for instance, if the probe is\
    \ filtered out by a\n   firewall).  In this case, an \"*\" is displayed in place\
    \ of the RTT.\n   The information model reflects this using a string with the\
    \ value of\n   \"RoundTripTimeNotAvailable\", meaning either the probe was lost\n\
    \   because of a timeout or it was not possible to transmit a probe.  It\n   may\
    \ also happen that some implementations print the same line\n   multiple times\
    \ when a router decreases the TTL by more than one, thus\n   looking like multiple\
    \ hops.  The information model is not impacted by\n   this since each line is\
    \ handled separately; it is left to the\n   applications handling the XML file\
    \ how to deal with it.  Moreover,\n   for delays below 1 ms, some implementations\
    \ report 0 ms (e.g., UNIX\n   and LINUX), while WINDOWS reports \"< 1 ms\".\n"
- title: 5.  Information Model for Traceroute Measurements
  contents:
  - "5.  Information Model for Traceroute Measurements\n   The information model is\
    \ composed of information elements; for\n   defining these information elements,\
    \ a template is used.  Such\n   template is specified in the list below:\n   o\
    \  name - A unique and meaningful name for the information element.\n      The\
    \ preferred spelling for the name is to use mixed case if the\n      name is compound,\
    \ with an initial lower-case letter, e.g.,\n      \"sourceIpAddress\".\n   o \
    \ description - The semantics of this information element.\n   o  dataType - One\
    \ of the types listed in Section 5.1 of this document\n      or in an extension\
    \ of the information model.  The type space for\n      attributes is constrained\
    \ to facilitate implementation.\n   o  units - If the element is a measure of\
    \ some kind, the units\n      identify what the measure is.\n"
- title: 5.1.  Data Types
  contents:
  - "5.1.  Data Types\n   This section describes the set of basic valid data types\
    \ of the\n   information model.\n   o  string - The type \"string\" represents\
    \ a finite-length string of\n      valid characters from the Unicode character\
    \ encoding set.  Unicode\n      allows for ASCII and many other international\
    \ character sets to be\n      used.  It is expected that strings will be encoded\
    \ in UTF-8\n      format, which is identical in encoding for US-ASCII characters\
    \ but\n      which also accommodates other Unicode multi-byte characters.\n  \
    \ o  string255 - Same type as \"string\" but with the restriction of 255\n   \
    \   characters.\n   o  inetAddressType - The type \"inetAddressType\" represents\
    \ a type of\n      Internet address.  The allowed values are imported from [RFC4001]\n\
    \      (where the intent was to import only some of the values);\n      additional\
    \ allowed values are \"asnumber\" and \"noSpecification\".\n   o  inetAddress\
    \ - The type \"inetAddress\" denotes a generic Internet\n      address.  The allowed\
    \ values are imported from [RFC4001] (the\n      values imported are unknown,\
    \ ipv4, ipv6, and dns), while non-\n      global IPv4/IPv6 addresses (e.g., ipv4z\
    \ and ipv6z) are excluded;\n      an additional allowed value is the AS number,\
    \ indicated as the\n      actual number plus the indication of how the mapping\
    \ from IP\n      address to AS number was performed.  \"Unknown\" is used to indicate\n\
    \      an IP address that is not in one of the formats defined.\n   o  ipASNumberMappingType\
    \ - The type \"ipASNumberMappingType\"\n      represents a type of mapping from\
    \ IP to AS number, it indicates\n      the method that was used to do get the\
    \ mapping (allowed values are\n      \"bgptables\", \"routingregistries\", \"\
    nslookup\", \"others\" or\n      \"unknown\").\n   o  boolean - The type \"boolean\"\
    \ represents a boolean value according\n      to XML standards [W3C.REC-xmlschema-2-20041028].\n\
    \   o  unsignedInt - The type \"unsignedInt\" represents a value in the\n    \
    \  range (0..4294967295).\n   o  unsignedShort - The type \"unsignedShort\" represents\
    \ a value in the\n      range (0..65535).\n   o  unsignedByte - The type \"unsignedByte\"\
    \ represents a value in the\n      range (0..255).\n   o  u8nonzero - The type\
    \ \"u8nonzero\" represents a value in the range\n      (1..255).\n   o  probesType\
    \ - The type \"probesType\" represents a way of indicating\n      the protocol\
    \ used for the traceroute probes.  Values defined in\n      this document are\
    \ UDP, TCP, and ICMP.\n   o  operationResponseStatus - The type \"operationResponseStatus\"\
    \ is\n      used to report the result of an operation.  The allowed values are\n\
    \      imported from [RFC4560].\n   o  dateTime - The type \"dateTime\" represents\
    \ a date-time\n      specification according to XML standards\n      [W3C.REC-xmlschema-2-20041028]\
    \ but is restricted to the values\n      defined in [RFC3339].\n"
- title: 5.2.  Information Elements
  contents:
  - "5.2.  Information Elements\n   This section describes the elements related to\
    \ the storing of a\n   traceroute measurement.  The elements are grouped in two\
    \ groups\n   (configuration and results) according to their semantics.  In order\n\
    \   to relate configuration and results elements by means of a common\n   unique\
    \ identifier, an additional element is defined belonging to both\n   groups.\n"
- title: 5.2.1.  Relationships between the Information Elements
  contents:
  - "5.2.1.  Relationships between the Information Elements\n   Every traceroute measurement\
    \ is represented by an instance of the\n   \"traceRoute\" element.  This class\
    \ provides a standardized\n   representation for traceroute measurement data.\
    \  The \"traceroute\"\n   element is an element that can be composed of (depending\
    \ on the\n   nature of the traceroute measurement):\n   o  1 optional \"RequestMetadata\"\
    \ element;\n   o  0..2147483647 \"Measurement\" elements.\n   Each \"Measurement\"\
    \ element contains:\n   o  1 optional \"MeasurementMetadata\" element;\n   o \
    \ 0..2147483647 \"MeasurementResult\" elements.\n   The \"RequestMetadata\" element\
    \ can be used for specifying parameters\n   of a traceroute measurement to be\
    \ performed at one or more nodes by\n   one or more traceroute implementations.\
    \  Depending on the\n   capabilities of a traceroute implementation, not all requested\n\
    \   parameters can be applied.  Which parameters have actually been\n   applied\
    \ for a specific traceroute measurement is specified in a\n   \"MeasurementMetadata\"\
    \ element.\n   The \"RequestMetadata\" element is a sequence that contains:\n\
    \   o  1 \"TestName\" element;\n   o  1 optional \"ToolVersion\" element;\n  \
    \ o  1 optional \"ToolName\" element;\n   o  1 \"CtlTargetAddress\" element;\n\
    \   o  1 optional \"CtlBypassRouteTable\" element;\n   o  1 optional \"CtlProbeDataSize\"\
    \ element;\n   o  1 optional \"CtlTimeOut\" element;\n   o  1 optional \"CtlProbesPerHop\"\
    \ element;\n   o  1 optional \"CtlPort\" element;\n   o  1 optional \"CtlMaxTtl\"\
    \ element;\n   o  1 optional \"CtlDSField\" element;\n   o  1 optional \"CtlSourceAddress\"\
    \ element;\n   o  1 optional \"CtlIfIndex\" element;\n   o  1 optional \"CtlMiscOptions\"\
    \ element;\n   o  1 optional \"CtlMaxFailures\" element;\n   o  1 optional \"\
    CtlDontFragment\" element;\n   o  1 optional \"CtlInitialTtl\" element;\n   o\
    \  1 optional \"CtlDescr\" element;\n   o  1 \"CtlType\" element.\n   If the \"\
    RequestMetadata\" element is omitted from an XML file, it\n   means that the traceroute\
    \ measurement configuration parameters\n   requested were all used and the \"\
    MeasurementMetadata\" element lists\n   them in detail.\n   The \"MeasurementMetadata\"\
    \ element is a sequence that contains:\n   o  1 \"TestName\" element;\n   o  1\
    \ \"OSName\" element;\n   o  1 \"OSVersion\" element;\n   o  1 \"ToolVersion\"\
    \ element;\n   o  1 \"ToolName\" element;\n   o  1 \"CtlTargetAddressType\" element;\n\
    \   o  1 \"CtlTargetAddress\" element;\n   o  1 \"CtlBypassRouteTable\" element;\n\
    \   o  1 \"CtlProbeDataSize\" element;\n   o  1 \"CtlTimeOut\" element;\n   o\
    \  1 \"CtlProbesPerHop\" element;\n   o  1 \"CtlPort\" element;\n   o  1 \"CtlMaxTtl\"\
    \ element;\n   o  1 \"CtlDSField\" element;\n   o  1 \"CtlSourceAddressType\"\
    \ element;\n   o  1 \"CtlSourceAddress\" element;\n   o  1 \"CtlIfIndex\" element;\n\
    \   o  1 optional \"CtlMiscOptions\" element;\n   o  1 \"CtlMaxFailures\" element;\n\
    \   o  1 \"CtlDontFragment\" element;\n   o  1 \"CtlInitialTtl\" element;\n  \
    \ o  1 optional \"CtlDescr\" element;\n   o  1 \"CtlType\" element.\n   Configuration\
    \ information elements can describe not just traceroute\n   measurements that\
    \ have already happened (\"MeasurementMetadata\"\n   elements), but also the configuration\
    \ to be used when requesting a\n   measurement to be made (\"RequestMetadata\"\
    \ element).  This is quite\n   different semantically, even if the individual\
    \ information elements\n   are similar.  Due to this similarity, both \"RequestMetadata\"\
    \ and\n   \"MeasurementMetadata\" are represented by the same type in the XML\n\
    \   schema.  All elements that are missing from the \"RequestMetadata\" or\n \
    \  marked as optional in the \"RequestMetadata\" but mandatory in the\n   \"MeasurementMetadata\"\
    \ must be specified as empty elements.\n   Specifying them as empty elements means\
    \ use the default value.  The\n   \"CtlType\" element could have been optional\
    \ in the \"RequestMetadata\",\n   but since default values cannot be specified\
    \ for complex types in an\n   XML schema, the element is mandatory in the \"RequestMetadata\"\
    .\n   The \"MeasurementResult\" element is a sequence that contains:\n   o  1\
    \ \"TestName\" element;\n   o  1 \"ResultsStartDateAndTime\" element;\n   o  1\
    \ \"ResultsIpTgtAddrType\" element;\n   o  1 \"ResultsIpTgtAddr\" element;\n \
    \  o  1 \"ProbeResults\" elements;\n   o  1 \"ResultsEndDateAndTime\" element.\n\
    \   Additionally, it is important to say that each \"ProbeResults\" element\n\
    \   is a sequence that contains:\n   o  1..255 \"hop\" elements.\n   Each \"hop\"\
    \ element is a sequence that contains:\n   o  1..10 \"probe\" elements;\n   o\
    \  1 optional \"HopRawOutputData\" element.\n   Each \"probe\" element contains:\n\
    \   o  1 \"HopAddrType\" element;\n   o  1 \"HopAddr\" element;\n   o  1 optional\
    \ \"HopName\" element;\n   o  0..255 optional \"MPLSLabelStackEntry\" elements;\n\
    \   o  1 \"ProbedRoundTripTime\" element;\n   o  1 \"ResponseStatus\" element;\n\
    \   o  1 \"Time\" element.\n   Different numbers of appearances of the three basic\
    \ elements in the\n   XML file are meant for different scopes:\n   o  a file with\
    \ only 1 \"RequestMetadata\" element represents a file\n      containing the traceroute\
    \ measurement configuration parameters of\n      a traceroute measurement; it\
    \ can be used to distribute the\n      traceroute measurement configuration parameters\
    \ over multiple\n      nodes asked to run the same traceroute measurement;\n \
    \  o  a file with 1 \"Measurement\" element containing 1\n      \"MeasurementMetadata\"\
    \ and 1 \"MeasurementResult\" element represents\n      a file containing the\
    \ traceroute measurement information of a\n      traceroute measurement;\n   o\
    \  a file with 1 \"Measurement\" element containing 1\n      \"MeasurementMetadata\"\
    \ and n \"MeasurementResult\" elements\n      represents a file containing the\
    \ traceroute measurement\n      information of a set of traceroute measurements\
    \ run over different\n      times with always the same traceroute measurement\
    \ configuration\n      parameters;\n   o  a file with 1 \"RequestMetadata\" and\
    \ 1 \"Measurement\" element\n      containing 1 \"MeasurementMetadata\" and 1\
    \ \"Measurement\" element\n      represents a file containing the traceroute measurement\n\
    \      information of a traceroute measurement (containing both the\n      requested\
    \ traceroute measurement configuration parameters and the\n      ones actually\
    \ used);\n   o  other combinations are possible to store multiple traceroute\n\
    \      measurements all in one XML file.\n"
- title: 5.2.2.  Configuration Information Elements
  contents:
  - "5.2.2.  Configuration Information Elements\n   This section describes the elements\
    \ specific to the configuration of\n   the traceroute measurement (belonging to\
    \ both the \"RequestMetadata\"\n   and \"MeasurementMetadata\" elements).\n"
- title: 5.2.2.1.  CtlTargetAddressType
  contents:
  - "5.2.2.1.  CtlTargetAddressType\n   o  name - CtlTargetAddressType\n   o  description\
    \ - Specifies the type of address in the corresponding\n      \"CtlTargetAddress\"\
    \ element.  This element is not directly\n      reflected in the XML schema of\
    \ Section 7.  The host address type\n      can be determined by examining the\
    \ inetAddress type name and the\n      corresponding element value.\n   o  dataType\
    \ - inetAddressType\n   o  units - N/A\n"
- title: 5.2.2.2.  CtlTargetAddress
  contents:
  - "5.2.2.2.  CtlTargetAddress\n   o  name - CtlTargetAddress\n   o  description\
    \ - In the \"RequestMetadata\" element, it specifies the\n      host address requested\
    \ to be used in the traceroute measurement.\n      In the \"MeasurementMetadata\"\
    \ element, it specifies the host\n      address used in the traceroute measurement.\n\
    \   o  dataType - inetAddress\n   o  units - N/A\n"
- title: 5.2.2.3.  CtlBypassRouteTable
  contents:
  - "5.2.2.3.  CtlBypassRouteTable\n   o  name - CtlBypassRouteTable\n   o  description\
    \ - In the \"RequestMetadata\" element, specifies if the\n      optional bypassing\
    \ of the route table was enabled or not.  In the\n      \"MeasurementMetadata\"\
    \ element, specifies if the optional bypassing\n      of the route table was enabled\
    \ or not.  If enabled, the normal\n      routing tables will be bypassed and the\
    \ probes will be sent\n      directly to a host on an attached network.  If the\
    \ host is not on\n      a directly attached network, an error is returned.  This\
    \ option\n      can be used to perform the traceroute measurement to a local host\n\
    \      through an interface that has no route defined.  This object can\n    \
    \  be used when the setsockopt SOL_SOCKET SO_DONTROUTE option is\n      supported\
    \ and set (see [IEEE.1003-1G.1997]).\n   o  dataType - boolean\n   o  units -\
    \ N/A\n"
- title: 5.2.2.4.  CtlProbeDataSize
  contents:
  - "5.2.2.4.  CtlProbeDataSize\n   o  name - CtlProbeDataSize\n   o  description\
    \ - Specifies the size of the probes of a traceroute\n      measurement in octets\
    \ (requested if in the \"RequestMetadata\"\n      element, actually used if in\
    \ the \"MeasurementMetadata\" element).\n      If UDP datagrams are used as probes,\
    \ then the value contained in\n      this object is exact.  If another protocol\
    \ is used to transmit\n      probes (i.e., TCP or ICMP), for which the specified\
    \ size is not\n      appropriate, then the implementation can use whatever size\n\
    \      (appropriate to the method) is closest to the specified size.  The\n  \
    \    maximum value for this object is computed by subtracting the\n      smallest\
    \ possible IP header size of 20 octets (IPv4 header with no\n      options) and\
    \ the UDP header size of 8 octets from the maximum IP\n      packet size.  An\
    \ IP packet has a maximum size of 65535 octets\n      (excluding IPv6 jumbograms).\n\
    \   o  dataType - unsignedShort\n   o  units - octets\n"
- title: 5.2.2.5.  CtlTimeOut
  contents:
  - "5.2.2.5.  CtlTimeOut\n   o  name - CtlTimeOut\n   o  description - Specifies\
    \ the timeout value, in seconds, for each\n      probe of a traceroute measurement\
    \ (requested if in the\n      \"RequestMetadata\" element, actually used if in\
    \ the\n      \"MeasurementMetadata\" element).\n   o  dataType - unsignedByte\n\
    \   o  units - seconds\n"
- title: 5.2.2.6.  CtlProbesPerHop
  contents:
  - "5.2.2.6.  CtlProbesPerHop\n   o  name - CtlProbesPerHop\n   o  description -\
    \ Specifies the number of probes with the same time-\n      to-live (TTL) value\
    \ that are sent for each host (requested if in\n      the \"RequestMetadata\"\
    \ element, actually used if in the\n      \"MeasurementMetadata\" element).\n\
    \   o  dataType - unsignedByte\n   o  units - probes\n"
- title: 5.2.2.7.  CtlPort
  contents:
  - "5.2.2.7.  CtlPort\n   o  name - CtlPort\n   o  description - Specifies the base\
    \ port used by the traceroute\n      measurement (requested if in the \"RequestMetadata\"\
    \ element,\n      actually used if in the \"MeasurementMetadata\" element).\n\
    \   o  dataType - unsignedShort\n   o  units - port number\n"
- title: 5.2.2.8.  CtlMaxTtl
  contents:
  - "5.2.2.8.  CtlMaxTtl\n   o  name - CtlMaxTtl\n   o  description - Specifies the\
    \ maximum TTL value for the traceroute\n      measurement (requested if in the\
    \ \"RequestMetadata\" element,\n      actually used if in the \"MeasurementMetadata\"\
    \ element).\n   o  dataType - u8nonzero\n   o  units - time-to-live value\n"
- title: 5.2.2.9.  CtlDSField
  contents:
  - "5.2.2.9.  CtlDSField\n   o  name - CtlDSField\n   o  description - Specifies\
    \ the value that was requested to be stored\n      in the Differentiated Services\
    \ (DS) field in the traceroute probe\n      (if in the \"RequestMetadata\" element).\
    \  Specifies the value that\n      was stored in the Differentiated Services (DS)\
    \ field in the\n      traceroute probe (if in the \"MeasurementMetadata\" element).\
    \  The\n      DS field is defined as the Type of Service (TOS) octet in an IPv4\n\
    \      header or as the Traffic Class octet in an IPv6 header (see\n      Section\
    \ 7 of [RFC2460]).  The value of this object must be a\n      decimal integer\
    \ in the range from 0 to 255.  This option can be\n      used to determine what\
    \ effect an explicit DS field setting has on\n      a traceroute measurement and\
    \ its probes.  Not all values are legal\n      or meaningful.  Useful TOS octet\
    \ values are probably 16 (low\n      delay) and 8 (high throughput).  Further\
    \ references can be found\n      in [RFC2474] for the definition of the Differentiated\
    \ Services\n      (DS) field and in [RFC1812] Section 5.3.2 for Type of Service\n\
    \      (TOS).\n   o  dataType - unsignedByte\n   o  units - N/A\n"
- title: 5.2.2.10.  CtlSourceAddressType
  contents:
  - "5.2.2.10.  CtlSourceAddressType\n   o  name - CtlSourceAddressType\n   o  description\
    \ - Specifies the type of address in the corresponding\n      \"CtlSourceAddress\"\
    \ element.  This element is not directly\n      reflected in the XML schema of\
    \ Section 7.  The host address type\n      can be determined by examining the\
    \ \"inetAddress\" type name and the\n      corresponding element value.  DNS names\
    \ are not allowed for the\n      \"CtlSourceAddress\".\n   o  dataType - inetAddressType\n\
    \   o  units - N/A\n"
- title: 5.2.2.11.  CtlSourceAddress
  contents:
  - "5.2.2.11.  CtlSourceAddress\n   o  name - CtlSourceAddress\n   o  description\
    \ - Specifies the IP address (which has to be given as\n      an IP number, not\
    \ a hostname) as the source address in traceroute\n      probes (requested if\
    \ in the \"RequestMetadata\" element, actually\n      used if in the \"MeasurementMetadata\"\
    \ element).  On hosts with more\n      than one IP address, this option can be\
    \ used in the\n      \"RequestMetadata\" element to force the source address to\
    \ be\n      something other than the primary IP address of the interface the\n\
    \      probe is sent on; the value \"unknown\" means the default address\n   \
    \   will be used.\n   o  dataType - inetAddress\n   o  units - N/A\n"
- title: 5.2.2.12.  CtlIfIndex
  contents:
  - "5.2.2.12.  CtlIfIndex\n   o  name - CtlIfIndex\n   o  description - Specifies\
    \ the interface index as defined in\n      [RFC2863] that is requested to be used\
    \ in the traceroute\n      measurement for sending the traceroute probes (if in\
    \ the\n      \"RequestMetadata\" element).  A value of 0 indicates that no\n \
    \     specific interface is requested.  Specifies the interface index\n      actually\
    \ used (if in the \"MeasurementMetadata\" element).\n   o  dataType - unsignedInt\n\
    \   o  units - N/A\n"
- title: 5.2.2.13.  CtlMiscOptions
  contents:
  - "5.2.2.13.  CtlMiscOptions\n   o  name - CtlMiscOptions\n   o  description - Specifies\
    \ implementation-dependent options\n      (requested if in the \"RequestMetadata\"\
    \ element, actually used if\n      in the \"MeasurementMetadata\" element).\n\
    \   o  dataType - string255\n   o  units - N/A\n"
- title: 5.2.2.14.  CtlMaxFailures
  contents:
  - "5.2.2.14.  CtlMaxFailures\n   o  name - CtlMaxFailures\n   o  description - Specifies\
    \ the maximum number of consecutive timeouts\n      allowed before terminating\
    \ a traceroute measurement (requested if\n      in the \"RequestMetadata\" element,\
    \ actually used if in the\n      \"MeasurementMetadata\" element).  A value of\
    \ either 255 (maximum\n      hop count/possible TTL value) or 0 indicates that\
    \ the function of\n      terminating a remote traceroute measurement when a specific\
    \ number\n      of consecutive timeouts are detected was disabled.  This element\n\
    \      is included to give full compatibility with [RFC4560].  No known\n    \
    \  implementation of traceroute currently supports it.\n   o  dataType - Unsigned8\n\
    \   o  units - timeouts\n"
- title: 5.2.2.15.  CtlDontFragment
  contents:
  - "5.2.2.15.  CtlDontFragment\n   o  name - CtlDontFragment\n   o  description -\
    \ Specifies if the don't fragment (DF) flag in the IP\n      header for a probe\
    \ was enabled or not (if in the\n      \"MeasurementMetadata\" element).  If in\
    \ the \"RequestMetadata\", it\n      specifies if the flag was requested to be\
    \ enabled or not.  Setting\n      the DF flag can be used for performing a manual\
    \ PATH MTU test.\n   o  dataType - boolean\n   o  units - N/A\n"
- title: 5.2.2.16.  CtlInitialTtl
  contents:
  - "5.2.2.16.  CtlInitialTtl\n   o  name - CtlInitialTtl\n   o  description - Specifies\
    \ the initial TTL value for a traceroute\n      measurement (requested if in the\
    \ \"RequestMetadata\" element,\n      actually used if in the \"MeasurementMetadata\"\
    \ element).  Such TTL\n      setting is intended to bypass the initial (often\
    \ well-known)\n      portion of a path.\n   o  dataType - u8nonzero\n   o  units\
    \ - N/A\n"
- title: 5.2.2.17.  CtlDescr
  contents:
  - "5.2.2.17.  CtlDescr\n   o  name - CtlDescr\n   o  description - Provides a description\
    \ of the traceroute\n      measurement.\n   o  dataType - string255\n   o  units\
    \ - N/A\n"
- title: 5.2.2.18.  CtlType
  contents:
  - "5.2.2.18.  CtlType\n   o  name - CtlType\n   o  description - Specifies the implementation\
    \ method used for the\n      traceroute measurement (requested if in the \"RequestMetadata\"\
    \n      element, actually used if in the \"MeasurementMetadata\" element).\n \
    \     It specifies if the traceroute is using TCP, UDP, ICMP, or other\n     \
    \ types of probes.  It is possible to specify other types of probes\n      by\
    \ using an element specified in another schema with a different\n      namespace.\n\
    \   o  dataType - probesType\n   o  units - N/A\n"
- title: 5.2.3.  Results Information Elements
  contents:
  - "5.2.3.  Results Information Elements\n   This section describes the elements\
    \ specific to the results of the\n   traceroute measurement.\n"
- title: 5.2.3.1.  ResultsStartDateAndTime
  contents:
  - "5.2.3.1.  ResultsStartDateAndTime\n   o  name - ResultsStartDateAndTime\n   o\
    \  description - Specifies the date and start time of the traceroute\n      measurement.\
    \  This is the time when the first probe was seen at\n      the sending interface.\n\
    \   o  dataType - DateTime\n   o  units - N/A\n"
- title: 5.2.3.2.  ResultsIpTgtAddrType
  contents:
  - "5.2.3.2.  ResultsIpTgtAddrType\n   o  name - ResultsIpTgtAddrType\n   o  description\
    \ - Specifies the type of address in the corresponding\n      \"ResultsIpTgtAddr\"\
    \ element.  This element is not directly\n      reflected in the XML schema of\
    \ Section 7.  The host address type\n      can be determined by examining the\
    \ \"inetAddress\" type name and the\n      corresponding element value.\n   o\
    \  dataType - inetAddressType\n   o  units - N/A\n"
- title: 5.2.3.3.  ResultsIpTgtAddr
  contents:
  - "5.2.3.3.  ResultsIpTgtAddr\n   o  name - ResultsIpTgtAddr\n   o  description\
    \ - Specifies the IP address associated with a\n      \"CtlTargetAddress\" value\
    \ when the destination address is specified\n      as a DNS name.  The value of\
    \ this object should be \"unknown\" if a\n      DNS name is not specified or if\
    \ a specified DNS name fails to\n      resolve.\n   o  dataType - inetAddress\n\
    \   o  units - N/A\n"
- title: 5.2.3.4.  HopAddrType
  contents:
  - "5.2.3.4.  HopAddrType\n   o  name - HopAddrType\n   o  description - Specifies\
    \ the type of address in the corresponding\n      \"HopAddr\" element.  This element\
    \ is not directly reflected in the\n      XML schema of Section 7.  The host address\
    \ type can be determined\n      by examining the \"inetAddress\" type name and\
    \ the corresponding\n      element value.  DNS names are not allowed for \"HopAddr\"\
    .\n   o  dataType - inetAddressType\n   o  units - N/A\n"
- title: 5.2.3.5.  HopAddr
  contents:
  - "5.2.3.5.  HopAddr\n   o  name - HopAddr\n   o  description - Specifies the address\
    \ of a hop in the traceroute\n      measurement path.  This object is not allowed\
    \ to be a DNS name.\n   o  dataType - inetAddress\n   o  units - N/A\n"
- title: 5.2.3.6.  HopName
  contents:
  - "5.2.3.6.  HopName\n   o  name - HopName\n   o  description - Specifies the DNS\
    \ name of the \"HopAddr\" if it is\n      available.  If it is not available,\
    \ the element is omitted.\n   o  dataType - inetAddress\n   o  units - N/A\n"
- title: 5.2.3.7.  MPLSLabelStackEntry
  contents:
  - "5.2.3.7.  MPLSLabelStackEntry\n   o  name - MPLSLabelStackEntry\n   o  description\
    \ - Specifies entries of the MPLS label stack of a probe\n      observed when\
    \ the probe arrived at the hop that replied to the\n      probe.  This object\
    \ contains one MPLS label stack entry as a\n      32-bit value as it is observed\
    \ on the MPLS label stack.  Contained\n      in this single number are the MPLS\
    \ label, the Exp field, the S\n      flag, and the MPLS TTL value as specified\
    \ in [RFC3032].  If more\n      than one MPLS label stack entry is reported, then\
    \ multiple\n      instances of elements of this type are used.  They must be ordered\n\
    \      in the same order as on the label stack with the top label stack\n    \
    \  entry being reported first.\n   o  dataType - unsignedInt\n   o  units - N/A\n"
- title: 5.2.3.8.  ProbeRoundTripTime
  contents:
  - "5.2.3.8.  ProbeRoundTripTime\n   o  name - ProbeRoundTripTime\n   o  description\
    \ - If this element contains the element\n      \"roundTripTime\", this specifies\
    \ the amount of time measured in\n      milliseconds from when a probe was sent\
    \ to when its response was\n      received or when it timed out.  The value of\
    \ this element is\n      reported as the truncation of the number reported by\
    \ the\n      traceroute tool (the output \"< 1 ms\" is therefore encoded as 0\n\
    \      ms).  If it contains the element \"roundTripTimeNotAvailable\", it\n  \
    \    means either the probe was lost because of a timeout or it was not\n    \
    \  possible to transmit a probe.\n   o  dataType - unsignedShort or string\n \
    \  o  units - milliseconds or N/A\n"
- title: 5.2.3.9.  ResponseStatus
  contents:
  - "5.2.3.9.  ResponseStatus\n   o  name - ResponseStatus\n   o  description - Specifies\
    \ the result of a traceroute measurement\n      made by the host for a particular\
    \ probe.\n   o  dataType - operationResponseStatus\n   o  units - N/A\n"
- title: 5.2.3.10.  Time
  contents:
  - "5.2.3.10.  Time\n   o  name - Time\n   o  description - Specifies the timestamp\
    \ for the time the response to\n      the probe was received at the interface.\n\
    \   o  dataType - DateTime\n   o  units - N/A\n"
- title: 5.2.3.11.  ResultsEndDateAndTime
  contents:
  - "5.2.3.11.  ResultsEndDateAndTime\n   o  name - ResultsEndDateAndTime\n   o  description\
    \ - Specifies the date and end time of the traceroute\n      measurement.  It\
    \ is either the time when the response to the last\n      probe of the traceroute\
    \ measurement was received or the time when\n      the last probe of the traceroute\
    \ measurement was sent plus the\n      relative timeout (in case of a missing\
    \ response).\n   o  dataType - DateTime\n   o  units - N/A\n"
- title: 5.2.3.12.  HopRawOutputData
  contents:
  - "5.2.3.12.  HopRawOutputData\n   o  name - HopRawOutputData\n   o  description\
    \ - Specifies the raw output data returned by the\n      traceroute measurement\
    \ for a certain hop in a traceroute\n      measurement path.  It is an implementation-dependent,\
    \ printable\n      string, expected to be useful for a human interpreting the\n\
    \      traceroute results.\n   o  dataType - string\n   o  units - N/A\n"
- title: 5.2.4.  Information Element Correlating Configuration and Results
  contents:
  - "5.2.4.  Information Element Correlating Configuration and Results\n        Elements\n\
    \   This section defines an additional element belonging to both previous\n  \
    \ groups (configuration elements and results elements) named\n   \"TestName\"\
    .  This element is defined in order to relate configuration\n   and results elements\
    \ by means of a common unique identifier (to be\n   chosen in accordance to the\
    \ specification of [RFC4560]).\n"
- title: 5.2.4.1.  TestName
  contents:
  - "5.2.4.1.  TestName\n   o  name - TestName\n   o  description - Specifies the\
    \ name of a traceroute measurement.\n      This is not necessarily unique within\
    \ any well-defined scope\n      (e.g., a specific host, initiator of the traceroute\
    \ measurement).\n   o  dataType - string255\n   o  units - N/A\n"
- title: 5.2.5.  Information Elements to Compare Traceroute Measurement Results
  contents:
  - "5.2.5.  Information Elements to Compare Traceroute Measurement Results\n    \
    \    with Each Other\n   This section defines additional elements belonging to\
    \ both previous\n   groups (configuration elements and results elements); these\
    \ elements\n   were defined in order to allow traceroute measurement results\n\
    \   comparison among different traceroute measurements.\n"
- title: 5.2.5.1.  OSName
  contents:
  - "5.2.5.1.  OSName\n   o  name - OSName\n   o  description - Specifies the name\
    \ of the operating system on which\n      the traceroute measurement was launched.\
    \  This element is ignored\n      if used in the \"RequestMetadata\".\n   o  dataType\
    \ - string255\n   o  units - N/A\n"
- title: 5.2.5.2.  OSVersion
  contents:
  - "5.2.5.2.  OSVersion\n   o  name - OSVersion\n   o  description - Specifies the\
    \ OS version on which the traceroute\n      measurement was launched.  This element\
    \ is ignored if used in the\n      \"RequestMetadata\".\n   o  dataType - string255\n\
    \   o  units - N/A\n"
- title: 5.2.5.3.  ToolVersion
  contents:
  - "5.2.5.3.  ToolVersion\n   o  name - ToolVersion\n   o  description - Specifies\
    \ the version of the traceroute tool\n      (requested to be used if in the \"\
    RequestMetadata\" element,\n      actually used if in the \"MeasurementMetadata\"\
    \ element).\n   o  dataType - string255\n   o  units - N/A\n"
- title: 5.2.5.4.  ToolName
  contents:
  - "5.2.5.4.  ToolName\n   o  name - ToolName\n   o  description - Specifies the\
    \ name of the traceroute tool (requested\n      to be used if in the \"RequestMetadata\"\
    \ element, actually used if\n      in the \"MeasurementMetadata\" element).\n\
    \   o  dataType - string255\n   o  units - N/A\n"
- title: 6.  Data Model for Storing Traceroute Measurements
  contents:
  - "6.  Data Model for Storing Traceroute Measurements\n   For storing and transmitting\
    \ information according to the information\n   model defined in the previous section,\
    \ a data model is required that\n   specifies how to encode the elements of the\
    \ information model.\n   There are several design choices for a data model.  It\
    \ can use a\n   binary or textual representation and it can be defined from scratch\n\
    \   or use already existing frameworks and data models.  In general, the\n   use\
    \ of already existing frameworks and models should be preferred.\n   Binary and\
    \ textual representations both have advantages and\n   disadvantages.  Textual\
    \ representations are (with some limitations)\n   human-readable, while a binary\
    \ representation consumes less resources\n   for storing, transmitting, and parsing\
    \ data.\n   An already existing and closely related data model is the DISMAN-\n\
    \   TRACEROUTE-MIB module [RFC4560], which specifies a Structure of\n   Management\
    \ Information version 2 (SMIv2) encoding [RFC2578],\n   [RFC2579], and [RFC2580]\
    \ for transmitting traceroute measurement\n   information (configuration and results).\
    \  This data model is well\n   suited and supported within network management\
    \ systems, but as a\n   general format for storing and transmitting traceroute\
    \ results, it is\n   not easily applicable.\n   Another binary representation\
    \ would be an extension of traffic-flow\n   information encodings as specified\
    \ for the IP Flow Information Export\n   (IPFIX) protocol [RFC5101], [RFC5102].\
    \  The IPFIX protocol is\n   extensible.  However, the architecture behind this\
    \ protocol [IPFIX]\n   is targeted at exporting passively measured flow information.\n\
    \   Therefore, some obstacles are expected when trying to use it for\n   transmitting\
    \ traceroute measurement information.\n   For textual representations, using the\
    \ eXtensible Markup Language\n   (XML) [W3C.REC-xml-20060816] is an obvious choice.\
    \  XML supports\n   clean structuring of data and syntax checking of records.\
    \  With some\n   limitations, it is human-readable.  It is supported well by a\
    \ huge\n   pool of tools and standards for generating, transmitting, parsing,\n\
    \   and converting it to other data formats.  Its disadvantages are the\n   resource\
    \ consumption for processing, storing, and transmitting\n   information.  Since\
    \ the expected data volumes related to traceroute\n   measurement in network operation\
    \ and maintenance are not expected to\n   be extremely high, the inefficient usage\
    \ of resources is not a\n   significant disadvantage.  Therefore, XML was chosen\
    \ as a basis for\n   the traceroute measurement information model that is specified\
    \ in\n   this memo.\n   Section 7 contains the XML schema to be used as a template\
    \ for\n   storing and/or exchanging traceroute measurement information.  The\n\
    \   schema was designed in order to use an extensible approach based on\n   templates\
    \ (pretty similar to how the IPFIX protocol is designed)\n   where the traceroute\
    \ configuration elements (both the requested\n   parameters, \"RequestMetadata\"\
    , and the actual parameters used,\n   \"MeasurementMetadata\") are metadata to\
    \ be referenced by results\n   information elements (data) by means of the \"\
    TestName\" element (used\n   as a unique identifier, chosen in accordance to the\
    \ specification of\n   [RFC4560]).  Currently Open Grid Forum (OGF) is also using\
    \ this\n   approach and cross-requirements have been analyzed.  As a result of\n\
    \   this analysis, the XML schema contained in Section 7 is compatible\n   with\
    \ the OGF schema since both were designed in a way that limits the\n   unnecessary\
    \ redundancy and a simple one-to-one transformation between\n   the two exists.\n"
- title: 7.  XML Schema for Traceroute Measurements
  contents:
  - "7.  XML Schema for Traceroute Measurements\n   This section presents the XML\
    \ schema to be used as a template for\n   storing and/or exchanging traceroute\
    \ measurement information.  The\n   schema uses UTF-8 encoding as defined in [RFC3629].\
    \  In documents\n   conforming to the format presented here, an XML declaration\
    \ SHOULD be\n   present specifying the version and the character encoding of the\
    \ XML\n   document.  The document should be encoded using UTF-8.  Since some of\n\
    \   the strings can span multiple lines, [RFC5198] applies.  XML\n   processing\
    \ instructions and comments MUST be ignored.  Mind that\n   whitespace is significant\
    \ in XML when writing documents conforming to\n   this schema.  Documents using\
    \ the presented format must be valid\n   according to the XML schema shown in\
    \ this section.  Since elements of\n   type \"_CtlType\" may contain elements\
    \ from unknown namespaces, those\n   elements MUST be ignored if their namespace\
    \ is unknown to the\n   processor.  Values for elements using the XML schema type\
    \ \"dateTime\"\n   MUST be restricted to values defined in [RFC3339].  Future\
    \ versions\n   of this format MAY extend this schema by creating a new schema\
    \ that\n   redefines all or some of the data types and elements defined in this\n\
    \   version or by establishing a complete new schema.\n   Due to the limited line\
    \ length some lines appear wrapped.\n <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n <xs:schema elementFormDefault=\"qualified\"\n            targetNamespace=\"\
    urn:ietf:params:xml:ns:traceroute-1.0\"\n            xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n            xmlns:tr=\"urn:ietf:params:xml:ns:traceroute-1.0\">\n   <xs:simpleType\
    \ name=\"string255\">\n     <xs:annotation>\n       <xs:documentation>String restricted\
    \ to 255\n       characters.</xs:documentation>\n     </xs:annotation>\n     <xs:restriction\
    \ base=\"xs:string\">\n       <xs:maxLength value=\"255\"/>\n     </xs:restriction>\n\
    \   </xs:simpleType>\n   <xs:simpleType name=\"u8nonzero\">\n     <xs:annotation>\n\
    \       <xs:documentation>unsignedByte with non zero\n       value.</xs:documentation>\n\
    \     </xs:annotation>\n     <xs:restriction base=\"xs:unsignedByte\">\n     \
    \  <xs:minInclusive value=\"1\"/>\n     </xs:restriction>\n   </xs:simpleType>\n\
    \   <xs:complexType name=\"_roundTripTime\">\n     <xs:choice>\n       <xs:element\
    \ name=\"roundTripTime\">\n         <xs:simpleType>\n           <xs:restriction\
    \ base=\"xs:unsignedInt\"/>\n         </xs:simpleType>\n       </xs:element>\n\
    \       <xs:element name=\"roundTripTimeNotAvailable\">\n         <xs:complexType/>\n\
    \       </xs:element>\n     </xs:choice>\n   </xs:complexType>\n   <xs:complexType\
    \ name=\"_inetAddressUnknown\"/>\n   <xs:simpleType name=\"_inetAddressIpv4\"\
    >\n     <xs:restriction base=\"xs:string\">\n       <xs:pattern value=\"(([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5\n\
    \ ]).){3}([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\"/>\n     </xs:restriction>\n\
    \   </xs:simpleType>\n   <xs:simpleType name=\"_inetAddressIpv6\">\n     <xs:restriction\
    \ base=\"xs:string\">\n       <xs:pattern value=\"(([\\dA-Fa-f]{1,4}:){7}[\\dA-Fa-f]{1,4})(:([\\\
    d\n ]{1,3}.){3}[\\d]{1,3})?\"/>\n     </xs:restriction>\n   </xs:simpleType>\n\
    \   <xs:simpleType name=\"_inetAddressDns\">\n     <xs:restriction base=\"xs:string\"\
    >\n       <xs:maxLength value=\"256\"/>\n     </xs:restriction>\n   </xs:simpleType>\n\
    \   <xs:complexType name=\"_inetAddressASNumber\">\n     <xs:annotation>\n   \
    \    <xs:documentation>Specifies the AS number of a hop in the\n       traceroute\
    \ path as a 32-bit number and indicates how the\n       mapping from IP address\
    \ to AS number was\n       performed.</xs:documentation>\n     </xs:annotation>\n\
    \     <xs:sequence>\n       <xs:element name=\"asNumber\" type=\"xs:unsignedInt\"\
    />\n       <xs:element name=\"ipASNumberMappingType\">\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:string\">\n             <xs:enumeration\
    \ value=\"bgptables\"/>\n             <xs:enumeration value=\"routingregistries\"\
    />\n             <xs:enumeration value=\"nslookup\"/>\n             <xs:enumeration\
    \ value=\"others\"/>\n             <xs:enumeration value=\"unknown\"/>\n     \
    \      </xs:restriction>\n         </xs:simpleType>\n       </xs:element>\n  \
    \   </xs:sequence>\n   </xs:complexType>\n   <xs:complexType name=\"inetAddress\"\
    >\n     <xs:choice>\n       <xs:element name=\"inetAddressUnknown\"\n        \
    \           type=\"tr:_inetAddressUnknown\"/>\n       <xs:element name=\"inetAddressIpv4\"\
    \ type=\"tr:_inetAddressIpv4\"/>\n       <xs:element name=\"inetAddressIpv6\"\
    \ type=\"tr:_inetAddressIpv6\"/>\n       <xs:element name=\"inetAddressASNumber\"\
    \n                   type=\"tr:_inetAddressASNumber\"/>\n       <xs:element minOccurs=\"\
    0\" name=\"inetAddressDns\"\n                   type=\"tr:_inetAddressDns\"/>\n\
    \     </xs:choice>\n   </xs:complexType>\n   <xs:complexType name=\"inetAddressWithoutDns\"\
    >\n     <xs:sequence>\n       <xs:choice>\n         <xs:element name=\"inetAddressUnknown\"\
    \n                     type=\"tr:_inetAddressUnknown\"/>\n         <xs:element\
    \ name=\"inetAddressIpv4\"\n                     type=\"tr:_inetAddressIpv4\"\
    />\n         <xs:element name=\"inetAddressIpv6\"\n                     type=\"\
    tr:_inetAddressIpv6\"/>\n         <xs:element name=\"inetAddressASNumber\"\n \
    \                    type=\"tr:_inetAddressASNumber\"/>\n       </xs:choice>\n\
    \     </xs:sequence>\n   </xs:complexType>\n   <xs:simpleType name=\"operationResponseStatus\"\
    >\n     <xs:restriction base=\"xs:string\">\n       <xs:enumeration value=\"responseReceived\"\
    />\n       <xs:enumeration value=\"unknown\"/>\n       <xs:enumeration value=\"\
    internalError\"/>\n       <xs:enumeration value=\"requestTimedOut\"/>\n      \
    \ <xs:enumeration value=\"unknownDestinationAddress\"/>\n       <xs:enumeration\
    \ value=\"noRouteToTarget\"/>\n       <xs:enumeration value=\"interfaceInactiveToTarget\"\
    />\n       <xs:enumeration value=\"arpFailure\"/>\n       <xs:enumeration value=\"\
    maxConcurrentLimitReached\"/>\n       <xs:enumeration value=\"unableToResolveDnsName\"\
    />\n       <xs:enumeration value=\"invalidHostAddress\"/>\n     </xs:restriction>\n\
    \   </xs:simpleType>\n   <xs:complexType name=\"_CtlType\">\n     <xs:choice>\n\
    \       <xs:element name=\"TCP\">\n         <xs:complexType/>\n       </xs:element>\n\
    \       <xs:element name=\"UDP\">\n         <xs:complexType/>\n       </xs:element>\n\
    \       <xs:element name=\"ICMP\">\n         <xs:complexType/>\n       </xs:element>\n\
    \       <xs:any namespace=\"##other\"/>\n     </xs:choice>\n   </xs:complexType>\n\
    \   <xs:complexType name=\"_ProbeResults\">\n     <xs:sequence>\n       <xs:element\
    \ maxOccurs=\"255\" name=\"hop\">\n         <xs:complexType>\n           <xs:sequence>\n\
    \             <xs:element maxOccurs=\"10\" name=\"probe\">\n               <xs:complexType>\n\
    \                 <xs:sequence>\n                   <xs:element name=\"HopAddr\"\
    \n                               type=\"tr:inetAddressWithoutDns\">\n        \
    \             <xs:annotation>\n                       <xs:documentation>Specifies\
    \ the address of a\n                       hop in the traceroute measurement path.\
    \  This\n                       object is not allowed to be a DNS name.  The\n\
    \                       address type can be determined by examining the\n    \
    \                   \"inetAddress\" type name and the corresponding\n        \
    \               element value.</xs:documentation>\n                     </xs:annotation>\n\
    \                   </xs:element>\n                   <xs:element minOccurs=\"\
    0\" name=\"HopName\"\n                               type=\"tr:_inetAddressDns\"\
    >\n                     <xs:annotation>\n                       <xs:documentation>Specifies\
    \ the DNS name of\n                       the \"HopAddr\" if it is available.\
    \  If it is\n                       not available, the element is\n          \
    \             omitted.</xs:documentation>\n                     </xs:annotation>\n\
    \                   </xs:element>\n                   <xs:element maxOccurs=\"\
    255\" minOccurs=\"0\"\n                               name=\"MPLSLabelStackEntry\"\
    >\n                     <xs:annotation>\n                       <xs:documentation>Specifies\
    \ entries of the\n                       MPLS label stack of a probe observed\
    \ when the\n                       probe arrived at the hop that replied to the\n\
    \                       probe.  This object contains one MPLS label stack\n  \
    \                     entry as a 32-bit value as it is observed on the\n     \
    \                  MPLS label stack.  Contained in this single\n             \
    \          number are the MPLS label, the Exp field, the S\n                 \
    \      flag, and the MPLS TTL value as specified in\n                       [RFC3032].\
    \  If more than one MPLS label stack\n                       entry is reported,\
    \ then multiple instances of\n                       elements of this type are\
    \ used.  They must be\n                       ordered in the same order as on\
    \ the label stack\n                       with the top label stack entry being\
    \ reported\n                       first.</xs:documentation>\n               \
    \      </xs:annotation>\n                     <xs:simpleType>\n              \
    \         <xs:restriction base=\"xs:unsignedInt\">\n                         <xs:maxInclusive\
    \ value=\"4294967295\"/>\n                       </xs:restriction>\n         \
    \            </xs:simpleType>\n                   </xs:element>\n            \
    \       <xs:element name=\"ProbeRoundTripTime\"\n                            \
    \   type=\"tr:_roundTripTime\">\n                     <xs:annotation>\n      \
    \                 <xs:documentation>If this element contains the\n           \
    \            element \"roundTripTime\", this specifies the\n                 \
    \      amount of time measured in milliseconds from\n                       when\
    \ a probe was sent to when its response was\n                       received or\
    \ when it timed out.  The value of\n                       this element is reported\
    \ as the truncation of\n                       the number reported by the traceroute\
    \ tool (the\n                       output \"&lt; 1 ms\" is therefore encoded\
    \ as 0 ms).\n                       If it contains the element\n             \
    \          \"roundTripTimeNotAvailable\", it means either\n                  \
    \     the probe was lost because of a timeout or it\n                       was\
    \ not possible to transmit a probe.\n                       </xs:documentation>\n\
    \                     </xs:annotation>\n                   </xs:element>\n   \
    \                <xs:element name=\"ResponseStatus\"\n                       \
    \        type=\"tr:operationResponseStatus\">\n                     <xs:annotation>\n\
    \                       <xs:documentation>Specifies the result of a\n        \
    \               traceroute measurement made by the host for a\n              \
    \         particular probe.</xs:documentation>\n                     </xs:annotation>\n\
    \                   </xs:element>\n                   <xs:element name=\"Time\"\
    \ type=\"xs:dateTime\">\n                     <xs:annotation>\n              \
    \         <xs:documentation>Specifies the timestamp for\n                    \
    \   the time the response to the probe was\n                       received at\
    \ the interface.</xs:documentation>\n                     </xs:annotation>\n \
    \                  </xs:element>\n                 </xs:sequence>\n          \
    \     </xs:complexType>\n             </xs:element>\n             <xs:element\
    \ minOccurs=\"0\" name=\"HopRawOutputData\"\n                         type=\"\
    tr:string255\">\n               <xs:annotation>\n                 <xs:documentation>Specifies\
    \ the raw output data\n                 returned by the traceroute measurement\
    \ for a\n                 certain hop in a traceroute measurement path.  It is\n\
    \                 an implementation-dependent, printable string,\n           \
    \      expected to be useful for a human interpreting the\n                 traceroute\
    \ results.</xs:documentation>\n               </xs:annotation>\n             </xs:element>\n\
    \           </xs:sequence>\n         </xs:complexType>\n       </xs:element>\n\
    \     </xs:sequence>\n   </xs:complexType>\n   <xs:complexType name=\"_Metadata\"\
    >\n     <xs:annotation>\n       <xs:documentation>Specifies the metadata for a\
    \ traceroute\n       operation -- the parameters requested if used in\n      \
    \ \"RequestMetadata\" or the actual parameters used if used in\n       \"MeasurementMetadata\"\
    .</xs:documentation>\n     </xs:annotation>\n     <xs:sequence>\n       <xs:element\
    \ name=\"TestName\" type=\"tr:string255\">\n         <xs:annotation>\n       \
    \    <xs:documentation>Specifies the name of a traceroute\n           measurement.\
    \  This is not necessarily unique within any\n           well-defined scope (e.g.,\
    \ a specific host, initiator of\n           the traceroute measurement).</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element default=\"\
    \" name=\"OSName\" type=\"tr:string255\">\n         <xs:annotation>\n        \
    \   <xs:documentation>Specifies the name of the operating\n           system on\
    \ which the traceroute measurement was launched.\n           This element is ignored\
    \ if used in the\n           \"RequestMetadata\".</xs:documentation>\n       \
    \  </xs:annotation>\n       </xs:element>\n       <xs:element default=\"\" name=\"\
    OSVersion\" type=\"tr:string255\">\n         <xs:annotation>\n           <xs:documentation>Specifies\
    \ the OS version on which the\n           traceroute measurement was launched.\
    \  This element is\n           ignored if used in the\n           \"RequestMetadata\"\
    .</xs:documentation>\n         </xs:annotation>\n       </xs:element>\n      \
    \ <xs:element default=\"\" name=\"ToolVersion\" type=\"tr:string255\">\n     \
    \    <xs:annotation>\n           <xs:documentation>Specifies the version of the\
    \ traceroute\n           tool (requested to be used if in the \"RequestMetadata\"\
    \n           element, actually used if in the \"MeasurementMetadata\"\n      \
    \     element).</xs:documentation>\n         </xs:annotation>\n       </xs:element>\n\
    \       <xs:element default=\"\" name=\"ToolName\" type=\"tr:string255\">\n  \
    \       <xs:annotation>\n           <xs:documentation>Specifies the name of the\
    \ traceroute\n           tool (requested to be used if in the \"RequestMetadata\"\
    \n           element, actually used if in the \"MeasurementMetadata\"\n      \
    \     element).</xs:documentation>\n         </xs:annotation>\n       </xs:element>\n\
    \       <xs:element name=\"CtlTargetAddress\" type=\"tr:inetAddress\">\n     \
    \    <xs:annotation>\n           <xs:documentation>In the \"RequestMetadata\"\
    \ element, it\n           specifies the host address requested to be used in the\n\
    \           traceroute measurement.  In the \"MeasurementMetadata\"\n        \
    \   element, it specifies the host address used in the\n           traceroute\
    \ measurement.  The host address type can be\n           determined by examining\
    \ the \"inetAddress\" type name and\n           the corresponding element value.</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element default=\"\
    false\" name=\"CtlBypassRouteTable\"\n                   type=\"xs:boolean\">\n\
    \         <xs:annotation>\n           <xs:documentation>In the \"RequestMetadata\"\
    \ element\n           specifies if the optional bypassing of the route\n     \
    \      table was enabled or not.  In the \"MeasurementMetadata\"\n           element,\
    \ specifies if the optional bypassing of the route\n           table was enabled\
    \ or not.  If enabled, the normal routing\n           tables will be bypassed\
    \ and the probes will be sent\n           directly to a host on an attached network.\
    \  If the host is\n           not on a directly attached network, an error is\
    \ returned.\n           This option can be used to perform the traceroute\n  \
    \         measurement to a local host through an interface that has\n        \
    \   no route defined.  This object can be used when the\n           setsockopt\
    \ SOL_SOCKET SO_DONTROUTE option is supported and\n           set (see the POSIX\
    \ standard IEEE.1003-1G.1997).\n           </xs:documentation>\n         </xs:annotation>\n\
    \       </xs:element>\n       <xs:element default=\"0\" name=\"CtlProbeDataSize\"\
    >\n         <xs:annotation>\n           <xs:documentation>Specifies the size of\
    \ the probes of a\n           traceroute measurement in octets (requested if in\
    \ the\n           \"RequestMetadata\" element, actually used if in the\n     \
    \      \"MeasurementMetadata\" element).  If UDP datagrams are used\n        \
    \   as probes, then the value contained in this object is\n           exact. \
    \ If another protocol is used to transmit probes\n           (i.e., TCP or ICMP)\
    \ for which the specified size is not\n           appropriate, then the implementation\
    \ can use whatever\n           size (appropriate to the method) is closest to\
    \ the\n           specified size.  The maximum value for this object is\n    \
    \       computed by subtracting the smallest possible IP header\n           size\
    \ of 20 octets (IPv4 header with no options) and the\n           UDP header size\
    \ of 8 octets from the maximum IP packet\n           size.  An IP packet has a\
    \ maximum size of 65535 octets\n           (excluding IPv6 jumbograms).</xs:documentation>\n\
    \         </xs:annotation>\n         <xs:simpleType>\n           <xs:restriction\
    \ base=\"xs:unsignedShort\">\n             <xs:maxInclusive value=\"65507\"/>\n\
    \           </xs:restriction>\n         </xs:simpleType>\n       </xs:element>\n\
    \       <xs:element default=\"3\" name=\"CtlTimeOut\">\n         <xs:annotation>\n\
    \           <xs:documentation>Specifies the timeout value, in\n           seconds,\
    \ for each probe of a traceroute measurement\n           (requested if in the\
    \ \"RequestMetadata\" element, actually\n           used if in the \"MeasurementMetadata\"\
    \n           element).</xs:documentation>\n         </xs:annotation>\n       \
    \  <xs:simpleType>\n           <xs:restriction base=\"xs:unsignedByte\">\n   \
    \          <xs:minInclusive value=\"1\"/>\n             <xs:maxInclusive value=\"\
    60\"/>\n           </xs:restriction>\n         </xs:simpleType>\n       </xs:element>\n\
    \       <xs:element default=\"3\" name=\"CtlProbesPerHop\">\n         <xs:annotation>\n\
    \           <xs:documentation>Specifies the number of probes with the\n      \
    \     same time-to-live (TTL) value that are sent for each host\n           (requested\
    \ if in the \"RequestMetadata\" element, actually\n           used if in the \"\
    MeasurementMetadata\"\n           element).</xs:documentation>\n         </xs:annotation>\n\
    \         <xs:simpleType>\n           <xs:restriction base=\"xs:unsignedByte\"\
    >\n             <xs:minInclusive value=\"1\"/>\n             <xs:maxInclusive\
    \ value=\"10\"/>\n           </xs:restriction>\n         </xs:simpleType>\n  \
    \     </xs:element>\n       <xs:element default=\"33434\" name=\"CtlPort\">\n\
    \         <xs:annotation>\n           <xs:documentation>Specifies the base port\
    \ used by the\n           traceroute measurement (requested if in the\n      \
    \     \"RequestMetadata\" element, actually used if in the\n           \"MeasurementMetadata\"\
    \ element).</xs:documentation>\n         </xs:annotation>\n         <xs:simpleType>\n\
    \           <xs:restriction base=\"xs:unsignedShort\">\n             <xs:minInclusive\
    \ value=\"1\"/>\n           </xs:restriction>\n         </xs:simpleType>\n   \
    \    </xs:element>\n       <xs:element default=\"30\" name=\"CtlMaxTtl\" type=\"\
    tr:u8nonzero\">\n         <xs:annotation>\n           <xs:documentation>Specifies\
    \ the maximum TTL value for the\n           traceroute measurement (requested\
    \ if in the\n           \"RequestMetadata\" element, actually used if in the\n\
    \           \"MeasurementMetadata\" element).</xs:documentation>\n         </xs:annotation>\n\
    \       </xs:element>\n       <xs:element default=\"0\" name=\"CtlDSField\"\n\
    \                   type=\"xs:unsignedByte\">\n         <xs:annotation>\n    \
    \       <xs:documentation>Specifies the value that was requested\n           to\
    \ be stored in the Differentiated Services (DS) field in\n           the traceroute\
    \ probe (if in the \"RequestMetadata\"\n           element).  Specifies the value\
    \ that was stored in the\n           Differentiated Services (DS) field in the\
    \ traceroute\n           probe (if in the \"MeasurementMetadata\" element).  The\
    \ DS\n           field is defined as the Type of Service (TOS) octet in an\n \
    \          IPv4 header or as the Traffic Class octet in an IPv6\n           header\
    \ (see Section 7 of [RFC2460]).  The value of this\n           object must be\
    \ a decimal integer in the range from 0 to\n           255.  This option can be\
    \ used to determine what effect an\n           explicit DS field setting has on\
    \ a traceroute measurement\n           and its probes.  Not all values are legal\
    \ or meaningful.\n           Useful TOS octet values are probably 16 (low delay)\
    \ and\n           8 (high throughput).  Further references can be found in\n \
    \          [RFC2474] for the definition of the Differentiated\n           Services\
    \ (DS) field and in [RFC1812] Section 5.3.2 for\n           Type of Service (TOS).</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element name=\"CtlSourceAddress\"\
    \n                   type=\"tr:inetAddressWithoutDns\">\n         <xs:annotation>\n\
    \           <xs:documentation>Specifies the IP address (which has to\n       \
    \    be given as an IP number, not a hostname) as the source\n           address\
    \ in traceroute probes (requested if in the\n           \"RequestMetadata\" element,\
    \ actually used if in the\n           \"MeasurementMetadata\" element).  On hosts\
    \ with more than\n           one IP address, this option can be used in the\n\
    \           \"RequestMetadata\" element to force the source address to\n     \
    \      be something other than the primary IP address of the\n           interface\
    \ the probe is sent on; the value \"unknown\" means\n           the default address\
    \ will be used.  The address type can be\n           determined by examining the\
    \ \"inetAddress\" type name and the\n           corresponding element value.</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element default=\"\
    0\" name=\"CtlIfIndex\"\n                   type=\"xs:unsignedInt\">\n       \
    \  <xs:annotation>\n           <xs:documentation>Specifies the interface index\
    \ as\n           defined in [RFC2863] that is requested to be used in the\n  \
    \         traceroute measurement for sending the traceroute probes\n         \
    \  (if in the \"RequestMetadata\" element).  A value of 0\n           indicates\
    \ that no specific interface is requested.\n           Specifies the interface\
    \ index actually used (if in the\n           \"MeasurementMetadata\" element).</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element minOccurs=\"\
    0\" name=\"CtlMiscOptions\"\n                   type=\"tr:string255\">\n     \
    \    <xs:annotation>\n           <xs:documentation>Specifies implementation-dependent\n\
    \           options (requested if in the \"RequestMetadata\" element,\n      \
    \     actually used if in the \"MeasurementMetadata\"\n           element).</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element default=\"\
    5\" name=\"CtlMaxFailures\"\n                   type=\"xs:unsignedByte\">\n  \
    \       <xs:annotation>\n           <xs:documentation>Specifies the maximum number\
    \ of\n           consecutive timeouts allowed before terminating a\n         \
    \  traceroute measurement (requested if in the\n           \"RequestMetadata\"\
    \ element, actually used if in the\n           \"MeasurementMetadata\" element).\
    \  A value of either 255\n           (maximum hop count/possible TTL value) or\
    \ 0 indicates\n           that the function of terminating a remote traceroute\n\
    \           measurement when a specific number of consecutive\n           timeouts\
    \ are detected was disabled.  This element is\n           included to give full\
    \ compatibility with [RFC4560].  No\n           known implementation of traceroute\
    \ currently supports\n           it.</xs:documentation>\n         </xs:annotation>\n\
    \       </xs:element>\n       <xs:element default=\"false\" name=\"CtlDontFragment\"\
    \n                   type=\"xs:boolean\">\n         <xs:annotation>\n        \
    \   <xs:documentation>Specifies if the don't fragment (DF)\n           flag in\
    \ the IP header for a probe was enabled or not (if\n           in the \"MeasurementMetadata\"\
    \ element).  If in the\n           \"RequestMetadata\", it specifies if the flag\
    \ was requested\n           to be enabled or not.  Setting the DF flag can be\
    \ used for\n           performing a manual PATH MTU test.</xs:documentation>\n\
    \         </xs:annotation>\n       </xs:element>\n       <xs:element default=\"\
    1\" name=\"CtlInitialTtl\"\n                   type=\"tr:u8nonzero\">\n      \
    \   <xs:annotation>\n           <xs:documentation>Specifies the initial TTL value\
    \ for a\n           traceroute measurement (requested if in the\n           \"\
    RequestMetadata\" element, actually used if in the\n           \"MeasurementMetadata\"\
    \ element).  Such TTL setting is\n           intended to bypass the initial (often\
    \ well-known) portion\n           of a path.</xs:documentation>\n         </xs:annotation>\n\
    \       </xs:element>\n       <xs:element maxOccurs=\"1\" minOccurs=\"0\" name=\"\
    CtlDescr\"\n                   type=\"tr:string255\">\n         <xs:annotation>\n\
    \           <xs:documentation>Provides a description of the traceroute\n     \
    \      measurement.</xs:documentation>\n         </xs:annotation>\n       </xs:element>\n\
    \       <xs:element name=\"CtlType\" type=\"tr:_CtlType\">\n         <xs:annotation>\n\
    \           <xs:documentation>Specifies the implementation method\n          \
    \ used for the traceroute measurement (requested if in the\n           \"RequestMetadata\"\
    \ element, actually used if in the\n           \"MeasurementMetadata\" element).\
    \  It specifies if the\n           traceroute is using TCP, UDP, ICMP, or other\
    \ types of\n           probes.  It is possible to specify other types of probes\n\
    \           by using an element specified in another schema with a\n         \
    \  different namespace.</xs:documentation>\n         </xs:annotation>\n      \
    \ </xs:element>\n     </xs:sequence>\n   </xs:complexType>\n   <xs:complexType\
    \ name=\"_Measurement\">\n     <xs:annotation>\n       <xs:documentation>Contains\
    \ the actual traceroute measurement\n       results.</xs:documentation>\n    \
    \ </xs:annotation>\n     <xs:sequence>\n       <xs:element name=\"TestName\" type=\"\
    tr:string255\">\n         <xs:annotation>\n           <xs:documentation>Specifies\
    \ the name of a traceroute\n           measurement.  This is not necessarily unique\
    \ within any\n           well-defined scope (e.g., a specific host, initiator\
    \ of\n           the traceroute measurement).</xs:documentation>\n         </xs:annotation>\n\
    \       </xs:element>\n       <xs:element name=\"ResultsStartDateAndTime\" type=\"\
    xs:dateTime\">\n         <xs:annotation>\n           <xs:documentation>Specifies\
    \ the date and start time of\n           the traceroute measurement.  This is\
    \ the time when the\n           first probe was seen at the sending\n        \
    \   interface.</xs:documentation>\n         </xs:annotation>\n       </xs:element>\n\
    \       <xs:element name=\"ResultsIpTgtAddr\"\n                   type=\"tr:inetAddressWithoutDns\"\
    >\n         <xs:annotation>\n           <xs:documentation>Specifies the IP address\
    \ associated\n           with a \"CtlTargetAddress\" value when the destination\n\
    \           address is specified as a DNS name.  The value of this\n         \
    \  object should be \"unknown\" if a DNS name is not specified\n           or\
    \ if a specified DNS name fails to resolve.  The\n           address type can\
    \ be determined by examining the \"inetAddress\"\n           type name and the\
    \ corresponding element\n           value.</xs:documentation>\n         </xs:annotation>\n\
    \       </xs:element>\n       <xs:element name=\"ProbeResults\" type=\"tr:_ProbeResults\"\
    />\n       <xs:element name=\"ResultsEndDateAndTime\" type=\"xs:dateTime\">\n\
    \         <xs:annotation>\n           <xs:documentation>Specifies the date and\
    \ end time of the\n           traceroute measurement.  It is either the time when\
    \ the\n           response to the last probe of the traceroute measurement\n \
    \          was received or the time when the last probe of the\n           traceroute\
    \ measurement was sent plus the relative timeout\n           (in case of a missing\
    \ response).</xs:documentation>\n         </xs:annotation>\n       </xs:element>\n\
    \     </xs:sequence>\n   </xs:complexType>\n   <xs:element name=\"traceRoute\"\
    >\n     <xs:complexType>\n       <xs:sequence>\n         <xs:element minOccurs=\"\
    0\" name=\"RequestMetadata\"\n                     type=\"tr:_Metadata\"/>\n \
    \        <xs:element maxOccurs=\"2147483647\" minOccurs=\"0\"\n              \
    \       name=\"Measurement\">\n           <xs:complexType>\n             <xs:sequence>\n\
    \               <xs:element minOccurs=\"0\" name=\"MeasurementMetadata\"\n   \
    \                        type=\"tr:_Metadata\"/>\n               <xs:element maxOccurs=\"\
    2147483647\" minOccurs=\"0\"\n                           name=\"MeasurementResult\"\
    \n                           type=\"tr:_Measurement\"/>\n             </xs:sequence>\n\
    \           </xs:complexType>\n         </xs:element>\n       </xs:sequence>\n\
    \     </xs:complexType>\n   </xs:element>\n </xs:schema>\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security considerations discussed in this section\
    \ are grouped into\n   considerations related to conducting traceroute measurements\
    \ and\n   considerations related to storing and transmitting traceroute\n   measurement\
    \ information.\n   This memo does not specify an implementation of a traceroute\
    \ tool.\n   Neither does it specify a certain procedure for storing traceroute\n\
    \   measurement information.  Still, it is considered desirable to\n   discuss\
    \ related security issues below.\n"
- title: 8.1.  Conducting Traceroute Measurements
  contents:
  - "8.1.  Conducting Traceroute Measurements\n   Conducting Internet measurements\
    \ can raise both security and privacy\n   concerns.  Traceroute measurements,\
    \ in which traffic is injected into\n   the network, can be abused for denial-of-service\
    \ attacks disguised as\n   legitimate measurement activity.\n   Measurement parameters\
    \ MUST be carefully selected so that the\n   measurements inject trivial amounts\
    \ of additional traffic into the\n   networks they measure.  If they inject \"\
    too much\" traffic, they can\n   skew the results of the measurement, and in extreme\
    \ cases cause\n   congestion and denial of service.\n   The measurements themselves\
    \ could be harmed by routers giving\n   measurement traffic a different priority\
    \ than \"normal\" traffic, or by\n   an attacker injecting artificial measurement\
    \ traffic.  If routers can\n   recognize measurement traffic and treat it separately,\
    \ the\n   measurements will not reflect actual user traffic.  If an attacker\n\
    \   injects artificial traffic that is accepted as legitimate, the loss\n   rate\
    \ will be artificially lowered.  Therefore, the measurement\n   methodologies\
    \ SHOULD include appropriate techniques to reduce the\n   probability that measurement\
    \ traffic can be distinguished from\n   \"normal\" traffic.\n   Authentication\
    \ techniques, such as digital signatures, may be used\n   where appropriate to\
    \ guard against injected traffic attacks.\n"
- title: 8.2.  Securing Traceroute Measurement Information
  contents:
  - "8.2.  Securing Traceroute Measurement Information\n   Traceroute measurement\
    \ information is not considered highly\n   sensitive.  Still, it may contain sensitive\
    \ information on network\n   paths, routing states, used IP addresses, and roundtrip\
    \ times that\n   operators of networks may want to protect for business or security\n\
    \   reasons.\n   It is thus important to control access to information acquired\
    \ by\n   conducting traceroute measurements, particularly when transmitting it\n\
    \   over a networks but also when storing it.  It is RECOMMENDED that a\n   transmission\
    \ of traceroute measurement information over a network\n   uses appropriate protection\
    \ mechanisms for preserving privacy,\n   integrity, and authenticity.  It is further\
    \ RECOMMENDED that secure\n   authentication and authorization are used for protecting\
    \ stored\n   traceroute measurement information.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document uses URNs to describe an XML namespace\
    \ and an XML\n   schema for traceroute measurement information storing and\n \
    \  transmission, conforming to a registry mechanism described in\n   [RFC3688].\
    \  Two URI assignments have been made.\n   1.  Registration for the IPPM traceroute\
    \ measurements namespace\n       *  URI: urn:ietf:params:xml:ns:traceroute-1.0\n\
    \       *  Registrant Contact: IESG\n       *  XML: None.  Namespace URIs do not\
    \ represent an XML.\n   2.  Registration for the IPPM traceroute measurements\
    \ schema\n       *  URI: urn:ietf:params:xml:schema:traceroute-1.0\n       * \
    \ Registrant Contact: IESG\n       *  XML: See Section 7 of this document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC2863]\
    \  McCloghrie, K. and F. Kastenholz, \"The Interfaces Group\n              MIB\"\
    , RFC 2863, June 2000.\n   [RFC3032]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter,\
    \ Y.,\n              Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack\n\
    \              Encoding\", RFC 3032, January 2001.\n   [RFC3339]  Klyne, G., Ed.\
    \ and C. Newman, \"Date and Time on the\n              Internet: Timestamps\"\
    , RFC 3339, July 2002.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC4001]\
    \  Daniele, M., Haberman, B., Routhier, S., and J.\n              Schoenwaelder,\
    \ \"Textual Conventions for Internet Network\n              Addresses\", RFC 4001,\
    \ February 2005.\n   [RFC4560]  Quittek, J. and K. White, \"Definitions of Managed\
    \ Objects\n              for Remote Ping, Traceroute, and Lookup Operations\"\
    ,\n              RFC 4560, June 2006.\n   [RFC5198]  Klensin, J. and M. Padlipsky,\
    \ \"Unicode Format for Network\n              Interchange\", RFC 5198, March 2008.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [IEEE.1003-1G.1997]\n              Institute\
    \ of Electrical and Electronics Engineers,\n              \"Protocol Independent\
    \ Interfaces\", IEEE Standard 1003.1G,\n              March 1997.\n   [IPFIX]\
    \    Sadasivan, G., \"Architecture for IP Flow Information\n              Export\"\
    , Work in Progress, September 2006.\n   [RFC1812]  Baker, F., \"Requirements for\
    \ IP Version 4 Routers\",\n              RFC 1812, June 1995.\n   [RFC2474]  Nichols,\
    \ K., Blake, S., Baker, F., and D. Black,\n              \"Definition of the Differentiated\
    \ Services Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC\
    \ 2474,\n              December 1998.\n   [RFC2578]  McCloghrie, K., Ed., Perkins,\
    \ D., Ed., and J.\n              Schoenwaelder, Ed., \"Structure of Management\
    \ Information\n              Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n\
    \   [RFC2579]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder,\
    \ Ed., \"Textual Conventions for SMIv2\",\n              STD 58, RFC 2579, April\
    \ 1999.\n   [RFC2580]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n  \
    \            \"Conformance Statements for SMIv2\", STD 58, RFC 2580,\n       \
    \       April 1999.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP\
    \ 81, RFC 3688,\n              January 2004.\n   [RFC5101]  Claise, B., \"Specification\
    \ of the IP Flow Information\n              Export (IPFIX) Protocol for the Exchange\
    \ of IP Traffic\n              Flow Information\", RFC 5101, January 2008.\n \
    \  [RFC5102]  Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.\n      \
    \        Meyer, \"Information Model for IP Flow Information Export\",\n      \
    \        RFC 5102, January 2008.\n   [W3C.REC-xml-20060816]\n              Bray,\
    \ T., Paoli, J., Maler, E., Sperberg-McQueen, C., and\n              F. Yergeau,\
    \ \"Extensible Markup Language (XML) 1.0 (Fourth\n              Edition)\", World\
    \ Wide Web Consortium FirstEdition REC-xml-\n              20060816, August 2006,\n\
    \              <http://www.w3.org/TR/2006/REC-xml-20060816>.\n   [W3C.REC-xmlschema-2-20041028]\n\
    \              Biron, P. and A. Malhotra, \"XML Schema Part 2: Datatypes\n   \
    \           Second Edition\", World Wide Web Consortium\n              Recommendation\
    \ REC-xmlschema-2-20041028, October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: Appendix A.  Traceroute Default Configuration Parameters
  contents:
  - "Appendix A.  Traceroute Default Configuration Parameters\n   This section lists\
    \ traceroute measurement configuration parameters as\n   well as their defaults\
    \ on various platforms and illustrates how\n   widely they may vary.  This document\
    \ considers four major traceroute\n   tool implementations and compares them based\
    \ on configurable\n   parameters and default values.  The LINUX (SUSE 9.1), BSD\
    \ (FreeBSD\n   7.0), and UNIX (SunOS 5.9) implementations are based on UDP\n \
    \  datagrams, while the WINDOWS (XP SP2) one uses ICMP Echoes.  The\n   comparison\
    \ is summarized in the following table, where an N/A in the\n   option column\
    \ means that such parameter is not configurable for the\n   specific implementation.\
    \  A comprehensive comparison of available\n   implementations is outside the\
    \ scope of this document; however, by\n   sampling a few different implementations,\
    \ it can be observed that\n   they can differ quite significantly in terms of\
    \ configurable\n   parameters and also default values.  Note that in the following\
    \ table\n   only those options that are available in at least two of the\n   considered\
    \ implementations are reported.\n             +---------------------------------------------------------+\n\
    \             |  OS    |Option|           Description         | Default |\n  \
    \           +--------+------+-------------------------------+---------+\n    \
    \         | LINUX  | -m   |Specify the maximum TTL used   |   30    |\n      \
    \       |--------+------|in traceroute probes.          |---------|\n        \
    \     | FreeBSD| -m   |                               |  OS var |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | UNIX   | -m   |                               |   30    |\n             |--------+------|\
    \                               |---------|\n             | WINDOWS| -h   |  \
    \                             |   30    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -n   |Display hop addresses          |    -    |\n  \
    \           |--------+------|numerically rather than        |---------|\n    \
    \         | FreeBSD| -n   |symbolically.                  |    -    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -n   |                               |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| -d   |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -w   |Set the time to wait for a     |  3 sec  |\n  \
    \           |--------+------|response to a probe.           |---------|\n    \
    \         | FreeBSD| -w   |                               |  5 sec  |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -w   |                               |  5 sec  |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| -w   |                               |  4 sec  |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | N/A  |Specify a loose source route   |    -    |\n  \
    \           |--------+------|gateway (to direct the         |---------|\n    \
    \         | FreeBSD| -g   |traceroute probes through      |    -    |\n      \
    \       |--------+------|routers not necessarily in     |---------|\n        \
    \     | UNIX   | -g   | the path).                    |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| -g   |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -p   |Set the base UDP port number   |  33434  |\n  \
    \           |------- +------|used in traceroute probes      |---------|\n    \
    \         | FreeBSD| -p   |(UDP port = base + nhops - 1). |  33434  |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -p   |                               |  33434  |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -q   |Set the number of probes per   |    3    |\n  \
    \           |--------+------|TTL.                           |---------|\n    \
    \         | FreeBSD| -q   |                               |    3    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -q   |                               |    3    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    3    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -S   |Set the IP source address in   |IP       |\n  \
    \           |--------+------|outgoing probes to the         |address  |\n    \
    \         | FreeBSD| -s   |specified value.               |of the   |\n      \
    \       |--------+------|                               |out      |\n        \
    \     | UNIX   | -s   |                               |interface|\n          \
    \   |--------+------|                               |         |\n            \
    \ | WINDOWS| N/A  |                               |         |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -t   |Set the Type of Service (TOS)  |    0    |\n  \
    \           |--------+------|in the probes to the specified |---------|\n    \
    \         | FreeBSD| -t   |value.                         |    0    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -t   |                               |    0    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    0    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -v   |Verbose output: received ICMP  |    -    |\n  \
    \           |--------+------|packets other than             |---------|\n    \
    \         | FreeBSD| -v   |TIME_EXCEEDED and              |    -    |\n      \
    \       |--------+------|UNREACHABLE are listed.        |---------|\n        \
    \     | UNIX   | -v   |                               |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | N/A  |Set  the time (in msec) to     |    -    |\n  \
    \           |--------+------|pause between probes.          |---------|\n    \
    \         | FreeBSD| -z   |                               |    0    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -P   |                               |    0    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -r   |Bypass the normal routing      |    -    |\n  \
    \           |--------+------|tables and send directly to a  |---------|\n    \
    \         | FreeBSD| -r   |host on attached network.      |    -    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -r   |                               |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -f   |Set the initial TTL for the    |    1    |\n  \
    \           |--------+------|first probe.                   |---------|\n    \
    \         | FreeBSD| -f   |                               |    1    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -f   |                               |    1    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    1    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -F   |Set the \"don't fragment\" bit.  |    -    |\n\
    \             |--------+------|                               |---------|\n  \
    \           | FreeBSD| -F   |                               |    -    |\n    \
    \         |--------+------|                               |---------|\n      \
    \       | UNIX   | -F   |                               |    -    |\n        \
    \     |--------+------|                               |---------|\n          \
    \   | WINDOWS| N/A  |                               |    -    |\n            \
    \ +--------+------+-------------------------------+---------+\n             |\
    \ LINUX  | N/A  |Enable socket level debugging. |    -    |\n             |--------+------|\
    \                               |---------|\n             | FreeBSD| -d   |  \
    \                             |    -    |\n             |--------+------|    \
    \                           |---------|\n             | UNIX   | -d   |      \
    \                         |    -    |\n             |--------+------|        \
    \                       |---------|\n             | WINDOWS| N/A  |          \
    \                     |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | N/A  |Use ICMP Echoes instead of UDP |    -    |\n  \
    \           |--------+------|datagrams.                     |---------|\n    \
    \         | FreeBSD| -I   |                               |    -    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -I   |                               |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | -I   |Specify a network interface to |    -    |\n  \
    \           |--------+------|obtain the IP address for      |---------|\n    \
    \         | FreeBSD| -i   |outgoing IP packets            |    -    |\n      \
    \       |--------+------|(alternative to option -s).    |---------|\n        \
    \     | UNIX   | -i   |                               |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  | N/A  |Toggle checksum.               |    -    |\n  \
    \           |--------+------|                               |---------|\n    \
    \         | FreeBSD| -x   |                               |    -    |\n      \
    \       |--------+------|                               |---------|\n        \
    \     | UNIX   | -x   |                               |    -    |\n          \
    \   |--------+------|                               |---------|\n            \
    \ | WINDOWS| N/A  |                               |    -    |\n             +--------+------+-------------------------------+---------+\n\
    \             | LINUX  |  -   |As optional last parameter,    |Depends  |\n  \
    \           |--------+------|LINUX, FreeBSD, and UNIX       |on       |\n    \
    \         | FreeBSD|  -   |implementations allow          |implement|\n      \
    \       |--------+------|specifying the probe datagram  |ation.   |\n        \
    \     | UNIX   |  -   |length for outgoing probes.    |         |\n          \
    \   |--------+------|                               |         |\n            \
    \ | WINDOWS| N/A  |                               |         |\n             +--------+------+-------------------------------+---------+\n"
- title: A.1.  Alternative Traceroute Implementations
  contents:
  - "A.1.  Alternative Traceroute Implementations\n   As stated above, the widespread\
    \ use of firewalls might prevent UDP-\n   or ICMP-based traceroutes to completely\
    \ trace the path to a\n   destination since traceroute probes might end up being\
    \ filtered.  In\n   some cases, such limitation might be overcome by sending instead\
    \ TCP\n   packets to specific ports that hosts located behind the firewall are\n\
    \   listening for connections on.  TCP-based implementations use TCP,\n   SYN,\
    \ or FIN probes and listen for TIME_EXCEEDED messages, TCP RESET,\n   and other\
    \ messages from firewalls and gateways on the path.  On the\n   other hand, some\
    \ firewalls filter out TCP SYN packets to prevent\n   denial-of-service attacks;\
    \ therefore, the actual advantage of using\n   TCP instead of UDP traceroute depends\
    \ mainly on firewall\n   configurations, which are not known in advance.  A detailed\
    \ analysis\n   of TCP-based traceroute tools and measurements is outside the scope\n\
    \   of this document; regardless, for completeness reasons, the\n   information\
    \ model also supports the storing of TCP-based traceroute\n   measurements.\n"
- title: Appendix B.  Known Problems with Traceroute
  contents:
  - 'Appendix B.  Known Problems with Traceroute

    '
- title: B.1.  Compatibility between Traceroute Measurement Results and IPPM
  contents:
  - "B.1.  Compatibility between Traceroute Measurement Results and IPPM\n      Metrics\n\
    \   Because of implementation choices, a known inconsistency exists\n   between\
    \ the round-trip delay metric defined by the IPPM working group\n   in RFC 2681\
    \ and the results returned by the current traceroute tool\n   implementations.\
    \  Unfortunately, it is unlikely that the traceroute\n   tool implementations\
    \ will implement the standard definition in the\n   near future.  The only possibility\
    \ is therefore to compare results of\n   different traceroute measurements with\
    \ each other; in order to do\n   this, specifications both of the operating system\
    \ (name and version)\n   and of the traceroute tool version used were added to\
    \ the metadata\n   elements in order to help in comparing metrics between two\
    \ different\n   traceroute measurement results (if run using the same operating\n\
    \   system and the same version of the tool).  Moreover, the traceroute\n   tool\
    \ has built-in configurable mechanisms like timeouts and can\n   experience problems\
    \ related to the crossing of firewalls; therefore,\n   some of the packets that\
    \ traceroute sends out end up being timeout or\n   filtered.  As a consequence,\
    \ it might not be possible to trace the\n   path to a node or there might not\
    \ be a complete enough set of probes\n   describing the RTT to reach it.\n"
- title: Appendix C.  Differences to DISMAN-TRACEROUTE-MIB
  contents:
  - "Appendix C.  Differences to DISMAN-TRACEROUTE-MIB\n   For performing remote traceroute\
    \ operations at managed node, the IETF\n   has standardized the DISMAN-TRACEROUTE-MIB\
    \ module in [RFC4560].  This\n   module allows:\n   o  retrieving capability information\
    \ of the traceroute tool\n      implementation at the managed node;\n   o  configuring\
    \ traceroute measurements to be performed;\n   o  retrieving information about\
    \ ongoing and completed traceroute\n      measurements;\n   o  retrieving traceroute\
    \ measurement statistics.\n   The traceroute storage format described in this\
    \ document has\n   significant overlaps with this MIB module.  Particularly, the\
    \ models\n   for the traceroute measurement configuration and for the results\
    \ from\n   completed measurements are almost identical.  But for other parts of\n\
    \   the DISMAN-TRACEROUTE MIB module there is no need to model them in a\n   traceroute\
    \ measurement storage format.  Particularly, the capability\n   information, information\
    \ about ongoing measurements, and measurement\n   statistics are not covered by\
    \ the DISMAN traceroute storage model.\n   Concerning traceroute measurements\
    \ and their results, there are\n   structural differences between the two models\
    \ caused by the different\n   choices for the encoding of the specification. \
    \ For DISMAN-\n   TRACEROUTE-MIB, the Structure of Management Information (SMIv2,\
    \ STD\n   58, RFC 2578 [RFC2578]) was used, while the IPPM traceroute\n   measurement\
    \ data model is encoded using XML.\n   This difference in structure implies that\
    \ the DISMAN-TRACEROUTE-MIB\n   module contains SMI-specific information elements\
    \ (managed objects)\n   that concern tables of managed objects (specification,\
    \ entry creation\n   and deletion, status retrieval) that are not required for\
    \ the XML-\n   encoded traceroute measurement data model.\n   But for most of\
    \ the remaining information elements that concern\n   configuration of traceroute\
    \ measurements and results of completed\n   measurements, the semantics are identical\
    \ between the DISMAN-\n   TRACEROUTE-MIB module and the traceroute measurement\
    \ data model.\n   There are very few exceptions to this; these are listed below.\
    \  Also,\n   naming of information elements is identical between both models with\n\
    \   a few exceptions.  For the traceroute measurement data model, a few\n   information\
    \ elements have been added, some because of the different\n   structure and some\
    \ to provide additional information on completed\n   measurements.\n"
- title: C.1.  Scope
  contents:
  - "C.1.  Scope\n   There are some basic differences in nature and application between\n\
    \   MIB modules and XML documents.  This results in two major differences\n  \
    \ of scope between the DISMAN-TRACEROUTE-MIB module and the traceroute\n   measurement\
    \ data model.\n   The first difference is the \"traceRouteResultsTable\" contained\
    \ in the\n   DISMAN-TRACEROUTE-MIB module.  This table allows online observation\n\
    \   of status and progress of an ongoing traceroute measurement.  This\n   highly\
    \ dynamic information is not included in the traceroute\n   measurement data model\
    \ because it has not been envisioned to use the\n   model for dynamically reporting\
    \ progress of individual traceroute\n   measurements.  The traceroute measurement\
    \ data model is rather\n   intended to be used for reporting completed traceroute\
    \ measurements.\n   The second difference is due to the fact that information\
    \ in a MIB is\n   typically tied to a local node hosting the MIB instance.  The\n\
    \   \"RequestMetadata\" element specified in the traceroute measurement\n   data\
    \ model can be used for specifying a measurement request that may\n   be applied\
    \ to several probes in a network.  This concept does not\n   exist in the DISMAN-TRACEROUTE-MIB\
    \ module.\n   For the remaining elements in the DISMAN-TRACEROUTE-MIB module and\
    \ in\n   the traceroute measurement data model, there is a very good match\n \
    \  between the two worlds.  The \"traceRouteCtlTable\" corresponds to the\n  \
    \ \"MeasurementMetadata\" element, and the combination of the\n   \"traceRouteProbeHistoryTable\"\
    \ and the \"traceRouteHopsTable\"\n   corresponds to a collection of \"MeasurementResult\"\
    \ elements.\n"
- title: C.2.  Naming
  contents:
  - "C.2.  Naming\n   Basically, names in both models are chosen using the same naming\n\
    \   conventions.\n   For the traceroute measurement configuration information,\
    \ all names,\n   such as \"CtlProbesPerHop\", are identical in both models except\
    \ for\n   the traceRoute prefix that was removed to avoid unnecessary\n   redundancy\
    \ in the XML file and for \"CtlDataSize\", which was renamed\n   to \"CtlProbeDataSize\"\
    \ for clarification in the traceroute measurement\n   data model.\n   Results\
    \ of measurements in the DISMAN-TRACEROUTE-MIB modules are\n   distributed over\
    \ two tables, the \"traceRouteResultsTable\" contains\n   mainly information about\
    \ ongoing measurements and the\n   \"traceRouteProbeHistoryTable\" contains only\
    \ information about\n   completed measurements.  According to the SMIv2 naming\
    \ conventions,\n   names of information elements in these tables have different\
    \ prefixes\n   (\"traceRouteResults\" and \"traceRouteProbeHistory\").  Since\
    \ the\n   traceroute measurement data model only reports on completed\n   measurements,\
    \ this separation is not needed anymore and the prefix\n   \"Results\" is used\
    \ for all related information elements.\n   Beyond that, there are only a few\
    \ changes in element names.  The\n   renaming actions include:\n   o  \"traceRouteProbeHistoryResponse\"\
    \ to \"ProbeRoundTripTime\";\n   o  \"traceRouteProbeHistoryHAddr\" to \"HopAddr\"\
    ;\n   o  \"traceRouteProbeHistoryTime\" to \"ResultsEndDateAndTime\";\n   o  \"\
    traceRouteProbeHistoryLastRC\" to \"ResultsHopRawOutputData\".\n"
- title: C.3.  Semantics
  contents:
  - "C.3.  Semantics\n   The semantics were changed for two information elements only.\n\
    \   For \"traceRouteProbeHistoryResponse\" in the DISMAN-TRACEROUTE-MIB, a\n \
    \  value of 0 indicates that it is not possible to transmit a probe.\n   For the\
    \ traceroute measurement data model, a value of 0 for element\n   \"RoundTripTime\"\
    \ indicates that the measured time was less than one\n   millisecond.  For the\
    \ case that it was not possible to transmit a\n   probe, a string is used that\
    \ indicates the problem.\n   For \"traceRouteCtlIfIndex\" in the DISMAN-TRACEROUTE-MIB,\
    \ a value of 0\n   indicates that the option to set the index is not available.\
    \  This\n   was translated to the traceroute measurement data model, such that\
    \ a\n   value of 0 for this element indicates that the used interface is\n   unknown.\n\
    \   The element \"traceRouteProbeHistoryLastRC\" in the DISMAN-TRACEROUTE-\n \
    \  MIB was replaced by element \"ResultsHopRawOutputData\".  While\n   \"traceRouteProbeHistoryLastRC\"\
    \ just reports a reply code,\n   \"ResultsHopRawOutputData\" reports the full\
    \ raw output data (per hop)\n   produced by the traceroute measurement that was\
    \ used.\n"
- title: C.4.  Additional Information Elements
  contents:
  - "C.4.  Additional Information Elements\n   Only a few information elements have\
    \ been added to the model of the\n   DISMAN-TRACEROUTE-MIB module.\n   o  For\
    \ providing information on the MPLS label stack entries of a\n      probe in the\
    \ traceroute measurement path, \"MPLSLabelStackEntry\"\n      was added.\n   o\
    \  For providing additional timestamp beyond \"ResultsEndDateAndTime\",\n    \
    \  \"ResultsStartDateAndTime\" and \"Time\" were added.\n   o  For providing DNS\
    \ names at the time of the execution of the\n      traceroute for each \"HopAddr\"\
    \ (which may change over time),\n      \"HopName\" was added.\n"
- title: Appendix D.  Traceroute Examples with XML Representation
  contents:
  - "Appendix D.  Traceroute Examples with XML Representation\n   This section shows\
    \ some examples of traceroute applications.  In\n   addition, the encoding of\
    \ requests and results is shown for some of\n   those examples.  Also, note that\
    \ in these XML examples some lines\n   appear wrapped due to the limited length\
    \ of line.\n   A typical traceroute on a LINUX system looks like the following:\n\
    \   # traceroute  -f 4 www.example 1500\n   traceroute to ww.example (192.0.2.42),\
    \ 30 hops max, 1500-byte packets\n    5  out.host1.example (192.0.2.254)  6.066\
    \ ms   5.625 ms   6.095 ms\n    6  rtr4.host6.example (192.0.2.142)  6.979 ms\
    \   6.221 ms   7.368 ms\n    7  hop7.rtr9.example (192.0.2.11)  16.165 ms   15.347\
    \ ms   15.514 ms\n    8  192.0.2.222 (192.0.2.222)  32.796 ms   28.723 ms   26.988\
    \ ms\n    9  in.example (192.0.2.123)  15.861 ms   16.262 ms   17.610 ms\n   10\
    \  in.example (192.0.2.123)(N!)  17.391 ms * *\n   This traceroute ignores the\
    \ first 4 hops and uses 1500-byte packets\n   including the header.  It does not\
    \ reach its goal since the last\n   listed hop says that the network is not reachable\
    \ (N!).  The XML\n   representation for this trace follows:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <traceRoute xmlns=\"urn:ietf:params:xml:ns:traceroute-1.0\"\
    >\n     <RequestMetadata>\n       <TestName>Example 1</TestName>\n       <OSName/>\n\
    \       <OSVersion/>\n       <ToolVersion/>\n       <ToolName/>\n       <CtlTargetAddress>\n\
    \         <inetAddressDns>www.example</inetAddressDns>\n       </CtlTargetAddress>\n\
    \       <CtlBypassRouteTable/>\n       <CtlProbeDataSize>1472</CtlProbeDataSize>\n\
    \       <CtlTimeOut/>\n       <CtlProbesPerHop/>\n       <CtlPort/>\n       <CtlMaxTtl/>\n\
    \       <CtlDSField/>\n       <CtlSourceAddress>\n         <inetAddressUnknown/>\n\
    \       </CtlSourceAddress>\n       <CtlIfIndex/>\n       <CtlMiscOptions/>\n\
    \       <CtlMaxFailures/>\n       <CtlDontFragment/>\n       <CtlInitialTtl>4</CtlInitialTtl>\n\
    \       <CtlDescr>Show how it encodes in XML</CtlDescr>\n       <CtlType><UDP/></CtlType>\n\
    \     </RequestMetadata>\n     <Measurement>\n       <MeasurementMetadata>\n \
    \        <TestName>Example 1</TestName>\n         <OSName>Linux</OSName>\n   \
    \      <OSVersion>2.6.16.54-0.2.5-smp i386</OSVersion>\n         <ToolVersion>1.0</ToolVersion>\n\
    \         <ToolName>traceroute</ToolName>\n         <CtlTargetAddress>\n     \
    \      <inetAddressDns>www.example</inetAddressDns>\n         </CtlTargetAddress>\n\
    \         <CtlBypassRouteTable/>\n         <CtlProbeDataSize>1472</CtlProbeDataSize>\n\
    \         <CtlTimeOut/>\n         <CtlProbesPerHop/>\n         <CtlPort/>\n  \
    \       <CtlMaxTtl/>\n         <CtlDSField/>\n         <CtlSourceAddress>\n  \
    \         <inetAddressIpv4>192.0.2.1</inetAddressIpv4>\n         </CtlSourceAddress>\n\
    \         <CtlIfIndex>2</CtlIfIndex>\n         <CtlMiscOptions/>\n         <CtlMaxFailures/>\n\
    \         <CtlDontFragment/>\n         <CtlInitialTtl>4</CtlInitialTtl>\n    \
    \     <CtlDescr>Show how it encodes in XML</CtlDescr>\n         <CtlType><UDP/></CtlType>\n\
    \       </MeasurementMetadata>\n       <MeasurementResult>\n         <TestName>Example\
    \ 1</TestName>\n         <ResultsStartDateAndTime>2008-05-16T14:22:34+02:00</ResultsStar\n\
    \   tDateAndTime>\n         <ResultsIpTgtAddr>\n           <inetAddressIpv4>192.0.2.42</inetAddressIpv4>\n\
    \         </ResultsIpTgtAddr>\n         <ProbeResults>\n           <hop>\n   \
    \          <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>out.host1.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>6</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:35+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>out.host1.example</HopName>\n\
    \               <ProbeRoundTripTime><roundTripTime>5</roundTripTime></Pro\n  \
    \ beRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:35+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>out.host1.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>6</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:35+02:00</Time>\n             </probe>\n\
    \             <HopRawOutputData> 5  out.host1.example (192.0.2.254)  6.06\n  \
    \ 6 ms   5.625 ms   6.095 ms</HopRawOutputData>\n           </hop>\n         \
    \  <hop>\n             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.142</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>rtr4.host6.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>6</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:36+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.142</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>rtr4.host6.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>6</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:36+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.142</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>rtr4.host6.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>7</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:37+02:00</Time>\n             </probe>\n\
    \             <HopRawOutputData> 6  rtr4.host6.example (192.0.2.142)  6.9\n  \
    \ 79 ms   6.221 ms   7.368 ms</HopRawOutputData>\n           </hop>\n        \
    \   <hop>\n             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.11</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop7.rtr9.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>16</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:37+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.11</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop7.rtr9.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>15</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:38+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.11</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop7.rtr9.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>15</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:38+02:00</Time>\n             </probe>\n\
    \             <HopRawOutputData> 7  hop7.rtr9.example (192.0.2.11)  16.16\n  \
    \ 5 ms   15.347 ms   15.514 ms</HopRawOutputData>\n           </hop>\n       \
    \    <hop>\n             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.222</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>32</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-16T14:22:39+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.222</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>38</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-16T14:22:39+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.222</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>26</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-16T14:22:39+02:00</Time>\n             </probe>\n        \
    \     <HopRawOutputData> 8  192.0.2.222 (192.0.2.222)  32.796 ms\n     28.723\
    \ ms   26.988 ms</HopRawOutputData>\n           </hop>\n           <hop>\n   \
    \          <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTime>15</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:40+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTime>16</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:40+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTime>17</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:40+02:00</Time>\n             </probe>\n\
    \             <HopRawOutputData> 9  in.example (192.0.2.123)  15.861 ms\n    16.262\
    \ ms   17.610 ms</HopRawOutputData>\n           </hop>\n           <hop>\n   \
    \          <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTime>17</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>noRouteToTarget</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:41+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTimeNotAvailable/>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>requestTimedOut</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:44+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTimeNotAvailable/>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>requestTimedOut</ResponseStatus>\n\
    \               <Time>2008-05-16T14:22:44+02:00</Time>\n             </probe>\n\
    \             <HopRawOutputData>10  in.example (192.0.2.123)(N!)  17.391\n   ms\
    \ * *</HopRawOutputData>\n           </hop>\n         </ProbeResults>\n      \
    \   <ResultsEndDateAndTime>2008-05-16T14:22:44+02:00</ResultsEndDat\n   eAndTime>\n\
    \       </MeasurementResult>\n     </Measurement>\n   </traceRoute>\n   The second\
    \ example was generated on an OpenBSD system.  On that\n   system, the traceroute\
    \ looks like the following:\n   # traceroute -P tcp w2.example 128\n   traceroute\
    \ to w2.example (192.0.2.254), 64 hops max, 160-byte packets\n    1  router1.example.org\
    \ (192.0.2.22)  0.486 ms  0.486 ms  0.482 ms\n    2  router7.example.org (192.0.2.1)\
    \  3.27 ms  1.420 ms  1.873 ms\n    3  hop0.c.example (192.0.2.105)  3.177 ms\
    \  3.258 ms  3.859 ms\n    4  hop6.c.example (192.0.2.107)  5.994 ms  4.607 ms\
    \  5.678 ms\n    5  hop3.c.example (192.0.2.111)  20.341 ms  20.732 ms  19.505\
    \ ms\n    6  in.example.net (192.0.2.222)  20.333 ms  19.174 ms  19.856 ms\n \
    \   7  egress.example.net (192.0.2.227)  20.268 ms  21.79 ms  19.992 ms\n    8\
    \  routerin.example (192.0.2.253)  19.983 ms  19.931 ms  19.894 ms\n    9  routerdmz.example\
    \ (192.0.2.249)  20.943 ms !X *  19.829 ms !X\n   It was executed with the TCP\
    \ protocol and 128-byte packets (plus\n   header).  The traceroute ended at hop\
    \ 9 because the packets are\n   administratively filtered (!X).  A corresponding\
    \ XML representation\n   follows:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <traceRoute xmlns=\"urn:ietf:params:xml:ns:traceroute-1.0\">\n     <RequestMetadata>\n\
    \       <TestName>Example 2</TestName>\n       <OSName/>\n       <OSVersion/>\n\
    \       <ToolVersion/>\n       <ToolName/>\n       <CtlTargetAddress>\n      \
    \   <inetAddressDns>w2.example</inetAddressDns>\n       </CtlTargetAddress>\n\
    \       <CtlBypassRouteTable/>\n       <CtlProbeDataSize>128</CtlProbeDataSize>\n\
    \       <CtlTimeOut/>\n       <CtlProbesPerHop/>\n       <CtlPort/>\n       <CtlMaxTtl/>\n\
    \       <CtlDSField/>\n       <CtlSourceAddress>\n         <inetAddressUnknown/>\n\
    \       </CtlSourceAddress>\n       <CtlIfIndex/>\n       <CtlMiscOptions/>\n\
    \       <CtlMaxFailures/>\n       <CtlDontFragment/>\n       <CtlInitialTtl/>\n\
    \       <CtlDescr>Show how it encodes in XML</CtlDescr>\n       <CtlType><TCP/></CtlType>\n\
    \     </RequestMetadata>\n     <Measurement>\n       <MeasurementMetadata>\n \
    \        <TestName>Example 2</TestName>\n         <OSName>OpenBSD</OSName>\n \
    \        <OSVersion>4.1 i386</OSVersion>\n         <ToolVersion></ToolVersion>\n\
    \         <ToolName>traceroute</ToolName>\n         <CtlTargetAddress>\n     \
    \      <inetAddressDns>w2.example</inetAddressDns>\n         </CtlTargetAddress>\n\
    \         <CtlBypassRouteTable/>\n         <CtlProbeDataSize>128</CtlProbeDataSize>\n\
    \         <CtlTimeOut/>\n         <CtlProbesPerHop/>\n         <CtlPort/>\n  \
    \       <CtlMaxTtl/>\n         <CtlDSField/>\n         <CtlSourceAddress>\n  \
    \         <inetAddressIpv4>192.0.2.42</inetAddressIpv4>\n         </CtlSourceAddress>\n\
    \         <CtlIfIndex>1</CtlIfIndex>\n         <CtlMiscOptions/>\n         <CtlMaxFailures/>\n\
    \         <CtlDontFragment/>\n         <CtlInitialTtl/>\n         <CtlDescr>Show\
    \ how it encodes in XML</CtlDescr>\n         <CtlType><TCP/></CtlType>\n     \
    \  </MeasurementMetadata>\n       <MeasurementResult>\n         <TestName>Example\
    \ 2</TestName>\n         <ResultsStartDateAndTime>2008-05-14T09:57:11+02:00</ResultsStar\n\
    \   tDateAndTime>\n         <ResultsIpTgtAddr>\n           <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n\
    \         </ResultsIpTgtAddr>\n         <ProbeResults>\n           <hop>\n   \
    \          <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.22</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>router1.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:13+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.22</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>router1.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:13+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.22</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>router1.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:13+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.1</inetAddressIpv4>\n             \
    \  </HopAddr>\n               <HopName>router7.example.org</HopName>\n       \
    \        <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:13+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.1</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>router7.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>1</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:13+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.1</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>router7.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>1</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:14+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.105</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>hop0.c.example</HopName>\n          \
    \     <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:14+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.105</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop0.c.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:14+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.105</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop0.c.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:14+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.107</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>hop6.c.example</HopName>\n          \
    \     <ProbeRoundTripTime>\n                 <roundTripTime>5</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:15+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.107</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop6.c.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>4</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:16+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.107</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop6.c.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>5</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:16+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.111</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>hop3.c.example</HopName>\n          \
    \     <ProbeRoundTripTime>\n                 <roundTripTime>20</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:17+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.111</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop3.c.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>20</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:18+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.111</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop3.c.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:19+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.222</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>in.example.net</HopName>\n          \
    \     <ProbeRoundTripTime>\n                 <roundTripTime>20</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:20+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.222</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example.net</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:20+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.222</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>in.example.net</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:21+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.227</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>egress.example.net</HopName>\n      \
    \         <ProbeRoundTripTime>\n                 <roundTripTime>20</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:22+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.227</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>egress.example.net</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>21</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:22+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.227</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>egress.example.net</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:23+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.253</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>routerin.example</HopName>\n        \
    \       <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:24+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.253</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>routerin.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:24+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.253</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>routerin.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:25+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.249</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>routerdmz.example</HopName>\n       \
    \        <ProbeRoundTripTime>\n                 <roundTripTime>20</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>unknown</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:26+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.249</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>routerdmz.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTimeNotAvailable/>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>requestTimedOut</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:26+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.249</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>routerdmz.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>19</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>unknown</ResponseStatus>\n\
    \               <Time>2008-05-14T09:57:30+02:00</Time>\n             </probe>\n\
    \           </hop>\n         </ProbeResults>\n         <ResultsEndDateAndTime>2008-05-14T09:57:30+02:00</ResultsEndDat\n\
    \   eAndTime>\n       </MeasurementResult>\n     </Measurement>\n   </traceRoute>\n\
    \   The third and last example is based on the Microsoft Windows pendant\n   of\
    \ traceroute.  On an MS Windows system, the command is called\n   \"tracert\"\
    \ and typically looks as follows:\n   # tracert -h 10 www.example.org\n   Tracing\
    \ route to www.example.org [192.0.2.11]\n   over a maximum of 10 hops:\n     1\
    \     1 ms     1 ms     8 ms  192.0.2.99\n     2    <1 ms    <1 ms    <1 ms  r1.provider4.example\
    \ [192.0.2.102]\n     3    <1 ms    <1 ms    <1 ms  rtr8.provider8.example [192.0.2.254]\n\
    \     4     1 ms     1 ms     1 ms  hop11.hoster7.example [192.0.2.4]\n     5\
    \     2 ms     3 ms     1 ms  sw6.provider2.example [192.0.2.201]\n     6    \
    \ 3 ms     3 ms     3 ms  out.provider2.example [192.0.2.111]\n     7     *  \
    \      6 ms     5 ms  192.0.2.123\n     8     5 ms     5 ms     5 ms  192.0.2.42\n\
    \     9    94 ms    95 ms    95 ms  ingress.example.org [192.0.2.199]\n    10\
    \   168 ms   169 ms   169 ms  192.0.2.44\n   Trace complete.\n   In this example,\
    \ the trace was limited to 10 hops, so the tenth and\n   last hop of this example\
    \ was not the final destination.  Applying the\n   XML schema defined in this\
    \ document, the trace could look as follows:\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <traceRoute xmlns=\"urn:ietf:params:xml:ns:traceroute-1.0\">\n \
    \    <RequestMetadata>\n       <TestName>Example 3</TestName>\n       <OSName/>\n\
    \       <OSVersion/>\n       <ToolVersion/>\n       <ToolName/>\n       <CtlTargetAddress>\n\
    \         <inetAddressDns>www.example.org</inetAddressDns>\n       </CtlTargetAddress>\n\
    \       <CtlBypassRouteTable/>\n       <CtlProbeDataSize/>\n       <CtlTimeOut/>\n\
    \       <CtlProbesPerHop/>\n       <CtlPort/>\n       <CtlMaxTtl>10</CtlMaxTtl>\n\
    \       <CtlDSField/>\n       <CtlSourceAddress>\n         <inetAddressUnknown/>\n\
    \       </CtlSourceAddress>\n       <CtlIfIndex/>\n       <CtlMiscOptions/>\n\
    \       <CtlMaxFailures/>\n       <CtlDontFragment/>\n       <CtlInitialTtl/>\n\
    \       <CtlDescr>Show how it encodes in XML</CtlDescr>\n       <CtlType><TCP/></CtlType>\n\
    \     </RequestMetadata>\n     <Measurement>\n       <MeasurementMetadata>\n \
    \        <TestName>Example 3</TestName>\n         <OSName>Windows</OSName>\n \
    \        <OSVersion>XP SP2 32-bit</OSVersion>\n         <ToolVersion></ToolVersion>\n\
    \         <ToolName>tracert</ToolName>\n         <CtlTargetAddress>\n        \
    \   <inetAddressDns>www.example.org</inetAddressDns>\n         </CtlTargetAddress>\n\
    \         <CtlBypassRouteTable/>\n         <CtlProbeDataSize/>\n         <CtlTimeOut/>\n\
    \         <CtlProbesPerHop/>\n         <CtlPort/>\n         <CtlMaxTtl>10</CtlMaxTtl>\n\
    \         <CtlDSField/>\n         <CtlSourceAddress>\n           <inetAddressIpv4>192.0.2.142</inetAddressIpv4>\n\
    \         </CtlSourceAddress>\n         <CtlIfIndex>3</CtlIfIndex>\n         <CtlMiscOptions/>\n\
    \         <CtlMaxFailures/>\n         <CtlDontFragment/>\n         <CtlInitialTtl/>\n\
    \         <CtlDescr>Show how it encodes in XML</CtlDescr>\n         <CtlType><TCP/></CtlType>\n\
    \       </MeasurementMetadata>\n       <MeasurementResult>\n         <TestName>Example\
    \ 3</TestName>\n         <ResultsStartDateAndTime>2008-05-14T11:03:09+02:00</ResultsStar\n\
    \   tDateAndTime>\n         <ResultsIpTgtAddr>\n           <inetAddressIpv4>192.0.2.11</inetAddressIpv4>\n\
    \         </ResultsIpTgtAddr>\n         <ProbeResults>\n           <hop>\n   \
    \          <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.99</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>1</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.99</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>1</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.99</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>8</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n        \
    \   </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.102</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>r1.provider4.example</HopName>\n    \
    \           <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.102</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>r1.provider4.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.102</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>r1.provider4.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>rtr8.provider8.example</HopName>\n  \
    \             <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>rtr8.provider8.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.254</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>rtr8.provider8.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>0</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.4</inetAddressIpv4>\n             \
    \  </HopAddr>\n               <HopName>hop11.hoster7.example</HopName>\n     \
    \          <ProbeRoundTripTime>\n                 <roundTripTime>1</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:09+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.4</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop11.hoster7.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>1</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:10+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.4</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>hop11.hoster7.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>1</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:10+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.201</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>sw6.provider2.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTime>2</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:10+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.201</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>sw6.provider2.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:11+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.201</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>sw6.provider2.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>1</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:11+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.111</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>out.provider2.example</HopName>\n   \
    \            <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:11+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.111</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>out.provider2.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:11+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.111</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>out.provider2.example</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>3</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:12+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <ProbeRoundTripTime>\n                 <roundTripTimeNotAvailable/>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>requestTimedOut</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:14+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>6</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:15+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.123</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>5</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:16+02:00</Time>\n             </probe>\n        \
    \   </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.42</inetAddressIpv4>\n            \
    \   </HopAddr>\n               <ProbeRoundTripTime>\n                 <roundTripTime>5</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:17+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.42</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>5</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:17+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.42</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>5</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:17+02:00</Time>\n             </probe>\n        \
    \   </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.199</inetAddressIpv4>\n           \
    \    </HopAddr>\n               <HopName>ingress.example.org</HopName>\n     \
    \          <ProbeRoundTripTime>\n                 <roundTripTime>94</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:19+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.199</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>ingress.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>95</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:19+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.199</inetAddressIpv4>\n\
    \               </HopAddr>\n               <HopName>ingress.example.org</HopName>\n\
    \               <ProbeRoundTripTime>\n                 <roundTripTime>95</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:19+02:00</Time>\n             </probe>\n\
    \           </hop>\n           <hop>\n             <probe>\n               <HopAddr>\n\
    \                 <inetAddressIpv4>192.0.2.44</inetAddressIpv4>\n            \
    \   </HopAddr>\n               <ProbeRoundTripTime>\n                 <roundTripTime>168</roundTripTime>\n\
    \               </ProbeRoundTripTime>\n               <ResponseStatus>responseReceived</ResponseStatus>\n\
    \               <Time>2008-05-14T11:03:20+02:00</Time>\n             </probe>\n\
    \             <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.44</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>169</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:21+02:00</Time>\n             </probe>\n        \
    \     <probe>\n               <HopAddr>\n                 <inetAddressIpv4>192.0.2.44</inetAddressIpv4>\n\
    \               </HopAddr>\n               <ProbeRoundTripTime>\n            \
    \     <roundTripTime>169</roundTripTime>\n               </ProbeRoundTripTime>\n\
    \               <ResponseStatus>responseReceived</ResponseStatus>\n          \
    \     <Time>2008-05-14T11:03:23+02:00</Time>\n             </probe>\n        \
    \   </hop>\n         </ProbeResults>\n         <ResultsEndDateAndTime>2008-05-14T11:03:23+02:00</ResultsEndDat\n\
    \   eAndTime>\n       </MeasurementResult>\n     </Measurement>\n   </traceRoute>\n\
    \   The three examples given in this section are intended to give an\n   impression\
    \ of how a trace could be represented in XML.  The\n   representation generated\
    \ by an implementation may differ from the\n   examples here depending on the\
    \ system and the capabilities of the\n   traceroute implementation.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Saverio Niccolini\n   NEC Laboratories Europe, NEC Europe\
    \ Ltd.\n   Kurfuersten-Anlage 36\n   Heidelberg  69115\n   Germany\n   Phone:\
    \ +49 (0) 6221 4342 118\n   EMail: saverio.niccolini@nw.neclab.eu\n   URI:   http://www.nw.neclab.eu\n\
    \   Sandra Tartarelli\n   NEC Laboratories Europe, NEC Europe Ltd.\n   Kurfuersten-Anlage\
    \ 36\n   Heidelberg  69115\n   Germany\n   Phone: +49 (0) 6221 4342 132\n   EMail:\
    \ sandra.tartarelli@nw.neclab.eu\n   URI:   http://www.nw.neclab.eu\n   Juergen\
    \ Quittek\n   NEC Laboratories Europe, NEC Europe Ltd.\n   Kurfuersten-Anlage\
    \ 36\n   Heidelberg  69115\n   Germany\n   Phone: +49 (0) 6221 4342 115\n   EMail:\
    \ quittek@nw.neclab.eu\n   URI:   http://www.nw.neclab.eu\n   Thomas Dietz\n \
    \  NEC Laboratories Europe, NEC Europe Ltd.\n   Kurfuersten-Anlage 36\n   Heidelberg\
    \  69115\n   Germany\n   Phone: +49 (0) 6221 4342 128\n   EMail: thomas.dietz@nw.neclab.eu\n\
    \   URI:   http://www.nw.neclab.eu\n   Martin Swany\n   Dept. of Computer and\
    \ Information Sciences\n   University of Delaware\n   Newark  DE 19716\n   U.S.A.\n\
    \   EMail: swany@UDel.Edu\n"
