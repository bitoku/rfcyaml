- title: __initial_text__
  contents:
  - "         Transparent Interconnection of Lots of Links (TRILL):\n            \
    \      Edge Directory Assistance Mechanisms\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes mechanisms for providing directory service\
    \ to\n   TRILL (Transparent Interconnection of Lots of Links) edge switches.\n\
    \   The directory information provided can be used in reducing multi-\n   destination\
    \ traffic, particularly ARP / Neighbor Discovery (ND) and\n   unknown unicast\
    \ flooding.  It can also be used to detect traffic with\n   forged source addresses.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8171.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Uses of Directory Information ..............................5\n  \
    \    1.2. Terminology ................................................6\n   2.\
    \ Push Model Directory Assistance Mechanisms ......................7\n      2.1.\
    \ Requesting Push Service ....................................7\n      2.2. Push\
    \ Directory Servers .....................................8\n      2.3. Push Directory\
    \ Server State Machine ........................9\n           2.3.1. Push Directory\
    \ States ...............................9\n           2.3.2. Push Directory Events\
    \ and Conditions ...............11\n           2.3.3. State Transition Diagram\
    \ and Table .................13\n      2.4. End Stations and Push Directories\
    \ .........................15\n      2.5. Additional Push Details ...................................15\n\
    \      2.6. Providing Secondary Servers with Data from a\n           Primary Server\
    \ ............................................16\n      2.7. Push Directory Configuration\
    \ ..............................17\n   3. Pull Model Directory Assistance Mechanisms\
    \ .....................17\n      3.1. Pull Directory Message: Common Format .....................19\n\
    \           3.1.1. Version Negotiation ................................20\n  \
    \    3.2. Pull Directory Query and Response Messages ................21\n    \
    \       3.2.1. Pull Directory Query Message Format ................21\n      \
    \     3.2.2. Pull Directory Responses ...........................24\n        \
    \          3.2.2.1. Pull Directory Response Message Format ....24\n          \
    \        3.2.2.2. Pull Directory Forwarding .................27\n      3.3. Cache\
    \ Consistency .........................................28\n           3.3.1. Update\
    \ Message Format ..............................32\n           3.3.2. Acknowledge\
    \ Message Format .........................33\n      3.4. Summary of Record Formats\
    \ in Messages .....................34\n      3.5. End Stations and Pull Directories\
    \ .........................34\n           3.5.1. Pull Directory Hosted on an End\
    \ Station ............35\n           3.5.2. Use of Pull Directory by End Stations\
    \ ..............36\n           3.5.3. Native Pull Directory Messages .....................37\n\
    \      3.6. Pull Directory Message Errors .............................38\n  \
    \         3.6.1. Error Codes ........................................39\n    \
    \       3.6.2. Sub-errors under Error Codes 1 and 3 ...............39\n      \
    \     3.6.3. Sub-errors under Error Codes 128 and 131 ...........40\n      3.7.\
    \ Additional Pull Details ...................................40\n      3.8. The\
    \ \"No Data\" Flag ........................................40\n      3.9. Pull\
    \ Directory Service Configuration ......................42\n   4. Directory Use\
    \ Strategies and Push-Pull Hybrids .................42\n   5. TRILL ES-IS ....................................................44\n\
    \      5.1. PDUs and System IDs .......................................45\n  \
    \    5.2. Adjacency, DRB Election, Port IDs, Hellos, and TLVs .......46\n    \
    \  5.3. Link State ................................................47\n   6. Security\
    \ Considerations ........................................47\n      6.1. Directory\
    \ Information Security ............................47\n      6.2. Directory Confidentiality\
    \ and Privacy .....................47\n      6.3. Directory Message Security Considerations\
    \ .................48\n   7. IANA Considerations ............................................48\n\
    \      7.1. ESADI-Parameter Data Extensions ...........................48\n  \
    \    7.2. RBridge Channel Protocol Numbers ..........................49\n    \
    \  7.3. The Pull Directory (PUL) and No Data (NOD) Bits ...........49\n      7.4.\
    \ TRILL Pull Directory QTYPEs ...............................50\n      7.5. Pull\
    \ Directory Error Code Registries ......................50\n      7.6. TRILL-ES-IS\
    \ MAC Address ...................................51\n   8. References .....................................................51\n\
    \      8.1. Normative References ......................................51\n  \
    \    8.2. Informative References ....................................54\n   Acknowledgments\
    \ ...................................................55\n   Authors' Addresses\
    \ ................................................55\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC7067] gives a problem statement and high-level design\
    \ for using\n   directory servers to assist TRILL [RFC6325] [RFC7780] edge nodes\
    \ in\n   reducing multi-destination ARP / Neighbor Discovery (ND) [ARPND],\n \
    \  reducing unknown unicast flooding traffic, and improving security\n   against\
    \ address spoofing within a TRILL campus.  Because\n   multi-destination traffic\
    \ becomes an increasing burden as a network\n   scales up in number of nodes,\
    \ reducing ARP/ND and unknown unicast\n   flooding improves TRILL network scalability.\
    \  This document describes\n   specific mechanisms for TRILL directory servers.\n\
    \   The information held by the directory or directories is address\n   mapping\
    \ and reachability information -- most commonly, what MAC\n   (Media Access Control)\
    \ address [RFC7042] corresponds to an IP address\n   within a Data Label (VLAN\
    \ or FGL (Fine-Grained Label) [RFC7172]) and\n   the egress TRILL switch (RBridge),\
    \ and, optionally, what specific\n   port on that TRILL switch, from which that\
    \ MAC address is reachable.\n   But it could be what IP address corresponds to\
    \ a MAC address or\n   possibly other address mapping or reachability information.\n\
    \   The mechanism used to initially populate directory data in primary\n   servers\
    \ is beyond the scope of this document.  A primary server can\n   use the Push\
    \ Directory service to provide directory data to secondary\n   servers, as described\
    \ in Section 2.6.  In the data-center\n   environment, it is common for orchestration\
    \ software to know and\n   control where all the IP addresses, MAC addresses,\
    \ and VLANs/tenants\n   are in a data center.  Thus, such orchestration software\
    \ can be\n   appropriate for providing the directory function or for supplying\
    \ the\n   directory or directories with directory information.\n   Efficient routing\
    \ of unicast traffic in a TRILL campus assumes that\n   the mapping of destination\
    \ MAC addresses to edge RBridges is stable\n   enough that the default data-plane\
    \ learning of TRILL and/or the use\n   of directories reduces to an acceptable\
    \ level the need to flood\n   packets where the location of the destination is\
    \ unknown.  Although\n   not prohibited, \"ephemeral\" MAC addresses are unlikely\
    \ to be used in\n   such an environment.  Directories need not be complete, and\
    \ in the\n   case that any ephemeral MAC addresses were in use, they would\n \
    \  probably not be included in directory information.\n   Directory services can\
    \ be offered in a Push Mode, Pull Mode, or both\n   [RFC7067] at the discretion\
    \ of the server.  Push Mode, in which a\n   directory server pushes information\
    \ to TRILL switches indicating\n   interest, is specified in Section 2.  Pull\
    \ Mode, in which a TRILL\n   switch queries a server for the information it wants,\
    \ is specified in\n   Section 3.  More detail on modes of operation, including\
    \ hybrid\n   Push/Pull, are provided in Section 4.\n"
- title: 1.1.  Uses of Directory Information
  contents:
  - "1.1.  Uses of Directory Information\n   A TRILL switch can consult directory\
    \ information whenever it wants by\n   (1) searching through information that\
    \ has been retained after being\n   pushed to it or pulled by it or (2) requesting\
    \ information from a\n   Pull Directory.  However, the following are expected\
    \ to be the most\n   common circumstances leading to the use of directory information.\n\
    \   All of these are cases of ingressing (or originating) a native frame.\n  \
    \ 1. ARP requests and replies [RFC826] are normally broadcast.  But a\n      directory-assisted\
    \ edge TRILL switch could intercept ARP messages\n      and reply if the TRILL\
    \ switch has the relevant information\n      [ARPND].\n   2. IPv6 ND [RFC4861]\
    \ requests and replies are normally multicast.\n      Except in the case of Secure\
    \ Neighbor Discovery (SEND) [RFC3971],\n      where possession of the right keying\
    \ material might be required, a\n      directory-assisted edge TRILL switch could\
    \ intercept ND messages\n      and reply if the TRILL switch has the relevant\
    \ information\n      [ARPND].\n   3. Unknown destination MAC addresses normally\
    \ cause a native frame to\n      be flooded.  An edge TRILL switch ingressing\
    \ a native frame\n      necessarily has to determine if it knows the egress RBridge\
    \ from\n      which the destination MAC address of the frame (in the frame's\n\
    \      VLAN or FGL) is reachable.  It might have learned that information\n  \
    \    from the directory or could query the directory if it does not\n      know\
    \ it.  Furthermore, if the edge TRILL switch has complete\n      directory information,\
    \ it can detect a forged source MAC or IP\n      address in any native frame and\
    \ discard the frame if it finds such\n      a forged address.\n   4. RARP [RFC903]\
    \ (Reverse ARP) is similar to ARP (item 1 above).\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   The terminology and abbreviations of\
    \ [RFC6325] are used herein, along\n   with the following:\n   AFN: Address Family\
    \ Number\n      (http://www.iana.org/assignments/address-family-numbers/).\n \
    \  CSNP Time: Complete Sequence Number Protocol Data Unit (PDU) time.\n      See\
    \ ESADI [RFC7357] and Section 7.1 below.\n   Data Label: VLAN or FGL.\n   ESADI:\
    \ End Station Address Distribution Information [RFC7357].\n   FGL: Fine-Grained\
    \ Label [RFC7172].\n   FR: Flood Record flag bit.  See Section 3.2.1.\n   Host:\
    \ A physical server or a virtual machine.  A host must have a MAC\n      address\
    \ and usually has at least one IP address.\n   Interested Labels sub-TLV: Short\
    \ for \"Interested Labels and Spanning\n      Tree Roots sub-TLV\" [RFC7176].\n\
    \   Interested VLANs sub-TLV: Short for \"Interested VLANs and Spanning\n    \
    \  Tree Roots sub-TLV\" [RFC7176].\n   IP: Internet Protocol.  In this document,\
    \ IP includes both IPv4\n      and IPv6.\n   MAC address: Media Access Control\
    \ address [RFC7042].\n   MacDA: Destination MAC address.\n   MacSA: Source MAC\
    \ address.\n   OV: Overflow flag bit.  See Section 3.2.2.1.\n   PDSS: Push Directory\
    \ Server Status.  See Sections 2 and 7.1.\n   Primary server: A directory server\
    \ that obtains the information it is\n      providing by a reliable mechanism\
    \ designed to assure the freshness\n      of that information.  This mechanism\
    \ is outside the scope of this\n      document.  (See \"Secondary server\" below.)\n\
    \   PUL: Pull Directory flag bit.  See Sections 3 and 7.3.\n   RBridge: An alternative\
    \ name for a TRILL switch.\n   Secondary server: A directory server that obtains\
    \ the information it\n      is providing from one or more primary servers.\n \
    \  TLV: Type, Length, Value.\n   TRILL: Transparent Interconnection of Lots of\
    \ Links or Tunneled\n      Routing in the Link Layer.\n   TRILL switch: A device\
    \ that implements the TRILL protocol.\n"
- title: 2.  Push Model Directory Assistance Mechanisms
  contents:
  - "2.  Push Model Directory Assistance Mechanisms\n   In the Push Model [RFC7067],\
    \ one or more Push Directory servers\n   reside at TRILL switches and \"push down\"\
    \ the address mapping\n   information for the various addresses associated with\
    \ end-station\n   interfaces and the TRILL switches from which those interfaces\
    \ are\n   reachable [RFC7961].  This service is scoped by Data Label (VLAN or\n\
    \   FGL [RFC7172]).  A Push Directory advertises when, for a Data Label,\n   it\
    \ is configured to be a directory having complete information and\n   also has\
    \ actually pushed all the information it has.  It might be\n   pushing only a\
    \ subset of the mapping and/or reachability information\n   for a Data Label.\
    \  The Push Model uses the ESADI [RFC7357] protocol\n   as its distribution mechanism.\n\
    \   With the Push Model, if complete address mapping information for a\n   Data\
    \ Label is being pushed, a TRILL switch (RBridge) that has that\n   complete information\
    \ and is ingressing a native frame can simply drop\n   the frame if the destination\
    \ unicast MAC address can't be found in\n   the mapping information available,\
    \ instead of flooding the frame\n   (ingressing it as an unknown MAC destination\
    \ TRILL Data frame).  But\n   this will result in lost traffic if the ingress\
    \ TRILL switch's\n   directory information is incomplete.\n"
- title: 2.1.  Requesting Push Service
  contents:
  - "2.1.  Requesting Push Service\n   In the Push Model, it is necessary to have\
    \ a way for a TRILL switch\n   to subscribe to information from the directory\
    \ server(s).  TRILL\n   switches simply use the ESADI [RFC7357] protocol mechanism\
    \ to\n   announce, in their core IS-IS Link State PDUs (LSPs), the Data Labels\n\
    \   for which they are participating in ESADI by using the Interested\n   VLANs\
    \ sub-TLV [RFC7176] and/or the Interested Labels sub-TLV\n   [RFC7176].  This\
    \ will cause the directory information to be pushed to\n   them for all such Data\
    \ Labels that are being served by the one or\n   more Push Directory servers.\n"
- title: 2.2.  Push Directory Servers
  contents:
  - "2.2.  Push Directory Servers\n   Push Directory servers advertise, through ESADI,\
    \ their availability\n   to push the mapping information for a particular Data\
    \ Label by\n   setting the PDSS in their ESADI-Parameter APPsub-TLV for that ESADI\n\
    \   instance (see [RFC7357] and Section 7.1) to a non-zero value.  This\n   PDSS\
    \ field setting is visible to other ESADI participants, including\n   other Push\
    \ Directory servers, for that Data Label.  Each Push\n   Directory server MUST\
    \ participate in ESADI for the Data Labels for\n   which it will push mappings\
    \ and set the PDSS field in its\n   ESADI-Parameter APPsub-TLV for that Data Label.\
    \  For increased\n   robustness, increased bandwidth capability, and improved\
    \ locality, it\n   is useful to have multiple Push Directory servers for each\n\
    \   Data Label.  Each Push Directory server is configured with a\n   number N,\
    \ which is in the range 1 through 8 and defaults to 2, for\n   each Data Label\
    \ for which it can push directory information (see\n   \"PushDirServers\" in Section\
    \ 2.7).  If the Push Directory servers for\n   a Data Label are configured consistently\
    \ with the same N and at least\n   N servers are available, then N copies of that\
    \ directory will be\n   pushed.\n   Each Push Directory server also has a configurable\
    \ 8-bit priority\n   (PushDirPriority) to be Active, which defaults to 0x3F (see\n\
    \   Section 2.7).  This priority is treated as an unsigned integer, where\n  \
    \ the larger magnitude means higher priority.  This priority appears in\n   its\
    \ ESADI-Parameter APPsub-TLV (see Section 7.1).  In the case of a\n   tie in this\
    \ configurable priority, the System ID of the TRILL switch\n   acting as the server\
    \ is used as a tiebreaker and is treated as an\n   unsigned 6-byte integer, where\
    \ the larger magnitude indicates higher\n   priority.\n   For each Data Label\
    \ it can serve, each Push Directory server checks\n   to see if there appear to\
    \ be enough higher-priority servers to push\n   the desired number of copies.\
    \  It does this by ordering, by priority,\n   the Push Directory servers whose\
    \ advertisements are present in the\n   ESADI link-state database for that Data\
    \ Label and that are\n   data reachable [RFC7780] as indicated by its IS-IS link-state\n\
    \   database.  The Push Directory server then determines its own position\n  \
    \ in that order.  If a Push Directory server's configuration indicates\n   that\
    \ N copies of the mappings for a Data Label should be pushed and\n   the server\
    \ finds that it is number K in the priority ordering (where\n   number 1 in the\
    \ ordered list is highest priority and the last is\n   lowest priority), then\
    \ if K is less than or equal to N, the Push\n   Directory server is Active.  If\
    \ K is greater than N, it is Stand-By.\n   Active and Stand-By behavior are specified\
    \ below in Section 2.3.\n   For a Push Directory to reside on an end station,\
    \ one or more TRILL\n   switches locally connected to that end station must proxy\
    \ for the\n   Push Directory server and advertise themselves in ESADI as Push\n\
    \   Directory servers.  It appears to the rest of the TRILL campus that\n   these\
    \ TRILL switches (that are proxying for the end station) are the\n   Push Directory\
    \ server(s).  The protocol between such a Push Directory\n   end station and the\
    \ one or more proxying TRILL switches acting as\n   Push Directory servers is\
    \ beyond the scope of this document.\n"
- title: 2.3.  Push Directory Server State Machine
  contents:
  - "2.3.  Push Directory Server State Machine\n   The subsections below describe\
    \ the states, events, and corresponding\n   actions for Push Directory servers.\n\
    \   The meanings of possible values of the PDSS field in a Push\n   Directory's\
    \ ESADI-Parameter APPsub-TLV are summarized in the table\n   below.\n       PDSS\
    \         Meaning\n       ----   ------------------------------------------------------\n\
    \         0     Not a Push Directory server\n         1     Push Directory server\
    \ in Stand-By Mode\n         2     Push Directory server in Active Mode but not\
    \ complete\n         3     Push Directory server in Active Mode that has pushed\n\
    \               complete data\n"
- title: 2.3.1.  Push Directory States
  contents:
  - "2.3.1.  Push Directory States\n   A Push Directory server is in one of seven\
    \ states, as listed below,\n   for each Data Label it can serve.  The name of\
    \ each state is followed\n   by a symbol that starts and ends with an angle bracket\
    \ (for example,\n   \"<S1>\") and represents the state.  The value that the Push\
    \ Directory\n   server advertises in the PDSS is determined by the state.  In\n\
    \   addition, it has an internal State-Transition-Time variable for each\n   Data\
    \ Label it serves that is set at each state transition and that\n   enables it\
    \ to determine how long it has been in its current state for\n   that Data Label.\n\
    \   Down <S1>: A completely shut down virtual state, defined for\n      convenience\
    \ in specifying state diagrams.  A Push Directory server\n      in this state\
    \ does not advertise any Push Directory data.  It may\n      be participating\
    \ in ESADI [RFC7357] with the PDSS field set to 0\n      in its ESADI-Parameter\
    \ APPsub-TLV, or it might not be\n      participating in ESADI at all.  All states\
    \ other than the Down\n      state are considered to be Up states and imply a\
    \ non-zero\n      PDSS field.\n   Stand-By <S2>: No Push Directory data is advertised.\
    \  Any outstanding\n      ESADI-LSP fragments containing directory data are updated\
    \ to\n      remove that data, and if the result is an empty fragment (contains\n\
    \      nothing except possibly an Authentication TLV), the fragment is\n     \
    \ purged.  The Push Directory participates in ESADI [RFC7357] and\n      advertises\
    \ its ESADI fragment zero that includes an\n      ESADI-Parameter APPsub-TLV with\
    \ the PDSS field set to 1.\n   Active <S3>: The Push Directory participates in\
    \ ESADI [RFC7357] and\n      advertises its ESADI fragment zero that includes\
    \ an\n      ESADI-Parameter APPsub-TLV with the PDSS field set to 2.  It also\n\
    \      advertises its directory data and any changes through ESADI\n      [RFC7357]\
    \ in its ESADI-LSPs, using the Interface Addresses\n      APPsub-TLV [RFC7961],\
    \ and updates that information as it changes.\n   Active Completing <S4>: The\
    \ same behavior as the Active state, except\n      that the server responds differently\
    \ to events.  The purpose of\n      this state is to be sure that there has been\
    \ enough time for\n      directory information to propagate to subscribing edge\
    \ TRILL\n      switches (see \"Time Condition\", as defined in Section 2.3.2)\n\
    \      before the directory server advertises that the information is\n      complete.\n\
    \   Active Complete <S5>: The same behavior as Active, except that the\n     \
    \ PDSS field in the ESADI-Parameter APPsub-TLV is set to 3 and the\n      server\
    \ responds differently to events.\n   Going Stand-By Was Complete <S6>: The same\
    \ behavior as Active, except\n      that the server responds differently to events.\
    \  The purpose of\n      this state is to be sure that the information indicating\
    \ that the\n      directory will no longer be complete has enough time to propagate\n\
    \      to edge TRILL switches (see \"Time Condition\" in Section 2.3.2)\n    \
    \  before the directory server stops advertising updates to the\n      information.\
    \  (See note below.)\n   Active Uncompleting <S7>: The same behavior as Active,\
    \ except that it\n      responds differently to events.  The purpose of this state\
    \ is to\n      be sure that the information indicating that the directory will\
    \ no\n      longer be complete has enough time to propagate to edge TRILL\n  \
    \    switches (see \"Time Condition\" in Section 2.3.2) before the\n      directory\
    \ server might stop advertising updates to the\n      information.  (See note\
    \ below.)\n      Note: It might appear that a Push Directory could transition\n\
    \      directly from Active Complete to Active, since the Active state\n     \
    \ continues to advertise updates, eliminating the need for the\n      Active Uncompleting\
    \ transition state.  But consider the case of\n      the Push Directory that was\
    \ complete being configured to be\n      incomplete and then the Stand-By Condition\
    \ (see Section 2.3.2)\n      occurring shortly thereafter.  If the first of these\
    \ two events\n      caused the server to transition directly to the Active state,\n\
    \      then later, when the Stand-By Condition occurred, it would\n      immediately\
    \ transition to Stand-By and stop advertising updates\n      even though there\
    \ might not have been enough time for knowledge of\n      its incompleteness to\
    \ have propagated to all edge TRILL switches.\n   The following table lists each\
    \ state and its corresponding PDSS\n   value:\n       State                  \
    \               PDSS\n      --------------------------------      ------\n   \
    \   Down <S1>                               0\n      Stand-By <S2>           \
    \                1\n      Active <S3>                             2\n      Active\
    \ Completing <S4>                  2\n      Active Complete <S5>             \
    \       3\n      Going Stand-By Was Complete <S6>        2\n      Active Uncompleting\
    \ <S7>                2\n"
- title: 2.3.2.  Push Directory Events and Conditions
  contents:
  - "2.3.2.  Push Directory Events and Conditions\n   Three auxiliary conditions,\
    \ referenced later in this subsection, are\n   defined as follows:\n   The Activate\
    \ Condition: In order to have the desired number of Push\n      Directory servers\
    \ pushing data for Data Label X, this Push\n      Directory server should be active.\
    \  This is determined by the\n      server finding that (a) it is priority K among\
    \ the data-reachable\n      Push Directory servers (where the highest-priority\
    \ server is 1)\n      for Data Label X, (b) it is configured that there should\
    \ be\n      N copies pushed for Data Label X, and (c) K is less than or equal\n\
    \      to N.  For example, the Push Directory server is configured so\n      that\
    \ two copies should be pushed and finds that it is priority 1\n      or 2 among\
    \ the Push Directory servers that are visible in its\n      ESADI link-state database\
    \ and that are data reachable, as\n      indicated by its IS-IS link-state database.\n\
    \   The Stand-By Condition: In order to have the desired number of Push\n    \
    \  Directory servers pushing data for Data Label X, this Push\n      Directory\
    \ server should be Stand-By (not Active).  This is\n      determined by the server\
    \ finding that (a) it is priority K among\n      the data-reachable Push Directory\
    \ servers (where the\n      highest-priority server is 1) for Data Label X, (b)\
    \ it is\n      configured that there should be N copies pushed for Data Label\
    \ X,\n      and (c) K is greater than N.  For example, the Push Directory\n  \
    \    server is configured so that two copies should be pushed and finds\n    \
    \  that it is priority 3 or lower priority (higher number) among the\n      available\
    \ Push Directory servers.\n   The Time Condition: The Push Directory server has\
    \ been in its current\n      state for a configurable amount of time (PushDirTimer)\
    \ that\n      defaults to twice its CSNP (Complete Sequence Number PDU) time\n\
    \      (see Sections 2.7 and 7.1).\n   The events and conditions listed below\
    \ cause state transitions in\n   Push Directory servers.\n   1. The Push Directory\
    \ server comes up.\n   2. The Push Directory server or the TRILL switch on which\
    \ it resides\n      is being shut down.  This is a persistent condition, unless\
    \ the\n      shutdown is canceled.  So, for example, a Push Directory server in\n\
    \      the Going Stand-By Was Complete state does not transition out of\n    \
    \  that state due to this condition but, after (1) the Time Condition\n      is\
    \ met and (2) the directory transitions to Stand-By and then\n      performs the\
    \ actions required there (such as purging LSPs),\n      continues to the Down\
    \ state if this condition is still true.\n      Similar comments apply to events/conditions\
    \ 3, 4, and 5.\n   3. The Activate Condition is met, and the server's configuration\n\
    \      indicates that it does not have complete data.\n   4. The Stand-By Condition\
    \ is met.\n   5. The Activate Condition is met, and the server's configuration\n\
    \      indicates that it has complete data.\n   6. The server's configuration\
    \ is changed to indicate that it does not\n      have complete data.\n   7. The\
    \ Time Condition is met.\n"
- title: 2.3.3.  State Transition Diagram and Table
  contents:
  - "2.3.3.  State Transition Diagram and Table\n   The state transition table is\
    \ as follows:\n     |    |        |      |  Active  | Active |   Going    |  \
    \ Active\n"
- title: State|Down|Stand-By|Active|Completing|Complete|  Stand-By  |Uncompleting
  contents:
  - 'State|Down|Stand-By|Active|Completing|Complete|  Stand-By  |Uncompleting

    '
- title: '-----+    |        |      |          |        |Was Complete|'
  contents:
  - '-----+    |        |      |          |        |Was Complete|

    '
- title: Event|<S1>|  <S2>  | <S3> |   <S4>   |  <S5>  |    <S6>    |    <S7>
  contents:
  - 'Event|<S1>|  <S2>  | <S3> |   <S4>   |  <S5>  |    <S6>    |    <S7>

    '
- title: '-----+----+--------+------+----------+--------+------------+------------'
  contents:
  - "-----+----+--------+------+----------+--------+------------+------------\n  1\
    \  |<S2>|  N/A   | N/A  |   N/A    |  N/A   |  N/A       |    N/A\n  2  |<S1>|\
    \  <S1>  | <S2> |   <S2>   |  <S6>  |  <S6>      |    <S7>\n  3  |<S1>|  <S3>\
    \  | <S3> |   <S3>   |  <S7>  |  <S3>      |    <S7>\n  4  |<S1>|  <S2>  | <S2>\
    \ |   <S2>   |  <S6>  |  <S6>      |    <S6>\n  5  |<S1>|  <S4>  | <S4> |   <S4>\
    \   |  <S5>  |  <S5>      |    <S5>\n  6  |<S1>|  <S2>  | <S3> |   <S3>   |  <S7>\
    \  |  <S6>      |    <S7>\n  7  |<S1>|  <S2>  | <S3> |   <S5>   |  <S5>  |  <S2>\
    \      |    <S3>\n   The above state table is equivalent to the following transition\n\
    \   diagram:\n      +-----------+\n      | Down <S1> |<---------+\n      +-----------+\
    \          |\n        |1  ^   | 3,4,5,6,7  |\n        |   |   +------------+\n\
    \        V   |2\n      +---------------+\n      | Stand-By <S2> |<--------------------------------------+\n\
    \      +---------------+    ^   ^            ^                 |\n        |5 \
    \  |3  |1,4,6,7  |   |            |                 |\n        |    |   +---------+\
    \   |            |                 |\n        |    V                 |2,4    \
    \     |                 |\n        |  +---------------------+          |     \
    \            |\n        |  | Active <S3>         |<---------|-------------+  \
    \ |\n        |  +---------------------+     ^    |             |   |\n       \
    \ |   |5  ^    |1,3,6,7  ^       |    |             |   |\n        |   |   | \
    \   |         |       |    |             |   |\n        |   |   |    +---------+\
    \       |    |             |   |\n        |   |   |                      |   \
    \ |             |   |\n        V   V   |3,6                   |    |         \
    \    |   |\n      +------------------------+       |    |             |   |\n\
    \      | Active Completing <S4> |------------+             |   |\n      +------------------------+\
    \ 2,4   |                  |   |\n        |7  |1,5    ^                  |   \
    \               |   |\n        |   |       |                  |              \
    \    |   |\n        |   +-------+                  |                  |   |\n\
    \        |                              |                  |   |\n        |  \
    \      +------------------------------------+   |   |\n        |        |    \
    \                 |              |   |   |\n        V        V               \
    \      |7             |5  |3  |7\n      +-------------+ 3,6    +----------------+\
    \ 4  +----------------+\n      |    Active   |------->|     Active     |--->|\
    \ Going Stand-By |\n      |   Complete  |        |  Uncompleting  |    |  Was\
    \ Complete  |\n      |     <S5>    |<-------|      <S7>      |    |      <S6>\
    \      |\n      +-------------+      5 +----------------+    +----------------+\n\
    \       |1,5,7  ^  |2,4         |1,2,3,6     ^        ^   |1,2,4,6 ^\n       |\
    \       |  |            |            |        |   |        |\n       +-------+\
    \  |            +------------+        |   +--------+\n                  |    \
    \                              |\n                  +----------------------------------+\n\
    \                    Figure 1: Push Server State Diagram\n"
- title: 2.4.  End Stations and Push Directories
  contents:
  - "2.4.  End Stations and Push Directories\n   End-station hosting and end-station\
    \ use of Push Directories are\n   outside the scope of this document.  Push Directory\
    \ information\n   distribution is accomplished using ESADI [RFC7357], which does\
    \ not\n   operate to end stations.  In the future, ESADI might be extended to\n\
    \   operate to end stations, or some other method, such as BGP, might be\n   specified\
    \ as a way to support end-station hosting or end-station use\n   of Push Directories.\n"
- title: 2.5.  Additional Push Details
  contents:
  - "2.5.  Additional Push Details\n   Push Directory mappings can be distinguished\
    \ from other data\n   distributed through ESADI, because mappings are distributed\
    \ only with\n   the Interface Addresses APPsub-TLV [RFC7961] and are flagged in\
    \ that\n   APPsub-TLV as being Push Directory data.\n   TRILL switches, whether\
    \ or not they are Push Directory servers, MAY\n   continue to advertise any locally\
    \ learned MAC attachment information\n   in ESADI [RFC7357] using the MAC-Reachability\
    \ TLV [RFC6165].\n   However, if a Data Label is being served by complete Push\
    \ Directory\n   servers, advertising such a locally learned MAC attachment generally\n\
    \   SHOULD NOT be done, as it would not add anything and would just waste\n  \
    \ bandwidth and ESADI link-state space.  An exception might be when a\n   TRILL\
    \ switch learns local MAC connectivity and that information\n   appears to be\
    \ missing from the directory mapping.\n   Because a Push Directory server needs\
    \ to advertise interest in one or\n   more Data Labels even though it might not\
    \ want to receive\n   multi-destination TRILL Data packets in those Data Labels,\
    \ the\n   \"No Data\" (NOD) flag bit is provided, as discussed in Section 3.8.\n\
    \   When a Push Directory server is no longer data reachable [RFC7780],\n   as\
    \ indicated by the IS-IS link-state database, other TRILL switches\n   MUST ignore\
    \ any Push Directory data from that server, because it is\n   no longer being\
    \ updated and may be stale.\n   The nature of dynamic distributed asynchronous\
    \ systems is such that\n   it is impossible for a TRILL switch receiving Push\
    \ Directory\n   information to be absolutely certain that it has complete\n  \
    \ information.  However, it can obtain a reasonable assurance of\n   complete\
    \ information by requiring that two conditions be met:\n   1. The PDSS field is\
    \ 3 in the ESADI fragment zero from the server for\n      the relevant Data Label.\n\
    \   2. As far as it can tell, it has had continuous data connectivity to\n   \
    \   the server for a configurable amount of time that defaults to\n      twice\
    \ the server's CSNP time (see \"PushDirTimer\" in Section 2.7).\n   Condition\
    \ 2 is necessary because a client TRILL switch might be just\n   coming up and\
    \ receive an ESADI-LSP meeting the requirement in\n   condition 1 above but has\
    \ not yet received all of the ESADI-LSP\n   fragments from the Push Directory\
    \ server.\n   Likewise, due to various delays, when an end station connects to\
    \ or\n   disconnects from the campus, there are timing differences between\n \
    \  such a connection or disconnection, the update of directory\n   information\
    \ at the directory, and the update of directory information\n   at any particular\
    \ RBridge in the TRILL campus.  Thus, there is\n   commonly a small window during\
    \ which an RBridge using directory\n   information might either (1) drop or unnecessarily\
    \ flood a frame as\n   having an unknown unicast destination or (2) encapsulate\
    \ a frame to\n   an edge RBridge where the end station is no longer connected\
    \ when the\n   frame arrives at that edge RBridge.\n   There may be conflicts\
    \ between mapping information from different\n   Push Directory servers or conflicts\
    \ between locally learned\n   information and information received from a Push\
    \ Directory server.\n   In cases of such conflicts, information with a higher\
    \ confidence\n   value [RFC6325] [RFC7961] is preferred over information with\
    \ a lower\n   confidence value.  In cases of equal confidence values, Push\n \
    \  Directory information is preferred to locally learned information,\n   and\
    \ if information from Push Directory servers conflicts, the\n   information from\
    \ the higher-priority Push Directory server is\n   preferred.\n"
- title: 2.6.  Providing Secondary Servers with Data from a Primary Server
  contents:
  - "2.6.  Providing Secondary Servers with Data from a Primary Server\n   A secondary\
    \ Push or Pull Directory server is one that obtains its\n   data from a primary\
    \ directory server.  Such systems, where some\n   directory servers can be populated\
    \ from others, have been found\n   useful for multiple-server directory applications\
    \ -- for example, in\n   the DNS, where it is the normal case that some authoritative\
    \ servers\n   (secondary servers) are populated with data from other authoritative\n\
    \   servers (primary servers).\n   Other techniques MAY be used, but by default,\
    \ this data transfer\n   occurs through the primary server acting as a Push Directory\
    \ server\n   for the Data Labels involved, while the secondary directory server\n\
    \   takes the pushed data it receives from the highest-priority Push\n   Directory\
    \ server and re-originates it.  Such a secondary server\n   may be a Push Directory\
    \ server, a Pull Directory server, or both for\n   any particular Data Label.\
    \  Because the data from a secondary server\n   will necessarily be at least a\
    \ little less fresh than that from a\n   primary server, it is RECOMMENDED that\
    \ the re-originated secondary\n   server's data be given a confidence level at\
    \ least one less than that\n   of the data as received from the primary server\
    \ (or unchanged if it\n   is already of minimum confidence).\n"
- title: 2.7.  Push Directory Configuration
  contents:
  - "2.7.  Push Directory Configuration\n   The following configuration parameters,\
    \ per Data Label, are available\n   for controlling Push Directory behavior:\n\
    \            Name          Range/Setting     Default       Section\n      ---------------\
    \     -------------    ---------    ------------\n      PushDirService       \
    \  true/false        false    2.2\n      PushDirServers                1-8   \
    \         2    2.2\n      PushDirPriority             0-255         0x3F    2.2\n\
    \      PushDirComplete        true/false        false    2.3.1, 2.3.2\n      PushDirTimer\
    \                1-511     2 * CSNP    2.3.2, 2.5\n   PushDirService is a boolean.\
    \  When false, Push Directory service is\n   not provided; when true, it is.\n\
    \   PushDirComplete is a boolean.  When false, the server never indicates\n  \
    \ that the information it has pushed is complete; when true, it does so\n   indicate\
    \ after pushing all the information it knows.\n   PushDirTimer defaults to two\
    \ times the ESADI-CSNP configuration value\n   but not less than 1 second.\n"
- title: 3.  Pull Model Directory Assistance Mechanisms
  contents:
  - "3.  Pull Model Directory Assistance Mechanisms\n   In the Pull Model [RFC7067],\
    \ a TRILL switch (RBridge) pulls directory\n   information from an appropriate\
    \ directory server when needed.\n   A TRILL switch that makes use of Pull Directory\
    \ services must\n   implement appropriate connections between its directory utilization\n\
    \   and its link-state database and link-state updating.  For example,\n   Pull\
    \ Directory servers for a particular Data Label X are found by\n   looking in\
    \ the core TRILL IS-IS link-state database for\n   data-reachable [RFC7780] TRILL\
    \ switches that advertise themselves by\n   setting the Pull Directory flag (PUL)\
    \ to 1 in their Interested VLANs\n   sub-TLV or Interested Labels sub-TLV (see\
    \ Section 7.3) for that Data\n   Label.  The set of such switches can change with\
    \ configuration\n   changes by network management, such as the following:\n  \
    \ o  the startup or shutdown of Pull Directory servers\n   o  changes in network\
    \ topology, such as the connection or\n      disconnection of TRILL switches that\
    \ are Pull Directory servers\n   o  network partition or merger\n   As described\
    \ in Section 3.7, a TRILL switch MUST be able to detect\n   that a Pull Directory\
    \ from which it has cached data is no longer\n   data reachable so that it can\
    \ discard such cached data.\n   If multiple data-reachable TRILL switches indicate\
    \ in the link-state\n   database that they are Pull Directory servers for a particular\
    \ Data\n   Label, pull requests can be sent to any one or more of them, but it\n\
    \   is RECOMMENDED that pull requests be preferentially sent to the\n   server\
    \ or servers that are lowest cost from the requesting TRILL\n   switch.\n   Pull\
    \ Directory requests are sent by encapsulating them in an RBridge\n   Channel\
    \ [RFC7178] message using the Pull Directory channel protocol\n   number (see\
    \ Section 7.2).  Responses are returned in an RBridge\n   Channel message using\
    \ the same channel protocol number.  See\n   Section 3.2 for Query and Response\
    \ Message formats.  For cache\n   consistency or notification purposes, Pull Directory\
    \ servers, under\n   certain conditions, MUST send unsolicited Update Messages\
    \ to client\n   TRILL switches they believe may be holding old data.  Those clients\n\
    \   can acknowledge such updates, as described in Section 3.3.  All these\n  \
    \ messages have a common header, as described in Section 3.1.  Errors\n   are\
    \ returned as described in Section 3.6.\n   The requests to Pull Directory servers\
    \ are typically derived from\n   ingressed ARP [RFC826], ND [RFC4861], RARP [RFC903],\
    \ or SEND\n   [RFC3971] messages, or data frames with unknown unicast destination\n\
    \   MAC addresses, intercepted by an ingress TRILL switch, as described\n   in\
    \ Section 1.1.\n   Pull Directory responses include an amount of time for which\
    \ the\n   response should be considered valid.  This includes negative\n   responses\
    \ that indicate that no data is available.  It is RECOMMENDED\n   that both positive\
    \ responses with data and negative responses be\n   cached and used to locally\
    \ handle ARP, ND, RARP, unknown destination\n   MAC frames, or the like [ARPND],\
    \ until the responses expire.  If\n   information previously pulled is about to\
    \ expire, a TRILL switch MAY\n   try to refresh it by issuing a new pull request\
    \ but, to avoid\n   unnecessary requests, SHOULD NOT do so unless it has been\
    \ recently\n   used.  The validity timer of cached Pull Directory responses is\
    \ NOT\n   reset or extended merely because that cache entry is used.\n"
- title: '3.1.  Pull Directory Message: Common Format'
  contents:
  - "3.1.  Pull Directory Message: Common Format\n   All Pull Directory messages are\
    \ transmitted as the Channel\n   Protocol-specific payload of RBridge Channel\
    \ messages [RFC7178].\n   Pull Directory messages are formatted as described herein,\
    \ starting\n   with the following common 8-byte header:\n                    \
    \       1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Ver  | Type  | Flags | Count |      Err      |    SubErr     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Sequence Number                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Type Specific Payload - variable length\n      +-+-+- ...\n      Ver:\
    \ Version of the Pull Directory protocol.  An unsigned integer.\n         Version\
    \ 0 (zero) is specified in this document.  See\n         Section 3.1.1 for a discussion\
    \ of version negotiation.\n      Type: The Pull Directory message type, as follows:\n\
    \                  Type   Section    Name\n                  ----   -------  \
    \ ------------\n                     0    -         Reserved\n               \
    \      1    3.2.1     Query\n                     2    3.2.2     Response\n  \
    \                   3    3.3.1     Update\n                     4    3.3.2   \
    \  Acknowledge\n                  5-14    -         Unassigned\n             \
    \       15    -         Reserved\n      Flags: Four flag bits whose meaning depends\
    \ on the Pull Directory\n         message type.  Flags whose meanings are not\
    \ specified are\n         reserved, MUST be sent as zero, and MUST be ignored\
    \ on receipt.\n      Count: Some Pull Directory message types specified herein\
    \ have\n         zero or more occurrences of a Record as part of the\n       \
    \  type-specific payload.  The Count field is the number of\n         occurrences\
    \ of that Record and is expressed as an unsigned\n         integer.  For any Pull\
    \ Directory messages not structured with\n         such occurrences, this field\
    \ MUST be sent as zero and ignored\n         on receipt.\n      Err, SubErr: A\
    \ two-part error code.  These fields are only used in\n         Reply Messages.\
    \  In messages that are requests or updates,\n         these fields MUST be sent\
    \ as zero and ignored on receipt.  An\n         Err field containing the value\
    \ zero means no error.  The\n         meaning of values in the SubErr field depends\
    \ on the value of\n         the Err field, but in all cases, a zero SubErr field\
    \ is allowed\n         and provides no additional information beyond the value\
    \ of the\n         Err field.\n      Sequence Number: An identifying 32-bit quantity\
    \ set by the TRILL\n         switch sending a request or other unsolicited message\
    \ and\n         returned in every corresponding reply or acknowledgment.  It is\n\
    \         used to match up responses with the message to which they\n        \
    \ respond.\n      Type Specific Payload: Format depends on the Pull Directory\n\
    \         message type.\n"
- title: 3.1.1.  Version Negotiation
  contents:
  - "3.1.1.  Version Negotiation\n   The version number (Ver) in the Pull Directory\
    \ message header is\n   incremented for a future version with changes such that\
    \ TRILL\n   directory messages cannot be parsed correctly by an earlier version.\n\
    \   Ver is not incremented for minor changes such as defining a new field\n  \
    \ value for an existing field.\n   Pull Directory messages come in pairs (Request-Response,\n\
    \   Update-Acknowledgment).  The version number in the Request/Update\n   (Ver1)\
    \ indicates the format of that message and the format of the\n   corresponding\
    \ returned Response/Acknowledgment.  The version number\n   in the returned Response/Acknowledgment\
    \ (Ver2) indicates the highest\n   version number that the sender of that Response/Acknowledgment\n\
    \   understands.\n   In the most common case -- a well-configured network -- Ver1\
    \ and Ver2\n   will be equal.\n   If Ver2 is less than Ver1, the returned Response/Acknowledgment\
    \ will\n   be an error message saying that the version is not understood.\n  \
    \ If Ver2 is greater than Ver1 and the responder understands Ver1, it\n   responds\
    \ normally in Ver1 format.  However, if the responder does not\n   understand\
    \ Ver1, it MUST send a \"Version not understood\" error\n   message (Section 3.6.2)\
    \ correctly formatted for Ver1.  Thus, all\n   implementations that support some\
    \ version X MUST be able to send a\n   Version not understood error message correctly\
    \ formatted for all\n   lower versions down to version 0.\n"
- title: 3.2.  Pull Directory Query and Response Messages
  contents:
  - "3.2.  Pull Directory Query and Response Messages\n   The formats of Pull Directory\
    \ Query Messages and Pull Directory\n   Response Messages are specified in Sections\
    \ 3.2.1 and 3.2.2.1,\n   respectively.\n"
- title: 3.2.1.  Pull Directory Query Message Format
  contents:
  - "3.2.1.  Pull Directory Query Message Format\n   A Pull Directory Query Message\
    \ is sent as the Channel\n   Protocol-specific content of an RBridge Channel message\
    \ [RFC7178]\n   TRILL Data packet or as a native RBridge Channel data frame (see\n\
    \   Section 3.5).  The Data Label of the packet is the Data Label in\n   which\
    \ the query is being made.  The priority of the RBridge Channel\n   message is\
    \ a mapping of the priority of the ingressed frame that\n   caused the query.\
    \  The default mapping depends, per Data Label, on\n   the strategy (see Section\
    \ 4) or a configured priority (see\n   \"DirGenQPriority\" in Section 3.9) for\
    \ generated queries.  (Generated\n   queries are those queries that are not the\
    \ result of a mapping -- for\n   example, a query to refresh a cache entry.) \
    \ The Channel\n   Protocol-specific data is formatted as a header and a sequence\
    \ of\n   zero or more QUERY Records as follows:\n                           1\
    \ 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Ver  | Type  | Flags | Count |      Err      |    SubErr     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Sequence Number                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | QUERY 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n      | QUERY 2\n \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n      | ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n\
    \      | QUERY K\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n      Ver, Sequence\
    \ Number: See Section 3.1.\n      Type: 1 for Query.  Queries received by a TRILL\
    \ switch that is not\n         a Pull Directory for the relevant Data Label result\
    \ in an error\n         response (see Section 3.6) unless inhibited by rate limiting.\n\
    \         (See [RFC7178] for information on the Response Message that is\n   \
    \      generated if the recipient implements the RBridge Channel\n         features\
    \ but does not implement the Pull Directory RBridge\n         Channel Protocol.)\n\
    \      Flags, Err, and SubErr: MUST be sent as zero and ignored on\n         receipt.\n\
    \      Count: Count is the number of QUERY Records present.  A\n         Query\
    \ Message Count of 0 is explicitly allowed, for the purpose\n         of pinging\
    \ a Pull Directory server to see if it is responding.\n         On receipt of\
    \ such an empty Query Message, a Response Message\n         that also has a Count\
    \ of 0 is returned unless inhibited by rate\n         limiting.\n      QUERY:\
    \ Each QUERY Record within a Pull Directory Query Message is\n         formatted\
    \ as follows:\n                 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\
    \               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n          \
    \     |        SIZE           |FR|  RESV  |   QTYPE   |\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \             If QTYPE = 1\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               |                      AFN                      |\n          \
    \     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n               |  Query\
    \ Address ...\n               +--+--+--+--+--+--+--+--+--+--+--...\n         \
    \    If QTYPE = 2 or 5\n               +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \               |  Query Frame ...\n               +--+--+--+--+--+--+--+--+--+--+--...\n\
    \         SIZE: Size of the QUERY Record in bytes, expressed as an\n         \
    \   unsigned integer and not including the SIZE field and\n            following\
    \ byte.  A value of SIZE so large that the material\n            doesn't fit in\
    \ the Query Message indicates a malformed\n            QUERY Record.  A QUERY\
    \ Record with such an illegal SIZE\n            value, and any subsequent QUERY\
    \ Records, MUST be ignored,\n            and the entire Query Message MAY be ignored.\n\
    \         FR: The Flood Record flag.  Ignored if QTYPE is 1.  If QTYPE is\n  \
    \          2 or 5 and the directory information sought is not found,\n       \
    \     the frame provided is flooded; otherwise, it is not\n            forwarded.\
    \  See Section 3.2.2.2.  For QTYPEs other than 2 or\n            5, the FR flag\
    \ has no effect.\n         RESV: A block of three reserved bits.  MUST be sent\
    \ as zero and\n            ignored on receipt.\n         QTYPE: There are several\
    \ types of QUERY Records currently\n            defined in two classes, as follows:\
    \ (1) a QUERY Record that\n            provides an explicit address and asks for\
    \ all addresses for\n            the interface specified by the Query Address\
    \ and (2) a\n            QUERY Record that includes a frame.  The fields of each\
    \ are\n            specified below.  Values of QTYPE are as follows:\n       \
    \     QTYPE   Description\n            -----   -------------------------------\n\
    \               0    Reserved\n               1    Address query\n           \
    \    2    Frame query\n             3-4    Unassigned\n               5    Unknown\
    \ unicast MAC Query Frame\n            6-14    Unassigned\n              15  \
    \  Reserved\n         AFN: Address Family Number of the Query Address.\n     \
    \    Query Address: The query is asking for any other addresses, and\n       \
    \     the nickname of the TRILL switch from which they are\n            reachable,\
    \ that correspond to the same interface as this\n            address, within the\
    \ Data Label of the query of the address\n            provided.  A typical Query\
    \ Address would be something like\n            the following:\n            1.\
    \ A 48-bit MAC address, with the querying TRILL switch\n               primarily\
    \ interested in either\n               a. the RBridge by which that MAC address\
    \ is reachable, so\n                  that the querying RBridge can forward an\
    \ unknown\n                  (before the query) destination MAC address native\n\
    \                  frame as a unicast TRILL Data packet rather than\n        \
    \          flooding it, or\n               b. the IP address corresponding to\
    \ the MAC address, so\n                  that the RBridge can locally respond\
    \ to a RARP\n                  [RFC903] native frame.\n            2. An IPv4\
    \ or IPv6 address, with the querying RBridge\n               interested in the\
    \ corresponding MAC address so it can\n               locally respond to an ARP\
    \ [RFC826] or ND [RFC4861] native\n               frame [ARPND].\n           \
    \ But the Query Address could be some other address type for\n            which\
    \ an AFN has been assigned, such as a 64-bit MAC address\n            [RFC7042]\
    \ or a CLNS (connectionless-mode network service)\n            [X.233] address.\n\
    \         Query Frame: Where a QUERY Record is the result of an ARP, ND,\n   \
    \         RARP, SEND, or unknown unicast MAC destination address, the\n      \
    \      ingress TRILL switch MAY send the frame to a Pull Directory\n         \
    \   server if the frame is small enough that the resulting Query\n           \
    \ Message fits into a TRILL Data packet within the campus MTU.\n            The\
    \ full frame is included, starting with the destination\n            and source\
    \ MAC addresses, but does not include the Frame\n            Check Sequence (FCS).\n\
    \   If no response to a Pull Directory Query Message is received within a\n  \
    \ configurable timeout (see \"DirQueryTimeout\" in Section 3.9), then the\n  \
    \ Query Message should be retransmitted with the same Sequence Number\n   (up\
    \ to a configurable number of times (see \"DirQueryRetries\" in\n   Section 3.9)).\
    \  If there are multiple QUERY Records in a\n   Query Message, responses to various\
    \ subsets of these QUERY Records\n   can be received before the timeout.  In that\
    \ case, the remaining\n   unanswered QUERY Records should be resent in a new Query\
    \ Message with\n   a new Sequence Number.  If a TRILL switch is not capable of\
    \ handling\n   partial responses to queries with multiple QUERY Records, it MUST\
    \ NOT\n   send a Request Message with more than one QUERY Record in it.\n   See\
    \ Section 3.6 for a discussion of how Query Message errors are\n   handled.\n"
- title: 3.2.2.  Pull Directory Responses
  contents:
  - "3.2.2.  Pull Directory Responses\n   A Pull Directory Query Message results in\
    \ a Pull Directory Response\n   Message as described in Section 3.2.2.1.\n   In\
    \ addition, if the QUERY Record QTYPE was 2 or 5, the frame included\n   in the\
    \ Query may be modified and forwarded by the Pull Directory\n   server as described\
    \ in Section 3.2.2.2.\n"
- title: 3.2.2.1.  Pull Directory Response Message Format
  contents:
  - "3.2.2.1.  Pull Directory Response Message Format\n   Pull Directory Response\
    \ Messages are sent as the\n   Channel Protocol-specific content of an RBridge\
    \ Channel message\n   [RFC7178] TRILL Data packet or as a native RBridge Channel\
    \ data frame\n   (see Section 3.5).  Responses are sent with the same Data Label\
    \ and\n   priority as the Query Message to which they correspond, except that\n\
    \   the Response Message priority is limited to be no more than the\n   configured\
    \ value DirRespMaxPriority (Section 3.9).\n   The RBridge Channel Protocol-specific\
    \ data format is as follows:\n                           1 1 1 1 1 1 1 1 1 1 2\
    \ 2 2 2 2 2 2 2 2 2 3 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Ver  | Type  | Flags | Count |      Err      |    SubErr     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Sequence Number                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | RESPONSE 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n      | RESPONSE\
    \ 2\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n      | ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n\
    \      | RESPONSE K\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...\n      Ver, Sequence\
    \ Number: As specified in Section 3.1.\n      Type: 2 = Response.\n      Flags:\
    \ MUST be sent as zero and ignored on receipt.\n      Count: Count is the number\
    \ of RESPONSE Records present in the\n         Response Message.\n      Err, SubErr:\
    \ A two-part error code.  Zero, unless there was an\n         error in the Query\
    \ Message (in which case, see Section 3.6).\n      RESPONSE: Each RESPONSE Record\
    \ within a Pull Directory Response\n         Message is formatted as follows:\n\
    \           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \         |         SIZE          |OV|  RESV  |   Index   |\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \         |                   Lifetime                    |\n         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \         |                Response Data ...\n         +--+--+--+--+--+--+--+--+--+--+--...\n\
    \         SIZE: The size of the RESPONSE Record is an unsigned integer\n     \
    \       number of bytes, not including the SIZE field and following\n        \
    \    byte.  A value of SIZE so large that the material doesn't\n            fit\
    \ in the Query Message indicates a malformed\n            RESPONSE Record.  A\
    \ RESPONSE Record with such an excessive\n            SIZE value, and any subsequent\
    \ RESPONSE Records, MUST be\n            ignored, and the entire Response Message\
    \ MAY be ignored.\n         OV: The overflow flag.  Indicates, as described below,\
    \ that\n            there was too much Response Data to include in one Response\n\
    \            Message.\n         RESV: Three reserved bits that MUST be sent as\
    \ zero and ignored\n            on receipt.\n         Index: The relative index\
    \ of the QUERY Record in the Query\n            Message to which this RESPONSE\
    \ Record corresponds.  The\n            Index will always be 1 for Query Messages\
    \ containing a\n            single QUERY Record.  If the Index is larger than\
    \ the Count\n            was in the corresponding Query, that RESPONSE Record\
    \ MUST be\n            ignored, and subsequent RESPONSE Records or the entire\n\
    \            Response Message MAY be ignored.\n         Lifetime: The length of\
    \ time, in units of 100 milliseconds,\n            for which the response should\
    \ be considered valid, except\n            that the values zero and 2**16 - 1\
    \ are special.  If zero,\n            the response can only be used for the particular\
    \ query from\n            which it resulted and MUST NOT be cached.  If 2**16\
    \ - 1, the\n            response MAY be kept indefinitely but not after the Pull\n\
    \            Directory server goes down or becomes unreachable.  (The\n      \
    \      maximum definite time that can be expressed is a little over\n        \
    \    1.8 hours.)\n         Response Data: There are three types of RESPONSE Records:\n\
    \         -  If the Err field of the encapsulating Response Message has a\n  \
    \          message-level error code in it, then the RESPONSE Records\n       \
    \     are omitted and Count will be 0.  See Section 3.6 for\n            additional\
    \ information on errors.\n         -  If the Err field of the encapsulating Response\
    \ Message has a\n            record-level error code in it, then the RESPONSE\
    \ Records are\n            those having that error, as further described in\n\
    \            Section 3.6.\n         -  If the Err field of the encapsulating Response\
    \ Message is 0,\n            then the Response Data in each RESPONSE Record is\
    \ formatted\n            as the value part of an Interface Addresses APPsub-TLV\n\
    \            [RFC7961].  The maximum size of such contents is 255 bytes,\n   \
    \         in which case the RESPONSE Record SIZE field is 255.\n   Multiple RESPONSE\
    \ Records can appear in a Response Message with the\n   same Index if an answer\
    \ to the QUERY Record consists of multiple\n   Interface Addresses APPsub-TLV\
    \ values.  This would be necessary if,\n   for example, a MAC address within a\
    \ Data Label appears to be\n   reachable by multiple TRILL switches.  However,\
    \ all RESPONSE Records\n   to any particular QUERY Record MUST occur in the same\
    \ Response\n   Message.  If a Pull Directory holds more mappings for a queried\n\
    \   address than will fit into one Response Message, it selects which\n   mappings\
    \ to include, by some method outside the scope of this\n   document, and sets\
    \ the overflow flag (OV) in all of the\n   RESPONSE Records responding to that\
    \ Query Address.\n   See Section 3.6 for a discussion of how errors are handled.\n"
- title: 3.2.2.2.  Pull Directory Forwarding
  contents:
  - "3.2.2.2.  Pull Directory Forwarding\n   Query Messages with QTYPEs 2 and 5 are\
    \ interpreted and handled as\n   described below.  In these cases, if the information\
    \ implicitly\n   sought is not in the directory and the FR flag in the Query Message\n\
    \   was 1 (one), the provided frame is forwarded by the Pull Directory\n   server\
    \ as a multi-destination TRILL Data packet with the ingress\n   nickname of the\
    \ Pull Directory server (or proxy, if it is hosted on\n   an end station) in the\
    \ TRILL Header.  If the FR flag is 0, the frame\n   is not forwarded in this case.\n\
    \   If there was no error in the handling of the encapsulating\n   Query Message,\
    \ the Pull Directory server forwards the frame inside\n   that QUERY Record, after\
    \ modifying it in some cases, as described\n   below:\n   ARP: When QTYPE is 2\
    \ and the Ethertype in the QUERY Record indicates\n      that an ARP [RFC826]\
    \ frame is included in the Record:\n      The ar$op field MUST be ares_op$REQUEST,\
    \ and for the response\n      described in Section 3.2.2.1, this is treated as\
    \ a query for the\n      target protocol address, where the AFN of that address\
    \ is given by\n      ar$pro.  (ARP fields and value names with embedded dollar\
    \ signs\n      (\"$\") are specified in [RFC826].)  If (1) ar$op is not\n    \
    \  ares_op$REQUEST, (2) the ARP is malformed, or (3) the query fails,\n      an\
    \ error is returned.  Otherwise, the ARP is modified into the\n      appropriate\
    \ ARP response, which is then sent by the Pull Directory\n      server as a TRILL\
    \ Data packet.\n   ND/SEND: When QTYPE is 2 and the Ethertype in the QUERY Record\n\
    \      indicates that an IPv6 ND [RFC4861] or SEND [RFC3971] frame is\n      included\
    \ in the Record:\n      Only Neighbor Solicitation ND frames (corresponding to\
    \ an ARP\n      query) are allowed.  An error is returned for other ND frames\
    \ or\n      if the target address is not found.  Otherwise, if the ND is not a\n\
    \      SEND, an ND Neighbor Advertisement response is returned by the\n      Pull\
    \ Directory server as a TRILL Data packet.  In the case of\n      SEND, an error\
    \ is returned indicating that a SEND frame was\n      received by the Pull Directory,\
    \ and the Pull Directory then either\n      (1) forwards the SEND frame to the\
    \ holder of the IPv6 address if\n      that information is in the directory or\
    \ (2) multicasts the\n      SEND frame.\n   RARP: When QTYPE is 2 and the Ethertype\
    \ in the QUERY Record indicates\n      that a RARP [RFC903] frame is included\
    \ in the Record:\n      If the ar$op field is ares_op$REQUEST, the frame is handled\
    \ as an\n      ARP, as described above.  Otherwise, the ar$op field MUST be\n\
    \      \"reverse request\", and for the response described in\n      Section 3.2.2.1,\
    \ this is treated as a query for the target\n      hardware address, where the\
    \ AFN of that address is given by\n      ar$hrd.  (See [RFC826] for RARP fields.)\
    \  If (1) ar$op is not one\n      of these values, (2) the RARP is malformed,\
    \ or (3) the query\n      fails, an error is returned.  Otherwise, the RARP is\
    \ modified into\n      the appropriate RARP response, which is then unicast by\
    \ the Pull\n      Directory server as a TRILL Data packet to the source hardware\
    \ MAC\n      address.\n   MacDA: When QTYPE is 5, indicating that a frame is provided\
    \ in the\n      QUERY Record whose destination MAC address TRILL switch attachment\n\
    \      is unknown, the only requirement is that this MAC address has to\n    \
    \  be unicast.  The Ethertype in the QUERY Record is ignored.  If\n      this\
    \ MAC address is a group address, an error is returned.  In the\n      case of\
    \ Pull Directory Response Messages (Section 3.2.2.1), this\n      MAC address\
    \ is treated as a query for the MacDA.  In the creation\n      of the response\
    \ described in Section 3.2.2.1, the query is treated\n      as a query for this\
    \ MAC address.  If the Pull Directory contains\n      TRILL switch attachment\
    \ information for the MAC address in the\n      Data Label of the Query Message,\
    \ it forwards the frame to that\n      switch in a unicast TRILL Data packet.\n"
- title: 3.3.  Cache Consistency
  contents:
  - "3.3.  Cache Consistency\n   Unless it sends all responses with a Lifetime of\
    \ 0, a Pull Directory\n   MUST take action, by sending Update Messages, to minimize\
    \ the amount\n   of time that a TRILL switch will continue to use stale information\n\
    \   from that Pull Directory.  The formats of Update Messages and the\n   Acknowledge\
    \ Messages used to respond to Update Messages are given in\n   Sections 3.3.1\
    \ and 3.3.2, respectively.\n   A Pull Directory server MUST maintain one of three\
    \ sets of records\n   concerning possible cached data at clients of that server.\
    \  These are\n   numbered and listed below in order of increasing specificity:\n\
    \   Method 1, Least Specific.  An overall record, per Data Label, of when\n  \
    \    the last positive Response Data sent will expire and when the last\n    \
    \  negative response sent will expire; the records are retained until\n      such\
    \ expiration.\n      Pro: Minimizes the record-keeping burden on the Pull Directory\n\
    \         server.\n      Con: Increases the volume of and overhead due to (1)\
    \ spontaneous\n         Update Messages and (2) unnecessarily invalidating cached\n\
    \         information.\n   Method 2, Medium Specificity.  For each unit of data\
    \ (Interface\n      Addresses APPsub-TLV (IA APPsub-TLV) Address Set [RFC7961])\
    \ held\n      by the server, record when the last response sent with that\n  \
    \    positive Response Data will expire.  In addition, record each\n      address\
    \ about which a negative response was sent by the server and\n      when the last\
    \ such negative response will expire.  Each such\n      record of a positive or\
    \ negative response is discarded upon\n      expiration.\n      Pros/Cons: An\
    \ intermediate level of detail in server\n         record-keeping; also, an intermediate\
    \ volume of, and overhead\n         due to, spontaneous Update Messages with some\
    \ unnecessary\n         invalidation of cached information.\n   Method 3, Most\
    \ Specific.  For each unit of data held by the server\n      (IA APPsub-TLV Address\
    \ Set [RFC7961]) and each address about which\n      a negative response was sent,\
    \ a list of TRILL switches that were\n      sent that data as a positive response\
    \ or sent a negative response\n      for the address, and the expected time to\
    \ expiration for that data\n      or address at each such TRILL switch, assuming\
    \ that the requester\n      cached the response.  Each list entry is retained\
    \ until such\n      expiration time.\n      Pros: Minimizes spontaneous Update\
    \ Messages sent to update pull\n         client TRILL switch caches, and minimizes\
    \ unnecessary\n         invalidation of cached information.\n      Con: Increased\
    \ record-keeping burden on the Pull Directory server.\n   RESPONSE Records sent\
    \ with a zero Lifetime are considered to have\n   already expired and so do not\
    \ need to be tracked.  In all cases,\n   there may still be brief periods of time\
    \ when directory information\n   has changed, but information that a pull client\
    \ has cached has not\n   yet been updated or expunged.\n   A Pull Directory server\
    \ might have a limit as to (1) how many TRILL\n   switches for which it can maintain\
    \ detailed expiry information using\n   method 3 or (2) how many data units or\
    \ addresses for which it can\n   maintain expiry information using method 2 or\
    \ the like.  If such\n   limits are exceeded, it MUST transition to a lower-numbered\
    \ method\n   but, in all cases, MUST support, at a minimum, method 1 and SHOULD\n\
    \   support methods 2 and 3.  The use of method 1 may be quite\n   inefficient,\
    \ due to large amounts of cached positive and negative\n   information being unnecessarily\
    \ discarded.\n   When data at a Pull Directory is changed, deleted, or added and\
    \ there\n   may be unexpired stale information at a requesting TRILL switch, the\n\
    \   Pull Directory MUST send an Update Message as discussed below.  The\n   sending\
    \ of such an Update Message MAY be delayed by a configurable\n   number of milliseconds\
    \ (see \"DirUpdateDelay\" in Section 3.9) to await\n   other possible changes\
    \ that could be included in the same\n   Update Message.\n   1. If method 1, the\
    \ least detailed method, is being followed, then\n      when any Pull Directory\
    \ information in a Data Label is changed or\n      deleted and there are outstanding\
    \ cached positive data\n      response(s), an all-addresses flush positive data\
    \ Update Message\n      is flooded within that Data Label as an RBridge Channel\
    \ message.\n      If data is added and there are outstanding cached negative\n\
    \      responses, an all-addresses flush negative message is similarly\n     \
    \ flooded.  A Count field value of 0 in an Update Message indicates\n      \"\
    all-addresses\".  On receiving an all-addresses flooded flush\n      positive\
    \ Update from a Pull Directory server it has used,\n      indicated by the F (Flood)\
    \ and P (Positive) bits being 1 and the\n      Count being 0, a TRILL switch discards\
    \ the cached data responses\n      it has for that Data Label.  Similarly, on\
    \ receiving an\n      all-addresses flush negative Update, indicated by the F\
    \ and\n      N (Negative) bits being 1 and the Count being 0, it discards all\n\
    \      cached negative replies for that Data Label.  A combined flush\n      positive\
    \ and negative can be flooded by having all of the F, P,\n      and N bits (see\
    \ Section 3.3.1) set to 1 and the Count field 0,\n      resulting in the discard\
    \ of all positive and negative cached\n      information for the Data Label.\n\
    \   2. If method 2 is being followed, then a TRILL switch floods\n      address-specific\
    \ positive Update Messages when data that might be\n      cached by a querying\
    \ TRILL switch is changed or deleted and floods\n      address-specific negative\
    \ Update Messages when data that might be\n      cached by a querying TRILL switch\
    \ is added.  Such messages are\n      sent as RBridge Channel messages.  The F\
    \ bit will be 1; however,\n      the Count field will be non-zero, and either\
    \ the P bit or the\n      N bit, but not both, will be 1.  There are actually\
    \ four possible\n      message types that can be flooded:\n      a. If data that\
    \ might still be cached is updated:\n         An unsolicited Update Message is\
    \ sent with the P flag set and\n         the Err field 0.  On receipt, the addresses\
    \ in the RESPONSE\n         Records are compared to the addresses for which the\
    \ receiving\n         TRILL switch is holding cached positive information from\
    \ that\n         server.  If they match, the cached information is updated.\n\
    \      b. If data that might still be cached is deleted:\n         An unsolicited\
    \ Update Message is sent with the P flag set and\n         the Err field non-zero,\
    \ giving the error that would now be\n         encountered in attempting to pull\
    \ information for the relevant\n         address from the Pull Directory server.\
    \  In this non-zero Err\n         field case, the RESPONSE Record(s) differs from\
    \ non-zero Err\n         Reply Message RESPONSE Records in that they do include\
    \ an\n         interface address set.  Any cached positive information for the\n\
    \         addresses given is deleted, and the negative response is cached\n  \
    \       as per the Lifetime given.\n      c. If data for an address for which\
    \ a negative response was sent\n         is added, so that negative response that\
    \ might still be cached\n         is now incorrect:\n         An unsolicited Update\
    \ Message is sent with the N flag set to 1\n         and the Err field 0.  The\
    \ addresses in the RESPONSE Records are\n         compared to the addresses for\
    \ which the receiving TRILL switch\n         is holding cached negative information\
    \ from that server; if\n         they match, the cached negative information is\
    \ deleted, and the\n         positive information provided is cached as per the\
    \ Lifetime\n         given.\n      d. In the rare case where it is desired to\
    \ change the Lifetime or\n         error associated with negative information\
    \ that might still be\n         cached:\n         An unsolicited Update Message\
    \ is sent with the N flag set to 1\n         and the Err field non-zero.  As in\
    \ case b above, the RESPONSE\n         Record(s) gives the relevant addresses.\
    \  Any cached negative\n         information for the addresses is updated.\n \
    \  3. If method 3 is being followed, unsolicited Update Messages of the\n    \
    \  same sort are sent as with method 2 above, except that they are\n      not\
    \ normally flooded but unicast only to the specific TRILL\n      switches the\
    \ directory server believes may be holding the cached\n      positive or negative\
    \ information that needs deletion or updating.\n      However, a Pull Directory\
    \ server MAY flood unsolicited updates\n      using method 3 -- for example, if\
    \ it determines that a\n      sufficiently large fraction of the TRILL switches\
    \ in some Data\n      Label are requesters that need to be updated so that flooding\
    \ is\n      more efficient than unicast.\n   A Pull Directory server tracking\
    \ cached information with method 3\n   MUST NOT clear the indication that it needs\
    \ to update cached\n   information at a querying TRILL switch until it has either\
    \ (a) sent\n   an Update Message and received a corresponding Acknowledge Message\
    \ or\n   (b) sent a configurable number of updates at a configurable interval\n\
    \   where these parameters default to three updates 100 milliseconds\n   apart\
    \ (see Section 3.9).\n   A Pull Directory server tracking cached information with\
    \ method 1 or\n   method 2 SHOULD NOT clear the indication that it needs to update\n\
    \   cached information until it has sent an Update Message and received a\n  \
    \ corresponding Acknowledge Message from all of its ESADI neighbors or\n   it\
    \ has sent a number of updates at a configurable interval, as\n   specified in\
    \ the paragraph above.\n"
- title: 3.3.1.  Update Message Format
  contents:
  - "3.3.1.  Update Message Format\n   An Update Message is formatted as a Response\
    \ Message, with the\n   differences described in Section 3.3 above and the following:\n\
    \   o  The Type field in the message header is set to 3.\n   o  The Index field\
    \ in the RESPONSE Record(s) is set to 0 on\n      transmission and ignored on\
    \ receipt (but the Count field in the\n      Update Message header MUST still\
    \ correctly indicate the number of\n      RESPONSE Records present).\n   o  The\
    \ priority with which the message is sent, DirUpdatePriority, is\n      configurable\
    \ and defaults to 5 (see Section 3.9).\n   Update Messages are initiated by a\
    \ Pull Directory server.  The\n   Sequence Number space used is controlled by\
    \ the originating Pull\n   Directory server.  This Sequence Number space for Update\
    \ Messages is\n   different from the Sequence Number space used in a Query and\
    \ the\n   corresponding Response that are controlled by the querying\n   TRILL\
    \ switch.\n   The 4-bit Flags field of the message header for an Update Message\
    \ is\n   as follows:\n            +---+---+---+---+\n            | F | P | N |\
    \ R |\n            +---+---+---+---+\n      F: The Flood bit.  If F = 0, the Update\
    \ Message is unicast.  If\n         F = 1, it is multicast to All-Egress-RBridges.\n\
    \      P, N: Flags used to indicate positive or negative Update Messages.\n  \
    \       P = 1 indicates \"positive\".  N = 1 indicates \"negative\".  Both\n \
    \        may be 1 for a flooded all-addresses Update.\n      R: Reserved.  MUST\
    \ be sent as zero and ignored on receipt.\n   For tracking methods 2 and 3 in\
    \ Section 3.3, a particular Update\n   Message MUST have either the P flag or\
    \ the N flag set, but not both.\n   If both are set, the Update Message MUST be\
    \ ignored, as this\n   combination is only valid for method 1.\n"
- title: 3.3.2.  Acknowledge Message Format
  contents:
  - "3.3.2.  Acknowledge Message Format\n   An Acknowledge Message is sent in response\
    \ to an Update Message to\n   confirm receipt or indicate an error, unless response\
    \ is inhibited by\n   rate limiting.  It is formatted as a Response Message, but\
    \ the Type\n   is set to 4.\n   If there are no errors in the processing of an\
    \ Update Message or if\n   there is an overall message-level error or a header\
    \ error in an\n   Update Message, the message is echoed back with the Err and\n\
    \   SubErr fields set appropriately, the Type changed to Acknowledge, and\n  \
    \ a null Records section with the Count field set to 0.\n   If there is a record-level\
    \ error in an Update Message, one or more\n   Acknowledge Messages may be returned\
    \ with the erroneous record(s)\n   indicated as discussed in Section 3.6.\n  \
    \ An Acknowledge Message is sent with the same priority as the Update\n   Message\
    \ it acknowledges but not more than a configured priority\n   called \"DirAckMaxPriority\"\
    , which defaults to 5 (see Section 3.9).\n"
- title: 3.4.  Summary of Record Formats in Messages
  contents:
  - "3.4.  Summary of Record Formats in Messages\n   As specified in Sections 3.2\
    \ and 3.3, the Query, Response, Update,\n   and Acknowledge Messages can have\
    \ zero or more repeating Record\n   structures under different circumstances,\
    \ as summarized below.  The\n   \"Err\" column abbreviations in this table have\
    \ the meanings listed\n   below.  \"IA APPsub-TLV value\" means the value part\
    \ of the\n   IA APPsub-TLV specified in [RFC7961].\n                 MBZ = MUST\
    \ be zero\n                 Z   = zero\n                 NZ  = non-zero\n    \
    \             NZM = non-zero message-level error\n                 NZR = non-zero\
    \ record-level error\n       Message    Err  Section  Record Structure    Response\
    \ Data\n     -----------  ---  -------  ----------------  -------------------\n\
    \     Query        MBZ  3.2.1    QUERY Record       -\n     Response     Z   \
    \ 3.2.2.1  RESPONSE Record   IA APPsub-TLV value\n     Response     NZM  3.2.2.1\
    \  null               -\n     Response     NZR  3.2.2.1  RESPONSE Record   Records\
    \ with error\n     Update       MBZ  3.3.1    RESPONSE Record   IA APPsub-TLV\
    \ value\n     Acknowledge  Z    3.3.2    null               -\n     Acknowledge\
    \  NZM  3.3.2    null               -\n     Acknowledge  NZR  3.3.2    RESPONSE\
    \ Record   Records with error\n   See Section 3.6 for further details on errors.\n"
- title: 3.5.  End Stations and Pull Directories
  contents:
  - "3.5.  End Stations and Pull Directories\n   A Pull Directory can be hosted on\
    \ an end station as specified in\n   Section 3.5.1.\n   An end station can use\
    \ a Pull Directory as specified in\n   Section 3.5.2.  This capability would be\
    \ useful in supporting an end\n   station that performs directory-assisted encapsulation\
    \ [DirAsstEncap]\n   or that is a \"Smart Endnode\" [SmartEN].\n   The native\
    \ Pull Directory messages used in these cases are as\n   specified in Section\
    \ 3.5.3.  In these cases, the edge RBridge(s) and\n   end station(s) involved\
    \ need to detect each other and exchange some\n   control information.  This is\
    \ accomplished with the TRILL End System\n   to Intermediate System (ES-IS) mechanism\
    \ specified in Section 5.\n"
- title: 3.5.1.  Pull Directory Hosted on an End Station
  contents:
  - "3.5.1.  Pull Directory Hosted on an End Station\n   Optionally, a Pull Directory\
    \ actually hosted on an end station MAY be\n   supported.  In that case, one or\
    \ more TRILL switches must act as\n   indirect Pull Directory servers.  That is,\
    \ they host a Pull Directory\n   server, which is seen by other TRILL switches\
    \ in the campus, and a\n   Pull Directory client, which fetches directory information\
    \ from one\n   or more end-station Pull Directory servers, where at least some\
    \ of\n   the information provided by the Pull Directory server may be\n   information\
    \ fetched from an end station to which it is directly\n   connected by the co-located\
    \ Pull Directory client.  (\"Direct\n   connection\" means a connection not involving\
    \ any intermediate TRILL\n   switches.)\n   End stations hosting a Pull Directory\
    \ server MUST support TRILL ES-IS\n   (see Section 5) and advertise the Data Labels\
    \ for which they are\n   providing service in one or more Interested VLANs sub-TLVs\
    \ or\n   Interested Labels sub-TLVs by setting the PUL flag (see Section 7.3).\n\
    \                                                *  *  *  *  *  *  *\n      +---------------+\
    \                         *                 *\n      | End Station 1 |       \
    \       +---------------+            *\n      | Pull Directory+--------------+\
    \ RB1, Pull     |            *\n      | Server        |              |      Directory|\
    \            *\n      +---------------+      +-------+ Client|Server |       \
    \  +----+\n                             |       +---------------+         |RB99|\n\
    \      +---------------+      |                  *              +----+\n     \
    \ | End Station 2 |   +--+---+   +---------------+            *\n      | Pull\
    \ Directory+---+Bridge+---+ RB2, Pull     |            *\n      | Server     \
    \   |   +--+---+   |      Directory|            *\n      +---------------+   \
    \   |       | Client|Server |            *\n                             |   \
    \    +---------------+            *\n                             |          \
    \        *        TRILL    *\n                             .                 \
    \ *        Campus   *\n                             .                  *     \
    \            *\n                             .                  *  *  *  *  *\
    \  *  *\n               Figure 2: End-Station Pull Directory Example\n   Figure\
    \ 2 gives an example where RB1 and RB2 advertise themselves to\n   the rest of\
    \ the TRILL campus, such as RB99, as Pull Directory servers\n   and obtain at\
    \ least some of the information they are providing by\n   issuing Pull Directory\
    \ queries to End Stations 1 and/or 2.  This\n   example is specific, but many\
    \ variations are possible.  The box\n   labeled \"Bridge\" in Figure 2 could be\
    \ replaced by a complex bridged\n   LAN or could be a bridgeless LAN through the\
    \ use of a hub or\n   repeater.  Or, end stations might be connected via point-to-point\n\
    \   links (as shown for End Station 1), including multi-ported\n   end stations\
    \ connected by point-to-point links to multiple RBridges.\n   Although Figure\
    \ 2 shows two end stations and two RBridges, there\n   could be one or more than\
    \ two RBridges having such indirect Pull\n   Directory servers.  Furthermore,\
    \ there could be one or more than two\n   end stations with Pull Directory servers\
    \ on them.  Each TRILL switch\n   acting as an indirect Pull Directory server\
    \ could then be differently\n   configured as to the Data Labels for which it\
    \ is providing indirect\n   service selected from the union of the Data Labels\
    \ supported by the\n   end-station hosted servers and could select from among\
    \ those\n   end-station hosted servers supporting each Data Label the indirect\n\
    \   server is configured to provide.\n   When an indirect Pull Directory server\
    \ receives Query Messages from\n   other TRILL switches, it answers from information\
    \ it has cached or\n   issues Pull Directory requests to end-station Pull Directory\
    \ servers\n   with which it has TRILL ES-IS adjacency to obtain the information.\n\
    \   Any Response sent by an indirect Pull Directory server MUST NOT have\n   a\
    \ validity time longer than the validity period of the data on which\n   it is\
    \ based.  When an indirect Pull Directory server receives Update\n   Messages,\
    \ it updates its cached information and MUST originate Update\n   Messages to\
    \ any clients that may have mirrors of the cached\n   information so updated.\n\
    \   Since an indirect Pull Directory server discards information it has\n   cached\
    \ from queries to an end-station Pull Directory server if it\n   loses adjacency\
    \ to the server (Section 3.7), if it detects that such\n   information may be\
    \ cached at RBridge clients and has no other source\n   for the information, it\
    \ MUST send Update Messages to those clients\n   withdrawing the information.\
    \  For this reason, indirect Pull\n   Directory servers may wish to query multiple\
    \ sources, if available,\n   and cache multiple copies of returned information\
    \ from those multiple\n   sources.  Then, if one end-station source becomes inaccessible\
    \ or\n   withdraws the information but the indirect Pull Directory server has\n\
    \   the information from another source, it need not originate Update\n   Messages.\n"
- title: 3.5.2.  Use of Pull Directory by End Stations
  contents:
  - "3.5.2.  Use of Pull Directory by End Stations\n   Some special end stations,\
    \ such as those discussed in [DirAsstEncap]\n   and [SmartEN], may need to access\
    \ directory information.  How edge\n   RBridges provide this optional service\
    \ is specified below.\n   When Pull Directory support is provided by an edge RBridge\
    \ to end\n   stations, the messages used are as specified in Section 3.5.3 below.\n\
    \   The edge RBridge MUST support TRILL ES-IS (Section 5) and advertises\n   the\
    \ Data Labels for which it offers this service to end stations by\n   setting\
    \ the Pull Directory flag (PUL) to 1 in its Interested VLANs\n   sub-TLV or Interested\
    \ Labels sub-TLV (see Section 7.3) for that Data\n   Label advertised through\
    \ TRILL ES-IS.\n"
- title: 3.5.3.  Native Pull Directory Messages
  contents:
  - "3.5.3.  Native Pull Directory Messages\n   The Pull Directory messages used between\
    \ TRILL switches and end\n   stations are native RBridge Channel messages [RFC7178].\
    \  These\n   RBridge Channel messages use the same Channel Protocol number as\
    \ the\n   inter-RBridge Pull Directory RBridge Channel messages.  The\n   Outer.VLAN\
    \ ID used is the TRILL ES-IS Designated VLAN (see Section 5)\n   on the link to\
    \ the end station.  Since there is no TRILL Header or\n   inner Data Label for\
    \ native RBridge Channel messages, that\n   information is added to the Pull Directory\
    \ message header as\n   specified below.\n   The protocol-dependent data part\
    \ of the native RBridge Channel\n   message is the same as for inter-RBridge Channel\
    \ messages, except\n   that the 8-byte header described in Section 3.1 is expanded\
    \ to 12 or\n   16 bytes, as follows:\n                           1 1 1 1 1 1 1\
    \ 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Ver  | Type  | Flags | Count |      Err      |    SubErr     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Sequence Number                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Data Label ... (4 or 8 bytes)                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n      |\
    \ Type Specific Payload - variable length\n      +-+-+- ...\n   Fields other than\
    \ the Data Label field are as defined in Section 3.1.\n   The Data Label that\
    \ normally appears right after the Inner.MacSA of\n   the RBridge Channel Pull\
    \ Directory message appears in the Data Label\n   field of the Pull Directory\
    \ message header in the native RBridge\n   Channel message version.  This Data\
    \ Label appears in a native Query\n   Message, to be reflected in a Response Message,\
    \ or it might appear in\n   a native Update to be reflected in an Acknowledge\
    \ Message.  Since the\n   appropriate VLAN or FGL [RFC7172] Ethertype is included,\
    \ the length\n   of the Data Label can be determined from the first 2 bytes.\n"
- title: 3.6.  Pull Directory Message Errors
  contents:
  - "3.6.  Pull Directory Message Errors\n   A non-zero Err field in the Pull Directory\
    \ Response or Acknowledge\n   Message header indicates an error message.\n   If\
    \ there is an error that applies to an entire Query or Update\n   Message or its\
    \ header, as indicated by the range of the value of the\n   Err field, then the\
    \ QUERY Records probably were not even looked at by\n   the Pull Directory server\
    \ and would provide no additional information\n   in the Response or Acknowledge\
    \ Message.  Therefore, the Records\n   section of the response to a Query Message\
    \ or Update Message is\n   omitted, and the Count field is set to 0 in the Response\
    \ or\n   Acknowledge Message.\n   If errors occur at the QUERY Record level for\
    \ a Query Message, they\n   MUST be reported in a Response Message separate from\
    \ the results of\n   any successful non-erroneous QUERY Records.  If multiple\n\
    \   QUERY Records in a Query Message have different errors, they MUST be\n   reported\
    \ in separate Response Messages.  If multiple QUERY Records in\n   a Query Message\
    \ have the same error, this error response MAY be\n   reported in one or multiple\
    \ Response Messages.  In an error Response\n   Message, the QUERY Record or Records\
    \ being responded to appear,\n   expanded by the Lifetime for which the server\
    \ thinks the error might\n   persist (usually 2**16 - 1, which indicates \"indefinitely\"\
    ) and with\n   their Index inserted, as the RESPONSE Record or Records.\n   If\
    \ errors occur at the RESPONSE Record level for an Update Message,\n   they MUST\
    \ be reported in an Acknowledge Message separate from the\n   acknowledgment of\
    \ any non-erroneous RESPONSE Records.  If multiple\n   RESPONSE Records in an\
    \ Update have different errors, they MUST be\n   reported in separate Acknowledge\
    \ Messages.  If multiple\n   RESPONSE Records in an Update Message have the same\
    \ error, this error\n   response MAY be reported in one or multiple Acknowledge\
    \ Messages.  In\n   an error Acknowledge Message, the RESPONSE Record or Records\
    \ being\n   responded to appear, expanded by the time for which the server thinks\n\
    \   the error might persist and with their Index inserted, as a\n   RESPONSE Record\
    \ or Records.\n   Err values 1 through 126 are available for encoding errors at\
    \ the\n   Request Message or Update Message level.  Err values 128 through 254\n\
    \   are available for encoding errors at the QUERY Record or\n   RESPONSE Record\
    \ level.  The SubErr field is available for providing\n   more detail on errors.\
    \  The meaning of a SubErr field value\n   depends on the value of the Err field.\n"
- title: 3.6.1.  Error Codes
  contents:
  - "3.6.1.  Error Codes\n   The following table lists error code values for the Err\
    \ field, their\n   meanings, and whether they apply at the message level or the\n\
    \   record level.\n    Err       Level     Meaning\n   -------   -------    -----------------------------------------------\n\
    \       0        -       No Error\n       1     Message    Unknown or reserved\
    \ Query Message field value\n       2     Message    Request Message/data too\
    \ short\n       3     Message    Unknown or reserved Update Message field value\n\
    \       4     Message    Update Message/data too short\n   5-126     Message \
    \   Unassigned\n     127        -       Reserved\n     128     Record     Unknown\
    \ or reserved QUERY Record field value\n     129     Record     QUERY Record truncated\n\
    \     130     Record     Address not found\n     131     Record     Unknown or\
    \ reserved RESPONSE Record field value\n     132     Record     RESPONSE Record\
    \ truncated\n   133-254   Record     Unassigned\n     255        -       Reserved\n\
    \   Note that some error codes are for overall message-level errors,\n   while\
    \ some are for errors in the repeating records that occur in\n   messages.\n"
- title: 3.6.2.  Sub-errors under Error Codes 1 and 3
  contents:
  - "3.6.2.  Sub-errors under Error Codes 1 and 3\n   The following sub-errors are\
    \ specified under error codes 1 and 3:\n      SubErr   Field with Error\n    \
    \  ------   -------------------------------------------\n          0     Unspecified\n\
    \          1     Version not understood (see Section 3.1.1)\n          2     Unknown\
    \ Type field value\n          3     Specified Data Label not being served\n  \
    \    4-254     Unassigned\n        255     Reserved\n"
- title: 3.6.3.  Sub-errors under Error Codes 128 and 131
  contents:
  - "3.6.3.  Sub-errors under Error Codes 128 and 131\n   The following sub-errors\
    \ are specified under error codes 128 and 131:\n      SubErr   Field with Error\n\
    \      ------   ----------------------------------------------------\n       \
    \   0     Unspecified\n          1     Unknown AFN field value\n          2  \
    \   Unknown or Reserved QTYPE field value\n          3     Invalid or inconsistent\
    \ SIZE field value\n          4     Invalid frame for QTYPE 2 (other than SEND)\n\
    \          5     SEND frame sent as QTYPE 2\n          6     Invalid frame for\
    \ QTYPE 5 (such as multicast MacDA)\n      7-254     Unassigned\n        255 \
    \    Reserved\n"
- title: 3.7.  Additional Pull Details
  contents:
  - "3.7.  Additional Pull Details\n   A Pull Directory client MUST be able to detect,\
    \ by tracking\n   link-state changes, when a Pull Directory server is no longer\n\
    \   accessible (data reachable [RFC7780] for the inter-RBridge case or\n   TRILL\
    \ ES-IS (Section 5) adjacent for the end-station-to-RBridge case)\n   and MUST\
    \ promptly discard all pull responses it is retaining from\n   that server, as\
    \ it can no longer receive cache consistency Update\n   Messages from the server.\n\
    \   A secondary Pull Directory server is one that obtains its data from a\n  \
    \ primary directory server.  See the discussion in Section 2.6\n   regarding the\
    \ transfer of directory information from the\n   primary server to the secondary\
    \ server.\n"
- title: 3.8.  The "No Data" Flag
  contents:
  - "3.8.  The \"No Data\" Flag\n   In the TRILL base protocol [RFC6325] as extended\
    \ for FGL [RFC7172],\n   the mere presence of any Interested VLANs sub-TLVs or\
    \ Interested\n   Labels sub-TLVs in the LSP of a TRILL switch indicates connection\
    \ to\n   end stations in the VLAN(s) or FGL(s) listed and thus a need to\n   receive\
    \ multi-destination traffic in those Data Labels.  However,\n   with Pull Directories,\
    \ advertising that you are a directory server\n   requires using these sub-TLVs\
    \ to indicate the Data Label(s) you are\n   serving.\n   If a directory server\
    \ does not wish to receive multi-destination\n   TRILL Data packets for the Data\
    \ Labels it lists in one of the\n   Interested VLANs or Interested Labels (FGLs)\
    \ sub-TLVs (see\n   Section 1.2), it sets the No Data (NOD) bit to 1 (see Section\
    \ 7.3).\n   This means that data on a distribution tree may be pruned so as not\n\
    \   to reach the \"No Data\" TRILL switch as long as there are no TRILL\n   switches\
    \ interested in the Data Label that are beyond the No Data\n   TRILL switch on\
    \ that distribution tree.  The NOD bit is backward\n   compatible, as TRILL switches\
    \ ignorant of it will simply not prune\n   when they could; this is safe, although\
    \ it may cause increased link\n   utilization by some TRILL switches sending multi-destination\
    \ traffic\n   where it is not needed.\n   Push Directories advertise themselves\
    \ inside ESADI, which normally\n   requires the ability to send and receive multi-destination\
    \ TRILL Data\n   packets but can be implemented with serial unicast.\n   An example\
    \ of a TRILL switch serving as a directory that might not\n   want multi-destination\
    \ traffic in some Data Labels would be a TRILL\n   switch that does not offer\
    \ end-station service for any of the Data\n   Labels for which it is serving as\
    \ a directory and is\n   -  a Pull Directory and/or\n   -  a Push Directory for\
    \ one or more Data Labels, where all of the\n      ESADI traffic for those Data\
    \ Labels will be handled by unicast\n      ESADI [RFC7357].\n   A Push Directory\
    \ MUST NOT set the NOD bit for a Data Label if it\n   needs to communicate via\
    \ multi-destination ESADI or RBridge Channel\n   PDUs in that Data Label, since\
    \ such PDUs look like TRILL Data packets\n   to transit TRILL switches and are\
    \ likely to be incorrectly pruned if\n   the NOD bit was set.\n"
- title: 3.9.  Pull Directory Service Configuration
  contents:
  - "3.9.  Pull Directory Service Configuration\n   The following per-RBridge scalar\
    \ configuration parameters are\n   available for controlling Pull Directory service\
    \ behavior.  In\n   addition, there is a configurable mapping, per Data Label,\
    \ from the\n   priority of a native frame being ingressed to the priority of any\n\
    \   Pull Directory query it causes.  The default mapping depends on the\n   client\
    \ strategy, as described in Section 4.\n             Name         Default    \
    \        Section   Note Below\n      ------------------  ----------------   -------\
    \   ----------\n      DirQueryTimeout     100 milliseconds   3.2.1          1\n\
    \      DirQueryRetries       3                3.2.1          1\n      DirGenQPriority\
    \       5                3.2.1          2\n      DirRespMaxPriority    6     \
    \           3.2.2.1        3\n      DirUpdateDelay       50 milliseconds   3.3\n\
    \      DirUpdatePriority     5                3.3.1\n      DirUpdateTimeout  \
    \  100 milliseconds   3.3.3\n      DirUpdateRetries      3                3.3.3\n\
    \      DirAckMaxPriority     5                3.3.2          4\n      Note 1:\
    \ Pull Directory Query client timeout waiting for response\n         and maximum\
    \ number of retries.\n      Note 2: Priority for client-generated requests (such\
    \ as a query to\n         refresh cached information).\n      Note 3: Pull Directory\
    \ Response Messages SHOULD NOT be sent with\n         priority 7, as that priority\
    \ SHOULD be reserved for messages\n         critical to network connectivity.\n\
    \      Note 4: Pull Directory Acknowledge Messages SHOULD NOT be sent\n      \
    \   with priority 7, as that priority SHOULD be reserved for\n         messages\
    \ critical to network connectivity.\n"
- title: 4.  Directory Use Strategies and Push-Pull Hybrids
  contents:
  - "4.  Directory Use Strategies and Push-Pull Hybrids\n   For some edge nodes that\
    \ have a great number of Data Labels enabled,\n   managing the MAC and Data Label\
    \ <-> Edge RBridge mapping for hosts\n   under all those Data Labels can be a\
    \ challenge.  This is especially\n   true for data-center gateway nodes, which\
    \ need to communicate with\n   many, if not all, Data Labels.\n   For those edge\
    \ TRILL switch nodes, a hybrid model should be\n   considered.  That is, the Push\
    \ Model is used for some Data Labels or\n   addresses within a Data Label, while\
    \ the Pull Model is used for other\n   Data Labels or addresses within a Data\
    \ Label.  The network operator\n   decides, via configuration, which Data Labels'\
    \ mapping entries are\n   pushed down from directories and which Data Labels'\
    \ mapping entries\n   are pulled.\n   For example, assume a data center where\
    \ hosts in specific Data\n   Labels, say VLANs 1 through 100, communicate regularly\
    \ with external\n   peers.  The mapping entries for those 100 VLANs should probably\
    \ be\n   pushed down to the data-center gateway routers.  For hosts in other\n\
    \   Data Labels that only communicate with external peers occasionally\n   for\
    \ management interfacing, the mapping entries for those VLANs\n   should be pulled\
    \ down from the directory when needed.\n   Similarly, within a Data Label, it\
    \ could be that some addresses, such\n   as the addresses of gateways, files,\
    \ DNS, or database server hosts\n   are commonly referenced by most other hosts\
    \ but those other hosts,\n   perhaps compute engines, are typically only referenced\
    \ by a few hosts\n   in that Data Label.  In that case, the address information\
    \ for the\n   commonly referenced hosts could be pushed as an incomplete directory,\n\
    \   while the addresses of the others are pulled when needed.\n   The mechanisms\
    \ described in this document for Push and Pull Directory\n   services make it\
    \ easy to use Push for some Data Labels or addresses\n   and Pull for others.\
    \  In fact, different TRILL switches can even be\n   configured so that some use\
    \ Push Directory services and some use Pull\n   Directory services for the same\
    \ Data Label if both Push and Pull\n   Directory services are available for that\
    \ Data Label.  Also, there\n   can be Data Labels for which directory services\
    \ are not used at all.\n   There are a wide variety of strategies that a TRILL\
    \ switch can adopt\n   for making use of directory assistance.  A few suggestions\
    \ are given\n   below.\n   -  Even if a TRILL switch will normally be operating\
    \ with information\n      from a complete Push Directory server, there will be\
    \ a period of\n      time when it first comes up before the information it holds\
    \ is\n      complete.  Or, it could be that the only Push Directories that can\n\
    \      push information to it are incomplete or that they are just\n      starting\
    \ and may not yet have pushed the entire directory.  Thus,\n      it is RECOMMENDED\
    \ that all TRILL switches have a strategy for\n      dealing with the situation\
    \ where they do not have complete\n      directory information.  Examples are\
    \ to send a Pull Directory\n      query or to revert to the behavior described\
    \ in [RFC6325].\n   -  If a TRILL switch receives a native frame X resulting in\
    \ seeking\n      directory information, a choice needs to be made as to what to\
    \ do\n      if it does not already have the directory information it needs.\n\
    \      In particular, it could (1) immediately flood the TRILL Data\n      packet\
    \ resulting from ingressing X in parallel with seeking the\n      directory information,\
    \ (2) flood that TRILL Data packet after a\n      delay, if it fails to obtain\
    \ the directory information, or\n      (3) discard X if it fails to obtain the\
    \ information.  The choice\n      might depend on the priority of frame X, since\
    \ the higher that\n      priority the more urgent the frame typically is, and\
    \ the greater\n      the probability of harm in delaying it.  If a Pull Directory\n\
    \      request is sent, it is RECOMMENDED that its priority be derived\n     \
    \ from the priority of frame X according to the table below;\n      however, it\
    \ SHOULD be possible, on a per-TRILL-switch basis, to\n      configure the second\
    \ two columns of this table.\n          Ingressed     If Flooded    If Flooded\n\
    \          Priority      Immediately   After Delay\n          --------      -----------\
    \   -----------\n            7             5             6\n            6    \
    \         5             6\n            5             4             5\n       \
    \     4             3             4\n            3             2             3\n\
    \            2             0             2\n            0             1      \
    \       0\n            1             1             1\n      Note: The odd-looking\
    \ ordering of numbers towards the bottom of\n      the columns above is because\
    \ priority 1 is lower than priority\n      zero.  That is to say, the values in\
    \ the first column are in\n      priority order.  They will look more logical\
    \ if you think of \"0\"\n      as being \"1.5\".\n   Priority 7 is normally only\
    \ used for urgent messages critical to\n   adjacency and so SHOULD NOT be the\
    \ default for directory traffic.\n   Unsolicited updates are sent with a priority\
    \ that is configured per\n   Data Label and that defaults to priority 5.\n"
- title: 5.  TRILL ES-IS
  contents:
  - "5.  TRILL ES-IS\n   TRILL ES-IS (End System to Intermediate System) is a variation\
    \ of\n   TRILL IS-IS [RFC7176] [RFC7177] [RFC7780] designed to operate on a\n\
    \   TRILL link among and between one or more TRILL switches and end\n   stations\
    \ on that link.  TRILL ES-IS is analogous to the ISO/IEC ES-IS\n   standard [ISO9542]\
    \ but is implemented in a significantly different\n   way as a variation of TRILL\
    \ IS-IS, as specified in this section.\n   Support of TRILL ES-IS is generally\
    \ optional for both the TRILL\n   switches and the end stations on a link but\
    \ may be required to\n   support certain features.  At the time of this writing,\
    \ the only\n   features requiring TRILL ES-IS are those listed in this section.\n\
    \   TRILL ES-IS\n   o  is useful for supporting Pull Directory hosting on, or\
    \ use from,\n      end stations (see Section 3.5),\n   o  is useful for supporting\
    \ specialized end stations [DirAsstEncap]\n      [SmartEN], and\n   o  may have\
    \ additional future uses.\n   The advantages of TRILL ES-IS over simply making\
    \ an \"end station\" be\n   a TRILL switch include relieving the end station of\
    \ having to\n   maintain a copy of the core link-state database (LSPs) and of\
    \ having\n   to perform routing calculations or having the ability to forward\n\
    \   traffic.\n   Except as provided below in this section, TRILL ES-IS PDUs and\
    \ TLVs\n   are the same as TRILL IS-IS PDUs and TLVs.\n"
- title: 5.1.  PDUs and System IDs
  contents:
  - "5.1.  PDUs and System IDs\n   All TRILL ES-IS PDUs (except some MTU-probe and\
    \ MTU-ack PDUs, which\n   may be unicast) are multicast using the TRILL-ES-IS\
    \ multicast MAC\n   address (see Section 7.6).  This use of a different multicast\
    \ address\n   assures that TRILL ES-IS and TRILL IS-IS PDUs will not be confused\n\
    \   for one another.\n   Because end stations do not have IS-IS System IDs, TRILL\
    \ ES-IS uses\n   port MAC addresses in their place.  This is convenient, since\
    \ MAC\n   addresses are 48-bit and almost all IS-IS implementations use 48-bit\n\
    \   System IDs.  Logically, TRILL IS-IS operates between the TRILL\n   switches\
    \ in a TRILL campus as identified by the System ID, while\n   TRILL ES-IS operates\
    \ between Ethernet ports on an Ethernet link\n   (which may be a bridged LAN)\
    \ as identified by the MAC address\n   [RFC6325].\n   As System IDs of TRILL switches\
    \ in a campus are required to be\n   unique, so the MAC addresses of TRILL ES-IS\
    \ ports on a link MUST be\n   unique.\n"
- title: 5.2.  Adjacency, DRB Election, Port IDs, Hellos, and TLVs
  contents:
  - "5.2.  Adjacency, DRB Election, Port IDs, Hellos, and TLVs\n   TRILL ES-IS adjacency\
    \ formation and Designated RBridge (DRB) election\n   operate between the ports\
    \ on the link as specified in [RFC7177] for a\n   broadcast link.  The DRB specifies\
    \ an ES-IS Designated VLAN for the\n   link.  Adjacency determination, DRB election,\
    \ and Designated VLANs as\n   described in this section are distinct from TRILL\
    \ IS-IS adjacency,\n   DRB election, and Designated VLANs.\n   Although the \"\
    Report state\" [RFC7177] exists for TRILL ES-IS\n   adjacencies, such adjacencies\
    \ are only reported in TRILL ES-IS LSPs,\n   not in any TRILL IS-IS LSPs.\n  \
    \ End stations supporting TRILL ES-IS MUST assign a unique Port ID to\n   each\
    \ of their TRILL ES-IS ports; the Port ID appears in the TRILL\n   ES-IS Hellos\
    \ they send.\n   TRILL ES-IS has nothing to do with Appointed Forwarders.  The\n\
    \   Appointed Forwarders sub-TLV and the VLANs Appointed sub-TLV\n   [RFC7176]\
    \ are not used and SHOULD NOT be sent in TRILL ES-IS; if such\n   a sub-TLV is\
    \ received in TRILL ES-IS, it is ignored.  (The Appointed\n   Forwarders on a\
    \ link are determined as specified in [RFC8139], using\n   TRILL IS-IS.)\n   Although\
    \ some of the ports sending TRILL ES-IS PDUs are on end\n   stations and thus\
    \ not on routers (TRILL switches), they nevertheless\n   may make use of the Router\
    \ CAPABILITY (#242) [RFC7981] and\n   MT-Capability (#144) [RFC6329] IS-IS TLVs\
    \ to indicate capabilities as\n   specified in [RFC7176].\n   TRILL ES-IS Hellos\
    \ are like TRILL IS-IS Hellos, but note the\n   following: in the Special VLANs\
    \ and Flags sub-TLV [RFC7176], any\n   TRILL switches advertise a nickname they\
    \ own, but for end stations,\n   that field MUST be sent as zero and ignored on\
    \ receipt.  In addition,\n   in the Special VLANs and Flags sub-TLV (Section 2.2.1\
    \ of [RFC7176])\n   in a TRILL ES-IS Hello, the AF and TR flag bits MUST be sent\
    \ as zero,\n   the AC flag bit MUST be sent as one (1), and all three are ignored\n\
    \   on receipt.\n"
- title: 5.3.  Link State
  contents:
  - "5.3.  Link State\n   The only link-state transmission and synchronization that\
    \ occur in\n   TRILL ES-IS are for E-L1CS (Extended Level 1 Circuit Scope) PDUs\n\
    \   [RFC7356].  In particular, the end-station Ethernet ports supporting\n   TRILL\
    \ ES-IS do not support the core TRILL IS-IS LSPs and do not\n   support E-L1FS\
    \ (Extended Level 1 Flooding Scope) LSPs [RFC7780] (or\n   the CSNPs or PSNPs\
    \ (Partial Sequence Number PDUs) [RFC7356]\n   corresponding to either of them).\
    \  TLVs and sub-TLVs that would\n   otherwise be sent in TRILL IS-IS LSPs or E-L1FS\
    \ LSPs are instead sent\n   in E-L1CS LSPs.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   For general TRILL security considerations, see\
    \ [RFC6325].\n"
- title: 6.1.  Directory Information Security
  contents:
  - "6.1.  Directory Information Security\n   Incorrect directory information can\
    \ result in a variety of security\n   threats, including those listed below. \
    \ Directory servers therefore\n   need to take care to implement and enforce access\
    \ control policies\n   that are not overly permissive.\n   o  Incorrect directory\
    \ mappings can result in data being delivered to\n      the wrong end stations,\
    \ or set of end stations in the case of\n      multi-destination packets, violating\
    \ security policy.\n   o  Missing, incorrect, or inaccessible directory data can\
    \ result in\n      denial of service due to sending data packets to black holes\
    \ or\n      discarding data on ingress due to incorrect information that their\n\
    \      destinations are not reachable or that their source addresses are\n   \
    \   forged.\n   For these reasons, whatever server or end station the directory\n\
    \   information resides on, it needs to be protected from unauthorized\n   modification.\
    \  Parties authorized to modify directory data can\n   violate availability and\
    \ integrity policies.\n"
- title: 6.2.  Directory Confidentiality and Privacy
  contents:
  - "6.2.  Directory Confidentiality and Privacy\n   In implementations of the base\
    \ TRILL protocol [RFC6325] [RFC7780],\n   RBridges deal almost exclusively with\
    \ MAC addresses.  The use of\n   directories to map to/from IP addresses means\
    \ that RBridges deal more\n   actively with IP addresses as well.  But RBridges\
    \ in any case would\n   be exposed to plain-text ARP/ND/SEND/IP traffic and so\
    \ can see all\n   this addressing metadata.  So, this more-explicit dealing with\
    \ IP\n   addresses has little effect on the privacy of end-station traffic.\n\
    \   Parties authorized to read directory data can violate privacy\n   policies\
    \ for such data.\n"
- title: 6.3.  Directory Message Security Considerations
  contents:
  - "6.3.  Directory Message Security Considerations\n   Push Directory data is distributed\
    \ through ESADI-LSPs [RFC7357].\n   ESADI is built on IS-IS, and such data can\
    \ thus be authenticated with\n   the widely implemented and deployed IS-IS PDU\
    \ security.  This\n   mechanism provides authentication and integrity protection.\
    \  See\n   [RFC5304], [RFC5310], and the Security Considerations section of\n\
    \   [RFC7357].\n   Pull Directory queries and responses are transmitted as\n \
    \  RBridge-to-RBridge or native RBridge Channel messages [RFC7178].\n   Such messages\
    \ can be secured by the mechanisms specified in\n   [RFC7978].  These mechanisms\
    \ can provide authentication and\n   confidentiality protection.  At the time\
    \ of this writing, these\n   security mechanisms are believed to be less widely\
    \ implemented than\n   IS-IS security.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  ESADI-Parameter Data Extensions
  contents:
  - "7.1.  ESADI-Parameter Data Extensions\n   IANA has created a subregistry in the\
    \ \"TRILL Parameters\" registry\n   as follows:\n      Subregistry: ESADI-Parameter\
    \ APPsub-TLV Flag Bits\n      Registration Procedure(s): Standards Action\n  \
    \    References: [RFC7357] [RFC8171]\n         Bit  Mnemonic  Description    \
    \                Reference\n         ---  --------  ----------------------------\
    \   ---------------\n           0    UN      Supports Unicast ESADI         ESADI\
    \ [RFC7357]\n         1-2    PDSS    Push Directory Server Status   [RFC8171]\n\
    \         3-7    -       Unassigned\n   In addition, the ESADI-Parameter APPsub-TLV\
    \ is optionally extended,\n   as provided in its original specification in ESADI\
    \ [RFC7357], by\n   1 byte as shown below.  Therefore, [RFC8171] has also been\
    \ added as a\n   second reference to the ESADI-Parameter APPsub-TLV in the \"\
    TRILL\n   APPsub-TLV Types under IS-IS TLV 251 Application Identifier 1\"\n  \
    \ registry.\n             +-+-+-+-+-+-+-+-+\n             | Type          |  \
    \         (1 byte)\n             +-+-+-+-+-+-+-+-+\n             | Length    \
    \    |           (1 byte)\n             +-+-+-+-+-+-+-+-+\n             |R| Priority\
    \    |           (1 byte)\n             +-+-+-+-+-+-+-+-+\n             | CSNP\
    \ Time     |           (1 byte)\n             +-+-+-+-+-+-+-+-+\n            \
    \ | Flags         |           (1 byte)\n             +---------------+\n     \
    \        |PushDirPriority|           (optional, 1 byte)\n             +---------------+\n\
    \             | Reserved for              (variable)\n             |  expansion\n\
    \             +-+-+-+-...\n   The meanings of all the fields are as specified\
    \ in ESADI [RFC7357],\n   except that the added PushDirPriority is the priority\
    \ of the\n   advertising ESADI instance to be a Push Directory as described in\n\
    \   Section 2.3.  If the PushDirPriority field is not present\n   (Length = 3),\
    \ it is treated as if it were 0x3F.  0x3F is also the\n   value used and placed\
    \ here by a TRILL switch whose priority to be a\n   Push Directory has not been\
    \ configured.\n"
- title: 7.2.  RBridge Channel Protocol Numbers
  contents:
  - "7.2.  RBridge Channel Protocol Numbers\n   IANA has assigned a new RBridge Channel\
    \ Protocol number (0x005) from\n   the range assignable by Standards Action [RFC5226]\
    \ and updated the\n   subregistry accordingly in the \"TRILL Parameters\" registry.\
    \  The\n   description is \"Pull Directory Services\".  The reference is\n   [RFC8171].\n"
- title: 7.3.  The Pull Directory (PUL) and No Data (NOD) Bits
  contents:
  - "7.3.  The Pull Directory (PUL) and No Data (NOD) Bits\n   IANA has assigned a\
    \ previously reserved bit in the Interested VLANs\n   field of the Interested\
    \ VLANs sub-TLV and the Interested Labels field\n   of the Interested Labels sub-TLV\
    \ [RFC7176] to indicate a Pull\n   Directory server (PUL).  This bit has been\
    \ added, with this document\n   as a reference, to the \"Interested VLANs Flag\
    \ Bits\" and \"Interested\n   Labels Flag Bits\" subregistries created by [RFC7357],\
    \ as shown below.\n   IANA has assigned a previously reserved bit in the Interested\
    \ VLANs\n   field of the Interested VLANs sub-TLV and the Interested Labels field\n\
    \   of the Interested Labels sub-TLV [RFC7176] to indicate No Data (NOD)\n   (see\
    \ Section 3.8).  This bit has been added, with this document as a\n   reference,\
    \ to the \"Interested VLANs Flag Bits\" and \"Interested Labels\n   Flag Bits\"\
    \ subregistries created by [RFC7357], as shown below.\n   The bits are as follows:\n\
    \      Registry: Interested VLANs Flag Bits\n      Bit Mnemonic  Description \
    \    Reference\n      --- -------- --------------  ---------------\n       18\
    \    PUL   Pull Directory  [RFC8171]\n       19    NOD   No Data         [RFC8171]\n\
    \      Registry: Interested Labels Flag Bits\n      Bit Mnemonic  Description\
    \     Reference\n      --- -------- --------------  ---------------\n        6\
    \    PUL   Pull Directory  [RFC8171]\n        7    NOD   No Data         [RFC8171]\n"
- title: 7.4.  TRILL Pull Directory QTYPEs
  contents:
  - "7.4.  TRILL Pull Directory QTYPEs\n   IANA has created a new registry as follows:\n\
    \      Name: TRILL Pull Directory Query Types (QTYPEs)\n      Registration Procedure(s):\
    \ IETF Review\n      Reference: [RFC8171]\n      Initial contents as in Section\
    \ 3.2.1.\n"
- title: 7.5.  Pull Directory Error Code Registries
  contents:
  - "7.5.  Pull Directory Error Code Registries\n   IANA has created a new registry\
    \ and two new indented subregistries\n   as follows:\n      Registry\n       \
    \  Name: TRILL Pull Directory Errors\n         Registration Procedure(s): IETF\
    \ Review\n         Reference: [RFC8171]\n         Initial contents as in Section\
    \ 3.6.1.\n         Subregistry\n            Name: Sub-codes for TRILL Pull Directory\
    \ Errors 1 and 3\n            Registration Procedure(s): Expert Review\n     \
    \       Reference: [RFC8171]\n            Initial contents as in Section 3.6.2.\n\
    \         Subregistry\n            Name: Sub-codes for TRILL Pull Directory Errors\
    \ 128 and 131\n            Registration Procedure(s): Expert Review\n        \
    \    Reference: [RFC8171]\n            Initial contents as in Section 3.6.3.\n"
- title: 7.6.  TRILL-ES-IS MAC Address
  contents:
  - "7.6.  TRILL-ES-IS MAC Address\n   IANA has assigned a TRILL multicast MAC address\
    \ (01-80-C2-00-00-47)\n   from the \"TRILL Multicast Addresses\" registry.  The\
    \ description is\n   \"TRILL-ES-IS\".  The reference is [RFC8171].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC826]   Plummer, D., \"Ethernet Address Resolution\
    \ Protocol: Or\n              Converting Network Protocol Addresses to 48.bit\
    \ Ethernet\n              Address for Transmission on Ethernet Hardware\", STD\
    \ 37,\n              RFC 826, DOI 10.17487/RFC0826, November 1982,\n         \
    \     <http://www.rfc-editor.org/info/rfc826>.\n   [RFC903]   Finlayson, R., Mann,\
    \ T., Mogul, J., and M. Theimer, \"A\n              Reverse Address Resolution\
    \ Protocol\", STD 38, RFC 903,\n              DOI 10.17487/RFC0903, June 1984,\n\
    \              <http://www.rfc-editor.org/info/rfc903>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3971]  Arkko, J., Ed.,\
    \ Kempf, J., Zill, B., and P. Nikander,\n              \"SEcure Neighbor Discovery\
    \ (SEND)\", RFC 3971,\n              DOI 10.17487/RFC3971, March 2005,\n     \
    \         <http://www.rfc-editor.org/info/rfc3971>.\n   [RFC4861]  Narten, T.,\
    \ Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861, September\
    \ 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC5304]\
    \  Li, T. and R. Atkinson, \"IS-IS Cryptographic\n              Authentication\"\
    , RFC 5304, DOI 10.17487/RFC5304,\n              October 2008, <http://www.rfc-editor.org/info/rfc5304>.\n\
    \   [RFC5310]  Bhatia, M., Manral, V., Li, T., Atkinson, R., White, R.,\n    \
    \          and M. Fanto, \"IS-IS Generic Cryptographic\n              Authentication\"\
    , RFC 5310, DOI 10.17487/RFC5310,\n              February 2009, <http://www.rfc-editor.org/info/rfc5310>.\n\
    \   [RFC6165]  Banerjee, A. and D. Ward, \"Extensions to IS-IS for Layer-2\n \
    \             Systems\", RFC 6165, DOI 10.17487/RFC6165, April 2011,\n       \
    \       <http://www.rfc-editor.org/info/rfc6165>.\n   [RFC6325]  Perlman, R.,\
    \ Eastlake 3rd, D., Dutt, D., Gai, S., and A.\n              Ghanwani, \"Routing\
    \ Bridges (RBridges): Base Protocol\n              Specification\", RFC 6325,\
    \ DOI 10.17487/RFC6325, July 2011,\n              <http://www.rfc-editor.org/info/rfc6325>.\n\
    \   [RFC6329]  Fedyk, D., Ed., Ashwood-Smith, P., Ed., Allan, D., Bragg,\n   \
    \           A., and P. Unbehagen, \"IS-IS Extensions Supporting\n            \
    \  IEEE 802.1aq Shortest Path Bridging\", RFC 6329,\n              DOI 10.17487/RFC6329,\
    \ April 2012,\n              <http://www.rfc-editor.org/info/rfc6329>.\n   [RFC7042]\
    \  Eastlake 3rd, D. and J. Abley, \"IANA Considerations and\n              IETF\
    \ Protocol and Documentation Usage for IEEE 802\n              Parameters\", BCP\
    \ 141, RFC 7042, DOI 10.17487/RFC7042,\n              October 2013, <http://www.rfc-editor.org/info/rfc7042>.\n\
    \   [RFC7172]  Eastlake 3rd, D., Zhang, M., Agarwal, P., Perlman, R., and\n  \
    \            D. Dutt, \"Transparent Interconnection of Lots of Links\n       \
    \       (TRILL): Fine-Grained Labeling\", RFC 7172,\n              DOI 10.17487/RFC7172,\
    \ May 2014,\n              <http://www.rfc-editor.org/info/rfc7172>.\n   [RFC7176]\
    \  Eastlake 3rd, D., Senevirathne, T., Ghanwani, A., Dutt,\n              D.,\
    \ and A. Banerjee, \"Transparent Interconnection of Lots\n              of Links\
    \ (TRILL) Use of IS-IS\", RFC 7176,\n              DOI 10.17487/RFC7176, May 2014,\n\
    \              <http://www.rfc-editor.org/info/rfc7176>.\n   [RFC7177]  Eastlake\
    \ 3rd, D., Perlman, R., Ghanwani, A., Yang, H., and\n              V. Manral,\
    \ \"Transparent Interconnection of Lots of Links\n              (TRILL): Adjacency\"\
    , RFC 7177, DOI 10.17487/RFC7177,\n              May 2014, <http://www.rfc-editor.org/info/rfc7177>.\n\
    \   [RFC7178]  Eastlake 3rd, D., Manral, V., Li, Y., Aldrin, S., and D.\n    \
    \          Ward, \"Transparent Interconnection of Lots of Links\n            \
    \  (TRILL): RBridge Channel Support\", RFC 7178,\n              DOI 10.17487/RFC7178,\
    \ May 2014,\n              <http://www.rfc-editor.org/info/rfc7178>.\n   [RFC7356]\
    \  Ginsberg, L., Previdi, S., and Y. Yang, \"IS-IS Flooding\n              Scope\
    \ Link State PDUs (LSPs)\", RFC 7356,\n              DOI 10.17487/RFC7356, September\
    \ 2014,\n              <http://www.rfc-editor.org/info/rfc7356>.\n   [RFC7357]\
    \  Zhai, H., Hu, F., Perlman, R., Eastlake 3rd, D., and O.\n              Stokes,\
    \ \"Transparent Interconnection of Lots of Links\n              (TRILL): End Station\
    \ Address Distribution Information\n              (ESADI) Protocol\", RFC 7357,\
    \ DOI 10.17487/RFC7357,\n              September 2014, <http://www.rfc-editor.org/info/rfc7357>.\n\
    \   [RFC7780]  Eastlake 3rd, D., Zhang, M., Perlman, R., Banerjee, A.,\n     \
    \         Ghanwani, A., and S. Gupta, \"Transparent Interconnection\n        \
    \      of Lots of Links (TRILL): Clarifications, Corrections, and\n          \
    \    Updates\", RFC 7780, DOI 10.17487/RFC7780, February 2016,\n             \
    \ <http://www.rfc-editor.org/info/rfc7780>.\n   [RFC7961]  Eastlake 3rd, D. and\
    \ L. Yizhou, \"Transparent\n              Interconnection of Lots of Links (TRILL):\
    \ Interface\n              Addresses APPsub-TLV\", RFC 7961, DOI 10.17487/RFC7961,\n\
    \              August 2016, <http://www.rfc-editor.org/info/rfc7961>.\n   [RFC7981]\
    \  Ginsberg, L., Previdi, S., and M. Chen, \"IS-IS Extensions\n              for\
    \ Advertising Router Information\", RFC 7981,\n              DOI 10.17487/RFC7981,\
    \ October 2016,\n              <http://www.rfc-editor.org/info/rfc7981>.\n   [RFC8139]\
    \  Eastlake 3rd, D., Li, Y., Umair, M., Banerjee, A., and F.\n              Hu,\
    \ \"Transparent Interconnection of Lots of Links (TRILL):\n              Appointed\
    \ Forwarders\", RFC 8139, DOI 10.17487/RFC7961,\n              June 2017, <http://www.rfc-editor.org/info/rfc8139>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <http://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC5226]  Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May 2008,\n         \
    \     <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC7067]  Dunbar, L., Eastlake\
    \ 3rd, D., Perlman, R., and I.\n              Gashinsky, \"Directory Assistance\
    \ Problem and High-Level\n              Design Proposal\", RFC 7067, DOI 10.17487/RFC7067,\n\
    \              November 2013, <http://www.rfc-editor.org/info/rfc7067>.\n   [RFC7978]\
    \  Eastlake 3rd, D., Umair, M., and Y. Li, \"Transparent\n              Interconnection\
    \ of Lots of Links (TRILL): RBridge Channel\n              Header Extension\"\
    , RFC 7978, DOI 10.17487/RFC7978,\n              September 2016, <http://www.rfc-editor.org/info/rfc7978>.\n\
    \   [ARPND]    Li, Y., Eastlake 3rd, D., Dunbar, L., Perlman, R., and M.\n   \
    \           Umair, \"TRILL: ARP/ND Optimization\", Work in Progress,\n       \
    \       draft-ietf-trill-arp-optimization-08, April 2017.\n   [DirAsstEncap]\n\
    \              Dunbar, L., Eastlake 3rd, D., and R. Perlman, \"Directory\n   \
    \           Assisted TRILL Encapsulation\", Work in Progress,\n              draft-ietf-trill-directory-assisted-encap-05,\
    \ May 2017.\n   [ISO9542]  ISO 9542:1988, \"Information processing systems --\n\
    \              Telecommunications and information exchange between\n         \
    \     systems -- End system to Intermediate system routeing\n              exchange\
    \ protocol for use in conjunction with the Protocol\n              for providing\
    \ the connectionless-mode network service\n              (ISO 8473)\", August\
    \ 1988.\n   [SmartEN]  Perlman, R., Hu, F., Eastlake 3rd, D., Krupakaran, K.,\
    \ and\n              T. Liao, \"TRILL Smart Endnodes\", Work in Progress,\n  \
    \            draft-ietf-trill-smart-endnodes-05, February 2017.\n   [X.233]  \
    \  International Telecommunication Union, ITU-T\n              Recommendation\
    \ X.233: \"Information technology - Protocol\n              for providing the\
    \ connectionless-mode network service:\n              Protocol specification\"\
    , August 1997,\n              <https://www.itu.int/rec/T-REC-X.233/en>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The contributions of the following persons are gratefully\n\
    \   acknowledged:\n      Amanda Baber, Matthew Bocci, Alissa Cooper, Stephen Farrell,\n\
    \      Daniel Franke, Igor Gashinsky, Joel Halpern, Susan Hares, Alexey\n    \
    \  Melnikov, Gayle Noble, and Tianran Zhou.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Donald Eastlake 3rd\n   Huawei Technologies\n   155 Beaver\
    \ Street\n   Milford, MA  01757\n   United States of America\n   Phone: +1-508-333-2270\n\
    \   Email: d3e3e3@gmail.com\n   Linda Dunbar\n   Huawei Technologies\n   5430\
    \ Legacy Drive, Suite #175\n   Plano, TX  75024\n   United States of America\n\
    \   Phone: +1-469-277-5840\n   Email: ldunbar@huawei.com\n   Radia Perlman\n \
    \  EMC\n   2010 256th Avenue NE, #200\n   Bellevue, WA  98007\n   United States\
    \ of America\n   Email: Radia@alum.mit.edu\n   Yizhou Li\n   Huawei Technologies\n\
    \   101 Software Avenue\n   Nanjing  210012\n   China\n   Phone: +86-25-56622310\n\
    \   Email: liyizhou@huawei.com\n"
