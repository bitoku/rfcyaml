- title: __initial_text__
  contents:
  - "                    Encryption of Header Extensions\n           in the Secure\
    \ Real-time Transport Protocol (SRTP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Secure Real-time Transport Protocol (SRTP) provides\n   authentication,\
    \ but not encryption, of the headers of Real-time\n   Transport Protocol (RTP)\
    \ packets.  However, RTP header extensions may\n   carry sensitive information\
    \ for which participants in multimedia\n   sessions want confidentiality.  This\
    \ document provides a mechanism,\n   extending the mechanisms of SRTP, to selectively\
    \ encrypt RTP header\n   extensions in SRTP.\n   This document updates RFC 3711,\
    \ the Secure Real-time Transport\n   Protocol specification, to require that all\
    \ future SRTP encryption\n   transforms specify how RTP header extensions are\
    \ to be encrypted.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6904.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Encryption Mechanism  . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Example Encryption Mask . . . . . . . . . . . . . . .\
    \ . .   6\n     3.2.  Header Extension Keystream Generation for Existing\n   \
    \        Encryption Transforms . . . . . . . . . . . . . . . . . .   7\n     3.3.\
    \  Header Extension Keystream Generation for Future\n           Encryption Transforms\
    \ . . . . . . . . . . . . . . . . . .   8\n   4.  Signaling (Setup) Information\
    \ . . . . . . . . . . . . . . . .   8\n     4.1.  Backward Compatibility  . .\
    \ . . . . . . . . . . . . . . .   9\n   5.  Security Considerations . . . . .\
    \ . . . . . . . . . . . . . .  10\n   6.  IANA Considerations . . . . . . . .\
    \ . . . . . . . . . . . . .  11\n   7.  Acknowledgments . . . . . . . . . . .\
    \ . . . . . . . . . . . .  11\n   8.  References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  11\n     8.1.  Normative References  . . . . . . . .\
    \ . . . . . . . . . .  11\n     8.2.  Informative References  . . . . . . . .\
    \ . . . . . . . . .  12\n   Appendix A.  Test Vectors . . . . . . . . . . . .\
    \ . . . . . . . .  13\n     A.1.  Key Derivation Test Vectors . . . . . . . .\
    \ . . . . . . .  13\n     A.2.  Header Encryption Test Vectors Using AES-CM .\
    \ . . . . . .  14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Secure Real-time Transport Protocol [RFC3711] specification\n\
    \   provides confidentiality, message authentication, and replay\n   protection\
    \ for multimedia payloads sent using the Real-time Protocol\n   (RTP) [RFC3550].\
    \  However, in order to preserve RTP header\n   compression efficiency, SRTP provides\
    \ only authentication and replay\n   protection for the headers of RTP packets,\
    \ not confidentiality.\n   For the standard portions of an RTP header, providing\
    \ only\n   authentication and replay protection does not normally present a\n\
    \   problem, as the information carried in an RTP header does not provide\n  \
    \ much information beyond that which an attacker could infer by\n   observing\
    \ the size and timing of RTP packets.  Thus, there is little\n   need for confidentiality\
    \ of the header information.\n   However, the security requirements can be different\
    \ for information\n   carried in RTP header extensions.  A number of recent proposals\
    \ for\n   header extensions using the mechanism described in \"A General\n   Mechanism\
    \ for RTP Header Extensions\" [RFC5285] carry information for\n   which confidentiality\
    \ could be desired or essential.  Notably, two\n   recent specifications ([RFC6464]\
    \ and [RFC6465]) contain information\n   about per-packet sound levels of the\
    \ media data carried in the RTP\n   payload and specify that exposing this information\
    \ to an eavesdropper\n   is unacceptable in many circumstances (as described in\
    \ the Security\n   Considerations sections of those RFCs).\n   This document,\
    \ therefore, defines a mechanism by which encryption can\n   be applied to RTP\
    \ header extensions when they are transported using\n   SRTP.  As an RTP sender\
    \ may wish some extension information to be\n   sent in the clear (for example,\
    \ it may be useful for a network\n   monitoring device to be aware of RTP transmission\
    \ time offsets\n   [RFC5450]), this mechanism can be selectively applied to a\
    \ subset of\n   the header extension elements carried in an SRTP packet.\n   The\
    \ mechanism defined by this document encrypts packets' header\n   extensions using\
    \ the same cryptographic algorithms and parameters as\n   are used to encrypt\
    \ the packets' RTP payloads.  This document defines\n   how this is done for the\
    \ encryption transforms defined in [RFC3711],\n   [RFC5669], and [RFC6188], which\
    \ are the SRTP encryption transforms\n   defined by Standards Track RFCs at the\
    \ time of this writing.  It also\n   updates [RFC3711] to indicate that specifications\
    \ of future SRTP\n   encryption transforms must define how header extension encryption\
    \ is\n   to be performed.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119] and\n   indicate requirement levels for compliant implementations.\n"
- title: 3.  Encryption Mechanism
  contents:
  - "3.  Encryption Mechanism\n   Encrypted header extension elements are carried\
    \ in the same manner as\n   non-encrypted header extension elements, as defined\
    \ by [RFC5285].\n   The one- or two-byte header of the extension elements is not\n\
    \   encrypted, nor is any of the header extension padding.  If multiple\n   different\
    \ header extension elements are being encrypted, they have\n   separate element\
    \ identifier values, just as they would if they were\n   not encrypted.  Similarly,\
    \ encrypted and non-encrypted header\n   extension elements have separate identifier\
    \ values.\n   Encrypted header extension elements are carried only in packets\n\
    \   encrypted using the Secure Real-time Transport Protocol [RFC3711].\n   To\
    \ encrypt (or decrypt) encrypted header extension elements, an SRTP\n   participant\
    \ first uses the SRTP key derivation algorithm, specified\n   in Section 4.3.1\
    \ of [RFC3711], to generate header encryption and\n   header salting keys, using\
    \ the same pseudorandom function family as\n   is used for the key derivation\
    \ for the SRTP session.  These keys are\n   derived as follows:\n   o  k_he (SRTP\
    \ header encryption): <label> = 0x06, n=n_e.\n   o  k_hs (SRTP header salting\
    \ key): <label> = 0x07, n=n_s.\n   where n_e and n_s are from the cryptographic\
    \ context: the same size\n   encryption key and salting key are used as are used\
    \ for the SRTP\n   payload.  Additionally, the same master key, master salt, index,\
    \ and\n   key_derivation_rate are used as for the SRTP payload.  (Note that\n\
    \   since RTP headers, including header extensions, are authenticated in\n   SRTP,\
    \ no new authentication key is needed for header extensions.)\n   A header extension\
    \ keystream is generated for each packet containing\n   encrypted header extension\
    \ elements.  The details of how this header\n   extension keystream is generated\
    \ depend on the encryption transform\n   that is used for the SRTP packet.  For\
    \ encryption transforms that\n   have been standardized as of the date of publication\
    \ of this\n   document, see Section 3.2; for requirements for new transforms,\
    \ see\n   Section 3.3.\n   After the header extension keystream is generated,\
    \ the SRTP\n   participant then computes an encryption mask for the header\n \
    \  extension, identifying the portions of the header extension that are,\n   or\
    \ are to be, encrypted.  (For an example of this procedure, see\n   Section 3.1.)\
    \  This encryption mask corresponds to the entire\n   payload of each header extension\
    \ element that is encrypted.  It does\n   not include any non-encrypted header\
    \ extension elements, any\n   extension element headers, or any padding octets.\
    \  The encryption\n   mask has all-bits-1 octets (i.e., hexadecimal 0xff) for\
    \ header\n   extension octets that are to be encrypted and all-bits-0 octets for\n\
    \   header extension octets that are not to be encrypted.  The set of\n   extension\
    \ elements to be encrypted is communicated between the sender\n   and the receiver\
    \ using the signaling mechanisms described in\n   Section 4.\n   This encryption\
    \ mask is computed separately for every packet that\n   carries a header extension.\
    \  Based on the non-encrypted portions of\n   the headers and the signaled list\
    \ of encrypted extension elements, a\n   receiver can always determine the correct\
    \ encryption mask for any\n   encrypted header extension.\n   The SRTP participant\
    \ bitwise-ANDs the encryption mask with the\n   keystream to produce a masked\
    \ keystream.  It then bitwise\n   exclusive-ORs the header extension with this\
    \ masked keystream to\n   produce the ciphertext version of the header extension.\
    \  (Thus,\n   octets indicated as all-bits-1 in the encrypted mask are encrypted,\n\
    \   whereas those indicated as all-bits-0 are not.)\n   The header extension encryption\
    \ process does not include the \"defined\n   by profile\" or \"length\" fields\
    \ of the header extension, only the\n   field that Section 5.3.1 of [RFC3550]\
    \ calls \"header extension\"\n   proper, starting with the first [RFC5285] ID\
    \ and length.  Thus, both\n   the encryption mask and the keystream begin at this\
    \ point.\n   This header extension encryption process could, equivalently, be\n\
    \   computed by considering the encryption mask as a mixture of the\n   encrypted\
    \ and unencrypted headers, i.e., as\n       EncryptedHeader = (Encrypt(Key, Plaintext)\
    \ AND MASK) OR\n                         (Plaintext AND (NOT MASK))\n   where\
    \ Encrypt is the encryption function, MASK is the encryption\n   mask, and AND,\
    \ OR, and NOT are bitwise operations.  This formulation\n   of the encryption\
    \ process might be preferred by implementations for\n   which encryption is performed\
    \ by a separate module and cannot be\n   modified easily.\n   The SRTP authentication\
    \ tag is computed across the encrypted header\n   extension, i.e., the data that\
    \ is actually transmitted on the wire.\n   Thus, header extension encryption MUST\
    \ be done before the\n   authentication tag is computed, and authentication tag\
    \ validation\n   MUST be done on the encrypted header extensions.  For receivers,\n\
    \   header extension decryption SHOULD be done only after the receiver\n   has\
    \ validated the packet's message authentication tag, and the\n   receiver MUST\
    \ NOT take any actions based on decrypted headers, prior\n   to validating the\
    \ authentication tag, that could affect the security\n   or proper functioning\
    \ of the system.\n"
- title: 3.1.  Example Encryption Mask
  contents:
  - "3.1.  Example Encryption Mask\n   If a sender wished to send a header extension\
    \ containing an encrypted\n   SMPTE timecode [RFC5484] with ID 1, a plaintext\
    \ transmission time\n   offset [RFC5450] with ID 2, an encrypted audio level indication\n\
    \   [RFC6464] with ID 3, and an encrypted NTP timestamp [RFC6051] with ID\n  \
    \ 4, the plaintext RTP header extension might look like this:\n    0         \
    \          1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  ID=1 | len=7 |     SMTPE timecode (long form)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       SMTPE timecode (continued)                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | SMTPE (cont'd)|  ID=2 | len=2 | toffset                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | toffset (ct'd)|  ID=3 | len=0 | audio level   |  ID=4 | len=6 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       NTP timestamp (Variant B)                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       NTP timestamp (Variant B, cont'd)       | padding = 0   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 1: Structure of Plaintext Example Header Extension\n   The corresponding\
    \ encryption mask would then be:\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 1 1 1 1 1 1 1|0 0 0 0 0 0 0 0|0 0 0 0 0 0 0 0|0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0|0 0 0 0 0 0 0 0|1 1 1 1 1 1 1 1|0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|1 1 1 1 1 1 1 1|0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 2: Encryption Mask for Example Header Extension\n   In the mask,\
    \ the octets corresponding to the payloads of the\n   encrypted header extension\
    \ elements are set to all-1 values, and the\n   octets corresponding to non-encrypted\
    \ header extension elements,\n   element headers, and header extension padding\
    \ are set to all-zero\n   values.\n"
- title: 3.2.  Header Extension Keystream Generation for Existing Encryption
  contents:
  - "3.2.  Header Extension Keystream Generation for Existing Encryption\n      Transforms\n\
    \   For the AES-CM and AES-f8 transforms [RFC3711], the SEED-CTR\n   transform\
    \ [RFC5669], and the AES_192_CM and AES_256_CM transforms\n   [RFC6188], the header\
    \ extension keystream SHALL be generated for each\n   packet containing encrypted\
    \ header extension elements using the same\n   encryption transform and Initialization\
    \ Vector (IV) as are used for\n   that packet's SRTP payload, except that the\
    \ SRTP encryption and\n   salting keys k_e and k_s are replaced by the SRTP header\
    \ encryption\n   and header salting keys k_he and k_hs, respectively, as defined\n\
    \   above.\n   For the SEED-CCM and SEED-GCM transforms [RFC5669], the header\n\
    \   extension keystream SHALL be generated using the algorithm specified\n   above\
    \ for the SEED-CTR algorithm.  (Because the Authenticated\n   Encryption with\
    \ Associated Data (AEAD) transform used on the payload\n   in these algorithms\
    \ includes the RTP header, including the RTP header\n   extension, in its Associated\
    \ Authenticated Data (AAD), counter-mode\n   encryption for the header extension\
    \ is believed to be of equivalent\n   cryptographic strength to the CCM and GCM\
    \ transforms.)\n   For the NULL encryption transform [RFC3711], the header extension\n\
    \   keystream SHALL be all-zero.\n"
- title: 3.3.  Header Extension Keystream Generation for Future Encryption
  contents:
  - "3.3.  Header Extension Keystream Generation for Future Encryption\n      Transforms\n\
    \   When new SRTP encryption transforms are defined, this document\n   updates\
    \ [RFC3711] as follows: in addition to the rules specified in\n   Section 6 of\
    \ RFC 3711, the Standards Track RFC defining the new\n   transform MUST specify\
    \ how the encryption transform is to be used\n   with header extension encryption.\n\
    \   It is RECOMMENDED that new transformations follow the same mechanisms\n  \
    \ as are defined in Section 3.2 of this document if they are applicable\n   and\
    \ are believed to be cryptographically adequate for the transform\n   in question.\n"
- title: 4.  Signaling (Setup) Information
  contents:
  - "4.  Signaling (Setup) Information\n   Encrypted header extension elements are\
    \ signaled in the Session\n   Description Protocol (SDP) extmap attribute using\
    \ the URI\n   \"urn:ietf:params:rtp-hdrext:encrypt\" followed by the URI of the\n\
    \   header extension element being encrypted, as well as any\n   extensionattributes\
    \ that extension normally takes.  Figure 3 gives a\n   formal Augmented Backus-Naur\
    \ Form (ABNF) [RFC5234] showing this\n   grammar extension, extending the grammar\
    \ defined in [RFC5285].\n   enc-extensionname = %x75.72.6e.3a.69.65.74.66.3a.70.61.72.61.6d.73.3a\n\
    \       %x72.74.70.2d.68.64.72.65.78.74.3a.65.6e.63.72.79.70.74\n       ; \"urn:ietf:params:rtp-hdrext:encrypt\"\
    \ in lower case\n   extmap =/ mapentry SP enc-extensionname SP extensionname\n\
    \       [SP extensionattributes]\n   ; extmap, mapentry, extensionname, and extensionattributes\n\
    \   ; are defined in [RFC5285]\n                 Figure 3: Syntax of the \"encrypt\"\
    \ extmap\n   Thus, for example, to signal an SRTP session using encrypted SMPTE\n\
    \   timecodes [RFC5484], while simultaneously signaling plaintext\n   transmission\
    \ time offsets [RFC5450], an SDP document could contain\n   the text shown in\
    \ Figure 4 (line breaks have been added for\n   formatting).\n   m=audio 49170\
    \ RTP/SAVP 0\n   a=crypto:1 AES_CM_128_HMAC_SHA1_32 \\\n     inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n\
    \   a=extmap:1 urn:ietf:params:rtp-hdrext:encrypt \\\n       urn:ietf:params:rtp-hdrext:smpte-tc\
    \ 25@600/24\n   a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n         Figure\
    \ 4: Sample SDP Document Offering Encrypted Headers\n   This example uses SDP\
    \ security descriptions [RFC4568] for SRTP\n   keying, but this is merely for\
    \ illustration.  Any SRTP keying\n   mechanism to establish session keys will\
    \ work.\n   The extmap SDP attribute is defined in [RFC5285] as being either a\n\
    \   session or media attribute.  If the extmap for an encrypted header\n   extension\
    \ is specified as a media attribute, it MUST be specified\n   only for media that\
    \ use SRTP-based RTP profiles.  If such an extmap\n   is specified as a session\
    \ attribute, there MUST be at least one media\n   in the SDP session that uses\
    \ an SRTP-based RTP profile.  The session-\n   level extmap applies to all the\
    \ SRTP-based media in the session and\n   MUST be ignored for all other (non-SRTP\
    \ or non-RTP) media.\n   The \"urn:ietf:params:rtp-hdrext:encrypt\" extension\
    \ MUST NOT be\n   recursively applied to itself.\n"
- title: 4.1.  Backward Compatibility
  contents:
  - "4.1.  Backward Compatibility\n   Following the procedures in [RFC5285], an SDP\
    \ endpoint that does not\n   understand the \"urn:ietf:params:rtp-hdrext:encrypt\"\
    \ extension URI\n   will ignore the extension and, for SDP offer/answer, will\
    \ negotiate\n   not to use it.\n   For backward compatibility with endpoints that\
    \ do not implement this\n   specification, in a negotiated session (whether using\
    \ offer/answer or\n   some other means), best-effort encryption of a header extension\n\
    \   element is possible: an endpoint MAY offer the same header extension\n   element\
    \ both encrypted and unencrypted.  An offerer MUST offer only\n   best-effort\
    \ negotiation when lack of confidentiality would be\n   acceptable in the backward-compatible\
    \ case.  Answerers (or equivalent\n   peers in a negotiation) that understand\
    \ header extension encryption\n   SHOULD choose the encrypted form of the offered\
    \ header extension\n   element and mark the unencrypted form \"inactive\", unless\
    \ they have an\n   explicit reason to prefer the unencrypted form.  In all cases,\n\
    \   answerers MUST NOT negotiate the use of, and senders MUST NOT send,\n   both\
    \ encrypted and unencrypted forms of the same header extension.\n   Note that,\
    \ as always, users of best-effort encryption MUST be\n   cautious of bid-down\
    \ attacks, where a man-in-the-middle attacker\n   removes a higher-security option,\
    \ forcing endpoints to negotiate a\n   lower-security one.  Appropriate countermeasures\
    \ depend on the\n   signaling protocol in use, but users can ensure, for example,\
    \ that\n   signaling is integrity-protected.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The security properties of header extension elements\
    \ protected by the\n   mechanism in this document are equivalent to those for\
    \ SRTP payloads.\n   The mechanism defined in this document does not provide\n\
    \   confidentiality about which header extension elements are used for a\n   given\
    \ SRTP packet, only for the content of those header extension\n   elements.  This\
    \ appears to be in the spirit of SRTP itself, which\n   does not encrypt RTP headers.\
    \  If this is a concern, an alternate\n   mechanism would be needed to provide\
    \ confidentiality.\n   For the two-byte-header form of header extension elements\
    \ (0x100N,\n   where \"N\" is the appbits field), this mechanism does not provide\
    \ any\n   protection to zero-length header extension elements (for which their\n\
    \   presence or absence is the only information they carry).  It also\n   does\
    \ not provide any protection for the appbits (field 256, the\n   lowest four bits\
    \ of the \"defined by profile\" field) of the two-byte\n   headers.  Neither of\
    \ these features is present in the one-byte-header\n   form of header extension\
    \ elements (0xBEDE), so these limitations do\n   not apply in that case.\n   This\
    \ mechanism cannot protect RTP header extensions that do not use\n   the mechanism\
    \ defined in [RFC5285].\n   This document does not specify the circumstances in\
    \ which extension\n   header encryption should be used.  Documents defining specific\
    \ header\n   extension elements should provide guidance on when encryption is\n\
    \   appropriate for these elements.\n   If a middlebox does not have access to\
    \ the SRTP authentication keys,\n   it has no way to verify the authenticity of\
    \ unencrypted RTP header\n   extension elements (or the unencrypted RTP header),\
    \ even though it\n   can monitor them.  Therefore, such middleboxes MUST treat\
    \ such\n   headers as untrusted and potentially generated by an attacker, in the\n\
    \   same way as they treat unauthenticated traffic.  (This does not mean\n   that\
    \ middleboxes cannot view and interpret such traffic, of course,\n   only that\
    \ appropriate skepticism needs to be maintained about the\n   results of such\
    \ interpretation.)\n   There is no mechanism defined to protect header extensions\
    \ with\n   different algorithms or encryption keys than are used to protect the\n\
    \   RTP payloads.  In particular, it is not possible to provide\n   confidentiality\
    \ for a header extension while leaving the payload in\n   cleartext.\n   The dangers\
    \ of using weak or NULL authentication with SRTP, described\n   in Section 9.5\
    \ of [RFC3711], apply to encrypted header extensions as\n   well.  In particular,\
    \ since some header extension elements will have\n   some easily guessed plaintext\
    \ bits, strong authentication is REQUIRED\n   if an attacker setting such bits\
    \ could have a meaningful effect on\n   the behavior of the system.\n   The technique\
    \ defined in this document can be applied only to\n   encryption transforms that\
    \ work by generating a pseudorandom\n   keystream and bitwise exclusive-ORing\
    \ it with the plaintext, such as\n   CTR or f8.  It will not work with ECB, CBC,\
    \ or any other encryption\n   method that does not use a keystream.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document defines a new extension URI to the\
    \ RTP Compact Header\n   Extensions subregistry of the Real-Time Transport Protocol\
    \ (RTP)\n   Parameters registry, according to the following data:\n      Extension\
    \ URI:  urn:ietf:params:rtp-hdrext:encrypt\n      Description:    Encrypted header\
    \ extension element\n      Contact:        jonathan@vidyo.com\n      Reference:\
    \      RFC 6904\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Thanks to Benoit Claise, Roni Even, Stephen Farrell,\
    \ Kevin Igoe, Joel\n   Jaeggli, David McGrew, David Singer, Robert Sparks, Magnus\n\
    \   Westerlund, Qin Wu, and Felix Wyss for their comments and suggestions\n  \
    \ in the development of this specification.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n  \
    \            Jacobson, \"RTP: A Transport Protocol for Real-Time\n           \
    \   Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3711]  Baugher, M., McGrew,\
    \ D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time\
    \ Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5285]  Singer, D. and H. Desineni,\
    \ \"A General Mechanism for RTP\n              Header Extensions\", RFC 5285,\
    \ July 2008.\n   [RFC5669]  Yoon, S., Kim, J., Park, H., Jeong, H., and Y. Won,\
    \ \"The\n              SEED Cipher Algorithm and Its Use with the Secure Real-\n\
    \              Time Transport Protocol (SRTP)\", RFC 5669, August 2010.\n   [RFC6188]\
    \  McGrew, D., \"The Use of AES-192 and AES-256 in Secure\n              RTP\"\
    , RFC 6188, March 2011.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC4568]  Andreasen, F., Baugher, M., and D.\
    \ Wing, \"Session\n              Description Protocol (SDP) Security Descriptions\
    \ for Media\n              Streams\", RFC 4568, July 2006.\n   [RFC5450]  Singer,\
    \ D. and H. Desineni, \"Transmission Time Offsets in\n              RTP Streams\"\
    , RFC 5450, March 2009.\n   [RFC5484]  Singer, D., \"Associating Time-Codes with\
    \ RTP Streams\", RFC\n              5484, March 2009.\n   [RFC6051]  Perkins,\
    \ C. and T. Schierl, \"Rapid Synchronisation of RTP\n              Flows\", RFC\
    \ 6051, November 2010.\n   [RFC6464]  Lennox, J., Ivov, E., and E. Marocco, \"\
    A Real-time\n              Transport Protocol (RTP) Header Extension for Client-to-\n\
    \              Mixer Audio Level Indication\", RFC 6464, December 2011.\n   [RFC6465]\
    \  Ivov, E., Marocco, E., and J. Lennox, \"A Real-time\n              Transport\
    \ Protocol (RTP) Header Extension for Mixer-to-\n              Client Audio Level\
    \ Indication\", RFC 6465, December 2011.\n"
- title: Appendix A.  Test Vectors
  contents:
  - 'Appendix A.  Test Vectors

    '
- title: A.1.  Key Derivation Test Vectors
  contents:
  - "A.1.  Key Derivation Test Vectors\n   This section provides test data for the\
    \ header extension key\n   derivation function, using AES-128 in Counter Mode.\
    \  (The algorithms\n   and keys used are the same as those for the test vectors\
    \ in Appendix\n   B.3 of [RFC3711].)\n   The inputs to the key derivation function\
    \ are the 16-octet master key\n   and the 14-octet master salt:\n      master\
    \ key: E1F97A0D3E018BE0D64FA32C06DE4139\n      master salt: 0EC675AD498AFEEBB6960B3AABE6\n\
    \   Following [RFC3711], the input block for AES-CM is generated by\n   exclusive-ORing\
    \ the master salt with the concatenation of the\n   encryption key label 0x06\
    \ with (index DIV kdr), then padding on the\n   right with two null octets, which\
    \ implements the multiply-by-2^16\n   operation (see Section 4.3.3 of [RFC3711]).\
    \  The resulting value is\n   then AES-CM-encrypted using the master key to get\
    \ the cipher key.\n     index DIV kdr:                    000000000000\n     label:\
    \                          06\n     master salt:      0EC675AD498AFEEBB6960B3AABE6\n\
    \     --------------------------------------------------\n     XOR:          \
    \    0EC675AD498AFEEDB6960B3AABE6     (x, PRF input)\n     x*2^16:           0EC675AD498AFEEDB6960B3AABE60000\
    \ (AES-CM input)\n     hdr. cipher key:  549752054D6FB708622C4A2E596A1B93 (AES-CM\
    \ output)\n   Next, we show how the cipher salt is generated.  The input block\
    \ for\n   AES-CM is generated by exclusive-ORing the master salt with the\n  \
    \ concatenation of the encryption salt label.  That value is padded and\n   encrypted\
    \ as above.\n     index DIV kdr:                    000000000000\n     label:\
    \                          07\n     master salt:      0EC675AD498AFEEBB6960B3AABE6\n\
    \     --------------------------------------------------\n     XOR:          \
    \    0EC675AD498AFEECB6960B3AABE6     (x, PRF input)\n     x*2^16:           0EC675AD498AFEECB6960B3AABE60000\
    \ (AES-CM input)\n                       AB01818174C40D39A3781F7C2D270733 (AES-CM\
    \ ouptut)\n     hdr. cipher salt: AB01818174C40D39A3781F7C2D27\n"
- title: A.2.  Header Encryption Test Vectors Using AES-CM
  contents:
  - "A.2.  Header Encryption Test Vectors Using AES-CM\n   This section provides test\
    \ vectors for the encryption of a header\n   extension using the AES_CM cryptographic\
    \ transform.\n   The header extension is encrypted using the header cipher key\
    \ and\n   header cipher salt computed in Appendix A.1.  The header extension is\n\
    \   carried in an SRTP-encrypted RTP packet with SSRC 0xCAFEBABE,\n   sequence\
    \ number 0x1234, and an all-zero rollover counter.\n       Session Key:      549752054D6FB708622C4A2E596A1B93\n\
    \       Session Salt:     AB01818174C40D39A3781F7C2D27\n       SSRC:         \
    \            CAFEBABE\n       Rollover Counter:                 00000000\n   \
    \    Sequence Number:                          1234\n       ----------------------------------------------\n\
    \       Init. Counter:    AB018181BE3AB787A3781F7C3F130000\n   The SRTP session\
    \ was negotiated to indicate that header extension ID\n   values 1, 3, and 4 are\
    \ encrypted.\n   In hexadecimal, the header extension being encrypted is as follows\n\
    \   (spaces have been added to show the internal structure of the header\n   extension):\n\
    \     17 414273A475262748 22 0000C8 30 8E 46 55996386B395FB 00\n   This header\
    \ extension is 24 bytes long.  (Its values are intended to\n   represent plausible\
    \ values of the header extension elements shown in\n   Section 3.1, but their\
    \ specific meaning is not important for the\n   example.)  The header extension\
    \ \"defined by profile\" and \"length\"\n   fields, which in this case are BEDE\
    \ 0006 in hexadecimal, are not\n   included in the encryption process.\n   In\
    \ hexadecimal, the corresponding encryption mask selecting the\n   bodies of header\
    \ extensions 1, 2, and 4 (corresponding to the mask in\n   Figure 2) is:\n   \
    \   00 FFFFFFFFFFFFFFFF 00 000000 00 FF 00 FFFFFFFFFFFFFF 00\n   Finally, we compute\
    \ the keystream from the session key and the\n   initial counter, apply the mask\
    \ to the keystream, and then exclusive-\n   OR the keystream with the plaintext:\n\
    \       Initial keystream:  1E19C8E1D481C779549ED1617AAA1B7A\n               \
    \            FC0D933AE7ED6CC8\n       Mask (hex):         00FFFFFFFFFFFFFFFF0000000000FF00\n\
    \                           FFFFFFFFFFFFFF00\n       Masked keystream:   0019C8E1D481C7795400000000001B00\n\
    \                           FC0D933AE7ED6C00\n       Plaintext:          17414273A475262748220000C8308E46\n\
    \                           55996386B395FB00\n       Ciphertext:         17588A9270F4E15E1C220000C8309546\n\
    \                           A994F0BC54789700\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jonathan Lennox\n   Vidyo, Inc.\n   433 Hackensack Avenue\n\
    \   Seventh Floor\n   Hackensack, NJ  07601\n   US\n   EMail: jonathan@vidyo.com\n"
