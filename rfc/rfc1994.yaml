- contents:
  - '         PPP Challenge Handshake Authentication Protocol (CHAP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method
    for\n   transporting multi-protocol datagrams over point-to-point links.\n   PPP
    also defines an extensible Link Control Protocol, which allows\n   negotiation
    of an Authentication Protocol for authenticating its peer\n   before allowing
    Network Layer protocols to transmit over the link.\n   This document defines a
    method for Authentication using PPP, which\n   uses a random Challenge, with a
    cryptographically hashed Response\n   which depends upon the Challenge and a secret
    key.\n"
  title: Abstract
- contents:
  - "Table of Contents\n     1.     Introduction ..........................................
    \   1\n        1.1       Specification of Requirements ...................    1\n
    \       1.2       Terminology .....................................    2\n     2.
    \    Challenge-Handshake Authentication Protocol ...........    2\n        2.1
    \      Advantages ......................................    3\n        2.2       Disadvantages
    ...................................    3\n        2.3       Design Requirements
    .............................    4\n     3.     Configuration Option Format ...........................
    \   5\n     4.     Packet Format .........................................    6\n
    \       4.1       Challenge and Response ..........................    7\n        4.2
    \      Success and Failure .............................    9\n     SECURITY CONSIDERATIONS
    ......................................   10\n     ACKNOWLEDGEMENTS .............................................
    \  11\n     REFERENCES ...................................................   12\n
    \    CONTACTS .....................................................   12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In order to establish communications over a point-to-point
    link, each\n   end of the PPP link must first send LCP packets to configure the
    data\n   link during Link Establishment phase.  After the link has been\n   established,
    PPP provides for an optional Authentication phase before\n   proceeding to the
    Network-Layer Protocol phase.\n   By default, authentication is not mandatory.
    \ If authentication of\n   the link is desired, an implementation MUST specify
    the\n   Authentication-Protocol Configuration Option during Link\n   Establishment
    phase.\n   These authentication protocols are intended for use primarily by\n
    \  hosts and routers that connect to a PPP network server via switched\n   circuits
    or dial-up lines, but might be applied to dedicated links as\n   well.  The server
    can use the identification of the connecting host\n   or router in the selection
    of options for network layer negotiations.\n   This document defines a PPP authentication
    protocol.  The Link\n   Establishment and Authentication phases, and the Authentication-\n
    \  Protocol Configuration Option, are defined in The Point-to-Point\n   Protocol
    (PPP) [1].\n"
  - contents:
    - "1.1.  Specification of Requirements\n   In this document, several words are
      used to signify the requirements\n   of the specification.  These words are
      often capitalized.\n   MUST      This word, or the adjective \"required\", means
      that the\n             definition is an absolute requirement of the specification.\n
      \  MUST NOT  This phrase means that the definition is an absolute\n             prohibition
      of the specification.\n   SHOULD    This word, or the adjective \"recommended\",
      means that there\n             may exist valid reasons in particular circumstances
      to\n             ignore this item, but the full implications must be\n             understood
      and carefully weighed before choosing a\n             different course.\n   MAY
      \      This word, or the adjective \"optional\", means that this\n             item
      is one of an allowed set of alternatives.  An\n             implementation which
      does not include this option MUST be\n             prepared to interoperate
      with another implementation which\n             does include the option.\n"
    title: 1.1.  Specification of Requirements
  - contents:
    - "1.2.  Terminology\n   This document frequently uses the following terms:\n
      \  authenticator\n             The end of the link requiring the authentication.
      \ The\n             authenticator specifies the authentication protocol to be\n
      \            used in the Configure-Request during Link Establishment\n             phase.\n
      \  peer      The other end of the point-to-point link; the end which is\n             being
      authenticated by the authenticator.\n   silently discard\n             This
      means the implementation discards the packet without\n             further processing.
      \ The implementation SHOULD provide the\n             capability of logging
      the error, including the contents of\n             the silently discarded packet,
      and SHOULD record the event\n             in a statistics counter.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Challenge-Handshake Authentication Protocol\n   The Challenge-Handshake Authentication
    Protocol (CHAP) is used to\n   periodically verify the identity of the peer using
    a 3-way handshake.\n   This is done upon initial link establishment, and MAY be
    repeated\n   anytime after the link has been established.\n   1.    After the
    Link Establishment phase is complete, the\n         authenticator sends a \"challenge\"
    message to the peer.\n   2.    The peer responds with a value calculated using
    a \"one-way\n         hash\" function.\n   3.    The authenticator checks the
    response against its own\n         calculation of the expected hash value.  If
    the values match,\n         the authentication is acknowledged; otherwise the
    connection\n         SHOULD be terminated.\n   4.    At random intervals, the
    authenticator sends a new challenge to\n         the peer, and repeats steps 1
    to 3.\n"
  - contents:
    - "2.1.  Advantages\n   CHAP provides protection against playback attack by the
      peer through\n   the use of an incrementally changing identifier and a variable\n
      \  challenge value.  The use of repeated challenges is intended to limit\n   the
      time of exposure to any single attack.  The authenticator is in\n   control
      of the frequency and timing of the challenges.\n   This authentication method
      depends upon a \"secret\" known only to the\n   authenticator and that peer.
      \ The secret is not sent over the link.\n   Although the authentication is only
      one-way, by negotiating CHAP in\n   both directions the same secret set may
      easily be used for mutual\n   authentication.\n   Since CHAP may be used to
      authenticate many different systems, name\n   fields may be used as an index
      to locate the proper secret in a large\n   table of secrets.  This also makes
      it possible to support more than\n   one name/secret pair per system, and to
      change the secret in use at\n   any time during the session.\n"
    title: 2.1.  Advantages
  - contents:
    - "2.2.  Disadvantages\n   CHAP requires that the secret be available in plaintext
      form.\n   Irreversably encrypted password databases commonly available cannot\n
      \  be used.\n   It is not as useful for large installations, since every possible\n
      \  secret is maintained at both ends of the link.\n      Implementation Note:
      To avoid sending the secret over other links\n      in the network, it is recommended
      that the challenge and response\n      values be examined at a central server,
      rather than each network\n      access server.  Otherwise, the secret SHOULD
      be sent to such\n      servers in a reversably encrypted form.  Either case
      requires a\n      trusted relationship, which is outside the scope of this\n
      \     specification.\n"
    title: 2.2.  Disadvantages
  - contents:
    - "2.3.  Design Requirements\n   The CHAP algorithm requires that the length of
      the secret MUST be at\n   least 1 octet.  The secret SHOULD be at least as large
      and\n   unguessable as a well-chosen password.  It is preferred that the\n   secret
      be at least the length of the hash value for the hashing\n   algorithm chosen
      (16 octets for MD5).  This is to ensure a\n   sufficiently large range for the
      secret to provide protection against\n   exhaustive search attacks.\n   The
      one-way hash algorithm is chosen such that it is computationally\n   infeasible
      to determine the secret from the known challenge and\n   response values.\n
      \  Each challenge value SHOULD be unique, since repetition of a\n   challenge
      value in conjunction with the same secret would permit an\n   attacker to reply
      with a previously intercepted response.  Since it\n   is expected that the same
      secret MAY be used to authenticate with\n   servers in disparate geographic
      regions, the challenge SHOULD exhibit\n   global and temporal uniqueness.\n
      \  Each challenge value SHOULD also be unpredictable, least an attacker\n   trick
      a peer into responding to a predicted future challenge, and\n   then use the
      response to masquerade as that peer to an authenticator.\n   Although protocols
      such as CHAP are incapable of protecting against\n   realtime active wiretapping
      attacks, generation of unique\n   unpredictable challenges can protect against
      a wide range of active\n   attacks.\n   A discussion of sources of uniqueness
      and probability of divergence\n   is included in the Magic-Number Configuration
      Option [1].\n"
    title: 2.3.  Design Requirements
  title: 2.  Challenge-Handshake Authentication Protocol
- contents:
  - "3.  Configuration Option Format\n   A summary of the Authentication-Protocol
    Configuration Option format\n   to negotiate the Challenge-Handshake Authentication
    Protocol is shown\n   below.  The fields are transmitted from left to right.\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type
    \     |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |   Algorithm   |\n   +-+-+-+-+-+-+-+-+\n   Type\n      3\n   Length\n      5\n
    \  Authentication-Protocol\n      c223 (hex) for Challenge-Handshake Authentication
    Protocol.\n   Algorithm\n      The Algorithm field is one octet and indicates
    the authentication\n      method to be used.  Up-to-date values are specified
    in the most\n      recent \"Assigned Numbers\" [2].  One value is required to
    be\n      implemented:\n         5       CHAP with MD5 [3]\n"
  title: 3.  Configuration Option Format
- contents:
  - "4.  Packet Format\n   Exactly one Challenge-Handshake Authentication Protocol
    packet is\n   encapsulated in the Information field of a PPP Data Link Layer frame\n
    \  where the protocol field indicates type hex c223 (Challenge-Handshake\n   Authentication
    Protocol).  A summary of the CHAP packet format is\n   shown below.  The fields
    are transmitted from left to right.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and
    identifies the type of CHAP\n      packet.  CHAP Codes are assigned as follows:\n
    \        1       Challenge\n         2       Response\n         3       Success\n
    \        4       Failure\n   Identifier\n      The Identifier field is one octet
    and aids in matching challenges,\n      responses and replies.\n   Length\n      The
    Length field is two octets and indicates the length of the\n      CHAP packet
    including the Code, Identifier, Length and Data\n      fields.  Octets outside
    the range of the Length field should be\n      treated as Data Link Layer padding
    and should be ignored on\n      reception.\n   Data\n      The Data field is zero
    or more octets.  The format of the Data\n      field is determined by the Code
    field.\n"
  - contents:
    - "4.1.  Challenge and Response\n   Description\n      The Challenge packet is
      used to begin the Challenge-Handshake\n      Authentication Protocol.  The authenticator
      MUST transmit a CHAP\n      packet with the Code field set to 1 (Challenge).
      \ Additional\n      Challenge packets MUST be sent until a valid Response packet
      is\n      received, or an optional retry counter expires.\n      A Challenge
      packet MAY also be transmitted at any time during the\n      Network-Layer Protocol
      phase to ensure that the connection has not\n      been altered.\n      The
      peer SHOULD expect Challenge packets during the Authentication\n      phase
      and the Network-Layer Protocol phase.  Whenever a Challenge\n      packet is
      received, the peer MUST transmit a CHAP packet with the\n      Code field set
      to 2 (Response).\n      Whenever a Response packet is received, the authenticator
      compares\n      the Response Value with its own calculation of the expected
      value.\n      Based on this comparison, the authenticator MUST send a Success
      or\n      Failure packet (described below).\n         Implementation Notes:
      Because the Success might be lost, the\n         authenticator MUST allow repeated
      Response packets during the\n         Network-Layer Protocol phase after completing
      the\n         Authentication phase.  To prevent discovery of alternative\n         Names
      and Secrets, any Response packets received having the\n         current Challenge
      Identifier MUST return the same reply Code\n         previously returned for
      that specific Challenge (the message\n         portion MAY be different).  Any
      Response packets received\n         during any other phase MUST be silently
      discarded.\n         When the Failure is lost, and the authenticator terminates
      the\n         link, the LCP Terminate-Request and Terminate-Ack provide an\n
      \        alternative indication that authentication failed.\n   A summary of
      the Challenge and Response packet format is shown below.\n   The fields are
      transmitted from left to right.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Value-Size   |  Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Name ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Code\n      1 for Challenge;\n
      \     2 for Response.\n   Identifier\n      The Identifier field is one octet.
      \ The Identifier field MUST be\n      changed each time a Challenge is sent.\n
      \     The Response Identifier MUST be copied from the Identifier field\n      of
      the Challenge which caused the Response.\n   Value-Size\n      This field is
      one octet and indicates the length of the Value\n      field.\n   Value\n      The
      Value field is one or more octets.  The most significant octet\n      is transmitted
      first.\n      The Challenge Value is a variable stream of octets.  The\n      importance
      of the uniqueness of the Challenge Value and its\n      relationship to the
      secret is described above.  The Challenge\n      Value MUST be changed each
      time a Challenge is sent.  The length\n      of the Challenge Value depends
      upon the method used to generate\n      the octets, and is independent of the
      hash algorithm used.\n      The Response Value is the one-way hash calculated
      over a stream of\n      octets consisting of the Identifier, followed by (concatenated\n
      \     with) the \"secret\", followed by (concatenated with) the Challenge\n
      \     Value.  The length of the Response Value depends upon the hash\n      algorithm
      used (16 octets for MD5).\n   Name\n      The Name field is one or more octets
      representing the\n      identification of the system transmitting the packet.
      \ There are\n      no limitations on the content of this field.  For example,
      it MAY\n      contain ASCII character strings or globally unique identifiers
      in\n      ASN.1 syntax.  The Name should not be NUL or CR/LF terminated.\n      The
      size is determined from the Length field.\n"
    title: 4.1.  Challenge and Response
  - contents:
    - "4.2.  Success and Failure\n   Description\n      If the Value received in a
      Response is equal to the expected\n      value, then the implementation MUST
      transmit a CHAP packet with\n      the Code field set to 3 (Success).\n      If
      the Value received in a Response is not equal to the expected\n      value,
      then the implementation MUST transmit a CHAP packet with\n      the Code field
      set to 4 (Failure), and SHOULD take action to\n      terminate the link.\n   A
      summary of the Success and Failure packet format is shown below.\n   The fields
      are transmitted from left to right.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Message  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      3 for Success;\n
      \     4 for Failure.\n   Identifier\n      The Identifier field is one octet
      and aids in matching requests\n      and replies.  The Identifier field MUST
      be copied from the\n      Identifier field of the Response which caused this
      reply.\n   Message\n      The Message field is zero or more octets, and its
      contents are\n      implementation dependent.  It is intended to be human readable,\n
      \     and MUST NOT affect operation of the protocol.  It is recommended\n      that
      the message contain displayable ASCII characters 32 through\n      126 decimal.
      \ Mechanisms for extension to other character sets are\n      the topic of future
      research.  The size is determined from the\n      Length field.\n"
    title: 4.2.  Success and Failure
  title: 4.  Packet Format
- contents:
  - "Security Considerations\n   Security issues are the primary topic of this RFC.\n
    \  The interaction of the authentication protocols within PPP are highly\n   implementation
    dependent.  This is indicated by the use of SHOULD\n   throughout the document.\n
    \  For example, upon failure of authentication, some implementations do\n   not
    terminate the link.  Instead, the implementation limits the kind\n   of traffic
    in the Network-Layer Protocols to a filtered subset, which\n   in turn allows
    the user opportunity to update secrets or send mail to\n   the network administrator
    indicating a problem.\n   There is no provision for re-tries of failed authentication.\n
    \  However, the LCP state machine can renegotiate the authentication\n   protocol
    at any time, thus allowing a new attempt.  It is recommended\n   that any counters
    used for authentication failure not be reset until\n   after successful authentication,
    or subsequent termination of the\n   failed link.\n   There is no requirement
    that authentication be full duplex or that\n   the same protocol be used in both
    directions.  It is perfectly\n   acceptable for different protocols to be used
    in each direction.\n   This will, of course, depend on the specific protocols
    negotiated.\n   The secret SHOULD NOT be the same in both directions.  This allows
    an\n   attacker to replay the peer's challenge, accept the computed\n   response,
    and use that response to authenticate.\n   In practice, within or associated with
    each PPP server, there is a\n   database which associates \"user\" names with
    authentication\n   information (\"secrets\").  It is not anticipated that a particular\n
    \  named user would be authenticated by multiple methods.  This would\n   make
    the user vulnerable to attacks which negotiate the least secure\n   method from
    among a set (such as PAP rather than CHAP).  If the same\n   secret was used,
    PAP would reveal the secret to be used later with\n   CHAP.\n   Instead, for each
    user name there should be an indication of exactly\n   one method used to authenticate
    that user name.  If a user needs to\n   make use of different authentication methods
    under different\n   circumstances, then distinct user names SHOULD be employed,
    each of\n   which identifies exactly one authentication method.\n   Passwords
    and other secrets should be stored at the respective ends\n   such that access
    to them is as limited as possible.  Ideally, the\n   secrets should only be accessible
    to the process requiring access in\n   order to perform the authentication.\n
    \  The secrets should be distributed with a mechanism that limits the\n   number
    of entities that handle (and thus gain knowledge of) the\n   secret.  Ideally,
    no unauthorized person should ever gain knowledge\n   of the secrets.  Such a
    mechanism is outside the scope of this\n   specification.\n"
  title: Security Considerations
- contents:
  - "Acknowledgements\n   David Kaufman, Frank Heinrich, and Karl Auerbach used a
    challenge\n   handshake at SDC when designing one of the protocols for a \"secure\"\n
    \  network in the mid-1970s.  Tom Bearson built a prototype Sytek\n   product
    (\"Poloneous\"?) on the challenge-response notion in the 1982-\n   83 timeframe.
    \ Another variant is documented in the various IBM SNA\n   manuals.  Yet another
    variant was implemented by Karl Auerbach in the\n   Telebit NetBlazer circa 1991.\n
    \  Kim Toms and Barney Wolff provided useful critiques of earlier\n   versions
    of this document.\n   Special thanks to Dave Balenson, Steve Crocker, James Galvin,
    and\n   Steve Kent, for their extensive explanations and suggestions.  Now,\n
    \  if only we could get them to agree with each other.\n"
  title: Acknowledgements
- contents:
  - "References\n   [1]   Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\",
    STD\n         51, RFC 1661, DayDreamer, July 1994.\n   [2]   Reynolds, J., and
    J. Postel, \"Assigned Numbers\", STD 2, RFC\n         1700, USC/Information Sciences
    Institute, October 1994.\n   [3]   Rivest, R., and S. Dusse, \"The MD5 Message-Digest
    Algorithm\",\n         MIT Laboratory for Computer Science and RSA Data Security,\n
    \        Inc., RFC 1321, April 1992.\n"
  title: References
- contents:
  - "Contacts\n   Comments should be submitted to the ietf-ppp@merit.edu mailing list.\n
    \  This document was reviewed by the Point-to-Point Protocol Working\n   Group
    of the Internet Engineering Task Force (IETF).  The working\n   group can be contacted
    via the current chair:\n      Karl Fox\n      Ascend Communications\n      3518
    Riverside Drive, Suite 101\n      Columbus, Ohio 43221\n          karl@MorningStar.com\n
    \         karl@Ascend.com\n   Questions about this memo can also be directed to:\n
    \     William Allen Simpson\n      DayDreamer\n      Computer Systems Consulting
    Services\n      1384 Fontaine\n      Madison Heights, Michigan  48071\n          wsimpson@UMich.edu\n
    \         wsimpson@GreenDragon.com (preferred)\n"
  title: Contacts
