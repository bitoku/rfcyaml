Abstract The Secure Sockets Layer version 3.0 (SSLv3), as specified in RFC 6101, is not sufficiently secure.
This document requires that SSLv3 not be used.
The replacement versions, in particular, Transport Layer Security (TLS) 1.2 (RFC 5246), are considerably more secure and capable protocols.
This document updates the backward compatibility section of RFC 5246 and its predecessors to prohibit fallback to SSLv3. 1.
Introduction Since it was released in 1996, the SSLv3 protocol [RFC6101] has been subject to a long series of attacks, both on its key exchange mechanism and on the encryption schemes it supports.
Despite being replaced by TLS 1.0
[RFC2246] in 1999, and subsequently TLS 1.1 in 2002
[RFC4346] and 1.2 in 2006
[RFC5246], availability of these replacement versions has not been universal.
As a result, many implementations of TLS have permitted the negotiation of SSLv3.
The predecessor of SSLv3, SSL version 2, is no longer considered sufficiently secure [RFC6176].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Do Not Use SSL Version
3.0 SSLv3 MUST NOT be used.
Negotiation of SSLv3 from any version of TLS MUST NOT be permitted.
Any version of TLS is more secure than SSLv3, though the highest version available is preferable.
Pragmatically, clients MUST NOT send a ClientHello with ClientHello.client version set to {03,00}.
Similarly, servers MUST NOT send a ServerHello with ServerHello.server version set to {03,00}.
Any party receiving a Hello message with the protocol version set to {03,00} MUST respond with a "protocol version" alert message and close the connection.
Historically, TLS specifications were not clear on what the record layer version number (TLSPlaintext.version) could contain when sending ClientHello.
Appendix E of [RFC5246] notes that TLSPlaintext.version could be selected to maximize interoperability, though no definitive value is identified as ideal.
That guidance is still applicable; therefore, TLS servers MUST accept any value {03,XX} (including {03,00}) as the record layer version number for ClientHello, but they MUST NOT negotiate SSLv3. 4.
SSLv3 Is Comprehensively Broken 4.1.
The non deterministic padding used in the Cipher Block Chaining (CBC) construction of SSLv3 trivially permits the recovery of plaintext [POODLE].
More generally, the CBC modes of SSLv3 use a flawed MAC  then encrypt construction that has subsequently been replaced in TLS versions [RFC7366].
Unfortunately, the mechanism to correct this flaw relies on extensions:
a feature added in TLS 1.0.
SSLv3 cannot be updated to correct this flaw in the same way.
The flaws in the CBC modes in SSLv3 are mirrored by the weakness of the stream ciphers it defines.
Of those defined, only RC4 is currently in widespread use.
RC4, however, exhibits serious biases and is also no longer fit for use [RFC7465].
This leaves SSLv3 with no suitable record protection mechanism.
The SSLv3 key exchange is vulnerable to man in the middle attacks when renegotiation [RFC5746] or session resumption [TRIPLE HS] are used.
Each flaw has been fixed in TLS by means of extensions.
Again, SSLv3 cannot be updated to correct these flaws.
Custom Cryptographic Primitives SSLv3 defines custom constructions for Pseudorandom Function (PRF), Hashed Message Authentication Code (HMAC), and digital signature primitives.
Such constructions lack the deep cryptographic scrutiny that standard constructions used by TLS have received.
Furthermore, all SSLv3 primitives rely on SHA 1
: these hash algorithms are considered weak and are being systematically replaced with stronger hash functions, such as SHA 256 [FIPS180 4].
Limited Capabilities SSLv3 is unable to take advantage of the many features that have been added to recent TLS versions.
This includes the features that are enabled by ClientHello extensions, which SSLv3 does not support.
Though SSLv3 can benefit from new cipher suites, it cannot benefit from new cryptographic modes and features.
Of these, the following are particularly prominent:
Authenticated Encryption with Additional Data (AEAD) modes are added in [RFC5246].
Elliptic Curve Diffie Hellman (ECDH) and Digital Signature Algorithm (ECDSA) are added in [RFC4492].
A datagram mode of operation, DTLS [RFC6347].
Application layer protocol negotiation [RFC7301].
This entire document aims to improve security by prohibiting the use of a protocol that is not secure.
