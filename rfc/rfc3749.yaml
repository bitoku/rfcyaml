- contents:
  - '         Transport Layer Security Protocol Compression Methods

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Transport Layer Security (TLS) protocol (RFC 2246) includes\n
    \  features to negotiate selection of a lossless data compression method\n   as
    part of the TLS Handshake Protocol and to then apply the algorithm\n   associated
    with the selected method as part of the TLS Record\n   Protocol.  TLS defines
    one standard compression method which\n   specifies that data exchanged via the
    record protocol will not be\n   compressed.  This document describes an additional
    compression method\n   associated with a lossless data compression algorithm for
    use with\n   TLS, and it describes a method for the specification of additional\n
    \  TLS compression methods.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Compression Methods  . . . . . . . . . . . . . . . . .
    . . . .  2\n       2.1.  DEFLATE Compression. . . . . . . . . . . . . . . . .
    . .  3\n   3.  Compression History and Packet Processing  . . . . . . . . . .
    \ 4\n   4.  Internationalization Considerations  . . . . . . . . . . . . .  4\n
    \  5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . .  4\n   6.
    \ Security Considerations  . . . . . . . . . . . . . . . . . . .  5\n   7.  Acknowledgements
    . . . . . . . . . . . . . . . . . . . . . . .  6\n   8.  References . . . . .
    . . . . . . . . . . . . . . . . . . . . .  6\n       8.1.  Normative References
    . . . . . . . . . . . . . . . . . .  6\n       8.2.  Informative References .
    . . . . . . . . . . . . . . . .  6\n       Author's Address . . . . . . . . .
    . . . . . . . . . . . . . .  7\n       Full Copyright Statement . . . . . . .
    . . . . . . . . . . . .  8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Transport Layer Security (TLS) protocol (RFC 2246, [2])
    includes\n   features to negotiate selection of a lossless data compression method\n
    \  as part of the TLS Handshake Protocol and to then apply the algorithm\n   associated
    with the selected method as part of the TLS Record\n   Protocol.  TLS defines
    one standard compression method,\n   CompressionMethod.null, which specifies that
    data exchanged via the\n   record protocol will not be compressed.  While this
    single\n   compression method helps ensure that TLS implementations are\n   interoperable,
    the lack of additional standard compression methods\n   has limited the ability
    of implementers to develop interoperable\n   implementations that include data
    compression.\n   TLS is used extensively to secure client-server connections on
    the\n   World Wide Web.  While these connections can often be characterized\n
    \  as short-lived and exchanging relatively small amounts of data, TLS\n   is
    also being used in environments where connections can be long-\n   lived and the
    amount of data exchanged can extend into thousands or\n   millions of octets.
    \ XML [4], for example, is increasingly being used\n   as a data representation
    method on the Internet, and XML tends to be\n   verbose.  Compression within TLS
    is one way to help reduce the\n   bandwidth and latency requirements associated
    with exchanging large\n   amounts of data while preserving the security services
    provided by\n   TLS.\n   This document describes an additional compression method
    associated\n   with a lossless data compression algorithm for use with TLS.\n
    \  Standardization of the compressed data formats and compression\n   algorithms
    associated with this compression method is beyond the\n   scope of this document.\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in RFC 2119 [1].\n"
  title: 1.  Introduction
- contents:
  - "2.  Compression Methods\n   TLS [2] includes the following compression method
    structure in\n   sections 6.1 and 7.4.1.2 and Appendix sections A.4.1 and A.6:\n
    \  enum { null(0), (255) } CompressionMethod;\n   which allows for later specification
    of up to 256 different\n   compression methods.  This definition is updated to
    segregate the\n   range of allowable values into three zones:\n   1. Values from
    0 (zero) through 63 decimal (0x3F) inclusive are\n      reserved for IETF Standards
    Track protocols.\n   2. Values from 64 decimal (0x40) through 223 decimal (0xDF)
    inclusive\n      are reserved for assignment for non-Standards Track methods.\n
    \  3. Values from 224 decimal (0xE0) through 255 decimal (0xFF)\n      inclusive
    are reserved for private use.\n   Additional information describing the role of
    the IANA in the\n   allocation of compression method identifiers is described
    in Section\n   5.\n   In addition, this definition is updated to include assignment
    of an\n   identifier for the DEFLATE compression method:\n   enum { null(0), DEFLATE(1),
    (255) } CompressionMethod;\n   As described in section 6 of RFC 2246 [2], TLS
    is a stateful\n   protocol.  Compression methods used with TLS can be either stateful\n
    \  (the compressor maintains its state through all compressed records)\n   or
    stateless (the compressor compresses each record independently),\n   but there
    seems to be little known benefit in using a stateless\n   compression method within
    TLS.\n   The DEFLATE compression method described in this document is\n   stateful.
    \ It is RECOMMENDED that other compression methods that\n   might be standardized
    in the future be stateful as well.\n   Compression algorithms can occasionally
    expand, rather than compress,\n   input data.  A compression method that exceeds
    the expansion limits\n   described in section 6.2.2 of RFC 2246 [2] MUST NOT be
    used with TLS.\n"
  - contents:
    - "2.1.  DEFLATE Compression\n   The DEFLATE compression method and encoding format
      is described in\n   RFC 1951 [5].  Examples of DEFLATE use in IETF protocols
      can be found\n   in RFC 1979 [6], RFC 2394 [7], and RFC 3274 [8].\n   DEFLATE
      allows the sending compressor to select from among several\n   options to provide
      varying compression ratios, processing speeds, and\n   memory requirements.
      \ The receiving decompressor MUST automatically\n   adjust to the parameters
      selected by the sender.  All data that was\n   submitted for compression MUST
      be included in the compressed output,\n   with no data retained to be included
      in a later output payload.\n   Flushing ensures that each compressed packet
      payload can be\n   decompressed completely.\n"
    title: 2.1.  DEFLATE Compression
  title: 2.  Compression Methods
- contents:
  - "3.  Compression History and Packet Processing\n   Some compression methods have
    the ability to maintain state/history\n   information when compressing and decompressing
    packet payloads.  The\n   compression history allows a higher compression ratio
    to be achieved\n   on a stream as compared to per-packet compression, but maintaining
    a\n   history across packets implies that a packet might contain data\n   needed
    to completely decompress data contained in a different packet.\n   History maintenance
    thus requires both a reliable link and sequenced\n   packet delivery.  Since TLS
    and lower-layer protocols provide\n   reliable, sequenced packet delivery, compression
    history information\n   MAY be maintained and exploited if supported by the compression\n
    \  method.\n   As described in section 7 of RFC 2246 [2], TLS allows multiple\n
    \  connections to be instantiated using the same session through the\n   resumption
    feature of the TLS Handshake Protocol.  Session resumption\n   has operational
    implications when multiple compression methods are\n   available for use within
    the session.  For example, load balancers\n   will need to maintain additional
    state information if the compression\n   state is not cleared when a session is
    resumed.  As a result, the\n   following restrictions MUST be observed when resuming
    a session:\n   1.  The compression algorithm MUST be retained when resuming a\n
    \      session.\n   2.  The compression state/history MUST be cleared when resuming
    a\n       session.\n"
  title: 3.  Compression History and Packet Processing
- contents:
  - "4.  Internationalization Considerations\n   The compression method identifiers
    specified in this document are\n   machine-readable numbers.  As such, issues
    of human\n   internationalization and localization are not introduced.\n"
  title: 4.  Internationalization Considerations
- contents:
  - "5.  IANA Considerations\n   Section 2 of this document describes a registry of
    compression method\n   identifiers to be maintained by the IANA, including assignment
    of an\n   identifier for the DEFLATE compression method.  Identifier values\n
    \  from the range 0-63 (decimal) inclusive are assigned via RFC 2434\n   Standards
    Action [3].  Values from the range 64-223 (decimal)\n   inclusive are assigned
    via RFC 2434 Specification Required [3].\n   Identifier values from 224-255 (decimal)
    inclusive are reserved for\n   RFC 2434 Private Use [3].\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   This document does not introduce any topics that
    alter the threat\n   model addressed by TLS.  The security considerations described\n
    \  throughout RFC 2246 [2] apply here as well.\n   However, combining compression
    with encryption can sometimes reveal\n   information that would not have been
    revealed without compression:\n   data that is the same length before compression
    might be a different\n   length after compression, so adversaries that observe
    the length of\n   the compressed data might be able to derive information about
    the\n   corresponding uncompressed data.  Some symmetric encryption\n   ciphersuites
    do not hide the length of symmetrically encrypted data\n   at all.  Others hide
    it to some extent, but still do not hide it\n   fully.  For example, ciphersuites
    that use stream cipher encryption\n   without padding do not hide length at all;
    ciphersuites that use\n   Cipher Block Chaining (CBC) encryption with padding
    provide some\n   length hiding, depending on how the amount of padding is chosen.
    \ Use\n   of TLS compression SHOULD take into account that the length of\n   compressed
    data may leak more information than the length of the\n   original uncompressed
    data.\n   Compression algorithms tend to be mathematically complex and prone to\n
    \  implementation errors.  An implementation error that can produce a\n   buffer
    overrun introduces a potential security risk for programming\n   languages and
    operating systems that do not provide buffer overrun\n   protections.  Careful
    consideration should thus be given to\n   protections against implementation errors
    that introduce security\n   risks.\n   As described in Section 2, compression
    algorithms can occasionally\n   expand, rather than compress, input data.  This
    feature introduces\n   the ability to construct rogue data that expands to some
    enormous\n   size when compressed or decompressed.  RFC 2246 describes several\n
    \  methods to ameliorate this kind of attack.  First, compression has to\n   be
    lossless.  Second, a limit (1,024 bytes) is placed on the amount\n   of allowable
    compression content length increase.  Finally, a limit\n   (2^14 bytes) is placed
    on the total content length.  See section\n   6.2.2 of RFC 2246 [2] for complete
    details.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgements\n   The concepts described in this document were originally
    discussed on\n   the IETF TLS working group mailing list in December, 2000.  The\n
    \  author acknowledges the contributions to that discussion provided by\n   Jeffrey
    Altman, Eric Rescorla, and Marc Van Heyningen.  Later\n   suggestions that have
    been incorporated into this document were\n   provided by Tim Dierks, Pasi Eronen,
    Peter Gutmann, Elgin Lee, Nikos\n   Mavroyanopoulos, Alexey Melnikov, Bodo Moeller,
    Win Treese, and the\n   IESG.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
      \ Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\", RFC\n        2246,
      January 1999.\n   [3]  Narten, T. and H. Alvestrand, \"Guidelines for Writing
      an IANA\n        Considerations Section in RFCs\", BCP 26, RFC 2434, October
      1998.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [4]  Bray, T., Paoli, J., Sperberg-McQueen,
      C. and E. Maler,\n        \"Extensible Markup Language (XML) 1.0 (2nd ed)\",
      W3C REC-xml,\n        October 2000, <http://www.w3.org/TR/REC-xml>.\n   [5]
      \ Deutsch, P., \"DEFLATE Compressed Data Format Specification\n        version
      1.3\", RFC 1951, May 1996.\n   [6]  Woods, J., \"PPP Deflate Protocol\", RFC
      1979, August 1996.\n   [7]  Pereira, R., \"IP Payload Compression Using DEFLATE\",
      RFC 2394,\n        December 1998.\n   [8]  Gutmann, P., \"Compressed Data Content
      Type for Cryptographic\n        Message Syntax (CMS)\", RFC 3274, June 2002.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Author's Address\n   Scott Hollenbeck\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n
    \  Dulles, VA  20166-6503\n   US\n   EMail: shollenbeck@verisign.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
