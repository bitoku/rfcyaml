Abstract This specification describes the use of Hashed Message Authentication Mode (HMAC) in conjunction with the SHA 256, SHA 384, and SHA 512 algorithms in IPsec.
These algorithms may be used as the basis for data origin authentication and integrity verification mechanisms for the Authentication Header (AH), Encapsulating Security Payload (ESP), Internet Key Exchange Protocol (IKE), and IKEv2 protocols, and also as Pseudo Random Functions (PRFs) for IKE and IKEv2.
Truncated output lengths are specified for the authentication related variants, with the corresponding algorithms designated as HMAC SHA 256 128, HMAC SHA 384 192, and HMAC SHA 512 256.
The PRF variants are not truncated, and are called PRF HMAC SHA 256, PRF HMAC SHA 384, and PRF HMAC SHA 512.
This document specifies the use of SHA 256, SHA 384, and SHA 512
as data origin authentication and integrity verification mechanisms for the IPsec AH [AH], ESP [ESP], IKE [IKE], and IKEv2 [IKEv2] protocol.
Output truncation is specified for these variants, with the corresponding algorithms designated as HMAC SHA 256 128, HMAC SHA 384 192, and HMAC SHA 512  256.
These truncation lengths are chosen in accordance with the birthday bound for each algorithm.
This specification also describes untruncated variants of these algorithms as Pseudo Random Functions (PRFs) for use with IKE and IKEv2, and those algorithms are called PRF HMAC SHA 256, PRF HMAC  SHA 384, and PRF HMAC SHA 512.
For ease of reference, these PRF algorithms and the authentication variants described above are collectively referred to below as "the HMAC SHA 256  algorithms".
The goal of the PRF variants are to provide secure pseudo random functions suitable for generation of keying material and other protocol specific numeric quantities, while the goal of the authentication variants is to ensure that packets are authentic and cannot be modified in transit.
The relative security of HMAC SHA  256  when used in either case is dependent on the distribution scope and unpredictability of the associated secret key.
If the key is unpredictable and known only by the sender and recipient, these algorithms ensure that only parties holding an identical key can derive the associated values.
The HMAC SHA 256  Algorithms [SHA2 1] and [SHA2 2] describe the underlying SHA 256, SHA 384, and SHA 512 algorithms, while [HMAC] describes the HMAC algorithm.
The HMAC algorithm provides a framework for inserting various hashing algorithms such as SHA 256, and [SHA256 ] describes combined usage of these algorithms.
The following sections describe the various characteristics and requirements of the HMAC SHA 256  algorithms when used with IPsec.
Keying Material Requirements for keying material vary depending on whether the algorithm is functioning as a PRF or as an authentication/integrity mechanism.
In the case of authentication/integrity, key lengths are fixed according to the output length of the algorithm in use.
In the case of PRFs, key lengths are variable, but guidance is given to ensure interoperability.
These distinctions are described further below.
Before describing key requirements for each usage, it is important to clarify some terms we use below: Block size:  the size of the data block the underlying hash algorithm operates upon.
For SHA 256, this is 512 bits, for SHA 384 and SHA 512, this is 1024 bits.
Output length:  the size of the hash value produced by the underlying hash algorithm.
For SHA 256, this is 256 bits, for SHA 384
this is 384 bits, and for SHA 512, this is 512 bits.
Authenticator length:  the size of the "authenticator" in bits.
This only applies to authentication/integrity related algorithms, and refers to the bit length remaining after truncation.
In this specification, this is always half the output length of the underlying hash algorithm.
Data Origin Authentication and Integrity Verification Usage HMAC SHA 256  are secret key algorithms.
While no fixed key length is specified in [HMAC], this specification requires that when used as an integrity/authentication algorithm, a fixed key length equal to the output length of the hash functions MUST be supported, and key lengths other than the output length of the associated hash function MUST NOT be supported.
These key length restrictions are based in part on the recommendations in [HMAC] (key lengths less than the output length decrease security strength, and keys longer than the output length do not significantly increase security strength), and in part because allowing variable length keys for IPsec authenticator functions would create interoperability issues.
Usage IKE and IKEv2 use PRFs for generating keying material and for authentication of the IKE Security Association.
The IKEv2 specification differentiates between PRFs with fixed key sizes and those with variable key sizes, and so we give some special guidance for this below.
When a PRF described in this document is used with IKE or IKEv2, it is considered to have a variable key length, and keys are derived in the following ways (note that we simply reiterate that which is specified in [HMAC]):
If the length of the key is exactly the algorithm block size, use it as is.
If the key is shorter than the block size, lengthen it to exactly the block size by padding it on the right with zero bits.
However, note that [HMAC] strongly discourages a key length less than the output length.
Nonetheless, we describe handling of shorter lengths here in recognition of shorter lengths typically chosen for IKE or IKEv2
If the key is longer than the block size, shorten it by computing the corresponding hash algorithm output over the entire key value, and treat the resulting output value as your HMAC key.
Note that this will always result in a key that is less than the block size in length, and this key value will therefore require zero padding (as described above) prior to use.
Randomness and Key Strength [HMAC] discusses requirements for key material, including a requirement for strong randomness.
Therefore, a strong pseudo random function MUST be used to generate the required key for use with HMAC  SHA 256 .
At the time of this writing there are no published weak keys for use with any HMAC SHA 256  algorithms.
Key Distribution [ARCH] describes the general mechanism for obtaining keying material when multiple keys are required for a single SA (e.g., when an ESP SA requires a key for confidentiality and a key for authentication).
In order to provide data origin authentication and integrity verification, the key distribution mechanism must ensure that unique keys are allocated and that they are distributed only to the parties participating in the communication.
Currently, there are no practical attacks against the algorithms recommended here, and especially against the key sizes recommended here.
Putting this into perspective, this specification requires 256, 384, or 512 bit keys produced by a strong PRF for use as a MAC.
A brute force attack on such keys would take longer to mount than the universe has been in existence.
On the other hand, weak keys (e.g., dictionary words) would be dramatically less resistant to attack.
It is important to take these points, along with the specific threat model for your particular application and the current state of the art with respect to attacks on SHA 256, SHA 384, and SHA 512 into account when determining an appropriate upper bound for HMAC key lifetimes.
The HMAC SHA 256 algorithms operate on 512 bit blocks of data, while the HMAC SHA 384 and HMAC SHA 512 algorithms operate on 1024 bit blocks of data.
Padding requirements are specified in [SHA2 1] as part of the underlying SHA 256, SHA 384, and SHA 512 algorithms, so if you implement according to [SHA2 1], you do not need to add any additional padding as far as the HMAC SHA 256  algorithms specified here are concerned.
With regard to "implicit packet padding" as defined in [AH], no implicit packet padding is required.
The HMAC SHA 256  algorithms each produce an nnn bit value, where nnn corresponds to the output bit length of the algorithm, e.g., HMAC  SHA nnn.
For use as an authenticator, this nnn bit value can be truncated as described in [HMAC].
When used as a data origin authentication and integrity verification algorithm in ESP, AH, IKE, or IKEv2, a truncated value using the first nnn/2 bits   exactly half the algorithm output size   MUST be supported.
No other authenticator value lengths are supported by this specification.
Upon sending, the truncated value is stored within the authenticator field.
Upon receipt, the entire nnn bit value is computed and the first nnn/2 bits are compared to the value stored in the authenticator field, with the value of 'nnn' depending on the negotiated algorithm.
[HMAC] discusses potential security benefits resulting from truncation of the output MAC value, and in general, encourages HMAC users to perform MAC truncation.
In the context of IPsec, a truncation length of nnn/2 bits is selected because it corresponds to the birthday attack bound for each of the HMAC SHA 256  algorithms, and it simultaneously serves to minimize the additional bits on the wire resulting from use of this facility.
Using HMAC SHA 256  as PRFs in IKE
The PRF HMAC SHA 256 algorithm is identical to HMAC SHA 256 128, except that variable length keys are permitted, and the truncation step is NOT performed.
Likewise, the implementations of PRF HMAC  SHA 384 and PRF HMAC SHA 512 are identical to those of HMAC SHA 384  192 and HMAC SHA 512 256 respectively, except that again, variable  length keys are permitted, and truncation is NOT performed.
Interactions with the ESP, IKE, or IKEv2 Cipher Mechanisms
As of this writing, there are no known issues that preclude the use of the HMAC SHA 256  algorithms with any specific cipher algorithm.
HMAC SHA 256  Parameter Summary
The following table serves to summarize the various quantities associated with the HMAC SHA 256  algorithms.
In this table, "var" stands for "variable".
The following test cases include the key, the data, and the resulting authenticator, and/or PRF values for each algorithm.
The values of keys and data are either ASCII character strings (surrounded by double quotes) or hexadecimal numbers.
If a value is an ASCII character string, then the HMAC computation for the corresponding test case DOES NOT include the trailing null character ('\0') of the string.
The computed HMAC values are all hexadecimal numbers.
These test cases were borrowed from RFC 4231 [HMAC TEST].
For reference implementations of the underlying hash algorithms, see [SHA256 ].
Note that for testing purposes, PRF output is considered to be simply the untruncated algorithm output.
faea9ea9076ede7f4af152e8b2fa9cb6 PRF HMAC SHA 512   87aa7cdea5ef619d4ff0b4241a1d6cb0
("what do ya want ")
9c7ef464f5a01b47e42ec3736322445e 8e2240ca5e69e2c78b3239ecfab21649 PRF HMAC SHA 512
PRF HMAC SHA 256   773ea91e36800e46854db8ebd09181a7
2959098b3ef8c122d9635514ced565fe PRF HMAC SHA 384
0aa635d947ac9febe83ef4e55966144b 2a5ab39dc13814b94e3ab6e101a34f27 PRF HMAC SHA 512
PRF HMAC SHA 256   82558a389a443c0ea4cc819899f2083a
PRF HMAC SHA 512   b0ba465637458c6990e5a8c5f61d4af7 e576d97ff94b872de76f8050361ee3db a91ca5c11aa25eb4d679275cc5788063
a5f19741120c4f2de2adebeb10a298dd Test Case PRF 5:
72205468616e20426c6f636b2d53697a  ("r Than Block Siz
(" First") PRF HMAC SHA 256
60e431591ee0b67f0d8a26aacbf5b77f 8e0bc6213728c5140546040f0ee37f54 PRF HMAC SHA 384
PRF HMAC SHA 512   80b24263c7c1a3ebb71493c1dd7be8b4
") 73696e672061206c6172676572207468  ("sing a larger th")
("y and a larger t")
647320746f2062652068617368656420  ("ds to be hashed ")
("d by the HMAC al")
PRF HMAC SHA 256   9b09ffa71b942fcb27635fbcd5b0e944
a678cc31e799176d3860e6110c46523e PRF HMAC SHA 512
The following sections are test cases for HMAC SHA256 128, HMAC  SHA384 192, and HMAC SHA512 256.
PRF outputs are also included for convenience.
These test cases were generated using the SHA256  reference code provided in [SHA256 ].
SHA256 Authentication Test Vectors Test Case AUTH256 1:
ba0aa3f3d9ae3c1c7a3b1696a0b68cf7 HMAC SHA 256 128
("what do ya want ")
e549fe6ce9ed7fdc43191fbde45c30b0 HMAC SHA 256 128
2fced46f0846e7257bb156d3d7b30d3f HMAC SHA 256 128   372efcf9b40b35c2115b1346903d2ef4 2.7.2.2.
SHA384 Authentication Test Vectors Test Case AUTH384 1:
b6a8d5636f5c6a7224f9977dcf7ee6c7 fb6d0c48cbdee9737a959796489bddbc 4c5df61d5b3297b4fb68dab9f1b582c2 HMAC SHA
("what do ya want ")
PRF HMAC SHA 384   809f439be00274321d4a538652164b53
35914a18770f9443987054944b7c4b4a HMAC SHA 384 192   809f439be00274321d4a538652164b53
SHA512 Authentication Test Vectors Test Case
("what do ya want ")
PRF HMAC SHA 512   cb370917ae8a7ce28cfd1d8f4705d614
fa0ffb93466cfcceaae38c833b7dba38 HMAC SHA 512 256   cb370917ae8a7ce28cfd1d8f4705d614
b1ff68a1de45509fbe4da9a433922655 HMAC SHA 512 256   2ee7acd783624ca9398710f3ee05ae41
7eae4a2a2e660dc0e86b931d65503fd2 HMAC SHA 512 256
In a general sense, the security provided by the HMAC SHA 256  algorithms is based both upon the strength of the underlying hash algorithm, and upon the additional strength derived from the HMAC construct.
At the time of this writing, there are no practical cryptographic attacks against SHA 256, SHA 384, SHA 512, or HMAC.
However, as with any cryptographic algorithm, an important component of these algorithms' strength lies in the correctness of the algorithm implementation, the security of the key management mechanism, the strength of the associated secret key, and upon the correctness of the implementation in all of the participating systems.
This specification contains test vectors to assist in verifying the correctness of the algorithm implementation, but these in no way verify the correctness (or security) of the surrounding security infrastructure.
HMAC Key Length vs Truncation Length
There are important differences between the security levels afforded by HMAC SHA1 96 [HMAC SHA1] and the HMAC SHA 256  algorithms, but there are also considerations that are somewhat counter intuitive.
There are two different axes along which we gauge the security of these algorithms:
HMAC output length and HMAC key length.
If we assume the HMAC key is a well guarded secret that can only be determined through offline attacks on observed values, and that its length is less than or equal to the output length of the underlying hash algorithm, then the key's strength is directly proportional to its length.
And if we assume an adversary has no knowledge of the HMAC key, then the probability of guessing a correct MAC value for any given packet is directly proportional to the HMAC output length.
This specification defines truncation to output lengths of either 128 192, or 256 bits.
It is important to note that at this time, it is not clear that HMAC SHA 256 with a truncation length of 128 bits
is any more secure than HMAC SHA1 with the same truncation length, assuming the adversary has no knowledge of the HMAC key.
This is because in such cases, the adversary must predict only those bits that remain after truncation.
Since in both cases that output length is the same (128 bits), the adversary's odds of correctly guessing the value are also the same in either case: 1 in 2^128.
Again, if we assume the HMAC key remains unknown to the attacker, then only a bias in one of the algorithms would distinguish one from the other.
Currently, no such bias is known to exist in either HMAC SHA1 or HMAC SHA 256 .
If, on the other hand, the attacker is focused on guessing the HMAC key, and we assume that the hash algorithms are indistinguishable when viewed as PRF's, then the HMAC key length provides a direct measure of the underlying security: the longer the key, the harder it is to guess.
This means that with respect to passive attacks on the HMAC key, size matters and the HMAC SHA 256  algorithms provide more security in this regard than HMAC SHA1 96.
This document does not specify the conventions for using SHA256  for IKE Phase 1 negotiations, except to note that IANA has made the following IKE hash algorithm attribute assignments:
For IKE Phase 2 negotiations, IANA has assigned the following authentication algorithm identifiers: HMAC SHA2 256:  5 HMAC SHA2 384:  6 HMAC
For use of HMAC SHA 256  as a PRF in IKEv2, IANA has assigned the following IKEv2 Pseudo random function (type 2)
transform identifiers: PRF HMAC SHA2 256
5 PRF HMAC SHA2 384
6 PRF HMAC SHA2 512
For the use of HMAC SHA 256  algorithms for data origin authentication and integrity verification in IKEv2, ESP, or AH, IANA has assigned the following IKEv2 integrity (type 3)
: AUTH HMAC SHA2 256 128  12 AUTH HMAC
