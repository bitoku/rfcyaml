- title: __initial_text__
  contents:
  - '                             RIPng for IPv6

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a routing protocol for an IPv6 internet.\
    \  It\n   is based on protocols and algorithms currently in wide use in the\n\
    \   IPv4 Internet.\n   This specification represents the minimum change to the\
    \ Routing\n   Information Protocol (RIP), as specified in RFC 1058 [1] and RFC\
    \ 1723\n   [2], necessary for operation over IPv6 [3].\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is a modified version of RFC 1058, written\
    \ by Chuck\n   Hedrick [1].  The modifications reflect RIP-2 and IPv6 enhancements,\n\
    \   but the original wording is his.\n   We'd like to thank Dennis Ferguson and\
    \ Thomas Narten for their input.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   1.1   Theoretical Underpinnings  . . . . . . . . . . . .\
    \ . . . . .  3\n   1.2   Limitations of the Protocol  . . . . . . . . . . . .\
    \ . . . .  3\n   2.  Protocol Specification . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   2.1   Message Format . . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n   2.1.1   Next Hop . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  7\n   2.2   Addressing Considerations  . . . . . . . . . . . . . . . . .\
    \  8\n   2.3   Timers . . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n\
    \   2.4   Input Processing . . . . . . . . . . . . . . . . . . . . . . 10\n  \
    \ 2.4.1   Request Messages . . . . . . . . . . . . . . . . . . . . . 10\n   2.4.2\
    \   Response Messages  . . . . . . . . . . . . . . . . . . . . 11\n   2.5   Output\
    \ Processing  . . . . . . . . . . . . . . . . . . . . . 14\n   2.5.1   Triggered\
    \ Updates  . . . . . . . . . . . . . . . . . . . . 14\n   2.5.2   Generating Response\
    \ Messages . . . . . . . . . . . . . . . 15\n   2.6   Split Horizon  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 16\n   3.  Control Functions  . . . . .\
    \ . . . . . . . . . . . . . . . . . 17\n   4.  Security Considerations. . . .\
    \ . . . . . . . . . . . . . . . . 18\n   References . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 18\n   Authors' Addresses . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 19\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo describes one protocol in a series of routing protocols\n\
    \   based on the Bellman-Ford (or distance vector) algorithm.  This\n   algorithm\
    \ has been used for routing computations in computer networks\n   since the early\
    \ days of the ARPANET.  The particular packet formats\n   and protocol described\
    \ here are based on the program \"routed,\" which\n   is included with the Berkeley\
    \ distribution of Unix.\n   In an international network, such as the Internet,\
    \ it is very\n   unlikely that a single routing protocol will used for the entire\n\
    \   network.  Rather, the network will be organized as a collection of\n   Autonomous\
    \ Systems (AS), each of which will, in general, be\n   administered by a single\
    \ entity.  Each AS will have its own routing\n   technology, which may differ\
    \ among AS's.  The routing protocol used\n   within an AS is referred to as an\
    \ Interior Gateway Protocol (IGP).  A\n   separate protocol, called an Exterior\
    \ Gateway Protocol (EGP), is used\n   to transfer routing information among the\
    \ AS's.  RIPng was designed\n   to work as an IGP in moderate-size AS's.  It is\
    \ not intended for use\n   in more complex environments.  For information on the\
    \ context into\n   which RIP version 1 (RIP-1) is expected to fit, see Braden\
    \ and Postel\n   [6].\n   RIPng is one of a class of algorithms known as Distance\
    \ Vector\n   algorithms.  The earliest description of this class of algorithms\n\
    \   known to the author is in Ford and Fulkerson [8].  Because of this,\n   they\
    \ are sometimes known as Ford-Fulkerson algorithms.  The term\n   Bellman-Ford\
    \ is also used, and derives from the fact that the\n   formulation is based on\
    \ Bellman's equation [4].  The presentation in\n   this document is closely based\
    \ on [5].  This document contains a\n   protocol specification.  For an introduction\
    \ to the mathematics of\n   routing algorithms, see [1].  The basic algorithms\
    \ used by this\n   protocol were used in computer routing as early as 1969 in\
    \ the\n   ARPANET.  However, the specific ancestry of this protocol is within\n\
    \   the Xerox network protocols.  The PUP protocols [7] used the Gateway\n   Information\
    \ Protocol to exchange routing information.  A somewhat\n   updated version of\
    \ this protocol was adopted for the Xerox Network\n   Systems (XNS) architecture,\
    \ with the name Routing Information\n   Protocol [9].  Berkeley's routed is largely\
    \ the same as the Routing\n   Information Protocol, with XNS addresses replaced\
    \ by a more general\n   address format capable of handling IPv4 and other types\
    \ of address,\n   and with routing updates limited to one every 30 seconds.  Because\
    \ of\n   this similarity, the term Routing Information Protocol (or just RIP)\n\
    \   is used to refer to both the XNS protocol and the protocol used by\n   routed.\n"
- title: 1.1  Theoretical Underpinnings
  contents:
  - "1.1  Theoretical Underpinnings\n   An introduction to the theory and math behind\
    \ Distance Vector\n   protocols is provided in [1].  It has not been incorporated\
    \ in this\n   document for the sake of brevity.\n"
- title: 1.2  Limitations of the Protocol
  contents:
  - "1.2  Limitations of the Protocol\n   This protocol does not solve every possible\
    \ routing problem.  As\n   mentioned above, it is primarily intended for use as\
    \ an IGP in\n   networks of moderate size.  In addition, the following specific\n\
    \   limitations are be mentioned:\n   - The protocol is limited to networks whose\
    \ longest path (the\n     network's diameter) is 15 hops.  The designers believe\
    \ that the\n     basic protocol design is inappropriate for larger networks. \
    \ Note\n     that this statement of the limit assumes that a cost of 1 is used\n\
    \     for each network.  This is the way RIPng is normally configured.\n     If\
    \ the system administrator chooses to use larger costs, the upper\n     bound\
    \ of 15 can easily become a problem.\n   - The protocol depends upon \"counting\
    \ to infinity\" to resolve certain\n     unusual situations (see section 2.2 in\
    \ [1]).  If the system of\n     networks has several hundred networks, and a routing\
    \ loop was formed\n     involving all of them, the resolution of the loop would\
    \ require\n     either much time (if the frequency of routing updates were limited)\n\
    \     or bandwidth (if updates were sent whenever changes were detected).\n  \
    \   Such a loop would consume a large amount of network bandwidth\n     before\
    \ the loop was corrected.  We believe that in realistic cases,\n     this will\
    \ not be a problem except on slow lines.  Even then, the\n     problem will be\
    \ fairly unusual, since various precautions are taken\n     that should prevent\
    \ these problems in most cases.\n   - This protocol uses fixed \"metrics\" to\
    \ compare alternative routes.\n     It is not appropriate for situations where\
    \ routes need to be chosen\n     based on real-time parameters such a measured\
    \ delay, reliability,\n     or load.  The obvious extensions to allow metrics\
    \ of this type are\n     likely to introduce instabilities of a sort that the\
    \ protocol is\n     not designed to handle.\n"
- title: 2. Protocol Specification
  contents:
  - "2. Protocol Specification\n   RIPng is intended to allow routers to exchange\
    \ information for\n   computing routes through an IPv6-based network.  RIPng is\
    \ a distance\n   vector protocol, as described in [1].  RIPng should be implemented\n\
    \   only in routers; IPv6 provides other mechanisms for router discovery\n   [10].\
    \  Any router that uses RIPng is assumed to have interfaces to\n   one or more\
    \ networks, otherwise it isn't really a router.  These are\n   referred to as\
    \ its directly-connected networks.  The protocol relies\n   on access to certain\
    \ information about each of these networks, the\n   most important of which is\
    \ its metric.  The RIPng metric of a network\n   is an integer between 1 and 15,\
    \ inclusive.  It is set in some manner\n   not specified in this protocol; however,\
    \ given the maximum path limit\n   of 15, a value of 1 is usually used.  Implementations\
    \ should allow\n   the system administrator to set the metric of each network.\
    \  In\n   addition to the metric, each network will have an IPv6 destination\n\
    \   address prefix and prefix length associated with it.  These are to be\n  \
    \ set by the system administrator in a manner not specified in this\n   protocol.\n\
    \   Each router that implements RIPng is assumed to have a routing table.\n  \
    \ This table has one entry for every destination that is reachable\n   throughout\
    \ the system operating RIPng.  Each entry contains at least\n   the following\
    \ information:\n   - The IPv6 prefix of the destination.\n   - A metric, which\
    \ represents the total cost of getting a datagram\n     from the router to that\
    \ destination.  This metric is the sum of the\n     costs associated with the\
    \ networks that would be traversed to get\n     to the destination.\n   - The\
    \ IPv6 address of the next router along the path to the\n     destination (i.e.,\
    \ the next hop).  If the destination is on one of\n     the directly-connected\
    \ networks, this item is not needed.\n   - A flag to indicate that information\
    \ about the route has changed\n     recently.  This will be referred to as the\
    \ \"route change flag.\"\n   - Various timers associated with the route.  See\
    \ section 2.3 for more\n     details on timers.\n   The entries for the directly-connected\
    \ networks are set up by the\n   router using information gathered by means not\
    \ specified in this\n   protocol.  The metric for a directly-connected network\
    \ is set to the\n   cost of that network.  As mentioned, 1 is the usual cost.\
    \  In that\n   case, the RIPng metric reduces to a simple hop-count.  More complex\n\
    \   metrics may be used when it is desirable to show preference for some\n   networks\
    \ over others (e.g., to indicate of differences in bandwidth\n   or reliability).\n\
    \   Implementors may also choose to allow the system administrator to\n   enter\
    \ additional routes.  These would most likely be routes to hosts\n   or networks\
    \ outside the scope of the routing system.  They are\n   referred to as \"static\
    \ routes.\"  Entries for destinations other than\n   these initial ones are added\
    \ and updated by the algorithms described\n   in the following sections.\n   In\
    \ order for the protocol to provide complete information on routing,\n   every\
    \ router in the AS must participate in the protocol.  In cases\n   where multiple\
    \ IGPs are in use, there must be at least one router\n   which can leak routing\
    \ information between the protocols.\n"
- title: 2.1  Message Format
  contents:
  - "2.1  Message Format\n   RIPng is a UDP-based protocol.  Each router that uses\
    \ RIPng has a\n   routing process that sends and receives datagrams on UDP port\
    \ number\n   521, the RIPng port.  All communications intended for another\n \
    \  router's RIPng process are sent to the RIPng port.  All routing\n   update\
    \ messages are sent from the RIPng port.  Unsolicited routing\n   update messages\
    \ have both the source and destination port equal to\n   the RIPng port.  Those\
    \ sent in response to a request are sent to the\n   port from which the request\
    \ came.  Specific queries may be sent from\n   ports other than the RIPng port,\
    \ but they must be directed to the\n   RIPng port on the target machine.\n   The\
    \ RIPng packet format is:\n       0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  command (1)  |  version (1)  |       must be zero (2)        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \             Route Table Entry 1 (20)                       ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                         ...                                   ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                Route Table Entry N (20)                       ~\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where each Route Table Entry (RTE) has the following format:\n       0   \
    \                1                   2                   3\n       0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   ~                        IPv6 prefix (16)                       ~\n      |\
    \                                                               |\n      +---------------------------------------------------------------+\n\
    \      |         route tag (2)         | prefix len (1)|  metric (1)   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      The\
    \ maximum number of RTEs is defined below.\n   Field sizes are given in octets.\
    \  Unless otherwise specified, fields\n   contain binary integers, in network\
    \ byte order, with the most-\n   significant octet first (big-endian).  Each tick\
    \ mark represents one\n   bit.\n   Every message contains a RIPng header which\
    \ consists of a command and\n   a version number.  This document describes version\
    \ 1 of the protocol\n   (see section 2.4).  The command field is used to specify\
    \ the purpose\n   of this message.  The commands implemented in version 1 are:\n\
    \   1 - request    A request for the responding system to send all or\n      \
    \            part of its routing table.\n   2 - response   A message containing\
    \ all or part of the sender's\n                  routing table.  This message\
    \ may be sent in response\n                  to a request, or it may be an unsolicited\
    \ routing\n                  update generated by the sender.\n   For each of these\
    \ message types, the remainder of the datagram\n   contains a list of RTEs.  Each\
    \ RTE in this list contains a\n   destination prefix, the number of significant\
    \ bits in the prefix, and\n   the cost to reach that destination (metric).\n \
    \  The destination prefix is the usual 128-bit, IPv6 address prefix\n   stored\
    \ as 16 octets in network byte order.\n   The route tag field is an attribute\
    \ assigned to a route which must be\n   preserved and readvertised with a route.\
    \  The intended use of the\n   route tag is to provide a method of separating\
    \ \"internal\" RIPng\n   routes (routes for networks within the RIPng routing\
    \ domain) from\n   \"external\" RIPng routes, which may have been imported from\
    \ an EGP or\n   another IGP.\n   Routers supporting protocols other than RIPng\
    \ should be configurable\n   to allow the route tag to be configured for routes\
    \ imported from\n   different sources.  For example, routes imported from an EGP\
    \ should\n   be able to have their route tag either set to an arbitrary value,\
    \ or\n   at least to the number of the Autonomous System from which the routes\n\
    \   were learned.\n   Other uses of the route tag are valid, as long as all routers\
    \ in the\n   RIPng domain use it consistently.\n   The prefix length field is\
    \ the length in bits of the significant part\n   of the prefix (a value between\
    \ 0 and 128 inclusive) starting from the\n   left of the prefix.\n   The metric\
    \ field contains a value between 1 and 15 inclusive,\n   specifying the current\
    \ metric for the destination; or the value 16\n   (infinity), which indicates\
    \ that the destination is not reachable.\n   The maximum datagram size is limited\
    \ by the MTU of the medium over\n   which the protocol is being used.  Since an\
    \ unsolicited RIPng update\n   is never propagated across a router, there is no\
    \ danger of an MTU\n   mismatch.  The determination of the number of RTEs which\
    \ may be put\n   into a given message is a function of the medium's MTU, the number\
    \ of\n   octets of header information preceeding the RIPng message, the size\n\
    \   of the RIPng header, and the size of an RTE.  The formula is:\n          \
    \     +-                                                   -+\n              \
    \ | MTU - sizeof(IPv6_hdrs) - UDP_hdrlen - RIPng_hdrlen |\n   #RTEs = INT | ---------------------------------------------------\
    \ |\n               |                      RTE_size                       |\n\
    \               +-                                                   -+\n"
- title: 2.1.1  Next Hop
  contents:
  - "2.1.1  Next Hop\n   RIPng provides the ability to specify the immediate next\
    \ hop IPv6\n   address to which packets to a destination specified by a route\
    \ table\n   entry (RTE) should be forwarded in much the same way as RIP-2 [2].\n\
    \   In RIP-2, each route table entry has a next hop field.  Including a\n   next\
    \ hop field for each RTE in RIPng would nearly double the size of\n   the RTE.\
    \  Therefore, in RIPng, the next hop is specified by a special\n   RTE and applies\
    \ to all of the address RTEs following the next hop RTE\n   until the end of the\
    \ message or until another next hop RTE is\n   encountered.\n   A next hop RTE\
    \ is identified by a value of 0xFF in the metric field\n   of an RTE.  The prefix\
    \ field specifies the IPv6 address of the next\n   hop.  The route tag and prefix\
    \ length in the next hop RTE must be set\n   to zero on sending and ignored on\
    \ receiption.\n   The next hop Route Table Entry (RTE) has the following format:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                  IPv6 next hop address (16)                 ~\n   |        \
    \                                                       |\n   +---------------------------------------------------------------+\n\
    \   |        must be zero (2)       |must be zero(1)|     0xFF      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Specifying a value of 0:0:0:0:0:0:0:0 in the prefix field of a next\n   hop\
    \ RTE indicates that the next hop address should be the originator\n   of the\
    \ RIPng advertisement.  An address specified as a next hop must\n   be a link-local\
    \ address.\n   The purpose of the next hop RTE is to eliminate packets being routed\n\
    \   through extra hops in the system.  It is particularly useful when\n   RIPng\
    \ is not being run on all of the routers on a network.  Note that\n   next hop\
    \ RTE is \"advisory\".  That is, if the provided information is\n   ignored, a\
    \ possibly sub-optimal, but absolutely valid, route may be\n   taken.  If the\
    \ received next hop address is not a link-local address,\n   it should be treated\
    \ as 0:0:0:0:0:0:0:0.\n"
- title: 2.2  Addressing Considerations
  contents:
  - "2.2  Addressing Considerations\n   The distinction between network, subnet and\
    \ host routes does not need\n   to be made for RIPng because an IPv6 address prefix\
    \ is unambiguous.\n   Any prefix with a prefix length of zero is used to designate\
    \ a\n   default route.  It is suggested that the prefix 0:0:0:0:0:0:0:0 be\n \
    \  used when specifying the default route, though the prefix is\n   essentially\
    \ ignored.  A default route is used when it is not\n   convenient to list every\
    \ possible network in the RIPng updates, and\n   when one or more routers in the\
    \ system are prepared to handle traffic\n   to the networks that are not explicitly\
    \ listed.  These \"default\n   routers\" use the default route as a path for all\
    \ datagrams for which\n   they have no explicit route.  The decision as to how\
    \ a router becomes\n   a default router (i.e., how a default route entry is created)\
    \ is left\n   to the implementor.  In general, the system administrator will be\n\
    \   provided with a way to specify which routers should create and\n   advertise\
    \ default route entries.  If this mechanism is used, the\n   implementation should\
    \ allow the network administrator to choose the\n   metric associated with the\
    \ default route advertisement.  This will\n   make it possible to establish a\
    \ precedence amoung multiple default\n   routers.  The default route entries are\
    \ handled by RIPng in exactly\n   the same manner as any other destination prefix.\
    \  System\n   administrators should take care to make sure that default routes\
    \ do\n   not propagate further than is intended.  Generally, each AS has its\n\
    \   own preferred default router.  Therefore, default routes should\n   generally\
    \ not leave the boundary of an AS.  The mechanisms for\n   enforcing this restriction\
    \ are not specified in this document.\n"
- title: 2.3  Timers
  contents:
  - "2.3  Timers\n   This section describes all events that are triggered by timers.\n\
    \   Every 30 seconds, the RIPng process is awakened to send an\n   unsolicited\
    \ Response message, containing the complete routing table\n   (see section 2.6\
    \ on Split Horizon), to every neighboring router.\n   When there are many routers\
    \ on a single network, there is a tendency\n   for them to synchronize with each\
    \ other such that they all issue\n   updates at the same time.  This can happen\
    \ whenever the 30 second\n   timer is affected by the processing load on the system.\
    \  It is\n   undesirable for the update messages to become synchronized, since\
    \ it\n   can lead to unnecessary collisions on broadcast networks (see [13]\n\
    \   for more details).  Therefore, implementations are required to take\n   one\
    \ of two precautions:\n   - The 30-second updates are triggered by a clock whose\
    \ rate is not\n     affected by system load or the time required to service the\n\
    \     previous update timer.\n   - The 30-second timer is offset by a small random\
    \ time (+/- 0 to 15\n     seconds) each time it is set.  The offset is derived\
    \ from: 0.5 *\n     the update period (i.e. 30).\n   There are two timers associated\
    \ with each route, a \"timeout\" and a\n   \"garbage-collection time.\"  Upon\
    \ expiration of the timeout, the route\n   is no longer valid; however, it is\
    \ retained in the routing table for\n   a short time so that neighbors can be\
    \ notified that the route has\n   been dropped.  Upon expiration of the garbage-collection\
    \ timer, the\n   route is finally removed from the routing table.\n   The timeout\
    \ is initialized when a route is established, and any time\n   an update message\
    \ is received for the route.  If 180 seconds elapse\n   from the last time the\
    \ timeout was initialized, the route is\n   considered to have expired, and the\
    \ deletion process described below\n   begins for that route.\n   Deletions can\
    \ occur for one of two reasons: the timeout expires, or\n   the metric is set\
    \ to 16 because of an update received from the\n   current router (see section\
    \ 2.4.2 for a discussion of processing\n   updates from other routers).  In either\
    \ case, the following events\n   happen:\n   - The garbage-collection timer is\
    \ set for 120 seconds.\n   - The metric for the route is set to 16 (infinity).\
    \  This causes the\n     route to be removed from service.\n   - The route change\
    \ flag is to indicate that this entry has been\n     changed.\n   - The output\
    \ process is signalled to trigger a response.\n   Until the garbage-collection\
    \ timer expires, the route is included in\n   all updates sent by this router.\
    \  When the garbage-collection timer\n   expires, the route is deleted from the\
    \ routing table.\n   Should a new route to this network be established while the\
    \ garbage-\n   collection timer is running, the new route will replace the one\
    \ that\n   is about to be deleted.  In this case the garbage-collection timer\n\
    \   must be cleared.\n   Triggered updates also use a small timer; however, this\
    \ is best\n   described in section 2.5.1.\n"
- title: 2.4  Input Processing
  contents:
  - "2.4  Input Processing\n   This section will describe the handling of datagrams\
    \ received on the\n   RIPng port.  Processing will depend upon the value in the\
    \ command\n   field.  Version 1 supports only two commands: Request and Response.\n"
- title: 2.4.1  Request Messages
  contents:
  - "2.4.1  Request Messages\n   A Request is used to ask for a response containing\
    \ all or part of a\n   router's routing table.  Normally, Requests are sent as\
    \ multicasts,\n   from the RIPng port, by routers which have just come up and\
    \ are\n   seeking to fill in their routing tables as quickly as possible.\n  \
    \ However, there may be situations (e.g., router monitoring) where the\n   routing\
    \ table of only a single router is needed.  In this case, the\n   Request should\
    \ be sent directly to that router from a UDP port other\n   than the RIPng port.\
    \  If such a Request is received, the router\n   responds directly to the requestor's\
    \ address and port with a globally\n   valid source address since the requestor\
    \ may not reside on the\n   directly attached network.\n   The Request is processed\
    \ entry by entry.  If there are no entries, no\n   response is given.  There is\
    \ one special case.  If there is exactly\n   one entry in the request, and it\
    \ has a destination prefix of zero, a\n   prefix length of zero, and a metric\
    \ of infinity (i.e., 16), then this\n   is a request to send the entire routing\
    \ table.  In that case, a call\n   is made to the output process to send the routing\
    \ table to the\n   requesting address/port.  Except for this special case, processing\
    \ is\n   quite simple.  Examine the list of RTEs in the Request one by one.\n\
    \   For each entry, look up the destination in the router's routing\n   database\
    \ and, if there is a route, put that route's metric in the\n   metric field of\
    \ the RTE.  If there is no explicit route to the\n   specified destination, put\
    \ infinity in the metric field.  Once all\n   the entries have been filled in,\
    \ change the command from Request to\n   Response and send the datagram back to\
    \ the requestor.\n   Note that there is a difference in metric handling for specific\
    \ and\n   whole-table requests.  If the request is for a complete routing\n  \
    \ table, normal output processing is done, including Split Horizon (see\n   section\
    \ 2.6 on Split Horizon).  If the request is for specific\n   entries, they are\
    \ looked up in the routing table and the information\n   is returned as is; no\
    \ Split Horizon processing is done.  The reason\n   for this distinction is the\
    \ expectation that these requests are\n   likely to be used for different purposes.\
    \  When a router first comes\n   up, it multicasts a Request on every connected\
    \ network asking for a\n   complete routing table.  It is assumed that these complete\
    \ routing\n   tables are to be used to update the requestor's routing table. \
    \ For\n   this reason, Split Horizon must be done.  It is further assumed that\n\
    \   a Request for specific networks is made only by diagnostic software,\n   and\
    \ is not used for routing.  In this case, the requester would want\n   to know\
    \ the exact contents of the routing table and would not want\n   any information\
    \ hidden or modified.\n"
- title: 2.4.2  Response Messages
  contents:
  - "2.4.2  Response Messages\n   A Response can be received for one of several different\
    \ reasons:\n   - response to a specific query\n   - regular update (unsolicited\
    \ response)\n   - triggered update caused by a route change\n   Processing is\
    \ the same no matter why the Response was generated.\n   Because processing of\
    \ a Response may update the router's routing\n   table, the Response must be checked\
    \ carefully for validity.  The\n   Response must be ignored if it is not from\
    \ the RIPng port.  The\n   datagram's IPv6 source address should be checked to\
    \ see whether the\n   datagram is from a valid neighbor; the source of the datagram\
    \ must be\n   a link-local address.  It is also worth checking to see whether\
    \ the\n   response is from one of the router's own addresses.  Interfaces on\n\
    \   broadcast networks may receive copies of their own multicasts\n   immediately.\
    \  If a router processes its own output as new input,\n   confusion is likely,\
    \ and such datagrams must be ignored.  As an\n   additional check, periodic advertisements\
    \ must have their hop counts\n   set to 255, and inbound, multicast packets sent\
    \ from the RIPng port\n   (i.e. periodic advertisement or triggered update packets)\
    \ must be\n   examined to ensure that the hop count is 255.  This absolutely\n\
    \   guarantees that a packet is from a neighbor, because any intermediate\n  \
    \ node would have decremented the hop count.  Queries and their\n   responses\
    \ may still cross intermediate nodes and therefore do not\n   require the hop\
    \ count test to be done.\n   Once the datagram as a whole has been validated,\
    \ process the RTEs in\n   the Response one by one.  Again, start by doing validation.\n\
    \   Incorrect metrics and other format errors usually indicate\n   misbehaving\
    \ neighbors and should probably be brought to the\n   administrator's attention.\
    \  For example, if the metric is greater\n   than infinity, ignore the entry but\
    \ log the event.  The basic\n   validation tests are:\n   - is the destination\
    \ prefix valid (e.g., not a multicast prefix and\n     not a link-local address)\
    \  A link-local address should never be\n     present in an RTE.\n   - is the\
    \ prefix length valid (i.e., between 0 and 128, inclusive)\n   - is the metric\
    \ valid (i.e., between 1 and 16, inclusive)\n   If any check fails, ignore that\
    \ entry and proceed to the next.\n   Again, logging the error is probably a good\
    \ idea.\n   Once the entry has been validated, update the metric by adding the\n\
    \   cost of the network on which the message arrived.  If the result is\n   greater\
    \ than infinity, use infinity.  That is,\n                  metric = MIN (metric\
    \ + cost, infinity)\n   Now, check to see whether there is already an explicit\
    \ route for the\n   destination prefix.  If there is no such route, add this route\
    \ to the\n   routing table, unless the metric is infinity (there is no point in\n\
    \   adding a route which unusable).  Adding a route to the routing table\n   consists\
    \ of:\n   - Setting the destination prefix and length to those in the RTE.\n \
    \  - Setting the metric to the newly calculated metric (as described\n     above).\n\
    \   - Set the next hop address to be the address of the router from which\n  \
    \   the datagram came or the next hop address specified by a next hop\n     RTE.\n\
    \   - Initialize the timeout for the route.  If the garbage-collection\n     timer\
    \ is running for this route, stop it (see section 2.3 for a\n     discussion of\
    \ the timers).\n   - Set the route change flag.\n   - Signal the output process\
    \ to trigger an update (see section 2.5).\n   If there is an existing route, compare\
    \ the next hop address to the\n   address of the router from which the datagram\
    \ came.  If this datagram\n   is from the same router as the existing route, reinitialize\
    \ the\n   timeout.  Next, compare the metrics.  If the datagram is from the\n\
    \   same router as the existing route, and the new metric is different\n   than\
    \ the old one; or, if the new metric is lower than the old one; do\n   the following\
    \ actions:\n   - Adopt the route from the datagram.  That is, put the new metric\
    \ in,\n     and adjust the next hop address (if necessary).\n   - Set the route\
    \ change flag and signal the output process to trigger\n     an update.\n   -\
    \ If the new metric is infinity, start the deletion process\n     (described above);\
    \ otherwise, re-initialize the timeout.\n   If the new metric is infinity, the\
    \ deletion process begins for the\n   route, which is no longer used for routing\
    \ packets.  Note that the\n   deletion process is started only when the metric\
    \ is first set to\n   infinity.  If the metric was already infinity, then a new\
    \ deletion\n   process is not started.\n   If the new metric is the same as the\
    \ old one, it is simplest to do\n   nothing further (beyond reinitializing the\
    \ timeout, as specified\n   above); but, there is a heuristic which could be applied.\
    \  Normally,\n   it is senseless to replace a route if the new route has the same\n\
    \   metric as the existing route; this would cause the route to bounce\n   back\
    \ and forth, which would generate an intolerable number of\n   triggered updates.\
    \  However, if the existing route is showing signs\n   of timing out, it may be\
    \ better to switch to an equally-good\n   alternative route immediately, rather\
    \ than waiting for the timeout to\n   happen.  Therefore, if the new metric is\
    \ the same as the old one,\n   examine the timeout for the existing route.  If\
    \ it is at least\n   halfway to the expiration point, switch to the new route.\
    \  This\n   heuristic is optional, but highly recommended.\n   Any entry that\
    \ fails these tests is ignored, as it is no better than\n   the current route.\n"
- title: 2.5  Output Processing
  contents:
  - "2.5  Output Processing\n   This section describes the processing used to create\
    \ response\n   messages that contain all or part of the routing table.  This\n\
    \   processing may be triggered in any of the following ways:\n   - By input processing,\
    \ when a Request is received.  In this case, the\n     Response is sent to only\
    \ one destination (i.e. the unicast address\n     of the requestor).\n   - By\
    \ the regular routing update.  Every 30 seconds, a Response\n     containing the\
    \ whole routing table is sent to every neighboring\n     router.\n   - By triggered\
    \ updates.  Whenever the metric for a route is changed,\n     an update is triggered.\n\
    \   The special processing required for a Request is described in section\n  \
    \ 2.4.1.\n   When a Response is to be sent to all neighbors (i.e., a regular or\n\
    \   triggered update), a Response message is multicast to the multicast\n   group\
    \ FF02::9, the all-rip-routers multicast group, on all connected\n   networks\
    \ that support broadcasting or are point-to-point links. RIPng\n   handles point-to-point\
    \ links just like multicast links as\n   multicasting can be trivially provided\
    \ on such links.  Thus, one\n   Response is prepared for each directly-connected\
    \ network, and sent to\n   the all-rip-routers multicast group.  In most cases,\
    \ this reaches all\n   neighboring routers.  However, there are some cases where\
    \ this may\n   not be good enough. This may involve a network that is not a\n\
    \   broadcast network (e.g., the ARPANET), or a situation involving dumb\n   routers.\
    \  In such cases, it may be necessary to specify an actual\n   list of neighboring\
    \ routers and send a datagram to each one\n   explicitly.  It is left to the implementor\
    \ to determine whether such\n   a mechanism is needed, and to define how the list\
    \ is specified.\n"
- title: 2.5.1  Triggered Updates
  contents:
  - "2.5.1  Triggered Updates\n   Triggered updates require special handling for two\
    \ reasons.  First,\n   experience shows that triggered updates can cause excessive\
    \ loads on\n   networks with limited capacity or networks with many routers on\
    \ them.\n   Therefore, the protocol requires that implementors include provisions\n\
    \   to limit the frequency of triggered updates.  After a triggered\n   update\
    \ is sent, a timer should be set for a random interval between 1\n   and 5 seconds.\
    \  If other changes that would trigger updates occur\n   before the timer expires,\
    \ a single update is triggered when the timer\n   expires.  The timer is then\
    \ reset to another random value between 1\n   and 5 seconds.  Triggered updates\
    \ may be suppressed if a regular\n   update is due by the time the triggered update\
    \ would be sent.\n   Second, triggered updates do not need to include the entire\
    \ routing\n   table.  In principle, only those routes which have changed need\
    \ to be\n   included.  Therefore messages generated as part of a triggered update\n\
    \   must include at least those routes that have their route change flag\n   set.\
    \  They may include additional routes, at the discretion of the\n   implementor;\
    \ however, sending complete routing updates is strongly\n   discouraged.  When\
    \ a triggered update is processed, messages should\n   be generated for every\
    \ directly-connected network.  Split Horizon\n   processing is done when generating\
    \ triggered updates as well as\n   normal updates (see section 2.6).  If, after\
    \ Split Horizon processing\n   for a given network, a changed route will appear\
    \ unchanged on that\n   network (e.g., it appears with an infinite metric), the\
    \ route need\n   not be sent.  If no routes need be sent on that network, the\
    \ update\n   may be omitted.  Once all of the triggered updates have been\n  \
    \ generated, the route change flags should be cleared.\n   If input processing\
    \ is allowed while output is being generated,\n   appropriate interlocking must\
    \ be done.  The route change flags should\n   not be changed as a result of processing\
    \ input while a triggered\n   update message is being generated.\n   The only\
    \ difference between a triggered update and other update\n   messages is the possible\
    \ omission of routes that have not changed.\n   The remaining mechanisms, described\
    \ in the next section, must be\n   applied to all updates.\n"
- title: 2.5.2  Generating Response Messages
  contents:
  - "2.5.2  Generating Response Messages\n   This section describes how a Response\
    \ message is generated for a\n   particular directly-connected network:\n   The\
    \ IPv6 source address must be a link-local address of the possible\n   addresses\
    \ of the sending router's interface, except when replying to\n   a unicast Request\
    \ Message from a port other than the RIPng port.  In\n   the latter case, the\
    \ source address must be a globaly valid address.\n   In the former case, it is\
    \ important to use a link-local address\n   because the source address is put\
    \ into routing tables (as the next\n   hop) in the routers which receive this\
    \ Response.  If an incorrect\n   source address is used, other routers may be\
    \ unable to route\n   datagrams.  Sometimes routers are set up with multiple IPv6\
    \ addresses\n   on a single physical interface.  Normally, this means that several\n\
    \   logical IPv6 networks are being carried over one physical medium.  It\n  \
    \ is possible that a router may have multiple link-local addresses for\n   a single\
    \ interface. In this case, the router must only originate a\n   single Response\
    \ message with a source address of the designated\n   link-local address for a\
    \ given interface.  The choice of which link-\n   local address to use should\
    \ only change when the current choice is no\n   longer valid.  This is necessary\
    \ because nodes receiving Response\n   messages use the source address to identify\
    \ the sender.  If multiple\n   packets from the same router contain different\
    \ source addresses,\n   nodes will assume they come from different routers, leading\
    \ to\n   undesirable behavior.\n   Set the version number to the current version\
    \ of RIPng.  The version\n   described in this document is version 1.  Set the\
    \ command to\n   Response.  Set the bytes labeled \"must be zero\" to zero.  Start\n\
    \   filling in RTEs.  Recall that the maximum datagram size is limited by\n  \
    \ the network's MTU.  When there is no more space in the datagram, send\n   the\
    \ current Response and start a new one.\n   To fill in the RTEs, examine each\
    \ route in the routing table.  Routes\n   to link-local addresses must never be\
    \ included in an RTE.  If a\n   triggered update is being generated, only entries\
    \ whose route change\n   flags are set need be included.  If, after Split Horizon\
    \ processing,\n   the route should not be included, skip it.  If the route is\
    \ to be\n   included, then the destination prefix, prefix length, and metric are\n\
    \   put into the RTE.  The route tag is filled in as defined in section\n   2.1.\
    \  Routes must be included in the datagram even if their metrics\n   are infinite.\n"
- title: 2.6  Split Horizon
  contents:
  - "2.6  Split Horizon\n   Split Horizon is a algorithm for avoiding problems caused\
    \ by\n   including routes in updates sent to the gateway from which they were\n\
    \   learned.  The basic split horizon algorithm omits routes learned from\n  \
    \ one neighbor in updates sent to that neighbor.  In the case of a\n   broadcast\
    \ network, all routes learned from any neighbor on that\n   network are omitted\
    \ from updates sent on that network.\n   Split Horizon with Poisoned Reverse (more\
    \ simply, Poison Reverse)\n   does include such routes in updates, but sets their\
    \ metrics to\n   infinity.  In effect, advertising the fact that there routes\
    \ are not\n   reachable.  This is the preferred method of operation; however,\n\
    \   implementations should provide a per-interface control allowing no\n   horizoning,\
    \ split horizoning, and poisoned reverse to be selected.\n   For a theoretical\
    \ discussion of Split Horizon and Poison Reverse, and\n   why they are needed,\
    \ see section 2.1.1 of [1].\n"
- title: 3. Control Functions
  contents:
  - "3. Control Functions\n   This section describes administrative controls.  These\
    \ are not part\n   of the protocol per se; however, experience with existing networks\n\
    \   suggests that they are important.  Because they are not a necessary\n   part\
    \ of the protocol, they are considered optional.  However, it is\n   strongly\
    \ recommend that at least some of them be included in every\n   implementation.\
    \  These controls are intended primarily to allow RIPng\n   to be connected to\
    \ networks whose routing may be unstable or subject\n   to errors.  Here are some\
    \ examples:\n   - It is sometimes desirable to restrict the routers from which\n\
    \     updates will be accepted, or to which updates will be sent.  This\n    \
    \ is usually done for administrative, routing policy reasons.\n   - A number of\
    \ sites limit the set of networks that they allow in\n     Response messages.\
    \  Organization A may have a connection to\n     organization B that they use\
    \ for direct communication.  For security\n     or performance reasons A may not\
    \ be willing to give other\n     organizations access to that connection.  In\
    \ such a case, A should\n     not include B's networks in updates that A sends\
    \ to third parties.\n   Here are some typical controls.  Note, however, that the\
    \ RIPng\n   protocol does not require these or any other controls.\n   - A neighbor\
    \ list which allows the network administrator to be able\n     to define a list\
    \ of neighbors for each router.  A router would\n     accept response messages\
    \ only from routers on its list of\n     neighbors.  A similar list for target\
    \ routers should also be\n     available to the administrator.  By default, no\
    \ restrictions are\n     defined.\n   - A filter for specific destinations would\
    \ permit the network admin-\n     istrator to be able to specify a list of destination\
    \ prefixes to\n     allow or disallow.  The list would be associated with a particular\n\
    \     interface in the incoming and/or outgoing directions.  Only allowed\n  \
    \   networks would be mentioned in Response messages going out or\n     processed\
    \ in Response messages coming in.  If a list of allowed\n     prefixes is specified,\
    \ all other prefixes are disallowed.  If a list\n     of disallowed prefixes is\
    \ specified, all other prefixes are\n     allowed.  By default, no filters are\
    \ applied.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Since RIPng runs over IPv6, RIPng relies on the\
    \ IP Authentication\n   Header (see [11]) and the IP Encapsulating Security Payload\
    \ (see\n   [12]) to ensure integrity and authentication/confidentiality of\n \
    \  routing exchanges.\n"
- title: References
  contents:
  - "References\n   [1] Hedrick, C., \"Routing Information Protocol\", RFC 1058, Rutgers\n\
    \       University, June 1988.\n   [2] Malkin, G., \"RIP Version 2 - Carrying\
    \ Additional Information\",\n       RFC 1723, Xylogics, Inc., November, 1994.\n\
    \   [3] Hinden, R., \"IP Next Generation Overview\",\n       Work in Progress.\n\
    \   [4] Bellman, R., \"Dynamic Programming\", Princeton University\n       Press,\
    \ Princeton, N.J., 1957.\n   [5] Bertsekas, D. P., and Gallaher, R. G., \"Data\
    \ Networks\", Prentice-\n       Hall, Englewood Cliffs, N.J., 1987.\n   [6] Braden,\
    \ R., and J. Postel, \"Requirements for Internet Gateways\",\n       USC/Information\
    \ Sciences Institute, STD 4, RFC 1009, June 1987.\n   [7] Boggs, D. R., Shoch,\
    \ J. F., Taft, E. A., and Metcalfe, R. M.,\n       \"Pup: An Internetwork Architecture\"\
    , IEEE Transactions on Commu-\n       nications, April 1980.\n   [8] Ford, L.\
    \ R. Jr., and Fulkerson, D. R., \"Flows in Networks\",\n       Princeton University\
    \ Press, Princeton, N.J., 1962.\n   [9] Xerox Corp., \"Internet Transport Protocols\"\
    , Xerox System Inte-\n       gration Standard XSIS 028112, December 1981.\n  \
    \ [10] Narten, T., Nordmark, E., and W. Simpson, \"Neighbor Discovery\n      \
    \  for IP Version 6 (IPv6)\", RFC 1970, August 1996.\n   [11] Atkinson, R., \"\
    IP Authentication Header\", RFC 1826\n        Naval Research Laboratory, August\
    \ 1995.\n   [12] Atkinson, R., \"IP Encapsulating Security Payload (ESP)\",\n\
    \        RFC 1827, Naval Research Laboratory, August 1995.\n   [13] Floyd, S.,\
    \ and Jacobson, V., \"The Synchronization of Periodic\n        Routing Messages\"\
    , Proceedings of ACM SIGCOMM '93, September\n        1993.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gary Scott Malkin\n   Xylogics, Inc.\n   53 Third Avenue\n\
    \   Burlington, MA 01803\n   Phone:  (617) 272-8140\n   EMail:  gmalkin@Xylogics.COM\n\
    \   Robert E. Minnear\n   Ipsilon Networks, Inc.\n   2191 E. Bayshore Road, Suite\
    \ 100\n   Palo Alto, CA 94303\n   Phone:  (415) 846-4614\n   EMail:  minnear@ipsilon.com\n"
