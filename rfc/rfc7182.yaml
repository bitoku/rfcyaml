- contents:
  - "          Integrity Check Value and Timestamp TLV Definitions\n                  for
    Mobile Ad Hoc Networks (MANETs)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document revises, extends, and replaces RFC 6622.  It describes\n
    \  general and flexible TLVs for representing cryptographic Integrity\n   Check
    Values (ICVs) and timestamps, using the generalized Mobile Ad\n   Hoc Network
    (MANET) packet/message format defined in RFC 5444.  It\n   defines two Packet
    TLVs, two Message TLVs, and two Address Block TLVs\n   for affixing ICVs and timestamps
    to a packet, a message, and one or\n   more addresses, respectively.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7182.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Differences from RFC 6622 ..................................4\n   2.
    Terminology .....................................................4\n   3. Applicability
    Statement .........................................5\n   4. Security Architecture
    ...........................................6\n   5. Overview and Functioning ........................................7\n
    \  6. General ICV TLV Structure .......................................8\n   7.
    General Timestamp TLV Structure .................................8\n   8. Packet
    TLVs .....................................................9\n      8.1. ICV Packet
    TLV .............................................9\n      8.2. TIMESTAMP Packet
    TLV ......................................10\n   9. Message TLVs ...................................................10\n
    \     9.1. ICV Message TLV ...........................................10\n      9.2.
    TIMESTAMP Message TLV .....................................10\n   10. Address
    Block TLVs ............................................11\n      10.1. ICV Address
    Block TLV ....................................11\n      10.2. TIMESTAMP Address
    Block TLV ..............................11\n   11. ICV: Basic ....................................................11\n
    \  12. ICV: Hash Function and Cryptographic Function .................12\n      12.1.
    General ICV TLV Structure ................................12\n           12.1.1.
    Rationale .........................................14\n           12.1.2. Parameters
    ........................................15\n      12.2. Considerations for Calculating
    the ICV ...................15\n           12.2.1. ICV Packet TLV ....................................15\n
    \          12.2.2. ICV Message TLV ...................................16\n           12.2.3.
    ICV Address Block TLV .............................16\n      12.3. Example of
    a Message Including an ICV ....................17\n   13. IANA Considerations
    ...........................................19\n      13.1. Expert Review: Evaluation
    Guidelines .....................19\n      13.2. Packet TLV Types .........................................20\n
    \     13.3. Message TLV Types ........................................20\n      13.4.
    Address Block TLV Types ..................................20\n      13.5. ICV
    Packet TLV Type Extensions ...........................21\n      13.6. TIMESTAMP
    Packet TLV Type Extensions .....................21\n      13.7. ICV Message TLV
    Type Extensions ..........................22\n      13.8. TIMESTAMP Message TLV
    Type Extensions ....................23\n      13.9. ICV Address Block TLV Type
    Extensions ....................24\n      13.10. TIMESTAMP Address Block TLV Type
    Extensions .............25\n      13.11. Hash Functions ..........................................26\n
    \     13.12. Cryptographic Functions .................................27\n   14.
    Security Considerations .......................................28\n   15. Acknowledgements
    ..............................................28\n   16. References ....................................................29\n
    \     16.1. Normative References .....................................29\n      16.2.
    Informative References ...................................30\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies a syntactical representation of
    security-\n   related information for use with [RFC5444] addresses, messages,
    and\n   packets.  It also specifies IANA registrations of TLV types and type\n
    \  extension registries for these TLV types.  This specification does\n   not
    represent a stand-alone protocol, but it is intended for use by\n   MANET routing
    protocols or security extensions thereof.\n   Specifically, this document, which
    revises, extends, and replaces\n   [RFC6622], specifies:\n   o  Two kinds of TLV:
    one for carrying Integrity Check Values (ICVs)\n      and one for timestamps in
    packets, messages, and Address Blocks as\n      defined by [RFC5444].\n   o  A
    generic framework for use of these TLVs, accounting for specific\n      features
    of Packet, Message, and Address Block TLVs.\n   o  IANA registrations for TLVs,
    and registries for TLV type\n      extensions, replacing those from [RFC6622].\n
    \  This document specifies IANA registries for recording code points for\n   ICV
    TLVs and TIMESTAMP TLVs, as well as timestamps, hash functions,\n   and cryptographic
    functions.\n   Moreover, in Section 12, this document defines the following:\n
    \  o  A method for generating ICVs using a combination of a\n      cryptographic
    function and a hash function and for including such\n      ICVs in the value field
    of a TLV.\n"
  - contents:
    - "1.1.  Differences from RFC 6622\n   This document obsoletes [RFC6622], replacing
      that document as the\n   specification of two TLV types, TIMESTAMP and ICV,
      for packets,\n   messages and Address Blocks.  For the ICV type, this document\n
      \  specifies a new type extension, 2 (see Section 12), in addition to\n   including
      the original type extensions (0 and 1) from [RFC6622].\n   The TLV value of
      an ICV TLV with type extension = 2 has the same\n   internal structure as an
      ICV TLV with type extension = 1 but is\n   calculated also over the source address
      of the IP datagram carrying\n   the packet, message, or Address Block.  The
      rationale for adding this\n   type extension is that some MANET protocols, such
      as [RFC6130], use\n   the IP source address of the IP datagram carrying the
      packet,\n   message, or Address Block, e.g., to identify links with neighbor\n
      \  routers.  If this address is not otherwise contained in the packet,\n   message,
      or Address Block payload (which is permitted, e.g., in\n   [RFC6130]), then
      the address is not protected against tampering.\n   This document also incorporates
      a number of editorial improvements\n   over [RFC6622].  In particular, it makes
      it clear that an ICV TLV may\n   be used to carry a truncated ICV and that a
      single or multivalue\n   TIMESTAMP or ICV Address Block TLV may cover more than
      one address.\n   Moreover, to be consistent with the terminology in [RFC5444],
      the\n   name of the TLVs specified in this document have changed from \"Packet\n
      \  ICV TLV\" to \"ICV Packet TLV\" and from \"Packet TIMESTAMP TLV\" to\n   \"TIMESTAMP
      Packet TLV\" (and similar for Message and Address Block\n   TLVs).\n   A normative
      requirement in Section 9.2 has changed from SHOULD to\n   MUST in the following
      sentence:\n      If a message contains one or more TIMESTAMP TLVs and one or
      more\n      ICV TLVs, then the TIMESTAMP TLVs (as well as any other Message\n
      \     TLVs) MUST be added to the message before the ICV TLVs....\n"
    title: 1.1.  Differences from RFC 6622
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   [RFC2119].\n   This document uses the terminology and notation defined
    in [RFC5444].\n   In particular, the following TLV fields and notation from [RFC5444]\n
    \  are used in this specification:\n   <msg-hop-limit>  is the hop limit of a
    message, as specified in\n      Section 5.2 of [RFC5444].\n   <msg-hop-count>
    \ is the hop count of a message, as specified in\n      Section 5.2 of [RFC5444].\n
    \  <length>  is the length of the value field in a TLV in octets, as\n      specified
    in Section 5.4.1 of [RFC5444].\n   single-length  is the length of a single value
    in the value field in\n      a TLV in octets, as specified in Section 5.4.1 of
    [RFC5444].  (It\n      is equal to <length> except in a multivalue Address Block
    TLV.)\n   In addition to using the regular expressions defined in Section 2.1.1\n
    \  of [RFC5444], this document defines the following:\n   + - One or more occurrences
    of the preceding element or group.\n"
  title: 2.  Terminology
- contents:
  - "3.  Applicability Statement\n   MANET routing protocols using the format defined
    in [RFC5444] are\n   accorded the ability to carry additional information in control\n
    \  messages and packets through the inclusion of TLVs.  Information so\n   included
    MAY be used by a MANET routing protocol, or by an extension\n   of a MANET routing
    protocol, according to its specification.\n   This document specifies how to include
    an ICV for a packet, a\n   message, and addresses in an Address Block within a
    message, using\n   such TLVs.  This document also specifies how to treat an empty
    Packet\n   TLV Block, and \"mutable\" fields, specifically the <msg-hop-count>
    and\n   <msg-hop-limit> fields, if present in the Message Header when\n   calculating
    ICVs, such that the resulting ICV can be correctly\n   verified by any recipient.\n
    \  This document describes a generic framework for creating ICVs, and\n   how
    to include these ICVs in TLVs.  In Section 12, an example method\n   for calculating
    such ICVs is given, using a cryptographic function\n   and a hash function, for
    which two TLV type extensions are allocated.\n   This document does not specify
    a protocol.  Protocol specifications\n   that make use of the framework, specified
    in this document, will\n   reference this document in a normative way, and they
    may require the\n   implementation of some or all of the algorithms described
    in this\n   document.  As this document does not specify a protocol itself, key\n
    \  management and key exchange mechanisms are out of scope and may be\n   specified
    in the protocol or protocol extension using this\n   specification.\n"
  title: 3.  Applicability Statement
- contents:
  - "4.  Security Architecture\n   MANET routing protocol specifications may have
    a clause allowing a\n   control message to be rejected as \"badly formed\" or
    \"insecure\" prior\n   to the message being processed or forwarded.  In particular,
    MANET\n   routing protocols such as the Neighborhood Discovery Protocol (NHDP)\n
    \  [RFC6130] and the Optimized Link State Routing Protocol version 2\n   [RFC7181]
    recognize external reasons (such as failure to verify an\n   ICV) for rejecting
    a message that would be considered \"invalid for\n   processing\".\n   This architecture
    is a result of the observation that with respect to\n   security in MANETs, \"one
    size rarely fits all\" and that MANET routing\n   protocol deployment domains
    have varying security requirements\n   ranging from \"unbreakable\" to \"virtually
    none\".  The virtue of this\n   approach is that MANET routing protocol specifications
    (and\n   implementations) can remain \"generic\", with extensions providing\n
    \  proper security mechanisms specific to a deployment domain.\n   The MANET routing
    protocol \"security architecture\", in which this\n   specification situates itself,
    can therefore be summarized as\n   follows:\n   o  MANET routing protocol specifications,
    each with a clause allowing\n      an extension to reject a message (prior to
    processing/forwarding)\n      as \"badly formed\" or \"insecure\".\n   o  MANET
    routing protocol security extensions, each rejecting\n      messages as \"badly
    formed\" or \"insecure\", as appropriate for a\n      given security requirement
    specific to a deployment domain.\n   o  Code points and an exchange format for
    information, necessary for\n      specification of such MANET routing protocol
    security extensions.\n   This document addresses the last of the points above,
    by specifying a\n   common exchange format for cryptographic ICVs and timestamps,
    making\n   reservations from within the Packet TLV, Message TLV, and Address\n
    \  Block TLV registries of [RFC5444], to be used by (and shared among)\n   MANET
    routing protocol security extensions.\n   For the specific decomposition of an
    ICV using a cryptographic\n   function and a hash function (specified in Section
    12), this document\n   specifies two IANA registries (see Section 13) for code
    points for\n   hash functions and cryptographic functions.\n   With respect to
    [RFC5444], this document is:\n   o  Intended to be used in the non-normative,
    but intended, mode of\n      use described in Appendix B of [RFC5444].\n   o  A
    specific example of the Security Considerations section of\n      [RFC5444] (the
    authentication part).\n"
  title: 4.  Security Architecture
- contents:
  - "5.  Overview and Functioning\n   This document specifies a syntactical representation
    of security-\n   related information for use with [RFC5444] addresses, messages,
    and\n   packets, and also specifies IANA registrations (see Section 13) of\n   TLV
    types and type extension registries for these TLV types.\n   Moreover, this document
    provides guidelines for how MANET routing\n   protocols, and MANET routing protocol
    extensions using this\n   specification, should treat ICV and Timestamp TLVs,
    and mutable\n   fields in messages.  This specification does not represent a stand-\n
    \  alone protocol.  MANET routing protocols, and MANET routing protocol\n   extensions
    using this specification, MUST provide instructions as to\n   how to handle packets,
    messages, and addresses with security\n   information, associated as specified
    in this document.\n   This document specifies TLV type assignments (see Section
    13) from\n   the registries defined for Packet, Message, and Address Block TLVs
    in\n   [RFC5444].  When a TLV type is assigned from one of these registries,\n
    \  a registry for type extensions for that TLV type is created by IANA.\n   This
    document specifies these type extension registries, in order to\n   specify internal
    structure (and accompanying processing) of the\n   <value> field of a TLV.\n   For
    example, and as specified in this document, an ICV TLV with type\n   extension
    = 0 specifies that the <value> field has no predefined\n   internal structure,
    but is simply a sequence of octets.  An ICV TLV\n   with type extension = 1 specifies
    that the <value> field has a\n   predefined internal structure and defines its
    interpretation.  An ICV\n   TLV with type extension = 2 (added in this document)
    is the same as\n   an ICV TLV with type extension = 1, except that the integrity\n
    \  protection also covers the source address of the IP datagram carrying\n   the
    packet, message, or Address Block.\n   Specifically, with type extension = 1 or
    type extension = 2, the\n   <value> field contains the result of combining a cryptographic\n
    \  function and a hash function, calculated over the contents of the\n   packet,
    message, or Address Block.  The <value> field contains sub-\n   fields indicating
    which hash function and cryptographic function have\n   been used, as specified
    in Section 12.\n   Other documents can request assignments for other type extensions;
    if\n   they do so, they MUST specify their internal structure (if any) and\n   interpretation.\n"
  title: 5.  Overview and Functioning
- contents:
  - "6.  General ICV TLV Structure\n   The value of the ICV TLV is:\n      <value>
    := <ICV-value>+\n   where:\n      <ICV-value> is a field, of length <length> octets
    (except in a\n      multivalue Address Block TLV, where each <ICV-value> is of
    length\n      single-length octets) that contains the information to be\n      interpreted
    by the ICV verification process, as specified by the\n      type extension.\n
    \  Note that this does not specify how to calculate the <ICV-value> nor\n   the
    internal structure thereof, if any; such information MUST be\n   specified by
    the type extension for the ICV TLV type; see Section 13.\n   This document specifies
    three such type extensions: one for ICVs\n   without predefined structures and
    two for ICVs constructed combining\n   a cryptographic function and a hash function.\n"
  title: 6.  General ICV TLV Structure
- contents:
  - "7.  General Timestamp TLV Structure\n   The value of the Timestamp TLV is:\n
    \     <value> := <time-value>+\n   where:\n      <time-value> is a field, of length
    <length> octets (except in a\n      multivalue Address Block TLV, where each <time-value>
    is of length\n      single-length octets) that contains the timestamp.\n   Note
    that this does not specify how to calculate the <time-value> nor\n   the internal
    structure thereof, if any; such information MUST be\n   specified by the type
    extension for the TIMESTAMP TLV type; see\n   Section 13.\n   A timestamp is essentially
    \"freshness information\".  As such, its\n   setting and interpretation are to
    be determined by the MANET routing\n   protocol, or MANET routing protocol extension,
    that uses the\n   timestamp and can, for example, correspond to a POSIX timestamp,
    GPS\n   timestamp, or a simple sequence number.  Note that ensuring time\n   synchronization
    in a MANET may be difficult because of the\n   decentralized architecture as well
    as highly dynamic topology due to\n   mobility or other factors.  It is out of
    scope for this document to\n   specify a time synchronization mechanism.\n"
  title: 7.  General Timestamp TLV Structure
- contents:
  - "8.  Packet TLVs\n   Two Packet TLVs are defined: one for including the cryptographic
    ICV\n   of a packet and one for including the timestamp indicating the time\n
    \  at which the cryptographic ICV was calculated.\n"
  - contents:
    - "8.1.  ICV Packet TLV\n   An ICV Packet TLV is an example of an ICV TLV as described
      in\n   Section 6.  When determining the <ICV-value> for a packet, and adding\n
      \  an ICV Packet TLV to a packet, the following considerations MUST be\n   applied:\n
      \  o  Because packets as defined in [RFC5444] are never forwarded by\n      routers,
      no special considerations are required regarding mutable\n      fields (i.e.,
      <msg-hop-count> and <msg-hop-limit>), if present\n      within any messages
      in the packet, when calculating the ICV.\n   o  Any ICV Packet TLVs already
      present in the Packet TLV Block MUST\n      be removed before calculating the
      ICV, and the Packet TLV Block\n      size MUST be recalculated accordingly.\n
      \  o  If the Packet TLV Block now contains no Packet TLVs, the Packet\n      TLV
      Block MUST be removed, and the phastlv bit in the <pkt-flags>\n      field in
      the Packet Header MUST be cleared ('0').\n   o  Any removed ICV Packet TLVs
      MUST be restored after having\n      calculated the ICV, and the Packet TLV
      Block size MUST be\n      recalculated accordingly.\n   o  When any removed
      ICV Packet TLVs, and the newly calculated ICV\n      Packet TLV, are added to
      the packet, if there is no Packet TLV\n      Block, then one MUST be added,
      including setting ('1') the phastlv\n      bit in the <pkt-flags> field in the
      Packet Header.\n   The rationale for removing any ICV Packet TLVs already present
      prior\n   to calculating the ICV is that several ICV TLVs may be added to the\n
      \  same packet, e.g., using different ICV cryptographic and/or hash\n   functions.
      \ The rationale for removing an empty Packet TLV Block is\n   because the receiver
      of the packet cannot tell the difference between\n   what was an absent Packet
      TLV Block, and what was an empty Packet TLV\n   Block when removing and verifying
      the ICV Packet TLV if no other\n   Packet TLVs are present.\n"
    title: 8.1.  ICV Packet TLV
  - contents:
    - "8.2.  TIMESTAMP Packet TLV\n   A TIMESTAMP Packet TLV is an example of a Timestamp
      TLV as described\n   in Section 7.  If a packet contains one or more TIMESTAMP
      TLVs and\n   one or more ICV TLVs, then the TIMESTAMP TLVs (as well as any other\n
      \  Packet TLVs) MUST be added to the packet before the ICV TLVs, in\n   order
      to include the timestamps and other TLVs in the calculation of\n   the ICVs.\n"
    title: 8.2.  TIMESTAMP Packet TLV
  title: 8.  Packet TLVs
- contents:
  - "9.  Message TLVs\n   Two Message TLVs are defined: one for including the cryptographic
    ICV\n   of a message and one for including the timestamp indicating the time\n
    \  at which the cryptographic ICV was calculated.\n"
  - contents:
    - "9.1.  ICV Message TLV\n   An ICV Message TLV is an example of an ICV TLV as
      described in\n   Section 6.  When determining the <ICV-value> for a message,
      the\n   following considerations MUST be applied:\n   o  The fields <msg-hop-limit>
      and <msg-hop-count>, if present in the\n      Message Header, MUST both be assumed
      to have the value 0 (zero)\n      when calculating the ICV.\n   o  Any ICV Message
      TLVs already present in the Message TLV Block MUST\n      be removed before
      calculating the ICV, and the message size as\n      well as the Message TLV
      Block size MUST be recalculated\n      accordingly.  Also, all relevant TLVs
      other than ICV TLVs MUST be\n      added prior to ICV value calculation.\n   o
      \ Any removed ICV Message TLVs MUST be restored after having\n      calculated
      the ICV, and the message size as well as the Message\n      TLV Block size MUST
      be recalculated accordingly.\n   The rationale for removing any ICV Message
      TLVs already present prior\n   to calculating the ICV is that several ICV TLVs
      may be added to the\n   same message, e.g., using different ICV cryptographic
      and/or hash\n   functions.\n"
    title: 9.1.  ICV Message TLV
  - contents:
    - "9.2.  TIMESTAMP Message TLV\n   A TIMESTAMP Message TLV is an example of a
      Timestamp TLV as described\n   in Section 7.  If a message contains one or more
      TIMESTAMP TLVs and\n   one or more ICV TLVs, then the TIMESTAMP TLVs (as well
      as any other\n   Message TLVs) MUST be added to the message before the ICV TLVs,
      in\n   order to include the timestamps and other Message TLVs in the\n   calculation
      of the ICV.\n"
    title: 9.2.  TIMESTAMP Message TLV
  title: 9.  Message TLVs
- contents:
  - "10.  Address Block TLVs\n   Two Address Block TLVs are defined: one for associating
    a\n   cryptographic ICV to one or more addresses and their associated\n   information
    and one for including the timestamp indicating the time\n   at which the cryptographic
    ICV was calculated.\n"
  - contents:
    - "10.1.  ICV Address Block TLV\n   An ICV Address Block TLV is an example of
      an ICV TLV as described in\n   Section 6.  The ICV is calculated over one or
      more addresses,\n   concatenated with any other values -- for example, other
      Address\n   Block TLV <value> fields -- associated with those addresses.  A
      MANET\n   routing protocol, or MANET routing protocol extension, using ICV\n
      \  Address Block TLVs MUST specify how to include any such concatenated\n   attributes
      of the addresses in the calculation and verification\n   processes for the ICV.
      \ When determining an <ICV-value> for one or\n   more addresses, the following
      consideration MUST be applied:\n   o  If other TLV values are concatenated with
      the addresses for\n      calculating the ICV, the corresponding TLVs MUST NOT
      be ICV\n      Address Block TLVs already associated with any of the addresses.\n
      \  The rationale for not concatenating the addresses with any ICV TLV\n   values
      already associated with the addresses when calculating the ICV\n   is that several
      ICVs may be added to the same address or addresses,\n   e.g., using different
      ICV cryptographic and/or hash functions, and\n   the order of addition is not
      known to the recipient.\n"
    title: 10.1.  ICV Address Block TLV
  - contents:
    - "10.2.  TIMESTAMP Address Block TLV\n   A TIMESTAMP Address Block TLV is an
      example of a Timestamp TLV as\n   described in Section 7.  If one or more TIMESTAMP
      TLVs and one or\n   more ICV TLVs are associated with an address, the relevant
      TIMESTAMP\n   TLV <time-value>(s) MUST be included before calculating the value
      of\n   the ICV to be contained in the ICV TLV value (i.e., concatenated with\n
      \  the associated addresses and any other values as described in\n   Section
      10.1).\n"
    title: 10.2.  TIMESTAMP Address Block TLV
  title: 10.  Address Block TLVs
- contents:
  - "11.  ICV: Basic\n   The basic ICV, represented by way of an ICV TLV with type\n
    \  extension = 0, has as TLV value a simple bit-field without specified\n   structure
    (i.e, without explicitly included hash function, crypto\n   function, key ID or
    other parameters).  Moreover, it is not specified\n   how to calculate the <ICV-value>.
    \ It is assumed that the mechanism\n   specifying how ICVs are calculated and
    verified, as well as which\n   parameters (if any) need to be exchanged prior
    to using the TLV with\n   type extension = 0, is established outside of this specification,\n
    \  e.g., by administrative configuration or external out-of-band\n   signaling.\n
    \  The <ICV-value>, when using type extension = 0, is:\n      <ICV-value> := <ICV-data>\n
    \  where:\n      <ICV-data> is a field, of length <length> octets (or single-length\n
    \     octets in a multivalue Address Block TLV) that contains the\n      cryptographic
    ICV.\n"
  title: '11.  ICV: Basic'
- contents:
  - "12.  ICV: Hash Function and Cryptographic Function\n   One common way of calculating
    an ICV is combining a cryptographic\n   function and a hash function applied to
    the content.  This\n   decomposition is specified in this section, using either
    type\n   extension = 1 or type extension = 2, in the ICV TLVs.\n"
  - contents:
    - "12.1.  General ICV TLV Structure\n   The following data structure allows representation
      of a cryptographic\n   ICV, including specification of the appropriate hash
      function and\n   cryptographic function used for calculating the ICV:\n      <ICV-value>
      := <hash-function>\n                     <cryptographic-function>\n                     <key-id-length>\n
      \                    <key-id>?\n                     <ICV-data>\n   where:\n
      \     <hash-function> is a one-octet unsigned integer field specifying\n      the
      hash function.\n      <cryptographic-function> is a one-octet unsigned integer
      field\n      specifying the cryptographic function.\n      <key-id-length> is
      a one-octet unsigned integer field specifying\n      the length of the <key-id>
      field as a number of octets.  The value\n      zero (0x00) is reserved for using
      a single pre-installed, shared\n      key.\n      <key-id> is a field specifying
      the key identifier of the key that\n      was used to calculate the ICV of the
      message, which allows unique\n      identification of different keys with the
      same originator.  It is\n      the responsibility of each key originator to
      make sure that\n      actively used keys that it issues have distinct key identifiers.\n
      \     If <key-id-length> equals zero (0x00), the <key-id> field is not\n      contained
      in the TLV, and a single pre-installed, shared key is\n      used.\n      <ICV-data>
      is a field with length <length> - 3 - <key-id-length>\n      octets (except
      in a multivalue Address Block TLV, in which it is\n      single-length - 3 -
      <key-id-length> octets) and that contains the\n      cryptographic ICV.\n   The
      version of this TLV, specified in this section, assumes that,\n   unless otherwise
      specified, calculating the ICV can be decomposed\n   into:\n      ICV-value
      = cryptographic-function(hash-function(content))\n   In some cases, a different
      combination of cryptographic function and\n   hash function may be specified.
      \ This is the case for the Hashed\n   Message Authentication Code (HMAC) function,
      which is specified as\n   defined in Section 13.12, using the hash function
      twice.  Using\n   cryptographic-function \"none\" is provided for symmetry and
      possible\n   future use, but it SHOULD NOT be used with any currently specified\n
      \  hash function.\n   The difference between the two type extensions is that
      in addition to\n   the information covered by the ICV using type extension =
      1 (which is\n   detailed in the following sections), the ICV using type extension
      = 2\n   also MUST cover the source address of the IP datagram carrying the\n
      \  corresponding packet, message, or Address Block.\n   The <ICV-data> field
      MAY be truncated after being calculated, this is\n   indicated by its length,
      calculated as described above.  The\n   truncation MUST be as specified for
      the relevant cryptographic\n   function (and, if appropriate, hash function).\n
      \  o  When using truncation, the guidelines for minimal ICV length set\n      out
      in [NIST-SP-800-107] MUST be followed.  In particular the\n      <ICV-data>
      field when using HMAC MUST NOT be truncated below 4\n      octets.\n   o  The
      truncated ICV length MUST be so large that the probability of\n      success
      of a dictionary attack is acceptably small.  Such a\n      success will arise
      if the ICV of a spoofed packet or message is\n      verified.  The probability
      of success is a function of (a) how\n      many routers can be attacked, (b)
      how fast a router can receive\n      packets or messages and attempt to verify
      their ICV, (c) the\n      truncated ICV length, and (d) the lifetime of the
      network.  If the\n      truncated ICV length in bits is L, then 2^L packets
      or messages\n      are required to attack with certainty of success.  With a\n
      \     verification rate of R packets/messages per second, applied to N\n      routers
      over an available time of T, the probability of success is\n      given by NRT/2^L.
      \ If this is not to exceed a probability of P,\n      then L > log2(NRT/P).
      \ For example, if N is 32, R is 1000, T is\n      86400 (I day) and P is 10^-6,
      then L must be at least 52 bits.\n   Some of the cryptographic and hash functions
      listed in Section 13\n   require the length of the content to be digitally signed
      to be a\n   multiple of a certain number of octets.  As a consequence, they\n
      \  specify padding mechanisms, e.g., AES-CMAC [RFC4493] specifies a\n   padding
      mechanism for message lengths that are not equal to a\n   multiple of 16 octets.
      \ Implementations of the framework in this\n   document MUST support appropriate
      padding mechanisms, as specified in\n   the cryptographic or hash function specifications.\n
      \  The hash function and the cryptographic function correspond to the\n   entries
      in two IANA registries, which are described in Section 13.\n"
    - contents:
      - "12.1.1.  Rationale\n   The rationale for separating the hash function and
        the cryptographic\n   function into two octets instead of having all combinations
        in a\n   single octet -- possibly as a TLV type extension -- is that adding\n
        \  further hash functions or cryptographic functions in the future may\n   lead
        to a non-contiguous number space as well as a smaller overall\n   space.\n
        \  The rationale for not including a field that lists parameters of the\n
        \  cryptographic ICV in the TLV is that, before being able to validate a\n
        \  cryptographic ICV, routers have to exchange or acquire keys.  Any\n   additional
        parameters can be provided together with the keys in that\n   bootstrap process.
        \ Therefore, it is not necessary, and would even\n   entail an extra overhead,
        to transmit the parameters within every\n   message.\n   The rationale for
        the addition of type extension = 2 is that the\n   source address is used
        in some cases, such as when processing HELLO\n   messages in [RFC6130].  This
        is applicable only to packets (which\n   only ever travel one hop) and messages
        (and their Address Blocks)\n   that only travel one hop.  It is not applicable
        to messages that may\n   be forwarded more than one hop, such as Topology
        Control (TC)\n   messages in [RFC7181].\n"
      title: 12.1.1.  Rationale
    - contents:
      - "12.1.2.  Parameters\n   As described in Section 12.1.1, parameters are selected\n
        \  administratively on each router before using this framework in a\n   MANET,
        in addition to exchanging the keys between MANET routers.\n   This was a design
        decision in [RFC6622] and is kept in this\n   specification for reasons of
        backwards compatibility.\n   The following parameters are RECOMMENDED and
        SHOULD be those chosen\n   administratively, unless there are good reasons
        otherwise:\n   o  For crypto function RSA:\n      *  Signature scheme: RSASSA-PSS
        with the default parameters:\n         rSASSA-PSS-Default-Identifier (as defined
        in [RFC3447])\n      *  Common exponent: 65537\n   o  For crypto function
        ECDSA:\n      *  Curve name: exchanged as part of key distribution\n      *
        \ Hash function: The hash function MUST be pinned to the curve,\n         i.e.,
        use SHA-256 for the p-256 curve, SHA-384 for p-384, etc.\n   o  For crypto
        function AES:\n      *  Authentication algorithm: Cipher-Based Message Authentication\n
        \        Code (CMAC) (as defined in [RFC4493])\n      *  Hash function: None\n"
      title: 12.1.2.  Parameters
    title: 12.1.  General ICV TLV Structure
  - contents:
    - "12.2.  Considerations for Calculating the ICV\n   The considerations listed
      in the following subsections MUST be\n   applied when calculating the ICV for
      Packet, Message, and Address\n   Block TLVs, respectively.\n"
    - contents:
      - "12.2.1.  ICV Packet TLV\n   When determining the <ICV-data> for a packet,
        with type\n   extension = 1:\n   o  The ICV is calculated over the fields
        <hash-function>,\n      <cryptographic-function>, <key-id-length>, and --
        if present --\n      <key-id> (in that order), followed by the entire packet,
        including\n      the Packet Header, including all Packet TLVs (other than
        ICV\n      Packet TLVs), and all included messages.  The considerations of\n
        \     Section 8.1 MUST be applied.\n   When determining the <ICV-data> for
        a packet, with type\n   extension = 2:\n   o  The same procedure as for type
        extension = 1 is used, except that\n      the data used consists of a representation
        of the source address\n      of the IP datagram carrying the packet, followed
        by the remaining\n      data (as for type extension = 1).  The representation
        of the\n      source address consists of a single octet containing the address\n
        \     length, in octets, followed by that many octets containing the\n      address
        in network byte order.\n"
      title: 12.2.1.  ICV Packet TLV
    - contents:
      - "12.2.2.  ICV Message TLV\n   When determining the <ICV-data> for a message,
        with type\n   extension = 1:\n   o  The ICV is calculated over the fields
        <hash-function>,\n      <cryptographic-function>, <key-id-length>, and --
        if present --\n      <key-id> (in that order), followed by the entire message.
        \ The\n      considerations in Section 9.1 MUST be applied.\n   When determining
        the <ICV-data> for a message, with type\n   extension = 2:\n   o  The same
        procedure as for type extension = 1 is used, except that\n      the data used
        consists of a representation of the source address\n      of the IP datagram
        carrying the message, followed by the remaining\n      data (as for type extension
        = 1).  The representation of the\n      source address consists of a single
        octet containing the address\n      length, in octets, followed by that many
        octets containing the\n      address in network byte order.\n"
      title: 12.2.2.  ICV Message TLV
    - contents:
      - "12.2.3.  ICV Address Block TLV\n   When determining the <ICV-data> for one
        or more addresses, with type\n   extension = 1:\n   o  The ICV is calculated
        over the fields <hash-function>,\n      <cryptographic-function>, <key-id-length>,
        and -- if present --\n      <key-id> (in that order), followed by the addresses,
        and followed\n      by any other values -- for example, other Address Block
        TLV\n      <value>s that are associated with those addresses.  A MANET\n      routing
        protocol, or MANET routing protocol extension, using ICV\n      Address Block
        TLVs MUST specify how to include any such\n      concatenated attribute of
        the addresses in the verification\n      process of the ICV.  The consideration
        in Section 10.1 MUST be\n      applied.\n   When determining the <ICV-data>
        for one or more addresses, with type\n   extension = 2:\n   o  The same procedure
        as for type extension = 1 is used, except that\n      the data used consists
        of a representation of the source address\n      of the IP datagram carrying
        the Address Block, followed by the\n      remaining data (as for type extension
        = 1).  The representation of\n      the source address consists of a single
        octet containing the\n      address length, in octets, followed by that many
        octets containing\n      the address in network byte order.\n"
      title: 12.2.3.  ICV Address Block TLV
    title: 12.2.  Considerations for Calculating the ICV
  - contents:
    - "12.3.  Example of a Message Including an ICV\n   The sample message depicted
      in Figure 1 is derived from Appendix E of\n   [RFC5444].  The message contains
      an ICV Message TLV, with the value\n   representing an ICV that is 16 octets
      long and a key identifier that\n   is 4 octets long.  The type extension of
      the Message TLV is 1, for\n   the specific decomposition of an ICV using a cryptographic
      function\n   and a hash function, as specified in Section 12.\n      0                   1
      \                  2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message Type  | MF=15 | MAL=3 |      Message Length = 82      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                  Message Originator Address                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |   Hop Limit   |   Hop Count   |    Message Sequence Number    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Message TLV Block Length = 36 |   TLV Type    |  MTLVF = 16   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Value Len = 6 |                     Value                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                 Value (cont)                  |TLV Type = ICV |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  MTLVF = 144  |  MTLVExt = 1  |Value Len = 23 |   Hash Func   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Crypto Func  | KeyID Len = 4 |        Key Identifier         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Key Identifier (cont)     |           ICV Value           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                       ICV Value (cont)                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                       ICV Value (cont)                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |                       ICV Value (cont)                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |       ICV Value (cont)        | Num Addr = 2  |   ABF = 48    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Tail Len = 2  |             Mid 0             |     Mid 1     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Mid 1 (cont)  | Prefix Length |    ABTLV Block Length = 0     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Num Addr = 3  |   ABF = 128   | Head Len = 2  |     Head      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Head (cont)  |             Mid 0             |     Mid 1     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    | Mid 1 (cont)  |             Mid 2             |ABTLV Block ...|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |... Length = 9 |   TLV Type    |  ABTLVF = 16  | Value Len = 2 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |             Value             |   TLV Type    |  ABTLVF = 32  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |  Index Start  |  Index Stop   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                   Figure 1: Example Message with ICV\n   MF:      Message
      Flags, see Section 5.2 of [RFC5444].\n   MAL:     Message Address Length, see
      Section 5.2 of [RFC5444].\n   MTLVF:   Message TLV Flags, see Section 5.4.1
      of [RFC5444].\n   MTLVExt: Message TLV Type Extension, see Section 5.4.1 of
      [RFC5444].\n   AF:      Address Block Flags, see Section 5.3 of [RFC5444].\n
      \  ABTLV:   Address Block TLV, see Section 5.4 of [RFC5444].\n   ABTLVF:  Address
      Block TLV Flags, see Section 5.4.1 of [RFC5444].\n                     Example
      Message with ICV - Legend\n"
    title: 12.3.  Example of a Message Including an ICV
  title: '12.  ICV: Hash Function and Cryptographic Function'
- contents:
  - "13.  IANA Considerations\n   The IANA registrations for TLV Types and the TLV
    type extension\n   registries given in this specification replace the identical\n
    \  registrations and registries from [RFC6622].\n   This specification defines
    the following TLV Types, replacing the\n   original specifications in [RFC6622]:\n
    \  o  Two Packet TLV Types, which have been allocated from the 0-223\n      range
    of the \"Packet TLV Types\" repository of [RFC5444], as\n      specified in Table
    1.\n   o  Two Message TLV Types, which have been allocated from the 0-127\n      range
    of the \"Message TLV Types\" repository of [RFC5444], as\n      specified in Table
    2.\n   o  Two Address Block TLV Types, which have been allocated from the\n      0-127
    range of the \"Address Block TLV Types\" repository of\n      [RFC5444], as specified
    in Table 3.\n   This specification updates the following registries that were
    created\n   in [RFC6622]:\n   o  A type extension registry for each of these TLV
    types with values\n      as listed in Tables 1, 2, and 3.\n   The following terms
    are used as defined in [BCP26]: \"Namespace\",\n   \"Registration\", and \"Designated
    Expert\".\n   The following policy is used as defined in [BCP26]: \"Expert Review\".\n"
  - contents:
    - "13.1.  Expert Review: Evaluation Guidelines\n   For TLV type extensions registries
      where an Expert Review is\n   required, the Designated Expert SHOULD take the
      same general\n   recommendations into consideration as those specified by [RFC5444].\n
      \  For both TIMESTAMP and ICV TLVs, functionally similar extensions for\n   Packet,
      Message, and Address Block TLVs SHOULD be numbered\n   identically.\n"
    title: '13.1.  Expert Review: Evaluation Guidelines'
  - contents:
    - "13.2.  Packet TLV Types\n   IANA has, in accordance with [RFC6622], made allocations
      from the\n   \"Packet TLV Types\" namespace of [RFC5444] for the Packet TLVs\n
      \  specified in Table 1.  IANA has modified this allocation as\n   indicated.\n
      \                   +------+-------------+-----------+\n                    |
      Type | Description | Reference |\n                    +------+-------------+-----------+\n
      \                   |  5   |     ICV     |  RFC 7182 |\n                    |
      \ 6   |  TIMESTAMP  |  RFC 7182 |\n                    +------+-------------+-----------+\n
      \                        Table 1: Packet TLV Types\n"
    title: 13.2.  Packet TLV Types
  - contents:
    - "13.3.  Message TLV Types\n   IANA has, in accordance with [RFC6622], made allocations
      from the\n   \"Message TLV Types\" namespace of [RFC5444] for the Message TLVs\n
      \  specified in Table 2.  IANA has modified this allocation as\n   indicated.\n
      \                   +------+-------------+-----------+\n                    |
      Type | Description | Reference |\n                    +------+-------------+-----------+\n
      \                   |  5   |     ICV     |  RFC 7182 |\n                    |
      \ 6   |  TIMESTAMP  |  RFC 7182 |\n                    +------+-------------+-----------+\n
      \                       Table 2: Message TLV Types\n"
    title: 13.3.  Message TLV Types
  - contents:
    - "13.4.  Address Block TLV Types\n   IANA has, in accordance with [RFC6622],
      made allocations from the\n   \"Address Block TLV Types\" namespace of [RFC5444]
      for the Packet TLVs\n   specified in Table 3.  IANA has modified this allocation
      as\n   indicated.\n                    +------+-------------+-----------+\n
      \                   | Type | Description | Reference |\n                    +------+-------------+-----------+\n
      \                   |  5   |     ICV     |  RFC 7182 |\n                    |
      \ 6   |  TIMESTAMP  |  RFC 7182 |\n                    +------+-------------+-----------+\n
      \                    Table 3: Address Block TLV Types\n"
    title: 13.4.  Address Block TLV Types
  - contents:
    - "13.5.  ICV Packet TLV Type Extensions\n   IANA has, in accordance with [RFC6622],
      made allocations from the\n   \"ICV Packet TLV Type Extensions\" namespace of
      [RFC6622] for the\n   Packet TLVs specified in Table 4.  IANA has modified this
      allocation\n   (including defining type extension = 2) as indicated.\n   +-----------+-------------------------------------------+-----------+\n
      \  |    Type   |                Description                | Reference |\n   |
      Extension |                                           |           |\n   +-----------+-------------------------------------------+-----------+\n
      \  |     0     |              ICV of a packet              |  RFC 7182 |\n   |
      \    1     | ICV, using a cryptographic function and a |  RFC 7182 |\n   |           |
      hash function, as specified in Section 12 |           |\n   |           |              of
      this document             |           |\n   |     2     | ICV, using a cryptographic
      function and a |  RFC 7182 |\n   |           |    hash function, and including
      the IP    |           |\n   |           |  datagram source address, as specified
      in |           |\n   |           |        Section 12 of this document        |
      \          |\n   |   3-251   |         Unassigned; Expert Review         |           |\n
      \  |  252-255  |       Reserved for Experimental Use       |  RFC 7182 |\n   +-----------+-------------------------------------------+-----------+\n
      \                 Table 4: ICV Packet TLV Type Extensions\n   More than one
      ICV Packet TLV with the same type extension MAY be\n   included in a packet
      if these represent different ICV calculations\n   (e.g., with type extension
      1 or 2 and different cryptographic\n   function and/or hash function or with
      a different key identifier).\n   ICV Packet TLVs that carry what is declared
      to be the same\n   information MUST NOT be included in the same packet.\n"
    title: 13.5.  ICV Packet TLV Type Extensions
  - contents:
    - "13.6.  TIMESTAMP Packet TLV Type Extensions\n   IANA has, in accordance with
      [RFC6622], made allocations from the\n   \"TIMESTAMP Packet TLV Type Extensions\"
      namespace of [RFC6622] for the\n   Packet TLVs specified in Table 5.  IANA has
      modified this allocation\n   as indicated.\n   +-----------+-------------------------------------------+-----------+\n
      \  |    Type   |                Description                | Reference |\n   |
      Extension |                                           |           |\n   +-----------+-------------------------------------------+-----------+\n
      \  |     0     |  Unsigned timestamp of arbitrary length,  |  RFC 7182 |\n   |
      \          | given by the TLV Length field.  The MANET |           |\n   |           |
      \  routing protocol has to define how to   |           |\n   |           |          interpret
      this timestamp         |           |\n   |     1     |  Unsigned 32-bit timestamp,
      as specified  |  RFC 7182 |\n   |           |            in [IEEE1003.1-2008]
      \          |           |\n   |     2     |   NTP timestamp format, as specified
      in   |  RFC 7182 |\n   |           |                 [RFC5905]                 |
      \          |\n   |     3     | Signed timestamp of arbitrary length with |  RFC
      7182 |\n   |           |  no constraints such as monotonicity.  In |           |\n
      \  |           |  particular, it may represent any random  |           |\n   |
      \          |                   value                   |           |\n   |   4-251
      \  |         Unassigned; Expert Review         |           |\n   |  252-255
      \ |       Reserved for Experimental Use       |  RFC 7182 |\n   +-----------+-------------------------------------------+-----------+\n
      \              Table 5: TIMESTAMP Packet TLV Type Extensions\n   More than one
      TIMESTAMP Packet TLV with the same type extension MUST\n   NOT be included in
      a packet.\n"
    title: 13.6.  TIMESTAMP Packet TLV Type Extensions
  - contents:
    - "13.7.  ICV Message TLV Type Extensions\n   IANA has, in accordance with [RFC6622],
      made allocations from the\n   \"ICV Message TLV Type Extensions\" namespace
      of [RFC6622] for the\n   Message TLVs specified in Table 6.  IANA has modified
      this allocation\n   (including defining type extension = 2) as indicated.\n
      \  +-----------+-------------------------------------------+-----------+\n   |
      \   Type   |                Description                | Reference |\n   | Extension
      |                                           |           |\n   +-----------+-------------------------------------------+-----------+\n
      \  |     0     |              ICV of a message             |  RFC 7182 |\n   |
      \    1     | ICV, using a cryptographic function and a |  RFC 7182 |\n   |           |
      hash function, as specified in Section 12 |           |\n   |           |              of
      this document             |           |\n   |     2     | ICV, using a cryptographic
      function and a |  RFC 7182 |\n   |           |    hash function, and including
      the IP    |           |\n   |           |  datagram source address, as specified
      in |           |\n   |           |        Section 12 of this document        |
      \          |\n   |   3-251   |         Unassigned; Expert Review         |           |\n
      \  |  252-255  |       Reserved for Experimental Use       |  RFC 7182 |\n   +-----------+-------------------------------------------+-----------+\n
      \                Table 6: ICV Message TLV Type Extensions\n   More than one
      ICV Message TLV with the same type extension MAY be\n   included in a message
      if these represent different ICV calculations\n   (e.g., with type extension
      1 or 2 and different cryptographic\n   function and/or hash function or with
      a different key identifier).\n   ICV Message TLVs that carry what is declared
      to be the same\n   information MUST NOT be included in the same message.\n"
    title: 13.7.  ICV Message TLV Type Extensions
  - contents:
    - "13.8.  TIMESTAMP Message TLV Type Extensions\n   IANA has, in accordance with
      [RFC6622], made allocations from the\n   \"TIMESTAMP Message TLV Type Extensions\"
      namespace of [RFC6622] for\n   the Message TLVs specified in Table 7.  IANA
      has modified this\n   allocation as indicated.\n   +-----------+-------------------------------------------+-----------+\n
      \  |    Type   |                Description                | Reference |\n   |
      Extension |                                           |           |\n   +-----------+-------------------------------------------+-----------+\n
      \  |     0     |  Unsigned timestamp of arbitrary length,  |  RFC 7182 |\n   |
      \          | given by the TLV Length field.  The MANET |           |\n   |           |
      \  routing protocol has to define how to   |           |\n   |           |          interpret
      this timestamp         |           |\n   |     1     |  Unsigned 32-bit timestamp,
      as specified  |  RFC 7182 |\n   |           |         in POSIX [IEEE1003.1-2008]
      \       |           |\n   |     2     |   NTP timestamp format, as specified
      in   |  RFC 7182 |\n   |           |                 [RFC5905]                 |
      \          |\n   |     3     | Signed timestamp of arbitrary length with |  RFC
      7182 |\n   |           |  no constraints such as monotonicity.  In |           |\n
      \  |           |  particular, it may represent any random  |           |\n   |
      \          |                   value                   |           |\n   |   4-251
      \  |         Unassigned; Expert Review         |           |\n   |  252-255
      \ |       Reserved for Experimental Use       |  RFC 7182 |\n   +-----------+-------------------------------------------+-----------+\n
      \             Table 7: TIMESTAMP Message TLV Type Extensions\n   More than one
      TIMESTAMP Message TLV with the same type extension MUST\n   NOT be included
      in a message.\n"
    title: 13.8.  TIMESTAMP Message TLV Type Extensions
  - contents:
    - "13.9.  ICV Address Block TLV Type Extensions\n   IANA has, in accordance with
      [RFC6622], made allocations from the\n   \"ICV Address Block TLV Type Extensions\"
      namespace of [RFC6622] for\n   the Address Block TLVs specified in Table 8.
      \ IANA has modified this\n   allocation (including defining type extension =
      2) as indicated.\n   +-----------+-------------------------------------------+-----------+\n
      \  |    Type   |                Description                | Reference |\n   |
      Extension |                                           |           |\n   +-----------+-------------------------------------------+-----------+\n
      \  |     0     |    ICV of an object (e.g., an address)    |  RFC 7182 |\n   |
      \    1     | ICV, using a cryptographic function and a |  RFC 7182 |\n   |           |
      hash function, as specified in Section 12 |           |\n   |           |              of
      this document             |           |\n   |     2     | ICV, using a cryptographic
      function and a |  RFC 7182 |\n   |           |    hash function, and including
      the IP    |           |\n   |           |  datagram source address, as specified
      in |           |\n   |           |        Section 12 of this document        |
      \          |\n   |   3-251   |         Unassigned; Expert Review         |           |\n
      \  |  252-255  |       Reserved for Experimental Use       |  RFC 7182 |\n   +-----------+-------------------------------------------+-----------+\n
      \             Table 8: ICV Address Block TLV Type Extensions\n   More than one
      ICV Address Block TLV with the same type extension MAY\n   be associated with
      an address if these represent different ICV\n   calculations (e.g., with type
      extension = 1 or type extension = 2 and\n   different cryptographic function
      and/or hash function or with a\n   different key identifier).  ICV Address Block
      TLVs that carry what is\n   declared to be the same information MUST NOT be
      associated with the\n   same address.\n"
    title: 13.9.  ICV Address Block TLV Type Extensions
  - contents:
    - "13.10.  TIMESTAMP Address Block TLV Type Extensions\n   IANA has, in accordance
      with [RFC6622], made allocations from the\n   \"TIMESTAMP Address Block TLV
      Type Extensions\" namespace of [RFC6622]\n   for the Address Block TLVs specified
      in Table 9.  IANA has modified\n   this allocation as indicated.\n   +-----------+-------------------------------------------+-----------+\n
      \  |    Type   |                Description                | Reference |\n   |
      Extension |                                           |           |\n   +-----------+-------------------------------------------+-----------+\n
      \  |     0     |  Unsigned timestamp of arbitrary length,  |  RFC 7182 |\n   |
      \          | given by the TLV Length field.  The MANET |           |\n   |           |
      \  routing protocol has to define how to   |           |\n   |           |          interpret
      this timestamp         |           |\n   |     1     |  Unsigned 32-bit timestamp,
      as specified  |  RFC 7182 |\n   |           |         in POSIX [IEEE1003.1-2008]
      \       |           |\n   |     2     |   NTP timestamp format, as specified
      in   |  RFC 7182 |\n   |           |                 [RFC5905]                 |
      \          |\n   |     3     | Signed timestamp of arbitrary length with |  RFC
      7182 |\n   |           |  no constraints such as monotonicity.  In |           |\n
      \  |           |  particular, it may represent any random  |           |\n   |
      \          |                   value                   |           |\n   |   4-251
      \  |         Unassigned; Expert Review         |           |\n   |  252-255
      \ |       Reserved for Experimental Use       |  RFC 7182 |\n   +-----------+-------------------------------------------+-----------+\n
      \          Table 9: TIMESTAMP Address Block TLV Type Extensions\n   More than
      one TIMESTAMP Address Block TLV with the same type\n   extension MUST NOT be
      associated with any address.\n"
    title: 13.10.  TIMESTAMP Address Block TLV Type Extensions
  - contents:
    - "13.11.  Hash Functions\n   IANA has, in accordance with [RFC6622], created
      a registry for hash\n   functions that can be used when creating an ICV, as
      specified in\n   Section 12 of this document.  The initial assignments and allocation\n
      \  policies are specified in Table 10.  IANA has modified this\n   allocation
      as indicated.\n   +---------+-----------+---------------------------------+-----------+\n
      \  |  Value  | Algorithm |           Description           | Reference |\n   +---------+-----------+---------------------------------+-----------+\n
      \  |    0    |    none   |   The \"identity function\": The  |  RFC 7182 |\n
      \  |         |           |  hash value of an object is the |           |\n   |
      \        |           |          object itself          |           |\n   |    1
      \   |   SHA-1   |        [NIST-FIPS-180-4]        |  RFC 7182 |\n   |    2    |
      \ SHA-224  |        [NIST-FIPS-180-4]        |  RFC 7182 |\n   |    3    |  SHA-256
      \ |        [NIST-FIPS-180-4]        |  RFC 7182 |\n   |    4    |  SHA-384  |
      \       [NIST-FIPS-180-4]        |  RFC 7182 |\n   |    5    |  SHA-512  |        [NIST-FIPS-180-4]
      \       |  RFC 7182 |\n   |  6-251  |           |    Unassigned; Expert Review
      \   |           |\n   | 252-255 |           |  Reserved for Experimental Use
      \ |  RFC 7182 |\n   +---------+-----------+---------------------------------+-----------+\n
      \                    Table 10: Hash Function Registry\n"
    title: 13.11.  Hash Functions
  - contents:
    - "13.12.  Cryptographic Functions\n   IANA has, in accordance with [RFC6622],
      created a registry for the\n   cryptographic functions, as specified in Section
      12 of this document.\n   Initial assignments and allocation policies are specified
      in\n   Table 11.  IANA has modified this allocation as indicated.\n   +---------+-----------+---------------------------------+-----------+\n
      \  |  Value  | Algorithm |           Description           | Reference |\n   +---------+-----------+---------------------------------+-----------+\n
      \  |    0    |    none   |   The \"identity function\": The  |  RFC 7182 |\n
      \  |         |           |  value of an encrypted hash is  |           |\n   |
      \        |           |         the hash itself         |           |\n   |    1
      \   |    RSA    |            [RFC3447]            |  RFC 7182 |\n   |    2    |
      \   DSA    |        [NIST-FIPS-186-4]        |  RFC 7182 |\n   |    3    |    HMAC
      \  |            [RFC2104]            |  RFC 7182 |\n   |    4    |    3DES   |
      \        [NIST-SP-800-67]        |  RFC 7182 |\n   |    5    |    AES    |         [NIST-FIPS-197]
      \        |  RFC 7182 |\n   |    6    |   ECDSA   |            [RFC6090]            |
      \ RFC 7182 |\n   |  7-251  |           |    Unassigned; Expert Review    |           |\n
      \  | 252-255 |           |  Reserved for Experimental Use  |  RFC 7182 |\n   +---------+-----------+---------------------------------+-----------+\n
      \                Table 11: Cryptographic Function Registry\n"
    title: 13.12.  Cryptographic Functions
  title: 13.  IANA Considerations
- contents:
  - "14.  Security Considerations\n   This document does not specify a protocol.  It
    provides a syntactical\n   component for cryptographic ICVs of messages and packets,
    as defined\n   in [RFC5444].  It can be used to address security issues of a MANET\n
    \  routing protocol or MANET routing protocol extension.  As such, it\n   has
    the same security considerations as [RFC5444].\n   In addition, a MANET routing
    protocol or MANET routing protocol\n   extension that uses this specification
    MUST specify how to use the\n   framework and the TLVs presented in this document.
    \ In addition, the\n   protection that the MANET routing protocol or MANET routing
    protocol\n   extensions attain by using this framework MUST be described.\n   As
    an example, a MANET routing protocol that uses this component to\n   reject \"badly
    formed\" or \"insecure\" messages if a control message\n   does not contain a
    valid ICV SHOULD indicate the security assumption\n   that if the ICV is valid,
    the message is considered valid.  It also\n   SHOULD indicate the security issues
    that are counteracted by this\n   measure (e.g., link or identity spoofing) as
    well as the issues that\n   are not counteracted (e.g., compromised keys).\n"
  title: 14.  Security Considerations
- contents:
  - "15.  Acknowledgements\n   The authors would like to thank Bo Berry (Cisco), Alan
    Cullen (BAE\n   Systems), Justin Dean (NRL), Paul Lambert (Marvell), Jerome Milan\n
    \  (Ecole Polytechnique), and Henning Rogge (FGAN) for their\n   constructive
    comments on [RFC6622].\n   The authors also appreciate the detailed reviews of
    [RFC6622] from\n   the Area Directors, in particular Stewart Bryant (Cisco), Stephen\n
    \  Farrell (Trinity College Dublin), and Robert Sparks (Tekelec), as\n   well
    as Donald Eastlake (Huawei) from the Security Directorate.\n   The authors would
    like to thank Justin Dean (NRL) and Henning Rogge\n   (FGAN) for their constructive
    comments on this specification.\n"
  title: 15.  Acknowledgements
- contents:
  - '16.  References

    '
  - contents:
    - "16.1.  Normative References\n   [BCP26]    Narten, T. and H. Alvestrand, \"Guidelines
      for Writing an\n              IANA Considerations Section in RFCs\", BCP 26,
      RFC 5226,\n              May 2008.\n   [IEEE1003.1-2008]\n              IEEE,
      \"Portable Operating System Interface (POSIX)\", IEEE\n              1003.1-2008,
      Base Specifications, Issue 7, December 2008.\n   [NIST-FIPS-180-4]\n              National
      Institute of Standards and Technology, \"Secure\n              Hash Standard
      (SHS)\", FIPS 180-4, March 2012.\n   [NIST-FIPS-186-4]\n              National
      Institute of Standards and Technology, \"Digital\n              Signature Standard
      (DSS)\", FIPS 186-4, July 2013.\n   [NIST-FIPS-197]\n              National
      Institute of Standards and Technology,\n              \"Specification for the
      Advanced Encryption Standard\n              (AES)\", FIPS 197, November 2001.\n
      \  [NIST-SP-800-107]\n              National Institute of Standards and Technology,\n
      \             \"Recommendation for Applications Using Approved Hash\n              Algorithms\",
      SP 800-107, Revision 1, August 2012.\n   [NIST-SP-800-67]\n              National
      Institute of Standards and Technology,\n              \"Recommendation for the
      Triple Data Encryption Algorithm\n              (TDEA) Block Cipher\", Special
      Publication 800-67, Revision\n              1, January 2012.\n   [RFC2104]  Krawczyk,
      H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n              Hashing for Message
      Authentication\", RFC 2104, February\n              1997.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC3447]  Jonsson, J. and B. Kaliski, \"Public-Key
      Cryptography\n              Standards (PKCS) #1: RSA Cryptography Specifications\n
      \             Version 2.1\", RFC 3447, February 2003.\n   [RFC4493]  Song, JH.,
      Poovendran, R., Lee, J., and T. Iwata, \"The\n              AES-CMAC Algorithm\",
      RFC 4493, June 2006.\n   [RFC5444]  Clausen, T., Dearlove, C., Dean, J., and
      C. Adjih,\n              \"Generalized Mobile Ad Hoc Network (MANET) Packet/Message\n
      \             Format\", RFC 5444, February 2009.\n   [RFC5905]  Mills, D., Martin,
      J., Burbank, J., and W. Kasch, \"Network\n              Time Protocol Version
      4: Protocol and Algorithms\n              Specification\", RFC 5905, June 2010.\n
      \  [RFC6090]  McGrew, D., Igoe, K., and M. Salter, \"Fundamental Elliptic\n
      \             Curve Cryptography Algorithms\", RFC 6090, February 2011.\n"
    title: 16.1.  Normative References
  - contents:
    - "16.2.  Informative References\n   [RFC6130]  Clausen, T., Dearlove, C., and
      J. Dean, \"Mobile Ad Hoc\n              Network (MANET) Neighborhood Discovery
      Protocol (NHDP)\",\n              RFC 6130, April 2011.\n   [RFC6622]  Herberg,
      U. and T. Clausen, \"Integrity Check Value and\n              Timestamp TLV
      Definitions for Mobile Ad Hoc Networks\n              (MANETs)\", RFC 6622,
      May 2012.\n   [RFC7181]  Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg,\n
      \             \"The Optimized Link State Routing Protocol Version 2\", RFC\n
      \             7181, April 2014.\n"
    title: 16.2.  Informative References
  title: 16.  References
- contents:
  - "Authors' Addresses\n   Ulrich Herberg\n   Fujitsu Laboratories of America\n   1240
    E. Arques Ave.\n   Sunnyvale, CA  94085\n   USA\n   EMail: ulrich@herberg.name\n
    \  URI:   http://www.herberg.name/\n   Thomas Heide Clausen\n   LIX, Ecole Polytechnique\n
    \  91128 Palaiseau Cedex\n   France\n   Phone: +33 6 6058 9349\n   EMail: T.Clausen@computer.org\n
    \  URI:   http://www.thomasclausen.org/\n   Christopher Dearlove\n   BAE Systems
    Advanced Technology Centre\n   West Hanningfield Road\n   Great Baddow, Chelmsford\n
    \  United Kingdom\n   Phone: +44 1245 242194\n   EMail: chris.dearlove@baesystems.com\n
    \  URI:   http://www.baesystems.com/\n"
  title: Authors' Addresses
