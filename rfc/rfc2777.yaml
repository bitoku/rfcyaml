- title: __initial_text__
  contents:
  - '              Publicly Verifiable Nomcom Random Selection

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a method for making random selections in\
    \ such\n   a way that the unbiased nature of the choice is publicly verifiable.\n\
    \   As an example, the selection of the voting members of the IETF\n   Nominations\
    \ Committee from the pool of eligible volunteers is used.\n   Similar techniques\
    \ would be applicable to other cases.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Matt Crawford made major contributions to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction............................................2\n\
    \   2. General Flow of a Publicly Verifiable Process...........2\n   2.1 Determination\
    \ of the Pool..............................2\n   2.2 Publication of the Algorithm...........................2\n\
    \   2.3 Publication of Selection...............................3\n   3. Randomness..............................................3\n\
    \   3.1 Sources of Randomness..................................3\n   3.2 Skew...................................................4\n\
    \   3.3 Entropy Needed.........................................4\n   4. A Suggested\
    \ Precise Algorithm...........................5\n   5. Fully Worked Example....................................6\n\
    \   6. Security Considerations.................................7\n   7.  Reference\
    \ Code.........................................8\n   Appendix: History of NomCom\
    \ Member Selection..............14\n   References................................................15\n\
    \   Author's Address..........................................15\n   Full Copyright\
    \ Statement..................................16\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Under the IETF rules, each year 10 persons are randomly selected\
    \ from\n   among the eligible persons who volunteer to be the voting members of\n\
    \   the nominations committee (NomCom) to nominate members of the\n   Internet\
    \ Engineering Steering Group (IESG) and the Internet\n   Architecture Board (IAB)\
    \ [RFC 2727].  The number of eligible\n   volunteers in recent years has varied\
    \ in the approximate range of 40\n   to 60.\n   It is highly desireable that the\
    \ random selection of the voting\n   NomCom be done in a unimpeachable fashion\
    \ so that no reasonable\n   charges of bias or favoritism can be brought.  This\
    \ is for the\n   protection of the IETF from bias and protection of the administrator\n\
    \   of the selection (currently, the appointed non-voting NomCom chair)\n   from\
    \ suspicion of bias.\n   A method such that public information will enable any\
    \ person to\n   verify the randomness of the selection meets this criterion. \
    \ This\n   document gives an example of such a method.\n"
- title: 2. General Flow of a Publicly Verifiable Process
  contents:
  - "2. General Flow of a Publicly Verifiable Process\n   In general, a selection\
    \ of NomCom members publicly verifiable as\n   unbiased or similar selection could\
    \ follow the three steps given\n   below.\n"
- title: 2.1 Determination of the Pool
  contents:
  - "2.1 Determination of the Pool\n   First, you need to determine the pool from\
    \ which the selection is to\n   be made.\n   Volunteers are solicited by the appointed\
    \ (non-voting) NomCom chair.\n   Their names are then passed through the IETF\
    \ Secretariat to check\n   eligibility.  (Current eligibility criteria relate\
    \ to IETF meeting\n   attendance, records of which are maintained by the Secretariat.)\
    \  The\n   full list of eligible volunteers is made public early enough that\n\
    \   there is a reasonable time to resolve any disputes as to who should\n   be\
    \ in the pool, probably a week to ten days before the selection.\n"
- title: 2.2 Publication of the Algorithm
  contents:
  - "2.2 Publication of the Algorithm\n   The exact algorithm to be used, including\
    \ the public future sources\n   of randomness, is made public.  For example, the\
    \ members of the final\n   list of eligible volunteers are ordered by publicly\
    \ numbering them,\n   several public future sources of randomness such as government\
    \ run\n   lotteries are specified, and an exact algorithm is specified whereby\n\
    \   eligible volunteers are selected based on a strong hash function [RFC\n  \
    \ 1750] of these future sources of randomness.\n"
- title: 2.3 Publication of Selection
  contents:
  - "2.3 Publication of Selection\n   When the prespecified sources of randomness\
    \ produce their output,\n   those values plus a summary of the execution of the\
    \ algorithm for\n   selection should be announced so that anyone can verify that\
    \ the\n   correct randomness source values were used and the algorithm properly\n\
    \   executed.  A cut off time for any complaint that the algorithm was\n   run\
    \ with the wrong inputs or not faithfully executed should be\n   specified to\
    \ finalize the output and provide a stable NomCom.\n"
- title: 3. Randomness
  contents:
  - "3. Randomness\n   The crux of the unbiased nature of the selection is that it\
    \ is based\n   exactly on random information which will be revealed in the future\n\
    \   and thus can not be known to the person specifying the algorithm by\n   which\
    \ that random information will be used to select the NomCom\n   members.   The\
    \ random information must be such that it will be\n   publicly revealed in a timely\
    \ fashion.\n   The random sources should not include anything that any reasonable\n\
    \   person would believe to be under the control or influence of the IETF\n  \
    \ or its components, such as IETF meeting attendance statistics,\n   numbers of\
    \ documents issued, or the like.\n"
- title: 3.1 Sources of Randomness
  contents:
  - "3.1 Sources of Randomness\n   Examples of good information to use are lottery\
    \ winning numbers for\n   specified runnings of specified lotteries.  Particularly\
    \ for\n   government run lotteries, great care is usually taken to see that\n\
    \   they produce random quantities.  Even in the unlikely case one were\n   to\
    \ have been rigged, it would almost certainly be in connection with\n   winning\
    \ money in the lottery, not in connection with IETF use.\n   Other possibilities\
    \ are such things as the closing price of a stock\n   on a particular day, daily\
    \ balance in the US Treasury on a specified\n   day, the volume of trading on\
    \ the New York Stock exchange on a\n   specified day, etc. (However, the reference\
    \ code given below will not\n   handle integers that are too large.) Sporting\
    \ events can be used but\n   only with care to specify exactly what quantities\
    \ are being presumed\n   random and what will be done if they are cancelled or\
    \ delayed.\n   It is important that the last source of randomness, chronologically,\n\
    \   produce a substantial amount of the entropy needed.  If most of the\n   randomness\
    \ has come from the earlier of the specified sources, and\n   someone has even\
    \ limited influence on the final source, they might do\n   an exhaustive analysis\
    \ and exert such influence so as to bias the\n   selection in the direction they\
    \ wanted.  Thus it is best for the last\n   source to be an especially strong\
    \ and unbiased source of a large\n   amount of randomness such as a government\
    \ run lottery.\n   It is best not to use too many different sources.  Every additional\n\
    \   source increases the probability that it might be delayed or\n   cancelled\
    \ calling into play contingency plans or, worst of all,\n   possibly creating\
    \ a situation that was not anticipated.  This would\n   either require arbitrary\
    \ judgement by the Nomcom chair, defeating the\n   randomness of the selection,\
    \ or a re-run with a new set of sources,\n   causing much delay.  Probably a good\
    \ number of sources is three.\n"
- title: 3.2 Skew
  contents:
  - "3.2 Skew\n   Many of the sources of randomness suggested above produce data which\n\
    \   is not uniformly distributed.  This is certainly true of stock prices\n  \
    \ and horse race results, for example.  However, use of a strong mixing\n   function\
    \ [RFC 1750] will extract the available entropy and produce a\n   hash value whose\
    \ bits, remainder modulo a small divisor, etc., are\n   uniformly distributed.\n"
- title: 3.3 Entropy Needed
  contents:
  - "3.3 Entropy Needed\n   What we are doing is selection N items without replacement\
    \ from a\n   population of P items.  The number of different ways to do this is\
    \ as\n   follows, where \"!\" represents the factorial function:\n           \
    \                         P!\n                               -------------\n \
    \                              N! * (P - N)!\n   To do this in a completely random\
    \ fashion requires as many random\n   bits as the logarithm base 2 of that quantity.\
    \  Some sample\n   calculated approximate number of random bits for the selection\
    \ of 10\n   nomcom members from various pool sizes is given below:\n         \
    \         Random Selection of Ten Items From Pool\n   Pool size     20   25  \
    \ 30   35   40   50   60   75  100\n   Bits needed   18   22   25   28   30  \
    \ 34   37   40   44\n   Using an inadequate number of bits means that not all\
    \ of the possible\n   selections would be available.  For a substantially inadequate\
    \ amount\n   of entropy, there would be substantial correlations between the\n\
    \   selection of two members of the pool, for example.  However, as a\n   practical\
    \ matter, for pool sizes likely to be encountered in IETF\n   nomcom membership\
    \ selection, 40 bits of entropy should always be\n   adequate.  Even if there\
    \ is a large pool and theoretically more bits\n   are needed for complete randomness,\
    \ 40 bits of entropy will assure\n   that the probability of selection of each\
    \ pool member differs from\n   that of other pool members, the correlation between\
    \ the selection of\n   any pair of pool members, etc., differs only insignificantly\
    \ from\n   that for completely random selection.\n   An MD5 [RFC 1321] hash has\
    \ 128 bits and therefore can produce no more\n   than that number of bits of entropy.\
    \  However, this is three times\n   what is likely to ever been needed for IETF\
    \ nomcom membership\n   selection.\n"
- title: 4. A Suggested Precise Algorithm
  contents:
  - "4. A Suggested Precise Algorithm\n   It is important that a precise algorithm\
    \ be given for mixing the\n   random sources specified and making the selection\
    \ based thereon.\n   Sources suggested above each produce either a single positive\
    \ number\n   (i.e., closing price for a stock) or a small set of positive numbers\n\
    \   (many lotteries provide 6 numbers in the range of 1 through 40 or the\n  \
    \ like, a sporting event could produce the scores of two teams, etc.).\n   A sample\
    \ precise algorithm is as follows:\n   For each source producing multiple numeric\
    \ values, represent each as\n   a decimal number terminated by a period (or with\
    \ a period separating\n   the whole from the fractional part) and without leading\
    \ zeroes\n   (except for a single leading zero if the integer part is zero) or\n\
    \   trailing zeroes after the period.  Order them from smallest to the\n   largest\
    \ and concatenate them and follow the results by a \"/\".  For\n   each source\
    \ producing a single number, simply represent it as above\n   with a trailing\
    \ \"/\".  At this point you have a string for each\n   source, say s1/, s2/, ...\
    \  Concatenate these strings in a pre-\n   specified order and represent each\
    \ character as its ASCII code\n   producing s1/s2/.../.\n   You can then produce\
    \ a sequence of random values derived from a\n   strong mixing of these sources\
    \ by calculating the MD5 hash [RFC 1321]\n   of this string prefixed and suffixed\
    \ with a zero byte for the first\n   value, the string prefixed and suffixed by\
    \ a 0x01 byte for the second\n   value, etc.  Treat each of these derived random\
    \ values as a positive\n   multiprecision integer.  If there are P eligible volunteers,\
    \ select\n   the first voting member by dividing the first derived random value\
    \ by\n   P and using the remainder plus one as the position of the selectee in\n\
    \   the ordered list or volunteers.  Select the second voting member by\n   dividing\
    \ the second derived random value by P-1 and using the\n   remainder plus one\
    \ as the position of the selectee in the list with\n   the first selectee eliminated.\
    \  Etc.\n   It is recommended that alphanumeric random sources be avoided due\
    \ to\n   the greater difficulty in canonicalizing them in an independently\n \
    \  repeatable fashion; however, if any are used, all white space,\n   punctuation,\
    \ and special characters should be removed and all letters\n   set to upper case.\
    \ This will leave only an unbroken sequence of\n   letters A-Z and digits 0-9\
    \ which can be treated as a canonicalized\n   number above and suffixed with a\
    \ \"/\".\n"
- title: 5. Fully Worked Example
  contents:
  - "5. Fully Worked Example\n   Assume the following ordered list of 25 eligible\
    \ volunteers is\n   published in advance of selection:\n         1. John     \
    \    11. Pollyanna       21. Pride\n         2. Mary         12. Pendragon   \
    \    22. Sloth\n         3. Bashful      13. Pandora         23. Envy\n      \
    \   4. Dopey        14. Faith           24. Anger\n         5. Sleepy       15.\
    \ Hope            25. Kasczynski\n         6. Grouchy      16. Charity\n     \
    \    7. Doc          17. Love\n         8. Sneazy       18. Longsuffering\n  \
    \       9. Handsome     19. Chastity\n        10. Cassandra    20. Smith\n   Assume\
    \ the following (fake example) ordered list of randomness\n   sources:\n    1.\
    \ The People's Democracy of Betastani State Lottery six winning\n       numbers\
    \ (ignoring the seventh \"extra\" number) for 1 October 1998.\n    2. Numbers\
    \ of the winning horses at Hialeia for all races for the\n       first day on\
    \ or after x September 1998 on which at least two\n       races are run.\n   \
    \ 3. The Republic of Alphaland State Lottery daily number for 1\n       October\
    \ 1998 treated as a single four digit integer.\n    4. Closing price of Example\
    \ Corporation stock on the Lunar Stock\n       Exchange for the first business\
    \ day after x September 1998 when\n       it trades.\n   Randomness publicly produced:\n\
    \       Source 1:  9, 18, 26, 34, 41, 45\n       Source 2:  2, 5, 12, 8, 10\n\
    \       Source 3:  9319\n       Source 4:  13 11/16\n   Resulting key string:\n\
    \       9.18.26.34.41.45./2.5.8.10.12./9319./13.6875/\n   The table below gives\
    \ the hex of the MD5 of the above key string\n   bracketed with a byte whose value\
    \ is successively 0x00, 0x01, 0x02,\n   through 0x09.  The divisor for the number\
    \ size of the remaining pool\n   at each stage is given and the index of the selectee\
    \ as per the\n   original number of those in the pool.\n   index        hex value\
    \ of MD5        div  selected\n    1  746612D0A75D2A2A39C0A957CF825F8D  25  ->\
    \ 12 <-\n    2  95E31A4429ED5AAF7377A15A8E10CD9D  24  ->  6 <-\n    3  AFB2B3FD30E82AD6DC35B4D2F1CFC77A\
    \  23  ->  8 <-\n    4  06821016C2A2EA14A6452F4A769ED1CC  22  ->  3 <-\n    5\
    \  94DA30E11CA7F9D05C66D0FD3C75D6F7  21  ->  2 <-\n    6  2FAE3964D5B1DEDD33FDA80F4B8EF45E\
    \  20  -> 24 <-\n    7  F1E7AB6753A773EFE46393515FDA8AF8  19  -> 11 <-\n    8\
    \  700B81738E07DECB4470879BEC6E0286  18  -> 19 <-\n    9  1F23F8F8F8E5638A29D332BC418E0689\
    \  17  -> 15 <-\n   10  61A789BA86BF412B550A5A05E821E0ED  16  -> 22 <-\n   Resulting\
    \ selection, in order selected:\n         1. Pendragon (12)     6. Anger (24)\n\
    \         2. Grouchy (6)        7. Pollyanna (11)\n         3. Sneazy (8)    \
    \     8. Chastity (19)\n         4. Bashful (3)        9. Hope (15)\n        \
    \ 5. Mary (2)          10. Sloth (22)\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Careful choice of should be made of randomness\
    \ inputs so that there\n   is no reasonable suspicion that they are under the\
    \ control of the\n   administrator.  Guidelines given above to use a small number\
    \ of\n   inputs with a substantial amount of entropy from the last shoud be\n\
    \   followed.  And equal care needs to be given that the algorithm\n   selected\
    \ is faithfully executed with the designated inputs values.\n   Publication of\
    \ the results and a week or so window for the community\n   of interest to duplicate\
    \ the calculations should give a reasonable\n   assurance against implementation\
    \ tampering.\n   To maintain the unpredictable character of selections, should\
    \ a\n   member of the nomcom need to be replaced due to death, resignation,\n\
    \   expulsion, etc., new publicly announced future random sources should\n   be\
    \ used for the selection of their replacement.\n"
- title: 7.  Reference Code
  contents:
  - "7.  Reference Code\n   This code makes use of the MD5 reference code from [RFC\
    \ 1321] (\"RSA\n   Data Security, Inc. MD5 Message-Digest Algorithm\").  The portion\
    \ of\n   the code dealing with multiple floating point numbers was written by\n\
    \   Matt Crawford.\n   /****************************************************************\n\
    \    *\n    *  Reference code for\n    *      \"Publicly Verifiable Nomcom Random\
    \ Selection\"\n    *          Donald E. Eastlake 3rd\n    *\n    ****************************************************************/\n\
    \   #include <limits.h>\n   #include <math.h>\n   #include <stdio.h>\n   #include\
    \ <stdlib.h>\n   #include <string.h>\n   #include \"global.h\"\n   #include \"\
    MD5.h\"\n   /* local prototypes */\n   int longremainder ( unsigned char divisor,\n\
    \                       unsigned char dividend[16] );\n   int getinteger ( char\
    \ *string );\n   double NPentropy ( int N, int P );\n   /* limited to 16 inputs\
    \ of up to sixteen integers each */\n   /****************************************************************/\n\
    \   main ()\n   {\n   int         i, j,  k, k2, err, keysize, pool, selection;\n\
    \   unsigned char   unch, uc16[16], remaining, *selected;\n   long int    temp,\
    \ array[16];\n   MD5_CTX ctx;\n   char        buffer[257], key [800], sarray[16][256];\n\
    \   pool = getinteger ( \"Type size of pool:\\n\" );\n   if ( pool > 255 )\n \
    \      {\n       printf ( \"Pool too big.\\n\" );\n       exit ( 1 );\n      \
    \ }\n   selected = (unsigned char *) malloc ( pool );\n   if ( !selected )\n \
    \      {\n       printf ( \"Out of memory.\\n\" );\n       exit ( 1 );\n     \
    \  }\n   selection = getinteger ( \"Type number of items to be selected:\\n\"\
    \ );\n   if ( selection > pool )\n       {\n       printf ( \"Pool too small.\\\
    n\" );\n       exit ( 1 );\n       }\n   if ( selection == pool )\n       {\n\
    \       printf ( \"All of the pool is selected.\\n\" );\n       exit ( 0 );\n\
    \       }\n   err = printf ( \"Approximately %.1f bits of entropy needed.\\n\"\
    ,\n                  NPentropy ( selection, pool ) + 0.1 );\n   if ( err <= 0\
    \ ) exit ( 1 );\n   for ( i = 0, keysize = 0; i < 16; ++i )\n       {\n      \
    \ if ( keysize > 500 )\n           {\n           printf ( \"Too much input.\\\
    n\" );\n           exit ( 1 );\n           }\n       /* get the \"random\" inputs.\
    \ echo back to user so the user may\n          be able to tell if truncation or\
    \ other glitches occur.  */\n       err = printf (\n           \"\\nType #%d randomness\
    \ or 'end' followed by new line.\\n\"\n           \"Up to 16 integers or the word\
    \ 'float' followed by up\\n\"\n           \"to 16 x.y format reals.\\n\", i+1\
    \ );\n       if ( err <= 0 ) exit ( 1 );\n       gets ( buffer );\n       j =\
    \ sscanf ( buffer,\n               \"%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld\"\
    ,\n           &array[0], &array[1], &array[2], &array[3],\n           &array[4],\
    \ &array[5], &array[6], &array[7],\n           &array[8], &array[9], &array[10],\
    \ &array[11],\n           &array[12], &array[13], &array[14], &array[15] );\n\
    \       if ( j == EOF )\n           exit ( j );\n       if ( !j )\n          \
    \ if ( buffer[0] == 'e' )\n               break;\n           else\n          \
    \     {   /* floating point code by Matt Crawford */\n               j = sscanf\
    \ ( buffer,\n                   \"float %ld.%[0-9]%ld.%[0-9]%ld.%[0-9]%ld.%[0-9]\"\
    \n                   \"%ld.%[0-9]%ld.%[0-9]%ld.%[0-9]%ld.%[0-9]\"\n          \
    \         \"%ld.%[0-9]%ld.%[0-9]%ld.%[0-9]%ld.%[0-9]\"\n                   \"\
    %ld.%[0-9]%ld.%[0-9]%ld.%[0-9]%ld.%[0-9]\",\n                   &array[0], sarray[0],\
    \ &array[1], sarray[1],\n                   &array[2], sarray[2], &array[3], sarray[3],\n\
    \                   &array[4], sarray[4], &array[5], sarray[5],\n            \
    \       &array[6], sarray[6], &array[7], sarray[7],\n                   &array[8],\
    \ sarray[8], &array[9], sarray[9],\n                   &array[10], sarray[10],\
    \ &array[11], sarray[11],\n                   &array[12], sarray[12], &array[13],\
    \ sarray[13],\n                   &array[14], sarray[14], &array[15], sarray[15]\
    \ );\n               if ( j == 0 || j & 1 )\n                   printf ( \"Bad\
    \ format.\" );\n               else {\n                    for ( k = 0, j /= 2;\
    \ k < j; k++ )\n                    {\n                          /* strip trailing\
    \ zeros */\n                    for ( k2=strlen(sarray[k]); sarray[k][--k2]=='0';)\n\
    \                          sarray[k][k2] = '\\0';\n                    err = printf\
    \ ( \"%ld.%s\\n\", array[k], sarray[k] );\n                    if ( err <= 0 )\
    \ exit ( 1 );\n                    keysize += sprintf ( &key[keysize], \"%ld.%s\"\
    ,\n                                         array[k], sarray[k] );\n         \
    \           }\n                    keysize += sprintf ( &key[keysize], \"/\" );\n\
    \                    }\n               }\n       else\n           {   /* sort\
    \ values, not a very efficient algorithm */\n           for ( k2 = 0; k2 < j -\
    \ 1; ++k2 )\n               for ( k = 0; k < j - 1; ++k )\n                  \
    \ if ( array[k] > array[k+1] )\n                       {\n                   \
    \    temp = array[k];\n                       array[k] = array[k+1];\n       \
    \                array[k+1] = temp;\n                       }\n           for\
    \ ( k = 0; k < j; ++k )\n               { /* print for user check */\n       \
    \        err = printf ( \"%ld \", array[k] );\n               if ( err <= 0 )\
    \ exit ( 1 );\n               keysize += sprintf ( &key[keysize], \"%ld.\", array[k]\
    \ );\n               }\n           keysize += sprintf ( &key[keysize], \"/\" );\n\
    \           }\n       }   /* end for i */\n   /* have obtained all the input,\
    \ now produce the output */\n   err = printf ( \"Key is:\\n %s\\n\", key );\n\
    \   if ( err <= 0 ) exit ( 1 );\n   for ( i = 0; i < pool; ++i )\n       selected\
    \ [i] = i + 1;\n   printf ( \"index        hex value of MD5        div  selected\\\
    n\" );\n   for (   unch = 0, remaining = pool;\n           unch < selection;\n\
    \           ++unch, --remaining )\n       {\n       MD5Init ( &ctx );\n      \
    \ MD5Update ( &ctx, &unch, 1 );\n       MD5Update ( &ctx, (unsigned char *)key,\
    \ keysize );\n       MD5Update ( &ctx, &unch, 1 );\n       MD5Final ( uc16, &ctx\
    \ );\n       k = longremainder ( remaining, uc16 );\n   /* printf ( \"Remaining\
    \ = %d, remainder = %d.\\n\", remaining, k ); */\n       for ( j = 0; j < pool;\
    \ ++j )\n           if ( selected[j] )\n               if ( --k < 0 )\n      \
    \             {\n                   printf ( \"%2d  \"\n   \"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\
    \  \"\n   \"%2d  -> %2d <-\\n\",\n   unch+1, uc16[0],uc16[1],uc16[2],uc16[3],uc16[4],uc16[5],uc16[6],\n\
    \   uc16[7],uc16[8],uc16[9],uc16[10],uc16[11],uc16[12],uc16[13],uc16[14],\n  \
    \ uc16[15], remaining, selected[j] );\n                   selected[j] = 0;\n \
    \                  break;\n                   }\n       }\n   printf ( \"\\nDone,\
    \ type any character to exit.\\n\" );\n   getchar ();\n   return 0;\n   }\n  \
    \ /* prompt for an integer input */\n   /****************************************************************/\n\
    \   int getinteger ( char *string )\n   {\n   int     i, j;\n   char    tin[257];\n\
    \   while ( 1 )\n   {\n   printf ( string );\n   printf ( \"(or 'exit' to exit)\
    \ \" );\n   gets ( tin );\n   j = sscanf ( tin, \"%d\", &i );\n   if (    ( j\
    \ == EOF )\n       ||  ( !j && ( ( tin[0] == 'e' ) || ( tin[0] == 'E' ) ) )\n\
    \           )\n       exit ( j );\n   if ( j == 1 )\n       return i;\n   }  \
    \ /* end while */\n   }\n   /* get remainder of dividing a 16 byte unsigned int\n\
    \      by a small positive number */\n   /****************************************************************/\n\
    \   int longremainder ( unsigned char divisor,\n                       unsigned\
    \ char dividend[16] )\n   {\n   int i;\n   long int kruft;\n   if ( !divisor )\n\
    \       return -1;\n   for ( i = 0, kruft = 0; i < 16; ++i )\n       {\n     \
    \  kruft = ( kruft << 8 ) + dividend[i];\n       kruft %= divisor;\n       }\n\
    \   return kruft;\n   }   /* end longremainder */\n   /* calculate how many bits\
    \ of entropy it takes to select N from P */\n   /****************************************************************/\n\
    \   /*             P!\n     log  ( ----------------- )\n        2    N! * ( P\
    \ - N )!\n   */\n   double NPentropy ( int N, int P )\n   {\n   int         i;\n\
    \   double      result = 0.0;\n   if (    ( N < 1 )   /* not selecting anything?\
    \ */\n      ||   ( N >= P )  /* selecting all of pool or more? */\n      )\n \
    \      return 1.0;     /* degenerate case */\n   for ( i = P; i > ( P - N ); --i\
    \ )\n       result += log ( i );\n   for ( i = N; i > 1; --i )\n       result\
    \ -= log ( i );\n   /* divide by [ log (base e) of 2 ] to convert to bits */\n\
    \   result /= 0.69315;\n   return result;\n   }   /* end NPentropy */\n"
- title: 'Appendix: History of NomCom Member Selection'
  contents:
  - "Appendix: History of NomCom Member Selection\n   For reference purposes, here\
    \ is a list of the IETF Nominations\n   Committee member selection techniques\
    \ and chairs so far:\n           YEAR      CHAIR               SELECTION METHOD\n\
    \        1993/1994  Jeff Case             Clergy\n        1994/1995  Fred Baker\
    \            Clergy\n        1995/1996  Guy Almes             Clergy\n       \
    \ 1996/1997  Geoff Huston          Spouse\n        1997/1998  Mike St.Johns  \
    \       Algorithm\n        1998/1999  Donald Eastlake 3rd   This Algorithm\n \
    \       1999/2000  Avri Doria            This Alogrithm\n   Clergy = Names were\
    \ written on pieces of paper, placed in a\n   receptacle, and a member of the\
    \ clergy picked the Nomcom members.\n   Spouse = Same as Clergy except chair's\
    \ spouse made the selection.\n   Algorithm = Algorithmic selection based on the\
    \ same concepts as\n   documented herein.\n   This Algorithm = Algorithmic selection\
    \ using the algorithm and\n   reference code (but not the fake example sources\
    \ of randomness)\n   described herein.\n"
- title: References
  contents:
  - "References\n   RFC 1321  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC\
    \ 1321,\n             April 1992.\n   RFC 1750  Eastlake, D., 3rd, Crocker, S.\
    \ and J. Schiller, \"Randomness\n             Recommendations for Security\",\
    \ RFC 1750, December 1994.\n   RFC 2727  Galvin, J., \"IAB and IESG Selection,\
    \ Confirmation, and\n             Recall Process: Operation of the Nominating\
    \ and Recall\n             Committees\", BCP 10, RFC 2727, February 2000.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Donald E. Eastlake, 3rd\n   Motorola\n   65 Shindegan Hill\
    \ Road, RR #1\n   Carmel, NY 10512 USA\n   Phone:  +1-914-276-2668 (h)\n     \
    \      +1-508-261-5434 (w)\n   Fax:    +1-508-261-4447 (w)\n   EMail:  Donald.Eastlake@motorola.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
