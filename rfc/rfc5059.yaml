- contents:
  - "                   Bootstrap Router (BSR) Mechanism\n                for Protocol
    Independent Multicast (PIM)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document specifies the Bootstrap Router (BSR) mechanism for
    the\n   class of multicast routing protocols in the PIM (Protocol Independent\n
    \  Multicast) family that use the concept of a Rendezvous Point as a\n   means
    for receivers to discover the sources that send to a particular\n   multicast
    group.  BSR is one way that a multicast router can learn\n   the set of group-to-RP
    mappings required in order to function.  The\n   mechanism is dynamic, largely
    self-configuring, and robust to router\n   failure.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Background .................................................3\n      1.2.
    Protocol Overview ..........................................5\n      1.3. Administrative
    Scoping and BSR .............................6\n   2. BSR State and Timers ............................................8\n
    \  3. Bootstrap Router Election and RP-Set Distribution ...............9\n      3.1.
    Bootstrap Router Election ..................................9\n           3.1.1.
    Per-Scope-Zone Candidate-BSR State Machine .........10\n           3.1.2. Per-Scope-Zone
    State Machine for\n                  Non-Candidate-BSR Routers ..........................11\n
    \          3.1.3. Bootstrap Message Processing Checks ................13\n           3.1.4.
    State Machine Transition Events ....................14\n           3.1.5. State
    Machine Actions ..............................15\n      3.2. Sending Candidate-RP-Advertisement
    Messages ...............17\n      3.3. Creating the RP-Set at the BSR ............................18\n
    \     3.4. Forwarding Bootstrap Messages .............................21\n      3.5.
    Bootstrap Messages to New and Rebooting Routers ...........22\n           3.5.1.
    No-Forward Bootstrap Messages ......................23\n           3.5.2. Unicasting
    Bootstrap Messages ......................23\n      3.6. Receiving and Using the
    RP-Set ............................23\n   4. Message Formats ................................................24\n
    \     4.1. Bootstrap Message Format ..................................26\n           4.1.1.
    Semantic Fragmentation of BSMs .....................30\n      4.2. Candidate-RP-Advertisement
    Message Format .................31\n   5. Timers and Timer Values ........................................33\n
    \  6. Security Considerations ........................................36\n      6.1.
    Possible Threats ..........................................36\n      6.2. Limiting
    Third-Party DoS Attacks ..........................36\n      6.3. Bootstrap Message
    Security ................................37\n           6.3.1. Unicast Bootstrap
    Messages .........................37\n           6.3.2. Multi-Access Subnets ...............................38\n
    \     6.4. Candidate-RP-Advertisement Message Security ...............38\n           6.4.1.
    Non-Cryptographic Security of C-RP-Adv Messages ....38\n           6.4.2. Cryptographic
    Security of C-RP-Adv Messages ........39\n      6.5. Denial of Service using IPsec
    .............................39\n   7. Contributors ...................................................40\n
    \  8. Acknowledgments ................................................40\n   9.
    Normative References ...........................................40\n   10. Informative
    References ........................................41\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document assumes some familiarity with the concepts
    of Protocol\n   Independent Multicast - Sparse Mode (PIM-SM) [1] and Bidirectional\n
    \  Protocol Independent Multicast (BIDIR-PIM) [2], as well as with\n   Administratively
    Scoped IP Multicast [3] and the IPv6 Scoped Address\n   Architecture [4].\n   For
    correct operation, every multicast router within a PIM domain\n   must be able
    to map a particular multicast group address to the same\n   Rendezvous Point (RP).
    \ The PIM specifications do not mandate the use\n   of a single mechanism to provide
    routers with the information to\n   perform this group-to-RP mapping.\n   This
    document describes the PIM Bootstrap Router (BSR) mechanism.\n   BSR is one way
    that a multicast router can learn the information\n   required to perform the
    group-to-RP mapping.  The mechanism is\n   dynamic, largely self-configuring,
    and robust to router failure.\n   BSR was first defined in RFC 2362 [7] as part
    of the original PIM-SM\n   specification, which has been obsoleted by RFC 4601
    [1].  This\n   document provides an updated specification of the BSR mechanism
    from\n   RFC 2362, and also extends it to cope with administratively scoped\n
    \  region boundaries and different flavors of routing protocols.\n   Throughout
    the document, any reference to the PIM protocol family is\n   restricted to the
    subset of RP-based protocols, namely PIM-SM and\n   BIDIR-PIM, unless stated otherwise.\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in RFC 2119 [6].\n"
  - contents:
    - "1.1.  Background\n   A PIM domain is a contiguous set of routers that all implement
      PIM\n   and are configured to operate within a common boundary defined by PIM\n
      \  Multicast Border Routers (PMBRs).  PMBRs connect each PIM domain to\n   the
      rest of the Internet.\n   Every PIM multicast group needs to be associated with
      the IP address\n   of a Rendezvous Point (RP).  This address is used as the
      root of a\n   group-specific distribution tree whose branches extend to all
      nodes\n   in the domain that want to receive traffic sent to the group.\n   Senders
      inject packets into the tree in such a manner that they reach\n   all connected
      receivers.  How this is done and how the packets are\n   forwarded along the
      distribution tree depends on the particular\n   routing protocol.\n   For all
      senders to reach all receivers, it is crucial that all\n   routers in the domain
      use the same mappings of group addresses to RP\n   addresses.\n   An exception
      to the above is where a PIM domain has been broken up\n   into multiple administrative
      scope regions.  These are regions where\n   a border has been configured so
      that a set of multicast groups will\n   not be forwarded across that border.
      \ In this case, all PIM routers\n   within the same scope region must map a
      particular scoped group to\n   the same RP within that region.\n   In order
      to determine the RP for a multicast group, a PIM router\n   maintains a collection
      of group-to-RP mappings, called the RP-Set.  A\n   group-to-RP mapping contains
      the following elements.\n      o  Multicast group range, expressed as an address
      and prefix\n         length\n      o  RP priority\n      o  RP address\n      o
      \ Hash mask length\n      o  SM / BIDIR flag\n   In general, the group ranges
      of these group-to-RP mappings may\n   overlap in arbitrary ways; hence, a particular
      multicast group may be\n   covered by multiple group-to-RP mappings.  When this
      is the case, the\n   router chooses only one of the RPs by applying a deterministic\n
      \  algorithm so that all routers in the domain make the same choice.  It\n   is
      important to note that this algorithm is part of the specification\n   of the
      individual routing protocols (and may differ among them), not\n   of the BSR
      specification.  For example, PIM-SM [1] defines one such\n   algorithm.  It
      makes use of a hash function for the case where a\n   group range has multiple
      RPs with the same priority.  The hash mask\n   length is used by this function.\n
      \  There are a number of ways in which such group-to-RP mappings can be\n   established.
      \ The simplest solution is for all the routers in the\n   domain to be statically
      configured with the same information.\n   However, static configuration generally
      doesn't scale well, and,\n   except when used in conjunction with Anycast-RP
      (see [8] and [9]),\n   does not dynamically adapt to route around router or
      link failures.\n   The BSR mechanism provides a way in which viable group-to-RP
      mappings\n   can be created and rapidly distributed to all the PIM routers in
      a\n   domain.  It is adaptive, in that if an RP becomes unreachable, this\n
      \  will be detected and the RP-Sets will be modified so that the\n   unreachable
      RP is no longer used.\n"
    title: 1.1.  Background
  - contents:
    - "1.2.  Protocol Overview\n   In this section we give an informal and non-definitive
      overview of\n   the BSR mechanism.  The definitive specification begins in section
      2.\n   The general idea behind the BSR mechanism is that some of the PIM\n   routers
      within a PIM domain are configured to be potential RPs for\n   the domain.  These
      are known as Candidate-RPs (C-RPs).  A subset of\n   the C-RPs will eventually
      be used as the actual RPs for the domain.\n   In addition, some of the PIM routers
      in the domain are configured to\n   be candidate bootstrap routers, or Candidate-BSRs
      (C-BSRs).  One of\n   these C-BSRs will be elected to be the bootstrap router
      (BSR) for the\n   domain, and all the PIM routers in the domain will learn the
      result\n   of this election through Bootstrap messages.  The C-RPs will then\n
      \  report their candidacy to the elected BSR, which chooses a subset of\n   these
      C-RPs and distributes corresponding group-to-RP mappings to all\n   the routers
      in the domain through Bootstrap messages.\n   In more detail, the BSR mechanism
      works as follows.  There are four\n   basic phases (although in practice, all
      phases may be occurring\n   simultaneously):\n   1.  BSR Election.  Each Candidate-BSR
      originates Bootstrap messages\n       (BSMs).  Every BSM contains a BSR Priority
      field.  Routers within\n       the domain flood the BSMs throughout the domain.
      \ A C-BSR that\n       hears about a higher-priority C-BSR than itself suppresses
      its\n       sending of further BSMs for some period of time.  The single\n       remaining
      C-BSR becomes the elected BSR, and its BSMs inform all\n       the other routers
      in the domain that it is the elected BSR.\n   2.  C-RP Advertisement.  Each
      Candidate-RP within a domain sends\n       periodic Candidate-RP-Advertisement
      (C-RP-Adv) messages to the\n       elected BSR.  A C-RP-Adv message includes
      the priority of the\n       advertising C-RP, as well as a list of group ranges
      for which the\n       candidacy is advertised.  In this way, the BSR learns
      about\n       possible RPs that are currently up and reachable.\n   3.  RP-Set
      Formation.  The BSR selects a subset of the C-RPs that it\n       has received
      C-RP-Adv messages from to form the RP-Set.  In\n       general, it should do
      this in such a way that the RP-Set is\n       neither so large that all the
      routers in the domain cannot be\n       informed about it, nor so small that
      the load is overly\n       concentrated on some RPs.  It should also attempt
      to produce an\n       RP-Set that does not change frequently.\n   4.  RP-Set
      Flooding.  In future Bootstrap messages, the BSR includes\n       the RP-Set
      information.  Bootstrap messages are flooded through\n       the domain, which
      ensures that the RP-Set rapidly reaches all the\n       routers in the domain.
      \ BSMs are originated periodically to\n       ensure consistency after failure
      restoration.\n       When a PIM router receives a Bootstrap message, it adds
      the\n       group-to-RP mappings contained therein to its pool of mappings\n
      \      obtained from other sources (e.g., static configuration).  It\n       calculates
      the final mappings of group addresses to RP addresses\n       from this pool
      according to rules specific to the particular\n       routing protocol and uses
      that information to construct multicast\n       distribution trees.\n   If a
      PIM domain becomes partitioned, each area separated from the old\n   BSR will
      elect its own BSR, which will distribute an RP-Set\n   containing RPs that are
      reachable within that partition.  When the\n   partition heals, another election
      will occur automatically and only\n   one of the BSRs will continue to send
      out Bootstrap messages.  As is\n   expected at the time of a partition or healing,
      some disruption in\n   packet delivery may occur.  The duration of the disruption
      period\n   will be on the order of the region's round-trip time and the\n   BS_Timeout
      value.\n"
    title: 1.2.  Protocol Overview
  - contents:
    - "1.3.  Administrative Scoping and BSR\n   The mechanism described in the previous
      section does not work when\n   the PIM domain is divided into administratively
      scoped regions.  To\n   handle this situation, we use the protocol modifications
      described in\n   this section.\n   In the remainder of this document, we will
      use the term scope zone,\n   or simply zone, when we are talking about a connected
      region of\n   topology of a given scope.  For a more precise definition of scope\n
      \  zones, see [4], which emphasizes that the scope zones are\n   administratively
      configured.\n   Administrative scoping permits a PIM domain to be divided into\n
      \  multiple admin-scope zones.  Each admin-scope zone is a convex\n   connected
      set of PIM routers and is associated with a set of group\n   addresses.  The
      boundary of the admin-scope zone is formed by Zone\n   Border Routers (ZBRs).
      \ ZBRs are configured not to forward traffic\n   for any of the scoped group
      addresses into or out of the scoped zone.\n   It is important to note that a
      given scope boundary always creates at\n   least two scoped zones: one on either
      side of the boundary.\n   In IPv4, administratively scoped zones are associated
      with a set of\n   addresses given by an address and a prefix length.  In IPv6,\n
      \  administratively scoped zones are associated with a set of addresses\n   given
      by a single scope ID value.  The set of addresses corresponding\n   to a given
      scope ID value is defined in [5].  For example, a scope ID\n   of 5 maps to
      the 16 IPv6 address ranges ff[0-f]5::/16.\n   There are certain topological
      restrictions on admin-scope zones.  The\n   scope zone border must be complete
      and convex.  By this we mean that\n   there must be no path from the inside
      to the outside of the scoped\n   zone that does not pass through a configured
      scope border router, and\n   that the multicast capable path between any arbitrary
      pair of\n   multicast routers in the scope zone must remain in the zone.\n   Administrative
      scoping complicates BSR because we do not want a PIM\n   router within the scoped
      zone to use an RP outside the scoped zone.\n   Thus we need to modify the basic
      mechanism to ensure that this\n   doesn't happen.\n   This is done by running
      a separate copy of the basic BSR mechanism,\n   as described in the previous
      section, within each admin-scope zone of\n   a PIM domain.  Thus a separate
      BSR election takes place for each\n   admin-scope zone, a C-RP typically registers
      to the BSR of every\n   admin-scope zone it is in, and every PIM router receives
      Bootstrap\n   messages for every scope zone it is in.  The Bootstrap messages
      sent\n   by the BSR for a particular scope zone contain information about the\n
      \  RPs that should be used for the set of addresses associated with that\n   scope
      zone.\n   Bootstrap messages are marked to indicate which scope zone they\n
      \  belong to.  Such admin-scoped Bootstrap messages are flooded in the\n   normal
      way, but will not be forwarded by a ZBR across the boundary\n   for that scope
      zone.\n   For the BSR mechanism to function correctly with admin scoping, there\n
      \  must be at least one C-BSR within each admin-scope zone, and there\n   must
      be at least one C-RP that is configured to be a C-RP for the set\n   of group
      addresses associated with the scoped zone.\n   Even when administrative scoping
      is used, a copy of the BSR mechanism\n   is still used across the entire PIM
      domain in order to distribute RP\n   information for groups that are not administratively
      scoped.  We call\n   this copy of the mechanism non-scoped BSR.  The copies
      of the\n   mechanism run for each admin-scope zone are called scoped BSR.\n
      \  Only the C-BSRs and the ZBRs need to be configured to know about the\n   existence
      of the scope zones.  Other routers, including the C-RPs,\n   learn of their
      existence from Bootstrap messages.\n   All PIM routers within a PIM bootstrap
      domain where admin-scope\n   ranges are in use must be capable of receiving
      Bootstrap messages and\n   storing the winning BSR and RP-Set for all admin-scope
      zones that\n   apply.  Thus, PIM routers that only implement RFC 2362 or non-scoped\n
      \  BSR (which only allows one BSR per domain) cannot be used within the\n   admin-scope
      zones of a PIM domain.\n"
    title: 1.3.  Administrative Scoping and BSR
  title: 1.  Introduction
- contents:
  - "2.  BSR State and Timers\n   A PIM router implementing BSR holds the following
    state.\n     RP-Set\n     Per Configured or Learned Scope Zone (Z):\n          At
    all routers:\n               Current Bootstrap Router's IP Address\n               Current
    Bootstrap Router's BSR Priority\n               Last BSM received from current
    BSR\n               Bootstrap Timer (BST(Z))\n               Per group-to-RP mapping
    (M):\n                    Group-to-RP mapping Expiry Timer (GET(M,Z))\n          At
    a Candidate-BSR for Z:\n               My state: One of \"Candidate-BSR\", \"Pending-BSR\",\n
    \                   \"Elected-BSR\"\n          At a router that is not a Candidate-BSR
    for Z:\n               My state: One of \"Accept Any\", \"Accept Preferred\"\n
    \              Scope-Zone Expiry Timer (SZT(Z))\n          At the current Bootstrap
    Router for Z only:\n               Per group-to-C-RP mapping (M):\n                    Group-to-C-RP
    mapping Expiry Timer (CGET(M,Z))\n     At a C-RP only:\n          C-RP Advertisement
    Timer (CRPT)\n"
  title: 2.  BSR State and Timers
- contents:
  - '3.  Bootstrap Router Election and RP-Set Distribution

    '
  - contents:
    - "3.1.  Bootstrap Router Election\n   For simplicity, Bootstrap messages are
      used in both the BSR election\n   and the RP-Set distribution mechanisms.\n
      \  Each Bootstrap message indicates the scope to which it belongs.  If\n   the
      Admin Scope Zone bit is set in the first group range in the\n   Bootstrap message,
      the message is called a scoped BSM.  If the Admin\n   Scope Zone bit is not
      set in the first group range in the Bootstrap\n   message, the message is called
      a non-scoped BSM.\n   In a scoped IPv4 BSM, the scope of the message is given
      by the first\n   group range in the message, which can be any sub-range of 224/4.
      \ In\n   a scoped IPv6 BSM, the scope of the message is given by the scope ID\n
      \  of the first group range in the message, which must have a mask\n   length
      of at least 16.  For example, a group range of ff05::/16 with\n   the Admin
      Scope Zone bit set indicates that the Bootstrap message is\n   for the scope
      with scope ID 5.  If the mask length of the first group\n   range in a scoped
      IPv6 BSM is less than 16, the message MUST be\n   dropped and a warning SHOULD
      be logged.\n   The state machine for Bootstrap messages depends on whether or
      not a\n   router has been configured to be a Candidate-BSR for a particular\n
      \  scope zone.  The per-scope-zone state machine for a C-BSR is given\n   below,
      followed by the state machine for a router that is not\n   configured to be
      a C-BSR.\n   A key part of the election mechanism is that we associate a weight\n
      \  with each BSR.  The weight of a BSR is defined to be the\n   concatenation
      in fixed-precision unsigned arithmetic of the BSR\n   Priority field from the
      Bootstrap message and the IP address of the\n   BSR from the Bootstrap message
      (with the BSR Priority taking the\n   most-significant bits and the IP address
      taking the least-significant\n   bits).\n"
    - contents:
      - "3.1.1.  Per-Scope-Zone Candidate-BSR State Machine\n   +-------------------------------------------------------------------+\n
        \  |                      When in C-BSR state                          |\n
        \  +----------+-----------------+-------------------+------------------+\n
        \  | Event    |  Receive        |  Bootstrap        | Receive Non-     |\n
        \  |          |  Preferred BSM  |  Timer Expires    | preferred BSM    |\n
        \  |          |                 |                   | from Elected     |\n
        \  |          |                 |                   | BSR              |\n
        \  +----------+-----------------+-------------------+------------------+\n
        \  |          |  -> C-BSR state |  -> P-BSR state   | -> P-BSR state   |\n
        \  |          |  Forward BSM;   |  Set Bootstrap    | Forward BSM;     |\n
        \  | Action   |  Store RP-Set;  |  Timer to         | Set Bootstrap    |\n
        \  |          |  Set Bootstrap  |  BS_Rand_Override | Timer to         |\n
        \  |          |  Timer to       |                   | BS_Rand_Override |\n
        \  |          |  BS_Timeout     |                   |                  |\n
        \  +----------+-----------------+-------------------+------------------+\n
        \  +-------------------------------------------------------------------+\n
        \  |                        When in P-BSR state                        |\n
        \  +-----------+------------------+------------------+-----------------+\n
        \  | Event     |  Receive         |  Bootstrap       |  Receive Non-   |\n
        \  |           |  Preferred BSM   |  Timer Expires   |  preferred BSM  |\n
        \  +-----------+------------------+------------------+-----------------+\n
        \  |           |  -> C-BSR state  |  -> E-BSR state  |  -> P-BSR state |\n
        \  |           |  Forward BSM;    |  Originate BSM;  |  Forward BSM    |\n
        \  | Action    |  Store RP-Set;   |  Set Bootstrap   |                 |\n
        \  |           |  Set Bootstrap   |  Timer to        |                 |\n
        \  |           |  Timer to        |  BS_Period       |                 |\n
        \  |           |  BS_Timeout      |                  |                 |\n
        \  +-----------+------------------+------------------+-----------------+\n
        \  +-------------------------------------------------------------------+\n
        \  |                        When in E-BSR state                        |\n
        \  +-----------+------------------+------------------+-----------------+\n
        \  | Event     |  Receive         |  Bootstrap       |  Receive Non-   |\n
        \  |           |  Preferred BSM   |  Timer Expires   |  preferred BSM  |\n
        \  +-----------+------------------+------------------+-----------------+\n
        \  |           |  -> C-BSR state  |  -> E-BSR state  |  -> E-BSR state |\n
        \  |           |  Forward BSM;    |  Originate BSM;  |  Originate BSM; |\n
        \  | Action    |  Store RP-Set;   |  Set Bootstrap   |  Set Bootstrap  |\n
        \  |           |  Set Bootstrap   |  Timer to        |  Timer to       |\n
        \  |           |  Timer to        |  BS_Period       |  BS_Period      |\n
        \  |           |  BS_Timeout      |                  |                 |\n
        \  +-----------+------------------+------------------+-----------------+\n
        \  A Candidate-BSR may be in one of three states for a particular scope\n
        \  zone:\n   Candidate-BSR (C-BSR)\n        The router is a candidate to be
        the BSR for the scope zone, but\n        currently another router is the preferred
        BSR.\n   Pending-BSR (P-BSR)\n        The router is a candidate to be the
        BSR for the scope zone.\n        Currently, no other router is the preferred
        BSR, but this router\n        is not yet the elected BSR.  This is a temporary
        state that\n        prevents rapid thrashing of the choice of BSR during BSR\n
        \       election.\n   Elected-BSR (E-BSR)\n        The router is the elected
        BSR for the scope zone and it must\n        perform all the BSR functions.\n
        \  In addition to the three states, there is one timer:\n   o  The Bootstrap
        Timer (BST) - used to time out old bootstrap router\n      information, and
        used in the election process to terminate P-BSR\n      state.\n   The initial
        state for this configured scope zone is \"Pending-BSR\";\n   the Bootstrap
        Timer is initialized to BS_Rand_Override.  This is the\n   case both if the
        router is a Candidate-BSR at startup, and if it is\n   reconfigured to become
        one later.\n"
      title: 3.1.1.  Per-Scope-Zone Candidate-BSR State Machine
    - contents:
      - "3.1.2.  Per-Scope-Zone State Machine for Non-Candidate-BSR Routers\n   The
        following state machine is used for scope zones that are\n   discovered by
        the router from bootstrap messages.  A simplified state\n   machine is used
        for scope zones that are explicitly configured on the\n   router and for the
        global zone.  The differences are listed at the\n   end of this section.\n
        \  +-------------------------------------------------------------------+\n
        \  |                     When in NoInfo state                          |\n
        \  +--------------+----------------------------------------------------+\n
        \  |   Event      |         Receive BSM                                |\n
        \  +--------------+----------------------------------------------------+\n
        \  |              |         -> AP state                                |\n
        \  |   Action     |         Forward BSM; Store RP-Set;                 |\n
        \  |              |         Set Bootstrap Timer to BS_Timeout          |\n
        \  +--------------+----------------------------------------------------+\n
        \  +-------------------------------------------------------------------+\n
        \  |                      When in Accept Any state                     |\n
        \  +-------------+---------------------------+-------------------------+\n
        \  |   Event     |    Receive BSM            |     Scope-Zone Expiry   |\n
        \  |             |                           |     Timer Expires       |\n
        \  +-------------+---------------------------+-------------------------+\n
        \  |             |    -> AP state            |     -> NoInfo state     |\n
        \  |             |    Forward BSM; Store     |     Remove scope zone   |\n
        \  |   Action    |    RP-Set; Set            |     state               |\n
        \  |             |    Bootstrap Timer to     |                         |\n
        \  |             |    BS_Timeout             |                         |\n
        \  +-------------+---------------------------+-------------------------+\n
        \  +-------------------------------------------------------------------+\n
        \  |                   When in Accept Preferred state                  |\n
        \  +---------+---------------------+------------------+----------------+\n
        \  | Event   | Receive Preferred   |  Bootstrap       |  Receive Non-  |\n
        \  |         | BSM                 |  Timer Expires   |  preferred BSM |\n
        \  +---------+---------------------+------------------+----------------+\n
        \  |         | -> AP state         |  -> AA state     |  -> AP state   |\n
        \  |         | Forward BSM; Store  |  Refresh RP-     |                |\n
        \  | Action  | RP-Set; Set         |  Set; Remove     |                |\n
        \  |         | Bootstrap Timer to  |  BSR state; Set  |                |\n
        \  |         | BS_Timeout          |  SZT to          |                |\n
        \  |         |                     |  SZ_Timeout      |                |\n
        \  +---------+---------------------+------------------+----------------+\n
        \  A router that is not a Candidate-BSR may be in one of three states:\n   NoInfo\n
        \       The router has no information about this scope zone.  When in\n        this
        state, no state information is held and no timers (that\n        refer to
        this scope zone) run.  Conceptually, the state machine\n        is only instantiated
        when the router receives a scoped BSM for a\n        scope about which it
        has no prior knowledge.  However, because\n        the router immediately
        transitions to the AA state\n        unconditionally, the NoInfo state can
        be considered to be\n        virtual in a certain sense.  For this reason,
        it is omitted from\n        the description in section 2.\n   Accept Any (AA)\n
        \       The router does not know of an active BSR, and will accept the\n        first
        Bootstrap message it sees as giving the new BSR's identity\n        and the
        RP-Set.\n   Accept Preferred (AP)\n        The router knows the identity of
        the current BSR, and is using\n        the RP-Set provided by that BSR.  Only
        Bootstrap messages from\n        that BSR or from a C-BSR with higher weight
        than the current BSR\n        will be accepted.\n   In addition to the three
        states, there are two timers:\n   o  The Bootstrap Timer (BST) - used to time
        out old bootstrap router\n      information.\n   o  The Scope-Zone Expiry
        Timer (SZT) - used to time out the scope\n      zone itself if Bootstrap messages
        specifying this scope zone stop\n      arriving.\n   The initial state for
        scope zones about which the router has no\n   knowledge is \"NoInfo\".\n   The
        state machine used for scopes that have been configured\n   explicitly on
        the router and for the global scope (which always\n   exists) differs from
        the state machine above as follows.\n   o  The \"NoInfo\" state doesn't exist.\n
        \  o  No SZT is maintained.  Hence, the event \"Scope-Zone Expiry Timer\n
        \     Expires\" does not exist and no actions with regard to this timer\n
        \     are executed.\n   The initial state for this state machine is \"Accept
        Any\".\n"
      title: 3.1.2.  Per-Scope-Zone State Machine for Non-Candidate-BSR Routers
    - contents:
      - "3.1.3.  Bootstrap Message Processing Checks\n   When a Bootstrap message
        is received, the following initial checks\n   must be performed:\n   if ((DirectlyConnected(BSM.src_ip_address)
        == FALSE) OR\n        (we have no Hello state for BSM.src_ip_address)) {\n
        \    drop the Bootstrap message silently\n   }\n   if (BSM.dst_ip_address
        == ALL-PIM-ROUTERS) {\n     if (BSM.no_forward_bit == 0) {\n       if (BSM.src_ip_address
        != RPF_neighbor(BSM.BSR_ip_address)) {\n         drop the Bootstrap message
        silently\n       }\n     } else if ((any previous BSM for this scope has been
        accepted) OR\n                (more than BS_Period has elapsed since startup))
        {\n       #only accept no-forward BSM if quick refresh on startup\n       drop
        the Bootstrap message silently\n     }\n   } else if ((Unicast BSM support
        enabled) AND\n              (BSM.dst_ip_address is one of my addresses)) {\n
        \    if ((any previous BSM for this scope has been accepted) OR\n         (more
        than BS_Period has elapsed since startup)) {\n       #the packet was unicast,
        but this wasn't\n       #a quick refresh on startup\n       drop the Bootstrap
        message silently\n     }\n   } else {\n     drop the Bootstrap message silently\n
        \  }\n   if (the interface the message arrived on is an admin scope\n       border
        for the BSM.first_group_address) {\n     drop the Bootstrap message silently\n
        \  }\n   Basically, the packet must have come from a directly connected\n
        \  neighbor for which we have active Hello state.  It must have been\n   sent
        to the ALL-PIM-ROUTERS group, and unless it is a No-Forward BSM,\n   it must
        have been sent by the correct upstream router towards the BSR\n   that originated
        the Bootstrap message; or, if it is a No-Forward BSM,\n   we must have recently
        restarted and have no BSR state for that admin\n   scope.  Also, if unicast
        BSM support is enabled, a unicast BSM is\n   accepted if it is addressed to
        us, we have recently restarted, and we\n   have no BSR state for that admin
        scope.  In addition, it must not\n   have arrived on an interface that is
        a configured admin-scope border\n   for the first group address contained
        in the Bootstrap message.\n"
      title: 3.1.3.  Bootstrap Message Processing Checks
    - contents:
      - "3.1.4.  State Machine Transition Events\n   If the Bootstrap message passes
        the initial checks above without\n   being discarded, then it may cause a
        state transition event in one of\n   the above state machines.  For both candidate
        and non-candidate BSRs,\n   the following transition events are defined:\n
        \    Receive Preferred BSM\n          A Bootstrap message is received from
        a BSR that has weight\n          higher than or equal to that of the current
        BSR.  If a router\n          is in P-BSR state, then it uses its own weight
        as that of the\n          current BSR.\n          A Bootstrap message is also
        preferred if it is from the\n          current BSR with a lower weight than
        the previous BSM it sent,\n          provided that if the router is a Candidate-BSR
        the current BSR\n          still has a weight higher than or equal to that
        of the router\n          itself.  In this case, the \"Current Bootstrap Router's
        BSR\n          Priority\" state must be updated.  (For lower weight, see Non-\n
        \         preferred BSM from Elected BSR case.)\n     Receive Non-preferred
        BSM\n          A Bootstrap message is received from a BSR other than the\n
        \         current BSR that has lower weight than that of the current\n          BSR.
        \ If a router is in P-BSR state, then it uses its own\n          weight as
        that of the current BSR.\n     Receive Non-preferred BSM from Elected BSR\n
        \         A Bootstrap message is received from the elected BSR, but the\n
        \         BSR Priority field in the received message has changed, so\n          that
        now the currently elected BSR has lower weight than that\n          of the
        router itself.\n     Receive BSM\n          A Bootstrap message is received,
        regardless of BSR weight.\n   In addition to state machine transitions caused
        by the receipt of\n   Bootstrap messages, a state machine transition takes
        place each time\n   the Bootstrap Timer or Scope-Zone Expiry Timer expires.\n"
      title: 3.1.4.  State Machine Transition Events
    - contents:
      - "3.1.5.  State Machine Actions\n   The state machines specify actions that
        include setting the Bootstrap\n   Timer and the Scope-Zone Expiry Timer to
        various values.  These\n   values are defined in section 5.\n   In addition
        to setting and cancelling the timers, the following\n   actions may be triggered
        by state changes in the state machines:\n     Forward BSM\n          A multicast
        Bootstrap message with No-Forward bit cleared that\n          passes the Bootstrap
        Message Processing Checks is forwarded\n          out of all interfaces with
        PIM neighbors (including the\n          interface it is received on), except
        where this would cause\n          the BSM to cross an admin-scope boundary
        for the scope zone\n          indicated in the message.  For details, see
        section 3.4.\n     Originate BSM\n          A new Bootstrap message is constructed
        by the BSR, giving the\n          BSR's address and BSR priority, and containing
        the BSR's\n          chosen RP-Set.  The message is forwarded out of all interfaces\n
        \         on which PIM neighbors exist, except where this would cause\n          the
        BSM to cross an admin-scope boundary for the scope zone\n          indicated
        in the message.\n     Store RP-Set\n          The router uses the group-to-RP
        mappings contained in a BSM to\n          update its local RP-Set.\n          This
        action is skipped for an empty BSM.  A BSM is empty if it\n          contains
        no group ranges, or if it only contains a single\n          group range where
        that group range has the Admin Scope Zone\n          bit set (a scoped BSM)
        and an RP count of zero.\n          If a mapping does not yet exist, it is
        created and the\n          associated Group-to-RP mapping Expiry Timer (GET)
        is\n          initialized with the holdtime from the BSM.\n          If a
        mapping already exists, its GET is set to the holdtime\n          from the
        BSM.  If the holdtime is zero, the mapping is removed\n          immediately.
        \ Note that for an existing mapping, the RP\n          priority must be updated
        if changed.\n          Mappings for a group range are also to be immediately
        removed\n          if they are not present in the received group range.  This\n
        \         means that if there are any existing group-to-RP mappings for\n
        \         a range where the respective RPs are not in the received\n          range,
        then those mappings must be removed.\n          All RP mappings associated
        with the scope zone of the BSM are\n          updated with the new hash mask
        length from the received BSM.\n          This includes RP mappings for all
        group ranges learned for\n          this zone, not just the ranges in this
        particular BSM.\n          In addition, the entire BSM is stored for use in
        the action\n          Refresh RP-Set and to prime a new PIM neighbor as described\n
        \         below.\n     Refresh RP-Set\n          When the Bootstrap Timer
        expires, the router uses the copy of\n          the last BSM that it has received
        to refresh its RP-Set\n          according to the action Store RP-Set as if
        it had just\n          received it.  This will increase the chance that the
        group-to-\n          RP mappings will not expire during the election of the
        new\n          BSR.\n     Remove BSR state\n          When the Bootstrap Timer
        expires, all state associated with\n          the current BSR is removed (address,
        priority, BST, and saved\n          last BSM; see section 2).  Note that this
        does not include any\n          group-to-RP mappings.\n     Remove scope zone
        state\n          When the Scope-Zone Expiry Timer expires, all state associated\n
        \         with the scope zone is removed (see section 2).\n"
      title: 3.1.5.  State Machine Actions
    title: 3.1.  Bootstrap Router Election
  - contents:
    - "3.2.  Sending Candidate-RP-Advertisement Messages\n   Every C-RP periodically
      unicasts a C-RP-Adv message to the BSR for\n   each scope zone for which it
      has state, to inform the BSR of the\n   C-RP's willingness to function as an
      RP.  These messages are sent\n   with an interval of C_RP_Adv_Period, except
      when a new BSR is\n   elected; see below.\n   When a new BSR is elected, the
      C-RP MUST send one to three C-RP-Adv\n   messages and wait a small randomized
      period C_RP_Adv_Backoff before\n   sending each message.  We recommend sending
      three messages because it\n   is important that the BSR quickly learns which
      RPs are active, and\n   some packet loss may occur when a new BSR is elected
      due to changes\n   in the network.  One way of implementing this is to set the
      CRPT to\n   C_RP_Adv_Backoff when the new BSR is elected, as well as setting
      a\n   counter to 2.  Whenever the CRPT expires, we first send a C-RP-Adv\n   message
      as usual.  Next, if the counter is non-zero, it is\n   decremented and the CRPT
      is again set to C_RP_Adv_Backoff instead of\n   C_RP_Adv_Period.\n   The Priority
      field in these messages is used by the BSR to select\n   which C-RPs to include
      in the RP-Set.  Note that lower values of this\n   field indicate higher priorities,
      so that a value of zero is the\n   highest possible priority.  C-RPs should,
      by default, send C-RP-Adv\n   messages with the Priority field set to 192.\n
      \  When a C-RP is being shut down, it SHOULD immediately send a C-RP-Adv\n   message
      to the BSR for each scope zone for which it is currently\n   serving as an RP;
      the Holdtime in this C-RP-Adv message should be\n   zero.  The BSR will then
      immediately time out the C-RP and generate a\n   new Bootstrap message with
      the shut down RP holdtime set to 0.\n   A C-RP-Adv message carries a list of
      group address and group mask\n   field pairs.  This enables the C-RP to specify
      the group ranges for\n   which it is willing to be the RP.  If the C-RP becomes
      an RP, it may\n   enforce this scope acceptance when receiving Register or Join/Prune\n
      \  messages.\n   A C-RP is configured with a list of group ranges for which
      it should\n   advertise itself as the C-RP.  A C-RP uses the following algorithm
      to\n   determine which ranges to send to a given BSR.\n   For each group range
      R in the list, the C-RP advertises that range to\n   the scoped BSR for the
      smallest scope that \"contains\" R.  For IPv6,\n   the containing scope is determined
      by matching the scope identifier\n   of the group range with the scope of the
      BSR.  For IPv4, it is the\n   longest-prefix match for R, amongst the known
      admin-scope ranges.  If\n   no scope is found to contain the group range, the
      C-RP includes it in\n   the C-RP-Adv sent to the non-scoped BSR.  If a non-scoped
      BSR is not\n   known, the range is not included in any C-RP-Adv.\n   In addition,
      for each IPv4 group range R in the list, for each scoped\n   BSR whose scope
      range is strictly contained within R, the C-RP SHOULD\n   by default advertise
      that BSR's scope range to that BSR.  And for\n   each IPv6 group range R in
      the list with prefix length < 16, the C-RP\n   SHOULD by default advertise each
      sub-range of prefix length 16 to the\n   scoped BSR with the corresponding scope
      ID.  An implementation MAY\n   supply a configuration option to prevent the
      behavior described in\n   this paragraph, but such an option SHOULD be disabled
      by default.\n   For IPv6, the mask length of all group ranges included in the\n
      \  C-RP-Adv message sent to a scoped BSR MUST be >= 16.\n   If the above algorithm
      determines that there are no group ranges to\n   advertise to the BSR for a
      particular scope zone, a C-RP-Adv message\n   MUST NOT be sent to that BSR.
      \ A C-RP MUST NOT send a C-RP-Adv\n   message with no group ranges in it.\n
      \  If the same router is the BSR for more than one scope zone, the\n   C-RP-Adv
      messages for these scope zones MAY be combined into a single\n   message.\n
      \  If the C-RP is a ZBR for an admin-scope zone, then the Admin Scope\n   Zone
      bit MUST be set in the C-RP-Adv messages it sends for that scope\n   zone; otherwise
      this bit MUST NOT be set.  This information is\n   currently only used for logging
      purposes by the BSR, but might allow\n   for future extensions of the protocol.\n"
    title: 3.2.  Sending Candidate-RP-Advertisement Messages
  - contents:
    - "3.3.  Creating the RP-Set at the BSR\n   Upon receiving a C-RP-Adv message,
      the router needs to decide whether\n   or not to accept each of the group ranges
      included in the message.\n   For each group range in the message, the router
      checks to see if it\n   is the elected BSR for any scope zone that contains
      the group range,\n   or if it is elected as the non-scoped BSR.  If so, the
      group range is\n   accepted; if not, the group range is ignored.\n   For security
      reasons, we recommend that implementations have a way of\n   restricting which
      IP addresses the BSR accepts C-RP-Adv messages\n   from, e.g., access lists.
      \ For use of scoped BSR, it may also be\n   useful to specify which group ranges
      should be accepted.\n   If the group range is accepted, a group-to-C-RP mapping
      is created\n   for this group range and the RP Address from the C-RP-Adv message.\n
      \  If the mapping is not already part of the C-RP-Set, it is added to\n   the
      C-RP-Set and the associated Group-to-C-RP mapping Expiry Timer\n   (CGET) is
      initialized to the holdtime from the C-RP-Adv message.  Its\n   priority is
      set to the Priority from the C-RP-Adv message.\n   If the mapping is already
      part of the C-RP-Set, it is updated with\n   the Priority from the C-RP-Adv
      message, and its associated CGET is\n   reset to the holdtime from the C-RP-Adv
      message.  If the holdtime is\n   zero, the mapping is immediately removed from
      the C-RP-Set.\n   The hash mask length is a global property of the BSR and is
      therefore\n   the same for all mappings managed by the BSR.\n   For compatibility
      with the previous version of the BSR specification,\n   a C-RP-Adv message with
      no group ranges SHOULD be treated as though\n   it contained the single group
      range ff00::/8 or 224/4.  Therefore,\n   according to the rule above, this group
      range will be accepted if and\n   only if the router is elected as the non-scoped
      BSR.\n   When a CGET expires, the corresponding group-to-C-RP mapping is\n   removed
      from the C-RP-Set.\n   The BSR constructs the RP-Set from the C-RP-Set.  It
      may apply a\n   local policy to limit the number of Candidate-RPs included in
      the\n   RP-Set.  The BSR may override the range indicated in a C-RP-Adv\n   message
      unless the 'Priority' field from the C-RP-Adv message is less\n   than 128.\n
      \  If the BSR learns of both BIDIR and PIM-SM Candidate-RPs for the same\n   group
      range, the BSR MUST only include RPs for one of the protocols\n   in the BSMs.
      \ The default behavior SHOULD be to prefer BIDIR.\n   For inclusion in a BSM,
      the RP-Set is subdivided into sets of {group-\n   range, RP-Count, RP-addresses}.
      \ For each RP-address, the\n   \"RP-Holdtime\" field is set to the Holdtime
      from the C-RP-Set, subject\n   to the constraint that it MUST be larger than
      BS_Period and SHOULD be\n   larger than 2.5 times BS_Period to allow for some
      Bootstrap messages\n   getting lost.  If some holdtimes from the C-RP-Sets do
      not satisfy\n   this constraint, the BSR MUST replace those holdtimes with a
      value\n   satisfying the constraint.  An exception to this is the holdtime of\n
      \  zero, which is used to immediately withdraw mappings.\n   The format of the
      Bootstrap message allows 'semantic fragmentation',\n   if the length of the
      original Bootstrap message exceeds the packet\n   maximum boundaries.  However,
      to reduce the semantic fragmentation\n   required, we recommend against configuring
      a large number of routers\n   as C-RPs.\n   In general, BSMs are originated
      at regular intervals according to the\n   BS_Period timer.  We do recommend
      that a BSM is also originated\n   whenever the RP-set to be announced in the
      BSMs changes.  This will\n   usually happen when receiving C-RP advertisements
      from a new C-RP, or\n   when a C-RP is shut down (C-RP advertisement with a
      holdtime of\n   zero).  There MUST however be a minimum of BS_Min_Interval between\n
      \  each time a BSM is sent.  In particular, when a new BSR is elected,\n   it
      will first send one BSM (which is likely to be empty since it has\n   not yet
      received any C-RP advertisements), and then wait at least\n   BS_Min_Interval
      before sending a new one.  During that time, it is\n   likely to have received
      C-RP advertisements from all usable C-RPs\n   (since we say that a C-RP should
      send one or more advertisements with\n   small random delays of C_RP_Adv_Backoff
      when a new BSR is elected).\n   For this case in particular, where routers may
      not have a usable RP-\n   set, we recommend originating a BSM as soon as BS_Min_Interval
      has\n   passed.  We suggest though that a BSR can do this in general.  One\n
      \  way of implementing this, is to decrease the Bootstrap Timer to\n   BS_Min_Interval
      whenever the RP-set changes, while not changing the\n   timer if it is less
      than or equal to BS_Min_Interval.\n   A BSR originates separate scoped BSMs
      for each scope zone for which\n   it is the elected BSR, as well as originating
      non-scoped BSMs if it\n   is the elected non-scoped BSR.\n   Each group-to-C-RP
      mapping is included in precisely one of these BSMs\n   -- namely, the scoped
      BSM for the narrowest scope containing the\n   group range of the mapping, if
      any, or the non-scoped BSM otherwise.\n   A scoped BSM MUST have at least one
      group range, and the first group\n   range in a scoped BSM MUST have the Admin
      Scope Zone bit set.  This\n   group range identifies the scope of the BSM.  In
      a scoped IPv4 BSM,\n   the first group range is the range corresponding to the
      scope of the\n   BSM.  In a scoped IPv6 BSM, the first group range may be any
      group\n   range subject to the general condition that all the group ranges in\n
      \  such a BSM MUST have a mask length of at least 16 and MUST have the\n   same
      scope ID as the scope of the BSM.\n   Apart from identifying the scope, the
      first group range in a scoped\n   BSM is treated like any other range with respect
      to RP mappings.\n   That is, all mappings in the RP-set for this group range,
      if any,\n   must be included in this first group range in the BSM.  After this\n
      \  group range, other group ranges in this scope (for which there are RP\n   mappings)
      appear in any order.\n   The Admin Scope Zone bit of all group ranges other
      than the first\n   SHOULD be set to 0 on origination, and MUST be ignored on
      receipt.\n   When an elected BSR is being shut down, it should immediately\n
      \  originate a Bootstrap message listing its current RP-Set, but with\n   the
      BSR Priority field set to the lowest priority value possible.\n   This will
      cause the election of a new BSR to happen more quickly.\n"
    title: 3.3.  Creating the RP-Set at the BSR
  - contents:
    - "3.4.  Forwarding Bootstrap Messages\n   Generally, bootstrap messages originate
      at the BSR, and are hop-by-\n   hop forwarded by intermediate routers if they
      pass the Bootstrap\n   Message Processing Checks.  There are two exceptions
      to this.  One is\n   that a bootstrap message is not forwarded if its No-Forward
      bit is\n   set; see section 3.5.1.  The other is that unicast BSMs (see section\n
      \  3.5.2) are usually not forwarded.  Implementers MAY, however, at\n   their
      own discretion choose to re-send a No-Forward or unicast BSM in\n   a multicast
      BSM, which MUST have the No-Forward bit cleared.  It is\n   essential that the
      No-Forward bit is cleared, since no Reverse Path\n   Forwarding (RPF) check
      is performed by the receiver when it is set.\n   By hop-by-hop forwarding, we
      mean that the Bootstrap message itself\n   is forwarded, not the entire IP packet.
      \ Each hop constructs an IP\n   packet for each of the interfaces the BSM is
      to be forwarded out of;\n   each packet contains the entire BSM that was received.\n
      \  When a Bootstrap message is forwarded, it is forwarded out of every\n   multicast-capable
      interface that has PIM neighbors (including the one\n   over which the message
      was received).  The exception to this is if\n   the interface is an admin-scope
      boundary for the admin-scope zone\n   indicated in the first group range in
      the Bootstrap message packet.\n   As an optimization, a router MAY choose not
      to forward a BSM out of\n   the interface the message was received on if that
      interface is a\n   point-to-point interface.  On interfaces with multiple PIM
      neighbors,\n   a router SHOULD forward an accepted BSM out of the interface
      that BSM\n   was received on, but if the number of PIM neighbors on that interface\n
      \  is large, it MAY delay forwarding a BSM out of that interface by a\n   small
      randomized interval to prevent message implosion.  A\n   configuration option
      MAY be provided to disable forwarding out of the\n   interface a message was
      received on, but we recommend that the\n   default behavior is to forward out
      of that interface.\n   Rationale: A BSM needs to be forwarded out of the interface
      the\n   message was received on (in addition to the other interfaces) because\n
      \  the routers on a LAN may not have consistent routing information.  If\n   three
      routers on a LAN are A, B, and C, and at router B RPF(BSR)==A\n   and at router
      C RPF(BSR)==B, then router A originally forwards the\n   BSM onto the LAN, but
      router C will only accept it when router B re-\n   forwards the message onto
      the LAN.  If the underlying routing\n   protocol configuration guarantees that
      the routers have consistent\n   routing information, then forwarding out of
      the incoming interface\n   may safely be disabled.\n   A ZBR constrains all
      BSMs that are of equal or smaller scope than the\n   configured boundary.  That
      is, the BSMs are not accepted from,\n   originated, or forwarded on the interfaces
      on which the boundary is\n   configured.  For IPv6, the check is a comparison
      between the scope of\n   the first range in the scoped BSM and the scope of
      the configured\n   boundary.  For IPv4, the first range in the scoped BSM is
      checked to\n   see if it is contained in or is the same as the range of the\n
      \  configured boundary.\n"
    title: 3.4.  Forwarding Bootstrap Messages
  - contents:
    - "3.5.  Bootstrap Messages to New and Rebooting Routers\n   When a Hello message
      is received from a new neighbor, or a Hello\n   message with a new GenID is
      received from an existing neighbor, one\n   router on the LAN sends a stored
      copy of the Bootstrap message for\n   each admin-scope zone to the new or rebooting
      router.  This allows\n   new or rebooting routers to learn the RP-Set quickly.\n
      \  This message SHOULD be sent as a No-Forward Bootstrap message; see\n   section
      3.5.1.  For backwards compatibility, this message MAY instead\n   or in addition
      be sent as a unicast Bootstrap message; see section\n   3.5.2.  These messages
      MUST only be accepted at startup; see section\n   3.1.3.\n   The router that
      does this is the Designated Router (DR) on the LAN,\n   or, if the new or rebooting
      router is the DR, the router that would\n   be the DR if the new or rebooting
      router were excluded from the DR\n   election process.\n   Before sending a
      Bootstrap message in this manner, the router must\n   wait until it has sent
      a triggered Hello message on this interface;\n   otherwise, the new neighbor
      will discard the Bootstrap message.\n"
    - contents:
      - "3.5.1.  No-Forward Bootstrap Messages\n   A No-Forward Bootstrap message,
        is a bootstrap message that has the\n   No-Forward bit set.  All implementations
        SHOULD support sending of\n   No-Forward Bootstrap messages, and SHOULD also
        accept them.  The RPF\n   check MUST NOT be performed in the BSM processing
        check for a No-\n   Forward BSM; see section 3.1.3.  The messages have the
        same source\n   and destination addresses as the usual multicast Bootstrap
        messages.\n"
      title: 3.5.1.  No-Forward Bootstrap Messages
    - contents:
      - "3.5.2.  Unicasting Bootstrap Messages\n   For backwards compatibility, implementations
        MAY support unicast\n   Bootstrap messages.  Whether to send unicast Bootstrap
        messages\n   instead of or in addition to No-Forward Bootstrap messages, and
        also\n   whether to accept such messages, SHOULD be configurable.  This\n
        \  message is unicast to the neighbor.\n"
      title: 3.5.2.  Unicasting Bootstrap Messages
    title: 3.5.  Bootstrap Messages to New and Rebooting Routers
  - contents:
    - "3.6.  Receiving and Using the RP-Set\n   The RP-Set maintained by BSR is used
      by RP-based multicast routing\n   protocols like PIM-SM and BIDIR-PIM.  These
      protocols may obtain RP-\n   Sets from other sources as well.  How the final
      group-to-RP mappings\n   are obtained from these RP-Sets is not part of the
      BSR specification.\n   In general, the routing protocols need to re-calculate
      the mappings\n   when any of their RP-Sets change.  How such a change is signalled
      to\n   the routing protocol is also not part of the present specification.\n
      \  Some group-to-RP mappings in the RP-Set indicate group ranges for\n   which
      PIM-SM should be used; others indicate group ranges for use\n   with BIDIR-PIM.
      \ Routers that support only one of these protocols\n   MUST NOT ignore ranges
      indicated as being for the other protocol.\n   They MUST NOT treat them as being
      for the protocol they support.\n   If a mapping is not already part of the RP-Set,
      it is added to the\n   RP-Set and the associated Group-to-RP mapping Expiry
      Timer (GET) is\n   initialized to the holdtime from the Bootstrap message.  Its
      priority\n   is set to the Priority from the Bootstrap message.\n   If a mapping
      is already part of the RP-Set, it is updated with the\n   Priority from the
      Bootstrap message and its associated GET is reset\n   to the holdtime from the
      Bootstrap message.  If the holdtime is zero,\n   the mapping is removed from
      the RP-Set immediately.\n"
    title: 3.6.  Receiving and Using the RP-Set
  title: 3.  Bootstrap Router Election and RP-Set Distribution
- contents:
  - "4.  Message Formats\n   BSR messages are PIM messages, as defined in [1].  The
    values of the\n   PIM Message Type field for BSR messages are:\n      4  Bootstrap\n
    \     8  Candidate-RP-Advertisement\n   As with all other PIM control messages,
    BSR messages have IP protocol\n   number 103.\n   Candidate-RP-Advertisement messages
    are unicast to a BSR.  Usually,\n   Bootstrap messages are multicast with TTL
    1 to the ALL-PIM-ROUTERS\n   group, but in some circumstances (described in section
    3.5.2)\n   Bootstrap messages may be unicast to a specific PIM neighbor.\n   The
    IP source address used for Candidate-RP-Advertisement messages is\n   a domain-wide
    reachable address.  The IP source address used for\n   Bootstrap messages (regardless
    of whether they are being originated\n   or forwarded) is the link-local address
    of the interface on which the\n   message is being sent (i.e., the same source
    address that the router\n   uses for the Hello messages that it sends out that
    interface).\n   The IPv4 ALL-PIM-ROUTERS group is 224.0.0.13.  The IPv6 ALL-PIM-\n
    \  ROUTERS group is ff02::d.\n   In this section, we use the following terms defined
    in the PIM-SM\n   specification [1]:\n      o  Encoded-Unicast format\n      o
    \ Encoded-Group format\n   We repeat these here to aid readability.\n   Encoded-Unicast
    address\n   An Encoded-Unicast address takes the following format:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |  Addr Family  | Encoding Type |     Unicast Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...\n
    \  Addr Family\n        The PIM address family of the 'Unicast Address' field
    of this\n        address.\n        Values of 0-127 are as assigned by the IANA
    for Internet Address\n        Families in [11].  Values 128-250 are reserved to
    be assigned by\n        the IANA for PIM-specific Address Families.  Values 251
    though\n        255 are designated for private use.  As there is no assignment\n
    \       authority for this space, collisions should be expected.\n   Encoding
    Type\n        The type of encoding used within a specific Address Family.  The\n
    \       value '0' is reserved for this field, and represents the native\n        encoding
    of the Address Family.\n   Unicast Address\n        The unicast address as represented
    by the given Address Family\n        and Encoding Type.\n   Encoded-Group address\n
    \  Encoded-Group addresses take the following format:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |  Addr Family  | Encoding Type |B| Reserved  |Z|  Mask Len     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Group multicast Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...\n
    \  Addr Family\n        Described above.\n   Encoding Type\n        Described
    above.\n   [B]IDIR bit\n        When set, all BIDIR-capable PIM routers will operate
    the\n        protocol described in [2] for the specified group range.\n   Reserved\n
    \       Transmitted as zero.  Ignored upon receipt.\n   Admin Scope [Z]one\n        When
    set, this bit indicates that this group range is an\n        administratively
    scoped range.\n   Mask Len\n        The Mask length field is 8 bits.  The value
    is the number of\n        contiguous one bits that are left justified and used
    as a mask;\n        when combined with the group address, it describes a range
    of\n        groups.  It is less than or equal to the address length in bits\n
    \       for the given Address Family and Encoding Type.  If the message\n        is
    sent for a single group, then the Mask length must equal the\n        address
    length in bits for the given Address Family and Encoding\n        Type (e.g.,
    32 for IPv4 native encoding and 128 for IPv6 native\n        encoding).\n   Group
    multicast Address\n        Contains the group address.\n"
  - contents:
    - "4.1.  Bootstrap Message Format\n   A Bootstrap message may be divided up into
      'semantic fragments' if\n   the resulting IP datagram would exceed the maximum
      packet size\n   boundaries.  Basically, a single Bootstrap message can be sent
      as\n   multiple semantic fragments (each in a separate IP datagram), so long\n
      \  as the fragment tags of all the semantic fragments comprising the\n   message
      are the same.  The format of a single non-fragmented message\n   is the same
      as the one used for semantic fragments.\n   The format of a single 'fragment'
      is given below:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |PIM Ver| Type  |N|  Reserved   |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |         Fragment Tag          | Hash Mask Len | BSR Priority  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             BSR Address (Encoded-Unicast format)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            Group Address 1 (Encoded-Group format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | RP Count 1    | Frag RP Cnt 1 |         Reserved              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address 1 (Encoded-Unicast format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          RP1 Holdtime         | RP1 Priority  |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address 2 (Encoded-Unicast format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          RP2 Holdtime         | RP2 Priority  |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                               .                               |\n   |                               .
      \                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address m (Encoded-Unicast format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          RPm Holdtime         | RPm Priority  |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            Group Address 2 (Encoded-Group format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                               .                               |\n   |                               .
      \                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            Group Address n (Encoded-Group format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | RP Count n    | Frag RP Cnt n |          Reserved             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address 1 (Encoded-Unicast format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          RP1 Holdtime         | RP1 Priority  |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address 2 (Encoded-Unicast format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          RP2 Holdtime         | RP2 Priority  |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                               .                               |\n   |                               .
      \                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address m (Encoded-Unicast format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          RPm Holdtime         | RPm Priority  |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  PIM Version, Reserved, Checksum\n        Described in [1].\n   Type\n        PIM
      Message Type.  Value is 4 for a Bootstrap message.\n   [N]o-Forward bit\n        When
      set, this bit means that the Bootstrap message fragment is\n        not to be
      forwarded.\n   Fragment Tag\n        A randomly generated number, acts to distinguish
      the fragments\n        belonging to different Bootstrap messages; fragments
      belonging\n        to same Bootstrap message carry the same 'Fragment Tag'.\n
      \  Hash Mask Len\n        The length (in bits) of the mask to use in the hash
      function.\n        For IPv4, we recommend a value of 30.  For IPv6, we recommend
      a\n        value of 126.\n   BSR Priority\n        Contains the BSR priority
      value of the included BSR.  This field\n        is considered as a high-order
      byte when comparing BSR addresses.\n        BSRs should by default set this
      field to 64.  Note that for\n        historical reasons, the highest BSR priority
      is 255 (the higher\n        the better), whereas the highest RP Priority (see
      below) is 0\n        (the lower the better).\n   BSR Address\n        The address
      of the bootstrap router for the domain.  The format\n        for this address
      is given in the Encoded-Unicast address in [1].\n   Group Address 1..n\n        The
      group ranges (address and mask) with which the Candidate-RPs\n        are associated.
      \ Format described in [1].  In a fragment\n        containing admin-scope ranges,
      the first group range in the\n        fragment MUST satisfy the following conditions:\n
      \       o  it MUST have the Admin Scope Zone bit set;\n        o  for IPv4,
      it MUST be the group range for the entire admin-\n           scope range (this
      is required even if there are no RPs in the\n           RP-Set for the entire
      admin-scope range -- in this case, the\n           sub-ranges for the RP-Set
      are specified later in the fragment\n           along with their RPs);\n        o
      \ for IPv6, the Mask Len MUST be at least 16 and have the scope\n           ID
      of the admin-scope range.\n   RP Count 1..n\n        The number of Candidate-RP
      addresses included in the whole\n        Bootstrap message for the corresponding
      group range.  A router\n        does not replace its old RP-Set for a given
      group range\n        until/unless it receives 'RP-Count' addresses for that
      range;\n        the addresses could be carried over several fragments.  If only\n
      \       part of the RP-Set for a given group range was received, the\n        router
      discards it without updating that specific group range's\n        RP-Set.\n
      \  Frag RP Cnt 1..m\n        The number of Candidate-RP addresses included in
      this fragment\n        of the Bootstrap message, for the corresponding group
      range.\n        The 'Frag RP Cnt' field facilitates parsing of the RP-Set for
      a\n        given group range, when carried over more than one fragment.\n   RP
      address 1..m\n        The address of the Candidate-RPs, for the corresponding
      group\n        range.  The format for these addresses is given in the Encoded-\n
      \       Unicast address in [1].\n   RP1..m Holdtime\n        The Holdtime (in
      seconds) for the corresponding RP.  This field\n        is copied from the 'Holdtime'
      field of the associated RP stored\n        at the BSR.\n   RP1..m Priority\n
      \       The 'Priority' of the corresponding RP and Encoded-Group\n        Address.
      \ This field is copied from the 'Priority' field stored\n        at the BSR
      when receiving a C-RP-Adv message.  The highest\n        priority is '0' (i.e.,
      unlike BSR priority, the lower the value\n        of the 'Priority' field, the
      better).  Note that the priority is\n        per RP and per Group Address.\n
      \  Within a Bootstrap message, the BSR Address, all the Group Addresses,\n   and
      all the RP Addresses MUST be of the same address family.  In\n   addition, the
      address family of the fields in the message MUST be the\n   same as the IP source
      and destination addresses of the packet.  This\n   permits maximum implementation
      flexibility for dual-stack IPv4/IPv6\n   routers.\n"
    - contents:
      - "4.1.1.  Semantic Fragmentation of BSMs\n   Bootstrap messages may be split
        over several PIM Bootstrap Message\n   Fragments (BSMFs); this is known as
        semantic fragmentation.  Each of\n   these must follow the above format.  All
        fragments of a given\n   Bootstrap message MUST have identical values for
        the Type, No-Forward\n   bit, Fragment Tag, Hash Mask Len, BSR Priority, and
        BSR Address\n   fields.  That is, only the group-to-RP mappings may differ
        between\n   fragments.\n   This is useful if the BSM would otherwise exceed
        the MTU of the link\n   the message will be forwarded over.  If one relies
        purely on IP\n   fragmentation, one would lose the entire message if a single
        fragment\n   is lost.  By use of semantic fragmentation, a single lost IP
        fragment\n   will only cause the loss of the semantic fragment that the IP\n
        \  fragment was part of.  As described below, a router only needs to\n   receive
        all the RPs for a specific group range to update that range.\n   This means
        that loss of a semantic fragment, due to an IP fragment\n   getting lost,
        only affects the group ranges for which the lost\n   semantic fragment contains
        information.\n   If the BSR can split up the BSM so that each group range
        (and all of\n   its RP information) can fit entirely inside one BSMF, then
        it should\n   do so.  If a BSMF is lost, the state from the previous BSM for
        the\n   group ranges from the missing BSMF will be retained.  Each fragment\n
        \  that does arrive will update the RP information for the group ranges\n
        \  contained in that fragment, and the new group-to-RP mappings for\n   those
        can be used immediately.  The information from the missing\n   fragment will
        be obtained when the next BSM is transmitted.\n   If the list of RPs for a
        single group range is long, one may split\n   the information across multiple
        BSMFs to avoid IP fragmentation.  In\n   this case, all the BSMFs comprising
        the information for that group\n   range must be received before the group-to-RP
        mapping in use can be\n   modified.  This is the purpose of the RP Count field
        -- a router\n   receiving BSMFs from the same BSM (i.e., that have the same
        fragment\n   tag) must wait until BSMFs providing RP Count RPs for that group\n
        \  range have been received before the new group-to-RP mapping can be\n   used
        for that group range.  If a single BSMF from such a large group\n   range
        is lost, then that entire group range will have to wait until\n   the next
        BSM is originated.  Hence, in this case, the benefit of\n   using semantic
        fragmentation is dubious.\n   Next we need to consider how a BSR would remove
        group ranges.  A\n   router receiving a set of BSMFs cannot tell if a group
        range is\n   missing.  If it has seen a group range before, it must assume
        that\n   that group range still exists, and that the BSMF describing that\n
        \  group range has been lost.  The router should retain this information\n
        \  for BS_Timeout.  Thus, for a BSR to remove a group range, it should\n   include
        that group range, but with an RP Count of zero, and it should\n   resend this
        information in each BSM for BS_Timeout.\n"
      title: 4.1.1.  Semantic Fragmentation of BSMs
    title: 4.1.  Bootstrap Message Format
  - contents:
    - "4.2.  Candidate-RP-Advertisement Message Format\n   Candidate-RP-Advertisement
      messages are periodically unicast from the\n   C-RPs to the BSR.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |PIM Ver| Type  |   Reserved    |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Prefix Count  |   Priority    |           Holdtime            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             RP Address (Encoded-Unicast format)               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |            Group Address 1 (Encoded-Group format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                               .                               |\n   |                               .
      \                              |\n   |                               .                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |            Group
      Address n (Encoded-Group format)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  PIM Version, Reserved, Checksum\n        Described in [1].\n   Type\n        PIM
      Message Type.  Value is 8 for a Candidate-RP-Advertisement\n        message.\n
      \  Prefix Count\n        The number of Encoded-Group Addresses included in the
      message;\n        indicating the group range for which the C-RP is advertising.\n
      \       C-RPs MUST NOT send C-RP-Adv messages with a Prefix Count of\n        '0'.\n
      \  Priority\n        The 'Priority' of the included RP, for the corresponding\n
      \       Encoded- Group Address (if any).  The highest priority is '0'\n        (i.e.,
      the lower the value of the 'Priority' field, the higher\n        the priority).
      \ This field is stored at the BSR upon receipt\n        along with the RP address
      and corresponding Encoded-Group\n        Address.\n   Holdtime\n        The
      amount of time (in seconds) the advertisement is valid.\n        This field
      allows advertisements to be aged out.  This field\n        should be set to
      2.5 times C_RP_Adv_Period.\n   RP Address\n        The address of the interface
      to advertise as a Candidate-RP.\n        The format for this address is given
      in the Encoded-Unicast\n        address in [1].\n   Group Address-1..n\n        The
      group ranges for which the C-RP is advertising.  Format\n        described in
      Encoded-Group-Address in [1].\n   Within a Candidate-RP-Advertisement message,
      the RP Address and all\n   the Group Addresses MUST be of the same address family.
      \ In addition,\n   the address family of the fields in the message MUST be the
      same as\n   the IP source and destination addresses of the packet.  This permits\n
      \  maximum implementation flexibility for dual-stack IPv4/IPv6 routers.\n"
    title: 4.2.  Candidate-RP-Advertisement Message Format
  title: 4.  Message Formats
- contents:
  - "5.  Timers and Timer Values\n   Timer Name: Bootstrap Timer (BST(Z))\n   +------------------+-------------------------+----------------------+\n
    \  | Value Name       |  Value                  |   Explanation        |\n   +------------------+-------------------------+----------------------+\n
    \  | BS_Period        |  Default: 60 seconds    |   Periodic interval  |\n   |
    \                 |                         |   with which BSMs    |\n   |                  |
    \                        |   are normally       |\n   |                  |                         |
    \  originated         |\n   +------------------+-------------------------+----------------------+\n
    \  | BS_Timeout       |  Default: 130 seconds   |   Interval after     |\n   |
    \                 |                         |   which a BSR is     |\n   |                  |
    \                        |   timed out if no    |\n   |                  |                         |
    \  BSM is received    |\n   |                  |                         |   from
    that BSR      |\n   +------------------+-------------------------+----------------------+\n
    \  | BS_Min_Interval  |  Default: 10 seconds    |   Minimum interval   |\n   |
    \                 |                         |   with which BSMs    |\n   |                  |
    \                        |   may be originated  |\n   +------------------+-------------------------+----------------------+\n
    \  | BS_Rand_Override |  see below              |   Randomized         |\n   |
    \                 |                         |   interval used to   |\n   |                  |
    \                        |   reduce control     |\n   |                  |                         |
    \  message overhead   |\n   |                  |                         |   during
    BSR         |\n   |                  |                         |   election           |\n
    \  +------------------+-------------------------+----------------------+\n   Note
    that BS_Timeout MUST be larger than BS_Period, even if their\n   values are changed
    from the defaults.  We recommend that BS_Timeout\n   is set to 2 times BS_Period
    plus 10 seconds.\n   BS_Rand_Override is calculated using the following pseudocode,
    in\n   which all values are in units of seconds.  The values of\n   BS_Rand_Override
    generated by this pseudocode are between 5 and 23\n   seconds, with smaller values
    generated if the C-BSR has a high\n   bootstrap weight, and larger values generated
    if the C-BSR has a low\n   bootstrap weight.\n      BS_Rand_Override = 5 + priorityDelay
    + addrDelay\n   where priorityDelay is given by:\n      priorityDelay = 2 * log_2(1
    + bestPriority - myPriority)\n   and addrDelay is given by the following for IPv4:\n
    \     if (bestPriority == myPriority) {\n          addrDelay = log_2(1 + bestAddr
    - myAddr) / 16\n      } else {\n          addrDelay = 2 - (myAddr / 2^31)\n      }\n
    \  and addrDelay is given by the following for IPv6:\n      if (bestPriority ==
    myPriority) {\n          addrDelay = log_2(1 + bestAddr - myAddr) / 64\n      }
    else {\n          addrDelay = 2 - (myAddr / 2^127)\n      }\n   and bestPriority
    is given by:\n      bestPriority = max(storedPriority, myPriority)\n   and bestAddr
    is given by:\n      bestAddr = max(storedAddr, myAddr)\n   and where myAddr is
    the Candidate-BSR's address, storedAddr is the\n   stored BSR's address, myPriority
    is the Candidate-BSR's configured\n   priority, and storedPriority is the stored
    BSR's priority.\n   Timer Name: Scope Zone Expiry Timer (SZT(Z))\n   +---------------+---------------------------+-----------------------+\n
    \  |  Value Name   |   Value                   |   Explanation         |\n   +---------------+---------------------------+-----------------------+\n
    \  |  SZ_Timeout   |   Default: 1300 seconds   |   Interval after      |\n   |
    \              |                           |   which a scope zone  |\n   |               |
    \                          |   is timed out if no  |\n   |               |                           |
    \  BSM is received     |\n   |               |                           |   for
    that scope      |\n   |               |                           |   zone                |\n
    \  +---------------+---------------------------+-----------------------+\n   Note
    that SZ_Timeout MUST be larger than BS_Timeout, even if their\n   values are changed
    from the defaults.  We recommend that SZ_Timeout\n   is set to 10 times BS_Timeout.\n
    \  Timer Name: Group-to-C-RP mapping Expiry Timer (CGET(M,Z))\n   +------------------------+-------------------+----------------------+\n
    \  |  Value Name            |    Value          |    Explanation       |\n   +------------------------+-------------------+----------------------+\n
    \  |  C-RP Mapping Timeout  |    from message   |    Holdtime from C-  |\n   |
    \                       |                   |    RP-Adv message    |\n   +------------------------+-------------------+----------------------+\n
    \  Timer Name: Group-to-RP mapping Expiry Timer (GET(M,Z))\n   +-----------------------+-------------------+-----------------------+\n
    \  |  Value Name           |   Value           |    Explanation        |\n   +-----------------------+-------------------+-----------------------+\n
    \  |  RP Mapping Timeout   |   from message    |    Holdtime from BSM  |\n   +-----------------------+-------------------+-----------------------+\n
    \  Timer Name: C-RP Advertisement Timer (CRPT)\n   +-------------------+------------------------+----------------------+\n
    \  | Value Name        |  Value                 |   Explanation        |\n   +-------------------+------------------------+----------------------+\n
    \  | C_RP_Adv_Period   |  Default: 60 seconds   |   Periodic interval  |\n   |
    \                  |                        |   with which C-RP-   |\n   |                   |
    \                       |   Adv messages are   |\n   |                   |                        |
    \  sent to a BSR      |\n   +-------------------+------------------------+----------------------+\n
    \  | C_RP_Adv_Backoff  |  Default: 0-3 seconds  |   Whenever a         |\n   |
    \                  |                        |   triggered C_RP_Adv |\n   |                   |
    \                       |   is sent, a new     |\n   |                   |                        |
    \  randomized value   |\n   |                   |                        |   between
    0 and 3    |\n   |                   |                        |   is used            |\n
    \  +-------------------+------------------------+----------------------+\n"
  title: 5.  Timers and Timer Values
- contents:
  - '6.  Security Considerations

    '
  - contents:
    - "6.1.  Possible Threats\n   Threats affecting the PIM BSR mechanism are primarily
      of two forms:\n   denial-of-service (DoS) attacks and traffic-diversion attacks.
      \ An\n   attacker that subverts the BSR mechanism can prevent multicast\n   traffic
      from reaching the intended recipients, can divert multicast\n   traffic to a
      place where they can monitor it, and can potentially\n   flood third parties
      with traffic.\n   Traffic can be prevented from reaching the intended recipients
      by one\n   of two mechanisms:\n   o  Subverting a BSM, and specifying RPs that
      won't actually forward\n      traffic.\n   o  Registering with the BSR as a
      C-RP, and then not forwarding\n      traffic.\n   Traffic can be diverted to
      a place where it can be monitored by both\n   of the above mechanisms; in this
      case, the RPs would forward the\n   traffic, but are located so as to aid monitoring
      or man-in-the-middle\n   attacks on the multicast traffic.\n   A third party
      can be flooded by either of the above two mechanisms by\n   specifying the third
      party as the RP, and register traffic will then\n   be forwarded to the third
      party.\n"
    title: 6.1.  Possible Threats
  - contents:
    - "6.2.  Limiting Third-Party DoS Attacks\n   The third-party DoS attack above
      can be greatly reduced if PIM\n   routers acting as DR do not continue to forward
      Register traffic to\n   the RP in the presence of ICMP Protocol Unreachable
      or ICMP Host\n   Unreachable responses.  If a PIM router sending Register packets
      to\n   an RP receives one of these responses to a data packet it has sent,\n
      \  it should rate- limit the transmission of future Register packets to\n   that
      RP for a short period of time.\n   As this does not affect interoperability,
      the precise details are\n   left to the implementer to decide.  However, we
      note that a router\n   implementing such rate limiting must only do so if the
      ICMP packet\n   correctly echoes part of a Register packet that was sent to
      the RP.\n   If this check were not made, then simply sending ICMP Unreachable\n
      \  packets to the DR with the source address of the RP spoofed would be\n   sufficient
      to cause a denial-of-service attack on the multicast\n   traffic originating
      from that DR.\n"
    title: 6.2.  Limiting Third-Party DoS Attacks
  - contents:
    - "6.3.  Bootstrap Message Security\n   If a legitimate PIM router in a domain
      is compromised, there is\n   little any security mechanism can do to prevent
      that router from\n   subverting PIM traffic in that domain.\n   Implementations
      SHOULD provide a per-interface configuration option\n   where one can specify
      that no Bootstrap messages are to be sent out\n   of or accepted on the interface.
      \ This should generally be configured\n   on all PMBRs in order not to receive
      messages from neighboring\n   domains.  This avoids receiving legitimate messages
      with conflicting\n   BSR information from other domains, and also prevents BSR
      attacks\n   from neighboring domains.  This option is also useful on leaf\n
      \  interfaces where there are only hosts present.  However, the Security\n   Considerations
      section of [1] states that there should be a mechanism\n   for not accepting
      PIM Hello messages on leaf interfaces and that\n   messages should only be accepted
      from valid PIM neighbors.  There may\n   however be additional issues with unicast
      Bootstrap messages; see\n   below.  In addition to dropping all multicast Bootstrap
      messages on\n   PMBRs, we also recommend configuring PMBRs (both towards other\n
      \  domains and on leaf interfaces) to drop all unicast PIM messages\n   (Bootstrap
      message, Candidate-RP Advertisement, PIM register, and PIM\n   register stop).\n"
    - contents:
      - "6.3.1.  Unicast Bootstrap Messages\n   There are some possible security issues
        with unicast Bootstrap\n   messages.  The Bootstrap Message Processing Checks
        prevent a router\n   from accepting a Bootstrap message from outside of the
        PIM Domain, as\n   the source address on Bootstrap messages must be an immediate
        PIM\n   neighbor.  There is however a small window of time after a reboot\n
        \  where a PIM router will accept a bad Bootstrap message that is\n   unicast
        from an immediate neighbor, and it might be possible to\n   unicast a Bootstrap
        message to a router during this interval from\n   outside the domain, using
        the spoofed source address of a neighbor.\n   The best way to protect against
        this is to use the above-mentioned\n   mechanism of configuring border and
        leaf interfaces to drop all\n   bootstrap messages, including unicast messages.
        \ This can also be\n   prevented if PMBRs perform source-address filtering
        to prevent\n   packets entering the PIM domain with IP source addresses that
        are\n   infrastructure addresses in the PIM domain.\n   The use of unicast
        Bootstrap messages is for backwards compatibility\n   only.  Due to the possible
        security implications, implementations\n   supporting unicast Bootstrap messages
        SHOULD provide a configuration\n   option for whether they are to be used.\n"
      title: 6.3.1.  Unicast Bootstrap Messages
    - contents:
      - "6.3.2.  Multi-Access Subnets\n   As mentioned above, implementations SHOULD
        provide a per-interface\n   configuration option so that leaf interfaces and
        interfaces facing\n   other domains can be configured to drop all Bootstrap
        messages.  In\n   this section, we will consider multi-access subnets where
        there are\n   both multiple PIM routers in a PIM domain and PIM routers outside
        the\n   PIM domain or non-trusted hosts.  On such subnets, one should (if\n
        \  possible) configure the PMBRs to drop Bootstrap messages.  This is\n   possible
        provided that the routers in the PIM domain receive\n   Bootstrap messages
        on other internal subnets.  That is, for each of\n   the routers on the multi-access
        subnet that are in our domain, the\n   RPF interface for each of the Candidate-BSR
        addresses must be an\n   internal interface (an interface not on a multi-access
        subnet).\n   There are however network topologies where this is not possible.
        \ For\n   such topologies, we recommend that IPsec Authentication Header (AH)\n
        \  is used to protect communication between the PIM routers in the\n   domain,
        and that such routers are configured to drop and log\n   communication attempts
        from any nodes that do not pass the\n   authentication check.  When all the
        PIM routers are under the same\n   administrative control, this authentication
        may use a configured\n   shared secret.  In order to prevent replay attacks,
        one will need to\n   have one security association (SA) per sender and use
        the sender\n   address for SA lookup.  The securing of interactions between
        PIM\n   neighbors is discussed in more detail in the Security Considerations\n
        \  section of [1], and so we do not discuss the details further here.\n   The
        same security mechanisms that can be used to secure PIM Join,\n   Prune, and
        Assert messages should also be used to secure Bootstrap\n   messages.  How
        exactly to secure PIM link-local messages is still\n   being worked on by
        the PIM working group; see [10].\n"
      title: 6.3.2.  Multi-Access Subnets
    title: 6.3.  Bootstrap Message Security
  - contents:
    - "6.4.  Candidate-RP-Advertisement Message Security\n   Even if it is not possible
      to subvert Bootstrap messages, an attacker\n   might be able to perform most
      of the same attacks by simply sending\n   C-RP-Adv messages to the BSR specifying
      the attacker's choice of RPs.\n   Thus, it is necessary to control the sending
      of C-RP-Adv messages in\n   essentially the same ways that we control Bootstrap
      messages.\n   However, C-RP-Adv messages are unicast and normally travel multiple\n
      \  hops, so controlling them is more difficult.\n"
    - contents:
      - "6.4.1.  Non-Cryptographic Security of C-RP-Adv Messages\n   We recommend
        that PMBRs are configured to drop C-RP-Adv messages.\n   One might configure
        the PMBRs to drop all unicast PIM messages\n   (Bootstrap message, Candidate-RP
        Advertisement, PIM register, and PIM\n   register stop).  PMBRs may also perform
        source-address filtering to\n   prevent packets entering the PIM domain with
        IP source addresses that\n   are infrastructure addresses in the PIM domain.
        \ We also recommend\n   that implementations have a way of restricting which
        IP addresses the\n   BSR accepts C-RP-Adv messages from.  The BSR can then
        be configured\n   to only accept C-RP-Adv messages from infrastructure addresses
        or the\n   subset used for Candidate-RPs.\n   If the unicast and multicast
        topologies are known to be congruent,\n   the following checks should be made.
        \ On interfaces that are\n   configured to be leaf subnets, all C-RP-Adv messages
        should be\n   dropped.  On multi- access subnets with multiple PIM routers
        and\n   hosts that are not trusted, the router can at least check that the\n
        \  source Media Access Control (MAC) address is that of a valid PIM\n   neighbor.\n"
      title: 6.4.1.  Non-Cryptographic Security of C-RP-Adv Messages
    - contents:
      - "6.4.2.  Cryptographic Security of C-RP-Adv Messages\n   For true security,
        we recommend that all C-RPs are configured to use\n   IPsec authentication.
        \ The authentication process for a C-RP-Adv\n   message between a C-RP and
        the BSR is identical to the authentication\n   process for PIM Register messages
        between a DR and the relevant RP,\n   except that there will normally be fewer
        C-RPs in a domain than there\n   are DRs, so key management is a little simpler.
        \ We do not describe\n   the details of this process further here, but refer
        to the Security\n   Considerations section of [1].  Note that the use of cryptographic\n
        \  security for C-RP-Adv messages does not remove the need for the non-\n
        \  cryptographic mechanisms, as explained above.\n"
      title: 6.4.2.  Cryptographic Security of C-RP-Adv Messages
    title: 6.4.  Candidate-RP-Advertisement Message Security
  - contents:
    - "6.5.  Denial of Service using IPsec\n   An additional concern is that of denial-of-service
      attacks caused by\n   sending high volumes of Bootstrap messages or C-RP-Adv
      messages with\n   invalid IPsec authentication information.  It is possible
      that these\n   messages could overwhelm the CPU resources of the recipient.\n
      \  The non-cryptographic security mechanisms above restrict from where\n   unicast
      Bootstrap messages and C-RP-Adv messages are accepted.  In\n   addition, we
      recommend that rate-limiting mechanisms can be\n   configured, to be applied
      on receipt of unicast PIM packets.  The\n   rate-limiter MUST independently
      rate-limit different types of PIM\n   packets -- for example, a flood of C-RP-Adv
      messages MUST NOT cause a\n   rate limiter to drop low- rate Bootstrap messages.
      \ Such a rate-\n   limiter might itself be used to cause a denial-of-service
      attack by\n   causing valid packets to be dropped, but in practice this is more\n
      \  likely to constrain bad PIM messages.  The rate-limiter will prevent\n   attacks
      on PIM from affecting other activity on the receiving router,\n   such as unicast
      routing.\n"
    title: 6.5.  Denial of Service using IPsec
  title: 6.  Security Considerations
- contents:
  - "7.  Contributors\n   Bill Fenner, Mark Handley, Roger Kermode, and David Thaler
    have\n   contributed greatly to this document.  They were authors of this\n   document
    up to version 03, and much of the current text comes from\n   version 03.\n"
  title: 7.  Contributors
- contents:
  - "8.  Acknowledgments\n   PIM-SM was designed over many years by a large group
    of people,\n   including ideas from Deborah Estrin, Dino Farinacci, Ahmed Helmy,\n
    \  Steve Deering, Van Jacobson, C. Liu, Puneet Sharma, Liming Wei, Tom\n   Pusateri,
    Tony Ballardie, Scott Brim, Jon Crowcroft, Paul Francis,\n   Joel Halpern, Horst
    Hodel, Polly Huang, Stephen Ostrowski, Lixia\n   Zhang, Girish Chandranmenon,
    Pavlin Radoslavov, John Zwiebel, Isidor\n   Kouvelas, and Hugh Holbrook.  This
    BSR specification draws heavily on\n   text from RFC 2362.\n   Many members of
    the PIM Working Group have contributed comments and\n   corrections for this document,
    including Christopher Thomas Brown,\n   Ardas Cilingiroglu, Murthy Esakonu, Venugopal
    Hemige, Prashant\n   Jhingran, Rishabh Parekh, and Katta Sambasivarao.\n"
  title: 8.  Acknowledgments
- contents:
  - "9.  Normative References\n   [1]  Fenner, B., Handley, M., Holbrook, H., and
    I. Kouvelas,\n        \"Protocol Independent Multicast - Sparse Mode (PIM-SM):
    Protocol\n        Specification (Revised)\", RFC 4601, August 2006.\n   [2]  Handley,
    M., Kouvelas, I., Speakman, T., and L. Vicisano,\n        \"Bidirectional Protocol
    Independent Multicast (BIDIR-PIM)\", RFC\n        5015, October 2007.\n   [3]
    \ Meyer, D., \"Administratively Scoped IP Multicast\", BCP 23, RFC\n        2365,
    July 1998.\n   [4]  Deering, S., Haberman, B., Jinmei, T., Nordmark, E., and B.\n
    \       Zill, \"IPv6 Scoped Address Architecture\", RFC 4007, March 2005.\n   [5]
    \ Hinden, R. and S. Deering, \"IP Version 6 Addressing\n        Architecture\",
    RFC 4291, February 2006.\n   [6]  Bradner, S., \"Key words for use in RFCs to
    Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
  title: 9.  Normative References
- contents:
  - "10.  Informative References\n   [7]  Estrin, D., et al., \"Protocol Independent
    Multicast-Sparse Mode\n        (PIM-SM): Protocol Specification\", RFC 2362, June
    1998.\n   [8]  Kim, D., Meyer, D., Kilmer, H., and D. Farinacci, \"Anycast\n        Rendevous
    Point (RP) mechanism using Protocol Independent\n        Multicast (PIM) and Multicast
    Source Discovery Protocol (MSDP)\",\n        RFC 3446, January 2003.\n   [9]  Farinacci,
    D. and Y. Cai, \"Anycast-RP Using Protocol Independent\n        Multicast (PIM)\",
    RFC 4610, August 2006.\n   [10] Atwood, W. and S. Islam, \"Security Issues in
    PIM-SM Link-local\n        Messages\", Work in Progress, July 2007.\n   [11] IANA,
    \"Address Family Numbers\",\n        <http://www.iana.org/assignments/address-family-numbers>.\n"
  title: 10.  Informative References
- contents:
  - "Authors' Addresses\n   Nidhi Bhaskar\n   Arastra, Inc.\n   P.O. Box 10905\n   Palo
    Alto, CA 94303\n   USA\n   EMail: nidhi@arastra.com\n   Alexander Gall\n   SWITCH\n
    \  P.O. Box\n   CH-8021 Zurich\n   Switzerland\n   EMail: alexander.gall@switch.ch\n
    \  James Lingard\n   Arastra, Inc.\n   P.O. Box 10905\n   Palo Alto, CA 94303\n
    \  USA\n   EMail: jchl@arastra.com\n   Stig Venaas\n   UNINETT\n   NO-7465 Trondheim\n
    \  Norway\n   EMail: venaas@uninett.no\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
