- title: __initial_text__
  contents:
  - '                Some Testing Tools for TCP Implementors

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Available tools for testing TCP implementations are catalogued\
    \ by\n   this memo.  Hopefully disseminating this information will encourage\n\
    \   those responsible for building and maintaining TCP to make the best\n   use\
    \ of available tests.  The type of testing the tool provides, the\n   type of\
    \ tests it is capable of doing, and its availability is\n   enumerated.  This\
    \ document lists only tools which can evaluate one or\n   more TCP implementations,\
    \ or which can privde some specific results\n   which describe or evaluate the\
    \ TCP being tested. A number of these\n   tools produce time-sequence plots, see\n\
    \   Tim Shepard's thesis [She91] for a general discussion of these plots.\n  \
    \ Each tools is defined as follows:\n Name\n   The name associated with the testing\
    \ tool.\n Category\n   One or more categories of tests which the tools are capable\
    \ of\n   providing.  Categories used are: functional correctness, performance,\n\
    \   stress.  Functional correctness tests how stringent a TCP\n   implementation\
    \ is to the RFC specifications.  Performance tests how\n   quickly a TCP implementation\
    \ can send and receive data, etc.  Stress\n   tests how a TCP implementation is\
    \ effected under high load\n   conditions.\n Description\n   A description of\
    \ the tools construction, and the implementation\n   methodology of the tests.\n\
    \ Automation\n   What steps are required to complete the test?  What human\n \
    \  intervention is required?\n Availability\n   How do you retrieve this tool\
    \ and get more information about it?\n Required Environment\n   Compilers, OS\
    \ version, etc. required to build and/or run the\n   associated tool.\n References\n\
    \   A list of publications relating to the tool, if any.\n"
- title: 2. Tools
  contents:
  - '2. Tools

    '
- title: 2.1.  Dbs
  contents:
  - "2.1.  Dbs\n Author\n   Yukio Murayama\n Category\n   Performance / Stress\n Description\n\
    \   Dbs is a tool which allows multiple data transfers to be coordinated,\n  \
    \ and the resulting TCP behavior to be reviewed.  Results are presented\n   as\
    \ ASCII log files.\n Automation\n   Command of execution is driven by a script\
    \ file.\n Availability\n   See http://www.ai3.net/products/dbs for details of\
    \ precise OS\n   versions supported, and for download of the source code.  Current\n\
    \   implementation supports BSDI BSD/OS, Linux, mkLinux, SunOS, IRIX,\n   Ultrix,\
    \ NEWS OS, HP-UX. Other environments are likely easy to add.\n Required Environment\n\
    \   C language compiler, UNIX-style socket API support.\n"
- title: 2.2.  Dummynet
  contents:
  - "2.2.  Dummynet\n Author\n   Luigi Rizzo\n Category\n   Functional Correctness\
    \ / Performance\n Description\n   Dummynet is a tool which simulates the presence\
    \ of finite size\n   queues, bandwidth limitations, and communication delays.\
    \  Dummynet\n   inserts between two layers of the protocol stack (in the current\n\
    \   implementation between TCP and IP), simulating the above effects in\n   an\
    \ operational system.  This way experiments can be done using real\n   protocol\
    \ implementations and real applications, even running on the\n   same host (dummynet\
    \ also intercepts communications on the loopback\n   interface).  Reconfiguration\
    \ of dummynet parameters (delay, queue\n   size, bandwidth) can be done on the\
    \ fly by using a sysctl call. The\n   overhead of dummynet is extremely low.\n\
    \ Automation\n   Requires merging diff files with kernel source code.  Command-line\n\
    \   driven through the sysctl command to modify kernel variables.\n Availability\n\
    \   See http://www.iet.unipi.it/~luigi/research.html or e-mail Luigi\n   Rizzo\
    \ (l.rizzo@iet.unipi.it).  Source code is available for FreeBSD\n   2.1 and FreeBSD\
    \ 2.2 (easily adaptable to other BSD-derived systems).\n Required Environment\n\
    \   C language compiler, BSD-derived system, kernel source code.\n References\n\
    \   [Riz97]\n"
- title: 2.3.  Netperf
  contents:
  - "2.3.  Netperf\n Author\n   Rick Jones\n Category\n   Performance\n Description\n\
    \   Single connection bandwidth or latency tests for TCP, UDP, and DLPI.\n   Includes\
    \ provisions for CPU utilization measurement.\n Automation\n   Requires compilation\
    \ (K&R C sufficient for all but-DHISTOGRAM, may\n   require ANSI C in the future)\
    \ if starting from source. Execution as\n   child of inetd requires editing of\
    \ /etc/services and /etc/inetd.conf.\n   Scripts are provided for a quick look\
    \ (snapshot_script), bulk\n   throughput of TCP and UDP, and latency for TCP and\
    \ UDP.  It is\n   command-line driven.\n Availability\n   See http://www.cup.hp.com/netperf/NetperfPage.html\
    \ or e-mail Rick\n   Jones (raj@cup.hp.com). Binaries are available here for HP/UX\
    \ Irix,\n   Solaris, and Win32.\n Required Environment\n   C language compiler,\
    \ POSIX.1, sockets.\n"
- title: 2.4.  NIST Net
  contents:
  - "2.4.  NIST Net\n Author\n   Mark Carson\n Category\n   Functional Correctness\
    \ / Performance\n Description\n   NIST Net is a network emulator. The tool is\
    \ packaged as a Linux\n   kernel patch, a kernel module, a set of programming\
    \ APIs, and\n   command-line and X-based user interfaces.\n   NIST Net works by\
    \ turning the system into a \"selectively bad\" router\n   - incoming packets\
    \ may be delayed, dropped, duplicated, bandwidth-\n   constrained, etc.  Packet\
    \ delays may be fixed or randomly\n   distributed, with loadable probability distributions.\
    \  Packet loss\n   may be uniformly distributed (constant loss probability) or\n\
    \   congestion-dependent (probability of loss increases with packet queue\n  \
    \ lengths).  Explicit congestion notifications may optionally be sent\n   in place\
    \ of congestion-dependent loss.\n Automation\n   To control the operation of the\
    \ emulator, there is an interactive\n   user interface, a non-interactive command-line\
    \ interface, and a set\n   of APIs.  Any or all of these may be used in concert.\
    \  The\n   interactive interface is suitable for simple, spur-of-the-moment\n\
    \   testing, while the command-line or APIs may be used to create\n   scripted,\
    \ non-interactive tests.\n Availability\n   NIST Net is available for public download\
    \ from the NIST Net web site,\n   http://www.antd.nist.gov/itg/nistnet/.  The\
    \ web site also has\n   installation instructions and documentation.\n Required\
    \ Environment\n   NIST Net requires a Linux installtion, with kernel version 2.0.27\
    \ -\n   2.0.33.  A kernel source tree and build tools are required to build\n\
    \   and install the NIST Net components.  Building the X interface\n   requires\
    \ a version of XFree86 (Current Version is 3.3.2).  An\n   Athena-replacement\
    \ widget set such as neXtaw\n   (http://www.inf.ufrgs.br/~kojima/nextaw/) is also\
    \ desirable for an\n   improved user interface.\n   NIST Net should run on any\
    \ i386-compatible machine capable of running\n   Linux, with one or more interfaces.\n"
- title: 2.5.  Orchestra
  contents:
  - "2.5.  Orchestra\n Author\n   Scott Dawson, Farnam Jahanian, and Todd Mitton\n\
    \ Category\n   Functional Correctness / Performance\n Description\n   This tool\
    \ is a library which provides the user with an ability to\n   build a protocol\
    \ layer capable of performing fault injection on\n   protocols.  Several fault\
    \ injection layers have been built using this\n   library, one of which has been\
    \ used to test different vendor\n   implementations of TCP. This is accomplished\
    \ by probing the vendor\n   implementation from one machine containing a protocol\
    \ stack that has\n   been instrumented with Orchestra.  A connection is opened\
    \ from the\n   vendor TCP implementation to the machine which has been instrumented.\n\
    \   Faults may then be injected at the Orchestra side of the connection\n   and\
    \ the vendor TCP's response may be monitored.  The most recent\n   version of\
    \ Orchestra runs inside the X-kernel protocol stack on the\n   OSF MK operating\
    \ system.\n   When using Orchestra to test a protocol, the fault injection layer\
    \ is\n   placed below the target protocol in the protocol stack.  This can\n \
    \  either be done on one machine on the network, if protocol stacks on\n   the\
    \ other machines cannot be modified (as in the case of testing\n   TCP), or can\
    \ be done on all machines on the network (as in the case\n   of testing a protocol\
    \ under development).  Once the fault injection\n   layer is in the protocol stack,\
    \ all messages sent by and destined for\n   the target protocol pass through it\
    \ on their way to/from the network.\n   The Orchestra fault injection layer can\
    \ manipulate these messages.\n   In particular, it can drop, delay, re-order,\
    \ duplicate, or modify\n   messages.  It can also introduce new messages into\
    \ the system if\n   desired.\n   The actions of the Orchestra fault injection\
    \ layer on each message\n   are determined by a script, written in Tcl.  This\
    \ script is\n   interpreted by the fault injection layer when the message enters\
    \ the\n   layer.  The script has access to the header information about the\n\
    \   message, and can make decisions based on header values.  It can also\n   keep\
    \ information about previous messages, counters, or any other data\n   which the\
    \ script writer deems useful.  Users of Orchestra may also\n   define their own\
    \ actions to be taken on messages, written in C, that\n   may be called from the\
    \ fault injection scripts.\n Automation\n   Scripts can be specified either using\
    \ a graphical user interface\n   which generates Tcl, or by writing Tcl directly.\
    \  At this time,\n   post-analysis of the results of the test must also be performed\
    \ by\n   the user.  Essentially this consists of looking at a packet trace\n \
    \  that Orchestra generates for (in)correct behavior.  Must compile and\n   link\
    \ fault generated layer with the protocol stack.\n Availability\n   See http://www.eecs.umich.edu/RTCL/projects/orchestra/\
    \ or e-mail\n   Scott Dawson (sdawson@eecs.umich.edu).\n Required Environment\
    \ OSF MK operating system, or X-kernel like network\n   architecture, or adapted\
    \ to network stack.\n References\n   [DJ94], [DJM96a], [DJM96b]\n"
- title: 2.6.  Packet Shell
  contents:
  - "2.6.  Packet Shell\n Author\n   Steve Parker and Chris Schmechel\n Category\n\
    \   Functional Correctness / Performance\n Description\n   An extensible Tcl/Tk\
    \ based software toolset for protocol development\n   and testing. Tcl (Tool Command\
    \ Language) is an embeddable scripting\n   language and Tk is a graphical user\
    \ interface toolkit based on Tcl.\n   The Packet Shell creates Tcl commands that\
    \ allow you to create,\n   modify, send, and receive packets on networks.  The\
    \ operations for\n   each protocol are supplied by a dynamic linked library called\
    \ a\n   protocol library.  These libraries are silently linked in from a\n   special\
    \ directory when the Packet Shell begins execution. The current\n   protocol libraries\
    \ are: IP, IPv6, IPv6 extensions, ICMP, ICMPv6,\n   Ethernet layer, data layer,\
    \ file layer (snoop and tcpdump support),\n   socket layer, TCP, TLI.\n   It includes\
    \ harness, which is a Tk based graphical user interface for\n   creating test\
    \ scripts within the Packet Shell.  It includes tests for\n   no initial slow\
    \ start, and retain out of sequence data as TCP test\n   cases mentioned in [PADHV98].\n\
    \   It includes tcpgraph, which is used with a snoop or tcpdump capture\n   file\
    \ to produce a TCP time-sequence plot using xplot.\n Automation\n   Command-line\
    \ driven through Tcl commands, or graphical user interface\n   models are available\
    \ through the harness format.\n Availability\n   See http://playground.sun.com/psh/\
    \ or e-mail owner-packet-\n   shell@sunroof.eng.sun.com.\n Required Environment\n\
    \   Solaris 2.4 or higher.  Porting required for other operating systems.\n"
- title: 2.7.  Tcpanaly
  contents:
  - "2.7.  Tcpanaly\n Author\n   Vern Paxson\n Category\n   Functional Correctness\
    \ / Performance\n Description\n   This is a tool for automatically analyzing a\
    \ TCP implementation's\n   behavior by inspecting packet traces of the TCP's activity.\
    \ It does\n   so through packet filter traces produced by tcpdump.  It has coded\n\
    \   within it knowledge of a large number of TCP implementations.  Using\n   this,\
    \ it can determine whether a given trace appears consistent with\n   a given implementation,\
    \ and, if so, exactly why the TCP chose to\n   transmit each packet at the time\
    \ it did.  If a trace is found\n   inconsistent with a TCP, tcpanaly either diagnoses\
    \ a likely\n   measurement error present in the trace, or indicates exactly whether\n\
    \   the activity in the trace deviates from that of the TCP, which can\n   greatly\
    \ aid in determining how the traced implementation behaves.\n   Tcpanaly's category\
    \ is somewhat difficult to classify, since it\n   attempts to profile the behavior\
    \ of an implementation, rather than to\n   explicitly test specific correctness\
    \ or performance issues. However,\n   this profile identifies correctness and\
    \ performance problems.\n   Adding new implementations of TCP behavior is possible\
    \ with tcpanaly\n   through the use of C++ classes.\n Automation\n   Command-line\
    \ driven and only the traces of the TCP sending and\n   receiving bulk data transfers\
    \ are needed as input.\n Availability\n   Contact Vern Paxson (vern@ee.lbl.gov).\n\
    \ Required Environment\n   C++ compiler.\n References\n   [Pax97a]\n"
- title: 2.8.  Tcptrace
  contents:
  - "2.8.  Tcptrace\n Author\n   Shawn Ostermann\n Category\n   Functional Correctness\
    \ / Performance\n Description\n   This is a TCP trace file analysis tool. It reads\
    \ output trace files\n   in the formats of : tcpdump, snoop, etherpeek, and netm.\n\
    \   For each connection, it keeps track of elapsed time, bytes/segments\n   sent\
    \ and received, retransmissions, round trip times, window\n   advertisements,\
    \ throughput, etc from simple to very detailed output.\n   It can also produce\
    \ three different types of graphs:\n   Time Sequence Graph (shows the segments\
    \ sent and ACKs returned as a\n   function of time)\n   Instantaneous Throughput\
    \ (shows the instantaneous, averaged over a\n   few segments, throughput of the\
    \ connection as a function of time).\n   Round Trip Times (shows the round trip\
    \ times for the ACKs as a\n   function of time)\n Automation\n   Command-line\
    \ driven, and uses the xplot program to view the graphs.\n Availability\n   Source\
    \ code is available, and Solaris binary along with sample\n   traces. See http://jarok.cs.ohiou.edu/software/tcptrace/tcptrace.html\n\
    \   or e-mail Shawn Ostermann (ostermann@cs.ohiou.edu).\n Required Environment\n\
    \   C compiler, Solaris, FreeBSD, NetBSD, HPUX, Linux.\n"
- title: 2.9.  Tracelook
  contents:
  - "2.9.  Tracelook\n Author\n   Greg Minshall\n Category\n   Functional Correctness\
    \ / Performance\n Description\n   This is a Tcl/Tk program for graphically viewing\
    \ the contents of\n   tcpdump trace files.  When plotting a connection, a user\
    \ can select\n   various variables to be plotted. In each direction of the connection,\n\
    \   the user can plot the advertised window in each packet, the highest\n   sequence\
    \ number in each packet, the lowest sequence number in each\n   packet, and the\
    \ acknowledgement number in each packet.\n Automation\n   Command-line driven\
    \ with a graphical user interface for the graph.\n Availability\n   See http://www.ipsilon.com/~minshall/sw/tracelook/tracelook.html\
    \ or\n   e-mail Greg Minshall (minshall@ipsilon.com).\n Required Environment\n\
    \   A modern version of awk, and Tcl/Tk (Tk version 3.6 or higher).  The\n   program\
    \ xgraph is required to view the graphs under X11.\n"
- title: 2.10.  TReno
  contents:
  - "2.10.  TReno\n Author\n   Matt Mathis and Jamshid Mahdavi\n Category\n   Performance\n\
    \ Description\n   This is a TCP throughput measurement tool based on sending UDP\
    \ or\n   ICMP packets in patterns that are controlled at the user-level so\n \
    \  that their timing reflects what would be sent by a TCP that observes\n   proper\
    \ congestion control (and implements SACK).  This allows it to\n   measure throughput\
    \ independent of the TCP implementation of end hosts\n   and serve as a useful\
    \ platform for prototyping TCP changes.\n Automation\n   Command-line driven.\
    \  No \"server\" is required, and it only requires a\n   single argument of the\
    \ machine to run the test to.\n Availability\n   See http://www.psc.edu/networking/treno_info.html\
    \ or e-mail Matt\n   Mathis (mathis@psc.edu) or Jamshid Mahdavi (mahdavi@psc.edu).\n\
    \ Required Environment\n   C compiler, POSIX.1, raw sockets.\n"
- title: 2.11.  Ttcp
  contents:
  - "2.11.  Ttcp\n Author\n   Unknown\n Category\n   Performance\n Description\n \
    \  Originally written to move files around, ttcp became the classic\n   throughput\
    \ benchmark or load generator, with the addition of support\n   for sourcing to/from\
    \ memory. It can also be used as a traffic\n   absorber. It has spawned many variants,\
    \ recent ones include support\n   for UDP, data pattern generation, page alignment,\
    \ and even alignment\n   offset control.\n Automation\n   Command-line driven.\n\
    \ Availability\n   See ftp://ftp.arl.mil/pub/ttcp/ or e-mail ARL (ftp@arl.mil)\
    \ which\n   includes the most common variants available.\n Required Environment\n\
    \   C compiler, BSD sockets.\n"
- title: 2.12.  Xplot
  contents:
  - "2.12.  Xplot\n Author\n   Tim Shepard\n Category\n   Functional Correctness /\
    \ Performance\n Description\n   This is a fairly conventional graphing/plotting\
    \ tool (xplot itself),\n   a script to turn tcpdump output into xplot input, and\
    \ some sample\n   code to generate xplot commands to plot the TCP time-sequence\
    \ graph).\n Automation\n   Command-line driven with a graphical user interface\
    \ for the plot.\n Availability\n   See ftp://mercury.lcs.mit.edu/pub/shep/xplot.tar.gz\
    \ or e-mail Tim\n   Shepard (shep@lcs.mit.edu).\n Required Environment\n   C compiler,\
    \ X11.\n References\n   [She91]\n"
- title: 3. Summary
  contents:
  - "3. Summary\n   This memo lists all TCP tests and testing tools reported to the\n\
    \   authors as part of TCP Implementer's working group and is not\n   exhaustive.\
    \  These tools have been verified as available by the\n   authors.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Network analysis tools are improving at a steady\
    \ pace.  The\n   continuing improvement in these tools such as the ones described\
    \ make\n   security concerns significant.\n   Some of the tools could be used\
    \ to create rogue packets or denial-\n   of-service attacks against other hosts.\
    \  Also, some of the tools\n   require changes to the kernel (foreign code) and\
    \ might require root\n   privileges to execute.  So you are trusting code that\
    \ you have\n   fetched from some perhaps untrustworthy remote site.  This code\
    \ could\n   contain malicious code that could present any kind of attack.\n  \
    \ None of the listed tools evaluate security in any way or form.\n   There are\
    \ privacy concerns when grabbing packets from the network in\n   that you are\
    \ now able to read other people's mail, files, etc.  This\n   impacts more than\
    \ just the host running the tool but all traffic\n   crossing the host's physical\
    \ network.\n"
- title: 5. References
  contents:
  - "5. References\n   [DJ94]    Scott Dawson and Farnam Jahanian, \"Probing and Fault\n\
    \             Injection of Distributed Protocol Implementations\",\n         \
    \    University of Michigan Technical Report CSE-TR-217-94, EECS\n           \
    \  Department.\n   [DJM96a]  Scott Dawson, Farnam Jahanian, and Todd Mitton, \"\
    ORCHESTRA:\n             A Fault Injection Environment for Distributed Systems\"\
    ,\n             University of Michigan Technical Report CSE-TR-318-96, EECS\n\
    \             Department.\n   [DJM96b]  Scott Dawson, Farnam Jahanian, and Todd\
    \ Mitton,\n             \"Experiments on Six Commercial TCP Implementations Using\
    \ a\n             Software Fault Injection Tool\", University of Michigan\n  \
    \           Technical Report CSE-TR-298-96, EECS Department.\n   [Pax97a]  Vern\
    \ Paxson, \"Automated Packet Trace Analysis of TCP\n             Implementations\"\
    , ACM SIGCOMM '97, September 1997, Cannes,\n             France.\n   [PADHV98]\
    \ Paxson, V., Allman, M., Dawson, S., Heavens, I., and B.\n             Volz,\
    \ \"Known TCP Implementation Problems\", Work In\n             Progress.\n   [Riz97]\
    \   Luigi Rizzo, \"Dummynet: a simple approach to the evaluation\n           \
    \  of network protocols\", ACM Computer Communication Review,\n             Vol.\
    \ 27, N. 1, January 1997, pp.  31-41.\n   [She91]   Tim Shepard, \"TCP Packet\
    \ Trace Analysis\", MIT Laboratory\n             for Computer Science MIT-LCS-TR-494,\
    \ February, 1991.\n"
- title: 6. Authors' Addresses
  contents:
  - "6. Authors' Addresses\n   Steve Parker\n   Sun Microsystems, Inc.\n   901 San\
    \ Antonio Road, UMPK17-202\n   Palo Alto, CA 94043\n   USA\n   Phone: (650) 786-5176\n\
    \   EMail: sparker@eng.sun.com\n   Chris Schmechel\n   Sun Microsystems, Inc.\n\
    \   901 San Antonio Road, UMPK17-202\n   Palo Alto, CA, 94043\n   USA\n   Phone:\
    \ (650) 786-4053\n   EMail: cschmec@eng.sun.com\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
