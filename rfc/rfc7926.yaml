- title: __initial_text__
  contents:
  - "      Problem Statement and Architecture for Information Exchange\n         \
    \  between Interconnected Traffic-Engineered Networks\n"
- title: Abstract
  contents:
  - "Abstract\n   In Traffic-Engineered (TE) systems, it is sometimes desirable to\n\
    \   establish an end-to-end TE path with a set of constraints (such as\n   bandwidth)\
    \ across one or more networks from a source to a\n   destination.  TE information\
    \ is the data relating to nodes and TE\n   links that is used in the process of\
    \ selecting a TE path.  TE\n   information is usually only available within a\
    \ network.  We call such\n   a zone of visibility of TE information a domain.\
    \  An example of a\n   domain may be an IGP area or an Autonomous System.\n  \
    \ In order to determine the potential to establish a TE path through a\n   series\
    \ of connected networks, it is necessary to have available a\n   certain amount\
    \ of TE information about each network.  This need not\n   be the full set of\
    \ TE information available within each network but\n   does need to express the\
    \ potential of providing TE connectivity.\n   This subset of TE information is\
    \ called TE reachability information.\n   This document sets out the problem statement\
    \ for the exchange of TE\n   information between interconnected TE networks in\
    \ support of end-to-\n   end TE path establishment and describes the best current\
    \ practice\n   architecture to meet this problem statement.  For reasons that\
    \ are\n   explained in this document, this work is limited to simple TE\n   constraints\
    \ and information that determine TE reachability.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7926.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Terminology ................................................6\n  \
    \         1.1.1. TE Paths and TE Connections .........................6\n    \
    \       1.1.2. TE Metrics and TE Attributes ........................6\n      \
    \     1.1.3. TE Reachability .....................................7\n        \
    \   1.1.4. Domain ..............................................7\n          \
    \ 1.1.5. Server Network ......................................7\n           1.1.6.\
    \ Client Network ......................................7\n           1.1.7. Aggregation\
    \ .........................................7\n           1.1.8. Abstraction .........................................8\n\
    \           1.1.9. Abstract Link .......................................8\n  \
    \         1.1.10. Abstract Node or Virtual Node ......................8\n    \
    \       1.1.11. Abstraction Layer Network ..........................9\n   2. Overview\
    \ of Use Cases ...........................................9\n      2.1. Peer Networks\
    \ ..............................................9\n      2.2. Client-Server Networks\
    \ ....................................11\n      2.3. Dual-Homing ...............................................15\n\
    \      2.4. Requesting Connectivity ...................................15\n  \
    \         2.4.1. Discovering Server Network Information .............17\n   3.\
    \ Problem Statement ..............................................18\n      3.1.\
    \ Policy and Filters ........................................18\n      3.2. Confidentiality\
    \ ...........................................19\n      3.3. Information Overload\
    \ ......................................19\n      3.4. Issues of Information Churn\
    \ ...............................20\n      3.5. Issues of Aggregation .....................................21\n\
    \   4. Architecture ...................................................22\n  \
    \    4.1. TE Reachability ...........................................22\n    \
    \  4.2. Abstraction, Not Aggregation ..............................22\n      \
    \     4.2.1. Abstract Links .....................................23\n        \
    \   4.2.2. The Abstraction Layer Network ......................23\n          \
    \ 4.2.3. Abstraction in Client-Server Networks ..............26\n           4.2.4.\
    \ Abstraction in Peer Networks .......................32\n      4.3. Considerations\
    \ for Dynamic Abstraction ....................34\n      4.4. Requirements for\
    \ Advertising Links and Nodes ..............35\n      4.5. Addressing Considerations\
    \ .................................36\n   5. Building on Existing Protocols .................................36\n\
    \      5.1. BGP-LS ....................................................37\n  \
    \    5.2. IGPs ......................................................37\n    \
    \  5.3. RSVP-TE ...................................................37\n      5.4.\
    \ Notes on a Solution .......................................37\n   6. Application\
    \ of the Architecture to Optical Domains and\n      Networks .......................................................39\n\
    \   7. Application of the Architecture to the User-Network Interface ..44\n  \
    \ 8. Application of the Architecture to L3VPN Multi-AS Environments .46\n   9.\
    \ Scoping Future Work ............................................47\n      9.1.\
    \ Limiting Scope to Only Part of the Internet ...............47\n      9.2. Working\
    \ with \"Related\" Domains ............................47\n      9.3. Not Finding\
    \ Optimal Paths in All Situations ...............48\n      9.4. Sanity and Scaling\
    \ ........................................48\n   10. Manageability Considerations\
    \ ..................................48\n      10.1. Managing the Abstraction Layer\
    \ Network ...................49\n      10.2. Managing Interactions of Abstraction\
    \ Layer and\n            Client Networks ..........................................49\n\
    \      10.3. Managing Interactions of Abstraction Layer and\n            Server\
    \ Networks ..........................................50\n   11. Security Considerations\
    \ .......................................51\n   12. Informative References ........................................52\n\
    \   Appendix A. Existing Work .........................................58\n  \
    \    A.1. Per-Domain Path Computation ...............................58\n    \
    \  A.2. Crankback .................................................59\n      A.3.\
    \ Path Computation Element ..................................59\n      A.4. GMPLS\
    \ UNI and Overlay Networks ............................61\n      A.5. Layer 1\
    \ VPN ...............................................62\n      A.6. Policy and\
    \ Link Advertisement .............................62\n   Appendix B. Additional\
    \ Features ...................................63\n      B.1. Macro Shared Risk\
    \ Link Groups .............................63\n      B.2. Mutual Exclusivity ........................................64\n\
    \   Acknowledgements ..................................................65\n  \
    \ Contributors ......................................................66\n   Authors'\
    \ Addresses ................................................67\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traffic-Engineered (TE) systems such as MPLS-TE [RFC2702]\
    \ and GMPLS\n   [RFC3945] offer a way to establish paths through a network in\
    \ a\n   controlled way that reserves network resources on specified links.\n \
    \  TE paths are computed by examining the Traffic Engineering Database\n   (TED)\
    \ and selecting a sequence of links and nodes that are capable of\n   meeting\
    \ the requirements of the path to be established.  The TED is\n   constructed\
    \ from information distributed by the Interior Gateway\n   Protocol (IGP) running\
    \ in the network -- for example, OSPF-TE\n   [RFC3630] or ISIS-TE [RFC5305].\n\
    \   It is sometimes desirable to establish an end-to-end TE path that\n   crosses\
    \ more than one network or administrative domain as described\n   in [RFC4105]\
    \ and [RFC4216].  In these cases, the availability of TE\n   information is usually\
    \ limited to within each network.  Such networks\n   are often referred to as\
    \ domains [RFC4726], and we adopt that\n   definition in this document; viz.,\n\
    \      For the purposes of this document, a domain is considered to be\n     \
    \ any collection of network elements within a common sphere of\n      address\
    \ management or path computational responsibility.  Examples\n      of such domains\
    \ include IGP areas and Autonomous Systems (ASes).\n   In order to determine the\
    \ potential to establish a TE path through a\n   series of connected domains and\
    \ to choose the appropriate domain\n   connection points through which to route\
    \ a path, it is necessary to\n   have available a certain amount of TE information\
    \ about each domain.\n   This need not be the full set of TE information available\
    \ within each\n   domain but does need to express the potential of providing TE\n\
    \   connectivity.  This subset of TE information is called TE\n   reachability\
    \ information.  The TE reachability information can be\n   exchanged between domains\
    \ based on the information gathered from the\n   local routing protocol, filtered\
    \ by configured policy, or statically\n   configured.\n   This document sets out\
    \ the problem statement for the exchange of TE\n   information between interconnected\
    \ TE networks in support of end-to-\n   end TE path establishment and describes\
    \ the best current practice\n   architecture to meet this problem statement. \
    \ The scope of this\n   document is limited to the simple TE constraints and information\n\
    \   (such as TE metrics, hop count, bandwidth, delay, shared risk)\n   necessary\
    \ to determine TE reachability: discussion of multiple\n   additional constraints\
    \ that might qualify the reachability can\n   significantly complicate aggregation\
    \ of information and the stability\n   of the mechanism used to present potential\
    \ connectivity, as is\n   explained in the body of this document.\n   Appendix\
    \ A summarizes relevant existing work that is used to route TE\n   paths across\
    \ multiple domains.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This section introduces some key terms that need to be\
    \ understood to\n   arrive at a common understanding of the problem space.  Some\
    \ of the\n   terms are defined in more detail in the sections that follow (in\n\
    \   which case forward pointers are provided), and some terms are taken\n   from\
    \ definitions that already exist in other RFCs (in which case\n   references are\
    \ given, but no apology is made for repeating or\n   summarizing the definitions\
    \ here).\n"
- title: 1.1.1.  TE Paths and TE Connections
  contents:
  - "1.1.1.  TE Paths and TE Connections\n   A TE connection is a Label Switched Path\
    \ (LSP) through an MPLS-TE or\n   GMPLS network that directs traffic along a particular\
    \ path (the TE\n   path) in order to provide a specific service such as bandwidth\n\
    \   guarantee, separation of traffic, or resilience between a well-known\n   pair\
    \ of end points.\n"
- title: 1.1.2.  TE Metrics and TE Attributes
  contents:
  - "1.1.2.  TE Metrics and TE Attributes\n   \"TE metrics\" and \"TE attributes\"\
    \ are terms applied to parameters of\n   links (and possibly nodes) in a network\
    \ that is traversed by TE\n   connections.  The TE metrics and TE attributes are\
    \ used by path\n   computation algorithms to select the TE paths that the TE connections\n\
    \   traverse.  A TE metric is a quantifiable value (including measured\n   characteristics)\
    \ describing some property of a link or node that can\n   be used as part of TE\
    \ routing or planning, while a TE attribute is a\n   wider term (i.e., including\
    \ the concept of a TE metric) that refers\n   to any property or characteristic\
    \ of a link or node that can be used\n   as part of TE routing or planning.  Thus,\
    \ the delay introduced by\n   transmission of a packet on a link is an example\
    \ of a TE metric,\n   while the geographic location of a router is an example\
    \ of a more\n   general attribute.\n   Provisioning a TE connection through a\
    \ network may result in dynamic\n   changes to the TE metrics and TE attributes\
    \ of the links and nodes in\n   the network.\n   These terms are also sometimes\
    \ used to describe the end-to-end\n   characteristics of a TE connection and can\
    \ be derived according to a\n   formula from the TE metrics and TE attributes\
    \ of the links and nodes\n   that the TE connection traverses.  Thus, for example,\
    \ the end-to-end\n   delay for a TE connection is usually considered to be the\
    \ sum of the\n   delay on each link that the connection traverses.\n"
- title: 1.1.3.  TE Reachability
  contents:
  - "1.1.3.  TE Reachability\n   In an IP network, reachability is the ability to\
    \ deliver a packet to\n   a specific address or prefix, i.e., the existence of\
    \ an IP path to\n   that address or prefix.  TE reachability is the ability to\
    \ reach a\n   specific address along a TE path.  More specifically, it is the\n\
    \   ability to establish a TE connection in an MPLS-TE or GMPLS sense.\n   Thus,\
    \ we talk about TE reachability as the potential of providing TE\n   connectivity.\n\
    \   TE reachability may be unqualified (there is a TE path, but no\n   information\
    \ about available resources or other constraints is\n   supplied); this is helpful\
    \ especially in determining a path to a\n   destination that lies in an unknown\
    \ domain or that may be qualified\n   by TE attributes and TE metrics such as\
    \ hop count, available\n   bandwidth, delay, and shared risk.\n"
- title: 1.1.4.  Domain
  contents:
  - "1.1.4.  Domain\n   As defined in [RFC4726], a domain is any collection of network\n\
    \   elements within a common sphere of address management or path\n   computational\
    \ responsibility.  Examples of such domains include IGP\n   areas and ASes.\n"
- title: 1.1.5.  Server Network
  contents:
  - "1.1.5.  Server Network\n   A Server Network is a network that provides connectivity\
    \ for another\n   network (the Client Network) in a client-server relationship.\
    \  A\n   Server Network is sometimes referred to as an underlay network.\n"
- title: 1.1.6.  Client Network
  contents:
  - "1.1.6.  Client Network\n   A Client Network is a network that uses the connectivity\
    \ provided by\n   a Server Network.  A Client Network is sometimes referred to\
    \ as an\n   overlay network.\n"
- title: 1.1.7.  Aggregation
  contents:
  - "1.1.7.  Aggregation\n   The concept of aggregation is discussed in Section 3.5.\
    \  In\n   aggregation, multiple network resources from a domain are represented\n\
    \   outside the domain as a single entity.  Thus, multiple links and\n   nodes\
    \ forming a TE connection may be represented as a single link, or\n   a collection\
    \ of nodes and links (perhaps the whole domain) may be\n   represented as a single\
    \ node with its attachment links.\n"
- title: 1.1.8.  Abstraction
  contents:
  - "1.1.8.  Abstraction\n   Section 4.2 introduces the concept of abstraction and\
    \ distinguishes\n   it from aggregation.  Abstraction may be viewed as \"policy-based\n\
    \   aggregation\" where the policies are applied to overcome the issues\n   with\
    \ aggregation as identified in Section 3 of this document.\n   Abstraction is\
    \ the process of applying policy to the available TE\n   information within a\
    \ domain, to produce selective information that\n   represents the potential ability\
    \ to connect across the domain.  Thus,\n   abstraction does not necessarily offer\
    \ all possible connectivity\n   options, but it presents a general view of potential\
    \ connectivity\n   according to the policies that determine how the domain's\n\
    \   administrator wants to allow the domain resources to be used.\n"
- title: 1.1.9.  Abstract Link
  contents:
  - "1.1.9.  Abstract Link\n   An abstract link is the representation of the characteristics\
    \ of a\n   path between two nodes in a domain produced by abstraction.  The\n\
    \   abstract link is advertised outside that domain as a TE link for use\n   in\
    \ signaling in other domains.  Thus, an abstract link represents the\n   potential\
    \ to connect between a pair of nodes.\n   More details regarding abstract links\
    \ are provided in Section 4.2.1.\n"
- title: 1.1.10.  Abstract Node or Virtual Node
  contents:
  - "1.1.10.  Abstract Node or Virtual Node\n   An abstract node was defined in [RFC3209]\
    \ as a group of nodes whose\n   internal topology is opaque to an ingress node\
    \ of the LSP.  More\n   generally, an abstract node is the representation as a\
    \ single node in\n   a TE topology of some or all of the resources of one or more\
    \ nodes\n   and the links that connect them.  An abstract node may be advertised\n\
    \   outside the domain as a TE node for use in path computation and\n   signaling\
    \ in other domains.\n   The term \"virtual node\" has typically been applied to\
    \ the aggregation\n   of a domain (that is, a collection of nodes and links that\
    \ operate as\n   a single administrative entity for TE purposes) into a single\
    \ entity\n   that is treated as a node for the purposes of end-to-end traffic\n\
    \   engineering.  Virtual nodes are often considered a way to present\n   islands\
    \ of single-vendor equipment in an optical network.\n   Sections 3.5 and 4.2.2.1\
    \ provide more information about the uses and\n   issues of abstract nodes and\
    \ virtual nodes.\n"
- title: 1.1.11.  Abstraction Layer Network
  contents:
  - "1.1.11.  Abstraction Layer Network\n   The abstraction layer network is introduced\
    \ in Section 4.2.2.  It may\n   be seen as a brokerage-layer network between one\
    \ or more server\n   networks and one or more client networks.  The abstraction\
    \ layer\n   network is the collection of abstract links that provide potential\n\
    \   connectivity across the server networks and on which path computation\n  \
    \ can be performed to determine edge-to-edge paths that provide\n   connectivity\
    \ as links in the client network.\n   In the simplest case, the abstraction layer\
    \ network is just a set of\n   edge-to-edge connections (i.e., abstract links),\
    \ but to make the use\n   of server network resources more flexible, the abstract\
    \ links might\n   not all extend from edge to edge but might offer connectivity\
    \ between\n   server network nodes to form a more complex network.\n"
- title: 2.  Overview of Use Cases
  contents:
  - '2.  Overview of Use Cases

    '
- title: 2.1.  Peer Networks
  contents:
  - "2.1.  Peer Networks\n   The peer network use case can be most simply illustrated\
    \ by the\n   example in Figure 1.  A TE path is required between the source (Src)\n\
    \   and destination (Dst), which are located in different domains.  There\n  \
    \ are two points of interconnection between the domains, and selecting\n   the\
    \ wrong point of interconnection can lead to a suboptimal path or\n   even fail\
    \ to make a path available.  Note that peer networks are\n   assumed to have the\
    \ same technology type -- that is, the same\n   \"switching capability\", to use\
    \ the term from GMPLS [RFC3945].\n                    --------------      --------------\n\
    \                   | Domain A     | x1 |     Domain Z |\n                   |\
    \   -----      +----+       -----  |\n                   |  | Src |     +----+\
    \      | Dst | |\n                   |   -----      | x2 |       -----  |\n  \
    \                  --------------      --------------\n                      \
    \    Figure 1: Peer Networks\n   For example, when Domain A attempts to select\
    \ a path, it may\n   determine that adequate bandwidth is available from Src through\
    \ both\n   interconnection points x1 and x2.  It may pick the path through x1\n\
    \   for local policy reasons: perhaps the TE metric is smaller.  However,\n  \
    \ if there is no connectivity in Domain Z from x1 to Dst, the path\n   cannot\
    \ be established.  Techniques such as crankback may be used to\n   alleviate this\
    \ situation, but such techniques do not lead to rapid\n   setup or guaranteed\
    \ optimality.  Furthermore, RSVP signaling creates\n   state in the network that\
    \ is immediately removed by the crankback\n   procedure.  Frequent events of this\
    \ kind will impact scalability in a\n   non-deterministic manner.  More details\
    \ regarding crankback can be\n   found in Appendix A.2.\n   There are countless\
    \ more complicated examples of the problem of peer\n   networks.  Figure 2 shows\
    \ the case where there is a simple mesh of\n   domains.  Clearly, to find a TE\
    \ path from Src to Dst, Domain A\n   must not select a path leaving through interconnect\
    \ x1, since\n   Domain B has no connectivity to Domain Z.  Furthermore, in deciding\n\
    \   whether to select interconnection x2 (through Domain C) or\n   interconnection\
    \ x3 through Domain D, Domain A must be sensitive to\n   the TE connectivity available\
    \ through each of Domains C and D,\n   as well as the TE connectivity from each\
    \ of interconnections x4 and\n   x5 to Dst within Domain Z.  The problem may be\
    \ further complicated\n   when the source domain does not know in which domain\
    \ the destination\n   node is located, since the choice of a domain path clearly\
    \ depends on\n   the knowledge of the destination domain: this issue is obviously\n\
    \   mitigated in IP networks by inter-domain routing [RFC4271].\n   Of course,\
    \ many network interconnection scenarios are going to be a\n   combination of\
    \ the situations expressed in these two examples.  There\n   may be a mesh of\
    \ domains, and the domains may have multiple points of\n   interconnection.\n\
    \                           --------------\n                          |     Domain\
    \ B |\n                          |              |\n                          |\
    \              |\n                          /--------------\n                \
    \         /\n                        /x1\n         --------------/           \
    \            --------------\n        | Domain A     |                      | \
    \    Domain Z |\n        |              |    --------------    |             \
    \ |\n        |  -----       | x2|     Domain C | x4|       -----  |\n        |\
    \ | Src |      +---+              +---+      | Dst | |\n        |  -----     \
    \  |   |              |   |       -----  |\n        |              |    --------------\
    \    |              |\n         --------------\\                      /--------------\n\
    \                        \\x3                  /\n                         \\\
    \                  /\n                          \\                /x5\n      \
    \                     \\--------------/\n                           |     Domain\
    \ D |\n                           |              |\n                         \
    \  |              |\n                            --------------\n            \
    \         Figure 2: Peer Networks in a Mesh\n"
- title: 2.2.  Client-Server Networks
  contents:
  - "2.2.  Client-Server Networks\n   Two major classes of use case relate to the\
    \ client-server\n   relationship between networks.  These use cases have sometimes\
    \ been\n   referred to as overlay networks.  In both of these classes of\n   use\
    \ case, the client and server networks may have the same switching\n   capability,\
    \ or they may be built from nodes and links that have\n   different technology\
    \ types in the client and server networks.\n   The first group of use cases, shown\
    \ in Figure 3, occurs when domains\n   belonging to one network are connected\
    \ by a domain belonging to\n   another network.  In this scenario, once connectivity\
    \ is formed\n   across the lower-layer network, the domains of the upper-layer\n\
    \   network can be merged into a single domain by running IGP adjacencies\n  \
    \ and by treating the server-network-layer connectivity as links in the\n   higher-layer\
    \ network.  The TE relationship between the domains\n   (higher and lower layers)\
    \ in this case is reduced to determining what\n   server network connectivity\
    \ to establish, how to trigger it, how to\n   route it in the server network,\
    \ and what resources and capacity to\n   assign within the server network layer.\
    \  As the demands in the\n   higher-layer (client) network vary, the connectivity\
    \ in the server\n   network may need to be modified.  Section 2.4 explains in\
    \ a little\n   more detail how connectivity may be requested.\n       ----------------\
    \                          ----------------\n      | Client Network |        \
    \                | Client Network |\n      |   Domain A     |                \
    \        |   Domain B     |\n      |                |                        |\
    \                |\n      |  -----         |                        |        \
    \ -----  |\n      | | Src |        |                        |        | Dst | |\n\
    \      |  -----         |                        |         -----  |\n      | \
    \               |                        |                |\n       ----------------\\\
    \                        /----------------\n                        \\x1     \
    \             x2/\n                         \\                    /\n        \
    \                  \\                  /\n                           \\----------------/\n\
    \                           | Server Network |\n                           | \
    \    Domain     |\n                           |                |\n           \
    \                 ----------------\n                     Figure 3: Client-Server\
    \ Networks\n   The second class of use case relating to client-server networking\
    \ is\n   for Virtual Private Networks (VPNs).  In this case, as opposed to the\n\
    \   former one, it is assumed that the client network has a different\n   address\
    \ space than that of the server network, where non-overlapping\n   IP addresses\
    \ between the client and the server networks cannot be\n   guaranteed.  A simple\
    \ example is shown in Figure 4.  The VPN sites\n   comprise a set of domains that\
    \ are interconnected over a core domain\n   (i.e., the provider network) that\
    \ is the server network in our model.\n   Note that in the use cases shown in\
    \ Figures 3 and 4 the client\n   network domains may (and, in fact, probably do)\
    \ operate as a single\n   connected network.\n          --------------       \
    \                  --------------\n         | Domain A     |                 \
    \      |     Domain Z |\n         | (VPN site)   |                       |   (VPN\
    \ site) |\n         |              |                       |              |\n\
    \         |  -----       |                       |       -----  |\n         |\
    \ | Src |      |                       |      | Dst | |\n         |  -----   \
    \    |                       |       -----  |\n         |              |     \
    \                  |              |\n          --------------\\              \
    \         /--------------\n                         \\x1                 x2/\n\
    \                          \\                   /\n                          \
    \ \\                 /\n                            \\---------------/\n     \
    \                       |  Core Domain  |\n                            |     \
    \          |\n                            |               |\n                \
    \            /---------------\\\n                           /                \
    \ \\\n                          /                   \\\n                     \
    \    /x3                 x4\\\n          --------------/                     \
    \  \\--------------\n         | Domain B     |                       |     Domain\
    \ C |\n         | (VPN site)   |                       |   (VPN site) |\n    \
    \     |              |                       |              |\n         |    \
    \          |                       |              |\n          --------------\
    \                         --------------\n                    Figure 4: A Virtual\
    \ Private Network\n   Both use cases in this section become \"more interesting\"\
    \ when\n   combined with the use case in Section 2.1 -- that is, when the\n  \
    \ connectivity between higher-layer domains or VPN sites is provided by\n   a\
    \ sequence or mesh of lower-layer domains.  Figure 5 shows how this\n   might\
    \ look in the case of a VPN.\n        ------------                           \
    \        ------------\n       | Domain A   |                                 |\
    \   Domain Z |\n       | (VPN site) |                                 | (VPN site)\
    \ |\n       |  -----     |                                 |     -----  |\n  \
    \     | | Src |    |                                 |    | Dst | |\n       |\
    \  -----     |                                 |     -----  |\n       |      \
    \      |                                 |            |\n        ------------\\\
    \                                 /------------\n                     \\x1   \
    \                        x2/\n                      \\                       \
    \      /\n                       \\                           /\n            \
    \            \\----------     ----------/\n                        | Domain X\
    \ |x5 | Domain Y |\n                        | (core)   +---+ (core)   |\n    \
    \                    |          |   |          |\n                        |  \
    \        +---+          |\n                        |          |x6 |          |\n\
    \                        /----------     ----------\\\n                      \
    \ /                           \\\n                      /                    \
    \         \\\n                     /x3                           x4\\\n      \
    \  ------------/                                 \\------------\n       | Domain\
    \ B   |                                 |   Domain C |\n       | (VPN site) |\
    \                                 | (VPN site) |\n       |            |      \
    \                           |            |\n        ------------             \
    \                      ------------\n          Figure 5: A VPN Supported over\
    \ Multiple Server Domains\n"
- title: 2.3.  Dual-Homing
  contents:
  - "2.3.  Dual-Homing\n   A further complication may be added to the client-server\
    \ relationship\n   described in Section 2.2 by considering what happens when a\
    \ client\n   network domain is attached to more than one domain in the server\n\
    \   network or has two points of attachment to a server network domain.\n   Figure\
    \ 6 shows an example of this for a VPN.\n                               ------------\n\
    \                              | Domain B   |\n                              |\
    \ (VPN site) |\n       ------------           |  -----     |\n      | Domain A\
    \   |          | | Src |    |\n      | (VPN site) |          |  -----     |\n\
    \      |            |          |            |\n       ------------\\         \
    \  -+--------+-\n                    \\x1         |        |\n               \
    \      \\        x2|        |x3\n                      \\         |        | \
    \             ------------\n                       \\--------+-      -+--------\
    \     |   Domain C |\n                       | Domain X | x8 | Domain Y | x4 |\
    \ (VPN site) |\n                       | (core)   +----+ (core)   +----+     -----\
    \  |\n                       |          |    |          |    |    | Dst | |\n\
    \                       |          +----+          +----+     -----  |\n     \
    \                  |          | x9 |          | x5 |            |\n          \
    \             /----------      ----------\\     ------------\n               \
    \       /                            \\\n                     /              \
    \                \\\n                    /x6                            x7\\\n\
    \       ------------/                                  \\------------\n      |\
    \ Domain D   |                                  |   Domain E |\n      | (VPN site)\
    \ |                                  | (VPN site) |\n      |            |    \
    \                              |            |\n       ------------           \
    \                         ------------\n            Figure 6: Dual-Homing in a\
    \ Virtual Private Network\n"
- title: 2.4.  Requesting Connectivity
  contents:
  - "2.4.  Requesting Connectivity\n   The relationship between domains can be entirely\
    \ under the control of\n   management processes, dynamically triggered by the\
    \ client network, or\n   some hybrid of these cases.  In the management case,\
    \ the server\n   network may be asked to establish a set of LSPs to provide client\n\
    \   network connectivity.  In the dynamic case, the client network may\n   make\
    \ a request to the server network exerting a range of controls\n   over the paths\
    \ selected in the server network.  This range extends\n   from no control (i.e.,\
    \ a simple request for connectivity), through a\n   set of constraints (latency,\
    \ path protection, etc.), up to and\n   including full control of the path and\
    \ resources used in the server\n   network (i.e., the use of explicit paths with\
    \ label subobjects).\n   There are various models by which a server network can\
    \ be asked to\n   set up the connections that support a service provided to the\
    \ client\n   network.  These requests may come from management systems, directly\n\
    \   from the client network control plane, or through an intermediary\n   broker\
    \ such as the Virtual Network Topology Manager (VNTM) [RFC5623].\n   The trigger\
    \ that causes the request to the server network is also\n   flexible.  It could\
    \ be that the client network discovers a pressing\n   need for server network\
    \ resources (such as the desire to provision an\n   end-to-end connection in the\
    \ client network or severe congestion on a\n   specific path), or it might be\
    \ that a planning application has\n   considered how best to optimize traffic\
    \ in the client network or how\n   to handle a predicted traffic demand.\n   In\
    \ all cases, the relationship between client and server networks is\n   subject\
    \ to policy so that server network resources are under the\n   administrative\
    \ control of the operator or the server network and are\n   only used to support\
    \ a client network in ways that the server network\n   operator approves.\n  \
    \ As just noted, connectivity requests issued to a server network may\n   include\
    \ varying degrees of constraint upon the choice of path that\n   the server network\
    \ can implement.\n   o  \"Basic provisioning\" is a simple request for connectivity.\
    \  The\n      only constraints are the end points of the connection and the\n\
    \      capacity (bandwidth) that the connection will support for the\n      client\
    \ network.  In the case of some server networks, even the\n      bandwidth component\
    \ of a basic provisioning request is superfluous\n      because the server network\
    \ has no facility to vary bandwidth and\n      can offer connectivity only at\
    \ a default capacity.\n   o  \"Basic provisioning with optimization\" is a service\
    \ request that\n      indicates one or more metrics that the server network must\n\
    \      optimize in its selection of a path.  Metrics may be hop count,\n     \
    \ path length, summed TE metric, jitter, delay, or any number of\n      technology-specific\
    \ constraints.\n   o  \"Basic provisioning with optimization and constraints\"\
    \ enhances\n      the optimization process to apply absolute constraints to\n\
    \      functions of the path metrics.  For example, a connection may be\n    \
    \  requested that optimizes for the shortest path but in any case\n      requests\
    \ that the end-to-end delay be less than a certain value.\n      Equally, optimization\
    \ may be expressed in terms of the impact on\n      the network.  For example,\
    \ a service may be requested in order to\n      leave maximal flexibility to satisfy\
    \ future service requests.\n   o  \"Fate diversity requests\" ask the server network\
    \ to provide a path\n      that does not use any network resources (usually links\
    \ and nodes)\n      that share fate (i.e., can fail as the result of a single\
    \ event)\n      as the resources used by another connection.  This allows the\n\
    \      client network to construct protection services over the server\n     \
    \ network -- for example, by establishing links that are known to be\n      fate\
    \ diverse.  The connections that have diverse paths need not\n      share end\
    \ points.\n   o  \"Provisioning with fate sharing\" is the exact opposite of\n\
    \      fate diversity.  In this case, two or more connections are\n      requested\
    \ to follow the same path in the server network.  This may\n      be requested,\
    \ for example, to create a bundled or aggregated link\n      in the client network\
    \ where each component of the client-layer\n      composite link is required to\
    \ have the same server network\n      properties (metrics, delay, etc.) and the\
    \ same failure\n      characteristics.\n   o  \"Concurrent provisioning\" enables\
    \ the interrelated connection\n      requests described in the previous two bullets\
    \ to be enacted\n      through a single, compound service request.\n   o  \"Service\
    \ resilience\" requests that the server network provide\n      connectivity for\
    \ which the server network takes responsibility to\n      recover from faults.\
    \  The resilience may be achieved through the\n      use of link-level protection,\
    \ segment protection, end-to-end\n      protection, or recovery mechanisms.\n"
- title: 2.4.1.  Discovering Server Network Information
  contents:
  - "2.4.1.  Discovering Server Network Information\n   Although the topology and\
    \ resource availability information of a\n   server network may be hidden from\
    \ the client network, the service\n   request interface may support features that\
    \ report details about the\n   services and potential services that the server\
    \ network supports.\n   o  Reporting of path details, service parameters, and\
    \ issues such as\n      path diversity of LSPs that support deployed services\
    \ allows the\n      client network to understand to what extent its requests were\n\
    \      satisfied.  This is particularly important when the requests were\n   \
    \   made as \"best effort\".\n   o  A server network may support requests of the\
    \ form \"If I were to\n      ask you for this service, would you be able to provide\
    \ it?\" --\n      that is, a service request that does everything except actually\n\
    \      provision the service.\n"
- title: 3.  Problem Statement
  contents:
  - "3.  Problem Statement\n   The problem statement presented in this section is\
    \ as much about the\n   issues that may arise in any solution (and so have to\
    \ be avoided) and\n   the features that are desirable within a solution, as it\
    \ is about the\n   actual problem to be solved.\n   The problem can be stated\
    \ very simply and with reference to the use\n   cases presented in the previous\
    \ section.\n      A mechanism is required that allows TE path computation in one\n\
    \      domain to make informed choices about the TE capabilities and exit\n  \
    \    points from the domain when signaling an end-to-end TE path that\n      will\
    \ extend across multiple domains.\n   Thus, the problem is one of information\
    \ collection and presentation,\n   not about signaling.  Indeed, the existing\
    \ signaling mechanisms for\n   TE LSP establishment are likely to prove adequate\
    \ [RFC4726] with the\n   possibility of minor extensions.  Similarly, TE information\
    \ may\n   currently be distributed in a domain by TE extensions to one of the\n\
    \   two IGPs as described in OSPF-TE [RFC3630] and ISIS-TE [RFC5305], and\n  \
    \ TE information may be exported from a domain (for example,\n   northbound) using\
    \ link-state extensions to BGP [RFC7752].\n   An interesting annex to the problem\
    \ is how the path is made available\n   for use.  For example, in the case of\
    \ a client-server network, the\n   path established in the server network needs\
    \ to be made available as\n   a TE link to provide connectivity in the client\
    \ network.\n"
- title: 3.1.  Policy and Filters
  contents:
  - "3.1.  Policy and Filters\n   A solution must be amenable to the application of\
    \ policy and filters.\n   That is, the operator of a domain that is sharing information\
    \ with\n   another domain must be able to apply controls to what information is\n\
    \   shared.  Furthermore, the operator of a domain that has information\n   shared\
    \ with it must be able to apply policies and filters to the\n   received information.\n\
    \   Additionally, the path computation within a domain must be able to\n   weight\
    \ the information received from other domains according to local\n   policy such\
    \ that the resultant computed path meets the local\n   operator's needs and policies\
    \ rather than those of the operators of\n   other domains.\n"
- title: 3.2.  Confidentiality
  contents:
  - "3.2.  Confidentiality\n   A feature of the policy described in Section 3.1 is\
    \ that an operator\n   of a domain may desire to keep confidential the details\
    \ about its\n   internal network topology and loading.  This information could\
    \ be\n   construed as commercially sensitive.\n   Although it is possible that\
    \ TE information exchange will take place\n   only between parties that have significant\
    \ trust, there are also use\n   cases (such as the VPN supported over multiple\
    \ server network domains\n   described in Section 2.2) where information will\
    \ be shared between\n   domains that have a commercial relationship but a low\
    \ level of trust.\n   Thus, it must be possible for a domain to limit the shared\n\
    \   information to only that which the computing domain needs to know,\n   with\
    \ the understanding that the less information that is made\n   available the more\
    \ likely it is that the result will be a less\n   optimal path and/or more crankback\
    \ events.\n"
- title: 3.3.  Information Overload
  contents:
  - "3.3.  Information Overload\n   One reason that networks are partitioned into\
    \ separate domains is to\n   reduce the set of information that any one router\
    \ has to handle.\n   This also applies to the volume of information that routing\
    \ protocols\n   have to distribute.\n   Over the years, routers have become more\
    \ sophisticated, with greater\n   processing capabilities and more storage; the\
    \ control channels on\n   which routing messages are exchanged have become higher\
    \ capacity; and\n   the routing protocols (and their implementations) have become\
    \ more\n   robust.  Thus, some of the arguments in favor of dividing a network\n\
    \   into domains may have been reduced.  Conversely, however, the size of\n  \
    \ networks continues to grow dramatically with a consequent increase in\n   the\
    \ total amount of routing-related information available.\n   Additionally, in\
    \ this case, the problem space spans two or more\n   networks.\n   Any solution\
    \ to the problems voiced in this document must be aware of\n   the issues of information\
    \ overload.  If the solution was to simply\n   share all TE information between\
    \ all domains in the network, the\n   effect from the point of view of the information\
    \ load would be to\n   create one single flat network domain.  Thus, the solution\
    \ must\n   deliver enough information to make the computation practical (i.e.,\n\
    \   to solve the problem) but not so much as to overload the receiving\n   domain.\
    \  Furthermore, the solution cannot simply rely on the policies\n   and filters\
    \ described in Section 3.1 because such filters might not\n   always be enabled.\n"
- title: 3.4.  Issues of Information Churn
  contents:
  - "3.4.  Issues of Information Churn\n   As LSPs are set up and torn down, the available\
    \ TE resources on links\n   in the network change.  In order to reliably compute\
    \ a TE path\n   through a network, the computation point must have an up-to-date\
    \ view\n   of the available TE resources.  However, collecting this information\n\
    \   may result in considerable load on the distribution protocol and\n   churn\
    \ in the stored information.  In order to deal with this problem\n   even in a\
    \ single domain, updates are sent at periodic intervals or\n   whenever there\
    \ is a significant change in resources, whichever\n   happens first.\n   Consider,\
    \ for example, that a TE LSP may traverse ten links in a\n   network.  When the\
    \ LSP is set up or torn down, the resources\n   available on each link will change,\
    \ resulting in a new advertisement\n   of the link's capabilities and capacity.\
    \  If the arrival rate of new\n   LSPs is relatively fast, and the hold times\
    \ relatively short, the\n   network may be in a constant state of flux.  Note\
    \ that the problem\n   here is not limited to churn within a single domain, since\
    \ the\n   information shared between domains will also be changing.\n   Furthermore,\
    \ the information that one domain needs to share with\n   another may change as\
    \ the result of LSPs that are contained within or\n   cross the first domain but\
    \ that are of no direct relevance to the\n   domain receiving the TE information.\n\
    \   In packet networks, where the capacity of an LSP is often a small\n   fraction\
    \ of the resources available on any link, this issue is\n   partially addressed\
    \ by the advertising routers.  They can apply a\n   threshold so that they do\
    \ not bother to update the advertisement of\n   available resources on a link\
    \ if the change is less than a configured\n   percentage of the total (or, alternatively,\
    \ the remaining) resources.\n   The updated information in that case will be disseminated\
    \ based on an\n   update interval rather than a resource change event.\n   In\
    \ non-packet networks, where link resources are physical switching\n   resources\
    \ (such as timeslots or wavelengths), the capacity of an LSP\n   may more frequently\
    \ be a significant percentage of the available link\n   resources.  Furthermore,\
    \ in some switching environments, it is\n   necessary to achieve end-to-end resource\
    \ continuity (such as using\n   the same wavelength on the whole length of an\
    \ LSP), so it is far more\n   desirable to keep the TE information held at the\
    \ computation points\n   up to date.  Fortunately, non-packet networks tend to\
    \ be quite a bit\n   smaller than packet networks, the arrival rates of non-packet\
    \ LSPs\n   are much lower, and the hold times are considerably longer.  Thus,\n\
    \   the information churn may be sustainable.\n"
- title: 3.5.  Issues of Aggregation
  contents:
  - "3.5.  Issues of Aggregation\n   One possible solution to the issues raised in\
    \ other subsections of\n   this section is to aggregate the TE information shared\
    \ between\n   domains.  Two aggregation mechanisms are often considered:\n   -\
    \  Virtual node model.  In this view, the domain is aggregated as if\n      it\
    \ was a single node (or router/switch).  Its links to other\n      domains are\
    \ presented as real TE links, but the model assumes that\n      any LSP entering\
    \ the virtual node through a link can be routed to\n      leave the virtual node\
    \ through any other link (although recent\n      work on \"limited cross-connect\
    \ switches\" may help with this\n      problem [RFC7579]).\n   -  Virtual link\
    \ model.  In this model, the domain is reduced to a set\n      of edge-to-edge\
    \ TE links.  Thus, when computing a path for an LSP\n      that crosses the domain,\
    \ a computation point can see which domain\n      entry points can be connected\
    \ to which others, and with what TE\n      attributes.\n   Part of the nature\
    \ of aggregation is that information is removed from\n   the system.  This can\
    \ cause inaccuracies and failed path computation.\n   For example, in the virtual\
    \ node model there might not actually be a\n   TE path available between a pair\
    \ of domain entry points, but the\n   model lacks the sophistication to represent\
    \ this \"limited\n   cross-connect capability\" within the virtual node.  On the\
    \ other\n   hand, in the virtual link model it may prove very hard to aggregate\n\
    \   multiple link characteristics: for example, there may be one path\n   available\
    \ with high bandwidth, and another with low delay, but this\n   does not mean\
    \ that the connectivity should be assumed or advertised\n   as having both high\
    \ bandwidth and low delay.\n   The trick to this multidimensional problem, therefore,\
    \ is to\n   aggregate in a way that retains as much useful information as\n  \
    \ possible while removing the data that is not needed.  An important\n   part\
    \ of this trick is a clear understanding of what information is\n   actually needed.\n\
    \   It should also be noted in the context of Section 3.4 that changes in\n  \
    \ the information within a domain may have a bearing on what aggregated\n   data\
    \ is shared with another domain.  Thus, while the data shared is\n   reduced,\
    \ the aggregation algorithm (operating on the routers\n   responsible for sharing\
    \ information) may be heavily exercised.\n"
- title: 4.  Architecture
  contents:
  - '4.  Architecture

    '
- title: 4.1.  TE Reachability
  contents:
  - "4.1.  TE Reachability\n   As described in Section 1.1, TE reachability is the\
    \ ability to reach\n   a specific address along a TE path.  The knowledge of TE\
    \ reachability\n   enables an end-to-end TE path to be computed.\n   In a single\
    \ network, TE reachability is derived from the Traffic\n   Engineering Database\
    \ (TED), which is the collection of all TE\n   information about all TE links\
    \ in the network.  The TED is usually\n   built from the data exchanged by the\
    \ IGP, although it can be\n   supplemented by configuration and inventory details,\
    \ especially in\n   transport networks.\n   In multi-network scenarios, TE reachability\
    \ information can be\n   described as \"You can get from node X to node Y with\
    \ the following TE\n   attributes.\"  For transit cases, nodes X and Y will be\
    \ edge nodes of\n   the transit network, but it is also important to consider\
    \ the\n   information about the TE connectivity between an edge node and a\n \
    \  specific destination node.  TE reachability may be qualified by TE\n   attributes\
    \ such as TE metrics, hop count, available bandwidth, delay,\n   and shared risk.\n\
    \   TE reachability information can be exchanged between networks so that\n  \
    \ nodes in one network can determine whether they can establish TE\n   paths across\
    \ or into another network.  Such exchanges are subject to\n   a range of policies\
    \ imposed by the advertiser (for security and\n   administrative control) and\
    \ by the receiver (for scalability and\n   stability).\n"
- title: 4.2.  Abstraction, Not Aggregation
  contents:
  - "4.2.  Abstraction, Not Aggregation\n   Aggregation is the process of synthesizing\
    \ from available\n   information.  Thus, the virtual node and virtual link models\n\
    \   described in Section 3.5 rely on processing the information available\n  \
    \ within a network to produce the aggregate representations of links\n   and nodes\
    \ that are presented to the consumer.  As described in\n   Section 3, dynamic\
    \ aggregation is subject to a number of pitfalls.\n   In order to distinguish\
    \ the architecture described in this document\n   from the previous work on aggregation,\
    \ we use the term \"abstraction\"\n   in this document.  The process of abstraction\
    \ is one of applying\n   policy to the available TE information within a domain,\
    \ to produce\n   selective information that represents the potential ability to\n\
    \   connect across the domain.\n   Abstraction does not offer all possible connectivity\
    \ options (refer\n   to Section 3.5) but does present a general view of potential\n\
    \   connectivity.  Abstraction may have a dynamic element but is not\n   intended\
    \ to keep pace with the changes in TE attribute availability\n   within the network.\n\
    \   Thus, when relying on an abstraction to compute an end-to-end path,\n   the\
    \ process might not deliver a usable path.  That is, there is no\n   actual guarantee\
    \ that the abstractions are current or feasible.\n   Although abstraction uses\
    \ available TE information, it is subject to\n   policy and management choices.\
    \  Thus, not all potential connectivity\n   will be advertised to each client\
    \ network.  The filters may depend on\n   commercial relationships, the risk of\
    \ disclosing confidential\n   information, and concerns about what use is made\
    \ of the connectivity\n   that is offered.\n"
- title: 4.2.1.  Abstract Links
  contents:
  - "4.2.1.  Abstract Links\n   An abstract link is a measure of the potential to\
    \ connect a pair of\n   points with certain TE parameters.  That is, it is a path\
    \ and its\n   characteristics in the server network.  An abstract link represents\n\
    \   the possibility of setting up an LSP, and LSPs may be set up over the\n  \
    \ abstract link.\n   When looking at a network such as the network shown in Figure\
    \ 7, the\n   link from CN1 to CN4 may be an abstract link.  It is easy to\n  \
    \ advertise it as a link by abstracting the TE information in the\n   server network,\
    \ subject to policy.\n   The path (i.e., the abstract link) represents the possibility\
    \ of\n   establishing an LSP from client network edge to client network edge\n\
    \   across the server network.  There is not necessarily a one-to-one\n   relationship\
    \ between the abstract link and the LSP, because more than\n   one LSP could be\
    \ set up over the path.\n   Since the client network nodes do not have visibility\
    \ into the server\n   network, they must rely on abstraction information delivered\
    \ to them\n   by the server network.  That is, the server network will report\
    \ on\n   the potential for connectivity.\n"
- title: 4.2.2.  The Abstraction Layer Network
  contents:
  - "4.2.2.  The Abstraction Layer Network\n   Figure 7 introduces the abstraction\
    \ layer network.  This construct\n   separates the client network resources (nodes\
    \ C1, C2, C3, and C4, and\n   the corresponding links) and the server network\
    \ resources (nodes CN1,\n   CN2, CN3, and CN4, and the corresponding links). \
    \ Additionally, the\n   architecture introduces an intermediary network layer\
    \ called the\n   abstraction layer.  The abstraction layer contains the client\
    \ network\n   edge nodes (C2 and C3), the server network edge nodes (CN1 and CN4),\n\
    \   the client-server links (C2-CN1 and CN4-C3), and the abstract link\n   (CN1-CN4).\n\
    \   The client network is able to operate as normal.  Connectivity across\n  \
    \ the network can be either found or not found, based on links that\n   appear\
    \ in the client network TED.  If connectivity cannot be found,\n   end-to-end\
    \ LSPs cannot be set up.  This failure may be reported, but\n   no dynamic action\
    \ is taken by the client network.\n   The server network also operates as normal.\
    \  LSPs across the server\n   network between client network edges are set up\
    \ in response to\n   management commands or in response to signaling requests.\n\
    \   The abstraction layer consists of the physical links between the two\n   networks,\
    \ and also the abstract links.  The abstract links are\n   created by the server\
    \ network according to local policy and represent\n   the potential connectivity\
    \ that could be created across the server\n   network and that the server network\
    \ is willing to make available for\n   use by the client network.  Thus, in this\
    \ example, the diameter of\n   the abstraction layer network is only three hops,\
    \ but an instance of\n   an IGP could easily be run so that all nodes participating\
    \ in the\n   abstraction layer (and, in particular, the client network edge nodes)\n\
    \   can see the TE connectivity in the layer.\n    --    --                  \
    \                --    --\n   |C1|--|C2|                                |C3|--|C4|\
    \   Client Network\n    --   |  |                                |  |   --\n \
    \        |  |                                |  |  . . . . . . . . . . .\n   \
    \      |  |                                |  |\n         |  |               \
    \                 |  |\n         |  |    ---                  ---    |  |    \
    \      Abstraction\n         |  |---|CN1|================|CN4|---|  |        \
    \ Layer Network\n          --    |   |                |   |    --\n          \
    \      |   |                |   |   . . . . . . . . . . . . . .\n            \
    \    |   |                |   |\n                |   |                |   |\n\
    \                |   |   ---    ---   |   |                Server Network\n  \
    \              |   |--|CN2|--|CN3|--|   |\n                 ---    ---    ---\
    \    ---\n    Key\n    --- Direct connection between two nodes\n    === Abstract\
    \ link\n           Figure 7: Architecture for Abstraction Layer Network\n   When\
    \ the client network needs additional connectivity, it can make a\n   request\
    \ to the abstraction layer network.  For example, the operator\n   of the client\
    \ network may want to create a link from C2 to C3.  The\n   abstraction layer\
    \ can see the potential path C2-CN1-CN4-C3 and can\n   set up an LSP C2-CN1-CN4-C3\
    \ across the server network and make the\n   LSP available as a link in the client\
    \ network.\n   Sections 4.2.3 and 4.2.4 show how this model is used to satisfy\
    \ the\n   requirements for connectivity in client-server networks and in peer\n\
    \   networks.\n"
- title: 4.2.2.1.  Nodes in the Abstraction Layer Network
  contents:
  - "4.2.2.1.  Nodes in the Abstraction Layer Network\n   Figure 7 shows a very simplified\
    \ network diagram, and the reader\n   would be forgiven for thinking that only\
    \ client network edge nodes\n   and server network edge nodes may appear in the\
    \ abstraction layer\n   network.  But this is not the case: other nodes from the\
    \ server\n   network may be present.  This allows the abstraction layer network\
    \ to\n   be more complex than a full mesh with access spokes.\n   Thus, as shown\
    \ in Figure 8, a transit node in the server network\n   (here, the node is CN3)\
    \ can be exposed as a node in the abstraction\n   layer network with abstract\
    \ links connecting it to other nodes in the\n   abstraction layer network.  Of\
    \ course, in the network shown in\n   Figure 8, there is little if any value in\
    \ exposing CN3, but if it had\n   other abstract links to other nodes in the abstraction\
    \ layer network\n   and/or direct connections to client network nodes, then the\
    \ resulting\n   network would be richer.\n    --    --                       \
    \              --    --     Client\n   |C1|--|C2|                            \
    \       |C3|--|C4|    Network\n    --   |  |                                 \
    \  |  |   --\n         |  |                                   |  |  . . . . .\
    \ . . . .\n         |  |                                   |  |\n         |  |\
    \                                   |  |\n         |  |   ---          ---   \
    \       ---   |  |       Abstraction\n         |  |--|CN1|========|CN3|========|CN5|--|\
    \  |      Layer Network\n          --   |   |        |   |        |   |   --\n\
    \               |   |        |   |        |   |  . . . . . . . . . . . .\n   \
    \            |   |        |   |        |   |\n               |   |        |  \
    \ |        |   |                 Server\n               |   |   ---  |   |  ---\
    \   |   |                 Network\n               |   |--|CN2|-|   |-|CN4|--|\
    \   |\n                ---    ---   ---   ---    ---\n         Figure 8: Abstraction\
    \ Layer Network with Additional Node\n   It should be noted that the nodes included\
    \ in the abstraction layer\n   network in this way are not \"abstract nodes\"\
    \ in the sense of a\n   virtual node described in Section 3.5.  Although it is\
    \ the case that\n   the policy point responsible for advertising server network\
    \ resources\n   into the abstraction layer network could choose to advertise abstract\n\
    \   nodes in place of real physical nodes, it is believed that doing so\n   would\
    \ introduce significant complexity in terms of:\n   -  Coordination between all\
    \ of the external interfaces of the\n      abstract node.\n   -  Management of\
    \ changes in the server network that lead to limited\n      capabilities to reach\
    \ (cross-connect) across the abstract node.\n      There has been recent work\
    \ on control-plane extensions to describe\n      and operate devices (such as\
    \ asymmetrical switches) that have\n      limited cross-connect capabilities [RFC7579]\
    \ [RFC7580].  These or\n      similar extensions could be used to represent the\
    \ same type of\n      limitations, as they also apply in an abstract node.\n"
- title: 4.2.3.  Abstraction in Client-Server Networks
  contents:
  - "4.2.3.  Abstraction in Client-Server Networks\n   Figure 9 shows the basic architectural\
    \ concepts for a client-server\n   network.  The nodes in the client network are\
    \ C1, C2, CE1, CE2, C3,\n   and C4, where the client edge (CE) nodes are CE1 and\
    \ CE2.  The core\n   (server) network nodes are CN1, CN2, CN3, and CN4.  The interfaces\n\
    \   CE1-CN1 and CE2-CN4 are the interfaces between the client and server\n   networks.\n\
    \   The technologies (switching capabilities) of the client and server\n   networks\
    \ may be the same or different.  If they are different, the\n   client network\
    \ traffic must be tunneled over a server network LSP.\n   If they are the same,\
    \ the client network LSP may be routed over the\n   server network links, tunneled\
    \ over a server network LSP, or\n   constructed from the concatenation (stitching)\
    \ of client network and\n   server network LSP segments.\n                   \
    \   :                            :\n      Client Network  :       Server Network\
    \       :  Client Network\n                      :                           \
    \ :\n     --    --    ---                                  ---    --    --\n \
    \   |C1|--|C2|--|CE1|................................|CE2|--|C3|--|C4|\n     --\
    \    --   |   |    ---                  ---    |   |   --    --\n            \
    \    |   |===|CN1|================|CN4|===|   |\n                |   |---|   |\
    \                |   |---|   |\n                 ---    |   |   ---    ---   |\
    \   |    ---\n                        |   |--|CN2|--|CN3|--|   |\n           \
    \              ---    ---    ---    ---\n     Key\n     --- Direct connection\
    \ between two nodes\n     ... CE-to-CE LSP tunnel\n     === Potential path across\
    \ the server network (abstract link)\n             Figure 9: Architecture for\
    \ Client-Server Network\n   The objective is to be able to support an end-to-end\
    \ connection,\n   C1-to-C4, in the client network.  This connection may support\
    \ TE or\n   normal IP forwarding.  To achieve this, CE1 is to be connected to\
    \ CE2\n   by a link in the client network.  This enables the client network to\n\
    \   view itself as connected and to select an end-to-end path.\n   As shown in\
    \ the figure, three abstraction layer links are formed:\n   CE1-CN1, CN1-CN2,\
    \ and CN4-CE2.  A three-hop LSP is then established\n   from CE1 to CE2 that can\
    \ be presented as a link in the client\n   network.\n   The practicalities of\
    \ how the CE1-CE2 LSP is carried across the\n   server network LSP may depend\
    \ on the switching and signaling options\n   available in the server network.\
    \  The CE1-CE2 LSP may be tunneled\n   down the server network LSP using the mechanisms\
    \ of a hierarchical\n   LSP [RFC4206], or the LSP segments CE1-CN1 and CN4-CE2\
    \ may be\n   stitched to the server network LSP as described in [RFC5150].\n \
    \  Section 4.2.2 has already introduced the concept of the abstraction\n   layer\
    \ network through an example of a simple layered network.  But it\n   may be helpful\
    \ to expand on the example using a slightly more complex\n   network.\n   Figure\
    \ 10 shows a multi-layer network comprising client network nodes\n   (labeled\
    \ as Cn for n = 0 to 9) and server network nodes (labeled as\n   Sn for n = 1\
    \ to 9).\n                                              --     --\n          \
    \                                   |C3|---|C4|\n                            \
    \                 /--     --\\\n             --     --     --     --      --/\
    \           \\--\n            |C1|---|C2|---|S1|---|S2|----|S3|           |C5|\n\
    \             --    /--     --\\    --\\     --\\           /--\n            \
    \      /           \\--    \\--     \\--     --/    --\n                 /   \
    \         |S4|   |S5|----|S6|---|C6|---|C7|\n                /             /--\
    \     --\\    /--    /--     --\n             --/    --     --/    --     \\--/\
    \    --/\n            |C8|---|C9|---|S7|---|S8|----|S9|---|C0|\n             --\
    \     --     --     --      --     --\n                 Figure 10: An Example\
    \ Multi-Layer Network\n   If the network in Figure 10 is operated as separate\
    \ client and server\n   networks, then the client network topology will appear\
    \ as shown in\n   Figure 11.  As can be clearly seen, the network is partitioned,\
    \ and\n   there is no way to set up an LSP from a node on the left-hand side\n\
    \   (say C1) to a node on the right-hand side (say C7).\n                    \
    \                --     --\n                                   |C3|---|C4|\n \
    \                                   --     --\\\n                    --     --\
    \                 \\--\n                   |C1|---|C2|                |C5|\n \
    \                   --    /--                 /--\n                         /\
    \                 --/    --\n                        /                 |C6|---|C7|\n\
    \                       /                  /--     --\n                    --/\
    \    --          --/\n                   |C8|---|C9|        |C0|\n           \
    \         --     --          --\n      Figure 11: Client Network Topology Showing\
    \ Partitioned Network\n   For reference, Figure 12 shows the corresponding server\
    \ network\n   topology.\n                          --     --      --\n       \
    \                  |S1|---|S2|----|S3|\n                          --\\    --\\\
    \     --\\\n                             \\--    \\--     \\--\n             \
    \                |S4|   |S5|----|S6|\n                             /--     --\\\
    \    /--\n                          --/    --     \\--/\n                    \
    \     |S7|---|S8|----|S9|\n                          --     --      --\n     \
    \               Figure 12: Server Network Topology\n   Operating on the TED for\
    \ the server network, a management entity or a\n   software component may apply\
    \ policy and consider what abstract links\n   it might offer for use by the client\
    \ network.  To do this, it\n   obviously needs to be aware of the connections\
    \ between the layers\n   (there is no point in offering an abstract link S2-S8,\
    \ since this\n   could not be of any use in this example).\n   In our example,\
    \ after consideration of which LSPs could be set up in\n   the server network,\
    \ four abstract links are offered: S1-S3, S3-S6,\n   S1-S9, and S7-S9.  These\
    \ abstract links are shown as double lines on\n   the resulting topology of the\
    \ abstraction layer network in Figure 13.\n   As can be seen, two of the links\
    \ must share part of a path (S1-S9\n   must share with either S1-S3 or S7-S9).\
    \  This could be achieved using\n   distinct resources (for example, separate\
    \ lambdas) where the paths\n   are common, but it could also be done using resource\
    \ sharing.\n                                            --\n                 \
    \                          |C3|\n                                           /--\n\
    \                   --     --            --/\n                  |C2|---|S1|==========|S3|\n\
    \                   --     --\\\\          --\\\\\n                          \
    \   \\\\            \\\\\n                              \\\\            \\\\--\
    \     --\n                               \\\\            |S6|---|C6|\n       \
    \                         \\\\            --     --\n                   --   \
    \  --     \\\\--     --\n                  |C9|---|S7|=====|S9|---|C0|\n     \
    \              --     --       --     --\n         Figure 13: Abstraction Layer\
    \ Network with Abstract Links\n   That would mean that when both paths S1-S3 and\
    \ S7-S9 carry\n   client-edge-to-client-edge LSPs, the resources on path S1-S9\
    \ are used\n   and might be depleted to the point that the path is resource\n\
    \   constrained and cannot be used.\n   The separate IGP instance running in the\
    \ abstraction layer network\n   means that this topology is visible at the edge\
    \ nodes (C2, C3, C6,\n   C9, and C0) as well as at a Path Computation Element\
    \ (PCE) if one is\n   present.\n   Now the client network is able to make requests\
    \ to the abstraction\n   layer network to provide connectivity.  In our example,\
    \ it requests\n   that C2 be connected to C3 and that C2 be connected to C0. \
    \ This\n   results in several actions:\n   1. The management component for the\
    \ abstraction layer network asks\n      its PCE to compute the paths necessary\
    \ to make the connections.\n      This yields C2-S1-S3-C3 and C2-S1-S9-C0.\n \
    \  2. The management component for the abstraction layer network\n      instructs\
    \ C2 to start the signaling process for the new LSPs in\n      the abstraction\
    \ layer.\n   3. C2 signals the LSPs for setup using the explicit routes\n    \
    \  C2-S1-S3-C3 and C2-S1-S9-C0.\n   4. When the signaling messages reach S1 (in\
    \ our example, both LSPs\n      traverse S1), the server network may support them\
    \ by a number of\n      means, including establishing server network LSPs as tunnels,\n\
    \      depending on the mismatch of technologies between the client and\n    \
    \  server networks.  For example, S1-S2-S3 and S1-S2-S5-S9 might be\n      traversed\
    \ via an LSP tunnel, using LSPs stitched together, or\n      simply by routing\
    \ the client network LSP through the server\n      network.  If server network\
    \ LSPs are needed, they can be signaled\n      at this point.\n   5. Once any\
    \ server network LSPs that are needed have been\n      established, S1 can continue\
    \ to signal the client-edge-to-client-\n      edge LSP across the abstraction\
    \ layer, using the server network\n      LSPs as either tunnels or stitching segments,\
    \ or simply routing\n      through the server network.\n   6. Finally, once the\
    \ client-edge-to-client-edge LSPs have been set\n      up, the client network\
    \ can be informed and can start to advertise\n      the new TE links C2-C3 and\
    \ C2-C0.  The resulting client network\n      topology is shown in Figure 14.\n\
    \                                      --   --\n                             \
    \        |C3|-|C4|\n                                     /--   --\\\n        \
    \                            /         \\--\n                          --    \
    \ --/          |C5|\n                         |C1|---|C2|          /--\n     \
    \                     --    /--\\       --/    --\n                          \
    \     /    \\     |C6|---|C7|\n                              /      \\    /--\
    \     --\n                             /        \\--/\n                      \
    \    --/    --   |C0|\n                         |C8|---|C9|   --\n           \
    \               --     --\n         Figure 14: Connected Client Network with Additional\
    \ Links\n   7. Now the client network can compute an end-to-end path from C1\n\
    \      to C7.\n"
- title: 4.2.3.1.  A Server with Multiple Clients
  contents:
  - "4.2.3.1.  A Server with Multiple Clients\n   A single server network may support\
    \ multiple client networks.  This\n   is not an uncommon state of affairs -- for\
    \ example, when the server\n   network provides connectivity for multiple customers.\n\
    \   In this case, the abstraction provided by the server network may vary\n  \
    \ considerably according to the policies and commercial relationships\n   with\
    \ each customer.  This variance would lead to a separate\n   abstraction layer\
    \ network maintained to support each client network.\n   On the other hand, it\
    \ may be that multiple client networks are\n   subject to the same policies and\
    \ the abstraction can be identical.\n   In this case, a single abstraction layer\
    \ network can support more\n   than one client.\n   The choices here are made\
    \ as an operational issue by the server\n   network.\n"
- title: 4.2.3.2.  A Client with Multiple Servers
  contents:
  - "4.2.3.2.  A Client with Multiple Servers\n   A single client network may be supported\
    \ by multiple server networks.\n   The server networks may provide connectivity\
    \ between different parts\n   of the client network or may provide parallel (redundant)\n\
    \   connectivity for the client network.\n   In this case, the abstraction layer\
    \ network should contain the\n   abstract links from all server networks so that\
    \ it can make suitable\n   computations and create the correct TE links in the\
    \ client network.\n   That is, the relationship between the client network and\
    \ the\n   abstraction layer network should be one to one.\n"
- title: 4.2.4.  Abstraction in Peer Networks
  contents:
  - "4.2.4.  Abstraction in Peer Networks\n   Figure 15 shows the basic architectural\
    \ concepts for connecting\n   across peer networks.  Nodes from four networks\
    \ are shown: A1 and A2\n   come from one network; B1, B2, and B3 from another\
    \ network; etc.  The\n   interfaces between the networks (sometimes known as External\
    \ Network\n   Network Interfaces - ENNIs) are A2-B1, B3-C1, and C3-D1.\n   The\
    \ objective is to be able to support an end-to-end connection,\n   A1-to-D2. \
    \ This connection is for TE connectivity.\n   As shown in the figure, abstract\
    \ links that span the transit networks\n   are used to achieve the required connectivity.\
    \  These links form the\n   key building blocks of the end-to-end connectivity.\
    \  An end-to-end\n   LSP uses these links as part of its path.  If the stitching\n\
    \   capabilities of the networks are homogeneous, then the end-to-end LSP\n  \
    \ may simply traverse the path defined by the abstract links across the\n   various\
    \ peer networks or may utilize stitching of LSP segments that\n   each traverse\
    \ a network along the path of an abstract link.  If the\n   network switching\
    \ technologies support or necessitate the use of LSP\n   hierarchies, the end-to-end\
    \ LSP may be tunneled across each network\n   using hierarchical LSPs that each\
    \ traverse a network along the path\n   of an abstract link.\n               \
    \  :                  :                  :\n      Network A  :    Network B  \
    \   :    Network C     :  Network D\n                 :                  :   \
    \               :\n       --    --     --    --    --     --    --    --     --\
    \    --\n      |A1|--|A2|---|B1|--|B2|--|B3|---|C1|--|C2|--|C3|---|D1|--|D2|\n\
    \       --    --    |  |   --   |  |   |  |   --   |  |    --    --\n        \
    \           |  |========|  |   |  |========|  |\n                    --      \
    \    --     --          --\n      Key\n      --- Direct connection between two\
    \ nodes\n      === Abstract link across transit network\n                    Figure\
    \ 15: Architecture for Peering\n   Peer networks exist in many situations in the\
    \ Internet.  Packet\n   networks may peer as IGP areas (levels) or as ASes.  Transport\n\
    \   networks (such as optical networks) may peer to provide\n   concatenations\
    \ of optical paths through single-vendor environments\n   (see Section 6).  Figure\
    \ 16 shows a simple example of three peer\n   networks (A, B, and C) each comprising\
    \ a few nodes.\n                 Network A    :     Network B      :   Network\
    \ C\n                              :                    :\n           --     --\
    \      --  :  --     --     --  :  --     --\n          |A1|---|A2|----|A3|---|B1|---|B2|---|B3|---|C1|---|C2|\n\
    \           --     --\\    /--  :  --    /--\\    --  :  --     --\n         \
    \            \\--/     :       /    \\       :\n                     |A4|    \
    \ :      /      \\      :\n                      --\\     :     /        \\  \
    \   :\n                   --    \\--  :  --/          \\--  :  --     --\n   \
    \               |A5|---|A6|---|B4|----------|B6|---|C3|---|C4|\n             \
    \      --     --  :  --            --  :  --     --\n                        \
    \      :                    :\n                              :               \
    \     :\n            Figure 16: A Network Comprising Three Peer Networks\n   As\
    \ discussed in Section 2, peered networks do not share visibility of\n   their\
    \ topologies or TE capabilities for scaling and confidentiality\n   reasons. \
    \ That means, in our example, that computing a path from A1\n   to C4 can be impossible\
    \ without the aid of cooperating PCEs or some\n   form of crankback.\n   But it\
    \ is possible to produce abstract links for reachability across\n   transit peer\
    \ networks and to create an abstraction layer network.\n   That network can be\
    \ enhanced with specific reachability information\n   if a destination network\
    \ is partitioned, as is the case with\n   Network C in Figure 16.\n   Suppose\
    \ that Network B decides to offer three abstract links B1-B3,\n   B4-B3, and B4-B6.\
    \  The abstraction layer network could then be\n   constructed to look like the\
    \ network in Figure 17.\n                        --     --      --      --\n \
    \                      |A3|---|B1|====|B3|----|C1|\n                        --\
    \     --    //--      --\n                                    //\n           \
    \                        //\n                                  //\n          \
    \              --     --//     --     --\n                       |A6|---|B4|=====|B6|---|C3|\n\
    \                        --     --       --     --\n     Figure 17: Abstraction\
    \ Layer Network for the Peer Network Example\n   Using a process similar to that\
    \ described in Section 4.2.3, Network A\n   can request connectivity to Network\
    \ C, and abstract links can be\n   advertised that connect the edges of the two\
    \ networks and that can be\n   used to carry LSPs that traverse both networks.\
    \  Furthermore, if\n   Network C is partitioned, reachability information can\
    \ be exchanged\n   to allow Network A to select the correct abstract link, as\
    \ shown in\n   Figure 18.\n                       Network A       :      Network\
    \ C\n                                       :\n                 --     --    \
    \  --     :     --       --\n                |A1|---|A2|----|A3|=========|C1|.....|C2|\n\
    \                 --     --\\    /--     :     --       --\n                 \
    \          \\--/        :\n                           |A4|        :\n        \
    \                    --\\        :\n                         --    \\--     :\
    \     --       --\n                        |A5|---|A6|=========|C3|.....|C4|\n\
    \                         --     --     :     --       --\n      Figure 18: Tunnel\
    \ Connections to Network C with TE Reachability\n   Peer networking cases can\
    \ be made far more complex by dual-homing\n   between network peering nodes (for\
    \ example, A3 might connect to B1\n   and B4 in Figure 17) and by the networks\
    \ themselves being arranged in\n   a mesh (for example, A6 might connect to B4\
    \ and C1 in Figure 17).\n   These additional complexities can be handled gracefully\
    \ by the\n   abstraction layer network model.\n   Further examples of abstraction\
    \ in peer networks can be found in\n   Sections 6 and 8.\n"
- title: 4.3.  Considerations for Dynamic Abstraction
  contents:
  - "4.3.  Considerations for Dynamic Abstraction\n   It is possible to consider a\
    \ highly dynamic system where the server\n   network adaptively suggests new abstract\
    \ links into the abstraction\n   layer, and where the abstraction layer proactively\
    \ deploys new\n   client-edge-to-client-edge LSPs to provide new links in the\
    \ client\n   network.  Such fluidity is, however, to be treated with caution.\
    \  In\n   particular, in the case of client-server networks of differing\n   technologies\
    \ where hierarchical server network LSPs are used, this\n   caution is needed\
    \ for three reasons: there may be longer turn-up\n   times for connections in\
    \ some server networks; the server networks\n   are likely to be sparsely connected;\
    \ and expensive physical resources\n   will only be deployed where there is believed\
    \ to be a need for them.\n   More significantly, the complex commercial, policy,\
    \ and\n   administrative relationships that may exist between client and server\n\
    \   network operators mean that stability is more likely to be the\n   desired\
    \ operational practice.\n   Thus, proposals for fully automated multi-layer networks\
    \ based on\n   this architecture may be regarded as forward-looking topics for\n\
    \   research both in terms of network stability and with regard to\n   economic\
    \ impact.\n   However, some elements of automation should not be discarded.  A\n\
    \   server network may automatically apply policy to determine the best\n   set\
    \ of abstract links to offer and the most suitable way for the\n   server network\
    \ to support them.  And a client network may dynamically\n   observe congestion,\
    \ lack of connectivity, or predicted changes in\n   traffic demand and may use\
    \ this information to request additional\n   links from the abstraction layer.\
    \  And, once policies have been\n   configured, the whole system should be able\
    \ to operate independently\n   of operator control (which is not to say that the\
    \ operator will not\n   have the option of exerting control at every step in the\
    \ process).\n"
- title: 4.4.  Requirements for Advertising Links and Nodes
  contents:
  - "4.4.  Requirements for Advertising Links and Nodes\n   The abstraction layer\
    \ network is \"just another network layer\".  The\n   links and nodes in the network\
    \ need to be advertised along with their\n   associated TE information (metrics,\
    \ bandwidth, etc.) so that the\n   topology is disseminated and so that routing\
    \ decisions can be made.\n   This requires a routing protocol running between\
    \ the nodes in the\n   abstraction layer network.  Note that this routing information\n\
    \   exchange could be piggybacked on an existing routing protocol\n   instance\
    \ (subject to different switching capabilities applying to the\n   links in the\
    \ different networks, or to adequate address space\n   separation) or use a new\
    \ instance (or even a new protocol).  Clearly,\n   the information exchanged is\
    \ only information that has been created\n   as part of the abstraction function\
    \ according to policy.\n   It should be noted that in many cases the abstract\
    \ link represents\n   the potential for connectivity across the server network\
    \ but that\n   no such connectivity exists.  In this case, we may ponder how the\n\
    \   routing protocol in the abstraction layer will advertise topology\n   information\
    \ for, and over, a link that has no underlying\n   connectivity.  In other words,\
    \ there must be a communication channel\n   between the abstraction layer nodes\
    \ so that the routing protocol\n   messages can flow.  The answer is that control-plane\
    \ connectivity\n   already exists in the server network and on the client-server\
    \ edge\n   links, and this can be used to carry the routing protocol messages\n\
    \   for the abstraction layer network.  The same consideration applies to\n  \
    \ the advertisement, in the client network, of the potential\n   connectivity\
    \ that the abstraction layer network can provide, although\n   it may be more\
    \ normal to establish that connectivity before\n   advertising a link in the client\
    \ network.\n"
- title: 4.5.  Addressing Considerations
  contents:
  - "4.5.  Addressing Considerations\n   The network layers in this architecture should\
    \ be able to operate\n   with separate address spaces, and these may overlap without\
    \ any\n   technical issues.  That is, one address may mean one thing in the\n\
    \   client network, yet the same address may have a different meaning in\n   the\
    \ abstraction layer network or the server network.  In other words,\n   there\
    \ is complete address separation between networks.\n   However, this will require\
    \ some care, both because human operators\n   may well become confused, and because\
    \ mapping between address spaces\n   is needed at the interfaces between the network\
    \ layers.  That mapping\n   requires configuration so that, for example, when\
    \ the server network\n   announces an abstract link from A to B, the abstraction\
    \ layer network\n   must recognize that A and B are server network addresses and\
    \ must map\n   them to abstraction layer addresses (say P and Q) before including\n\
    \   the link in its own topology.  And similarly, when the abstraction\n   layer\
    \ network informs the client network that a new link is available\n   from S to\
    \ T, it must map those addresses from its own address space\n   to that of the\
    \ client network.\n   This form of address mapping will become particularly important\
    \ in\n   cases where one abstraction layer network is constructed from\n   connectivity\
    \ in multiple server networks, or where one abstraction\n   layer network provides\
    \ connectivity for multiple client networks.\n"
- title: 5.  Building on Existing Protocols
  contents:
  - "5.  Building on Existing Protocols\n   This section is non-normative and is not\
    \ intended to prejudge a\n   solutions framework or any applicability work.  It\
    \ does, however,\n   very briefly serve to note the existence of protocols that\
    \ could be\n   examined for applicability to serve in realizing the model described\n\
    \   in this document.\n   The general principle of protocol reuse is preferred\
    \ over the\n   invention of new protocols or additional protocol extensions, and\
    \ it\n   would be advantageous to make use of an existing protocol that is\n \
    \  commonly implemented on network nodes and is currently deployed, or\n   to\
    \ use existing computational elements such as PCEs.  This has many\n   benefits\
    \ in network stability, time to deployment, and operator\n   training.\n   It\
    \ is recognized, however, that existing protocols are unlikely to be\n   immediately\
    \ suitable to this problem space without some protocol\n   extensions.  Extending\
    \ protocols must be done with care and with\n   consideration for the stability\
    \ of existing deployments.  In extreme\n   cases, a new protocol can be preferable\
    \ to a messy hack of an\n   existing protocol.\n"
- title: 5.1.  BGP-LS
  contents:
  - "5.1.  BGP-LS\n   BGP - Link State (BGP-LS) is a set of extensions to BGP, as\
    \ described\n   in [RFC7752].  Its purpose is to announce topology information\
    \ from\n   one network to a \"northbound\" consumer.  Application of BGP-LS to\n\
    \   date has focused on a mechanism to build a TED for a PCE.  However,\n   BGP's\
    \ mechanisms would also serve well to advertise abstract links\n   from a server\
    \ network into the abstraction layer network or to\n   advertise potential connectivity\
    \ from the abstraction layer network\n   to the client network.\n"
- title: 5.2.  IGPs
  contents:
  - "5.2.  IGPs\n   Both OSPF and IS-IS have been extended through a number of RFCs\
    \ to\n   advertise TE information.  Additionally, both protocols are capable\n\
    \   of running in a multi-instance mode either as ships that pass in the\n   night\
    \ (i.e., completely separate instances using different address\n   spaces) or\
    \ as dual instances on the same address space.  This means\n   that either OSPF\
    \ or IS-IS could probably be used as the routing\n   protocol in the abstraction\
    \ layer network.\n"
- title: 5.3.  RSVP-TE
  contents:
  - "5.3.  RSVP-TE\n   RSVP-TE signaling can be used to set up all TE LSPs demanded\
    \ by this\n   model, without the need for any protocol extensions.\n   If necessary,\
    \ LSP hierarchy [RFC4206] or LSP stitching [RFC5150] can\n   be used to carry\
    \ LSPs over the server network, again without needing\n   any protocol extensions.\n\
    \   Furthermore, the procedures in [RFC6107] allow the dynamic signaling\n   of\
    \ the purpose of any LSP that is established.  This means that when\n   an LSP\
    \ tunnel is set up, the two ends can coordinate into which\n   routing protocol\
    \ instance it should be advertised and can also agree\n   on the addressing to\
    \ be said to identify the link that will be\n   created.\n"
- title: 5.4.  Notes on a Solution
  contents:
  - "5.4.  Notes on a Solution\n   This section is not intended to be prescriptive\
    \ or dictate the\n   protocol solutions that may be used to satisfy the architecture\n\
    \   described in this document, but it does show how the existing\n   protocols\
    \ listed in the previous sections can be combined, with only\n   minor modifications,\
    \ to provide a solution.\n   A server network can be operated using GMPLS routing\
    \ and signaling\n   protocols.  Using information gathered from the routing protocol,\
    \ a\n   TED can be constructed containing resource availability information\n\
    \   and Shared Risk Link Group (SRLG) details.  A policy-based process\n   can\
    \ then determine which nodes and abstract links it wishes to\n   advertise to\
    \ form the abstraction layer network.\n   The server network can now use BGP-LS\
    \ to advertise a topology of\n   links and nodes to form the abstraction layer\
    \ network.  This\n   information would most likely be advertised from a single\
    \ point of\n   control that made all of the abstraction decisions, but the function\n\
    \   could be distributed to multiple server network edge nodes.  The\n   information\
    \ can be advertised by BGP-LS to multiple points within the\n   abstraction layer\
    \ (such as all client network edge nodes) or to a\n   single controller.\n   Multiple\
    \ server networks may advertise information that is used to\n   construct an abstraction\
    \ layer network, and one server network may\n   advertise different information\
    \ in different instances of BGP-LS to\n   form different abstraction layer networks.\
    \  Furthermore, in the case\n   of one controller constructing multiple abstraction\
    \ layer networks,\n   BGP-LS uses the route target mechanism defined in [RFC4364]\
    \ to\n   distinguish the different applications (effectively abstraction layer\n\
    \   network VPNs) of the exported information.\n   Extensions may be made to BGP-LS\
    \ to allow advertisement of Macro\n   Shared Risk Link Groups (MSRLGs) (Appendix\
    \ B.1) and the\n   identification of mutually exclusive links (Appendix B.2),\
    \ and to\n   indicate whether the abstract link has been pre-established or not.\n\
    \   Such extensions are valid options but do not form a core component of\n  \
    \ this architecture.\n   The abstraction layer network may operate under central\
    \ control or\n   use a distributed control plane.  Since the links and nodes may\
    \ be a\n   mix of physical and abstract links, and since the nodes may have\n\
    \   diverse cross-connect capabilities, it is most likely that a GMPLS\n   routing\
    \ protocol will be beneficial for collecting and correlating\n   the routing information\
    \ and for distributing updates.  No special\n   additional features are needed\
    \ beyond adding those extra parameters\n   just described for BGP-LS, but it should\
    \ be noted that the control\n   plane of the abstraction layer network must run\
    \ in an out-of-band\n   control network because the data-bearing links might not\
    \ yet have\n   been established via connections in the server network.\n   The\
    \ abstraction layer network is also able to determine potential\n   connectivity\
    \ from client network edge to client network edge.  It\n   will determine which\
    \ client network links to create according to\n   policy and subject to requests\
    \ from the client network, and will take\n   four steps:\n   -  First, it will\
    \ compute a path across the abstraction layer\n      network.\n   -  Then, if\
    \ support of the abstract links requires the use of\n      server network LSPs\
    \ for tunneling or stitching and if those LSPs\n      are not already established,\
    \ it will ask the server layer to set\n      them up.\n   -  Then, it will signal\
    \ the client-edge-to-client-edge LSP.\n   -  Finally, the abstraction layer network\
    \ will inform the client\n      network of the existence of the new client network\
    \ link.\n   This last step can be achieved by either (1) coordination of the\n\
    \   end points of the LSPs that span the abstraction layer (these points\n   are\
    \ client network edge nodes) using mechanisms such as those\n   described in [RFC6107]\
    \ or (2) using BGP-LS from a central controller.\n   Once the client network edge\
    \ nodes are aware of a new link, they will\n   automatically advertise it using\
    \ their routing protocol and it will\n   become available for use by traffic in\
    \ the client network.\n   Sections 6, 7, and 8 discuss the applicability of this\
    \ architecture\n   to different network types and problem spaces, while Section\
    \ 9 gives\n   some advice about scoping future work.  Section 10 (\"Manageability\n\
    \   Considerations\") is particularly relevant in the context of this\n   section\
    \ because it contains a discussion of the policies and\n   mechanisms for indicating\
    \ connectivity and link availability between\n   network layers in this architecture.\n"
- title: 6.  Application of the Architecture to Optical Domains and Networks
  contents:
  - "6.  Application of the Architecture to Optical Domains and Networks\n   Many\
    \ optical networks are arranged as a set of small domains.  Each\n   domain is\
    \ a cluster of nodes, usually from the same equipment vendor\n   and with the\
    \ same properties.  The domain may be constructed as a\n   mesh or a ring, or\
    \ maybe as an interconnected set of rings.\n   The network operator seeks to provide\
    \ end-to-end connectivity across\n   a network constructed from multiple domains,\
    \ and so (of course) the\n   domains are interconnected.  In a network under management\
    \ control,\n   such as through an Operations Support System (OSS), each domain\
    \ is\n   under the operational control of a Network Management System (NMS).\n\
    \   In this way, an end-to-end path may be commissioned by the OSS\n   instructing\
    \ each NMS, and the NMSes setting up the path fragments\n   across the domains.\n\
    \   However, in a system that uses a control plane, there is a need for\n   integration\
    \ between the domains.\n   Consider a simple domain, D1, as shown in Figure 19.\
    \  In this case,\n   nodes A through F are arranged in a topological ring.  Suppose\
    \ that\n   there is a control plane in use in this domain and that OSPF is used\n\
    \   as the TE routing protocol.\n                            -----------------\n\
    \                           |              D1 |\n                           |\
    \      B---C      |\n                           |     /     \\     |\n       \
    \                    |    /       \\    |\n                           |   A  \
    \       D   |\n                           |    \\       /    |\n             \
    \              |     \\     /     |\n                           |      F---E \
    \     |\n                           |                 |\n                    \
    \        -----------------\n                    Figure 19: A Simple Optical Domain\n\
    \   Now consider that the operator's network is built from a mesh of such\n  \
    \ domains, D1 through D7, as shown in Figure 20.  It is possible that\n   these\
    \ domains share a single, common instance of OSPF, in which case\n   there is\
    \ nothing further to say because that OSPF instance will\n   distribute sufficient\
    \ information to build a single TED spanning the\n   whole network, and an end-to-end\
    \ path can be computed.  A more likely\n   scenario is that each domain is running\
    \ its own OSPF instance.  In\n   this case, each is able to handle the peculiarities\
    \ (or, rather,\n   advanced functions) of each vendor's equipment capabilities.\n\
    \                  ------     ------     ------     ------\n                 |\
    \      |   |      |   |      |   |      |\n                 |  D1  |---|  D2 \
    \ |---|  D3  |---|  D4  |\n                 |      |   |      |   |      |   |\
    \      |\n                  ------\\    ------\\    ------\\    ------\n     \
    \                    \\    |     \\     |    \\     |\n                      \
    \    \\------    \\------    \\------\n                          |      |   |\
    \      |   |      |\n                          |  D5  |---|  D6  |---|  D7  |\n\
    \                          |      |   |      |   |      |\n                  \
    \         ------     ------     ------\n                Figure 20: A Mesh of Simple\
    \ Optical Domains\n   The question now is how to combine the multiple sets of\
    \ information\n   distributed by the different OSPF instances.  Three possible\
    \ models\n   suggest themselves, based on pre-existing routing practices.\n  \
    \ o  In the first model (the area-based model), each domain is treated\n     \
    \ as a separate OSPF area.  The end-to-end path will be specified to\n      traverse\
    \ multiple areas, and each area will be left to determine\n      the path across\
    \ the nodes in the area.  The feasibility of an\n      end-to-end path (and, thus,\
    \ the selection of the sequence of\n      areas and their interconnections) can\
    \ be derived using\n      hierarchical PCEs.\n      This approach, however, fits\
    \ poorly with established use of the\n      OSPF area: in this form of optical\
    \ network, the interconnection\n      points between domains are likely to be\
    \ links, and the mesh of\n      domains is far more interconnected and unstructured\
    \ than we are\n      used to seeing in the normal area-based routing paradigm.\n\
    \      Furthermore, while hierarchical PCEs may be able to resolve this\n    \
    \  type of network, the effort involved may be considerable for more\n      than\
    \ a small collection of domains.\n   o  Another approach (the AS-based model)\
    \ treats each domain as a\n      separate Autonomous System (AS).  The end-to-end\
    \ path will be\n      specified to traverse multiple ASes, and each AS will be\
    \ left to\n      determine the path across the nodes in that AS.\n      This model\
    \ sits more comfortably with the established routing\n      paradigm but causes\
    \ a massive escalation of ASes in the global\n      Internet.  It would, in practice,\
    \ require that the operator use\n      private AS numbers [RFC6996], of which\
    \ there are plenty.\n      Then, as suggested in the area-based model, hierarchical\
    \ PCEs\n      could be used to determine the feasibility of an end-to-end path\n\
    \      and to derive the sequence of domains and the points of\n      interconnection\
    \ to use.  But just as in the area-based model, the\n      scalability of this\
    \ model using a hierarchical PCE must be\n      questioned, given the sheer number\
    \ of ASes and their\n      interconnectivity.\n      Furthermore, determining\
    \ the mesh of domains (i.e., the inter-AS\n      connections) conventionally requires\
    \ the use of BGP as an\n      inter-domain routing protocol.  However, not only\
    \ is BGP not\n      normally available on optical equipment, but this approach\n\
    \      indicates that the TE properties of the inter-domain links would\n    \
    \  need to be distributed and updated using BGP -- something for\n      which\
    \ it is not well suited.\n   o  The third approach (the Automatically Switched\
    \ Optical Network\n      (ASON) model) follows the architectural model set out\
    \ by the ITU-T\n      [G.8080] and uses the routing protocol extensions described\
    \ in\n      [RFC6827].  In this model, the concept of \"levels\" is introduced\n\
    \      to OSPF.  Referring back to Figure 20, each OSPF instance running\n   \
    \   in a domain would be construed as a \"lower-level\" OSPF instance\n      and\
    \ would leak routes into a \"higher-level\" instance of the\n      protocol that\
    \ runs across the whole network.\n      This approach handles the awkwardness\
    \ of representing the domains\n      as areas or ASes by simply considering them\
    \ as domains running\n      distinct instances of OSPF.  Routing advertisements\
    \ flow \"upward\"\n      from the domains to the high-level OSPF instance, giving\
    \ it a full\n      view of the whole network and allowing end-to-end paths to\
    \ be\n      computed.  Routing advertisements may also flow \"downward\" from\n\
    \      the network-wide OSPF instance to any one domain so that it can\n     \
    \ see the connectivity of the whole network.\n      Although architecturally satisfying,\
    \ this model suffers from\n      having to handle the different characteristics\
    \ of different\n      equipment vendors.  The advertisements coming from each\
    \ low-level\n      domain would be meaningless when distributed into the other\n\
    \      domains, and the high-level domain would need to be kept\n      up to date\
    \ with the semantics of each new release of each vendor's\n      equipment.  Additionally,\
    \ the scaling issues associated with a\n      well-meshed network of domains,\
    \ each with many entry and exit\n      points and each with network resources\
    \ that are continually being\n      updated, reduces to the same problem, as noted\
    \ in the virtual link\n      model.  Furthermore, in the event that the domains\
    \ are under the\n      control of different administrations, the domains would\
    \ not want\n      to distribute the details of their topologies and TE resources.\n\
    \   Practically, this third model turns out to be very close to the\n   methodology\
    \ described in this document.  As noted in Section 6.1 of\n   [RFC6827], there\
    \ are policy rules that can be applied to define\n   exactly what information\
    \ is exported from or imported to a low-level\n   OSPF instance.  [RFC6827] even\
    \ notes that some forms of aggregation\n   may be appropriate.  Thus, we can apply\
    \ the following simplifications\n   to the mechanisms defined in [RFC6827]:\n\
    \   -  Zero information is imported to low-level domains.\n   -  Low-level domains\
    \ export only abstracted links as defined in this\n      document and according\
    \ to local abstraction policy, and with\n      appropriate removal of vendor-specific\
    \ information.\n   -  There is no need to formally define routing levels within\
    \ OSPF.\n   -  Export of abstracted links from the domains to the network-wide\n\
    \      routing instance (the abstraction routing layer) can take place\n     \
    \ through any mechanism, including BGP-LS or direct interaction\n      between\
    \ OSPF implementations.\n   With these simplifications, it can be seen that the\
    \ framework defined\n   in this document can be constructed from the architecture\
    \ discussed\n   in [RFC6827], but without needing any of the protocol extensions\n\
    \   defined in that document.  Thus, using the terminology and concepts\n   already\
    \ established, the problem may be solved as shown in Figure 21.\n   The abstraction\
    \ layer network is constructed from the inter-domain\n   links, the domain border\
    \ nodes, and the abstracted (cross-domain)\n   links.\n                      \
    \                                 Abstraction Layer\n      --             -- \
    \   --             --    --             --\n     |  |===========|  |--|  |===========|\
    \  |--|  |===========|  |\n     |  |           |  |  |  |           |  |  |  |\
    \           |  |\n   ..|  |...........|  |..|  |...........|  |..|  |...........|\
    \  |......\n     |  |           |  |  |  |           |  |  |  |           |  |\n\
    \     |  |  --   --  |  |  |  |  --   --  |  |  |  |  --   --  |  |\n     |  |_|\
    \  |_|  |_|  |  |  |_|  |_|  |_|  |  |  |_|  |_|  |_|  |\n     |  | |  | |  |\
    \ |  |  |  | |  | |  | |  |  |  | |  | |  | |  |\n      --   --   --   --    --\
    \   --   --   --    --   --   --   --\n          Domain 1             Domain 2\
    \             Domain 3\n     Key                                             \
    \      Optical Layer\n       ...  Layer separation\n       ---  Physical link\n\
    \       ===  Abstract link\n                Figure 21: The Optical Network Implemented\n\
    \                   through the Abstraction Layer Network\n"
- title: 7.  Application of the Architecture to the User-Network Interface
  contents:
  - "7.  Application of the Architecture to the User-Network Interface\n   The User-Network\
    \ Interface (UNI) is an important architectural\n   concept in many implementations\
    \ and deployments of client-server\n   networks, especially those where the client\
    \ and server network have\n   different technologies.  The UNI is described in\
    \ [G.8080], and the\n   GMPLS approach to the UNI is documented in [RFC4208].\
    \  Other\n   GMPLS-related documents describe the application of GMPLS to specific\n\
    \   UNI scenarios: for example, [RFC6005] describes how GMPLS can support\n  \
    \ a UNI that provides access to Ethernet services.\n   Figure 1 of [RFC6005] is\
    \ reproduced here as Figure 22.  It shows the\n   Ethernet UNI reference model,\
    \ and that figure can serve as an example\n   for all similar UNIs.  In this case,\
    \ the UNI is an interface between\n   client network edge nodes and the server\
    \ network.  It should be noted\n   that neither the client network nor the server\
    \ network need be an\n   Ethernet switching network.\n   There are three network\
    \ layers in this model: the client network, the\n   \"Ethernet service network\"\
    , and the server network.  The so-called\n   Ethernet service network consists\
    \ of links comprising the UNI links\n   and the tunnels across the server network,\
    \ and nodes comprising the\n   client network edge nodes and various server network\
    \ nodes.  That is,\n   the Ethernet service network is equivalent to the abstraction\
    \ layer\n   network, with the UNI links being the physical links between the\n\
    \   client and server networks, the client edge nodes taking the role of\n   UNI\
    \ Client-side (UNI-C) nodes, and the server edge nodes acting as\n   the UNI Network-side\
    \ (UNI-N) nodes.\n        Client                                            Client\n\
    \        Network       +----------+    +-----------+       Network\n   -------------+\
    \     |          |    |           |     +-------------\n         +----+ |    \
    \ |  +-----+ |    |  +-----+  |     | +----+\n   ------+    | |     |  |     |\
    \ |    |  |     |  |     | |    +------\n   ------+ EN +-+-----+--+ CN  +-+----+--+\
    \  CN +--+-----+-+ EN +------\n         |    | |  +--+--|     +-+-+  |  |    \
    \ +--+-----+-+    |\n         +----+ |  |  |  +--+--+ | |  |  +--+--+  |     |\
    \ +----+\n                |  |  |     |    | |  |     |     |     |\n   -------------+\
    \  |  |     |    | |  |     |     |     +-------------\n                   | \
    \ |     |    | |  |     |     |\n   -------------+  |  |     |    | |  |     |\
    \     |     +-------------\n                |  |  |  +--+--+ | |  |  +--+--+ \
    \ |     |\n         +----+ |  |  |  |     | | +--+--+     |  |     | +----+\n\
    \   ------+    +-+--+  |  | CN  +-+----+--+ CN  |  |     | |    +------\n   ------+\
    \ EN +-+-----+--+     | |    |  |     +--+-----+-+ EN +------\n         |    |\
    \ |     |  +-----+ |    |  +-----+  |     | |    |\n         +----+ |     |  \
    \        |    |           |     | +----+\n                |     +----------+ \
    \   |-----------+     |\n   -------------+           Server Networks         \
    \    +-------------\n        Client    UNI                               UNI \
    \  Client\n        Network <----->                           <-----> Network\n\
    \                          Scope of This Document\n                        Legend:\
    \   EN  -  Client Network Edge Node\n                                  CN  - \
    \ Server Network (Core) Node\n                  Figure 22: Ethernet UNI Reference\
    \ Model\n   An issue that is often raised relates to how a dual-homed client\n\
    \   network edge node (such as that shown at the bottom left-hand corner\n   of\
    \ Figure 22) can make determinations about how they connect across\n   the UNI.\
    \  This can be particularly important when reachability across\n   the server\
    \ network is limited or when two diverse paths are desired\n   (for example, to\
    \ provide protection).  However, in the model\n   described in this network, the\
    \ edge node (the UNI-C node) is part of\n   the abstraction layer network and\
    \ can see sufficient topology\n   information to make these decisions.  If the\
    \ approach introduced in\n   this document is used to model the UNI as described\
    \ in this section,\n   there is no need to enhance the signaling protocols at\
    \ the GMPLS UNI\n   nor to add routing exchanges at the UNI.\n"
- title: 8.  Application of the Architecture to L3VPN Multi-AS Environments
  contents:
  - "8.  Application of the Architecture to L3VPN Multi-AS Environments\n   Serving\
    \ Layer 3 VPNs (L3VPNs) across a multi-AS or multi-operator\n   environment currently\
    \ provides a significant planning challenge.\n   Figure 6 shows the general case\
    \ of the problem that needs to be\n   solved.  This section shows how the abstraction\
    \ layer network can\n   address this problem.\n   In the VPN architecture, the\
    \ CE nodes are the client network edge\n   nodes, and the PE nodes are the server\
    \ network edge nodes.  The\n   abstraction layer network is made up of the CE\
    \ nodes, the CE-PE\n   links, the PE nodes, and PE-PE tunnels that are the abstract\
    \ links.\n   In the multi-AS or multi-operator case, the abstraction layer network\n\
    \   also includes the PEs (maybe Autonomous System Border Routers\n   (ASBRs))\
    \ at the edges of the multiple server networks, and the PE-PE\n   (maybe inter-AS)\
    \ links.  This gives rise to the architecture shown in\n   Figure 23.\n   The\
    \ policy for adding abstract links to the abstraction layer network\n   will be\
    \ driven substantially by the needs of the VPN.  Thus, when a\n   new VPN site\
    \ is added and the existing abstraction layer network\n   cannot support the required\
    \ connectivity, a new abstract link will be\n   created out of the underlying\
    \ network.\n       ...........                                     .............\n\
    \        VPN Site :                                     : VPN Site\n        --\
    \   --  :                                     :  --   --\n       |C1|-|CE| : \
    \                                    : |CE|-|C2|\n        --  |  | :         \
    \                            : |  |  --\n            |  | :                  \
    \                   : |  |\n            |  | :                               \
    \      : |  |\n            |  | :                                     : |  |\n\
    \            |  | :   --           --     --       --   : |  |\n            |\
    \  |----|PE|=========|PE|---|PE|=====|PE|----|  |\n             --  :  |  |  \
    \       |  |   |  |     |  |  :  --\n       ...........  |  |         |  |   |\
    \  |     |  |  ............\n                    |  |         |  |   |  |    \
    \ |  |\n                    |  |         |  |   |  |     |  |\n              \
    \      |  |         |  |   |  |     |  |\n                    |  |  -   -  | \
    \ |   |  |  -  |  |\n                    |  |-|P|-|P|-|  |   |  |-|P|-|  |\n \
    \                    --   -   -   --     --   -   --\n        Figure 23: The Abstraction\
    \ Layer Network for a Multi-AS VPN\n   It is important to note that each VPN instance\
    \ can have a separate\n   abstraction layer network.  This means that the server\
    \ network\n   resources can be partitioned and that traffic can be kept separate.\n\
    \   This can be achieved even when VPN sites from different VPNs connect\n   at\
    \ the same PE.  Alternatively, multiple VPNs can share the same\n   abstraction\
    \ layer network if that is operationally preferable.\n   Lastly, just as for the\
    \ UNI discussed in Section 7, the issue of\n   dual-homing of VPN sites is a function\
    \ of the abstraction layer\n   network and so is just a normal routing problem\
    \ in that network.\n"
- title: 9.  Scoping Future Work
  contents:
  - "9.  Scoping Future Work\n   This section is provided to help guide the work on\
    \ this problem.  The\n   overarching view is that it is important to limit and\
    \ focus the work\n   on those things that are core and necessary to achieve the\
    \ main\n   function, and to not attempt to add unnecessary features or to\n  \
    \ over-complicate the architecture or the solution by attempting to\n   address\
    \ marginal use cases or corner cases.  This guidance is\n   non-normative for\
    \ this architecture description.\n"
- title: 9.1.  Limiting Scope to Only Part of the Internet
  contents:
  - "9.1.  Limiting Scope to Only Part of the Internet\n   The scope of the use cases\
    \ and problem statement in this document is\n   limited to \"some small set of\
    \ interconnected domains.\"  In\n   particular, it is not the objective of this\
    \ work to turn the whole\n   Internet into one large, interconnected TE network.\n"
- title: 9.2.  Working with "Related" Domains
  contents:
  - "9.2.  Working with \"Related\" Domains\n   Starting with this subsection, the\
    \ intention of this work is to solve\n   the TE interconnectivity for only \"\
    related\" domains.  Such domains\n   may be under common administrative operation\
    \ (such as IGP areas\n   within a single AS, or ASes belonging to a single operator)\
    \ or may\n   have a direct commercial arrangement for the sharing of TE\n   information\
    \ to provide specific services.  Thus, in both cases, there\n   is a strong opportunity\
    \ for the application of policy.\n"
- title: 9.3.  Not Finding Optimal Paths in All Situations
  contents:
  - "9.3.  Not Finding Optimal Paths in All Situations\n   As has been well described\
    \ in this document, abstraction necessarily\n   involves compromises and removal\
    \ of information.  That means that it\n   is not possible to guarantee that an\
    \ end-to-end path over\n   interconnected TE domains follows the absolute optimal\
    \ (by any\n   measure of optimality) path.  This is taken as understood, and future\n\
    \   work should not attempt to achieve such paths, which can only be\n   found\
    \ by a full examination of all network information across all\n   connected networks.\n"
- title: 9.4.  Sanity and Scaling
  contents:
  - "9.4.  Sanity and Scaling\n   All of the above points play into a final observation.\
    \  This work is\n   intended to \"bite off\" a small problem for some relatively\
    \ simple use\n   cases as described in Section 2.  It is not intended that this\
    \ work\n   will be immediately (or even soon) extended to cover many large\n \
    \  interconnected domains.  Obviously, the solution should, as far as\n   possible,\
    \ be designed to be extensible and scalable; however, it is\n   also reasonable\
    \ to make trade-offs in favor of utility and\n   simplicity.\n"
- title: 10.  Manageability Considerations
  contents:
  - "10.  Manageability Considerations\n   Manageability should not be a significant\
    \ additional burden.  Each\n   layer in the network model can, and should, be\
    \ managed independently.\n   That is, each client network will run its own management\
    \ systems and\n   tools to manage the nodes and links in the client network: each\n\
    \   client network link that uses an abstract link will still be\n   available\
    \ for management in the client network as any other link.\n   Similarly, each\
    \ server network will run its own management systems\n   and tools to manage the\
    \ nodes and links in that network just as\n   normal.\n   Three issues remain\
    \ for consideration:\n   -  How is the abstraction layer network managed?\n  \
    \ -  How is the interface between the client network and the\n      abstraction\
    \ layer network managed?\n   -  How is the interface between the abstraction layer\
    \ network and the\n      server network managed?\n"
- title: 10.1.  Managing the Abstraction Layer Network
  contents:
  - "10.1.  Managing the Abstraction Layer Network\n   Management of the abstraction\
    \ layer network differs from the client\n   and server networks because not all\
    \ of the links that are visible in\n   the TED are real links.  That is, it is\
    \ not possible to run\n   Operations, Administration, and Maintenance (OAM) on\
    \ the links that\n   constitute the potential of a link.\n   Other than that,\
    \ however, the management of the abstraction layer\n   network should be essentially\
    \ the same.  Routing and signaling\n   protocols can be run in the abstraction\
    \ layer (using out-of-band\n   channels for links that have not yet been established),\
    \ and a\n   centralized TED can be constructed and used to examine the\n   availability\
    \ and status of the links and nodes in the network.\n   Note that different deployment\
    \ models will place the \"ownership\" of\n   the abstraction layer network differently.\
    \  In some cases, the\n   abstraction layer network will be constructed by the\
    \ operator of the\n   server network and run by that operator as a service for\
    \ one or more\n   client networks.  In other cases, one or more server networks\
    \ will\n   present the potential of links to an abstraction layer network run\
    \ by\n   the operator of the client network.  And it is feasible that a\n   business\
    \ model could be built where a third-party operator manages\n   the abstraction\
    \ layer network, constructing it from the connectivity\n   available in multiple\
    \ server networks and facilitating connectivity\n   for multiple client networks.\n"
- title: 10.2.  Managing Interactions of Abstraction Layer and Client Networks
  contents:
  - "10.2.  Managing Interactions of Abstraction Layer and Client Networks\n   The\
    \ interaction between the client network and the abstraction layer\n   network\
    \ is a management task.  It might be automated (software\n   driven), or it might\
    \ require manual intervention.\n   This is a two-way interaction:\n   -  The client\
    \ network can express the need for additional\n      connectivity.  For example,\
    \ the client network may try, and fail,\n      to find a path across the client\
    \ network and may request\n      additional, specific connectivity (this is similar\
    \ to the\n      situation with the Virtual Network Topology Manager (VNTM)\n \
    \     [RFC5623]).  Alternatively, a more proactive client network\n      management\
    \ system may monitor traffic demands (current and\n      predicted), network usage,\
    \ and network \"hot spots\" and may request\n      changes in connectivity by\
    \ both releasing unused links and\n      requesting new links.\n   -  The abstraction\
    \ layer network can make links available to the\n      client network or can withdraw\
    \ them.  These actions can be in\n      response to requests from the client network\
    \ or can be driven by\n      processes within the abstraction layer (perhaps reorganizing\
    \ the\n      use of server network resources).  In any case, the presentation\n\
    \      of new links to the client network is heavily subject to policy,\n    \
    \  since this is both operationally key to the success of this\n      architecture\
    \ and the central plank of the commercial model\n      described in this document.\
    \  Such policies belong to the operator\n      of the abstraction layer network\
    \ and are expected to be fully\n      configurable.\n      Once the abstraction\
    \ layer network has decided to make a link\n      available to the client network,\
    \ it will install it at the link\n      end points (which are nodes in the client\
    \ network) such that it\n      appears and can be advertised as a link in the\
    \ client network.\n   In all cases, it is important that the operators of both\
    \ networks are\n   able to track the requests and responses, and the operator\
    \ of the\n   client network should be able to see which links in that network\
    \ are\n   \"real\" physical links and which links are presented by the\n   abstraction\
    \ layer network.\n"
- title: 10.3.  Managing Interactions of Abstraction Layer and Server Networks
  contents:
  - "10.3.  Managing Interactions of Abstraction Layer and Server Networks\n   The\
    \ interactions between the abstraction layer network and the server\n   network\
    \ are similar to those described in Section 10.2, but there is\n   a difference\
    \ in that the server network is more likely to offer up\n   connectivity and the\
    \ abstraction layer network is less likely to ask\n   for it.\n   That is, the\
    \ server network will, according to policy that may\n   include commercial relationships,\
    \ offer the abstraction layer network\n   a \"set\" of potential connectivity\
    \ that the abstraction layer network\n   can treat as links.  This server network\
    \ policy will include:\n   -  how much connectivity to offer\n   -  what level\
    \ of server network redundancy to include\n   -  how to support the use of the\
    \ abstract links\n   This process of offering links from the server network may\
    \ include a\n   mechanism to indicate which links have been pre-established in\
    \ the\n   server network and can include other properties, such as:\n   -  link-level\
    \ protection [RFC4202]\n   -  SRLGs and MSRLGs (see Appendix B.1)\n   -  mutual\
    \ exclusivity (see Appendix B.2)\n   The abstraction layer network needs a mechanism\
    \ to tell the server\n   network which links it is using.  This mechanism could\
    \ also include\n   the ability to request additional connectivity from the server\n\
    \   network, although it seems most likely that the server network will\n   already\
    \ have presented as much connectivity as it is physically\n   capable of, subject\
    \ to the constraints of policy.\n   Finally, the server network will need to confirm\
    \ the establishment of\n   connectivity, withdraw links if they are no longer\
    \ feasible, and\n   report failures.\n   Again, it is important that the operators\
    \ of both networks are able\n   to track the requests and responses, and the operator\
    \ of the server\n   network should be able to see which links are in use.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Security of signaling and routing protocols\
    \ is usually administered\n   and achieved within the boundaries of a domain.\
    \  Thus, and for\n   example, a domain with a GMPLS control plane [RFC3945] would\
    \ apply\n   the security mechanisms and considerations that are appropriate to\n\
    \   GMPLS [RFC5920].  Furthermore, domain-based security relies strongly\n   on\
    \ ensuring that control-plane messages are not allowed to enter the\n   domain\
    \ from outside.\n   In this context, additional security considerations arising\
    \ from this\n   document relate to the exchange of control-plane information between\n\
    \   domains.  Messages are passed between domains using control-plane\n   protocols\
    \ operating between peers that have predictable relationships\n   (for example,\
    \ UNI-C to UNI-N, between BGP-LS speakers, or between\n   peer domains).  Thus,\
    \ the security that needs to be given additional\n   attention for inter-domain\
    \ TE concentrates on authentication of\n   peers; assertion that messages have\
    \ not been tampered with; and, to a\n   lesser extent, protecting the content\
    \ of the messages from\n   inspection, since that might give away sensitive information\
    \ about\n   the networks.  The protocols described in Appendix A, which are\n\
    \   likely to provide the foundation for solutions to this architecture,\n   already\
    \ include such protection and also can be run over protected\n   transports such\
    \ as IPsec [RFC6071], Transport Layer Security (TLS)\n   [RFC5246], and the TCP\
    \ Authentication Option (TCP-AO) [RFC5925].\n   It is worth noting that the control\
    \ plane of the abstraction layer\n   network is likely to be out of band.  That\
    \ is, control-plane messages\n   will be exchanged over network links that are\
    \ not the links to which\n   they apply.  This models the facilities of GMPLS\
    \ (but not of\n   MPLS-TE), and the security mechanisms can be applied to the\
    \ protocols\n   operating in the out-of-band network.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [G.8080]   International Telecommunication Union,\
    \ \"Architecture for\n              the automatically switched optical network\"\
    , ITU-T\n              Recommendation G.8080/Y.1304, February 2012,\n        \
    \      <https://www.itu.int/rec/T-REC-G.8080-201202-I/en>.\n   [GMPLS-ENNI]\n\
    \              Bryskin, I., Ed., Doonan, W., Beeram, V., Ed., Drake, J.,\n   \
    \           Ed., Grammel, G., Paul, M., Kunze, R., Armbruster, F.,\n         \
    \     Margaria, C., Gonzalez de Dios, O., and D. Ceccarelli,\n              \"\
    Generalized Multiprotocol Label Switching (GMPLS)\n              External Network\
    \ Network Interface (E-NNI): Virtual Link\n              Enhancements for the\
    \ Overlay Model\", Work in Progress,\n              draft-beeram-ccamp-gmpls-enni-03,\
    \ September 2013.\n   [RFC2702]  Awduche, D., Malcolm, J., Agogbua, J., O'Dell,\
    \ M., and J.\n              McManus, \"Requirements for Traffic Engineering Over\
    \ MPLS\",\n              RFC 2702, DOI 10.17487/RFC2702, September 1999,\n   \
    \           <http://www.rfc-editor.org/info/rfc2702>.\n   [RFC3209]  Awduche,\
    \ D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and G. Swallow,\
    \ \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\", RFC 3209, DOI\
    \ 10.17487/RFC3209, December 2001,\n              <http://www.rfc-editor.org/info/rfc3209>.\n\
    \   [RFC3473]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n         \
    \     Switching (GMPLS) Signaling Resource ReserVation\n              Protocol-Traffic\
    \ Engineering (RSVP-TE) Extensions\",\n              RFC 3473, DOI 10.17487/RFC3473,\
    \ January 2003,\n              <http://www.rfc-editor.org/info/rfc3473>.\n   [RFC3630]\
    \  Katz, D., Kompella, K., and D. Yeung, \"Traffic Engineering\n             \
    \ (TE) Extensions to OSPF Version 2\", RFC 3630,\n              DOI 10.17487/RFC3630,\
    \ September 2003,\n              <http://www.rfc-editor.org/info/rfc3630>.\n \
    \  [RFC3945]  Mannie, E., Ed., \"Generalized Multi-Protocol Label\n          \
    \    Switching (GMPLS) Architecture\", RFC 3945,\n              DOI 10.17487/RFC3945,\
    \ October 2004,\n              <http://www.rfc-editor.org/info/rfc3945>.\n   [RFC4105]\
    \  Le Roux, J.-L., Ed., Vasseur, J.-P., Ed., and J. Boyle,\n              Ed.,\
    \ \"Requirements for Inter-Area MPLS Traffic\n              Engineering\", RFC\
    \ 4105, DOI 10.17487/RFC4105, June 2005,\n              <http://www.rfc-editor.org/info/rfc4105>.\n\
    \   [RFC4202]  Kompella, K., Ed., and Y. Rekhter, Ed., \"Routing\n           \
    \   Extensions in Support of Generalized Multi-Protocol Label\n              Switching\
    \ (GMPLS)\", RFC 4202, DOI 10.17487/RFC4202,\n              October 2005, <http://www.rfc-editor.org/info/rfc4202>.\n\
    \   [RFC4206]  Kompella, K. and Y. Rekhter, \"Label Switched Paths (LSP)\n   \
    \           Hierarchy with Generalized Multi-Protocol Label Switching\n      \
    \        (GMPLS) Traffic Engineering (TE)\", RFC 4206,\n              DOI 10.17487/RFC4206,\
    \ October 2005,\n              <http://www.rfc-editor.org/info/rfc4206>.\n   [RFC4208]\
    \  Swallow, G., Drake, J., Ishimatsu, H., and Y. Rekhter,\n              \"Generalized\
    \ Multiprotocol Label Switching (GMPLS)\n              User-Network Interface\
    \ (UNI): Resource ReserVation\n              Protocol-Traffic Engineering (RSVP-TE)\
    \ Support for the\n              Overlay Model\", RFC 4208, DOI 10.17487/RFC4208,\n\
    \              October 2005, <http://www.rfc-editor.org/info/rfc4208>.\n   [RFC4216]\
    \  Zhang, R., Ed., and J.-P. Vasseur, Ed., \"MPLS\n              Inter-Autonomous\
    \ System (AS) Traffic Engineering (TE)\n              Requirements\", RFC 4216,\
    \ DOI 10.17487/RFC4216,\n              November 2005, <http://www.rfc-editor.org/info/rfc4216>.\n\
    \   [RFC4271]  Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A\n       \
    \       Border Gateway Protocol 4 (BGP-4)\", RFC 4271,\n              DOI 10.17487/RFC4271,\
    \ January 2006,\n              <http://www.rfc-editor.org/info/rfc4271>.\n   [RFC4364]\
    \  Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks\
    \ (VPNs)\", RFC 4364, DOI 10.17487/RFC4364,\n              February 2006, <http://www.rfc-editor.org/info/rfc4364>.\n\
    \   [RFC4655]  Farrel, A., Vasseur, J.-P., and J. Ash, \"A Path\n            \
    \  Computation Element (PCE)-Based Architecture\", RFC 4655,\n              DOI\
    \ 10.17487/RFC4655, August 2006,\n              <http://www.rfc-editor.org/info/rfc4655>.\n\
    \   [RFC4726]  Farrel, A., Vasseur, J.-P., and A. Ayyangar, \"A Framework\n  \
    \            for Inter-Domain Multiprotocol Label Switching Traffic\n        \
    \      Engineering\", RFC 4726, DOI 10.17487/RFC4726,\n              November\
    \ 2006, <http://www.rfc-editor.org/info/rfc4726>.\n   [RFC4847]  Takeda, T., Ed.,\
    \ \"Framework and Requirements for Layer 1\n              Virtual Private Networks\"\
    , RFC 4847, DOI 10.17487/RFC4847,\n              April 2007, <http://www.rfc-editor.org/info/rfc4847>.\n\
    \   [RFC4874]  Lee, CY., Farrel, A., and S. De Cnodder, \"Exclude Routes -\n \
    \             Extension to Resource ReserVation Protocol-Traffic\n           \
    \   Engineering (RSVP-TE)\", RFC 4874, DOI 10.17487/RFC4874,\n              April\
    \ 2007, <http://www.rfc-editor.org/info/rfc4874>.\n   [RFC4920]  Farrel, A., Ed.,\
    \ Satyanarayana, A., Iwata, A., Fujita, N.,\n              and G. Ash, \"Crankback\
    \ Signaling Extensions for MPLS and\n              GMPLS RSVP-TE\", RFC 4920,\
    \ DOI 10.17487/RFC4920, July 2007,\n              <http://www.rfc-editor.org/info/rfc4920>.\n\
    \   [RFC5150]  Ayyangar, A., Kompella, K., Vasseur, JP., and A. Farrel,\n    \
    \          \"Label Switched Path Stitching with Generalized\n              Multiprotocol\
    \ Label Switching Traffic Engineering\n              (GMPLS TE)\", RFC 5150, DOI\
    \ 10.17487/RFC5150,\n              February 2008, <http://www.rfc-editor.org/info/rfc5150>.\n\
    \   [RFC5152]  Vasseur, JP., Ed., Ayyangar, A., Ed., and R. Zhang, \"A\n     \
    \         Per-Domain Path Computation Method for Establishing\n              Inter-Domain\
    \ Traffic Engineering (TE) Label Switched Paths\n              (LSPs)\", RFC 5152,\
    \ DOI 10.17487/RFC5152, February 2008,\n              <http://www.rfc-editor.org/info/rfc5152>.\n\
    \   [RFC5195]  Ould-Brahim, H., Fedyk, D., and Y. Rekhter, \"BGP-Based\n     \
    \         Auto-Discovery for Layer-1 VPNs\", RFC 5195,\n              DOI 10.17487/RFC5195,\
    \ June 2008,\n              <http://www.rfc-editor.org/info/rfc5195>.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5251]\
    \  Fedyk, D., Ed., Rekhter, Y., Ed., Papadimitriou, D.,\n              Rabbat,\
    \ R., and L. Berger, \"Layer 1 VPN Basic Mode\",\n              RFC 5251, DOI\
    \ 10.17487/RFC5251, July 2008,\n              <http://www.rfc-editor.org/info/rfc5251>.\n\
    \   [RFC5252]  Bryskin, I. and L. Berger, \"OSPF-Based Layer 1 VPN\n         \
    \     Auto-Discovery\", RFC 5252, DOI 10.17487/RFC5252,\n              July 2008,\
    \ <http://www.rfc-editor.org/info/rfc5252>.\n   [RFC5305]  Li, T. and H. Smit,\
    \ \"IS-IS Extensions for Traffic\n              Engineering\", RFC 5305, DOI 10.17487/RFC5305,\n\
    \              October 2008, <http://www.rfc-editor.org/info/rfc5305>.\n   [RFC5440]\
    \  Vasseur, JP., Ed., and JL. Le Roux, Ed., \"Path Computation\n             \
    \ Element (PCE) Communication Protocol (PCEP)\", RFC 5440,\n              DOI\
    \ 10.17487/RFC5440, March 2009,\n              <http://www.rfc-editor.org/info/rfc5440>.\n\
    \   [RFC5441]  Vasseur, JP., Ed., Zhang, R., Bitar, N., and JL. Le Roux,\n   \
    \           \"A Backward-Recursive PCE-Based Computation (BRPC)\n            \
    \  Procedure to Compute Shortest Constrained Inter-Domain\n              Traffic\
    \ Engineering Label Switched Paths\", RFC 5441,\n              DOI 10.17487/RFC5441,\
    \ April 2009,\n              <http://www.rfc-editor.org/info/rfc5441>.\n   [RFC5523]\
    \  Berger, L., \"OSPFv3-Based Layer 1 VPN Auto-Discovery\",\n              RFC\
    \ 5523, DOI 10.17487/RFC5523, April 2009,\n              <http://www.rfc-editor.org/info/rfc5523>.\n\
    \   [RFC5553]  Farrel, A., Ed., Bradford, R., and JP. Vasseur, \"Resource\n  \
    \            Reservation Protocol (RSVP) Extensions for Path Key\n           \
    \   Support\", RFC 5553, DOI 10.17487/RFC5553, May 2009,\n              <http://www.rfc-editor.org/info/rfc5553>.\n\
    \   [RFC5623]  Oki, E., Takeda, T., Le Roux, JL., and A. Farrel,\n           \
    \   \"Framework for PCE-Based Inter-Layer MPLS and GMPLS\n              Traffic\
    \ Engineering\", RFC 5623, DOI 10.17487/RFC5623,\n              September 2009,\
    \ <http://www.rfc-editor.org/info/rfc5623>.\n   [RFC5920]  Fang, L., Ed., \"Security\
    \ Framework for MPLS and GMPLS\n              Networks\", RFC 5920, DOI 10.17487/RFC5920,\
    \ July 2010,\n              <http://www.rfc-editor.org/info/rfc5920>.\n   [RFC5925]\
    \  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n              Authentication\
    \ Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June 2010, <http://www.rfc-editor.org/info/rfc5925>.\n\
    \   [RFC6005]  Berger, L. and D. Fedyk, \"Generalized MPLS (GMPLS) Support\n \
    \             for Metro Ethernet Forum and G.8011 User Network Interface\n   \
    \           (UNI)\", RFC 6005, DOI 10.17487/RFC6005, October 2010,\n         \
    \     <http://www.rfc-editor.org/info/rfc6005>.\n   [RFC6071]  Frankel, S. and\
    \ S. Krishnan, \"IP Security (IPsec) and\n              Internet Key Exchange\
    \ (IKE) Document Roadmap\", RFC 6071,\n              DOI 10.17487/RFC6071, February\
    \ 2011,\n              <http://www.rfc-editor.org/info/rfc6071>.\n   [RFC6107]\
    \  Shiomoto, K., Ed., and A. Farrel, Ed., \"Procedures for\n              Dynamically\
    \ Signaled Hierarchical Label Switched Paths\",\n              RFC 6107, DOI 10.17487/RFC6107,\
    \ February 2011,\n              <http://www.rfc-editor.org/info/rfc6107>.\n  \
    \ [RFC6805]  King, D., Ed., and A. Farrel, Ed., \"The Application of the\n   \
    \           Path Computation Element Architecture to the Determination\n     \
    \         of a Sequence of Domains in MPLS and GMPLS\", RFC 6805,\n          \
    \    DOI 10.17487/RFC6805, November 2012,\n              <http://www.rfc-editor.org/info/rfc6805>.\n\
    \   [RFC6827]  Malis, A., Ed., Lindem, A., Ed., and D. Papadimitriou,\n      \
    \        Ed., \"Automatically Switched Optical Network (ASON)\n              Routing\
    \ for OSPFv2 Protocols\", RFC 6827,\n              DOI 10.17487/RFC6827, January\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6827>.\n   [RFC6996]\
    \  Mitchell, J., \"Autonomous System (AS) Reservation for\n              Private\
    \ Use\", BCP 6, RFC 6996, DOI 10.17487/RFC6996,\n              July 2013, <http://www.rfc-editor.org/info/rfc6996>.\n\
    \   [RFC7399]  Farrel, A. and D. King, \"Unanswered Questions in the Path\n  \
    \            Computation Element Architecture\", RFC 7399,\n              DOI\
    \ 10.17487/RFC7399, October 2014,\n              <http://www.rfc-editor.org/info/rfc7399>.\n\
    \   [RFC7579]  Bernstein, G., Ed., Lee, Y., Ed., Li, D., Imajuku, W., and\n  \
    \            J. Han, \"General Network Element Constraint Encoding for\n     \
    \         GMPLS-Controlled Networks\", RFC 7579,\n              DOI 10.17487/RFC7579,\
    \ June 2015,\n              <http://www.rfc-editor.org/info/rfc7579>.\n   [RFC7580]\
    \  Zhang, F., Lee, Y., Han, J., Bernstein, G., and Y. Xu,\n              \"OSPF-TE\
    \ Extensions for General Network Element\n              Constraints\", RFC 7580,\
    \ DOI 10.17487/RFC7580, June 2015,\n              <http://www.rfc-editor.org/info/rfc7580>.\n\
    \   [RFC7752]  Gredler, H., Ed., Medved, J., Previdi, S., Farrel, A., and\n  \
    \            S. Ray, \"North-Bound Distribution of Link-State and\n          \
    \    Traffic Engineering (TE) Information Using BGP\", RFC 7752,\n           \
    \   DOI 10.17487/RFC7752, March 2016,\n              <http://www.rfc-editor.org/info/rfc7752>.\n\
    \   [RSVP-TE-EXCL]\n              Ali, Z., Ed., Swallow, G., Ed., Zhang, F., Ed.,\
    \ and D.\n              Beller, Ed., \"Resource ReserVation Protocol-Traffic\n\
    \              Engineering (RSVP-TE) Path Diversity using Exclude Route\",\n \
    \             Work in Progress, draft-ietf-teas-lsp-diversity-05,\n          \
    \    June 2016.\n   [RSVP-TE-EXT]\n              Zhang, F., Ed., Gonzalez de Dios,\
    \ O., Ed., Hartley, M.,\n              Ali, Z., and C. Margaria, \"RSVP-TE Extensions\
    \ for\n              Collecting SRLG Information\", Work in Progress,\n      \
    \        draft-ietf-teas-rsvp-te-srlg-collect-06, May 2016.\n   [RSVP-TE-METRIC]\n\
    \              Ali, Z., Swallow, G., Filsfils, C., Hartley, M., Kumaki,\n    \
    \          K., and R. Kunze, \"Resource ReserVation Protocol-Traffic\n       \
    \       Engineering (RSVP-TE) extension for recording TE Metric of\n         \
    \     a Label Switched Path\", Work in Progress,\n              draft-ietf-teas-te-metric-recording-04,\
    \ March 2016.\n"
- title: Appendix A.  Existing Work
  contents:
  - "Appendix A.  Existing Work\n   This appendix briefly summarizes relevant existing\
    \ work that is used\n   to route TE paths across multiple domains.  It is non-normative.\n"
- title: A.1.  Per-Domain Path Computation
  contents:
  - "A.1.  Per-Domain Path Computation\n   The mechanism for per-domain path establishment\
    \ is described in\n   [RFC5152], and its applicability is discussed in [RFC4726].\
    \  In\n   summary, this mechanism assumes that each domain entry point is\n  \
    \ responsible for computing the path across the domain but that details\n   regarding\
    \ the path in the next domain are left to the next domain\n   entry point.  The\
    \ computation may be performed directly by the entry\n   point or may be delegated\
    \ to a computation server.\n   This basic mode of operation can run into many\
    \ of the issues\n   described alongside the use cases in Section 2.  However,\
    \ in practice\n   it can be used effectively, with a little operational guidance.\n\
    \   For example, RSVP-TE [RFC3209] includes the concept of a \"loose hop\"\n \
    \  in the explicit path that is signaled.  This allows the original\n   request\
    \ for an LSP to list the domains or even domain entry points to\n   include on\
    \ the path.  Thus, in the example in Figure 1, the source\n   can be told to use\
    \ interconnection x2.  Then, the source computes the\n   path from itself to x2\
    \ and initiates the signaling.  When the\n   signaling message reaches Domain\
    \ Z, the entry point to the domain\n   computes the remaining path to the destination\
    \ and continues the\n   signaling.\n   Another alternative suggested in [RFC5152]\
    \ is to make TE routing\n   attempt to follow inter-domain IP routing.  Thus,\
    \ in the example\n   shown in Figure 2, the source would examine the BGP routing\n\
    \   information to determine the correct interconnection point for\n   forwarding\
    \ IP packets and would use that to compute and then signal a\n   path for Domain\
    \ A.  Each domain in turn would apply the same approach\n   so that the path is\
    \ progressively computed and signaled domain by\n   domain.\n   Although the per-domain\
    \ approach has many issues and drawbacks in\n   terms of achieving optimal (or,\
    \ indeed, any) paths, it has been the\n   mainstay of inter-domain LSP setup to\
    \ date.\n"
- title: A.2.  Crankback
  contents:
  - "A.2.  Crankback\n   Crankback addresses one of the main issues with per-domain\
    \ path\n   computation: What happens when an initial path is selected that\n \
    \  cannot be completed toward the destination?  For example, what\n   happens\
    \ if, in Figure 2, the source attempts to route the path\n   through interconnection\
    \ x2 but Domain C does not have the right TE\n   resources or connectivity to\
    \ route the path further?\n   Crankback for MPLS-TE and GMPLS networks is described\
    \ in [RFC4920]\n   and is based on a concept similar to the Acceptable Label Set\n\
    \   mechanism described for GMPLS signaling in [RFC3473].  When a node\n   (i.e.,\
    \ a domain entry point) is unable to compute a path further\n   across the domain,\
    \ it returns an error message in the signaling\n   protocol that states where\
    \ the blockage occurred (link identifier,\n   node identifier, domain identifier,\
    \ etc.) and gives some clues about\n   what caused the blockage (bad choice of\
    \ label, insufficient bandwidth\n   available, etc.).  This information allows\
    \ a previous computation\n   point to select an alternative path, or to aggregate\
    \ crankback\n   information and return it upstream to a previous computation point.\n\
    \   Crankback is a very powerful mechanism and can be used to find an\n   end-to-end\
    \ path in a multi-domain network if one exists.\n   On the other hand, crankback\
    \ can be quite resource-intensive, as\n   signaling messages and path setup attempts\
    \ may \"wander around\" in the\n   network, attempting to find the correct path\
    \ for a long time.  Since\n   (1) RSVP-TE signaling ties up network resources\
    \ for partially\n   established LSPs, (2) network conditions may be in flux, and\
    \ (3) most\n   particularly, LSP setup within well-known time limits is highly\n\
    \   desirable, crankback is not a popular mechanism.\n   Furthermore, even if\
    \ crankback can always find an end-to-end path, it\n   does not guarantee that\
    \ the optimal path will be found.  (Note that\n   there have been some academic\
    \ proposals to use signaling-like\n   techniques to explore the whole network\
    \ in order to find optimal\n   paths, but these tend to place even greater burdens\
    \ on network\n   processing.)\n"
- title: A.3.  Path Computation Element
  contents:
  - "A.3.  Path Computation Element\n   The Path Computation Element (PCE) is introduced\
    \ in [RFC4655].  It is\n   an abstract functional entity that computes paths.\
    \  Thus, in the\n   example of per-domain path computation (see Appendix A.1),\
    \ both the\n   source node and each domain entry point are PCEs.  On the other\
    \ hand,\n   the PCE can also be realized as a separate network element (a server)\n\
    \   to which computation requests can be sent using the Path Computation\n   Element\
    \ Communication Protocol (PCEP) [RFC5440].\n   Each PCE is responsible for computations\
    \ within a domain and has\n   visibility of the attributes within that domain.\
    \  This immediately\n   enables per-domain path computation with the opportunity\
    \ to offload\n   complex, CPU-intensive, or memory-intensive computation functions\n\
    \   from routers in the network.  But the use of PCEs in this way\n   does not\
    \ solve any of the problems articulated in Appendices A.1\n   and A.2.\n   Two\
    \ significant mechanisms for cooperation between PCEs have been\n   described.\
    \  These mechanisms are intended to specifically address the\n   problems of computing\
    \ optimal end-to-end paths in multi-domain\n   environments.\n   -  The Backward-Recursive\
    \ PCE-Based Computation (BRPC) mechanism\n      [RFC5441] involves cooperation\
    \ between the set of PCEs along the\n      inter-domain path.  Each one computes\
    \ the possible paths from the\n      domain entry point (or source node) to the\
    \ domain exit point (or\n      destination node) and shares the information with\
    \ its upstream\n      neighbor PCE, which is able to build a tree of possible\
    \ paths\n      rooted at the destination.  The PCE in the source domain can\n\
    \      select the optimal path.\n      BRPC is sometimes described as \"crankback\
    \ at computation time\".\n      It is capable of determining the optimal path\
    \ in a multi-domain\n      network but depends on knowing the domain that contains\
    \ the\n      destination node.  Furthermore, the mechanism can become quite\n\
    \      complicated and can involve a lot of data in a mesh of\n      interconnected\
    \ domains.  Thus, BRPC is most often proposed for a\n      simple mesh of domains\
    \ and specifically for a path that will cross\n      a known sequence of domains,\
    \ but where there may be a choice of\n      domain interconnections.  In this\
    \ way, BRPC would only be applied\n      to Figure 2 if a decision had been made\
    \ (externally) to traverse\n      Domain C rather than Domain D (notwithstanding\
    \ that it could\n      functionally be used to make that choice itself), but BRPC\
    \ could\n      be used very effectively to select between interconnections x1\
    \ and\n      x2 in Figure 1.\n   -  The Hierarchical PCE (H-PCE) [RFC6805] mechanism\
    \ offers a parent\n      PCE that is responsible for navigating a path across\
    \ the domain\n      mesh and for coordinating intra-domain computations by the\
    \ child\n      PCEs responsible for each domain.  This approach makes computing\n\
    \      an end-to-end path across a mesh of domains far more tractable.\n     \
    \ However, it still leaves unanswered the issue of determining the\n      location\
    \ of the destination (i.e., discovering the destination\n      domain) as described\
    \ in Section 2.1.  Furthermore, it raises the\n      question of who operates\
    \ the parent PCE, especially in networks\n      where the domains are under different\
    \ administrative and\n      commercial control.\n   It should also be noted that\
    \ [RFC5623] discusses how PCEs are used in\n   a multi-layer network with coordination\
    \ between PCEs operating at\n   each network layer.  Further issues and considerations\
    \ regarding the\n   use of PCEs can be found in [RFC7399].\n"
- title: A.4.  GMPLS UNI and Overlay Networks
  contents:
  - "A.4.  GMPLS UNI and Overlay Networks\n   [RFC4208] defines the GMPLS User-Network\
    \ Interface (UNI) to present a\n   routing boundary between an overlay (client)\
    \ network and the server\n   network, i.e., the client-server interface.  In the\
    \ client network,\n   the nodes connected directly to the server network are known\
    \ as edge\n   nodes, while the nodes in the server network are called core nodes.\n\
    \   In the overlay model defined by [RFC4208], the core nodes act as a\n   closed\
    \ system and the edge nodes do not participate in the routing\n   protocol instance\
    \ that runs among the core nodes.  Thus, the UNI\n   allows access to, and limited\
    \ control of, the core nodes by edge\n   nodes that are unaware of the topology\
    \ of the core nodes.  This\n   respects the operational and layer boundaries while\
    \ scaling the\n   network.\n   [RFC4208] does not define any routing protocol\
    \ extension for the\n   interaction between core and edge nodes but allows for\
    \ the exchange\n   of reachability information between them.  In terms of a VPN,\
    \ the\n   client network can be considered as the customer network comprised of\n\
    \   a number of disjoint sites, and the edge nodes match the VPN CE\n   nodes.\
    \  Similarly, the provider network in the VPN model is\n   equivalent to the server\
    \ network.\n   [RFC4208] is, therefore, a signaling-only solution that allows\
    \ edge\n   nodes to request connectivity across the server network and leaves\n\
    \   the server network to select the paths for the LSPs as they traverse\n   the\
    \ core nodes (setting up hierarchical LSPs if necessitated by the\n   technology).\
    \  This solution is supplemented by a number of signaling\n   extensions, such\
    \ as [RFC4874], [RFC5553], [RSVP-TE-EXCL],\n   [RSVP-TE-EXT], and [RSVP-TE-METRIC],\
    \ to give the edge node more\n   control over the path within the server network\
    \ and by allowing the\n   edge nodes to supply additional constraints on the path\
    \ used in the\n   server network.  Nevertheless, in this UNI/overlay model, the\
    \ edge\n   node has limited information regarding precisely what LSPs could be\n\
    \   set up across the server network and what TE services (diverse routes\n  \
    \ for end-to-end protection, end-to-end bandwidth, etc.) can be\n   supported.\n"
- title: A.5.  Layer 1 VPN
  contents:
  - "A.5.  Layer 1 VPN\n   A Layer 1 VPN (L1VPN) is a service offered by a Layer 1\
    \ server\n   network to provide Layer 1 connectivity (Time-Division Multiplexing\n\
    \   (TDM), Lambda Switch Capable (LSC)) between two or more customer\n   networks\
    \ in an overlay service model [RFC4847].\n   As in the UNI case, the customer\
    \ edge has some control over the\n   establishment and type of connectivity. \
    \ In the L1VPN context, three\n   different service models have been defined,\
    \ classified by the\n   semantics of information exchanged over the customer interface:\
    \ the\n   management-based model, the signaling-based (a.k.a. basic) service\n\
    \   model, and the signaling and routing (a.k.a. enhanced) service model.\n  \
    \ In the management-based model, all edge-to-edge connections are\n   set up using\
    \ configuration and management tools.  This is not a\n   dynamic control-plane\
    \ solution and need not concern us here.\n   In the signaling-based (basic) service\
    \ model [RFC5251], the CE-PE\n   interface allows only for signaling message exchange,\
    \ and the\n   provider network does not export any routing information about the\n\
    \   server network.  VPN membership is known a priori (presumably through\n  \
    \ configuration) or is discovered using a routing protocol [RFC5195]\n   [RFC5252]\
    \ [RFC5523], as is the relationship between CE nodes and\n   ports on the PE.\
    \  This service model is much in line with GMPLS UNI\n   as defined in [RFC4208].\n\
    \   In the signaling and routing (enhanced) service model, there is an\n   additional\
    \ limited exchange of routing information over the CE-PE\n   interface between\
    \ the provider network and the customer network.  The\n   enhanced model considers\
    \ four different types of service models,\n   namely the overlay extension, virtual\
    \ node, virtual link, and per-VPN\n   service models.  All of these represent\
    \ particular cases of the TE\n   information aggregation and representation.\n"
- title: A.6.  Policy and Link Advertisement
  contents:
  - "A.6.  Policy and Link Advertisement\n   Inter-domain networking relies on policy\
    \ and management input to\n   coordinate the allocation of resources under different\
    \ administrative\n   control.  [RFC5623] introduces a functional component called\
    \ the VNTM\n   for this purpose.\n   An important companion to this function is\
    \ determining how\n   connectivity across the abstraction layer network is made\
    \ available\n   as a TE link in the client network.  Obviously, if the connectivity\n\
    \   is established using management intervention, the consequent client\n   network\
    \ TE link can also be configured manually.  However, if\n   connectivity from\
    \ client edge to client edge is achieved using\n   dynamic signaling, then there\
    \ is need for the end points to exchange\n   the link properties that they should\
    \ advertise within the client\n   network, and in the case of support for more\
    \ than one client network,\n   it will be necessary to indicate which client network\
    \ or networks can\n   use the link.  This capability it provided in [RFC6107].\n"
- title: Appendix B.  Additional Features
  contents:
  - "Appendix B.  Additional Features\n   This appendix describes additional features\
    \ that may be desirable and\n   that can be achieved within this architecture.\
    \  It is non-normative.\n"
- title: B.1.  Macro Shared Risk Link Groups
  contents:
  - "B.1.  Macro Shared Risk Link Groups\n   Network links often share fate with one\
    \ or more other links.  That\n   is, a scenario that may cause a link to fail\
    \ could cause one or more\n   other links to fail.  This may occur, for example,\
    \ if the links are\n   supported by the same fiber bundle, or if some links are\
    \ routed down\n   the same duct or in a common piece of infrastructure such as\
    \ a\n   bridge.  A common way to identify the links that may share fate is to\n\
    \   label them as belonging to a Shared Risk Link Group (SRLG) [RFC4202].\n  \
    \ TE links created from LSPs in lower layers may also share fate, and\n   it can\
    \ be hard for a client network to know about this problem\n   because it does\
    \ not know the topology of the server network or the\n   path of the server network\
    \ LSPs that are used to create the links in\n   the client network.\n   For example,\
    \ looking at the example used in Section 4.2.3 and\n   considering the two abstract\
    \ links S1-S3 and S1-S9, there is no way\n   for the client network to know whether\
    \ links C2-C0 and C2-C3 share\n   fate.  Clearly, if the client layer uses these\
    \ links to provide a\n   link-diverse end-to-end protection scheme, it needs to\
    \ know that the\n   links actually share a piece of network infrastructure (the\
    \ server\n   network link S1-S2).\n   Per [RFC4202], an SRLG represents a shared\
    \ physical network resource\n   upon which the normal functioning of a link depends.\
    \  Multiple SRLGs\n   can be identified and advertised for every TE link in a\
    \ network.\n   However, this can produce a scalability problem in a multi-layer\n\
    \   network that equates to advertising in the client network the server\n   network\
    \ route of each TE link.\n   Macro SRLGs (MSRLGs) address this scaling problem\
    \ and are a form of\n   abstraction performed at the same time that the abstract\
    \ links are\n   derived.  In this way, links that actually share resources in\
    \ the\n   server network are advertised as having the same MSRLG, rather than\n\
    \   advertising each SRLG for each resource on each path in the server\n   network.\
    \  This saving is possible because the abstract links are\n   formulated on behalf\
    \ of the server network by a central management\n   agency that is aware of all\
    \ of the link abstractions being offered.\n   It may be noted that a less optimal\
    \ alternative path for the abstract\n   link S1-S9 exists in the server network\
    \ (S1-S4-S7-S8-S9).  It would\n   be possible for the client network request for\
    \ C2-C0 connectivity to\n   also ask that the path be maximally disjoint from\
    \ path C2-C3.\n   Although nothing can be done about the shared link C2-S1, the\n\
    \   abstraction layer could make a request to use link S1-S9 in a way\n   that\
    \ is diverse from the use of link S1-S3, and this request could be\n   honored\
    \ if the server network policy allows it.\n   Note that SRLGs and MSRLGs may be\
    \ very hard to describe in the case\n   of multiple server networks because the\
    \ abstraction points will not\n   know whether the resources in the various server\
    \ layers share\n   physical locations.\n"
- title: B.2.  Mutual Exclusivity
  contents:
  - "B.2.  Mutual Exclusivity\n   As noted in the discussion of Figure 13, it is possible\
    \ that some\n   abstraction layer links cannot be used at the same time.  This\
    \ arises\n   when the potentiality of the links is indicated by the server\n \
    \  network, but the use of the links would actually compete for server\n   network\
    \ resources.  Referring to Figure 13, this situation would\n   arise when both\
    \ link S1-S3 and link S7-S9 are used to carry LSPs: in\n   that case, link S1-S9\
    \ could no longer be used.\n   Such a situation need not be an issue when client-edge-to-client-edge\n\
    \   LSPs are set up one by one, because the use of one abstraction layer\n   link\
    \ and the corresponding use of server network resources will cause\n   the server\
    \ network to withdraw the availability of the other\n   abstraction layer links,\
    \ and these will become unavailable for\n   further abstraction layer path computations.\n\
    \   Furthermore, in deployments where abstraction layer links are only\n   presented\
    \ as available after server network LSPs have been\n   established to support\
    \ them, the problem is unlikely to exist.\n   However, when the server network\
    \ is constrained but chooses to\n   advertise the potential of multiple abstraction\
    \ layer links even\n   though they compete for resources, and when multiple client-edge-to-\n\
    \   client-edge LSPs are computed simultaneously (perhaps to provide\n   protection\
    \ services), there may be contention for server network\n   resources.  In the\
    \ case where protected abstraction layer LSPs are\n   being established, this\
    \ situation would be avoided through the use of\n   SRLGs and/or MSRLGs, since\
    \ the two abstraction layer links that\n   compete for server network resources\
    \ must also fate-share across\n   those resources.  But in the case where the\
    \ multiple client-edge-to-\n   client-edge LSPs do not care about fate sharing,\
    \ it may be necessary\n   to flag the mutually exclusive links in the abstraction\
    \ layer TED so\n   that path computation can avoid accidentally attempting to\
    \ utilize\n   two of a set of such links at the same time.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Igor Bryskin for useful discussions in the early\
    \ stages of\n   this work and to Gert Grammel for discussions on the extent of\n\
    \   aggregation in abstract nodes and links.\n   Thanks to Deborah Brungard, Dieter\
    \ Beller, Dhruv Dhody, Vallinayakam\n   Somasundaram, Hannes Gredler, Stewart\
    \ Bryant, Brian Carpenter, and\n   Hilarie Orman for review and input.\n   Particular\
    \ thanks to Vishnu Pavan Beeram for detailed discussions and\n   white-board scribbling\
    \ that made many of the ideas in this document\n   come to life.\n   Text in Section\
    \ 4.2.3 is freely adapted from the work of Igor\n   Bryskin, Wes Doonan, Vishnu\
    \ Pavan Beeram, John Drake, Gert Grammel,\n   Manuel Paul, Ruediger Kunze, Friedrich\
    \ Armbruster, Cyril Margaria,\n   Oscar Gonzalez de Dios, and Daniele Ceccarelli\
    \ in [GMPLS-ENNI], for\n   which the authors of this document express their thanks.\n"
- title: Contributors
  contents:
  - "Contributors\n   Gert Grammel\n   Juniper Networks\n   Email: ggrammel@juniper.net\n\
    \   Vishnu Pavan Beeram\n   Juniper Networks\n   Email: vbeeram@juniper.net\n\
    \   Oscar Gonzalez de Dios\n   Email: ogondio@tid.es\n   Fatai Zhang\n   Email:\
    \ zhangfatai@huawei.com\n   Zafar Ali\n   Email: zali@cisco.com\n   Rajan Rao\n\
    \   Email: rrao@infinera.com\n   Sergio Belotti\n   Email: sergio.belotti@alcatel-lucent.com\n\
    \   Diego Caviglia\n   Email: diego.caviglia@ericsson.com\n   Jeff Tantsura\n\
    \   Email: jeff.tantsura@ericsson.com\n   Khuzema Pithewan\n   Email: kpithewan@infinera.com\n\
    \   Cyril Margaria\n   Email: cyril.margaria@googlemail.com\n   Victor Lopez\n\
    \   Email: vlopez@tid.es\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adrian Farrel (editor)\n   Juniper Networks\n   Email:\
    \ adrian@olddog.co.uk\n   John Drake\n   Juniper Networks\n   Email: jdrake@juniper.net\n\
    \   Nabil Bitar\n   Nokia\n   Email: nbitar40@gmail.com\n   George Swallow\n \
    \  Cisco Systems, Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n\
    \   Email: swallow@cisco.com\n   Daniele Ceccarelli\n   Ericsson\n   Via A. Negrone\
    \ 1/A\n   Genova - Sestri Ponente\n   Italy\n   Email: daniele.ceccarelli@ericsson.com\n\
    \   Xian Zhang\n   Huawei Technologies\n   Email: zhang.xian@huawei.com\n"
