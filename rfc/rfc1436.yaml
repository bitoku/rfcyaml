- title: __initial_text__
  contents:
  - "                      The Internet Gopher Protocol\n         (a distributed document\
    \ search and retrieval protocol)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Gopher protocol is designed for distributed document\n\
    \   search and retrieval.  This document describes the protocol, lists\n   some\
    \ of the implementations currently available, and has an overview\n   of how to\
    \ implement new client and server applications.  This\n   document is adapted\
    \ from the basic Internet Gopher protocol document\n   first issued by the Microcomputer\
    \ Center at the University of\n   Minnesota in 1991.\n"
- title: Introduction
  contents:
  - "Introduction\n   gopher  n.  1. Any of various short tailed, burrowing mammals\
    \ of the\n   family Geomyidae, of North America.  2. (Amer. colloq.) Native or\n\
    \   inhabitant of Minnesota: the Gopher State.  3. (Amer. colloq.) One\n   who\
    \ runs errands, does odd-jobs, fetches or delivers documents for\n   office staff.\
    \  4. (computer tech.) software following a simple\n   protocol for burrowing\
    \ through a TCP/IP internet.\n   The Internet Gopher protocol and software follow\
    \ a client-server\n   model.  This protocol assumes a reliable data stream; TCP\
    \ is assumed.\n   Gopher servers should listen on port 70 (port 70 is assigned\
    \ to\n   Internet Gopher by IANA).  Documents reside on many autonomous\n   servers\
    \ on the Internet.  Users run client software on their desktop\n   systems, connecting\
    \ to a server and sending the server a selector (a\n   line of text, which may\
    \ be empty) via a TCP connection at a well-\n   known port.  The server responds\
    \ with a block of text terminated by a\n   period on a line by itself and closes\
    \ the connection.  No state is\n   retained by the server.\n   While documents\
    \ (and services) reside on many servers, Gopher client\n   software presents users\
    \ with a hierarchy of items and directories\n   much like a file system.  The\
    \ Gopher interface is designed to\n   resemble a file system since a file system\
    \ is a good model for\n   organizing documents and services; the user sees what\
    \ amounts to one\n   big networked information system containing primarily document\
    \ items,\n   directory items, and search items (the latter allowing searches for\n\
    \   documents across subsets of the information base).\n   Servers return either\
    \ directory lists or documents.  Each item in a\n   directory is identified by\
    \ a type (the kind of object the item is),\n   user-visible name (used to browse\
    \ and select from listings), an\n   opaque selector string (typically containing\
    \ a pathname used by the\n   destination host to locate the desired object), a\
    \ host name (which\n   host to contact to obtain this item), and an IP port number\
    \ (the port\n   at which the server process listens for connections). The user\
    \ only\n   sees the user-visible name.  The client software can locate and\n \
    \  retrieve any item by the trio of selector, hostname, and port.\n   To use a\
    \ search item, the client submits a query to a special kind of\n   Gopher server:\
    \ a search server.  In this case, the client sends the\n   selector string (if\
    \ any) and the list of words to be matched. The\n   response yields \"virtual\
    \ directory listings\" that contain items\n   matching the search criteria.\n\
    \   Gopher servers and clients exist for all popular platforms.  Because\n   the\
    \ protocol is so sparse and simple, writing servers or clients is\n   quick and\
    \ straightforward.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet Gopher protocol is designed primarily to act\
    \ as a\n   distributed document delivery system.  While documents (and services)\n\
    \   reside on many servers, Gopher client software presents users with a\n   hierarchy\
    \ of items and directories much like a file system.  In fact,\n   the Gopher interface\
    \ is designed to resemble a file system since a\n   file system is a good model\
    \ for locating documents and services.  Why\n   model a campus-wide information\
    \ system after a file system?  Several\n   reasons:\n      (a) A hierarchical\
    \ arrangement of information is familiar to many\n      users.  Hierarchical directories\
    \ containing items (such as\n      documents, servers, and subdirectories) are\
    \ widely used in\n      electronic bulletin boards and other campus-wide information\n\
    \      systems. People who access a campus-wide information server will\n    \
    \  expect some sort of hierarchical organization to the information\n      presented.\n\
    \      (b) A file-system style hierarchy can be expressed in a simple\n      syntax.\
    \  The syntax used for the internet Gopher protocol is\n      easily understandable,\
    \ and was designed to make debugging servers\n      and clients easy.  You can\
    \ use Telnet to simulate an internet\n      Gopher client's requests and observe\
    \ the responses from a server.\n      Special purpose software tools are not required.\
    \  By keeping the\n      syntax of the pseudo-file system client/server protocol\
    \ simple, we\n      can also achieve better performance for a very common user\n\
    \      activity: browsing through the directory hierarchy.\n      (c) Since Gopher\
    \ originated in a University setting, one of the\n      goals was for departments\
    \ to have the option of publishing\n      information from their inexpensive desktop\
    \ machines, and since\n      much of the information can be presented as simple\
    \ text files\n      arranged in directories, a protocol modeled after a file system\n\
    \      has immediate utility.  Because there can be a direct mapping from\n  \
    \    the file system on the user's desktop machine to the directory\n      structure\
    \ published via the Gopher protocol, the problem of\n      writing server software\
    \ for slow desktop systems is minimized.\n      (d) A file system metaphor is\
    \ extensible.  By giving a \"type\"\n      attribute to items in the pseudo-file\
    \ system, it is possible to\n      accommodate documents other than simple text\
    \ documents.  Complex\n      database services can be handled as a separate type\
    \ of item.  A\n      file-system metaphor does not rule out search or database-style\n\
    \      queries for access to documents.  A search-server type is also\n      defined\
    \ in this pseudo-file system.  Such servers return \"virtual\n      directories\"\
    \ or list of documents matching user specified\n      criteria.\n"
- title: 2.  The internet Gopher Model
  contents:
  - "2.  The internet Gopher Model\n   A detailed BNF rendering of the internet Gopher\
    \ syntax is available\n   in the appendix...but a close reading of the appendix\
    \ may not be\n   necessary to understand the internet Gopher protocol.\n   In\
    \ essence, the Gopher protocol consists of a client connecting to a\n   server\
    \ and sending the server a selector (a line of text, which may\n   be empty) via\
    \ a TCP connection.  The server responds with a block of\n   text terminated with\
    \ a period on a line by itself, and closes the\n   connection.  No state is retained\
    \ by the server between transactions\n   with a client. The simple nature of the\
    \ protocol stems from the need\n   to implement servers and clients for the slow,\
    \ smaller desktop\n   computers (1 MB Macs and DOS machines), quickly, and efficiently.\n\
    \   Below is a simple example of a client/server interaction; more\n   complex\
    \ interactions are dealt with later.  Assume that a \"well-\n   known\" Gopher\
    \ server (this may be duplicated, details are discussed\n   later) listens at\
    \ a well known port for the campus (much like a\n   domain-name server).  The\
    \ only configuration information the client\n   software retains is this server's\
    \ name and port number (in this\n   example that machine is rawBits.micro.umn.edu\
    \ and the port 70). In\n   the example below the F character denotes the TAB character.\n\
    \ Client:          {Opens connection to rawBits.micro.umn.edu at port 70}\n Server:\
    \          {Accepts connection but says nothing}\n Client: <CR><LF> {Sends an\
    \ empty line: Meaning \"list what you have\"}\n Server:          {Sends a series\
    \ of lines, each ending with CR LF}\n 0About internet GopherFStuff:About usFrawBits.micro.umn.eduF70\n\
    \ 1Around University of MinnesotaFZ,5692,AUMFunderdog.micro.umn.eduF70\n 1Microcomputer\
    \ News & PricesFPrices/Fpserver.bookstore.umn.eduF70\n 1Courses, Schedules, CalendarsFFevents.ais.umn.eduF9120\n\
    \ 1Student-Staff DirectoriesFFuinfo.ais.umn.eduF70\n 1Departmental PublicationsFStuff:DP:FrawBits.micro.umn.eduF70\n\
    \                    {.....etc.....}\n .                  {Period on a line by\
    \ itself}\n                    {Server closes connection}\n   The first character\
    \ on each line tells whether the line describes a\n   document, directory, or\
    \ search service (characters '0', '1', '7';\n   there are a handful more of these\
    \ characters described later).  The\n   succeeding characters up to the tab form\
    \ a user display string to be\n   shown to the user for use in selecting this\
    \ document (or directory)\n   for retrieval.  The first character of the line\
    \ is really defining\n   the type of item described on this line. In nearly every\
    \ case, the\n   Gopher client software will give the users some sort of idea about\n\
    \   what type of item this is (by displaying an icon, a short text tag,\n   or\
    \ the like).\n   The characters following the tab, up to the next tab form a selector\n\
    \   string that the client software must send to the server to retrieve\n   the\
    \ document (or directory listing).  The selector string should mean\n   nothing\
    \ to the client software; it should never be modified by the\n   client.  In practice,\
    \ the selector string is often a pathname or\n   other file selector used by the\
    \ server to locate the item desired.\n   The next two tab delimited fields denote\
    \ the domain-name of the host\n   that has this document (or directory), and the\
    \ port at which to\n   connect.  If there are yet other tab delimited fields,\
    \ the basic\n   Gopher client should ignore them.  A CR LF denotes the end of\
    \ the\n   item.\n   In the example, line 1 describes a document the user will\
    \ see as\n   \"About internet Gopher\".  To retrieve this document, the client\n\
    \   software must send the retrieval string: \"Stuff:About us\" to\n   rawBits.micro.umn.edu\
    \ at port 70.  If the client does this, the\n   server will respond with the contents\
    \ of the document, terminated by\n   a period on a line by itself.  A client might\
    \ present the user with a\n   view of the world something like the following list\
    \ of items:\n      About Internet Gopher\n      Around the University of Minnesota...\n\
    \      Microcomputer News & Prices...\n      Courses, Schedules, Calendars...\n\
    \      Student-Staff Directories...\n      Departmental Publications...\n   In\
    \ this case, directories are displayed with an ellipsis and files\n   are displayed\
    \ without any.  However, depending on the platform the\n   client is written for\
    \ and the author's taste, item types could be\n   denoted by other text tags or\
    \ by icons.  For example, the UNIX\n   curses-based client displays directories\
    \ with a slash (/) following\n   the name; Macintosh clients display directories\
    \ alongside an icon of\n   a folder.\n   The user does not know or care that the\
    \ items up for selection may\n   reside on many different machines anywhere on\
    \ the Internet.\n   Suppose the user selects the line \"Microcomputer News & Prices...\"\
    .\n   This appears to be a directory, and so the user expects to see\n   contents\
    \ of the directory upon request that it be fetched.  The\n   following lines illustrate\
    \ the ensuing client-server interaction:\n    Client:           (Connects to pserver.bookstore.umn.edu\
    \ at port 70)\n    Server:           (Accepts connection but says nothing)\n \
    \   Client: Prices/   (Sends the magic string terminated by CRLF)\n    Server:\
    \           (Sends a series of lines, each ending with CR LF)\n    0About PricesFPrices/AboutusFpserver.bookstore.umn.eduF70\n\
    \    0Macintosh PricesFPrices/MacFpserver.bookstore.umn.eduF70\n    0IBM PricesFPrices/IckFpserver.bookstore.umn.eduF70\n\
    \    0Printer & Peripheral PricesFPrices/PPPFpserver.bookstore.umn.eduF70\n  \
    \                    (.....etc.....)\n    .                 (Period on a line\
    \ by itself)\n                      (Server closes connection)\n"
- title: 3. More details
  contents:
  - '3. More details

    '
- title: 3.1  Locating services
  contents:
  - "3.1  Locating services\n   Documents (or other services that may be viewed ultimately\
    \ as\n   documents, such as a student-staff phonebook) are linked to the\n   machine\
    \ they are on by the trio of selector string, machine domain-\n   name, and IP\
    \ port.  It is assumed that there will be one well-known\n   top-level or root\
    \ server for an institution or campus.  The\n   information on this server may\
    \ be duplicated by one or more other\n   servers to avoid a single point of failure\
    \ and to spread the load\n   over several servers.  Departments that wish to put\
    \ up their own\n   departmental servers need to register the machine name and\
    \ port with\n   the administrators of the top-level Gopher server, much the same\
    \ way\n   as they register a machine name with the campus domain-name server.\n\
    \   An entry which points to the departmental server will then be made at\n  \
    \ the top level server.  This ensures that users will be able to\n   navigate\
    \ their way down what amounts to a virtual hierarchical file\n   system with a\
    \ well known root to any campus server if they desire.\n   Note that there is\
    \ no requirement that a department register\n   secondary servers with the central\
    \ top-level server; they may just\n   place a link to the secondary servers in\
    \ their own primary servers.\n   They may indeed place links to any servers they\
    \ desire in their own\n   server, thus creating a customized view of thethe Gopher\
    \ information\n   universe; links can of course point back at the top-level server.\n\
    \   The virtual (networked) file system is therefore an arbitrary graph\n   structure\
    \ and not necessarily a rooted tree.  The top-level node is\n   merely one convenient,\
    \ well-known point of entry.  A set of Gopher\n   servers linked in this manner\
    \ may function as a campus-wide\n   information system.\n   Servers may of course\
    \ point links at other than secondary servers.\n   Indeed servers may point at\
    \ other servers offering useful services\n   anywhere on the internet.  Viewed\
    \ in this manner, Gopher can be seen\n   as an Internet-wide information system.\n"
- title: 3.2 Server portability and naming
  contents:
  - "3.2 Server portability and naming\n   It is recommended that all registered servers\
    \ have alias names\n   (domain name system CNAME) that are used by Gopher clients\
    \ to locate\n   them.  Links to these servers should use these alias names rather\n\
    \   than the primary names.  If information needs to be moved from one\n   machine\
    \ to another, a simple change of domain name system alias\n   (CNAME) allows this\
    \ to occur without any reconfiguration of clients\n   in the field.  In short,\
    \ the domain name system may be used to re-map\n   a server to a new address.\
    \  There is nothing to prevent secondary\n   servers or services from running\
    \ on otherwise named servers or ports\n   other than 70, however these should\
    \ be reachable via a primary\n   server.\n"
- title: 3.3 Contacting server administrators
  contents:
  - "3.3 Contacting server administrators\n   It is recommended that every server\
    \ administrator have a document\n   called something like: \"About Bogus University's\
    \ Gopher server\" as\n   the first item in their server's top level directory.\
    \  In this\n   document should be a short description of what the server holds,\
    \ as\n   well as name, address, phone, and an e-mail address of the person who\n\
    \   administers the server.  This provides a way for users to get word to\n  \
    \ the administrator of a server that has inaccurate information or is\n   not\
    \ running correctly.  It is also recommended that administrators\n   place the\
    \ date of last update in files for which such information\n   matters to the users.\n"
- title: 3.4  Modular addition of services
  contents:
  - "3.4  Modular addition of services\n   The first character of each line in a server-supplied\
    \ directory\n   listing indicates whether the item is a file (character '0'),\
    \ a\n   directory (character '1'), or a search (character '7').  This is the\n\
    \   base set of item types in the Gopher protocol.  It is desirable for\n   clients\
    \ to be able to use different services and speak different\n   protocols (simple\
    \ ones such as finger; others such as CSO phonebook\n   service, or Telnet, or\
    \ X.500 directory service) as needs dictate.\n   CSO phonebook service is a client/server\
    \ phonebook system typically\n   used at Universities to publish names, e-mail\
    \ addresses, and so on.\n   The CSO phonebook software was developed at the University\
    \ of\n   Illinois and is also sometimes refered to as ph or qi.  For example,\n\
    \   if a server-supplied directory listing marks a certain item with type\n  \
    \ character '2', then it means that to use this item, the client must\n   speak\
    \ the CSO protocol.  This removes the need to be able to\n   anticipate all future\
    \ needs and hard-wire them in the basic Internet\n   Gopher protocol; it keeps\
    \ the basic protocol extremely simple.  In\n   spite of this simplicity, the scheme\
    \ has the capability to expand and\n   change with the times by adding an agreed\
    \ upon type-character for a\n   new service.  This also allows the client implementations\
    \ to evolve\n   in a modular fashion, simply by dropping in a module (or launching\
    \ a\n   new process) for some new service.  The servers for the new service\n\
    \   of course have to know nothing about Internet Gopher; they can just\n   be\
    \ off-the shelf CSO, X.500, or other servers.  We do not however,\n   encourage\
    \ arbitrary or machine-specific proliferation of service\n   types in the basic\
    \ Gopher protocol.\n   On the other hand, subsets of other document retrieval\
    \ schemes may be\n   mapped onto the Gopher protocol by means of \"gateway-servers\"\
    .\n   Examples of such servers include Gopher-to-FTP gateways, Gopher-to-\n  \
    \ archie gateways, Gopher-to-WAIS gateways, etc.  There are a number of\n   advantages\
    \ of such mechanisms. First, a relatively powerful server\n   machine inherits\
    \ both the intelligence and work, rather than the more\n   modest, inexpensive\
    \ desktop system that typically runs client\n   software or basic server software.\
    \  Equally important, clients do not\n   have to be modified to take advantage\
    \ of a new resource.\n"
- title: 3.5  Building clients
  contents:
  - "3.5  Building clients\n   A client simply sends the retrieval string to a server\
    \ if it wants to\n   retrieve a document or view the contents of a directory.\
    \  Of course,\n   each host may have pointers to other hosts, resulting in a \"\
    graph\"\n   (not necessarily a rooted tree) of hosts.  The client software may\n\
    \   save (or rather \"stack\") the locations that it has visited in search\n \
    \  of a document.  The user could therefore back out of the current\n   location\
    \ by unwinding the stack.  Alternatively, a client with\n   multiple-window capability\
    \ might just be able to display more than\n   one directory or document at the\
    \ same time.\n   A smart client could cache the contents of visited directories\n\
    \   (rather than just the directory's item descriptor), thus avoiding\n   network\
    \ transactions if the information has been previously\n   retrieved.\n   If a\
    \ client does not understand what a say, type 'B' item (not a core\n   item) is,\
    \ then it may simply ignore the item in the directory\n   listing; the user never\
    \ even has to see it.  Alternatively, the item\n   could be displayed as an unknown\
    \ type.\n   Top-level or primary servers for a campus are likely to get more\n\
    \   traffic than secondary servers, and it would be less tolerable for\n   such\
    \ primary servers to be down for any long time.  So it makes sense\n   to \"clone\"\
    \ such important servers and construct clients that can\n   randomly choose between\
    \ two such equivalent primary servers when they\n   first connect (to balance\
    \ server load), moving to one if the other\n   seems to be down.  In fact, smart\
    \ client implementations do this\n   clone server and load balancing.  Alternatively,\
    \ it may make sense to\n   have the domain name system return one of a set of\
    \ redundant of\n   server's IP address to load balance betwen redundant sets of\n\
    \   important servers.\n"
- title: 3.6  Building ordinary internet Gopher servers
  contents:
  - "3.6  Building ordinary internet Gopher servers\n   The retrieval string sent\
    \ to the server might be a path to a file or\n   directory.  It might be the name\
    \ of a script, an application or even\n   a query that generates the document\
    \ or directory returned.  The basic\n   server uses the string it gets up to but\
    \ not including a CR-LF or a\n   TAB, whichever comes first.\n   All intelligence\
    \ is carried by the server implementation rather than\n   the protocol.  What\
    \ you build into more exotic servers is up to you.\n   Server implementations\
    \ may grow as needs dictate and time allows.\n"
- title: 3.7  Special purpose servers
  contents:
  - "3.7  Special purpose servers\n   There are two special server types (beyond the\
    \ normal Gopher server)\n   also discussed below:\n      1.  A server directory\
    \ listing can point at a CSO nameserver (the\n      server returns a type character\
    \ of '2') to allow a campus\n      student-staff phonebook lookup service.  This\
    \ may show up on the\n      user's list of choices, perhaps preceded by the icon\
    \ of a phone-\n      book.  If this item is selected, the client software must\
    \ resort\n      to a pure CSO nameserver protocol when it connects to the\n  \
    \    appropriate host.\n      2.  A server can also point at a \"search server\"\
    \ (returns a first\n      character of '7').  Such servers may implement campus\
    \ network (or\n      subnet) wide searching capability.  The most common search\
    \ servers\n      maintain full-text indexes on the contents of text documents\
    \ held\n      by some subset of Gopher servers.  Such a \"full-text search\n \
    \     server\" responds to client requests with a list of all documents\n    \
    \  that contain one or more words (the search criteria).  The client\n      sends\
    \ the server the selector string, a tab, and the search string\n      (words to\
    \ search for). If the selector string is empty, the client\n      merely sends\
    \ the search string.  The server returns the equivalent\n      of a directory\
    \ listing for documents matching the search criteria.\n      Spaces between words\
    \ are usually implied Boolean ANDs (although in\n      different implementations\
    \ or search types, this may not\n      necessarily be true).\n   The CSO addition\
    \ exists for historical reasons: at time of design,\n   the campus phone-book\
    \ servers at the University of Minnesota used the\n   CSO protocol and it seemed\
    \ simplest to just engulf them.  The index-\n   server is however very much a\
    \ Gopher in spirit, albeit with a slight\n   twist in the meaning of the selector-string.\
    \  Index servers are a\n   natural place to incorperate gateways to WAIS and WHOIS\
    \ services.\n"
- title: 3.7.1  Building CSO-servers
  contents:
  - "3.7.1  Building CSO-servers\n   A CSO Nameserver implementation for UNIX and\
    \ associated documentation\n   is available by anonymous ftp from uxa.cso.uiuc.edu.\
    \  We do not\n   anticipate implementing it on other machines.\n"
- title: 3.7.2  Building full-text search servers
  contents:
  - "3.7.2  Building full-text search servers\n   A full-text search server is a special-purpose\
    \ server that knows\n   about the Gopher scheme for retrieving documents.  These\
    \ servers\n   maintain a full-text index of the contents of plain text documents\
    \ on\n   Gopher servers in some specified domain.  A Gopher full-text search\n\
    \   server was implemented using several NeXTstations because it was easy\n  \
    \ to take advantage of the full-text index/search engine built into the\n   NeXT\
    \ system software.  A search server for generic UNIX systems based\n   on the\
    \ public domain WAIS search engine, is also available and\n   currently an optional\
    \ part of the UNIX gopher server.  In addition,\n   at least one implementation\
    \ of the gopher server incorperates a\n   gateway to WAIS servers by presenting\
    \ the WAIS servers to gopherspace\n   as full-text search servers.  The gopher<->WAIS\
    \ gateway servers does\n   the work of translating from gopher protocol to WAIS\
    \ so unmodified\n   gopher clients can access WAIS servers via the gateway server.\n\
    \   By using several index servers (rather than a monolithic index\n   server)\
    \ indexes may be searched in parallel (although the client\n   software is not\
    \ aware of this).  While maintaining full-text indexes\n   of documents distributed\
    \ over many machines may seem a daunting task,\n   the task can be broken into\
    \ smaller pieces (update only a portion of\n   the indexes, search several partial\
    \ indexes in parallel) so that it\n   is manageable.  By spreading this task over\
    \ several small, cheap (and\n   fast) workstations it is possible to take advantage\
    \ of fine-grain\n   parallelism.  Again, the client software is not aware of this.\
    \ Client\n   software only needs to know that it can send a search string to an\n\
    \   index server and will receive a list of documents that contain the\n   words\
    \ in the search string.\n"
- title: 3.8  Item type characters
  contents:
  - "3.8  Item type characters\n   The client software decides what items are available\
    \ by looking at\n   the first character of each line in a directory listing. \
    \ Augmenting\n   this list can extend the protocol.  A list of defined item-type\n\
    \   characters follows:\n   0   Item is a file\n   1   Item is a directory\n \
    \  2   Item is a CSO phone-book server\n   3   Error\n   4   Item is a BinHexed\
    \ Macintosh file.\n   5   Item is DOS binary archive of some sort.\n       Client\
    \ must read until the TCP connection closes.  Beware.\n   6   Item is a UNIX uuencoded\
    \ file.\n   7   Item is an Index-Search server.\n   8   Item points to a text-based\
    \ telnet session.\n   9   Item is a binary file!\n       Client must read until\
    \ the TCP connection closes.  Beware.\n   +   Item is a redundant server\n   T\
    \   Item points to a text-based tn3270 session.\n   g   Item is a GIF format graphics\
    \ file.\n   I   Item is some kind of image file.  Client decides how to display.\n\
    \   Characters '0' through 'Z' are reserved.  Local experiments should\n   use\
    \ other characters.  Machine-specific extensions are not\n   encouraged.  Note\
    \ that for type 5 or type 9 the client must be\n   prepared to read until the\
    \ connection closes.  There will be no\n   period at the end of the file; the\
    \ contents of these files are binary\n   and the client must decide what to do\
    \ with them based perhaps on the\n   .xxx extension.\n"
- title: 3.9  User display strings and server selector strings
  contents:
  - "3.9  User display strings and server selector strings\n   User display strings\
    \ are intended to be displayed on a line on a\n   typical screen for a user's\
    \ viewing pleasure.  While many screens can\n   accommodate 80 character lines,\
    \ some space is needed to display a tag\n   of some sort to tell the user what\
    \ sort of item this is.  Because of\n   this, the user display string should be\
    \ kept under 70 characters in\n   length.  Clients may truncate to a length convenient\
    \ to them.\n"
- title: 4.   Simplicity is intentional
  contents:
  - "4.   Simplicity is intentional\n   As far as possible we desire any new features\
    \ to be carried as new\n   protocols that will be hidden behind new document-types.\
    \  The\n   internet Gopher philosophy is:\n      (a) Intelligence is held by the\
    \ server.  Clients have the option\n      of being able to access new document\
    \ types (different, other types\n      of servers) by simply recognizing the document-type\
    \ character.\n      Further intelligence to be borne by the protocol should be\n\
    \      minimized.\n      (b) The well-tempered server ought to send \"text\" (unless\
    \ a file\n      must be transferred as raw binary).  Should this text include\n\
    \      tabs, formfeeds, frufru?  Probably not, but rude servers will\n      probably\
    \ send them anyway.  Publishers of documents should be\n      given simple tools\
    \ (filters) that will alert them if there are any\n      funny characters in the\
    \ documents they wish to publish, and give\n      them the opportunity to strip\
    \ the questionable characters out; the\n      publisher may well refuse.\n   \
    \   (c) The well-tempered client should do something reasonable with\n      funny\
    \ characters received in text; filter them out, leave them in,\n      whatever.\n"
- title: Appendix
  contents:
  - "Appendix\n   Paul's NQBNF (Not Quite BNF) for the Gopher Protocol.\n   Note:\
    \  This is modified BNF (as used by the Pascal people) with a few\n          English\
    \ modifiers thrown in.  Stuff enclosed in '{}' can be\n          repeated zero\
    \ or more times.  Stuff in '[]' denotes a set of\n          items.  The '-' operator\
    \ denotes set subtraction.\n"
- title: Directory Entity
  contents:
  - 'Directory Entity

    '
- title: CR-LF     ::= ASCII Carriage Return Character followed by Line Feed
  contents:
  - "CR-LF     ::= ASCII Carriage Return Character followed by Line Feed\n       \
    \       character.\n"
- title: Tab       ::= ASCII Tab character.
  contents:
  - 'Tab       ::= ASCII Tab character.

    '
- title: NUL       ::= ASCII NUL character.
  contents:
  - 'NUL       ::= ASCII NUL character.

    '
- title: UNASCII   ::= ASCII - [Tab CR-LF NUL].
  contents:
  - 'UNASCII   ::= ASCII - [Tab CR-LF NUL].

    '
- title: Lastline  ::= '.'CR-LF.
  contents:
  - 'Lastline  ::= ''.''CR-LF.

    '
- title: TextBlock ::= Block of ASCII text not containing Lastline pattern.
  contents:
  - 'TextBlock ::= Block of ASCII text not containing Lastline pattern.

    '
- title: Type      ::= UNASCII.
  contents:
  - 'Type      ::= UNASCII.

    '
- title: RedType   ::= '+'.
  contents:
  - 'RedType   ::= ''+''.

    '
- title: User_Name ::= {UNASCII}.
  contents:
  - 'User_Name ::= {UNASCII}.

    '
- title: Selector  ::= {UNASCII}.
  contents:
  - 'Selector  ::= {UNASCII}.

    '
- title: Host      ::= {{UNASCII - ['.']} '.'} {UNASCII - ['.']}.
  contents:
  - 'Host      ::= {{UNASCII - [''.'']} ''.''} {UNASCII - [''.'']}.

    '
- title: 'Note: This is a Fully Qualified Domain Name as defined in RFC 1034.'
  contents:
  - "Note: This is a Fully Qualified Domain Name as defined in RFC 1034.\n      (e.g.,\
    \ gopher.micro.umn.edu)  Hosts that have a CR-LF\n      TAB or NUL in their name\
    \ get what they deserve.\n"
- title: Digit     ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .
  contents:
  - 'Digit     ::= ''0'' | ''1'' | ''2'' | ''3'' | ''4'' | ''5'' | ''6'' | ''7'' |
    ''8'' | ''9'' .

    '
- title: DigitSeq  ::= digit {digit}.
  contents:
  - 'DigitSeq  ::= digit {digit}.

    '
- title: Port      ::= DigitSeq.
  contents:
  - 'Port      ::= DigitSeq.

    '
- title: 'Note: Port corresponds the the TCP Port Number, its value should'
  contents:
  - "Note: Port corresponds the the TCP Port Number, its value should\n      be in\
    \ the range [0..65535]; port 70 is officially assigned\n      to gopher.\n"
- title: DirEntity ::= Type User_Name Tab Selector Tab Host Tab Port CR-LF
  contents:
  - "DirEntity ::= Type User_Name Tab Selector Tab Host Tab Port CR-LF\n         \
    \ {RedType User_Name Tab Selector Tab Host Tab Port CR-LF}\n"
- title: 'Notes:'
  contents:
  - "Notes:\n   It is *highly* recommended that the User_Name field contain only\n\
    \   printable characters, since many different clients will be using\n   it. \
    \ However if eight bit characters are used, the characters\n   should conform\
    \ with the ISO Latin1 Character Set.  The length of\n   the User displayable line\
    \ should be less than 70 Characters; longer\n   lines may not fit across some\
    \ screens.\n   The Selector string should be no longer than 255 characters.\n"
- title: Menu Entity
  contents:
  - 'Menu Entity

    '
- title: Menu      ::= {DirEntity} Lastline.
  contents:
  - 'Menu      ::= {DirEntity} Lastline.

    '
- title: Menu Transaction  (Type 1 item)
  contents:
  - 'Menu Transaction  (Type 1 item)

    '
- title: 'C: Opens Connection'
  contents:
  - 'C: Opens Connection

    '
- title: 'S: Accepts Connection'
  contents:
  - 'S: Accepts Connection

    '
- title: 'C: Sends Selector String'
  contents:
  - 'C: Sends Selector String

    '
- title: 'S: Sends Menu Entity'
  contents:
  - "S: Sends Menu Entity\n   Connection is closed by either client or server (typically\
    \ server).\n"
- title: Textfile Entity
  contents:
  - 'Textfile Entity

    '
- title: TextFile  ::= {TextBlock} Lastline
  contents:
  - 'TextFile  ::= {TextBlock} Lastline

    '
- title: 'Note:  Lines beginning with periods must be prepended with an extra'
  contents:
  - "Note:  Lines beginning with periods must be prepended with an extra\n     period\
    \ to ensure that the transmission is not terminated early.\n     The client should\
    \ strip extra periods at the beginning of the line.\n"
- title: TextFile Transaction (Type 0 item)
  contents:
  - 'TextFile Transaction (Type 0 item)

    '
- title: 'C: Opens Connection.'
  contents:
  - 'C: Opens Connection.

    '
- title: 'S: Accepts connection'
  contents:
  - 'S: Accepts connection

    '
- title: 'C: Sends Selector String.'
  contents:
  - 'C: Sends Selector String.

    '
- title: 'S: Sends TextFile Entity.'
  contents:
  - "S: Sends TextFile Entity.\n   Connection is closed by either client or server\
    \ (typically server).\n"
- title: 'Note:  The client should be prepared for the server closing the'
  contents:
  - "Note:  The client should be prepared for the server closing the\n       connection\
    \ without sending the Lastline.  This allows the\n       client to use fingerd\
    \ servers.\n"
- title: Full-Text Search Transaction (Type 7 item)
  contents:
  - 'Full-Text Search Transaction (Type 7 item)

    '
- title: Word      ::= {UNASCII - ' '}
  contents:
  - 'Word      ::= {UNASCII - '' ''}

    '
- title: BoolOp ::= 'and' | 'or' | 'not' | SPACE
  contents:
  - 'BoolOp ::= ''and'' | ''or'' | ''not'' | SPACE

    '
- title: SearchStr ::= Word {{SPACE BoolOp} SPACE Word}
  contents:
  - 'SearchStr ::= Word {{SPACE BoolOp} SPACE Word}

    '
- title: 'C: Opens Connection.'
  contents:
  - 'C: Opens Connection.

    '
- title: 'C: Sends Selector String, Tab, Search String.'
  contents:
  - 'C: Sends Selector String, Tab, Search String.

    '
- title: 'S: Sends Menu Entity.'
  contents:
  - 'S: Sends Menu Entity.

    '
- title: 'Note:  In absence of ''and'', ''or'', or ''not'' operators, a SPACE is'
  contents:
  - "Note:  In absence of 'and', 'or', or 'not' operators, a SPACE is\n       regarded\
    \ as an implied 'and' operator.  Expression is evaluated\n       left to right.\
    \  Further, not all search engines or search\n       gateways currently implemented\
    \ have the boolean operators\n       implemented.\n"
- title: Binary file Transaction (Type 9 or 5 item)
  contents:
  - 'Binary file Transaction (Type 9 or 5 item)

    '
- title: 'C: Opens Connection.'
  contents:
  - 'C: Opens Connection.

    '
- title: 'S: Accepts connection'
  contents:
  - 'S: Accepts connection

    '
- title: 'C: Sends Selector String.'
  contents:
  - 'C: Sends Selector String.

    '
- title: 'S: Sends a binary file and closes connection when done.'
  contents:
  - 'S: Sends a binary file and closes connection when done.

    '
- title: Syntactic Meaning for Directory Entities
  contents:
  - 'Syntactic Meaning for Directory Entities

    '
- title: 'The client should interpret the type field as follows:'
  contents:
  - 'The client should interpret the type field as follows:

    '
- title: 0   The item is a TextFile Entity.
  contents:
  - "0   The item is a TextFile Entity.\n    Client should use a TextFile Transaction.\n"
- title: 1   The item is a Menu Entity.
  contents:
  - "1   The item is a Menu Entity.\n    Client should use a Menu Transaction.\n"
- title: 2   The information applies to a CSO phone book entity.
  contents:
  - "2   The information applies to a CSO phone book entity.\n    Client should talk\
    \ CSO protocol.\n"
- title: 3   Signals an error condition.
  contents:
  - '3   Signals an error condition.

    '
- title: 4   Item is a Macintosh file encoded in BINHEX format
  contents:
  - '4   Item is a Macintosh file encoded in BINHEX format

    '
- title: 5   Item is PC-DOS binary file of some sort.  Client gets to decide.
  contents:
  - '5   Item is PC-DOS binary file of some sort.  Client gets to decide.

    '
- title: 6   Item is a uuencoded file.
  contents:
  - '6   Item is a uuencoded file.

    '
- title: 7   The information applies to a Index Server.
  contents:
  - "7   The information applies to a Index Server.\n    Client should use a FullText\
    \ Search transaction.\n"
- title: 8   The information applies to a Telnet session.
  contents:
  - "8   The information applies to a Telnet session.\n    Connect to given host at\
    \ given port. The name to login as at this\n    host is in the selector string.\n"
- title: 9   Item is a binary file.  Client must decide what to do with it.
  contents:
  - '9   Item is a binary file.  Client must decide what to do with it.

    '
- title: +   The information applies to a duplicated server.  The information
  contents:
  - "+   The information applies to a duplicated server.  The information\n    contained\
    \ within is a duplicate of the primary server.  The primary\n    server is defined\
    \ as the last DirEntity that is has a non-plus\n    \"Type\" field.  The client\
    \ should use the transaction as defined by\n    the primary server Type field.\n"
- title: g   Item is a GIF graphic file.
  contents:
  - 'g   Item is a GIF graphic file.

    '
- title: I   Item is some kind of image file.  Client gets to decide.
  contents:
  - 'I   Item is some kind of image file.  Client gets to decide.

    '
- title: T   The information applies to a tn3270 based telnet session.
  contents:
  - "T   The information applies to a tn3270 based telnet session.\n    Connect to\
    \ given host at given port. The name to login as at this\n    host is in the selector\
    \ string.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Farhad Anklesaria\n   Computer and Information Services,\
    \ University of Minnesota\n   Room 152 Shepherd Labs\n   100 Union Street SE\n\
    \   Minneapolis, MN 55455\n   Phone: (612) 625 1300\n   EMail: fxa@boombox.micro.umn.edu\n\
    \   Mark McCahill\n   Computer and Information Services, University of Minnesota\n\
    \   Room 152 Shepherd Labs\n   100 Union Street SE\n   Minneapolis, MN 55455\n\
    \   Phone: (612) 625 1300\n   EMail: mpm@boombox.micro.umn.edu\n   Paul Lindner\n\
    \   Computer and Information Services, University of Minnesota\n   Room 152 Shepherd\
    \ Labs\n   100 Union Street SE\n   Minneapolis, MN 55455\n   Phone: (612) 625\
    \ 1300\n   EMail: lindner@boombox.micro.umn.edu\n   David Johnson\n   Computer\
    \ and Information Services, University of Minnesota\n   Room 152 Shepherd Labs\n\
    \   100 Union Street SE\n   Minneapolis, MN 55455\n   Phone: (612) 625 1300\n\
    \   EMail: dmj@boombox.micro.umn.edu\n   Daniel Torrey\n   Computer and Information\
    \ Services, University of Minnesota\n   Room 152 Shepherd Labs\n   100 Union Street\
    \ SE\n   Minneapolis, MN 55455\n   Phone: (612) 625 1300\n   EMail: daniel@boombox.micro.umn.edu\n\
    \   Bob Alberti\n   Computer and Information Services, University of Minnesota\n\
    \   Room 152 Shepherd Labs\n   100 Union Street SE\n   Minneapolis, MN 55455\n\
    \   Phone: (612) 625 1300\n   EMail: alberti@boombox.micro.umn.edu\n"
