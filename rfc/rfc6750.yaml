- title: __initial_text__
  contents:
  - '       The OAuth 2.0 Authorization Framework: Bearer Token Usage

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification describes how to use bearer tokens in HTTP\n\
    \   requests to access OAuth 2.0 protected resources.  Any party in\n   possession\
    \ of a bearer token (a \"bearer\") can use it to get access to\n   the associated\
    \ resources (without demonstrating possession of a\n   cryptographic key).  To\
    \ prevent misuse, bearer tokens need to be\n   protected from disclosure in storage\
    \ and in transport.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6750.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Notational Conventions .....................................3\n  \
    \    1.2. Terminology ................................................3\n    \
    \  1.3. Overview ...................................................3\n   2. Authenticated\
    \ Requests ..........................................4\n      2.1. Authorization\
    \ Request Header Field .........................5\n      2.2. Form-Encoded Body\
    \ Parameter ................................5\n      2.3. URI Query Parameter\
    \ ........................................6\n   3. The WWW-Authenticate Response\
    \ Header Field ......................7\n      3.1. Error Codes ................................................9\n\
    \   4. Example Access Token Response ..................................10\n  \
    \ 5. Security Considerations ........................................10\n    \
    \  5.1. Security Threats ..........................................10\n      5.2.\
    \ Threat Mitigation .........................................11\n      5.3. Summary\
    \ of Recommendations ................................13\n   6. IANA Considerations\
    \ ............................................14\n      6.1. OAuth Access Token\
    \ Type Registration ......................14\n           6.1.1. The \"Bearer\"\
    \ OAuth Access Token Type ...............14\n      6.2. OAuth Extensions Error\
    \ Registration .......................14\n           6.2.1. The \"invalid_request\"\
    \ Error Value ..................14\n           6.2.2. The \"invalid_token\" Error\
    \ Value ....................15\n           6.2.3. The \"insufficient_scope\" Error\
    \ Value ...............15\n   7. References .....................................................15\n\
    \      7.1. Normative References ......................................15\n  \
    \    7.2. Informative References ....................................17\n   Appendix\
    \ A. Acknowledgements ......................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   OAuth enables clients to access protected resources by obtaining\
    \ an\n   access token, which is defined in \"The OAuth 2.0 Authorization\n   Framework\"\
    \ [RFC6749] as \"a string representing an access\n   authorization issued to the\
    \ client\", rather than using the resource\n   owner's credentials directly.\n\
    \   Tokens are issued to clients by an authorization server with the\n   approval\
    \ of the resource owner.  The client uses the access token to\n   access the protected\
    \ resources hosted by the resource server.  This\n   specification describes how\
    \ to make protected resource requests when\n   the OAuth access token is a bearer\
    \ token.\n   This specification defines the use of bearer tokens over HTTP/1.1\n\
    \   [RFC2616] using Transport Layer Security (TLS) [RFC5246] to access\n   protected\
    \ resources.  TLS is mandatory to implement and use with this\n   specification;\
    \ other specifications may extend this specification for\n   use with other protocols.\
    \  While designed for use with access tokens\n   resulting from OAuth 2.0 authorization\
    \ [RFC6749] flows to access\n   OAuth protected resources, this specification\
    \ actually defines a\n   general HTTP authorization method that can be used with\
    \ bearer tokens\n   from any source to access any resources protected by those\
    \ bearer\n   tokens.  The Bearer authentication scheme is intended primarily for\n\
    \   server authentication using the WWW-Authenticate and Authorization\n   HTTP\
    \ headers but does not preclude its use for proxy authentication.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in \"Key words for use in\n   RFCs to Indicate Requirement Levels\" [RFC2119].\n\
    \   This document uses the Augmented Backus-Naur Form (ABNF) notation of\n   [RFC5234].\
    \  Additionally, the following rules are included from\n   HTTP/1.1 [RFC2617]:\
    \ auth-param and auth-scheme; and from \"Uniform\n   Resource Identifier (URI):\
    \ Generic Syntax\" [RFC3986]: URI-reference.\n   Unless otherwise noted, all the\
    \ protocol parameter names and values\n   are case sensitive.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Bearer Token\n      A security token with the property\
    \ that any party in possession of\n      the token (a \"bearer\") can use the\
    \ token in any way that any other\n      party in possession of it can.  Using\
    \ a bearer token does not\n      require a bearer to prove possession of cryptographic\
    \ key material\n      (proof-of-possession).\n   All other terms are as defined\
    \ in \"The OAuth 2.0 Authorization\n   Framework\" [RFC6749].\n"
- title: 1.3.  Overview
  contents:
  - "1.3.  Overview\n   OAuth provides a method for clients to access a protected\
    \ resource on\n   behalf of a resource owner.  In the general case, before a client\
    \ can\n   access a protected resource, it must first obtain an authorization\n\
    \   grant from the resource owner and then exchange the authorization\n   grant\
    \ for an access token.  The access token represents the grant's\n   scope, duration,\
    \ and other attributes granted by the authorization\n   grant.  The client accesses\
    \ the protected resource by presenting the\n   access token to the resource server.\
    \  In some cases, a client can\n   directly present its own credentials to an\
    \ authorization server to\n   obtain an access token without having to first obtain\
    \ an\n   authorization grant from a resource owner.\n   The access token provides\
    \ an abstraction, replacing different\n   authorization constructs (e.g., username\
    \ and password, assertion) for\n   a single token understood by the resource server.\
    \  This abstraction\n   enables issuing access tokens valid for a short time period,\
    \ as well\n   as removing the resource server's need to understand a wide range\
    \ of\n   authentication schemes.\n     +--------+                            \
    \   +---------------+\n     |        |--(A)- Authorization Request ->|   Resource\
    \    |\n     |        |                               |     Owner     |\n    \
    \ |        |<-(B)-- Authorization Grant ---|               |\n     |        |\
    \                               +---------------+\n     |        |\n     |   \
    \     |                               +---------------+\n     |        |--(C)--\
    \ Authorization Grant -->| Authorization |\n     | Client |                  \
    \             |     Server    |\n     |        |<-(D)----- Access Token -------|\
    \               |\n     |        |                               +---------------+\n\
    \     |        |\n     |        |                               +---------------+\n\
    \     |        |--(E)----- Access Token ------>|    Resource   |\n     |     \
    \   |                               |     Server    |\n     |        |<-(F)---\
    \ Protected Resource ---|               |\n     +--------+                   \
    \            +---------------+\n                     Figure 1: Abstract Protocol\
    \ Flow\n   The abstract OAuth 2.0 flow illustrated in Figure 1 describes the\n\
    \   interaction between the client, resource owner, authorization server,\n  \
    \ and resource server (described in [RFC6749]).  The following two\n   steps are\
    \ specified within this document:\n   (E)  The client requests the protected resource\
    \ from the resource\n        server and authenticates by presenting the access\
    \ token.\n   (F)  The resource server validates the access token, and if valid,\n\
    \        serves the request.\n   This document also imposes semantic requirements\
    \ upon the access\n   token returned in step (D).\n"
- title: 2.  Authenticated Requests
  contents:
  - "2.  Authenticated Requests\n   This section defines three methods of sending\
    \ bearer access tokens in\n   resource requests to resource servers.  Clients\
    \ MUST NOT use more\n   than one method to transmit the token in each request.\n"
- title: 2.1.  Authorization Request Header Field
  contents:
  - "2.1.  Authorization Request Header Field\n   When sending the access token in\
    \ the \"Authorization\" request header\n   field defined by HTTP/1.1 [RFC2617],\
    \ the client uses the \"Bearer\"\n   authentication scheme to transmit the access\
    \ token.\n   For example:\n     GET /resource HTTP/1.1\n     Host: server.example.com\n\
    \     Authorization: Bearer mF_9.B5f-4.1JqM\n   The syntax of the \"Authorization\"\
    \ header field for this scheme\n   follows the usage of the Basic scheme defined\
    \ in Section 2 of\n   [RFC2617].  Note that, as with Basic, it does not conform\
    \ to the\n   generic syntax defined in Section 1.2 of [RFC2617] but is compatible\n\
    \   with the general authentication framework being developed for\n   HTTP 1.1\
    \ [HTTP-AUTH], although it does not follow the preferred\n   practice outlined\
    \ therein in order to reflect existing deployments.\n   The syntax for Bearer\
    \ credentials is as follows:\n     b64token    = 1*( ALPHA / DIGIT /\n       \
    \                \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n    \
    \ credentials = \"Bearer\" 1*SP b64token\n   Clients SHOULD make authenticated\
    \ requests with a bearer token using\n   the \"Authorization\" request header\
    \ field with the \"Bearer\" HTTP\n   authorization scheme.  Resource servers MUST\
    \ support this method.\n"
- title: 2.2.  Form-Encoded Body Parameter
  contents:
  - "2.2.  Form-Encoded Body Parameter\n   When sending the access token in the HTTP\
    \ request entity-body, the\n   client adds the access token to the request-body\
    \ using the\n   \"access_token\" parameter.  The client MUST NOT use this method\
    \ unless\n   all of the following conditions are met:\n   o  The HTTP request\
    \ entity-header includes the \"Content-Type\" header\n      field set to \"application/x-www-form-urlencoded\"\
    .\n   o  The entity-body follows the encoding requirements of the\n      \"application/x-www-form-urlencoded\"\
    \ content-type as defined by\n      HTML 4.01 [W3C.REC-html401-19991224].\n  \
    \ o  The HTTP request entity-body is single-part.\n   o  The content to be encoded\
    \ in the entity-body MUST consist entirely\n      of ASCII [USASCII] characters.\n\
    \   o  The HTTP request method is one for which the request-body has\n      defined\
    \ semantics.  In particular, this means that the \"GET\"\n      method MUST NOT\
    \ be used.\n   The entity-body MAY include other request-specific parameters,\
    \ in\n   which case the \"access_token\" parameter MUST be properly separated\n\
    \   from the request-specific parameters using \"&\" character(s) (ASCII\n   code\
    \ 38).\n   For example, the client makes the following HTTP request using\n  \
    \ transport-layer security:\n     POST /resource HTTP/1.1\n     Host: server.example.com\n\
    \     Content-Type: application/x-www-form-urlencoded\n     access_token=mF_9.B5f-4.1JqM\n\
    \   The \"application/x-www-form-urlencoded\" method SHOULD NOT be used\n   except\
    \ in application contexts where participating browsers do not\n   have access\
    \ to the \"Authorization\" request header field.  Resource\n   servers MAY support\
    \ this method.\n"
- title: 2.3.  URI Query Parameter
  contents:
  - "2.3.  URI Query Parameter\n   When sending the access token in the HTTP request\
    \ URI, the client\n   adds the access token to the request URI query component\
    \ as defined\n   by \"Uniform Resource Identifier (URI): Generic Syntax\" [RFC3986],\n\
    \   using the \"access_token\" parameter.\n   For example, the client makes the\
    \ following HTTP request using\n   transport-layer security:\n     GET /resource?access_token=mF_9.B5f-4.1JqM\
    \ HTTP/1.1\n     Host: server.example.com\n   The HTTP request URI query can include\
    \ other request-specific\n   parameters, in which case the \"access_token\" parameter\
    \ MUST be\n   properly separated from the request-specific parameters using \"\
    &\"\n   character(s) (ASCII code 38).\n   For example:\n    https://server.example.com/resource?access_token=mF_9.B5f-4.1JqM&p=q\n\
    \   Clients using the URI Query Parameter method SHOULD also send a\n   Cache-Control\
    \ header containing the \"no-store\" option.  Server\n   success (2XX status)\
    \ responses to these requests SHOULD contain a\n   Cache-Control header with the\
    \ \"private\" option.\n   Because of the security weaknesses associated with the\
    \ URI method\n   (see Section 5), including the high likelihood that the URL\n\
    \   containing the access token will be logged, it SHOULD NOT be used\n   unless\
    \ it is impossible to transport the access token in the\n   \"Authorization\"\
    \ request header field or the HTTP request entity-body.\n   Resource servers MAY\
    \ support this method.\n   This method is included to document current use; its\
    \ use is not\n   recommended, due to its security deficiencies (see Section 5)\
    \ and\n   also because it uses a reserved query parameter name, which is\n   counter\
    \ to URI namespace best practices, per \"Architecture of the\n   World Wide Web,\
    \ Volume One\" [W3C.REC-webarch-20041215].\n"
- title: 3.  The WWW-Authenticate Response Header Field
  contents:
  - "3.  The WWW-Authenticate Response Header Field\n   If the protected resource\
    \ request does not include authentication\n   credentials or does not contain\
    \ an access token that enables access\n   to the protected resource, the resource\
    \ server MUST include the HTTP\n   \"WWW-Authenticate\" response header field;\
    \ it MAY include it in\n   response to other conditions as well.  The \"WWW-Authenticate\"\
    \ header\n   field uses the framework defined by HTTP/1.1 [RFC2617].\n   All challenges\
    \ defined by this specification MUST use the auth-scheme\n   value \"Bearer\"\
    .  This scheme MUST be followed by one or more\n   auth-param values.  The auth-param\
    \ attributes used or defined by this\n   specification are as follows.  Other\
    \ auth-param attributes MAY be\n   used as well.\n   A \"realm\" attribute MAY\
    \ be included to indicate the scope of\n   protection in the manner described\
    \ in HTTP/1.1 [RFC2617].  The\n   \"realm\" attribute MUST NOT appear more than\
    \ once.\n   The \"scope\" attribute is defined in Section 3.3 of [RFC6749].  The\n\
    \   \"scope\" attribute is a space-delimited list of case-sensitive scope\n  \
    \ values indicating the required scope of the access token for\n   accessing the\
    \ requested resource. \"scope\" values are implementation\n   defined; there is\
    \ no centralized registry for them; allowed values\n   are defined by the authorization\
    \ server.  The order of \"scope\" values\n   is not significant.  In some cases,\
    \ the \"scope\" value will be used\n   when requesting a new access token with\
    \ sufficient scope of access to\n   utilize the protected resource.  Use of the\
    \ \"scope\" attribute is\n   OPTIONAL.  The \"scope\" attribute MUST NOT appear\
    \ more than once.  The\n   \"scope\" value is intended for programmatic use and\
    \ is not meant to be\n   displayed to end-users.\n   Two example scope values\
    \ follow; these are taken from the OpenID\n   Connect [OpenID.Messages] and the\
    \ Open Authentication Technology\n   Committee (OATC) Online Multimedia Authorization\
    \ Protocol [OMAP]\n   OAuth 2.0 use cases, respectively:\n     scope=\"openid\
    \ profile email\"\n     scope=\"urn:example:channel=HBO&urn:example:rating=G,PG-13\"\
    \n   If the protected resource request included an access token and failed\n \
    \  authentication, the resource server SHOULD include the \"error\"\n   attribute\
    \ to provide the client with the reason why the access\n   request was declined.\
    \  The parameter value is described in\n   Section 3.1.  In addition, the resource\
    \ server MAY include the\n   \"error_description\" attribute to provide developers\
    \ a human-readable\n   explanation that is not meant to be displayed to end-users.\
    \  It also\n   MAY include the \"error_uri\" attribute with an absolute URI\n\
    \   identifying a human-readable web page explaining the error.  The\n   \"error\"\
    , \"error_description\", and \"error_uri\" attributes MUST NOT\n   appear more\
    \ than once.\n   Values for the \"scope\" attribute (specified in Appendix A.4\
    \ of\n   [RFC6749]) MUST NOT include characters outside the set %x21 / %x23-5B\n\
    \   / %x5D-7E for representing scope values and %x20 for delimiters\n   between\
    \ scope values.  Values for the \"error\" and \"error_description\"\n   attributes\
    \ (specified in Appendixes A.7 and A.8 of [RFC6749]) MUST\n   NOT include characters\
    \ outside the set %x20-21 / %x23-5B / %x5D-7E.\n   Values for the \"error_uri\"\
    \ attribute (specified in Appendix A.9 of\n   [RFC6749]) MUST conform to the URI-reference\
    \ syntax and thus MUST NOT\n   include characters outside the set %x21 / %x23-5B\
    \ / %x5D-7E.\n   For example, in response to a protected resource request without\n\
    \   authentication:\n     HTTP/1.1 401 Unauthorized\n     WWW-Authenticate: Bearer\
    \ realm=\"example\"\n   And in response to a protected resource request with an\n\
    \   authentication attempt using an expired access token:\n     HTTP/1.1 401 Unauthorized\n\
    \     WWW-Authenticate: Bearer realm=\"example\",\n                       error=\"\
    invalid_token\",\n                       error_description=\"The access token\
    \ expired\"\n"
- title: 3.1.  Error Codes
  contents:
  - "3.1.  Error Codes\n   When a request fails, the resource server responds using\
    \ the\n   appropriate HTTP status code (typically, 400, 401, 403, or 405) and\n\
    \   includes one of the following error codes in the response:\n   invalid_request\n\
    \         The request is missing a required parameter, includes an\n         unsupported\
    \ parameter or parameter value, repeats the same\n         parameter, uses more\
    \ than one method for including an access\n         token, or is otherwise malformed.\
    \  The resource server SHOULD\n         respond with the HTTP 400 (Bad Request)\
    \ status code.\n   invalid_token\n         The access token provided is expired,\
    \ revoked, malformed, or\n         invalid for other reasons.  The resource SHOULD\
    \ respond with\n         the HTTP 401 (Unauthorized) status code.  The client\
    \ MAY\n         request a new access token and retry the protected resource\n\
    \         request.\n   insufficient_scope\n         The request requires higher\
    \ privileges than provided by the\n         access token.  The resource server\
    \ SHOULD respond with the HTTP\n         403 (Forbidden) status code and MAY include\
    \ the \"scope\"\n         attribute with the scope necessary to access the protected\n\
    \         resource.\n   If the request lacks any authentication information (e.g.,\
    \ the client\n   was unaware that authentication is necessary or attempted using\
    \ an\n   unsupported authentication method), the resource server SHOULD NOT\n\
    \   include an error code or other error information.\n   For example:\n     HTTP/1.1\
    \ 401 Unauthorized\n     WWW-Authenticate: Bearer realm=\"example\"\n"
- title: 4.  Example Access Token Response
  contents:
  - "4.  Example Access Token Response\n   Typically, a bearer token is returned to\
    \ the client as part of an\n   OAuth 2.0 [RFC6749] access token response.  An\
    \ example of such a\n   response is:\n     HTTP/1.1 200 OK\n     Content-Type:\
    \ application/json;charset=UTF-8\n     Cache-Control: no-store\n     Pragma: no-cache\n\
    \     {\n       \"access_token\":\"mF_9.B5f-4.1JqM\",\n       \"token_type\":\"\
    Bearer\",\n       \"expires_in\":3600,\n       \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\"\
    \n     }\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This section describes the relevant security\
    \ threats regarding token\n   handling when using bearer tokens and describes\
    \ how to mitigate these\n   threats.\n"
- title: 5.1.  Security Threats
  contents:
  - "5.1.  Security Threats\n   The following list presents several common threats\
    \ against protocols\n   utilizing some form of tokens.  This list of threats is\
    \ based on NIST\n   Special Publication 800-63 [NIST800-63].  Since this document\
    \ builds\n   on the OAuth 2.0 Authorization specification [RFC6749], we exclude\
    \ a\n   discussion of threats that are described there or in related\n   documents.\n\
    \   Token manufacture/modification:  An attacker may generate a bogus\n      token\
    \ or modify the token contents (such as the authentication or\n      attribute\
    \ statements) of an existing token, causing the resource\n      server to grant\
    \ inappropriate access to the client.  For example,\n      an attacker may modify\
    \ the token to extend the validity period; a\n      malicious client may modify\
    \ the assertion to gain access to\n      information that they should not be able\
    \ to view.\n   Token disclosure:  Tokens may contain authentication and attribute\n\
    \      statements that include sensitive information.\n   Token redirect:  An\
    \ attacker uses a token generated for consumption\n      by one resource server\
    \ to gain access to a different resource\n      server that mistakenly believes\
    \ the token to be for it.\n   Token replay:  An attacker attempts to use a token\
    \ that has already\n      been used with that resource server in the past.\n"
- title: 5.2.  Threat Mitigation
  contents:
  - "5.2.  Threat Mitigation\n   A large range of threats can be mitigated by protecting\
    \ the contents\n   of the token by using a digital signature or a Message Authentication\n\
    \   Code (MAC).  Alternatively, a bearer token can contain a reference to\n  \
    \ authorization information, rather than encoding the information\n   directly.\
    \  Such references MUST be infeasible for an attacker to\n   guess; using a reference\
    \ may require an extra interaction between a\n   server and the token issuer to\
    \ resolve the reference to the\n   authorization information.  The mechanics of\
    \ such an interaction are\n   not defined by this specification.\n   This document\
    \ does not specify the encoding or the contents of the\n   token; hence, detailed\
    \ recommendations about the means of\n   guaranteeing token integrity protection\
    \ are outside the scope of this\n   document.  The token integrity protection\
    \ MUST be sufficient to\n   prevent the token from being modified.\n   To deal\
    \ with token redirect, it is important for the authorization\n   server to include\
    \ the identity of the intended recipients (the\n   audience), typically a single\
    \ resource server (or a list of resource\n   servers), in the token.  Restricting\
    \ the use of the token to a\n   specific scope is also RECOMMENDED.\n   The authorization\
    \ server MUST implement TLS.  Which version(s) ought\n   to be implemented will\
    \ vary over time and will depend on the\n   widespread deployment and known security\
    \ vulnerabilities at the time\n   of implementation.  At the time of this writing,\
    \ TLS version 1.2\n   [RFC5246] is the most recent version, but it has very limited\
    \ actual\n   deployment and might not be readily available in implementation\n\
    \   toolkits.  TLS version 1.0 [RFC2246] is the most widely deployed\n   version\
    \ and will give the broadest interoperability.\n   To protect against token disclosure,\
    \ confidentiality protection MUST\n   be applied using TLS [RFC5246] with a ciphersuite\
    \ that provides\n   confidentiality and integrity protection.  This requires that\
    \ the\n   communication interaction between the client and the authorization\n\
    \   server, as well as the interaction between the client and the\n   resource\
    \ server, utilize confidentiality and integrity protection.\n   Since TLS is mandatory\
    \ to implement and to use with this\n   specification, it is the preferred approach\
    \ for preventing token\n   disclosure via the communication channel.  For those\
    \ cases where the\n   client is prevented from observing the contents of the token,\
    \ token\n   encryption MUST be applied in addition to the usage of TLS\n   protection.\
    \  As a further defense against token disclosure, the\n   client MUST validate\
    \ the TLS certificate chain when making requests\n   to protected resources, including\
    \ checking the Certificate Revocation\n   List (CRL) [RFC5280].\n   Cookies are\
    \ typically transmitted in the clear.  Thus, any\n   information contained in\
    \ them is at risk of disclosure.  Therefore,\n   bearer tokens MUST NOT be stored\
    \ in cookies that can be sent in the\n   clear.  See \"HTTP State Management Mechanism\"\
    \ [RFC6265] for security\n   considerations about cookies.\n   In some deployments,\
    \ including those utilizing load balancers, the\n   TLS connection to the resource\
    \ server terminates prior to the actual\n   server that provides the resource.\
    \  This could leave the token\n   unprotected between the front-end server where\
    \ the TLS connection\n   terminates and the back-end server that provides the\
    \ resource.  In\n   such deployments, sufficient measures MUST be employed to\
    \ ensure\n   confidentiality of the token between the front-end and back-end\n\
    \   servers; encryption of the token is one such possible measure.\n   To deal\
    \ with token capture and replay, the following recommendations\n   are made: First,\
    \ the lifetime of the token MUST be limited; one means\n   of achieving this is\
    \ by putting a validity time field inside the\n   protected part of the token.\
    \  Note that using short-lived (one hour\n   or less) tokens reduces the impact\
    \ of them being leaked.  Second,\n   confidentiality protection of the exchanges\
    \ between the client and\n   the authorization server and between the client and\
    \ the resource\n   server MUST be applied.  As a consequence, no eavesdropper\
    \ along the\n   communication path is able to observe the token exchange.\n  \
    \ Consequently, such an on-path adversary cannot replay the token.\n   Furthermore,\
    \ when presenting the token to a resource server, the\n   client MUST verify the\
    \ identity of that resource server, as per\n   Section 3.1 of \"HTTP Over TLS\"\
    \ [RFC2818].  Note that the client MUST\n   validate the TLS certificate chain\
    \ when making these requests to\n   protected resources.  Presenting the token\
    \ to an unauthenticated and\n   unauthorized resource server or failing to validate\
    \ the certificate\n   chain will allow adversaries to steal the token and gain\
    \ unauthorized\n   access to protected resources.\n"
- title: 5.3.  Summary of Recommendations
  contents:
  - "5.3.  Summary of Recommendations\n   Safeguard bearer tokens:  Client implementations\
    \ MUST ensure that\n      bearer tokens are not leaked to unintended parties,\
    \ as they will\n      be able to use them to gain access to protected resources.\
    \  This\n      is the primary security consideration when using bearer tokens\
    \ and\n      underlies all the more specific recommendations that follow.\n  \
    \ Validate TLS certificate chains:  The client MUST validate the TLS\n      certificate\
    \ chain when making requests to protected resources.\n      Failing to do so may\
    \ enable DNS hijacking attacks to steal the\n      token and gain unintended access.\n\
    \   Always use TLS (https):  Clients MUST always use TLS [RFC5246]\n      (https)\
    \ or equivalent transport security when making requests with\n      bearer tokens.\
    \  Failing to do so exposes the token to numerous\n      attacks that could give\
    \ attackers unintended access.\n   Don't store bearer tokens in cookies:  Implementations\
    \ MUST NOT store\n      bearer tokens within cookies that can be sent in the clear\
    \ (which\n      is the default transmission mode for cookies).  Implementations\n\
    \      that do store bearer tokens in cookies MUST take precautions\n      against\
    \ cross-site request forgery.\n   Issue short-lived bearer tokens:  Token servers\
    \ SHOULD issue\n      short-lived (one hour or less) bearer tokens, particularly\
    \ when\n      issuing tokens to clients that run within a web browser or other\n\
    \      environments where information leakage may occur.  Using\n      short-lived\
    \ bearer tokens can reduce the impact of them being\n      leaked.\n   Issue scoped\
    \ bearer tokens:  Token servers SHOULD issue bearer tokens\n      that contain\
    \ an audience restriction, scoping their use to the\n      intended relying party\
    \ or set of relying parties.\n   Don't pass bearer tokens in page URLs:  Bearer\
    \ tokens SHOULD NOT be\n      passed in page URLs (for example, as query string\
    \ parameters).\n      Instead, bearer tokens SHOULD be passed in HTTP message\
    \ headers or\n      message bodies for which confidentiality measures are taken.\n\
    \      Browsers, web servers, and other software may not adequately\n      secure\
    \ URLs in the browser history, web server logs, and other\n      data structures.\
    \  If bearer tokens are passed in page URLs,\n      attackers might be able to\
    \ steal them from the history data, logs,\n      or other unsecured locations.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  OAuth Access Token Type Registration
  contents:
  - "6.1.  OAuth Access Token Type Registration\n   This specification registers the\
    \ following access token type in the\n   OAuth Access Token Types registry defined\
    \ in [RFC6749].\n"
- title: 6.1.1.  The "Bearer" OAuth Access Token Type
  contents:
  - "6.1.1.  The \"Bearer\" OAuth Access Token Type\n   Type name:\n      Bearer\n\
    \   Additional Token Endpoint Response Parameters:\n      (none)\n   HTTP Authentication\
    \ Scheme(s):\n      Bearer\n   Change controller:\n      IETF\n   Specification\
    \ document(s):\n      RFC 6750\n"
- title: 6.2.  OAuth Extensions Error Registration
  contents:
  - "6.2.  OAuth Extensions Error Registration\n   This specification registers the\
    \ following error values in the OAuth\n   Extensions Error registry defined in\
    \ [RFC6749].\n"
- title: 6.2.1.  The "invalid_request" Error Value
  contents:
  - "6.2.1.  The \"invalid_request\" Error Value\n   Error name:\n      invalid_request\n\
    \   Error usage location:\n      Resource access error response\n   Related protocol\
    \ extension:\n      Bearer access token type\n   Change controller:\n      IETF\n\
    \   Specification document(s):\n      RFC 6750\n"
- title: 6.2.2.  The "invalid_token" Error Value
  contents:
  - "6.2.2.  The \"invalid_token\" Error Value\n   Error name:\n      invalid_token\n\
    \   Error usage location:\n      Resource access error response\n   Related protocol\
    \ extension:\n      Bearer access token type\n   Change controller:\n      IETF\n\
    \   Specification document(s):\n      RFC 6750\n"
- title: 6.2.3.  The "insufficient_scope" Error Value
  contents:
  - "6.2.3.  The \"insufficient_scope\" Error Value\n   Error name:\n      insufficient_scope\n\
    \   Error usage location:\n      Resource access error response\n   Related protocol\
    \ extension:\n      Bearer access token type\n   Change controller:\n      IETF\n\
    \   Specification document(s):\n      RFC 6750\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2246]    Dierks, T. and C. Allen, \"The TLS Protocol Version\
    \ 1.0\",\n                RFC 2246, January 1999.\n   [RFC2616]    Fielding, R.,\
    \ Gettys, J., Mogul, J., Frystyk, H.,\n                Masinter, L., Leach, P.,\
    \ and T. Berners-Lee, \"Hypertext\n                Transfer Protocol -- HTTP/1.1\"\
    , RFC 2616, June 1999.\n   [RFC2617]    Franks, J., Hallam-Baker, P., Hostetler,\
    \ J., Lawrence,\n                S., Leach, P., Luotonen, A., and L. Stewart,\
    \ \"HTTP\n                Authentication: Basic and Digest Access Authentication\"\
    ,\n                RFC 2617, June 1999.\n   [RFC2818]    Rescorla, E., \"HTTP\
    \ Over TLS\", RFC 2818, May 2000.\n   [RFC3986]    Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n                Resource Identifier (URI): Generic\
    \ Syntax\", STD 66,\n                RFC 3986, January 2005.\n   [RFC5234]   \
    \ Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n                Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5246]    Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer\n                Security (TLS) Protocol Version 1.2\"\
    , RFC 5246,\n                August 2008.\n   [RFC5280]    Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n                Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n                Infrastructure Certificate and Certificate\
    \ Revocation\n                List (CRL) Profile\", RFC 5280, May 2008.\n   [RFC6265]\
    \    Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n             \
    \   April 2011.\n   [RFC6749]    Hardt, D., Ed., \"The OAuth 2.0 Authorization\
    \ Framework\",\n                RFC 6749, October 2012.\n   [USASCII]    American\
    \ National Standards Institute, \"Coded Character\n                Set -- 7-bit\
    \ American Standard Code for Information\n                Interchange\", ANSI\
    \ X3.4, 1986.\n   [W3C.REC-html401-19991224]\n                Raggett, D., Le\
    \ Hors, A., and I. Jacobs, \"HTML 4.01\n                Specification\", World\
    \ Wide Web Consortium\n                Recommendation REC-html401-19991224, December\
    \ 1999,\n                <http://www.w3.org/TR/1999/REC-html401-19991224>.\n \
    \  [W3C.REC-webarch-20041215]\n                Jacobs, I. and N. Walsh, \"Architecture\
    \ of the World Wide\n                Web, Volume One\", World Wide Web Consortium\n\
    \                Recommendation REC-webarch-20041215, December 2004,\n       \
    \         <http://www.w3.org/TR/2004/REC-webarch-20041215>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [HTTP-AUTH]  Fielding, R., Ed., and J. Reschke,\
    \ Ed., \"Hypertext\n                Transfer Protocol (HTTP/1.1): Authentication\"\
    , Work\n                in Progress, October 2012.\n   [NIST800-63] Burr, W.,\
    \ Dodson, D., Newton, E., Perlner, R., Polk, T.,\n                Gupta, S., and\
    \ E. Nabbus, \"NIST Special Publication\n                800-63-1, INFORMATION\
    \ SECURITY\", December 2011,\n                <http://csrc.nist.gov/publications/>.\n\
    \   [OMAP]       Huff, J., Schlacht, D., Nadalin, A., Simmons, J.,\n         \
    \       Rosenberg, P., Madsen, P., Ace, T., Rickelton-Abdi, C.,\n            \
    \    and B. Boyer, \"Online Multimedia Authorization Protocol:\n             \
    \   An Industry Standard for Authorized Access to Internet\n                Multimedia\
    \ Resources\", April 2012,\n                <http://www.oatc.us/Standards/Download.aspx>.\n\
    \   [OpenID.Messages]\n                Sakimura, N., Bradley, J., Jones, M., de\
    \ Medeiros, B.,\n                Mortimore, C., and E. Jay, \"OpenID Connect Messages\n\
    \                1.0\", June 2012, <http://openid.net/specs/\n               \
    \ openid-connect-messages-1_0.html>.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The following people contributed to preliminary\
    \ versions of this\n   document: Blaine Cook (BT), Brian Eaton (Google), Yaron\
    \ Y. Goland\n   (Microsoft), Brent Goldman (Facebook), Raffi Krikorian (Twitter),\n\
    \   Luke Shepard (Facebook), and Allen Tom (Yahoo!).  The content and\n   concepts\
    \ within are a product of the OAuth community, the Web\n   Resource Authorization\
    \ Profiles (WRAP) community, and the OAuth\n   Working Group.  David Recordon\
    \ created a preliminary version of this\n   specification based upon an early\
    \ draft of the specification that\n   evolved into OAuth 2.0 [RFC6749].  Michael\
    \ B. Jones in turn created\n   the first version (00) of this specification using\
    \ portions of\n   David's preliminary document and edited all subsequent versions.\n\
    \   The OAuth Working Group has dozens of very active contributors who\n   proposed\
    \ ideas and wording for this document, including Michael\n   Adams, Amanda Anganes,\
    \ Andrew Arnott, Derek Atkins, Dirk Balfanz,\n   John Bradley, Brian Campbell,\
    \ Francisco Corella, Leah Culver, Bill de\n   hOra, Breno de Medeiros, Brian Ellin,\
    \ Stephen Farrell, Igor Faynberg,\n   George Fletcher, Tim Freeman, Evan Gilbert,\
    \ Yaron Y. Goland, Eran\n   Hammer, Thomas Hardjono, Dick Hardt, Justin Hart,\
    \ Phil Hunt, John\n   Kemp, Chasen Le Hara, Barry Leiba, Amos Jeffries, Michael\
    \ B. Jones,\n   Torsten Lodderstedt, Paul Madsen, Eve Maler, James Manger, Laurence\n\
    \   Miao, William J. Mills, Chuck Mortimore, Anthony Nadalin, Axel\n   Nennker,\
    \ Mark Nottingham, David Recordon, Julian Reschke, Rob\n   Richards, Justin Richer,\
    \ Peter Saint-Andre, Nat Sakimura, Rob Sayre,\n   Marius Scurtescu, Naitik Shah,\
    \ Justin Smith, Christian Stuebner,\n   Jeremy Suriel, Doug Tangren, Paul Tarjan,\
    \ Hannes Tschofenig, Franklin\n   Tse, Sean Turner, Paul Walker, Shane Weeden,\
    \ Skylar Woodward, and\n   Zachary Zeltsan.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   EMail: mbj@microsoft.com\n\
    \   URI:   http://self-issued.info/\n   Dick Hardt\n   Independent\n   EMail:\
    \ dick.hardt@gmail.com\n   URI:   http://dickhardt.org/\n"
