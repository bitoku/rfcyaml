- title: __initial_text__
  contents:
  - "                   Simple Network Management Protocol\n                     Distributed\
    \ Protocol Interface\n                              Version 2.0\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1. INTRODUCTION  . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1  Motivation  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2  Summary of Changes  . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     2. THEORY OF OPERATION . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n     2.1  Connection Establishment and Termination  . . . . . . .\
    \ . .  5\n     2.2  Registration  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     2.3  Normal Operation  . . . . . . . . . . . . . . . . . . . . .\
    \  6\n     2.4  DPI Architecture  . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     3. SNMP DPI PROTOCOL . . . . . . . . . . . . . . . . . . . . .   10\n  \
    \   3.1  Connection Establishment  . . . . . . . . . . . . . . . .   10\n    \
    \ 3.1.1  SNMP PDU to GET the Agent's DPI port  . . . . . . . . .   11\n     3.1.2\
    \  SNMP PDU Containing the RESPONSE to the GET   . . . . .   13\n     3.2  SNMP\
    \ DPI Packet Formats   . . . . . . . . . . . . . . . .   15\n     3.2.1  DPI Packet\
    \ Header   . . . . . . . . . . . . . . . . . .   15\n     3.2.2  OPEN  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .   16\n     3.2.3  CLOSE   . . . .\
    \ . . . . . . . . . . . . . . . . . . . .   18\n     3.2.4  ARE_YOU_THERE   .\
    \ . . . . . . . . . . . . . . . . . . .   19\n     3.2.5  REGISTER  . . . . .\
    \ . . . . . . . . . . . . . . . . . .   20\n     3.2.6  UNREGISTER  . . . . .\
    \ . . . . . . . . . . . . . . . . .   22\n     3.2.7  GET   . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .   23\n     3.2.8  GETNEXT   . . . . . . . .\
    \ . . . . . . . . . . . . . . .   24\n     3.2.9  GETBULK   . . . . . . . . .\
    \ . . . . . . . . . . . . . .   25\n     3.2.10  SET, COMMIT and UNDO   . . .\
    \ . . . . . . . . . . . . .   26\n     3.2.11  RESPONSE   . . . . . . . . . .\
    \ . . . . . . . . . . . .   29\n     3.2.12  TRAP   . . . . . . . . . . . . .\
    \ . . . . . . . . . . .   31\n     3.3  Constants and Values  . . . . . . . .\
    \ . . . . . . . . . .   33\n     3.3.1  Protocol Version and Release Values  \
    \ . . . . . . . . .   33\n     3.3.2  Packet Type Values  . . . . . . . . . .\
    \ . . . . . . . .   34\n     3.3.3  Variable Type Values  . . . . . . . . . .\
    \ . . . . . . .   35\n     3.3.4  Value Representation  . . . . . . . . . . .\
    \ . . . . . .   36\n     3.3.5  Character set selection   . . . . . . . . . .\
    \ . . . . .   36\n     3.3.6  Error Code Values for SNMP DPI RESPONSE packets\
    \   . . .   37\n     3.3.7  UNREGISTER Reason Codes   . . . . . . . . . . . .\
    \ . . .   40\n     3.3.8  CLOSE Reason Codes  . . . . . . . . . . . . . . . .\
    \ . .   41\n     4. DPI 2.0 MIB DEFINITION  . . . . . . . . . . . . . . . . .\
    \ .   41\n     5. SUBAGENT CONSIDERATIONS . . . . . . . . . . . . . . . . . .\
    \   42\n     5.1  DPI API   . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 43\n     5.2  Overview of Request Processing  . . . . . . . . . . . . .   44\n\
    \     5.2.1  GET Processing  . . . . . . . . . . . . . . . . . . . .   44\n  \
    \   5.2.2  SET Processing  . . . . . . . . . . . . . . . . . . . .   44\n    \
    \ 5.2.3  GETNEXT Processing  . . . . . . . . . . . . . . . . . .   46\n     5.2.4\
    \  GETBULK Processing  . . . . . . . . . . . . . . . . . .   47\n     5.2.5  OPEN\
    \ Request  . . . . . . . . . . . . . . . . . . . . .   48\n     5.2.6  CLOSE Request\
    \   . . . . . . . . . . . . . . . . . . . .   49\n     5.2.7  REGISTER Request\
    \  . . . . . . . . . . . . . . . . . . .   49\n     5.2.8  UNREGISTER Request\
    \  . . . . . . . . . . . . . . . . . .   50\n     5.2.9  TRAP Request  . . . .\
    \ . . . . . . . . . . . . . . . . .   51\n     5.2.10  ARE_YOU_THERE request \
    \ . . . . . . . . . . . . . . . .   51\n     5.2.11  How to query the DPI port.\
    \   . . . . . . . . . . . . .   51\n     6. REFERENCES  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .   51\n     7. SECURITY CONSIDERATIONS . . . . . .\
    \ . . . . . . . . . . . .   52\n     8. AUTHORS' ADDRESSES  . . . . . . . . .\
    \ . . . . . . . . . . .   53\n     9. SAMPLE SOURCES FOR ANONYMOUS FTP  . . .\
    \ . . . . . . . . . .   54\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   This RFC describes version 2.0 of a protocol that International\n\
    \   Business Machines Corporation (IBM) has been implementing in most of\n   its\
    \ SNMP agents to allow dynamic extension of supported MIBs.  Bell\n   Northern\
    \ Research (BNR) has also implemented a version of this\n   protocol in some of\
    \ its SNMP agents for the same reason.\n   The Simple Network Management Protocol\
    \ (SNMP [1]) Distributed\n   Protocol Interface (DPI) is an extension to SNMP\
    \ agents that permits\n   end-users to dynamically add, delete or replace management\
    \ variables\n   in the local Management Information Base without requiring\n \
    \  recompilation of the SNMP agent.  This is achieved by writing a so-\n   called\
    \ sub-agent that communicates with the agent via the SNMP-DPI.\n   For the author\
    \ of a sub-agent, the SNMP-DPI eliminates the need to\n   know the details of\
    \ ASN.1 [2] or SNMP PDU (Protocol Data Unit)\n   encoding/decoding [1, 3].\n \
    \  Versions 1.0 and 1.1 of this protocol have been in use within IBM\n   since\
    \ 1989 and is included in the SNMP agents for VM, MVS and OS/2.\n   Version 1.2\
    \ of this protocol has been in use within BNR since 1992.\n"
- title: 1.1  MOTIVATION
  contents:
  - "1.1  MOTIVATION\n   The Simple Network Management Protocol [1] defines a protocol\
    \ that\n   permits operations on a collection of variables.  This set of\n   variables\
    \ is called the Management Information Base (MIB) and a core\n   set of variables\
    \ has previously been defined [4, 5]; however, the\n   design of the MIB makes\
    \ provision for extension of this core set.\n   Thus, an enterprise or individual\
    \ can define variables of their own\n   which represent information of use to\
    \ them.  An example of a\n   potentially interesting variable which is not in\
    \ the core MIB would\n   be CPU utilization (percent busy).  Unfortunately, conventional\
    \ SNMP\n   agent implementations provide no means for an end-user to make\n  \
    \ available new variables.\n   Besides this, today there are many MIBs that people\
    \ want to implement\n   on a system.  Without a capability for sub-agents, this\
    \ requires all\n   the MIBs to be implemented in one big monolithic agent, which\
    \ is in\n   many cases undesirable.\n   The SNMP DPI addresses these issues by\
    \ providing a light-weight\n   mechanism by which a process can register the existence\
    \ of a MIB\n   variable or a MIB sub-tree with the SNMP agent.  Requests for the\n\
    \   variable(s) that are received by the SNMP agent are passed to the\n   process\
    \ acting as a sub-agent.  The sub-agent then returns an\n   appropriate answer\
    \ to the SNMP agent.  The SNMP agent eventually\n   packages an SNMP response\
    \ packet and sends the answer back to the\n   remote network management station\
    \ that initiated the request.\n   Remote network management stations have no knowledge\
    \ that the SNMP\n   agent calls on other processes to obtain an answer.  As far\
    \ as they\n   can tell, there is only one network management application (agent)\n\
    \   running on the host.\n   At the San Diego IETF (March 1992) a BOF was held\
    \ on multiplexing\n   SNMP agent's requirements.  Both the SMUX [6] and DPI [7]\
    \ protocols\n   were discussed, as well as other unpublished approaches.  There\
    \ was\n   also discussion regarding a need for a standard for multiplexing SNMP\n\
    \   agents or sub-agent support.  At the end of the BOF, however, there\n   was\
    \ not enough support for defining a standard.  This was due, at\n   least partially,\
    \ to a few well known SNMP authors who stated that the\n   proxy and party support\
    \ for SNMPv2 (SMP at the time) would solve the\n   problem.\n   Nevertheless,\
    \ questions continue to be raised about sub-agent support\n   (both in SNMP and\
    \ SNMP2 mail lists) in spite of both SNMPv2 [8] being\n   on the standard's track\
    \ and SMUX being changed to a historic RFC.\n   Furthermore, within IBM and BNR\
    \ we continue to see a substantial and\n   expanding use of the DPI protocol.\
    \  with positive results.\n   Therefore, we believe that there is a place for\
    \ a sub-agent protocol\n   and we again offer this new version as an experimental\
    \ protocol.  We\n   encourage people to try it and send us feedback.  Depending\
    \ on that\n   feedback, we may decide to try to get onto the standards track at\
    \ a\n   later time.\n   During discussions about sub-agent interfaces at the San\
    \ Diego BOF it\n   also became clear that we should reduce the focus on the API\
    \ for the\n   sub-agent programmers.  This RFC, therefore, specifies only the\n\
    \   protocol to distribute SNMP requests from the main SNMP agent to the\n   sub-agents.\
    \  Programmers can build one or more Programming APIs on\n   top of that protocol\
    \ as needed, and sample API code is available from\n   the authors of this document.\n"
- title: 1.2  SUMMARY OF CHANGES
  contents:
  - "1.2  SUMMARY OF CHANGES\n   The following changes have been made since the initial\
    \ definition of\n   SNMP-DPI [7].  Some of these resulted from comparing the SMUX\
    \ [6] and\n   DPI [7] protocols.\n     o   Documentation changes to cleanup and\
    \ be more specific in some\n         areas.  Among other things, this includes:\n\
    \         -   Defining that integers are in network byte order\n         -   Defining\
    \ the character set used for strings\n         -   Defining how DisplayStrings\
    \ are handled.\n         -   Including DPI20 MIB definition.\n     o   Removal\
    \ of the Programming API from the document.\n     o   Addition of new DPI packet\
    \ types:\n         -   SNMP_DPI_OPEN for a sub-agent to open a \"connection\"\
    \ with\n             the DPI SNMP capable agent.  The sub-agent must now\n   \
    \          identify itself and optionally provide a \"password\" for the\n   \
    \          connection.\n         -   SNMP_DPI_CLOSE for the agent or sub-agent\
    \ to close the\n             connection in a graceful way.\n         -   SNMP_DPI_ARE_YOU_THERE\
    \ for the sub-agent to verify that the\n             agent still knows about the\
    \ sub-agent.\n         -   SNMP_DPI_UNREGISTER for the agent or sub-agent to terminate\n\
    \             the registration of a MIB variable or MIB sub-tree.\n         -\
    \   SNMP_DPI_COMMIT which instructs the sub-agent to actually\n             commit\
    \ a previous SNMP_DPI_SET request.  This, together\n             with the UNDO,\
    \ allows DPI sub-agents to be compliant with\n             SNMP in the sense that\
    \ we can now handle the \"as if\n             simultaneous\" requirement.\n  \
    \       -   SNMP_DPI_UNDO which instructs the sub-agent to UNDO a SET\n      \
    \       or COMMIT if such is needed.\n     o   Changes to DPI packets:\n     \
    \    -   Multiple varBinds can now be exchanged in one DPI packet\n          \
    \   (for GET, GETNEXT, SET, TRAP).  The sub-agent can specify\n             the\
    \ maximum it wants to handle per packet.\n         -   The packet headers now\
    \ contain a packet-ID (similar to SNMP\n             request ID in SNMP PDU).\
    \  This allows to match RESPONSE\n             packets to REQUESTS, which is important\
    \ for UDP based\n             DPI-connections.\n         -   The SNMP_DPI_REGISTER\
    \ packet has new fields for time_out\n             and for requested priority.\n\
    \         -   The SNMP_DPI_TRAP packet allows to specify an enterprise\n     \
    \        OID.  In addition, the generic and specific trap types are\n        \
    \     now 4 octets, so that we can pass the types correctly.\n         -   In\
    \ general, the packets have a more consistent layout.\n     o   The agent now\
    \ sends a RESPONSE to a REGISTER request\n     o   Addition of SNMPv2 error codes\
    \ and value types.\n"
- title: 2.  THEORY OF OPERATION
  contents:
  - '2.  THEORY OF OPERATION

    '
- title: 2.1  CONNECTION ESTABLISHMENT AND TERMINATION
  contents:
  - "2.1  CONNECTION ESTABLISHMENT AND TERMINATION\n   Communication between the SNMP\
    \ Agent and its clients (sub-agents)\n   takes place via a communication mechanism.\
    \  The communication type\n   can be either a logical stream connection (via TCP,\
    \ for instance) or\n   an unreliable datagram connection (UDP, for instance).\
    \  It should be\n   noted that other stream oriented transport communication mechanisms\n\
    \   can also be used.  For example, the VM SNMP agent allows DPI\n   connections\
    \ over IUCV (Inter-User Communications Vehicle) [9, 10].\n   Other than the connection\
    \ establishment procedure, the protocol used\n   is identical in these environments.\n\
    \   In Unix the number of processes is limited by the number of file-\n   descriptors\
    \ that can be opened.  Since each TCP socket represents a\n   file-descriptor,\
    \ restricting SNMP-DPI protocol to TCP only\n   connections would limit the number\
    \ of sub-agents an agent could\n   support.  As a result, the some SNMP-DPI agents\
    \ support both TCP and\n   UDP socket type communication mechanisms for the SNMP-DPI\
    \ protocol.\n   Please note that in the following portion of this text the SNMP-DPI\n\
    \   agent is referred simply as the agent.\n   Once the transport connection has\
    \ been set up, the sub-agent must\n   also initialize the logical connection with\
    \ the agent.  To do so it\n   issues an OPEN request to the agent in which the\
    \ sub-agent uniquely\n   identifies itself and passes some other parameters to\
    \ the agent, such\n   as, the maximum number of varBinds per interaction it is\
    \ prepared to\n   handle, and the timeout the agent should use when waiting for\
    \ a\n   response from the sub-agent.\n   When the sub-agent prepares to stop or\
    \ cease operations, it first\n   issues a CLOSE to shut down the logical connection\
    \ with the agent,\n   and then closes the transport connection.\n"
- title: 2.2  REGISTRATION
  contents:
  - "2.2  REGISTRATION\n   A sub-agent supports a collection of MIB variables or object\n\
    \   identifiers (object IDs) that constitute its MIB (sub)tree.  Each of\n   these\
    \ object IDs consists of a group ID and an instance ID.  The\n   group ID is the\
    \ root of the sub-agent's MIB tree that it supports and\n   the point of registration\
    \ to the agent's MIB tree.  The instance ID\n   is the piece of the Object Identifier\
    \ that follows the group ID\n   (registration point), so it is not an instance\
    \ in the terms of the\n   SNMP definition of an instance.\n   Regardless of the\
    \ transport mechanism used, after establishing a\n   connection to the agent,\
    \ the sub-agent registers a branch (group ID)\n   to the Agent's MIB tree.  With\
    \ the registration request, the sub-\n   agent passes some parameters, such as,\
    \ requested priority and a\n   timeout value for this specific sub-tree.\n   The\
    \ agent sends back a response to indicate success or failure of the\n   registration\
    \ request.\n"
- title: 2.3  NORMAL OPERATION
  contents:
  - "2.3  NORMAL OPERATION\n   Once the sub-agent has set up both the physical and\
    \ logical\n   connection to the agent, and once it has successfully registered\
    \ the\n   sub-tree(s) of the MIB(s) that it supports, it waits for requests\n\
    \   from the SNMP agent or generates traps as required.\n"
- title: 2.4  DPI ARCHITECTURE
  contents:
  - "2.4  DPI ARCHITECTURE\n   These are the requests that can be initiated by the\
    \ SNMP agent:\n       GET, GETNEXT, GETBULK, SET, COMMIT, UNDO, UNREGISTER, and\
    \ CLOSE.\n   The first four of these correspond directly to SNMP requests that\
    \ a\n   network management station can make (By default a GETBULK request\n  \
    \ will be translated into multiple GETNEXT requests by the agent, but a\n   sub-agent\
    \ may request that the GETBULK be passed to it).  The COMMIT,\n   UNDO, UNREGISTER,\
    \ ARE_YOU_THERE and CLOSE requests are specific\n   SNMP-DPI requests.  The sub-agent\
    \ normally responds to a request with\n   a RESPONSE packet.  The CLOSE request\
    \ is an exception for which the\n   sub-agent only closes the physical connection.\n\
    \   These are the requests that can be initiated by a sub-agent:\n       OPEN,\
    \ REGISTER, TRAP, UNREGISTER, ARE_YOU_THERE and CLOSE.\n   The agent responds\
    \ to OPEN, REGISTER, UNREGISTER and ARE_YOU_THERE\n   with a RESPONSE packet.\
    \  The TRAP packet is just accepted and\n   forwarded by the agent without returning\
    \ any information to the sub-\n   agent.  The CLOSE packet is also just accepted\
    \ by the agent upon\n   which it closes the physical connection.\n   See Figure\
    \ 1 for an overview of the DPI packet flow.\n     -------------------------------------------------------------------\n\
    \     *---------------------------------*\n     |                            \
    \     |\n     |  SNMP Network                   |\n     |  Management Station\
    \             |\n     |                                 |\n     |---------------------------------|\n\
    \     |  SNMP Protocol                  |\n     *---------------------------------*\n\
    \           A      | Get         A\n           |      | GetNext     |  GetResponse\n\
    \      Trap |      | GetBulk     |\n           |      | Set         |\n      \
    \     |      V             |\n     *------------------------------*          \
    \   *-------------------*\n     |     SNMP Protocol            |             |\
    \   DPI Interface   |\n     |------------------------------|  Response   |   \
    \ *--------------|\n     |                       |      |<----------->|    | \
    \             |\n     |                       |      |             |    |    \
    \          |\n     |    SNMP Agent         |      |             |    |       \
    \       |\n     |                       |      | Get,GetNext |    |          \
    \    |\n     |                       |      | (GetBulk)   |    |   Client    \
    \ |\n     |                       |      | Set,Commit  |    |              |\n\
    \     |     A     *-----------+->    |  Undo       |    |              |\n   \
    \  |     |     | Get/Set   |      |------------>|    |     or       |\n     |\
    \ Trap|     | info      |      |             |    |              |\n     |   \
    \  |     |           | SNMP |             |    |              |\n     |-----+-----+-------*\
    \   |      |  trap       |    |   SNMP       |\n     |     |     V       |   |\
    \ DPI  |<------------|    |   Sub-Agent  |\n     |                   |   |   \
    \   |             |    |              |\n     | Statically Linked |   |      |\
    \             |    |              |\n     | Instrumentation   |   |      |   \
    \          |    |              |\n     |   (like MIB II)   |   |      |      \
    \       |    |              |\n     |                   |   |      |   close \
    \    |    |              |\n     |       A           |   |      | unregister \
    \ |    |              |\n     |-------+-----------|   |      |<----------->| \
    \   |              |\n     |       V           |   |      |             |    |\
    \              |\n     |                   |   |      |             |    |   \
    \           |\n     |                   |   |      | AreYouThere |    |      \
    \        |\n     | TCP/IP layers     |   |      |    open     |    |         \
    \     |\n     | Kernel            |   |      |  register   |    |            \
    \  |\n     |                   |   |      |<------------|    |              |\n\
    \     *------------------------------*             *-------------------*\n   \
    \  -------------------------------------------------------------------\n     Figure\
    \ 1. SNMP DPI overview\n     Remarks for Figure 1:\n     o   The SNMP agent communicates\
    \ with the SNMP manager via the\n         standard SNMP protocol.\n     o   The\
    \ SNMP agent communicates with some statically linked-in\n         instrumentation\
    \ (potentially for the MIB II), which in turn\n         talks to the TCP/IP layers\
    \ and kernel (operating system) in an\n         implementation-dependent manner.\n\
    \     o   An SNMP sub-agent, running as a separate process (potentially\n    \
    \     on another machine), can set up a connection with the agent.\n         The\
    \ sub-agent has an option to communicate with the SNMP agent\n         through\
    \ UDP or TCP sockets, or even through other mechanisms.\n     o   Once the connection\
    \ is established, the sub-agent issues a DPI\n         OPEN and one or more REGISTER\
    \ requests to register one or more\n         MIB sub-trees with the SNMP agent.\n\
    \     o   The SNMP agent responds to DPI OPEN and REGISTER requests with\n   \
    \      a RESPONSE packet, indicating success or failure.\n     o   The SNMP agent\
    \ will decode SNMP packets.\n         If such a packet contains a Get or GetNext\
    \ request for an\n         object in a sub-tree registered by a sub-agent, it\
    \ sends a\n         corresponding DPI packet to the sub-agent.\n         If the\
    \ request is for a GetBulk, then the agent translates it\n         into multiple\
    \ DPI GETNEXT packets and sends those to the\n         sub-agent.  However, the\
    \ sub-agent can request (in the REGISTER\n         packet) that a GETBULK be passed\
    \ to the sub-agent.\n         If the request is for a Set, then the agent uses\
    \ a 2-phase\n         commit scheme and sends the sub-agent a sequence of SET/COMMIT,\n\
    \         SET/UNDO or SET/COMMIT/UNDO DPI packets.\n     o   The SNMP sub-agent\
    \ sends responses back via a RESPONSE packet.\n     o   The SNMP agent then encodes\
    \ the reply into an SNMP packet and\n         sends it back to the requesting\
    \ SNMP manager.\n     o   If the sub-agent wants to report an important state\
    \ change, it\n         sends a DPI TRAP packet to the SNMP agent which will encode\
    \ it\n         into an SNMP trap packet and send it to the manager(s).\n     o\
    \   If the sub-agent wants to stop operations, it sends a DPI\n         UNREGISTER\
    \ and a DPI CLOSE packet to the agent.  The agent\n         sends a response to\
    \ an UNREGISTER request.\n     o   There is no RESPONSE to a CLOSE, the agent\
    \ just closes the DPI\n         connection.  A CLOSE implies an UNREGISTER for\
    \ all\n         registrations that exist for the DPI connection being CLOSED.\n\
    \     o   An agent can send DPI UNREGISTER (if a higher priority\n         registration\
    \ comes in or for other reasons) to the sub-agent,\n         the sub-agent then\
    \ responds with a DPI RESPONSE packet.\n     o   An agent can also (for whatever\
    \ reason) send a DPI CLOSE to\n         indicate it is terminating the DPI connection.\n\
    \     o   A sub-agent can send an ARE_YOU_THERE to verify that the\n         \"\
    connection\" is still open. If so, the agent sends a RESPONSE\n         with no\
    \ error, otherwise, it may send a RESPONSE with an error\n         indication,\
    \ or not react at all.\n"
- title: 3.  SNMP DPI PROTOCOL
  contents:
  - "3.  SNMP DPI PROTOCOL\n   This section describes the actual protocol used between\
    \ the SNMP\n   agent and sub-agents.\n"
- title: 3.1  CONNECTION ESTABLISHMENT
  contents:
  - "3.1  CONNECTION ESTABLISHMENT\n   In a TCP/IP environment, the SNMP agent listens\
    \ on an arbitrary\n   TCP/UDP port for a connection request from a sub-agent.\
    \  It is\n   important to realize that a well-known port is not used: every\n\
    \   invocation of the SNMP agent will potentially result in a different\n   TCP/UDP\
    \ port being used.\n   A sub-agent needs to determine this port number to establish\
    \ a\n   connection.  The sub-agent learns the port number from the agent by\n\
    \   sending it one conventional SNMP get-request PDU.  The port numbers\n   are\
    \ maintained by the SNMP agent as the objects whose identifiers\n   are:\n   \
    \     1.3.6.1.4.1.2.2.1.1.0    dpiPort.0       (old DPI 1.x form)\n        1.3.6.1.4.1.2.2.1.1.1.0\
    \  dpiPortForTCP.0\n        1.3.6.1.4.1.2.2.1.1.2.0  dpiPortForUDP.0\n   These\
    \ variables are registered under the IBM enterprise-specific\n   tree.  See 4,\
    \ \"DPI 2.0 MIB definition\" for more information.  The\n   SNMP agent replies\
    \ with a conventional SNMP response PDU that\n   contains the port number to be\
    \ used.  This response is examined by\n   the sub-agent and the port number is\
    \ extracted.  The sub-agent then\n   establishes the connection to the specified\
    \ port.\n   On the surface, this procedure appears to mean that the sub-agent\n\
    \   must be able to create and parse SNMP packets, but this is not the\n   case.\
    \  A DPI Application Programming Interface (API) normally\n   provides a library\
    \ routine, query_DPI_port(), which can be used to\n   generate and parse the required\
    \ SNMP packets.  This very small\n   routine (under 100 lines of C), does not\
    \ greatly increase the size of\n   any sub-agent.\n   NOTE: Since this RFC does\
    \ not define an API, the actual code of and\n   interface to a query_DPI_port()\
    \ type of function depends on the\n   implementation.\n   For completeness, byte-by-byte\
    \ descriptions of the packets to be\n   generated by an SNMP DPI API routine query_DPI_port()\
    \ are provided\n   below.  This is probably of little interest to most readers\
    \ and\n   reading the source of a query_DPI_port() function provides much of\n\
    \   the same information.\n"
- title: 3.1.1  SNMP PDU TO GET THE AGENT'S DPI PORT
  contents:
  - "3.1.1  SNMP PDU TO GET THE AGENT'S DPI PORT\n   As noted, before a TCP/UDP connection\
    \ to the SNMP agent can be made,\n   the sub-agent must learn which port that\
    \ the agent is listening on.\n   To do so, it can issue an SNMP GET for the variable\
    \ dpiPortForTCP.0\n   (1.3.6.1.4.1.2.2.1.1.1.0) or variable dpiPortForUDP.0\n\
    \   (1.3.6.1.4.1.2.2.1.1.2.0).\n   The SNMP PDU can be constructed as shown below.\
    \  This PDU must be\n   sent to UDP port 161 on the host where the agent runs\
    \ (probably the\n   same host where the sub-agent runs).\n   The (SNMPv1) packet\
    \ shown below is for the TCP port.\n     +-----------------------------------------------------------------+\n\
    \     | Table 1 (Page 1 of 2). SNMP GET PDU for dpiPortForTCP.0         |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | OFFSET        | VALUE          | FIELD                          |\n     +---------------+----------------+--------------------------------+\n\
    \     | 0             | 0x30           | ASN.1 header                   |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 1             | 37 + len       | PDU_length, see formula below  |\n     +---------------+----------------+--------------------------------+\n\
    \     | 2             | 0x02 0x01 0x00 | SNMP version:                  |\n  \
    \   |               |                | (integer,length=1,value=0)     |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ 5             | 0x04           | community name (string)        |\n     +---------------+----------------+--------------------------------+\n\
    \     | 6             | len            | length of community name       |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7             | community name | varies                         |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len       | 0xa0 0x1c      | SNMP GET request:              |\n  \
    \   |               |                | request_type=0xa0,length=0x1c  |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ 7 + len + 2   | 0x02 0x01 0x01 | SNMP request ID:               |\n     |  \
    \             |                | integer,length=1,ID=1          |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 5   | 0x02 0x01 0x00 | SNMP error status:             |\n  \
    \   |               |                | integer,length=1,error=0       |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ 7 + len + 8   | 0x02 0x01 0x00 | SNMP index:                    |\n     |  \
    \             |                | integer,length=1,index=0       |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 11  | 0x30 0x11      | varBind list, length=0x11      |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7 + len + 13  | 0x30 0x0f      | varBind, length=0x0f           |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 15  | 0x06 0x0b      | Object ID, length=0x0b         |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ +-----------------------------------------------------------------+\n     |\
    \ Table 1 (Page 2 of 2). SNMP GET PDU for dpiPortForTCP.0         |\n     +---------------+----------------+--------------------------------+\n\
    \     | OFFSET        | VALUE          | FIELD                          |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7 + len + 17  | 0x2b 0x06 0x01 | Object-ID:                     |\n     |\
    \               | 0x04 0x01 0x02 | 1.3.6.1.4.1.2.2.1.1.1          |\n     |  \
    \             | 0x02 0x01 0x01 | Object-instance: 0             |\n     |    \
    \           | 0x01 0x00      |                                |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 28  | 0x05 0x00      | null value, length=0           |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | NOTE:  Formula to calculate \"PDU_length\":                       |\n    \
    \ |                                                                 |\n     |\
    \   PDU_length =  length of version field and string tag (4 bytes)|\n     |  \
    \            +  length of community length field (1 byte)       |\n     |    \
    \          +  length of community name (depends...)           |\n     |      \
    \        +  length of SNMP GET request (32 bytes)           |\n     |        \
    \                                                         |\n     |          \
    \    =  37 + length of community name                   |\n     +-----------------------------------------------------------------+\n"
- title: 3.1.2  SNMP PDU CONTAINING THE RESPONSE TO THE GET
  contents:
  - "3.1.2  SNMP PDU CONTAINING THE RESPONSE TO THE GET\n   Assuming that no errors\
    \ occurred, the port is returned in the last\n   few octets of the received packet.\
    \  In the simple case, where the\n   port number will be between 1024 and 16,385,\
    \ the format of the packet\n   is shown below.\n   Note: In practice, the port\
    \ number can be any positive number in the\n   range from 1 through 65,535.  A\
    \ port number of 0 means that the agent\n   does not have a dpiPort defined for\
    \ the requested protocol.  So the\n   actual port value maybe in the last 1, 2\
    \ or 3 octets.  The sample\n   implementation code shows how to handle the response\
    \ to cover all\n   those cases, including error conditions.\n   Note: The (SNMPv1)\
    \ packet shown below is for the TCP port.\n     +-----------------------------------------------------------------+\n\
    \     | Table 2 (Page 1 of 3). SNMP RESPONSE PDU for dpiPortForTCP.0    |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | OFFSET        | VALUE          | FIELD                          |\n     +---------------+----------------+--------------------------------+\n\
    \     | 0             | 0x30           | ASN.1 header                   |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 1             | 39 + len       | length, see formula below      |\n     +---------------+----------------+--------------------------------+\n\
    \     +-----------------------------------------------------------------+\n  \
    \   | Table 2 (Page 2 of 3). SNMP RESPONSE PDU for dpiPortForTCP.0    |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ OFFSET        | VALUE          | FIELD                          |\n     +---------------+----------------+--------------------------------+\n\
    \     | 2             | 0x02 0x01 0x00 | version                        |\n  \
    \   |               |                | (integer,length=1,value=0)     |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ 5             | 0x04           | community name (string)        |\n     +---------------+----------------+--------------------------------+\n\
    \     | 6             | len            | length of community name       |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7             | community name |                                |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len       | 0xa2 0x1e      | SNMP RESPONSE:                 |\n  \
    \   |               |                | request_type=0xa2,length=0x1e  |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ 7 + len + 2   | 0x02 0x01 0x01 | SNMP request ID:               |\n     |  \
    \             |                | integer,length=1,ID=1          |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 5   | 0x02 0x01 0x00 | SNMP error status:             |\n  \
    \   |               |                | integer,length=1,error=0       |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ 7 + len + 8   | 0x02 0x01 0x00 | SNMP index:                    |\n     |  \
    \             |                | integer,length=1,index=0       |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 11  | 0x30 0x13      | varBind list, length=0x13      |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7 + len + 13  | 0x30 0x11      | varBind, length=0x11           |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 15  | 0x06 0x0b      | Object ID, length=0x0b         |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7 + len + 17  | 0x2b 0x06 0x01 | Object-ID:                     |\n     |\
    \               | 0x04 0x01 0x02 | 1.3.6.1.4.1.2.2.1.1.1          |\n     |  \
    \             | 0x02 0x01 0x01 | Object-instance: 0             |\n     |    \
    \           | 0x01 0x00      |                                |\n     +---------------+----------------+--------------------------------+\n\
    \     | 7 + len + 28  | 0x02 0x02      | integer, length=2              |\n  \
    \   +---------------+----------------+--------------------------------+\n    \
    \ | 7 + len + 30  | MSB LSB        | port number (MSB, LSB)         |\n     +---------------+----------------+--------------------------------+\n\
    \     +-----------------------------------------------------------------+\n  \
    \   | Table 2 (Page 3 of 3). SNMP RESPONSE PDU for dpiPortForTCP.0    |\n    \
    \ +---------------+----------------+--------------------------------+\n     |\
    \ NOTE:  Formula to calculate \"PDU_length\":                       |\n     |\
    \                                                                 |\n     |  \
    \ PDU_length =  length of version field and string tag (4 bytes)|\n     |    \
    \          +  length of community length field (1 byte)       |\n     |      \
    \        +  length of community name (depends...)           |\n     |        \
    \      +  length of SNMP RESPONSE (34 bytes)              |\n     |          \
    \                                                       |\n     |            \
    \  =  39 + length of community name                   |\n     +-----------------------------------------------------------------+\n"
- title: 3.2  SNMP DPI PACKET FORMATS
  contents:
  - "3.2  SNMP DPI PACKET FORMATS\n   Each request to, or response from, the agent\
    \ or sub-agent is\n   constructed as a \"packet\" and is written to the stream.\n\
    \   Each packet is prefaced with the length of the data remaining in the\n   packet.\
    \  The length is stored in network byte order, the most\n   significant byte (MSB)\
    \ first, least significant byte (LSB) last.  If\n   we consider a stream connection\
    \ (like TCP), the receiving side will\n   read the packet by doing something similar\
    \ to:\n          unsigned char len_bfr[2];\n          unsigned char *bfr;\n  \
    \        int len;\n          read(fd,len_bfr,2);\n          len = len_bfr[0] *\
    \ 256 + len_bfr[1];\n          bfr = malloc(len);\n          read(fd,bfr,len);\n\
    \   Note: The above example makes no provisions for error handling or a\n   read\
    \ returning less than the requested amount of data,and it is not\n   intended\
    \ to be used literally.\n"
- title: 3.2.1  DPI PACKET HEADER
  contents:
  - "3.2.1  DPI PACKET HEADER\n   The first part of every packet identifies the application\
    \ protocol\n   being used as well as some version information.  The protocol major\n\
    \   version is intended to indicate, in broad terms, what version of the\n   protocol\
    \ is used.  The protocol minor version is intended to identify\n   major incompatible\
    \ versions of the protocol.  The protocol release is\n   intended to indicate\
    \ incremental modifications to the protocol.  The\n   constants that are valid\
    \ for these fields are defined in Table 15.\n   The next field, present in all\
    \ packets, is the packet ID.  It\n   contains packet identification that can help\
    \ an agent or sub-agent\n   match responses with request.  This is useful with\
    \ UDP connections\n   over which packets can be lost.  The packet ID is a monotonically\n\
    \   increasing unsigned 16-bit integer which wraps at its maximum value.\n   The\
    \ next field, present in all packets, is the packet type.  It\n   indicates what\
    \ kind of packet we're dealing with (OPEN, REGISTER,\n   GET, GETNEXT, GETBULK,\
    \ SET, COMMIT, UNDO, TRAP, RESPONSE, UNREGISTER,\n   or CLOSE).  The permitted\
    \ values for this field are defined in Table\n   16.\n     +-----------------------------------------------------------------+\n\
    \     | Table 3. SNMP DPI packet header.  Present in all packets.       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type                                        |\n     +------------+----------------------------------------------------+\n\
    \   From this point onwards, the contents of the packet are defined by\n   the\
    \ protocol being used.  The remainder of this section describes:\n     o   Layout\
    \ of packets for the SNMP DPI protocol, version 2.0.\n     o   Constants as defined\
    \ with this version of the protocol.\n"
- title: 3.2.2  OPEN
  contents:
  - "3.2.2  OPEN\n   In order for a sub-agent to communicate with a DPI capable SNMP\n\
    \   agent, it must first send an SNMP DPI OPEN request to the agent to\n   setup\
    \ the \"connection\" with that agent.\n   Such a packet contains the standard\
    \ SNMP DPI header plus OPEN\n   specific data.  This data consists of:\n     o\
    \   a timeout value (in seconds).\n         This is a requested timeout value\
    \ to be used for all requests\n         for objects for which there is no timeout\
    \ value specified for\n         the sub-tree under which the object is registered.\
    \  If you\n         specify a zero timeout value, then the agent will use its\
    \ own\n         default timeout value.  If you want a larger value than the\n\
    \         default value, then you can specify it here. However, the agent\n  \
    \       may have a maximum value that you can never exceed. If you do\n      \
    \   ask for a larger timeout than that maximum, the agent will set\n         it\
    \ at the maximum it accepts.\n     o   the maximum number of varBinds per DPI\
    \ packet that the\n         sub-agent is prepared to handle.\n     o   Selected\
    \ character set to be used for the representation of the\n         OBJECT ID strings\
    \ and DisplayStrings.\n         The choices are the native character set (0) or\
    \ the ASCII\n         character set (1).  See 3.3.5, \"Character set selection\"\
    \n         for more information in character set selection.\n         An agent\
    \ may choose to support only the native character set.\n     o   null terminated\
    \ sub-agent ID, which is a unique ASN.1 OBJECT\n         identifier, so in dotted\
    \ ASN.1 notation.  This string is\n         represented in the selected character\
    \ set.\n     o   null terminated sub-agent description, which is a DisplayString\n\
    \         describing the sub-agent.  This string is represented in the\n     \
    \    selected character set.  This may be the null-string if there\n         is\
    \ no description.\n     o   optionally a password that the agent uses to validate\
    \ the\n         sub-agent.  It depends on the agent implementation if a\n    \
    \     password is required.  If no password is passed, the length\n         must\
    \ be specified as zero.\n   The sub-agent must expect a response indicating success\
    \ or failure.\n   See Table 19 for the valid codes in a DPI RESPONSE to a DPI\
    \ OPEN\n   request.\n   If the error_code in the RESPONSE is not SNMP_ERROR_DPI_noError,\
    \ then\n   the agent closes the connection.\n     +-----------------------------------------------------------------+\n\
    \     | Table 4. Layout SNMP DPI OPEN packet                            |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_OPEN                        |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | requested overall timeout (seconds, MSB to LSB)    |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10         | max varBinds per DPI packet (MSB to LSB)           |\n     +------------+----------------------------------------------------+\n\
    \     | 12         | Selected character set (0=Native, 1=ASCII)         |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 13         | null terminated sub-agent ID (OID)                 |\n     +------------+----------------------------------------------------+\n\
    \     | 13+L1      | null terminated sub-agent Description              |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 13+L2      | password length (zero if no password, MSB to LSB)  |\n     +------------+----------------------------------------------------+\n\
    \     | 15+L2      | password (if any)                                  |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | NOTE:                                                           |\n     |\
    \                                                                 |\n     | o\
    \   L1 = strlen(sub-agent ID) + 1                               |\n     | o  \
    \ L2 = L1 + strlen(sub-agent Description) + 1                 |\n     | o   OID\
    \ and Description strings use selected character set      |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.3  CLOSE
  contents:
  - "3.2.3  CLOSE\n   In order for a sub-agent to close the \"connection\" with the\
    \ DPI\n   capable SNMP agent, it must send an SNMP DPI CLOSE request to the\n\
    \   agent.  The agent will not send a response, but closes the physical\n   connection\
    \ and implicitly unregisters any sub-trees related to the\n   connection.\n  \
    \ An agent may also send to the sub-agent an SNMP DPI CLOSE packet that\n   contains\
    \ the standard SNMP DPI header plus CLOSE specific data.  This\n   data consists\
    \ of:\n     o   a reason code for closing.  See Table 21 for a list\n        \
    \ of valid reason codes.\n     +-----------------------------------------------------------------+\n\
    \     | Table 5. Layout SNMP DPI CLOSE packet                           |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_CLOSE                       |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | reason code (1 octet)                              |\n  \
    \   +------------+----------------------------------------------------+\n"
- title: 3.2.4  ARE_YOU_THERE
  contents:
  - "3.2.4  ARE_YOU_THERE\n   An ARE_YOU_THERE packet allows a sub-agent to determine\
    \ if it still\n   has a DPI connection with the agent.  This packet is necessary\n\
    \   because a sub-agent passively awaits requests from an agent and\n   normally\
    \ will not detect problems with an agent connection in a\n   timely manner.  (In\
    \ contrast, an agent becomes aware of any sub-agent\n   connection problem in\
    \ a timely manner because it sets a timeout when\n   sending request).\n   A sub-agent\
    \ can send a SNMP DPI ARE_YOU_THERE packet to an agent\n   which will then return\
    \ a RESPONSE with a zero error code and a a zero\n   error index if the connection\
    \ is healthy.  Otherwise, the agent may\n   return a RESPONSE with an error indication.\
    \  If the connection is\n   broken, the sub-agent will see no response at all.\n\
    \   An ARE_YOU_THERE packet contains the standard SNMP DPI header with no\n  \
    \ additional data.\n     +-----------------------------------------------------------------+\n\
    \     | Table 6. Layout SNMP DPI ARE_YOU_THERE packet                   |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_ARE_YOU_THERE               |\n     +------------+----------------------------------------------------+\n"
- title: 3.2.5  REGISTER
  contents:
  - "3.2.5  REGISTER\n   In order to register a branch in the MIB tree, an SNMP sub-agent\n\
    \   sends an SNMP DPI REGISTER packet to the agent.\n   Such a packet contains\
    \ the standard SNMP DPI header plus REGISTER\n   specific data.  This data consists\
    \ of:\n     o   a requested priority.\n         There are 2 special values, namely\
    \ minus one (-1, requests best\n         available priority) and zero (0, requests\
    \ next better priority\n         than the highest priority in use).  Any other\
    \ value requests a\n         specific priority or the next best priority if already\
    \ in use).\n         The lower the number, the better the priority.  An agent\
    \ will\n         send requests to only the one sub-agent that has registered\n\
    \         with the best priority.  The agent returns the actual priority\n   \
    \      assigned in the RESPONSE packet in the error_index field.\n     o   a requested\
    \ timeout.\n         If a zero value is specified, then the agent uses the timeout\n\
    \         value specified in the DPI OPEN request.\n         If you want a shorter\
    \ or longer timeout value for this specific\n         sub-tree, then you specify\
    \ it here.  The agent has a maximum\n         timeout it will allow in this field.\
    \  The agent will use this\n         value (or its maximum) to await a response\
    \ to requests for this\n         sub-tree.\n     o   an indication as to whether\
    \ the sub-agent wishes to handle MIB\n         view selection (SNMPv1 community\
    \ string authentication)\n         in subsequent GET, GETNEXT or SET, COMMIT,\
    \ UNDO requests.  Not\n         all DPI capable agents need to support this feature,\
    \ but they\n         must at least recognize this indication and give an appropriate\n\
    \         response if they do not support it.\n     o   an indication as to whether\
    \ the sub-agent wishes to handle the\n         GETBULK itself.  If not, then the\
    \ agent will translate a\n         GETBULK into multiple GETNEXT requests.\n \
    \        Not all DPI capable agents need to support this feature.  They\n    \
    \     may opt to always translate a GETBULK into multiple GETNEXT\n         requests.\
    \  In this case the agent will send the appropriate\n         RESPONSE to indicate\
    \ this.\n     o   the group ID (sub-tree) to be registered (with trailing dot).\n\
    \         The group ID is represented in the selected character set as\n     \
    \    specified in DPI OPEN packet.\n   The agent will respond with an SNMP DPI\
    \ RESPONSE packet indicating\n   registration error or success.  The packet ID\
    \ of the response will be\n   the same as that for the REGISTER request to which\
    \ this is a\n   response.\n   The group ID will be the same as that specified\
    \ in the REGISTER\n   request.  There will be no instance returned (e.g. NULL\
    \ string for\n   instance ID).  The value will be an SNMP_TYPE_NULL value with\
    \ a zero\n   length.\n     +-----------------------------------------------------------------+\n\
    \     | Table 7. Layout SNMP DPI REGISTER packet                        |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_REGISTER                    |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | requested priority (MSB to LSB)                    |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 12         | timeout in seconds (MSB to LSB)                    |\n     +------------+----------------------------------------------------+\n\
    \     | 14         | view selection (0 = you (agent) do, 1 = I do)      |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 15         | getbulk selection (0=use GetNext, 1=use GetBulk)   |\n     +------------+----------------------------------------------------+\n\
    \     | 16         | null terminated group ID (with trailing dot)       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | NOTE:                                                           |\n     |\
    \                                                                 |\n     | o\
    \   group ID string uses selected character set                 |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.6  UNREGISTER
  contents:
  - "3.2.6  UNREGISTER\n   In order to unregister a branch in the MIB tree, an SNMP\
    \ sub-agent\n   sends an SNMP DPI UNREGISTER packet to the agent.\n   Such a packet\
    \ contains the standard SNMP DPI header plus UNREGISTER\n   specific data: a null\
    \ terminated string (represented in the selected\n   character set) representing\
    \ the group ID in ASN.1 dotted notation and\n   an indication as to the reason\
    \ for the unregister (see table 14).\n   The agent will respond with an SNMP DPI\
    \ RESPONSE packet indicating\n   error or success.  The packet ID of the response\
    \ will be the same as\n   that for the UNREGISTER request to which this is a response.\n\
    \   The group ID will be the same as that specified in the UNREGISTER\n   request.\
    \  There will be no instance returned (e.g. NULL string for\n   instance ID).\
    \  The value will be an SNMP_TYPE_NULL value with a zero\n   length.\n     +-----------------------------------------------------------------+\n\
    \     | Table 8. Layout SNMP DPI UNREGISTER packet                      |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_UNREGISTER                  |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | reason code                                        |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 9          | null terminated group ID (with trailing dot)       |\n     +------------+----------------------------------------------------+\n\
    \     | NOTE:                                                           |\n  \
    \   |                                                                 |\n    \
    \ | o   group ID string uses selected character set                 |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.7  GET
  contents:
  - "3.2.7  GET\n   When the SNMP agent receives a PDU containing an SNMP GET request\
    \ for\n   a variable that resides in a sub-tree registered by a sub-agent, it\n\
    \   passes an SNMP DPI GET packet to the sub-agent.\n   Such a packet contains\
    \ the standard SNMP DPI header plus GET specific\n   data:\n     o   the community\
    \ name used in the SNMP PDU.  The length is zero\n         unless view handling\
    \ was selected by the sub-agent.  The length\n         is also zero if the SNMP\
    \ PDU was not in SNMPv1 format.\n     o   per varBind two null terminated strings\
    \ (in the selected\n         character set) representing the group and instance\
    \ ID in ASN.1\n         dotted notation.\n     +-----------------------------------------------------------------+\n\
    \     | Table 9. Layout SNMP DPI GET packet                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_GET                         |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | community name length (MSB to LSB)                 |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10         | community name (if any)                            |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L1      | null terminated group ID (with trailing dot)       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10+L2      | null terminated instance ID (no trailing dot)      |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L3      | optionally more varBinds (group/instance ID pairs) |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | NOTE:                                                           |\n     |\
    \                                                                 |\n     | o\
    \   L1 = length of community name                               |\n     | o  \
    \ L2 = L1 +  strlen(group ID) + 1                             |\n     | o   L3\
    \ = L2 +  strlen(instance ID) + 1                          |\n     | o   group\
    \ and instance ID strings use selected character set    |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.8  GETNEXT
  contents:
  - "3.2.8  GETNEXT\n   When the SNMP agent receives a PDU containing an SNMP GETNEXT\
    \ request\n   for a variable for which a sub-agent may be authoritative, it passes\n\
    \   an SNMP DPI GETNEXT packet to the sub-agent.\n   Such a packet contains the\
    \ standard SNMP DPI header plus GETNEXT\n   specific data:\n     o   the community\
    \ name used in the SNMP PDU.  The length is zero\n         unless view handling\
    \ was selected by the sub-agent.  The length\n         is also zero if the SNMP\
    \ PDU was not in SNMPv1 format.\n     o   per varBind two null terminated strings\
    \ (in the selected\n         character set) representing the group and instance\
    \ ID in ASN.1\n         dotted notation.\n     +-----------------------------------------------------------------+\n\
    \     | Table 10. Layout SNMP DPI GETNEXT packet                        |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_GETNEXT                     |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | community name length (MSB to LSB)                 |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10         | community name                                     |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L1      | null terminated group ID (with trailing dot)       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10+L2      | null terminated instance ID (no trailing dot)      |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L3      | optionally more varBinds (group/instance ID pairs) |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | NOTE:                                                           |\n     |\
    \                                                                 |\n     | o\
    \   L1 = length of community name                               |\n     | o  \
    \ L2 = L1 +  strlen(group ID) + 1                             |\n     | o   L3\
    \ = L2 +  strlen(instance ID) + 1                          |\n     | o   group\
    \ and instance ID strings use selected character set    |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.9  GETBULK
  contents:
  - "3.2.9  GETBULK\n   When the SNMP agent receives a PDU containing an SNMP GETBULK\
    \ request\n   that includes variables for which a sub-agent may be authoritative,\n\
    \   it checks if the sub-agent wants to handle the GETBULK itself (as\n   specified\
    \ at registration time).  If so, it sends an SNMP DPI GETBULK\n   packet to the\
    \ sub-agent.\n   Such a packet contains the standard SNMP DPI header plus GETBULK\n\
    \   specific data:\n     o   non-repeaters\n     o   max repetitions\n     o \
    \  per varBind two null terminated strings (in the selected\n         character\
    \ set) representing the group and instance ID in ASN.1\n         dotted notation.\n\
    \     +-----------------------------------------------------------------+\n  \
    \   | Table 11. Layout SNMP DPI GETBULK packet                        |\n    \
    \ +------------+----------------------------------------------------+\n     |\
    \ OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_GETBULK                     |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | non-repeaters (4 octets, MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 12         | max-repetitions (4 octets, MSB to LSB)             |\n     +------------+----------------------------------------------------+\n\
    \     | 16         | null terminated group ID (with trailing dot)       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 16+L1      | null terminated instance ID (no trailing dot)      |\n     +------------+----------------------------------------------------+\n\
    \     | 16+L2      | optionally more varBinds (group/instance ID pairs) |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | NOTE:                                                           |\n     |\
    \                                                                 |\n     | o\
    \   L1 = strlen(group ID) + 1                                   |\n     | o  \
    \ L2 = L1 +  strlen(instance ID) + 1                          |\n     | o   group\
    \ and instance ID strings use selected character set    |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.10  SET, COMMIT AND UNDO
  contents:
  - "3.2.10  SET, COMMIT AND UNDO\n   When the SNMP agent receives a PDU containing\
    \ an SNMP SET request for\n   a variable that is in a sub-tree registered by a\
    \ sub-agent, it passes\n   one of 3 sequences of SNMP DPI packets to the sub-agent:\n\
    \     o   SET, COMMIT\n         This is the normal sequence.  The SET request\
    \ is the first\n         phase.  The sub-agent must verify that the SET request\
    \ is valid\n         and that the resources needed are available.  The COMMIT\n\
    \         request comes next.  The sub-agent must now effectuate the SET\n   \
    \      request.\n     o   SET, UNDO\n         If an SNMP packet has a SET request\
    \ for multiple varBinds that\n         reside in different sub-trees, then the\
    \ agent first sends a SET\n         to all sub-agents.  If any sub-agent returns\
    \ an error on the\n         SET, then the agent sends UNDO to those sub-agents\
    \ that\n         returned no error on the SET, meaning the SET is being\n    \
    \     canceled.\n     o   SET, COMMIT, UNDO\n         In the very rare circumstance\
    \ where all sub-agents have\n         responded error-free to a SET and where\
    \ one of them fails to\n         perform the COMMIT, then the agent sends an UNDO\
    \ to all\n         involved sub-agents (also those who completed COMMIT).\n  \
    \       Sub-agents should try, to the best of their ability, to never\n      \
    \   let a commit fail and to undo an already committed set if asked\n        \
    \ to do so.\n   Such packets contain the standard SNMP DPI header plus SET specific\n\
    \   data:\n     o   the community name used in the SNMP PDU.  The length is zero\n\
    \         unless view handling was selected by the sub-agent.  The length\n  \
    \       is also zero if the SNMP PDU was not in SNMPv1 format.\n     o   per varBind:\n\
    \         -   two null terminated strings (in the selected character set)\n  \
    \           representing the group and instance ID in ASN.1 dotted\n         \
    \    notation.\n         -   the type, value length and value to be set.\n   \
    \      The permitted types for the type field are defined in Table 17.\n     \
    \    See 3.3.4, \"Value Representation\" for information on how the\n        \
    \ value data is represented in the packet value field.\n     +-----------------------------------------------------------------+\n\
    \     | Table 12. Layout SNMP DPI SET, COMMIT, UNDO packet              |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_SET/COMMIT/UNDO             |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | community name length (MSB to LSB)                 |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10         | community name                                     |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L1      | null terminated group ID (with trailing dot)       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10+L2      | null terminated instance ID (no trailing dot)      |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L3      | SNMP Variable Type Value                           |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10+L3+1    | Length of value (2 octets, MSB to LSB)             |\n     +------------+----------------------------------------------------+\n\
    \     | 10+L3+3    | Value                                              |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 10+L4      | optionally more varBinds (sequences of group ID,   |\n     |\
    \            | instance ID, Type, Length and Value)               |\n     +------------+----------------------------------------------------+\n\
    \     | NOTE:                                                           |\n  \
    \   |                                                                 |\n    \
    \ | o   L1 = length of community name                               |\n     |\
    \ o   L2 = L1 + strlen(group ID) + 1                              |\n     | o\
    \   L3 = L2 + strlen(instance ID) + 1                           |\n     | o  \
    \ L4 = L3 + 3 + length of value                               |\n     | o   group\
    \ and instance ID strings use selected character set    |\n     | o   OID and\
    \ DisplayString values use selected character set     |\n     | o   Integer values\
    \ are in network byte order                    |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.11  RESPONSE
  contents:
  - "3.2.11  RESPONSE\n   An SNMP sub-agent must respond to a GET, GETNEXT, GETBULK,\
    \ SET,\n   COMMIT, UNDO or UNREGISTER request that it has received from the\n\
    \   agent (unless it fails or has a bug ;-)).  To do so, it sends an SNMP\n  \
    \ DPI RESPONSE packet to the agent.\n   Such a packet contains the standard SNMP\
    \ DPI header plus RESPONSE\n   specific data:\n     o   an error_code,\n     o\
    \   an error_index,\n     o   plus for a successful GET, GETNEXT, or GETBULK,\
    \ the\n         name/type/length/value tuple(s) representing the returned\n  \
    \       object(s).  For each varBind this is described as:\n         -   two null\
    \ terminated strings (in the selected character set)\n             representing\
    \ the group and instance ID in ASN.1 dotted\n             notation.\n        \
    \ -   the type, value length and value of the object that is\n             returned.\n\
    \         The permitted types for the type field are defined in Table 17.\n  \
    \       See 3.3.4, \"Value Representation\" for information on how the\n     \
    \    value data is represented in the packet value field.\n   For an unsuccessful\
    \ GET, GETNEXT or GETBULK, the sub-agent does not\n   need to return any name/type/length/value\
    \ tuple(s), because by\n   definition, the varBind information is the same as\
    \ in the request to\n   which this is a response, and the agent still has that\
    \ information.\n   The group ID and the packet ID must always be the same as the\n\
    \   corresponding fields in request PDU which has prompted the RESPONSE.\n   If\
    \ the response is to a SET, COMMIT or UNDO request, there is no need\n   to return\
    \ any varBind information, because by definition, the varBind\n   information\
    \ is the same as in the request to which this is a\n   response, and the agent\
    \ still has that information.\n   If the response is to a REGISTER or UNREGISTER,\
    \ no variable\n   (instance) is being returned, so the instance ID is the NULL\
    \ string\n   (one 0x00 byte).  In the response to a REGISTER request indicating\n\
    \   success, the error index contains the priority assigned by the agent.\n  \
    \ If the response is to an OPEN, ARE_YOU_THERE or CLOSE, no varBind\n   data will\
    \ be passed, so no group ID, instance ID or value data. The\n   packet will only\
    \ include the header, the error code and the error\n   index.\n     +-----------------------------------------------------------------+\n\
    \     | Table 13. Layout SNMP DPI RESPONSE packet                       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type = SNMP_DPI_RESPONSE                    |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | error code (1 octet)                               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 9          | error index (4 octets, MSB to LSB)                 |\n     +------------+----------------------------------------------------+\n\
    \     | 15         | null terminated group ID (with trailing dot)       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 15+L1      | null terminated instance ID (no trailing dot)      |\n     +------------+----------------------------------------------------+\n\
    \     | 15+L2      | SNMP Variable Type Value                           |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 15+L2+1    | Length of value (MSB to LSB)                       |\n     +------------+----------------------------------------------------+\n\
    \     | 15+L2+3    | Value                                              |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 15+L3      | optionally more varBinds (sequences of group ID,   |\n     |\
    \            | instance ID, Type, Length and Value)               |\n     +------------+----------------------------------------------------+\n\
    \     | NOTE:                                                           |\n  \
    \   |                                                                 |\n    \
    \ | o   L1 = strlen(group ID) + 1                                   |\n     |\
    \ o   L2 = L1 + strlen(instance ID) + 1                           |\n     | o\
    \   L3 = L2 + 3 + length of value                               |\n     | o  \
    \ group and instance ID strings use selected character set    |\n     | o   OID\
    \ and DisplayString values use selected character set     |\n     | o   Integer\
    \ values are in network byte order                    |\n     +-----------------------------------------------------------------+\n"
- title: 3.2.12  TRAP
  contents:
  - "3.2.12  TRAP\n   An SNMP sub-agent can request the agent to generate an SNMPv1\
    \ or\n   SNMPv2 TRAP (depending on the trap destinations defined at the agent)\n\
    \   by sending an SNMP DPI TRAP packet to the agent.\n   Such a packet contains\
    \ the standard SNMP DPI header plus TRAP\n   specific data:\n     o   the generic\
    \ and specific trap codes\n     o   optionally a null terminated string (in the\
    \ selected character\n         set) representing the enterprise ID in ASN.1 dotted\
    \ notation.\n         This enterprise ID will be sent with the TRAP.  If the null\n\
    \         string is passed, then the agent uses the sub-agent Identifier\n   \
    \      (OID as passed with the DPI OPEN packet) as the Enterprise ID.\n     o\
    \   optionally a set of one or more name/type/length/value tuples.\n         representing\
    \ varBinds to be sent with the trap.  Each varBind\n         consists of:\n  \
    \       -   two null terminated strings (in the selected character set)\n    \
    \         representing the group and instance ID in ASN.1 dotted\n           \
    \  notation.\n         -   the type, value length and value of the object that\
    \ is\n             returned.\n         The permitted types for the type field\
    \ are defined in Table 17.\n         See 3.3.4, \"Value Representation\" for information\
    \ on how the\n         value data is represented in the packet value field.\n\
    \     +-----------------------------------------------------------------+\n  \
    \   | Table 14. Layout SNMP DPI TRAP packet                           |\n    \
    \ +------------+----------------------------------------------------+\n     |\
    \ OFFSET     | FIELD                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 0          | packet length to follow (MSB to LSB)               |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 2          | protocol major version                             |\n     +------------+----------------------------------------------------+\n\
    \     | 3          | protocol minor version                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 4          | protocol release                                   |\n     +------------+----------------------------------------------------+\n\
    \     | 5          | packet id (MSB to LSB)                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 7          | packet type - SNMP_DPI_TRAP                        |\n     +------------+----------------------------------------------------+\n\
    \     | 8          | SNMP generic trap code                             |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 12         | SNMP specific trap code                            |\n     +------------+----------------------------------------------------+\n\
    \     | 14         | null terminated enterprise ID (no trailing dot)    |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 14+L1      | null terminated group ID (with trailing dot)       |\n     +------------+----------------------------------------------------+\n\
    \     | 14+L2      | null terminated instance ID (no trailing dot)      |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 14+L3      | SNMP Variable Type Value                           |\n     +------------+----------------------------------------------------+\n\
    \     | 14+L3+1    | Length of value (MSB to LSB)                       |\n  \
    \   +------------+----------------------------------------------------+\n    \
    \ | 14+L3+3    | Value                                              |\n     +------------+----------------------------------------------------+\n\
    \     | 14+L4      | optionally more varBinds (sequences of group ID,   |\n  \
    \   |            | instance ID, Type, Length and Value)               |\n    \
    \ +------------+----------------------------------------------------+\n     |\
    \ NOTE:                                                           |\n     |  \
    \                                                               |\n     | o  \
    \ L1 = strlen(enterprise ID) + 1                              |\n     | o   L2\
    \ = L1 + strlen(group ID) + 1                              |\n     | o   L3 =\
    \ L1 + L2 + strlen(instance ID) + 1                      |\n     | o   L4 = L1\
    \ + L2 + L3 + 3 + length of Value                     |\n     | o   enterprise,\
    \ group and instance ID strings use selected      |\n     |     character set\
    \                                               |\n     | o   OID and DisplayString\
    \ values use selected character set     |\n     | o   Integer values are in network\
    \ byte order                    |\n     +-----------------------------------------------------------------+\n"
- title: 3.3  CONSTANTS AND VALUES
  contents:
  - "3.3  CONSTANTS AND VALUES\n   This section describes the constants that have\
    \ been defined for this\n   version of the SNMP DPI Protocol.\n"
- title: 3.3.1  PROTOCOL VERSION AND RELEASE VALUES
  contents:
  - "3.3.1  PROTOCOL VERSION AND RELEASE VALUES\n     +-----------------------------------------------------------------+\n\
    \     | Table 15. Protocol version and release values                   |\n  \
    \   +--------------------------------+--------------------------------+\n    \
    \ | FIELD                          | VALUE                          |\n     +--------------------------------+--------------------------------+\n\
    \     | protocol major version         | 2 (SNMP DPI protocol)          |\n  \
    \   +--------------------------------+--------------------------------+\n    \
    \ | protocol minor version         | 2 (version 2)                  |\n     +--------------------------------+--------------------------------+\n\
    \     | protocol release               | 0 (release 0)                  |\n  \
    \   +--------------------------------+--------------------------------+\n   Previous\
    \ versions of this protocol exist and should preferably be\n   supported by an\
    \ agent:\n     o   version 1, release 0, described in [7]\n   Previous internal\
    \ versions of this protocol exist and may or may not\n   be supported by an agent:\n\
    \     o   version 1, release 1, experimental within IBM.\n     o   version 1,\
    \ release 2, experimental within BNR.\n"
- title: 3.3.2  PACKET TYPE VALUES
  contents:
  - "3.3.2  PACKET TYPE VALUES\n     +-----------------------------------------------------------------+\n\
    \     | Table 16. Valid values for the packet type field                |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | VALUE | PACKET TYPE                                             |\n     +-------+---------------------------------------------------------+\n\
    \     | 1     | SNMP_DPI_GET                                            |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 2     | SNMP_DPI_GETNEXT                                        |\n     +-------+---------------------------------------------------------+\n\
    \     | 3     | SNMP_DPI_SET                                            |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 4     | SNMP_DPI_TRAP                                           |\n     +-------+---------------------------------------------------------+\n\
    \     | 5     | SNMP_DPI_RESPONSE                                       |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 6     | SNMP_DPI_REGISTER                                       |\n     +-------+---------------------------------------------------------+\n\
    \     | 7     | SNMP_DPI_UNREGISTER                                     |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 8     | SNMP_DPI_OPEN                                           |\n     +-------+---------------------------------------------------------+\n\
    \     | 9     | SNMP_DPI_CLOSE                                          |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 10    | SNMP_DPI_COMMIT                                         |\n     +-------+---------------------------------------------------------+\n\
    \     | 11    | SNMP_DPI_UNDO                                           |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 12    | SNMP_DPI_GETBULK                                        |\n     +-------+---------------------------------------------------------+\n\
    \     | 13    | SNMP_DPI_TRAPV2 (not yet used)                          |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 14    | SNMP_DPI_INFORM (not yet used)                          |\n     +-------+---------------------------------------------------------+\n\
    \     | 15    | SNMP_DPI_ARE_YOU_THERE                                  |\n  \
    \   +-------+---------------------------------------------------------+\n"
- title: 3.3.3  VARIABLE TYPE VALUES
  contents:
  - "3.3.3  VARIABLE TYPE VALUES\n     +-----------------------------------------------------------------+\n\
    \     | Table 17. Valid values for the Value Type field                 |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | VALUE | VALUE TYPE                                              |\n     +-------+---------------------------------------------------------+\n\
    \     | 129   | SNMP_TYPE_Integer32                                     |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 2     | SNMP_TYPE_OCTET_STRING                                  |\n     +-------+---------------------------------------------------------+\n\
    \     | 3     | SNMP_TYPE_OBJECT_IDENTIFIER                             |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 4     | SNMP_TYPE_NULL (empty, no value)                        |\n     +-------+---------------------------------------------------------+\n\
    \     | 5     | SNMP_TYPE_IpAddress                                     |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 134   | SNMP_TYPE_Counter32                                     |\n     +-------+---------------------------------------------------------+\n\
    \     | 135   | SNMP_TYPE_Gauge32                                       |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 136   | SNMP_TYPE_TimeTicks (1/100ths seconds)                  |\n     +-------+---------------------------------------------------------+\n\
    \     | 9     | SNMP_TYPE_DisplayString                                 |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 10    | SNMP_TYPE_BIT_STRING                                    |\n     +-------+---------------------------------------------------------+\n\
    \     | 11    | SNMP_TYPE_NsapAddress                                   |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 140   | SNMP_TYPE_UInteger32                                    |\n     +-------+---------------------------------------------------------+\n\
    \     | 13    | SNMP_TYPE_Counter64                                     |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 14    | SNMP_TYPE_Opaque                                        |\n     +-------+---------------------------------------------------------+\n\
    \     | 15    | SNMP_TYPE_noSuchObject                                  |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 16    | SNMP_TYPE_noSuchInstance                                |\n     +-------+---------------------------------------------------------+\n\
    \     | 17    | SNMP_TYPE_endOfMibView                                  |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ Notes:\n     1.  A 32-bit integer value has its base base type ORed with 128.\n\
    \     2.  DisplayString is a textual convention.  An SNMP PDU shows a\n      \
    \   type of OCTET_STRING for the value.  An agent can handle such\n         an\
    \ object as DisplayString if the object is included in some\n         form of\
    \ a compiled MIB for the agent.  If not, the agent passes\n         the value\
    \ as an OCTET_STRING.\n"
- title: 3.3.4  VALUE REPRESENTATION
  contents:
  - "3.3.4  VALUE REPRESENTATION\n   Values in the DPI packets are represented as\
    \ follows:\n     o   32-bit integers are 4-byte elements in network byte order,\
    \ MSB\n         (most significant byte) first, LSB (least significant byte)\n\
    \         last.  Example: '00000001'h represents 1.\n     o   64-bit integers\
    \ are 8-byte elements in network byte order, MSB\n         first, LSB last.\n\
    \         Example: '0000000100000001'h represents 4,294,967,297.\n     o   Object\
    \ Identifiers are NULL terminated strings in the selected\n         character\
    \ set, representing the OID in ASN.1 dotted notation.\n         The length includes\
    \ the terminating NULL.\n         Example ASCII: '312e332e362e312e322e312e312e312e3000'h\n\
    \         represents \"1.3.6.1.2.1.1.1.0\" which is sysDescr.0.\n         Example\
    \ EBCDIC: 'f14bf34bf64bf14bf24bf14bf14bf14bf000'h\n         represents \"1.3.6.1.2.1.1.1.0\"\
    \ which is sysDescr.0.\n     o   DisplayStrings are in the selected character\
    \ set.  The length\n         specifies the length of the string.\n         Example\
    \ ASCII: '6162630d0a'h represents \"abc\\r\\n\", no NULL.\n         Example EBCDIC:\
    \ '8182830d25'h represents \"abc\\r\\n\", no NULL.\n     o   IpAddress, NsapAddress\
    \ and Opaque are implicit OCTET_STRING, so\n         they are octets (e.g. IpAddress\
    \ in network byte order).\n     o   NULL has a zero length for the value, no value\
    \ data.\n     o   noSuchObject, noSuchInstance and endOfMibView are implicit NULL\n\
    \         and represented as such.\n     o   BIT_STRING is an OCTET_STRING of\
    \ the form uubbbb...bb, where\n         the first octet (uu) is 0x00-0x07 and\
    \ indicates the number of\n         unused bits in the last octet (bb). The bb\
    \ octets represent the\n         bit string itself, where bit zero (0) comes first\
    \ and so on.\n"
- title: 3.3.5  CHARACTER SET SELECTION
  contents:
  - "3.3.5  CHARACTER SET SELECTION\n   In the DPI OPEN packet, the sub-agent can\
    \ specify the character set\n   to be used for the representation of:\n     o\
    \   group and instance ID in the DPI REGISTER, UNREGISTER, GET,\n         GETNEXT,\
    \ GETBULK, SET, UNDO, COMMIT, RESPONSE and TRAP packets.\n     o   sub-agent ID\
    \ and sub-agent Description in DPI OPEN packet.\n     o   Object Identifiers in\
    \ the value field for a value of type\n         SNMP_TYPE_OBJECT_IDENTIFIER.\n\
    \     o   DisplayString in the value field for a value of type\n         SNMP_TYPE_DPI_DisplayString.\n\
    \   The choice is the native character set or the ASCII character set.\n   The\
    \ native set is the set native to the platform where the agent\n   runs.  If the\
    \ native set is ASCII, then character set selection is a\n   moot point.  On non-ASCII\
    \ based platforms, the agent must convert\n   between native and ASCII if the\
    \ native character set is chosen.\n"
- title: 3.3.6  ERROR CODE VALUES FOR SNMP DPI RESPONSE PACKETS
  contents:
  - "3.3.6  ERROR CODE VALUES FOR SNMP DPI RESPONSE PACKETS\n   When the RESPONSE\
    \ packet is a response to a GET, GETNEXT, GETBULK,\n   SET, COMMIT, or UNDO, then\
    \ the error code can have one of the\n   following values:\n     +-----------------------------------------------------------------+\n\
    \     | Table 18. Valid SNMP_ERROR values for RESPONSE error code       |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | VALUE | ERROR CODE                                              |\n     +-------+---------------------------------------------------------+\n\
    \     | 0     | SNMP_ERROR_noError                                      |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 1     | SNMP_ERROR_tooBig                                       |\n     +-------+---------------------------------------------------------+\n\
    \     | 2     | SNMP_ERROR_noSuchName (SNMPv1, do not use)              |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 3     | SNMP_ERROR_badValue (SNMPv1, do not use)                |\n     +-------+---------------------------------------------------------+\n\
    \     | 4     | SNMP_ERROR_readOnly (SNMPv1 do not use)                 |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 5     | SNMP_ERROR_genErr                                       |\n     +-------+---------------------------------------------------------+\n\
    \     | 6     | SNMP_ERROR_noAccess                                     |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 7     | SNMP_ERROR_wrongType                                    |\n     +-------+---------------------------------------------------------+\n\
    \     | 8     | SNMP_ERROR_wrongLength                                  |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 9     | SNMP_ERROR_wrongEncoding                                |\n     +-------+---------------------------------------------------------+\n\
    \     | 10    | SNMP_ERROR_wrongValue                                   |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 11    | SNMP_ERROR_noCreation                                   |\n     +-------+---------------------------------------------------------+\n\
    \     | 12    | SNMP_ERROR_inconsistentValue                            |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 13    | SNMP_ERROR_resourceUnavailable                          |\n     +-------+---------------------------------------------------------+\n\
    \     | 14    | SNMP_ERROR_commitFailed                                 |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 15    | SNMP_ERROR_undoFailed                                   |\n     +-------+---------------------------------------------------------+\n\
    \     | 16    | SNMP_ERROR_authorizationError                           |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 17    | SNMP_ERROR_notWritable                                  |\n     +-------+---------------------------------------------------------+\n\
    \     | 18    | SNMP_ERROR_inconsistentName                             |\n  \
    \   +-------+---------------------------------------------------------+\n   When\
    \ the RESPONSE packet is a response to an OPEN, REGISTER or\n   UNREGISTER, then\
    \ the error code can have one of the following values:\n     +-----------------------------------------------------------------+\n\
    \     | Table 19. Valid SNMP_ERROR_DPI values for RESPONSE error code   |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | VALUE | ERROR CODE                                              |\n     +-------+---------------------------------------------------------+\n\
    \     | 0     | SNMP_ERROR_DPI_noError                                  |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 101   | SNMP_ERROR_DPI_otherError                               |\n     +-------+---------------------------------------------------------+\n\
    \     | 102   | SNMP_ERROR_DPI_notFound                                 |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 103   | SNMP_ERROR_DPI_alreadyRegistered                        |\n     +-------+---------------------------------------------------------+\n\
    \     | 104   | SNMP_ERROR_DPI_higherPriorityRegistered                 |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 105   | SNMP_ERROR_DPI_mustOpenFirst                            |\n     +-------+---------------------------------------------------------+\n\
    \     | 106   | SNMP_ERROR_DPI_notAuthorized                            |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 107   | SNMP_ERROR_DPI_viewSelectionNotSupported                |\n     +-------+---------------------------------------------------------+\n\
    \     | 108   | SNMP_ERROR_DPI_getBulkSelectionNotSupported             |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 109   | SNMP_ERROR_DPI_duplicateSubAgentIdentifier              |\n     +-------+---------------------------------------------------------+\n\
    \     | 110   | SNMP_ERROR_DPI_invalidDisplayString                     |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 111   | SNMP_ERROR_DPI_characterSetSelectionNotSupported        |\n     +-------+---------------------------------------------------------+\n"
- title: 3.3.7  UNREGISTER REASON CODES
  contents:
  - "3.3.7  UNREGISTER REASON CODES\n   The following are valid reason codes in an\
    \ UNREGISTER packet.\n     +-----------------------------------------------------------------+\n\
    \     | Table 20. Valid UNREGISTER reason codes                         |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | VALUE | REASON CODE                                             |\n     +-------+---------------------------------------------------------+\n\
    \     | 1     | SNMP_UNREGISTER_otherReason                             |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 2     | SNMP_UNREGISTER_goingDown                               |\n     +-------+---------------------------------------------------------+\n\
    \     | 3     | SNMP_UNREGISTER_justUnregister                          |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 4     | SNMP_UNREGISTER_newRegistration                         |\n     +-------+---------------------------------------------------------+\n\
    \     | 5     | SNMP_UNREGISTER_higherPriorityRegistered                |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 6     | SNMP_UNREGISTER_byManager                               |\n     +-------+---------------------------------------------------------+\n\
    \     | 7     | SNMP_UNREGISTER_timeout                                 |\n  \
    \   +-------+---------------------------------------------------------+\n"
- title: 3.3.8  CLOSE REASON CODES
  contents:
  - "3.3.8  CLOSE REASON CODES\n   The following are valid reason codes in a CLOSE\
    \ packet.\n     +-----------------------------------------------------------------+\n\
    \     | Table 21. Valid CLOSE reason codes                              |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | VALUE | REASON CODE                                             |\n     +-------+---------------------------------------------------------+\n\
    \     | 1     | SNMP_CLOSE_otherReason                                  |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 2     | SNMP_CLOSE_goingDown                                    |\n     +-------+---------------------------------------------------------+\n\
    \     | 3     | SNMP_CLOSE_unsupportedVersion                           |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 4     | SNMP_CLOSE_protocolError                                |\n     +-------+---------------------------------------------------------+\n\
    \     | 5     | SNMP_CLOSE_authenticationFailure                        |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 6     | SNMP_CLOSE_byManager                                    |\n     +-------+---------------------------------------------------------+\n\
    \     | 7     | SNMP_CLOSE_timeout                                      |\n  \
    \   +-------+---------------------------------------------------------+\n    \
    \ | 8     | SNMP_CLOSE_openError                                    |\n     +-------+---------------------------------------------------------+\n"
- title: 4.  DPI 2.0 MIB DEFINITION
  contents:
  - "4.  DPI 2.0 MIB DEFINITION\n     DPI20-MIB DEFINITIONS ::= BEGIN\n     -- Objects\
    \ in this MIB are implemented in the local SNMP agent.\n        IMPORTS\n    \
    \            MODULE-IDENTITY, OBJECT-TYPE, snmpModules, enterprises\n        \
    \                FROM SNMPv2-SMI\n        ibm      OBJECT IDENTIFIER ::= { enterprises\
    \ 2 }\n        ibmDPI   OBJECT IDENTIFIER ::= { ibm 2 }\n        dpi20MIB OBJECT\
    \ IDENTIFIER ::= { ibmDPI 1 }\n     -- dpi20MIB MODULE-IDENTITY\n     --   LAST-UPDATED\
    \ \"9401210000Z\"\n     --   ORGANIZATION \"IBM Research - T.J. Watson Research\
    \ Center\"\n     --   CONTACT-INFO \"           Bert Wijnen\n     --         \
    \        Postal:    IBM International Operations\n     --                    \
    \        Watsonweg 2\n     --                            1423 ND Uithoorn\n  \
    \   --                            The Netherlands\n     --                 Tel:\
    \       +31 2975 53316\n     --                 Fax:       +31 2975 62468\n  \
    \   --                 E-mail:    wijnen@vnet.ibm.com\"\n     --   DESCRIPTION\
    \ \"MIB module describing DPI objects.\"\n     --   ::= { snmpModules x }\n  \
    \      dpiPort  OBJECT IDENTIFIER ::= { dpi20MIB 1 }\n        dpiPortForTCP  \
    \ OBJECT-TYPE\n                SYNTAX  INTEGER (0..65535)\n                ACCESS\
    \  read-only\n                STATUS  mandatory\n                DESCRIPTION \"\
    The TCP port number on which the agent\n                             listens for\
    \ DPI connections. A zero value\n                             means the agent\
    \ has no DPI TCP port.\"\n                ::= { dpiPort 1 }\n        dpiPortForUDP\
    \   OBJECT-TYPE\n                SYNTAX  INTEGER (0..65535)\n                ACCESS\
    \  read-only\n                STATUS  mandatory\n                DESCRIPTION \"\
    The UDP port number on which the agent\n                             listens for\
    \ DPI packets. A zero value\n                             means the agent has\
    \ no DPI UDP port.\"\n                ::= { dpiPort 2 }\n     END\n"
- title: 5.  SUBAGENT CONSIDERATIONS
  contents:
  - "5.  SUBAGENT CONSIDERATIONS\n   When implementing a sub-agent, it is strongly\
    \ recommended to use the\n   DPI version 2 approach (SNMPv2 based).  This means:\n\
    \     o   Use SNMPv2 error codes only (even though we have definitions\n     \
    \    for the old SNMPv1 error codes).\n     o   Do implement SET, COMMIT, UNDO\
    \ processing properly.\n     o   For GET requests, use the SNMPv2 approach and\
    \ pass back\n         noSuchInstance or noSuchObject value if such is the case.\n\
    \         Continue to process all remaining varBinds in this case.\n     o   For\
    \ GETNEXT, use the SNMPv2 approach and pass back endOfMibView\n         value\
    \ if such is the case.  Continue to process all remaining\n         varBinds in\
    \ this case.\n     o   When you are processing a request from the agent (GET,\
    \ GETNEXT,\n         GETBULK, SET, COMMIT, UNDO) you are supposed to respond within\n\
    \         the timeout period (which you can specify in the OPEN and\n        \
    \ REGISTER packets). If you fail to respond within that timeout\n         period,\
    \ the agent will most probably close your DPI connection\n         and then discard\
    \ your RESPONSE packet if it comes in later.  If\n         you can detect that\
    \ the response is not going to make it in\n         time, then you might decide\
    \ to abort the request and return an\n         SNMP_ERROR_genErr in the RESPONSE.\n\
    \     o   If you have a UDP \"connected\" sub-agent, or one that uses\n      \
    \   another unreliable protocol, you may want to issue an SNMP DPI\n         ARE_YOU_THERE\
    \ request once in a while to ensure that the agent\n         is still alive and\
    \ still knows about you.\n     o   When you are running on an EBCDIC based machine,\
    \ and you use\n         the (default) native character set, then all OID strings\
    \ (as\n         used for things like group ID, instance ID, Enterprise ID,\n \
    \        sub-agent ID) and also all variable values of type\n         OBJECT_IDENTIFIER\
    \ or DisplayString will be passed to you in\n         EBCDIC format.  When you\
    \ return a response, you should then\n         also use EBCDIC FORMAT.\n     o\
    \   When you are running on an EBCDIC based machine, and you use\n         the\
    \ ASCII character set (specified in DPI OPEN), then all OID\n         strings\
    \ (as used for things like group ID, instance ID,\n         Enterprise ID, sub-agent\
    \ ID) and also all variable values of\n         type OBJECT_IDENTIFIER or DisplayString\
    \ will be passed to you\n         in ASCII format.  When you return a response,\
    \ you should then\n         also use ASCII FORMAT.\n     o   When you are running\
    \ on an ASCII machine, then the character\n         set selection for you basically\
    \ is moot.  Except maybe when you\n         connect to an EBCDIC based agent,\
    \ in which case you may want to\n         specify in the DPI OPEN packet that\
    \ you want to use ASCII\n         character set. After that, all this is transparent\
    \ to you and\n         the burden of conversion is on the EBCDIC based agent.\n\
    \     o   Please realize that DisplayString is only a textual convention.\n  \
    \       In the SNMP PDU (SNMP packet), the type is just an\n         OCTET_STRING,\
    \ and from that it is not clear if this is a\n         DisplayString or any arbitrary\
    \ data.  This means that the agent\n         can only know about an object being\
    \ a DisplayString if the\n         object is included in some sort of a compiled\
    \ MIB.  If it is,\n         then the agent will use SNMP_TYPE_DisplayString in\
    \ the type\n         field of the varBind in a DPI SET packet.  When you send\
    \ a\n         DisplayString in a RESPONSE packet, the agent will handle it as\n\
    \         such (e.g. translate EBCDIC to ASCII if needed).\n"
- title: 5.1  DPI API
  contents:
  - "5.1  DPI API\n   The primary goal of this document is to specify the SNMP DPI,\
    \ a\n   protocol by which sub-agents can exchange SNMP related information\n \
    \  with an agent. On top of this protocol, one can imagine one or\n   possibly\
    \ many Application Programming Interfaces, but those are not\n   addressed in\
    \ this document.\n   However, in order to provide an environment that is more\
    \ or less\n   platform independent, we strongly suggest to also define a DPI API.\n\
    \   We have a sample DPI API available, see 9, \"Sample Sources for\n   Anonymous\
    \ FTP\" for a place to obtain that sample DPI API.\n"
- title: 5.2  OVERVIEW OF REQUEST PROCESSING
  contents:
  - '5.2  OVERVIEW OF REQUEST PROCESSING

    '
- title: 5.2.1  GET PROCESSING
  contents:
  - "5.2.1  GET PROCESSING\n   A GET request is the easiest to process.  The DPI GET\
    \ packet holds\n   one or more varBinds that the sub-agent has taken responsibility\
    \ for.\n   If the sub-agent encounters an error while processing the request,\
    \ it\n   creates a DPI RESPONSE packet with an appropriate error indication in\n\
    \   the error_code field and sets the error_index to the position of the\n   varBind\
    \ at which the error occurs (first varBind is index 1, second\n   varBind is index\
    \ 2, and so on).  No name/type/length/value\n   information needs to be provided\
    \ in the packet, because by\n   definition, the varBind information is the same\
    \ as in the request to\n   which this is a response, and the agent still has that\
    \ information.\n   If there are no errors, then the sub-agent creates a DPI RESPONSE\n\
    \   packet in which the error_code is set to SNMP_ERROR_noError (zero)\n   and\
    \ error_index is set to zero.  The packet must also include the\n   name/type/length/value\
    \ of each varBind requested.  When you get a\n   request for a non-existing object\
    \ or a non-existing instance of an\n   object, then you must return a NULL value\
    \ with a type of\n   SNMP_TYPE_noSuchObject or SNMP_TYPE_noSuchInstance respectively.\n\
    \   These two values are not considered errors, so the error_code and\n   error_index\
    \ should be zero.\n   The DPI RESPONSE packet is then sent back to the agent.\n"
- title: 5.2.2  SET PROCESSING
  contents:
  - "5.2.2  SET PROCESSING\n   Processing a DPI SET request is more difficult than\
    \ a DPI GET\n   request.  In the case of a DPI SET packet, additional information\
    \ is\n   available in the packet, namely the value type, value length and\n  \
    \ value to be set.\n   If the sub-agent encounters an error while processing the\
    \ request, it\n   creates a DPI RESPONSE packet with an appropriate error indication\
    \ in\n   the error_code field and an error_index listing the position of the\n\
    \   varBind at which the error occurs (first varBind is index 1, second\n   varBind\
    \ is index 2, and so on).  No name/type/length/value\n   information needs to\
    \ provided in the packet, because by definition,\n   the varBind information is\
    \ the same as in the request to which this\n   is a response, and the agent still\
    \ has that information.\n   If there are no errors, then the sub-agent creates\
    \ a DPI RESPONSE\n   packet in which the error_code is set to SNMP_ERROR_noError\
    \ (zero)\n   and error_index is set to zero.  No name/type/length/value\n   information\
    \ is needed; by definition the RESPONSE to a SET should\n   contain exactly the\
    \ same varBind data as the data present in the\n   request, so the agent can use\
    \ the values it already has.  (This\n   suggests that the agent must keep state\
    \ information, and that is\n   indeed the case.  It needs to do that anyway in\
    \ order to be able to\n   later pass the data with a DPI COMMIT or DPI UNDO packet).\
    \  The sub-\n   agent must have allocated the required resources and prepared\
    \ itself\n   for the SET.  It does not yet effectuate the set, that will be done\n\
    \   at COMMIT time.\n   The sub-agent sends a DPI RESPONSE packet (indicating\
    \ success or\n   failure for the preparation phase) back to the agent.\n   The\
    \ agent will then issue a SET request for all other varBinds in the\n   same original\
    \ SNMP request it received.  This may be to the same or\n   to one or more different\
    \ sub-agents.  Once all SET requests have\n   returned a \"no error\" condition,\
    \ the agent starts sending DPI COMMIT\n   packets to the sub-agent(s).  If any\
    \ SET request returns an error,\n   then the agent sends DPI UNDO packets to those\
    \ sub-agents that\n   indicated successful processing of the SET preparation phase.\n\
    \   When the sub-agent receives the DPI COMMIT packet, again all the\n   varBind\
    \ information will be available in the packet.  The sub-agent\n   can now effectuate\
    \ the SET request.\n   If the sub-agent encounters an error while processing the\
    \ COMMIT\n   request, it creates a DPI RESPONSE packet with value\n   SNMP_ERROR_commitFailed\
    \ in the error_code field and an error_index\n   that lists at which varBind the\
    \ error occurs (first varBind is index\n   1 and so on).  No name/type/length/value\
    \ information is needed.  The\n   fact that a commitFailed error exists does not\
    \ mean that this error\n   should be returned easily.  A sub-agent should do all\
    \ that is\n   possible to make a COMMIT succeed.\n   If there are no errors, and\
    \ the SET/COMMIT has been effectuated with\n   success, then the sub-agent creates\
    \ a DPI RESPONSE packet in which\n   the error_code is set to SNMP_ERROR_noError\
    \ (zero) and error_index is\n   set to zero.  No name/type/length/value information\
    \ is needed.\n   So far we have discussed a SET, COMMIT sequence.  That happens\
    \ if all\n   goes well.  However, after a successful SET, the sub-agent may\n\
    \   receive a DPI UNDO packet.  The sub-agent must now undo any\n   preparations\
    \ it made during the SET processing (like free allocated\n   memory and such).\
    \  Even after a COMMIT, a sub-agent may still receive\n   a DPI UNDO packet. \
    \ This is the case if some other sub-agent could\n   not complete a COMMIT request.\
    \  Because of the SNMP-requirement that\n   all varBinds in a single SNMP SET\
    \ request must be changed \"as if\n   simultaneous\", all committed changes must\
    \ be undone if any of the\n   COMMIT requests fail.  In this case the sub-agent\
    \ must try and undo\n   the committed SET operation.\n   If the sub-agent encounters\
    \ an error while processing the UNDO\n   request, it creates a DPI RESPONSE packet\
    \ with value\n   SNMP_ERROR_undoFailed in the error_code field and an error_index\
    \ that\n   lists at which varBind the error occurs (first varBind is index 1 and\n\
    \   so on).  No name/type/length/value information is needed.  The fact\n   that\
    \ an undoFailed error exists does not mean that this error should\n   be returned\
    \ easily.  A sub-agent should do all that is possible to\n   make an UNDO succeed.\n\
    \   If there are no errors, and the UNDO has been effectuated with\n   success,\
    \ then the sub-agent creates a DPI RESPONSE packet in which\n   the error_code\
    \ is set to SNMP_ERROR_noError (zero) and error_index is\n   set to zero.  No\
    \ name/type/length/value information is needed.\n"
- title: 5.2.3  GETNEXT PROCESSING
  contents:
  - "5.2.3  GETNEXT PROCESSING\n   GETNEXT requests are a bit more complicated to\
    \ process than a GET.\n   The DPI GETNEXT packet contains the object(s) on which\
    \ the GETNEXT\n   operation must be performed.  The semantics of the operation\
    \ are that\n   the sub-agent is to return the name/type/length/value of the next\n\
    \   variable it supports whose (ASN.1) name lexicographically follows the\n  \
    \ one passed in the group ID (sub-tree) and instance ID.\n   In this case, the\
    \ instance ID may not be present (NULL) implying that\n   the NEXT object must\
    \ be the first instance of the first object in the\n   sub-tree that was registered.\n\
    \   It is important to realize that a given sub-agent may support several\n  \
    \ discontiguous sections of the MIB tree.  In such a situation it would\n   be\
    \ incorrect to jump from one section to another.  This problem is\n   correctly\
    \ handled by examining the group ID in the DPI packet.  This\n   group ID represents\
    \ the \"reason\" why the sub-agent is being called.\n   It holds the prefix of\
    \ the tree that the sub-agent had indicated it\n   supported (registered).\n \
    \  If the next variable supported by the sub-agent does not begin with\n   that\
    \ prefix, the sub-agent must return the same object instance as in\n   the request\
    \ (e.g. group ID and instance ID) with a value of\n   SNMP_TYPE_endOfMibView (implied\
    \ NULL value).  This endOfMibView is\n   not considered an error, so the error_code\
    \ and error_index should be\n   zero.  If required, the SNMP agent will call upon\
    \ the sub-agent\n   again, but pass it a different group ID (prefix).  This is\n\
    \   illustrated in the discussion below.\n   Assume there are two sub-agents.\
    \  The first sub-agent registers two\n   distinct sections of the tree, A and\
    \ C.  In reality, the sub-agent\n   supports variables A.1 and A.2, but it correctly\
    \ registers the\n   minimal prefix required to uniquely identify the variable\
    \ class it\n   supports.\n   The second sub-agent registers a different section,\
    \ B, which appears\n   between the two sections registered by the first agent.\n\
    \   If a management station begins dumping the MIB, starting from A, the\n   following\
    \ sequence of queries of the form get-next(group ID, instance\n   ID) would be\
    \ performed:\n       Sub-agent 1 gets called:\n              get-next(A,none)\
    \ = A.1\n              get-next(A,1)    = A.2\n              get-next(A,2)   \
    \ = endOfMibView\n       Sub-agent 2 is then called:\n              get-next(B,none)\
    \ = B.1\n              get-next(B,1)    = endOfMibView\n       Sub-agent 1 gets\
    \ called again:\n              get-next(C,none) = C.1\n"
- title: 5.2.4  GETBULK PROCESSING
  contents:
  - "5.2.4  GETBULK PROCESSING\n   You can ask the agent to translate GETBULK requests\
    \ into multiple\n   GETNEXT requests.  This is basically the default and it is\
    \ specified\n   in the DPI REGISTER packet.  In principle, we expect the majority\
    \ of\n   DPI sub-agents to run on the same machine as the agent (or otherwise,\n\
    \   on the same physical network), so repetitive GETNEXT requests stay\n   local\
    \ and in general should not be a problem.\n   If experience tells us different,\
    \ the sub-agent can tell the agent to\n   pass on a DPI GETBULK packet.\n   When\
    \ a GETBULK request is received, the sub-agent must process the\n   request and\
    \ send a RESPONSE that sends back as many varBinds as\n   requested by the request,\
    \ as long as they fit with in the buffers.\n   The GETBULK requires similar processing\
    \ as a GETNEXT with regard to\n   endOfMibView handling.\n"
- title: 5.2.5  OPEN REQUEST
  contents:
  - "5.2.5  OPEN REQUEST\n   As the very first step, a DPI sub-agent must open a \"\
    connection\" with\n   the agent.  To do so, it must send a DPI OPEN packet in\
    \ which these\n   things must be specified:\n     o   The max timeout value in\
    \ seconds.  The agent is requested to\n         wait this long for a response\
    \ to any request for an object\n         being handled by this sub-agent.  The\
    \ agent may have an\n         absolute maximum timeout value which will be used\
    \ if the\n         sub-agent asks for too big a timeout value.  A value of zero\n\
    \         can be used to indicate that the agent's own default timeout\n     \
    \    value should be used.  A sub-agent is advised to use a\n         reasonably\
    \ short interval of a few seconds or so.  If a\n         specific sub-tree needs\
    \ a (much) longer time, then a specific\n         REGISTER can be done for that\
    \ sub-tree with a longer timeout\n         value.\n     o   The maximum number\
    \ of varBinds that the sub-agent is prepared\n         to handle per DPI packet.\
    \  Specifying 1 would result in DPI\n         version 1 behavior of one varBind\
    \ per DPI packet that the agent\n         sends to the sub-agent.\n     o   The\
    \ character set you want to use. By default (value 0) this is\n         the native\
    \ character set of the machine (platform) where the\n         agent runs.\n  \
    \       Since the sub-agent and agent normally run on the same system\n      \
    \   or platform, you want to use the native character set (which on\n        \
    \ many platforms is ASCII anyway).\n         If your platform is EBCDIC based,\
    \ then using the native\n         character set of EBCDIC makes it easy to recognize\
    \ the string\n         representations of the fields like group ID, instance ID,\
    \ etc.\n         At the same time, the agent will translate the value from ASCII\n\
    \         NVT to EBCDIC (and vice versa) for objects that it knows (from\n   \
    \      a compiled MIB) to have a textual convention of DisplayString.\n      \
    \   Be aware that this fact cannot be determined from the SNMP PDU\n         encoding\
    \ because in the PDU the object is only known to be an\n         OCTET_STRING.\n\
    \         If your sub-agent runs on an ASCII based platform and the agent\n  \
    \       runs on an EBCDIC based platform (or the other way around),\n        \
    \ then you can specify that you want to use the ASCII character\n         set,\
    \ and so you both know how to handle the string-based data.\n         Beware that\
    \ not all agents need to support other than native\n         character set selection.\
    \  See 5, \"Subagent Considerations\"\n         and 3.3.5, \"Character set selection\"\
    \ for more information on\n         character set usage.\n     o   The sub-agent\
    \ ID.  This an ASN.1 Object Identifier that\n         uniquely identifies the\
    \ sub-agent.  This OID is represented as\n         a null terminated string using\
    \ the selected character set.\n         Example: \"1.3.5.1.2.3.4.5\".\n     o\
    \   The sub-agent Description.  This is a DisplayString describing\n         the\
    \ sub-agent.  This is a character string using the selected\n         character\
    \ set.  Example: \"DPI sample sub-agent version 2.0\"\n   Once a sub-agent has\
    \ sent a DPI OPEN packet to an agent, it should\n   expect a DPI RESPONSE packet\
    \ that informs the sub-agent about the\n   result of the request.  The packet\
    \ ID of the RESPONSE packet should\n   be the same as that of the OPEN request\
    \ to which the RESPONSE packet\n   is the response.  See Table 19 for a list of\
    \ valid DPI RESPONSE error\n   codes that may be expected.  If you receive an\
    \ error RESPONSE on the\n   OPEN packet, then you will also receive a DPI CLOSE\
    \ packet with an\n   SNMP_CLOSE_openError code, and then the agent closes the\n\
    \   \"connection\".\n   If the OPEN is accepted, then the next step is to REGISTER\
    \ one or\n   more MIB sub-trees.\n"
- title: 5.2.6  CLOSE REQUEST
  contents:
  - "5.2.6  CLOSE REQUEST\n   When a sub-agent is finished and wants to terminate\
    \ it should first\n   UNREGISTER its sub-trees and then close the \"connection\"\
    \ with the\n   agent.  To do so, it must send a DPI CLOSE packet in which it\n\
    \   specifies a reason for the closing.  See Table 21 for a list of valid\n  \
    \ CLOSE reason codes.  You should not expect a response to the CLOSE\n   request.\n\
    \   A sub-agent should also be prepared to handle an incoming DPI CLOSE\n   packet\
    \ from the agent.  Again, the packet will contain a reason code\n   for the CLOSE\
    \ request.  A sub-agent need not send a response to a\n   CLOSE request. The agent\
    \ just assumes that the sub-agent will handle\n   it appropriately.  The close\
    \ takes place, no matter what the sub-\n   agent does with it.\n"
- title: 5.2.7  REGISTER REQUEST
  contents:
  - "5.2.7  REGISTER REQUEST\n   Before a sub-agent will receive any requests for\
    \ MIB variables it\n   must first register the variables or sub-tree it supports\
    \ with the\n   SNMP agent.  The sub-agent must specify a number of things in the\n\
    \   REGISTER request:\n     o   The sub-tree to be registered.  This is a null\
    \ terminated\n         string in the selected character set.  The sub-tree must\
    \ have a\n         trailing dot (example: \"1.3.6.1.2.3.4.5.\").\n     o   The\
    \ requested priority for the registration, one of:\n         -1  Request for best\
    \ available priority.\n         0   Request for next better available priority\
    \ than highest\n             priority currently registered for this sub-tree.\n\
    \         NNN Any other positive value requests that specific priority if\n  \
    \           available or the first worse priority that is available.\n     o \
    \  The max timeout value in seconds.  The agent is requested to\n         wait\
    \ this long for a response to any request for an object in\n         this sub-tree.\
    \  The agent may have an absolute maximum timeout\n         value which will be\
    \ used if the sub-agents asks for too big a\n         timeout value.  A value\
    \ of zero can be used to indicate that\n         the DPI OPEN value should be\
    \ used for timeout.\n     o   A specification if the sub-agent wants to do view\
    \ selection.\n         If it does, then the community name (from SNMPv1 packets)\
    \ will\n         be passed in the DPI GET, GETNEXT, SET packets).\n     o   A\
    \ specification if the sub-agent wants to receive GETBULK\n         packets or\
    \ if it just prefers that the agent converts a GETBULK\n         into multiple\
    \ GETNEXT requests.\n   Once a sub-agent has sent a DPI REGISTER packet to the\
    \ agent, it\n   should expect a DPI RESPONSE packet that informs the sub-agent\
    \ about\n   the result of the request.  The packet ID of the RESPONSE packet\n\
    \   should be the same as that of the REGISTER packet to which the\n   RESPONSE\
    \ packet is the response.  If the response indicates success,\n   then the error_index\
    \ field in the RESPONSE packet contains the\n   priority that the agent assigned\
    \ to the sub-tree registration.  See\n   Table 19 for a list of valid DPI RESPONSE\
    \ error codes that may be\n   expected.\n"
- title: 5.2.8  UNREGISTER REQUEST
  contents:
  - "5.2.8  UNREGISTER REQUEST\n   A sub-agent may unregister a previously registered\
    \ sub-tree.  The\n   sub-agent must specify a few things in the UNREGISTER request:\n\
    \     o   The sub-tree to be unregistered.  This is a null terminated\n      \
    \   string in the selected character set.  The sub-tree must have a\n        \
    \ trailing dot (example: \"1.3.6.1.2.3.4.5.\").\n     o   The reason for the unregister.\
    \  See Table 20 for a\n         list of valid reason codes.\n   Once a sub-agent\
    \ has sent a DPI UNREGISTER packet to the agent, it\n   should expect a DPI RESPONSE\
    \ packet that informs the sub-agent about\n   the result of the request.  The\
    \ packet ID of the RESPONSE packet\n   should be the same as that of the REGISTER\
    \ packet to which the\n   RESPONSE packet is the response.  See Table 19 for a\
    \ list of valid\n   DPI RESPONSE error codes that may be expected.\n   A sub-agent\
    \ should also be prepared to handle incoming DPI UNREGISTER\n   packets from the\
    \ agent.  Again, the DPI packet will contain a reason\n   code for the UNREGISTER.\
    \  A sub-agent need not send a response to an\n   UNREGISTER request.  The agent\
    \ just assumes that the sub-agent will\n   handle it appropriately.  The registration\
    \ is removed, no matter what\n   the sub-agent returns.\n"
- title: 5.2.9  TRAP REQUEST
  contents:
  - "5.2.9  TRAP REQUEST\n   A sub-agent can request that the SNMP agent generates\
    \ a trap for it.\n   The sub-agent must provide the desired values for the generic\
    \ and\n   specific parameters of the trap.  It may optionally provide a set of\n\
    \   one or more name/type/length/value tuples that will be included in\n   the\
    \ trap packet.  Also, it may optionally specify an Enterprise ID\n   (Object Identifier)\
    \ for the trap to be generated.  If a NULL value is\n   specified for the Enterprise\
    \ ID, then the agent will use the sub-\n   agent Identifier (from the DPI OPEN\
    \ packet) as the Enterprise ID to\n   be sent with the trap.\n"
- title: 5.2.10  ARE_YOU_THERE REQUEST
  contents:
  - "5.2.10  ARE_YOU_THERE REQUEST\n   A sub-agent can send an ARE_YOU_THERE packet\
    \ to the agent.  This may\n   be useful to do if you have a DPI \"connection\"\
    \ over an unreliable\n   transport protocol (like UDP).\n   If the \"connection\"\
    \ is in a healthy state, the agent responds with a\n   RESPONSE packet with SNMP_ERROR_DPI_noError.\n\
    \   If the \"connection\" is not in a healthy state, the agent may respond\n \
    \  with a RESPONSE packet with an error indication, but the agent might\n   not\
    \ react at all, so you would timeout while waiting for a response.\n"
- title: 5.2.11  HOW TO QUERY THE DPI PORT.
  contents:
  - "5.2.11  HOW TO QUERY THE DPI PORT.\n   The DPI API implementations are encouraged\
    \ to provide a facility that\n   helps DPI sub-agent programmers to dynamically\
    \ find the port that the\n   agent is using for the TCP and/or UDP DPI port(s).\
    \  A suggested name\n   for such a function is: query_DPI_port().\n"
- title: 6.  REFERENCES
  contents:
  - "6.  REFERENCES\n   [1] Case, J., Fedor, M., Schoffstall M., and J. Davin, \"\
    Simple\n       Network Management Protocol (SNMP)\", STD 15, RFC 1157, SNMP\n\
    \       Research, Performance Systems International, MIT Laboratory for\n    \
    \   Computer Science, May 1990.\n   [2] Information processing systems - Open\
    \ Systems Interconnection,\n       \"Specification of Abstract Syntax Notation\
    \ One (ASN.1)\",\n       International Organization for Standardization, International\n\
    \       Standard 8824, December 1987.\n   [3] Information processing systems -\
    \ Open Systems Interconnection,\n       \"Specification of Basic Encoding Rules\
    \ for Abstract Syntax\n       Notation One (ASN.1)\", International Organization\
    \ for\n       Standardization, International Standard 8825, December 1987.\n \
    \  [4] McCloghrie, K., and M. Rose, \"Management Information Base for\n      \
    \ Network Management of TCP/IP-based internets: MIB II\", STD 17,\n       RFC\
    \ 1213, Hughes LAN Systems, Performance Systems International,\n       March 1991.\n\
    \   [5] Rose, M., and K. McCloghrie, \"Structure and Identification of\n     \
    \  Management Information for TCP/IP-based internets\", STD 16, RFC\n       1155,\
    \ Performance Systems International, Hughes LAN Systems, May\n       1990.\n \
    \  [6] Rose, M., \"SNMP MUX Protocol and MIB\", RFC 1227, Performance\n      \
    \ Systems International, RFC 1227, May 1991.\n   [7] Carpenter G., and B. Wijnen,\
    \ \"SNMP-DPI, Simple Network Management\n       Protocol Distributed Program Interface\"\
    , RFC 1228, International\n       Business Machines, Inc., May 1991.\n   [8] Case,\
    \ J., McCloghrie, K., Rose, M., and S. Waldbusser, \"SNMPv2\n       RFCs (RFC\
    \ 1441 through RFC 1452)\", SNMP Research Inc, Hughes LAN\n       Systems, Dover\
    \ Beach Consulting Inc, Carnegie Mellon University,\n       Trusted Information\
    \ Systems, April 1993.\n   [9] International Business Machines, Inc., TCP/IP for\
    \ VM:\n       Programmer's Reference, SC31-6084-0, 1990.\n  [10] International\
    \ Business Machines, Inc., Virtual Machine System\n       Facilities for Programming,\
    \ Release 6, SC24-5288-01, 1988.\n"
- title: 7.  SECURITY CONSIDERATIONS
  contents:
  - "7.  SECURITY CONSIDERATIONS\n   Security issues are not discussed in this memo.\n"
- title: 8.  AUTHORS' ADDRESSES
  contents:
  - "8.  AUTHORS' ADDRESSES\n   Bert Wijnen\n   IBM International Operations\n   Watsonweg\
    \ 2\n   1423 ND Uithoorn\n   The Netherlands\n   Phone: +31-2975-53316\n   Fax:\
    \   +31-2975-62468\n   EMail: wijnen@vnet.ibm.com\n   Geoffrey C. Carpenter\n\
    \   IBM T.J. Watson Research Center\n   P.O. Box 218\n   Yorktown Heights, NY\
    \ 10598\n   USA\n   Phone: +1-914-945-1970\n   EMail: gcc@watson.ibm.com\n   Kim\
    \ Curran\n   Bell Northern Research Ltd.\n   P.O. Box 3511 Station C\n   Ottawa,\
    \ Ontario K1Y 4HY\n   Canada\n   Phone: +1-613-763-5283\n   EMail: kcurran@bnr.ca\n\
    \   Aditya Sehgal\n   Bell Northern Research Ltd.\n   P. O. Box 3511 Station C\n\
    \   Ottawa, Ontario K1Y 4HY\n   Canada\n   Phone: +1-613-763-8821\n   EMail: asehgal@bnr.ca\n\
    \   Glen Waters\n   Bell Northern Research Ltd.\n   P.O. Box 3511 Station C\n\
    \   Ottawa, Ontario K1Y 4HY\n   Canada\n   Phone: +1-613-763-3933\n   EMail: gwaters@bnr.ca\n"
- title: 9.  SAMPLE SOURCES FOR ANONYMOUS FTP
  contents:
  - "9.  SAMPLE SOURCES FOR ANONYMOUS FTP\n   An implementation sample of a DPI API\
    \ (as used at the agent and sub-\n   agent side) plus sample sub-agent code and\
    \ documentation are\n   available for anonymous FTP from:\n          software.watson.ibm.com\
    \  (129.34.139.5)\n   To obtain the source, perform the following steps:\n   \
    \       ftp software.watson.ibm.com\n          user:     anonymous\n         \
    \ password: your_e-mail_address\n          cd /public/dpi\n          get README\n\
    \          binary\n          get dpi_api.tar (or compressed dpi_api.tar.Z)\n \
    \         quit\n"
