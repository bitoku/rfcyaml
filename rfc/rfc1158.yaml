- title: __initial_text__
  contents:
  - "           Management Information Base for Network Management\n             \
    \          of TCP/IP-based internets:\n"
- title: 1.  Status of this Memo
  contents:
  - "1.  Status of this Memo\n   This memo defines the second version of the Management\
    \ Information\n   Base (MIB-II) for use with network management protocols in TCP/IP-\n\
    \   based internets.  In particular, together with its companion memos\n   which\
    \ describe the structure of management information (RFC 1155)\n   along with the\
    \ network management protocol (RFC 1157) for TCP/IP-\n   based internets, these\
    \ documents provide a simple, workable\n   architecture and system for managing\
    \ TCP/IP-based internets and in\n   particular the Internet community.\n   This\
    \ document on MIB-II incorporates all of the technical content of\n   RFC 1156\
    \ on MIB-I and extends it, without loss of compatibilty.\n   However, MIB-I as\
    \ described in RFC 1156 is full Standard Protocol of\n   the Internet, while the\
    \ MIB-II described here is Proposed Standard\n   Protocol of the Internet.\n \
    \  This memo defines a mandatory extension to the base MIB (RFC 1156)\n   and\
    \ is a Proposed Standard for the Internet community.  The\n   extensions described\
    \ here are currently Elective, but when they\n   become a standard, they will\
    \ have the same status as RFC 1156, that\n   is, Recommended.  The Internet Activities\
    \ Board recommends that all\n   IP and TCP implementations be network manageable.\
    \  This implies\n   implementation of the Internet MIB (RFC 1156 and the extensions\
    \ in\n   RFC 1158) and at least one of the two recommended management\n   protocols\
    \ SNMP (RFC 1157) or CMOT (RFC 1095).\n   This version of the MIB specification,\
    \ MIB-II, is an incremental\n   refinement of MIB-I.  As such, it has been designed\
    \ according to two\n   criteria: first, changes have been made in response to\
    \ new\n   operational requirements in the Internet; and, second, the changes\n\
    \   are entirely upwards compatible in order to minimize impact on the\n   network\
    \ as the managed nodes in the Internet transition from MIB-I to\n   MIB-II.\n\
    \   It is expected that additional MIB groups and variables will be\n   defined\
    \ over time to accommodate the monitoring and control needs of\n   new or changing\
    \ components of the Internet.\n   Please refer to the latest edition of the \"\
    IAB Official Protocol\n   Standards\" RFC for current information on the state\
    \ and status of\n   standard Internet protocols.\n   Distribution of this memo\
    \ is unlimited.\n                             Table of Contents\n   1. Status\
    \ of this Memo ..................................    1\n   2. Introduction .........................................\
    \    3\n   3. Changes from MIB-I ...................................    4\n  \
    \ 3.1 Deprecated Objects ..................................    4\n   3.2 Display\
    \ Strings .....................................    5\n   3.3 The System Group\
    \ ....................................    5\n   3.4 The Interfaces Group ................................\
    \    5\n   3.5 The Address Translation Group .......................    6\n  \
    \ 3.6 The IP Group ........................................    7\n   3.7 The ICMP\
    \ Group ......................................    7\n   3.8 The TCP Group .......................................\
    \    7\n   3.9 The UDP Group .......................................    7\n  \
    \ 3.10 The EGP Group ......................................    8\n   3.11 The\
    \ Transmission Group .............................    8\n   3.12 The SNMP Group\
    \ .....................................    8\n   4. Objects ..............................................\
    \    8\n   4.1 Object Groups .......................................    9\n  \
    \ 4.2 Format of Definitions ...............................   10\n   5. Object\
    \ Definitions ...................................   10\n   5.1 The System Group\
    \ ....................................   11\n   5.2 The Interfaces Group ................................\
    \   14\n   5.2.1 The Interfaces table ..............................   15\n  \
    \ 5.3 The Address Translation Group .......................   27\n   5.4 The IP\
    \ Group ........................................   30\n   5.4.1 The IP Address\
    \ table ..............................   38\n   5.4.2 The IP Routing table ..............................\
    \   41\n   5.4.3 The IP Address Translation table ..................   48\n  \
    \ 5.5 The ICMP Group ......................................   51\n   5.6 The TCP\
    \ Group .......................................   61\n   5.6.1 The TCP Connection\
    \ table ..........................   66\n   5.6.2 Additional TCP Objects ............................\
    \   69\n   5.7 The UDP Group .......................................   70\n  \
    \ 5.7.1 The UDP Listener table ............................   72\n   5.8 The EGP\
    \ Group .......................................   73\n   5.8.1 The EGP Neighbor\
    \ table ............................   75\n   5.8.2 Additional EGP variables ..........................\
    \   83\n   5.9 The Transmission Group ..............................   83\n  \
    \ 5.10 The SNMP Group .....................................   83\n   6. Definitions\
    \ ..........................................   95\n   7. Identification of OBJECT\
    \ instances for use with  the\n      SNMP .................................................\
    \  126\n   7.1 ifTable Object Type Names ...........................  127\n  \
    \ 7.2 atTable Object Type Names ...........................  127\n   7.3 ipAddrTable\
    \ Object Type Names .......................  128\n   7.4 ipRoutingTable Object\
    \ Type Names ....................  128\n   7.5 ipNetToMediaTable Object Type Names\
    \ .................  129\n   7.6 tcpConnTable Object Type Names ......................\
    \  129\n   7.7 udpTable Object Type Names ..........................  130\n  \
    \ 7.8 egpNeighTable Object Type Names .....................  130\n   8.  Acknowledgements\
    \ ....................................  130\n   9.  References ..........................................\
    \  131\n   10. Security Considerations..............................  133\n  \
    \ 11. Author's Address.....................................  133\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   As reported in RFC 1052, IAB Recommendations for the\n \
    \  Development of Internet Network Management Standards [1], a\n   two-prong strategy\
    \ for network management of TCP/IP-based\n   internets was undertaken.  In the\
    \ short-term, the Simple\n   Network Management Protocol (SNMP) was to be used\
    \ to manage\n   nodes in the Internet community.  In the long-term, the use of\n\
    \   the OSI network management framework was to be examined.  Two\n   documents\
    \ were produced to define the management information:\n   RFC 1065, which defined\
    \ the Structure of Management\n   Information (SMI) [2], and RFC 1066, which defined\
    \ the\n   Management Information Base (MIB) [3].  Both of these\n   documents\
    \ were designed so as to be compatible with both the\n   SNMP and the OSI network\
    \ management framework.\n   This strategy was quite successful in the short-term:\n\
    \   Internet-based network management technology was fielded, by\n   both the\
    \ research and commercial communities, within a few\n   months.  As a result of\
    \ this, portions of the Internet\n   community became network manageable in a\
    \ timely fashion.\n   As reported in RFC 1109, Report of the Second Ad Hoc Network\n\
    \   Management Review Group [4], the requirements of the SNMP and\n   the OSI\
    \ network management frameworks were more different than\n   anticipated.  As\
    \ such, the requirement for compatibility\n   between the SMI/MIB and both frameworks\
    \ was suspended.  This\n   action permitted the operational network management\
    \ framework,\n   the SNMP, to respond to new operational needs in the Internet\n\
    \   community by producing this document.\n   As such, the current network management\
    \ framework for TCP/IP-\n   based internets consists of: Structure and Identification\
    \ of\n   Management Information for TCP/IP-based internets, RFC 1155 [13],\n \
    \  which describes how managed objects contained in the MIB are\n   defined; Management\
    \ Information Base for Network Management of\n   TCP/IP-based internets (version\
    \ 2), this memo, which describes\n   the managed objects contained in the MIB;\
    \ and, the Simple\n   Network Management Protocol, RFC 1157 [14], which defines\
    \ the\n   protocol used to manage these objects.\n   Consistent with the IAB directive\
    \ to produce simple, workable\n   systems in the short-term, the list ofc objects\
    \ (e.g., for BSD UNIX)\n      were excluded.\n   7) It was agreed to avoid heavily\
    \ instrumenting critical\n      sections of code.  The general guideline was one\
    \ counter\n      per critical section per layer.\n"
- title: 3.  Changes from MIB-I
  contents:
  - "3.  Changes from MIB-I\n   Features of this MIB include:\n      1) incremental\
    \ additions to reflect new operational\n         requirements;\n      2) upwards\
    \ compatibility with the SMI/MIB and the SNMP;\n      3) improved support for\
    \ multi-protocol entities; and,\n      4) textual clean-up of the MIB to improve\
    \ clarity and\n         readability.\n   The objects defined in MIB-II have the\
    \ OBJECT IDENTIFIER prefix:\n               mib-2      OBJECT IDENTIFIER ::= {\
    \ mgmt 1 }\n"
- title: 3.1.  Deprecated Objects
  contents:
  - "3.1.  Deprecated Objects\n   In order to better prepare implementors for future\
    \ changes in the\n   MIB, a new term \"deprecated\" may be used when describing\
    \ an object.\n   A deprecated object in the MIB is one which must be supported,\
    \ but\n   one which will most likely be removed from the next version of the\n\
    \   MIB (e.g., MIB-III).\n      MIB-II marks one object as being deprecated:\n\
    \      atTable\n   As a result of deprecating the atTable object, the entire Address\n\
    \   Translation group is deprecated.\n   Note that no functionality is lost with\
    \ the deprecation of these\n   objects: new objects providing equivalent or superior\
    \ functionality\n   are defined in MIB-II.\n"
- title: 3.2.  Display Strings
  contents:
  - "3.2.  Display Strings\n   In the past, there have been misinterpretations of\
    \ the MIB as to when\n   a string of octets should contain printable characters,\
    \ meant to be\n   displayed to a human.  As a textual convention in the MIB, the\n\
    \   datatype\n                  DisplayString ::= OCTET STRING\n   is introduced.\
    \  A DisplayString is restricted to the NVT ASCII\n   character set, as defined\
    \ in pages 10-11 of [7].\n   The following objects are now defined in terms of\
    \ DisplayString:\n                  sysDescr\n                  ifDescr\n   It\
    \ should be noted that this change has no effect on either the\n   syntax nor\
    \ semantics of these objects.  The use of the DisplayString\n   notation is merely\
    \ an artifact of the explanatory method used in\n   MIB-II and future MIBs.\n\
    \   Further, it should be noted that any object defined in terms of OCTET\n  \
    \ STRING may contain arbitrary binary data, in which each octet may\n   take any\
    \ value from 0 to 255 (decimal).\n"
- title: 3.3.  The System Group
  contents:
  - "3.3.  The System Group\n   Four new objects are added to this group:\n      \
    \            sysContact\n                  sysName\n                  sysLocation\n\
    \                  sysServices\n   These provide contact, administrative, location,\
    \ and service\n   information regarding the managed node.\n"
- title: 3.4.  The Interfaces Group
  contents:
  - "3.4.  The Interfaces Group\n   The definition of the ifNumber object was incorrect,\
    \ as it required\n   all interfaces to support IP.  (For example, devices without\
    \ IP, such\n   as MAC-layer bridges, could not be managed if this definition was\n\
    \   strictly followed.) The description of the ifNumber object is changed\n  \
    \ accordingly.\n   The ifTable object was mistaken marked as read-write, it has\
    \ been\n   (correctly) re-designated as read-only.  In addition, several new\n\
    \   values have been added to the ifType column in the ifTable object:\n     \
    \             ppp(23)\n                  softwareLoopback(24)\n              \
    \    eon(25)\n                  ethernet-3Mbit(26)\n                  nsip(27)\n\
    \                  slip(28)\n   Finally, a new column has been added to the ifTable\
    \ object:\n                  ifSpecific\n   which provides information about information\
    \ specific to the media\n   being used to realize the interface.\n"
- title: 3.5.  The Address Translation Group
  contents:
  - "3.5.  The Address Translation Group\n   In MIB-I, this group contained a table\
    \ which permitted mappings from\n   network addresses (e.g., IP addresses) to\
    \ physical addresses (e.g.,\n   MAC addresses).  Experience has shown that efficient\
    \ implementations\n   of this table make two assumptions: a single network protocol\n\
    \   environment, and mappings occur only from network address to physical\n  \
    \ address.\n   The need to support multi-protocol nodes (e.g., those with both\
    \ the\n   IP and CLNP active), and the need to support the inverse mapping\n \
    \  (e.g., for ES-IS), have invalidated both of these assumptions.  As\n   such,\
    \ the atTable object is declared deprecated.\n   In order to meet both the multi-protocol\
    \ and inverse mapping\n   requirements, MIB-II and its successors will allocate\
    \ up to two\n   address translation tables inside each network protocol group.\
    \  That\n   is, the IP group will contain one address translation table, for\n\
    \   going from IP addresses to physical addresses.  Similarly, when a\n   document\
    \ defining MIB objects for the CLNP is produced (e.g., [8]),\n   it will contain\
    \ two tables, for mappings in both directions, as this\n   is required for full\
    \ functionality.\n   It should be noted that the choice of two tables (one for\
    \ each\n   direction of mapping) provides for ease of implementation in many\n\
    \   cases, and does not introduce undue burden on implementations which\n   realize\
    \ the address translation abstraction through a single internal\n   table.\n"
- title: 3.6.  The IP Group
  contents:
  - "3.6.  The IP Group\n   The access attribute of the variable ipForwarding has\
    \ been changed\n   from read-only to read-write.\n   In addition, there is a new\
    \ column to the ipAddrTable object,\n                  ipAdEntReasmMaxSize\n \
    \  which keeps track of the largest IP datagram that can be re-\n   assembled\
    \ on a particular interface.  There is also a new column in\n   the ipRoutingTable\
    \ object,\n                  ipRouteMask\n   which is used for IP routing subsystems\
    \ that support arbitrary subnet\n   masks.\n   One new object is added to the\
    \ IP group:\n                  ipNetToMediaTable\n   which is the address translation\
    \ table for the IP group (providing\n   identical functionality to the now deprecated\
    \ atTable in the address\n   translation group).\n"
- title: 3.7.  The ICMP Group
  contents:
  - "3.7.  The ICMP Group\n   There are no changes to this group.\n"
- title: 3.8.  The TCP Group
  contents:
  - "3.8.  The TCP Group\n   Two new variables are added:\n                  tcpInErrs\n\
    \                  tcpOutRsts\n   which keep track of the number of incoming TCP\
    \ segments in error and\n   the number of resets generated by a TCP.\n"
- title: 3.9.  The UDP Group
  contents:
  - "3.9.  The UDP Group\n   A new table:\n                  udpTable\n   is added.\n"
- title: 3.10.  The EGP Group
  contents:
  - "3.10.  The EGP Group\n   Experience has indicated a need for additional objects\
    \ that are\n   useful in EGP monitoring.  In addition to making several additions\
    \ to\n   the egpNeighborTable object, a new variable is added:\n             \
    \     egpAs\n   which gives the autonomous system associated with this EGP entity.\n"
- title: 3.11.  The Transmission Group
  contents:
  - "3.11.  The Transmission Group\n   MIB-I was lacking in that it did not distinguish\
    \ between different\n   types of transmission media.  A new group, the Transmission\
    \ group, is\n   allocated for this purpose:\n                  transmission OBJECT\
    \ IDENTIFIER ::= { mib-2 10 }\n   When Internet-standard definitions for managing\
    \ transmission media\n   are defined, the transmission group is used to provide\
    \ a prefix for\n   the names of those objects.\n   Typically, such definitions\
    \ reside in the experimental portion of the\n   MIB until they are \"proven\"\
    , then as a part of the Internet\n   standardization process, the definitions\
    \ are accordingly elevated and\n   a new object identifier, under the transmission\
    \ group is defined.  By\n   convention, the name assigned is:\n              \
    \    type OBJECT IDENTIFIER    ::= { transmission number }\n   where \"type\"\
    \ is the symbolic value used for the media in the ifType\n   column of the ifTable\
    \ object, and \"number\" is the actual integer\n   value corresponding to the\
    \ symbol.\n"
- title: 3.12.  The SNMP Group
  contents:
  - "3.12.  The SNMP Group\n   The application-oriented working groups of the IETF\
    \ have been tasked\n   to be receptive towards defining MIB variables specific\
    \ to their\n   respective applications.\n   For the SNMP, it is useful to have\
    \ statistical information.  A new\n   group, the SNMP group, is allocated for\
    \ this purpose:\n                  snmp   OBJECT IDENTIFIER ::= { mib-2 11 }\n"
- title: 4.  Objects
  contents:
  - "4.  Objects\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB.  Objects in the MIB are\n\
    \   defined using Abstract Syntax Notation One (ASN.1) [9].\n   The mechanisms\
    \ used for describing these objects are specified the\n   companion memo, the\
    \ SMI.  In particular, each object has a name, a\n   syntax, and an encoding.\
    \  The name is an object identifier, an\n   administratively assigned name, which\
    \ specifies an object type.  The\n   object type together with an object instance\
    \ serves to uniquely\n   identify a specific instantiation of the object.  For\
    \ human\n   convenience, we often use a textual string, termed the OBJECT\n  \
    \ DESCRIPTOR, to also refer to the object type.\n   The syntax of an object type\
    \ defines the abstract data structure\n   corresponding to that object type. \
    \ The ASN.1 language is used for\n   this purpose.  However, the companion memo\
    \ purposely restricts the\n   ASN.1 constructs which may be used.  These restrictions\
    \ are\n   explicitly made for simplicity.\n   The encoding of an object type is\
    \ simply how that object type is\n   represented using the object type's syntax.\
    \  Implicitly tied to the\n   notion of an object type's syntax and encoding is\
    \ how the object type\n   is represented when being transmitted on the network.\
    \  This memo\n   specifies the use of the basic encoding rules (BER) of ASN.1\
    \ [10],\n   subject to the additional requirements imposed by the SNMP [14].\n"
- title: 4.1.  Object Groups
  contents:
  - "4.1.  Object Groups\n   Since this list of managed objects contains only the\
    \ essential\n   elements, there is no need to allow individual objects to be\n\
    \   optional.  Rather, the objects are arranged into the following\n   groups:\n\
    \                  - System\n                  - Interfaces\n                \
    \  - Address Translation (deprecated)\n                  - IP\n              \
    \    - ICMP\n                  - TCP\n                  - UDP\n              \
    \    - EGP\n                  - Transmission\n                  - SNMP\n   There\
    \ are two reasons for defining these groups: to provide a means\n   of assigning\
    \ object identifiers; and, to provide a method for\n   implementations of managed\
    \ agents to know which objects they must\n   implement.  This method is as follows:\
    \ if the semantics of a group is\n   applicable to an implementation, then it\
    \ must implement all objects\n   in that group.  For example, an implementation\
    \ must implement the EGP\n   group if and only if it implements the EGP.\n"
- title: 4.2.  Format of Definitions
  contents:
  - "4.2.  Format of Definitions\n   The next section contains the specification of\
    \ all object types\n   contained in the MIB.  Following the conventions of the\
    \ companion\n   memo, the object types are defined using the following fields:\n\
    \      OBJECT:\n      -------\n           A textual name, termed the OBJECT DESCRIPTOR,\
    \ for the\n           object type, along with its corresponding OBJECT\n     \
    \      IDENTIFIER.\n      Syntax:\n           The abstract syntax for the object\
    \ type, presented using\n           ASN.1.  This must resolve to an instance of\
    \ the ASN.1\n           type ObjectSyntax defined in the SMI.\n      Definition:\n\
    \           A textual description of the semantics of the object\n           type.\
    \  Implementations should ensure that their\n           interpretation of the\
    \ object type fulfills this\n           definition since this MIB is intended\
    \ for use in multi-\n           vendor environments.  As such it is vital that\
    \ object\n           types have consistent meaning across all machines.\n    \
    \  Access:\n           A keyword, one of read-only, read-write, write-only, or\n\
    \           not-accessible.  Note that this designation specifies the\n      \
    \     minimum level of support required.  As a local matter,\n           implementations\
    \ may support other access types (e.g., an\n           implementation may elect\
    \ to permitting writing a variable\n           marked herein as read-only).  Further,\
    \ protocol-specific\n           \"views\" (e.g., those implied by an SNMP community)\
    \ may\n           make further restrictions on access to a variable.\n      Status:\n\
    \           A keyword, one of mandatory, optional, obsolete, or\n           deprecated.\
    \  Use of deprecated implies mandatory status.\n"
- title: 5.  Object Definitions
  contents:
  - "5.  Object Definitions\n               RFC1158-MIB\n               DEFINITIONS\
    \ ::= BEGIN\n               IMPORTS\n                       mgmt, OBJECT-TYPE,\
    \ NetworkAddress, IpAddress,\n                       Counter, Gauge, TimeTicks\n\
    \                           FROM RFC1155-SMI;\n               DisplayString ::=\n\
    \                           OCTET STRING\n               mib-2      OBJECT IDENTIFIER\
    \ ::= { mgmt 1 }    -- MIB-II\n               system     OBJECT IDENTIFIER ::=\
    \ { mib-2 1 }\n               interfaces OBJECT IDENTIFIER ::= { mib-2 2 }\n \
    \              at         OBJECT IDENTIFIER ::= { mib-2 3 }\n               ip\
    \         OBJECT IDENTIFIER ::= { mib-2 4 }\n               icmp       OBJECT\
    \ IDENTIFIER ::= { mib-2 5 }\n               tcp        OBJECT IDENTIFIER ::=\
    \ { mib-2 6 }\n               udp        OBJECT IDENTIFIER ::= { mib-2 7 }\n \
    \              egp        OBJECT IDENTIFIER ::= { mib-2 8 }\n               --\
    \ cmot    OBJECT IDENTIFIER ::= { mib-2 9 }\n               transmission OBJECT\
    \ IDENTIFIER ::= { mib-2 10 }\n               snmp       OBJECT IDENTIFIER ::=\
    \ { mib-2 11 }\n               END\n"
- title: 5.1.  The System Group
  contents:
  - "5.1.  The System Group\n   Implementation of the System group is mandatory for\
    \ all systems.\n          OBJECT:\n          -------\n               sysDescr\
    \ { system 1 }\n          Syntax:\n               DisplayString (SIZE (0..255))\n\
    \          Definition:\n               A textual description of the entity.  This\
    \ value should\n               include the full name and version identification\
    \ of the\n               system's hardware type, software operating-system, and\n\
    \               networking software.  It is mandatory that this only\n       \
    \        contain printable ASCII characters.\n          Access:\n            \
    \   read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               sysObjectID { system 2 }\n          Syntax:\n\
    \               OBJECT IDENTIFIER\n          Definition:\n               The vendor's\
    \ authoritative identification of the network\n               management subsystem\
    \ contained in the entity.  This value\n               is allocated within the\
    \ SMI enterprises subtree\n               (1.3.6.1.4.1) and provides an easy and\
    \ unambiguous means\n               for determining \"what kind of box\" is being\
    \ managed.  For\n               example, if vendor \"Flintstones, Inc.\" was assigned\
    \ the\n               subtree 1.3.6.1.4.1.4242, it could assign the identifier\n\
    \               1.3.6.1.4.1.4242.1.1 to its \"Fred Router\".\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               sysUpTime { system 3 }\n  \
    \        Syntax:\n               TimeTicks\n          Definition:\n          \
    \     The time (in hundredths of a second) since the network\n               management\
    \ portion of the system was last re-initialized.\n          Access:\n        \
    \       read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               sysContact { system 4 }\n          Syntax:\n\
    \               DisplayString (SIZE (0..255))\n          Definition:\n       \
    \        The textual identification of the contact person for this\n         \
    \      managed node, together with information on how to contact\n           \
    \    this person.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    sysName { system 5 }\n          Syntax:\n               DisplayString (SIZE\
    \ (0..255))\n          Definition:\n               An administratively-assigned\
    \ name for this managed node.\n               By convention, this is the node's\
    \ fully-qualified domain\n               name.\n          Access:\n          \
    \     read-write.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               sysLocation { system 6 }\n          Syntax:\n\
    \               DisplayString (SIZE (0..255))\n          Definition:\n       \
    \        The physical location of this node (e.g., \"telephone\n             \
    \  closet, 3rd floor\").\n          Access:\n               read-only.\n     \
    \     Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               sysServices { system 7 }\n          Syntax:\n               INTEGER\
    \ (0..127)\n          Definition:\n               A value which indicates the\
    \ set of services that this\n               entity potentially offers.  The value\
    \ is a sum.  This\n               sum initially takes the value zero, Then, for\
    \ each layer,\n               L, in the range 1 through 7, that this node performs\n\
    \               transactions for, 2 raised to (L - 1) is added to the\n      \
    \         sum.  For example, a node which performs only routing\n            \
    \   functions would have a value of 4 (2^(3-1)).  In\n               contrast,\
    \ a node which is a host offering application\n               services would have\
    \ a value of 72 (2^(4-1) + 2^(7-1)).\n               Note that in the context\
    \ of the Internet suite of\n               protocols, values should be calculated\
    \ accordingly:\n                    layer  functionality\n                   \
    \ 1      physical (e.g., repeaters)\n                    2      datalink/subnetwork\
    \ (e.g., bridges)\n                    3      internet (e.g., supports the IP)\n\
    \                    4      end-to-end  (e.g., supports the TCP)\n           \
    \         7      applications (e.g., supports the SMTP)\n               For systems\
    \ including OSI protocols, layers 5 and 6 may\n               also be counted.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n"
- title: 5.2.  The Interfaces Group
  contents:
  - "5.2.  The Interfaces Group\n   Implementation of the Interfaces group is mandatory\
    \ for all systems.\n          OBJECT:\n          -------\n               ifNumber\
    \ { interfaces 1 }\n          Syntax:\n               INTEGER\n          Definition:\n\
    \               The number of network interfaces (regardless of their\n      \
    \         current state) present on this system.\n          Access:\n        \
    \       read-only.\n          Status:\n               mandatory.\n"
- title: 5.2.1.  The Interfaces table
  contents:
  - "5.2.1.  The Interfaces table\n   The Interfaces table contains information on\
    \ the entity's interfaces.\n   Each interface is thought of as being attached\
    \ to a \"subnetwork\".\n   Note that this term should not be confused with \"\
    subnet\" which refers\n   to an addressing partitioning scheme used in the Internet\
    \ suite of\n   protocols.\n          OBJECT:\n          -------\n            \
    \   ifTable { interfaces 2 }\n          Syntax:\n               SEQUENCE OF IfEntry\n\
    \          Definition:\n               A list of interface entries.  The number\
    \ of entries is\n               given by the value of ifNumber.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ifEntry { ifTable 1 }\n   \
    \       Syntax:\n               IfEntry ::= SEQUENCE {\n                    ifIndex\n\
    \                        INTEGER,\n                    ifDescr\n             \
    \           DisplayString,\n                    ifType\n                     \
    \   INTEGER,\n                    ifMtu\n                        INTEGER,\n  \
    \                  ifSpeed\n                        Gauge,\n                 \
    \   ifPhysAddress\n                        OCTET STRING,\n                   \
    \ ifAdminStatus\n                        INTEGER,\n                    ifOperStatus\n\
    \                        INTEGER,\n                    ifLastChange\n        \
    \                TimeTicks,\n                    ifInOctets\n                \
    \        Counter,\n                    ifInUcastPkts\n                       \
    \ Counter,\n                    ifInNUcastPkts\n                        Counter,\n\
    \                    ifInDiscards\n                        Counter,\n        \
    \            ifInErrors\n                        Counter,\n                  \
    \  ifInUnknownProtos\n                        Counter,\n                    ifOutOctets\n\
    \                        Counter,\n                    ifOutUcastPkts\n      \
    \                  Counter,\n                    ifOutNUcastPkts\n           \
    \             Counter,\n                    ifOutDiscards\n                  \
    \      Counter,\n                    ifOutErrors\n                        Counter,\n\
    \                    ifOutQLen\n                        Gauge,\n             \
    \       ifSpecific\n                        OBJECT IDENTIFIER\n              \
    \ }\n          Definition:\n               An interface entry containing objects\
    \ at the subnetwork\n               layer and below for a particular interface.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          We now consider the individual components of each interface\n\
    \          entry:\n          OBJECT:\n          -------\n               ifIndex\
    \ { ifEntry 1 }\n          Syntax:\n               INTEGER\n          Definition:\n\
    \               A unique value for each interface.  Its value ranges\n       \
    \        between 1 and the value of ifNumber.  The value for each\n          \
    \     interface must remain constant at least from one re-\n               initialization\
    \ of the entity's network management system\n               to the next re-initialization.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ifDescr\
    \ { ifEntry 2 }\n          Syntax:\n               DisplayString (SIZE (0..255))\n\
    \          Definition:\n               A textual string containing information\
    \ about the\n               interface.  This string should include the name of\
    \ the\n               manufacturer, the product name and the version of the\n\
    \               hardware interface.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifType { ifEntry 3 }\n          Syntax:\n               INTEGER\
    \ {\n                    other(1),          -- none of the following\n       \
    \             regular1822(2),\n                    hdh1822(3),\n             \
    \       ddn-x25(4),\n                    rfc877-x25(5),\n                    ethernet-csmacd(6),\n\
    \                    iso88023-csmacd(7),\n                    iso88024-tokenBus(8),\n\
    \                    iso88025-tokenRing(9),\n                    iso88026-man(10),\n\
    \                    starLan(11),\n                    proteon-10Mbit(12),\n \
    \                   proteon-80Mbit(13),\n                    hyperchannel(14),\n\
    \                    fddi(15),\n                    lapb(16),\n              \
    \      sdlc(17),\n                    t1-carrier(18),\n                    cept(19),\
    \          -- european equivalent of T-1\n                    basicISDN(20),\n\
    \                    primaryISDN(21),\n                                      \
    \  -- proprietary serial\n                    propPointToPointSerial(22),\n  \
    \                  ppp(23),\n                    softwareLoopback(24),\n     \
    \               eon(25),            -- CLNP over IP [12]\n                   \
    \ ethernet-3Mbit(26)\n                    nsip(27),           -- XNS over IP\n\
    \                    slip(28)            -- generic SLIP\n               }\n \
    \         Definition:\n               The type of interface, distinguished according\
    \ to the\n               physical/link protocol(s) immediately \"below\" the network\n\
    \               layer in the protocol stack.\n          Access:\n            \
    \   read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifMtu { ifEntry 4 }\n          Syntax:\n  \
    \             INTEGER\n          Definition:\n               The size of the largest\
    \ datagram which can be\n               sent/received on the interface, specified\
    \ in octets.  For\n               interfaces that are used for transmitting network\n\
    \               datagrams, this is the size of the largest network\n         \
    \      datagram that can be sent on the interface.\n          Access:\n      \
    \         read-only.\n          Status:\n               mandatory.\n         \
    \ OBJECT:\n          -------\n               ifSpeed { ifEntry 5 }\n         \
    \ Syntax:\n               Gauge\n          Definition:\n               An estimate\
    \ of the interface's current bandwidth in bits\n               per second.  For\
    \ interfaces which do not vary in\n               bandwidth or for those where\
    \ no accurate estimation can\n               be made, this object should contain\
    \ the nominal\n               bandwidth.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifPhysAddress { ifEntry 6 }\n          Syntax:\n             \
    \  OCTET STRING\n          Definition:\n               The interface's address\
    \ at the protocol layer immediately\n               \"below\" the network layer\
    \ in the protocol stack.  For\n               interfaces which do not have such\
    \ an address (e.g., a\n               serial line), this object should contain\
    \ an octet string\n               of zero length.\n          Access:\n       \
    \        read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifAdminStatus { ifEntry 7 }\n          Syntax:\n\
    \               INTEGER {\n                    up(1),       -- ready to pass packets\n\
    \                    down(2),\n                    testing(3)   -- in some test\
    \ mode\n               }\n          Definition:\n               The desired state\
    \ of the interface.  The testing(3) state\n               indicates that no operational\
    \ packets can be passed.\n          Access:\n               read-write.\n    \
    \      Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOperStatus { ifEntry 8 }\n          Syntax:\n              \
    \ INTEGER {\n                    up(1),       -- ready to pass packets\n     \
    \               down(2),\n                    testing(3)   -- in some test mode\n\
    \               }\n          Definition:\n               The current operational\
    \ state of the interface.  The\n               testing(3) state indicates that\
    \ no operational packets\n               can be passed.\n          Access:\n \
    \              read-only.\n          Status:\n               mandatory.\n    \
    \      OBJECT:\n          -------\n               ifLastChange { ifEntry 9 }\n\
    \          Syntax:\n               TimeTicks\n          Definition:\n        \
    \       The value of sysUpTime at the time the interface entered\n           \
    \    its current operational state.  If the current state was\n              \
    \ entered prior to the last re-initialization of the local\n               network\
    \ management subsystem, then this object contains a\n               zero value.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ifInOctets\
    \ { ifEntry 10 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of octets received on the interface,\n      \
    \         including framing characters.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifInUcastPkts  { ifEntry 11 }\n          Syntax:\n           \
    \    Counter\n          Definition:\n               The number of subnetwork-unicast\
    \ packets delivered to a\n               higher-layer protocol.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ifInNUcastPkts { ifEntry 12\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of non-unicast (i.e., subnetwork-broadcast or\n         \
    \      subnetwork-multicast) packets delivered to a higher-layer\n           \
    \    protocol.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ifInDiscards { ifEntry 13 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of inbound packets which were\
    \ chosen to be\n               discarded even though no errors had been detected\
    \ to\n               prevent their being deliverable to a higher-layer\n     \
    \          protocol.  One possible reason for discarding such a\n            \
    \   packet could be to free up buffer space.\n          Access:\n            \
    \   read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifInErrors { ifEntry 14 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The number of inbound\
    \ packets that contained errors\n               preventing them from being deliverable\
    \ to a higher-layer\n               protocol.\n          Access:\n           \
    \    read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ifInUnknownProtos { ifEntry 15 }\n        \
    \  Syntax:\n               Counter\n          Definition:\n               The\
    \ number of packets received via the interface which\n               were discarded\
    \ because of an unknown or unsupported\n               protocol.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ifOutOctets { ifEntry 16 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The total number of octets transmitted out of the\n               interface,\
    \ including framing characters.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOutUcastPkts { ifEntry 17 }\n          Syntax:\n           \
    \    Counter\n          Definition:\n               The total number of packets\
    \ that higher-level protocols\n               requested be transmitted to a subnetwork-unicast\
    \ address,\n               including those that were discarded or not sent.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ifOutNUcastPkts\
    \ { ifEntry 18 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of packets that higher-level protocols\n    \
    \           requested be transmitted to a non-unicast (i.e., a\n             \
    \  subnetwork-broadcast or subnetwork-multicast) address,\n               including\
    \ those that were discarded or not sent.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOutDiscards { ifEntry 19 }\n          Syntax:\n            \
    \   Counter\n          Definition:\n               The number of outbound packets\
    \ which were chosen to be\n               discarded even though no errors had\
    \ been detected to\n               prevent their being transmitted.  One possible\
    \ reason for\n               discarding such a packet could be to free up buffer\n\
    \               space.\n          Access:\n               read-only.\n       \
    \   Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ifOutErrors { ifEntry 20 }\n          Syntax:\n              \
    \ Counter\n          Definition:\n               The number of outbound packets\
    \ that could not be\n               transmitted because of errors.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ifOutQLen { ifEntry 21 }\n\
    \          Syntax:\n               Gauge\n          Definition:\n            \
    \   The length of the output packet queue (in packets).\n          Access:\n \
    \              read-only.\n          Status:\n               mandatory.\n    \
    \      OBJECT:\n          -------\n               ifSpecific { ifEntry 22 }\n\
    \          Syntax:\n               OBJECT IDENTIFIER\n          Definition:\n\
    \               A reference to MIB definitions specific to the particular\n  \
    \             media being used to realize the interface.  For example,\n     \
    \          if the interface is realized by an ethernet, then the\n           \
    \    value of this object refers to a document defining\n               objects\
    \ specific to ethernet.  If an agent is not\n               configured to have\
    \ a value for any of these variables,\n               the object identifier\n\
    \                    nullSpecific OBJECT IDENTIFIER ::= { 0 0 }\n            \
    \   is returned.  Note that \"nullSpecific\" is a syntatically\n             \
    \  valid object identifier, and any conformant\n               implementation\
    \ of ASN.1 and BER must be able to generate\n               and recognize this\
    \ value.\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n"
- title: 5.3.  The Address Translation Group
  contents:
  - "5.3.  The Address Translation Group\n   Implementation of the Address Translation\
    \ group is mandatory for all\n   systems.  Note however that this group is deprecated\
    \ by MIB-II.  That\n   is, it is being included solely for compatibility with\
    \ MIB-I nodes,\n   and will most likely be excluded from MIB-III nodes.  From\
    \ MIB-II and\n   onwards, each network protocol group contains its own address\n\
    \   translation tables.\n   The Address Translation group contains one table which\
    \ is the union\n   across all interfaces of the translation tables for converting\
    \ a\n   NetworkAddress (e.g., an IP address) into a subnetwork-specific\n   address.\
    \  For lack of a better term, this document refers to such a\n   subnetwork-specific\
    \ address as a \"physical\" address.\n   Examples of such translation tables are:\
    \ for broadcast media where\n   ARP is in use, the translation table is equivalent\
    \ to the ARP cache;\n   or, on an X.25 network where non-algorithmic translation\
    \ to X.121\n   addresses is required, the translation table contains the\n   NetworkAddress\
    \ to X.121 address equivalences.\n          OBJECT:\n          -------\n     \
    \          atTable { at 1 }\n          Syntax:\n               SEQUENCE OF AtEntry\n\
    \          Definition:\n               The Address Translation tables contain\
    \ the NetworkAddress\n               to \"physical\" address equivalences.  Some\
    \ interfaces do\n               not use translation tables for determining address\n\
    \               equivalences (e.g., DDN-X.25 has an algorithmic method);\n   \
    \            if all interfaces are of this type, then the Address\n          \
    \     Translation table is empty, i.e., has zero entries.\n          Access:\n\
    \               read-write.\n          Status:\n               deprecated.\n \
    \         OBJECT:\n          -------\n               atEntry { atTable 1 }\n \
    \         Syntax:\n               AtEntry ::= SEQUENCE {\n                   \
    \ atIfIndex\n                        INTEGER,\n                    atPhysAddress\n\
    \                        OCTET STRING,\n                    atNetAddress\n   \
    \                     NetworkAddress\n               }\n          Definition:\n\
    \               Each entry contains one NetworkAddress to \"physical\"\n     \
    \          address equivalence.\n          Access:\n               read-write.\n\
    \          Status:\n               deprecated.\n          We now consider the\
    \ individual components of each Address\n          Translation table entry:\n\
    \          OBJECT:\n          -------\n               atIfIndex { atEntry 1 }\n\
    \          Syntax:\n               INTEGER\n          Definition:\n          \
    \     The interface on which this entry's equivalence is\n               effective.\
    \  The interface identified by a particular\n               value of this index\
    \ is the same interface as identified\n               by the same value of ifIndex.\n\
    \          Access:\n               read-write.\n          Status:\n          \
    \     deprecated.\n          OBJECT:\n          -------\n               atPhysAddress\
    \ { atEntry 2 }\n          Syntax:\n               OCTET STRING\n          Definition:\n\
    \               The media-dependent \"physical\" address.\n          Setting this\
    \ object to a null string (one of zero length) has\n          the effect of invaliding\
    \ the corresponding entry in the\n          atTable object.  That is, it effectively\
    \ disassociates the\n          interface identified with said entry from the mapping\n\
    \          identified with said entry.  It is an implementation-specific\n   \
    \       matter as to whether the agent removes an invalidated entry\n        \
    \  from the table.  Accordingly, management stations must be\n          prepared\
    \ to receive tabular information from agents that\n          corresponds to entries\
    \ not currently in use.  Proper\n          interpretation of such entries requires\
    \ examination of the\n          relevant atPhysAddress object.\n          Access:\n\
    \               read-write.\n          Status:\n               deprecated.\n \
    \         OBJECT:\n          -------\n               atNetAddress { atEntry 3\
    \ }\n          Syntax:\n               NetworkAddress\n          Definition:\n\
    \               The NetworkAddress (e.g., the IP address) corresponding\n    \
    \           to the media-dependent \"physical\" address.\n          Access:\n\
    \               read-write.\n          Status:\n               deprecated.\n"
- title: 5.4.  The IP Group
  contents:
  - "5.4.  The IP Group\n   Implementation of the IP group is mandatory for all systems.\n\
    \          OBJECT:\n          -------\n               ipForwarding { ip 1 }\n\
    \          Syntax:\n               INTEGER {\n                    forwarding(1),\
    \    -- i.e., acting as a gateway\n                    not-forwarding(2) -- i.e.,\
    \ NOT acting as a gateway\n               }\n          Definition:\n         \
    \      The indication of whether this entity is acting as an IP\n            \
    \   gateway in respect to the forwarding of datagrams\n               received\
    \ by, but not addressed to, this entity.  IP\n               gateways forward\
    \ datagrams.  IP hosts do not (except\n               those source-routed via\
    \ the host).\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipDefaultTTL { ip 2 }\n          Syntax:\n               INTEGER\n      \
    \    Definition:\n               The default value inserted into the Time-To-Live\
    \ field of\n               the IP header of datagrams originated at this entity,\n\
    \               whenever a TTL value is not supplied by the transport\n      \
    \         layer protocol.\n          Access:\n               read-write.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipInReceives { ip 3 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of input datagrams received\
    \ from\n               interfaces, including those received in error.\n      \
    \    Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ipInHdrErrors { ip 4 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The number of input datagrams discarded due to errors in\n             \
    \  their IP headers, including bad checksums, version number\n               mismatch,\
    \ other format errors, time-to-live exceeded,\n               errors discovered\
    \ in processing their IP options, etc.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipInAddrErrors { ip 5 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of input datagrams discarded\
    \ because the IP\n               address in their IP header's destination field\
    \ was not a\n               valid address to be received at this entity.  This\
    \ count\n               includes invalid addresses (e.g., 0.0.0.0) and addresses\n\
    \               of unsupported Classes (e.g., Class E).  For entities\n      \
    \         which are not IP Gateways and therefore do not forward\n           \
    \    datagrams, this counter includes datagrams discarded\n               because\
    \ the destination address was not a local address.\n          Access:\n      \
    \         read-only.\n          Status:\n               mandatory.\n         \
    \ OBJECT:\n          -------\n               ipForwDatagrams { ip 6 }\n      \
    \    Syntax:\n               Counter\n          Definition:\n               The\
    \ number of input datagrams for which this entity was\n               not their\
    \ final IP destination, as a result of which an\n               attempt was made\
    \ to find a route to forward them to that\n               final destination. \
    \ In entities which do not act as IP\n               Gateways, this counter will\
    \ include only those packets\n               which were Source-Routed via this\
    \ entity, and the\n               Source-Route option processing was successful.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ipInUnknownProtos\
    \ { ip 7 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of locally-addressed datagrams received\n         \
    \      successfully but discarded because of an unknown or\n               unsupported\
    \ protocol.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipInDiscards { ip 8 }\n          Syntax:\n               Counter\n      \
    \    Definition:\n               The number of input IP datagrams for which no\
    \ problems\n               were encountered to prevent their continued processing,\n\
    \               but which were discarded (e.g., for lack of buffer\n         \
    \      space).  Note that this counter does not include any\n               datagrams\
    \ discarded while awaiting re-assembly.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipInDelivers { ip 9 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of input datagrams successfully\n\
    \               delivered to IP user-protocols (including ICMP).\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipOutRequests { ip 10 }\n \
    \         Syntax:\n               Counter\n          Definition:\n           \
    \    The total number of IP datagrams which local IP user-\n               protocols\
    \ (including ICMP) supplied to IP in requests for\n               transmission.\
    \  Note that this counter does not include\n               any datagrams counted\
    \ in ipForwDatagrams.\n          Access:\n               read-only.\n        \
    \  Status:\n               mandatory.\n          OBJECT:\n               ipOutDiscards\
    \ { ip 11 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of output IP datagrams for which no problem\n     \
    \          was encountered to prevent their transmission to their\n          \
    \     destination, but which were discarded (e.g., for lack of\n             \
    \  buffer space).  Note that this counter would include\n               datagrams\
    \ counted in ipForwDatagrams if any such packets\n               met this (discretionary)\
    \ discard criterion.\n          Access:\n               read-only.\n         \
    \ Status:\n               mandatory.\n          OBJECT:\n          -------\n \
    \              ipOutNoRoutes { ip 12 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of IP datagrams discarded because\
    \ no route\n               could be found to transmit them to their destination.\n\
    \               Note that this counter includes any packets counted in\n     \
    \          ipForwDatagrams which meet this \"no-route\" criterion.\n         \
    \      Note that this includes any datagarms which a host cannot\n           \
    \    route because all of its default gateways are down.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipReasmTimeout { ip 13 }\n\
    \          Syntax:\n               INTEGER\n          Definition:\n          \
    \     The maximum number of seconds which received fragments\n               are\
    \ held while they are awaiting reassembly at this\n               entity.\n  \
    \        Access:\n               read-only.\n          Status:\n             \
    \  mandatory.\n          OBJECT:\n          -------\n               ipReasmReqds\
    \ { ip 14 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of IP fragments received which needed to be\n     \
    \          reassembled at this entity.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipReasmOKs { ip 15 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of IP datagrams successfully\
    \ re-assembled.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipReasmFails { ip 16 }\n          Syntax:\n               Counter\n     \
    \     Definition:\n               The number of failures detected by the IP re-assembly\n\
    \               algorithm (for whatever reason: timed out, errors, etc).\n   \
    \            Note that this is not necessarily a count of discarded IP\n     \
    \          fragments since some algorithms (notably the algorithm in\n       \
    \        RFC 815) can lose track of the number of fragments by\n             \
    \  combining them as they are received.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipFragOKs { ip 17 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of IP datagrams that have been\
    \ successfully\n               fragmented at this entity.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipFragFails { ip 18 }\n   \
    \       Syntax:\n               Counter\n          Definition:\n             \
    \  The number of IP datagrams that have been discarded\n               because\
    \ they needed to be fragmented at this entity but\n               could not be,\
    \ e.g., because their \"Don't Fragment\" flag\n               was set.\n     \
    \     Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ipFragCreates { ip 19 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The number of IP datagram fragments that have been\n               generated\
    \ as a result of fragmentation at this entity.\n          Access:\n          \
    \     read-only.\n          Status:\n               mandatory.\n"
- title: 5.4.1.  The IP Address table
  contents:
  - "5.4.1.  The IP Address table\n   The Ip Address table contains this entity's\
    \ IP addressing\n   information.\n          OBJECT:\n          -------\n     \
    \          ipAddrTable { ip 20 }\n          Syntax:\n               SEQUENCE OF\
    \ IpAddrEntry\n          Definition:\n               The table of addressing information\
    \ relevant to this\n               entity's IP addresses.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipAddrEntry { ipAddrTable 1\
    \ }\n          Syntax:\n               IpAddrEntry ::= SEQUENCE {\n          \
    \          ipAdEntAddr\n                        IpAddress,\n                 \
    \   ipAdEntIfIndex\n                        INTEGER,\n                    ipAdEntNetMask\n\
    \                        IpAddress,\n                    ipAdEntBcastAddr\n  \
    \                      INTEGER,\n                    ipAdEntReasmMaxSize\n   \
    \                     INTEGER (0..65535)\n               }\n          Definition:\n\
    \               The addressing information for one of this entity's IP\n     \
    \          addresses.\n          Access:\n               read-only.\n        \
    \  Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipAdEntAddr  { ipAddrEntry 1 }\n          Syntax:\n          \
    \     IpAddress\n          Definition:\n               The IP address to which\
    \ this entry's addressing\n               information pertains.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipAdEntIfIndex  { ipAddrEntry\
    \ 2 }\n          Syntax:\n               INTEGER\n          Definition:\n    \
    \           The index value which uniquely identifies the interface\n        \
    \       to which this entry is applicable.  The interface\n               identified\
    \ by a particular value of this index is the\n               same interface as\
    \ identified by the same value of\n               ifIndex.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               ipAdEntNetMask  { ipAddrEntry\
    \ 3 }\n          Syntax:\n               IpAddress\n          Definition:\n  \
    \             The subnet mask associated with the IP address of this\n       \
    \        entry.  The value of the mask is an IP address with all\n           \
    \    the network bits set to 1 and all the hosts bits set to\n               0.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               ipAdEntBcastAddr\
    \ { ipAddrEntry 4 }\n          Syntax:\n               INTEGER\n          Definition:\n\
    \               The value of the least-significant bit in the IP\n           \
    \    broadcast address used for sending datagrams on the\n               (logical)\
    \ interface associated with the IP address of\n               this entry.  For\
    \ example, when the Internet standard\n               all-ones broadcast address\
    \ is used, the value will be 1.\n               This value applies to both the\
    \ subnet and network\n               broadcasts addresses used by the entity on\
    \ this (logical)\n               interface.\n          Access:\n             \
    \  read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ipAdEntReasmMaxSize { ipAddrEntry 5 }\n   \
    \       Syntax:\n               INTEGER (0..65535)\n          Definition:\n  \
    \             The size of the largest IP datagram which this entity can\n    \
    \           re-assemble from incoming IP fragmented datagrams\n              \
    \ received on this interface.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n"
- title: 5.4.2.  The IP Routing table
  contents:
  - "5.4.2.  The IP Routing table\n   The IP Routing table contains an entry for each\
    \ route presently known\n   to this entity.\n          OBJECT:\n          -------\n\
    \               ipRoutingTable { ip 21 }\n          Syntax:\n               SEQUENCE\
    \ OF IpRouteEntry\n          Definition:\n               This entity's IP Routing\
    \ table.\n          Access:\n               read-write.\n          Status:\n \
    \              mandatory.\n          OBJECT:\n          -------\n            \
    \   ipRouteEntry { ipRoutingTable 1 }\n          Syntax:\n               IpRouteEntry\
    \ ::= SEQUENCE {\n                    ipRouteDest\n                        IpAddress,\n\
    \                    ipRouteIfIndex\n                        INTEGER,\n      \
    \              ipRouteMetric1\n                        INTEGER,\n            \
    \        ipRouteMetric2\n                        INTEGER,\n                  \
    \  ipRouteMetric3\n                        INTEGER,\n                    ipRouteMetric4\n\
    \                        INTEGER,\n                    ipRouteNextHop\n      \
    \                  IpAddress,\n                    ipRouteType\n             \
    \           INTEGER,\n                    ipRouteProto\n                     \
    \   INTEGER,\n                    ipRouteAge\n                        INTEGER,\n\
    \                    ipRouteMask\n                        IpAddress\n        \
    \       }\n          Definition:\n               A route to a particular destination.\n\
    \          Access:\n               read-write.\n          Status:\n          \
    \     mandatory.\n          We now consider the individual components of each\
    \ route in the\n          IP Routing table:\n          OBJECT:\n          -------\n\
    \               ipRouteDest { ipRouteEntry 1 }\n          Syntax:\n          \
    \     IpAddress\n          Definition:\n               The destination IP address\
    \ of this route.  An entry with\n               a value of 0.0.0.0 is considered\
    \ a default route.\n               Multiple routes to a single destination can\
    \ appear in the\n               table, but access to such multiple entries is\
    \ dependent\n               on the table-access mechanisms defined by the network\n\
    \               management protocol in use.\n          Access:\n             \
    \  read-write.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ipRouteIfIndex  { ipRouteEntry 2 }\n      \
    \    Syntax:\n               INTEGER\n          Definition:\n               The\
    \ index value which uniquely identifies the local\n               interface through\
    \ which the next hop of this route should\n               be reached.  The interface\
    \ identified by a particular\n               value of this index is the same interface\
    \ as identified\n               by the same value of ifIndex.\n          Access:\n\
    \               read-write.\n          Status:\n               mandatory.\n  \
    \        OBJECT:\n          -------\n               ipRouteMetric1 { ipRouteEntry\
    \ 3 }\n          Syntax:\n               INTEGER\n          Definition:\n    \
    \           The primary routing metric for this route.  The semantics\n      \
    \         of this metric are determined by the routing-protocol\n            \
    \   specified in the route's ipRouteProto value.  If this\n               metric\
    \ is not used, its value should be set to -1.\n          Access:\n           \
    \    read-write.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               ipRouteMetric2 { ipRouteEntry 4 }\n       \
    \   Syntax:\n               INTEGER\n          Definition:\n               An\
    \ alternate routing metric for this route.  The\n               semantics of this\
    \ metric are determined by the routing-\n               protocol specified in\
    \ the route's ipRouteProto value.  If\n               this metric is not used,\
    \ its value should be set to -1.\n          Access:\n               read-write.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipRouteMetric3 { ipRouteEntry 5 }\n          Syntax:\n       \
    \        INTEGER\n          Definition:\n               An alternate routing metric\
    \ for this route.  The\n               semantics of this metric are determined\
    \ by the routing-\n               protocol specified in the route's ipRouteProto\
    \ value.  If\n               this metric is not used, its value should be set\
    \ to -1.\n          Access:\n               read-write.\n          Status:\n \
    \              mandatory.\n          OBJECT:\n          -------\n            \
    \   ipRouteMetric4 { ipRouteEntry 6 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               An alternate routing metric for this route.\
    \  The\n               semantics of this metric are determined by the routing-\n\
    \               protocol specified in the route's ipRouteProto value.  If\n  \
    \             this metric is not used, its value should be set to -1.\n      \
    \    Access:\n               read-write.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               ipRouteNextHop { ipRouteEntry\
    \ 7 }\n          Syntax:\n               IpAddress\n          Definition:\n  \
    \             The IP address of the next hop of this route.  (In the\n       \
    \        case of a route bound to an interface which is realized\n           \
    \    via a broadcast media, the value of this field is the\n               agent's\
    \ IP address on that interface.)\n          Access:\n               read-write.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipRouteType { ipRouteEntry 8 }\n          Syntax:\n          \
    \     INTEGER {\n                    other(1),        -- none of the following\n\
    \                    invalid(2),      -- an invalidated route\n              \
    \                       -- route to directly\n                    direct(3), \
    \      -- connected (sub-)network\n                                     -- route\
    \ to a non-local\n                    remote(4)        -- host/network/sub-network\n\
    \               }\n          Definition:\n               The type of route.\n\
    \          Setting this object to the value invalid(2) has the effect of\n   \
    \       invalidating the corresponding entry in the ipRoutingTable\n         \
    \ object.  That is, it effectively disassociates the destination\n          identified\
    \ with said entry from the route identified with said\n          entry.  It is\
    \ an implementation-specific matter as to whether\n          the agent removes\
    \ an invalidated entry from the table.\n          Accordingly, management stations\
    \ must be prepared to receive\n          tabular information from agents that\
    \ corresponds to entries\n          not currently in use.  Proper interpretation\
    \ of such entries\n          requires examination of the relevant ipRouteType\
    \ object.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    ipRouteProto { ipRouteEntry 9 }\n          Syntax:\n               INTEGER\
    \ {\n                    other(1),       -- none of the following\n          \
    \                          -- non-protocol information,\n                    \
    \                -- e.g., manually configured\n                    local(2), \
    \      -- entries\n                                    -- set via a network management\n\
    \                    netmgmt(3),     -- protocol\n                           \
    \         -- obtained via ICMP,\n                    icmp(4),        -- e.g.,\
    \ Redirect\n                                    -- the remaining values are\n\
    \                                    -- all gateway routing protocols\n      \
    \              egp(5),\n                    ggp(6),\n                    hello(7),\n\
    \                    rip(8),\n                    is-is(9),\n                \
    \    es-is(10),\n                    ciscoIgrp(11),\n                    bbnSpfIgp(12),\n\
    \                    ospf(13),\n                    bgp(14)\n               }\n\
    \          Definition:\n               The routing mechanism via which this route\
    \ was learned.\n               Inclusion of values for gateway routing protocols\
    \ is not\n               intended to imply that hosts should support those\n \
    \              protocols.\n          Access:\n               read-only.\n    \
    \      Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipRouteAge { ipRouteEntry 10 }\n          Syntax:\n          \
    \     INTEGER\n          Definition:\n               The number of seconds since\
    \ this route was last updated\n               or otherwise determined to be correct.\
    \   Note that no\n               semantics of \"too old\" can be implied except\
    \ through\n               knowledge of the routing protocol by which the route\
    \ was\n               learned.\n          Access:\n               read-write.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipRouteMask { ipRouteEntry 11 }\n          Syntax:\n         \
    \      IpAddress\n          Definition:\n               Indicate the mask to be\
    \ logical-ANDed with the\n               destination address before being compared\
    \ to the value in\n               the ipRouteDest field.  For those systems that\
    \ do not\n               support arbitrary subnet masks, an agent constructs the\n\
    \               value of the ipRouteMask by determining whether the value\n  \
    \             of the correspondent ipRouteDest field belong to a\n           \
    \    class-A, B, or C network, and then using one of:\n                    mask\
    \           network\n                    255.0.0.0      class-A\n            \
    \        255.255.0.0    class-B\n                    255.255.255.0  class-C\n\
    \               If the value of the ipRouteDest is 0.0.0.0 (a default\n      \
    \         route), then the mask value is also 0.0.0.0.  It should\n          \
    \     be noted that all IP routing subsystems implicitly use\n               this\
    \ mechanism.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n"
- title: 5.4.3.  The IP Address Translation table
  contents:
  - "5.4.3.  The IP Address Translation table\n   The Address Translation tables contain\
    \ the IpAddress to \"physical\"\n   address equivalences.  Some interfaces do\
    \ not use translation tables\n   for determining address equivalences (e.g., DDN-X.25\
    \ has an\n   algorithmic method); if all interfaces are of this type, then the\n\
    \   Address Translation table is empty, i.e., has zero entries.\n          OBJECT:\n\
    \          -------\n               ipNetToMediaTable { ip 22 }\n          Syntax:\n\
    \               SEQUENCE OF IpNetToMediaEntry\n          Definition:\n       \
    \        The IP Address Translation table used for mapping from IP\n         \
    \      addresses to physical addresses.\n          Access:\n               read-write.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               IpNetToMediaEntry { ipNetToMediaTable 1 }\n          Syntax:\n\
    \               IpNetToMediaEntry ::= SEQUENCE {\n                    ipNetToMediaIfIndex\n\
    \                        INTEGER,\n                    ipNetToMediaPhysAddress\n\
    \                        OCTET STRING,\n                    ipNetToMediaNetAddress\n\
    \                        IpAddress,\n                    ipNetToMediaType\n  \
    \                      INTEGER\n               }\n          Definition:\n    \
    \           Each entry contains one IpAddress to \"physical\" address\n      \
    \         equivalence.\n          Access:\n               read-write.\n      \
    \    Status:\n               mandatory.\n          We now consider the individual\
    \ components of each IP Address\n          Translation table entry:\n        \
    \  OBJECT:\n          -------\n               ipNetToMediaIfIndex { ipNetToMediaEntry\
    \ 1 }\n          Syntax:\n               INTEGER\n          Definition:\n    \
    \           The interface on which this entry's equivalence is\n             \
    \  effective.  The interface identified by a particular\n               value\
    \ of this index is the same interface as identified\n               by the same\
    \ value of ifIndex.\n          Access:\n               read-write.\n         \
    \ Status:\n               mandatory.\n          OBJECT:\n          -------\n \
    \              ipNetToMediaPhysAddress { ipNetToMediaEntry 2 }\n          Syntax:\n\
    \               OCTET STRING\n          Definition:\n               The media-dependent\
    \ \"physical\" address.\n          Access:\n               read-write.\n     \
    \     Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               ipNetToMediaNetAddress { ipNetToMediaEntry 3 }\n          Syntax:\n\
    \               IpAddress\n          Definition:\n               The IpAddress\
    \ corresponding to the media-dependent\n               \"physical\" address.\n\
    \          Access:\n               read-write.\n          Status:\n          \
    \     mandatory.\n          OBJECT:\n          -------\n               ipNetToMediaType\
    \ { ipNetToMediaEntry 4 }\n          Syntax:\n               INTEGER {\n     \
    \               other(1),        -- none of the following\n                  \
    \  invalid(2),      -- an invalidated mapping\n                    dynamic(3),\n\
    \                    static(4)\n               }\n          Definition:\n    \
    \           The type of mapping.\n          Setting this object to the value invalid(2)\
    \ has the effect of\n          invalidating the corresponding entry in the ipNetToMediaTable.\n\
    \          That is, it effectively disassociates the interface identified\n  \
    \        with said entry from the mapping identified with said entry.\n      \
    \    It is an implementation-specific matter as to whether the\n          agent\
    \ removes an invalidated entry from the table.\n          Accordingly, management\
    \ stations must be prepared to receive\n          tabular information from agents\
    \ that corresponds to entries\n          not currently in use.  Proper interpretation\
    \ of such entries\n          requires examination of the relevant ipNetToMediaType\
    \ object.\n          Access:\n               read-write.\n          Status:\n\
    \               mandatory.\n"
- title: 5.5.  The ICMP Group
  contents:
  - "5.5.  The ICMP Group\n   Implementation of the ICMP group is mandatory for all\
    \ systems.\n   The ICMP group contains the ICMP input and output statistics.\n\
    \          OBJECT:\n          -------\n               icmpInMsgs { icmp 1 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The total number of ICMP messages which the entity\n               received.\
    \  Note that this counter includes all those\n               counted by icmpInErrors.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpInErrors\
    \ { icmp 2 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP messages which the entity received but\n  \
    \             determined as having ICMP-specific errors (bad ICMP\n          \
    \     checksums, bad length, etc.).\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpInDestUnreachs { icmp 3 }\n          Syntax:\n           \
    \    Counter\n          Definition:\n               The number of ICMP Destination\
    \ Unreachable messages\n               received.\n          Access:\n        \
    \       read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               icmpInTimeExcds { icmp 4 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The number of ICMP\
    \ Time Exceeded messages received.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpInParmProbs { icmp 5 }\n          Syntax:\n              \
    \ Counter\n          Definition:\n               The number of ICMP Parameter\
    \ Problem messages received.\n          Access:\n               read-only.\n \
    \         Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpInSrcQuenchs { icmp 6 }\n          Syntax:\n             \
    \  Counter\n          Definition:\n               The number of ICMP Source Quench\
    \ messages received.\n          Access:\n               read-only.\n         \
    \ Status:\n               mandatory.\n          OBJECT:\n          -------\n \
    \              icmpInRedirects { icmp 7 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Redirect messages received.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpInEchos\
    \ { icmp 8 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP Echo (request) messages received.\n       \
    \   Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpInEchoReps { icmp 9\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Echo Reply messages received.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpInTimestamps { icmp 10\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Timestamp (request) messages received.\n        \
    \  Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpInTimestampReps { icmp\
    \ 11 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of ICMP Timestamp Reply messages received.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpInAddrMasks { icmp 12\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Address Mask Request messages\n               received.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpInAddrMaskReps\
    \ { icmp 13 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP Address Mask Reply messages received.\n   \
    \       Access:\n               read-only.\n          Status:\n              \
    \ mandatory.\n          OBJECT:\n          -------\n               icmpOutMsgs\
    \ { icmp 14 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of ICMP messages which this entity\n        \
    \       attempted to send.  Note that this counter includes all\n            \
    \   those counted by icmpOutErrors.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpOutErrors { icmp 15 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP messages which this\
    \ entity did not\n               send due to problems discovered within ICMP such\
    \ as a\n               lack of buffers.  This value should not include errors\n\
    \               discovered outside the ICMP layer such as the inability\n    \
    \           of IP to route the resultant datagram.  In some\n               implementations\
    \ there may be no types of error which\n               contribute to this counter's\
    \ value.\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n          OBJECT:\n          -------\n             \
    \  icmpOutDestUnreachs { icmp 16 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Destination Unreachable\
    \ messages sent.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    icmpOutTimeExcds { icmp 17 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Time Exceeded messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutParmProbs { icmp 18 }\n          Syntax:\n               Counter\n  \
    \        Definition:\n               The number of ICMP Parameter Problem messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutSrcQuenchs { icmp 19 }\n          Syntax:\n               Counter\n \
    \         Definition:\n               The number of ICMP Source Quench messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutRedirects { icmp 20 }\n          Syntax:\n               Counter\n  \
    \        Definition:\n               The number of ICMP Redirect messages sent.\
    \  For a host,\n               this object will always be zero, since hosts do\
    \ not send\n               redirects.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               icmpOutEchos { icmp 21 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of ICMP Echo (request) messages\
    \ sent.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ icmpOutEchoReps { icmp 22 }\n          Syntax:\n               Counter\n   \
    \       Definition:\n               The number of ICMP Echo Reply messages sent.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               icmpOutTimestamps\
    \ { icmp 23 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of ICMP Timestamp (request) messages sent.\n      \
    \    Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               icmpOutTimestampReps { icmp\
    \ 24 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of ICMP Timestamp Reply messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpOutAddrMasks { icmp 25\
    \ }\n          Syntax:\n               Counter\n          Definition:\n      \
    \         The number of ICMP Address Mask Request messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               icmpOutAddrMaskReps { icmp\
    \ 26 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of ICMP Address Mask Reply messages sent.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n"
- title: 5.6.  The TCP Group
  contents:
  - "5.6.  The TCP Group\n   Implementation of the TCP group is mandatory for all\
    \ systems that\n   implement the TCP.\n   Note that instances of object types\
    \ that represent information about\n   a particular TCP connection are transient;\
    \ they persist only as long\n   as the connection in question.\n          OBJECT:\n\
    \          -------\n               tcpRtoAlgorithm { tcp 1 }\n          Syntax:\n\
    \               INTEGER {\n                    other(1),    -- none of the following\n\
    \                    constant(2), -- a constant rto\n                    rsre(3),\
    \     -- MIL-STD-1778, Appendix B\n                    vanj(4)      -- Van Jacobson's\
    \ algorithm [11]\n               }\n          Definition:\n               The\
    \ algorithm used to determine the timeout value used\n               for retransmitting\
    \ unacknowledged octets.\n          Access:\n               read-only.\n     \
    \     Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpRtoMin { tcp 2 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               The minimum value permitted by a TCP implementation\
    \ for\n               the retransmission timeout, measured in milliseconds.\n\
    \               More refined semantics for objects of this type depend\n     \
    \          upon the algorithm used to determine the retransmission\n         \
    \      timeout.  In particular, when the timeout algorithm is\n              \
    \ rsre(3), an object of this type has the semantics of the\n               LBOUND\
    \ quantity described in RFC 793.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpRtoMax { tcp 3 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               The maximum value permitted by a TCP implementation\
    \ for\n               the retransmission timeout, measured in milliseconds.\n\
    \               More refined semantics for objects of this type depend\n     \
    \          upon the algorithm used to determine the retransmission\n         \
    \      timeout.  In particular, when the timeout algorithm is\n              \
    \ rsre(3), an object of this type has the semantics of the\n               UBOUND\
    \ quantity described in RFC 793.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpMaxConn { tcp 4 }\n          Syntax:\n               INTEGER\n\
    \          Definition:\n               The limit on the total number of TCP connections\
    \ the\n               entity can support.  In entities where the maximum number\n\
    \               of connections is dynamic, this object should contain the\n  \
    \             value \"-1\".\n          Access:\n               read-only.\n  \
    \        Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpActiveOpens { tcp 5 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of times TCP connections have\
    \ made a direct\n               transition to the SYN-SENT state from the CLOSED\
    \ state.\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n          OBJECT:\n          -------\n             \
    \  tcpPassiveOpens { tcp 6 }\n          Syntax:\n               Counter\n    \
    \      Definition:\n               The number of times TCP connections have made\
    \ a direct\n               transition to the SYN-RCVD state from the LISTEN state.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               tcpAttemptFails\
    \ { tcp 7 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of times TCP connections have made a direct\n     \
    \          transition to the CLOSED state from either the SYN-SENT\n         \
    \      state or the SYN-RCVD state, plus the number of times TCP\n           \
    \    connections have made a direct transition to the LISTEN\n               state\
    \ from the SYN-RCVD state.\n          Access:\n               read-only.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpEstabResets { tcp 8 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of times TCP connections have\
    \ made a direct\n               transition to the CLOSED state from either the\n\
    \               ESTABLISHED state or the CLOSE-WAIT state.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               tcpCurrEstab { tcp 9 }\n  \
    \        Syntax:\n               Gauge\n          Definition:\n              \
    \ The number of TCP connections for which the current state\n               is\
    \ either ESTABLISHED or CLOSE-WAIT.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpInSegs { tcp 10 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of segments received,\
    \ including those\n               received in error.  This count includes segments\
    \ received\n               on currently established connections.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               tcpOutSegs { tcp 11 }\n   \
    \       Syntax:\n               Counter\n          Definition:\n             \
    \  The total number of segments sent, including those on\n               current\
    \ connections but excluding those containing only\n               retransmitted\
    \ octets.\n          Access:\n               read-only.\n          Status:\n \
    \              mandatory.\n          OBJECT:\n          -------\n            \
    \   tcpRetransSegs { tcp 12 }\n          Syntax:\n               Counter\n   \
    \       Definition:\n               The total number of segments retransmitted\
    \ - that is, the\n               number of TCP segments transmitted containing\
    \ one or more\n               previously transmitted octets.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n"
- title: 5.6.1.  The TCP Connection table
  contents:
  - "5.6.1.  The TCP Connection table\n   The TCP connection table contains information\
    \ about this entity's\n   existing TCP connections.\n          OBJECT:\n     \
    \     -------\n               tcpConnTable { tcp 13 }\n          Syntax:\n   \
    \            SEQUENCE OF TcpConnEntry\n          Definition:\n               A\
    \ table containing TCP connection-specific information.\n          Access:\n \
    \              read-only.\n          Status:\n               mandatory.\n    \
    \      OBJECT:\n          -------\n               tcpConnEntry { tcpConnTable\
    \ 1 }\n          Syntax:\n               TcpConnEntry ::= SEQUENCE {\n       \
    \             tcpConnState\n                        INTEGER,\n               \
    \     tcpConnLocalAddress\n                        IpAddress,\n              \
    \      tcpConnLocalPort\n                        INTEGER (0..65535),\n       \
    \             tcpConnRemAddress\n                        IpAddress,\n        \
    \            tcpConnRemPort\n                        INTEGER (0..65535)\n    \
    \           }\n          Definition:\n               Information about a particular\
    \ current TCP connection.\n               An object of this type is transient,\
    \ in that it ceases to\n               exist when (or soon after) the connection\
    \ makes the\n               transition to the CLOSED state.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               tcpConnState { tcpConnEntry\
    \ 1 }\n          Syntax:\n               INTEGER {\n                    closed(1),\n\
    \                    listen(2),\n                    synSent(3),\n           \
    \         synReceived(4),\n                    established(5),\n             \
    \       finWait1(6),\n                    finWait2(7),\n                    closeWait(8),\n\
    \                    lastAck(9),\n                    closing(10),\n         \
    \           timeWait(11)\n               }\n          Definition:\n          \
    \     The state of this TCP connection.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpConnLocalAddress { tcpConnEntry 2 }\n          Syntax:\n  \
    \             IpAddress\n          Definition:\n               The local IP address\
    \ for this TCP connection.  In the\n               case of a connection in the\
    \ listen state which is willing\n               to accept connections for any\
    \ IP interface associated\n               with the node, the value 0.0.0.0 is\
    \ used.\n          Access:\n               read-only.\n          Status:\n   \
    \            mandatory.\n          OBJECT:\n          -------\n              \
    \ tcpConnLocalPort { tcpConnEntry 3 }\n          Syntax:\n               INTEGER\
    \ (0..65535)\n          Definition:\n               The local port number for\
    \ this TCP connection.\n          Access:\n               read-only.\n       \
    \   Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpConnRemAddress { tcpConnEntry 4 }\n          Syntax:\n    \
    \           IpAddress\n          Definition:\n               The remote IP address\
    \ for this TCP connection.\n          Access:\n               read-only.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               tcpConnRemPort { tcpConnEntry 5 }\n          Syntax:\n       \
    \        INTEGER (0..65535)\n          Definition:\n               The remote\
    \ port number for this TCP connection.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n"
- title: 5.6.2.  Additional TCP Objects
  contents:
  - "5.6.2.  Additional TCP Objects\n          OBJECT:\n          -------\n      \
    \         tcpInErrs { tcp 14 }\n          Syntax:\n               Counter\n  \
    \        Definition:\n               The total number of segments received in\
    \ error (e.g., bad\n               TCP checksums).\n          Access:\n      \
    \         read-only.\n          Status:\n               mandatory.\n         \
    \ OBJECT:\n          -------\n               tcpOutRsts { tcp 15 }\n         \
    \ Syntax:\n               Counter\n          Definition:\n               The number\
    \ of TCP segments sent containing the RST flag.\n          Access:\n         \
    \      read-only.\n          Status:\n               mandatory.\n"
- title: 5.7.  The UDP Group
  contents:
  - "5.7.  The UDP Group\n   Implementation of the UDP group is mandatory for all\
    \ systems which\n   implement the UDP.\n          OBJECT:\n          -------\n\
    \               udpInDatagrams { udp 1 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of UDP datagrams delivered\
    \ to UDP users.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    udpNoPorts { udp 2 }\n          Syntax:\n               Counter\n       \
    \   Definition:\n               The total number of received UDP datagrams for\
    \ which\n               there was no application at the destination port.\n  \
    \        Access:\n               read-only.\n          Status:\n             \
    \  mandatory.\n          OBJECT:\n          -------\n               udpInErrors\
    \ { udp 3 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The number of received UDP datagrams that could not be\n     \
    \          delivered for reasons other than the lack of an\n               application\
    \ at the destination port.\n          Access:\n               read-only.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               udpOutDatagrams { udp 4 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of UDP datagrams sent\
    \ from this entity.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n"
- title: 5.7.1.  The UDP Listener table
  contents:
  - "5.7.1.  The UDP Listener table\n   The UDP listener table contains information\
    \ about this entity's UDP\n   end-points on which a local application is currently\
    \ accepting\n   datagrams.\n          OBJECT:\n          -------\n           \
    \    udpTable { udp 5 }\n          Syntax:\n               SEQUENCE OF UdpEntry\n\
    \          Definition:\n               A table containing UDP listener information.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               udpEntry\
    \ { udpTable 1 }\n          Syntax:\n               UdpEntry ::= SEQUENCE {\n\
    \                    udpLocalAddress\n                        IpAddress,\n   \
    \                 udpLocalPort\n                        INTEGER (0..65535)\n \
    \              }\n          Definition:\n               Information about a particular\
    \ current UDP listener.\n          Access:\n               read-only.\n      \
    \    Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               udpLocalAddress { udpEntry 1 }\n          Syntax:\n          \
    \     IpAddress\n          Definition:\n               The local IP address for\
    \ this UDP listener.  In the case\n               of a UDP listener which is willing\
    \ to accept datagrams\n               for any IP interface associated with the\
    \ node, the value\n               0.0.0.0 is used.\n          Access:\n      \
    \         read-only.\n          Status:\n               mandatory.\n         \
    \ OBJECT:\n          -------\n               udpLocalPort { udpEntry 2 }\n   \
    \       Syntax:\n               INTEGER (0..65535)\n          Definition:\n  \
    \             The local port number for this UDP listener.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n"
- title: 5.8.  The EGP Group
  contents:
  - "5.8.  The EGP Group\n   Implementation of the EGP group is mandatory for all\
    \ systems which\n   implement the EGP.\n          OBJECT:\n          -------\n\
    \               egpInMsgs { egp 1 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of EGP messages received without\
    \ error.\n          Access:\n               read-only.\n          Status:\n  \
    \             mandatory.\n          OBJECT:\n          -------\n             \
    \  egpInErrors { egp 2 }\n          Syntax:\n               Counter\n        \
    \  Definition:\n               The number of EGP messages received that proved\
    \ to be in\n               error.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               egpOutMsgs { egp 3 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of locally generated EGP\
    \ messages.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    egpOutErrors { egp 4 }\n          Syntax:\n               Counter\n     \
    \     Definition:\n               The number of locally generated EGP messages\
    \ not sent due\n               to resource limitations within an EGP entity.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n"
- title: 5.8.1.  The EGP Neighbor table
  contents:
  - "5.8.1.  The EGP Neighbor table\n   The Egp Neighbor table contains information\
    \ about this entity's EGP\n   neighbors.\n          OBJECT:\n          -------\n\
    \               egpNeighTable { egp 5 }\n          Syntax:\n               SEQUENCE\
    \ OF EgpNeighEntry\n          Definition:\n               The EGP neighbor table.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               egpNeighEntry\
    \ { egpNeighTable 1 }\n          Syntax:\n               EgpNeighEntry ::= SEQUENCE\
    \ {\n                    egpNeighState\n                        INTEGER,\n   \
    \                 egpNeighAddr\n                        IpAddress,\n         \
    \           egpNeighAs\n                        INTEGER,\n                   \
    \ egpNeighInMsgs\n                        Counter,\n                    egpNeighInErrs\n\
    \                        Counter,\n                    egpNeighOutMsgs\n     \
    \                   Counter,\n                    egpNeighOutErrs\n          \
    \              Counter,\n                    egpNeighInErrMsgs\n             \
    \           Counter,\n                    egpNeighOutErrMsgs\n               \
    \         Counter,\n                    egpNeighStateUps\n                   \
    \     Counter,\n                    egpNeighStateDowns\n                     \
    \   Counter,\n                    egpNeighIntervalHello\n                    \
    \    INTEGER,\n                    egpNeighIntervalPoll\n                    \
    \    INTEGER,\n                    egpNeighMode\n                        INTEGER,\n\
    \                    egpNeighEventTrigger\n                        INTEGER\n \
    \              }\n          Definition:\n               Information about this\
    \ entity's relationship with a\n               particular EGP neighbor.\n    \
    \      Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          We now consider the individual components of each EGP neighbor\n  \
    \        entry:\n          OBJECT:\n          -------\n               egpNeighState\
    \ { egpNeighEntry 1 }\n          Syntax:\n               INTEGER {\n         \
    \           idle(1),\n                    acquisition(2),\n                  \
    \  down(3),\n                    up(4),\n                    cease(5)\n      \
    \         }\n          Definition:\n               The EGP state of the local\
    \ system with respect to this\n               entry's EGP neighbor.  Each EGP\
    \ state is represented by a\n               value that is one greater than the\
    \ numerical value\n               associated with said state in RFC 904.\n   \
    \       Access:\n               read-only.\n          Status:\n              \
    \ mandatory.\n          OBJECT:\n          -------\n               egpNeighAddr\
    \ { egpNeighEntry 2 }\n          Syntax:\n               IpAddress\n         \
    \ Definition:\n               The IP address of this entry's EGP neighbor.\n \
    \         Access:\n               read-only.\n          Status:\n            \
    \   mandatory.\n          OBJECT:\n          -------\n               egpNeighAs\
    \ { egpNeighEntry 3 }\n          Syntax:\n               INTEGER\n          Definition:\n\
    \               The autonomous system of this EGP peer.  Zero should be\n    \
    \           specified if the autonomous system number of the neighbor\n      \
    \         is not yet known.\n          Access:\n               read-only.\n  \
    \        Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               egpNeighInMsgs { egpNeighEntry 4 }\n          Syntax:\n      \
    \         Counter\n          Definition:\n               The number of EGP messages\
    \ received without error from\n               this EGP peer.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               egpNeighInErrs { egpNeighEntry\
    \ 5 }\n          Syntax:\n               Counter\n          Definition:\n    \
    \           The number of EGP messages received from this EGP peer\n         \
    \      that proved to be in error (e.g., bad EGP checksum).\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               egpNeighOutMsgs { egpNeighEntry\
    \ 6 }\n          Syntax:\n               Counter\n          Definition:\n    \
    \           The number of locally generated EGP messages to this EGP\n       \
    \        peer.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    egpNeighOutErrs { egpNeighEntry 7 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The number of locally generated EGP messages\
    \ not sent to\n               this EGP peer due to resource limitations within\
    \ an EGP\n               entity.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               egpNeighInErrMsgs { egpNeighEntry 8 }\n          Syntax:\n   \
    \            Counter\n          Definition:\n               The number of EGP-defined\
    \ error messages received from\n               this EGP peer.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               egpNeighOutErrMsgs { egpNeighEntry\
    \ 9 }\n          Syntax:\n               Counter\n          Definition:\n    \
    \           The number of EGP-defined error messages sent to this EGP\n      \
    \         peer.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    egpNeighStateUps { egpNeighEntry 10 }\n          Syntax:\n              \
    \ Counter\n          Definition:\n               The number of EGP state transitions\
    \ to the UP state with\n               this EGP peer.\n          Access:\n   \
    \            read-only.\n          Status:\n               mandatory.\n      \
    \    OBJECT:\n          -------\n               egpNeighStateDowns { egpNeighEntry\
    \ 11 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The number of EGP state transitions from the UP state to\n      \
    \         any other state with this EGP peer.\n          Access:\n           \
    \    read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               egpNeighIntervalHello { egpNeighEntry 12 }\n\
    \          Syntax:\n               INTEGER\n          Definition:\n          \
    \     The interval between EGP Hello command retransmissions\n               (in\
    \ hundredths of a second).  This represents the t1\n               timer as defined\
    \ in RFC 904.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    egpNeighIntervalPoll { egpNeighEntry 13 }\n          Syntax:\n          \
    \     INTEGER\n          Definition:\n               The interval between EGP\
    \ poll command retransmissions (in\n               hundredths of a second).  This\
    \ represents the t3 timer as\n               defined in RFC 904.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               egpNeighMode { egpNeighEntry\
    \ 14 }\n          Syntax:\n               INTEGER {\n                    active(1),\n\
    \                    passive(2)\n               }\n          Definition:\n   \
    \            The polling mode of this EGP entity, either passive or\n        \
    \       active.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    egpNeighEventTrigger { egpNeighEntry 15 }\n          Syntax:\n          \
    \     INTEGER {\n                    start(1),\n                    stop(2)\n\
    \               }\n          Definition:\n               A control variable used\
    \ to trigger operator-initiated\n               Start and Stop events.  When read,\
    \ this variable always\n               returns the most recent value that egpNeightEventTrigger\n\
    \               was set to.  If it has not been set since the last\n         \
    \      initialization of the network management subsystem on the\n           \
    \    node, it returns a value of \"stop\".\n          Access:\n              \
    \ read-write\n          Status:\n               mandatory.\n"
- title: 5.8.2.  Additional EGP variables
  contents:
  - "5.8.2.  Additional EGP variables\n          OBJECT:\n          -------\n    \
    \           egpAs { egp 6 }\n          Syntax:\n               INTEGER\n     \
    \     Definition:\n               The autonomous system number of this EGP entity.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n"
- title: 5.9.  The Transmission Group
  contents:
  - "5.9.  The Transmission Group\n   Based on the transmission media underlying each\
    \ interface on a\n   system, the corresponding portion of the Transmission group\
    \ is\n   mandatory for that system.\n   When Internet-standard definitions for\
    \ managing transmission media\n   are defined, the transmission group is used\
    \ to provide a prefix for\n   the names of those objects.\n   Typically, such\
    \ definitions reside in the experimental portion of the\n   MIB until they are\
    \ \"proven\", then as a part of the Internet\n   standardization process, the\
    \ definitions are accordingly elevated and\n   a new object identifier, under\
    \ the transmission group is defined.  By\n   convention, the name assigned is:\n\
    \               type OBJECT IDENTIFIER    ::= { transmission number }\n   where\
    \ \"type\" is the symbolic value used for the media in the ifType\n   column of\
    \ the ifTable object, and \"number\" is the actual integer\n   value corresponding\
    \ to the symbol.\n"
- title: 5.10.  The SNMP Group
  contents:
  - "5.10.  The SNMP Group\n   Implementation of the SNMP group is mandatory for all\
    \ systems which\n   support an SNMP protocol entity. Some of the objects defined\
    \ below\n   will be zero-valued in those SNMP implementations that are optimized\n\
    \   to support only those functions specific to either a management agent\n  \
    \ or a management client.\n          OBJECT:\n          -------\n            \
    \   snmpInPkts { snmp 1 }\n          Syntax:\n               Counter\n       \
    \   Definition:\n               The total number of PDUs delivered to the SNMP\
    \ entity\n               from the transport service.\n          Access:\n    \
    \           read-only.\n          Status:\n               mandatory.\n       \
    \   OBJECT:\n          -------\n               snmpOutPkts { snmp 2 }\n      \
    \    Syntax:\n               Counter\n          Definition:\n               The\
    \ total number of SNMP PDUs which were passed from the\n               SNMP protocol\
    \ entity to the transport service.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpInBadVersions { snmp 3 }\n          Syntax:\n            \
    \   Counter\n          Definition:\n               The total number of syntactically\
    \ correct SNMP PDUs which\n               were delivered to the SNMP protocol\
    \ entity and were for\n               an unsupported SNMP version.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               snmpInBadCommunityNames\
    \ { snmp 4 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of SNMP PDUs delivered to the SNMP\n        \
    \       protocol entity which used a SNMP community name not\n               known\
    \ to said entity.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    snmpInBadCommunityUses { snmp 5 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of SNMP PDUs delivered\
    \ to the SNMP\n               protocol entity which represented an SNMP operation\
    \ which\n               was not allowed by the SNMP community named in the PDU.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               snmpInASNParseErrs\
    \ { snmp 6 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number of ASN.1 parsing errors (either in\n        \
    \       encoding or syntax) encountered by the SNMP protocol\n               entity\
    \ when decoding received SNMP PDUs.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpInBadTypes { snmp 7 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of SNMP PDUs delivered\
    \ to the SNMP\n               protocol entity which had an unknown PDU type.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               snmpInTooBigs\
    \ { snmp 8 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number valid SNMP PDUs which were delivered to\n   \
    \            the SNMP protocol entity and for which the value of the\n       \
    \        \"ErrorStatus\" component is \"tooBig.\"\n          Access:\n       \
    \        read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               snmpInNoSuchNames { snmp 9 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The total number\
    \ valid SNMP PDUs which were delivered to\n               the SNMP protocol entity\
    \ and for which the value of the\n               \"ErrorStatus\" component is\
    \ \"noSuchName.\"\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    snmpInBadValues { snmp 10 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number valid SNMP PDUs which\
    \ were delivered to\n               the SNMP protocol entity and for which the\
    \ value of the\n               \"ErrorStatus\" component is \"badValue.\"\n  \
    \        Access:\n               read-only.\n          Status:\n             \
    \  mandatory.\n          OBJECT:\n          -------\n               snmpInReadOnlys\
    \ { snmp 11 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number valid SNMP PDUs which were delivered to\n   \
    \            the SNMP protocol entity and for which the value of the\n       \
    \        \"ErrorStatus\" component is \"readOnly.\"\n          Access:\n     \
    \          read-only.\n          Status:\n               mandatory.\n        \
    \  OBJECT:\n          -------\n               snmpInGenErrs { snmp 12 }\n    \
    \      Syntax:\n               Counter\n          Definition:\n              \
    \ The total number valid SNMP PDUs which were delivered to\n               the\
    \ SNMP protocol entity and for which the value of the\n               \"ErrorStatus\"\
    \ component is \"genErr.\"\n          Access:\n               read-only.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpInTotalReqVars { snmp 13 }\n          Syntax:\n          \
    \     Counter\n          Definition:\n               The total number of MIB objects\
    \ which have been retrieved\n               successfully by the SNMP protocol\
    \ entity as the result of\n               receiving valid SNMP Get-Request and\
    \ Get-Next PDUs.\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    snmpInTotalSetVars { snmp 14 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of MIB objects which have\
    \ been altered\n               successfully by the SNMP protocol entity as the\
    \ result of\n               receiving valid SNMP Set-Request PDUs.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               snmpInGetRequests { snmp\
    \ 15 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The total number of SNMP Get-Request PDUs which have been\n     \
    \          accepted and processed by the SNMP protocol entity.\n          Access:\n\
    \               read-only.\n          Status:\n               mandatory.\n   \
    \       OBJECT:\n          -------\n               snmpInGetNexts { snmp 16 }\n\
    \          Syntax:\n               Counter\n          Definition:\n          \
    \     The total number of SNMP Get-Next PDUs which have been\n               accepted\
    \ and processed by the SNMP protocol entity.\n          Access:\n            \
    \   read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               snmpInSetRequests { snmp 17 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The total number\
    \ of SNMP Set-Request PDUs which have been\n               accepted and processed\
    \ by the SNMP protocol entity.\n          Access:\n               read-only.\n\
    \          Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpInGetResponses { snmp 18 }\n          Syntax:\n          \
    \     Counter\n          Definition:\n               The total number of SNMP\
    \ Get-Response PDUs which have\n               been accepted and processed by\
    \ the SNMP protocol entity.\n          Access:\n               read-only.\n  \
    \        Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpInTraps { snmp 19 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of SNMP Trap PDUs which\
    \ have been\n               accepted and processed by the SNMP protocol entity.\n\
    \          Access:\n               read-only.\n          Status:\n           \
    \    mandatory.\n          OBJECT:\n          -------\n               snmpOutTooBigs\
    \ { snmp 20 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number valid SNMP PDUs which were generated by\n   \
    \            the SNMP protocol entity and for which the value of the\n       \
    \        \"ErrorStatus\" component is \"tooBig.\"\n          Access:\n       \
    \        read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               snmpOutNoSuchNames { snmp 21 }\n          Syntax:\n\
    \               Counter\n          Definition:\n               The total number\
    \ valid SNMP PDUs which were generated by\n               the SNMP protocol entity\
    \ and for which the value of the\n               \"ErrorStatus\" component is\
    \ \"noSuchName.\"\n          Access:\n               read-only.\n          Status:\n\
    \               mandatory.\n          OBJECT:\n          -------\n           \
    \    snmpOutBadValues { snmp 22 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number valid SNMP PDUs which\
    \ were generated by\n               the SNMP protocol entity and for which the\
    \ value of the\n               \"ErrorStatus\" component is \"badValue.\"\n  \
    \        Access:\n               read-only.\n          Status:\n             \
    \  mandatory.\n          OBJECT:\n          -------\n               snmpOutReadOnlys\
    \ { snmp 23 }\n          Syntax:\n               Counter\n          Definition:\n\
    \               The total number valid SNMP PDUs which were generated by\n   \
    \            the SNMP protocol entity and for which the value of the\n       \
    \        \"ErrorStatus\" component is \"readOnly.\"\n          Access:\n     \
    \          read-only.\n          Status:\n               mandatory.\n        \
    \  OBJECT:\n          -------\n               snmpOutGenErrs { snmp 24 }\n   \
    \       Syntax:\n               Counter\n          Definition:\n             \
    \  The total number valid SNMP PDUs which were generated by\n               the\
    \ SNMP protocol entity and for which the value of the\n               \"ErrorStatus\"\
    \ component is \"genErr.\"\n          Access:\n               read-only.\n   \
    \       Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpOutGetRequests { snmp 25 }\n          Syntax:\n          \
    \     Counter\n          Definition:\n               The total number of SNMP\
    \ Get-Request PDUs which have been\n               generated by the SNMP protocol\
    \ entity.\n          Access:\n               read-only.\n          Status:\n \
    \              mandatory.\n          OBJECT:\n          -------\n            \
    \   snmpOutGetNexts { snmp 26 }\n          Syntax:\n               Counter\n \
    \         Definition:\n               The total number of SNMP Get-Next PDUs which\
    \ have been\n               generated by the SNMP protocol entity.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               snmpOutSetRequests { snmp\
    \ 27 }\n          Syntax:\n               Counter\n          Definition:\n   \
    \            The total number of SNMP Set-Request PDUs which have been\n     \
    \          generated by the SNMP protocol entity.\n          Access:\n       \
    \        read-only.\n          Status:\n               mandatory.\n          OBJECT:\n\
    \          -------\n               snmpOutGetResponses { snmp 28 }\n         \
    \ Syntax:\n               Counter\n          Definition:\n               The total\
    \ number of SNMP Get-Response PDUs which have\n               been generated by\
    \ the SNMP protocol entity.\n          Access:\n               read-only.\n  \
    \        Status:\n               mandatory.\n          OBJECT:\n          -------\n\
    \               snmpOutTraps { snmp 29 }\n          Syntax:\n               Counter\n\
    \          Definition:\n               The total number of SNMP Trap PDUs which\
    \ have been\n               generated by the SNMP protocol entity.\n         \
    \ Access:\n               read-only.\n          Status:\n               mandatory.\n\
    \          OBJECT:\n          -------\n               snmpEnableAuthTraps { snmp\
    \ 30 }\n          Syntax:\n               INTEGER {\n                    enabled(1),\n\
    \                    disabled(2)\n               }\n          Definition:\n  \
    \             Indicates whether the SNMP agent process is configured to\n    \
    \           generate authentication-failure traps.\n          Access:\n      \
    \         read-write.\n          Status:\n               mandatory.\n"
- title: 6.  Definitions
  contents:
  - "6.  Definitions\n               RFC1158-MIB\n               DEFINITIONS ::= BEGIN\n\
    \               IMPORTS\n                       mgmt, OBJECT-TYPE, NetworkAddress,\
    \ IpAddress,\n                       Counter, Gauge, TimeTicks\n             \
    \              FROM RFC1155-SMI;\n               mib-2      OBJECT IDENTIFIER\
    \ ::= { mgmt 1 }    -- MIB-II\n                          -- (same prefix as MIB-I)\n\
    \               system     OBJECT IDENTIFIER ::= { mib-2 1 }\n               interfaces\
    \ OBJECT IDENTIFIER ::= { mib-2 2 }\n               at         OBJECT IDENTIFIER\
    \ ::= { mib-2 3 }\n               ip         OBJECT IDENTIFIER ::= { mib-2 4 }\n\
    \               icmp       OBJECT IDENTIFIER ::= { mib-2 5 }\n               tcp\
    \        OBJECT IDENTIFIER ::= { mib-2 6 }\n               udp        OBJECT IDENTIFIER\
    \ ::= { mib-2 7 }\n               egp        OBJECT IDENTIFIER ::= { mib-2 8 }\n\
    \               -- cmot    OBJECT IDENTIFIER ::= { mib-2 9 }\n               transmission\
    \ OBJECT IDENTIFIER ::= { mib-2 10 }\n               snmp       OBJECT IDENTIFIER\
    \ ::= { mib-2 11 }\n               -- object types\n               -- the System\
    \ group\n               sysDescr OBJECT-TYPE\n                       SYNTAX  DisplayString\
    \ (SIZE (0..255))\n                       ACCESS  read-only\n                \
    \       STATUS  mandatory\n                       ::= { system 1 }\n         \
    \      sysObjectID OBJECT-TYPE\n                       SYNTAX  OBJECT IDENTIFIER\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { system 2 }\n               sysUpTime OBJECT-TYPE\n\
    \                       SYNTAX  TimeTicks\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { system\
    \ 3 }\n               sysContact OBJECT-TYPE\n                       SYNTAX  DisplayString\
    \ (SIZE (0..255))\n                       ACCESS  read-write\n               \
    \        STATUS  mandatory\n                       ::= { system 4 }\n        \
    \       sysName OBJECT-TYPE\n                       SYNTAX  DisplayString (SIZE\
    \ (0..255))\n                       ACCESS  read-write\n                     \
    \  STATUS  mandatory\n                       ::= { system 5 }\n              \
    \ sysLocation OBJECT-TYPE\n                       SYNTAX  DisplayString (SIZE\
    \ (0..255))\n                       ACCESS  read-only\n                      \
    \ STATUS  mandatory\n                       ::= { system 6 }\n               sysServices\
    \ OBJECT-TYPE\n                       SYNTAX  INTEGER (0..127)\n             \
    \          ACCESS  read-only\n                       STATUS  mandatory\n     \
    \                  ::= { system 7 }\n               -- the Interfaces group\n\
    \               ifNumber OBJECT-TYPE\n                       SYNTAX  INTEGER\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { interfaces 1 }\n               -- the Interfaces\
    \ table\n               ifTable OBJECT-TYPE\n                       SYNTAX  SEQUENCE\
    \ OF IfEntry\n                       ACCESS  read-only\n                     \
    \  STATUS  mandatory\n                       ::= { interfaces 2 }\n          \
    \     ifEntry OBJECT-TYPE\n                       SYNTAX  IfEntry\n          \
    \             ACCESS  read-only\n                       STATUS  mandatory\n  \
    \                     ::= { ifTable 1 }\n               IfEntry ::= SEQUENCE {\n\
    \                   ifIndex\n                       INTEGER,\n               \
    \    ifDescr\n                       DisplayString,\n                   ifType\n\
    \                       INTEGER,\n                   ifMtu\n                 \
    \      INTEGER,\n                   ifSpeed\n                       Gauge,\n \
    \                  ifPhysAddress\n                       OCTET STRING,\n     \
    \              ifAdminStatus\n                       INTEGER,\n              \
    \     ifOperStatus\n                       INTEGER,\n                   ifLastChange\n\
    \                       TimeTicks,\n                   ifInOctets\n          \
    \             Counter,\n                   ifInUcastPkts\n                   \
    \    Counter,\n                   ifInNUcastPkts\n                       Counter,\n\
    \                   ifInDiscards\n                       Counter,\n          \
    \         ifInErrors\n                       Counter,\n                   ifInUnknownProtos\n\
    \                       Counter,\n                   ifOutOctets\n           \
    \            Counter,\n                   ifOutUcastPkts\n                   \
    \    Counter,\n                   ifOutNUcastPkts\n                       Counter,\n\
    \                   ifOutDiscards\n                       Counter,\n         \
    \          ifOutErrors\n                       Counter,\n                   ifOutQLen\n\
    \                       Gauge,\n                   ifSpecific\n              \
    \         OBJECT IDENTIFIER\n               }\n               ifIndex OBJECT-TYPE\n\
    \                       SYNTAX  INTEGER\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ifEntry\
    \ 1 }\n               ifDescr OBJECT-TYPE\n                       SYNTAX  DisplayString\
    \ (SIZE (0..255))\n                       ACCESS  read-only\n                \
    \       STATUS  mandatory\n                       ::= { ifEntry 2 }\n        \
    \       ifType OBJECT-TYPE\n                       SYNTAX  INTEGER {\n       \
    \                            other(1),             -- none of the\n          \
    \                                               -- following\n               \
    \                    regular1822(2),\n                                   hdh1822(3),\n\
    \                                   ddn-x25(4),\n                            \
    \       rfc877-x25(5),\n                                   ethernet-csmacd(6),\n\
    \                                   iso88023-csmacd(7),\n                    \
    \               iso88024-tokenBus(8),\n                                   iso88025-tokenRing(9),\n\
    \                                   iso88026-man(10),\n                      \
    \             starLan(11),\n                                   proteon-10Mbit(12),\n\
    \                                   proteon-80Mbit(13),\n                    \
    \               hyperchannel(14),\n                                   fddi(15),\n\
    \                                   lapb(16),\n                              \
    \     sdlc(17),\n                                   t1-carrier(18),\n        \
    \                           cept(19),        -- european\n                   \
    \                                 --equivalent of T-1\n                      \
    \             basicISDN(20),\n                                   primaryISDN(21),\n\
    \                                                         -- proprietary\n   \
    \                                                      -- serial\n           \
    \                        propPointToPointSerial(22),\n                       \
    \            terminalServer-asyncPort(23),\n                                 \
    \  softwareLoopback(24),\n                                   eon(25),        \
    \      -- CLNP over IP\n                                   ethernet-3Mbit(26),\n\
    \                                   nsip(27),             -- XNS over IP\n   \
    \                                slip(28)              -- generic SLIP\n     \
    \                      }\n                       ACCESS  read-only\n         \
    \              STATUS  mandatory\n                       ::= { ifEntry 3 }\n \
    \              ifMtu OBJECT-TYPE\n                       SYNTAX  INTEGER\n   \
    \                    ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ifEntry 4 }\n               ifSpeed OBJECT-TYPE\n\
    \                       SYNTAX  Gauge\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ifEntry\
    \ 5 }\n               ifPhysAddress OBJECT-TYPE\n                       SYNTAX\
    \  OCTET STRING\n                       ACCESS  read-only\n                  \
    \     STATUS  mandatory\n                       ::= { ifEntry 6 }\n          \
    \     ifAdminStatus OBJECT-TYPE\n                       SYNTAX  INTEGER {\n  \
    \                                 up(1),     -- ready to pass packets\n      \
    \                             down(2),\n                                   testing(3)\
    \ -- in some test mode\n                               }\n                   \
    \    ACCESS  read-write\n                       STATUS  mandatory\n          \
    \             ::= { ifEntry 7 }\n               ifOperStatus OBJECT-TYPE\n   \
    \                    SYNTAX  INTEGER {\n                                   up(1),\
    \     -- ready to pass packets\n                                   down(2),\n\
    \                                   testing(3) -- in some test mode\n        \
    \                       }\n                       ACCESS  read-only\n        \
    \               STATUS  mandatory\n                       ::= { ifEntry 8 }\n\
    \               ifLastChange OBJECT-TYPE\n                       SYNTAX  TimeTicks\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ifEntry 9 }\n               ifInOctets OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ifEntry\
    \ 10 }\n               ifInUcastPkts OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { ifEntry 11 }\n               ifInNUcastPkts\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { ifEntry 12 }\n               ifInDiscards OBJECT-TYPE\n      \
    \                 SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ifEntry\
    \ 13 }\n               ifInErrors OBJECT-TYPE\n                       SYNTAX \
    \ Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ifEntry 14 }\n               ifInUnknownProtos\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { ifEntry 15 }\n               ifOutOctets OBJECT-TYPE\n       \
    \                SYNTAX  Counter\n                       ACCESS  read-only\n \
    \                      STATUS  mandatory\n                       ::= { ifEntry\
    \ 16 }\n               ifOutUcastPkts OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ifEntry 17 }\n               ifOutNUcastPkts\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { ifEntry 18 }\n               ifOutDiscards OBJECT-TYPE\n     \
    \                  SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ifEntry\
    \ 19 }\n               ifOutErrors OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ifEntry 20 }\n               ifOutQLen\
    \ OBJECT-TYPE\n                       SYNTAX  Gauge\n                       ACCESS\
    \  read-only\n                       STATUS  mandatory\n                     \
    \  ::= { ifEntry 21 }\n               ifSpecific OBJECT-TYPE\n               \
    \        SYNTAX  OBJECT IDENTIFIER\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ifEntry\
    \ 22 }\n               nullSpecific OBJECT IDENTIFIER ::= { 0 0 }\n          \
    \     -- the Address Translation group (deprecated)\n               atTable OBJECT-TYPE\n\
    \                       SYNTAX  SEQUENCE OF AtEntry\n                       ACCESS\
    \  read-write\n                       STATUS  deprecated\n                   \
    \    ::= { at 1 }\n               atEntry OBJECT-TYPE\n                      \
    \ SYNTAX  AtEntry\n                       ACCESS  read-write\n               \
    \        STATUS  deprecated\n                       ::= { atTable 1 }\n      \
    \         AtEntry ::= SEQUENCE {\n                   atIfIndex\n             \
    \          INTEGER,\n                   atPhysAddress\n                      \
    \ OCTET STRING,\n                   atNetAddress\n                       NetworkAddress\n\
    \               }\n               atIfIndex OBJECT-TYPE\n                    \
    \   SYNTAX  INTEGER\n                       ACCESS  read-write\n             \
    \          STATUS  deprecated\n                       ::= { atEntry 1 }\n    \
    \           atPhysAddress OBJECT-TYPE\n                       SYNTAX  OCTET STRING\n\
    \                       ACCESS  read-write\n                       STATUS  deprecated\n\
    \                       ::= { atEntry 2 }\n               atNetAddress OBJECT-TYPE\n\
    \                       SYNTAX  NetworkAddress\n                       ACCESS\
    \  read-write\n                       STATUS  deprecated\n                   \
    \    ::= { atEntry 3 }\n               -- the IP group\n               ipForwarding\
    \ OBJECT-TYPE\n                       SYNTAX  INTEGER {\n                    \
    \               gateway(1), -- entity forwards\n                             \
    \                  -- datagrams\n                                   host(2)  \
    \   -- entity does NOT\n                                               -- forward\
    \ datagrams\n                               }\n                       ACCESS \
    \ read-write\n                       STATUS  mandatory\n                     \
    \  ::= { ip 1 }\n               ipDefaultTTL OBJECT-TYPE\n                   \
    \    SYNTAX  INTEGER\n                       ACCESS  read-write\n            \
    \           STATUS  mandatory\n                       ::= { ip 2 }\n         \
    \      ipInReceives OBJECT-TYPE\n                       SYNTAX  Counter\n    \
    \                   ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ip 3 }\n               ipInHdrErrors OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ip 4 }\n\
    \               ipInAddrErrors OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ip 5 }\n               ipForwDatagrams OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ip 6 }\n\
    \               ipInUnknownProtos OBJECT-TYPE\n                       SYNTAX \
    \ Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ip 7 }\n               ipInDiscards\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { ip 8 }\n               ipInDelivers OBJECT-TYPE\n            \
    \           SYNTAX  Counter\n                       ACCESS  read-only\n      \
    \                 STATUS  mandatory\n                       ::= { ip 9 }\n   \
    \            ipOutRequests OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ip 10 }\n               ipOutDiscards OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ip 11\
    \ }\n               ipOutNoRoutes OBJECT-TYPE\n                       SYNTAX \
    \ Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ip 12 }\n               ipReasmTimeout\
    \ OBJECT-TYPE\n                       SYNTAX  INTEGER\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { ip 13 }\n               ipReasmReqds OBJECT-TYPE\n           \
    \            SYNTAX  Counter\n                       ACCESS  read-only\n     \
    \                  STATUS  mandatory\n                       ::= { ip 14 }\n \
    \              ipReasmOKs OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ip 15 }\n               ipReasmFails OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ip 16\
    \ }\n               ipFragOKs OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ip 17 }\n               ipFragFails OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { ip 18\
    \ }\n               ipFragCreates OBJECT-TYPE\n                       SYNTAX \
    \ Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ip 19 }\n               -- the IP Interface\
    \ table\n               ipAddrTable OBJECT-TYPE\n                       SYNTAX\
    \  SEQUENCE OF IpAddrEntry\n                       ACCESS  read-only\n       \
    \                STATUS  mandatory\n                       ::= { ip 20 }\n   \
    \            ipAddrEntry OBJECT-TYPE\n                       SYNTAX  IpAddrEntry\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ipAddrTable 1 }\n               IpAddrEntry ::=\
    \ SEQUENCE {\n                   ipAdEntAddr\n                       IpAddress,\n\
    \                   ipAdEntIfIndex\n                       INTEGER,\n        \
    \           ipAdEntNetMask\n                       IpAddress,\n              \
    \     ipAdEntBcastAddr\n                       INTEGER,\n                   ipAdEntReasmMaxSize\n\
    \                       INTEGER (0..65535)\n               }\n               ipAdEntAddr\
    \ OBJECT-TYPE\n                       SYNTAX  IpAddress\n                    \
    \   ACCESS  read-only\n                       STATUS  mandatory\n            \
    \           ::=  { ipAddrEntry 1 }\n               ipAdEntIfIndex OBJECT-TYPE\n\
    \                       SYNTAX  INTEGER\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { ipAddrEntry\
    \ 2 }\n               ipAdEntNetMask OBJECT-TYPE\n                       SYNTAX\
    \  IpAddress\n                       ACCESS  read-only\n                     \
    \  STATUS  mandatory\n                       ::=  { ipAddrEntry 3 }\n        \
    \       ipAdEntBcastAddr OBJECT-TYPE\n                       SYNTAX  INTEGER\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { ipAddrEntry 4 }\n               ipAdEntReasmMaxSiz\
    \ OBJECT-TYPE\n                       SYNTAX  INTEGER (0..65535)\n           \
    \            ACCESS  read-only\n                       STATUS  mandatory\n   \
    \                    ::= { ipAddrEntry 5 }\n               -- the IP Routing table\n\
    \               ipRoutingTable OBJECT-TYPE\n                       SYNTAX  SEQUENCE\
    \ OF IpRouteEntry\n                       ACCESS  read-write\n               \
    \        STATUS  mandatory\n                       ::= { ip 21 }\n           \
    \    ipRouteEntry OBJECT-TYPE\n                       SYNTAX  IpRouteEntry\n \
    \                      ACCESS  read-write\n                       STATUS  mandatory\n\
    \                       ::= { ipRoutingTable 1 }\n               IpRouteEntry\
    \ ::= SEQUENCE {\n                   ipRouteDest\n                       IpAddress,\n\
    \                   ipRouteIfIndex\n                       INTEGER,\n        \
    \           ipRouteMetric1\n                       INTEGER,\n                \
    \   ipRouteMetric2\n                       INTEGER,\n                   ipRouteMetric3\n\
    \                       INTEGER,\n                   ipRouteMetric4\n        \
    \               INTEGER,\n                   ipRouteNextHop\n                \
    \       IpAddress,\n                   ipRouteType\n                       INTEGER,\n\
    \                   ipRouteProto\n                       INTEGER,\n          \
    \         ipRouteAge\n                       INTEGER,\n                   ipRouteMask\n\
    \                       IpAddress\n               }\n               ipRouteDest\
    \ OBJECT-TYPE\n                       SYNTAX  IpAddress\n                    \
    \   ACCESS  read-write\n                       STATUS  mandatory\n           \
    \            ::= { ipRouteEntry 1 }\n               ipRouteIfIndex  OBJECT-TYPE\n\
    \                       SYNTAX  INTEGER\n                       ACCESS  read-write\n\
    \                       STATUS  mandatory\n                       ::= { ipRouteEntry\
    \ 2 }\n               ipRouteMetric1 OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER\n                       ACCESS  read-write\n                      \
    \ STATUS  mandatory\n                       ::= { ipRouteEntry 3 }\n         \
    \      ipRouteMetric2 OBJECT-TYPE\n                       SYNTAX  INTEGER\n  \
    \                     ACCESS  read-write\n                       STATUS  mandatory\n\
    \                       ::= { ipRouteEntry 4 }\n               ipRouteMetric3\
    \ OBJECT-TYPE\n                       SYNTAX  INTEGER\n                      \
    \ ACCESS  read-write\n                       STATUS  mandatory\n             \
    \          ::= { ipRouteEntry 5 }\n               ipRouteMetric4 OBJECT-TYPE\n\
    \                       SYNTAX  INTEGER\n                       ACCESS  read-write\n\
    \                       STATUS  mandatory\n                       ::= { ipRouteEntry\
    \ 6 }\n               ipRouteNextHop OBJECT-TYPE\n                       SYNTAX\
    \  IpAddress\n                       ACCESS  read-write\n                    \
    \   STATUS  mandatory\n                       ::= { ipRouteEntry 7 }\n       \
    \        ipRouteType OBJECT-TYPE\n                       SYNTAX  INTEGER {\n \
    \                                  other(1),    -- none of the following\n   \
    \                                invalid(2),  -- an invalidated route\n      \
    \                                          -- route to directly\n            \
    \                       direct(3),   -- connected\n                          \
    \                      -- (sub-)network\n                                    \
    \            -- route to a non-local\n                                   remote(4)\
    \    -- host/network/\n                                                -- sub-network\n\
    \                           }\n                       ACCESS  read-write\n   \
    \                    STATUS  mandatory\n                       ::= { ipRouteEntry\
    \ 8 }\n               ipRouteProto OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER {\n                                   other(1),    -- none of the following\n\
    \                                                -- non-protocol\n           \
    \                                     -- information\n                       \
    \                         --   e.g., manually\n                              \
    \     local(2),    --   configured entries\n                                 \
    \               -- set via a network\n                                   netmgmt(3),\
    \  --   management protocol\n                                                --\
    \ obtained via ICMP,\n                                   icmp(4),     --   e.g.,\
    \ Redirect\n                                                -- the following are\n\
    \                                                -- gateway routing\n        \
    \                                        -- protocols\n                      \
    \             egp(5),\n                                   ggp(6),\n          \
    \                         hello(7),\n                                   rip(8),\n\
    \                                   is-is(9),\n                              \
    \     es-is(10),\n                                   ciscoIgrp(11),\n        \
    \                           bbnSpfIgp(12),\n                                 \
    \  ospf(13)\n                                   bgp(14)\n                    \
    \       }\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { ipRouteEntry 9 }\n               ipRouteAge\
    \ OBJECT-TYPE\n                       SYNTAX  INTEGER\n                      \
    \ ACCESS  read-write\n                       STATUS  mandatory\n             \
    \          ::= { ipRouteEntry 10 }\n               ipRouteMask OBJECT-TYPE\n \
    \                      SYNTAX  IpAddress\n                       ACCESS  read-write\n\
    \                       STATUS  mandatory\n                       ::= { ipRouteEntry\
    \ 11 }\n               -- the IP Address Translation tables\n               ipNetToMediaTable\
    \ OBJECT-TYPE\n                       SYNTAX  SEQUENCE OF IpNetToMediaEntry\n\
    \                       ACCESS  read-write\n                       STATUS  mandatory\n\
    \                       ::= { ip 22 }\n               ipNetToMediaEntry OBJECT-TYPE\n\
    \                       SYNTAX  IpNetToMediaEntry\n                       ACCESS\
    \  read-write\n                       STATUS  mandatory\n                    \
    \   ::= { ipNetToMediaTable 1 }\n               IpNetToMediaEntry ::= SEQUENCE\
    \ {\n                   ipNetToMediaIfIndex\n                       INTEGER,\n\
    \                   ipNetToMediaPhysAddress\n                       OCTET STRING,\n\
    \                   ipNetToMediaNetAddress\n                       IpAddress,\n\
    \                   ipNetoToMediaType\n                       INTEGER\n      \
    \         }\n               ipNetToMediaIfIndex OBJECT-TYPE\n                \
    \       SYNTAX  INTEGER\n                       ACCESS  read-write\n         \
    \              STATUS  mandatory\n                       ::= { ipNetToMediaEntry\
    \ 1 }\n               ipNetToMediaPhysAddress OBJECT-TYPE\n                  \
    \     SYNTAX  OCTET STRING\n                       ACCESS  read-write\n      \
    \                 STATUS  mandatory\n                       ::= { ipNetToMediaEntry\
    \ 2 }\n               ipNetToMediaNetAddress OBJECT-TYPE\n                   \
    \    SYNTAX  IpAddress\n                       ACCESS  read-write\n          \
    \             STATUS  mandatory\n                       ::= { ipNetToMediaEntry\
    \ 3 }\n               ipNetToMediaType OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER {\n                                   other(1),   -- none of the following\n\
    \                                   invalid(2), -- an invalidated mapping\n  \
    \                                 dynamic(3), -- connected (sub-)network\n   \
    \                                static(4)\n                           }\n   \
    \                    ACCESS  read-write\n                       STATUS  mandatory\n\
    \                       ::= { ipNetToMediaEntry 4 }\n               -- the ICMP\
    \ group\n               icmpInMsgs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 1 }\n               icmpInErrors\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 2 }\n               icmpInDestUnreachs OBJECT-TYPE\n    \
    \                   SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 3\
    \ }\n               icmpInTimeExcds OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 4 }\n               icmpInParmProbs\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 5 }\n               icmpInSrcQuenchs OBJECT-TYPE\n      \
    \                 SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 6\
    \ }\n               icmpInRedirects OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 7 }\n               icmpInEchos\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 8 }\n               icmpInEchoReps OBJECT-TYPE\n        \
    \               SYNTAX  Counter\n                       ACCESS  read-only\n  \
    \                     STATUS  mandatory\n                       ::= { icmp 9 }\n\
    \               icmpInTimestamps OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { icmp 10 }\n               icmpInTimestampReps OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 11\
    \ }\n               icmpInAddrMasks OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 12 }\n               icmpInAddrMaskReps\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 13 }\n               icmpOutMsgs OBJECT-TYPE\n          \
    \             SYNTAX  Counter\n                       ACCESS  read-only\n    \
    \                   STATUS  mandatory\n                       ::= { icmp 14 }\n\
    \               icmpOutErrors OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { icmp 15 }\n               icmpOutDestUnreachs OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 16\
    \ }\n               icmpOutTimeExcds OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 17 }\n               icmpOutParmProbs\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 18 }\n               icmpOutSrcQuenchs OBJECT-TYPE\n    \
    \                   SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 19\
    \ }\n               icmpOutRedirects OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 20 }\n               icmpOutEchos\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 21 }\n               icmpOutEchoReps OBJECT-TYPE\n      \
    \                 SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 22\
    \ }\n               icmpOutTimestamps OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 23 }\n               icmpOutTimestampReps\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { icmp 24 }\n               icmpOutAddrMasks OBJECT-TYPE\n     \
    \                  SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { icmp 25\
    \ }\n               icmpOutAddrMaskReps OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { icmp 26 }\n               -- the TCP\
    \ group\n               tcpRtoAlgorithm OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER {\n                                   other(1),    -- none of the following\n\
    \                                   constant(2), -- a constant rto\n         \
    \                          rsre(3),     -- MIL-STD-1778,\n                   \
    \                             -- Appendix B\n                                \
    \   vanj(4)      -- Van Jacobson's\n                                         \
    \       -- algorithm\n                               }\n                     \
    \  ACCESS  read-only\n                       STATUS  mandatory\n             \
    \          ::= { tcp 1 }\n               tcpRtoMin OBJECT-TYPE\n             \
    \          SYNTAX  INTEGER\n                       ACCESS  read-only\n       \
    \                STATUS  mandatory\n                       ::= { tcp 2 }\n   \
    \            tcpRtoMax OBJECT-TYPE\n                       SYNTAX  INTEGER\n \
    \                      ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { tcp 3 }\n               tcpMaxConn OBJECT-TYPE\n\
    \                       SYNTAX  INTEGER\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { tcp 4\
    \ }\n               tcpActiveOpens OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { tcp 5 }\n               tcpPassiveOpens\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { tcp 6 }\n               tcpAttemptFails OBJECT-TYPE\n        \
    \               SYNTAX  Counter\n                       ACCESS  read-only\n  \
    \                     STATUS  mandatory\n                       ::= { tcp 7 }\n\
    \               tcpEstabResets OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { tcp 8 }\n               tcpCurrEstab OBJECT-TYPE\n\
    \                       SYNTAX  Gauge\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { tcp 9\
    \ }\n               tcpInSegs OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { tcp 10 }\n               tcpOutSegs OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { tcp 11\
    \ }\n               tcpRetransSegs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { tcp 12 }\n               -- the TCP\
    \ connections table\n               tcpConnTable OBJECT-TYPE\n               \
    \        SYNTAX  SEQUENCE OF TcpConnEntry\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { tcp 13\
    \ }\n               tcpConnEntry OBJECT-TYPE\n                       SYNTAX  TcpConnEntry\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { tcpConnTable 1 }\n               TcpConnEntry ::=\
    \ SEQUENCE {\n                   tcpConnState\n                       INTEGER,\n\
    \                   tcpConnLocalAddress\n                       IpAddress,\n \
    \                  tcpConnLocalPort\n                       INTEGER (0..65535),\n\
    \                   tcpConnRemAddress\n                       IpAddress,\n   \
    \                tcpConnRemPort\n                       INTEGER (0..65535)\n \
    \              }\n               tcpConnState OBJECT-TYPE\n                  \
    \     SYNTAX  INTEGER {\n                                   closed(1),\n     \
    \                              listen(2),\n                                  \
    \ synSent(3),\n                                   synReceived(4),\n          \
    \                         established(5),\n                                  \
    \ finWait1(6),\n                                   finWait2(7),\n            \
    \                       closeWait(8),\n                                   lastAck(9),\n\
    \                                   closing(10),\n                           \
    \        timeWait(11)\n                               }\n                    \
    \   ACCESS  read-only\n                       STATUS  mandatory\n            \
    \           ::= { tcpConnEntry 1 }\n               tcpConnLocalAddress OBJECT-TYPE\n\
    \                       SYNTAX  IpAddress\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { tcpConnEntry\
    \ 2 }\n               tcpConnLocalPort OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER (0..65535)\n                       ACCESS  read-only\n            \
    \           STATUS  mandatory\n                       ::= { tcpConnEntry 3 }\n\
    \               tcpConnRemAddress OBJECT-TYPE\n                       SYNTAX \
    \ IpAddress\n                       ACCESS  read-only\n                      \
    \ STATUS  mandatory\n                       ::= { tcpConnEntry 4 }\n         \
    \      tcpConnRemPort OBJECT-TYPE\n                       SYNTAX  INTEGER (0..65535)\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { tcpConnEntry 5 }\n               -- additional TCP\
    \ variables\n               tcpInErrs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { tcp 14 }\n               tcpOutRsts\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { tcp 15 }\n               -- the UDP group\n               udpInDatagrams\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { udp 1 }\n               udpNoPorts OBJECT-TYPE\n             \
    \          SYNTAX  Counter\n                       ACCESS  read-only\n       \
    \                STATUS  mandatory\n                       ::= { udp 2 }\n   \
    \            udpInErrors OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { udp 3 }\n               udpOutDatagrams OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { udp 4\
    \ }\n               -- the UDP listener table\n               udpTable OBJECT-TYPE\n\
    \                       SYNTAX  SEQUENCE OF UdpEntry\n                       ACCESS\
    \  read-only\n                       STATUS  mandatory\n                     \
    \  ::= { udp 5 }\n               udpEntry OBJECT-TYPE\n                      \
    \ SYNTAX  UdpEntry\n                       ACCESS  read-only\n               \
    \        STATUS  mandatory\n                       ::= { udpTable 1 }\n      \
    \         UdpEntry ::= SEQUENCE {\n                   udpLocalAddress\n      \
    \                 IpAddress,\n                   udpLocalPort\n              \
    \         INTEGER (0..65535)\n               }\n               udpLocalAddress\
    \ OBJECT-TYPE\n                       SYNTAX  IpAddress\n                    \
    \   ACCESS  read-only\n                       STATUS  mandatory\n            \
    \           ::= { udpEntry 1 }\n               udpLocalPort OBJECT-TYPE\n    \
    \                   SYNTAX  INTEGER (0..65535)\n                       ACCESS\
    \  read-only\n                       STATUS  mandatory\n                     \
    \  ::= { udpEntry 2 }\n               -- the EGP group\n               egpInMsgs\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { egp 1 }\n               egpInErrors OBJECT-TYPE\n            \
    \           SYNTAX  Counter\n                       ACCESS  read-only\n      \
    \                 STATUS  mandatory\n                       ::= { egp 2 }\n  \
    \             egpOutMsgs OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { egp 3 }\n               egpOutErrors OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egp 4\
    \ }\n               -- the EGP Neighbor table\n               egpNeighTable OBJECT-TYPE\n\
    \                       SYNTAX  SEQUENCE OF EgpNeighEntry\n                  \
    \     ACCESS  read-only\n                       STATUS  mandatory\n          \
    \             ::= { egp 5 }\n               egpNeighEntry OBJECT-TYPE\n      \
    \                 SYNTAX  EgpNeighEntry\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egpNeighTable\
    \ 1 }\n               EgpNeighEntry ::= SEQUENCE {\n                   egpNeighState\n\
    \                       INTEGER,\n                   egpNeighAddr\n          \
    \             IpAddress,\n                   egpNeighAs\n                    \
    \   INTEGER,\n                   egpNeighInMsgs\n                       Counter,\n\
    \                   egpNeighInErrs\n                       Counter,\n        \
    \           egpNeighOutMsgs\n                       Counter,\n               \
    \    egpNeighOutErrs\n                       Counter,\n                   egpNeighInErrMsgs\n\
    \                       Counter,\n                   egpNeighOutErrMsgs\n    \
    \                   Counter,\n                   egpNeighStateUps\n          \
    \             Counter,\n                   egpNeighStateDowns\n              \
    \         Counter,\n                   egpNeighIntervalHello\n               \
    \        INTEGER,\n                   egpNeighIntervalPoll\n                 \
    \      INTEGER,\n                   egpNeighMode\n                       INTEGER,\n\
    \                   egpNeighEventTrigger\n                       INTEGER\n   \
    \            }\n               egpNeighState OBJECT-TYPE\n                   \
    \    SYNTAX  INTEGER {\n                                   idle(1),\n        \
    \                           acquisition(2),\n                                \
    \   down(3),\n                                   up(4),\n                    \
    \               cease(5)\n                               }\n                 \
    \      ACCESS  read-only\n                       STATUS  mandatory\n         \
    \              ::= { egpNeighEntry 1 }\n               egpNeighAddr OBJECT-TYPE\n\
    \                       SYNTAX  IpAddress\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egpNeighEntry\
    \ 2 }\n               egpNeighAs OBJECT-TYPE\n                       SYNTAX  INTEGER\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::= { egpNeighEntry 3 }\n               egpNeighInMsgs\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { egpNeighEntry 4 }\n               egpNeighInErrs OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egpNeighEntry\
    \ 5 }\n               egpNeighOutMsgs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { egpNeighEntry 6 }\n               egpNeighOutErrs\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { egpNeighEntry 7 }\n               egpNeighInErrMsgs OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egpNeighEntry\
    \ 8 }\n               egpNeighOutErrMsgs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { egpNeighEntry 9 }\n               egpNeighStateUps\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::= { egpNeighEntry 10 }\n               egpNeighStateDowns OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egpNeighEntry\
    \ 11 }\n               egpNeighIntervalHello OBJECT-TYPE\n                   \
    \    SYNTAX  INTEGER\n                       ACCESS  read-only\n             \
    \          STATUS  mandatory\n                       ::= { egpNeighEntry 12 }\n\
    \               egpNeighIntervalPoll OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { egpNeighEntry 13 }\n              \
    \ egpNeighMode OBJECT-TYPE\n                       SYNTAX  INTEGER {\n       \
    \                            active(1),\n                                   passive(2)\n\
    \                               }\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::= { egpNeighEntry\
    \ 14 }\n               egpNeighEventTrigger OBJECT-TYPE\n                    \
    \   SYNTAX  INTEGER {\n                                   start(1),\n        \
    \                           stop(2)\n                               }\n      \
    \                 ACCESS  read-write\n                       STATUS  mandatory\n\
    \                       ::= { egpNeighEntry 15 }\n               -- additional\
    \ EGP variables\n               egpAs OBJECT-TYPE\n                       SYNTAX\
    \  INTEGER\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::= { egp 6 }\n               -- the Transmission\
    \ group (empty at present)\n               -- the SNMP group\n               snmpInPkts\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 1 }\n               snmpOutPkts OBJECT-TYPE\n          \
    \             SYNTAX  Counter\n                       ACCESS  read-only\n    \
    \                   STATUS  mandatory\n                       ::=  { snmp 2 }\n\
    \               snmpInBadVersions OBJECT-TYPE\n                       SYNTAX \
    \ Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { snmp 3 }\n               snmpInBadCommunityNames\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 4 }\n               snmpInBadCommunityUses OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 5 }\n               snmpInASNParseErrs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { snmp 6 }\n               snmpInBadTypes\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 7 }\n               snmpInTooBigs OBJECT-TYPE\n        \
    \               SYNTAX  Counter\n                       ACCESS  read-only\n  \
    \                     STATUS  mandatory\n                       ::=  { snmp 8\
    \ }\n               snmpInNoSuchNames OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { snmp 9 }\n               snmpInBadValues\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 10 }\n               snmpInReadOnlys OBJECT-TYPE\n     \
    \                  SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 11 }\n               snmpInGenErrs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { snmp 12 }\n               snmpInTotalReqVars\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 13 }\n               snmpInTotalSetVars OBJECT-TYPE\n  \
    \                     SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 14 }\n               snmpInGetRequests OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { snmp 15 }\n               snmpInGetNexts\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 16 }\n               snmpInSetRequests OBJECT-TYPE\n   \
    \                    SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 17 }\n               snmpInGetResponses OBJECT-TYPE\n                      \
    \ SYNTAX  Counter\n                       ACCESS  read-only\n                \
    \       STATUS  mandatory\n                       ::=  { snmp 18 }\n         \
    \      snmpInTraps OBJECT-TYPE\n                       SYNTAX  Counter\n     \
    \                  ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::=  { snmp 19 }\n               snmpOutTooBigs OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 20 }\n               snmpOutNoSuchNames OBJECT-TYPE\n                      \
    \ SYNTAX  Counter\n                       ACCESS  read-only\n                \
    \       STATUS  mandatory\n                       ::=  { snmp 21 }\n         \
    \      snmpOutBadValues OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::=  { snmp 22 }\n               snmpOutReadOnlys OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 23 }\n               snmpOutGenErrs OBJECT-TYPE\n                       SYNTAX\
    \  Counter\n                       ACCESS  read-only\n                       STATUS\
    \  mandatory\n                       ::=  { snmp 24 }\n               snmpOutGetRequests\
    \ OBJECT-TYPE\n                       SYNTAX  Counter\n                      \
    \ ACCESS  read-only\n                       STATUS  mandatory\n              \
    \         ::=  { snmp 25 }\n               snmpOutGetNexts OBJECT-TYPE\n     \
    \                  SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 26 }\n               snmpOutSetRequests OBJECT-TYPE\n                      \
    \ SYNTAX  Counter\n                       ACCESS  read-only\n                \
    \       STATUS  mandatory\n                       ::=  { snmp 27 }\n         \
    \      snmpOutGetResponses OBJECT-TYPE\n                       SYNTAX  Counter\n\
    \                       ACCESS  read-only\n                       STATUS  mandatory\n\
    \                       ::=  { snmp 28 }\n               snmpOutTraps OBJECT-TYPE\n\
    \                       SYNTAX  Counter\n                       ACCESS  read-only\n\
    \                       STATUS  mandatory\n                       ::=  { snmp\
    \ 29 }\n               snmpEnableAuthTraps OBJECT-TYPE\n                     \
    \  SYNTAX  INTEGER {\n                                   enabled(1),\n       \
    \                            disabled(2)\n                               }\n \
    \                      ACCESS  read-write\n                       STATUS  mandatory\n\
    \                       ::=  { snmp 30 }\n               END\n"
- title: 7.  Identification of OBJECT instances for use with the SNMP
  contents:
  - "7.  Identification of OBJECT instances for use with the SNMP\n   The names for\
    \ all object types in the MIB are defined explicitly\n   either in the Internet-standard\
    \ MIB or in other documents which\n   conform to the naming conventions of the\
    \ SMI.  The SMI requires that\n   conformant management protocols define mechanisms\
    \ for identifying\n   individual instances of those object types for a particular\
    \ network\n   element.\n   Each instance of any object type defined in the MIB\
    \ is identified in\n   SNMP operations by a unique name called its \"variable\
    \ name.\" In\n   general, the name of an SNMP variable is an OBJECT IDENTIFIER\
    \ of the\n   form x.y, where x is the name of a non-aggregate object type defined\n\
    \   in the MIB and y is an OBJECT IDENTIFIER fragment that, in a way\n   specific\
    \ to the named object type, identifies the desired instance.\n   This naming strategy\
    \ admits the fullest exploitation of the semantics\n   of the powerful SNMP get-next\
    \ operator, because it assigns names for\n   related variables so as to be contiguous\
    \ in the lexicographical\n   ordering of all variable names known in the MIB.\n\
    \   The type-specific naming of object instances is defined below for a\n   number\
    \ of classes of object types.  Instances of an object type to\n   which none of\
    \ the following naming conventions are applicable are\n   named by OBJECT IDENTIFIERs\
    \ of the form x.0, where x is the name of\n   said object type in the MIB definition.\n\
    \   For example, suppose one wanted to identify an instance of the\n   variable\
    \ sysDescr.  The object class for sysDescr is:\n             iso org dod internet\
    \ mgmt mib system sysDescr\n              1   3   6     1      2    1    1   \
    \    1\n   Hence, the object type, x, would be 1.3.6.1.2.1.1.1 to which is\n \
    \  appended an instance sub-identifier of 0.  That is, 1.3.6.1.2.1.1.1.0\n   identifies\
    \ the one and only instance of sysDescr.\n"
- title: 7.1.  ifTable Object Type Names
  contents:
  - "7.1.  ifTable Object Type Names\n   The name of a subnetwork interface, s, is\
    \ the OBJECT IDENTIFIER value\n   of the form i, where i has the value of that\
    \ instance of the ifIndex\n   object type associated with s.  For each object\
    \ type, t, for which\n   the defined name, n, has a prefix of ifEntry, an instance,\
    \ i, of t is\n   named by an OBJECT IDENTIFIER of the form n.s, where s is the\
    \ name of\n   the subnetwork interface about which i represents information.\n\
    \   For example, suppose one wanted to identify the instance of the\n   variable\
    \ ifType associated with interface 2. Accordingly, ifType.2\n   would identify\
    \ the desired instance.\n"
- title: 7.2.  atTable Object Type Names
  contents:
  - "7.2.  atTable Object Type Names\n   The name of an address translation entry,\
    \ x, is an OBJECT IDENTIFIER\n   of the form s.1.a.b.c.d, such that s is the value\
    \ of that instance of\n   the atIfIndex object type associated with x, the subidentifer\
    \ \"1\"\n   signifies the translation of an IP protocol address, and a.b.c.d is\n\
    \   the IP address value (in the familiar \"dot\" notation) of that\n   instance\
    \ of the atNetAddress object type associated with x.\n   For each object type,\
    \ t, for which the defined name, n, has a prefix\n   of atEntry, an instance,\
    \ i, of t is named by an OBJECT IDENTIFIER of\n   the form n.y, where y is the\
    \ name of the address translation entry\n   about which i represents information.\n\
    \   For example, suppose one wanted to find the physical address of an\n   entry\
    \ in the address translation table (ARP cache) associated with an\n   IP address\
    \ of 89.1.1.42 and interface 3.  Accordingly,\n   atPhysAddress.3.1.89.1.1.42\
    \ would identify the desired instance.\n"
- title: 7.3.  ipAddrTable Object Type Names
  contents:
  - "7.3.  ipAddrTable Object Type Names\n   The name of an IP-addressable network\
    \ element, x, is the OBJECT\n   IDENTIFIER of the form a.b.c.d such that a.b.c.d\
    \ is the value (in the\n   familiar \"dot\" notation) of that instance of the\
    \ ipAdEntAddr object\n   type associated with x.\n   For each object type, t,\
    \ for which the defined name, n, has a prefix\n   of ipAddrEntry, an instance,\
    \ i, of t is named by an OBJECT IDENTIFIER\n   of the form n.y, where y is the\
    \ name of the IP- addressable network\n   element about which i represents information.\n\
    \   For example, suppose one wanted to find the network mask of an entry\n   in\
    \ the IP interface table associated with an IP address of 89.1.1.42.\n   Accordingly,\
    \ ipAdEntNetMask.89.1.1.42 would identify the desired\n   instance.\n   At the\
    \ option of the agent, multiple entries for the same IP address\n   may be visible.\
    \  To realize this, the agent, while required to return\n   a single entry for\
    \ an IP address, x, of the form n.y, may also return\n   information about other\
    \ entries for the same IP address using the\n   form n.y.z, where z is a implementation-dependendent\
    \ small, non-\n   negative integer.  It is strongly recommended that the value\
    \ of z\n   correspond to the value of ipAddrIfIndex for that entry.\n"
- title: 7.4.  ipRoutingTable Object Type Names
  contents:
  - "7.4.  ipRoutingTable Object Type Names\n   The name of an IP route, x, is the\
    \ OBJECT IDENTIFIER of the form\n   a.b.c.d such that a.b.c.d is the value (in\
    \ the familiar \"dot\"\n   notation) of that instance of the ipRouteDest object\
    \ type associated\n   with x.\n   For each object type, t, for which the defined\
    \ name, n, has a prefix\n   of ipRoutingEntry, an instance, i, of t is named by\
    \ an OBJECT\n   IDENTIFIER of the form n.y, where y is the name of the IP route\
    \ about\n   which i represents information.\n   For example, suppose one wanted\
    \ to find the next hop of an entry in\n   the IP routing table associated  with\
    \ the destination of 89.1.1.42.\n   Accordingly, ipRouteNextHop.89.1.1.42 would\
    \ identify the desired\n   instance.\n   At the option of the agent, multiple\
    \ routes to the same destination\n   may be visible.  To realize this, the agent,\
    \ while required to return\n   a single entry for an IP route, x, of the form\
    \ n.y, may also return\n   information about other routes to the same destination\
    \ using the form\n   n.y.z, where z is a implementation-dependendent small, non-negative\n\
    \   integer.\n"
- title: 7.5.  ipNetToMediaTable Object Type Names
  contents:
  - "7.5.  ipNetToMediaTable Object Type Names\n   The name of a cached IP address,\
    \ x, is an OBJECT IDENTIFIER of the\n   form s.a.b.c.d, such that s is the value\
    \ of that instance of the\n   ipNetToMediaIfIndex object type associated with\
    \ the entry and a.b.c.d\n   is the value (in the familiar \"dot\" notation) of\
    \ the\n   ipNetToMediaNetAddress object type associated with x.\n   For each object\
    \ type, t, for which the defined name, n, has a prefix\n   of ipNetToMediaEntry,\
    \ an instance, i, of t is named by an OBJECT\n   IDENTIFIER of the form n.y, where\
    \ y is the name of the cached IP\n   address about which i represents information.\n\
    \   For example, suppose one wanted to find the media address of an entry\n  \
    \ in the address translation table associated with a IP address of\n   192.52.180.1\
    \ and interface 3.  Accordingly,\n   ipNetToMediaPhysAddress.3.192.52.180.1 would\
    \ identify the desired\n   instance.\n"
- title: 7.6.  tcpConnTable Object Type Names
  contents:
  - "7.6.  tcpConnTable Object Type Names\n   The name of a TCP connection, x, is\
    \ the OBJECT IDENTIFIER of the form\n   a.b.c.d.e.f.g.h.i.j such that a.b.c.d\
    \ is the value (in the familiar\n   \"dot\" notation) of that instance of the\
    \ tcpConnLocalAddress object\n   type associated with x and such that f.g.h.i\
    \ is the value (in the\n   familiar \"dot\" notation) of that instance of the\
    \ tcpConnRemoteAddress\n   object type associated with x and such that e is the\
    \ value of that\n   instance of the tcpConnLocalPort object type associated with\
    \ x and\n   such that j is the value of that instance of the tcpConnRemotePort\n\
    \   object type associated with x.\n   For each object type, t, for which the\
    \ defined name, n, has a prefix\n   of  tcpConnEntry, an instance, i, of t is\
    \ named by an OBJECT\n   IDENTIFIER of the form n.y, where y is the name of the\
    \ TCP connection\n   about which i represents information.\n   For example, suppose\
    \ one wanted to find the state of a TCP connection\n   between the local address\
    \ of 89.1.1.42 on TCP port 21 and the remote\n   address of 10.0.0.51 on TCP port\
    \ 2059.  Accordingly,\n   tcpConnState.89.1.1.42.21.10.0.0.51.2059 would identify\
    \ the desired\n   instance.\n"
- title: 7.7.  udpTable Object Type Names
  contents:
  - "7.7.  udpTable Object Type Names\n   The name of a UDP listener, x, is the OBJECT\
    \ IDENTIFIER of the form\n   a.b.c.d.e. such that a.b.c.d is the value (in the\
    \ familiar \"dot\"\n   notation) of that instance of the udpLocalAddress object\
    \ type\n   associated with x and such that e is the value of that instance of\n\
    \   the udpLocalPort object type associated with x.\n   For each object type,\
    \ t, for which the defined name, n, has a prefix\n   of udpEntry, an instance,\
    \ i, of t is named by an OBJECT IDENTIFIER of\n   the form n.y, where y is the\
    \ name of the UDP listener about which i\n   represents information.\n   For example,\
    \ suppose one wanted to determine if a UDP listener was\n   present at the local\
    \ address of 89.1.1.42 on UDP port 21.\n   Accordingly, a successful retrieval\
    \ of either\n   udpLocalAddress.89.1.1.42.21 or udpLocalPort.89.1.1.42.21 would\n\
    \   indicate this.\n"
- title: 7.8.  egpNeighTable Object Type Names
  contents:
  - "7.8.  egpNeighTable Object Type Names\n   The name of an EGP neighbor, x, is\
    \ the OBJECT IDENTIFIER of the form\n   a.b.c.d such that a.b.c.d is the value\
    \ (in the familiar \"dot\"\n   notation) of that instance of the egpNeighAddr\
    \ object type associated\n   with x.\n   For each object type, t, for which the\
    \ defined name, n, has a prefix\n   of egpNeighEntry, an instance, i, of t is\
    \ named by an OBJECT\n   IDENTIFIER of the form n.y, where y is the name of the\
    \ EGP neighbor\n   about which i represents information.\n   For example, suppose\
    \ one wanted to find the neighbor state for the IP\n   address of 89.1.1.42. \
    \ Accordingly, egpNeighState.89.1.1.42 would\n   identify the desired instance.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document was produced by the SNMP Working Group:\n\
    \               Karl Auerbach, Epilogue Technology\n               David Bridgham,\
    \ Epilogue Technology\n               Brian Brown, Synoptics\n               John\
    \ Burress, Wellfleet\n               Jeffrey D. Case, University of Tennessee\
    \ at Knoxville\n               James R. Davin, MIT-LCS\n               Mark S.\
    \ Fedor, PSI, Inc.\n               Stan Froyd, ACC\n               Satish Joshi,\
    \ Synoptics\n               Ken Key, University of Tennessee at Knoxville\n  \
    \             Gary Malkin, Proteon\n               Randy Mayhew, University of\
    \ Tennessee at Knoxville\n               Keith McCloghrie, Hughes LAN Systems\n\
    \               Marshall T. Rose, PSI, Inc. (chair)\n               Greg Satz,\
    \ cisco\n               Martin Lee Schoffstall, PSI, Inc.\n               Bob\
    \ Stewart, Xyplex\n               Geoff Thompson, Synoptics\n               Bill\
    \ Versteeg, Network Research Corporation\n               Wengyik Yeong, PSI, Inc.\n\
    \   In addition, the comments of the following individuals are also\n   acknolwedged:\n\
    \               Craig A. Finseth, Minnesota Supercomputer Center, Inc.\n     \
    \          Jeffrey C. Honig, Cornell University Theory Center\n              \
    \ Philip R. Karn, Bellcore\n               David Waitzman, BBN\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1] Cerf, V., \"IAB Recommendations for the Development of\
    \ Internet\n       Network Management Standards\", RFC 1052, IAB, April 1988.\n\
    \   [2] Rose, M., and K. McCloghrie, \"Structure and Identification of\n     \
    \  Management Information for TCP/IP-based internets\", RFC 1065,\n       TWG,\
    \ August 1988.\n   [3] McCloghrie K., and M. Rose,\"Management Information Base\
    \ for\n       Network Management of TCP/IP-based internets\", RFC 1066, TWG,\n\
    \       August 1988.\n   [4] Cerf, V., \"Report of the Second Ad Hoc Network Management\
    \ Review\n       Group\", RFC 1109, IAB, August 1989.\n   [5] Case, J., Fedor,\
    \ M., Schoffstall, M., and J. Davin, \"A Simple\n       Network Management Protocol\
    \ (SNMP)\", RFC 1098, University of\n       Tennessee at Knoxville, NYSERNet,\
    \ Inc., Rensselaer Polytechnic\n       Institute, MIT Laboratory for Computer\
    \ Science, April 1989.\n   [6] Warrier, U., and L. Besaw, \"Common Management\
    \ Information\n       Services and Protocol over TCP/IP (CMOT)\", RFC 1095, Unisys\n\
    \       Corporation, Hewlett-Packard, April 1989.\n   [7] Postel, J., \"Telnet\
    \ Protocol Specification\", RFC 854,\n       USC/Information Sciences Institute,\
    \ May 1983.\n   [8] Satz, G., \"Experimental MIB Objects for the CLNP\", Internet\n\
    \       Working Group Request for Comments draft.  Network Information\n     \
    \  Center, SRI International, Menlo Park, California, (in\n       preparation).\n\
    \   [9] Information processing systems - Open Systems Interconnection,\n     \
    \  \"Specification of Abstract Syntax Notation One (ASN.1)\",\n       International\
    \ Organization for Standardization, International\n       Standard 8824, December\
    \ 1987.\n  [10] Information processing systems - Open Systems Interconnection,\n\
    \       \"Specification of Basic Encoding Rules for Abstract Notation One\n  \
    \     (ASN.1)\", International Organization for Standardization.\n       International\
    \ Standard 8825, December 1987.\n  [11] Jacobson, V., \"Congestion Avoidance and\
    \ Control\", SIGCOMM 1988,\n       Stanford, California.\n  [12] Hagens, R., Hall,\
    \ N., and M. Rose, \"Use of the Internet as a\n       subnetwork for experimentation\
    \ with the OSI network layer\",\n       February, 1989.\n  [13] Rose, M., and\
    \ K. McCloghrie, \"Structure and Identification of\n       Management Information\
    \ for TCP/IP-based Internets\", RFC 1155,\n       Performance Systems International\
    \ and Hughes LAN Systems, May\n       1990.\n  [14] Case, J., Fedor, M.,  Schoffstall,\
    \ M., and J. Davin, The Simple\n       Network Management Protocol\", RFC 1157,\
    \ University of Tennessee\n       at Knoxville, Performance Systems International,\
    \ Performance\n       Systems International, and the MIT Laboratory for Computer\n\
    \       Science, May 1990.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: '11.  Author''s Address:'
  contents:
  - "11.  Author's Address:\n   Marshall T. Rose\n   PSI, Inc.\n   PSI California\
    \ Office\n   P.O. Box 391776\n   Mountain View, CA 94039\n   Phone: (415) 961-3380\n\
    \   Email: mrose@PSI.COM\n"
