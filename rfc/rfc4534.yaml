- title: __initial_text__
  contents:
  - '                     Group Security Policy Token v1

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Group Security Policy Token is a structure used to specify the\n\
    \   security policy and configurable parameters for a cryptographic\n   group,\
    \ such as a secure multicast group.  Because the security of a\n   group is composed\
    \ of the totality of multiple security services,\n   mechanisms, and attributes\
    \ throughout the communications\n   infrastructure, an authenticatable representation\
    \ of the features\n   that must be supported throughout the system is needed to\
    \ ensure\n   consistent security.  This document specifies the structure of such\
    \ a\n   token.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Token Creation and Receipt ......................................4\n  \
    \ 3. The Policy Token ................................................5\n    \
    \  3.1. Token Identifiers ..........................................6\n      3.2.\
    \ Registration Policy ........................................6\n      3.3. Rekey\
    \ Policy ...............................................7\n      3.4. Group Data\
    \ Policy ..........................................8\n   4. Security Considerations\
    \ .........................................8\n   5. IANA Considerations .............................................8\n\
    \   6. References.......................................................9\n  \
    \    6.1. Normative References .......................................9\n    \
    \  6.2. Informative References ....................................10\n   7. Acknowledgements\
    \ ...............................................10\n   Appendix A. Core Policy\
    \ Token ASN.1 Module ........................11\n   Appendix B. GSAKMPv1 Base\
    \ Policy ..................................13\n      B.1. GSAKMPv1 Registration\
    \ Policy ..............................13\n          B.1.1. Authorization .......................................13\n\
    \          B.1.2. AccessControl .......................................14\n  \
    \        B.1.3. JoinMechanisms ......................................15\n    \
    \             B.1.3.1. alaCarte ...................................15\n      \
    \           B.1.3.2. suite ......................................17\n        \
    \  B.1.4. Transport ...........................................17\n      B.2.\
    \ GSAKMPv1 Registration ASN.1 Module ........................17\n      B.3. GSAKMPv1\
    \ De-Registration Policy ...........................20\n      B.4. GSAKMPv1 De-Registration\
    \ ASN.1 Module .....................21\n      B.5. GSAKMPv1 Rekey Policy .....................................22\n\
    \           B.5.1. Rekey Authorization ................................22\n  \
    \         B.5.2. Rekey Mechanisms ...................................23\n    \
    \       B.5.3. Rekey Event Definition .............................23\n      \
    \     B.5.4. Rekey Methods ......................................24\n        \
    \          B.5.4.1 Rekey Method NONE ..........................24\n          \
    \        B.5.4.2 Rekey Method GSAKMP LKH ....................24\n           B.5.5\
    \ Rekey Interval ......................................25\n           B.5.6 Rekey\
    \ Reliability ...................................25\n                 B.5.6.1\
    \ Rekey Reliability Mechanism None ............25\n                 B.5.6.2 Rekey\
    \ Reliability Mechanism Resend ..........25\n                 B.5.6.3 Rekey Reliability\
    \ Mechanism Post ............26\n           B.5.7 Distributed Operation Policy\
    \ ........................26\n                 B.5.7.1 No Distributed Operation\
    \ ....................26\n                 B.5.7.2 Autonomous Distributed Mode\
    \ .................26\n      B.6. GSAKMPv1 Rekey Policy ASN.1 Module ........................27\n\
    \   Appendix C. Data SA Policy ........................................30\n  \
    \    C.1. Generic Data Policy .......................................30\n    \
    \  C.2. Generic Data Policy ASN.1 Module ..........................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Multicast Group Security Architecture [RFC3740] defines\
    \ the\n   security infrastructure to support secure group communications.  The\n\
    \   policy token assumes this architecture in its definition.  It defines\n  \
    \ the enforceable security parameters for a Group Secure Association.\n   The\
    \ policy token is a verifiable data construct signed by the Group\n   Owner, the\
    \ entity with the authorization to create security policy.\n   The group controllers\
    \ in a group will use the policy token to ensure\n   that the mechanisms used\
    \ to secure the group are correct and to\n   enforce the access control rules\
    \ for joining members.  The group\n   members, who may contribute data to the\
    \ group or access data from the\n   group, will use the policy token to ensure\
    \ that the group is owned by\n   a trusted authority.  Also, the members may want\
    \ to verify that the\n   access control rules are adequate to protect the data\
    \ that the member\n   is submitting to the group.\n   The policy token is specified\
    \ in ASN.1 [X.208] and is to be DER\n   [X.660] encoded.  This specification ability\
    \ allows the token to\n   easily import group definitions that span different\
    \ applications and\n   environments.  ASN.1 allows the token to specify branches\
    \ that can be\n   used by any multicast security protocol.  Any group can use\
    \ this\n   policy token structure to specify the use of multiple protocols in\n\
    \   securing the group.\n   Care was taken in this specification to provide a\
    \ core level of token\n   specificity that would allow ease of extensibility and\
    \ flexibility in\n   supporting mechanisms.  This was done by using the following\n\
    \   abstracted construct:\n     Mechanism ::= SEQUENCE {\n       mechanismIdentifier\
    \  OBJECT IDENTIFIER,\n       mechanismParameters OCTET STRING\n     }\n   This\
    \ construct will allow the use of group mechanisms specified in\n   other documents\
    \ with the policy token.\n   The policy token is structured to reflect the MSEC\
    \ Architecture\n   layers for a Group Security Association.  Each of the architectural\n\
    \   layers is identified and given a branch in the \"Core\" token.  This\n   allows\
    \ a high degree of flexibility for future protocol\n   specifications at each\
    \ architectural layer without the need to change\n   the \"Core\" policy token,\
    \ which can then act as a single point of\n   reference for defining secure groups\
    \ using any mix of protocols for\n   any number of environments.\n"
- title: 2.  Token Creation and Receipt
  contents:
  - "2.  Token Creation and Receipt\n   At the time of group creation or whenever\
    \ the policy of the group is\n   updated, the Group Owner will create a new policy\
    \ token.\n   To ensure authenticity of the specified policy, the Token MUST be\n\
    \   signed by the Group Owner.  The signed token MUST be in accordance\n   with\
    \ the Cryptographic Message Syntax (CMS) [RFC3852] SignedData\n   type.\n   The\
    \ content of the SignedData is the token itself.  It is represented\n   with the\
    \ ContentType object identifier of\n     id-ct-msec-token    OBJECT IDENTIFIER\
    \ ::= {1.3.6.1.5.5.12.1.1}\n   The CMS sid value of the SignerInfo, which identifies\
    \ the public key\n   needed to validate the signature, MUST be that of the Group\
    \ Owner.\n   The signedAttrs field MUST be present.  In addition to the minimally\n\
    \   required fields of signedAttrs, the signing-time attribute MUST be\n   present.\n\
    \   Upon receipt of a policy token, the recipient MUST check that\n   -  the Group\
    \ Owner, as identified by the sid in the SignerInfo, is\n      the expected entity.\n\
    \   -  the signing-time value is more recent than the signing-time value\n   \
    \   seen in a previously received policy token for that group, or the\n      policy\
    \ token is the first token seen by the recipient for that\n      group.\n   -\
    \  the processing of the signature successfully validates in\n      accordance\
    \ with RFC 3852.\n   -  the specified security and communication mechanisms (or\
    \ at least\n      one mechanism of each choice) are supported and are in compliance\n\
    \      with the recipient's local policy.\n"
- title: 3.  The Policy Token
  contents:
  - "3.  The Policy Token\n   The structure of the policy token is as follows:\n \
    \    Token ::= SEQUENCE {\n       tokenInfo     TokenID,\n       registration\
    \  SEQUENCE OF Registration,\n       rekey         SEQUENCE OF GroupMngmtProtocol,\n\
    \       data          SEQUENCE OF DataProtocol\n     }\n   tokenInfo provides\
    \ information about the instance of the Policy Token\n       (PT).\n   registration\
    \ provides a list of acceptable registration and\n       de-registration policy\
    \ and mechanisms that may be used to manage\n       member-initiated joins and\
    \ departures from a group.  A NULL\n       sequence indicates that the group does\
    \ not support registration\n       and de-registration of members.  A member MUST\
    \ be able to support\n       at least one set of Registration mechanisms in order\
    \ to join the\n       group.  When multiple mechanisms are present, a member MAY\
    \ use\n       any of the listed methods.  The list is ordered in terms of Group\n\
    \       Owner preference.  A member MUST choose the highest listed\n       mechanism\
    \ that local policy supports.\n   rekey provides the rekey protocols that will\
    \ be used in managing the\n       group.  The member MUST be able to accept one\
    \ of the types of\n       rekey messages listed.  The list is ordered in terms\
    \ of Group\n       Owner preference.  A member MUST choose the highest listed\n\
    \       mechanism that local policy supports.\n   data provides the applications\
    \ used in the communications between\n       group members.  When multiple applications\
    \ are provided, the\n       order of the list implies the order of encapsulation\
    \ of the data.\n       A member MUST be able to support all the listed applications\
    \ and\n       if any choices of mechanisms are provided per application, the\n\
    \       member MUST support at least one of the mechanisms.\n   For the registration,\
    \ rekey, and data fields, implementations\n   encountering unknown protocol identifiers\
    \ MUST handle this gracefully\n   by providing indicators that an unknown protocol\
    \ is among the\n   sequence of permissible protocols.  If the unknown protocol\
    \ is the\n   only allowable protocol in the sequence, then the implementation\n\
    \   cannot support that field, and the member cannot join the group.  It\n   is\
    \ a matter of local policy whether a join is permitted when an\n   unknown protocol\
    \ exists among the allowable, known protocols.\n   Protocols in addition to registration,\
    \ rekey, and data SHOULD NOT be\n   added to subsequent versions of this Token\
    \ unless the MSEC\n   architecture changes.\n   Each data field of the PT is specified\
    \ further in the following\n   sections.\n"
- title: 3.1.  Token Identifiers
  contents:
  - "3.1.  Token Identifiers\n   tokenInfo explicitly identifies a version of the\
    \ policy token for a\n       particular group.  It is defined as\n     TokenID\
    \ ::= SEQUENCE {\n       tokenDefVersion INTEGER (1),\n       groupName      \
    \ OCTET STRING,\n       edition         INTEGER OPTIONAL\n     }\n   tokenDefVersion\
    \ is the version of the Group Policy Token\n       Specification.  This specification\
    \ (v1) is represented as one\n       (1).  Changes to the structure of the Group\
    \ Security Policy Token\n       will require an update to this field.\n   groupName\
    \ is the identifier of the group and MUST be unique relative\n       to the Group\
    \ Owner.\n   edition is an optional INTEGER indicating the sequence number of\
    \ the\n       PT.  If edition is present, group entities MUST accept a PT only\n\
    \       when the value is greater than the last value seen in a valid PT\n   \
    \    for that group.\n   The type LifeDate is also defined to provide standard\
    \ methods of\n   indicating timestamps and intervals in the Tokens.\n     LifeDate\
    \ ::= CHOICE {\n       gt       GeneralizedTime,\n       utc      UTCTime,\n \
    \      interval INTEGER\n     }\n"
- title: 3.2.  Registration Policy
  contents:
  - "3.2.  Registration Policy\n   The registration security association (SA) is defined\
    \ in the MSEC\n   Architecture.  During registration, a prospective group member\
    \ and\n   the group controller will interact to give the group member access to\n\
    \   the keys and information it needs to join the group and participate\n   in\
    \ the group Data SA.\n   The de-registration piece allows a current group member\
    \ to notify the\n   Group Controller Key Server (GC/KS) that it will no longer\
    \ be\n   participating in the Data SA.\n     Registration ::= SEQUENCE {\n   \
    \    register    GroupMngmtProtocol,\n       de-register GroupMngmtProtocol\n\
    \     }\n   The protocols for registration and de-registration are each specified\n\
    \   as\n     GroupMngmtProtocol ::= CHOICE {\n       none      NULL,\n       supported\
    \ Protocol\n     }\n     Protocol ::= SEQUENCE {\n       protocol      OBJECT\
    \ IDENTIFIER,\n       protocolInfo  OCTET STRING\n     }\n   For example, register\
    \ might be specified as the Group Secure\n   Association Key Management Protocol\
    \ (GSAKMP) [RFC4535] registration\n   protocol.  The OBJECT IDENTIFIER TBS would\
    \ be followed by the\n   parameters used in GSAKMP registration as specified in\
    \ Appendix B.1.\n"
- title: 3.3.  Rekey Policy
  contents:
  - "3.3.  Rekey Policy\n   The Rekey SA is defined in the MSEC Architecture.  During\
    \ the Rekey\n   of a group, several changes can potentially be made:\n   -  refresh/change\
    \ group protection keys,\n   -  update the policy token,\n   -  change the group\
    \ membership.\n   During Rekey, the membership of the group can be modified as\
    \ well as\n   refreshing the group traffic protection keys and updating the Policy\n\
    \   Token.\n   This field is also specified as a sequence of protocols that will\
    \ be\n   used by the GC/KS.\n"
- title: 3.4.  Group Data Policy
  contents:
  - "3.4.  Group Data Policy\n   The Data SA is the ultimate consumer of the group\
    \ keys.  The data\n   field will indicate the keys and mechanisms that are to\
    \ be used in\n   communications between group members.  There are several protocols\n\
    \   that could make use of group keys, ranging from simple security\n   applications\
    \ that only need key for encryption and/or integrity\n   protection to more complex\
    \ configurable security protocols such as\n   IPsec and Secure Real-time Transport\
    \ Protocol (SRTP) [RFC3711].  The\n   sequencing of the Data SA mechanisms are\
    \ from \"inside\" to \"outside\".\n   That is, the first Data SA defined in a\
    \ policy token must act on the\n   raw data.  Any Data SA specified after that\
    \ will be applied in turn.\n     DataProtocol ::= Protocol\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document specifies the structure for a group\
    \ policy token.  As\n   such, the structure as received by a group entity must\
    \ be verifiably\n   authentic.  This policy token uses CMS to apply authentication\n\
    \   through digital signatures.  The security of this scheme relies upon\n   a\
    \ secure CMS implementation, choice of signature mechanism of\n   appropriate\
    \ strength for the group using the policy token, and\n   secure, sufficiently\
    \ strong keys.  Additionally, it relies upon\n   knowledge of a well-known Group\
    \ Owner as the root of policy\n   enforcement.\n   Furthermore, while the Group\
    \ Owner may list alternate mechanisms for\n   various functions, the group is\
    \ only as strong as the weakest\n   accepted mechanisms.  As such, the Group Owner\
    \ is responsible for\n   providing only acceptable security mechanisms.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The following object identifiers have been assigned:\n\
    \   -  id-ct-msec-token OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.1.1\n   -  id-securitySuiteOne\
    \ OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.2.1\n   -  id-GSAKMPv1RegistrationProtocol\n\
    \                           OBJECT IDENTIFIER::= 1.3.6.1.5.5.12.3.1\n   -  id-GSAKMPv1DeRegistrationProtocol\n\
    \                           OBJECT IDENTIFIER::= 1.3.6.1.5.5.12.3.2\n   -  id-GSAKMPv1Rekey\
    \ OBJECT IDENTIFIER::= 1.3.6.1.5.5.12.3.3\n   -  id-rekeyNone OBJECT IDENTIFIER\
    \ ::= 1.3.6.1.5.5.12.4.1\n   -  id-rekeyMethodGSAKMPLKH\n                    \
    \      OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.4.2\n   -  id-reliabilityNone OBJECT\
    \ IDENTIFIER ::= 1.3.6.1.5.5.12.5.1\n   -  id-reliabilityResend OBJECT IDENTIFIER\
    \ ::= 1.3.6.1.5.5.12.5.2\n   -  id-reliabilityPost OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.5.3\n\
    \   -  id-subGCKSSchemeNone OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.6.1\n   -  id-subGCKSSchemeAutonomous\n\
    \                           OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.6.2\n   -  id-genericDataSA\
    \ OBJECT IDENTIFIER ::= 1.3.6.1.5.5.12.7.1\n   The Group Security Policy Token\
    \ can be extended through\n   specification.  Extensions in the form of objects\
    \ can be registered\n   through IANA.  Extensions requiring changes to the protocol\
    \ structure\n   will require an update to the tokenDefVersion field of the TokenID\n\
    \   (see Section 3.1).\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC4535] Harney, H., Meth, U., Colegrove, A.,\
    \ and G. Gross, \"GSAKMP:\n             Group Secure Association Key Management\
    \ Protocol\", RFC\n             4535, June 2006.\n   [RFC3280] Housley, R., Polk,\
    \ W., Ford, W., and D. Solo, \"Internet\n             X.509 Public Key Infrastructure\
    \ Certificate and Certificate\n             Revocation List (CRL) Profile\", RFC\
    \ 3280, April 2002.\n   [RFC3852] Housley, R., \"Cryptographic Message Syntax\
    \ (CMS)\", RFC\n             3852, July 2004.\n   [X.208]   Recommendation X.208,\
    \ Specification of Abstract Syntax\n             Notation One (ASN.1), 1988.\n\
    \   [X.660]   Recommendation X.660, Information Technology ASN.1 Encoding\n  \
    \           Rules:  Specification of Basic Encoding Rules (BER),\n           \
    \  Canonical Encoding Rules (CER), and Distinguished Encoding\n             Rules\
    \ (DER), 1997.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [HCLM00]  Harney, H., Colegrove, A., Lough,\
    \ P., and U. Meth, \"GSAKMP\n             Token Specification\", Work in Progress,\
    \ February 2003.\n   [RFC3711] Baugher, M., McGrew, D., Naslund, M., Carrara,\
    \ E., and K.\n             Norrman, \"The Secure Real-time Transport Protocol\
    \ (SRTP)\",\n             RFC 3711, March 2004.\n   [RFC3740] Hardjono, T. and\
    \ B. Weis, \"The Multicast Group Security\n             Architecture\", RFC 3740,\
    \ March 2004.\n   [HCM01]   H. Harney, A. Colegrove, P. McDaniel, \"Principles\
    \ of Policy\n             in Secure Groups\", Proceedings of Network and Distributed\n\
    \             Systems Security 2001 Internet Society, San Diego, CA,\n       \
    \      February 2001.\n   [HHMCD01] Hardjono, T., Harney, H., McDaniel, P., Colegrove,\
    \ A., and\n             P. Dinsmore, \"Group Security Policy Token:  Definition\
    \ and\n             Payloads\", Work in Progress, August 2003.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The following individuals deserve recognition and thanks\
    \ for their\n   contributions, which have greatly improved this specification:\
    \  Uri\n   Meth, whose knowledge of GSAKMP and tokens was greatly appreciated\
    \ as\n   well as his help in getting this document submitted; Peter Lough,\n \
    \  Thomas Hardjono, Patrick McDaniel, and Pete Dinsmore for their work\n   on\
    \ earlier versions of policy tokens; George Gross for the impetus to\n   have\
    \ a well-specified, extensible policy token; and Rod Fleischer for\n   catching\
    \ implementation issues.\n   The following technical works influenced the design\
    \ of the Group\n   Security Policy Token: [HCLM00], [HCM01], and [HHMCD01]\n"
- title: Appendix A.  Core Policy Token ASN.1 Module
  contents:
  - "Appendix A.  Core Policy Token ASN.1 Module\n   PolicyToken\n       {1.3.6.1.5.5.12.0.1}\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   Token ::= SEQUENCE {\n     tokenInfo\
    \    TokenID,\n     registration SEQUENCE OF Registration,\n     rekey       \
    \ SEQUENCE OF GroupMngmtProtocol,\n     data         SEQUENCE OF DataProtocol\n\
    \   }\n   ------------------------------------------------------------\n     \
    \  -- Token ID\n   TokenID ::= SEQUENCE {\n     tokenDefVersion INTEGER (1), \
    \    -- Group Security Policy Token v1\n     groupName       OCTET STRING,\n \
    \    edition         INTEGER OPTIONAL\n   }\n   LifeDate ::= CHOICE {\n     gt\
    \       GeneralizedTime,\n     utc      UTCTime,\n     interval INTEGER\n   }\n\
    \   ------------------------------------------------------------\n       -- Registration\n\
    \   Registration ::= SEQUENCE {\n     register    GroupMngmtProtocol,\n     de-register\
    \ GroupMngmtProtocol\n   }\n   ------------------------------------------------------------\n\
    \       -- GroupMngmtProtocol\n   GroupMngmtProtocol ::= CHOICE {\n     none \
    \     NULL,\n     supported Protocol\n   }\n   Protocol ::= SEQUENCE {\n     protocol\
    \     OBJECT IDENTIFIER,\n     protocolInfo OCTET STRING\n   }\n   ------------------------------------------------------------\n\
    \       -- DataProtocol\n   DataProtocol ::= Protocol\n   ------------------------------------------------------------\n\
    \   END\n"
- title: Appendix B.  GSAKMPv1 Base Policy
  contents:
  - "Appendix B.  GSAKMPv1 Base Policy\n   This appendix provides the data structures\
    \ needed for when GSAKMP\n   exchanges are used as the GroupMngmtProtocol for\
    \ the registration,\n   de-registration, and/or Rekey SAs.  This GSAKMP Base Policy\n\
    \   specification assumes familiarity with GSAKMP.\n"
- title: B.1.  GSAKMPv1 Registration Policy
  contents:
  - "B.1.  GSAKMPv1 Registration Policy\n   When GSAKMP is used in the Group Management\
    \ Protocol for\n   registration, the following object identifier is used in the\
    \ core\n   token.\n     id-GSAKMPv1RegistrationProtocol\n                    \
    \    OBJECT IDENTIFIER::= {1.3.6.1.5.5.12.3.1}\n   The registration policy for\
    \ GSAKMP provides 1) information on\n   authorizations for group roles, 2) access\
    \ control information for\n   group members, 3) the mechanisms used in the registration\
    \ process,\n   and 4) information on what transport the GSAKMP registration exchange\n\
    \   will use.\n     GSAKMPv1RegistrationInfo ::= SEQUENCE {\n       joinAuthorization\
    \ JoinAuthorization,\n       joinAccessControl SEQUENCE OF AccessControl,\n  \
    \     joinMechanisms    JoinMechanisms,\n       transport         Transport\n\
    \     }\n"
- title: B.1.1.  Authorization
  contents:
  - "B.1.1.  Authorization\n   joinAuthorization provides information on who is allowed\
    \ to be a\n       Group Controller Key Server (GC/KS) and a sub-GC/KS.  It also\
    \ can\n       indicate if there are limitations on who can send data in a\n  \
    \     group.\n     JoinAuthorization ::= SEQUENCE {\n       gCKS    GCKSName,\n\
    \       subGCKS SEQUENCE OF GCKSName OPTIONAL,\n       senders SenderAuthorization\n\
    \     }\n   The authorization information is in the form of an access control\n\
    \   list indicating entity name and acceptable certification authority\n   information\
    \ for the entity's certificate.\n     GCKSName ::= SEQUENCE OF UserCAPair\n  \
    \   UserCAPair ::= SEQUENCE {\n       groupEntity  GSAKMPID,\n       cA      \
    \     CertAuth\n     }\n   groupEntity is defined by type and value.  The types\
    \ are indicated by\n       integers that correspond to the GSAKMP Identification\
    \ types.\n       When a portion of a defined name type is filled with an \"*\"\
    , this\n       indicates a wildcard, representing any valid choice for a field.\n\
    \       This allows the specification of an authorization rule that is a\n   \
    \    set of related names.\n     GSAKMPID ::= SEQUENCE {\n       typeValue  INTEGER,\n\
    \       typeData   OCTET STRING\n     }\n   The certificate authority is identified\
    \ by the X.509 [RFC3280] key\n   identifier.\n     CertAuth ::= KeyIdentifier\n\
    \   Senders within a group either can be all (indicating no sender\n   restrictions)\
    \ or can be an explicit list of those members authorized\n   to send data.\n \
    \    SenderAuthorization ::= CHOICE {\n       all     [0] NULL,\n       limited\
    \ [1] EXPLICIT SEQUENCE OF UserCAPair\n     }\n"
- title: B.1.2.  AccessControl
  contents:
  - "B.1.2.  AccessControl\n   joinAccessControl provides information on who is allowed\
    \ to be a\n       Group Member.  The access control list is implemented as a set\
    \ of\n       permissions that the member must satisfy and a list of name rules\n\
    \       and the certificate authority that each must satisfy.\n       Additionally,\
    \ a list of exclusions to the list may be provided.\n     AccessControl ::= SEQUENCE\
    \ {\n       permissions    [1] EXPLICIT SEQUENCE OF Permission OPTIONAL,\n   \
    \    accessRule     [2] EXPLICIT SEQUENCE OF UserCAPair,\n       exclusionsRule\
    \ [3] EXPLICIT SEQUENCE OF UserCAPair OPTIONAL\n     }\n   The permissions initially\
    \ available are an abstract set of numeric\n   levels that may be interpreted\
    \ internal to a community.\n     Permission ::= CHOICE {\n       simplePermission\
    \ [1] SimplePermission\n     }\n     SimplePermission ::= ENUMERATED {\n     \
    \  one(1),\n       two(2),\n       three(3),\n       four(4),\n       five(5),\n\
    \       six(6),\n       seven(7),\n       eight(8),\n       nine(9)\n     }\n"
- title: B.1.3.  JoinMechanisms
  contents:
  - "B.1.3.  JoinMechanisms\n   Allowable GSAKMP mechanism choices for a particular\
    \ group are\n   specified in joinMechanisms.  Any set of JoinMechanism is acceptable\n\
    \   from a policy perspective.\n     JoinMechanisms ::=  SEQUENCE OF JoinMechanism\n\
    \   Each set of mechanisms used in the GSAKMP Registration may be\n   specified\
    \ either as an explicitly defined set or as a pre-defined\n   security suite.\n\
    \     JoinMechanism ::= CHOICE {\n       alaCarte [0] Mechanisms,\n       suite\
    \    [1] SecuritySuite\n     }\n"
- title: B.1.3.1.  alaCarte
  contents:
  - "B.1.3.1.  alaCarte\n   In an explicitly defined -- or alaCarte -- set, a mechanism\
    \ is\n   defined for the signature, the key exchange algorithm, the key\n   wrapping\
    \ algorithm, the type of acknowledgement data, and\n   configuration data for\
    \ the setting of timeouts.\n     Mechanisms ::=  SEQUENCE {\n       signatureDef\
    \   SigDef,\n       kEAlg          KEAlg,\n       keyWrap        KeyWrap,\n  \
    \     ackData        AckData,\n       opInfo         OpInfo\n     }\n   The signature\
    \ definition requires specification of the signature\n   algorithm for message\
    \ signing.  The INTEGER that defines the choice\n   corresponds to the GSAKMP\
    \ Signature type.\n   SigDef ::= SEQUENCE {\n     sigAlgorithmID  INTEGER,\n \
    \    hashAlgorithmID INTEGER\n   }\n   The INTEGER corresponding to hashAlgorithm\
    \ will map to the GSAKMP\n   Nonce Hash type values.  This algorithm is used in\
    \ computing the\n   combined nonce.\n   The key exchange algorithm requires an\
    \ integer to define the GSAKMP\n   key creation type and may require additional\
    \ per type data.\n     KEAlg ::= SEQUENCE {\n       keyExchangeAlgorithmID   INTEGER,\n\
    \       keyExchangeAlgorithmData OCTET STRING OPTIONAL\n     }\n   The keyWrap\
    \ is the algorithm that is used to wrap the group key(s)\n   and the policy token\
    \ (if included).  The integer corresponds to the\n   GSAKMP encryption type.\n\
    \     KeyWrap ::= INTEGER\n   Data may potentially be returned in a GSAKMP Key\
    \ Download ACK/Failure\n   message.  The type of data required by a group is specified\
    \ by\n   AckData.  No such field is currently supported or required.\n     AckData\
    \ ::= CHOICE {\n       none [0] NULL\n     }\n   OpInfo provides configuration\
    \ data for the operation of GSAKMP\n       registration.  timeOut indicates the\
    \ elapsed amount of time\n       before a sent message is considered to be misrouted\
    \ or lost.  It\n       is specified as the timestamp type LifeDate, previously\
    \ defined\n       in the core token.  terse informs a GC/KS whether the group\n\
    \       should be operated in terse (TRUE) or verbose (FALSE) mode.  The\n   \
    \    optional timestamp field indicates whether a timestamp (TRUE) or\n      \
    \ a nonce (FALSE) is used for anti-replay protection.  If the field\n       is\
    \ absent, the use of nonces is the default mode for GSAKMP\n       registration.\n\
    \   OpInfo ::= SEQUENCE {\n     timeOut  LifeDate,\n     terse    BOOLEAN,\n \
    \    timestamp BOOLEAN OPTIONAL\n   }\n"
- title: B.1.3.2.  suite
  contents:
  - "B.1.3.2.  suite\n   If the choice of mechanism for the join is a predefined security\n\
    \   suite, then it is identified by OBJECT IDENTIFIER (OID).  Other\n   security\
    \ suites may be defined elsewhere by specification and\n   registration of an\
    \ OID.\n     SecuritySuite ::= OBJECT IDENTIFIER\n   The OID for security suite\
    \ 1, as defined within the GSAKMPv1\n   specification, is\n     id-securitySuiteOne\
    \  OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.2.1}\n"
- title: B.1.4.  Transport
  contents:
  - "B.1.4.  Transport\n   transport indicates what protocol GSAKMP should ride over.\
    \  The\n       choice of udpRTJtcpOther indicates that the GSAKMP Request to\n\
    \       Join message is carried by UDP and all other group establishment\n   \
    \    messages are carried by TCP.\n     Transport ::= CHOICE {\n       tcp   \
    \          [0] NULL,\n       udp             [1] NULL,\n       udpRTJtcpOther\
    \  [2] NULL\n     }\n"
- title: B.2.  GSAKMPv1 Registration ASN.1 Module
  contents:
  - "B.2.  GSAKMPv1 Registration ASN.1 Module\n   GSAKMPv1RegistrationSA\n       {1.3.6.1.5.5.12.0.2}\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n     EXPORTS\n       GCKSName;\n\
    \     IMPORTS\n       LifeDate\n         FROM PolicyToken {1.3.6.1.5.5.12.0.1}\n\
    \       KeyIdentifier\n         FROM PKIX1Implicit88 { iso(1) identified-organization(3)\n\
    \           dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n           id-mod(0)\
    \ id-pkix1-implicit(19) };\n   id-GSAKMPv1RegistrationProtocol\n             \
    \         OBJECT IDENTIFIER::= {1.3.6.1.5.5.12.7}\n   GSAKMPv1RegistrationInfo\
    \ ::= SEQUENCE {\n     joinAuthorization JoinAuthorization,\n     joinAccessControl\
    \ SEQUENCE OF AccessControl,\n     joinMechanisms    JoinMechanisms,\n     transport\
    \         Transport\n   }\n   JoinAuthorization ::= SEQUENCE {\n     gCKS    GCKSName,\n\
    \     subGCKS SEQUENCE OF GCKSName OPTIONAL,\n     senders SenderAuthorization\n\
    \   }\n   GCKSName ::= SEQUENCE OF UserCAPair\n   UserCAPair ::= SEQUENCE {\n\
    \     groupEntity GSAKMPID,\n     cA          CertAuth\n   }\n   CertAuth ::=\
    \ KeyIdentifier\n   SenderAuthorization ::= CHOICE {\n     all     [0] NULL,\n\
    \     limited [1] EXPLICIT SEQUENCE OF UserCAPair\n   }\n   AccessControl ::=\
    \ SEQUENCE {\n     permissions    [1] EXPLICIT SEQUENCE OF Permission OPTIONAL,\n\
    \     accessRule     [2] EXPLICIT SEQUENCE OF UserCAPair,\n     exclusionsRule\
    \ [3] EXPLICIT SEQUENCE OF UserCAPair OPTIONAL\n   }\n   Permission ::= CHOICE\
    \ {\n     simplePermission [1] SimplePermission\n   }\n   SimplePermission ::=\
    \ ENUMERATED {\n     one(1),\n     two(2),\n     three(3),\n     four(4),\n  \
    \   five(5),\n     six(6),\n     seven(7),\n     eight(8),\n     nine(9)\n   }\n\
    \   GSAKMPID ::= SEQUENCE {\n     typeValue INTEGER,\n     typeData  OCTET STRING\n\
    \   }\n   JoinMechanisms ::=  SEQUENCE OF JoinMechanism\n   JoinMechanism ::=\
    \ CHOICE {\n     alaCarte [0] Mechanisms,\n     suite    [1] SecuritySuite\n \
    \  }\n   Mechanisms ::=  SEQUENCE {\n     signatureDef SigDef,\n     kEAlg   \
    \     KEAlg,\n     keyWrap      KeyWrap,\n     ackData      AckData,\n     opInfo\
    \       OpInfo\n   }\n   SecuritySuite ::= OBJECT IDENTIFIER\n   -- SECURITY SUITE\
    \ ONE --\n   id-securitySuiteOne OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.2.1}\n\
    \   SigDef ::= SEQUENCE {\n     sigAlgorithmID  INTEGER,\n     hashAlgorithmID\
    \ INTEGER\n   }\n   KEAlg ::= SEQUENCE {\n     keyExchangeAlgorithmID   INTEGER,\n\
    \     keyExchangeAlgorithmData OCTET STRING OPTIONAL\n   }\n   KeyWrap ::= INTEGER\n\
    \   AckData ::= CHOICE {\n     none [0] NULL\n   }\n   OpInfo ::= SEQUENCE {\n\
    \     timeOut   LifeDate,\n     terse     BOOLEAN,\n     timestamp BOOLEAN OPTIONAL\n\
    \   }\n   Transport ::= CHOICE {\n     tcp            [0] NULL,\n     udp    \
    \        [1] NULL,\n     udpRTJtcpOther [2] NULL\n   }\n   END\n"
- title: B.3.  GSAKMPv1 De-Registration Policy
  contents:
  - "B.3.  GSAKMPv1 De-Registration Policy\n   GSAKMP de-registration provides a method\
    \ to notify a (S-)GC/KS that a\n   member needs to leave a group.  When GSAKMP\
    \ is the de-registration\n   Protocol for the Group, the following object identifier\
    \ is used in\n   the core token.\n   id-GSAKMPv1DeRegistrationProtocol    OBJECT\
    \ IDENTIFIER::=\n   {1.3.6.1.5.5.12.3.2}\n   The de-registration policy provides\
    \ the mechanisms needed for the\n   de-registration exchange messages, an indication\
    \ of whether the\n   exchange is to be done using terse (TRUE) or verbose (FALSE)\
    \ mode,\n   and the transport used for the GSAKMP de-registration messages.\n\
    \     GSAKMPv1DeRegistrationInfo ::= SEQUENCE {\n       leaveMechanisms  SEQUENCE\
    \ OF LeaveMechanisms,\n       terse            BOOLEAN,\n       transport    \
    \    Transport\n     }\n   The policy dictating the mechanisms needed for the\
    \ de-registration\n   exchange is defined by leaveMechanisms.  This field is specified\
    \ as\n     LeaveMechanisms ::= SEQUENCE {\n       sigAlgorithm   INTEGER,\n  \
    \     hashAlgorithm  INTEGER,\n       cA             KeyIdentifier\n     }\n \
    \  The INTEGER corresponding to sigAlgorithm will map to the GSAKMP\n   Signature\
    \ type values.  This algorithm set is to be used for message\n   signing.\n  \
    \ The INTEGER corresponding to hashAlgorithm will map to the GSAKMP\n   Nonce\
    \ Hash type values.  This algorithm is used in computing the\n   combined nonce.\n\
    \   cA represents a trust point off of which the signer's certificate\n   must\
    \ certify.  It is identified by the Public Key Infrastructure for\n   X.509 Certificates\
    \ (PKIX) KeyIdentifier [RFC3280] type.\n   transport will provide the expected\
    \ transport for GSAKMP\n   de-registration messages.  Initially, either UDP or\
    \ TCP will be the\n   policy for a group.\n     Transport ::= CHOICE {\n     \
    \  tcp [0] NULL,\n       udp [1] NULL\n     }\n"
- title: B.4.  GSAKMPv1 De-Registration ASN.1 Module
  contents:
  - "B.4.  GSAKMPv1 De-Registration ASN.1 Module\n   GSAKMPv1DeRegistrationSA\n  \
    \     {1.3.6.1.5.5.12.0.3}\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n     IMPORTS\n\
    \       KeyIdentifier\n         FROM PKIX1Implicit88 { iso(1) identified-organization(3)\n\
    \           dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n           id-mod(0)\
    \ id-pkix1-implicit(19) };\n   id-GSAKMPv1DeRegistrationProtocol\n           \
    \        OBJECT IDENTIFIER::= {1.3.6.1.5.5.12.3.2}\n   GSAKMPv1DeRegistrationInfo\
    \ ::= SEQUENCE {\n     leaveMechanisms SEQUENCE OF LeaveMechanisms,\n     transport\
    \       Transport\n   }\n   LeaveMechanisms ::= SEQUENCE {\n     sigAlgorithm\
    \  INTEGER,\n     hashAlgorithm INTEGER,\n     cA            KeyIdentifier\n \
    \  }\n   Transport ::= CHOICE {\n     tcp [0] NULL,\n     udp [1] NULL\n   }\n\
    \   END\n"
- title: B.5.  GSAKMPv1 Rekey Policy
  contents:
  - "B.5.  GSAKMPv1 Rekey Policy\n   When GSAKMP is used as the Rekey Protocol for\
    \ the Group, the\n   following object identifier should be used in the core token\
    \ as the\n   rekey protocol:\n   id-GSAKMPv1Rekey     OBJECT IDENTIFIER::= {1.3.6.1.5.5.12.0.4}\n\
    \   The GSAKMP rekey policy provides authorization information,\n   mechanisms\
    \ for the GSAKMP rekey messages, indicators defining rekey\n   event definitions\
    \ that define when the GC/KS should send a rekey\n   message, the protocol or\
    \ method the rekey event will use, the rekey\n   interval that will allow a member\
    \ to recognize a failure in the rekey\n   process, a reliability indicator that\
    \ defines the method the rekey\n   will use to increase the likelihood of a rekey\
    \ delivery (if any), and\n   finally an indication of how subordinate-GC/KSes\
    \ will handle rekey.\n   This policy also describes the specific rekey policy\
    \ methods \"None\"\n   and \"GSAKMP LKH REKEY\".\n     GSAKMPv1RekeyInfo ::= SEQUENCE\
    \ {\n       authorization  RekeyAuthorization,\n       mechanism      RekeyMechanisms,\n\
    \       rekeyEventDef  RekeyEventDef,\n       rekeyMethod    RekeyMethod,\n  \
    \     rekeyInterval  LifeDate,\n       reliability    Reliability,\n       subGCKSInfo\
    \    SubGCKSInfo\n     }\n"
- title: B.5.1.  Rekey Authorization
  contents:
  - "B.5.1.  Rekey Authorization\n      RekeyAuthorization ::= GCKSName\n"
- title: B.5.2.  Rekey Mechanisms
  contents:
  - "B.5.2.  Rekey Mechanisms\n   The policy dictating the mechanisms needed for rekey\
    \ message\n   processing is defined by RekeyMechanisms.  This field is specified\
    \ as\n     RekeyMechanisms ::= SEQUENCE {\n       sigAlgorithm   INTEGER,\n  \
    \     hashAlgorithm  INTEGER\n     }\n   The INTEGER corresponding to sigAlgorithm\
    \ will map to the GSAKMP\n   Signature type values.  This algorithm set is to\
    \ be used for message\n   signing.\n   The INTEGER corresponding to hashAlgorithm\
    \ will map to the GSAKMP\n   Nonce Hash type values.  This algorithm is used in\
    \ computing the\n   combined nonce.\n"
- title: B.5.3.  Rekey Event Definition
  contents:
  - "B.5.3.  Rekey Event Definition\n   Rekey Event Definition provides information\
    \ to the GC/KS about the\n   system requirements for sending rekey messages. \
    \ This allows\n   definition of the rekey event in time as well as event-driven\n\
    \   characteristics (a number of de-registration notifications as an\n   example),\
    \ or a combination of the two (e.g., after x de-registrations\n   or 24 hours,\
    \ whichever comes first).\n     RekeyEventDef ::= CHOICE {\n       none      \
    \   [0]  NULL,     -- never rekey\n       timeOnly     [1]  LifeDate, -- rekey\
    \ every x units\n       event        [2]  INTEGER,  -- rekey after x events\n\
    \       timeAndEvent [3]  TimeAndEvent\n     }\n   The LifeDate specifies the\
    \ maximum time a group should exist between\n   rekeys.  This does not require\
    \ clock synchronization as this is used\n   with respect to a local clock (a GC/KS\
    \ clock for sending rekey\n   messages or a member clock for determining whether\
    \ a message has been\n   missed).\n   The INTEGER corresponding to the event is\
    \ an indicator of the number\n   of events a group should sustain before a rekey\
    \ message is sent.\n   This defines the events between rekeys.  An example of\
    \ a relevant\n   event is de-registration notifications.\n   The TimeAndEvent\
    \ is defined as a couple of the LifeDate and Integer\n   policies.\n     TimeAndEvent\
    \ ::= SEQUENCE {\n       time   LifeDate, -- rekey after x units of time OR\n\
    \       event  INTEGER   -- x events occur\n     }\n"
- title: B.5.4.  Rekey Methods
  contents:
  - "B.5.4.  Rekey Methods\n   The rekey method defines the policy of how the rekey\
    \ is to be\n   accomplished.  This field is specified as\n     RekeyMethod ::=\
    \ SEQUENCE {\n       rekeyMethodType  OBJECT IDENTIFIER,\n       rekeyMethodInfo\
    \  OCTET STRING\n     }\n   The rekeyMethodType will define the rekey method to\
    \ be used by the\n   group.\n   The rekeyMethodInfo will supply the GMs with the\
    \ information they\n   need to operate in the correct rekey mode.\n"
- title: B.5.4.1.  Rekey Method NONE
  contents:
  - "B.5.4.1.  Rekey Method NONE\n   The group defined to work without a rekey protocols\
    \ supporting it is\n   supported by the rekeyMethodType NONE.  There is no\n \
    \  RekeyMethodNoneInfo associated with this option.\n     id-rekeyNone OBJECT\
    \ IDENTIFIER ::= {1.3.6.1.5.5.12.4.1}\n     RekeyMethodNoneInfo ::= NULL\n"
- title: B.5.4.2.  Rekey Method GSAKMP LKH
  contents:
  - "B.5.4.2.  Rekey Method GSAKMP LKH\n   The GSAKMP protocol specification defined\
    \ an interpretation of the\n   Logical Key Hierarchy (LKH) protocol as a rekey\
    \ method.  This method\n   is supported by the following values.\n     id-rekeyMethodGSAKMPLKH\
    \ OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.4.2}\n     RekeyMethodGSAKMPLKHInfo ::=\
    \ INTEGER\n   The GSAKMP LKH method requires a gsakmp type value for identifying\n\
    \   the cryptographic algorithm used to wrap the keys.  This value maps\n   to\
    \ the GSAKMP encryption type.\n"
- title: B.5.5.  Rekey Interval
  contents:
  - "B.5.5.  Rekey Interval\n   Rekey interval defines the maximum delay the GM should\
    \ see between\n   valid rekeys.  This provides a means to ensure the GM is\n \
    \  synchronized, from a key management perspective, with the rest of the\n   group.\
    \  It is defined as a time/date stamp.\n"
- title: B.5.6.  Rekey Reliability
  contents:
  - "B.5.6.  Rekey Reliability\n   The rekey message in the GSAKMP protocol is a single\
    \ push message.\n   There are reliability concerns with such non-acknowledged\
    \ messages\n   (i.e., message exchange).  The Reliability policy defines the\n\
    \   mechanism used to deal with these concerns.\n     Reliability ::= SEQUENCE\
    \ {\n       reliabilityMechanism   OBJECT IDENTIFIER,\n       reliabilityMechContent\
    \ OCTET STRING\n     }\n   The reliability mechanism is defined by an OBJECT IDENTIFIER\
    \ and the\n   information needed to operate that mechanism is defined as\n   reliabilityMechContent\
    \ and is an OCTET STRING (as before).\n"
- title: B.5.6.1.  Rekey Reliability Mechanism None
  contents:
  - "B.5.6.1.  Rekey Reliability Mechanism None\n   In networks with adequate reliability,\
    \ it may not be necessary to use\n   a mechanism to improve reliability of the\
    \ rekey message.  For these\n   networks the ReliabilityMechanism NONE is appropriate.\n\
    \     id-reliabilityNone OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.5.1}\n     ReliabilityContentNone\
    \ ::= NULL\n"
- title: B.5.6.2.  Rekey Reliability Mechanism Resend
  contents:
  - "B.5.6.2.  Rekey Reliability Mechanism Resend\n   In networks with unknown or\
    \ questionable reliability, it may be\n   necessary to use a mechanism to improve\
    \ reliability of the Rekey\n   Message.  For these networks, the ReliabilityMechanism\
    \ RESEND is\n   potentially appropriate.  This mechanism has the GC/KS repeatedly\n\
    \   sending out the same message.\n     id-reliabilityResend OBJECT IDENTIFIER\
    \ ::= {1.3.6.1.5.5.12.5.2}\n     ReliabilityResendInfo ::= INTEGER\n   The INTEGER\
    \ value in the ReliabilityResendInfo indicates the number\n   of times the message\
    \ should be resent.\n"
- title: B.5.6.3.  Rekey Reliability Mechanism Post
  contents:
  - "B.5.6.3.  Rekey Reliability Mechanism Post\n   Another reliability mechanism\
    \ is to post the rekey message on some\n   service that will make it generally\
    \ available.  This is the\n   reliabilityPost method.\n     id-reliabilityPost\
    \ OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.5.3}\n     ReliabilityContentPost ::=\
    \ IA5String\n   The IA5String associated with ReliabilityPost is the identifier\
    \ of\n   the posting site and rekey message.\n"
- title: B.5.7.  Distributed Operation Policy
  contents:
  - "B.5.7.  Distributed Operation Policy\n   The policy dictating the relationships\
    \ between GC/KS and S-GC/KS for\n   distributed operations is defined as SubGCKSInfo.\
    \  It is defined as a\n   couple of a subGCKSScheme and some information relating\
    \ to that\n   Scheme in sGCKSContent.\n     SubGCKSInfo ::= SEQUENCE {\n     \
    \  subGCKSScheme OBJECT IDENTIFIER,\n       sGCKSContent  OCTET STRING\n     }\n"
- title: B.5.7.1.  No Distributed Operation
  contents:
  - "B.5.7.1.  No Distributed Operation\n   If the group is not to use S-GC/KS, then\
    \ that Scheme would be\n   SGCKSSchemeNone.\n     id-subGCKSSchemeNone OBJECT\
    \ IDENTIFIER ::= {1.3.6.1.5.5.12.6.1}\n     SGCKSNoneContent ::= NULL\n"
- title: B.5.7.2.  Autonomous Distributed Mode
  contents:
  - "B.5.7.2.  Autonomous Distributed Mode\n   If the group is to use S-GC/KS as defined\
    \ in the GSAKMP specification\n   as Autonomous mode, then that scheme would be\
    \ SGCKSAutonomous.\n     id-subGCKSSchemeAutonomous\n                        \
    \  OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.6.2}\n     SGCKSAutonomous ::= SEQUENCE\
    \ {\n       authSubs  GCKSName,\n       domain    OCTET STRING OPTIONAL\n    \
    \ }\n   The policy information needed for autonomous mode is a list of\n   authorized\
    \ S-GC/KSes and restrictions on who they may serve.  The\n   domain field representing\
    \ these restrictions is NULL for this\n   version.\n"
- title: B.6.  GSAKMPv1 Rekey Policy ASN.1 Module
  contents:
  - "B.6.  GSAKMPv1 Rekey Policy ASN.1 Module\n   GSAKMPv1RekeySA\n        {1.3.6.1.5.5.12.0.4}\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n     IMPORTS\n       GCKSName\n \
    \        FROM GSAKMPv1RegistrationSA  {1.3.6.1.5.5.12.0.2}\n       LifeDate\n\
    \         FROM PolicyToken  {1.3.6.1.5.5.12.0.1};\n   id-GSAKMPv1Rekey OBJECT\
    \ IDENTIFIER ::= {1.3.6.1.5.5.12.0.4}\n   GSAKMPv1RekeyInfo ::= SEQUENCE {\n \
    \    authorization RekeyAuthorization,\n     mechanism     RekeyMechanisms,\n\
    \     rekeyEventDef RekeyEventDef, -- tells the GCKS when to rekey\n     rekeyMethod\
    \   RekeyMethod,\n     rekeyInterval LifeDate,      -- member knows when to rejoin\n\
    \     reliability   Reliability,   -- what mech will be used to\n            \
    \                      --   increase the likelihood\n                        \
    \          --   of rekey delivery\n     subGCKSInfo   SubGCKSInfo    -- what subordinate\
    \ GCKS needs\n   }\n   RekeyAuthorization ::= GCKSName\n   RekeyMechanisms ::=\
    \ SEQUENCE {\n     sigAlgorithm  INTEGER,\n     hashAlgorithm INTEGER\n   }\n\
    \   RekeyEventDef ::= CHOICE {\n     none         [0] NULL,              -- never\
    \ rekey\n     timeOnly     [1] EXPLICIT LifeDate, -- rekey every x units\n   \
    \  event        [2] INTEGER,           -- rekey after x events\n     timeAndEvent\
    \ [3] TimeAndEvent\n   }\n   TimeAndEvent ::= SEQUENCE {\n     time  LifeDate,\
    \ -- rekey after x units of time OR\n     event INTEGER   -- x events occur\n\
    \   }\n   RekeyMethod ::= SEQUENCE {\n     rekeyMethodType OBJECT IDENTIFIER,\n\
    \     rekeyMethodInfo OCTET STRING\n   }\n   -- REKEY METHOD NONE --\n   id-rekeyNone\
    \ OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.4.1}\n   RekeyMethodNoneInfo ::= NULL\n\
    \   -- REKEY METHOD GSAKMP LKH --\n   id-rekeyMethodGSAKMPLKH OBJECT IDENTIFIER\
    \ ::= {1.3.6.1.5.5.12.4.2}\n   RekeyMethodGSAKMPLKHInfo ::= INTEGER -- gsakmp\
    \ type value for\n                                        --   wrapping mechanism\n\
    \   Reliability ::= SEQUENCE {\n     reliabilityMechanism   OBJECT IDENTIFIER,\n\
    \     reliabilityMechContent OCTET STRING\n   }\n   -- RELIABILITY MECHANISM NONE\
    \ --\n   id-reliabilityNone OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.5.1}\n   ReliabilityContentNone\
    \ ::= NULL\n   -- RELIABILITY MECHANISM RESEND --\n   id-reliabilityResend OBJECT\
    \ IDENTIFIER ::= {1.3.6.1.5.5.12.5.2}\n   ReliabilityResendInfo ::= INTEGER --\
    \ # of times rekey message should\n                                     --   be\
    \ resent\n   -- RELIABILITY MECHANISM POST --\n   id-reliabilityPost OBJECT IDENTIFIER\
    \ ::= {1.3.6.1.5.5.12.5.3}\n   ReliabilityContentPost ::= IA5String\n   SubGCKSInfo\
    \ ::= SEQUENCE {\n     subGCKSScheme OBJECT IDENTIFIER,\n     sGCKSContent  OCTET\
    \ STRING\n   }\n   id-subGCKSSchemeNone OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.6.1}\n\
    \   SGCKSNoneContent ::= NULL\n   id-subGCKSSchemeAutonomous OBJECT IDENTIFIER\
    \ ::= {1.3.6.1.5.5.12.6.2}\n   SGCKSAutonomous ::= SEQUENCE {\n     authSubs GCKSName,\n\
    \     domain   OCTET STRING OPTIONAL\n   }\n   END\n"
- title: Appendix C.  Data SA Policy
  contents:
  - "Appendix C.  Data SA Policy\n   The Data SA provides the data structures needed\
    \ for the protection\n   of the data exchanged between group members.  This appendix\
    \ defines\n   the data structures needed for a simple, generic security application\n\
    \   making use of fixed security mechanisms.  Such a Data SA requires\n   only\
    \ that keys delivered by the registration and rekey protocols be\n   mapped to\
    \ the service using them.\n"
- title: C.1.  Generic Data Policy
  contents:
  - "C.1.  Generic Data Policy\n   The Generic Data Policy has the following identifier:\n\
    \     id-genericDataSA OBJECT IDENTIFIER :: = {1.3.6.1.5.5.12.7.1}\n   If an authentication\
    \ mechanism is used within the security\n   application, the key identifier (kMKeyID)\
    \ used in the key management\n   protocol is given, as well as an optional key\
    \ expiration date.\n   Likewise, if an encryption mechanism is used within the\
    \ security\n   application, the encryption key identifier is given, as well as\
    \ an\n   optional key expiration date (keyExpirationDate).\n     GenericDataSAInfo\
    \ ::= SEQUENCE {\n       authentication [0] EXPLICIT KeyInfo OPTIONAL,\n     \
    \  encryption     [1] EXPLICIT KeyInfo OPTIONAL\n     }\n     KeyInfo ::= SEQUENCE{\n\
    \       kMKeyID           OCTET STRING,\n       keyExpirationDate LifeDate OPTIONAL\n\
    \     }\n"
- title: C.2.  Generic Data Policy ASN.1 Module
  contents:
  - "C.2.  Generic Data Policy ASN.1 Module\n   GenericDataSA\n       {1.3.6.1.5.5.12.0.5}\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- DATA APPLICATION:  Generic\n\
    \   -- This token specification is for data applications with\n   -- fixed security\
    \ mechanisms.  Such data applications only\n   -- need a mapping of management\
    \ protocol key identification\n   -- tags to security service.\n     IMPORTS\n\
    \       LifeDate\n         FROM PolicyToken {1.3.6.1.5.5.12.0.1}\n       KeyIdentifier\n\
    \         FROM PKIX1Implicit88 { iso(1) identified-organization(3)\n         \
    \  dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n           id-mod(0)\
    \ id-pkix1-implicit(19) };\n   id-genericDataSA OBJECT IDENTIFIER ::= {1.3.6.1.5.5.12.7.1}\n\
    \   GenericDataSAInfo ::= SEQUENCE {\n     authentication [0] EXPLICIT KeyInfo\
    \ OPTIONAL,\n     encryption     [1] EXPLICIT KeyInfo OPTIONAL\n   }\n   KeyInfo\
    \ ::= SEQUENCE{\n     kMKeyID           OCTET STRING,\n     keyExpirationDate\
    \ LifeDate OPTIONAL\n   }\n   END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andrea Colegrove\n   SPARTA, Inc.\n   7110 Samuel Morse\
    \ Drive\n   Columbia, MD 21046\n   Phone: (443) 430-8014\n   Fax:   (443) 430-8163\n\
    \   EMail: acc@sparta.com\n   Hugh Harney\n   SPARTA, Inc.\n   7110 Samuel Morse\
    \ Drive\n   Columbia, MD 21046\n   Phone: (443) 430-8032\n   Fax:   (443) 430-8181\n\
    \   EMail: hh@sparta.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
