- title: __initial_text__
  contents:
  - "                     Definitions of Managed Objects\n                  for Circuit\
    \ to Interface Translation\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines an extension of the Management Information Base\n\
    \   (MIB) for use with network management protocols in TCP/IP-based\n   internets.\
    \  In particular, it defines objects for managing the\n   insertion of interesting\
    \ Circuit Interfaces into the ifTable.  This\n   is important for circuits that\
    \ must be used within other MIB modules\n   which require an ifEntry.  It allows\
    \ for integrated monitoring of\n   circuits as well as routing to circuits using\
    \ unaltered, pre-existing\n   MIB modules.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. The SNMP Management Framework ...............................\
    \    2\n   2. Conventions .................................................  \
    \  3\n   3. Overview ....................................................    3\n\
    \   3.1. Circuit Concepts ..........................................    4\n  \
    \ 3.2. Theory of Operation .......................................    4\n   3.2.1.\
    \ Creation Process ........................................    4\n   3.2.2. Destruction\
    \ Process .....................................    5\n   3.2.2.1. Manual Row Destruction\
    \ ................................    5\n   3.2.2.2. Automatic Row Destruction\
    \ .............................    5\n   3.2.3. Modification Process ....................................\
    \    5\n   3.2.4. Persistence of Data .....................................  \
    \  5\n   4. Relation to Other MIB Modules ...............................    6\n\
    \   4.1. Frame Relay DTE MIB .......................................    6\n  \
    \ 4.2. Frame Relay Service MIB ...................................    6\n   4.3.\
    \ ATM MIB ...................................................    6\n   4.4. Interfaces\
    \ Group MIB ......................................    6\n   4.4.1. Interfaces\
    \ Table (ifTable, ifXtable) ....................    6\n   4.4.2. Stack Table (ifStackTable)\
    \ ..............................    9\n   4.5. Other MIB Modules .........................................\
    \   11\n   5. Structure of the MIB Module .................................  \
    \ 11\n   5.1. ciCircuitTable ............................................   11\n\
    \   5.2. ciIfMapTable ..............................................   11\n  \
    \ 6. Object Definitions ..........................................   11\n   7.\
    \ Acknowledgments .............................................   19\n   8. References\
    \ ..................................................   19\n   9. Security Considerations\
    \ .....................................   21\n   10. IANA Considerations ........................................\
    \   21\n   11. Authors' Addresses .........................................  \
    \ 22\n   12. Full Copyright Statement ...................................   23\n"
- title: 1.  The SNMP Management Framework
  contents:
  - "1.  The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n   o  An overall architecture, described\
    \ in RFC 2571 [1].\n   o  Mechanisms for describing and naming objects and events\
    \ for the\n      purpose of management.  The first version of this Structure of\n\
    \      Management Information (SMI) is called SMIv1 and described in STD\n   \
    \   16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215 [4].  The\n      second\
    \ version, called SMIv2, is described in STD 58, RFC 2578\n      [5], RFC 2579\
    \ [6] and RFC 2580 [7].\n   o  Message protocols for transferring management information.\
    \  The\n      first version of the SNMP message protocol is called SNMPv1 and\n\
    \      described in STD 15, RFC 1157 [8].  A second version of the SNMP\n    \
    \  message protocol, which is not an Internet standards track\n      protocol,\
    \ is called SNMPv2c and described in RFC 1901 [9] and RFC\n      1906 [10].  The\
    \ third version of the message protocol is called\n      SNMPv3 and described\
    \ in RFC 1906 [10], RFC 2572 [11] and RFC 2574\n      [12].\n   o  Protocol operations\
    \ for accessing management information.  The\n      first set of protocol operations\
    \ and associated PDU formats is\n      described in STD 15, RFC 1157 [8].  A second\
    \ set of protocol\n      operations and associated PDU formats is described in\
    \ RFC 1905\n      [13].\n   o  A set of fundamental applications described in\
    \ RFC 2573 [14] and\n      the view-based access control mechanism described in\
    \ RFC 2575\n      [15].\n   A more detailed introduction to the current SNMP Management\
    \ Framework\n   can be found in RFC 2570 [16].\n   Managed objects are accessed\
    \ via a virtual information store, termed\n   the Management Information Base\
    \ or MIB.  Objects in the MIB are\n   defined using the mechanisms defined in\
    \ the SMI.\n   This memo specifies a MIB module that is compliant to the SMIv2.\
    \  A\n   MIB conforming to the SMIv1 can be produced through the appropriate\n\
    \   translations.  The resulting translated MIB must be semantically\n   equivalent,\
    \ except where objects or events are omitted because no\n   translation is possible\
    \ (use of Counter64).  Some machine readable\n   information in SMIv2 will be\
    \ converted into textual descriptions in\n   SMIv1 during the translation process.\
    \  However, this loss of machine\n   readable information is not considered to\
    \ change the semantics of the\n   MIB.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, NOT RECOMMENDED, MAY, and OPTIONAL, when\n\
    \   they appear in this document, are to be interpreted as described in\n   RFC\
    \ 2119 [21].\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   This MIB module addresses the concept of inserting circuits,\
    \ which\n   are potentially virtual, into the ifTable.  There are multiple\n \
    \  reasons to allow circuits to be added to the ifTable.  The most\n   prevalent\
    \ of which are the standard routing MIB tables such as the\n   ipCidrRouteTable\
    \ (IP-FORWARD-MIB) and the ipNetToMediaTable (IP-MIB)\n   act on the ifIndex and\
    \ the RMON MIBs (RMON-MIB and RMON2-MIB as\n   defined in RFC 2819 [23] and RFC\
    \ 2021 [19]) require the use of an\n   ifIndex a DataSource.\n   There is a further\
    \ need to potentially monitor or manage a circuit\n   based on the directional\
    \ flow of traffic going through it.  For\n   instance, monitoring of protocols\
    \ passed on a circuit using RMON-II\n   (RFC 2021 [19]) does not currently capture\
    \ the direction of the flow.\n   This MIB module provides the capability to define\
    \ an interface based\n   on the specific direction of the flow.\n   This section\
    \ provides an overview and background of how to use this\n   MIB module.\n"
- title: 3.1.  Circuit Concepts
  contents:
  - "3.1.  Circuit Concepts\n   There are multiple MIB modules that define circuits.\
    \  Three commonly\n   used MIB modules are FRAME-RELAY-DTE-MIB (RFC 2115) [20],\
    \ FRNETSERV-\n   MIB (RFC 2954) [18], and ATM-MIB (RFC 2515) [22].  These define\n\
    \   management objects for frame relay DTEs, frame relay services, and\n   ATM\
    \ respectively.  Each of these MIB modules contain the ability to\n   add or delete\
    \ circuits;  however, none create a specific ifEntry for\n   a circuit.  The reason\
    \ for this is that there are potentially\n   multiple circuits and not every circuit\
    \ needs to be managed as an\n   individual interface.  For example, not every\
    \ circuit on a device\n   needs to be monitored with RMON and not every circuit\
    \ needs to be\n   included as an individual circuit for routing.  Further, the\n\
    \   Interfaces Group MIB (RFC 2863) [17] strongly recommends that\n   conceptual\
    \ rows not be added to the ifTable for virtual circuits.\n   The rationale for\
    \ creating conceptual rows in the ifTable for these\n   circuits is that there\
    \ is a need for their use in either management\n   of routing or monitoring of\
    \ data.  Both of these functions require\n   mapping to an ifIndex.\n   This MIB\
    \ module is designed such that only those circuits that\n   require an ifIndex\
    \ need be added to the ifTable.  This prevents\n   over-populating the ifTable\
    \ with useless or otherwise unused indices.\n   While this document often refers\
    \ to ATM and frame relay, it is not\n   specifically designed for only those types\
    \ of circuits.  Any circuit\n   that is defined in a MIB module but does not have\
    \ its own ifIndex MAY\n   be added with this MIB module.\n"
- title: 3.2.  Theory of Operation
  contents:
  - '3.2.  Theory of Operation

    '
- title: 3.2.1.  Creation Process
  contents:
  - "3.2.1.  Creation Process\n   In some cases, devices will automatically populate\
    \ the rows of\n   ciCircuitTable as circuits are created or discovered.  However,\
    \ in\n   many cases, it may be necessary for a network manager to manually\n \
    \  create rows.\n   Manual creation of rows requires the following steps:\n  \
    \ 1) Locate or create the circuit that is to be added on the device.\n   2) Create\
    \ a row in ciCircuitTable for each flow type that is\n      required.\n   The\
    \ first step above requires some knowledge of the circuits that\n   exist on a\
    \ device.  Typically, logical ports have entries in the\n   ifTable.  If, for\
    \ example, the ifType for the logical port is\n   frameRelay(32), the circuits\
    \ can be located in the frCircuitTable of\n   the Frame Relay DTE MIB (FRAME-RELAY-DTE-MIB)\
    \ [18].  If, as another\n   example, the ifType for the logical port is frameRelayService(44),\n\
    \   the circuits can be located in the frPVCEndptTable of the Frame Relay\n  \
    \ Service MIB (FRNETSERV-MIB) [20].  If, as a final example, the ifType\n   for\
    \ the logical port is aal5(49), the circuits can be located in the\n   aal5VccTable\
    \ of the ATM MIB (ATM-MIB) [22].  An entry describing the\n   circuit MUST exist\
    \ in some table prior to creating a row in\n   ciCircuitTable.  The object identifier\
    \ that MUST be used in the\n   circuit definition is the lexicographically smallest\
    \ accessible OID\n   that fully describes the the circuit.\n"
- title: 3.2.2.  Destruction Process
  contents:
  - '3.2.2.  Destruction Process

    '
- title: 3.2.2.1.  Manual Row Destruction
  contents:
  - "3.2.2.1.  Manual Row Destruction\n   Manual row destruction is straight forward.\
    \  Any row can be destroyed\n   and the resources allocated to it are freed by\
    \ setting the value of\n   its status object (ciCircuitStatus) to destroy(6).\
    \  It should be\n   noted that when ciCircuitStatus is set to destroy(6) all associated\n\
    \   rows in the ifTable and in ciIfMapTable will also be destroyed.  This\n  \
    \ process MAY trigger further row destruction in other tables as well.\n"
- title: 3.2.2.2.  Automatic Row Destruction
  contents:
  - "3.2.2.2.  Automatic Row Destruction\n   Rows in the tables MAY be destroyed automatically\
    \ based on the\n   existence of the circuit on which they rely.  When a circuit\
    \ no\n   longer exists in the device, the data in the tables has no relation\n\
    \   to anything known on the network.  For this reason, rows MUST be\n   removed\
    \ from this table as soon as it is discovered that the\n   associated circuits\
    \ no longer exist.  The effects of automatic row\n   destruction are the same\
    \ as manual row destruction.\n"
- title: 3.2.3.  Modification Process
  contents:
  - "3.2.3.  Modification Process\n   Since no objects in the MIB module can be changed\
    \ once rows are\n   active, there are no modification caveats.\n"
- title: 3.2.4.  Persistence of Data
  contents:
  - "3.2.4.  Persistence of Data\n   Each row in the tables of this MIB module relies\
    \ on information from\n   other MIB modules.  The rules for persistence of the\
    \ data SHOULD\n   follow the same rules as those of the underlying MIB module.\
    \  For\n   example, if the circuit defined by ciCircuitObject would normally be\n\
    \   stored in non-volatile memory, then the ciCircuitEntry SHOULD also be\n  \
    \ non-volatile.\n"
- title: 4.  Relation to Other MIB Modules
  contents:
  - '4.  Relation to Other MIB Modules

    '
- title: 4.1.  Frame Relay DTE MIB
  contents:
  - "4.1.  Frame Relay DTE MIB\n   There is no required relation to the Frame Relay\
    \ DTE MIB beyond the\n   fact that rows in the frCircuitTable MAY be referenced.\
    \  However, if\n   frCircuitLogicalIfIndex is being used to represent the same\n\
    \   information as a ciCircuitEntry with a value of ciCircuitFlow equal\n   to\
    \ both(3), the implementation MAY use the same ifIndex.\n"
- title: 4.2.  Frame Relay Service MIB
  contents:
  - "4.2.  Frame Relay Service MIB\n   There is no explicit relation to the Frame\
    \ Relay Service MIB beyond\n   the fact that a rows in the frPVCEndptTable MAY\
    \ be referenced.\n"
- title: 4.3.  ATM MIB
  contents:
  - "4.3.  ATM MIB\n   There is no explicit relation to the ATM MIB beyond the fact\
    \ that\n   rows in multiple tables may be referenced.\n"
- title: 4.4.  Interfaces Group MIB
  contents:
  - '4.4.  Interfaces Group MIB

    '
- title: 4.4.1.  Interfaces Table (ifTable, ifXtable)
  contents:
  - "4.4.1.  Interfaces Table (ifTable, ifXtable)\n   The following specifies how\
    \ the Interfaces Group defined in the IF-\n   MIB will be used for the management\
    \ of interfaces created by this MIB\n   module.\n   Values of specific ifTable\
    \ objects for circuit interfaces are as\n   follows:\n   Object Name    Value\
    \ of Object\n   ===========    =====================================================\n\
    \   ifIndex        Each entry in the circuit table is represented by an\n    \
    \              ifEntry.  The value of ifIndex is defined by the agent\n      \
    \            such that it complies with any internal numbering\n             \
    \     scheme.\n   ifType         The value of ifType is specific to the type of\
    \ circuit\n                  desired.  For example, the value for frame relay\n\
    \                  virtual circuits is frDlciEndPt(193) and the value for\n  \
    \                ATM virtual circuits is atmVciEndPt(194).  If the\n         \
    \         circuit is to be used in RMON, propVirtual(53) SHOULD\n            \
    \      NOT be used.\n   ifMtu          Set to the size in octets of the largest\
    \ packet, frame\n                  or PDU supported on the circuit.  If this is\
    \ not known\n                  to the ifMtu object shall be set to zero.  If the\n\
    \                  circuit is not modeled as a packet-oriented interface,\n  \
    \                this object SHOULD NOT be supported and result in\n         \
    \         noSuchInstance.\n   ifSpeed        The peak bandwidth in bits per second\
    \ available for\n                  use.  This will equal either the ifSpeed of\
    \ the\n                  logical link if policing is not enforced or the\n   \
    \               maximum information rate otherwise.  If neither is\n         \
    \         known, the ifSpeed object shall be set to zero.\n   ifPhysAddress  This\
    \ will always be an octet string of zero length.\n   ifInOctets     The number\
    \ of octets received by the network (ingress)\n                  for this circuit.\
    \  This counter should count only\n                  octets included the header\
    \ information and user data.\n                  If the device does not support\
    \ statistics on the\n                  circuit, this object MUST NOT be supported\
    \ and result\n                  in noSuchInstance.\n   ifInUcastPkts  The unerrored\
    \ number of frames, packets or PDUs\n                  received by the network\
    \ (ingress) for this circuit.\n                  If the device does not support\
    \ statistics on the\n                  circuit, this object MUST NOT be supported\
    \ and result\n                  in noSuchInstance.\n   ifInDiscards   The number\
    \ of received frames, packets or PDUs for\n                  this circuit discarded\
    \ due to ingress buffer\n                  congestion and traffic policing.  If\
    \ the device does\n                  not support statistics on the circuit, this\
    \ object\n                  MUST NOT be supported and result in noSuchInstance.\n\
    \   ifInErrors     The number of received frames, packets or PDUs for\n      \
    \            this circuit that are discarded because of an error.\n          \
    \        If the device does not support statistics on the\n                  circuit,\
    \ this object MUST NOT be supported and result\n                  in noSuchInstance.\n\
    \   ifOutOctets    The number of octets sent by the network (egress) for\n   \
    \               this circuit.  This counter should count only octets\n       \
    \           included the header information and user data.  If the\n         \
    \         device does not support statistics on the circuit,\n               \
    \   this object MUST NOT be supported and result in\n                  noSuchInstance.\n\
    \   ifOutUcastpkts The number of unerrored frames, packets or PDUs sent\n    \
    \              by the network (egress) for this circuit.  If the\n           \
    \       device does not support statistics on the circuit,\n                 \
    \ this object MUST NOT be supported and result in\n                  noSuchInstance.\n\
    \   ifOutDiscards  The number of frames, packets or PDUs discarded in the\n  \
    \                egress direction for this circuit.  Possible reasons\n      \
    \            are as follows: policing, congestion.  If the device\n          \
    \        does not support statistics on the circuit, this\n                  object\
    \ MUST NOT be supported and result in\n                  noSuchInstance.\n   ifOutErrors\
    \    The number of frames, packets or PDUs discarded for\n                  this\
    \ circuit in the egress direction because of an\n                  error.  If\
    \ the device does not support statistics on\n                  the circuit, this\
    \ object MUST NOT be supported and\n                  result in noSuchInstance.\n\
    \   ifInBroadcastPkts\n                  If the device does not support statistics\
    \ on the\n                  circuit, this object MUST NOT be supported and result\n\
    \                  in noSuchInstance.\n   ifOutBroadcastPkts\n               \
    \   If the device does not support Broadcast packets on\n                  the\
    \ circuit, this object should not be supported and\n                  result in\
    \ noSuchInstance.\n   ifLinkUpDownTrapEnable\n                  Set to false(2).\
    \  Circuits often have a predefined\n                  notification mechanism.\
    \  In such instances, the number\n                  of notification sent would\
    \ be doubled if this were\n                  enabled.\n   ifPromiscuousMode\n\
    \                  Set to false(2).  If the circuit is not modeled as a\n    \
    \              packet-oriented interface, this object SHOULD NOT be\n        \
    \          supported and result in noSuchInstance.\n   ifConnectorPresent\n  \
    \                Set to false(2).\n   All other values are supported as stated\
    \ in the IF-MIB documentation.\n"
- title: 4.4.2.  Stack Table (ifStackTable)
  contents:
  - "4.4.2.  Stack Table (ifStackTable)\n   This section describes by example how\
    \ to use ifStackTable to\n   represent the relationship between circuit and logical\
    \ link\n   interfaces.\n   Example 1: Circuits (C) on a frame relay logical link.\n\
    \        +---+  +---+  +---+\n        | C |  | C |  | C |\n        +-+-+  +-+-+\
    \  +-+-+\n          |      |      |\n      +---+------+------+---+\n      | Frame\
    \ Relay Service |\n      +----------+----------+\n                 |\n      +----------+----------+\n\
    \      |   Physical Layer    |\n      +---------------------+\n   The assignment\
    \ of the index values could for example be (for a V35\n   physical interface):\n\
    \         ifIndex  Description\n         =======  ===========\n            1 \
    \    frDlciEndPt       (type 193)\n            2     frDlciEndPt       (type 193)\n\
    \            3     frDlciEndPt       (type 193)\n            4     frameRelayService\
    \ (type 44)\n            5     v35               (type 33)\n   The ifStackTable\
    \ is then used to show the relationships between each\n   interface.\n       \
    \  HigherLayer   LowerLayer\n         ===========   ==========\n             \
    \ 0             1\n              0             2\n              0            \
    \ 3\n              1             4\n              2             4\n          \
    \    3             4\n              4             5\n              5         \
    \    0\n   In the above example the frame relay logical link could just as\n \
    \  easily be of type frameRelay(32) instead.\n   Example 2: Circuits (C) on a\
    \ AAL5 logical link.\n           +---+  +---+  +---+\n           | C |  | C |\
    \  | C |\n           +-+-+  +-+-+  +-+-+\n             |      |      |\n     \
    \    +---+------+------+---+\n         |      AAL5 Layer     |\n         +----------+----------+\n\
    \                    |\n         +----------+----------+\n         |      ATM\
    \ Layer      |\n         +---------------------+\n                    |\n    \
    \     +----------+----------+\n         |   Physical Layer    |\n         +---------------------+\n\
    \   The assignment of the index values could for example be (for a DS3\n   physical\
    \ interface):\n         ifIndex  Description\n         =======  ===========\n\
    \            1     atmVciEndPt (type 194)\n            2     atmVciEndPt (type\
    \ 194)\n            3     atmVciEndPt (type 194)\n            4     aal5     \
    \   (type 49)\n            5     atm         (type 37)\n            6     ds3\
    \         (type 30)\n   The ifStackTable is then used to show the relationships\
    \ between each\n   interface.\n         HigherLayer   LowerLayer\n         ===========\
    \   ==========\n              0             1\n              0             2\n\
    \              0             3\n              1             4\n              2\
    \             4\n              3             4\n              4             5\n\
    \              5             6\n              6             0\n"
- title: 4.5.  Other MIB Modules
  contents:
  - "4.5.  Other MIB Modules\n   There is no explicit relation to any other media\
    \ specific MIB module\n   beyond the fact that rows in multiple tables may be\
    \ referenced.\n"
- title: 5.  Structure of the MIB Module
  contents:
  - "5.  Structure of the MIB Module\n   The CIRCUIT-IF-MIB consists of the following\
    \ components:\n   o  ciCircuitTable\n   o  ciIfMapTable\n   Refer to the compliance\
    \ statement defined within for a definition of\n   what objects MUST be implemented.\n"
- title: 5.1.  ciCircuitTable
  contents:
  - "5.1.  ciCircuitTable\n   The ciCircuitTable is the central control table for\
    \ operations of the\n   Circuit Interfaces MIB.  It provides a means of mapping\
    \ a circuit to\n   its ifIndex as well as forcing the insertion of an ifIndex\
    \ into the\n   ifTable.  The agent is responsible for managing the ifIndex itself\n\
    \   such that no device dependent indexing scheme is violated.\n   A row in this\
    \ table MUST exist in order for a row to exist in any\n   other table in this\
    \ MIB module.\n"
- title: 5.2.  ciIfMapTable
  contents:
  - "5.2.  ciIfMapTable\n   This table maps the ifIndex back to the circuit that it\
    \ is associated\n   with.\n"
- title: 6.  Object Definitions
  contents:
  - '6.  Object Definitions

    '
- title: CIRCUIT-IF-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'CIRCUIT-IF-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE,\n    mib-2, Gauge32              \
    \            FROM SNMPv2-SMI\n    TEXTUAL-CONVENTION, RowStatus,\n    TimeStamp,\
    \ RowPointer, StorageType      FROM SNMPv2-TC\n    MODULE-COMPLIANCE, OBJECT-GROUP\
    \         FROM SNMPv2-CONF\n    ifIndex, InterfaceIndex                 FROM IF-MIB;\n\
    \    circuitIfMIB MODULE-IDENTITY\n        LAST-UPDATED \"200201030000Z\" -- January\
    \ 3, 2002\n        ORGANIZATION \"IETF Frame Relay Service MIB Working Group\"\
    \n        CONTACT-INFO\n          \"IETF Frame Relay Service MIB (frnetmib) Working\
    \ Group\n           WG Charter:    http://www.ietf.org/html.charters/\n      \
    \                           frnetmib-charter.html\n           WG-email:      frnetmib@sunroof.eng.sun.com\n\
    \           Subscribe:     frnetmib-request@sunroof.eng.sun.com\n           Email\
    \ Archive: ftp://ftp.ietf.org/ietf-mail-archive/frnetmib\n           Chair:  \
    \    Andy Malis\n                       Vivace Networks\n           Email:   \
    \   Andy.Malis@vivacenetworks.com\n           WG editor:  Robert Steinberger\n\
    \                       Paradyne Networks and\n                       Fujitsu\
    \ Network Communications\n           Email:      robert.steinberger@fnc.fujitsu.com\n\
    \           Co-author:  Orly Nicklass\n                       RAD Data Communications\
    \ Ltd.\n           EMail:      Orly_n@rad.co.il\"\n        DESCRIPTION\n     \
    \       \"The MIB module to allow insertion of selected circuit into\n       \
    \      the ifTable.\"\n        REVISION \"200201030000Z\" -- January 3, 2002\n\
    \        DESCRIPTION\n            \"Initial version, published as RFC 3201\"\n\
    \        ::= { mib-2 94 }\n    -- Textual Conventions\n    CiFlowDirection ::=\
    \ TEXTUAL-CONVENTION\n        STATUS  current\n        DESCRIPTION\n         \
    \   \"The direction of data flow thru a circuit.\n                transmit(1)\
    \ - Only transmitted data\n                receive(2)  - Only received data\n\
    \                both(3)     - Both transmitted and received data.\"\n       \
    \ SYNTAX  INTEGER {\n                  transmit(1),\n                  receive(2),\n\
    \                  both(3)\n                }\n    ciObjects      OBJECT IDENTIFIER\
    \ ::= { circuitIfMIB 1 }\n    ciCapabilities OBJECT IDENTIFIER ::= { circuitIfMIB\
    \ 2 }\n    ciConformance  OBJECT IDENTIFIER ::= { circuitIfMIB 3 }\n    -- The\
    \ Circuit Interface Circuit Table\n    --\n    -- This table is used to define\
    \ and display the circuits that\n    -- are added to the ifTable.  It maps circuits\
    \ to their respective\n    -- ifIndex values.\n    ciCircuitTable  OBJECT-TYPE\n\
    \        SYNTAX      SEQUENCE OF CiCircuitEntry\n        MAX-ACCESS  not-accessible\n\
    \        STATUS      current\n        DESCRIPTION\n            \"The Circuit Interface\
    \ Circuit Table.\"\n        ::= { ciObjects 1 }\n    ciCircuitEntry OBJECT-TYPE\n\
    \        SYNTAX      CiCircuitEntry\n        MAX-ACCESS  not-accessible\n    \
    \    STATUS      current\n        DESCRIPTION\n            \"An entry in the Circuit\
    \ Interface Circuit Table.\"\n        INDEX    { ciCircuitObject, ciCircuitFlow\
    \ }\n        ::= { ciCircuitTable 1 }\n    CiCircuitEntry ::=\n        SEQUENCE\
    \ {\n            --\n            -- Index Control Variables\n            --\n\
    \            ciCircuitObject      RowPointer,\n            ciCircuitFlow     \
    \   CiFlowDirection,\n            ciCircuitStatus      RowStatus,\n          \
    \  --\n            -- Data variables\n            --\n            ciCircuitIfIndex\
    \     InterfaceIndex,\n            ciCircuitCreateTime  TimeStamp,\n         \
    \   --\n            -- Data Persistence\n            --\n            ciCircuitStorageType\
    \ StorageType\n        }\n    ciCircuitObject OBJECT-TYPE\n        SYNTAX    \
    \  RowPointer\n        MAX-ACCESS  not-accessible\n        STATUS      current\n\
    \        DESCRIPTION\n            \"This value contains the RowPointer that uniquely\n\
    \             describes the circuit that is to be added to this table.\n     \
    \        Any RowPointer that will force the size of OBJECT\n             IDENTIFIER\
    \ of the row to grow beyond the legal limit\n             MUST be rejected.\n\
    \             The purpose of this object is to point a network manager\n     \
    \        to the table in which the circuit was created as well as\n          \
    \   define the circuit on which the interface is defined.\n             Valid\
    \ tables for this object include the frCircuitTable\n             from the Frame\
    \ Relay DTE MIB(FRAME-RELAY-DTE-MIB), the\n             frPVCEndptTable from the\
    \ Frame Relay Service MIB\n             (FRNETSERV-MIB), and the aal5VccTable\
    \ from the ATM MIB\n             (ATM MIB).  However, including circuits from\
    \ other MIB\n             tables IS NOT prohibited.\"\n        ::= { ciCircuitEntry\
    \ 1 }\n    ciCircuitFlow OBJECT-TYPE\n        SYNTAX      CiFlowDirection\n  \
    \      MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The direction of data flow through the circuit for which\n    \
    \         the virtual interface is defined.  The following define\n          \
    \   the information that the virtual interface will report.\n                transmit(1)\
    \ - Only transmitted frames\n                receive(2)  - Only received frames\n\
    \                both(3)     - Both transmitted and received frames.\n       \
    \      It is recommended that the ifDescr of the circuit\n             interfaces\
    \ that are not both(3) SHOULD have text warning\n             the operators that\
    \ the particular interface represents\n             only half the traffic on the\
    \ circuit.\"\n        ::= { ciCircuitEntry 2 }\n    ciCircuitStatus OBJECT-TYPE\n\
    \        SYNTAX      RowStatus\n        MAX-ACCESS  read-create\n        STATUS\
    \      current\n        DESCRIPTION\n            \"The status of the current row.\
    \  This object is\n             used to add, delete, and disable rows in this\n\
    \             table.  When the status changes to active(1), a row\n          \
    \   will also be added to the interface map table below\n             and a row\
    \ will be added to the ifTable.  These rows\n             SHOULD not be removed\
    \ until the status is changed\n             from active(1).  The value of ifIndex\
    \ for the row that\n             is added to the ifTable is determined by the\
    \ agent\n             and MUST follow the rules of the ifTable.  The value\n \
    \            of ifType for that interface will be frDlciEndPt(193)\n         \
    \    for a frame relay circuit, atmVciEndPt(194) for an\n             ATM circuit,\
    \ or another ifType defining the circuit\n             type for any other circuit.\n\
    \             When this object is set to destroy(6), the associated\n        \
    \     row in the interface map table will be removed and the\n             ifIndex\
    \ will be removed from the ifTable.  Removing\n             the ifIndex MAY initiate\
    \ a chain of events that causes\n             changes to other tables as well.\n\
    \             The rows added to this table MUST have a valid object\n        \
    \     identifier for ciCircuitObject.  This means that the\n             referenced\
    \ object must exist and it must be in a table\n             that supports circuits.\n\
    \             The object referenced by ciCircuitObject MUST exist\n          \
    \   prior to transitioning a row to active(1).  If at any\n             point\
    \ the object referenced by ciCircuitObject does not\n             exist or the\
    \ row containing it is not in the active(1)\n             state, the status SHOULD\
    \ either age out the row or\n             report notReady(3).  The effects transitioning\
    \ from\n             active(1) to notReady(3) are the same as those caused\n \
    \            by setting the status to destroy(6).\n             Each row in this\
    \ table relies on information from other\n             MIB modules.  The rules\
    \ persistence of data SHOULD follow\n             the same rules as those of the\
    \ underlying MIB module.\n             For example, if the circuit defined by\
    \ ciCircuitObject\n             would normally be stored in non-volatile memory,\
    \ then\n             the row SHOULD also be non-volatile.\"\n        ::= { ciCircuitEntry\
    \ 3 }\n    ciCircuitIfIndex OBJECT-TYPE\n        SYNTAX      InterfaceIndex\n\
    \        MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The ifIndex that the agent assigns to this row.\"\n        ::=\
    \ { ciCircuitEntry 4 }\n    ciCircuitCreateTime OBJECT-TYPE\n        SYNTAX  \
    \    TimeStamp\n        MAX-ACCESS  read-only\n        STATUS      current\n \
    \       DESCRIPTION\n            \"This object returns the value of sysUpTime\
    \ at the time\n             the value of ciCircuitStatus last transitioned to\n\
    \             active(1).  If ciCircuitStatus has never been active(1),\n     \
    \        this object SHOULD return 0.\"\n        ::= { ciCircuitEntry 5 }\n  \
    \  ciCircuitStorageType OBJECT-TYPE\n        SYNTAX      StorageType\n       \
    \ MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The storage type used for this row.\"\n    ::= { ciCircuitEntry\
    \ 6 }\n    -- The Circuit Interface Map Table\n    --\n    -- This table maps\
    \ the ifIndex values that are assigned to\n    -- rows in the circuit table back\
    \ to the objects that define\n    -- the circuits.\n    ciIfMapTable  OBJECT-TYPE\n\
    \        SYNTAX      SEQUENCE OF CiIfMapEntry\n        MAX-ACCESS  not-accessible\n\
    \        STATUS      current\n        DESCRIPTION\n            \"The Circuit Interface\
    \ Map Table.\"\n        ::= { ciObjects 2 }\n    ciIfMapEntry OBJECT-TYPE\n  \
    \      SYNTAX      CiIfMapEntry\n        MAX-ACCESS  not-accessible\n        STATUS\
    \      current\n        DESCRIPTION\n            \"An entry in the Circuit Interface\
    \ Map Table.\"\n        INDEX    { ifIndex }\n        ::= { ciIfMapTable 1 }\n\
    \    CiIfMapEntry ::=\n        SEQUENCE {\n            --\n            -- Mapped\
    \ Object Variables\n            --\n            ciIfMapObject      RowPointer,\n\
    \            ciIfMapFlow        CiFlowDirection\n        }\n    ciIfMapObject\
    \ OBJECT-TYPE\n        SYNTAX      RowPointer\n        MAX-ACCESS  read-only\n\
    \        STATUS      current\n        DESCRIPTION\n            \"This value contains\
    \ the value of RowPointer that\n             corresponds to the current ifIndex.\"\
    \n        ::= { ciIfMapEntry 1 }\n    ciIfMapFlow   OBJECT-TYPE\n        SYNTAX\
    \      CiFlowDirection\n        MAX-ACCESS  read-only\n        STATUS      current\n\
    \        DESCRIPTION\n            \"The value contains the value of ciCircuitFlow\
    \ that\n             corresponds to the current ifIndex.\"\n        ::= { ciIfMapEntry\
    \ 2 }\n    -- Change tracking metrics\n    ciIfLastChange OBJECT-TYPE\n      \
    \  SYNTAX       TimeStamp\n        MAX-ACCESS   read-only\n        STATUS    \
    \   current\n        DESCRIPTION\n            \"The value of sysUpTime at the\
    \ most recent change to\n             ciCircuitStatus for any row in ciCircuitTable.\"\
    \n        ::= { ciObjects 3 }\n    ciIfNumActive      OBJECT-TYPE\n        SYNTAX\
    \         Gauge32\n        MAX-ACCESS     read-only\n        STATUS         current\n\
    \        DESCRIPTION\n            \"The number of active rows in ciCircuitTable.\"\
    \n        ::= { ciObjects 4 }\n    -- Conformance Information\n    ciMIBGroups\
    \      OBJECT IDENTIFIER ::= { ciConformance 1 }\n    ciMIBCompliances OBJECT\
    \ IDENTIFIER ::= { ciConformance 2 }\n    --\n    -- Compliance Statements\n \
    \   --\n    ciCompliance MODULE-COMPLIANCE\n        STATUS  current\n        DESCRIPTION\n\
    \            \"The compliance statement for SNMP entities\n             which\
    \ support of the Circuit Interfaces MIB module.\n             This group defines\
    \ the minimum level of support\n             required for compliance.\"\n    \
    \    MODULE -- this module\n            MANDATORY-GROUPS { ciCircuitGroup,\n \
    \                              ciIfMapGroup,\n                               ciStatsGroup\
    \ }\n            OBJECT      ciCircuitStatus\n            SYNTAX      INTEGER\
    \ { active(1) } -- subset of RowStatus\n            MIN-ACCESS  read-only\n  \
    \          DESCRIPTION\n               \"Row creation can be done outside of the\
    \ scope of\n                the SNMP protocol.  If this object is implemented\
    \ with\n                max-access of read-only, then the only value that MUST\n\
    \                be returned is active(1).\"\n            OBJECT      ciCircuitStorageType\n\
    \            MIN-ACCESS  read-only\n            DESCRIPTION\n               \"\
    It is legal to support ciCircuitStorageType as read-\n                only as\
    \ long as the value reported in consistent\n                with the actual storage\
    \ mechanism employed within the\n                agent.\"\n    ::= { ciMIBCompliances\
    \ 1 }\n    --\n    -- Units of Conformance\n    --\n    ciCircuitGroup  OBJECT-GROUP\n\
    \       OBJECTS {\n            ciCircuitStatus,\n            ciCircuitIfIndex,\n\
    \            ciCircuitCreateTime,\n            ciCircuitStorageType\n       }\n\
    \       STATUS  current\n       DESCRIPTION\n           \"A collection of required\
    \ objects providing\n            information from the circuit table.\"\n     \
    \  ::= { ciMIBGroups 1 }\n    ciIfMapGroup OBJECT-GROUP\n       OBJECTS {\n  \
    \          ciIfMapObject,\n            ciIfMapFlow\n       }\n       STATUS  current\n\
    \       DESCRIPTION\n           \"A collection of required objects providing\n\
    \            information from the interface map table.\"\n       ::= { ciMIBGroups\
    \ 2 }\n    ciStatsGroup OBJECT-GROUP\n       OBJECTS {\n            ciIfLastChange,\n\
    \            ciIfNumActive\n       }\n       STATUS  current\n       DESCRIPTION\n\
    \           \"A collection of statistical metrics used to help manage\n      \
    \      the ciCircuitTable.\"\n       ::= { ciMIBGroups 3 }\n"
- title: END
  contents:
  - 'END

    '
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This document was produced by the Frame Relay Service\
    \ MIB Working\n   Group.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1]  Harrington, D., Presuhn, R. and B. Wijnen, \"An Architecture\
    \ for\n        Describing SNMP Management Frameworks\", RFC 2571, April 1999.\n\
    \   [2]  Rose, M. and K. McCloghrie, \"Structure and Identification of\n     \
    \   Management Information for TCP/IP-based Internets\", STD 16, RFC\n       \
    \ 1155, May 1990.\n   [3]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\"\
    , STD 16,\n        RFC 1212, March 1991.\n   [4]  Rose, M., \"A Convention for\
    \ Defining Traps for use with the\n        SNMP\", RFC 1215, March 1991.\n   [5]\
    \  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M.\
    \ and S. Waldbusser, \"Structure of Management Information\n        Version 2\
    \ (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [6]  McCloghrie, K., Perkins, D.,\
    \ Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser, \"Textual\
    \ Conventions for SMIv2\", STD 58,\n        RFC 2579, April 1999.\n   [7]  McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser,\
    \ \"Conformance Statements for SMIv2\", STD\n        58, RFC 2580, April 1999.\n\
    \   [8]  Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n       \
    \ Network Management Protocol\", STD 15, RFC 1157, May 1990.\n   [9]  Case, J.,\
    \ McCloghrie, K., Rose, M. and S. Waldbusser,\n        \"Introduction to Community-based\
    \ SNMPv2\", RFC 1901, January\n        1996.\n   [10] Case, J., McCloghrie, K.,\
    \ Rose, M. and S. Waldbusser, \"Transport\n        Mappings for Version 2 of the\
    \ Simple Network Management Protocol\n        (SNMPv2)\", RFC 1906, January 1996.\n\
    \   [11] Case, J., Harrington, D., Presuhn, R. and B. Wijnen, \"Message\n    \
    \    Processing and Dispatching for the Simple Network Management\n        Protocol\
    \ (SNMP)\", RFC 2572, April 1999.\n   [12] Blumenthal, U. and B. Wijnen, \"User-based\
    \ Security Model (USM)\n        for version 3 of the Simple Network Management\
    \ Protocol\n        (SNMPv3)\", RFC 2574, April 1999.\n   [13] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser, \"Protocol\n        Operations for Version 2\
    \ of the Simple Network Management\n        Protocol (SNMPv2)\", RFC 1905, January\
    \ 1996.\n   [14] Levi, D., Meyer, P. and B. Stewart, \"SNMPv3 Applications\",\
    \ RFC\n        2573, April 1999.\n   [15] Wijnen, B., Presuhn, R. and K. McCloghrie,\
    \ \"View-based Access\n        Control Model (VACM) for the Simple Network Management\
    \ Protocol\n        (SNMP)\", RFC 2575, April 1999.\n   [16] Case, J., Mundy,\
    \ R., Partain, D. and B. Stewart, \"Introduction\n        to Version 3 of the\
    \ Internet-standard Network Management\n        Framework\", RFC 2570, April 1999.\n\
    \   [17] McCloghrie, K. and F. Kastenholz, \"The Interfaces Group MIB\",\n   \
    \     RFC 2863, June 2000.\n   [18] Rehbehn, K. and D. Fowler, \"Definitions of\
    \ Managed Objects for\n        Frame Relay Service\", RFC 2954, October 2000.\n\
    \   [19] Waldbusser, S., \"Remote Network Monitoring Management\n        Information\
    \ Base Version 2 using SMIv2\", RFC 2021, January 1997.\n   [20] Brown, C. and\
    \ F. Baker, \"Management Information Base for Frame\n        Relay DTEs Using\
    \ SMIv2\", RFC 2115, September 1997.\n   [21] Bradner, S., \"Key words for use\
    \ in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [22] Tesink, K., \"Definitions of Managed Objects for ATM Management\",\n\
    \        RFC 2515, February 1999.\n   [23] Waldbusser, S., \"Remote Network Monitoring\
    \ Management\n        Information Base\", RFC 2819, May 2000.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   There are a number of management objects defined\
    \ in this MIB that\n   have a MAX-ACCESS clause of read-write and/or read-create.\
    \  Such\n   objects may be considered sensitive or vulnerable in some network\n\
    \   environments.  The support for SET operations in a non-secure\n   environment\
    \ without proper protection can have a negative effect on\n   network operations.\n\
    \   SNMPv1 by itself is not a secure environment.  Even if the network\n   itself\
    \ is secure (for example by using IPSec), even then, there is no\n   control as\
    \ to who on the secure network is allowed to access and\n   GET/SET (read/change/create/delete)\
    \ the objects in this MIB.\n   It is recommended that the implementers consider\
    \ the security\n   features as provided by the SNMPv3 framework.  Specifically,\
    \ the use\n   of the User-based Security Model RFC 2274 [12] and the View-based\n\
    \   Access Control Model RFC 2275 [15] is recommended.\n   It is then a customer/user\
    \ responsibility to ensure that the SNMP\n   entity giving access to an instance\
    \ of this MIB, is properly\n   configured to give access to the objects only to\
    \ those principals\n   (users) that have legitimate rights to indeed GET or SET\n\
    \   (change/create/delete) them.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   New ifTypes defined specifically for use in this\
    \ MIB module SHOULD be\n   in the form of ***EndPt.  This is similar to frDlciEndPt(193)\
    \ and\n   atmVciEndPt(194) which are already defined.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Robert Steinberger\n   Fujitsu Network Communications\n\
    \   2801 Telecom Parkway\n   Richardson, TX 75082\n   Phone: 1-972-479-4739\n\
    \   EMail: robert.steinberger@fnc.fujitsu.com\n   Orly Nicklass, Ph.D\n   RAD\
    \ Data Communications Ltd.\n   12 Hanechoshet Street\n   Tel Aviv, Israel 69710\n\
    \   Phone: 972 3 7659969\n   EMail: Orly_n@rad.co.il\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
