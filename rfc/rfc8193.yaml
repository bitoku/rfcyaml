- title: __initial_text__
  contents:
  - '    Information Model for Large-Scale Measurement Platforms (LMAPs)

    '
- title: Abstract
  contents:
  - "Abstract\n   This Information Model applies to the Measurement Agent within an\n\
    \   LMAP framework.  As such, it outlines the information that is\n   configured\
    \ or preconfigured on the Measurement Agent or exists in\n   communications with\
    \ a Controller or Collector within an LMAP\n   framework.  The purpose of such\
    \ an Information Model is to provide a\n   protocol- and device-independent view\
    \ of the Measurement Agent that\n   can be implemented via one or more Control\
    \ and Report Protocols.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8193.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Notation  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  LMAP Information Model  . . . . . . . . . . . . . . . . .\
    \ . .   6\n     4.1.  Preconfiguration Information  . . . . . . . . . . . . .\
    \ .  10\n       4.1.1.  Definition of ma-preconfig-obj  . . . . . . . . . . .\
    \  11\n     4.2.  Configuration Information . . . . . . . . . . . . . . . .  12\n\
    \       4.2.1.  Definition of ma-config-obj . . . . . . . . . . . . .  13\n  \
    \   4.3.  Instruction Information . . . . . . . . . . . . . . . . .  14\n    \
    \   4.3.1.  Definition of ma-instruction-obj  . . . . . . . . . .  17\n      \
    \ 4.3.2.  Definition of ma-suppression-obj  . . . . . . . . . .  17\n     4.4.\
    \  Logging Information . . . . . . . . . . . . . . . . . . .  19\n       4.4.1.\
    \  Definition of ma-log-obj  . . . . . . . . . . . . . .  20\n     4.5.  Capability\
    \ and Status Information . . . . . . . . . . . .  21\n       4.5.1.  Definition\
    \ of ma-capability-obj . . . . . . . . . . .  21\n       4.5.2.  Definition of\
    \ ma-capability-task-obj  . . . . . . . .  21\n       4.5.3.  Definition of ma-status-obj\
    \ . . . . . . . . . . . . .  22\n       4.5.4.  Definition of ma-status-schedule-obj\
    \  . . . . . . . .  23\n       4.5.5.  Definition of ma-status-action-obj  . .\
    \ . . . . . . .  24\n       4.5.6.  Definition of ma-status-suppression-obj .\
    \ . . . . . .  26\n       4.5.7.  Definition of ma-status-interface-obj . . .\
    \ . . . . .  27\n     4.6.  Reporting Information . . . . . . . . . . . . . .\
    \ . . . .  28\n       4.6.1.  Definition of ma-report-obj . . . . . . . . . .\
    \ . . .  29\n       4.6.2.  Definition of ma-report-result-obj  . . . . . . .\
    \ . .  30\n       4.6.3.  Definition of ma-report-conflict-obj  . . . . . . .\
    \ .  32\n       4.6.4.  Definition of ma-report-table-obj . . . . . . . . . .\
    \  32\n       4.6.5.  Definition of ma-report-row-obj . . . . . . . . . . .  33\n\
    \     4.7.  Common Objects: Schedules . . . . . . . . . . . . . . . .  33\n  \
    \     4.7.1.  Definition of ma-schedule-obj . . . . . . . . . . . .  35\n    \
    \   4.7.2.  Definition of ma-action-obj . . . . . . . . . . . . .  36\n     4.8.\
    \  Common Objects: Channels  . . . . . . . . . . . . . . . .  37\n       4.8.1.\
    \  Definition of ma-channel-obj  . . . . . . . . . . . .  38\n     4.9.  Common\
    \ Objects: Task Configurations . . . . . . . . . . .  38\n       4.9.1.  Definition\
    \ of ma-task-obj . . . . . . . . . . . . . .  40\n       4.9.2.  Definition of\
    \ ma-option-obj . . . . . . . . . . . . .  40\n     4.10. Common Objects: Registry\
    \ Information  . . . . . . . . . .  41\n       4.10.1.  Definition of ma-registry-obj\
    \  . . . . . . . . . . .  41\n     4.11. Common Objects: Event Information . .\
    \ . . . . . . . . . .  41\n       4.11.1.  Definition of ma-event-obj . . . .\
    \ . . . . . . . . .  42\n       4.11.2.  Definition of ma-periodic-obj  . . .\
    \ . . . . . . . .  44\n       4.11.3.  Definition of ma-calendar-obj  . . . .\
    \ . . . . . . .  44\n       4.11.4.  Definition of ma-one-off-obj . . . . . .\
    \ . . . . . .  46\n       4.11.5.  Definition of ma-immediate-obj . . . . . .\
    \ . . . . .  47\n       4.11.6.  Definition of ma-startup-obj . . . . . . . .\
    \ . . . .  47\n       4.11.7.  Definition of ma-controller-lost-obj . . . . .\
    \ . . .  47\n       4.11.8.  Definition of ma-controller-connected-obj  . . .\
    \ . .  47\n   5.  Example Execution . . . . . . . . . . . . . . . . . . . . .\
    \ .  48\n   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .\
    \  49\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  50\n\
    \   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  50\n  \
    \   8.1.  Normative References  . . . . . . . . . . . . . . . . . .  50\n    \
    \ 8.2.  Informative References  . . . . . . . . . . . . . . . . .  51\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  52\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  53\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A large-scale measurement platform is a collection of components\
    \ that\n   work in a coordinated fashion to perform measurements from a large\n\
    \   number of vantage points.  A typical use case is the execution of\n   broadband\
    \ measurements [RFC7536].  The main components of a large-\n   scale measurement\
    \ platform are the Measurement Agents (MAs), the\n   Controller(s), and the Collector(s).\n\
    \   The MAs are the elements actually performing the measurements.  The\n   MAs\
    \ are controlled by exactly one Controller at a time, and the\n   Collectors gather\
    \ the results generated by the MAs.  In a nutshell,\n   the normal operation of\
    \ a large-scale measurement platform starts\n   with the Controller instructing\
    \ a set of one or more MAs to perform a\n   set of one or more Measurement Tasks\
    \ at a certain point in time.  The\n   MAs execute the instructions from a Controller,\
    \ and once they have\n   done so, they report the results of the measurements\
    \ to one or more\n   Collectors.  The overall framework for a large-scale measurement\n\
    \   platform as used in this document is described in detail in\n   [RFC7594].\n\
    \   A large-scale measurement platform involves basically three types of\n   protocols,\
    \ namely, a Control Protocol (or Protocols) between a\n   Controller and the MAs,\
    \ a Report Protocol (or Protocols) between the\n   MAs and the Collector(s), and\
    \ several measurement protocols between\n   the MAs and Measurement Peers (MPs),\
    \ used to actually perform the\n   measurements.  In addition, some information\
    \ is required to be\n   configured on the MA prior to any communication with a\
    \ Controller.\n   This document defines the Information Model for both the Control\
    \ and\n   Report Protocols along with Preconfiguration Information that is\n \
    \  required on the MA before communicating with the Controller, broadly\n   named\
    \ as the LMAP Information Model.  The measurement protocols are\n   out of the\
    \ scope of this document.\n   As defined in [RFC3444], the LMAP Information Model\
    \ defines the\n   concepts involved in a large-scale measurement platform at a\
    \ high\n   level of abstraction, independent of any specific implementation or\n\
    \   actual protocol used to exchange the information.  It is expected\n   that\
    \ the proposed Information Model can be used with different\n   protocols in different\
    \ measurement platform architectures and across\n   different types of MA devices\
    \ (e.g., home gateway, smartphone, PC, or\n   router).  A YANG data model implementing\
    \ the Information Model can be\n   found in [RFC8194].\n   The definition of an\
    \ Information Model serves a number of purposes:\n   1.  To guide the standardization\
    \ of one or more Control and Report\n       protocols and data models\n   2. \
    \ To enable high-level interoperability between different Control\n       and\
    \ Report Protocols by facilitating translation between their\n       respective\
    \ data models such that a Controller could instruct sub-\n       populations of\
    \ MAs using different protocols\n   3.  To form agreement of what information\
    \ needs to be held by an MA\n       and passed over the Control and Report interfaces\
    \ and support the\n       functionality described in the LMAP framework\n   4.\
    \  To enable existing protocols and data models to be assessed for\n       their\
    \ suitability as part of a large-scale measurement system\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Notation
  contents:
  - "3.  Notation\n   This document uses a notation similar to a programming language\
    \ to\n   define the properties of the objects of the Information Model.  An\n\
    \   optional property is enclosed by square brackets, [ ], and a list\n   property\
    \ is indicated by two numbers in angle brackets, <m..n>, where\n   m indicates\
    \ the minimal number of values, and n is the maximum.  The\n   symbol * for n\
    \ means no upper bound.\n   The object definitions use several base types that\
    \ are defined as\n   follows:\n   int         A type representing signed or unsigned\
    \ integer numbers.\n               This Information Model does not define a precision\
    \ nor\n               does it make a distinction between signed and unsigned\n\
    \               number ranges.  This type is also used to represent\n        \
    \       enumerations.\n   boolean     A type representing a boolean value.\n \
    \  string      A type representing a human-readable string consisting of\n   \
    \            a (possibly restricted) subset of Unicode and ISO/IEC\n         \
    \      10646 [ISO.10646] characters.\n   datetime    A type representing a date\
    \ and time using the Gregorian\n               calendar.  The datetime format\
    \ MUST conform to RFC 3339\n               [RFC3339].\n   uuid        A type representing\
    \ a Universally Unique IDentifier\n               (UUID) as defined in RFC 4122\
    \ [RFC4122].  The UUID values\n               are expected to be unique within\
    \ an installation of a\n               large-scale measurement system.\n   uri\
    \         A type representing a Uniform Resource Identifier as\n             \
    \  defined in STD 66 [RFC3986].\n   ip-address  A type representing an IP address.\
    \  This type supports\n               both IPv4 and IPv6 addresses.\n   counter\
    \     A non-negative integer that monotonically increases.\n               Counters\
    \ may have discontinuities, and they are not\n               expected to persist\
    \ across restarts.\n   credentials An opaque type representing credentials needed\
    \ by a\n               cryptographic mechanism to secure communication.  Data\n\
    \               models must expand this opaque type as needed and\n          \
    \     required by the security protocols utilized.\n   data        An opaque type\
    \ representing data obtained from\n               measurements.\n   Names of objects\
    \ are generally assumed to be unique within an\n   implementation.\n"
- title: 4.  LMAP Information Model
  contents:
  - "4.  LMAP Information Model\n   The information described herein relates to the\
    \ information stored,\n   received, or transmitted by a Measurement Agent as described\
    \ within\n   the LMAP framework [RFC7594].  As such, some subsets of this\n  \
    \ Information Model are applicable to the measurement Controller and\n   Collector\
    \ and to any device management system that preconfigures the\n   Measurement Agent.\
    \  The information described in these models will be\n   transmitted by protocols\
    \ using interfaces between the Measurement\n   Agent and such systems according\
    \ to a data model.\n   The Information Model is divided into six aspects.  Firstly,\
    \ the\n   grouping of information facilitates reader understanding.  Secondly,\n\
    \   the particular groupings chosen are expected to map to different\n   protocols\
    \ or different transmissions within those protocols.\n   1.  Preconfiguration\
    \ Information.  Information preconfigured on the\n       Measurement Agent prior\
    \ to any communication with other\n       components of the LMAP architecture\
    \ (i.e., the Controller, the\n       Collector, and Measurement Peers), specifically\
    \ detailing how to\n       communicate with a Controller and whether the device\
    \ is enabled\n       to participate as an MA.\n   2.  Configuration Information.\
    \  Update of the Preconfiguration\n       Information during the registration\
    \ of the MA or subsequent\n       communication with the Controller, along with\
    \ the configuration\n       of further parameters about the MA (rather than the\
    \ Measurement\n       Tasks it should perform) that were not mandatory for the\
    \ initial\n       communication between the MA and a Controller.\n   3.  Instruction\
    \ Information.  Information that is received by the MA\n       from the Controller\
    \ pertaining to the Measurement Tasks that\n       should be executed.  This includes\
    \ the Task execution Schedules\n       (other than the Controller communication\
    \ Schedule supplied as\n       Configuration or Preconfiguration Information)\
    \ and related\n       information such as the Task Configuration, communication\n\
    \       Channels to Collectors, and Event information.  It also includes\n   \
    \    Task Suppression information that is used to override normal Task\n     \
    \  execution.\n   4.  Logging Information.  Information transmitted from the MA\
    \ to the\n       Controller detailing the results of any configuration operations\n\
    \       along with error and Status Information from the operation of the\n  \
    \     MA.\n   5.  Capability and Status Information.  Information on the general\n\
    \       status and capabilities of the MA.  For example, the set of\n       measurements\
    \ that are supported on the device.\n   6.  Reporting Information.  Information\
    \ transmitted from the MA to\n       one or more Collectors, including measurement\
    \ results and the\n       context in which they were conducted.\n   In addition,\
    \ the MA may hold further information not described\n   herein, which may be optionally\
    \ transferred to or from other systems\n   including the Controller and Collector.\
    \  One example of information\n   in this category is subscriber or line information\
    \ that may be\n   extracted by a Task and reported by the MA in the reporting\n\
    \   communication to a Collector.\n   It should also be noted that the MA may\
    \ be in communication with\n   other management systems that may be responsible\
    \ for configuring and\n   retrieving information from the MA device.  Such systems,\
    \ where\n   available, can perform an important role in transferring the\n   Preconfiguration\
    \ Information to the MA or enabling/disabling the\n   measurement functionality\
    \ of the MA.\n   The granularity of data transmitted in each operation of the\
    \ Control\n   and Report Protocols is not dictated by the Information Model. \
    \ For\n   example, the Instruction object may be delivered in a single\n   operation.\
    \  Alternatively, Schedules and Task Configurations may be\n   separated or even\
    \ each Schedule/Task Configuration may be delivered\n   individually.  Similarly,\
    \ the Information Model does not dictate\n   whether data is read, write, or read/write.\
    \  For example, some\n   Control Protocols may have the ability to read back Configuration\
    \ and\n   Instruction Information that has been previously set on the MA.\n  \
    \ Lastly, while some protocols may simply overwrite information (for\n   example,\
    \ refreshing the entire Instruction Information), other\n   protocols may have\
    \ the ability to update or delete selected items of\n   information.\n   The information\
    \ modeled by the six aspects of the Information Model\n   is supported by a number\
    \ of common information objects.  These\n   objects are also described later in\
    \ this document and are comprised\n   of:\n   a.  Schedules.  A set of Schedules\
    \ tells the MA to execute Actions.\n       An Action of a Schedule leads to the\
    \ execution of a Task.\n       Without a Schedule, no Task (including measurements\
    \ or reporting\n       or communicating with the Controller) is ever executed.\n\
    \       Schedules are used within the Instruction to specify what Tasks\n    \
    \   should be performed, when, and how to direct their results.  A\n       Schedule\
    \ is also used within the Preconfiguration and\n       Configuration Information\
    \ in order to execute the Task or Tasks\n       required to communicate with the\
    \ Controller.  A specific Schedule\n       can only be active once.  Attempts\
    \ to start a Schedule while the\n       same Schedule is still running will fail.\n\
    \   b.  Channels.  A set of Channel objects are used to communicate with\n   \
    \    a number of endpoints (i.e., the Controller and Collectors).\n       Each\
    \ Channel object contains the information required for the\n       communication\
    \ with a single endpoint such as the target location\n       and security details.\n\
    \   c.  Task Configurations.  A set of Task Configurations is used to\n      \
    \ configure the Tasks that are run by the MA.  This includes the\n       registry\
    \ entries for the Task and any configuration parameters,\n       represented as\
    \ Task Options.  Task Configurations are referenced\n       from a Schedule in\
    \ order to specify what Tasks the MA should\n       execute.\n   d.  Events. \
    \ A set of Event objects that can be referenced from the\n       Schedules.  Each\
    \ Schedule always references exactly one Event\n       object that determines\
    \ when the Schedule is executed.  An Event\n       object specifies either a singleton\
    \ or a series of Events that\n       indicate when Tasks should be executed. \
    \ A commonly used kind of\n       Event object is the Timing object.  For Event\
    \ objects specifying\n       a series of Events, it is generally a good idea to\
    \ configure an\n       end time and to refresh the end time as needed to ensure\
    \ that MAs\n       that lose connectivity to their Controller do not continue\n\
    \       executing Schedules forever.\n   Figure 1 illustrates the structure in\
    \ which these common information\n   objects are referenced.  The references are\
    \ achieved by each object\n   (Task Configuration, Event) being given a short\
    \ textual name that is\n   used by other objects.  The objects shown in parenthesis\
    \ are part of\n   the internal object structure of a Schedule.  Channels are not\
    \ shown\n   in the diagram since they are only used as an option by selected Task\n\
    \   Configurations but are similarly referenced using a short text name.\n   \
    \     Schedule\n           |-- triggered by --> Event\n           |\n        \
    \   |-- executes --> Action 1\n           |                  |-- using --> Task\
    \ Configuration\n           |                  |\n           |               \
    \   `-- feeding to --> Destination Schedule\n           :\n           :\n    \
    \       `-- executes --> Action N\n                              |-- using -->\
    \ Task Configuration\n                              |\n                      \
    \        `-- feeding to --> Destination Schedule\n      Figure 1: Relationship\
    \ between Schedules, Events, Actions, Task\n                 Configurations, and\
    \ Destination Schedules\n   The primary function of an MA is to execute Schedules.\
    \  A Schedule,\n   which is triggered by an Event, executes a number of Actions.\
    \  An\n   Action refers to a configured Task, and it may feed results to a\n \
    \  Destination Schedule.  Both Actions and configured Tasks can provide\n   parameters,\
    \ represented as Action Options and Task Options.\n   Tasks can implement a variety\
    \ of different functions.  While in terms\n   of the Information Model, all Tasks\
    \ have the same structure, it can\n   help conceptually to think of different\
    \ Task categories:\n   1.  Measurement Tasks measure some aspect of network performance\
    \ or\n       traffic.  They may also capture contextual information from the\n\
    \       MA device or network interfaces such as the device type or\n       interface\
    \ speed.\n   2.  Data Transfer Tasks support the communication with a Controller\n\
    \       and Collectors:\n       A.  Reporting Tasks report the results of Measurement\
    \ Tasks to\n           Collectors\n       B.  One or more Control Tasks implement\
    \ the Control Protocol and\n           communicate with the Controller\n   3.\
    \  Data Analysis Tasks can exist to analyze data from other\n       Measurement\
    \ Tasks locally on the MA.\n   4.  Data Management Tasks may exist to cleanup,\
    \ filter, or compress\n       data on the MA such as Measurement Task results.\n\
    \   Figure 1 indicates that Actions can produce data that is fed into\n   Destination\
    \ Schedules.  This can by used by Actions implementing\n   Measurement Tasks to\
    \ feed measurement results to a Schedule that\n   triggers Actions implementing\
    \ Reporting Tasks.  Data fed to a\n   Destination Schedule is consumed by the\
    \ first Action of the\n   Destination Schedule if the Destination Schedule is\
    \ using the\n   sequential or pipelined execution mode, and it is consumed by\
    \ all\n   Actions of the Destination Schedule if the Destination Schedule is\n\
    \   using parallel execution mode.\n"
- title: 4.1.  Preconfiguration Information
  contents:
  - "4.1.  Preconfiguration Information\n   This information is the minimal information\
    \ that needs to be\n   preconfigured to the MA in order for it to successfully\
    \ communicate\n   with a Controller during the registration process.  Some of\
    \ the\n   Preconfiguration Information elements are repeated in the\n   Configuration\
    \ Information in order to allow an LMAP Controller to\n   update these items.\
    \  The Preconfiguration Information also contains\n   some elements that are not\
    \ under the control of the LMAP framework\n   (such as the device identifier and\
    \ device security credentials).\n   This Preconfiguration Information needs to\
    \ include a URL of the\n   initial Controller from where Configuration Information\
    \ can be\n   communicated along with the security information required for the\n\
    \   communication, including the certificate of the Controller (or the\n   certificate\
    \ of the Certification Authority that was used to issue the\n   certificate for\
    \ the Controller).  All this is expressed as a Channel.\n   While multiple Channels\
    \ may be provided in the Preconfiguration\n   Information, they must all be associated\
    \ with a single Controller\n   (e.g., over different interfaces or network protocols).\n\
    \   Where the MA pulls information from the Controller, the\n   Preconfiguration\
    \ Information also needs to contain the timing of the\n   communication with the\
    \ Controller as well as the nature of the\n   communication itself (such as the\
    \ protocol and data to be\n   transferred).  The timing is represented as an Event\
    \ that invokes a\n   Schedule that executes the Task(s) responsible for communication\
    \ with\n   the Controller.  It is this Task (or Tasks) that implements the\n \
    \  Control Protocol between the MA and the Controller and utilizes the\n   Channel\
    \ information.  The Task(s) may take additional parameters, as\n   defined by\
    \ a Task Configuration.\n   Even where information is pushed to the MA from the\
    \ Controller\n   (rather than pulled by the MA), a Schedule still needs to be\n\
    \   supplied.  In this case, the Schedule will simply execute a\n   Controller\
    \ listener Task when the MA is started.  A Channel is still\n   required for the\
    \ MA to establish secure communication with the\n   Controller.\n   It can be\
    \ seen that these Channels, Schedules, and Task\n   Configurations for the initial\
    \ communication between the MA and its\n   Controller are no different in terms\
    \ of the Information Model to any\n   other Channel, Schedule, or Task Configuration\
    \ that might execute a\n   Measurement Task or report the measurement results\
    \ (as described\n   later).\n   The MA may be preconfigured with an MA-ID or may\
    \ use a Device ID in\n   the first Controller contact before it is assigned an\
    \ MA-ID.  The\n   Device ID may be a Media Access Control (MAC) address or some\
    \ other\n   device identifier expressed as a URI.  If the MA-ID is not provided\n\
    \   at this stage, then it must be provided by the Controller during\n   Configuration.\n"
- title: 4.1.1.  Definition of ma-preconfig-obj
  contents:
  - "4.1.1.  Definition of ma-preconfig-obj\n     object {\n         [uuid       \
    \         ma-preconfig-agent-id;]\n          ma-task-obj         ma-preconfig-control-tasks<1..*>;\n\
    \          ma-channel-obj      ma-preconfig-control-channels<1..*>;\n        \
    \  ma-schedule-obj     ma-preconfig-control-schedules<1..*>;\n         [uri  \
    \               ma-preconfig-device-id;]\n          credentials         ma-preconfig-credentials;\n\
    \     } ma-preconfig-obj;\n   The ma-preconfig-obj describes information that\
    \ needs to be available\n   to the MA in order to bootstrap communication with\
    \ a Controller.  The\n   ma-preconfig-obj consists of the following elements:\n\
    \   ma-preconfig-agent-id:          An optional UUID uniquely identifying\n  \
    \                                 the Measurement Agent.\n   ma-preconfig-control-tasks:\
    \     An unordered set of Task objects.\n   ma-preconfig-control-channels:  An\
    \ unordered set of Channel objects.\n   ma-preconfig-control-schedules: An unordered\
    \ set of scheduling\n                                   objects.\n   ma-preconfig-device-id:\
    \         An optional identifier for the\n                                   device.\n\
    \   ma-preconfig-credentials:       The security credentials used by the\n   \
    \                                Measurement Agent.\n"
- title: 4.2.  Configuration Information
  contents:
  - "4.2.  Configuration Information\n   During registration or at any later point\
    \ at which the MA contacts\n   the Controller (or vice versa), the choice of Controller,\
    \ details for\n   the timing of communication with the Controller, or parameters\
    \ for\n   the communication Task(s) can be changed (as captured by the\n   Channels,\
    \ Schedules, and Task Configurations objects).  For example,\n   the preconfigured\
    \ Controller (specified as a Channel or Channels) may\n   be overridden with a\
    \ specific Controller that is more appropriate to\n   the MA device type, location,\
    \ or characteristics of the network\n   (e.g., access technology type or broadband\
    \ product).  The initial\n   communication Schedule may be overridden with one\
    \ more relevant to\n   routine communications between the MA and the Controller.\n\
    \   While some Control Protocols may only use a single Schedule, other\n   protocols\
    \ may use several Schedules (and related Data Transfer Tasks)\n   to update the\
    \ Configuration Information, transfer the Instruction\n   Information, transfer\
    \ Capability and Status Information, and send\n   other information to the Controller\
    \ such as log or error\n   notifications.  Multiple Channels may be used to communicate\
    \ with the\n   same Controller over multiple interfaces (e.g., to send Logging\n\
    \   Information over a different network).\n   In addition, the MA will be given\
    \ further items of information that\n   relate specifically to the MA rather than\
    \ the measurements it is to\n   conduct or how to report results.  The assignment\
    \ of an identifier to\n   the Measurement Agent is mandatory.  If the Measurement\
    \ Agent\n   Identifier was not optionally provided during the preconfiguration,\n\
    \   then one must be provided by the Controller during Configuration.\n   Optionally,\
    \ a Group-ID may also be given that identifies a group of\n   interest to which\
    \ that MA belongs.  For example, the group could\n   represent an ISP, broadband\
    \ product, technology, market\n   classification, geographic region, or a combination\
    \ of multiple such\n   characteristics.  Additional flags control whether the\
    \ MA-ID or the\n   Group-ID are included in Reports.  The reporting of a Group-ID\n\
    \   without the MA-ID may allow the MA to remain anonymous, which may be\n   particularly\
    \ useful to prevent tracking of mobile MA devices.\n   Optionally, an MA can also\
    \ be configured to stop executing any\n   Instruction Schedule if the Controller\
    \ is unreachable.  This can be\n   used as a fail-safe to stop Measurement and\
    \ other Tasks from being\n   conducted when there is doubt that the Instruction\
    \ Information is\n   still valid.  This is simply represented as a time window\
    \ in seconds\n   since the last communication with the Controller, after which\
    \ an\n   Event is generated that can trigger the suspension of Instruction\n \
    \  Schedules.  The appropriate value of the time window will depend on\n   the\
    \ specified communication Schedule with the Controller and the\n   duration for\
    \ which the system is willing to tolerate continued\n   operation with potentially\
    \ stale Instruction Information.\n   While Preconfiguration Information is persistent\
    \ upon a device reset\n   or power cycle, the persistency of the Configuration\
    \ Information may\n   be device dependent.  Some devices may revert back to their\n\
    \   preconfiguration state upon reboot or factory reset, while other\n   devices\
    \ may store all Configuration and Instruction Information in\n   persistent storage.\
    \  A Controller can check whether an MA has the\n   latest Configuration and Instruction\
    \ Information by examining the\n   Capability and Status Information for the MA.\n"
- title: 4.2.1.  Definition of ma-config-obj
  contents:
  - "4.2.1.  Definition of ma-config-obj\n     object {\n         uuid           \
    \     ma-config-agent-id;\n         ma-task-obj         ma-config-control-tasks<1..*>;\n\
    \         ma-channel-obj      ma-config-control-channels<1..*>;\n         ma-schedule-obj\
    \     ma-config-control-schedules<1..*>;\n         credentials         ma-config-credentials;\n\
    \        [string              ma-config-group-id;]\n        [string          \
    \    ma-config-measurement-point;]\n        [boolean             ma-config-report-agent-id;]\n\
    \        [boolean             ma-config-report-group-id;]\n        [boolean  \
    \           ma-config-report-measurement-point;]\n        [int               \
    \  ma-config-controller-timeout;]\n     } ma-config-obj;\n   The ma-config-obj\
    \ consists of the following elements:\n   ma-config-agent-id:                \
    \ A UUID uniquely identifying the\n                                       Measurement\
    \ Agent.\n   ma-config-control-tasks:            An unordered set of Task objects.\n\
    \   ma-config-control-channels:         An unordered set of Channel\n        \
    \                               objects.\n   ma-config-control-schedules:    \
    \    An unordered set of scheduling\n                                       objects.\n\
    \   ma-config-credentials:              The security credentials used by\n   \
    \                                    the Measurement Agent.\n   ma-config-group-id:\
    \                 An optional identifier of the\n                            \
    \           group of Measurement Agents this\n                               \
    \        Measurement Agent belongs to.\n   ma-config-measurement-point:      \
    \  An optional identifier for the\n                                       measurement\
    \ point indicating\n                                       where the Measurement\
    \ Agent is\n                                       located on a path (see [RFC7398]\n\
    \                                       for further details).\n   ma-config-report-agent-id:\
    \          An optional flag indicating\n                                     \
    \  whether the Agent Identifier\n                                       (ma-config-agent-id)\
    \ is included\n                                       in reports.  The default\
    \ value is\n                                       true.\n   ma-config-report-group-id:\
    \          An optional flag indicating\n                                     \
    \  whether the Group-ID\n                                       (ma-config-group-id)\
    \ is included\n                                       in reports.  The default\
    \ value is\n                                       false.\n   ma-config-report-measurement-point:\
    \ An optional flag indicating\n                                       whether\
    \ the measurement point\n                                       (ma-config-measurement-point)\n\
    \                                       should be included in reports.\n     \
    \                                  The default value is false.\n   ma-config-controller-timeout:\
    \       A timer is started after each\n                                      \
    \ successful contact with a\n                                       Controller.\
    \  When the timer\n                                       reaches the controller-timeout\n\
    \                                       (measured in seconds), an Event\n    \
    \                                   is raised indicating that\n              \
    \                         connectivity to the Controller\n                   \
    \                    has been lost (see\n                                    \
    \   ma-controller-lost-obj).\n"
- title: 4.3.  Instruction Information
  contents:
  - "4.3.  Instruction Information\n   The Instruction Information Model has four\
    \ sub-elements:\n   1.  Instruction Task Configurations\n   2.  Report Channels\n\
    \   3.  Instruction Schedules\n   4.  Suppression\n   The Instruction supports\
    \ the execution of all Tasks on the MA except\n   those that deal with communication\
    \ with the Controller (specified in\n   Configuration or Preconfiguration Information).\
    \  The Tasks are\n   configured in Instruction Task Configurations and included\
    \ by\n   reference in the Actions of Instruction Schedules that specify when\n\
    \   to execute them.  The results can be communicated to other Schedules,\n  \
    \ or a Task may implement a Reporting Protocol and communicate results\n   over\
    \ Report Channels.  Suppression is used to temporarily stop the\n   execution\
    \ of new Tasks as specified by the Instruction Schedules (and\n   optionally to\
    \ stop ongoing Tasks).\n   A Task Configuration is used to configure the mandatory\
    \ and optional\n   parameters of a Task.  It also serves to instruct the MA about\
    \ the\n   Task including the ability to resolve the Task to an executable and\n\
    \   to specify the schema for the Task parameters.\n   A Report Channel defines\
    \ how to communicate with a single remote\n   system specified by a URL.  A Report\
    \ Channel is used to send results\n   to a single Collector but is no different\
    \ in terms of the Information\n   Model to the Control Channel used to transfer\
    \ information between the\n   MA and the Controller.  Several Report Channels\
    \ can be defined to\n   enable results to be split or duplicated across different\n\
    \   destinations.  A single Channel can be used by multiple (reporting)\n   Task\
    \ Configurations to transfer data to the same Collector.  A single\n   Reporting\
    \ Task Configuration can also be included in multiple\n   Schedules.  For example,\
    \ a single Collector may receive data at three\n   different cycle rates, with\
    \ one Schedule reporting hourly, another\n   reporting daily, and a third specifying\
    \ that results should be sent\n   immediately for on-demand Measurement Tasks.\
    \  Alternatively, multiple\n   Report Channels can be used to send Measurement\
    \ Task results to\n   different Collectors.  The details of the Channel element\
    \ is\n   described later as it is common to several objects.\n   Instruction Schedules\
    \ specify which Actions to execute according to a\n   given triggering Event.\
    \  An Action extends a configured Task with\n   additional specific parameters.\
    \  An Event can trigger the execution\n   of a single Action, or it can trigger\
    \ a repeated series of Actions.\n   The Schedule also specifies how to link output\
    \ data from Tasks to\n   other Schedules.\n   Measurement Suppression information\
    \ is used to override the\n   Instruction Schedule and temporarily stop measurements\
    \ or other Tasks\n   from running on the MA for a defined or indefinite period.\
    \  While\n   conceptually measurements can be stopped by simply removing them\
    \ from\n   the Measurement Schedule, splitting out separate information on\n \
    \  Measurement Suppression allows this information to be updated on the\n   MA\
    \ on a different timing cycle or protocol implementation to the\n   Measurement\
    \ Schedule.  It is also considered that it will be easier\n   for a human operator\
    \ to implement a temporary explicit Suppression\n   rather than having to move\
    \ to a reduced Schedule and then roll back\n   at a later time.\n   It should\
    \ be noted that Control Schedules and Tasks cannot be\n   suppressed as evidenced\
    \ by the lack of Suppression information in the\n   Configuration.  The Control\
    \ Schedule must only reference Tasks listed\n   as Control Tasks (i.e., within\
    \ the Configuration Information).\n   A single Suppression object is able to enable/disable\
    \ a set of\n   Instruction Tasks that are tagged for Suppression.  This enables\n\
    \   fine-grained control on which Tasks are suppressed.  Suppression of\n   both\
    \ matching Actions and Measurement Schedules is supported.\n   Support for disabling\
    \ specific Actions allows malfunctioning or\n   misconfigured Tasks or Actions\
    \ that have an impact on a particular\n   part of the network infrastructure (e.g.,\
    \ a particular Measurement\n   Peer) to be targeted.  Support for disabling specific\
    \ Schedules\n   allows for particularly heavy cycles or sets of less essential\n\
    \   Measurement Tasks to be suppressed quickly and effectively.  Note\n   that\
    \ Suppression has no effect on either Controller Tasks or\n   Controller Schedules.\n\
    \   Suppression stops new Tasks from executing.  In addition, the\n   Suppression\
    \ information also supports an additional boolean that is\n   used to select whether\
    \ ongoing Tasks are also to be terminated.\n   Unsuppression is achieved through\
    \ either overwriting the Measurement\n   Suppression information (e.g., changing\
    \ 'enabled' to False) or\n   through the use of an end time such that the Measurement\
    \ Suppression\n   will no longer be in effect beyond this time.\n   The goal when\
    \ defining these four different elements is to allow each\n   part of the Information\
    \ Model to change without affecting the other\n   three elements.  For example,\
    \ it is envisaged that the Report\n   Channels and the set of Task Configurations\
    \ will be relatively\n   static.  The Instruction Schedule, on the other hand,\
    \ is likely to be\n   more dynamic, as the measurement panel and test frequency\
    \ are changed\n   for various business goals.  Another example is that measurements\
    \ can\n   be suppressed with a Suppression command without removing the\n   existing\
    \ Instruction Schedules that would continue to apply after the\n   Suppression\
    \ expires or is removed.  In terms of the communication\n   between the MA and\
    \ its Controller, this can reduce the data overhead.\n   It also encourages the\
    \ reuse of the same standard Task Configurations\n   and Reporting Channels to\
    \ help ensure consistency and reduce errors.\n"
- title: 4.3.1.  Definition of ma-instruction-obj
  contents:
  - "4.3.1.  Definition of ma-instruction-obj\n     object {\n         ma-task-obj\
    \         ma-instruction-tasks<0..*>;\n         ma-channel-obj      ma-instruction-channels<0..*>;\n\
    \         ma-schedule-obj     ma-instruction-schedules<0..*>;\n        [ma-suppression-obj\
    \  ma-instruction-suppressions<0..*>;]\n     } ma-instruction-obj;\n   An ma-instruction-obj\
    \ consists of the following elements:\n   ma-instruction-tasks:         A possibly\
    \ empty unordered set of Task\n                                 objects.\n   ma-instruction-channels:\
    \      A possibly empty unordered set of\n                                 Channel\
    \ objects.\n   ma-instruction-schedules:     A possibly empty unordered set of\n\
    \                                 Schedule objects.\n   ma-instruction-suppressions:\
    \  An optional possibly empty unordered\n                                 set\
    \ of Suppression objects.\n"
- title: 4.3.2.  Definition of ma-suppression-obj
  contents:
  - "4.3.2.  Definition of ma-suppression-obj\n     object {\n         string    \
    \          ma-suppression-name;\n        [ma-event-obj        ma-suppression-start;]\n\
    \        [ma-event-obj        ma-suppression-end;]\n        [string          \
    \    ma-suppression-match<0..*>;]\n        [boolean             ma-suppression-stop-running;]\n\
    \     } ma-suppression-obj;\n   The ma-suppression-obj controls the Suppression\
    \ of Schedules or\n   Actions and consists of the following elements:\n   ma-suppression-name:\
    \          A name uniquely identifying a\n                                 Suppression.\n\
    \   ma-suppression-start:         The optional Event indicating when\n       \
    \                          Suppression starts.  If not present,\n            \
    \                     the Suppression starts immediately,\n                  \
    \               i.e., as if the value would be\n                             \
    \    'immediate'.\n   ma-suppression-end:           The optional Event indicating\
    \ when\n                                 Suppression ends.  If not present, the\n\
    \                                 Suppression does not have a defined\n      \
    \                           end, i.e., the Suppression remains for\n         \
    \                        an indefinite period of time.\n   ma-suppression-match:\
    \         An optional and possibly empty\n                                 unordered\
    \ set of match patterns.  The\n                                 Suppression will\
    \ apply to all Schedules\n                                 (and their Actions)\
    \ that have a\n                                 matching value in their\n    \
    \                             ma-schedule-suppression-tags and all\n         \
    \                        Actions that have a matching value in\n             \
    \                    their ma-action-suppression-tags.\n                     \
    \            Pattern matching is done using a glob\n                         \
    \        style pattern (see below).\n   ma-suppression-stop-running:  An optional\
    \ boolean indicating whether\n                                 Suppression will\
    \ stop any running\n                                 matching Schedules or Actions.\
    \  The\n                                 default value for this boolean is\n \
    \                                false.\n   Glob style pattern matching is following\
    \ POSIX.2 fnmatch() [POSIX.2]\n   without special treatment of file paths:\n \
    \              *         matches a sequence of characters\n               ?  \
    \       matches a single character\n               [seq]     matches any character\
    \ in seq\n               [!seq]    matches any character not in seq\n   A backslash\
    \ followed by a character matches the following character.\n   In particular:\n\
    \               \\*        matches *\n               \\?        matches ?\n  \
    \             \\\\        matches \\\n   A sequence seq may be a sequence of characters\
    \ (e.g., [abc]) or a\n   range of characters (e.g., [a-c]).\n"
- title: 4.4.  Logging Information
  contents:
  - "4.4.  Logging Information\n   The MA may report on the success or failure of\
    \ Configuration or\n   Instruction communications from the Controller.  In addition,\
    \ further\n   operational logs may be produced during the operation of the MA,\
    \ and\n   updates to Capabilities may also be reported.  Reporting this\n   information\
    \ is achieved in exactly the same manner as scheduling any\n   other Task.  We\
    \ make no distinction between a Measurement Task\n   conducting an active or passive\
    \ network measurement and one that\n   solely retrieves static or dynamic information\
    \ from the MA such as\n   Capabilities or Logging Information.  One or more logging\
    \ Tasks can\n   be programmed or configured to capture subsets of the Logging\n\
    \   Information.  These logging Tasks are then executed by Schedules,\n   which\
    \ also specify that the resultant data is to be transferred over\n   the Controller\
    \ Channels.\n   The type of Logging Information will fall into three different\n\
    \   categories:\n   1.  Success/failure/warning messages in response to information\n\
    \       updates from the Controller.  Failure messages could be produced\n   \
    \    due to some inability to receive or parse the Controller\n       communication\
    \ or if the MA is not able to act as instructed.  For\n       example:\n     \
    \  *  \"Measurement Schedules updated OK\"\n       *  \"Unable to parse JSON\"\
    \n       *  \"Missing mandatory element: Measurement Timing\"\n       *  \"'Start'\
    \ does not conform to schema - expected datetime\"\n       *  \"Date specified\
    \ is in the past\"\n       *  \"'Hour' must be in the range 1..24\"\n       *\
    \  \"Schedule A refers to non-existent Measurement Task\n          Configuration\"\
    \n       *  \"Measurement Task Configuration X registry, entry Y not found\"\n\
    \       *  \"Updated Measurement Task Configurations do not include M used\n \
    \         by Measurement Schedule N\"\n   2.  Operational updates from the MA.\
    \  For example:\n       *  \"Out of memory: cannot record result\"\n       * \
    \ \"Collector 'collector.example.com' not responding\"\n       *  \"Unexpected\
    \ restart\"\n       *  \"Suppression timeout\"\n       *  \"Failed to execute\
    \ Measurement Task Configuration H\"\n   3.  Status updates from the MA.  For\
    \ example:\n       *  \"Device interface added: eth3\"\n       *  \"Supported\
    \ measurements updated\"\n       *  \"New IP address on eth0: xxx.xxx.xxx.xxx\"\
    \n   This Information Model document does not detail the precise format of\n \
    \  Logging Information since it is to a large extent protocol and MA\n   specific.\
    \  However, some common information can be identified.\n"
- title: 4.4.1.  Definition of ma-log-obj
  contents:
  - "4.4.1.  Definition of ma-log-obj\n     object {\n         uuid              \
    \  ma-log-agent-id;\n         datetime            ma-log-event-time;\n       \
    \  int                 ma-log-code;\n         string              ma-log-description;\n\
    \     } ma-log-obj;\n   The ma-log-obj models the generic aspects of a logging\
    \ object and\n   consists of the following elements:\n   ma-log-agent-id:    \
    \      A uuid uniquely identifying the Measurement\n                         \
    \    Agent.\n   ma-log-event-time:        The date and time of the Event reported\
    \ in\n                             the logging object.\n   ma-log-code:      \
    \        A machine-readable code describing the\n                            \
    \ Event.\n   ma-log-description:       A human-readable description of the Event.\n"
- title: 4.5.  Capability and Status Information
  contents:
  - "4.5.  Capability and Status Information\n   The MA will hold Capability Information\
    \ that can be retrieved by a\n   Controller.  Capabilities include the device\
    \ interface details\n   available to Measurement Tasks as well as the set of Measurement\n\
    \   Tasks/Roles (specified by registry entries) that are actually\n   installed\
    \ or available on the MA.  Status Information includes the\n   times that operations\
    \ were last performed such as contacting the\n   Controller or producing Reports.\n"
- title: 4.5.1.  Definition of ma-capability-obj
  contents:
  - "4.5.1.  Definition of ma-capability-obj\n     object {\n         string     \
    \             ma-capability-hardware;\n         string                  ma-capability-firmware;\n\
    \         string                  ma-capability-version;\n        [string    \
    \              ma-capability-tags<0..*>;]\n        [ma-capability-task-obj  ma-capability-tasks<0..*>;]\n\
    \     } ma-capability-obj;\n   The ma-capability-obj provides information about\
    \ the Capabilities of\n   the Measurement Agent and consists of the following\
    \ elements:\n   ma-capability-hardware:   A description of the hardware of the\
    \ device\n                             the Measurement Agent is running on.\n\
    \   ma-capability-firmware:   A description of the firmware of the device\n  \
    \                           the Measurement Agent is running on.\n   ma-capability-version:\
    \    The version of the Measurement Agent.\n   ma-capability-tags:       An optional\
    \ unordered set of tags that\n                             provide additional\
    \ information about the\n                             Capabilities of the Measurement\
    \ Agent.\n   ma-capability-tasks:      An optional unordered set of capability\n\
    \                             objects for each supported Task.\n"
- title: 4.5.2.  Definition of ma-capability-task-obj
  contents:
  - "4.5.2.  Definition of ma-capability-task-obj\n     object {\n         string\
    \              ma-capability-task-name;\n         ma-registry-obj     ma-capability-task-functions<0..*>;\n\
    \         string              ma-capability-task-version;\n     } ma-capability-task-obj;\n\
    \   The ma-capability-task-obj provides information about the capability\n   of\
    \ a Task and consists of the following elements:\n   ma-capability-task-name:\
    \        A name uniquely identifying a Task.\n   ma-capability-task-functions:\
    \   A possibly empty unordered set of\n                                   registry\
    \ entries identifying\n                                   functions this Task\
    \ implements.\n   ma-capability-task-version:     The version of the Measurement\
    \ Task.\n"
- title: 4.5.3.  Definition of ma-status-obj
  contents:
  - "4.5.3.  Definition of ma-status-obj\n     object {\n         uuid           \
    \            ma-status-agent-id;\n        [uri                        ma-status-device-id;]\n\
    \         datetime                   ma-status-last-started;\n         ma-status-interface-obj\
    \    ma-status-interfaces<0..*>;\n        [ma-status-schedule-obj     ma-status-schedules<0..*>;]\n\
    \        [ma-status-suppression-obj  ma-status-suppressions<0..*>;]\n     } ma-status-obj;\n\
    \   The ma-status-obj provides Status Information about the Measurement\n   Agent\
    \ and consists of the following elements:\n   ma-status-agent-id:       A uuid\
    \ uniquely identifying the Measurement\n                             Agent.\n\
    \   ma-status-device-id:      A URI identifying the device.\n   ma-status-last-started:\
    \   The date and time the Measurement Agent\n                             last\
    \ started.\n   ma-status-interfaces:     An unordered set of network interfaces\n\
    \                             available on the device.\n   ma-status-schedules:\
    \      An optional unordered set of status objects\n                         \
    \    for each Schedule.\n   ma-status-suppressions:   An optional unordered set\
    \ of status objects\n                             for each Suppression.\n"
- title: 4.5.4.  Definition of ma-status-schedule-obj
  contents:
  - "4.5.4.  Definition of ma-status-schedule-obj\n     object {\n         string\
    \                  ma-status-schedule-name;\n         string                 \
    \ ma-status-schedule-state;\n         int                     ma-status-schedule-storage;\n\
    \         counter                 ma-status-schedule-invocations;\n         counter\
    \                 ma-status-schedule-suppressions;\n         counter         \
    \        ma-status-schedule-overlaps;\n         counter                 ma-status-schedule-failures;\n\
    \         datetime                ma-status-schedule-last-invocation;\n      \
    \  [ma-status-action-obj    ma-status-schedule-actions<0..*>;]\n     } ma-status-schedule-obj;\n\
    \   The ma-status-schedule-obj provides Status Information about the\n   status\
    \ of a Schedule and consists of the following elements:\n   ma-status-schedule-name:\
    \            The name of the Schedule this\n                                 \
    \      status object refers to.\n   ma-status-schedule-state:           The state\
    \ of the Schedule.  The\n                                       value 'enabled'\
    \ indicates that\n                                       the Schedule is currently\n\
    \                                       enabled.  The value 'suppressed'\n   \
    \                                    indicates that the Schedule is\n        \
    \                               currently suppressed.  The value\n           \
    \                            'disabled' indicates that the\n                 \
    \                      Schedule is currently disabled.\n                     \
    \                  The value 'running' indicates\n                           \
    \            that the Schedule is currently\n                                \
    \       running.\n   ma-status-schedule-storage:         The amount of secondary\
    \ storage\n                                       (e.g., allocated in a file\n\
    \                                       system) holding temporary data\n     \
    \                                  allocated to the Schedule in\n            \
    \                           bytes.  This object reports the\n                \
    \                       amount of allocated physical\n                       \
    \                storage and not the storage used\n                          \
    \             by logical data records.  Data\n                               \
    \        models should use a 64-bit\n                                       integer\
    \ type.\n   ma-status-schedule-invocations      Number of invocations of this\n\
    \                                       Schedule.  This counter does not\n   \
    \                                    include suppressed invocations or\n     \
    \                                  invocations that were prevented\n         \
    \                              due to an overlap with a previous\n           \
    \                            invocation of this Schedule.\n   ma-status-schedule-suppressions\
    \     Number of suppressed executions\n                                      \
    \ of this Schedule.\n   ma-status-schedule-overlaps         Number of executions\
    \ prevented\n                                       due to overlaps with a previous\n\
    \                                       invocation of this Schedule.\n   ma-status-schedule-failures\
    \         Number of failed executions of\n                                   \
    \    this Schedule.  A failed\n                                       execution\
    \ is an execution where\n                                       at least one Action\
    \ failed.\n   ma-status-schedule-last-invocation: The date and time of the last\n\
    \                                       invocation of this Schedule.\n   ma-status-schedule-actions:\
    \         An optional ordered list of\n                                      \
    \ status objects for each Action of\n                                       the\
    \ Schedule.\n"
- title: 4.5.5.  Definition of ma-status-action-obj
  contents:
  - "4.5.5.  Definition of ma-status-action-obj\n     object {\n         string  \
    \            ma-status-action-name;\n         string              ma-status-action-state;\n\
    \         int                 ma-status-action-storage;\n         counter    \
    \         ma-status-action-invocations;\n         counter             ma-status-action-suppressions;\n\
    \         counter             ma-status-action-overlaps;\n         counter   \
    \          ma-status-action-failures;\n         datetime            ma-status-action-last-invocation;\n\
    \         datetime            ma-status-action-last-completion;\n         int\
    \                 ma-status-action-last-status;\n         string             \
    \ ma-status-action-last-message;\n         datetime            ma-status-action-last-failed-completion;\n\
    \         int                 ma-status-action-last-failed-status;\n         string\
    \              ma-status-action-last-failed-message;\n     } ma-status-action-obj;\n\
    \   The ma-status-action-obj provides Status Information about an Action\n   of\
    \ a Schedule and consists of the following elements:\n   ma-status-action-name:\
    \                   The name of the Action of a\n                            \
    \                Schedule this status object\n                               \
    \             refers to.\n   ma-status-action-state:                  The state\
    \ of the Action.\n                                            The value 'enabled'\n\
    \                                            indicates that the Action is\n  \
    \                                          currently enabled.  The\n         \
    \                                   value 'suppressed' indicates\n           \
    \                                 that the Action is currently\n             \
    \                               suppressed.  The value\n                     \
    \                       'disabled' indicates that\n                          \
    \                  the Action is currently\n                                 \
    \           disabled.  The value\n                                           \
    \ 'running' indicates that the\n                                            Action\
    \ is currently running.\n   ma-status-action-storage:                The amount\
    \ of secondary\n                                            storage (e.g., allocated\
    \ in\n                                            a file system) holding\n   \
    \                                         temporary data allocated to\n      \
    \                                      the Action in bytes.  This\n          \
    \                                  object reports the amount of\n            \
    \                                allocated physical storage\n                \
    \                            and not the storage used by\n                   \
    \                         logical data records.  Data\n                      \
    \                      models should use a 64-bit\n                          \
    \                  integer type.\n   ma-status-action-invocations            \
    \ Number of invocations of\n                                            this Action.\
    \  This counter\n                                            does not include\
    \ suppressed\n                                            invocations or invocations\n\
    \                                            that were prevented due to\n    \
    \                                        an overlap with a previous\n        \
    \                                    invocation of this Action.\n   ma-status-action-suppressions\
    \            Number of suppressed\n                                          \
    \  executions of this Action.\n   ma-status-action-overlaps                Number\
    \ of executions\n                                            prevented due to\
    \ overlaps\n                                            with a previous invocation\n\
    \                                            of this Action.\n   ma-status-action-failures\
    \                Number of failed executions\n                               \
    \             of this Action.\n   ma-status-action-last-invocation:        The\
    \ date and time of the\n                                            last invocation\
    \ of this\n                                            Action.\n   ma-status-action-last-completion:\
    \        The date and time of the\n                                          \
    \  last completion of this\n                                            Action.\n\
    \   ma-status-action-last-status:            The status code returned by\n   \
    \                                         the last execution of this\n       \
    \                                     Action.\n   ma-status-action-last-message:\
    \           The status message produced\n                                    \
    \        by the last execution of\n                                          \
    \  this Action.\n   ma-status-action-last-failed-completion: The date and time\
    \ of the\n                                            last failed completion of\n\
    \                                            this Action.\n   ma-status-action-last-failed-status:\
    \     The status code returned by\n                                          \
    \  the last failed execution of\n                                            this\
    \ Action.\n   ma-status-action-last-failed-message:    The status message produced\n\
    \                                            by the last failed execution\n  \
    \                                          of this Action.\n"
- title: 4.5.6.  Definition of ma-status-suppression-obj
  contents:
  - "4.5.6.  Definition of ma-status-suppression-obj\n     object {\n         string\
    \                  ma-status-suppression-name;\n         string              \
    \    ma-status-suppression-state;\n     } ma-status-suppression-obj;\n   The ma-status-suppression-obj\
    \ provides Status Information about the\n   status of a Suppression and consists\
    \ of the following elements:\n   ma-status-suppression-name:   The name of the\
    \ Suppression this status\n                                 object refers to.\n\
    \   ma-status-suppression-state:  The state of the Suppression.  The\n       \
    \                          value 'enabled' indicates that the\n              \
    \                   Suppression is currently enabled.  The\n                 \
    \                value 'active' indicates that the\n                         \
    \        Suppression is currently active.  The\n                             \
    \    value 'disabled' indicates that the\n                                 Suppression\
    \ is currently disabled.\n"
- title: 4.5.7.  Definition of ma-status-interface-obj
  contents:
  - "4.5.7.  Definition of ma-status-interface-obj\n     object {\n         string\
    \              ma-status-interface-name;\n         string              ma-status-interface-type;\n\
    \        [int                 ma-status-interface-speed;]\n        [string   \
    \           ma-status-interface-link-layer-address;]\n        [ip-address    \
    \      ma-status-interface-ip-addresses<0..*>;]\n        [ip-address         \
    \ ma-status-interface-gateways<0..*>;]\n        [ip-address          ma-status-interface-dns-servers<0..*>;]\n\
    \     } ma-status-interface-obj;\n   The ma-status-interface-obj provides Status\
    \ Information about network\n   interfaces and consists of the following elements:\n\
    \   ma-status-interface-name:               A name uniquely identifying a\n  \
    \                                         network interface.\n   ma-status-interface-type:\
    \               The type of the network\n                                    \
    \       interface.\n   ma-status-interface-speed:              An optional indication\
    \ of the\n                                           speed of the interface\n\
    \                                           (measured in bits per\n          \
    \                                 second).\n   ma-status-interface-link-layer-address:\
    \ An optional link-layer\n                                           address of\
    \ the interface.\n   ma-status-interface-ip-addresses:       An optional ordered\
    \ list of\n                                           IP addresses assigned to\
    \ the\n                                           interface.\n   ma-status-interface-gateways:\
    \           An optional ordered list of\n                                    \
    \       gateways assigned to the\n                                           interface.\n\
    \   ma-status-interface-dns-servers:        An optional ordered list of\n    \
    \                                       DNS servers assigned to the\n        \
    \                                   interface.\n"
- title: 4.6.  Reporting Information
  contents:
  - "4.6.  Reporting Information\n   At a point in time specified by a Schedule, the\
    \ MA will execute Tasks\n   that communicate a set of measurement results to the\
    \ Collector.\n   These Reporting Tasks will be configured to transmit Task results\n\
    \   over a specified Report Channel to a Collector.\n   It should be noted that\
    \ the output from Tasks does not need to be\n   sent to communication Channels.\
    \  It can alternatively, or\n   additionally, be sent to other Tasks on the MA.\
    \  This facilitates\n   using a first Measurement Task to control the operation\
    \ of a later\n   Measurement Task (such as first probing available line speed\
    \ and then\n   adjusting the operation of a video testing measurement) and also\
    \ to\n   allow local processing of data to output alarms (e.g., when\n   performance\
    \ drops from earlier levels).  Of course, subsequent Tasks\n   also include Tasks\
    \ that implement the Reporting Protocol(s) and\n   transfer data to one or more\
    \ Collectors.\n   The Report generated by a Reporting Task is structured hierarchically\n\
    \   to avoid repetition of report header and Measurement Task\n   Configuration\
    \ information.  The report starts with the timestamp of\n   the report generation\
    \ on the MA and details about the MA including\n   the optional Measurement Agent\
    \ Identifier and Group-ID (controlled by\n   the Configuration Information).\n\
    \   Much of the report information is optional and will depend on the\n   implementation\
    \ of the Reporting Task and any parameters defined in\n   the Task Configuration\
    \ for the Reporting Task.  For example, some\n   Reporting Tasks may choose not\
    \ to include the Measurement Task\n   Configuration or Action parameters, while\
    \ others may do so dependent\n   on the Controller setting a configurable parameter\
    \ in the Task\n   Configuration.\n   It is possible for a Reporting Task to send\
    \ just the report header\n   (datetime and optional Agent Identifier and/or Group-ID)\
    \ if no\n   measurement data is available.  Whether to send such empty reports\n\
    \   again is dependent on the implementation of the Reporting Task and\n   potential\
    \ Task Configuration parameter.\n   The handling of measurement data on the MA\
    \ before generating a Report\n   and transfer from the MA to the Collector is\
    \ dependent on the\n   implementation of the device, MA, and/or scheduled Tasks\
    \ and not\n   defined by the LMAP standards.  Such decisions may include limits\
    \ to\n   the measurement data storage and what to do when such available\n   storage\
    \ becomes depleted.  It is generally suggested that\n   implementations running\
    \ out of storage stop executing new Measurement\n   Tasks and retain old measurement\
    \ data.\n   No context information, such as line speed or broadband product are\n\
    \   included within the report header information as this data is\n   reported\
    \ by individual Tasks at the time they execute.  Either a\n   Measurement Task\
    \ can report contextual parameters that are relevant\n   to that particular measurement\
    \ or specific Tasks can be used to\n   gather a set of contextual and environmental\
    \ data at certain times\n   independent of the Reporting Schedule.\n   After the\
    \ report header information, the results are reported grouped\n   according to\
    \ different Measurement Task Configurations.  Each Task\n   section optionally\
    \ starts with replicating the Measurement Task\n   Configuration information before\
    \ the result headers (titles for data\n   columns) and the result data rows. \
    \ The Options reported are those\n   used for the scheduled execution of the Measurement\
    \ Task and\n   therefore include the Options specified in the Task Configuration\
    \ as\n   well as additional Options specified in the Action.  The Action\n   Options\
    \ are appended to the Task Configuration Options in exactly the\n   same order\
    \ as they were provided to the Task during execution.\n   The result row data\
    \ includes a time for the start of the measurement\n   and optionally an end time\
    \ where the duration also needs to be\n   considered in the data analysis.\n \
    \  Some Measurement Tasks may optionally include an indication of the\n   cross-traffic\
    \ although the definition of cross-traffic is left up to\n   each individual Measurement\
    \ Task.  Some Measurement Tasks may also\n   output other environmental measures\
    \ in addition to cross-traffic such\n   as CPU utilization or interface speed.\n\
    \   Whereas the Configuration and Instruction Information represent\n   information\
    \ transmitted via the Control Protocol, the Report\n   represents the information\
    \ that is transmitted via the Report\n   Protocol.  It is constructed at the time\
    \ of sending a report and\n   represents the inherent structure of the information\
    \ that is sent to\n   the Collector.\n"
- title: 4.6.1.  Definition of ma-report-obj
  contents:
  - "4.6.1.  Definition of ma-report-obj\n     object {\n         datetime       \
    \       ma-report-date;\n        [uuid                  ma-report-agent-id;]\n\
    \        [string                ma-report-group-id;]\n        [string        \
    \        ma-report-measurement-point;]\n        [ma-report-result-obj  ma-report-results<0..*>;]\n\
    \     } ma-report-obj;\n   The ma-report-obj provides the metadata of a single\
    \ report and\n   consists of the following elements:\n   ma-report-date:     \
    \          The date and time when the report was\n                           \
    \      sent to a Collector.\n   ma-report-agent-id:           An optional uuid\
    \ uniquely identifying\n                                 the Measurement Agent.\n\
    \   ma-report-group-id:           An optional identifier of the group of\n   \
    \                              Measurement Agents this Measurement\n         \
    \                        Agent belongs to.\n   ma-report-measurement-point:  An\
    \ optional identifier for the\n                                 measurement point\
    \ indicating where the\n                                 Measurement Agent is\
    \ located on a path\n                                 (see [RFC7398] for further\
    \ details).\n   ma-report-results:            An optional and possibly empty\n\
    \                                 unordered set of result objects.\n"
- title: 4.6.2.  Definition of ma-report-result-obj
  contents:
  - "4.6.2.  Definition of ma-report-result-obj\n     object {\n         string  \
    \                ma-report-result-schedule-name;\n         string            \
    \      ma-report-result-action-name;\n         string                  ma-report-result-task-name;\n\
    \        [ma-option-obj           ma-report-result-options<0..*>;]\n        [string\
    \                  ma-report-result-tags<0..*>;]\n         datetime          \
    \      ma-report-result-event-time;\n         datetime                ma-report-result-start-time;\n\
    \        [datetime                ma-report-result-end-time;]\n        [string\
    \                  ma-report-result-cycle-number;]\n         int             \
    \        ma-report-result-status;\n        [ma-report-conflict-obj  ma-report-result-conflicts<0..*>;]\n\
    \        [ma-report-table-obj     ma-report-result-tables<0..*>;]\n     } ma-report-result-obj;\n\
    \   The ma-report-result-obj provides the metadata of a result report of\n   a\
    \ single executed Action.  It consists of the following elements:\n   ma-report-result-schedule-name:\
    \ The name of the Schedule that\n                                   produced the\
    \ result.\n   ma-report-result-action-name:   The name of the Action in the\n\
    \                                   Schedule that produced the result.\n   ma-report-result-task-name:\
    \     The name of the Task that produced\n                                   the\
    \ result.\n   ma-report-result-options:       An optional ordered joined list\
    \ of\n                                   options provided by the Task object\n\
    \                                   and the Action object when the Action\n  \
    \                                 was started.\n   ma-report-result-tags:    \
    \      An optional unordered set of tags.\n                                  \
    \ This is the joined set of tags\n                                   provided\
    \ by the Task object, Action\n                                   object, and Schedule\
    \ object when the\n                                   Action was started.\n  \
    \ ma-report-result-event-time:    The date and time of the Event that\n      \
    \                             triggered the Schedule of the Action\n         \
    \                          that produced the reported result\n               \
    \                    values.  The date and time does not\n                   \
    \                include any added randomization.\n   ma-report-result-start-time:\
    \    The date and time of the start of the\n                                 \
    \  Action that produced the reported\n                                   result\
    \ values.\n   ma-report-result-end-time:      An optional date and time indicating\n\
    \                                   when the Action finished.\n   ma-report-result-cycle-number:\
    \  An optional cycle number derived from\n                                   ma-report-result-event-time.\
    \  It is\n                                   the time closest to\n           \
    \                        ma-report-result-event-time that is a\n             \
    \                      multiple of the\n                                   ma-event-cycle-interval\
    \ of the Event\n                                   that triggered the execution\
    \ of the\n                                   Schedule.  The value is only present\n\
    \                                   in an ma-report-result-obj if the\n      \
    \                             Event that triggered the execution of\n        \
    \                           the Schedule has a defined\n                     \
    \              ma-event-cycle-interval.  The cycle\n                         \
    \          number is represented in the format\n                             \
    \      YYYYMMDD.HHMMSS where YYYY represents\n                               \
    \    the year, MM the month (1..12), DD\n                                   the\
    \ day of the months (01..31), HH\n                                   the hour\
    \ (00..23), MM the minute\n                                   (00..59), and SS\
    \ the second (00..59).\n                                   The cycle number is\
    \ using Coordinated\n                                   Universal Time (UTC).\n\
    \   ma-report-result-status:        The status code returned by the\n        \
    \                           execution of the Action.\n   ma-report-result-conflicts:\
    \     A possibly empty set of conflict\n                                   Actions\
    \ that might have impacted the\n                                   measurement\
    \ results being reported.\n   ma-report-result-tables:        An optional and\
    \ possibly empty\n                                   unordered set of result tables.\n"
- title: 4.6.3.  Definition of ma-report-conflict-obj
  contents:
  - "4.6.3.  Definition of ma-report-conflict-obj\n     object {\n         string\
    \  ma-report-conflict-schedule-name;\n         string  ma-report-conflict-action-name;\n\
    \         string  ma-report-conflict-task-name;\n     } ma-report-conflict-obj;\n\
    \   The ma-report-conflict-obj provides the information about a\n   conflicting\
    \ Action that might have impacted the measurement results.\n   It consists of\
    \ the following elements:\n   ma-report-result-schedule-name: The name of the\
    \ Schedule that may\n                                   have impacted the result.\n\
    \   ma-report-result-action-name:   The name of the Action in the\n          \
    \                         Schedule that may have impacted the\n              \
    \                     result.\n   ma-report-result-task-name:     The name of\
    \ the Task that may have\n                                   impacted the result.\n"
- title: 4.6.4.  Definition of ma-report-table-obj
  contents:
  - "4.6.4.  Definition of ma-report-table-obj\n     object {\n        [ma-registry-obj\
    \     ma-report-table-functions<0..*>;]\n        [string]             ma-report-table-column-labels<0..*>;]\n\
    \        [ma-report-row-obj   ma-report-table-rows<0..*>;]\n     } ma-report-table-obj;\n\
    \   The ma-report-table-obj represents a result table and consists of the\n  \
    \ following elements:\n   ma-report-table-functions:      An optional and possibly\
    \ empty\n                                   unordered set of registry entries\n\
    \                                   identifying the functions for which\n    \
    \                               results are reported.\n   ma-report-table-column-labels:\
    \  An optional and possibly empty\n                                   ordered\
    \ list of column labels.\n   ma-report-table-rows:           A possibly empty\
    \ ordered list of\n                                   result rows.\n"
- title: 4.6.5.  Definition of ma-report-row-obj
  contents:
  - "4.6.5.  Definition of ma-report-row-obj\n     object {\n         data       \
    \         ma-report-row-values<0..*>;\n     } ma-report-row-obj;\n   The ma-report-row-obj\
    \ represents a result row and consists of the\n   following elements:\n   ma-report-row-values:\
    \     A possibly empty ordered list of result\n                             values.\
    \  When present, it contains an\n                             ordered list of\
    \ values that align to the\n                             set of column labels\
    \ for the report.\n"
- title: '4.7.  Common Objects: Schedules'
  contents:
  - "4.7.  Common Objects: Schedules\n   A Schedule specifies the execution of a single\
    \ or repeated series of\n   Actions.  An Action extends a configured Task with\
    \ additional\n   specific parameters.  Each Schedule contains basically two elements:\n\
    \   an ordered list of Actions to be executed and an Event object\n   triggering\
    \ the execution of the Schedule.  The Schedule states what\n   Actions to run\
    \ (with what configuration) and when to run the Actions.\n   A Schedule may optionally\
    \ have an Event that stops the execution of\n   the Schedule or a maximum duration\
    \ after which a Schedule is stopped.\n   Multiple Actions contained as an ordered\
    \ list of a single Measurement\n   Schedule will be executed according to the\
    \ execution mode of the\n   Schedule.  In sequential mode, Actions will be executed\
    \ sequentially\n   and in parallel mode, all Actions will be executed concurrently.\
    \  In\n   pipelined mode, data produced by one Action is passed to the\n   subsequent\
    \ Action.  Actions contained in different Schedules execute\n   in parallel with\
    \ such conflicts being reported in the Reporting\n   Information where necessary.\
    \  If two or more Schedules have the same\n   start time, then the two will execute\
    \ in parallel.  There is no\n   mechanism to prioritize one Schedule over another\
    \ or to mutex\n   scheduled Tasks.\n   As well as specifying which Actions to\
    \ execute, the Schedule also\n   specifies how to link the data outputs from each\
    \ Action to other\n   Schedules.  Specifying this within the Schedule allows the\
    \ highest\n   level of flexibility since it is even possible to send the output\n\
    \   from different executions of the same Task Configuration to different\n  \
    \ destinations.  A single Task producing multiple different outputs is\n   expected\
    \ to properly tag the different results.  An Action receiving\n   the output can\
    \ then filter the results based on the tag if necessary.\n   For example, a Measurement\
    \ Task might report routine results to a\n   data Reporting Task in a Schedule\
    \ that communicates hourly via the\n   broadband interface, but it also outputs\
    \ emergency conditions via an\n   alarm Reporting Task in a different Schedule\
    \ communicating\n   immediately over a General Packet Radio Service (GPRS) Channel.\
    \  Note\n   that Task-to-Task data transfer is always specified in association\n\
    \   with the scheduled execution of the sending Task -- there is no need\n   for\
    \ a corresponding input specification for the receiving Task.\n   While it is\
    \ likely that an MA implementation will use a queue\n   mechanism between the\
    \ Schedules or Actions, this Information Model\n   does not mandate or define\
    \ a queue.  The Information Model, however,\n   reports the storage allocated\
    \ to Schedules and Actions so that\n   storage usage can be monitored.  Furthermore,\
    \ it is recommended that\n   MA implementations by default retain old data and\
    \ stop the execution\n   of new Measurement Tasks if the MA runs out of storage\
    \ capacity.\n   When specifying the Task to execute within the Schedule, i.e.,\n\
    \   creating an Action, it is possible to add to the Option parameters.\n   This\
    \ allows the Task Configuration to determine the common\n   characteristics of\
    \ a Task, while selected parameters (e.g., the test\n   target URL) are defined\
    \ within as Option parameters of the Action in\n   the Schedule.  A single Task's\
    \ Configuration can even be used\n   multiple times in the same Schedule with\
    \ different additional\n   parameters.  This allows for efficiency in creating\
    \ and transferring\n   the Instruction.  Note that the semantics of what happens\
    \ if an\n   Option is defined multiple times (in either the Task Configuration,\n\
    \   the Action, or both) is not standardized and will depend upon the\n   Task.\
    \  For example, some Tasks may legitimately take multiple values\n   for a single\
    \ parameter.\n   Where Options are specified in both the Action and the Task\n\
    \   Configuration, the Action Options are appended to those specified in\n   the\
    \ Task Configuration.\n   Example:  An Action of a Schedule references a single\
    \ Measurement\n      Task Configuration for measuring UDP latency.  It specifies\
    \ that\n      results are to be sent to a Schedule with a Reporting Action.\n\
    \      This Reporting Task of the Reporting Action is executed by a\n      separate\
    \ Schedule that specifies that it should run hourly at 5\n      minutes past the\
    \ hour.  When run, this Reporting Action takes the\n      data generated by the\
    \ UDP latency Measurement Task as well as any\n      other data to be included\
    \ in the hourly report and transfers it to\n      the Collector over the Report\
    \ Channel specified within its own\n      Schedule.\n   Schedules and Actions\
    \ may optionally also be given tags that are\n   included in result reports sent\
    \ to a Collector.  In addition,\n   Schedules can be given Suppression tags that\
    \ may be used to select\n   Schedules and Actions for Suppression.\n"
- title: 4.7.1.  Definition of ma-schedule-obj
  contents:
  - "4.7.1.  Definition of ma-schedule-obj\n     object {\n         string       \
    \       ma-schedule-name;\n         ma-event-obj        ma-schedule-start;\n \
    \       [ma-event-obj        ma-schedule-end;]\n        [int                 ma-schedule-duration;]\n\
    \         ma-action-obj       ma-schedule-actions<0..*>;\n         string    \
    \          ma-schedule-execution-mode;\n        [string              ma-schedule-tags<0..*>;]\n\
    \        [string              ma-schedule-suppression-tags<0..*>;]\n     } ma-schedule-obj;\n\
    \   The ma-schedule-obj is the main scheduling object.  It consists of\n   the\
    \ following elements:\n   ma-schedule-name:             A name uniquely identifying\
    \ a\n                                 scheduling object.\n   ma-schedule-start:\
    \            An Event object indicating when the\n                           \
    \      Schedule starts.\n   ma-schedule-end:              An optional Event object\
    \ controlling\n                                 the forceful termination of scheduled\n\
    \                                 Actions.  When the Event occurs, all\n     \
    \                            Actions of the Schedule will be forced\n        \
    \                         to terminate gracefully.\n   ma-schedule-duration: \
    \        An optional duration in seconds for the\n                           \
    \      Schedule.  All Actions of the Schedule\n                              \
    \   will be forced to terminate gracefully\n                                 after\
    \ the duration number of seconds\n                                 past the start\
    \ of the Schedule.\n   ma-schedule-actions:          A possibly empty ordered\
    \ list of\n                                 Actions to invoke when the Schedule\n\
    \                                 starts.\n   ma-schedule-execution-mode:   Indicates\
    \ whether the Actions should be\n                                 executed sequentially,\
    \ in parallel, or\n                                 in a pipelined mode (where\
    \ data\n                                 produced by one Action is passed to the\n\
    \                                 subsequent Action).  The default\n         \
    \                        execution mode is pipelined.\n   ma-schedule-tags:  \
    \           An optional unordered set of tags that\n                         \
    \        are reported together with the\n                                 measurement\
    \ results to a Collector.\n   ma-schedule-suppression-tags: An optional unordered\
    \ set of\n                                 Suppression tags that are used to\n\
    \                                 select Schedules to be suppressed.\n"
- title: 4.7.2.  Definition of ma-action-obj
  contents:
  - "4.7.2.  Definition of ma-action-obj\n     object {\n         string         \
    \     ma-action-name;\n         string              ma-action-config-task-name;\n\
    \        [ma-option-obj       ma-action-task-options<0..*>;]\n        [string\
    \              ma-action-destinations<0..*>;]\n        [string              ma-action-tags<0..*>;]\n\
    \        [string              ma-action-suppression-tags<0..*>;]\n      } ma-action-obj;\n\
    \   The ma-action-obj models a Task together with its Schedule-specific\n   Task\
    \ Options and Destination Schedules.  It consists of the following\n   elements:\n\
    \   ma-action-name:               A name uniquely identifying an Action\n    \
    \                             of a scheduling object.\n   ma-action-config-task-name:\
    \   A name identifying the configured Task\n                                 to\
    \ be invoked by the Action.\n   ma-action-task-options:       An optional and\
    \ possibly empty ordered\n                                 list of options (name-value\
    \ pairs) that\n                                 are passed to the Task by appending\n\
    \                                 them to the options configured for the\n   \
    \                              Task object.\n   ma-action-destinations:      \
    \ An optional and possibly empty\n                                 unordered set\
    \ of names of Destination\n                                 Schedules that consume\
    \ output produced\n                                 by this Action.\n   ma-action-tags:\
    \               An optional unordered set of tags that\n                     \
    \            are reported together with the\n                                \
    \ measurement results to a Collector.\n   ma-action-suppression-tags:   An optional\
    \ unordered set of\n                                 Suppression tags that are\
    \ used to\n                                 select Actions to be suppressed.\n"
- title: '4.8.  Common Objects: Channels'
  contents:
  - "4.8.  Common Objects: Channels\n   A Channel defines a bidirectional communication\
    \ mechanism between the\n   MA and a Controller or Collector.  Multiple Channels\
    \ can be defined\n   to enable results to be split or duplicated across different\n\
    \   Collectors.\n   Each Channel contains the details of the remote endpoint (including\n\
    \   location and security credential information such as a certificate).\n   The\
    \ timing of when to communicate over a Channel is specified by the\n   Schedule,\
    \ which executes the corresponding Control or Reporting Task.\n   The certificate\
    \ can be the digital certificate associated to the\n   Fully Qualified Domain\
    \ Name (FQDN) in the URL, or it can be the\n   certificate of the Certification\
    \ Authority that was used to issue the\n   certificate for the FQDN of the target\
    \ URL (which will be retrieved\n   later on using a communication protocol such\
    \ as Transport Layer\n   Security (TLS)).  In order to establish a secure Channel,\
    \ the MA will\n   use its own security credentials (in the Configuration Information)\n\
    \   and the given credentials for the individual Channel endpoint.\n   As with\
    \ the Task Configurations, each Channel is also given a text\n   name by which\
    \ it can be referenced as a Task Option.\n   Although the same in terms of information,\
    \ Channels used for\n   communication with the Controller are referred to as Control\
    \ Channels\n   whereas Channels to Collectors are referred to as Report Channels.\n\
    \   Hence, Control Channels will be referenced from Control Tasks\n   executed\
    \ by a Control Schedule, whereas Report Channels will be\n   referenced from within\
    \ Reporting Tasks executed by an Instruction\n   Schedule.\n   Multiple interfaces\
    \ are also supported.  For example, the Reporting\n   Task could be configured\
    \ to send some results over GPRS.  This is\n   especially useful when such results\
    \ indicate the loss of connectivity\n   on a different network interface.\n  \
    \ Example:  A Channel used for reporting results may specify that\n      results\
    \ are to be sent to the URL (https://collector.example.org/\n      report/), using\
    \ the appropriate digital certificate to establish a\n      secure Channel.\n"
- title: 4.8.1.  Definition of ma-channel-obj
  contents:
  - "4.8.1.  Definition of ma-channel-obj\n     object {\n         string        \
    \      ma-channel-name;\n         url                 ma-channel-target;\n   \
    \      credentials         ma-channel-credentials;\n         [string         \
    \    ma-channel-interface-name;]\n     } ma-channel-obj;\n   The ma-channel-obj\
    \ consists of the following elements:\n   ma-channel-name:            A unique\
    \ name identifying the Channel\n                               object.\n   ma-channel-target:\
    \          A URL identifying the target Channel\n                            \
    \   endpoint.\n   ma-channel-credentials:     The security credentials needed\
    \ to\n                               establish a secure Channel.\n   ma-channel-interface-name:\
    \  An optional name of the network interface\n                               to\
    \ be used.  If not present, the IP\n                               protocol stack\
    \ will select a suitable\n                               interface.\n"
- title: '4.9.  Common Objects: Task Configurations'
  contents:
  - "4.9.  Common Objects: Task Configurations\n   Conceptually, each Task Configuration\
    \ defines the parameters of a\n   Task that the MA may perform at some point in\
    \ time.  It does not by\n   itself actually instruct the MA to perform them at\
    \ any particular\n   time (this is done by a Schedule).  Tasks can be Measurement\
    \ Tasks\n   (i.e., those Tasks actually performing some type of passive or active\n\
    \   measurement) or any other scheduled activity performed by the MA such\n  \
    \ as transferring information to or from the Controller and Collectors.\n   Other\
    \ examples of Tasks may include data manipulation or processing\n   Tasks conducted\
    \ on the MA.\n   A Measurement Task Configuration is the same in information terms\
    \ to\n   any other Task Configuration.  Both Measurement and non-Measurement\n\
    \   Tasks may have registry entries to enable the MA to uniquely identify\n  \
    \ the Task it should execute and retrieve the schema for any parameters\n   that\
    \ may be passed to the Task.  Registry entries are specified as a\n   URI and\
    \ can therefore be used to identify the Task within a namespace\n   or point to\
    \ a web or local file location for the Task information.\n   As mentioned previously,\
    \ these URIs may be used to identify the\n   Measurement Task in a public namespace\
    \ such as the to-be-created IPPM\n   registry described in [IPPM-REG].\n   Example:\
    \  A Measurement Task Configuration may configure a single\n      Measurement\
    \ Task for measuring UDP latency.  The Measurement Task\n      Configuration could\
    \ define the destination port and address for\n      the measurement as well as\
    \ the duration, internal packet timing\n      strategy, and other parameters (for\
    \ example, a stream for one hour\n      and sending one packet every 500 ms).\
    \  It may also define the\n      output type and possible parameters (for example,\
    \ the output type\n      can be the 95th percentile mean) where the Measurement\
    \ Task\n      accepts such parameters.  It does not define when the Task starts\n\
    \      (this is defined by the Schedule element), so it does not by\n      itself\
    \ instruct the MA to actually perform this Measurement Task.\n   The Task Configuration\
    \ will include a local short name for reference\n   by a Schedule.  Task Configurations\
    \ may also refer to registry\n   entries as described above.  In addition, the\
    \ Task can be configured\n   through a set of configuration Options.  The nature\
    \ and number of\n   these Options will depend upon the Task.  These Options are\
    \ expressed\n   as name-value pairs, although the 'value' may be a structured\
    \ object\n   instead of a simple string or numeric value.  The implementation\
    \ of\n   these name-value pairs will vary between data models.\n   An Option that\
    \ must be present for Reporting Tasks is the Channel\n   reference specifying\
    \ how to communicate with a Collector.  This is\n   included in the Task Options\
    \ and will have a value that matches a\n   Channel name that has been defined\
    \ in the Instruction.  Similarly,\n   Control Tasks will have a similar Option\
    \ with the value set to a\n   specified Control Channel.\n   A Reporting Task\
    \ might also have a flag parameter, defined as an\n   Option, to indicate whether\
    \ to send a report without measurement\n   results if there is no measurement\
    \ result data pending to be\n   transferred to the Collector.  In addition, many\
    \ Tasks will receive\n   (as a parameter) information about which interface to\
    \ use.\n   In addition, the Task Configuration may optionally also be given tags\n\
    \   that can carry a Measurement Cycle ID.  The purpose of this ID is to\n   easily\
    \ identify a set of measurement results that have been produced\n   by Measurement\
    \ Tasks with comparable Options.  This ID could be\n   manually incremented or\
    \ otherwise changed when an Option change is\n   implemented, which could mean\
    \ that two sets of results should not be\n   directly compared.\n"
- title: 4.9.1.  Definition of ma-task-obj
  contents:
  - "4.9.1.  Definition of ma-task-obj\n     object {\n         string           \
    \   ma-task-name;\n         ma-registry-obj     ma-task-functions<0..*>;\n   \
    \     [ma-option-obj       ma-task-options<0..*>;]\n        [string          \
    \    ma-task-tags<0..*>;]\n     } ma-task-obj;\n   The ma-task-obj defines a configured\
    \ Task that can be invoked as part\n   of an Action.  A configured Task can be\
    \ referenced by its name, and\n   it contains a possibly empty set of URIs to\
    \ link to registry entries.\n   Options allow the configuration of Task parameters\
    \ (in the form of\n   name-value pairs).  The ma-task-obj consists of the following\n\
    \   elements:\n   ma-task-name:             A name uniquely identifying a configured\n\
    \                             Task object.\n   ma-task-functions:        A possibly\
    \ empty unordered set of registry\n                             entries identifying\
    \ the functions of the\n                             configured Task.\n   ma-task-options:\
    \          An optional and possibly empty ordered list\n                     \
    \        of options (name-value pairs) that are\n                            \
    \ passed to the configured Task.\n   ma-task-tags:             An optional unordered\
    \ set of tags that are\n                             reported together with the\
    \ measurement\n                             results to a Collector.\n"
- title: 4.9.2.  Definition of ma-option-obj
  contents:
  - "4.9.2.  Definition of ma-option-obj\n     object {\n         string         \
    \     ma-option-name;\n        [object              ma-option-value;]\n     }\
    \ ma-option-obj;\n   The ma-option-obj models a name-value pair and consists of\
    \ the\n   following elements:\n   ma-option-name:           The name of the option.\n\
    \   ma-option-value:          The optional value of the option.\n   The ma-option-obj\
    \ is used to define Task Configuration Options.  Task\n   Configuration Options\
    \ are generally Task specific.  For Tasks\n   associated with an entry in a registry,\
    \ the registry may define well-\n   known option names (e.g., the so-called parameters\
    \ in the to-be-\n   created IPPM metric registry described in [IPPM-REG]).  Control\
    \ and\n   Reporting Tasks need to know the Channel they are going to use.  The\n\
    \   common option name for specifying the Channel is \"channel\" where the\n \
    \  option's value refers to the name of an ma-channel-obj.\n"
- title: '4.10.  Common Objects: Registry Information'
  contents:
  - "4.10.  Common Objects: Registry Information\n   Tasks and Actions can be associated\
    \ with entries in a registry.  A\n   registry object refers to an entry in a registry\
    \ (identified by a\n   URI), and it may define a set of roles.\n"
- title: 4.10.1.  Definition of ma-registry-obj
  contents:
  - "4.10.1.  Definition of ma-registry-obj\n     object {\n         uri         \
    \        ma-registry-uri;\n        [string              ma-registry-role<0..*>;]\n\
    \     } ma-registry-obj;\n   The ma-registry-obj refers to an entry of a registry,\
    \ and it defines\n   the associated role(s).  The ma-registry-obj consists of\
    \ the\n   following elements:\n   ma-registry-uri:          A URI identifying\
    \ an entry in a registry.\n   ma-registry-role:         An optional and possibly\
    \ empty unordered\n                             set of roles for the identified\
    \ registry\n                             entry.\n"
- title: '4.11.  Common Objects: Event Information'
  contents:
  - "4.11.  Common Objects: Event Information\n   The Event information object used\
    \ throughout the Information Models\n   can initially take one of several different\
    \ forms.  Additional forms\n   may be defined later in order to bind the execution\
    \ of Schedules to\n   additional Events.  The initially defined Event forms are:\n\
    \   1.  Periodic Timing: Emits multiple Events periodically according to\n   \
    \    an interval time defined in seconds\n   2.  Calendar Timing: Emits multiple\
    \ Events according to a calendar-\n       based pattern, e.g., 22 minutes past\
    \ each hour of the day on\n       weekdays\n   3.  One-Off Timing: Emits one Event\
    \ at a specific date and time\n   4.  Immediate: Emits one Event as soon as possible\n\
    \   5.  Startup: Emits an Event whenever the MA is started (e.g., at\n       device\
    \ startup)\n   6.  Controller Lost: Emits an Event when connectivity to the\n\
    \       Controller has been lost\n   7.  Controller Connected: Emits an Event\
    \ when connectivity to the\n       Controller has been established or re-established\n\
    \   Optionally, each of the Event options may also specify a randomness\n   that\
    \ should be evaluated and applied separately to each indicated\n   Event.  This\
    \ randomness parameter defines a uniform interval in\n   seconds over which the\
    \ start of the Task is delayed from the starting\n   times specified by the Event\
    \ object.\n   Both the periodic and calendar timing objects allow for a series\
    \ of\n   Actions to be executed.  While both have an optional end time, it is\n\
    \   best practice to always configure an end time and refresh the\n   information\
    \ periodically to ensure that lost MAs do not continue\n   their Tasks forever.\n\
    \   Startup Events are only created on device startup, not when a new\n   Instruction\
    \ is transferred to the MA.  If scheduled Task execution is\n   desired both on\
    \ the transfer of the Instruction and on device\n   restart, then both the Immediate\
    \ and Startup timing needs to be used\n   in conjunction.\n   The datetime format\
    \ used for all elements in the Information Model\n   MUST conform to RFC 3339\
    \ [RFC3339].\n"
- title: 4.11.1.  Definition of ma-event-obj
  contents:
  - "4.11.1.  Definition of ma-event-obj\n     object {\n        string          \
    \     ma-event-name;\n        union {\n            ma-periodic-obj           \
    \  ma-event-periodic;\n            ma-calendar-obj             ma-event-calendar;\n\
    \            ma-one-off-obj              ma-event-one-off;\n            ma-immediate-obj\
    \            ma-event-immediate;\n            ma-startup-obj              ma-event-startup;\n\
    \            ma-controller-lost-obj      ma-event-controller-lost;\n         \
    \   ma-controller-connected-obj ma-event-controller-connected;\n        }\n  \
    \      [int                 ma-event-random-spread;]\n        [int           \
    \      ma-event-cycle-interval;]\n     } ma-event-obj;\n   The ma-event-obj is\
    \ the main Event object.  Event objects are\n   identified by a name.  A generic\
    \ Event object itself contains a more\n   specific Event object.  The set of specific\
    \ Event objects should be\n   extensible.  The initial set of specific Event objects\
    \ is further\n   described below.  The ma-event-obj also includes an optional\
    \ uniform\n   random spread that can be used to randomize the start times of\n\
    \   Schedules triggered by an Event.  The ma-event-obj consists of the\n   following\
    \ elements:\n   ma-event-name:                  The name uniquely identifies an\
    \ Event\n                                   object.  Schedules refer to Event\n\
    \                                   objects by this name.\n   ma-event-periodic:\
    \              The ma-event-periodic is present for\n                        \
    \           periodic timing objects.\n   ma-event-calendar:              The ma-event-calendar\
    \ is present for\n                                   calendar timing objects.\n\
    \   ma-event-one-off:               The ma-event-one-off is present for\n    \
    \                               one-off timing objects.\n   ma-event-immediate:\
    \             The ma-event-immediate is present for\n                        \
    \           immediate Event objects.\n   ma-event-startup:               The ma-event-startup\
    \ is present for\n                                   startup Event objects.\n\
    \   ma-event-controller-lost:       The ma-event-controller-lost is\n        \
    \                           present for connectivity to\n                    \
    \               Controller lost Event objects.\n   ma-event-controller-connected:\
    \  The ma-event-controller-connected is\n                                   present\
    \ for connectivity to\n                                   Controller established\
    \ Event objects.\n   ma-event-random-spread:         The optional ma-event-random-spread\n\
    \                                   adds a random delay defined in\n         \
    \                          seconds to the Event object.  No\n                \
    \                   random delay is added if\n                               \
    \    ma-event-random-spread does not\n                                   exist.\n\
    \   ma-event-cycle-interval:        The optional ma-event-cycle-interval\n   \
    \                                defines the duration of the time\n          \
    \                         interval in seconds that is used to\n              \
    \                     calculate cycle numbers.  No cycle\n                   \
    \                number is calculated if\n                                   ma-event-cycle-interval\
    \ does not\n                                   exist.\n"
- title: 4.11.2.  Definition of ma-periodic-obj
  contents:
  - "4.11.2.  Definition of ma-periodic-obj\n     object {\n        [datetime    \
    \        ma-periodic-start;]\n        [datetime            ma-periodic-end;]\n\
    \         int                 ma-periodic-interval;\n     } ma-periodic-obj;\n\
    \   The ma-periodic-obj timing object has an optional start and an\n   optional\
    \ end time plus a periodic interval.  Schedules using an\n   ma-periodic-obj are\
    \ started periodically between the start and end\n   time.  The ma-periodic-obj\
    \ consists of the following elements:\n   ma-periodic-start:        The optional\
    \ date and time at which\n                             Schedules using this object\
    \ are first\n                             started.  If not present, it defaults\
    \ to\n                             immediate.\n   ma-periodic-end:          The\
    \ optional date and time at which\n                             Schedules using\
    \ this object are last\n                             started.  If not present,\
    \ it defaults to\n                             indefinite.\n   ma-periodic-interval:\
    \     The interval defines the time in seconds\n                             between\
    \ two consecutive starts of Tasks.\n"
- title: 4.11.3.  Definition of ma-calendar-obj
  contents:
  - "4.11.3.  Definition of ma-calendar-obj\n   Calendar timing supports the routine\
    \ execution of Schedules at\n   specific times and/or on specific dates.  It can\
    \ support more\n   flexible timing than periodic timing since the execution of\
    \ Schedules\n   does not have to be uniformly spaced.  For example, a calendar\
    \ timing\n   could support the execution of a Measurement Task every hour between\n\
    \   6 pm and midnight on weekdays only.\n   Calendar timing is also required to\
    \ perform measurements at\n   meaningful times in relation to network usage (e.g.,\
    \ at peak times).\n   If the optional time zone offset is not supplied, then local\
    \ system\n   time is assumed.  This is essential in some use cases to ensure\n\
    \   consistent peak-time measurements as well as supporting MA devices\n   that\
    \ may be in an unknown time zone or to roam between different time\n   zones (but\
    \ know their own time zone information such as through the\n   mobile network).\n\
    \   The calendar elements within the calendar timing do not have defaults\n  \
    \ in order to avoid accidental high-frequency execution of Tasks.  If\n   all\
    \ possible values for an element are desired, then the wildcard *\n   is used.\n\
    \     object {\n        [datetime            ma-calendar-start;]\n        [datetime\
    \            ma-calendar-end;]\n        [string              ma-calendar-months<0..*>;]\n\
    \        [string              ma-calendar-days-of-week<0..*>;]\n        [string\
    \              ma-calendar-days-of-month<0..*>;]\n        [string            \
    \  ma-calendar-hours<0..*>;]\n        [string              ma-calendar-minutes<0..*>;]\n\
    \        [string              ma-calendar-seconds<0..*>;]\n        [int      \
    \           ma-calendar-timezone-offset;]\n     } ma-calendar-obj;\n   ma-calendar-start:\
    \            The optional date and time at which\n                           \
    \      Schedules using this object are first\n                               \
    \  started.  If not present, it defaults\n                                 to\
    \ immediate.\n   ma-calendar-end:              The optional date and time at which\n\
    \                                 Schedules using this object are last\n     \
    \                            started.  If not present, it defaults\n         \
    \                        to indefinite.\n   ma-calendar-months:           The\
    \ optional set of months (1-12) on\n                                 which Tasks\
    \ scheduled using this object\n                                 are started. \
    \ The wildcard * means all\n                                 months.  If not present,\
    \ it defaults to\n                                 no months.\n   ma-calendar-days-of-week:\
    \     The optional set of days of a week\n                                 (\"\
    Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\",\n                                 \"\
    Sat\", \"Sun\") on which Tasks scheduled\n                                 using\
    \ this object are started.  The\n                                 wildcard * means\
    \ all days of the week.\n                                 If not present, it defaults\
    \ to no days.\n   ma-calendar-days-of-month:    The optional set of days of a\
    \ month\n                                 (1-31) on which Tasks scheduled using\n\
    \                                 this object are started.  The wildcard\n   \
    \                              * means all days of a month.  If not\n        \
    \                         present, it defaults to no days.\n   ma-calendar-hours:\
    \            The optional set of hours (0-23) on\n                           \
    \      which Tasks scheduled using this object\n                             \
    \    are started.  The wildcard * means all\n                                \
    \ hours of a day.  If not present, it\n                                 defaults\
    \ to no hours.\n   ma-calendar-minutes:          The optional set of minutes (0-59)\
    \ on\n                                 which Tasks scheduled using this object\n\
    \                                 are started.  The wildcard * means all\n   \
    \                              minutes of an hour.  If not present, it\n     \
    \                            defaults to no minutes.\n   ma-calendar-seconds:\
    \          The optional set of seconds (0-59) on\n                           \
    \      which Tasks scheduled using this object\n                             \
    \    are started.  The wildcard * means all\n                                \
    \ seconds of an hour.  If not present, it\n                                 defaults\
    \ to no seconds.\n   ma-calendar-timezone-offset:  The optional time zone offset\
    \ in\n                                 minutes.  If not present, it defaults\n\
    \                                 to the system's local time zone.\n   If a day\
    \ of the month is specified that does not exist in the month\n   (e.g., the 29th\
    \ of February), then those values are ignored.\n"
- title: 4.11.4.  Definition of ma-one-off-obj
  contents:
  - "4.11.4.  Definition of ma-one-off-obj\n     object {\n         datetime     \
    \       ma-one-off-time;\n     } ma-one-off-obj;\n   The ma-one-off-obj timing\
    \ object specifies a fixed point in time.\n   Schedules using an ma-one-off-obj\
    \ are started once at the specified\n   date and time.  The ma-one-off-obj consists\
    \ of the following\n   elements:\n   ma-one-off-time:          The date and time\
    \ at which Schedules using\n                             this object are started.\n"
- title: 4.11.5.  Definition of ma-immediate-obj
  contents:
  - "4.11.5.  Definition of ma-immediate-obj\n     object {\n                    \
    \         // empty\n     } ma-immediate-obj;\n   The ma-immediate-obj Event object\
    \ has no further information\n   elements.  Schedules using an ma-immediate-obj\
    \ are started as soon as\n   possible.\n"
- title: 4.11.6.  Definition of ma-startup-obj
  contents:
  - "4.11.6.  Definition of ma-startup-obj\n     object {\n                      \
    \       // empty\n     } ma-startup-obj;\n   The ma-startup-obj Event object has\
    \ no further information elements.\n   Schedules or Suppressions using an ma-startup-obj\
    \ are started at MA\n   initialization time.\n"
- title: 4.11.7.  Definition of ma-controller-lost-obj
  contents:
  - "4.11.7.  Definition of ma-controller-lost-obj\n     object {\n              \
    \               // empty\n     } ma-controller-lost-obj;\n   The ma-controller-lost-obj\
    \ Event object has no further information\n   elements.  The ma-controller-lost-obj\
    \ indicates that connectivity to\n   the Controller has been lost.  This is determined\
    \ by a timer started\n   after each successful contact with a Controller.  When\
    \ the timer\n   reaches the controller-timeout (measured in seconds), a\n   ma-controller-lost-obj\
    \ Event is generated.  This Event may be used to\n   start a Suppression.\n"
- title: 4.11.8.  Definition of ma-controller-connected-obj
  contents:
  - "4.11.8.  Definition of ma-controller-connected-obj\n     object {\n         \
    \                    // empty\n     } ma-controller-connected-obj;\n   The ma-controller-connected-obj\
    \ Event object has no further\n   information elements.  The ma-controller-connected-obj\
    \ indicates that\n   connectivity to the Controller has been established again\
    \ after it\n   was lost.  This Event may be used to end a Suppression.\n"
- title: 5.  Example Execution
  contents:
  - "5.  Example Execution\n   The example execution has two Event sources, E1 and\
    \ E2, and three\n   Schedules, S1, S2, and S3.  The Schedule S3 is started by\
    \ Events of\n   Event source E2 while the Schedules S1 and S2 are both started\
    \ by\n   Events of the Event source E1.  The Schedules S1 and S2 have two\n  \
    \ Actions each, and Schedule S3 has a single Action.  The Event source\n   E2\
    \ has no randomization while the Event source E1 has the\n   randomization r.\n\
    \   Figure 2 shows a possible timeline of an execution.  The time T is\n   progressing\
    \ downwards.  The dotted vertical line indicates progress\n   of time while a\
    \ dotted horizontal line indicates which Schedules are\n   triggered by an Event.\
    \  Lines of tildes indicate data flowing from an\n   Action to another Schedule.\
    \  Actions within a Schedule are named A1,\n   A2, etc.\n     E2    E1   T   \
    \        S1           S2            S3\n                        sequential   \
    \ parallel     pipelined\n                :\n             e0 +\n             \
    \   :\n                :\n           e0+r + .......... + .......... ++\n     \
    \           :            | A1      A1 || A2\n                :            +  \
    \          |+ ~~~~~~~>\n                :            | A2         |\n        \
    \        :            |            + ~~~~~~~~>\n                :            +\
    \ ~~~~~~~~~~~~~~~~~~~~~>\n                :\n                :\n             e1\
    \ +\n                :\n           e1+r + .......... + .......... ++\n       \
    \         :            | A1      A1 ||\n                :            |       \
    \     +|~~~~~~~>\n                :            |             | A2\n          \
    \      :            +             +~~~~~~~>\n                :            | A2\n\
    \                :            + ~~~~~~~~~~~~~~~~~~~~>\n      e0        + ...................................\
    \ +\n                :                                     | A1\n            \
    \ e3 +                                     |\n           e3+r + .......... + ..........\
    \ ++          |\n                :            | A1      A1 || A2       |\n   \
    \             :            +            ++ ~~~~~~>  |\n                :     \
    \       | A2                     +\n                :            + ~~~~~~~~~~~~~~~~~~~~>\n\
    \                V\n                        Figure 2: Example Execution\n   Note\
    \ that implementations must handle possible concurrency issues.\n   In the example\
    \ execution, Action A1 of Schedule S3 is consuming the\n   data that has been\
    \ forwarded to Schedule S3 while additional data is\n   arriving from Action A2\
    \ of Schedule S2.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This Information Model deals with information\
    \ about the control and\n   reporting of the Measurement Agent.  There are broadly\
    \ two security\n   considerations for such an Information Model.  Firstly, the\n\
    \   Information Model has to be sufficient to establish secure\n   communication\
    \ Channels to the Controller and Collector such that\n   other information can\
    \ be sent and received securely.  Additionally,\n   any mechanisms that the Network\
    \ Operator or other device\n   administrator employs to preconfigure the MA must\
    \ also be secure to\n   protect unauthorized parties from modifying Preconfiguration\n\
    \   Information.  These mechanisms are important to ensure that the MA\n   cannot\
    \ be hijacked, for example, to participate in a distributed\n   denial-of-service\
    \ attack.\n   The second consideration is that no mandated information items should\n\
    \   pose a risk to confidentiality or privacy given such secure\n   communication\
    \ Channels.  For this latter reason, items such as the MA\n   context and MA-ID\
    \ are left optional and can be excluded from some\n   deployments.  This may,\
    \ for example, allow the MA to remain anonymous\n   and for information about\
    \ location or other context that might be\n   used to identify or track the MA\
    \ to be omitted or blurred.\n   Implementations and deployments should also be\
    \ careful about exposing\n   device-ids when this is not strictly needed.\n  \
    \ An implementation of this Information Model should support all the\n   security\
    \ and privacy requirements associated with the LMAP Framework\n   [RFC7594]. \
    \ In addition, users of this Information Model are advised\n   to choose identifiers\
    \ for Group-IDs, tags, or names of Information\n   Model objects (e.g., configured\
    \ Tasks, Schedules, or Actions) that do\n   not reveal any sensitive information\
    \ to people authorized to process\n   measurement results but who are not authorized\
    \ to know details about\n   the Measurement Agents that were used to perform the\
    \ measurement.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ISO.10646]\n              International Organization\
    \ for Standardization,\n              \"Information Technology - Universal Coded\
    \ Character Set\n              (UCS)\", ISO Standard 10646:2014, September 2014.\n\
    \   [POSIX.2]  The Open Group, \"Standard for Information Technology -\n     \
    \         Portable Operating System Interface (POSIX(R)) Base\n              Specifications,\
    \ Issue 7\", IEEE Standard 1003.1, 2016\n              Edition, DOI, 10.1109/IEEESTD.2016.7582338,\
    \ September\n              2016.\n   [RFC2119]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n\
    \              DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n   \
    \           Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,\n       \
    \       <https://www.rfc-editor.org/info/rfc3339>.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n  \
    \ [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n         \
    \     Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI 10.17487/RFC4122,\
    \ July 2005,\n              <https://www.rfc-editor.org/info/rfc4122>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [IPPM-REG] Bagnulo, M., Claise, B., Eardley,\
    \ P., Morton, A., and A.\n              Akhter, \"Registry for Performance Metrics\"\
    , Work in\n              Progress, draft-ietf-ippm-metric-registry-12, June 2017.\n\
    \   [RFC3444]  Pras, A. and J. Schoenwaelder, \"On the Difference between\n  \
    \            Information Models and Data Models\", RFC 3444,\n              DOI\
    \ 10.17487/RFC3444, January 2003,\n              <https://www.rfc-editor.org/info/rfc3444>.\n\
    \   [RFC7398]  Bagnulo, M., Burbridge, T., Crawford, S., Eardley, P., and\n  \
    \            A. Morton, \"A Reference Path and Measurement Points for\n      \
    \        Large-Scale Measurement of Broadband Performance\",\n              RFC\
    \ 7398, DOI 10.17487/RFC7398, February 2015,\n              <https://www.rfc-editor.org/info/rfc7398>.\n\
    \   [RFC7536]  Linsner, M., Eardley, P., Burbridge, T., and F. Sorensen,\n   \
    \           \"Large-Scale Broadband Measurement Use Cases\", RFC 7536,\n     \
    \         DOI 10.17487/RFC7536, May 2015,\n              <https://www.rfc-editor.org/info/rfc7536>.\n\
    \   [RFC7594]  Eardley, P., Morton, A., Bagnulo, M., Burbridge, T.,\n        \
    \      Aitken, P., and A. Akhter, \"A Framework for Large-Scale\n            \
    \  Measurement of Broadband Performance (LMAP)\", RFC 7594,\n              DOI\
    \ 10.17487/RFC7594, September 2015,\n              <https://www.rfc-editor.org/info/rfc7594>.\n\
    \   [RFC8194]  Schoenwaelder, J. and V. Bajpai, \"A YANG Data Model for\n    \
    \          LMAP Measurement Agents\", RFC 8194, DOI 10.17487/RFC8194,\n      \
    \        August 2017, <http://www.rfc-editor.org/info/rfc8194>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Several people contributed to this specification by reviewing\
    \ early\n   draft versions and actively participating in the LMAP Working Group\n\
    \   (apologies to those unintentionally omitted): Vaibhav Bajpai, Michael\n  \
    \ Bugenhagen, Timothy Carey, Alissa Cooper, Kenneth Ko, Al Morton, Dan\n   Romascanu,\
    \ Henning Schulzrinne, Andrea Soppera, Barbara Stark, and\n   Jason Weil.\n  \
    \ Marcelo Bagnulo, Trevor Burbridge, Philip Eardley, and Juergen\n   Schoenwaelder\
    \ worked in part on the Leone research project, which\n   received funding from\
    \ the European Union Seventh Framework Programme\n   [FP7/2007-2013] under grant\
    \ agreement number 317647.\n   Juergen Schoenwaelder was partly funded by Flamingo,\
    \ a Network of\n   Excellence project (ICT-318488) supported by the European Commission\n\
    \   under its Seventh Framework Programme.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Trevor Burbridge\n   BT\n   Adastral Park, Martlesham\
    \ Heath\n   Ipswich  IP5 3RE\n   United Kingdom\n   Email: trevor.burbridge@bt.com\n\
    \   Philip Eardley\n   BT\n   Adastral Park, Martlesham Heath\n   Ipswich  IP5\
    \ 3RE\n   United Kingdom\n   Email: philip.eardley@bt.com\n   Marcelo Bagnulo\n\
    \   Universidad Carlos III de Madrid\n   Av. Universidad 30\n   Leganes, Madrid\
    \  28911\n   Spain\n   Email: marcelo@it.uc3m.es\n   Juergen Schoenwaelder\n \
    \  Jacobs University Bremen\n   Campus Ring 1\n   Bremen  28759\n   Germany\n\
    \   Email: j.schoenwaelder@jacobs-university.de\n"
