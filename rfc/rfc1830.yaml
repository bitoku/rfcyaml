- title: __initial_text__
  contents:
  - "                        SMTP Service Extensions\n                       for Transmission\
    \ of Large\n                        and Binary MIME Messages\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   This memo defines two extensions to the SMTP service.  The first\n\
    \   service enables a SMTP client and server to negotiate the use of an\n   alternate\
    \ DATA command \"BDAT\" for efficiently sending large MIME\n   messages.  The\
    \ second extension takes advantage of the BDAT command\n   to permit the negotiated\
    \ sending of unencoded binary data.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   The MIME extensions to the Internet message protocol provides\
    \ for the\n   transmission of many kinds of data which were previously unsupported\n\
    \   in Internet mail.  Anticipating the need to more efficiently\n   transport\
    \ the new media made possible with MIME, the SMTP protocol\n   has been extended\
    \ to provide transport for new message types.  RFC\n   1426 defines one such extension\
    \ for the transmission of unencoded 8\n   bit MIME messages [8BIT].  This service\
    \ extension permits the\n   receiver SMTP to declare support for 8 bit body parts\
    \ and the sender\n   to request 8 bit transmission of a particular message.\n\
    \   One expected result of the use of MIME is that the Internet mail\n   system\
    \ will be expected to carry very large mail messages.  In such\n   transactions,\
    \ there is a need to eliminate the requirement that the\n   message be scanned\
    \ for \"CR LF . CR LF\" sequences upon sending and\n   receiving to detect the\
    \ end of message.\n   Independent of the need to send large messages, Internet\
    \ mail is\n   increasingly multi-media there is a need to avoid the overhead of\n\
    \   base64 and quoted-printable encoding of binary objects sent using the\n  \
    \ MIME message format over SMTP between hosts which support binary\n   message\
    \ processing.\n   This memo uses the mechanism defined in [ESMTP] to define two\n\
    \   extensions to the SMTP service whereby a client (\"sender-SMTP\") may\n  \
    \ declare support for the message chunking transmission mode using the\n   BDAT\
    \ command and support for the sending of Binary messages.\n"
- title: 3. Framework for the Large Message Extensions
  contents:
  - "3. Framework for the Large Message Extensions\n   The following service extension\
    \ is hereby defined:\n          1) The name of the data chunking service extension\
    \ is\n          \"CHUNKING\".\n          2) The EHLO keyword value associated\
    \ with this extension is\n          \"CHUNKING\".\n          3) A new SMTP verb\
    \ is defined \"BDAT\" as an alternative to\n          the \"DATA\" command of\
    \ [RFC821]. The BDAT verb takes two\n          arguments.  The first argument\
    \ indicates the length of the\n          binary data packet.  The second optional\
    \ argument indicates\n          that the data packet is the last.\n          \
    \     bdat-cmd   ::= \"BDAT\" SP chunk-size\n                              [ SP\
    \ end-marker ] CR LF\n               chunk-size ::= 1*DIGIT\n               end-marker\
    \ ::= \"LAST\"\n   The CHUNKING service extension enables the use of the BDAT\n\
    \   alternative to the DATA command.  This extension can be used for any\n   message,\
    \ whether 7 bit, 8BITMIME or BINARYMIME.\n   When a client SMTP wishes to submit\
    \ (using the MAIL command) a large\n   message using the CHUNKING extension, it\
    \ first issues the EHLO\n   command to the server SMTP.  If the server SMTP responds\
    \ with code\n   250 to the EHLO command, and the response includes the EHLO keyword\n\
    \   value CHUNKING, then the server SMTP is indicating that it supports\n   the\
    \ BDAT command and will accept the sending of messages in chunks.\n   After all\
    \ MAIL FROM and RCPT TO responses are collected and\n   processed, the message\
    \ is sent using a series of BDAT commands.  The\n   BDAT command takes one argument,\
    \ the exact length of the data segment\n   in octets.  The message data is sent\
    \ immediately after the BDAT\n   command.  Once the receiver-SMTP receives the\
    \ specified number of\n   octets, it will return a 250 reply code.\n   The LAST\
    \ parameter on the BDAT command indicates that this is the\n   last chunk of message\
    \ data to be sent.  Any BDAT command sent after\n   the BDAT LAST is illegal and\
    \ must be replied to with a 503 \"Bad\n   sequence of commands\" reply code. The\
    \ state resulting from this error\n   is indeterminate.  A RSET command must be\
    \ sent to clear the\n   transaction before continuing.\n   A 250 response should\
    \ be sent to each BDAT data block.  If a 5XX code\n   is sent in response to a\
    \ BDAT chunk the message should be considered\n   failed and, the sender SMTP\
    \ must not send any additional BDAT\n   segments.  If using the ESMTP pipelining\
    \ extensions [PIPE], the\n   sender SMTP must complete the sending of the current\
    \ segment and not\n   send any more BDATs.  When streaming, the receiver SMTP\
    \ must accept\n   and discard additional BDAT chunks after the failed BDAT.  After\n\
    \   receiving a 5XX error in response to a BDAT command, the resulting\n   state\
    \ is indeterminate.  A RSET command must be issued to clear the\n   transaction\
    \ before additional commands may be sent.\n      Note that an error on the receiver\
    \ SMTP such as disk full or\n      imminent shutdown can only be reported after\
    \ the BDAT segment has\n      been sent.  It is therefore important to choose\
    \ a reasonable chunk\n      size given the expected end to end bandwidth.\n  \
    \ The RSET command when issued during after the first BDAT and before\n   the\
    \ BDAT LAST clears all segments sent during that transaction and\n   resets the\
    \ session.\n   DATA and BDAT commands cannot be used in the same transaction.\
    \  If a\n   DATA statement is issued after a BDAT for the current transaction,\
    \ a\n   503 \"Bad sequence of commands\" must be issued.  The state resulting\n\
    \   from this error is indeterminate.  A RSET command must be sent to\n   clear\
    \ the transaction before continuing.  There is no prohibition on\n   using DATA\
    \ and BDAT in the same session, so long as they are not\n   mixed in the same\
    \ transaction.\n   The local storage size of a message may not accurately reflect\
    \ the\n   actual size of the message sent due to local storage conventions.  In\n\
    \   particular, text messages sent with the BDAT command must be sent in\n   the\
    \ canonical MIME format with lines delimited with a <CR><LF>.  It\n   may not\
    \ be possible to convert the entire message to the canonical\n   format at once.\
    \ Chunking provides a mechanism to convert the message\n   to canonical form,\
    \ accurately count the bytes, and send the message a\n   single chunk at a time.\n\
    \      Note that correct byte counting is essential.  If too many bytes\n    \
    \  are indicated by the sender SMTP, the receiver SMTP will continue\n      to\
    \ wait for the remainder of the data or will read the subsequent\n      command\
    \ as additional message data.  In the case where a portion\n      of the previous\
    \ command was read as data, the parser will return a\n      syntax error when\
    \ the incomplete command is read.\n      If too few bytes are indicated by the\
    \ sender SMTP, the receiver\n      SMTP will interpret the remainder of the message\
    \ data as invalid\n      commands.  Note that the remainder of the message data\
    \ may be\n      binary and as such lexigraphical parsers must be prepared to\n\
    \      receive, process, and reject lines of arbitrary octets.\n"
- title: 4. Framework for the Binary Service Extension
  contents:
  - "4. Framework for the Binary Service Extension\n   The following service extension\
    \ is hereby defined:\n      1) The name of the binary service extension is \"\
    BINARYMIME\".\n      2) The EHLO keyword value associated with this extension\
    \ is\n         \"BINARYMIME\".\n      3) The BINARYMIME service extension can\
    \ only be used with\n         the \"CHUNKING\" service extension.\n      4) No\
    \ parameter is used with the BINARYMIME keyword.\n      5) One additional parameter\
    \ to the BODY keyword defined\n         [8BIT] for the MAIL FROM command is defined,\
    \ \"BINARYMIME\".\n         The value \"BINARYMIME\" associated with this parameter\n\
    \         indicates that this message is a Binary MIME message (in\n         strict\
    \ compliance with [MIME]) with arbitrary octet content\n         being sent. The\
    \ revised syntax of the value is as follows,\n         using the ABNF notation\
    \ of [RFC822]:\n         body-value ::= \"7BIT\" / \"8BITMIME\" / \"BINARYMIME\"\
    \n      6) No new verbs are defined for the BINARYMIME extension.\n   A sender\
    \ SMTP may request that a binary MIME message be sent without\n   transport encoding\
    \ by sending a BINARYMIME parameter with the MAIL\n   FROM command.  When the\
    \ receiver SMTP accepts a MAIL FROM command\n   with the BINARYMIME body type\
    \ requested, it agrees to preserve all\n   bits in each octet passed using the\
    \ BDAT command.\n   BINARYMIME cannot be used with the DATA command.  If a DATA\
    \ command\n   is issued after a MAIL FROM command containing the body-value of\n\
    \   \"BINARYMIME\", a 501 response should be sent.  The resulting state\n   from\
    \ this error condition is indeterminate and the transaction should\n   be reset\
    \ with the RSET command.\n      It is important to note that when using BINARYMIME,\
    \ it is\n      especially important to ensure that the MIME message itself is\n\
    \      properly formed.  In particular, it is essential that text be\n      canonically\
    \ encoded with each line properly terminated with <CR>\n      <LF>.  Any transformation\
    \ of text into non-canonical MIME to\n      observe local storage conventions\
    \ must be reversed before sending\n      as BINARYMIME.  The usual line-oriented\
    \ shortcuts will break if\n      used with BINARYMIME.\n   The syntax of the extended\
    \ MAIL command is identical to the MAIL\n   command in [RFC821], except that a\
    \ BODY parameter must appear after\n   the address.  The complete syntax of this\
    \ extended command is defined\n   in [ESMTP]. The ESMTP-keyword is BODY and the\
    \ syntax for ESMTP-value\n   is given by the syntax for body-value in [ESMTP].\n\
    \   If a receiver SMTP does not support the BINARYMIME message format\n   (either\
    \ by not responding with code 250 to the EHLO command, or by\n   rejecting the\
    \ BINARYMIME parameter to the MAIL FROM command, then the\n   client SMTP must\
    \ not, under any circumstances, send binary data using\n   the DATA or BDAT commands.\n\
    \   If the receiver-SMTP does not support BINARYMIME and the message\n   content\
    \ is a MIME object with a binary encoding, a client SMTP has\n   two options in\
    \ this case: first, it may implement a gateway\n   transformation to convert the\
    \ message into valid 7bit encoded MIME,\n   or second, it may treat this as a\
    \ permanent error and handle it in\n   the usual manner for delivery failures.\
    \  The specifics of the\n   transformation from Binary MIME to 7bit MIME are not\
    \ described by\n   this RFC; the conversion is nevertheless constrained in the\
    \ following\n   ways:\n     o  The conversion must cause no loss of information;\
    \ MIME\n        transport encodings must be employed as needed to insure this\n\
    \        is the case.\n     o  The resulting message must be valid 7bit MIME.\n\
    \   As of present there are no mechanisms for converting a binary MIME\n   object\
    \ into a 8 bit-MIME object.  Such a transformation will require\n   the specification\
    \ of a new MIME content-transfer-encoding, the\n   standardization of which is\
    \ discouraged by [MIME].\n"
- title: 5. Examples
  contents:
  - '5. Examples

    '
- title: 5.1 Simple Chunking
  contents:
  - "5.1 Simple Chunking\n   The following simple dialogue illustrates the use of\
    \ the large\n   message extension to send a short psudo-RFC822 message to one\n\
    \   recipient using the CHUNKING extension:\n          R: <wait for connection\
    \ on TCP port 25>\n          S: <open connection to server>\n          R: 220\
    \ cnri.reston.va.us SMTP service ready\n          S: EHLO ymir.claremont.edu\n\
    \          R: 250-cnri.reston.va.us says hello\n          R: 250 CHUNKING\n  \
    \        S: MAIL FROM:<Sam@Random.com>\n          R: 250 <Sam@Random.com>... Sender\
    \ ok\n          S: RCPT TO:<Susan@Random.com>\n          R: 250 <Susan@random.com>...\
    \ Recipient ok\n          S: BDAT 69 LAST\n          S: To: Susan@random.com<CR><LF>\n\
    \          S: From: Sam@random.com<CR><LF>\n          S: Subject: This is a bodyless\
    \ test message<CR><LF>\n          R: 250 Message OK, 69 octets received\n    \
    \      S: QUIT\n          R: 221 Goodbye\n"
- title: 5.2 Pipelining Binarymime
  contents:
  - "5.2 Pipelining Binarymime\n   The following dialogue illustrates the use of the\
    \ large message\n   extension to send a BINARYMIME object to two recipients using\
    \ the\n   CHUNKING and PIPELINING extensions:\n          R: <wait for connection\
    \ on TCP port 25>\n          S: <open connection to server>\n          R: 220\
    \ cnri.reston.va.us SMTP service ready\n          S: EHLO ymir.claremont.edu\n\
    \          R: 250-cnri.reston.va.us says hello\n          R: 250-PIPELINING\n\
    \          R: 250-BINARYMIME\n          R: 250 CHUNKING\n          S: MAIL FROM:<ned@ymir.claremont.edu>\
    \ BODY=BINARYMIME\n          S: RCPT TO:<gvaudre@cnri.reston.va.us>\n        \
    \  S: RCPT TO:<jstewart@cnri.reston.va.us>\n          R: 250 <ned@ymir.claremont.edu>...\
    \ Sender and BINARYMIME ok\n          R: 250 <gvaudre@cnri.reston.va.us>... Recipient\
    \ ok\n          R: 250 <jstewart@cnri.reston.va.us>... Recipient ok\n        \
    \  S: BDAT 100000\n          S: (First 10000 octets of canonical MIME message\
    \ data)\n          S: BDAT 324 LAST\n          S: (Remaining 324 octets of canonical\
    \ MIME message data)\n          R: 250 100000 bytes received\n          R: 250\
    \ Message OK, 100324 octets received\n          S: QUIT\n          R: 221 Goodbye\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This RFC does not discuss security issues and\
    \ is not believed to\n   raise any security issues not already endemic in electronic\
    \ mail and\n   present in fully conforming implementations of [RFC821], or otherwise\n\
    \   made possible by [MIME].\n"
- title: 7. Acknowledgments
  contents:
  - "7. Acknowledgments\n   This document is the result of numerous discussions in\
    \ the IETF SMTP\n   Extensions Working Group and in particular due to the continued\n\
    \   advocacy of \"chunking\" by Neil Katin.\n"
- title: 8. References
  contents:
  - "8. References\n     [RFC821] Postel, J., \"Simple Mail Transfer Protocol\", STD\
    \ 10, RFC\n        821, USC/Information Sciences Institute, August 1982.\n   \
    \  [RFC822] Crocker, D., \"Standard for the Format of ARPA Internet\n        Text\
    \ Messages\", STD 11, RFC 822, UDEL, August 1982.\n     [MIME] Borenstein, N.,\
    \ and N. Freed, \"Multipurpose Internet Mail\n        Extensions\", RFC 1521,\
    \ Bellcore, Innosoft, June 1992.\n     [ESMTP] Klensin, J., WG Chair, Freed, N.,\
    \ Editor, Rose, M.,\n        Stefferud, E., and D. Crocker, \"SMTP Service Extensions\"\
    \ RFC\n        1425, United Nations University, Innosoft International,\n    \
    \    Inc., Dover Beach Consulting, Inc., Network Management\n        Associates,\
    \ Inc., The Branch Office, February 1993.\n     [8BIT] Klensin, J., WG Chair,\
    \ Freed, N., Editor, Rose, M.,\n        Stefferud, E., and D. Crocker, \"SMTP\
    \ Service Extension for\n        8bit-MIMEtransport\" RFC 1426, United Nations\
    \ University,\n        Innosoft International, Inc., Dover Beach Consulting, Inc.,\n\
    \        Network Management Associates, Inc., The Branch Office,\n        February\
    \ 1993.\n     [PIPE] Freed, N., \"SMTP Service Extensions for Command\n      \
    \  Pipelining\", Innosoft International, Work in Progress.\n"
- title: 9. Author's Address
  contents:
  - "9. Author's Address\n   Gregory M. Vaudreuil\n   Octel Network Services\n   17060\
    \ Dallas Parkway\n   Suite 214\n   Dallas, TX 75248-1905\n   Voice/Fax: 214-733-2722\n\
    \   EMail: Greg.Vaudreuil@Octel.com\n"
