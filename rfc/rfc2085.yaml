- contents:
  - '           HMAC-MD5 IP Authentication with Replay Prevention

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document describes a keyed-MD5 transform to be used in\n   conjunction
    with the IP Authentication Header [RFC-1826]. The\n   particular transform is
    based on [HMAC-MD5].  An option is also\n   specified to guard against replay
    attacks.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction...................................................1\n
    \  1.1    Terminology.................................................2\n   1.2
    \   Keys........................................................2\n   1.3    Data
    Size...................................................3\n   2.  Packet Format..................................................3\n
    \  2.1    Replay Prevention...........................................4\n   2.2
    \   Authentication Data Calculation.............................4\n   3.  Security
    Considerations........................................5\n   Acknowledgments....................................................5\n
    \  References.........................................................6\n   Authors'
    Addresses.................................................6\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   The Authentication Header (AH) [RFC-1826] provides integrity
    and\n   authentication for IP datagrams. The transform specified in this\n   document
    uses a keyed-MD5 mechanism [HMAC-MD5].  The mechanism uses\n   the (key-less)
    MD5 hash function [RFC-1321] which produces a message\n   digest. When combined
    with an AH Key, authentication data is\n   produced. This value is placed in the
    Authentication Data field of\n   the AH [RFC-1826]. This value is also the basis
    for the data\n   integrity service offered by the AH protocol.\n   To provide
    protection against replay attacks, a Replay Prevention\n   field is included as
    a transform option.  This field is used to help\n   prevent attacks in which a
    message is stored and re-used later,\n   replacing or repeating the original.
    \ The Security Parameters Index\n   (SPI) [RFC-1825] is used to determine whether
    this option is included\n   in the AH.\n   Familiarity with the following documents
    is assumed: \"Security\n   Architecture for the Internet Protocol\" [RFC-1825],
    \"IP\n   Authentication Header\" [RFC-1826], and \"HMAC-MD5: Keyed-MD5 for\n   Message
    Authentication\" [HMAC-MD5].\n   All implementations that claim conformance or
    compliance with the IP\n   Authentication Header specification [RFC-1826] MUST
    implement this\n   HMAC-MD5 transform.\n"
  - contents:
    - "1.1 Terminology\n   In  this  document,  the  words  that  are  used  to   define
      \  the\n   significance  of each particular requirement are usually capitalized.\n
      \  These words are:\n   - MUST\n   This word or the adjective \"REQUIRED\" means
      that  the  item  is  an\n   absolute requirement of the specification.\n   -
      SHOULD\n   This word or the adjective \"RECOMMENDED\"  means  that  there  might\n
      \  exist  valid reasons in particular circumstances to ignore this item,\n   but
      the full implications should be understood and the case carefully\n   weighed
      before taking a different course.\n"
    title: 1.1 Terminology
  - contents:
    - "1.2 Keys\n   The \"AH Key\" is used as a shared secret between two communicating\n
      \  parties.  The Key is not a \"cryptographic key\" as used in a\n   traditional
      sense. Instead, the AH key (shared secret) is hashed with\n   the transmitted
      data and thus, assures that an intervening party\n   cannot duplicate the authentication
      data.\n   Even though an AH key is not a cryptographic key, the rudimentary\n
      \  concerns of cryptographic keys still apply. Consider that the\n   algorithm
      and most of the data used to produce the output is known.\n   The strength of
      the transform lies in the singular mapping of the key\n   (which needs to be
      strong) and the IP datagram (which is known) to\n   the authentication data.
      \ Thus, implementations should, and as\n   frequently as possible, change the
      AH key. Keys need to be chosen at\n   random, or generated using a cryptographically
      strong pseudo-random\n   generator seeded with a random seed. [HMAC-MD5]\n   All
      conforming and compliant implementations MUST support a key\n   length of 128
      bits or less.  Implementations SHOULD support longer\n   key lengths as well.
      \ It is advised that the key length be chosen to\n   be the length of the hash
      output, which is 128 bits for MD5.  For\n   other key lengths the following
      concerns MUST be considered.\n   A key length of zero is prohibited and implementations
      MUST prevent\n   key lengths of zero from being used with this transform, since
      no\n   effective authentication could be provided by a zero-length key.\n   Keys
      having a length less than 128 bits are strongly discouraged as\n   it would
      decrease the security strength of the function.  Keys longer\n   than 128 bits
      are acceptable, but the extra length may not\n   significantly increase the
      function strength.  A longer key may be\n   advisable if the randomness of the
      key is suspect.  MD5 operates on\n   64-byte blocks.  Keys longer than 64-bytes
      are first hashed using\n   MD5.  The resulting hash is then used to calculate
      the authentication\n   data.\n"
    title: 1.2 Keys
  - contents:
    - "1.3 Data Size\n   MD5 produces a 128-bit value which is used as the authentication\n
      \  data.  It is naturally 64 bit aligned and thus, does not need any\n   padding
      for machines with native double words.\n"
    title: 1.3 Data Size
  title: 1. Introduction
- contents:
  - "2. Packet Format\n     +---------------+---------------+---------------+---------------+\n
    \    | Next Header   | Length        |           RESERVED            |\n     +---------------+---------------+---------------+---------------+\n
    \    |                              SPI                              |\n     +---------------+---------------+---------------+---------------+\n
    \    |                     Replay Prevention                         |\n     |
    \                                                              |\n     +---------------+---------------+---------------+---------------+\n
    \    |                                                               |\n     +
    \                    Authentication Data                       |\n     |                                                               |\n
    \    +---------------+---------------+---------------+---------------+\n      1
    2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8\n   The Next Header,
    RESERVED, and SPI fields are specified in [RFC-\n   1826].  The Length field is
    the length of the Replay Prevention field\n   and the Authentication Data in 32-bit
    words.\n"
  - contents:
    - "2.1 Replay Prevention\n   The Replay Prevention field is a 64-bit value used
      to guarantee that\n   each packet exchanged between two parties is different.
      \ Each IPsec\n   Security Association specifies whether Replay Prevention is
      used for\n   that Security Association.  If Replay Prevention is NOT in use,
      then\n   the Authentication Data field will directly follow the SPI field.\n
      \  The 64-bit field is an up counter starting at a value of 1.\n   The secret
      shared key must not be used for a period of time that\n   allows the counter
      to wrap, that is, to transmit more than 2^64\n   packets using a single key.\n
      \  Upon receipt, the replay value is assured to be increasing.  The\n   implementation
      may accept out of order packets. The number of packets\n   to accept out of
      order is an implementation detail. If an \"out of\n   order window\" is supported,
      the implementation shall ensure that any\n   and all packets accepted out of
      order are guaranteed not to have\n   arrived before. That is, the implementation
      will accept any packet at\n   most once.\n   When the destination address is
      a multicast address, replay\n   protection is in use, and more than one sender
      is sharing the same\n   IPsec Security Association to that multicast destination
      address,\n   then Replay Protection SHOULD NOT be enabled.  When replay protection\n
      \  is desired for a multicast session having multiple senders to the\n   same
      multicast destination address, each sender SHOULD have its own\n   IPsec Security
      Association.\n   [ESP-DES-MD5] provides example code that implements a 32 packet\n
      \  replay window and a test routine to show how it works.\n"
    title: 2.1 Replay Prevention
  - contents:
    - "2.2 Authentication Data Calculation\n   The authentication data is the output
      of the authentication algorithm\n   (MD5).  This value is calculated over the
      entire IP datagram. Fields\n   within the datagram that are variant during transit
      and the\n   authentication data field itself, must contain all zeros prior to
      the\n   computation [RFC-1826].  The Replay Prevention field if present, is\n
      \  included in the calculation.\n   The definition and reference implementation
      of MD5 appears in [RFC-\n   1321].  Let 'text' denote the data to which HMAC-MD5
      is to be applied\n   and K be the message authentication secret key shared by
      the parties.\n   If K is longer than 64-bytes it MUST first be hashed using
      MD5.  In\n   this case, K is the resulting hash.\n   We define two fixed and
      different strings ipad and opad as follows\n   (the 'i' and 'o' are mnemonics
      for inner and outer):\n             ipad = the byte 0x36 repeated 64 times\n
      \            opad = the byte 0x5C repeated 64 times.\n   To compute HMAC-MD5
      over the data `text' we perform\n             MD5(K XOR opad, MD5(K XOR ipad,
      text))\n   Namely,\n    (1) append zeros to the end of K to create a 64 byte
      string\n        (e.g., if K is of length 16 bytes it will be appended with 48\n
      \       zero bytes 0x00)\n    (2) XOR (bitwise exclusive-OR) the 64 byte string
      computed in step\n        (1) with ipad\n    (3) append the data stream 'text'
      to the 64 byte string resulting\n        from step (2)\n    (4) apply MD5 to
      the stream generated in step (3)\n    (5) XOR (bitwise exclusive-OR) the 64
      byte string computed in\n        step (1) with opad\n    (6) append the MD5
      result from step (4) to the 64 byte string\n        resulting from step (5)\n
      \   (7) apply MD5 to the stream generated in step (6) and output\n        the
      result\n      This computation is described in more detail, along with example\n
      \     code and performance improvements, in [HMAC-MD5]. Implementers\n      should
      consult [HMAC-MD5] for more information on this technique\n      for keying
      a cryptographic hash function.\n"
    title: 2.2 Authentication Data Calculation
  title: 2. Packet Format
- contents:
  - "3. Security Considerations\n   The security provided by this transform is based
    on the strength of\n   MD5, the correctness of the algorithm's implementation,
    the security\n   of the key management mechanism and its implementation, the strength\n
    \  of the associated secret key, and upon the correctness of the\n   implementations
    in all of the participating systems.  [HMAC-MD5]\n   contains a detailed discussion
    on the strengths and weaknesses of\n   MD5.\n"
  title: 3. Security Considerations
- contents:
  - "Acknowledgments\n   This document is largely based on text written by Hugo Krawczyk.
    \ The\n   format used was derived from work by William Simpson and Perry\n   Metzger.
    \ The text on replay prevention is derived directly from work\n   by Jim Hughes.\n"
  title: Acknowledgments
- contents:
  - "References\n   [RFC-1825]    Atkinson, R., \"Security Architecture for the Internet\n
    \                Protocol\", RFC 1852, Naval Research Laboratory,\n                 July
    1995.\n   [RFC-1826]    Atkinson, R., \"IP Authentication Header\",\n                 RFC
    1826, August 1995.\n   [RFC-1828]    Metzger, P., and W. Simpson, \"IP Authentication
    using\n                 Keyed MD5\", RFC 1828, August 1995.\n   [RFC-1321]    Rivest,
    R., \"The MD5 Message-Digest Algorithm\",\n                 RFC 1321, April 1992.\n
    \  [HMAC-MD5]    Krawczyk, H., Bellare, M., and R. Canetti,\n                 \"HMAC:
    Keyed-Hashing for Message Authentication\",\n                 RFC 2104, February
    1997.\n   [ESP-DES-MD5] Hughes, J., \"Combined DES-CBC, MD5, and Replay\n                 Prevention
    Security Transform\", Work in Progress.\n"
  title: References
- contents:
  - "Authors' Addresses\n   Michael J. Oehler\n   National Security Agency\n   Atn:
    R23, INFOSEC Research and Development\n   9800 Savage Road\n   Fort Meade, MD
    20755\n   EMail: mjo@tycho.ncsc.mil\n   Robert Glenn\n   NIST\n   Building 820,
    Room 455\n   Gaithersburg, MD 20899\n   EMail: rob.glenn@nist.gov\n"
  title: Authors' Addresses
