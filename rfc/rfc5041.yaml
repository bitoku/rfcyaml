- title: __initial_text__
  contents:
  - '            Direct Data Placement over Reliable Transports

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Direct Data Placement protocol provides information to Place\
    \ the\n   incoming data directly into an upper layer protocol's receive buffer\n\
    \   without intermediate buffers.  This removes excess CPU and memory\n   utilization\
    \ associated with transferring data through the\n   intermediate buffers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n           5.1.2. Untagged Buffer Model ..............................18\n\
    \      5.2. Segmentation and Reassembly of a DDP Message ..............19\n  \
    \    5.3. Ordering Among DDP Messages ...............................21\n    \
    \  5.4. DDP Message Completion and Delivery .......................21\n   6. DDP\
    \ Stream Setup and Teardown ..................................22\n      6.1. DDP\
    \ Stream Setup ..........................................22\n      6.2. DDP Stream\
    \ Teardown .......................................22\n           6.2.1. DDP Graceful\
    \ Teardown ..............................22\n           6.2.2. DDP Abortive Teardown\
    \ ..............................23\n   7. Error Semantics ................................................24\n\
    \      7.1. Errors Detected at the Data Sink ..........................24\n  \
    \    7.2. DDP Error Numbers .........................................25\n   8.\
    \ Security Considerations ........................................26\n      8.1.\
    \ Protocol-Specific Security Considerations .................26\n      8.2. Association\
    \ of an STag and a DDP Stream ...................26\n      8.3. Security Requirements\
    \ .....................................27\n           8.3.1. RNIC Requirements\
    \ ..................................28\n           8.3.2. Privileged Resources\
    \ Manager Requirement ...........29\n      8.4. Security Services for DDP .................................30\n\
    \           8.4.1. Available Security Services ........................30\n  \
    \         8.4.2. Requirements for IPsec Services for DDP ............30\n   9.\
    \ IANA Considerations ............................................31\n   10. References\
    \ ....................................................32\n      10.1. Normative\
    \ References .....................................32\n      10.2. Informative\
    \ References ...................................33\n    Appendix A. Receive Window\
    \ Sizing ................................34\n    Appendix B. Contributors .........................................34\n"
- title: Table of Figures
  contents:
  - "Table of Figures\n    Figure 1: DDP Layering ............................................6\n\
    \    Figure 2: MPA, DDP, and RDMAP Header Alignment ....................7\n  \
    \  Figure 3: DDP Control Field ......................................13\n    Figure\
    \ 4: Tagged Buffer DDP Header ...............................15\n    Figure 5:\
    \ Untagged Buffer DDP Header .............................16\n    Figure 6: DDP\
    \ Segment Format .....................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Note: The capitalization of certain words in this document\
    \ indicates\n   they are being used with the specific meaning given in the glossary\n\
    \   (Section 2).\n   Direct Data Placement Protocol (DDP) enables an Upper Layer\
    \ Protocol\n   (ULP) to send data to a Data Sink without requiring the Data Sink\
    \ to\n   Place the data in an intermediate buffer - thus, when the data\n   arrives\
    \ at the Data Sink, the network interface can Place the data\n   directly into\
    \ the ULP's buffer.  This can enable the Data Sink to\n   consume substantially\
    \ less memory bandwidth than a buffered model\n   because the Data Sink is not\
    \ required to move the data from the\n   intermediate buffer to the final destination.\
    \  Additionally, this can\n   enable the network protocol to consume substantially\
    \ fewer CPU cycles\n   than if the CPU was used to move the data, and this can\
    \ remove the\n   bandwidth limitation of only being able to move data as fast\
    \ as the\n   CPU can copy the data.\n   DDP preserves ULP record boundaries (messages)\
    \ while providing a\n   variety of data transfer mechanisms and completion mechanisms\
    \ to be\n   used to transfer ULP messages.\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in RFC 2119 [RFC2119].\n"
- title: 1.1.  Architectural Goals
  contents:
  - "1.1.  Architectural Goals\n   DDP has been designed with the following high-level\
    \ architectural\n   goals:\n      * Provide a buffer model that enables the Local\
    \ Peer to Advertise\n        a named buffer (i.e., a Tag for a buffer) to the\
    \ Remote Peer,\n        such that across the network the Remote Peer can Place\
    \ data into\n        the buffer at Remote-Peer-specified locations.  This is referred\n\
    \        to as the Tagged Buffer Model.\n      * Provide a second receive buffer\
    \ model that preserves ULP message\n        boundaries from the Remote Peer and\
    \ keeps the Local Peer's\n        buffers anonymous (i.e., Untagged).  This is\
    \ referred to as the\n        Untagged Buffer Model.\n      * Provide reliable,\
    \ in-order Delivery semantics for both Tagged\n        and Untagged Buffer Models.\n\
    \      * Provide segmentation and reassembly of ULP messages.\n      * Enable\
    \ the ULP Buffer to be used as a reassembly buffer, without\n        a need for\
    \ a copy, even if incoming DDP Segments arrive out of\n        order.  This requires\
    \ the protocol to separate Data Placement of\n        ULP Payload contained in\
    \ an incoming DDP Segment from Data\n        Delivery of completed ULP Messages.\n\
    \      * If the Lower Layer Protocol (LLP) supports multiple LLP Streams\n   \
    \     within an LLP Connection, provide the above capabilities\n        independently\
    \ on each LLP Stream and enable the capability to be\n        exported on a per-LLP-Stream\
    \ basis to the ULP.\n"
- title: 1.2.  Protocol Overview
  contents:
  - "1.2.  Protocol Overview\n   DDP supports two basic data transfer models - a Tagged\
    \ Buffer data\n   transfer model and an Untagged Buffer data transfer model.\n\
    \   The Tagged Buffer data transfer model requires the Data Sink to send\n   the\
    \ Data Source an identifier for the ULP Buffer, referred to as a\n   Steering\
    \ Tag (STag).  The STag is transferred to the Data Source\n   using a ULP-defined\
    \ method.  Once the Data Source ULP has an STag for\n   a destination ULP Buffer,\
    \ it can request that DDP send the ULP data\n   to the destination ULP Buffer\
    \ by specifying the STag to DDP.  Note\n   that the Tagged Buffer does not have\
    \ to be filled starting at the\n   beginning of the ULP Buffer.  The ULP Data\
    \ Source can provide an\n   arbitrary offset into the ULP Buffer.\n   The Untagged\
    \ Buffer data transfer model enables data transfer to\n   occur without requiring\
    \ the Data Sink to Advertise a ULP Buffer to\n   the Data Source.  The Data Sink\
    \ can queue up a series of receive ULP\n   Buffers.  An Untagged DDP Message from\
    \ the Data Source consumes an\n   Untagged Buffer at the Data Sink.  Because DDP\
    \ is message oriented,\n   even if the Data Source sends a DDP Message payload\
    \ smaller than the\n   receive ULP Buffer, the partially filled receive ULP Buffer\
    \ is\n   delivered to the ULP anyway.  If the Data Source sends a DDP Message\n\
    \   payload larger than the receive ULP Buffer, it results in an error.\n   There\
    \ are several key differences between the Tagged and Untagged\n   Buffer Model:\n\
    \      * For the Tagged Buffer Model, the Data Source specifies which\n      \
    \  received Tagged Buffer will be used for a specific Tagged DDP\n        Message\
    \ (sender-based ULP Buffer management).  For the Untagged\n        Buffer Model,\
    \ the Data Sink specifies the order in which\n        Untagged Buffers will be\
    \ consumed as Untagged DDP Messages are\n        received (receiver-based ULP\
    \ Buffer management).\n      * For the Tagged Buffer Model, the ULP at the Data\
    \ Sink must\n        Advertise the ULP Buffer to the Data Source through a ULP\n\
    \        specific mechanism before data transfer can occur.  For the\n       \
    \ Untagged Buffer Model, data transfer can occur without an end-\n        to-end\
    \ explicit ULP Buffer Advertisement.  Note, however, that\n        the ULP needs\
    \ to address flow control issues.\n      * For the Tagged Buffer Model, a DDP\
    \ Message can start at an\n        arbitrary offset within the Tagged Buffer.\
    \  For the Untagged\n        Buffer Model, a DDP Message can only start at offset\
    \ 0.\n      * The Tagged Buffer Model allows multiple DDP Messages targeted to\n\
    \        a Tagged Buffer with a single ULP Buffer Advertisement.  The\n      \
    \  Untagged Buffer Model requires associating a receive ULP Buffer\n        for\
    \ each DDP Message targeted to an Untagged Buffer.\n   Either data transfer model\
    \ Places a ULP Message into a DDP Message.\n   Each DDP Message is then sliced\
    \ into DDP Segments that are intended\n   to fit within a lower-layer-protocol's\
    \ (LLP) Maximum Upper Layer\n   Protocol Data Unit (MULPDU).  Thus, the ULP can\
    \ post arbitrarily\n   sized ULP Messages, containing up to 2^32 - 1 octets of\
    \ ULP Payload,\n   and DDP slices the ULP message into DDP Segments, which are\n\
    \   reassembled transparently at the Data Sink.\n   DDP provides in-order delivery\
    \ for the ULP.  However, DDP\n   differentiates between Data Delivery and Data\
    \ Placement.  DDP\n   provides enough information in each DDP Segment to allow\
    \ the ULP\n   Payload in each inbound DDP Segment payloads to be directly Placed\n\
    \   into the correct ULP Buffer, even when the DDP Segments arrive out-\n   of-order.\
    \  Thus, DDP enables the reassembly of ULP Payload contained\n   in DDP Segments\
    \ of a DDP Message into a ULP Message to occur within\n   the ULP Buffer, therefore\
    \ eliminating the traditional copy out of the\n   reassembly buffer into the ULP\
    \ Buffer.\n   A DDP Message's payload is Delivered to the ULP when:\n      * all\
    \ DDP Segments of a DDP Message have been completely received,\n        and the\
    \ payload of the DDP Message has been Placed into the\n        associated ULP\
    \ Buffer,\n      * all prior DDP Messages have been Placed, and\n      * all prior\
    \ DDP Message Deliveries have been performed.\n   The LLP under DDP may support\
    \ a single LLP Stream of data per\n   connection (e.g., TCP [TCP]) or multiple\
    \ LLP Streams of data per\n   connection (e.g., SCTP [SCTP]).  But in either case,\
    \ DDP is specified\n   such that each DDP Stream is independent and maps to a\
    \ single LLP\n   Stream.  Within a specific DDP Stream, the LLP Stream is required\
    \ to\n   provide in-order, reliable Delivery.  Note that DDP has no ordering\n\
    \   guarantees between DDP Streams.\n   A DDP protocol could potentially run over\
    \ reliable Delivery LLPs or\n   unreliable Delivery LLPs.  This specification\
    \ requires reliable, in\n   order Delivery LLPs.\n"
- title: 1.3.  DDP Layering
  contents:
  - "1.3.  DDP Layering\n   DDP is intended to be LLP independent, subject to the\
    \ requirements\n   defined in section 3.  However, DDP was specifically defined\
    \ to be\n   part of a family of protocols that were created to work well\n   together,\
    \ as shown in Figure 1, DDP Layering.  For LLP protocol\n   definitions of each\
    \ LLP, see Marker PDU Aligned Framing for TCP\n   Specification [MPA] and Stream\
    \ Control Transmission Protocol (SCTP)\n   Direct Data Placement (DDP) Adaptation\
    \ [SCTPDDP].\n   DDP enables direct data Placement capability for any ULP, but\
    \ it has\n   been specifically designed to work well with Remote Direct Memory\n\
    \   Access Protocol (RDMAP) (see [RDMAP]), and is part of the iWARP\n   protocol\
    \ suite.\n                       +-------------------+\n                     \
    \  |                   |\n                       |     RDMA ULP      |\n     \
    \                  |                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                 |                   |\n     |      ULP        |      \
    \ RDMAP       |\n     |                 |                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                     |\n     |           DDP protocol \
    \             |\n     |                                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                 |                   |\n     |       MPA       |      \
    \             |\n     |                 |                   |\n     |        \
    \         |                   |\n     +-+-+-+-+-+-+-+-+-+       SCTP        |\n\
    \     |                 |                   |\n     |       TCP       |      \
    \             |\n     |                 |                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 1: DDP Layering\n   If DDP is layered below RDMAP and on\
    \ top of MPA and TCP, then the\n   respective headers and payload are arranged\
    \ as follows (Note: For\n   clarity, MPA header and CRC are included, but framing\
    \ markers are not\n   shown.):\n      0                   1                  \
    \ 2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    //\
    \                           TCP Header                        //\n    |      \
    \                                                         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |         MPA Header            |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n    |                                     \
    \                          |\n    //                        DDP Header       \
    \                    //\n    |                                               \
    \                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    //\
    \                        RDMAP Header                         //\n    |      \
    \                                                         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    //\
    \                                                             //\n    //     \
    \                   RDMAP ULP Payload                    //\n    //          \
    \                                                   //\n    |                \
    \                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                         MPA CRC                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 2: MPA, DDP, and RDMAP Header Alignment\n"
- title: 2.  Glossary
  contents:
  - '2.  Glossary

    '
- title: 2.1.  General
  contents:
  - "2.1.  General\n   Advertisement (Advertised, Advertise, Advertisements, Advertises)\
    \ -\n       The act of informing a Remote Peer that a local RDMA Buffer is\n \
    \      available to it.  A Node makes available an RDMA Buffer for\n       incoming\
    \ RDMA Read or RDMA Write access by informing its RDMA/DDP\n       peer of the\
    \ Tagged Buffer identifiers (STag, base address,\n       length).  This Advertisement\
    \ of Tagged Buffer information is not\n       defined by RDMA/DDP and is left\
    \ to the ULP.  A typical method\n       would be for the Local Peer to embed the\
    \ Tagged Buffer's Steering\n       Tag, address, and length in a Send message\
    \ destined for the\n       Remote Peer.\n   Data Delivery (Delivery, Delivered,\
    \ Delivers) - Delivery is defined\n       as the process of informing the ULP\
    \ or consumer that a particular\n       message is available for use.  This is\
    \ specifically different\n       from \"Placement\", which may generally occur\
    \ in any order, while\n       the order of \"Delivery\" is strictly defined. \
    \ See \"Data\n       Placement\".\n   Data Sink - The peer receiving a data payload.\
    \  Note that the Data\n       Sink can be required to both send and receive RDMA/DDP\
    \ Messages\n       to transfer a data payload.\n   Data Source - The peer sending\
    \ a data payload.  Note that the Data\n       Source can be required to both send\
    \ and receive RDMA/DDP Messages\n       to transfer a data payload.\n   Delivery\
    \ (Delivered, Delivers) - See Data Delivery in Section 2.1.\n   iWARP - A suite\
    \ of wire protocols comprised of RDMAP [RDMAP], DDP\n       (this specification),\
    \ and Marker PDU Aligned Framing for TCP\n       (MPA) [MPA].  The iWARP protocol\
    \ suite may be layered above TCP,\n       SCTP, or other transport protocols.\n\
    \   Local Peer - The RDMA/DDP protocol implementation on the local end of\n  \
    \     the connection.  Used to refer to the local entity when\n       describing\
    \ a protocol exchange or other interaction between two\n       Nodes.\n   Node\
    \ - A computing device attached to one or more links of a network.\n       A Node\
    \ in this context does not refer to a specific application\n       or protocol\
    \ instantiation running on the computer.  A Node may\n       consist of one or\
    \ more RDMA Enabled Network Interface Controllers\n       (RNICs) installed in\
    \ a host computer.\n   Placement (Placed, Places) - See \"Data Placement\" in\
    \ Section 2.3\n   Remote Peer - The RDMA/DDP protocol implementation on the opposite\n\
    \       end of the connection.  Used to refer to the remote entity when\n    \
    \   describing protocol exchanges or other interactions between two\n       Nodes.\n\
    \   RNIC - RDMA Enabled Network Interface Controller.  In this context,\n    \
    \   this would be a network I/O adapter or embedded controller with\n       iWARP\
    \ functionality.\n   ULP - Upper Layer Protocol.  The protocol layer above the\
    \ protocol\n       layer currently being referenced.  The ULP for RDMA/DDP is\n\
    \       expected to be an Operating System (OS), application, adaptation\n   \
    \    layer, or proprietary device.  The RDMA/DDP documents do not\n       specify\
    \ a ULP -- they provide a set of semantics that allow a ULP\n       to be designed\
    \ to utilize RDMA/DDP.\n   ULP Message - The ULP data that is handed to a specific\
    \ protocol\n       layer for transmission.  Data boundaries are preserved as they\n\
    \       are transmitted through iWARP.\n   ULP Payload - The ULP data that is\
    \ contained within a single protocol\n       segment or packet (e.g., a DDP Segment).\n"
- title: 2.2.  LLP
  contents:
  - "2.2.  LLP\n   LLP - Lower Layer Protocol.  The protocol layer beneath the protocol\n\
    \       layer currently being referenced.  For example, for DDP, the LLP\n   \
    \    is SCTP DDP Adaptation, MPA, or other transport protocols.  For\n       RDMA,\
    \ the LLP is DDP.\n   LLP Connection - Corresponds to an LLP transport-level connection\n\
    \       between the peer LLP layers on two nodes.\n   LLP Stream - Corresponds\
    \ to a single LLP transport-level stream\n       between the peer LLP layers on\
    \ two Nodes.  One or more LLP\n       Streams may map to a single transport-level\
    \ LLP Connection.  For\n       transport protocols that support multiple streams\
    \ per connection\n       (e.g., SCTP), an LLP Stream corresponds to one transport-level\n\
    \       stream.\n   MULPDU - Maximum Upper Layer Protocol Data Unit (MULPDU).\
    \  The\n       current maximum size of the record that is acceptable for DDP to\n\
    \       pass to the LLP for transmission.\n   ULPDU - Upper Layer Protocol Data\
    \ Unit.  The data record defined by\n       the layer above MPA.\n"
- title: 2.3.  Direct Data Placement (DDP)
  contents:
  - "2.3.  Direct Data Placement (DDP)\n   Data Placement (Placement, Placed, Places)\
    \ - For DDP, this term is\n       specifically used to indicate the process of\
    \ writing to a Data\n       Buffer by a DDP implementation.  DDP Segments carry\
    \ Placement\n       information, which may be used by the receiving DDP\n    \
    \   implementation to perform Data Placement of the DDP Segment ULP\n       Payload.\
    \  See \"Data Delivery\" and \"Direct Data Placement\".\n   DDP Abortive Teardown\
    \ - The act of closing a DDP Stream without\n       attempting to complete in-progress\
    \ and pending DDP Messages.\n   DDP Graceful Teardown - The act of closing a DDP\
    \ Stream such that all\n       in-progress and pending DDP Messages are allowed\
    \ to complete\n       successfully.\n   DDP Control Field - A fixed 8-bit field\
    \ in the DDP Header.\n   DDP Header - The header present in all DDP Segments.\
    \  The DDP Header\n       contains control and Placement fields that are used\
    \ to define the\n       final Placement location for the ULP Payload carried in\
    \ a DDP\n       Segment.\n   DDP Message - A ULP-defined unit of data interchange,\
    \ which is\n       subdivided into one or more DDP Segments.  This segmentation\
    \ may\n       occur for a variety of reasons, including segmentation to respect\n\
    \       the maximum segment size of the underlying transport protocol.\n   DDP\
    \ Segment - The smallest unit of data transfer for the DDP\n       protocol. \
    \ It includes a DDP Header and ULP Payload (if present).\n       A DDP Segment\
    \ should be sized to fit within the Lower Layer\n       Protocol MULPDU.\n   DDP\
    \ Stream - A sequence of DDP messages whose ordering is defined by\n       the\
    \ LLP.  For SCTP, a DDP Stream maps directly to an SCTP stream.\n       For MPA,\
    \ a DDP Stream maps directly to a TCP connection, and a\n       single DDP Stream\
    \ is supported.  Note that DDP has no ordering\n       guarantees between DDP\
    \ Streams.\n   DDP Stream Identifier (ID) - An identifier for a DDP Stream.\n\
    \   Direct Data Placement - A mechanism whereby ULP data contained within\n  \
    \     DDP Segments may be Placed directly into its final destination in\n    \
    \   memory without processing of the ULP.  This may occur even when\n       the\
    \ DDP Segments arrive out of order.  Out-of-order Placement\n       support may\
    \ require the Data Sink to implement the LLP and DDP as\n       one functional\
    \ block.\n   Direct Data Placement Protocol (DDP) - Also, a wire protocol that\n\
    \       supports Direct Data Placement by associating explicit memory\n      \
    \ buffer placement information with the LLP payload units.\n   Message Offset\
    \ (MO) - For the DDP Untagged Buffer Model, specifies\n       the offset, in octets,\
    \ from the start of a DDP Message.\n   Message Sequence Number (MSN) - For the\
    \ DDP Untagged Buffer Model,\n       specifies a sequence number that is increasing\
    \ with each DDP\n       Message.\n   Protection Domain (PD) - A mechanism used\
    \ to associate a DDP Stream\n       and an STag.  Under this mechanism, the use\
    \ of an STag is valid\n       on a DDP Stream if the STag has the same Protection\
    \ Domain\n       Identifier (PD ID) as the DDP Stream.\n   Protection Domain Identifier\
    \ (PD ID) - An identifier for the\n       Protection Domain.\n   Queue Number\
    \ (QN) - For the DDP Untagged Buffer Model, identifies a\n       destination Data\
    \ Sink queue for a DDP Segment.\n   Steering Tag - An identifier of a Tagged Buffer\
    \ on a Node, valid as\n       defined within a protocol specification.\n   STag\
    \ - Steering Tag\n   Tagged Buffer - A buffer that is explicitly Advertised to\
    \ the Remote\n       Peer through exchange of an STag, Tagged Offset, and length.\n\
    \   Tagged Buffer Model - A DDP data transfer model used to transfer\n       Tagged\
    \ Buffers from the Local Peer to the Remote Peer.\n   Tagged DDP Message - A DDP\
    \ Message that targets a Tagged Buffer.\n   Tagged Offset (TO) - The offset within\
    \ a Tagged Buffer on a Node.\n   ULP Buffer - A buffer owned above the DDP layer\
    \ and Advertised to the\n       DDP layer either as a Tagged Buffer or an Untagged\
    \ ULP Buffer.\n   ULP Message Length - The total length, in octets, of the ULP\
    \ Payload\n       contained in a DDP Message.\n   Untagged Buffer - A buffer that\
    \ is not explicitly Advertised to the\n       Remote Peer.\n   Untagged Buffer\
    \ Model - A DDP data transfer model used to transfer\n       Untagged Buffers\
    \ from the Local Peer to the Remote Peer.\n   Untagged DDP Message - A DDP Message\
    \ that targets an Untagged Buffer.\n"
- title: 3.  Reliable Delivery LLP Requirements
  contents:
  - "3.  Reliable Delivery LLP Requirements\n   Any protocol that can serve as an\
    \ LLP to DDP MUST meet the following\n   requirements.\n   1.  LLPs MUST expose\
    \ MULPDU and MULPDU changes.  This is required so\n       that the DDP layer can\
    \ perform segmentation aligned with the\n       MULPDU and can adapt as MULPDU\
    \ changes come about.  The corner\n       case of how to handle outstanding requests\
    \ during a MULPDU change\n       is covered by the requirements below.\n   2.\
    \  In the event of a MULPDU change, DDP MUST NOT be required by the\n       LLP\
    \ to re-segment DDP Segments that have been previously posted\n       to the LLP.\
    \  Note that under pathological conditions the LLP may\n       change the Advertised\
    \ MULPDU more frequently than the queue of\n       previously posted DDP Segment\
    \ transmit requests is flushed.\n       Under this pathological condition, the\
    \ LLP transmit queue can\n       contain DDP Messages for which multiple updates\
    \ to the\n       corresponding MULPDU have occurred subsequent to posting of the\n\
    \       messages.  Thus, there may be no correlation between the queued\n    \
    \   DDP Segment(s) and the LLP's current value of MULPDU.\n   3.  The LLP MUST\
    \ ensure that, if it accepts a DDP Segment, it will\n       transfer it reliably\
    \ to the receiver or return with an error\n       stating that the transfer failed\
    \ to complete.\n   4.  The LLP MUST preserve DDP Segment and Message boundaries\
    \ at the\n       Data Sink.\n   5.  The LLP MAY provide the incoming segments\
    \ out of order for\n       Placement, but if it does, it MUST also provide information\
    \ that\n       specifies what the sender-specified order was.\n   6.  LLP MUST\
    \ provide a strong digest (at least equivalent to CRC32-C)\n       to cover at\
    \ least the DDP Segment.  It is believed that some of\n       the existing data\
    \ integrity digests are not sufficient, and that\n       direct memory transfer\
    \ semantics requires a stronger digest than,\n       for example, a simple checksum.\n\
    \   7.  On receive, the LLP MUST provide the length of the DDP Segment\n     \
    \  received.  This ensures that DDP does not have to carry a length\n       field\
    \ in its header.\n   8.  If an LLP does not support teardown of an LLP Stream\
    \ independent\n       of other LLP Streams, and a DDP error occurs on a specific\
    \ DDP\n       Stream, then the LLP MUST label the associated LLP Stream as an\n\
    \       erroneous LLP Stream and MUST NOT allow any further data transfer\n  \
    \     on that LLP Stream after DDP requests the associated DDP Stream\n      \
    \ to be torn down.\n   9.  For a specific LLP Stream, the LLP MUST provide a mechanism\
    \ to\n       indicate that the LLP Stream has been gracefully torn down.  For\n\
    \       a specific LLP Connection, the LLP MUST provide a mechanism to\n     \
    \  indicate that the LLP Connection has been gracefully torn down.\n       Note\
    \ that, if the LLP does not allow an LLP Stream to be torn\n       down independently\
    \ of the LLP Connection, the above requirements\n       allow the LLP to notify\
    \ DDP of both events at the same time.\n   10. For a specific LLP Connection,\
    \ when all LLP Streams are either\n       gracefully torn down or are labeled\
    \ as erroneous LLP Streams, the\n       LLP Connection MUST be torn down.\n  \
    \ 11. The LLP MUST NOT pass a duplicate DDP Segment to the DDP layer\n       after\
    \ it has passed all the previous DDP Segments to the DDP\n       layer and the\
    \ associated ordering information for the previous\n       DDP Segments and the\
    \ current DDP Segment.\n"
- title: 4.  Header Format
  contents:
  - "4.  Header Format\n   DDP has two different header formats: one for Data Placement\
    \ into\n   Tagged Buffers, and the other for Data Placement into Untagged\n  \
    \ Buffers.  See Section 5.1 for a description of the two models.\n"
- title: 4.1.  DDP Control Field
  contents:
  - "4.1.  DDP Control Field\n   The first 8 bits of the DDP Header carry a DDP Control\
    \ Field that is\n   common between the two formats.  It is shown below in Figure\
    \ 3,\n   offset by 16 bits to accommodate the MPA header defined in [MPA].\n \
    \  The MPA header is only present if DDP is layered on top of MPA.\n      0  \
    \                 1                   2                   3\n      0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                      \
    \               +-+-+-+-+-+-+-+-+\n                                     |T|L|\
    \ Rsvd  |DV |\n                                     +-+-+-+-+-+-+-+-+\n      \
    \                  Figure 3: DDP Control Field\n   T - Tagged flag: 1 bit.\n \
    \      Specifies the Tagged or Untagged Buffer Model.  If set to one,\n      \
    \ the ULP Payload carried in this DDP Segment MUST be Placed into a\n       Tagged\
    \ Buffer.\n       If set to zero, the ULP Payload carried in this DDP Segment\
    \ MUST\n       be Placed into an Untagged Buffer.\n   L - Last flag: 1 bit.\n\
    \       Specifies whether the DDP Segment is the last segment of a DDP\n     \
    \  Message.  It MUST be set to one on the last DDP Segment of every\n       DDP\
    \ Message.  It MUST NOT be set to one on any other DDP Segment.\n       The DDP\
    \ Segment with the L bit set to 1 MUST be posted to the LLP\n       after all\
    \ other DDP Segments of the associated DDP Message have\n       been posted to\
    \ the LLP.  For an Untagged DDP Message, the DDP\n       Segment with the L bit\
    \ set to 1 MUST carry the highest MO.\n       If the Last flag is set to one,\
    \ the DDP Message payload MUST be\n       Delivered to the ULP after:\n      \
    \ o  Placement of all DDP Segments of this DDP Message and all\n          prior\
    \ DDP Messages, and\n       o  Delivery of each prior DDP Message.\n       If\
    \ the Last flag is set to zero, the DDP Segment is an\n       intermediate DDP\
    \ Segment.\n   Rsvd - Reserved: 4 bits.\n       Reserved for future use by the\
    \ DDP protocol.  This field MUST be\n       set to zero on transmit, and not checked\
    \ on receive.\n   DV - Direct Data Placement Protocol Version: 2 bits.\n     \
    \  The version of the DDP Protocol in use.  This field MUST be set\n       to\
    \ one to indicate the version of the specification described in\n       this document.\
    \  The value of DV MUST be the same for all the DDP\n       Segments transmitted\
    \ or received on a DDP Stream.\n"
- title: 4.2.  DDP Tagged Buffer Model Header
  contents:
  - "4.2.  DDP Tagged Buffer Model Header\n   Figure 4 shows the DDP Header format\
    \ that MUST be used in all DDP\n   Segments that target Tagged Buffers.  It includes\
    \ the DDP Control\n   Field previously defined in Section 4.1.  (Note: In Figure\
    \ 4, the DDP\n   Header is offset by 16 bits to accommodate the MPA header defined\
    \ in\n   [MPA].  The MPA header is only present if DDP is layered on top of\n\
    \   MPA.)\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      \
    \                              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           \
    \                         |T|L| Rsvd  | DV|   RsvdULP     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                              STag                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    +\
    \                               TO                              +\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 4: Tagged Buffer DDP Header\n   T is set to one.\n\
    \   RsvdULP - Reserved for use by the ULP: 8 bits.\n       The RsvdULP field is\
    \ opaque to the DDP protocol and can be\n       structured in any way by the ULP.\
    \  At the Data Source, DDP MUST\n       set RsvdULP Field to the value specified\
    \ by the ULP.  It is\n       transferred unmodified from the Data Source to the\
    \ Data Sink.  At\n       the Data Sink, DDP MUST provide the RsvdULP field to\
    \ the ULP when\n       the DDP Message is delivered.  Each DDP Segment within\
    \ a specific\n       DDP Message MUST contain the same value for this field. \
    \ The Data\n       Source MUST ensure that each DDP Segment within a specific\
    \ DDP\n       Message contains the same value for this field.\n   STag - Steering\
    \ Tag: 32 bits.\n       The Steering Tag identifies the Data Sink's Tagged Buffer.\
    \  The\n       STag MUST be valid for this DDP Stream.  The STag is associated\n\
    \       with the DDP Stream through a mechanism that is outside the scope\n  \
    \     of the DDP Protocol specification.  At the Data Source, DDP MUST\n     \
    \  set the STag field to the value specified by the ULP.  At the\n       Data\
    \ Sink, the DDP MUST provide the STag field when the ULP\n       Message is delivered.\
    \  Each DDP Segment within a specific DDP\n       Message MUST contain the same\
    \ value for this field and MUST be\n       the value supplied by the ULP.  The\
    \ Data Source MUST ensure that\n       each DDP Segment within a specific DDP\
    \ Message contains the same\n       value for this field.\n   TO - Tagged Offset:\
    \ 64 bits.\n       The Tagged Offset specifies the offset, in octets, within the\n\
    \       Data Sink's Tagged Buffer, where the Placement of ULP Payload\n      \
    \ contained in the DDP Segment starts.  A DDP Message MAY start at\n       an\
    \ arbitrary TO within a Tagged Buffer.\n"
- title: 4.3.  DDP Untagged Buffer Model Header
  contents:
  - "4.3.  DDP Untagged Buffer Model Header\n   Figure 5 shows the DDP Header format\
    \ that MUST be used in all DDP\n   Segments that target Untagged Buffers.  It\
    \ includes the DDP Control\n   Field previously defined in Section 4.1.  (Note:\
    \ In Figure 5, the DDP\n   Header is offset by 16 bits to accommodate the MPA\
    \ header defined in\n   [MPA].  The MPA header is only present if DDP is layered\
    \ on top of\n   MPA.)\n     0                   1                   2        \
    \           3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n                                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                    |T|L| Rsvd  | DV| RsvdULP[0:7]  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                            RsvdULP[8:39]                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                               QN                              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                              MSN                              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                              MO                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 5: Untagged Buffer DDP Header\n   T is set to zero.\n\
    \   RsvdULP - Reserved for use by the ULP: 40 bits.\n       The RsvdULP field\
    \ is opaque to the DDP protocol and can be\n       structured in any way by the\
    \ ULP.  At the Data Source, DDP MUST\n       set RsvdULP Field to the value specified\
    \ by the ULP.  It is\n       transferred unmodified from the Data Source to the\
    \ Data Sink.  At\n       the Data Sink, DDP MUST provide RsvdULP field to the\
    \ ULP when the\n       ULP Message is Delivered.  Each DDP Segment within a specific\
    \ DDP\n       Message MUST contain the same value for the RsvdULP field.  At\n\
    \       the Data Sink, the DDP implementation is NOT REQUIRED to verify\n    \
    \   that the same value is present in the RsvdULP field of each DDP\n       Segment\
    \ within a specific DDP Message and MAY provide the value\n       from any one\
    \ of the received DDP Segment to the ULP when the ULP\n       Message is Delivered.\n\
    \   QN - Queue Number: 32 bits.\n       The Queue Number identifies the Data Sink's\
    \ Untagged Buffer queue\n       referenced by this header.  Each DDP segment within\
    \ a specific\n       DDP message MUST contain the same value for this field and\
    \ MUST\n       be the value supplied by the ULP at the Data Source.  The Data\n\
    \       Source MUST ensure that each DDP Segment within a specific DDP\n     \
    \  Message contains the same value for this field.\n   MSN - Message Sequence\
    \ Number: 32 bits.\n       The Message Sequence Number specifies a sequence number\
    \ that MUST\n       be increased by one (modulo 2^32) with each DDP Message targeting\n\
    \       the specific Queue Number on the DDP Stream associated with this\n   \
    \    DDP Segment.  The initial value for MSN MUST be one.  The MSN\n       value\
    \ MUST wrap to 0 after a value of 0xFFFFFFFF.  Each DDP\n       segment within\
    \ a specific DDP message MUST contain the same value\n       for this field. \
    \ The Data Source MUST ensure that each DDP\n       Segment within a specific\
    \ DDP Message contains the same value for\n       this field.\n   MO - Message\
    \ Offset: 32 bits.\n       The Message Offset specifies the offset, in octets,\
    \ from the\n       start of the DDP Message represented by the MSN and Queue Number\n\
    \       on the DDP Stream associated with this DDP Segment.  The MO\n       referencing\
    \ the first octet of the DDP Message MUST be set to\n       zero by the DDP layer.\n"
- title: 4.4.  DDP Segment Format
  contents:
  - "4.4.  DDP Segment Format\n   Each DDP Segment MUST contain a DDP Header.  Each\
    \ DDP Segment may\n   also contain ULP Payload.  Following is the DDP Segment\
    \ format:\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       \
    \ |  DDP  |                                       |\n        | Header|       \
    \    ULP Payload (if any)        |\n        |       |                        \
    \               |\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 6: DDP Segment Format\n"
- title: 5.  Data Transfer
  contents:
  - "5.  Data Transfer\n   DDP supports multi-segment DDP Messages.  Each DDP Message\
    \ is\n   composed of one or more DDP Segments.  Each DDP Segment contains a\n\
    \   DDP Header.  The DDP Header contains the information required by the\n   receiver\
    \ to Place any ULP Payload included in the DDP Segment.\n"
- title: 5.1.  DDP Tagged or Untagged Buffer Models
  contents:
  - "5.1.  DDP Tagged or Untagged Buffer Models\n   DDP uses two basic buffer models\
    \ for the Placement of the ULP\n   Payload: Tagged Buffer Model and Untagged Buffer\
    \ Model.\n"
- title: 5.1.1.  Tagged Buffer Model
  contents:
  - "5.1.1.  Tagged Buffer Model\n   The Tagged Buffer Model is used by the Data Source\
    \ to transfer a DDP\n   Message into a Tagged Buffer at the Data Sink that has\
    \ been\n   previously Advertised to the Data Source.  An STag identifies a\n \
    \  Tagged Buffer.  For the Placement of a DDP Message using the Tagged\n   Buffer\
    \ Model, the STag is used to identify the buffer, and the TO is\n   used to identify\
    \ the offset within the Tagged Buffer into which the\n   ULP Payload is transferred.\
    \  The protocol used to Advertise the\n   Tagged Buffer is outside the scope of\
    \ this specification (i.e., ULP\n   specific).  A DDP Message can start at an\
    \ arbitrary TO within a\n   Tagged Buffer.\n   Additionally, a Tagged Buffer can\
    \ potentially be written multiple\n   times.  This might be done for error recovery\
    \ or because a buffer is\n   being re-used after some ULP specific synchronization\
    \ mechanism.\n"
- title: 5.1.2.  Untagged Buffer Model
  contents:
  - "5.1.2.  Untagged Buffer Model\n   The Untagged Buffer Model is used by the Data\
    \ Source to transfer a\n   DDP Message to the Data Sink into a queued buffer.\n\
    \   The DDP Queue Number is used by the ULP to separate ULP messages into\n  \
    \ different queues of receive buffers.  For example, if two queues were\n   supported,\
    \ the ULP could use one queue to post buffers handed to it\n   by the application\
    \ above the ULP, and it could use the other queue\n   for buffers that are only\
    \ consumed by ULP-specific control messages.\n   This enables the separation of\
    \ ULP control messages from opaque ULP\n   Payload when using Untagged Buffers.\n\
    \   The DDP Message Sequence Number can be used by the Data Sink to\n   identify\
    \ the specific Untagged Buffer.  The protocol used to\n   communicate how many\
    \ buffers have been queued is outside the scope of\n   this specification.  Similarly,\
    \ the exact implementation of the\n   buffer queue is outside the scope of this\
    \ specification.\n"
- title: 5.2.  Segmentation and Reassembly of a DDP Message
  contents:
  - "5.2.  Segmentation and Reassembly of a DDP Message\n   At the Data Source, the\
    \ DDP layer MUST segment the data contained in\n   a ULP message into a series\
    \ of DDP Segments, where each DDP Segment\n   contains a DDP Header and ULP Payload,\
    \ and MUST be no larger than the\n   MULPDU value Advertised by the LLP.  The\
    \ ULP Message Length MUST be\n   less than 2^32.  At the Data Source, the DDP\
    \ layer MUST send all the\n   data contained in the ULP message.  At the Data\
    \ Sink, the DDP layer\n   MUST Place the ULP Payload contained in all valid incoming\
    \ DDP\n   Segments associated with a DDP Message into the ULP Buffer.\n   DDP\
    \ Message segmentation at the Data Source is accomplished by\n   identifying a\
    \ DDP Message (which corresponds one-to-one with a ULP\n   Message) uniquely and\
    \ then, for each associated DDP Segment of a DDP\n   Message, by specifying an\
    \ octet offset for the portion of the ULP\n   Message contained in the DDP Segment.\n\
    \   For an Untagged DDP Message, the combination of the QN and MSN\n   uniquely\
    \ identifies a DDP Message.  The octet offset for each DDP\n   Segment of a Untagged\
    \ DDP Message is the MO field.  For each DDP\n   Segment of a Untagged DDP Message,\
    \ the MO MUST be set to the octet\n   offset from the first octet in the associated\
    \ ULP Message (which is\n   defined to be zero) to the first octet in the ULP\
    \ Payload contained\n   in the DDP Segment.\n   For example, if the ULP Untagged\
    \ Message was 2048 octets, and the\n   MULPDU was 1500 octets, the Data Source\
    \ would generate two DDP\n   Segments, one with MO = 0, containing 1482 octets\
    \ of ULP Payload, and\n   a second with MO = 1482, containing 566 octets of ULP\
    \ Payload.  In\n   this example, the amount of ULP Payload for the first DDP Segment\
    \ was\n   calculated as:\n         1482 = 1500 (MULPDU) - 18 (for the DDP Header)\n\
    \   For a Tagged DDP Message, the STag and TO, combined with the in-order\n  \
    \ delivery characteristics of the LLP, are used to segment and\n   reassemble\
    \ the ULP Message.  Because the initial octet offset (the TO\n   field) can be\
    \ non-zero, recovery of the original ULP Message boundary\n   cannot be done in\
    \ the general case without an additional ULP Message.\n       Implementers' note:\
    \ One implementation, valid for some ULPs such\n       as RDMAP, is to not directly\
    \ support recovery of the ULP Message\n       boundary for a Tagged DDP Message.\
    \  For example, the ULP may wish\n       to have the Local Peer use small buffers\
    \ at the Data Source even\n       when the ULP at the Data Sink has Advertised\
    \ a single large\n       Tagged Buffer for this data transfer.  In this case,\
    \ the ULP may\n       choose to use the same STag for multiple consecutive ULP\n\
    \       Messages.  Thus, a non-zero initial TO and re-use of the STag\n      \
    \ effectively enable the ULP to implement segmentation and\n       reassembly\
    \ due to ULP-specific constraints.  See [RDMAP] for\n       details of how this\
    \ is done.\n       A different implementation of a ULP could use an Untagged DDP\n\
    \       Message (sent after the Tagged DDP Message) that details the\n       initial\
    \ TO for the STag that was used in the Tagged DDP Message.\n       And finally,\
    \ another implementation of a ULP could choose to\n       always use an initial\
    \ TO of zero such that no additional message\n       is required to convey the\
    \ initial TO used in a Tagged DDP\n       Message.\n   Regardless of whether the\
    \ ULP chooses to recover the original ULP\n   Message boundary at the Data Sink\
    \ for a Tagged DDP Message, DDP\n   supports segmentation and reassembly of the\
    \ Tagged DDP Message.  The\n   STag is used to identify the ULP Buffer at the\
    \ Data Sink, and the TO\n   is used to identify the octet-offset within the ULP\
    \ Buffer referenced\n   by the STag.  The ULP at the Data Source MUST specify\
    \ the STag and\n   the initial TO when the ULP Message is handed to DDP.\n   For\
    \ each DDP Segment of a Tagged DDP Message, the TO MUST be set to\n   the octet\
    \ offset from the first octet in the associated ULP Message\n   to the first octet\
    \ in the ULP Payload contained in the DDP Segment,\n   plus the TO assigned to\
    \ the first octet in the associated ULP\n   Message.\n   For example, if the ULP\
    \ Tagged Message was 2048 octets with an\n   initial TO of 16384, and the MULPDU\
    \ was 1500 octets, the Data Source\n   would generate two DDP Segments: one with\
    \ TO = 16384, containing the\n   first 1486 octets of ULP payload, and a second\
    \ with TO = 17870,\n   containing 562 octets of ULP payload.  In this example,\
    \ the amount of\n   ULP payload for the first DDP Segment was calculated as:\n\
    \         1486 = 1500 (MULPDU) - 14 (for the DDP Header)\n   A zero-length DDP\
    \ Message is allowed and MUST consume exactly one DDP\n   Segment.  Only the DDP\
    \ Control and RsvdULP Fields MUST be valid for a\n   zero-length Tagged DDP Segment.\
    \  The STag and TO fields MUST NOT be\n   checked for a zero-length Tagged DDP\
    \ Message.\n   For either Untagged or Tagged DDP Messages, the Data Sink is not\n\
    \   required to verify that the entire ULP Message has been received.\n"
- title: 5.3.  Ordering Among DDP Messages
  contents:
  - "5.3.  Ordering Among DDP Messages\n   Messages passed through the DDP MUST conform\
    \ to the ordering rules\n   defined in this section.\n   At the Data Source, DDP:\n\
    \      * MUST transmit DDP Messages in the order they were submitted to\n    \
    \    the DDP layer,\n      * SHOULD transmit DDP Segments within a DDP Message\
    \ in increasing\n        MO order for Untagged DDP Messages, and in increasing\
    \ TO order\n        for Tagged DDP Messages.\n   At the Data Sink, DDP (Note:\
    \ The following rules are motivated by LLP\n   implementations that separate Placement\
    \ and Delivery.):\n      * MAY perform Placement of DDP Segments out of order,\n\
    \      * MAY perform Placement of a DDP Segment more than once,\n      * MUST\
    \ Deliver a DDP Message to the ULP at most once,\n      * MUST Deliver DDP Messages\
    \ to the ULP in the order they were sent\n        by the Data Source.\n"
- title: 5.4.  DDP Message Completion and Delivery
  contents:
  - "5.4.  DDP Message Completion and Delivery\n   At the Data Source, DDP Message\
    \ transfer is considered completed when\n   the reliable, in-order transport LLP\
    \ has indicated that the transfer\n   will occur reliably.  Note that this in\
    \ no way restricts the LLP from\n   buffering the data at either the Data Source\
    \ or Data Sink.  Thus, at\n   the Data Source, completion of a DDP Message does\
    \ not necessarily\n   mean that the Data Sink has received the message.\n   At\
    \ the Data Sink, DDP MUST Deliver a DDP Message if and only if all\n   of the\
    \ following are true:\n      * the last DDP Segment of the DDP Message had its\
    \ Last flag set,\n      * all of the DDP Segments of the DDP Message have been\
    \ Placed,\n      * all preceding DDP Messages have been Placed, and\n      * each\
    \ preceding DDP Message has been Delivered to the ULP.\n   At the Data Sink, DDP\
    \ MUST provide the ULP Message Length to the ULP\n   when an Untagged DDP Message\
    \ is Delivered.  The ULP Message Length\n   may be calculated by adding the MO\
    \ and the ULP Payload length in the\n   last DDP Segment (with the Last flag set)\
    \ of an Untagged DDP Message.\n   At the Data Sink, DDP MUST provide the RsvdULP\
    \ Field of the DDP\n   Message to the ULP when the DDP Message is delivered.\n"
- title: 6.  DDP Stream Setup and Teardown
  contents:
  - "6.  DDP Stream Setup and Teardown\n   This section describes LLP independent\
    \ issues related to DDP Stream\n   setup and teardown.\n"
- title: 6.1.  DDP Stream Setup
  contents:
  - "6.1.  DDP Stream Setup\n   It is expected that the ULP will use a mechanism outside\
    \ the scope of\n   this specification to establish an LLP Connection, and that\
    \ the LLP\n   Connection will support one or more LLP Streams (e.g., MPA/TCP or\n\
    \   SCTP).  After the LLP sets up the LLP Stream, it will enable a DDP\n   Stream\
    \ on a specific LLP Stream at an appropriate point.\n   The ULP is required to\
    \ enable both endpoints of an LLP Stream for DDP\n   data transfer at the same\
    \ time, in both directions; this is necessary\n   so that the Data Sink can properly\
    \ recognize the DDP Segments.\n"
- title: 6.2.  DDP Stream Teardown
  contents:
  - "6.2.  DDP Stream Teardown\n   DDP MUST NOT independently initiate Stream Teardown.\
    \  DDP either\n   responds to a stream being torn down by the LLP or processes\
    \ a\n   request from the ULP to tear down a stream.  DDP Stream teardown\n   disables\
    \ DDP capabilities on both endpoints.  For connection-oriented\n   LLPs, DDP Stream\
    \ teardown MAY result in underlying LLP Connection\n   teardown.\n"
- title: 6.2.1.  DDP Graceful Teardown
  contents:
  - "6.2.1.  DDP Graceful Teardown\n   It is up to the ULP to ensure that DDP teardown\
    \ happens on both\n   endpoints of the DDP Stream at the same time; this is necessary\
    \ so\n   that the Data Sink stops trying to interpret the DDP Segments.\n   If\
    \ the Local Peer ULP indicates graceful teardown, the DDP layer on\n   the Local\
    \ Peer SHOULD ensure that all ULP data would be transferred\n   before the underlying\
    \ LLP Stream and Connection are torn down, and\n   any further data transfer requests\
    \ by the Local Peer ULP MUST return\n   an error.\n   If the DDP layer on the\
    \ Local Peer receives a graceful teardown\n   request from the LLP, any further\
    \ data received after the request is\n   considered an error and MUST cause the\
    \ DDP Stream to be abortively\n   torn down.\n   If the Local Peer LLP supports\
    \ a half-closed LLP Stream, on the\n   receipt of an LLP graceful teardown request\
    \ of the DDP Stream, DDP\n   SHOULD indicate the half-closed state to the ULP,\
    \ and continue to\n   process outbound data transfer requests normally.  Following\
    \ this\n   event, when the Local Peer ULP requests graceful teardown, DDP MUST\n\
    \   indicate to the LLP that it SHOULD perform a graceful close of the\n   other\
    \ half of the LLP Stream.\n   If the Local Peer LLP supports a half-closed LLP\
    \ Stream, on the\n   receipt of a ULP graceful half-closed teardown request of\
    \ the DDP\n   Stream, DDP SHOULD keep data reception enabled on the other half\
    \ of\n   the LLP Stream.\n"
- title: 6.2.2.  DDP Abortive Teardown
  contents:
  - "6.2.2.  DDP Abortive Teardown\n   As previously mentioned, DDP does not independently\
    \ terminate a DDP\n   Stream.  Thus, any of the following fatal errors on a DDP\
    \ Stream MUST\n   cause DDP to indicate to the ULP that a fatal error has occurred:\n\
    \      * Underlying LLP Connection or LLP Stream is lost.\n      * Underlying\
    \ LLP reports a fatal error.\n      * DDP Header has one or more invalid fields.\n\
    \   If the LLP indicates to the ULP that a fatal error has occurred, the\n   DDP\
    \ layer SHOULD report the error to the ULP (see Section 7.2, DDP\n   Error Numbers)\
    \ and complete all outstanding ULP requests with an\n   error.  If the underlying\
    \ LLP Stream is still intact, DDP SHOULD\n   continue to allow the ULP to transfer\
    \ additional DDP Messages on the\n   outgoing half connection after the fatal\
    \ error was indicated to the\n   ULP.  This enables the ULP to transfer an error\
    \ syndrome to the\n   Remote Peer.  After indicating to the ULP a fatal error\
    \ has occurred,\n   the DDP Stream MUST NOT be terminated until the Local Peer\
    \ ULP\n   indicates to the DDP layer that the DDP Stream should be abortively\n\
    \   torn down.\n"
- title: 7.  Error Semantics
  contents:
  - "7.  Error Semantics\n   All LLP errors reported to DDP SHOULD be passed up to\
    \ the ULP.\n"
- title: 7.1.  Errors Detected at the Data Sink
  contents:
  - "7.1.  Errors Detected at the Data Sink\n   For non-zero-length Untagged DDP Segments,\
    \ the DDP Segment MUST be\n   validated before Placement by verifying:\n   1.\
    \  The QN is valid for this stream.\n   2.  The QN and MSN have an associated\
    \ buffer that allows Placement of\n       the payload.\n       Implementers' note:\
    \ DDP implementations SHOULD consider lack of\n       an associated buffer as\
    \ a system fault.  DDP implementations MAY\n       try to recover from the system\
    \ fault using LLP means in a ULP-\n       transparent way.  DDP implementations\
    \ SHOULD NOT permit system\n       faults to occur repeatedly or frequently. \
    \ If there is not an\n       associated buffer, DDP implementations MAY choose\
    \ to disable the\n       stream for the reception and report an error to the ULP\
    \ at the\n       Data Sink.\n   3.  The MO falls in the range of legal offsets\
    \ associated with the\n       Untagged Buffer.\n   4.  The sum of the DDP Segment\
    \ payload length and the MO falls in the\n       range of legal offsets associated\
    \ with the Untagged Buffer.\n   5.  The Message Sequence Number falls in the range\
    \ of legal Message\n       Sequence Numbers, for the queue defined by the QN.\
    \  The legal\n       range is defined as being between the MSN value assigned\
    \ to the\n       first available buffer for a specific QN and the MSN value\n\
    \       assigned to the last available buffer for a specific QN.\n       Implementers'\
    \ note: for a typical Queue Number, the lower limit\n       of the Message Sequence\
    \ Number is defined by whatever DDP\n       Messages have already been completed.\
    \  The upper limit is defined\n       by however many message buffers are currently\
    \ available for that\n       queue.  Both numbers change dynamically as new DDP\
    \ Messages are\n       received and completed, and new buffers are added.  It\
    \ is up to\n       the ULP to ensure that sufficient buffers are available to\
    \ handle\n       the incoming DDP Segments.\n   For non-zero-length Tagged DDP\
    \ Segments, the segment MUST be\n   validated before Placement by verifying:\n\
    \   1.  The STag is valid for this stream.\n   2.  The STag has an associated\
    \ buffer that allows Placement of the\n       payload.\n   3.  The TO falls in\
    \ the range of legal offsets registered for the\n       STag.\n   4.  The sum\
    \ of the DDP Segment payload length and the TO falls in the\n       range of legal\
    \ offsets registered for the STag.\n   5.  A 64-bit unsigned sum of the DDP Segment\
    \ payload length and the\n       TO does not wrap.\n   If the DDP layer detects\
    \ any of the receive errors listed in this\n   section, it MUST cease placing\
    \ the remainder of the DDP Segment and\n   report the error(s) to the ULP.  The\
    \ DDP layer SHOULD include in the\n   error report the DDP Header, the type of\
    \ error, and the length of the\n   DDP segment, if available.  DDP MUST silently\
    \ drop any subsequent\n   incoming DDP Segments.  Since each of these errors represents\
    \ a\n   failure of the sending ULP or protocol, DDP SHOULD enable the ULP to\n\
    \   send one additional DDP Message before terminating the DDP Stream.\n"
- title: 7.2.  DDP Error Numbers
  contents:
  - "7.2.  DDP Error Numbers\n   The following error numbers MUST be used when reporting\
    \ errors to the\n   ULP.  They correspond to the checks enumerated in section\
    \ 7.1. Each\n   error is subdivided into a 4-bit Error Type and an 8-bit Error\
    \ Code.\n   Error    Error\n   Type     Code        Description\n   ----------------------------------------------------------\n\
    \   0x0      0x00        Local Catastrophic\n   0x1                  Tagged Buffer\
    \ Error\n            0x00        Invalid STag\n            0x01        Base or\
    \ bounds violation\n            0x02        STag not associated with DDP Stream\n\
    \            0x03        TO wrap\n            0x04        Invalid DDP version\n\
    \   0x2                  Untagged Buffer Error\n            0x01        Invalid\
    \ QN\n            0x02        Invalid MSN - no buffer available\n            0x03\
    \        Invalid MSN - MSN range is not valid\n            0x04        Invalid\
    \ MO\n            0x05        DDP Message too long for available buffer\n    \
    \        0x06        Invalid DDP version\n   0x3      Rsvd        Reserved for\
    \ the use by the LLP\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This section discusses both protocol-specific\
    \ considerations and the\n   implications of using DDP with existing security\
    \ mechanisms.  The\n   security requirements for the DDP implementation are provided\
    \ at the\n   end of the section.  A more detailed analysis of the security issues\n\
    \   around the implementation and the use of the DDP can be found in\n   [RDMASEC].\n\
    \   The IPsec requirements for RDDP are based on the version of IPsec\n   specified\
    \ in RFC 2401 [IPSEC] and related RFCs, as profiled by RFC\n   3723 [RFC3723],\
    \ despite the existence of a newer version of IPsec\n   specified in RFC 4301\
    \ [RFC4301] and related RFCs [RFC4303],\n   [RFC4306].  One of the important early\
    \ applications of the RDDP\n   protocols is their use with iSCSI [iSER]; RDDP's\
    \ IPsec requirements\n   follow those of IPsec in order to facilitate that usage\
    \ by allowing a\n   common profile of IPsec to be used with iSCSI and the RDDP\
    \ protocols.\n   In the future, RFC 3723 may be updated to the newer version of\
    \ IPsec;\n   the IPsec security requirements of any such update should apply\n\
    \   uniformly to iSCSI and the RDDP protocols.\n"
- title: 8.1.  Protocol-Specific Security Considerations
  contents:
  - "8.1.  Protocol-Specific Security Considerations\n   The vulnerabilities of DDP\
    \ to active third-party interference are no\n   greater than any other protocol\
    \ running over transport protocols such\n   as TCP and SCTP over IP.  A third\
    \ party, by injecting spoofed packets\n   into the network that are Delivered\
    \ to a DDP Data Sink, could launch\n   a variety of attacks that exploit DDP-specific\
    \ behavior.  Since DDP\n   directly or indirectly exposes memory addresses on\
    \ the wire, the\n   Placement information carried in each DDP Segment must be\
    \ validated,\n   including invalid STag and octet-level granularity base and bounds\n\
    \   check, before any data is Placed.  For example, a third-party\n   adversary\
    \ could inject random packets that appear to be valid DDP\n   Segments and corrupt\
    \ the memory on a DDP Data Sink.  Since DDP is IP\n   transport protocol independent,\
    \ communication security mechanisms\n   such as IPsec [IPSEC] may be used to prevent\
    \ such attacks.\n"
- title: 8.2.  Association of an STag and a DDP Stream
  contents:
  - "8.2.  Association of an STag and a DDP Stream\n   There are several mechanisms\
    \ for associating an STag and a DDP\n   Stream.  Two required mechanisms for this\
    \ association are a\n   Protection Domain (PD) association and a DDP Stream association.\n\
    \   Under the Protection Domain (PD) association, a unique Protection\n   Domain\
    \ Identifier (PD ID) is created and used locally to associate an\n   STag with\
    \ a set of DDP Streams.  Under this mechanism, the use of the\n   STag is only\
    \ permitted on the DDP Streams that have the same PD ID as\n   the STag.  For\
    \ an incoming DDP Segment of a Tagged DDP Message on a\n   DDP Stream, if the\
    \ PD ID of the DDP Stream is not the same as the PD\n   ID of the STag targeted\
    \ by the Tagged DDP Message, then the DDP\n   Segment is not Placed, and the DDP\
    \ layer MUST surface a local error\n   to the ULP.  Note that the PD ID is locally\
    \ defined and cannot be\n   directly manipulated by the Remote Peer.\n   Under\
    \ the DDP Stream association, a DDP Stream is identified locally\n   by a unique\
    \ DDP Stream identifier (ID).  An STag is associated with a\n   DDP Stream by\
    \ using a DDP Stream ID.  In this case, for an incoming\n   DDP Segment of a Tagged\
    \ DDP Message on a DDP Stream, if the DDP\n   Stream ID of the DDP Stream is not\
    \ the same as the DDP Stream ID of\n   the STag targeted by the Tagged DDP Message,\
    \ then the DDP Segment is\n   not Placed and the DDP layer MUST surface a local\
    \ error to the ULP.\n   Note that the DDP Stream ID is locally defined and cannot\
    \ be directly\n   manipulated by the Remote Peer.\n   A ULP SHOULD associate an\
    \ STag with at least one DDP Stream.  DDP\n   MUST support Protection Domain association\
    \ and DDP Stream association\n   mechanisms for associating an STag and a DDP\
    \ Stream.\n"
- title: 8.3.  Security Requirements
  contents:
  - "8.3.  Security Requirements\n   [RDMASEC] defines the security model and general\
    \ assumptions for\n   RDMAP/DDP.  This subsection provides the security requirements\
    \ for\n   the DDP implementation.  For more details on the type of attacks,\n\
    \   type of attackers, trust models, and resource sharing for the DDP\n   implementation,\
    \ the reader is referred to [RDMASEC].\n   DDP has several mechanisms that deal\
    \ with a number of attacks.  These\n   attacks include, but are not limited to:\n\
    \   1.  Connection to/from an unauthorized or unauthenticated endpoint.\n   2.\
    \  Hijacking of a DDP Stream.\n   3.  Attempts to read or write from unauthorized\
    \ memory regions.\n   4.  Injection of RDMA Messages within a stream on a multi-user\n\
    \       operating system by another application.\n   DDP relies on the LLP to\
    \ establish the LLP Stream over which DDP\n   Messages will be carried.  DDP itself\
    \ does nothing to authenticate\n   the validity of the LLP Stream of either of\
    \ the endpoints.  It is the\n   responsibility of the ULP to validate the LLP\
    \ Stream.  This is highly\n   desirable due to the nature of DDP.\n   Hijacking\
    \ of an DDP Stream would require that the underlying LLP\n   Stream is hijacked.\
    \  This would require knowledge of Advertised\n   Buffers in order to directly\
    \ Place data into a user buffer.\n   Therefore, this is constrained by the same\
    \ techniques mentioned to\n   guard against attempts to read or write from unauthorized\
    \ memory\n   regions.\n   DDP does not require a node to open its buffers to arbitrary\
    \ attacks\n   over the DDP Stream.  It may access ULP memory only to the extent\n\
    \   that the ULP has enabled and authorized it to do so.  The STag access\n  \
    \ control model is defined in [RDMASEC].  Specific security operations\n   include:\n\
    \   1.  STags are only valid over the exact byte range established by the\n  \
    \     ULP.  DDP MUST provide a mechanism for the ULP to establish and\n      \
    \ revoke the TO range associated with the ULP Buffer referenced by\n       the\
    \ STag.\n   2.  STags are only valid for the duration established by the ULP.\n\
    \       The ULP may revoke them at any time, in accordance with its own\n    \
    \   upper layer protocol requirements.  DDP MUST provide a mechanism\n       for\
    \ the ULP to establish and revoke STag validity.\n   3.  DDP MUST provide a mechanism\
    \ for the ULP to communicate the\n       association between a STag and a specific\
    \ DDP Stream.\n   4.  A ULP may only expose memory to remote access to the extent\
    \ that\n       it already had access to that memory itself.\n   5.  If an STag\
    \ is not valid on a DDP Stream, DDP MUST pass the\n       invalid access attempt\
    \ to the ULP.  The ULP may provide a\n       mechanism for terminating the DDP\
    \ Stream.\n   Further, DDP provides a mechanism that directly Places incoming\n\
    \   payloads in user-mode ULP Buffers.  This avoids the risks of prior\n   solutions\
    \ that relied upon exposing system buffers for incoming\n   payloads.\n   For\
    \ the DDP implementation, two components MUST be provided: an\n   RDMA-enabled\
    \ NIC (RNIC) and a Privileged Resource Manager (PRM).\n"
- title: 8.3.1.  RNIC Requirements
  contents:
  - "8.3.1.  RNIC Requirements\n   The RNIC MUST implement the DDP wire Protocol and\
    \ perform the\n   security semantics described below.\n   1.  An RNIC MUST ensure\
    \ that a specific DDP Stream in a specific\n       Protection Domain cannot access\
    \ an STag in a different Protection\n       Domain.\n   2.  An RNIC MUST ensure\
    \ that if an STag is limited in scope to a\n       single DDP Stream, no other\
    \ DDP Stream can use the STag.\n   3.  An RNIC MUST ensure that a Remote Peer\
    \ is not able to access\n       memory outside the buffer specified when the STag\
    \ was enabled for\n       remote access.\n   4.  An RNIC MUST provide a mechanism\
    \ for the ULP to establish and\n       revoke the association of a ULP Buffer\
    \ to an STag and TO range.\n   5.  An RNIC MUST provide a mechanism for the ULP\
    \ to establish and\n       revoke read, write, or read and write access to the\
    \ ULP Buffer\n       referenced by an STag.\n   6.  An RNIC MUST ensure that the\
    \ network interface can no longer\n       modify an Advertised Buffer after the\
    \ ULP revokes remote access\n       rights for an STag.\n   7.  An RNIC MUST NOT\
    \ enable firmware to be loaded on the RNIC\n       directly from an untrusted\
    \ Local Peer or Remote Peer, unless the\n       Peer is properly authenticated\
    \ (by a mechanism outside the scope\n       of this specification.  The mechanism\
    \ presumably entails\n       authenticating that the remote ULP has the right\
    \ to perform the\n       update), and the update is done via a secure protocol,\
    \ such as\n       IPsec.\n"
- title: 8.3.2.  Privileged Resources Manager Requirement
  contents:
  - "8.3.2.  Privileged Resources Manager Requirement\n   The PRM MUST implement the\
    \ security semantics described below.\n   1.  All Non-Privileged ULP interactions\
    \ with the RNIC Engine that\n       could affect other ULPs MUST be done using\
    \ the Privileged\n       Resource Manager as a proxy.\n   2.  All ULP resource\
    \ allocation requests for scarce resources MUST\n       also be done using a Privileged\
    \ Resource Manager.\n   3.  The Privileged Resource Manager MUST NOT assume different\
    \ ULPs\n       share Partial Mutual Trust unless there is a mechanism to ensure\n\
    \       that the ULPs do indeed share partial mutual trust.\n   4.  If Non-Privileged\
    \ ULPs are supported, the Privileged Resource\n       Manager MUST verify that\
    \ the Non-Privileged ULP has the right to\n       access a specific Data Buffer\
    \ before allowing an STag for which\n       the ULP has access rights to be associated\
    \ with a specific Data\n       Buffer.\n   5.  The Privileged Resource Manager\
    \ SHOULD prevent a Local Peer from\n       allocating more than its fair share\
    \ of resources.  If an RNIC\n       provides the ability to share receive buffers\
    \ across multiple DDP\n       Streams, the combination of the RNIC and the Privileged\
    \ Resource\n       Manager MUST be able to detect if the Remote Peer is attempting\n\
    \       to consume more than its fair share of resources so that the\n       Local\
    \ Peer can apply countermeasures to detect and prevent the\n       attack.\n"
- title: 8.4.  Security Services for DDP
  contents:
  - "8.4.  Security Services for DDP\n   DDP uses IP-based network services; therefore,\
    \ all exchanged DDP\n   Segments are vulnerable to spoofing, tampering and information\n\
    \   disclosure attacks.  If a DDP Stream may be subject to impersonation\n   attacks,\
    \ or stream hijacking attacks, it is highly RECOMMENDED that\n   the DDP Stream\
    \ be authenticated, integrity protected, and protected\n   from replay attacks.\
    \  It MAY use confidentiality protection to\n   protect from eavesdropping.\n"
- title: 8.4.1.  Available Security Services
  contents:
  - "8.4.1.  Available Security Services\n   IPsec can be used to protect against\
    \ the packet injection attacks\n   outlined above.  Because IPsec is designed\
    \ to secure arbitrary IP\n   packet streams, including streams where packets are\
    \ lost, DDP can run\n   on top of IPsec without any change.\n   DDP security may\
    \ also profit from SSL or TLS security services\n   provided for TCP or SCTP based\
    \ ULPs [TLS] as well as from DTLS [DTLS]\n   security services provided beneath\
    \ the transport protocol.  See\n   [RDMASEC] for further discussion of these approaches\
    \ and the\n   rationale for selection of IPsec security services for the RDDP\n\
    \   protocols.\n"
- title: 8.4.2.  Requirements for IPsec Services for DDP
  contents:
  - "8.4.2.  Requirements for IPsec Services for DDP\n   IPsec packets are processed\
    \ (e.g., integrity checked and possibly\n   decrypted) in the order they are received,\
    \ and a DDP Data Sink will\n   process the decrypted DDP Segments contained in\
    \ these packets in the\n   same manner as DDP Segments contained in unsecured\
    \ IP packets.\n   The IP Storage working group has defined the normative IPsec\n\
    \   requirements for IP Storage [RFC3723].  Portions of this\n   specification\
    \ are applicable to the DDP.  In particular, a compliant\n   implementation of\
    \ IPsec services MUST meet the requirements as\n   outlined in Section 2.3 of\
    \ [RFC3723].  Without replicating the\n   detailed discussion in [RFC3723], this\
    \ includes the following\n   requirements:\n   1.  The implementation MUST support\
    \ IPsec ESP [RFC2406], as well as\n       the replay protection mechanisms of\
    \ IPsec.  When ESP is utilized,\n       per-packet data origin authentication,\
    \ integrity, and replay\n       protection MUST be used.\n   2.  It MUST support\
    \ ESP in tunnel mode and MAY implement ESP in\n       transport mode.\n   3. \
    \ It MUST support IKE [RFC2409] for peer authentication,\n       negotiation of\
    \ security associations, and key management, using\n       the IPsec DOI [RFC2407].\n\
    \   4.  It MUST NOT interpret the receipt of an IKE delete message as a\n    \
    \   reason for tearing down the DDP stream.  Since IPsec acceleration\n      \
    \ hardware may only be able to handle a limited number of active\n       IPsec\
    \ Security Associations (SAs), idle SAs may be dynamically\n       brought down\
    \ and a new SA be brought up again, if activity\n       resumes.\n   5.  It MUST\
    \ support peer authentication using a pre-shared key, and\n       MAY support\
    \ certificate-based peer authentication using digital\n       signatures.  Peer\
    \ authentication using the public key encryption\n       methods [RFC2409] SHOULD\
    \ NOT be used.\n   6.  It MUST support IKE Main Mode and SHOULD support Aggressive\
    \ Mode.\n       IKE Main Mode with pre-shared key authentication SHOULD NOT be\n\
    \       used when either of the peers uses a dynamically assigned IP\n       address.\n\
    \   7.  Access to locally stored secret information (pre-shared or\n       private\
    \ key for digital signing) must be suitably restricted,\n       since compromise\
    \ of the secret information nullifies the security\n       properties of the IKE/IPsec\
    \ protocols.\n   8.  It MUST follow the guidelines of Section 2.3.4 of [RFC3723]\
    \ on\n       the setting of IKE parameters to achieve a high level of\n      \
    \ interoperability without requiring extensive configuration.\n   Furthermore,\
    \ implementation and deployment of the IPsec services for\n   DDP should follow\
    \ the Security Considerations outlined in Section 5\n   of [RFC3723].\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document requests no direct action from IANA.\
    \  The following\n   consideration is listed here as commentary.\n   If DDP were\
    \ enabled a priori for a ULP by connecting to a well-known\n   port, this well-known\
    \ port would be registered for the DDP with IANA.\n   The registration of the\
    \ well-known port would be the responsibility\n   of the ULP specification.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2406] Kent, S. and Atkinson, R., \"IP Encapsulating Security\n\
    \             Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2407] Piper, D.,\
    \ \"The Internet IP Security Domain of\n             Interpretation of ISAKMP\"\
    , RFC 2407, November 1998.\n   [RFC2409] Harkins, D. and Carrel, D., \"The Internet\
    \ Key Exchange\n             (IKE)\", RFC 2409, November 1998.\n   [RFC3723] Aboba,\
    \ B., Tseng, J., Walker, J., Rangan, V., Travostino,\n             F., \"Securing\
    \ Block Storage Protocols over IP\", RFC 3723,\n             April 2004.\n   [IPSEC]\
    \   Kent, S. and R. Atkinson, \"Security Architecture for the\n             Internet\
    \ Protocol\", RFC 2401, November 1998.\n   [MPA]     Culley, P., Elzur, U., Recio,\
    \ R., Bailey, S., and J.\n             Carrier, \"Marker PDU Aligned Framing for\
    \ TCP\n             Specification\", RFC 5044, October 2007.\n   [RDMAP]   Recio,\
    \ R., Culley, P., Garcia, D., and J. Hilland, \"A\n             Remote Direct\
    \ Memory Access Protocol Specification\", RFC\n             5040, October 2007.\n\
    \   [RDMASEC] Pinkerton, J. and E. Deleganes, \"Direct Data Placement\n      \
    \       Protocol (DDP) / Remote Direct Memory Access Protocol\n             (RDMAP)\
    \ Security\", RFC 5042, October 2007.\n   [SCTP]    Stewart, R., Ed., \"Stream\
    \ Control Transmission Protocol\",\n             RFC 4960, September 2007.\n \
    \  [SCTPDDP] Bestler, C. and R. Stewart, \"Stream Control Transmission\n     \
    \        Protocol (SCTP) Direct Data Placement (DDP) Adaptation\",\n         \
    \    RFC 5043, October 2007.\n   [TCP]     Postel, J., \"Transmission Control\
    \ Protocol\", STD 7, RFC\n             793, September 1981.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC4301] Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n             Internet Protocol\", RFC 4301, December 2005.\n   [RFC4303]\
    \ Kent, S., \"IP Encapsulating Security Payload (ESP)\", RFC\n             4303,\
    \ December 2005.\n   [RFC4306] Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\"\
    , RFC\n             4306, December 2005.\n   [DTLS]    Rescorla, E. and N. Modadugu,\
    \ \"Datagram Transport Layer\n             Security\", RFC 4347, April 2006.\n\
    \   [TLS]     Dierks, T. and E. Rescorla, \"The Transport Layer Security\n   \
    \          (TLS) Protocol Version 1.1\", RFC 4346, April 2006.\n   [iSER]    Ko,\
    \ M., Chadalapaka, M., Hufferd, J., Elzur, U., Shah, H.,\n             and P.\
    \ Thaler, \"Internet Small Computer System Interface\n             (iSCSI) Extensions\
    \ for Remote Direct Memory Access (RDMA)\",\n             RFC 5046, October 2007.\n"
- title: Appendix A.  Receive Window Sizing
  contents:
  - "Appendix A.  Receive Window Sizing\n   This appendix provides guidance to LLP\
    \ implementers.\n   Reliable, sequenced, LLPs include a mechanism to Advertise\
    \ the amount\n   of receive buffer space a sender may consume.  This is generally\n\
    \   called a \"receive window\".\n   DDP allows data to be transferred directly\
    \ to predefined buffers at\n   the Data Sink.  Accordingly, the LLP receive window\
    \ size need not be\n   affected by the reception of a DDP Segment, if that segment\
    \ is placed\n   before additional segments arrive.\n   The LLP implementation\
    \ SHOULD maintain an Advertised receive window\n   large enough to enable a reasonable\
    \ number of segments to be\n   outstanding at one time.  The amount to Advertise\
    \ depends on the\n   desired data rate, and the expected or actual round-trip\
    \ delay\n   between endpoints.\n   The amount of actual buffers maintained to\
    \ \"back up\" the receive\n   window is left up to the implementation.  This amount\
    \ will depend on\n   the rate that DDP Segments can be retired; there may be some\
    \ cases\n   where segment processing cannot keep up with the incoming packet\n\
    \   rate.  If this occurs, one reasonable way to slow the incoming packet\n  \
    \ rate is to reduce the receive window.\n   Note that the LLP should take care\
    \ to comply with the applicable\n   RFCs; for instance, for TCP, receivers are\
    \ highly discouraged from\n   \"shrinking\" the receive window (reducing the right\
    \ edge of the window\n   after it has been Advertised).\n"
- title: Appendix B.  Contributors
  contents:
  - "Appendix B.  Contributors\n   Many thanks to the following individuals for their\
    \ contributions.\n   John Carrier\n   Cray Inc.\n   411 First Avenue S, Suite\
    \ 600\n   Seattle, WA 98104-2860\n   Phone: 206-701-2090\n   EMail: carrier@cray.com\n\
    \   Hari Ghadia\n   Gen10 Technology, Inc.\n   1501 W Shady Grove Road\n   Grand\
    \ Prairie, TX 75050\n   Phone: (972) 301 3630\n   EMail: hghadia@gen10technology.com\n\
    \   Caitlin Bestler\n   Broadcom Corporation\n   16215 Alton Parkway\n   Irvine,\
    \ CA 92619-7013 USA\n   Phone: +1 (949) 926-6383\n   EMail: caitlinb@Broadcom.com\n\
    \   Uri Elzur\n   Broadcom Corporation\n   5300 California Avenue\n   Irvine,\
    \ CA 92617, USA\n   Phone: 949.926.6432\n   EMail: uri@broadcom.com\n   Mike Penna\n\
    \   Broadcom Corporation\n   16215 Alton Parkway\n   Irvine, CA 92619-7013 USA\n\
    \   Phone: +1 (949) 926-7149\n   EMail: MPenna@Broadcom.com\n   Patricia Thaler\n\
    \   Broadcom Corporation\n   16215 Alton Parkway\n   Irvine, CA 92619-7013 USA\n\
    \   Phone: +1 (949) 926-8635\n   EMail: pthaler@broadcom.com\n   Ted Compton\n\
    \   EMC Corporation\n   Research Triangle Park, NC 27709 USA\n   Phone: +1 (919)\
    \ 248-6075\n   EMail: compton_ted@emc.com\n   Jim Wendt\n   Hewlett-Packard Company\n\
    \   8000 Foothills Boulevard\n   Roseville, CA 95747-5668 USA\n   Phone: +1 (916)\
    \ 785-5198\n   EMail: jim_wendt@hp.com\n   Mike Krause\n   Hewlett-Packard Company,\
    \ 43LN\n   19410 Homestead Road\n   Cupertino, CA 95014 USA\n   Phone: +1 (408)\
    \ 447-3191\n   EMail: krause@cup.hp.com\n   Dave Minturn\n   Intel Corporation\n\
    \   MS JF1-210\n   5200 North East Elam Young Parkway\n   Hillsboro, OR 97124\
    \ USA\n   Phone: +1 (503) 712-4106\n   EMail: dave.b.minturn@intel.com\n   Howard\
    \ C. Herbert\n   Intel Corporation\n   MS CH7-404\n   5000 West Chandler Blvd.\n\
    \   Chandler, AZ 85226 USA\n   Phone: +1 (480) 554-3116\n   EMail: howard.c.herbert@intel.com\n\
    \   Tom Talpey\n   Network Appliance\n   1601 Trapelo Road #16\n   Waltham, MA\
    \  02451 USA\n   Phone: +1 (781) 768-5329\n   EMail: thomas.talpey@netapp.com\n\
    \   Dwight Barron\n   Hewlett-Packard Company\n   20555 SH 249\n   Houston, TX\
    \ 77070-2698 USA\n   Phone: +1 (281) 514-2769\n   EMail: Dwight.Barron@Hp.com\n\
    \   Dave Garcia\n   24100 Hutchinson Rd.\n   Los Gatos, CA 95033 USA\n   Phone:\
    \ +1 (831) 247-4464\n   Email: Dave.Garcia@StanfordAlumni.org\n   Jeff Hilland\n\
    \   Hewlett-Packard Company\n   20555 SH 249\n   Houston, TX 77070-2698 USA\n\
    \   Phone: +1 (281) 514-9489\n   EMail: jeff.hilland@hp.com\n   Barry Reinhold\n\
    \   Lamprey Networks\n   Durham, NH 03824 USA\n   Phone: +1 (603) 868-8411\n \
    \  EMail: bbr@LampreyNetworks.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hemal Shah\n   Broadcom Corporation\n   5300 California\
    \ Avenue\n   Irvine, CA 92617 USA\n   Phone: +1 (949) 926-6941\n   EMail: hemal@broadcom.com\n\
    \   James Pinkerton\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond,\
    \ WA 98052 USA\n   Phone: +1 (425) 705-5442\n   EMail: jpink@microsoft.com\n \
    \  Renato Recio\n   IBM Corporation\n   11501 Burnett Road\n   Austin, TX 78758\
    \ USA\n   Phone: +1 (512) 838-1365\n   EMail: recio@us.ibm.com\n   Paul R. Culley\n\
    \   Hewlett-Packard Company\n   20555 SH 249\n   Houston, TX 77070-2698 USA\n\
    \   Phone: +1 (281) 514-5543\n   EMail: paul.culley@hp.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
