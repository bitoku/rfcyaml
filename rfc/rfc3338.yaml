- title: __initial_text__
  contents:
  - '             Dual Stack Hosts Using "Bump-in-the-API" (BIA)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a mechanism of dual stack hosts using a\n\
    \   technique called \"Bump-in-the-API\"(BIA) which allows for the hosts to\n\
    \   communicate with other IPv6 hosts using existing IPv4 applications.\n   The\
    \ goal of this mechanism is the same as that of the Bump-in-the-\n   stack mechanism,\
    \ but this mechanism provides the translation method\n   between the IPv4 APIs\
    \ and IPv6 APIs.  Thus, the goal is simply\n   achieved without IP header translation.\n"
- title: 'Table of Contents:'
  contents:
  - "Table of Contents:\n   1.  Introduction ................................................\
    \  2\n   2.  Applicability and Disclaimer ................................  3\n\
    \   2.1 Applicability ...............................................  3\n   2.2\
    \ Disclaimer ..................................................  4\n   3.  Dual\
    \ Stack Host Architecture Using BIA ......................  4\n   3.1 Function\
    \ Mapper .............................................  4\n   3.2 Name Resolver\
    \ ...............................................  5\n   3.3 Address Mapper ..............................................\
    \  5\n   4.  Behavior Example ............................................  6\n\
    \   4.1 Originator Behavior .........................................  6\n   4.2\
    \ Recipient Behavior ..........................................  8\n   5.  Considerations\
    \  ............................................. 10\n   5.1 Socket API Conversion\
    \ ....................................... 10\n   5.2 ICMP Messages Handling ......................................\
    \ 10\n   5.3 IPv4 Address Pool and Mapping Table ......................... 10\n\
    \   5.4 Internally Assigned IPv4 Addresses .......................... 10\n   5.5\
    \ Mismatch Between DNS Result and Peer Application Version .... 11\n   5.6 Implementation\
    \ Issues ....................................... 11\n   6.  Limitations .................................................\
    \ 12\n   7.  Security Considerations ..................................... 12\n\
    \   8.  Acknowledgments ............................................. 12\n   9.\
    \  References .................................................. 12\n   Appendix:\
    \  API list intercepted by BIA .......................... 14\n   Authors Addresses\
    \ ............................................... 16\n   Full Copyright Statement\
    \ ........................................ 17\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   RFC2767 [BIS] specifies a host translation mechanism using\
    \ a\n   technique called \"Bump-in-the-Stack\".  It translates IPv4 into IPv6,\n\
    \   and vice versa using the IP conversion mechanism defined in [SIIT].\n   BIS\
    \ allows hosts to communicate with other IPv6 hosts using existing\n   IPv4 applications.\
    \  However, this approach is to use an API\n   translator which is inserted between\
    \ the TCP/IP module and network\n   card driver, so that it has the same limitations\
    \ as the [SIIT] based\n   IP header translation methods.  In addition, its implementation\
    \ is\n   dependent upon the network interface driver.\n   This document specifies\
    \ a new mechanism of dual stack hosts called\n   Bump-in-the-API(BIA) technique.\
    \  The BIA technique inserts an API\n   translator between the socket API module\
    \ and the TCP/IP module in the\n   dual stack hosts, so that it translates the\
    \ IPv4 socket API function\n   into IPv6 socket API function and vice versa. \
    \ With this mechanism,\n   the translation can be simplified without IP header\
    \ translation.\n   Using BIA, the dual stack host assumes that there exists both\n\
    \   TCP(UDP)/IPv4 and TCP(UDP)/IPv6 stacks on the local node.\n   When IPv4 applications\
    \ on the dual stack communicate with other IPv6\n   hosts, the API translator\
    \ detects the socket API functions from IPv4\n   applications and invokes the\
    \ IPv6 socket API functions to communicate\n   with the IPv6 hosts, and vice versa.\
    \  In order to support\n   communication between IPv4 applications and the target\
    \ IPv6 hosts,\n   pooled IPv4 addresses will be assigned through the name resolver\
    \ in\n   the API translator.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC 2119].\n   This document uses terms defined in [IPv6],[TRANS-MECH] and\
    \ [BIS].\n"
- title: 2. Applicability and Disclaimer
  contents:
  - '2. Applicability and Disclaimer

    '
- title: 2.1 Applicability
  contents:
  - "2.1 Applicability\n   The main purposes of BIA are the same as BIS [BIS].  It\
    \ makes IPv4\n   applications communicate with IPv6 hosts without any modification\
    \ of\n   those IPv4 applications.  However, while BIS is for systems with no\n\
    \   IPv6 stack, BIA is for systems with an IPv6 stack, but on which some\n   applications\
    \ are  not yet available on IPv6 and source code is not\n   available preventing\
    \ the application from being ported.  It's good\n   for early adopters who do\
    \ not have all applications handy, but not\n   for mainstream production usage.\n\
    \   There is an issue about a client node running BIA trying to contact a\n  \
    \ dual stack node on a port number that is only associated with an IPv4\n   application\
    \ (see section 5.5).  There are 2 approaches.\n   - The client application SHOULD\
    \ cycle through all the addresses and\n     end up trying the IPv4 one.\n   -\
    \ BIA SHOULD do the work.\n   It is not clear at this time which behavior is desirable\
    \ (it may very\n   well be application dependent), so we need to get feedback\
    \ from\n   experimentation.\n"
- title: 2.2 Disclaimer
  contents:
  - "2.2 Disclaimer\n   BIA SHOULD NOT be used for an IPv4 application for which source\
    \ code\n   is available.  We strongly recommend that application programmers\n\
    \   SHOULD NOT use this mechanism when application source code is\n   available.\
    \  As well, it SHOULD NOT be used as an excuse not to port\n   software or delay\
    \ porting.\n"
- title: 3. Dual Stack Host Architecture Using BIA
  contents:
  - "3. Dual Stack Host Architecture Using BIA\n   Figure 1 shows the architecture\
    \ of the host in which BIA is\n   installed.\n               +----------------------------------------------+\n\
    \               | +------------------------------------------+ |\n           \
    \    | |                                          | |\n               | |    \
    \         IPv4 applications            | |\n               | |               \
    \                           | |\n               | +------------------------------------------+\
    \ |\n               | +------------------------------------------+ |\n       \
    \        | |           Socket API (IPv4, IPv6)        | |\n               | +------------------------------------------+\
    \ |\n               | +-[ API translator]------------------------+ |\n       \
    \        | | +-----------+ +---------+ +------------+ | |\n               | |\
    \ | Name      | | Address | | Function   | | |\n               | | | Resolver\
    \  | | Mapper  | | Mapper     | | |\n               | | +-----------+ +---------+\
    \ +------------+ | |\n               | +------------------------------------------+\
    \ |\n               | +--------------------+ +-------------------+ |\n       \
    \        | |                    | |                   | |\n               | |\
    \    TCP(UDP)/IPv4   | |   TCP(UDP)/IPv6   | |\n               | |           \
    \         | |                   | |\n               | +--------------------+ +-------------------+\
    \ |\n               +----------------------------------------------+\n       \
    \     Figure 1 Architecture of the dual stack host using BIA\n   Dual stack hosts\
    \ defined in RFC2893 [TRANS-MECH] need applications,\n   TCP/IP modules and addresses\
    \ for both IPv4 and IPv6.  The proposed\n   hosts in this document have an API\
    \ translator to communicate with\n   other IPv6 hosts using existing IPv4 applications.\
    \  The API\n   translator consists of 3 modules, a name resolver, an address mapper\n\
    \   and a function mapper.\n"
- title: 3.1 Function Mapper
  contents:
  - "3.1 Function Mapper\n   It translates an IPv4 socket API function into an IPv6\
    \ socket API\n   function, and vice versa.\n   When detecting the IPv4 socket\
    \ API functions from IPv4 applications,\n   it intercepts the function call and\
    \ invokes new IPv6 socket API\n   functions which correspond to the IPv4 socket\
    \ API functions.  Those\n   IPv6 API functions are used to communicate with the\
    \ target IPv6\n   hosts.  When detecting the IPv6 socket API functions from the\
    \ data\n   received from the IPv6 hosts, it works symmetrically in relation to\n\
    \   the previous case.\n"
- title: 3.2 Name Resolver
  contents:
  - "3.2 Name Resolver\n   It returns a proper answer in response to the IPv4 application's\n\
    \   request.\n   When an IPv4 application tries to resolve names via the resolver\n\
    \   library (e.g. gethostbyname()), BIA intercept the function call and\n   instead\
    \ call the IPv6 equivalent functions (e.g. getnameinfo()) that\n   will resolve\
    \ both A and AAAA records.\n   If the AAAA record is available, it requests the\
    \ address mapper to\n   assign an IPv4 address corresponding to the IPv6 address,\
    \ then\n   creates the A record for the assigned IPv4 address, and returns the\
    \ A\n   record to the application.\n"
- title: 3.3 Address Mapper
  contents:
  - "3.3 Address Mapper\n   It internally maintains a table of the pairs of an IPv4\
    \ address and\n   an IPv6 address.  The IPv4 addresses are assigned from an IPv4\n\
    \   address pool.  It uses the unassigned IPv4 addresses\n   (e.g., 0.0.0.1 ~\
    \ 0.0.0.255).\n   When the name resolver or the function mapper requests it to\
    \ assign\n   an IPv4 address corresponding to an IPv6 address, it selects and\n\
    \   returns an IPv4 address out of the pool, and registers a new entry\n   into\
    \ the table dynamically.  The registration occurs in the following\n   2 cases:\n\
    \   (1) When the name resolver gets only an 'AAAA' record for the target\n   \
    \    host name and there is not a mapping entry for the IPv6 address.\n   (2)\
    \ When the function mapper gets a socket API function call from the\n       data\
    \ received and there is not a mapping entry for the IPv6\n       source address.\n\
    \   NOTE: This is the same as that of the Address Mapper in [BIS].\n"
- title: 4. Behavior Examples
  contents:
  - "4. Behavior Examples\n   This section describes behaviors of the proposed dual\
    \ stack host\n   called \"dual stack\", which communicates with an IPv6 host called\n\
    \   \"host6\" using an IPv4 application.\n   In this section, the meanings of\
    \ arrows are as follows:\n       ---> A DNS message for name resolving created\
    \ by the applications\n            and the name resolver in the API translator.\n\
    \       +++> An IPv4 address request to and reply from the address mapper\n  \
    \          for the name resolver and the function mapper.\n       ===> Data flow\
    \ by socket API functions created by the\n            applications and the function\
    \ mapper in the API translator.\n"
- title: 4.1 Originator Behavior
  contents:
  - "4.1 Originator Behavior\n   This sub-section describes the behavior when the\
    \ \"dual stack\" sends\n   data to \"host6\".\n   When an IPv4 application sends\
    \ a DNS query to its name server, the\n   name resolver intercepts the query and\
    \ then creates a new query to\n   resolve both A and AAAA records.  When only\
    \ the AAAA record is\n   resolved, the name resolver requests the address mapper\
    \ to assign an\n   IPv4 address corresponding to the IPv6 address.\n   The name\
    \ resolver creates an A record for the assigned IPv4 address\n   and returns it\
    \ to the IPv4 applications.\n   In order for the IPv4 application to send IPv4\
    \ packets to host6, it\n   calls the IPv4 socket API function.\n   The function\
    \ mapper detects the socket API function from the\n   application.  If the result\
    \ is from IPv6 applications, it skips the\n   translation.  In the case of IPv4\
    \ applications, it requires an IPv6\n   address to invoke the IPv6 socket API\
    \ function, thus the function\n   mapper requests an IPv6 address to the address\
    \ mapper.  The address\n   mapper selects an IPv4 address from the table and returns\
    \ the\n   destination IPv6 address.  Using this IPv6 address, the function\n \
    \  mapper invokes an IPv6 socket API function corresponding to the IPv4\n   socket\
    \ API function.\n   When the function mapper receives an IPv6 function call,it\
    \ requests\n   the IPv4 address to the address mapper in order to translate the\
    \ IPv6\n   socket API function into an IPv4 socket API function.  Then, the\n\
    \   function mapper invokes the socket API function for the IPv4\n   applications.\n\
    \   Figure 2 illustrates the behavior described above:\n"
- title: '"dual stack"                                                "host6"'
  contents:
  - '"dual stack"                                                "host6"

    '
- title: IPv4    Socket |     [ API Translator ]    | TCP(UDP)/IP          Name
  contents:
  - 'IPv4    Socket |     [ API Translator ]    | TCP(UDP)/IP          Name

    '
- title: appli-  API    |Name      Address  Function| (v6/v4)             Server
  contents:
  - 'appli-  API    |Name      Address  Function| (v6/v4)             Server

    '
- title: cation         |Resolver  Mapper   Mapper  |
  contents:
  - "cation         |Resolver  Mapper   Mapper  |\n |        |        |        | \
    \       |         |              |       |\n"
- title: <<Resolve an IPv4 address for "host6".>>       |              |       |
  contents:
  - "<<Resolve an IPv4 address for \"host6\".>>       |              |       |\n |\
    \        |        |        |        |         |              |       |\n |--------|------->|\
    \  Query of 'A' records for host6.         |       |\n |        |        |   \
    \     |        |         |              |       |\n |        |        |--------|--------|---------|--------------|------>|\n\
    \ |        |        |  Query of 'A' records and 'AAAA' for host6       |\n | \
    \       |        |        |        |         |              |       |\n |    \
    \    |        |<-------|--------|---------|--------------|-------|\n |       \
    \ |        |  Reply with the 'AAAA' record.           |       |\n |        | \
    \       |        |        |         |              |\n |        |        |<<The\
    \ 'AAAA' record is resolved.>>        |\n |        |        |        |       \
    \ |         |              |\n |        |        |+++++++>|  Request one IPv4\
    \ address       |\n |        |        |        |  corresponding to the IPv6 address.\n\
    \ |        |        |        |        |         |              |\n |        |\
    \        |        |<<Assign one IPv4 address.>>     |\n |        |        |  \
    \      |        |         |              |\n |        |        |<+++++++|  Reply\
    \ with the IPv4 address.   |\n |        |        |        |        |         |\
    \              |\n |        |        |<<Create 'A' record for the IPv4 address.>>\n\
    \ |        |        |        |        |         |              |\n |<-------|--------|\
    \ Reply with the 'A' record.|              |\n |        |        |        |  \
    \      |         |              |\n              Figure 2 Behavior of the originator\
    \ (1/2)\n"
- title: '"dual stack"                                               "host6"'
  contents:
  - '"dual stack"                                               "host6"

    '
- title: IPv4    Socket |     [ API Translator ]    | TCP(UDP)/IP
  contents:
  - 'IPv4    Socket |     [ API Translator ]    | TCP(UDP)/IP

    '
- title: appli-  API    |Name      Address  Function| (v6/v4)
  contents:
  - 'appli-  API    |Name      Address  Function| (v6/v4)

    '
- title: cation         |Resolver  Mapper   Mapper  |
  contents:
  - "cation         |Resolver  Mapper   Mapper  |\n |        |        |        | \
    \       |         |              |\n"
- title: <<Call IPv4 Socket API function >>   |         |              |
  contents:
  - "<<Call IPv4 Socket API function >>   |         |              |\n |        |\
    \        |        |        |         |              |\n |========|========|========|=======>|An\
    \ IPv4 Socket API function Call\n |        |        |        |        |      \
    \   |              |\n |        |        |        |<+++++++|  Request IPv6 addresses|\n\
    \ |        |        |        |        |  corresponding to the  |\n |        |\
    \        |        |        |  IPv4 addresses.       |\n |        |        |  \
    \      |        |         |              |\n |        |        |        |+++++++>|\
    \ Reply with the IPv6 addresses.\n |        |        |        |        |     \
    \    |              |\n |        |        |        |        |<<Translate IPv4\
    \ into IPv6.>>\n |        |        |        |        |         |             \
    \ |\n |  An IPv6 Socket API function call.|=========|=============>|\n |     \
    \   |        |        |        |         |              |\n |        |       \
    \ |        |        |<<Reply an IPv6 data    |\n |        |        |        |\
    \        |  to dual stack.>>      |\n |        |        |        |        |  \
    \       |              |\n |  An IPv6 Socket API function call.|<========|==============|\n\
    \ |        |        |        |        |         |              |\n |        |\
    \        |        |        |<<Translate IPv6 into IPv4.>>\n |        |       \
    \ |        |        |         |              |\n |        |        |        |<+++++++|\
    \  Request IPv4 addresses|\n |        |        |        |        |  corresponding\
    \ to the  |\n |        |        |        |        |  IPv6 addresses.       |\n\
    \ |        |        |        |        |         |              |\n |        |\
    \        |        |+++++++>| Reply with the IPv4 addresses.\n |        |     \
    \   |        |        |         |              |\n |<=======|========|========|========|\
    \  An IPv4 Socket function call.\n |        |        |        |        |     \
    \    |              |\n              Figure 2 Behavior of the originator (2/2)\n"
- title: 4.2 Recipient Behavior
  contents:
  - "4.2 Recipient Behavior\n   This subsection describes the recipient behavior of\
    \ \"dual stack\".\n   The communication is triggered by \"host6\".\n   \"host6\"\
    \ resolves the address of \"dual stack\" with 'AAAA' records\n   through its name\
    \ server, and then sends an IPv6 packet to the \"dual\n   stack\".\n   The IPv6\
    \ packet reaches the \"dual stack\" and the function mapper\n   detects it.\n\
    \   The function mapper requests the IPv4 address to the address mapper\n   in\
    \ order to invoke the IPv4 socket API function to communicate with\n   the IPv4\
    \ application.  Then the function mapper invokes the\n   corresponding IPv4 socket\
    \ API function for the IPv4 applications\n   corresponding to the IPv6 functions.\n\
    \   Figure 3 illustrates the behavior described above:\n   \"dual stack\"    \
    \                                           \"host6\"\n   IPv4    Socket |   \
    \  [ API Translator ]    | TCP(UDP)/IP\n   appli-  API    |Name      Address \
    \ Function| (v6/v4)\n   cation         |Resolver  Mapper   Mapper  |\n    |  \
    \      |        |        |        |         |              |\n   <<Receive data\
    \ from \"host6\".>>       |         |              |\n    |        |        |\
    \        |        |         |              |\n    |      An IPv6 Socket function\
    \ call.|<========|==============|\n    |        |        |        |        | \
    \        |              |\n    |        |        |        |<+++++++|  Request\
    \ IPv4 addresses|\n    |        |        |        |        |  corresponding to\
    \ the IPv6\n    |        |        |        |        |  addresses.            |\n\
    \    |        |        |        |        |         |              |\n    |   \
    \     |        |        |+++++++>| Reply with the IPv4 addresses.\n    |     \
    \   |        |        |        |         |              |\n    |        |    \
    \    |        |        |<<Translate IPv6 into IPv4.>>\n    |        |        |\
    \        |        |         |              |\n    |<=======|========|========|========|\
    \  An IPv4 function call |\n    |        |        |        |        |        \
    \ |              |\n   <<Reply an IPv4 data to \"host6\".>>   |         |    \
    \          |\n    |        |        |        |        |         |            \
    \  |\n    |========|========|========|=======>|  An IPv4 function call |\n   \
    \ |        |        |        |        |         |              |\n    |      \
    \  |        |        |        |<<Translate IPv4 into IPv6.>>\n    |        | \
    \       |        |        |         |              |\n    |        |        |\
    \        |<+++++++|  Request IPv6 addresses|\n    |        |        |        |\
    \        |  corresponding to the IPv4\n    |        |        |        |      \
    \  |  addresses.            |\n    |        |        |        |        |     \
    \    |              |\n    |        |        |        |+++++++>| Reply with the\
    \ IPv6 addresses.\n    |        |        |        |        |         |       \
    \       |\n    |      An IPv6 Socket function call.|=========|=============>|\n\
    \    |        |        |        |        |         |              |\n        \
    \     Figure 3 Behavior of Receiving data from IPv6 host\n"
- title: 5. Considerations
  contents:
  - '5. Considerations

    '
- title: 5.1 Socket API Conversion
  contents:
  - "5.1 Socket API Conversion\n   IPv4 socket API functions are translated into semantically\
    \ the same\n   IPv6 socket API functions and vice versa.  See Appendix A for the\
    \ API\n   list intercepted by BIA.  IP addresses embedded in application layer\n\
    \   protocols (e.g., FTP) can be translated in API functions.  Its\n   implementation\
    \ depends on operating systems.\n   NOTE: Basically, IPv4 socket API functions\
    \ are not fully compatible\n   with IPv6 since the IPv6 has new advanced features.\n"
- title: 5.2 ICMP Message Handling
  contents:
  - "5.2 ICMP Message Handling\n   When an application needs ICMP messages values\
    \ (e.g., Type, Code,\n   etc.) sent from a network layer, ICMPv4 message values\
    \ MAY be\n   translated into ICMPv6 message values based on [SIIT], and vice\n\
    \   versa.  It can be implemented using raw socket.\n"
- title: 5.3 IPv4 Address Pool and Mapping Table
  contents:
  - "5.3 IPv4 Address Pool and Mapping Table\n   The address pool consists of the\
    \ unassigned IPv4 addresses.  This\n   pool can be implemented at different granularity\
    \ in the node e.g., a\n   single pool per node, or at some finer granularity such\
    \ as per user\n   or per process.  However, if a number of IPv4 applications\n\
    \   communicate with IPv6 hosts, the available address spaces will be\n   exhausted.\
    \  As a result, it will be impossible for IPv4 applications\n   to communicate\
    \ with IPv6 nodes.  It requires smart management\n   techniques for address pool.\
    \  For example, it is desirable for the\n   mapper to free the oldest entry and\
    \ reuse the IPv4 address for\n   creating a new entry.  This issues is the same\
    \ as [BIS].  In case of\n   a per-node address mapping table, it MAY cause a larger\
    \ risk of\n   running out of address.\n"
- title: 5.4 Internally Assigned IPv4 Addresses
  contents:
  - "5.4 Internally Assigned IPv4 Addresses\n   The IPv4 addresses, which are internally\
    \ assigned to IPv6 target\n   hosts out of the pool, are the unassigned IPv4 addresses\
    \ (e.g.,\n   0.0.0.1 ~ 0.0.0.255).  There is no potential collision with another\n\
    \   use of the private address space when the IPv4 address flows out from\n  \
    \ the host.\n"
- title: 5.5 Mismatch between DNS result(AAAA) and Peer Application
  contents:
  - "5.5 Mismatch between DNS result(AAAA) and Peer Application\n    Version(v4)\n\
    \   If a server application you are using does not support IPv6 yet, but\n   runs\
    \ on a machine that supports other IPv6 services and this is\n   listed with a\
    \ AAAA record in the DNS, a client IPv4 application using\n   BIA might fail to\
    \ connect to the server application, because there is\n   a mismatch between DNS\
    \ query result (i.e., AAAA) and a server\n   application version(i.e., IPv4).\
    \  A solution is to try all the\n   addresses listed in the DNS and just not fail\
    \ after the first\n   attempt.  We have two approaches:  the client application\
    \ itself\n   SHOULD cycle through all the addresses and end up trying the IPv4\n\
    \   one.  Or it SHOULD be done by some extensions of name resolver and\n   API\
    \ translator in BIA.  For this, BIA SHOULD do iterated jobs for\n   finding the\
    \ working address used by the other application out of\n   addresses returned\
    \ by the extended name resolver.  It may very well\n   be application dependent.\
    \  Note that BIA might be able to do the\n   iteraction over all addresses for\
    \ TCP sockets, since BIA can observe\n   when the connect call fails.  But for\
    \ UDP sockets it is hard if not\n   impossible for BIA to know which address worked,\
    \ hence the\n   application must do the iteraction over all addresses until it\
    \ finds\n   a working address.\n   Another way to avoid this type of problems\
    \ is to make BIA only come\n   into effect when no A records exist for the peer.\
    \  Thus traffic from\n   an application using BIA on a dual-stack host to a dual-stack\
    \ host\n   would use IPv4.\n"
- title: 5.6 Implementation Issues
  contents:
  - "5.6 Implementation Issues\n   Some operating systems support the preload library\
    \ functions, so it\n   is easy to implement the API translator by using it.  For\
    \ example,\n   the user can replace all existing socket API functions with user-\n\
    \   defined socket API functions which translate the socket API function.\n  \
    \ In this case, every IPv4 application has its own translation library\n   using\
    \ a preloaded library which will be bound into the application\n   before executing\
    \ it dynamically.\n   Some other operating systems support the user-defined layered\n\
    \   protocol allowing a user to develop some additional protocols and put\n  \
    \ them in the existing protocol stack.  In this case, the API\n   translator can\
    \ be implemented as a layered protocol module.\n   In the above two approaches,\
    \ it is assumed that there exists both\n   TCP(UDP)/IPv4 and TCP(UDP)/IPv6 stacks\
    \ and there is no need to modify\n   or to add a new TCP-UDP/IPv6 stack.\n"
- title: 6. Limitations
  contents:
  - "6. Limitations\n   In common with [NAT-PT], BIA needs to translate IP addresses\
    \ embedded\n   in application layer protocols, e.g., FTP.  So it may not work\
    \ for\n   new applications which embed addresses in payloads.\n   This mechanism\
    \ supports unicast communications only.  In order to\n   support multicast functions,\
    \ some other additional functionalities\n   must be considered in the function\
    \ mapper module.\n   Since the IPv6 API has new advanced features, it is difficult\
    \ to\n   translate such kinds of IPv6 APIs into IPv4 APIs.  Thus, IPv6 inbound\n\
    \   communication with advanced features may be discarded.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   The security consideration of BIA mostly relies\
    \ on that of [NAT-PT].\n   The differences are due to the address translation\
    \ occurring at the\n   API and not in the network layer.  That is, since the mechanism\
    \ uses\n   the API translator at the socket API level, hosts can utilize the\n\
    \   security of the network layer (e.g., IPsec) when they communicate\n   with\
    \ IPv6 hosts using IPv4 applications via the mechanism.  As well,\n   there isn't\
    \ a DNS ALG as in NAT-PT, so there is no interference with\n   DNSSEC.\n   The\
    \ use of address pooling may open a denial of service attack\n   vulnerability.\
    \  So BIA should employ the same sort of protection\n   techniques as [NAT-PT]\
    \ does.\n"
- title: 8. Acknowledgments
  contents:
  - "8. Acknowledgments\n   We would like to acknowledge the implementation contributions\
    \ by\n   Wanjik Lee (wjlee@arang.miryang.ac.kr) and i2soft Corporation\n   (www.i2soft.net).\n"
- title: 9. References
  contents:
  - "9. References\n   [TRANS-MECH] Gilligan, R. and E. Nordmark, \"Transition Mechanisms\
    \ for\n                IPv6 Hosts and Routers\", RFC 2893, August 2000.\n   [SIIT]\
    \       Nordmark, E., \"Stateless IP/ICMP Translator (SIIT)\", RFC\n         \
    \       2765, February 2000.\n   [FTP]        Postel, J. and J. Reynolds, \"File\
    \ Transfer Protocol\",\n                STD 9, RFC 959, October 1985.\n   [NAT]\
    \        Srisuresh, P. and K. Egevang, \"Traditional IP Network\n            \
    \    Address Translator (Traditional NAT)\", RFC 3022, January\n             \
    \   2001.\n   [IPV4]       Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n\
    \                September 1981.\n   [IPV6]       Deering, S. and R. Hinden, \"\
    Internet Protocol, Version 6\n                (IPv6) Specification\", RFC 2460,\
    \ December 1998.\n   [NAT-PT]     Tsirtsis, G. and P. Srisuresh, \"Network Address\n\
    \                Translation - Protocol Translation (NAT-PT)\", RFC 2766,\n  \
    \              February 2000.\n   [BIS]        Tsuchiya, K., Higuchi, H. and Y.\
    \ Atarashi, \"Dual Stack\n                Hosts using the \"Bump-In-the-Stack\"\
    \ Technique (BIS)\",\n                RFC 2767, February 2000.\n   [SOCK-EXT]\
    \   Gilligan, R., Thomson, S., Bound, J. and W. Stevens,\n                \"Basic\
    \ Socket Interface Extensions for IPv6\", RFC 2553,\n                March 1999.\n\
    \   [RFC 2119]   Bradner S., \"Key words for use in RFCs to indicate\n       \
    \         Requirement Levels\", RFC 2119, March 1997.\n"
- title: 'Appendix A : API list intercepted by BIA'
  contents:
  - "Appendix A : API list intercepted by BIA\n   The following functions are the\
    \ API list which SHOULD be intercepted\n   by BIA module.\n   The functions that\
    \ the application uses to pass addresses into the\n   system are:\n      bind()\n\
    \      connect()\n      sendmsg()\n      sendto()\n   The functions that return\
    \ an address from the system to an\n   application are:\n      accept()\n    \
    \  recvfrom()\n      recvmsg()\n      getpeername()\n      getsockname()\n   The\
    \ functions that are related to socket options are:\n      getsocketopt()\n  \
    \    setsocketopt()\n   The functions that are used for conversion of IP addresses\
    \ embedded\n   in application layer protocol (e.g., FTP, DNS, etc.) are:\n   \
    \   recv()\n      send()\n      read()\n      write()\n   As well, raw sockets\
    \ for IPv4 and IPv6 MAY be intercepted.\n   Most of the socket functions require\
    \ a pointer to the socket address\n   structure as an argument.  Each IPv4 argument\
    \ is mapped into\n   corresponding an IPv6 argument, and vice versa.\n   According\
    \ to [SOCK-EXT], the following new IPv6 basic APIs and\n   structures are required.\n\
    \      IPv4                     new IPv6\n      ------------------------------------------------\n\
    \      AF_INET                  AF_INET6\n      sockaddr_in              sockaddr_in6\n\
    \      gethostbyname()          getaddrinfo()\n      gethostbyaddr()         \
    \ getnameinfo()\n      inet_ntoa()/inet_addr()  inet_pton()/inet_ntop()\n    \
    \  INADDR_ANY               in6addr_any\n   BIA MAY intercept inet_ntoa() and\
    \ inet_addr() and use the address\n   mapper for those.  Doing that enables BIA\
    \ to support literal IP\n   addresses.\n   The gethostbyname() call return a list\
    \ of addresses.  When the name\n   resolver function invokes getaddrinfo() and\
    \  getaddrinfo() returns\n   multiple IP addresses, whether IPv4 or IPv6, they\
    \ SHOULD all be\n   represented in the addresses returned by gethostbyname().\
    \  Thus if\n   getaddrinfo() returns multiple IPv6 addresses, this implies that\n\
    \   multiple address mappings will be created; one for each IPv6 address.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Seungyun Lee\n   ETRI PEC\n   161 Kajong-Dong, Yusong-Gu,\
    \ Taejon 305-350, Korea\n   Tel: +82 42 860 5508\n   Fax: +82 42 861 5404\n  \
    \ EMail: syl@pec.etri.re.kr\n   Myung-Ki Shin\n   ETRI PEC\n   161 Kajong-Dong,\
    \ Yusong-Gu, Taejon 305-350, Korea\n   Tel: +82 42 860 4847\n   Fax: +82 42 861\
    \ 5404\n   EMail: mkshin@pec.etri.re.kr\n   Yong-Jin Kim\n   ETRI\n   161 Kajong-Dong,\
    \ Yusong-Gu, Taejon 305-350, Korea\n   Tel: +82 42 860 6564\n   Fax: +82 42 861\
    \ 1033\n   EMail: yjkim@pec.etri.re.kr\n   Alain Durand\n   Sun Microsystems,\
    \ inc.\n   25 Network circle\n   Menlo Park, CA 94025, USA\n   Fax: +1 650 786\
    \ 5896\n   EMail: Alain.Durand@sun.com\n   Erik Nordmark\n   Sun Microsystems\
    \ Laboratories\n   180, avenue de l'Europe\n   38334 SAINT ISMIER Cedex, France\n\
    \   Tel: +33 (0)4 76 18 88 03\n   Fax: +33 (0)4 76 18 88 88\n   EMail: erik.nordmark@sun.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
