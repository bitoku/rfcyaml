- title: __initial_text__
  contents:
  - "           A Traffic-Based Method of Detecting Dead Internet\n              \
    \         Key Exchange (IKE) Peers\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the method detecting a dead Internet Key\n\
    \   Exchange (IKE) peer that is presently in use by a number of vendors.\n   The\
    \ method, called Dead Peer Detection (DPD) uses IPSec traffic\n   patterns to\
    \ minimize the number of IKE messages that are needed to\n   confirm liveness.\
    \  DPD, like other keepalive mechanisms, is needed to\n   determine when to perform\
    \ IKE peer failover, and to reclaim lost\n   resources.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Document Roadmap . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Rationale for Periodic Message Exchange for Proof of\n\
    \       Liveliness . . . . . . . . . . . . . . . . . . . . . . . . . .  3\n  \
    \ 4.  Keepalives vs.  Heartbeats . . . . . . . . . . . . . . . . . .  3\n    \
    \   4.1.  Keepalives . . . . . . . . . . . . . . . . . . . . . . .  3\n      \
    \ 4.2.  Heartbeats . . . . . . . . . . . . . . . . . . . . . . .  5\n   5.  DPD\
    \ Protocol . . . . . . . . . . . . . . . . . . . . . . . . .  6\n       5.1. \
    \ DPD Vendor ID. . . . . . . . . . . . . . . . . . . . . .  7\n       5.2.  Message\
    \ Exchanges. . . . . . . . . . . . . . . . . . . .  7\n       5.3.  NOTIFY(R-U-THERE/R-U-THERE-ACK)\
    \ Message Format . . . . .  8\n       5.4.  Impetus for DPD Exchange . . . . .\
    \ . . . . . . . . . . .  9\n       5.5.  Implementation Suggestion. . . . . .\
    \ . . . . . . . . . .  9\n       5.6.  Comparisons. . . . . . . . . . . . . .\
    \ . . . . . . . . . 10\n   6.  Resistance to Replay Attack and False Proof of\
    \ Liveliness. . . 10\n       6.1.  Sequence Number in DPD Messages. . . . . .\
    \ . . . . . . . 10\n       6.2.  Selection and Maintenance of Sequence Numbers.\
    \ . . . . . 11\n   7.  Security Considerations. . . . . . . . . . . . . . . .\
    \ . . . . 11\n   8.  IANA Considerations. . . . . . . . . . . . . . . . . . .\
    \ . . . 12\n   9.  References . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 12\n       9.1.  Normative Reference. . . . . . . . . . . . . . . . . .\
    \ . 12\n       9.2.  Informative References . . . . . . . . . . . . . . . . .\
    \ 12\n   10. Editors' Addresses . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \   11. Full Copyright Statement . . . . . . . . . . . . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When two peers communicate with IKE [2] and IPSec [3], the\
    \ situation\n   may arise in which connectivity between the two goes down\n  \
    \ unexpectedly.  This situation can arise because of routing problems,\n   one\
    \ host rebooting, etc., and in such cases, there is often no way\n   for IKE and\
    \ IPSec to identify the loss of peer connectivity.  As\n   such, the SAs can remain\
    \ until their lifetimes naturally expire,\n   resulting in a \"black hole\" situation\
    \ where packets are tunneled to\n   oblivion.  It is often desirable to recognize\
    \ black holes as soon as\n   possible so that an entity can failover to a different\
    \ peer quickly.\n   Likewise, it is sometimes necessary to detect black holes\
    \ to recover\n   lost resources.\n   This problem of detecting a dead IKE peer\
    \ has been addressed by\n   proposals that require sending periodic HELLO/ACK\
    \ messages to prove\n   liveliness.  These schemes tend to be unidirectional (a\
    \ HELLO only)\n   or bidirectional (a HELLO/ACK pair).  For the purpose of this\n\
    \   document, the term \"heartbeat\" will refer to a unidirectional message\n\
    \   to prove liveliness.  Likewise, the term \"keepalive\" will refer to a\n \
    \  bidirectional message.\n   The problem with current heartbeat and keepalive\
    \ proposals is their\n   reliance upon their messages to be sent at regular intervals.\
    \  In the\n   implementation, this translates into managing some timer to service\n\
    \   these message intervals.  Similarly, because rapid detection of the\n   dead\
    \ peer is often desired, these messages must be sent with some\n   frequency,\
    \ again translating into considerable overhead for message\n   processing.  In\
    \ implementations and installations where managing\n   large numbers of simultaneous\
    \ IKE sessions is of concern, these\n   regular heartbeats/keepalives prove to\
    \ be infeasible.\n   To this end, a number of vendors have implemented their own\
    \ approach\n   to detect peer liveliness without needing to send messages at regular\n\
    \   intervals.  This informational document describes the current\n   practice\
    \ of those implementations.  This scheme, called Dead Peer\n   Detection (DPD),\
    \ relies on IKE Notify messages to query the\n   liveliness of an IKE peer.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\"\
    \ in this\n   document are to be interpreted as described in RFC-2119 [1].\n"
- title: 2.  Document Roadmap
  contents:
  - "2.  Document Roadmap\n   As mentioned above, there are already proposed solutions\
    \ to the\n   problem of detecting dead peers.  Section 3 elaborates the rationale\n\
    \   for using an IKE message exchange to query a peer's liveliness.\n   Section\
    \ 4 examines a keepalives-based approach as well as a\n   heartbeats-based approach.\
    \  Section 5 presents the DPD proposal\n   fully, highlighting differences between\
    \ DPD and the schemes presented\n   in Section 4 and emphasizing scalability issues.\
    \  Section 6 examines\n   security issues surrounding replayed messages and false\
    \ liveliness.\n"
- title: 3.  Rationale for Periodic Message Exchange for Proof of Liveliness
  contents:
  - "3.  Rationale for Periodic Message Exchange for Proof of Liveliness\n   As the\
    \ introduction mentioned, it is often necessary to detect that a\n   peer is unreachable\
    \ as soon as possible.  IKE provides no way for\n   this to occur -- aside from\
    \ waiting until the rekey period, then\n   attempting (and failing the rekey).\
    \  This would result in a period of\n   loss connectivity lasting the remainder\
    \ of the lifetime of the\n   security association (SA), and in most deployments,\
    \ this is\n   unacceptable.  As such, a method is needed for checking up on a\n\
    \   peer's state at will.  Different methods have arisen, usually using\n   an\
    \ IKE Notify to query the peer's liveliness.  These methods rely on\n   either\
    \ a bidirectional \"keepalive\" message exchange (a HELLO followed\n   by an ACK),\
    \ or a unidirectional \"heartbeat\" message exchange (a HELLO\n   only).  The\
    \ next section considers both of these schemes.\n"
- title: 4.  Keepalives vs. Heartbeats
  contents:
  - '4.  Keepalives vs. Heartbeats

    '
- title: '4.1.  Keepalives:'
  contents:
  - "4.1.  Keepalives:\n   Consider a keepalives scheme in which peer A and peer B\
    \ require\n   regular acknowledgements of each other's liveliness.  The messages\n\
    \   are exchanged by means of an authenticated notify payload.  The two\n   peers\
    \ must agree upon the interval at which keepalives are sent,\n   meaning that\
    \ some negotiation is required during Phase 1.  For any\n   prompt failover to\
    \ be possible, the keepalives must also be sent at\n   rather frequent intervals\
    \ -- around 10 seconds or so.  In this\n   hypothetical keepalives scenario, peers\
    \ A and B agree to exchange\n   keepalives every 10 seconds.  Essentially, every\
    \ 10 seconds, one peer\n   must send a HELLO to the other.  This HELLO serves\
    \ as proof of\n   liveliness for the sending entity.  In turn, the other peer\
    \ must\n   acknowledge each keepalive HELLO.  If the 10 seconds elapse, and one\n\
    \   side has not received a HELLO, it will send the HELLO message itself,\n  \
    \ using the peer's ACK as proof of liveliness.  Receipt of either a\n   HELLO\
    \ or ACK causes an entity's keepalive timer to reset. Failure to\n   receive an\
    \ ACK in a certain period of time signals an error.  A\n   clarification is presented\
    \ below:\n   Scenario 1:\n   Peer A's 10-second timer elapses first, and it sends\
    \ a HELLO to B.\n   B responds with an ACK.\n   Peer A:                      \
    \        Peer B:\n   10 second timer fires;  ------>\n   wants to know that B\
    \ is alive;\n   sends HELLO.\n                                      Receives HELLO;\
    \ acknowledges\n                                      A's liveliness;\n      \
    \                      <------   resets keepalive timer, sends\n             \
    \                         ACK.\n   Receives ACK as proof of\n   B's liveliness;\
    \ resets timer.\n   Scenario 2:\n   Peer A's 10-second timer elapses first, and\
    \ it sends a HELLO to B.\n   B fails to respond.  A can retransmit, in case its\
    \ initial HELLO is\n   lost.  This situation describes how peer A detects its\
    \ peer is dead.\n   Peer A:                              Peer B (dead):\n   10\
    \ second timer fires;  ------X\n   wants to know that B is\n   alive; sends HELLO.\n\
    \   Retransmission timer    ------X\n   expires; initial message\n   could have\
    \ been lost in\n   transit; A increments\n   error counter and\n   sends another\
    \ HELLO.\n   ---\n   After some number of errors, A assumes B is dead; deletes\
    \ SAs and\n   possibly initiates failover.\n   An advantage of this scheme is\
    \ that the party interested in the other\n   peer's liveliness begins the message\
    \ exchange.  In Scenario 1, peer A\n   is interested in peer B's liveliness, and\
    \ peer A consequently sends\n   the HELLO.  It is conceivable in such a scheme\
    \ that peer B would\n   never be interested in peer A's liveliness.  In such a\
    \ case, the onus\n   would always lie on peer A to initiate the exchange.\n"
- title: '4.2.  Heartbeats:'
  contents:
  - "4.2.  Heartbeats:\n   By contrast, consider a proof-of-liveliness scheme involving\n\
    \   unidirectional (unacknowledged) messages.  An entity interested in\n   its\
    \ peer's liveliness would rely on the peer itself to send periodic\n   messages\
    \ demonstrating liveliness.  In such a scheme, the message\n   exchange might\
    \ look like this:\n   Scenario 3: Peer A and Peer B are interested in each other's\n\
    \   liveliness.  Each peer depends on the other to send periodic HELLOs.\n   Peer\
    \ A:                              Peer B:\n   10 second timer fires;  ------>\n\
    \   sends HELLO.  Timer also\n   signals expectation of\n   B's HELLO.\n     \
    \                                    Receives HELLO as proof of A's\n        \
    \                                 liveliness.\n                              \
    \ <------   10 second timer fires; sends\n                                   \
    \      HELLO.\n   Receives HELLO as proof\n   of B's liveliness.\n   Scenario\
    \ 4:\n   Peer A fails to receive HELLO from B and marks the peer dead.  This\n\
    \   is how an entity detects its peer is dead.\n   Peer A:                   \
    \           Peer B (dead):\n   10 second timer fires;  ------X\n   sends HELLO.\
    \  Timer also\n   signals expectation of\n   B's HELLO.\n   ---\n   Some time\
    \ passes and A assumes B is dead.\n   The disadvantage of this scheme is the reliance\
    \ upon the peer to\n   demonstrate liveliness.  To this end, peer B might never\
    \ be\n   interested in peer A's liveliness.  Nonetheless, if A is interested\n\
    \   B's liveliness, B must be aware of this, and maintain the necessary\n   state\
    \ information to send periodic HELLOs to A.  The disadvantage of\n   such a scheme\
    \ becomes clear in the remote-access scenario.  Consider\n   a VPN aggregator\
    \ that terminates a large number of sessions (on the\n   order of 50,000 peers\
    \ or so).  Each peer requires fairly rapid\n   failover, therefore requiring the\
    \ aggregator to send HELLO packets\n   every 10 seconds or so.  Such a scheme\
    \ simply lacks scalability, as\n   the aggregator must send 50,000 messages every\
    \ few seconds.\n   In both of these schemes (keepalives and heartbeats), some\n\
    \   negotiation of message interval must occur, so that each entity can\n   know\
    \ how often its peer expects a HELLO.  This immediately adds a\n   degree of complexity.\
    \  Similarly, the need to send periodic messages\n   (regardless of other IPSec/IKE\
    \ activity), also increases\n   computational overhead to the system.\n"
- title: 5.  DPD Protocol
  contents:
  - "5.  DPD Protocol\n   DPD addresses the shortcomings of IKE keepalives- and heartbeats-\n\
    \   schemes by introducing a more reasonable logic governing message\n   exchange.\
    \  Essentially, keepalives and heartbeats mandate exchange of\n   HELLOs at regular\
    \ intervals.  By contrast, with DPD, each peer's DPD\n   state is largely independent\
    \ of the other's.  A peer is free to\n   request proof of liveliness when it needs\
    \ it -- not at mandated\n   intervals.  This asynchronous property of DPD exchanges\
    \ allows fewer\n   messages to be sent, and this is how DPD achieves greater\n\
    \   scalability.\n   As an elaboration, consider two DPD peers A and B.  If there\
    \ is\n   ongoing valid IPSec traffic between the two, there is little need for\n\
    \   proof of liveliness.  The IPSec traffic itself serves as the proof of\n  \
    \ liveliness.  If, on the other hand, a period of time lapses during\n   which\
    \ no packet exchange occurs, the liveliness of each peer is\n   questionable.\
    \  Knowledge of the peer's liveliness, however, is only\n   urgently necessary\
    \ if there is traffic to be sent.  For example, if\n   peer A has some IPSec packets\
    \ to send after the period of idleness,\n   it will need to know if peer B is\
    \ still alive.  At this point, peer A\n   can initiate the DPD exchange.\n   To\
    \ this end, each peer may have different requirements for detecting\n   proof\
    \ of liveliness.  Peer A, for example, may require rapid\n   failover, whereas\
    \ peer B's requirements for resource cleanup are less\n   urgent.  In DPD, each\
    \ peer can define its own \"worry metric\" - an\n   interval that defines the\
    \ urgency of the DPD exchange. Continuing the\n   example, peer A might define\
    \ its DPD interval to be 10 seconds.\n   Then, if peer A sends outbound IPSec\
    \ traffic, but fails to receive\n   any inbound traffic for 10 seconds, it can\
    \ initiate a DPD exchange.\n   Peer B, on the other hand, defines its less urgent\
    \ DPD interval to be\n   5 minutes.  If the IPSec session is idle for 5 minutes,\
    \ peer B can\n   initiate a DPD exchange the next time it sends IPSec packets\
    \ to A.\n   It is important to note that the decision about when to initiate a\n\
    \   DPD exchange is implementation specific.  An implementation might\n   even\
    \ define the DPD messages to be at regular intervals following\n   idle periods.\
    \  See section 5.5 for more implementation suggestions.\n"
- title: 5.1.  DPD Vendor ID
  contents:
  - "5.1.  DPD Vendor ID\n   To demonstrate DPD capability, an entity must send the\
    \ DPD vendor ID.\n   Both peers of an IKE session MUST send the DPD vendor ID\
    \ before DPD\n   exchanges can begin.  The format of the DPD Vendor ID is:\n \
    \                                    1\n                0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n             \
    \   !                           !M!M!\n                !      HASHED_VENDOR_ID\
    \     !J!N!\n                !                           !R!R!\n             \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   where HASHED_VENDOR_ID = {0xAF, 0xCA,\
    \ 0xD7, 0x13, 0x68, 0xA1, 0xF1,\n   0xC9, 0x6B, 0x86, 0x96, 0xFC, 0x77, 0x57},\
    \ and MJR and MNR correspond\n   to the current major and minor version of this\
    \ protocol (1 and 0\n   respectively).  An IKE peer MUST send the Vendor ID if\
    \ it wishes to\n   take part in DPD exchanges.\n"
- title: 5.2.  Message Exchanges
  contents:
  - "5.2.  Message Exchanges\n   The DPD exchange is a bidirectional (HELLO/ACK) Notify\
    \ message.  The\n   exchange is defined as:\n            Sender              \
    \                        Responder\n           --------                      \
    \              -----------\n   HDR*, NOTIFY(R-U-THERE), HASH   ------>\n     \
    \                            <------    HDR*, NOTIFY(R-U-THERE-\n            \
    \                                ACK), HASH\n   The R-U-THERE message corresponds\
    \ to a \"HELLO\" and the R-U-THERE-ACK\n   corresponds to an \"ACK.\"  Both messages\
    \ are simply ISAKMP Notify\n   payloads, and as such, this document defines these\
    \ two new ISAKMP\n   Notify message types:\n      Notify                     \
    \ Message Value\n      R-U-THERE                   36136\n      R-U-THERE-ACK\
    \               36137\n   An entity that has sent the DPD Vendor ID MUST respond\
    \ to an R-U-\n   THERE query.  Furthermore, an entity MUST reject unencrypted\
    \ R-U-\n   THERE and R-U-THERE-ACK messages.\n"
- title: 5.3.  NOTIFY(R-U-THERE/R-U-THERE-ACK) Message Format
  contents:
  - "5.3.  NOTIFY(R-U-THERE/R-U-THERE-ACK) Message Format\n   When sent, the R-U-THERE\
    \ message MUST take the following form:\n                       1            \
    \       2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ! Next Payload  !   RESERVED    !         Payload Length        !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !              Domain of Interpretation  (DOI)                  !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !  Protocol-ID  !    SPI Size   !      Notify Message Type      !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                                                               !\n   ~  \
    \              Security Parameter Index (SPI)                 ~\n   !        \
    \                                                       !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                    Notification Data                          !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   As this message is an ISAKMP NOTIFY, the Next Payload, RESERVED, and\n   Payload\
    \ Length fields should be set accordingly.  The remaining\n   fields are set as:\n\
    \   -  Domain of Interpretation (4 octets) - SHOULD be set to IPSEC-DOI.\n   -\
    \  Protocol ID (1 octet) - MUST be set to the protocol ID for ISAKMP.\n   -  SPI\
    \ Size (1 octet) - SHOULD be set to sixteen (16), the length of\n      two octet-sized\
    \ ISAKMP cookies.\n   -  Notify Message Type (2 octets) - MUST be set to R-U-THERE\n\
    \   -  Security Parameter Index (16 octets) - SHOULD be set to the\n      cookies\
    \ of the Initiator and Responder of the IKE SA (in that\n      order)\n   -  Notification\
    \ Data (4 octets) - MUST be set to the sequence number\n      corresponding to\
    \ this message\n   The format of the R-U-THERE-ACK message is the same, with the\n\
    \   exception that the Notify Message Type MUST be set to R-U-THERE-ACK.\n   Again,\
    \ the Notification Data MUST be sent to the sequence number\n   corresponding\
    \ to the received R-U-THERE message.\n"
- title: 5.4.  Impetus for DPD Exchange
  contents:
  - "5.4.  Impetus for DPD Exchange\n   Again, rather than relying on some negotiated\
    \ time interval to force\n   the exchange of messages, DPD does not mandate the\
    \ exchange of R-U-\n   THERE messages at any time.  Instead, an IKE peer SHOULD\
    \ send an R-\n   U-THERE query to its peer only if it is interested in the liveliness\n\
    \   of this peer.  To this end, if traffic is regularly exchanged between\n  \
    \ two peers, either peer SHOULD use this traffic as proof of\n   liveliness, and\
    \ both peers SHOULD NOT initiate a DPD exchange.\n   A peer MUST keep track of\
    \ the state of a given DPD exchange.  That\n   is, once it has sent an R-U-THERE\
    \ query, it expects an ACK in\n   response within some implementation-defined\
    \ period of time.  An\n   implementation SHOULD retransmit R-U-THERE queries when\
    \ it fails to\n   receive an ACK.  After some number of retransmitted messages,\
    \ an\n   implementation SHOULD assume its peer to be unreachable and delete\n\
    \   IPSec and IKE SAs to the peer.\n"
- title: 5.5.  Implementation Suggestion
  contents:
  - "5.5.  Implementation Suggestion\n   Since the liveliness of a peer is only questionable\
    \ when no traffic\n   is exchanged, a viable implementation might begin by monitoring\n\
    \   idleness.  Along these lines, a peer's liveliness is only important\n   when\
    \ there is outbound traffic to be sent.  To this end, an\n   implementation can\
    \ initiate a DPD exchange (i.e., send an R-U-THERE\n   message) when there has\
    \ been some period of idleness, followed by the\n   desire to send outbound traffic.\
    \  Likewise, an entity can initiate a\n   DPD exchange if it has sent outbound\
    \ IPSec traffic, but not received\n   any inbound IPSec packets in response. \
    \ A complete DPD exchange\n   (i.e., transmission of R-U-THERE and receipt of\
    \ corresponding R-U-\n   THERE-ACK) will serve as proof of liveliness until the\
    \ next idle\n   period.\n   Again, since DPD does not mandate any interval, this\
    \ \"idle period\"\n   (or \"worry metric\") is left as an implementation decision.\
    \  It is not\n   a negotiated value.\n"
- title: 5.6.  Comparisons
  contents:
  - "5.6.  Comparisons\n   The performance benefit that DPD offers over traditional\
    \ keepalives-\n   and heartbeats-schemes comes from the fact that regular messages\
    \ do\n   not need to be sent.  Returning to the examples presented in section\n\
    \   4.1, a keepalive implementation such as the one presented would\n   require\
    \ one timer to signal when to send a HELLO message and another\n   timer to \"\
    timeout\" the ACK from the peer (this could also be the\n   retransmit timer).\
    \  Similarly, a heartbeats scheme such as the one\n   presented in section 4.2\
    \ would need to keep one timer to signal when\n   to send a HELLO, as well as\
    \ another timer to signal the expectation\n   of a HELLO from the peer.  By contrast\
    \ a DPD scheme needs to keep a\n   timestamp to keep track of the last received\
    \ traffic from the peer\n   (thus marking beginning of the \"idle period\"). \
    \ Once a DPD R-U-THERE\n   message has been sent, an implementation need only\
    \ maintain a timer\n   to signal retransmission.  Thus, the need to maintain active\
    \ timer\n   state is reduced, resulting in a scalability improvement (assuming\n\
    \   maintaining a timestamp is less costly than an active timer).\n   Furthermore,\
    \ since a DPD exchange only occurs if an entity has not\n   received traffic recently\
    \ from its peer, the number of IKE messages\n   to be sent and processed is also\
    \ reduced.  As a consequence, the\n   scalability of DPD is much better than keepalives\
    \ and heartbeats.\n   DPD maintains the HELLO/ACK model presented by keepalives,\
    \ as it\n   follows that an exchange is initiated only by an entity interested\
    \ in\n   the liveliness of its peer.\n"
- title: 6.  Resistance to Replay Attack and False Proof of Liveliness
  contents:
  - '6.  Resistance to Replay Attack and False Proof of Liveliness

    '
- title: 6.1.  Sequence Number in DPD Messages
  contents:
  - "6.1.  Sequence Number in DPD Messages\n   To guard against message replay attacks\
    \ and false proof of\n   liveliness, a 32-bit sequence number MUST be presented\
    \ with each R-\n   U-THERE message.  A responder to an R-U-THERE message MUST\
    \ send an\n   R-U-THERE-ACK with the same sequence number.  Upon receipt of the\
    \ R-\n   U-THERE-ACK message, the initial sender SHOULD check the validity of\n\
    \   the sequence number.  The initial sender SHOULD reject the R-U-\n   THERE-ACK\
    \ if the sequence number fails to match the one sent with the\n   R-U-THERE message.\n\
    \   Additionally, both the receiver of the R-U-THERE and the R-U-THERE-\n   ACK\
    \ message SHOULD check the validity of the Initiator and Responder\n   cookies\
    \ presented in the SPI field of the payload.\n"
- title: 6.2.  Selection and Maintenance of Sequence Numbers
  contents:
  - "6.2.  Selection and Maintenance of Sequence Numbers\n   As both DPD peers can\
    \ initiate a DPD exchange (i.e., both peers can\n   send R-U-THERE messages),\
    \ each peer MUST maintain its own sequence\n   number for R-U-THERE messages.\
    \  The first R-U-THERE message sent in a\n   session MUST be a randomly chosen\
    \ number.  To prevent rolling past\n   overflowing the 32-bit boundary, the high-bit\
    \ of the sequence number\n   initially SHOULD be set to zero.  Subsequent R-U-THERE\
    \ messages MUST\n   increment the sequence number by one.  Sequence numbers MAY\
    \ reset at\n   the expiry of the IKE SA, moving to a newly chosen random number.\n\
    \   Each entity SHOULD also maintain its peer's R-U-THERE sequence\n   number,\
    \ and an entity SHOULD reject the R-U-THERE message if it fails\n   to match the\
    \ expected sequence number.\n   Implementations MAY maintain a window of acceptable\
    \ sequence numbers,\n   but this specification makes no assumptions about how\
    \ this is done.\n   Again, it is an implementation specific detail.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   As the previous section highlighted, DPD uses\
    \ sequence numbers to\n   ensure liveliness.  This section describes the advantages\
    \ of using\n   sequence numbers over random nonces to ensure liveliness.\n   While\
    \ sequence numbers do require entities to keep per-peer state,\n   they also provide\
    \ an added method of protection in certain replay\n   attacks.  Consider a case\
    \ where peer A sends peer B a valid DPD R-U-\n   THERE message.  An attacker C\
    \ can intercept this message and flood B\n   with multiple copies of the messages.\
    \  B will have to decrypt and\n   process each packet (regardless of whether sequence\
    \ numbers or nonces\n   are in use).  With sequence numbers B can detect that\
    \ the packets are\n   replayed: the sequence numbers in these replayed packets\
    \ will not\n   match the incremented sequence number that B expects to receive\
    \ from\n   A.  This prevents B from needing to build, encrypt, and send ACKs.\n\
    \   By contrast, if the DPD protocol used nonces, it would provide no way\n  \
    \ for B to detect that the messages are replayed (unless B maintained a\n   list\
    \ of recently received nonces).\n   Another benefit of sequence numbers is that\
    \ it adds an extra\n   assurance of the peer's liveliness.  As long as a receiver\
    \ verifies\n   the validity of a DPD R-U-THERE message (by verifying its incremented\n\
    \   sequence number), then the receiver can be assured of the peer's\n   liveliness\
    \ by the very fact that the sender initiated the query.\n   Nonces, by contrast,\
    \ cannot provide this assurance.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   There is no IANA action required for this document.\
    \  DPD uses notify\n   numbers from the private range.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative Reference
  contents:
  - "9.1.  Normative Reference\n   [1]  Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [2]  Harkins, D. and D. Carrel, \"The Internet\
    \ Key Exchange (IKE)\",\n        RFC 2409, November 1998.\n   [3]  Kent, S. and\
    \ R. Atkinson, \"Security Architecture for the\n        Internet Protocol\", RFC\
    \ 2401, November 1998.\n"
- title: 10.  Editors' Addresses
  contents:
  - "10.  Editors' Addresses\n   Geoffrey Huang\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA 95134\n   Phone: (408) 525-5354\n   EMail: ghuang@cisco.com\n\
    \   Stephane Beaulieu\n   Cisco Systems, Inc.\n   2000 Innovation Drive\n   Kanata,\
    \ ON\n   Canada, K2K 3E8\n   Phone: (613) 254-3678\n   EMail: stephane@cisco.com\n\
    \   Dany Rochefort\n   Cisco Systems, Inc.\n   124 Grove Street, Suite 205\n \
    \  Franklin, MA 02038\n   Phone: (508) 553-8644\n   EMail: danyr@cisco.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
