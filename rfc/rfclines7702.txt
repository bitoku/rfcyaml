Abstract This document defines a bidirectional protocol mapping for the exchange of instant messages in the context of a multi party chat session among users of the Session Initiation Protocol (SIP) and users of the Extensible Messaging and Presence Protocol (XMPP).
Specifically, this document defines a mapping between the SIP based Message Session Relay Protocol (MSRP) and the XMPP Multi User Chat (MUC) extension.
Both the Session Initiation Protocol (SIP)
[RFC3261] and the Extensible Messaging and Presence Protocol (XMPP)
[RFC6120] can be used for the purpose of multi party text chat over the Internet.
To ensure interworking between these technologies, it is important to define bidirectional protocol mappings.
The architectural assumptions underlying such protocol mappings are provided in [RFC7247], including the mapping of addresses and error conditions.
This document specifies mappings for multi party text chat sessions (often called "groupchat"); specifically, this document defines a mapping between the XMPP Multi User Chat (MUC) extension [XEP 0045] and SIP based multi party chat using Message Session Relay Protocol (MSRP)
[RFC4975] as specified in [RFC7701].
Both MUC and MSRP contain a large set of features, such as the ability to administer rooms, kick out and ban users, reserve a nickname within a room, change room subject, enable room moderation, and destroy the room.
This document covers only a basic subset of groupchat features: joining a room, establishing or changing (but not permanently registering) a room nickname, modifying presence information within the room, sending a message to all participants, sending a private message to a single participant, inviting another user to the room, and leaving the room.
Future documents might define mappings for additional features beyond this set.
The documents in this series are intended for use by software developers who have an existing system based on one of these technologies (e.g., SIP), and who would like to enable communication from that existing system to systems based on the other technology (e.g., XMPP).
We assume that readers are familiar with the core specifications for both SIP [RFC3261] and XMPP [RFC6120], with the base document for this series [RFC7247], and with the following groupchat related specifications:
[RFC7701]  Multi User Chat [XEP 0045] 3.
Terminology A number of technical terms used here are defined in [RFC3261], [RFC4975], [RFC6120], and [XEP 0045].
In protocol flows and examples, provisional SIP responses have been elided for the sake of brevity.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Architectural Assumptions XMPP and MSRP differ in their assumptions regarding groupchat traffic.
In XMPP, a message of type "groupchat" is just another stanza and is handled directly by an XMPP server or routed to an associated server component for multi user chat.
By contrast, sessions (including groupchat sessions) in MSRP are considered to be a type of media (similar to audio/video sessions): signaling to set up, manage, and tear down
the session is handled by a "conference focus" [RFC4353]
(here we assume via SIP), but the session data itself is handled by a separate entity called an MSRP switch.
How the conference focus and MSRP switch communicate is a matter of implementation and deployment.
An architectural diagram for a possible gateway deployment is shown below, where the entities have the following significance:
a particular endpoint associated with the SIP user.
a SIP proxy with an associated SIP to XMPP gateway ("S2X GW") to XMPP.
a SIP based conference focus and MSRP switch with an associated MSRP to SIP gateway ("M2X GW") to XMPP.
a conference at an MSRP switch; not shown in diagram.
juliet@example.com/yn0cl4bnw0yr3vym   a particular endpoint associated with the XMPP user.
example.com   an XMPP server with an associated XMPP to SIP gateway ("X2S GW") to SIP and an XMPP to MSRP gateway ("X2M GW")
an XMPP MUC service associated with example.com.
a chat room at an XMPP MUC service; not shown in diagram.
These are logical entities, and several of them might be co located in the same physical entity.
For example, the SIP conference focus and MSRP switch and associated gateways, or the XMPP server and MUC service and associated gateways, might be part of the same deployed code.
In addition, it is likely that an XMPP service would not have separate gateways for XMPP to SIP translation and XMPP to MSRP translation, but would instead have a single gateway.
, there is no necessity for a SIP user such as romeo@example.org to make use of his SIP proxy in order to join a chat room on the XMPP network; for example, he could try to directly find a SIP service at example.com or independently locate a SIP to  XMPP gateway.
Although, as a simplifying assumption, this document shows the more expected path of using one's "home" SIP proxy and shows gateways as associated with the sending domain, nothing in this document ought to be construed as discouraging other deployment architectures or communication paths (e.g., services hosting their own inbound gateways).
Multi party Messaging Session from XMPP MUC to MSRP This section describes how to map an XMPP MUC session to an MSRP Multi party Messaging session.
The following diagram outlines the overall protocol flow of a sample session, which includes some optional exchanges (such as sending messages, changing a nickname, and inviting another user).
Detailed protocol flows and mappings are provided in the following sections.
As defined in the XMPP Multi User Chat (MUC) specification [XEP 0045], when an XMPP user (say, "juliet@example.com") wants to join a groupchat room (say, "montague@chat.example.org"), she sends a directed <presence/> stanza [RFC6121] to that chat room.
In her request she also specifies the nickname she wants to use within the room (say, "JuliC"); in XMPP this room nickname is the resourcepart of an occupant JID (thus "montague@chat.example.org/JuliC").
The joining client signals its ability to speak the multi user chat protocol by including in the initial presence stanza an empty <x/
> element qualified by the 'http://jabber.org/protocol/muc' namespace.
Upon receiving such a presence stanza, the XMPP server needs to determine the identity of the domainpart in the 'to' address, which it does by following the procedures discussed in [RFC7247].
Here we assume that the XMPP server has determined the domain is serviced by a SIP server, that it contains or has available to it an XMPP to SIP gateway or connection manager (which enables it to speak natively to SIP servers), and that it hands off the presence stanza to the XMPP to SIP gateway.
Because a multi user chat service accepts the presence stanza shown above as a request to enter a room, the XMPP to SIP gateway transforms it into a SIP INVITE request.
Example 2: SIP Mapping of Room Join (F2)
Call ID: BC466C1C E01D 4FD1
1 INVITE    Content Type: application/sdp
a accept types:text/cpim    a accept wrapped types:text/plain text/html    a path:
msrp://x2m.example.com:7654/jshA7weztas;tcp    a chatroom:nickname private messages
the Session Description Protocol (SDP) offer specifies the XMPP  to MSRP gateway on the XMPP side (in the SDP 'path' attribute specified in [RFC4975]) as well as other particulars of the session.
There is no direct mapping for the MSRP URIs.
In fact, an MSRP URI identifies a session of instant messages at a particular device; it is ephemeral and has no meaning outside the scope of that session.
The authority component of the MSRP URI here MUST contain the XMPP to MSRP gateway hostname or numeric IP address (as well as, in accordance with [RFC4975], an explicit port number).
The mapping of XMPP syntax elements to SIP and [RFC4566] syntax elements MUST be as shown in the following table.
However, note that a SIP response uses the same From and To as in the SIP request, whereas an XMPP response swaps the from and to attributes.
Here we assume that the SIP conference focus accepts the session establishment.
The Contact header field of the SIP 200 OK response includes the 'isfocus' feature tag specified in [RFC4353] along with other relevant feature tags.
The conference focus also includes an answer session description that acknowledges the choice of media, specifies the MSRP URI of the switch (in the 'path' attribute specified in [RFC4975]), and contains the extensions specified in [RFC7701].
v 0    c IN IP4
a accept types:message/cpim    a accept wrapped types:text/plain text/html
a chatroom:nickname private messages Upon receiving such a response
, the XMPP to SIP gateway sends a SIP ACK to the conference focus on behalf of the joining user.
<sip:juliet@example.com>;tag 786    Call ID: BC466C1C E01D 4FD1
In accordance with [RFC4975], the gateway sends a bodiless MSRP message (F6) to the switch immediately upon establishing the connection, and the switch acknowledges that message (F7).
If the chat room server accepted the session, the XMPP to MSRP gateway sets up the nickname as received in the presence stanza (i.e., the resourcepart of the 'to' address, such as "JuliC" in "montague@chat.example.org/JuliC").
This is done using the extension specified in [RFC7701].
Example 6: MSRP Switch Accepts Nickname Proposal (F9)
This section assumes that the nickname request is successful.
The error flow resulting from a nickname conflict is described under Section 5.6.
As mentioned in [RFC7701], the joining user will typically also subscribe to a conference event package (see [RFC4575] and [RFC6502]) at the focus.
Although such a subscription is not required by [RFC7701] in practice the temporary and context dependent presence subscriptions and room rosters involved in joining an XMPP MUC room are best mapped to the conference event package.
Gateway Subscribes to the Conference (F10)
Call ID: BC466C1C E01D 4FD1
600    Accept: application/conference info xml    Allow Events:
The focus will accept or reject the request based on local policy.
Focus Accepts Subscription Request (F11
<sip:juliet@example.com>;tag 786    Call ID: BC466C1C E01D 4FD1
If the conference focus accepts the request to enter a room, the XMPP user expects to receive back presence information from all the existing occupants of the room.
To make this happen, the XMPP to SIP gateway subscribes to the conference event package [RFC4575] at the focus.
When the conference event package subscription is completed, the focus sends to the XMPP to SIP gateway a NOTIFY request containing the presence information of all the existing occupants, represented using the format defined in [RFC4575].
Example 9: Conference Focus Sends Presence Information (F12)
4 NOTIFY    Event: conference    Subscription State: active;expires 3600
The syntax mapping from the RFC 4575 payload to the XMPP participant list MUST be as shown in the following table.
(Mappings for elements not mentioned are undefined.)
Upon receiving such a response, the XMPP to SIP gateway sends a SIP 200 OK response to the conference focus (example not shown) and translates the participant list into a series of XMPP presence stanzas.
> If the NOTIFY request included a subject, the gateway converts that into a separate XMPP message.
The mapping of SIP and [RFC4575] payload syntax elements to XMPP syntax elements MUST be as shown in the following table.
(Mappings for elements not mentioned are undefined.)
Contents   XMPP Element or Attribute
Once the user has joined the chat room, the user can exchange an unbounded number of messages, both public and private.
The mapping of XMPP syntax elements to MSRP syntax elements MUST be as shown in the following table.
(Mappings for elements not mentioned are undefined.)
Send a Message to All Occupants When Juliet wants to sends a message to all other occupants in the room, she sends a message of type "groupchat" to the <room@service> itself (in our example, <montague@chat.example.org>).
The following examples show an exchange of a public message.
Upon receiving such a message, the XMPP to MSRP gateway translates it into an MSRP SEND message.
Gateway Maps XMPP Message to MSRP (F17)
: msrp://chat.example.org:12763/kjhd37s2s20w2a;tcp    From Path: msrp://x2m.example.com:7654/jshA7weztas;tcp    Message ID: 87652491    Byte Range:
2008 10 15T15:02:31 03:00    Content Type:
Who knows where Romeo is?
Upon receiving the SEND request, if the request either contains a Failure Report header field value of "yes" or does not contain a Failure Report header at all, the MSRP switch immediately generates and sends a response.
Example 14: MSRP Switch Returns 200
Since an XMPP MUC room could be moderated and an XMPP user cannot be sure whether her message has been accepted without receiving it back from the server, [XEP 0045] states that the sender needs to receive a reflected copy of the message it sent.
So, in this scenario, the XMPP to MSRP gateway has to reflect the message back to the sender.
This procedure only applies to XMPP endpoints.
Send a Private Message Since each occupant has a unique JID, Juliet can send a "private message" to a selected occupant through the service by sending a message to the user's occupant JID.
The XMPP message type ought to be "chat" (and is not allowed to be "groupchat").
The following examples show an exchange of a private message.
Upon receiving such a message, the XMPP to MSRP gateway translates it into an MSRP SEND message.
Gateway Maps Private Message from XMPP to MSRP (F21)
: msrp://chat.example.org:12763/kjhd37s2s20w2a;tcp    From Path: msrp://x2m.example.com:7654/jshA7weztas;tcp    Message ID: 87652491    Byte Range:
juliet@example.org>;gr yn0cl4bnw0yr3vym    DateTime: 2008 10 15T15:02:31
After acknowledging the message by sending an MSRP 200 OK message (step F22, not shown), the MSRP switch is responsible for sending the message to the intended recipient.
When doing so, it modifies the From header to the sender's address within the chat room.
Example 18: Switch Sends Private Message to SIP User    MSRP
: msrp://chat.example.org:12763/kjhd37s2s20w2a;tcp    From Path: msrp://x2m.example.com:7654/jshA7weztas;tcp    Message ID: 87652491    Byte Range:
2008 10 15T15:02:31 03:00    Content Type:
: If an XMPP to MSRP gateway has support for private messaging, it MUST advertise that fact by adding a "private messages" value to the a chatroom SDP attribute it sends to the conference focus, as specified in [RFC7701].
a chatroom:nickname private messages 5.6.
The XMPP user might want to change her nickname.
She can do so by sending an updated presence stanza to the room, containing a new nickname.
So far we have assumed that the requested nickname did not conflict with any existing nicknames.
The following text describes the handling of a nickname conflict.
The MSRP switch analyzes the existing allocation of nicknames, and detects that the nickname proposal is already provided to another participant.
In this case, the MSRP switch answers with a 425 response.
Does Not Accept Nickname Proposal (F25)
Example 21: Conflict Error for Nickname (F26)
Alternatively, the gateway might generate a new nickname request on behalf of the XMPP user, thus shielding the XMPP client from handling the conflict error.
Invite Another User to a Room
In XMPP, there are two methods for inviting another user to a room:
direct invitations [XEP 0249] (sent directly from the user's real JID outside the room to the invitee's real JID) and mediated invitations (sent through the room from the user's occupant JID to the invitee's JID).
In this document, we cover mediated invitations only.
For example, if Juliet decides to invite Benvolio to the room, she sends a message stanza with an invite and Benvolio's JID (which could be his real JID or an occupant JID in another room).
The XMPP to SIP gateway then sends a SIP REFER request to the conference focus indicating who needs to be invited in the Refer To header, as per Section 5.5 of [RFC4579].
Example 23: SIP Mapping of Invite (F28)
<sip:juliet@example.com>;tag 786    Call ID: BC466C1C E01D 4FD1
The conference focus then acknowledges the SIP REFER request with a 200 OK response (step F29, not shown).
The progress of the invitation will be tracked by the received NOTIFY requests as per [RFC3515].
Example 24: Progress Notification for Invitation (F30)
To: <sip:juliet@example.com>;tag 786    From: <sip:montague@chat.example.org>;tag 087js
6 NOTIFY    Max Forwards: 70    Event: refer    Subscription State:
Note: Implementers might want to be aware that several recently published specifications modify the way in which REFER requests handle SIP notifications (see [RFC7647] and [RFC7614]).
If Juliet decides to exit the chat room, her client sends a directed presence stanza of type "unavailable" to the occupant
she is currently using in the room (here <montague@chat.example.org/JuliC>).
Juliet can include a custom exit message in the presence stanza of type "unavailable", in which case it is broadcast to other participants using the methods described above.
MSRP Multi party Messaging Session to XMPP MUC
This section describes how to map a Multi party Instant Message (IM) MSRP session to an XMPP MUC session.
As before, the following diagram outlines the overall protocol flow of a sample session, which includes some optional exchanges (such as sending messages, changing nickname, and inviting another user).
Enter Room When the SIP user ("Romeo") wants to join a groupchat room ("capulet"), he first has to start the SIP session by sending out a SIP INVITE request containing an offered session description that includes an MSRP media line accompanied by mandatory 'path' and 'chatroom' attributes.
Here we assume that Romeo's user agent has been configured to be aware of an MSRP switch (chat.example.org) it can use.
The MSRP media line is also accompanied by an 'accept  types' attribute specifying support for a Message/CPIM [RFC3862] top  level wrapper for the MSRP message.
Example 27: SIP User Starts Session (F35)
1 INVITE    Content Type: application/sdp
a accept types:message/cpim text/plain text/html    a accept wrapped types:text/plain text/html
ansp71weztas;tcp    a chatroom:nickname private messages Upon receiving the INVITE
, the SIP proxy needs to determine the identity of the domain portion of the Request URI or To header, which it does by following the procedures discussed in [RFC7247].
Here we assume that the SIP proxy has determined that the domain is serviced by an XMPP server, that it contains or has available to it a SIP to  XMPP gateway or connection manager (which enables it to speak natively to XMPP servers), and that it hands off the message to the gateway.
Implementations MAY wait until the nickname is set with an MSRP NICKNAME chunk before joining the XMPP MUC or MAY
choose a temporary nickname (such as the SIP From header display name) and use it to join the room.
Here we assume the latter.
Example 28: SIP to XMPP Gateway ACKs Session (F36)
<sip:rooms.example.com;transport tcp>;isfocus    Call ID: 08CFDAA4
1 INVITE    Content Type: application
a accept types:message/cpim text/plain text/html    a accept wrapped types:text/plain text/html
msrp://chat.example.org:8763/lkjh37s2s20w2a;tcp    a chatroom:nickname private messages
The SIP/MSRP user agent subscribes to a conference event package at the destination groupchat service.
Gateway Subscribes to the Conference
600    Accept: application/conference info xml    Allow Events: conference    Content Length: 0
After the conference subscription request is acknowledged,
the SIP  to XMPP gateway sends presence from Romeo to the MUC chat room.
If the MUC service is able to add the SIP/MSRP user to the room, it sends presence from all the existing occupants' room JIDs to the new occupant's full JID, including extended presence information about roles in an <x/> element.
Upon receiving these presence stanzas, if the conference focus has already completed the subscription to the conference event package [RFC4575], the XMPP to SIP gateway translates them into a SIP NOTIFY request containing the participant list (represented in the conference info format specified in [RFC4575]).
To: <sip:romeo@example.org>;tag 43524545    From: <sip:
3 NOTIFY    Event: conference    Subscription State: active;expires 3600
Because the "room roster" is communicated in XMPP by means of multiple presence stanzas (one for each participant) whereas the participant list is communicated in SIP by means of a single conference information document, the SIP to XMPP gateway will need to keep track of the user's SIP URI and the mapping of that URI into an XMPP address; then, based on that mapping, it will need to determine when it has received a complete room roster from the MUC room, i.e., when it has received the in room presence of the SIP user (which according to [XEP 0045] is the last presence stanza received in the initial batch sent after joining).
Once that happens, the SIP to  XMPP gateway can construct the conference information document containing the complete participant list and send that to the SIP user.
Once the user has joined the chat room, the user can exchange an unbounded number of messages, both public and private.
The mapping of MSRP syntax elements to XMPP syntax elements MUST be as shown in the following table.
(Mappings for elements not mentioned are undefined.)
Message Syntax Mapping from MSRP Message to XMPP
Send a Message to All Occupants When Romeo wants to send a message to all other occupants in the room, he sends an MSRP SEND request to <room@service
The following examples show an exchange of a public message.
Romeo Sends a Message to the Chat Room (F44)
Upon receiving the SEND request, if the request either contains a Failure Report header field value of "yes" or does not contain a Failure Report header at all, the SIP to XMPP gateway immediately translates it into an XMPP message stanza and then generates and sends an MSRP response.
Example 34: XMPP Mapping of Message (F45)
Example 35: MSRP Response to Public Message (F47)
well that the XMPP MUC room will reflect the sender's message back to all users, including the sender.
The MSRP to XMPP gateway SHOULD wait until receiving this reflected message before sending an MSRP 200 OK reply to the original sender.
Send a Private Message Romeo can send a "private message" to a selected occupant via the chat room service by sending a message to the occupant's room nickname.
The following examples show an exchange of a private message.
Example 36: Romeo Sends a Private Message (F48)
2008 10 15T15:02:31 03:00    Content Type:
$ The MSRP switch is responsible for transforming the 'From' address into an in room address (not shown).
Once the MSRP switch sends that message to the gateway, the gateway is responsible for translating it into XMPP syntax.
If Romeo decides to change his nickname within the room, he sends a new MSRP NICKNAME request.
In fact, modification of the nickname in MSRP is not different from the initial reservation and usage of a nickname.
Upon receiving such a message, the MSRP to XMPP gateway translates it into an XMPP presence stanza.
The XMPP server will analyze the nickname allocation and determine if the requested nickname is available.
In case the nickname is not available or not usable, the server will generate a presence stanza of type "error" specifying a <conflict/> error condition.
Example 40: XMPP Conflict Error for Nickname (F53)
Upon receiving this stanza, the XMPP to MSRP gateway will reply to the NICKNAME request with code 425.
Gateway Translates XMPP Nickname Conflict to MSRP Error Code (F54)
MSRP a786hjs2 425 Nickname usage failed    To Path:
Invite Another User to a Room
If a SIP user wants to invite another user to join the conference he will send a REFER request indicating who needs to be invited in the Refer To header, as per Section 5.5 of [RFC4579].
Example 42: SIP User Invites Another User (F55)
The SIP to XMPP gateway then acknowledges the SIP REFER request with a 200 OK response (step F56).
The gateway will then send a NOTIFY request as per [RFC3515] indicating that the invitation is in progress.
Since there is no way to know the progress of the invitation until the user has joined, implementations are advised to terminate the REFER dialog subscription upon receiving the first NOTIFY request, with a status code of 100 Trying.
Example 43: Progress Notification for Invitation (F56)
5 NOTIFY    Event: refer    Subscription State: terminated;reason noresource    Contact:
If Romeo decides to exit the chat room, his client sends a SIP BYE to the <montague@chat.example.org> chat room.
Max Forwards: 70    From: "Romeo"
6 BYE    Content Length: 0
Upon receiving the SIP BYE, the SIP to XMPP gateway translates it into a presence stanza of type "unavailable" (F60) and sends it to the XMPP MUC room service.
Then, the SIP to XMPP gateway responds with a 200 OK to the MSRP user (F62).
Handling of Nicknames and Display Names Fundamental rules for mapping addresses between XMPP and SIP are provided in [RFC7247].
However, chat rooms include a more specialized, unique identifier for each participant in a room, called a "nickname".
Implementations SHOULD apply the rules for preparation and comparison of nicknames specified in [RFC7700].
In addition to nicknames, some groupchat implementations also include display names (which might or might not be different from users' nicknames).
A display name need not be unique within the context of a room but instead simply provides a user friendly name for a participant.
In the SIP conference event package, the nickname is the value of the Centralized Conferencing (XCON) 'nickname' attribute of the <user/> element [RFC6501] and the display name is the XML character data of the conference info <display text/> element [RFC4575].
In XMPP, the nickname is the value of the resourcepart of the occupant JID [XEP 0045] and the display name is the XML character data of the <nick/> element [XEP 0172].
In practice, the <display text/> element is treated as canonical in SIP implementations, and the <nick/> element is rarely used in XMPP implementations.
Therefore, for display purposes, SIP implementations ought to use the <display text/> element if the XCON 'nickname' attribute is not present, and XMPP implementations ought to use the resourcepart of the occupant JID if the <nick/> element is not present.
If there is a conflict between the SIP nickname and the XMPP nickname, the SIP to XMPP or XMPP to SIP gateway is responsible for adjusting the nickname to avoid the conflict and for informing the SIP or XMPP client of the unique nickname used to join the chat room.
It is possible for MSRP messages to exceed the size allowed by an XMPP service on the far end of an MSRP to XMPP gateway; see [RFC7573] for a discussion of this issue.
The security considerations of [RFC3261], [RFC4975], [RFC6120], [RFC7247], [RFC7701], and [XEP 0045] apply.
This document specifies methods for exchanging groupchat messages through a gateway that translates between SIP and XMPP.
Such a gateway MUST be compliant with the minimum security requirements of the protocols for which it translates (i.e., MSRP/SIP and XMPP).
The addition of gateways to the security models of MSRP, SIP, and XMPP introduces some new risks.
In particular, end to end security properties (especially confidentiality and integrity) between user agents that interface through an MSRP to XMPP gateway can be provided only if common formats are supported; unfortunately, although [RFC3862] specifies such a format for one to one instant messages, the problem of end to end security for multi party messaging has not been solved in a standardized way.
Some of the features that are not addressed by the minimal interoperability baseline defined in this document are relevant to security, such as the ability to administer rooms, kick out and ban users, and enable room moderation.
Users needing to take advantage of such features cannot do so through a gateway in a standardized manner and therefore will need to use native clients for the relevant protocol (MSRP or XMPP).
As mentioned in [RFC7572], there are several possible methods for end to end encryption of one to one instant messages.
Unfortunately, because there is no widely deployed method for end to end encryption of multi party instant messages, this document cannot provide a recommendation in this regard.
