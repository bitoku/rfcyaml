- title: __initial_text__
  contents:
  - "          Message Disposition Notification (MDN) profile for\n              \
    \  Internet Message Access Protocol (IMAP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Message Disposition Notification (MDN) facility defined in RFC\n\
    \   2298 provides a means by which a message can request that message\n   processing\
    \ by the recipient be acknowledged as well as a format to be\n   used for such\
    \ acknowledgements.  However, it doesn't describe how\n   multiple Mail User Agents\
    \ (MUAs) should handle the generation of MDNs\n   in an Internet Message Access\
    \ Protocol (IMAP4) environment.\n   This document describes how to handle MDNs\
    \ in such an environment and\n   provides guidelines for implementers of IMAP4\
    \ that want to add MDN\n   support to their products.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Conventions Used in this Document.............................\
    \  2\n   2.  Introduction and Overview.....................................  2\n\
    \   3.  Client behavior...............................................  3\n  \
    \     3.1. Client behavior when receiving a message.................  5\n    \
    \   3.2. Client behavior when copying a message...................  5\n      \
    \ 3.3. Client behavior when sending a message...................  5\n       3.4.\
    \ Client behavior when saving a temporary message..........  5\n   4.  Server\
    \ behavior...............................................  5\n       4.1. Server\
    \ that supports arbitrary keywords..................  5\n       4.2. Server that\
    \ supports only $MDNSent keyword...............  5\n       4.3. Interaction with\
    \ IMAP ACL extension......................  6\n   5.  Examples......................................................\
    \  6\n   6.  Security Considerations.......................................  7\n\
    \   7.  Formal Syntax.................................................  7\n  \
    \ 8.  Acknowledgments...............................................  7\n   9.\
    \  Normative References..........................................  8\n   10. Author's\
    \ Address..............................................  8\n   11. Full Copyright\
    \ Statement......................................  9\n"
- title: 1.  Conventions Used in this Document
  contents:
  - "1.  Conventions Used in this Document\n   \"C:\" and \"S:\" in examples show\
    \ lines sent by the client and server\n   respectively.\n   The keywords \"MUST\"\
    , \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\" in\n   this document when\
    \ typed in uppercase are to be interpreted as\n   defined in \"Key words for use\
    \ in RFCs to Indicate Requirement Levels\"\n   [KEYWORDS].\n"
- title: 2.  Introduction and Overview
  contents:
  - "2.  Introduction and Overview\n   This memo defines an additional [IMAP4] mailbox\
    \ keyword that allows\n   multiple Mail User Agents (MUAs) to know if a requested\
    \ receipt\n   notification was sent.\n   Message Disposition Notification [MDN]\
    \ does not require any special\n   support of IMAP in the case where a user has\
    \ access to the mailstore\n   from only one computer and is using a single MUA.\
    \  In this case, the\n   MUA behaves as described in [MDN], i.e., the MUA performs\
    \ automatic\n   processing and generates corresponding MDNs, it performs requested\n\
    \   action and, with the user's permission, sends appropriate MDNs.  The\n   MUA\
    \ will not send MDN twice because the MUA keeps track of sent\n   notifications\
    \ in a local configuration.  However, that does not work\n   when IMAP is used\
    \ to access the same mailstore from different\n   locations or is using different\
    \ MUAs.\n   This document defines a new special purpose mailbox keyword $MDNSent\n\
    \   that must be used by MUAs.  It does not define any new command or\n   response\
    \ for IMAP, but describes a technique that MUAs should use to\n   achieve interoperability.\n\
    \   When a client opens a mailbox for the first time, it verifies that\n   the\
    \ server is capable of storing the $MDNSent keyword by examining\n   the PERMANENTFLAGS\
    \ response code.  In order to support MDN in IMAP, a\n   server MUST support either\
    \ the $MDNSent keyword, or arbitrary message\n   keywords.\n"
- title: 3.  Client behavior
  contents:
  - "3.  Client behavior\n   The use of IMAP requires few additional steps in mail\
    \ processing on\n   the client side.  The following timeline modifies the timeline\
    \ found\n   in Section 4 of [MDN].\n   -- User composes message.\n   -- User tells\
    \ MUA to send message.\n   -- MUA passes message to MSA (original recipient information\
    \ passed\n      along).  MUA [optionally] saves message to a folder for sent mail\n\
    \      with $MDNSent flag set.\n   -- MSA sends message to MTA.\n   -- Final MTA\
    \ receives message.\n   -- Final MTA delivers message to MUA (possibly generating\
    \ DSN).\n   -- MUA logs into IMAP server, opens mailbox, verifies if mailbox can\n\
    \      store $MDNSent keyword by examining PERMANENTFLAGS response.\n   -- MUA\
    \ performs automatic processing and generates corresponding MDNs\n      (\"dispatched\"\
    , \"processed\", \"deleted\", \"denied\" or \"failed\"\n      disposition type\
    \ with \"automatic-action\" and \"MDN-sent-\n      automatically\" disposition\
    \ modes) for messages that do not have\n      $MDNSent keyword, or \\Draft flag\
    \ set. (*)\n   -- MUA sets the $MDNSent keyword for every message that required\
    \ an\n      automatic MDN to be sent, whether or not the MDN was sent.\n   --\
    \ MUA displays a list of messages to user.\n   -- User selects a message and requests\
    \ that some action be performed\n      on it.\n   -- MUA performs requested action\
    \ and, with user's permission, sends\n      appropriate MDN (\"displayed\", \"\
    dispatched\", \"processed\",\n      \"deleted\", \"denied\" or \"failed\" disposition\
    \ type with \"manual-\n      action\" and \"MDN-sent-manually\" or \"MDN-sent-automatically\"\
    \n      disposition mode).  If the generated MDN is saved to a mailbox\n     \
    \ with the APPEND command, the client MUST specify the $MDNSent\n      keyword\
    \ in the APPEND.\n   -- MUA sets the $MDNSent keyword for all messages for which\
    \ the user\n      confirmed the dispatching of disposition (or was explicitly\n\
    \      prohibited to do so).\n   -- User possibly performs other actions on message,\
    \ but no further\n      MDNs are generated.\n   (*) Note: MUA MUST NOT use \\\
    Recent flag as an indicator that it\n       should send MDN, because according\
    \ to [IMAP4], \"If multiple\n       connections have the same mailbox selected\
    \ simultaneously, it is\n       undefined which of these connections will see\
    \ newly-arrived\n       messages with \\Recent set and which will see it without\
    \ \\Recent\n       set\".  Thus, using \\Recent as an indicator will cause\n \
    \      unpredictable client behavior with different IMAP4 servers.\n       However,\
    \ the client MAY use \\Seen flag as one of the indicators\n       that MDN must\
    \ not be sent.  The client MUST NOT use any other\n       standard flags, like\
    \ \\Draft or \\Answered, to indicate that MDN\n       was previously sent, because\
    \ they have different well known\n       meaning.  In any case, in the presence\
    \ of the $MDNSent keyword,\n       the client MUST ignore all other flags or keywords\
    \ for the\n       purpose of generating an MDN and MUST NOT send the MDN.\n  \
    \ When the client opens a mailbox for the first time, it must verify\n   that\
    \ the server supports the $MDNSent keyword, or arbitrary message\n   keywords\
    \ by examining PERMANENTFLAGS response code.\n   The client MUST NOT try to set\
    \ the $MDNSent keyword if the server is\n   incapable of storing it permanently.\n\
    \   The client MUST be prepared to receive NO from the server as the\n   result\
    \ of STORE $MDNSent when the server advertises the support of\n   storing arbitrary\
    \ keywords, because the server may limit the number\n   of message keywords it\
    \ can store in a particular mailbox.  A client\n   SHOULD NOT send MDN if it fails\
    \ to store the $MDNSent keyword.\n   Once the $MDNSent keyword is set, it MUST\
    \ NOT be unset by a client.\n   The client MAY set the $MDNSent keyword when a\
    \ user denies sending\n   the notification.  This prohibits all other MUAs from\
    \ sending MDN for\n   this message.\n"
- title: 3.1.  Client behavior when receiving a message
  contents:
  - "3.1.  Client behavior when receiving a message\n   The client MUST NOT send MDN\
    \ if a message has the $MDNSent keyword\n   set.  It also MUST NOT send MDN if\
    \ a message has \\Draft flag, because\n   some clients use this flag to mark a\
    \ message as incomplete.\n   See the timeline in section 3 for details on client\
    \ behavior when\n   receiving a message.\n"
- title: 3.2.  Client behavior when copying a message
  contents:
  - "3.2.  Client behavior when copying a message\n   The client SHOULD verify that\
    \ $MDNSent is preserved on a COPY\n   operation.  Furthermore, when a message\
    \ is copied between servers\n   with the APPEND command, the client MUST set the\
    \ $MDNSent keyword\n   correctly.\n"
- title: 3.3.  Client behavior when sending a message
  contents:
  - "3.3.  Client behavior when sending a message\n   When saving a sent message to\
    \ any folder, the client MUST set the\n   $MDNSent keyword to prevent another\
    \ client from sending MDN for the\n   message.\n"
- title: 3.4.  Client behavior when saving a temporary message
  contents:
  - "3.4.  Client behavior when saving a temporary message\n   When saving an unfinished\
    \ message to any folder client MUST set\n   $MDNSent keyword to prevent another\
    \ client from sending MDN for the\n   message.\n"
- title: 4.  Server behavior
  contents:
  - "4.  Server behavior\n   Server implementors that want to follow this specification\
    \ must\n   insure that their server complies with either section 4.1 or section\n\
    \   4.2.  If the server also supports the IMAP [ACL] extension, it MUST\n   also\
    \ comply with the section 4.3.\n"
- title: 4.1.  Server that supports arbitrary keywords
  contents:
  - "4.1.  Server that supports arbitrary keywords\n   No changes are required from\
    \ the server to make it compatible with\n   the extension described in this document\
    \ if it supports arbitrary\n   keywords.\n"
- title: 4.2.  Server that supports only $MDNSent keyword
  contents:
  - "4.2.  Server that supports only $MDNSent keyword\n   Servers that support only\
    \ the $MDNSent keyword MUST preserve it on\n   the COPY operation.  It is also\
    \ expected that a server that supports\n   SEARCH <flag> will also support the\
    \ SEARCH KEYWORD $MDNSent.\n"
- title: 4.3.  Interaction with IMAP ACL extension
  contents:
  - "4.3.  Interaction with IMAP ACL extension\n   Any server that conforms to either\
    \ 4.1 or 4.2 and also supports the\n   IMAP [ACL] extension, SHOULD preserve the\
    \ $MDNSent keyword on COPY\n   even if the client does not have 'w' right.  This\
    \ will prevent the\n   generation of a duplicated MDN for the same message.  Note\
    \ that the\n   server MUST still check if the client has rights to perform the\
    \ COPY\n   operation on a message according to [ACL].\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   1) MUA opens mailbox for the first time.\n   a) The server supports\
    \ storing of arbitrary keywords\n   C: a100 select INBOX\n   S: * FLAGS (\\Flagged\
    \ \\Draft \\Deleted \\Seen)\n   S: * OK [PERMANENTFLAGS (\\Flagged \\Draft \\\
    Deleted \\Seen \\*)]\n   S: * 5 EXISTS\n   S: * 3 RECENT\n   S: * OK [UIDVALIDITY\
    \ 894294713]\n   S: a100 OK [READ-WRITE] Completed\n   b) The server supports\
    \ storing of the $MDNSent keyword\n   C: a100 select INBOX\n   S: * FLAGS (\\\
    Flagged \\Draft \\Deleted \\Seen $MDNSent)\n   S: * OK [PERMANENTFLAGS (\\Flagged\
    \ \\Draft \\Deleted \\Seen $MDNSent)]\n   S: * 5 EXISTS\n   S: * 3 RECENT\n  \
    \ S: * OK [UIDVALIDITY 894294713]\n   S: a100 OK [READ-WRITE] Completed\n   2)\
    \ The MUA successfully sets the $MDNSent keyword\n   C: a200 STORE 4 +FLAGS ($MDNSent)\n\
    \   S: * 4 FETCH (FLAGS (\\Flagged \\Seen $MDNSent))\n   S: * FLAGS ($MDNSent\
    \ \\Flagged \\Deleted \\Draft \\Seen)\n   S: * OK [PERMANENTFLAGS ($MDNSent \\\
    Flagged \\Deleted \\Draft \\Seen \\*)]\n   S: a200 OK STORE completed\n   3) The\
    \ server refuses to store the $MDNSent keyword\n   C: a200 STORE 4 +FLAGS ($MDNSent)\n\
    \   S: a200 NO STORE failed : no space left to store $MDNSent keyword\n   4) All\
    \ clients and servers MUST treat the $MDNSent keyword as case\n   insensitive\
    \ in all operations, as stated in [IMAP].\n   C: a300 FETCH 1:* FLAGS\n   S: *\
    \ 1 FETCH (FLAGS (\\Seen))\n   S: * 2 FETCH (FLAGS (\\Answered \\Seen $MdnSENt))\n\
    \   S: * 3 FETCH (FLAGS ())\n   S: * 4 FETCH (FLAGS (\\Flagged \\Seen $MdnSENT))\n\
    \   S: * 5 FETCH (FLAGS ($MDNSent))\n   S: * 6 FETCH (FLAGS (\\Recent))\n   S:\
    \ a300 OK FETCH completed\n   C: a400 SEARCH KEYWORDS $mdnsent\n   S: * SEARCH\
    \ 2 4 5\n   S: a400 OK SEARCH completed\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   There are no known security issues with this\
    \ extension, not found in\n   [MDN] and/or [IMAP4].\n   Section 4.3 changes ACL\
    \ checking requirements on an IMAP server that\n   implements IMAP [ACL] extension.\n"
- title: 7.  Formal Syntax
  contents:
  - "7.  Formal Syntax\n   The following syntax specification uses the augmented Backus-Naur\n\
    \   Form (BNF) notation as specified in [RFC-822], as modified by\n   [IMAP4].\
    \  Non-terminals referenced, but not defined below, are as\n   defined by [IMAP4].\n\
    \   Except as noted otherwise, all alphabetic characters are case-\n   insensitive.\
    \  The use of upper or lower case characters to define\n   token strings is for\
    \ editorial clarity only.  Implementations MUST\n   accept these strings in a\
    \ case-insensitive fashion.\n   flag_keyword    ::= \"$MDNSent\" / other_keywords\n\
    \   other_keywords  ::= atom\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   This document is the product of discussions that took\
    \ place on the\n   IMAP mailing list.  Special gratitude to Cyrus Daboo and Randall\n\
    \   Gellens for reviewing the document.\n   Thank you to my father who as he has\
    \ helped to make me what I am.  I\n   miss you terribly.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [KEYWORDS] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [MDN]      Fajman, R., \"An Extensible Message Format for Message\n      \
    \        Disposition Notifications\", RFC 2298, March 1998.\n   [IMAP4]    Crispin,\
    \ M., \"Internet Message Access Protocol - Version\n              4rev1\", RFC\
    \ 3501, March 2003.\n   [ACL]      Myers, J., \"IMAP4 ACL extension\", RFC 2086,\
    \ January 1997.\n"
- title: 10.  Author's Address
  contents:
  - "10.  Author's Address\n   Alexey Melnikov\n   ACI Worldwide/MessagingDirect\n\
    \   59 Clarendon Road\n   Watford, Hertfordshire\n   United Kingdom, WD17 1FQ\n\
    \   Phone: +44 1923 81 2877\n   EMail: mel@messagingdirect.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
