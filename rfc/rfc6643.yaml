- title: __initial_text__
  contents:
  - "  Translation of Structure of Management Information Version 2 (SMIv2)\n    \
    \                  MIB Modules to YANG Modules\n"
- title: Abstract
  contents:
  - "Abstract\n   YANG is a data modeling language used to model configuration and\n\
    \   state data manipulated by the Network Configuration Protocol\n   (NETCONF),\
    \ NETCONF remote procedure calls, and NETCONF notifications.\n   The Structure\
    \ of Management Information (SMIv2) defines fundamental\n   data types, an object\
    \ model, and the rules for writing and revising\n   MIB modules for use with the\
    \ Simple Network Management Protocol\n   (SNMP).  This document defines a translation\
    \ of SMIv2 MIB modules\n   into YANG modules, enabling read-only (config false)\
    \ access to data\n   objects defined in SMIv2 MIB modules via NETCONF.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6643.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Mapping of Well-Known Types  . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Translation of SMIv2 Modules and SMIv2 IMPORT Clauses \
    \ . . . .  5\n     3.1.  Example: IMPORTS of IF-MIB . . . . . . . . . . . . .\
    \ . . .  6\n   4.  Translation of the MODULE-IDENTITY Macro . . . . . . . . .\
    \ . .  7\n     4.1.  MODULE-IDENTITY Translation Rules  . . . . . . . . . . .\
    \ .  7\n     4.2.  Example: MODULE-IDENTITY of IF-MIB . . . . . . . . . . . .\
    \  8\n   5.  Translation of the TEXTUAL-CONVENTION Macro  . . . . . . . . .  9\n\
    \     5.1.  TEXTUAL-CONVENTION Translation Rules . . . . . . . . . . .  9\n  \
    \   5.2.  Example: OwnerString and InterfaceIndex of IF-MIB  . . . . 10\n    \
    \ 5.3.  Example: IfDirection of the DIFFSERV-MIB . . . . . . . . . 11\n   6. \
    \ Translation of OBJECT IDENTIFIER Assignments . . . . . . . . . 11\n   7.  Translation\
    \ of the OBJECT-TYPE Macro . . . . . . . . . . . . . 11\n     7.1.  Scalar and\
    \ Columnar Object Translation Rules . . . . . . . 11\n     7.2.  Example: ifNumber\
    \ and ifIndex of the IF-MIB  . . . . . . . 13\n     7.3.  Non-Augmenting Conceptual\
    \ Table Translation Rules  . . . . 13\n     7.4.  Example: ifTable of the IF-MIB\
    \ . . . . . . . . . . . . . . 15\n     7.5.  Example: ifRcvAddressTable of the\
    \ IF-MIB . . . . . . . . . 16\n     7.6.  Example: alHostTable of the RMON2-MIB\
    \  . . . . . . . . . . 17\n     7.7.  Augmenting Conceptual Tables Translation\
    \ Rules . . . . . . 18\n     7.8.  Example: ifXTable of the IF-MIB  . . . . .\
    \ . . . . . . . . 20\n   8.  Translation of the OBJECT-IDENTITY Macro . . . .\
    \ . . . . . . . 21\n     8.1.  OBJECT-IDENTITY Translation Rules  . . . . . .\
    \ . . . . . . 21\n     8.2.  Example: diffServTBParamSimpleTokenBucket of the\n\
    \           DIFFSERV-MIB . . . . . . . . . . . . . . . . . . . . . . . 21\n  \
    \ 9.  Translation of the NOTIFICATION-TYPE Macro . . . . . . . . . . 22\n    \
    \ 9.1.  NOTIFICATION-TYPE Translation Rules  . . . . . . . . . . . 22\n     9.2.\
    \  Example: linkDown NOTIFICATION-TYPE of IF-MIB  . . . . . . 23\n   10. YANG\
    \ Language Extension Definition . . . . . . . . . . . . . . 24\n   11. Implementing\
    \ Configuration Data Nodes  . . . . . . . . . . . . 27\n     11.1. Example: addressMapControlTable\
    \ of RMON2-MIB . . . . . . . 28\n   12. IANA Considerations  . . . . . . . . .\
    \ . . . . . . . . . . . . 30\n   13. Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . . 30\n   14. Acknowledgements . . . . . . . . . . . . .\
    \ . . . . . . . . . . 31\n   15. References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 31\n     15.1. Normative References . . . . . . . . . . .\
    \ . . . . . . . . 31\n     15.2. Informative References . . . . . . . . . . .\
    \ . . . . . . . 31\n   Appendix A.  Mapping of Well-Known Types (Normative) .\
    \ . . . . . . 33\n   Appendix B.  Module Prefix Generation (Informative)  . .\
    \ . . . . . 35\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a translation of SMIv2 [RFC2578],\
    \ [RFC2579],\n   [RFC2580] MIB modules into YANG [RFC6020] modules, enabling read-only\n\
    \   (config false, as defined in Section 7.19.1 of RFC 6020) access to\n   SMIv2\
    \ objects defined in SMIv2 MIB modules via NETCONF [RFC6241].\n   For a discussion\
    \ why SMIv2 read-write or read-create objects are\n   translated to read-only\
    \ (config false) YANG objects, see Section 11.\n   YANG modules generated from\
    \ SMIv2 modules should not be modified.\n   Any necessary changes should be made\
    \ by modifying the original SMIv2\n   modules (with proper updates of the SMIv2\
    \ LAST-UPDATED and REVISION\n   clauses) and then running the translation defined\
    \ in this memo again.\n   Note that this does not affect the usage of YANG augments\
    \ and or YANG\n   deviations: YANG modules generated from SMIv2 modules can be\n\
    \   augmented like any other YANG module, and YANG deviations can be used\n  \
    \ to document how an implementation deviates from the generated YANG\n   module.\n\
    \   SMIv1 modules can be converted to YANG by first following the rules\n   in\
    \ [RFC3584] to convert the SMIv1 module to SMIv2 and then following\n   the rules\
    \ in this document to convert the obtained SMIv2 module to\n   YANG.\n   The SMIv2-to-YANG\
    \ mapping is illustrated by examples showing the\n   translation of parts of the\
    \ IF-MIB [RFC2863], the DIFFSERV-MIB\n   [RFC3289], and the RMON2-MIB [RFC4502]\
    \ SMIv2 modules.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in BCP\n   14 [RFC2119].\n"
- title: 2.  Mapping of Well-Known Types
  contents:
  - "2.  Mapping of Well-Known Types\n   The SMIv2 base types and some well-known\
    \ derived textual conventions\n   are mapped to YANG types according to Appendix\
    \ A.  The mapping of the\n   OCTET STRING depends on the context.  If an OCTET\
    \ STRING type has an\n   associated DISPLAY-HINT, then the corresponding YANG\
    \ base type is the\n   string type.  An implementation MUST format an OCTET STRING\
    \ value\n   according to the DISPLAY-HINT, as described in RFC 2579.  If an\n\
    \   OCTECT STRING type does not have an associated DISPLAY-HINT, the\n   binary\
    \ type is used.  Similarly, the mapping of the INTEGER type\n   depends on its\
    \ usage as an enumeration or a 32-bit integral type.\n   Implementations should\
    \ provide implementation-specific options to\n   handle situations where DISPLAY-\
    \ HINTs are added during a revision of\n   a module and backwards compatibility\
    \ must be preserved, i.e., an\n   added DISPLAY-HINT needs to be ignored.\n  \
    \ The mappings shown in Appendix A may require to import the ietf-yang-\n   types,\
    \ ietf-inet-types, or ietf-yang-smiv2 YANG modules since some\n   SMIv2 types\
    \ and textual conventions map to YANG types defined in the\n   ietf-yang-types\
    \ and ietf-inet-types YANG modules defined in [RFC6021]\n   and the ietf-yang-smiv2\
    \ YANG module defined in this document.\n   Implementations MUST add any additional\
    \ imports required by the type\n   mapping.\n"
- title: 3.  Translation of SMIv2 Modules and SMIv2 IMPORT Clauses
  contents:
  - "3.  Translation of SMIv2 Modules and SMIv2 IMPORT Clauses\n   SMIv2 modules are\
    \ mapped to corresponding YANG modules.  The\n   generated YANG module name MUST\
    \ be the same as the SMIv2 module name.\n   The YANG namespace MUST be constructed\
    \ out of the IANA-registered\n   prefix urn:ietf:params:xml:ns:yang:smiv2: (see\
    \ Section 12) followed\n   by the SMIv2 module name.  Since SMIv2 module names\
    \ can be assumed to\n   be unique (see Section 3 in [RFC2578]), the resulting\
    \ YANG namespace\n   is unique.\n   The YANG prefix MAY be derived from the SMIv2\
    \ module name using the\n   module prefix generation algorithm described in Appendix\
    \ B.  The YANG\n   prefix is supposed to be short, and it must be unique within\
    \ the set\n   of all prefixes used by a YANG module.  The algorithm described\
    \ in\n   Appendix B generates such prefixes.\n   SMIv2 IMPORT clauses are translated\
    \ to YANG import statements.  One\n   major difference between the SMIv2 import\
    \ mechanism and the YANG\n   import mechanism is that SMIv2 IMPORT clauses import\
    \ specific symbols\n   from an SMIv2 module, while the YANG import statement imports\
    \ all\n   symbols of the referenced YANG module.\n   In order to produce correct\
    \ and complete YANG import statements, the\n   following rules MUST be used:\n\
    \   o  Process each item in each SMIv2 IMPORT clause as follows:\n      1.  If\
    \ an import statement for this SMIv2 module has already been\n          generated,\
    \ then ignore this item.\n      2.  Otherwise, if the SMIv2 module name is SNMPv2-SMI\
    \ or SNMPv2-\n          CONF, then ignore this item.  Note that these two modules\
    \ can\n          be completely ignored since all definitions in these modules\n\
    \          are translated by translation rules.\n      3.  Otherwise, if this\
    \ item is a textual convention matching one\n          of the textual conventions\
    \ in the SMIv2 types column of\n          Appendix A (e.g., MacAddress, PhysAddress,\
    \ or TimeStamp) then\n          ignore this item.\n      4.  Otherwise, if the\
    \ item is used in a SYNTAX clause of an\n          OBJECT-TYPE whose MAX-ACCESS\
    \ is not accessible-for-notify,\n          then generate an import statement as\
    \ described below.\n      5.  Otherwise, if the item is used in an OBJECTS clause\
    \ of a\n          NOTIFICATION-TYPE, then generate an import statement as\n  \
    \        described below.\n      6.  Otherwise, if the item is used in an INDEX\
    \ or AUGMENTS clause,\n          then generate an import statement as described\
    \ below.\n      7.  Otherwise, ignore this item.  Some examples of this case are\n\
    \          OBJECT IDENTIFIER assignments and objects that are only\n         \
    \ referenced in MODULE-COMPLIANCE, OBJECT-GROUP, or\n          NOTIFICATION-GROUP\
    \ clauses.\n   o  Generate any additional import statements as required by the\
    \ type\n      translations according to the type mapping table Appendix A.  This\n\
    \      requires the translator to consider all the types used in the\n      SMIv2\
    \ module in order to produce the imports.\n   o  Generate an import statement\
    \ for the YANG module ietf-yang-smiv2\n      with the prefix smiv2.\n   The generated\
    \ import statements use the untranslated SMIv2 module\n   names or the names of\
    \ well-known YANG modules as their argument.  The\n   import statement must contain\
    \ a prefix statement.  The prefixes MAY\n   be generated by applying the module\
    \ prefix generation algorithm\n   described in Appendix B.\n"
- title: '3.1.  Example: IMPORTS of IF-MIB'
  contents:
  - "3.1.  Example: IMPORTS of IF-MIB\n   The translation of the IF-MIB [RFC2863]\
    \ leads to the YANG module and\n   namespace/prefix statement and the import statements\
    \ shown below.\n   The prefix is the translation of the SMIv2 module name IF-MIB\
    \ to\n   lowercase (consisting of two tokens and thus no further\n   abbreviation).\n\
    \     module IF-MIB {\n       namespace \"urn:ietf:params:xml:ns:yang:smiv2:IF-MIB\"\
    ;\n       prefix \"if-mib\";\n       import IANAifType-MIB      { prefix \"ianaiftype-mib\"\
    ; }\n       import SNMPv2-TC           { prefix \"snmpv2-tc\"; }\n       import\
    \ ietf-yang-types     { prefix \"yang\"; }\n       import ietf-yang-smiv2    \
    \ { prefix \"smiv2\"; }\n     }\n"
- title: 4.  Translation of the MODULE-IDENTITY Macro
  contents:
  - "4.  Translation of the MODULE-IDENTITY Macro\n   SMIv2 requires an invocation\
    \ of the MODULE-IDENTITY macro to provide\n   contact and revision history for\
    \ a MIB module.  The clauses of the\n   SMIv2 MODULE-IDENTITY macro MUST be translated\
    \ into YANG statements\n   as detailed below.\n"
- title: 4.1.  MODULE-IDENTITY Translation Rules
  contents:
  - "4.1.  MODULE-IDENTITY Translation Rules\n   o  The SMIv2 ORGANIZATION clause\
    \ is mapped to the YANG organization\n      statement.\n   o  The SMIv2 CONTACT-INFO\
    \ clause is mapped to the YANG contact\n      statement.\n   o  The SMIv2 DESCRIPTION\
    \ clause is mapped to the YANG description\n      statement.\n   o  Each SMIv2\
    \ REVISION clause is mapped to a YANG revision statement.\n      The revision\
    \ is identified by the date argument of the SMIv2\n      REVISION clause.  DESCRIPTION\
    \ sub-clauses of REVISION clauses are\n      mapped to corresponding description\
    \ statement nested in revision\n      clauses.\n   o  The SMIv2 LAST-UPDATED clause\
    \ is ignored if the associated date\n      matches a REVISION clause.  Otherwise,\
    \ an additional revision\n      statement is generated.\n   o  A top-level YANG\
    \ container is generated.  The container's name is\n      the SMIv2 module name,\
    \ and the container MUST be config false.\n      The generation of the top-level\
    \ container MAY be skipped if the\n      SMIv2 module does not define any objects\
    \ that go into the top-\n      level container (e.g., an SMIv2 module only defining\
    \ textual\n      conventions).\n   o  The object identifier value of the invocation\
    \ of the SMIv2 MODULE-\n      IDENTITY is translated into an smiv2:oid statement\
    \ contained in an\n      smiv2:alias statement representing the MODULE-IDENTITY\
    \ macro\n      invocation.  Refer to the YANG extension defined in Section 10.\n\
    \   While all proper SMIv2 modules must have exactly one MODULE-IDENTITY\n   macro\
    \ invocation, there are a few notable exceptions.  The modules\n   defining the\
    \ SMIv2 language (i.e., the SNMPv2-SMI, SNMPv2-TC, and\n   SNMPv2-CONF modules)\
    \ do not invoke the MODULE-IDENTITY macro.\n   Furthermore, SMIv2 modules generated\
    \ from SMIv1 modules may miss an\n   invocation of the MODULE-IDENTITY macro as\
    \ well.  In such cases, it\n   is preferable to not generate organization, contact,\
    \ description, or\n   revision statements.\n"
- title: '4.2.  Example: MODULE-IDENTITY of IF-MIB'
  contents:
  - "4.2.  Example: MODULE-IDENTITY of IF-MIB\n   The translation of the MODULE-IDENTITY\
    \ of the IF-MIB [RFC2863] leads\n   to the following YANG statements:\n     organization\n\
    \      \"IETF Interfaces MIB Working Group\";\n     contact\n      \"Keith McCloghrie\n\
    \       Cisco Systems, Inc.\n       170 West Tasman Drive\n       San Jose, CA\
    \  95134-1706\n       US\n       408-526-5260\n       kzm@cisco.com\";\n     description\n\
    \      \"The MIB module to describe generic objects for network\n       interface\
    \ sub-layers.  This MIB is an updated version of\n       MIB-II's ifTable, and\
    \ incorporates the extensions defined in\n       RFC 1229.\";\n     revision \"\
    2000-06-14\" {\n       description\n        \"Clarifications agreed upon by the\
    \ Interfaces MIB WG, and\n         published as RFC 2863.\";\n     }\n     revision\
    \ \"1996-02-28\" {\n       description\n        \"Revisions made by the Interfaces\
    \ MIB WG, and published in\n         RFC 2233.\";\n     }\n     revision \"1993-11-08\"\
    \ {\n       description\n        \"Initial revision, published as part of RFC\
    \ 1573.\";\n     }\n     container IF-MIB {\n       config false;\n     }\n"
- title: 5.  Translation of the TEXTUAL-CONVENTION Macro
  contents:
  - "5.  Translation of the TEXTUAL-CONVENTION Macro\n   The SMIv2 uses invocations\
    \ of the TEXTUAL-CONVENTION macro to define\n   new types derived from the SMIv2\
    \ base types.  Invocations of the\n   TEXTUAL-CONVENTION macro MUST be translated\
    \ into YANG typedef\n   statements as detailed below.\n"
- title: 5.1.  TEXTUAL-CONVENTION Translation Rules
  contents:
  - "5.1.  TEXTUAL-CONVENTION Translation Rules\n   The name of the TEXTUAL-CONVENTION\
    \ macro invocation is used as the\n   name of the generated typedef statement.\
    \  The clauses of the SMIv2\n   TEXTUAL-CONVENTION macro are mapped to YANG statements\
    \ embedded in\n   the typedef statement as follows:\n   o  The SMIv2 DISPLAY-HINT\
    \ clause is used to determine the type\n      mapping of types derived form the\
    \ OCTET STRING type as explained\n      in Section 2.  Furthermore, the DISPLAY-HINT\
    \ value MAY be used to\n      generate a regular expression for the YANG pattern\
    \ statement\n      within the type statement.\n   o  The SMIv2 DISPLAY-HINT is\
    \ translated into an smiv2:display-hint\n      statement.  Refer to the YANG extension\
    \ defined in Section 10.\n   o  The SMIv2 STATUS clause is mapped to the YANG\
    \ status statement.\n      The generation of the YANG status statement is skipped\
    \ if the\n      value of the STATUS clause is current.\n   o  The SMIv2 DESCRIPTION\
    \ clause is mapped to the YANG description\n      statement.\n   o  The SMIv2\
    \ REFERENCE clause is mapped to the YANG reference\n      statement.\n   o  The\
    \ SMIv2 SYNTAX clause is mapped to the YANG type statement.\n      SMIv2 range\
    \ restrictions are mapped to YANG range statements,\n      while SMIv2 length\
    \ restrictions are mapped to YANG length\n      statements.  SMIv2 INTEGER enumerations\
    \ are mapped to YANG enum/\n      value statements.  SMIv2 BITS are mapped to\
    \ YANG bit/position\n      statements.  For OCTET STRING types that are mapped\
    \ to a YANG\n      string base type (see Section 2), the length specified in the\
    \ YANG\n      length statement must be consistent with the stringified\n     \
    \ representation of values.  If an implementation is unable to\n      derive a\
    \ proper length restrictions, then the YANG length\n      statement MUST be omitted.\n\
    \   This translation assumes that labels of named numbers and named bits\n   do\
    \ not change when an SMIv2 module is revised.  This is consistent\n   with the\
    \ clarification of the SMIv2 module revision rules in Section\n   4.9 of [RFC4181].\n"
- title: '5.2.  Example: OwnerString and InterfaceIndex of IF-MIB'
  contents:
  - "5.2.  Example: OwnerString and InterfaceIndex of IF-MIB\n   The translations\
    \ of the OwnerString and InterfaceIndex textual\n   conventions of the IF-MIB\
    \ [RFC2863] are shown below.\n     typedef OwnerString {\n       type string {\n\
    \         length \"0..255\";\n         pattern '\\p{IsBasicLatin}{0,255}';\n \
    \      }\n       status deprecated;\n       description\n        \"This data type\
    \ is used to model an administratively\n         assigned name of the owner of\
    \ a resource.  This information\n         is taken from the NVT ASCII character\
    \ set.  It is suggested\n         that this name contain one or more of the following:\
    \ ASCII\n         form of the manager station's transport address, management\n\
    \         station name (e.g., domain name), network management\n         personnel's\
    \ name, location, or phone number.  In some cases\n         the agent itself will\
    \ be the owner of an entry.  In these\n         cases, this string shall be set\
    \ to a string starting with\n         'agent'.\";\n       smiv2:display-hint \"\
    255a\";\n     }\n     typedef InterfaceIndex {\n       type int32 {\n        \
    \ range \"1..2147483647\";\n       }\n       description\n        \"A unique value,\
    \ greater than zero, for each interface or\n         interface sub-layer in the\
    \ managed system.  It is\n         recommended that values are assigned contiguously\
    \ starting\n         from 1.  The value for each interface sub-layer must remain\n\
    \         constant at least from one re-initialization of the entity's\n     \
    \    network management system to the next re-initialization.\";\n       smiv2:display-hint\
    \ \"d\";\n     }\n"
- title: '5.3.  Example: IfDirection of the DIFFSERV-MIB'
  contents:
  - "5.3.  Example: IfDirection of the DIFFSERV-MIB\n   The translation of the IfDirection\
    \ textual convention of the\n   DIFFSERV-MIB [RFC3289] is shown below.\n     typedef\
    \ IfDirection {\n       type enumeration {\n         enum inbound  { value 1;\
    \ }\n         enum outbound { value 2; }\n       }\n       description\n     \
    \   \"IfDirection specifies a direction of data travel on an\n         interface.\
    \ 'inbound' traffic is operated on during reception\n         from the interface,\
    \ while 'outbound' traffic is operated on\n         prior to transmission on the\
    \ interface.\";\n     }\n"
- title: 6.  Translation of OBJECT IDENTIFIER Assignments
  contents:
  - "6.  Translation of OBJECT IDENTIFIER Assignments\n   The SMIv2 uses OBJECT IDENTIFIER\
    \ assignments to introduce names for\n   intermediate nodes in the OBJECT IDENTIFIER\
    \ tree.  OBJECT IDENTIFIER\n   assignments are translated into smiv2:alias statements.\
    \  Refer to the\n   YANG extension defined in Section 10.\n"
- title: 7.  Translation of the OBJECT-TYPE Macro
  contents:
  - "7.  Translation of the OBJECT-TYPE Macro\n   The SMIv2 uses the OBJECT-TYPE macro\
    \ to define objects and the\n   structure of conceptual tables.  Objects exist\
    \ either as scalars\n   (exactly one instance within an SNMP context) or columnar\
    \ objects\n   within conceptual tables (zero or multiple instances within an SNMP\n\
    \   context).  A number of auxiliary objects define the index (key) of a\n   conceptual\
    \ table.  Furthermore, conceptual tables can be augmented by\n   other conceptual\
    \ tables.  All these differences must be taken into\n   account when translating\
    \ SMIv2 OBJECT-TYPE macro invocations to YANG.\n   Invocations of the OBJECT-TYPE\
    \ macro MUST be translated into YANG\n   statements as detailed below.\n"
- title: 7.1.  Scalar and Columnar Object Translation Rules
  contents:
  - "7.1.  Scalar and Columnar Object Translation Rules\n   SMIv2 OBJECT-TYPE macro\
    \ invocations defining scalars or columnar\n   objects with a MAX-ACCESS of \"\
    not-accessible\", \"read-only\",\n   \"read-write\", and \"read-create\" are translated\
    \ to YANG leaf\n   statements.  Additionally, columnar objects with a MAX-ACCESS\
    \ of\n   \"accessible-for-notify\" are translated to YANG leaf statements if\n\
    \   that columnar object is part of the INDEX clause of the table\n   containing\
    \ that columnar object.  The name of the leaf is the name\n   associated with\
    \ the SMIv2 OBJECT-TYPE macro invocation.  SMIv2\n   OBJECT-TYPE macro invocations\
    \ with a MAX-ACCESS of\n   \"accessible-for-notify\" are not translated to YANG\
    \ data tree leafs\n   but instead are translated into YANG notification leafs.\n\
    \   Leaf statements for scalar objects are created in a container\n   representing\
    \ the scalar's parent node in the OID tree.  This\n   container is named after\
    \ the scalar's parent node in the OID tree and\n   placed in the top-level container\
    \ representing the SMIv2 module; see\n   Section 4.1.  In the rare case that the\
    \ scalar's parent node has\n   multiple names, the automatic translation MUST\
    \ fail with an error,\n   and the name clash needs to be investigated and fixed\
    \ manually.  In\n   case a previous revision of the SMIv2 module did not have\
    \ an\n   ambiguity, then the name used by the previous revision MUST be used.\n\
    \   The leaf statements representing columnar objects are created in the\n   list\
    \ representing a conceptual row; see Section 7.3.\n   o  The SMIv2 SYNTAX clause\
    \ is mapped to the YANG type statement.\n      SMIv2 range restrictions are mapped\
    \ to YANG range statements,\n      while SMIv2 length restrictions are mapped\
    \ to YANG length\n      statements.  SMIv2 INTEGER enumerations are mapped to\
    \ YANG enum/\n      value statements.  SMIv2 BITS are mapped to YANG bit/position\n\
    \      statements.  For OCTET STRING types that are mapped to a YANG\n      string\
    \ base type (see Section 2), the length specified in the YANG\n      length statement\
    \ must be consistent with the stringified\n      representation of values.  If\
    \ an implementation is unable to\n      derive proper length restrictions, then\
    \ the YANG length statement\n      MUST be omitted.\n   o  The SMIv2 UNITS clause\
    \ is mapped to the YANG units statement.\n   o  The SMIv2 MAX-ACCESS is translated\
    \ into an smiv2:max-access\n      statement.  Refer to the YANG extension defined\
    \ in Section 10.\n   o  The SMIv2 STATUS clause is mapped to the YANG status statement.\n\
    \      The generation of the YANG status statement is skipped if the\n      value\
    \ of the STATUS clause is current.\n   o  The SMIv2 DESCRIPTION clause is mapped\
    \ to the YANG description\n      statement.\n   o  The SMIv2 REFERENCE clause\
    \ is mapped to the YANG reference\n      statement.\n   o  The SMIv2 DEFVAL clause\
    \ is mapped to an smiv2:defval statement.\n      Refer to the YANG extension defined\
    \ in Section 10.\n   o  The value of the SMIv2 OBJECT-TYPE macro invocation is\
    \ translated\n      into an smiv2:oid statement.  Refer to the YANG extension\
    \ defined\n      in Section 10.\n   This translation assumes that labels of named\
    \ numbers and named bits\n   do not change when an SMIv2 module is revised.  This\
    \ is consistent\n   with the clarification of the SMIv2 module revision rules\
    \ in Section\n   4.9 of [RFC4181].\n"
- title: '7.2.  Example: ifNumber and ifIndex of the IF-MIB'
  contents:
  - "7.2.  Example: ifNumber and ifIndex of the IF-MIB\n   The translations of the\
    \ ifNumber scalar object and the ifIndex\n   columnar object of the IF-MIB [RFC2863]\
    \ are shown below.  Since\n   ifNumber is a scalar object in the interfaces branch\
    \ of the IF-MIB,\n   the YANG leaf ifNumber will be placed in a YANG container\
    \ called\n   interfaces, which is registered in the top-level container IF-MIB.\n\
    \     leaf ifNumber {\n       type int32;\n       description\n        \"The number\
    \ of network interfaces (regardless of their\n         current state) present\
    \ on this system.\";\n       smiv2:max-access \"read-only\";\n       smiv2:oid\
    \ \"1.3.6.1.2.1.2.1\";\n     }\n     leaf ifIndex {\n       type if-mib:InterfaceIndex;\n\
    \       description\n        \"A unique value, greater than zero, for each interface.\
    \  It\n         is recommended that values are assigned contiguously\n       \
    \  starting from 1.  The value for each interface sub-layer\n         must remain\
    \ constant at least from one re-initialization of\n         the entity's network\
    \ management system to the next re-\n         initialization.\";\n       smiv2:max-access\
    \ \"read-only\";\n       smiv2:oid \"1.3.6.1.2.1.2.2.1.1\";\n     }\n"
- title: 7.3.  Non-Augmenting Conceptual Table Translation Rules
  contents:
  - "7.3.  Non-Augmenting Conceptual Table Translation Rules\n   An OBJECT-TYPE macro\
    \ invocation defining a non-augmenting conceptual\n   table is translated to a\
    \ YANG container statement using the name of\n   the OBJECT-TYPE macro invocation.\
    \  This container is created in the\n   top-level container representing the SMIv2\
    \ module.  The clauses of\n   the macro are translated as follows:\n   o  The\
    \ SMIv2 SYNTAX clause is ignored\n   o  The SMIv2 UNITS clause is ignored.\n \
    \  o  The SMIv2 MAX-ACCESS clause is ignored.\n   o  The SMIv2 STATUS clause is\
    \ mapped to the YANG status statement.\n      The generation of the YANG status\
    \ statement is skipped if the\n      value of the STATUS clause is current.\n\
    \   o  The SMIv2 DESCRIPTION clause is mapped to the YANG description\n      statement.\n\
    \   o  The SMIv2 REFERENCE clause is mapped to the YANG reference\n      statement.\n\
    \   o  The value of the SMIv2 OBJECT-TYPE macro invocation is translated\n   \
    \   into an smiv2:oid statement.  Refer to the YANG extension defined\n      in\
    \ Section 10.\n   An OBJECT-TYPE macro invocation defining a conceptual row is\n\
    \   translated to a YANG list statement.  It is contained in the YANG\n   container\
    \ representing the conceptual table.  The generated list uses\n   the name of\
    \ the row OBJECT-TYPE macro invocation.  The clauses of the\n   OBJECT-TYPE macro\
    \ are translated as follows:\n   o  The SMIv2 SYNTAX clause is ignored.\n   o\
    \  The SMIv2 UNITS clause is ignored.\n   o  The SMIv2 MAX-ACCESS clause is ignored.\n\
    \   o  The SMIv2 STATUS clause is mapped to the YANG status statement.\n     \
    \ The generation of the YANG status statement is skipped if the\n      value of\
    \ the STATUS clause is current.\n   o  The SMIv2 DESCRIPTION clause is mapped\
    \ to the YANG description\n      statement.\n   o  The SMIv2 REFERENCE clause\
    \ is mapped to the YANG reference\n      statement.\n   o  The SMIv2 INDEX clause\
    \ is mapped to the YANG key clause listing\n      the columnar objects forming\
    \ the key of the YANG list.  If the\n      same object appears more than once\
    \ in the INDEX clause, append\n      '_<n>' to the duplicate object name(s) where\
    \ '<n>' counts the\n      occurrences of the object in the INDEX clause, starting\
    \ from 2.\n      Additional leaf statements must be created to define the leafs\n\
    \      introduced.\n   o  If the SMIv2 INDEX clause contains the IMPLIED keyword,\
    \ then an\n      smiv2:implied statement is generated to record the name of the\n\
    \      object preceded by the IMPLIED keyword.  Refer to the YANG\n      extension\
    \ defined in Section 10.\n   o  The value of the SMIv2 OBJECT-TYPE macro invocation\
    \ is translated\n      into an smiv2:oid statement.  Refer to the YANG extension\
    \ defined\n      in Section 10.\n   Within the list statement, YANG leaf statements\
    \ are created for\n   columnar objects as described in Section 7.1.  For objects\
    \ listed in\n   the SMIv2 INDEX clause that are not part of the conceptual table\n\
    \   itself, YANG leaf statements of type leafref pointing to the\n   referenced\
    \ definition are created.\n"
- title: '7.4.  Example: ifTable of the IF-MIB'
  contents:
  - "7.4.  Example: ifTable of the IF-MIB\n   The translation of the definition of\
    \ the ifTable of the IF-MIB\n   [RFC2863] is shown below.\n     container ifTable\
    \ {\n       description\n        \"A list of interface entries.  The number of\
    \ entries is\n         given by the value of ifNumber.\";\n       smiv2:oid \"\
    1.3.6.1.2.1.2.2\";\n       list ifEntry {\n         key \"ifIndex\";\n       \
    \  description\n          \"An entry containing management information applicable\
    \ to a\n           particular interface.\";\n         smiv2:oid \"1.3.6.1.2.1.2.2.1\"\
    ;\n         leaf ifIndex {\n           type if-mib:InterfaceIndex;\n         \
    \  description\n            \"A unique value, greater than zero, for each interface.\
    \  It\n             is recommended that values are assigned contiguously\n   \
    \          starting from 1.  The value for each interface sub-layer\n        \
    \     must remain constant at least from one re-initialization of\n          \
    \   the entity's network management system to the next re-\n             initialization.\"\
    ;\n           smiv2:max-access \"read-only\";\n           smiv2:oid \"1.3.6.1.2.1.2.2.1.1\"\
    ;\n         }\n         // ...\n       }\n     }\n"
- title: '7.5.  Example: ifRcvAddressTable of the IF-MIB'
  contents:
  - "7.5.  Example: ifRcvAddressTable of the IF-MIB\n   The translation of the definition\
    \ of the ifRcvAddressTable of the\n   IF-MIB [RFC2863] is shown below.\n     container\
    \ ifRcvAddressTable {\n       description\n        \"This table contains an entry\
    \ for each address (broadcast,\n         multicast, or uni-cast) for which the\
    \ system will receive\n         packets/frames on a particular interface, except\
    \ as follows:\n         - for an interface operating in promiscuous mode, entries\
    \ are\n           only required for those addresses for which the system would\n\
    \           receive frames were it not operating in promiscuous mode.\n      \
    \   - for 802.5 functional addresses, only one entry is required,\n          \
    \ for the address which has the functional address bit ANDed\n           with\
    \ the bit mask of all functional addresses for which the\n           interface\
    \ will accept frames.\n         A system is normally able to use any unicast address\
    \ which\n         corresponds to an entry in this table as a source address.\"\
    ;\n       smiv2:oid \"1.3.6.1.2.1.31.1.4\";\n       list ifRcvAddressEntry {\n\
    \         key \"ifIndex ifRcvAddressAddress\";\n         description\n       \
    \   \"A list of objects identifying an address for which the\n           system\
    \ will accept packets/frames on the particular\n           interface identified\
    \ by the index value ifIndex.\";\n         smiv2:oid \"1.3.6.1.2.1.31.1.4.1\"\
    ;\n         leaf ifIndex {\n           type leafref {\n             path \"/if-mib:IF-MIB/if-mib:ifTable\"\
    \ +\n                  \"/if-mib:ifEntry/if-mib:ifIndex\";\n           }\n   \
    \      }\n         leaf ifRcvAddressAddress {\n           type yang:phys-address;\n\
    \           description\n            \"An address for which the system will accept\
    \ packets/frames\n             on this entry's interface.\";\n           smiv2:max-access\
    \ \"not-accessible\";\n           smiv2:oid \"1.3.6.1.2.1.31.1.4.1.1\";\n    \
    \     }\n         // ...\n       }\n     }\n"
- title: '7.6.  Example: alHostTable of the RMON2-MIB'
  contents:
  - "7.6.  Example: alHostTable of the RMON2-MIB\n   The translation of the definition\
    \ of the alHostTable of the RMON2-MIB\n   [RFC4502] is shown below.\n   container\
    \ alHostTable {\n     description\n      \"A collection of statistics for a particular\
    \ protocol from a\n       particular network address that has been discovered\
    \ on an\n       interface of this device.\n       The probe will populate this\
    \ table for all protocols in the\n       protocol directory table whose value\
    \ of\n       protocolDirHostConfig is equal to supportedOn(3), and\n       will\
    \ delete any entries whose protocolDirEntry is deleted or\n       has a protocolDirHostConfig\
    \ value of supportedOff(2).\n       The probe will add to this table all addresses\n\
    \       seen as the source or destination address in all packets with\n      \
    \ no MAC errors and will increment octet and packet counts in\n       the table\
    \ for all packets with no MAC errors.  Further,\n       entries will only be added\
    \ to this table if their address\n       exists in the nlHostTable and will be\
    \ deleted from this table\n       if their address is deleted from the nlHostTable.\"\
    ;\n     smiv2:oid \"1.3.6.1.2.1.16.16.1\";\n     list alHostEntry {\n       key\
    \ \"hlHostControlIndex alHostTimeMark protocolDirLocalIndex \"\n         + \"\
    nlHostAddress protocolDirLocalIndex_2\";\n       description\n        \"A conceptual\
    \ row in the alHostTable.\n         The hlHostControlIndex value in the index\
    \ identifies the\n         hlHostControlEntry on whose behalf this entry was created.\n\
    \         The first protocolDirLocalIndex value in the index identifies\n    \
    \     the network-layer protocol of the address.\n         The nlHostAddress value\
    \ in the index identifies the network-\n         layer address of this entry.\n\
    \         The second protocolDirLocalIndex value in the index identifies\n   \
    \      the protocol that is counted by this entry.\n         An example of the\
    \ indexing in this entry is\n         alHostOutPkts.1.783495.18.4.128.2.6.6.34.\n\
    \         Note that some combinations of index values may result in an\n     \
    \    index that exceeds 128 sub-identifiers in length, which exceeds\n       \
    \  the maximum for the SNMP protocol.  Implementations should take\n         care\
    \ to avoid such combinations.\";\n       smiv2:oid \"1.3.6.1.2.1.16.16.1.1\";\n\
    \       // ...\n       leaf protocolDirLocalIndex {\n         type leafref {\n\
    \           path \"/rmon2-mib:RMON2-MIB/\"\n              + \"rmon2-mib:protocolDirTable/\"\
    \n              + \"rmon2-mib:protocolDirEntry/\"\n              + \"rmon2-mib:protocolDirLocalIndex\"\
    ;\n         }\n       }\n       // ...\n       leaf protocolDirLocalIndex_2 {\n\
    \         type leafref {\n           path \"/rmon2-mib:RMON2-MIB/\"\n        \
    \      + \"rmon2-mib:protocolDirTable/\"\n              + \"rmon2-mib:protocolDirEntry/\"\
    \n              + \"rmon2-mib:protocolDirLocalIndex\";\n         }\n       }\n\
    \       // ...\n     }\n   }\n"
- title: 7.7.  Augmenting Conceptual Tables Translation Rules
  contents:
  - "7.7.  Augmenting Conceptual Tables Translation Rules\n   An OBJECT-TYPE macro\
    \ invocation defining an augmenting conceptual\n   table is translated to a YANG\
    \ smiv2:alias statement.  Refer to the\n   YANG extension defined in Section 10.\
    \  The clauses of the macro are\n   translated as follows:\n   o  The SMIv2 SYNTAX\
    \ clause is ignored.\n   o  The SMIv2 UNITS clause is ignored.\n   o  The SMIv2\
    \ MAX-ACCESS clause is ignored.\n   o  The SMIv2 STATUS clause is mapped to the\
    \ YANG status statement.\n      The generation of the YANG status statement is\
    \ skipped if the\n      value of the STATUS clause is current.\n   o  The SMIv2\
    \ DESCRIPTION clause is mapped to the YANG description\n      statement.\n   o\
    \  The SMIv2 REFERENCE clause is mapped to the YANG reference\n      statement.\n\
    \   o  The value of the SMIv2 OBJECT-TYPE macro invocation is translated\n   \
    \   into an smiv2:oid statement.  Refer to the YANG extension defined\n      in\
    \ Section 10.\n   An OBJECT-TYPE macro invocation defining a conceptual row\n\
    \   augmentation is translated to a YANG smiv2:alias statement and a YANG\n  \
    \ augment statement using the path to the augmented table as its\n   argument.\
    \  The clauses of the OBJECT-TYPE macro are translated as\n   follows:\n   o \
    \ The SMIv2 SYNTAX clause is ignored.\n   o  The SMIv2 UNITS clause is ignored.\n\
    \   o  The SMIv2 MAX-ACCESS clause is ignored.\n   o  The SMIv2 STATUS clause\
    \ is mapped to the YANG status statement.\n      The generation of the YANG status\
    \ statement is skipped if the\n      value of the STATUS clause is current.\n\
    \   o  The SMIv2 DESCRIPTION clause is mapped to the YANG description\n      statement.\n\
    \   o  The SMIv2 REFERENCE clause is mapped to the YANG reference\n      statement.\n\
    \   o  The value of the SMIv2 OBJECT-TYPE macro invocation is translated\n   \
    \   into an smiv2:oid statement.  Refer to the YANG extension defined\n      in\
    \ Section 10.\n   Within the augment statement, YANG leaf statements are created\
    \ as\n   described in Section 7.1.\n"
- title: '7.8.  Example: ifXTable of the IF-MIB'
  contents:
  - "7.8.  Example: ifXTable of the IF-MIB\n   The translation of the definition of\
    \ the ifXTable of the IF-MIB\n   [RFC2863] is shown below.\n     smiv2:alias \"\
    ifXTable\" {\n       description\n        \"A list of interface entries.  The\
    \ number of entries is\n         given by the value of ifNumber.  This table contains\n\
    \         additional objects for the interface table.\";\n       smiv2:oid \"\
    1.3.6.1.2.1.31.1.1\";\n     }\n     smiv2:alias \"ifXEntry\" {\n       description\n\
    \        \"An entry containing additional management information\n         applicable\
    \ to a particular interface.\";\n       smiv2:oid \"1.3.6.1.2.1.31.1.1.1\";\n\
    \     }\n     augment \"/if-mib:IF-MIB/if-mib:ifTable/if-mib:ifEntry\" {\n   \
    \    description\n        \"An entry containing additional management information\n\
    \         applicable to a particular interface.\";\n       smiv2:oid \"1.3.6.1.2.1.31.1.1.1\"\
    ;\n       leaf ifName {\n         type snmpv2-tc:DisplayString;\n         description\n\
    \          \"The textual name of the interface.  The value of this\n         \
    \  object should be the name of the interface as assigned by\n           the local\
    \ device and should be suitable for use in commands\n           entered at the\
    \ device's `console'.  This might be a text\n           name, such as `le0' or\
    \ a simple port number, such as `1',\n           depending on the interface naming\
    \ syntax of the device.  If\n           several entries in the ifTable together\
    \ represent a single\n           interface as named by the device, then each will\
    \ have the\n           same value of ifName.  Note that for an agent which responds\n\
    \           to SNMP queries concerning an interface on some other\n          \
    \ (proxied) device, then the value of ifName for such an\n           interface\
    \ is the proxied device's local name for it.\n           If there is no local\
    \ name, or this object is otherwise not\n           applicable, then this object\
    \ contains a zero-length string.\";\n         smiv2:max-access \"read-only\";\n\
    \         smiv2:oid \"1.3.6.1.2.1.31.1.1.1.1\";\n       }\n       // ...\n   \
    \  }\n"
- title: 8.  Translation of the OBJECT-IDENTITY Macro
  contents:
  - "8.  Translation of the OBJECT-IDENTITY Macro\n   The SMIv2 uses invocations of\
    \ the OBJECT-IDENTITY macro to define\n   information about an OBJECT IDENTIFIER\
    \ assignment.  Invocations of\n   the OBJECT-IDENTITY macro MUST be translated\
    \ into YANG identity\n   statements as detailed below.\n"
- title: 8.1.  OBJECT-IDENTITY Translation Rules
  contents:
  - "8.1.  OBJECT-IDENTITY Translation Rules\n   The name of the OBJECT-IDENTITY macro\
    \ invocation is used as the name\n   of the generated identity statement.  The\
    \ generated identity\n   statement uses the smiv2:object-identity defined in Section\
    \ 10 as its\n   base.  The clauses of the SMIv2 OBJECT-IDENTITY macro are mapped\
    \ to\n   YANG statements as follows:\n   o  The SMIv2 STATUS clause is mapped\
    \ to the YANG status statement.\n      The generation of the YANG status statement\
    \ is skipped if the\n      value of the STATUS clause is current.\n   o  The SMIv2\
    \ DESCRIPTION clause is mapped to the YANG description\n      statement.\n   o\
    \  The SMIv2 REFERENCE clause is mapped to the YANG reference\n      statement.\n\
    \   o  The value of the SMIv2 OBJECT-IDENTITY macro invocation is\n      translated\
    \ into an smiv2:oid statement.  Refer to the YANG\n      extension defined in\
    \ Section 10.\n"
- title: '8.2.  Example: diffServTBParamSimpleTokenBucket of the DIFFSERV-MIB'
  contents:
  - "8.2.  Example: diffServTBParamSimpleTokenBucket of the DIFFSERV-MIB\n   The translation\
    \ of the diffServTBParamSimpleTokenBucket of the\n   DIFFSERV-MIB [RFC3289] is\
    \ shown below.  (Please note that the\n   description should refer to RFC 3290,\
    \ Section 5.1.3.)\n     identity diffServTBParamSimpleTokenBucket {\n       base\
    \ \"smiv2:object-identity\";\n       description\n        \"Two Parameter Token\
    \ Bucket Meter as described in the Informal\n         Differentiated Services\
    \ Model section 5.2.3.\";\n       smiv2:oid \"1.3.6.1.2.1.97.3.1.1\";\n     }\n"
- title: 9.  Translation of the NOTIFICATION-TYPE Macro
  contents:
  - "9.  Translation of the NOTIFICATION-TYPE Macro\n   SMIv2 provides the NOTIFICATION-TYPE\
    \ macro to define event\n   notifications.  YANG provides the notification statement\
    \ for the same\n   purpose.  Invocations of the NOTIFICATION-TYPE macro MUST be\n\
    \   translated into YANG notification statements as detailed below.\n"
- title: 9.1.  NOTIFICATION-TYPE Translation Rules
  contents:
  - "9.1.  NOTIFICATION-TYPE Translation Rules\n   The name of the NOTIFICATION-TYPE\
    \ macro invocation is used as the\n   name of the generated notification statement.\
    \  The clauses of the\n   NOTIFICATION-TYPE macro are mapped to YANG statements\
    \ embedded in the\n   notification statement as follows.\n   o  The SMIv2 OBJECTS\
    \ clause is mapped to a sequence of YANG\n      containers.  For each object listed\
    \ in the OBJECTS clause value, a\n      YANG container statement is generated.\
    \  The name of this container\n      is the string \"object-<n>\", where <n> is\
    \ the position of the\n      object in the value of the OBJECTS clause (first\
    \ element has\n      position 1).  If the current object belongs to a conceptual\
    \ table,\n      then a sequence of leaf statements is generated for each INDEX\n\
    \      object of the conceptual table.  These leafs are named after the\n    \
    \  INDEX objects and of type leafref.  Finally, a leaf statement is\n      generated\
    \ named after the current object.  If the current object\n      has a MAX-ACCESS\
    \ of \"read-only\", \"read-write\", or \"read-create\",\n      then the generated\
    \ leaf is of type leafref.  Otherwise, if the\n      current object has a MAX-ACCESS\
    \ of \"accessible-for-notify\", then a\n      leaf is generated, following the\
    \ steps in Section 7.1.\n   o  The SMIv2 STATUS clause is mapped to the YANG status\
    \ statement.\n      The generation of the YANG status statement is skipped if\
    \ the\n      value of the STATUS clause is current.\n   o  The SMIv2 DESCRIPTION\
    \ clause is mapped to the YANG description\n      statement.\n   o  The SMIv2\
    \ REFERENCE clause is mapped to the YANG reference\n      statement.\n   o  The\
    \ value of the SMIv2 NOTIFICATION-TYPE macro invocation is\n      translated into\
    \ an smiv2:oid statement.  Refer to the YANG\n      extension defined in Section\
    \ 10.\n"
- title: '9.2.  Example: linkDown NOTIFICATION-TYPE of IF-MIB'
  contents:
  - "9.2.  Example: linkDown NOTIFICATION-TYPE of IF-MIB\n   The translation of the\
    \ linkDown notification of the IF-MIB [RFC2863]\n   is shown below.\n     notification\
    \ linkDown {\n       description\n        \"A linkDown trap signifies that the\
    \ SNMP entity, acting in\n         an agent role, has detected that the ifOperStatus\
    \ object for\n         one of its communication links is about to enter the down\n\
    \         state from some other state (but not from the notPresent\n         state).\
    \  This other state is indicated by the included value\n         of ifOperStatus.\"\
    ;\n       smiv2:oid \"1.3.6.1.6.3.1.1.5.3\";\n       container object-1 {\n  \
    \       leaf ifIndex {\n           type leafref {\n             path \"/if-mib:IF-MIB/if-mib:ifTable\"\
    \ +\n                  \"/if-mib:ifEntry/if-mib:ifIndex\";\n           }\n   \
    \      }\n       }\n       container object-2 {\n         leaf ifIndex {\n   \
    \        type leafref {\n             path \"/if-mib:IF-MIB/if-mib:ifTable\" +\n\
    \                  \"/if-mib:ifEntry/if-mib:ifIndex\";\n           }\n       \
    \  }\n         leaf ifAdminStatus {\n           type leafref {\n             path\
    \ \"/if-mib:IF-MIB/if-mib:ifTable\" +\n                  \"/if-mib:ifEntry/if-mib:ifAdminStatus\"\
    ;\n           }\n         }\n       }\n       container object-3 {\n         leaf\
    \ ifIndex {\n           type leafref {\n             path \"/if-mib:IF-MIB/if-mib:ifTable\"\
    \ +\n                  \"/if-mib:ifEntry/if-mib:ifIndex\";\n           }\n   \
    \      }\n         leaf ifOperStatus {\n           type leafref {\n          \
    \   path \"/if-mib:IF-MIB/if-mib:ifTable\" +\n                  \"/if-mib:ifEntry/if-mib:ifOperStatus\"\
    ;\n           }\n         }\n       }\n     }\n"
- title: 10.  YANG Language Extension Definition
  contents:
  - "10.  YANG Language Extension Definition\n   This section defines some YANG extension\
    \ statements that can be used\n   to capture some information present in SMIv2\
    \ modules that is not\n   translated into core YANG statements.  The YANG module\
    \ references\n   [RFC2578] and [RFC2579].\n   <CODE BEGINS> file \"ietf-yang-smiv2@2012-06-22.yang\"\
    \n module ietf-yang-smiv2 {\n   namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-smiv2\"\
    ;\n   prefix \"smiv2\";\n   organization\n    \"IETF NETMOD (NETCONF Data Modeling\
    \ Language) Working Group\";\n   contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n\
    \     WG List:  <mailto:netmod@ietf.org>\n     WG Chair: David Kessens\n     \
    \          <mailto:david.kessens@nsn.com>\n     WG Chair: Juergen Schoenwaelder\n\
    \               <mailto:j.schoenwaelder@jacobs-university.de>\n     Editor:  \
    \ Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\"\
    ;\n   description\n    \"This module defines YANG extensions that are used to\
    \ translate\n     SMIv2 concepts into YANG.\n     Copyright (c) 2012 IETF Trust\
    \ and the persons identified as\n     authors of the code.  All rights reserved.\n\
    \     Redistribution and use in source and binary forms, with or\n     without\
    \ modification, is permitted pursuant to, and subject\n     to the license terms\
    \ contained in, the Simplified BSD License\n     set forth in Section 4.c of the\
    \ IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\
    \     This version of this YANG module is part of RFC 6643; see\n     the RFC\
    \ itself for full legal notices.\";\n   revision 2012-06-22 {\n     description\n\
    \      \"Initial revision.\";\n     reference\n      \"RFC 6643: Translation of\
    \ Structure of Management Information\n       Version 2 (SMIv2) MIB Modules to\
    \ YANG Modules\";\n   }\n   identity object-identity {\n     description\n   \
    \   \"Base identity for all SMIv2 OBJECT-IDENTITYs.\";\n   }\n   typedef opaque\
    \ {\n     type binary;\n     description\n      \"The Opaque type supports the\
    \ capability to pass arbitrary ASN.1\n       syntax.  A value is encoded using\
    \ the ASN.1 Basic Encoding Rules\n       into a string of octets.  This, in turn,\
    \ is encoded as an OCTET\n       STRING, in effect 'double-wrapping' the original\
    \ ASN.1 value.\n       In the value set and its semantics, this type is equivalent\
    \ to\n       the Opaque type of the SMIv2.  This type exists in the SMIv2\n  \
    \     solely for backward-compatibility reasons and this is also\n       true\
    \ for this YANG data type.\";\n     reference\n      \"RFC 2578: Structure of\
    \ Management Information Version 2 (SMIv2)\";\n   }\n   extension display-hint\
    \ {\n     argument \"format\";\n     description\n      \"The display-hint statement\
    \ takes as an argument the DISPLAY-HINT\n       assigned to an SMIv2 textual convention.\"\
    ;\n     reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n   }\n\
    \   extension max-access {\n     argument \"access\";\n     description\n    \
    \  \"The max-access statement takes as an argument the MAX-ACCESS\n       assigned\
    \ to an SMIv2 object definition.\n       The MAX-ACCESS value is SMIv2 specific\
    \ and has no impact on\n       the access provided to YANG objects through protocols\
    \ such\n       as NETCONF.\";\n     reference\n      \"RFC 2578: Structure of\
    \ Management Information Version 2 (SMIv2)\";\n   }\n   extension defval {\n \
    \    argument \"value\";\n     description\n      \"The defval statement takes\
    \ as an argument a default value\n       defined by an SMIv2 DEFVAL clause.  Note\
    \ that the value is in\n       the SMIv2 value space defined by the SMIv2 syntax\
    \ of the\n       corresponding object and not in the YANG value space\n      \
    \ defined by the corresponding YANG data type.\";\n     reference\n      \"RFC\
    \ 2578: Structure of Management Information Version 2 (SMIv2)\";\n   }\n   extension\
    \ implied {\n     argument \"index\";\n     description\n      \"If an SMIv2 INDEX\
    \ object is preceded by the IMPLIED keyword, then\n       the implied statement\
    \ is present in the YANG module and takes as\n       an argument the name of the\
    \ IMPLIED index object.\";\n     reference\n      \"RFC 2578: Structure of Management\
    \ Information Version 2 (SMIv2)\";\n    }\n   extension alias {\n     argument\
    \ \"descriptor\";\n     description\n      \"The alias statement introduces an\
    \ SMIv2 descriptor.  The body of\n       the alias statement is expected to contain\
    \ an oid statement that\n       provides the numeric OID associated with the descriptor.\"\
    ;\n     reference\n      \"RFC 2578: Structure of Management Information Version\
    \ 2 (SMIv2)\";\n   }\n   extension oid {\n     argument \"value\";\n     description\n\
    \      \"The oid statement takes as an argument the object identifier\n      \
    \ assigned to an SMIv2 definition.  The object identifier value\n       is written\
    \ in decimal dotted notation.\";\n     reference\n      \"RFC 2578: Structure\
    \ of Management Information Version 2 (SMIv2)\";\n   }\n   extension subid {\n\
    \     argument \"value\";\n     description\n      \"The subid statement takes\
    \ as an argument the last sub-identifier\n       of the object identifier assigned\
    \ to an SMIv2 definition.  The\n       sub-identifier value is a single positive\
    \ decimal natural number.\n       The subid statement may not be used as a substatement\
    \ to any\n       top-level node in a YANG document.  The subid substatement may\n\
    \       be used only as a substatement to a node having a parent node\n      \
    \ defined with either an smiv2:oid or smiv2:subid substatement.\";\n     reference\n\
    \      \"RFC 2578: Structure of Management Information Version 2 (SMIv2)\";\n\
    \   }\n }\n   <CODE ENDS>\n"
- title: 11.  Implementing Configuration Data Nodes
  contents:
  - "11.  Implementing Configuration Data Nodes\n   The result of the translation\
    \ of SMIv2 MIB modules into YANG modules,\n   even if SMIv2 objects are read-write\
    \ or read-create, consists of\n   read-only (config false) YANG objects.  One\
    \ reason is that the\n   persistency models of the underlying protocols, SNMP\
    \ and NETCONF, are\n   quite different.  With SNMP, the persistency of a writable\
    \ object\n   depends either on the object definition itself (i.e., the text in\
    \ the\n   DESCRIPTION clause) or the persistency properties of the conceptual\n\
    \   row it is part of, sometimes controlled via a columnar object using\n   the\
    \ StorageType textual convention.  With NETCONF, the persistency of\n   configuration\
    \ objects is determined by the properties of the\n   underlying datastore.  Furthermore,\
    \ NETCONF as defined in [RFC6241]\n   does not provide a standard operation to\
    \ modify operational state.\n   The <edit-config> and <copy-config> operations\
    \ only manipulate\n   configuration data.  As a consequence of these considerations,\
    \ it is\n   not possible to generate YANG configuration data nodes from SMIv2\n\
    \   definitions in an automated way.\n   However, for selected SMIv2 objects where\
    \ the SNMP and NETCONF\n   persistency semantics are consistent, implementations\
    \ may choose to\n   implement some YANG data nodes generated from SMIv2 definitions\
    \ as\n   configuration data nodes.  Such a deviation from the generated read-\n\
    \   only YANG module should be formally documented in the form of a\n   separate\
    \ YANG module that uses YANG deviation statements to change\n   the config property\
    \ of the data nodes implemented as configuration\n   data nodes from false to\
    \ true.  Deviations that change the config\n   false property to true without\
    \ any other changes to the semantics of\n   the data node do not affect the compliance\
    \ with the YANG module\n   generated from an SMIv2 module.\n"
- title: '11.1.  Example: addressMapControlTable of RMON2-MIB'
  contents:
  - "11.1.  Example: addressMapControlTable of RMON2-MIB\n   The following example\
    \ demonstrates how certain columnar objects of\n   the addressMapControlTable\
    \ of the RMON2-MIB [RFC4502] can be turned\n   into YANG configuration data nodes.\
    \  Note that YANG deviations affect\n   the property of the target node only and\
    \ are not inherited downwards.\n     module acme-RMON2-MIB-deviations {\n    \
    \   namespace \"http://acme.example.com/RMON2-MIB-deviations\";\n       prefix\
    \ \"acme-rmon2-devs\";\n       import RMON2-MIB {\n         prefix \"rmon2-mib\"\
    ;\n         revision-date 2006-05-02;\n       }\n       revision 2012-01-11 {\n\
    \         description\n           \"First version.\";\n       }\n       deviation\
    \ \"/rmon2-mib:RMON2-MIB\" {\n         deviate replace {\n           config true;\n\
    \         }\n       }\n       deviation \"/rmon2-mib:RMON2-MIB/\"\n          \
    \     + \"rmon2-mib:addressMapControlTable\" {\n         deviate replace {\n \
    \          config true;\n         }\n       }\n       deviation \"/rmon2-mib:RMON2-MIB/\"\
    \n               + \"rmon2-mib:addressMapControlTable/\"\n               + \"\
    rmon2-mib:addressMapControlEntry\" {\n         deviate replace {\n           config\
    \ true;\n         }\n       }\n       deviation \"/rmon2-mib:RMON2-MIB/\"\n  \
    \             + \"rmon2-mib:addressMapControlTable/\"\n               + \"rmon2-mib:addressMapControlEntry/\"\
    \n               + \"rmon2-mib:addressMapControlIndex\" {\n         deviate replace\
    \ {\n           config true;\n         }\n       }\n       deviation \"/rmon2-mib:RMON2-MIB/\"\
    \n               + \"rmon2-mib:addressMapControlTable/\"\n               + \"\
    rmon2-mib:addressMapControlEntry/\"\n               + \"rmon2-mib:addressMapControlDataSource\"\
    \ {\n         deviate replace {\n           config true;\n         }\n       }\n\
    \       deviation \"/rmon2-mib:RMON2-MIB/\"\n               + \"rmon2-mib:addressMapControlTable/\"\
    \n               + \"rmon2-mib:addressMapControlEntry/\"\n               + \"\
    rmon2-mib:addressMapControlOwner\" {\n         deviate replace {\n           config\
    \ true;\n         }\n       }\n     }\n   A NETCONF server that implements the\
    \ RMON2-MIB module with these\n   deviations would advertise the following capabilities\
    \ in its <hello>\n   message (where whitespace has been added for readability):\n\
    \     <capability>\n       urn:ietf:params:xml:ns:yang:smiv2:RMON2-MIB?\n    \
    \     module=RMON2-MIB&amp;\n         revision=2006-05-02&amp;\n         deviations=acme-RMON2-MIB-deviations\n\
    \     </capability>\n     <capability>\n       http://acme.example.com/RMON2-MIB-deviations?\n\
    \         module=acme-RMON2-MIB-deviations&amp;\n         revision=2012-01-11\n\
    \     </capability>\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document registers two URIs in the IETF XML\
    \ registry [RFC3688].\n   Following the format in RFC 3688, the following registrations\
    \ have\n   been made.\n     URI: urn:ietf:params:xml:ns:yang:ietf-yang-smiv2\n\
    \     Registrant Contact: The NETMOD WG of the IETF.\n     XML: N/A, the requested\
    \ URI is an XML namespace.\n     URI: urn:ietf:params:xml:ns:yang:smiv2\n    \
    \ Registrant Contact: The NETMOD WG of the IETF.\n     XML: N/A, the requested\
    \ URI is an XML namespace.\n   This document registers a YANG module in the YANG\
    \ Module Names\n   registry [RFC6020].\n     Name:         ietf-yang-smiv2\n \
    \    Namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-smiv2\n     Prefix: \
    \      smiv2\n     Reference:    RFC 6643\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   This document defines a translation of SMIv2\
    \ MIB modules into YANG\n   modules, enabling read-only (config false) access\
    \ to data objects\n   defined in SMIv2 MIB modules via NETCONF.  The translation\
    \ itself has\n   no security impact on the Internet.\n   Users of YANG data models\
    \ generated from SMIv2 data models that have\n   been published in the RFC series\
    \ are advised to consult the security\n   considerations of the respective RFCs.\
    \  The security considerations\n   of RFCs containing SMIv2 data models explain\
    \ which objects are\n   sensitive and important to protect.  NETCONF users are\
    \ encouraged to\n   make use of the NETCONF access control model [RFC6536], which\
    \ allows\n   the specification of access control rules to protect potentially\n\
    \   sensitive information.\n"
- title: 14.  Acknowledgements
  contents:
  - "14.  Acknowledgements\n   The author wishes to thank the following individuals\
    \ for providing\n   helpful comments on various draft versions of this document:\
    \ Andy\n   Bierman, Benoit Claise, Martin Bjorklund, Leif Johansson, David Reid,\n\
    \   Dan Romascanu, and David Spakes.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2578]  McCloghrie, K., Ed., Perkins, D., Ed., and J.\n       \
    \       Schoenwaelder, Ed., \"Structure of Management Information\n          \
    \    Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [RFC2579]  McCloghrie,\
    \ K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder, Ed., \"Textual\
    \ Conventions for SMIv2\",\n              STD 58, RFC 2579, April 1999.\n   [RFC2580]\
    \  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n              \"Conformance\
    \ Statements for SMIv2\", STD 58, RFC 2580,\n              April 1999.\n   [RFC6020]\
    \  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the\
    \ Network Configuration Protocol (NETCONF)\", RFC 6020,\n              October\
    \ 2010.\n   [RFC6021]  Schoenwaelder, J., \"Common YANG Data Types\", RFC 6021,\n\
    \              October 2010.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [RFC2863]  McCloghrie, K. and F. Kastenholz,\
    \ \"The Interfaces Group\n              MIB\", RFC 2863, June 2000.\n   [RFC3289]\
    \  Baker, F., Chan, K., and A. Smith, \"Management Information\n             \
    \ Base for the Differentiated Services Architecture\",\n              RFC 3289,\
    \ May 2002.\n   [RFC3584]  Frye, R., Levi, D., Routhier, S., and B. Wijnen,\n\
    \              \"Coexistence between Version 1, Version 2, and Version 3\n   \
    \           of the Internet-standard Network Management Framework\",\n       \
    \       RFC 3584, August 2003.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n              January 2004.\n   [RFC4181]  Heard, C., \"\
    Guidelines for Authors and Reviewers of MIB\n              Documents\", BCP 111,\
    \ RFC 4181, September 2005.\n   [RFC4502]  Waldbusser, S., \"Remote Network Monitoring\
    \ Management\n              Information  Base Version 2\", RFC 4502, May 2006.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, June 2011.\n   [RFC6536]  Bierman, A., Ed. and M.\
    \ Bjorklund, Ed., \"Network\n              Configuration Protocol (NETCONF) Access\
    \ Control Model\",\n              RFC 6536, March 2012.\n"
- title: Appendix A.  Mapping of Well-Known Types (Normative)
  contents:
  - "Appendix A.  Mapping of Well-Known Types (Normative)\n   This normative appendix\
    \ describes the mapping of SMIv2 types to YANG\n   types.  The mapping is fully\
    \ consistent with Tables 1 and 2 of\n   [RFC6021].\n   SMIv2 Module: SNMPv2-SMI\n\
    \   SMIv2 Type:   INTEGER       (used as an enumeration)\n   YANG Type:    enumeration\n\
    \   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type:   INTEGER       (used as a numeric\
    \ type)\n   YANG Type:    int32\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type: \
    \  Integer32\n   YANG Type:    int32\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type:\
    \   OCTET STRING  (used as a binary string)\n   YANG Type:    binary\n   SMIv2\
    \ Module: SNMPv2-SMI\n   SMIv2 Type:   OCTET STRING  (used to hold UTF-8 or ASCII\
    \ characters)\n   YANG Type:    string\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2\
    \ Type:   OBJECT IDENTIFIER\n   YANG Module:  ietf-yang-types\n   YANG Type: \
    \   object-identifier-128\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type:   BITS\n\
    \   YANG Type:    bits\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type:   IpAddress\n\
    \   YANG Module:  ietf-inet-types\n   YANG Type:    ipv4-address\n   SMIv2 Module:\
    \ SNMPv2-SMI\n   SMIv2 Type:   Counter32\n   YANG Module:  ietf-yang-types\n \
    \  YANG Type:    counter32\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type:   Gauge32\n\
    \   YANG Module:  ietf-yang-types\n   YANG Type:    gauge32\n   SMIv2 Module:\
    \ SNMPv2-SMI\n   SMIv2 Type:   TimeTicks\n   YANG Module:  ietf-yang-types\n \
    \  YANG Type:    timeticks\n   SMIv2 Module: SNMPv2-SMI\n   SMIv2 Type:   Counter64\n\
    \   YANG Module:  ietf-yang-types\n   YANG Type:    counter64\n   SMIv2 Module:\
    \ SNMPv2-SMI\n   SMIv2 Type:   Unsigned32\n   YANG Type:    uint32\n   SMIv2 Module:\
    \ SNMPv2-SMI\n   SMIv2 Type:   Opaque\n   YANG Module:  ietf-yang-smiv2\n   YANG\
    \ Type:    opaque\n   SMIv2 Module: SNMPv2-TC\n   SMIv2 Type:   PhysAddress\n\
    \   YANG Module:  ietf-yang-types\n   YANG Type:    phys-address\n   SMIv2 Module:\
    \ SNMPv2-TC\n   SMIv2 Type:   MacAddress\n   YANG Module:  ietf-yang-types\n \
    \  YANG Type:    mac-address\n   SMIv2 Module: SNMPv2-TC\n   SMIv2 Type:   TruthValue\n\
    \   YANG Type:    boolean\n   SMIv2 Module: SNMPv2-TC\n   SMIv2 Type:   TimeStamp\n\
    \   YANG Module:  ietf-yang-types\n   YANG Type:    timestamp\n   SMIv2 Module:\
    \ RMON2-MIB\n   SMIv2 Type:   ZeroBasedCounter32\n   YANG Module:  ietf-yang-types\n\
    \   YANG Type:    zero-based-counter32\n   SMIv2 Module: HCNUM-TC\n   SMIv2 Type:\
    \   ZeroBasedCounter64\n   YANG Module:  ietf-yang-types\n   YANG Type:    zero-based-counter64\n\
    \   SMIv2 Module: HCNUM-TC\n   SMIv2 Type:   CounterBasedGauge64\n   YANG Module:\
    \  ietf-yang-types\n   YANG Type:    gauge64\n   SMIv2 Module: INET-ADDRESS-MIB\n\
    \   SMIv2 Type:   InetAutonomousSystemNumber\n   YANG Module:  ietf-inet-types\n\
    \   YANG Type:    as-number\n   SMIv2 Module: INET-ADDRESS-MIB\n   SMIv2 Type:\
    \   InetVersion\n   YANG Module:  ietf-inet-types\n   YANG Type:    ip-version\n\
    \   SMIv2 Module: INET-ADDRESS-MIB\n   SMIv2 Type:   InetPortNumber\n   YANG Module:\
    \  ietf-inet-types\n   YANG Type:    port-number\n   SMIv2 Module: DIFFSERV-DSCP-TC\n\
    \   SMIv2 Type:   Dscp\n   YANG Module:  ietf-inet-types\n   YANG Type:    dscp\n\
    \   SMIv2 Module: IPV6-FLOW-LABEL-MIB\n   SMIv2 Type:   IPv6FlowLabel\n   YANG\
    \ Module:  ietf-inet-types\n   YANG Type:    ipv6-flow-label\n   SMIv2 Module:\
    \ URI-TC-MIB\n   SMIv2 Type:   Uri\n   YANG Module:  ietf-inet-types\n   YANG\
    \ Type:    uri\n"
- title: Appendix B.  Module Prefix Generation (Informative)
  contents:
  - "Appendix B.  Module Prefix Generation (Informative)\n   This section describes\
    \ an algorithm to generate module prefixes to be\n   used in the import statements.\
    \  The input of the prefix generation\n   algorithm is a set of prefixes (usually\
    \ derived from imported module\n   names) and a specific module name to be converted\
    \ into a prefix.  The\n   algorithm described below produces a prefix for the\
    \ given module name\n   that is unique within the set of prefixes.\n         \
    \              +-----------------+--------+\n                       | YANG Module\
    \     | Prefix |\n                       +-----------------+--------+\n      \
    \                 | ietf-yang-types | yang   |\n                       | ietf-inet-types\
    \ | inet   |\n                       | ietf-yang-smiv2 | smiv2  |\n          \
    \             +-----------------+--------+\n           Table 1: Special Prefixes\
    \ For Well-Known YANG Modules\n   o  First, some predefined translations mapping\
    \ well-known YANG\n      modules to short prefixes are tried (see Table 1).  If\
    \ a fixed\n      translation rule exists and leads to a conflict-free prefix,\
    \ then\n      the fixed translation is used.\n   o  Otherwise, prefixes are generated\
    \ by tokenizing a YANG module\n      name, using hyphens as token separators.\
    \  The tokens derived from\n      the module name are converted to lowercase characters.\
    \  The prefix\n      then becomes the shortest sequence of tokens concatenated\
    \ using\n      hyphens as separators, which includes at least two tokens and\n\
    \      which is unique among all prefixes used in the YANG module.\n   In the\
    \ worst case, the prefix derived from an SMIv2 module name\n   becomes the SMIv2\
    \ module name translated to lowercase.  But on\n   average, much shorter prefixes\
    \ are generated.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Juergen Schoenwaelder\n   Jacobs University\n   EMail: j.schoenwaelder@jacobs-university.de\n"
