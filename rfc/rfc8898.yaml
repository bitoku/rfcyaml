- title: __initial_text__
  contents:
  - "  Third-Party Token-Based Authentication and Authorization for Session\n    \
    \                   Initiation Protocol (SIP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the \"Bearer\" authentication scheme for the\n\
    \   Session Initiation Protocol (SIP) and a mechanism by which user\n   authentication\
    \ and SIP registration authorization is delegated to a\n   third party, using\
    \ the OAuth 2.0 framework and OpenID Connect Core\n   1.0.  This document updates\
    \ RFC 3261 to provide guidance on how a SIP\n   User Agent Client (UAC) responds\
    \ to a SIP 401/407 response that\n   contains multiple WWW-Authenticate/Proxy-Authenticate\
    \ header fields.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8898.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n     1.2.  Applicability\n\
    \     1.3.  Token Types and Formats\n     1.4.  Example Flows\n       1.4.1. \
    \ Registration\n       1.4.2.  Registration with Preconfigured AS\n   2.  SIP\
    \ Procedures\n     2.1.  UAC Behavior\n       2.1.1.  Obtaining Tokens and Responding\
    \ to Challenges\n       2.1.2.  Protecting the Access Token\n       2.1.3.  REGISTER\
    \ Request\n       2.1.4.  Non-REGISTER Request\n     2.2.  User Agent Server (UAS)\
    \ and Registrar Behavior\n     2.3.  Proxy Behavior\n   3.  Access Token Claims\n\
    \   4.  WWW-Authenticate Response Header Field\n   5.  Security Considerations\n\
    \   6.  IANA Considerations\n     6.1.  New Proxy-Authenticate Header Field Parameters\n\
    \     6.2.  New WWW-Authenticate Header Field Parameters\n   7.  Normative References\n\
    \   8.  Informative References\n   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [RFC3261] uses the\
    \ same\n   framework as HTTP [RFC7230] to authenticate users: a simple\n   challenge-response\
    \ authentication mechanism that allows a SIP User\n   Agent Server (UAS), proxy,\
    \ or registrar to challenge a SIP User Agent\n   Client (UAC) request and allows\
    \ the UAC to provide authentication\n   information in response to that challenge.\n\
    \   OAuth 2.0 [RFC6749] defines a token-based authorization framework to\n   allow\
    \ an OAuth client to access resources on behalf of its user.\n   The OpenID Connect\
    \ Core 1.0 specification [OPENID] defines a simple\n   identity layer on top of\
    \ the OAuth 2.0 protocol, which enables OAuth/\n   OpenID clients to verify the\
    \ identity of the user based on the\n   authentication performed by a dedicated\
    \ authorization server (AS),\n   referred to as OpenID Provider (OP), as well\
    \ as to obtain basic\n   profile information about the user.\n   This document\
    \ defines the \"Bearer\" authentication scheme for SIP and\n   a mechanism by\
    \ which user authentication and SIP registration\n   authorization is delegated\
    \ to a third party, using the OAuth 2.0\n   framework and OpenID Connect Core\
    \ 1.0.  This kind of user\n   authentication enables single sign-on, which allows\
    \ the user to\n   authenticate once and gain access to both SIP and non-SIP services.\n\
    \   This document also updates [RFC3261] by defining the UAC procedures\n   when\
    \ a UAC receives a 401/407 response with multiple WWW-\n   Authenticate/Proxy-Authenticate\
    \ header fields, providing challenges\n   using different authentication schemes\
    \ for the same realm.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  Applicability
  contents:
  - "1.2.  Applicability\n   This document covers cases where grants that allow the\
    \ UAC to obtain\n   an access token from the AS are used.  Cases where the UAC\
    \ is not\n   able to obtain an access token (e.g., in the case of an authorization\n\
    \   code grant) are not covered.\n"
- title: 1.3.  Token Types and Formats
  contents:
  - "1.3.  Token Types and Formats\n   The tokens used in third-party authorization\
    \ depend on the type of\n   AS.\n   An OAuth AS provides the following tokens\
    \ to a successfully\n   authorized UAC:\n   Access Token:\n      The UAC will\
    \ use this token to gain access to services by\n      providing the token to a\
    \ SIP server.\n   Refresh Token:\n      The UAC will present this token to the\
    \ AS to refresh a stale\n      access token.\n   An OP returns an additional token:\n\
    \   ID Token:\n      This token contains a SIP URI associated with the user and\
    \ other\n      user-specific details that will be consumed by the UAC.\n   Tokens\
    \ can be represented in two different formats:\n   Structured Token:\n      A\
    \ token that consists of a structured object that contains the\n      claims associated\
    \ with the token, e.g., JSON Web Token (JWT), as\n      defined in [RFC7519].\n\
    \   Reference Token:\n      A token that consists of an opaque string that is\
    \ used to obtain\n      the details of the token and its associated claims, as\
    \ defined in\n      [RFC6749].\n   Access tokens are represented in one of the\
    \ above two formats.\n   Refresh tokens usually are represented in a reference\
    \ format, as this\n   token is consumed only by the AS that issued the token.\
    \  The ID token\n   is defined as a structured token in the form of a JWT.\n"
- title: 1.4.  Example Flows
  contents:
  - '1.4.  Example Flows

    '
- title: 1.4.1.  Registration
  contents:
  - "1.4.1.  Registration\n   Figure 1 below shows an example of a SIP registration\
    \ where the\n   registrar informs the UAC about the AS from which the UAC can\
    \ obtain\n   an access token.\n     UAC                         Registrar    \
    \                     AS/OP\n     | [1] REGISTER                  |          \
    \                     |\n     | [2] 401 Unauthorized          |              \
    \                 |\n     |     WWW-Authenticate: Bearer \"authz_server\"=\"<authz_server>\"\
    \  |\n     | [3] The UAC interacts with the AS and obtains tokens using    |\n\
    \     |     some out-of-scope mechanism.                              |\n    \
    \ | [4] REGISTER                  |                               |\n     |  \
    \   Authorization: Bearer <access_token>                      |\n     | [7] 200\
    \ OK                    |                               |\n                  \
    \  Figure 1: Example Registration Flow\n   In step [1], the UAC starts the registration\
    \ process by sending a SIP\n   REGISTER request to the registrar without any credentials.\n\
    \   In step [2], the registrar challenges the UA by sending a SIP 401\n   (Unauthorized)\
    \ response to the REGISTER request.  In the response,\n   the registrar includes\
    \ information about the AS to contact in order\n   to obtain a token.\n   In step\
    \ [3], the UAC interacts with the AS via an out-of-scope\n   mechanism, potentially\
    \ using the OAuth Native App mechanism defined\n   in [RFC8252].  The AS authenticates\
    \ the user and provides the UAC\n   with the tokens needed to access the SIP service.\n\
    \   In step [4], the UAC retries the registration process by sending a\n   new\
    \ REGISTER request that includes the access token that the UAC\n   obtained in\
    \ the step above.\n   The registrar validates the access token.  If the access\
    \ token is a\n   reference token, the registrar MAY perform an introspection\n\
    \   [RFC7662], as in steps [5] and [6], in order to obtain more\n   information\
    \ about the access token and its scope, per [RFC7662].\n   Otherwise, after the\
    \ registrar validates the token, it inspects its\n   claims and acts upon it.\n\
    \   In step [7], once the registrar has successfully verified and\n   accepted\
    \ the access token, it sends a 200 (OK) response to the\n   REGISTER request.\n"
- title: 1.4.2.  Registration with Preconfigured AS
  contents:
  - "1.4.2.  Registration with Preconfigured AS\n   Figure 2 shows an example of a\
    \ SIP registration where the UAC has\n   been preconfigured with information about\
    \ the AS from which to obtain\n   the access token.\n     UAC                \
    \         Registrar                         AS/OP\n     | [1] The UAC interacts\
    \ with the AS and obtains tokens using    |\n     |     some out-of-scope mechanism.\
    \                              |\n     | [2] REGISTER                  |     \
    \                          |\n     |     Authorization: Bearer <access_token>\
    \                      |\n     | [5] 200 OK                    |             \
    \                  |\n     Figure 2: Example Registration Flow - AS Information\
    \ Preconfigured\n   In step [1], the UAC interacts with the AS using an out-of-scope\n\
    \   mechanism, potentially using the OAuth Native App mechanism defined\n   in\
    \ [RFC8252].  The AS authenticates the user and provides the UAC\n   with the\
    \ tokens needed to access the SIP service.\n   In step [2], the UAC initiates\
    \ the registration process by sending a\n   new REGISTER request that includes\
    \ the access token that the UAC\n   obtained in the step above.\n   The registrar\
    \ validates the access token.  If the access token is a\n   reference token, the\
    \ registrar MAY perform an introspection\n   [RFC7662], as in steps [4] and [5],\
    \ in order to obtain more\n   information about the access token and its scope,\
    \ per [RFC7662].\n   Otherwise, after the registrar validates the token, it inspects\
    \ its\n   claims and acts upon it.\n   In step [5], once the registrar has successfully\
    \ verified and\n   accepted the access token, it sends a 200 (OK) response to\
    \ the\n   REGISTER request.\n"
- title: 2.  SIP Procedures
  contents:
  - "2.  SIP Procedures\n   Section 22 of [RFC3261] defines the SIP procedures for\
    \ the Digest\n   authentication mechanism.  The same procedures apply to the \"\
    Bearer\"\n   authentication mechanism, with the changes described in this section.\n"
- title: 2.1.  UAC Behavior
  contents:
  - '2.1.  UAC Behavior

    '
- title: 2.1.1.  Obtaining Tokens and Responding to Challenges
  contents:
  - "2.1.1.  Obtaining Tokens and Responding to Challenges\n   When a UAC sends a\
    \ request without credentials (or with invalid\n   credentials), it could receive\
    \ either a 401 (Unauthorized) response\n   with a WWW-Authenticate header field\
    \ or a 407 (Proxy Authentication\n   Required) response with a Proxy-Authenticate\
    \ header field.  If the\n   WWW-Authenticate or Proxy-Authenticate header field\
    \ indicates\n   \"Bearer\" scheme authentication and contains an address to an\
    \ AS, the\n   UAC contacts the AS in order to obtain tokens and includes the\n\
    \   requested scopes, based on a local configuration (Figure 1).  The UAC\n  \
    \ MUST check the AS URL received in the 401/407 response against a list\n   of\
    \ trusted ASs configured on the UAC in order to prevent several\n   classes of\
    \ possible vulnerabilities when a client blindly attempts to\n   use any provided\
    \ AS.\n   The detailed OAuth2 procedure to authenticate the user and obtain\n\
    \   these tokens is out of scope of this document.  The address of the AS\n  \
    \ might already be known to the UAC via configuration.  In such cases,\n   the\
    \ UAC can contact the AS for tokens before it sends a SIP request\n   (Figure\
    \ 2).  Procedures for native applications are defined in\n   [RFC8252].  When\
    \ using the mechanism defined in [RFC8252], the user\n   of the UAC will be directed\
    \ to interact with the AS using a web\n   browser, which allows the AS to prompt\
    \ the user for multi-factor\n   authentication, to redirect the user to third-party\
    \ identity\n   providers, and to enable the use of single sign-on sessions.\n\
    \   The tokens returned to the UAC depend on the type of AS; an OAuth AS\n   provides\
    \ an access token and, optionally, a refresh token [RFC6749].\n   The refresh\
    \ token is only used between the UAC and the AS.  If the AS\n   provides a refresh\
    \ token to the UAC, the UAC uses it to request a new\n   access token from the\
    \ AS before the currently used access token\n   expires ([RFC6749], Section 1.5).\
    \  If the AS does not provide a\n   refresh token, the UAC needs to reauthenticate\
    \ the user in order to\n   get a new access token before the currently used access\
    \ token\n   expires.  An OP returns an additional ID token that contains claims\n\
    \   about the authentication of the user by an authorization server.  The\n  \
    \ ID token can potentially include other optional claims about the\n   user, e.g.,\
    \ the SIP URI, that will be consumed by the UAC and later\n   used to register\
    \ with the registrar.\n   If the UAC receives a 401/407 response with multiple\
    \ WWW-\n   Authenticate/Proxy-Authenticate header fields, providing challenges\n\
    \   using different authentication schemes for the same realm, the UAC\n   provides\
    \ credentials for one of the schemes that it supports, based\n   on local policy.\n\
    \      |  NOTE: At the time of writing, detailed procedures for the cases\n  \
    \    |  where a UAC receives multiple different authentication schemes\n     \
    \ |  had not been defined.  A future specification might define such\n      |\
    \  procedures.\n      |  NOTE: The address of the AS might be known to the UAC,\
    \ e.g.,\n      |  using means of configuration, in which case the UAC can contact\n\
    \      |  the AS in order to obtain the access token before it sends SIP\n   \
    \   |  request without credentials.\n"
- title: 2.1.2.  Protecting the Access Token
  contents:
  - "2.1.2.  Protecting the Access Token\n   [RFC6749] mandates that access tokens\
    \ are protected with TLS when in\n   transit.  However, SIP makes use of intermediary\
    \ SIP proxies, and TLS\n   only guarantees hop-to-hop protection when used to\
    \ protect SIP\n   signaling.  Therefore, the access token MUST be protected in\
    \ a way so\n   that only authorized SIP servers will have access to it.  SIP\n\
    \   endpoints that support this document MUST use encrypted JWTs\n   [RFC7519]\
    \ for encoding and protecting access tokens when they are\n   included in SIP\
    \ requests, unless some other mechanism is used to\n   guarantee that only authorized\
    \ SIP endpoints have access to the\n   access token.  TLS can still be used for\
    \ protecting traffic between\n   SIP endpoints and the AS, as defined in [RFC6749].\n"
- title: 2.1.3.  REGISTER Request
  contents:
  - "2.1.3.  REGISTER Request\n   The procedures in this section apply when the UAC\
    \ has received a\n   challenge that contains a \"Bearer\" scheme and the UAC has\
    \ obtained a\n   token, as specified in Section 2.1.1.\n   The UAC sends a REGISTER\
    \ request with an Authorization header field\n   containing the response to the\
    \ challenge, including the \"Bearer\"\n   scheme carrying a valid access token\
    \ in the request, as specified in\n   [RFC6750].\n   Note that if there were multiple\
    \ challenges with different schemes,\n   then the UAC may be able to successfully\
    \ retry the request using\n   non-\"Bearer\" credentials.\n   Typically, a UAC\
    \ will obtain a new access token for each new binding.\n   However, based on local\
    \ policy, a UAC MAY include an access token\n   that has been used for another\
    \ binding associated with the same\n   Address Of Record (AOR) in the request.\n\
    \   If the access token included in a REGISTER request is not accepted\n   and\
    \ the UAC receives a 401 response or a 407 response, the UAC\n   follows the procedures\
    \ in Section 2.1.1.\n"
- title: 2.1.4.  Non-REGISTER Request
  contents:
  - "2.1.4.  Non-REGISTER Request\n   The procedures in this section apply when the\
    \ UAC has received a\n   challenge that contains a \"Bearer\" scheme and the UAC\
    \ has obtained a\n   token, as specified in Section 2.1.1.\n   When the UAC sends\
    \ a request, it MUST include an Authorization header\n   field with a \"Bearer\"\
    \ scheme carrying a valid access token obtained\n   from the AS indicated in the\
    \ challenge in the request, as specified\n   in [RFC6750].  Based on local policy,\
    \ the UAC MAY include an access\n   token that has been used for another dialog,\
    \ or for another stand-\n   alone request, if the target of the new request is\
    \ the same.\n   If the access token included in a request is not accepted and\
    \ the UAC\n   receives a 401 response or a 407 response, the UAC follows the\n\
    \   procedures in Section 2.1.1.\n"
- title: 2.2.  User Agent Server (UAS) and Registrar Behavior
  contents:
  - "2.2.  User Agent Server (UAS) and Registrar Behavior\n   When a UAS or registrar\
    \ receives a request that fails to contain\n   authorization credentials acceptable\
    \ to it, the UAS/registrar SHOULD\n   challenge the request by sending a 401 (Unauthorized)\
    \ response.  If\n   the UAS/registrar chooses to challenge the request and is\
    \ willing to\n   accept an access token as a credential, it MUST include a WWW-\n\
    \   Authenticate header field in the response that indicates a \"Bearer\"\n  \
    \ scheme and includes an AS address, encoded as an https URI [RFC7230],\n   from\
    \ which the UAC can obtain an access token.\n   When a UAS or registrar receives\
    \ a SIP request that contains an\n   Authorization header field with an access\
    \ token, the UAS/registrar\n   MUST validate the access token using the procedures\
    \ associated with\n   the type of access token (structured or reference) used,\
    \ e.g.,\n   [RFC7519].  If the token provided is an expired access token, then\n\
    \   the UAS/registrar MUST reply with a 401 (Unauthorized) response, as\n   defined\
    \ in Section 3 of [RFC6750].  If the validation is successful,\n   the UAS/registrar\
    \ can continue to process the request using normal\n   SIP procedures.  If the\
    \ validation fails, the UAS/registrar MUST\n   reply with a 401 (Unauthorized)\
    \ response.\n"
- title: 2.3.  Proxy Behavior
  contents:
  - "2.3.  Proxy Behavior\n   When a proxy receives a request that fails to contain\
    \ authorization\n   credentials acceptable to it, it SHOULD challenge the request\
    \ by\n   sending a 407 (Proxy Authentication Required) response.  If the proxy\n\
    \   chooses to challenge the request and is willing to accept an access\n   token\
    \ as a credential, it MUST include a Proxy-Authenticate header\n   field in the\
    \ response that indicates a \"Bearer\" scheme and includes\n   an AS address,\
    \ encoded as an https URI [RFC7230], from which the UAC\n   can obtain an access\
    \ token.\n   When a proxy wishes to authenticate a received request, it MUST\n\
    \   search the request for Proxy-Authorization header fields with 'realm'\n  \
    \ parameters that match its realm.  It then MUST successfully validate\n   the\
    \ credentials from at least one Proxy-Authorization header field\n   for its realm.\
    \  When the scheme is \"Bearer\", the proxy MUST validate\n   the access token\
    \ using the procedures associated with the type of\n   access token (structured\
    \ or reference) used, e.g., [RFC7519].\n"
- title: 3.  Access Token Claims
  contents:
  - "3.  Access Token Claims\n   The type of services to which an access token grants\
    \ access can be\n   determined using different methods.  The methods used and\
    \ the access\n   provided by the token are based on local policy agreed between\
    \ the AS\n   and the registrar.\n   If an access token is encoded as a JWT, it\
    \ will contain a list of\n   claims [RFC7519], including both registered and application-specific\n\
    \   claims.  The registrar can grant access to services based on such\n   claims,\
    \ some other mechanism, or a combination of claims and some\n   other mechanism.\
    \  If an access token is a reference token, the\n   registrar will grant access\
    \ based on some other mechanism.  Examples\n   of such other mechanisms are introspection\
    \ [RFC7662] and user profile\n   lookups.\n"
- title: 4.  WWW-Authenticate Response Header Field
  contents:
  - "4.  WWW-Authenticate Response Header Field\n   This section uses ABNF [RFC5234]\
    \ to describe the syntax of the WWW-\n   Authenticate header field when used with\
    \ the \"Bearer\" scheme to\n   challenge the UAC for credentials by extending\
    \ the 'challenge'\n   parameter defined by [RFC3261].\n   challenge  =/  (\"Bearer\"\
    \ LWS bearer-cln *(COMMA bearer-cln))\n   bearer-cln = realm / scope-param / authz-server-param\
    \ / error-param /\n                auth-param\n   realm = <defined in RFC 3261>\n\
    \   scope-param = \"scope\" EQUAL DQUOTE scope DQUOTE\n   scope = <defined in\
    \ RFC 6749>\n   authz-server-param = \"authz_server\" EQUAL DQUOTE authz-server\
    \ DQUOTE\n   authz-server = https-URI\n   https-URI = <defined in RFC 7230>\n\
    \   error-param = \"error\" EQUAL DQUOTE error DQUOTE\n   error = <defined in\
    \ RFC 6749>\n   auth-param = <defined in RFC 3261>\n                      Figure\
    \ 3: \"Bearer\" Scheme Syntax\n   The authz_server parameter contains the HTTPS\
    \ URI, as defined in\n   [RFC7230], of the AS.  The UAC can discover metadata\
    \ about the AS\n   using a mechanism like the one defined in [RFC8414].\n   The\
    \ realm and auth-param parameters are defined in [RFC3261].\n   Per [RFC3261],\
    \ \"the realm string alone defines the protection\n   domain\".  [RFC3261] states\
    \ that the realm string must be globally\n   unique and recommends that the realm\
    \ string contain a hostname or\n   domain name.  It also states that the realm\
    \ string should be a human-\n   readable identifier that can be rendered to the\
    \ user.\n   The scope and error parameters are defined in [RFC6749].\n   The scope\
    \ parameter can be used by the registrar/proxy to indicate to\n   the UAC the\
    \ minimum scope that must be associated with the access\n   token to be able to\
    \ get service.  As defined in [RFC6749], the value\n   of the scope parameter\
    \ is expressed as a list of space-delimited,\n   case-sensitive strings.  The\
    \ strings are defined by the AS.  The\n   values of the scope parameter are out\
    \ of scope of this document.  The\n   UAC will use the scope provided by the registrar\
    \ to contact the AS\n   and obtain a proper token with the requested scope.\n\
    \   The error parameter could be used by the registrar/proxy to indicate\n   to\
    \ the UAC the reason for the error, with possible values of\n   \"invalid_token\"\
    \ or \"invalid_scope\".\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The security considerations for OAuth are defined\
    \ in [RFC6749].  The\n   security considerations for \"Bearer\" tokens are defined\
    \ in [RFC6750].\n   The security considerations for JWTs are defined in [RFC7519].\
    \  These\n   security considerations also apply to SIP usage of access tokens,\
    \ as\n   defined in this document.\n   [RFC6749] mandates that access tokens are\
    \ protected with TLS when in\n   transit.  However, SIP makes use of intermediary\
    \ SIP proxies, and TLS\n   only guarantees hop-to-hop protection when used to\
    \ protect SIP\n   signaling.  Therefore, the access token MUST be protected in\
    \ a way so\n   that only authorized SIP servers will have access to it.  SIP\n\
    \   endpoints that support this document MUST use encrypted JWTs\n   [RFC7519]\
    \ for encoding and protecting access tokens when they are\n   included in SIP\
    \ requests, unless some other mechanism is used to\n   guarantee that only authorized\
    \ SIP endpoints have access to the\n   access token.  TLS can still be used for\
    \ protecting traffic between\n   SIP endpoints and the AS, as defined in [RFC6749].\n\
    \   Single Sign-On (SSO) enables the user to use one set of credentials\n   to\
    \ authenticate once and gain access to multiple SIP and non-SIP\n   services using\
    \ access token(s).  If the SSO login is compromised,\n   that single point of\
    \ compromise has a much broader effect than is the\n   case without SSO.  Further,\
    \ an attacker can often use a compromised\n   account to set up Single Sign-On\
    \ for other services that the victim\n   has not established an account with and\
    \ sometimes can even switch a\n   dedicated account into SSO mode, creating a\
    \ still broader attack.\n   Because of that, it is critical to make sure that\
    \ extra security\n   measures be taken to safeguard credentials used for Single\
    \ Sign-On.\n   Examples of such measures include a long passphrase instead of\
    \ a\n   password, enabling multi-factor authentication, and the use of the\n \
    \  native platform browser when possible, as defined in [RFC8252].\n   Although\
    \ this is out of scope for this document, it is important to\n   carefully consider\
    \ the claims provided in the tokens used to access\n   these services to make\
    \ sure of the privacy of the user accessing\n   these services.  As mentioned\
    \ above, this document calls for\n   encrypting JWTs representing the access token.\n\
    \   It is important that both parties participating in SSO provide\n   mechanisms\
    \ for users to sever the SSO relationship so that it is\n   possible without undue\
    \ difficulty to mitigate a compromise that has\n   already happened.\n   The operator\
    \ of an SSO authentication system has access to private\n   information about\
    \ sites and services that their users log into and\n   even, to some extent, their\
    \ usage patterns.  It's important to call\n   these out in privacy disclosures\
    \ and policies and to make sure that\n   users can be aware of the trade-offs\
    \ between convenience and privacy\n   when they choose to use SSO.\n   When a\
    \ registrar chooses to challenge a REGISTER request, if the\n   registrar can\
    \ provide access to different levels of services, it is\n   RECOMMENDED that the\
    \ registrar include a scope in the response in\n   order to indicate the minimum\
    \ scope needed to register and access\n   basic services.  The access token might\
    \ include an extended scope\n   that gives the user access to more advanced features\
    \ beyond basic\n   services.  In SIP, the AS administrator will typically decide\
    \ what\n   level of access is provided for a given user.\n   The UAC MUST check\
    \ the AS URL received in the 401/407 response\n   against a list of trusted ASs\
    \ configured on the UAC in order to\n   prevent several classes of possible vulnerabilities\
    \ when a client\n   blindly attempts to use any provided AS.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  New Proxy-Authenticate Header Field Parameters
  contents:
  - "6.1.  New Proxy-Authenticate Header Field Parameters\n   This section defines\
    \ new SIP header field parameters in the \"Header\n   Field Parameters and Parameter\
    \ Values\" subregistry of the \"Session\n   Initiation Protocol (SIP) Parameters\"\
    \ registry:\n   <https://www.iana.org/assignments/sip-parameters>\n          \
    \  | Parameter Name | Predefined Values | Reference |\n            | authz_server\
    \   | No                | RFC 8898  |\n            | error          | No     \
    \           | RFC 8898  |\n            | scope          | No                |\
    \ RFC 8898  |\n                Table 1: Header Field: Proxy-Authenticate\n"
- title: 6.2.  New WWW-Authenticate Header Field Parameters
  contents:
  - "6.2.  New WWW-Authenticate Header Field Parameters\n   This section defines new\
    \ SIP header field parameters in the \"Header\n   Field Parameters and Parameter\
    \ Values\" subregistry of the \"Session\n   Initiation Protocol (SIP) Parameters\"\
    \ registry:\n   <https://www.iana.org/assignments/sip-parameters>\n          \
    \  | Parameter Name | Predefined Values | Reference |\n            | authz_server\
    \   | No                | RFC 8898  |\n            | error          | No     \
    \           | RFC 8898  |\n            | scope          | No                |\
    \ RFC 8898  |\n                 Table 2: Header Field: WWW-Authenticate\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [OPENID]   Sakimura, N., Bradley, J., Jones, M.,\
    \ de Medeiros, B., and\n              C. Mortimore, \"OpenID Connect Core 1.0\"\
    , February 2014.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC5234]\
    \  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n             \
    \ Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n    \
    \          RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n       \
    \       Framework: Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750,\
    \ October 2012,\n              <https://www.rfc-editor.org/info/rfc6750>.\n  \
    \ [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n   \
    \           Protocol (HTTP/1.1): Message Syntax and Routing\",\n             \
    \ RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n   \
    \           (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015,\n             \
    \ <https://www.rfc-editor.org/info/rfc7519>.\n   [RFC7662]  Richer, J., Ed., \"\
    OAuth 2.0 Token Introspection\",\n              RFC 7662, DOI 10.17487/RFC7662,\
    \ October 2015,\n              <https://www.rfc-editor.org/info/rfc7662>.\n  \
    \ [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n       \
    \       2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n          \
    \    May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [RFC8252]  Denniss, W. and J. Bradley, \"OAuth\
    \ 2.0 for Native Apps\",\n              BCP 212, RFC 8252, DOI 10.17487/RFC8252,\
    \ October 2017,\n              <https://www.rfc-editor.org/info/rfc8252>.\n  \
    \ [RFC8414]  Jones, M., Sakimura, N., and J. Bradley, \"OAuth 2.0\n          \
    \    Authorization Server Metadata\", RFC 8414,\n              DOI 10.17487/RFC8414,\
    \ June 2018,\n              <https://www.rfc-editor.org/info/rfc8414>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to specially thank Paul Kyzivat for\
    \ his\n   multiple detailed reviews and suggested text that significantly\n  \
    \ improved the quality of the document.\n   The authors would also like to thank\
    \ the following for their review\n   and feedback on this document:\n   Olle Johansson,\
    \ Roman Shpount, Dale Worley, and Jorgen Axell.\n   The authors would also like\
    \ to thank the following for their review\n   and feedback of the original document\
    \ that was replaced with this\n   document:\n   Andrew Allen, Martin Dolly, Keith\
    \ Drage, Paul Kyzivat, Jon Peterson,\n   Michael Procter, Roy Radhika, Matt Ryan,\
    \ Ivo Sedlacek, Roman Shpount,\n   Robert Sparks, Asveren Tolga, Dale Worley,\
    \ and Yehoshua Gev.\n   Roman Danyliw, Benjamin Kaduk, Erik Kline, Barry Leiba,\
    \ Eric Vyncke,\n   and Magnus Westerlund provided feedback and suggestions for\n\
    \   improvements as part of the IESG evaluation of the document.  Special\n  \
    \ thanks to Benjamin Kaduk for his detailed and comprehensive reviews\n   and\
    \ comments.\n   The authors would also like to specially thank Jean Mahoney for\
    \ her\n   multiple reviews, editorial help, and the conversion of the XML\n  \
    \ source file from v2 to v3.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rifaat Shekh-Yusef\n   Auth0\n   Ottawa Ontario\n   Canada\n\
    \   Email: rifaat.s.ietf@gmail.com\n   Christer Holmberg\n   Ericsson\n   Hirsalantie\
    \ 11\n   FI-02420 Jorvas\n   Finland\n   Email: christer.holmberg@ericsson.com\n\
    \   Victor Pascual\n   Nokia\n   Barcelona\n"
