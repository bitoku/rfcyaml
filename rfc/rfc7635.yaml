- title: __initial_text__
  contents:
  - "          Session Traversal Utilities for NAT (STUN) Extension\n            \
    \         for Third-Party Authorization\n"
- title: Abstract
  contents:
  - "Abstract\n   This document proposes the use of OAuth 2.0 to obtain and validate\n\
    \   ephemeral tokens that can be used for Session Traversal Utilities for\n  \
    \ NAT (STUN) authentication.  The usage of ephemeral tokens ensures\n   that access\
    \ to a STUN server can be controlled even if the tokens are\n   compromised.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7635.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Solution Overview . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Usage with TURN . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   4.  Obtaining a Token Using OAuth . . . . . . . . . . . . . . .\
    \ .   7\n     4.1.  Key Establishment . . . . . . . . . . . . . . . . . . . .\
    \   8\n       4.1.1.  HTTP Interactions . . . . . . . . . . . . . . . . . .  \
    \ 8\n       4.1.2.  Manual Provisioning . . . . . . . . . . . . . . . . .  10\n\
    \   5.  Forming a Request . . . . . . . . . . . . . . . . . . . . . .  10\n  \
    \ 6.  STUN Attributes . . . . . . . . . . . . . . . . . . . . . . .  10\n    \
    \ 6.1.  THIRD-PARTY-AUTHORIZATION . . . . . . . . . . . . . . . .  10\n     6.2.\
    \  ACCESS-TOKEN  . . . . . . . . . . . . . . . . . . . . . .  11\n   7.  STUN\
    \ Server Behavior  . . . . . . . . . . . . . . . . . . . .  13\n   8.  STUN Client\
    \ Behavior  . . . . . . . . . . . . . . . . . . . .  14\n   9.  TURN Client and\
    \ Server Behavior . . . . . . . . . . . . . . .  14\n   10. Operational Considerations\
    \  . . . . . . . . . . . . . . . . .  15\n   11. Security Considerations . . .\
    \ . . . . . . . . . . . . . . . .  15\n   12. IANA Considerations . . . . . .\
    \ . . . . . . . . . . . . . . .  16\n     12.1.  Well-Known 'stun-key' URI  .\
    \ . . . . . . . . . . . . . .  16\n   13. References  . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  16\n     13.1.  Normative References . . . . . .\
    \ . . . . . . . . . . . .  16\n     13.2.  Informative References . . . . . .\
    \ . . . . . . . . . . .  17\n   Appendix A.  Sample Tickets . . . . . . . . .\
    \ . . . . . . . . . .  20\n   Appendix B.  Interaction between the Client and\
    \ Authorization\n                Server . . . . . . . . . . . . . . . . . . .\
    \ . . . .  22\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  24\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Session Traversal Utilities for NAT (STUN) [RFC5389] provides\
    \ a\n   mechanism to control access via 'long-term' username/password\n   credentials\
    \ that are provided as part of the STUN protocol.  It is\n   expected that these\
    \ credentials will be kept secret; if the\n   credentials are discovered, the\
    \ STUN server could be used by\n   unauthorized users or applications.  However,\
    \ in web applications\n   like WebRTC [WEBRTC] where JavaScript uses the browser\
    \ functionality\n   for making real-time audio and/or video calls, web conferencing,\
    \ and\n   direct data transfer, ensuring this secrecy is typically not\n   possible.\n\
    \   To address this problem and the ones described in [RFC7376], this\n   document\
    \ proposes the use of third-party authorization using OAuth\n   2.0 [RFC6749]\
    \ for STUN.  Using OAuth 2.0, a client obtains an\n   ephemeral token from an\
    \ authorization server, e.g., a WebRTC server,\n   and the token is presented\
    \ to the STUN server instead of the\n   traditional mechanism of presenting username/password\
    \ credentials.\n   The STUN server validates the authenticity of the token and\
    \ provides\n   required services.  Third-party authorization using OAuth 2.0 for\n\
    \   STUN explained in this specification can also be used with Traversal\n   Using\
    \ Relays around NAT (TURN) [RFC5766].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This document uses the following abbreviations:\n   o  WebRTC Server: A web\
    \ server that supports WebRTC [WEBRTC].\n   o  Access Token: OAuth 2.0 access\
    \ token.\n   o  mac_key: The session key generated by the authorization server.\n\
    \      This session key has a lifetime that corresponds to the lifetime\n    \
    \  of the access token, is generated by the authorization server, and\n      is\
    \ bound to the access token.\n   o  kid: An ephemeral and unique key identifier.\
    \  The kid also allows\n      the resource server to select the appropriate keying\
    \ material for\n      decryption.\n   o  AS: Authorization server.\n   o  RS:\
    \ Resource server.\n   Some sections in this specification show the WebRTC server\
    \ as the\n   authorization server and the client as the WebRTC client; however,\n\
    \   WebRTC is intended to be used for illustrative purpose only.\n"
- title: 3.  Solution Overview
  contents:
  - "3.  Solution Overview\n   The STUN client knows that it can use OAuth 2.0 with\
    \ the target STUN\n   server either through configuration or when it receives\
    \ the new STUN\n   attribute THIRD-PARTY-AUTHORIZATION in the error response with\
    \ an\n   error code of 401 (Unauthorized).\n   This specification uses the token\
    \ type 'Assertion' (a.k.a.  self-\n   contained token) described in [RFC6819]\
    \ where all the information\n   necessary to authenticate the validity of the\
    \ token is contained\n   within the token itself.  This approach has the benefit\
    \ of avoiding a\n   protocol between the STUN server and the authorization server\
    \ for\n   token validation, thus reducing latency.  The content of the token is\n\
    \   opaque to the client.  The client embeds the token within a STUN\n   request\
    \ sent to the STUN server.  Once the STUN server has determined\n   the token\
    \ is valid, its services are offered for a determined period\n   of time.  The\
    \ access token issued by the authorization server is\n   explained in Section\
    \ 6.2.  OAuth 2.0 in [RFC6749] defines four grant\n   types.  This specification\
    \ uses the OAuth 2.0 grant type 'Implicit'\n   as explained in Section 1.3.2 of\
    \ [RFC6749] where the client is issued\n   an access token directly.  The string\
    \ 'stun' is defined by this\n   specification for use as the OAuth scope parameter\
    \ (see Section 3.3\n   of [RFC6749]) for the OAuth token.\n   The exact mechanism\
    \ used by a client to obtain a token and other\n   OAuth 2.0 parameters like token\
    \ type, mac_key, token lifetime, and\n   kid is outside the scope of this document.\
    \  Appendix B provides an\n   example deployment scenario of interaction between\
    \ the client and\n   authorization server to obtain a token and other OAuth 2.0\n\
    \   parameters.\n   Section 3.1 illustrates the use of OAuth 2.0 to achieve third-party\n\
    \   authorization for TURN.\n"
- title: 3.1.  Usage with TURN
  contents:
  - "3.1.  Usage with TURN\n   TURN, an extension to the STUN protocol, is often used\
    \ to improve the\n   connectivity of peer-to-peer (P2P) applications.  TURN ensures\
    \ that a\n   connection can be established even when one or both sides are\n \
    \  incapable of a direct P2P connection.  However, as a relay service,\n   it\
    \ imposes a non-trivial cost on the service provider.  Therefore,\n   access to\
    \ a TURN service is almost always access controlled.  In\n   order to achieve\
    \ third-party authorization, a resource owner, e.g., a\n   WebRTC server, authorizes\
    \ a TURN client to access resources on the\n   TURN server.\n   In this example,\
    \ a resource owner, i.e., a WebRTC server, authorizes\n   a TURN client to access\
    \ resources on a TURN server.\n           +----------------------+----------------------------+\n\
    \           |     OAuth 2.0        |            WebRTC          |\n          \
    \ +======================+============================+\n           | Client \
    \              | WebRTC client              |\n           +----------------------+----------------------------+\n\
    \           | Resource owner       | WebRTC server              |\n          \
    \ +----------------------+----------------------------+\n           | Authorization\
    \ server | Authorization server       |\n           +----------------------+----------------------------+\n\
    \           | Resource server      | TURN server                |\n          \
    \ +----------------------+----------------------------+\n         Figure 1: OAuth\
    \ Terminology Mapped to WebRTC Terminology\n   Using the OAuth 2.0 authorization\
    \ framework, a WebRTC client (third-\n   party application) obtains limited access\
    \ to a TURN server (resource\n   server) on behalf of the WebRTC server (resource\
    \ owner or\n   authorization server).  The WebRTC client requests access to\n\
    \   resources controlled by the resource owner (WebRTC server) and hosted\n  \
    \ by the resource server (TURN server).  The WebRTC client obtains the\n   access\
    \ token, lifetime, session key, and kid.  The TURN client\n   conveys the access\
    \ token and other OAuth 2.0 parameters learned from\n   the authorization server\
    \ to the TURN server.  The TURN server obtains\n   the session key from the access\
    \ token.  The TURN server validates the\n   token, computes the message integrity\
    \ of the request, and takes\n   appropriate action, i.e, permits the TURN client\
    \ to create\n   allocations.  This is shown in an abstract way in Figure 2.\n\
    \                           +---------------+\n                           |  \
    \             +<******+\n            +------------->| Authorization |       *\n\
    \            |              | server        |       *\n            |   +----------|(WebRTC\
    \ server)|       *  AS-RS,\n            |   |          |               |     \
    \  *  AUTH keys\n   (1)      |   |           +---------------+      *   (0)\n\
    \   Access   |   |  (2)                             *\n   Token    |   | Access\
    \ Token                     *\n   request  |   |    +                        \
    \     *\n            |   | Session Key                      *\n            | \
    \  |                                  *\n            |   V                   \
    \               V\n        +-------+---+                       +-+----=-----+\n\
    \        |           |         (3)           |            |\n        |       \
    \    | TURN request + Access |            |\n        | WebRTC    | Token     \
    \            | TURN       |\n        | client    |---------------------->| server\
    \     |\n        | (Alice)   | Allocate response (4) |            |\n        |\
    \           |<----------------------|            |\n        +-----------+    \
    \                   +------------+\n   User: Alice\n   ****: Out-of-Band Long-Term\
    \ Symmetric Key Establishment\n                          Figure 2: Interactions\n\
    \   In the below figure, the TURN client sends an Allocate request to the\n  \
    \ TURN server without credentials.  Since the TURN server requires that\n   all\
    \ requests be authenticated using OAuth 2.0, the TURN server\n   rejects the request\
    \ with a 401 (Unauthorized) error code and the STUN\n   attribute THIRD-PARTY-AUTHORIZATION.\
    \  The WebRTC client obtains an\n   access token from the WebRTC server, provides\
    \ the access token to the\n   TURN client, and it tries again, this time including\
    \ the access token\n   in the Allocate request.  This time, the TURN server validates\
    \ the\n   token, accepts the Allocate request, and returns an Allocate success\n\
    \   response containing (among other things) the relayed transport\n   address\
    \ assigned to the allocation.\n   +-------------------+                      \
    \   +--------+  +---------+\n   | .........  TURN   |                        \
    \ |  TURN  |  |  WebRTC |\n   | .WebRTC .  client |                         |\
    \        |  |         |\n   | .client .         |                         | server\
    \ |  |  server |\n   | .........         |                         |        |\
    \  |         |\n   +-------------------+                         +--------+  +---------+\n\
    \     |       |           Allocate request                |         |\n     |\
    \       |------------------------------------------>|         |\n     |      \
    \ |                                           |         |\n     |       |    \
    \     Allocate error response           |         |\n     |       |         (401\
    \ Unauthorized)                |         |\n     |       |<------------------------------------------|\
    \         |\n     |       |         THIRD-PARTY-AUTHORIZATION         |      \
    \   |\n     |       |                                           |         |\n\
    \     |       |                                           |         |\n     |\
    \       |      HTTP request for token               |         |\n     |------------------------------------------------------------>|\n\
    \     |       |      HTTP response with token parameters  |         |\n     |<------------------------------------------------------------|\n\
    \     |OAuth 2.0                                          |         |\n      attributes\
    \                                         |         |\n     |------>|        \
    \                                   |         |\n     |       |    Allocate request\
    \ ACCESS-TOKEN          |         |\n     |       |------------------------------------------>|\
    \         |\n     |       |                                           |      \
    \   |\n     |       |         Allocate success response         |         |\n\
    \     |       |<------------------------------------------|         |\n     |\
    \       |             TURN messages                 |         |\n     |      \
    \ |      ////// integrity protected //////    |         |\n     |       |    \
    \  ////// integrity protected //////    |         |\n     |       |      //////\
    \ integrity protected //////    |         |\n                 Figure 3: TURN Third-Party\
    \ Authorization\n"
- title: 4.  Obtaining a Token Using OAuth
  contents:
  - "4.  Obtaining a Token Using OAuth\n   A STUN client needs to know the authentication\
    \ capability of the STUN\n   server before deciding to use third-party authorization.\
    \  A STUN\n   client initially makes a request without any authorization.  If\
    \ the\n   STUN server supports third-party authorization, it will return an\n\
    \   error message indicating that the client can authorize to the STUN\n   server\
    \ using an OAuth 2.0 access token.  The STUN server includes an\n   ERROR-CODE\
    \ attribute with a value of 401 (Unauthorized), a nonce\n   value in a NONCE attribute,\
    \ and a SOFTWARE attribute that gives\n   information about the STUN server's\
    \ software.  The STUN server also\n   includes the additional STUN attribute THIRD-PARTY-AUTHORIZATION,\n\
    \   which signals the STUN client that the STUN server supports third-\n   party\
    \ authorization.\n   Note: An implementation may choose to contact the authorization\n\
    \   server to obtain a token even before it makes a STUN request, if it\n   knows\
    \ the server details beforehand.  For example, once a client has\n   learned that\
    \ a STUN server supports third-party authorization from a\n   authorization server,\
    \ the client can obtain the token before making\n   subsequent STUN requests.\n"
- title: 4.1.  Key Establishment
  contents:
  - "4.1.  Key Establishment\n   In this model, the STUN server would not authenticate\
    \ the client\n   itself but would rather verify whether the client knows the session\n\
    \   key associated with a specific access token.  An example of this\n   approach\
    \ can be found with the OAuth 2.0 Proof-of-Possession (PoP)\n   Security Architecture\
    \ [POP-ARCH].  The authorization server shares a\n   long-term secret (K) with\
    \ the STUN server.  When the client requests\n   an access token, the authorization\
    \ server creates a fresh and unique\n   session key (mac_key) and places it into\
    \ the token encrypted with the\n   long-term secret.  Symmetric cryptography MUST\
    \ be chosen to ensure\n   that the size of the encrypted token is not large because\
    \ usage of\n   asymmetric cryptography will result in large encrypted tokens,\
    \ which\n   may not fit into a single STUN message.\n   The STUN server and authorization\
    \ server can establish a long-term\n   symmetric key (K) and a certain authenticated\
    \ encryption algorithm,\n   using an out-of-band mechanism.  The STUN and authorization\
    \ servers\n   MUST establish K over an authenticated secure channel.  If\n   authenticated\
    \ encryption with AES-CBC and HMAC-SHA (defined in\n   [ENCRYPT]) is used, then\
    \ the AS-RS and AUTH keys will be derived from\n   K.  The AS-RS key is used for\
    \ encrypting the self-contained token,\n   and the message integrity of the encrypted\
    \ token is calculated using\n   the AUTH key.  If the Authenticated Encryption\
    \ with Associated Data\n   (AEAD) algorithm defined in [RFC5116] is used, then\
    \ there is no need\n   to generate the AUTH key, and the AS-RS key will have the\
    \ same value\n   as K.\n   The procedure for establishment of the long-term symmetric\
    \ key is\n   outside the scope of this specification, and this specification does\n\
    \   not mandate support of any given mechanism.  Sections 4.1.1 and 4.1.2\n  \
    \ show examples of mechanisms that can be used.\n"
- title: 4.1.1.  HTTP Interactions
  contents:
  - "4.1.1.  HTTP Interactions\n   The STUN and AS servers could choose to use Representational\
    \ State\n   Transfer (REST) API over HTTPS to establish a long-term symmetric\n\
    \   key.  HTTPS MUST be used for data confidentiality, and TLS based on a\n  \
    \ client certificate MUST be used for mutual authentication.  To\n   retrieve\
    \ a new long-term symmetric key, the STUN server makes an HTTP\n   GET request\
    \ to the authorization server, specifying STUN as the\n   service to allocate\
    \ the long-term symmetric keys for and specifying\n   the name of the STUN server.\
    \  The response is returned with content-\n   type 'application/json' and consists\
    \ of a JavaScript Object Notation\n   (JSON) [RFC7159] object containing the long-term\
    \ symmetric key.\n   Request\n   -------\n   service - specifies the desired service\
    \ (TURN)\n   name    - STUN server name associated with the key\n   example:\n\
    \   GET https://www.example.com/.well-known/stun-key?service=stun\n   &name=turn1@example.com\n\
    \   Response\n   --------\n   k   - long-term symmetric key\n   exp - identifies\
    \ the time after which the key expires\n   example:\n   {\n      \"k\" :\n   \"\
    ESIzRFVmd4iZABEiM0RVZgKn6WjLaTC1FXAghRMVTzkBGNaaN496523WIISKerLi\",\n      \"\
    exp\" : 1300819380,\n      \"kid\" :\"22BIjxU93h/IgwEb\"\n      \"enc\" : A256GCM\n\
    \     }\n   The authorization server must also signal kid to the STUN server,\n\
    \   which will be used to select the appropriate keying material for\n   decryption.\
    \  The parameter 'k' is defined in Section 6.4.1 of\n   [RFC7518], 'enc' is defined\
    \ in Section 4.1.2 of [RFC7516], 'kid' is\n   defined in Section 4.1.4 of [RFC7515],\
    \ and 'exp' is defined in\n   Section 4.1.4 of [RFC7519].  A256GCM and other authenticated\n\
    \   encryption algorithms are defined in Section 5.1 of [RFC7518].  A\n   STUN\
    \ server and authorization server implementation MUST support\n   A256GCM as the\
    \ authenticated encryption algorithm.\n   If A256CBC-HS512 as defined in [RFC7518]\
    \ is used, then the AS-RS and\n   AUTH keys are derived from K using the mechanism\
    \ explained in\n   Section 5.2.2.1 of [RFC7518].  In this case, the AS-RS key\
    \ length\n   must be 256 bits and the AUTH key length must be 256 bits\n   (Section\
    \ 2.6 of [RFC4868]).\n"
- title: 4.1.2.  Manual Provisioning
  contents:
  - "4.1.2.  Manual Provisioning\n   The STUN and AS servers could be manually configured\
    \ with a long-term\n   symmetric key, an authenticated encryption algorithm, and\
    \ kid.\n   Note: The mechanism specified in this section requires configuration\n\
    \   to change the long-term symmetric key and/or authenticated encryption\n  \
    \ algorithm.  Hence, a STUN server and authorization server\n   implementation\
    \ SHOULD support REST as explained in Section 4.1.1.\n"
- title: 5.  Forming a Request
  contents:
  - "5.  Forming a Request\n   When a STUN server responds that third-party authorization\
    \ is\n   required, a STUN client re-attempts the request, this time including\n\
    \   access token and kid values in the ACCESS-TOKEN and USERNAME STUN\n   attributes.\
    \  The STUN client includes a MESSAGE-INTEGRITY attribute\n   as the last attribute\
    \ in the message over the contents of the STUN\n   message.  The HMAC for the\
    \ MESSAGE-INTEGRITY attribute is computed as\n   described in Section 15.4 of\
    \ [RFC5389] where the mac_key is used as\n   the input key for the HMAC computation.\
    \  The STUN client and server\n   will use the mac_key to compute the message\
    \ integrity and do not\n   perform MD5 hash on the credentials.\n"
- title: 6.  STUN Attributes
  contents:
  - "6.  STUN Attributes\n   The following new STUN attributes are introduced by this\n\
    \   specification to accomplish third-party authorization.\n"
- title: 6.1.  THIRD-PARTY-AUTHORIZATION
  contents:
  - "6.1.  THIRD-PARTY-AUTHORIZATION\n   This attribute is used by the STUN server\
    \ to inform the client that\n   it supports third-party authorization.  This attribute\
    \ value contains\n   the STUN server name.  The authorization server may have\
    \ tie ups with\n   multiple STUN servers and vice versa, so the client MUST provide\
    \ the\n   STUN server name to the authorization server so that it can select\n\
    \   the appropriate keying material to generate the self-contained token.\n  \
    \ If the authorization server does not have tie up with the STUN\n   server, then\
    \ it returns an error to the client.  If the client does\n   not support or is\
    \ not capable of doing third-party authorization,\n   then it defaults to first-party\
    \ authentication.  The\n   THIRD-PARTY-AUTHORIZATION attribute is a comprehension-optional\n\
    \   attribute (see Section 15 from [RFC5389]).  If the client is able to\n   comprehend\
    \ THIRD-PARTY-AUTHORIZATION, it MUST ensure that third-party\n   authorization\
    \ takes precedence over first-party authentication (as\n   explained in Section\
    \ 10 of [RFC5389]).\n"
- title: 6.2.  ACCESS-TOKEN
  contents:
  - "6.2.  ACCESS-TOKEN\n   The access token is issued by the authorization server.\
    \  OAuth 2.0\n   does not impose any limitation on the length of the access token\
    \ but\n   if path MTU is unknown, then STUN messages over IPv4 would need to be\n\
    \   less than 548 bytes (Section 7.1 of [RFC5389]).  The access token\n   length\
    \ needs to be restricted to fit within the maximum STUN message\n   size.  Note\
    \ that the self-contained token is opaque to the client,\n   and the client MUST\
    \ NOT examine the token.  The ACCESS-TOKEN\n   attribute is a comprehension-required\
    \ attribute (see Section 15 from\n   [RFC5389]).\n   The token is structured as\
    \ follows:\n         struct {\n             uint16_t nonce_length;\n         \
    \    opaque nonce[nonce_length];\n             opaque {\n                 uint16_t\
    \ key_length;\n                 opaque mac_key[key_length];\n                \
    \ uint64_t timestamp;\n                 uint32_t lifetime;\n             } encrypted_block;\n\
    \         } token;\n                   Figure 4: Self-Contained Token Format\n\
    \   Note: uintN_t means an unsigned integer of exactly N bits.  Single-\n   byte\
    \ entities containing uninterpreted data are of type 'opaque'.\n   All values\
    \ in the token are stored in network byte order.\n   The fields are described\
    \ below:\n   nonce_length:  Length of the nonce field.  The length of nonce for\n\
    \      AEAD algorithms is explained in [RFC5116].\n   Nonce:  Nonce (N) formation\
    \ is explained in Section 3.2 of [RFC5116].\n   key_length:  Length of the session\
    \ key in octets.  The key length of\n      160 bits MUST be supported (i.e., only\
    \ the 160-bit key is used by\n      HMAC-SHA-1 for message integrity of STUN messages).\
    \  The key\n      length facilitates the hash agility plan discussed in Section\
    \ 16.3\n      of [RFC5389].\n   mac_key:  The session key generated by the authorization\
    \ server.\n   timestamp:  64-bit unsigned integer field containing a timestamp.\n\
    \      The value indicates the time since January 1, 1970, 00:00 UTC, by\n   \
    \   using a fixed-point format.  In this format, the integer number of\n     \
    \ seconds is contained in the first 48 bits of the field, and the\n      remaining\
    \ 16 bits indicate the number of 1/64000 fractions of a\n      second (Native\
    \ format - Unix).\n   lifetime:  The lifetime of the access token, in seconds.\
    \  For\n      example, the value 3600 indicates one hour.  The lifetime value\n\
    \      MUST be greater than or equal to the 'expires_in' parameter\n      defined\
    \ in Section 4.2.2 of [RFC6749], otherwise the resource\n      server could revoke\
    \ the token, but the client would assume that\n      the token has not expired\
    \ and would not refresh the token.\n   encrypted_block:  The encrypted_block (P)\
    \ is encrypted and\n      authenticated using the long-term symmetric key established\n\
    \      between the STUN server and the authorization server.\n   The AEAD encryption\
    \ operation has four inputs: K, N, A, and P, as\n   defined in Section 2.1 of\
    \ [RFC5116], and there is a single output of\n   ciphertext C or an indication\
    \ that the requested encryption operation\n   could not be performed.\n   The\
    \ associated data (A) MUST be the STUN server name.  This ensures\n   that the\
    \ client does not use the same token to gain illegal access to\n   other STUN\
    \ servers provided by the same administrative domain, i.e.,\n   when multiple\
    \ STUN servers in a single administrative domain share\n   the same long-term\
    \ symmetric key with an authorization server.\n   If authenticated encryption\
    \ with AES-CBC and HMAC-SHA (explained in\n   Section 2.1 of [ENCRYPT]) is used,\
    \ then the encryption process is as\n   illustrated below.  The ciphertext consists\
    \ of the string S, with the\n   string T appended to it.  Here, C and A denote\
    \ ciphertext and the\n   STUN server name, respectively.  The octet string AL\
    \ (Section 2.1 of\n   [ENCRYPT]) is equal to the number of bits in A expressed\
    \ as a 64-bit\n   unsigned big-endian integer.\n   o  AUTH = initial authentication\
    \ key length octets of K,\n   o  AS-RS = final encryption key length octets of\
    \ K,\n   o  S = CBC-PKCS7-ENC(AS-RS, encrypted_block),\n      *  The Initialization\
    \ Vector is set to zero because the\n         encrypted_block in each access token\
    \ will not be identical and\n         hence will not result in generation of identical\
    \ ciphertext.\n   o  mac = MAC(AUTH, A || S || AL),\n   o  T = initial T_LEN octets\
    \ of mac,\n   o  C = S || T.\n   The entire token, i.e., the 'encrypted_block',\
    \ is base64 encoded (see\n   Section 4 of [RFC4648]), and the resulting access\
    \ token is signaled\n   to the client.\n"
- title: 7.  STUN Server Behavior
  contents:
  - "7.  STUN Server Behavior\n   The STUN server, on receiving a request with the\
    \ ACCESS-TOKEN\n   attribute, performs checks listed in Section 10.2.2 of [RFC5389]\
    \ in\n   addition to the following steps to verify that the access token is\n\
    \   valid:\n   o  The STUN server selects the keying material based on kid signaled\n\
    \      in the USERNAME attribute.\n   o  The AEAD decryption operation has four\
    \ inputs: K, N, A, and C, as\n      defined in Section 2.2 of [RFC5116].  The\
    \ AEAD decryption\n      algorithm has only a single output, either a plaintext\
    \ or a\n      special symbol FAIL that indicates that the inputs are not\n   \
    \   authentic.  If the authenticated decrypt operation returns FAIL,\n      then\
    \ the STUN server rejects the request with an error response\n      401 (Unauthorized).\n\
    \   o  If AES_CBC_HMAC_SHA2 is used, then the final T_LEN octets are\n      stripped\
    \ from C.  It performs the verification of the token\n      message integrity\
    \ by calculating HMAC over the STUN server name,\n      the encrypted portion\
    \ in the self-contained token, and the AL\n      using the AUTH key, and if the\
    \ resulting value does not match the\n      mac field in the self-contained token,\
    \ then it rejects the request\n      with an error response 401 (Unauthorized).\n\
    \   o  The STUN server obtains the mac_key by retrieving the content of\n    \
    \  the access token (which requires decryption of the self-contained\n      token\
    \ using the AS-RS key).\n   o  The STUN server verifies that no replay took place\
    \ by performing\n      the following check:\n      *  The access token is accepted\
    \ if the timestamp field (TS) in the\n         self-contained token is shortly\
    \ before the reception time of\n         the STUN request (RDnew).  The following\
    \ formula is used:\n            lifetime + Delta > abs(RDnew - TS)\n         The\
    \ RECOMMENDED value for the allowed Delta is 5 seconds.  If\n         the timestamp\
    \ is NOT within the boundaries, then the STUN\n         server discards the request\
    \ with error response 401\n         (Unauthorized).\n   o  The STUN server uses\
    \ the mac_key to compute the message integrity\n      over the request, and if\
    \ the resulting value does not match the\n      contents of the MESSAGE-INTEGRITY\
    \ attribute, then it rejects the\n      request with an error response 401 (Unauthorized).\n\
    \   o  If all the checks pass, the STUN server continues to process the\n    \
    \  request.\n   o  Any response generated by the server MUST include the MESSAGE-\n\
    \      INTEGRITY attribute, computed using the mac_key.\n   If a STUN server receives\
    \ an ACCESS-TOKEN attribute unexpectedly\n   (because it had not previously sent\
    \ out a THIRD-PARTY-AUTHORIZATION),\n   it will respond with an error code of\
    \ 420 (Unknown Attribute) as\n   specified in Section 7.3.1 of [RFC5389].\n"
- title: 8.  STUN Client Behavior
  contents:
  - "8.  STUN Client Behavior\n   o  The client looks for the MESSAGE-INTEGRITY attribute\
    \ in the\n      response.  If MESSAGE-INTEGRITY is absent or the value computed\n\
    \      for message integrity using mac_key does not match the contents of\n  \
    \    the MESSAGE-INTEGRITY attribute, then the response MUST be\n      discarded.\n\
    \   o  If the access token expires, then the client MUST obtain a new\n      token\
    \ from the authorization server and use it for new STUN\n      requests.\n"
- title: 9.  TURN Client and Server Behavior
  contents:
  - "9.  TURN Client and Server Behavior\n   Changes specific to TURN are listed below:\n\
    \   o  The access token can be reused for multiple Allocate requests to\n    \
    \  the same TURN server.  The TURN client MUST include the ACCESS-\n      TOKEN\
    \ attribute only in Allocate and Refresh requests.  Since the\n      access token\
    \ is valid for a specific period of time, the TURN\n      server can cache it\
    \ so that it can check if the access token in a\n      new allocation request\
    \ matches one of the cached tokens and avoids\n      the need to decrypt the token.\n\
    \   o  The lifetime provided by the TURN server in the Allocate and\n      Refresh\
    \ responses MUST be less than or equal to the lifetime of\n      the token.  It\
    \ is RECOMMENDED that the TURN server calculate the\n      maximum allowed lifetime\
    \ value using the formula:\n        lifetime + Delta - abs(RDnew - TS)\n     \
    \ The RECOMMENDED value for the allowed Delta is 5 seconds.\n   o  If the access\
    \ token expires, then the client MUST obtain a new\n      token from the authorization\
    \ server and use it for new\n      allocations.  The client MUST use the new token\
    \ to refresh\n      existing allocations.  This way, the client has to maintain\
    \ only\n      one token per TURN server.\n"
- title: 10.  Operational Considerations
  contents:
  - "10.  Operational Considerations\n   The following operational considerations\
    \ should be taken into\n   account:\n   o  Each authorization server should maintain\
    \ the list of STUN servers\n      for which it will grant tokens and the long-term\
    \ secret shared\n      with each of those STUN servers.\n   o  If manual configuration\
    \ (Section 4.1.2) is used to establish long-\n      term symmetric keys, the necessary\
    \ information, which includes\n      long-term secret (K) and the authenticated\
    \ encryption algorithm,\n      has to be configured on each authorization server\
    \ and STUN server\n      for each kid.  The client obtains the session key and\
    \ HMAC\n      algorithm from the authorization server in company with the token.\n\
    \   o  When a STUN client sends a request to get access to a particular\n    \
    \  STUN server (S), the authorization server must ensure that it\n      selects\
    \ the appropriate kid and access token depending on server\n      S.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   When OAuth 2.0 is used, the interaction between\
    \ the client and the\n   authorization server requires Transport Layer Security\
    \ (TLS) with a\n   ciphersuite offering confidentiality protection, and the guidance\n\
    \   given in [RFC7525] must be followed to avoid attacks on TLS.  The\n   session\
    \ key MUST NOT be transmitted in clear since this would\n   completely destroy\
    \ the security benefits of the proposed scheme.  An\n   attacker trying to replay\
    \ the message with the ACCESS-TOKEN attribute\n   can be mitigated by frequent\
    \ changes of the nonce value as discussed\n   in Section 10.2 of [RFC5389].  The\
    \ client may know some (but not all)\n   of the token fields encrypted with an\
    \ unknown secret key, and the\n   token can be subjected to known-plaintext attacks,\
    \ but AES is secure\n   against this attack.\n   An attacker may remove the THIRD-PARTY-AUTHORIZATION\
    \ STUN attribute\n   from the error message forcing the client to pick first-party\n\
    \   authentication; this attack may be mitigated by opting for TLS\n   [RFC5246]\
    \ or Datagram Transport Layer Security (DTLS) [RFC6347] as a\n   transport protocol\
    \ for STUN, as defined in [RFC5389]and [RFC7350].\n   Threat mitigation discussed\
    \ in Section 5 of [POP-ARCH] and security\n   considerations in [RFC5389] are\
    \ to be taken into account.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document defines the THIRD-PARTY-AUTHORIZATION\
    \ STUN attribute,\n   described in Section 6.  IANA has allocated the comprehension-\n\
    \   optional codepoint 0x802E for this attribute.\n   This document defines the\
    \ ACCESS-TOKEN STUN attribute, described in\n   Section 6.  IANA has allocated\
    \ the comprehension-required codepoint\n   0x001B for this attribute.\n"
- title: 12.1.  Well-Known 'stun-key' URI
  contents:
  - "12.1.  Well-Known 'stun-key' URI\n   This memo registers the 'stun-key' well-known\
    \ URI in the Well-Known\n   URIs registry as defined by [RFC5785].\n   URI suffix:\
    \ stun-key\n   Change controller: IETF\n   Specification document(s): This RFC\n\
    \   Related information: None\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC4868]  Kelly, S. and S.\
    \ Frankel, \"Using HMAC-SHA-256,\n              HMAC-SHA-384, and HMAC-SHA-512\
    \ with IPsec\", RFC 4868,\n              DOI 10.17487/RFC4868, May 2007,\n   \
    \           <http://www.rfc-editor.org/info/rfc4868>.\n   [RFC5116]  McGrew, D.,\
    \ \"An Interface and Algorithms for Authenticated\n              Encryption\"\
    , RFC 5116, DOI 10.17487/RFC5116, January 2008,\n              <http://www.rfc-editor.org/info/rfc5116>.\n\
    \   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n         \
    \     \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n            \
    \  DOI 10.17487/RFC5389, October 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n\
    \   [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n  \
    \            RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC7518]  Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n         \
    \     DOI 10.17487/RFC7518, May 2015,\n              <http://www.rfc-editor.org/info/rfc7518>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [ENCRYPT]  McGrew, D., Foley, J., and K. Paterson,\
    \ \"Authenticated\n              Encryption with AES-CBC and HMAC-SHA\", Work\
    \ in Progress,\n              draft-mcgrew-aead-aes-cbc-hmac-sha2-05, July 2014.\n\
    \   [POP-ARCH] Hunt, P., Richer, J., Mills, W., Mishra, P., and H.\n         \
    \     Tschofenig, \"OAuth 2.0 Proof-of-Possession (PoP) Security\n           \
    \   Architecture\", Work in Progress,\n              draft-ietf-oauth-pop-architecture-02,\
    \ July 2015.\n   [POP-KEY-DIST]\n              Bradley, J., Hunt, P., Jones, M.,\
    \ and H. Tschofenig,\n              \"OAuth 2.0 Proof-of-Possession: Authorization\
    \ Server to\n              Client Key Distribution\", Work in Progress,\n    \
    \          draft-ietf-oauth-pop-key-distribution-01, March 2015.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5766]\
    \  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n             \
    \ Relays around NAT (TURN): Relay Extensions to Session\n              Traversal\
    \ Utilities for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5766>.\n   [RFC5785]\
    \  Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n              Uniform\
    \ Resource Identifiers (URIs)\", RFC 5785,\n              DOI 10.17487/RFC5785,\
    \ April 2010,\n              <http://www.rfc-editor.org/info/rfc5785>.\n   [RFC6347]\
    \  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security\
    \ Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n              January 2012,\
    \ <http://www.rfc-editor.org/info/rfc6347>.\n   [RFC6819]  Lodderstedt, T., Ed.,\
    \ McGloin, M., and P. Hunt, \"OAuth 2.0\n              Threat Model and Security\
    \ Considerations\", RFC 6819,\n              DOI 10.17487/RFC6819, January 2013,\n\
    \              <http://www.rfc-editor.org/info/rfc6819>.\n   [RFC7159]  Bray,\
    \ T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange\
    \ Format\", RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <http://www.rfc-editor.org/info/rfc7159>.\n\
    \   [RFC7350]  Petit-Huguenin, M. and G. Salgueiro, \"Datagram Transport\n   \
    \           Layer Security (DTLS) as Transport for Session Traversal\n       \
    \       Utilities for NAT (STUN)\", RFC 7350, DOI 10.17487/RFC7350,\n        \
    \      August 2014, <http://www.rfc-editor.org/info/rfc7350>.\n   [RFC7376]  Reddy,\
    \ T., Ravindranath, R., Perumal, M., and A. Yegin,\n              \"Problems with\
    \ Session Traversal Utilities for NAT (STUN)\n              Long-Term Authentication\
    \ for Traversal Using Relays around\n              NAT (TURN)\", RFC 7376, DOI\
    \ 10.17487/RFC7376, September\n              2014, <http://www.rfc-editor.org/info/rfc7376>.\n\
    \   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n         \
    \     Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7515>.\n   [RFC7516]  Jones, M. and J. Hildebrand,\
    \ \"JSON Web Encryption (JWE)\",\n              RFC 7516, DOI 10.17487/RFC7516,\
    \ May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n   [RFC7519]\
    \  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\"\
    , RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <http://www.rfc-editor.org/info/rfc7519>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [STUN]\
    \     Petit-Huguenin, M., Salgueiro, G., Rosenberg, J., Wing,\n              D.,\
    \ Mahy, R., and P. Matthews, \"Session Traversal\n              Utilities for\
    \ NAT (STUN)\", Work in Progress,\n              draft-ietf-tram-stunbis-04, March\
    \ 2015.\n   [WEBRTC]   Alvestrand, H., \"Overview: Real Time Protocols for\n \
    \             Browser-based Applications\", Work in Progress, draft-ietf-\n  \
    \            rtcweb-overview-14, June 2015.\n"
- title: Appendix A.  Sample Tickets
  contents:
  - "Appendix A.  Sample Tickets\n   Input data (same for all samples below):\n  \
    \    //STUN SERVER NAME\n      server_name = \"blackdow.carleon.gov\";\n     \
    \ //Shared key between AS and RS\n      long_term_key = \\x48\\x47\\x6b\\x6a\\\
    x33\\x32\\x4b\\x4a\\x47\\x69\\x75\\x79\n                      \\x30\\x39\\x38\\\
    x73\\x64\\x66\\x61\\x71\\x62\\x4e\\x6a\\x4f\n                      \\x69\\x61\\\
    x7a\\x37\\x31\\x39\\x32\\x33\n      //MAC key of the session (included in the\
    \ token)\n      mac_key = \\x5a\\x6b\\x73\\x6a\\x70\\x77\\x65\\x6f\\x69\\x78\\\
    x58\\x6d\\x76\\x6e\n                \\x36\\x37\\x35\\x33\\x34\\x6d;\n      //length\
    \ of the MAC key\n      mac_key_length  =  20;\n      //The timestamp field in\
    \ the token\n      token_timestamp = 92470300704768;\n      //The lifetime of\
    \ the token\n      token_lifetime = 3600;\n      //nonce for AEAD\n      aead_nonce\
    \ = \\x68\\x34\\x6a\\x33\\x6b\\x32\\x6c\\x32\\x6e\\x34\\x62\\x35;\n      Samples:\n\
    \      1) token encryption algorithm = AEAD_AES_256_GCM\n         Encrypted token\
    \ (64 bytes = 2 + 12 + 34 + 16) =\n       \\x00\\x0c\\x68\\x34\\x6a\\x33\\x6b\\\
    x32\\x6c\\x32\\x6e\\x34\\x62\n       \\x35\\x61\\x7e\\xf1\\x34\\xa3\\xd5\\xe4\\\
    x4e\\x9a\\x19\\xcc\\x7d\n       \\xc1\\x04\\xb0\\xc0\\x3d\\x03\\xb2\\xa5\\x51\\\
    xd8\\xfd\\xf5\\xcd\n       \\x3b\\x6d\\xca\\x6f\\x10\\xcf\\xb7\\x7e\\x5b\\x2d\\\
    xde\\xc8\\x4d\n       \\x29\\x3a\\x5c\\x50\\x49\\x93\\x59\\xf0\\xc2\\xe2\\x6f\\\
    x76\n      2) token encryption algorithm = AEAD_AES_128_GCM\n         Encrypted\
    \ token (64 bytes = 2 + 12 + 34 + 16) =\n      \\x00\\x0c\\x68\\x34\\x6a\\x33\\\
    x6b\\x32\\x6c\\x32\\x6e\\x34\\x62\n      \\x35\\x7f\\xb9\\xe9\\x9f\\x08\\x27\\\
    xbe\\x3d\\xf1\\xe1\\xbd\\x65\n      \\x14\\x93\\xd3\\x03\\x1d\\x36\\xdf\\x57\\\
    x07\\x97\\x84\\xae\\xe5\n      \\xea\\xcb\\x65\\xfa\\xd4\\xf2\\x7f\\xab\\x1a\\\
    x3f\\x97\\x97\\x4b\n      \\x69\\xf8\\x51\\xb2\\x4b\\xf5\\xaf\\x09\\xed\\xa3\\\
    x57\\xe0\n   Note:\n   [1] After EVP_EncryptFinal_ex encrypts the final data,\n\
    \       EVP_CIPHER_CTX_ctrl must be called to append\n       the authentication\
    \ tag to the ciphertext.\n       //EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_AEAD_GET_TAG,\
    \ taglen, tag);\n   [2] EVP_CIPHER_CTX_ctrl must be invoked to set the\n     \
    \  authentication tag before calling EVP_DecryptFinal.\n       //EVP_CIPHER_CTX_ctrl\
    \ (&ctx, EVP_CTRL_GCM_SET_TAG, taglen, tag);\n                         Figure\
    \ 5: Sample Tickets\n"
- title: Appendix B.  Interaction between the Client and Authorization Server
  contents:
  - "Appendix B.  Interaction between the Client and Authorization Server\n   The\
    \ client makes an HTTP request to an authorization server to obtain\n   a token\
    \ that can be used to avail itself of STUN services.  The STUN\n   token is returned\
    \ in JSON syntax [RFC7159], along with other OAuth\n   2.0 parameters like token\
    \ type, key, token lifetime, and kid as\n   defined in [POP-KEY-DIST].\n   +-------------------+\
    \                         +--------+  +---------+\n   | .........  STUN   |  \
    \                       |  STUN  |  |  WebRTC |\n   | .WebRTC .  client |    \
    \                     |        |  |         |\n   | .client .         |      \
    \                   | server |  |  server |\n   | .........         |        \
    \                 |        |  |         |\n   +-------------------+          \
    \               +--------+  +---------+\n     |       |           STUN request\
    \                    |         |\n     |       |------------------------------------------>|\
    \         |\n     |       |                                           |      \
    \   |\n     |       |         STUN error response               |         |\n\
    \     |       |         (401 Unauthorized)                |         |\n     |\
    \       |<------------------------------------------|         |\n     |      \
    \ |         THIRD-PARTY-AUTHORIZATION         |         |\n     |       |    \
    \                                       |         |\n     |       |          \
    \                                 |         |\n     |       |      HTTP request\
    \ for token               |         |\n     |------------------------------------------------------------>|\n\
    \     |       |      HTTP response with token parameters  |         |\n     |<------------------------------------------------------------|\n\
    \     |OAuth 2.0                                          |         |\n      attributes\
    \                                         |         |\n     |------>|        \
    \                                   |         |\n     |       |    STUN request\
    \ with ACCESS-TOKEN         |         |\n     |       |------------------------------------------>|\
    \         |\n     |       |                                           |      \
    \   |\n     |       |         STUN success response             |         |\n\
    \     |       |<------------------------------------------|         |\n     |\
    \       |             STUN messages                 |         |\n     |      \
    \ |      ////// integrity protected //////    |         |\n     |       |    \
    \  ////// integrity protected //////    |         |\n     |       |      //////\
    \ integrity protected //////    |         |\n                 Figure 6: STUN Third-Party\
    \ Authorization\n   [POP-KEY-DIST] describes the interaction between the client\
    \ and the\n   authorization server.  For example, the client learns the STUN server\n\
    \   name \"stun1@example.com\" from the THIRD-PARTY-AUTHORIZATION attribute\n\
    \   value and makes the following HTTP request for the access token using\n  \
    \ TLS (with extra line breaks for display purposes only):\n        HTTP/1.1\n\
    \        Host: server.example.com\n        Content-Type: application/x-www-form-urlencoded\n\
    \        aud=stun1@example.com\n        timestamp=1361471629\n        grant_type=implicit\n\
    \        token_type=pop\n        alg=HMAC-SHA-256-128\n                      \
    \       Figure 7: Request\n   [STUN] supports hash agility and accomplishes this\
    \ agility by\n   computing message integrity using both HMAC-SHA-1 and\n   HMAC-SHA-256-128.\
    \  The client signals the algorithm supported by it\n   to the authorization server\
    \ in the 'alg' parameter defined in\n   [POP-KEY-DIST].  The authorization server\
    \ determines the length of\n   the mac_key based on the HMAC algorithm conveyed\
    \ by the client.  If\n   the client supports both HMAC-SHA-1 and HMAC-SHA-256-128,\
    \ then it\n   signals HMAC-SHA-256-128 to the authorization server, gets a 256-bit\n\
    \   key from the authorization server, and calculates a 160-bit key for\n   HMAC-SHA-1\
    \ using SHA1 and taking the 256-bit key as input.\n   If the client is authorized,\
    \ then the authorization server issues an\n   access token.  An example of a successful\
    \ response:\n        HTTP/1.1 200 OK\n        Content-Type: application/json\n\
    \        Cache-Control: no-store\n        {\n          \"access_token\":\n   \"\
    U2FsdGVkX18qJK/kkWmRcnfHglrVTJSpS6yU32kmHmOrfGyI3m1gQj1jRPsr0uBb\n   HctuycAgsfRX7nJW2BdukGyKMXSiNGNnBzigkAofP6+Z3vkJ1Q5pWbfSRroOkWBn\"\
    ,\n          \"token_type\":\"pop\",\n          \"expires_in\":1800,\n       \
    \   \"kid\":\"22BIjxU93h/IgwEb\",\n          \"key\":\"v51N62OM65kyMvfTI08O\"\n\
    \          \"alg\":HMAC-SHA-256-128\n        }\n                            Figure\
    \ 8: Response\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Dan Wing, Pal Martinsen,\
    \ Oleg\n   Moskalenko, Charles Eckel, Spencer Dawkins, Hannes Tschofenig, Yaron\n\
    \   Sheffer, Tom Taylor, Christer Holmberg, Pete Resnick, Kathleen\n   Moriarty,\
    \ Richard Barnes, Stephen Farrell, Alissa Cooper, and Rich\n   Salz for comments\
    \ and review.  The authors would like to give special\n   thanks to Brandon Williams\
    \ for his help.\n   Thanks to Oleg Moskalenko for providing token samples in Appendix\
    \ A.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tirumaleswar Reddy\n   Cisco Systems, Inc.\n   Cessna\
    \ Business Park, Varthur Hobli\n   Sarjapur Marathalli Outer Ring Road\n   Bangalore,\
    \ Karnataka  560103\n   India\n   Email: tireddy@cisco.com\n   Prashanth Patil\n\
    \   Cisco Systems, Inc.\n   Bangalore\n   India\n   Email: praspati@cisco.com\n\
    \   Ram Mohan Ravindranath\n   Cisco Systems, Inc.\n   Cessna Business Park,\n\
    \   Kadabeesanahalli Village, Varthur Hobli,\n   Sarjapur-Marathahalli Outer Ring\
    \ Road\n   Bangalore, Karnataka  560103\n   India\n   Email: rmohanr@cisco.com\n\
    \   Justin Uberti\n   Google\n   747 6th Ave S.\n   Kirkland, WA  98033\n   United\
    \ States\n   Email: justin@uberti.name\n"
