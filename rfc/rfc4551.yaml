- title: __initial_text__
  contents:
  - "             IMAP Extension for Conditional STORE Operation\n               \
    \ or Quick Flag Changes Resynchronization\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Often, multiple IMAP (RFC 3501) clients need to coordinate changes\
    \ to\n   a common IMAP mailbox.  Examples include different clients working on\n\
    \   behalf of the same user, and multiple users accessing shared\n   mailboxes.\
    \  These clients need a mechanism to synchronize state\n   changes for messages\
    \ within the mailbox.  They must be able to\n   guarantee that only one client\
    \ can change message state (e.g.,\n   message flags) at any time.  An example\
    \ of such an application is use\n   of an IMAP mailbox as a message queue with\
    \ multiple dequeueing\n   clients.\n   The Conditional Store facility provides\
    \ a protected update mechanism\n   for message state information that can detect\
    \ and resolve conflicts\n   between multiple writing mail clients.\n   The Conditional\
    \ Store facility also allows a client to quickly\n   resynchronize mailbox flag\
    \ changes.\n   This document defines an extension to IMAP (RFC 3501).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction and Overview .................................\
    \ 3\n   2.  Conventions Used in This Document ......................... 5\n  \
    \ 3.  IMAP Protocol Changes ..................................... 6\n   3.1. New\
    \ OK untagged responses for SELECT and EXAMINE ......... 6\n   3.1.1. HIGHESTMODSEQ\
    \ response code ............................ 6\n   3.1.2. NOMODSEQ response code\
    \ ................................. 7\n   3.2. STORE and UID STORE Commands .............................\
    \ 7\n   3.3 FETCH and UID FETCH Commands ..............................13\n  \
    \ 3.3.1. CHANGEDSINCE FETCH modifier ............................13\n   3.3.2.\
    \ MODSEQ message data item in FETCH Command ..............14\n   3.4. MODSEQ search\
    \ criterion in SEARCH ........................16\n   3.5. Modified SEARCH untagged\
    \ response ........................17\n   3.6. HIGHESTMODSEQ status data items\
    \ ..........................17\n   3.7. CONDSTORE parameter to SELECT and EXAMINE\
    \ ................18\n   3.8. Additional quality of implementation issues ..............18\n\
    \   4.  Formal Syntax .............................................19\n   5. \
    \ Server implementation considerations ......................21\n   6.  Security\
    \ Considerations ...................................22\n   7.  IANA Considerations\
    \ .......................................22\n   8.  References ................................................23\n\
    \   8.1. Normative References .....................................23\n   8.2.\
    \ Informative References ...................................23\n   9.  Acknowledgements\
    \ ..........................................23\n"
- title: 1. Introduction and Overview
  contents:
  - "1. Introduction and Overview\n   The Conditional STORE extension is present in\
    \ any IMAP4\n   implementation that returns \"CONDSTORE\" as one of the supported\n\
    \   capabilities in the CAPABILITY command response.\n   An IMAP server that supports\
    \ this extension MUST associate a positive\n   unsigned 64-bit value called a\
    \ modification sequence (mod-sequence)\n   with every IMAP message.  This is an\
    \ opaque value updated by the\n   server whenever a metadata item is modified.\
    \  The server MUST\n   guarantee that each STORE command performed on the same\
    \ mailbox\n   (including simultaneous stores to different metadata items from\n\
    \   different connections) will get a different mod-sequence value.\n   Also,\
    \ for any two successful STORE operations performed in the same\n   session on\
    \ the same mailbox, the mod-sequence of the second completed\n   operation MUST\
    \ be greater than the mod-sequence of the first\n   completed.  Note that the\
    \ latter rule disallows the use of the system\n   clock as a mod-sequence, because\
    \ if system time changes (e.g., an NTP\n   [NTP] client adjusting the time), the\
    \ next generated value might be\n   less than the previous one.\n   Mod-sequences\
    \ allow a client that supports the CONDSTORE extension to\n   determine if a message\
    \ metadata has changed since some known moment.\n   Whenever the state of a flag\
    \ changes (i.e., the flag is added where\n   previously it wasn't set, or the\
    \ flag is removed and before it was\n   set) the value of the modification sequence\
    \ for the message MUST be\n   updated.  Adding the flag when it is already present\
    \ or removing when\n   it is not present SHOULD NOT change the mod-sequence.\n\
    \   When a message is appended to a mailbox (via the IMAP APPEND command,\n  \
    \ COPY to the mailbox, or using an external mechanism) the server\n   generates\
    \ a new modification sequence that is higher than the highest\n   modification\
    \ sequence of all messages in the mailbox and assigns it\n   to the appended message.\n\
    \   The server MAY store separate (per-message) modification sequence\n   values\
    \ for different metadata items.  If the server does so, per-\n   message mod-sequence\
    \ is the highest mod-sequence of all metadata\n   items for the specified message.\n\
    \   The server that supports this extension is not required to be able to\n  \
    \ store mod-sequences for every available mailbox.  Section 3.1.2\n   describes\
    \ how the server may act if a particular mailbox doesn't\n   support the persistent\
    \ storage of mod-sequences.\n   This extension makes the following changes to\
    \ the IMAP4 protocol:\n      a) adds UNCHANGEDSINCE STORE modifier.\n      b)\
    \ adds the MODIFIED response code which should be used with an OK\n         response\
    \ to the STORE command.  (It can also be used in a NO\n         response.)\n \
    \     c) adds a new MODSEQ message data item for use with the FETCH\n        \
    \ command.\n      d) adds CHANGEDSINCE FETCH modifier.\n      e) adds a new MODSEQ\
    \ search criterion.\n      f) extends the syntax of untagged SEARCH responses\
    \ to include\n         mod-sequence.\n      g) adds new OK untagged responses\
    \ for the SELECT and EXAMINE\n         commands.\n      h) defines an additional\
    \ parameter to SELECT/EXAMINE commands.\n      i) adds the HIGHESTMODSEQ status\
    \ data item to the STATUS command.\n   A client supporting CONDSTORE extension\
    \ indicates its willingness to\n   receive mod-sequence updates in all untagged\
    \ FETCH responses by\n   issuing:\n      -  a SELECT or EXAMINE command with the\
    \ CONDSTORE parameter,\n      -  a STATUS (HIGHESTMODSEQ) command,\n      -  a\
    \ FETCH or SEARCH command that includes the MODSEQ message data\n         item,\n\
    \      -  a FETCH command with the CHANGEDSINCE modifier, or\n      -  a STORE\
    \ command with the UNCHANGEDSINCE modifier.\n   The server MUST include mod-sequence\
    \ data in all subsequent untagged\n   FETCH responses (until the connection is\
    \ closed), whether they were\n   caused by a regular STORE, a STORE with UNCHANGEDSINCE\
    \ modifier, or\n   an external agent.\n   This document uses the term \"CONDSTORE-aware\
    \ client\" to refer to a\n   client that announces its willingness to receive\
    \ mod-sequence updates\n   as described above.  The term \"CONDSTORE enabling\
    \ command\" will refer\n   any of the commands listed above.  A future extension\
    \ to this\n   document may extend the list of CONDSTORE enabling commands.  A\
    \ first\n   CONDSTORE enabling command executed in the session MUST cause the\n\
    \   server to return HIGHESTMODSEQ (Section 3.1.1) unless the server has\n   sent\
    \ NOMODSEQ (Section 3.1.2) response code when the currently\n   selected mailbox\
    \ was selected.\n   The rest of this document describes the protocol changes more\n\
    \   rigorously.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [KEYWORDS].\n   In examples, lines beginning with \"S:\" are sent\
    \ by the IMAP server,\n   and lines beginning with \"C:\" are sent by the client.\
    \  Line breaks\n   may appear in example commands solely for editorial clarity;\
    \ when\n   present in the actual message, they are represented by \"CRLF\".\n\
    \   Formal syntax is defined using ABNF [ABNF].\n   The term \"metadata\" or \"\
    metadata item\" is used throughout this\n   document.  It refers to any system\
    \ or user-defined keyword.  Future\n   documents may extend \"metadata\" to include\
    \ other dynamic message\n   data.\n   Some IMAP mailboxes are private, accessible\
    \ only to the owning user.\n   Other mailboxes are not, either because the owner\
    \ has set an Access\n   Control List [ACL] that permits access by other users,\
    \ or because it\n   is a shared mailbox.  Let's call a metadata item \"shared\"\
    \ for the\n   mailbox if any changes to the metadata items are persistent and\n\
    \   visible to all other users accessing the mailbox.  Otherwise, the\n   metadata\
    \ item is called \"private\".  Note that private metadata items\n   are still\
    \ visible to all sessions accessing the mailbox as the same\n   user.  Also note\
    \ that different mailboxes may have different metadata\n   items as shared.\n\
    \   See Section 1 for the definition of a \"CONDSTORE-aware client\" and a\n \
    \  \"CONDSTORE enabling command\".\n"
- title: 3.  IMAP Protocol Changes
  contents:
  - '3.  IMAP Protocol Changes

    '
- title: 3.1.  New OK Untagged Responses for SELECT and EXAMINE
  contents:
  - "3.1.  New OK Untagged Responses for SELECT and EXAMINE\n   This document adds\
    \ two new response codes, HIGHESTMODSEQ and\n   NOMODSEQ.  One of those response\
    \ codes MUST be returned in the OK\n   untagged response for a successful SELECT/EXAMINE\
    \ command.\n   When opening a mailbox, the server must check if the mailbox supports\n\
    \   the persistent storage of mod-sequences.  If the mailbox supports the\n  \
    \ persistent storage of mod-sequences and the mailbox open operation\n   succeeds,\
    \ the server MUST send the OK untagged response including\n   HIGHESTMODSEQ response\
    \ code.  If the persistent storage for the\n   mailbox is not supported, the server\
    \ MUST send the OK untagged\n   response including NOMODSEQ response code instead.\n"
- title: 3.1.1.  HIGHESTMODSEQ Response Code
  contents:
  - "3.1.1.  HIGHESTMODSEQ Response Code\n   This document adds a new response code\
    \ that is returned in the OK\n   untagged response for the SELECT and EXAMINE\
    \ commands.  A server\n   supporting the persistent storage of mod-sequences for\
    \ the mailbox\n   MUST send the OK untagged response including HIGHESTMODSEQ response\n\
    \   code with every successful SELECT or EXAMINE command:\n      OK [HIGHESTMODSEQ\
    \ <mod-sequence-value>]\n      where <mod-sequence-value> is the highest mod-sequence\
    \ value of\n      all messages in the mailbox.  When the server changes UIDVALIDITY\n\
    \      for a mailbox, it doesn't have to keep the same HIGHESTMODSEQ for\n   \
    \   the mailbox.\n   A disconnected client can use the value of HIGHESTMODSEQ\
    \ to check if\n   it has to refetch metadata from the server.  If the UIDVALIDITY\
    \ value\n   has changed for the selected mailbox, the client MUST delete the\n\
    \   cached value of HIGHESTMODSEQ.  If UIDVALIDITY for the mailbox is the\n  \
    \ same, and if the HIGHESTMODSEQ value stored in the client's cache is\n   less\
    \ than the value returned by the server, then some metadata items\n   on the server\
    \ have changed since the last synchronization, and the\n   client needs to update\
    \ its cache.  The client MAY use SEARCH MODSEQ\n   (Section 3.4) to find out exactly\
    \ which metadata items have changed.\n   Alternatively, the client MAY issue FETCH\
    \ with the CHANGEDSINCE\n   modifier (Section 3.3.1) in order to fetch data for\
    \ all messages that\n   have metadata items changed since some known modification\
    \ sequence.\n   Example 1:\n      C: A142 SELECT INBOX\n      S: * 172 EXISTS\n\
    \      S: * 1 RECENT\n      S: * OK [UNSEEN 12] Message 12 is first unseen\n \
    \     S: * OK [UIDVALIDITY 3857529045] UIDs valid\n      S: * OK [UIDNEXT 4392]\
    \ Predicted next UID\n      S: * FLAGS (\\Answered \\Flagged \\Deleted \\Seen\
    \ \\Draft)\n      S: * OK [PERMANENTFLAGS (\\Deleted \\Seen \\*)] Limited\n  \
    \    S: * OK [HIGHESTMODSEQ 715194045007]\n      S: A142 OK [READ-WRITE] SELECT\
    \ completed\n"
- title: 3.1.2.  NOMODSEQ Response Code
  contents:
  - "3.1.2.  NOMODSEQ Response Code\n   A server that doesn't support the persistent\
    \ storage of mod-sequences\n   for the mailbox MUST send the OK untagged response\
    \ including NOMODSEQ\n   response code with every successful SELECT or EXAMINE\
    \ command.  A\n   server that returned NOMODSEQ response code for a mailbox, which\n\
    \   subsequently receives one of the following commands while the mailbox\n  \
    \ is selected:\n      -  a FETCH command with the CHANGEDSINCE modifier,\n   \
    \   -  a FETCH or SEARCH command that includes the MODSEQ message data\n     \
    \    item, or\n      -  a STORE command with the UNCHANGEDSINCE modifier\n   MUST\
    \ reject any such command with the tagged BAD response.\n   Example 2:\n     \
    \ C: A142 SELECT INBOX\n      S: * 172 EXISTS\n      S: * 1 RECENT\n      S: *\
    \ OK [UNSEEN 12] Message 12 is first unseen\n      S: * OK [UIDVALIDITY 3857529045]\
    \ UIDs valid\n      S: * OK [UIDNEXT 4392] Predicted next UID\n      S: * FLAGS\
    \ (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n      S: * OK [PERMANENTFLAGS\
    \ (\\Deleted \\Seen \\*)] Limited\n      S: * OK [NOMODSEQ] Sorry, this mailbox\
    \ format doesn't support\n           modsequences\n      S: A142 OK [READ-WRITE]\
    \ SELECT completed\n"
- title: 3.2.  STORE and UID STORE Commands
  contents:
  - "3.2.  STORE and UID STORE Commands\n   This document defines the following STORE\
    \ modifier (see Section 2.5\n   of [IMAPABNF]):\n   UNCHANGEDSINCE <mod-sequence>\n\
    \      For each message specified in the message set, the server performs\n  \
    \    the following.  If the mod-sequence of any metadata item of the\n      message\
    \ is equal or less than the specified UNCHANGEDSINCE value,\n      then the requested\
    \ operation (as described by the message data\n      item) is performed.  If the\
    \ operation is successful, the server\n      MUST update the mod-sequence attribute\
    \ of the message.  An\n      untagged FETCH response MUST be sent, even if the\
    \ .SILENT suffix\n      is specified, and the response MUST include the MODSEQ\
    \ message\n      data item.  This is required to update the client's cache with\
    \ the\n      correct mod-sequence values.  See Section 3.3.2 for more details.\n\
    \      However, if the mod-sequence of any metadata item of the message\n    \
    \  is greater than the specified UNCHANGEDSINCE value, then the\n      requested\
    \ operation MUST NOT be performed.  In this case, the\n      mod-sequence attribute\
    \ of the message is not updated, and the\n      message number (or unique identifier\
    \ in the case of the UID STORE\n      command) is added to the list of messages\
    \ that failed the\n      UNCHANGESINCE test.\n      When the server finished performing\
    \ the operation on all the\n      messages in the message set, it checks for a\
    \ non-empty list of\n      messages that failed the UNCHANGESINCE test.  If this\
    \ list is\n      non-empty, the server MUST return in the tagged response a\n\
    \      MODIFIED response code.  The MODIFIED response code includes the\n    \
    \  message set (for STORE) or set of UIDs (for UID STORE) of all\n      messages\
    \ that failed the UNCHANGESINCE test.\n   Example 3:\n      All messages pass\
    \ the UNCHANGESINCE test.\n      C: a103 UID STORE 6,4,8 (UNCHANGEDSINCE 12121230045)\n\
    \          +FLAGS.SILENT (\\Deleted)\n      S: * 1 FETCH (UID 4 MODSEQ (12121231000))\n\
    \      S: * 2 FETCH (UID 6 MODSEQ (12121230852))\n      S: * 4 FETCH (UID 8 MODSEQ\
    \ (12121130956))\n      S: a103 OK Conditional Store completed\n   Example 4:\n\
    \      C: a104 STORE * (UNCHANGEDSINCE 12121230045) +FLAGS.SILENT\n         (\\\
    Deleted $Processed)\n      S: * 50 FETCH (MODSEQ (12111230047))\n      S: a104\
    \ OK Store (conditional) completed\n   Example 5:\n      C: c101 STORE 1 (UNCHANGEDSINCE\
    \ 12121230045) -FLAGS.SILENT\n         (\\Deleted)\n      S: * OK [HIGHESTMODSEQ\
    \ 12111230047]\n      S: * 50 FETCH (MODSEQ (12111230048))\n      S: c101 OK Store\
    \ (conditional) completed\n      HIGHESTMODSEQ response code was sent by the server\
    \ presumably\n      because this was the first CONDSTORE enabling command.\n \
    \  Example 6:\n      In spite of the failure of the conditional STORE operation\
    \ for\n      message 7, the server continues to process the conditional STORE\n\
    \      in order to find all messages that fail the test.\n      C: d105 STORE\
    \ 7,5,9 (UNCHANGEDSINCE 320162338)\n          +FLAGS.SILENT (\\Deleted)\n    \
    \  S: * 5 FETCH (MODSEQ (320162350))\n      S: d105 OK [MODIFIED 7,9] Conditional\
    \ STORE failed\n   Example 7:\n      Same as above, but the server follows the\
    \ SHOULD recommendation in\n      Section 6.4.6 of [IMAP4].\n      C: d105 STORE\
    \ 7,5,9 (UNCHANGEDSINCE 320162338)\n          +FLAGS.SILENT (\\Deleted)\n    \
    \  S: * 7 FETCH (MODSEQ (320162342) FLAGS (\\Seen \\Deleted))\n      S: * 5 FETCH\
    \ (MODSEQ (320162350))\n      S: * 9 FETCH (MODSEQ (320162349) FLAGS (\\Answered))\n\
    \      S: d105 OK [MODIFIED 7,9] Conditional STORE failed\n      Use of UNCHANGEDSINCE\
    \ with a modification sequence of 0 always\n      fails if the metadata item exists.\
    \  A system flag MUST always be\n      considered existent, whether it was set\
    \ or not.\n   Example 8:\n      C: a102 STORE 12 (UNCHANGEDSINCE 0)\n        \
    \  +FLAGS.SILENT ($MDNSent)\n      S: a102 OK [MODIFIED 12] Conditional STORE\
    \ failed\n      The client has tested the presence of the $MDNSent user-defined\n\
    \      keyword.\n   Note: A client trying to make an atomic change to the state\
    \ of a\n   particular metadata item (or a set of metadata items) should be\n \
    \  prepared to deal with the case when the server returns the MODIFIED\n   response\
    \ code if the state of the metadata item being watched hasn't\n   changed (but\
    \ the state of some other metadata item has).  This is\n   necessary, because\
    \ some servers don't store separate mod-sequences\n   for different metadata items.\
    \  However, a server implementation\n   SHOULD avoid generating spurious MODIFIED\
    \ responses for +FLAGS/-FLAGS\n   STORE operations, even when the server stores\
    \ a single mod-sequence\n   per message.  Section 5 describes how this can be\
    \ achieved.\n   Unless the server has included an unsolicited FETCH to update\n\
    \   client's knowledge about messages that have failed the UNCHANGEDSINCE\n  \
    \ test, upon receipt of the MODIFIED response code, the client SHOULD\n   try\
    \ to figure out if the required metadata items have indeed changed\n   by issuing\
    \ FETCH or NOOP command.  It is RECOMMENDED that the server\n   avoids the need\
    \ for the client to do that by sending an unsolicited\n   FETCH response (Examples\
    \ 9 and 10).\n   If the required metadata items haven't changed, the client SHOULD\n\
    \   retry the command with the new mod-sequence.  The client SHOULD allow\n  \
    \ for a configurable but reasonable number of retries (at least 2).\n   Example\
    \ 9:\n      In the example below, the server returns the MODIFIED response\n \
    \     code without sending information describing why the STORE\n      UNCHANGEDSINCE\
    \ operation has failed.\n      C: a106 STORE 100:150 (UNCHANGEDSINCE 212030000000)\n\
    \          +FLAGS.SILENT ($Processed)\n      S: * 100 FETCH (MODSEQ (303181230852))\n\
    \      S: * 102 FETCH (MODSEQ (303181230852))\n      ...\n      S: * 150 FETCH\
    \ (MODSEQ (303181230852))\n      S: a106 OK [MODIFIED 101] Conditional STORE failed\n\
    \      The flag $Processed was set on the message 101...\n      C: a107 NOOP\n\
    \      S: * 101 FETCH (MODSEQ (303011130956) FLAGS ($Processed))\n      S: a107\
    \ OK\n      Or the flag hasn't changed, but another has (note that this server\n\
    \      behaviour is discouraged.  Server implementers should also see\n      Section\
    \ 5)...\n      C: b107 NOOP\n      S: * 101 FETCH (MODSEQ (303011130956) FLAGS\
    \ (\\Deleted \\Answered))\n      S: b107 OK\n      ...and the client retries the\
    \ operation for the message 101 with\n      the updated UNCHANGEDSINCE value\n\
    \      C: b108 STORE 101 (UNCHANGEDSINCE 303011130956)\n          +FLAGS.SILENT\
    \ ($Processed)\n      S: * 101 FETCH (MODSEQ (303181230852))\n      S: b108 OK\
    \ Conditional Store completed\n   Example 10:\n      Same as above, but the server\
    \ avoids the need for the client to\n      poll for changes.\n      The flag $Processed\
    \ was set on the message 101 by another\n      client...\n      C: a106 STORE\
    \ 100:150 (UNCHANGEDSINCE 212030000000)\n          +FLAGS.SILENT ($Processed)\n\
    \      S: * 100 FETCH (MODSEQ (303181230852))\n      S: * 101 FETCH (MODSEQ (303011130956)\
    \ FLAGS ($Processed))\n      S: * 102 FETCH (MODSEQ (303181230852))\n      ...\n\
    \      S: * 150 FETCH (MODSEQ (303181230852))\n      S: a106 OK [MODIFIED 101]\
    \ Conditional STORE failed\n      Or the flag hasn't changed, but another has\
    \ (note that this server\n      behaviour is discouraged.  Server implementers\
    \ should also see\n      Section 5)...\n      C: a106 STORE 100:150 (UNCHANGEDSINCE\
    \ 212030000000)\n          +FLAGS.SILENT ($Processed)\n      S: * 100 FETCH (MODSEQ\
    \ (303181230852))\n      S: * 101 FETCH (MODSEQ (303011130956) FLAGS (\\Deleted\
    \ \\Answered))\n      S: * 102 FETCH (MODSEQ (303181230852))\n      ...\n    \
    \  S: * 150 FETCH (MODSEQ (303181230852))\n      S: a106 OK [MODIFIED 101] Conditional\
    \ STORE failed\n      ...and the client retries the operation for the message\
    \ 101 with\n      the updated UNCHANGEDSINCE value\n      C: b108 STORE 101 (UNCHANGEDSINCE\
    \ 303011130956)\n          +FLAGS.SILENT ($Processed)\n      S: * 101 FETCH (MODSEQ\
    \ (303181230852))\n      S: b108 OK Conditional Store completed\n      Or the\
    \ flag hasn't changed, but another has (nice server\n      behaviour.  Server\
    \ implementers should also see Section 5)...\n      C: a106 STORE 100:150 (UNCHANGEDSINCE\
    \ 212030000000)\n          +FLAGS.SILENT ($Processed)\n      S: * 100 FETCH (MODSEQ\
    \ (303181230852))\n      S: * 101 FETCH (MODSEQ (303011130956) FLAGS ($Processed\
    \ \\Deleted\n           \\Answered))\n      S: * 102 FETCH (MODSEQ (303181230852))\n\
    \      ...\n      S: * 150 FETCH (MODSEQ (303181230852))\n      S: a106 OK Conditional\
    \ STORE completed\n   Example 11:\n      The following example is based on the\
    \ example from the Section\n      4.2.3 of [RFC-2180] and demonstrates that the\
    \ MODIFIED response\n      code may be also returned in the tagged NO response.\n\
    \      Client tries to conditionally STORE flags on a mixture of expunged\n  \
    \    and non-expunged messages; one message fails the UNCHANGEDSINCE\n      test.\n\
    \      C: B001 STORE 1:7 (UNCHANGEDSINCE 320172338) +FLAGS (\\SEEN)\n      S:\
    \ * 1 FETCH (MODSEQ (320172342) FLAGS (\\SEEN))\n      S: * 3 FETCH (MODSEQ (320172342)\
    \ FLAGS (\\SEEN))\n      S: B001 NO [MODIFIED 2] Some of the messages no longer\
    \ exist.\n      C: B002 NOOP\n      S: * 4 EXPUNGE\n      S: * 4 EXPUNGE\n   \
    \   S: * 4 EXPUNGE\n      S: * 4 EXPUNGE\n      S: * 2 FETCH (MODSEQ (320172340)\
    \ FLAGS (\\Deleted \\Answered))\n      S: B002 OK NOOP Completed.\n      By receiving\
    \ FETCH responses for messages 1 and 3, and EXPUNGE\n      responses that indicate\
    \ that messages 4 through 7 have been\n      expunged, the client retries the\
    \ operation only for the message 2.\n      The updated UNCHANGEDSINCE value is\
    \ used.\n      C: b003 STORE 2 (UNCHANGEDSINCE 320172340) +FLAGS (\\Seen)\n  \
    \    S: * 2 FETCH (MODSEQ (320180050))\n      S: b003 OK Conditional Store completed\n\
    \   Note: If a message is specified multiple times in the message set,\n   and\
    \ the server doesn't internally eliminate duplicates from the\n   message set,\
    \ it MUST NOT fail the conditional STORE operation for the\n   second (or subsequent)\
    \ occurrence of the message if the operation\n   completed successfully for the\
    \ first occurrence.  For example, if the\n   client specifies:\n         e105\
    \ STORE 7,3:9 (UNCHANGEDSINCE 12121230045)\n          +FLAGS.SILENT (\\Deleted)\n\
    \   the server must not fail the operation for message 7 as part of\n   processing\
    \ \"3:9\" if it succeeded when message 7 was processed the\n   first time.\n \
    \  Once the client specified the UNCHANGEDSINCE modifier in a STORE\n   command,\
    \ the server MUST include the MODSEQ fetch response data items\n   in all subsequent\
    \ unsolicited FETCH responses.\n   This document also changes the behaviour of\
    \ the server when it has\n   performed a STORE or UID STORE command and the UNCHANGEDSINCE\n\
    \   modifier is not specified.  If the operation is successful for a\n   message,\
    \ the server MUST update the mod-sequence attribute of the\n   message.  The server\
    \ is REQUIRED to include the mod-sequence value\n   whenever it decides to send\
    \ the unsolicited FETCH response to all\n   CONDSTORE-aware clients that have\
    \ opened the mailbox containing the\n   message.\n   Server implementers should\
    \ also see Section 3.8 for additional\n   quality of implementation issues related\
    \ to the STORE command.\n"
- title: 3.3.  FETCH and UID FETCH Commands
  contents:
  - '3.3.  FETCH and UID FETCH Commands

    '
- title: 3.3.1.  CHANGEDSINCE FETCH Modifier
  contents:
  - "3.3.1.  CHANGEDSINCE FETCH Modifier\n   This document defines the following FETCH\
    \ modifier (see Section 2.4\n   of [IMAPABNF]):\n   CHANGEDSINCE <mod-sequence>\n\
    \      CHANGEDSINCE FETCH modifier allows to create a further subset of\n    \
    \  the list of messages described by sequence set.  The information\n      described\
    \ by message data items is only returned for messages that\n      have mod-sequence\
    \ bigger than <mod-sequence>.\n      When CHANGEDSINCE FETCH modifier is specified,\
    \ it implicitly adds\n      MODSEQ FETCH message data item (Section 3.3.2).\n\
    \   Example 12:\n      C: s100 UID FETCH 1:* (FLAGS) (CHANGEDSINCE 12345)\n  \
    \    S: * 1 FETCH (UID 4 MODSEQ (65402) FLAGS (\\Seen))\n      S: * 2 FETCH (UID\
    \ 6 MODSEQ (75403) FLAGS (\\Deleted))\n      S: * 4 FETCH (UID 8 MODSEQ (29738)\
    \ FLAGS ($NoJunk $AutoJunk\n           $MDNSent))\n      S: s100 OK FETCH completed\n"
- title: 3.3.2.  MODSEQ Message Data Item in FETCH Command
  contents:
  - "3.3.2.  MODSEQ Message Data Item in FETCH Command\n   This extension adds a MODSEQ\
    \ message data item to the FETCH command.\n   The MODSEQ message data item allows\
    \ clients to retrieve mod-sequence\n   values for a range of messages in the currently\
    \ selected mailbox.\n   Once the client specified the MODSEQ message data item\
    \ in a FETCH\n   request, the server MUST include the MODSEQ fetch response data\
    \ items\n   in all subsequent unsolicited FETCH responses.\n   Syntax:  MODSEQ\n\
    \      The MODSEQ message data item causes the server to return MODSEQ\n     \
    \ fetch response data items.\n   Syntax:  MODSEQ ( <permsg-modsequence> )\n  \
    \    MODSEQ response data items contain per-message mod-sequences.\n      The\
    \ MODSEQ response data item is returned if the client issued\n      FETCH with\
    \ MODSEQ message data item.  It also allows the server to\n      notify the client\
    \ about mod-sequence changes caused by conditional\n      STOREs (Section 3.2)\
    \ and/or changes caused by external sources.\n   Example 13:\n      C: a FETCH\
    \ 1:3 (MODSEQ)\n      S: * 1 FETCH (MODSEQ (624140003))\n      S: * 2 FETCH (MODSEQ\
    \ (624140007))\n      S: * 3 FETCH (MODSEQ (624140005))\n      S: a OK Fetch complete\n\
    \      In this example, the client requests per-message mod-sequences for\n  \
    \    a set of messages.\n   When a flag for a message is modified in a different\
    \ session, the\n   server sends an unsolicited FETCH response containing the mod-\n\
    \   sequence for the message.\n   Example 14:\n      (Session 1, authenticated\
    \ as a user \"alex\").  The user adds a\n      shared flag \\Deleted:\n      \
    \   C: A142 SELECT INBOX\n         ...\n         S: * FLAGS (\\Answered \\Flagged\
    \ \\Deleted \\Seen \\Draft)\n         S: * OK [PERMANENTFLAGS (\\Answered \\Deleted\
    \ \\Seen \\*)] Limited\n         ...\n         C: A160 STORE 7 +FLAGS.SILENT (\\\
    Deleted)\n         S: * 7 FETCH (MODSEQ (2121231000))\n         S: A160 OK Store\
    \ completed\n      (Session 2, also authenticated as the user \"alex\").  Any\
    \ changes\n      to flags are always reported to all sessions authenticated as\
    \ the\n      same user as in the session 1.\n         C: C180 NOOP\n         S:\
    \ * 7 FETCH (FLAGS (\\Deleted \\Answered) MODSEQ (12121231000))\n         S: C180\
    \ OK Noop completed\n      (Session 3, authenticated as a user \"andrew\").  As\
    \ \\Deleted is a\n      shared flag, changes in session 1 are also reported in\
    \ session 3:\n         C: D210 NOOP\n         S: * 7 FETCH (FLAGS (\\Deleted \\\
    Answered) MODSEQ (12121231000))\n         S: D210 OK Noop completed\n      The\
    \ user modifies a private flag \\Seen in session 1...\n         C: A240 STORE\
    \ 7 +FLAGS.SILENT (\\Seen)\n         S: * 7 FETCH (MODSEQ (12121231777))\n   \
    \      S: A240 OK Store completed\n      ...which is only reported in session\
    \ 2...\n         C: C270 NOOP\n         S: * 7 FETCH (FLAGS (\\Deleted \\Answered\
    \ \\Seen) MODSEQ\n              (12121231777))\n         S: C270 OK Noop completed\n\
    \      ...but not in session 3.\n         C: D300 NOOP\n         S: D300 OK Noop\
    \ completed\n      And finally, the user removes flags \\Answered (shared) and\
    \ \\Seen\n      (private) in session 1.\n         C: A330 STORE 7 -FLAGS.SILENT\
    \ (\\Answered \\Seen)\n         S: * 7 FETCH (MODSEQ (12121245160))\n        \
    \ S: A330 OK Store completed\n      Both changes are reported in the session 2...\n\
    \         C: C360 NOOP\n         S: * 7 FETCH (FLAGS (\\Deleted) MODSEQ (12121245160))\n\
    \         S: C360 OK Noop completed\n      ...and only changes to shared flags\
    \ are reported in session 3.\n         C: D390 NOOP\n         S: * 7 FETCH (FLAGS\
    \ (\\Deleted) MODSEQ (12121245160))\n         S: D390 OK Noop completed\n   Server\
    \ implementers should also see Section 3.8 for additional\n   quality of implementation\
    \ issues related to the FETCH command.\n"
- title: 3.4.  MODSEQ Search Criterion in SEARCH
  contents:
  - "3.4.  MODSEQ Search Criterion in SEARCH\n   The MODSEQ criterion for the SEARCH\
    \ command allows a client to search\n   for the metadata items that were modified\
    \ since a specified moment.\n   Syntax:  MODSEQ [<entry-name> <entry-type-req>]\
    \ <mod-sequence-valzer>\n      Messages that have modification values that are\
    \ equal to or\n      greater than <mod-sequence-valzer>.  This allows a client,\
    \ for\n      example, to find out which messages contain metadata items that\n\
    \      have changed since the last time it updated its disconnected\n      cache.\
    \  The client may also specify <entry-name> (name of metadata\n      item) and\
    \ <entry-type-req> (type of metadata item) before\n      <mod-sequence-valzer>.\
    \  <entry-type-req> can be one of \"shared\",\n      \"priv\" (private), or \"\
    all\".  The latter means that the server\n      should use the biggest value among\
    \ \"priv\" and \"shared\" mod-\n      sequences for the metadata item.  If the\
    \ server doesn't store\n      internally separate mod-sequences for different\
    \ metadata items, it\n      MUST ignore <entry-name> and <entry-type-req>.  Otherwise,\
    \ the\n      server should use them to narrow down the search.\n      For a flag\
    \ <flagname>, the corresponding <entry-name> has a form\n      \"/flags/<flagname>\"\
    \ as defined in [IMAPABNF].  Note that the\n      leading \"\\\" character that\
    \ denotes a system flag has to be escaped\n      as per Section 4.3 of [IMAP4],\
    \ as the <entry-name> uses syntax for\n      quoted strings.\n   If client specifies\
    \ a MODSEQ criterion in a SEARCH command and the\n   server returns a non-empty\
    \ SEARCH result, the server MUST also append\n   (to the end of the untagged SEARCH\
    \ response) the highest mod-sequence\n   for all messages being returned.  See\
    \ also Section 3.5.\n   Example 15:\n      C: a SEARCH MODSEQ \"/flags/\\\\draft\"\
    \ all 620162338\n      S: * SEARCH 2 5 6 7 11 12 18 19 20 23 (MODSEQ 917162500)\n\
    \      S: a OK Search complete\n      In the above example, the message numbers\
    \ of any messages\n      containing the string \"IMAP4\" in the \"value\" attribute\
    \ of the\n      \"/comment\" entry and having a mod-sequence equal to or greater\n\
    \      than 620162338 for the \"\\Draft\" flag are returned in the search\n  \
    \    results.\n   Example 16:\n      C: t SEARCH OR NOT MODSEQ 720162338 LARGER\
    \ 50000\n      S: * SEARCH\n      S: t OK Search complete, nothing found\n"
- title: 3.5.  Modified SEARCH Untagged Response
  contents:
  - "3.5.  Modified SEARCH Untagged Response\n   Data:       zero or more numbers\n\
    \               mod-sequence value (omitted if no match)\n   This document extends\
    \ syntax of the untagged SEARCH response to\n   include the highest mod-sequence\
    \ for all messages being returned.\n   If a client specifies a MODSEQ criterion\
    \ in a SEARCH (or UID SEARCH)\n   command and the server returns a non-empty SEARCH\
    \ result, the server\n   MUST also append (to the end of the untagged SEARCH response)\
    \ the\n   highest mod-sequence for all messages being returned.  See Section\n\
    \   3.4 for examples.\n"
- title: 3.6.  HIGHESTMODSEQ Status Data Items
  contents:
  - "3.6.  HIGHESTMODSEQ Status Data Items\n   This document defines a new status\
    \ data item:\n   HIGHESTMODSEQ\n      The highest mod-sequence value of all messages\
    \ in the mailbox.\n      This is the same value that is returned by the server\
    \ in the\n      HIGHESTMODSEQ response code in an OK untagged response (see\n\
    \      Section 3.1.1).  If the server doesn't support the persistent\n      storage\
    \ of mod-sequences for the mailbox (see Section 3.1.2), the\n      server MUST\
    \ return 0 as the value of HIGHESTMODSEQ status data\n      item.\n   Example\
    \ 17:\n      C: A042 STATUS blurdybloop (UIDNEXT MESSAGES HIGHESTMODSEQ)\n   \
    \   S: * STATUS blurdybloop (MESSAGES 231 UIDNEXT 44292\n           HIGHESTMODSEQ\
    \ 7011231777)\n      S: A042 OK STATUS completed\n"
- title: 3.7.  CONDSTORE Parameter to SELECT and EXAMINE
  contents:
  - "3.7.  CONDSTORE Parameter to SELECT and EXAMINE\n   The CONDSTORE extension defines\
    \ a single optional select parameter,\n   \"CONDSTORE\", which tells the server\
    \ that it MUST include the MODSEQ\n   fetch response data items in all subsequent\
    \ unsolicited FETCH\n   responses.\n   The CONDSTORE parameter to SELECT/EXAMINE\
    \ helps avoid a race\n   condition that might arise when one or more metadata\
    \ items are\n   modified in another session after the server has sent the\n  \
    \ HIGHESTMODSEQ response code and before the client was able to issue a\n   CONDSTORE\
    \ enabling command.\n   Example 18:\n      C: A142 SELECT INBOX (CONDSTORE)\n\
    \      S: * 172 EXISTS\n      S: * 1 RECENT\n      S: * OK [UNSEEN 12] Message\
    \ 12 is first unseen\n      S: * OK [UIDVALIDITY 3857529045] UIDs valid\n    \
    \  S: * OK [UIDNEXT 4392] Predicted next UID\n      S: * FLAGS (\\Answered \\\
    Flagged \\Deleted \\Seen \\Draft)\n      S: * OK [PERMANENTFLAGS (\\Deleted \\\
    Seen \\*)] Limited\n      S: * OK [HIGHESTMODSEQ 715194045007]\n      S: A142\
    \ OK [READ-WRITE] SELECT completed, CONDSTORE is now enabled\n"
- title: 3.8.  Additional Quality-of-Implementation Issues
  contents:
  - "3.8.  Additional Quality-of-Implementation Issues\n   Server implementations\
    \ should follow the following rule, which\n   applies to any successfully completed\
    \ STORE/UID STORE (with and\n   without UNCHANGEDSINCE modifier), as well as to\
    \ a FETCH command that\n   implicitly sets \\Seen flag:\n      Adding the flag\
    \ when it is already present or removing when it is\n      not present SHOULD\
    \ NOT change the mod-sequence.\n   This will prevent spurious client synchronization\
    \ requests.\n   However, note that client implementers MUST NOT rely on this server\n\
    \   behavior.  A client can't distinguish between the case when a server\n   has\
    \ violated the SHOULD mentioned above, and that when one or more\n   clients set\
    \ and unset (or unset and set) the flag in another session.\n"
- title: 4.  Formal Syntax
  contents:
  - "4.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) [ABNF] notation.  Elements not defined here can be found\n   in\
    \ the formal syntax of the ABNF [ABNF], IMAP [IMAP4], and IMAP ABNF\n   extensions\
    \ [IMAPABNF] specifications.\n   Except as noted otherwise, all alphabetic characters\
    \ are case-\n   insensitive.  The use of upper- or lowercase characters to define\n\
    \   token strings is for editorial clarity only.  Implementations MUST\n   accept\
    \ these strings in a case-insensitive fashion.\n   capability          =/ \"CONDSTORE\"\
    \n   status-att          =/ \"HIGHESTMODSEQ\"\n                          ;; extends\
    \ non-terminal defined in RFC 3501.\n   status-att-val      =/ \"HIGHESTMODSEQ\"\
    \ SP mod-sequence-valzer\n                          ;; extends non-terminal defined\
    \ in [IMAPABNF].\n                          ;; Value 0 denotes that the mailbox\
    \ doesn't\n                          ;; support persistent mod-sequences\n   \
    \                       ;; as described in Section 3.1.2\n   store-modifier  \
    \    =/ \"UNCHANGEDSINCE\" SP mod-sequence-valzer\n                          ;;\
    \ Only a single \"UNCHANGEDSINCE\" may be\n                          ;; specified\
    \ in a STORE operation\n   fetch-modifier      =/ chgsince-fetch-mod\n       \
    \                   ;; conforms to the generic \"fetch-modifier\"\n          \
    \                ;; syntax defined in [IMAPABNF].\n   chgsince-fetch-mod  = \"\
    CHANGEDSINCE\" SP mod-sequence-value\n                          ;; CHANGEDSINCE\
    \ FETCH modifier conforms to\n                          ;; the fetch-modifier\
    \ syntax\n   fetch-att           =/ fetch-mod-sequence\n                     \
    \     ;; modifies original IMAP4 fetch-att\n   fetch-mod-sequence  = \"MODSEQ\"\
    \n   fetch-mod-resp      = \"MODSEQ\" SP \"(\" permsg-modsequence \")\"\n   msg-att-dynamic\
    \     =/ fetch-mod-resp\n   search-key          =/ search-modsequence\n      \
    \                    ;; modifies original IMAP4 search-key\n                 \
    \         ;;\n                          ;; This change applies to all commands\n\
    \                          ;; referencing this non-terminal, in\n            \
    \              ;; particular SEARCH.\n   search-modsequence  = \"MODSEQ\" [search-modseq-ext]\
    \ SP\n                         mod-sequence-valzer\n   search-modseq-ext   = SP\
    \ entry-name SP entry-type-req\n   resp-text-code      =/ \"HIGHESTMODSEQ\" SP\
    \ mod-sequence-value /\n                          \"NOMODSEQ\" /\n           \
    \               \"MODIFIED\" SP set\n   entry-name          = entry-flag-name\n\
    \   entry-flag-name     = DQUOTE \"/flags/\" attr-flag DQUOTE\n              \
    \            ;; each system or user defined flag <flag>\n                    \
    \      ;; is mapped to \"/flags/<flag>\".\n                          ;;\n    \
    \                      ;; <entry-flag-name> follows the escape rules\n       \
    \                   ;; used by \"quoted\" string as described in\n           \
    \               ;; Section 4.3 of [IMAP4], e.g., for the flag\n              \
    \            ;; \\Seen the corresponding <entry-name> is\n                   \
    \       ;; \"/flags/\\\\seen\", and for the flag\n                          ;;\
    \ $MDNSent, the corresponding <entry-name>\n                          ;; is \"\
    /flags/$mdnsent\".\n   entry-type-resp     = \"priv\" / \"shared\"\n         \
    \                 ;; metadata item type\n   entry-type-req      = entry-type-resp\
    \ / \"all\"\n                          ;; perform SEARCH operation on private\n\
    \                          ;; metadata item, shared metadata item or both\n  \
    \ permsg-modsequence  = mod-sequence-value\n                          ;; per message\
    \ mod-sequence\n   mod-sequence-value  = 1*DIGIT\n                          ;;\
    \ Positive unsigned 64-bit integer\n                          ;; (mod-sequence)\n\
    \                          ;; (1 <= n < 18,446,744,073,709,551,615)\n   mod-sequence-valzer\
    \ = \"0\" / mod-sequence-value\n   search-sort-mod-seq = \"(\" \"MODSEQ\" SP mod-sequence-value\
    \ \")\"\n   select-param        =/ condstore-param\n                         \
    \ ;; conforms to the generic \"select-param\"\n                          ;; non-terminal\
    \ syntax defined in [IMAPABNF].\n   condstore-param     = \"CONDSTORE\"\n   mailbox-data\
    \        =/ \"SEARCH\" [1*(SP nz-number) SP\n                          search-sort-mod-seq]\n\
    \   attr-flag           = \"\\\\Answered\" / \"\\\\Flagged\" / \"\\\\Deleted\"\
    \ /\n                         \"\\\\Seen\" / \"\\\\Draft\" / attr-flag-keyword\
    \ /\n                         attr-flag-extension\n                          ;;\
    \ Does not include \"\\\\Recent\"\n   attr-flag-extension = \"\\\\\" atom\n  \
    \                        ;; Future expansion.  Client implementations\n      \
    \                    ;; MUST accept flag-extension flags.  Server\n          \
    \                ;; implementations MUST NOT generate\n                      \
    \    ;; flag-extension flags except as defined by\n                          ;;\
    \ future standard or standards-track\n                          ;; revisions of\
    \ [IMAP4].\n   attr-flag-keyword   = atom\n"
- title: 5.  Server Implementation Considerations
  contents:
  - "5.  Server Implementation Considerations\n   This section describes how a server\
    \ implementation that doesn't store\n   separate per-metadata mod-sequences for\
    \ different metadata items can\n   avoid sending the MODIFIED response to any\
    \ of the following\n   conditional STORE operations:\n      +FLAGS\n      -FLAGS\n\
    \      +FLAGS.SILENT\n      -FLAGS.SILENT\n   Note that the optimization described\
    \ in this section can't be\n   performed in case of a conditional STORE FLAGS\
    \ operation.\n   Let's use the following example.  The client has issued\n   \
    \   C: a106 STORE 100:150 (UNCHANGEDSINCE 212030000000)\n         +FLAGS.SILENT\
    \ ($Processed)\n   When the server receives the command and parses it successfully,\
    \ it\n   iterates through the message set and tries to execute the conditional\n\
    \   STORE command for each message.\n   Each server internally works as a client,\
    \ i.e., it has to cache the\n   current state of all IMAP flags as it is known\
    \ to the client.  In\n   order to report flag changes to the client, the server\
    \ compares the\n   cached values with the values in its database for IMAP flags.\n\
    \   Imagine that another client has changed the state of a flag \\Deleted\n  \
    \ on the message 101 and that the change updated the mod-sequence for\n   the\
    \ message.  The server knows that the mod-sequence for the mailbox\n   has changed;\
    \ however, it also knows that:\n   a) the client is not interested in \\Deleted\
    \ flag, as it hasn't\n      included it in +FLAGS.SILENT operation; and\n   b)\
    \ the state of the flag $Processed hasn't changed (the server can\n      determine\
    \ this by comparing cached flag state with the state of\n      the flag in the\
    \ database).\n   Therefore, the server doesn't have to report MODIFIED to the\
    \ client.\n   Instead, the server may set $Processed flag, update the mod-sequence\n\
    \   for the message 101 once again and send an untagged FETCH response\n   with\
    \ new mod-sequence and flags:\n      S: * 101 FETCH (MODSEQ (303011130956)\n \
    \        FLAGS ($Processed \\Deleted \\Answered))\n   See also Section 3.8 for\
    \ additional quality-of-implementation issues.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   It is believed that the Conditional STORE extension\
    \ doesn't raise any\n   new security concerns that are not already discussed in\
    \ [IMAP4].\n   However, the availability of this extension may make it possible\
    \ for\n   IMAP4 to be used in critical applications it could not be used for\n\
    \   previously, making correct IMAP server implementation and operation\n   even\
    \ more important.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IMAP4 capabilities are registered by publishing a\
    \ standards track or\n   IESG approved experimental RFC.  The registry is currently\
    \ located\n   at:\n         http://www.iana.org/assignments/imap4-capabilities\n\
    \   This document defines the CONDSTORE IMAP capability.  IANA has added\n   it\
    \ to the registry accordingly.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [KEYWORDS] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [ABNF]     Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n\
    \              Specifications: ABNF\", RFC 4234, October 2005.\n   [IMAP4]   \
    \ Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n              4rev1\"\
    , RFC 3501, March 2003.\n   [IMAPABNF] Melnikov, A. and C. Daboo, \"Collected\
    \ Extensions to IMAP4\n              ABNF\", RFC 4466, April 2006.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ACAP]     Newman, C. and J. Myers, \"ACAP --\
    \ Application\n              Configuration Access Protocol\", RFC 2244, November\
    \ 1997.\n   [ACL]      Melnikov, A., \"IMAP4 Access Control List (ACL) Extension\"\
    ,\n              RFC 4314, December 2005.\n   [ANN]      Daboo, C. and R. Gellens,\
    \ \"IMAP ANNOTATE Extension\", Work\n              in Progress, March 2006.\n\
    \   [NTP]      Mills, D., \"Network Time Protocol (Version 3)\n              Specification,\
    \ Implementation and Analysis\", RFC 1305,\n              March 1992.\n   [RFC-2180]\
    \ Gahrns, M., \"IMAP4 Multi-Accessed Mailbox Practice\", RFC\n              2180,\
    \ July 1997.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Some text was borrowed from \"IMAP ANNOTATE Extension\"\
    \ [ANN] by\n   Randall Gellens and Cyrus Daboo and from \"ACAP -- Application\n\
    \   Configuration Access Protocol\" [ACAP] by Chris Newman and John Myers.\n \
    \  Many thanks to Randall Gellens for his thorough review of the\n   document.\n\
    \   The authors also acknowledge the feedback provided by Cyrus Daboo,\n   Larry\
    \ Greenfield, Chris Newman, Harrie Hazewinkel, Arnt Gulbrandsen,\n   Timo Sirainen,\
    \ Mark Crispin, Ned Freed, Ken Murchison, and Dave\n   Cridland.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business\
    \ Village\n   36 Station Road\n   Hampton, Middlesex\n   TW12 2BX,\n   United\
    \ Kingdom\n   EMail: Alexey.Melnikov@isode.com\n   Steve Hole\n   ACI WorldWide/MessagingDirect\n\
    \   #1807, 10088 102 Ave\n   Edmonton, AB\n   T5J 2Z1\n   Canada\n   EMail: Steve.Hole@messagingdirect.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
